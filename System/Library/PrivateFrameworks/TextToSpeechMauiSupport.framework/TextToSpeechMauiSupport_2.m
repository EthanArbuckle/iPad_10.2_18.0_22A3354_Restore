uint64_t mosyntsentana_DisposeTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mosyntdata_DisposeSyntTree(a1, a3);
}

uint64_t InsertRuleEdge(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9;
  uint64_t RuleVisAndCost;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t i;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  __int16 *v40;
  __int16 *v41;
  int v42;
  char v43;
  int v44;
  uint64_t v45;
  _OWORD v46[3];
  __int16 v47;
  _QWORD v48[2];
  _QWORD v49[4];

  v49[2] = *MEMORY[0x24BDAC8D0];
  v9 = a2 + 100064;
  if (*(_DWORD *)(a2 + 100084) > *(_DWORD *)(a2 + 24))
    return 0;
  v44 = 0;
  v48[1] = 0;
  v49[0] = 0;
  v48[0] = 0;
  *(_QWORD *)((char *)v49 + 6) = 0;
  v43 = 0;
  v42 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  RuleVisAndCost = mosyntkbsgram_GetRuleVisAndCost(a9, &v43, &v44);
  if ((RuleVisAndCost & 0x80000000) != 0)
    return RuleVisAndCost;
  if (a7)
  {
    v44 += *(_DWORD *)(a7 + 96);
    *(_BYTE *)(a7 + 112) = 1;
  }
  v41 = (__int16 *)a7;
  if (a8)
  {
    v44 += *(_DWORD *)(a8 + 96);
    *(_BYTE *)(a8 + 112) = 1;
  }
  v40 = (__int16 *)a8;
  v19 = a2 + 8 * a6;
  v21 = *(_QWORD *)(v19 + 32);
  v20 = (uint64_t *)(v19 + 32);
  v39 = a3 % 37;
  for (i = *(_QWORD *)(v21 + 8 * (a3 % 37)); ; i = *(_QWORD *)i)
  {
    v45 = i;
    if (!i)
      goto LABEL_20;
    if (*(__int16 *)(i + 28) == a3 && *(__int16 *)(i + 24) == a5)
    {
      v23 = mosyntknowl_DiffFeat(a1, (unsigned __int16 *)(i + 32), (unsigned __int16 *)a4);
      i = v45;
      if (!v23)
        break;
    }
  }
  if (v45)
  {
    v24 = v44;
    if (v44 >= *(_DWORD *)(v45 + 96))
      return RuleVisAndCost;
    if (*(_BYTE *)(v45 + 58) && *(int *)a2 >= 1)
    {
      v42 = 0;
      v25 = mosyntkbsymtab_AppConsFeatToString(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(v45 + 28), (__int16 *)(v45 + 32), (uint64_t)v46, 50, &v42);
      if ((v25 & 0x80000000) == 0)
        return mosyntbase_WString3Ln(a1, "***** illegal attempt to replace terminal constituent '", 0, (unsigned __int8 *)v46, 50, "' by rule-generated identical constituent", 0);
      return v25;
    }
    ++*(_DWORD *)(v9 + 32);
    ++*(_DWORD *)(v9 + 56);
    *(_OWORD *)(i + 80) = *(_OWORD *)a9;
    *(_DWORD *)(i + 96) = v24;
    *(_QWORD *)(i + 64) = v41;
    *(_QWORD *)(i + 72) = v40;
    if (!*(_BYTE *)(i + 56))
    {
      *(_QWORD *)(i + 16) = 0;
      v37 = *(_QWORD *)(v9 + 8);
      if (v37)
        v38 = (uint64_t *)(v37 + 16);
      else
        v38 = (uint64_t *)v9;
      *v38 = i;
      *(_QWORD *)(v9 + 8) = i;
      *(_BYTE *)(i + 56) = 1;
    }
    if (*(int *)a2 >= 3)
    {
      m2__cp__str("noted reparsing of edge ", v48, 30);
      v34 = a1;
      v35 = a2;
      v33 = (__int16 *)i;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_20:
    ++*(_DWORD *)(v9 + 20);
    ++*(_DWORD *)(v9 + 44);
    if (v41)
    {
      if (v40)
      {
        v26 = v40[12];
        if (v41[12] < v26 && v26 < a6)
        {
          ++*(_DWORD *)(v9 + 24);
          ++*(_DWORD *)(v9 + 48);
        }
      }
    }
    RuleVisAndCost = mosyntpal_ALLOCATE(a1, &v45, 0x78u);
    if ((RuleVisAndCost & 0x80000000) == 0)
    {
      v27 = v45;
      *(_WORD *)(v45 + 24) = a5;
      *(_WORD *)(v27 + 26) = a6;
      *(_WORD *)(v27 + 28) = a3;
      v28 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)(v27 + 32) = *(_OWORD *)a4;
      *(_QWORD *)(v27 + 48) = v28;
      *(_BYTE *)(v27 + 58) = 0;
      *(_QWORD *)(v27 + 64) = v41;
      *(_QWORD *)(v27 + 72) = v40;
      *(_OWORD *)(v27 + 80) = *(_OWORD *)a9;
      *(_DWORD *)(v27 + 96) = v44;
      *(_QWORD *)(v27 + 104) = 0;
      *(_BYTE *)(v27 + 112) = 0;
      *(_BYTE *)(v27 + 57) = a6 == 0;
      v29 = *v20;
      *(_QWORD *)v27 = *(_QWORD *)(*v20 + 8 * v39);
      *(_QWORD *)(v29 + 8 * v39) = v45;
      v30 = v45;
      *(_QWORD *)(v45 + 16) = 0;
      v31 = *(_QWORD *)(v9 + 8);
      v32 = (uint64_t *)(v31 ? v31 + 16 : v9);
      *v32 = v30;
      *(_QWORD *)(v9 + 8) = v30;
      *(_BYTE *)(v30 + 56) = 1;
      if (*(int *)a2 >= 3)
      {
        m2__cp__str("inserted edge", v48, 30);
        v33 = (__int16 *)v45;
        v34 = a1;
        v35 = a2;
LABEL_31:
        v25 = WriteEdge(v34, v35, (unsigned __int8 *)v48, 30, v33);
        if ((v25 & 0x80000000) == 0)
        {
          m2__cp__str("subedge1", v48, 30);
          v25 = WriteEdge(a1, a2, (unsigned __int8 *)v48, 30, v41);
          if ((v25 & 0x80000000) == 0)
          {
            m2__cp__str("subedge2", v48, 30);
            return WriteEdge(a1, a2, (unsigned __int8 *)v48, 30, v40);
          }
        }
        return v25;
      }
    }
  }
  return RuleVisAndCost;
}

uint64_t FixEdgeAndSubEdges(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    do
    {
      if (*(_BYTE *)(v1 + 57))
        break;
      *(_BYTE *)(v1 + 57) = 1;
      if (*(_BYTE *)(v1 + 58))
        break;
      result = FixEdgeAndSubEdges(*(_QWORD *)(v1 + 64));
      v1 = *(_QWORD *)(v1 + 72);
    }
    while (v1);
  }
  return result;
}

void AppendTree(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  char v19;
  uint64_t v20;

  if (a2)
  {
    if (!*(_BYTE *)(a2 + 58))
    {
      v19 = 0;
      v18 = 0;
      if ((mosyntkbsgram_GetRuleVisAndCost((_DWORD *)(a2 + 80), &v19, &v18) & 0x80000000) != 0)
        return;
      if (mosyntkbsgram_IsNilIter((_QWORD *)(a2 + 80)) || !v19)
      {
        AppendNode(a1, (__n128 *)a2, a3, (_QWORD **)a4);
        if (v15 < 0)
          return;
        v16 = (_QWORD *)*a4;
        *((_BYTE *)v16 + 60) = 0;
        v16[8] = 0;
        v20 = 0;
        v17 = v16 + 1;
        if ((AppendTree(a1, *(_QWORD *)(a2 + 64), v16 + 1, &v20) & 0x80000000) != 0)
          return;
        v11 = *(_QWORD *)(a2 + 72);
        v14 = &v20;
        v12 = a1;
        v13 = v17;
      }
      else
      {
        if ((AppendTree(a1, *(_QWORD *)(a2 + 64), a3, a4) & 0x80000000) != 0)
          return;
        v11 = *(_QWORD *)(a2 + 72);
        v12 = a1;
        v13 = a3;
        v14 = a4;
      }
      AppendTree(v12, v11, v13, v14);
      return;
    }
    AppendNode(a1, (__n128 *)a2, a3, (_QWORD **)a4);
    if ((v8 & 0x80000000) == 0)
    {
      v9 = (_QWORD *)*a4;
      *((_BYTE *)v9 + 60) = 1;
      mosyntdata_CopyTermInfo(a1, *(uint64_t **)(a2 + 64), v9 + 8);
      if ((v10 & 0x80000000) == 0)
        v9[1] = 0;
    }
  }
}

void AppendNode(uint64_t a1, __n128 *a2, _QWORD *a3, _QWORD **a4)
{
  int v6;
  _DWORD *v7;
  int v8;

  mosyntdata_AddNode(a1, a3, a4, 1, a2[1].n128_i16[6], a2 + 2);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *a4;
    v8 = a2[1].n128_i16[4];
    v7[12] = a2[6].n128_u32[0];
    v7[13] = v8;
    v7[14] = a2[1].n128_i16[5];
  }
}

uint64_t com_mosynt_GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char **a6)
{
  uint64_t v7;
  char *v8;
  char **v10;
  unsigned __int8 __c;
  __int16 __c_1;

  *a6 = a5;
  __c_1 = -1;
  __c = 0;
  v10 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v7 & 0x80000000) == 0 && __c_1)
  {
    v8 = cstdlib_strchr(*v10, __c);
    if (v8)
      *v8 = 0;
    *a6 = *v10;
  }
  return v7;
}

uint64_t com_mosynt_GetBacktransPOS(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  char *v10;
  uint64_t CfgParamVal;
  char *__src;
  char __dst[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  cstdlib_strcpy(__dst, "backtrans_");
  if (cstdlib_strlen(a4) < 0x81)
    cstdlib_strcat(__dst, a4);
  else
    cstdlib_strncat(__dst, a4, 0x80uLL);
  v10 = cstdlib_strchr(__dst, 40);
  if (v10)
    *v10 = 0;
  __src = 0;
  CfgParamVal = com_mosynt_GetCfgParamVal(a1, a2, a3, (uint64_t)__dst, a4, &__src);
  if ((CfgParamVal & 0x80000000) == 0)
  {
    cstdlib_strncpy(a5, __src, 1uLL);
    a5[1] = 0;
  }
  return CfgParamVal;
}

uint64_t com_mosynt_GetBacktrans2POS(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, unsigned int a5, char *a6)
{
  char *v7;
  unsigned __int16 v11;
  uint64_t CfgParamVal;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  char *v16;
  int v17;
  char *__sa;
  char __dst[256];
  uint64_t v22;

  v7 = __s;
  v22 = *MEMORY[0x24BDAC8D0];
  v11 = cstdlib_strlen(__s);
  *a6 = 0;
  CfgParamVal = 0;
  v13 = v11;
  if (v11)
  {
    __sa = 0;
    do
    {
      if (*v7 != 92)
      {
        cstdlib_strcpy(__dst, "backtrans2_");
        v14 = cstdlib_strlen(__dst);
        __dst[v14] = *v7;
        __dst[(unsigned __int16)(v14 + 1)] = 0;
        CfgParamVal = com_mosynt_GetCfgParamVal(a1, a2, a3, (uint64_t)__dst, a6, &__sa);
        if ((CfgParamVal & 0x80000000) != 0)
          return CfgParamVal;
        v15 = cstdlib_strlen(a6);
        v16 = __sa;
        v17 = (unsigned __int16)cstdlib_strlen(__sa);
        if (v17 && v16 != a6 && v17 + v15 + 1 < a5)
        {
          if (v15)
            cstdlib_strcat(a6, "\\");
          cstdlib_strcat(a6, v16);
        }
      }
      ++v7;
      --v13;
    }
    while (v13);
  }
  return CfgParamVal;
}

uint64_t com_mosynt_UseMosynt(uint64_t a1, uint64_t a2, uint64_t a3, _BOOL4 *a4)
{
  uint64_t CfgParamVal;
  char *v6;
  _BOOL4 v7;
  char *__s1;

  __s1 = 0;
  CfgParamVal = com_mosynt_GetCfgParamVal(a1, a2, a3, (uint64_t)"mosynt_usemosynt", "NO", &__s1);
  if ((CfgParamVal & 0x80000000) != 0)
  {
    v7 = 0;
  }
  else
  {
    v6 = __s1;
    if (cstdlib_strcmp(__s1, "YES"))
      v7 = cstdlib_strcmp(v6, "yes") == 0;
    else
      v7 = 1;
  }
  *a4 = v7;
  return CfgParamVal;
}

uint64_t mosyntbase_ShowMemStat(uint64_t a1)
{
  unsigned int v2;

  v2 = mosyntpal_TotAllocSize();
  return mosyntbase_WInt3Ln(a1, "total allocated memory: ", 0, v2, "", 0);
}

uint64_t mosyntbase_WInt3Ln(uint64_t a1, unsigned __int8 *a2, int a3, unsigned int a4, unsigned __int8 *a5, int a6)
{
  uint64_t result;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  v12 = a2;
  v11 = a3;
  v10 = a5;
  v9 = a6;
  m2__fix__carray__len(&v12, &v11);
  m2__fix__carray__len(&v10, &v9);
  result = mosyntpal_WriteString(a1, v12, v11);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntbase_WInt(a1, a4, 0);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntpal_WriteString(a1, v10, v9);
      if ((result & 0x80000000) == 0)
        return mosyntpal_WriteLn(a1);
    }
  }
  return result;
}

uint64_t mosyntbase_WString(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v5;
  unsigned __int8 *v6;

  v6 = a2;
  v5 = a3;
  m2__fix__carray__len(&v6, &v5);
  return mosyntpal_WriteString(a1, v6, v5);
}

uint64_t mosyntbase_WInt(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _OWORD v5[6];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  result = mosyntpal_IntToString(a2, a3, v5, 100);
  if ((result & 0x80000000) == 0)
    return mosyntpal_WriteString(a1, (unsigned __int8 *)v5, 100);
  return result;
}

uint64_t mosyntbase_WStringLn(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;

  v6 = a2;
  v5 = a3;
  m2__fix__carray__len(&v6, &v5);
  result = mosyntpal_WriteString(a1, v6, v5);
  if ((result & 0x80000000) == 0)
    return mosyntpal_WriteLn(a1);
  return result;
}

uint64_t mosyntbase_WString3Ln(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, int a5, unsigned __int8 *a6, int a7)
{
  uint64_t result;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  v10 = a6;
  v9 = a7;
  m2__fix__carray__len(&v14, &v13);
  m2__fix__carray__len(&v12, &v11);
  m2__fix__carray__len(&v10, &v9);
  result = mosyntpal_WriteString(a1, v14, v13);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntpal_WriteString(a1, v12, v11);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntpal_WriteString(a1, v10, v9);
      if ((result & 0x80000000) == 0)
        return mosyntpal_WriteLn(a1);
    }
  }
  return result;
}

uint64_t mosyntbase_WriteDevelMessage(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, int a5, unsigned __int8 *a6, int a7, unsigned __int8 *a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  __int128 v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;

  v13 = a10;
  v14 = a11;
  v15 = a12;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v21 = a5;
  v20 = a6;
  v19 = a7;
  v18 = a8;
  m2__fix__carray__len(&v24, &v23);
  m2__fix__carray__len(&v22, &v21);
  m2__fix__carray__len(&v20, &v19);
  m2__fix__carray__len(&v18, (int *)&a9);
  *((_QWORD *)&v17 + 1) = __PAIR64__(v15, v14);
  *(_QWORD *)&v17 = __PAIR64__(v13, a9);
  result = mosyntbase_WriteMessage(a1, v24, v23, v22, v21, v20, v19, v18, v17);
  if ((result & 0x80000000) == 0)
    return mosyntpal_CheckInterrupt();
  return result;
}

uint64_t mosyntbase_WriteMessage(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, int a5, unsigned __int8 *a6, int a7, unsigned __int8 *a8, __int128 a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  _OWORD v20[62];
  uint64_t v21;

  v10 = *(_QWORD *)((char *)&a9 + 4);
  v11 = HIDWORD(a9);
  v21 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16 = a5;
  v15 = a6;
  v14 = a7;
  v13 = a8;
  memset(v20, 0, 512);
  m2__fix__carray__len(&v19, &v18);
  m2__fix__carray__len(&v17, &v16);
  m2__fix__carray__len(&v15, &v14);
  m2__fix__carray__len(&v13, (int *)&a9);
  result = mosyntbase_ComposeMessage(v19, v18, v17, v16, v15, v14, v13, a9, v10, HIDWORD(v10), v11, v20, 1000);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntpal_WriteString(a1, (unsigned __int8 *)v20, 1000);
    if ((result & 0x80000000) == 0)
      return mosyntpal_CheckInterrupt();
  }
  return result;
}

uint64_t mosyntbase_ComposeMessage(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, int a6, unsigned __int8 *a7, int a8, unsigned int a9, unsigned int a10, unsigned int a11, _BYTE *a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  const char *v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v33 = a1;
  v32 = a2;
  v31 = a3;
  v30 = a4;
  v29 = a5;
  v28 = a6;
  v27 = a7;
  v26 = a8;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  m2__fix__carray__len(&v33, &v32);
  m2__fix__carray__len(&v31, &v30);
  m2__fix__carray__len(&v29, &v28);
  m2__fix__carray__len(&v27, &v26);
  v25 = 0;
  *a12 = 0;
  v13 = v32;
  if (v32 >= 1)
  {
    v14 = 0;
    v15 = 1;
    v16 = 1;
    do
    {
      v17 = v13 - 1;
      result = v33[v14];
      if ((_DWORD)result == 37)
      {
        if ((int)v14 < v17)
        {
          v19 = v33[v14 + 1];
          if (v19 == 100 || v19 == 105)
          {
            switch(v15)
            {
              case 3:
                v23 = a11;
                goto LABEL_25;
              case 2:
                v23 = a10;
                goto LABEL_25;
              case 1:
                v23 = a9;
LABEL_25:
                result = mosyntpal_IntToString(v23, 0, v36, 20);
                if ((result & 0x80000000) != 0)
                  return result;
                break;
              default:
                mosyntbase_CCopy("%d", 0, (uint64_t)v36, 20, &v24);
                break;
            }
            mosyntbase_App((uint64_t)a12, a13, &v25, (uint64_t)v36, 20, &v24);
            ++v15;
LABEL_33:
            v22 = 2;
            goto LABEL_34;
          }
          if (v19 == 115)
          {
            switch(v16)
            {
              case 3:
                v20 = v27;
                v21 = v26;
                break;
              case 2:
                v20 = v29;
                v21 = v28;
                break;
              case 1:
                v20 = v31;
                v21 = v30;
                break;
              default:
                v35 = "%s";
                v34 = 0;
                m2__fix__carray__len((unsigned __int8 **)&v35, &v34);
                v20 = (unsigned __int8 *)v35;
                v21 = v34;
                break;
            }
            mosyntbase_App((uint64_t)a12, a13, &v25, (uint64_t)v20, v21, &v24);
            ++v16;
            goto LABEL_33;
          }
        }
      }
      else if ((_DWORD)result == 92)
      {
        if ((int)v14 < v17 && v33[v14 + 1] == 110)
        {
          LOWORD(v36[0]) = mosyntpal_EOL();
          mosyntbase_App((uint64_t)a12, a13, &v25, (uint64_t)v36, 20, &v24);
          goto LABEL_33;
        }
      }
      else if (!v33[v14])
      {
        return result;
      }
      LOWORD(v36[0]) = result;
      mosyntbase_App((uint64_t)a12, a13, &v25, (uint64_t)v36, 20, &v24);
      v22 = 1;
LABEL_34:
      v14 += v22;
      v13 = v32;
    }
    while ((int)v14 < v32);
  }
  return 0;
}

uint64_t mosyntbase_Length(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 < 1)
    return 0;
  result = 0;
  while (*(_BYTE *)(a1 + result))
  {
    if (a2 == ++result)
      return a2;
  }
  return result;
}

uint64_t mosyntbase_Copy(uint64_t a1, int a2, uint64_t a3, int a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  if (a2 < 1)
  {
    v6 = 0;
LABEL_11:
    *(_BYTE *)(a3 + v6) = 0;
    v8 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    while (*(_BYTE *)(a1 + v5) && v5 < a4 - 1)
    {
      *(_BYTE *)(a3 + v5) = *(_BYTE *)(a1 + v5);
      if (a2 == ++v5)
        goto LABEL_11;
    }
    *(_BYTE *)(a3 + v5) = 0;
    v8 = *(_BYTE *)(a1 + v5) == 0;
  }
  *a5 = v8;
  return 0;
}

uint64_t mosyntbase_CCopy(unsigned __int8 *a1, unsigned int a2, uint64_t a3, int a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  BOOL v12;
  unsigned int v14;
  unsigned __int8 *v15;

  v15 = a1;
  v14 = a2;
  m2__fix__carray__len(&v15, (int *)&v14);
  v8 = v14;
  if ((int)v14 < 1)
  {
    v8 = 0;
LABEL_11:
    *(_BYTE *)(a3 + v8) = 0;
    v12 = 1;
  }
  else
  {
    v9 = 0;
    v10 = v15;
    while (v10[v9] && v9 < a4 - 1)
    {
      *(_BYTE *)(a3 + v9) = v10[v9];
      if (v8 == ++v9)
        goto LABEL_11;
    }
    *(_BYTE *)(a3 + v9) = 0;
    v12 = v10[v9] == 0;
  }
  *a5 = v12;
  return 0;
}

uint64_t mosyntbase_AppendTo(uint64_t a1, int a2, uint64_t a3, int a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v11;

  v5 = (a2 - 1);
  if (a2 <= 1)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = 0;
    while (*(_BYTE *)(a1 + v6))
    {
      if (v5 == ++v6)
      {
        LODWORD(v6) = a2 - 1;
        break;
      }
    }
  }
  if (a4 < 1)
  {
LABEL_15:
    *(_BYTE *)(a1 + v6) = 0;
    v11 = 1;
  }
  else
  {
    v7 = 0;
    v8 = v6;
    v9 = a1 + v6;
    while (*(_BYTE *)(a3 + v7) && (int)v5 > v8 + (int)v7)
    {
      *(_BYTE *)(v9 + v7) = *(_BYTE *)(a3 + v7);
      if (a4 == ++v7)
      {
        LODWORD(v6) = v8 + v7;
        goto LABEL_15;
      }
    }
    *(_BYTE *)(a1 + (v8 + v7)) = 0;
    v11 = *(_BYTE *)(a3 + v7) == 0;
  }
  *a5 = v11;
  return 0;
}

uint64_t mosyntbase_App(uint64_t a1, int a2, int *a3, uint64_t a4, int a5, BOOL *a6)
{
  int v6;
  int v7;
  _BOOL4 v8;
  unint64_t v10;
  BOOL v12;

  v6 = a2 - 1;
  v7 = *a3;
  v8 = a5 > 0;
  if (*a3 >= a2 - 1 || a5 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    while (*(_BYTE *)(a4 + v10))
    {
      *(_BYTE *)(a1 + v7) = *(_BYTE *)(a4 + v10);
      v7 = *a3 + 1;
      *a3 = v7;
      v8 = ++v10 < a5;
      if (v7 >= v6 || v10 >= a5)
        goto LABEL_15;
    }
    v8 = 1;
  }
LABEL_15:
  if (v7 < a2)
    v6 = v7;
  *(_BYTE *)(a1 + v6) = 0;
  v12 = !v8 || *(_BYTE *)(a4 + v10) == 0;
  *a6 = v12;
  return 0;
}

uint64_t mosyntbase_CApp(uint64_t a1, int a2, int *a3, unsigned __int8 *a4, int a5, BOOL *a6)
{
  int v11;
  unsigned __int8 *v12;

  v12 = a4;
  v11 = a5;
  m2__fix__carray__len(&v12, &v11);
  mosyntbase_App(a1, a2, a3, (uint64_t)v12, v11, a6);
  return 0;
}

uint64_t mosyntbase_GetStr(uint64_t a1, int a2, int *a3, _BYTE *a4, int a5, char *a6)
{
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  char v14;

  v6 = *a3;
  if (*a3 < a2)
  {
    v7 = (unsigned __int8 *)(a1 + v6);
    do
    {
      v8 = *v7++;
      if ((v8 - 33) < 0xFFFFFFE0)
        break;
      *a3 = ++v6;
    }
    while (a2 != v6);
  }
  *a4 = 0;
  v9 = *a3;
  if (*a3 >= a2)
  {
    LODWORD(v10) = 0;
    v11 = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = *(unsigned __int8 *)(a1 + v9);
      if (v12 < 0x21)
        break;
      if (v10 >= a5 - 1)
      {
        v11 = 0;
      }
      else
      {
        a4[v10] = v12;
        v9 = *a3;
      }
      ++v10;
      *a3 = ++v9;
    }
    while (v9 < a2);
  }
  a4[v10] = 0;
  if (v11)
    v13 = (_DWORD)v10 == 0;
  else
    v13 = 1;
  v14 = !v13;
  *a6 = v14;
  return 0;
}

uint64_t mosyntbase_GetSepPartStr(uint64_t a1, int a2, int *a3, unsigned __int8 a4, _BYTE *a5, int a6, char *a7)
{
  int v7;
  int v8;
  char v9;
  int v10;
  int v12;

  v7 = *a3;
  if ((*a3 & 0x80000000) == 0)
  {
    if (v7 >= a2)
    {
      v8 = 0;
      v9 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      do
      {
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (v10 == a4 || v10 == 0)
          break;
        if (v8 >= a6)
        {
          v9 = 0;
        }
        else
        {
          a5[v8++] = v10;
          v7 = *a3;
        }
        *a3 = ++v7;
      }
      while (v7 < a2);
    }
    if (v8 < a6)
    {
      a5[v8] = 0;
      v7 = *a3;
    }
    if (v7 >= a2)
      goto LABEL_23;
    if (*(unsigned __int8 *)(a1 + v7) == a4)
    {
      v12 = v7 + 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + v7))
      {
LABEL_23:
        *a7 = v9;
        return 0;
      }
      v12 = -1;
    }
    *a3 = v12;
    goto LABEL_23;
  }
  *a7 = 0;
  *a5 = 0;
  return 0;
}

BOOL mosyntbase_Equal(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;

  if (a2 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = 0;
    while (v4 < a4 && *(_BYTE *)(a1 + v4))
    {
      if (!*(_BYTE *)(a3 + v4) || *(unsigned __int8 *)(a1 + v4) != *(unsigned __int8 *)(a3 + v4))
        break;
      if (a2 == ++v4)
      {
        LODWORD(v4) = a2;
        return (int)v4 >= a4 || *(_BYTE *)(a3 + v4) == 0;
      }
    }
    if (*(_BYTE *)(a1 + v4))
      return 0;
  }
  return (int)v4 >= a4 || *(_BYTE *)(a3 + v4) == 0;
}

BOOL mosyntbase_CEqual(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;

  v8 = a1;
  v7 = a2;
  v6 = a3;
  v5 = a4;
  m2__fix__carray__len(&v8, &v7);
  m2__fix__carray__len(&v6, &v5);
  return mosyntbase_Equal((uint64_t)v8, v7, (uint64_t)v6, v5);
}

uint64_t mosyntbase_UpperCase(_BYTE *a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2 >= 1)
  {
    v2 = a2;
    do
    {
      v3 = *a1;
      if (!*a1)
        break;
      if ((v3 - 97) <= 0x19)
        *a1 = v3 - 32;
      ++a1;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t mosyntbase_Compare(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v5;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  BOOL v10;
  int v11;

  if (a2 < 1)
  {
    LODWORD(v5) = 0;
    v7 = 1;
  }
  else
  {
    v5 = 0;
    while (v5 < a4 && *(_BYTE *)(a1 + v5))
    {
      if (!*(_BYTE *)(a3 + v5) || *(unsigned __int8 *)(a1 + v5) != *(unsigned __int8 *)(a3 + v5))
        break;
      if (a2 == ++v5)
      {
        v7 = 1;
        LODWORD(v5) = a2;
        goto LABEL_14;
      }
    }
    v7 = *(_BYTE *)(a1 + v5) == 0;
  }
LABEL_14:
  v8 = (int)v5 >= a4 || *(_BYTE *)(a3 + v5) == 0;
  v9 = !v7 || !v8;
  v10 = v7 || v8;
  if (v7)
    v11 = v9;
  else
    v11 = 2;
  if (!v10)
  {
    if (*(unsigned __int8 *)(a1 + v5) < *(unsigned __int8 *)(a3 + v5))
      v11 = 1;
    else
      v11 = 2;
  }
  *a5 = v11;
  return 0;
}

uint64_t mosyntbase_FindSubstring(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int *a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;

  v6 = a5 & ~(a5 >> 31);
  if (a5 >= 1)
  {
    if (a4 < 1)
      goto LABEL_27;
    v7 = 0;
    while (*(_BYTE *)(a3 + v7))
    {
      if (a4 == ++v7)
      {
        LODWORD(v7) = a4;
        break;
      }
    }
    if (v6 >= (int)v7)
      goto LABEL_27;
  }
  if (v6 >= a4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned __int8 *)(a3 + v6);
      if (*(_BYTE *)(a3 + v6))
        v10 = v8 < a2;
      else
        v10 = 0;
      if (!v10)
        break;
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        break;
      v12 = v11 == v9;
      v13 = v11 == v9 ? 0 : v8;
      if (v12)
        ++v8;
      else
        v8 = 0;
      v6 = v6 - v13 + 1;
    }
    while (v6 < a4);
  }
  if (v8 < a2 && *(_BYTE *)(a1 + v8))
LABEL_27:
    v14 = -1;
  else
    v14 = v6 - v8;
  *a6 = v14;
  return 0;
}

uint64_t mosyntbase_CFindSubstring(unsigned __int8 *a1, int a2, uint64_t a3, int a4, int a5, int *a6)
{
  int v11;
  unsigned __int8 *v12;

  v12 = a1;
  v11 = a2;
  m2__fix__carray__len(&v12, &v11);
  mosyntbase_FindSubstring((uint64_t)v12, v11, a3, a4, a5, a6);
  return 0;
}

uint64_t mosyntbase_RemoveSubstring(int a1, int a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  int v9;
  char v10;

  *a5 = 1;
  if (a4 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    while (*(_BYTE *)(a3 + v5))
    {
      if (a4 == ++v5)
      {
        LODWORD(v5) = a4;
        break;
      }
    }
  }
  if ((int)v5 > a1)
  {
    v6 = a2 + (uint64_t)a1;
    if ((int)v6 <= (int)v5)
    {
      if ((int)v6 < (int)v5)
      {
        v7 = (_BYTE *)(a3 + a1);
        v8 = (char *)(a3 + v6);
        v9 = v5 - a2;
        do
        {
          v10 = *v8++;
          *v7++ = v10;
          ++a1;
        }
        while (v9 != a1);
      }
    }
    else
    {
      *a5 = 0;
    }
    if (a1 < a4)
      a5 = (_BYTE *)(a3 + a1);
    else
      a5 = (_BYTE *)(a3 + a4 - 1);
  }
  *a5 = 0;
  return 0;
}

BOOL mosyntbase_IsStringStart(_BYTE *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a2 < 1)
    return 1;
  v5 = a5;
  v6 = a2;
  while (*a1 && v5 < a4)
  {
    if (!*(_BYTE *)(a3 + v5) || *a1 != *(_BYTE *)(a3 + v5))
      break;
    ++v5;
    ++a1;
    if (!--v6)
      return 1;
  }
  return *a1 == 0;
}

uint64_t mosyntbase_DoSubstrSubst(_BYTE *a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v24;
  int v25;

  if (!*a1)
  {
    if (a6 < 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      while (*(_BYTE *)(a5 + v20) && v20 < a8 - 1)
      {
        *(_BYTE *)(a7 + v20) = *(_BYTE *)(a5 + v20);
        if (a6 == ++v20)
        {
          v20 = a6;
          goto LABEL_28;
        }
      }
    }
    goto LABEL_28;
  }
  v25 = 0;
  if (a6 < 1)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    v15 = 0;
    v16 = a2;
    do
    {
      v17 = *(_BYTE *)(a5 + v15);
      if (!v17)
        break;
      if (mosyntbase_IsStringStart(a1, a2, a5, a6, v15))
      {
        mosyntbase_App(a7, a8, &v25, a3, a4, &v24);
        if (a2 < 1)
        {
          LODWORD(v18) = 0;
        }
        else
        {
          v18 = 0;
          while (a1[v18])
          {
            if (v16 == ++v18)
            {
              LODWORD(v18) = v16;
              break;
            }
          }
        }
      }
      else
      {
        v19 = v25;
        *(_BYTE *)(a7 + v25) = v17;
        v25 = v19 + 1;
        LODWORD(v18) = 1;
      }
      v15 += v18;
    }
    while (v15 < a6);
    LODWORD(v20) = v25;
  }
  if ((int)v20 < a8)
  {
    v20 = (int)v20;
LABEL_28:
    *(_BYTE *)(a7 + v20) = 0;
  }
  return 0;
}

uint64_t mosyntaccphr_TreatSyntTree(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t SentTermCommList;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t DomainById;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t BestScenarioPathSuffix;
  int *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t DomainByName;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int *v50;
  uint64_t *v51;
  _QWORD *m;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  __int16 v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int i;
  uint64_t v86;
  __int16 *v87;
  __int16 *v88;
  __int16 *v89;
  __int16 *v90;
  int v91;
  int v92;
  __int16 v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t *v105;
  int Rule;
  int v107;
  uint64_t v108;
  uint64_t n;
  uint64_t v110;
  uint64_t Scenario;
  uint64_t RuleSet;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Children;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t Instr;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  int v128;
  uint64_t v129;
  uint64_t InstrRight;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int InstrType;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  __int128 *v140;
  char v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  _QWORD **v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t Node;
  BOOL v163;
  int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  int v169;
  uint64_t *v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t *v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  int v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  unsigned __int16 *v192;
  int ConsList;
  unsigned int v194;
  uint64_t v195;
  int v196;
  BOOL v197;
  int v198;
  BOOL v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  uint64_t *v209;
  int v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *ii;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  unsigned int v220;
  uint64_t *v221;
  int v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t j;
  uint64_t k;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  BOOL v238;
  int v239;
  BOOL v240;
  uint64_t *v241;
  _BOOL4 v242;
  _BOOL4 v243;
  BOOL v244;
  uint64_t *v245;
  uint64_t *v246;
  int v247;
  unsigned int v248;
  int v249;
  BOOL v250;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t *v264;
  BOOL v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t *v268;
  unsigned int *v269;
  _QWORD **v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  int v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  _OWORD v287[6];
  int v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  int v295;
  uint64_t v296;

  v296 = *MEMORY[0x24BDAC8D0];
  v280 = 0;
  SentTermCommList = mosyntpal_ALLOCATE(a1, &v280, 0x60u);
  if ((SentTermCommList & 0x80000000) != 0)
    return SentTermCommList;
  v17 = v280;
  *(_DWORD *)v280 = a2;
  *(_QWORD *)(v17 + 8) = a3;
  *(_QWORD *)(v17 + 16) = a4;
  *(_DWORD *)(v17 + 24) = a5;
  *(_DWORD *)(v17 + 28) = a6;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = a7;
  *(_DWORD *)(v280 + 48) = ((uint64_t (*)(void))mosyntkbaccphr_Nil)();
  *(_DWORD *)(v280 + 52) = ((uint64_t (*)(void))mosyntkbaccphr_Nil)();
  v18 = ((uint64_t (*)(void))mosyntkbaccphr_Nil)();
  v19 = v280;
  v20 = v280;
  *(_DWORD *)(v280 + 56) = v18;
  v21 = (int *)(v20 + 56);
  if (!a8)
    goto LABEL_557;
  v22 = *(_QWORD *)(v19 + 16);
  if (v22 != mosyntkbaccphr_NilAccPhr())
  {
    v24 = (int *)(v19 + 48);
    v23 = *(_DWORD *)(v19 + 48);
    if (v23 == ((uint64_t (*)(void))mosyntkbaccphr_Nil)())
    {
      DomainById = FindDomainById(v19, *(_DWORD *)(v19 + 28), (_DWORD *)(v19 + 48));
      v26 = *(_DWORD *)(v19 + 48);
      if (v26 == mosyntkbaccphr_Nil(DomainById))
      {
        v27 = mosyntkbaccphr_AccPhrDomains(*(_QWORD *)(v19 + 16));
        *(_DWORD *)(v19 + 48) = v27;
      }
      else
      {
        v27 = *v24;
      }
      *(_DWORD *)(v19 + 52) = v27;
      *(_DWORD *)(v19 + 56) = v27;
    }
    *(_QWORD *)&v289 = 0;
    SentTermCommList = mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(v19 + 40), *(_DWORD *)(a8 + 52), &v289);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    v28 = (uint64_t *)v289;
    v29 = *(_QWORD *)(v19 + 16);
    v30 = mosyntkbaccphr_NilAccPhr();
    if (v29 == v30)
    {
      v44 = mosyntkbaccphr_Nil(v30);
      *(_DWORD *)(v19 + 48) = v44;
      v45 = mosyntkbaccphr_Nil(v44);
      *(_DWORD *)(v19 + 52) = v45;
      *(_DWORD *)(v19 + 56) = mosyntkbaccphr_Nil(v45);
      goto LABEL_65;
    }
    if (!v28)
      goto LABEL_65;
    BestScenarioPathSuffix = 0;
    v32 = (int *)(v19 + 52);
    while (1)
    {
      while (*((_DWORD *)v28 + 2) != 5)
      {
LABEL_61:
        v28 = (uint64_t *)*v28;
        if (!v28)
        {
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
          goto LABEL_65;
        }
      }
      if (*((_DWORD *)v28 + 3))
      {
        v33 = *v24;
      }
      else
      {
        v30 = mosyntkbaccphr_Nil(v30);
        v33 = v30;
        *v24 = v30;
      }
      v30 = mosyntkbaccphr_Nil(v30);
      if (v33 == (_DWORD)v30)
      {
        v34 = FindDomainById(v19, *(_DWORD *)(v19 + 28), (_DWORD *)(v19 + 48));
        v35 = *(_DWORD *)(v19 + 48);
        if (v35 == mosyntkbaccphr_Nil(v34))
        {
          v30 = mosyntkbaccphr_AccPhrDomains(*(_QWORD *)(v19 + 16));
          *(_DWORD *)(v19 + 48) = v30;
        }
        else
        {
          v30 = *v24;
        }
        BestScenarioPathSuffix = 0;
        *v32 = v30;
        *v21 = v30;
      }
      v36 = *((_DWORD *)v28 + 3);
      if (v36 != 2)
        break;
      v37 = *(_DWORD *)v19;
      if (!*((_BYTE *)v28 + 36))
      {
        if (v37 >= 1)
        {
          SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          v30 = mosyntbase_WriteMessage(a1, "Resetting sentence domain\\n", 0, "", 0, "", 0, "", 0);
          goto LABEL_49;
        }
LABEL_50:
        v43 = *v32;
LABEL_60:
        *v21 = v43;
        goto LABEL_61;
      }
      if (v37 >= 1)
      {
        SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        SentTermCommList = mosyntbase_WriteMessage(a1, "Setting sentence domain to '%s'\\n", 0, (unsigned __int8 *)v28 + 36, 100, "", 0, "", 0);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
      }
      DomainByName = FindDomainByName(v19, (unsigned __int8 *)v28 + 36, v21);
      v39 = *(_DWORD *)(v19 + 56);
      v30 = mosyntkbaccphr_Nil(DomainByName);
      if (v39 == (_DWORD)v30)
      {
        if (*(int *)v19 >= 1)
        {
          SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          v30 = mosyntbase_WriteMessage(a1, "Didn't find sentence domain '%s'\\n", 0, (unsigned __int8 *)v28 + 36, 100, "", 0, "", 0);
LABEL_49:
          BestScenarioPathSuffix = v30;
          if ((v30 & 0x80000000) != 0)
            return BestScenarioPathSuffix;
          goto LABEL_50;
        }
LABEL_45:
        BestScenarioPathSuffix = 0;
        goto LABEL_50;
      }
      BestScenarioPathSuffix = 0;
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_65;
    }
    if (v36 != 1)
    {
      if (!v36 && *(int *)v19 >= 1)
      {
        SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        v30 = mosyntbase_WriteMessage(a1, "Resetting default domain\\n", 0, "", 0, "", 0, "", 0);
        BestScenarioPathSuffix = v30;
        if ((v30 & 0x80000000) != 0)
          return BestScenarioPathSuffix;
      }
      goto LABEL_61;
    }
    v40 = *(_DWORD *)v19;
    if (*((_BYTE *)v28 + 36))
    {
      if (v40 >= 1)
      {
        SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        SentTermCommList = mosyntbase_WriteMessage(a1, "Setting paragraph domain to '%s'\\n", 0, (unsigned __int8 *)v28 + 36, 100, "", 0, "", 0);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
      }
      v41 = FindDomainByName(v19, (unsigned __int8 *)v28 + 36, (int *)(v19 + 52));
      v42 = *(_DWORD *)(v19 + 52);
      v30 = mosyntkbaccphr_Nil(v41);
      if (v42 != (_DWORD)v30)
        goto LABEL_45;
      if (*(int *)v19 >= 1)
      {
        SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        v30 = mosyntbase_WriteMessage(a1, "Didn't find paragraph domain '%s'\\n", 0, (unsigned __int8 *)v28 + 36, 100, "", 0, "", 0);
        goto LABEL_54;
      }
      BestScenarioPathSuffix = 0;
    }
    else if (v40 >= 1)
    {
      SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      v30 = mosyntbase_WriteMessage(a1, "Resetting paragraph domain\\n", 0, "", 0, "", 0, "", 0);
LABEL_54:
      BestScenarioPathSuffix = v30;
      if ((v30 & 0x80000000) != 0)
        return BestScenarioPathSuffix;
    }
    v43 = *v24;
    *v32 = *v24;
    goto LABEL_60;
  }
LABEL_65:
  v46 = v280;
  *(_DWORD *)(v280 + 60) = *(_DWORD *)(v280 + 56);
  v47 = mosyntkbaccphr_AccPhrType(*(_QWORD *)(v46 + 16));
  v48 = v280;
  if (!v47)
  {
    v284 = 0;
    v55 = mosyntkbsymtab_WildConsId(*(_QWORD *)(v280 + 8));
    SentTermCommList = GenAccTree(a1, v48, (uint64_t *)a8, &v284);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    v56 = v284;
    LODWORD(v289) = 0;
    SentTermCommList = Accentuation1(a1, v48, v284, (int *)&v289);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    *(_QWORD *)&v287[0] = 0;
    v283 = 0;
    *(_QWORD *)&v289 = 0;
    SentTermCommList = GetInitPhrasing1(a1, v48, v56, 3, 0, &v283, (uint64_t *)&v289);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    v57 = (_QWORD)v289 ? *(_DWORD *)(v289 + 24) : 0;
    SentTermCommList = mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(v48 + 40), v57, v287);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    v58 = FinalBoundaryIndex(a1, *(uint64_t **)&v287[0]);
    SentTermCommList = AppendInitBound(a1, v48, &v283, (uint64_t *)&v289, v58, 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    *(_DWORD *)(v289 + 16) = v57;
    if (*(int *)v48 <= 0)
    {
      v60 = v283;
    }
    else
    {
      SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      SentTermCommList = mosyntbase_WString(a1, "initial phrasing: ", 0);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      v59 = v283;
      SentTermCommList = WriteBoundList(a1, v48, v283, 0);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      SentTermCommList = mosyntbase_WLn(a1);
      v60 = v59;
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
    }
    v80 = *(_DWORD *)(v48 + 24);
    v289 = 0u;
    v290 = 0u;
    v291 = 0u;
    v292 = 0u;
    v293 = 0u;
    v294 = 0u;
    v295 = 0;
    v279 = v60;
    if (v60)
    {
      v81 = 0;
      BestScenarioPathSuffix = 0;
      v82 = v60;
      do
      {
        v83 = *((__int16 *)v82 + 4);
        if (v83 < 100)
        {
          *((_BYTE *)&v289 + v83) = 1;
        }
        else
        {
          SentTermCommList = mosyntbase_WString(a1, "*** maximum nr of phrase boundary index levels exceeded", 0);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          BestScenarioPathSuffix = mosyntbase_WLn(a1);
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
          LOWORD(v83) = *((_WORD *)v82 + 4);
          v60 = v279;
        }
        if ((int)v81 <= (__int16)v83)
          v81 = (__int16)v83;
        v82 = (uint64_t *)*v82;
      }
      while (v82);
    }
    else
    {
      BestScenarioPathSuffix = 0;
      v81 = 0;
    }
    v84 = v81;
    for (i = 1; i != 3; ++i)
    {
      if ((int)v84 >= 2)
      {
        v86 = v84;
        do
        {
          if ((unint64_t)v86 > 0x63 || *((_BYTE *)&v289 + v86))
          {
            if (v60)
            {
              v87 = 0;
              v88 = 0;
              v89 = 0;
              v90 = (__int16 *)v60;
              while (1)
              {
                v91 = v90[4];
                if ((v91 & 0x80000000) == 0)
                  break;
LABEL_234:
                v90 = *(__int16 **)v90;
                if (!v90)
                  goto LABEL_235;
              }
              if (!v88 || (v88[4] & 0x80000000) == 0)
                v89 = v88;
              if (v87)
              {
                v92 = v87[4];
                if (v86 == v92 && v89)
                {
                  if (i == 1)
                  {
                    v93 = v89[5];
                    if (v93 || v92 < v89[4])
                    {
                      if (v92 <= v91 || v87[5])
                        goto LABEL_232;
                    }
                    else
                    {
                      v93 = 0;
                    }
LABEL_231:
                    v87[4] = -1;
                    v89[5] = v87[5] + v93;
                    v89[6] += v87[6];
                    goto LABEL_232;
                  }
                  if (v80 > 1 || v92 >= 3)
                  {
                    v94 = v89[6];
                    if (v94 >= 5)
                      v95 = v80 - 1;
                    else
                      v95 = v80;
                    if (v94 < 3)
                      v95 = v80 + 1;
                    v96 = v87[6];
                    v97 = v96 >= 5 ? v80 - 1 : v80;
                    v98 = v96 >= 3 ? v97 : v80 + 1;
                    if (v92 >= v89[4])
                    {
                      if (v92 >= v91 && v95 >= v89[5])
                      {
                        v93 = v89[5];
                        goto LABEL_231;
                      }
                      if (v92 > v91 && v98 >= v87[5])
                      {
                        v93 = v89[5];
                        goto LABEL_231;
                      }
                    }
                  }
                }
LABEL_232:
                v88 = v87;
              }
              else
              {
                v88 = 0;
              }
              v87 = v90;
              goto LABEL_234;
            }
LABEL_235:
            if (*(int *)v48 >= 1)
            {
              SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              v99 = (unsigned __int8 *)(i == 1 ? "after clitic melting" : "after rhythmic melting");
              SentTermCommList = mosyntbase_WString(a1, v99, 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              SentTermCommList = mosyntbase_WString(a1, ", index ", 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              SentTermCommList = mosyntbase_WInt(a1, v86, 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              SentTermCommList = mosyntbase_WString(a1, ": ", 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              SentTermCommList = WriteBoundList(a1, v48, v279, 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              BestScenarioPathSuffix = mosyntbase_WLn(a1);
              v60 = v279;
              if ((BestScenarioPathSuffix & 0x80000000) != 0)
                return BestScenarioPathSuffix;
            }
          }
          v197 = v86-- <= 2;
        }
        while (!v197);
      }
    }
    if ((BestScenarioPathSuffix & 0x80000000) != 0)
      return BestScenarioPathSuffix;
    if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8))
      && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), v55, 8u, 1))
    {
      goto LABEL_252;
    }
    if (v279)
    {
      v164 = 0;
      v165 = 0;
      v166 = 0;
      v167 = v279;
      while (1)
      {
        if (*((unsigned __int16 *)v167 + 4) > 1u)
        {
          v168 = (uint64_t *)v165;
          goto LABEL_421;
        }
        v164 = 0;
        v168 = 0;
        if (!v166 || !v165)
          goto LABEL_419;
        v166 = v167;
        if ((uint64_t *)v165 != v167)
          break;
LABEL_421:
        if (*((__int16 *)v167 + 15) <= 0)
        {
          v167 = (uint64_t *)*v167;
        }
        else
        {
          v169 = *((unsigned __int16 *)v167 + 15);
          v167 = (uint64_t *)*v167;
          if (v164 == 0 || v164 >= v169)
          {
            v168 = v167;
            v164 = v169;
          }
        }
        v165 = (uint64_t)v168;
        if (!v167)
          goto LABEL_427;
      }
      do
      {
        if ((*(__int16 *)(v165 + 8) & 0x80000000) == 0)
          *(_WORD *)(v165 + 8) = -1;
        v165 = *(_QWORD *)v165;
      }
      while ((uint64_t *)v165 != v167);
      v168 = 0;
      v164 = 0;
LABEL_419:
      v166 = v167;
      goto LABEL_421;
    }
LABEL_427:
    if (*(int *)v48 < 1)
      goto LABEL_436;
    SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WString(a1, "after postcyclic deletion: ", 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = WriteBoundList(a1, v48, v279, 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WLn(a1);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
LABEL_252:
    if (*(int *)v48 < 1)
    {
LABEL_436:
      BestScenarioPathSuffix = 0;
    }
    else
    {
      SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      SentTermCommList = mosyntbase_WStringLn(a1, "before setting phrase types: ", 0);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      SentTermCommList = WriteBoundList(a1, v48, v279, 1);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
      BestScenarioPathSuffix = mosyntbase_WLn(a1);
      if ((BestScenarioPathSuffix & 0x80000000) != 0)
        return BestScenarioPathSuffix;
    }
    if (v279)
    {
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v174 = 0;
      LODWORD(v282) = 0;
      *(_QWORD *)&v289 = 0;
      *(_QWORD *)&v287[0] = 0;
      v175 = v279;
      v176 = 1;
      do
      {
        mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(v48 + 40), *((_DWORD *)v175 + 4), &v289);
        mosyntdata_GetPunctFromCommandList(a1, (uint64_t *)v289, &v282, v287);
        if ((_DWORD)v282 == 11)
          v177 = 1;
        else
          v177 = v171;
        if ((_DWORD)v282 == 10)
          v172 = 1;
        else
          v171 = v177;
        if (*((__int16 *)v175 + 14) >= 1)
        {
          if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8))
            && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), *((__int16 *)v175 + 14), 6u, 2))
          {
            v176 = 0;
            v174 = 1;
          }
          else if (v176 || !mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8)))
          {
            v176 = 0;
          }
          else
          {
            v176 = 0;
            if (mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), *((__int16 *)v175 + 14), 6u, 3))
              v173 = 1;
          }
        }
        v175 = (uint64_t *)*v175;
      }
      while (v175);
      if (v172)
      {
        if (v174)
        {
          v178 = 5;
        }
        else
        {
          if (v173)
          {
            v262 = v279;
            do
            {
              if (*((__int16 *)v262 + 14) >= 1
                && mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8))
                && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), *((__int16 *)v262 + 14), 6u, 3))
              {
                *((_WORD *)v262 + 4) = 2;
              }
              v262 = (uint64_t *)*v262;
            }
            while (v262);
            v178 = 8;
            v208 = 1;
            goto LABEL_533;
          }
          v178 = 4;
        }
LABEL_532:
        v208 = 0;
LABEL_533:
        if (!v279)
          goto LABEL_572;
        v209 = 0;
        v210 = 1;
        v211 = v279;
        while (1)
        {
          if ((__int16)v211[1] < 0)
          {
            v212 = (uint64_t *)*v211;
          }
          else
          {
            v212 = (uint64_t *)*v211;
            if (v209)
            {
              if (!v212)
              {
                *((_DWORD *)v209 + 8) = v178;
LABEL_572:
                if (*(int *)v48 >= 1)
                {
                  SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = mosyntbase_WStringLn(a1, "after setting phrase types: ", 0);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = WriteBoundList(a1, v48, v279, 1);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  BestScenarioPathSuffix = mosyntbase_WLn(a1);
                }
                if ((BestScenarioPathSuffix & 0x80000000) != 0)
                  return BestScenarioPathSuffix;
                v220 = mosyntkbsymtab_WildConsId(*(_QWORD *)(v48 + 8));
                if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8))
                  && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), v220, 9u, 1))
                {
                  if (v279)
                  {
                    v221 = v279;
                    do
                    {
                      if (*((_WORD *)v221 + 15))
                        ++*((_WORD *)v221 + 15);
                      v221 = (uint64_t *)*v221;
                    }
                    while (v221);
                    goto LABEL_585;
                  }
LABEL_646:
                  BestScenarioPathSuffix = 0;
                }
                else
                {
LABEL_585:
                  if (!v279)
                    goto LABEL_646;
                  v222 = 0;
                  v223 = 0;
                  v224 = 0;
                  BestScenarioPathSuffix = 0;
                  v225 = v279;
                  do
                  {
                    if (((__int16)v225[1] & 0x80000000) == 0)
                    {
                      if (v223)
                        *((_WORD *)v223 + 15) = 1;
                      *(_QWORD *)&v289 = 0;
                      SentTermCommList = mosyntpal_ALLOCATE(a1, (uint64_t *)&v289, 0x12Au);
                      if ((SentTermCommList & 0x80000000) != 0)
                        return SentTermCommList;
                      if (v224)
                      {
                        for (j = 0; j != 99; ++j)
                          *(_BYTE *)(v289 + j) = 0;
                        for (k = v224; (uint64_t *)k != v225; k = *(_QWORD *)k)
                        {
                          v228 = *(__int16 *)(k + 30);
                          if (v228 <= 98)
                            *(_BYTE *)(v289 + v228) = 1;
                        }
                        v229 = 0;
                        v230 = 1;
                        v231 = v289;
                        do
                        {
                          if (*(_BYTE *)(v231 + v229))
                            *(_WORD *)(v231 + 2 * v229 + 100) = v230++;
                          ++v229;
                        }
                        while (v229 != 99);
                        while ((uint64_t *)v224 != v225)
                        {
                          v232 = *(__int16 *)(v224 + 30);
                          if (v232 <= 98)
                          {
                            v233 = v289;
                            if (*(int *)v48 >= 2
                              && *(unsigned __int16 *)(v289 + 2 * v232 + 100) != (unsigned __int16)v232)
                            {
                              SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              SentTermCommList = mosyntbase_WString(a1, "accent normalization: ", 0);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              SentTermCommList = mosyntbase_WInt(a1, *(__int16 *)(v224 + 30), 0);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              SentTermCommList = mosyntbase_WString(a1, " changed to ", 0);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              SentTermCommList = mosyntbase_WInt(a1, *(__int16 *)(v289 + 2 * *(__int16 *)(v224 + 30) + 100), 0);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              SentTermCommList = mosyntbase_WLn(a1);
                              if ((SentTermCommList & 0x80000000) != 0)
                                return SentTermCommList;
                              v233 = v289;
                              LOWORD(v232) = *(_WORD *)(v224 + 30);
                            }
                            *(_WORD *)(v224 + 30) = *(_WORD *)(v233 + 2 * (__int16)v232 + 100);
                            if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8)))
                              v234 = mosyntkbsymtab_IntPropValue(a1, *(uint64_t **)(v48 + 8), *(__int16 *)(v224 + 28), 2u);
                            else
                              v234 = 1;
                            v235 = *(__int16 *)(v224 + 30);
                            if (v235 >= 2 && v234 > v235)
                              *(_WORD *)(v224 + 30) = v234;
                          }
                          v224 = *(_QWORD *)v224;
                        }
                      }
                      BestScenarioPathSuffix = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v289);
                      if ((BestScenarioPathSuffix & 0x80000000) != 0)
                        return BestScenarioPathSuffix;
                      v223 = 0;
                      v222 = 0;
                      v224 = (uint64_t)v225;
                    }
                    if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(v48 + 8))
                      && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(v48 + 8), v220, 7u, 1))
                    {
                      v236 = *((__int16 *)v225 + 15);
                      v237 = *((unsigned __int16 *)v225 + 15);
                      if (v222)
                        v238 = v222 <= v237;
                      else
                        v238 = 0;
                      v239 = !v238;
                      v240 = v239 == 0;
                      if (v239)
                        v241 = v225;
                      else
                        v241 = v223;
                      if (v240)
                        v237 = v222;
                    }
                    else
                    {
                      v236 = *((__int16 *)v225 + 15);
                      v237 = *((unsigned __int16 *)v225 + 15);
                      v242 = v222 != 0;
                      v243 = v222 < v237;
                      v244 = !v242 || !v243;
                      if (v242 && v243)
                        v241 = v223;
                      else
                        v241 = v225;
                      if (!v244)
                        v237 = v222;
                    }
                    if (v236 >= 1)
                    {
                      v223 = v241;
                      v222 = v237;
                    }
                    v225 = (uint64_t *)*v225;
                  }
                  while (v225);
                }
                if (*(int *)v48 >= 1)
                {
                  SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = mosyntbase_WString(a1, "accent normalization and accent limitation: ", 0);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = WriteBoundList(a1, v48, v279, 0);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  BestScenarioPathSuffix = mosyntbase_WLn(a1);
                }
                if ((BestScenarioPathSuffix & 0x80000000) != 0)
                  return BestScenarioPathSuffix;
                if (v279)
                {
                  v245 = 0;
                  v246 = v279;
                  do
                  {
                    v247 = *((__int16 *)v246 + 4);
                    if ((v247 & 0x80000000) == 0)
                    {
                      if (v245)
                      {
                        v248 = *((_DWORD *)v246 + 8);
                        v197 = v248 > 8;
                        v249 = (1 << v248) & 0x1D0;
                        v250 = v197 || v249 == 0;
                        if (!v250 && v245 != v246)
                        {
                          v252 = (uint64_t)v245;
                          do
                          {
                            if (*(_WORD *)(v252 + 30) == 2)
                              *(_WORD *)(v252 + 30) = 3;
                            v252 = *(_QWORD *)v252;
                          }
                          while ((uint64_t *)v252 != v246);
                        }
                      }
                      if ((unsigned __int16)v247 < 2u)
                        v245 = v246;
                    }
                    v246 = (uint64_t *)*v246;
                  }
                  while (v246);
                }
                if (*(int *)v48 >= 1)
                {
                  SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = mosyntbase_WString(a1, "reduction of pitch accents: ", 0);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = WriteBoundList(a1, v48, v279, 0);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                  SentTermCommList = mosyntbase_WLn(a1);
                  if ((SentTermCommList & 0x80000000) != 0)
                    return SentTermCommList;
                }
                if (v279)
                {
                  v253 = *(_QWORD *)(v48 + 40);
                  if (v253)
                  {
                    v254 = v279;
                    while (1)
                    {
                      v255 = v254;
                      v256 = *(_QWORD *)(v253 + 16 * *((int *)v254 + 4) + 8);
                      if (v256)
                      {
                        v257 = *((__int16 *)v255 + 4);
                        if (v257 >= 2)
                          v257 = 2;
                        *(_DWORD *)(v256 + 8) = v257;
                        *(_DWORD *)(v256 + 12) = *((_DWORD *)v255 + 8);
                      }
                      v254 = (uint64_t *)*v255;
                      if (!*v255)
                        break;
                      v258 = *(_QWORD *)(v253 + 16 * *((int *)v255 + 5));
                      if (v258)
                      {
                        v259 = *((__int16 *)v255 + 15);
                        if (v259 >= 3)
                          v260 = 3;
                        else
                          v260 = v259;
                        if (v259 <= 98)
                          v261 = v260;
                        else
                          v261 = 0;
                        *(_DWORD *)(v258 + 16) = v261;
                      }
                    }
                  }
                }
                if (v279)
                {
                  do
                  {
                    *(_QWORD *)&v289 = v279;
                    v279 = (uint64_t *)*v279;
                    v263 = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v289);
                    BestScenarioPathSuffix = v263;
                  }
                  while ((v263 & 0x80000000) == 0 && v279);
                  if ((v263 & 0x80000000) != 0)
                    return BestScenarioPathSuffix;
                }
LABEL_557:
                v214 = v280;
                v215 = *(uint64_t **)(v280 + 32);
                *(_QWORD *)&v289 = v215;
                if (v215)
                {
                  while (2)
                  {
                    v216 = (uint64_t *)*v215;
                    switch(*((_DWORD *)v215 + 2))
                    {
                      case 1:
                      case 4:
                        v217 = v215 + 2;
                        v218 = a1;
                        goto LABEL_565;
                      case 2:
                        v217 = v215 + 2;
                        v218 = a1;
                        goto LABEL_565;
                      case 3:
                        v217 = v215 + 2;
                        v218 = a1;
                        goto LABEL_565;
                      case 5:
                        v217 = v215 + 2;
                        v218 = a1;
                        goto LABEL_565;
                      case 6:
                      case 8:
                        v217 = v215 + 2;
                        v218 = a1;
                        goto LABEL_565;
                      case 7:
                        v217 = v215 + 2;
                        v218 = a1;
LABEL_565:
                        SentTermCommList = mosyntpal_DEALLOCATE(v218, v217);
                        if ((SentTermCommList & 0x80000000) == 0)
                          goto LABEL_566;
                        return SentTermCommList;
                      default:
LABEL_566:
                        SentTermCommList = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v289);
                        if ((SentTermCommList & 0x80000000) != 0)
                          return SentTermCommList;
                        *(_QWORD *)&v289 = v216;
                        v215 = v216;
                        if (!v216)
                          break;
                        continue;
                    }
                    break;
                  }
                }
                *(_QWORD *)(v214 + 32) = 0;
                return mosyntpal_DEALLOCATE(a1, &v280);
              }
              if (v208)
              {
                if (v210)
                {
                  v210 = 0;
                  *((_DWORD *)v209 + 8) = 6;
                }
                else
                {
                  *((_DWORD *)v209 + 8) = 7;
                }
              }
              else
              {
                *((_DWORD *)v209 + 8) = 1;
              }
            }
            v209 = v211;
          }
          v211 = v212;
          if (!v212)
            goto LABEL_572;
        }
      }
      if (v171)
      {
        v178 = 9;
        goto LABEL_532;
      }
    }
    v178 = 2;
    goto LABEL_532;
  }
  v283 = 0;
  *(_QWORD *)(v280 + 80) = 0;
  *(_QWORD *)(v48 + 88) = 0;
  *(_DWORD *)(v48 + 72) = 0;
  NewAPVertex(a1, v48, *(_DWORD *)(a8 + 52), (uint64_t *)&v283);
  if ((SentTermCommList & 0x80000000) != 0)
    return SentTermCommList;
  *(_QWORD *)&v289 = 0;
  TreeToChart(a1, v48, a8, (uint64_t)v283, 0, (uint64_t *)&v289);
  if ((SentTermCommList & 0x80000000) != 0)
    return SentTermCommList;
  v49 = (uint64_t *)&v283;
  if ((_QWORD)v289)
    v49 = (uint64_t *)(v289 + 24);
  v50 = (unsigned int *)*v49;
  if (v283 == (uint64_t *)*v49)
    goto LABEL_557;
  SentTermCommList = SetFunctionWords(a1, v48, (uint64_t)v283, *v49);
  if ((SentTermCommList & 0x80000000) != 0)
    return SentTermCommList;
  v281 = 0;
  v51 = v283;
  if (*(int *)v48 >= 1)
  {
    SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WriteMessage(a1, "[AccPhr] Sentence PoS and phonetic string:\\n", 0, "", 0, "", 0, "", 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WString(a1, "[AccPhr] ", 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = WriteCoverage(a1, v48, (unsigned int *)v51, v50);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WLn(a1);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
  }
  v282 = 0;
  if (v51 == (uint64_t *)v50)
  {
    v278 = (uint64_t *)(v48 + 16);
    goto LABEL_108;
  }
  do
  {
    SentTermCommList = MatchEdge(a1, v48, v51[4], &v282, &v281);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    for (m = (_QWORD *)v51[6]; m; m = (_QWORD *)*m)
    {
      SentTermCommList = MatchEdge(a1, v48, (uint64_t)m, &v282, &v281);
      if ((SentTermCommList & 0x80000000) != 0)
        return SentTermCommList;
    }
    v51 = (uint64_t *)v51[2];
  }
  while (v51 != (uint64_t *)v50);
  v53 = v282;
  v54 = *(_QWORD *)(v48 + 16);
  v278 = (uint64_t *)(v48 + 16);
  if (v282)
  {
    BestScenarioPathSuffix = 0;
    do
    {
      if (IsMatchingRule(a1, v48, *((unsigned int *)v53 + 2), (_QWORD **)v53[3], v53[2]))
      {
        BestScenarioPathSuffix = AddEdgeRule(a1, v48, *((_DWORD *)v53 + 2), v53[3]);
        if ((BestScenarioPathSuffix & 0x80000000) != 0)
          return BestScenarioPathSuffix;
        if ((int)mosyntkbaccphr_GetRule(0, v54, *((unsigned int *)v53 + 2)) >= 1)
        {
          BestScenarioPathSuffix = AddRuleScenarios(a1, v48, *((unsigned int *)v53 + 2), (uint64_t *)(v53[2] + 40), &v281);
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
        }
      }
      v53 = (uint64_t *)*v53;
    }
    while (v53);
    if ((BestScenarioPathSuffix & 0x80000000) != 0)
      return BestScenarioPathSuffix;
  }
LABEL_108:
  v61 = v281;
  v62 = v283;
  if (v281)
  {
    v63 = 0;
    v295 = 0;
    v293 = 0u;
    v294 = 0u;
    v291 = 0u;
    v292 = 0u;
    v289 = 0u;
    v290 = 0u;
    do
    {
      BestScenarioPathSuffix = mosyntkbsymtab_AtomSymString(a1, *(uint64_t **)(v48 + 8), *(_DWORD *)(v61 + 8), (char *)&v289, 100);
      if ((BestScenarioPathSuffix & 0x80000000) != 0)
        return BestScenarioPathSuffix;
      if (v62 != (uint64_t *)v50)
      {
        v64 = 1;
        v65 = v62;
        do
        {
          v66 = (uint64_t)v65;
          while (1)
          {
            v67 = *(_QWORD **)(v66 + 48);
            v68 = *(_DWORD *)(v61 + 8);
            if (v67)
            {
              do
              {
                v69 = v67;
                v70 = v67[5];
                if (v70)
                {
                  while (1)
                  {
                    v71 = *(_DWORD *)(v70 + 8);
                    if (v71 >= v68)
                      break;
                    v70 = *(_QWORD *)v70;
                    if (!v70)
                      goto LABEL_120;
                  }
                  LOBYTE(v70) = v71 == v68;
                }
LABEL_120:
                if ((v70 & 1) != 0)
                  break;
                v67 = (_QWORD *)*v69;
              }
              while (*v69);
              if ((v70 & 1) != 0)
                break;
            }
            v72 = *(_QWORD *)(v66 + 32);
            v73 = *(uint64_t **)(v72 + 40);
            if (v73)
            {
              v65 = *(uint64_t **)(v72 + 24);
              while (1)
              {
                v74 = *((_DWORD *)v73 + 2);
                if (v74 >= v68)
                  break;
                v73 = (uint64_t *)*v73;
                if (!v73)
                  goto LABEL_129;
              }
              if (v74 == v68)
                goto LABEL_134;
            }
LABEL_129:
            if ((v64 & 1) == 0)
            {
              BestScenarioPathSuffix = AddSegment(a1, v48, v68, v63, (_DWORD *)v66);
              if ((BestScenarioPathSuffix & 0x80000000) != 0)
                return BestScenarioPathSuffix;
            }
            v66 = *(_QWORD *)(v66 + 16);
            v64 = 1;
            if ((unsigned int *)v66 == v50)
              goto LABEL_138;
          }
          v65 = (uint64_t *)v69[3];
LABEL_134:
          v163 = (v64 & 1) == 0;
          v64 = 0;
          if (!v163)
            v63 = v66;
        }
        while (v65 != (uint64_t *)v50);
        BestScenarioPathSuffix = AddSegment(a1, v48, v68, v63, v50);
        if ((BestScenarioPathSuffix & 0x80000000) != 0)
          return BestScenarioPathSuffix;
      }
LABEL_138:
      v61 = *(_QWORD *)v61;
    }
    while (v61);
    if ((BestScenarioPathSuffix & 0x80000000) != 0)
      return BestScenarioPathSuffix;
    v62 = v283;
  }
  v284 = 0;
  v286 = 0;
  v285 = 0;
  v288 = 0;
  memset(v287, 0, sizeof(v287));
  BestScenarioPathSuffix = GetBestScenarioPathSuffix(a1, (_QWORD *)v48, 0, (uint64_t)v62, (uint64_t)v50, (int *)&v286 + 1, &v286, &v285, &v284);
  if ((BestScenarioPathSuffix & 0x80000000) != 0)
    return BestScenarioPathSuffix;
  v269 = v50;
  v75 = (_QWORD *)v284;
  if (*(int *)v48 >= 1)
  {
    SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
    if ((SentTermCommList & 0x80000000) == 0)
    {
      BestScenarioPathSuffix = mosyntbase_WriteMessage(a1, "[AccPhr] Optimal Scenario Combination:\\n", 0, "", 0, "", 0, "", 0);
      if ((BestScenarioPathSuffix & 0x80000000) != 0)
        return BestScenarioPathSuffix;
      goto LABEL_145;
    }
    return SentTermCommList;
  }
LABEL_145:
  if (v75)
  {
    while (1)
    {
      if (*(int *)v48 >= 1 && v62 != *(uint64_t **)(v75[1] + 8))
      {
        SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        SentTermCommList = mosyntbase_WString(a1, "[AccPhr] No scenario covering: ", 0);
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        SentTermCommList = WriteCoverage(a1, v48, (unsigned int *)v62, *(unsigned int **)(v75[1] + 8));
        if ((SentTermCommList & 0x80000000) != 0)
          return SentTermCommList;
        BestScenarioPathSuffix = mosyntbase_WLn(a1);
        if ((BestScenarioPathSuffix & 0x80000000) != 0)
          return BestScenarioPathSuffix;
      }
      v76 = v75[1];
      v77 = *(uint64_t **)(v76 + 8);
      if (v62 != v77)
      {
        do
        {
          *((_DWORD *)v62 + 20) = 0;
          v62 = (uint64_t *)v62[2];
        }
        while (v62 != v77);
        v62 = v77;
      }
      if (*(int *)v48 >= 1)
        break;
      while (v62 != *(uint64_t **)(v76 + 16))
      {
        v79 = *(_DWORD *)(v76 + 24);
        *((_DWORD *)v62 + 20) = v79;
        BestScenarioPathSuffix = mosyntkbsymtab_AtomSymString(a1, *(uint64_t **)(v48 + 8), v79, (char *)v287, 100);
        if ((BestScenarioPathSuffix & 0x80000000) != 0)
          return BestScenarioPathSuffix;
        v62 = (uint64_t *)v62[2];
LABEL_163:
        v76 = v75[1];
      }
      v75 = (_QWORD *)*v75;
      if (!v75)
        goto LABEL_168;
    }
    SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
    if ((SentTermCommList & 0x80000000) == 0)
    {
      SentTermCommList = mosyntbase_WString(a1, "[AccPhr] Scenario '", 0);
      if ((SentTermCommList & 0x80000000) == 0)
      {
        v78 = *(_DWORD *)(v75[1] + 24);
        v295 = 0;
        v293 = 0u;
        v294 = 0u;
        v291 = 0u;
        v292 = 0u;
        v289 = 0u;
        v290 = 0u;
        SentTermCommList = mosyntkbsymtab_AtomSymString(a1, *(uint64_t **)(v48 + 8), v78, (char *)&v289, 100);
        if ((SentTermCommList & 0x80000000) == 0)
        {
          SentTermCommList = mosyntbase_WString(a1, (unsigned __int8 *)&v289, 100);
          if ((SentTermCommList & 0x80000000) == 0)
          {
            SentTermCommList = mosyntbase_WString(a1, "' covers: ", 0);
            if ((SentTermCommList & 0x80000000) == 0)
            {
              SentTermCommList = WriteCoverage(a1, v48, *(unsigned int **)(v75[1] + 8), *(unsigned int **)(v75[1] + 16));
              if ((SentTermCommList & 0x80000000) == 0)
              {
                BestScenarioPathSuffix = mosyntbase_WLn(a1);
                if ((BestScenarioPathSuffix & 0x80000000) != 0)
                  return BestScenarioPathSuffix;
                goto LABEL_163;
              }
            }
          }
        }
      }
    }
    return SentTermCommList;
  }
LABEL_168:
  if (v62 != (uint64_t *)v269 && *(int *)v48 >= 1)
  {
    SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = mosyntbase_WString(a1, "[AccPhr] No scenario covering: ", 0);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    SentTermCommList = WriteCoverage(a1, v48, (unsigned int *)v62, v269);
    if ((SentTermCommList & 0x80000000) != 0)
      return SentTermCommList;
    BestScenarioPathSuffix = mosyntbase_WLn(a1);
    if ((BestScenarioPathSuffix & 0x80000000) != 0)
      return BestScenarioPathSuffix;
  }
  while (v62 != (uint64_t *)v269)
  {
    *((_DWORD *)v62 + 20) = 0;
    v62 = (uint64_t *)v62[2];
  }
  if ((BestScenarioPathSuffix & 0x80000000) != 0)
    return BestScenarioPathSuffix;
  v100 = v283;
  if (v283 == (uint64_t *)v269)
  {
    BestScenarioPathSuffix = 0;
    goto LABEL_434;
  }
  BestScenarioPathSuffix = 0;
  v272 = *v278;
  v101 = v283;
  v264 = v283;
  do
  {
    v102 = v101[6];
    v265 = v102 == 0;
    v276 = v101;
    if (!v102)
    {
      v102 = v101[4];
      if (!v102)
        goto LABEL_407;
    }
    do
    {
      v103 = *(_QWORD **)(v102 + 32);
      v104 = v272;
      if (!v103)
        goto LABEL_400;
      do
      {
        v270 = (_QWORD **)v103;
        v105 = (uint64_t *)v103[2];
        if (!v105)
          goto LABEL_399;
        do
        {
          if ((int)mosyntkbaccphr_GetRule(0, v104, *((unsigned int *)v105 + 2)) < 1)
            goto LABEL_398;
          Rule = mosyntkbaccphr_GetRule(0, v104, *((unsigned int *)v105 + 2));
          v107 = *((_DWORD *)v276 + 20);
          v108 = *v278;
          for (n = mosyntkbaccphr_AccPhrScenarios(*v278); ; n = mosyntkbaccphr_GetScenario(3, v108, v110))
          {
            v110 = n;
            Scenario = mosyntkbaccphr_Nil(n);
            if ((_DWORD)v110 == (_DWORD)Scenario)
              break;
            Scenario = mosyntkbaccphr_GetScenario(1, v108, v110);
            if ((_DWORD)Scenario == v107)
              break;
          }
          if ((_DWORD)v110 == mosyntkbaccphr_Nil(Scenario))
            goto LABEL_398;
          RuleSet = mosyntkbaccphr_GetScenario(2, v108, v110);
          if ((_DWORD)RuleSet == mosyntkbaccphr_Nil(RuleSet))
            goto LABEL_398;
          do
          {
            if (mosyntkbaccphr_GetRuleSetIsSubset(v108, RuleSet))
              v113 = 0;
            else
              v113 = mosyntkbaccphr_GetRuleSet(1, v108, RuleSet) == Rule;
            RuleSet = mosyntkbaccphr_GetRuleSet(4, v108, RuleSet);
          }
          while ((_DWORD)RuleSet != mosyntkbaccphr_Nil(RuleSet) && !v113);
          if (!v113)
            goto LABEL_398;
          if (*(int *)v48 >= 1)
          {
            SentTermCommList = mosyntbase_WriteMessage(a1, "[AccPhr]\\n[AccPhr] <<<< Applying rule:\\n", 0, "", 0, "", 0, "", 0);
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntbase_WString(a1, "[AccPhr] ", 0);
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntkbaccphr_WriteRuleHeadline(a1, *(uint64_t **)(v48 + 8), v272, *((_DWORD *)v105 + 2));
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntbase_WLn(a1);
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntbase_WriteMessage(a1, "[AccPhr] Node Covers:\\n", 0, "", 0, "", 0, "", 0);
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntbase_WString(a1, "[AccPhr] ", 0);
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = WriteCoverage(a1, v48, *(unsigned int **)(v102 + 16), *(unsigned int **)(v102 + 24));
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
            SentTermCommList = mosyntbase_WLn(a1);
            v104 = v272;
            if ((SentTermCommList & 0x80000000) != 0)
              return SentTermCommList;
          }
          v114 = mosyntkbaccphr_GetRule(12, v104, *((unsigned int *)v105 + 2));
          *(_QWORD *)&v289 = 0;
          v285 = 0;
          LODWORD(v286) = 0;
          *(_QWORD *)&v287[0] = 0;
          v284 = 0;
          v115 = *v278;
          if (mosyntkbaccphr_Nil(v114) == (_DWORD)v114)
            goto LABEL_288;
          v267 = 0;
          BestScenarioPathSuffix = 0;
          v274 = v115;
          do
          {
            mosyntkbaccphr_GetInstrType(v115, v114);
            if (mosyntkbaccphr_GetInstrType(v115, v114) > 6)
              goto LABEL_379;
            *(_QWORD *)&v289 = v102;
            Instr = mosyntkbaccphr_GetInstr(0, v115, v114);
            if (!mosyntkbaccphr_GetNode(3, v115, Instr))
              goto LABEL_319;
            v125 = mosyntkbaccphr_GetInstr(0, v115, v114);
            if ((mosyntkbaccphr_GetNodeMatchOp(v115, v125) & 1) != 0)
            {
              v126 = mosyntkbaccphr_GetInstr(0, v115, v114);
              v127 = *v270;
              HIDWORD(v286) = v126;
              if (v127)
              {
                do
                {
                  v128 = IsMatchingNode(a1, v48, (unsigned int *)&v286 + 1, (uint64_t)v127);
                  if (v128)
                    break;
                  v127 = (_QWORD *)*v127;
                }
                while (v127);
                v115 = v274;
                if (v128)
                  goto LABEL_319;
              }
              else
              {
                v115 = v274;
              }
            }
            v129 = mosyntkbaccphr_GetInstr(0, v115, v114);
            if ((mosyntkbaccphr_GetNodeMatchOp(v115, v129) & 2) == 0 || !*(_QWORD *)(v102 + 72))
            {
LABEL_375:
              v115 = v274;
              goto LABEL_379;
            }
            InstrRight = mosyntkbaccphr_GetInstrRight(v274, v114);
            if ((_DWORD)InstrRight)
            {
              v131 = *(_QWORD **)(v102 + 72);
              do
              {
                v132 = v131;
                v131 = (_QWORD *)v131[7];
              }
              while (v131);
              v133 = mosyntkbaccphr_GetInstr(0, v274, v114);
              v134 = IsRightMatchingTarget(a1, v48, v133, v132, &v289);
            }
            else
            {
              v135 = mosyntkbaccphr_GetInstr(InstrRight, v274, v114);
              v134 = IsLeftMatchingTarget(a1, v48, v135, *(_QWORD **)(v102 + 72), &v289);
            }
            v115 = v274;
            if (v134)
            {
LABEL_319:
              if (*(int *)v48 >= 1)
              {
                SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                SentTermCommList = mosyntbase_WStringLn(a1, "[AccPhr]", 0);
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                SentTermCommList = mosyntbase_WString(a1, "[AccPhr] --> Instruction ", 0);
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                v115 = v274;
                BestScenarioPathSuffix = mosyntkbaccphr_WriteInstruction(a1, *(uint64_t **)(v48 + 8), v274, v114);
                if ((BestScenarioPathSuffix & 0x80000000) != 0)
                  return BestScenarioPathSuffix;
              }
              InstrType = mosyntkbaccphr_GetInstrType(v115, v114);
              if ((InstrType - 3) >= 3)
              {
                if (InstrType == 2)
                {
                  if (mosyntkbaccphr_GetInstrRight(v274, v114))
                    v140 = (__int128 *)(*(_QWORD *)(v289 + 24) + 24);
                  else
                    v140 = &v289;
                  v141 = 0;
                  v143 = *(_QWORD *)(*(_QWORD *)v140 + 16);
                  v267 = *(_QWORD *)(v143 + 32);
                  *(_DWORD *)(v143 + 84) = 1;
                }
                else if (InstrType)
                {
                  v141 = 1;
                }
                else
                {
                  if (mosyntkbaccphr_GetInstrRight(v274, v114))
                  {
                    v138 = *(_QWORD *)(v289 + 24);
                    v139 = (uint64_t *)(v138 + 24);
                  }
                  else
                  {
                    v138 = *(_QWORD *)(v289 + 16);
                    v139 = (uint64_t *)(v138 + 32);
                  }
                  v267 = *v139;
                  if (mosyntkbaccphr_GetInstr(2, v274, v114))
                  {
                    if (mosyntkbaccphr_GetInstr(2, v274, v114) == 1)
                      v142 = 5;
                    else
                      v142 = mosyntkbaccphr_GetInstr(2, v274, v114);
                    LODWORD(v286) = v142;
                    if (*(unsigned __int16 *)(v138 + 68) < 2u)
                      goto LABEL_370;
                    *(_WORD *)(v138 + 68) = 1;
                    if (v142 <= *(_DWORD *)(v138 + 72))
                      goto LABEL_370;
                    v141 = 0;
                    *(_DWORD *)(v138 + 72) = v142;
                  }
                  else
                  {
                    if ((*(__int16 *)(v138 + 68) & 0x80000000) == 0)
                      goto LABEL_370;
                    v141 = 0;
                    *(_WORD *)(v138 + 68) = 2;
                  }
                }
              }
              else
              {
                if (mosyntkbaccphr_GetInstrTargetRange(v115, v114)
                  && mosyntkbaccphr_GetInstrTargetRange(v115, v114) == 1)
                {
                  if (mosyntkbaccphr_GetInstrRight(v115, v114))
                    v137 = *(_QWORD *)(*(_QWORD *)(v289 + 24) + 24);
                  else
                    v137 = *(_QWORD *)(*(_QWORD *)(v289 + 16) + 32);
                  *(_QWORD *)&v289 = v137;
                  v115 = v274;
                }
                v267 = v289;
                v144 = *(_QWORD *)(v289 + 16);
                v145 = mosyntkbaccphr_GetInstrType(v115, v114);
                if (v145 == 4)
                  v146 = 2;
                else
                  v146 = 1;
                if (v145 == 5)
                  v147 = 3;
                else
                  v147 = v146;
                v148 = mosyntkbaccphr_GetInstr(2, v115, v114);
                SentTermCommList = mosyntdata_EncodeSymbolicValue(a1, v148, 0, &v286);
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                v149 = mosyntkbaccphr_GetInstr(2, v274, v114);
                BestScenarioPathSuffix = mosyntdata_EncodeSymbolicValue(a1, v149, 1, &v285);
                if ((BestScenarioPathSuffix & 0x80000000) != 0)
                  return BestScenarioPathSuffix;
                do
                {
                  v150 = mosyntdata_SentTermBoundData(a1, *(_QWORD *)(v48 + 40), *(_DWORD *)(*(_QWORD *)(v144 + 32) + 84));
                  if (v150)
                  {
                    v151 = (_QWORD *)v150;
                    SentTermCommList = mosyntdata_NewCommand(a1, &v284);
                    if ((SentTermCommList & 0x80000000) != 0)
                      return SentTermCommList;
                    v152 = v284;
                    v153 = v286;
                    *(_DWORD *)(v284 + 8) = v147;
                    *(_DWORD *)(v152 + 12) = v153;
                    *(_QWORD *)&v287[0] = mosyntdata_LastCommand(a1, (_QWORD *)*v151);
                    BestScenarioPathSuffix = mosyntdata_AppendCommandList(a1, v151, v287, v284, v284);
                    if ((BestScenarioPathSuffix & 0x80000000) != 0)
                      return BestScenarioPathSuffix;
                  }
                  v144 = *(_QWORD *)(v144 + 16);
                  v154 = mosyntdata_SentTermBoundData(a1, *(_QWORD *)(v48 + 40), *(_DWORD *)(v144 + 64));
                  if (v154)
                  {
                    v155 = (_QWORD **)v154;
                    SentTermCommList = mosyntdata_NewCommand(a1, &v284);
                    if ((SentTermCommList & 0x80000000) != 0)
                      return SentTermCommList;
                    v156 = v284;
                    v157 = v285;
                    *(_DWORD *)(v284 + 8) = v147;
                    *(_DWORD *)(v156 + 12) = v157;
                    *(_QWORD *)&v287[0] = mosyntdata_LastCommand(a1, *v155);
                    v158 = v284;
                    if (v284 && (*(_QWORD *)v284 = *v155, *v155 = (_QWORD *)v158, !*(_QWORD *)&v287[0]))
                    {
                      BestScenarioPathSuffix = 0;
                      *(_QWORD *)&v287[0] = v158;
                    }
                    else
                    {
                      BestScenarioPathSuffix = 0;
                    }
                  }
                }
                while (v144 != *(_QWORD *)(v289 + 24));
LABEL_370:
                v141 = 0;
              }
              if (*(int *)v48 < 1)
                goto LABEL_375;
              SentTermCommList = mosyntbase_WString(a1, " : ", 0);
              if ((SentTermCommList & 0x80000000) != 0)
                return SentTermCommList;
              if ((v141 & 1) != 0)
              {
                v159 = mosyntbase_WStringLn(a1, " not implemented yet!", 0);
              }
              else
              {
                SentTermCommList = WriteCoverage(a1, v48, *(unsigned int **)(v267 + 16), *(unsigned int **)(v267 + 24));
                if ((SentTermCommList & 0x80000000) != 0)
                  return SentTermCommList;
                v159 = mosyntbase_WLn(a1);
              }
              BestScenarioPathSuffix = v159;
              v115 = v274;
              if ((v159 & 0x80000000) != 0)
                return BestScenarioPathSuffix;
            }
LABEL_379:
            v114 = mosyntkbaccphr_GetInstr(6, v115, v114);
          }
          while ((_DWORD)v114 != mosyntkbaccphr_Nil(v114));
          v104 = v272;
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
LABEL_288:
          v116 = mosyntkbaccphr_GetRule(13, v104, *((unsigned int *)v105 + 2));
          v117 = *v278;
          Children = mosyntkbaccphr_Nil(v116);
          LODWORD(v119) = v116;
          if ((_DWORD)v116 != (_DWORD)Children)
          {
            v119 = v116;
            do
            {
              v120 = *(_QWORD *)(v102 + 16);
              Children = mosyntkbaccphr_GetChildren(1, v117, v116);
              LODWORD(v289) = Children;
              if (v120 == *(_QWORD *)(v102 + 24))
                break;
              v121 = Children;
              do
              {
                Children = mosyntkbaccphr_Nil(Children);
                if ((_DWORD)v121 == (_DWORD)Children)
                  break;
                v122 = *(_QWORD **)(*(_QWORD *)(v120 + 32) + 32);
                do
                {
                  v123 = (uint64_t)v122;
                  v122 = (_QWORD *)*v122;
                }
                while (v122);
                Children = IsMatchingNode(a1, v48, (unsigned int *)&v289, v123);
                if (!(_DWORD)Children)
                  break;
                v120 = *(_QWORD *)(v120 + 16);
                Children = mosyntkbaccphr_GetNode(8, v117, v121);
                v121 = Children;
                LODWORD(v289) = Children;
              }
              while (v120 != *(_QWORD *)(v102 + 24));
              if (v120 == *(_QWORD *)(v102 + 24))
                break;
              v119 = mosyntkbaccphr_GetChildren(2, v117, v119);
              Children = mosyntkbaccphr_Nil(v119);
            }
            while ((_DWORD)v119 != (_DWORD)Children);
          }
          if ((_DWORD)v119 == mosyntkbaccphr_Nil(Children))
          {
            BestScenarioPathSuffix = 0;
            goto LABEL_395;
          }
          if (*(int *)v48 < 1)
          {
            BestScenarioPathSuffix = 0;
            goto LABEL_390;
          }
          SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          SentTermCommList = mosyntbase_WStringLn(a1, "[AccPhr]", 0);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          SentTermCommList = mosyntknowl_WriteTraceHeader(a1, 4u);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          SentTermCommList = mosyntbase_WString(a1, "[AccPhr] --> Template ", 0);
          if ((SentTermCommList & 0x80000000) != 0)
            return SentTermCommList;
          BestScenarioPathSuffix = mosyntkbaccphr_WritePromTemplate(a1, *(uint64_t **)(v48 + 8), v117, v119);
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
LABEL_390:
          v160 = *(_QWORD *)(v102 + 16);
          v161 = mosyntkbaccphr_GetChildren(1, v117, v116);
          if (v160 == *(_QWORD *)(v102 + 24))
          {
LABEL_395:
            v104 = v272;
          }
          else
          {
            Node = v161;
            do
            {
              *(_DWORD *)(v160 + 84) = mosyntkbaccphr_GetNode(2, v117, Node);
              v160 = *(_QWORD *)(v160 + 16);
              Node = mosyntkbaccphr_GetNode(8, v117, Node);
            }
            while (v160 != *(_QWORD *)(v102 + 24));
            v104 = v272;
            if ((BestScenarioPathSuffix & 0x80000000) != 0)
              return BestScenarioPathSuffix;
          }
          if (*(int *)v48 >= 1)
          {
            BestScenarioPathSuffix = mosyntbase_WriteMessage(a1, "[AccPhr] End rule.>>>>>\\n", 0, "", 0, "", 0, "", 0);
            if ((BestScenarioPathSuffix & 0x80000000) != 0)
              return BestScenarioPathSuffix;
          }
LABEL_398:
          v105 = (uint64_t *)*v105;
        }
        while (v105);
LABEL_399:
        v103 = *v270;
      }
      while (*v270);
LABEL_400:
      v102 = *(_QWORD *)v102;
      if (v102)
        v163 = 0;
      else
        v163 = !v265;
      if (v163)
      {
        v102 = v276[4];
        v265 = 1;
      }
    }
    while (v102);
LABEL_407:
    v101 = (uint64_t *)v276[2];
    v100 = v264;
  }
  while (v101 != (uint64_t *)v269);
LABEL_434:
  *((_WORD *)v100 + 34) = 0;
  *(_QWORD *)&v289 = 0;
  if (v269)
  {
    mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(v48 + 40), v269[16], &v289);
    v170 = (uint64_t *)v289;
  }
  else
  {
    v170 = 0;
  }
  *((_WORD *)v269 + 34) = FinalBoundaryIndex(a1, v170);
  if ((BestScenarioPathSuffix & 0x80000000) != 0)
    return BestScenarioPathSuffix;
  v266 = v283;
  if (!v283)
  {
    BestScenarioPathSuffix = 0;
    goto LABEL_548;
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  BestScenarioPathSuffix = 0;
  LODWORD(v284) = 0;
  *(_QWORD *)&v289 = 0;
  *(_QWORD *)&v287[0] = 0;
  v182 = v283;
  while (2)
  {
    v271 = v182;
    if ((*((__int16 *)v182 + 34) & 0x80000000) == 0)
    {
      if (!v180 || v179)
      {
LABEL_498:
        if (v179)
          goto LABEL_505;
        v181 = v180;
        v180 = v182;
      }
      else
      {
        if (v180 == v182)
          goto LABEL_495;
        v179 = 0;
        v183 = -1;
        v268 = v180;
        do
        {
          v275 = v183;
          v277 = v179;
          v273 = v180;
          v184 = *(_QWORD **)(v180[4] + 32);
          do
          {
            v185 = v184;
            v184 = (_QWORD *)*v184;
          }
          while (v184);
          v186 = *v278;
          v187 = mosyntkbaccphr_AccPhrHierarchy(*v278);
          BYTE4(v286) = 0;
          v188 = mosyntkbaccphr_Nil(v187);
          if ((_DWORD)v187 == (_DWORD)v188)
          {
            v189 = 0;
          }
          else
          {
            v189 = 0;
            do
            {
              v190 = v185[1];
              v191 = *(__int16 *)(v190 + 16);
              v192 = (unsigned __int16 *)(v190 + 24);
              ConsList = mosyntkbaccphr_GetConsList(0, v186, v187);
              v194 = mosyntkbaccphr_GetConsList(1, v186, v187);
              v195 = mosyntkbaccphr_CheckMatchingConsFeat3(a1, v186, v191, v192, ConsList, v194, (char *)&v286 + 4);
              if (!BYTE4(v286))
              {
                ++v189;
                v195 = mosyntkbaccphr_GetConsList(2, v186, v187);
                v187 = v195;
              }
              v188 = mosyntkbaccphr_Nil(v195);
            }
            while ((_DWORD)v187 != (_DWORD)v188 && !BYTE4(v286));
          }
          if ((_DWORD)v187 == mosyntkbaccphr_Nil(v188))
            v196 = -1;
          else
            v196 = v189;
          v183 = v275;
          v197 = v275 < 0 || v196 < v275;
          v198 = v197;
          v199 = v198 == 0;
          v182 = v271;
          v179 = v277;
          if (v198)
            v200 = (uint64_t)v271;
          else
            v200 = v277;
          if (v199)
            v201 = v275;
          else
            v201 = v196;
          if (v196 >= 0)
          {
            v179 = v200;
            v183 = v201;
          }
          v180 = (uint64_t *)v273[2];
        }
        while (v180 != v271);
        v180 = v268;
        if (!v179)
        {
LABEL_495:
          v179 = (uint64_t)v180;
          if (mosyntkbaccphr_AccPhrDefaultEmph(*v278) == 1)
            goto LABEL_498;
          if (mosyntkbaccphr_AccPhrDefaultEmph(*v278) == 2)
          {
            v182 = v271;
            v179 = v271[1];
            goto LABEL_498;
          }
          v202 = *(_DWORD *)v180;
          v182 = v271;
          v203 = *(_DWORD *)v271 + *(_DWORD *)v180;
          if (*(_DWORD *)v271 + v202 < 0 != __OFADD__(*(_DWORD *)v271, v202))
            ++v203;
          v179 = (uint64_t)v180;
          if (v202 != v203 >> 1)
          {
            v204 = v203 >> 1;
            v179 = (uint64_t)v180;
            do
              v179 = *(_QWORD *)(v179 + 16);
            while (*(_DWORD *)v179 != v204);
          }
        }
LABEL_505:
        *(_DWORD *)(v179 + 84) = 1;
        v181 = v180;
        v180 = v182;
        v179 = 0;
      }
    }
    if (*((_DWORD *)v182 + 21) == 1)
    {
      if (v179)
      {
        if (mosyntkbaccphr_AccPhrDefaultEmph(*v278) == 1)
        {
          v205 = 3;
        }
        else
        {
          *(_DWORD *)(v179 + 84) = -1;
          BestScenarioPathSuffix = SetFunctionWords(a1, v48, v179, *(_QWORD *)(v179 + 16));
          if ((BestScenarioPathSuffix & 0x80000000) != 0)
            return BestScenarioPathSuffix;
          if (*(_DWORD *)(v179 + 84) == -1)
            *(_DWORD *)(v179 + 84) = 3;
          v205 = 1;
          v182 = v271;
          v179 = (uint64_t)v271;
        }
        *((_DWORD *)v182 + 21) = v205;
      }
      else
      {
        v179 = (uint64_t)v182;
      }
    }
    v182 = (uint64_t *)v182[2];
    if (v182)
      continue;
    break;
  }
  if (!v180)
    goto LABEL_548;
  *((_DWORD *)v180 + 19) = 0;
  if (!v181 || *((_DWORD *)v181 + 19))
    goto LABEL_548;
  SentTermCommList = mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(v48 + 40), *((_DWORD *)v180 + 16), v287);
  if ((SentTermCommList & 0x80000000) != 0)
    return SentTermCommList;
  BestScenarioPathSuffix = mosyntdata_GetPunctFromCommandList(a1, *(uint64_t **)&v287[0], &v284, &v289);
  if ((BestScenarioPathSuffix & 0x80000000) == 0)
  {
    v206 = (_DWORD)v284 == 11 ? 9 : 2;
    v207 = (_DWORD)v284 == 10 ? 4 : v206;
    *((_DWORD *)v181 + 19) = v207;
LABEL_548:
    for (ii = v266; ii != (uint64_t *)v269; ii = (uint64_t *)ii[2])
    {
      if (*((_DWORD *)ii + 21) == -1)
        *((_DWORD *)ii + 21) = 3;
      if ((*((__int16 *)ii + 34) & 0x80000000) == 0 && !*((_DWORD *)ii + 19))
        *((_DWORD *)ii + 19) = 1;
    }
    if ((BestScenarioPathSuffix & 0x80000000) == 0)
    {
      ChartToSentTermData(v48, (uint64_t)v283);
      goto LABEL_557;
    }
  }
  return BestScenarioPathSuffix;
}

uint64_t FindDomainById(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  int i;
  int v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16);
  for (i = mosyntkbaccphr_AccPhrDomains(v5); ; i = mosyntkbaccphr_GetScenario(3, v5, *a3))
  {
    v7 = i;
    *a3 = i;
    result = mosyntkbaccphr_Nil();
    if (v7 == (_DWORD)result)
      break;
    result = mosyntkbaccphr_GetScenario(1, v5, *a3);
    if ((_DWORD)result == a2)
      break;
  }
  return result;
}

uint64_t FindDomainByName(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v5;
  uint64_t i;
  unsigned __int8 *ScenarioNamePtr;
  int v8;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16);
  for (i = mosyntkbaccphr_AccPhrDomains(v5); ; i = mosyntkbaccphr_GetScenario(3, v5, *a3))
  {
    *a3 = i;
    ScenarioNamePtr = (unsigned __int8 *)mosyntkbaccphr_GetScenarioNamePtr(v5, i);
    v8 = *a3;
    result = mosyntkbaccphr_Nil();
    if (v8 == (_DWORD)result)
      break;
    result = mosyntbase_CEqual(ScenarioNamePtr, 50, a2, 100);
    if ((_DWORD)result)
      break;
  }
  return result;
}

uint64_t GenAccTree(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int16 v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  *a4 = 0;
  v16 = 0;
  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v8 = AddAccNode(a1, a2, a4, &v16);
    if ((v8 & 0x80000000) != 0)
      break;
    v9 = v16;
    v16[2] = *(uint64_t *)((char *)v5 + 52);
    *((_BYTE *)v9 + 24) = 0;
    *((_WORD *)v9 + 13) = *((_WORD *)v5 + 8);
    if (*((_BYTE *)v5 + 60))
    {
      v14 = 0;
      v15 = 0;
      v10 = AddAccNode(a1, a2, &v15, &v14);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v9[1] = v15;
      v11 = v14;
      v14[2] = *(uint64_t *)((char *)v5 + 52);
      v12 = 1;
      *((_BYTE *)v11 + 24) = 1;
      if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8)))
      {
        if ((int)mosyntkbsymtab_IntPropValue(a1, *(uint64_t **)(a2 + 8), *((__int16 *)v5 + 8), 2u) >= 1)
          v12 = 1;
        else
          v12 = 99;
      }
      *((_WORD *)v11 + 13) = v12;
    }
    else
    {
      v10 = GenAccTree(a1, a2, v5[1], v9 + 1);
      if ((v10 & 0x80000000) != 0)
        return v10;
    }
    v5 = (uint64_t *)*v5;
    if (!v5)
      return v10;
  }
  return v8;
}

uint64_t AddAccNode(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v12 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x20u);
  if ((result & 0x80000000) == 0)
  {
    v9 = v12;
    v13 = 0;
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v13, 0x18u);
    if ((result & 0x80000000) == 0)
    {
      *v13 = *(_QWORD *)(a2 + 32);
      v10 = v13;
      *(_QWORD *)(a2 + 32) = v13;
      *((_DWORD *)v10 + 2) = 1;
      v10[2] = v9;
      *v12 = 0;
      v11 = v12;
      if (*a4)
      {
        **a4 = v12;
        v11 = v12;
      }
      else
      {
        *a3 = v12;
      }
      *a4 = v11;
      v11[1] = 0;
    }
  }
  return result;
}

uint64_t Accentuation1(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v8;
  uint64_t FirstAccPatVal;
  _QWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v17;
  int matched;
  int v19;
  _QWORD *v20;
  _OWORD v21[2];

  v8 = mosyntkbsymtab_WildConsId(*(_QWORD *)(a2 + 8));
  *a4 = 0;
  if (!a3)
    return 0;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(_WORD *)(a3 + 26) == 1)
    {
      FirstAccPatVal = 0;
      *a4 = 1;
      return FirstAccPatVal;
    }
    return 0;
  }
  v10 = *(_QWORD **)(a3 + 8);
  if (!v10)
    return 0;
  v11 = v8;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  v19 = 0;
  do
  {
    FirstAccPatVal = Accentuation1(a1, a2, v10, &v19);
    if ((FirstAccPatVal & 0x80000000) != 0)
      return FirstAccPatVal;
    v12 = v19 + *a4;
    *a4 = v12;
    v10 = (_QWORD *)*v10;
  }
  while (v10);
  if (v12 < 2)
    return FirstAccPatVal;
  if (!mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8)))
  {
    v20 = 0;
    goto LABEL_30;
  }
  FirstAccPatVal = mosyntkbsymtab_GetFirstAccPatVal(a1, *(uint64_t ***)(a2 + 8), *(__int16 *)(a3 + 26), 3, (uint64_t)v21, &v20);
  if ((FirstAccPatVal & 0x80000000) != 0)
    return FirstAccPatVal;
  v13 = v20;
  if (!v20)
  {
LABEL_30:
    if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8)))
    {
      FirstAccPatVal = mosyntkbsymtab_GetFirstAccPatVal(a1, *(uint64_t ***)(a2 + 8), v11, 3, (uint64_t)v21, &v20);
      if ((FirstAccPatVal & 0x80000000) != 0)
        return FirstAccPatVal;
      v17 = v20;
      if (v20)
      {
        while (1)
        {
          *(_QWORD *)(a2 + 64) = 0;
          if (*(int *)a2 >= 2)
          {
            v14 = mosyntknowl_WriteTraceHeader(a1, 4u);
            if ((v14 & 0x80000000) != 0)
              return v14;
            v14 = mosyntbase_WString(a1, "applying default pattern", 0);
            if ((v14 & 0x80000000) != 0)
              return v14;
            v14 = mosyntbase_WLn(a1);
            if ((v14 & 0x80000000) != 0)
              return v14;
            v17 = v20;
          }
          matched = SingleTreeMatchFound(a1, a2, (uint64_t *)a3, v17);
          v14 = mosyntkbsymtab_DisposeAccPat(*(_QWORD **)(a2 + 8), &v20);
          if ((v14 & 0x80000000) != 0)
            return v14;
          FirstAccPatVal = mosyntkbsymtab_GetNextAccPatVal((uint64_t **)v21, &v20);
          if ((FirstAccPatVal & 0x80000000) != 0)
            return FirstAccPatVal;
          v17 = v20;
          if (!v20 || matched)
          {
            if (v20)
            {
              FirstAccPatVal = mosyntkbsymtab_DisposeAccPat(*(_QWORD **)(a2 + 8), &v20);
              if ((FirstAccPatVal & 0x80000000) != 0)
                return FirstAccPatVal;
            }
            if (!matched)
              break;
            goto LABEL_45;
          }
        }
      }
    }
    else
    {
      v20 = 0;
    }
LABEL_47:
    *a4 = 1;
    if (*(int *)a2 >= 1)
    {
      v14 = mosyntknowl_WriteTraceHeader(a1, 4u);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntbase_WString(a1, "after accentuation of ", 0);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(a3 + 26));
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntbase_WString(a1, ": ", 0);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = WriteAccList(a1, a2, a3);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntbase_WLn(a1);
      if ((v14 & 0x80000000) != 0)
        return v14;
      FirstAccPatVal = mosyntbase_WLn(a1);
      if ((FirstAccPatVal & 0x80000000) != 0)
        return FirstAccPatVal;
    }
    if (mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8))
      && mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(a3 + 26), 4u, 1))
    {
      return FirstAccPatVal;
    }
    return RhythmicAccShift(a1, (int *)a2, a3);
  }
  while (1)
  {
    *(_QWORD *)(a2 + 64) = 0;
    if (*(int *)a2 >= 2)
    {
      v14 = mosyntknowl_WriteTraceHeader(a1, 4u);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntbase_WString(a1, "applying pattern for constituent ", 0);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(a3 + 26));
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = mosyntbase_WLn(a1);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v13 = v20;
    }
    v15 = SingleTreeMatchFound(a1, a2, (uint64_t *)a3, v13);
    v14 = mosyntkbsymtab_DisposeAccPat(*(_QWORD **)(a2 + 8), &v20);
    if ((v14 & 0x80000000) != 0)
      return v14;
    FirstAccPatVal = mosyntkbsymtab_GetNextAccPatVal((uint64_t **)v21, &v20);
    if ((FirstAccPatVal & 0x80000000) != 0)
      return FirstAccPatVal;
    v13 = v20;
    if (!v20 || v15)
    {
      if (v20)
      {
        FirstAccPatVal = mosyntkbsymtab_DisposeAccPat(*(_QWORD **)(a2 + 8), &v20);
        if ((FirstAccPatVal & 0x80000000) != 0)
          return FirstAccPatVal;
      }
      if (!v15)
        goto LABEL_30;
LABEL_45:
      ReduceAccents(a2, a3);
      FirstAccPatVal = 0;
      goto LABEL_47;
    }
  }
}

uint64_t SingleTreeMatchFound(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v8 = mosyntkbsymtab_WildConsId(*(_QWORD *)(a2 + 8));
  if (!mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8))
    || !mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(a2 + 8), v8, 9u, 1))
  {
    return MatchFound(a1, a2, a3, a4);
  }
  v9 = *a3;
  *a3 = 0;
  result = MatchFound(a1, a2, a3, a4);
  *a3 = v9;
  return result;
}

uint64_t ReduceAccents(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *i;

  v2 = result;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(_QWORD *)(result + 64) != a2)
      ++*(_WORD *)(a2 + 26);
  }
  else
  {
    for (i = *(_QWORD **)(a2 + 8); i; i = (_QWORD *)*i)
      result = ReduceAccents(v2, i);
  }
  return result;
}

uint64_t WriteAccList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;

  v8 = 0;
  v9 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    result = mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(a3 + 16), &v8);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntdata_WriteCommandList(a1, v8);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntbase_WString(a1, "[", 0);
        if ((result & 0x80000000) == 0)
        {
          result = mosyntbase_WInt(a1, *(__int16 *)(a3 + 26), 0);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntbase_WString(a1, "]", 0);
            if ((result & 0x80000000) == 0)
            {
              result = mosyntdata_GetSentTermWordPhonList(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(a3 + 16), &v9);
              if ((result & 0x80000000) == 0)
                return mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), v9);
            }
          }
        }
      }
    }
  }
  else
  {
    result = mosyntbase_WString(a1, "( ", 0);
    if ((result & 0x80000000) == 0)
    {
      v7 = (_QWORD *)(a3 + 8);
      while (1)
      {
        v7 = (_QWORD *)*v7;
        if (!v7)
          break;
        result = WriteAccList(a1, a2, v7);
        if ((result & 0x80000000) != 0)
          return result;
      }
      return mosyntbase_WString(a1, ")", 0);
    }
  }
  return result;
}

uint64_t RhythmicAccShift(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  uint64_t v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  memset(v8, 0, 24);
  AccShift(a3, v8, &v7);
  if (!v7 || *a2 < 1)
    return 0;
  result = mosyntknowl_WriteTraceHeader(a1, 4u);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntbase_WString(a1, "accentuation after rhythmic shift: ", 0);
    if ((result & 0x80000000) == 0)
    {
      result = WriteAccList(a1, (uint64_t)a2, a3);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntbase_WLn(a1);
        if ((result & 0x80000000) == 0)
          return mosyntbase_WLn(a1);
      }
    }
  }
  return result;
}

uint64_t MatchFound(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  if (*(int *)a2 >= 2)
  {
    mosyntknowl_WriteTraceHeader(a1, 4u);
    mosyntbase_WString(a1, "trying to match ", 0);
    if (a3)
    {
      if (*((_BYTE *)a3 + 24))
        mosyntbase_WInt(a1, *((__int16 *)a3 + 13), 0);
      else
        mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *((__int16 *)a3 + 13));
    }
    else
    {
      mosyntbase_WString(a1, "NIL", 0);
    }
    mosyntbase_WString(a1, "/", 0);
    if (a4)
    {
      if (*((__int16 *)a4 + 8) < 1)
        mosyntbase_WInt(a1, *((__int16 *)a4 + 9), 0);
      else
        mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *((unsigned __int16 *)a4 + 8));
    }
    else
    {
      mosyntbase_WString(a1, "NIL", 0);
    }
    mosyntbase_WLn(a1);
  }
  result = a3 == 0;
  if (!a4)
    return result;
  if (!a3)
  {
    if (!*a4)
    {
      v14 = *((__int16 *)a4 + 8);
      if (mosyntkbsymtab_Star2ConsId(*(_QWORD *)(a2 + 8)) != v14)
      {
        v15 = *((__int16 *)a4 + 8);
        return mosyntkbsymtab_StarConsId(*(_QWORD *)(a2 + 8)) == v15;
      }
      return 1;
    }
    return 0;
  }
  if (!*((_WORD *)a4 + 8))
  {
    if (*((_BYTE *)a3 + 24))
    {
      v16 = *((unsigned __int16 *)a3 + 13);
      if (v16 == *((unsigned __int16 *)a4 + 9))
      {
        if (v16 == 1)
        {
          if (*(int *)a2 >= 2)
          {
            mosyntknowl_WriteTraceHeader(a1, 4u);
            mosyntbase_WString(a1, "=== node marked", 0);
            mosyntbase_WLn(a1);
          }
          *(_QWORD *)(a2 + 64) = a3;
        }
        return 1;
      }
    }
    return 0;
  }
  v9 = *((__int16 *)a4 + 8);
  if (mosyntkbsymtab_Star2ConsId(*(_QWORD *)(a2 + 8)) == v9)
  {
    if (!MatchFound(a1, a2, *a3, a4) && !MatchFound(a1, a2, *a3, *a4))
    {
      v10 = (_QWORD *)*a4;
      v11 = a1;
      v12 = a2;
      v13 = (uint64_t)a3;
      return MatchFound(v11, v12, v13, v10) != 0;
    }
    return 1;
  }
  v17 = *((__int16 *)a4 + 8);
  if (mosyntkbsymtab_StarConsId(*(_QWORD *)(a2 + 8)) == v17)
  {
    if (!MatchFound(a1, a2, a3, *a4) && !MatchFound(a1, a2, *a3, *a4))
    {
      v13 = *a3;
      v11 = a1;
      v12 = a2;
      v10 = a4;
      return MatchFound(v11, v12, v13, v10) != 0;
    }
    return 1;
  }
  v18 = *((__int16 *)a4 + 8);
  if (mosyntkbsymtab_Wild2ConsId(*(_QWORD *)(a2 + 8)) == v18)
  {
    result = DownMatchFound(a1, a2, a3, a4[1]);
    if (!(_DWORD)result)
      return result;
LABEL_38:
    v13 = *a3;
    v10 = (_QWORD *)*a4;
    v11 = a1;
    v12 = a2;
    return MatchFound(v11, v12, v13, v10) != 0;
  }
  v19 = *((__int16 *)a4 + 8);
  if (mosyntkbsymtab_WildConsId(*(_QWORD *)(a2 + 8)) != v19
    && (*((_BYTE *)a3 + 24) || *((unsigned __int16 *)a3 + 13) != *((unsigned __int16 *)a4 + 8)))
  {
    return 0;
  }
  result = MatchFound(a1, a2, a3[1], a4[1]);
  if ((_DWORD)result)
    goto LABEL_38;
  return result;
}

uint64_t DownMatchFound(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  BOOL v11;

  v8 = *a3;
  *a3 = 0;
  if (MatchFound())
  {
    result = 1;
  }
  else
  {
    v10 = (_QWORD *)a3[1];
    if (v10)
    {
      do
      {
        result = DownMatchFound(a1, a2, v10, a4);
        v10 = (_QWORD *)*v10;
        if (v10)
          v11 = (_DWORD)result == 0;
        else
          v11 = 0;
      }
      while (v11);
    }
    else
    {
      result = 0;
    }
  }
  *a3 = v8;
  return result;
}

uint64_t AccShift(uint64_t result, uint64_t *a2, _BYTE *a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  for (i = *(uint64_t **)(result + 8); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 24))
    {
      if (*((unsigned __int16 *)i + 13) - 1 > 0x61)
        continue;
      v7 = a2[1];
      v6 = a2[2];
      *a2 = v7;
      a2[1] = v6;
      a2[2] = (uint64_t)i;
      if (!v7 || v6 == 0)
        continue;
      v9 = *((unsigned __int16 *)i + 13);
      if (v9 == 1 && *(_WORD *)(v6 + 26) == 2 && (*(_WORD *)(v7 + 26) & 0xFFFE) == 2)
      {
        *(_WORD *)(v6 + 26) = 3;
        v10 = *a2;
      }
      else
      {
        if (*(_WORD *)(v7 + 26) != 1 || (v9 & 0xFFFE) != 2 || *(_WORD *)(v6 + 26) != 2)
          continue;
        *(_WORD *)(v6 + 26) = 3;
        v10 = a2[2];
      }
      *(_WORD *)(v10 + 26) = 2;
      *a3 = 1;
    }
    else
    {
      result = AccShift(i, a2, a3);
    }
  }
  return result;
}

uint64_t GetInitPhrasing1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7)
{
  _BYTE *v7;
  uint64_t InitPhrasing1;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 HasIntPropValue;

  v7 = *(_BYTE **)(a3 + 8);
  if (!v7)
    return 0;
  if (v7[24])
    return AppendInitBound(a1, a2, a6, a7, a5, a3);
  v16 = (a4 + 1);
  do
  {
    InitPhrasing1 = GetInitPhrasing1(a1, a2, v7, v16, a5, a6, a7);
    if ((InitPhrasing1 & 0x80000000) != 0 || !*(_QWORD *)v7)
      break;
    if (!mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8))
      || !mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(*(_QWORD *)v7 + 26), 5u, 0))
    {
      v17 = mosyntkbsymtab_PropTabAvailable(*(_QWORD *)(a2 + 8));
      a5 = a4;
      if (!v17)
        continue;
      HasIntPropValue = mosyntkbsymtab_HasIntPropValue(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(*(_QWORD *)v7 + 26), 5u, *(__int16 *)(a3 + 26));
      a5 = a4;
      if (!HasIntPropValue)
        continue;
    }
    a5 = 2;
    v7 = *(_BYTE **)v7;
  }
  while (v7);
  return InitPhrasing1;
}

uint64_t AppendInitBound(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, __int16 a5, uint64_t a6)
{
  uint64_t PunctFromCommandList;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t SentTermWordPhonList;
  uint64_t v17;
  __int16 v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t **v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  PunctFromCommandList = mosyntpal_ALLOCATE(a1, &v24, 0x28u);
  if ((PunctFromCommandList & 0x80000000) == 0)
  {
    *(_QWORD *)v24 = 0;
    v13 = v24;
    if (*a3)
    {
      *(_QWORD *)*a4 = v24;
      v13 = v24;
    }
    else
    {
      *a3 = v24;
    }
    *a4 = v13;
    *(_WORD *)(v13 + 8) = a5;
    if (a6)
    {
      v14 = *(_QWORD *)(a6 + 8);
      *(_WORD *)(v13 + 10) = *(unsigned __int16 *)(v14 + 26) - 1 < 0x62;
      v15 = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v13 + 16) = v15;
      SentTermWordPhonList = mosyntdata_GetSentTermWordPhonList(a1, *(_QWORD *)(a2 + 40), v15, &v23);
      if ((SentTermWordPhonList & 0x80000000) != 0)
        return SentTermWordPhonList;
      v19 = 0;
      CountSyllsAndAccs(a2, v23, (_WORD *)(v24 + 12), &v19);
      v17 = v24;
      *(_QWORD *)(v24 + 20) = *(_QWORD *)(v14 + 16);
      *(_WORD *)(v17 + 28) = *(_WORD *)(a6 + 26);
      *(_WORD *)(v17 + 30) = *(_WORD *)(v14 + 26);
      *(_DWORD *)(v17 + 32) = 0;
      SentTermWordPhonList = mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(v17 + 16), &v20);
      if ((SentTermWordPhonList & 0x80000000) != 0)
      {
        return SentTermWordPhonList;
      }
      else
      {
        PunctFromCommandList = mosyntdata_GetPunctFromCommandList(a1, v20, &v22, &v21);
        if ((PunctFromCommandList & 0x80000000) == 0
          && *(__int16 *)(v24 + 8) >= 2
          && mosyntknowl_IsIntraSentPunct(a1, v22))
        {
          *(_WORD *)(v24 + 8) = 1;
        }
      }
    }
    else
    {
      *(_DWORD *)(v13 + 10) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 32) = 0;
    }
  }
  return PunctFromCommandList;
}

uint64_t FinalBoundaryIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;

  if (!a2)
    return 2;
  v2 = 0;
  v3 = 0;
  do
  {
    if (!*((_DWORD *)a2 + 2))
    {
      v2 = a2;
      v3 = a2;
    }
    a2 = (uint64_t *)*a2;
  }
  while (a2);
  if (v3)
  {
    v4 = *((_DWORD *)v3 + 3);
    if (v2)
      return !mosyntknowl_IsSentFinalPunct(a1, v4);
  }
  else
  {
    v4 = 0;
    if (v2)
      return !mosyntknowl_IsSentFinalPunct(a1, v4);
  }
  return 2;
}

uint64_t WriteBoundList(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (a3)
  {
    v6 = a3;
    do
    {
      if ((__int16)v6[1] < 0)
      {
        v9 = a1;
        v10 = " $";
      }
      else
      {
        result = mosyntbase_WLn(a1);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntknowl_WriteTraceHeader(a1, 4u);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WString(a1, " #{", 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WInt(a1, *((__int16 *)v6 + 4), 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WString(a1, "}", 0);
        if ((result & 0x80000000) != 0)
          return result;
        if (a4)
        {
          result = mosyntbase_WString(a1, " (", 0);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntkbaccphr_PhraseTypeToString(*((_DWORD *)v6 + 8), (uint64_t)&v12, 10);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, (unsigned __int8 *)&v12, 10);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, ")", 0);
          if ((result & 0x80000000) != 0)
            return result;
        }
        result = mosyntbase_WString(a1, " <", 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WInt(a1, *((__int16 *)v6 + 5), 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WString(a1, ",", 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_WInt(a1, *((__int16 *)v6 + 6), 0);
        if ((result & 0x80000000) != 0)
          return result;
        v9 = a1;
        v10 = ">";
      }
      result = mosyntbase_WString(v9, (unsigned __int8 *)v10, 0);
      if ((result & 0x80000000) != 0)
        return result;
      if (!*v6)
        break;
      result = mosyntbase_WString(a1, " [", 0);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WInt(a1, *((__int16 *)v6 + 15), 0);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WString(a1, "]", 0);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_GetSentTermWordPhonList(a1, *(_QWORD *)(a2 + 40), *((_DWORD *)v6 + 5), &v11);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), v11);
      if ((result & 0x80000000) != 0)
        return result;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  return mosyntbase_WLn(a1);
}

uint64_t CountSyllsAndAccs(uint64_t result, uint64_t **a2, _WORD *a3, _WORD *a4)
{
  uint64_t **v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  *a3 = 1;
  *a4 = 0;
  if (a2)
  {
    v6 = a2;
    v7 = result;
    v8 = 0;
    do
    {
      v9 = *((__int16 *)v6 + 12);
      result = mosyntkbsymtab_SyllSepId(*(_QWORD *)(v7 + 8));
      if ((_DWORD)result == v9)
      {
        ++*a3;
        if (v8 >= 1)
        {
          v8 = 0;
          ++*a4;
        }
      }
      else
      {
        v10 = *((__int16 *)v6 + 12);
        result = mosyntkbsymtab_PrimAccId(*(_QWORD *)(v7 + 8));
        if ((_DWORD)result == v10
          || (v11 = *((__int16 *)v6 + 12), result = mosyntkbsymtab_SecAccId(*(_QWORD *)(v7 + 8)), (_DWORD)result == v11))
        {
          ++v8;
        }
      }
      v6 = (uint64_t **)*v6;
    }
    while (v6);
    if (v8 >= 1)
      ++*a4;
  }
  return result;
}

uint64_t SetFunctionWords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int ConsList;
  unsigned int v15;
  char v17;

  v17 = 0;
  if (a3 == a4)
    return 0;
  v5 = a3;
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(v5 + 32) + 32);
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = mosyntkbaccphr_AccPhrFunctionWords(v11);
    v17 = 0;
    if ((_DWORD)v12 != mosyntkbaccphr_Nil() && v17 == 0)
      break;
LABEL_9:
    if ((_DWORD)v12 != mosyntkbaccphr_Nil())
      *(_DWORD *)(v5 + 84) = 0;
    v5 = *(_QWORD *)(v5 + 16);
    if (v5 == a4)
      return v8;
  }
  while (1)
  {
    ConsList = mosyntkbaccphr_GetConsList(0, v11, v12);
    v15 = mosyntkbaccphr_GetConsList(1, v11, v12);
    v8 = mosyntkbaccphr_CheckMatchingConsFeat2(a1, v11, ConsList, v15, *(__int16 *)(v10[1] + 16), (unsigned __int16 *)(v10[1] + 24), &v17);
    if ((v8 & 0x80000000) != 0)
      return v8;
    if (!v17)
      v12 = mosyntkbaccphr_GetConsList(2, v11, v12);
    if ((_DWORD)v12 == mosyntkbaccphr_Nil() || v17)
      goto LABEL_9;
  }
}

uint64_t ChartToSentTermData(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
    v3 = a2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    do
    {
      v4 = *(_QWORD *)(a2 + 32);
      if (v4)
      {
        v7 = (uint64_t *)(v2 + 16 * *(int *)(v4 + 84));
        v5 = *v7;
        v6 = v7[1];
        if (v6)
        {
          v8 = *(__int16 *)(a2 + 68);
          if (v8 >= 2)
            v8 = 2;
          v9 = *(_DWORD *)(a2 + 76);
          *(_DWORD *)(v6 + 8) = v8;
          *(_DWORD *)(v6 + 12) = v9;
        }
        if (v5)
        {
          v10 = *(_DWORD *)(a2 + 84);
          if (v10 >= 3)
            v11 = 3;
          else
            v11 = *(_DWORD *)(a2 + 84);
          if (v10 <= 98)
            v12 = v11;
          else
            v12 = 0;
          *(_DWORD *)(v5 + 16) = v12;
        }
      }
      a2 = *(_QWORD *)(a2 + 16);
    }
    while (a2);
  }
  return result;
}

double NewAPVertex(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  double result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  ++*(_DWORD *)(a2 + 72);
  if ((mosyntpal_ALLOCATE(a1, a4, 0x58u) & 0x80000000) == 0)
  {
    v9 = *a4;
    v12 = 0;
    if ((mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x18u) & 0x80000000) == 0)
    {
      *v12 = *(_QWORD *)(a2 + 32);
      v10 = v12;
      *(_QWORD *)(a2 + 32) = v12;
      *((_DWORD *)v10 + 2) = 2;
      v10[2] = v9;
      v11 = *a4;
      *(_DWORD *)v11 = *(_DWORD *)(a2 + 72);
      result = 0.0;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = a3;
      *(_WORD *)(v11 + 68) = -1;
      *(_DWORD *)(v11 + 84) = -1;
      *(_QWORD *)(v11 + 72) = 0;
    }
  }
  return result;
}

void TreeToChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v6 = a6;
  v7 = a4;
  v31 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  *a6 = 0;
  v11 = *(_DWORD *)(a3 + 52);
  *(_DWORD *)(a4 + 64) = v11;
  if (*(_BYTE *)(a3 + 60))
  {
    if ((mosyntdata_GetSentTermCommList(a1, *(_QWORD *)(a2 + 40), v11, &v28) & 0x80000000) == 0
      && (mosyntdata_GetPunctFromCommandList(a1, v28, &v30, &v29) & 0x80000000) == 0)
    {
      if (mosyntknowl_IsIntraSentPunct(a1, v30))
        *(_WORD *)(v7 + 68) = 1;
      if ((mosyntdata_GetSentTermWordPhonList(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(a3 + 52), &v27) & 0x80000000) == 0
        && (NewAPEdge(a1, a2, a3, v6) & 0x80000000) == 0)
      {
        v12 = *v6;
        *(_DWORD *)(v12 + 92) = 0;
        *(_QWORD *)(v12 + 16) = v7;
        NewAPVertex(a1, a2, *(_DWORD *)(a3 + 56), (uint64_t *)(*v6 + 24));
        if ((v13 & 0x80000000) == 0)
        {
          CountSyllsAndAccs(a2, v27, (_WORD *)(*v6 + 82), (_WORD *)(*v6 + 80));
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(*v6 + 24);
          *(_QWORD *)(*(_QWORD *)(*v6 + 24) + 8) = v7;
          *(_QWORD *)(v7 + 32) = *v6;
          *(_QWORD *)(*(_QWORD *)(*v6 + 24) + 24) = *v6;
          *(_QWORD *)*v6 = 0;
          *(_QWORD *)(*v6 + 8) = 0;
        }
      }
    }
  }
  else
  {
    v14 = *(_QWORD **)(a3 + 8);
    if (v14)
    {
      v24 = a3;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = (a5 + 1);
      while ((TreeToChart(a1, a2, v14, v7, v20, &v31) & 0x80000000) == 0)
      {
        v21 = v31;
        if (v31)
        {
          *(_QWORD *)(v31 + 64) = v19;
          if (!v18)
            v18 = v21;
          if (v19)
            *(_QWORD *)(v19 + 56) = v21;
          ++v17;
          v7 = *(_QWORD *)(v21 + 24);
          v16 += *(_WORD *)(v21 + 82);
          v15 += *(_WORD *)(v21 + 80);
          v19 = v21;
        }
        v14 = (_QWORD *)*v14;
        if (!v14)
        {
          v6 = a6;
          if (v7 == a4)
            goto LABEL_26;
          if (v17 < 2)
          {
            *a6 = v19;
            AddAPNode(a1, a2, v24, (uint64_t *)(v19 + 32));
          }
          else if ((NewAPEdge(a1, a2, v24, a6) & 0x80000000) == 0)
          {
            v22 = *a6;
            *(_DWORD *)(v22 + 92) = 1;
            *(_QWORD *)(v22 + 16) = a4;
            *(_QWORD *)(*a6 + 24) = v7;
            *(_QWORD *)*a6 = *(_QWORD *)(a4 + 48);
            *(_QWORD *)(a4 + 48) = *a6;
            *(_QWORD *)(*a6 + 8) = *(_QWORD *)(v7 + 40);
            *(_QWORD *)(v7 + 40) = *a6;
            v23 = *a6;
            *(_WORD *)(v23 + 82) = v16;
            *(_WORD *)(v23 + 80) = v15;
            for (*(_QWORD *)(v23 + 72) = v18; v18; v18 = *(_QWORD *)(v18 + 56))
              *(_QWORD *)(v18 + 48) = *a6;
          }
          return;
        }
      }
    }
    else
    {
LABEL_26:
      *v6 = 0;
    }
  }
}

uint64_t NewAPEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  result = mosyntpal_ALLOCATE(a1, a4, 0x60u);
  if ((result & 0x80000000) == 0)
  {
    v9 = *a4;
    v12 = 0;
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x18u);
    if ((result & 0x80000000) == 0)
    {
      *v12 = *(_QWORD *)(a2 + 32);
      v10 = v12;
      *(_QWORD *)(a2 + 32) = v12;
      *((_DWORD *)v10 + 2) = 3;
      v10[2] = v9;
      v11 = *a4;
      *(_QWORD *)(v11 + 72) = 0;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_QWORD *)(v11 + 84) = *(_QWORD *)(a3 + 52);
      return AddAPNode(a1, a2, a3, (uint64_t *)(v11 + 32));
    }
  }
  return result;
}

uint64_t AddAPNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  v13 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v13, 0x18u);
  if ((result & 0x80000000) == 0)
  {
    v9 = (uint64_t)v13;
    v14 = 0;
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v14, 0x18u);
    if ((result & 0x80000000) == 0)
    {
      *v14 = *(_QWORD *)(a2 + 32);
      v10 = v14;
      *(_QWORD *)(a2 + 32) = v14;
      *((_DWORD *)v10 + 2) = 5;
      v10[2] = v9;
      v11 = v13;
      v13[1] = a3;
      *v11 = *a4;
      v12 = (uint64_t)v13;
      v13[2] = 0;
      *a4 = v12;
    }
  }
  return result;
}

uint64_t WriteCoverage(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v4;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v4 = a3;
  v13 = 0;
  if (a3 != a4)
  {
    while (2)
    {
      HIDWORD(v11) = 0;
      LODWORD(v11) = 0;
      *(_QWORD *)((char *)&v11 + 4) = *v4;
      result = mosyntbase_WriteMessage(a1, " (%i) ", 0, "", 0, "", 0, "", v11);
      if ((result & 0x80000000) != 0)
        return result;
      v9 = (_QWORD *)(*((_QWORD *)v4 + 4) + 32);
      do
      {
        v9 = (_QWORD *)*v9;
        if (!v9)
        {
          result = mosyntbase_WriteMessage(a1, "#### ERROR: didn't find terminal\\n", 0, "", 0, "", 0, "", 0);
          if ((result & 0x80000000) != 0)
            return result;
          goto LABEL_13;
        }
        v10 = v9[1];
      }
      while (!*(_BYTE *)(v10 + 60));
      result = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *(__int16 *)(v10 + 16));
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WString(a1, "[ ", 0);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_GetSentTermWordPhonList(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(*((_QWORD *)v4 + 4) + 84), &v13);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), v13);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WString(a1, " ] ", 0);
      if ((result & 0x80000000) != 0)
        return result;
LABEL_13:
      v4 = (unsigned int *)*((_QWORD *)v4 + 2);
      if (v4 != a4)
        continue;
      break;
    }
    v4 = a4;
  }
  HIDWORD(v12) = 0;
  LODWORD(v12) = 0;
  *(_QWORD *)((char *)&v12 + 4) = *v4;
  return mosyntbase_WriteMessage(a1, " (%i) ", 0, "", 0, "", 0, "", v12);
}

uint64_t MatchEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t result;
  int Rule;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(a3 + 32);
  if (!v5)
    return 0;
  v10 = *(_QWORD *)(a2 + 16);
  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  v23 = 0;
  v21 = (uint64_t *)(a3 + 40);
  do
  {
    result = mosyntkbaccphr_LookupAccPhrRule(a1, *(_QWORD *)(a2 + 16), *(__int16 *)(v5[1] + 16), (__int16 *)(v5[1] + 24), &v23, (uint64_t)v25);
    if ((result & 0x80000000) != 0)
      return result;
    while (v23)
    {
      Rule = mosyntkbaccphr_GetRule(15, v10, DWORD2(v26));
      v13 = DWORD2(v26);
      if (Rule < 1)
      {
        if (IsMatchingRule(a1, a2, DWORD2(v26), (_QWORD **)v5, a3))
        {
          result = AddEdgeRule(a1, a2, SDWORD2(v26), (uint64_t)v5);
          if ((result & 0x80000000) != 0)
            return result;
          if ((int)mosyntkbaccphr_GetRule(0, v10, DWORD2(v26)) >= 1)
          {
            result = AddRuleScenarios(a1, a2, DWORD2(v26), v21, a5);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
      }
      else
      {
        v24 = 0;
        result = mosyntpal_ALLOCATE(a1, &v24, 0x20u);
        if ((result & 0x80000000) != 0)
          return result;
        result = NoteAPRuleListAlloc(a1, a2, v24);
        if ((result & 0x80000000) != 0)
          return result;
        v14 = (_QWORD *)v24;
        *(_DWORD *)(v24 + 8) = v13;
        v14[2] = a3;
        v14[3] = v5;
        v15 = *a4;
        if (*a4)
        {
          v16 = mosyntkbaccphr_GetRule(15, *(_QWORD *)(a2 + 16), *((unsigned int *)v15 + 2));
          if (v16 < (int)mosyntkbaccphr_GetRule(15, *(_QWORD *)(a2 + 16), v13))
          {
            while (1)
            {
              v17 = v15;
              v15 = (uint64_t *)*v15;
              if (!v15)
                break;
              v18 = mosyntkbaccphr_GetRule(15, *(_QWORD *)(a2 + 16), *((unsigned int *)v15 + 2));
              if (v18 >= (int)mosyntkbaccphr_GetRule(15, *(_QWORD *)(a2 + 16), v13))
              {
                v19 = *v17;
                goto LABEL_22;
              }
            }
            v19 = 0;
LABEL_22:
            *(_QWORD *)v24 = v19;
            *v17 = v24;
            goto LABEL_23;
          }
          v20 = *a4;
          v14 = (_QWORD *)v24;
        }
        else
        {
          v20 = 0;
        }
        *v14 = v20;
        *a4 = (uint64_t *)v24;
      }
LABEL_23:
      result = mosyntkbaccphr_GetNextAccPhrEntry(a1, v10, &v23, (uint64_t)v25);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  return result;
}

uint64_t IsMatchingRule(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int Rule;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v32 = 0;
  v33[0] = 0;
  *(_QWORD *)((char *)v33 + 5) = 0;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = **(_DWORD **)(a5 + 24) - **(_DWORD **)(a5 + 16);
  if ((int)mosyntkbaccphr_GetRule(8, v10, a3) <= v11
    && v11 <= (int)mosyntkbaccphr_GetRule(9, v10, a3)
    && (v12 = mosyntkbaccphr_GetRule(6, v10, a3), v13 = *(__int16 *)(a5 + 82), v12 <= v13)
    && (int)mosyntkbaccphr_GetRule(7, v10, a3) >= v13
    && (v14 = mosyntkbaccphr_GetRule(10, v10, a3), v15 = *(__int16 *)(a5 + 80), v14 <= v15)
    && (int)mosyntkbaccphr_GetRule(11, v10, a3) >= v15)
  {
    if (IsMatchingNodeContext(a1, a2, a3, a4, (_QWORD *)a5, 0))
    {
      if (IsMatchingNodeContext(a1, a2, a3, a4, (_QWORD *)a5, 1))
      {
        v16 = IsMatchingNodeContext(a1, a2, a3, a4, (_QWORD *)a5, 2);
        if ((_DWORD)v16)
        {
          Rule = mosyntkbaccphr_GetRule(5, v10, a3);
          if (Rule == mosyntkbaccphr_Nil())
          {
            v17 = 0;
          }
          else
          {
            v16 = IsMatchingNodeContext(a1, a2, a3, a4, (_QWORD *)a5, 3);
            if ((_DWORD)v16)
              v17 = 0;
            else
              v17 = 5;
          }
        }
        else
        {
          v17 = 4;
        }
      }
      else
      {
        v16 = 0;
        v17 = 3;
      }
    }
    else
    {
      v16 = 0;
      v17 = 2;
    }
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  if (*(int *)a2 >= 2)
  {
    mosyntknowl_WriteTraceHeader(a1, 4u);
    m2__cp__str("[AccPhr]           ", &v32, 21);
    mosyntbase_WString(a1, "[AccPhr] Node ", 0);
    v18 = *(uint64_t **)(a2 + 8);
    v19 = mosyntkbaccphr_GetRule(1, v10, a3);
    mosyntkbaccphr_WriteAccPhrNode(a1, v18, v10, v19);
    mosyntbase_WStringLn(a1, " covers:", 0);
    mosyntbase_WString(a1, "[AccPhr] ", 0);
    WriteCoverage(a1, a2, *(unsigned int **)(a5 + 16), *(unsigned int **)(a5 + 24));
    mosyntbase_WLn(a1);
    mosyntbase_WStringLn(a1, "[AccPhr] Matching rule:", 0);
    mosyntbase_WString(a1, "[AccPhr] ", 0);
    mosyntkbaccphr_WriteRuleHeadline(a1, *(uint64_t **)(a2 + 8), v10, a3);
    mosyntbase_WLn(a1);
    if ((_DWORD)v16)
    {
      mosyntbase_WriteMessage(a1, "%s...\\n[AccPhr] Rule matched successfully.\\n", 0, (unsigned __int8 *)&v32, 21, "", 0, "", 0);
      return v16;
    }
    if (v17 == 5)
    {
      v24 = *(uint64_t **)(a2 + 8);
      v25 = mosyntkbaccphr_GetRule(5, v10, a3);
      mosyntkbaccphr_WriteChildrenList(a1, v24, v10, (unsigned __int8 *)&v32, 21, v25);
      mosyntbase_WriteMessage(a1, "%s...\\n[AccPhr] Rule doesn't match: ", 0, (unsigned __int8 *)&v32, 21, "", 0, "", 0);
      v23 = "children";
    }
    else if (v17 == 1)
    {
      v20 = mosyntkbaccphr_GetRule(8, v10, a3);
      *((_QWORD *)&v29 + 1) = mosyntkbaccphr_GetRule(9, v10, a3);
      LODWORD(v29) = 0;
      DWORD1(v29) = v20;
      mosyntbase_WriteMessage(a1, "%s<wordrange(%i,%i)>\\n", 0, (unsigned __int8 *)&v32, 21, "", 0, "", v29);
      v21 = mosyntkbaccphr_GetRule(6, v10, a3);
      *((_QWORD *)&v30 + 1) = mosyntkbaccphr_GetRule(7, v10, a3);
      LODWORD(v30) = 0;
      DWORD1(v30) = v21;
      mosyntbase_WriteMessage(a1, "%s<syllrange(%i,%i)>\\n", 0, (unsigned __int8 *)&v32, 21, "", 0, "", v30);
      v22 = mosyntkbaccphr_GetRule(10, v10, a3);
      *((_QWORD *)&v31 + 1) = mosyntkbaccphr_GetRule(11, v10, a3);
      LODWORD(v31) = 0;
      DWORD1(v31) = v22;
      mosyntbase_WriteMessage(a1, "%s<accrange(%i,%i)>\\n", 0, (unsigned __int8 *)&v32, 21, "", 0, "", v31);
      mosyntbase_WriteMessage(a1, "%s...\\n[AccPhr] Rule doesn't match: ", 0, (unsigned __int8 *)&v32, 21, "", 0, "", 0);
      v23 = "constraints";
    }
    else
    {
      mosyntbase_WriteMessage(a1, "%s...\\n[AccPhr] Rule doesn't match: ", 0, (unsigned __int8 *)&v32, 21, "", 0, "", 0);
      v26 = v17 - 2;
      if (v26 > 2)
      {
LABEL_18:
        mosyntbase_WStringLn(a1, " definition.", 0);
        return v16;
      }
      v23 = off_24D285588[v26];
    }
    mosyntbase_WString(a1, (unsigned __int8 *)v23, 0);
    goto LABEL_18;
  }
  return v16;
}

uint64_t AddEdgeRule(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v10 = 0;
  result = mosyntpal_ALLOCATE(a1, &v10, 0x20u);
  if ((result & 0x80000000) == 0)
  {
    result = NoteAPRuleListAlloc(a1, a2, v10);
    if ((result & 0x80000000) == 0)
    {
      v9 = (_QWORD *)v10;
      *(_DWORD *)(v10 + 8) = a3;
      v9[2] = 0;
      v9[3] = a4;
      *v9 = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v10;
    }
  }
  return result;
}

uint64_t AddRuleScenarios(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t Scenario;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  int RuleSet;
  int v19;
  uint64_t inserted;
  int v21;
  uint64_t *v23;
  int v24;

  v10 = *(_QWORD *)(a2 + 16);
  Scenario = mosyntkbaccphr_GetScenario(2, v10, *(unsigned int *)(a2 + 60));
  if ((_DWORD)Scenario != mosyntkbaccphr_Nil())
  {
    v23 = a5;
    v12 = 0;
    while (1)
    {
      if (mosyntkbaccphr_GetRuleSetIsSubset(v10, Scenario))
      {
        for (i = mosyntkbaccphr_AccPhrScenarios(*(_QWORD *)(a2 + 16)); ; i = mosyntkbaccphr_GetScenario(3, v10, v14))
        {
          v14 = i;
          if ((_DWORD)i == mosyntkbaccphr_Nil())
            break;
          v15 = mosyntkbaccphr_GetScenario(1, v10, v14);
          if (v15 == mosyntkbaccphr_GetRuleSet(2, v10, Scenario))
            break;
        }
        if ((_DWORD)v14 != mosyntkbaccphr_Nil())
        {
          v16 = mosyntkbaccphr_GetScenario(2, v10, v14);
          if ((_DWORD)v16 != mosyntkbaccphr_Nil())
          {
            do
            {
              if (mosyntkbaccphr_GetRuleSetIsSubset(v10, v16))
              {
                v17 = 0;
              }
              else
              {
                RuleSet = mosyntkbaccphr_GetRuleSet(1, v10, v16);
                v17 = RuleSet == mosyntkbaccphr_GetRule(0, v10, a3);
              }
              v16 = mosyntkbaccphr_GetRuleSet(4, v10, v16);
            }
            while ((_DWORD)v16 != mosyntkbaccphr_Nil() && !v17);
            if (v17)
            {
              v19 = mosyntkbaccphr_GetScenario(1, v10, v14);
              inserted = InsertScenario(a1, a2, v19, a4, &v24);
              if ((inserted & 0x80000000) != 0)
                return inserted;
              v21 = mosyntkbaccphr_GetScenario(1, v10, v14);
              v12 = InsertScenario(a1, a2, v21, v23, &v24);
              if ((v12 & 0x80000000) != 0)
                return v12;
            }
          }
        }
      }
      Scenario = mosyntkbaccphr_GetRuleSet(4, v10, Scenario);
      if ((_DWORD)Scenario == mosyntkbaccphr_Nil())
        return v12;
    }
  }
  return 0;
}

uint64_t NoteAPRuleListAlloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;

  v7 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v7, 0x18u);
  if ((result & 0x80000000) == 0)
  {
    *v7 = *(_QWORD *)(a2 + 32);
    v6 = v7;
    *(_QWORD *)(a2 + 32) = v7;
    *((_DWORD *)v6 + 2) = 4;
    v6[2] = a3;
  }
  return result;
}

uint64_t IsMatchingNodeContext(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, _QWORD *a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t Rule;
  char NodeMatchOp;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t Children;
  int Node;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned int v33;
  unsigned int v34;

  v33 = 0;
  v11 = *(_QWORD *)(a2 + 16);
  switch(a6)
  {
    case 0:
      v12 = 2;
      goto LABEL_6;
    case 1:
      v12 = 3;
      goto LABEL_6;
    case 2:
      v12 = 4;
LABEL_6:
      Rule = mosyntkbaccphr_GetRule(v12, *(_QWORD *)(a2 + 16), a3);
      v33 = Rule;
      goto LABEL_7;
    case 3:
      v20 = mosyntkbaccphr_GetRule(5, *(_QWORD *)(a2 + 16), a3);
      break;
    default:
      Rule = 0;
LABEL_7:
      if (mosyntkbaccphr_GetNode(3, v11, Rule))
      {
        NodeMatchOp = mosyntkbaccphr_GetNodeMatchOp(v11, Rule);
        if (a6)
          goto LABEL_14;
        if ((NodeMatchOp & 1) == 0)
          goto LABEL_14;
        v15 = (_QWORD *)a5[4];
        v34 = Rule;
        if (v15 == a4)
          goto LABEL_14;
        do
        {
          v16 = IsMatchingNode(a1, a2, &v34, (uint64_t)v15);
          LODWORD(v17) = v16;
          if (v16)
            break;
          v15 = (_QWORD *)*v15;
        }
        while (v15 != a4);
        if (!v16)
        {
LABEL_14:
          if ((mosyntkbaccphr_GetNodeMatchOp(v11, Rule) & 2) != 0)
          {
            v18 = mosyntkbaccphr_GetNodeMatchOp(v11, Rule);
            LODWORD(v17) = IsMatchingNodeNeighbours(a1, a2, &v33, a5, a6, (v18 >> 2) & 1);
            LODWORD(Rule) = v33;
          }
          else
          {
            LODWORD(v17) = 0;
          }
        }
      }
      else
      {
        LODWORD(v17) = 1;
      }
      if (mosyntkbaccphr_GetNodeNegated(v11, Rule))
        return (_DWORD)v17 == 0;
      else
        return v17;
  }
  while (1)
  {
    if ((_DWORD)v20 == mosyntkbaccphr_Nil())
      return 0;
    Children = mosyntkbaccphr_GetChildren(1, v11, v20);
    if (!mosyntkbaccphr_GetChildrenOp(v11, v20))
      break;
    if ((mosyntkbaccphr_GetNodeMatchOp(v11, Children) & 1) != 0
      && (Node = mosyntkbaccphr_GetNode(8, v11, Children), Node == mosyntkbaccphr_Nil())
      && (v23 = *a4, v34 = Children, v23))
    {
      do
      {
        v17 = IsMatchingNode(a1, a2, &v34, (uint64_t)v23);
        if ((_DWORD)v17)
          break;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      v17 = 0;
    }
    while ((_DWORD)Children != mosyntkbaccphr_Nil())
    {
      v24 = mosyntkbaccphr_GetNodeMatchOp(v11, Children);
      Children = mosyntkbaccphr_GetNode(8, v11, Children);
      if ((v24 & 2) == 0)
        goto LABEL_55;
    }
    if ((_DWORD)v17)
      goto LABEL_59;
    if (a5[9])
    {
      v29 = mosyntkbaccphr_GetChildren(1, v11, v20);
      v30 = a5[2];
      v31 = a5[9];
      v32 = mosyntkbaccphr_GetChildrenOp(v11, v20) == 2;
      v17 = IsMatchingChildren(a1, a2, v29, v30, (uint64_t)a5, v31, v32);
    }
    else
    {
      v17 = 0;
    }
LABEL_55:
    v20 = mosyntkbaccphr_GetChildren(2, v11, v20);
    if ((_DWORD)v17)
      return v17;
  }
  if ((_DWORD)Children != mosyntkbaccphr_Nil())
  {
    while (1)
    {
      if ((mosyntkbaccphr_GetNodeMatchOp(v11, Children) & 1) == 0)
        goto LABEL_62;
      v25 = *a4;
      v34 = Children;
      if (!v25)
        goto LABEL_62;
      do
      {
        v26 = IsMatchingNode(a1, a2, &v34, (uint64_t)v25);
        LODWORD(v17) = v26;
        if (v26)
          break;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
      if (!v26)
LABEL_62:
        LODWORD(v17) = (mosyntkbaccphr_GetNodeMatchOp(v11, Children) & 2) != 0
                    && (v27 = (_QWORD *)a5[9]) != 0
                    && IsMatchingChildFuzzy(a1, a2, Children, v27);
      v17 = mosyntkbaccphr_GetNodeNegated(v11, Children) ? (_DWORD)v17 == 0 : v17;
      v28 = mosyntkbaccphr_GetNode(8, v11, Children);
      if (!(_DWORD)v17)
        goto LABEL_55;
      Children = v28;
      if ((_DWORD)v28 == mosyntkbaccphr_Nil())
        goto LABEL_59;
    }
  }
  v17 = 1;
LABEL_59:
  mosyntkbaccphr_GetChildren(2, v11, v20);
  return v17;
}

BOOL IsMatchingChildFuzzy(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned int v12;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = (_QWORD *)a4[4];
  v12 = a3;
  if (v9)
  {
    do
    {
      v10 = IsMatchingNode(a1, a2, &v12, (uint64_t)v9);
      if (v10)
        break;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    if (v10)
      return 1;
  }
  if ((mosyntkbaccphr_GetNodeMatchOp(v8, a3) & 4) != 0 && a4[9] && IsMatchingChildFuzzy(a1, a2, a3))
    return 1;
  if (a4[7])
    return IsMatchingChildFuzzy(a1, a2, a3) != 0;
  return 0;
}

uint64_t IsMatchingChildren(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int Node;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v28;

  while (2)
  {
    if (*(_QWORD *)(a6 + 16) == a4)
    {
      v14 = *(_DWORD *)(a6 + 92) == 0;
      v13 = (_QWORD *)a6;
    }
    else
    {
      v13 = *(_QWORD **)(a4 + 48);
      if (v13)
      {
        v14 = 0;
      }
      else
      {
        v13 = *(_QWORD **)(a4 + 32);
        v14 = 1;
      }
    }
    v15 = *(_QWORD *)(a2 + 16);
    do
    {
      while (1)
      {
        v16 = v13[4];
        v28 = a3;
        if (!v16)
          goto LABEL_22;
        do
        {
          v17 = IsMatchingNode(a1, a2, &v28, v16);
          if (v17)
            break;
          v16 = *(_QWORD *)v16;
        }
        while (v16);
        if (!v17)
          goto LABEL_20;
        Node = mosyntkbaccphr_GetNode(8, v15, a3);
        if (Node != mosyntkbaccphr_Nil())
        {
          if ((mosyntkbaccphr_GetNodeMatchOp(v15, a3) & 4) != 0 && *(_DWORD *)v13[3] < **(_DWORD **)(a6 + 24))
          {
            v19 = mosyntkbaccphr_GetNode(8, v15, a3);
            v20 = v13[3];
            v21 = a7;
            v22 = a1;
            v23 = a2;
            v24 = a5;
            v25 = a6;
LABEL_19:
            v16 = IsMatchingChildren(v22, v23, v19, v20, v24, v25, v21);
            goto LABEL_22;
          }
          if (*(_QWORD *)(a6 + 56))
          {
            v19 = mosyntkbaccphr_GetNode(8, v15, a3);
            v25 = *(_QWORD *)(a6 + 56);
            v20 = *(_QWORD *)(v25 + 16);
            v21 = a7;
            v22 = a1;
            v23 = a2;
            v24 = a5;
            goto LABEL_19;
          }
LABEL_20:
          v16 = 0;
          goto LABEL_22;
        }
        v16 = !a7 || (unint64_t)(v13[3] == *(_QWORD *)(a5 + 24));
LABEL_22:
        if ((mosyntkbaccphr_GetNodeMatchOp(v15, a3) & 4) == 0)
          goto LABEL_28;
        v13 = (_QWORD *)*v13;
        if (!v13)
          break;
        if ((_DWORD)v16)
          goto LABEL_28;
      }
      if (v14)
        break;
      v13 = *(_QWORD **)(a4 + 32);
      v14 = 1;
    }
    while (!(_DWORD)v16);
LABEL_28:
    if (!(v16 | a7))
    {
      if ((mosyntkbaccphr_GetNodeMatchOp(v15, a3) & 4) != 0 && *(_DWORD *)a4 + 1 < **(_DWORD **)(a6 + 24))
      {
        a7 = 0;
        a4 = *(_QWORD *)(a4 + 16);
        continue;
      }
      a6 = *(_QWORD *)(a6 + 56);
      if (a6)
      {
        a7 = 0;
        a4 = *(_QWORD *)(a6 + 16);
        continue;
      }
      return 0;
    }
    return v16;
  }
}

uint64_t IsMatchingNodeNeighbours(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, int a5, int a6)
{
  int v6;
  int v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v37;
  int v38;
  uint64_t *v39;

  while (1)
  {
    v6 = a6;
    v7 = a5;
    v8 = a4;
    v9 = a3;
    v10 = a2;
    v11 = a1;
    v38 = 0;
    v37 = 0;
    v12 = *(_QWORD *)(a2 + 16);
    if (mosyntkbaccphr_GetNode(3, v12, *a3) == 3)
      break;
    if (v7 == 2)
    {
      v18 = v8[3];
      v19 = *(_QWORD **)(v18 + 48);
      if (v19)
      {
        do
        {
          v20 = (_QWORD *)v19[4];
          LODWORD(v39) = *v9;
          if (v20)
          {
            do
            {
              result = IsMatchingNode(v11, v10, (unsigned int *)&v39, (uint64_t)v20);
              if ((_DWORD)result)
                break;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            result = 0;
          }
          if ((_DWORD)result)
            break;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
        v18 = v8[3];
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = 0;
      }
      v26 = *(_QWORD **)(v18 + 32);
      if (!v26)
        return result;
      v27 = (_QWORD *)v26[4];
      LODWORD(v39) = *v9;
      if (v27)
      {
        do
        {
          result = IsMatchingNode(v11, v10, (unsigned int *)&v39, (uint64_t)v27);
          if ((_DWORD)result)
            break;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        result = 0;
      }
      if (!v6 || (_DWORD)result)
        return result;
      a1 = v11;
      a2 = v10;
      a3 = v9;
      a4 = v26;
      a5 = 2;
    }
    else if (v7 == 1)
    {
      v21 = v8[2];
      v22 = *(_QWORD *)(v21 + 40);
      if (v22)
      {
        do
        {
          v23 = *(_QWORD **)(v22 + 32);
          LODWORD(v39) = *v9;
          if (v23)
          {
            do
            {
              result = IsMatchingNode(v11, v10, (unsigned int *)&v39, (uint64_t)v23);
              if ((_DWORD)result)
                break;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            result = 0;
          }
          if ((_DWORD)result)
            break;
          v22 = *(_QWORD *)(v22 + 8);
        }
        while (v22);
        v21 = v8[2];
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = 0;
      }
      v28 = *(_QWORD **)(v21 + 24);
      if (!v28)
        return result;
      v29 = (_QWORD *)v28[4];
      LODWORD(v39) = *v9;
      if (v29)
      {
        do
        {
          result = IsMatchingNode(v11, v10, (unsigned int *)&v39, (uint64_t)v29);
          if ((_DWORD)result)
            break;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        result = 0;
      }
      if (!v6 || (_DWORD)result)
        return result;
      a1 = v11;
      a2 = v10;
      a3 = v9;
      a4 = v28;
      a5 = 1;
    }
    else
    {
      if (v7)
        return 0;
      v15 = v8[6];
      if (!v15)
        return 0;
      v16 = *(_QWORD **)(v15 + 32);
      LODWORD(v39) = *v9;
      if (v16)
      {
        do
        {
          result = IsMatchingNode(v11, v10, (unsigned int *)&v39, (uint64_t)v16);
          if ((_DWORD)result)
            break;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        result = 0;
      }
      if (!v6 || (_DWORD)result)
        return result;
      a4 = (_QWORD *)v8[6];
      a1 = v11;
      a2 = v10;
      a3 = v9;
      a5 = 0;
    }
    a6 = 1;
  }
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      if (mosyntkbaccphr_GetNode(7, v12, *v9) == 1)
      {
        v13 = v8[2];
        v39 = 0;
        if (v13)
        {
          mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v13 + 64), &v39);
          result = v39 != 0;
          if (!v6)
            return result;
        }
        else
        {
          result = 0;
          if (!v6)
            return result;
        }
        if ((result & 1) == 0)
        {
          v32 = v8[2];
          do
          {
            v32 = *(_QWORD *)(v32 + 8);
            if (!v32)
              break;
            v39 = 0;
            mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v32 + 64), &v39);
          }
          while (!v39);
          return v32 != 0;
        }
        return result;
      }
      if (mosyntkbaccphr_GetNode(7, v12, *v9) == 2)
      {
        v24 = *(_QWORD *)(v8[2] + 8);
        return v6 || v24 == 0;
      }
    }
    return 0;
  }
  if (mosyntkbaccphr_GetNode(7, v12, *v9) != 1)
  {
    if (mosyntkbaccphr_GetNode(7, v12, *v9) == 3)
    {
      v24 = *(_QWORD *)(v8[3] + 16);
      return v6 || v24 == 0;
    }
    if (mosyntkbaccphr_GetNode(7, v12, *v9) == 4)
    {
      v30 = v8[3];
      v39 = 0;
      if (v30)
      {
        mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v30 + 64), &v39);
        v31 = v39;
      }
      else
      {
        v31 = 0;
      }
      mosyntdata_GetPunctFromCommandList(v11, v31, &v38, &v37);
      result = v38 == 10;
      if (!v6 || v38 == 10)
        return result;
      v33 = *(_QWORD *)(v8[3] + 16);
      if (v33)
      {
        do
        {
          v34 = v8[3];
          v39 = 0;
          if (v34)
          {
            mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v34 + 64), &v39);
            v35 = v39;
          }
          else
          {
            v35 = 0;
          }
          mosyntdata_GetPunctFromCommandList(v11, v35, &v38, &v37);
          v33 = *(_QWORD *)(v33 + 16);
        }
        while (v38 != 10 && v33 != 0);
        return v38 == 10;
      }
    }
    return 0;
  }
  v17 = v8[3];
  v39 = 0;
  if (v17)
  {
    mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v17 + 64), &v39);
    result = v39 != 0;
    if (!v6)
      return result;
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  if ((result & 1) == 0)
  {
    v32 = v8[3];
    do
    {
      v32 = *(_QWORD *)(v32 + 16);
      if (!v32)
        break;
      v39 = 0;
      mosyntdata_GetSentTermCommList(v11, *(_QWORD *)(v10 + 40), *(_DWORD *)(v32 + 64), &v39);
    }
    while (!v39);
    return v32 != 0;
  }
  return result;
}

uint64_t IsMatchingNode(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t **v8;
  int v9;
  int Rule;
  int v11;
  int v12;
  int Node;
  unsigned int v15;
  unsigned __int8 v16;

  v7 = *(_QWORD *)(a2 + 16);
  v16 = 0;
  switch(mosyntkbaccphr_GetNode(3, v7, *a3))
  {
    case 0u:
      return 1;
    case 1u:
      v8 = (uint64_t **)(a4 + 16);
      break;
    case 2u:
      Node = mosyntkbaccphr_GetNode(5, v7, *a3);
      v15 = mosyntkbaccphr_GetNode(6, v7, *a3);
      mosyntkbaccphr_CheckMatchingConsFeat2(a1, v7, Node, v15, *(__int16 *)(*(_QWORD *)(a4 + 8) + 16), (unsigned __int16 *)(*(_QWORD *)(a4 + 8) + 24), (char *)&v16);
      return v16;
    case 3u:
      mosyntbase_WriteDevelMessage(a1, "IsMatchingNode -- Property, not handeled here\\n", 0, "", 0, "", 0, "", 0, 0, 0, 0);
      return 0;
    default:
      return 0;
  }
  while (1)
  {
    v8 = (uint64_t **)*v8;
    if (!v8)
      break;
    v9 = mosyntkbaccphr_GetNode(4, v7, *a3);
    Rule = mosyntkbaccphr_GetRule(0, v7, *((unsigned int *)v8 + 2));
    v11 = mosyntkbaccphr_GetRule(0, v7, *((unsigned int *)v8 + 2));
    if (Rule >= 0)
      v12 = v11;
    else
      v12 = -v11;
    if (v9 == v12)
      return 1;
  }
  return 0;
}

uint64_t InsertScenario(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t result;
  uint64_t *v11;

  v6 = 0;
  *a5 = 1;
  v7 = a4;
  while (1)
  {
    v8 = v6;
    v11 = v6;
    v6 = (uint64_t *)*v7;
    if (!*v7)
      break;
    v9 = *((_DWORD *)v6 + 2);
    v7 = (uint64_t *)*v7;
    if (v9 >= a3)
    {
      if (v8)
      {
        if (v9 <= a3)
          goto LABEL_13;
        goto LABEL_8;
      }
      if (v9 <= a3)
      {
LABEL_13:
        result = 0;
        *a5 = 0;
        return result;
      }
      goto LABEL_11;
    }
  }
  if (v8)
  {
LABEL_8:
    result = NewScenarioList(a1, a2, a3, v8);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)*v8 = v6;
    return result;
  }
LABEL_11:
  result = NewScenarioList(a1, a2, a3, (uint64_t *)&v11);
  if ((result & 0x80000000) == 0)
  {
    *v11 = *a4;
    *a4 = (uint64_t)v11;
  }
  return result;
}

uint64_t NewScenarioList(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = *(_QWORD *)(a2 + 80);
  if (v7)
  {
    result = 0;
    *a4 = v7;
    *(_QWORD *)(a2 + 80) = **(_QWORD **)(a2 + 80);
LABEL_6:
    v12 = *a4;
    *(_DWORD *)(v12 + 8) = a3;
    *(_QWORD *)v12 = 0;
    return result;
  }
  result = mosyntpal_ALLOCATE(a1, a4, 0x10u);
  if ((result & 0x80000000) == 0)
  {
    v10 = *a4;
    v13 = 0;
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v13, 0x18u);
    if ((result & 0x80000000) == 0)
    {
      *v13 = *(_QWORD *)(a2 + 32);
      v11 = v13;
      *(_QWORD *)(a2 + 32) = v13;
      *((_DWORD *)v11 + 2) = 6;
      v11[2] = v10;
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t AddSegment(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int RuleSet;
  _QWORD *v19;
  uint64_t v21;
  _QWORD *v22;

  v21 = 0;
  v10 = mosyntpal_ALLOCATE(a1, &v21, 0x28u);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = v21;
  v22 = 0;
  v12 = mosyntpal_ALLOCATE(a1, (uint64_t *)&v22, 0x18u);
  if ((v12 & 0x80000000) == 0)
  {
    *v22 = *(_QWORD *)(a2 + 32);
    v13 = v22;
    *(_QWORD *)(a2 + 32) = v22;
    *((_DWORD *)v13 + 2) = 7;
    v13[2] = v11;
    v14 = v21;
    *(_QWORD *)(v21 + 8) = a4;
    *(_QWORD *)(v14 + 16) = a5;
    *(_DWORD *)(v14 + 24) = a3;
    *(_DWORD *)(v14 + 28) = *a5 - *(_DWORD *)a4;
    v15 = *(_QWORD *)(a2 + 16);
    for (i = mosyntkbaccphr_GetScenario(2, v15, *(unsigned int *)(a2 + 60));
          ;
          i = mosyntkbaccphr_GetRuleSet(4, v15, v17))
    {
      v17 = i;
      if ((_DWORD)i == mosyntkbaccphr_Nil()
        || mosyntkbaccphr_GetRuleSet(2, v15, v17) == a3)
      {
        break;
      }
    }
    if ((_DWORD)v17 == mosyntkbaccphr_Nil())
      RuleSet = 10000;
    else
      RuleSet = mosyntkbaccphr_GetRuleSet(3, v15, v17);
    v19 = (_QWORD *)v21;
    *(_DWORD *)(v21 + 32) = RuleSet;
    *v19 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a4 + 56) = v21;
  }
  return v12;
}

uint64_t GetBestScenarioPathSuffix(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t a4, uint64_t a5, int *a6, _DWORD *a7, _DWORD *a8, uint64_t *a9)
{
  _DWORD *v9;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v9 = a8;
  v17 = *(_QWORD *)(a4 + 16);
  if (v17 == a5)
  {
    result = 0;
    *a6 = 0;
    *a7 = 0;
    *a8 = 0;
    *a9 = 0;
  }
  else
  {
    result = GetBestScenarioPathSuffix(a1, a2, a3, v17, a5, a6, a7, a8, a9);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v19 = *(uint64_t **)(a4 + 56);
  if (!v19)
    return result;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v36 = v9;
  while (1)
  {
    if (v19[2] == a5)
    {
      v40 = 0;
      HIDWORD(v39) = 0;
      v37 = 0;
      if (!a3)
        goto LABEL_30;
      v22 = *((_DWORD *)v19 + 6);
      v23 = (uint64_t *)a3;
      while (1)
      {
        v24 = *((_DWORD *)v23 + 2);
        if (v24 >= v22)
          break;
        v23 = (uint64_t *)*v23;
        if (!v23)
          goto LABEL_30;
      }
      if (v24 == v22)
        LODWORD(v39) = 0;
      else
LABEL_30:
        LODWORD(v39) = 1;
      goto LABEL_31;
    }
    if (a3)
      break;
    v38 = 0;
LABEL_21:
    result = InsertScenario(a1, (uint64_t)a2, *((_DWORD *)v19 + 6), (uint64_t *)&v38, &v39);
    if ((result & 0x80000000) != 0)
      return result;
    result = GetBestScenarioPathSuffix(a1, a2, v38, v19[2], a5, (char *)&v40 + 4, &v40, (char *)&v39 + 4, &v37);
    if ((result & 0x80000000) != 0)
      return result;
    v25 = v38;
    if (v38)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
      result = 0;
      *v26 = a2[10];
      a2[10] = v38;
      v38 = 0;
    }
    else
    {
      result = 0;
    }
    v9 = v36;
LABEL_31:
    v27 = *((_DWORD *)v19 + 7) + HIDWORD(v40);
    if (v27 <= *a6)
    {
      if (v27 != *a6)
        goto LABEL_49;
      v28 = v40;
      v29 = *((_DWORD *)v19 + 8) + v40;
      if (v29 >= *a7 && (v29 != *a7 || (int)v39 + HIDWORD(v39) >= *v9))
        goto LABEL_49;
    }
    else
    {
      v28 = v40;
    }
    *a6 = v27;
    *a7 = *((_DWORD *)v19 + 8) + v28;
    *v9 = v39 + HIDWORD(v39);
    v30 = *a9;
    if (*a9)
    {
      v31 = *(_QWORD **)v30;
      if (*(_QWORD *)v30)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        *v32 = a2[11];
        a2[11] = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        v30 = *a9;
      }
      result = 0;
      *(_QWORD *)(v30 + 8) = v19;
    }
    else
    {
      v33 = a2[11];
      if (v33)
      {
        result = 0;
        *a9 = v33;
        a2[11] = *(_QWORD *)a2[11];
      }
      else
      {
        result = mosyntpal_ALLOCATE(a1, a9, 0x10u);
        if ((result & 0x80000000) != 0)
          return result;
        v34 = *a9;
        v41 = 0;
        result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v41, 0x18u);
        if ((result & 0x80000000) != 0)
          return result;
        *v41 = a2[4];
        v35 = v41;
        a2[4] = v41;
        *((_DWORD *)v35 + 2) = 8;
        v35[2] = v34;
        v9 = v36;
      }
      *(_QWORD *)(*a9 + 8) = v19;
      *(_QWORD *)*a9 = 0;
    }
    *(_QWORD *)*a9 = v37;
LABEL_49:
    v19 = (uint64_t *)*v19;
    if (!v19)
      return result;
  }
  result = NewScenarioList(a1, (uint64_t)a2, *((_DWORD *)a3 + 2), (uint64_t *)&v38);
  if ((result & 0x80000000) != 0)
    return result;
  v20 = *a3;
  if (!*a3)
    goto LABEL_21;
  v21 = (uint64_t *)&v38;
  while (1)
  {
    v21 = (uint64_t *)*v21;
    result = NewScenarioList(a1, (uint64_t)a2, *((_DWORD *)v20 + 2), v21);
    if ((result & 0x80000000) != 0)
      return result;
    v20 = (uint64_t *)*v20;
    if (!v20)
      goto LABEL_21;
  }
}

uint64_t IsRightMatchingTarget(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  while (1)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *a5 = a4;
    v11 = (_QWORD *)a4[4];
    v15 = a3;
    if (v11)
    {
      do
      {
        result = IsMatchingNode(a1, a2, &v15, (uint64_t)v11);
        if ((_DWORD)result)
          break;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
      if ((_DWORD)result)
        break;
    }
    if ((mosyntkbaccphr_GetNodeMatchOp(v10, a3) & 4) != 0)
    {
      v13 = a4[9];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(_QWORD *)(v13 + 56);
        }
        while (v13);
        result = IsRightMatchingTarget(a1, a2, a3, v14, a5);
        if ((_DWORD)result)
          break;
      }
    }
    a4 = (_QWORD *)a4[8];
    if (!a4)
      return 0;
  }
  return result;
}

BOOL IsLeftMatchingTarget(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;

  v10 = *(_QWORD *)(a2 + 16);
  *a5 = a4;
  v11 = (_QWORD *)a4[4];
  v16 = a3;
  if (v11)
  {
    do
    {
      v12 = IsMatchingNode(a1, a2, &v16, (uint64_t)v11);
      if (v12)
        break;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    if (v12)
      return 1;
  }
  if ((mosyntkbaccphr_GetNodeMatchOp(v10, a3) & 4) != 0)
  {
    v13 = a4[9];
    if (v13)
    {
      if (IsLeftMatchingTarget(a1, a2, a3, v13, a5))
        return 1;
    }
  }
  v15 = a4[7];
  return v15 && IsLeftMatchingTarget(a1, a2, a3, v15, a5) != 0;
}

uint64_t mosyntsentpho_TreatSentPho(uint64_t a1, int a2, uint64_t a3, int *a4, int *a5, int *a6, uint64_t *a7, uint64_t **a8)
{
  uint64_t result;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t *v20;

  v19 = 0;
  v20 = 0;
  v18 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v18, 0x10u);
  if ((result & 0x80000000) == 0)
  {
    v17 = v18;
    *v18 = a2;
    *((_QWORD *)v17 + 1) = a3;
    result = ApplyFSTSeq(a1, (uint64_t)v17, 5, a4, a7, &v20);
    if ((result & 0x80000000) == 0)
    {
      result = ApplyFSTSeq(a1, (uint64_t)v18, 6, a5, v20, &v19);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntdata_DisposePhonEleList(a1, &v20);
        if ((result & 0x80000000) == 0)
        {
          result = ApplyFSTSeq(a1, (uint64_t)v18, 7, a6, v19, a8);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntdata_DisposePhonEleList(a1, &v19);
            if ((result & 0x80000000) == 0)
            {
              if (v18)
                return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v18);
              else
                return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ApplyFSTSeq(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v15 = a5;
  *a6 = a5;
  result = mosyntdata_CopyPhonList(a1, a6);
  if ((result & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = 0;
    result = mosynttrans_InitTransDesc(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v13);
    if ((result & 0x80000000) == 0)
    {
      if (*a4 < 1)
      {
        return mosynttrans_FinishTransDesc(a1, &v13);
      }
      else
      {
        v12 = 0;
        while (1)
        {
          v15 = *a6;
          result = mosynttrans_TransducePhonList(a1, v13, a3, *(_QWORD *)&a4[2 * v12 + 2], v12, v15, 0, 0, a6, &v14);
          if ((result & 0x80000000) != 0)
            break;
          result = mosyntdata_DisposePhonEleList(a1, &v15);
          if ((result & 0x80000000) != 0)
            break;
          if (++v12 >= *a4)
            return mosynttrans_FinishTransDesc(a1, &v13);
        }
      }
    }
  }
  return result;
}

uint64_t mosyntkbwgram_NilNFAGram()
{
  return 0;
}

uint64_t mosyntkbwgram_GetFirstEpsTrans(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  uint64_t result;
  int v8;

  v8 = 0;
  result = wgram_GetFirstEpsTrans(a1, a2, a3, a4, &v8, a6);
  *a5 = v8;
  return result;
}

uint64_t mosyntkbwgram_GetNextEpsTrans(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  uint64_t result;
  int v8;

  v8 = 0;
  result = wgram_GetNextEpsTrans(a1, a2, a3, a4, &v8, a6);
  *a5 = v8;
  return result;
}

uint64_t kbsymtab_LoadData(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t *a5, int a6)
{
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t Lex;
  _QWORD *v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  char *v21;
  const char *p_s;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t *v58;
  int v60;
  uint64_t v61;
  __int128 __s;
  uint64_t (*v63)(const char *, const char *);
  uint64_t (*v64)(const char *, uint64_t, char **);
  _QWORD *(*v65)(_QWORD *, _QWORD *);
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v61 = 0;
  inited = InitRsrcFunction(a1, a2, &v61);
  v13 = inited;
  if (!a5)
    return v13;
  if ((inited & 0x80000000) != 0)
    return v13;
  v13 = 2371887114;
  v14 = heap_Calloc(*(_QWORD **)(v61 + 8), 1, 16624);
  *a5 = v14;
  if (!v14)
    return v13;
  Lex = kblex_loadLex(a1, a2, a3, a4, 3u, (_QWORD *)(v14 + 8584));
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  Lex = kblex_loadLex(a1, a2, a3, a4, 4u, (_QWORD *)(*a5 + 8592));
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  Lex = kblex_loadLex(a1, a2, a3, a4, 5u, (_QWORD *)(*a5 + 8600));
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  Lex = kblex_loadLex(a1, a2, a3, a4, 6u, (_QWORD *)(*a5 + 8608));
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  v13 = kblex_loadLex(a1, a2, a3, a4, 7u, (_QWORD *)(*a5 + 8616));
  if ((v13 & 0x80000000) != 0)
  {
LABEL_32:
    freeTabsAsLex(*a5, a1, a2, a3, a4);
    heap_Free(*(_QWORD **)(v61 + 8), *a5);
    *a5 = 0;
    return v13;
  }
  if (!*a5)
    return v13;
  *(_QWORD *)(*a5 + 120) = heap_Calloc(*(_QWORD **)(v61 + 8), 1, 1000);
  *(_QWORD *)(*a5 + 128) = LhpuCreate(*(_QWORD *)(v61 + 8));
  v16 = (_QWORD *)*a5;
  if (!*(_QWORD *)(*a5 + 120) || !v16[16])
    v13 = 2371887114;
  *v16 = v61;
  *(_DWORD *)(*a5 + 8) = 1;
  for (i = 1078; i != 2078; ++i)
    *(_QWORD *)(*a5 + 8 * i) = 0;
  v18 = *a5;
  *(_DWORD *)(*a5 + 8536) = 0;
  if (a6)
  {
    v60 = a4;
    for (j = 0; j != 100; ++j)
    {
      LOWORD(__s) = j;
      *(_DWORD *)(v18 + 4 * j + 136) = kbsymtab_KnownGraphId(v18, (unsigned __int8 *)&__s);
    }
    v20 = 0;
    v21 = (char *)(v18 + 536);
    do
    {
      kbsymtab_GraphSymString(v18, v20, (char *)&__s, 0x64uLL);
      if (cstdlib_strlen((const char *)&__s) >= 8)
        p_s = "";
      else
        p_s = (const char *)&__s;
      cstdlib_strcpy(v21, p_s);
      ++v20;
      v21 += 8;
    }
    while (v20 != 1000);
    *(_DWORD *)(v18 + 8536) = 1;
    v18 = *a5;
    a4 = v60;
  }
  *(_DWORD *)(v18 + 12) = kbsymtab_KnownGraphId(v18, "#");
  v23 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{*}");
  *(_DWORD *)(v18 + 16) = v23 & ~(v23 >> 31);
  v24 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"&");
  *(_DWORD *)(v18 + 20) = v24 & ~(v24 >> 31);
  v25 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"#");
  *(_DWORD *)(v18 + 24) = v25 & ~(v25 >> 31);
  v26 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#ACC0}");
  *(_DWORD *)(v18 + 28) = v26 & ~(v26 >> 31);
  v27 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#ACC1}");
  *(_DWORD *)(v18 + 32) = v27 & ~(v27 >> 31);
  v28 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#ACC2}");
  *(_DWORD *)(v18 + 36) = v28 & ~(v28 >> 31);
  v29 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#ACC3}");
  *(_DWORD *)(v18 + 40) = v29 & ~(v29 >> 31);
  v30 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#ACC4}");
  *(_DWORD *)(v18 + 44) = v30 & ~(v30 >> 31);
  v31 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)".");
  *(_DWORD *)(v18 + 48) = v31 & ~(v31 >> 31);
  v32 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"'");
  *(_DWORD *)(v18 + 52) = v32 & ~(v32 >> 31);
  v33 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"'2");
  *(_DWORD *)(v18 + 56) = v33 & ~(v33 >> 31);
  v34 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"_");
  *(_DWORD *)(v18 + 60) = v34 & ~(v34 >> 31);
  v35 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"_");
  *(_DWORD *)(v18 + 64) = v35 & ~(v35 >> 31);
  v36 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"*");
  *(_DWORD *)(v18 + 68) = v36 & ~(v36 >> 31);
  v37 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#PB-S}");
  *(_DWORD *)(v18 + 72) = v37 & ~(v37 >> 31);
  v38 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"+");
  *(_DWORD *)(v18 + 76) = v38 & ~(v38 >> 31);
  v39 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#PB-W}");
  *(_DWORD *)(v18 + 80) = v39 & ~(v39 >> 31);
  v40 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#BEG}");
  *(_DWORD *)(v18 + 84) = v40 & ~(v40 >> 31);
  v41 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#END}");
  *(_DWORD *)(v18 + 88) = v41 & ~(v41 >> 31);
  v42 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)".");
  *(_DWORD *)(v18 + 92) = v42 & ~(v42 >> 31);
  v43 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"{#WB}");
  *(_DWORD *)(v18 + 96) = v43 & ~(v43 >> 31);
  v44 = dictSingleLookupInt((uint64_t *)v18, 0, (uint64_t)"\"");
  *(_DWORD *)(v18 + 100) = v44 & ~(v44 >> 31);
  v45 = dictSingleLookupInt((uint64_t *)v18, 1, (uint64_t)"*");
  *(_DWORD *)(v18 + 104) = v45 & ~(v45 >> 31);
  v46 = dictSingleLookupInt((uint64_t *)v18, 1, (uint64_t)"**");
  *(_DWORD *)(v18 + 108) = v46 & ~(v46 >> 31);
  v47 = dictSingleLookupInt((uint64_t *)v18, 1, (uint64_t)"%");
  *(_DWORD *)(v18 + 112) = v47 & ~(v47 >> 31);
  v48 = dictSingleLookupInt((uint64_t *)v18, 1, (uint64_t)"%%");
  *(_DWORD *)(v18 + 116) = v48 & ~(v48 >> 31);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_32;
  v49 = *(_QWORD **)(v61 + 8);
  v50 = (uint64_t *)(*a5 + 8544);
  *(_QWORD *)&__s = ssftmap_ElemCopyString;
  *((_QWORD *)&__s + 1) = ssftmap_ElemFreeString;
  v63 = ssftmap_ElemCompareKeysString;
  v64 = ssftmap_ElemCopyString;
  v65 = ssftmap_ElemFreeString;
  Lex = ssftmap_ObjOpen(v49, 0, &__s, v50);
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  v51 = *(_QWORD **)(v61 + 8);
  v52 = (uint64_t *)(*a5 + 8552);
  *(_QWORD *)&__s = ssftmap_ElemCopyString;
  *((_QWORD *)&__s + 1) = ssftmap_ElemFreeString;
  v63 = ssftmap_ElemCompareKeysString;
  v64 = ssftmap_ElemCopyString;
  v65 = ssftmap_ElemFreeString;
  Lex = ssftmap_ObjOpen(v51, 0, &__s, v52);
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  v53 = *(_QWORD **)(v61 + 8);
  v54 = (uint64_t *)(*a5 + 8560);
  *(_QWORD *)&__s = ssftmap_ElemCopyString;
  *((_QWORD *)&__s + 1) = ssftmap_ElemFreeString;
  v63 = ssftmap_ElemCompareKeysString;
  v64 = ssftmap_ElemCopyString;
  v65 = ssftmap_ElemFreeString;
  Lex = ssftmap_ObjOpen(v53, 0, &__s, v54);
  if ((Lex & 0x80000000) != 0)
    goto LABEL_31;
  v55 = *(_QWORD **)(v61 + 8);
  v56 = (uint64_t *)(*a5 + 8568);
  *(_QWORD *)&__s = ssftmap_ElemCopyString;
  *((_QWORD *)&__s + 1) = ssftmap_ElemFreeString;
  v63 = ssftmap_ElemCompareKeysString;
  v64 = ssftmap_ElemCopyString;
  v65 = ssftmap_ElemFreeString;
  Lex = ssftmap_ObjOpen(v55, 0, &__s, v56);
  if ((Lex & 0x80000000) != 0)
  {
LABEL_31:
    v13 = Lex;
    goto LABEL_32;
  }
  v57 = *(_QWORD **)(v61 + 8);
  v58 = (uint64_t *)(*a5 + 8576);
  *(_QWORD *)&__s = ssftmap_ElemCopyString;
  *((_QWORD *)&__s + 1) = ssftmap_ElemFreeString;
  v63 = ssftmap_ElemCompareKeysString;
  v64 = ssftmap_ElemCopyString;
  v65 = ssftmap_ElemFreeString;
  v13 = ssftmap_ObjOpen(v57, 0, &__s, v58);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_32;
  return v13;
}

uint64_t freeTabsAsLex(uint64_t result, _WORD *a2, int a3, _WORD *a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (_QWORD *)result;
  v10 = *(_QWORD *)(result + 8584);
  if (v10)
    result = kblex_FinishLex(a2, a3, a4, a5, v10);
  v11 = v9[1074];
  if (v11)
    result = kblex_FinishLex(a2, a3, a4, a5, v11);
  v12 = v9[1075];
  if (v12)
    result = kblex_FinishLex(a2, a3, a4, a5, v12);
  v13 = v9[1076];
  if (v13)
    result = kblex_FinishLex(a2, a3, a4, a5, v13);
  v14 = v9[1077];
  if (v14)
    return kblex_FinishLex(a2, a3, a4, a5, v14);
  return result;
}

uint64_t kbsymtab_UnloadData(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;

  v6 = 2371887111;
  if (a5)
  {
    v11 = *a5;
    if (*a5)
    {
      v12 = *(_QWORD **)(*(_QWORD *)v11 + 8);
      freeTabsAsLex(v11, a1, a2, a3, a4);
      v13 = *a5;
      if (*(_QWORD *)(*a5 + 128))
      {
        LhpuRemove(v12, (uint64_t *)(*a5 + 128));
        v13 = *a5;
      }
      v14 = *(_QWORD *)(v13 + 120);
      if (v14)
      {
        heap_Free(v12, v14);
        v13 = *a5;
      }
      ssftmap_ObjClose(*(_QWORD *)(v13 + 8544));
      ssftmap_ObjClose(*(_QWORD *)(*a5 + 8552));
      ssftmap_ObjClose(*(_QWORD *)(*a5 + 8560));
      ssftmap_ObjClose(*(_QWORD *)(*a5 + 8568));
      ssftmap_ObjClose(*(_QWORD *)(*a5 + 8576));
      for (i = 1078; i != 2078; ++i)
      {
        v16 = *(_QWORD *)(*a5 + 8 * i);
        if (v16)
          heap_Free(v12, v16);
      }
      heap_Free(v12, *a5);
      return 0;
    }
  }
  return v6;
}

uint64_t kbsymtab_KnownGraphId(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  int v3;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 8536))
    {
      v2 = *a2;
      if (v2 <= 0x63 && !a2[1])
        return *(unsigned int *)(a1 + 4 * v2 + 136);
    }
  }
  v3 = dictSingleLookupInt((uint64_t *)a1, 3, (uint64_t)a2);
  return v3 & ~(v3 >> 31);
}

uint64_t kbsymtab_KnownPhonId(uint64_t *a1, uint64_t a2)
{
  int v2;

  v2 = dictSingleLookupInt(a1, 0, a2);
  return v2 & ~(v2 >> 31);
}

uint64_t kbsymtab_KnownAtomId(uint64_t *a1, uint64_t a2)
{
  int v2;

  v2 = dictSingleLookupInt(a1, 2, a2);
  return v2 & ~(v2 >> 31);
}

uint64_t kbsymtab_KnownConsId(uint64_t *a1, uint64_t a2)
{
  int v2;

  v2 = dictSingleLookupInt(a1, 1, a2);
  return v2 & ~(v2 >> 31);
}

char *kbsymtab_GraphSymString(uint64_t a1, signed int a2, char *__dst, unint64_t a4)
{
  char *result;

  *__dst = 0;
  if (!a1)
    return (char *)dictLookupSymStr((uint64_t *)a1, 3, a2, __dst, a4);
  if (a4 < 8)
    return (char *)dictLookupSymStr((uint64_t *)a1, 3, a2, __dst, a4);
  if (a2 > 999)
    return (char *)dictLookupSymStr((uint64_t *)a1, 3, a2, __dst, a4);
  if (!*(_DWORD *)(a1 + 8536))
    return (char *)dictLookupSymStr((uint64_t *)a1, 3, a2, __dst, a4);
  result = cstdlib_strcpy(__dst, (const char *)(a1 + 8 * a2 + 536));
  if (!*__dst)
    return (char *)dictLookupSymStr((uint64_t *)a1, 3, a2, __dst, a4);
  return result;
}

uint64_t dictLookupSymStr(uint64_t *a1, int a2, unsigned int a3, char *a4, uint64_t a5)
{
  uint64_t result;
  size_t v10;
  __int16 v11;
  const char **v12;
  char v13;
  char v14[15];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 58;
  result = (uint64_t)LH_itoa(a3, v14, 0xAu);
  if (a4 && a5)
  {
    v12 = 0;
    *a4 = 0;
    v11 = -1;
    result = dictLookup(a1, a2, (uint64_t)&v13, &v12, &v11);
    if (v11)
    {
      v10 = a5 - 1;
      result = (uint64_t)cstdlib_strncpy(a4, *v12, v10);
      a4[v10] = 0;
    }
  }
  return result;
}

uint64_t kbsymtab_PhonSymString(uint64_t *a1, unsigned int a2, char *a3, uint64_t a4)
{
  return dictLookupSymStr(a1, 0, a2, a3, a4);
}

uint64_t kbsymtab_AtomSymString(uint64_t *a1, unsigned int a2, char *a3, uint64_t a4)
{
  return dictLookupSymStr(a1, 2, a2, a3, a4);
}

uint64_t kbsymtab_ConsSymString(uint64_t *a1, unsigned int a2, char *a3, uint64_t a4)
{
  return dictLookupSymStr(a1, 1, a2, a3, a4);
}

uint64_t kbsymtab_LHPlusMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t kbsymtab_GraphTermId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t kbsymtab_FSTDefaultId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t kbsymtab_PhonStartId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t kbsymtab_PhonTermId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t kbsymtab_SyllSepId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t kbsymtab_PrimAccId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t kbsymtab_SecAccId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t kbsymtab_AccId(uint64_t a1, int a2)
{
  unsigned int v2;

  v2 = a2 & ~(a2 >> 31);
  if (v2 >= 4)
    v2 = 4;
  return *(unsigned int *)(a1 + 4 * v2 + 28);
}

uint64_t kbsymtab_WordSepId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t kbsymtab_PhrSepPauseId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t kbsymtab_PhrSepNoPauseId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t kbsymtab_WordSep2Id(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t kbsymtab_PhrSepPause2Id(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t kbsymtab_PhrSepNoPause2Id(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t kbsymtab_IPABeginId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t kbsymtab_IPAEndId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t kbsymtab_IPASyllSepId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t kbsymtab_IPAWordSepId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t kbsymtab_IPAPrimAccId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t kbsymtab_StarConsId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t kbsymtab_Star2ConsId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t kbsymtab_WildConsId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t kbsymtab_Wild2ConsId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

BOOL kbsymtab_PropTabAvailable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8616) != 0;
}

uint64_t kbsymtab_IntPropValue(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  _BYTE v5[101];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  buildSymFeatPropKey(a1, a2, 0, a3, v5);
  return dictSingleLookupInt(a1, 4, (uint64_t)v5);
}

char *buildSymFeatPropKey(uint64_t *a1, unsigned int a2, __int16 *a3, unsigned int a4, _BYTE *a5)
{
  const char *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;

  *a5 = 58;
  v8 = a5 + 1;
  LH_itoa(a2, a5 + 1, 0xAu);
  v9 = cstdlib_strlen(v8);
  v10 = (char *)&v8[v9];
  v11 = 100 - v9;
  if (a3)
  {
    *v10 = 40;
    v12 = v10 + 1;
    if (*a3 >= 1)
    {
      v13 = 0;
      v14 = 99 - v9;
      do
      {
        if (v13 && v14 >= 3)
        {
          *v12++ = 44;
          --v14;
        }
        v15 = a3[v13 + 1];
        if (v15 < 0)
        {
          dictLookupSymStr(a1, 2, -v15, v12, v14 - 2);
          v16 = cstdlib_strlen(v12);
          v12 += (int)v16;
          v14 -= v16;
        }
        ++v13;
      }
      while (v13 < *a3);
    }
    *(_WORD *)v12 = 41;
    v17 = cstdlib_strlen(v10);
    v10 += (int)v17;
    v11 -= v17;
  }
  *v10 = 58;
  if (a4 > 9)
    v18 = "";
  else
    v18 = off_24D2855A0[a4];
  return cstdlib_strncpy(v10 + 1, v18, v11 - 1);
}

uint64_t dictSingleLookupInt(uint64_t *a1, int a2, uint64_t a3)
{
  __int16 v4;
  unsigned __int8 **v5;

  v5 = 0;
  v4 = -1;
  dictLookup(a1, a2, a3, &v5, &v4);
  if (v4)
    return cstdlib_atoi(*v5);
  else
    return 0xFFFFFFFFLL;
}

BOOL kbsymtab_HasIntPropValue(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int16 v12;
  uint64_t v13;
  _BYTE v14[101];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  buildSymFeatPropKey(a1, a2, 0, a3, v14);
  v13 = 0;
  v12 = 0;
  dictLookup(a1, 4, (uint64_t)v14, &v13, (__int16 *)&v12);
  v6 = v12;
  if (!v12)
    return 0;
  v7 = 0;
  v8 = v13;
  do
    v9 = cstdlib_atoi(*(unsigned __int8 **)(v8 + 8 * v7++));
  while (v9 != a4 && v7 < v6);
  return v9 == a4;
}

uint64_t **kbsymtab_GetFirstAccPatVal(uint64_t **result, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  if (result)
  {
    if (a4)
    {
      *(_QWORD *)a4 = result;
      *(_DWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 24) = a3;
      *(_DWORD *)(a4 + 28) = -1;
      return kbsymtab_GetNextAccPatVal((uint64_t **)a4, a5);
    }
  }
  return result;
}

uint64_t **kbsymtab_GetNextAccPatVal(uint64_t **result, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unsigned __int16 v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[101];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (result && a2)
  {
    v3 = result;
    v9 = 0;
    *a2 = 0;
    buildSymFeatPropKey(*result, *((_DWORD *)v3 + 2), 0, *((_DWORD *)v3 + 6), v10);
    v4 = *v3;
    v7 = 0;
    result = (uint64_t **)dictLookup(v4, 4, (uint64_t)v10, &v9, (__int16 *)&v7);
    v5 = *((int *)v3 + 7) + 1;
    if ((int)v5 < v7)
    {
      v8 = (char *)(*v3)[15];
      v6 = v8;
      *((_DWORD *)v3 + 7) = v5;
      cstdlib_strncpy(v6, *(const char **)(v9 + 8 * v5), 0x3E8uLL);
      return (uint64_t **)stringToPatternTree(*v3, (unsigned __int8 **)&v8, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t stringToPatternTree(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  int v8;
  const char *v9;
  int v10;
  unsigned __int8 v11;
  __int16 i;
  unsigned __int8 *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  int v17;
  _QWORD *v18;
  char *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  char *v22;
  char v23;
  _QWORD *v24;
  char __dst[100];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  result = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 24);
  *(_QWORD *)a3 = result;
  if (!result)
    return result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8) = 0;
  *(_DWORD *)(*(_QWORD *)a3 + 16) = 0;
  v7 = *a2;
  v8 = **a2;
  if (v8 == 37)
  {
    *a2 = v7 + 1;
    if (v7[1] == 37)
    {
      *a2 = v7 + 2;
      v9 = "%%";
    }
    else
    {
      v9 = "%";
    }
    goto LABEL_14;
  }
  if (v8 == 42)
  {
    *a2 = v7 + 1;
    if (v7[1] == 42)
    {
      *a2 = v7 + 2;
      v9 = "**";
    }
    else
    {
      v9 = "*";
    }
LABEL_14:
    cstdlib_strcpy(__dst, v9);
    goto LABEL_15;
  }
  v10 = cstdlib_isdigit(v8);
  v11 = **a2;
  if (v10)
  {
    result = cstdlib_isdigit(v11);
    for (i = 0; (_DWORD)result; result = cstdlib_isdigit(v13[1]))
    {
      v13 = *a2;
      i = (char)*(*a2)++ + 10 * i - 48;
    }
    *(_WORD *)(*(_QWORD *)a3 + 18) = i;
    goto LABEL_16;
  }
  v19 = __dst;
  if (!cstdlib_isalpha(v11))
    goto LABEL_33;
  v20 = *a2 + 1;
  __dst[0] = **a2;
  *a2 = v20;
  v21 = 1;
  while (cstdlib_isalnum(*v20))
  {
    if (v21 > 0x62)
      goto LABEL_32;
    v22 = (char *)*a2;
    v23 = **a2;
LABEL_31:
    __dst[v21] = v23;
    v20 = (unsigned __int8 *)(v22 + 1);
    *a2 = v20;
    ++v21;
  }
  v22 = (char *)*a2;
  if (**a2 == 95 && v21 < 0x63)
  {
    v23 = 95;
    goto LABEL_31;
  }
LABEL_32:
  v19 = &__dst[v21];
LABEL_33:
  *v19 = 0;
LABEL_15:
  result = dictSingleLookupInt(a1, 1, (uint64_t)__dst);
  *(_WORD *)(*(_QWORD *)a3 + 16) = result & ~(unsigned __int16)((int)result >> 31);
LABEL_16:
  v14 = (char *)*a2;
  if (**a2 == 40)
  {
    v24 = 0;
    *a2 = (unsigned __int8 *)(v14 + 1);
    result = stringToPatternTree(a1, a2, &v24);
    v15 = v24;
    *(_QWORD *)(*(_QWORD *)a3 + 8) = v24;
    while (1)
    {
      v16 = (char *)*a2;
      v17 = **a2;
      if (v17 != 44)
        break;
      *a2 = (unsigned __int8 *)(v16 + 1);
      result = stringToPatternTree(a1, a2, &v24);
      v18 = v24;
      *v15 = v24;
      v15 = v18;
    }
    if (v17 == 41)
      *a2 = (unsigned __int8 *)(v16 + 1);
  }
  return result;
}

_QWORD *kbsymtab_DisposeAccPat(_QWORD *result, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (result)
  {
    if (a2)
    {
      v3 = *a2;
      if (*a2)
      {
        v4 = result;
        do
        {
          v5 = (_QWORD *)*v3;
          kbsymtab_DisposeAccPat(v4, v3 + 1);
          result = heap_Free(*(_QWORD **)(*v4 + 8), (uint64_t)v3);
          v3 = v5;
        }
        while (v5);
        *a2 = 0;
      }
    }
  }
  return result;
}

void kbsymtab_GetFeatMatchedFirstIntPropVal(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6)
{
  if (a6)
    *a6 = -1;
  if (a5)
  {
    *(_QWORD *)a5 = a1;
    *(_DWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_DWORD *)(a5 + 24) = a4;
    *(_DWORD *)(a5 + 28) = -1;
    kbsymtab_GetFeatMatchedNextIntPropVal(a1, a5, a6);
  }
}

void kbsymtab_GetFeatMatchedNextIntPropVal(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  _BYTE v11[101];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = -1;
  if (a2)
  {
    v10 = 0;
    buildSymFeatPropKey(*(uint64_t **)a2, *(_DWORD *)(a2 + 8), *(__int16 **)(a2 + 16), *(_DWORD *)(a2 + 24), v11);
    v5 = *(uint64_t **)a2;
    v9 = 0;
    v6 = dictLookup(v5, 4, (uint64_t)v11, &v10, (__int16 *)&v9);
    v7 = *(int *)(a2 + 28) + 1;
    if ((int)v7 >= v9)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v8 = *(_DWORD *)(a2 + 8);
        if (a3)
          *a3 = -1;
        *(_DWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 28) = -1;
        kbsymtab_GetFeatMatchedNextIntPropVal(v6, a2, a3);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 28) = v7;
      if (a3)
        *a3 = cstdlib_atoi(*(unsigned __int8 **)(v10 + 8 * v7));
    }
  }
}

void kbsymtab_GetLhPlusPhone(uint64_t *a1, uint64_t a2, int a3, int *a4, char *a5, int a6, _BYTE *a7)
{
  uint64_t v11;
  char *v13;
  int ComplexPhoneLen;
  BOOL v15;
  int v16;

  if (a7)
  {
    *a7 = 0;
    if (a5)
    {
      if (!a1)
        goto LABEL_15;
      if (!a2)
        goto LABEL_15;
      if (!a4)
        goto LABEL_15;
      v11 = *a4;
      if ((int)v11 >= a3)
        goto LABEL_15;
      v13 = (char *)(a2 + v11);
      ComplexPhoneLen = getComplexPhoneLen(a1, (_BYTE *)(a2 + v11));
      v15 = ComplexPhoneLen;
      if (!ComplexPhoneLen)
      {
        LhplGetSymbol(v13);
        if (v16)
        {
          v15 = a6;
        }
        else
        {
          v15 = 1;
          if (*v13 == 123)
            v15 = getComplexPhoneLen(a1, v13) == 0;
        }
      }
      if (v15 < a6)
      {
        cstdlib_strncpy(a5, v13, v15);
        a5[v15] = 0;
        *a4 += v15;
        *a7 = 1;
        return;
      }
      if (!*a7)
LABEL_15:
        *a5 = 0;
    }
  }
}

uint64_t getComplexPhoneLen(uint64_t *a1, _BYTE *a2)
{
  uint64_t i;
  int v3;
  char v4;
  _BYTE v7[15];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*a2 != 123)
    return 0;
  v7[0] = 123;
  for (i = 1; i != 13; ++i)
  {
    v3 = a2[i];
    if (!a2[i])
      break;
    if (v3 == 123)
      break;
    if (v3 == 125)
      break;
    v7[i] = v3;
  }
  v4 = i;
  if (a2[i] == 125)
  {
    *(_WORD *)&v7[i] = 125;
    if ((int)dictSingleLookupInt(a1, 0, (uint64_t)v7) >= 1)
      return (v4 + 1);
    else
      return 0;
  }
  else
  {
    return 0;
  }
}

uint64_t dictLookup(uint64_t *a1, int a2, uint64_t a3, _QWORD *a4, __int16 *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t result;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  __int16 v23;
  BOOL v24;
  char v25;
  uint64_t v26[3];
  _QWORD v27[3];
  char __src[8];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      v9 = a1 + 1073;
      v10 = 1068;
      goto LABEL_8;
    case 1:
      v9 = a1 + 1074;
      v10 = 1069;
      goto LABEL_8;
    case 2:
      v9 = a1 + 1075;
      v10 = 1070;
      goto LABEL_8;
    case 3:
      v9 = a1 + 1076;
      v10 = 1071;
      goto LABEL_8;
    case 4:
      v9 = a1 + 1077;
      v10 = 1072;
LABEL_8:
      v11 = *v9;
      v12 = a1[v10];
      break;
    default:
      v11 = 0;
      v12 = 0;
      break;
  }
  memset(v27, 0, sizeof(v27));
  *(_QWORD *)__src = 0;
  memset(v26, 0, sizeof(v26));
  v24 = 0;
  v13 = ssftmap_Find(v12, a3, __src) & 0x1FFF;
  if (v13 != 7 && v13 != 20)
  {
    result = cstdlib_strcmp(*(const char **)__src, "~");
    if ((_DWORD)result)
    {
      v22 = (char *)a1[1078];
      if (!v22)
      {
        v22 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), 101);
        if (!v22)
          goto LABEL_11;
      }
      result = (uint64_t)cstdlib_strncpy(v22, *(const char **)__src, 0x64uLL);
      v22[100] = 0;
      a1[1078] = (uint64_t)v22;
      v23 = 1;
      *a4 = a1 + 1078;
    }
    else
    {
      v23 = 0;
    }
    *a5 = v23;
    return result;
  }
LABEL_11:
  v14 = (unsigned __int16)*a5;
  *a5 = 0;
  kblexXX_StartLookup(v11, (uint64_t)v27);
  v15 = 0;
  v25 = 1;
  while (*(_BYTE *)(a3 + v15))
  {
    result = kblexXX_LookupChar(*(_BYTE *)(a3 + v15++), (int *)v27, &v25);
    if (!v25)
      goto LABEL_28;
  }
  kblexXX_GetFirstEntry(v27, &v24, (uint64_t)v26);
  while (v24)
  {
    if (*a5 && v14 != 0)
      break;
    kblexXX_GetEntryPhon(0, v26, __src, 100);
    v18 = (unsigned __int16)*a5;
    if (v18 <= 0x3E7)
    {
      v19 = (char *)a1[v18 + 1078];
      if (v19 || (v19 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), 101)) != 0)
      {
        cstdlib_strncpy(v19, __src, 0x64uLL);
        v19[100] = 0;
        v20 = (unsigned __int16)*a5;
        a1[v20 + 1078] = (uint64_t)v19;
        *a5 = v20 + 1;
      }
    }
    kblexXX_GetNextEntry(&v24, (int *)v26);
  }
  result = kblexXX_FinishEntrySearch();
LABEL_28:
  *a4 = a1 + 1078;
  if (*a5)
  {
    if (*a5 != 1)
      return result;
    v21 = (const char *)a1[1078];
  }
  else
  {
    v21 = "~";
  }
  return ssftmap_Insert(v12, a3, (uint64_t)v21);
}

uint64_t mosynt_PadWithChar(uint64_t a1, int a2, int __c, unsigned int a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;

  v5 = 0;
  do
    LODWORD(v6) = v5;
  while (*(unsigned __int8 *)(a1 + v5++));
  v6 = v6;
  if (a4 >= a2 - 1)
    v8 = (a2 - 1);
  else
    v8 = a4;
  if (v5 - 1 < v8)
  {
    memset((void *)(a1 + v6), __c, v8 - v5 + 1);
    v6 = v8;
  }
  *(_BYTE *)(a1 + v6) = 0;
  return 0;
}

uint64_t mosynt_RemoveAllSubstrOcc(char *a1, _BYTE *a2)
{
  char v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *a2;
      if (*a2)
      {
        v6 = 0;
        while (a1[v4 + v6] == v5)
        {
          v5 = a2[++v6];
          if (!a2[v6])
            goto LABEL_10;
        }
        a1[v3++] = v2;
        v6 = 1;
      }
      else
      {
        v6 = 0;
      }
LABEL_10:
      v4 += v6;
      v2 = a1[v4];
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  a1[v3] = 0;
  return 0;
}

uint64_t mosynt_SubstAllSubstrOcc(char *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, int a5)
{
  char v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  if (*a2)
  {
    v5 = *a1;
    if (*a1)
    {
      v6 = 0;
      v7 = 0;
      v8 = a5 - 1;
      do
      {
        v9 = *a2;
        if (*a2)
        {
          v10 = 0;
          while (a1[v7 + v10] == v9)
          {
            v9 = a2[++v10];
            if (!a2[v10])
              goto LABEL_10;
          }
          if (v6 < v8)
            a4[v6++] = v5;
          v10 = 1;
        }
        else
        {
          v10 = 0;
LABEL_10:
          LOBYTE(v11) = *a3;
          if (*a3)
          {
            v12 = 1;
            do
            {
              if (v6 < v8)
                a4[v6++] = v11;
              v11 = a3[v12++];
            }
            while (v11);
          }
        }
        v7 += v10;
        v5 = a1[v7];
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    a4 += v6;
  }
  *a4 = 0;
  return 0;
}

uint64_t mosynt_GetTermSubstr(uint64_t a1, _DWORD *a2, unsigned __int8 a3, _DWORD *a4, char *__dst, int a6)
{
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v11;

  if (*(_BYTE *)(a1 + *a2))
  {
    *a4 = 1;
    v6 = *a2;
    v7 = *(unsigned __int8 *)(a1 + v6);
    for (i = 0; v7 != a3 && v7 != 0; v7 = *(unsigned __int8 *)(a1 + v6))
    {
      if (i < a6 - 1)
      {
        __dst[i++] = v7;
        LODWORD(v6) = *a2;
      }
      LODWORD(v6) = v6 + 1;
      *a2 = v6;
    }
    __dst[i] = 0;
    v11 = *a2;
    if (*(_BYTE *)(a1 + v11))
      *a2 = v11 + 1;
  }
  else
  {
    *a4 = 0;
    cstdlib_strcpy(__dst, "");
  }
  return 0;
}

uint64_t mosynt_RemoveInitSubstr(char *a1, const char *a2)
{
  int v4;
  char v5;
  uint64_t v6;

  if (cstdlib_strstr(a1, a2) == a1)
  {
    v4 = cstdlib_strlen(a2);
    v5 = a1[(unsigned __int16)v4];
    if (v5)
    {
      LOWORD(v6) = 0;
      do
      {
        a1[(unsigned __int16)v6] = v5;
        ++v4;
        LOWORD(v6) = v6 + 1;
        v5 = a1[(unsigned __int16)v4];
      }
      while (v5);
      v6 = (unsigned __int16)v6;
    }
    else
    {
      v6 = 0;
    }
    a1[v6] = 0;
  }
  return 0;
}

uint64_t mosynt_App(uint64_t a1, int a2, unsigned int *a3, _BYTE *a4, _DWORD *a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;

  *a5 = 1;
  LOBYTE(v5) = *a4;
  v6 = *a3;
  if (*a4)
  {
    v7 = 1;
    while (v6 < a2 - 1)
    {
      *(_BYTE *)(a1 + v6) = v5;
      v6 = *a3 + 1;
      *a3 = v6;
      v5 = a4[v7++];
      if (!v5)
        goto LABEL_7;
    }
    *a5 = 0;
    v6 = *a3;
  }
LABEL_7:
  *(_BYTE *)(a1 + v6) = 0;
  return 0;
}

uint64_t mosynt_NormalizeSpaceFields(_BYTE *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  unsigned int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = 0;
  v5 = *a1;
  if (*a1)
  {
    v13 = 0;
    v7 = a3 - 1;
    while (1)
    {
      result = mosynt_GetSpace(0, (uint64_t)a1, (unsigned int *)&v14 + 1, &v13);
      if ((result & 0x80000000) != 0)
        break;
      v9 = (unsigned __int16)v13;
      LODWORD(v10) = v14;
      if ((_WORD)v13)
      {
        do
        {
          v11 = v10;
          if (v10 < v7)
          {
            v10 = (v10 + 1);
            *(_BYTE *)(a2 + v11) = 32;
            v11 = v10;
          }
          *(_BYTE *)(a2 + v11) = 0;
          --v9;
        }
        while (v9);
      }
      LODWORD(v14) = v10;
      v12 = HIDWORD(v14);
      result = mosynt_GetField((uint64_t)a1, (unsigned int *)&v14 + 1, &v13);
      if ((result & 0x80000000) != 0)
        break;
      result = mosynt_TransferStretchedStringSection((uint64_t)a1, &v12, v13, a2, a3, (unsigned int *)&v14, v13, 32);
      if ((result & 0x80000000) != 0)
        break;
      if (!a1[HIDWORD(v14)])
      {
        v5 = v14;
        goto LABEL_13;
      }
    }
  }
  else
  {
    result = 0;
LABEL_13:
    if (v5 >= a3)
      v5 = a3 - 1;
    *(_BYTE *)(a2 + v5) = 0;
  }
  return result;
}

uint64_t mosynt_GetSpace(int a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t UTF8Char;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char __s[5];

  *a4 = 0;
  UTF8Char = utf8_getUTF8Char(a2, *a3, __s);
  if ((UTF8Char & 0x80000000) != 0)
    return UTF8Char;
  while (1)
  {
    while (1)
    {
LABEL_2:
      v9 = __s[0] - 32;
      v10 = v9 > 0x3F;
      v11 = (1 << v9) & 0x8000000000002001;
      if (!v10 && v11 != 0)
        goto LABEL_6;
      if (!a1 || __s[0] != 47 && __s[0] != 35)
        break;
      if (*a3 != 1 && *(_BYTE *)(a2 + *a3 - 1) != 32 || (*(unsigned __int8 *)(a2 + *a3 + 1) | 0x20) != 0x20)
        return UTF8Char;
LABEL_6:
      ++*a4;
      v13 = *a3 + cstdlib_strlen(__s);
      *a3 = v13;
      UTF8Char = utf8_getUTF8Char(a2, v13, __s);
      if ((UTF8Char & 0x80000000) != 0)
        return UTF8Char;
    }
    if (!cstdlib_strcmp(__s, "◄"))
      break;
    if (!cstdlib_strcmp(__s, "►") || !cstdlib_strcmp(__s, "↕"))
      goto LABEL_6;
    if (cstdlib_strcmp(__s, "▲"))
      return UTF8Char;
    while (__s[0])
    {
      if (!cstdlib_strcmp(__s, "▼"))
      {
        if (__s[0])
          goto LABEL_6;
        goto LABEL_2;
      }
      ++*a4;
      v14 = *a3 + cstdlib_strlen(__s);
      *a3 = v14;
      UTF8Char = utf8_getUTF8Char(a2, v14, __s);
      if ((UTF8Char & 0x80000000) != 0)
        return UTF8Char;
    }
  }
  v15 = 0;
  while (1)
  {
    ++*a4;
    v16 = *a3 + cstdlib_strlen(__s);
    *a3 = v16;
    UTF8Char = utf8_getUTF8Char(a2, v16, __s);
    if ((UTF8Char & 0x80000000) != 0)
      return UTF8Char;
    v10 = v15++ > 1;
    if (v10)
      goto LABEL_2;
  }
}

uint64_t mosynt_GetField(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t i;
  unsigned int v7;
  char __s1[5];

  *a3 = 0;
  for (i = utf8_getUTF8Char(a1, *a2, __s1); (i & 0x80000000) == 0; i = utf8_getUTF8Char(a1, v7, __s1))
  {
    if (!__s1[0])
      break;
    if (__s1[0] == 32)
      break;
    if (__s1[0] == 95)
      break;
    if (!cstdlib_strcmp(__s1, "◄"))
      break;
    if (!cstdlib_strcmp(__s1, "►"))
      break;
    if (!cstdlib_strcmp(__s1, "↕"))
      break;
    if (!cstdlib_strcmp(__s1, "▲"))
      break;
    ++*a3;
    v7 = *a2 + cstdlib_strlen(__s1);
    *a2 = v7;
  }
  return i;
}

uint64_t mosynt_TransferStretchedStringSection(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, int a5, unsigned int *a6, unsigned int a7, int a8)
{
  int v10;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t UTF8Char;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v26;
  char __s[5];

  v10 = a5;
  __s[0] = 0;
  if (a3)
  {
    v26 = a8;
    v14 = 0;
    v15 = 0;
    v16 = a5 - 1;
    while (1)
    {
      UTF8Char = utf8_getUTF8Char(a1, *a2, __s);
      if ((UTF8Char & 0x80000000) != 0)
        break;
      *a2 += cstdlib_strlen(__s);
      if (v14 < a7)
      {
        LOBYTE(v18) = __s[0];
        v19 = *a6;
        if (__s[0])
        {
          v20 = 1;
          do
          {
            if (v19 >= v16)
              break;
            *(_BYTE *)(a4 + v19) = v18;
            v19 = *a6 + 1;
            *a6 = v19;
            v18 = __s[v20++];
          }
          while (v18);
        }
        UTF8Char = 0;
        *(_BYTE *)(a4 + v19) = 0;
      }
      v14 = (unsigned __int16)++v15;
      if ((unsigned __int16)v15 >= a3)
      {
        LOBYTE(a8) = v26;
        v10 = a5;
        if (v26)
          goto LABEL_15;
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (a8)
    {
      v15 = 0;
      UTF8Char = 0;
LABEL_15:
      __s[0] = a8;
      __s[1] = 0;
    }
    else
    {
      cstdlib_strcpy(__s, " ");
      v15 = 0;
      UTF8Char = 0;
    }
LABEL_17:
    if (a7 > (unsigned __int16)v15)
    {
      v21 = __s[0];
      do
      {
        v22 = *a6;
        if (v21)
        {
          v23 = 1;
          LOBYTE(v24) = v21;
          do
          {
            if (v22 >= v10 - 1)
              break;
            *(_BYTE *)(a4 + v22) = v24;
            v22 = *a6 + 1;
            *a6 = v22;
            v24 = __s[v23++];
          }
          while (v24);
        }
        *(_BYTE *)(a4 + v22) = 0;
        ++v15;
      }
      while (a7 > (unsigned __int16)v15);
      UTF8Char = 0;
    }
    *(_BYTE *)(a4 + *a6) = 0;
  }
  return UTF8Char;
}

uint64_t mosynt_ReplaceNonSpaceFields(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  result = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  while (*(_BYTE *)(a1 + HIDWORD(v25)) || *(_BYTE *)(a2 + v25))
  {
    v22 = HIDWORD(v25);
    result = mosynt_GetSpace(1, a1, (unsigned int *)&v25 + 1, &v24);
    if ((result & 0x80000000) == 0)
    {
      result = mosynt_GetSpace(1, a2, (unsigned int *)&v25, &v23);
      if ((result & 0x80000000) == 0)
      {
        result = mosynt_TransferStretchedStringSection(a1, &v22, v24, a3, a4, (unsigned int *)&v24 + 1, v24, 32);
        if ((result & 0x80000000) == 0)
        {
          v22 = HIDWORD(v25);
          result = mosynt_GetField(a1, (unsigned int *)&v25 + 1, &v24);
          if ((result & 0x80000000) == 0)
          {
            v13 = v25;
            v21 = v25;
            result = mosynt_GetField(a2, (unsigned int *)&v25, &v23);
            if ((result & 0x80000000) == 0)
            {
              if (a6 && *(_BYTE *)(a2 + v13) == 123)
              {
                v14 = v24;
                v15 = &v22;
                v16 = a1;
                v17 = a3;
                v18 = a4;
                v19 = v24;
              }
              else
              {
                v14 = v23;
                v19 = v23 <= v24 ? v24 : v23;
                v15 = (unsigned int *)&v21;
                v16 = a2;
                v17 = a3;
                v18 = a4;
              }
              result = mosynt_TransferStretchedStringSection(v16, v15, v14, v17, v18, (unsigned int *)&v24 + 1, v19, a5);
              if ((result & 0x80000000) == 0)
                continue;
            }
          }
        }
      }
    }
    return result;
  }
  v20 = HIDWORD(v24);
  if (HIDWORD(v24) >= a4)
    v20 = a4 - 1;
  *(_BYTE *)(a3 + v20) = 0;
  return result;
}

uint64_t mosynt_AlignFieldsWithRef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  result = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  while (*(_BYTE *)(a1 + HIDWORD(v15)) || *(_BYTE *)(a2 + v14))
  {
    result = mosynt_GetSpace(1, a1, (unsigned int *)&v15 + 1, &v15);
    if ((result & 0x80000000) == 0)
    {
      v12 = v14;
      result = mosynt_GetSpace(1, a2, (unsigned int *)&v14, (_DWORD *)&v14 + 1);
      if ((result & 0x80000000) == 0)
      {
        result = mosynt_TransferStretchedStringSection(a2, &v12, HIDWORD(v14), a3, a4, &v13, v15, 32);
        if ((result & 0x80000000) == 0)
        {
          result = mosynt_GetField(a1, (unsigned int *)&v15 + 1, &v15);
          if ((result & 0x80000000) == 0)
          {
            v12 = v14;
            result = mosynt_GetField(a2, (unsigned int *)&v14, (_DWORD *)&v14 + 1);
            if ((result & 0x80000000) == 0)
            {
              result = mosynt_TransferStretchedStringSection(a2, &v12, HIDWORD(v14), a3, a4, &v13, v15, a5);
              if ((result & 0x80000000) == 0)
                continue;
            }
          }
        }
      }
    }
    return result;
  }
  v11 = v13;
  if (v13 >= a4)
    v11 = a4 - 1;
  *(_BYTE *)(a3 + v11) = 0;
  return result;
}

uint64_t mosynt_TraceString(uint64_t a1, char *__s, unsigned int a3)
{
  unsigned int v5;
  int v7;

  if (a1)
  {
    v5 = *(_DWORD *)(a1 + 1024);
    if (v5)
    {
      v5 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5 < a3)
    return 0;
  v7 = cstdlib_strlen(__s);
  return mosyntbase_WString(a1, (unsigned __int8 *)__s, v7);
}

uint64_t mosynt_TraceInt(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 1024);
    if (v3)
    {
      v3 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v3 = 0;
  }
  if (v3 >= a3)
    return mosyntbase_WInt(a1, a2, 0);
  else
    return 0;
}

uint64_t mosynt_NumPOSListToPOSList(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4, int a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;

  v16 = 0;
  if (*a3)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      while (1)
      {
        v12 = a3[v10];
        if (!a3[v10] || v12 == 92)
          break;
        v11 = (char)v12 + 10 * v11 - 48;
        ++v10;
      }
      result = mosyntkbsymtab_AppDecomprConsToString(a1, a2, v11, a4, a5, &v16);
      if ((result & 0x80000000) != 0)
        break;
      v14 = v10;
      v15 = v16;
      if (v16 < a5)
      {
        *(_BYTE *)(a4 + v16) = a3[v10];
        v16 = v15 + 1;
        if (a3[v10])
          v14 = v10 + 1;
        else
          v14 = v10;
        v10 = v14;
      }
      v11 = 0;
      if (!a3[v14])
        goto LABEL_15;
    }
  }
  else
  {
    result = 0;
LABEL_15:
    *(_BYTE *)(a4 + (a5 - 1)) = 0;
  }
  return result;
}

uint64_t mosynt_ResetMosyntWS(int a1, char *__dst)
{
  if (__dst)
  {
    cstdlib_strcpy(__dst, "");
    cstdlib_strcpy(__dst + 5000, "");
    cstdlib_strcpy(__dst + 15000, "");
    cstdlib_strcpy(__dst + 20000, "");
    *(_OWORD *)(__dst + 25000) = 0u;
  }
  return 0;
}

uint64_t mosynt_StartWordAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a8)
    return 0;
  *(_QWORD *)a8 = a2;
  *(_WORD *)(a8 + 8) = 1;
  *(_QWORD *)(a8 + 16) = a3;
  *(_WORD *)(a8 + 96) = 1;
  *(_QWORD *)(a8 + 104) = a4;
  *(_QWORD *)(a8 + 184) = a5;
  *(_QWORD *)(a8 + 192) = a6;
  result = fst_getFSTSeq(a7, 0, (_QWORD *)(a8 + 200), (_DWORD *)(a8 + 208));
  if ((result & 0x80000000) == 0)
  {
    result = fst_getFSTSeq(a7, 1, (_QWORD *)(a8 + 216), (_DWORD *)(a8 + 224));
    if ((result & 0x80000000) == 0)
    {
      *(_BYTE *)(a8 + 1248) = 0;
      *(_QWORD *)(a8 + 232) = 0;
      *(_QWORD *)(a8 + 240) = 0;
      *(_BYTE *)(a8 + 248) = 0;
    }
  }
  return result;
}

uint64_t mosynt_WordAnalysis(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, char a6, _DWORD *a7, int *a8)
{
  int v16;
  uint64_t result;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int *v40;
  char v41[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  BOOL v47;
  char __s[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54[5000];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_7;
  if (!*(_DWORD *)(a1 + 1024))
  {
    *(_WORD *)(a1 + 1028) = 0;
    *(_DWORD *)(a1 + 1024) = 1;
    *(_DWORD *)(a1 + 1032) = 20;
LABEL_7:
    v16 = 0;
    *a7 = 0;
    goto LABEL_8;
  }
  v16 = *(unsigned __int16 *)(a1 + 1028);
  *a7 = 0;
  if (!v16)
  {
LABEL_8:
    v18 = 1;
    goto LABEL_9;
  }
  result = mosyntbase_WriteMessage(a1, "\n\n[WANA] analyzing word '%s'\n", 0, a3, 0, "", 0, "", 0);
  if ((result & 0x80000000) != 0)
    return result;
  v18 = 0;
LABEL_9:
  v47 = 0;
  result = utf8_getUTF8Char((uint64_t)a3, 0, __s);
  if ((result & 0x80000000) != 0)
    return result;
  v40 = a8;
  if (__s[0])
  {
    v35 = v16;
    v38 = a4;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = cstdlib_strlen(__s);
      result = utf8_ToLower(__s, 0, (uint64_t)v41);
      if ((result & 0x80000000) != 0)
        return result;
      v22 = cstdlib_strlen(v41);
      if (v22 && v19 + v22 + 1 <= 0x1388)
      {
        v23 = v22;
        v24 = v41;
        v25 = v19;
        do
        {
          v26 = *v24++;
          v19 = v25 + 1;
          v54[v25++] = v26;
          --v23;
        }
        while (v23);
      }
      v20 += v21;
      utf8_getUTF8Char((uint64_t)a3, v20, __s);
      if (!__s[0])
      {
        v54[v19] = 0;
        a4 = v38;
        v16 = v35;
        if ((v18 & 1) == 0)
          goto LABEL_21;
        goto LABEL_22;
      }
    }
  }
  v54[0] = 0;
  if ((v18 & 1) == 0)
  {
LABEL_21:
    result = mosyntbase_WriteMessage(a1, "[WANA] after lowercase conversion '%s'\n", 0, (unsigned __int8 *)v54, 0, "", 0, "", 0);
    if ((result & 0x80000000) != 0)
      return result;
  }
LABEL_22:
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  *(_OWORD *)__s = 0u;
  result = hlp_CastFSTSeq(*(_QWORD *)(a2 + 200), *(_DWORD *)(a2 + 208), (int *)__s);
  if ((result & 0x80000000) == 0)
  {
    v39 = *(_QWORD *)a2;
    v27 = *(unsigned __int16 *)(a2 + 8);
    v37 = *(unsigned __int16 *)(a2 + 96);
    v28 = *(_QWORD *)(a2 + 192);
    v36 = *(_QWORD *)(a2 + 184);
    v29 = cstdlib_strlen(v54);
    v43 = v50;
    v44 = v51;
    v45 = v52;
    v46 = v53;
    *(_OWORD *)v41 = *(_OWORD *)__s;
    v42 = v49;
    result = mosyntwordana_ParseWord(a1, v16, v39, v27, (char *)(a2 + 16), v37, (char *)(a2 + 104), v36, (uint64_t)v41, v28, 0, (uint64_t)v54, v29, a4, a5, a6, &v47, (_QWORD *)(a2 + 232));
    v30 = v47;
    *a7 = v47;
    if ((result & 0x80000000) == 0)
    {
      *v40 = 0;
      v31 = *(_QWORD *)(a2 + 232);
      if (v30)
      {
        *v40 = -1;
        v32 = *(uint64_t **)(v31 + 32);
        if (!v32)
          goto LABEL_32;
        v33 = -1;
        do
        {
          v34 = *((_DWORD *)v32 + 3);
          if (v33 < 0 || v34 < v33)
          {
            *v40 = v34;
            v33 = v34;
          }
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      if (!v31)
      {
        *(_QWORD *)(a2 + 240) = 0;
        return result;
      }
LABEL_32:
      *(_QWORD *)(a2 + 240) = *(_QWORD *)(v31 + 32);
    }
  }
  return result;
}

uint64_t hlp_CastFSTSeq(uint64_t a1, int a2, int *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (a2 < 1)
  {
    result = 0;
LABEL_7:
    *a3 = a2;
  }
  else
  {
    v6 = 0;
    v8 = 0;
    while (1)
    {
      result = fst_getFST(a1, v6, &v8);
      if ((result & 0x80000000) != 0)
        break;
      *(_QWORD *)&a3[2 * v6++ + 2] = v8;
      if (a2 == v6)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t mosynt_GetReading(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char *a5, int a6, char *a7, int a8, _DWORD *a9)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  char *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  char *v31;
  char v32;
  __int128 v33;
  _OWORD __b[5];
  uint64_t v36;
  int v37;
  char __dst[10];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  memset(__b, 0, sizeof(__b));
  cstdlib_memset(__b, 0, 0x58uLL);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      v16 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      v16 = 0;
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v16 = 0;
  }
  *a4 = 0;
  cstdlib_strcpy(a5, "");
  cstdlib_strcpy(a7, "");
  *a9 = 0;
  v17 = *(_QWORD *)(a2 + 240);
  if (!v17)
    return 0;
  *a4 = 1;
  v37 = 0;
  v18 = a6 - 1;
  result = mosyntkbsymtab_AppDecomprConsToString(a1, *(uint64_t **)a2, *(_DWORD *)(v17 + 8), (uint64_t)a5, v18, &v37);
  if ((result & 0x80000000) == 0)
  {
    a5[v18] = 0;
    result = hlp_CastFSTSeq(*(_QWORD *)(a2 + 216), *(_DWORD *)(a2 + 224), (int *)__b);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntwordpho_ReadingToPhonString(a1, v16, *(uint64_t **)a2, v17, a7, a8);
      if ((result & 0x80000000) == 0)
      {
        if (cstdlib_strcmp((const char *)(a2 + 248), a7))
        {
          cstdlib_strcpy((char *)(a2 + 248), a7);
          result = mosyntwordpho_TreatSingleReadingString(a1, v16, *(_QWORD *)a2, (uint64_t)__b, v17, (unsigned __int8 *)a7, a8);
          if ((result & 0x80000000) != 0)
            return result;
          a7[a8 - 1] = 0;
          v20 = (char *)(a2 + 1248);
          v21 = a7;
        }
        else
        {
          v21 = (const char *)(a2 + 1248);
          v20 = a7;
        }
        cstdlib_strcpy(v20, v21);
        result = mosyntwordpho_TraceReading(a1, v16, *(uint64_t **)a2, v17, (unsigned __int8 *)a7, a8);
        if ((result & 0x80000000) == 0)
        {
          *a9 = *(_DWORD *)(v17 + 12);
          if (a3)
          {
            cstdlib_strcpy(__dst, "◄");
            v22 = cstdlib_strlen(__dst);
            v23 = cstdlib_strlen(a7);
            v24 = v23 + 2 * v22;
            LODWORD(v25) = ~(2 * v22) + a8;
            if (v24 <= a8 - 1)
              v25 = v23;
            else
              v25 = v25;
            if ((_DWORD)v25)
            {
              v26 = v25 - 1;
              do
                a7[v22 + v26] = a7[v26];
              while ((unint64_t)v26--);
            }
            if (v22)
            {
              v28 = v22;
              if (v24 >= a8 - 1)
                v24 = a8 - 1;
              v29 = v24 - v22;
              v30 = __dst;
              v31 = a7;
              do
              {
                v32 = *v30++;
                *v31++ = v32;
                a7[v29++] = v32;
                --v28;
              }
              while (v28);
            }
            result = 0;
            a7[2 * v22 + v25] = 0;
          }
          if (!(_DWORD)v16
            || (HIDWORD(v33) = 0,
                LODWORD(v33) = 0,
                *(_QWORD *)((char *)&v33 + 4) = *(unsigned int *)(v17 + 12),
                result = mosyntbase_WriteMessage(a1, "\n[WANA] reading: %s cost %d  %s\n\n", 0, (unsigned __int8 *)a5, 0, (unsigned __int8 *)a7, 0, "", v33), (result & 0x80000000) == 0)&& (result = mosyntdata_WriteReadingStruct(a1, *(uint64_t **)a2, 1, v17, 4), (result & 0x80000000) == 0))
          {
            *(_QWORD *)(a2 + 240) = **(_QWORD **)(a2 + 240);
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosynt_SkipToFirstOptimalReading(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;

  v2 = *(uint64_t **)(a2 + 240);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 3);
    v4 = *(uint64_t **)(a2 + 240);
    do
    {
      if (*((_DWORD *)v4 + 3) < v3)
      {
        v2 = v4;
        v3 = *((_DWORD *)v4 + 3);
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    *(_QWORD *)(a2 + 240) = v2;
  }
  return 0;
}

uint64_t mosynt_FinishWordAnalysis(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      if (*(_WORD *)(a1 + 1028))
      {
        result = mosyntbase_WriteMessage(a1, "\n\n", 0, "", 0, "", 0, "", 0);
        if (!a2 || (result & 0x80000000) != 0)
          return result;
        goto LABEL_9;
      }
    }
    else
    {
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  result = 0;
  if (!a2)
    return result;
LABEL_9:
  v5 = *(_QWORD **)(a2 + 232);
  if (v5)
  {
    while (1)
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
      result = mosyntdata_DisposeItem(a1, (uint64_t *)&v6);
      if ((result & 0x80000000) != 0)
        break;
      if (!v5)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    *(_BYTE *)(a2 + 1248) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_BYTE *)(a2 + 248) = 0;
  }
  return result;
}

uint64_t mosynt_LHPlusMapping(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, char *__dst, unsigned int a6)
{
  int v12;
  unsigned int v13;
  uint64_t result;
  const char *v15;
  _OWORD v16[5];
  uint64_t v17;
  int v18;
  uint64_t v19;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      v12 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      v12 = 0;
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v12 = 0;
  }
  v19 = 0;
  v18 = 0;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  cstdlib_strcpy(__dst, "");
  if (cstdlib_strstr(a4, "[SVOX]") == a4)
  {
    cstdlib_strncpy(__dst, a4, a6 - 1);
    v15 = "[SVOX]";
LABEL_14:
    mosynt_RemoveInitSubstr(__dst, v15);
    if (!v12)
      return 0;
    result = mosyntbase_WriteMessage(a1, "[WANA] before LHPlus mapping: %s\n", 0, (unsigned __int8 *)a4, 0, "", 0, "", 0);
    if ((result & 0x80000000) == 0)
      return mosyntbase_WriteMessage(a1, "[WANA] after LHPlus mapping: %s\n\n", 0, (unsigned __int8 *)__dst, 0, "", 0, "", 0);
    return result;
  }
  v13 = cstdlib_strlen("{VOC}");
  if (v13 < a6)
  {
    cstdlib_strcpy(__dst, "{VOC}");
    cstdlib_strncat(__dst, a4, ~v13 + a6);
  }
  result = fst_getFSTSeq(a3, 1, &v19, &v18);
  if ((result & 0x80000000) == 0)
  {
    result = hlp_CastFSTSeq(v19, v18, (int *)v16);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntwordpho_LHPlusMapping(a1, v12, a2, (int *)v16, (unsigned __int8 *)__dst, a6);
      if ((result & 0x80000000) == 0)
      {
        __dst[a6 - 1] = 0;
        v15 = "{VOC}";
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t mosynt_StartSentenceAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  int v9;
  uint64_t result;
  int v11;
  int v12;
  char *v13;

  if (!a1)
  {
    v9 = 0;
    if (a7)
      goto LABEL_6;
    return 0;
  }
  if (!*(_DWORD *)(a1 + 1024))
  {
    v9 = 0;
    *(_WORD *)(a1 + 1028) = 0;
    *(_DWORD *)(a1 + 1024) = 1;
    *(_DWORD *)(a1 + 1032) = 20;
    if (a7)
      goto LABEL_6;
    return 0;
  }
  v9 = *(unsigned __int16 *)(a1 + 1028);
  if (!a7)
    return 0;
LABEL_6:
  v13 = 0;
  *a7 = a5;
  a7[1] = a6;
  result = com_mosynt_GetCfgParamVal(a2, a3, a4, (uint64_t)"mosynt_maxvertexedges", "-1", &v13);
  if ((result & 0x80000000) == 0)
  {
    v11 = cstdlib_atoi((unsigned __int8 *)v13);
    if (v11 >= 0)
      v12 = v11;
    else
      v12 = 200;
    result = mosyntsentana_CreateAndInitParseDesc(a1, v9, *a7, a7[1], v12, a7 + 2);
    if ((result & 0x80000000) == 0)
      a7[3] = 0;
  }
  return result;
}

void mosynt_InsertTerminals(uint64_t a1, uint64_t a2, signed int a3, unsigned int a4, char *a5, unsigned int a6, int a7, uint64_t a8, unsigned __int8 *a9)
{
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char __dst[5000];
  unsigned __int8 v29[5000];
  unsigned __int8 v30[5000];
  __int16 v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      v13 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      v13 = 0;
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v31, 0, sizeof(v31));
  v26 = 0;
  v27 = 0;
  v25 = 0;
  if (*a5)
    v14 = a5;
  else
    v14 = "MosyntDummyConsFeat";
  v15 = cstdlib_strlen(v14);
  if ((mosyntkbsymtab_GetConsFeatFromString(a1, *(uint64_t **)a2, 1, (unsigned __int8 *)v14, v15, (signed int *)&v26, (_DWORD *)&v26 + 1, v31) & 0x80000000) == 0)
  {
    while (1)
    {
      if (SHIDWORD(v26) < 1)
      {
        if ((mosyntbase_WriteMessage(a1, "[SANA] error converting cons/feat \"%s\"\n", 0, (unsigned __int8 *)v14, 0, a9, 0, "", 0) & 0x80000000) != 0)return;
      }
      else
      {
        mosyntdata_NewTermInfo(a1, 0, &v27);
        if (v16 < 0)
          return;
        v17 = v27;
        if (v27)
        {
          *(_DWORD *)(v27 + 8) = a7;
          *(_QWORD *)(v17 + 16) = a8;
          *(_DWORD *)(v17 + 24) = a3;
          *(_DWORD *)(v17 + 28) = a4 - 2;
          *(_QWORD *)(v17 + 32) = a9;
          *(_DWORD *)(v17 + 40) = 0;
          v18 = cstdlib_strlen((const char *)a9);
          LODWORD(v17) = v18 - 1;
          if (v18 > 4999)
            LODWORD(v17) = 4998;
          *(_DWORD *)(v27 + 44) = v17;
        }
        if (v13)
        {
          v19 = (int)v17 + 1;
          cstdlib_strncpy(__dst, (const char *)a9, (v17 + 1));
          __dst[v19] = 0;
          v25 = 0;
          if ((mosyntkbsymtab_AppConsFeatToString(a1, *(uint64_t **)a2, HIDWORD(v26), v31, (uint64_t)v30, 4999, &v25) & 0x80000000) != 0)
            return;
          cstdlib_strcpy((char *)v29, (const char *)v30);
          if ((mosyntkbsymtab_ConsFeatToComprConsFeatStr((uint64_t)v29, 5000) & 0x80000000) != 0)
            return;
          *((_QWORD *)&v20 + 1) = a6;
          LODWORD(v20) = 0;
          DWORD1(v20) = ~a3 + a4;
          if ((mosyntbase_WriteMessage(a1, "[SANA] reading from pos 0 to pos %d: %s cost %d  %s\n", 0, v29, 0, (unsigned __int8 *)__dst, 0, "", v20) & 0x80000000) != 0)return;
          if (v13 >= 2)
          {
            *((_QWORD *)&v21 + 1) = a4;
            LODWORD(v21) = 0;
            DWORD1(v21) = a3;
            if ((mosyntbase_WriteMessage(a1, "[SANA] terminal edge from %d to %d for %s \"%s\"\n", 0, v30, 0, (unsigned __int8 *)__dst, 0, "", v21) & 0x80000000) != 0)return;
          }
        }
        if ((mosyntsentana_InsertTerminalEdge(a1, *(int **)(a2 + 16), a3, a4, SHIDWORD(v26), (uint64_t)v31, v27, a6) & 0x80000000) != 0)
          return;
      }
      if (v14[(int)v26] != 92)
        break;
      LODWORD(v26) = v26 + 1;
      if ((mosyntkbsymtab_GetConsFeatFromString(a1, *(uint64_t **)a2, 1, (unsigned __int8 *)v14, v15, (signed int *)&v26, (_DWORD *)&v26 + 1, v31) & 0x80000000) != 0)return;
    }
    if (v13)
      mosyntbase_WLn(a1);
  }
}

void mosynt_ParseSentence(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      v4 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      v4 = 0;
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v4 = 0;
  }
  if ((mosyntsentana_DoParse(a1, *(_QWORD *)(a2 + 16)) & 0x80000000) == 0)
  {
    mosyntsentana_GetOptimalTree(a1, *(_QWORD *)(a2 + 16), (_QWORD *)(a2 + 24));
    if ((v5 & 0x80000000) == 0
      && v4
      && (mosyntbase_WLn(a1) & 0x80000000) == 0
      && (mosyntbase_WLn(a1) & 0x80000000) == 0)
    {
      mosyntsentana_DisplayTree(a1, *(_QWORD *)(a2 + 16), *(uint64_t **)(a2 + 24));
    }
  }
}

uint64_t mosynt_GetTerminalInfoById(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char *__dst, int a6)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  *a4 = 0;
  cstdlib_strcpy(__dst, "");
  if (!a2)
    return 0;
  result = *(_QWORD *)(a2 + 24);
  if (!result)
    return result;
  v16 = 0;
  mosynt_GetTerminalNode(result, a3, &v16);
  v13 = v16;
  if (!v16)
    return 0;
  *a4 = 1;
  v15 = 0;
  v14 = a6 - 1;
  result = mosyntkbsymtab_AppConsFeatToString(a1, *(uint64_t **)a2, *(__int16 *)(v13 + 16), (__int16 *)(v13 + 24), (uint64_t)__dst, v14, &v15);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    __dst[v14] = 0;
  }
  return result;
}

uint64_t mosynt_GetTerminalNode(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;

  *a3 = 0;
  if (*(_BYTE *)(result + 60))
  {
    v5 = *(_QWORD *)(result + 64);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 8) == (_DWORD)a2)
        *a3 = result;
    }
  }
  else
  {
    v6 = *(_QWORD **)(result + 8);
    if (v6)
    {
      do
      {
        result = mosynt_GetTerminalNode(v6, a2, a3);
        v6 = (_QWORD *)*v6;
        if (*a3)
          v7 = 1;
        else
          v7 = v6 == 0;
      }
      while (!v7);
    }
  }
  return result;
}

uint64_t mosynt_SyntTreeToString(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  int v9;

  cstdlib_strcpy(__dst, "");
  if (!a2)
    return 0;
  v9 = 0;
  return mosynt_SyntTreeToString1(a1, *(uint64_t **)a2, *(_QWORD *)(a2 + 24), (uint64_t)__dst, a4, &v9);
}

uint64_t mosynt_SyntTreeToString1(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  char v26;
  int v27;
  char v28[19];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v27 = *a6;
  v12 = a5 - 1;
  result = mosyntkbsymtab_AppConsFeatToString(a1, a2, *(__int16 *)(a3 + 16), (__int16 *)(a3 + 24), a4, (int)a5 - 1, &v27);
  if ((result & 0x80000000) != 0)
    return result;
  *(_BYTE *)(a4 + v12) = 0;
  v14 = (unsigned __int16)v27;
  *a6 = (unsigned __int16)v27;
  v15 = (_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a3 + 8))
  {
    if (v14 < v12)
    {
      *(_BYTE *)(a4 + v14) = 91;
      LODWORD(v14) = *a6 + 1;
      *a6 = v14;
    }
    *(_BYTE *)(a4 + v14) = 0;
    v16 = (_QWORD *)(a3 + 8);
    while (1)
    {
      v16 = (_QWORD *)*v16;
      if (!v16)
        break;
      if (v16 != (_QWORD *)*v15)
      {
        v17 = *a6;
        if (v17 < v12)
        {
          *(_BYTE *)(a4 + v17) = 44;
          LODWORD(v17) = *a6 + 1;
          *a6 = v17;
        }
        *(_BYTE *)(a4 + v17) = 0;
      }
      result = mosynt_SyntTreeToString1(a1, a2, v16, a4, a5, a6);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v25 = *a6;
    if (*a6 >= v12)
      goto LABEL_32;
    v26 = 93;
  }
  else
  {
    if (v14 < v12)
    {
      *(_BYTE *)(a4 + v14) = 60;
      LODWORD(v14) = *a6 + 1;
      *a6 = v14;
    }
    *(_BYTE *)(a4 + v14) = 0;
    LH_itoa(*(_DWORD *)(a3 + 52), v28, 0xAu);
    LOBYTE(v18) = v28[0];
    v19 = *a6;
    if (v28[0])
    {
      v20 = 1;
      do
      {
        if (v19 >= v12)
          break;
        *(_BYTE *)(a4 + v19) = v18;
        v19 = *a6 + 1;
        *a6 = v19;
        v18 = v28[v20++];
      }
      while (v18);
    }
    *(_BYTE *)(a4 + v19) = 0;
    v21 = *a6;
    if (v21 < v12)
    {
      *(_BYTE *)(a4 + v21) = 44;
      LODWORD(v21) = *a6 + 1;
      *a6 = v21;
    }
    *(_BYTE *)(a4 + v21) = 0;
    LH_itoa(*(_DWORD *)(a3 + 56), v28, 0xAu);
    LOBYTE(v22) = v28[0];
    v23 = *a6;
    if (v28[0])
    {
      v24 = 1;
      do
      {
        if (v23 >= v12)
          break;
        *(_BYTE *)(a4 + v23) = v22;
        v23 = *a6 + 1;
        *a6 = v23;
        v22 = v28[v24++];
      }
      while (v22);
    }
    *(_BYTE *)(a4 + v23) = 0;
    v25 = *a6;
    if (*a6 >= v12)
      goto LABEL_32;
    v26 = 62;
  }
  *(_BYTE *)(a4 + v25) = v26;
  v25 = *a6 + 1;
  *a6 = v25;
LABEL_32:
  result = 0;
  *(_BYTE *)(a4 + v25) = 0;
  return result;
}

uint64_t mosynt_FinishSentenceAnalysis(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (!*(_QWORD *)(a2 + 24))
    return mosyntsentana_DisposeParseDesc(a1, (uint64_t *)(a2 + 16));
  result = mosyntsentana_DisposeTree(a1, *(_QWORD *)(a2 + 16), a2 + 24);
  if ((result & 0x80000000) == 0)
    return mosyntsentana_DisposeParseDesc(a1, (uint64_t *)(a2 + 16));
  return result;
}

void mosynt_StringToSyntTree(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4)
{
  __int16 v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  v8 = cstdlib_strlen(__s);
  mosynt_StringToSyntTree1(a1, a2, (unsigned __int8 *)__s, (unsigned __int16)(v8 + 1), (signed int *)&v12 + 1, a4, (int *)&v12, &v11);
  if ((v9 & 0x80000000) == 0)
  {
    if (__s[SHIDWORD(v12)])
    {
      LODWORD(v10) = 0;
      HIDWORD(v10) = HIDWORD(v12);
      mosyntbase_WriteMessage(a1, "### syntax tree not fully parsed; last position is %d: %s\n",
        0,
        (unsigned __int8 *)__s,
        0,
        "",
        0,
        "",
        v10);
    }
  }
}

void mosynt_StringToSyntTree1(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, signed int *a5, uint64_t *a6, int *a7, _DWORD *a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  signed int *v22;
  int *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  if ((mosyntutils_SkipBlanksInString((uint64_t)a3, a4, a5) & 0x80000000) == 0)
  {
    if (a3[*a5])
    {
      v29 = 0;
      v31 = 0;
      v30 = 0uLL;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v25 = 0;
      if ((mosyntkbsymtab_GetConsFeatFromString(a1, a2, 1, a3, a4, a5, &v29, (__int16 *)&v30) & 0x80000000) == 0)
      {
        mosyntdata_NewSyntNode(a1, v29, &v30, a6);
        if ((v16 & 0x80000000) == 0)
        {
          v17 = *a6;
          *(_BYTE *)(v17 + 60) = 0;
          *(_QWORD *)v17 = 0;
          *(_QWORD *)(*a6 + 8) = 0;
          if (a3[*a5] == 91)
          {
            if ((mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x5Bu) & 0x80000000) == 0
              && (mosyntdata_StartNodeList(a1, &v28, &v27) & 0x80000000) == 0)
            {
              v18 = a1;
              v19 = a2;
              v20 = a3;
              v21 = a4;
              v22 = a5;
              v23 = a7;
              while ((mosynt_StringToSyntTree1(v18, v19, v20, v21, v22, &v26, v23, a8) & 0x80000000) == 0
                   && (mosyntdata_AppendNode(a1, &v28, &v27, 1, v26) & 0x80000000) == 0)
              {
                if (a3[*a5] != 44)
                {
                  if ((mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x5Du) & 0x80000000) == 0)
                  {
                    *(_QWORD *)(*a6 + 8) = v28;
                    v24 = *a6;
                    *(_DWORD *)(v24 + 52) = *a7;
                    *(_DWORD *)(v24 + 56) = *a8;
                  }
                  return;
                }
                if ((mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x2Cu) & 0x80000000) != 0)
                  return;
                v23 = &v25;
                v18 = a1;
                v19 = a2;
                v20 = a3;
                v21 = a4;
                v22 = a5;
              }
            }
          }
          else
          {
            *(_BYTE *)(*a6 + 60) = 1;
            if ((mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x3Cu) & 0x80000000) == 0
              && (mosyntutils_GetCardFromString(a1, a3, a4, a5, a7) & 0x80000000) == 0)
            {
              *(_DWORD *)(*a6 + 52) = *a7;
              if ((mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x2Cu) & 0x80000000) == 0
                && (mosyntutils_GetCardFromString(a1, a3, a4, a5, a8) & 0x80000000) == 0)
              {
                *(_DWORD *)(*a6 + 56) = *a8;
                mosyntutils_CheckSkipCharInString(a1, a3, a4, a5, 0x3Eu);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t mosynt_StartAccentPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t result;
  char *v16;
  char *__s;

  if (!a7)
    return 0;
  *(_QWORD *)a7 = a5;
  if (mosyntkbaccphr_AccPhrType(a6))
    v14 = a6;
  else
    v14 = 0;
  __s = 0;
  *(_QWORD *)(a7 + 8) = v14;
  result = com_mosynt_GetCfgParamVal(a2, a3, a4, (uint64_t)"mosynt_phrpar", "1", &__s);
  if ((result & 0x80000000) == 0)
  {
    *(_WORD *)(a7 + 16) = cstdlib_atoi((unsigned __int8 *)__s);
    result = com_mosynt_GetCfgParamVal(a2, a3, a4, (uint64_t)"mosynt_accphrdefdomain", "DEFAULT", &__s);
    if ((result & 0x80000000) == 0)
    {
      v16 = __s;
      cstdlib_strlen(__s);
      *(_DWORD *)(a7 + 20) = mosyntkbsymtab_KnownAtomId(a1, a5, (uint64_t)v16);
      return mosyntdata_CreateAndInitSentTermData(a1, (uint64_t *)(a7 + 24));
    }
  }
  return result;
}

double mosynt_InsertAccPhrTermWord(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4, int a5, char *__s)
{
  uint64_t *v12;
  int v13;
  double result;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v12 = *(uint64_t **)a2;
  v13 = cstdlib_strlen(__s);
  if ((mosyntdata_StringToLexPhonList(a1, v12, (unsigned __int8 *)__s, v13, &v16, &v15) & 0x80000000) == 0)
    return mosyntdata_InsertSentTermWord(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, v16);
  return result;
}

BOOL mosynt_IsPunctChar(uint64_t a1, uint64_t a2, int a3)
{
  return a2 && mosyntknowl_OrthPunctType(a1, a3) != 0;
}

void mosynt_InsertAccPhrPunct(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v7;

  v7 = mosyntknowl_OrthPunctType(a1, a4);
  if (v7)
    mosyntdata_InsertSentTermPunct(a1, *(_QWORD *)(a2 + 24), a3, v7);
}

void mosynt_DoAccentPhrasing(uint64_t a1, uint64_t a2, char *a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1024))
    {
      v5 = *(unsigned __int16 *)(a1 + 1028);
    }
    else
    {
      v5 = 0;
      *(_WORD *)(a1 + 1028) = 0;
      *(_DWORD *)(a1 + 1024) = 1;
      *(_DWORD *)(a1 + 1032) = 20;
    }
  }
  else
  {
    v5 = 0;
  }
  mosynt_StringToSyntTree(a1, *(uint64_t **)a2, a3, &v8);
  if ((v6 & 0x80000000) == 0
    && (mosyntaccphr_TreatSyntTree(a1, v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int16 *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 24), v8) & 0x80000000) == 0&& (!v5|| (mosyntdata_GenPhonoRepr(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 24), &v7) & 0x80000000) == 0&& (mosyntbase_WLn(a1) & 0x80000000) == 0&& (mosyntbase_WString(a1, "after acc/phr: ", 0) & 0x80000000) == 0&& (mosyntdata_WritePhonList(a1, *(uint64_t **)a2, v7) & 0x80000000) == 0&& (mosyntbase_WLn(a1) & 0x80000000) == 0&& (mosyntbase_WLn(a1) & 0x80000000) == 0&& (mosyntdata_DisposePhonEleList(a1, &v7) & 0x80000000) == 0))
  {
    if (v8)
      mosyntdata_DisposeSyntTree(a1, &v8);
  }
}

uint64_t mosynt_GetWordProminence(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  *a4 = 0;
  if (a2
    && (v5 = *(_QWORD *)(a2 + 24)) != 0
    && (v6 = mosyntdata_SentTermWordData(a1, v5, a3)) != 0
    && (v7 = *(_DWORD *)(v6 + 16), (v7 & 0xFFFC) == 0))
  {
    v8 = 0x1000200020000uLL >> (16 * v7);
  }
  else
  {
    LOWORD(v8) = 0;
  }
  *a4 = v8;
  return 0;
}

uint64_t mosynt_GetPhraseInfo(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4, char *__dst, int a6)
{
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;

  *a4 = 0;
  cstdlib_strcpy(__dst, "");
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    return 0;
  result = mosyntdata_SentTermBoundData(a1, v12, a3);
  if (!result)
    return result;
  v14 = *(_DWORD *)(result + 8);
  if (v14 < 0)
    return 0;
  *a4 = v14;
  v15 = mosyntkbaccphr_SimplifiedPhraseType(*(_DWORD *)(result + 12));
  result = mosyntkbaccphr_PhraseTypeToString(v15, (uint64_t)__dst, a6);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    __dst[a6 - 1] = 0;
  }
  return result;
}

uint64_t mosynt_FinishAccentPhrasing(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2 && (v3 = *(_QWORD *)(a2 + 24), v2 = (uint64_t *)(a2 + 24), v3))
    return mosyntdata_DisposeSentTermData(a1, v2);
  else
    return 0;
}

uint64_t mosynt_SentPhono(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, char *a5, char *a6, int a7)
{
  int v14;
  uint64_t result;
  char v16;
  int v17;
  size_t v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  __int16 v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unsigned __int16 v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[5];
  uint64_t v37;
  _OWORD v38[5];
  uint64_t v39;
  _OWORD v40[5];
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49[2];

  v48 = 0;
  v49[0] = 0;
  if (!a1)
  {
    v14 = 0;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 1024))
  {
    v14 = 0;
    *(_WORD *)(a1 + 1028) = 0;
    v16 = 1;
    *(_DWORD *)(a1 + 1024) = 1;
    *(_DWORD *)(a1 + 1032) = 20;
    goto LABEL_9;
  }
  v14 = *(unsigned __int16 *)(a1 + 1028);
  if (!*(_WORD *)(a1 + 1028))
  {
LABEL_7:
    v16 = 1;
    goto LABEL_9;
  }
  result = mosyntbase_WriteMessage(a1, "[SLPH] input string: %s\n", 0, a4, 0, "", 0, "", 0);
  if ((result & 0x80000000) != 0)
    return result;
  v16 = 0;
LABEL_9:
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v42 = 0;
  memset(v40, 0, sizeof(v40));
  v41 = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v17 = cstdlib_strlen((const char *)a4);
  v18 = cstdlib_strlen(a5);
  result = mosyntdata_StringToPhonoPhonList(a1, a2, 1, a4, v17, a5, v18, v49);
  if ((result & 0x80000000) == 0)
  {
    if ((v16 & 1) != 0
      || (result = mosyntbase_WString(a1, "[SLPH] input phono list: ", 0), (result & 0x80000000) == 0)
      && (result = mosyntdata_WritePhonList(a1, a2, v49[0]), (result & 0x80000000) == 0)
      && (result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
    {
      result = fst_getFSTSeq(a3, 2, &v47, (_DWORD *)&v44 + 1);
      if ((result & 0x80000000) == 0)
      {
        result = hlp_CastFSTSeq(v47, SHIDWORD(v44), (int *)v40);
        if ((result & 0x80000000) == 0)
        {
          result = fst_getFSTSeq(a3, 3, &v46, &v44);
          if ((result & 0x80000000) == 0)
          {
            result = hlp_CastFSTSeq(v46, v44, (int *)v38);
            if ((result & 0x80000000) == 0)
            {
              result = fst_getFSTSeq(a3, 4, &v45, &v43);
              if ((result & 0x80000000) == 0)
              {
                result = hlp_CastFSTSeq(v45, v43, (int *)v36);
                if ((result & 0x80000000) == 0)
                {
                  v19 = v49[0];
                  if (v49[0])
                  {
                    v20 = 0;
                    v21 = v49[0];
                    do
                    {
                      *((_WORD *)v21 + 4) = v20++;
                      v21 = (_QWORD *)*v21;
                    }
                    while (v21);
                  }
                  result = mosyntsentpho_TreatSentPho(a1, v14, (uint64_t)a2, (int *)v40, (int *)v38, (int *)v36, v19, &v48);
                  if ((result & 0x80000000) == 0)
                  {
                    v22 = v48;
                    v23 = v49[0];
                    v42 = v48;
                    if (v49[0])
                    {
                      while (1)
                      {
                        if (!v22)
                          goto LABEL_36;
                        v24 = *((unsigned __int16 *)v22 + 4);
                        if (v24 == 0xFFFF || *((__int16 *)v23 + 4) > (__int16)v24)
                        {
                          v22 = (uint64_t *)*v22;
                          v42 = v22;
                        }
                        else
                        {
                          if (*((_BYTE *)v23 + 20))
                            v25 = v24 == *((unsigned __int16 *)v23 + 4);
                          else
                            v25 = 0;
                          if (v25 && *((_BYTE *)v22 + 20) && *((_DWORD *)v23 + 6) >= 2u && *((_DWORD *)v22 + 6) <= 1u)
                          {
                            v26 = mosyntkbsymtab_KnownPhonId(a1, a2, (uint64_t)"*");
                            v27 = v42;
                            *((_DWORD *)v42 + 6) = 2;
                            v28 = *v27;
                            *v27 = 0;
                            result = mosyntdata_AddPhonEle(a1, &v48, (uint64_t *)&v42, 1, v26);
                            if ((result & 0x80000000) != 0)
                              return result;
                            *v42 = v28;
                          }
LABEL_36:
                          v23 = (_QWORD *)*v23;
                          if (!v23)
                            break;
                          v22 = v42;
                        }
                      }
                    }
                    if ((v16 & 1) != 0
                      || (result = mosyntbase_WString(a1, "[SLPH] output phono list: ", 0), (result & 0x80000000) == 0)
                      && (result = mosyntdata_WritePhonList(a1, a2, v48), (result & 0x80000000) == 0)
                      && (result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
                    {
                      result = mosyntdata_PhonListToString(a1, a2, 1, v48, a6, a7);
                      if ((result & 0x80000000) == 0)
                      {
                        a6[a7 - 1] = 0;
                        v29 = *a6;
                        if (*a6)
                        {
                          v30 = 0;
                          v31 = a6;
                          do
                          {
                            if (v30 && v29 == 42 && (v32 = v30 - 1, a6[v32] == 39))
                            {
                              a6[v32] = 42;
                              v33 = 39;
                            }
                            else
                            {
                              v34 = v30 - 2;
                              if (v30 < 2u)
                                goto LABEL_56;
                              if (v29 != 42)
                                goto LABEL_56;
                              v35 = v30 - 1;
                              if (a6[v35] != 50 || a6[v34] != 39)
                                goto LABEL_56;
                              a6[v34] = 42;
                              a6[v35] = 39;
                              v33 = 50;
                            }
                            *v31 = v33;
LABEL_56:
                            v31 = &a6[++v30];
                            v29 = *v31;
                          }
                          while (*v31);
                        }
                        if ((v16 & 1) != 0
                          || (result = mosyntbase_WriteMessage(a1, "[SLPH] output string: %s\n", 0, (unsigned __int8 *)a6, 0, "", 0, "", 0), (result & 0x80000000) == 0))
                        {
                          result = mosyntdata_DisposePhonEleList(a1, v49);
                          if ((result & 0x80000000) == 0)
                            return mosyntdata_DisposePhonEleList(a1, &v48);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sgram_CheckIfExists(_WORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  _OWORD v18[16];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v17 = 0;
  memset(v18, 0, sizeof(v18));
  *a3 = 0;
  inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = kbaux_BuildBrokerString(v17, "sgram", (char *)v18, 0x100uLL);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = sgram_OpenRiffForReading(a1, a2, (const char *)v18, (uint64_t *)&v16);
  v14 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    *a3 = 1;
    return sgram_CloseRiff(&v16, v7, v8, v9, v10, v11, v12, v13);
  }
  if ((v7 & 0x1FFF) == 0xD || (v7 & 0x1FFF) == 3)
    return 0;
  return v14;
}

uint64_t sgram_LoadData(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  _OWORD v25[16];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v24 = 0;
  memset(v25, 0, sizeof(v25));
  inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = 2371887111;
  if (a3)
  {
    v8 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 232);
    *a3 = v8;
    if (!v8)
      return 2371887114;
    inited = kbaux_BuildBrokerString(v24, "sgram", (char *)v25, 0x100uLL);
    if ((inited & 0x80000000) == 0)
    {
      inited = sgram_OpenRiffForReading(a1, a2, (const char *)v25, (uint64_t *)&v23);
      if ((inited & 0x80000000) == 0)
      {
        v15 = sgram_ReadFromRiff((uint64_t)v23, *a3, v9, v10, v11, v12, v13, v14);
        return sgram_CloseRiff(&v23, v15, v16, v17, v18, v19, v20, v21);
      }
    }
    return inited;
  }
  return v7;
}

uint64_t sgram_UnloadData(_WORD *a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = 2371887111;
  if (a3)
  {
    v15 = 0;
    inited = InitRsrcFunction(a1, a2, &v15);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else if (*a3)
    {
      v13 = v15;
      v3 = sgram_ReleaseData(*a3, v6, v7, v8, v9, v10, v11, v12);
      heap_Free(*(_QWORD **)(v13 + 8), *a3);
      *a3 = 0;
    }
  }
  return v3;
}

uint64_t sgram_GetStartCons(_DWORD *a1, _DWORD *a2)
{
  uint64_t result;

  result = 2371887111;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *a1;
    }
  }
  return result;
}

BOOL sgram_HasEmptyRules(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 40) != 0;
  return result;
}

BOOL sgram_HasSimpleFollowRel(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 192) != 0;
  return result;
}

uint64_t sgram_GetFirstRuleSameLast(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result;
  int v13;
  int i;

  result = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    v13 = *(_DWORD *)(a1 + 80);
    *(_QWORD *)a3 = a1;
    a3[2] = 0;
    for (i = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * (a2 % v13));
          ;
          i = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 72) + 4 * (int)a3[3] + 32))
    {
      a3[3] = 10 * i;
      getRuleHeadSubCons(a3, a4, a5, a6);
      if (!*a4)
        break;
      if (*a6)
      {
        if (*a6 == a2)
          return 0;
      }
      else
      {
        result = 0;
        if (!a2 || *a5 == a2)
          return result;
      }
    }
    return 0;
  }
  return result;
}

_DWORD *getRuleHeadSubCons(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = result[3];
  if (result[2] == 1)
  {
    if (v4 < *(_DWORD *)(*(_QWORD *)result + 32))
    {
      v5 = (uint64_t *)(*(_QWORD *)result + 48);
      goto LABEL_6;
    }
LABEL_8:
    v7 = 0;
    *a2 = 0;
    *a3 = 0;
    goto LABEL_9;
  }
  if (v4 < 0)
    goto LABEL_8;
  v5 = (uint64_t *)(*(_QWORD *)result + 72);
LABEL_6:
  v6 = *v5;
  if (!v6)
    goto LABEL_8;
  *a2 = *(_DWORD *)(v6 + 4 * (v4 + 1));
  *a3 = *(_DWORD *)(v6 + 4 * (int)result[3] + 8);
  v7 = *(_DWORD *)(v6 + 4 * (int)result[3] + 12);
LABEL_9:
  *a4 = v7;
  return result;
}

uint64_t sgram_GetNextRuleSameLast(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;

  result = 2371887111;
  if (a2 && a3 && a4 && a5)
  {
    while (1)
    {
      a2[3] = 10 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 72) + 4 * (int)a2[3] + 32);
      getRuleHeadSubCons(a2, a3, a4, a5);
      if (!*a3)
        break;
      if (*a5)
      {
        if (*a5 == a1)
          return 0;
      }
      else
      {
        result = 0;
        if (!a1 || *a4 == a1)
          return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sgram_GetFirstRuleSameFirst(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result;
  int v13;
  int i;

  result = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    v13 = *(_DWORD *)(a1 + 104);
    *(_QWORD *)a3 = a1;
    a3[2] = 0;
    for (i = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * (a2 % v13));
          ;
          i = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 72) + 4 * (int)a3[3] + 36))
    {
      a3[3] = 10 * i;
      getRuleHeadSubCons(a3, a4, a5, a6);
      if (!*a4 || *a5 != a2)
        break;
    }
    return 0;
  }
  return result;
}

uint64_t sgram_GetNextRuleSameFirst(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;

  result = 2371887111;
  if (a2 && a3 && a4 && a5)
  {
    do
    {
      a2[3] = 10 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 72) + 4 * (int)a2[3] + 36);
      getRuleHeadSubCons(a2, a3, a4, a5);
    }
    while (*a3 && *a5 != a1);
    return 0;
  }
  return result;
}

uint64_t sgram_GetFirstEmptyRule(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;

  result = 2371887111;
  if (a1 && a2 && a3 && a4)
  {
    if (a5)
    {
      *(_QWORD *)a2 = a1;
      *(_QWORD *)(a2 + 8) = 1;
      getRuleHeadSubCons((_DWORD *)a2, a3, a4, a5);
      return 0;
    }
  }
  return result;
}

uint64_t sgram_GetNextEmptyRule(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 2371887111;
  if (a1 && a2 && a3)
  {
    if (a4)
    {
      a1[3] += 8;
      getRuleHeadSubCons(a1, a2, a3, a4);
      return 0;
    }
  }
  return result;
}

uint64_t sgram_GetRuleFeatLists(uint64_t *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _WORD *v14;
  __int16 *v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  __int16 *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  __int16 *v29;
  __int16 v30;

  result = 2371887111;
  if (a1 && a2 && a3 && a4)
  {
    v6 = *((_DWORD *)a1 + 3);
    if (*((_DWORD *)a1 + 2) == 1)
    {
      v7 = *a1;
      if (v6 >= *(_DWORD *)(v7 + 32))
        goto LABEL_16;
      v8 = (uint64_t *)(v7 + 48);
    }
    else
    {
      if (v6 < 0)
        goto LABEL_16;
      v7 = *a1;
      v8 = (uint64_t *)(v7 + 72);
    }
    v9 = *v8;
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 4 * (v6 + 4));
      if ((v10 & 0x80000000) != 0)
      {
        LOWORD(v12) = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 24);
        v12 = *(__int16 *)(v11 + 2 * v10);
        if (v12 >= 1)
        {
          v13 = *(unsigned __int16 *)(v11 + 2 * v10);
          v14 = a2 + 1;
          v15 = (__int16 *)(v11 + 2 * v10 + 2);
          do
          {
            v16 = *v15++;
            *v14++ = v16;
            --v13;
          }
          while (v13);
        }
      }
      *a2 = v12;
      v18 = *(unsigned int *)(v9 + 4 * (v6 + 5));
      if ((v18 & 0x80000000) != 0)
      {
        LOWORD(v20) = 0;
      }
      else
      {
        v19 = *(_QWORD *)(v7 + 24);
        v20 = *(__int16 *)(v19 + 2 * v18);
        if (v20 >= 1)
        {
          v21 = *(unsigned __int16 *)(v19 + 2 * v18);
          v22 = a3 + 1;
          v23 = (__int16 *)(v19 + 2 * v18 + 2);
          do
          {
            v24 = *v23++;
            *v22++ = v24;
            --v21;
          }
          while (v21);
        }
      }
      *a3 = v20;
      v25 = *(unsigned int *)(v9 + 4 * (v6 + 6));
      if ((v25 & 0x80000000) != 0)
      {
        LOWORD(v17) = 0;
      }
      else
      {
        v26 = *(_QWORD *)(v7 + 24);
        v17 = *(__int16 *)(v26 + 2 * v25);
        if (v17 >= 1)
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * v25);
          v28 = a4 + 1;
          v29 = (__int16 *)(v26 + 2 * v25 + 2);
          do
          {
            v30 = *v29++;
            *v28++ = v30;
            --v27;
          }
          while (v27);
        }
      }
      goto LABEL_17;
    }
LABEL_16:
    LOWORD(v17) = 0;
    *a2 = 0;
    *a3 = 0;
LABEL_17:
    result = 0;
    *a4 = v17;
  }
  return result;
}

uint64_t sgram_GetRuleVisAndCost(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v3 = 2371887111;
  if (a1 && a2 && a3)
  {
    v4 = (int)a1[3];
    if (a1[2] == 1)
    {
      if ((int)v4 >= *(_DWORD *)(*(_QWORD *)a1 + 32))
        goto LABEL_11;
      v5 = (uint64_t *)(*(_QWORD *)a1 + 48);
    }
    else
    {
      if ((v4 & 0x80000000) != 0)
        goto LABEL_11;
      v5 = (uint64_t *)(*(_QWORD *)a1 + 72);
    }
    v6 = *v5;
    if (v6)
    {
      *a2 = *(_DWORD *)(v6 + 4 * v4) != 0;
      v7 = *(_DWORD *)(v6 + 4 * (int)a1[3] + 28);
LABEL_12:
      v3 = 0;
      *a3 = v7;
      return v3;
    }
LABEL_11:
    v7 = 0;
    *a2 = 0;
    goto LABEL_12;
  }
  return v3;
}

BOOL sgram_IsFollowerCons(_BOOL8 result, int a2, int a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  BOOL v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (result)
  {
    v3 = (unsigned int *)(*(_QWORD *)(result + 224) + 4 * (a3 % *(_DWORD *)(result + 208)));
    v4 = *v3;
    LODWORD(v3) = v3[1];
    v5 = (_DWORD)v3 - v4;
    if ((int)v3 <= (int)v4)
      return 0;
    v6 = 2 * v4;
    v7 = *(_QWORD *)(result + 200);
    v8 = v4 << 33;
    v9 = (int *)(v7 + 4 * v6);
    while (1)
    {
      v10 = *v9;
      v9 += 2;
      v11 = v10 == a3;
      if (v10 >= a3)
        break;
      v8 += 0x200000000;
      if (!--v5)
        return 0;
    }
    if (v11
      && (v12 = (_DWORD *)(*(_QWORD *)(result + 176)
                         + 4
                         * (*(_DWORD *)(v7 + ((v8 >> 30) | 4))
                          + *(_DWORD *)(v7 + ((v8 >> 30) | 4)) * *(_DWORD *)(result + 160)
                          + a2 % *(_DWORD *)(result + 160))),
          LODWORD(v14) = *v12,
          v13 = v12[1],
          v14 = (int)v14,
          (int)v14 < v13))
    {
      v15 = *(_QWORD *)(result + 152);
      while (1)
      {
        v16 = *(_DWORD *)(v15 + 4 * v14);
        if (v16 >= a2)
          break;
        result = 0;
        if (v13 <= (int)++v14)
          return result;
      }
      return v16 == a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mosyntdata_StartPhonList(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t mosyntdata_AddPhonEle(uint64_t a1, _QWORD *a2, uint64_t *a3, int a4, __int16 a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = mosyntpal_ALLOCATE(a1, &v12, 0x28u);
  if ((result & 0x80000000) == 0)
  {
    v10 = v12;
    *(_BYTE *)(v12 + 20) = 0;
    *(_WORD *)(v10 + 24) = a5;
    *(_WORD *)(v10 + 26) = -1;
    *(_QWORD *)(v10 + 8) = -1;
    *(_DWORD *)(v10 + 16) = 0xFFFF;
    if (a4)
    {
      *(_QWORD *)v10 = 0;
      v11 = v12;
      if (*a3)
      {
        *(_QWORD *)*a3 = v12;
        v11 = v12;
      }
      else
      {
        *a2 = v12;
      }
    }
    else
    {
      *(_QWORD *)v10 = *a2;
      v11 = v12;
      *a2 = v12;
      if (*a3)
        return result;
    }
    *a3 = v11;
  }
  return result;
}

uint64_t mosyntdata_AddBound(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, __int16 a6, int a7, __int16 a8)
{
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;

  result = mosyntdata_AddPhonEle(a1, a2, a3, a4, 0);
  if ((result & 0x80000000) == 0)
  {
    if (a4)
      v16 = a3;
    else
      v16 = a2;
    v17 = *v16;
    *(_BYTE *)(v17 + 20) = 1;
    *(_DWORD *)(v17 + 24) = a5;
    *(_WORD *)(v17 + 28) = a6;
    *(_DWORD *)(v17 + 32) = a7;
    *(_WORD *)(v17 + 36) = a8;
  }
  return result;
}

uint64_t mosyntdata_AppendPhonList(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  if (!*a3 || (a2 = (_QWORD *)*a3, a5))
  {
    *a2 = a4;
    *a3 = a5;
  }
  return 0;
}

uint64_t mosyntdata_PrependPhonList(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  if (*a3)
  {
    if (a5)
    {
      *a5 = *a2;
      *a2 = a4;
    }
  }
  else
  {
    *a2 = a4;
    *a3 = a5;
  }
  return 0;
}

_QWORD *mosyntdata_LastPhonEle(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  if (!a2)
    return 0;
  do
  {
    result = a2;
    a2 = (_QWORD *)*a2;
  }
  while (a2);
  return result;
}

uint64_t mosyntdata_PopPhonEle(uint64_t a1, _QWORD **a2, _QWORD *a3, _QWORD *a4)
{
  if (*a2)
  {
    *a4 = *a2;
    *a2 = (_QWORD *)**a2;
    a4 = (_QWORD *)*a4;
  }
  *a4 = 0;
  if (!*a2)
    *a3 = 0;
  return 0;
}

uint64_t mosyntdata_CopyPhonList(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;

  v3 = *a2;
  if (*a2)
  {
    v5 = 0;
    v6 = 0;
    v12 = 0;
    while (1)
    {
      result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x28u);
      if ((result & 0x80000000) != 0)
        break;
      v8 = (uint64_t)v12;
      v9 = v3[4];
      v10 = *((_OWORD *)v3 + 1);
      *v12 = *(_OWORD *)v3;
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(v8 + 32) = v9;
      *(_QWORD *)v8 = 0;
      v11 = v12;
      if (v5)
      {
        *v5 = v12;
        v11 = v12;
      }
      else
      {
        v6 = (uint64_t *)v12;
      }
      v3 = (uint64_t *)*v3;
      v5 = v11;
      if (!v3)
        goto LABEL_10;
    }
  }
  else
  {
    result = 0;
    v6 = 0;
LABEL_10:
    *a2 = v6;
  }
  return result;
}

uint64_t mosyntdata_DisposePhonEleList(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  if (*a2)
  {
    while (1)
    {
      v6 = v3;
      v3 = (_QWORD *)*v3;
      result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v6);
      if ((result & 0x80000000) != 0)
        break;
      if (!v3)
        goto LABEL_6;
    }
  }
  else
  {
    result = 0;
LABEL_6:
    *a2 = 0;
  }
  return result;
}

uint64_t mosyntdata_WritePhonEle(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, unsigned __int8 a6, unsigned __int8 a7)
{
  uint64_t result;
  unsigned __int8 *v15;
  int v16;

  v15 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v15, 0x3E8u);
  if ((result & 0x80000000) == 0)
  {
    v16 = 0;
    *v15 = 0;
    result = AppPhonEleString(a1, a2, (uint64_t)v15, 1000, &v16, a3, a4, a5, a6, a7);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntbase_WString(a1, v15, 1000);
      if ((result & 0x80000000) == 0)
        return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v15);
    }
  }
  return result;
}

uint64_t AppPhonEleString(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int *a5, uint64_t a6, unsigned int a7, int a8, unsigned __int8 a9, unsigned __int8 a10)
{
  int v18;
  int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int v22;
  int v23;
  unsigned __int8 v24;
  char *v25;
  char *v26;
  BOOL v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  __int16 v31;
  _OWORD v32[6];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v31 = 0;
  v30 = 0;
  cstdlib_strlen("{VOC}");
  v18 = mosyntkbsymtab_KnownPhonId(a1, a2, (uint64_t)"{VOC}");
  if (!*(_BYTE *)(a6 + 20))
  {
    v22 = *(__int16 *)(a6 + 24);
    if (v18 == v22 && (v23 = *(__int16 *)(a6 + 26), v23 >= 1))
    {
      LOWORD(v32[0]) = v23;
    }
    else
    {
      if (a8 && *(__int16 *)(a6 + 26) >= 1)
        v22 = *(unsigned __int16 *)(a6 + 26);
      result = mosyntkbsymtab_PhonSymString(a1, a2, v22, (char *)v32, 100);
      if ((result & 0x80000000) != 0)
        return result;
    }
    if (a7 == 10 && LOBYTE(v32[0]) == 123 && BYTE1(v32[0]) == 99)
    {
      v24 = BYTE2(v32[0]) - 48;
      if (BYTE2(v32[0]) >= 0x30u && BYTE2(v32[0]) <= 0x39u)
      {
        if (BYTE3(v32[0]) != 125 || BYTE4(v32[0]))
        {
          if (BYTE3(v32[0]) - 48 > 9 || BYTE4(v32[0]) != 125 || BYTE5(v32[0]))
            return mosyntbase_App(a3, a4, a5, (uint64_t)v32, 100, &v29);
          v24 = BYTE3(v32[0]) + 10 * BYTE2(v32[0]) - 16;
        }
        LOWORD(v32[0]) = v24;
      }
    }
    return mosyntbase_App(a3, a4, a5, (uint64_t)v32, 100, &v29);
  }
  v19 = *(_DWORD *)(a6 + 24);
  if (v19 != 3)
  {
    if (v19 != 2)
    {
      if (v19 == 1)
      {
        v20 = mosyntkbsymtab_SyllSepId(a2);
        result = mosyntkbsymtab_PhonSymString(a1, a2, v20, (char *)v32, 100);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_App(a3, a4, a5, (uint64_t)v32, 100, &v29);
        if ((result & 0x80000000) != 0)
          return result;
LABEL_52:
        if (a7 && a7 != 4)
          goto LABEL_54;
LABEL_59:
        if (*(__int16 *)(a6 + 36) <= 0)
          return result;
        goto LABEL_60;
      }
LABEL_51:
      result = 0;
      goto LABEL_52;
    }
    if (!a7)
    {
      v25 = " ";
LABEL_58:
      result = mosyntbase_CApp(a3, a4, a5, (unsigned __int8 *)v25, 0, &v29);
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_59;
    }
    if (a7 != 1)
    {
      if (a7 == 4)
      {
        v25 = " | ";
        goto LABEL_58;
      }
      if (a7 != 10)
      {
        if (a7 == 5)
        {
          result = mosyntbase_CApp(a3, a4, a5, " {#WB} ", 0, &v29);
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          result = 0;
        }
LABEL_54:
        v27 = a10 != 0;
        if (a7 != 5 || a10)
          goto LABEL_67;
LABEL_60:
        result = mosyntbase_CApp(a3, a4, a5, "[", 0, &v29);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntpal_IntToString(*(__int16 *)(a6 + 36), 0, v32, 100);
        if ((result & 0x80000000) != 0)
          return result;
        result = mosyntbase_App(a3, a4, a5, (uint64_t)v32, 100, &v29);
        if ((result & 0x80000000) != 0)
          return result;
        v28 = "]";
        return mosyntbase_CApp(a3, a4, a5, (unsigned __int8 *)v28, 0, &v29);
      }
      v26 = " ";
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if (a7 > 5 || ((0x31u >> a7) & 1) == 0)
  {
    if (a7 == 10)
    {
      if (!(a10 | a9))
      {
        if (*(__int16 *)(a6 + 28) > 1)
          v26 = " / ";
        else
          v26 = " # ";
LABEL_49:
        result = mosyntbase_CApp(a3, a4, a5, (unsigned __int8 *)v26, 0, &v29);
        if ((result & 0x80000000) != 0)
          return result;
        goto LABEL_66;
      }
LABEL_65:
      result = 0;
LABEL_66:
      v27 = a10 != 0;
LABEL_67:
      if (a7 != 10 || v27)
        return result;
      if (*(_WORD *)(a6 + 36) && *(__int16 *)(a6 + 36) <= 3)
      {
        v28 = "'";
      }
      else
      {
        if (*(unsigned __int16 *)(a6 + 36) < 4u)
          return result;
        v28 = "'2";
      }
      return mosyntbase_CApp(a3, a4, a5, (unsigned __int8 *)v28, 0, &v29);
    }
    if (a7 != 1)
      goto LABEL_51;
    if (!*(_DWORD *)(a6 + 32))
      goto LABEL_65;
LABEL_47:
    if (*a5 >= 1)
    {
      v26 = "|";
      goto LABEL_49;
    }
    goto LABEL_65;
  }
  result = mosyntbase_CApp(a3, a4, a5, " #{", 0, &v29);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntpal_IntToString(*(__int16 *)(a6 + 28), 0, v32, 100);
    if ((result & 0x80000000) == 0)
    {
      result = mosyntbase_CApp(a3, a4, a5, (unsigned __int8 *)v32, 100, &v29);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntbase_CApp(a3, a4, a5, "} ", 0, &v29);
        if ((result & 0x80000000) == 0)
        {
          if (!*(_DWORD *)(a6 + 32))
            goto LABEL_52;
          result = mosyntkbaccphr_PhraseTypeToString(*(_DWORD *)(a6 + 32), (uint64_t)&v30, 10);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntbase_CApp(a3, a4, a5, "(", 0, &v29);
            if ((result & 0x80000000) == 0)
            {
              result = mosyntbase_App(a3, a4, a5, (uint64_t)&v30, 10, &v29);
              if ((result & 0x80000000) == 0)
              {
                result = mosyntbase_CApp(a3, a4, a5, ") ", 0, &v29);
                if ((result & 0x80000000) == 0)
                  goto LABEL_52;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosyntdata_WritePhonList(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  return mosyntdata_WriteFormattedPhonList(a1, a2, a3, 0, 0);
}

uint64_t mosyntdata_WriteFormattedPhonList(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4, int a5)
{
  _QWORD *v10;
  uint64_t result;

  if (!a3)
    return 0;
  v10 = a3;
  do
  {
    result = mosyntdata_WritePhonEle(a1, a2, (uint64_t)v10, a4, a5, v10 == a3, *v10 == 0);
    if ((result & 0x80000000) != 0)
      break;
    v10 = (_QWORD *)*v10;
  }
  while (v10);
  return result;
}

uint64_t mosyntdata_PhonListToString(uint64_t a1, uint64_t *a2, int a3, _QWORD *a4, _BYTE *a5, int a6)
{
  unsigned int v11;
  _QWORD *v12;
  uint64_t result;
  int v14;

  v14 = 0;
  *a5 = 0;
  if (!a4)
    return 0;
  if (a3)
    v11 = 10;
  else
    v11 = 0;
  v12 = a4;
  do
  {
    result = AppPhonEleString(a1, a2, (uint64_t)a5, a6, &v14, (uint64_t)v12, v11, 0, v12 == a4, *v12 == 0);
    if ((result & 0x80000000) != 0)
      break;
    v12 = (_QWORD *)*v12;
  }
  while (v12);
  return result;
}

uint64_t mosyntdata_StringToLexPhonList(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t result;
  __int16 v13;
  uint64_t v14;

  v14 = 0;
  *a5 = 0;
  *a6 = 0;
  result = mosyntknowl_GetPhoneFromString(a1, a2, a3, a4, (int *)&v14, (int *)&v14 + 1);
  if ((result & 0x80000000) == 0)
  {
    v13 = WORD2(v14);
    if (SHIDWORD(v14) >= 1)
    {
      do
      {
        result = mosyntdata_AddPhonEle(a1, a5, a6, 1, v13);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntknowl_GetPhoneFromString(a1, a2, a3, a4, (int *)&v14, (int *)&v14 + 1);
        if ((result & 0x80000000) != 0)
          break;
        v13 = WORD2(v14);
      }
      while (SHIDWORD(v14) > 0);
    }
  }
  return result;
}

uint64_t mosyntdata_StringToPhonoPhonList(uint64_t a1, uint64_t *a2, int a3, unsigned __int8 *a4, int a5, _BYTE *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t PhraseTypeFromString;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t PhraseBoundFromString;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v27;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v33 = 0;
  v32 = 0;
  v31 = 0;
  *a8 = 0;
  v35 = 0;
  if (a3)
  {
    PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, 0);
    if ((PhraseTypeFromString & 0x80000000) != 0)
      return PhraseTypeFromString;
    v13 = v35;
    *(_BYTE *)(v35 + 20) = 1;
    *(_DWORD *)(v13 + 24) = 3;
    *(_WORD *)(v13 + 28) = 0;
    *(_DWORD *)(v13 + 32) = 0;
    *(_WORD *)(v13 + 36) = 0;
  }
  else
  {
    PhraseTypeFromString = 0;
    v13 = 0;
  }
  v14 = 0;
  v15 = 0;
  v34 = 0;
  v16 = *a4;
  v17 = v13;
  while (1)
  {
    if (v16 == 32)
    {
      PhraseTypeFromString = mosyntutils_SkipBlanksInString((uint64_t)a4, a5, &v34);
      if ((PhraseTypeFromString & 0x80000000) != 0)
        return PhraseTypeFromString;
      if (*a8 && v13 != v35)
      {
        PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, 0);
        if ((PhraseTypeFromString & 0x80000000) != 0)
          return PhraseTypeFromString;
        v13 = v35;
        *(_BYTE *)(v35 + 20) = 1;
        v20 = 2;
LABEL_18:
        *(_DWORD *)(v13 + 24) = v20;
        *(_WORD *)(v13 + 28) = -1;
        *(_DWORD *)(v13 + 32) = 0;
        *(_WORD *)(v13 + 36) = 0;
        goto LABEL_49;
      }
      goto LABEL_49;
    }
    if (v16 == 35)
    {
      if (a3)
      {
        PhraseBoundFromString = mosyntutils_CheckSkipCharInString(a1, a4, a5, &v34, 0x23u);
        if ((PhraseBoundFromString & 0x80000000) != 0)
          return PhraseBoundFromString;
        v19 = 1;
LABEL_22:
        HIDWORD(v32) = v19;
      }
      else
      {
        PhraseBoundFromString = mosyntknowl_GetPhraseBoundFromString(a1, a4, a5, &v34, (_DWORD *)&v32 + 1);
        if ((PhraseBoundFromString & 0x80000000) != 0)
          return PhraseBoundFromString;
        LOWORD(v19) = WORD2(v32);
        if (!HIDWORD(v32))
        {
          if (v17 && *(_BYTE *)(v17 + 20) && *(_DWORD *)(v17 + 24) == 3 && !*(_DWORD *)(v17 + 32))
          {
            LOWORD(v19) = 0;
            *(_DWORD *)(v17 + 32) = 2;
            if (!v15)
              goto LABEL_43;
            goto LABEL_42;
          }
          LOWORD(v19) = 0;
LABEL_41:
          if (!v15)
          {
LABEL_43:
            v13 = v35;
            if (v35 && *(_BYTE *)(v35 + 20) && *(_DWORD *)(v35 + 24) == 2)
            {
              PhraseTypeFromString = 0;
              v15 = 0;
              *(_DWORD *)(v35 + 24) = 3;
              *(_WORD *)(v13 + 28) = v19;
              v17 = v13;
              *(_DWORD *)(v13 + 32) = 0;
            }
            else
            {
              PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, 0);
              if ((PhraseTypeFromString & 0x80000000) != 0)
                return PhraseTypeFromString;
              v15 = 0;
              v13 = v35;
              *(_BYTE *)(v35 + 20) = 1;
              *(_DWORD *)(v13 + 24) = 3;
              *(_WORD *)(v13 + 28) = v19;
              *(_DWORD *)(v13 + 32) = 0;
              *(_WORD *)(v13 + 36) = 0;
              v17 = v13;
            }
            goto LABEL_49;
          }
LABEL_42:
          *(_WORD *)(v15 + 36) = 1;
          goto LABEL_43;
        }
      }
      if (v17 && *(_BYTE *)(v17 + 20) && *(_DWORD *)(v17 + 24) == 3 && !*(_DWORD *)(v17 + 32))
      {
        *(_DWORD *)(v17 + 32) = 1;
        if (!v15)
          goto LABEL_43;
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    if (!v16)
      break;
    if (a3 && v16 == 47)
    {
      PhraseBoundFromString = mosyntutils_CheckSkipCharInString(a1, a4, a5, &v34, 0x2Fu);
      if ((PhraseBoundFromString & 0x80000000) != 0)
        return PhraseBoundFromString;
      v19 = 2;
      goto LABEL_22;
    }
    if (v16 == 91)
    {
      if (a3)
      {
LABEL_56:
        PhraseBoundFromString = mosyntutils_CheckSkipCharInString(a1, a4, a5, &v34, 0x27u);
        if ((PhraseBoundFromString & 0x80000000) != 0)
          return PhraseBoundFromString;
        if (*a6 && a6[v14] == 49)
          v21 = 3;
        else
          v21 = 2;
        LODWORD(v32) = v21;
        if (v34 < a5 && a4[v34] == 50)
        {
          PhraseBoundFromString = mosyntutils_CheckSkipCharInString(a1, a4, a5, &v34, 0x32u);
          if ((PhraseBoundFromString & 0x80000000) != 0)
            return PhraseBoundFromString;
          v21 = 4;
          LODWORD(v32) = 4;
        }
      }
      else
      {
        PhraseBoundFromString = mosyntknowl_GetAccentFromString(a1, a4, a5, &v34, &v32);
        if ((PhraseBoundFromString & 0x80000000) != 0)
          return PhraseBoundFromString;
        v21 = v32;
      }
      if (v13 && *(_BYTE *)(v13 + 20))
        *(_WORD *)(v13 + 36) = v21;
      PhraseTypeFromString = 0;
      if (v21 == 2)
        v15 = v13;
      goto LABEL_49;
    }
    if (v16 == 40)
    {
      PhraseTypeFromString = mosyntknowl_GetPhraseTypeFromString(a1, a4, a5, &v34, &v31);
      if ((PhraseTypeFromString & 0x80000000) != 0)
        return PhraseTypeFromString;
      if (v17)
        *(_DWORD *)(v17 + 32) = v31;
    }
    else
    {
      if (a3 && v16 == 39)
        goto LABEL_56;
      if (a3)
        v22 = v16 == 46;
      else
        v22 = 0;
      v23 = v22;
      if (v16 == 45 || v23)
      {
        if (a3)
          v24 = 46;
        else
          v24 = 45;
        PhraseBoundFromString = mosyntutils_CheckSkipCharInString(a1, a4, a5, &v34, v24);
        if ((PhraseBoundFromString & 0x80000000) != 0)
          return PhraseBoundFromString;
        PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, 0);
        if ((PhraseTypeFromString & 0x80000000) != 0)
          return PhraseTypeFromString;
        v13 = v35;
        v20 = 1;
        *(_BYTE *)(v35 + 20) = 1;
        goto LABEL_18;
      }
      PhraseTypeFromString = mosyntknowl_GetPhoneFromString(a1, a2, a4, a5, &v34, &v33);
      if ((PhraseTypeFromString & 0x80000000) != 0)
        return PhraseTypeFromString;
      if (v33 <= 0)
      {
        cstdlib_strlen("{VOC}");
        v25 = mosyntkbsymtab_KnownPhonId(a1, a2, (uint64_t)"{VOC}");
        v33 = v25;
        if (v25 >= 1)
        {
          PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, v25);
          if ((PhraseTypeFromString & 0x80000000) != 0)
            return PhraseTypeFromString;
          *(_WORD *)(v35 + 26) = a4[v14];
        }
        v34 = v14 + 1;
      }
      else
      {
        PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, v33);
        if ((PhraseTypeFromString & 0x80000000) != 0)
          return PhraseTypeFromString;
      }
    }
LABEL_49:
    v16 = 0;
    v14 = v34;
    if (v34 < a5)
      v16 = a4[v34];
  }
  if (a3)
  {
    if (v17 && *(_BYTE *)(v17 + 20) && *(_DWORD *)(v17 + 24) == 3 && !*(_DWORD *)(v17 + 32))
      *(_DWORD *)(v17 + 32) = 2;
    if (v15)
      *(_WORD *)(v15 + 36) = 1;
    PhraseTypeFromString = mosyntdata_AddPhonEle(a1, a8, &v35, 1, 0);
    if ((PhraseTypeFromString & 0x80000000) == 0)
    {
      v27 = v35;
      *(_BYTE *)(v35 + 20) = 1;
      *(_DWORD *)(v27 + 24) = 3;
      *(_WORD *)(v27 + 28) = 0;
      *(_DWORD *)(v27 + 32) = 0;
      *(_WORD *)(v27 + 36) = 0;
    }
  }
  return PhraseTypeFromString;
}

BOOL mosyntdata_IsFinalPhraseBoundary(uint64_t a1, uint64_t a2)
{
  return a2 && *(_DWORD *)(a2 + 24) == 3 && !*(_WORD *)(a2 + 28) && *(_DWORD *)(a2 + 32) == 0;
}

uint64_t mosyntdata_NewCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = mosyntpal_ALLOCATE(a1, a2, 0x88u);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)*a2 = 0;
    v4 = *a2;
    *(_QWORD *)(v4 + 20) = 0;
    *(_QWORD *)(v4 + 12) = 0;
    *(_BYTE *)(v4 + 36) = 0;
    *(_QWORD *)(v4 + 28) = 0;
  }
  return result;
}

uint64_t mosyntdata_StartCommandList(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t mosyntdata_AppendCommandList(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  if (!*a3 || (a2 = (_QWORD *)*a3, a5))
  {
    *a2 = a4;
    *a3 = a5;
  }
  return 0;
}

uint64_t mosyntdata_CopyCommandList(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t result;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;

  *a3 = 0;
  *a4 = 0;
  if (!a2)
    return 0;
  v6 = a2;
  v17 = 0;
  do
  {
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v17, 0x88u);
    if ((result & 0x80000000) != 0)
      break;
    *v17 = 0;
    v9 = v17;
    *(_QWORD *)((char *)v17 + 28) = 0;
    *(_QWORD *)((char *)v9 + 20) = 0;
    *((_BYTE *)v9 + 36) = 0;
    *(_QWORD *)((char *)v9 + 12) = 0;
    *(_OWORD *)v9 = *(_OWORD *)v6;
    v10 = *((_OWORD *)v6 + 1);
    v11 = *((_OWORD *)v6 + 2);
    v12 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v9 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v9 + 4) = v12;
    *((_OWORD *)v9 + 1) = v10;
    *((_OWORD *)v9 + 2) = v11;
    v13 = *((_OWORD *)v6 + 5);
    v14 = *((_OWORD *)v6 + 6);
    v15 = *((_OWORD *)v6 + 7);
    v9[16] = v6[16];
    *((_OWORD *)v9 + 6) = v14;
    *((_OWORD *)v9 + 7) = v15;
    *((_OWORD *)v9 + 5) = v13;
    *v9 = 0;
    v16 = v17;
    if (*a4)
    {
      *(_QWORD *)*a4 = v17;
      v16 = v17;
    }
    else
    {
      *a3 = v17;
    }
    *a4 = v16;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  return result;
}

_QWORD *mosyntdata_LastCommand(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  if (!a2)
    return 0;
  do
  {
    result = a2;
    a2 = (_QWORD *)*a2;
  }
  while (a2);
  return result;
}

uint64_t mosyntdata_GetPunctFromCommandList(uint64_t a1, uint64_t *a2, _DWORD *a3, _QWORD *a4)
{
  int v4;

  if (a2)
  {
    while (*((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      if (!a2)
        goto LABEL_4;
    }
    v4 = *((_DWORD *)a2 + 3);
  }
  else
  {
LABEL_4:
    v4 = 0;
  }
  *a3 = v4;
  *a4 = a2;
  return 0;
}

uint64_t mosyntdata_SplitCommandList(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  char v12;

  v7 = 0;
  v8 = a2 != 0;
  v9 = a2;
  if (a2 && a2 != a3)
  {
    v9 = a2;
    do
    {
      v7 = v9;
      v9 = (_QWORD *)*v9;
      v8 = v9 != 0;
      if (v9)
        v10 = v9 == a3;
      else
        v10 = 1;
    }
    while (!v10);
  }
  if (v9)
  {
    v11 = v9;
    do
    {
      v7 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  v12 = !v8;
  *a4 = a2;
  if (v9 != a3)
    v12 = 1;
  if ((v12 & 1) != 0)
  {
    *a5 = v7;
    *a6 = 0;
    a3 = a7;
  }
  else
  {
    *a5 = a3;
    *a6 = *a3;
    *a7 = v7;
  }
  *a3 = 0;
  return 0;
}

uint64_t mosyntdata_DisposeCommandList(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  if (*a2)
  {
    while (1)
    {
      v6 = v3;
      v3 = (_QWORD *)*v3;
      result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v6);
      if ((result & 0x80000000) != 0)
        break;
      if (!v3)
        goto LABEL_6;
    }
  }
  else
  {
    result = 0;
LABEL_6:
    *a2 = 0;
  }
  return result;
}

uint64_t mosyntdata_WriteCommandList(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  int v9;
  BOOL v10;
  _OWORD v11[6];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v8, 0x3E8u);
  if ((result & 0x80000000) == 0)
  {
    v9 = 0;
    *v8 = 0;
    v5 = v8;
    if (a2)
    {
      v10 = 0;
      memset(v11, 0, sizeof(v11));
      v12 = 0;
      while (1)
      {
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, "<", 0, &v10);
        if ((result & 0x80000000) != 0)
          break;
        switch(*((_DWORD *)a2 + 2))
        {
          case 0:
            v6 = (uint64_t)v5;
            v7 = "PUNCT";
            break;
          case 1:
            v6 = (uint64_t)v5;
            v7 = "SPEED";
            break;
          case 2:
            v6 = (uint64_t)v5;
            v7 = "PITCH";
            break;
          case 3:
            v6 = (uint64_t)v5;
            v7 = "VOLUME";
            break;
          case 4:
            v6 = (uint64_t)v5;
            v7 = "SYMBOLICSIL";
            break;
          case 5:
            v6 = (uint64_t)v5;
            v7 = "PROSDOMAIN";
            break;
          default:
            v6 = (uint64_t)v5;
            v7 = "?XXX;";
            break;
        }
        result = mosyntbase_CApp(v6, 1000, &v9, (unsigned __int8 *)v7, 0, &v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, ";", 0, &v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntpal_IntToString(*((_DWORD *)a2 + 3), 0, v11, 100);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, (unsigned __int8 *)v11, 100, &v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, ";", 0, &v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, (unsigned __int8 *)a2 + 36, 100, &v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntbase_CApp((uint64_t)v5, 1000, &v9, ">", 0, &v10);
        if ((result & 0x80000000) != 0)
          break;
        a2 = (uint64_t *)*a2;
        if (!a2)
        {
          v5 = v8;
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      result = mosyntbase_WString(a1, v5, 1000);
      if ((result & 0x80000000) == 0)
        return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v8);
    }
  }
  return result;
}

uint64_t mosyntdata_GetNilLexItem(uint64_t a1)
{
  uint64_t result;

  result = mosyntkblex_GetNilEntry();
  if ((result & 0x80000000) == 0)
    *(_DWORD *)(a1 + 24) = 0;
  return result;
}

BOOL mosyntdata_IsValidLexItem(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) && mosyntkblex_IsValidEntry() != 0;
}

BOOL mosyntdata_IdenticalLexItems(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && mosyntkblex_IdenticalEntries() != 0;
}

uint64_t mosyntdata_GetFirstLexItem(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, int a5, int *a6, _BYTE *a7, uint64_t a8)
{
  *a6 = 0;
  return mosyntdata_GetNextLexItem(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t mosyntdata_GetNextLexItem(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, int a5, int *a6, _BYTE *a7, uint64_t a8)
{
  uint64_t NilEntry;
  int *v17;
  uint64_t SepPartStr;
  int v19;
  __int128 v20;
  BOOL v22;
  _OWORD v23[12];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *a7 = 0;
  NilEntry = mosyntkblex_GetNilEntry(a8);
  if ((NilEntry & 0x80000000) != 0)
    return NilEntry;
  v22 = 0;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  *(_DWORD *)(a8 + 24) = 0;
  v17 = (int *)(a8 + 24);
  SepPartStr = mosyntbase_GetSepPartStr(a4, a5, a6, 0x5Cu, v23, 200, (char *)&v22);
  if ((SepPartStr & 0x80000000) == 0)
  {
    if (!v22)
    {
      *v17 = 0;
      return SepPartStr;
    }
    if (LOBYTE(v23[0]) - 48 > 9)
    {
      SepPartStr = mosyntkbsymtab_ConsFeatToComprConsFeatStr((uint64_t)v23, 200);
      if ((SepPartStr & 0x80000000) != 0)
        return SepPartStr;
      v19 = mosyntkbsymtab_KnownConsId(a1, a2, (uint64_t)v23);
      *v17 = v19;
    }
    else
    {
      SepPartStr = mosyntpal_StringToInt((uint64_t)v23, 200, (int *)(a8 + 24), &v22);
      if ((SepPartStr & 0x80000000) != 0)
        return SepPartStr;
      v19 = *v17;
    }
    if (v19 >= 1)
    {
      v20 = *a3;
      *(_QWORD *)(a8 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a8 = v20;
      *a7 = 1;
    }
  }
  return SepPartStr;
}

uint64_t mosyntdata_SetLexEleRefCounts(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *i;
  uint64_t *v4;
  int v5;

  if (a2)
  {
    v2 = a2;
    do
    {
      for (i = (uint64_t *)v2[2]; i; i = (uint64_t *)*i)
        *((_DWORD *)i + 12) = 0;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    do
    {
      v4 = (uint64_t *)a2[2];
      if (v4)
      {
        while (1)
        {
          v5 = *((_DWORD *)v4 + 12);
          if (v5)
            break;
          *((_DWORD *)v4 + 12) = 1;
          v4 = (uint64_t *)*v4;
          if (!v4)
            goto LABEL_11;
        }
        *((_DWORD *)v4 + 12) = v5 + 1;
      }
LABEL_11:
      a2 = (_QWORD *)*a2;
    }
    while (a2);
  }
  return 0;
}

uint64_t mosyntdata_PruneLexEleBranch(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  v4 = *a2;
  do
  {
    v5 = v4;
    if (!v4)
      break;
    if (*(_DWORD *)(v4 + 48) != 1)
    {
      --*(_DWORD *)(v4 + 48);
      return result;
    }
    v4 = *(_QWORD *)v4;
    result = mosyntpal_DEALLOCATE(a1, &v5);
  }
  while ((result & 0x80000000) == 0);
  return result;
}

uint64_t mosyntdata_LexEleListToPhonList(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[3];
  _OWORD v26[312];
  uint64_t v27;

  v5 = a5;
  v27 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  memset(v26, 0, 512);
  memset(v25, 0, sizeof(v25));
  v20 = 0;
  v18 = 0;
  v19 = 0;
  v24 = 0;
  v23 = 0;
  *a5 = 0;
  if (a4)
  {
    v9 = a4;
    v10 = 0;
    while (1)
    {
      result = mosyntkblex_GetEntryPhon(a1, v9 + 1, v26, 5000);
      if ((result & 0x80000000) != 0)
        return result;
      m2__cp__str("[SVOX]", &v23, 10);
      result = RemoveInitSubstr((uint64_t)&v23, (uint64_t)v26, 5000);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_StringToLexPhonList(a1, a2, (unsigned __int8 *)v26, 5000, &v22, (uint64_t *)&v21);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntkbsymtab_DecompressCons(a1, a2, *((_DWORD *)v9 + 8), &v20, (__int16 *)v25);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntdata_GetAddPhon(a1, (uint64_t)a2, v20, (__int16 *)v25, 1, &v19, (uint64_t *)&v18);
      if ((result & 0x80000000) != 0)
        return result;
      v13 = v18;
      v12 = v19;
      v14 = v21;
      if (v21)
      {
        if (v18)
        {
          *v18 = v22;
          v22 = v12;
        }
        v13 = v14;
      }
      else
      {
        v21 = v18;
        v22 = v19;
      }
      result = mosyntdata_GetAddPhon(a1, (uint64_t)a2, v20, (__int16 *)v25, 0, &v19, (uint64_t *)&v18);
      if ((result & 0x80000000) != 0)
        return result;
      v15 = v18;
      if (!v13)
        break;
      if (v18)
        goto LABEL_18;
LABEL_19:
      v16 = v22;
      if (!v10)
      {
        v10 = v13;
        goto LABEL_23;
      }
      if (v13)
      {
        *v13 = *v5;
LABEL_23:
        *v5 = v16;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_27;
    }
    v13 = &v22;
LABEL_18:
    *v13 = v19;
    v21 = v15;
    v13 = v15;
    goto LABEL_19;
  }
  v10 = 0;
LABEL_27:
  result = mosyntkbsymtab_DecompressCons(a1, a2, a3, &v20, (__int16 *)v25);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntdata_GetAddPhon(a1, (uint64_t)a2, v20, (__int16 *)v25, 1, &v19, (uint64_t *)&v18);
    if ((result & 0x80000000) == 0)
    {
      v17 = v19;
      if (v10)
      {
        if (!v18)
          goto LABEL_34;
        *v18 = *v5;
      }
      else
      {
        v10 = v18;
      }
      *v5 = v17;
LABEL_34:
      result = mosyntdata_GetAddPhon(a1, (uint64_t)a2, v20, (__int16 *)v25, 0, &v19, (uint64_t *)&v18);
      if ((result & 0x80000000) == 0)
      {
        if (v10 && (v5 = v10, !v18))
        {
          return 0;
        }
        else
        {
          result = 0;
          *v5 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t RemoveInitSubstr(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v7;
  char v8;
  int v9;

  v9 = 0;
  v8 = 0;
  result = mosyntbase_FindSubstring(a1, 10, a2, a3, 0, &v9);
  if ((result & 0x80000000) == 0 && !v9)
  {
    v7 = mosyntbase_Length(a1, 10);
    return mosyntbase_RemoveSubstring(0, v7, a2, a3, &v8);
  }
  return result;
}

uint64_t mosyntdata_GetAddPhon(uint64_t a1, uint64_t a2, int a3, __int16 *a4, int a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t result;
  _OWORD v11[2];
  _QWORD v12[2];
  int v13;
  int v14;

  v14 = 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  memset(v11, 0, sizeof(v11));
  *a6 = 0;
  *a7 = 0;
  for (result = GetFirstAddPhon(a1, a2, a5, a3, a4, v12, (uint64_t)v11, &v14);
        (result & 0x80000000) == 0;
        result = mosyntkbsymtab_GetFeatMatchedNextIntPropVal((uint64_t)v12, (uint64_t)v11, &v14))
  {
    if (v14 < 0)
      break;
    result = mosyntdata_AddPhonEle(a1, a6, a7, 1, v14);
    if ((result & 0x80000000) != 0)
      break;
  }
  return result;
}

uint64_t mosyntdata_LexEleListToPhonString(uint64_t a1, uint64_t *a2, unsigned int a3, _QWORD *a4, uint64_t a5, int a6)
{
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _OWORD v24[62];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 512);
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  result = mosyntkbsymtab_DecompressCons(a1, a2, a3, &v19, (__int16 *)v22);
  if ((result & 0x80000000) == 0)
  {
    result = AppAddPhonString(a1, a2, v19, (__int16 *)v22, 1, a5, a6, &v18);
    if ((result & 0x80000000) == 0)
    {
      if (a4)
      {
        v12 = 0;
        do
        {
          v13 = v12;
          v12 = a4;
          a4 = (_QWORD *)*a4;
          *v12 = v13;
        }
        while (a4);
        v14 = v12;
        while (1)
        {
          result = mosyntkbsymtab_DecompressCons(a1, a2, *((_DWORD *)v14 + 8), (_DWORD *)&v19 + 1, (__int16 *)v23);
          if ((result & 0x80000000) != 0)
            break;
          result = AppAddPhonString(a1, a2, SHIDWORD(v19), (__int16 *)v23, 1, a5, a6, &v18);
          if ((result & 0x80000000) != 0)
            break;
          result = mosyntkblex_GetEntryPhon(a1, v14 + 1, v24, 1000);
          if ((result & 0x80000000) != 0)
            break;
          m2__cp__str("[SVOX]", &v20, 10);
          result = RemoveInitSubstr((uint64_t)&v20, (uint64_t)v24, 1000);
          if ((result & 0x80000000) != 0)
            break;
          result = mosyntbase_App(a5, a6, &v18, (uint64_t)v24, 1000, &v17);
          if ((result & 0x80000000) != 0)
            break;
          result = AppAddPhonString(a1, a2, SHIDWORD(v19), (__int16 *)v23, 0, a5, a6, &v18);
          if ((result & 0x80000000) != 0)
            break;
          v14 = (_QWORD *)*v14;
          if (!v14)
          {
            v15 = 0;
            do
            {
              v16 = v12;
              v12 = (_QWORD *)*v12;
              *v16 = v15;
              v15 = v16;
            }
            while (v12);
            return AppAddPhonString(a1, a2, v19, (__int16 *)v22, 0, a5, a6, &v18);
          }
        }
      }
      else
      {
        return AppAddPhonString(a1, a2, v19, (__int16 *)v22, 0, a5, a6, &v18);
      }
    }
  }
  return result;
}

uint64_t AppAddPhonString(uint64_t a1, uint64_t *a2, int a3, __int16 *a4, int a5, uint64_t a6, int a7, int *a8)
{
  uint64_t result;
  BOOL v14;
  _OWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;
  _OWORD v18[6];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  memset(v15, 0, sizeof(v15));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v14 = 0;
  for (result = GetFirstAddPhon(a1, (uint64_t)a2, a5, a3, a4, v16, (uint64_t)v15, (_DWORD *)&v17 + 1);
        (result & 0x80000000) == 0;
        result = mosyntkbsymtab_GetFeatMatchedNextIntPropVal((uint64_t)v16, (uint64_t)v15, (_DWORD *)&v17 + 1))
  {
    if (v17 < 0)
      break;
    result = mosyntkbsymtab_PhonSymString(a1, a2, HIDWORD(v17), (char *)v18, 100);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_App(a6, a7, a8, (uint64_t)v18, 100, &v14);
    if ((result & 0x80000000) != 0)
      break;
  }
  return result;
}

uint64_t mosyntdata_WriteReadingList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD **)(a3 + 16);
  if (!v3)
    return 0;
  do
  {
    v8 = *(_DWORD *)(a3 + 4);
    v7 = *(_DWORD *)(a3 + 8);
    v9 = *(_QWORD *)(a3 + 16);
    result = mosyntknowl_WriteTraceHeader(a1, 1u);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WString(a1, "reading from pos ", 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WInt(a1, v8, 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WString(a1, " to pos ", 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WInt(a1, v7, 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WString(a1, ": ", 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntkbsymtab_WriteCons(a1, a2, *(_DWORD *)(v9 + 8));
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WString(a1, " cost ", 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WInt(a1, *(_DWORD *)(v9 + 12), 0);
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WString(a1, "  ", 0);
    if ((result & 0x80000000) != 0)
      break;
    result = WriteLexEleList(a1, *(_QWORD **)(v9 + 16));
    if ((result & 0x80000000) != 0)
      break;
    result = mosyntbase_WLn(a1);
    if ((result & 0x80000000) != 0)
      break;
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  return result;
}

double mosyntdata_NewTermInfo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;
  _QWORD *v6;
  _QWORD *v7;

  if ((mosyntpal_ALLOCATE(a1, a3, 0x30u) & 0x80000000) == 0)
  {
    *(_QWORD *)*a3 = a2;
    v6 = (_QWORD *)*a3;
    *((_DWORD *)v6 + 2) = -1;
    v6[2] = 0;
    v7 = (_QWORD *)*a3;
    result = NAN;
    v7[3] = 0xFFFFFFFF00000000;
    v7[4] = 0;
    *(_QWORD *)(*a3 + 40) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t mosyntdata_DisposeTermInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (!*a2)
    return 0;
  v4 = *(_QWORD *)*a2;
  if (!v4)
    return mosyntpal_DEALLOCATE(a1, a2);
  result = mosyntdata_PruneLexEleBranch(a1, (uint64_t *)(v4 + 16));
  if ((result & 0x80000000) == 0)
  {
    result = mosyntpal_DEALLOCATE(a1, (uint64_t *)*a2);
    if ((result & 0x80000000) == 0)
      return mosyntpal_DEALLOCATE(a1, a2);
  }
  return result;
}

double mosyntdata_CopyTermInfo(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  double result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (!a2)
  {
    *a3 = 0;
    return result;
  }
  if ((mosyntpal_ALLOCATE(a1, a3, 0x30u) & 0x80000000) != 0)
    return result;
  v7 = *a2;
  v8 = (uint64_t *)*a3;
  *(_QWORD *)*a3 = 0;
  if (!v7)
    goto LABEL_17;
  v17 = 0;
  v9 = *(uint64_t **)(v7 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    while ((mosyntpal_ALLOCATE(a1, (uint64_t *)&v17, 0x38u) & 0x80000000) == 0)
    {
      *v17 = 0;
      v12 = v17;
      if (v10)
      {
        *v10 = v17;
        v12 = v17;
      }
      else
      {
        v11 = v17;
      }
      v13 = *(_OWORD *)(v9 + 1);
      *(_OWORD *)(v12 + 3) = *(_OWORD *)(v9 + 3);
      *(_OWORD *)(v12 + 1) = v13;
      *((_WORD *)v12 + 20) = *((_WORD *)v9 + 20);
      *((_DWORD *)v12 + 12) = 1;
      v9 = (uint64_t *)*v9;
      v10 = v12;
      if (!v9)
        goto LABEL_15;
    }
    return result;
  }
  v11 = 0;
LABEL_15:
  if ((mosyntpal_ALLOCATE(a1, v8, 0x18u) & 0x80000000) == 0)
  {
    *(_QWORD *)*v8 = 0;
    v14 = (_QWORD *)*v8;
    v14[1] = *(_QWORD *)(v7 + 8);
    v14[2] = v11;
LABEL_17:
    v15 = *a3;
    *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v15 + 16) = a2[2];
    v16 = *a3;
    *(_QWORD *)(v16 + 24) = a2[3];
    *(_QWORD *)(v16 + 32) = a2[4];
    result = *((double *)a2 + 5);
    *(double *)(*a3 + 40) = result;
  }
  return result;
}

uint64_t mosyntdata_StartNodeList(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  return 0;
}

__n128 mosyntdata_NewSyntNode(uint64_t a1, __int16 a2, __n128 *a3, uint64_t *a4)
{
  __n128 result;
  uint64_t v8;
  _QWORD *v9;

  if ((mosyntpal_ALLOCATE(a1, a4, 0x48u) & 0x80000000) == 0)
  {
    *(_QWORD *)*a4 = 0;
    *(_QWORD *)(*a4 + 8) = 0;
    v8 = *a4;
    *(_WORD *)(v8 + 16) = a2;
    result = *a3;
    *(_QWORD *)(v8 + 40) = a3[1].n128_u64[0];
    *(__n128 *)(v8 + 24) = result;
    v9 = (_QWORD *)*a4;
    v9[8] = 0;
    *(_QWORD *)((char *)v9 + 53) = 0;
    v9[6] = 0;
  }
  return result;
}

uint64_t mosyntdata_AppendNode(uint64_t a1, _QWORD *a2, _QWORD **a3, int a4, _QWORD *a5)
{
  _QWORD *v5;

  if (a5)
  {
    if (a4)
    {
      v5 = *a3;
      if (!*a3)
        v5 = a2;
      *v5 = a5;
      goto LABEL_7;
    }
    *a5 = *a2;
    *a2 = a5;
    if (!*a3)
LABEL_7:
      *a3 = a5;
  }
  return 0;
}

void mosyntdata_AddNode(uint64_t a1, _QWORD *a2, _QWORD **a3, int a4, __int16 a5, __n128 *a6)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v12 = 0;
  mosyntdata_NewSyntNode(a1, a5, a6, (uint64_t *)&v12);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = v12;
    if (v12)
    {
      if (a4)
      {
        v11 = *a3;
        if (!*a3)
          v11 = a2;
        *v11 = v12;
        goto LABEL_9;
      }
      *v12 = *a2;
      *a2 = v10;
      if (!*a3)
LABEL_9:
        *a3 = v10;
    }
  }
}

uint64_t DisposeSyntTreeList(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a2;
  if (*a2)
  {
    v9 = 0;
    while (1)
    {
      result = DisposeSyntTreeList(a1, v3 + 1);
      if ((result & 0x80000000) != 0)
        break;
      v9 = v3;
      v6 = (_QWORD *)*v3;
      v8 = v3[8];
      v7 = v3 + 8;
      if (v8)
      {
        result = mosyntdata_DisposeTermInfo(a1, v7);
        if ((result & 0x80000000) != 0)
          break;
      }
      result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v9);
      if ((result & 0x80000000) != 0)
        break;
      v3 = v6;
      if (!v6)
        goto LABEL_10;
    }
  }
  else
  {
    result = 0;
LABEL_10:
    *a2 = 0;
  }
  return result;
}

void mosyntdata_CopySyntTree(uint64_t a1, _OWORD **a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  int v10;
  double v11;
  _OWORD *v12;

  if (*a2)
  {
    v12 = 0;
    if ((mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x48u) & 0x80000000) == 0)
    {
      v4 = v12;
      v5 = *a2;
      *v12 = **a2;
      v6 = *((_QWORD *)v5 + 8);
      v7 = v5[3];
      v8 = v5[1];
      v4[2] = v5[2];
      v4[3] = v7;
      v4[1] = v8;
      *((_QWORD *)v4 + 8) = v6;
      v9 = mosyntdata_CopyTermInfo(a1, *((uint64_t **)*a2 + 8), (uint64_t *)v4 + 8);
      if ((v10 & 0x80000000) == 0
        && (mosyntdata_CopySyntTree(a1, v12, v9) & 0x80000000) == 0
        && (mosyntdata_CopySyntTree(a1, (char *)v12 + 8, v11) & 0x80000000) == 0)
      {
        *a2 = v12;
      }
    }
  }
}

uint64_t mosyntdata_WriteReadingStruct(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  int v11;
  int v12;
  _OWORD v13[6];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 0;
  result = mosyntknowl_WriteTraceHeader(a1, a3);
  if ((result & 0x80000000) == 0)
  {
    if (a5 < 1)
    {
LABEL_7:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      v12 = 0;
      result = mosyntkbsymtab_AppDecomprConsToString(a1, a2, *(_DWORD *)(a4 + 8), (uint64_t)v13, 100, &v12);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntbase_WString(a1, (unsigned __int8 *)v13, 100);
        if ((result & 0x80000000) == 0)
        {
          result = mosyntbase_WString(a1, "  ", 0);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntbase_WInt(a1, *(_DWORD *)(a4 + 12), 0);
            if ((result & 0x80000000) == 0)
            {
              result = mosyntbase_WLn(a1);
              if ((result & 0x80000000) == 0)
              {
                result = mosyntbase_WLn(a1);
                if ((result & 0x80000000) == 0)
                  return WriteLexConsList(a1, a2, a3, *(_QWORD *)(a4 + 16), a5 + 2);
              }
            }
          }
        }
      }
    }
    else
    {
      v11 = a5;
      while (1)
      {
        result = mosyntbase_WString(a1, " ", 0);
        if ((result & 0x80000000) != 0)
          break;
        if (!--v11)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t WriteLexConsList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v7;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[3];
  _OWORD v13[12];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 0;
  v7 = a3;
  result = WriteLexConsList(a1, a2, a3, *(_QWORD *)a4);
  if ((result & 0x80000000) == 0)
  {
    result = mosyntknowl_WriteTraceHeader(a1, v7);
    if ((result & 0x80000000) == 0)
    {
      if (a5 < 1)
      {
LABEL_7:
        v11 = 0;
        memset(v12, 0, sizeof(v12));
        memset(v13, 0, sizeof(v13));
        v14 = 0;
        if (*(_DWORD *)(a4 + 32) && mosyntkblex_IsValidEntry(a4 + 8))
        {
          result = mosyntkbsymtab_DecompressCons(a1, a2, *(_DWORD *)(a4 + 32), &v11, (__int16 *)v12);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntkbsymtab_WriteConsAndFeat(a1, a2, v11, (__int16 *)v12);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, " ", 0);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntkblex_GetEntryGraph(a1, a4 + 8, v13, 200);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, (unsigned __int8 *)v13, 200);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, "  [", 0);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntkblex_GetEntryPhon(a1, a4 + 8, v13, 200);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, (unsigned __int8 *)v13, 200);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WString(a1, "]  ", 0);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntkblex_GetEntryCost(a1, a4 + 8, (char *)&v11 + 4);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosyntbase_WInt(a1, HIDWORD(v11), 0);
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          result = mosyntbase_WString(a1, "NIL", 0);
          if ((result & 0x80000000) != 0)
            return result;
        }
        result = mosyntbase_WLn(a1);
        if ((result & 0x80000000) == 0)
          return mosyntbase_WLn(a1);
        return result;
      }
      while (1)
      {
        result = mosyntbase_WString(a1, " ", 0);
        if ((result & 0x80000000) != 0)
          break;
        if (!--a5)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t mosyntdata_WriteTree(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  return WriteTree1(a1, a2, a3, a4, 0);
}

uint64_t WriteTree1(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t *v6;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;

  if (!a4)
    return 0;
  v6 = a4;
  v10 = (a5 + 2);
  while (1)
  {
    result = mosyntknowl_WriteTraceHeader(a1, a3);
    if ((result & 0x80000000) != 0)
      return result;
    v12 = a5;
    if (a5 >= 1)
    {
      do
      {
        result = mosyntbase_WString(a1, " ", 0);
        if ((result & 0x80000000) != 0)
          return result;
      }
      while (--v12);
    }
    result = mosyntkbsymtab_WriteConsAndFeat(a1, a2, *((__int16 *)v6 + 8), (__int16 *)v6 + 12);
    if ((result & 0x80000000) != 0)
      return result;
    result = mosyntbase_WString(a1, "  ", 0);
    if ((result & 0x80000000) != 0)
      return result;
    result = mosyntbase_WInt(a1, *((_DWORD *)v6 + 12), 0);
    if ((result & 0x80000000) != 0)
      return result;
    if (*((_BYTE *)v6 + 60))
    {
      result = mosyntbase_WString(a1, "  @@", 0);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        return result;
      v13 = v6[8];
      if (v13)
      {
        result = WriteTermInfo(a1, a2, a3, v13, v10);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    else
    {
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        return result;
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
    result = WriteTree1(a1, a2, a3, v6[1], v10);
    if ((result & 0x80000000) != 0)
      return result;
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
}

uint64_t mosyntdata_EncodeSymbolicValue(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  int v4;

  if (a3)
    v4 = -2147482647;
  else
    v4 = -2147481647;
  *a4 = v4 - a2;
  return 0;
}

uint64_t mosyntdata_DecodeSymbolicValue(uint64_t a1, int a2, unsigned int *a3, BOOL *a4, BOOL *a5)
{
  *a5 = a2 < -2147481646;
  if (a2 < -2147481646)
  {
    *a3 = (unsigned __int16)(2001 - a2) % 0x3E8u;
    *a4 = a2 < 0x800003EA;
  }
  return 0;
}

uint64_t mosyntdata_StartItemList(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t mosyntdata_AppendItem(uint64_t a1, _QWORD *a2, _QWORD **a3, _QWORD *a4)
{
  _QWORD *v4;

  if (a4)
  {
    *a4 = 0;
    v4 = *a3;
    if (!*a3)
      v4 = a2;
    *v4 = a4;
    *a3 = a4;
  }
  return 0;
}

uint64_t mosyntdata_DisposeItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (*(_DWORD *)(v2 + 8))
    return mosyntpal_DEALLOCATE(a1, a2);
  mosyntdata_SetLexEleRefCounts(a1, *(_QWORD **)(v2 + 32));
  v5 = *(_QWORD **)(v2 + 32);
  if (!v5)
  {
LABEL_8:
    *(_QWORD *)(v2 + 32) = 0;
    return mosyntpal_DEALLOCATE(a1, a2);
  }
  v7 = 0;
  while (1)
  {
    result = mosyntdata_PruneLexEleBranch(a1, v5 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    v7 = v5;
    v5 = (_QWORD *)*v5;
    result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v7);
    if ((result & 0x80000000) != 0)
      return result;
    if (!v5)
      goto LABEL_8;
  }
}

uint64_t mosyntdata_AddOutItem(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v26 = 0;
  result = mosyntpal_ALLOCATE(a1, &v26, 0x28u);
  if ((result & 0x80000000) != 0)
    return result;
  *(_QWORD *)v26 = 0;
  v9 = v26;
  *(_DWORD *)(v26 + 8) = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a4 + 8))
    goto LABEL_32;
  v10 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a4 + 32);
  *(_OWORD *)(v9 + 16) = v10;
  v11 = *(_QWORD **)(a4 + 32);
  if (!v11)
    goto LABEL_30;
  v27 = 0;
  v28 = 0;
  do
  {
    for (i = (_QWORD *)v11[2]; i; i = (_QWORD *)*i)
      i[6] = 0;
    v11 = (_QWORD *)*v11;
  }
  while (v11);
  v13 = *(_QWORD **)(a4 + 32);
  if (!v13)
  {
LABEL_30:
    result = 0;
    v15 = 0;
    v23 = v9;
LABEL_31:
    *(_QWORD *)(v9 + 32) = v15;
    v9 = v23;
LABEL_32:
    *(_QWORD *)v9 = 0;
    v24 = v26;
    if (*a3)
    {
      *(_QWORD *)*a3 = v26;
      v24 = v26;
    }
    else
    {
      *a2 = v26;
    }
    *a3 = v24;
    return result;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v28, 0x18u);
    if ((result & 0x80000000) != 0)
      return result;
    *v28 = 0;
    if (v14)
    {
      *v14 = v28;
      v14 = v28;
    }
    else
    {
      v14 = v28;
      v15 = v28;
    }
    v14[1] = v13[1];
    v16 = (uint64_t *)v13[2];
    if (v16)
    {
      v18 = v16 + 6;
      v17 = v16[6];
      if (!v17)
      {
        v25 = v15;
        v19 = 0;
        while (1)
        {
          result = mosyntpal_ALLOCATE(a1, &v27, 0x38u);
          if ((result & 0x80000000) != 0)
            return result;
          v20 = v27;
          v21 = *(_OWORD *)(v16 + 3);
          *(_OWORD *)(v27 + 8) = *(_OWORD *)(v16 + 1);
          *(_OWORD *)(v20 + 24) = v21;
          *(_WORD *)(v20 + 40) = *((_WORD *)v16 + 20);
          *(_QWORD *)v20 = 0;
          if (v19)
          {
            *v19 = v27;
            v19 = (_QWORD *)v27;
          }
          else
          {
            v19 = (_QWORD *)v27;
            v17 = v27;
          }
          *v18 = v19;
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_27;
          v18 = v16 + 6;
          v22 = v16[6];
          if (v22)
          {
            if (v19)
              *v19 = v22;
            else
              v17 = v16[6];
LABEL_27:
            v15 = v25;
            break;
          }
        }
      }
    }
    else
    {
      v17 = 0;
    }
    v28[2] = v17;
    v13 = (_QWORD *)*v13;
    if (!v13)
    {
      v23 = v26;
      goto LABEL_31;
    }
  }
}

uint64_t GetFirstAddPhon(uint64_t a1, uint64_t a2, int a3, int a4, __int16 *a5, _WORD *a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v8;

  *a6 = *a5;
  if (*a5 >= 1)
  {
    v8 = 1;
    do
      a6[v8] = a5[v8];
    while (v8++ < *a5);
  }
  return mosyntkbsymtab_GetFeatMatchedFirstIntPropVal(a1, a2, a4, (uint64_t)a6, a3 == 0, a7, a8);
}

uint64_t mosyntdata_GenWordPhono(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, __int16 a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;

  *a7 = 0;
  *a8 = 0;
  if (a3)
  {
    v11 = a3;
    v14 = 0;
    while (1)
    {
      if (*((_BYTE *)v11 + 20))
      {
        v15 = mosyntbase_WriteDevelMessage(a1, "*** boundary detected in word phoneme list\\n", 0, "", 0, "", 0, "", 0, 0, 0, 0);
        goto LABEL_5;
      }
      v16 = *((__int16 *)v11 + 12);
      if (mosyntkbsymtab_SyllSepId(a2) == v16)
      {
        v14 = mosyntdata_AddPhonEle(a1, a7, a8, 1, 0);
        if ((v14 & 0x80000000) != 0)
          return v14;
        v17 = *a8;
        *(_BYTE *)(v17 + 20) = 1;
        *(_DWORD *)(v17 + 24) = 1;
        *(_WORD *)(v17 + 28) = -1;
        *(_DWORD *)(v17 + 32) = 0;
        *(_WORD *)(v17 + 36) = 0;
        a5 = *a8;
        goto LABEL_18;
      }
      v18 = *((__int16 *)v11 + 12);
      if (mosyntkbsymtab_PrimAccId(a2) == v18)
      {
        if (a5)
        {
          v19 = a4;
LABEL_17:
          *(_WORD *)(a5 + 36) = v19;
        }
      }
      else
      {
        v20 = *((__int16 *)v11 + 12);
        if (mosyntkbsymtab_SecAccId(a2) != v20)
        {
          v15 = mosyntdata_AddPhonEle(a1, a7, a8, 1, *((_WORD *)v11 + 12));
LABEL_5:
          v14 = v15;
          if ((v15 & 0x80000000) != 0)
            return v14;
          goto LABEL_18;
        }
        if (a4 >= 1 && a5)
        {
          v19 = a6;
          goto LABEL_17;
        }
      }
LABEL_18:
      v11 = (uint64_t *)*v11;
      if (!v11)
        return v14;
    }
  }
  return 0;
}

uint64_t mosyntdata_CreateAndInitSentTermData(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t i;

  result = mosyntpal_ALLOCATE(a1, a2, 0x13890u);
  if ((result & 0x80000000) == 0)
  {
    for (i = 0; i != 80016; i += 16)
    {
      *(_QWORD *)(*a2 + i) = 0;
      *(_QWORD *)(*a2 + i + 8) = 0;
    }
  }
  return result;
}

uint64_t mosyntdata_DisposeSentTermData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t result;
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;

  if (!*a2)
    return 0;
  v4 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + v4);
    v12 = v6;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      v7 = (_QWORD **)(v6 + 8);
      if (v8)
      {
        result = mosyntdata_DisposePhonEleList(a1, v7);
        if ((result & 0x80000000) != 0)
          return result;
      }
      result = mosyntpal_DEALLOCATE(a1, &v12);
      if ((result & 0x80000000) != 0)
        return result;
      v5 = *a2;
    }
    v10 = *(_QWORD ***)(v5 + v4 + 8);
    v11 = v10;
    if (v10)
    {
      if (*v10)
      {
        result = mosyntdata_DisposeCommandList(a1, v10);
        if ((result & 0x80000000) != 0)
          return result;
      }
      result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v11);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v4 += 16;
  }
  while (v4 != 80016);
  return mosyntpal_DEALLOCATE(a1, a2);
}

double mosyntdata_AssertBoundPosData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;

  if (a2)
  {
    if (a3 < 0x1389)
    {
      v4 = a2 + 16 * a3;
      v6 = *(_QWORD *)(v4 + 8);
      v5 = (_QWORD *)(v4 + 8);
      if (!v6)
      {
        v9 = 0;
        if ((mosyntpal_ALLOCATE(a1, (uint64_t *)&v9, 0x10u) & 0x80000000) == 0)
        {
          v7 = v9;
          *v5 = v9;
          *v7 = 0;
          *(_QWORD *)&result = 0xFFFFFFFFLL;
          v9[1] = 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
      HIDWORD(v8) = a3;
      mosyntbase_WriteMessage(a1, "***** error in asserting word boundary pos; wrong pos: %d\\n",
        0,
        "",
        0,
        "",
        0,
        "",
        v8);
    }
  }
  return result;
}

double mosyntdata_InsertSentTermWord(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4, int a5, uint64_t a6)
{
  _QWORD *v10;
  double result;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (a2)
  {
    if (a3 > 0x1388 || a4 < (int)a3 || a4 >= 5001)
    {
      *((_QWORD *)&v17 + 1) = a4;
      LODWORD(v17) = 0;
      DWORD1(v17) = a3;
      mosyntbase_WriteMessage(a1, "***** error in word term insertion; wrong start/end pos: %d/%d\\n",
        0,
        "",
        0,
        "",
        0,
        "",
        v17);
    }
    else
    {
      v10 = (_QWORD *)(a2 + 16 * a3);
      if (*v10)
      {
        *((_QWORD *)&v16 + 1) = a4;
        LODWORD(v16) = 0;
        DWORD1(v16) = a3;
        mosyntbase_WriteMessage(a1, "***** error in word term insertion; position %d already occupied\\n",
          0,
          "",
          0,
          "",
          0,
          "",
          v16);
      }
      else
      {
        v18 = 0;
        if ((mosyntpal_ALLOCATE(a1, &v18, 0x18u) & 0x80000000) == 0)
        {
          v14 = v18;
          *v10 = v18;
          *(_DWORD *)v14 = a5;
          *(_DWORD *)(v14 + 4) = a4;
          *(_QWORD *)(v14 + 8) = a6;
          *(_DWORD *)(v14 + 16) = 0;
          result = mosyntdata_AssertBoundPosData(a1, a2, a3);
          if ((v15 & 0x80000000) == 0)
            return mosyntdata_AssertBoundPosData(a1, a2, a4);
        }
      }
    }
  }
  return result;
}

void mosyntdata_InsertSentTermPunct(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a2)
  {
    mosyntdata_AssertBoundPosData(a1, a2, a3);
    if (a3 <= 0x1388 && (v8 & 0x80000000) == 0)
    {
      v9 = *(_QWORD ***)(a2 + 16 * a3 + 8);
      if (v9)
      {
        v12 = 0;
        if ((mosyntpal_ALLOCATE(a1, (uint64_t *)&v12, 0x88u) & 0x80000000) == 0)
        {
          *v12 = 0;
          v10 = v12;
          v12[2] = 0;
          v10[3] = 0;
          v10[1] = 0;
          *(_QWORD *)((char *)v10 + 29) = 0;
          *((_DWORD *)v10 + 3) = a4;
          v11 = *v9;
          if (!*v9)
            goto LABEL_9;
          do
          {
            v9 = (_QWORD **)v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
          if (v10)
LABEL_9:
            *v9 = v10;
        }
      }
    }
  }
}

uint64_t mosyntdata_SentTermBoundData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if (a3 <= 0x1388)
      return *(_QWORD *)(a2 + 16 * a3 + 8);
  }
  return result;
}

uint64_t mosyntdata_SentTermWordData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if (a3 <= 0x1388)
      return *(_QWORD *)(a2 + 16 * a3);
  }
  return result;
}

uint64_t mosyntdata_GetSentTermWordPhonList(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;

  *a4 = 0;
  if (a2)
  {
    if (a3 <= 0x1388)
    {
      v4 = *(_QWORD *)(a2 + 16 * a3);
      if (v4)
        *a4 = *(_QWORD *)(v4 + 8);
    }
  }
  return 0;
}

uint64_t mosyntdata_GetSentTermCommList(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  _QWORD *v4;

  *a4 = 0;
  if (a2)
  {
    if (a3 <= 0x1388)
    {
      v4 = *(_QWORD **)(a2 + 16 * a3 + 8);
      if (v4)
        *a4 = *v4;
    }
  }
  return 0;
}

uint64_t mosyntdata_WriteSentTermData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a3)
    return mosyntbase_WLn(a1);
  v5 = 0;
  for (i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    v8 = *(i - 1);
    v7 = *i;
    if (*i)
    {
      result = mosyntbase_WString(a1, "- bound pos ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WInt(a1, v5, 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WString(a1, " ind ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WInt(a1, *(_DWORD *)(v7 + 8), 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WString(a1, " ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntdata_WriteCommandList(a1, *(uint64_t **)v7);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        break;
    }
    if (v8)
    {
      result = mosyntbase_WString(a1, "   - word from ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WInt(a1, v5, 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WString(a1, " to ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WInt(a1, *(_DWORD *)(v8 + 4), 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WString(a1, " acc ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WInt(a1, *(_DWORD *)(v8 + 16), 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WString(a1, ": ", 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntdata_WriteFormattedPhonList(a1, a2, *(_QWORD **)(v8 + 8), 0, 0);
      if ((result & 0x80000000) != 0)
        break;
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) != 0)
        break;
    }
    if (++v5 == 5001)
      return mosyntbase_WLn(a1);
  }
  return result;
}

uint64_t mosyntdata_GenPhonoRepr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = 0;
  result = 0;
  v17 = 0;
  v18 = 0;
  *a4 = 0;
  v9 = (uint64_t *)(a3 + 8);
  v19 = 0;
  v10 = 5001;
  do
  {
    v12 = *(v9 - 1);
    v11 = *v9;
    if (*v9)
    {
      v13 = *(_DWORD *)(v11 + 8);
      if (v13 < 0)
      {
        result = mosyntdata_AddPhonEle(a1, a4, &v19, 1, 0);
        if ((result & 0x80000000) != 0)
          return result;
        v14 = 0;
        v7 = v19;
        *(_BYTE *)(v19 + 20) = 1;
        *(_DWORD *)(v7 + 24) = 2;
        LOWORD(v13) = -1;
      }
      else
      {
        v14 = *(_DWORD *)(v11 + 12);
        result = mosyntdata_AddPhonEle(a1, a4, &v19, 1, 0);
        if ((result & 0x80000000) != 0)
          return result;
        v7 = v19;
        *(_BYTE *)(v19 + 20) = 1;
        *(_DWORD *)(v7 + 24) = 3;
      }
      *(_WORD *)(v7 + 28) = v13;
      *(_DWORD *)(v7 + 32) = v14;
      *(_WORD *)(v7 + 36) = 0;
    }
    if (v12)
    {
      result = mosyntdata_GenWordPhono(a1, a2, *(uint64_t **)(v12 + 8), *(_DWORD *)(v12 + 16), v7, 4, &v18, &v17);
      if ((result & 0x80000000) != 0)
        return result;
      if (v18)
      {
        v15 = v17;
        v16 = a4;
        if (v19 && (v16 = (_QWORD *)v19, !v17))
        {
          result = 0;
        }
        else
        {
          result = 0;
          *v16 = v18;
          v19 = v15;
        }
      }
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v9 += 2;
    --v10;
  }
  while (v10);
  return result;
}

void mosyntdata_SyntTreeToSentTermData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  signed int v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *i;
  uint64_t v17;
  uint64_t v18;

  if (a3)
  {
    v7 = a1;
    if (!*(_BYTE *)(a3 + 60))
      goto LABEL_13;
    v8 = *(_QWORD *)(a3 + 64);
    if (v8)
    {
      v9 = *(unsigned __int8 **)(v8 + 32);
      if (v9)
      {
        v17 = 0;
        v18 = 0;
        if ((mosyntdata_StringToLexPhonList(a1, a2, v9, 100000000, &v18, &v17) & 0x80000000) != 0)
          return;
        v8 = *(_QWORD *)(a3 + 64);
        v10 = v18;
      }
      else
      {
        v10 = 0;
      }
      v11 = *(_DWORD *)(a3 + 52);
      v12 = *(_DWORD *)(a3 + 56);
      v14 = *(_DWORD *)(v8 + 8);
      a1 = v7;
      v13 = a4;
    }
    else
    {
      v11 = *(_DWORD *)(a3 + 52);
      v12 = *(_DWORD *)(a3 + 56);
      v13 = a4;
      v14 = 0;
      v10 = 0;
    }
    mosyntdata_InsertSentTermWord(a1, v13, v11, v12, v14, v10);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_13:
      for (i = *(_QWORD **)(a3 + 8); i; i = (_QWORD *)*i)
      {
        if ((mosyntdata_SyntTreeToSentTermData(v7, a2, i, a4) & 0x80000000) != 0)
          break;
      }
    }
  }
}

uint64_t WriteLexEleList(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _OWORD v5[12];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  result = WriteLexEleList(a1, *a2);
  if ((result & 0x80000000) == 0)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    result = mosyntkblex_GetEntryPhon(a1, a2 + 1, v5, 200);
    if ((result & 0x80000000) == 0)
      return mosyntbase_WString(a1, (unsigned __int8 *)v5, 200);
  }
  return result;
}

uint64_t WriteTermInfo(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v5 = a5;
  if (*(_QWORD *)a4)
    return WriteLexConsList(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a4 + 16), a5);
  result = mosyntknowl_WriteTraceHeader(a1, a3);
  if ((result & 0x80000000) == 0)
  {
    if (v5 < 1)
    {
LABEL_7:
      if (*(_QWORD *)(a4 + 16))
      {
        result = mosyntbase_WString(a1, "\"", 0);
        if ((result & 0x80000000) != 0)
          return result;
        v9 = *(int *)(a4 + 24);
        if ((int)v9 <= *(_DWORD *)(a4 + 28))
        {
          do
          {
            result = mosyntbase_Wr(a1, *(char *)(*(_QWORD *)(a4 + 16) + v9));
            if ((result & 0x80000000) != 0)
              return result;
            v10 = v9++ < *(int *)(a4 + 28);
          }
          while (v10);
        }
        result = mosyntbase_WString(a1, "\" ", 0);
        if ((result & 0x80000000) != 0)
          return result;
      }
      if (*(_QWORD *)(a4 + 32))
      {
        result = mosyntbase_WString(a1, " [", 0);
        if ((result & 0x80000000) != 0)
          return result;
        v11 = *(int *)(a4 + 40);
        if ((int)v11 <= *(_DWORD *)(a4 + 44))
        {
          do
          {
            result = mosyntbase_Wr(a1, *(char *)(*(_QWORD *)(a4 + 32) + v11));
            if ((result & 0x80000000) != 0)
              return result;
            v10 = v11++ < *(int *)(a4 + 44);
          }
          while (v10);
        }
        result = mosyntbase_WString(a1, "] ", 0);
        if ((result & 0x80000000) != 0)
          return result;
      }
      result = mosyntbase_WLn(a1);
      if ((result & 0x80000000) == 0)
        return mosyntbase_WLn(a1);
      return result;
    }
    while (1)
    {
      result = mosyntbase_WString(a1, " ", 0);
      if ((result & 0x80000000) != 0)
        break;
      if (!--v5)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t kblexXX_NilLexicon()
{
  return 0;
}

uint64_t kblexXX_StartLookup(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = a1;
  if (*(_BYTE *)(a1 + 260))
    *(_DWORD *)(a2 + 8) = 1;
  else
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(a2 + 16) = 0;
  return 0;
}

uint64_t kblexXX_LookupChar(unsigned __int8 a1, int *a2, _BYTE *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v5 = a1;
  v6 = *(_QWORD *)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 260))
  {
    v10 = *((_QWORD *)a2 + 1);
    v11 = a2[4];
    *a3 = 0;
    if (*(_BYTE *)(v10 + v11))
    {
      if (*(unsigned __int8 *)(v10 + v11) == v5)
      {
        *a3 = 1;
        v12 = v11 + 1;
LABEL_8:
        result = 0;
        a2[4] = v12;
        return result;
      }
    }
    else
    {
      v19 = *(unsigned __int8 **)(v10 + 16);
      if (v19)
      {
        while (1)
        {
          v20 = *v19;
          if (v20 >= v5)
            break;
          v19 = (unsigned __int8 *)*((_QWORD *)v19 + 3);
          if (!v19)
            return 0;
        }
        if (v20 == v5)
        {
          v12 = 1;
          *a3 = 1;
          *((_QWORD *)a2 + 1) = v19;
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  v27 = 0;
  v22 = 0;
  v7 = a2[4];
  result = DecomprNode(v6, a2[2], &v28, &v27, &v22, &v26);
  *a3 = 0;
  if (*((_BYTE *)&v22 + v7))
  {
    if (*((unsigned __int8 *)&v22 + v7) != v5)
      return result;
    *a3 = 1;
    v9 = v7 + 1;
    goto LABEL_24;
  }
  v25 = 0;
  v21 = 0;
  v13 = v27;
  v14 = *(_QWORD *)a2;
  result = DecomprNodeStart(*(_QWORD *)a2, v27, &v25, &v21);
  v15 = v13 != 0;
  v16 = v21;
  if (v13 && v21 < v5)
  {
    do
    {
      v13 = v25;
      result = DecomprNodeStart(v14, v25, &v25, &v21);
      v15 = v13 != 0;
      v16 = v21;
      if (v13)
        v17 = v21 >= v5;
      else
        v17 = 1;
    }
    while (!v17);
  }
  if (v15 && v16 == v5)
  {
    *a3 = 1;
    if (!BYTE1(v21))
      result = DecomprNode(*(_QWORD *)a2, v13, &v25, &v24, &v21, &v23);
    a2[2] = v13;
    v9 = 1;
LABEL_24:
    a2[4] = v9;
  }
  return result;
}

uint64_t kblexXX_GetFirstEntry(_DWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 260))
  {
    v11 = 0;
    v6 = a1[2];
    v7 = (int)a1[4];
    DecomprNode(v5, v6, &v13, &v12, &v11, (int *)&v11 + 1);
    if (v6 && !*((_BYTE *)&v11 + v7) && (v10 = HIDWORD(v11)) != 0 && *(_BYTE *)(*(_QWORD *)(v5 + 272) + SHIDWORD(v11)))
    {
      *a2 = 1;
      *(_QWORD *)a3 = v5;
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 12) = v6;
    }
    else
    {
      *a2 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  else
  {
    v8 = *((_QWORD *)a1 + 1);
    if (v8 && !*(_BYTE *)(v8 + (int)a1[4]) && *(_QWORD *)(v8 + 32))
    {
      *a2 = 1;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v8 + 32);
    }
    else
    {
      *a2 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
  }
  return 0;
}

uint64_t kblexXX_GetNextEntry(BOOL *a1, int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_11;
  if (*(_BYTE *)(v3 + 260))
  {
    v5 = a2[2];
    if (!(_DWORD)v5)
      goto LABEL_12;
    v6 = *(_QWORD *)(v3 + 272);
    if (*(_BYTE *)(v6 + v5))
    {
      v12 = 0;
      v11 = 0;
      v5 = DecomprEntry1(v3, v5, (*(unsigned __int8 *)(v6 + a2[3]) >> 5) & 1, (int *)&v12 + 1, (int *)&v12, &v11);
      v7 = v11;
      a2[2] = v11;
      if (!(_DWORD)v7)
        goto LABEL_10;
      v3 = *(_QWORD *)a2;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 272) + v7))
        goto LABEL_10;
      goto LABEL_12;
    }
LABEL_11:
    v5 = 0;
    goto LABEL_12;
  }
  v8 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (!v8)
    goto LABEL_11;
  v5 = 0;
  v9 = *v8;
  *((_QWORD *)a2 + 1) = v9;
  if (!v9)
  {
LABEL_10:
    v3 = 0;
    *(_QWORD *)a2 = 0;
  }
LABEL_12:
  *a1 = v3 != 0;
  return v5;
}

uint64_t DecomprEntry1(uint64_t a1, int a2, int a3, int *a4, int *a5, int *a6)
{
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v16;

  if (a2)
  {
    v16 = a2;
    DecomprNum(*(_QWORD *)(a1 + 272), &v16, a4);
    if (*a4 < 1)
    {
      v11 = 0;
    }
    else
    {
      if (!a3 || (DecomprNum(*(_QWORD *)(a1 + 272), &v16, a5), *a5 <= 0))
        *a5 = 1;
      v11 = v16;
      if ((*(_DWORD *)(a1 + 280) & 0x80000000) != 0)
      {
        v12 = *(_QWORD *)(a1 + 272);
        if (*(_BYTE *)(v12 + v16))
        {
          v13 = (unsigned __int8 *)(v16 + v12 + 1);
          do
          {
            v14 = *v13++;
            ++v11;
          }
          while (v14);
        }
        ++v11;
      }
    }
  }
  else
  {
    v11 = 0;
    *a4 = 0;
  }
  *a6 = v11;
  return 0;
}

uint64_t kblexXX_FinishEntrySearch()
{
  return 0;
}

uint64_t kblexXX_GetEntryGraph(uint64_t a1, uint64_t *a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  uint64_t v21;
  int i;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  BOOL v35;
  int __dst;

  *a3 = 0;
  v4 = *a2;
  if (!*a2)
    return 0;
  v35 = 0;
  if (!*(_BYTE *)(v4 + 260))
  {
    if (a2[1])
    {
      v21 = a2[2];
      for (i = a4 - 1; v21; v21 = *(_QWORD *)(v21 + 8))
      {
        if (v21 == *(_QWORD *)(v4 + 264))
          break;
        v23 = 0;
        while (*(unsigned __int8 *)(v21 + v23++))
          ;
        if ((_DWORD)v23 != 1)
        {
          v25 = 0;
          do
          {
            a3[i + v25] = *(_BYTE *)(v21 + (v23 + v25 - 2));
            --v25;
          }
          while (v23 + v25 > 1);
          i += v25;
        }
      }
      v26 = a4 - 1 - i;
      if ((int)v26 >= 1)
      {
        v27 = i + 1;
        v28 = v26;
        v29 = a3;
        do
        {
          *v29++ = a3[v27++];
          --v28;
        }
        while (v28);
      }
      result = 0;
      a3[v26] = 0;
      return result;
    }
    return 0;
  }
  if (!*(_BYTE *)(v4 + 264))
    return mosyntbase_CCopy("???", 0, (uint64_t)a3, a4, &v35);
  v6 = *((_DWORD *)a2 + 3);
  v7 = a4 - 1;
  if (v6)
  {
    __dst = 0;
    v8 = a4 - 1;
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 272);
      v10 = *(_BYTE *)(v9 + v6);
      v11 = v6 + 1;
      v12 = v10 & 3;
      if ((v10 & 3) != 0)
      {
        memcpy(&__dst, (const void *)(v9 + v11), v10 & 3);
        v11 += v12;
        v13 = v10 & 3;
      }
      else
      {
        v13 = 0;
      }
      *(_BYTE *)((unint64_t)&__dst | v13) = 0;
      if ((v10 & 4) != 0)
      {
        if (*(char *)(v9 + v11) < 0)
        {
          v14 = (char *)(v9 + v11 + 1);
          do
          {
            v15 = *v14++;
            ++v11;
          }
          while (v15 < 0);
        }
        ++v11;
      }
      v16 = *(unsigned __int8 *)(v9 + v11);
      if (*(char *)(v9 + v11) < 0)
        break;
      v17 = 0;
      if (v12)
        goto LABEL_16;
LABEL_17:
      v6 = v17 + v6 - v16;
      if (!v6)
        goto LABEL_40;
    }
    v18 = 0;
    v19 = (char *)(v9 + v11 + 1);
    do
    {
      v18 = v16 + (v18 << 7) - 128;
      v20 = *v19++;
      v16 = v20;
    }
    while (v20 < 0);
    v17 = -128 * v18;
    if (!v12)
      goto LABEL_17;
LABEL_16:
    memcpy(&a3[v8 + 1 - v12], &__dst, v12);
    v8 -= v12;
    goto LABEL_17;
  }
  v8 = a4 - 1;
LABEL_40:
  v31 = v7 - v8;
  if ((int)v31 >= 1)
  {
    v32 = v8 + 1;
    v33 = v31;
    v34 = a3;
    do
    {
      *v34++ = a3[v32++];
      --v33;
    }
    while (v33);
  }
  result = 0;
  a3[v31] = 0;
  return result;
}

uint64_t kblexXX_GetEntryPhon(uint64_t a1, uint64_t *a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  *a3 = 0;
  v4 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v4 + 260))
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 272);
        v7 = *(unsigned __int8 *)(v6 + v5);
        if (*(char *)(v6 + v5) < 0)
        {
          v11 = 0;
          v12 = (char *)(v5 + v6 + 1);
          do
          {
            v11 = v7 + (v11 << 7) - 128;
            v13 = *v12++;
            v7 = v13;
            ++v5;
          }
          while (v13 < 0);
          v8 = v11 << 7;
        }
        else
        {
          v8 = 0;
        }
        if (v7 + v8 >= 1)
        {
          v14 = v5 + 1;
          if ((*(_BYTE *)(v6 + *((int *)a2 + 3)) & 0x20) != 0)
          {
            if (*(char *)(v6 + v14) < 0)
            {
              v15 = (char *)(v14 + v6 + 1);
              do
              {
                v16 = *v15++;
                ++v14;
              }
              while (v16 < 0);
            }
            ++v14;
          }
          if ((*(_DWORD *)(v4 + 280) & 0x80000000) == 0)
            return mosyntbase_WriteDevelMessage(a1, "***** extern phon string lexica not supported", 0, "", 0, "", 0, "", 0, 0, 0, 0);
          v17 = 0;
          v18 = v6 + v14;
          do
          {
            v19 = *(unsigned __int8 *)(v18 + v17);
            if (v17 < a4)
              a3[v17] = v19;
            ++v17;
          }
          while (v19);
        }
      }
    }
    else
    {
      v9 = a2[1];
      if (v9)
        return auxkbcommondef_RecallString(a1, *(_QWORD *)(v4 + 280), *(_DWORD *)(v9 + 12), (uint64_t)a3, a4);
    }
  }
  return 0;
}

uint64_t kblexXX_GetEntryCost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  *a3 = 0;
  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_BYTE *)(result + 260))
    {
      v6 = 0;
      return DecomprEntry1(result, *(_DWORD *)(a2 + 8), (*(unsigned __int8 *)(*(_QWORD *)(result + 272) + *(int *)(a2 + 12)) >> 5) & 1, &v6, a3, &v5);
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 8);
      result = 0;
      if (v4)
        *a3 = *(_DWORD *)(v4 + 16);
    }
  }
  return result;
}

uint64_t kblexXX_GetEntryCostAndConsList(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;

  v10 = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_BYTE *)(v7 + 260))
    {
      DecomprEntry1(v7, *(_DWORD *)(a2 + 8), (*(unsigned __int8 *)(*(_QWORD *)(v7 + 272) + *(int *)(a2 + 12)) >> 5) & 1, &v10, a3, &v11);
      LODWORD(v7) = v10;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      if (v8)
      {
        LODWORD(v7) = *(_DWORD *)(v8 + 8);
        *a3 = *(_DWORD *)(v8 + 16);
      }
      else
      {
        LODWORD(v7) = 0;
      }
    }
  }
  return mosyntpal_IntToString(v7, 0, a4, a5);
}

uint64_t kblexXX_GetNilEntry(_QWORD *a1)
{
  *a1 = 0;
  return 0;
}

BOOL kblexXX_IsValidEntry(_QWORD *a1)
{
  return *a1 != 0;
}

BOOL kblexXX_IdenticalEntries(_DWORD *a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)a1 + 260))
    return a1[2] == *(_DWORD *)(a2 + 8);
  else
    return *((_QWORD *)a1 + 1) == *(_QWORD *)(a2 + 8);
}

uint64_t DecomprNode(uint64_t a1, int a2, int *a3, int *a4, _BYTE *a5, int *a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;

  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(unsigned __int8 *)(v6 + a2);
    v8 = a2 + 1;
    v9 = v7 & 3;
    if ((v7 & 3) != 0)
    {
      v10 = (char *)(v6 + v8);
      v8 = a2 + (v7 & 3) + 1;
      v11 = a5;
      v12 = v7 & 3;
      do
      {
        v13 = *v10++;
        *v11++ = v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      v9 = 0;
    }
    a5[v9] = 0;
    if ((v7 & 4) != 0)
    {
      v16 = *(_QWORD *)(a1 + 272);
      v17 = *(unsigned __int8 *)(v16 + v8);
      if (*(char *)(v16 + v8) < 0)
      {
        v19 = 0;
        v20 = (char *)(v8 + v16 + 1);
        do
        {
          v19 = v17 + (v19 << 7) - 128;
          v21 = *v20++;
          v17 = v21;
          ++v8;
        }
        while (v21 < 0);
        v18 = v19 << 7;
      }
      else
      {
        v18 = 0;
      }
      v15 = ++v8 + v18 + v17;
    }
    else
    {
      v15 = 0;
    }
    *a3 = v15;
    if (*(_BYTE *)(a1 + 264))
    {
      v22 = *(_QWORD *)(a1 + 272);
      if (*(char *)(v22 + v8) < 0)
      {
        v23 = (char *)(v8 + v22 + 1);
        do
        {
          v24 = *v23++;
          ++v8;
        }
        while (v24 < 0);
      }
      ++v8;
    }
    if ((v7 & 8) != 0)
    {
      v26 = *(_QWORD *)(a1 + 272);
      v27 = *(unsigned __int8 *)(v26 + v8);
      if (*(char *)(v26 + v8) < 0)
      {
        v29 = 0;
        v30 = (char *)(v8 + v26 + 1);
        do
        {
          v29 = v27 + (v29 << 7) - 128;
          v31 = *v30++;
          v27 = v31;
          ++v8;
        }
        while (v31 < 0);
        v28 = v29 << 7;
      }
      else
      {
        v28 = 0;
      }
      v25 = ++v8 + v28 + v27;
    }
    else
    {
      v25 = 0;
    }
    *a4 = v25;
    v14 = v8 & (v7 << 27 >> 31);
  }
  else
  {
    v14 = 0;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
  }
  *a6 = v14;
  return 0;
}

uint64_t DecomprNodeStart(uint64_t a1, int a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int v17;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 272);
    v5 = *(_BYTE *)(v4 + a2);
    v6 = a2 + 1;
    v7 = v5 & 3;
    if ((v5 & 3) != 0)
    {
      v8 = (char *)(v4 + v6);
      v6 = a2 + (v5 & 3) + 1;
      v9 = a4;
      v10 = v5 & 3;
      do
      {
        v11 = *v8++;
        *v9++ = v11;
        --v10;
      }
      while (v10);
    }
    else
    {
      v7 = 0;
    }
    a4[v7] = 0;
    if ((v5 & 4) != 0)
    {
      v12 = *(_QWORD *)(a1 + 272);
      v13 = *(unsigned __int8 *)(v12 + v6);
      if (*(char *)(v12 + v6) < 0)
      {
        v15 = 0;
        v16 = (char *)(v6 + v12 + 1);
        do
        {
          v15 = v13 + (v15 << 7) - 128;
          v17 = *v16++;
          v13 = v17;
          ++v6;
        }
        while (v17 < 0);
        v14 = v15 << 7;
      }
      else
      {
        v14 = 0;
      }
      *a3 = v6 + v14 + v13 + 1;
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return 0;
}

uint64_t DecomprNum(uint64_t result, int *a2, _DWORD *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  *a3 = 0;
  v3 = *(unsigned __int8 *)(result + *a2);
  if (*(char *)(result + *a2) < 0)
  {
    do
    {
      *a3 = v3 + (*a3 << 7) - 128;
      v5 = *a2 + 1;
      *a2 = v5;
      v6 = *(char *)(result + v5);
      v3 = *(unsigned __int8 *)(result + v5);
    }
    while (v6 < 0);
    v4 = *a3 << 7;
  }
  else
  {
    v4 = 0;
  }
  *a3 = v4 + v3;
  ++*a2;
  return result;
}

uint64_t mosyntwordpho_LHPlusMapping(uint64_t a1, int a2, uint64_t *a3, int *a4, unsigned __int8 *a5, int a6)
{
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 v23[96];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*a4 < 2)
    return 0;
  v11 = *(_QWORD *)&a4[2 * (*a4 - 1) + 2];
  if (a2 < 1
    || (result = mosyntknowl_WriteTraceHeader(a1, 3u), (result & 0x80000000) == 0)
    && (result = mosyntbase_WriteMessage(a1, "lhplus mapping input: %s\\n", 0, a5, a6, "", 0, "", 0),
        (result & 0x80000000) == 0))
  {
    v21 = 0;
    v22 = 0;
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    v19 = 0;
    v20 = 0;
    result = mosyntdata_StringToLexPhonList(a1, a3, a5, a6, &v21, &v19);
    if ((result & 0x80000000) == 0)
    {
      result = mosynttrans_InitTransDesc(a1, a2, (uint64_t)a3, &v22);
      if ((result & 0x80000000) == 0)
      {
        m2__cp__str("lhplus mapping", v23, 100);
        v13[0] = 1;
        v13[1] = v11;
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0;
        result = mosynttrans_SeqTransducePhonList(a1, v22, 3u, v21, &v20, (uint64_t)v13, 0, -1, 0xFFFFFFFF, v23, 100);
        if ((result & 0x80000000) == 0)
        {
          result = mosynttrans_FinishTransDesc(a1, &v22);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntdata_PhonListToString(a1, a3, 1, v20, a5, a6);
            if ((result & 0x80000000) == 0)
            {
              result = mosyntdata_DisposePhonEleList(a1, &v21);
              if ((result & 0x80000000) == 0)
              {
                result = mosyntdata_DisposePhonEleList(a1, &v20);
                if (a2 >= 1 && (result & 0x80000000) == 0)
                {
                  result = mosyntknowl_WriteTraceHeader(a1, 3u);
                  if ((result & 0x80000000) == 0)
                    return mosyntbase_WriteMessage(a1, "lhplus mapping output: %s\\n", 0, a5, a6, "", 0, "", 0);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosyntwordpho_ReadingToPhonString(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _BYTE *a5, int a6)
{
  if (a4)
    return mosyntdata_LexEleListToPhonString(a1, a3, *(_DWORD *)(a4 + 8), *(_QWORD **)(a4 + 16), (uint64_t)a5, a6);
  *a5 = 0;
  return 0;
}

uint64_t mosyntwordpho_TreatSingleReadingString(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, int a7)
{
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;
  _OWORD v24[5];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v23, 0x68u);
  if ((result & 0x80000000) == 0)
  {
    v15 = (uint64_t)v23;
    *v23 = a2;
    *(_QWORD *)(v15 + 8) = a3;
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a4;
    *(_OWORD *)(v15 + 32) = v16;
    v18 = *(_OWORD *)(a4 + 48);
    v17 = *(_OWORD *)(a4 + 64);
    v19 = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(v15 + 96) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(v15 + 64) = v18;
    *(_OWORD *)(v15 + 80) = v17;
    *(_OWORD *)(v15 + 48) = v19;
    if (!a5)
      return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v23);
    v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    v31[0] = 0;
    *(_QWORD *)((char *)v31 + 6) = 0;
    v27 = 0;
    v28 = 0;
    result = mosyntdata_StartPhonList(a1, &v28, &v27);
    if ((result & 0x80000000) == 0)
    {
      v26 = 0;
      result = mosyntdata_StringToLexPhonList(a1, *(uint64_t **)(v15 + 8), a6, a7, &v28, &v27);
      if ((result & 0x80000000) == 0)
      {
        result = mosynttrans_InitTransDesc(a1, *(_DWORD *)v15, *(_QWORD *)(v15 + 8), &v29);
        if ((result & 0x80000000) == 0)
        {
          m2__cp__str("morphophonemic rules", v30, 30);
          v20 = *(_DWORD *)(v15 + 16) - 1;
          v21 = *(_OWORD *)(v15 + 64);
          v24[2] = *(_OWORD *)(v15 + 48);
          v24[3] = v21;
          v24[4] = *(_OWORD *)(v15 + 80);
          v25 = *(_QWORD *)(v15 + 96);
          v22 = *(_OWORD *)(v15 + 32);
          v24[0] = *(_OWORD *)(v15 + 16);
          v24[1] = v22;
          result = mosynttrans_SeqTransducePhonList(a1, v29, 3u, v28, &v26, (uint64_t)v24, 0, v20, 0xFFFFFFFF, (unsigned __int8 *)v30, 30);
          if ((result & 0x80000000) == 0)
          {
            result = mosynttrans_FinishTransDesc(a1, &v29);
            if ((result & 0x80000000) == 0)
            {
              result = mosyntdata_DisposePhonEleList(a1, &v28);
              if ((result & 0x80000000) == 0)
              {
                result = mosyntdata_PhonListToString(a1, *(uint64_t **)(v15 + 8), 1, v26, a6, a7);
                if ((result & 0x80000000) == 0)
                {
                  result = mosyntdata_DisposePhonEleList(a1, &v26);
                  if ((result & 0x80000000) == 0)
                    return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v23);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosyntwordpho_TraceReading(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5, int a6)
{
  uint64_t result;
  _OWORD v12[12];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 < 2)
    return 0;
  result = mosyntknowl_WriteTraceHeader(a1, 3u);
  if ((result & 0x80000000) == 0)
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    result = mosyntkbsymtab_ConsToString(a1, a3, *(_DWORD *)(a4 + 8), (char *)v12, 200);
    if ((result & 0x80000000) == 0)
      return mosyntbase_WriteMessage(a1, "getting internal phon list for word cons %s: %s\\n", 0, (unsigned __int8 *)v12, 200, a5, a6, "", 0);
  }
  return result;
}

uint64_t mosyntwordpho_TreatSingleReading(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD *v20;

  v20 = 0;
  result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v20, 0x68u);
  if ((result & 0x80000000) == 0)
  {
    v15 = (uint64_t)v20;
    *v20 = a2;
    *(_QWORD *)(v15 + 8) = a3;
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a4;
    *(_OWORD *)(v15 + 32) = v16;
    v18 = *(_OWORD *)(a4 + 48);
    v17 = *(_OWORD *)(a4 + 64);
    v19 = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(v15 + 96) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(v15 + 64) = v18;
    *(_OWORD *)(v15 + 80) = v17;
    *(_OWORD *)(v15 + 48) = v19;
    result = TreatReading(a1, v15, a5, a6, a7);
    if ((result & 0x80000000) == 0)
      return mosyntpal_DEALLOCATE(a1, (uint64_t *)&v20);
  }
  return result;
}

uint64_t TreatReading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, _QWORD *a5)
{
  uint64_t inited;
  int v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  *a5 = 0;
  if (!a3)
    return 0;
  v18 = 0;
  v19 = 0;
  v22[1] = 0;
  v23[0] = 0;
  v22[0] = 0;
  *(_QWORD *)((char *)v23 + 6) = 0;
  v20[1] = 0;
  v21[0] = 0;
  v20[0] = 0;
  *(_QWORD *)((char *)v21 + 6) = 0;
  inited = mosyntdata_LexEleListToPhonList(a1, *(uint64_t **)(a2 + 8), *(_DWORD *)(a3 + 8), *(uint64_t **)(a3 + 16), (uint64_t *)&v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = mosynttrans_InitTransDesc(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v18);
  if ((inited & 0x80000000) != 0)
    return inited;
  m2__cp__str("morphophonemic rules", v22, 30);
  v11 = *(_DWORD *)(a2 + 16) - 1;
  v12 = *(_OWORD *)(a2 + 64);
  v26 = *(_OWORD *)(a2 + 48);
  v27 = v12;
  v28 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 32);
  v24 = *(_OWORD *)(a2 + 16);
  v25 = v13;
  inited = mosynttrans_SeqTransducePhonList(a1, v18, 3u, v19, a4, (uint64_t)&v24, 0, v11, 0xFFFFFFFF, (unsigned __int8 *)v22, 30);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = mosynttrans_FinishTransDesc(a1, &v18);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(int *)a2 < 2)
    goto LABEL_12;
  inited = mosyntknowl_WriteTraceHeader(a1, 3u);
  if ((inited & 0x80000000) != 0)
    return inited;
  m2__cp__str("internal", v20, 30);
  v14 = *(_DWORD *)(a3 + 8);
  v15 = *a4;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  inited = mosyntkbsymtab_ConsToString(a1, *(uint64_t **)(a2 + 8), v14, (char *)&v24, 200);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = mosyntbase_WriteMessage(a1, "getting %s phon list for word cons %s: ", 0, (unsigned __int8 *)v20, 30, (unsigned __int8 *)&v24, 200, "", 0);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), v15);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = mosyntbase_WLn(a1);
  if ((inited & 0x80000000) != 0)
    return inited;
LABEL_12:
  v16 = mosyntdata_DisposePhonEleList(a1, &v19);
  if ((v16 & 0x80000000) == 0)
    *a5 = mosyntdata_LastPhonEle(a1, *a4);
  return v16;
}

void mosyntwordpho_TreatTree(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  v20 = 0;
  if ((mosyntpal_ALLOCATE(a1, &v20, 0x68u) & 0x80000000) == 0)
  {
    v14 = v20;
    *(_DWORD *)v20 = a2;
    *(_QWORD *)(v14 + 8) = a3;
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)a4;
    *(_OWORD *)(v14 + 32) = v15;
    v17 = *(_OWORD *)(a4 + 48);
    v16 = *(_OWORD *)(a4 + 64);
    v18 = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(v14 + 96) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(v14 + 64) = v17;
    *(_OWORD *)(v14 + 80) = v16;
    *(_OWORD *)(v14 + 48) = v18;
    if ((mosyntdata_StartPhonList(a1, &v24, &v23) & 0x80000000) == 0)
    {
      v21 = 0;
      if ((mosyntdata_StartNodeList(a1, a7, &v22) & 0x80000000) == 0)
      {
        TreatTreeAppend(a1, v20, a5, a6, a7, &v22, &v24, &v23, (uint64_t)&v21);
        if ((v19 & 0x80000000) == 0)
        {
          if (*(int *)v20 < 1)
            goto LABEL_13;
          if (*a7)
          {
            if ((mosyntdata_WriteTree(a1, *(uint64_t **)(v20 + 8), 1, *a7) & 0x80000000) != 0
              || (mosyntbase_WLn(a1) & 0x80000000) != 0
              || (mosyntbase_WLn(a1) & 0x80000000) != 0)
            {
              return;
            }
LABEL_13:
            mosyntpal_DEALLOCATE(a1, &v20);
            return;
          }
          if ((mosyntknowl_WriteTraceHeader(a1, 3u) & 0x80000000) == 0
            && (mosyntbase_WStringLn(a1, "*** empty tree after morphophonetic transductions", 0) & 0x80000000) == 0)
          {
            goto LABEL_13;
          }
        }
      }
    }
  }
}

void TreatTreeAppend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD **a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  uint64_t *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *PhonEle;
  uint64_t *v40;
  _QWORD v41[2];
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  if (a4)
  {
    PhonEle = 0;
    v36 = 0;
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v41[0] = 0;
    v41[1] = 0;
    v42 = 0;
    if (*(int *)a2 < 2
      || (mosyntknowl_WriteTraceHeader(a1, 3u) & 0x80000000) == 0
      && (m2__cp__str("treating tree", v41, 20),
          (TraceConsProcessing(a1, a2, *(__int16 *)(a4 + 16), (unsigned __int8 *)v41) & 0x80000000) == 0))
    {
      if (*(_BYTE *)(a4 + 60))
      {
        PhonEle = 0;
        v40 = 0;
        v17 = *(uint64_t **)(a4 + 64);
        if (!v17 || !*v17)
          goto LABEL_20;
        if ((TreatReading(a1, a2, *v17, &v40, &PhonEle) & 0x80000000) != 0)
          return;
        if (v40)
        {
          mosyntdata_NewSyntNode(a1, *(_WORD *)(a4 + 16), (__n128 *)(a4 + 24), (uint64_t *)&v38);
          if ((v18 & 0x80000000) == 0)
          {
            v20 = v38;
            v19 = (uint64_t)PhonEle;
            *(_QWORD *)((char *)v38 + 52) = *(_QWORD *)(a4 + 52);
            *((_BYTE *)v20 + 60) = 1;
            *(_QWORD *)a9 = v20;
            v21 = *a7;
            v34 = *a8;
            v35 = v21;
            if ((mosyntdata_AppendPhonList(a1, &v35, &v34, (uint64_t)v40, v19) & 0x80000000) == 0)
            {
              v22 = mosyntdata_SentTermWordData(a1, a3, *(_DWORD *)(a4 + 52));
              if (v22)
                *(_QWORD *)(v22 + 8) = v35;
              if ((mosyntdata_StartPhonList(a1, a7, a8) & 0x80000000) == 0)
              {
                v23 = *a6;
                if (!*a6)
                  v23 = a5;
                *v23 = v38;
                *a6 = *(_QWORD **)a9;
              }
            }
          }
        }
        else
        {
LABEL_20:
          if (*(int *)a2 >= 2 && (mosyntknowl_WriteTraceHeader(a1, 3u) & 0x80000000) == 0)
          {
            m2__cp__str("ignoring word", v41, 20);
            TraceConsProcessing(a1, a2, *(__int16 *)(a4 + 16), (unsigned __int8 *)v41);
          }
        }
      }
      else if ((mosyntdata_GetAddPhon(a1, *(_QWORD *)(a2 + 8), *(__int16 *)(a4 + 16), (__int16 *)(a4 + 24), 1, &v35, &v34) & 0x80000000) == 0&& (mosyntdata_AppendPhonList(a1, a7, a8, v35, v34) & 0x80000000) == 0)
      {
        v33 = (__n128 *)(a4 + 24);
        v38 = 0;
        v24 = (_QWORD *)(a4 + 8);
        if (*(_QWORD *)(a4 + 8))
        {
          if ((mosyntdata_StartNodeList(a1, &v37, &v36) & 0x80000000) != 0)
            return;
          while (1)
          {
            v24 = (_QWORD *)*v24;
            if (!v24)
              break;
            if ((TreatTreeAppend(a1, a2, a3, v24, &v37, &v36, a7, a8, a9) & 0x80000000) != 0)
              return;
          }
          v27 = *a6;
          if (*a6)
          {
            while (1)
            {
              v27 = (_QWORD *)*v27;
              if (!v27)
                break;
              *a6 = v27;
            }
          }
          if (v37)
          {
            mosyntdata_NewSyntNode(a1, *(_WORD *)(a4 + 16), v33, (uint64_t *)&v38);
            if (v28 < 0)
              return;
            v30 = v37;
            v29 = v38;
            *(_QWORD *)((char *)v38 + 52) = *(_QWORD *)(a4 + 52);
            v29[1] = v30;
          }
        }
        else if (*(_QWORD *)a9)
        {
          v25 = mosyntdata_SentTermWordData(a1, a3, *(_DWORD *)(*(_QWORD *)a9 + 52));
          if (v25)
          {
            v26 = (_QWORD *)(v25 + 8);
            PhonEle = mosyntdata_LastPhonEle(a1, *(_QWORD **)(v25 + 8));
            if ((mosyntdata_AppendPhonList(a1, v26, &PhonEle, *a7, *a8) & 0x80000000) != 0
              || (mosyntdata_StartPhonList(a1, a7, a8) & 0x80000000) != 0)
            {
              return;
            }
          }
        }
        if ((mosyntdata_GetAddPhon(a1, *(_QWORD *)(a2 + 8), *(__int16 *)(a4 + 16), (__int16 *)v33, 0, &v35, &v34) & 0x80000000) == 0
          && (mosyntdata_AppendPhonList(a1, a7, a8, v35, v34) & 0x80000000) == 0)
        {
          if (!*(_QWORD *)a9
            || (v31 = mosyntdata_SentTermWordData(a1, a3, *(_DWORD *)(*(_QWORD *)a9 + 52))) == 0
            || (v32 = (_QWORD *)(v31 + 8),
                PhonEle = mosyntdata_LastPhonEle(a1, *(_QWORD **)(v31 + 8)),
                (mosyntdata_AppendPhonList(a1, v32, &PhonEle, v35, v34) & 0x80000000) == 0)
            && (mosyntdata_StartPhonList(a1, a7, a8) & 0x80000000) == 0)
          {
            mosyntdata_AppendNode(a1, a5, a6, 1, v38);
          }
        }
      }
    }
  }
}

uint64_t TraceConsProcessing(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result;
  _OWORD v7[12];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  result = mosyntkbsymtab_ConsToString(a1, *(uint64_t **)(a2 + 8), a3, (char *)v7, 200);
  if ((result & 0x80000000) == 0)
    return mosyntbase_WriteMessage(a1, "%s cons %s\\n", 0, a4, 20, (unsigned __int8 *)v7, 200, "", 0);
  return result;
}

uint64_t mosyntpal_ALLOCATE(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8);
  if ((inited & 0x80000000) == 0)
  {
    v6 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, a3);
    *a2 = v6;
    if (v6)
      return inited;
    else
      return 2371887114;
  }
  return inited;
}

uint64_t mosyntpal_DEALLOCATE(uint64_t a1, uint64_t *a2)
{
  uint64_t inited;
  uint64_t v5;

  v5 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5);
  heap_Free(*(_QWORD **)(v5 + 8), *a2);
  *a2 = 0;
  return inited;
}

uint64_t mosyntpal_TotAllocSize()
{
  return 0;
}

uint64_t mosyntpal_ShowAllocList()
{
  return 0;
}

_BYTE *mosynt_strncpy_nopadding(_BYTE *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  BOOL v6;

  if (a3)
  {
    v3 = a3 - 1;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      if (v5)
        v6 = v3 == 0;
      else
        v6 = 1;
      --v3;
    }
    while (!v6);
  }
  return result;
}

uint64_t mosyntpal_IntToString(unsigned int a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  int v10;
  BOOL v11;
  char v13[500];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  LH_itoa(a1, v13, 0xAu);
  v6 = (a4 - 1);
  if (a4 >= 1)
  {
    if (a4 != 1)
    {
      v7 = v6 - 1;
      v8 = v13;
      v9 = a3;
      do
      {
        v10 = *v8++;
        *v9++ = v10;
        if (v10)
          v11 = v7 == 0;
        else
          v11 = 1;
        --v7;
      }
      while (!v11);
    }
    a3[v6] = 0;
  }
  return 0;
}

uint64_t mosyntpal_CardToString(unsigned int a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  int v10;
  BOOL v11;
  char v13[500];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  LH_utoa(a1, v13, 0xAu);
  v6 = (a4 - 1);
  if (a4 >= 1)
  {
    if (a4 != 1)
    {
      v7 = v6 - 1;
      v8 = v13;
      v9 = a3;
      do
      {
        v10 = *v8++;
        *v9++ = v10;
        if (v10)
          v11 = v7 == 0;
        else
          v11 = 1;
        --v7;
      }
      while (!v11);
    }
    a3[v6] = 0;
  }
  return 0;
}

uint64_t mosyntpal_StringToInt(uint64_t a1, uint64_t a2, int *a3, BOOL *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  char *v18;
  int v19;
  int v20;
  int v22;
  BOOL v23;

  v4 = 0;
  do
  {
    v5 = *(char *)(a1 + v4);
    v6 = *(unsigned __int8 *)(a1 + v4++);
  }
  while (v5 <= 32 && v6 != 0);
  if (v6 == 45 || v6 == 43)
    v9 = v4 + 1;
  else
    v9 = v4;
  v10 = (v9 - 1);
  v11 = *(unsigned __int8 *)(a1 + v10);
  v12 = (v11 - 58) < 0xFFFFFFF6;
  if ((v11 - 48) > 9)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    if ((v6 == 43) <= (v6 == 45))
      v14 = v6 == 45;
    else
      v14 = v6 == 43;
    v15 = v14 + v4;
    do
    {
      v16 = v11 + 10 * v13 - 48;
      v17 = v16 < v13;
      if (v16 > v13)
        v13 = v16;
      if (v17)
        v12 = 1;
      v11 = *(unsigned __int8 *)(a1 + v15++);
    }
    while ((v11 - 48) < 0xA);
    v10 = (v15 - 1);
  }
  v18 = (char *)(a1 + v10);
  do
  {
    v20 = *v18++;
    v19 = v20;
  }
  while (v20 <= 32 && v19 != 0);
  if (v6 == 45)
    v22 = -v13;
  else
    v22 = v13;
  v23 = (v12 | v19) == 0;
  if (!v23)
    v22 = 0;
  *a4 = v23;
  *a3 = v22;
  return 0;
}

uint64_t mosyntpal_StringToCard(uint64_t a1, uint64_t a2, unsigned int *a3, BOOL *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  char *v14;
  int v15;
  int v16;
  BOOL v18;

  v4 = 0;
  do
  {
    v5 = *(char *)(a1 + v4);
    v6 = *(unsigned __int8 *)(a1 + v4++);
  }
  while (v5 <= 32 && v6 != 0);
  v8 = (v6 - 58) < 0xFFFFFFF6;
  v9 = (v4 - 1);
  v10 = *(unsigned __int8 *)(a1 + v9);
  if ((v10 - 48) > 9)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v10 + 10 * v11 - 48;
      v13 = v12 >= v11;
      if (v12 > v11)
        v11 = v12;
      if (!v13)
        v8 = 1;
      v10 = *(unsigned __int8 *)(a1 + v4++);
    }
    while ((v10 - 48) < 0xA);
    v9 = (v4 - 1);
  }
  v14 = (char *)(a1 + v9);
  do
  {
    v16 = *v14++;
    v15 = v16;
  }
  while (v16 <= 32 && v15 != 0);
  v18 = (v8 | v15) == 0;
  if (!v18)
    v11 = 0;
  *a4 = v18;
  *a3 = v11;
  return 0;
}

uint64_t mosyntpal_WriteChar(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  int v8;
  uint64_t v10;

  v10 = 0;
  if (!a1)
    return 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10);
  if ((inited & 0x80000000) == 0)
  {
    if (a2 == 10)
    {
      *(_BYTE *)(a1 + 16 + *(int *)(a1 + 1020)) = 0;
      log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"FE_MOSYNT", 0, 0, (uint64_t)"%s", v4, v5, v6, a1 + 16);
      *(_DWORD *)(a1 + 1020) = 0;
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 1020);
      if (v8 == 1000)
      {
        *(_BYTE *)(a1 + 1016) = 0;
        log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"FE_MOSYNT", 0, 0, (uint64_t)"%s", v4, v5, v6, a1 + 16);
        v8 = 0;
        *(_DWORD *)(a1 + 1020) = 0;
      }
      *(_BYTE *)(a1 + v8 + 16) = a2;
      ++*(_DWORD *)(a1 + 1020);
    }
  }
  return inited;
}

uint64_t mosyntpal_WriteString(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5;
  char v6;
  int v7;

  if (a3 >= 1)
  {
    v5 = a3;
    do
    {
      v7 = *a2++;
      v6 = v7;
      if (!v7)
        break;
      mosyntpal_WriteChar(a1, v6);
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t mosyntpal_WriteLn(uint64_t a1)
{
  mosyntpal_WriteChar(a1, 10);
  return 0;
}

uint64_t mosyntpal_WriteCard(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  _BYTE v7[500];
  char v8[500];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  LH_utoa(a2, v8, 0xAu);
  v3 = 0;
  do
  {
    v4 = v8[v3];
    v7[v3] = v4;
    if (!v4)
      break;
  }
  while (v3++ != 498);
  mosyntpal_WriteChar(a1, 10);
  return 0;
}

uint64_t mosyntpal_ReadBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *a5 = 0;
  return 0;
}

uint64_t mosyntpal_EOL()
{
  return 10;
}

uint64_t mosyntpal_CheckInterrupt()
{
  return 0;
}

uint64_t mosyntpal_IsAborted()
{
  return 0;
}

uint64_t wgram_CheckIfExists(_WORD *a1, uint64_t a2, _WORD *a3, int a4, _DWORD *a5)
{
  uint64_t inited;
  _WORD *RsrcHandleForThisApi;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[16];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v24 = 0;
  memset(v25, 0, sizeof(v25));
  v22 = 0;
  *a5 = 0;
  inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a3, a4, &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = kbaux_BuildBrokerString(v24, "wgram", (char *)v25, 0x100uLL);
  if ((inited & 0x80000000) != 0)
    return inited;
  RsrcHandleForThisApi = (_WORD *)getRsrcHandleForThisApi(v24, (uint64_t)a1, a2, (uint64_t)a3);
  v13 = wgram_OpenRiffForReading(RsrcHandleForThisApi, v12, (const char *)v25, (uint64_t *)&v22);
  v20 = v13;
  if ((v13 & 0x80000000) == 0)
  {
    *a5 = 1;
    return wgram_CloseRiff(&v22, v13, v14, v15, v16, v17, v18, v19);
  }
  if ((v13 & 0x1FFF) == 0xD || (v13 & 0x1FFF) == 3)
    return 0;
  return v20;
}

uint64_t getRsrcHandleForThisApi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *__s1;

  __s1 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) == 0
    && __s1
    && *__s1
    && cstdlib_strcmp(__s1, "internal"))
  {
    return a2;
  }
  return a4;
}

uint64_t wgram_LoadData(_WORD *a1, uint64_t a2, _WORD *a3, int a4, _QWORD *a5)
{
  uint64_t inited;
  _WORD *RsrcHandleForThisApi;
  uint64_t v12;
  uint64_t ObjcForThisApi;
  uint64_t AddRefCountedObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[16];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  memset(v26, 0, sizeof(v26));
  v22 = 0;
  v23 = 0;
  inited = InitRsrcFunction(a1, a2, &v25);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a3, a4, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a5)
    return 2371887111;
  inited = kbaux_BuildBrokerString(v25, "wgram", (char *)v26, 0x100uLL);
  if ((inited & 0x80000000) != 0)
    return inited;
  RsrcHandleForThisApi = (_WORD *)getRsrcHandleForThisApi(v25, (uint64_t)a1, a2, (uint64_t)a3);
  inited = wgram_OpenRiffForReading(RsrcHandleForThisApi, v12, (const char *)v26, (uint64_t *)&v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  ObjcForThisApi = getObjcForThisApi(v25, v24);
  AddRefCountedObject = objc_GetAddRefCountedObject(ObjcForThisApi, (uint64_t)v26, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))wgram_loc_ObjcLoadData, (void (*)(_QWORD, _QWORD, _OWORD *))wgram_loc_ObjcUnloadData, (uint64_t)v23, &v22);
  if ((AddRefCountedObject & 0x80000000) == 0)
  {
    *a5 = *(_QWORD *)(v22 + 32);
    return wgram_CloseRiff(&v23, AddRefCountedObject, v15, v16, v17, v18, v19, v20);
  }
  return AddRefCountedObject;
}

uint64_t wgram_loc_ObjcLoadData(_WORD *a1, int a2, const char *a3, uint64_t a4, uint64_t a5)
{
  char **v6;
  uint64_t v7;

  v6 = (char **)(a4 + 32);
  v7 = wgram_ReadFromRiff(a1, a2, a5, (uint64_t *)(a4 + 32));
  if ((v7 & 0x80000000) == 0)
    cstdlib_strcpy(*v6, a3);
  return v7;
}

uint64_t wgram_loc_ObjcUnloadData(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = *(_QWORD ***)(a3 + 32);
  if (!v12)
    return 2371887111;
  v13 = v16;
  v14 = wgram_ReleaseData(v12, v5, v6, v7, v8, v9, v10, v11);
  heap_Free(*(_QWORD **)(v13 + 8), (uint64_t)v12);
  return v14;
}

uint64_t wgram_UnloadData(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v10;
  uint64_t v11;

  if (!a5)
    return 2371887111;
  v10 = 0;
  v11 = 0;
  result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(a3, a4, &v10);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApi = getObjcForThisApi(v11, v10);
      return objc_ReleaseObject(ObjcForThisApi, *a5);
    }
  }
  return result;
}

uint64_t wgram_GetStartState(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = 2371887111;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 256);
    }
  }
  return result;
}

uint64_t wgram_GetFirstTrans(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;

  result = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    *a4 = -1;
    *a5 = -1;
    *a6 = -1;
    if (a2 < 0)
    {
      return 0;
    }
    else
    {
      v8 = a2 % *(_DWORD *)(a1 + 264);
      v9 = *(_QWORD *)(a1 + 272);
      v10 = *(unsigned int *)(v9 + 4 * v8);
      v11 = *(_DWORD *)(v9 + 4 * (v8 + 1));
      if ((int)v10 >= v11)
      {
LABEL_12:
        result = 0;
        *a3 = v10 + 1;
        a3[1] = v11;
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 280);
        v13 = 0xFFFFFFFC00000000 * v10;
        v14 = (int *)(v12 + 16 * (_DWORD)v10 + 8);
        while (1)
        {
          v15 = *v14;
          v14 += 4;
          LODWORD(v10) = v10 + 1;
          if (v15 == a2)
            break;
          v13 -= 0x400000000;
          if (v11 == (_DWORD)v10)
          {
            LODWORD(v10) = v11;
            goto LABEL_12;
          }
        }
        result = 0;
        *a3 = v10;
        a3[1] = v11;
        *a4 = *(_DWORD *)(v12 + (-(uint64_t)v13 >> 30));
        *a5 = *(_DWORD *)(v12 + ((uint64_t)(0x100000000 - v13) >> 30));
        *a6 = *(_DWORD *)(v12 + (((uint64_t)(0x200000000 - v13) >> 30) | 4));
      }
    }
  }
  return result;
}

uint64_t wgram_GetNextTrans(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;

  result = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    v8 = *a3;
    v9 = a3[1];
    if ((int)v8 >= v9)
    {
LABEL_11:
      *a3 = v8 + 1;
      v14 = -1;
      *a4 = -1;
      *a5 = -1;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 280);
      v11 = v8 << 34;
      v12 = (int *)(v10 + 16 * (_DWORD)v8 + 8);
      while (1)
      {
        v13 = *v12;
        v12 += 4;
        LODWORD(v8) = v8 + 1;
        if (v13 == a2)
          break;
        v11 += 0x400000000;
        if (v9 == (_DWORD)v8)
        {
          LODWORD(v8) = a3[1];
          goto LABEL_11;
        }
      }
      *a3 = v8;
      *a4 = *(_DWORD *)(v10 + (v11 >> 30));
      *a5 = *(_DWORD *)(v10 + ((v11 >> 30) | 4));
      v14 = *(_DWORD *)(v10 + ((v11 >> 30) | 0xC));
    }
    result = 0;
    *a6 = v14;
  }
  return result;
}

uint64_t wgram_GetFirstEpsTrans(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;

  v6 = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    v7 = (unsigned int *)(*(_QWORD *)(a1 + 312) + 4 * (a2 % *(_DWORD *)(a1 + 304)));
    v9 = *v7;
    v8 = v7[1];
    if ((int)v9 >= v8)
    {
LABEL_11:
      *a3 = v9 + 1;
      a3[1] = v8;
      v14 = -1;
      *a4 = -1;
      *a5 = 0;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 320);
      v11 = v9 << 34;
      v12 = (int *)(v10 + 16 * (_DWORD)v9);
      while (1)
      {
        v13 = *v12;
        v12 += 4;
        LODWORD(v9) = v9 + 1;
        if (v13 == a2)
          break;
        v11 += 0x400000000;
        if (v8 == (_DWORD)v9)
        {
          LODWORD(v9) = v8;
          goto LABEL_11;
        }
      }
      *a3 = v9;
      a3[1] = v8;
      v15 = *(_DWORD *)(v10 + ((v11 >> 30) | 4));
      *a4 = v15;
      *a5 = v15 == *(_DWORD *)(a1 + 260);
      v14 = *(_DWORD *)(v10 + ((v11 >> 30) | 0xC));
    }
    v6 = 0;
    *a6 = v14;
  }
  return v6;
}

uint64_t wgram_GetNextEpsTrans(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v6 = 2371887111;
  if (a1 && a3 && a4 && a5 && a6)
  {
    v7 = *a3;
    v8 = a3[1];
    if ((int)v7 >= v8)
    {
LABEL_11:
      *a3 = v7 + 1;
      v13 = -1;
      *a4 = -1;
      *a5 = 0;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 320);
      v10 = v7 << 34;
      v11 = (int *)(v9 + 16 * (_DWORD)v7);
      while (1)
      {
        v12 = *v11;
        v11 += 4;
        LODWORD(v7) = v7 + 1;
        if (v12 == a2)
          break;
        v10 += 0x400000000;
        if (v8 == (_DWORD)v7)
        {
          LODWORD(v7) = a3[1];
          goto LABEL_11;
        }
      }
      *a3 = v7;
      v14 = *(_DWORD *)(v9 + ((v10 >> 30) | 4));
      *a4 = v14;
      *a5 = v14 == *(_DWORD *)(a1 + 260);
      v13 = *(_DWORD *)(v9 + ((v10 >> 30) | 0xC));
    }
    v6 = 0;
    *a6 = v13;
  }
  return v6;
}

uint64_t mosyntkbaccphr_CheckMatchingConsFeat(uint64_t a1, int a2, unsigned __int16 *a3, int a4, unsigned __int16 *a5, char *a6)
{
  *a6 = 0;
  if (a2 == a4)
  {
    if (*a3)
      return mosyntknowl_CheckUnifiable(a1, a3, a5, a6);
    *a6 = 1;
  }
  return 0;
}

uint64_t mosyntkbaccphr_CheckMatchingConsFeat2(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, unsigned __int16 *a6, char *a7)
{
  uint64_t result;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  *a7 = 0;
  GetFeat(a2, a4, v13);
  result = 0;
  if (a3 == a5)
  {
    if (LOWORD(v13[0]))
    {
      return mosyntknowl_CheckUnifiable(a1, (unsigned __int16 *)v13, a6, a7);
    }
    else
    {
      result = 0;
      *a7 = 1;
    }
  }
  return result;
}

uint64_t GetFeat(uint64_t a1, unsigned int a2, _WORD *a3)
{
  uint64_t result;
  __int16 v5;
  int *v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  result = accphr_getFeatList(a1, a2, v10);
  v5 = v10[0];
  if (SLODWORD(v10[0]) >= 1)
  {
    v6 = (int *)v10 + 1;
    v7 = a3 + 1;
    v8 = LODWORD(v10[0]);
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
  }
  *a3 = v5;
  return result;
}

uint64_t mosyntkbaccphr_CheckMatchingConsFeat3(uint64_t a1, uint64_t a2, int a3, unsigned __int16 *a4, int a5, unsigned int a6, char *a7)
{
  uint64_t result;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 24);
  *a7 = 0;
  GetFeat(a2, a6, v13);
  result = 0;
  if (a3 == a5)
  {
    if (*a4)
    {
      return mosyntknowl_CheckUnifiable(a1, a4, (unsigned __int16 *)v13, a7);
    }
    else
    {
      result = 0;
      *a7 = 1;
    }
  }
  return result;
}

uint64_t mosyntkbaccphr_NilAccPhr()
{
  return 0;
}

uint64_t mosyntkbaccphr_GetNodeNegated(uint64_t a1, int a2)
{
  return accphr_getNodeNegated(a1, a2);
}

uint64_t mosyntkbaccphr_GetInstrRight(uint64_t a1, int a2)
{
  return accphr_getInstrRight(a1, a2);
}

uint64_t mosyntkbaccphr_GetRuleSetIsSubset(uint64_t a1, int a2)
{
  return accphr_getRuleSetIsSubset(a1, a2);
}

uint64_t mosyntkbaccphr_LookupAccPhrRule(uint64_t a1, uint64_t a2, int a3, __int16 *a4, _BYTE *a5, uint64_t a6)
{
  int FirstRule;
  uint64_t v13;
  int Rule;
  int Node;
  int v16;
  unsigned int v17;
  char v19;

  FirstRule = accphr_getFirstRule(a2, a3);
  v19 = 0;
  if (FirstRule == accphr_Nil())
  {
    v13 = 0;
LABEL_3:
    if (FirstRule == accphr_Nil())
    {
      *a5 = 0;
    }
    else
    {
      *a5 = 1;
      *(_QWORD *)a6 = a2;
      *(_DWORD *)(a6 + 40) = FirstRule;
      *(_DWORD *)(a6 + 8) = a3;
      return mosyntknowl_CopyFeatList(a4, (_WORD *)(a6 + 16));
    }
  }
  else
  {
    while (1)
    {
      Rule = accphr_getRule(1, a2, FirstRule);
      Node = accphr_getNode(5, a2, Rule);
      v16 = accphr_getRule(1, a2, FirstRule);
      v17 = accphr_getNode(6, a2, v16);
      v13 = mosyntkbaccphr_CheckMatchingConsFeat2(a1, a2, Node, v17, a3, (unsigned __int16 *)a4, &v19);
      if ((v13 & 0x80000000) != 0)
        break;
      if (!v19)
        FirstRule = accphr_getRule(14, a2, FirstRule);
      if (FirstRule == accphr_Nil() || v19)
        goto LABEL_3;
    }
  }
  return v13;
}

uint64_t mosyntkbaccphr_GetNextAccPhrEntry(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  int Rule;
  uint64_t v9;
  int v10;
  int Node;
  int v12;
  unsigned int v13;
  char v15;

  *a3 = 0;
  Rule = accphr_getRule(14, a2, *(_DWORD *)(a4 + 40));
  v15 = 0;
  if (Rule == accphr_Nil())
  {
    v9 = 0;
LABEL_3:
    if (Rule == accphr_Nil())
    {
      *a3 = 0;
    }
    else
    {
      *a3 = 1;
      *(_DWORD *)(a4 + 40) = Rule;
    }
  }
  else
  {
    while (1)
    {
      v10 = accphr_getRule(1, a2, Rule);
      Node = accphr_getNode(5, a2, v10);
      v12 = accphr_getRule(1, a2, Rule);
      v13 = accphr_getNode(6, a2, v12);
      v9 = mosyntkbaccphr_CheckMatchingConsFeat2(a1, a2, Node, v13, *(_DWORD *)(a4 + 8), (unsigned __int16 *)(a4 + 16), &v15);
      if ((v9 & 0x80000000) != 0)
        break;
      if (!v15)
        Rule = accphr_getRule(14, a2, Rule);
      if (Rule == accphr_Nil() || v15)
        goto LABEL_3;
    }
  }
  return v9;
}

uint64_t mosyntkbaccphr_WriteAccPhrNode(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int Node;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  _OWORD v19[6];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (accphr_getNodeNegated(a3, a4))
  {
    v8 = mosyntbase_Wr(a1, 126);
    if ((v8 & 0x80000000) != 0)
      return v8;
  }
  else
  {
    v8 = 0;
  }
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  switch(accphr_getNode(3, a3, a4))
  {
    case 0u:
      v9 = "?";
      goto LABEL_7;
    case 1u:
      Node = accphr_getNode(4, a3, a4);
      v14 = mosyntkbsymtab_AtomSymString(a1, a2, Node, (char *)v19, 100);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_25;
      v14 = mosyntbase_Wr(a1, 94);
      if ((v14 & 0x80000000) != 0)
        goto LABEL_25;
      v9 = (char *)v19;
      v10 = a1;
      v11 = 100;
LABEL_8:
      v12 = mosyntbase_WString(v10, (unsigned __int8 *)v9, v11);
LABEL_13:
      v8 = v12;
      if ((v12 & 0x80000000) != 0)
        return v8;
LABEL_14:
      if (accphr_getNodeMatchOp(a3, a4) == 6)
      {
        v17 = "*";
      }
      else if (accphr_getNodeMatchOp(a3, a4) == 3)
      {
        v17 = "+";
      }
      else if (accphr_getNodeMatchOp(a3, a4) == 1)
      {
        v17 = "$";
      }
      else
      {
        if (accphr_getNodeMatchOp(a3, a4) != 7)
          return v8;
        v17 = "@";
      }
      v14 = mosyntbase_WString(a1, (unsigned __int8 *)v17, 0);
LABEL_25:
      v8 = v14;
      break;
    case 2u:
      v15 = accphr_getNode(5, a3, a4);
      v16 = accphr_getNode(6, a3, a4);
      v12 = WriteConsFeat1(a1, a2, a3, v15, v16);
      goto LABEL_13;
    case 3u:
      switch(accphr_getNode(7, a3, a4))
      {
        case 1u:
          v9 = "'OBR'";
          break;
        case 2u:
          v9 = "'BOS'";
          break;
        case 3u:
          v9 = "'EOS'";
          break;
        case 4u:
          v9 = "'QOS'";
          break;
        default:
          v9 = "'(unknown property)'";
          break;
      }
LABEL_7:
      v10 = a1;
      v11 = 0;
      goto LABEL_8;
    default:
      goto LABEL_14;
  }
  return v8;
}

uint64_t WriteConsFeat1(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t result;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, 24);
  GetFeat(a3, a5, v9);
  result = mosyntkbsymtab_WriteCons(a1, a2, a4);
  if ((result & 0x80000000) == 0 && SLOWORD(v9[0]) >= 1)
  {
    result = mosyntbase_WString(a1, " ", 0);
    if ((result & 0x80000000) == 0)
      return mosyntkbsymtab_WriteFeatList(a1, a2, (__int16 *)v9);
  }
  return result;
}

uint64_t mosyntkbaccphr_WriteRuleHeadline(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  int Rule;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  unsigned int Node;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  _OWORD v19[6];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Rule = accphr_getRule(0, a3, a4);
  v9 = accphr_getRule(0, a3, a4);
  memset(v19, 0, 32);
  if (Rule >= 0)
    v10 = v9;
  else
    v10 = -v9;
  memset(&v19[2], 0, 64);
  v20 = 0;
  result = mosyntkbsymtab_AtomSymString(a1, a2, v10, (char *)v19, 100);
  if ((result & 0x80000000) == 0)
  {
    if ((int)accphr_getRule(0, a3, a4) < 1)
      result = mosyntbase_WriteMessage(a1, "^%s <== ", 0, (unsigned __int8 *)v19, 100, "", 0, "", 0);
    else
      result = mosyntbase_WriteMessage(a1, "^%s <-- ", 0, (unsigned __int8 *)v19, 100, "", 0, "", 0);
    if ((result & 0x80000000) == 0)
    {
      v12 = accphr_getRule(1, a3, a4);
      Node = accphr_getNode(5, a3, v12);
      v14 = accphr_getRule(1, a3, a4);
      v15 = accphr_getNode(6, a3, v14);
      result = WriteConsFeat1(a1, a2, a3, Node, v15);
      if ((result & 0x80000000) == 0)
      {
        result = mosyntbase_WString(a1, " [ ", 0);
        if ((result & 0x80000000) == 0)
        {
          v16 = accphr_getRule(2, a3, a4);
          result = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, v16);
          if ((result & 0x80000000) == 0)
          {
            result = mosyntbase_WString(a1, ", ", 0);
            if ((result & 0x80000000) == 0)
            {
              v17 = accphr_getRule(3, a3, a4);
              result = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, v17);
              if ((result & 0x80000000) == 0)
              {
                result = mosyntbase_WString(a1, ", ", 0);
                if ((result & 0x80000000) == 0)
                {
                  v18 = accphr_getRule(4, a3, a4);
                  result = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, v18);
                  if ((result & 0x80000000) == 0)
                    return mosyntbase_WString(a1, " ]", 0);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosyntkbaccphr_WriteChildrenList(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6)
{
  int v6;
  uint64_t v12;
  uint64_t v13;
  int i;
  int v15;
  int Node;
  int ChildrenOpType;
  uint64_t v18;
  char *v19;
  int Children;
  uint64_t v21;

  v6 = a6;
  if (accphr_Nil() != a6)
  {
    while (1)
    {
      v13 = mosyntbase_WString(a1, a4, a5);
      if ((v13 & 0x80000000) != 0)
        return v13;
      v13 = mosyntbase_WString(a1, "[ ", 0);
      if ((v13 & 0x80000000) != 0)
        return v13;
      for (i = accphr_getChildren(1, a3, v6); ; i = accphr_getNode(8, a3, v15))
      {
        v15 = i;
        if (i == accphr_Nil())
          break;
        v13 = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, v15);
        if ((v13 & 0x80000000) != 0)
          return v13;
        Node = accphr_getNode(8, a3, v15);
        if (Node != accphr_Nil())
        {
          v13 = mosyntbase_WString(a1, ", ", 0);
          if ((v13 & 0x80000000) != 0)
            return v13;
        }
      }
      v13 = mosyntbase_WString(a1, " ]", 0);
      if ((v13 & 0x80000000) != 0)
        return v13;
      ChildrenOpType = accphr_getChildrenOpType(a3, v6);
      if (ChildrenOpType == 2)
      {
        v18 = a1;
        v19 = " :FC";
      }
      else
      {
        if (ChildrenOpType != 1)
          goto LABEL_17;
        v18 = a1;
        v19 = " :OL";
      }
      v13 = mosyntbase_WString(v18, (unsigned __int8 *)v19, 0);
      if ((v13 & 0x80000000) != 0)
        return v13;
LABEL_17:
      Children = accphr_getChildren(2, a3, v6);
      if (Children == accphr_Nil())
        v21 = mosyntbase_WLn(a1);
      else
        v21 = mosyntbase_WStringLn(a1, "||", 0);
      v12 = v21;
      if ((v21 & 0x80000000) == 0)
      {
        v6 = accphr_getChildren(2, a3, v6);
        if (v6 != accphr_Nil())
          continue;
      }
      return v12;
    }
  }
  return 0;
}

uint64_t mosyntkbaccphr_WriteInstruction(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  char *v17;
  int Instr;
  int v19;
  int v20;
  int v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  accphr_getInstrType(a3, a4);
  if (accphr_getInstrType(a3, a4) <= 6)
  {
    if (accphr_getInstrTargetRange(a3, a4))
    {
      v8 = (unsigned __int8 *)(accphr_getInstrRight(a3, a4) ? "r_" : "l_");
      v10 = mosyntbase_WString(a1, v8, 0);
      if ((v10 & 0x80000000) != 0)
        return v10;
    }
    if (accphr_getInstrTargetRange(a3, a4) == 2)
    {
      v11 = "syll_";
    }
    else
    {
      if (accphr_getInstrTargetRange(a3, a4) != 3)
        goto LABEL_16;
      if (accphr_getInstr(5, a3, a4) == -1)
      {
        v11 = "prsyll_";
      }
      else if (accphr_getInstr(5, a3, a4))
      {
        v11 = "flsyll_";
      }
      else
      {
        v11 = "ssyll_";
      }
    }
    v10 = mosyntbase_WString(a1, (unsigned __int8 *)v11, 0);
    if ((v10 & 0x80000000) != 0)
      return v10;
LABEL_16:
    v12 = 0;
    v13 = "XL";
    v14 = "L";
    v15 = "H";
    v16 = "XH";
    switch(accphr_getInstrType(a3, a4))
    {
      case 0u:
        if (accphr_getInstr(2, a3, a4))
        {
          v10 = mosyntbase_WString(a1, "br", 0);
          if ((v10 & 0x80000000) != 0)
            return v10;
          v12 = 0;
          v13 = "XW";
          v14 = "W";
          v15 = "S";
        }
        else
        {
          v10 = mosyntbase_WString(a1, "bnd", 0);
          if ((v10 & 0x80000000) != 0)
            return v10;
          v13 = "XW";
          v14 = "W";
          v15 = "S";
          v12 = 1;
        }
        v16 = "XS";
        goto LABEL_27;
      case 2u:
        v17 = "emph";
        goto LABEL_25;
      case 3u:
        v17 = "rate";
        goto LABEL_25;
      case 4u:
        v17 = "pitch";
        goto LABEL_25;
      case 5u:
        v17 = "volume";
        goto LABEL_25;
      case 6u:
        v17 = "stress";
LABEL_25:
        v10 = mosyntbase_WString(a1, (unsigned __int8 *)v17, 0);
        if ((v10 & 0x80000000) != 0)
          return v10;
        v12 = 0;
LABEL_27:
        Instr = accphr_getInstr(0, a3, a4);
        if (Instr != accphr_Nil())
        {
          v19 = accphr_getInstr(0, a3, a4);
          if (accphr_getNode(3, a3, v19))
          {
            v10 = mosyntbase_WString(a1, "(", 0);
            if ((v10 & 0x80000000) != 0)
              return v10;
            v20 = accphr_getInstr(0, a3, a4);
            v10 = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, v20);
            if ((v10 & 0x80000000) != 0)
              return v10;
            v10 = mosyntbase_WString(a1, ")", 0);
            if ((v10 & 0x80000000) != 0)
              return v10;
          }
        }
        if ((v12 & 1) != 0)
          return mosyntbase_WString(a1, " = default", 0);
        v25 = 0;
        v26[0] = 0;
        *(_QWORD *)((char *)v26 + 5) = 0;
        v24 = 0;
        v22 = accphr_getInstr(2, a3, a4);
        v23 = "(no value)";
        switch(v22)
        {
          case 0:
            goto LABEL_47;
          case 1:
            v23 = "default";
            goto LABEL_47;
          case 2:
            v23 = (char *)v13;
            goto LABEL_47;
          case 3:
            v23 = (char *)v14;
            goto LABEL_47;
          case 4:
            v23 = "M";
            goto LABEL_47;
          case 5:
            v23 = (char *)v15;
            goto LABEL_47;
          case 6:
            v23 = (char *)v16;
LABEL_47:
            v9 = mosyntbase_CCopy((unsigned __int8 *)v23, 0, (uint64_t)&v25, 21, &v24);
            if ((v9 & 0x80000000) == 0)
              goto LABEL_48;
            return v9;
          default:
            v9 = 0;
LABEL_48:
            if (!accphr_getInstr(2, a3, a4))
              return v9;
            v10 = mosyntbase_WString(a1, " = ", 0);
            if ((v10 & 0x80000000) == 0)
              v10 = mosyntbase_WString(a1, (unsigned __int8 *)&v25, 21);
            break;
        }
        break;
      default:
        goto LABEL_27;
    }
    return v10;
  }
  return 0;
}

uint64_t mosyntkbaccphr_WritePromTemplate(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result;
  int Children;
  __int128 v10;

  result = mosyntbase_WString(a1, "<prom =", 0);
  if ((result & 0x80000000) == 0)
  {
    Children = accphr_getChildren(1, a3, a4);
    if (Children == accphr_Nil())
    {
      return mosyntbase_WStringLn(a1, " >", 0);
    }
    else
    {
      while (1)
      {
        HIDWORD(v10) = 0;
        LODWORD(v10) = 0;
        *(_QWORD *)((char *)&v10 + 4) = accphr_getNode(2, a3, Children);
        result = mosyntbase_WriteMessage(a1, " [%i] ", 0, "", 0, "", 0, "", v10);
        if ((result & 0x80000000) != 0)
          break;
        result = mosyntkbaccphr_WriteAccPhrNode(a1, a2, a3, Children);
        if ((result & 0x80000000) != 0)
          break;
        Children = accphr_getNode(8, a3, Children);
        if (Children == accphr_Nil())
          return mosyntbase_WStringLn(a1, " >", 0);
      }
    }
  }
  return result;
}

uint64_t mosyntkbaccphr_PhraseTypeToString(int a1, uint64_t a2, int a3)
{
  char *v3;
  BOOL v5;

  v5 = 0;
  if ((a1 - 1) > 8)
    v3 = "";
  else
    v3 = off_24D2855F0[a1 - 1];
  return mosyntbase_CCopy((unsigned __int8 *)v3, 0, a2, a3, &v5);
}

uint64_t mosyntkbaccphr_StringToPhraseType(uint64_t a1, unsigned __int8 *a2, int a3, int *a4)
{
  int v8;

  if (mosyntbase_CEqual(a2, a3, "P", 0))
  {
    v8 = 1;
LABEL_19:
    *a4 = v8;
    return 0;
  }
  if (mosyntbase_CEqual(a2, a3, "T", 0))
  {
    v8 = 2;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "S", 0))
  {
    v8 = 3;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "Y", 0))
  {
    v8 = 4;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "W", 0))
  {
    v8 = 5;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "AI", 0))
  {
    v8 = 6;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "AM", 0))
  {
    v8 = 7;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "AF", 0))
  {
    v8 = 8;
    goto LABEL_19;
  }
  if (mosyntbase_CEqual(a2, a3, "E", 0))
  {
    v8 = 9;
    goto LABEL_19;
  }
  return mosyntbase_WriteDevelMessage(a1, "***** illegal phrase type '%s'\\n", 0, a2, a3, "", 0, "", 0, 0, 0, 0);
}

uint64_t mosyntkbaccphr_SimplifiedPhraseType(int a1)
{
  if ((a1 - 1) > 8)
    return 0;
  else
    return dword_214F031F0[a1 - 1];
}

BOOL mosyntkbfst_IsValidPair(_DWORD *a1)
{
  return fst_validPair(a1);
}

uint64_t mosyntkbfst_GetFirstSameInSymPair(__int16 *a1, __int16 a2, uint64_t a3, BOOL *a4)
{
  int v5;

  fst_firstSamePair(a1, a2, a3);
  *a4 = v5 != 0;
  return 0;
}

uint64_t mosyntkbfst_GetNextSameInSymPair(uint64_t a1, int *a2, BOOL *a3)
{
  *a3 = fst_nextSamePair(a1, a2) != 0;
  return 0;
}

uint64_t mosyntkbfst_OutSym(uint64_t a1, _DWORD *a2)
{
  __int16 v3;
  int v4;

  v4 = 0;
  v3 = 0;
  fst_getPair(a1, a2, (_WORD *)&v4 + 1, &v4, &v3);
  return (__int16)v4;
}

uint64_t mosyntkbfst_NilFST()
{
  return 0;
}

uint64_t mosyntkbfst_GetTransductionMode(uint64_t a1, _DWORD *a2)
{
  fst_getTransductionMode(a1, a2);
  return 0;
}

uint64_t mosyntkbfst_WriteGraphPair(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, int a5)
{
  return WritePair(a1, a2, 1, a3, a4, a5);
}

uint64_t WritePair(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, _DWORD *a5, int a6)
{
  uint64_t result;
  char *v11;
  char *v12;
  __int16 v13;
  int v14;

  v14 = 0;
  v13 = 0;
  fst_getPair(a4, a5, (_WORD *)&v14 + 1, &v14, &v13);
  if ((a6 | 2) == 2)
  {
    if (HIWORD(v14))
    {
      result = mosyntbase_WString(a1, "\"", 0);
      if ((result & 0x80000000) != 0)
        return result;
      if (a3)
      {
        result = mosyntkbsymtab_WriteGraphSym(a1, (uint64_t)a2, SHIWORD(v14));
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        result = mosyntkbsymtab_WritePhonSym(a1, a2, SHIWORD(v14));
        if ((result & 0x80000000) != 0)
          return result;
      }
      v11 = "\"";
    }
    else
    {
      v11 = "@";
    }
    result = mosyntbase_WString(a1, (unsigned __int8 *)v11, 0);
    if ((result & 0x80000000) != 0)
      return result;
  }
  else
  {
    result = 0;
  }
  if (a6 == 2)
  {
    result = mosyntbase_WString(a1, "/", 0);
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if ((a6 - 1) > 1)
  {
    return result;
  }
  if (!(_WORD)v14)
  {
    v12 = "@";
    return mosyntbase_WString(a1, (unsigned __int8 *)v12, 0);
  }
  result = mosyntbase_WString(a1, "\"", 0);
  if ((result & 0x80000000) != 0)
    return result;
  if (!a3)
  {
    result = mosyntkbsymtab_WritePhonSym(a1, a2, (__int16)v14);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_23;
  }
  result = mosyntkbsymtab_WriteGraphSym(a1, (uint64_t)a2, (__int16)v14);
  if ((result & 0x80000000) == 0)
  {
LABEL_23:
    v12 = "\"";
    return mosyntbase_WString(a1, (unsigned __int8 *)v12, 0);
  }
  return result;
}

uint64_t mosyntkbfst_WritePhonPair(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, int a5)
{
  return WritePair(a1, a2, 0, a3, a4, a5);
}

uint64_t mosyntkbsgram_NilGrammar()
{
  return 0;
}

uint64_t mosyntkbsgram_NilIter(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = -1;
  return 0;
}

BOOL mosyntkbsgram_IsNilIter(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t mosyntkbsgram_StartCons(_DWORD *a1)
{
  unsigned int v2;

  v2 = 0;
  sgram_GetStartCons(a1, &v2);
  return v2;
}

BOOL mosyntkbsgram_HasEmptyRules(_BOOL8 a1)
{
  return sgram_HasEmptyRules(a1);
}

BOOL mosyntkbsgram_HasSimpleFollowRel(_BOOL8 a1)
{
  return sgram_HasSimpleFollowRel(a1);
}

uint64_t mosyntkbsgram_GetNextRuleSameLast(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  return sgram_GetNextRuleSameLast(a2, a3, a4, a5, a6);
}

uint64_t mosyntkbsgram_GetNextRuleSameFirst(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  return sgram_GetNextRuleSameFirst(a2, a3, a4, a5, a6);
}

uint64_t mosyntkbsgram_GetFirstEmptyRule(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  sgram_GetFirstEmptyRule(a1, a2, a3, &v5, &v4);
  return 0;
}

uint64_t mosyntkbsgram_GetNextEmptyRule(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  sgram_GetNextEmptyRule(a2, a3, &v5, &v4);
  return 0;
}

uint64_t mosyntkbsgram_GetRuleFeatLists(uint64_t *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  __int16 v7;
  __int16 v8;
  __int16 v9;
  _QWORD v11[2];
  int v12;
  _QWORD v13[2];
  int v14;
  _QWORD v15[2];
  int v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  sgram_GetRuleFeatLists(a1, v15, v13, v11);
  v7 = v15[0];
  if (SLOWORD(v15[0]) >= 1)
    memcpy(a2 + 1, (char *)v15 + 2, 2 * LOWORD(v15[0]));
  *a2 = v7;
  v8 = v13[0];
  if (SLOWORD(v13[0]) >= 1)
    memcpy(a3 + 1, (char *)v13 + 2, 2 * LOWORD(v13[0]));
  *a3 = v8;
  v9 = v11[0];
  if (SLOWORD(v11[0]) >= 1)
    memcpy(a4 + 1, (char *)v11 + 2, 2 * LOWORD(v11[0]));
  *a4 = v9;
  return 0;
}

uint64_t mosyntkbsgram_GetRuleVisAndCost(_DWORD *a1, _BYTE *a2, _DWORD *a3)
{
  int v5;

  v5 = 0;
  sgram_GetRuleVisAndCost(a1, &v5, a3);
  *a2 = v5;
  return 0;
}

BOOL mosyntkbsgram_IsFollowerCons(_BOOL8 a1, int a2, int a3)
{
  return sgram_IsFollowerCons(a1, a2, a3);
}

uint64_t sgram_OpenRiffForReading(_WORD *a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  return ssftriff_reader_ObjOpen(a1, a2, 2, a3, "SGRM", 1031, a4);
}

uint64_t sgram_CloseRiff(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;

  v8 = a2;
  if (a1)
  {
    LODWORD(result) = ssftriff_reader_ObjClose(*a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 >= 0)
      result = result;
    else
      result = v8;
    *a1 = 0;
  }
  else if ((int)a2 < 0)
  {
    return a2;
  }
  else
  {
    return 2371887111;
  }
  return result;
}

uint64_t sgram_ReadFromRiff(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int HashTab;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int v57;
  char __s1[4];
  char v59;

  v8 = -1923080188;
  if (!a2)
    return 2371887111;
  result = openChunk(a1, "GRAM", a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) != 0)
    return result;
  v56 = 0;
  v59 = 0;
  v57 = 0;
  *(_DWORD *)__s1 = 0;
  HashTab = ssftriff_reader_OpenChunk(a1, (__int32 *)__s1, &v57, &v56, v12, v13, v14, v15);
  if (HashTab < 0)
  {
LABEL_18:
    v8 = HashTab;
    goto LABEL_21;
  }
  if (!cstdlib_strcmp(__s1, "GRDS") && v57 == 44)
  {
    v17 = v56;
    *(_DWORD *)a2 = *v56;
    *(_DWORD *)(a2 + 8) = v17[1];
    *(_DWORD *)(a2 + 32) = v17[2];
    *(_DWORD *)(a2 + 56) = v17[3];
    *(_DWORD *)(a2 + 80) = v17[4];
    *(_DWORD *)(a2 + 104) = v17[5];
    *(_DWORD *)(a2 + 128) = v17[6];
    *(_DWORD *)(a2 + 160) = v17[7];
    *(_DWORD *)(a2 + 136) = v17[8];
    *(_DWORD *)(a2 + 208) = v17[9];
    *(_DWORD *)(a2 + 184) = v17[10];
    HashTab = ssftriff_reader_CloseChunk(a1);
    if ((HashTab & 0x80000000) == 0)
    {
      HashTab = detachChunk(a1, "GRFL", (void **)(a2 + 16), (_QWORD *)(a2 + 24), v18, v19, v20, v21);
      if ((HashTab & 0x80000000) == 0)
      {
        HashTab = detachChunk(a1, "GRER", (void **)(a2 + 40), (_QWORD *)(a2 + 48), v22, v23, v24, v25);
        if ((HashTab & 0x80000000) == 0)
        {
          HashTab = openChunk(a1, "GRRU", v26, v27, v28, v29, v30, v31);
          if ((HashTab & 0x80000000) == 0)
          {
            v36 = detachChunk(a1, "GRHE", (void **)(a2 + 64), (_QWORD *)(a2 + 72), v32, v33, v34, v35);
            if ((v36 & 0x80000000) == 0)
            {
              v36 = detachChunk(a1, "GRHS", (void **)(a2 + 88), (_QWORD *)(a2 + 96), v37, v38, v39, v40);
              if ((v36 & 0x80000000) == 0)
                v36 = detachChunk(a1, "GRHS", (void **)(a2 + 112), (_QWORD *)(a2 + 120), v41, v42, v43, v44);
            }
            v8 = v36;
            v45 = ssftriff_reader_CloseChunk(a1);
            if (v8 >= 0)
              v8 = v45;
            if (v8 < 0)
              goto LABEL_21;
            HashTab = sgram_ReadHashTab(a1, "GRSE", a2 + 136, v46, v47, v48, v49, v50);
            if ((HashTab & 0x80000000) == 0)
              HashTab = sgram_ReadHashTab(a1, "GRRE", a2 + 184, v51, v52, v53, v54, v55);
          }
        }
      }
    }
    goto LABEL_18;
  }
  ssftriff_reader_CloseChunk(a1);
LABEL_21:
  LODWORD(result) = ssftriff_reader_CloseChunk(a1);
  if (v8 >= 0)
    return result;
  else
    return v8;
}

uint64_t sgram_ReleaseData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;

  if (!a1)
    return 2371887111;
  v16 = ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD **)(a1 + 40);
  if (v17)
  {
    v18 = ssftriff_reader_ReleaseChunkData(v17, v9, v10, v11, v12, v13, v14, v15);
    if (v16 >= 0)
      v16 = v18;
  }
  v19 = ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 64), v9, v10, v11, v12, v13, v14, v15);
  if (v16 >= 0)
    v16 = v19;
  v27 = ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 88), v20, v21, v22, v23, v24, v25, v26);
  if (v16 >= 0)
    v16 = v27;
  v35 = ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a1 + 112), v28, v29, v30, v31, v32, v33, v34);
  if (v16 >= 0)
    v16 = v35;
  v43 = sgram_ReleaseHashTab(a1 + 136, v36, v37, v38, v39, v40, v41, v42);
  if (v16 >= 0)
    v16 = v43;
  LODWORD(result) = sgram_ReleaseHashTab(a1 + 184, v44, v45, v46, v47, v48, v49, v50);
  if (v16 >= 0)
    return result;
  else
    return v16;
}

uint64_t sgram_ReleaseHashTab(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;

  v9 = *(_QWORD **)(a1 + 8);
  if (v9)
    v10 = ssftriff_reader_ReleaseChunkData(v9, a2, a3, a4, a5, a6, a7, a8);
  else
    v10 = 0;
  v11 = *(_QWORD **)(a1 + 32);
  if (v11)
  {
    v12 = ssftriff_reader_ReleaseChunkData(v11, a2, a3, a4, a5, a6, a7, a8);
    if ((int)v10 >= 0)
      return v12;
    else
      return v10;
  }
  return v10;
}

uint64_t openChunk(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  char __s1[4];
  char v15;

  v15 = 0;
  v13 = 0;
  *(_DWORD *)__s1 = 0;
  v12 = 0;
  v10 = ssftriff_reader_OpenChunk(a1, (__int32 *)__s1, &v13, &v12, a5, a6, a7, a8);
  if ((v10 & 0x80000000) == 0 && cstdlib_strcmp(__s1, a2))
  {
    ssftriff_reader_CloseChunk(a1);
    return 2371887108;
  }
  return v10;
}

uint64_t detachChunk(uint64_t a1, const char *a2, void **a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  char __s1[4];
  char v22;

  v22 = 0;
  v20 = 0;
  *(_DWORD *)__s1 = 0;
  v12 = ssftriff_reader_OpenChunk(a1, (__int32 *)__s1, &v20, a4, a5, a6, a7, a8);
  if ((v12 & 0x80000000) != 0)
    return v12;
  if (!cstdlib_strcmp(__s1, a2))
  {
    if (!v20)
      return ssftriff_reader_CloseChunk(a1);
    v18 = ssftriff_reader_DetachChunkData(a1, a3, a4, v13, v14, v15, v16, v17);
    v12 = ssftriff_reader_CloseChunk(a1);
    if ((v18 & 0x80000000) != 0)
      return v18;
    return v12;
  }
  ssftriff_reader_CloseChunk(a1);
  return 2371887108;
}

uint64_t sgram_ReadHashTab(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  result = openChunk(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
  {
    v15 = detachChunk(a1, "GRHE", (void **)(a3 + 8), (_QWORD *)(a3 + 16), v11, v12, v13, v14);
    if ((v15 & 0x80000000) == 0)
      v15 = detachChunk(a1, "GRHS", (void **)(a3 + 32), (_QWORD *)(a3 + 40), v16, v17, v18, v19);
    v20 = v15;
    LODWORD(result) = ssftriff_reader_CloseChunk(a1);
    if (v20 >= 0)
      return result;
    else
      return v20;
  }
  return result;
}

uint64_t wgram_OpenRiffForReading(_WORD *a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  return ssftriff_reader_ObjOpen(a1, a2, 2, a3, "WGRM", 1031, a4);
}

uint64_t wgram_CloseRiff(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;

  v8 = a2;
  if (a1)
  {
    LODWORD(result) = ssftriff_reader_ObjClose(*a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 < 0)
      result = v8;
    else
      result = result;
    *a1 = 0;
  }
  else if ((int)a2 < 0)
  {
    return a2;
  }
  else
  {
    return 7;
  }
  return result;
}

uint64_t wgram_ReadFromRiff(_WORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int HashTab;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v35;
  char __s1[4];
  char v37;
  _DWORD *v38;
  unsigned int v39;
  char v40[4];
  char v41;

  v34 = 0;
  inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = heap_Calloc(*(_QWORD **)(v34 + 8), 1, 344);
  *a4 = v7;
  if (!v7)
    return 2371887114;
  v12 = v7;
  v37 = 0;
  v35 = 0;
  *(_DWORD *)__s1 = 0;
  v13 = ssftriff_reader_OpenChunk(a3, (__int32 *)__s1, &v35, 0, v8, v9, v10, v11);
  if ((v13 & 0x80000000) == 0)
  {
    if (!cstdlib_strcmp(__s1, "NFAG"))
    {
      v41 = 0;
      v39 = 0;
      *(_DWORD *)v40 = 0;
      v38 = 0;
      HashTab = ssftriff_reader_OpenChunk(a3, (__int32 *)v40, &v39, &v38, v14, v15, v16, v17);
      if ((HashTab & 0x80000000) == 0)
      {
        if (!cstdlib_strcmp(v40, "NFAS"))
        {
          v19 = v38;
          *(_DWORD *)(v12 + 256) = *v38;
          *(_DWORD *)(v12 + 260) = v19[1];
        }
        HashTab = ssftriff_reader_CloseChunk(a3);
        if ((HashTab & 0x80000000) == 0)
        {
          HashTab = wgram_ReadHashTab(a3, v12 + 264, v20, v21, v22, v23, v24, v25);
          if ((HashTab & 0x80000000) == 0)
            HashTab = wgram_ReadHashTab(a3, v12 + 304, v26, v27, v28, v29, v30, v31);
        }
      }
      LODWORD(v13) = HashTab;
    }
    v32 = ssftriff_reader_CloseChunk(a3);
    if ((int)v13 >= 0)
      return v32;
    else
      return v13;
  }
  return v13;
}

uint64_t wgram_ReleaseData(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;

  if (!a1)
    return 2371887111;
  v9 = ssftriff_reader_ReleaseChunkData(a1[36], a2, a3, a4, a5, a6, a7, a8);
  v17 = ssftriff_reader_ReleaseChunkData(a1[37], v10, v11, v12, v13, v14, v15, v16);
  if (v9 >= 0)
    v25 = v17;
  else
    v25 = v9;
  v26 = ssftriff_reader_ReleaseChunkData(a1[41], v18, v19, v20, v21, v22, v23, v24);
  v34 = ssftriff_reader_ReleaseChunkData(a1[42], v27, v28, v29, v30, v31, v32, v33);
  if (v26 >= 0)
    v35 = v34;
  else
    v35 = v26;
  if (v25 >= 0)
    return v35;
  else
    return v25;
}

uint64_t wgram_ReadHashTab(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v39;
  unsigned int v40;
  char __s1[4];
  char v42;
  _DWORD *v43;
  unsigned int v44;
  char v45[4];
  char v46;

  v42 = 0;
  v40 = 0;
  *(_DWORD *)__s1 = 0;
  v39 = 0;
  v10 = ssftriff_reader_OpenChunk(a1, (__int32 *)__s1, &v40, &v39, a5, a6, a7, a8);
  if ((v10 & 0x80000000) == 0)
  {
    if (!cstdlib_strcmp(__s1, "THTB"))
    {
      v46 = 0;
      v44 = 0;
      *(_DWORD *)v45 = 0;
      v43 = 0;
      v15 = ssftriff_reader_OpenChunk(a1, (__int32 *)v45, &v44, &v43, v11, v12, v13, v14);
      if (v15 < 0)
        goto LABEL_18;
      if (!cstdlib_strcmp(v45, "THTD"))
      {
        v16 = v43;
        *(_DWORD *)a2 = *v43;
        *(_DWORD *)(a2 + 4) = v16[1];
      }
      v15 = ssftriff_reader_CloseChunk(a1);
      if (v15 < 0)
      {
LABEL_18:
        LODWORD(v10) = v15;
      }
      else
      {
        v46 = 0;
        v44 = 0;
        *(_DWORD *)v45 = 0;
        v43 = 0;
        LODWORD(v10) = ssftriff_reader_OpenChunk(a1, (__int32 *)v45, &v44, &v43, v17, v18, v19, v20);
        if ((v10 & 0x80000000) == 0)
        {
          if (!cstdlib_strcmp(v45, "THTS"))
            LODWORD(v10) = ssftriff_reader_DetachChunkData(a1, (void **)(a2 + 24), (_QWORD *)(a2 + 8), v21, v22, v23, v24, v25);
          v26 = ssftriff_reader_CloseChunk(a1);
          if ((int)v10 >= 0)
            LODWORD(v10) = v26;
          if ((v10 & 0x80000000) == 0)
          {
            v46 = 0;
            v44 = 0;
            *(_DWORD *)v45 = 0;
            v43 = 0;
            LODWORD(v10) = ssftriff_reader_OpenChunk(a1, (__int32 *)v45, &v44, &v43, v27, v28, v29, v30);
            if ((v10 & 0x80000000) == 0)
            {
              if (!cstdlib_strcmp(v45, "THTE"))
                LODWORD(v10) = ssftriff_reader_DetachChunkData(a1, (void **)(a2 + 32), (_QWORD *)(a2 + 16), v31, v32, v33, v34, v35);
              v36 = ssftriff_reader_CloseChunk(a1);
              if ((int)v10 >= 0)
                LODWORD(v10) = v36;
            }
          }
        }
      }
    }
    v37 = ssftriff_reader_CloseChunk(a1);
    if ((int)v10 >= 0)
      return v37;
    else
      return v10;
  }
  return v10;
}

uint64_t kbaux_BuildBrokerString(uint64_t a1, const char *a2, char *a3, unint64_t a4)
{
  uint64_t result;
  int v9[2];
  char v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v9 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v9);
  if ((result & 0x80000000) == 0)
  {
    auxil_strlcpy(v10, "mosynt_", 0x80uLL);
    auxil_strlcat(v10, a2, 128);
    auxil_strlcat(v10, "_", 128);
    if (auxil_strlcat(v10, *(const char **)v9, 128) > 0x7F)
    {
      return 2371887113;
    }
    else
    {
      LODWORD(result) = brokeraux_ComposeBrokerString(a1, v10, 0, 1, *(char **)v9, 0, 0, a3, a4);
      if ((int)result >= 0)
        return result;
      else
        return result | 0x8D602000;
    }
  }
  return result;
}

uint64_t hlp_VoiceSetup(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;
  char *v4;
  char *v5;
  _BOOL4 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned __int8 v14;
  __int16 v15;
  char **v16;
  _BYTE __c[11];

  v16 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v2 = (_DWORD *)(a1 + 88);
  result = com_mosynt_UseMosynt(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (_BOOL4 *)(a1 + 88));
  if ((result & 0x80000000) == 0)
  {
    v15 = 0;
    memset(__c, 0, sizeof(__c));
    *(_DWORD *)(a1 + 244) = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "keep_stress", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(unsigned __int16 *)&__c[1] == 1&& *(_QWORD *)&__c[3])
    {
      v4 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v4)
        *v4 = 0;
      if (!cstdlib_strcmp(**(const char ***)&__c[3], "YES") || !cstdlib_strcmp(**(const char ***)&__c[3], "yes"))
        *(_DWORD *)(a1 + 244) = 1;
    }
    *(_BYTE *)(a1 + 360) = 0;
    v15 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "orthtrigger", &v16, &v15, &v14);
    if ((result & 0x80000000) == 0)
    {
      if (v15 == 1 && v16)
      {
        v5 = cstdlib_strchr(*v16, v14);
        if (v5)
          *v5 = 0;
        cstdlib_strcpy((char *)(a1 + 360), *v16);
      }
      *(_DWORD *)(a1 + 264) = 0;
      v15 = 0;
      if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", &v13) & 0x80000000) == 0
        && v13 == 1)
      {
        *(_DWORD *)(a1 + 264) = 1;
      }
      *(_DWORD *)(a1 + 248) = 0;
      v15 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "usetntag", &v16, &v15, &v14);
      if ((result & 0x80000000) == 0)
      {
        if (v15 == 1 && v16 && **v16 == 49)
          *(_DWORD *)(a1 + 248) = 1;
        *(_DWORD *)(a1 + 252) = 0;
        v15 = 0;
        result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "docclassmap", &v16, &v15, &v14);
        if ((result & 0x80000000) == 0)
        {
          if (v15 == 1 && v16 && !cstdlib_strncmp(*v16, "yes", 3uLL))
            *(_DWORD *)(a1 + 252) = 1;
          *(_DWORD *)(a1 + 256) = 0;
          v15 = 0;
          result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "feGlobaluseFullPOS", &v16, &v15, &v14);
          if ((result & 0x80000000) == 0)
          {
            if (v15 == 1 && v16 && !cstdlib_strncmp(*v16, "1", 1uLL))
              *(_DWORD *)(a1 + 256) = 1;
            *(_DWORD *)(a1 + 260) = 0;
            if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpppipelinemode", &v12) & 0x80000000) == 0
              && v12
              && *v12)
            {
              *(_DWORD *)(a1 + 260) = 1;
            }
            if ((*(unsigned int (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "global") == 2)*(_DWORD *)(a1 + 260) = 1;
            if (*v2 != 1
              || (*(_QWORD *)&__c[3] = 0,
                  result = com_mosynt_GetCfgParamVal(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)"mosynt_enablegraphsymcache", "yes", (char **)&__c[3]), (result & 0x80000000) == 0)&& (v6 = cstdlib_strcmp(*(const char **)&__c[3], "yes") == 0, result = kbsymtab_LoadData(*(_WORD **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_WORD **)(a1 + 320), *(_QWORD *)(a1 + 328), (uint64_t *)(a1 + 336), v6), (result & 0x80000000) == 0)&& (result = fst_LoadData(*(_WORD **)(a1 + 296), *(_QWORD *)(a1 + 304), (uint64_t *)(a1 + 344)), (result & 0x80000000) == 0))
            {
              result = com_depes_InitLayers(*(_QWORD *)a1, a1 + 96);
              if ((result & 0x80000000) == 0)
              {
                *(_QWORD *)(a1 + 224) = 0x3000200010000;
                *(_WORD *)(a1 + 232) = 4;
                if (*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 264))
                {
                  v7 = 8;
                  v8 = 7;
                  v9 = 6;
                  v10 = 5;
                }
                else
                {
                  v10 = 0;
                  v7 = 7;
                  v8 = 6;
                  v9 = 5;
                }
                *(_WORD *)(a1 + 234) = v10;
                *(_WORD *)(a1 + 238) = v9;
                *(_WORD *)(a1 + 240) = v8;
                v11 = v7 - (*(_DWORD *)(a1 + 248) == 0);
                *(_WORD *)(a1 + 236) = v11;
                *(_WORD *)(a1 + 106) = v11 + 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_global_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t Object;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v5 = 2316312583;
  v25 = 0;
  v26 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v28);
    if ((inited & 0x80000000) == 0)
    {
      v12 = heap_Calloc(*(_QWORD **)(v28 + 8), 1, 408);
      v17 = v28;
      if (v12)
      {
        v18 = v12;
        v19 = (_QWORD *)heap_Calloc(*(_QWORD **)(v28 + 8), 1, 1040);
        *(_QWORD *)(v18 + 312) = v19;
        if (v19)
        {
          *v19 = a3;
          v19[1] = a4;
          Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"LINGDB", &v27);
          if ((Object & 0x80000000) != 0)
            goto LABEL_14;
          *(_QWORD *)(v18 + 8) = *(_QWORD *)(v27 + 8);
          Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
          if ((Object & 0x80000000) != 0)
            goto LABEL_14;
          v21 = v26;
          *(_QWORD *)(v18 + 32) = *(_QWORD *)(v26 + 8);
          *(_OWORD *)(v18 + 16) = *(_OWORD *)(v21 + 16);
          Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v25);
          if ((Object & 0x80000000) != 0)
            goto LABEL_14;
          v22 = v25;
          *(_QWORD *)(v18 + 56) = *(_QWORD *)(v25 + 8);
          *(_OWORD *)(v18 + 40) = *(_OWORD *)(v22 + 16);
          *(_QWORD *)v18 = v28;
          *(_DWORD *)(v18 + 268) = 0;
          *(_QWORD *)(v18 + 296) = a3;
          *(_QWORD *)(v18 + 304) = a4;
          *(_QWORD *)(v18 + 320) = a1;
          *(_QWORD *)(v18 + 328) = a2;
          *(_QWORD *)(v18 + 400) = 0;
          *(_OWORD *)(v18 + 368) = 0u;
          *(_OWORD *)(v18 + 384) = 0u;
          Object = hlp_VoiceSetup(v18);
          if ((Object & 0x80000000) != 0
            || (Object = globalbeadapt_SetFEBOOLKeyword((_QWORD *)v18, (uint64_t)"mdesegpos_morpheme_processing", (_DWORD *)(v18 + 272), 0), (Object & 0x80000000) != 0)|| (Object = globalbeadapt_SetFEBOOLKeyword((_QWORD *)v18, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(v18 + 276), 1), (Object & 0x80000000) != 0))
          {
LABEL_14:
            v5 = Object;
          }
          else
          {
            v5 = globalbeadapt_SetFEBOOLKeyword((_QWORD *)v18, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(v18 + 280), 1);
            if ((v5 & 0x80000000) == 0)
            {
              v23 = 62344;
LABEL_18:
              *(_QWORD *)a5 = v18;
              *(_DWORD *)(a5 + 8) = v23;
              return v5;
            }
          }
LABEL_17:
          fe_global_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
          v18 = 0;
          v23 = 0;
          goto LABEL_18;
        }
        v17 = v28;
      }
      log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"FE_GLOBAL", 38000, 0, v13, v14, v15, v16, v25);
      v5 = 2316312586;
      goto LABEL_17;
    }
    return inited;
  }
  return v5;
}

uint64_t fe_global_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck(a1, a2, 62344, 408);
  if ((result & 0x80000000) != 0)
    return 2316312584;
  if (a1)
  {
    hlp_UnloadSymTabs(a1);
    if (*(_QWORD *)(a1 + 344))
    {
      fst_UnloadData(*(_WORD **)(a1 + 296), *(_QWORD *)(a1 + 304), (uint64_t *)(a1 + 344));
      *(_QWORD *)(a1 + 344) = 0;
    }
    if (*(_QWORD *)(a1 + 8))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    v4 = *(_QWORD *)(a1 + 312);
    if (v4)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v4);
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_global_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62344, 408);
  if ((result & 0x80000000) != 0)
    return 2316312584;
  if (a1)
  {
    result = hlp_UnloadSymTabs(a1);
    if ((result & 0x80000000) == 0)
    {
      if (!*(_QWORD *)(a1 + 344)
        || (result = fst_UnloadData(*(_WORD **)(a1 + 296), *(_QWORD *)(a1 + 304), (uint64_t *)(a1 + 344)),
            *(_QWORD *)(a1 + 344) = 0,
            (result & 0x80000000) == 0))
      {
        result = hlp_VoiceSetup(a1);
        if ((result & 0x80000000) == 0)
        {
          result = globalbeadapt_SetFEBOOLKeyword((_QWORD *)a1, (uint64_t)"mdesegpos_morpheme_processing", (_DWORD *)(a1 + 272), 0);
          if ((result & 0x80000000) == 0)
          {
            result = globalbeadapt_SetFEBOOLKeyword((_QWORD *)a1, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(a1 + 276), 1);
            if ((result & 0x80000000) == 0)
              return globalbeadapt_SetFEBOOLKeyword((_QWORD *)a1, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(a1 + 280), 1);
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_UnloadSymTabs(uint64_t a1)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 336))
    return 0;
  result = kbsymtab_UnloadData(*(_WORD **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_WORD **)(a1 + 320), *(_QWORD *)(a1 + 328), (uint64_t *)(a1 + 336));
  *(_QWORD *)(a1 + 336) = 0;
  return result;
}

uint64_t fe_global_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62344, 408);
  if ((int)result >= 0)
    return result;
  else
    return 2316312584;
}

uint64_t fe_global_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unsigned __int16 v23;
  int v24;
  const char *v25;
  char *v26;
  int v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  size_t v32;
  char *j;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  size_t v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  int v48;
  char *v49;
  char v50;
  char *v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v53;
  __int16 v54;
  int v55;
  unsigned __int16 v56;
  int v57;
  uint64_t (*v58)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *);
  __int16 v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t k;
  uint64_t v78;
  unsigned int v80;
  int v81;
  size_t v82;
  int v83;
  char *__s1;
  __int16 v85;
  unsigned __int16 v86;
  char *v87;
  int v88;
  char *v89;
  __int16 v90;
  int v91;
  char *__s;
  char *v93;
  char *v94;
  char v95[2];
  unsigned int v96;
  __int16 v97;
  int v98;
  int v99;
  int v100;
  char *v101[18];

  v101[16] = *(char **)MEMORY[0x24BDAC8D0];
  v85 = 0;
  __s1 = 0;
  v83 = 0;
  if ((safeh_HandleCheck(a1, a2, 62344, 408) & 0x80000000) != 0)
    return 2316312584;
  v89 = 0;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 104);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_175;
  *(_DWORD *)(a1 + 352) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"foreignpron", &__s1) & 0x80000000) == 0
    && __s1
    && !cstdlib_strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 352) = 1;
  }
  *(_DWORD *)(a1 + 356) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"nlucompatvc6be", &__s1) & 0x80000000) == 0
    && __s1
    && !cstdlib_strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 356) = 1;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v88 + 2);
  if ((v10 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v88), 0, &v85) & 0x80000000) == 0&& v85 == 1)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, HIWORD(v88), 0, &v89, &v88);
    if ((v10 & 0x80000000) == 0 && (unsigned __int16)v88 >= 2u)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        v11 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 5000, 1);
        *(_QWORD *)(a1 + 368) = v11;
        v16 = *(_QWORD *)a1;
        if (v11)
        {
          v17 = heap_Calloc(*(_QWORD **)(v16 + 8), 5000, 1);
          *(_QWORD *)(a1 + 376) = v17;
          v16 = *(_QWORD *)a1;
          if (v17)
          {
            v18 = heap_Calloc(*(_QWORD **)(v16 + 8), 5000, 1);
            *(_QWORD *)(a1 + 384) = v18;
            v16 = *(_QWORD *)a1;
            if (v18)
            {
              v19 = heap_Calloc(*(_QWORD **)(v16 + 8), 5000, 1);
              *(_QWORD *)(a1 + 392) = v19;
              v16 = *(_QWORD *)a1;
              if (v19)
              {
                v20 = heap_Calloc(*(_QWORD **)(v16 + 8), 8, 8);
                *(_QWORD *)(a1 + 400) = v20;
                if (v20)
                {
                  for (i = 0; i != 64; i += 8)
                    *(_QWORD *)(*(_QWORD *)(a1 + 400) + i) = 0;
                  v22 = 0;
                  while (1)
                  {
                    *(_QWORD *)(*(_QWORD *)(a1 + 400) + v22) = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 5000, 1);
                    if (!*(_QWORD *)(*(_QWORD *)(a1 + 400) + v22))
                      break;
                    v22 += 8;
                    if (v22 == 64)
                      goto LABEL_27;
                  }
                }
                v16 = *(_QWORD *)a1;
              }
            }
          }
        }
        log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_GLOBAL", 38000, 0, v12, v13, v14, v15, v80);
        v10 = 2316312586;
        goto LABEL_176;
      }
LABEL_27:
      v99 = 0;
      v100 = 0;
      v98 = 0;
      v96 = 0;
      v101[0] = 0;
      v93 = 0;
      v94 = 0;
      __s = 0;
      v91 = 0;
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 2, HIWORD(v88), (char *)&v100 + 2);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_175;
      LOWORD(v98) = 0;
      v97 = 0;
      v23 = HIWORD(v100);
      if (!HIWORD(v100))
        goto LABEL_133;
      v24 = 0;
      v25 = "PHR:";
      v26 = "PRM";
LABEL_30:
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v23, 0, 1, &v96, (char *)&v99 + 2);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_175;
      if (v96 - 9 >= 6 && v96 != 4)
      {
        if (v96 != 15)
          goto LABEL_92;
        v24 = HIWORD(v100);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, HIWORD(v100), (char *)&v100 + 2);
        goto LABEL_41;
      }
      v90 = 0;
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 8)
                                                                                                + 168))(a3, a4, HIWORD(v100), 1, 1, &v98, (char *)&v99 + 2);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_175;
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, HIWORD(v100), 2, 1, &v97, (char *)&v99 + 2);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_175;
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v100), 14, &v90);
      v29 = *(_QWORD *)(a1 + 8);
      if (v28 < 0 || !v90)
      {
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v29 + 120))(a3, a4, HIWORD(v100), (char *)&v100 + 2);
        goto LABEL_41;
      }
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v29 + 176))(a3, a4, HIWORD(v100), 14, &__s, (char *)&v99 + 2);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_175;
      if (*(_DWORD *)(a1 + 356) != 1)
        goto LABEL_82;
      v81 = v24;
      v30 = __s;
      v31 = cstdlib_strlen(__s);
      v32 = v31;
      for (j = v30; ; ++j)
      {
        if (*j == 59)
        {
          *j = 0;
        }
        else if (!*j)
        {
          v34 = &v30[v31];
          v35 = v30;
          if (!v31)
          {
            v26 = "PRM";
            goto LABEL_81;
          }
          while (2)
          {
            if (cstdlib_strncmp(v35, v25, 4uLL))
            {
              if (!cstdlib_strncmp(v35, "POS:", 4uLL))
              {
                v36 = v25;
                v37 = v35 + 4;
                goto LABEL_65;
              }
            }
            else
            {
              v36 = v25;
              v37 = v35 + 4;
              v38 = cstdlib_strlen(v35 + 4);
              if (v38 >= 3)
              {
                v39 = *v37 - 66;
                v40 = v39 > 0xD;
                v41 = (1 << v39) & 0x2081;
                v42 = v40 || v41 == 0;
                if (!v42 && v35[5] == 45)
                {
                  v43 = v38;
                  v82 = v38 - 2;
                  cstdlib_memmove(v35 + 4, v35 + 6, v38 - 2);
                  v44 = -1;
                  if (v43 - 1 < v43)
                    v44 = 0;
                  bzero(&v37[v82], v44 + 2);
                }
              }
LABEL_65:
              v45 = cstdlib_strchr(v37, 43);
              v25 = v36;
              if (v45 && *v45)
              {
                v46 = (unsigned __int8 *)(v45 + 1);
                do
                  *(v46 - 1) = 0;
                while (*v46++);
              }
            }
            if (++v35 != v34)
              continue;
            break;
          }
          v48 = 0;
          v49 = v30;
          v26 = "PRM";
          do
          {
            v50 = *v49;
            if (*v49)
            {
              if (v48 == 1)
              {
                *v30++ = 59;
                v50 = *v49;
              }
              v48 = 0;
              *v30++ = v50;
            }
            else
            {
              v48 = 1;
            }
            ++v49;
            --v32;
          }
          while (v32);
LABEL_81:
          *v30 = 0;
          v24 = v81;
LABEL_82:
          hlp_NLUStrFind(__s, "BND", &v93, (unsigned __int16 *)&v91);
          hlp_NLUStrFind(__s, v26, &v94, (unsigned __int16 *)&v91 + 1);
          if (v97 && (_WORD)v24)
          {
            v95[0] = 0;
            if (!v94)
              goto LABEL_87;
            v95[0] = *v94;
            if (!v95[0]
              || (v95[1] = 0,
                  v51 = v26,
                  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 160),
                  v53 = HIWORD(v100),
                  v54 = cstdlib_strlen(v95),
                  v9 = v52(a3, a4, v53, 13, (unsigned __int16)(v54 + 1), v95, &v99),
                  v26 = v51,
                  (v9 & 0x80000000) == 0))
            {
LABEL_87:
              if (!v93)
                goto LABEL_95;
              v55 = *v93;
              if (v55 != 78 && v55 != 87)
              {
                if (v55 == 83)
                {
                  HIWORD(v98) = 200;
                  goto LABEL_94;
                }
                goto LABEL_95;
              }
              HIWORD(v98) = 0;
LABEL_94:
              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 8, 1, (char *)&v98 + 2, &v99);
              if ((v9 & 0x80000000) == 0)
              {
LABEL_95:
                v56 = HIWORD(v100);
                while (1)
                {
                  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, v56, (char *)&v100 + 2);
                  if ((v9 & 0x80000000) != 0)
                    break;
                  if (!HIWORD(v100))
                    goto LABEL_42;
                  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                  if ((v9 & 0x80000000) != 0)
                    break;
                  v56 = HIWORD(v100);
                  if (!HIWORD(v100))
                    goto LABEL_42;
                  if (v96 <= 0xF && ((1 << v96) & 0xFE10) != 0)
                  {
                    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                    if ((v9 & 0x80000000) != 0)
                      goto LABEL_175;
                    if (!v93)
                      goto LABEL_42;
                    v57 = *v93;
                    if (v57 == 78)
                    {
                      if (v96 != 15)
                        goto LABEL_42;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, HIWORD(v100), 2, 1, &v97, (char *)&v99 + 2);
                      if ((v9 & 0x80000000) == 0)
                      {
                        v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, (unsigned __int16)v24, 2, 1, &v97, &v99);
                        if ((v9 & 0x80000000) == 0)
                        {
                          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, HIWORD(v100), 4, v101, (char *)&v99 + 2);
                          if ((v9 & 0x80000000) == 0)
                          {
                            v58 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 160);
                            v59 = cstdlib_strlen(v101[0]);
                            v9 = v58(a3, a4, (unsigned __int16)v24, 4, (unsigned __int16)(v59 + 1), v101[0], &v99);
                            if ((v9 & 0x80000000) == 0)
                            {
                              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8)
                                                                                              + 120))(a3, a4, HIWORD(v100), &v100);
                              if ((v9 & 0x80000000) == 0)
                              {
                                v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 192))(a3, a4, HIWORD(v100));
                                if ((v9 & 0x80000000) == 0)
                                {
                                  HIWORD(v100) = v100;
                                  v26 = "PRM";
                                  goto LABEL_42;
                                }
                              }
                            }
                          }
                        }
                      }
                      goto LABEL_175;
                    }
                    if (v96 != 15)
                    {
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 88))(a3, a4, HIWORD(v100), (char *)&v100 + 2);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v96 = 15;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 0, 1, &v96, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 1, 1, &v98, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, (unsigned __int16)v24, 2, 1, &v97, (char *)&v99 + 2);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 2, 1, &v97, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, (unsigned __int16)v24, 2, 1, &v98, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, (unsigned __int16)v24, 4, v101, (char *)&v99 + 2);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 160);
                      v61 = HIWORD(v100);
                      v62 = cstdlib_strlen(v101[0]);
                      v9 = v60(a3, a4, v61, 4, (unsigned __int16)(v62 + 1), v101[0], &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, (unsigned __int16)v24, 4, 2, "P", &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      v57 = *v93;
                      v26 = "PRM";
                    }
                    if (v57 == 87)
                    {
                      HIWORD(v98) = 2;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 7, 1, (char *)&v98 + 2, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      HIWORD(v98) = 0;
                    }
                    else
                    {
                      if ((char)v57 != 83)
                        goto LABEL_42;
                      HIWORD(v98) = 1;
                      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 7, 1, (char *)&v98 + 2, &v99);
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_175;
                      HIWORD(v98) = 200;
                    }
                    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v100), 8, 1, (char *)&v98 + 2, &v99);
                    if ((v9 & 0x80000000) == 0)
                      goto LABEL_42;
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_175;
          }
LABEL_92:
          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, HIWORD(v100), (char *)&v100 + 2);
LABEL_41:
          if ((v9 & 0x80000000) != 0)
            goto LABEL_175;
LABEL_42:
          v23 = HIWORD(v100);
          if (!HIWORD(v100))
          {
LABEL_133:
            if (*(_DWORD *)(a1 + 244))
            {
              v63 = 2;
            }
            else if (*(_DWORD *)(a1 + 88))
            {
              v63 = 98;
            }
            else
            {
              v63 = 34;
            }
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8)
                                                                                               + 272))(a3, a4, v63, 3, 0, 0);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_175;
            v9 = globalbeadapt_SetupDepesInput((_QWORD *)a1, a3, a4, HIWORD(v88), (uint64_t)"global", 0, v64, v65);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_175;
            if (*(_DWORD *)(a1 + 88))
            {
              v9 = hlp_SaveLayers(a1);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
            }
            cstdlib_strcpy((char *)v101, "global");
            v66 = cstdlib_strlen((const char *)v101);
            if (*(_DWORD *)(a1 + 352))
            {
              v67 = v66;
              cstdlib_strcat((char *)v101, "foreign");
              if (((*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v101) & 0x80000000) != 0)
              {
                *((_BYTE *)v101 + v67) = 0;
                v9 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v101);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_175;
              }
            }
            else
            {
              hlp_WriteDepesLayers(a1, "before cgn");
              v9 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v101);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
              hlp_WriteDepesLayers(a1, "after cgn");
            }
            if (!*(_DWORD *)(a1 + 88))
              goto LABEL_158;
            v9 = hlp_ReconstituteLayers(a1);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_175;
            hlp_WriteDepesLayers(a1, "after realignment");
            v9 = fe_global_ApplyFSTs(a1);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_175;
            v9 = hlp_ReconstituteLayers(a1);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_175;
            hlp_WriteDepesLayers(a1, "before be_adapt");
            cstdlib_strcpy((char *)v101, "be_adapt");
            if (!(*(unsigned int (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v101)|| (v68 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v101), (v68 & 0x80000000) == 0)|| (v10 = v68, (v68 & 0x1FFF) == 4))
            {
              hlp_WriteDepesLayers(a1, "after be_adapt");
LABEL_158:
              v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32)
                                                                                                  + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &v87, &v86);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
              v87[v86] = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_GLOBAL", 5, 0, (uint64_t)"%s O1: %s", v69, v70, v71, (uint64_t)v101);
              v9 = globalbeadapt_DoPostprocessing((uint64_t *)a1, v89, &v87, 1);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
              v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 320))(a3, a4, 1);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
              v72 = *(_DWORD *)(a1 + 272);
              if (!v72 || v72 == 1 && !*(_DWORD *)(a1 + 276))
                goto LABEL_194;
              v9 = globalbeadapt_OutputMorphemesToLingDBAsWords((uint64_t *)a1, a3, a4, HIWORD(v88), v89, *(unsigned __int8 **)(a1 + 120), v87, &v83);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_175;
              if (v83 == 1)
              {
LABEL_194:
                v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v88), (uint64_t)v89, v87);
                if ((v9 & 0x80000000) != 0)
                  goto LABEL_175;
              }
              if (*(_DWORD *)(a1 + 272) == 1
                && *(_DWORD *)(a1 + 276) == 1
                && (!v83
                 && (v9 = globalbeadapt_SplitWordRecordsWithSpecialChar((uint64_t *)a1, a3, a4, HIWORD(v88), v89, (char *)(a1 + 360)), (v9 & 0x80000000) != 0)|| (v9 = globalbeadapt_RemoveSpecialChar((_QWORD *)a1, a3, a4, HIWORD(v88)), (v9 & 0x80000000) != 0)))
              {
LABEL_175:
                v10 = v9;
              }
              else
              {
                v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 272))(a3, a4, 4, 1, 0, 0);
                if ((v10 & 0x80000000) == 0 && *(_BYTE *)(a1 + 360))
                {
                  v9 = fe_global_CleanTriggerOrth(a1, a3, a4, HIWORD(v88));
                  goto LABEL_175;
                }
              }
            }
LABEL_176:
            com_depes_FreeLayers(*(_QWORD *)a1, a1 + 96);
            if (*(_DWORD *)(a1 + 88))
            {
              v73 = *(_QWORD *)(a1 + 368);
              if (v73)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v73);
                *(_QWORD *)(a1 + 368) = 0;
              }
              v74 = *(_QWORD *)(a1 + 376);
              if (v74)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v74);
                *(_QWORD *)(a1 + 376) = 0;
              }
              v75 = *(_QWORD *)(a1 + 384);
              if (v75)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v75);
                *(_QWORD *)(a1 + 384) = 0;
              }
              v76 = *(_QWORD *)(a1 + 392);
              if (v76)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v76);
                *(_QWORD *)(a1 + 392) = 0;
              }
              if (*(_QWORD *)(a1 + 400))
              {
                for (k = 0; k != 64; k += 8)
                {
                  v78 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + k);
                  if (v78)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v78);
                    *(_QWORD *)(*(_QWORD *)(a1 + 400) + k) = 0;
                  }
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 400));
                *(_QWORD *)(a1 + 400) = 0;
              }
            }
            return v10;
          }
          goto LABEL_30;
        }
      }
    }
  }
  return v10;
}

uint64_t hlp_SaveLayers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  char *__src;
  unsigned __int16 v7;

  __src = 0;
  if (!*(_WORD *)(a1 + 104))
    return 0;
  v2 = 0;
  v7 = 0;
  do
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32) + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (unsigned __int16)v2, &__src, &v7);
    if ((v3 & 0x80000000) != 0)
      break;
    v4 = __src[v7];
    __src[v7] = 0;
    cstdlib_strncpy(*(char **)(*(_QWORD *)(a1 + 400) + 8 * v2), __src, 0x1387uLL);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v2) + 4999) = 0;
    __src[v7] = v4;
    ++v2;
  }
  while (v2 < *(unsigned __int16 *)(a1 + 104));
  return v3;
}

uint64_t hlp_WriteDepesLayers(uint64_t result, char *a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  unsigned __int16 v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  char __s[5];
  unsigned __int16 v12;
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 88))
  {
    v3 = result;
    result = mosynt_TraceString(*(_QWORD *)(result + 312), "\n", 1u);
    if ((result & 0x80000000) == 0)
    {
      v13 = 0;
      v12 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unint64_t *, unsigned __int16 *))(*(_QWORD *)(v3 + 32) + 128))(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 0, &v13, &v12);
      if ((result & 0x80000000) == 0)
      {
        result = Utf8_LengthInUtf8chars(v13, v12);
        v14[0] = 0;
        v14[1] = 0;
        v4 = (unsigned __int16)result;
        if ((_WORD)result)
        {
          v5 = "\n";
          while (1)
          {
            v6 = v4 <= 0x32 ? result : 50;
            if (*(_WORD *)(v3 + 104))
              break;
LABEL_24:
            result = mosynt_TraceString(*(_QWORD *)(v3 + 312), v5, 1u);
            if ((result & 0x80000000) == 0)
            {
              result = v4 - v6;
              v4 = (unsigned __int16)(v4 - v6);
              if (v4)
                continue;
            }
            return result;
          }
          v7 = 0;
          while (1)
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unint64_t *, unsigned __int16 *))(*(_QWORD *)(v3 + 32) + 128))(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), (unsigned __int16)v7, &v13, &v12);
            if ((result & 0x80000000) != 0)
              break;
            result = mosynt_TraceString(*(_QWORD *)(v3 + 312), a2, 1u);
            if ((result & 0x80000000) != 0)
              break;
            result = mosynt_TraceString(*(_QWORD *)(v3 + 312), " L", 1u);
            if ((result & 0x80000000) != 0)
              break;
            result = mosynt_TraceInt(*(_QWORD *)(v3 + 312), (int)v7 + 1, 1u);
            if ((result & 0x80000000) != 0)
              break;
            result = mosynt_TraceString(*(_QWORD *)(v3 + 312), ": ", 1u);
            if ((result & 0x80000000) != 0)
              break;
            if (v6)
            {
              v8 = v5;
              v9 = 0;
              v10 = *((unsigned __int16 *)v14 + v7);
              while (1)
              {
                result = utf8_getUTF8Char(v13, (unsigned __int16)v10, __s);
                if ((result & 0x80000000) != 0)
                  break;
                result = mosynt_TraceString(*(_QWORD *)(v3 + 312), __s, 1u);
                if ((result & 0x80000000) != 0)
                  break;
                v10 += cstdlib_strlen(__s);
                if ((unsigned __int16)++v9 >= v6)
                {
                  *((_WORD *)v14 + v7) = v10;
                  v5 = v8;
                  goto LABEL_22;
                }
              }
              *((_WORD *)v14 + v7) = v10;
              return result;
            }
LABEL_22:
            result = mosynt_TraceString(*(_QWORD *)(v3 + 312), v5, 1u);
            if ((result & 0x80000000) != 0)
              return result;
            if (++v7 >= (unint64_t)*(unsigned __int16 *)(v3 + 104))
              goto LABEL_24;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_ReconstituteLayers(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v8;
  unsigned __int16 v9;
  char *__src;
  unsigned __int16 v12;

  v12 = 0;
  __src = 0;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32) + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &__src, &v12);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = __src[v12];
    __src[v12] = 0;
    cstdlib_strncpy(**(char ***)(a1 + 400), __src, 0x1387uLL);
    *(_BYTE *)(**(_QWORD **)(a1 + 400) + 4999) = 0;
    __src[v12] = v3;
    if (*(unsigned __int16 *)(a1 + 104) >= 2u)
    {
      v4 = 1;
      while (1)
      {
        v5 = v4 == 1 ? 126 : 0;
        v6 = mosynt_AlignFieldsWithRef(**(_QWORD **)(a1 + 400), *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v4), *(_QWORD *)(a1 + 384), 0x1388u, v5);
        if ((v6 & 0x80000000) != 0)
          break;
        cstdlib_strcpy(*(char **)(*(_QWORD *)(a1 + 400) + 8 * v4), *(const char **)(a1 + 384));
        v7 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 32) + 120);
        v8 = *(const char **)(a1 + 384);
        v9 = cstdlib_strlen(v8);
        v2 = v7(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (unsigned __int16)v4, v8, v9);
        if ((v2 & 0x80000000) == 0 && ++v4 < (unint64_t)*(unsigned __int16 *)(a1 + 104))
          continue;
        return v2;
      }
      return v6;
    }
  }
  return v2;
}

uint64_t fe_global_ApplyFSTs(uint64_t a1)
{
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v16;
  unsigned __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  unsigned int v21;
  char __s[5];
  unsigned __int8 *v23;

  v23 = 0;
  v20 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &v23);
  if ((result & 0x80000000) != 0)
    return result;
  v3 = *v23;
  result = mosynt_NormalizeSpaceFields(**(_BYTE ***)(a1 + 400), *(_QWORD *)(a1 + 384), 0x1388u);
  if ((result & 0x80000000) != 0)
    return result;
  v4 = 0;
  LOWORD(v5) = 0;
  while (1)
  {
    v6 = *(char **)(a1 + 384);
    v7 = v6[v4];
    if (v7 == 32)
    {
      if ((unsigned __int16)v5 >= v4)
      {
        LOBYTE(v7) = 32;
      }
      else
      {
        v5 = (unsigned __int16)v5;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 384) + v5++) = 126;
        while (v4 != v5);
        v6 = *(char **)(a1 + 384);
        LOBYTE(v7) = v6[v4];
        LOWORD(v5) = v4;
      }
      goto LABEL_13;
    }
    if (v7 == 126)
      goto LABEL_14;
    if (!v6[v4])
      break;
LABEL_13:
    v6[(unsigned __int16)v5] = v7;
    LOWORD(v5) = v5 + 1;
LABEL_14:
    ++v4;
  }
  if ((unsigned __int16)v5 < v4)
  {
    v8 = (unsigned __int16)v5;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 384) + v8++) = 126;
    while (v4 != v8);
    v6 = *(char **)(a1 + 384);
  }
  mosynt_SubstAllSubstrOcc(v6, "~", " ", *(_BYTE **)(a1 + 392), 5000);
  result = mosynt_SubstAllSubstrOcc(*(char **)(a1 + 392), "¡", "~", *(_BYTE **)(a1 + 384), 5000);
  if ((result & 0x80000000) == 0)
  {
    v21 = 0;
    v19 = 95;
    v9 = *(_BYTE **)(a1 + 384);
    if (*v9)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        utf8_getUTF8Char((uint64_t)v9, (unsigned __int16)v11, __s);
        v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 32) + v10);
        if ((char)v12 < 33 || (char)v3 < 33 || v12 == v3)
          v13 = __s;
        else
          v13 = (char *)&v19;
        result = mosynt_App(*(_QWORD *)(a1 + 392), 5000, &v21, v13, &v20);
        if ((result & 0x80000000) != 0)
          break;
        v11 += cstdlib_strlen(__s);
        ++v10;
        v9 = *(_BYTE **)(a1 + 384);
        if (!v9[(unsigned __int16)v11])
        {
          v14 = v21;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v14 = 0;
LABEL_31:
      *(_BYTE *)(*(_QWORD *)(a1 + 392) + v14) = 0;
      result = mosynt_SentPhono(*(_QWORD *)(a1 + 312), *(uint64_t **)(a1 + 336), *(_QWORD *)(a1 + 344), *(unsigned __int8 **)(a1 + 392), *(char **)(*(_QWORD *)(a1 + 400) + 40), *(char **)(a1 + 368), 5000);
      if ((result & 0x80000000) == 0)
      {
        result = mosynt_SubstAllSubstrOcc(*(char **)(a1 + 368), "~", "¡", *(_BYTE **)(a1 + 392), 5000);
        if ((result & 0x80000000) == 0)
        {
          cstdlib_strcpy(*(char **)(a1 + 368), *(const char **)(a1 + 392));
          v19 = 95;
          v18 = 123;
          result = mosynt_SubstAllSubstrOcc(*(char **)(a1 + 368), &v19, &v18, *(_BYTE **)(a1 + 384), 5000);
          if ((result & 0x80000000) == 0)
          {
            result = mosynt_ReplaceNonSpaceFields(**(_QWORD **)(a1 + 400), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 376), 0x1388u, 126, 1);
            if ((result & 0x80000000) == 0)
            {
              v15 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 32) + 120);
              v16 = *(const char **)(a1 + 376);
              v17 = cstdlib_strlen(v16);
              return v15(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, v16, v17);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_global_CleanTriggerOrth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t i;
  __int16 v21;
  __int16 v22;
  unsigned __int16 v24;
  char *__s1;
  uint64_t v26;
  __int16 v27;
  int v28;
  int v29;

  v28 = 0;
  v29 = 0;
  v27 = 0;
  __s1 = 0;
  v26 = 0;
  v24 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char **, int *))(*(_QWORD *)(a1 + 8) + 176))(a2, a3, a4, 0, &__s1, &v28);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 176))(a2, a3, a4, 1, &v26, &v24);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = cstdlib_strstr(__s1, (const char *)(a1 + 360));
    if (v10)
    {
      v11 = v10;
LABEL_5:
      v12 = &v11[cstdlib_strlen((const char *)(a1 + 360))];
      v13 = (unsigned __int16)cstdlib_strlen(v11);
      v14 = cstdlib_strlen((const char *)(a1 + 360));
      cstdlib_memmove(v11, v12, v13 - v14 + 1);
      v15 = v24;
      if (v24)
      {
        v16 = 0;
        v17 = v26;
        v18 = 12;
        do
        {
          if (*(_DWORD *)(v17 + v18) - *(_DWORD *)(v17 + 12) > (unsigned __int16)((_WORD)v11 - (_WORD)__s1))
          {
            v19 = cstdlib_strlen((const char *)(a1 + 360));
            v17 = v26;
            *(_DWORD *)(v26 + v18) -= v19;
            v15 = v24;
          }
          ++v16;
          v18 += 32;
        }
        while (v16 < v15);
      }
      for (i = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 8) + 104))(a2, a3, 2, a4, (char *)&v29 + 2);
            ;
            i = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 120))(a2, a3, HIWORD(v29), (char *)&v29 + 2))
      {
        v9 = i;
        if ((i & 0x80000000) != 0)
          break;
        if (!HIWORD(v29))
        {
          v11 = cstdlib_strstr(__s1, (const char *)(a1 + 360));
          if (v11)
            goto LABEL_5;
          return v9;
        }
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 168))(a2, a3, HIWORD(v29), 1, 1, &v29, &v28);
        if ((v8 & 0x80000000) != 0)
          return v8;
        if (v11 - __s1 < (unsigned __int16)v29)
        {
          v21 = cstdlib_strlen((const char *)(a1 + 360));
          LOWORD(v29) = v29 - v21;
          v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(a2, a3, HIWORD(v29), 1, 1, &v29, &v27);
          if ((v8 & 0x80000000) != 0)
            return v8;
        }
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 168))(a2, a3, HIWORD(v29), 2, 1, (char *)&v28 + 2, &v28);
        if ((v8 & 0x80000000) != 0)
          return v8;
        if (v11 - __s1 < HIWORD(v28))
        {
          v22 = cstdlib_strlen((const char *)(a1 + 360));
          HIWORD(v28) -= v22;
          v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(a2, a3, HIWORD(v29), 2, 1, (char *)&v28 + 2, &v27);
          if ((v8 & 0x80000000) != 0)
            return v8;
        }
      }
    }
  }
  return v9;
}

uint64_t fe_global_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62344, 408);
  if ((int)result >= 0)
    return result;
  else
    return 2316312584;
}

uint64_t fe_global_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2316312577;
  result = 0;
  *a2 = &IFeGlobal;
  return result;
}

uint64_t fe_global_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2316312583;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_global_ClassClose()
{
  return 0;
}

uint64_t get_ner_brokerstring(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t result;
  char *v7;
  char *__s2;
  char __s1[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  __s2 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)__s1 = 0u;
  v10 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v7);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "ner_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v7);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, a3);
    }
  }
  return result;
}

uint64_t updateNLUNE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  __int16 v25;
  char *__s;
  __int16 v28;
  int v29;

  v29 = 0;
  v28 = 0;
  __s = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a4 + 184))(a2, a3, a5, 14, (char *)&v29 + 2);
  if ((v14 & 0x80000000) != 0)
    return v14;
  if (!HIWORD(v29))
  {
LABEL_5:
    v15 = "";
    __s = "";
    goto LABEL_8;
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a4 + 176))(a2, a3, a5, 14, &__s, &v29);
  if ((v14 & 0x80000000) != 0)
    return v14;
  if ((unsigned __int16)v29 < 2u)
    goto LABEL_5;
  v15 = __s;
LABEL_8:
  v17 = cstdlib_strlen(v15);
  v18 = cstdlib_strlen(";NE:");
  v19 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v17 + v18 + 3, 1);
  if (!v19)
    return 2314215434;
  v20 = v19;
  cstdlib_strcpy(v19, __s);
  hlp_NLUStrSet(v20, "NE", (char *)(*(_QWORD *)(a7 + 8) + 40 * a6 + 30));
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v21, v22, v23, a5);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a4 + 160);
  v25 = cstdlib_strlen(v20);
  v16 = v24(a2, a3, a5, 14, (unsigned __int16)(v25 + 1), v20, &v28);
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v20);
  return v16;
}

uint64_t ner_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  const void *v37;
  unsigned __int16 v38;
  int v39;

  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a5 + 104))(a3, a4, 1, 0, (char *)&v39 + 2);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a5 + 184))(a3, a4, HIWORD(v39), 0, &v39);
  if ((v18 & 0x80000000) == 0 && (unsigned __int16)v39 == 1)
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, unsigned __int16 *))(a5 + 176))(a3, a4, HIWORD(v39), 0, &v35, &v38);
    if ((v18 & 0x80000000) == 0 && v38 >= 2u)
    {
      v19 = a9 || *(_DWORD *)(a2 + 36) != 1
          ? ner_getSentenceData(a1, a3, a4, a5, HIWORD(v39), v35, a2, a6, a7, a8, (uint64_t *)&v37)
          : ner_getSentenceData(a1, a3, a4, a5, HIWORD(v39), v35, a2, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t *)&v37);
      v18 = v19;
      if ((v19 & 0x80000000) == 0)
      {
        if (*(_WORD *)(a2 + 16))
        {
          v18 = fi_predict(*(uint64_t ****)a2, &v37, *(unsigned __int16 *)(a2 + 18), &v36, v20, v21, v22, v23);
          if ((v18 & 0x80000000) != 0)
          {
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"FI NER Prediction Failed", v25, v26, v27, 0);
            return v18;
          }
          if (*(_WORD *)(a2 + 16))
          {
            v28 = 0;
            v29 = 0;
            v30 = v36;
            v31 = *(_QWORD *)(a2 + 8);
            v32 = 78;
            do
            {
              if (!*(_WORD *)(v31 + 40 * v28 + 24))
                goto LABEL_26;
              v33 = 0;
              while (!v33)
              {
                v32 = **(unsigned __int8 **)(v30 + 8 * v29);
                *(_BYTE *)(v31 + 40 * v28 + 30) = v32;
                *(_BYTE *)(*(_QWORD *)(a2 + 8) + 40 * v28 + 31) = 0;
                v31 = *(_QWORD *)(a2 + 8);
LABEL_25:
                if (++v33 >= (unint64_t)*(unsigned __int16 *)(v31 + 40 * v28 + 24))
                  goto LABEL_26;
              }
              v34 = **(unsigned __int8 **)(v30 + 8 * v29 + 8 * v33);
              if (v32 == v34 || v34 == 78 || v32 == 78)
                goto LABEL_25;
              v32 = 78;
              *(_BYTE *)(v31 + 40 * v28 + 30) = 78;
              *(_BYTE *)(*(_QWORD *)(a2 + 8) + 40 * v28 + 31) = 0;
              v31 = *(_QWORD *)(a2 + 8);
LABEL_26:
              v29 += *(_WORD *)(v31 + 40 * v28++ + 24);
            }
            while (v28 < *(unsigned __int16 *)(a2 + 16));
          }
        }
      }
    }
  }
  return v18;
}

uint64_t ner_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  const char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  uint64_t UTF8Char;
  _BOOL4 IsChineseLetter;
  BOOL v56;
  uint64_t v57;
  _QWORD *v58;
  size_t v59;
  char *v60;
  int v61;
  unsigned int v62;
  __int16 *v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  unsigned __int16 v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t CharEmbeddingWithPOS;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  unsigned __int16 v79;
  __int16 *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned __int16 v89;
  int v90;
  unsigned int v91;
  unsigned __int16 v92;
  char __s[4];
  char v94;

  v18 = a1;
  v88 = 0;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"ner: processing=\"%s\"", (uint64_t)a6, a7, a8, (uint64_t)a6);
  *(_WORD *)(a7 + 18) = 0;
  *(_QWORD *)(a7 + 8) = 0;
  if (a6)
  {
    v22 = cstdlib_strlen(a6);
    v23 = 1;
    v24 = v22;
    if (v22)
    {
      v25 = a6;
      do
      {
        v27 = *(unsigned __int8 *)v25++;
        v26 = v27;
        if (v27 == 95 || v26 == 32)
          ++v23;
        --v24;
      }
      while (v24);
      *(_WORD *)(a7 + 16) = v23;
      if (!v23)
        goto LABEL_11;
    }
    else
    {
      *(_WORD *)(a7 + 16) = 1;
    }
    v28 = 2314215434;
    v92 = 0;
    v90 = 0;
    v91 = 0;
    v89 = 0;
    v87 = 0;
    v29 = heap_Calloc(*(_QWORD **)(v18 + 8), v23, 40);
    *(_QWORD *)(a7 + 8) = v29;
    if (v29)
    {
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a4 + 104))(a2, a3, 2, a5, &v92);
      if ((v30 & 0x80000000) != 0)
      {
LABEL_68:
        v28 = v30;
      }
      else
      {
        v31 = v92;
        if (!v92)
        {
LABEL_77:
          *(_WORD *)(a7 + 16) = 0;
          heap_Free(*(_QWORD **)(v18 + 8), *(_QWORD *)(a7 + 8));
          *(_QWORD *)(a7 + 8) = 0;
          return v30;
        }
        v83 = a8;
        v32 = 0;
        v86 = 0;
        while (1)
        {
          v33 = (unsigned __int16)v86 - 1;
          while (1)
          {
            v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(a4 + 168))(a2, a3, v31, 0, 1, &v91, (char *)&v90 + 2);
            if ((v34 & 0x80000000) != 0)
              goto LABEL_78;
            if (v91 > 0xA || ((1 << v91) & 0x610) == 0)
              goto LABEL_59;
            v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, v92, 1, 1, &v90, (char *)&v90 + 2);
            if ((v34 & 0x80000000) != 0)
              goto LABEL_78;
            v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a4 + 168))(a2, a3, v92, 2, 1, &v89, (char *)&v90 + 2);
            if ((v34 & 0x80000000) != 0)
              goto LABEL_78;
            v39 = v90;
            if ((unsigned __int16)v90 >= v89)
            {
              log_OutText(*(_QWORD *)(v18 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"ner: out of memory", v36, v37, v38, v78);
              v67 = 16049;
LABEL_87:
              v28 = v67 | 0x89F00000;
              goto LABEL_88;
            }
            ++v32;
            v40 = *(_QWORD *)(a7 + 8);
            if (!(_WORD)v86
              || (unsigned __int16)v90 != *(unsigned __int16 *)(v40 + 40 * v33 + 26)
              || v89 != *(unsigned __int16 *)(v40 + 40 * v33 + 28))
            {
              break;
            }
            v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a4 + 120))(a2, a3, v92, &v92);
            if ((v30 & 0x80000000) != 0)
              goto LABEL_68;
            v31 = v92;
            if (!v92)
              goto LABEL_70;
          }
          if (*(unsigned __int16 *)(a7 + 16) <= (unsigned __int16)v86)
          {
            *(_WORD *)(a7 + 16) = v86 + 1;
            v41 = heap_Realloc(*(uint64_t **)(v18 + 8), v40, 40 * (unsigned __int16)(v86 + 1));
            *(_QWORD *)(a7 + 8) = v41;
            if (!v41)
              break;
            v40 = v41;
            v39 = v90;
          }
          v42 = v40 + 40 * (unsigned __int16)v86;
          *(_WORD *)(v42 + 26) = v39;
          *(_WORD *)(v42 + 28) = v89;
          v43 = v89 - v90;
          *(_QWORD *)v42 = 0;
          v44 = v43;
          v45 = (char *)heap_Alloc(*(_QWORD *)(v18 + 8), v43 + 1);
          *(_QWORD *)(*(_QWORD *)(a7 + 8) + 40 * (unsigned __int16)v86) = v45;
          if (!v45)
            break;
          cstdlib_strncpy(v45, &a6[(unsigned __int16)v90], v44);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 40 * (unsigned __int16)v86) + v44) = 0;
          v46 = *(_QWORD *)(a7 + 8);
          v47 = v46 + 40 * (unsigned __int16)v86;
          v48 = *(const char **)v47;
          v80 = (__int16 *)(v47 + 24);
          v94 = 0;
          *(_DWORD *)__s = 0;
          v84 = (uint64_t *)v47;
          *(_QWORD *)(v47 + 16) = 0;
          v49 = (uint64_t *)(v47 + 16);
          v50 = Utf8_Utf8NbrOfSymbols(v48);
          if (v50 == 1)
          {
            v64 = 0;
          }
          else
          {
            v85 = v18;
            v51 = 0;
            v52 = 0;
            v82 = (int *)(v46 + 40 * (unsigned __int16)v86 + 32);
            v79 = v50 - 1;
            v81 = (unsigned __int16)(v50 - 1);
            while (1)
            {
              v53 = v52;
              UTF8Char = utf8_getUTF8Char(*v84, v52, __s);
              if ((UTF8Char & 0x80000000) != 0)
              {
                v28 = UTF8Char;
                v18 = v85;
                goto LABEL_88;
              }
              IsChineseLetter = utf8_IsChineseLetter(__s);
              if (cstdlib_strlen(__s) > 1
                || (__s[0] - 33 <= 0x3E
                  ? (v56 = ((1 << (__s[0] - 33)) & 0x7400000056003D8DLL) == 0)
                  : (v56 = 1),
                    v56 && __s[0] != 124))
              {
                if (!v51 && !IsChineseLetter)
                  break;
              }
              if (!v51)
              {
                *v82 = 0;
                v57 = heap_Calloc(*(_QWORD **)(v85 + 8), v81, 8);
                *v49 = v57;
                if (!v57)
                {
                  v18 = v85;
LABEL_86:
                  v67 = 8202;
                  goto LABEL_87;
                }
              }
              v58 = *(_QWORD **)(v85 + 8);
              v59 = cstdlib_strlen(__s);
              *(_QWORD *)(*v49 + v51) = heap_Calloc(v58, v59 + 1, 1);
              v60 = *(char **)(*v49 + v51);
              if (!v60)
              {
                v74 = 0;
                v18 = v85;
                do
                {
                  v75 = *v49;
                  v76 = *(_QWORD *)(*v49 + v74);
                  if (v76)
                  {
                    heap_Free(*(_QWORD **)(v85 + 8), v76);
                    v75 = *v49;
                  }
                  *(_QWORD *)(v75 + v74) = 0;
                  v74 += 8;
                }
                while (8 * v79 != v74);
                heap_Free(*(_QWORD **)(v85 + 8), *v49);
                *v49 = 0;
                goto LABEL_86;
              }
              cstdlib_strcpy(v60, __s);
              v52 = v53 + cstdlib_strlen(__s);
              v51 += 8;
              if (8 * v81 == v51)
              {
                v18 = v85;
                v61 = v86;
                v28 = 2314215434;
                v62 = (unsigned __int16)v86;
                v64 = v79;
                v63 = v80;
                goto LABEL_56;
              }
            }
            if ((__s[0] & 0xDFu) - 65 < 0x1A)
              v66 = 1;
            else
              v66 = 3;
            if (__s[0] - 48 < 0xA)
              v66 = 2;
            *v82 = v66;
            v64 = 1;
            v18 = v85;
          }
          v28 = 2314215434;
          v61 = v86;
          v62 = (unsigned __int16)v86;
          v63 = v80;
LABEL_56:
          *v63 = v64;
          v65 = *(_QWORD *)(a7 + 8);
          *(_WORD *)(a7 + 18) += *(_WORD *)(v65 + 40 * v62 + 24);
          if (*(_DWORD *)(a7 + 32))
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *))(a4 + 176))(a2, a3, v92, 5, v65 + 40 * v62 + 8, (char *)&v90 + 2);
          v86 = v61 + 1;
LABEL_59:
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a4 + 120))(a2, a3, v92, &v92);
          if ((v30 & 0x80000000) != 0)
            goto LABEL_68;
          v31 = v92;
          if (!v92)
          {
LABEL_70:
            if (!v32)
              goto LABEL_77;
            v34 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(v83 + 40))(a9, a10, &v87);
            if ((v34 & 0x80000000) != 0)
            {
LABEL_78:
              v28 = v34;
              break;
            }
            v68 = v87;
            if (*(_DWORD *)(a7 + 32))
              v68 = v87 + *(unsigned __int16 *)(a7 + 40);
            v69 = heap_Calloc(*(_QWORD **)(v18 + 8), v68 * *(unsigned __int16 *)(a7 + 18), 4);
            v88 = v69;
            if (v69)
            {
              v70 = v69;
              v71 = *(_QWORD *)(a7 + 8);
              v72 = *(unsigned __int16 *)(a7 + 16);
              if (*(_DWORD *)(a7 + 32))
                CharEmbeddingWithPOS = getCharEmbeddingWithPOS(v18, v83, a9, a10, &v88, v87, v71, v72, *(unsigned __int16 *)(a7 + 40));
              else
                CharEmbeddingWithPOS = getCharEmbedding(v18, v83, a9, a10, &v88, v87, v71, v72);
              v28 = CharEmbeddingWithPOS;
              if ((CharEmbeddingWithPOS & 0x80000000) != 0)
              {
                ner_freeNEData(v18, a7);
                heap_Free(*(_QWORD **)(v18 + 8), v70);
              }
              else
              {
                *a11 = v70;
              }
              return v28;
            }
            break;
          }
        }
      }
    }
LABEL_88:
    ner_freeNEData(v18, a7);
    return v28;
  }
  *(_WORD *)(a7 + 16) = 0;
LABEL_11:
  *(_QWORD *)(a7 + 8) = 0;
  log_OutText(*(_QWORD *)(v18 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"ner: no words found", v19, v20, v21, v78);
  return 0;
}

uint64_t ner_freeNEData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _WORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
    {
      if (*(_WORD *)(a2 + 16))
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)(v3 + 40 * v5))
          {
            heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v3 + 40 * v5));
            v3 = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(v3 + 40 * v5) = 0;
          }
          v6 = *(_QWORD *)(v3 + 40 * v5 + 16);
          if (v6)
          {
            v7 = v3 + 40 * v5;
            v9 = *(unsigned __int16 *)(v7 + 24);
            v8 = (_WORD *)(v7 + 24);
            if (v9)
            {
              v10 = 0;
              do
              {
                if (*(_QWORD *)(*(_QWORD *)(v3 + 40 * v5 + 16) + 8 * v10))
                {
                  heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(v3 + 40 * v5 + 16) + 8 * v10));
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40 * v5 + 16) + 8 * v10) = 0;
                  v3 = *(_QWORD *)(a2 + 8);
                }
                ++v10;
                v11 = v3 + 40 * v5;
                v12 = *(unsigned __int16 *)(v11 + 24);
                v8 = (_WORD *)(v11 + 24);
              }
              while (v10 < v12);
              v6 = *(_QWORD *)(v3 + 40 * v5 + 16);
            }
            *v8 = 0;
            heap_Free(*(_QWORD **)(a1 + 8), v6);
            v3 = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(v3 + 40 * v5 + 16) = 0;
          }
          ++v5;
        }
        while (v5 < *(unsigned __int16 *)(a2 + 16));
      }
      heap_Free(*(_QWORD **)(a1 + 8), v3);
      *(_WORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return 0;
}

uint64_t getCharEmbeddingWithPOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char **v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  if (a8)
  {
    v12 = 0;
    v13 = 0;
    v14 = *a5;
    v34 = a6;
    v35 = a8;
    v15 = 4 * a6;
    v39 = v15 + 4 * a9;
    while (1)
    {
      v16 = a7 + 40 * v12;
      v19 = *(unsigned __int16 *)(v16 + 24);
      v18 = (unsigned __int16 *)(v16 + 24);
      v17 = v19;
      v37 = v12;
      if (v19)
      {
        if (v17 != 1)
        {
          v22 = 0;
          v23 = a7 + 40 * v12;
          v24 = (_QWORD *)(v23 + 16);
          v25 = (char **)(v23 + 8);
          do
          {
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a2 + 56))(a3, a4, *(_QWORD *)(*v24 + 8 * v22), v14);
            if ((v13 & 0x1FFF) == 0x14)
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"No embedding vector for character %s . Fall back!", v26, v27, v28, *(_QWORD *)(*v24 + 8 * v22));
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "</s>", v14);
            }
            v40 = v14 + v15;
            getPOSFeature(*v25, &v40);
            v14 += v39;
            v40 = v14;
            ++v22;
          }
          while (v22 < *v18);
          goto LABEL_21;
        }
        v20 = *(_DWORD *)(a7 + 40 * v12 + 32);
        switch(v20)
        {
          case 1:
            v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "ENG", v14);
            break;
          case 2:
            v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "NUM", v14);
            break;
          case 3:
            v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "</s>", v14);
            break;
          default:
            v29 = 0;
            v30 = a7 + 40 * v12;
            v31 = (_QWORD *)(v30 + 16);
            v32 = (char **)(v30 + 8);
            do
            {
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a2 + 56))(a3, a4, *(_QWORD *)(*v31 + 8 * v29), v14);
              if ((v13 & 0x1FFF) == 0x14)
                v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "</s>", v14);
              v40 = v14 + v15;
              getPOSFeature(*v32, &v40);
              v14 += v39;
              v40 = v14;
              ++v29;
            }
            while (v29 < *v18);
            goto LABEL_21;
        }
        v13 = v21;
        v14 += 4 * v34;
        v40 = v14;
      }
LABEL_21:
      v12 = v37 + 1;
      if (v37 + 1 == v35)
        return v13;
    }
  }
  return 0;
}

uint64_t getCharEmbedding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a8)
    return 0;
  v12 = 0;
  result = 0;
  v14 = *a5;
  v15 = 4 * a6;
  v28 = a6;
  v29 = a8;
  v30 = a7;
  do
  {
    v16 = a7 + 40 * v12;
    v19 = *(unsigned __int16 *)(v16 + 24);
    v18 = (unsigned __int16 *)(v16 + 24);
    v17 = v19;
    if (v19)
    {
      if (v17 == 1)
      {
        v20 = *(_DWORD *)(a7 + 40 * v12 + 32) - 1;
        if (v20 >= 3)
        {
          v26 = 0;
          v27 = (_QWORD *)(a7 + 40 * v12 + 16);
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a2 + 56))(a3, a4, *(_QWORD *)(*v27 + 8 * v26), v14);
            if ((result & 0x1FFF) == 0x14)
              result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "</s>", v14);
            ++v26;
            v14 += v15;
          }
          while (v26 < *v18);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(a2 + 56))(a3, a4, off_24D2856B0[v20], v14);
          v14 += 4 * v28;
        }
      }
      else
      {
        v21 = 0;
        v22 = (_QWORD *)(a7 + 40 * v12 + 16);
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a2 + 56))(a3, a4, *(_QWORD *)(*v22 + 8 * v21), v14);
          if ((result & 0x1FFF) == 0x14)
          {
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"No embedding vector for character %s . Fall back!", v23, v24, v25, *(_QWORD *)(*v22 + 8 * v21));
            result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(a2 + 56))(a3, a4, "</s>", v14);
          }
          ++v21;
          v14 += v15;
        }
        while (v21 < *v18);
      }
    }
    ++v12;
    a7 = v30;
  }
  while (v12 != v29);
  return result;
}

uint64_t getPOSFeature(char *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  _BYTE v6[2];

  v2 = *a2;
  result = utf8_ToLower(a1, 0, (uint64_t)v6);
  v4 = v6[0] - 99;
  if (v4 > 0x16)
    v5 = 0;
  else
    v5 = qword_214F03268[(char)v4];
  *(_DWORD *)(v2 + 4 * v5) = 1065353216;
  return result;
}

uint64_t hlp_loadOptions(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;

  v2 = a1[13];
  if (v2)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v2);
    a1[15] = 0;
  }
  v3 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
  a1[13] = v3;
  if (v3)
  {
    a1[15] = 128;
    v8 = a1[14];
    if (v8)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v8);
      a1[16] = 0;
    }
    v9 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
    a1[14] = v9;
    if (v9)
    {
      a1[16] = 128;
      v10 = a1[19];
      if (v10)
        heap_Free(*(_QWORD **)(*a1 + 8), v10);
      v11 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
      a1[19] = v11;
      if (v11)
      {
        v12 = a1[20];
        if (v12)
          heap_Free(*(_QWORD **)(*a1 + 8), v12);
        v13 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
        a1[20] = v13;
        if (v13)
        {
          v14 = a1[21];
          if (v14)
            heap_Free(*(_QWORD **)(*a1 + 8), v14);
          v15 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
          a1[21] = v15;
          if (v15)
          {
            v16 = a1[22];
            if (v16)
              heap_Free(*(_QWORD **)(*a1 + 8), v16);
            v17 = heap_Alloc(*(_QWORD *)(*a1 + 8), 128);
            a1[22] = v17;
            if (v17)
              return 0;
          }
        }
      }
    }
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v4, v5, v6, v7, v19);
  return 2314215434;
}

uint64_t hlp_loadNNOptions(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *i;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  char *v46;
  const char *v47;
  size_t v48;
  uint64_t v49;
  unsigned int v51;
  __int128 v52[2];
  _QWORD *(*v53)(_QWORD *, _QWORD *);
  __int128 __b;
  __int128 v55;
  _QWORD *(*v56)(_QWORD *, _QWORD *);
  const char *v57;
  const char *v58;
  unsigned __int8 v59;
  __int16 v60;
  char **v61;

  v2 = 2314216452;
  v61 = 0;
  v60 = -1;
  v59 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  __b = 0u;
  v55 = 0u;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_nn_chars", &v61, &v60, &v59) & 0x80000000) != 0|| !v60)
  {
    return v2;
  }
  v3 = cstdlib_strchr(*v61, v59);
  if (v3)
    *v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = cstdlib_strlen(*v61);
  v6 = heap_Alloc(v4, v5 + 1);
  if (!v6)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v7, v8, v9, v10, v51);
    return 2314215434;
  }
  v11 = (char *)v6;
  v12 = *v61;
  v13 = cstdlib_strlen(*v61);
  cstdlib_strncpy(v11, v12, v13);
  v11[cstdlib_strlen(*v61)] = 0;
  v60 = -1;
  v14 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_nn_default_phones", &v61, &v60, &v59) & 0x80000000) != 0|| !v60)
  {
    goto LABEL_38;
  }
  v15 = cstdlib_strchr(*v61, v59);
  if (v15)
    *v15 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v17 = cstdlib_strlen(*v61);
  v14 = (char *)heap_Alloc(v16, v17 + 1);
  if (!v14)
    goto LABEL_36;
  v22 = *v61;
  v23 = cstdlib_strlen(*v61);
  cstdlib_strncpy(v14, v22, v23);
  v14[cstdlib_strlen(*v61)] = 0;
  cstdlib_memset(&__b, 0, 0x28uLL);
  *(_QWORD *)&__b = ssftmap_ElemCopyString;
  *((_QWORD *)&__b + 1) = ssftmap_ElemFreeString;
  *((_QWORD *)&v55 + 1) = ssftmap_ElemCopyString;
  v56 = ssftmap_ElemFreeString;
  *(_QWORD *)&v55 = ssftmap_ElemCompareKeysString;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v52[0] = __b;
  v52[1] = v55;
  v53 = ssftmap_ElemFreeString;
  v25 = ssftmap_ObjOpen(v24, 0, v52, (uint64_t *)(a1 + 248));
  if ((v25 & 0x80000000) != 0)
  {
LABEL_18:
    v2 = v25;
    goto LABEL_38;
  }
  v26 = extstdlib_strtok_r(v11, "|", &v58);
  for (i = v14; ; i = 0)
  {
    v28 = extstdlib_strtok_r(i, "|", &v57);
    if (!v26 || !v28)
      break;
    v25 = ssftmap_Insert(*(_QWORD *)(a1 + 248), (uint64_t)v26, (uint64_t)v28);
    if ((v25 & 0x80000000) != 0)
      goto LABEL_18;
    v26 = extstdlib_strtok_r(0, "|", &v58);
  }
  if (v26 || v28)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"NN chars amount and default phones amount do not match!", v29, v30, v31, 0);
    v2 = 2314215439;
    goto LABEL_38;
  }
  v60 = -1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_nn_step", &v61, &v60, &v59) & 0x80000000) == 0)
  {
    if (v60)
    {
      *(_DWORD *)(a1 + 256) = 0;
      *(_DWORD *)(a1 + 256) = (unsigned __int16)LH_atou(*v61);
      v60 = -1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_nn_vect", &v61, &v60, &v59) & 0x80000000) == 0)
      {
        if (v60)
        {
          *(_DWORD *)(a1 + 260) = 0;
          *(_DWORD *)(a1 + 260) = (unsigned __int16)LH_atou(*v61);
          v60 = -1;
          if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_nn_null_fea", &v61, &v60, &v59) & 0x80000000) == 0)
          {
            if (v60)
            {
              *(_QWORD *)(a1 + 272) = 0;
              v32 = cstdlib_strchr(*v61, v59);
              if (v32)
                *v32 = 0;
              v33 = *(_QWORD *)(*(_QWORD *)a1 + 8);
              v34 = cstdlib_strlen(*v61);
              v35 = heap_Alloc(v33, v34 + 1);
              *(_QWORD *)(a1 + 272) = v35;
              if (v35)
              {
                v36 = (char *)v35;
                v37 = *v61;
                v38 = cstdlib_strlen(*v61);
                cstdlib_strncpy(v36, v37, v38);
                v39 = *(_QWORD *)(a1 + 272);
                *(_BYTE *)(v39 + cstdlib_strlen(*v61)) = 0;
                v60 = -1;
                v40 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_embed_type", &v61, &v60, &v59);
                if ((v40 & 0x80000000) == 0 && v60)
                {
                  v41 = v40;
                  *(_QWORD *)(a1 + 264) = 0;
                  v42 = cstdlib_strchr(*v61, v59);
                  if (v42)
                    *v42 = 0;
                  v43 = *(_QWORD *)(*(_QWORD *)a1 + 8);
                  v44 = cstdlib_strlen(*v61);
                  v45 = heap_Alloc(v43, v44 + 1);
                  *(_QWORD *)(a1 + 264) = v45;
                  if (v45)
                  {
                    v46 = (char *)v45;
                    v47 = *v61;
                    v48 = cstdlib_strlen(*v61);
                    cstdlib_strncpy(v46, v47, v48);
                    v49 = *(_QWORD *)(a1 + 264);
                    *(_BYTE *)(v49 + cstdlib_strlen(*v61)) = 0;
                    v2 = v41;
                    goto LABEL_38;
                  }
                  goto LABEL_36;
                }
                goto LABEL_38;
              }
LABEL_36:
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v18, v19, v20, v21, v51);
              v2 = 2314215434;
            }
          }
        }
      }
    }
  }
LABEL_38:
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v11);
  if (v14)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v14);
  return v2;
}

uint64_t hlp_loadStatWordOptions(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int v21;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_step", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) != 0)
    return v2;
  *(_DWORD *)(a1 + 320) = 0;
  if (*(_WORD *)&__c[1])
    *(_DWORD *)(a1 + 320) = LH_atou(**(const char ***)&__c[3]);
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_vect", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) != 0)
    return v2;
  *(_DWORD *)(a1 + 324) = 0;
  if (*(_WORD *)&__c[1])
    *(_DWORD *)(a1 + 324) = LH_atou(**(const char ***)&__c[3]);
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_thresholdpercent", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) != 0)
    return v2;
  *(_DWORD *)(a1 + 328) = 0;
  if (*(_WORD *)&__c[1])
    *(_DWORD *)(a1 + 328) = LH_atou(**(const char ***)&__c[3]);
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_list", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) != 0)
    return v2;
  if (*(_WORD *)&__c[1])
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v9 = cstdlib_strlen(**(const char ***)&__c[3]);
    v10 = (char *)heap_Alloc(v8, v9 + 1);
    *(_QWORD *)(a1 + 336) = v10;
    if (v10)
    {
      cstdlib_strcpy(v10, **(const char ***)&__c[3]);
      cstdlib_strcpy((char *)(a1 + 364), "$MEANW2V$");
      *(_WORD *)&__c[1] = -1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_fbck", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
      {
        v15 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v15)
          *v15 = 0;
        cstdlib_strcpy((char *)(a1 + 364), **(const char ***)&__c[3]);
      }
      cstdlib_strcpy((char *)(a1 + 344), ",;!.?:-");
      *(_WORD *)&__c[1] = -1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_punc", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
      {
        v16 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v16)
          *v16 = 0;
        cstdlib_strcpy((char *)(a1 + 344), **(const char ***)&__c[3]);
      }
      cstdlib_strcpy((char *)(a1 + 354), "0033400");
      *(_WORD *)&__c[1] = -1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_mappunc", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
      {
        v17 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v17)
          *v17 = 0;
        cstdlib_strcpy((char *)(a1 + 354), **(const char ***)&__c[3]);
      }
      *(_DWORD *)(a1 + 376) = 0;
      *(_WORD *)&__c[1] = -1;
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_nnlkpcaseconv", &__c[3], &__c[1], __c);
      if ((v18 & 0x80000000) == 0 && *(_WORD *)&__c[1])
      {
        v19 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v19)
          *v19 = 0;
        if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
          *(_DWORD *)(a1 + 376) = 1;
      }
      *(_QWORD *)(a1 + 264) = 0;
    }
    else
    {
      v18 = 2314215434;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v11, v12, v13, v14, v21);
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v3, v4, v5, v6, v21);
    return 2314215444;
  }
  return v18;
}

uint64_t fe_hmogrph_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OptionalHmogrphModels;
  BOOL v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *__s;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _OWORD v58[16];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v56 = 0;
  v57 = 0;
  v5 = 2314215431;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v49 = 0;
  v50 = 0;
  memset(v58, 0, sizeof(v58));
  if (!a5)
    return v5;
  __s = 0;
  v48 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a1, a2, &v56);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a3, a4, &v57);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v57[6], (uint64_t)"LINGDB", &v55);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v57[6], (uint64_t)"FE_DCTLKP", &v53);
  v13 = v57[6];
  if ((Object & 0x80000000) != 0)
  {
    v31 = "LINGDB";
LABEL_25:
    objc_ReleaseObject(v13, (uint64_t)v31);
    return Object;
  }
  v14 = objc_GetObject(v13, (uint64_t)"FE_DEPES", &v54);
  if ((v14 & 0x80000000) != 0)
  {
    Object = v14;
    objc_ReleaseObject(v57[6], (uint64_t)"LINGDB");
    v13 = v57[6];
    v31 = "FE_DCTLKP";
    goto LABEL_25;
  }
  v15 = heap_Alloc(v57[1], 488);
  if (!v15)
  {
    log_OutPublic(v57[4], (uint64_t)"FE_HMOGRPH", 37000, 0, v16, v17, v18, v19, v43);
    objc_ReleaseObject(v57[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v57[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v57[6], (uint64_t)"FE_DCTLKP");
    return 2314215434;
  }
  v20 = v15;
  *(_QWORD *)v15 = v57;
  *(_QWORD *)(v15 + 8) = a3;
  v21 = v56;
  *(_QWORD *)(v15 + 16) = a4;
  *(_QWORD *)(v15 + 24) = v21;
  *(_QWORD *)(v15 + 32) = a1;
  *(_QWORD *)(v15 + 40) = a2;
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v55 + 8);
  v22 = v54;
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v54 + 8);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v22 + 16);
  v23 = v53;
  *(_QWORD *)(v15 + 96) = *(_QWORD *)(v53 + 8);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(v23 + 16);
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_WORD *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  cstdlib_memset((void *)(v15 + 200), 0, 0xB8uLL);
  cstdlib_memset((void *)(v20 + 392), 0, 0x58uLL);
  *(_DWORD *)(v20 + 188) = 0;
  *(_DWORD *)(v20 + 192) = 0;
  *(_DWORD *)(v20 + 384) = 0;
  *(_DWORD *)(v20 + 480) = 0;
  *(_QWORD *)(v20 + 280) = 0;
  OptionalHmogrphModels = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(v20 + 96) + 88))(*(_QWORD *)(v20 + 80), *(_QWORD *)(v20 + 88), (char *)&v50 + 4, &v50);
  if ((OptionalHmogrphModels & 0x80000000) != 0)
    goto LABEL_53;
  v25 = (_DWORD)v50 == 1 && HIDWORD(v50) == 1;
  v26 = v25;
  *(_DWORD *)(v20 + 184) = v26;
  OptionalHmogrphModels = hlp_loadOptionalHmogrphModels(v20);
  if ((OptionalHmogrphModels & 0x80000000) != 0)
    goto LABEL_53;
  OptionalHmogrphModels = hlp_loadNerOptions(v20);
  if ((OptionalHmogrphModels & 0x80000000) != 0)
    goto LABEL_53;
  v27 = *(_QWORD *)v20;
  *(_QWORD *)(v20 + 200) = *(_QWORD *)v20;
  v28 = paramc_ParamGet(*(_QWORD *)(v27 + 40), (uint64_t)"numberoutputtranscriptions", &__s, 0);
  v29 = 0;
  if ((v28 & 0x80000000) == 0 && __s)
    v29 = cstdlib_atoi((unsigned __int8 *)__s);
  *(_WORD *)(v20 + 138) = v29;
  v30 = (paramc_ParamGet(*(_QWORD *)(*(_QWORD *)v20 + 40), (uint64_t)"mlset", &__s, 0) & 0x80000000) == 0
     && cstdlib_strlen(__s) > 3;
  *(_DWORD *)(v20 + 140) = v30;
  OptionalHmogrphModels = checkSkipCrosstoken(*(_QWORD *)(v20 + 80), *(_QWORD *)(v20 + 88), *(_QWORD *)(v20 + 96), (_DWORD *)(v20 + 144));
  if ((OptionalHmogrphModels & 0x80000000) != 0)
    goto LABEL_53;
  if (*(_DWORD *)(v20 + 144))
  {
    OptionalHmogrphModels = hlp_loadOptions((_QWORD *)v20);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
      goto LABEL_53;
  }
  if (!*(_DWORD *)(v20 + 188))
    goto LABEL_49;
  if (*(_DWORD *)(v20 + 480))
  {
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
    OptionalHmogrphModels = hlp_loadStatWordOptions(v20);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
      goto LABEL_53;
    OptionalHmogrphModels = nn_word_lkp_GetInterface(1u, &v48);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
      goto LABEL_53;
    *(_QWORD *)(v20 + 280) = v48;
    *(_QWORD *)(v20 + 288) = safeh_GetNullHandle();
    *(_QWORD *)(v20 + 296) = v32;
    *(_QWORD *)(v20 + 304) = safeh_GetNullHandle();
    *(_QWORD *)(v20 + 312) = v33;
    OptionalHmogrphModels = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _WORD *, uint64_t, uint64_t))(v48 + 16))(*(_QWORD *)(v20 + 288), *(_QWORD *)(v20 + 296), "word", a3, a4, v20 + 304);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
      goto LABEL_53;
    v46 = *(_OWORD *)(v20 + 304);
    *((_QWORD *)&v45 + 1) = v48;
    OptionalHmogrphModels = objc_RegisterObject(v57[6], (uint64_t)"NNWRDLKP", &v45);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
      goto LABEL_53;
    goto LABEL_46;
  }
  if (*(_DWORD *)(v20 + 192))
  {
    OptionalHmogrphModels = hlp_loadNNOptions(v20);
    if ((OptionalHmogrphModels & 0x80000000) != 0)
    {
LABEL_53:
      v5 = OptionalHmogrphModels;
      fe_hmogrph_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      return v5;
    }
    v34 = cstdlib_strcmp(*(const char **)(v20 + 264), "albert");
    if ((objc_GetObject(v57[6], (uint64_t)"NNCHRLKP", &v52) & 0x80000000) != 0 || !v34)
    {
      OptionalHmogrphModels = nn_word_lkp_GetInterface(1u, &v48);
      if ((OptionalHmogrphModels & 0x80000000) != 0)
        goto LABEL_53;
      *(_QWORD *)(v20 + 280) = v48;
      *(_QWORD *)(v20 + 288) = safeh_GetNullHandle();
      *(_QWORD *)(v20 + 296) = v36;
      *(_QWORD *)(v20 + 304) = safeh_GetNullHandle();
      *(_QWORD *)(v20 + 312) = v37;
      OptionalHmogrphModels = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _WORD *, uint64_t, uint64_t))(v48 + 16))(*(_QWORD *)(v20 + 288), *(_QWORD *)(v20 + 296), *(_QWORD *)(v20 + 264), a3, a4, v20 + 304);
      if ((OptionalHmogrphModels & 0x80000000) != 0)
        goto LABEL_53;
    }
    else
    {
      *(_QWORD *)(v20 + 280) = *(_QWORD *)(v52 + 8);
      *(_QWORD *)(v20 + 288) = safeh_GetNullHandle();
      *(_QWORD *)(v20 + 296) = v35;
      *(_OWORD *)(v20 + 304) = *(_OWORD *)(v52 + 16);
    }
LABEL_46:
    inited = fi_model_getBrokerString(*(_QWORD *)v20, (char *)v58);
    if ((inited & 0x80000000) == 0)
    {
      v38 = fi_init(a3, a4, a1, a2, &v49, 0, (uint64_t)v58, "FINN", 1, 0);
      if ((v38 & 0x80000000) != 0)
      {
        v5 = v38;
        log_OutText(*(_QWORD *)(*(_QWORD *)v20 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"create FI model failed", v39, v40, v41, v44);
        return v5;
      }
      *(_QWORD *)(v20 + 240) = v49;
      goto LABEL_49;
    }
    return inited;
  }
  *(_QWORD *)(v20 + 240) = 0;
LABEL_49:
  v5 = init_ner_struct(v20, (_QWORD *)(v20 + 392));
  if ((v5 & 0x80000000) == 0)
  {
    *(_QWORD *)a5 = v20;
    *(_DWORD *)(a5 + 8) = 62342;
  }
  return v5;
}

uint64_t hlp_loadOptionalHmogrphModels(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  _BYTE __c[11];

  if ((com_useStatHmogrph(*(_QWORD *)a1, (_DWORD *)(a1 + 188)) & 0x80000000) == 0)
  {
    *(_WORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      if ((stat_hmogrph_ModelInit(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t *)(a1 + 224), (_WORD *)(a1 + 232), (unsigned __int16 *)(a1 + 234)) & 0x80000000) == 0)*(_QWORD *)(a1 + 200) = *(_QWORD *)a1;
    }
  }
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_WORD *)&__c[1] = -1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "statwordhmogrph_step", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(unsigned __int16 *)&__c[1] == 1)
  {
    *(_DWORD *)(a1 + 188) = 1;
    *(_DWORD *)(a1 + 480) = 1;
  }
  *(_DWORD *)(a1 + 192) = 0;
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "stathmogrph_enable_nnets", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3])
  {
    v3 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v3)
      *v3 = 0;
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
      *(_DWORD *)(a1 + 192) = 1;
  }
  return v2;
}

uint64_t hlp_loadNerOptions(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  int v4;
  const char *v5;
  const char *v6;
  int v7;
  char v9;
  __int16 v10;
  const char **v11;
  const char **v12;
  const char **v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  v10 = -1;
  v9 = 0;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "ner_enable_ner", &v13, &v10, &v9);
  if ((v2 & 0x80000000) == 0)
  {
    if (v10 && v13)
    {
      v3 = *v13;
      v3[cstdlib_strlen(*v13) - 1] = 0;
      v4 = cstdlib_strcmp(*v13, "yes");
      *(_DWORD *)(a1 + 384) = v4 == 0;
      if (!v4)
      {
        v10 = -1;
        v9 = 0;
        *(_DWORD *)(a1 + 428) = 0;
        if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "ner_embed_type", &v12, &v10, &v9) & 0x80000000) == 0&& v10&& v12)
        {
          v5 = *v12;
          v5[cstdlib_strlen(*v12) - 1] = 0;
          *(_DWORD *)(a1 + 428) = cstdlib_strcmp(*v12, "char") == 0;
        }
        v10 = -1;
        v9 = 0;
        v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "ner_enable_pos", &v12, &v10, &v9);
        if ((v2 & 0x80000000) == 0)
        {
          if (v10 && v12)
          {
            v6 = *v12;
            v6[cstdlib_strlen(*v12) - 1] = 0;
            v7 = cstdlib_strcmp(*v12, "yes");
            *(_DWORD *)(a1 + 424) = v7 == 0;
            if (!v7)
            {
              v10 = -1;
              v9 = 0;
              v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, char *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", "ner_pos_dimension", &v11, &v10, &v9);
              if ((v2 & 0x80000000) == 0)
                *(_WORD *)(a1 + 432) = (unsigned __int16)LH_atou(*v11);
            }
          }
          else
          {
            *(_DWORD *)(a1 + 424) = 0;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 384) = 0;
    }
  }
  return v2;
}

uint64_t checkSkipCrosstoken(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  char *v7;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a3 + 96))(a1, a2, "fecfg", "feoneword_skipcrosstoken", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
      *a4 = 1;
  }
  return v5;
}

uint64_t fi_model_getBrokerString(uint64_t a1, char *a2)
{
  uint64_t result;
  char *v5;
  char *__s2;
  char __s1[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  __s2 = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)__s1 = 0u;
  v8 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v5);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "nnhmogrph_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v5);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t init_ner_struct(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t Interface;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, sizeof(v15));
  v14 = 0;
  *a2 = 0;
  if (!*(_DWORD *)(a1 + 384))
    return 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = safeh_GetNullHandle();
  *(_QWORD *)(a1 + 456) = v4;
  *(_QWORD *)(a1 + 464) = safeh_GetNullHandle();
  *(_QWORD *)(a1 + 472) = v5;
  v6 = *(const char **)(a1 + 264);
  if (v6)
  {
    if (cstdlib_strcmp(v6, "char"))
    {
      if (*(_DWORD *)(a1 + 428) == 1)
      {
        Interface = nn_word_lkp_GetInterface(1u, (_QWORD *)(a1 + 440));
        if ((Interface & 0x80000000) != 0)
          return Interface;
        Interface = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 440) + 16))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), "char", *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 464);
        if ((Interface & 0x80000000) != 0)
          return Interface;
      }
    }
  }
  get_ner_brokerstring(*(_QWORD *)a1, (char *)v15, 0x100uLL);
  v11 = fi_init(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), &v14, 0, (uint64_t)v15, "FINN", 1, 0);
  if ((v11 & 0x80000000) != 0)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Init NER FI model failed", v8, v9, v10, v13);
  else
    *a2 = v14;
  return v11;
}

uint64_t fe_hmogrph_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;

  result = safeh_HandleCheck(a1, a2, 62342, 488);
  if ((result & 0x80000000) != 0)
    return 2314215432;
  if (!a1)
    return result;
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v9);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v10 = *(_QWORD *)(a1 + 112);
  if (v10)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = *(_QWORD *)(a1 + 152);
  if (v11)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
  *(_QWORD *)(a1 + 152) = 0;
  v12 = *(_QWORD *)(a1 + 160);
  if (v12)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v12);
  *(_QWORD *)(a1 + 160) = 0;
  v13 = *(_QWORD *)(a1 + 168);
  if (v13)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v13);
  *(_QWORD *)(a1 + 168) = 0;
  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
  *(_QWORD *)(a1 + 176) = 0;
  v15 = *(_QWORD *)(a1 + 280);
  if (v15)
  {
    if (*(_DWORD *)(a1 + 480))
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD))(v15 + 24))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312)) & 0x80000000) == 0)
        objc_UnregisterObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNWRDLKP");
    }
    else if (*(_DWORD *)(a1 + 192)
           && (objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNCHRLKP") & 0x80000000) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 280) + 24))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312));
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    if (*(_DWORD *)(a1 + 480))
    {
      v16 = *(_QWORD *)(a1 + 336);
      if (v16)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
        *(_QWORD *)(a1 + 336) = 0;
      }
    }
    else
    {
      if (!*(_DWORD *)(a1 + 192))
      {
LABEL_37:
        if (*(_WORD *)(a1 + 232))
          stat_hmogrph_ModelDeinit(*(_QWORD *)a1, (uint64_t *)(a1 + 224), *(unsigned __int16 *)(a1 + 232), v4, v5, v6, v7, v8);
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(a1 + 272);
      if (v17)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v17);
        *(_QWORD *)(a1 + 272) = 0;
      }
      v18 = *(_QWORD *)(a1 + 248);
      if (v18)
      {
        ssftmap_ObjClose(v18);
        *(_QWORD *)(a1 + 248) = 0;
      }
      v19 = *(_QWORD *)(a1 + 264);
      if (v19)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
        *(_QWORD *)(a1 + 264) = 0;
      }
    }
    v20 = *(uint64_t **)(a1 + 240);
    if (v20)
    {
      fi_deinit(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), v20);
      *(_QWORD *)(a1 + 240) = 0;
    }
    goto LABEL_37;
  }
LABEL_39:
  if (*(_DWORD *)(a1 + 384))
  {
    v21 = *(uint64_t **)(a1 + 392);
    if (v21)
    {
      fi_deinit(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), v21);
      *(_QWORD *)(a1 + 392) = 0;
    }
    v22 = *(_QWORD *)(a1 + 440);
    if (v22)
    {
      (*(void (**)(_QWORD, _QWORD))(v22 + 24))(*(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472));
      *(_QWORD *)(a1 + 440) = 0;
    }
  }
  objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
  objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
  objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

uint64_t fe_hmogrph_ObjReopen(uint64_t a1, int a2)
{
  uint64_t Options;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  _BOOL4 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *__s;
  _OWORD v48[16];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  v43 = 0;
  v44 = 0;
  memset(v48, 0, sizeof(v48));
  Options = safeh_HandleCheck(a1, a2, 62342, 488);
  if ((Options & 0x80000000) == 0)
  {
    if (!a1)
      return Options;
    __s = 0;
    v45 = 0;
    Options = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 96) + 88))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (char *)&v46 + 4, &v46);
    if ((Options & 0x80000000) != 0)
      return Options;
    v10 = (_DWORD)v46 == 1 && HIDWORD(v46) == 1;
    *(_DWORD *)(a1 + 184) = v10;
    v11 = *(_QWORD *)(a1 + 104);
    if (v11)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v12 = *(_QWORD *)(a1 + 112);
    if (v12)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v12);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v13 = *(_QWORD *)(a1 + 152);
    if (v13)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v13);
    *(_QWORD *)(a1 + 152) = 0;
    v14 = *(_QWORD *)(a1 + 160);
    if (v14)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
    *(_QWORD *)(a1 + 160) = 0;
    v15 = *(_QWORD *)(a1 + 168);
    if (v15)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v15);
    *(_QWORD *)(a1 + 168) = 0;
    v16 = *(_QWORD *)(a1 + 176);
    if (v16)
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
    *(_QWORD *)(a1 + 176) = 0;
    v17 = *(_QWORD *)(a1 + 280);
    if (v17)
    {
      if (*(_DWORD *)(a1 + 480))
      {
        v45 = *(_QWORD *)(a1 + 280);
        if (((*(uint64_t (**)(_QWORD, _QWORD))(v17 + 24))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312)) & 0x80000000) == 0)
          objc_UnregisterObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNWRDLKP");
      }
      else if (*(_DWORD *)(a1 + 192)
             && (objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNCHRLKP") & 0x80000000) != 0)
      {
        v45 = *(_QWORD *)(a1 + 280);
        (*(void (**)(_QWORD, _QWORD))(v45 + 24))(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312));
      }
      *(_QWORD *)(a1 + 280) = 0;
    }
    if (!*(_DWORD *)(a1 + 188))
    {
LABEL_51:
      Options = checkSkipCrosstoken(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), (_DWORD *)(a1 + 144));
      if ((Options & 0x80000000) != 0)
        return Options;
      if (*(_DWORD *)(a1 + 144))
      {
        Options = hlp_loadOptions((_QWORD *)a1);
        if ((Options & 0x80000000) != 0)
          return Options;
      }
      Options = hlp_loadOptionalHmogrphModels(a1);
      if ((Options & 0x80000000) != 0)
        return Options;
      Options = hlp_loadNerOptions(a1);
      if ((Options & 0x80000000) != 0)
        return Options;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)a1;
      if (*(_DWORD *)(a1 + 188))
      {
        if (*(_DWORD *)(a1 + 480))
        {
          v42 = 0;
          v40 = 0u;
          v41 = 0u;
          Options = hlp_loadStatWordOptions(a1);
          if ((Options & 0x80000000) != 0)
            return Options;
          Options = nn_word_lkp_GetInterface(1u, &v45);
          if ((Options & 0x80000000) != 0)
            return Options;
          *(_QWORD *)(a1 + 280) = v45;
          *(_QWORD *)(a1 + 288) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 296) = v26;
          *(_QWORD *)(a1 + 304) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 312) = v27;
          Options = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(v45 + 16))(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), "word", *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 304);
          if ((Options & 0x80000000) != 0)
            return Options;
          v41 = *(_OWORD *)(a1 + 304);
          *((_QWORD *)&v40 + 1) = v45;
          Options = objc_RegisterObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNWRDLKP", &v40);
          if ((Options & 0x80000000) != 0)
            return Options;
          goto LABEL_67;
        }
        if (*(_DWORD *)(a1 + 192))
        {
          Options = hlp_loadNNOptions(a1);
          if ((Options & 0x80000000) != 0)
            return Options;
          if ((objc_GetObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"NNCHRLKP", &v44) & 0x80000000) != 0)
          {
            Options = nn_word_lkp_GetInterface(1u, &v45);
            if ((Options & 0x80000000) != 0)
              return Options;
            *(_QWORD *)(a1 + 280) = v45;
            *(_QWORD *)(a1 + 288) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 296) = v37;
            *(_QWORD *)(a1 + 304) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 312) = v38;
            Options = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v45 + 16))(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 304);
            if ((Options & 0x80000000) != 0)
              return Options;
          }
          else
          {
            *(_QWORD *)(a1 + 280) = *(_QWORD *)(v44 + 8);
            *(_QWORD *)(a1 + 288) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 296) = v28;
            *(_OWORD *)(a1 + 304) = *(_OWORD *)(v44 + 16);
          }
LABEL_67:
          Options = fi_model_getBrokerString(*(_QWORD *)a1, (char *)v48);
          if ((Options & 0x80000000) == 0)
          {
            v29 = fi_init(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), &v43, 0, (uint64_t)v48, "FINN", 1, 0);
            if ((v29 & 0x80000000) != 0)
            {
              v18 = v29;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"create FI model failed", v30, v31, v32, v39);
              return v18;
            }
            *(_QWORD *)(a1 + 240) = v43;
            goto LABEL_71;
          }
          return Options;
        }
        *(_QWORD *)(a1 + 240) = 0;
      }
LABEL_71:
      v33 = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"numberoutputtranscriptions", &__s, 0);
      v34 = 0;
      if ((v33 & 0x80000000) == 0 && __s)
        v34 = cstdlib_atoi((unsigned __int8 *)__s);
      *(_WORD *)(a1 + 138) = v34;
      v35 = (paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"mlset", &__s, 0) & 0x80000000) == 0
         && cstdlib_strlen(__s) > 3;
      *(_DWORD *)(a1 + 140) = v35;
      return init_ner_struct(a1, (_QWORD *)(a1 + 392));
    }
    if (*(_DWORD *)(a1 + 480))
    {
      v19 = *(_QWORD *)(a1 + 336);
      if (v19)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
        *(_QWORD *)(a1 + 336) = 0;
      }
    }
    else
    {
      if (!*(_DWORD *)(a1 + 192))
      {
LABEL_44:
        if (*(_DWORD *)(a1 + 384))
        {
          v24 = *(uint64_t **)(a1 + 392);
          if (v24)
          {
            fi_deinit(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), v24);
            *(_QWORD *)(a1 + 392) = 0;
          }
          v25 = *(_QWORD *)(a1 + 440);
          if (v25)
          {
            v45 = *(_QWORD *)(a1 + 440);
            (*(void (**)(_QWORD, _QWORD))(v25 + 24))(*(_QWORD *)(a1 + 464), *(_QWORD *)(a1 + 472));
            *(_QWORD *)(a1 + 440) = 0;
          }
        }
        if (*(_WORD *)(a1 + 232))
          stat_hmogrph_ModelDeinit(*(_QWORD *)a1, (uint64_t *)(a1 + 224), *(unsigned __int16 *)(a1 + 232), v4, v5, v6, v7, v8);
        goto LABEL_51;
      }
      v20 = *(_QWORD *)(a1 + 272);
      if (v20)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v20);
        *(_QWORD *)(a1 + 272) = 0;
      }
      v21 = *(_QWORD *)(a1 + 248);
      if (v21)
      {
        ssftmap_ObjClose(v21);
        *(_QWORD *)(a1 + 248) = 0;
      }
      v22 = *(_QWORD *)(a1 + 264);
      if (v22)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v22);
        *(_QWORD *)(a1 + 264) = 0;
      }
    }
    v23 = *(uint64_t **)(a1 + 240);
    if (v23)
    {
      fi_deinit(*(_QWORD *)a1, *(_QWORD *)(a1 + 24), v23);
      *(_QWORD *)(a1 + 240) = 0;
    }
    goto LABEL_44;
  }
  return 2314215432;
}

uint64_t fe_hmogrph_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 488);
  if ((int)result >= 0)
    return result;
  else
    return 2314215432;
}

uint64_t fe_hmogrph_Process_StatHmogrph(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t SentenceData;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v22;

  *a4 = 1;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"BEGIN fe_hmogrph_Process_StatHmogrph()", a6, a7, a8, 0);
  if (*(_DWORD *)(a1 + 480) == 1)
  {
    SentenceData = stat_hmogrph_disambiguateWords(a1, *(_QWORD *)(a1 + 48), a2, a3, a1 + 200);
LABEL_13:
    v18 = SentenceData;
    v19 = 0;
    goto LABEL_14;
  }
  if (!*(_DWORD *)(a1 + 384))
  {
    *(_QWORD *)(a1 + 400) = 0;
    goto LABEL_10;
  }
  v15 = *(const char **)(a1 + 264);
  v16 = v15 && !cstdlib_strcmp(v15, "char");
  v17 = ner_process(*(_QWORD *)a1, a1 + 392, a2, a3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), v16);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_10:
    SentenceData = stat_hmogrph_getSentenceData(a1, *(_QWORD *)(a1 + 48), a2, a3, a1 + 200);
    if ((SentenceData & 0x80000000) == 0)
    {
      SentenceData = stat_hmogrph_disambiguatePhons(a1, a1 + 200);
      if ((SentenceData & 0x80000000) == 0)
        SentenceData = stat_hmogrph_updateLingdb(a1, *(_QWORD *)(a1 + 48), a2, a3, a1 + 200, a1 + 392);
    }
    goto LABEL_13;
  }
  v18 = v17;
  v19 = 1;
LABEL_14:
  if (!(*(_DWORD *)(a1 + 480) | v19))
  {
    v20 = stat_hmogrph_freeSentenceData(a1 + 200);
    if ((int)v18 > -1 && v20 < 0)
      v18 = v20;
    else
      v18 = v18;
  }
  if (*(_DWORD *)(a1 + 384))
  {
    v22 = ner_freeNEData(*(_QWORD *)a1, a1 + 392);
    if ((int)v18 > -1 && v22 < 0)
      v18 = v22;
    else
      v18 = v18;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"END fe_hmogrph_Process_StatHmogrph()", v12, v13, v14, 0);
  return v18;
}

uint64_t checkCRFMDE(_WORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  char *v36;
  char *__s2;
  char __s1[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  __s2 = 0;
  v35 = 0;
  v36 = "";
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)__s1 = 0u;
  v39 = 0u;
  if ((paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", &__s2) & 0x80000000) == 0
    && (paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v36) & 0x80000000) == 0)
  {
    cstdlib_strcat(__s1, "crf_mde_seg_");
    cstdlib_strcat(__s1, __s2);
    cstdlib_strcat(__s1, "_");
    cstdlib_strcat(__s1, v36);
    v8 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1024);
    if (v8)
    {
      v13 = v8;
      v14 = brokeraux_ComposeBrokerString(a3, __s1, 1, 1, __s2, 0, 0, v8, 0x400uLL);
      v15 = *(_QWORD **)(a3 + 8);
      v16 = cstdlib_strlen(__s2);
      v17 = (char *)heap_Calloc(v15, 1, v16 + 1);
      if (v17)
      {
        v22 = v17;
        cstdlib_strcpy(v17, __s2);
        if ((v14 & 0x80000000) == 0
          && (ssftriff_reader_ObjOpen(a1, a2, 2, v13, "CRPH", 1031, (uint64_t *)&v35) & 0x80000000) == 0)
        {
          ssftriff_reader_ObjClose(v35, v23, v24, v25, v26, v27, v28, v29);
          *a4 = 1;
        }
        heap_Free(*(_QWORD **)(a3 + 8), (uint64_t)v13);
        v30 = *(_QWORD **)(a3 + 8);
        v31 = (uint64_t)v22;
      }
      else
      {
        log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v18, v19, v20, v21, v34);
        v30 = *(_QWORD **)(a3 + 8);
        v31 = (uint64_t)v13;
      }
      heap_Free(v30, v31);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v9, v10, v11, v12, v33);
    }
  }
  return 0;
}

uint64_t fe_hmogrph_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  char *v37;
  unsigned __int8 v38;
  unsigned __int16 PreviousUtf8Offset;
  int v40;
  int v41;
  unsigned __int16 NextUtf8Offset;
  unsigned __int16 v44;
  unsigned __int8 v45;
  int v46;
  int v47;
  unsigned __int16 v49;
  int v50;
  unsigned __int16 v52;
  int v53;
  unsigned int v54;
  unsigned __int16 v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  unsigned __int16 v62;
  uint64_t v63;
  char v64;
  unsigned __int16 v65;
  char *v66;
  int v67;
  unsigned __int8 v68;
  int v69;
  uint64_t v70;
  unsigned __int8 v72;
  _BOOL4 v73;
  uint64_t v74;
  int v75;
  int v76;
  __int16 v77;
  int v78;
  int v79;
  int __c[2];
  char *__s2;
  int v82;
  _BOOL4 v83;
  unsigned __int16 v84;
  uint64_t v85;
  __int16 v86;
  unsigned __int16 v87;
  int v88;
  unsigned __int16 v89;
  int v90;
  int v91;
  char *__s;
  char __dst[8];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v86 = 0;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  if ((safeh_HandleCheck(a1, a2, 62342, 488) & 0x80000000) != 0)
    return 2314215432;
  __s = 0;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v88 = 0;
  v87 = 0;
  v85 = 0;
  *a5 = 1;
  checkCRFMDE(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, &v82);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)__dst = 0;
  LOWORD(__s2) = -1;
  LOBYTE(__c[0]) = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char *, char **, int *))(v10 + 96))(v11, v9, "fecfg", "usecompound", __dst, &__s2, __c);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = 0;
  v14 = 1;
  if ((unsigned __int16)__s2 == 1 && *(_QWORD *)__dst)
  {
    v15 = cstdlib_strchr(**(char ***)__dst, LOBYTE(__c[0]));
    if (v15)
      *v15 = 0;
    if (cstdlib_strcmp("yes", **(const char ***)__dst) && cstdlib_strcmp("YES", **(const char ***)__dst))
    {
      v13 = 0;
    }
    else
    {
      v14 = 0;
      v13 = 1;
    }
  }
  v16 = com_mosynt_UseMosynt(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &v83);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v20 = v83 ? v14 : 0;
  if (v20 == 1 && !*(_DWORD *)(a1 + 188))
    return v16;
  v21 = *(_DWORD *)(a1 + 188);
  if ((v83 & ~v13) != 0)
  {
    if (!v21)
      goto LABEL_23;
  }
  else if (!v21)
  {
    goto LABEL_24;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Stathmogrph Enabled", v17, v18, v19, 0);
  v16 = fe_hmogrph_Process_StatHmogrph(a1, a3, a4, a5, v22, v23, v24, v25);
  if ((v16 & 0x80000000) != 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Stathmogrph Processing Failed", v26, v27, v28, 0);
    return v16;
  }
LABEL_23:
  if (!*(_DWORD *)(a1 + 480))
    return v16;
LABEL_24:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 1, 0, (char *)&v91 + 2);
  if ((v16 & 0x80000000) != 0)
    return v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, HIWORD(v91), 0, &v86) & 0x80000000) != 0)return v16;
  if (v86 != 1)
    return v16;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, HIWORD(v91), 0, &__s, (char *)&v90 + 2);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v29 = HIWORD(v90);
  if (HIWORD(v90) < 2u)
    return v16;
  *(_WORD *)(a1 + 136) = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, HIWORD(v91), 1, &v85, &v84);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v30 = *(_DWORD *)(v85 + 12);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v91), &v91);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v77 = v30;
  v78 = 0;
  v31 = 0;
  v32 = v29 - 1;
  v33 = 1;
  while (1)
  {
    v34 = *(_QWORD *)(a1 + 48);
    if (!(_WORD)v91)
      break;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 168))(a3, a4);
    if ((v12 & 0x80000000) != 0)
      return v12;
    if (v88 == 4)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 168))(a3, a4, (unsigned __int16)v91, 1, 1, &v90, (char *)&v90 + 2);
      if ((v12 & 0x80000000) != 0)
        return v12;
      v35 = (unsigned __int16)v90;
      if (!v33 && (unsigned __int16)v90 == v78)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v91, 2, 1, &v89, (char *)&v90 + 2);
        if ((v12 & 0x80000000) != 0)
          return v12;
        v36 = (unsigned __int16)v90;
        v37 = __s;
        if (!(_WORD)v90)
          goto LABEL_52;
        v38 = 0;
        do
        {
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v37, v36);
          v37 = __s;
          v36 = PreviousUtf8Offset;
          v40 = __s[PreviousUtf8Offset];
          if (v40 == 95 || v40 == 32)
          {
            v41 = __s[PreviousUtf8Offset + 1];
            if (v41 != 32 && v41 != 95)
              ++v38;
          }
        }
        while (v38 <= 3u && PreviousUtf8Offset);
        if (PreviousUtf8Offset)
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset(__s, PreviousUtf8Offset);
          v37 = __s;
        }
        else
        {
LABEL_52:
          NextUtf8Offset = 0;
        }
        v44 = v89;
        if (v89 >= v32)
        {
          v49 = v89;
        }
        else
        {
          v45 = 0;
          do
          {
            v44 = utf8_GetNextUtf8Offset(v37, v44);
            v37 = __s;
            v46 = __s[v44];
            if (v46 == 95 || v46 == 32)
            {
              v47 = __s[v44 - 1];
              if (v47 != 32 && v47 != 95)
                ++v45;
            }
          }
          while (v45 <= 2u && v32 > v44);
          v49 = v44;
          v44 = v89;
        }
        v50 = (unsigned __int16)v90;
        if (v31)
        {
          v12 = hlp_Disambiguate(a1, a3, a4, v37, v31, NextUtf8Offset, v49, (unsigned __int16)v90, v44);
          if ((v12 & 0x80000000) != 0)
            return v12;
          v37 = __s;
          v50 = (unsigned __int16)v90;
          v44 = v89;
        }
        v12 = hlp_Disambiguate(a1, a3, a4, v37, (unsigned __int16)v91, NextUtf8Offset, v49, v50, v44);
        if ((v12 & 0x80000000) != 0)
          return v12;
        v31 = 0;
        v35 = (unsigned __int16)v90;
      }
      if (v35 != v78 || v33 == 1)
        v31 = v91;
      v78 = v35;
      v33 = 0;
    }
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 120))(a3, a4);
    if ((v16 & 0x80000000) != 0)
      return v16;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v34 + 104))(a3, a4, 2, HIWORD(v91), &v91);
  if ((v16 & 0x80000000) == 0)
  {
    v52 = v91;
    if ((_WORD)v91)
    {
      v53 = 0;
      v54 = 0;
      v74 = 0;
      v55 = 0;
      v75 = 1;
      v76 = 0;
      v79 = v82;
      v72 = 1;
      v73 = 0;
      v56 = 1;
      while (1)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 168))(a3, a4, v52, 0, 1, &v88, (char *)&v90 + 2);
        if ((v12 & 0x80000000) != 0)
          return v12;
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v91, 1, 1, &v90, (char *)&v90 + 2);
        if ((v12 & 0x80000000) != 0)
          return v12;
        if ((unsigned __int16)v90 != v55 || v56 == 1)
          v53 = 0;
        if (v54 < v84)
        {
          v58 = v54;
          v59 = v85 + 32 * v54 + 12;
          while ((__int16)(v90 + 1) > (__int16)(*(_WORD *)v59 - v77))
          {
            if (*(_DWORD *)(v59 - 12) == 14 && *(_DWORD *)(v59 + 12) == 64)
              v53 = 1;
            ++v58;
            v59 += 32;
            if (v84 == v58)
            {
              v54 = v84;
              goto LABEL_101;
            }
          }
          v54 = (unsigned __int16)v58;
        }
LABEL_101:
        if (v88 == 4)
          goto LABEL_112;
        v60 = v88 == 9;
        if (v88 == 9)
          v61 = v13;
        else
          v61 = 0;
        if (!v83)
          v61 = 0;
        if (v79 != 1)
          v60 = 0;
        if ((v61 & 1) != 0 || v60)
        {
LABEL_112:
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v91, 7, 1, &v87, (char *)&v90 + 2);
          if ((v12 & 0x80000000) != 0)
            return v12;
          if (v83)
            v64 = v13;
          else
            v64 = 0;
          if ((v64 & 1) != 0 || v79 == 1)
          {
            *(_WORD *)__dst = 0;
            v86 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, (unsigned __int16)v91, 17, &v86) & 0x80000000) == 0&& v86 == 1)
            {
              v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v91, 17, 1, __dst, (char *)&v90 + 2);
              if ((v12 & 0x80000000) != 0)
                return v12;
            }
            if (*(_WORD *)__dst)
              v65 = 0;
            else
              v65 = ~v87;
            v87 = v65;
          }
          if (*(_DWORD *)(a1 + 480))
          {
            *(_QWORD *)__c = 0;
            __s2 = 0;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 48)
                                                                                                + 176))(a3, a4, (unsigned __int16)v91, 5, &__s2, (char *)&v90 + 2);
            if ((v12 & 0x80000000) != 0)
              return v12;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48)
                                                                                              + 176))(a3, a4, (unsigned __int16)v91, 14, __c, (char *)&v90 + 2);
            if ((v12 & 0x80000000) != 0)
              return v12;
            cstdlib_strcpy(__dst, "POS:");
            cstdlib_strcat(__dst, __s2);
            cstdlib_strcat(__dst, ";");
            v66 = cstdlib_strstr(*(char **)__c, __dst);
            if (v66 && (v66 == *(char **)__c || *(v66 - 1) == 59))
              v87 += 100;
          }
          v86 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a3, a4, (unsigned __int16)v91, 9, &v86) & 0x80000000) == 0&& v86 == 1)
          {
            *(_QWORD *)__dst = 0;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *, char *))(*(_QWORD *)(a1 + 48)
                                                                                               + 176))(a3, a4, (unsigned __int16)v91, 9, __dst, (char *)&v90 + 2);
            if ((v12 & 0x80000000) != 0)
              return v12;
            v76 = **(_BYTE **)__dst;
          }
          if (v56 || (unsigned __int16)v90 != v55)
          {
            v62 = 0;
            v56 = 0;
            v63 = (unsigned __int16)v91;
            v68 = v75;
            v67 = v76;
            if (!(_BYTE)v76)
              v67 = v75;
            v73 = v76 == v75;
            LOWORD(v74) = v91;
            v55 = v90;
            HIDWORD(v74) = v87;
            v75 = v67;
            v72 = v68;
            goto LABEL_152;
          }
          if (v87 > HIDWORD(v74)
            || v87 == HIDWORD(v74) && !v73 && (v72 == 101 || v76 != 101))
          {
            v63 = (unsigned __int16)v91;
            if (!v53)
              goto LABEL_149;
          }
          else
          {
            v63 = (unsigned __int16)v91;
            if (v53)
            {
LABEL_149:
              v56 = 0;
              v69 = v76;
              if ((v76 & 0xFE) == 0)
                v69 = 1;
              HIDWORD(v74) = v87;
              v75 = v69;
              v62 = v74;
              v73 = v76 == v72;
              LOWORD(v74) = v63;
              goto LABEL_152;
            }
          }
          v56 = 0;
          v62 = v63;
        }
        else
        {
          v62 = 0;
          v63 = (unsigned __int16)v91;
        }
LABEL_152:
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 48) + 120))(a3, a4, v63, &v91);
        if ((v16 & 0x80000000) == 0)
        {
          if (!v62
            || (*(unsigned __int16 *)(a1 + 138) < 2u || !*(_DWORD *)(a1 + 140)
              ? (v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 192))(a3, a4, v62))
              : (*(_WORD *)__dst = 0,
                 v88 = 16,
                 v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, v62, 0, 1, &v88, __dst)), v16 = v70, (v70 & 0x80000000) == 0))
          {
            v52 = v91;
            if ((_WORD)v91)
              continue;
          }
        }
        return v16;
      }
    }
  }
  return v16;
}

uint64_t hlp_Disambiguate(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, unsigned __int16 a9)
{
  uint64_t NextUtf8Offset;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t PreviousUtf8Offset;
  uint64_t v31;
  const char *v32;
  int i;
  unsigned __int16 v34;
  const char *v35;
  int v36;
  int j;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  const char *v44;
  int v45;
  int k;
  uint64_t v47;
  uint64_t (*v48)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v49;
  unsigned __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v55;
  unsigned __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  int v73;
  char *__s1;
  __int16 v75;
  char v76[24];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  LODWORD(NextUtf8Offset) = a8;
  v84 = *MEMORY[0x24BDAC8D0];
  v80 = xmmword_214F033A2;
  v81 = unk_214F033B2;
  v82 = xmmword_214F033C2;
  v83 = unk_214F033D2;
  strcpy(v76, "disambiguate_homographs");
  v77 = unk_214F0337A;
  v78 = xmmword_214F03382;
  v79 = unk_214F03392;
  v75 = 0;
  __s1 = 0;
  v73 = 0;
  v72 = 0;
  v70 = 0;
  v71 = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 104))(a2, a3, 1, 0, &v70);
  if ((v17 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 48) + 184))(a2, a3, a5, 4, &v75) & 0x80000000) == 0)
  {
    v67 = a7;
    v68 = a2;
    v69 = a3;
    if (v75 == 1)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, a5, 4, &__s1, &v71);
      if ((v17 & 0x80000000) == 0)
      {
        if (cstdlib_strcmp(__s1, ""))
        {
          v18 = (int)(a7 - a6 + 14);
          if (v18 > *(unsigned __int16 *)(a1 + 136))
          {
            v19 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 104), (int)(a7 - a6 + 14));
            if (!v19
              || (*(_QWORD *)(a1 + 104) = v19,
                  (v24 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 112), v18)) == 0))
            {
              v17 = 2314215434;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v20, v21, v22, v23, v64);
              return v17;
            }
            *(_QWORD *)(a1 + 112) = v24;
            *(_WORD *)(a1 + 136) = a7 - a6 + 14;
          }
          cstdlib_strcpy(*(char **)(a1 + 104), "");
          cstdlib_strcpy(*(char **)(a1 + 112), "");
          v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(v68, a3, 2, (unsigned __int16)v70, (char *)&v73 + 2);
          if ((v25 & 0x80000000) != 0)
            return v25;
          v29 = 0;
          LODWORD(PreviousUtf8Offset) = a9;
          v66 = a5;
          while (1)
          {
            v31 = HIWORD(v73);
            if (!HIWORD(v73))
              break;
            if (HIWORD(v73) == (_DWORD)a5)
            {
              v32 = &a4[NextUtf8Offset];
              for (i = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 96) + 128))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v32);
                    i == 1;
                    i = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 96) + 128))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &a4[NextUtf8Offset]))
              {
                NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(a4, NextUtf8Offset);
                v32 = &a4[NextUtf8Offset];
              }
              do
                PreviousUtf8Offset = (unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)a4, PreviousUtf8Offset);
              while ((*(unsigned int (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 96) + 128))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &a4[PreviousUtf8Offset]) == 1);
              v34 = utf8_GetNextUtf8Offset(a4, PreviousUtf8Offset);
              v35 = &a4[a6];
              v36 = NextUtf8Offset - a6;
              cstdlib_strncat(*(char **)(a1 + 104), v35, v36);
              for (j = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v35, v36); j; --j)
                cstdlib_strcat(*(char **)(a1 + 112), " ");
              a6 = v34;
              cstdlib_strcat(*(char **)(a1 + 104), "§");
              cstdlib_strncat(*(char **)(a1 + 104), v32, v34 - (int)NextUtf8Offset);
              v38 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v32, v34 - NextUtf8Offset);
              if (cstdlib_strlen(__s1) <= v38
                || (cstdlib_strlen(__s1) != v38 ? (v39 = v29 > 9) : (v39 = 1), v39))
              {
                v40 = v29;
              }
              else
              {
                v41 = 1;
                do
                {
                  cstdlib_strcat(*(char **)(a1 + 104), "~");
                  v40 = (v29 + 1);
                  v39 = cstdlib_strlen(__s1) - v38 > v41++;
                  v42 = !v39 || v29 >= 9;
                  LODWORD(v29) = v29 + 1;
                }
                while (!v42);
              }
              cstdlib_strcat(*(char **)(a1 + 104), "§");
              cstdlib_strcat(*(char **)(a1 + 112), "§");
              cstdlib_strcat(*(char **)(a1 + 112), __s1);
              if (cstdlib_strlen(__s1) < v38 && cstdlib_strlen(__s1) != v38)
              {
                v43 = 0;
                do
                {
                  cstdlib_strcat(*(char **)(a1 + 112), "~");
                  ++v43;
                }
                while (v38 - cstdlib_strlen(__s1) > (unsigned __int16)v43);
              }
              cstdlib_strcat(*(char **)(a1 + 112), "§");
              v31 = HIWORD(v73);
              LODWORD(PreviousUtf8Offset) = a6;
              v29 = v40;
              LODWORD(a5) = v66;
            }
            v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 120))(v68, v69, v31, (char *)&v73 + 2);
            if ((v17 & 0x80000000) != 0)
              return v17;
          }
          if (a6 < v67)
          {
            v44 = &a4[a6];
            v45 = v67 - a6;
            cstdlib_strncat(*(char **)(a1 + 104), v44, v45);
            for (k = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v44, v45); k; --k)
              cstdlib_strcat(*(char **)(a1 + 112), " ");
          }
          v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if (v29 > 9)
          {
            log_OutText(v47, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Homograph validation not OK", v26, v27, v28, v64);
            LOWORD(v73) = 0;
            return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 160))(v68, v69, v66, 7, 1, &v73, (char *)&v70 + 2);
          }
          log_OutText(v47, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s L1: %s", v26, v27, v28, (uint64_t)v76);
          v48 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 72) + 120);
          v49 = *(const char **)(a1 + 104);
          v50 = cstdlib_strlen(v49);
          v25 = v48(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0, v49, v50);
          if ((v25 & 0x80000000) != 0)
            return v25;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s L2: %s", v51, v52, v53, (uint64_t)v76);
          v54 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 72) + 120);
          v55 = *(const char **)(a1 + 112);
          v56 = cstdlib_strlen(v55);
          v25 = v54(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 1, v55, v56);
          if ((v25 & 0x80000000) != 0)
            return v25;
          v25 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 72) + 80))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v76);
          if ((v25 & 0x80000000) != 0)
            return v25;
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 72) + 128))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0, &v72, (char *)&v71 + 2);
          if ((v17 & 0x80000000) == 0)
          {
            v72[HIWORD(v71)] = 0;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s O1: %s", v57, v58, v59, (uint64_t)v76);
            if (cstdlib_strstr(v72, "§"))
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Homograph validation not OK", v60, v61, v62, v65);
              LOWORD(v73) = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48) + 160))(v68, v69, v66, 7, 1, &v73, (char *)&v70 + 2);
            }
          }
        }
      }
    }
  }
  return v17;
}

uint64_t fe_hmogrph_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 488);
  if ((int)result >= 0)
    return result;
  else
    return 2314215432;
}

uint64_t fe_hmogrph_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2314215425;
  result = 0;
  *a2 = &IFeHmogrph;
  return result;
}

uint64_t fe_hmogrph_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2314215431;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_hmogrph_ClassClose()
{
  return 0;
}

uint64_t com_useStatHmogrph(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[16];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  memset(v9, 0, sizeof(v9));
  *a2 = 0;
  result = stat_hmogrph_getBrokerString(a1, (char *)v9, 0x100uLL);
  if ((result & 0x80000000) == 0)
  {
    if ((brk_DataOpenEx(*(_QWORD *)(a1 + 24), (uint64_t)v9, 1, (uint64_t)&v8) & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Stathmogrph data not found", v5, v6, v7, 0);
    }
    else
    {
      *a2 = 1;
      result = brk_DataClose(*(_QWORD *)(a1 + 24), v8);
      if ((result & 0x80000000) != 0)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t stat_hmogrph_getBrokerString(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t result;
  int v7;
  char *v8;
  char *__s2;
  char __s1[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  __s2 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)__s1 = 0u;
  v11 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v8);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "stathmogrph_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v8);
      v7 = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, a3);
      return v7 & (v7 >> 31);
    }
  }
  return result;
}

uint64_t com_getUnicodeOrth(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, _QWORD *a5)
{
  int v10;
  uint64_t result;
  char *v12;
  _BYTE __c[11];
  char __dst[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  cstdlib_strcpy(__dst, "stathmogrph_");
  cstdlib_strcat(__dst, a4);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", __dst, &__c[3], &__c[1], __c);
  result = 0;
  if ((v10 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12)
      *v12 = 0;
    *a5 = **(_QWORD **)&__c[3];
    return 1;
  }
  return result;
}

uint64_t hlp_addWord(uint64_t a1, const char *a2, int a3, int a4, const char *a5, const char *a6, const char *a7, unsigned int a8, const char *a9, uint64_t *a10, const char *a11, const char *a12, uint64_t a13)
{
  __int16 v15;
  __int16 v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  char *v39;
  char *v40;
  const char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  __int16 v49;
  unsigned int v50;
  char *v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  char *v60;
  _QWORD *v61;
  int v62;
  char *v63;
  _QWORD *v64;
  int v65;
  char *v66;
  _QWORD *v67;
  int v68;
  char *v69;
  _QWORD *v70;
  int v71;
  char *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  char *v100;
  _QWORD *v101;
  int v102;
  char *v103;
  _QWORD *v104;
  int v105;
  char *v106;
  _QWORD *v107;
  int v108;
  char *v109;
  _QWORD *v110;
  int v111;
  char *v112;
  uint64_t v113;
  unsigned int v115;
  unint64_t __src;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v124;
  char *v125;

  v15 = a4;
  v16 = a3;
  v18 = a1;
  v19 = a13;
  v20 = a10;
  if (!*(_WORD *)(a13 + 8))
  {
LABEL_6:
    v23 = *(unsigned __int16 *)(a13 + 10);
    if (*(_WORD *)(a13 + 10))
    {
      v24 = *(_QWORD *)a13;
      if (*(unsigned __int16 *)(a13 + 8) + 2 <= v23)
      {
        v118 = a8;
        v30 = a7;
      }
      else
      {
        v25 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a13, (v23 << 6) + 1280);
        if (!v25)
          goto LABEL_39;
        v118 = a8;
        v30 = a7;
        *(_QWORD *)a13 = v25;
        cstdlib_memset((void *)(v25 + ((unint64_t)*(unsigned __int16 *)(a13 + 8) << 6)), 0, 0x540uLL);
        *(_WORD *)(a13 + 10) += 20;
        v24 = *(_QWORD *)a13;
      }
    }
    else
    {
      v31 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 3201);
      *(_QWORD *)a13 = v31;
      if (!v31)
        goto LABEL_39;
      v24 = v31;
      v118 = a8;
      v30 = a7;
      *(_WORD *)(a13 + 10) = 50;
    }
    v121 = *(unsigned __int16 *)(a13 + 8);
    v32 = v24 + (v121 << 6);
    v33 = *(_QWORD **)(v18 + 8);
    v34 = cstdlib_strlen(a2);
    v35 = (char *)heap_Calloc(v33, 1, (v34 + 4));
    *(_QWORD *)v32 = v35;
    if (v35)
    {
      v117 = v24;
      cstdlib_strcpy(v35, a2);
      *(_DWORD *)(v32 + 32) = 0;
      v36 = v18;
      *(_DWORD *)(v32 + 36) = hlp_doesWordEndInComma(a2);
      v37 = *(_QWORD **)(v18 + 8);
      v38 = cstdlib_strlen(a2);
      v39 = (char *)heap_Calloc(v37, 1, (v38 + 4));
      *(_QWORD *)(v32 + 40) = v39;
      if (!v39)
      {
LABEL_59:
        v75 = 2314215434;
        v76 = *(_QWORD *)(v36 + 32);
        goto LABEL_60;
      }
      v40 = v39;
      v41 = *(const char **)v32;
      if (*(_DWORD *)(v32 + 36) == 1)
      {
        v42 = cstdlib_strlen(v41);
        cstdlib_strncpy(v40, v41, (v42 - 1));
      }
      else
      {
        cstdlib_strcpy(v39, v41);
      }
      v77 = *(_QWORD **)(v18 + 8);
      v78 = cstdlib_strlen(a5);
      v79 = (char *)heap_Calloc(v77, 1, (v78 + 1));
      v80 = v18;
      v81 = v117;
      v82 = v121;
      v83 = v117 + (v121 << 6);
      *(_QWORD *)(v83 + 16) = v79;
      if (!v79)
        goto LABEL_58;
      cstdlib_strcpy(v79, a5);
      v84 = (char *)heap_Calloc(*(_QWORD **)(v80 + 8), 1, v118 + 1);
      *(_QWORD *)(v83 + 24) = v84;
      if (!v84
        || (cstdlib_strncpy(v84, v30, v118),
            v85 = *((unsigned __int16 *)a10 + 4),
            v86 = v117 + (v121 << 6),
            *(_WORD *)(v86 + 56) = v85,
            v87 = heap_Calloc(*(_QWORD **)(v80 + 8), v85, 16),
            *(_QWORD *)(v86 + 48) = v87,
            v125 = (char *)(v86 + 48),
            !v87))
      {
LABEL_58:
        v75 = 2314215434;
        v76 = *(_QWORD *)(v80 + 32);
        goto LABEL_60;
      }
      if (!*((_WORD *)a10 + 4))
      {
LABEL_57:
        v75 = 0;
        v113 = v81 + (v82 << 6);
        *(_WORD *)(v113 + 8) = v16;
        *(_WORD *)(v113 + 10) = v15;
        ++*(_WORD *)(v19 + 8);
        return v75;
      }
      v88 = 0;
      v89 = *a10;
      while (1)
      {
        v90 = v89 + 32 * v88;
        v91 = *(unsigned __int16 *)(v90 + 8);
        v92 = *(_QWORD *)v125 + 16 * v88;
        *(_WORD *)(v92 + 8) = v91;
        *(_WORD *)(v92 + 10) = *(_WORD *)(v90 + 24);
        if (!v91)
          return 0;
        v93 = heap_Calloc(*(_QWORD **)(v80 + 8), v91, 56);
        v94 = 16 * v88;
        *(_QWORD *)(*(_QWORD *)v125 + 16 * v88) = v93;
        if (!v93)
          goto LABEL_58;
        v89 = *a10;
        if (*(_WORD *)(*a10 + 32 * v88 + 8))
        {
          v95 = 0;
          v96 = 0;
          __src = v88;
          do
          {
            v36 = v80;
            v97 = *(_QWORD **)(v80 + 8);
            v98 = v96;
            v99 = cstdlib_strlen(*(const char **)(*(_QWORD *)(v89 + 32 * v88) + 8 * v96));
            v100 = (char *)heap_Calloc(v97, 1, (v99 + 1));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95) = v100;
            if (!v100)
              goto LABEL_59;
            cstdlib_strcpy(v100, *(const char **)(*(_QWORD *)(*a10 + 32 * v88) + 8 * v98));
            v120 = v98;
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95 + 8) = *(_WORD *)(*(_QWORD *)(*a10 + 32 * v88 + 16)
                                                                                + 2 * v98);
            v101 = *(_QWORD **)(v36 + 8);
            v102 = cstdlib_strlen(a9);
            v103 = (char *)heap_Calloc(v101, 1, (v102 + 1));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95 + 16) = v103;
            v80 = v36;
            if (!v103)
              goto LABEL_58;
            cstdlib_strcpy(v103, a9);
            v104 = *(_QWORD **)(v36 + 8);
            v105 = cstdlib_strlen(a11);
            v106 = (char *)heap_Calloc(v104, 1, (v105 + 1));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95 + 24) = v106;
            if (!v106)
              goto LABEL_58;
            cstdlib_strcpy(v106, a11);
            v107 = *(_QWORD **)(v36 + 8);
            v108 = cstdlib_strlen(a12);
            v109 = (char *)heap_Calloc(v107, 1, (v108 + 1));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95 + 32) = v109;
            if (!v109)
              goto LABEL_58;
            cstdlib_strcpy(v109, a12);
            v110 = *(_QWORD **)(v36 + 8);
            v111 = cstdlib_strlen(a6);
            v112 = (char *)heap_Calloc(v110, 1, (v111 + 1));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + v94) + v95 + 40) = v112;
            if (!v112)
              goto LABEL_58;
            cstdlib_strcpy(v112, a6);
            v96 = v120 + 1;
            v89 = *a10;
            v88 = __src;
            v95 += 56;
          }
          while (v120 + 1 < (unint64_t)*(unsigned __int16 *)(*a10 + 32 * __src + 8));
        }
        ++v88;
        v81 = v117;
        v82 = v121;
        v19 = a13;
        if (v88 >= *((unsigned __int16 *)a10 + 4))
          goto LABEL_57;
      }
    }
LABEL_39:
    v75 = 2314215434;
    v76 = *(_QWORD *)(v18 + 32);
    goto LABEL_60;
  }
  v21 = *(_QWORD *)a13 + 48;
  v22 = *(unsigned __int16 *)(a13 + 8);
  while (*(unsigned __int16 *)(v21 - 40) != a3 || *(unsigned __int16 *)(v21 - 38) != a4)
  {
    v21 += 64;
    if (!--v22)
      goto LABEL_6;
  }
  if (!*(_WORD *)(v21 + 8))
    return 0;
  v43 = 0;
  v44 = *(_QWORD *)v21;
  while (1)
  {
    v45 = v44 + 16 * v43;
    v47 = *(unsigned __int16 *)(v45 + 10);
    v46 = (_WORD *)(v45 + 10);
    v48 = *v20 + 32 * v43;
    v49 = *(_WORD *)(v48 + 8);
    v50 = *(unsigned __int16 *)(v48 + 24);
    if (v47 > v50)
      *v46 = v50;
    v51 = (char *)(unsigned __int16)*(v46 - 1);
    v52 = v49 + (_WORD)v51;
    v124 = (char *)(unsigned __int16)(v49 + (_WORD)v51);
    v53 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(v44 + 16 * v43), 56 * (_QWORD)v124);
    if (!v53)
      break;
    v44 = *(_QWORD *)v21;
    *(_QWORD *)(*(_QWORD *)v21 + 16 * v43) = v53;
    if (v51 < v52)
    {
      v54 = 56 * (_QWORD)v51;
      v55 = v51;
      v119 = v51;
      do
      {
        v56 = (char *)(v55 - v51);
        if ((_DWORD)v51)
        {
          v57 = 0;
          while (cstdlib_strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43) + v57), *(const char **)(*(_QWORD *)(*v20 + 32 * v43) + 8 * (_QWORD)v56)))
          {
            v57 += 56;
            if (v54 == v57)
              goto LABEL_28;
          }
          v44 = *(_QWORD *)v21;
          v73 = *(_QWORD *)(*(_QWORD *)v21 + 16 * v43) + v57;
          v74 = *(unsigned __int16 *)(*(_QWORD *)(*v20 + 32 * v43 + 16) + 2 * (_QWORD)v56);
          if (*(unsigned __int16 *)(v73 + 8) > v74)
            *(_WORD *)(v73 + 8) = v74;
        }
        else
        {
LABEL_28:
          v58 = *(_QWORD **)(a1 + 8);
          v59 = cstdlib_strlen(*(const char **)(*(_QWORD *)(*v20 + 32 * v43) + 8 * (_QWORD)v56));
          v60 = (char *)heap_Calloc(v58, 1, (v59 + 1));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                    + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)) = v60;
          if (!v60)
          {
            v75 = 2314215434;
            v76 = *(_QWORD *)(a1 + 32);
            goto LABEL_60;
          }
          cstdlib_strcpy(v60, *(const char **)(*(_QWORD *)(*v20 + 32 * v43) + 8 * (_QWORD)v56));
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                   + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)
                   + 8) = *(_WORD *)(*(_QWORD *)(*v20 + 32 * v43 + 16) + 2 * (_QWORD)v56);
          v61 = *(_QWORD **)(a1 + 8);
          v62 = cstdlib_strlen(a9);
          v63 = (char *)heap_Calloc(v61, 1, (v62 + 1));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                    + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)
                    + 16) = v63;
          v18 = a1;
          if (!v63)
            goto LABEL_39;
          cstdlib_strcpy(v63, a9);
          v64 = *(_QWORD **)(a1 + 8);
          v65 = cstdlib_strlen(a11);
          v66 = (char *)heap_Calloc(v64, 1, (v65 + 1));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                    + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)
                    + 24) = v66;
          if (!v66)
            goto LABEL_39;
          cstdlib_strcpy(v66, a11);
          v67 = *(_QWORD **)(a1 + 8);
          v68 = cstdlib_strlen(a12);
          v69 = (char *)heap_Calloc(v67, 1, (v68 + 1));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                    + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)
                    + 32) = v69;
          if (!v69)
            goto LABEL_39;
          cstdlib_strcpy(v69, a12);
          v70 = *(_QWORD **)(a1 + 8);
          v71 = cstdlib_strlen(a6);
          v72 = (char *)heap_Calloc(v70, 1, (v71 + 1));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 16 * v43)
                    + 56 * *(unsigned __int16 *)(*(_QWORD *)v21 + 16 * v43 + 8)
                    + 40) = v72;
          if (!v72)
            goto LABEL_39;
          cstdlib_strcpy(v72, a6);
          v44 = *(_QWORD *)v21;
          ++*(_WORD *)(*(_QWORD *)v21 + 16 * v43 + 8);
          v20 = a10;
          v51 = v119;
        }
        ++v55;
      }
      while (v55 != v124);
    }
    v75 = 0;
    if (++v43 >= (unint64_t)*(unsigned __int16 *)(v21 + 8))
      return v75;
  }
  v75 = 2314215434;
  v76 = *(_QWORD *)(a1 + 32);
LABEL_60:
  log_OutPublic(v76, (uint64_t)"FE_HMOGRPH", 37000, 0, v26, v27, v28, v29, v115);
  return v75;
}

BOOL hlp_doesWordEndInComma(const char *a1)
{
  size_t v2;
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (cstdlib_strlen(a1))
    {
      v2 = cstdlib_strlen(a1);
      if (cstdlib_strstr(",.:?!;()", &a1[v2 - 1]))
        return 1;
    }
  }
  return result;
}

uint64_t hlp_do_add(uint64_t *a1, uint64_t a2, const char *a3, int a4, int a5, const char *a6, const char *a7, const char *a8, const char *a9, const char *a10, unsigned __int16 a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t v31;
  int v32;
  _WORD *v33;
  uint64_t v34;
  unsigned __int16 v35;
  unsigned __int16 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v51;
  unsigned int v52;
  int v53;
  const char *v54;

  if (!*(_WORD *)(a2 + 8))
    return 166731781;
  v15 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 16);
  if (v15)
  {
    v20 = (uint64_t *)v15;
    v21 = *(unsigned __int16 *)(a2 + 8);
    *(_WORD *)(v15 + 10) = v21;
    *(_WORD *)(v15 + 8) = v21;
    v22 = heap_Calloc(*(_QWORD **)(*a1 + 8), v21, 32);
    *v20 = v22;
    if (v22)
    {
      v53 = a5;
      v54 = a6;
      if (!*(_WORD *)(a2 + 8))
      {
LABEL_22:
        hlp_addWord(*a1, a3, a4, v53, a9, v54, a10, a11, a9, v20, a7, a8, (uint64_t)(a1 + 1));
LABEL_26:
        stat_hmogrph_freeCandidatePhons((_QWORD *)*a1, (uint64_t)v20);
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v20);
        return 0;
      }
      v27 = 0;
      while (1)
      {
        v28 = *(_QWORD *)a2 + (v27 << 6);
        v31 = *(_QWORD *)(v28 + 48);
        v30 = (uint64_t **)(v28 + 48);
        v29 = (_QWORD *)v31;
        v32 = *(unsigned __int16 *)(v31 + 10);
        v33 = (_WORD *)(v22 + 32 * v27);
        v33[12] = v32;
        v34 = *(unsigned __int16 *)(v31 + 8);
        if (*(_WORD *)(v31 + 8))
        {
          v35 = 0;
          v36 = (unsigned __int16 *)(*v29 + 8);
          do
          {
            v37 = *v36;
            v36 += 28;
            if (v37 == v32)
              ++v35;
            --v34;
          }
          while (v34);
        }
        else
        {
          v35 = 0;
        }
        v33[4] = v35;
        v33[5] = v35;
        v38 = heap_Calloc(*(_QWORD **)(*a1 + 8), v35, 8);
        v39 = *v20;
        *(_QWORD *)(*v20 + 32 * v27) = v38;
        v40 = *a1;
        if (!v38)
          break;
        v41 = heap_Calloc(*(_QWORD **)(v40 + 8), *(unsigned __int16 *)(v39 + 32 * v27 + 10), 2);
        v22 = *v20;
        *(_QWORD *)(*v20 + 32 * v27 + 16) = v41;
        if (!v41)
          goto LABEL_24;
        v42 = *v30;
        if (*((_WORD *)*v30 + 4))
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = *v42;
          do
          {
            if (*(unsigned __int16 *)(v46 + v43 + 8) == *(unsigned __int16 *)(v22 + 32 * v27 + 24))
            {
              v47 = *(_QWORD *)(*a1 + 8);
              v48 = cstdlib_strlen(*(const char **)(v46 + v43));
              *(_QWORD *)(*(_QWORD *)(*v20 + 32 * v27) + 8 * v45) = heap_Alloc(v47, (v48 + 1));
              v49 = *(char **)(*(_QWORD *)(*v20 + 32 * v27) + 8 * v45);
              if (!v49)
                goto LABEL_24;
              cstdlib_strcpy(v49, *(const char **)(**v30 + v43));
              v42 = *v30;
              v46 = **v30;
              v22 = *v20;
              *(_WORD *)(*(_QWORD *)(*v20 + 32 * v27 + 16) + 2 * v45++) = *(_WORD *)(v46 + v43 + 8);
            }
            ++v44;
            v43 += 56;
          }
          while (v44 < *((unsigned __int16 *)v42 + 4));
        }
        if (++v27 >= (unint64_t)*(unsigned __int16 *)(a2 + 8))
          goto LABEL_22;
      }
      v51 = *(_QWORD *)(v40 + 32);
    }
    else
    {
LABEL_24:
      v51 = *(_QWORD *)(*a1 + 32);
    }
    log_OutPublic(v51, (uint64_t)"FE_HMOGRPH", 37000, 0, v23, v24, v25, v26, v52);
    goto LABEL_26;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v16, v17, v18, v19, v52);
  return 2314215434;
}

_QWORD *stat_hmogrph_freeCandidatePhons(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)a2;
  if (v3)
  {
    v4 = result;
    if (*(_WORD *)(a2 + 8))
    {
      v5 = 0;
      do
      {
        v6 = v3 + 32 * v5;
        v7 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
        {
          if (*(_WORD *)(v6 + 8))
          {
            v8 = 0;
            do
            {
              if (*(_QWORD *)(*(_QWORD *)v6 + 8 * v8))
              {
                heap_Free((_QWORD *)v4[1], *(_QWORD *)(*(_QWORD *)v6 + 8 * v8));
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32 * v5) + 8 * v8) = 0;
                v3 = *(_QWORD *)a2;
              }
              ++v8;
              v6 = v3 + 32 * v5;
            }
            while (v8 < *(unsigned __int16 *)(v6 + 8));
            v7 = *(_QWORD *)v6;
          }
          heap_Free((_QWORD *)v4[1], v7);
          v3 = *(_QWORD *)a2;
          *(_QWORD *)(*(_QWORD *)a2 + 32 * v5) = 0;
        }
        if (*(_QWORD *)(v3 + 32 * v5 + 16))
        {
          heap_Free((_QWORD *)v4[1], *(_QWORD *)(v3 + 32 * v5 + 16));
          v3 = *(_QWORD *)a2;
          *(_QWORD *)(*(_QWORD *)a2 + 32 * v5 + 16) = 0;
        }
        ++v5;
      }
      while (v5 < *(unsigned __int16 *)(a2 + 8));
    }
    result = heap_Free((_QWORD *)v4[1], v3);
    *(_QWORD *)a2 = 0;
  }
  return result;
}

uint64_t hlp_prepare_phons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, const char *a9, const char *a10, unsigned __int16 a11, unsigned __int16 a12, unsigned __int16 a13, const char *a14, const char *a15, unsigned __int16 a16)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int16 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v84;
  char *v85;
  const char *v86;
  uint64_t v87;
  int v88;
  unsigned __int16 v89;
  uint64_t v90;
  const char *v91;
  int v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  unsigned __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  const char *v99;
  const char *v100;
  int v101;
  _WORD v102[5];

  v99 = 0;
  v100 = 0;
  v96 = 0;
  v102[0] = 0;
  v24 = heap_Calloc(*(_QWORD **)(*a4 + 8), 1, 16);
  if (!v24)
  {
    v75 = 2314215434;
    log_OutPublic(*(_QWORD *)(*a4 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v25, v26, v27, v28, v84);
    return v75;
  }
  v29 = v24;
  v101 = 0;
  v98 = 0;
  v97 = 0;
  *(_DWORD *)(v24 + 8) = 65537;
  v30 = heap_Calloc(*(_QWORD **)(*a4 + 8), 1, 32);
  *(_QWORD *)v29 = v30;
  if (!v30
    || (*(_DWORD *)(v30 + 8) = 0,
        v35 = *(_QWORD **)(*a4 + 8),
        v36 = cstdlib_strlen(a6),
        (v37 = heap_Calloc(v35, 1, v36 + 1)) == 0))
  {
    v75 = 2314215434;
    log_OutPublic(*(_QWORD *)(*a4 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v31, v32, v33, v34, v84);
    v38 = 0;
    goto LABEL_64;
  }
  v38 = (char *)v37;
  v91 = a6;
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(*(_QWORD *)(a1 + 48) + 136))(a2, a3, a13, v102);
  if ((v39 & 0x80000000) != 0)
  {
    v75 = v39;
LABEL_64:
    if (*(_QWORD *)v29)
      heap_Free(*(_QWORD **)(*a4 + 8), *(_QWORD *)v29);
    heap_Free(*(_QWORD **)(*a4 + 8), v29);
    if (v38)
      goto LABEL_87;
    return v75;
  }
  v40 = v102[0];
  HIWORD(v98) = v102[0];
  if (!v102[0])
  {
    v75 = 0;
    v76 = 0;
    goto LABEL_71;
  }
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v92 = 0;
  v88 = 1;
  v89 = 1;
  v86 = a8;
  v87 = a5;
  v90 = a7;
  v85 = v38;
  while (1)
  {
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 168))(a2, a3, v40, 0, 1, &v101, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    if (v101 != 17)
    {
      if (v99 && v92 == 1)
      {
        v41 = hlp_addWord(*a4, v38, HIWORD(v96), (unsigned __int16)v96, v99, a8, a15, a16, a14, (uint64_t *)v29, a9, a10, a5);
        if ((v41 & 0x80000000) != 0)
          goto LABEL_61;
        v92 = 0;
      }
      goto LABEL_56;
    }
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*(_QWORD *)(a1 + 48) + 168))(a2, a3, HIWORD(v98), 1, 1, (char *)&v96 + 2, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 168))(a2, a3, HIWORD(v98), 2, 1, &v96, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    if (HIWORD(v96) != v95 || (unsigned __int16)v96 != v94)
    {
      if (v88)
      {
        v94 = v96;
        v95 = HIWORD(v96);
      }
      else
      {
        v41 = hlp_addWord(*a4, v38, v95, v94, v99, a8, a15, a16, a14, (uint64_t *)v29, a9, a10, a5);
        if ((v41 & 0x80000000) != 0)
          goto LABEL_61;
        ++v89;
        v95 = HIWORD(v96);
        v94 = v96;
      }
      v88 = 0;
      v42 = *(_QWORD *)v29;
      *(_WORD *)(v42 + 8) = 0;
      *(_WORD *)(v42 + 24) = -1;
      v92 = 1;
    }
    cstdlib_strncpy(v38, &v91[v95], v94 - (unint64_t)v95);
    v38[(unsigned __int16)v96 - HIWORD(v96)] = 0;
    if (HIWORD(v96) < a11 || (unsigned __int16)v96 > a12)
    {
LABEL_58:
      v75 = 0;
      if (v99 && v92 == 1)
      {
        v41 = hlp_addWord(*a4, v38, HIWORD(v96), (unsigned __int16)v96, v99, a8, a15, a16, a14, (uint64_t *)v29, a9, a10, a5);
LABEL_61:
        v75 = v41;
      }
LABEL_62:
      v76 = v93;
      goto LABEL_71;
    }
    v43 = *(unsigned __int16 *)(*(_QWORD *)v29 + 8);
    *(_WORD *)(*(_QWORD *)v29 + 8) = v43 + 1;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 176))(a2, a3, HIWORD(v98), 3, &v100, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 176))(a2, a3, HIWORD(v98), 5, &v99, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 168))(a2, a3, HIWORD(v98), 7, 1, &v98, &v97);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    v44 = *(_QWORD *)v29;
    v45 = *(unsigned __int16 *)(*(_QWORD *)v29 + 10);
    if (*(_WORD *)(*(_QWORD *)v29 + 10))
    {
      if ((int)v43 + 1 >= v45)
      {
        v54 = heap_Realloc(*(uint64_t **)(*a4 + 8), *(_QWORD *)v44, 8 * v45 + 80);
        if (!v54
          || (v55 = *(_QWORD *)v29,
              *(_QWORD *)v55 = v54,
              (v46 = heap_Realloc(*(uint64_t **)(*a4 + 8), *(_QWORD *)(v55 + 16), 2 * *(unsigned __int16 *)(v55 + 10) + 20)) == 0))
        {
LABEL_89:
          v75 = 2314215434;
          v53 = *a4;
LABEL_91:
          log_OutPublic(*(_QWORD *)(v53 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v48, v49, v50, v51, v84);
          goto LABEL_62;
        }
        v44 = *(_QWORD *)v29;
        *(_QWORD *)(v44 + 16) = v46;
        *(_WORD *)(v44 + 10) += 10;
      }
      else
      {
        v46 = *(_QWORD *)(v44 + 16);
      }
    }
    else
    {
      *(_WORD *)(v44 + 10) = 10;
      v47 = heap_Calloc(*(_QWORD **)(*a4 + 8), 10, 8);
      v52 = *(_QWORD *)v29;
      **(_QWORD **)v29 = v47;
      v53 = *a4;
      if (!v47)
      {
        v75 = 2314215434;
        goto LABEL_91;
      }
      v46 = heap_Calloc(*(_QWORD **)(v53 + 8), *(unsigned __int16 *)(v52 + 10), 2);
      v44 = *(_QWORD *)v29;
      *(_QWORD *)(*(_QWORD *)v29 + 16) = v46;
      if (!v46)
        goto LABEL_89;
    }
    if (v93 <= *(unsigned __int16 *)(v44 + 8))
      v56 = *(_WORD *)(v44 + 8);
    else
      v56 = v93;
    v93 = v56;
    *(_WORD *)(v46 + 2 * v43) = v98;
    if (*(unsigned __int16 *)(v44 + 24) > (unsigned __int16)v98)
      *(_WORD *)(v44 + 24) = v98;
    v57 = v89 - 1;
    v58 = *(const char **)(v90 + 8 * v57);
    v59 = *(const char **)(*(_QWORD *)v44 + 8 * v43);
    if (!v58)
    {
      if (v59)
      {
        v63 = cstdlib_strlen(v59);
        a5 = v87;
        if (v63 >= cstdlib_strlen(v100))
        {
LABEL_55:
          cstdlib_strcpy(*(char **)(**(_QWORD **)v29 + 8 * v43), v100);
          goto LABEL_56;
        }
        v64 = *(_QWORD *)(**(_QWORD **)v29 + 8 * v43);
      }
      else
      {
        v64 = 0;
        a5 = v87;
      }
      v72 = *(uint64_t **)(*a4 + 8);
      v73 = cstdlib_strlen(v100);
      v74 = heap_Realloc(v72, v64, (v73 + 1));
      if (!v74)
        goto LABEL_89;
      *(_QWORD *)(**(_QWORD **)v29 + 8 * v43) = v74;
      a8 = v86;
      goto LABEL_55;
    }
    if (!v59)
      break;
    v60 = cstdlib_strlen(v59);
    v61 = v90;
    if (v60 < cstdlib_strlen(*(const char **)(v90 + 8 * v57)))
    {
      v62 = *(_QWORD *)(**(_QWORD **)v29 + 8 * v43);
      v58 = *(const char **)(v90 + 8 * v57);
      goto LABEL_49;
    }
LABEL_51:
    cstdlib_strcpy(*(char **)(**(_QWORD **)v29 + 8 * v43), *(const char **)(v61 + 8 * v57));
    a5 = v87;
    v38 = v85;
LABEL_56:
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 136))(a2, a3, HIWORD(v98), (char *)&v98 + 2);
    if ((v41 & 0x80000000) != 0)
      goto LABEL_61;
    v40 = HIWORD(v98);
    if (!HIWORD(v98))
      goto LABEL_58;
  }
  v62 = 0;
LABEL_49:
  v65 = *(uint64_t **)(*a4 + 8);
  v66 = cstdlib_strlen(v58);
  v67 = heap_Realloc(v65, v62, (v66 + 1));
  if (v67)
  {
    *(_QWORD *)(**(_QWORD **)v29 + 8 * v43) = v67;
    a8 = v86;
    v61 = v90;
    goto LABEL_51;
  }
  v75 = 2314215434;
  log_OutPublic(*(_QWORD *)(*a4 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v68, v69, v70, v71, v84);
  v76 = v93;
  v38 = v85;
LABEL_71:
  v77 = *a4;
  v78 = *(_QWORD *)v29;
  if (*(_QWORD *)v29)
  {
    if (*(_WORD *)(v29 + 8))
    {
      v79 = 0;
      do
      {
        v80 = *(_QWORD *)(v78 + 32 * v79);
        if (v80)
        {
          if (v76)
          {
            v81 = 0;
            do
            {
              v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 32 * v79) + v81);
              if (v82)
              {
                heap_Free(*(_QWORD **)(v77 + 8), v82);
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 32 * v79) + v81) = 0;
              }
              v81 += 8;
            }
            while (8 * v76 != v81);
            v80 = *(_QWORD *)(*(_QWORD *)v29 + 32 * v79);
          }
          heap_Free(*(_QWORD **)(v77 + 8), v80);
          v78 = *(_QWORD *)v29;
          *(_QWORD *)(*(_QWORD *)v29 + 32 * v79) = 0;
        }
        if (*(_QWORD *)(v78 + 32 * v79 + 16))
        {
          heap_Free(*(_QWORD **)(v77 + 8), *(_QWORD *)(v78 + 32 * v79 + 16));
          v78 = *(_QWORD *)v29;
          *(_QWORD *)(*(_QWORD *)v29 + 32 * v79 + 16) = 0;
        }
        ++v79;
      }
      while (v79 < *(unsigned __int16 *)(v29 + 8));
    }
    heap_Free(*(_QWORD **)(v77 + 8), v78);
    *(_QWORD *)v29 = 0;
    v77 = *a4;
  }
  heap_Free(*(_QWORD **)(v77 + 8), v29);
LABEL_87:
  heap_Free(*(_QWORD **)(*a4 + 8), (uint64_t)v38);
  return v75;
}

uint64_t hlp_merge_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const char *a5, char *a6, const char *a7, const char *a8, const char *a9, unsigned __int16 a10, const char *a11, const char *a12, unsigned __int16 a13)
{
  uint64_t v21;
  __int16 ChineseUTFCharNum;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned __int16 v47;
  _QWORD *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned __int16 v64;
  char *__dst;
  const char *v66;
  uint64_t v67;
  const char *v68;
  char *__s;
  unsigned __int16 v70;
  int v71;
  const char *v72;
  char *v73;

  v72 = 0;
  v73 = 0;
  v71 = 0;
  v70 = 0;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 48)
                                                                                             + 168))(a2, a3, a10, 1, 1, &v71, (char *)&v71 + 2);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 48) + 168))(a2, a3, a10, 2, 1, &v70, (char *)&v71 + 2);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 48) + 176))(a2, a3, a10, 3, &v73, (char *)&v71 + 2);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v68 = a7;
  __s = a6;
  ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)a5, v70);
  v23 = utf8_GetChineseUTFCharNum((uint64_t)a5, (unsigned __int16)v71);
  v24 = heap_Calloc(*(_QWORD **)(*a4 + 8), 1, 16);
  v29 = *a4;
  if (v24)
  {
    v30 = v24;
    v66 = a8;
    v31 = *(_QWORD **)(v29 + 8);
    v32 = cstdlib_strlen(__s);
    v33 = heap_Calloc(v31, 1, (v32 + 4));
    v38 = *a4;
    if (v33)
    {
      v39 = v33;
      v64 = ChineseUTFCharNum - v23;
      v44 = heap_Calloc(*(_QWORD **)(v38 + 8), 1, 8 * (unsigned __int16)(ChineseUTFCharNum - v23));
      v67 = v30;
      if (!v44)
      {
        v57 = 2314215434;
        log_OutPublic(*(_QWORD *)(*a4 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v40, v41, v42, v43, v61);
        goto LABEL_23;
      }
      __dst = (char *)v39;
      v45 = extstdlib_strtok_r(v73, ".", &v72);
      if (v45)
      {
        v46 = v45;
        v47 = 0;
        do
        {
          if (cstdlib_strcmp(v46, "*"))
          {
            v48 = *(_QWORD **)(*a4 + 8);
            v49 = cstdlib_strlen(v46);
            v50 = (char *)heap_Calloc(v48, 1, (v49 + 1));
            *(_QWORD *)(v44 + 8 * v47) = v50;
            if (!v50)
            {
              v57 = 2314215434;
              log_OutPublic(*(_QWORD *)(*a4 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v51, v52, v53, v54, v61);
LABEL_22:
              v39 = (uint64_t)__dst;
              goto LABEL_23;
            }
            cstdlib_strcpy(v50, v46);
            v55 = *(_QWORD *)(v44 + 8 * v47);
            *(_BYTE *)(v55 + (unsigned __int16)cstdlib_strlen(v46)) = 0;
          }
          v46 = extstdlib_strtok_r(0, ".", &v72);
          ++v47;
        }
        while (v46);
      }
      cstdlib_strcpy(__dst, __s);
      v63 = (unsigned __int16)v71;
      v56 = hlp_prepare_phons(a1, a2, a3, a4, v67, a5, v44, v68, v66, a9, v71, v70, a10, a11, a12, a13);
      if ((v56 & 0x80000000) != 0)
      {
        v57 = v56;
        goto LABEL_22;
      }
      v39 = (uint64_t)__dst;
      v57 = hlp_do_add(a4, v67, __dst, v63, v62, v68, v66, a9, a11, a12, a13);
LABEL_23:
      heap_Free(*(_QWORD **)(*a4 + 8), v39);
      if (v44)
      {
        v59 = v64;
        v30 = v67;
        if (v64)
        {
          v60 = (uint64_t *)v44;
          do
          {
            if (*v60)
            {
              heap_Free(*(_QWORD **)(*a4 + 8), *v60);
              *v60 = 0;
            }
            ++v60;
            --v59;
          }
          while (v59);
        }
        heap_Free(*(_QWORD **)(*a4 + 8), v44);
      }
      else
      {
        v30 = v67;
      }
    }
    else
    {
      v57 = 2314215434;
      log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v34, v35, v36, v37, v61);
    }
    stat_hmogrph_freeNewSentData((uint64_t)a4, v30);
    heap_Free(*(_QWORD **)(*a4 + 8), v30);
  }
  else
  {
    v57 = 2314215434;
    log_OutPublic(*(_QWORD *)(v29 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v25, v26, v27, v28, v61);
  }
  return v57;
}

uint64_t stat_hmogrph_freeNewSentData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int16 v18;
  unsigned __int16 *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_WORD *)(a2 + 10))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)a2;
      v6 = (uint64_t *)(*(_QWORD *)a2 + (v4 << 6));
      if (*v6)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v6);
        *v6 = 0;
      }
      v9 = v6[2];
      v8 = v6 + 2;
      v7 = v9;
      if (v9)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v7);
        *v8 = 0;
      }
      v10 = v5 + (v4 << 6);
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
        *(_QWORD *)(v10 + 24) = 0;
      }
      v14 = *(_QWORD *)(v10 + 40);
      v13 = (_QWORD *)(v10 + 40);
      v12 = v14;
      if (v14)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v12);
        *v13 = 0;
      }
      v15 = v5 + (v4 << 6);
      v17 = (uint64_t *)(v15 + 48);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
      {
        v20 = *(unsigned __int16 *)(v15 + 56);
        v19 = (unsigned __int16 *)(v15 + 56);
        v18 = v20;
        if (v20)
        {
          v21 = 0;
          do
          {
            v22 = *(_QWORD *)(v16 + 16 * v21);
            if (v22)
            {
              if (*(_WORD *)(v16 + 16 * v21 + 8))
              {
                v23 = 0;
                v24 = 0;
                do
                {
                  v25 = *(_QWORD *)(v22 + v23);
                  if (v25)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v25);
                    v16 = *v17;
                    v22 = *(_QWORD *)(*v17 + 16 * v21);
                    *(_QWORD *)(v22 + v23) = 0;
                  }
                  v26 = *(_QWORD *)(v22 + v23 + 16);
                  if (v26)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v26);
                    v16 = *v17;
                    v22 = *(_QWORD *)(*v17 + 16 * v21);
                    *(_QWORD *)(v22 + v23 + 16) = 0;
                  }
                  v27 = *(_QWORD *)(v22 + v23 + 24);
                  if (v27)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v27);
                    v16 = *v17;
                    v22 = *(_QWORD *)(*v17 + 16 * v21);
                    *(_QWORD *)(v22 + v23 + 24) = 0;
                  }
                  v28 = *(_QWORD *)(v22 + v23 + 32);
                  if (v28)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v28);
                    v16 = *v17;
                    v22 = *(_QWORD *)(*v17 + 16 * v21);
                    *(_QWORD *)(v22 + v23 + 32) = 0;
                  }
                  v29 = *(_QWORD *)(v22 + v23 + 40);
                  if (v29)
                  {
                    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v29);
                    v16 = *v17;
                    v22 = *(_QWORD *)(*v17 + 16 * v21);
                    *(_QWORD *)(v22 + v23 + 40) = 0;
                  }
                  ++v24;
                  v23 += 56;
                }
                while (v24 < *(unsigned __int16 *)(v16 + 16 * v21 + 8));
              }
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v22);
              v16 = *v17;
              *(_QWORD *)(*v17 + 16 * v21) = 0;
              v18 = *v19;
            }
            ++v21;
          }
          while (v21 < v18);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
        *v17 = 0;
      }
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(a2 + 10));
  }
  if (*(_QWORD *)a2)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)a2);
    *(_QWORD *)a2 = 0;
  }
  return 0;
}

uint64_t stat_hmogrph_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  unsigned __int16 v29;
  uint64_t v30;
  int v32;
  BOOL v33;
  const char *v34;
  char *v35;
  __int16 v36;
  __int16 v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int NextUtf8Offset;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int16 v80;
  int v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  const char *v95;
  const char *v96;
  unsigned __int16 v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  unsigned __int16 v101;
  uint64_t v102;
  char *__s;
  uint64_t v104;
  char *v105;
  int v106;
  int v107;
  const char *v108;
  int v109;
  char *v110;
  _BYTE v111[7];
  char *v112;
  char *v113;
  char *v114;
  const char *v115;
  const char *v116;
  char *v117;
  char *v118;
  __int16 v119;
  int v120;
  unsigned int v121;
  int v122;
  const char *v123;
  int v124;
  unsigned __int16 v125[6];

  v5 = (uint64_t *)a5;
  v8 = a2;
  v124 = 0;
  *(_DWORD *)v125 = 0;
  v123 = 0;
  v121 = 0;
  v122 = 0;
  v120 = 0;
  v119 = 0;
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  v110 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v10 = a5 + 8;
  *(_DWORD *)(a5 + 16) = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v125[1]);
  if ((v11 & 0x80000000) != 0)
  {
    v12 = v11;
    goto LABEL_106;
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(v8 + 184))(a3, a4, v125[1], 0, &v124);
  if ((v12 & 0x80000000) != 0
    || (unsigned __int16)v124 != 1
    || (v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, char *))(v8 + 176))(a3, a4, v125[1], 0, &v123, (char *)&v124 + 2), (v12 & 0x80000000) != 0)|| HIWORD(v124) < 2u)
  {
    if ((v12 & 0x80000000) != 0)
      goto LABEL_106;
    return v12;
  }
  log_OutText(*(_QWORD *)(*v5 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Stathmogrph: processing=\"%s\"", v13, v14, v15, (uint64_t)v123);
  v16 = heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 1024);
  if (!v16)
  {
    v12 = 2314215434;
    log_OutPublic(*(_QWORD *)(*v5 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v17, v18, v19, v20, v92);
    goto LABEL_106;
  }
  v21 = v16;
  v22 = cstdlib_strlen(v123);
  v27 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, (unsigned __int16)(v22 + 1));
  if (!v27)
  {
    v12 = 2314215434;
    log_OutPublic(*(_QWORD *)(*v5 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v23, v24, v25, v26, v92);
    v107 = 0;
    v108 = 0;
    v28 = 0;
    v106 = 0;
    goto LABEL_142;
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v8 + 104))(a3, a4, 2, v125[1], v125);
  v28 = 0;
  v108 = 0;
  if ((v12 & 0x80000000) != 0)
  {
    v106 = 0;
    v107 = 0;
    goto LABEL_142;
  }
  v29 = v125[0];
  v106 = 0;
  v107 = 0;
  if (!v125[0])
    goto LABEL_142;
  v104 = 0;
  v106 = 0;
  v97 = 0;
  v98 = v21;
  v28 = 0;
  v107 = 0;
  v102 = v8;
  __s = v27;
  do
  {
    v109 = 0;
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v8 + 168))(a3, a4, v29, 0, 1, &v121, (char *)&v124 + 2);
    if ((v30 & 0x80000000) != 0)
    {
      v108 = 0;
      goto LABEL_114;
    }
    if (v121 <= 0xA && ((1 << v121) & 0x610) != 0)
    {
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v8 + 168))(a3, a4, v125[0], 1, 1, (char *)&v120 + 2, (char *)&v124 + 2);
      if ((v30 & 0x80000000) != 0
        || (v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v8 + 168))(a3, a4, v125[0], 2, 1, &v120, (char *)&v124 + 2), (v30 & 0x80000000) != 0))
      {
LABEL_111:
        v108 = 0;
        v28 = 0;
LABEL_112:
        v106 = 0;
LABEL_113:
        v107 = 0;
LABEL_114:
        v12 = v30;
        goto LABEL_140;
      }
      if (HIWORD(v120) > (unsigned __int16)v120)
      {
        v107 = 0;
        v108 = 0;
        v28 = 0;
        v106 = 0;
        v90 = 16049;
LABEL_139:
        v12 = v90 | 0x89F00000;
        goto LABEL_140;
      }
      cstdlib_strncpy(v27, &v123[HIWORD(v120)], (unsigned __int16)v120 - (unint64_t)HIWORD(v120));
      v27[(unsigned __int16)v120 - HIWORD(v120)] = 0;
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v8 + 184))(a3, a4, v125[0], 14, &v124);
      if ((v30 & 0x80000000) != 0)
        goto LABEL_111;
      if ((unsigned __int16)v124 != 1)
        goto LABEL_33;
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8 + 176))(a3, a4, v125[0], 14, &v118, (char *)&v124 + 2);
      if ((v30 & 0x80000000) != 0)
        goto LABEL_111;
      hlp_NLUStrFind(v118, "POS", &v114, (unsigned __int16 *)&v122 + 1);
      if (cstdlib_strstr(v118, "POI"))
      {
        LOWORD(v122) = 0;
        hlp_NLUStrFind(v118, "S_POI", &v113, (unsigned __int16 *)&v122);
        v32 = (unsigned __int16)v122;
        if (!(_WORD)v122)
        {
          hlp_NLUStrFind(v118, "I_POI", &v113, (unsigned __int16 *)&v122);
          v32 = (unsigned __int16)v122;
          if (!(_WORD)v122)
          {
            hlp_NLUStrFind(v118, "E_POI", &v113, (unsigned __int16 *)&v122);
            v32 = (unsigned __int16)v122;
          }
        }
        v33 = v32 == 0;
        if (v32)
          v34 = "_";
        else
          v34 = "";
        v35 = v113;
        if (v33)
          v35 = "";
        v113 = v35;
        v36 = cstdlib_strlen("poi");
        v37 = cstdlib_strlen(v34);
        v101 = v122 + v36 + v37 + 1;
        v38 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, v101);
        if (!v38)
        {
          v107 = 0;
          v108 = 0;
          v28 = 0;
          v106 = 0;
          v12 = 2314215434;
          v21 = v98;
          goto LABEL_140;
        }
        v39 = v38;
        *v38 = 0;
        cstdlib_strcat(v38, "poi");
        cstdlib_strcat(v39, v34);
        cstdlib_strncat(v39, v113, (unsigned __int16)v122);
        v21 = v98;
      }
      else
      {
LABEL_33:
        v101 = 0;
        v39 = 0;
      }
      v100 = v114;
      if (v114)
      {
        v28 = 0;
        if (v39)
          goto LABEL_41;
      }
      else
      {
        v28 = 1;
        v40 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 2);
        v114 = v40;
        if (!v40)
        {
          v108 = v39;
          goto LABEL_132;
        }
        *v40 = 61;
        v114[1] = 0;
        v28 = 1;
        if (v39)
          goto LABEL_41;
      }
      v41 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 2);
      if (v41)
      {
        v39 = v41;
        LOWORD(v122) = 1;
        *(_WORD *)v41 = 61;
LABEL_41:
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 176))(a3, a4, v125[0], 6, &v116, (char *)&v124 + 2);
        v108 = v39;
        if ((v30 & 0x80000000) != 0)
          goto LABEL_112;
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 176))(a3, a4, v125[0], 9, &v115, (char *)&v124 + 2);
        if ((v30 & 0x80000000) != 0)
          goto LABEL_112;
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v8 + 184))(a3, a4, v125[0], 4, &v124);
        if ((v30 & 0x80000000) != 0)
          goto LABEL_112;
        if ((unsigned __int16)v124 == 1)
        {
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8 + 176))(a3, a4, v125[0], 4, &v117, (char *)&v124 + 2);
          if ((v30 & 0x80000000) != 0)
            goto LABEL_112;
        }
        v96 = v117;
        if (v117)
        {
          v106 = 0;
          v42 = (char *)v104;
LABEL_50:
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8 + 176))(a3, a4, v125[0], 5, &v110, (char *)&v124 + 2);
          if ((v30 & 0x80000000) != 0)
            goto LABEL_113;
          v95 = v110;
          if (v110)
          {
            v107 = 0;
LABEL_55:
            if (*(_DWORD *)(a1 + 144) && v121 == 9 && utf8_IsChineseLetter(v27))
            {
              v30 = hlp_merge_add(a1, a3, a4, v5, v123, v27, v117, v116, v115, v125[0], v110, v108, v101);
              if ((v30 & 0x80000000) != 0)
                goto LABEL_114;
              goto LABEL_92;
            }
            v93 = a1;
            v94 = v28;
            v45 = heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 16);
            if (!v45)
            {
              log_OutPublic(*(_QWORD *)(*v5 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v46, v47, v48, v49, v92);
              v12 = 2314215434;
              goto LABEL_127;
            }
            v50 = v45;
            *(_DWORD *)(v45 + 8) = 655360;
            v51 = heap_Calloc(*(_QWORD **)(*v5 + 8), 10, 32);
            *(_QWORD *)v50 = v51;
            if (v51)
            {
              v56 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8 + 176))(a3, a4, v125[0], 3, &v112, (char *)&v124 + 2);
              if ((v56 & 0x80000000) != 0)
              {
                v62 = 0;
LABEL_129:
                v91 = v56;
                goto LABEL_124;
              }
              v57 = cstdlib_strstr(v112, "[SVOX]");
              v58 = v112;
              if (v57)
              {
                v58 = v112 + 6;
                v112 += 6;
              }
              v59 = *(_QWORD *)(*v5 + 8);
              v60 = cstdlib_strlen(v58);
              v61 = (char *)heap_Alloc(v59, v60 + 1);
              v62 = (uint64_t)v61;
              if (!v61)
                goto LABEL_123;
              cstdlib_strcpy(v61, v112);
              if ((unsigned __int16)cstdlib_strlen(v112) >= v97)
              {
                v63 = (unsigned __int16)(cstdlib_strlen(v112) + 1);
                if (v63 <= 4)
                  v64 = 4;
                else
                  v64 = v63;
                v97 = v64;
                v65 = heap_Realloc(*(uint64_t **)(*v5 + 8), (uint64_t)v42, v64);
                if (!v65)
                  goto LABEL_123;
                v42 = (char *)v65;
              }
              v56 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(v8 + 168))(a3, a4, v125[0], 7, 1, &v119, (char *)&v124 + 2);
              if ((v56 & 0x80000000) != 0)
                goto LABEL_129;
              v105 = (char *)v62;
              v66 = 0;
              if (cstdlib_strlen(v27))
              {
                NextUtf8Offset = 0;
                v99 = v5;
                while ((utf8_getUTF8Char((uint64_t)v27, NextUtf8Offset, v111) & 0x80000000) == 0)
                {
                  v68 = *(unsigned __int16 *)(v50 + 10);
                  if (*(unsigned __int16 *)(v50 + 8) >= v68)
                  {
                    v69 = heap_Realloc(*(uint64_t **)(*v5 + 8), *(_QWORD *)v50, 32 * v68 + 320);
                    if (!v69)
                      goto LABEL_115;
                    *(_QWORD *)v50 = v69;
                    *(_WORD *)(v50 + 10) += 10;
                  }
                  if (!hlp_getPhonFromPhonStr(v27, NextUtf8Offset, v105, v42, &v109))
                    break;
                  *(_DWORD *)(*(_QWORD *)v50 + 32 * *(unsigned __int16 *)(v50 + 8) + 8) = 65537;
                  v70 = (_WORD *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 2);
                  v71 = *(_QWORD *)v50;
                  *(_QWORD *)(*(_QWORD *)v50 + 32 * *(unsigned __int16 *)(v50 + 8) + 16) = v70;
                  if (!v70
                    || (*v70 = v119,
                        *(_WORD *)(v71 + 32 * *(unsigned __int16 *)(v50 + 8) + 24) = v119,
                        v72 = heap_Alloc(*(_QWORD *)(*v5 + 8), 8),
                        (*(_QWORD *)(*(_QWORD *)v50 + 32 * *(unsigned __int16 *)(v50 + 8)) = v72) == 0))
                  {
LABEL_115:
                    v21 = v98;
                    v62 = (uint64_t)v105;
                    goto LABEL_123;
                  }
                  v73 = NextUtf8Offset;
                  v74 = cstdlib_strlen(v42);
                  v75 = *(_QWORD *)(*v5 + 8);
                  v76 = cstdlib_strlen(v42);
                  v77 = heap_Alloc(v75, (v76 + 1));
                  v78 = 32 * *(unsigned __int16 *)(v50 + 8);
                  **(_QWORD **)(*(_QWORD *)v50 + v78) = v77;
                  v79 = **(char ***)(*(_QWORD *)v50 + v78);
                  if (!v79)
                  {
                    v21 = v98;
                    v5 = v99;
                    goto LABEL_119;
                  }
                  v66 += v74 + 1;
                  cstdlib_strcpy(v79, v42);
                  v80 = *(_WORD *)(v50 + 8) + 1;
                  *(_WORD *)(v50 + 8) = v80;
                  if (v109 == 1)
                  {
                    v5 = v99;
                    v8 = v102;
                    v27 = __s;
                    goto LABEL_86;
                  }
                  v81 = v73;
                  v27 = __s;
                  NextUtf8Offset = utf8_GetNextUtf8Offset(__s, v81);
                  v5 = v99;
                  v8 = v102;
                  if (NextUtf8Offset >= cstdlib_strlen(__s))
                    break;
                }
              }
              v80 = *(_WORD *)(v50 + 8);
LABEL_86:
              if (!v80 || v66 >= cstdlib_strlen(v112) + 1)
                goto LABEL_90;
              v82 = cstdlib_strlen(**(const char ***)(*(_QWORD *)v50 + 32 * *(unsigned __int16 *)(v50 + 8) - 32));
              v83 = *(uint64_t **)(*v5 + 8);
              v84 = **(_QWORD **)(*(_QWORD *)v50 + 32 * *(unsigned __int16 *)(v50 + 8) - 32);
              v85 = cstdlib_strlen(v112);
              v86 = heap_Realloc(v83, v84, v82 - v66 + v85 + 2);
              if (v86)
              {
                v87 = 32 * *(unsigned __int16 *)(v50 + 8) - 32;
                **(_QWORD **)(*(_QWORD *)v50 + v87) = v86;
                cstdlib_strcat(**(char ***)(*(_QWORD *)v50 + v87), &v112[v66 - 1]);
                v8 = v102;
                v27 = __s;
LABEL_90:
                v88 = hlp_addWord(*v5, v27, HIWORD(v120), (unsigned __int16)v120, v114, v117, v108, v101, v110, (uint64_t *)v50, v116, v115, v10);
                stat_hmogrph_freeCandidatePhons((_QWORD *)*v5, v50);
                heap_Free(*(_QWORD **)(*v5 + 8), v50);
                heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v105);
                if ((v88 & 0x80000000) == 0)
                {
                  v21 = v98;
                  a1 = v93;
                  v28 = v94;
LABEL_92:
                  if (!v100)
                  {
                    heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v114);
                    v114 = 0;
                  }
                  heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v108);
                  if (!v96)
                  {
                    heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v117);
                    v117 = 0;
                  }
                  v104 = (uint64_t)v42;
                  if (v95)
                  {
                    v107 = 0;
                  }
                  else
                  {
                    heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v110);
                    v110 = 0;
                    v107 = 1;
                  }
                  goto LABEL_99;
                }
                v104 = (uint64_t)v42;
                v12 = v88;
                v21 = v98;
LABEL_127:
                v28 = v94;
                goto LABEL_140;
              }
              v21 = v98;
LABEL_119:
              v27 = __s;
              v62 = (uint64_t)v105;
            }
            else
            {
              v62 = 0;
            }
LABEL_123:
            log_OutPublic(*(_QWORD *)(*v5 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v52, v53, v54, v55, v92);
            v91 = 2314215434;
LABEL_124:
            v104 = (uint64_t)v42;
            stat_hmogrph_freeCandidatePhons((_QWORD *)*v5, v50);
            heap_Free(*(_QWORD **)(*v5 + 8), v50);
            if (v62)
              heap_Free(*(_QWORD **)(*v5 + 8), v62);
            v12 = v91;
            goto LABEL_127;
          }
          v44 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 2);
          v110 = v44;
          if (v44)
          {
            *v44 = 61;
            v110[1] = 0;
            v107 = 1;
            goto LABEL_55;
          }
          v107 = 1;
LABEL_138:
          v90 = 8202;
          goto LABEL_139;
        }
        v43 = (char *)heap_Calloc(*(_QWORD **)(*v5 + 8), 1, 2);
        v117 = v43;
        v42 = (char *)v104;
        if (v43)
        {
          *v43 = 61;
          v117[1] = 0;
          v106 = 1;
          goto LABEL_50;
        }
        v106 = 1;
LABEL_135:
        v107 = 0;
        goto LABEL_138;
      }
      v108 = 0;
LABEL_132:
      v106 = 0;
      goto LABEL_135;
    }
LABEL_99:
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v8 + 120))(a3, a4, v125[0], v125);
    if ((v12 & 0x80000000) != 0)
      break;
    v29 = v125[0];
  }
  while (v125[0]);
  v108 = 0;
LABEL_140:
  if (v104)
    heap_Free(*(_QWORD **)(*v5 + 8), v104);
LABEL_142:
  heap_Free(*(_QWORD **)(*v5 + 8), v21);
  if (v27)
    heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v27);
  if ((v12 & 0x80000000) != 0)
  {
    if (v28 == 1)
    {
      heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v114);
      v114 = 0;
    }
    if (v108)
      heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v108);
    if (v106 == 1)
    {
      heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v117);
      v117 = 0;
    }
    if (v107 == 1)
    {
      heap_Free(*(_QWORD **)(*v5 + 8), (uint64_t)v110);
      v110 = 0;
    }
LABEL_106:
    stat_hmogrph_freeSentenceData((uint64_t)v5);
  }
  return v12;
}

uint64_t hlp_getPhonFromPhonStr(char *a1, unsigned int a2, char *a3, char *a4, _DWORD *a5)
{
  uint64_t result;
  unsigned int NextUtf8Offset;
  int v11;
  __int16 v12;
  unsigned int v13;

  result = 0;
  v13 = a2;
  if (a4 && a5)
  {
    v12 = 0;
    *a5 = 0;
    if (utf8_Utf8CharTo16bit((unsigned __int8 *)a1, (uint64_t)&v12)
      && (unsigned __int16)((unsigned __int16)(v12 + 24576) >> 9) <= 0x56u)
    {
      cstdlib_strcpy(a4, a3);
      result = 1;
      *a5 = 1;
    }
    else
    {
      utf8_GetPreviousValidUtf8Offset((uint64_t)a1, &v13);
      if (v13)
      {
        NextUtf8Offset = 0;
        while (1)
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset(a1, NextUtf8Offset);
          result = (uint64_t)cstdlib_strstr(a3, ".");
          if (!result)
            break;
          if (*(_BYTE *)result == 46)
            a3 = (char *)(result + 1);
          else
            a3 = (char *)result;
          if (NextUtf8Offset == v13)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        for (NextUtf8Offset = 0; ; ++NextUtf8Offset)
        {
          v11 = a3[NextUtf8Offset];
          if (!a3[NextUtf8Offset] || v11 == 46)
            break;
          a4[NextUtf8Offset] = v11;
          if (NextUtf8Offset && v11 == 125 && a4[NextUtf8Offset - 1] - 48 <= 9)
          {
            a3[NextUtf8Offset++] = 46;
            break;
          }
        }
        result = 1;
      }
      a4[NextUtf8Offset] = 0;
    }
  }
  return result;
}

uint64_t stat_hmogrph_freeSentenceData(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1)
  {
    v2 = (uint64_t *)(a1 + 8);
    if (*(_WORD *)(a1 + 16))
    {
      v3 = 0;
      do
      {
        v4 = *v2;
        v5 = (uint64_t *)(*v2 + (v3 << 6));
        if (*v5)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v5);
          *v5 = 0;
        }
        v8 = v5[2];
        v7 = v5 + 2;
        v6 = v8;
        if (v8)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v6);
          *v7 = 0;
        }
        v9 = v4 + (v3 << 6);
        v10 = *(_QWORD *)(v9 + 24);
        if (v10)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
          *(_QWORD *)(v9 + 24) = 0;
        }
        v13 = *(_QWORD *)(v9 + 40);
        v12 = (_QWORD *)(v9 + 40);
        v11 = v13;
        if (v13)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
          *v12 = 0;
        }
        v14 = v4 + (v3 << 6);
        v16 = (uint64_t *)(v14 + 48);
        v15 = *(_QWORD *)(v14 + 48);
        if (v15)
        {
          v19 = *(unsigned __int16 *)(v14 + 56);
          v18 = (unsigned __int16 *)(v14 + 56);
          v17 = v19;
          if (v19)
          {
            v20 = 0;
            do
            {
              v21 = *(_QWORD *)(v15 + 16 * v20);
              if (v21)
              {
                if (*(_WORD *)(v15 + 16 * v20 + 8))
                {
                  v22 = 0;
                  v23 = 0;
                  do
                  {
                    v24 = *(_QWORD *)(v21 + v22);
                    if (v24)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v24);
                      v15 = *v16;
                      v21 = *(_QWORD *)(*v16 + 16 * v20);
                      *(_QWORD *)(v21 + v22) = 0;
                    }
                    v25 = *(_QWORD *)(v21 + v22 + 16);
                    if (v25)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v25);
                      v15 = *v16;
                      v21 = *(_QWORD *)(*v16 + 16 * v20);
                      *(_QWORD *)(v21 + v22 + 16) = 0;
                    }
                    v26 = *(_QWORD *)(v21 + v22 + 24);
                    if (v26)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v26);
                      v15 = *v16;
                      v21 = *(_QWORD *)(*v16 + 16 * v20);
                      *(_QWORD *)(v21 + v22 + 24) = 0;
                    }
                    v27 = *(_QWORD *)(v21 + v22 + 32);
                    if (v27)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v27);
                      v15 = *v16;
                      v21 = *(_QWORD *)(*v16 + 16 * v20);
                      *(_QWORD *)(v21 + v22 + 32) = 0;
                    }
                    v28 = *(_QWORD *)(v21 + v22 + 40);
                    if (v28)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v28);
                      v15 = *v16;
                      v21 = *(_QWORD *)(*v16 + 16 * v20);
                      *(_QWORD *)(v21 + v22 + 40) = 0;
                    }
                    ++v23;
                    v22 += 56;
                  }
                  while (v23 < *(unsigned __int16 *)(v15 + 16 * v20 + 8));
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v21);
                v15 = *v16;
                *(_QWORD *)(*v16 + 16 * v20) = 0;
                v17 = *v18;
              }
              ++v20;
            }
            while (v20 < v17);
          }
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v15);
          *v16 = 0;
        }
        ++v3;
      }
      while (v3 < *(unsigned __int16 *)(a1 + 16));
    }
    if (*v2)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
    cstdlib_memset(v2, 0, 0x10uLL);
  }
  return 0;
}

uint64_t hlp_initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v6 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6)
      break;
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5)
      return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v7, v8, v9, v10, v12);
  return 2314215434;
}

uint64_t hlp_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (a2 < 2)
    return 0;
  v6 = 0;
  v7 = a2 - 1;
  v8 = g_featureNames[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6)
      return 0;
  }
  *a4 = v6;
  return 1;
}

uint64_t hlp_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  size_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  unsigned __int16 v20;

  v20 = -1;
  result = hlp_isFeatureRequired(a2, a3, a4, &v20);
  if ((_DWORD)result)
  {
    if (cstdlib_strcmp(a6, ""))
    {
      v10 = cstdlib_strlen(a6);
      v11 = v20;
      if (v10 <= 0x40)
      {
        v13 = *(char **)(a5 + 8 * v20);
      }
      else
      {
        v12 = cstdlib_strlen(a6);
        v13 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a5 + 8 * v11), (v12 + 1));
        if (!v13)
        {
          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v14, v15, v16, v17, v19);
          return 2314215434;
        }
        *(_QWORD *)(a5 + 8 * v11) = v13;
      }
      v18 = a6;
    }
    else
    {
      v13 = *(char **)(a5 + 8 * v20);
      v18 = "=";
    }
    cstdlib_strcpy(v13, v18);
    return 0;
  }
  return result;
}

uint64_t hlp_wordStrLowerCase(char *a1, char *a2)
{
  unsigned int NextUtf8Offset;
  char __s[8];

  *(_DWORD *)&__s[3] = 0;
  *(_DWORD *)__s = 0;
  *a2 = 0;
  if ((utf8_getUTF8Char((uint64_t)a1, 0, __s) & 0x80000000) == 0)
  {
    NextUtf8Offset = 0;
    do
    {
      if (cstdlib_strlen(a1) <= NextUtf8Offset)
        break;
      if (cstdlib_strlen(__s) == 1 && __s[0] >= 0x41u && __s[0] <= 0x5Au)
        a2[NextUtf8Offset] = __s[0] + 32;
      else
        cstdlib_strcat(a2, __s);
      NextUtf8Offset = utf8_GetNextUtf8Offset(a1, NextUtf8Offset);
    }
    while ((utf8_getUTF8Char((uint64_t)a1, NextUtf8Offset, __s) & 0x80000000) == 0);
  }
  return 0;
}

uint64_t feat_character(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, const char *a6, char *a7)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int NextUtf8Offset;
  unint64_t v29;
  int v30;
  unsigned int PreviousUtf8Offset;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;

  v12 = a3;
  v13 = cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + ((unint64_t)a3 << 6)));
  v35 = v12;
  if (a3)
  {
    v14 = 0;
    v15 = 0;
    v16 = v12 << 6;
    do
    {
      v15 += cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + v14));
      v14 += 64;
    }
    while (v16 != v14);
  }
  else
  {
    v15 = 0;
  }
  if (*(unsigned __int16 *)(a2 + 8) <= (unsigned __int16)(a3 + 1))
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    v18 = (unsigned __int16)(a3 + 1);
    v19 = v18 << 6;
    do
    {
      v17 += cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + v19));
      ++v18;
      v19 += 64;
    }
    while (v18 < *(unsigned __int16 *)(a2 + 8));
  }
  v20 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v13 + v15 + v17 + 1));
  if (!v20)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v21, v22, v23, v24, v34);
    return 2314215434;
  }
  v25 = (char *)v20;
  if (!*(_WORD *)(a2 + 8))
    goto LABEL_28;
  v26 = 0;
  v27 = 0;
  NextUtf8Offset = v15 + a4;
  do
  {
    cstdlib_strcat(v25, *(const char **)(*(_QWORD *)a2 + v26));
    ++v27;
    v29 = *(unsigned __int16 *)(a2 + 8);
    v26 += 64;
  }
  while (v27 < v29);
  if (v29 <= a3 || cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + (v35 << 6))) <= a4)
    goto LABEL_28;
  if (a5 < 0)
  {
    if (!NextUtf8Offset)
      goto LABEL_28;
    do
    {
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v25, NextUtf8Offset);
      NextUtf8Offset = PreviousUtf8Offset;
      v33 = (unsigned __int16)~(_WORD)a5 == 0;
      LOWORD(a5) = a5 + 1;
    }
    while (!v33 && PreviousUtf8Offset);
    if ((_WORD)a5)
      goto LABEL_28;
  }
  else if (a5)
  {
    while (NextUtf8Offset != cstdlib_strlen(v25))
    {
      NextUtf8Offset = utf8_GetNextUtf8Offset(v25, NextUtf8Offset);
      v30 = (__int16)a5--;
      if (v30 <= 1)
        goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_27:
  if ((utf8_getUTF8Char((uint64_t)v25, NextUtf8Offset, a7) & 0x80000000) != 0)
LABEL_28:
    cstdlib_strcpy(a7, a6);
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v25);
  return 0;
}

uint64_t feat_colloc(unsigned __int16 *a1, unsigned int a2, char *__s1)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  if (!a2)
  {
    v10 = 78;
    v11 = 82;
    goto LABEL_13;
  }
  if (!cstdlib_strcmp(__s1, *(const char **)(*(_QWORD *)a1 + 40)))
  {
    v10 = 76;
    v11 = 66;
    goto LABEL_13;
  }
  v6 = 1;
  v7 = 104;
  while (1)
  {
    v8 = v6;
    if (v4 == v6)
      break;
    v9 = cstdlib_strcmp(__s1, *(const char **)(*(_QWORD *)a1 + v7));
    v6 = v8 + 1;
    v7 += 64;
    if (!v9)
    {
      v10 = 76;
      goto LABEL_10;
    }
  }
  v10 = 78;
LABEL_10:
  if (v8 >= v4)
    v11 = 82;
  else
    v11 = 66;
LABEL_13:
  while (1)
  {
    LOWORD(v4) = v4 + 1;
    if (a1[4] <= (unsigned __int16)v4)
      break;
    if (!cstdlib_strcmp(__s1, *(const char **)(*(_QWORD *)a1 + ((unint64_t)(unsigned __int16)v4 << 6) + 40)))
      return v11;
  }
  return v10;
}

uint64_t feat_word(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;

  v4 = (a3 + a2);
  if (a3 + a2 >= 0 && v4 < *(unsigned __int16 *)(a1 + 8))
    return *(_QWORD *)(*(_QWORD *)a1 + (v4 << 6) + 40);
  return a4;
}

uint64_t feat_wordne(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a1 + 40 * (a4 + a3) + 30;
  if (a4 + a3 >= a2)
    v5 = a5;
  if (a1)
    return v5;
  else
    return a5;
}

char *feat_wordbeg(uint64_t a1, int a2, int a3, char *__src, char *__dst)
{
  uint64_t v5;

  v5 = (a3 + a2);
  if (a3 + a2 < 0 || v5 >= *(unsigned __int16 *)(a1 + 8))
    return cstdlib_strcpy(__dst, __src);
  else
    return (char *)utf8_getUTF8Char(*(_QWORD *)(*(_QWORD *)a1 + (v5 << 6) + 40), 0, __dst);
}

char *feat_wordend(uint64_t a1, int a2, int a3, char *__src, char *__dst)
{
  uint64_t v6;
  unsigned int v8;

  v6 = (a3 + a2);
  if (a3 + a2 < 0 || v6 >= *(unsigned __int16 *)(a1 + 8))
    return cstdlib_strcpy(__dst, __src);
  v8 = cstdlib_strlen(*(const char **)(*(_QWORD *)a1 + (v6 << 6) + 40));
  return utf8_GetUtf8Symbol(*(_BYTE **)(*(_QWORD *)a1 + (v6 << 6) + 40), v8 - 1, v8, __dst);
}

char *feat_wordlc(uint64_t a1, int a2, int a3, char *__src, char *__dst)
{
  uint64_t v5;

  *__dst = 0;
  v5 = (a3 + a2);
  if (a3 + a2 < 0 || v5 >= *(unsigned __int16 *)(a1 + 8))
    return cstdlib_strcpy(__dst, __src);
  else
    return (char *)hlp_wordStrLowerCase(*(char **)(*(_QWORD *)a1 + (v5 << 6) + 40), __dst);
}

char *feat_wordlen(uint64_t a1, int a2, int a3, char *__src, char *__dst)
{
  uint64_t v6;
  int v7;

  *__dst = 0;
  v6 = (a3 + a2);
  if (a3 + a2 < 0 || v6 >= *(unsigned __int16 *)(a1 + 8))
    return cstdlib_strcpy(__dst, __src);
  v7 = Utf8_Utf8NbrOfSymbols(*(const char **)(*(_QWORD *)a1 + (v6 << 6) + 40));
  return (char *)sprintf(__dst, "%d", v7 - 1);
}

uint64_t feat_pos(uint64_t a1, int a2, int a3, uint64_t a4)
{
  __int16 v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v8 = a3 + a2;
  if (a3 <= 0)
    v9 = a3 + a2;
  else
    v9 = a2;
  LOWORD(v10) = v9;
  if (a3 <= 0)
    v8 = a2;
  v11 = v8 - 1;
  if (v9 > v11)
  {
LABEL_12:
    v13 = (a3 + a2);
    if (a3 + a2 >= 0 && v13 < *(unsigned __int16 *)(a1 + 8))
      return *(_QWORD *)(*(_QWORD *)a1 + (v13 << 6) + 16);
  }
  else
  {
    v12 = v11;
    while ((v10 & 0x8000) != 0
         || *(unsigned __int16 *)(a1 + 8) <= (unsigned __int16)v10
         || !hlp_doesWordEndInComma(*(const char **)(*(_QWORD *)a1 + ((unint64_t)(unsigned __int16)v10 << 6))))
    {
      v10 = (__int16)(v10 + 1);
      if (v10 > v12)
        goto LABEL_12;
    }
  }
  return a4;
}

uint64_t feat_matchprevpos(_QWORD *a1, int a2, char *__s2, uint64_t a4)
{
  int v7;
  unint64_t v8;

  if (a2)
  {
    v7 = a2;
    while (1)
    {
      v8 = *a1 + ((unint64_t)(v7 - 1) << 6);
      if (!cstdlib_strcmp(*(const char **)(v8 + 16), __s2))
        break;
      if (!(_WORD)--v7)
        return a4;
    }
    return *(_QWORD *)(v8 + 40);
  }
  return a4;
}

uint64_t feat_matchnextpos(uint64_t a1, unsigned __int16 a2, char *__s2, uint64_t a4)
{
  unint64_t v8;

  while (*(unsigned __int16 *)(a1 + 8) > ++a2)
  {
    v8 = *(_QWORD *)a1 + ((unint64_t)a2 << 6);
    if (!cstdlib_strcmp(*(const char **)(v8 + 16), __s2))
      return *(_QWORD *)(v8 + 40);
  }
  return a4;
}

uint64_t feat_mosyntpos(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *i;

  v4 = (a3 + a2);
  if (a3 + a2 >= 0 && v4 < *(unsigned __int16 *)(a1 + 8))
  {
    v5 = *(_QWORD *)a1 + (v4 << 6);
    v6 = *(unsigned __int16 *)(v5 + 56);
    if (*(_WORD *)(v5 + 56))
    {
      for (i = (_WORD *)(*(_QWORD *)(v5 + 48) + 8); *i != 1; i += 8)
      {
        if (!--v6)
          return a4;
      }
      return *(_QWORD *)(*((_QWORD *)i - 1) + 16);
    }
  }
  return a4;
}

const char *feat_sentbeg(int a1, int a2)
{
  if ((a2 + 1) < 2 && a1 == 0)
    return "SB";
  else
    return "SI";
}

uint64_t hlp_setFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, unsigned int a6, unsigned int a7, char **a8, unsigned __int16 a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  const char *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  int v105;
  int v106;
  size_t v107;
  int v108;
  char **v109;
  uint64_t i;
  unsigned __int16 v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  unsigned int v129;
  char **v130;
  unsigned int v131;
  unsigned int v132;
  __int16 v133;

  v133 = 0;
  v18 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 2048);
  if (v18)
  {
    v23 = (char *)v18;
    v131 = a6;
    v132 = a7;
    v130 = a8;
    if (a4 < 2)
    {
      v26 = 0;
LABEL_9:
      if (!hlp_isFeatureRequired(a3, a4, 11, &v133)
        || (!a6 || (v27 = a6 - 1, v27 >= a5[4])
          ? (v28 = "=")
          : (v28 = *(const char **)(*(_QWORD *)a5 + (v27 << 6) + 40)),
            v26 = hlp_setFeature(a1, a3, a4, 11, a2, v28),
            (v26 & 0x80000000) == 0))
      {
        if (!hlp_isFeatureRequired(a3, a4, 10, &v133)
          || ((v35 = a6 - 2, a6 < 2) || v35 >= a5[4]
            ? (v36 = "=")
            : (v36 = *(const char **)(*(_QWORD *)a5 + (v35 << 6) + 40)),
              v26 = hlp_setFeature(a1, a3, a4, 10, a2, v36),
              (v26 & 0x80000000) == 0))
        {
          if (!hlp_isFeatureRequired(a3, a4, 9, &v133)
            || ((v37 = a6 - 3, a6 < 3) || v37 >= a5[4]
              ? (v38 = "=")
              : (v38 = *(const char **)(*(_QWORD *)a5 + (v37 << 6) + 40)),
                v26 = hlp_setFeature(a1, a3, a4, 9, a2, v38),
                (v26 & 0x80000000) == 0))
          {
            if (!hlp_isFeatureRequired(a3, a4, 8, &v133)
              || ((v39 = a6 - 4, a6 < 4) || v39 >= a5[4]
                ? (v40 = "=")
                : (v40 = *(const char **)(*(_QWORD *)a5 + (v39 << 6) + 40)),
                  v26 = hlp_setFeature(a1, a3, a4, 8, a2, v40),
                  (v26 & 0x80000000) == 0))
            {
              if (!hlp_isFeatureRequired(a3, a4, 7, &v133)
                || ((v41 = a6 - 5, a6 < 5) || v41 >= a5[4]
                  ? (v42 = "=")
                  : (v42 = *(const char **)(*(_QWORD *)a5 + (v41 << 6) + 40)),
                    v26 = hlp_setFeature(a1, a3, a4, 7, a2, v42),
                    (v26 & 0x80000000) == 0))
              {
                if (!hlp_isFeatureRequired(a3, a4, 15, &v133)
                  || ((v50 = a6 + 1, v50 >= a5[4])
                    ? (v51 = "=")
                    : (v51 = *(const char **)(*(_QWORD *)a5 + (v50 << 6) + 40)),
                      v26 = hlp_setFeature(a1, a3, a4, 15, a2, v51),
                      (v26 & 0x80000000) == 0))
                {
                  if (!hlp_isFeatureRequired(a3, a4, 16, &v133)
                    || ((v64 = a6 + 2, v64 >= a5[4])
                      ? (v65 = "=")
                      : (v65 = *(const char **)(*(_QWORD *)a5 + (v64 << 6) + 40)),
                        v26 = hlp_setFeature(a1, a3, a4, 16, a2, v65),
                        (v26 & 0x80000000) == 0))
                  {
                    if (!hlp_isFeatureRequired(a3, a4, 17, &v133)
                      || ((v72 = a6 + 3, v72 >= a5[4])
                        ? (v73 = "=")
                        : (v73 = *(const char **)(*(_QWORD *)a5 + (v72 << 6) + 40)),
                          v26 = hlp_setFeature(a1, a3, a4, 17, a2, v73),
                          (v26 & 0x80000000) == 0))
                    {
                      if (!hlp_isFeatureRequired(a3, a4, 18, &v133)
                        || ((v80 = a6 + 4, v80 >= a5[4])
                          ? (v81 = "=")
                          : (v81 = *(const char **)(*(_QWORD *)a5 + (v80 << 6) + 40)),
                            v26 = hlp_setFeature(a1, a3, a4, 18, a2, v81),
                            (v26 & 0x80000000) == 0))
                      {
                        if (!hlp_isFeatureRequired(a3, a4, 19, &v133)
                          || ((v88 = a6 + 5, v88 >= a5[4])
                            ? (v89 = "=")
                            : (v89 = *(const char **)(*(_QWORD *)a5 + (v88 << 6) + 40)),
                              v26 = hlp_setFeature(a1, a3, a4, 19, a2, v89),
                              (v26 & 0x80000000) == 0))
                        {
                          if (!hlp_isFeatureRequired(a3, a4, 23, &v133)
                            || (v92 = (const char *)feat_pos((uint64_t)a5, a6, 0, (uint64_t)"="),
                                v26 = hlp_setFeature(a1, a3, a4, 23, a2, v92),
                                (v26 & 0x80000000) == 0))
                          {
                            if (!hlp_isFeatureRequired(a3, a4, 22, &v133)
                              || (v93 = (const char *)feat_pos((uint64_t)a5, a6, -1, (uint64_t)"="),
                                  v26 = hlp_setFeature(a1, a3, a4, 22, a2, v93),
                                  (v26 & 0x80000000) == 0))
                            {
                              if (!hlp_isFeatureRequired(a3, a4, 21, &v133)
                                || (v94 = (const char *)feat_pos((uint64_t)a5, a6, -2, (uint64_t)"="),
                                    v26 = hlp_setFeature(a1, a3, a4, 21, a2, v94),
                                    (v26 & 0x80000000) == 0))
                              {
                                if (!hlp_isFeatureRequired(a3, a4, 20, &v133)
                                  || (v95 = (const char *)feat_pos((uint64_t)a5, a6, -3, (uint64_t)"="),
                                      v26 = hlp_setFeature(a1, a3, a4, 20, a2, v95),
                                      (v26 & 0x80000000) == 0))
                                {
                                  if (!hlp_isFeatureRequired(a3, a4, 24, &v133)
                                    || (v96 = (const char *)feat_pos((uint64_t)a5, a6, 1, (uint64_t)"="),
                                        v26 = hlp_setFeature(a1, a3, a4, 24, a2, v96),
                                        (v26 & 0x80000000) == 0))
                                  {
                                    if (!hlp_isFeatureRequired(a3, a4, 25, &v133)
                                      || (v97 = (const char *)feat_pos((uint64_t)a5, a6, 2, (uint64_t)"="),
                                          v26 = hlp_setFeature(a1, a3, a4, 25, a2, v97),
                                          (v26 & 0x80000000) == 0))
                                    {
                                      if (!hlp_isFeatureRequired(a3, a4, 26, &v133)
                                        || (v98 = (const char *)feat_pos((uint64_t)a5, a6, 3, (uint64_t)"="),
                                            v26 = hlp_setFeature(a1, a3, a4, 26, a2, v98),
                                            (v26 & 0x80000000) == 0))
                                      {
                                        if (!hlp_isFeatureRequired(a3, a4, 27, &v133)
                                          || (v99 = (const char *)feat_mosyntpos((uint64_t)a5, a6, -1, (uint64_t)"="),
                                              v26 = hlp_setFeature(a1, a3, a4, 27, a2, v99),
                                              (v26 & 0x80000000) == 0))
                                        {
                                          if (!hlp_isFeatureRequired(a3, a4, 28, &v133)
                                            || (v100 = (const char *)feat_mosyntpos((uint64_t)a5, a6, 1, (uint64_t)"="),
                                                v26 = hlp_setFeature(a1, a3, a4, 28, a2, v100),
                                                (v26 & 0x80000000) == 0))
                                          {
                                            if (!hlp_isFeatureRequired(a3, a4, 29, &v133)
                                              || (v101 = (const char *)feat_matchprevpos(a5, a6, "n", (uint64_t)"="),
                                                  v26 = hlp_setFeature(a1, a3, a4, 29, a2, v101),
                                                  (v26 & 0x80000000) == 0))
                                            {
                                              if (!hlp_isFeatureRequired(a3, a4, 30, &v133)
                                                || (v102 = (const char *)feat_matchnextpos((uint64_t)a5, a6, "n", (uint64_t)"="), v26 = hlp_setFeature(a1, a3, a4, 30, a2, v102), (v26 & 0x80000000) == 0))
                                              {
                                                if (!hlp_isFeatureRequired(a3, a4, 31, &v133)
                                                  || (v103 = (const char *)feat_matchprevpos(a5, a6, "v", (uint64_t)"="),
                                                      v26 = hlp_setFeature(a1, a3, a4, 31, a2, v103),
                                                      (v26 & 0x80000000) == 0))
                                                {
                                                  if (!hlp_isFeatureRequired(a3, a4, 32, &v133)
                                                    || (v104 = (const char *)feat_matchnextpos((uint64_t)a5, a6, "v", (uint64_t)"="), v26 = hlp_setFeature(a1, a3, a4, 32, a2, v104), (v26 & 0x80000000) == 0))
                                                  {
                                                    if (!hlp_isFeatureRequired(a3, a4, 33, &v133))
                                                      goto LABEL_250;
                                                    *v23 = 0;
                                                    v105 = 0xFFFF;
                                                    v106 = a6;
                                                    do
                                                    {
                                                      v107 = cstdlib_strlen(v23);
                                                      v108 = (__int16)v105;
                                                      feat_wordlen((uint64_t)a5, v106, (__int16)v105++, "=", &v23[v107]);
                                                    }
                                                    while (v108 < 1);
                                                    v26 = hlp_setFeature(a1, a3, a4, 33, a2, v23);
                                                    a6 = v106;
                                                    if ((v26 & 0x80000000) == 0)
                                                    {
LABEL_250:
                                                      if (!hlp_isFeatureRequired(a3, a4, 34, &v133))
                                                        goto LABEL_249;
                                                      *v23 = 0;
                                                      v109 = v130;
                                                      if (a9)
                                                      {
                                                        for (i = a9 - 1; ; --i)
                                                        {
                                                          v111 = cstdlib_strlen(v23);
                                                          v112 = feat_colloc(a5, v131, *v109);
                                                          v113 = &v23[v111];
                                                          *v113 = v112;
                                                          v113[1] = 0;
                                                          if (!i)
                                                            break;
                                                          ++v109;
                                                          if (*v23)
                                                            cstdlib_strcat(v23, " ");
                                                        }
                                                      }
                                                      v26 = hlp_setFeature(a1, a3, a4, 34, a2, v23);
                                                      a6 = v131;
                                                      if ((v26 & 0x80000000) == 0)
                                                      {
LABEL_249:
                                                        if (!hlp_isFeatureRequired(a3, a4, 35, &v133)
                                                          || (v132 + 1 < 2 ? (v116 = a6 == 0) : (v116 = 0),
                                                              !v116 ? (v117 = "SI") : (v117 = "SB"),
                                                              v26 = hlp_setFeature(a1, a3, a4, 35, a2, v117),
                                                              (v26 & 0x80000000) == 0))
                                                        {
                                                          if (!hlp_isFeatureRequired(a3, a4, 38, &v133)
                                                            || (feat_wordbeg((uint64_t)a5, a6, 0, "=", v23),
                                                                v26 = hlp_setFeature(a1, a3, a4, 38, a2, v23),
                                                                (v26 & 0x80000000) == 0))
                                                          {
                                                            if (!hlp_isFeatureRequired(a3, a4, 43, &v133)
                                                              || (feat_wordend((uint64_t)a5, a6, 0, "=", v23),
                                                                  v26 = hlp_setFeature(a1, a3, a4, 43, a2, v23),
                                                                  (v26 & 0x80000000) == 0))
                                                            {
                                                              if (!hlp_isFeatureRequired(a3, a4, 37, &v133)|| (feat_wordbeg((uint64_t)a5, a6, -1, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 37, a2, v23), (v26 & 0x80000000) == 0))
                                                              {
                                                                if (!hlp_isFeatureRequired(a3, a4, 42, &v133)|| (feat_wordend((uint64_t)a5, a6, -1, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 42, a2, v23), (v26 & 0x80000000) == 0))
                                                                {
                                                                  if (!hlp_isFeatureRequired(a3, a4, 39, &v133)|| (feat_wordbeg((uint64_t)a5, a6, 1, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 39, a2, v23), (v26 & 0x80000000) == 0))
                                                                  {
                                                                    if (!hlp_isFeatureRequired(a3, a4, 44, &v133)|| (feat_wordend((uint64_t)a5, a6, 1, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 44, a2, v23), (v26 & 0x80000000) == 0))
                                                                    {
                                                                      if (!hlp_isFeatureRequired(a3, a4, 36, &v133)|| (feat_wordbeg((uint64_t)a5, a6, -2, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 36, a2, v23), (v26 & 0x80000000) == 0))
                                                                      {
                                                                        if (!hlp_isFeatureRequired(a3, a4, 41, &v133)|| (feat_wordend((uint64_t)a5, a6, -2, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 41, a2, v23), (v26 & 0x80000000) == 0))
                                                                        {
                                                                          if (!hlp_isFeatureRequired(a3, a4, 40, &v133)|| (feat_wordbeg((uint64_t)a5, a6, 2, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 40, a2, v23), (v26 & 0x80000000) == 0))
                                                                          {
                                                                            if (!hlp_isFeatureRequired(a3, a4, 45, &v133)|| (feat_wordend((uint64_t)a5, a6, 2, "=", v23), v26 = hlp_setFeature(a1, a3, a4, 45, a2, v23), (v26 & 0x80000000) == 0))
                                                                            {
                                                                              if (!hlp_isFeatureRequired(a3, a4, 46, &v133)|| (v26 = hlp_setFeature(a1, a3, a4, 46, a2, "="), (v26 & 0x80000000) == 0))
                                                                              {
                                                                                if (!hlp_isFeatureRequired(a3, a4, 47, &v133)
                                                                                  || (v26 = hlp_setFeature(a1, a3, a4, 47, a2, "="), (v26 & 0x80000000) == 0))
                                                                                {
                                                                                  if (!hlp_isFeatureRequired(a3, a4, 48, &v133)
                                                                                    || (v26 = hlp_setFeature(a1, a3, a4, 48, a2, "="), (v26 & 0x80000000) == 0))
                                                                                  {
                                                                                    if (!hlp_isFeatureRequired(a3, a4, 49, &v133)
                                                                                      || ((v118 = *(_QWORD *)(a10 + 8)) == 0
                                                                                       || v131 - 2 >= *(unsigned __int16 *)(a10 + 16)
                                                                                        ? (v119 = "=")
                                                                                        : (v119 = (const char *)(v118 + 40 * (v131 - 2) + 30)),
                                                                                          v26 = hlp_setFeature(a1, a3, a4, 49, a2, v119), (v26 & 0x80000000) == 0))
                                                                                    {
                                                                                      if (!hlp_isFeatureRequired(a3, a4, 50, &v133)
                                                                                        || ((v120 = *(_QWORD *)(a10 + 8)) == 0
                                                                                         || v131 - 1 >= *(unsigned __int16 *)(a10 + 16)
                                                                                          ? (v121 = "=")
                                                                                          : (v121 = (const char *)(v120 + 40 * (v131 - 1) + 30)),
                                                                                            v26 = hlp_setFeature(a1, a3, a4, 50, a2, v121), (v26 & 0x80000000) == 0))
                                                                                      {
                                                                                        if (!hlp_isFeatureRequired(a3, a4, 51, &v133)
                                                                                          || ((v122 = *(_QWORD *)(a10 + 8)) == 0
                                                                                           || *(unsigned __int16 *)(a10 + 16) <= v131
                                                                                            ? (v123 = "=")
                                                                                            : (v123 = (const char *)(v122 + 40 * v131 + 30)),
                                                                                              v26 = hlp_setFeature(a1, a3, a4, 51, a2, v123),
                                                                                              (v26 & 0x80000000) == 0))
                                                                                        {
                                                                                          if (!hlp_isFeatureRequired(a3, a4, 52, &v133)
                                                                                            || ((v124 = *(_QWORD *)(a10 + 8)) == 0
                                                                                             || v131 + 1 >= *(unsigned __int16 *)(a10 + 16)
                                                                                              ? (v125 = "=")
                                                                                              : (v125 = (const char *)(v124 + 40 * (v131 + 1) + 30)),
                                                                                                v26 = hlp_setFeature(a1, a3, a4, 52, a2, v125),
                                                                                                (v26 & 0x80000000) == 0))
                                                                                          {
                                                                                            if (hlp_isFeatureRequired(a3, a4, 53, &v133))
                                                                                            {
                                                                                              v126 = *(_QWORD *)(a10 + 8);
                                                                                              if (v126
                                                                                                && v131 + 2 < *(unsigned __int16 *)(a10 + 16))
                                                                                              {
                                                                                                v127 = (const char *)(v126 + 40 * (v131 + 2) + 30);
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v127 = "=";
                                                                                              }
                                                                                              v31 = hlp_setFeature(a1, a3, a4, 53, a2, v127);
LABEL_244:
                                                                                              v26 = v31;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v24 = 0;
      v25 = a4 - 1;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v24), "char0"))
      {
        if (v25 == ++v24)
        {
          v26 = 0;
LABEL_42:
          v43 = a2;
          v44 = 0;
          while (cstdlib_strcmp(*(const char **)(a3 + 8 * v44), "lchar"))
          {
            if (v25 == ++v44)
              goto LABEL_56;
          }
          v133 = v44;
          v45 = "=";
          v46 = a1;
          if (v132 == -1)
          {
            v48 = a3;
            v49 = a4;
            v47 = v43;
          }
          else
          {
            v31 = feat_character(a1, (uint64_t)a5, v131, v132, -1, "=", v23);
            if ((v31 & 0x80000000) != 0)
              goto LABEL_244;
            v47 = v43;
            v46 = a1;
            v48 = a3;
            v49 = a4;
            v45 = v23;
          }
          v26 = hlp_setFeature(v46, v48, v49, 3, v47, v45);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_56:
            v52 = 0;
            while (cstdlib_strcmp(*(const char **)(a3 + 8 * v52), "llchar"))
            {
              if (v25 == ++v52)
                goto LABEL_65;
            }
            v133 = v52;
            v53 = "=";
            v54 = a1;
            if (v132 == -1)
            {
              v56 = a3;
              v57 = a4;
              v55 = v43;
            }
            else
            {
              v31 = feat_character(a1, (uint64_t)a5, v131, v132, -2, "=", v23);
              if ((v31 & 0x80000000) != 0)
                goto LABEL_244;
              v55 = v43;
              v54 = a1;
              v56 = a3;
              v57 = a4;
              v53 = v23;
            }
            v26 = hlp_setFeature(v54, v56, v57, 2, v55, v53);
            if ((v26 & 0x80000000) == 0)
            {
LABEL_65:
              v58 = 0;
              while (cstdlib_strcmp(*(const char **)(a3 + 8 * v58), "l3char"))
              {
                if (v25 == ++v58)
                  goto LABEL_79;
              }
              v133 = v58;
              v59 = "=";
              v60 = a1;
              if (v132 == -1)
              {
                v62 = a3;
                v63 = a4;
                v61 = v43;
              }
              else
              {
                v31 = feat_character(a1, (uint64_t)a5, v131, v132, -3, "=", v23);
                if ((v31 & 0x80000000) != 0)
                  goto LABEL_244;
                v61 = v43;
                v60 = a1;
                v62 = a3;
                v63 = a4;
                v59 = v23;
              }
              v26 = hlp_setFeature(v60, v62, v63, 1, v61, v59);
              if ((v26 & 0x80000000) == 0)
              {
LABEL_79:
                v66 = 0;
                while (cstdlib_strcmp(*(const char **)(a3 + 8 * v66), "rchar"))
                {
                  if (v25 == ++v66)
                    goto LABEL_93;
                }
                v133 = v66;
                v67 = "=";
                v68 = a1;
                if (v132 == -1)
                {
                  v70 = a3;
                  v71 = a4;
                  v69 = v43;
                }
                else
                {
                  v31 = feat_character(a1, (uint64_t)a5, v131, v132, 1, "=", v23);
                  if ((v31 & 0x80000000) != 0)
                    goto LABEL_244;
                  v69 = v43;
                  v68 = a1;
                  v70 = a3;
                  v71 = a4;
                  v67 = v23;
                }
                v26 = hlp_setFeature(v68, v70, v71, 4, v69, v67);
                if ((v26 & 0x80000000) == 0)
                {
LABEL_93:
                  v74 = 0;
                  while (cstdlib_strcmp(*(const char **)(a3 + 8 * v74), "rrchar"))
                  {
                    if (v25 == ++v74)
                      goto LABEL_107;
                  }
                  v133 = v74;
                  v75 = "=";
                  v76 = a1;
                  if (v132 == -1)
                  {
                    v78 = a3;
                    v79 = a4;
                    v77 = v43;
                  }
                  else
                  {
                    v31 = feat_character(a1, (uint64_t)a5, v131, v132, 2, "=", v23);
                    if ((v31 & 0x80000000) != 0)
                      goto LABEL_244;
                    v77 = v43;
                    v76 = a1;
                    v78 = a3;
                    v79 = a4;
                    v75 = v23;
                  }
                  v26 = hlp_setFeature(v76, v78, v79, 5, v77, v75);
                  if ((v26 & 0x80000000) == 0)
                  {
LABEL_107:
                    v82 = 0;
                    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v82), "r3char"))
                    {
                      if (v25 == ++v82)
                        goto LABEL_121;
                    }
                    v133 = v82;
                    v83 = "=";
                    v84 = a1;
                    if (v132 == -1)
                    {
                      v86 = a3;
                      v87 = a4;
                      v85 = v43;
                    }
                    else
                    {
                      v31 = feat_character(a1, (uint64_t)a5, v131, v132, 3, "=", v23);
                      if ((v31 & 0x80000000) != 0)
                        goto LABEL_244;
                      v85 = v43;
                      v84 = a1;
                      v86 = a3;
                      v87 = a4;
                      v83 = v23;
                    }
                    v26 = hlp_setFeature(v84, v86, v87, 6, v85, v83);
                    if ((v26 & 0x80000000) != 0)
                      goto LABEL_245;
LABEL_121:
                    v90 = 0;
                    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v90), "word"))
                    {
                      if (v25 == ++v90)
                        goto LABEL_168;
                    }
                    v133 = v90;
                    if (a5[4] <= v131)
                      v91 = "=";
                    else
                      v91 = *(const char **)(*(_QWORD *)a5 + ((unint64_t)v131 << 6) + 40);
                    v26 = hlp_setFeature(a1, a3, a4, 12, v43, v91);
                    if ((v26 & 0x80000000) != 0)
                      goto LABEL_245;
LABEL_168:
                    v114 = 0;
                    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v114), "wordnocase"))
                    {
                      if (v25 == ++v114)
                        goto LABEL_173;
                    }
                    v133 = v114;
                    feat_wordlc((uint64_t)a5, v131, 0, "=", v23);
                    v26 = hlp_setFeature(a1, a3, a4, 13, v43, v23);
                    if ((v26 & 0x80000000) != 0)
                      goto LABEL_245;
LABEL_173:
                    v115 = 0;
                    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v115), "wordlen"))
                    {
                      if (v25 == ++v115)
                      {
                        a2 = v43;
                        a6 = v131;
                        goto LABEL_9;
                      }
                    }
                    v133 = v115;
                    a6 = v131;
                    feat_wordlen((uint64_t)a5, v131, 0, "=", v23);
                    a2 = v43;
                    v26 = hlp_setFeature(a1, a3, a4, 14, v43, v23);
                    if ((v26 & 0x80000000) == 0)
                      goto LABEL_9;
                    goto LABEL_245;
                  }
                  goto LABEL_245;
                }
                goto LABEL_245;
              }
              goto LABEL_245;
            }
            goto LABEL_245;
          }
          goto LABEL_245;
        }
      }
      v133 = v24;
      v29 = "=";
      v30 = a1;
      if (v132 == -1)
      {
        v32 = a3;
        v33 = a4;
        v34 = a2;
      }
      else
      {
        v31 = feat_character(a1, (uint64_t)a5, v131, v132, 0, "=", v23);
        if ((v31 & 0x80000000) != 0)
          goto LABEL_244;
        v30 = a1;
        v32 = a3;
        v33 = a4;
        v34 = a2;
        v29 = v23;
      }
      v26 = hlp_setFeature(v30, v32, v33, 0, v34, v29);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_42;
    }
LABEL_245:
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v19, v20, v21, v22, v129);
    return 2314215434;
  }
  return v26;
}

uint64_t hlp_freeFeatureVector(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      heap_Free(*(_QWORD **)(a1 + 8), v6);
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t _hmgrph_param_split(uint64_t a1, const char *a2, uint64_t *a3, _DWORD *a4)
{
  int v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v26;

  do
    v8 = *(unsigned __int8 *)a2++;
  while (v8 == 32);
  while (1)
  {
    v9 = a2[cstdlib_strlen(a2 - 1) - 2];
    v10 = a2 - 1;
    if (v9 != 32)
      break;
    a2[cstdlib_strlen(v10) - 2] = 0;
  }
  v11 = cstdlib_strlen(v10);
  v12 = v11;
  v13 = 0;
  v14 = 0;
  *a4 = 0;
  if ((v11 + 1) > 1)
    v15 = (v11 + 1);
  else
    v15 = 1;
  do
  {
    if ((a2[v14 - 1] | 0x20) == 0x20)
      *a4 = ++v13;
    ++v14;
  }
  while (v15 != v14);
  v16 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v13);
  *a3 = (uint64_t)v16;
  if (v16)
  {
    *v16 = a2 - 1;
    if (v12)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = (unsigned __int8 *)&a2[v21];
        if (a2[v21 - 1] == 32)
        {
          *(v23 - 1) = 0;
          ++v21;
          *(_QWORD *)(*a3 + 8 * ++v22) = v23;
        }
        else
        {
          ++v21;
        }
      }
      while (v21 != v12);
    }
    return 0;
  }
  else
  {
    v24 = 2314215434;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v17, v18, v19, v20, v26);
    if (*a3)
      heap_Free(*(_QWORD **)(a1 + 8), *a3);
  }
  return v24;
}

uint64_t _hmgrph_parse_params(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  *(_QWORD *)(a4 + 32) = 0;
  v6 = (uint64_t *)(a4 + 32);
  v7 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 64) = 0;
  *(_WORD *)(a4 + 40) = 0;
  if (a3)
  {
    v8 = 2314215424;
    v9 = a3;
    v10 = (const char **)(a2 + 8);
    do
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + 64);
      v21 = *(unsigned __int16 *)(a4 + 40);
      v22 = v11;
      if (cstdlib_strcmp(*(v10 - 1), "features"))
      {
        if (!cstdlib_strcmp(*(v10 - 1), "collocations"))
        {
          _hmgrph_param_split(a1, *v10, v6, &v21);
          if (HIWORD(v21))
            return v8;
          *(_WORD *)(a4 + 40) = v21;
        }
      }
      else
      {
        _hmgrph_param_split(a1, *v10, (uint64_t *)(*(_QWORD *)(a4 + 16) + 56), &v22);
        if (v22 > 0xFF)
          return v8;
        *(_BYTE *)(*(_QWORD *)(a4 + 16) + 64) = v22;
      }
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  else
  {
    *(_BYTE *)(v7 + 64) = 29;
    v12 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 232);
    v17 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v17 + 56) = v12;
    if (!v12)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v13, v14, v15, v16, v20);
      return 2314215434;
    }
    if (*(_BYTE *)(v17 + 64))
    {
      v18 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18) = off_24D2858F0[v18];
        ++v18;
        v17 = *(_QWORD *)(a4 + 16);
      }
      while (v18 < *(unsigned __int8 *)(v17 + 64));
    }
  }
  return 0;
}

uint64_t stat_hmogrph_ModelInit(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, _WORD *a8, unsigned __int16 *a9)
{
  uint64_t BrokerString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  char *__src;
  int v78[2];
  uint64_t v79;
  unsigned int v80;
  char __s2[4];
  char v82;
  _OWORD v83[16];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v82 = 0;
  v80 = 0;
  *(_DWORD *)__s2 = 0;
  *(_QWORD *)v78 = 0;
  v79 = 0;
  memset(v83, 0, sizeof(v83));
  __src = 0;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  BrokerString = stat_hmogrph_getBrokerString(a3, (char *)v83, 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
    goto LABEL_43;
  BrokerString = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v83, "HMGR", 1031, (uint64_t *)v78);
  if ((BrokerString & 0x80000000) != 0)
    goto LABEL_43;
  v76 = a6;
  v25 = ssftriff_reader_OpenChunk(*(uint64_t *)v78, (__int32 *)__s2, &v80, &v79, v21, v22, v23, v24);
  if ((v25 & 0x80000000) != 0)
  {
    v39 = v25;
    v33 = 0;
  }
  else
  {
    v33 = 0;
    do
    {
      ++v33;
      ssftriff_reader_CloseChunk(*(uint64_t *)v78);
      v38 = ssftriff_reader_OpenChunk(*(uint64_t *)v78, (__int32 *)__s2, &v80, &v79, v34, v35, v36, v37);
    }
    while ((v38 & 0x80000000) == 0);
    v39 = v38;
  }
  ssftriff_reader_ObjClose(*(_QWORD **)v78, v26, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)v78 = 0;
  if ((v39 & 0x1FFF) != 0x14)
  {
LABEL_52:
    stat_hmogrph_ModelDeinit(a3, a7, (unsigned __int16)*a8, v20, v21, v22, v23, v24);
    *a8 = 0;
    return v39;
  }
  v40 = heap_Calloc(*(_QWORD **)(a3 + 8), 1, 48 * v33);
  *a7 = v40;
  if (!v40)
  {
    v39 = 2314215434;
    v74 = *(_QWORD *)(a3 + 32);
    v65 = 0;
LABEL_55:
    log_OutPublic(v74, (uint64_t)"FE_HMOGRPH", 37000, v65, v41, v42, v43, v44, v75);
    goto LABEL_44;
  }
  *a9 = v33;
  BrokerString = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v83, "HMGR", 1031, (uint64_t *)v78);
  if ((BrokerString & 0x80000000) != 0)
  {
LABEL_43:
    v39 = BrokerString;
    goto LABEL_44;
  }
  v45 = ssftriff_reader_OpenChunk(*(uint64_t *)v78, (__int32 *)__s2, &v80, &v79, v21, v22, v23, v24);
  if ((v45 & 0x80000000) == 0)
  {
    v46 = v76;
    do
    {
      LODWORD(v47) = (unsigned __int16)*a8;
      if (*a8)
      {
        v48 = 0;
        v49 = 0;
        while (cstdlib_strcmp((const char *)(*a7 + v48 + 7), __s2))
        {
          ++v49;
          v47 = (unsigned __int16)*a8;
          v48 += 48;
          if (v49 >= v47)
            goto LABEL_21;
        }
        if (*a7)
        {
          v53 = *a7 + v48;
          v46 = v76;
          goto LABEL_25;
        }
        LODWORD(v47) = (unsigned __int16)*a8;
LABEL_21:
        v46 = v76;
      }
      v53 = *a7 + 48 * v47;
      *a8 = v47 + 1;
      cstdlib_strcpy((char *)(v53 + 7), __s2);
      if (com_getUnicodeOrth(a4, a5, v46, __s2, &__src))
        cstdlib_strcpy((char *)v53, __src);
      else
        log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Orth for unicode %s does not exist in dic_cfg4.cfg", v54, v55, v56, (uint64_t)__s2);
LABEL_25:
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"model #%d, homograph %s", v50, v51, v52, (unsigned __int16)*a8);
      while (1)
      {
        v61 = ssftriff_reader_OpenChunk(*(uint64_t *)v78, (__int32 *)__s2, &v80, &v79, v57, v58, v59, v60);
        if ((v61 & 0x80000000) != 0)
          break;
        log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"model chunk %s for homograph %s, size %d", v22, v23, v24, (uint64_t)__s2);
        if (cstdlib_strcmp(__s2, "CRPH"))
        {
          if (cstdlib_strcmp(__s2, "IGTR"))
          {
            log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_HMOGRPH", 0, 0, (uint64_t)"unknown model type %s", v62, v63, v64, (uint64_t)__s2);
            v39 = 2314215428;
            goto LABEL_44;
          }
          v65 = *(_QWORD *)(v53 + 24);
          if (!v65)
          {
            v65 = heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
            *(_QWORD *)(v53 + 24) = v65;
            if (!v65)
            {
LABEL_58:
              v39 = 2314215434;
              v74 = *(_QWORD *)(a3 + 32);
              goto LABEL_55;
            }
          }
          v66 = igtree_Init(a1, a2, *(uint64_t *)v78, (char *)v65);
          if ((v66 & 0x80000000) != 0)
            goto LABEL_56;
        }
        else
        {
          v65 = *(_QWORD *)(v53 + 16);
          if (!v65)
          {
            v65 = heap_Calloc(*(_QWORD **)(a3 + 8), 1, 344);
            *(_QWORD *)(v53 + 16) = v65;
            if (!v65)
              goto LABEL_58;
          }
          *(_DWORD *)(v65 + 72) = 1;
          v66 = crf_Init(a1, a2, *(uint64_t *)v78, v65);
          if ((v66 & 0x80000000) != 0)
          {
LABEL_56:
            v39 = v66;
            ssftriff_reader_CloseChunk(*(uint64_t *)v78);
            goto LABEL_44;
          }
          _hmgrph_parse_params(a3, *(_QWORD *)(*(_QWORD *)(v53 + 16) + 32), *(_DWORD *)(*(_QWORD *)(v53 + 16) + 40), v53);
        }
        ssftriff_reader_CloseChunk(*(uint64_t *)v78);
      }
      v39 = v61;
      if ((v61 & 0x1FFF) != 0x14)
        goto LABEL_44;
      ssftriff_reader_CloseChunk(*(uint64_t *)v78);
      v45 = ssftriff_reader_OpenChunk(*(uint64_t *)v78, (__int32 *)__s2, &v80, &v79, v67, v68, v69, v70);
    }
    while ((v45 & 0x80000000) == 0);
  }
  if ((v45 & 0x1FFF) == 0x14)
    v39 = 0;
  else
    v39 = v45;
LABEL_44:
  if (*(_QWORD *)v78)
  {
    v71 = ssftriff_reader_ObjClose(*(_QWORD **)v78, v18, v19, v20, v21, v22, v23, v24);
    if (v71 >= 0 || (int)v39 <= -1)
      v39 = v39;
    else
      v39 = v71;
  }
  if ((v39 & 0x80000000) != 0)
    goto LABEL_52;
  return v39;
}

uint64_t stat_hmogrph_ModelDeinit(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = 48 * a3;
    do
    {
      v13 = *a2;
      v14 = *(_QWORD *)(*a2 + v10 + 24);
      if (v14)
      {
        v11 = igtree_Deinit(a1, v14, a3, a4, a5, a6, a7, a8);
        if ((v11 & 0x80000000) != 0)
          return v11;
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*a2 + v10 + 24));
        *(_QWORD *)(*a2 + v10 + 24) = 0;
        v13 = *a2;
      }
      v15 = *(_QWORD *)(v13 + v10 + 16);
      if (v15)
      {
        v11 = crf_Deinit(v15, v14, a3, a4, a5, a6, a7, a8);
        if ((v11 & 0x80000000) != 0)
          return v11;
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*a2 + v10 + 16));
        *(_QWORD *)(*a2 + v10 + 16) = 0;
        v13 = *a2;
      }
      v16 = *(_QWORD *)(v13 + v10 + 32);
      if (v16)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v16);
        *(_QWORD *)(*a2 + v10 + 32) = 0;
      }
      v10 += 48;
    }
    while (v12 != v10);
  }
  else
  {
    v11 = 0;
  }
  heap_Free(*(_QWORD **)(a1 + 8), *a2);
  *a2 = 0;
  return v11;
}

uint64_t hlp_getCharModel(char *__s1, unsigned int a2, char *__s2, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = a2;
  do
  {
    if (!cstdlib_strcmp(__s1, __s2))
    {
      *a4 = v7;
      v8 = 1;
    }
    ++v7;
    __s1 += 48;
  }
  while (v9 != v7);
  return v8;
}

uint64_t hlp_maxLenPhons(const char **a1, unsigned int a2)
{
  unsigned int v4;
  const char **v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;

  if (a2)
  {
    v4 = cstdlib_strlen(*a1);
    if (a2 != 1)
    {
      v5 = a1 + 7;
      v6 = a2 - 1;
      do
      {
        v7 = *v5;
        v5 += 7;
        v8 = cstdlib_strlen(v7);
        if (v4 <= v8)
          v4 = v8;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 + 1;
}

uint64_t hlp_getcharPhons(uint64_t a1, const char **a2, unsigned int a3, uint64_t *a4, _WORD *a5)
{
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;

  if (a3)
  {
    v6 = a4;
    v10 = a3;
    v11 = a3;
    v12 = a4;
    do
    {
      v13 = (unsigned __int16)cstdlib_strlen(*a2);
      v14 = (void *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v13 + 1);
      *v12 = (uint64_t)v14;
      if (!v14)
      {
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v15, v16, v17, v18, v24);
        do
        {
          if (*v6)
          {
            heap_Free(*(_QWORD **)(a1 + 8), *v6);
            *v6 = 0;
          }
          ++v6;
          --v10;
        }
        while (v10);
        return 2314215434;
      }
      v19 = *a2;
      a2 += 7;
      cstdlib_memcpy(v14, v19, v13);
      v20 = *v12++;
      *(_BYTE *)(v20 + v13) = 0;
      --v11;
    }
    while (v11);
    *a5 = 1;
    if (a3 != 1)
    {
      v21 = 1;
      do
      {
        v22 = 0;
        while (cstdlib_strcmp((const char *)v6[v22], (const char *)v6[v21]))
        {
          if (v21 == ++v22)
          {
            ++*a5;
            break;
          }
        }
        ++v21;
      }
      while (v21 != v10);
    }
    return 0;
  }
  else
  {
    result = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t hlp_highPriorityPhon(uint64_t a1, int a2, _WORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t i;
  unsigned int v6;

  if (!a2)
    return 0;
  *a3 = 0;
  if (a2 != 1)
  {
    v3 = 0;
    v4 = (unsigned __int16 *)(a1 + 64);
    for (i = 1; i != a2; ++i)
    {
      v6 = *v4;
      v4 += 28;
      if (v6 < *(unsigned __int16 *)(a1 + 56 * v3 + 8))
      {
        v3 = (unsigned __int16)i;
        *a3 = i;
      }
    }
  }
  return 1;
}

uint64_t hlp_concatFeatureVector(uint64_t a1, const char **a2, unsigned int a3, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;

  if (a3)
  {
    LODWORD(v8) = 0;
    v9 = a3;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = v8 + cstdlib_strlen(v11) + 2;
      --v9;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
  }
  v12 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v8);
  *a4 = (char *)v12;
  if (v12)
  {
    if (a3)
    {
      v17 = 0;
      do
      {
        cstdlib_strcat(*a4, a2[v17]);
        if (v17 < a3 - 1)
          cstdlib_strcat(*a4, " ");
        ++v17;
      }
      while (a3 != v17);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v13, v14, v15, v16, v19);
    return 2314215434;
  }
}

uint64_t hlp_disamWithModels(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, const char *a6, uint64_t a7, uint64_t a8, char *a9, __int128 *a10)
{
  uint64_t v16;
  int ReadOnly;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  const char **v30;
  uint64_t inited;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char **v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  uint64_t nnSent;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t i;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v109;
  const char *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t (**v115)(_QWORD, _QWORD, char *, float *);
  float v116;
  const char **v117;
  int v118;
  const char **v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  const char **v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unsigned int NextUtf8Offset;
  const char **v134;
  uint64_t v135;
  const char *v136;
  int v137;
  int v138;
  __int16 v139;
  unsigned int PreviousUtf8Offset;
  BOOL v141;
  int v142;
  char *v143;
  const char *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  void (**v149)(_QWORD, _QWORD, char *, float *);
  uint64_t (**v150)(_QWORD, _QWORD, char *, float *);
  int v151;
  const char **v152;
  char *__src;
  float *v154;
  int v155;
  int v156;
  char *__dst;
  uint64_t *v158;
  __int128 *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  _BOOL4 v167;
  unsigned int v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  const char *v177;
  int v178;
  const char **v179;
  _DWORD *v180;
  const char *v181;
  unsigned int v182;
  const char **v183;
  char *v184[2];

  v183 = 0;
  v184[0] = 0;
  v182 = 0;
  v180 = 0;
  v181 = 0;
  v179 = 0;
  v178 = 0;
  v176 = 0;
  v177 = 0;
  v175 = 0;
  if (!*(_QWORD *)(a2 + 40))
  {
    ReadOnly = 0;
LABEL_6:
    v167 = 0;
    goto LABEL_9;
  }
  v16 = *(_QWORD *)(a2 + 48);
  if (v16)
  {
    ReadOnly = ssftmap_FindReadOnly(v16, (uint64_t)a6, &v177);
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_6;
  }
  else
  {
    ReadOnly = 0;
  }
  v167 = cstdlib_strcmp(*(const char **)(a2 + 64), "albert") == 0;
LABEL_9:
  v18 = *(unsigned __int16 *)(a2 + 32);
  v168 = a3;
  v164 = a4;
  LOWORD(a4) = 0;
  if (!*(_WORD *)(a2 + 32))
    goto LABEL_15;
  v19 = 0;
  v20 = 0;
  v21 = *(const char **)(a2 + 24);
  do
  {
    if (!cstdlib_strcmp(v21, a6))
    {
      LOWORD(a4) = v19;
      v20 = 1;
    }
    ++v19;
    v21 += 48;
  }
  while (v18 != v19);
  if (!v20)
  {
LABEL_15:
    if (ReadOnly < 0)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 0, 0, (uint64_t)"No model for homograph %s exist", (uint64_t)a6, a7, a8, (uint64_t)a6);
      v22 = 0;
      v23 = 0;
      goto LABEL_83;
    }
  }
  v24 = a10;
  a4 = (unsigned __int16)a4;
  v163 = *(_QWORD *)(a2 + 24);
  v25 = v163 + 48 * (unsigned __int16)a4;
  v27 = *(_QWORD *)(v25 + 16);
  v26 = (uint64_t *)(v25 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  if (!v27)
  {
    v162 = a5;
    log_OutText(v28, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"MaxEnt model for homograph %s does not exist", (uint64_t)a6, a7, a8, (uint64_t)a6);
    v22 = 0;
    v30 = 0;
    goto LABEL_33;
  }
  log_OutText(v28, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Disambiguate homograph %s with MaxEnt model", (uint64_t)a6, a7, a8, (uint64_t)a6);
  v29 = (char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(*v26 + 64) - 8);
  if (!v29)
  {
    v23 = 0;
    v22 = 2314215434;
    goto LABEL_83;
  }
  v30 = (const char **)v29;
  v162 = a5;
  inited = hlp_initFeatureVector(a1, v29, (unsigned __int16)(*(unsigned __int8 *)(*v26 + 64) - 1));
  if ((inited & 0x80000000) != 0)
    goto LABEL_28;
  v32 = *(_QWORD *)(*v26 + 56);
  v33 = *(unsigned __int8 *)(*v26 + 64);
  v160 = (unsigned __int16)a4;
  v34 = v163 + 48 * (unsigned __int16)a4;
  v35 = *(char ***)(v34 + 32);
  LOWORD(v34) = *(_WORD *)(v34 + 40);
  v36 = a10[3];
  v171 = a10[2];
  v172 = v36;
  v173 = a10[4];
  v174 = *((_QWORD *)a10 + 10);
  v37 = a10[1];
  v169 = *a10;
  v170 = v37;
  hlp_setFeatureVector(a1, (uint64_t)v30, v32, v33, (unsigned __int16 *)(a2 + 8), v168, a5, v35, v34, (uint64_t)&v169);
  inited = hlp_concatFeatureVector(a1, v30, (*(_BYTE *)(*v26 + 64) - 1), v184);
  if ((inited & 0x80000000) != 0)
  {
LABEL_28:
    v22 = inited;
    goto LABEL_29;
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATHMOGRPH_FEATURE: homograph %s at word %d, char %d", v38, v39, v40, (uint64_t)a6);
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATHMOGRPH_FEATURE: %s", v41, v42, v43, (uint64_t)v184[0]);
  v22 = crf_Process(*v26, v184, 1u, (uint64_t *)&v183, &v182);
  if ((v22 & 0x80000000) != 0)
  {
LABEL_29:
    v23 = 0;
    v54 = 0;
    goto LABEL_80;
  }
  v47 = ReadOnly;
  if (*(_BYTE *)(*v26 + 64) != 1)
  {
    v48 = (unsigned __int16)(*(unsigned __int8 *)(*v26 + 64) - 1);
    v49 = (uint64_t *)v30;
    do
    {
      v50 = *v49++;
      heap_Free(*(_QWORD **)(a1 + 8), v50);
      --v48;
    }
    while (v48);
  }
  if (v182 == 1)
  {
    cstdlib_strcpy(a9, *v183);
    a9[cstdlib_strlen(a9) - 1] = 0;
  }
  else
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%d predictions for homograph %s with maxent model (discarded)", v44, v45, v46, v182);
  }
  ReadOnly = v47;
  v24 = a10;
  a4 = v160;
LABEL_33:
  v161 = a4;
  v55 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(a2 + 40) || ReadOnly < 0)
  {
    v159 = v24;
    __dst = a9;
    log_OutText(v55, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"No NN model for homograph %s !", v51, v52, v53, (uint64_t)a6);
    v23 = 0;
    goto LABEL_41;
  }
  log_OutText(v55, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Disambiguate homograph %s with NN model", v51, v52, v53, (uint64_t)a6);
  v56 = *(_QWORD *)(a2 + 80);
  v57 = (*(uint64_t (**)(_QWORD, _QWORD, int *))(v56 + 40))(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), &v178);
  if ((v57 & 0x80000000) != 0)
  {
    v22 = v57;
    goto LABEL_79;
  }
  v159 = v24;
  v63 = (_DWORD *)(a2 + 60);
  v62 = *(_DWORD *)(a2 + 60);
  if (v167)
  {
    if (v62 == v178)
    {
      __dst = a9;
      v158 = (uint64_t *)(a1 + 8);
      v64 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8);
      if (v64)
      {
        v23 = (char *)v64;
        v69 = *(_DWORD *)(a2 + 56) + 2;
        goto LABEL_63;
      }
      goto LABEL_78;
    }
LABEL_67:
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v58, v59, v60, v61, v148);
    v54 = 0;
    v23 = 0;
    v22 = 2314215449;
    if (v30)
      goto LABEL_80;
    goto LABEL_81;
  }
  if (v62 != v178 + 1)
    goto LABEL_67;
  __dst = a9;
  v158 = (uint64_t *)(a1 + 8);
  v93 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8);
  if (!v93)
  {
LABEL_78:
    v22 = 2314215434;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v65, v66, v67, v68, v148);
LABEL_79:
    v54 = 0;
    v23 = 0;
    if (v30)
      goto LABEL_80;
    goto LABEL_81;
  }
  v23 = (char *)v93;
  v63 = (_DWORD *)(a2 + 56);
  v69 = *(_DWORD *)(a2 + 60);
LABEL_63:
  v94 = (_DWORD *)heap_Alloc(*v158, 4 * (v69 * *v63));
  v180 = v94;
  if (!v94)
  {
    v22 = 2314215434;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v95, v96, v97, v98, v148);
    goto LABEL_55;
  }
  v99 = (float *)v94;
  nnSent = make_nnSent(a1, a2 + 8, (uint64_t)&v175);
  if ((nnSent & 0x80000000) != 0)
  {
    v22 = nnSent;
    v109 = *(_QWORD *)(a1 + 32);
    v110 = "Make NN Sent Failed";
    goto LABEL_171;
  }
  if (v167)
  {
    *v99++ = 101.0;
    v102 = *(_DWORD *)(a2 + 56);
    v180[v102 + 1] = 1120665600;
  }
  else
  {
    v102 = *(_DWORD *)(a2 + 56);
  }
  v111 = 1 - (__int16)v102;
  if (v111 < 0)
    v111 = 2 - (__int16)v102;
  v112 = v111 >> 1;
  if ((__int16)v102 >= -1)
    v113 = (__int16)v102 + 1;
  else
    v113 = (__int16)v102 + 2;
  v152 = v30;
  if (v112 >= v113 >> 1)
  {
LABEL_161:
    if (v167)
      v146 = v102 + 2;
    else
      v146 = v102;
    v22 = fi_predict(*(uint64_t ****)(a2 + 40), (const void **)&v180, v146, &v179, v101, v70, v71, v72);
    if ((v22 & 0x80000000) == 0)
    {
      if (*(_WORD *)(*(_QWORD *)(a7 + 48) + 16 * v164 + 8))
      {
        v147 = 0;
        v73 = 1;
        while (cstdlib_strcmp(*(const char **)(a8 + 8 * v147), *v179))
        {
          if (++v147 >= (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a7 + 48) + 16 * v164 + 8))
            goto LABEL_175;
        }
        cstdlib_strcpy(__dst, *v179);
        v73 = 0;
LABEL_175:
        v30 = v152;
        goto LABEL_42;
      }
LABEL_41:
      v73 = 1;
LABEL_42:
      v74 = v163 + 48 * v161;
      v76 = *(_QWORD *)(v74 + 24);
      v75 = (uint64_t *)(v74 + 24);
      v77 = *(_QWORD *)(a1 + 32);
      if (v76)
      {
        log_OutText(v77, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Disambiguate homograph %s with igtree model", v70, v71, v72, (uint64_t)a6);
        v54 = (char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(*v75 + 1296) - 8);
        if (!v54)
        {
          v22 = 2314215434;
          if (v30)
            goto LABEL_80;
          goto LABEL_81;
        }
        v78 = hlp_initFeatureVector(a1, v54, (unsigned __int16)(*(unsigned __int8 *)(*v75 + 1296) - 1));
        if ((v78 & 0x80000000) != 0)
        {
          v22 = v78;
          if (v30)
            goto LABEL_80;
          goto LABEL_81;
        }
        v79 = ReadOnly;
        v80 = *(_QWORD *)(*v75 + 1312);
        v81 = *(unsigned __int8 *)(*v75 + 1296);
        v82 = v159[3];
        v171 = v159[2];
        v172 = v82;
        v173 = v159[4];
        v174 = *((_QWORD *)v159 + 10);
        v83 = v159[1];
        v169 = *v159;
        v170 = v83;
        hlp_setFeatureVector(a1, (uint64_t)v54, v80, v81, (unsigned __int16 *)(a2 + 8), v168, v162, 0, 0, (uint64_t)&v169);
        igtree_Process(*v75, (uint64_t)v54, &v181);
        if (*(_BYTE *)(*v75 + 1296) != 1)
        {
          v84 = (unsigned __int16)(*(unsigned __int8 *)(*v75 + 1296) - 1);
          v85 = (uint64_t *)v54;
          do
          {
            v86 = *v85++;
            heap_Free(*(_QWORD **)(a1 + 8), v86);
            --v84;
          }
          while (v84);
        }
        v87 = cstdlib_strcmp(v181, "NOMATCH");
        if ((v73 & 1) != 0)
        {
          if (!v87)
          {
            v91 = v177;
            if (!v177 || v79 < 0)
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"No igtree rule matched for homograph %s", v88, v89, v90, (uint64_t)a6);
              v92 = __dst;
              if (*__dst)
                goto LABEL_76;
              v91 = "NOMATCH";
              goto LABEL_75;
            }
LABEL_74:
            v92 = __dst;
LABEL_75:
            cstdlib_strcpy(v92, v91);
            goto LABEL_76;
          }
        }
        else if (!v87 || !cstdlib_strcmp(v181, *v179))
        {
LABEL_76:
          v22 = 0;
          if (v30)
            goto LABEL_80;
          goto LABEL_81;
        }
        v91 = v181;
        goto LABEL_74;
      }
      log_OutText(v77, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"IGTree model for homograph %s does not exist", v70, v71, v72, (uint64_t)a6);
LABEL_55:
      v54 = 0;
      if (v30)
        goto LABEL_80;
      goto LABEL_81;
    }
    v109 = *(_QWORD *)(a1 + 32);
    v110 = "FIhmogrph Prediction Failed";
LABEL_171:
    log_OutText(v109, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)v110, v70, v71, v72, 0);
    goto LABEL_55;
  }
  v114 = v168;
  v115 = (uint64_t (**)(_QWORD, _QWORD, char *, float *))(v56 + 72);
  if (!v167)
    v115 = (uint64_t (**)(_QWORD, _QWORD, char *, float *))(v56 + 56);
  v150 = v115;
  v149 = (void (**)(_QWORD, _QWORD, char *, float *))(v56 + 56);
  v151 = ReadOnly;
  while (1)
  {
    v156 = v112;
    if (!v167)
    {
      if ((_WORD)v112)
        v116 = 0.0;
      else
        v116 = 1.0;
      *v99++ = v116;
    }
    v154 = v99;
    v117 = (const char **)v175;
    __src = *(char **)(a2 + 72);
    v155 = cstdlib_strlen((const char *)v175[v114]);
    v118 = 0;
    if (v168)
    {
      v119 = v117;
      v120 = v114;
      do
      {
        v121 = *v119++;
        v118 += cstdlib_strlen(v121);
        --v120;
      }
      while (v120);
    }
    v122 = (unsigned __int16)v176;
    if ((unsigned __int16)v176 <= (unsigned __int16)(v168 + 1))
    {
      v123 = 0;
    }
    else
    {
      v123 = 0;
      v124 = (unsigned __int16)v176 - (unint64_t)(unsigned __int16)(v168 + 1);
      v125 = &v117[(unsigned __int16)(v168 + 1)];
      do
      {
        v126 = *v125++;
        v123 += cstdlib_strlen(v126);
        --v124;
      }
      while (v124);
    }
    v127 = heap_Calloc((_QWORD *)*v158, 1, (v155 + v118 + v123 + 1));
    if (!v127)
      break;
    v132 = (char *)v127;
    if ((_DWORD)v122)
    {
      NextUtf8Offset = v118 + v162;
      v134 = v117;
      v135 = v122;
      do
      {
        v136 = *v134++;
        cstdlib_strcat(v132, v136);
        --v135;
      }
      while (v135);
      if (v122 > v168 && cstdlib_strlen(v117[v168]) > v162)
      {
        v137 = v156;
        if ((v156 & 0x8000) != 0)
        {
          if (NextUtf8Offset)
          {
            v139 = v156;
            do
            {
              PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v132, NextUtf8Offset);
              NextUtf8Offset = PreviousUtf8Offset;
              v141 = (unsigned __int16)~v139++ == 0;
            }
            while (!v141 && PreviousUtf8Offset);
            if (!v139)
            {
LABEL_143:
              if ((utf8_getUTF8Char((uint64_t)v132, NextUtf8Offset, v23) & 0x80000000) == 0)
                goto LABEL_145;
            }
          }
        }
        else
        {
          if (!(_WORD)v156)
            goto LABEL_143;
          while (NextUtf8Offset != cstdlib_strlen(v132))
          {
            NextUtf8Offset = utf8_GetNextUtf8Offset(v132, NextUtf8Offset);
            v138 = (__int16)v137--;
            if (v138 <= 1)
              goto LABEL_143;
          }
        }
      }
    }
    cstdlib_strcpy(v23, __src);
LABEL_145:
    heap_Free((_QWORD *)*v158, (uint64_t)v132);
    if (!cstdlib_strcmp(v23, ""))
      cstdlib_strcpy(v23, *(const char **)(a2 + 72));
    v30 = v152;
    ReadOnly = v151;
    if (utf8_IsChineseLetter(v23))
      goto LABEL_155;
    v142 = *v23;
    switch(v142)
    {
      case 's':
        v144 = *(const char **)(a2 + 72);
        v143 = v23;
        goto LABEL_154;
      case 'e':
        v143 = v23;
        v144 = "ENG";
        goto LABEL_154;
      case '0':
        v143 = v23;
        v144 = "NUM";
LABEL_154:
        cstdlib_strcpy(v143, v144);
        break;
    }
LABEL_155:
    v114 = v168;
    if (((*v150)(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), v23, v154) & 0x1FFF) == 0x14)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"No embedding vector for character %s . Fall back!", v70, v71, v72, (uint64_t)v23);
      cstdlib_strcpy(v23, *(const char **)(a2 + 72));
      (*v149)(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), v23, v154);
    }
    v99 = &v154[v178];
    v112 = v156 + 1;
    v102 = *(_DWORD *)(a2 + 56);
    if ((__int16)v102 >= -1)
      v145 = (__int16)v102 + 1;
    else
      v145 = (__int16)v102 + 2;
    if (v145 >> 1 <= (__int16)v112)
      goto LABEL_161;
  }
  v22 = 2314215434;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v128, v129, v130, v131, v148);
  v54 = 0;
  v30 = v152;
  if (!v152)
    goto LABEL_81;
LABEL_80:
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v30);
LABEL_81:
  if (v54)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v54);
LABEL_83:
  if (v184[0])
  {
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v184[0]);
    v184[0] = 0;
  }
  v103 = (uint64_t)v183;
  if (v183)
  {
    if (v182)
    {
      for (i = 0; i < v182; heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v183[i++]))
        ;
      v103 = (uint64_t)v183;
    }
    heap_Free(*(_QWORD **)(a1 + 8), v103);
    v183 = 0;
  }
  if (v23)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
  v105 = (unsigned __int16)v176;
  v106 = (uint64_t)v175;
  if ((_WORD)v176)
  {
    v107 = v175;
    do
    {
      if (*v107)
      {
        heap_Free(*(_QWORD **)(a1 + 8), *v107);
        *v107 = 0;
      }
      ++v107;
      --v105;
    }
    while (v105);
LABEL_100:
    heap_Free(*(_QWORD **)(a1 + 8), v106);
  }
  else if (v175)
  {
    goto LABEL_100;
  }
  return v22;
}

uint64_t make_nnSent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  const char *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;

  v6 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a3 + 8) = v6;
  v7 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v6);
  *(_QWORD *)a3 = v7;
  if (!v7)
  {
LABEL_38:
    v36 = 2314215434;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v8, v9, v10, v11, v43);
    return v36;
  }
  if (!*(_WORD *)(a3 + 8))
    return 0;
  v12 = 0;
  v13 = 0;
  while (!utf8_IsChineseLetter(*(const char **)(*(_QWORD *)a2 + 8 * v12))
       && cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + 8 * v12)) == 1)
  {
    v14 = *(const char **)(*(_QWORD *)a2 + 8 * v12);
    v15 = *(unsigned __int8 *)v14;
    if ((v15 - 48) <= 9)
    {
      v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
      *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
      if (!v16)
        goto LABEL_41;
LABEL_19:
      v23 = "0";
      goto LABEL_20;
    }
    v31 = *(_QWORD *)(a1 + 8);
    if ((v15 & 0xFFFFFFDF) - 65 <= 0x19)
    {
      v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
      *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
      if (!v16)
        goto LABEL_41;
LABEL_24:
      v23 = "e";
      goto LABEL_20;
    }
    v32 = cstdlib_strlen(v14);
    v16 = (char *)heap_Alloc(v31, (v32 + 1));
    *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
    if (!v16)
    {
LABEL_41:
      v36 = 2314215434;
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v17, v18, v19, v20, v43);
      v41 = *(_QWORD *)(a1 + 32);
      v42 = "Tag 1-char orth word for NN Failed";
      goto LABEL_43;
    }
LABEL_12:
    v23 = *(const char **)(*(_QWORD *)a2 + 8 * v12);
LABEL_20:
    cstdlib_strcpy(v16, v23);
    ++v13;
    v12 += 8;
    if (v13 >= *(unsigned __int16 *)(a3 + 8))
      return 0;
  }
  if (utf8_IsChineseLetter(*(const char **)(*(_QWORD *)a2 + 8 * v12))
    || cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + 8 * v12)) == 1)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + 8 * v12));
    v16 = (char *)heap_Alloc(v21, v22 + 1);
    *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
    if (!v16)
      goto LABEL_38;
    goto LABEL_12;
  }
  v24 = *(const char **)(*(_QWORD *)a2 + 8 * v12);
  v25 = *(unsigned __int8 *)v24;
  if ((v25 - 48) < 0xA
    || ((v25 - 35) <= 0x3C
      ? (v26 = ((1 << (v25 - 35)) & 0x1800000004000503) == 0)
      : (v26 = 1),
        !v26 || v25 == 124))
  {
    v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
    *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
    if (!v16)
      goto LABEL_42;
    goto LABEL_19;
  }
  if ((v25 & 0xFFFFFFDF) - 65 < 0x1A)
    goto LABEL_29;
  v33 = v25 - 34;
  if (v33 > 0x39)
    goto LABEL_36;
  if (((1 << v33) & 0x200000006000061) != 0)
  {
    v34 = *(_QWORD *)(a1 + 8);
    v35 = cstdlib_strlen(v24);
    v16 = (char *)heap_Alloc(v34, (v35 + 1));
    *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
    if (!v16)
      goto LABEL_42;
    goto LABEL_12;
  }
  if (((1 << v33) & 0x40000010) != 0)
  {
LABEL_29:
    v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
    *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
    if (!v16)
      goto LABEL_42;
    goto LABEL_24;
  }
LABEL_36:
  v16 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
  *(_QWORD *)(*(_QWORD *)a3 + v12) = v16;
  if (v16)
  {
    v23 = "s";
    goto LABEL_20;
  }
LABEL_42:
  v36 = 2314215434;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v27, v28, v29, v30, v43);
  v41 = *(_QWORD *)(a1 + 32);
  v42 = "Tag orth word for NN Failed";
LABEL_43:
  log_OutText(v41, (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)v42, v38, v39, v40, 0);
  return v36;
}

uint64_t hlp_disamCharByChar(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4, int *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int NextUtf8Offset;
  uint64_t UTF8Char;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int hasRcdWithGivenPOIClass;
  _WORD *v50;
  uint64_t v51;
  char *v52;
  int *v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int16 v61;
  int *v62;
  int v63;
  int v64;
  uint64_t *v65;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  int *v70;
  _WORD *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  __int128 v78[5];
  uint64_t v79;
  unsigned __int16 v80;
  char __s2[15];

  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 1024);
  if (v14)
  {
    v19 = (uint64_t)v14;
    v72 = a6;
    v73 = a2;
    v74 = a2;
    v20 = v13 + ((unint64_t)a2 << 6);
    cstdlib_strcpy(v14, "");
    v22 = (uint64_t *)(v20 + 48);
    v21 = *(_QWORD *)(v20 + 48);
    v23 = *(unsigned __int16 *)(v21 + 16 * a3 + 8);
    v75 = v13;
    if (*(_WORD *)(v21 + 16 * a3 + 8))
    {
      v24 = (_DWORD *)(*(_QWORD *)(v21 + 16 * a3) + 48);
      v25 = v23;
      do
      {
        *v24 = 0;
        v24 += 14;
        --v25;
      }
      while (v25);
      v26 = v23;
    }
    else
    {
      v26 = 0;
    }
    v77 = (uint64_t *)heap_Calloc(*(_QWORD **)(v12 + 8), v26, 8);
    if (!v77)
    {
      v27 = 2314215434;
      log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v28, v29, v30, v31, v67);
LABEL_57:
      heap_Free(*(_QWORD **)(v12 + 8), v19);
      return v27;
    }
    v76 = v23;
    v71 = a4;
    if (a3)
    {
      v32 = 0;
      NextUtf8Offset = 0;
      do
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset(*(char **)v20, NextUtf8Offset);
        ++v32;
      }
      while (a3 > (unsigned __int16)v32);
    }
    else
    {
      NextUtf8Offset = 0;
    }
    UTF8Char = utf8_getUTF8Char(*(_QWORD *)v20, NextUtf8Offset, __s2);
    if ((UTF8Char & 0x80000000) != 0)
    {
      v46 = UTF8Char;
    }
    else
    {
      v80 = 0;
      v35 = hlp_getcharPhons(v12, *(const char ***)(*v22 + 16 * a3), *(unsigned __int16 *)(*v22 + 16 * a3 + 8), v77, &v80);
      v36 = v35;
      if ((v35 & 0x80000000) == 0)
      {
        v70 = a5;
        if (v80 >= 2u)
        {
          v68 = v35;
          v69 = (char *)v19;
          v37 = *(unsigned __int16 *)(a1 + 32);
          if (!*(_WORD *)(a1 + 32))
            goto LABEL_33;
          v38 = 0;
          v39 = *(const char **)(a1 + 24);
          do
          {
            if (!cstdlib_strcmp(v39, __s2))
              v38 = 1;
            v39 += 48;
            --v37;
          }
          while (v37);
          if (v38)
          {
            v40 = *(_OWORD *)(v72 + 48);
            v78[2] = *(_OWORD *)(v72 + 32);
            v78[3] = v40;
            v78[4] = *(_OWORD *)(v72 + 64);
            v79 = *(_QWORD *)(v72 + 80);
            v41 = *(_OWORD *)(v72 + 16);
            v78[0] = *(_OWORD *)v72;
            v78[1] = v41;
            v19 = (uint64_t)v69;
            hlp_disamWithModels(v12, a1, v73, a3, NextUtf8Offset, __s2, v20, (uint64_t)v77, v69, v78);
            v36 = v68;
            if (cstdlib_strcmp(v69, "NOMATCH") && *(_WORD *)(*v22 + 16 * a3 + 8))
            {
              v42 = 0;
              v43 = 48;
              do
              {
                v44 = cstdlib_strcmp((const char *)v77[v42], v69);
                v45 = *v22;
                if (v44)
                  *(_DWORD *)(*(_QWORD *)(v45 + 16 * a3) + v43) = 1;
                ++v42;
                v43 += 56;
              }
              while (v42 < *(unsigned __int16 *)(v45 + 16 * a3 + 8));
            }
          }
          else
          {
LABEL_33:
            v19 = (uint64_t)v69;
            *v70 = 0;
            v36 = v68;
          }
        }
        v47 = *(char **)(v75 + (v74 << 6) + 24);
        if (!cstdlib_strcmp(v47, ""))
        {
          v46 = v36;
          hlp_filterWordCandIfTnHas((char *)v20);
          v53 = v70;
          v50 = v71;
          goto LABEL_43;
        }
        v48 = cstdlib_strcmp(v47, "poi");
        hasRcdWithGivenPOIClass = hlp_hasRcdWithGivenPOIClass(v20, v47);
        if (v48)
        {
          v46 = v36;
          v50 = v71;
          if (!hasRcdWithGivenPOIClass)
          {
            v53 = v70;
            if (hlp_hasRcdWithGivenPOIClass(v20, "poi"))
              hlp_filterWordCandIfTnIsNot(v20, "poi");
            else
              hlp_filterWordCandIfTnHas((char *)v20);
LABEL_43:
            *v50 = -1;
            v54 = *v22 + 16 * a3;
            v57 = *(unsigned __int16 *)(v54 + 8);
            v55 = (unsigned __int16 *)(v54 + 8);
            v56 = v57;
            if (!v57)
              goto LABEL_50;
            v58 = 0;
            v59 = *(_QWORD *)(*v22 + 16 * a3) + 48;
            v60 = 0xFFFF;
            v61 = -1;
            v62 = (int *)v59;
            do
            {
              v63 = *v62;
              v62 += 14;
              if (!v63 && *(unsigned __int16 *)(v59 - 40) < v61)
              {
                v60 = (unsigned __int16)v58;
                *v50 = v58;
                v61 = *(_WORD *)(v59 - 40);
                v56 = *v55;
              }
              ++v58;
              v59 = (uint64_t)v62;
            }
            while (v58 < v56);
            if (v60 != 0xFFFF)
              v64 = 1;
            else
LABEL_50:
              v64 = 0;
            *v53 = v64;
            goto LABEL_53;
          }
          v51 = v20;
          v52 = v47;
        }
        else
        {
          v50 = v71;
          v46 = v36;
          if (!hasRcdWithGivenPOIClass)
          {
            hlp_filterWordCandIfTnHas((char *)v20);
            goto LABEL_42;
          }
          v52 = "poi";
          v51 = v20;
        }
        hlp_filterWordCandIfTnIsNot(v51, v52);
LABEL_42:
        v53 = v70;
        goto LABEL_43;
      }
      v46 = v35;
    }
LABEL_53:
    if (v76)
    {
      v65 = v77;
      do
      {
        heap_Free(*(_QWORD **)(v12 + 8), *v65);
        *v65++ = 0;
        --v26;
      }
      while (v26);
    }
    heap_Free(*(_QWORD **)(v12 + 8), (uint64_t)v77);
    v27 = v46;
    goto LABEL_57;
  }
  v27 = 2314215434;
  log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v15, v16, v17, v18, v67);
  return v27;
}

uint64_t hlp_disamSpecialWords(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  uint64_t v17;
  unsigned int NextUtf8Offset;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  uint64_t i;
  unsigned int v50;
  _OWORD v55[5];
  uint64_t v56;
  const char *v57;
  __int16 v58;
  unsigned __int8 v59[16];

  *(_DWORD *)&v59[3] = 0;
  *(_DWORD *)v59 = 0;
  v58 = 0;
  v9 = (unsigned __int16 *)(a2 + 1);
  v8 = a2[1];
  v57 = 0;
  *a5 = 0;
  v10 = v8 + ((unint64_t)a3 << 6);
  v12 = (uint64_t *)(v10 + 48);
  v11 = *(_QWORD *)(v10 + 48);
  v13 = a4;
  if (*(_WORD *)(v11 + 16 * a4 + 8))
  {
    v14 = 0;
    v15 = 0;
    while (!cstdlib_strstr(*(char **)(*(_QWORD *)(v11 + 16 * v13) + v14), "{SEP"))
    {
      ++v15;
      v11 = *v12;
      v14 += 56;
      if (v15 >= *(unsigned __int16 *)(*v12 + 16 * v13 + 8))
        goto LABEL_5;
    }
LABEL_31:
    v19 = 0;
    v25 = 0;
LABEL_32:
    if (!*(_DWORD *)(a1 + 144))
    {
      v42 = *v12 + 16 * v13;
      v43 = *(unsigned __int16 *)(v42 + 8);
      if (*(_WORD *)(v42 + 8))
      {
        v46 = *(_QWORD *)v42;
        v45 = (_WORD *)(v42 + 12);
        v44 = v46;
        *v45 = 0;
        if ((_DWORD)v43 != 1)
        {
          v47 = 0;
          v48 = (unsigned __int16 *)(v44 + 64);
          for (i = 1; i != v43; ++i)
          {
            v50 = *v48;
            v48 += 28;
            if (v50 < *(unsigned __int16 *)(v44 + 56 * v47 + 8))
            {
              v47 = (unsigned __int16)i;
              *v45 = i;
            }
          }
        }
      }
LABEL_39:
      *a5 = 1;
    }
    if (v25)
LABEL_41:
      heap_Free(*(_QWORD **)(*a2 + 8), v25);
  }
  else
  {
LABEL_5:
    v17 = *(_QWORD *)(v10 + 40);
    v16 = (char **)(v10 + 40);
    if ((utf8_getUTF8Char(v17, 0, v59) & 0x80000000) == 0)
    {
      NextUtf8Offset = 0;
      while (cstdlib_strlen(*v16) > NextUtf8Offset)
      {
        if (utf8_Utf8CharTo16bit(v59, (uint64_t)&v58)
          && (unsigned __int16)((unsigned __int16)(v58 + 24576) >> 9) <= 0x56u)
        {
          if (!*((_WORD *)a2 + 16))
            goto LABEL_31;
          v20 = 0;
          v21 = 24;
          while (cstdlib_strcmp((const char *)(a2[3] + v21 - 17), "0000"))
          {
            ++v20;
            v21 += 48;
            if (v20 >= *((unsigned __int16 *)a2 + 16))
              goto LABEL_31;
          }
          v22 = a2[3];
          if (!v22)
            goto LABEL_31;
          v23 = *(_QWORD *)(v22 + v21);
          if (!v23)
            goto LABEL_31;
          v24 = (char **)heap_Calloc(*(_QWORD **)(*a2 + 8), 1, 8 * *(unsigned __int8 *)(v23 + 1296) - 8);
          if (!v24)
            return 2314215434;
          v25 = (uint64_t)v24;
          inited = hlp_initFeatureVector(*a2, v24, (unsigned __int16)(*(unsigned __int8 *)(*(_QWORD *)(v22 + v21) + 1296) - 1));
          if ((inited & 0x80000000) != 0)
          {
            v19 = inited;
            goto LABEL_41;
          }
          v27 = *a2;
          v28 = *(_QWORD *)(v22 + v21);
          v29 = *(_QWORD *)(v28 + 1312);
          v30 = *(unsigned __int8 *)(v28 + 1296);
          v31 = *(_OWORD *)(a6 + 48);
          v55[2] = *(_OWORD *)(a6 + 32);
          v55[3] = v31;
          v55[4] = *(_OWORD *)(a6 + 64);
          v56 = *(_QWORD *)(a6 + 80);
          v32 = *(_OWORD *)(a6 + 16);
          v55[0] = *(_OWORD *)a6;
          v55[1] = v32;
          hlp_setFeatureVector(v27, v25, v29, v30, v9, a3, 0xFFFFFFFF, 0, 0, (uint64_t)v55);
          v19 = igtree_Process(*(_QWORD *)(v22 + v21), v25, &v57);
          if ((v19 & 0x80000000) != 0)
            goto LABEL_41;
          v33 = *(unsigned __int8 *)(*(_QWORD *)(v22 + v21) + 1296) - 1;
          if (*(_BYTE *)(*(_QWORD *)(v22 + v21) + 1296) != 1)
          {
            v34 = *a2;
            v35 = v33;
            v36 = (uint64_t *)v25;
            do
            {
              v37 = *v36++;
              heap_Free(*(_QWORD **)(v34 + 8), v37);
              --v35;
            }
            while (v35);
          }
          if (cstdlib_strcmp(v57, "NOMATCH"))
          {
            v38 = *v12;
            if (*(_WORD *)(*v12 + 16 * v13 + 8))
            {
              v39 = 0;
              v40 = 0;
              while (1)
              {
                v41 = cstdlib_strcmp(v57, *(const char **)(*(_QWORD *)(v38 + 16 * v13) + v39));
                v38 = *v12;
                if (!v41)
                  break;
                ++v40;
                v39 += 56;
                if (v40 >= *(unsigned __int16 *)(v38 + 16 * v13 + 8))
                  goto LABEL_32;
              }
              *(_WORD *)(v38 + 16 * v13 + 12) = v40;
              goto LABEL_39;
            }
          }
          goto LABEL_32;
        }
        NextUtf8Offset = utf8_GetNextUtf8Offset(*v16, NextUtf8Offset);
        if ((utf8_getUTF8Char((uint64_t)*v16, NextUtf8Offset, v59) & 0x80000000) != 0)
          return 0;
      }
    }
    return 0;
  }
  return v19;
}

uint64_t stat_hmogrph_disambiguatePhons(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t result;
  __int128 *v7;
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int16 v27;

  v27 = 0;
  v26 = 0;
  v2 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16))
    return 0;
  v5 = 0;
  result = 0;
  v7 = (__int128 *)(a1 + 392);
  do
  {
    v8 = *(_QWORD *)(a2 + 8) + (v5 << 6);
    v10 = *(unsigned __int16 *)(v8 + 56);
    v9 = (unsigned __int16 *)(v8 + 56);
    if (!v10)
      goto LABEL_17;
    v11 = 0;
    v12 = 0;
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 8) + (v5 << 6) + 48);
    do
    {
      v14 = *v13;
      if (*(_WORD *)(*v13 + v11 + 8) == 1)
      {
        v19 = 0;
LABEL_14:
        *(_WORD *)(v14 + v11 + 12) = v19;
        goto LABEL_15;
      }
      if (!*(_WORD *)(*v13 + v11 + 8))
        return result;
      v15 = *(_OWORD *)(a1 + 440);
      v22 = *(_OWORD *)(a1 + 424);
      v23 = v15;
      v24 = *(_OWORD *)(a1 + 456);
      v25 = *(_QWORD *)(a1 + 472);
      v16 = *(_OWORD *)(a1 + 408);
      v20 = *v7;
      v21 = v16;
      result = hlp_disamSpecialWords(a1, (uint64_t *)a2, (unsigned __int16)v5, (unsigned __int16)v12, &v26, (uint64_t)&v20);
      if ((result & 0x80000000) != 0)
        return result;
      if (v26 != 1)
      {
        v17 = *(_OWORD *)(a1 + 440);
        v22 = *(_OWORD *)(a1 + 424);
        v23 = v17;
        v24 = *(_OWORD *)(a1 + 456);
        v25 = *(_QWORD *)(a1 + 472);
        v18 = *(_OWORD *)(a1 + 408);
        v20 = *v7;
        v21 = v18;
        result = hlp_disamCharByChar(a2, (unsigned __int16)v5, (unsigned __int16)v12, &v27, &v26, (uint64_t)&v20);
        if ((result & 0x80000000) != 0)
          return result;
        v19 = v27;
        if (v26 != 1)
          v19 = 0;
        v14 = *v13;
        goto LABEL_14;
      }
LABEL_15:
      ++v12;
      v11 += 16;
    }
    while (v12 < *v9);
    v2 = *(unsigned __int16 *)(a2 + 16);
LABEL_17:
    ++v5;
  }
  while (v5 < v2);
  return result;
}

uint64_t hlp_CallDepesFunc(uint64_t *a1)
{
  int i;
  unsigned __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, const char *, _QWORD);
  const char *v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  const char *v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  char *v38;
  const char *v39;
  size_t v40;
  __int16 v41;
  unsigned __int16 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  unsigned int v55;
  int v56;
  unsigned __int16 v57;
  uint64_t v58;
  char *__s;
  char __dst[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v58 = 0;
  __s = 0;
  v57 = 0;
  cstdlib_strcpy((char *)a1[19], "");
  cstdlib_strcpy((char *)a1[21], "");
  for (i = 0; ; ++i)
  {
    cstdlib_strcpy(__dst, "cross_token");
    v3 = cstdlib_strlen(__dst);
    v4 = (unsigned __int16)i;
    if ((_WORD)i)
    {
      cstdlib_strcat((char *)a1[19], " ");
      cstdlib_strcat((char *)a1[21], " ");
    }
    v5 = a1[13];
    v6 = (unsigned __int16)i;
    v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)i);
    if (*(_BYTE *)(v5 + (unsigned __int16)i))
    {
      v8 = (unsigned __int16)i;
      while ((v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) && v7 != 95)
      {
        v8 = (unsigned __int16)++i;
        v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)i);
        if (!*(_BYTE *)(v5 + (unsigned __int16)i))
        {
          v56 = 1;
          goto LABEL_12;
        }
      }
      v56 = 0;
LABEL_12:
      v9 = (unsigned __int16)i;
    }
    else
    {
      v56 = 1;
      v9 = (unsigned __int16)i;
      v8 = (unsigned __int16)i;
    }
    *(_BYTE *)(v5 + v8) = 0;
    v10 = Utf8_LengthInUtf8chars(a1[13], v9);
    v11 = Utf8_LengthInUtf8chars(a1[13], v4);
    *(_BYTE *)(a1[14] + v10) = 0;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s L1: %s", v12, v13, v14, (uint64_t)__dst);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, const char *, _QWORD))(a1[9] + 120);
    v16 = (const char *)(a1[13] + v6);
    v17 = cstdlib_strlen(v16);
    v18 = v15(a1[7], a1[8], 0, v16, v17);
    if ((v18 & 0x80000000) != 0)
      return v18;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s L2: %s", v19, v20, v21, (uint64_t)__dst);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(a1[9] + 120);
    v23 = (const char *)(a1[14] + v11);
    v24 = cstdlib_strlen(v23);
    v18 = v22(a1[7], a1[8], 1, v23, v24);
    if ((v18 & 0x80000000) != 0)
      return v18;
    if (((*(uint64_t (**)(uint64_t, uint64_t, char *))(a1[9] + 80))(a1[7], a1[8], __dst) & 0x80000000) != 0)
    {
      __dst[v3] = 0;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a1[9] + 80))(a1[7], a1[8], __dst);
      if ((v18 & 0x80000000) != 0)
        return v18;
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char **, unsigned __int16 *))(a1[9] + 128))(a1[7], a1[8], 0, &__s, &v57);
    if ((v18 & 0x80000000) != 0)
      return v18;
    __s[v57] = 0;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s O1: %s", v25, v26, v27, (uint64_t)__dst);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(a1[9] + 128))(a1[7], a1[8], 1, &v58, &v57);
    if ((v31 & 0x80000000) != 0)
      return v31;
    *(_BYTE *)(v58 + v57) = 0;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%s O2: %s", v28, v29, v30, (uint64_t)__dst);
    if (cstdlib_strlen(__s))
    {
      v32 = 0;
      v33 = 0;
      do
      {
        v34 = &__s[v32];
        if (__s[v32] == 126)
        {
          v35 = &__s[v32 + 1];
          v36 = cstdlib_strlen(v35);
          cstdlib_memmove(v34, v35, v36 + 1);
          --v33;
        }
        else
        {
          v37 = cstdlib_strlen("¡");
          if (!cstdlib_strncmp(v34, "¡", v37))
          {
            v38 = &__s[(unsigned __int16)v33 + 1];
            v39 = &__s[(unsigned __int16)v33 + 2];
            v40 = cstdlib_strlen(v39);
            cstdlib_memmove(v38, v39, v40 + 1);
            __s[v32] = 126;
          }
        }
        v32 = (unsigned __int16)++v33;
      }
      while (cstdlib_strlen(__s) > (unsigned __int16)v33);
    }
    v41 = cstdlib_strlen((const char *)a1[19]);
    v42 = v41 + cstdlib_strlen(__s) + 2;
    v43 = (char *)a1[19];
    if (v42 >= 0x81u)
      break;
LABEL_30:
    cstdlib_strcat(v43, __s);
    v49 = 0;
    v50 = v58;
    while (1)
    {
      v51 = v49;
      v52 = *(unsigned __int8 *)(v58 + v49);
      if (v52 != 32 && v52 != 126)
        break;
      ++v49;
    }
    if (*(_BYTE *)(v58 + v49))
    {
      while (v52 != 32 && v52 != 126)
        LOBYTE(v52) = *(_BYTE *)(v58 + ++v49);
      *(_BYTE *)(v58 + v49) = 0;
      v50 = v58;
    }
    if (cstdlib_strcmp((const char *)(v50 + v51), ""))
      v53 = (const char *)(v58 + v51);
    else
      v53 = "*";
    cstdlib_strcat((char *)a1[21], v53);
    if (v56)
      return v31;
  }
  v44 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[19], v42);
  if (v44)
  {
    v43 = (char *)v44;
    a1[19] = v44;
    goto LABEL_30;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v45, v46, v47, v48, v55);
  return 2314215434;
}

uint64_t hlp_AppendPhon(uint64_t a1, char *a2, char *__s, uint64_t a4)
{
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  __int16 v26;
  __int16 v27;
  int v28;
  __int16 v29;
  char *v30;
  const char *v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  signed int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v46;

  if (cstdlib_strlen(__s) >= 2 && !cstdlib_strchr(__s, 32))
    __s[1] = 0;
  if (cstdlib_strlen((const char *)a4) >= 2 && !cstdlib_strchr((char *)a4, 32))
    *(_BYTE *)(a4 + 1) = 0;
  if (cstdlib_strcmp(a2, ""))
  {
    v8 = cstdlib_strlen(*(const char **)(a1 + 152));
    v9 = v8 + cstdlib_strlen(a2) + 7;
    if (v9 >= 0x81u)
    {
      v10 = v9;
      v11 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 152), v9);
      if (!v11
        || (*(_QWORD *)(a1 + 152) = v11,
            (v16 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), v10)) == 0))
      {
        v44 = 2314215434;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v12, v13, v14, v15, v46);
        return v44;
      }
      *(_QWORD *)(a1 + 168) = v16;
    }
    cstdlib_strcat(*(char **)(a1 + 152), "◄");
    cstdlib_strcat(*(char **)(a1 + 168), " ");
    v17 = cstdlib_strstr(a2, "◄");
    if (cstdlib_strchr(__s, 32) || !v17)
    {
      cstdlib_strcat(*(char **)(a1 + 152), a2);
      cstdlib_strcat(*(char **)(a1 + 168), (const char *)a4);
      v41 = cstdlib_strlen(a2);
      v42 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, v41);
      if (v42 > (unsigned __int16)cstdlib_strlen((const char *)a4))
      {
        v43 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 168), "~");
          ++v43;
        }
        while ((int)(v42 - (unsigned __int16)cstdlib_strlen((const char *)a4)) > (unsigned __int16)v43);
      }
    }
    else
    {
      v18 = cstdlib_strlen("◄");
      v19 = cstdlib_strstr(&v17[v18], "◄");
      if (!v19)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v20, v21, v22, v23, v46);
        return 2314215431;
      }
      v24 = v19;
      v25 = *(char **)(a1 + 152);
      v26 = cstdlib_strlen("◄");
      cstdlib_strncat(v25, a2, (unsigned __int16)(v26 + (_WORD)v17 - (_WORD)a2));
      v27 = cstdlib_strlen("◄");
      if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v17 - (int)a2 + v27))
      {
        v28 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 168), " ");
          ++v28;
          v29 = cstdlib_strlen("◄");
        }
        while ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v17 - (int)a2 + v29) > (unsigned __int16)v28);
      }
      v30 = *(char **)(a1 + 152);
      v31 = &v17[(__int16)cstdlib_strlen("◄")];
      v32 = cstdlib_strlen("◄");
      cstdlib_strncat(v30, v31, (unsigned __int16)((_WORD)v24 - (_WORD)v17 - v32));
      cstdlib_strcat(*(char **)(a1 + 168), (const char *)a4);
      v33 = Utf8_LengthInUtf8chars((unint64_t)v17, (int)v24 - (int)v17);
      if (~(__int16)cstdlib_strlen((const char *)a4) + v33 >= 1)
      {
        v34 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 168), "~");
          ++v34;
        }
        while (v33 + ~(__int16)cstdlib_strlen((const char *)a4) > (__int16)v34);
      }
      cstdlib_strcat(*(char **)(a1 + 152), v24);
      v35 = (_DWORD)v24 - (_DWORD)a2;
      v36 = cstdlib_strlen(a2);
      v37 = Utf8_LengthInUtf8chars((unint64_t)a2, v36) << 16;
      if (v37 > (int)(Utf8_LengthInUtf8chars((unint64_t)a2, v35) << 16))
      {
        v38 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 168), " ");
          ++v38;
          v39 = cstdlib_strlen(a2);
          v40 = (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, v39);
        }
        while (v40 - (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, v35) > (__int16)v38);
      }
    }
    cstdlib_strcat(*(char **)(a1 + 152), "◄");
    cstdlib_strcat(*(char **)(a1 + 168), " ");
  }
  return 0;
}

uint64_t hlp_ProcessNTokens(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t appended;
  __int16 v19;
  unsigned __int16 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  const char *v32;
  size_t v33;
  uint64_t v34;
  const char *v35;
  void *v37;
  size_t v38;
  void *v39;
  size_t v40;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;

  cstdlib_strcpy((char *)a1[19], "");
  cstdlib_strcpy((char *)a1[21], "");
  v8 = *(unsigned __int16 *)(a2 + 16);
  if (*(_WORD *)(a2 + 16))
  {
    v9 = 0;
    v44 = a4;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v10 + (v9 << 6);
      if (*(unsigned __int16 *)(v11 + 8) >= a3 && *(unsigned __int16 *)(v11 + 10) <= a4)
      {
        v12 = v10 + (v9 << 6);
        v13 = (unsigned __int16 *)(v12 + 56);
        if (*(_WORD *)(v12 + 56))
          break;
      }
LABEL_10:
      if (++v9 >= (unint64_t)v8)
        goto LABEL_11;
    }
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)(v12 + 48);
    while (1)
    {
      v17 = *(_QWORD *)(*v16 + v14) + 56 * *(unsigned __int16 *)(*v16 + v14 + 12);
      cstdlib_strcpy((char *)a1[22], *(const char **)(v17 + 32));
      appended = hlp_AppendPhon((uint64_t)a1, *(char **)v17, *(char **)(v17 + 16), *(_QWORD *)(v17 + 24));
      if ((appended & 0x80000000) != 0)
        return appended;
      ++v15;
      v14 += 16;
      if (v15 >= *v13)
      {
        v8 = *(unsigned __int16 *)(a2 + 16);
        a4 = v44;
        goto LABEL_10;
      }
    }
  }
LABEL_11:
  v19 = cstdlib_strlen("¡");
  v20 = cstdlib_strlen((const char *)a1[19]) * v19 + 1;
  v21 = (char *)a1[13];
  if (!v21 || *((unsigned __int16 *)a1 + 60) < v20)
  {
    v22 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[13], v20);
    if (!v22)
      goto LABEL_31;
    v21 = (char *)v22;
    a1[13] = v22;
    a1[15] = v20;
  }
  v27 = a1[14];
  if (v27 && *((unsigned __int16 *)a1 + 64) >= v20)
    goto LABEL_19;
  v28 = heap_Realloc(*(uint64_t **)(*a1 + 8), v27, v20);
  if (!v28)
  {
LABEL_31:
    v42 = 2314215434;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v23, v24, v25, v26, v43);
    return v42;
  }
  a1[14] = v28;
  a1[16] = v20;
  v21 = (char *)a1[13];
LABEL_19:
  cstdlib_strcpy(v21, (const char *)a1[19]);
  cstdlib_strcpy((char *)a1[14], (const char *)a1[21]);
  if (cstdlib_strlen((const char *)a1[13]))
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = (const char *)(a1[13] + v29);
      v33 = cstdlib_strlen("◄");
      if (cstdlib_strncmp(v32, "◄", v33))
      {
        v34 = a1[13];
        v35 = (const char *)(v34 + v29);
        if (*(_BYTE *)(v34 + v29) == 126 && v30)
        {
          v37 = (void *)(v29 + v34 + 1);
          v38 = cstdlib_strlen(v35);
          cstdlib_memmove(v37, v35, v38 + 1);
          v39 = (void *)(a1[13] + v29);
          v40 = cstdlib_strlen("¡");
          cstdlib_memcpy(v39, "¡", v40);
          v30 = 1;
        }
      }
      else
      {
        v30 = !v30;
      }
      v29 = (unsigned __int16)++v31;
    }
    while (cstdlib_strlen((const char *)a1[13]) > (unsigned __int16)v31);
  }
  return hlp_CallDepesFunc(a1);
}

uint64_t stat_hmogrph_updateLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *);
  uint64_t v28;
  const char *v29;
  __int16 v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  uint64_t v40;
  __int16 v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  unsigned __int16 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  const char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, __int16 *);
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  char *v83;
  __int16 v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *);
  const char *v90;
  __int16 v91;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__s1;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  unsigned __int16 v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned __int16 v116;
  __int16 v117;
  char *__src;
  __int16 v119;
  int v120;
  char *__s[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _WORD v137[36];
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  v116 = 0;
  v114 = 0;
  v115 = 0;
  v112 = 0;
  v113 = 0;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  memset(v137, 0, 64);
  v108 = 0;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v126 = 0u;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  *(_OWORD *)__s = 0u;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v116);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a2 + 184))(a3, a4, v116, 0, &v112);
  if ((v13 & 0x80000000) == 0)
  {
    v106 = a6;
    if ((unsigned __int16)v112 == 1)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(a2 + 176))(a3, a4, v116, 0, &v109, &v113);
      if ((v13 & 0x80000000) == 0 && (unsigned __int16)v113 >= 2u)
      {
        updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 2, v116, (char *)&v115 + 2);
        if ((updated & 0x80000000) != 0)
          goto LABEL_124;
        v107 = 0;
        v15 = 0;
        v16 = 0;
        while (1)
        {
          if (!HIWORD(v115))
          {
            v79 = v137[0];
            if (!v137[0])
              goto LABEL_119;
            if (v111 != 4 || v107 != 0)
              goto LABEL_118;
            v81 = v108;
            if (!v108)
              goto LABEL_118;
            if (v108 == 1)
            {
              v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(a2 + 160);
              v83 = __s[0];
              v84 = cstdlib_strlen(__s[0]);
              updated = v82(a3, a4, v79, 3, (unsigned __int16)(v84 + 1), v83, (char *)&v112 + 2);
              if ((updated & 0x80000000) != 0)
                goto LABEL_124;
LABEL_118:
              hlp_freeWordPhoneList((_QWORD *)a5, &v108, (uint64_t)v137, (uint64_t)__s);
LABEL_119:
              if (*(_DWORD *)(a1 + 144))
              {
                updated = hlp_updateLingdb_process_skipcrosstoekn_cleanup(a1, a2, a3, a4, v116);
                if ((updated & 0x80000000) != 0)
                  goto LABEL_124;
              }
              updated = hlp_updateLingdb_delete_duplicated_words(*(_QWORD *)a1, a2, a3, a4, a5, v116, *(_DWORD *)(a1 + 384), v106);
              if ((updated & 0x80000000) != 0)
                goto LABEL_124;
              v13 = stat_hmogrph_selectSubOrWholeRcd(a1, a2, a3, a4, (uint64_t *)a5);
              if ((v13 & 0x80000000) == 0)
                goto LABEL_125;
              return v13;
            }
            v97 = a1;
            v85 = 0;
            v86 = 0;
            v87 = 10000;
            while (1)
            {
              updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, (unsigned __int16)v137[v85], 7, 1, (char *)&v113 + 2, &v113);
              if ((updated & 0x80000000) != 0)
                break;
              if (HIWORD(v113) < v87)
              {
                v87 = HIWORD(v113);
                v86 = v85;
              }
              if (v81 == ++v85)
              {
                v88 = (unsigned __int16)v137[v86];
                v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *))(a2 + 160);
                v90 = __s[v86];
                v91 = cstdlib_strlen(v90);
                updated = v89(a3, a4, v88, 3, (unsigned __int16)(v91 + 1), v90, (char *)&v112 + 2);
                a1 = v97;
                if ((updated & 0x80000000) != 0)
                  break;
                goto LABEL_118;
              }
            }
LABEL_124:
            v13 = updated;
LABEL_125:
            hlp_freeWordPhoneList((_QWORD *)a5, &v108, (uint64_t)v137, (uint64_t)__s);
            return v13;
          }
          updated = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
          if ((updated & 0x80000000) != 0)
            goto LABEL_124;
          updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v115), 1, 1, (char *)&v114 + 2, &v113);
          if ((updated & 0x80000000) != 0)
            goto LABEL_124;
          updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v115), 2, 1, &v114, &v113);
          if ((updated & 0x80000000) != 0)
            goto LABEL_124;
          if (HIWORD(v114) > (unsigned __int16)v114)
          {
            v13 = 2314223281;
            goto LABEL_125;
          }
          if (HIWORD(v114) == (unsigned __int16)v15 && (unsigned __int16)v114 == (unsigned __int16)v16)
          {
            v17 = v111;
            if (v111 == 4)
              goto LABEL_33;
          }
          updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 136))(a3, a4, HIWORD(v115), &v115);
          if ((updated & 0x80000000) != 0)
            goto LABEL_124;
          if ((_WORD)v115)
          {
            updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 168))(a3, a4);
            if ((updated & 0x80000000) != 0)
              goto LABEL_124;
          }
          if (v110 == 4 && !v107)
          {
            v18 = v108;
            if (v108)
            {
              v101 = v16;
              if (v108 != 1)
              {
                v103 = v15;
                v23 = a1;
                v24 = 0;
                v25 = 0;
                v26 = 10000;
                while (1)
                {
                  updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, (unsigned __int16)v137[v24], 7, 1, (char *)&v113 + 2, &v113);
                  if ((updated & 0x80000000) != 0)
                    goto LABEL_124;
                  if (HIWORD(v113) < v26)
                  {
                    v26 = HIWORD(v113);
                    v25 = v24;
                  }
                  if (v18 == ++v24)
                  {
                    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *))(a2 + 160);
                    v28 = (unsigned __int16)v137[v25];
                    v29 = __s[v25];
                    v30 = cstdlib_strlen(v29);
                    updated = v27(a3, a4, v28, 3, (unsigned __int16)(v30 + 1), v29, (char *)&v112 + 2);
                    a1 = v23;
                    v16 = v101;
                    v15 = v103;
                    if ((updated & 0x80000000) != 0)
                      goto LABEL_124;
                    goto LABEL_31;
                  }
                }
              }
              v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(a2 + 160);
              v20 = v137[0];
              v21 = __s[0];
              v22 = cstdlib_strlen(__s[0]);
              updated = v19(a3, a4, v20, 3, (unsigned __int16)(v22 + 1), v21, (char *)&v112 + 2);
              v16 = v101;
              if ((updated & 0x80000000) != 0)
                goto LABEL_124;
            }
          }
LABEL_31:
          hlp_freeWordPhoneList((_QWORD *)a5, &v108, (uint64_t)v137, (uint64_t)__s);
          v17 = v111;
          if (v111 <= 0xA && ((1 << v111) & 0x610) != 0)
          {
LABEL_33:
            v31 = HIWORD(v114) != (unsigned __int16)v15 || (unsigned __int16)v114 != (unsigned __int16)v16;
            v32 = v107;
            if (HIWORD(v114) != (unsigned __int16)v15 || (unsigned __int16)v114 != (unsigned __int16)v16)
              v32 = 0;
            v107 = v32;
            if (HIWORD(v114) != (unsigned __int16)v15 || (unsigned __int16)v114 != (unsigned __int16)v16)
              v15 = HIWORD(v114);
            if (v31)
              v16 = (unsigned __int16)v114;
            if (v17 == 9)
            {
              updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 48) + 136))(a3, a4, HIWORD(v115), &v115);
              if ((updated & 0x80000000) != 0)
                goto LABEL_124;
              if ((_WORD)v115)
              {
                updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 168))(a3, a4);
                if ((updated & 0x80000000) != 0)
                  goto LABEL_124;
              }
            }
            if (!*(_DWORD *)(a1 + 144) || v111 != 9 || v110 != 17)
            {
              v99 = (unsigned __int16)v114;
              v100 = HIWORD(v114);
              v45 = v108;
              v120 = 0;
              v119 = 0;
              __src = 0;
              v117 = 0;
              v105 = HIWORD(v115);
              v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(a3, a4);
              if ((v13 & 0x80000000) != 0 || !v117)
                goto LABEL_95;
              updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a2 + 176))(a3, a4, v105, 3, &__src, &v120);
              if ((updated & 0x80000000) != 0)
                goto LABEL_124;
              v117 = 0;
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 184))(a3, a4, v105, 7, &v117);
              if ((v13 & 0x80000000) != 0 || !v117)
                goto LABEL_95;
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, v105, 7, 1, (char *)&v120 + 2, &v120);
              if ((v13 & 0x80000000) != 0)
                goto LABEL_125;
              v46 = cstdlib_strlen(__src);
              v47 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a5 + 8), 1, v46 + 1);
              __s[v45] = v47;
              if (!v47)
              {
LABEL_127:
                v13 = 2314215434;
                log_OutPublic(*(_QWORD *)(*(_QWORD *)a5 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v48, v49, v50, v51, v93);
                goto LABEL_125;
              }
              cstdlib_strcpy(v47, __src);
              v52 = *(unsigned __int16 *)(a5 + 16);
              if (*(_WORD *)(a5 + 16))
              {
                v53 = (_WORD *)(*(_QWORD *)(a5 + 8) + 56);
                while ((unsigned __int16)*(v53 - 24) != (_DWORD)v100 || (unsigned __int16)*(v53 - 23) != v99)
                {
                  v53 += 32;
                  if (!--v52)
                    goto LABEL_95;
                }
                v94 = v45;
                v95 = a5;
                v102 = v16;
                v104 = v15;
                v96 = a1;
                if (*v53)
                {
                  v54 = 0;
                  v55 = 0;
                  v56 = 0;
                  do
                  {
                    v57 = (uint64_t *)(*((_QWORD *)v53 - 1) + v54);
                    v58 = *((unsigned __int16 *)v57 + 6);
                    v59 = *((unsigned __int16 *)v57 + 4);
                    if (v59 <= v58)
                      LOWORD(v58) = v59 - 1;
                    v60 = *v57;
                    v61 = 56 * (unsigned __int16)v58;
                    v56 += cstdlib_strlen(*(const char **)(*v57 + v61));
                    if (cstdlib_strlen(*(const char **)(v60 + v61)))
                      ++v56;
                    ++v55;
                    v54 += 16;
                  }
                  while (v55 < (unsigned __int16)*v53);
                }
                else
                {
                  LOWORD(v56) = 0;
                }
                a5 = v95;
                v62 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v95 + 8), 1, (unsigned __int16)v56 + 1);
                if (!v62)
                  goto LABEL_127;
                __s1 = v62;
                cstdlib_strcpy(v62, "");
                if (*v53)
                {
                  v63 = 0;
                  v64 = 0;
                  do
                  {
                    v65 = *((_QWORD *)v53 - 1) + v63;
                    v66 = *(unsigned __int16 *)(v65 + 12);
                    v67 = *(unsigned __int16 *)(v65 + 8);
                    if (v67 <= v66)
                      LOWORD(v66) = v67 - 1;
                    v68 = (const char **)(*(_QWORD *)v65 + 56 * (unsigned __int16)v66);
                    cstdlib_strcat(__s1, *v68);
                    if (cstdlib_strlen(*v68) && (_DWORD)v64 != (unsigned __int16)*v53 - 1)
                    {
                      if (cstdlib_strstr((char *)*v68, "{SEP"))
                        LOWORD(v56) = v56 - 1;
                      else
                        cstdlib_strcat(__s1, ".");
                    }
                    v15 = v104;
                    ++v64;
                    v63 += 16;
                  }
                  while (v64 < (unsigned __int16)*v53);
                }
                else
                {
                  v15 = v104;
                }
                if ((unsigned __int16)v56 >= 2u)
                  __s1[(unsigned __int16)v56 - 1] = 0;
                a1 = v96;
                v16 = v102;
                if (cstdlib_strcmp(__s1, __src) | v107)
                {
                  v73 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, __int16 *))(a2 + 160);
                  v74 = cstdlib_strlen("DELETED");
                  v13 = v73(a3, a4, v105, 3, (unsigned __int16)(v74 + 1), "DELETED", &v119);
                  v78 = *(_QWORD *)v95;
                  if ((v13 & 0x80000000) != 0)
                  {
                    heap_Free(*(_QWORD **)(v78 + 8), (uint64_t)__s1);
                    goto LABEL_125;
                  }
                  log_OutText(*(_QWORD *)(v78 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"DELETED: from %d to %d, orth %s with phon %s and priority %d", v75, v76, v77, v100);
                  v45 = v94;
                  v72 = (uint64_t)__s1;
                }
                else
                {
                  log_OutText(*(_QWORD *)(*(_QWORD *)v95 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"from %d to %d, orth %s, disambiguated phon %s, priority %d", v69, v70, v71, v100);
                  v107 = 1;
                  v72 = (uint64_t)__s1;
                  v45 = v94;
                }
                heap_Free(*(_QWORD **)(*(_QWORD *)v95 + 8), v72);
LABEL_95:
                if ((v13 & 0x80000000) != 0)
                  goto LABEL_125;
              }
              v137[v45] = HIWORD(v115);
              v108 = v45 + 1;
              goto LABEL_97;
            }
            updated = hlp_ProcessNTokens((uint64_t *)a1, a5, HIWORD(v114), (unsigned __int16)v114);
            if ((updated & 0x80000000) != 0)
              goto LABEL_124;
            v33 = a5;
            v34 = v16;
            v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 160);
            v36 = HIWORD(v115);
            v37 = cstdlib_strlen(*(const char **)(a1 + 152));
            v38 = v35(a3, a4, v36, 3, (unsigned __int16)(v37 + 1), *(_QWORD *)(a1 + 152), (char *)&v112 + 2);
            if ((v38 & 0x80000000) != 0
              || (v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 160),
                  v40 = HIWORD(v115),
                  v41 = cstdlib_strlen(*(const char **)(a1 + 168)),
                  v38 = v39(a3, a4, v40, 6, (unsigned __int16)(v41 + 1), *(_QWORD *)(a1 + 168), (char *)&v112 + 2),
                  (v38 & 0x80000000) != 0)
              || (HIWORD(v113) = 4,
                  v38 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 48) + 160))(a3, a4, HIWORD(v115), 7, 1, (char *)&v113 + 2, (char *)&v112 + 2), (v38 & 0x80000000) != 0))
            {
              v13 = v38;
              a5 = v33;
              goto LABEL_125;
            }
            v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 160);
            v43 = HIWORD(v115);
            v44 = cstdlib_strlen(*(const char **)(a1 + 176));
            updated = v42(a3, a4, v43, 9, (unsigned __int16)(v44 + 1), *(_QWORD *)(a1 + 176), (char *)&v112 + 2);
            v16 = v34;
            a5 = v33;
            if ((updated & 0x80000000) != 0)
              goto LABEL_124;
          }
LABEL_97:
          updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, HIWORD(v115), (char *)&v115 + 2);
          if ((updated & 0x80000000) != 0)
            goto LABEL_124;
        }
      }
    }
  }
  return v13;
}

_QWORD *hlp_freeWordPhoneList(_QWORD *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;

  v7 = result;
  for (i = 0; i != 32; ++i)
  {
    if (*(_WORD *)(a3 + 2 * i))
      *(_WORD *)(a3 + 2 * i) = 0;
    v9 = *(_QWORD *)(a4 + 8 * i);
    if (v9)
    {
      result = heap_Free(*(_QWORD **)(*v7 + 8), v9);
      *(_QWORD *)(a4 + 8 * i) = 0;
    }
  }
  *a2 = 0;
  return result;
}

uint64_t hlp_updateLingdb_process_skipcrosstoekn_cleanup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  v15 = 0;
  v16 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, a5, (char *)&v16 + 2);
  if ((result & 0x80000000) == 0)
  {
    v11 = HIWORD(v16);
    if (HIWORD(v16))
    {
      v12 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a2 + 168))(a3, a4, v11, 0, 1, &v15, &v16);
        if ((result & 0x80000000) != 0)
          break;
        if (v15 == 17)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 192))(a3, a4, HIWORD(v16));
          if ((result & 0x80000000) != 0)
            return result;
          HIWORD(v16) = v12;
          v13 = v12;
        }
        else
        {
          v13 = HIWORD(v16);
        }
        v14 = *(_QWORD *)(a1 + 48);
        if ((_WORD)v13)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v14 + 120))(a3, a4, (unsigned __int16)v13, (char *)&v16 + 2);
          v12 = v13;
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v14 + 104))(a3, a4, 2, a5, (char *)&v16 + 2);
          if ((result & 0x80000000) != 0)
            return result;
        }
        v11 = HIWORD(v16);
      }
      while (HIWORD(v16));
    }
  }
  return result;
}

uint64_t hlp_updateLingdb_delete_duplicated_words(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t updated;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v24;
  __int16 v25;
  int v26;
  int v27;
  char *__s1;

  __s1 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v24 = 0;
  updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, a6, (char *)&v26 + 2);
  if ((updated & 0x80000000) == 0)
  {
    v15 = HIWORD(v26);
    if (HIWORD(v26))
    {
      v16 = 0;
      do
      {
        updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a2 + 120))(a3, a4, v15, &v26);
        if ((updated & 0x80000000) != 0)
          break;
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(a2 + 168))(a3, a4, HIWORD(v26), 0, 1, &v24, &v25);
        if (v24 <= 0xA && ((1 << v24) & 0x610) != 0)
        {
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a2 + 168))(a3, a4, HIWORD(v26), 1, 1, (char *)&v27 + 2, &v25);
          if ((v18 & 0x80000000) != 0)
            return v18;
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(a2 + 168))(a3, a4, HIWORD(v26), 2, 1, &v27, &v25);
          if ((v18 & 0x80000000) != 0)
            return v18;
          updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a2 + 176))(a3, a4, HIWORD(v26), 3, &__s1, &v25);
          if ((updated & 0x80000000) != 0)
            return updated;
          if (cstdlib_strcmp(__s1, "DELETED"))
          {
            if (a7)
            {
              updated = updateNLUNE(a1, a3, a4, a2, HIWORD(v26), v16, a8);
              if ((updated & 0x80000000) != 0)
                return updated;
              ++v16;
            }
          }
          else
          {
            updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 192))(a3, a4, HIWORD(v26));
            if ((updated & 0x80000000) != 0)
              return updated;
            log_OutText(*(_QWORD *)(*(_QWORD *)a5 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"delete a word record from pos %d to pos %d", v19, v20, v21, HIWORD(v27));
          }
        }
        v15 = v26;
        HIWORD(v26) = v26;
      }
      while ((_WORD)v26);
    }
  }
  return updated;
}

uint64_t stat_hmogrph_selectSubOrWholeRcd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int isSubWordRec;
  unsigned __int16 *v15;
  unsigned int v16;
  int v17;
  int hasSubWordWithGivenTn;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  size_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _WORD *v61;
  __int16 v62;
  unsigned int v63;
  _WORD *v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  unsigned int v69;
  void *__dst;
  uint64_t v71;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char *__s;
  unsigned __int16 v84;

  v5 = 0;
  v78 = 0;
  if (a2 && a5)
  {
    v79 = 0;
    v7 = a5 + 1;
    if (*((_WORD *)a5 + 8))
    {
      v8 = 0;
      for (i = 0; i < *((unsigned __int16 *)a5 + 8); ++i)
      {
        v10 = *v7;
        v11 = *v7 + v8;
        v12 = *(const char **)(v11 + 24);
        if (!cstdlib_strcmp(v12, ""))
        {
          if (stat_hmogrph_isSubWordRec((uint64_t)(a5 + 1), (unsigned __int16)i))
            *(_DWORD *)(v11 + 32) = 1;
          else
            *(_DWORD *)(v11 + 32) = 0;
          goto LABEL_22;
        }
        v13 = cstdlib_strcmp(v12, "poi");
        isSubWordRec = stat_hmogrph_isSubWordRec((uint64_t)(a5 + 1), (unsigned __int16)i);
        if (v13)
        {
          if (!isSubWordRec)
          {
            if (hlp_hasRcdWithGivenPOIClass(v11, *(char **)(v11 + 24)))
              goto LABEL_15;
            if (stat_hmogrph_hasSubWordWithGivenTn((uint64_t)(a5 + 1), (unsigned __int16)i, *(char **)(v11 + 24)))
            {
              *(_DWORD *)(v10 + v8 + 32) = 1;
              v15 = (unsigned __int16 *)(a5 + 1);
              v16 = (unsigned __int16)i;
              goto LABEL_20;
            }
LABEL_14:
            if (hlp_hasRcdWithGivenPOIClass(v11, "poi"))
            {
LABEL_15:
              *(_DWORD *)(v10 + v8 + 32) = 0;
              v16 = (unsigned __int16)i;
              v15 = (unsigned __int16 *)(a5 + 1);
              goto LABEL_16;
            }
            hasSubWordWithGivenTn = stat_hmogrph_hasSubWordWithGivenTn((uint64_t)(a5 + 1), (unsigned __int16)i, "poi");
            v19 = v10 + v8;
            if (hasSubWordWithGivenTn)
            {
              *(_DWORD *)(v19 + 32) = 1;
              v15 = (unsigned __int16 *)(a5 + 1);
              v16 = (unsigned __int16)i;
LABEL_20:
              v17 = 0;
            }
            else
            {
              *(_DWORD *)(v19 + 32) = 0;
              v15 = (unsigned __int16 *)(a5 + 1);
              v16 = (unsigned __int16)i;
LABEL_16:
              v17 = 1;
            }
            stat_hmogrph_setWillBeDeleteOfSubWords(v15, v16, v17);
          }
        }
        else if (!isSubWordRec)
        {
          goto LABEL_14;
        }
LABEL_22:
        v8 += 64;
      }
    }
    v76 = 0;
    v77 = 0;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v77 + 2);
    if ((v20 & 0x80000000) != 0)
    {
      return v20;
    }
    else
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a2 + 104))(a3, a4, 2, HIWORD(v77), &v77);
      if ((v5 & 0x80000000) == 0)
      {
        v21 = v77;
        if ((_WORD)v77)
        {
          do
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, v21, (char *)&v76 + 2);
            if ((v20 & 0x80000000) != 0)
              return v20;
            v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a2 + 168))(a3, a4, (unsigned __int16)v77, 0, 1, &v79, &v76);
            if ((v5 & 0x80000000) != 0)
              return v5;
            if (v79 == 4
              || (v79 == 9 ? (v22 = *(_DWORD *)(a1 + 144) == 0) : (v22 = 0),
                  !v22 ? (v23 = 0) : (v23 = 1),
                  v79 == 10 || v23))
            {
              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, (unsigned __int16)v77, 1, 1, (char *)&v78 + 2, &v76);
              if ((v20 & 0x80000000) != 0)
                return v20;
              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, (unsigned __int16)v77, 2, 1, &v78, &v76);
              if ((v20 & 0x80000000) != 0)
                return v20;
              if (!*((_WORD *)a5 + 8))
              {
LABEL_106:
                v5 = 2314215424;
                log_OutText(*(_QWORD *)(*a5 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"cant find lingdb word : no word found with pos=%d,%d", v24, v25, v26, HIWORD(v78));
                return v5;
              }
              v27 = 0;
              v28 = *v7;
              v29 = 32;
              while (__PAIR64__(*(unsigned __int16 *)(v28 + v29 - 22), *(unsigned __int16 *)(v28 + v29 - 24)) != __PAIR64__((unsigned __int16)v78, HIWORD(v78)))
              {
                ++v27;
                v29 += 64;
                if (*((unsigned __int16 *)a5 + 8) == v27)
                  goto LABEL_106;
              }
              if (*(_DWORD *)(v28 + v29) != 1)
                goto LABEL_102;
              v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 192))(a3, a4, (unsigned __int16)v77);
              if ((v5 & 0x80000000) != 0)
                return v5;
              log_OutText(*(_QWORD *)(*a5 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"Due to POI priority, delete a word record from pos %d to pos %d", v30, v31, v32, HIWORD(v78));
              v33 = a5[1];
              if (*(_DWORD *)(v33 + v29) != 1
                || stat_hmogrph_isSubWordRec((uint64_t)(a5 + 1), (unsigned __int16)v27))
              {
                goto LABEL_103;
              }
              if (*((_WORD *)a5 + 8))
              {
                v34 = 0;
                v5 = 0;
                v35 = v33 + v29;
                v36 = a2;
                v71 = v35;
                do
                {
                  if (v27 != v34)
                  {
                    v37 = *v7 + (v34 << 6);
                    if (*(unsigned __int16 *)(v35 - 24) <= *(unsigned __int16 *)(v37 + 8))
                    {
                      v38 = *(unsigned __int16 *)(v37 + 10);
                      if (*(unsigned __int16 *)(v35 - 22) > v38)
                      {
                        v39 = *a5;
                        v84 = 0;
                        v82 = 0;
                        __s = 0;
                        HIWORD(v81) = 0;
                        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v36 + 104))(a3, a4, 1, 0, &v84);
                        if ((v20 & 0x80000000) != 0)
                          return v20;
                        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v36 + 184))(a3, a4, v84, 0, (char *)&v82 + 2);
                        if ((v5 & 0x80000000) != 0
                          || HIWORD(v82) != 1
                          || (v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(v36 + 176))(a3, a4, v84, 0, &__s, &v82), (v5 & 0x80000000) != 0)|| (unsigned __int16)v82 < 2u)
                        {
                          if ((v5 & 0x80000000) != 0)
                            return v5;
                        }
                        else
                        {
                          v40 = *(_QWORD **)(v39 + 8);
                          v41 = cstdlib_strlen(__s);
                          v42 = (char *)heap_Calloc(v40, 1, v41 + 2);
                          if (!v42)
                          {
                            log_OutPublic(*(_QWORD *)(v39 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v43, v44, v45, v46, v69);
                            return 2314215434;
                          }
                          v47 = v42;
                          cstdlib_strcpy(v42, __s);
                          v48 = cstdlib_strlen(&v47[v38]);
                          cstdlib_memmove((void *)&v47[v38 + 1], &v47[v38], v48 + 1);
                          v47[v38] = 32;
                          __dst = *(void **)(a2 + 160);
                          v49 = v84;
                          v50 = cstdlib_strlen(v47);
                          v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, char *))__dst)(a3, a4, v49, 0, (unsigned __int16)(v50 + 1), v47, (char *)&v81 + 2);
                          if ((v20 & 0x80000000) != 0)
                            return v20;
                          heap_Free(*(_QWORD **)(v39 + 8), (uint64_t)v47);
                        }
                        v82 = 0;
                        LODWORD(__s) = 0;
                        v84 = 0;
                        v80 = 0;
                        v81 = 0;
                        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a2 + 104))(a3, a4, 1, 0, &v82);
                        if ((v20 & 0x80000000) != 0)
                          return v20;
                        v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v82, (char *)&v81 + 2);
                        v5 = v51;
                        if ((v51 & 0x80000000) == 0)
                        {
                          v52 = HIWORD(v81);
                          if (HIWORD(v81))
                          {
                            while (1)
                            {
                              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a2 + 120))(a3, a4, v52, &v81);
                              if ((v20 & 0x80000000) != 0)
                                return v20;
                              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char **, char *))(a2 + 168))(a3, a4, HIWORD(v81), 0, 1, &__s, (char *)&v80 + 2);
                              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a2 + 168))(a3, a4, HIWORD(v81), 1, 1, &v84, (char *)&v80 + 2);
                              if ((v20 & 0x80000000) != 0)
                                return v20;
                              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a2 + 168))(a3, a4, HIWORD(v81), 2, 1, (char *)&v82 + 2, (char *)&v80 + 2);
                              if ((v20 & 0x80000000) != 0)
                                return v20;
                              if (v84 >= v38)
                              {
                                ++v84;
                                v53 = HIWORD(v82);
                              }
                              else
                              {
                                v53 = HIWORD(v82);
                                if (HIWORD(v82) <= v38)
                                  goto LABEL_75;
                              }
                              HIWORD(v82) = v53 + 1;
LABEL_75:
                              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a2 + 160))(a3, a4, HIWORD(v81), 1, 1, &v84, &v80);
                              if ((v20 & 0x80000000) != 0)
                                return v20;
                              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 160))(a3, a4, HIWORD(v81), 2, 1, (char *)&v82 + 2, &v80);
                              if ((v20 & 0x80000000) != 0)
                                return v20;
                              v52 = v81;
                              HIWORD(v81) = v81;
                              if (!(_WORD)v81)
                                goto LABEL_80;
                            }
                          }
                        }
                        if ((v51 & 0x80000000) != 0)
                          return v5;
LABEL_80:
                        v36 = a2;
                        if (*((_WORD *)a5 + 8))
                        {
                          v54 = 0;
                          v55 = 0;
                          v56 = (unint64_t)*((unsigned __int16 *)a5 + 8) << 6;
                          v57 = v27;
                          do
                          {
                            if (v57)
                            {
                              v58 = *v7;
                              v59 = *v7 + v54;
                              v60 = *(unsigned __int16 *)(v59 + 8);
                              if (v60 >= v38)
                              {
                                *(_WORD *)(v59 + 8) = v60 + 1;
                                v64 = (_WORD *)(v58 + (v55 << 6) + 10);
                                v62 = *(_WORD *)(v59 + 10);
                                goto LABEL_87;
                              }
                              v63 = *(unsigned __int16 *)(v59 + 10);
                              v61 = (_WORD *)(v59 + 10);
                              v62 = v63;
                              if (v63 > v38)
                              {
                                v64 = v61;
LABEL_87:
                                *v64 = v62 + 1;
                              }
                            }
                            ++v55;
                            --v57;
                            v54 += 64;
                          }
                          while (v56 != v54);
                        }
                        v84 = 0;
                        __s = 0;
                        HIWORD(v82) = 0;
                        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v82 + 2);
                        if ((v20 & 0x80000000) != 0)
                          return v20;
                        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(a2 + 176))(a3, a4, HIWORD(v82), 1, &__s, &v84);
                        if ((v5 & 0x80000000) != 0)
                          return v5;
                        v65 = v84;
                        if (v84)
                        {
                          v66 = __s + 16;
                          do
                          {
                            v67 = *((_DWORD *)v66 - 1);
                            if (v67 >= v38)
                            {
                              *((_DWORD *)v66 - 1) = v67 + 1;
                            }
                            else if (*(_DWORD *)v66 + v67 > v38)
                            {
                              ++*(_DWORD *)v66;
                            }
                            v66 += 32;
                            --v65;
                          }
                          while (v65);
                        }
                        v35 = v71;
                      }
                    }
                  }
                  ++v34;
                }
                while (v34 < *((unsigned __int16 *)a5 + 8));
                if ((v5 & 0x80000000) != 0)
                  return v5;
              }
              else
              {
LABEL_102:
                v5 = 0;
              }
            }
LABEL_103:
            v21 = HIWORD(v76);
            LOWORD(v77) = HIWORD(v76);
          }
          while (HIWORD(v76));
        }
      }
    }
  }
  return v5;
}

uint64_t stat_hmogrph_getIOBTNToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, char *a8)
{
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  const char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  v21 = 0;
  for (i = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, a5, (char *)&v24 + 2);
        ;
        i = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, HIWORD(v24), (char *)&v24 + 2))
  {
    v16 = i;
    if ((i & 0x80000000) != 0)
      break;
    if (!HIWORD(v24))
    {
      cstdlib_strcpy(a8, "");
      return v16;
    }
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v24), 0, 1, &v22, &v24);
    if ((v17 & 0x80000000) != 0)
      return v17;
    if (v22 == 6)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 168))(a3, a4, HIWORD(v24), 1, 1, (char *)&v23 + 2, &v24);
      if ((v17 & 0x80000000) != 0)
        return v17;
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48)
                                                                                                + 168))(a3, a4, HIWORD(v24), 2, 1, &v23, &v24);
      if ((v17 & 0x80000000) != 0)
        return v17;
      if (HIWORD(v23) <= a6 && (unsigned __int16)v23 + 1 >= a7)
      {
        if (HIWORD(v23) + 1 == a6 || HIWORD(v23) == a6)
          v20 = "B-";
        else
          v20 = "I-";
        cstdlib_strcpy(a8, v20);
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 48)
                                                                                             + 176))(a3, a4, HIWORD(v24), 4, &v21, &v24);
        if ((v16 & 0x80000000) == 0)
        {
          cstdlib_strncat(a8, (const char *)(v21 + 1), 0x3CuLL);
          a8[(unsigned __int16)cstdlib_strlen(a8) - 1] = 0;
        }
        return v16;
      }
    }
  }
  return v16;
}

uint64_t stat_hmogrph_disambiguateWords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int NextUtf8Offset;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  int v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  int v55;
  uint64_t IOBTNToken;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  uint64_t v71;
  size_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t ***v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *HomographPhon;
  const char *v112;
  unsigned __int16 v113;
  unsigned __int16 v114;
  int v116;
  unsigned __int16 v117;
  unsigned __int16 v118;
  int v119;
  int v120;
  uint64_t v122;
  __int16 v123;
  unsigned __int16 v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int16 v140;
  int v141;
  int v142;
  int v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  char *__s;
  char *__s1;
  unsigned int v147;
  char *__dst;
  char *v149;
  char *__s2;
  _BYTE __c[11];
  const char **v152;
  float *v153;
  uint64_t v154;
  char *v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned __int16 v159;
  unsigned __int16 v160;
  int v161;
  int v162;
  int v163;
  char __src[64];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v162 = 0;
  v163 = 0;
  v161 = 0;
  v160 = 0;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v156 = 0;
  v154 = 0;
  v155 = 0;
  v152 = 0;
  v153 = 0;
  memset(__c, 0, sizeof(__c));
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v163 + 2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a2 + 184))(a3, a4, HIWORD(v163), 0, &v161);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if ((unsigned __int16)v161 != 1)
    return v11;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v163), 0, &v154, &v162);
  if ((v11 & 0x80000000) != 0 || (unsigned __int16)v162 < 2u)
    return v11;
  v12 = *(_QWORD *)(a1 + 280);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(v12 + 40))(*(_QWORD *)(a5 + 104), *(_QWORD *)(a5 + 112), &v156);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v13 = *(unsigned int *)(a1 + 324);
  v14 = v156;
  if (cstdlib_strlen((const char *)(a1 + 344)) + v14 != v13)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v15, v16, v17, v18, v133);
    return 2314215449;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a2 + 104))(a3, a4, 2, HIWORD(v163), &v163);
  if ((v11 & 0x80000000) == 0)
  {
    v19 = v163;
    if ((_WORD)v163)
    {
      __s = (char *)(a1 + 344);
      __s1 = 0;
      v20 = 0;
      __dst = 0;
      v140 = 0;
      v139 = 0;
      v147 = 0;
      v138 = v12;
      while (1)
      {
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v19, 0, 1, &v157, &v162);
        if ((v21 & 0x80000000) != 0)
        {
LABEL_186:
          v11 = v21;
          goto LABEL_187;
        }
        if (v157 <= 0xA && ((1 << v157) & 0x610) != 0)
          break;
LABEL_28:
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a2 + 120))(a3, a4, (unsigned __int16)v163, &v163);
        if ((v11 & 0x80000000) == 0)
        {
          v19 = v163;
          if ((_WORD)v163)
            continue;
        }
        goto LABEL_187;
      }
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v163, 1, 1, &v160, &v162);
      if ((v21 & 0x80000000) != 0)
        goto LABEL_186;
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v163, 2, 1, &v159, &v162);
      if ((v21 & 0x80000000) != 0)
        goto LABEL_186;
      v23 = v159;
      v24 = v160;
      v25 = v159 - v160;
      if (v25 <= v147)
      {
        v31 = v160;
        v32 = __dst;
      }
      else
      {
        v26 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)__dst, (v25 + 1));
        if (!v26)
          goto LABEL_193;
        v147 = (unsigned __int16)v25;
        v31 = v160;
        v32 = (char *)v26;
      }
      cstdlib_strncpy(v32, (const char *)(v154 + v31), v25);
      __dst = v32;
      if (v23 == v24)
      {
        *v32 = 0;
        goto LABEL_28;
      }
      if (cstdlib_strchr(__s, v32[(v25 - 1)]))
        v33 = v25 - 1;
      else
        v33 = v25;
      v32[v33] = 0;
      if (!v33)
        goto LABEL_28;
      v34 = cstdlib_strlen(v32);
      v35 = v34;
      v137 = v20;
      if (v34 <= v140)
      {
        if (!v34)
        {
          v141 = 0;
          goto LABEL_45;
        }
      }
      else
      {
        v36 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)__s1, v34 + 1);
        if (!v36)
        {
LABEL_193:
          v11 = 2314215434;
LABEL_194:
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v27, v28, v29, v30, v133);
          goto LABEL_187;
        }
        __s1 = (char *)v36;
        v140 = v35;
      }
      v141 = 0;
      v37 = 0;
      do
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset(&v32[v37], 0);
        if (utf8_ToLower(v32, v37, (uint64_t)__src))
        {
          if (cstdlib_strlen(__src) <= NextUtf8Offset)
          {
            cstdlib_strcpy(&__s1[v141], __src);
            v141 = cstdlib_strlen(__s1);
          }
          else
          {
            v140 += 5;
            v39 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)__s1, v140 + 1);
            if (!v39)
              goto LABEL_196;
            __s1 = (char *)v39;
          }
        }
        else
        {
          cstdlib_strncpy(&__s1[v141], &v32[v37], NextUtf8Offset);
          v141 += NextUtf8Offset;
        }
        v37 += NextUtf8Offset;
      }
      while (v37 < v35);
LABEL_45:
      __s1[v141] = 0;
      if (IsModelHomograph(__s1, *(char **)(a5 + 136)))
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_PRESENT: %s", v44, v45, v46, (uint64_t)__s1);
        v51 = v163;
        HIWORD(v162) = v163;
        if ((_WORD)v163)
        {
          v52 = 0;
          v53 = v159;
          v54 = v160;
          LOWORD(v55) = v163;
          while (1)
          {
            IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 136))(a3, a4, (unsigned __int16)v55, (char *)&v162 + 2);
            if ((IOBTNToken & 0x80000000) != 0)
              break;
            if (!HIWORD(v162))
              goto LABEL_66;
            IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
            if ((IOBTNToken & 0x80000000) != 0)
              break;
            if (v157 > 0xA || ((1 << v157) & 0x610) == 0)
            {
              v55 = HIWORD(v162);
            }
            else
            {
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 1, 1, (char *)&v158 + 2, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                break;
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 2, 1, &v158, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                break;
              v55 = HIWORD(v162);
              if (HIWORD(v158) == v54 && (unsigned __int16)v158 == v53)
              {
                v51 = HIWORD(v162);
              }
              else
              {
                if (++v52 == (*(_DWORD *)(a1 + 320) - 1) >> 1)
                {
                  HIWORD(v162) = 0;
                  v51 = v55;
                  goto LABEL_66;
                }
                v51 = HIWORD(v162);
                v54 = HIWORD(v158);
                v53 = v158;
              }
            }
            if (!v55)
              goto LABEL_66;
          }
LABEL_195:
          v11 = IOBTNToken;
LABEL_197:
          v20 = v137;
          goto LABEL_187;
        }
LABEL_66:
        v58 = *(_QWORD *)a1;
        if (!(*(_DWORD *)(a1 + 324) * *(_DWORD *)(a1 + 320)))
        {
          log_OutPublic(*(_QWORD *)(v58 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v47, v48, v49, v50, v133);
          v11 = 2314215449;
          goto LABEL_197;
        }
        v59 = 4 * (*(_DWORD *)(a1 + 324) * *(_DWORD *)(a1 + 320));
        v60 = (float *)heap_Alloc(*(_QWORD *)(v58 + 8), v59);
        v153 = v60;
        if (!v60)
        {
LABEL_196:
          v11 = 2314215434;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v40, v41, v42, v43, v133);
          goto LABEL_197;
        }
        v61 = v60;
        memset_pattern16(v60, &unk_214F02E90, v59);
        HIWORD(v162) = v51;
        if (v51)
        {
          v135 = 0;
          v142 = 0;
          v65 = 0;
          v66 = 0;
          while (1)
          {
            IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v51, 0, 1, &v157, &v162);
            if ((IOBTNToken & 0x80000000) != 0)
              goto LABEL_195;
            if (v157 <= 0xA && ((1 << v157) & 0x610) != 0)
            {
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 1, 1, (char *)&v158 + 2, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                goto LABEL_195;
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 2, 1, &v158, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                goto LABEL_195;
              if (HIWORD(v158) != v66 || (unsigned __int16)v158 != v65)
              {
                v68 = cstdlib_strlen(__s);
                v69 = __dst;
                if (v68)
                {
                  v70 = v156;
                  do
                  {
                    v61[v70++] = 0.0;
                    --v68;
                  }
                  while (v68);
                }
                v71 = HIWORD(v158);
                v72 = (unsigned __int16)v158 - HIWORD(v158);
                if (v72 > v147)
                {
                  v73 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)__dst, (v72 + 1));
                  if (!v73)
                    goto LABEL_196;
                  v147 = (unsigned __int16)v72;
                  v71 = HIWORD(v158);
                  v69 = (char *)v73;
                }
                cstdlib_strncpy(v69, (const char *)(v154 + v71), v72);
                v69[v72] = 0;
                v74 = cstdlib_strcmp(__s1, v69);
                v75 = v135;
                if (HIWORD(v162) == (unsigned __int16)v163)
                  v76 = v135;
                else
                  v76 = 1;
                if (!v74)
                  v75 = v76;
                v135 = v75;
                v77 = (v72 - 1);
                v78 = cstdlib_strchr(__s, v69[v77]);
                if (v78)
                {
                  v82 = *(_BYTE *)(a1 + ((_DWORD)v78 - (_DWORD)__s) + 354) - 48;
                  v61[v156 + v82] = 1.0;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_PUNC: %i", v79, v80, v81, v82);
                  v69[v77] = 0;
                }
                __dst = v69;
                IOBTNToken = stat_hmogrph_getIOBTNToken(a1, a2, a3, a4, HIWORD(v163), HIWORD(v158), (unsigned __int16)v158, __src);
                if ((IOBTNToken & 0x80000000) != 0)
                  goto LABEL_195;
                if (cstdlib_strcmp(__src, ""))
                  v86 = __src;
                else
                  v86 = v69;
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_WORD: %s", v83, v84, v85, (uint64_t)v86);
                v87 = (*(uint64_t (**)(_QWORD, _QWORD, char *, float *))(v138 + 56))(*(_QWORD *)(a5 + 104), *(_QWORD *)(a5 + 112), v86, v61);
                v11 = v87;
                if ((v87 & 0x1FFF) == 0x14)
                {
                  if (*(_DWORD *)(a5 + 176))
                  {
                    v88 = *v86;
                    if ((v88 - 65) <= 0x19)
                    {
                      *v86 = v88 + 32;
                      LOWORD(v11) = (*(uint64_t (**)(_QWORD, _QWORD, char *, float *))(v138 + 56))(*(_QWORD *)(a5 + 104), *(_QWORD *)(a5 + 112), v86, v61);
                      *v86 = v88;
                    }
                  }
                  if ((v11 & 0x1FFF) == 0x14)
                  {
                    IOBTNToken = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float *))(v138 + 56))(*(_QWORD *)(a5 + 104), *(_QWORD *)(a5 + 112), a5 + 164, v61);
                    if ((IOBTNToken & 0x80000000) != 0)
                      goto LABEL_195;
                  }
                }
                else if ((v87 & 0x80000000) != 0)
                {
                  goto LABEL_197;
                }
                if (HIWORD(v162) == (unsigned __int16)v163)
                  v142 = *(_DWORD *)(a1 + 320) >> 1;
                ++v142;
                v66 = HIWORD(v158);
                v65 = v158;
                v61 += *(unsigned int *)(a1 + 324);
              }
            }
            IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, HIWORD(v162), (char *)&v162 + 2);
            if ((IOBTNToken & 0x80000000) != 0)
              goto LABEL_195;
            if (v142 == *(_DWORD *)(a1 + 320))
            {
              HIWORD(v162) = 0;
              goto LABEL_113;
            }
            v51 = HIWORD(v162);
            if (!HIWORD(v162))
              goto LABEL_113;
          }
        }
        v135 = 0;
LABEL_113:
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_FEATURE: BEGIN", v62, v63, v64, v133);
        if (*(_DWORD *)(a1 + 324) * *(_DWORD *)(a1 + 320))
        {
          v92 = 0;
          do
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"%f", v89, v90, v91, COERCE__INT64(v153[v92++]));
          while (v92 < (*(_DWORD *)(a1 + 324) * *(_DWORD *)(a1 + 320)));
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_FEATURE: END", v89, v90, v91, v134);
        v93 = *(uint64_t ****)(a5 + 40);
        *((float *)*v93 + 49) = (float)*(unsigned int *)(a5 + 128) / 100.0;
        v21 = fi_predict(v93, (const void **)&v153, *(unsigned int *)(a1 + 320), &v152, v94, v95, v96, v97);
        v20 = v137;
        if ((v21 & 0x80000000) != 0)
          goto LABEL_186;
        v11 = 2314215434;
        LODWORD(__s2) = 0;
        if ((fi_shape_get_size((int *)(**(_QWORD **)(a5 + 40) + 92), (int *)&__s2) & 0x80000000) != 0)
        {
          v11 = 2314215431;
          goto LABEL_194;
        }
        if ((_DWORD)__s2 != 1)
        {
          v11 = 2314215449;
          goto LABEL_194;
        }
        v98 = cstdlib_strlen(__s1);
        v99 = v98 + 18;
        if (v98 + 18 > v139)
        {
          v100 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v137, (v98 + 19));
          if (!v100)
            goto LABEL_194;
          v139 = v99;
          v20 = (char *)v100;
        }
        cstdlib_strcpy(v20, "statwordhmogrph__");
        cstdlib_strcat(v20, __s1);
        *(_WORD *)&__c[1] = -1;
        v21 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 96) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), "fecfg", v20, &__c[3], &__c[1], __c);
        if ((v21 & 0x80000000) != 0)
          goto LABEL_186;
        if (!*(_WORD *)&__c[1])
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 37000, 0, v101, v102, v103, v104, v133);
          v11 = 2314215444;
LABEL_187:
          if (__s1)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)__s1);
          if (__dst)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)__dst);
          if (v20)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v20);
          return v11;
        }
        v105 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v105)
          *v105 = 0;
        v106 = cstdlib_strlen(**(const char ***)&__c[3]);
        if (v139 < v106)
        {
          v107 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v20, v106 + 1);
          if (!v107)
            goto LABEL_194;
          v139 = (unsigned __int16)v106;
          v20 = (char *)v107;
        }
        cstdlib_strcpy(v20, **(const char ***)&__c[3]);
        v137 = v20;
        if (*v152)
        {
          HomographPhon = GetHomographPhon(*v152, v20);
          if (HomographPhon)
          {
            if (v135 != 1)
            {
              v112 = HomographPhon;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_PHON: %s", v108, v109, v110, (uint64_t)HomographPhon);
              v113 = v163;
              HIWORD(v162) = v163;
              if ((_WORD)v163)
              {
                v114 = 0;
                v143 = v160;
                v136 = v159;
                while (1)
                {
                  IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v113, 0, 1, &v157, &v162);
                  if ((IOBTNToken & 0x80000000) != 0)
                    goto LABEL_195;
                  if (v157 <= 0xA && ((1 << v157) & 0x610) != 0)
                  {
                    IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 1, 1, (char *)&v158 + 2, &v162);
                    if ((IOBTNToken & 0x80000000) != 0)
                      goto LABEL_195;
                    IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 2, 1, &v158, &v162);
                    if ((IOBTNToken & 0x80000000) != 0)
                      goto LABEL_195;
                    if (HIWORD(v158) == v143 && (unsigned __int16)v158 == v136)
                    {
                      IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, HIWORD(v162), 3, &v155, &v162);
                      if ((IOBTNToken & 0x80000000) != 0)
                        goto LABEL_195;
                      v116 = cstdlib_strcmp(v155, v112);
                      v117 = HIWORD(v162);
                      IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, HIWORD(v162), (char *)&v162 + 2);
                      if ((IOBTNToken & 0x80000000) != 0)
                        goto LABEL_195;
                      if (!v116)
                        v114 = v117;
                      v113 = HIWORD(v162);
                      if (HIWORD(v162))
                        continue;
                    }
                  }
                  goto LABEL_151;
                }
              }
              goto LABEL_182;
            }
          }
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_HMOGRPH", 5, 0, (uint64_t)"STATWORDHMOGRPH_PHON: <>", v108, v109, v110, v133);
      }
      v114 = 0;
LABEL_151:
      v118 = v163;
      HIWORD(v162) = v163;
      if ((_WORD)v163)
      {
        v119 = v160;
        v120 = v159;
        do
        {
          IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v118, 0, 1, &v157, &v162);
          if ((IOBTNToken & 0x80000000) != 0)
            goto LABEL_195;
          if (v157 > 0xA || ((1 << v157) & 0x610) == 0)
            goto LABEL_181;
          IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 1, 1, (char *)&v158 + 2, &v162);
          if ((IOBTNToken & 0x80000000) != 0)
            goto LABEL_195;
          IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(a3, a4, HIWORD(v162), 2, 1, &v158, &v162);
          if ((IOBTNToken & 0x80000000) != 0)
            goto LABEL_195;
          if (HIWORD(v158) != v119 || (unsigned __int16)v158 != v120)
          {
LABEL_181:
            HIWORD(v162) = 0;
            break;
          }
          v122 = HIWORD(v162);
          IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 120))(a3, a4, HIWORD(v162), (char *)&v162 + 2);
          if ((IOBTNToken & 0x80000000) != 0)
            goto LABEL_195;
          if (!v114 || (_DWORD)v122 == v114)
          {
            LOWORD(v163) = v122;
            if ((_DWORD)v122 == v114)
            {
              v149 = 0;
              __s2 = 0;
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, v114, 5, &__s2, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                goto LABEL_195;
              IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v163, 14, &v149, &v162);
              if ((IOBTNToken & 0x80000000) != 0)
                goto LABEL_195;
              v123 = cstdlib_strlen(v149);
              v124 = cstdlib_strlen(__s2) + v123;
              if (v124 <= v139)
              {
                v126 = v137;
              }
              else
              {
                v125 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v137, v124 + 1);
                if (!v125)
                  goto LABEL_196;
                v139 = v124;
                v126 = (char *)v125;
              }
              cstdlib_strcpy(v126, "POS:");
              cstdlib_strcat(v126, __s2);
              cstdlib_strcat(v126, ";");
              v137 = v126;
              if (!cstdlib_strstr(v149, v126))
              {
                v127 = cstdlib_strstr(v149, "POS");
                if (v127)
                {
                  v128 = v127;
                  cstdlib_strncpy(v137, v149, v127 - v149);
                  v137[v128 - v149] = 0;
                  cstdlib_strcat(v137, "POS:");
                  cstdlib_strcat(v137, __s2);
                  v129 = cstdlib_strstr(v128, ";");
                  if (v129)
                    cstdlib_strcat(v137, v129);
                  v144 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 48) + 160);
                  v130 = (unsigned __int16)v163;
                  v131 = cstdlib_strlen(v137);
                  IOBTNToken = v144(a3, a4, v130, 14, (unsigned __int16)(v131 + 1), v137, (char *)&v161 + 2);
                  if ((IOBTNToken & 0x80000000) != 0)
                    goto LABEL_195;
                }
              }
            }
          }
          else
          {
            IOBTNToken = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 192))(a3, a4, v122);
            if ((IOBTNToken & 0x80000000) != 0)
              goto LABEL_195;
          }
          v118 = HIWORD(v162);
        }
        while (HIWORD(v162));
      }
LABEL_182:
      v20 = v137;
      goto LABEL_28;
    }
  }
  return v11;
}

char *IsModelHomograph(const char *a1, char *a2)
{
  unsigned __int16 v4;
  char *result;

  v4 = cstdlib_strlen(a1);
  result = cstdlib_strstr(a2, a1);
  if (result)
  {
    if (result == a2 || *(result - 1) == 124)
      return (char *)(!result[v4] || result[v4] == 124);
    else
      return 0;
  }
  return result;
}

char *GetHomographPhon(const char *a1, char *__s1)
{
  const char *v2;
  char *v4;
  int v5;
  char *v6;

  v2 = __s1;
  v4 = cstdlib_strstr(__s1, "=");
  if (v4)
  {
    while (1)
    {
      *v4++ = 0;
      v5 = cstdlib_strcmp(a1, v2);
      v6 = cstdlib_strstr(v4, "|");
      if (!v5)
        break;
      if (!v6)
        return 0;
      v2 = v6 + 1;
      v4 = cstdlib_strstr(v6 + 1, "=");
      if (!v4)
        return v4;
    }
    if (v6)
      *v6 = 0;
  }
  return v4;
}

char *hlp_filterWordCandIfTnHas(char *result)
{
  unsigned int v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((unsigned __int16 *)result + 28);
  if (*((_WORD *)result + 28))
  {
    v2 = result;
    v3 = 0;
    v4 = *((_QWORD *)result + 6);
    do
    {
      if (*(_WORD *)(v4 + 16 * v3 + 8))
      {
        v5 = 0;
        v6 = 0;
        do
        {
          result = cstdlib_strstr(*(char **)(*(_QWORD *)(v4 + 16 * v3) + v5 + 40), "poi");
          v4 = *((_QWORD *)v2 + 6);
          if (result)
            *(_DWORD *)(*(_QWORD *)(v4 + 16 * v3) + v5 + 48) = 1;
          ++v6;
          v5 += 56;
        }
        while (v6 < *(unsigned __int16 *)(v4 + 16 * v3 + 8));
        v1 = *((unsigned __int16 *)v2 + 28);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  return result;
}

uint64_t hlp_hasRcdWithGivenPOIClass(uint64_t a1, char *__s2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(a1 + 56);
  if (!*(_WORD *)(a1 + 56))
    return 0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 48);
  while (!*(_WORD *)(v6 + 16 * v5 + 8))
  {
LABEL_8:
    if (++v5 >= (unint64_t)v2)
      return 0;
  }
  v7 = 0;
  v8 = 40;
  while (cstdlib_strcmp(*(const char **)(*(_QWORD *)(v6 + 16 * v5) + v8), __s2))
  {
    ++v7;
    v6 = *(_QWORD *)(a1 + 48);
    v8 += 56;
    if (v7 >= *(unsigned __int16 *)(v6 + 16 * v5 + 8))
    {
      v2 = *(unsigned __int16 *)(a1 + 56);
      goto LABEL_8;
    }
  }
  return 1;
}

uint64_t hlp_filterWordCandIfTnIsNot(uint64_t result, char *__s2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(unsigned __int16 *)(result + 56);
  if (*(_WORD *)(result + 56))
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)(result + 48);
    do
    {
      if (*(_WORD *)(v6 + 16 * v5 + 8))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          result = cstdlib_strcmp(*(const char **)(*(_QWORD *)(v6 + 16 * v5) + v7 + 40), __s2);
          v6 = *(_QWORD *)(v4 + 48);
          if ((_DWORD)result)
            *(_DWORD *)(*(_QWORD *)(v6 + 16 * v5) + v7 + 48) = 1;
          ++v8;
          v7 += 56;
        }
        while (v8 < *(unsigned __int16 *)(v6 + 16 * v5 + 8));
        v2 = *(unsigned __int16 *)(v4 + 56);
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

uint64_t stat_hmogrph_isSubWordRec(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!*(_WORD *)(a1 + 8))
    return 0;
  v2 = 0;
  while (1)
  {
    if ((unint64_t)a2 << 6 != v2)
    {
      v3 = *(_QWORD *)a1 + ((unint64_t)a2 << 6);
      v4 = *(_QWORD *)a1 + v2;
      if (*(unsigned __int16 *)(v3 + 8) >= *(unsigned __int16 *)(v4 + 8)
        && *(unsigned __int16 *)(v3 + 10) <= *(unsigned __int16 *)(v4 + 10))
      {
        break;
      }
    }
    v2 += 64;
    if ((unint64_t)*(unsigned __int16 *)(a1 + 8) << 6 == v2)
      return 0;
  }
  return 1;
}

unsigned __int16 *stat_hmogrph_setWillBeDeleteOfSubWords(unsigned __int16 *result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  _DWORD *v8;

  v3 = result[4];
  if (result[4])
  {
    v4 = a2;
    v5 = *(_QWORD *)result + ((unint64_t)a2 << 6);
    v6 = (unsigned __int16 *)(v5 + 8);
    v7 = (unsigned __int16 *)(v5 + 10);
    v8 = (_DWORD *)(*(_QWORD *)result + 32);
    do
    {
      if (v4
        && *v6 <= *((unsigned __int16 *)v8 - 12)
        && *v7 >= *((unsigned __int16 *)v8 - 11))
      {
        *v8 = a3;
      }
      v8 += 16;
      --v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t stat_hmogrph_hasSubWordWithGivenTn(uint64_t a1, unsigned int a2, char *__s2)
{
  unsigned int v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;

  v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8))
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)a1 + ((unint64_t)a2 << 6);
  v9 = (unsigned __int16 *)(v8 + 8);
  v10 = (unint64_t)a2 << 6;
  v11 = (unsigned __int16 *)(v8 + 10);
  while (1)
  {
    if (v10 == v6)
      goto LABEL_8;
    v12 = *(_QWORD *)a1 + v6;
    if (*v9 > *(unsigned __int16 *)(v12 + 8)
      || *v11 < *(unsigned __int16 *)(*(_QWORD *)a1 + v6 + 10))
    {
      goto LABEL_8;
    }
    if (hlp_hasRcdWithGivenPOIClass(v12, __s2))
      return 1;
    v3 = *(unsigned __int16 *)(a1 + 8);
LABEL_8:
    ++v7;
    v6 += 64;
    if (v7 >= v3)
      return 0;
  }
}

uint64_t nntn_AllInOneLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t DomainDefBlockInfo;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int NumberChildren;
  uint64_t v32;
  uint64_t v33;
  size_t *v34;
  unint64_t v35;
  unsigned int v36;
  size_t v37;
  int v38;
  uint64_t DomainRange;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int Type;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  BOOL v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t **i;
  int StringAttribute;
  char *v86;
  int v87;
  const char *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unsigned int v95;
  size_t *v96;
  char *v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned __int16 v102;
  int v103;
  char *v104;
  char *v105;
  char *__s1;
  uint64_t **v107;
  unint64_t v108;
  uint64_t v109;
  _WORD v110[500];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v102 = 0;
  v101 = 0;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v95 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"nntn : AllInOneLoop Begin", a6, a7, a8, v91);
  if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"maxTNNNcallspersent", &v95) & 0x80000000) == 0)
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"set maxTNNNCallsPerSent to %d", v13, v14, v15, v95);
  if (v95)
    *(_DWORD *)(a1 + 872) = v95;
  v16 = *(uint64_t **)(a1 + 168);
  *(_QWORD *)(*(_QWORD *)(*v16 + 16) + 32) = a1;
  v17 = setDomainsOnSentence_NNTN((uint64_t *)a1, v9, v10, v11, v12, v13, v14, v15);
  if ((v17 & 0x80000000) != 0)
    return v17;
  DomainDefBlockInfo = mergeDomainsOnSentence_NNTN((_QWORD *)a1, v18, v19, v20, v21, v22, v23, v24);
  if ((DomainDefBlockInfo & 0x80000000) != 0)
    return DomainDefBlockInfo;
  v26 = *v16;
  *(_QWORD *)(*(_QWORD *)(*v16 + 16) + 16) = *(_QWORD *)(a1 + 304);
  *(_WORD *)(v26 + 64) = 16;
  *(_WORD *)(v26 + 42) = *(_WORD *)(a1 + 312);
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16);
  NumberChildren = LDOTreeNode_GetNumberChildren(v27);
  v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v33 = *(_QWORD *)(a1 + 184);
  if (!NumberChildren)
  {
    v88 = "no basic token records to process";
    v89 = 5;
LABEL_106:
    log_OutText(v32, v33, v89, 0, (uint64_t)v88, v28, v29, v30, v92);
    return DomainDefBlockInfo;
  }
  log_OutText(v32, v33, 4, 0, (uint64_t)"tokentn : start loop...", v28, v29, v30, v92);
  v34 = *(size_t **)(v27 + 80);
  v35 = *(_QWORD *)(v27 + 88);
  v96 = v34;
  v93 = v35;
  if ((unint64_t)v34 < v35)
  {
    v36 = 0;
    do
    {
      __s1 = 0;
      LODWORD(v105) = 0;
      LODWORD(v104) = 0;
      v37 = *v34;
      v38 = LDOTreeNode_ComputeAbsoluteFrom(*v34, &v105);
      DomainRange = LH_ERROR_to_VERROR(v38);
      if ((DomainRange & 0x80000000) != 0
        || (v46 = LDOTreeNode_ComputeAbsoluteTo(v37, &v104),
            DomainRange = LH_ERROR_to_VERROR(v46),
            (DomainRange & 0x80000000) != 0))
      {
LABEL_104:
        DomainDefBlockInfo = DomainRange;
        goto LABEL_105;
      }
      v47 = (unsigned __int16)v105;
      v94 = (unsigned __int16)v104;
      Type = LDOObject_GetType(v37, (uint64_t *)&__s1);
      DomainDefBlockInfo = LH_ERROR_to_VERROR(Type);
      if ((DomainDefBlockInfo & 0x80000000) != 0)
        goto LABEL_105;
      *(_DWORD *)(*v16 + 72) = 0;
      if (!cstdlib_strcmp(__s1, "TOKEN_ALPHA"))
        v36 = 0;
      if (!cstdlib_strcmp(__s1, "TOKEN_DIGIT"))
        v36 = 1;
      if (!cstdlib_strcmp(__s1, "TOKEN_PUNCT"))
        v36 = 2;
      if (!cstdlib_strcmp(__s1, "TOKEN_WSPACE"))
        v36 = 3;
      if (!cstdlib_strcmp(__s1, "TOKEN_DCT"))
        v36 = 4;
      if (!cstdlib_strcmp(__s1, "TOKEN_USER_TN"))
        v36 = 5;
      if (!cstdlib_strcmp(__s1, "TOKEN_INT_TN"))
        v36 = 6;
      if (!cstdlib_strcmp(__s1, "TOKEN_CASEGENDER"))
        v36 = 7;
      if (v36 <= 2)
      {
        HIWORD(v100) = 0;
        FERuntimeData_GetActiveDomains(a1, (uint64_t)v110, (_WORD *)&v100 + 1, v47, v94, 0);
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"START basic token %d,%d ... %d active domains", v49, v50, v51, v47);
        if (HIWORD(v100))
        {
          v52 = 0;
          while (1)
          {
            LOWORD(v100) = 0;
            v102 = 0;
            v53 = *v16;
            *(_WORD *)(v53 + 46) = 0;
            *(_WORD *)(v53 + 44) = v47;
            *(_QWORD *)(v53 + 56) = 0;
            DomainRange = FERuntimeData_GetDomainRange(a1, (unsigned __int16)v110[v52], &v101);
            if ((DomainRange & 0x80000000) != 0)
              goto LABEL_104;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"Domain %d : range %d,%d", v43, v44, v45, v52);
            *(_WORD *)(*v16 + 46) = *(_WORD *)(v101 + 2);
            DomainRange = FERuntimeData_GetDomainBlockIndex((_QWORD *)a1, (unsigned __int16)v110[v52], &v100, &v102);
            if ((DomainRange & 0x80000000) != 0)
              goto LABEL_104;
            DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo((_QWORD *)a1, (unsigned __int16)v100, &v99, v41, v42, v43, v44, v45);
            if ((DomainDefBlockInfo & 0x80000000) != 0)
              goto LABEL_105;
            if (v102 > *(unsigned __int16 *)(v99 + 24))
              break;
            v54 = *(_QWORD *)(v99 + 40) + 16 * *(unsigned __int16 *)(*(_QWORD *)(v99 + 16) + 72 * v102 + 12);
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"doing domain %d, Domain[%s:%s] (applying %d rules)", v43, v44, v45, v52);
            if (*(_WORD *)(v54 + 8))
            {
              v55 = *v16;
              if (*(_DWORD *)(*v16 + 72) != 1)
              {
                v56 = 0;
                v57 = 0;
                while (1)
                {
                  v58 = *(_QWORD *)v54 + v56;
                  *(_WORD *)(v55 + 40) = 0;
                  v59 = v55 + 40;
                  *(_QWORD *)(v59 + 16) = v58;
                  DomainDefBlockInfo = FEData_blockData_getTokenAndRegexData_NNTN((_QWORD *)a1, v58, (_QWORD *)(v59 - 8), (_WORD *)v59, (_QWORD *)(v59 - 16), &v98, v44, v45);
                  if ((DomainDefBlockInfo & 0x80000000) != 0)
                    goto LABEL_105;
                  v60 = v36 < 2;
                  v61 = v36 == 2;
                  if (v98 != 1)
                    v61 = 0;
                  v63 = v36 == 1 && v98 == 2;
                  if (v36)
                    v64 = 0;
                  else
                    v64 = v98 == 3;
                  v65 = v64;
                  if (v98 != 4)
                    v60 = 0;
                  if (!v98 || v61 || v63 || (v65 & 1) != 0 || v60)
                    break;
                  if (v98 == 5)
                  {
                    if ((v36 & 0xFFFFFFFD) == 0)
                      break;
                  }
                  else if (v98 == 6 && v36 - 1 < 2)
                  {
                    break;
                  }
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"rule %s (token %s, %d,%d) blocked by triggerType %s", v43, v44, v45, *(_QWORD *)(*v16 + 24));
LABEL_68:
                  if (++v57 < (unint64_t)*(unsigned __int16 *)(v54 + 8))
                  {
                    v56 += 24;
                    v55 = *v16;
                    if (*(_DWORD *)(*v16 + 72) != 1)
                      continue;
                  }
                  goto LABEL_70;
                }
                v66 = *v16;
                v67 = *(uint64_t **)(*v16 + 16);
                v68 = *v67;
                *(_BYTE *)(v68 + 82) = 0;
                *(_WORD *)(v68 + 40) = 0;
                v67[2] = *(_QWORD *)(a1 + 304);
                v67[3] = *(_QWORD *)(v66 + 24);
                *(_QWORD *)(v68 + 96) = *(_QWORD *)(v66 + 56);
                *(_WORD *)(v68 + 104) = v100;
                *(_WORD *)(v68 + 106) = v102;
                *((_WORD *)v67 + 26) = *(_WORD *)(v66 + 44);
                *((_WORD *)v67 + 27) = *(_WORD *)(v66 + 46);
                *((_DWORD *)v67 + 11) = 0;
                *((_DWORD *)v67 + 12) = 0;
                DomainDefBlockInfo = tokenizer_apply_regex_NNTN((uint64_t *)a1, v66, &v96);
                if ((DomainDefBlockInfo & 0x80000000) != 0)
                  goto LABEL_105;
                v69 = *(_QWORD *)(*v16 + 16);
                **(_DWORD **)(v69 + 8) = 0;
                *(_DWORD *)(v69 + 44) = 0;
                goto LABEL_68;
              }
            }
LABEL_70:
            if (++v52 >= (unint64_t)HIWORD(v100))
              goto LABEL_71;
          }
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24028, (uint64_t)"%s%d%s%d", v42, v43, v44, v45, "domain");
          return NNTNERROR(0);
        }
LABEL_71:
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"END of loop for basic token %d,%d", v43, v44, v45, v47);
        FERuntimeData_FreeMatches((_QWORD *)a1, 0, v70, v71, v72, v73, v74, v75);
      }
      v34 = v96 + 1;
      v96 = v34;
    }
    while ((unint64_t)v34 < v93);
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"spaceInPYT", &v97) & 0x80000000) != 0
    || LH_stricmp(v97, "yes"))
  {
    goto LABEL_105;
  }
  DomainDefBlockInfo = 0;
  v108 = 0;
  v109 = 0;
  __s1 = 0;
  v107 = 0;
  v76 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16);
  v77 = *(uint64_t **)(v76 + 80);
  if ((unint64_t)v77 < *(_QWORD *)(v76 + 88))
  {
    v78 = 0;
    v79 = 0;
    do
    {
      v105 = 0;
      if (v78)
      {
        v80 = LDOObject_GetType(*v78, (uint64_t *)&v105);
        v17 = LH_ERROR_to_VERROR(v80);
        if ((v17 & 0x80000000) != 0)
          return v17;
      }
      v81 = LDOTreeNode_ComputeAbsoluteFrom(*v77, (_DWORD *)&v109 + 1);
      v17 = LH_ERROR_to_VERROR(v81);
      if ((v17 & 0x80000000) != 0)
        return v17;
      v82 = LDOTreeNode_ComputeAbsoluteTo(*v77, &v109);
      DomainDefBlockInfo = LH_ERROR_to_VERROR(v82);
      if ((DomainDefBlockInfo & 0x80000000) != 0)
        return DomainDefBlockInfo;
      if (!v78 || cstdlib_strcmp(v105, "TOKEN_PUNCT") && cstdlib_strcmp(v105, "TOKEN_WSPACE"))
      {
        v83 = LDO_ComputeOverlappingLabels(*(_QWORD *)(a1 + 264), (unsigned int *)&v109 + 1, (unsigned int *)&v109, 0, (unsigned int *)&__s1);
        DomainDefBlockInfo = LH_ERROR_to_VERROR(v83);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          return DomainDefBlockInfo;
        for (i = v107; (unint64_t)i < v108; ++i)
        {
          v104 = 0;
          v103 = 0;
          StringAttribute = LDOObject_GetStringAttribute(*i, "TNTAG", &v103, (uint64_t *)&v104);
          DomainDefBlockInfo = LH_ERROR_to_VERROR(StringAttribute);
          if ((DomainDefBlockInfo & 0x80000000) != 0)
            goto LABEL_99;
          if (v103 && !cstdlib_strcmp(v104, "_PI1a_"))
          {
            if (v79 == 1)
              v86 = "left";
            else
              v86 = "none";
            v87 = LDOObject_SetStringAttribute(*v77, "INPUTSPACETAG", v86);
            DomainDefBlockInfo = LH_ERROR_to_VERROR(v87);
            if ((DomainDefBlockInfo & 0x80000000) != 0)
              goto LABEL_99;
            v79 = 0;
          }
        }
        LDO_FreeLDOLabelVector(*(_QWORD *)(a1 + 264), (uint64_t)&__s1);
        v78 = v77;
      }
      else
      {
        v79 = 1;
      }
      ++v77;
    }
    while ((unint64_t)v77 < *(_QWORD *)(v76 + 88));
  }
LABEL_99:
  if (v107)
    LDO_FreeLDOLabelVector(*(_QWORD *)(a1 + 264), (uint64_t)&__s1);
  if ((DomainDefBlockInfo & 0x80000000) == 0)
  {
LABEL_105:
    FERuntimeData_FreeMatches((_QWORD *)a1, 1, v40, v41, v42, v43, v44, v45);
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v33 = *(_QWORD *)(a1 + 184);
    v88 = "nntn : AllInOneLoop End (%x)";
    v92 = DomainDefBlockInfo;
    v89 = 4;
    goto LABEL_106;
  }
  return DomainDefBlockInfo;
}

BOOL isEnglishLetter(char *a1)
{
  unsigned int v2;
  int WCharFromUtf8;
  BOOL v5;

  v2 = cstdlib_strlen(a1);
  WCharFromUtf8 = utf8_GetWCharFromUtf8(a1, 0, v2);
  if ((*a1 & 0xDFu) - 65 < 0x1A
    || (WCharFromUtf8 - 192) < 0x17
    || (unsigned __int16)(WCharFromUtf8 - 216) < 7u
    || (unsigned __int16)(WCharFromUtf8 - 223) < 0x18u
    || (WCharFromUtf8 & 0xFFF8) == 0xF8
    || (WCharFromUtf8 - 256) <= 0x36 && (WCharFromUtf8 & 1) == 0
    || (unsigned __int16)(WCharFromUtf8 - 328) >= 0xFFF1u && (WCharFromUtf8 & 1) != 0
    || (WCharFromUtf8 - 330) <= 0x2E && (WCharFromUtf8 & 1) == 0
    || (unsigned __int16)(WCharFromUtf8 - 382) >= 0xFFFBu && (WCharFromUtf8 & 1) != 0)
  {
    return 1;
  }
  v5 = (WCharFromUtf8 - 312) < 0x11;
  if ((WCharFromUtf8 & 1) != 0)
    v5 = (unsigned __int16)(WCharFromUtf8 - 312) > 0xFFC8u;
  if (v5 || (unsigned __int16)(WCharFromUtf8 - 376) >= 0xFFD1u && (WCharFromUtf8 & 1) != 0)
    return 1;
  if ((WCharFromUtf8 - 378) <= 4)
    return (WCharFromUtf8 & 1) == 0;
  return WCharFromUtf8 == 383;
}

uint64_t updateLDOTreeNode_CHN(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  int NumberChildren;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int Type;
  uint64_t UTF8Char;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  unsigned int NextUtf8Offset;
  _QWORD *v36;
  char *v37;
  unsigned __int16 v38;
  _BOOL4 v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  char *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v92;
  unsigned __int16 v93;
  char *__b;
  unsigned int v95;
  char *__s2;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  char *__s;
  int v102;
  uint64_t __src;
  char *__s1;
  int v105;
  int v106;
  uint64_t v107;

  v107 = 0;
  v106 = 0;
  v105 = 0;
  __src = 0;
  __s1 = 0;
  v102 = 0;
  v4 = *(_QWORD *)(a1[33] + 16);
  NumberChildren = LDOTreeNode_GetNumberChildren(v4);
  *a2 = NumberChildren;
  if (!NumberChildren)
  {
    UTF8Char = 0;
    goto LABEL_130;
  }
  v6 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, *((unsigned __int16 *)a1 + 156) + 1);
  v11 = *a1;
  if (!v6)
  {
    log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"FE_NNTN", 37000, 0, v7, v8, v9, v10, v92);
    UTF8Char = NNTNERROR(10);
    goto LABEL_130;
  }
  v12 = v6;
  v17 = (char *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, *((unsigned __int16 *)a1 + 156) + 1);
  v18 = *a1;
  if (!v17)
  {
LABEL_108:
    log_OutPublic(*(_QWORD *)(v18 + 32), (uint64_t)"FE_NNTN", 37000, 0, v13, v14, v15, v16, v92);
    UTF8Char = NNTNERROR(10);
    v20 = 0;
    v84 = 0;
    goto LABEL_127;
  }
  v19 = heap_Calloc(*(_QWORD **)(v18 + 8), 1, 48 * *a2);
  if (!v19)
  {
    v18 = *a1;
    goto LABEL_108;
  }
  v20 = v19;
  v21 = *(size_t **)(v4 + 80);
  if ((unint64_t)v21 >= *(_QWORD *)(v4 + 88))
  {
    UTF8Char = 0;
    goto LABEL_126;
  }
  v93 = 0;
  while (1)
  {
    if (!v21)
    {
      v85 = 6;
LABEL_112:
      v79 = v93;
      UTF8Char = NNTNERROR(v85);
      goto LABEL_119;
    }
    v22 = LDOTreeNode_ComputeText(*v21, &v107);
    v23 = LH_ERROR_to_VERROR(v22);
    if ((v23 & 0x80000000) != 0
      || (v24 = LHString_BorrowCPtr(v107),
          v25 = LDOTreeNode_ComputeAbsoluteFrom(*v21, &v106),
          v23 = LH_ERROR_to_VERROR(v25),
          (v23 & 0x80000000) != 0)
      || (v26 = LDOTreeNode_ComputeAbsoluteTo(*v21, &v105), v23 = LH_ERROR_to_VERROR(v26), (v23 & 0x80000000) != 0))
    {
      UTF8Char = v23;
      goto LABEL_118;
    }
    __s = (char *)v24;
    v27 = v105;
    v28 = v106;
    Type = LDOObject_GetType(*v21, (uint64_t *)&__s1);
    UTF8Char = LH_ERROR_to_VERROR(Type);
    if ((UTF8Char & 0x80000000) != 0)
      goto LABEL_118;
    if (!cstdlib_strcmp(__s1, "TOKEN_ALPHA"))
    {
      UTF8Char = utf8_getUTF8Char((uint64_t)__s, 0, v17);
      if ((UTF8Char & 0x80000000) != 0)
        goto LABEL_118;
      v95 = v27 - v28;
      if (v27 - v28 > (unsigned __int16)cstdlib_strlen(v17))
        break;
    }
LABEL_99:
    v78 = LDOString_BorrowAllocator(v107);
    OOC_PlacementDeleteObject(v78, v107);
    if ((unint64_t)++v21 >= *(_QWORD *)(v4 + 88))
    {
      v79 = v93;
      if (v93)
      {
        v80 = v93 - 1;
        v81 = v20;
        do
        {
          v82 = v80;
          v83 = LDO_ReplaceNodes(a1[33], v81, v81 + 24);
          UTF8Char = LH_ERROR_to_VERROR(v83);
          if ((UTF8Char & 0x80000000) != 0)
            break;
          v80 = v82 - 1;
          v81 += 48;
        }
        while (v82);
        goto LABEL_119;
      }
      goto LABEL_126;
    }
  }
  __s2 = v17;
  v31 = (char *)OOCAllocator_Realloc((uint64_t)(a1 + 28), 0, 64, &v102);
  if (v102)
    goto LABEL_117;
  v32 = v31;
  __b = (char *)v12;
  cstdlib_memcpy(v31, v21, 8uLL);
  v33 = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  v34 = 0;
  NextUtf8Offset = 0;
  v36 = (_QWORD *)(v20 + 48 * v93);
  *v36 = 8;
  v36[1] = v32;
  v36[2] = v32 + 8;
  v17 = __s2;
  v37 = __s;
  while (1)
  {
    v100 = NextUtf8Offset;
    UTF8Char = utf8_getUTF8Char((uint64_t)v37, NextUtf8Offset, v17);
    if ((UTF8Char & 0x80000000) != 0)
      goto LABEL_114;
    v38 = cstdlib_strlen(v17);
    v39 = isEnglishLetter(v17);
    if (!(v39 | v34))
    {
      v56 = PNEW_LDOTreeNode_ConRoot((uint64_t)(a1 + 28), (uint64_t)(a1 + 28), v17, "TOKEN", "TOKEN_ALPHA", &__src);
      v48 = LH_ERROR_to_VERROR(v56);
      if ((v48 & 0x80000000) != 0)
        goto LABEL_113;
      LDOObject_SetU32Attribute(__src, "_TTYPE", 0);
      UTF8Char = LH_ERROR_to_VERROR(v57);
      if ((UTF8Char & 0x80000000) != 0)
        goto LABEL_114;
      v58 = (unint64_t)&v33[-v98];
      v59 = ((unint64_t)&v33[-v98] >> 3) + 1;
      if (v59 <= v99)
      {
        v37 = __s;
      }
      else
      {
        v60 = 2 * v99;
        if (2 * v99 >= v99 + 1000000)
          v60 = v99 + 1000000;
        if (v60 > v59)
          v59 = v60;
        if (v59 <= 8)
          v59 = 8;
        v99 = v59;
        v61 = OOCAllocator_Realloc((uint64_t)(a1 + 28), v98, 8 * v59, &v102);
        v37 = __s;
        if (v102)
          goto LABEL_114;
        v98 = v61;
        v33 = (char *)(v61 + (v58 & 0x7FFFFFFF8));
      }
      cstdlib_memcpy(v33, &__src, 8uLL);
      v34 = 0;
      v33 += 8;
      ++v97;
      goto LABEL_93;
    }
    if (v34 == 1 && !v39)
      break;
    v62 = v100;
    v63 = v100 + v38;
    v64 = !v39;
    if (v34 != 1)
      v64 = 1;
    if (v64)
    {
      v37 = __s;
      if (v34 || !v39)
      {
        v17 = __s2;
        goto LABEL_94;
      }
      *__b = 0;
      cstdlib_strcat(__b, __s2);
      if (v63 == v95)
      {
        v71 = PNEW_LDOTreeNode_ConRoot((uint64_t)(a1 + 28), (uint64_t)(a1 + 28), __b, "TOKEN", "TOKEN_ALPHA", &__src);
        v48 = LH_ERROR_to_VERROR(v71);
        v17 = __s2;
        if ((v48 & 0x80000000) != 0)
        {
LABEL_113:
          UTF8Char = v48;
LABEL_114:
          v12 = (uint64_t)__b;
          goto LABEL_118;
        }
        LDOObject_SetU32Attribute(__src, "_TTYPE", 0);
        UTF8Char = LH_ERROR_to_VERROR(v72);
        if ((UTF8Char & 0x80000000) != 0)
          goto LABEL_114;
        v73 = ((unint64_t)&v33[-v98] >> 3) + 1;
        if (v73 > v99)
        {
          v74 = 2 * v99;
          if (2 * v99 >= v99 + 1000000)
            v74 = v99 + 1000000;
          if (v74 > v73)
            v73 = v74;
          if (v73 <= 8)
            v75 = 8;
          else
            v75 = v73;
          v76 = OOCAllocator_Realloc((uint64_t)(a1 + 28), v98, 8 * v75, &v102);
          if (v102)
            goto LABEL_116;
          v33 = (char *)(v76 + ((unint64_t)&v33[-v98] & 0x7FFFFFFF8));
          v98 = v76;
          v99 = v75;
          v17 = __s2;
        }
        cstdlib_memcpy(v33, &__src, 8uLL);
        v33 += 8;
        ++v97;
        cstdlib_memset(__b, 0, 3uLL);
        v34 = 1;
        goto LABEL_93;
      }
    }
    else
    {
      cstdlib_strcat(__b, __s2);
      v37 = __s;
      if (v63 == v95)
      {
        v65 = PNEW_LDOTreeNode_ConRoot((uint64_t)(a1 + 28), (uint64_t)(a1 + 28), __b, "TOKEN", "TOKEN_ALPHA", &__src);
        v48 = LH_ERROR_to_VERROR(v65);
        v17 = __s2;
        if ((v48 & 0x80000000) != 0)
          goto LABEL_113;
        LDOObject_SetU32Attribute(__src, "_TTYPE", 0);
        UTF8Char = LH_ERROR_to_VERROR(v66);
        if ((UTF8Char & 0x80000000) != 0)
          goto LABEL_114;
        v67 = ((unint64_t)&v33[-v98] >> 3) + 1;
        if (v67 > v99)
        {
          v68 = 2 * v99;
          if (2 * v99 >= v99 + 1000000)
            v68 = v99 + 1000000;
          if (v68 > v67)
            v67 = v68;
          if (v67 <= 8)
            v69 = 8;
          else
            v69 = v67;
          v70 = OOCAllocator_Realloc((uint64_t)(a1 + 28), v98, 8 * v69, &v102);
          if (v102)
            goto LABEL_116;
          v33 = (char *)(v70 + ((unint64_t)&v33[-v98] & 0x7FFFFFFF8));
          v98 = v70;
          v99 = v69;
          v17 = __s2;
        }
        cstdlib_memcpy(v33, &__src, 8uLL);
        v33 += 8;
        ++v97;
        cstdlib_memset(__b, 0, 3uLL);
        v34 = 0;
        goto LABEL_93;
      }
    }
    v34 = 1;
    v17 = __s2;
LABEL_93:
    v62 = v100;
LABEL_94:
    NextUtf8Offset = utf8_GetNextUtf8Offset(v37, v62);
    if (NextUtf8Offset >= v95)
    {
      v77 = v20 + 48 * v93;
      *(_DWORD *)(v77 + 24) = v99;
      *(_DWORD *)(v77 + 28) = 0;
      *(_QWORD *)(v77 + 32) = v98;
      *(_QWORD *)(v77 + 40) = v33;
      if (((unint64_t)&v33[-v98] >> 3) == (unsigned __int16)v97)
      {
        v12 = (uint64_t)__b;
        ++v93;
        goto LABEL_99;
      }
      v85 = 0;
      v12 = (uint64_t)__b;
      goto LABEL_112;
    }
  }
  v40 = PNEW_LDOTreeNode_ConRoot((uint64_t)(a1 + 28), (uint64_t)(a1 + 28), __b, "TOKEN", "TOKEN_ALPHA", &__src);
  v41 = LH_ERROR_to_VERROR(v40);
  if ((v41 & 0x80000000) == 0)
  {
    LDOObject_SetU32Attribute(__src, "_TTYPE", 0);
    UTF8Char = LH_ERROR_to_VERROR(v42);
    v17 = __s2;
    if ((UTF8Char & 0x80000000) != 0)
      goto LABEL_114;
    v43 = ((unint64_t)&v33[-v98] >> 3) + 1;
    if (v43 > v99)
    {
      v44 = 2 * v99;
      if (2 * v99 >= v99 + 1000000)
        v44 = v99 + 1000000;
      if (v44 > v43)
        v43 = v44;
      if (v43 <= 8)
        v45 = 8;
      else
        v45 = v43;
      v46 = OOCAllocator_Realloc((uint64_t)(a1 + 28), v98, 8 * v45, &v102);
      if (v102)
        goto LABEL_116;
      v33 = (char *)(v46 + ((unint64_t)&v33[-v98] & 0x7FFFFFFF8));
      v98 = v46;
      v99 = v45;
      v17 = __s2;
    }
    cstdlib_memcpy(v33, &__src, 8uLL);
    cstdlib_memset(__b, 0, 3uLL);
    v47 = PNEW_LDOTreeNode_ConRoot((uint64_t)(a1 + 28), (uint64_t)(a1 + 28), v17, "TOKEN", "TOKEN_ALPHA", &__src);
    v48 = LH_ERROR_to_VERROR(v47);
    if ((v48 & 0x80000000) != 0)
      goto LABEL_113;
    LDOObject_SetU32Attribute(__src, "_TTYPE", 0);
    UTF8Char = LH_ERROR_to_VERROR(v49);
    if ((UTF8Char & 0x80000000) != 0)
      goto LABEL_114;
    v50 = v33 + 8;
    v51 = (unint64_t)&v33[-v98 + 8];
    v52 = (v51 >> 3) + 1;
    if (v52 > v99)
    {
      v53 = 2 * v99;
      if (2 * v99 >= v99 + 1000000)
        v53 = v99 + 1000000;
      if (v53 > v52)
        v52 = v53;
      if (v52 <= 8)
        v54 = 8;
      else
        v54 = v52;
      v55 = OOCAllocator_Realloc((uint64_t)(a1 + 28), v98, 8 * v54, &v102);
      if (v102)
        goto LABEL_116;
      v50 = (char *)(v55 + (v51 & 0x7FFFFFFF8));
      v98 = v55;
      v99 = v54;
      v17 = __s2;
    }
    cstdlib_memcpy(v50, &__src, 8uLL);
    v34 = 0;
    v33 = v50 + 8;
    v97 += 2;
    v37 = __s;
    goto LABEL_93;
  }
  UTF8Char = v41;
LABEL_116:
  v12 = (uint64_t)__b;
LABEL_117:
  v17 = __s2;
LABEL_118:
  v79 = v93;
LABEL_119:
  if (v79)
  {
    v86 = 0;
    v87 = 48 * v79;
    do
    {
      v88 = v20 + v86;
      *(_DWORD *)(v20 + v86) = 0;
      v89 = *(_QWORD *)(v20 + v86 + 8);
      if (v89)
      {
        OOCAllocator_Free((uint64_t)(a1 + 28), v89);
        *(_QWORD *)(v88 + 8) = 0;
      }
      *(_QWORD *)(v88 + 16) = 0;
      *(_DWORD *)(v88 + 24) = 0;
      v90 = *(_QWORD *)(v88 + 32);
      if (v90)
      {
        OOCAllocator_Free((uint64_t)(a1 + 28), v90);
        *(_QWORD *)(v88 + 32) = 0;
      }
      *(_QWORD *)(v20 + v86 + 40) = 0;
      v86 += 48;
    }
    while (v87 != v86);
  }
LABEL_126:
  v84 = 1;
LABEL_127:
  heap_Free(*(_QWORD **)(*a1 + 8), v12);
  if (v17)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v17);
    if ((v84 & 1) != 0)
      goto LABEL_129;
  }
  else if (v84)
  {
LABEL_129:
    heap_Free(*(_QWORD **)(*a1 + 8), v20);
  }
LABEL_130:
  if (v102)
    return NNTNERROR(0);
  return UTF8Char;
}

uint64_t applyIgtreeExpansion(uint64_t a1, __int16 *a2, char *a3, char **a4, _DWORD *a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;

  v10 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 1024);
  if (v10)
  {
    v15 = v10;
    cstdlib_strcpy(v10, "");
    v19 = fe_nntn_IGTR(a1, a2, a3, v15, a5, v16, v17, v18);
    if (*a5 == 1)
      cstdlib_strcpy(*a4, v15);
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v15);
    return v19;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NNTN", 37000, 0, v11, v12, v13, v14, v21);
    return NNTNERROR(10);
  }
}

uint64_t applyNNExpansion(_DWORD *a1, __int16 *a2, char **a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;

  v6 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 1024);
  if (v6)
  {
    v11 = v6;
    cstdlib_strcpy(v6, "");
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if (a1[210])
    {
      log_OutText(v15, (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"FI prediction enabled", v12, v13, v14, 0);
      v19 = fe_mnc_nntn_Process((uint64_t)a1, a2, v11);
      if ((v19 & 0x80000000) != 0)
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"FI prediction failed", v16, v17, v18, 0);
      else
        cstdlib_strcpy(*a3, v11);
    }
    else
    {
      log_OutText(v15, (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"FI prediction is not enabled", v12, v13, v14, 0);
      v19 = 0;
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v11);
    return v19;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NNTN", 37000, 0, v7, v8, v9, v10, v21);
    return NNTNERROR(10);
  }
}

uint64_t writeExpandFuncNameToLDO(uint64_t a1, char *a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v26 = 0;
  v11 = *a4;
  v24 = a4[1];
  v25 = v11;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"nntn : writeExpandFuncNameToLDO Begin (%s)", a6, a7, a8, *a3);
  v12 = LDO_AddLabelOnSubstring(*(_QWORD *)(a1 + 264), "TOKEN", "TOKEN", &v25, &v24, &v26);
  v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_8;
  LDOObject_SetU32Attribute(v26, "_TTYPE", 6);
  v13 = LH_ERROR_to_VERROR(v17);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_8;
  v18 = LDOObject_SetStringAttribute(v26, "TNTAG", a2);
  v13 = LH_ERROR_to_VERROR(v18);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_8;
  v19 = LDOObject_SetStringAttribute(v26, "TNFUNCTAG", (char *)*a3);
  v13 = LH_ERROR_to_VERROR(v19);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_8;
  v20 = LDOObject_SetStringAttribute(v26, "NORM", "");
  v21 = LH_ERROR_to_VERROR(v20);
  if ((v21 & 0x80000000) == 0 && *(_WORD *)(a1 + 418))
  {
    v22 = LDOObject_SetStringAttribute(v26, "LANGMAP", *(char **)(a1 + 408));
    v13 = LH_ERROR_to_VERROR(v22);
LABEL_8:
    v21 = v13;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 4, 0, (uint64_t)"nntn : writeExpandFuncNameToLDO End (%x) ", v14, v15, v16, v21);
  return v21;
}

uint64_t sortExpansionNNTN(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  __int16 *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v26;

  v26 = 0;
  v4 = heap_Alloc(*(_QWORD *)(*a1 + 8), 256);
  *(_QWORD *)(*(_QWORD *)(a2 + 16) + 56) = v4;
  v9 = *a1;
  if (!v4)
  {
    log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"FE_NNTN", 37000, 0, v5, v6, v7, v8, v25);
    v22 = NNTNERROR(10);
    v14 = 0;
    goto LABEL_22;
  }
  v14 = (char **)heap_Calloc(*(_QWORD **)(v9 + 8), 1, 8);
  if (!v14)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNTN", 37000, 0, v10, v11, v12, v13, v25);
    v21 = NNTNERROR(10);
    goto LABEL_21;
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(__int16 **)(v15 + 8);
  v17 = *(char **)(v15 + 56);
  *v14 = v17;
  v18 = *(char **)(a2 + 24);
  v19 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 96);
  v20 = **(unsigned __int16 **)(v19 + 8);
  if (v20 == 3)
  {
    v21 = applyIgtreeExpansion((uint64_t)a1, v16, *(char **)(a2 + 24), v14, &v26);
    if ((v21 & 0x80000000) != 0)
      goto LABEL_21;
    if (v26)
      goto LABEL_20;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"IGtree found NOMATCH. Set user-defined func from domain def file.", v11, v12, v13, 0);
LABEL_17:
    *v14 = *(char **)(v19 + 16);
    goto LABEL_20;
  }
  if (v20 == 2)
    goto LABEL_17;
  if (v20 != 1)
  {
    v22 = 0;
    goto LABEL_22;
  }
  if (*((_DWORD *)a1 + 219) >= *((_DWORD *)a1 + 218))
  {
    cstdlib_strcpy(v17, "DefaultFunc");
    goto LABEL_20;
  }
  if (cstdlib_strcmp(*(const char **)(v19 + 16), "0"))
  {
    v21 = applyIgtreeExpansion((uint64_t)a1, v16, v18, v14, &v26);
    if ((v21 & 0x80000000) != 0)
      goto LABEL_21;
    if (v26)
    {
LABEL_20:
      v21 = writeExpandFuncNameToLDO((uint64_t)a1, v18, (uint64_t *)v14, (unsigned __int16 *)v16, v10, v11, v12, v13);
      goto LABEL_21;
    }
  }
  v21 = applyNNExpansion(a1, v16, v14);
  if ((v21 & 0x80000000) == 0)
  {
    ++*((_DWORD *)a1 + 219);
    goto LABEL_20;
  }
LABEL_21:
  v22 = v21;
LABEL_22:
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 56);
  if (v23)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v23);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 56) = 0;
  }
  if (v14)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v14);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"sortExpansionNNTN_new : DoExpansions End (%x)", v11, v12, v13, v22);
  return v22;
}

uint64_t fe_nntn_tryLoading_NNTN_igModel(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v25;
  int v26[2];
  char *v27;
  char *__s2;
  _OWORD v29[16];
  _OWORD __s1[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, 240);
  *(_QWORD *)v26 = 0;
  v27 = 0;
  *a4 = 0;
  __s2 = 0;
  memset(__s1, 0, sizeof(__s1));
  v29[15] = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v27), (Str & 0x80000000) != 0)
    || (cstdlib_strcat((char *)__s1, "nntnigrules_"),
        cstdlib_strcat((char *)__s1, __s2),
        cstdlib_strcat((char *)__s1, "_"),
        cstdlib_strcat((char *)__s1, v27),
        Str = brokeraux_ComposeBrokerString(a3, (const char *)__s1, 1, 1, __s2, 0, 0, (char *)v29, 0x100uLL),
        (Str & 0x80000000) != 0)
    || (Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v29, "IGTR", 1031, (uint64_t *)v26),
        (Str & 0x80000000) != 0))
  {
    v21 = Str;
  }
  else
  {
    v16 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_NNTN", 37000, 0, v17, v18, v19, v20, v25);
      v21 = 2589990922;
    }
  }
  if (*(_QWORD *)v26)
  {
    v22 = ssftriff_reader_ObjClose(*(_QWORD **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1)
      return v21;
    else
      return v22;
  }
  return v21;
}

uint64_t fe_nntn_IGTR(uint64_t a1, __int16 *a2, char *a3, char *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 v19;
  _QWORD *v20;
  char *v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  signed int v42;
  BOOL v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v57;
  char *__src;
  _DWORD *v59;
  char *__dst;
  unsigned int v61;
  char *__s;
  signed int v63;
  char *__s1;

  v8 = *(_QWORD *)(a1 + 936);
  __s1 = 0;
  v9 = *(_QWORD *)(a1 + 944);
  if (!v9)
  {
    log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 0, 0, (uint64_t)"IGTree model for nntn does not exist", a6, a7, a8, v57);
    return 0;
  }
  v15 = 2589990922;
  v16 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 8 * *(unsigned __int8 *)(v9 + 1296) - 8);
  if (v16)
  {
    v17 = v16;
    v18 = *(unsigned __int8 *)(v9 + 1296);
    v19 = v18 - 1;
    if (v18 != 1)
    {
      v20 = (_QWORD *)v16;
      v21 = a4;
      v22 = a5;
      v23 = v19;
      while (1)
      {
        v24 = (char *)heap_Calloc(*(_QWORD **)(v8 + 8), 1, 65);
        *v20 = v24;
        if (!v24)
          break;
        cstdlib_strcpy(v24, "=");
        ++v20;
        if (!--v23)
        {
          v18 = *(unsigned __int8 *)(v9 + 1296);
          a5 = v22;
          a4 = v21;
          v15 = 2589990922;
          goto LABEL_8;
        }
      }
      log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 37000, 0, v25, v26, v27, v28, v57);
      v15 = 2589990922;
      goto LABEL_64;
    }
LABEL_8:
    __s = *(char **)(a1 + 304);
    v63 = *(__int16 *)(a1 + 312);
    v29 = *(_QWORD *)(v9 + 1312);
    v30 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 2048);
    if (v30)
    {
      v61 = v18;
      v35 = v18 != 0;
      v36 = v18 - 1;
      if ((_DWORD)v36 != 0 && v35)
      {
        v59 = a5;
        __dst = (char *)v30;
        __src = a3;
        v37 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + v37), "token"))
        {
          v37 += 8;
          if (8 * v36 == v37)
          {
            v15 = 0;
            goto LABEL_29;
          }
        }
        if ((*a2 & 0x80000000) == 0
          && ((v41 = (unsigned __int16)*a2, v42 = a2[1], v42 > (__int16)v41) ? (v43 = v42 <= v63) : (v43 = 0), v43))
        {
          v44 = __dst;
          cstdlib_strncpy(__dst, &__s[v41], (unsigned __int16)(v42 - v41));
        }
        else
        {
          v44 = __dst;
          cstdlib_strcpy(__dst, "=");
        }
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 3, v17, v44);
        if ((v15 & 0x80000000) != 0)
        {
LABEL_63:
          heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)__dst);
          goto LABEL_64;
        }
LABEL_29:
        v45 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v45), "lchar"))
        {
          if (v36 == ++v45)
            goto LABEL_34;
        }
        nntn_feat_character(__s, a2, v63, -1, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 2, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_34:
        v46 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v46), "llchar"))
        {
          if (v36 == ++v46)
            goto LABEL_39;
        }
        nntn_feat_character(__s, a2, v63, -2, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 1, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_39:
        v47 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v47), "l3char"))
        {
          if (v36 == ++v47)
            goto LABEL_44;
        }
        nntn_feat_character(__s, a2, v63, -3, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 0, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_44:
        v48 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v48), "rchar"))
        {
          if (v36 == ++v48)
            goto LABEL_49;
        }
        nntn_feat_character(__s, a2, v63, 1, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 4, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_49:
        v49 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v49), "rrchar"))
        {
          if (v36 == ++v49)
            goto LABEL_54;
        }
        nntn_feat_character(__s, a2, v63, 2, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 5, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_54:
        v50 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v50), "r3char"))
        {
          if (v36 == ++v50)
            goto LABEL_59;
        }
        nntn_feat_character(__s, a2, v63, 3, __dst);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 6, v17, __dst);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_63;
LABEL_59:
        v51 = a4;
        v52 = 0;
        while (cstdlib_strcmp(*(const char **)(v29 + 8 * v52), "tnpattern"))
        {
          if (v36 == ++v52)
          {
            v53 = (uint64_t)__dst;
            goto LABEL_72;
          }
        }
        v53 = (uint64_t)__dst;
        cstdlib_strcpy(__dst, __src);
        v15 = fe_nntn_IGTR_setFeature(v8, v29, v61, 7, v17, __dst);
LABEL_72:
        heap_Free(*(_QWORD **)(v8 + 8), v53);
        a5 = v59;
        a4 = v51;
        if ((v15 & 0x80000000) != 0)
          goto LABEL_64;
      }
      else
      {
        heap_Free(*(_QWORD **)(v8 + 8), v30);
        v15 = 0;
      }
      igtree_Process(v9, v17, &__s1);
      if (cstdlib_strcmp(__s1, "NOMATCH"))
      {
        cstdlib_strcpy(a4, __s1);
        *a5 = 1;
      }
      else
      {
        log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"No igtree rule matched", v38, v39, v40, 0);
        *a5 = 0;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 37000, 0, v31, v32, v33, v34, v57);
    }
LABEL_64:
    if (*(_BYTE *)(v9 + 1296) != 1)
    {
      v54 = (unsigned __int16)(*(unsigned __int8 *)(v9 + 1296) - 1);
      v55 = (uint64_t *)v17;
      do
      {
        if (*v55)
        {
          heap_Free(*(_QWORD **)(v8 + 8), *v55);
          *v55 = 0;
        }
        ++v55;
        --v54;
      }
      while (v54);
    }
    heap_Free(*(_QWORD **)(v8 + 8), v17);
  }
  return v15;
}

uint64_t fe_nntn_IGTR_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (a2 < 2)
    return 0;
  v6 = 0;
  v7 = a2 - 1;
  v8 = g_featureNames_0[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6)
      return 0;
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_nntn_IGTR_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  size_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  unsigned __int16 v20;

  v20 = -1;
  result = fe_nntn_IGTR_isFeatureRequired(a2, a3, a4, &v20);
  if ((_DWORD)result)
  {
    if (cstdlib_strcmp(a6, ""))
    {
      v10 = cstdlib_strlen(a6);
      v11 = v20;
      if (v10 <= 0x40)
      {
        v13 = *(char **)(a5 + 8 * v20);
      }
      else
      {
        v12 = cstdlib_strlen(a6);
        v13 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a5 + 8 * v11), v12 + 1);
        if (!v13)
        {
          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNTN", 37000, 0, v14, v15, v16, v17, v19);
          return 2589990922;
        }
        *(_QWORD *)(a5 + 8 * v11) = v13;
      }
      v18 = a6;
    }
    else
    {
      v13 = *(char **)(a5 + 8 * v20);
      v18 = "=";
    }
    cstdlib_strcpy(v13, v18);
    return 0;
  }
  return result;
}

char *nntn_feat_character(char *__s, __int16 *a2, signed int a3, int a4, char *__dst)
{
  signed int v6;
  signed int v8;
  char *result;
  __int16 v11;
  signed int NextUtf8Offset;
  signed int PreviousUtf8Offset;
  BOOL v15;

  v6 = *a2;
  if (v6 < 0)
    return cstdlib_strcpy(__dst, "=");
  v8 = a2[1];
  if (v6 >= v8 || v8 > a3)
    return cstdlib_strcpy(__dst, "=");
  v11 = a4;
  if (a4 < 0)
  {
    if (!*a2)
      return cstdlib_strcpy(__dst, "=");
    do
    {
      PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v6);
      v6 = PreviousUtf8Offset;
      v15 = (unsigned __int16)~v11++ == 0;
    }
    while (!v15 && PreviousUtf8Offset);
    goto LABEL_16;
  }
  if (a4)
  {
    v6 = v8 - 1;
    if (v8 - 1 == a3)
      return cstdlib_strcpy(__dst, "=");
    do
    {
      NextUtf8Offset = utf8_GetNextUtf8Offset(__s, v6);
      v6 = NextUtf8Offset;
      --v11;
    }
    while (v11 && NextUtf8Offset != a3);
LABEL_16:
    if (!v11)
      goto LABEL_19;
    return cstdlib_strcpy(__dst, "=");
  }
  v6 = 0;
LABEL_19:
  if ((utf8_getUTF8Char((uint64_t)__s, v6, __dst) & 0x80000000) != 0)
    return cstdlib_strcpy(__dst, "=");
  result = (char *)cstdlib_strcmp(__dst, "");
  if (!(_DWORD)result)
    return cstdlib_strcpy(__dst, "=");
  return result;
}

uint64_t NNTNERROR(int a1)
{
  return a1 | 0x9A602000;
}

uint64_t fe_nntn_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2589990913;
  result = 0;
  *a2 = &ITokenizer;
  return result;
}

uint64_t NNTN_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2589990919;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t NNTN_ClassClose()
{
  return 0;
}

uint64_t NNTN_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Object;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t IDStrings;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[16];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v5 = 2589990922;
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v70 = 0;
  memset(v77, 0, sizeof(v77));
  if (!a5)
    return 2589990919;
  v68 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v76);
  if ((inited & 0x80000000) == 0)
  {
    inited = InitRsrcFunction(a1, a2, &v75);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(v76 + 32), (uint64_t)"FE_NNTN", 4, 0, (uint64_t)"nntn : ObjOpen Begin", v12, v13, v14, v65);
      v15 = heap_Calloc(*(_QWORD **)(v76 + 8), 1, 16);
      if (!v15)
      {
        log_OutPublic(*(_QWORD *)(v76 + 32), (uint64_t)"FE_NNTN", 21000, 0, v16, v17, v18, v19, v66);
LABEL_49:
        v60 = *(_QWORD *)(v76 + 32);
        v61 = "nntn : ObjOpen End (%x)";
        v66 = v5;
        v62 = 4;
LABEL_50:
        log_OutText(v60, (uint64_t)"FE_NNTN", v62, 0, (uint64_t)v61, v25, v26, v27, v66);
        return v5;
      }
      v20 = v15;
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = 0;
      v21 = heap_Calloc(*(_QWORD **)(v76 + 8), 1, 968);
      if (!v21)
      {
LABEL_48:
        NNTN_loc_ObjClose(v76, (uint64_t *)v20, v22, v23, v24, v25, v26, v27);
        goto LABEL_49;
      }
      v28 = v21;
      *(_QWORD *)v20 = v21;
      v67 = v20;
      *(_DWORD *)(v20 + 8) = 58765;
      *(_QWORD *)v21 = v76;
      *(_QWORD *)(v21 + 8) = a3;
      v29 = v75;
      *(_QWORD *)(v21 + 16) = a4;
      *(_QWORD *)(v21 + 24) = v29;
      *(_QWORD *)(v21 + 32) = a1;
      *(_QWORD *)(v21 + 40) = a2;
      *(_QWORD *)(v21 + 96) = 0;
      v30 = (_OWORD *)(v21 + 96);
      *(_DWORD *)(v21 + 104) = 0;
      *(_QWORD *)(v21 + 120) = 0;
      v31 = (_OWORD *)(v21 + 120);
      *(_DWORD *)(v21 + 128) = 0;
      *(_QWORD *)(v21 + 152) = 0;
      *(_QWORD *)(v21 + 160) = 0;
      *(_QWORD *)(v21 + 176) = 0;
      *(_QWORD *)(v21 + 184) = "FE_NNTN";
      *(_WORD *)(v21 + 336) = 0;
      *(_QWORD *)(v21 + 344) = 0;
      *(_BYTE *)(v21 + 352) = 0;
      *(_DWORD *)(v21 + 548) = 0;
      *(_QWORD *)(v21 + 552) = 0;
      *(_QWORD *)(v21 + 520) = 0;
      *(_WORD *)(v21 + 528) = 0;
      *(_QWORD *)(v21 + 536) = 0;
      *(_WORD *)(v21 + 544) = 0;
      *(_QWORD *)(v21 + 288) = 0;
      *(_DWORD *)(v21 + 296) = 0;
      *(_WORD *)(v21 + 608) = 257;
      *(_QWORD *)(v21 + 856) = 0;
      *(_QWORD *)(v21 + 888) = 0;
      *(_WORD *)(v21 + 280) = 32;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v76 + 40), (uint64_t)"tokentninitstrlen", (unsigned int *)&v71 + 1) & 0x80000000) == 0)
        *(_WORD *)(v28 + 280) = WORD2(v71);
      *(_WORD *)(v28 + 282) = 5;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v76 + 40), (uint64_t)"tokentnmaxpcreframeblocks", (unsigned int *)&v71 + 1) & 0x80000000) == 0)
        *(_WORD *)(v28 + 282) = WORD2(v71);
      *(_WORD *)(v28 + 284) = 20;
      if ((paramc_ParamGetUInt(*(_QWORD *)(v76 + 40), (uint64_t)"tokentnnumframesinblock", (unsigned int *)&v71 + 1) & 0x80000000) == 0)
        *(_WORD *)(v28 + 284) = WORD2(v71);
      v32 = nuance_pcre_ObjOpen(a3, a4, v28 + 136);
      if ((v32 & 0x80000000) != 0)
      {
        v59 = v32;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), 24021, 0, v33, v34, v35, v36, v66);
        v5 = v59;
LABEL_47:
        v20 = v67;
        goto LABEL_48;
      }
      Object = addIdentifier2List(v28, "x");
      if ((Object & 0x80000000) == 0)
      {
        if ((objc_GetObject(*(_QWORD *)(v76 + 48), (uint64_t)"FE_DCTLKP", &v73) & 0x80000000) != 0)
        {
          v64 = 24022;
        }
        else
        {
          v42 = v73;
          *(_QWORD *)(v28 + 88) = *(_QWORD *)(v73 + 8);
          *v30 = *(_OWORD *)(v42 + 16);
          if ((objc_GetObject(*(_QWORD *)(v76 + 48), (uint64_t)"FE_DEPES", &v72) & 0x80000000) == 0)
          {
            v43 = v72;
            *(_QWORD *)(v28 + 112) = *(_QWORD *)(v72 + 8);
            *v31 = *(_OWORD *)(v43 + 16);
            Object = objc_GetObject(*(_QWORD *)(v76 + 48), (uint64_t)"LINGDB", &v74);
            if ((Object & 0x80000000) == 0)
            {
              *(_QWORD *)(v28 + 64) = *(_QWORD *)(v74 + 8);
              IDStrings = FEData_ObjOpen_NNTN((uint64_t)a3, a4, (uint64_t *)v28, v23, v24, v25, v26, v27);
              v20 = v67;
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              IDStrings = FERuntimeData_ObjOpen((uint64_t *)v28, v45, v22, v23, v24, v25, v26, v27);
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              IDStrings = FEFunctionMap_ObjOpen((uint64_t *)v28, v46, v22, v23, v24, v25, v26, v27);
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              IDStrings = tokenizer_NNTN_ObjOpen((uint64_t *)v28, v47, v22, v23, v24, v25, v26, v27);
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              IDStrings = textnormalizer_ObjOpen((uint64_t *)v28, v48, v22, v23, v24, v25, v26, v27);
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              IDStrings = createIDStrings((_BYTE *)v28);
              if ((IDStrings & 0x80000000) != 0)
                goto LABEL_56;
              if (!*(_WORD *)(v28 + 336))
                goto LABEL_57;
              v49 = 0;
              do
              {
                log_OutText(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), 5, 0, (uint64_t)"nntn : identifier=\"%s\"", v25, v26, v27, *(_QWORD *)(*(_QWORD *)(v28 + 344) + 8 * v49++));
                v51 = *(unsigned __int16 *)(v28 + 336);
              }
              while (v49 < v51);
              if (!*(_WORD *)(v28 + 336))
              {
LABEL_57:
                log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), (uint64_t)"FE_NNTN", 24024, 0, v24, v25, v26, v27, v66);
                v5 = 2589990912;
                goto LABEL_48;
              }
              IDStrings = FEData_blockData_loadDataFiles_NNTN(v28, v51, *(_QWORD *)(v28 + 344), v50, v24, v25, v26, v27);
              if ((IDStrings & 0x80000000) != 0 || (IDStrings = getFECFGInfo(v28), (IDStrings & 0x80000000) != 0))
              {
LABEL_56:
                v5 = IDStrings;
                goto LABEL_48;
              }
              v52 = *(_QWORD *)v28;
              *(_QWORD *)(v28 + 848) = *(_QWORD *)v28;
              *(_DWORD *)(v28 + 876) = 0;
              if (!*(_DWORD *)(v28 + 840))
                goto LABEL_35;
              Object = nn_word_lkp_GetInterface(1u, &v68);
              if ((Object & 0x80000000) == 0)
              {
                *(_QWORD *)(v28 + 888) = v68;
                *(_QWORD *)(v28 + 896) = safeh_GetNullHandle();
                *(_QWORD *)(v28 + 904) = v53;
                *(_QWORD *)(v28 + 912) = safeh_GetNullHandle();
                *(_QWORD *)(v28 + 920) = v54;
                Object = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _WORD *, uint64_t, uint64_t))(v68 + 16))(*(_QWORD *)(v28 + 896), *(_QWORD *)(v28 + 904), "nntn", a3, a4, v28 + 912);
                if ((Object & 0x80000000) == 0)
                {
                  inited = fi_model_getBrokerString_0(*(_QWORD *)v28, (char *)v77);
                  if ((inited & 0x80000000) == 0)
                  {
                    v55 = fi_init(a3, a4, a1, a2, &v70, 0, (uint64_t)v77, "FINN", 1, 0);
                    if ((v55 & 0x80000000) != 0)
                    {
                      v5 = v55;
                      v60 = *(_QWORD *)(*(_QWORD *)v28 + 32);
                      v61 = "create FI model failed";
                      goto LABEL_61;
                    }
                    *(_QWORD *)(v28 + 856) = v70;
                    v52 = *(_QWORD *)v28;
LABEL_35:
                    *(_QWORD *)(v28 + 936) = v52;
                    if (!*(_DWORD *)(v28 + 928))
                    {
LABEL_38:
                      *(_QWORD *)(v28 + 192) = heap_Alloc;
                      *(_QWORD *)(v28 + 200) = heap_Calloc;
                      *(_QWORD *)(v28 + 208) = heap_Realloc;
                      *(_QWORD *)(v28 + 216) = heap_Free;
                      v57 = OOCAllocator_Con(v28 + 224, (_OWORD *)(v28 + 192), *(_QWORD *)(v52 + 8));
                      v5 = LH_ERROR_to_VERROR(v57);
                      if ((v5 & 0x80000000) == 0)
                      {
                        *(_QWORD *)(v28 + 264) = 0;
                        v20 = v67;
                        if (*(_DWORD *)(v28 + 840))
                        {
                          v5 = load_lua_code(v28, &v71);
                          if ((v5 & 0x80000000) != 0)
                            goto LABEL_48;
                        }
LABEL_55:
                        *(_QWORD *)a5 = v20;
                        *(_DWORD *)(a5 + 8) = 58764;
                        goto LABEL_49;
                      }
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), (uint64_t)"FE_NNTN", 24024, 0, v58, v25, v26, v27, v66);
                      goto LABEL_47;
                    }
                    v56 = fe_nntn_tryLoading_NNTN_igModel(a3, a4, v52, &v69);
                    if ((v56 & 0x80000000) == 0)
                    {
                      *(_QWORD *)(v28 + 944) = v69;
                      v52 = *(_QWORD *)v28;
                      goto LABEL_38;
                    }
                    v5 = v56;
                    v60 = *(_QWORD *)(*(_QWORD *)v28 + 32);
                    v61 = "create Igtree model failed";
LABEL_61:
                    v62 = 5;
                    goto LABEL_50;
                  }
                  return inited;
                }
              }
            }
            goto LABEL_46;
          }
          v64 = 24023;
        }
        v20 = v67;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v28 + 32), *(_QWORD *)(v28 + 184), v64, 0, v38, v39, v40, v41, v66);
        v5 = 0;
        goto LABEL_55;
      }
LABEL_46:
      v5 = Object;
      goto LABEL_47;
    }
  }
  return inited;
}

uint64_t NNTN_ObjClose(uint64_t *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0
    || (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 888);
  if (v10)
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 24))(*(_QWORD *)(v9 + 912), *(_QWORD *)(v9 + 920));
    *(_QWORD *)(v9 + 888) = 0;
  }
  if (*(_DWORD *)(v9 + 840))
  {
    v3 = *(uint64_t **)(v9 + 856);
    if (v3)
    {
      fi_deinit(*(_QWORD *)v9, *(_QWORD *)(v9 + 24), v3);
      *(_QWORD *)(v9 + 856) = 0;
    }
    if (*(_DWORD *)(v9 + 864) || *(_DWORD *)(v9 + 868))
      *(_QWORD *)(v9 + 864) = 0;
  }
  if (*(_DWORD *)(v9 + 928))
  {
    v11 = *(_QWORD *)(v9 + 944);
    if (v11)
    {
      igtree_Deinit(*(_QWORD *)v9, v11, (uint64_t)v3, v4, v5, v6, v7, v8);
      heap_Free(*(_QWORD **)(*(_QWORD *)v9 + 8), *(_QWORD *)(v9 + 944));
      *(_QWORD *)(v9 + 944) = 0;
    }
  }
  v12 = *(_QWORD *)(v9 + 272);
  if (v12)
  {
    OOC_PlacementDeleteObject(v9 + 224, v12);
    *(_QWORD *)(v9 + 272) = 0;
  }
  OOCAllocator_Des();
  v13 = *(_QWORD *)(v9 + 184);
  log_OutText(*(_QWORD *)(*(_QWORD *)v9 + 32), v13, 4, 0, (uint64_t)"nntn : ObjClose Begin", v14, v15, v16, v36);
  v17 = *(_QWORD *)v9;
  v25 = FEData_blockData_unloadDataFiles((_QWORD *)v9, v18, v19, v20, v21, v22, v23, v24);
  NNTN_loc_ObjClose(v17, a1, v26, v27, v28, v29, v30, v31);
  log_OutText(*(_QWORD *)(v17 + 32), v13, 4, 0, (uint64_t)"nntn : ObjClose End (%x)", v32, v33, v34, v25);
  return v25;
}

uint64_t NNTN_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t IDStrings;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t DataFiles_NNTN;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t BrokerString_0;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v37 = 0;
  memset(v39, 0, sizeof(v39));
  v35 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0)
    return TOKENTNERROR(8);
  v38 = 0;
  if ((safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
    return TOKENTNERROR(8);
  v3 = *a1;
  v4 = *(_QWORD *)(v3 + 344);
  if (v4)
  {
    if (*(_WORD *)(v3 + 336))
    {
      v5 = 0;
      do
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)v3 + 8), *(_QWORD *)(*(_QWORD *)(v3 + 344) + 8 * v5));
        *(_QWORD *)(*(_QWORD *)(v3 + 344) + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned __int16 *)(v3 + 336));
      v4 = *(_QWORD *)(v3 + 344);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)v3 + 8), v4);
    *(_QWORD *)(v3 + 344) = 0;
    *(_WORD *)(v3 + 336) = 0;
    *(_BYTE *)(v3 + 352) = 0;
    *(_WORD *)(v3 + 608) = 257;
  }
  IDStrings = addIdentifier2List(v3, "x");
  if ((IDStrings & 0x80000000) != 0)
    goto LABEL_47;
  IDStrings = createIDStrings((_BYTE *)v3);
  if ((IDStrings & 0x80000000) != 0)
    goto LABEL_47;
  if (!*(_QWORD *)(v3 + 344))
    return 6;
  if (*(_WORD *)(v3 + 336))
  {
    v13 = 0;
    do
      log_OutText(*(_QWORD *)(*(_QWORD *)v3 + 32), *(_QWORD *)(v3 + 184), 5, 0, (uint64_t)"nntn : identifier=\"%s\"", v10, v11, v12, *(_QWORD *)(*(_QWORD *)(v3 + 344) + 8 * v13++));
    while (v13 < *(unsigned __int16 *)(v3 + 336));
  }
  v14 = *(_QWORD *)(v3 + 888);
  if (v14)
  {
    v38 = *(_QWORD *)(v3 + 888);
    (*(void (**)(_QWORD, _QWORD))(v14 + 24))(*(_QWORD *)(v3 + 912), *(_QWORD *)(v3 + 920));
    *(_QWORD *)(v3 + 888) = 0;
  }
  if (*(_DWORD *)(v3 + 840))
  {
    v7 = *(uint64_t **)(v3 + 856);
    if (v7)
    {
      fi_deinit(*(_QWORD *)v3, *(_QWORD *)(v3 + 24), v7);
      *(_QWORD *)(v3 + 856) = 0;
    }
    if (*(_DWORD *)(v3 + 864) || *(_DWORD *)(v3 + 868))
      *(_QWORD *)(v3 + 864) = 0;
  }
  if (*(_DWORD *)(v3 + 928))
  {
    v15 = *(_QWORD *)(v3 + 944);
    if (v15)
    {
      igtree_Deinit(*(_QWORD *)v3, v15, (uint64_t)v7, v8, v9, v10, v11, v12);
      heap_Free(*(_QWORD **)(*(_QWORD *)v3 + 8), *(_QWORD *)(v3 + 944));
      *(_QWORD *)(v3 + 944) = 0;
    }
    if (*(_QWORD *)(v3 + 936))
      *(_QWORD *)(v3 + 936) = 0;
  }
  v16 = *(_QWORD *)(v3 + 288);
  if (v16)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)v3 + 8), v16);
    *(_QWORD *)(v3 + 288) = 0;
  }
  IDStrings = FEData_blockData_unloadUnusedDataFiles((_QWORD *)v3, *(unsigned __int16 *)(v3 + 336), *(_QWORD *)(v3 + 344), v8, v9, v10, v11, v12);
  if ((IDStrings & 0x80000000) != 0)
    goto LABEL_47;
  IDStrings = getFECFGInfo(v3);
  if ((IDStrings & 0x80000000) != 0)
    goto LABEL_47;
  if (!*(_WORD *)(v3 + 336))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v3 + 32), (uint64_t)"FE_NNTN", 24024, 0, v18, v19, v20, v21, v34);
    return 2589990912;
  }
  DataFiles_NNTN = FEData_blockData_loadDataFiles_NNTN(v3, *(unsigned __int16 *)(v3 + 336), *(_QWORD *)(v3 + 344), v17, v18, v19, v20, v21);
  if ((DataFiles_NNTN & 0x80000000) != 0)
    goto LABEL_48;
  v23 = *(_QWORD *)v3;
  *(_QWORD *)(v3 + 848) = *(_QWORD *)v3;
  if (!*(_DWORD *)(v3 + 840))
    goto LABEL_40;
  IDStrings = nn_word_lkp_GetInterface(1u, &v38);
  if ((IDStrings & 0x80000000) != 0
    || (*(_QWORD *)(v3 + 888) = v38,
        *(_QWORD *)(v3 + 896) = safeh_GetNullHandle(),
        *(_QWORD *)(v3 + 904) = v24,
        *(_QWORD *)(v3 + 912) = safeh_GetNullHandle(),
        *(_QWORD *)(v3 + 920) = v25,
        IDStrings = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(v38 + 16))(*(_QWORD *)(v3 + 896), *(_QWORD *)(v3 + 904), "nntn", *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), v3 + 912), (IDStrings & 0x80000000) != 0))
  {
LABEL_47:
    DataFiles_NNTN = IDStrings;
    goto LABEL_48;
  }
  BrokerString_0 = fi_model_getBrokerString_0(*(_QWORD *)v3, (char *)v39);
  if ((BrokerString_0 & 0x80000000) != 0)
    return BrokerString_0;
  DataFiles_NNTN = fi_init(*(_WORD **)(v3 + 8), *(_QWORD *)(v3 + 16), *(_WORD **)(v3 + 32), *(_QWORD *)(v3 + 40), &v37, 0, (uint64_t)v39, "FINN", 1, 0);
  if ((DataFiles_NNTN & 0x80000000) != 0)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    v33 = "create FI model failed";
    goto LABEL_57;
  }
  *(_QWORD *)(v3 + 856) = v37;
  v23 = *(_QWORD *)v3;
LABEL_40:
  *(_QWORD *)(v3 + 936) = v23;
  if (*(_DWORD *)(v3 + 928))
  {
    DataFiles_NNTN = fe_nntn_tryLoading_NNTN_igModel(*(_WORD **)(v3 + 8), *(_QWORD *)(v3 + 16), v23, &v36);
    if ((DataFiles_NNTN & 0x80000000) == 0)
    {
      *(_QWORD *)(v3 + 944) = v36;
      goto LABEL_43;
    }
    v32 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    v33 = "create Igtree model failed";
LABEL_57:
    log_OutText(v32, (uint64_t)"FE_NNTN", 5, 0, (uint64_t)v33, v27, v28, v29, v34);
    return DataFiles_NNTN;
  }
LABEL_43:
  if (*(_DWORD *)(v3 + 840))
  {
    DataFiles_NNTN = load_lua_code(v3, &v35);
    if ((DataFiles_NNTN & 0x80000000) != 0)
    {
LABEL_48:
      v31 = *(_QWORD *)(v3 + 272);
      if (v31)
      {
        OOC_PlacementDeleteObject(v3 + 224, v31);
        *(_QWORD *)(v3 + 272) = 0;
      }
      OOCAllocator_Des();
    }
  }
  return DataFiles_NNTN;
}

uint64_t NNTN_ProcessStart(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0
    || (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  v6 = *a1;
  log_OutText(*(_QWORD *)(*(_QWORD *)*a1 + 32), *(_QWORD *)(*a1 + 184), 4, 0, (uint64_t)"nntn : ProcessStart Begin", v3, v4, v5, v17);
  if (*(_WORD *)(v6 + 336))
  {
    v15 = nuance_pcre_Init(*(_QWORD **)(v6 + 136), *(_QWORD *)(v6 + 144), *(unsigned __int16 *)(v6 + 282), *(_WORD *)(v6 + 284));
    if ((v15 & 0x80000000) != 0)
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(v6 + 184), 24051, 0, v11, v12, v13, v14, v18);
    log_OutText(*(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(v6 + 184), 4, 0, (uint64_t)"nntn : ProcessStart End (%x)", v12, v13, v14, v15);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v6 + 32), (uint64_t)"FE_NNTN", 24024, 0, v7, v8, v9, v10, v18);
    return 2589990912;
  }
  return v15;
}

uint64_t NNTN_Process(uint64_t *a1, int a2, _QWORD *a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t inited;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;

  v55 = 0;
  v54 = 0;
  v53 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0
    || (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  v12 = (_QWORD **)*a1;
  log_OutText((*v12)[4], (uint64_t)v12[23], 4, 0, (uint64_t)"NNTN : Process Begin", v9, v10, v11, v51);
  v12[9] = a3;
  *((_DWORD *)v12 + 20) = a4;
  *((_DWORD *)v12 + 219) = 0;
  *((_DWORD *)v12 + 137) = log_GetLogLevel((*v12)[4]) > 4;
  v12[33] = 0;
  v13 = LingDBHasSentence((uint64_t)v12[8], (uint64_t)v12[9], (uint64_t)v12[10], &v55);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = (uint64_t *)(v12 + 33);
    if (!v55)
      goto LABEL_46;
    inited = initLDO((uint64_t)(v12 + 28), v12 + 33);
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = importFromLingDB((uint64_t)*v12, (uint64_t)v12[8], (uint64_t)v12[9], (uint64_t)v12[10], (uint64_t *)v12 + 33);
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    v13 = 2589990922;
    v16 = LDO_ComputeText(*v14, &v54);
    if ((LH_ERROR_to_VERROR(v16) & 0x80000000) != 0)
      goto LABEL_52;
    v12[38] = (_QWORD *)LHString_BorrowCPtr(v54);
    *((_WORD *)v12 + 156) = LHString_Length(v54);
    log_OutText((*v12)[4], (uint64_t)v12[23], 5, 0, (uint64_t)"<LOGFE> processing sentence : _%s_", v17, v18, v19, (uint64_t)v12[38]);
    v20 = heap_Calloc((_QWORD *)(*v12)[1], 1, *((unsigned __int16 *)v12 + 156) + 1);
    v12[69] = (_QWORD *)v20;
    if (!v20)
      goto LABEL_52;
    *((_WORD *)v12 + 157) = 1;
    if (*((_WORD *)v12 + 156))
    {
      v21 = 0;
      while (utf8_strchr(g_szSpace, (const char *)v12[38] + (unsigned __int16)v21))
      {
        v21 += utf8_determineUTF8CharLength(*((unsigned __int8 *)v12[38] + (unsigned __int16)v21));
        v22 = *((unsigned __int16 *)v12 + 156);
        if (v22 <= (unsigned __int16)v21)
          goto LABEL_16;
      }
      v22 = *((unsigned __int16 *)v12 + 156);
LABEL_16:
      if (v22 > (unsigned __int16)v21)
      {
        do
        {
          v21 = (unsigned __int16)v21;
          if (utf8_strchr(g_szSpace, (const char *)v12[38] + (unsigned __int16)v21))
          {
            ++*((_WORD *)v12 + 157);
            for (i = *((unsigned __int8 *)v12[38] + (unsigned __int16)v21);
                  ;
                  i = *((unsigned __int8 *)v12[38] + (unsigned __int16)v21))
            {
              v21 += utf8_determineUTF8CharLength(i);
              if (*((unsigned __int16 *)v12 + 156) <= (unsigned __int16)v21
                || !utf8_strchr(g_szSpace, (const char *)v12[38] + (unsigned __int16)v21))
              {
                break;
              }
            }
          }
          else
          {
            LOWORD(v21) = v21 + utf8_determineUTF8CharLength(*((unsigned __int8 *)v12[38] + (unsigned __int16)v21));
          }
        }
        while (*((unsigned __int16 *)v12 + 156) > (unsigned __int16)v21);
      }
    }
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 49));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 51));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 61));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 70));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 72));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 74));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initStrRes((uint64_t)v12, (uint64_t)(v12 + 63));
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initAlignmentData((uint64_t)v12);
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initMatchList((uint64_t)v12);
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    inited = initSolutionList((uint64_t)v12);
    if ((inited & 0x80000000) != 0)
      goto LABEL_51;
    v25 = heap_Calloc((_QWORD *)(*v12)[1], 1, 40);
    v12[40] = (_QWORD *)v25;
    v30 = (uint64_t)*v12;
    if (v25)
    {
      v31 = heap_Calloc(*(_QWORD **)(v30 + 8), 1, 48);
      v12[41] = (_QWORD *)v31;
      if (v31)
      {
        if (*((_DWORD *)v12 + 238) == 1)
        {
          inited = updateLDOTreeNode_CHN((uint64_t *)v12, &v53);
          if ((inited & 0x80000000) != 0)
            goto LABEL_51;
          if (!v53)
          {
            *a5 = 1;
            goto LABEL_51;
          }
        }
        inited = nntn_AllInOneLoop((uint64_t)v12, v32, v33, v34, v26, v27, v28, v29);
        if ((inited & 0x80000000) == 0)
        {
          v38 = (uint64_t)v12[34];
          if (!v38)
          {
            log_OutText((*v12)[4], (uint64_t)v12[23], 0, 0, (uint64_t)"NNTN : error - pLuaVMLDO is NULL", v35, v36, v37, v52);
            v13 = 2589990918;
            goto LABEL_52;
          }
          v39 = LuaVMLDO_RunFunction(v38, (uint64_t)"run", *v14);
          inited = LH_ERROR_to_VERROR(v39);
          if ((inited & 0x80000000) == 0)
          {
            if (*((_DWORD *)v12 + 137) != 1
              || (inited = dumpTokenRecordsInLingDB(v12, (uint64_t)"At End of Processing", 1, v40, v41, v42, v43, v44),
                  (inited & 0x80000000) == 0))
            {
              inited = exportToLingDB((uint64_t)*v12, (uint64_t)v12[8], (uint64_t)v12[9], (uint64_t)v12[10], (uint64_t)(v12 + 28), (uint64_t)v12[33], 1, 1);
              if ((inited & 0x80000000) == 0)
              {
                v13 = replaceBasicTokensWithTokenIntTnInLingDB((uint64_t)*v12, (uint64_t)v12[8], (uint64_t)v12[9], (uint64_t)v12[10], (uint64_t)v12[33], (uint64_t)v12[23]);
                if ((v13 & 0x80000000) != 0)
                {
LABEL_52:
                  if (v54)
                  {
                    OOC_PlacementDeleteObject((uint64_t)(v12 + 28), v54);
                    v54 = 0;
                  }
                  if (*v14)
                  {
                    deinitLDO((uint64_t)(v12 + 28), *v14);
                    v12[33] = 0;
                  }
                  v45 = (uint64_t)v12[69];
                  if (v45)
                  {
                    heap_Free((_QWORD *)(*v12)[1], v45);
                    v12[69] = 0;
                  }
                  clearStrRes(*v12, (uint64_t)(v12 + 49));
                  clearStrRes(*v12, (uint64_t)(v12 + 51));
                  clearStrRes(*v12, (uint64_t)(v12 + 61));
                  clearStrRes(*v12, (uint64_t)(v12 + 70));
                  clearStrRes(*v12, (uint64_t)(v12 + 72));
                  clearStrRes(*v12, (uint64_t)(v12 + 74));
                  clearStrRes(*v12, (uint64_t)(v12 + 63));
                  freeAlignmentData(v12);
                  freeMatchList(v12);
                  freeSolutionList(v12);
                  v49 = (uint64_t)v12[40];
                  if (v49)
                  {
                    heap_Free((_QWORD *)(*v12)[1], v49);
                    v12[40] = 0;
                  }
                  v50 = (uint64_t)v12[41];
                  if (v50)
                  {
                    heap_Free((_QWORD *)(*v12)[1], v50);
                    v12[41] = 0;
                  }
                  log_OutText((*v12)[4], (uint64_t)v12[23], 4, 0, (uint64_t)"nntn : Process End (%x)", v46, v47, v48, v13);
                  return v13;
                }
LABEL_46:
                *a5 = 1;
                goto LABEL_52;
              }
            }
          }
        }
LABEL_51:
        v13 = inited;
        goto LABEL_52;
      }
      v30 = (uint64_t)*v12;
    }
    log_OutPublic(*(_QWORD *)(v30 + 32), (uint64_t)v12[23], 24048, 0, v26, v27, v28, v29, v52);
    goto LABEL_52;
  }
  return v13;
}

uint64_t NNTN_ProcessEnd(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0
    || (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  v6 = *a1;
  log_OutText(*(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(v6 + 184), 4, 0, (uint64_t)"nntn : ProcessEnd Begin", v3, v4, v5, v12);
  v7 = nuance_pcre_DeInit(*(_QWORD **)(v6 + 136), *(_QWORD *)(v6 + 144));
  log_OutText(*(_QWORD *)(*(_QWORD *)v6 + 32), *(_QWORD *)(v6 + 184), 4, 0, (uint64_t)"nntn : ProcessEnd End (%x)", v8, v9, v10, v7);
  return 0;
}

uint64_t addIdentifier2List(uint64_t a1, char *__s2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v19;

  v4 = *(unsigned __int16 *)(a1 + 336);
  if (*(_WORD *)(a1 + 336))
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(a1 + 344);
      if (v6)
      {
        if (!cstdlib_strcmp(*(const char **)(v6 + 8 * v5), __s2))
          return 0;
        v4 = *(unsigned __int16 *)(a1 + 336);
      }
      ++v5;
    }
    while (v5 < v4);
    if (!v4)
      goto LABEL_10;
    v7 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 344), 8 * v4 + 8);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_10:
    v7 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8);
    if (!v7)
    {
LABEL_13:
      v17 = 2589990922;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v8, v9, v10, v11, v19);
      return v17;
    }
  }
  *(_QWORD *)(a1 + 344) = v7;
  v12 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v13 = cstdlib_strlen(__s2);
  v14 = heap_Calloc(v12, 1, (v13 + 1));
  v15 = *(unsigned __int16 *)(a1 + 336);
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v15) = v14;
  v16 = *(char **)(*(_QWORD *)(a1 + 344) + 8 * v15);
  if (!v16)
    goto LABEL_13;
  cstdlib_strcpy(v16, __s2);
  v17 = 0;
  ++*(_WORD *)(a1 + 336);
  return v17;
}

uint64_t createIDStrings(_BYTE *a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  char *v5;
  char v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  char *__s;
  char v14[16];
  __int128 v15;
  char __s1[16];
  __int128 v17;
  char __s2[16];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  __s = 0;
  *(_OWORD *)__s2 = 0u;
  v19 = 0u;
  *(_OWORD *)__s1 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  result = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__s, 0);
  if ((result & 0x80000000) == 0)
  {
    if (cstdlib_strlen(__s))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = __s;
        v6 = __s[v3];
        __s1[v3] = v6;
        __s2[v3] = v6;
        v3 = (unsigned __int16)++v4;
      }
      while (cstdlib_strlen(v5) > (unsigned __int16)v4);
    }
    strcpy(&__s2[2], "x");
    __s1[3] = 0;
    if (!cstdlib_strcmp(__s1, "cah"))
      __s2[1] = 110;
    result = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &__s, 0);
    if ((result & 0x80000000) == 0)
    {
      if (cstdlib_strlen(__s) <= 0x1A)
      {
        if (cstdlib_strlen(__s))
        {
          v7 = 0;
          v8 = 0;
          do
          {
            v9 = __s;
            v14[v7] = __s[v7];
            v7 = (unsigned __int16)++v8;
          }
          while (cstdlib_strlen(v9) > (unsigned __int16)v8);
        }
        v14[cstdlib_strlen(__s)] = 0;
        if ((int)cstdlib_strlen(__s2) >= 1)
        {
          v10 = 0;
          do
          {
            __s2[(unsigned __int16)v10] = ssft_tolower(__s2[(unsigned __int16)v10]);
            ++v10;
          }
          while ((int)cstdlib_strlen(__s2) > (unsigned __int16)v10);
        }
        if ((int)cstdlib_strlen(__s1) >= 1)
        {
          v11 = 0;
          do
          {
            __s1[(unsigned __int16)v11] = ssft_tolower(__s1[(unsigned __int16)v11]);
            ++v11;
          }
          while ((int)cstdlib_strlen(__s1) > (unsigned __int16)v11);
        }
        if ((int)cstdlib_strlen(v14) >= 1)
        {
          v12 = 0;
          do
          {
            v14[(unsigned __int16)v12] = ssft_tolower(v14[(unsigned __int16)v12]);
            ++v12;
          }
          while ((int)cstdlib_strlen(v14) > (unsigned __int16)v12);
        }
        result = addIdentifier2List((uint64_t)a1, __s2);
        if ((result & 0x80000000) == 0)
        {
          a1[352] = a1[336];
          result = addIdentifier2List((uint64_t)a1, __s1);
          if ((result & 0x80000000) == 0)
            return addIdentifier2List((uint64_t)a1, v14);
        }
      }
      else
      {
        return 2589990912;
      }
    }
  }
  return result;
}

uint64_t getFECFGInfo(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  unsigned __int8 __c;
  char **__c_1;
  unsigned __int16 v27;

  v2 = 2589991940;
  v27 = -1;
  __c_1 = 0;
  __c = 0;
  v3 = 2589990912;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nrpart_g2p", &__c_1, &v27, &__c) & 0x80000000) != 0)return v3;
  if (v27 == 1 && __c_1 != 0)
  {
    v5 = cstdlib_strchr(*__c_1, __c);
    if (v5)
      *v5 = 0;
    *(_BYTE *)(a1 + 608) = cstdlib_atoi((unsigned __int8 *)*__c_1);
  }
  v27 = -1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nrpart_tn", &__c_1, &v27, &__c) & 0x80000000) != 0)return v3;
  if (v27 == 1 && __c_1)
  {
    v6 = cstdlib_strchr(*__c_1, __c);
    if (v6)
      *v6 = 0;
    *(_BYTE *)(a1 + 609) = cstdlib_atoi((unsigned __int8 *)*__c_1);
  }
  v27 = -1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_nn_step", &__c_1, &v27, &__c) & 0x80000000) == 0)
  {
    v7 = v27;
    if (v27)
    {
      *(_DWORD *)(a1 + 864) = 0;
      if (v7 == 1 && __c_1)
      {
        v8 = cstdlib_strchr(*__c_1, __c);
        if (v8)
          *v8 = 0;
        *(_DWORD *)(a1 + 864) = (unsigned __int16)LH_atou(*__c_1);
      }
      v27 = -1;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_nn_vect", &__c_1, &v27, &__c) & 0x80000000) == 0)
      {
        v9 = v27;
        if (v27)
        {
          *(_DWORD *)(a1 + 868) = 0;
          if (v9 == 1 && __c_1)
          {
            v10 = cstdlib_strchr(*__c_1, __c);
            if (v10)
              *v10 = 0;
            *(_DWORD *)(a1 + 868) = (unsigned __int16)LH_atou(*__c_1);
          }
          v27 = -1;
          if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_nn_max", &__c_1, &v27, &__c) & 0x80000000) == 0)
          {
            v11 = v27;
            if (v27)
            {
              *(_DWORD *)(a1 + 872) = 0;
              if (v11 == 1 && __c_1)
              {
                v12 = cstdlib_strchr(*__c_1, __c);
                if (v12)
                  *v12 = 0;
                *(_DWORD *)(a1 + 872) = (unsigned __int16)LH_atou(*__c_1);
              }
              *(_DWORD *)(a1 + 880) = 0;
              v27 = -1;
              if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_window_option", &__c_1, &v27, &__c) & 0x80000000) != 0|| (v16 = v27) == 0)
              {
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"Load nntn_window_option from CFG failed, use default 0.", v13, v14, v15, v24);
                v16 = v27;
              }
              if (v16 == 1 && __c_1)
              {
                v17 = cstdlib_strchr(*__c_1, __c);
                if (v17)
                  *v17 = 0;
                *(_DWORD *)(a1 + 880) = (unsigned __int16)LH_atou(*__c_1);
              }
              v27 = -1;
              if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_use_NNTN", &__c_1, &v27, &__c) & 0x80000000) == 0&& v27)
              {
                if (v27 == 1 && __c_1)
                {
                  v18 = cstdlib_strchr(*__c_1, __c);
                  if (v18)
                    *v18 = 0;
                  if (!cstdlib_strcmp(*__c_1, "yes"))
                    *(_DWORD *)(a1 + 840) = 1;
                }
                v27 = -1;
                if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_use_NNTN_IGTree", &__c_1, &v27, &__c) & 0x80000000) == 0&& v27)
                {
                  if (v27 == 1 && __c_1)
                  {
                    v19 = cstdlib_strchr(*__c_1, __c);
                    if (v19)
                      *v19 = 0;
                    if (!cstdlib_strcmp(*__c_1, "yes"))
                      *(_DWORD *)(a1 + 928) = 1;
                  }
                  v27 = -1;
                  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_one_char_per_node", &__c_1, &v27, &__c) & 0x80000000) == 0&& v27)
                  {
                    if (v27 == 1 && __c_1)
                    {
                      v20 = cstdlib_strchr(*__c_1, __c);
                      if (v20)
                        *v20 = 0;
                      if (!cstdlib_strcmp(*__c_1, "yes"))
                        *(_DWORD *)(a1 + 952) = 1;
                    }
                    v27 = -1;
                    v21 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 88) + 96))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), "fecfg", "nntn_feat_focus", &__c_1, &v27, &__c);
                    if ((v21 & 0x80000000) == 0)
                    {
                      if (v27)
                      {
                        v3 = v21;
                        if (v27 == 1 && __c_1)
                        {
                          v22 = cstdlib_strchr(*__c_1, __c);
                          if (v22)
                            *v22 = 0;
                          if (!cstdlib_strcmp(*__c_1, "yes"))
                            *(_DWORD *)(a1 + 956) = 1;
                        }
                        return v3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t fi_model_getBrokerString_0(uint64_t a1, char *a2)
{
  uint64_t result;
  char *v5;
  char *__s2;
  char __s1[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  __s2 = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)__s1 = 0u;
  v8 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v5);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "nntn_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v5);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t load_lua_code(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int IsLuaCodeAvailable;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int ScriptFromRIFF;

  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 272);
  if (v4)
  {
    OOC_PlacementDeleteObject(a1 + 224, v4);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v5 = (uint64_t *)(a1 + 272);
  OOCAllocator_Des();
  IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), 0, a2);
  v7 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
  if ((v7 & 0x80000000) == 0)
  {
    if (*a2 != 1)
      return v7;
    *a2 = 0;
    v8 = OOCAllocator_Con(a1 + 224, (_OWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)a1 + 8));
    v9 = LH_ERROR_to_VERROR(v8);
    if ((v9 & 0x80000000) != 0
      || (v10 = PNEW_LuaVMLDO_Con(a1 + 224, a1 + 224, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)hlp_lua_log_callback_1, (uint64_t **)(a1 + 272)), v9 = LH_ERROR_to_VERROR(v10), (v9 & 0x80000000) != 0))
    {
      v7 = v9;
    }
    else
    {
      ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*v5, 0);
      v7 = LH_ERROR_to_VERROR(ScriptFromRIFF);
      if ((v7 & 0x80000000) == 0)
      {
        *a2 = 1;
        return v7;
      }
    }
  }
  if (*v5)
  {
    OOC_PlacementDeleteObject(a1 + 224, *v5);
    *v5 = 0;
  }
  OOCAllocator_Des();
  return v7;
}

uint64_t NNTN_loc_ObjClose(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t NullHandle;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if (a2)
  {
    v9 = result;
    log_OutText(*(_QWORD *)(result + 32), (uint64_t)"FE_NNTN", 4, 0, (uint64_t)"nntn : loc ObjClose Begin", a6, a7, a8, v72);
    NullHandle = safeh_GetNullHandle();
    v12 = 0;
    if (!safeh_HandlesEqual(*a2, a2[1], NullHandle, v11))
    {
      result = safeh_HandleCheck(*a2, a2[1], 58765, 968);
      if ((result & 0x80000000) != 0)
        return result;
      LODWORD(v12) = result;
      v20 = *a2;
      v21 = tokenizer_NNTN_ObjClose((_QWORD *)*a2, v13, v14, v15, v16, v17, v18, v19);
      if (v21 < 0)
        LODWORD(v12) = v21;
      v29 = textnormalizer_ObjClose((uint64_t *)v20, v22, v23, v24, v25, v26, v27, v28);
      if (v29 < 0)
        LODWORD(v12) = v29;
      v30 = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144), v30, v31))
      {
        v39 = nuance_pcre_ObjClose(*(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144));
        if (v39 < 0)
          LODWORD(v12) = v39;
      }
      v40 = FEData_ObjClose_NNTN((uint64_t *)v20, v32, v33, v34, v35, v36, v37, v38);
      if (v40 < 0)
        LODWORD(v12) = v40;
      *(_QWORD *)(v20 + 152) = 0;
      v48 = FERuntimeData_ObjClose((_QWORD *)v20, v41, v42, v43, v44, v45, v46, v47);
      if (v48 < 0)
        LODWORD(v12) = v48;
      *(_QWORD *)(v20 + 176) = 0;
      v56 = FEFunctionMap_ObjClose((_QWORD *)v20, v49, v50, v51, v52, v53, v54, v55);
      if (v56 >= 0)
        v12 = v12;
      else
        v12 = v56;
      *(_QWORD *)(v20 + 160) = 0;
      if (*(_QWORD *)(v20 + 88))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"FE_DCTLKP");
      if (*(_QWORD *)(v20 + 112))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"FE_DEPES");
      if (*(_QWORD *)(v20 + 64))
        objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"LINGDB");
      v63 = *(_QWORD *)(v20 + 344);
      if (v63)
      {
        if (*(_WORD *)(v20 + 336))
        {
          v64 = 0;
          do
          {
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v64));
            *(_QWORD *)(*(_QWORD *)(v20 + 344) + 8 * v64++) = 0;
          }
          while (v64 < *(unsigned __int16 *)(v20 + 336));
          v63 = *(_QWORD *)(v20 + 344);
        }
        heap_Free(*(_QWORD **)(v9 + 8), v63);
      }
      v65 = *(_QWORD *)(v20 + 288);
      if (v65)
        heap_Free(*(_QWORD **)(v9 + 8), v65);
      v66 = *(_QWORD *)(v20 + 888);
      if (v66)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD))(v66 + 24))(*(_QWORD *)(v20 + 912), *(_QWORD *)(v20 + 920));
        *(_QWORD *)(v20 + 888) = 0;
      }
      if (*(_DWORD *)(v20 + 840))
      {
        v57 = *(uint64_t **)(v20 + 856);
        if (v57)
        {
          v12 = fi_deinit(*(_QWORD *)v20, *(_QWORD *)(v20 + 24), v57);
          *(_QWORD *)(v20 + 856) = 0;
        }
        if (*(_DWORD *)(v20 + 864) || *(_DWORD *)(v20 + 868))
          *(_QWORD *)(v20 + 864) = 0;
      }
      if (*(_DWORD *)(v20 + 928))
      {
        v67 = *(_QWORD *)(v20 + 944);
        if (v67)
        {
          igtree_Deinit(*(_QWORD *)v20, v67, (uint64_t)v57, v58, v59, v60, v61, v62);
          heap_Free(*(_QWORD **)(*(_QWORD *)v20 + 8), *(_QWORD *)(v20 + 944));
          *(_QWORD *)(v20 + 944) = 0;
        }
        if (*(_QWORD *)(v20 + 936))
          *(_QWORD *)(v20 + 936) = 0;
      }
      v68 = *(_QWORD *)(v20 + 272);
      if (v68)
      {
        OOC_PlacementDeleteObject(v20 + 224, v68);
        *(_QWORD *)(v20 + 272) = 0;
      }
      OOCAllocator_Des();
      heap_Free(*(_QWORD **)(v9 + 8), v20);
    }
    heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a2);
    return log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"FE_NNTN", 4, 0, (uint64_t)"nntn : loc ObjClose End (%x)", v69, v70, v71, v12);
  }
  return result;
}

uint64_t hlp_lua_log_callback_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"FE_NNTN", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t setDomainsOnSentence_NNTN(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DomainDefBlockInfo;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  int StringAttribute;
  __int16 AbsoluteFrom;
  __int16 AbsoluteTo;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int IsRemappable;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  int v79;
  char *__s2;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int16 v83;
  _WORD *v84;
  _WORD v85[500];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v84 = 0;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  if (!a1)
    return NNTNERROR(7);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : setDomainsOnSentence_NNTN Begin", a6, a7, a8, v73);
  DomainDefBlockInfo = dumpTokenRecordsInLingDB(a1, (uint64_t)"TRACE", 1, v9, v10, v11, v12, v13);
  if ((DomainDefBlockInfo & 0x80000000) == 0)
  {
    FEData_blockData_getDomains2SearchIn(a1, *((unsigned __int16 *)a1 + 168), a1[43], (uint64_t)v85, &v83, 0, v14, v15);
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : %d block(s) to search in", v17, v18, v19, v83);
    if (v83)
    {
      for (i = 0; i < v83; ++i)
      {
        FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[i], &v82, v20, v21, v22, v23, v24);
        if (*(_WORD *)(v82 + 24))
        {
          v26 = 0;
          v27 = 0;
          do
          {
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : domain[%d,%d,%s,type=%d] marker \"%s\"%s %s", v22, v23, v24, i);
            ++v27;
            v26 += 72;
          }
          while (v27 < *(unsigned __int16 *)(v82 + 24));
        }
      }
      v28 = *(_QWORD *)(a1[33] + 32);
      v29 = *(uint64_t ***)(v28 + 24);
      if ((unint64_t)v29 < *(_QWORD *)(v28 + 32))
      {
        do
        {
          __s2 = 0;
          v79 = 0;
          StringAttribute = LDOObject_GetStringAttribute(*v29, "TNTAG", &v79, (uint64_t *)&__s2);
          DomainDefBlockInfo = LH_ERROR_to_VERROR(StringAttribute);
          if ((DomainDefBlockInfo & 0x80000000) != 0)
            return DomainDefBlockInfo;
          if (v79)
          {
            v78 = 0;
            v77 = 0;
            AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)*v29);
            v75 = v29;
            AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)*v29);
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing DB token %s %d,%d", v33, v34, v35, (uint64_t)__s2);
            if (v83)
            {
              v38 = 0;
              v39 = AbsoluteFrom;
              v40 = 0;
              v41 = 0;
              v76 = v39;
              do
              {
                FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[v38], &v82, v36, v37, v22, v23, v24);
                IsRemappable = FEData_blockData_IsRemappable(a1, __s2, &v78, (_WORD *)&v77 + 1, &v77, v42, v43, v44);
                v81 = 0;
                if (IsRemappable == 1)
                {
                  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"domain %s is remappable to %s", v22, v23, v24, (uint64_t)__s2);
                  v41 = HIWORD(v77);
                  v40 = v77;
                  DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v77, &v81, v46, v47, v48, v49, v50);
                  if ((DomainDefBlockInfo & 0x80000000) != 0)
                    return DomainDefBlockInfo;
                  v55 = v81;
                  if (v81)
                  {
LABEL_25:
                    v59 = v55[2];
                    DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, (void **)&v84);
                    if ((DomainDefBlockInfo & 0x80000000) != 0)
                      return DomainDefBlockInfo;
                    v63 = v84;
                    v84[3] = v40;
                    v63[2] = v41;
                    *v63 = v76;
                    v63[1] = AbsoluteTo;
                    *((_DWORD *)v63 + 2) = 1;
                    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set Active Domain[%s:%s] range %d,%d", v60, v61, v62, *v81);
                    if (!cstdlib_strcmp((const char *)(*(_QWORD *)(v59 + 72 * v41 + 48) + *(unsigned __int16 *)(v59 + 72 * v41)), (const char *)a1[36])|| *(_DWORD *)(v59 + 72 * v41 + 60) == 1)
                    {
                      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"normal domain OR was remapped to EscNormal - set additional domains, if any", v22, v23, v24, v74);
                      v64 = v82;
                      if (*(_WORD *)(v82 + 24))
                      {
                        v65 = 0;
                        v66 = 48;
                        do
                        {
                          if (v41 != v65)
                          {
                            v67 = *(_QWORD *)(v64 + 16);
                            if (!cstdlib_strcmp((const char *)(*(_QWORD *)(v67 + v66) + *(unsigned __int16 *)(v67 + v66 - 48)), (const char *)a1[36])|| *(_DWORD *)(v67 + v66 + 12) == 1)
                            {
                              DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, (void **)&v84);
                              if ((DomainDefBlockInfo & 0x80000000) != 0)
                                return DomainDefBlockInfo;
                              v71 = v84;
                              v84[3] = v85[v38];
                              v71[2] = v65;
                              *v71 = v76;
                              v71[1] = AbsoluteTo;
                              *((_DWORD *)v71 + 2) = 1;
                              log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set (as mapped to normal) Active Domain[%s:%s] range %d,%d", v68, v69, v70, *(_QWORD *)v82);
                            }
                          }
                          ++v65;
                          v64 = v82;
                          v66 += 72;
                        }
                        while (v65 < *(unsigned __int16 *)(v82 + 24));
                      }
                    }
                    goto LABEL_36;
                  }
                  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%s", v51, v52, v53, v54, "skipping undefined remapped domain:");
                }
                else
                {
                  v55 = (uint64_t *)v82;
                  if (*(_WORD *)(v82 + 24))
                  {
                    v56 = 0;
                    v57 = 0;
                    while (1)
                    {
                      v58 = cstdlib_strcmp((const char *)(*(_QWORD *)(v55[2] + v56 + 48) + *(unsigned __int16 *)(v55[2] + v56)), __s2);
                      v55 = (uint64_t *)v82;
                      if (!v58)
                        break;
                      ++v57;
                      v56 += 72;
                      if (v57 >= *(unsigned __int16 *)(v82 + 24))
                        goto LABEL_22;
                    }
                    v40 = v85[v38];
                    v81 = (uint64_t *)v82;
                    v41 = (unsigned __int16)v57;
                    if (v82)
                      goto LABEL_25;
                  }
                  else
                  {
LABEL_22:
                    v55 = v81;
                    if (v81)
                      goto LABEL_25;
                  }
                }
LABEL_36:
                ++v38;
              }
              while (v38 < v83);
            }
            v29 = v75;
          }
          ++v29;
        }
        while ((unint64_t)v29 < *(_QWORD *)(*(_QWORD *)(a1[33] + 32) + 32));
      }
      log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : setDomainsOnSentence_NNTN End (%x)", v22, v23, v24, DomainDefBlockInfo);
    }
    else
    {
      return 0;
    }
  }
  return DomainDefBlockInfo;
}

uint64_t mergeDomainsOnSentence_NNTN(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t DomainBlockIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t DomainDefBlockInfo;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  int v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  _WORD v45[500];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  if (!a1)
    return NNTNERROR(7);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : mergeDomainsOnSentence_NNTN Begin", a6, a7, a8, v36);
  v42 = 0;
  FERuntimeData_GetActiveDomains((uint64_t)a1, (uint64_t)v45, &v42, 0, *((unsigned __int16 *)a1 + 156), 1);
  if (v42)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v9], &v44);
      DomainBlockIndex = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v9++], &v41, (_WORD *)&v40 + 1);
      v15 = v42;
      v16 = v10;
      if (v9 < v42)
      {
        while (1)
        {
          FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v16], &v43);
          v17 = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v16], &v40, &v39);
          if (*((_DWORD *)v43 + 2) == 1
            && (unsigned __int16)v40 == v41
            && v39 == HIWORD(v40)
            && *v44 == *v43
            && v44[1] == v43[1])
          {
            *((_DWORD *)v43 + 2) = 0;
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : Remove duplicate domain %d,%d RANGE %d,%d ?", v12, v13, v14, 1);
          }
          if ((v17 & 0x80000000) != 0)
            goto LABEL_42;
          ++v16;
          v15 = v42;
          if (v16 >= v42)
            goto LABEL_15;
        }
      }
      v17 = DomainBlockIndex;
LABEL_15:
      ++v10;
    }
    while (v9 < v15);
    if ((_DWORD)v15)
    {
      v18 = 0;
      while (1)
      {
        FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v18], &v44);
        DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v18], &v41, (_WORD *)&v40 + 1);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          goto LABEL_41;
        DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, v41, &v38, v20, v21, v12, v13, v14);
        if ((DomainDefBlockInfo & 0x80000000) != 0)
          goto LABEL_41;
        v22 = *(_QWORD *)(v38 + 16);
        v23 = (unsigned __int16 *)(v22 + 72 * HIWORD(v40));
        if (*(_WORD *)(*(_QWORD *)(v38 + 40) + 16 * v23[6] + 8) && *((_DWORD *)v44 + 2) == 1)
        {
          v24 = v44[1];
          v25 = v22 + 72 * HIWORD(v40);
          v27 = *(_QWORD *)(v25 + 48);
          v26 = (_QWORD *)(v25 + 48);
          log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : Modify domain \"%s\" RANGE %d,%d ?", v12, v13, v14, v27 + *v23);
          if (v18 < v42)
          {
            v28 = v18;
            do
            {
              FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v28], &v43);
              DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v28], &v40, &v39);
              if ((DomainDefBlockInfo & 0x80000000) != 0)
                goto LABEL_41;
              DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v40, &v37, v29, v30, v12, v13, v14);
              if ((DomainDefBlockInfo & 0x80000000) != 0)
                goto LABEL_41;
              if (v43 != v44 && *((_DWORD *)v43 + 2) == 1)
              {
                v31 = *v43;
                if ((v31 == v24 || v31 == *v44 && v43[1] == v44[1])
                  && !cstdlib_strcmp((const char *)(*v26 + *v23), (const char *)(*(_QWORD *)(*(_QWORD *)(v37 + 16) + 72 * v39 + 48)+ *(unsigned __int16 *)(*(_QWORD *)(v37 + 16) + 72 * v39))))
                {
                  v24 = v43[1];
                  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : Modify domain \"%s\" RANGE %d,%d -> %d %d (merge with %s)", v32, v33, v34, *v26 + *v23);
                  *((_DWORD *)v43 + 2) = 0;
                }
              }
            }
            while (++v28 < v42);
          }
          if ((__int16)v44[1] != v24)
          {
            DomainDefBlockInfo = FERuntimeData_UpdateDomainRange(a1, (unsigned __int16)v18, v24);
            if ((DomainDefBlockInfo & 0x80000000) != 0)
              goto LABEL_41;
          }
        }
        if (++v18 >= v42)
          goto LABEL_40;
      }
    }
    if ((v17 & 0x80000000) != 0)
      goto LABEL_42;
  }
LABEL_40:
  DomainDefBlockInfo = FERuntimeData_PruneAndDumpActiveDomains(a1);
LABEL_41:
  v17 = DomainDefBlockInfo;
LABEL_42:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"nntn : mergeDomainsOnSentence_NNTN End (%x)", v12, v13, v14, v17);
  return v17;
}

uint64_t ActivateStatNntn()
{
  return 0;
}

uint64_t fe_mnc_nntn_Process(uint64_t a1, __int16 *a2, char *a3)
{
  return stat_mnctn_seq2rule(a1, (uint64_t *)(a1 + 848), a2, a3);
}

uint64_t stat_mnctn_seq2rule(uint64_t a1, uint64_t *a2, __int16 *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int NextUtf8Offset;
  int v45;
  int v46;
  float v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  unsigned int v54;
  char *__dst;
  uint64_t v56;
  int v57;
  float *v58;
  int v59;
  const char **v60;
  const void *v61;
  int v62;

  v8 = *a2;
  v62 = 0;
  v60 = 0;
  v9 = a2[5];
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v9 + 40))(a2[8], a2[9], &v62);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 8);
  if (!v11)
  {
    v32 = 2589990922;
    log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 37000, 0, v12, v13, v14, v15, v53);
    return v32;
  }
  v16 = (char *)v11;
  v17 = heap_Calloc(*(_QWORD **)(v8 + 8), 1, 2048);
  if (!v17)
  {
    v32 = 2589990922;
    log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 37000, 0, v18, v19, v20, v21, v53);
    v33 = *(_QWORD **)(v8 + 8);
    v34 = (uint64_t)v16;
    goto LABEL_48;
  }
  v22 = (char *)v17;
  v23 = *((_DWORD *)a2 + 5);
  if (*(_DWORD *)(a1 + 956) == 1)
    ++v23;
  v24 = (void *)heap_Alloc(*(_QWORD *)(v8 + 8), 4 * (v23 * *((_DWORD *)a2 + 4)));
  v61 = v24;
  if (!v24)
  {
    v32 = 2589990922;
    log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 37000, 0, v25, v26, v27, v28, v53);
    goto LABEL_47;
  }
  v29 = *a3;
  __dst = a4;
  v58 = (float *)v24;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = *((_DWORD *)a2 + 4) - (a3[1] - v29);
    v54 = ((v30 & 1) + v30) >> 1;
    v31 = -v54;
  }
  else
  {
    LOWORD(v54) = 7;
    LOWORD(v31) = -7;
  }
  cstdlib_strncpy(v22, (const char *)(*(_QWORD *)(a1 + 304) + v29), (unsigned __int16)(a3[1] - v29 + 1));
  v39 = 0;
  v57 = 0;
  v40 = 0;
  v22[a3[1] - *a3] = 0;
LABEL_15:
  v41 = v39;
  while (1)
  {
    v42 = *((unsigned int *)a2 + 4);
    if (v42 <= v41)
      break;
    if ((v31 & 0x8000) != 0)
    {
      nnGetChar(*(char **)(a1 + 304), a3, (__int16)v31, v16);
      LOWORD(v31) = v31 + 1;
      if (cstdlib_strcmp(v16, ""))
      {
        v59 = v40;
LABEL_32:
        v46 = *(_DWORD *)(a1 + 956);
        v47 = 0.0;
        goto LABEL_33;
      }
    }
    else
    {
      v59 = v40;
      if (v57)
      {
        if ((__int16)v54 < 1)
        {
          cstdlib_strcpy(v16, "</s>");
        }
        else
        {
          nnGetChar(*(char **)(a1 + 304), a3, (__int16)(8 - v54), v16);
          if (!cstdlib_strcmp(v16, ""))
            cstdlib_strcpy(v16, "</s>");
          LOWORD(v54) = v54 - 1;
        }
        goto LABEL_32;
      }
      v56 = v8;
      if ((v40 & 0x8000) == 0)
      {
        v43 = v40;
        if ((_WORD)v40)
        {
          NextUtf8Offset = 0;
          while (NextUtf8Offset != cstdlib_strlen(v22))
          {
            NextUtf8Offset = utf8_GetNextUtf8Offset(v22, NextUtf8Offset);
            v45 = (__int16)v43--;
            if (v45 <= 1)
              goto LABEL_28;
          }
        }
        else
        {
          NextUtf8Offset = 0;
LABEL_28:
          if ((utf8_getUTF8Char((uint64_t)v22, NextUtf8Offset, v16) & 0x80000000) == 0)
            goto LABEL_30;
        }
      }
      cstdlib_strcpy(v16, "");
LABEL_30:
      v40 = v59 + 1;
      v57 = 1;
      v8 = v56;
      if (cstdlib_strcmp(v16, ""))
      {
        ++v59;
        v57 = 0;
        v46 = *(_DWORD *)(a1 + 956);
        v47 = 1.0;
LABEL_33:
        if (v46 == 1)
        {
          *v58 = v47;
          v48 = v58 + 1;
        }
        else
        {
          v48 = v58;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, char *, float *))(v9 + 56))(a2[8], a2[9], v16, v48) & 0x1FFF) == 0x14)
        {
          log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"No embedding vector for character %s . Fall back!", v36, v37, v38, (uint64_t)v16);
          cstdlib_strcpy(v16, "</s>");
          (*(void (**)(uint64_t, uint64_t, char *, float *))(v9 + 56))(a2[8], a2[9], v16, v48);
        }
        v39 = v41 + 1;
        v58 = &v48[v62];
        v40 = v59;
        goto LABEL_15;
      }
    }
  }
  v32 = fi_predict((uint64_t ***)a2[1], &v61, v42, &v60, v35, v36, v37, v38);
  if ((v32 & 0x80000000) != 0)
    log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNTN", 5, 0, (uint64_t)"FIhmogrph Prediction Failed", v49, v50, v51, 0);
  else
    cstdlib_strcpy(__dst, *v60);
LABEL_47:
  heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)v16);
  v33 = *(_QWORD **)(v8 + 8);
  v34 = (uint64_t)v22;
LABEL_48:
  heap_Free(v33, v34);
  return v32;
}

char *nnGetChar(char *__s, __int16 *a2, int a3, char *__dst)
{
  signed int NextUtf8Offset;
  signed int v6;
  int v7;
  int v9;
  signed int PreviousUtf8Offset;
  BOOL v11;
  char *result;

  NextUtf8Offset = *a2;
  if ((NextUtf8Offset & 0x80000000) == 0)
  {
    v6 = a2[1];
    if (NextUtf8Offset < v6)
    {
      v7 = a3;
      if ((a3 & 0x80000000) == 0)
      {
        if (a3)
        {
          NextUtf8Offset = v6 - 1;
          while (NextUtf8Offset != cstdlib_strlen(__s))
          {
            NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
            v9 = (__int16)v7--;
            if (v9 <= 1)
              goto LABEL_15;
          }
          return cstdlib_strcpy(__dst, "");
        }
        NextUtf8Offset = 0;
LABEL_15:
        result = (char *)utf8_getUTF8Char((uint64_t)__s, NextUtf8Offset, __dst);
        if ((result & 0x80000000) == 0)
          return result;
        return cstdlib_strcpy(__dst, "");
      }
      if (*a2)
      {
        do
        {
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, NextUtf8Offset);
          NextUtf8Offset = PreviousUtf8Offset;
          v11 = (unsigned __int16)~(_WORD)v7 == 0;
          LOWORD(v7) = v7 + 1;
        }
        while (!v11 && PreviousUtf8Offset);
        if (!(_WORD)v7)
          goto LABEL_15;
      }
    }
  }
  return cstdlib_strcpy(__dst, "");
}

uint64_t FEData_ObjOpen_NNTN(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;

  log_OutText(*(_QWORD *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen Begin", a6, a7, a8, v27);
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(*a3 + 8), 1, 24);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(*a3 + 32), a3[23], 24048, 0, v12, v13, v14, v15, v28);
    return NNTNERROR(10);
  }
  v16 = v9;
  a3[19] = (uint64_t)v9;
  v17 = FEData_functionData_ObjOpen(a3, v9, v10, v11, v12, v13, v14, v15);
  if ((v17 & 0x80000000) != 0
    || (v17 = FEData_domainDefs_ObjOpen(a3, v16 + 1, v19, v20, v21, v22, v23, v24), (v17 & 0x80000000) != 0))
  {
    v25 = v17;
LABEL_8:
    FEData_ObjClose_NNTN(a3, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_9;
  }
  v25 = FEData_blockData_ObjOpen(a3, v16 + 2, v19, v20, v21, v22, v23, v24);
  if ((v25 & 0x80000000) != 0)
    goto LABEL_8;
LABEL_9:
  log_OutText(*(_QWORD *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen End (%x)", v22, v23, v24, v25);
  return v25;
}

uint64_t FEData_ObjClose_NNTN(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v8 = a1[19];
  if (!v8)
    return NNTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose Begin", a6, a7, a8, v39);
  v17 = FEData_functionData_ObjClose(a1, v10, v11, v12, v13, v14, v15, v16);
  LODWORD(v18) = v17 & (v17 >> 31);
  v26 = FEData_blockData_ObjClose_NNTN(a1, v19, v20, v21, v22, v23, v24, v25);
  if (v26 < 0)
    LODWORD(v18) = v26;
  v34 = FEData_domainDefs_ObjClose(a1, v27, v28, v29, v30, v31, v32, v33);
  if (v34 >= 0)
    v18 = v18;
  else
    v18 = v34;
  heap_Free(*(_QWORD **)(*a1 + 8), v8);
  a1[19] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose End (%x)", v35, v36, v37, v18);
  return v18;
}

uint64_t FEData_loc_ObjClose_NNTN()
{
  return 0;
}

uint64_t FEData_blockData_ObjClose_NNTN(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a1[19] + 16);
  v10 = *(_QWORD *)(*a1 + 32);
  v11 = a1[23];
  if (v9)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"blockData : ObjClose Begin", a6, a7, a8, v16);
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"blockData : ObjClose End (%x)", v12, v13, v14, 0);
    heap_Free(*(_QWORD **)(*a1 + 8), v9);
    return 0;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v16);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_newGetPriorityList_NNTN(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v11;

  v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    else
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 17) + 8) + 8 * a2) + 16);
      if (*(unsigned __int16 *)(v9 + 48) > a3)
      {
        *a4 = *(_QWORD *)(v9 + 40) + 16 * a3;
        return 0;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24043, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "priorityListIndex");
    }
    return FEDATA_ERROR(25);
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v11);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndCheckData_NNTN(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8)
                               + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2))
                   + 8);
    v10 = *(_QWORD *)(v9 + 48);
    v11 = *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
    v12 = *(_QWORD *)(v9 + 24);
    v13 = v10 + 32 * v11;
    *a3 = v12 + *(unsigned __int16 *)(v13 + 4);
    if (a4)
      *a4 = *(_WORD *)(v13 + 24);
    if (*(_WORD *)(v13 + 24))
      v14 = *(_QWORD *)(v10 + 32 * v11 + 8);
    else
      v14 = 0;
    *a5 = v14;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenData_NNTN(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8)
                               + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2))
                   + 8);
    *a3 = *(_QWORD *)(v9 + 24)
        + *(unsigned __int16 *)(*(_QWORD *)(v9 + 48) + 32 * *(unsigned __int16 *)(*(_QWORD *)a2 + 4) + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndExpansionData_NNTN(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8)
                               + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2))
                   + 8);
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(_QWORD *)(v9 + 48) + 32 * *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
    *a3 = v10 + *(unsigned __int16 *)(v11 + 4);
    *a4 = *(_WORD *)(v11 + 26);
    if (*(_WORD *)(v11 + 26))
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = 0;
    *a5 = v12;
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndExpansionPathDetail(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(*a2 + 2)) + 8);
    *a3 = *(_QWORD *)(v9 + 24)
        + *(unsigned __int16 *)(*(_QWORD *)(v9 + 48) + 32 * *(unsigned __int16 *)(*a2 + 4) + 4);
    *a4 = a2[1];
    *a5 = a2[2];
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndRegexData_NNTN(_QWORD *a1, uint64_t a2, _QWORD *a3, _WORD *a4, _QWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int vars0;

  v8 = *(_QWORD *)(a1[19] + 16);
  if (v8)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 136) + 8)
                                + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2))
                    + 8);
    v10 = v9[6] + 32 * *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
    v11 = v9[8] + 16 * *(unsigned __int16 *)(v10 + 6);
    *a4 = *(_WORD *)(v11 + 10);
    *a6 = *(_DWORD *)(v11 + 12);
    *a3 = v9[4] + *(unsigned int *)(v11 + 4);
    *a5 = v9[3] + *(unsigned __int16 *)(v10 + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, (uint64_t)a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_loadDataFiles_NNTN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  _WORD *RsrcHandleForThisApi;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Chunk;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t DataBlockFromFileRefCnt;
  _BOOL4 v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  const char *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96[2];
  char *__s2;
  void *__src;
  unsigned int v99;
  _QWORD *v100;
  char __dst[16];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[8];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 152);
  v100 = 0;
  memset(v109, 0, sizeof(v109));
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  *(_OWORD *)__dst = 0u;
  v102 = 0u;
  v99 = 0;
  __s2 = 0;
  __src = 0;
  *(_QWORD *)v96 = 0;
  v10 = *(char **)(v9 + 16);
  if (!v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = *(_QWORD *)(a1 + 184);
    v13 = 24049;
    goto LABEL_5;
  }
  if (*(_WORD *)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = *(_QWORD *)(a1 + 184);
    v13 = 24055;
LABEL_5:
    log_OutPublic(v11, v12, v13, 0, a5, a6, a7, a8, v92);
    return FEDATA_ERROR(7);
  }
  v15 = *(_QWORD *)a1;
  if (*(unsigned __int8 *)(a1 + 352) > *(unsigned __int16 *)(a1 + 336))
  {
    log_OutPublic(*(_QWORD *)(v15 + 32), *(_QWORD *)(a1 + 184), 24056, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "invalid language identifier index");
    return FEDATA_ERROR(0);
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(v15 + 40), (uint64_t)"langcode", v96) & 0x80000000) != 0)
    *(_QWORD *)v96 = "";
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fecfg", &__s2) & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "nntokentn/");
    cstdlib_strcat(__dst, *(const char **)(a3 + 8 * *(unsigned __int8 *)(a1 + 352)));
    cstdlib_strcat(__dst, "/");
    cstdlib_strcat(__dst, __s2);
    v17 = brokeraux_ComposeBrokerString(*(_QWORD *)a1, __dst, 1, 1, *(char **)v96, 0, 0, (char *)v109, 0x80uLL);
    if ((v17 & 0x80000000) != 0)
      return FEDATA_ERROR(v17);
    RsrcHandleForThisApi = (_WORD *)getRsrcHandleForThisApi(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
    if ((ssftriff_reader_ObjOpen(RsrcHandleForThisApi, v19, 2, (const char *)v109, "TOKN", 1031, (uint64_t *)&v100) & 0x80000000) == 0)
    {
LABEL_15:
      Chunk = ssftriff_reader_FindChunk((uint64_t)v100, "CFIG", 0, &v99, &__src);
      v31 = Chunk & 0x1FFF;
      if ((Chunk & 0x80000000) != 0)
      {
        DataBlockFromFileRefCnt = Chunk;
        if (v31 != 20)
          goto LABEL_104;
      }
      if (v31 == 20)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
      }
      else
      {
        v95 = 0;
        cstdlib_memcpy((char *)&v95 + 2, __src, 2uLL);
        v34 = HIWORD(v95);
        if (HIWORD(v95))
        {
          if (HIWORD(v95) == 3)
          {
            cstdlib_memcpy(&v95, (char *)__src + 2, 2uLL);
            v34 = 0;
            v33 = (unsigned __int16)v95 == 1;
            v35 = 1;
          }
          else
          {
            cstdlib_memcpy(&v95, (char *)__src + 2, 2uLL);
            v33 = (unsigned __int16)v95 == 1;
            if (HIWORD(v95) < 2u)
            {
              v34 = 0;
              v35 = 0;
            }
            else
            {
              cstdlib_memcpy(&v95, (char *)__src + 4, 2uLL);
              v35 = 0;
              v34 = (unsigned __int16)v95 == 1;
            }
          }
        }
        else
        {
          v33 = 0;
          v35 = 0;
        }
        v36 = ssftriff_reader_CloseChunk((uint64_t)v100);
        if ((v36 & 0x80000000) != 0)
          goto LABEL_103;
      }
      v36 = ssftriff_reader_FindChunk((uint64_t)v100, "FILE", 0, &v99, &__src);
      if ((v36 & 0x80000000) == 0)
      {
        cstdlib_memcpy(v10, __src, 2uLL);
        v36 = ssftriff_reader_CloseChunk((uint64_t)v100);
        if ((v36 & 0x80000000) == 0)
        {
          cstdlib_strcpy(v10 + 2, (const char *)v109);
          DataBlockFromFileRefCnt = readDataBlockFromFileRefCnt(a1, (uint64_t)v100, v33, v34, v35, (uint64_t)v109);
          if ((DataBlockFromFileRefCnt & 0x80000000) == 0)
          {
            ssftriff_reader_ObjClose(v100, v37, v38, v39, v27, v28, v29, v30);
            v100 = 0;
            v47 = *(unsigned __int16 *)v10;
            if (*(_WORD *)v10)
            {
              v48 = 0;
              v49 = 0;
              do
              {
                v94 = v48;
                v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 17) + 8) + 8 * v48);
                if (v50)
                {
                  v51 = *(_QWORD *)(v50 + 16);
                  if (v51)
                  {
                    v52 = 0;
                    while (v52 < *(unsigned __int16 *)(v51 + 24))
                    {
                      v53 = *(_QWORD *)(v51 + 16);
                      v54 = (unsigned __int16 *)(v53 + 72 * v52);
                      if (*((_DWORD *)v54 + 16) == 1)
                      {
                        v55 = *(const char **)(a1 + 288);
                        if (v55)
                        {
                          if (cstdlib_strcmp(v55, (const char *)(*(_QWORD *)(v53 + 72 * v52 + 48) + *v54)))
                          {
                            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24053, (uint64_t)"%s%s%s%s", v43, v44, v45, v46, "first assigned");
                            goto LABEL_102;
                          }
                        }
                        else
                        {
                          v56 = *(_QWORD **)(*(_QWORD *)a1 + 8);
                          v57 = v52;
                          v58 = v53 + 72 * v52;
                          v60 = *(_QWORD *)(v58 + 48);
                          v59 = (_QWORD *)(v58 + 48);
                          v61 = cstdlib_strlen((const char *)(v60 + *v54));
                          v62 = (char *)heap_Calloc(v56, 1, (v61 + 1));
                          *(_QWORD *)(a1 + 288) = v62;
                          if (!v62)
                          {
                            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24048, 0, v63, v64, v65, v66, v93);
                            v17 = 10;
                            return FEDATA_ERROR(v17);
                          }
                          cstdlib_strcpy(v62, (const char *)(*v59 + *v54));
                          *(_WORD *)(a1 + 296) = v94;
                          *(_WORD *)(a1 + 298) = v57;
                          v52 = v57;
                        }
                      }
                      if (*(_DWORD *)(v53 + 72 * v52 + 8) == 1)
                      {
                        v67 = *(_QWORD *)(v50 + 16);
                        if (*(_WORD *)(v67 + 48))
                        {
                          v68 = 0;
                          while (1)
                          {
                            v69 = *(_QWORD *)(v67 + 40) + 16 * v68;
                            if (*(_WORD *)(v69 + 8))
                            {
                              v70 = 0;
                              do
                              {
                                if (*(_WORD *)v10)
                                {
                                  v71 = 0;
                                  while (1)
                                  {
                                    v72 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 17) + 8) + 8 * v71);
                                    if (*(_DWORD *)v72 != 1 && *(_DWORD *)v72 != 4)
                                    {
                                      v74 = *(_QWORD *)(v50 + 16);
                                      if (*(_WORD *)(v74 + 50))
                                      {
                                        v75 = **(unsigned __int16 **)(*(_QWORD *)v69 + 24 * v70);
                                        if (*(unsigned __int16 *)(v74 + 50) > v75
                                          && !cstdlib_strcmp(**(const char ***)(v72 + 8), *(const char **)(*(_QWORD *)(v74 + 56) + 8 * v75)))
                                        {
                                          break;
                                        }
                                      }
                                    }
                                    if (++v71 >= (unint64_t)*(unsigned __int16 *)v10)
                                      goto LABEL_62;
                                  }
                                  *(_WORD *)(*(_QWORD *)(*(_QWORD *)v69 + 24 * v70) + 2) = v71;
                                  v49 = 1;
                                }
                                else
                                {
LABEL_62:
                                  v49 = 0;
                                }
                                ++v70;
                              }
                              while (v70 < *(unsigned __int16 *)(v69 + 8));
                            }
                            if (!v49)
                              break;
                            ++v68;
                            v67 = *(_QWORD *)(v50 + 16);
                            v49 = 1;
                            if (v68 >= *(unsigned __int16 *)(v67 + 48))
                              goto LABEL_66;
                          }
                          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24045, 0, v43, v44, v45, v46, v93);
                          return DataBlockFromFileRefCnt;
                        }
                      }
LABEL_66:
                      ++v52;
                      v51 = *(_QWORD *)(v50 + 16);
                      if (!v51)
                        break;
                    }
                  }
                  v47 = *(unsigned __int16 *)v10;
                }
                if (v47)
                {
                  v76 = 0;
                  v77 = *((_QWORD *)v10 + 17);
                  do
                  {
                    v78 = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v76);
                    if (v78)
                    {
                      v79 = *(_QWORD *)(v78 + 24);
                      if (v79)
                      {
                        v80 = 0;
                        do
                        {
                          if (v80 >= *(unsigned __int16 *)(v79 + 16))
                            break;
                          if (v50)
                          {
                            v81 = *(_QWORD *)(v50 + 16);
                            if (v81)
                            {
                              v82 = 0;
                              v83 = *(_QWORD *)(*(_QWORD *)(v79 + 8) + 8 * v80);
                              v84 = -1;
                              do
                              {
                                if (++v84 >= (unint64_t)*(unsigned __int16 *)(v81 + 24))
                                  break;
                                if (!cstdlib_strcmp(*(const char **)v83, (const char *)(*(_QWORD *)(*(_QWORD *)(v81 + 16) + v82 + 48)+ *(unsigned __int16 *)(*(_QWORD *)(v81 + 16) + v82))))*(_WORD *)(v83 + 10) = v94;
                                v82 += 72;
                                v81 = *(_QWORD *)(v50 + 16);
                              }
                              while (v81);
                            }
                            v77 = *((_QWORD *)v10 + 17);
                          }
                          v85 = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v76);
                          if (!v85)
                            break;
                          ++v80;
                          v79 = *(_QWORD *)(v85 + 24);
                        }
                        while (v79);
                      }
                      v47 = *(unsigned __int16 *)v10;
                    }
                    ++v76;
                  }
                  while (v76 < v47);
                }
                v48 = v94 + 1;
              }
              while (v94 + 1 < (unint64_t)v47);
              DataBlockFromFileRefCnt = DataBlockFromFileRefCnt;
              if (v47)
              {
                for (i = 0; i < v47; ++i)
                {
                  v87 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 17) + 8) + 8 * i);
                  if (v87)
                  {
                    v88 = *(_QWORD *)(v87 + 16);
                    if (v88)
                    {
                      v89 = 0;
                      v90 = -1;
                      do
                      {
                        if (++v90 >= (unint64_t)*(unsigned __int16 *)(v88 + 24))
                          break;
                        v91 = *(_QWORD *)(v88 + 16) + v89;
                        if (*(_WORD *)(v91 + 40) && (!*(_DWORD *)(v91 + 8) || !*(_WORD *)(v88 + 48)))
                          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24062, 0, v43, v44, v45, v46, v93);
                        v89 += 72;
                        v88 = *(_QWORD *)(v87 + 16);
                      }
                      while (v88);
                    }
                    v47 = *(unsigned __int16 *)v10;
                  }
                }
              }
            }
            if (!*(_QWORD *)(a1 + 288))
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24054, 0, v43, v44, v45, v46, v93);
LABEL_102:
              v17 = 0;
              return FEDATA_ERROR(v17);
            }
LABEL_105:
            if (v100)
              ssftriff_reader_ObjClose(v100, v40, v41, v42, v43, v44, v45, v46);
            return DataBlockFromFileRefCnt;
          }
LABEL_104:
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24052, 0, v27, v28, v29, v30, v93);
          goto LABEL_105;
        }
      }
LABEL_103:
      DataBlockFromFileRefCnt = v36;
      goto LABEL_104;
    }
  }
  cstdlib_strcpy(__dst, "nntokentn/");
  cstdlib_strcat(__dst, *(const char **)(a3 + 8 * *(unsigned __int8 *)(a1 + 352)));
  v17 = brokeraux_ComposeBrokerString(*(_QWORD *)a1, __dst, 1, 1, *(char **)v96, 0, 0, (char *)v109, 0x80uLL);
  if ((v17 & 0x80000000) == 0)
  {
    v20 = (_WORD *)getRsrcHandleForThisApi(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
    if ((ssftriff_reader_ObjOpen(v20, v21, 0, (const char *)v109, "TOKN", 1031, (uint64_t *)&v100) & 0x80000000) == 0)
      goto LABEL_15;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24057, (uint64_t)"%s%s", v22, v23, v24, v25, "Missing broker header file");
    v17 = 3;
  }
  return FEDATA_ERROR(v17);
}

uint64_t readDataBlockFromFileRefCnt(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__s1;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  result = InitRsrcFunction(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), &v22);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), &v21);
    if ((result & 0x80000000) == 0)
    {
      v16[0] = a1;
      v16[1] = a2;
      v17 = a3;
      v18 = a4;
      LODWORD(v19) = a5;
      v14 = v21;
      v13 = v22;
      __s1 = 0;
      if ((paramc_ParamGetStr(*(_QWORD *)(v22 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
        || !__s1
        || !*__s1
        || !cstdlib_strcmp(__s1, "internal"))
      {
        v13 = v14;
      }
      result = objc_GetAddRefCountedObject(*(_QWORD *)(v13 + 48), a6, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))readDataBlockFromFile_ObjcLoad, (void (*)(_QWORD, _QWORD, _OWORD *))readDataBlockFromFile_ObjcClose, (uint64_t)v16, &v20);
      if ((result & 0x80000000) != 0)
        v15 = 0;
      else
        v15 = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16) + 136) = v15;
    }
  }
  return result;
}

uint64_t readDataBlockFromFile_ObjcLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t Chunk;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t StringZ;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  void *v99;
  _QWORD *v100;
  _DWORD *v101;
  int v102;
  uint64_t v103;
  _WORD *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  _WORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t i;
  _WORD *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  _WORD *v142;
  int v143;
  int v144;
  unsigned __int8 v145;
  uint64_t v146;
  void *__src;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  int __dst;

  v6 = *(uint64_t **)a5;
  v7 = *(_QWORD *)(a5 + 8);
  v9 = *(_DWORD *)(a5 + 16);
  v8 = *(_DWORD *)(a5 + 20);
  v10 = *(_DWORD *)(a5 + 24);
  v11 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)a5 + 152) + 16);
  v12 = heap_Calloc(*(_QWORD **)(**(_QWORD **)a5 + 8), 1, 16);
  *(_QWORD *)(a4 + 32) = v12;
  v17 = *v6;
  if (!v12)
  {
LABEL_144:
    log_OutPublic(*(_QWORD *)(v17 + 32), v6[23], 24048, 0, v13, v14, v15, v16, v134);
    StringZ = FEDATA_ERROR(10);
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_145;
    return StringZ;
  }
  *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) = heap_Calloc(*(_QWORD **)(v17 + 8), 1, (8 * *v11) | 1);
  v18 = *(_QWORD *)(a4 + 32);
  if (!*(_QWORD *)(v18 + 8))
  {
LABEL_143:
    v17 = *v6;
    goto LABEL_144;
  }
  v19 = *v11;
  *(_WORD *)v18 = v19;
  if (!v19)
    return 0;
  v143 = v10;
  v144 = v8;
  v20 = 0;
  while (1)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 8 * v20) = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 48);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 8 * v20);
    if (!v21)
      goto LABEL_143;
    __dst = 0;
    v150 = 0;
    v148 = 0;
    v149 = 0;
    v146 = 0;
    __src = 0;
    Chunk = ssftriff_reader_FindChunk(v7, "HEAD", 1, &v149, &__src);
    if ((Chunk & 0x80000000) != 0)
      goto LABEL_124;
    v148 = 0;
    cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
    v148 += 2;
    *(_DWORD *)v21 = HIWORD(__dst);
    StringZ = ssftriff_reader_CloseChunk(v7);
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_125;
    v28 = *(_DWORD *)v21;
    if ((*(_DWORD *)v21 - 3) <= 2)
    {
      v29 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 24);
      *(_QWORD *)(v21 + 24) = v29;
      if (!v29)
        goto LABEL_40;
      Chunk = ssftriff_reader_FindChunk(v7, "REMP", 1, &v149, &__src);
      if ((Chunk & 0x80000000) != 0)
        goto LABEL_124;
      v148 = 0;
      cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
      v31 = v148 + 2;
      v148 += 2;
      v32 = HIWORD(__dst);
      v33 = *(_DWORD **)(v21 + 24);
      *v33 = HIWORD(__dst);
      if (!v32)
      {
        cstdlib_memcpy(v33 + 4, (char *)__src + v31, 2uLL);
        v148 += 2;
        if (*(_WORD *)(*(_QWORD *)(v21 + 24) + 16))
        {
          v55 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 8 * *(unsigned __int16 *)(*(_QWORD *)(v21 + 24) + 16));
          v60 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)(v60 + 8) = v55;
          if (!v55)
          {
            log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24048, 0, v56, v57, v58, v59, v134);
            *(_WORD *)(*(_QWORD *)(v21 + 24) + 16) = 0;
            goto LABEL_132;
          }
          if (*(_WORD *)(v60 + 16))
          {
            v61 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 8 * v61) = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 24);
              v62 = *(_QWORD *)(v21 + 24);
              if (!*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v61))
                goto LABEL_131;
              ++v61;
            }
            while (v61 < *(unsigned __int16 *)(v62 + 16));
            if (*(_WORD *)(v62 + 16))
            {
              v63 = 0;
              while (1)
              {
                v64 = *(_QWORD **)(*(_QWORD *)(v62 + 8) + 8 * v63);
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v148, 2uLL);
                v148 += 2;
                ++HIWORD(__dst);
                v65 = (_BYTE *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
                *v64 = v65;
                if (!v65)
                  goto LABEL_131;
                HIDWORD(v146) = HIWORD(__dst);
                StringZ = ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v65, (unsigned int *)&v146 + 1);
                if ((StringZ & 0x80000000) != 0)
                  goto LABEL_133;
                v138 = v63;
                if (HIDWORD(v146) != HIWORD(__dst))
                  goto LABEL_127;
                v148 += HIDWORD(v146);
                cstdlib_memcpy(v64 + 1, (char *)__src + v148, 2uLL);
                v148 += 2;
                cstdlib_memcpy((char *)v64 + 10, (char *)__src + v148, 2uLL);
                v148 += 2;
                v142 = (_WORD *)v64 + 6;
                cstdlib_memcpy((char *)v64 + 12, (char *)__src + v148, 2uLL);
                v148 += 2;
                if (*((_WORD *)v64 + 6))
                {
                  v66 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 8 * *((unsigned __int16 *)v64 + 6));
                  v64[2] = v66;
                  if (!v66)
                  {
                    log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24048, 0, v67, v68, v69, v70, v134);
                    *v142 = 0;
                    goto LABEL_132;
                  }
                  if (*v142)
                    break;
                }
LABEL_64:
                v63 = v138 + 1;
                v62 = *(_QWORD *)(v21 + 24);
                if (v138 + 1 >= (unint64_t)*(unsigned __int16 *)(v62 + 16))
                  goto LABEL_12;
              }
              v71 = 0;
              v72 = v148;
              while (1)
              {
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v72, 2uLL);
                v148 += 2;
                ++HIWORD(__dst);
                *(_QWORD *)(v64[2] + 8 * v71) = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
                v23 = *(_BYTE **)(v64[2] + 8 * v71);
                if (!v23)
                  break;
                HIDWORD(v146) = HIWORD(__dst);
                StringZ = ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v23, (unsigned int *)&v146 + 1);
                if ((StringZ & 0x80000000) != 0)
                  goto LABEL_133;
                if (HIDWORD(v146) != HIWORD(__dst))
                  goto LABEL_127;
                v72 = v148 + HIDWORD(v146);
                v148 += HIDWORD(v146);
                if (++v71 >= (unint64_t)(unsigned __int16)*v142)
                  goto LABEL_64;
              }
LABEL_131:
              log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24048, 0, (uint64_t)v23, v24, v25, v26, v134);
LABEL_132:
              StringZ = FEDATA_ERROR(10);
              v54 = 1;
              goto LABEL_42;
            }
          }
        }
      }
LABEL_12:
      StringZ = ssftriff_reader_CloseChunk(v7);
      if ((StringZ & 0x80000000) != 0)
        goto LABEL_125;
      v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x2D) != 0)
    {
      v34 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 72);
      *(_QWORD *)(v21 + 8) = v34;
      if (!v34)
        goto LABEL_40;
      v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x36) != 0)
    {
      v35 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 64);
      *(_QWORD *)(v21 + 16) = v35;
      if (!v35)
      {
LABEL_40:
        log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24048, 0, v30, v24, v25, v26, v134);
        v53 = FEDATA_ERROR(10);
        goto LABEL_41;
      }
      v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x2D) != 0)
      break;
LABEL_79:
    if (v28 <= 5 && ((1 << v28) & 0x36) != 0)
    {
      Chunk = ssftriff_reader_FindChunk(v7, "DDAT", 1, &v149, &__src);
      if ((Chunk & 0x80000000) != 0)
      {
LABEL_124:
        StringZ = Chunk;
LABEL_125:
        v54 = 0;
      }
      else
      {
        v148 = 0;
        cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
        v148 += 2;
        ++HIWORD(__dst);
        v86 = (_BYTE *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
        **(_QWORD **)(v21 + 16) = v86;
        if (!v86)
          goto LABEL_131;
        HIDWORD(v146) = HIWORD(__dst);
        StringZ = ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v86, (unsigned int *)&v146 + 1);
        if ((StringZ & 0x80000000) == 0)
        {
          if (HIDWORD(v146) != HIWORD(__dst))
            goto LABEL_127;
          v148 += HIDWORD(v146);
          cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v148, 2uLL);
          v148 += 2;
          v87 = v148;
          v88 = *(_QWORD *)(v21 + 16);
          *(_DWORD *)(v88 + 8) = HIWORD(__dst);
          cstdlib_memcpy((void *)(v88 + 24), (char *)__src + v87, 2uLL);
          v148 += 2;
          cstdlib_memcpy((void *)(*(_QWORD *)(v21 + 16) + 50), (char *)__src + v148, 2uLL);
          v148 += 2;
          v89 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v89 + 56) = 0;
          if (*(_WORD *)(v89 + 50))
          {
            v90 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 8 * *(unsigned __int16 *)(v89 + 50));
            v89 = *(_QWORD *)(v21 + 16);
            *(_QWORD *)(v89 + 56) = v90;
            if (!v90)
              goto LABEL_131;
            if (*(_WORD *)(v89 + 50))
            {
              v91 = 0;
              v92 = v148;
              do
              {
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v92, 2uLL);
                v148 += 2;
                ++HIWORD(__dst);
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 56) + 8 * v91) = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
                v23 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 56) + 8 * v91);
                if (!v23)
                  goto LABEL_131;
                HIDWORD(v146) = HIWORD(__dst);
                StringZ = ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v23, (unsigned int *)&v146 + 1);
                if ((StringZ & 0x80000000) != 0)
                  goto LABEL_133;
                if (HIDWORD(v146) != HIWORD(__dst))
                  goto LABEL_127;
                v92 = v148 + HIDWORD(v146);
                v148 += HIDWORD(v146);
                ++v91;
                v89 = *(_QWORD *)(v21 + 16);
              }
              while (v91 < *(unsigned __int16 *)(v89 + 50));
            }
          }
          v141 = v9;
          if (*(_WORD *)(v89 + 24))
          {
            v93 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 72 * *(unsigned __int16 *)(v89 + 24));
            v89 = *(_QWORD *)(v21 + 16);
            *(_QWORD *)(v89 + 16) = v93;
            if (!v93)
            {
LABEL_135:
              v126 = *(_QWORD *)(*v6 + 32);
              v127 = v6[23];
              v50 = 0;
              goto LABEL_137;
            }
            if (*(_WORD *)(v89 + 24))
            {
              v94 = 0;
              do
              {
                v95 = *(_QWORD *)(v89 + 16);
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v148, 2uLL);
                v148 += 2;
                v96 = v95;
                v97 = v95 + 72 * v94;
                *(_WORD *)(v97 + 56) = HIWORD(__dst);
                v98 = (unsigned __int16 *)(v97 + 56);
                v99 = (void *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst) + 1);
                *(_QWORD *)(v97 + 48) = v99;
                v100 = (_QWORD *)(v97 + 48);
                if (!v99)
                  goto LABEL_135;
                v139 = v94;
                v101 = (_DWORD *)(v96 + 72 * v94);
                cstdlib_memcpy(v99, (char *)__src + v148, HIWORD(__dst));
                *(_BYTE *)(*v100 + HIWORD(__dst)) = 0;
                v148 += *v98;
                cstdlib_memcpy(v101, (char *)__src + v148, 2uLL);
                v148 += 2;
                cstdlib_memcpy((char *)v101 + 2, (char *)__src + v148, 2uLL);
                v148 += 2;
                cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
                v148 += 2;
                v101[15] = (unsigned __int16)__dst;
                cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
                v148 += 2;
                v101[16] = (unsigned __int16)__dst;
                cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
                v148 += 2;
                v102 = (unsigned __int16)__dst;
                v101[2] = (unsigned __int16)__dst;
                if (v102 == 1)
                {
                  v103 = v96 + 72 * v139;
                  cstdlib_memcpy((void *)(v103 + 4), (char *)__src + v148, 2uLL);
                  v148 += 2;
                  cstdlib_memcpy((void *)(v103 + 12), (char *)__src + v148, 2uLL);
                  v148 += 2;
                }
                if (!v144)
                {
                  v104 = (_WORD *)(v96 + 72 * v139 + 40);
                  cstdlib_memcpy(v104, (char *)__src + v148, 2uLL);
                  v105 = v148 + 2;
                  v148 += 2;
                  if (*v104)
                  {
                    v106 = 0;
                    do
                    {
                      cstdlib_memcpy(&__dst, (char *)__src + v105, 2uLL);
                      v148 += 2;
                      cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
                      v105 = v148 + 2;
                      v148 += 2;
                      ++v106;
                    }
                    while (v106 < (unsigned __int16)*v104);
                  }
                }
                v94 = v139 + 1;
                v89 = *(_QWORD *)(v21 + 16);
              }
              while (v139 + 1 < (unint64_t)*(unsigned __int16 *)(v89 + 24));
            }
          }
          cstdlib_memcpy((void *)(v89 + 48), (char *)__src + v148, 2uLL);
          v148 += 2;
          v107 = *(_QWORD *)(v21 + 16);
          v108 = *(unsigned __int16 *)(v107 + 48);
          v9 = v141;
          if (*(_WORD *)(v107 + 48))
          {
            *(_QWORD *)(v107 + 40) = 0;
            v109 = heap_Calloc(*(_QWORD **)(v6[3] + 8), 1, 16 * v108);
            v110 = *(_QWORD *)(v21 + 16);
            *(_QWORD *)(v110 + 40) = v109;
            if (!v109)
              goto LABEL_131;
            if (*(_WORD *)(v110 + 48))
            {
              v111 = 0;
              do
              {
                v136 = v111;
                v112 = (uint64_t *)(*(_QWORD *)(v110 + 40) + 16 * v111);
                v113 = v112 + 1;
                cstdlib_memcpy(v112 + 1, (char *)__src + v148, 2uLL);
                v148 += 2;
                *v112 = 0;
                v114 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 24 * *((unsigned __int16 *)v112 + 4));
                v140 = v112;
                *v112 = v114;
                if (!v114)
                  goto LABEL_131;
                if (*v113)
                {
                  v115 = 0;
                  for (i = 0; i < (unsigned __int16)*v113; ++i)
                  {
                    v145 = 0;
                    *(_QWORD *)(*v140 + v115) = 0;
                    v117 = (_WORD *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 12);
                    *(_QWORD *)(*v140 + v115) = v117;
                    if (!v117)
                      goto LABEL_131;
                    v117[1] = 0;
                    v118 = (char *)__src + v148;
                    if (v144)
                    {
                      cstdlib_memcpy(&v145, v118, 1uLL);
                      v119 = ++v148;
                      **(_WORD **)(*v140 + v115) = v145;
                      cstdlib_memcpy(&v145, (char *)__src + v119, 1uLL);
                      ++v148;
                      *(_WORD *)(*(_QWORD *)(*v140 + v115) + 4) = v145;
                    }
                    else
                    {
                      cstdlib_memcpy(v117, v118, 2uLL);
                      v148 += 2;
                      cstdlib_memcpy((void *)(*(_QWORD *)(*v140 + v115) + 4), (char *)__src + v148, 2uLL);
                      v148 += 2;
                      if (v143 == 1)
                      {
                        *(_QWORD *)(*v140 + v115 + 8) = 0;
                        v120 = (void *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 2);
                        *(_QWORD *)(*v140 + v115 + 8) = v120;
                        if (!v120)
                          goto LABEL_131;
                        cstdlib_memcpy(v120, (char *)__src + v148, 2uLL);
                        v148 += 2;
                        cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v148, 2uLL);
                        v148 += 2;
                        ++HIWORD(__dst);
                        v121 = (_BYTE *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
                        *(_QWORD *)(*v140 + v115 + 16) = v121;
                        if (!v121)
                        {
                          log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24048, 0, v122, v123, v124, v125, v134);
                          v128 = 10;
LABEL_141:
                          StringZ = FEDATA_ERROR(v128);
                          if ((StringZ & 0x80000000) == 0)
                            goto LABEL_129;
                          goto LABEL_142;
                        }
                        HIDWORD(v146) = HIWORD(__dst);
                        if ((ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v121, (unsigned int *)&v146 + 1) & 0x80000000) != 0|| HIDWORD(v146) != HIWORD(__dst))
                        {
                          v128 = 0;
                          goto LABEL_141;
                        }
                        v148 += HIDWORD(v146);
                      }
                    }
                    v115 += 24;
                  }
                }
                v111 = v136 + 1;
                v110 = *(_QWORD *)(v21 + 16);
              }
              while (v136 + 1 < (unint64_t)*(unsigned __int16 *)(v110 + 48));
            }
          }
          v53 = ssftriff_reader_CloseChunk(v7);
LABEL_41:
          StringZ = v53;
          v54 = 0;
          goto LABEL_42;
        }
LABEL_133:
        v54 = 1;
      }
LABEL_126:
      log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24052, 0, (uint64_t)v23, v24, v25, v26, v134);
      if (!v54)
        goto LABEL_128;
      goto LABEL_127;
    }
LABEL_129:
    log_OutText(*(_QWORD *)(*v6 + 32), v6[23], 4, 0, (uint64_t)"loaded data block %d", v24, v25, v26, v20);
    v20 = (unsigned __int16)v20 + 1;
    if (v20 >= *v11)
      return StringZ;
  }
  Chunk = ssftriff_reader_FindChunk(v7, "TDAT", 1, &v149, &__src);
  if ((Chunk & 0x80000000) != 0)
    goto LABEL_124;
  v148 = 0;
  v36 = __src;
  *(_QWORD *)(v21 + 40) = __src;
  cstdlib_memcpy((char *)&__dst + 2, v36, 2uLL);
  v148 += 2;
  ++HIWORD(__dst);
  v37 = (_BYTE *)heap_Calloc(*(_QWORD **)(*v6 + 8), 1, HIWORD(__dst));
  **(_QWORD **)(v21 + 8) = v37;
  if (!v37)
    goto LABEL_131;
  HIDWORD(v146) = HIWORD(__dst);
  StringZ = ssftriff_reader_ReadStringZ(v7, (uint64_t)__src, v149, v148, v37, (unsigned int *)&v146 + 1);
  if ((StringZ & 0x80000000) != 0)
    goto LABEL_133;
  if (HIDWORD(v146) != HIWORD(__dst))
    goto LABEL_127;
  v148 += HIDWORD(v146);
  cstdlib_memcpy((void *)(*(_QWORD *)(v21 + 8) + 8), (char *)__src + v148, 2uLL);
  v148 += 2;
  cstdlib_memcpy((void *)(*(_QWORD *)(v21 + 8) + 12), (char *)__src + v148, 2uLL);
  v148 += 2;
  cstdlib_memcpy((char *)&v150 + 4, (char *)__src + v148, 4uLL);
  v148 += 4;
  cstdlib_memcpy(&v150, (char *)__src + v148, 4uLL);
  v38 = v148 + 4;
  v39 = *(_QWORD *)(v21 + 8);
  *(_DWORD *)(v39 + 16) = v38;
  v40 = (char *)__src;
  *(_QWORD *)(v39 + 24) = (char *)__src + v38;
  v41 = (HIDWORD(v150) + v38);
  v148 = v41;
  cstdlib_memcpy(&v146, &v40[v41], 4uLL);
  v43 = v148 + v146 + 4;
  v44 = *(_QWORD *)(v21 + 8);
  *(_DWORD *)(v44 + 40) = v43;
  *(_QWORD *)(v44 + 32) = (char *)__src + v43;
  v148 = v150 + v43;
  if (!*(_WORD *)(v44 + 8))
  {
    v141 = v9;
LABEL_68:
    v73 = *(unsigned __int16 *)(v44 + 12);
    if (v73)
    {
      v74 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 16 * v73);
      v75 = *(_QWORD *)(v21 + 8);
      *(_QWORD *)(v75 + 64) = v74;
      if (!v74)
        goto LABEL_135;
      if (*(_WORD *)(v75 + 12))
      {
        v76 = 0;
        v77 = 0;
        do
        {
          v78 = *(_QWORD *)(v75 + 64);
          v79 = v78 + v76;
          if (v141 == 1)
          {
            cstdlib_memcpy((void *)(v79 + 4), (char *)__src + v148, 4uLL);
            v80 = v148 + 4;
            v148 += 4;
          }
          else
          {
            cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
            v148 += 2;
            *(_DWORD *)(v79 + 4) = (unsigned __int16)__dst;
            v80 = v148;
          }
          v81 = (_DWORD *)(v78 + v76);
          cstdlib_memcpy(v81 + 2, (char *)__src + v80, 2uLL);
          v148 += 2;
          cstdlib_memcpy((char *)v81 + 10, (char *)__src + v148, 2uLL);
          v148 += 2;
          cstdlib_memcpy((void *)v79, (char *)__src + v148, 2uLL);
          v148 += 2;
          cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
          v148 += 2;
          v81[3] = (unsigned __int16)__dst;
          ++v77;
          v75 = *(_QWORD *)(v21 + 8);
          v76 += 16;
        }
        while (v77 < *(unsigned __int16 *)(v75 + 12));
      }
    }
    v51 = ssftriff_reader_DetachChunkData(v7, (void **)(v21 + 32), &__src, v42, (uint64_t)v23, v24, v25, v26);
    if ((v51 & 0x80000000) != 0)
    {
LABEL_134:
      StringZ = v51;
      v54 = 1;
      v9 = v141;
      goto LABEL_126;
    }
    v82 = (char *)__src;
    *(_QWORD *)(v21 + 40) = __src;
    v83 = *(_QWORD *)(v21 + 8);
    v84 = &v82[*(unsigned int *)(v83 + 16)];
    v85 = &v82[*(unsigned int *)(v83 + 40)];
    *(_QWORD *)(v83 + 24) = v84;
    *(_QWORD *)(v83 + 32) = v85;
    StringZ = ssftriff_reader_CloseChunk(v7);
    v9 = v141;
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_125;
    v28 = *(_DWORD *)v21;
    goto LABEL_79;
  }
  v45 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 32 * *(unsigned __int16 *)(v44 + 8));
  v44 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v44 + 48) = v45;
  if (!v45)
    goto LABEL_131;
  v141 = v9;
  if (!*(_WORD *)(v44 + 8))
    goto LABEL_68;
  v46 = 0;
  v47 = 16;
  while (1)
  {
    v137 = *(_QWORD *)(v44 + 48);
    v48 = v137 + v47;
    cstdlib_memcpy(&__dst, (char *)__src + v148, 2uLL);
    v148 += 2;
    *(_DWORD *)(v48 - 16) = (unsigned __int16)__dst;
    cstdlib_memcpy((void *)(v137 + v47 - 12), (char *)__src + v148, 2uLL);
    v148 += 2;
    cstdlib_memcpy((void *)(v137 + v47 - 10), (char *)__src + v148, 2uLL);
    v148 += 2;
    cstdlib_memcpy((void *)(v137 + v47 + 8), (char *)__src + v148, 2uLL);
    v148 += 2;
    cstdlib_memcpy((void *)(v137 + v47 + 10), (char *)__src + v148, 2uLL);
    v148 += 2;
    cstdlib_memcpy((void *)(v137 + v47 + 12), (char *)__src + v148, 2uLL);
    v148 += 2;
    *(_QWORD *)(v48 - 8) = 0;
    if (*(_WORD *)(v137 + v47 + 8))
    {
      v49 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 56);
      v50 = v49;
      *(_QWORD *)(v48 - 8) = v49;
      if (!v49)
        goto LABEL_136;
      *(_QWORD *)v49 = &StaticIntPointers;
      *(_BYTE *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 32) = 0;
      v51 = FEData_readFunctionDataFromBinaryFile(v6, v7, *v6, v49, (uint64_t)__src, &v148, v149);
      if ((v51 & 0x80000000) != 0)
        goto LABEL_134;
    }
    *(_QWORD *)(v137 + v47) = 0;
    if (*(_WORD *)(v137 + v47 + 10))
      break;
LABEL_38:
    ++v46;
    v44 = *(_QWORD *)(v21 + 8);
    v47 += 32;
    if (v46 >= *(unsigned __int16 *)(v44 + 8))
      goto LABEL_68;
  }
  v52 = heap_Calloc(*(_QWORD **)(*v6 + 8), 1, 56);
  v50 = v52;
  *(_QWORD *)(v137 + v47) = v52;
  if (v52)
  {
    *(_QWORD *)v52 = &StaticIntPointers;
    *(_BYTE *)(v52 + 24) = 0;
    *(_QWORD *)(v52 + 16) = 0;
    *(_QWORD *)(v52 + 40) = 0;
    *(_QWORD *)(v52 + 48) = 0;
    *(_QWORD *)(v52 + 32) = 0;
    v51 = FEData_readFunctionDataFromBinaryFile(v6, v7, *v6, v52, (uint64_t)__src, &v148, v149);
    if ((v51 & 0x80000000) != 0)
      goto LABEL_134;
    goto LABEL_38;
  }
LABEL_136:
  v126 = *(_QWORD *)(*v6 + 32);
  v127 = v6[23];
LABEL_137:
  log_OutPublic(v126, v127, 24048, v50, (uint64_t)v23, v24, v25, v26, v134);
  StringZ = FEDATA_ERROR(10);
  v54 = 1;
  v9 = v141;
LABEL_42:
  if ((StringZ & 0x80000000) != 0)
    goto LABEL_126;
  if (v54)
LABEL_127:
    ssftriff_reader_CloseChunk(v7);
LABEL_128:
  if ((StringZ & 0x80000000) == 0)
    goto LABEL_129;
LABEL_142:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 8 * v20) = 0;
  log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24044, 0, (uint64_t)v23, v24, v25, v26, v134);
LABEL_145:
  log_OutPublic(*(_QWORD *)(*v6 + 32), v6[23], 24052, 0, v129, v130, v131, v132, v135);
  return StringZ;
}

uint64_t readDataBlockFromFile_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  unint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  unint64_t j;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v55;
  unsigned int v56;
  _QWORD **v57;
  uint64_t v58;

  v3 = *(unsigned __int16 **)(a3 + 32);
  v58 = 0;
  inited = InitRsrcFunction(a1, a2, &v58);
  v11 = inited;
  if ((inited & 0x80000000) == 0)
  {
    if (v3)
    {
      v12 = *((_QWORD *)v3 + 1);
      if (v12)
      {
        v13 = *v3;
        if (*v3)
        {
          v56 = inited;
          v14 = 0;
          v55 = v3;
          while (1)
          {
            v15 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * v14);
            if (v15)
            {
              v16 = *(_QWORD **)(v15 + 32);
              if (v16)
              {
                v56 = ssftriff_reader_ReleaseChunkData(v16, v12, v5, v6, v7, v8, v9, v10);
                if ((v56 & 0x80000000) != 0)
                  return v56;
                *(_QWORD *)(v15 + 32) = 0;
                *(_QWORD *)(v15 + 40) = 0;
              }
              v57 = (_QWORD **)(v15 + 32);
              v17 = v58;
              v19 = *(_QWORD *)(v15 + 8);
              v18 = *(_QWORD *)(v15 + 16);
              v20 = *(_QWORD *)(v15 + 24);
              if (v19)
              {
                if (*(_DWORD *)v15 <= 5u && ((1 << *(_DWORD *)v15) & 0x2D) != 0)
                {
                  heap_Free(*(_QWORD **)(v58 + 8), *(_QWORD *)v19);
                  *(_QWORD *)v19 = 0;
                  v22 = *(_QWORD *)(v19 + 48);
                  if (v22)
                  {
                    if (*(_WORD *)(v19 + 8))
                    {
                      v23 = 0;
                      v24 = 0;
                      do
                      {
                        v25 = *(_QWORD *)(v19 + 48) + v23;
                        v26 = *(_QWORD *)(v25 + 8);
                        if (v26)
                        {
                          FEData_freeEntry((_QWORD *)v17, v26, 1);
                          heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v25 + 8));
                          *(_QWORD *)(v25 + 8) = 0;
                        }
                        v27 = *(_QWORD *)(v25 + 16);
                        if (v27)
                        {
                          FEData_freeEntry((_QWORD *)v17, v27, 1);
                          heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v25 + 16));
                          *(_QWORD *)(v25 + 16) = 0;
                        }
                        ++v24;
                        v23 += 32;
                      }
                      while (v24 < *(unsigned __int16 *)(v19 + 8));
                      v22 = *(_QWORD *)(v19 + 48);
                      v3 = v55;
                    }
                    heap_Free(*(_QWORD **)(v17 + 8), v22);
                    *(_QWORD *)(v19 + 48) = 0;
                  }
                  v28 = *(_QWORD *)(v19 + 64);
                  if (v28)
                  {
                    heap_Free(*(_QWORD **)(v17 + 8), v28);
                    *(_QWORD *)(v19 + 64) = 0;
                  }
                  heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v15 + 8));
                  *(_QWORD *)(v15 + 8) = 0;
                }
              }
              if (v18)
              {
                if (*(_DWORD *)v15 <= 5u && ((1 << *(_DWORD *)v15) & 0x36) != 0)
                {
                  if (*(_QWORD *)v18)
                  {
                    heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)v18);
                    *(_QWORD *)v18 = 0;
                  }
                  v30 = *(_QWORD *)(v18 + 56);
                  if (v30)
                  {
                    if (*(_WORD *)(v18 + 50))
                    {
                      v31 = 0;
                      do
                      {
                        heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v31));
                        *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v31++) = 0;
                      }
                      while (v31 < *(unsigned __int16 *)(v18 + 50));
                      v30 = *(_QWORD *)(v18 + 56);
                    }
                    heap_Free(*(_QWORD **)(v17 + 8), v30);
                    *(_QWORD *)(v18 + 56) = 0;
                  }
                  if (*(_QWORD *)(v18 + 16))
                  {
                    if (*(_WORD *)(v18 + 24))
                    {
                      v32 = 0;
                      v33 = 0;
                      do
                      {
                        v34 = *(_QWORD *)(v18 + 16) + v32;
                        heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v34 + 48));
                        *(_QWORD *)(v34 + 48) = 0;
                        v35 = *(_QWORD *)(v34 + 16);
                        if (v35)
                        {
                          heap_Free(*(_QWORD **)(v17 + 8), v35);
                          *(_QWORD *)(v34 + 16) = 0;
                        }
                        ++v33;
                        v32 += 72;
                      }
                      while (v33 < *(unsigned __int16 *)(v18 + 24));
                    }
                    v36 = *(_QWORD *)(v18 + 40);
                    v3 = v55;
                    if (v36)
                    {
                      v37 = *(_WORD *)(v18 + 48);
                      if (v37)
                      {
                        for (i = 0; i < v37; ++i)
                        {
                          v39 = *(_QWORD *)(v18 + 40) + 16 * i;
                          v40 = *(_QWORD *)v39;
                          if (*(_QWORD *)v39)
                          {
                            if (*(_WORD *)(v39 + 8))
                            {
                              v41 = 0;
                              v42 = 0;
                              do
                              {
                                heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v40 + v41));
                                v43 = (_QWORD *)(*(_QWORD *)v39 + v41);
                                *v43 = 0;
                                heap_Free(*(_QWORD **)(v17 + 8), v43[1]);
                                v44 = *(_QWORD *)v39 + v41;
                                *(_QWORD *)(v44 + 8) = 0;
                                heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v44 + 16));
                                v40 = *(_QWORD *)v39;
                                *(_QWORD *)(*(_QWORD *)v39 + v41 + 16) = 0;
                                ++v42;
                                v41 += 24;
                              }
                              while (v42 < *(unsigned __int16 *)(v39 + 8));
                            }
                            heap_Free(*(_QWORD **)(v17 + 8), v40);
                            *(_QWORD *)v39 = 0;
                            v37 = *(_WORD *)(v18 + 48);
                          }
                        }
                        v36 = *(_QWORD *)(v18 + 40);
                        v3 = v55;
                      }
                      heap_Free(*(_QWORD **)(v17 + 8), v36);
                      *(_QWORD *)(v18 + 40) = 0;
                    }
                    heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v18 + 16));
                    *(_QWORD *)(v18 + 16) = 0;
                  }
                  heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)(v15 + 16));
                  *(_QWORD *)(v15 + 16) = 0;
                }
              }
              if (v20)
              {
                v45 = *(_QWORD *)(v20 + 8);
                if (v45)
                {
                  v46 = *(_WORD *)(v20 + 16);
                  if (v46)
                  {
                    for (j = 0; j < v46; ++j)
                    {
                      v48 = *(_QWORD *)(v20 + 8);
                      v49 = *(_QWORD *)(v48 + 8 * j);
                      if (v49)
                      {
                        if (*(_QWORD *)v49)
                        {
                          heap_Free(*(_QWORD **)(v17 + 8), *(_QWORD *)v49);
                          v48 = *(_QWORD *)(v20 + 8);
                          **(_QWORD **)(v48 + 8 * j) = 0;
                          v49 = *(_QWORD *)(v48 + 8 * j);
                        }
                        v50 = *(_QWORD *)(v49 + 16);
                        if (v50)
                        {
                          if (*(_WORD *)(v49 + 12))
                          {
                            v51 = 0;
                            do
                            {
                              v52 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * v51);
                              if (v52)
                              {
                                heap_Free(*(_QWORD **)(v17 + 8), v52);
                                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * j) + 16) + 8 * v51) = 0;
                                v48 = *(_QWORD *)(v20 + 8);
                              }
                              ++v51;
                              v49 = *(_QWORD *)(v48 + 8 * j);
                            }
                            while (v51 < *(unsigned __int16 *)(v49 + 12));
                            v50 = *(_QWORD *)(v49 + 16);
                          }
                          heap_Free(*(_QWORD **)(v17 + 8), v50);
                          v53 = *(_QWORD *)(v20 + 8);
                          *(_QWORD *)(*(_QWORD *)(v53 + 8 * j) + 16) = 0;
                          v49 = *(_QWORD *)(v53 + 8 * j);
                        }
                        *(_WORD *)(v49 + 12) = 0;
                        heap_Free(*(_QWORD **)(v17 + 8), v49);
                        *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * j) = 0;
                        v46 = *(_WORD *)(v20 + 16);
                      }
                    }
                    v45 = *(_QWORD *)(v20 + 8);
                  }
                  heap_Free(*(_QWORD **)(v17 + 8), v45);
                  *(_QWORD *)(v20 + 8) = 0;
                }
                *(_WORD *)(v20 + 16) = 0;
                heap_Free(*(_QWORD **)(v17 + 8), v20);
              }
              if (*v57)
              {
                ssftriff_reader_ReleaseChunkData(*v57, v12, v5, v6, v7, v8, v9, v10);
                *v57 = 0;
                *(_QWORD *)(v15 + 40) = 0;
              }
              heap_Free(*(_QWORD **)(v17 + 8), v15);
              v13 = *v3;
            }
            if (++v14 >= (unint64_t)v13)
            {
              v12 = *((_QWORD *)v3 + 1);
              v11 = v56;
              break;
            }
          }
        }
        heap_Free(*(_QWORD **)(v58 + 8), v12);
        heap_Free(*(_QWORD **)(v58 + 8), (uint64_t)v3);
      }
    }
  }
  return v11;
}

uint64_t FERuntimeData_DumpMatch_NNTN(uint64_t a1, uint64_t a2, __int16 *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 *v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;
  char __dst[10];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  if (*(_QWORD *)(a1 + 176))
  {
    if (a4 == 1)
      v11 = "<LOGFE> ";
    else
      v11 = "";
    cstdlib_strcpy(__dst, v11);
    FEData_blockData_getTokenData_NNTN((_QWORD *)a1, *(_QWORD *)(a2 + 96), &v35, v12, v13, v14, v15, v16);
    cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + *a3), (unsigned __int16)(a3[1] - *a3));
    *(_BYTE *)(*(_QWORD *)(a1 + 552) - *a3 + a3[1]) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%s%20s [%d,%d] _%s_ (domainBlockID=%d, domainNum=%d)", v17, v18, v19, (uint64_t)__dst);
    if (*(_BYTE *)(a2 + 82))
    {
      v23 = 0;
      v24 = (__int16 *)(a2 + 44);
      do
      {
        v25 = *(v24 - 1);
        v26 = (unsigned __int16)*v24;
        if (v25 == -1 && v26 == 0xFFFF)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _NULL_", v20, v21, v22, (uint64_t)"MATCH");
        }
        else
        {
          cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(_QWORD *)(a1 + 304) + v25), (unsigned __int16)(v26 - v25));
          *(_BYTE *)(*(_QWORD *)(a1 + 552) - *(v24 - 1) + *v24) = 0;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _%s_", v28, v29, v30, (uint64_t)"MATCH");
        }
        ++v23;
        v24 += 2;
      }
      while (v23 < *(unsigned __int8 *)(a2 + 82));
    }
    if (*(_WORD *)(a2 + 40))
    {
      v31 = 0;
      v32 = a2 + 2;
      do
      {
        v32 += 4;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] \"%s\"", v20, v21, v22, (uint64_t)"EXPANDEDORTH");
        ++v31;
      }
      while (v31 < *(unsigned __int16 *)(a2 + 40));
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v34);
    return NNTNERROR(7);
  }
}

uint64_t FERuntimeData_DumpMatches_NNTN(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *i;
  unsigned int v21;
  char __dst[10];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 548))
    return 0;
  v9 = *(_QWORD *)(a1 + 176);
  if (v9)
  {
    if (a3 == 1)
      v11 = "<LOGFE> ";
    else
      v11 = "";
    cstdlib_strcpy(__dst, v11);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches Begin %s", v12, v13, v14, (uint64_t)__dst);
    if (*(_WORD *)(v9 + 16))
    {
      for (i = *(__int16 **)(v9 + 8); i; i = *(__int16 **)i)
        FERuntimeData_DumpMatch_NNTN(a1, (uint64_t)(i + 12), i + 8, a3, v15, v16, v17, v18);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches End (%x)", v16, v17, v18, (uint64_t)__dst);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v21);
  return NNTNERROR(7);
}

uint64_t FERuntimeData_DeleteMatch_NNTN(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v9;
  _QWORD *v10;

  v3 = *(_QWORD *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    v4 = (_QWORD *)(v3 + 8);
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      v5 = (uint64_t *)*v5;
      if (!v5)
        break;
      v6 = *((unsigned __int16 *)v5 + 8);
      v7 = *a2;
      if (v6 == v7 && *((unsigned __int16 *)v5 + 9) == a2[1] && v5[15] == *(_QWORD *)(a3 + 96))
      {
        v9 = (uint64_t *)*v5;
        v10 = (_QWORD *)v5[1];
        if (!v10)
        {
          if (v9)
            v9[1] = 0;
          v10 = v4;
        }
        *v10 = v9;
        if (*v5)
          *(_QWORD *)(*v5 + 8) = v5[1];
        return 0;
      }
    }
    while ((__int16)v6 <= (__int16)v7);
  }
  return 0;
}

uint64_t partialMatchFoundInBasicToken_NNTN(uint64_t result, __int16 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *i;
  int v6;
  int v7;
  int Type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char *__s1;
  uint64_t v15;

  v15 = 0;
  if (result)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 264) + 16);
    for (i = *(uint64_t **)(v3 + 80); (unint64_t)i < *(_QWORD *)(v3 + 88); ++i)
    {
      __s1 = 0;
      v6 = LDOTreeNode_ComputeAbsoluteFrom(*i, (_DWORD *)&v15 + 1);
      if ((LH_ERROR_to_VERROR(v6) & 0x80000000) != 0)
        break;
      v7 = LDOTreeNode_ComputeAbsoluteTo(*i, &v15);
      if ((LH_ERROR_to_VERROR(v7) & 0x80000000) != 0)
        break;
      Type = LDOObject_GetType(*i, (uint64_t *)&__s1);
      if ((LH_ERROR_to_VERROR(Type) & 0x80000000) != 0)
        break;
      if (!cstdlib_strcmp(__s1, "TOKEN_ALPHA")
        || !cstdlib_strcmp(__s1, "TOKEN_DIGIT")
        || !cstdlib_strcmp(__s1, "TOKEN_PUNCT")
        || !cstdlib_strcmp(__s1, "TOKEN_WSPACE"))
      {
        v12 = *a2;
        if (__PAIR64__((__int16)v15, SWORD2(v15)) != __PAIR64__(a2[1], v12))
        {
          if (SWORD2(v15) >= (int)v12)
          {
            v13 = a2[1];
          }
          else
          {
            v13 = a2[1];
            if ((int)v12 < (__int16)v15)
              goto LABEL_20;
          }
          if (SWORD2(v15) < v13 && v13 < (__int16)v15)
          {
LABEL_20:
            log_OutText(*(_QWORD *)(*v2 + 32), v2[23], 5, 0, (uint64_t)"Regex match %d,%d bisects basic token %d,%d", v9, v10, v11, v12);
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t tokenizer_apply_regex_NNTN(uint64_t *a1, uint64_t a2, size_t **a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  size_t *v25;
  int v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int16 *)(a2 + 44);
  v29 = 0;
  v7 = nuance_pcre_exec((_QWORD *)a1[17], a1[18], *(_QWORD *)(a2 + 32), *(int **)a2, (char *)a1[38], *(unsigned __int16 *)(a2 + 42), v6, *(unsigned __int16 *)(a2 + 64), &v30, 100);
  v11 = v31;
  if (v31 > *(unsigned __int16 *)(a2 + 46))
    goto LABEL_13;
  if ((v7 & 0x80000000) != 0)
  {
    v12 = nuance_pcre_ErrorToLhError(v7);
    if (v12 >> 20 == 2213)
    {
      v14 = v12;
      if ((v12 & 0x1FFF) == 0xA)
      {
        v15 = 11002;
        goto LABEL_23;
      }
      if ((v12 & 0x1FFF) != 0x14)
      {
        v15 = 11027;
LABEL_23:
        log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], v15, (uint64_t)"%s%x%s%s", v13, v8, v9, v10, "lhError");
        return v14;
      }
      goto LABEL_13;
    }
    v11 = v31;
  }
  v16 = v30;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(__int16 **)(v17 + 8);
  *v18 = v30;
  v18[1] = v11;
  if (!(v16 | (unsigned __int16)v11))
    goto LABEL_13;
  if (*(_DWORD *)(v17 + 44) != 1)
  {
    if (partialMatchFoundInBasicToken_NNTN((uint64_t)a1, v18) != 1)
      goto LABEL_19;
    log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s invalidated.", v19, v20, v21, *(_QWORD *)(a2 + 24));
LABEL_13:
    v22 = 1;
    goto LABEL_14;
  }
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s already validated", v8, v9, v10, *(_QWORD *)(a2 + 24));
LABEL_19:
  *(_QWORD *)(**(_QWORD **)(a2 + 16) + 96) = *(_QWORD *)(a2 + 56);
  v27 = sortExpansionNNTN(a1, a2);
  if ((v27 & 0x80000000) != 0)
    return v27;
  v22 = 0;
  *(_DWORD *)(a2 + 72) = 1;
LABEL_14:
  v23 = LDOTreeNode_ComputeAbsoluteTo(**a3, &v29);
  v24 = LH_ERROR_to_VERROR(v23);
  v14 = v24;
  if ((v22 & 1) == 0 && (v24 & 0x80000000) == 0)
  {
    do
    {
      if ((unsigned __int16)v29 >= *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) + 2))
        break;
      v25 = (*a3)++;
      v26 = LDOTreeNode_ComputeAbsoluteTo(v25[1], &v29);
      v14 = LH_ERROR_to_VERROR(v26);
    }
    while ((v14 & 0x80000000) == 0);
  }
  return v14;
}

uint64_t tokenizer_ResolveMatches_NNTN(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned __int16 v10;
  uint64_t matched;
  uint64_t AllMatchesAtKey;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  int *v40;
  unsigned __int16 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int16 v63;
  unint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int16 *v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;

  v76 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  if (!a1)
    return NNTNERROR(7);
  if (!*(_QWORD *)(a1 + 304))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v71);
    return NNTNERROR(7);
  }
  if (*(_DWORD *)(a1 + 548) == 1
    && FERuntimeData_GetNumMatches((_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    FERuntimeData_DumpMatches_NNTN(a1, (uint64_t)"Dump at start of ResolveMatches", 0, a4, a5, a6, a7, a8);
  }
  v74 = 0;
  if (!*(_WORD *)(a1 + 312))
  {
    matched = 0;
    goto LABEL_79;
  }
  v9 = 0;
  v10 = 0;
  matched = 0;
  while (2)
  {
    FERuntimeData_GetKeyAtPos(a1, v10, &v75, &v73);
    a2 = v75;
    if (!v75 || v9 != (__int16)*v75)
    {
      ++v10;
      goto LABEL_73;
    }
    FERuntimeData_FindLongestMatch(a1, v75, &v76);
    LOWORD(v74) = *v75;
    HIWORD(v74) = v76;
    FERuntimeData_DeleteSubsumedkeys(a1, v75, v76);
    AllMatchesAtKey = FERuntimeData_GetAllMatchesAtKey(a1, (unsigned __int16 *)&v74);
    if ((AllMatchesAtKey & 0x80000000) != 0)
      return AllMatchesAtKey;
    v16 = *(unsigned __int16 *)(a1 + 386);
    if (v16 < 2)
      goto LABEL_71;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"applying token priority lists to resolve %d token clashes at position %d,%d", v13, v14, v15, v16);
    LODWORD(v22) = *(unsigned __int16 *)(a1 + 386);
    if (*(_DWORD *)(a1 + 548) == 1 && *(_WORD *)(a1 + 386))
    {
      v23 = 0;
      do
      {
        FEData_blockData_getTokenData_NNTN((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v23) + 96), &v72, v17, v18, v19, v20, v21);
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"[%d] = token %s", v24, v25, v26, v23++);
        v22 = *(unsigned __int16 *)(a1 + 386);
      }
      while (v23 < v22);
    }
    v78 = 0;
    v79 = 0;
    v77 = 0;
    AllMatchesAtKey = resetSolutionList(a1, v22);
    if ((AllMatchesAtKey & 0x80000000) != 0)
      return AllMatchesAtKey;
    if (!*(_WORD *)(a1 + 386))
      goto LABEL_53;
    v32 = 0;
    v33 = 0;
    v34 = 4;
    do
    {
      AllMatchesAtKey = FEData_blockData_newGetDomainDefBlockInfo((_QWORD *)a1, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v32) + 104), &v77, v27, v28, v29, v30, v31);
      if ((AllMatchesAtKey & 0x80000000) != 0)
        return AllMatchesAtKey;
      v35 = *(_DWORD *)(v77 + 8);
      v36 = *(_QWORD *)(a1 + 360);
      *(_DWORD *)(v36 + v34) = v35;
      if (v35 > v33)
        v33 = v35;
      ++v32;
      v37 = *(unsigned __int16 *)(a1 + 386);
      v34 += 12;
    }
    while (v32 < v37);
    if (!*(_WORD *)(a1 + 386))
      goto LABEL_53;
    v38 = 0;
    v39 = 0;
    v40 = (int *)(v36 + 4);
    v41 = 999;
    do
    {
      v42 = *v40;
      v40 += 3;
      if (v42 == v33)
      {
        ++v39;
        v41 = v38;
      }
      ++v38;
    }
    while (v37 != v38);
    if (v39 == 1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"priority list resolution by domain type : match %d", v29, v30, v31, v41);
      goto LABEL_66;
    }
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v41 = 999;
    do
    {
      *(_WORD *)(*(_QWORD *)(a1 + 360) + 12 * v46) = 999;
      v49 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v46);
      FEData_blockData_newGetDomainEntry((_QWORD *)a1, *(unsigned __int16 *)(v49 + 104), *(unsigned __int16 *)(v49 + 106), &v79, v28, v29, v30, v31);
      if (*(_DWORD *)(v79 + 8) != 1)
      {
        v50 = v48;
LABEL_48:
        v57 = *(unsigned __int16 *)(a1 + 386);
        v48 = v50;
        goto LABEL_49;
      }
      FEData_blockData_newGetPriorityList_NNTN((_QWORD *)a1, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v46) + 104), *(unsigned __int16 *)(v79 + 12), &v78, v28, v29, v30, v31);
      v50 = v78;
      if (!v78 || v78 == v48)
        goto LABEL_48;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"using priority list from match %d, to resolve", v29, v30, v31, v47);
      v48 = v78;
      if (*(_WORD *)(a1 + 386))
      {
        v51 = 0;
        v52 = 0;
        v53 = *((unsigned __int16 *)v78 + 4);
        do
        {
          if (*((_WORD *)v78 + 4))
          {
            v54 = 0;
            v55 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v51) + 96);
            v56 = *v78;
            while (*(unsigned __int16 *)(v55 + 2) != *(unsigned __int16 *)(*(_QWORD *)v56 + 2)
                 || *(unsigned __int16 *)(v55 + 4) != *(unsigned __int16 *)(*(_QWORD *)v56 + 4))
            {
              ++v54;
              v56 += 24;
              if (*((unsigned __int16 *)v78 + 4) == v54)
                goto LABEL_45;
            }
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"token [%d] priority = %d", v29, v30, v31, v52);
            if (v53 > (unsigned __int16)v54)
            {
              v53 = (unsigned __int16)v54;
              *(_WORD *)(*(_QWORD *)(a1 + 360) + 12 * v46) = v51;
              v41 = v51;
            }
          }
LABEL_45:
          ++v51;
          v57 = *(unsigned __int16 *)(a1 + 386);
          v52 = v51;
        }
        while (v51 < v57);
        v48 = v78;
      }
      else
      {
        v57 = 0;
      }
LABEL_49:
      v47 = ++v46;
    }
    while (v46 < v57);
    if (v41 == 999)
    {
LABEL_53:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"no priority list resolution : return default match %d", v29, v30, v31, 0);
      v41 = 0;
    }
    else if (v57)
    {
      v58 = 0;
      v59 = 1;
LABEL_56:
      v60 = (unsigned __int16 *)(*(_QWORD *)(a1 + 360) + 12 * v58);
      do
      {
        v62 = *v60;
        v60 += 6;
        v61 = v62;
        if (v62 != 999 && (_DWORD)v61 != v41)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"priority lists conflict in resolution : solution %d and %d", v29, v30, v31, v61);
          v59 = 0;
          v57 = *(unsigned __int16 *)(a1 + 386);
          if (++v58 < v57)
            goto LABEL_56;
          goto LABEL_65;
        }
        ++v58;
      }
      while (v58 < v57);
      if ((v59 & 1) != 0)
        goto LABEL_64;
LABEL_65:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"priority list resolution : conflict found, so choosing match %d", v29, v30, v31, v41);
    }
    else
    {
LABEL_64:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"priority list resolution : match %d", v29, v30, v31, v41);
    }
LABEL_66:
    v63 = *(_WORD *)(a1 + 386);
    if (v63)
    {
      for (i = 0; i < v63; ++i)
      {
        if (v41 != i)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), *(_QWORD *)(a1 + 184), 5, 0, (uint64_t)"deleting match %d", v43, v44, v45, i);
          FERuntimeData_DeleteMatch_NNTN(a1, (unsigned __int16 *)&v74, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * i));
          v63 = *(_WORD *)(a1 + 386);
        }
      }
    }
LABEL_71:
    matched = resetMatchList(a1, 0);
    if ((matched & 0x80000000) == 0)
    {
      v10 = v76;
LABEL_73:
      v75 = 0;
      v9 = v10;
      if (v10 >= *(unsigned __int16 *)(a1 + 312))
      {
LABEL_79:
        if (*(_DWORD *)(a1 + 548) == 1)
        {
          if (FERuntimeData_GetNumMatches((_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            FERuntimeData_DumpMatches_NNTN(a1, (uint64_t)"Dump at end of ResolveMatches", 0, v66, v67, v68, v69, v70);
        }
        return matched;
      }
      continue;
    }
    return matched;
  }
}

uint64_t tokenizer_NNTN_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t Map;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;

  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : ObjOpen Begin", a6, a7, a8, v47);
  v9 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 8);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v48);
    return NNTNERROR(10);
  }
  v14 = v9;
  a1[21] = v9;
  v15 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 80);
  *(_QWORD *)v14 = v15;
  v20 = *a1;
  if (v15)
  {
    v21 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 40);
    **(_QWORD **)v14 = v21;
    v20 = *a1;
    if (v21)
    {
      v22 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 64);
      *(_QWORD *)(*(_QWORD *)v14 + 16) = v22;
      v20 = *a1;
      if (v22)
      {
        v23 = (_DWORD *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 4);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 8) = v23;
        if (v23)
        {
          *v23 = 0;
          v24 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 112);
          v25 = *(_QWORD ***)v14;
          v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
          *(_QWORD *)v26 = v24;
          if (v24)
          {
            *(_QWORD *)(v24 + 96) = 0;
            *(_WORD *)(v26 + 40) = 0;
            *(_DWORD *)(v26 + 48) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)(v26 + 24) = 0;
            v27 = *v25;
            *v27 |= 4uLL;
            v27[3] = v26;
            v50 = 0;
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : InitCheckFunctions Begin", v17, v18, v19, v48);
            Map = FEFunctionMap_GetMap(a1, &v50);
            if ((Map & 0x80000000) != 0)
            {
              v38 = Map;
            }
            else
            {
              for (i = 0; i != 128; i += 16)
              {
                v30 = ssftmap_Insert(v50, *(uint64_t *)((char *)&off_24D285AE8 + i), *(uint64_t *)((char *)&off_24D285AE8 + i + 8));
                if ((v30 & 0x80000000) != 0)
                {
                  v38 = v30;
                  log_OutPublic(*(_QWORD *)(*a1 + 32), a1[23], 21011, 0, v31, v32, v33, v34, v49);
                  goto LABEL_20;
                }
              }
              v38 = FEFunctionMap_AddFunctionMap((uint64_t)a1, 0, v50);
              if ((v38 & 0x80000000) == 0)
                goto LABEL_21;
            }
LABEL_20:
            ssftmap_ObjClose(v50);
LABEL_21:
            log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : InitCheckFunctions End (%x)", v35, v36, v37, v38);
            if ((v38 & 0x80000000) == 0)
              goto LABEL_17;
            goto LABEL_16;
          }
        }
        v20 = *a1;
      }
    }
  }
  log_OutPublic(*(_QWORD *)(v20 + 32), a1[23], 24048, 0, v16, v17, v18, v19, v48);
  v38 = NNTNERROR(10);
  if ((v38 & 0x80000000) != 0)
LABEL_16:
    tokenizer_loc_ObjClose(a1, v40, v41, v42, v43, v44, v45, v46);
LABEL_17:
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : ObjOpen End (%x)", v44, v45, v46, v38);
  return v38;
}

uint64_t tokenizer_loc_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = a1[21];
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : loc ObjClose Begin", a6, a7, a8, v16);
  v10 = *(uint64_t **)v9;
  if (*(_QWORD *)v9)
  {
    v11 = (uint64_t *)v10[2];
    if (v11)
    {
      if (v11[1])
      {
        heap_Free(*(_QWORD **)(*a1 + 8), v11[1]);
        v11 = *(uint64_t **)(*(_QWORD *)v9 + 16);
        v11[1] = 0;
      }
      if (*v11)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *v11);
        v11 = *(uint64_t **)(*(_QWORD *)v9 + 16);
        *v11 = 0;
      }
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v11);
      v10 = *(uint64_t **)v9;
      *(_QWORD *)(*(_QWORD *)v9 + 16) = 0;
    }
    if (*v10)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), *v10);
      v10 = *(uint64_t **)v9;
      **(_QWORD **)v9 = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
    *(_QWORD *)v9 = 0;
  }
  heap_Free(*(_QWORD **)(*a1 + 8), v9);
  a1[21] = 0;
  return log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : loc ObjClose End (%x)", v12, v13, v14, 0);
}

uint64_t tokenizer_NNTN_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (!a1[21])
    return NNTNERROR(8);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : ObjClose Begin", a6, a7, a8, v20);
  tokenizer_loc_ObjClose(a1, v9, v10, v11, v12, v13, v14, v15);
  log_OutText(*(_QWORD *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer_NNTN : ObjOpen End (%x)", v16, v17, v18, 0);
  return 0;
}

uint64_t fe_nnws_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2588942337;
  result = 0;
  *a2 = &IFeNNWS;
  return result;
}

uint64_t fe_nnws_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2588942343;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_nnws_ClassClose()
{
  return 0;
}

uint64_t fe_nnws_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Object;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[16];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v56 = 0;
  v5 = 2588942343;
  v49 = 0;
  v50 = 0;
  memset(v59, 0, sizeof(v59));
  if (!a5)
    return v5;
  v54 = 0;
  v52 = 0uLL;
  v53 = 0uLL;
  v51 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a1, a2, &v57);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a3, a4, &v58);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = heap_Calloc(*(_QWORD **)(v58 + 8), 1, 208);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(v58 + 32), (uint64_t)"FE_NNWS", 75000, 0, v13, v14, v15, v16, v47);
    v5 = 2588942346;
LABEL_25:
    fe_nnws_ObjClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  v17 = v12;
  Object = objc_GetObject(*(_QWORD *)(v58 + 48), (uint64_t)"LINGDB", &v56);
  if ((Object & 0x80000000) != 0)
    goto LABEL_24;
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v56 + 8);
  Object = objc_GetObject(*(_QWORD *)(v58 + 48), (uint64_t)"FE_DCTLKP", &v55);
  if ((Object & 0x80000000) != 0)
    goto LABEL_24;
  v22 = v55;
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v55 + 8);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v22 + 16);
  *(_QWORD *)v17 = v58;
  *(_QWORD *)(v17 + 8) = a3;
  v23 = v57;
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = v23;
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  *(_QWORD *)(v17 + 104) = 0;
  Object = fe_nnws_loadCfg(v17);
  if ((Object & 0x80000000) != 0
    || (*(_QWORD *)(v17 + 128) = 0, Object = nn_word_lkp_GetInterface(1u, &v51), (Object & 0x80000000) != 0))
  {
LABEL_24:
    v5 = Object;
    log_OutText(*(_QWORD *)(*(_QWORD *)v17 + 32), (uint64_t)"FE_NNWS", 2, 0, (uint64_t)"fe_nnws ObjOpen Failed!", v19, v20, v21, v47);
    goto LABEL_25;
  }
  *(_QWORD *)(v17 + 128) = v51;
  *(_QWORD *)(v17 + 136) = safeh_GetNullHandle();
  *(_QWORD *)(v17 + 144) = v24;
  *(_QWORD *)(v17 + 152) = safeh_GetNullHandle();
  *(_QWORD *)(v17 + 160) = v25;
  *(_QWORD *)(v17 + 168) = safeh_GetNullHandle();
  *(_QWORD *)(v17 + 176) = v26;
  v27 = *(_QWORD *)(v17 + 136);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 128)
                                                                                            + 16);
  v29 = *(_QWORD *)(v17 + 144);
  v30 = *(_QWORD *)(v17 + 8);
  v31 = *(_QWORD *)(v17 + 16);
  if (*(_DWORD *)(v17 + 200))
  {
    Object = v28(v27, v29, "albert", v30, v31, v17 + 152);
    if ((Object & 0x80000000) != 0)
      goto LABEL_24;
  }
  else
  {
    Object = v28(v27, v29, "char", v30, v31, v17 + 152);
    if ((Object & 0x80000000) != 0)
      goto LABEL_24;
    v53 = *(_OWORD *)(v17 + 152);
    *((_QWORD *)&v52 + 1) = v51;
    Object = objc_RegisterObject(*(_QWORD *)(v58 + 48), (uint64_t)"NNCHRLKP", &v52);
    if ((Object & 0x80000000) != 0)
      goto LABEL_24;
  }
  if (!*(_DWORD *)(v17 + 200))
  {
    Object = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v17 + 128)
                                                                                              + 16))(*(_QWORD *)(v17 + 136), *(_QWORD *)(v17 + 144), "nnws_wlist", *(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16), v17 + 168);
    if ((Object & 0x80000000) != 0)
      goto LABEL_24;
  }
  Object = fe_nnws_CreateBrokerString(*(_QWORD *)v17, (char *)v59, "nnws_");
  if ((Object & 0x80000000) != 0)
    goto LABEL_24;
  v32 = fi_init(a3, a4, a1, a2, &v50, 0, (uint64_t)v59, "FINN", 1, 0);
  if ((v32 & 0x80000000) != 0)
  {
    v5 = v32;
    v45 = *(_QWORD *)(*(_QWORD *)v17 + 32);
    v46 = "create FI model failed";
LABEL_29:
    log_OutText(v45, (uint64_t)"FE_NNWS", 5, 0, (uint64_t)v46, v33, v34, v35, v48);
    return v5;
  }
  *(_QWORD *)(v17 + 80) = v50;
  v36 = fe_nnws_tagInit(*(_QWORD *)v17, &v49);
  if ((v36 & 0x80000000) != 0)
  {
    v5 = v36;
    v45 = *(_QWORD *)(*(_QWORD *)v17 + 32);
    v46 = "create SBME tags failed";
    goto LABEL_29;
  }
  *(_QWORD *)(v17 + 120) = v49;
  v37 = (uint64_t *)(v17 + 184);
  v5 = fe_nnws_tryLoadingIGTree(*(_WORD **)(v17 + 8), *(_QWORD *)(v17 + 16), *(_QWORD *)v17, (char **)(v17 + 184));
  if ((v5 & 0x80000000) != 0)
  {
    if (*v37)
    {
      igtree_Deinit(*(_QWORD *)v17, *v37, v38, v39, v40, v41, v42, v43);
      heap_Free(*(_QWORD **)(*(_QWORD *)v17 + 8), *(_QWORD *)(v17 + 184));
      v5 = 0;
      *(_QWORD *)(v17 + 184) = 0;
    }
    else
    {
      v5 = 0;
    }
  }
  *(_QWORD *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 62346;
  return v5;
}

uint64_t fe_nnws_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t i;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 62346, 208);
  if ((v3 & 0x80000000) != 0)
    return 2588942344;
  v9 = v3;
  if (a1)
  {
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    v10 = a1[16];
    if (v10)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(a1[19], a1[20]);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[16] + 24))(a1[21], a1[22]);
      if ((v9 & 0x80000000) == 0 && (v11 & 0x80000000) == 0)
        objc_UnregisterObject(*(_QWORD *)(*a1 + 48), (uint64_t)"NNCHRLKP");
    }
    v12 = a1[14];
    if (v12)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v12);
      a1[14] = 0;
    }
    v13 = (uint64_t *)a1[10];
    if (v13)
      v9 = fi_deinit(*a1, a1[3], v13);
    if (a1[15])
    {
      for (i = 0; i != 32; i += 8)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)(a1[15] + i));
        *(_QWORD *)(a1[15] + i) = 0;
      }
      heap_Free(*(_QWORD **)(*a1 + 8), a1[15]);
      a1[15] = 0;
    }
    v15 = a1[23];
    if (v15)
    {
      igtree_Deinit(*a1, v15, (uint64_t)v13, v4, v5, v6, v7, v8);
      heap_Free(*(_QWORD **)(*a1 + 8), a1[23]);
      a1[23] = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  }
  return v9;
}

uint64_t fe_nnws_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t Cfg;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[16];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v4 = 2588942342;
  v39 = 0;
  memset(v44, 0, sizeof(v44));
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62346, 208) & 0x80000000) != 0)
    return 2588942344;
  if (a1)
  {
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v10 = a1[16];
    if (v10)
    {
      v11 = (*(uint64_t (**)(_QWORD, _QWORD))(v10 + 24))(a1[19], a1[20]);
      v12 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[16] + 24))(a1[21], a1[22]);
      if ((v11 & 0x80000000) == 0 && (v12 & 0x80000000) == 0)
        objc_UnregisterObject(*(_QWORD *)(*a1 + 48), (uint64_t)"NNCHRLKP");
    }
    v13 = (uint64_t *)a1[10];
    if (v13)
    {
      Cfg = fi_deinit(*a1, a1[3], v13);
      if ((Cfg & 0x80000000) != 0)
      {
LABEL_29:
        v4 = Cfg;
LABEL_30:
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 2, 0, (uint64_t)"fe_nnws ObjReopen Failed!", v7, v8, v9, v37);
        fe_nnws_ObjClose(a1, a2);
        return v4;
      }
      a1[10] = 0;
    }
    v15 = a1[14];
    if (v15)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v15);
      a1[14] = 0;
    }
    v17 = a1 + 23;
    v16 = a1[23];
    if (v16)
    {
      igtree_Deinit(*a1, v16, (uint64_t)v13, v5, v6, v7, v8, v9);
      heap_Free(*(_QWORD **)(*a1 + 8), a1[23]);
      a1[23] = 0;
    }
    a1[13] = 0;
    Cfg = fe_nnws_loadCfg((uint64_t)a1);
    if ((Cfg & 0x80000000) != 0)
      goto LABEL_29;
    Cfg = nn_word_lkp_GetInterface(1u, &v43);
    if ((Cfg & 0x80000000) != 0)
      goto LABEL_29;
    a1[16] = v43;
    a1[17] = safeh_GetNullHandle();
    a1[18] = v18;
    a1[19] = safeh_GetNullHandle();
    a1[20] = v19;
    a1[21] = safeh_GetNullHandle();
    a1[22] = v20;
    v21 = a1[17];
    v22 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, _QWORD *))(a1[16] + 16);
    v23 = a1[18];
    v24 = a1[1];
    v25 = a1[2];
    if (*((_DWORD *)a1 + 50))
    {
      Cfg = v22(v21, v23, "albert", v24, v25, a1 + 19);
      if ((Cfg & 0x80000000) != 0)
        goto LABEL_29;
    }
    else
    {
      Cfg = v22(v21, v23, "char", v24, v25, a1 + 19);
      if ((Cfg & 0x80000000) != 0)
        goto LABEL_29;
      v41 = *(_OWORD *)(a1 + 19);
      *((_QWORD *)&v40 + 1) = v43;
      Cfg = objc_RegisterObject(*(_QWORD *)(*a1 + 48), (uint64_t)"NNCHRLKP", &v40);
      if ((Cfg & 0x80000000) != 0)
        goto LABEL_29;
    }
    if (!*((_DWORD *)a1 + 50))
    {
      Cfg = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, _QWORD, _QWORD *))(a1[16] + 16))(a1[17], a1[18], "nnws_wlist", a1[1], a1[2], a1 + 21);
      if ((Cfg & 0x80000000) != 0)
        goto LABEL_29;
    }
    Cfg = fe_nnws_CreateBrokerString(*a1, (char *)v44, "nnws_");
    if ((Cfg & 0x80000000) != 0)
      goto LABEL_29;
    v26 = fi_init((_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], &v39, 0, (uint64_t)v44, "FINN", 1, 0);
    if ((v26 & 0x80000000) != 0)
    {
      v4 = v26;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"re-create FI model failed", v27, v28, v29, v38);
      goto LABEL_30;
    }
    a1[10] = v39;
    v4 = fe_nnws_tryLoadingIGTree((_WORD *)a1[1], a1[2], *a1, (char **)a1 + 23);
    if ((v4 & 0x80000000) != 0)
    {
      if (*v17)
      {
        igtree_Deinit(*a1, *v17, v30, v31, v32, v33, v34, v35);
        heap_Free(*(_QWORD **)(*a1 + 8), a1[23]);
        v4 = 0;
        a1[23] = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return v4;
}

uint64_t fe_nnws_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62346, 208);
  if ((int)result >= 0)
    return result;
  else
    return 2588942344;
}

uint64_t fe_nnws_Process(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t UTF8Char;
  int v73;
  int v74;
  uint64_t v75;
  int32x2_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  _DWORD *v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  int v90;
  int32x2_t *v91;
  int v92;
  size_t v93;
  char *v94;
  uint64_t v95;
  unsigned __int16 v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t (**v115)(_QWORD, _QWORD, uint64_t, _DWORD *);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (**v121)(_QWORD, _QWORD, _QWORD, _DWORD *);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *);
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t ***v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  _BOOL4 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  _QWORD *v164;
  int v165;
  const void *v166;
  uint64_t *v167;
  unsigned int v168;
  uint64_t *v169;
  char *v170;
  char *__s;
  int v172;
  __int16 v173;
  int v174;
  unsigned __int16 v175;
  __int16 v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  int v181;
  int v182;
  const char *v183;
  int v184;
  char __src[2];

  v175 = 0;
  v170 = 0;
  __s = 0;
  v5 = 2588942346;
  v169 = 0;
  v168 = 0;
  v166 = 0;
  v167 = 0;
  v165 = 0;
  *a5 = 1;
  if (!a1)
    return 2588942343;
  v174 = 0;
  v173 = 0;
  v172 = 0;
  v9 = log_GetLogLevel(*(_QWORD *)(*a1 + 32)) > 4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[6] + 104))(a3, a4, 1, 0, &v175);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = v10;
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(a1[6] + 184))(a3, a4, v175, 0, &v173);
  v12 = 0;
  if ((v11 & 0x80000000) != 0 || v173 != 1)
    goto LABEL_20;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, char *))(a1[6] + 176))(a3, a4, v175, 0, &__s, (char *)&v174 + 2);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_19;
  if (HIWORD(v174) < 2u)
    return v11;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = cstdlib_strlen(__s);
  v15 = (char *)heap_Alloc(v13, v14 + 1);
  v170 = v15;
  if (!v15)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v16, v17, v18, v19, v146);
    v12 = 0;
LABEL_218:
    v11 = 2588942346;
    goto LABEL_20;
  }
  v20 = v15;
  cstdlib_strcpy(v15, __s);
  v21 = cstdlib_strlen(v20);
  v22 = Utf8_LengthInUtf8chars((unint64_t)v20, v21);
  v23 = heap_Calloc(*(_QWORD **)(*a1 + 8), v22, 56);
  v167 = (uint64_t *)v23;
  if (!v23)
    goto LABEL_217;
  v28 = v23;
  v29 = a1[6];
  v158 = *a1;
  v30 = v175;
  v184 = 0;
  v183 = 0;
  v181 = 0;
  v182 = 0;
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(v29 + 176))(a3, a4, v175, 1, &v178, (char *)&v182 + 2);
  if ((v31 & 0x80000000) != 0
    || (v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(v29 + 104))(a3, a4, 3, v30, &v182), (v31 & 0x80000000) != 0))
  {
    v43 = 0;
    v5 = v31;
    goto LABEL_47;
  }
  v32 = v182;
  v154 = v30;
  if ((_WORD)v182)
  {
    while (1)
    {
      v177 = 0;
      v176 = 0;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(v29 + 168))(a3, a4, v32, 0, 1, &v177, &v176);
      if ((v33 & 0x80000000) != 0)
        goto LABEL_261;
      if (v177 == 6)
        break;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v29 + 120))(a3, a4, (unsigned __int16)v182, &v182);
      if ((v33 & 0x80000000) != 0)
        goto LABEL_261;
      v32 = v182;
      if (!(_WORD)v182)
      {
        v147 = 0;
        v34 = 1;
        v30 = v30;
        goto LABEL_49;
      }
    }
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 1, 1, (char *)&v179 + 4, &v176);
    if ((v33 & 0x80000000) != 0)
      goto LABEL_261;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 2, 1, &v179, &v176);
    if ((v33 & 0x80000000) != 0)
      goto LABEL_261;
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v29 + 184))(a3, a4, (unsigned __int16)v182, 8, (char *)&v181 + 2);
    if ((v125 & 0x80000000) != 0)
      goto LABEL_237;
    if (HIWORD(v181) == 1)
    {
      v125 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 8, 1, &v184, &v176);
      v30 = v30;
      if ((v125 & 0x80000000) != 0)
        goto LABEL_237;
    }
    else
    {
      v184 = v179 - HIDWORD(v179);
      v30 = v30;
    }
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(v29 + 176))(a3, a4, (unsigned __int16)v182, 4, &v183, &v176);
    if ((v125 & 0x80000000) != 0)
    {
LABEL_237:
      v5 = v125;
      v43 = 0;
      goto LABEL_47;
    }
    v134 = cstdlib_strcmp(v183, "_PR_");
    v34 = 0;
    v147 = v134 == 0;
  }
  else
  {
    v147 = 0;
    v34 = 1;
  }
LABEL_49:
  v44 = HIWORD(v182);
  v159 = v28;
  if (!HIWORD(v182))
  {
    v46 = 0;
    goto LABEL_151;
  }
  v156 = v34;
  v45 = 0;
  v162 = 0;
  v163 = 0;
  v46 = 0;
  v150 = 0;
  v47 = 0;
  v48 = 40;
  v155 = 1;
  v149 = v29;
  v151 = v22;
  do
  {
    v49 = v178;
    v50 = *(_DWORD *)(v178 + 32 * v45);
    if (v50 != 1)
    {
      if (v46 && (*(_QWORD *)(v28 + 56 * (v46 - 1) + 36) = 0x100000001, v45 >= 2) && v50 == 99)
      {
        if (*(_DWORD *)(v49 + 32 * (v45 - 1)) == 1
          && *(_DWORD *)(v49 + 32 * v45 + 12) == *(_DWORD *)(v49 + 32 * (v45 - 1) + 12))
        {
          *(_DWORD *)(v28 + 56 * (v46 - 1) + 48) = 1;
        }
      }
      else if (v50 == 0x4000)
      {
        v150 = *(_DWORD *)(v49 + 32 * v45 + 12);
      }
      goto LABEL_148;
    }
    v153 = v45;
    v51 = v178 + 32 * v45;
    v52 = *(_DWORD *)(v51 + 12);
    v150 += v47;
    v148 = v48;
    if (v52 > v150 && *(_DWORD *)(v51 + 4) > v150)
    {
      v53 = v28 + 56 * v46;
      *(_QWORD *)(v53 + 36) = 1;
      *(int32x2_t *)(v53 + 8) = vdup_n_s32(v47);
      *(_DWORD *)(v53 + 16) = v52 + ~v150;
      v54 = (_DWORD *)(v53 + 16);
      v55 = v46;
      v56 = v47;
      v57 = (char *)heap_Alloc(*(_QWORD *)(v158 + 8), 4);
      *(_QWORD *)v53 = v57;
      if (!v57)
      {
LABEL_228:
        log_OutPublic(*(_QWORD *)(v158 + 32), (uint64_t)"FE_NNWS", 75000, 0, v58, v59, v60, v61, v146);
        v43 = v55;
        goto LABEL_47;
      }
      cstdlib_strcpy(v57, "ENG");
      v62 = (*v54 + v56);
      v162 += *v54;
      v163 = v62;
      v46 = v55 + 1;
      v44 = HIWORD(v182);
      v49 = v178;
      v48 = v148;
      v22 = v151;
      v30 = v154;
      v47 = v62;
      v29 = v149;
      v28 = v159;
    }
    if (v153 + 1 >= v44)
    {
      v63 = 0;
LABEL_73:
      v68 = *(_DWORD *)(v49 + 12);
      v67 = *(_DWORD *)(v49 + 16);
      v69 = *(_DWORD *)(v49 + 32 * v153 + 12);
      v70 = v67 + v68 - v63;
    }
    else
    {
      v63 = 0;
      v64 = (int *)(v49 + v48);
      v65 = v155;
      while (*(v64 - 2) != 1)
      {
        v66 = *v64;
        v64 += 8;
        if (v66 == 1)
          ++v63;
        if (v44 == ++v65)
          goto LABEL_73;
      }
      v70 = *(_DWORD *)(v49 + 32 * v65 + 12);
      v69 = v63 + *(_DWORD *)(v49 + 32 * v153 + 12);
    }
    v152 = v70 - v69;
    if (v46 >= v22)
      goto LABEL_146;
    v161 = 0;
    v157 = 1;
    while (1)
    {
      v160 = v46;
      v71 = v47;
      if (cstdlib_strlen(v20) <= v162 || v161 >= v152)
        break;
      if ((_WORD)v182 && v156 == 1)
      {
        if (v71 >= v179)
        {
          do
          {
            v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 120))(a3, a4);
            if ((v33 & 0x80000000) != 0)
              goto LABEL_261;
            if (!(_WORD)v182)
              goto LABEL_82;
            v177 = 0;
            v176 = 0;
            v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 0, 1, &v177, &v176);
            if ((v33 & 0x80000000) != 0)
              goto LABEL_261;
          }
          while (v177 != 6);
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 1, 1, (char *)&v179 + 4, &v176);
          if ((v33 & 0x80000000) != 0)
            goto LABEL_261;
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 2, 1, &v179, &v176);
          if ((v33 & 0x80000000) != 0)
            goto LABEL_261;
          UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v29 + 184))(a3, a4, (unsigned __int16)v182, 8, (char *)&v181 + 2);
          if ((UTF8Char & 0x80000000) != 0)
            goto LABEL_226;
          if (HIWORD(v181) == 1)
          {
            UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v182, 8, 1, &v184, &v176);
            if ((UTF8Char & 0x80000000) != 0)
              goto LABEL_226;
          }
          else
          {
            v184 = v179 - HIDWORD(v179);
          }
          UTF8Char = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(v29 + 176))(a3, a4, (unsigned __int16)v182, 4, &v183, &v176);
          if ((UTF8Char & 0x80000000) != 0)
          {
LABEL_226:
            v5 = UTF8Char;
            goto LABEL_227;
          }
          v156 = 0;
          v147 = cstdlib_strcmp(v183, "_PR_") == 0;
        }
        else
        {
LABEL_82:
          v156 = 1;
        }
      }
      UTF8Char = utf8_getUTF8Char((uint64_t)v20, v163, __src);
      if ((UTF8Char & 0x80000000) != 0)
        goto LABEL_226;
      if (utf8_IsChineseLetter(__src))
      {
        v73 = 0;
        v74 = 1;
        v46 = v160;
        v47 = v71;
      }
      else
      {
        v46 = v160;
        v47 = v71;
        v74 = 0;
        v73 = 1;
        if (__src[0] - 48 >= 0xA
          && (__src[0] - 35 > 0x3C
           || ((1 << (__src[0] - 35)) & 0x1800000004000503) == 0)
          && __src[0] != 124)
        {
          if ((__src[0] & 0xDFu) - 65 < 0x1A
            || __src[0] - 38 <= 0x1A && ((1 << (__src[0] - 38)) & 0x4000003) != 0)
          {
            v74 = 0;
            v73 = 2;
          }
          else
          {
            v73 = 0;
            v74 = 1;
          }
        }
      }
      if ((_WORD)v182 && v163 == HIDWORD(v179))
      {
        if (!v157)
        {
          *(_DWORD *)(v159 + 56 * v46++ + 16) = v163 - v47;
          LODWORD(v47) = v163;
        }
        v83 = (_DWORD *)(v159 + 56 * v46 + 32);
        if (v147)
        {
          *v83 = 5;
          if (v46)
            *(_QWORD *)(v159 + 56 * (v46 - 1) + 36) = 0x100000001;
        }
        else
        {
          *v83 = 3;
        }
        v84 = v159 + 56 * v46;
        *(int32x2_t *)(v84 + 8) = vdup_n_s32(v47);
        *(_DWORD *)(v84 + 20) = v184;
        *(_DWORD *)(v84 + 16) = v179 - v163;
        v85 = (_DWORD *)(v84 + 16);
        *(_QWORD *)(v84 + 36) = 1;
        v86 = v47;
        v55 = v46;
        v87 = (char *)heap_Calloc(*(_QWORD **)(v158 + 8), 1, 4);
        *(_QWORD *)v84 = v87;
        if (!v87)
          goto LABEL_228;
        cstdlib_strcpy(v87, "NUM");
        v162 += *v85;
        v161 += *v85;
        v88 = (*v85 + v86);
        v46 = v55 + 1;
        v156 = 1;
        v157 = 1;
        v163 = v88;
        v22 = v151;
        v30 = v154;
        v47 = v88;
        v29 = v149;
        goto LABEL_130;
      }
      if (!v74)
      {
        if (v157)
        {
          v75 = v29;
          v76 = (int32x2_t *)(v159 + 56 * v46);
          v76[1] = vdup_n_s32(v47);
          v76[2].i32[0] = 1;
          v77 = (char *)heap_Calloc(*(_QWORD **)(v158 + 8), 1, 4);
          *v76 = (int32x2_t)v77;
          if (!v77)
            goto LABEL_238;
          v29 = v75;
          if (v73 == 1)
          {
            v82 = "NUM";
LABEL_122:
            cstdlib_strcpy(v77, v82);
          }
          else if (v73 == 2)
          {
            v82 = "ENG";
            goto LABEL_122;
          }
          v157 = 0;
          v47 = v71;
          v163 = v71 + 1;
          v89 = 1;
          v90 = 1;
          v46 = v160;
        }
        else
        {
          v157 = 0;
          ++v163;
          v89 = 1;
          v90 = 1;
        }
LABEL_129:
        v161 += v89;
        v162 += v90;
        v22 = v151;
        v30 = v154;
LABEL_130:
        v28 = v159;
        goto LABEL_131;
      }
      if (v157)
      {
        v157 = 1;
        v30 = v154;
        v28 = v159;
      }
      else
      {
        v28 = v159;
        v30 = v154;
        if (**(_BYTE **)(v159 + 56 * v46) == 124)
        {
          v157 = 0;
        }
        else
        {
          *(_DWORD *)(v159 + 56 * v46++ + 16) = v163 - v47;
          v157 = 1;
          LODWORD(v47) = v163;
        }
      }
      if (__src[0] != 32)
      {
        v91 = (int32x2_t *)(v28 + 56 * v46);
        v91[4].i32[1] = (v91[4].i32[0] & 0xFFFFFFFE) == 2;
        v91[5].i32[0] = 0;
        v91[1] = vdup_n_s32(v47);
        v160 = v46;
        v92 = v47;
        v89 = utf8_determineUTF8CharLength(v20[v47]);
        v91[2].i32[0] = v89;
        v164 = *(_QWORD **)(v158 + 8);
        v93 = cstdlib_strlen(__src);
        v94 = (char *)heap_Calloc(v164, 1, v93 + 1);
        *v91 = (int32x2_t)v94;
        if (!v94)
        {
LABEL_238:
          log_OutPublic(*(_QWORD *)(v158 + 32), (uint64_t)"FE_NNWS", 75000, 0, v78, v79, v80, v81, v146);
LABEL_227:
          v43 = v160;
LABEL_47:
          v168 = v43;
          v12 = 1;
          v11 = v5;
LABEL_20:
          v35 = v170;
          if (!v170)
            goto LABEL_22;
LABEL_21:
          heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v35);
          goto LABEL_22;
        }
        cstdlib_strcpy(v94, __src);
        v90 = v91[2].i32[0];
        v95 = (v90 + v92);
        v46 = v160 + 1;
        v163 = v95;
        v29 = v149;
        v47 = v95;
        goto LABEL_129;
      }
      v47 = (v47 + 1);
      ++v161;
      ++v162;
      v163 = v47;
      v22 = v151;
LABEL_131:
      if (v46 >= v22)
        goto LABEL_144;
    }
    v46 = v160;
    v22 = v151;
    v47 = v71;
    v28 = v159;
LABEL_144:
    if (!v157)
    {
      *(_DWORD *)(v28 + 56 * v46++ + 16) = v163 - v47;
      v47 = v163;
    }
LABEL_146:
    v45 = v153;
    v48 = v148;
    if (v46)
      *(_QWORD *)(v28 + 56 * (v46 - 1) + 36) = 0x100000001;
LABEL_148:
    ++v45;
    v44 = HIWORD(v182);
    ++v155;
    v48 += 32;
  }
  while (v45 < HIWORD(v182));
LABEL_151:
  v160 = v46;
  v168 = v46;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(v29 + 104))(a3, a4, 3, v30, &v181);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_225:
    v5 = v11;
    goto LABEL_227;
  }
  v96 = v181;
  if ((_WORD)v181)
  {
    while (1)
    {
      v177 = 0;
      v176 = 0;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(v29 + 168))(a3, a4, v96, 0, 1, &v177, &v176);
      if ((v33 & 0x80000000) != 0)
        goto LABEL_261;
      if (v177 == 5)
      {
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v181, 1, 1, (char *)&v179 + 4, &v176);
        if ((v33 & 0x80000000) != 0)
          goto LABEL_261;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, __int16 *))(v29 + 168))(a3, a4, (unsigned __int16)v181, 2, 1, &v179, &v176);
        if ((v33 & 0x80000000) != 0)
          goto LABEL_261;
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(v29 + 176))(a3, a4, (unsigned __int16)v181, 4, &v180, &v176);
        if ((v11 & 0x80000000) != 0)
          goto LABEL_225;
        if (!cstdlib_strcmp(v180, "phon"))
          break;
      }
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v29 + 120))(a3, a4, (unsigned __int16)v181, &v181);
      if ((v11 & 0x80000000) != 0)
        goto LABEL_262;
      v96 = v181;
      if (!(_WORD)v181)
        goto LABEL_161;
    }
    v97 = 1;
  }
  else
  {
LABEL_161:
    v97 = 0;
  }
  v98 = v160;
  if (!v160)
  {
    v126 = 0;
    v168 = 0;
LABEL_230:
    v33 = fe_nnws_writeLDB_v2(a1, a3, a4, v175, v159, v126, (uint64_t)__s);
    if ((v33 & 0x80000000) != 0)
    {
LABEL_261:
      v11 = v33;
    }
    else
    {
      v35 = v170;
      v127 = fe_nnws_adjustTokenRecordBND(v159, v126, v170, v175, a3, a4, (uint64_t)a1);
      if ((v127 & 0x80000000) != 0)
        goto LABEL_255;
      v128 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *))(a1[6] + 160);
      v129 = v175;
      v130 = cstdlib_strlen(v35);
      v11 = v128(a3, a4, v129, 0, (unsigned __int16)(v130 + 1), v35, &v174);
      if ((v11 & 0x80000000) == 0)
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)v35, v131, v132, v133, 0);
    }
LABEL_262:
    v12 = 1;
    goto LABEL_20;
  }
  v99 = v29;
  v100 = 0;
  while (2)
  {
    v101 = *(_DWORD *)(v159 + 56 * v100 + 12);
    if (v97 == 1)
    {
      v102 = v179;
      if (v101 >= HIDWORD(v179) && *(_DWORD *)(v159 + 56 * v100 + 16) + v101 <= v179)
      {
        v97 = 1;
        *(_DWORD *)(v159 + 56 * v100 + 44) = 1;
        goto LABEL_175;
      }
    }
    else
    {
      v102 = v179;
    }
    if (*(_DWORD *)(v159 + 56 * v100 + 16) + v101 > v102 && (unsigned __int16)v181 != 0)
    {
      while (1)
      {
        v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 120))(a3, a4);
        v11 = v104;
        if ((v104 & 0x80000000) != 0)
          goto LABEL_262;
        if (!(_WORD)v181)
          goto LABEL_187;
        v177 = 0;
        v176 = 0;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(v99 + 168))(a3, a4, (unsigned __int16)v181, 0, 1, &v177, &v176);
        if ((v33 & 0x80000000) != 0)
          goto LABEL_261;
        if (v177 == 5)
        {
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v99 + 168))(a3, a4, (unsigned __int16)v181, 1, 1, (char *)&v179 + 4, &v176);
          if ((v33 & 0x80000000) != 0)
            goto LABEL_261;
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, __int16 *))(v99 + 168))(a3, a4, (unsigned __int16)v181, 2, 1, &v179, &v176);
          if ((v33 & 0x80000000) != 0)
            goto LABEL_261;
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(v99 + 176))(a3, a4, (unsigned __int16)v181, 4, &v180, &v176);
          if ((v11 & 0x80000000) != 0)
            goto LABEL_225;
          if (!cstdlib_strcmp(v180, "phon"))
          {
            v97 = 1;
LABEL_187:
            v98 = v160;
            goto LABEL_188;
          }
          v97 = 0;
        }
      }
    }
    *(_DWORD *)(v159 + 56 * v100 + 44) = 0;
LABEL_175:
    ++v100;
LABEL_188:
    if (v100 < v98)
      continue;
    break;
  }
  v168 = v98;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_262;
  v33 = (*(uint64_t (**)(_QWORD, _QWORD, int *))(a1[16] + 40))(a1[19], a1[20], &v172);
  if ((v33 & 0x80000000) != 0)
    goto LABEL_261;
  v109 = *((_DWORD *)a1 + 24);
  if (v109 != *((_DWORD *)a1 + 25) + v172)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v105, v106, v107, v108, v146);
    v11 = 2588942361;
    goto LABEL_262;
  }
  v110 = *((_DWORD *)a1 + 50) ? v160 + 2 : v160;
  v111 = (_DWORD *)heap_Alloc(*(_QWORD *)(*a1 + 8), 4 * (v109 * v110));
  v166 = v111;
  if (!v111)
  {
LABEL_217:
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v24, v25, v26, v27, v146);
    v12 = 1;
    goto LABEL_218;
  }
  v112 = v111;
  if (*((_DWORD *)a1 + 50))
  {
    *v111 = 1120534528;
    v112 = &v111[v172];
  }
  v113 = 0;
  v114 = 0;
  do
  {
    if (*((_DWORD *)a1 + 48))
    {
      v115 = (uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(a1[16] + 64);
    }
    else
    {
      v116 = a1[16];
      if (*((_DWORD *)a1 + 50))
        v115 = (uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(v116 + 72);
      else
        v115 = (uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(v116 + 56);
    }
    v11 = (*v115)(a1[19], a1[20], v167[v113], v112);
    if ((v11 & 0x1FFF) == 0x14)
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"No embedding vector for character %s . Fall back!", v118, v119, v120, v167[v113]);
      if (*((_DWORD *)a1 + 48))
      {
        v121 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *))(a1[16] + 64);
      }
      else
      {
        v122 = a1[16];
        if (*((_DWORD *)a1 + 50))
          v121 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *))(v122 + 72);
        else
          v121 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *))(v122 + 56);
      }
      v11 = (*v121)(a1[19], a1[20], a1[14], v112);
    }
    v123 = (uint64_t)&v112[v172];
    if (*((_DWORD *)a1 + 48) || *((_DWORD *)a1 + 50))
    {
      if ((v11 & 0x80000000) != 0)
        goto LABEL_262;
    }
    else
    {
      fe_nnws_dynamic_feat(a1, (uint64_t)v167, (unsigned __int16)v168, (unsigned __int16)v114, v123);
    }
    v112 = (_DWORD *)(v123 + 4 * *((unsigned int *)a1 + 25));
    ++v114;
    v124 = v168;
    v113 += 7;
  }
  while (v114 < v168);
  if (*((_DWORD *)a1 + 50))
  {
    *v112 = 1120665600;
    v135 = (uint64_t ***)a1[10];
    v136 = (v124 + 2);
  }
  else
  {
    v135 = (uint64_t ***)a1[10];
    v136 = v168;
  }
  v11 = fi_predict(v135, &v166, v136, &v169, v117, v118, v119, v120);
  if ((v11 & 0x80000000) != 0)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"FI Word Segmentation Prediction Failed", v137, v138, v139, 0);
    goto LABEL_262;
  }
  if (*((_DWORD *)a1 + 50))
    ++v169;
  if ((paramc_ParamGetInt(*(_QWORD *)(*a1 + 40), (uint64_t)"nnwsAddonEnable", &v165) & 0x80000000) != 0)
  {
    v140 = *((_DWORD *)a1 + 49);
  }
  else
  {
    v140 = v165;
    *((_DWORD *)a1 + 49) = v165;
  }
  if (v140 < 1
    || (v35 = v170,
        v127 = fe_nnws_addon_lookup(a1, (uint64_t)v167, v124, (uint64_t)v170, (uint64_t *)&v169, (_QWORD *)a1[15], v140),
        (v127 & 0x80000000) == 0))
  {
    v141 = *a1;
    v159 = (uint64_t)v167;
    v142 = (uint64_t *)a1[15];
    if (*((_DWORD *)a1 + 50))
      fe_nnws_adjustBMES_Edge(v141, v124, (uint64_t)v167, v9, v142, &v169);
    else
      fe_nnws_adjustBMES(v141, v124, (uint64_t)v167, v9, v142, &v169);
    v33 = fe_nnws_IGTreeProcess(a1, v124, (uint64_t *)a1[15], v159, (uint64_t *)&v169, v143, v144, v145);
    if ((v33 & 0x80000000) == 0)
    {
      fe_nnws_retag_word_under_phon(&v169, (uint64_t *)&v167, &v168, (_QWORD *)a1[15]);
      v33 = fe_nnws_group(*a1, (uint64_t)v169, (uint64_t *)&v167, &v168, (const char **)&v170);
      if ((v33 & 0x80000000) == 0)
      {
        v126 = v168;
        goto LABEL_230;
      }
    }
    goto LABEL_261;
  }
LABEL_255:
  v11 = v127;
  v12 = 1;
  if (v35)
    goto LABEL_21;
LABEL_22:
  v36 = (uint64_t)v167;
  if (v167)
  {
    v37 = v168;
    if (v168)
    {
      v38 = v167;
      do
      {
        if (*v38)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), *v38);
          *v38 = 0;
        }
        v38 += 7;
        --v37;
      }
      while (v37);
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v36);
  }
  v39 = v12 ^ 1;
  if ((int)v11 < 0)
    v39 = 1;
  if ((v39 & 1) == 0)
  {
    LODWORD(v183) = 0;
    LODWORD(v180) = 0;
    LODWORD(v178) = 0;
    *(_WORD *)__src = 0;
    LOWORD(v184) = 0;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[6] + 104))(a3, a4, 3, v175, __src);
    if ((v11 & 0x80000000) == 0)
    {
      while (*(_WORD *)__src)
      {
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, const char **, int *))(a1[6] + 168))(a3, a4, *(unsigned __int16 *)__src, 0, 1, &v183, &v184);
        if ((v40 & 0x80000000) != 0)
          return v40;
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char **, int *))(a1[6] + 168))(a3, a4, *(unsigned __int16 *)__src, 1, 1, &v180, &v184);
        if ((v40 & 0x80000000) != 0)
          return v40;
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(a1[6] + 168))(a3, a4, *(unsigned __int16 *)__src, 2, 1, &v178, &v184);
        if ((v40 & 0x80000000) != 0)
          return v40;
        if (((_DWORD)v183 - 7) >= 0xFFFFFFFD)
          v41 = 0;
        else
          v41 = *(unsigned __int16 *)__src;
        v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[6] + 120))(a3, a4);
        if ((v11 & 0x80000000) != 0)
          return v11;
        if ((_DWORD)v41)
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[6] + 192))(a3, a4, v41);
      }
    }
  }
  return v11;
}

uint64_t fe_nnws_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62346, 208);
  if ((int)result >= 0)
    return result;
  else
    return 2588942344;
}

uint64_t fe_nnws_loadCfg(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v20;
  _BYTE __c[11];

  memset(__c, 0, sizeof(__c));
  *(_DWORD *)(a1 + 192) = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_use_static_feat", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
  {
    v2 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v2)
      *v2 = 0;
    if (!cstdlib_strcmp(**(const char ***)&__c[3], "yes"))
      *(_DWORD *)(a1 + 192) = 1;
  }
  v3 = 2588943364;
  *(_WORD *)&__c[1] = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_nn_null_fea", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
  {
    *(_QWORD *)(a1 + 112) = 0;
    v4 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v4)
      *v4 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v6 = cstdlib_strlen(**(const char ***)&__c[3]);
    v7 = heap_Alloc(v5, v6 + 1);
    *(_QWORD *)(a1 + 112) = v7;
    if (v7)
    {
      v12 = (char *)v7;
      v13 = **(const char ***)&__c[3];
      v14 = cstdlib_strlen(**(const char ***)&__c[3]);
      cstdlib_strncpy(v12, v13, v14);
      v15 = *(_QWORD *)(a1 + 112);
      *(_BYTE *)(v15 + cstdlib_strlen(**(const char ***)&__c[3])) = 0;
      *(_WORD *)&__c[1] = 0;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_nn_indim", &__c[3], &__c[1], __c) & 0x80000000) == 0)
      {
        if (*(_WORD *)&__c[1])
        {
          *(_DWORD *)(a1 + 96) = 0;
          *(_DWORD *)(a1 + 96) = (unsigned __int16)LH_atou(**(const char ***)&__c[3]);
          *(_WORD *)&__c[1] = 0;
          if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_nn_ddim", &__c[3], &__c[1], __c) & 0x80000000) == 0)
          {
            if (*(_WORD *)&__c[1])
            {
              *(_DWORD *)(a1 + 100) = 0;
              *(_DWORD *)(a1 + 100) = (unsigned __int16)LH_atou(**(const char ***)&__c[3]);
              *(_WORD *)&__c[1] = 0;
              *(_DWORD *)(a1 + 196) = 0;
              if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_use_force_ws", &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(_WORD *)&__c[1])
              {
                *(_DWORD *)(a1 + 196) = LH_atou(**(const char ***)&__c[3]);
              }
              *(_WORD *)&__c[1] = 0;
              *(_DWORD *)(a1 + 200) = 0;
              v16 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nnws_use_albert", &__c[3], &__c[1], __c);
              v3 = 0;
              if ((v16 & 0x80000000) == 0 && *(_WORD *)&__c[1])
              {
                v17 = v16;
                v18 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
                if (v18)
                  *v18 = 0;
                if (!cstdlib_strcmp(**(const char ***)&__c[3], "yes"))
                  *(_DWORD *)(a1 + 200) = 1;
                return v17;
              }
            }
          }
        }
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v8, v9, v10, v11, v20);
      return 2588942346;
    }
  }
  return v3;
}

uint64_t fe_nnws_CreateBrokerString(uint64_t a1, char *a2, const char *a3)
{
  uint64_t result;
  char *v7;
  char *__s2;
  char __s1[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  __s2 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)__s1 = 0u;
  v10 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v7);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, a3);
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v7);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t fe_nnws_tagInit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unsigned int v19;
  char v20[8];

  strcpy(v20, "SBME");
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 4, 8);
  if (v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 2, 1);
      *(_QWORD *)(v8 + 8 * v9) = v10;
      if (!v10)
        break;
      cstdlib_strncpy(v10, &v20[v9++], 1uLL);
      if (v9 == 4)
      {
        v15 = 0;
        goto LABEL_12;
      }
    }
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v11, v12, v13, v14, v19);
    for (i = 0; i != 32; i += 8)
    {
      v17 = *(_QWORD *)(v8 + i);
      if (v17)
        heap_Free(*(_QWORD **)(a1 + 8), v17);
    }
    v15 = 2588942346;
    heap_Free(*(_QWORD **)(a1 + 8), v8);
    v8 = 0;
  }
  else
  {
    v15 = 2588942346;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v4, v5, v6, v7, v19);
  }
LABEL_12:
  *a2 = v8;
  return v15;
}

uint64_t fe_nnws_tryLoadingIGTree(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t BrokerString;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v25;
  int v26[2];
  _OWORD v27[16];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  *(_QWORD *)v26 = 0;
  *a4 = 0;
  BrokerString = fe_nnws_CreateBrokerString(a3, (char *)v27, "nnwsigrules_");
  if ((BrokerString & 0x80000000) != 0
    || (BrokerString = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v27, "IGTR", 1031, (uint64_t *)v26),
        (BrokerString & 0x80000000) != 0))
  {
    v21 = BrokerString;
  }
  else
  {
    v16 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_NNWS", 37000, 0, v17, v18, v19, v20, v25);
      v21 = 2588942346;
    }
  }
  if (*(_QWORD *)v26)
  {
    v22 = ssftriff_reader_ObjClose(*(_QWORD **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1)
      return v21;
    else
      return v22;
  }
  return v21;
}

void *fe_nnws_dynamic_feat(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unsigned int v6;
  const char **v10;
  void *result;
  const char **v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char **v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  float v22;
  int v23;
  unsigned int v24;
  int v25;
  float v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  int v30;
  float v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  int v35;
  float v36;
  int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  int v41;
  float v42;
  char v43;
  unsigned int v44;
  int v45;
  float v46;
  char v47;
  unsigned int v48;
  int v49;
  float v50;
  char v51;
  unsigned int v52;
  _QWORD *v53;
  int v54;
  float v55;
  char v56;
  unsigned int v57;
  int v58;
  float v59;
  _QWORD *v60;
  _BYTE v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char __s1[16];
  __int128 v67;
  char v68;
  uint64_t v69;

  v6 = a4;
  v69 = *MEMORY[0x24BDAC8D0];
  v68 = 0;
  *(_OWORD *)__s1 = 0u;
  v67 = 0u;
  v62 = 0;
  v63 = 0;
  v65 = 0;
  v64 = 0;
  v10 = (const char **)(a2 + 56 * a4);
  result = (void *)cstdlib_strcmp(*v10, "NUM");
  if ((_DWORD)result && (result = (void *)cstdlib_strcmp(*v10, "ENG"), (_DWORD)result))
  {
    v60 = a1;
    v12 = (const char **)(a2 + 56 * v6 - 56);
    v13 = 8;
    v14 = 1;
    do
    {
      if (v14 < v6)
      {
        result = (void *)cstdlib_strcmp(*v12, "NUM");
        if ((_DWORD)result)
        {
          result = (void *)cstdlib_strcmp(*v12, "ENG");
          if ((_DWORD)result)
            *(_DWORD *)((char *)&v62 + v13) = 1;
        }
      }
      ++v14;
      v13 -= 4;
      v12 -= 7;
    }
    while (v13 != -4);
    v15 = 0;
    v16 = (const char **)(a2 + 56 * v6 + 56);
    do
    {
      if ((unint64_t)v6 + 1 + v15 < a3)
      {
        result = (void *)cstdlib_strcmp(*v16, "NUM");
        if ((_DWORD)result)
        {
          result = (void *)cstdlib_strcmp(*v16, "ENG");
          if ((_DWORD)result)
            *((_DWORD *)&v64 + v15) = 1;
        }
      }
      ++v15;
      v16 += 7;
    }
    while (v15 != 3);
    v17 = v63;
    if ((_DWORD)v63 == 1)
    {
      v19 = a5;
      v18 = v60;
      if (v6)
      {
        v20 = v6 - 1;
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v20++));
        while (v6 >= (unsigned __int16)v20);
      }
      v21 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v60[16] + 56))(v60[21], v60[22], __s1, v61);
      v22 = 0.0;
      if (v21 >= 0)
        v22 = 1.0;
      *(float *)a5 = v22;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      v19 = a5;
      v18 = v60;
      *(_DWORD *)a5 = 0;
    }
    v23 = v64;
    if ((_DWORD)v64 == 1)
    {
      v24 = v6;
      do
        cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v24++));
      while (v6 + 2 > (unsigned __int16)v24);
      v25 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v18[16] + 56))(v18[21], v18[22], __s1, v61);
      v26 = 0.0;
      if (v25 >= 0)
        v26 = 1.0;
      *(float *)(v19 + 4) = v26;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 4) = 0;
    }
    v27 = v17 == 1 && HIDWORD(v62) == 1;
    v28 = v27;
    if (v27)
    {
      v29 = v6 - 2;
      if (v6 >= 2)
      {
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v29++));
        while (v6 >= (unsigned __int16)v29);
      }
      v30 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v18[16] + 56))(v18[21], v18[22], __s1, v61);
      v31 = 0.0;
      if (v30 >= 0)
        v31 = 1.0;
      *(float *)(v19 + 8) = v31;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 8) = 0;
    }
    v32 = v17 == 1 && v23 == 1;
    v33 = v32;
    if (v32)
    {
      v34 = v6 - 1;
      if (v6 + 2 > (unsigned __int16)(v6 - 1))
      {
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v34++));
        while (v6 + 2 > (unsigned __int16)v34);
      }
      v35 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v18[16] + 56))(v18[21], v18[22], __s1, v61);
      v36 = 0.0;
      if (v35 >= 0)
        v36 = 1.0;
      *(float *)(v19 + 12) = v36;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 12) = 0;
    }
    v37 = HIDWORD(v64);
    v38 = v23 == 1 && HIDWORD(v64) == 1;
    v39 = v38;
    if (v38)
    {
      v40 = v6;
      do
        cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v40++));
      while (v6 + 3 > (unsigned __int16)v40);
      v41 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v60[16] + 56))(v60[21], v60[22], __s1, v61);
      v42 = 0.0;
      if (v41 >= 0)
        v42 = 1.0;
      v19 = a5;
      *(float *)(a5 + 16) = v42;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 16) = 0;
    }
    if ((_DWORD)v62 == 1)
      v43 = v28;
    else
      v43 = 0;
    if ((v43 & 1) != 0)
    {
      v44 = v6 - 3;
      if (v6 >= 3)
      {
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v44++));
        while (v6 >= (unsigned __int16)v44);
      }
      v45 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v60[16] + 56))(v60[21], v60[22], __s1, v61);
      v46 = 0.0;
      if (v45 >= 0)
        v46 = 1.0;
      *(float *)(v19 + 20) = v46;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 20) = 0;
    }
    if (v23 == 1)
      v47 = v28;
    else
      v47 = 0;
    if ((v47 & 1) != 0)
    {
      v48 = v6 - 2;
      if (v6 + 2 > (unsigned __int16)(v6 - 2))
      {
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v48++));
        while (v6 + 2 > (unsigned __int16)v48);
      }
      v49 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v60[16] + 56))(v60[21], v60[22], __s1, v61);
      v50 = 0.0;
      if (v49 >= 0)
        v50 = 1.0;
      *(float *)(v19 + 24) = v50;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 24) = 0;
    }
    if (v37 == 1)
      v51 = v33;
    else
      v51 = 0;
    if ((v51 & 1) != 0)
    {
      v52 = v6 - 1;
      v53 = v60;
      if (v6 + 3 > (unsigned __int16)(v6 - 1))
      {
        do
          cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v52++));
        while (v6 + 3 > (unsigned __int16)v52);
      }
      v54 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v60[16] + 56))(v60[21], v60[22], __s1, v61);
      v55 = 0.0;
      if (v54 >= 0)
        v55 = 1.0;
      *(float *)(v19 + 28) = v55;
      result = cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 28) = 0;
      v53 = v60;
    }
    if (v65 == 1)
      v56 = v39;
    else
      v56 = 0;
    if ((v56 & 1) != 0)
    {
      v57 = v6 + 4;
      do
        cstdlib_strcat(__s1, *(const char **)(a2 + 56 * (unsigned __int16)v6++));
      while (v57 > (unsigned __int16)v6);
      v58 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *))(v53[16] + 56))(v53[21], v53[22], __s1, v61);
      v59 = 0.0;
      if (v58 >= 0)
        v59 = 1.0;
      *(float *)(v19 + 32) = v59;
      return cstdlib_memset(__s1, 0, 0x21uLL);
    }
    else
    {
      *(_DWORD *)(v19 + 32) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t fe_nnws_addon_lookup(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, _QWORD *a6, unsigned __int16 a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  __int16 v61;

  v11 = *a5;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v58 = a7;
  v55 = a7 + 1;
  v12 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v55);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v13, v14, v15, v16, v46);
    return 2588942346;
  }
  v17 = (_BYTE *)v12;
  if (!a3)
  {
    v19 = 1;
    goto LABEL_44;
  }
  v47 = v11;
  v48 = a6;
  v18 = 0;
  v49 = a6 + 1;
  v50 = a6 + 3;
  v57 = a3;
  v19 = 1;
  v51 = a4;
  v52 = a3;
  while (1)
  {
    v20 = 0;
    v21 = v18;
    v22 = a2 + 56 * v18;
    v23 = *(unsigned int *)(v22 + 12);
    v53 = v18 + 1;
    if (a3 <= v18 + 1)
      v24 = v18 + 1;
    else
      v24 = a3;
    v56 = v18;
    while (cstdlib_strcmp(*(const char **)v22, "NUM"))
    {
      if (!cstdlib_strcmp(*(const char **)v22, "ENG"))
        break;
      v25 = *(_DWORD *)(v22 + 16) + v20;
      if (v25 > v58)
        break;
      ++v21;
      v22 += 56;
      v20 = v25;
      if (v21 >= v57)
      {
        v20 = v25;
        goto LABEL_14;
      }
    }
    v24 = v21;
LABEL_14:
    v26 = v56;
    if (v56 >= v24)
    {
      v17[v20] = 0;
      goto LABEL_24;
    }
    cstdlib_memcpy(v17, (const void *)(a4 + v23), v20 + 1);
    v17[v20] = 0;
    if (v20)
      break;
LABEL_24:
    if (v26 == v24)
      v18 = v24 + 1;
    else
      v18 = v24;
    if (v18 >= a3)
      goto LABEL_44;
  }
  v27 = 0;
  v28 = v24;
  v29 = (int *)(a2 - 40 + 56 * v24);
  v30 = v24 - v56 - 2;
  v31 = -1;
  v32 = 1;
  while (1)
  {
    cstdlib_memset(&v17[v20], 0, v55 - v20);
    v17[v20] = 0;
    v61 = 0;
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _BYTE *, uint64_t *, __int16 *, char *, _QWORD))(a1[7] + 232))(a1[8], a1[9], "force_ws", v17, &v60, &v61, &v59, 0);
    if ((v19 & 0x80000000) != 0)
      break;
    if (v61)
    {
      v34 = *v49;
      if ((_DWORD)v56)
      {
        v35 = (v56 - 1);
        v37 = v47;
        v36 = v48;
        v38 = *(_QWORD *)(v47 + 8 * v35);
        v39 = v48;
        v40 = v53;
        if (v38 == v34 || (v39 = v50, v38 == v48[2]))
        {
          *(_QWORD *)(v47 + 8 * v35) = *v39;
          v34 = v48[1];
        }
      }
      else
      {
        v37 = v47;
        v36 = v48;
        v40 = v53;
      }
      v24 = v28 - v27;
      v41 = v28 - v32;
      v26 = v56;
      *(_QWORD *)(v37 + 8 * v56) = v34;
      if ((int)v28 - v27 < v52)
      {
        v42 = *(_QWORD *)(v37 + 8 * v24);
        v43 = v49;
        if (v42 == v36[2] || (v43 = v36, v42 == *v50))
          *(_QWORD *)(v37 + 8 * v41) = *v43;
      }
      a4 = v51;
      *(_QWORD *)(v37 + 8 * v41) = *v50;
      if (v40 < v41)
      {
        v44 = (_QWORD *)(v37 + 8 * v40);
        do
        {
          *v44++ = v36[2];
          --v30;
        }
        while (v30);
      }
      v19 = 1;
      a3 = v52;
      goto LABEL_24;
    }
    ++v27;
    if (v28 != v32 && v28 + v31 > v56)
    {
      v33 = *v29;
      v29 -= 14;
      ++v32;
      --v31;
      --v30;
      v20 -= v33;
      if (v20)
        continue;
    }
    v24 = v28 - v27;
    a4 = v51;
    a3 = v52;
    v26 = v56;
    goto LABEL_24;
  }
LABEL_44:
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v17);
  return v19;
}

uint64_t fe_nnws_adjustBMES_Edge(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t **a6)
{
  unsigned int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *i;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v7 = a2;
  v9 = *a6;
  v24 = *a6;
  if (a2 < 2)
    goto LABEL_26;
  v10 = a2 - 2;
  for (i = v9; ; ++i)
  {
    v12 = *(unsigned __int8 *)i[1];
    if (v12 <= 0x4C)
    {
      if (v12 != 66)
      {
        if (v12 == 69)
        {
          v13 = *(unsigned __int8 *)*i;
          v14 = a5;
          if (v13 == 83)
            goto LABEL_19;
          v14 = a5;
          if (v13 == 69)
            goto LABEL_19;
        }
        goto LABEL_20;
      }
      v15 = *(unsigned __int8 *)*i;
      v14 = a5 + 2;
      if (v15 == 66)
        goto LABEL_19;
      v14 = a5 + 2;
LABEL_15:
      if (v15 == 77)
        goto LABEL_19;
      goto LABEL_20;
    }
    if (v12 != 77)
    {
      if (v12 != 83)
        goto LABEL_20;
      v15 = *(unsigned __int8 *)*i;
      v14 = a5 + 3;
      if (v15 == 66)
      {
LABEL_19:
        i[1] = *v14;
        goto LABEL_20;
      }
      v14 = a5 + 3;
      goto LABEL_15;
    }
    v16 = *(unsigned __int8 *)*i;
    v14 = a5 + 1;
    if (v16 == 69)
      goto LABEL_19;
    v14 = a5 + 1;
    if (v16 == 83)
      goto LABEL_19;
LABEL_20:
    if (!v10)
      break;
    --v10;
  }
  v17 = a5 + 3;
  if (*(_BYTE *)*i == 77 || (v17 = a5, *(_BYTE *)i[1] == 66))
    i[1] = *v17;
LABEL_26:
  result = fe_nnws_adjust_ENP_labels(a2, a3, a5, (uint64_t *)&v24);
  if (a4 == 1 && v7)
  {
    v22 = v7;
    do
    {
      v23 = *v9++;
      result = log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"[NNWS][adjustBMES_Edge] Predicted Tag: %s", v19, v20, v21, v23);
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t fe_nnws_adjustBMES(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t **a6)
{
  unsigned int v7;
  uint64_t *v9;
  unsigned __int8 **v10;
  uint64_t i;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v7 = a2;
  v9 = *a6;
  v22 = *a6;
  if ((_DWORD)a2)
  {
    v10 = (unsigned __int8 **)(v9 + 1);
    for (i = a2; i; --i)
    {
      v12 = **(v10 - 1);
      if (i == 1)
      {
        v13 = a5 + 3;
        if (v12 != 77)
        {
          v13 = a5;
          if (v12 != 66)
            goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (**(v10 - 1) > 0x4Cu)
      {
        if (v12 == 77)
        {
          v15 = **v10;
          v13 = a5 + 3;
          if (v15 == 66)
            goto LABEL_21;
          v13 = a5 + 3;
LABEL_20:
          if (v15 == 83)
            goto LABEL_21;
          goto LABEL_22;
        }
        if (v12 == 83)
        {
          v14 = **v10 | 8;
          v13 = a5 + 1;
          goto LABEL_14;
        }
      }
      else
      {
        if (v12 == 66)
        {
          v15 = **v10;
          v13 = a5;
          if (v15 == 66)
            goto LABEL_21;
          v13 = a5;
          goto LABEL_20;
        }
        if (v12 == 69)
        {
          v14 = **v10 | 8;
          v13 = a5 + 2;
LABEL_14:
          if (v14 != 77)
            goto LABEL_22;
LABEL_21:
          *(v10 - 1) = (unsigned __int8 *)*v13;
        }
      }
LABEL_22:
      ++v10;
    }
  }
  result = fe_nnws_adjust_ENP_labels(a2, a3, a5, (uint64_t *)&v22);
  if (a4 == 1 && v7)
  {
    v20 = v7;
    do
    {
      v21 = *v9++;
      result = log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"[NNWS] Predicted Tag: %s", v17, v18, v19, v21);
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t fe_nnws_IGTreeProcess(uint64_t *a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char **v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  char *__s1;
  char v55[4];

  __s1 = 0;
  v8 = *a1;
  v9 = a1[23];
  if (!a2 || !v9)
  {
    log_OutText(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNWS", 5, 0, (uint64_t)"IGTree model for NNWS does not exist", a6, a7, a8, v47);
    return 0;
  }
  v13 = heap_Alloc(*(_QWORD *)(v8 + 8), 8 * *(unsigned __int8 *)(v9 + 1296) - 8);
  if (!v13)
  {
    v40 = 2588942346;
    log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNWS", 750000, 0, v14, v15, v16, v17, v47);
    return v40;
  }
  v18 = (uint64_t *)v13;
  v52 = a5;
  if (*(_BYTE *)(v9 + 1296) != 1)
  {
    v19 = (unsigned __int16)(*(unsigned __int8 *)(v9 + 1296) - 1);
    v20 = (_QWORD *)v13;
    do
    {
      v21 = (char *)heap_Calloc(*(_QWORD **)(v8 + 8), 1, 65);
      *v20 = v21;
      if (!v21)
      {
        v40 = 2588942346;
        log_OutPublic(*(_QWORD *)(v8 + 32), (uint64_t)"FE_NNWS", 750000, 0, v22, v23, v24, v25, v47);
        goto LABEL_57;
      }
      cstdlib_strcpy(v21, "=");
      ++v20;
      --v19;
    }
    while (v19);
  }
  v26 = 0;
  v50 = a3 + 2;
  v51 = a3;
  v48 = a3 + 3;
  v49 = a3 + 1;
  do
  {
    v27 = *(const char ***)(v9 + 1312);
    v28 = *(unsigned __int8 *)(v9 + 1296);
    v29 = fe_nnws_setFeature(v8, v27, v28, 0, v18, *(const char **)(*a5 + 8 * (unsigned __int16)v26));
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v30 = "=";
    if ((unsigned __int16)a2 > (unsigned __int16)v26)
      v30 = *(const char **)(a4 + 56 * (unsigned __int16)v26);
    v29 = fe_nnws_setFeature(v8, v27, v28, 1, v18, v30);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v31 = "=";
    if ((unsigned __int16)v26 - 1 < (unsigned __int16)a2)
      v31 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 - 1));
    v29 = fe_nnws_setFeature(v8, v27, v28, 2, v18, v31);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v32 = "=";
    if ((unsigned __int16)v26 - 2 < (unsigned __int16)a2)
      v32 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 - 2));
    v29 = fe_nnws_setFeature(v8, v27, v28, 3, v18, v32);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v33 = "=";
    if ((unsigned __int16)v26 - 3 < (unsigned __int16)a2)
      v33 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 - 3));
    v29 = fe_nnws_setFeature(v8, v27, v28, 4, v18, v33);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v34 = "=";
    if ((unsigned __int16)v26 - 4 < (unsigned __int16)a2)
      v34 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 - 4));
    v29 = fe_nnws_setFeature(v8, v27, v28, 5, v18, v34);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v35 = "=";
    if ((unsigned __int16)v26 + 1 < (unsigned __int16)a2)
      v35 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 + 1));
    v29 = fe_nnws_setFeature(v8, v27, v28, 6, v18, v35);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v36 = "=";
    if ((unsigned __int16)v26 + 2 < (unsigned __int16)a2)
      v36 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 + 2));
    v29 = fe_nnws_setFeature(v8, v27, v28, 7, v18, v36);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v37 = "=";
    if ((unsigned __int16)v26 + 3 < (unsigned __int16)a2)
      v37 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 + 3));
    v29 = fe_nnws_setFeature(v8, v27, v28, 8, v18, v37);
    if ((v29 & 0x80000000) != 0)
      goto LABEL_55;
    v38 = "=";
    if ((unsigned __int16)v26 + 4 < (unsigned __int16)a2)
      v38 = *(const char **)(a4 + 56 * ((unsigned __int16)v26 + 4));
    v29 = fe_nnws_setFeature(v8, v27, v28, 9, v18, v38);
    if ((v29 & 0x80000000) != 0)
    {
LABEL_55:
      v40 = v29;
      goto LABEL_57;
    }
    v39 = "=";
    if ((unsigned __int16)v26 < a2)
    {
      v39 = v55;
      LH_itoa((unsigned __int16)v26 + 1, v55, 0xAu);
    }
    v40 = fe_nnws_setFeature(v8, v27, v28, 10, v18, v39);
    a5 = v52;
    if ((v40 & 0x80000000) != 0)
      goto LABEL_57;
    igtree_Process(v9, (uint64_t)v18, &__s1);
    if (cstdlib_strcmp(__s1, "NOMATCH"))
    {
      v40 = 0;
      v41 = *__s1;
      if (v41 <= 0x4C)
      {
        v42 = v49;
        if (v41 != 66)
        {
          if (v41 != 69)
            goto LABEL_48;
          v42 = v48;
        }
LABEL_47:
        *(_QWORD *)(*v52 + 8 * v26) = *v42;
        fe_hlp_adjustBMES_basedSingleLabel(a2, v26, v51, v52);
        v40 = 0;
        goto LABEL_48;
      }
      v42 = v50;
      if (v41 == 77)
        goto LABEL_47;
      v42 = v51;
      if (v41 == 83)
        goto LABEL_47;
    }
LABEL_48:
    ++v26;
  }
  while (a2 != v26);
  if (*(_BYTE *)(v9 + 1296) != 1)
  {
    v43 = (unsigned __int16)(*(unsigned __int8 *)(v9 + 1296) - 1);
    v44 = v18;
    do
    {
      v45 = *v44++;
      heap_Free(*(_QWORD **)(v8 + 8), v45);
      --v43;
    }
    while (v43);
  }
LABEL_57:
  heap_Free(*(_QWORD **)(v8 + 8), (uint64_t)v18);
  return v40;
}

_QWORD **fe_nnws_retag_word_under_phon(_QWORD **result, uint64_t *a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *a2;
  v5 = *a3;
  v6 = *result;
  if (v5 >= 2)
  {
    v7 = (_DWORD *)(v4 + 96);
    v8 = 8 * v5;
    v9 = 8;
    while (1)
    {
      if (*(v7 - 13) != 1 || v7[1] != 1)
        goto LABEL_19;
      v10 = *(v7 - 14);
      if (v10 == 1)
      {
        if (!*v7)
        {
          v12 = a4[1];
LABEL_16:
          v6[(unint64_t)v9 / 8] = v12;
          v13 = a4;
LABEL_17:
          if (v9 == 8)
            *v6 = *v13;
          goto LABEL_19;
        }
        if (*v7 == 1)
        {
          v12 = *a4;
          goto LABEL_16;
        }
      }
      else if (!v10)
      {
        if (!*v7)
        {
          v11 = a4[2];
          goto LABEL_14;
        }
        if (*v7 == 1)
        {
          v11 = a4[3];
LABEL_14:
          v6[(unint64_t)v9 / 8] = v11;
          v13 = a4 + 1;
          goto LABEL_17;
        }
      }
LABEL_19:
      v9 += 8;
      v7 += 14;
      if (v8 == v9)
        return result;
    }
  }
  if (*(_DWORD *)(v4 + 44) == 1)
    *v6 = *a4;
  return result;
}

uint64_t fe_nnws_group(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, const char **a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  int v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  const char **v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  const void **v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  uint64_t v63;
  uint64_t v64;
  unsigned int v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;

  v6 = *a3;
  v7 = *a5;
  v8 = *a4;
  v67 = cstdlib_strlen(*a5);
  v72 = (uint64_t)v7;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v6 + 32;
    v69 = a2;
    v70 = v8;
    while (1)
    {
      v18 = **(unsigned __int8 **)(a2 + 8 * v13);
      switch(v18)
      {
        case 'B':
          v36 = v6 + 56 * v16;
          *(_QWORD *)(v36 + 8) = *(_QWORD *)(v17 - 24);
          *(_DWORD *)(v36 + 32) = *(_DWORD *)v17;
          v15 = v13;
          break;
        case 'S':
          v37 = *(_DWORD *)(v17 - 16);
          v38 = (const char **)(v6 + 56 * v16);
          if (cstdlib_strcmp(*v38, "NUM") && cstdlib_strcmp(*v38, "ENG"))
          {
            v39 = *(_DWORD *)(v17 - 16);
            goto LABEL_17;
          }
          v39 = *(_DWORD *)(v17 - 16);
          if (v39 - 4 <= 0xFFFFFFFA)
          {
            v40 = v39 + 1;
            goto LABEL_18;
          }
LABEL_17:
          v40 = v39 + 1;
          if (*(_DWORD *)(v6 + 56 * v16 + 16) >= v39 + 1)
          {
            v41 = (char *)*v38;
          }
          else
          {
LABEL_18:
            v41 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*v38, v40);
            *v38 = v41;
            if (!v41)
            {
LABEL_57:
              v63 = 2588942346;
              v64 = *(_QWORD *)(a1 + 32);
              goto LABEL_59;
            }
            v39 = *(_DWORD *)(v17 - 16);
          }
          cstdlib_strncpy(v41, &v7[*(unsigned int *)(v17 - 20)], v39);
          (*v38)[*(unsigned int *)(v17 - 16)] = 0;
          v42 = v6 + 56 * v16;
          v43 = *(_DWORD *)(v17 - 12);
          *(_DWORD *)(v42 + 16) = v37;
          *(_DWORD *)(v42 + 20) = v43;
          *(_QWORD *)(v42 + 8) = *(_QWORD *)(v17 - 24);
          *(_DWORD *)(v42 + 40) = *(_DWORD *)(v17 + 8);
          *(_QWORD *)(v42 + 32) = *(_QWORD *)v17;
          *(_DWORD *)(v42 + 48) = *(_DWORD *)(v17 + 16);
          v14 += v37;
          ++v16;
          a2 = v69;
          v8 = v70;
          break;
        case 'E':
          v19 = v6 + 56 * v15;
          v21 = *(_DWORD *)(v19 + 12);
          v20 = (unsigned int *)(v19 + 12);
          v22 = *(_DWORD *)(v17 - 16) + *(_DWORD *)(v17 - 20);
          v23 = v22 - v21;
          if (v22 < v21)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v9, v10, v11, v12, a5);
            return 2588942343;
          }
          v24 = v14;
          v25 = (uint64_t *)(v6 + 56 * v16);
          v26 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *v25, (v23 + 1));
          *v25 = (uint64_t)v26;
          if (!v26)
            goto LABEL_57;
          cstdlib_strncpy(v26, (const char *)(v72 + *v20), v23);
          *(_BYTE *)(*v25 + v23) = 0;
          v31 = v6 + 56 * v16;
          v33 = *(_DWORD *)(v31 + 32);
          v32 = v31 + 32;
          *(_DWORD *)(v32 - 16) = v23;
          *(_QWORD *)(v32 + 4) = *(_QWORD *)(v17 + 4);
          v34 = *(_DWORD *)v17;
          if (v33 == 1 && v34 == 2)
          {
            v34 = 3;
            v35 = v24;
            v7 = (const char *)v72;
            v8 = v70;
            goto LABEL_26;
          }
          v35 = v24;
          v8 = v70;
          if (v34 == 3)
          {
            v7 = (const char *)v72;
          }
          else
          {
            v7 = (const char *)v72;
            if (v34 != 2)
              goto LABEL_27;
          }
LABEL_26:
          *(_DWORD *)v32 = v34;
          *(_DWORD *)(v6 + 56 * v16 + 20) = *(_DWORD *)(v17 - 12);
LABEL_27:
          v14 = v23 + v35;
          ++v16;
          v15 = v13 + 1;
          a2 = v69;
          break;
      }
      ++v13;
      v17 += 56;
      if (v8 == v13)
        goto LABEL_31;
    }
  }
  v16 = 0;
  v14 = 0;
LABEL_31:
  v44 = v14;
  if (v16 < v8)
  {
    v45 = (uint64_t *)(v6 + 56 * v16);
    v46 = v8 - v16;
    do
    {
      v47 = *v45;
      v45 += 7;
      heap_Free(*(_QWORD **)(a1 + 8), v47);
      --v46;
    }
    while (v46);
  }
  *a4 = v16;
  v48 = v44 + v16;
  if ((int)v48 + 1 <= v67)
  {
    v49 = v72;
    if (v16)
    {
LABEL_37:
      v50 = 0;
      v51 = (const void **)(v6 + 16);
      v52 = v16;
      do
      {
        v53 = v50;
        cstdlib_memcpy((void *)(v49 + v50), *(v51 - 2), *(unsigned int *)v51);
        *(_BYTE *)(v49 + *(_DWORD *)v51 + v53) = 32;
        v55 = *(_DWORD *)v51;
        v51 += 7;
        v54 = v55;
        v50 = v53 + v55 + 1;
        --v52;
      }
      while (v52);
      if (v50)
        *(_BYTE *)(v49 + v53 + v54) = 0;
      LODWORD(v56) = 0;
      *a5 = (const char *)v49;
      do
      {
        if (*(_DWORD *)(v6 + 56 * v56 + 32) == 1)
        {
          v57 = v56;
          v58 = v56;
          if (v56 < v16)
          {
            v59 = 0;
            v60 = (int *)(v6 + 88 + 56 * v57);
            do
            {
              *(v60 - 14) = 4;
              ++v59;
              v61 = *v60;
              v60 += 14;
            }
            while (v61 != 2 && v59 + v57 < (unint64_t)v16);
            v56 = v57 + v59;
            v58 = v56;
          }
          *(_QWORD *)(v6 + 56 * v58 + 8) = *(_QWORD *)(v6 + 56 * v57 + 8);
        }
        else
        {
          LODWORD(v56) = v56 + 1;
        }
      }
      while (v56 < v16);
      return 0;
    }
LABEL_56:
    v63 = 0;
    *a5 = (const char *)v49;
    return v63;
  }
  v49 = heap_Realloc(*(uint64_t **)(a1 + 8), v72, v48);
  if (v49)
  {
    if (v16)
      goto LABEL_37;
    goto LABEL_56;
  }
  v63 = 2588942346;
  v64 = *(_QWORD *)(a1 + 32);
LABEL_59:
  log_OutPublic(v64, (uint64_t)"FE_NNWS", 75000, 0, v27, v28, v29, v30, a5);
  return v63;
}

uint64_t fe_nnws_writeLDB_v2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  int v32;
  int v33;
  uint64_t v35;
  unsigned int v36;
  __int128 *v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned __int16 v41;
  unint64_t v42;
  __int128 *v43;
  unint64_t v44;
  __int128 *v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;
  __int128 *v50;
  int v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  int *v72;
  _DWORD *v73;
  __int128 *v75;
  __int128 v76;
  int v77;
  int v78;
  __int128 *v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  __int128 *v98;
  int v99;
  int v100;
  __int128 *v101;
  _DWORD *v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  _DWORD *v106;
  __int128 *v107;
  _DWORD *v108;
  int v109;
  _DWORD *v110;
  __int128 v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  _DWORD *v115;
  __int128 v116;
  _DWORD *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  _DWORD *v122;
  _DWORD *v123;
  int v124;
  _DWORD *v125;
  _DWORD *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  __int128 v134;
  unsigned int v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  unsigned int v139;
  unsigned int v140;
  _DWORD *v141;
  uint64_t v142;
  unint64_t v143;
  const char **v144;
  int v145;
  int v146;
  int v147;
  unsigned int v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  int v163;
  __int128 *v164;
  __int128 v165;
  __int128 v166;

  v10 = a4;
  v164 = 0;
  v163 = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 **, int *))(a1[6] + 176))(a2, a3, a4, 1, &v164, &v163);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v160 = a3;
  v161 = v10;
  reorder_pMrk(&v164, (unsigned __int16)v163, 40);
  reorder_pMrk(&v164, (unsigned __int16)v163, 1);
  if (a6)
  {
    v14 = heap_Calloc(*(_QWORD **)(*a1 + 8), a6, 32);
    v19 = *a1;
    if (!v14)
    {
      v26 = 2588942346;
      log_OutPublic(*(_QWORD *)(v19 + 32), (uint64_t)"FE_NNWS", 75000, 0, v15, v16, v17, v18, v159);
      return v26;
    }
    v20 = v14;
    v25 = heap_Calloc(*(_QWORD **)(v19 + 8), a6, 4);
    if (!v25)
    {
      v26 = 2588942346;
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v21, v22, v23, v24, v159);
      v27 = 0;
LABEL_182:
      heap_Free(*(_QWORD **)(*a1 + 8), v20);
      goto LABEL_183;
    }
  }
  else
  {
    v20 = 0;
    v25 = 0;
  }
  v28 = (unsigned __int16)v163;
  v29 = v164;
  if ((_WORD)v163)
  {
    v30 = 0;
    v31 = v164;
    while (1)
    {
      v33 = *(_DWORD *)v31;
      v31 += 2;
      v32 = v33;
      if (v33 == 41 || v32 == 1)
        break;
      if ((unsigned __int16)v163 == ++v30)
      {
        LODWORD(v30) = -1;
        break;
      }
    }
    v35 = 0;
    v36 = v30 & ~((int)v30 >> 31);
    v37 = v164;
    while (1)
    {
      v38 = *(_DWORD *)v37;
      v37 += 2;
      if (v38 == 40)
        break;
      if ((unsigned __int16)v163 == ++v35)
        goto LABEL_22;
    }
    v39 = v35;
    if (a6)
      goto LABEL_50;
LABEL_23:
    if (!(_WORD)v163)
      goto LABEL_81;
    goto LABEL_24;
  }
  v36 = 0;
LABEL_22:
  v39 = -1;
  if (!a6)
    goto LABEL_23;
LABEL_50:
  v58 = 0;
  v59 = 0;
  v60 = *((_DWORD *)v164 + 3);
  v61 = (_DWORD *)&v164[2 * v36] + 1;
  do
  {
    v62 = a5 + 56 * v58;
    v65 = *(_DWORD *)(v62 + 32);
    v64 = (_DWORD *)(v62 + 32);
    v63 = v65;
    v66 = v20 + 32 * v58;
    if (v65 == 4)
    {
      v59 += *(_DWORD *)(a5 + 56 * v58 + 16) + 1;
      *(_DWORD *)v66 = 0;
      goto LABEL_79;
    }
    *(_DWORD *)(v66 + 4) = *v61 + *(_DWORD *)(a5 + 56 * v58 + 8);
    if ((v63 & 0xFFFFFFFE) == 2)
    {
      v67 = *(_DWORD *)(a5 + 56 * v58 + 20);
      v68 = *(_DWORD *)(a5 + 56 * v58 + 16) + v59;
    }
    else
    {
      v67 = *(_DWORD *)(a5 + 56 * v58 + 16);
      v68 = v67;
    }
    v69 = v20 + 32 * v58;
    *(_DWORD *)(v69 + 8) = v67;
    v70 = (_DWORD *)(v69 + 8);
    v71 = v60;
    if (v58)
      v71 = *(_DWORD *)(v69 - 20) + *(_DWORD *)(v69 - 16) + 1;
    *(_DWORD *)(v69 + 12) = v71;
    v72 = (int *)(v69 + 12);
    v72[1] = v68;
    v73 = v72 + 1;
    if (v63 != 5 || v39 == -1)
    {
      *(_DWORD *)v66 = 1;
      goto LABEL_73;
    }
    v75 = &v29[2 * v39];
    v76 = v75[1];
    *(_OWORD *)v66 = *v75;
    *(_OWORD *)(v66 + 16) = v76;
    v77 = *(_DWORD *)(a5 + 56 * v58 + 16);
    *v70 = v77;
    v78 = v60;
    if (v58)
      v78 = *(_DWORD *)(v20 + 32 * v58 - 20) + *(_DWORD *)(v20 + 32 * v58 - 16) + 1;
    *v72 = v78;
    *v73 = v77;
    if (v39 + 1 < v28)
    {
      v79 = &v29[2 * ++v39];
      while (1)
      {
        v80 = *(_DWORD *)v79;
        v79 += 2;
        if (v80 == 40)
          break;
        if (v28 == ++v39)
        {
          v39 = -1;
          break;
        }
      }
    }
    v81 = *(_DWORD *)v66;
    if (v81 != 40)
    {
      if (v81 != 1)
        goto LABEL_75;
LABEL_73:
      if (*(_DWORD *)(a5 + 56 * v58 + 36) != 1)
        goto LABEL_75;
    }
    *(_DWORD *)(v25 + 4 * v58) = 1;
LABEL_75:
    if ((*v64 & 0xFFFFFFFE) == 2 && !*(_DWORD *)(a5 + 56 * v58 + 40))
      *(_DWORD *)(v25 + 4 * v58) = 2;
    v59 = 0;
    v82 = *v72 - *((_DWORD *)v29 + 3);
    v83 = a5 + 56 * v58;
    *(_DWORD *)(v83 + 24) = v82;
    *(_DWORD *)(v83 + 28) = *v73 + v82;
LABEL_79:
    ++v58;
  }
  while (v58 != a6);
  v29 = v164;
  if (!v28)
  {
LABEL_81:
    LOWORD(v163) = 0;
    goto LABEL_83;
  }
LABEL_24:
  v40 = 0;
  v41 = v28;
  do
  {
    v42 = v41;
    v43 = &v29[2 * v40];
    if (*(_DWORD *)v43 == 40)
    {
      v44 = v40 + 1;
      if (v41 > v40 + 1)
      {
        v50 = &v29[2 * v44];
        if (*(_DWORD *)v50 == 1 && HIDWORD(v29[2 * v40]) == *((_DWORD *)v50 + 3))
        {
          cstdlib_memmove(v43, v50, 32 * (v41-- - v44));
          v42 = v41;
        }
      }
    }
    else if (*(_DWORD *)v43 == 99)
    {
      v44 = v40 + 1;
      if (v40 + 1 < v41)
      {
        v45 = &v29[2 * v40];
        v48 = *((_DWORD *)v45 + 3);
        v46 = (_DWORD *)v45 + 3;
        v47 = v48;
        v49 = HIDWORD(v29[2 * v44]);
        if (v48 == v49 - 1 && *(_BYTE *)(a7 + (v47 - *((_DWORD *)v29 + 3))) == 32)
        {
          *v46 = v49;
          DWORD1(v29[2 * v40]) = DWORD1(v29[2 * v44]);
        }
      }
    }
    else
    {
      v44 = v40 + 1;
    }
    v40 = v44;
  }
  while (v44 < v42);
  LOWORD(v163) = v41;
  if (v41)
  {
    v51 = 0;
    v28 = 0;
    v52 = v164;
    v53 = v41;
    do
    {
      v55 = *(_DWORD *)v52;
      v52 += 2;
      v54 = v55;
      if (v51)
        v56 = v28;
      else
        v56 = v28 + 1;
      if (v54 == 0x4000)
      {
        v57 = 1;
      }
      else
      {
        v56 = v28 + 1;
        v57 = v51;
      }
      if (v54 != 1)
      {
        v28 = v56;
        v51 = v57;
      }
      --v53;
    }
    while (v53);
  }
  else
  {
    v28 = 0;
  }
LABEL_83:
  v84 = v28 + a6;
  v27 = (_DWORD *)heap_Alloc(*(_QWORD *)(*a1 + 8), 32 * (v28 + a6));
  if (v27)
  {
    v89 = (unsigned __int16)v163;
    if ((_WORD)v163)
    {
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = v164;
      v99 = 1;
      v100 = 1;
      while (1)
      {
        v101 = &v98[2 * v97];
        if (*(_DWORD *)v101 == 0x4000)
        {
          if (!v91)
          {
            v102 = &v27[8 * v93];
            v103 = v101[1];
            *(_OWORD *)v102 = *v101;
            *((_OWORD *)v102 + 1) = v103;
            v104 = v102[1];
            if (v104)
              v104 = *((_DWORD *)a1 + 27);
            else
              a1[13] = 0;
            v27[8 * v93 + 3] = v104;
            v94 = v104 - HIDWORD(v98[2 * v97]);
            ++v93;
          }
          ++v97;
          v91 = 1;
          goto LABEL_141;
        }
        if (*(_DWORD *)v101 == 1)
        {
          if (v100 == 1)
            v90 = DWORD1(v98[2 * v97]);
          v100 = 0;
          goto LABEL_113;
        }
        if (v96 < a6)
        {
          v105 = v20 + 32 * v96;
          v106 = (_DWORD *)(v105 + 12);
          v107 = &v98[2 * v97];
          v109 = *((_DWORD *)v107 + 3);
          v108 = (_DWORD *)v107 + 3;
          if (*(_DWORD *)(v105 + 12) < (v109 + v95))
          {
            v110 = &v27[8 * v93];
            v111 = *(_OWORD *)(v105 + 16);
            *(_OWORD *)v110 = *(_OWORD *)v105;
            *((_OWORD *)v110 + 1) = v111;
            v112 = *v106 + v94;
            v110[3] = v112;
            if (v93)
            {
              v113 = v93 - 1;
              if (v93 == 1)
              {
                v114 = v27[1];
                goto LABEL_122;
              }
              v121 = v27[8 * v93 - 8];
              if (v121 <= 0x28 && ((1 << v121) & 0x10020000002) != 0)
              {
                v114 = v27[8 * v113 + 2] + v27[8 * v113 + 1];
LABEL_122:
                v122 = &v27[8 * v93];
                v122[1] = v114;
                v123 = v122 + 1;
                v124 = *(_DWORD *)(v25 + 4 * v96);
                if (v124 == 2)
                {
                  if (*v106 - v95 != *v108)
                    ++v95;
                  if (!v93)
                    goto LABEL_136;
LABEL_126:
                  if (v27[8 * v93 - 8] == 29)
                  {
                    v125 = &v27[8 * v93 - 8];
                    v128 = v125[3];
                    v126 = v125 + 3;
                    v127 = v128;
                    if (v112 > v128)
                      *v126 = v127 + 1;
                  }
                  if (v99 == 1)
                  {
                    *v123 = v90;
                    if (v93 == 2)
                    {
                      v123 = v27 + 9;
                      if (v27[8] == 36)
LABEL_137:
                        *v123 = v90;
                    }
                  }
                }
                else
                {
                  if (!v124)
                    ++v95;
                  if (v93)
                    goto LABEL_126;
LABEL_136:
                  if (v99 == 1)
                    goto LABEL_137;
                }
                v99 = 0;
                if (++v96 == a6)
                  v92 = v93;
                ++v93;
                goto LABEL_141;
              }
            }
            else
            {
              v113 = 0xFFFFFFFFLL;
            }
            v114 = v27[8 * v113 + 1];
            goto LABEL_122;
          }
        }
        v115 = &v27[8 * v93];
        v116 = v101[1];
        *(_OWORD *)v115 = *v101;
        *((_OWORD *)v115 + 1) = v116;
        v115[3] = v95 + v94 + HIDWORD(v98[2 * v97]);
        v117 = v115 + 3;
        if (v96 == a6 && v92)
          *v117 = v27[8 * v92 + 4] + v27[8 * v92 + 3];
        v118 = v93 - 1;
        if (v93 == 1)
          break;
        if (v96 != a6)
        {
          if (v93)
          {
            v120 = v27[8 * v93 - 8];
            if (v120 <= 0x28 && ((1 << v120) & 0x10020000002) != 0)
            {
              v119 = v27[8 * v118 + 2] + v27[8 * v118 + 1];
              goto LABEL_111;
            }
          }
        }
        if (v96 != a6)
        {
          v119 = v27[8 * v118 + 1];
          goto LABEL_111;
        }
LABEL_112:
        ++v93;
LABEL_113:
        ++v97;
LABEL_141:
        if (v97 >= v89)
          goto LABEL_145;
      }
      v119 = v27[1];
LABEL_111:
      v27[8 * v93 + 1] = v119;
      goto LABEL_112;
    }
    v96 = 0;
    v94 = 0;
    v93 = 0;
LABEL_145:
    if (v96 < a6)
    {
      v129 = v96;
      v130 = a6 - (unint64_t)v96;
      v131 = v20 + 32 * v129;
      while (1)
      {
        v132 = v93;
        v133 = &v27[8 * v93];
        v134 = *(_OWORD *)(v131 + 16);
        *(_OWORD *)v133 = *(_OWORD *)v131;
        *((_OWORD *)v133 + 1) = v134;
        v135 = *(_DWORD *)(v131 + 12) + v94;
        v133[3] = v135;
        if (v93 >= 3)
          break;
        if (v93)
        {
          v136 = v93 - 1;
          goto LABEL_151;
        }
LABEL_154:
        v131 += 32;
        v93 = v132 + 1;
        if (!--v130)
          goto LABEL_155;
      }
      v136 = v93 - 1;
      v133[1] = v27[8 * v136 + 2] + v27[8 * v136 + 1];
LABEL_151:
      if (v27[8 * v136] == 29)
      {
        v137 = &v27[8 * v136];
        v140 = v137[3];
        v138 = v137 + 3;
        v139 = v140;
        if (v135 > v140)
          *v138 = v139 + 1;
      }
      goto LABEL_154;
    }
LABEL_155:
    v141 = &v27[8 * v93 - 8];
    v27[4] = v141[4] + v141[3] - v27[3];
    v27[2] = v141[2] + v141[1] - v27[1];
    if (v84)
    {
      v142 = 0;
      v143 = 0xFFFFFFFFLL;
      while (1)
      {
        v144 = (const char **)&v27[8 * v142];
        v145 = *(_DWORD *)v144;
        if (*(_DWORD *)v144 != 51)
          goto LABEL_162;
        v146 = cstdlib_strcmp(v144[3], "R_CLASS");
        if (v84 - v142 < 2 || v146)
          break;
        v147 = v142 + 1;
LABEL_177:
        v143 = v142;
        v142 = (v147 + 1);
        if (v142 >= v84)
          goto LABEL_178;
      }
      v145 = *(_DWORD *)v144;
LABEL_162:
      if (v145 != 57 || (_DWORD)v143 == -1)
      {
        v147 = v142;
        v142 = v143;
      }
      else
      {
        v149 = v142 - 1;
        do
        {
          v150 = v149;
          if (!v149)
            break;
          v151 = v27[8 * v149--];
        }
        while (v151 != 1);
        if (v143 < v150)
        {
          v152 = v143;
          v143 = v143 + 1;
          if (v143 < v150)
          {
            LODWORD(v143) = v150;
            v153 = (uint64_t)&v27[8 * v152 + 8];
            v154 = ~v152 + v150;
            do
            {
              v156 = *(_OWORD *)(v153 - 16);
              v165 = *(_OWORD *)(v153 - 32);
              v155 = v165;
              v166 = v156;
              v157 = *(_OWORD *)(v153 + 16);
              *(_OWORD *)(v153 - 32) = *(_OWORD *)v153;
              *(_OWORD *)(v153 - 16) = v157;
              *(_OWORD *)v153 = v155;
              *(_OWORD *)(v153 + 16) = v156;
              *(_DWORD *)(v153 - 28) = *(_DWORD *)(v153 + 4);
              v153 += 32;
              --v154;
            }
            while (v154);
          }
        }
        if ((_DWORD)v143)
          v27[8 * (v143 - 1) + 3] = v27[8 * v143 + 3];
        v147 = v142;
        v142 = 0xFFFFFFFFLL;
      }
      goto LABEL_177;
    }
LABEL_178:
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, char *))(a1[6] + 160))(a2, v160, v161, 1, (unsigned __int16)v84, v27, (char *)&v163 + 2);
    if ((v26 & 0x80000000) == 0)
    {
      *((_DWORD *)a1 + 26) = v27[2] + v27[1];
      *((_DWORD *)a1 + 27) = v27[4] + v27[3];
      if (!v20)
        goto LABEL_183;
      goto LABEL_182;
    }
  }
  else
  {
    v26 = 2588942346;
  }
  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NNWS", 75000, 0, v85, v86, v87, v88, v159);
  if (v20)
    goto LABEL_182;
LABEL_183:
  if (v25)
    heap_Free(*(_QWORD **)(*a1 + 8), v25);
  if (v27)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v27);
  return v26;
}

uint64_t fe_nnws_adjustTokenRecordBND(uint64_t a1, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unsigned __int16 v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  const char *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *__s1;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;

  v45 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  __s1 = 0;
  v41 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)(a7 + 48) + 176))(a5, a6, a4, 1, &v41, &v42);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a7 + 48) + 104))(a5, a6, 3, a4, (char *)&v43 + 2);
    if ((result & 0x80000000) == 0)
    {
      v15 = HIWORD(v43);
      if (HIWORD(v43))
      {
        v16 = 0;
        v17 = 0;
        v18 = a2;
        v36 = (_DWORD *)(a1 + 48);
        v37 = a1 + 32;
        v39 = a2;
        v38 = a1;
        while (1)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(*(_QWORD *)(a7 + 48) + 168))(a5, a6, v15, 0, 1, (char *)&v45 + 4, (char *)&v42 + 2);
          if ((result & 0x80000000) != 0)
            return result;
          if (HIDWORD(v45) == 5)
            break;
          if (HIDWORD(v45) != 6)
          {
            v31 = HIWORD(v43);
LABEL_55:
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a7 + 48) + 120))(a5, a6, HIWORD(v43), (char *)&v43 + 2);
            if ((result & 0x80000000) != 0)
              return result;
            if ((_DWORD)v31)
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 + 48) + 192))(a5, a6, v31);
            goto LABEL_58;
          }
          if (v17 < a2)
          {
            v19 = v17;
            v20 = (unsigned int *)(v37 + 56 * v17);
            do
            {
              v21 = *v20;
              v20 += 14;
              v22 = (1 << v21) & 0x2C;
              if (v21 <= 5 && v22 != 0)
              {
                v17 = v19;
                goto LABEL_40;
              }
              ++v19;
            }
            while (v18 != v19);
            v17 = v18;
          }
LABEL_40:
          v32 = a1 + 56 * v17;
          v33 = *(_DWORD *)(v32 + 24);
          v44 = *(_DWORD *)(v32 + 28);
          LODWORD(v45) = v33;
          ++v17;
          v34 = *(_QWORD *)(a7 + 48);
          if (v44 > v33)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(v34 + 160))(a5, a6, HIWORD(v43), 1, 1, &v45, &v43);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(*(_QWORD *)(a7 + 48) + 160))(a5, a6, HIWORD(v43), 2, 1, &v44, &v43);
            if ((result & 0x80000000) != 0)
              return result;
            v31 = 0;
            goto LABEL_55;
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v34 + 120))(a5, a6, HIWORD(v43), (char *)&v43 + 2);
          if ((result & 0x80000000) != 0)
            return result;
LABEL_58:
          v15 = HIWORD(v43);
          if (!HIWORD(v43))
            return result;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)(a7 + 48) + 168))(a5, a6, HIWORD(v43), 1, 1, &v45, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(*(_QWORD *)(a7 + 48) + 168))(a5, a6, HIWORD(v43), 2, 1, &v44, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a7 + 48)
                                                                                               + 176))(a5, a6, HIWORD(v43), 4, &__s1, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        v24 = a3;
        v25 = v44;
        v26 = v45;
        if (v44 < *(_DWORD *)(v41 + 16) + (int)v45)
        {
          LODWORD(v45) = v45 + v16;
          if (a2)
          {
            v27 = 0;
            v28 = v36;
            while (1)
            {
              if (*(v28 - 2) == 1)
              {
                if (cstdlib_strcmp(__s1, "prompt") || *(v28 - 4) == 5)
                {
                  v25 = v44;
                  if (*v28 != 1)
                  {
                    v29 = *(v28 - 9);
                    goto LABEL_32;
                  }
                }
                else
                {
                  v25 = v44;
                }
              }
              v29 = *(v28 - 9);
              if (v29 >= v26 && *(v28 - 8) + v29 < v25)
              {
                ++v16;
                goto LABEL_37;
              }
LABEL_32:
              v30 = *(v28 - 8) + v29;
              if (v30 >= v25)
              {
                if (*v28 != 1)
                {
LABEL_47:
                  v25 += v16;
                  v44 = v25;
                  a2 = v39;
                  goto LABEL_48;
                }
                v25 += ++v16;
                v44 = v25;
              }
              else if (v30 == *(_DWORD *)(v41 + 16) + *(_DWORD *)(v41 + 12))
              {
                goto LABEL_47;
              }
LABEL_37:
              ++v27;
              v28 += 14;
              if (v18 == v27)
                goto LABEL_49;
            }
          }
          LODWORD(v27) = 0;
LABEL_48:
          if ((_DWORD)v27 == a2)
LABEL_49:
            v44 = v25 + v16;
        }
        a3 = v24;
        v35 = cstdlib_strlen(v24);
        if (v44 > v35)
          v44 = v35;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)(a7 + 48) + 160))(a5, a6, HIWORD(v43), 1, 1, &v45, &v43);
        a1 = v38;
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(*(_QWORD *)(a7 + 48) + 160))(a5, a6, HIWORD(v43), 2, 1, &v44, &v43);
        if ((result & 0x80000000) != 0)
          return result;
        v31 = 0;
        a2 = v39;
        goto LABEL_55;
      }
    }
  }
  return result;
}

uint64_t fe_nnws_adjust_ENP_labels(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;

  if ((_DWORD)result)
  {
    v7 = result;
    v22 = a3 + 1;
    v23 = a3 + 3;
    v8 = result;
    v9 = -(uint64_t)result;
    v10 = (unsigned __int8 **)*a4;
    v11 = 1;
    do
    {
      if (!cstdlib_strcmp(*(const char **)a2, "ENG")
        || (result = cstdlib_strcmp(*(const char **)a2, "NUM"), !(_DWORD)result))
      {
        *v10 = (unsigned __int8 *)*a3;
        result = fe_hlp_adjustBMES_basedSingleLabel(v7, (int)v11 - 1, a3, a4);
        goto LABEL_13;
      }
      if (v11 != 1 && !*(_DWORD *)(a2 - 16) && *(_DWORD *)(a2 + 16) == 1)
      {
        result = cstdlib_strcmp(*(const char **)a2, "/");
        if ((_DWORD)result)
        {
          *v10 = (unsigned __int8 *)a3[3];
          result = fe_hlp_adjustBMES_basedSingleLabel(v7, (int)v11 - 1, a3, a4);
          v12 = *(_DWORD *)(a2 - 24);
          if (v12 == 3)
          {
            *(_DWORD *)(a2 - 24) = 1;
            goto LABEL_37;
          }
          if (v12 == 2)
          {
            *(_DWORD *)(a2 - 24) = 0;
LABEL_37:
            *(_DWORD *)(a2 + 32) = 2;
            *(_DWORD *)(a2 + 20) = *(_DWORD *)(a2 - 36) + 1;
            goto LABEL_13;
          }
          goto LABEL_13;
        }
      }
      if (!*(_DWORD *)(a2 + 36))
      {
        v13 = *(_DWORD *)(a2 + 32);
        if ((v13 - 2) >= 2)
        {
          if (v13 != 1)
            goto LABEL_13;
          v18 = **v10;
          v19 = a3;
          if (v18 == 69)
          {
LABEL_29:
            *v10 = (unsigned __int8 *)*v19;
          }
          else if (v18 == 77)
          {
            v19 = v22;
            goto LABEL_29;
          }
          if (v11 != 1)
          {
            v20 = **(v10 - 1);
            if (v20 == 77)
            {
              v21 = *v23;
              goto LABEL_39;
            }
            if (v20 == 66)
            {
              v21 = *a3;
LABEL_39:
              *(v10 - 1) = (unsigned __int8 *)v21;
              goto LABEL_13;
            }
          }
          goto LABEL_13;
        }
      }
      v14 = **v10;
      v15 = a3;
      if (v14 != 66)
      {
        if (v14 != 77)
          goto LABEL_21;
        v15 = v23;
      }
      *v10 = (unsigned __int8 *)*v15;
LABEL_21:
      if (v11 < v8)
      {
        v16 = *v10[1];
        if (v16 == 69)
        {
          v17 = *a3;
          goto LABEL_35;
        }
        if (v16 == 77)
        {
          v17 = *v22;
LABEL_35:
          v10[1] = (unsigned __int8 *)v17;
        }
      }
LABEL_13:
      ++v11;
      a2 += 56;
      ++v10;
    }
    while (v9 + v11 != 1);
  }
  return result;
}

uint64_t fe_hlp_adjustBMES_basedSingleLabel(uint64_t result, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;

  v4 = *a4;
  v5 = **(unsigned __int8 **)(*a4 + 8 * a2);
  if (v5 > 0x4C)
  {
    if (v5 != 77)
    {
      if (v5 != 83)
        return result;
      if (a2)
      {
        v6 = a2 - 1;
        v9 = **(unsigned __int8 **)(v4 + 8 * v6);
        v10 = a3;
        if (v9 != 66)
        {
          if (v9 != 77)
            goto LABEL_27;
          v10 = a3 + 3;
        }
        v11 = *v10;
        goto LABEL_26;
      }
LABEL_27:
      if (a2 + 1 >= result)
        return result;
      v18 = (uint64_t *)(v4 + 8 * (a2 + 1));
      v19 = *(unsigned __int8 *)*v18;
      if (v19 != 69)
      {
        if (v19 != 77)
          return result;
        ++a3;
      }
      goto LABEL_40;
    }
    if (a2)
    {
      v12 = a2 - 1;
      v16 = **(unsigned __int8 **)(v4 + 8 * v12);
      if (v16 == 69)
      {
        v17 = 2;
      }
      else
      {
        if (v16 != 83)
          goto LABEL_34;
        v17 = 1;
      }
      v15 = a3[v17];
      goto LABEL_33;
    }
  }
  else
  {
    if (v5 != 66)
    {
      if (v5 != 69)
        return result;
      if (a2)
      {
        v6 = a2 - 1;
        v7 = **(unsigned __int8 **)(v4 + 8 * v6);
        if (v7 == 69)
        {
          v8 = 2;
        }
        else
        {
          if (v7 != 83)
            goto LABEL_27;
          v8 = 1;
        }
        v11 = a3[v8];
LABEL_26:
        *(_QWORD *)(v4 + 8 * v6) = v11;
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (a2)
    {
      v12 = a2 - 1;
      v13 = **(unsigned __int8 **)(v4 + 8 * v12);
      v14 = a3;
      if (v13 == 66)
      {
LABEL_19:
        v15 = *v14;
LABEL_33:
        *(_QWORD *)(v4 + 8 * v12) = v15;
        goto LABEL_34;
      }
      if (v13 == 77)
      {
        v14 = a3 + 3;
        goto LABEL_19;
      }
    }
  }
LABEL_34:
  if (a2 + 1 >= result)
    return result;
  v18 = (uint64_t *)(v4 + 8 * (a2 + 1));
  v20 = *(unsigned __int8 *)*v18;
  if (v20 == 66)
  {
    v21 = 2;
  }
  else
  {
    if (v20 != 83)
      return result;
    v21 = 3;
  }
  a3 += v21;
LABEL_40:
  *v18 = *a3;
  return result;
}

uint64_t fe_nnws_setFeature(uint64_t a1, const char **a2, unsigned int a3, int a4, uint64_t *a5, const char *a6)
{
  unsigned int v6;
  uint64_t v11;
  const char *v12;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  unsigned int v22;

  if (a3 < 2)
    return 0;
  v22 = v6;
  v11 = a3 - 1;
  v12 = nnws_g_featureNames[a4];
  while (cstdlib_strcmp(*a2, v12))
  {
    ++a5;
    ++a2;
    if (!--v11)
      return 0;
  }
  if (!cstdlib_strcmp(a6, ""))
  {
    v20 = (char *)*a5;
    v21 = "=";
    goto LABEL_13;
  }
  if (cstdlib_strlen(a6) < 0x41)
  {
LABEL_11:
    v20 = (char *)*a5;
    v21 = a6;
LABEL_13:
    cstdlib_strcpy(v20, v21);
    return 0;
  }
  v14 = cstdlib_strlen(a6);
  v15 = heap_Realloc(*(uint64_t **)(a1 + 8), *a5, v14 + 1);
  if (v15)
  {
    *a5 = v15;
    goto LABEL_11;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_NNWS", 37000, 0, v16, v17, v18, v19, v22);
  return 2588942346;
}

__int128 **reorder_pMrk(__int128 **result, unsigned int a2, int a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a2)
  {
    v3 = 0;
    v4 = *result;
    do
    {
      if (++v3 < (unint64_t)a2 && *(_DWORD *)v4 == a3 && *((_DWORD *)v4 + 11) == *((_DWORD *)v4 + 3))
      {
        v5 = *v4;
        v7 = v4[1];
        v6 = v4[3];
        *v4 = v4[2];
        v4[1] = v6;
        v4[2] = v5;
        v4[3] = v7;
        *((_DWORD *)v4 + 1) = *((_DWORD *)v4 + 9);
      }
      v4 += 2;
    }
    while (a2 != v3);
  }
  return result;
}

uint64_t fe_initlingdb_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t LowerCasedMainLng3;
  uint64_t inited;
  uint64_t Object;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v25;
  const char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  LowerCasedMainLng3 = 2307923975;
  v28 = 0;
  v29 = 0;
  if (!a5)
    return LowerCasedMainLng3;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v33);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"LINGDB", &v31);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"SYNTHSTREAM", &v32);
  v13 = *(_QWORD *)(v33 + 48);
  if ((Object & 0x80000000) != 0)
  {
    v26 = "LINGDB";
LABEL_20:
    objc_ReleaseObject(v13, (uint64_t)v26);
    return Object;
  }
  v14 = objc_GetObject(v13, (uint64_t)"FE_DCTLKP", &v30);
  if ((v14 & 0x80000000) != 0)
  {
    Object = v14;
    objc_ReleaseObject(*(_QWORD *)(v33 + 48), (uint64_t)"LINGDB");
    v13 = *(_QWORD *)(v33 + 48);
    v26 = "SYNTHSTREAM";
    goto LABEL_20;
  }
  v15 = heap_Calloc(*(_QWORD **)(v33 + 8), 1, 976);
  if (v15)
  {
    v20 = v15;
    *(_QWORD *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 62336;
    *(_QWORD *)(v15 + 32) = a1;
    *(_QWORD *)(v15 + 40) = a2;
    *(_QWORD *)v15 = v33;
    *(_QWORD *)(v15 + 8) = a1;
    *(_QWORD *)(v15 + 16) = a3;
    *(_QWORD *)(v15 + 24) = a4;
    *(_QWORD *)(v15 + 72) = *(_QWORD *)(v31 + 8);
    *(_QWORD *)(v15 + 80) = *(_QWORD *)(v32 + 8);
    v21 = v30;
    *(_QWORD *)(v15 + 64) = *(_QWORD *)(v30 + 8);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(v21 + 16);
    v22 = objc_GetObject(*(_QWORD *)(v33 + 48), (uint64_t)"CLMOBJECT", &v29);
    if ((v22 & 0x80000000) != 0
      || (v23 = v29,
          *(_QWORD *)(v20 + 968) = *(_QWORD *)(v29 + 8),
          *(_OWORD *)(v20 + 952) = *(_OWORD *)(v23 + 16),
          v22 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(v20 + 64) + 88))(*(_QWORD *)(v20 + 48), *(_QWORD *)(v20 + 56), (char *)&v28 + 4, &v28), (v22 & 0x80000000) != 0))
    {
      LowerCasedMainLng3 = v22;
LABEL_23:
      fe_initlingdb_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return LowerCasedMainLng3;
    }
    v25 = (_DWORD)v28 == 1 && HIDWORD(v28) == 1;
    *(_DWORD *)(v20 + 944) = v25;
    LowerCasedMainLng3 = hlp_GetLowerCasedMainLng3(*(_QWORD *)v20, (char *)(v20 + 948));
    if ((LowerCasedMainLng3 & 0x80000000) != 0)
      goto LABEL_23;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(v33 + 32), (uint64_t)"FE_INITLINGDB", 30000, 0, v16, v17, v18, v19, v28);
    objc_ReleaseObject(*(_QWORD *)(v33 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(v33 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(v33 + 48), (uint64_t)"FE_DCTLKP");
    return 2307923978;
  }
  return LowerCasedMainLng3;
}

uint64_t hlp_GetLowerCasedMainLng3(uint64_t a1, char *a2)
{
  uint64_t Str;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *__s;

  __s = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  v4 = 2307923968;
  if (__s && cstdlib_strlen(__s) == 3)
  {
    cstdlib_strcpy(a2, __s);
    if (cstdlib_strlen(a2))
    {
      v5 = 0;
      v6 = 0;
      do
      {
        a2[v5] = ssft_tolower(a2[v5]);
        v5 = ++v6;
      }
      while (cstdlib_strlen(a2) > v6);
    }
    return Str;
  }
  return v4;
}

uint64_t fe_initlingdb_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = safeh_HandleCheck(a1, a2, 62336, 976);
  if ((v3 & 0x80000000) != 0)
    return 2307923976;
  v4 = v3;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CLMOBJECT");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  }
  return v4;
}

uint64_t fe_initlingdb_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  _BOOL4 v5;
  uint64_t v6;

  v6 = 0;
  result = safeh_HandleCheck(a1, a2, 62336, 976);
  if ((result & 0x80000000) != 0)
    return 2307923976;
  if (a1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 64) + 88))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (char *)&v6 + 4, &v6);
    if ((result & 0x80000000) == 0)
    {
      v5 = (_DWORD)v6 == 1 && HIDWORD(v6) == 1;
      *(_DWORD *)(a1 + 944) = v5;
      return hlp_GetLowerCasedMainLng3(*(_QWORD *)a1, (char *)(a1 + 948));
    }
  }
  return result;
}

uint64_t fe_initlingdb_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62336, 976) & 0x80000000) != 0)
    return 2307923976;
  synstrmaux_InitStreamOpener(a1 + 88, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_INITLINGDB");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 88), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 912);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 88), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 928);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 88), *(_QWORD *)(a1 + 80), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
  return v7;
}

uint64_t fe_initlingdb_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned __int16 v40;
  char **v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  const void **v45;
  size_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *);
  uint64_t v60;
  const char *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  int *v78;
  int v79;
  unsigned __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  const char *v87;
  char *v88;
  const char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  const char *v93;
  unsigned int v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v101;
  int v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  int *v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  unsigned int v113;
  char *v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int NextUtf8Offset;
  uint64_t inserted;
  int v121;
  const char *v122;
  const char *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int16 v132;
  unsigned __int16 v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t *v138;
  char *v139;
  int v140;
  unsigned int v141;
  char *v142;
  int v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  char *v150;
  int v151;
  unsigned __int16 v152;
  unsigned __int16 v153;
  uint64_t BestTNType;
  char *v155;
  uint64_t v156;
  char *v157;
  int v158;
  uint64_t v159;
  char *v160;
  int v161;
  int v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  int v176;
  unsigned __int16 v177;
  char *v178;
  int v179;
  uint64_t i;
  unsigned __int8 v181;
  int v182;
  unsigned __int8 v183;
  int v184;
  size_t v185;
  char *v186;
  const char **v187;
  char *v188;
  __int16 v189;
  unsigned int v190;
  char *v191;
  const char *v192;
  unsigned __int16 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int16 v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  char *v204;
  int v205;
  const char *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  const char *v210;
  const char *v211;
  char *__s;
  uint64_t v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char __s2[13];
  _BYTE __c[11];
  char *v223;
  char *v224;
  int v225;
  unsigned __int16 v226;
  unsigned __int16 v227;
  int v228;
  unsigned int v229;
  _DWORD *v230;
  unsigned int *v231;
  unsigned int v232;
  char *v233;
  char *v234;
  _QWORD v235[2];

  memset(v235, 0, 12);
  v9 = 2307923978;
  v233 = 0;
  v234 = 0;
  v232 = 0;
  v230 = 0;
  v231 = 0;
  v227 = 0;
  v225 = 0;
  v224 = 0;
  *(_QWORD *)&__c[3] = 0;
  v223 = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62336, 976) & 0x80000000) != 0)
    return 2307923976;
  v228 = 0;
  v229 = 0;
  v226 = 0;
  *a5 = 1;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *))(a1[10] + 144))(a1[114], a1[115], &v235[1], v235);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD *))(a1[10] + 144))(a1[116], a1[117], (char *)v235 + 4, v235);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[9] + 56))(a3, a4);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[9] + 104))(a3, a4, 1, 0, (char *)&v228 + 2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  if (!LODWORD(v235[1]))
  {
    v22 = v235[0];
    if (v235[0])
    {
      if (HIDWORD(v235[0]))
      {
        v10 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int **, unsigned int *))(a1[10] + 88))(a1[116], a1[117], &v231, &v229);
        if ((v10 & 0x80000000) != 0)
          return v10;
        if ((v229 & 0x1FFFE0) == 0 || !(unsigned __int16)(v229 >> 5))
          goto LABEL_32;
        v23 = v231;
        v24 = (unsigned __int16)((unint64_t)v229 >> 5);
        v25 = 1;
        do
        {
          v27 = *v23;
          v23 += 8;
          v26 = v27;
          v28 = (1 << v27) & 0x1000001003070000;
          v29 = v27 > 0x3C || v28 == 0;
          if (v29 && v26 != 0x4000)
            v25 = 0;
          --v24;
        }
        while (v24);
        if (!v25)
        {
          v54 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unsigned int *, int *))(a1[9] + 160))(a3, a4, HIWORD(v228), 1, (unsigned __int16)(v229 >> 5), v231, &v228);
          if ((v54 & 0x80000000) != 0)
          {
            v9 = v54;
            log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 30002, 0, v55, v56, v57, v58, v202);
            return v9;
          }
        }
        else
        {
LABEL_32:
          *a5 = 1;
        }
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[10] + 96))(a1[116], a1[117]);
        if ((v10 & 0x80000000) != 0)
          return v10;
        v22 = v235[0];
      }
      if (v22)
      {
        *a5 = 1;
        v225 = 1;
      }
    }
    else
    {
      *(_QWORD *)__s2 = 0;
      if ((paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clcpppipelinemode", __s2) & 0x80000000) != 0
        || !*(_QWORD *)__s2
        || !**(_BYTE **)__s2)
      {
        *a5 = 0;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[9] + 160))(a3, a4, HIWORD(v228), 3, 1, &v225, &v228);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[9] + 160))(a3, a4, HIWORD(v228), 3, 1, &v225, &v228);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, char **, unsigned int *))(a1[10] + 88))(a1[114], a1[115], &v233, &v232);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = hlp_CopyString(*a1, (uint64_t *)&v234, v233, 0);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_79;
  v12 = a1[10];
  if (v232 != 1)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int **, unsigned int *))(v12 + 88))(a1[116], a1[117], &v231, &v229);
    if ((v11 & 0x80000000) == 0)
    {
      v31 = v229;
      v32 = v229 >> 5;
      v227 = v229 >> 5;
      v33 = (_DWORD *)heap_Alloc(*(_QWORD *)(*a1 + 8), v229);
      v230 = v33;
      if (!v33)
      {
LABEL_82:
        v52 = *(_QWORD *)(*a1 + 32);
        v53 = 30000;
LABEL_100:
        log_OutPublic(v52, (uint64_t)"FE_INITLINGDB", v53, 0, v15, v16, v17, v18, v202);
        goto LABEL_101;
      }
      cstdlib_memcpy(v33, v231, v229);
      if ((unsigned __int16)(v31 >> 5))
      {
        v34 = 0;
        v35 = 0;
        v36 = -1;
        v37 = "normal";
        while (1)
        {
          v38 = v35;
          v39 = v230[8 * v35];
          if (v39 == 34)
            v36 = v35;
          if (v39 == 100)
          {
            if (*(_QWORD *)&v230[8 * v35 + 6])
            {
              if (v36 == 0xFFFF)
              {
                if ((unsigned __int16)v32 <= (unsigned __int16)(v35 + 1))
                  v40 = v35 + 1;
                else
                  v40 = v32;
                v36 = v35;
                while (++v36 < (unsigned __int16)v32)
                {
                  if (v230[8 * v36] == 34)
                    goto LABEL_63;
                }
                v36 = v40;
              }
LABEL_63:
              v41 = (char **)&v230[8 * v36];
              if (*((_DWORD *)v41 + 3) == v230[8 * v35 + 3])
              {
                if ((hlp_ValidatePhoneticTranscription((uint64_t)a1, v37, v41[3]) & 0x80000000) != 0)
                {
                  v218 = v37;
                  v42 = v234;
                  v43 = cstdlib_strlen(v234);
                  v44 = (uint64_t)v230;
                  v45 = (const void **)&v230[8 * v38];
                  v46 = *((unsigned int *)v45 + 2);
                  if (v43 >= v46)
                  {
                    if (v34 >= v36)
                      v49 = v36;
                    else
                      v49 = v34;
                    if (v34 <= v36)
                      v50 = v36;
                    else
                      v50 = v34;
                    cstdlib_memcpy((void *)&v42[*((unsigned int *)v45 + 3) - v230[3]], v45[3], v46);
                    v51 = v227;
                    cstdlib_memmove((void *)(v44 + 32 * v50), (const void *)(v44 + 32 * (v50 + 1)), 32 * (v227 + ~(_DWORD)v50));
                    cstdlib_memmove((void *)(v44 + 32 * v49), (const void *)(v44 + 32 * (v49 + 1)), 32 * (~(_DWORD)v49 + (unsigned __int16)(v51 - 1)));
                    v32 = v51 - 2;
                    v227 = v51 - 2;
                    v48 = heap_Realloc(*(uint64_t **)(*a1 + 8), v44, 32 * (unsigned __int16)(v51 - 2));
                    if (!v48)
                      goto LABEL_82;
                  }
                  else
                  {
                    v47 = v227;
                    cstdlib_memmove(v45, &v230[8 * v34 + 8], 32 * (int)(v227 + ~v34));
                    v32 = v47 - 1;
                    v227 = v47 - 1;
                    v48 = heap_Realloc(*(uint64_t **)(*a1 + 8), v44, 32 * (unsigned __int16)(v47 - 1));
                    if (!v48)
                      goto LABEL_82;
                  }
                  v37 = v218;
                  v35 = 0;
                  v230 = (_DWORD *)v48;
                  v36 = -1;
                }
                else
                {
                  v36 = -1;
                  v32 = v227;
                }
              }
            }
          }
          else if (v39 == 36)
          {
            v37 = *(char **)&v230[8 * v35 + 6];
          }
          v34 = ++v35;
          if (v35 == (unsigned __int16)v32)
            goto LABEL_86;
        }
      }
      v32 = 0;
      v37 = "normal";
LABEL_86:
      v219 = v37;
      v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *))(a1[9] + 160);
      v60 = HIWORD(v228);
      v61 = v234;
      v62 = cstdlib_strlen(v234);
      v67 = v59(a3, a4, v60, 0, (unsigned __int16)(v62 + 1), v61, &v228);
      v68 = *(_QWORD *)(*a1 + 32);
      if ((v67 & 0x80000000) != 0)
      {
        log_OutPublic(v68, (uint64_t)"FE_INITLINGDB", 30002, 0, v63, v64, v65, v66, v202);
        v20 = 0;
        v21 = 0;
        v9 = v67;
        goto LABEL_103;
      }
      log_OutText(v68, (uint64_t)"FE_INITLINGDB", 5, 0, (uint64_t)"Initializing LINGDB with %s", v64, v65, v66, (uint64_t)v61);
      v20 = heap_Alloc(*(_QWORD *)(*a1 + 8), 4 * (unsigned __int16)v32);
      if (!v20)
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 30000, 0, v69, v70, v71, v72, v203);
        goto LABEL_102;
      }
      v73 = (uint64_t)v230;
      if ((_WORD)v32)
      {
        v74 = v230 + 4;
        v75 = (unsigned __int16)v32;
        do
        {
          if (*(v74 - 4) == 1)
            *v74 = 0;
          v74 += 8;
          --v75;
        }
        while (v75);
        v76 = (unsigned int *)(v73 + 12);
        if ((_WORD)v32)
        {
          v77 = 0;
          v78 = (int *)(v73 + 12);
          while (1)
          {
            v79 = *v78;
            v78 += 8;
            if (v79 != *(_DWORD *)(v73 + 12))
              break;
            if ((unsigned __int16)v32 == ++v77)
            {
              v80 = v32;
              v77 = (unsigned __int16)v32;
              goto LABEL_118;
            }
          }
          v80 = v77;
        }
        else
        {
          v80 = 0;
          v77 = 0;
        }
      }
      else
      {
        v80 = 0;
        v77 = 0;
        v76 = v230 + 3;
      }
LABEL_118:
      v81 = v73 + 32 * v77;
      v216 = v73;
      if ((unsigned __int16)v32 == v80)
      {
        marker_sort(v81, (unsigned __int16)v32 - v77);
        v82 = v216;
      }
      else
      {
        v83 = 0;
        v84 = (unsigned __int16)(v32 - v80);
        v85 = (_DWORD *)(v81 + 4);
        do
        {
          *(_DWORD *)(v20 + 4 * v83) = *v85;
          *v85 = v83;
          v85 += 8;
          ++v83;
        }
        while (v84 != v83);
        marker_sort(v81, (unsigned __int16)v32 - v77);
        v82 = v216;
        v86 = (_DWORD *)(v216 + 32 * v77 + 4);
        do
        {
          *v86 = *(_DWORD *)(v20 + 4 * *v86);
          v86 += 8;
          --v84;
        }
        while (v84);
      }
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1[8] + 56))(a1[6], a1[7], a3, a4, v82, (unsigned __int16)v32);
      v87 = v219;
      if ((v11 & 0x80000000) == 0)
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[9] + 104))(a3, a4, 3, HIWORD(v228), &v226);
        if ((v11 & 0x80000000) == 0)
        {
          v215 = *v76;
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", "normal", &__c[3], &__c[1], __c);
          if ((v11 & 0x80000000) == 0)
          {
            if (*(_WORD *)&__c[1])
            {
              v88 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
              if (v88)
                *v88 = 0;
              hlp_CreatePauseDurParam(*a1, "normal", **(const char ***)&__c[3]);
              v89 = **(const char ***)&__c[3];
            }
            else
            {
              v89 = "normal";
            }
            v90 = v216;
            if (!(_WORD)v32)
            {
              v213 = 0;
              v92 = 0;
              v214 = 0;
              v95 = v215;
              goto LABEL_276;
            }
            v91 = 0;
            v214 = 0;
            v92 = 0;
            v93 = 0;
            v94 = 0;
            v95 = v215;
            __s = "normal";
            v213 = 0;
            v207 = v20;
            while (2)
            {
              v96 = (int *)(v90 + 32 * (unsigned __int16)(v94 + 1));
              while (1)
              {
                v97 = (unsigned __int16)v94;
                v98 = 32 * (unsigned __int16)v94;
                v99 = *(_DWORD *)(v90 + v98);
                if (v99 > 0x24 || ((1 << v99) & 0x1400200000) == 0)
                  goto LABEL_273;
                v101 = v94 + 1;
                if ((unsigned __int16)(v94 + 1) < (unsigned __int16)v32
                  && (v102 = *(_DWORD *)(v90 + 32 * (unsigned __int16)v94 + 12),
                      *(_DWORD *)(v90 + 32 * (unsigned __int16)(v94 + 1) + 12) == v102))
                {
                  v103 = 0;
                  v104 = 0;
                  v105 = v96;
                  v106 = v94;
                  v107 = v94 + 1;
                  while (1)
                  {
                    v94 = v107;
                    v109 = *v105;
                    v105 += 8;
                    v108 = v109;
                    if (v109 == 36)
                    {
                      v103 = v94;
                    }
                    else if (v108 == 34)
                    {
                      v94 = v106;
                      goto LABEL_152;
                    }
                    if (v108 == 21)
                      v104 = v94;
                    v107 = v94 + 1;
                    if ((unsigned __int16)(v94 + 1) >= (unsigned __int16)v32)
                      break;
                    v106 = v94;
                    if (*(_DWORD *)(v90 + 32 * (unsigned __int16)(v94 + 1) + 12) != v102)
                      goto LABEL_152;
                  }
                  v94 = v32 - 1;
                }
                else
                {
                  v103 = 0;
                  v104 = 0;
                }
LABEL_152:
                if (!v91 || v99 != 36 || v104)
                  break;
                v93 = *(const char **)(v90 + 32 * v97 + 24);
                v96 += 8;
                v91 = 1;
                v94 = v101;
                if ((unsigned __int16)v101 >= (unsigned __int16)v32)
                  goto LABEL_276;
              }
              v110 = v90 + 32 * v97;
              v112 = *(_DWORD *)(v110 + 12);
              v111 = (_DWORD *)(v110 + 12);
              v113 = v112 - v215;
              v208 = v94;
              v209 = v97;
              if (v112 != v215)
              {
                v206 = v93;
                v205 = v95;
                v210 = v89;
                v204 = (char *)v92;
                v217 = v90;
                v220 = (char *)v87;
                v114 = v234;
                v115 = cstdlib_strlen(v234);
                while (v114[v113] == 95 || utf8_BelongsToSet(0, v114, v113, v115))
                {
                  NextUtf8Offset = utf8_GetNextUtf8Offset(v114, v113);
                  *v111 += NextUtf8Offset - v113;
                  v113 = NextUtf8Offset;
                }
                v93 = v206;
                v20 = v207;
                v90 = v217;
                v87 = v220;
                v97 = v209;
                if (v205 != *v111)
                {
                  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 5, 0, (uint64_t)"Creating USER TN %s token at pos  %u,%u in lingdb", v116, v117, v118, (uint64_t)v210);
                  inserted = hlp_InsertUserTNToken((char *)a1, a3, a4, HIWORD(v228), &v226, (unsigned __int16)(v205 - v215), LOWORD(v230[8 * v209 + 3]) - (unsigned __int16)v215, v210, v204, v220, v234, v214, (uint64_t)v230, v227);
                  if ((inserted & 0x80000000) != 0)
                    goto LABEL_287;
                  v90 = (uint64_t)v230;
                  v87 = v220;
                  v97 = v209;
                  v93 = v206;
                }
              }
              v121 = *(_DWORD *)(v90 + v98);
              if (v121 == 36)
              {
                v87 = *(const char **)(v90 + 32 * v97 + 24);
              }
              else if (v121 == 21)
              {
                __s = *(char **)(v90 + 32 * v97 + 24);
              }
              if (v103)
                v87 = *(const char **)(v90 + 32 * v103 + 24);
              if (v104)
                __s = *(char **)(v90 + 32 * v104 + 24);
              if (v121 == 34)
              {
                v122 = v93;
                v123 = v87;
                v124 = *(uint64_t **)(*a1 + 8);
                v125 = v97;
                v126 = cstdlib_strlen(*(const char **)(v90 + 32 * v97 + 24)) + 1;
                v127 = heap_Realloc(v124, v213, v126);
                if (v127)
                {
                  v92 = v127;
                  v132 = 0;
                  v133 = 0;
                  v90 = (uint64_t)v230;
                  v87 = v123;
                  v94 = v208;
                  v134 = v125;
                  v93 = v122;
                  while (1)
                  {
                    v135 = *(unsigned __int8 *)(*(_QWORD *)(v90 + 32 * v125 + 24) + v133);
                    if (v135 != 32)
                    {
                      if (!*(_BYTE *)(*(_QWORD *)(v90 + 32 * v125 + 24) + v133))
                      {
                        v214 = 0;
                        *(_BYTE *)(v127 + v132) = 0;
                        v91 = 1;
                        v89 = "phon";
                        v213 = v127;
                        goto LABEL_272;
                      }
                      v136 = v132++;
                      *(_BYTE *)(v127 + v136) = v135;
                    }
                    ++v133;
                  }
                }
                log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 30000, 0, v128, v129, v130, v131, v203);
                v21 = v213;
                goto LABEL_103;
              }
              if (v121 != 36 && v93 != 0)
                v87 = v93;
              v138 = *(uint64_t **)(*a1 + 8);
              v139 = v224;
              v140 = cstdlib_strlen(__s);
              v141 = cstdlib_strlen("normal");
              v142 = (char *)v87;
              if (v141 <= cstdlib_strlen(v87))
                v143 = cstdlib_strlen(v87);
              else
                v143 = cstdlib_strlen("normal");
              v144 = (char *)heap_Realloc(v138, (uint64_t)v139, (v140 + v143 + 2));
              if (!v144)
              {
                log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 30000, 0, v145, v146, v147, v148, v203);
                goto LABEL_298;
              }
              v224 = v144;
              if (!cstdlib_strcmp(__s, "normal") && !cstdlib_strcmp(v87, "normal"))
              {
                v174 = v224;
                cstdlib_strcpy(v224, "normal");
                v214 = 0;
                goto LABEL_265;
              }
              *v224 = 0;
              if (!cstdlib_strcmp(__s, "normal"))
              {
                v153 = 0;
LABEL_238:
                v179 = cstdlib_strcmp(v142, "normal");
                v174 = v224;
                if (!v179 || !cstdlib_strcmp(v224, "normal"))
                {
                  v214 = 0;
                  goto LABEL_262;
                }
                if (cstdlib_strlen(v142) == 7 && cstdlib_strstr(v142, "_lid"))
                {
                  v142[3] = 0;
                  v214 = 1;
                }
                else
                {
                  v214 = 0;
                }
                if (cstdlib_strlen(v142) != 3)
                {
                  if (!cstdlib_strcmp(v142, "latin"))
                  {
                    v183 = *v142;
                    v174 = v224;
                    if (*v142)
                    {
                      v184 = 0;
                      do
                      {
                        v174[v153++] = ssft_tolower(v183);
                        v183 = v142[(unsigned __int16)++v184];
                      }
                      while (v183);
                    }
                    goto LABEL_262;
                  }
LABEL_256:
                  v174 = v224;
                  if (*v224)
                    v224[v153 - 1] = 0;
                  else
                    cstdlib_strcpy(v224, "normal");
LABEL_262:
                  v185 = cstdlib_strlen("normal");
                  if (cstdlib_strncmp(v174, "normal", v185) && *v174)
                    v174[v153] = 0;
LABEL_265:
                  *(_WORD *)&__c[1] = -1;
                  BestTNType = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", v174, &__c[3], &__c[1], __c);
                  if ((BestTNType & 0x80000000) == 0)
                  {
                    if (*(_WORD *)&__c[1])
                    {
                      v186 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
                      if (v186)
                        *v186 = 0;
                      hlp_CreatePauseDurParam(*a1, v174, **(const char ***)&__c[3]);
                      v187 = *(const char ***)&__c[3];
                    }
                    else
                    {
                      v187 = (const char **)&v224;
                    }
                    v20 = v207;
                    v94 = v208;
                    v87 = v142;
                    v93 = 0;
                    v92 = 0;
                    v91 = 0;
                    v89 = *v187;
                    v90 = (uint64_t)v230;
                    v134 = v209;
LABEL_272:
                    v95 = *(unsigned int *)(v90 + 32 * v134 + 12);
                    v32 = v227;
LABEL_273:
                    if ((unsigned __int16)++v94 < (unsigned __int16)v32)
                      continue;
LABEL_276:
                    v211 = v89;
                    v188 = (char *)v92;
                    v189 = v95;
                    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 5, 0, (uint64_t)"Creating USER TN %s token in lingdb", v92, (uint64_t)v89, v95, (uint64_t)v89);
                    v190 = HIWORD(v228);
                    v191 = (char *)v87;
                    v192 = v234;
                    v193 = cstdlib_strlen(v234);
                    inserted = hlp_InsertUserTNToken((char *)a1, a3, a4, v190, &v226, (unsigned __int16)(v189 - v215), v193, v211, v188, v191, v192, v214, (uint64_t)v230, v227);
                    if ((inserted & 0x80000000) != 0)
                      goto LABEL_287;
                    v194 = v227;
                    v195 = 0;
                    if (v227)
                    {
                      v196 = (uint64_t)v230;
                      v197 = v227;
                      while (*(_DWORD *)(v196 + 12) == v215)
                      {
                        ++v195;
                        --v197;
                        v196 += 32;
                        if (v227 == v195)
                        {
                          v195 = v227;
                          goto LABEL_282;
                        }
                      }
                      if (v227 != (unsigned __int16)v195)
                      {
                        v198 = 0;
                        v199 = 0;
                        v200 = (_DWORD *)(v196 + 4);
                        do
                        {
                          *(_DWORD *)(v20 + 4 * v199) = *(_DWORD *)(v196 + v198 + 4);
                          *(_DWORD *)(v196 + v198 + 4) = v199++;
                          v198 += 32;
                        }
                        while (v197 != v199);
                        marker_sort(v196, v194 - v195);
                        v201 = v197;
                        do
                        {
                          *v200 = *(_DWORD *)(v20 + 4 * *v200);
                          v200 += 8;
                          --v201;
                        }
                        while (v201);
LABEL_284:
                        inserted = hlp_ReplacePauseZeroWithNluBndNo_And_WriteMarkersToLingDB(*a1, a1[9], a3, a4, HIWORD(v228), (uint64_t *)&v230, &v227);
                        if ((inserted & 0x80000000) == 0)
                        {
                          inserted = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[10] + 96))(a1[114], a1[115], v232);
                          if ((inserted & 0x80000000) == 0)
                            inserted = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[10] + 96))(a1[116], a1[117], v229);
                        }
LABEL_287:
                        v9 = inserted;
LABEL_288:
                        v21 = v213;
                        goto LABEL_103;
                      }
                    }
                    else
                    {
LABEL_282:
                      v196 = (uint64_t)&v230[8 * v195];
                    }
                    marker_sort(v196, v227 - v195);
                    goto LABEL_284;
                  }
                  goto LABEL_295;
                }
                for (i = 0; i != 3; ++i)
                  __s2[i] = ssft_tolower(v142[i]);
                __s2[3] = 0;
                *(_WORD *)&__c[1] = -1;
                BestTNType = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", "esclang", &__c[3], &__c[1], __c);
                if ((BestTNType & 0x80000000) == 0)
                {
                  if (*(_WORD *)&__c[1] && cstdlib_strstr(**(char ***)&__c[3], __s2))
                  {
                    v181 = *v142;
                    v174 = v224;
                    if (*v142)
                    {
                      v182 = 0;
                      do
                      {
                        v174[v153++] = ssft_tolower(v181);
                        v181 = v142[(unsigned __int16)++v182];
                      }
                      while (v181);
                    }
                    goto LABEL_262;
                  }
                  goto LABEL_256;
                }
LABEL_295:
                v9 = BestTNType;
LABEL_298:
                v20 = v207;
                goto LABEL_288;
              }
              break;
            }
            LOBYTE(v149) = *__s;
            v150 = v224;
            if (*__s)
            {
              v151 = 0;
              do
              {
                v150[(unsigned __int16)v151] = ssft_tolower(v149);
                v152 = v151 + 1;
                v149 = __s[(unsigned __int16)++v151];
              }
              while (v149);
            }
            else
            {
              v152 = 0;
            }
            v150[v152] = 0;
            if (*((_DWORD *)a1 + 236) == 1 && cstdlib_strcmp(v150, "normal") && *v150)
            {
              *(_WORD *)&__c[1] = -1;
              BestTNType = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", v150, &__c[3], &__c[1], __c);
              if ((BestTNType & 0x80000000) != 0)
                goto LABEL_295;
              if (*(_WORD *)&__c[1])
              {
                v155 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
                if (v155)
                  *v155 = 0;
                v156 = *a1;
                v157 = **(char ***)&__c[3];
                v158 = cstdlib_strlen(v142);
                BestTNType = hlp_CopyString(v156, (uint64_t *)&v224, v157, v158 + 1);
                if ((BestTNType & 0x80000000) != 0)
                  goto LABEL_295;
                v150 = v224;
                cstdlib_strlen(v224);
              }
            }
            *(_WORD *)&__c[1] = -1;
            BestTNType = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1[8] + 96))(a1[6], a1[7], "fecfg", "esctn", &__c[3], &__c[1], __c);
            if ((BestTNType & 0x80000000) != 0)
              goto LABEL_295;
            if (*(_WORD *)&__c[1])
            {
              v159 = *a1;
              v160 = **(char ***)&__c[3];
              v161 = __c[0];
              v162 = cstdlib_strlen(v142);
              BestTNType = hlp_FindBestTNType(v159, v160, v161, v150, (const char **)&v223, v162 + 1);
              if ((BestTNType & 0x80000000) == 0)
              {
                v163 = v223;
                v164 = v224;
                if (v223 != v224)
                {
                  if (hlp_LogUnsupportedTNType(*a1, v224))
                    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_INITLINGDB", 30005, (uint64_t)"%s%s%s%s", v165, v166, v167, v168, "OriginalTNType");
                  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v164);
                  v224 = v163;
                }
                goto LABEL_233;
              }
              if ((BestTNType & 0x1FFF) != 0)
                goto LABEL_295;
              if (hlp_LogUnsupportedTNType(*a1, v224))
              {
                v173 = *(_QWORD *)(*a1 + 32);
                goto LABEL_229;
              }
            }
            else
            {
              if (!cstdlib_strcmp(v150, "normal")
                || !cstdlib_strcmp(v150, "sms")
                || !cstdlib_strcmp(v150, "address")
                || !cstdlib_strcmp(v150, "spell")
                || !cstdlib_strcmp(v150, "NOR")
                || !cstdlib_strcmp(v150, "SMS")
                || !cstdlib_strcmp(v150, "ADR"))
              {
LABEL_233:
                v177 = cstdlib_strlen(v224);
                if (cstdlib_strcmp(v142, "normal") && (v178 = v224, cstdlib_strcmp(v224, "normal")) && *v178)
                {
                  v153 = v177 + 1;
                  v178[v177] = 95;
                }
                else
                {
                  v153 = v177;
                }
                goto LABEL_238;
              }
              if (hlp_LogUnsupportedTNType(*a1, v150))
              {
                v173 = *(_QWORD *)(*a1 + 32);
LABEL_229:
                log_OutPublic(v173, (uint64_t)"FE_INITLINGDB", 30004, (uint64_t)"%s%s", v169, v170, v171, v172, "TNType");
              }
            }
            if (cstdlib_strcmp(v142, "normal"))
            {
              *v224 = 0;
            }
            else
            {
              v175 = *a1;
              v176 = cstdlib_strlen(v142);
              BestTNType = hlp_CopyString(v175, (uint64_t *)&v224, "normal", v176 + 1);
              if ((BestTNType & 0x80000000) != 0)
                goto LABEL_295;
            }
            goto LABEL_233;
          }
        }
      }
LABEL_80:
      v21 = 0;
      v9 = v11;
      goto LABEL_103;
    }
LABEL_79:
    v20 = 0;
    goto LABEL_80;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 96))(a1[114], a1[115], 1);
  if ((v13 & 0x80000000) != 0
    || (v13 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int **, unsigned int *))(a1[10] + 88))(a1[116], a1[117], &v231, &v229), (v13 & 0x80000000) != 0))
  {
    v9 = v13;
LABEL_101:
    v20 = 0;
LABEL_102:
    v21 = 0;
    goto LABEL_103;
  }
  if (HIDWORD(v235[0]))
  {
    v227 = v229 >> 5;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unsigned int *, int *))(a1[9] + 160))(a3, a4, HIWORD(v228), 1, v227, v231, &v228);
    if ((v14 & 0x80000000) != 0)
    {
      v9 = v14;
      v52 = *(_QWORD *)(*a1 + 32);
      v53 = 30002;
      goto LABEL_100;
    }
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[10] + 96))(a1[116], a1[117], v229);
  v20 = 0;
  v21 = 0;
  v9 = v19 & (v19 >> 31);
LABEL_103:
  if (v224)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v224);
    v224 = 0;
  }
  if (v21)
    heap_Free(*(_QWORD **)(*a1 + 8), v21);
  if (v230)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v230);
  if (v234)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v234);
  if (v20)
    heap_Free(*(_QWORD **)(*a1 + 8), v20);
  return v9;
}

uint64_t hlp_CopyString(uint64_t a1, uint64_t *a2, char *__s, int a4)
{
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t result;
  unsigned int v17;

  if (__s)
    v8 = cstdlib_strlen(__s) + 1;
  else
    v8 = 1;
  v9 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *a2, (v8 + a4));
  if (v9)
  {
    v14 = v9;
    if (__s)
      v15 = __s;
    else
      v15 = "";
    cstdlib_strcpy(v9, v15);
    result = 0;
    *a2 = (uint64_t)v14;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_INITLINGDB", 30000, 0, v10, v11, v12, v13, v17);
    return 2307923978;
  }
  return result;
}

uint64_t hlp_ValidatePhoneticTranscription(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  unsigned __int16 v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, _QWORD, char *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int v17;
  _BOOL8 v18;
  int v19;
  BOOL v20;
  size_t v21;
  int v23;
  char v24[4];
  char __s[4];
  char __dst[10];
  uint64_t v27;

  v3 = (uint64_t)a3;
  v27 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  if (!a3)
    return v3;
  hlp_GetPhonSrcAndLanguageOfOriginFromPhonWithMetaData(a3, __dst, v24);
  hlp_GetLowerCasedLng3FromLangTag(a1, a2, __s);
  if (cstdlib_strlen(__s) != 3)
    return 0;
  v6 = *(_QWORD *)(a1 + 968);
  if (!v6 || !(*(unsigned int (**)(_QWORD, _QWORD))(v6 + 56))(*(_QWORD *)(a1 + 952), *(_QWORD *)(a1 + 960)))
  {
    if (cstdlib_strcmp(__s, (const char *)(a1 + 948)))
      return 2307923968;
    else
      return 0;
  }
  v7 = cstdlib_strstr((char *)v3, "_#_");
  if (v7)
  {
    v8 = v7;
    do
    {
      *v8 = 35;
      v9 = cstdlib_strlen((const char *)v3);
      cstdlib_memmove(v8 + 1, v8 + 3, v9 - (unint64_t)(unsigned __int16)((_WORD)v8 - v3) - 2);
      v8 = cstdlib_strstr((char *)v3, "_#_");
    }
    while (v8);
  }
  if (hlp_checkDoClmInCurrentComponent((_QWORD *)a1))
    v10 = hlp_checkDoClmForLng3((const char *)a1, __s);
  else
    v10 = 0;
  v11 = cstdlib_strstr((char *)v3, "\x14");
  v12 = v11;
  if (v11)
    *v11 = 0;
  if (!v10)
  {
    v18 = cstdlib_strlen(v24) == 0;
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t, int *, _BOOL8))(*(_QWORD *)(a1 + 968)
                                                                                            + 120))(*(_QWORD *)(a1 + 952), *(_QWORD *)(a1 + 960), __s, v24, v3, &v23, v18);
    v15 = 0;
    if (v23)
      v20 = 1;
    else
      v20 = v19 <= -1;
    if (v20)
      v3 = v19;
    else
      v3 = 2307931781;
    if (!v12)
      goto LABEL_29;
    goto LABEL_28;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v14 = cstdlib_strlen((const char *)v3);
  v15 = heap_Alloc(v13, (4 * v14 + 4));
  if (v15)
  {
    v16 = *(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 968) + 64);
    v17 = cstdlib_strlen((const char *)v3);
    v3 = v16(*(_QWORD *)(a1 + 952), *(_QWORD *)(a1 + 960), __s, v3, v15, 0, 0, (4 * v17 + 4));
    if (!v12)
      goto LABEL_29;
LABEL_28:
    v21 = cstdlib_strlen("\x14");
    cstdlib_strncpy(v12, "\x14", v21);
    goto LABEL_29;
  }
  v3 = 2307923978;
  if (v12)
    goto LABEL_28;
LABEL_29:
  if (v15)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v15);
  return v3;
}

uint64_t hlp_CreatePauseDurParam(uint64_t a1, const char *a2, const char *a3)
{
  size_t v6;
  uint64_t result;
  unsigned int v8;
  char __dst[256];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  cstdlib_strcpy(__dst, "tnpausedur");
  v6 = cstdlib_strlen(a2);
  result = cstdlib_strlen(__dst);
  if (v6 < 255 - result)
  {
    cstdlib_strcat(__dst, a2);
    result = paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)__dst, &v8);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcpy(__dst, "tnpausedur");
      cstdlib_strcat(__dst, a3);
      return paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)__dst, v8);
    }
  }
  return result;
}

uint64_t hlp_InsertUserTNToken(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, unsigned int a6, unsigned __int16 a7, const char *a8, char *a9, char *a10, const char *a11, int a12, uint64_t a13, unsigned __int16 a14)
{
  uint64_t v21;
  _BOOL4 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *);
  uint64_t v35;
  __int16 v36;
  char *v37;
  char *v38;
  unsigned __int16 v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD, _QWORD, char *, char *, char *, _QWORD, _QWORD, _QWORD);
  int v52;
  size_t v53;
  int v54;
  BOOL v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v57;
  __int16 v58;
  char *v59;
  char *v60;
  char *v61;
  unsigned __int16 v63;
  unsigned __int16 v64;
  char *v65;
  int v66;
  size_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, const char *, int *);
  __int16 v69;
  unsigned __int16 v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int16 v77;
  uint64_t i;
  int *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned __int16 v86;
  unsigned int v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *);
  uint64_t v89;
  __int16 v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v92;
  __int16 v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *);
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  unsigned int v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  unsigned __int16 v102;
  int v103;
  const char *v104;
  unsigned int v105;
  unsigned int v106;
  char *__s2;
  int v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  int v111;
  char v112[4];
  char __s[4];
  int v114;
  int v115;
  __int16 v116;
  unsigned __int16 v117;
  char v118[10];
  char __dst[50];
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v117 = a7;
  v116 = 0;
  v114 = 0;
  v115 = 0;
  v21 = *a5;
  v22 = hlp_checkDoClmInCurrentComponent(a1);
  hlp_GetLowerCasedLng3FromLangTag((uint64_t)a1, a10, __s);
  if (!*a5)
    return 0;
  v23 = *a5;
  v106 = a4;
  __s2 = a1 + 948;
  do
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*((_QWORD *)a1 + 9) + 168))(a2, a3, v23, 1, 1, (char *)&v115 + 2, &v116);
    if ((v28 & 0x80000000) != 0)
    {
LABEL_131:
      v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v97 = 30003;
      goto LABEL_136;
    }
    if (HIWORD(v115) < a6)
      goto LABEL_8;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*((_QWORD *)a1 + 9)
                                                                                                 + 168))(a2, a3, *a5, 0, 1, &v114, &v116);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_131;
    if (v114 == 3 || HIWORD(v115) == v117)
    {
LABEL_8:
      v29 = 1;
      goto LABEL_9;
    }
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*((_QWORD *)a1 + 9) + 80))(a2, a3, *a5, a5);
    if ((v31 & 0x80000000) != 0)
      return v31;
    v114 = 5;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*((_QWORD *)a1 + 9)
                                                                                             + 160))(a2, a3, *a5, 0, 1, &v114, &v115);
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_135;
    log_OutText(v32, (uint64_t)"FE_INITLINGDB", 5, 0, (uint64_t)"Creating token %u %u in lingdb", v25, v26, v27, HIWORD(v115));
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*((_QWORD *)a1 + 9)
                                                                                               + 160))(a2, a3, *a5, 1, 1, (char *)&v115 + 2, &v115);
    if ((v33 & 0x80000000) != 0)
      goto LABEL_133;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, *a5, 2, 1, &v117, &v115);
    if ((v33 & 0x80000000) != 0)
      goto LABEL_133;
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(*((_QWORD *)a1 + 9) + 160);
    v35 = *a5;
    v36 = cstdlib_strlen(a8);
    v28 = v34(a2, a3, v35, 4, (unsigned __int16)(v36 + 1), a8, &v115);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_134;
    if (a12)
    {
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, *a5, 6, 4, "lid", &v115);
      if ((v28 & 0x80000000) != 0)
        return v28;
    }
    if (!a9)
    {
      v29 = 0;
      goto LABEL_9;
    }
    v105 = v21;
    v104 = a8;
    v111 = 0;
    v37 = cstdlib_strstr(a9, "_#_");
    if (v37)
    {
      v38 = v37;
      do
      {
        *v38 = 35;
        v39 = cstdlib_strlen(a9);
        cstdlib_memmove(v38 + 1, v38 + 3, v39 - (unint64_t)(unsigned __int16)((_WORD)v38 - (_WORD)a9) - 2);
        v38 = cstdlib_strstr(a9, "_#_");
      }
      while (v38);
    }
    if (cstdlib_strlen(__s) != 3)
    {
      v40 = a9;
      v21 = v21;
      goto LABEL_32;
    }
    if (v22)
      v103 = hlp_checkDoClmForLng3(a1, __s);
    else
      v103 = 0;
    v41 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v42 = cstdlib_strlen(a9);
    v43 = heap_Alloc(v41, 4 * v42 + 200);
    v21 = v21;
    if (!v43)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_INITLINGDB", 34000, 0, v44, v45, v46, v47, v99);
      return 2307923978;
    }
    v40 = (char *)v43;
    hlp_GetPhonSrcAndLanguageOfOriginFromPhonWithMetaData(a9, v118, v112);
    cstdlib_strcpy(__dst, "");
    v48 = cstdlib_strstr(a9, "\x14");
    if (v48)
    {
      v49 = v48;
      cstdlib_strcat(__dst, v48);
      *v49 = 0;
    }
    v50 = *((_QWORD *)a1 + 121);
    if (v50
      && (*(unsigned int (**)(_QWORD, _QWORD))(v50 + 56))(*((_QWORD *)a1 + 119), *((_QWORD *)a1 + 120)))
    {
      if (!v103)
      {
        v53 = cstdlib_strlen(v112);
        v54 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char *, char *, int *, BOOL))(*((_QWORD *)a1 + 121)
                                                                                             + 120))(*((_QWORD *)a1 + 119), *((_QWORD *)a1 + 120), __s, v112, a9, &v111, v53 == 0);
        if (v111)
          v55 = 1;
        else
          v55 = v54 <= -1;
        if (v55)
          LODWORD(v28) = v54;
        else
          LODWORD(v28) = -1987035515;
        if (!v53 && cstdlib_strlen(v112))
        {
          cstdlib_strcpy(__dst, "\x14");
          cstdlib_strcat(__dst, v118);
          cstdlib_strcat(__dst, "\x14");
          cstdlib_strcat(__dst, v112);
        }
LABEL_54:
        if ((v28 & 0x80000000) == 0)
        {
          if (v103)
          {
LABEL_56:
            cstdlib_strcat(v40, __dst);
          }
          else
          {
            cstdlib_strcpy(v40, a9);
            cstdlib_strcat(v40, __dst);
            if (cstdlib_strcmp(__s, __s2))
            {
              v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*((_QWORD *)a1 + 9) + 160);
              v92 = *a5;
              v93 = cstdlib_strlen(__s);
              v31 = v91(a2, a3, v92, 6, (unsigned __int16)(v93 + 1), __s, &v115);
              if ((v31 & 0x80000000) != 0)
                return v31;
            }
          }
LABEL_57:
          v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*((_QWORD *)a1 + 9) + 160);
          v57 = *a5;
          v58 = cstdlib_strlen(v40);
          v28 = v56(a2, a3, v57, 3, (unsigned __int16)(v58 + 1), v40, &v115);
          if (v40 != a9)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v40);
          goto LABEL_59;
        }
        goto LABEL_61;
      }
      v51 = *(uint64_t (**)(_QWORD, _QWORD, char *, char *, char *, _QWORD, _QWORD, _QWORD))(*((_QWORD *)a1 + 121) + 64);
      v52 = cstdlib_strlen(a9);
      if ((v51(*((_QWORD *)a1 + 119), *((_QWORD *)a1 + 120), __s, a9, v40, 0, 0, (4 * v52 + 4)) & 0x80000000) == 0)
        goto LABEL_56;
    }
    else if (!cstdlib_strcmp(__s, __s2))
    {
      goto LABEL_54;
    }
LABEL_61:
    v102 = cstdlib_strlen("§");
    v110 = v117;
    v59 = cstdlib_strstr((char *)&a11[HIWORD(v115)], "§");
    if (v59 == &a11[HIWORD(v115)])
    {
      cstdlib_strcpy(v40, __dst);
      v28 = 0;
    }
    else
    {
      v60 = v59;
      if (v59)
      {
        v61 = (char *)a11;
        while (1)
        {
          if (v60 - v61 >= v110 || v60 == &v61[HIWORD(v115)])
            goto LABEL_99;
          if (v60 <= v61)
          {
            v100 = (_WORD)v60 - (_WORD)v61;
            v64 = v102;
          }
          else
          {
            v63 = v102 - (_WORD)a11 + (_WORD)v60;
            v64 = v102;
            v65 = v60;
            while (1)
            {
              v66 = *--v65;
              if (v66 != 32)
                break;
              ++v64;
              v60 = v65;
              if (v65 <= v61)
              {
                v64 = v63;
                v60 = v61;
                break;
              }
            }
            v100 = (_WORD)v60 - (_WORD)v61;
          }
          v110 -= v64;
          v67 = cstdlib_strlen(&v60[v64]);
          cstdlib_memmove(v60, &v60[v64], v67 + 1);
          v68 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, const char *, int *))(*((_QWORD *)a1 + 9) + 160);
          v69 = cstdlib_strlen(a11);
          v31 = v68(a2, a3, v106, 0, (unsigned __int16)(v69 + 1), a11, &v115);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, *a5, 2, 1, &v110, &v115);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v108 = 0;
          v109 = *a5;
          v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*((_QWORD *)a1 + 9) + 120))(a2, a3);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v70 = v109;
          if (v109)
            break;
LABEL_98:
          v60 = cstdlib_strstr((char *)&a11[HIWORD(v115)], "§");
          v61 = (char *)a11;
          v21 = v105;
          if (!v60)
            goto LABEL_99;
        }
        v101 = v64;
        v71 = v64 + v100;
        while (1)
        {
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*((_QWORD *)a1 + 9) + 168))(a2, a3, v70, 1, 1, (char *)&v108 + 2, &v116);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*((_QWORD *)a1 + 9) + 168))(a2, a3, v109, 2, 1, &v108, &v116);
          if ((v31 & 0x80000000) != 0)
            return v31;
          v72 = v100 <= HIWORD(v108) && v71 >= HIWORD(v108);
          if (v72 && v100 <= (unsigned __int16)v108 && v71 >= (unsigned __int16)v108)
          {
            v73 = v109;
            v74 = v109;
          }
          else
          {
            v73 = v109;
            if (v71 <= HIWORD(v108))
            {
              HIWORD(v108) -= v101;
              LOWORD(v108) = v108 - v101;
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, v109, 1, 1, (char *)&v108 + 2, &v115);
              if ((v31 & 0x80000000) != 0)
                return v31;
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, v109, 2, 1, &v108, &v115);
              if ((v31 & 0x80000000) != 0)
                return v31;
              v74 = 0;
              v73 = v109;
            }
            else
            {
              v74 = 0;
            }
          }
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*((_QWORD *)a1 + 9) + 120))(a2, a3, v73, &v109);
          if ((v31 & 0x80000000) != 0)
            return v31;
          if ((_DWORD)v74)
          {
            v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((_QWORD *)a1 + 9) + 192))(a2, a3, v74);
            if ((v31 & 0x80000000) != 0)
              return v31;
          }
          v70 = v109;
          if (!v109)
            goto LABEL_98;
        }
      }
LABEL_99:
      v75 = v110;
      v76 = v117;
      v77 = v117 - v110;
      if (v117 > v110 && a14)
      {
        v79 = (int *)(a13 + 16);
        for (i = a14; i; --i)
        {
          v80 = *(v79 - 1);
          if (v80 <= v75)
          {
            v85 = *v79;
            if (!*v79)
              goto LABEL_116;
            v86 = v85 + v80;
            if (v75 >= v86)
              goto LABEL_116;
            v87 = (unsigned __int16)(v86 - v75);
            if (v87 >= v77)
              v87 = v77;
            v84 = v85 - v87;
          }
          else
          {
            v81 = (unsigned __int16)(v80 - v75);
            v82 = *v79;
            v83 = v76 - (unsigned __int16)v80;
            if (v76 < (unsigned __int16)v80)
              v83 = 0;
            if (!v82)
              v83 = 0;
            if (v81 >= v77)
              v81 = v77;
            *(v79 - 1) = v80 - v81;
            v84 = v82 - v83;
          }
          *v79 = v84;
LABEL_116:
          v79 += 8;
        }
      }
      v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(*((_QWORD *)a1 + 9) + 160);
      v89 = *a5;
      v90 = cstdlib_strlen("normal");
      v28 = v88(a2, a3, v89, 4, (unsigned __int16)(v90 + 1), "normal", &v115);
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v40);
      if ((v28 & 0x80000000) != 0)
        goto LABEL_134;
      v40 = 0;
    }
LABEL_32:
    if (v40)
      goto LABEL_57;
LABEL_59:
    if ((v28 & 0x80000000) != 0)
      goto LABEL_134;
    v29 = 0;
    a8 = v104;
LABEL_9:
    if (HIWORD(v115) == v117)
      return v28;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*((_QWORD *)a1 + 9) + 120))(a2, a3, *a5, a5);
    v30 = (int)v28 >= 0 ? v29 : 0;
    if ((v30 & 1) == 0)
      return v28;
    v23 = *a5;
  }
  while (*a5);
  if (HIWORD(v115) != a6)
    return v28;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*((_QWORD *)a1 + 9) + 80))(a2, a3, v21, a5);
  if ((v31 & 0x80000000) != 0)
    return v31;
  v114 = 5;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, *a5, 0, 1, &v114, &v115);
  v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((v28 & 0x80000000) != 0)
    goto LABEL_135;
  log_OutText(v32, (uint64_t)"FE_INITLINGDB", 5, 0, (uint64_t)"Creating token %u %u in lingdb", v25, v26, v27, HIWORD(v115));
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*((_QWORD *)a1 + 9)
                                                                                             + 160))(a2, a3, *a5, 1, 1, (char *)&v115 + 2, &v115);
  if ((v33 & 0x80000000) != 0
    || (v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*((_QWORD *)a1 + 9) + 160))(a2, a3, *a5, 2, 1, &v117, &v115), (v33 & 0x80000000) != 0))
  {
LABEL_133:
    v28 = v33;
    goto LABEL_134;
  }
  v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(*((_QWORD *)a1 + 9)
                                                                                                  + 160);
  v95 = *a5;
  v96 = cstdlib_strlen(a8);
  v28 = v94(a2, a3, v95, 4, (unsigned __int16)(v96 + 1), a8, &v115);
  if ((v28 & 0x80000000) != 0)
  {
LABEL_134:
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 32);
LABEL_135:
    v97 = 30002;
LABEL_136:
    log_OutPublic(v32, (uint64_t)"FE_INITLINGDB", v97, 0, v24, v25, v26, v27, v99);
  }
  return v28;
}

uint64_t hlp_LogUnsupportedTNType(uint64_t a1, char *__s)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t result;
  int v8;
  char *__s1;

  __s1 = 0;
  v4 = cstdlib_strlen(__s);
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"domainmngrtntypes", &__s1) & 0x80000000) != 0
    || !__s1
    || !*__s1
    || (v5 = cstdlib_strstr(__s1, __s)) == 0
    || (v6 = v5, v5 != __s1) && *(v5 - 1) != 124
    || (result = 0, (v8 = v6[v4]) != 0) && v8 != 124)
  {
    if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"extraesctn", &__s1) & 0x80000000) != 0)
      return 1;
    if (!__s1)
      return 1;
    result = cstdlib_strcmp(__s1, __s);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t hlp_FindBestTNType(uint64_t a1, char *a2, int a3, char *__s1, const char **a5, int a6)
{
  uint64_t result;
  char *v13;
  unsigned __int8 v14;
  char *v15;
  char *v16;

  *a5 = __s1;
  result = cstdlib_strcmp(__s1, "internal-nuance-system-norm");
  if ((_DWORD)result)
  {
    while (1)
    {
      v13 = cstdlib_strstr(a2, *a5);
      if (v13)
      {
        v14 = v13[cstdlib_strlen(*a5)];
        if (a3 == v14)
          return 0;
        result = 0;
        if (!v14 || v14 == 124)
          return result;
      }
      v15 = cstdlib_strrchr((char *)*a5, 58);
      v16 = (char *)*a5;
      if (!v15)
        break;
      if (v16 == __s1)
      {
        *a5 = 0;
        result = hlp_CopyString(a1, (uint64_t *)a5, __s1, a6);
        if ((result & 0x80000000) != 0)
          return result;
        v15 = cstdlib_strrchr((char *)*a5, 58);
        if (!v15)
          continue;
      }
      *v15 = 0;
    }
    if (v16 != __s1)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v16);
    *a5 = 0;
    return 2307923968;
  }
  return result;
}

uint64_t hlp_ReplacePauseZeroWithNluBndNo_And_WriteMarkersToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned __int16 *a7)
{
  unsigned __int16 *v7;
  unsigned __int16 v13;
  unsigned __int16 v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int *v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  _DWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  int v59;
  __int16 v60;

  v7 = a7;
  v60 = 0;
  v13 = *a7;
  if (!*a7)
    goto LABEL_36;
  v14 = 0;
  v15 = (_DWORD *)*a6;
  v16 = *a7;
  v17 = (_DWORD *)*a6;
  do
  {
    v18 = *v17;
    v17 += 8;
    if (v18 == 8 && v15[6] == 1)
      ++v14;
    v15 = v17;
    --v16;
  }
  while (v16);
  if (v14)
  {
    v56 = a2;
    v19 = 2307923978;
    v20 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, v14);
    if (!v20)
      goto LABEL_48;
    v21 = v20;
    v13 = *v7;
    if (*v7)
    {
      v53 = a3;
      v54 = a4;
      v55 = a5;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = -1;
      v57 = v20;
      v58 = v7;
      while (1)
      {
        v26 = *a6;
        v27 = (_DWORD *)(*a6 + 32 * v22);
        if (*v27 == 1)
        {
          v25 = v22;
        }
        else if ((v25 & 0x80000000) == 0 && *v27 == 8 && *(_DWORD *)(v26 + 32 * v22 + 24) == 1)
        {
          v59 = v23;
          v28 = v25;
          v29 = v26 + 32 * v25;
          v30 = *(_DWORD *)(v29 + 12);
          v31 = v25;
          if (v13)
          {
            v32 = 0;
            v33 = (int *)*a6;
            v31 = v25;
            do
            {
              v34 = v33[3];
              v35 = v34 == v30;
              if (v34 > v30)
                break;
              v37 = *v33;
              v33 += 8;
              v36 = v37;
              v38 = v35 && v36 == 51;
              ++v32;
              if (v38)
                v31 = v32;
            }
            while (v13 != v32);
            v28 = v31;
          }
          v39 = *(_DWORD *)(v29 + 4);
          if (v22 == v28)
          {
            v7 = v58;
          }
          else
          {
            if (v22 + 1 == v13)
            {
              v40 = v58;
            }
            else
            {
              cstdlib_memmove(v27, (const void *)(v26 + 32 * (v22 + 1)), 32 * (v13 + ~v24));
              v40 = v58;
              v13 = *v58;
              v26 = *a6;
            }
            v41 = v13 - 1;
            *v40 = v41;
            cstdlib_memmove((void *)(v26 + 32 * (int)(v31 + 1)), (const void *)(v26 + 32 * v28), 32 * (v41 - v31));
            ++*v40;
            v26 = *a6;
            v7 = v40;
          }
          v42 = (_DWORD *)(v26 + 32 * v28);
          *v42 = 51;
          v42[1] = v39;
          v42[2] = 0;
          v42[3] = v30;
          v42[4] = 0;
          v43 = *(_QWORD *)(a1 + 8);
          v44 = cstdlib_strlen("BND:N");
          *(_QWORD *)(*a6 + 32 * v28 + 24) = heap_Alloc(v43, v44 + 1);
          v45 = *(_QWORD *)(*a6 + 32 * v28 + 24);
          if (!v45)
          {
            v19 = 2307923978;
            LOWORD(v23) = v59;
            v21 = v57;
            goto LABEL_42;
          }
          v21 = v57;
          *(_QWORD *)(v57 + 8 * (unsigned __int16)v59) = v45;
          cstdlib_strcpy(*(char **)(*a6 + 32 * v28 + 24), "BND:N");
          v13 = *v7;
          v23 = v59 + 1;
        }
        ++v22;
        ++v24;
        if (v22 >= v13)
        {
          a5 = v55;
          a3 = v53;
          a4 = v54;
          goto LABEL_38;
        }
      }
    }
    LOWORD(v23) = 0;
LABEL_38:
    a2 = v56;
  }
  else
  {
LABEL_36:
    LOWORD(v23) = 0;
    v21 = 0;
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 160))(a3, a4, a5, 1, v13, *a6, &v60);
  if ((v19 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_INITLINGDB", 30002, 0, v46, v47, v48, v49, v53);
  if (v21)
  {
LABEL_42:
    if ((_WORD)v23)
    {
      v50 = (unsigned __int16)v23;
      v51 = (uint64_t *)v21;
      do
      {
        if (*v51)
          heap_Free(*(_QWORD **)(a1 + 8), *v51);
        ++v51;
        --v50;
      }
      while (v50);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v21);
  }
LABEL_48:
  heap_Free(*(_QWORD **)(a1 + 8), *a6);
  *a6 = 0;
  *v7 = 0;
  return v19;
}

uint64_t fe_initlingdb_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62336, 976) & 0x80000000) != 0)
    return 2307923976;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
}

uint64_t fe_initlingdb_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2307923969;
  result = 0;
  *a2 = &IFeInitlingdb;
  return result;
}

unint64_t hlp_GetPhonSrcAndLanguageOfOriginFromPhonWithMetaData(char *a1, char *__dst, _BYTE *a3)
{
  unint64_t result;
  const char *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t i;

  cstdlib_strcpy(__dst, "EXTMRKP");
  *a3 = 0;
  result = (unint64_t)cstdlib_strstr(a1, "\x14");
  if (result)
  {
    v7 = (const char *)(result + 1);
    result = (unint64_t)cstdlib_strstr((char *)(result + 1), "\x14");
    v8 = result;
    if (result)
    {
      v9 = result - (_QWORD)v7;
    }
    else
    {
      result = cstdlib_strlen(v7);
      v9 = result;
    }
    if (v9 <= 9)
    {
      result = (unint64_t)cstdlib_strncpy(__dst, v7, v9);
      __dst[v9] = 0;
    }
    if (v8)
    {
      v10 = v8 + 1;
      if (cstdlib_strlen((const char *)(v8 + 1)) == 3
        || (result = cstdlib_strlen((const char *)(v8 + 1)), result >= 4)
        && (result = cstdlib_strcmp((const char *)(v8 + 4), "\x14"), !(_DWORD)result))
      {
        for (i = 0; i != 3; ++i)
        {
          result = ssft_tolower(*(unsigned __int8 *)(v10 + i));
          a3[i] = result;
        }
        a3[3] = 0;
      }
    }
  }
  return result;
}

char *hlp_GetLowerCasedLng3FromLangTag(uint64_t a1, char *a2, char *__dst)
{
  char *result;
  uint64_t v7;
  int v8;
  const char *v9;

  if (!*a2 || !LH_stricmp(a2, "normal"))
  {
    v9 = (const char *)(a1 + 948);
    return cstdlib_strcpy(__dst, v9);
  }
  if (cstdlib_strlen(a2) != 3)
  {
    v9 = "";
    return cstdlib_strcpy(__dst, v9);
  }
  cstdlib_strcpy(__dst, a2);
  result = (char *)cstdlib_strlen(__dst);
  if (result)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      __dst[v7] = ssft_tolower(__dst[v7]);
      v7 = ++v8;
      result = (char *)cstdlib_strlen(__dst);
    }
    while ((unint64_t)result > v8);
  }
  return result;
}

BOOL hlp_checkDoClmInCurrentComponent(_QWORD *a1)
{
  _BOOL8 result;
  int v3;
  char *__s1;

  __s1 = 0;
  v3 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, int *))(a1[121] + 96))(a1[119], a1[120], &v3) & 0x80000000) != 0)
    return (paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clm", &__s1) & 0x80000000) != 0
        || !__s1
        || !cstdlib_strcmp(__s1, "yes");
  result = 0;
  if (!v3)
    return (paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"clm", &__s1) & 0x80000000) != 0
        || !__s1
        || !cstdlib_strcmp(__s1, "yes");
  return result;
}

uint64_t hlp_checkDoClmForLng3(const char *a1, char *__s1)
{
  uint64_t result;
  char *v5;
  int Str;
  char *__s1a;
  char __dst[10];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  __s1a = 0;
  result = cstdlib_strcmp(__s1, a1 + 948);
  if ((_DWORD)result)
  {
    cstdlib_strcpy(__dst, "clm");
    cstdlib_strcat(__dst, __s1);
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)__dst, &__s1a) & 0x80000000) != 0
      || (v5 = __s1a) == 0)
    {
      __s1a = 0;
      Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"noclmset", &__s1a);
      v5 = __s1a;
      if (Str < 0 || !__s1a)
      {
        if (!__s1a)
          return 1;
      }
      else
      {
        if (cstdlib_strstr(__s1a, __s1))
          v5 = "no";
        else
          v5 = "yes";
        __s1a = v5;
      }
    }
    return cstdlib_strcmp(v5, "yes") == 0;
  }
  return result;
}

uint64_t fe_initlingdb_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2307923975;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_initlingdb_ClassClose()
{
  return 0;
}

uint64_t CLM_InitFromCLMv2Lua(uint64_t a1, const char *a2)
{
  int Allocator;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  const char *v27;
  uint64_t i;
  const char *v29;
  char *v30;
  char *v31;
  unsigned __int16 j;
  char *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned __int16 v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  int v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  char __s[8];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v49 = 0;
  Allocator = ooc_utils_createAllocator((uint64_t)v50, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
  v5 = LH_ERROR_to_VERROR(Allocator);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_35;
  v6 = luavmldoutil_initialize_lua_vm(*(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v50, (uint64_t)"getForeignLangSupportForCLMv2", (uint64_t)hlp_lua_log_callback_2, &v49, "clm");
  v7 = 0;
  v8 = v49;
  if ((v6 & 0x80000000) == 0 && v49)
  {
    *(_DWORD *)(a1 + 200) = 0;
    v9 = LuaVMLDO_RunFunctionReturningString(v8, (uint64_t)"getForeignLangSupportForCLMv2", (uint64_t)a2, 0x400u, __s);
    v5 = LH_ERROR_to_VERROR(v9);
    if ((v5 & 0x80000000) == 0)
    {
      if (cstdlib_strlen(__s)
        || (v47 = LuaVMLDO_RunFunctionReturningString(v8, (uint64_t)"getFeClmSupportedLanguages", (uint64_t)"all", 0x400u, __s), (LH_ERROR_to_VERROR(v47) & 0x80000000) == 0)&& cstdlib_strstr(__s, a2))
      {
        *(_DWORD *)(a1 + 200) = 1;
      }
      v10 = v49;
      *(_QWORD *)__s = 0;
      v11 = PNEW_LDOObject_Con((uint64_t)v50, (uint64_t)v50, (uint64_t *)__s);
      v12 = LH_ERROR_to_VERROR(v11);
      if ((v12 & 0x80000000) != 0)
      {
        v7 = v12;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"Error creating LDOObject", v13, v14, v15, v48);
      }
      else
      {
        v16 = LuaVMLDO_RunFunctionWithStringArgumentReturningTableWithStrings(v10, (uint64_t)"getLoanPhonemeSupport", (uint64_t)a2, *(uint64_t *)__s);
        v17 = LH_ERROR_to_VERROR(v16);
        if ((v17 & 0x80000000) != 0)
        {
          v7 = 0;
        }
        else
        {
          v7 = v17;
          v19 = *(uint64_t **)(*(_QWORD *)__s + 32);
          v18 = *(_QWORD *)(*(_QWORD *)__s + 40);
          *(_WORD *)(a1 + 204) = (v18 - (unint64_t)v19) >> 5;
          if (((v18 - (_QWORD)v19) & 0x1FFFE0) != 0)
          {
            v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (unsigned __int16)((v18 - (unint64_t)v19) >> 5), 16);
            *(_QWORD *)(a1 + 208) = v20;
            if (v20)
            {
              if ((unint64_t)v19 < v18)
              {
                v25 = 0;
                v48 = v18;
                while (1)
                {
                  v26 = v19[3];
                  v27 = (const char *)LHString_BorrowCPtr(*v19);
                  if (cstdlib_strlen(v27) != 3)
                    goto LABEL_49;
                  for (i = 0; i != 3; ++i)
                    *(_BYTE *)(*(_QWORD *)(a1 + 208) + 16 * v25 + i) = cstdlib_tolower(v27[i]);
                  v29 = (const char *)LHString_BorrowCPtr(v26);
                  if (!v29 || (v30 = (char *)v29, !cstdlib_strlen(v29)))
                  {
LABEL_49:
                    v7 = 2347769856;
                    goto LABEL_51;
                  }
                  v31 = cstdlib_strstr(v30, "||");
                  for (j = 1; v31; ++j)
                  {
                    v34 = v31[2];
                    v33 = v31 + 2;
                    if (!v34)
                      break;
                    v31 = cstdlib_strstr(v33, "||");
                  }
                  *(_WORD *)(*(_QWORD *)(a1 + 208) + 16 * v25 + 4) = j;
                  v35 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), j, 24);
                  *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16 * v25 + 8) = v35;
                  if (!v35)
                    goto LABEL_50;
                  v36 = cstdlib_strstr(v30, "|");
                  if (v36)
                    break;
LABEL_33:
                  ++v25;
                  v19 += 4;
                  if ((unint64_t)v19 >= v48)
                    goto LABEL_51;
                }
                v37 = v36;
                v38 = 0;
                while (1)
                {
                  v39 = v38;
                  v40 = hlp_AllocAndCopy(*(_QWORD *)(a1 + 24), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16 * v25 + 8) + 24 * v38), v30, (uint64_t)v37);
                  if ((v40 & 0x80000000) != 0)
                    break;
                  v41 = cstdlib_strstr(v37 + 1, "|");
                  if (!v41)
                    goto LABEL_32;
                  v42 = v41;
                  v40 = hlp_AllocAndCopy(*(_QWORD *)(a1 + 24), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16 * v25 + 8) + 24 * v39 + 8), v37 + 1, (uint64_t)v41);
                  if ((v40 & 0x80000000) != 0)
                    break;
                  v43 = v42 + 1;
                  v44 = cstdlib_strstr(v43, "|");
                  if (!v44)
                    v44 = &v43[cstdlib_strlen(v43)];
                  v40 = hlp_AllocAndCopy(*(_QWORD *)(a1 + 24), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16 * v25 + 8) + 24 * v39 + 16), v43, (uint64_t)v44);
                  if ((v40 & 0x80000000) != 0)
                    break;
                  v45 = cstdlib_strstr(v43, "||");
                  if (v45)
                  {
                    v30 = v45 + 2;
                    v37 = cstdlib_strstr(v45 + 2, "|");
                    v38 = v39 + 1;
                    if (v37)
                      continue;
                  }
LABEL_32:
                  v7 = 0;
                  goto LABEL_33;
                }
                v7 = v40;
              }
            }
            else
            {
LABEL_50:
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v21, v22, v23, v24, v48);
              v7 = 2347769866;
            }
          }
        }
      }
LABEL_51:
      if (*(_QWORD *)__s)
        OOC_PlacementDeleteObject((uint64_t)v50, *(uint64_t *)__s);
      goto LABEL_36;
    }
LABEL_35:
    v7 = v5;
LABEL_36:
    v8 = v49;
  }
  if (v8)
    luavmldoutil_destroy_lua_vm((uint64_t)v50, &v49);
  OOCAllocator_Des();
  if ((v7 & 0x80000000) != 0)
    CLM_DeInitFromCLMv2Lua((_QWORD *)a1);
  return v7;
}

uint64_t hlp_lua_log_callback_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"CLM", 4, 0, a2, a6, a7, a8, 0);
}

_QWORD *CLM_DeInitFromCLMv2Lua(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = result;
  *((_DWORD *)result + 50) = 0;
  v2 = result[26];
  if (v2)
  {
    v3 = *((unsigned __int16 *)result + 102);
    if (*((_WORD *)result + 102))
    {
      v4 = 0;
      do
      {
        v5 = v2 + 16 * v4;
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (*(_WORD *)(v5 + 4))
          {
            v7 = 0;
            v8 = 0;
            do
            {
              v9 = *(_QWORD *)(v2 + 16 * v4 + 8);
              v10 = *(_QWORD *)(v9 + v7);
              if (v10)
              {
                heap_Free(*(_QWORD **)(v1[3] + 8), v10);
                v2 = v1[26];
                v9 = *(_QWORD *)(v2 + 16 * v4 + 8);
                *(_QWORD *)(v9 + v7) = 0;
              }
              v11 = *(_QWORD *)(v9 + v7 + 8);
              if (v11)
              {
                heap_Free(*(_QWORD **)(v1[3] + 8), v11);
                v2 = v1[26];
                v9 = *(_QWORD *)(v2 + 16 * v4 + 8);
                *(_QWORD *)(v9 + v7 + 8) = 0;
              }
              v12 = *(_QWORD *)(v9 + v7 + 16);
              if (v12)
              {
                heap_Free(*(_QWORD **)(v1[3] + 8), v12);
                v2 = v1[26];
                *(_QWORD *)(*(_QWORD *)(v2 + 16 * v4 + 8) + v7 + 16) = 0;
              }
              ++v8;
              v13 = v2 + 16 * v4;
              v7 += 24;
            }
            while (v8 < *(unsigned __int16 *)(v13 + 4));
            v6 = *(_QWORD *)(v13 + 8);
          }
          heap_Free(*(_QWORD **)(v1[3] + 8), v6);
          v2 = v1[26];
          *(_QWORD *)(v2 + 16 * v4 + 8) = 0;
          v3 = *((unsigned __int16 *)v1 + 102);
        }
        ++v4;
      }
      while (v4 < v3);
    }
    result = heap_Free(*(_QWORD **)(v1[3] + 8), v2);
    v1[26] = 0;
  }
  *((_WORD *)v1 + 102) = 0;
  return result;
}

uint64_t hlp_AllocAndCopy(uint64_t a1, char **a2, char *__s, uint64_t a4)
{
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  if (a4)
    v7 = a4 - (_QWORD)__s;
  else
    v7 = cstdlib_strlen(__s);
  v8 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v7 + 1, 1);
  *a2 = v8;
  if (v8)
  {
    cstdlib_strncpy(v8, __s, v7);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"CLM", 50000, 0, v9, v10, v11, v12, v14);
    return 2347769866;
  }
}

uint64_t CLM_AlignPhonlists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int CountStrings;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  const char *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t __b;
  uint64_t v49;
  unsigned __int16 v50;

  __b = 0;
  v49 = 0;
  cstdlib_memset(&__b, 0, 0x10uLL);
  if (!a3
    || !a4
    || (CountStrings = StringList_GetCountStrings(a3), v9 = StringList_GetCountStrings(a4), a2)
    && StringList_GetCountStrings(a2) != CountStrings)
  {
    v14 = 2347769856;
    goto LABEL_21;
  }
  v10 = StringList_GetCountStrings(a3);
  v11 = StringList_GetCountStrings(a4);
  v12 = v11;
  if (CountStrings && v9)
  {
    v46 = a4;
    v13 = 0;
    if (v10)
    {
      v14 = 0;
      v47 = a2;
      while (v13 < (unsigned __int16)v12)
      {
        v15 = (const char *)StringList_GetAt(a3, v13);
        if (cstdlib_strcmp(v15, "*"))
        {
          v16 = (const char *)StringList_GetAt(a3, v13);
          a2 = v47;
          v17 = (const char *)StringList_GetAt(a4, v13);
          if (cstdlib_strcmp(v16, v17))
            break;
        }
        else
        {
          v18 = StringList_InsertAt(a4, v13, "*");
          if (v18)
          {
            v14 = LH_ERROR_to_VERROR(v18);
            if ((v14 & 0x80000000) != 0)
              goto LABEL_21;
          }
          else
          {
            v14 = 0;
          }
          LOWORD(v12) = v12 + 1;
        }
        if (v10 <= ++v13)
        {
          v13 = v10;
          goto LABEL_66;
        }
      }
      if (v10 > v13)
      {
        while (1)
        {
          v32 = v12;
          v33 = v10;
          if ((unsigned __int16)v12 <= v13)
            break;
          LOWORD(v10) = v10 - 1;
          v34 = (const char *)StringList_GetAt(a3, (unsigned __int16)(v33 - 1));
          if (cstdlib_strcmp(v34, "*"))
          {
            v35 = (const char *)StringList_GetAt(a3, (unsigned __int16)(v33 - 1));
            LOWORD(v12) = v12 - 1;
            v36 = (const char *)StringList_GetAt(v46, (unsigned __int16)(v32 - 1));
            v37 = cstdlib_strcmp(v35, v36);
            a2 = v47;
            if (v37)
              break;
          }
          else
          {
            v38 = StringList_InsertAt(v46, (unsigned __int16)v12, "*");
            if (v38)
            {
              v14 = LH_ERROR_to_VERROR(v38);
              a2 = v47;
              if ((v14 & 0x80000000) != 0)
                goto LABEL_21;
            }
            else
            {
              v14 = 0;
              a2 = v47;
            }
          }
          if ((unsigned __int16)v10 <= v13)
            goto LABEL_66;
        }
        LOWORD(v10) = v33;
        LOWORD(v12) = v32;
      }
LABEL_66:
      v28 = v14;
    }
    else
    {
      v28 = 0;
    }
    v39 = StringList_GetCountStrings(a3) - (unsigned __int16)v10;
    v14 = 2347769856;
    if (v39 == StringList_GetCountStrings(v46) - (unsigned __int16)v12)
    {
      if ((v28 & 0x80000000) != 0)
      {
        v14 = v28;
      }
      else if (v13 != (unsigned __int16)v10 || (v14 = v28, v13 != (unsigned __int16)v12))
      {
        v50 = 0;
        v40 = hlp_RecursiveAddBestAnchorsForSublist(a1, a3, v13, (unsigned __int16)v10, v46, v13, (unsigned __int16)v12, (unsigned __int16 *)&__b, &v50);
        if ((v40 & 0x80000000) != 0)
        {
          v14 = v40;
        }
        else
        {
          if (v50 == 0xFFFF)
            v41 = 0;
          else
            v41 = __b + 16 * v50;
          v42 = hlp_Align(a2, a3, v46, (unsigned __int16)v10, (unsigned __int16)v12, v41);
          v43 = v42;
          if ((v42 & 0x80000000) != 0)
          {
            v14 = v42;
          }
          else
          {
            v44 = StringList_GetCountStrings(a3);
            v45 = StringList_GetCountStrings(v46);
            if (v44 == v45)
              v14 = v43;
            else
              v14 = 2347769856;
            if (a2 && v44 == v45)
            {
              if (StringList_GetCountStrings(a2) == v44)
                v14 = v43;
              else
                v14 = 2347769856;
            }
          }
        }
      }
    }
    goto LABEL_21;
  }
  if (!v10)
  {
    if (!v11)
      goto LABEL_53;
    v29 = 0;
    while (1)
    {
      v30 = StringList_Append(a3, "*");
      if (v30)
      {
        v14 = LH_ERROR_to_VERROR(v30);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_21;
        if (a2)
        {
LABEL_47:
          v31 = StringList_Append(a2, "*");
          if (v31)
          {
            v14 = LH_ERROR_to_VERROR(v31);
            if ((v14 & 0x80000000) != 0)
              goto LABEL_21;
          }
          else
          {
            v14 = 0;
          }
        }
      }
      else
      {
        v14 = 0;
        if (a2)
          goto LABEL_47;
      }
      if (v12 <= (unsigned __int16)++v29)
        goto LABEL_21;
    }
  }
  if (v11)
  {
LABEL_53:
    v14 = 0;
    goto LABEL_21;
  }
  v25 = a4;
  v26 = 0;
  do
  {
    v27 = StringList_Append(v25, "*");
    if (v27)
    {
      v14 = LH_ERROR_to_VERROR(v27);
      if ((v14 & 0x80000000) != 0)
        break;
    }
    else
    {
      v14 = 0;
    }
    ++v26;
  }
  while (v10 > (unsigned __int16)v26);
LABEL_21:
  v19 = __b;
  if (__b)
  {
    v20 = (unsigned __int16)v49;
    if ((_WORD)v49)
    {
      v21 = 0;
      v22 = 8;
      do
      {
        v23 = *(_QWORD *)(__b + v22);
        if (v23)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v23);
          v20 = (unsigned __int16)v49;
        }
        ++v21;
        v22 += 16;
      }
      while (v21 < v20);
      v19 = __b;
    }
    heap_Free(*(_QWORD **)(a1 + 8), v19);
  }
  return v14;
}

uint64_t hlp_RecursiveAddBestAnchorsForSublist(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned __int16 *a8, _WORD *a9)
{
  uint64_t v10;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 v18;
  unsigned __int16 v19;
  const char *v20;
  const char *v21;
  unsigned __int16 v22;
  uint64_t appended;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int16 *v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  int v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned __int16 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v64;
  int v67;
  uint64_t *v68;

  v10 = 0;
  v68 = 0;
  *a9 = -1;
  if (a3 < a4 && a6 < a7)
  {
    if (!a8 || (v15 = a8[4]) == 0)
    {
LABEL_9:
      v67 = 0;
      v68 = 0;
      v18 = a3 + 1;
      v19 = a6;
      do
      {
        v20 = (const char *)StringList_GetAt(a2, a3);
        v21 = (const char *)StringList_GetAt(a5, v19);
        v22 = v19 + 1;
        if (!cstdlib_strcmp(v20, v21))
        {
          appended = hlp_RecursiveAddBestAnchorsForSublist(a1, a2, v18, a4, a5, (unsigned __int16)(v19 + 1), a7, a8, &v67);
          if ((appended & 0x80000000) != 0)
            goto LABEL_20;
          v24 = (unsigned __int16)v67 == 0xFFFFLL ? 0 : *(_QWORD *)a8 + 16 * (unsigned __int16)v67;
          appended = hlp_AppendCombinedResult(a1, a3, v19, v24, (uint64_t *)&v68, (unsigned __int16 *)&v67 + 1);
          if ((appended & 0x80000000) != 0)
            goto LABEL_20;
        }
        ++v19;
      }
      while (a7 > v22);
      v25 = a8;
      appended = hlp_RecursiveAddBestAnchorsForSublist(a1, a2, v18, a4, a5, a6, a7, a8, &v67);
      if ((appended & 0x80000000) != 0)
      {
LABEL_20:
        v10 = appended;
        goto LABEL_60;
      }
      if ((unsigned __int16)v67 == 0xFFFFLL)
        v26 = 0;
      else
        v26 = *(_QWORD *)a8 + 16 * (unsigned __int16)v67;
      v27 = hlp_AppendCombinedResult(a1, 65534, 65534, v26, (uint64_t *)&v68, (unsigned __int16 *)&v67 + 1);
      if ((v27 & 0x80000000) == 0)
      {
        v28 = v68;
        if (v68 && (v29 = (unsigned __int16 *)*v68) != 0)
        {
          v30 = 0;
          v31 = 0;
          v32 = -1;
          v33 = -1;
          do
          {
            v34 = 0;
            do
            {
              v35 = v34;
              v36 = (__int16)v29[2 * (unsigned __int16)v34++];
            }
            while (v36 != -1);
            if (v35 <= v31)
            {
              if (v35 && v35 == v31)
              {
                v41 = *v29;
                if (v41 == 0xFFFF)
                {
                  v44 = 0;
                }
                else
                {
                  v42 = 0;
                  v43 = 0;
                  v44 = 0;
                  do
                  {
                    v45 = v41 - v29[2 * v42 + 1];
                    v44 += v45 * v45;
                    v42 = (unsigned __int16)++v43;
                    v41 = v29[2 * (unsigned __int16)v43];
                  }
                  while (v41 != 0xFFFF);
                }
                if (v44 < v33)
                {
                  v32 = v30;
                  v33 = v44;
                }
              }
            }
            else
            {
              v37 = *v29;
              if (v37 == 0xFFFF)
              {
                v33 = 0;
              }
              else
              {
                v38 = 0;
                v39 = 0;
                v33 = 0;
                do
                {
                  v40 = v37 - v29[2 * v38 + 1];
                  v33 += v40 * v40;
                  v38 = (unsigned __int16)++v39;
                  v37 = v29[2 * (unsigned __int16)v39];
                }
                while (v37 != 0xFFFF);
              }
              v32 = v30;
              v31 = v35;
            }
            v29 = (unsigned __int16 *)v68[++v30];
          }
          while (v29);
        }
        else
        {
          v32 = -1;
        }
        v46 = v25[4];
        if ((_DWORD)v46 == v25[5])
        {
          v10 = 2347769856;
          if (v46 > 0xFFFC)
            goto LABEL_60;
          v47 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)v25, 16 * v46 + 32);
          *(_QWORD *)v25 = v47;
          if (!v47)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"CLM", 50000, 0, v48, v49, v50, v51, v64);
            v10 = 2347769866;
            goto LABEL_60;
          }
          v25[5] += 2;
          LODWORD(v46) = v25[4];
        }
        else
        {
          v47 = *(_QWORD *)v25;
        }
        v52 = (_WORD *)(v47 + 16 * v46);
        *v52 = a3;
        v52[1] = a6;
        if (v32 == 0xFFFF)
        {
          v59 = v47 + 16 * v46;
          *(_WORD *)(v59 + 4) = 0;
          *(_QWORD *)(v59 + 8) = 0;
        }
        else
        {
          v53 = 0;
          do
          {
            v54 = v53;
            v55 = (unsigned __int16)v53;
            v56 = *(__int16 *)(v28[v32] + 4 * (unsigned __int16)v53++);
          }
          while (v56 != -1);
          *(_WORD *)(v47 + 16 * v46 + 4) = v54;
          v57 = (void *)heap_Calloc(*(_QWORD **)(a1 + 8), 4, v55);
          v58 = *(_QWORD *)v25 + 16 * v25[4];
          *(_QWORD *)(v58 + 8) = v57;
          cstdlib_memmove(v57, (const void *)v28[v32], 4 * *(unsigned __int16 *)(v58 + 4));
          LOWORD(v46) = v25[4];
        }
        *a9 = v46;
        ++v25[4];
      }
      v10 = v27;
      goto LABEL_60;
    }
    v16 = (unsigned __int16 *)(*(_QWORD *)a8 + 2);
    while (*(v16 - 1) != a3 || *v16 != a6)
    {
      v16 += 8;
      if (!--v15)
        goto LABEL_9;
    }
    v10 = 0;
  }
LABEL_60:
  v60 = (uint64_t)v68;
  if (v68)
  {
    v61 = *v68;
    if (*v68)
    {
      v62 = 0;
      do
      {
        heap_Free(*(_QWORD **)(a1 + 8), v61);
        v61 = *(_QWORD *)(v60 + 8 * (unsigned __int16)++v62);
      }
      while (v61);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v60);
  }
  return v10;
}

uint64_t hlp_Align(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  unsigned int v10;
  uint64_t result;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v24;
  unsigned int v25;
  int v26;

  StringList_GetCountStrings(a2);
  StringList_GetCountStrings(a3);
  v24 = a6;
  if (a6)
    v25 = *(unsigned __int16 *)(a6 + 4);
  else
    v25 = 0;
  v10 = 0;
  result = 0;
  v12 = 0;
  v13 = 0;
  v26 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    if (v24 && v25 > v10)
    {
      v16 = (unsigned __int16 *)(*(_QWORD *)(v24 + 8) + 4 * v12);
      v17 = *v16 + v26;
      v18 = v16[1] + v13;
    }
    else
    {
      v17 = v26 + a4;
      v18 = v13 + a5;
    }
    if ((unsigned __int16)v15 < (unsigned __int16)v17)
    {
      v19 = (unsigned __int16)(v18 + ~(_WORD)v14);
      if (v19 >= (unsigned __int16)(v17 + ~(_WORD)v15))
        v19 = (unsigned __int16)(v17 + ~(_WORD)v15);
      v20 = v14 + v19;
      v21 = v15 + v19;
      if ((unsigned __int16)v14 < (unsigned __int16)v18)
      {
        v15 = v21 + 1;
        v14 = v20 + 1;
      }
    }
    if ((unsigned __int16)v15 < (unsigned __int16)v17)
      break;
LABEL_20:
    if ((unsigned __int16)v14 < (unsigned __int16)v18)
    {
      v26 = v18 + v26 - v14;
      while (1)
      {
        result = StringList_InsertAt(a2, (unsigned __int16)v15, "*");
        if ((_DWORD)result)
        {
          result = LH_ERROR_to_VERROR(result);
          if ((result & 0x80000000) != 0)
            return result;
        }
        if (a1)
        {
          result = StringList_InsertAt(a1, (unsigned __int16)v15, "*");
          if ((_DWORD)result)
          {
            result = LH_ERROR_to_VERROR(result);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
        ++v15;
        if ((unsigned __int16)++v14 >= (unsigned __int16)v18)
        {
          v14 = v18;
          break;
        }
      }
    }
    ++v15;
    ++v14;
    v10 = ++v12;
    if (v12 > v25)
      return result;
  }
  v13 = v17 + v13 - v15;
  while (1)
  {
    result = StringList_InsertAt(a3, (unsigned __int16)v14, "*");
    if ((_DWORD)result)
    {
      result = LH_ERROR_to_VERROR(result);
      if ((result & 0x80000000) != 0)
        return result;
    }
    ++v14;
    if ((unsigned __int16)++v15 >= (unsigned __int16)v17)
    {
      v15 = v17;
      goto LABEL_20;
    }
  }
}

uint64_t CLM_MergeSubsequentInsertionAndDeletions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int CountStrings;
  int v6;
  unsigned __int16 v7;
  const char *v8;
  const char *v9;
  int v10;
  unsigned __int16 v11;
  const char *v12;
  const char *v13;
  int v14;

  v4 = 2347769856;
  CountStrings = StringList_GetCountStrings(a1);
  if (CountStrings == StringList_GetCountStrings(a2))
  {
    if (StringList_GetCountStrings(a1))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = (const char *)StringList_GetAt(a1, v7);
        if (!cstdlib_strcmp(v8, "*"))
        {
          v9 = (const char *)StringList_GetAt(a2, v7);
          v10 = cstdlib_strcmp(v9, "*");
          if (v10 && v7)
          {
            v11 = v7 - 1;
            v12 = (const char *)StringList_GetAt(a2, (unsigned __int16)(v7 - 1));
            if (!cstdlib_strcmp(v12, "*"))
              goto LABEL_15;
          }
          else
          {
            v11 = v7;
            if (!v10)
              goto LABEL_15;
          }
          v11 = v6 + 1;
          if (v6 + 1 < StringList_GetCountStrings(a2))
          {
            v13 = (const char *)StringList_GetAt(a2, (unsigned __int16)(v6 + 1));
            if (!cstdlib_strcmp(v13, "*"))
            {
LABEL_15:
              StringList_RemoveAt(a1, v7);
              StringList_RemoveAt(a2, v11);
              goto LABEL_6;
            }
          }
        }
        ++v7;
LABEL_6:
        v6 = v7;
      }
      while (v7 < StringList_GetCountStrings(a1));
    }
    v14 = StringList_GetCountStrings(a1);
    if (v14 == StringList_GetCountStrings(a2))
      return 0;
    else
      return 2347769856;
  }
  return v4;
}

uint64_t CLM_PhonList_InsertAt(uint64_t a1, unsigned int a2, char *a3)
{
  uint64_t result;

  result = StringList_InsertAt(a1, a2, a3);
  if ((_DWORD)result)
    return LH_ERROR_to_VERROR(result);
  return result;
}

uint64_t CLM_PhonList_Append(uint64_t a1, char *a2)
{
  uint64_t result;

  result = StringList_Append(a1, a2);
  if ((_DWORD)result)
    return LH_ERROR_to_VERROR(result);
  return result;
}

uint64_t hlp_CalcDistOfAnchorsInResult(unsigned __int16 *a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned __int16 v4;
  __int16 v5;

  if (!a1)
    return 0;
  v1 = *a1;
  if (v1 == 0xFFFF)
  {
    return 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = v1 - a1[2 * v2 + 1];
      v4 += v5 * v5;
      v2 = (unsigned __int16)++v3;
      v1 = a1[2 * (unsigned __int16)v3];
    }
    while (v1 != 0xFFFF);
  }
  return v4;
}

uint64_t hlp_AppendCombinedResult(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t *a5, unsigned __int16 *a6)
{
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  _BOOL4 v24;
  unsigned __int16 v25;
  _WORD *v26;
  unsigned int v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v32;

  v12 = *a5;
  if (*a6)
  {
    v13 = 0;
    do
      v14 = v13;
    while (*(_QWORD *)(v12 + 8 * (unsigned __int16)v13++));
    if (*a6 - 1 != v14)
      goto LABEL_11;
  }
  else
  {
    v14 = 0;
  }
  v16 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 8 * *a6 + 16);
  *a5 = v16;
  if (v16)
  {
    v21 = *a6 + 2;
    *a6 = v21;
    if (v14 < v21)
    {
      v22 = v14;
      do
        *(_QWORD *)(*a5 + 8 * v22++) = 0;
      while (v21 != v22);
    }
LABEL_11:
    v24 = a2 != 65534 && a3 != 65534;
    v25 = v24;
    if (a4)
      v25 = *(_WORD *)(a4 + 4) + v24;
    *(_QWORD *)(*a5 + 8 * v14) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4 * v25 + 4);
    if (v24)
    {
      v26 = *(_WORD **)(*a5 + 8 * v14);
      *v26 = a2;
      v26[1] = a3;
      v27 = 1;
      if (!a4)
        goto LABEL_27;
    }
    else
    {
      v27 = 0;
      if (!a4)
      {
LABEL_27:
        result = 0;
        *(_DWORD *)(*(_QWORD *)(*a5 + 8 * v14) + 4 * (unsigned __int16)v27) = -1;
        return result;
      }
    }
    if (*(_WORD *)(a4 + 4))
    {
      v28 = 0;
      v29 = v27;
      v30 = 4 * v27;
      do
      {
        *(_DWORD *)(*(_QWORD *)(*a5 + 8 * v14) + v30 + 4 * v28) = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * v28);
        ++v28;
      }
      while (v28 < *(unsigned __int16 *)(a4 + 4));
      LOWORD(v27) = v29 + v28;
    }
    goto LABEL_27;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"CLM", 50000, 0, v17, v18, v19, v20, v32);
  return 2347769866;
}

uint64_t CLM_EnumerateLanguages(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned int v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  const char *LangRecord;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int Allocator;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _OWORD v45[2];
  uint64_t v46;
  int v47;
  int v48;
  const char *v49;
  unsigned int v50;
  char v51[200];
  _DWORD v52[100];
  char v53[400];
  uint64_t v54;

  v7 = a7;
  v54 = *MEMORY[0x24BDAC8D0];
  v50 = 0;
  v49 = 0;
  v14 = 2347769856;
  v48 = 0;
  *a3 = 0;
  if (!CLM_FindNrOfLanguages(a1, a5, a6, a7, v53, 0x64u, v52, a3))
  {
    v15 = *a3;
    if ((_DWORD)v15)
    {
      v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v15, 24);
      *a2 = v16;
      if (!v16)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v17, v18, v19, v20, v41);
        return 2347769866;
      }
      if (*a3)
      {
        v42 = a3;
        v21 = 0;
        v44 = 0;
        v43 = v7;
        while (1)
        {
          cstdlib_strcpy((char *)(v16 + 24 * v21), &v53[4 * v21]);
          if (a4 <= 1)
          {
            v22 = &v52[v21];
            *(_QWORD *)(*a2 + 24 * v21 + 16) = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *v22, 24);
            v27 = *a2 + 24 * v21;
            if (!*(_QWORD *)(v27 + 16))
            {
              v38 = 2347769866;
              v37 = 50000;
LABEL_30:
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", v37, 0, v23, v24, v25, v26, v41);
              v39 = v38;
              goto LABEL_31;
            }
            *(_DWORD *)(v27 + 8) = *v22;
          }
          v50 = v7;
          if (v52[v21])
          {
            v28 = 0;
            for (i = 0; i < v52[v21]; ++i)
            {
              LangRecord = (const char *)CLM_FindLangRecord(a5, a6, &v50, (const char *)(*a2 + 24 * v21));
              if (!LangRecord)
              {
                v37 = 50003;
                v38 = 2347769856;
                goto LABEL_30;
              }
              v31 = (char *)LangRecord;
              if (a4)
              {
                if (a4 == 1)
                {
                  v47 = 0;
                  *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28) = LangRecord;
                  *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 8) = &LangRecord[cstdlib_strlen(LangRecord) + 1];
                  if (cstdlib_strlen(*(const char **)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 8)))
                  {
                    v32 = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), *(char **)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 8), v51, 0xC8u, 0, &v47);
                    if ((v32 & 0x80000000) != 0 || v47)
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 1, 0, (uint64_t)"WARNING CLM %s to %s : invalid mapping %s %s", v33, v34, v35, *a2 + 24 * v21);
                      v32 = 0;
                      v51[0] = 0;
                    }
                    v44 = v32;
                    v46 = 0;
                    memset(v45, 0, sizeof(v45));
                    Allocator = ooc_utils_createAllocator((uint64_t)v45, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
                    if (Allocator
                      || (Allocator = PNEW_StringList_Con((uint64_t)v45, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 16))) != 0|| (Allocator = StringList_FromSplitString(*(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 16), v51, 0x20u)) != 0)
                    {
                      v44 = LH_ERROR_to_VERROR(Allocator);
                      goto LABEL_33;
                    }
                  }
                }
                else
                {
                  *(_QWORD *)(*a2 + 24 * v21 + 8) = LangRecord;
                }
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28) = LangRecord;
                *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 16) = &LangRecord[cstdlib_strlen(LangRecord) + 1];
                *(_QWORD *)(*(_QWORD *)(*a2 + 24 * v21 + 16) + v28 + 8) = nuance_pcre_compile(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v31, 0, &v49, &v48, 0);
              }
              ++v50;
              v28 += 24;
            }
          }
          v16 = *a2;
          *(_DWORD *)(*a2 + 24 * v21++ + 4) = a4;
          v7 = v43;
          if (v21 >= *v42)
          {
LABEL_33:
            v39 = v44;
            v14 = v44;
            if ((v44 & 0x80000000) == 0)
              return v14;
LABEL_31:
            v14 = v39;
            CLM_EmptyLanguageStruct((_QWORD *)a1, a2, v21);
            return v14;
          }
        }
      }
    }
    return 0;
  }
  return v14;
}

BOOL CLM_FindNrOfLanguages(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v27;
  unsigned int v28;
  char __b[4];

  v28 = 0;
  *a8 = 0;
  cstdlib_memset(__b, 0, 4uLL);
  cstdlib_memset(a5, 0, 4 * a6);
  cstdlib_memset(a7, 0, 4 * a6);
  if (a4 <= a3)
  {
    do
    {
      if (a4 >= a3)
        break;
      cstdlib_strncpy(__b, (const char *)(a2 + a4), 3uLL);
      result = CLM_IsSeperationRecord(a2, a4);
      if (!result)
        return result;
      if (CLM_FindLanguageInArray((char *)a5, a6, (uint64_t)a7, __b, &v28))
      {
        if (v28 >= a6)
          goto LABEL_2;
        cstdlib_strcpy((char *)a5 + 4 * v28, __b);
        ++*a8;
      }
      v21 = 0;
      v22 = a4 <= a3 ? a3 : a4;
      v23 = (unsigned __int8 *)(a2 + a4);
      v24 = ~(unint64_t)a4 + v22;
      do
      {
        if (!*v23++)
          ++v21;
        ++a4;
      }
      while (v21 <= 1 && v24-- != 0);
    }
    while (a3 != a4);
    return 0;
  }
  else
  {
LABEL_2:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50003, 0, v16, v17, v18, v19, v27);
    return 1;
  }
}

uint64_t CLM_FindLangRecord(uint64_t a1, unsigned int a2, unsigned int *a3, const char *a4)
{
  _BOOL4 v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  BOOL v13;
  char __b[4];

  cstdlib_memset(__b, 0, 4uLL);
  cstdlib_strncpy(__b, (const char *)(a1 + *a3), 3uLL);
  if (cstdlib_strcmp(a4, __b))
  {
    v8 = 0;
    do
    {
      v9 = *a3;
      if (a2 <= v9 || v8)
        break;
      v11 = 0;
      v12 = a2 - v9;
      do
      {
        if (!*(_BYTE *)(a1 + v9))
          ++v11;
        v13 = v11 > 1 || a2 - 1 == v9;
        *a3 = ++v9;
        --v12;
      }
      while (!v13);
      v8 = v12 == 0;
      cstdlib_strncpy(__b, (const char *)(a1 + v9), 3uLL);
    }
    while (cstdlib_strcmp(a4, __b));
  }
  if (*a3 >= a2)
    return 0;
  else
    return a1 + *a3 + 3;
}

_QWORD *CLM_EmptyLanguageStruct(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = result;
      if (a3)
      {
        v6 = 0;
        v7 = a3;
        while (1)
        {
          v8 = *(_DWORD *)(v4 + 24 * v6 + 4);
          if (v8 == 1)
            break;
          if (!v8)
          {
            v9 = v4 + 24 * v6;
            v12 = *(_DWORD *)(v9 + 8);
            v11 = (unsigned int *)(v9 + 8);
            v10 = v12;
            v13 = *((_QWORD *)v11 + 1);
            if (v12)
            {
              v14 = 0;
              v15 = 8;
              do
              {
                if (*(_QWORD *)(v13 + v15))
                {
                  heap_Free(*(_QWORD **)(v5[3] + 8), *(_QWORD *)(v13 + v15));
                  v13 = *((_QWORD *)v11 + 1);
                  *(_QWORD *)(v13 + v15) = 0;
                  v10 = *v11;
                }
                ++v14;
                v15 += 24;
              }
              while (v14 < v10);
            }
LABEL_20:
            heap_Free(*(_QWORD **)(v5[3] + 8), v13);
            *((_QWORD *)v11 + 1) = 0;
            *v11 = 0;
          }
          if (++v6 == v7)
            goto LABEL_22;
        }
        v16 = v4 + 24 * v6;
        v18 = *(_DWORD *)(v16 + 8);
        v11 = (unsigned int *)(v16 + 8);
        v17 = v18;
        v13 = *((_QWORD *)v11 + 1);
        if (v18)
        {
          v19 = 0;
          v20 = 16;
          do
          {
            if (*(_QWORD *)(v13 + v20))
            {
              v22 = 0;
              memset(v21, 0, sizeof(v21));
              if (!ooc_utils_createAllocator((uint64_t)v21, (_WORD *)v5[4], v5[5]))
                OOC_PlacementDeleteObject((uint64_t)v21, *(_QWORD *)(*((_QWORD *)v11 + 1) + v20));
              v13 = *((_QWORD *)v11 + 1);
              *(_QWORD *)(v13 + v20) = 0;
              v17 = *v11;
            }
            ++v19;
            v20 += 24;
          }
          while (v19 < v17);
        }
        goto LABEL_20;
      }
LABEL_22:
      result = heap_Free(*(_QWORD **)(v5[3] + 8), v4);
      *a2 = 0;
    }
  }
  return result;
}

BOOL CLM_IsSeperationRecord(uint64_t a1, unsigned int a2)
{
  char __b[4];

  cstdlib_memset(__b, 0, 4uLL);
  cstdlib_strncpy(__b, (const char *)(a1 + a2), 3uLL);
  return cstdlib_strcmp("dum", __b) || *(_BYTE *)(a1 + a2 + 3) || *(_BYTE *)(a1 + a2 + 4);
}

BOOL CLM_FindLanguageInArray(char *__s2, unsigned int a2, uint64_t a3, char *__s1, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  if (a2 <= 1)
    v10 = 1;
  else
    v10 = a2;
  while (cstdlib_strcmp(__s1, __s2) && *__s2)
  {
    ++v9;
    __s2 += 4;
    if (v10 == v9)
      return 1;
  }
  *a5 = v9;
  ++*(_DWORD *)(a3 + 4 * v9);
  return *__s2 == 0;
}

BOOL CLM_FindNextRecordInBuffer(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;

  v3 = *a3;
  if (v3 <= a2)
    v4 = a2;
  else
    v4 = v3;
  if (v3 < a2)
  {
    v5 = 0;
    v6 = ~v3 + v4;
    v7 = (unsigned __int8 *)(a1 + v3);
    do
    {
      v8 = *v7++;
      LODWORD(v3) = v3 + 1;
      *a3 = v3;
      if (!v8)
        ++v5;
    }
    while (v5 <= 1 && v6-- != 0);
  }
  return (_DWORD)v3 == a2;
}

uint64_t CLM_FindSeperationRecord(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;

  LODWORD(v6) = *a3;
  while (1)
  {
    result = CLM_IsSeperationRecord(a1, v6);
    v6 = *a3;
    if (!(_DWORD)result)
      break;
    if (v6 <= a2)
      v8 = a2;
    else
      v8 = v6;
    if (v6 < a2)
    {
      v9 = 0;
      v10 = (unsigned __int8 *)(a1 + v6);
      v11 = ~v6 + v8;
      do
      {
        v12 = *v10++;
        LODWORD(v6) = v6 + 1;
        *a3 = v6;
        if (!v12)
          ++v9;
      }
      while (v9 <= 1 && v11-- != 0);
    }
    if ((_DWORD)v6 == a2)
      return 2347769856;
  }
  *a3 = v6 + 5;
  return result;
}

uint64_t CLM_PreCompileSplitWordRegEx(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _DWORD v13[2];
  const char *v14;
  char v15[16];
  char v16[32];
  char v17[32];
  char v18[68];
  char v19[500];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v13[1] = 0;
  strcpy(v16, "[\"#\\$&'\\.789=\\?@A-Z^_a-z]");
  strcpy((char *)v13, "\\*");
  strcpy(v15, "(\\\\)?[!\\?,\\.;:]");
  if (a1[23]
    || (v14 = 0,
        __sprintf_chk(v19, 0, 0x1F4uLL, "(%s%s*(%%%s|%%\"%s+\"){0,}(&%s%s*(%%%s|%%\"%s+\"){0,}){0,})|(%s%s)", v16, v17, v18, v18, v16, v17, v18, v18, (const char *)v13, v15), v10 = nuance_pcre_compile(a1[21], a1[22], v19, 0, &v14, &v13[1], 0), v9 = 0, (a1[23] = v10) == 0))
  {
    v9 = 2347769856;
    log_OutPublic(*(_QWORD *)(a1[3] + 32), (uint64_t)"CLM", 50003, 0, a5, a6, a7, a8, v12);
  }
  return v9;
}

_QWORD *CLM_FreePreCompiledSplitWordRegEx(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[23];
  if (v1)
  {
    v2 = result;
    result = heap_Free(*(_QWORD **)(result[3] + 8), v1);
    v2[23] = 0;
  }
  return result;
}

uint64_t CLM_PreCompileReplacementRegEx(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  int v13;
  const char *v14;
  char v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  strcpy(v15, "(^|[^\\\\])([\\$][0-9]+)");
  if (a1[24]
    || (v14 = 0, v10 = nuance_pcre_compile(a1[21], a1[22], v15, 0, &v14, &v13, 0), v9 = 0, (a1[24] = v10) == 0))
  {
    v9 = 2347769856;
    log_OutPublic(*(_QWORD *)(a1[3] + 32), (uint64_t)"CLM", 50003, 0, a5, a6, a7, a8, v12);
  }
  return v9;
}

_QWORD *CLM_FreePreCompiledReplacementRegEx(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[24];
  if (v1)
  {
    v2 = result;
    result = heap_Free(*(_QWORD **)(result[3] + 8), v1);
    v2[24] = 0;
  }
  return result;
}

uint64_t CLM_DeleteNonPhoneChars(uint64_t a1, char *__s)
{
  _QWORD *v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v15;
  char __charset[4];

  strcpy(__charset, "\t ");
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v5 = cstdlib_strlen(__s);
  v6 = (char *)heap_Calloc(v4, 1, v5 + 1);
  if (v6)
  {
    v11 = v6;
    v15 = 0;
    cstdlib_strcpy(v6, __s);
    *__s = 0;
    v12 = extstdlib_strtok_r(v11, __charset, &v15);
    if (v12)
    {
      v13 = v12;
      do
      {
        cstdlib_strcat(__s, v13);
        v13 = extstdlib_strtok_r(0, __charset, &v15);
      }
      while (v13);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v11);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v7, v8, v9, v10, v15);
    return 2347769866;
  }
}

uint64_t CLM_SplitWordInPhonemes(uint64_t a1, char *__s, char *a3, unsigned int a4, _QWORD *a5, _DWORD *a6)
{
  const char *v9;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  char *Symbol;
  unsigned int v24;
  uint64_t v25;

  v9 = __s;
  if (a6)
    *a6 = 0;
  if (a3)
  {
    if (((2 * cstdlib_strlen(__s)) | 1) > a4)
      return 2347769865;
    *a3 = 0;
  }
  if (a5)
    StringList_Reset(a5);
  v12 = cstdlib_strlen(v9);
  v25 = LhpuCreate(*(_QWORD *)(a1 + 8));
  if (!v25)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"CLM", 50000, 0, v13, v14, v15, v16, v24);
    return 2347769866;
  }
  v11 = 0;
  v17 = (unint64_t)&v9[v12 + 1];
  if (v17 <= (unint64_t)v9)
    goto LABEL_32;
  v11 = 0;
  v18 = 1;
  do
  {
    if (*v9 == 18)
    {
      if (a3)
      {
        cstdlib_strcat(a3, " ");
        cstdlib_strcat(a3, "\x12");
      }
      goto LABEL_29;
    }
    LhplGetSymbol(v9);
    if (!v19)
    {
      if (v18)
      {
        if (!a3)
        {
LABEL_26:
          if (a5)
          {
            v21 = v25;
            Symbol = (char *)LhpuGetSymbol(v25);
            v11 = CLM_PhonList_Append((uint64_t)a5, Symbol);
            if ((v11 & 0x80000000) != 0)
              goto LABEL_31;
          }
          v18 = 0;
          goto LABEL_29;
        }
      }
      else
      {
        if (!a3)
          goto LABEL_26;
        cstdlib_strcat(a3, " ");
      }
      v20 = (const char *)LhpuGetSymbol(v25);
      cstdlib_strcat(a3, v20);
      goto LABEL_26;
    }
    if (v19 == 1)
      break;
    if (a6)
      *a6 = 1;
LABEL_29:
    ++v9;
  }
  while ((unint64_t)v9 < v17);
  v21 = v25;
LABEL_31:
  if (v21)
LABEL_32:
    LhpuRemove(*(_QWORD **)(a1 + 8), &v25);
  return v11;
}

uint64_t CLM_EscapeMetaChars(uint64_t a1, char *__s, char *a3, unsigned int a4, int a5)
{
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char __sa[16];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  strcpy(__sa, "^$.[{()|+?*\\/");
  if (a5)
  {
    a3[1] = 115;
    v10 = 2;
    v11 = 92;
  }
  else
  {
    v10 = 1;
    v11 = 94;
  }
  *a3 = v11;
  if (cstdlib_strlen(__s))
  {
    v23 = a1;
    v12 = 0;
    while (1)
    {
      if (cstdlib_strlen(__sa))
      {
        v17 = 0;
        v18 = &__s[v12];
        while (*v18 != __sa[v17])
        {
          if (++v17 >= (unint64_t)cstdlib_strlen(__sa))
            goto LABEL_10;
        }
        a3[v10] = 92;
        v20 = v10 + 1;
        v19 = 2;
      }
      else
      {
LABEL_10:
        v18 = &__s[v12];
        v19 = 1;
        v20 = v10;
      }
      a3[v20] = *v18;
      v10 += v19;
      if (v10 + 2 >= a4)
        break;
      if (++v12 >= (unint64_t)cstdlib_strlen(__s))
        goto LABEL_14;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 32), (uint64_t)"CLM", 50003, 0, v13, v14, v15, v16, v23);
    return 2347769856;
  }
  else
  {
LABEL_14:
    v21 = v10 + 1;
    result = 0;
    if (a5)
    {
      a3[v10] = 92;
      a3[v21] = 115;
      a3[v10 + 2] = 0;
    }
    else
    {
      a3[v10] = 36;
      a3[v21] = 0;
    }
  }
  return result;
}

BOOL CLM_SearchAndReplace(uint64_t a1, _BYTE *a2, char *a3, uint64_t a4, char *__s, uint64_t a6, unsigned int a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char **v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  unsigned int v40;
  _QWORD *v42;
  unsigned int v44;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  _DWORD __b[90];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = cstdlib_strlen(__s);
  v49 = 0;
  v48 = 0;
  cstdlib_memset(__b, 0, 0x168uLL);
  v44 = v10;
  if (v10)
  {
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 0;
    v42 = (_QWORD *)a1;
    do
    {
      if (v17 && *a2 == 94)
        break;
      v18 = cstdlib_strlen(__s);
      if ((int)nuance_pcre_exec(*(_QWORD **)(a1 + 168), *(_QWORD *)(a1 + 176), a4, 0, &__s[v17], v18 - v17, 0, 0, __b, 90) < 1)break;
      v19 = CLM_InterpretReplacementString(a1, a3, &v48, &v49);
      if ((v19 & 0x80000000) != 0)
        return v19;
      v20 = v49;
      if (!v49)
        v17 = __b[(v15 + 1)] + v17 - __b[v15];
      v21 = __b[0];
      v22 = v17;
      if (__b[0])
      {
        do
        {
          *(_BYTE *)(a6 + v16++) = __s[v22++];
          --v21;
        }
        while (v21);
      }
      v46 = v48;
      if ((_DWORD)v20)
      {
        v23 = (const char **)(v48 + 8);
        for (i = v20; i; --i)
        {
          v25 = *((_DWORD *)v23 - 2);
          if (v25 == 1)
          {
            v26 = *((_DWORD *)v23 - 1);
            v27 = (2 * v26) | 1u;
            v15 = (2 * v26);
            v28 = __b[v15];
            v29 = (__b[v27] - v28);
            if (v29 + v16 >= a7)
            {
LABEL_23:
              v30 = 2347769865;
              v31 = v42[3];
              goto LABEL_37;
            }
            cstdlib_strncpy((char *)(a6 + v16), &__s[v28 + v17], v29);
            v16 = __b[v27] + v16 - __b[v15];
          }
          else if (!v25 && *v23)
          {
            if (v16 + cstdlib_strlen(*v23) >= a7)
              goto LABEL_23;
            cstdlib_strcpy((char *)(a6 + v16), *v23);
            v16 += cstdlib_strlen(*v23);
          }
          v23 += 2;
        }
      }
      v17 += __b[1];
      a1 = (uint64_t)v42;
      CLM_FreeListOfTypes(v42, v46, v20);
      v48 = 0;
    }
    while (v17 < v44);
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v32 = v44 - v17;
  if (v44 <= v17)
  {
    v32 = 0;
LABEL_34:
    v38 = v32 + v16;
    if (v38 < a7)
    {
      *(_BYTE *)(a6 + v38) = 0;
      return v17 == 0;
    }
  }
  else
  {
    LODWORD(v33) = a7 - v16;
    if (a7 >= v16)
      v33 = v33;
    else
      v33 = 0;
    v34 = (_BYTE *)(a6 + v16);
    v35 = &__s[v17];
    v36 = v44 - v17;
    while (v33)
    {
      v37 = *v35++;
      *v34++ = v37;
      --v33;
      if (!--v36)
        goto LABEL_34;
    }
  }
  v30 = 2347769865;
  v31 = *(_QWORD *)(a1 + 24);
LABEL_37:
  log_OutPublic(*(_QWORD *)(v31 + 32), (uint64_t)"CLM", 50002, 0, v11, v12, v13, v14, v40);
  return v30;
}

uint64_t CLM_InterpretReplacementString(uint64_t a1, char *__s, uint64_t *a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  char *v40;
  unsigned int v42;
  char __dst[5];
  char v44[5];
  size_t __n;
  _DWORD __b[4];
  unsigned int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  __n = 0;
  v15 = cstdlib_strlen(__s);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 192);
    if (!v16)
    {
      v17 = CLM_PreCompileReplacementRegEx((_QWORD *)a1, v8, v9, v10, v11, v12, v13, v14);
      if ((v17 & 0x80000000) != 0)
        return v17;
      v16 = *(_QWORD *)(a1 + 192);
    }
    nuance_pcre_fullinfo(v16, 0, 1, (int *)&__n);
    v22 = *(_QWORD *)(a1 + 24);
    if (__n)
    {
      v23 = heap_Alloc(*(_QWORD *)(v22 + 8), __n);
      if (v23)
      {
        v28 = (void *)v23;
        *a3 = 0;
        v29 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), (32 * v15) & 0xFFFFFFFE0);
        *a3 = (uint64_t)v29;
        if (v29)
        {
          cstdlib_memset(v29, 0, (32 * v15) & 0xFFFFFFFE0);
          cstdlib_memset(__b, 0, 0x168uLL);
          v30 = 0;
          v31 = 0;
          v32 = v15;
          while (1)
          {
            cstdlib_memcpy(v28, *(const void **)(a1 + 192), __n);
            if (nuance_pcre_exec(*(_QWORD **)(a1 + 168), *(_QWORD *)(a1 + 176), (uint64_t)v28, 0, &__s[v31], v32, 0, 0, __b, 90) != 3)break;
            v33 = v47;
            if (v47)
            {
              *(_DWORD *)(*a3 + 16 * v30) = 0;
              *(_QWORD *)(*a3 + 16 * v30 + 8) = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v33 + 1);
              v34 = *(char **)(*a3 + 16 * v30 + 8);
              if (!v34)
                goto LABEL_26;
              cstdlib_strncpy(v34, &__s[v31], v47);
              *(_BYTE *)(*(_QWORD *)(*a3 + 16 * v30++ + 8) + (int)v47) = 0;
              v33 = v47;
            }
            *(_DWORD *)(*a3 + 16 * v30) = 1;
            cstdlib_strncpy(__dst, &__s[v31 + 1 + v33], v48 + ~v33);
            v35 = 0;
            __dst[v48 + ~v47] = 0;
            v36 = __dst[0];
            if (__dst[0] - 58 >= 0xFFFFFFF6)
            {
              v35 = 0;
              v37 = v44;
              do
              {
                v35 = v36 + 10 * v35 - 48;
                v38 = *v37++;
                v36 = v38;
              }
              while ((v38 - 58) >= 0xFFFFFFF6);
            }
            *(_DWORD *)(*a3 + 16 * v30 + 4) = v35;
            v31 += __b[1];
            ++v30;
            v32 = v15 - v31;
            if ((_DWORD)v15 == v31)
              goto LABEL_25;
          }
          *(_DWORD *)(*a3 + 16 * v30) = 0;
          *(_QWORD *)(*a3 + 16 * v30 + 8) = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v32 + 1);
          v40 = *(char **)(*a3 + 16 * v30 + 8);
          if (v40)
          {
            cstdlib_strncpy(v40, &__s[v31], v32);
            *(_BYTE *)(*(_QWORD *)(*a3 + 16 * v30++ + 8) + v32) = 0;
LABEL_25:
            *a4 = v30;
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v28);
            return 0;
          }
LABEL_26:
          v39 = 2347769866;
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v28);
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), *a3);
          *a3 = 0;
        }
        else
        {
          v39 = 2347769866;
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v28);
        }
      }
      else
      {
        v39 = 2347769866;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v24, v25, v26, v27, v42);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v22 + 32), (uint64_t)"CLM", 50003, 0, v18, v19, v20, v21, v42);
      return 2347769856;
    }
  }
  else
  {
    v39 = 0;
    *a4 = 0;
  }
  return v39;
}

_QWORD *CLM_FreeListOfTypes(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  if (a2)
  {
    v4 = result;
    if (a3)
    {
      v5 = a3;
      v6 = (uint64_t *)(a2 + 8);
      do
      {
        if (*v6)
          heap_Free(*(_QWORD **)(v4[3] + 8), *v6);
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    return heap_Free(*(_QWORD **)(v4[3] + 8), a2);
  }
  return result;
}

unint64_t CLM_cstdlib_atoi(unint64_t result)
{
  unint64_t v1;
  int v2;
  unsigned __int8 *v3;
  int v4;

  if (result)
  {
    v1 = result;
    v2 = *(unsigned __int8 *)result;
    if ((v2 - 58) >= 0xFFFFFFF6)
    {
      LODWORD(result) = 0;
      v3 = (unsigned __int8 *)(v1 + 1);
      do
      {
        result = (v2 + 10 * result - 48);
        v4 = *v3++;
        v2 = v4;
      }
      while ((v4 - 58) > 0xFFFFFFF5);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *CLM_RemoveBackSlash(const char *result)
{
  const char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (result)
  {
    v1 = result;
    result = (const char *)cstdlib_strlen(result);
    if ((int)result >= 1)
    {
      v2 = (int)result;
      v3 = 0;
      do
      {
        v4 = v3 << 32;
        v5 = (int)v3;
        v6 = v3 - 1;
        do
        {
          v7 = v5++;
          ++v6;
          v4 += 0x100000000;
        }
        while (v7 < v2 && v1[v7] != 92);
        v3 = v5 - 1;
        if (v7 < v2)
        {
          result = cstdlib_strcpy((char *)&v1[v3], &v1[v4 >> 32]);
          --v2;
        }
      }
      while (v2 > v6);
    }
  }
  return result;
}

uint64_t CLM_RemoveInvalidPhonemes(uint64_t a1, int a2, char *a3, char *a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  if (a5)
    *a5 = 0;
  v8 = 2347769864;
  if ((safeh_HandleCheck(a1, a2, 63000, 216) & 0x80000000) == 0 && a1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM RemoveInvalidPhonemes : Begin (%s)", v9, v10, v11, (uint64_t)a4);
    if (CLM_GiveLanguageBuffer(a3, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 160), 2))
    {
      v12 = CLM_DeleteNonPhoneChars(a1, a4);
      if ((v12 & 0x80000000) != 0)
      {
        return v12;
      }
      else
      {
        v13 = (2 * cstdlib_strlen(a4)) | 1;
        v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v13);
        if (v14)
        {
          v19 = v14;
          cstdlib_memset(v14, 0, v13);
          v8 = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a4, v19, v13, 0, 0);
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v19);
          if ((v8 & 0x80000000) == 0)
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM RemoveInvalidPhonemes : End (%s)", v20, v21, v22, (uint64_t)a4);
        }
        else
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v15, v16, v17, v18, v24);
          return 2347769866;
        }
      }
    }
    else
    {
      return 2347777677;
    }
  }
  return v8;
}

uint64_t CLM_GiveLanguageBuffer(char *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = 0;
  if (a2 && a3)
  {
    v7 = a2;
    v8 = a3;
    while (LH_stricmp((char *)v7, a1))
    {
      v7 += 24;
      if (!--v8)
        return 0;
    }
    if (*(_DWORD *)(v7 + 4) == a4)
      return v7;
    else
      return 0;
  }
  return result;
}

uint64_t CLM_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t NullHandle;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v5 = 2347769863;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v23);
    if ((inited & 0x80000000) != 0)
      return inited;
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v13))
    {
      inited = InitRsrcFunction(a1, a2, &v22);
      if ((inited & 0x80000000) == 0)
      {
        v14 = (_QWORD *)heap_Calloc(*(_QWORD **)(v23 + 8), 1, 216);
        v19 = v23;
        if (!v14)
        {
          log_OutPublic(*(_QWORD *)(v23 + 32), (uint64_t)"CLM", 50000, 0, v15, v16, v17, v18, v22);
          return 2347769866;
        }
        v20 = (uint64_t)v14;
        v14[4] = a3;
        v14[5] = a4;
        v14[2] = a2;
        v14[3] = v19;
        *v14 = v22;
        v14[1] = a1;
        inited = nuance_pcre_ObjOpen(a3, a4, (uint64_t)(v14 + 21));
        if ((inited & 0x80000000) == 0)
        {
          inited = nuance_pcre_Init(*(_QWORD **)(v20 + 168), *(_QWORD *)(v20 + 176), 0xAu, 10);
          if ((inited & 0x80000000) == 0)
          {
            *(_QWORD *)a5 = v20;
            *(_DWORD *)(a5 + 8) = 63000;
            return CLM_ObjReopen(v20, *(_QWORD *)(a5 + 8));
          }
        }
      }
      return inited;
    }
  }
  return v5;
}

uint64_t CLM_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Language;
  int v7;
  uint64_t ObjcForThisApi_0;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  char v36[4];
  uint64_t v37;
  char __s2[4];
  unsigned int v39;
  char v40[256];
  _OWORD __s1[16];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = safeh_HandleCheck(a1, a2, 63000, 216);
  v4 = 2347769864;
  if ((v3 & 0x80000000) != 0 || !a1)
    return v4;
  v5 = v3;
  if ((hlp_GetLanguage(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), v36) & 0x80000000) == 0
    && !LH_stricmp((char *)(a1 + 56), v36))
  {
    return v5;
  }
  CLM_DeInitFromCLMv2Lua((_QWORD *)a1);
  Language = CLM_DeInit((uint64_t *)a1);
  if ((Language & 0x80000000) != 0)
    return Language;
  memset(__s1, 0, sizeof(__s1));
  v37 = 0;
  Language = hlp_GetLanguage(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), __s2);
  if ((Language & 0x80000000) != 0)
    return Language;
  cstdlib_strcat((char *)__s1, "clm/");
  cstdlib_strcat((char *)__s1, __s2);
  v7 = brokeraux_ComposeBrokerString(*(_QWORD *)(a1 + 24), (const char *)__s1, 0, 1, __s2, 0, 0, v40, 0x100uLL);
  if (v7 < 0)
    return v7 | 0x8BF02000;
  ObjcForThisApi_0 = getObjcForThisApi_0(*(_QWORD *)(a1 + 24), *(_QWORD *)a1);
  if (!ObjcForThisApi_0)
    return 2347769856;
  if ((objc_GetAddRefCountedObject(ObjcForThisApi_0, (uint64_t)v40, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))IRefCnt_ObjcLoadCLMData, (void (*)(_QWORD, _QWORD, _OWORD *))IRefCnt_ObjcUnloadCLMData, a1, &v37) & 0x80000000) != 0)
  {
    v4 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 200) = 0;
    return v4;
  }
  v4 = 2347777666;
  v9 = *(_QWORD *)(v37 + 32);
  *(_QWORD *)(a1 + 48) = v9;
  CLM_UnloadSettings(a1);
  v14 = *(_DWORD *)(v9 + 40);
  if (!v14)
    return 2347777673;
  v15 = *(_QWORD *)(v9 + 32);
  if (!v15)
    return 2347777665;
  if (v14 <= 0x12)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50003, 0, v10, v11, v12, v13, v35);
    return CLM_InitFromCLMv2Lua(a1, __s2);
  }
  cstdlib_strncpy((char *)(a1 + 56), (const char *)(v15 + 14), 3uLL);
  *(_BYTE *)(a1 + 59) = 0;
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(v15 + 17);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(v15 + 18);
  v39 = 19;
  if ((CLM_EnumerateLanguages(a1, (uint64_t *)(a1 + 72), (unsigned int *)(a1 + 80), 1u, *(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), 0x13u) & 0x80000000) != 0)return 2347777667;
  if (!*(_DWORD *)(a1 + 80))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50003, 0, v16, v17, v18, v19, v35);
    return 2347777667;
  }
  if ((CLM_FindSeperationRecord(*(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), &v39) & 0x80000000) != 0)
    return 2347777667;
  if ((CLM_LoadRules(a1, *(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), 0, &v39) & 0x80000000) != 0
    || (CLM_FindSeperationRecord(*(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), &v39) & 0x80000000) != 0
    || (CLM_LoadRules(a1, *(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), 1, &v39) & 0x80000000) != 0)
  {
    return v4;
  }
  v5 = 2347777668;
  if ((CLM_FindSeperationRecord(*(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), &v39) & 0x80000000) != 0
    || (CLM_EnumerateLanguages(a1, (uint64_t *)(a1 + 152), (unsigned int *)(a1 + 160), 2u, *(_QWORD *)(v9 + 32), *(_DWORD *)(v9 + 40), v39) & 0x80000000) != 0)
  {
    return v5;
  }
  v4 = 2347777671;
  if ((CLM_PreCompileSplitWordRegEx((_QWORD *)a1, v20, v21, v22, v23, v24, v25, v26) & 0x80000000) == 0
    && (CLM_PreCompileReplacementRegEx((_QWORD *)a1, v27, v28, v29, v30, v31, v32, v33) & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 64) = 1;
    return CLM_InitFromCLMv2Lua(a1, __s2);
  }
  return v4;
}

uint64_t CLM_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 2347769864;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 63000, 216) & 0x80000000) == 0 && a1)
  {
    CLM_DeInitFromCLMv2Lua(a1);
    v4 = CLM_DeInit(a1);
    if ((v4 & 0x80000000) == 0)
    {
      v4 = nuance_pcre_DeInit((_QWORD *)a1[21], a1[22]);
      if ((v4 & 0x80000000) == 0)
        v4 = nuance_pcre_ObjClose(a1[21], a1[22]);
    }
    v3 = v4;
    heap_Free(*(_QWORD **)(a1[3] + 8), (uint64_t)a1);
  }
  return v3;
}

uint64_t CLM_DeInit(uint64_t *a1)
{
  uint64_t ObjcForThisApi_0;

  CLM_UnloadSettings((uint64_t)a1);
  if (!a1[6])
    return 0;
  ObjcForThisApi_0 = getObjcForThisApi_0(a1[3], *a1);
  if (ObjcForThisApi_0)
    return objc_ReleaseObject(ObjcForThisApi_0, a1[6] + 48);
  else
    return 2347769856;
}

uint64_t CLM_ConvertTranscription(uint64_t a1, int a2, char *a3, const char *a4, char *a5, char *a6, char *a7, unsigned int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int CountStrings;
  int v45;
  unsigned __int16 v46;
  size_t v47;
  const char *v48;
  size_t v49;
  const char *v50;
  const char *v51;
  const char *v52;
  unsigned int v53;
  uint64_t *v54;
  void *__b;
  unsigned int v56;
  unsigned int v57;
  char *__src;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  char __s2[4];

  strcpy(__s2, "ANY");
  v62 = 0;
  v60 = 0;
  v61 = 0;
  v16 = -1947197430;
  v59 = 0;
  v17 = 2347769864;
  if ((safeh_HandleCheck(a1, a2, 63000, 216) & 0x80000000) == 0 && a1)
  {
    if (!*(_DWORD *)(a1 + 64))
      return 2347777672;
    v17 = 2347777674;
    if (a4)
    {
      if (cstdlib_strlen(a4))
      {
        if (a8 && cstdlib_strlen(a4) + 1 > a8)
          return 2347777673;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        v19 = cstdlib_strlen(a4);
        v20 = (char *)heap_Alloc(v18, (v19 + 1));
        v25 = v20;
        if (!v20)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v21, v22, v23, v24, v53);
          v29 = 0;
          v30 = 0;
LABEL_26:
          hlp_FreePhonlist(a1, (uint64_t *)&v61);
          hlp_FreePhonlist(a1, &v60);
          hlp_FreePhonlist(a1, &v59);
          if (v25)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v25);
          if (v29)
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v29);
          if (v16 >= 0)
            return v30;
          else
            return v16;
        }
        cstdlib_strcpy(v20, a4);
        __src = v25;
        v26 = CLM_RemoveInvalidPhonemes(a1, a2, a3, v25, &v62);
        v27 = v26;
        if (v26 < 0)
        {
          v28 = v26;
          if ((v26 & 0x1FFF) != 0x1E8D)
          {
            v29 = 0;
            v30 = 0;
            v16 = v26;
            goto LABEL_25;
          }
        }
        else if (v62)
        {
          v28 = -1947189627;
        }
        else
        {
          v28 = 0;
        }
        if (a8)
        {
          v56 = v28;
          if (cstdlib_strcmp(a3, __s2))
          {
            if ((v56 & 0x1FFF) == 0x1E8D)
            {
              v30 = v56;
              cstdlib_strcpy(a5, __src);
              v29 = 0;
              v16 = v27;
              v25 = __src;
              goto LABEL_26;
            }
            if (!cstdlib_strcmp((const char *)(a1 + 56), a3))
            {
              cstdlib_strcpy(a5, __src);
              v29 = 0;
              v16 = v27;
              v25 = __src;
              v30 = v56;
              goto LABEL_26;
            }
            __b = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a8 + 1);
            if (__b)
            {
              v36 = 0;
              if (a6 && a7)
              {
                *a6 = 0;
                *a7 = 0;
                if (cstdlib_strlen(a4) <= 0x95)
                {
                  v36 = &v60;
                  if ((int)hlp_AllocateAndInitializePhonlists(a1, __src, (uint64_t *)&v61, &v60, &v59) >= 0)
                  {
                    v37 = &v59;
                  }
                  else
                  {
                    v36 = 0;
                    v37 = 0;
                  }
                  v54 = v37;
                }
                else
                {
                  a6 = 0;
                  a7 = 0;
                  v36 = 0;
                  v54 = 0;
                }
              }
              else
              {
                v54 = 0;
              }
              cstdlib_memset(__b, 0, a8 + 1);
              cstdlib_strcpy((char *)__b, __src);
              cstdlib_strcpy(a5, __src);
              v38 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96), a3, (char *)__b, a5, a8, v61, (_QWORD **)v36, (_QWORD **)v54);
              if (v38)
              {
                if (v38 < 0)
                  goto LABEL_70;
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
              }
              v38 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 128), a3, (char *)__b, a5, a8, v61, (_QWORD **)v54, (_QWORD **)v36);
              if (v38)
              {
                if (v38 < 0)
                  goto LABEL_70;
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
              }
              v38 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96), __s2, (char *)__b, a5, a8, v61, (_QWORD **)v36, (_QWORD **)v54);
              if (v38)
              {
                if (v38 < 0)
                  goto LABEL_70;
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
              }
              v39 = CLM_ApplyPhonemeMapping(a1, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 80), a3, (char *)__b, a5, a8, v61, (_QWORD **)v54, (_QWORD **)v36);
              if (v39 < 0)
              {
                if ((v39 & 0x1FFF) != 0)
                  v16 = v39;
                else
                  v16 = -1947189621;
                v30 = v56;
                v25 = __src;
                v29 = (uint64_t)__b;
                goto LABEL_26;
              }
              cstdlib_strcpy((char *)__b, a5);
              v38 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 112), a3, (char *)__b, a5, a8, v61, (_QWORD **)v36, (_QWORD **)v54);
              if (v38)
              {
                if (v38 < 0)
                {
                  v40 = (v38 & 0x1FFF) == 0;
                  v41 = 7819;
LABEL_71:
                  if (v40)
                    v16 = v41;
                  else
                    v16 = v38;
                  v30 = v56;
LABEL_75:
                  v25 = __src;
LABEL_76:
                  v29 = (uint64_t)__b;
                  goto LABEL_26;
                }
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
              }
              v38 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 112), __s2, (char *)__b, a5, a8, v61, (_QWORD **)v54, (_QWORD **)v36);
              if (v38)
              {
                if (v38 < 0)
                {
LABEL_70:
                  v40 = (v38 & 0x1FFF) == 0;
                  v41 = -1947189621;
                  goto LABEL_71;
                }
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
              }
              v42 = CLM_ApplyRules(a1, *(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 144), a3, (char *)__b, a5, a8, v61, (_QWORD **)v36, (_QWORD **)v54);
              if (v42)
              {
                v25 = __src;
                if (v42 < 0)
                {
                  if ((v42 & 0x1FFF) != 0)
                    v16 = v42;
                  else
                    v16 = -1947189621;
                  goto LABEL_92;
                }
              }
              else
              {
                cstdlib_strcpy((char *)__b, a5);
                v25 = __src;
              }
              v43 = CLM_RemoveInvalidPhonemes(a1, a2, (char *)(a1 + 56), a5, &v62);
              v16 = v43;
              if (v43 < 0)
              {
                v30 = 7821;
                if ((v43 & 0x1FFF) != 0x1E8D)
                {
LABEL_92:
                  v30 = v56;
                  goto LABEL_76;
                }
              }
              else
              {
                v30 = v56;
                if (v62)
                {
                  v30 = -1947189626;
                  goto LABEL_76;
                }
              }
              if (!a6)
                goto LABEL_76;
              if (a7)
              {
                *a6 = 0;
                *a7 = 0;
                CountStrings = StringList_GetCountStrings((uint64_t)v61);
                v45 = v54 ? StringList_GetCountStrings(*v54) : 0;
                if (CountStrings)
                {
                  if (v45 == CountStrings
                    && (CLM_MergeSubsequentInsertionAndDeletions((uint64_t)v61, *v54) & 0x80000000) == 0)
                  {
                    v57 = StringList_GetCountStrings((uint64_t)v61);
                    if (v57 == StringList_GetCountStrings(*v54))
                    {
                      if (v57)
                      {
                        v46 = 0;
                        while (1)
                        {
                          v47 = cstdlib_strlen(a6);
                          v48 = (const char *)StringList_GetAt((uint64_t)v61, v46);
                          if (v47 + cstdlib_strlen(v48) + 1 >= a8)
                            break;
                          v49 = cstdlib_strlen(a7);
                          v50 = (const char *)StringList_GetAt(*v54, v46);
                          if (v49 + cstdlib_strlen(v50) + 1 >= a8)
                            break;
                          v51 = (const char *)StringList_GetAt((uint64_t)v61, v46);
                          cstdlib_strcat(a6, v51);
                          cstdlib_strcat(a6, " ");
                          v52 = (const char *)StringList_GetAt(*v54, v46);
                          cstdlib_strcat(a7, v52);
                          cstdlib_strcat(a7, " ");
                          if (v57 <= ++v46)
                            goto LABEL_75;
                        }
                        *a6 = 0;
                        *a7 = 0;
                      }
                    }
                  }
                }
              }
              goto LABEL_75;
            }
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v32, v33, v34, v35, v53);
            v29 = 0;
          }
          else
          {
            v29 = 0;
            v16 = -1947189621;
          }
          v30 = v56;
        }
        else
        {
          v29 = 0;
          v16 = v26;
          v30 = v28;
        }
LABEL_25:
        v25 = __src;
        goto LABEL_26;
      }
    }
  }
  return v17;
}

uint64_t hlp_AllocateAndInitializePhonlists(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int Allocator;
  uint64_t result;
  BOOL v12;
  int v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  Allocator = ooc_utils_createAllocator((uint64_t)v14, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (Allocator)
    return LH_ERROR_to_VERROR(Allocator);
  Allocator = PNEW_StringList_Con((uint64_t)v14, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a3);
  if (Allocator)
    return LH_ERROR_to_VERROR(Allocator);
  Allocator = PNEW_StringList_Con((uint64_t)v14, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a4);
  if (Allocator)
    return LH_ERROR_to_VERROR(Allocator);
  Allocator = PNEW_StringList_Con((uint64_t)v14, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a5);
  if (Allocator)
    return LH_ERROR_to_VERROR(Allocator);
  LODWORD(result) = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a2, 0, 0, (_QWORD *)*a3, &v13);
  if ((result & 0x80000000) != 0 || v13)
  {
    if ((int)result < 0)
      return result;
    else
      return 2347769856;
  }
  else
  {
    LODWORD(result) = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a2, 0, 0, (_QWORD *)*a4, &v13);
    if (v13)
      v12 = (int)result <= -1;
    else
      v12 = 1;
    if (v12)
      return result;
    else
      return 2347769856;
  }
}

uint64_t CLM_ApplyRules(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, char *a5, char *a6, unsigned int a7, _QWORD *a8, _QWORD **a9, _QWORD **a10)
{
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v23;
  _BOOL8 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v31;
  int v32;

  v32 = 0;
  v17 = hlp_CheckDoAlignment(a8, a9, a10);
  v18 = CLM_GiveLanguageBuffer(a4, a2, a3, 0);
  if (v18)
  {
    v19 = v18;
    if (*(_DWORD *)(v18 + 8))
    {
      v31 = v17;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = CLM_SearchAndReplace(a1, *(_BYTE **)(*(_QWORD *)(v19 + 16) + v20), *(char **)(*(_QWORD *)(v19 + 16) + v20 + 16), *(_QWORD *)(*(_QWORD *)(v19 + 16) + v20 + 8), a5, (uint64_t)a6, a7);
        v24 = v23;
        if (v23)
        {
          if (v23 & 0x80000000)
            break;
        }
        else
        {
          cstdlib_strcpy(a5, a6);
          if (v31)
          {
            if (!v22)
            {
              v22 = 1;
              if ((CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a6, 0, 0, *a10, &v32) & 0x80000000) == 0 && !v32)
              {
                if ((CLM_AlignPhonlists(*(_QWORD *)(a1 + 24), (uint64_t)a8, (uint64_t)*a9, (uint64_t)*a10) & 0x80000000) != 0)
                {
                  v22 = 1;
                }
                else
                {
                  v25 = *a9;
                  *a9 = *a10;
                  *a10 = v25;
                  StringList_Reset(v25);
                  v22 = 0;
                }
              }
            }
          }
        }
        ++v21;
        v20 += 24;
      }
      while (v21 < *(unsigned int *)(v19 + 8));
      if (v31)
      {
        v26 = *a10;
        *a10 = *a9;
        *a9 = v26;
        if (v22)
        {
          StringList_Reset(a8);
          StringList_Reset(*a9);
          StringList_Reset(*a10);
        }
      }
    }
    else
    {
      v24 = 0;
      if (v17)
      {
        v28 = *a10;
        *a10 = *a9;
        *a9 = v28;
      }
    }
  }
  else
  {
    if (v17)
    {
      v27 = *a10;
      *a10 = *a9;
      *a9 = v27;
    }
    return 1;
  }
  return v24;
}

uint64_t CLM_ApplyPhonemeMapping(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, char *a5, char *a6, unsigned int a7, _QWORD *a8, _QWORD **a9, _QWORD **a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int Allocator;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  unsigned __int16 v27;
  size_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int CountStrings;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  unsigned __int16 v42;
  const char *v43;
  const char *v44;
  const char *v45;
  int v46;
  const char *v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  const char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned __int16 v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  uint64_t v64;
  BOOL v65;
  const char *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  _OWORD v71[2];
  uint64_t v72;

  v69 = 0;
  v70 = 0;
  v16 = 2347769856;
  v17 = CLM_GiveLanguageBuffer(a4, a2, a3, 1);
  if (!v17)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"Invalid Language : %s", v18, v19, v20, (uint64_t)a4);
    return v16;
  }
  if (a6)
  {
    v21 = v17;
    v72 = 0;
    memset(v71, 0, sizeof(v71));
    Allocator = ooc_utils_createAllocator((uint64_t)v71, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
    if (Allocator
      || (Allocator = PNEW_StringList_Con((uint64_t)v71, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)&v70)) != 0)
    {
      v23 = LH_ERROR_to_VERROR(Allocator);
    }
    else
    {
      v23 = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a5, 0, 0, v70, 0);
    }
    v24 = v23;
    if ((v23 & 0x80000000) == 0)
    {
      v68 = v23;
      v25 = (const char *)(v21 + 8);
      *(_QWORD *)&v71[0] = 0;
      v67 = (uint64_t)a8;
      v26 = hlp_CheckDoAlignment(a8, a9, a10);
      *a6 = 0;
      if (StringList_GetCountStrings((uint64_t)v70))
      {
        v27 = 0;
        v28 = a7;
        while (1)
        {
          v29 = (char *)StringList_GetAt((uint64_t)v70, v27);
          hlp_FindPhonemeMapping(v25, v29, v71, &v69);
          if (*(_QWORD *)&v71[0])
            v29 = *(char **)&v71[0];
          v30 = cstdlib_strlen(a6);
          if (v30 + cstdlib_strlen(v29) + 1 > v28)
            break;
          cstdlib_strcat(a6, v29);
          if (StringList_GetCountStrings((uint64_t)v70) <= ++v27)
            goto LABEL_13;
        }
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50003, 0, v31, v32, v33, v34, v63);
        return v16;
      }
LABEL_13:
      if (!v26)
        goto LABEL_30;
      v35 = v70;
      v24 = v68;
      if (v70)
      {
        v36 = *a9;
        if (*a9)
        {
          CountStrings = StringList_GetCountStrings((uint64_t)v70);
          v38 = StringList_GetCountStrings((uint64_t)v36);
          v39 = v38;
          v40 = CountStrings != 0;
          if (v38 && CountStrings)
          {
            v64 = (uint64_t)v35;
            v41 = 0;
            v42 = 0;
            while (2)
            {
              v65 = CountStrings > v42;
              while (1)
              {
                v43 = (const char *)StringList_GetAt((uint64_t)v36, (unsigned __int16)v41);
                if (cstdlib_strcmp(v43, "*"))
                  break;
                if (v39 <= (unsigned __int16)++v41 || CountStrings <= v42)
                {
                  v24 = v68;
                  v40 = v65;
                  if (v39 > (unsigned __int16)v41)
                    goto LABEL_39;
LABEL_45:
                  if (!v40)
                  {
LABEL_46:
                    if (!StringList_GetCountStrings((uint64_t)*a9))
                      goto LABEL_31;
                    v50 = 0;
                    v51 = 0;
                    v66 = v25;
                    while (2)
                    {
                      v52 = (char *)StringList_GetAt((uint64_t)*a9, (unsigned __int16)v51);
                      hlp_FindPhonemeMapping(v25, v52, v71, &v69);
                      if (v50)
                      {
                        v50 = 1;
                        goto LABEL_66;
                      }
                      v53 = *(const char **)&v71[0];
                      v54 = v69;
                      v55 = *a9;
                      v56 = *a10;
                      if (!cstdlib_strcmp(v52, "*"))
                        goto LABEL_62;
                      if (v53)
                      {
                        if (cstdlib_strlen(v53))
                        {
                          if (v54)
                          {
                            if (StringList_GetCountStrings(v54))
                            {
                              v57 = 0;
                              while (1)
                              {
                                v58 = (char *)StringList_GetAt(v54, v57);
                                v59 = CLM_PhonList_Append((uint64_t)v56, v58);
                                if (v59 < 0)
                                  break;
                                if (v57)
                                {
                                  v60 = CLM_PhonList_InsertAt((uint64_t)v55, (unsigned __int16)++v51, "*");
                                  if (v60 < 0)
                                  {
                                    v59 = v60;
                                    v25 = v66;
                                    goto LABEL_65;
                                  }
                                  v59 = CLM_PhonList_InsertAt(v67, (unsigned __int16)v51, "*");
                                  v25 = v66;
                                  if (v59 < 0)
                                    goto LABEL_65;
                                }
                                if (StringList_GetCountStrings(v54) <= ++v57)
                                  goto LABEL_65;
                              }
                            }
                            else
                            {
                              v59 = 0;
                            }
                          }
                          else
                          {
                            v59 = -1947197440;
                          }
                          goto LABEL_65;
                        }
LABEL_62:
                        v61 = (uint64_t)v56;
                        v62 = "*";
                      }
                      else
                      {
                        v61 = (uint64_t)v56;
                        v62 = v52;
                      }
                      v59 = CLM_PhonList_Append(v61, v62);
LABEL_65:
                      v50 = v59 >> 31;
                      v24 = v59 & ~(v59 >> 31);
LABEL_66:
                      if (StringList_GetCountStrings((uint64_t)*a9) <= (unsigned __int16)++v51)
                        goto LABEL_31;
                      continue;
                    }
                  }
                  goto LABEL_31;
                }
              }
              v44 = (const char *)StringList_GetAt((uint64_t)v36, (unsigned __int16)v41);
              v45 = (const char *)StringList_GetAt(v64, v42);
              v46 = cstdlib_strcmp(v44, v45);
              if (!v46)
                ++v42;
              ++v41;
              v40 = CountStrings > v42;
              if (!v46 && v39 > (unsigned __int16)v41 && CountStrings > v42)
                continue;
              break;
            }
            if (!v46)
            {
              v24 = v68;
              if (v39 > (unsigned __int16)v41)
                goto LABEL_39;
              goto LABEL_45;
            }
LABEL_30:
            v24 = v68;
          }
          else
          {
            if (!v38)
              goto LABEL_45;
            LOWORD(v41) = 0;
LABEL_39:
            if (v39 <= (unsigned __int16)v41)
              goto LABEL_46;
            do
            {
              v48 = (const char *)StringList_GetAt((uint64_t)v36, (unsigned __int16)v41);
              v49 = cstdlib_strcmp(v48, "*");
              if (v49)
                break;
              LOWORD(v41) = v41 + 1;
            }
            while (v39 > (unsigned __int16)v41);
            if (!v49)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_31:
    hlp_FreePhonlist(a1, (uint64_t *)&v70);
    return v24;
  }
  return v16;
}

uint64_t hlp_FreePhonlist(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  result = ooc_utils_createAllocator((uint64_t)v4, *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return LH_ERROR_to_VERROR(result);
  if (a2)
  {
    if (*a2)
    {
      result = OOC_PlacementDeleteObject((uint64_t)v4, *a2);
      *a2 = 0;
    }
  }
  return result;
}

uint64_t CLM_TokenizeTranscription(uint64_t a1, int a2, char *a3, char *a4, unsigned int a5, _DWORD *a6)
{
  if ((safeh_HandleCheck(a1, a2, 63000, 216) & 0x80000000) != 0 || !a1)
    return 2347769864;
  else
    return CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a3, a4, a5, 0, a6);
}

uint64_t CLM_GetFeClmCompInfo(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;

  *a3 = 0;
  v5 = safeh_HandleCheck(a1, a2, 63000, 216);
  result = 2347769864;
  if ((v5 & 0x80000000) == 0 && a1)
  {
    if (*(_DWORD *)(a1 + 200))
    {
      v7 = 0;
      result = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), (uint64_t)"fe_clm_component", &v7);
      if ((result & 0x80000000) == 0)
        *a3 = v7;
    }
    else
    {
      return v5;
    }
  }
  return result;
}

BOOL CLM_HasData(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;

  v3 = safeh_HandleCheck(a1, a2, 63000, 216);
  result = 0;
  if ((v3 & 0x80000000) == 0)
  {
    if (a1)
      return *(_QWORD *)(a1 + 48) != 0;
  }
  return result;
}

uint64_t CLM_ClassOpen(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2347769863;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

uint64_t CLM_ClassClose()
{
  return 0;
}

uint64_t hlp_GetLanguage(uint64_t a1, char *a2)
{
  uint64_t Str;
  size_t v5;
  unint64_t v6;
  size_t v7;
  char *__s;

  __s = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(a1, (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) == 0)
  {
    v5 = 0;
    if (cstdlib_strlen(__s))
    {
      do
      {
        v6 = v5;
        a2[v5] = cstdlib_tolower(__s[v5]);
        ++v5;
        v7 = cstdlib_strlen(__s);
      }
      while (v6 <= 1 && v5 < v7);
    }
    a2[v5] = 0;
    if (cstdlib_strcmp(__s, a2))
      return paramc_ParamSetStr(a1, (uint64_t)"langcode", a2);
  }
  return Str;
}

uint64_t CLM_GetSuitableLocationOfFeCLMComponent(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 63000, 216);
  if ((result & 0x80000000) != 0)
    return 2347769864;
  *a3 = *(_DWORD *)(a1 + 200) != 0;
  return result;
}

uint64_t CLM_ValidateTranscriptionEx(uint64_t a1, int a2, char *a3, char *a4, char *a5, _DWORD *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  unint64_t i;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;

  v14 = 2347769864;
  v15 = safeh_HandleCheck(a1, a2, 63000, 216);
  if ((v15 & 0x80000000) != 0 || !a1)
    return v14;
  v16 = v15;
  if ((safeh_HandleCheck(a1, a2, 63000, 216) & 0x80000000) != 0 || !*(_QWORD *)(a1 + 48))
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM_ValidateTranscriptionEx : CLM data not available, assume valid transcription", v17, v18, v19, v45);
    *a6 = 1;
    return v16;
  }
  if (!CLM_GiveLanguageBuffer(a3, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 160), 2))
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM_ValidateTranscriptionEx : CLM data not available for %s", v20, v21, v22, (uint64_t)a3);
    *a6 = 0;
    return v16;
  }
  v47 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM_ValidateTranscriptionEx : Begin (%s)", v20, v21, v22, (uint64_t)a5);
  CLM_GetFeClmCompInfo(a1, a2, &v47);
  v23 = v47;
  if (v47)
  {
    v24 = LH_stricmp((char *)(a1 + 56), a3);
    if (a4)
    {
      if (!v24 && cstdlib_strlen(a4) && *(_WORD *)(a1 + 204))
      {
        v25 = 0;
        v26 = 0;
        do
        {
          if (!LH_stricmp((char *)(*(_QWORD *)(a1 + 208) + v25), a4))
            break;
          ++v26;
          v25 += 16;
        }
        while (v26 < *(unsigned __int16 *)(a1 + 204));
      }
    }
  }
  *a6 = 1;
  v27 = CLM_DeleteNonPhoneChars(a1, a5);
  if ((v27 & 0x80000000) != 0)
  {
    v36 = 0;
    v14 = v27;
  }
  else
  {
    v31 = (2 * cstdlib_strlen(a5)) | 1;
    v36 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), v31, 1);
    if (v36)
    {
      v14 = CLM_ValidateInForeignLooLoanSet(a1, a5, v36, v31);
      if ((v14 & 0x80000000) == 0 && a7 == 1)
      {
        if (v23)
        {
          if (!*a6)
          {
            v37 = LH_stricmp((char *)(a1 + 56), a3);
            if (a4)
            {
              if (!v37 && !cstdlib_strlen(a4) && *(_WORD *)(a1 + 204))
              {
                v38 = 0;
                for (i = 0; i < *(unsigned __int16 *)(a1 + 204); ++i)
                {
                  v40 = *(_QWORD *)(a1 + 208);
                  *a6 = 1;
                  v14 = CLM_ValidateInForeignLooLoanSet(a1, a5, v36, v31);
                  if ((v14 & 0x80000000) != 0)
                    break;
                  if (*a6 == 1)
                  {
                    cstdlib_strcpy(a4, (const char *)(v40 + v38));
                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"Extended phoneme set %s valid, so returned as foreign loan phoneme set", v42, v43, v44, (uint64_t)a4);
                    break;
                  }
                  v38 += 16;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 50000, 0, v32, v33, v34, v35, v46);
      v14 = 2347769866;
    }
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), (uint64_t)"CLM", 4, 0, (uint64_t)"CLM_ValidateTranscriptionEx : End (%s)", v28, v29, v30, (uint64_t)a5);
  if (v36)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 8), (uint64_t)v36);
  return v14;
}

uint64_t CLM_ValidateInForeignLooLoanSet(uint64_t a1, char *a2, char *a3, unsigned int a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  const char *v10;
  char __dst[20];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = CLM_SplitWordInPhonemes(*(_QWORD *)(a1 + 24), a2, a3, a4, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v10 = 0;
    v7 = extstdlib_strtok_r(a3, " ", &v10);
    *a2 = 0;
    if (v7)
    {
      v8 = v7;
      do
      {
        cstdlib_strcat(a2, v8);
        cstdlib_strcpy(__dst, " ");
        cstdlib_strcat(__dst, v8);
        cstdlib_strcat(__dst, " ");
        v8 = extstdlib_strtok_r(0, " ", &v10);
      }
      while (v8);
    }
  }
  return v6;
}

uint64_t CLM_ValidateTranscription(uint64_t a1, int a2, char *a3, char *__src, char *a5, _DWORD *a6)
{
  char *v11;
  char __dst[4];

  if (__src)
  {
    v11 = __dst;
    cstdlib_strcpy(__dst, __src);
  }
  else
  {
    v11 = 0;
  }
  return CLM_ValidateTranscriptionEx(a1, a2, a3, v11, a5, a6, 0);
}

uint64_t CLM_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2347769857;
  result = 0;
  *a2 = &ICLM;
  return result;
}

_QWORD *hlp_CheckDoAlignment(_QWORD *result, _QWORD **a2, _QWORD **a3)
{
  int CountStrings;
  int v6;

  if (result)
  {
    CountStrings = StringList_GetCountStrings((uint64_t)result);
    result = 0;
    if (a2)
    {
      if (CountStrings)
      {
        result = *a2;
        if (*a2)
        {
          v6 = StringList_GetCountStrings((uint64_t)result);
          result = 0;
          if (a3)
          {
            if (v6)
            {
              result = *a3;
              if (*a3)
              {
                StringList_Reset(result);
                return (_QWORD *)(CountStrings == v6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

const char *hlp_FindPhonemeMapping(const char *result, char *__s2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  const char *v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;

  *a3 = 0;
  *a4 = 0;
  v4 = *(unsigned int *)result;
  if ((_DWORD)v4)
  {
    v8 = result;
    v9 = 0;
    for (i = 0; i < v4; ++i)
    {
      v11 = *((_QWORD *)v8 + 1);
      result = *(const char **)(v11 + v9);
      if (result && *(_QWORD *)(v11 + v9 + 8))
      {
        result = (const char *)cstdlib_strcmp(result, __s2);
        if (!(_DWORD)result)
        {
          *a3 = *(_QWORD *)(*((_QWORD *)v8 + 1) + v9 + 8);
          *a4 = *(_QWORD *)(*((_QWORD *)v8 + 1) + v9 + 16);
          return result;
        }
        v4 = *(unsigned int *)v8;
      }
      v9 += 24;
    }
  }
  return result;
}

_QWORD *CLM_UnloadSettings(uint64_t a1)
{
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 88), *(_DWORD *)(a1 + 96));
  *(_DWORD *)(a1 + 96) = 0;
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 104), *(_DWORD *)(a1 + 112));
  *(_DWORD *)(a1 + 112) = 0;
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 120), *(_DWORD *)(a1 + 128));
  *(_DWORD *)(a1 + 128) = 0;
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 136), *(_DWORD *)(a1 + 144));
  *(_DWORD *)(a1 + 144) = 0;
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 72), *(_DWORD *)(a1 + 80));
  *(_DWORD *)(a1 + 80) = 0;
  CLM_EmptyLanguageStruct((_QWORD *)a1, (uint64_t *)(a1 + 152), *(_DWORD *)(a1 + 160));
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  CLM_FreePreCompiledSplitWordRegEx((_QWORD *)a1);
  return CLM_FreePreCompiledReplacementRegEx((_QWORD *)a1);
}

uint64_t getObjcForThisApi_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *__s1;

  result = 0;
  __s1 = 0;
  if (a1 && a2)
  {
    if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
      || !__s1
      || !*__s1
      || !cstdlib_strcmp(__s1, "internal"))
    {
      a1 = a2;
    }
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t IRefCnt_ObjcLoadCLMData(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _BYTE *v52;
  char __s2[4];
  char v54[8];
  int v55;
  uint64_t v56;
  _QWORD *v57;
  char __s1[4];
  char v59;
  char v60[256];
  char v61[256];
  char __dst[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v50 = 0;
  inited = InitRsrcFunction(a1, a2, &v50);
  if ((inited & 0x80000000) != 0)
    goto LABEL_38;
  v11 = 2347769856;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v50 + 8), 1, 304);
  *(_QWORD *)(a5 + 48) = v12;
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 32), (uint64_t)"CLM", 50000, 0, v13, v14, v15, v16, v49);
    v11 = 2347769866;
    goto LABEL_39;
  }
  *v12 = v50;
  v12[1] = a1;
  v12[2] = a2;
  if (cstdlib_strlen(a3) - 256 < 0xFFFFFFFFFFFFFEFFLL)
    goto LABEL_39;
  cstdlib_strcpy((char *)(*(_QWORD *)(a5 + 48) + 48), a3);
  v59 = 0;
  *(_DWORD *)__s1 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  strcpy(v54, "CLMP");
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  *(_OWORD *)__dst = 0u;
  v63 = 0u;
  v52 = 0;
  v17 = *(uint64_t **)(a5 + 48);
  inited = hlp_GetLanguage(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 40), __s2);
  if ((inited & 0x80000000) != 0)
    goto LABEL_38;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 40), (uint64_t)"clcpppipelinemode", &v52) & 0x80000000) != 0)
  {
    v18 = 1;
  }
  else
  {
    v18 = 1;
    if (v52)
      v18 = *v52 == 0;
  }
  v19 = *(_QWORD *)(*v17 + 24);
  if (v19)
    v20 = "clm";
  else
    v20 = "clm.dat";
  if (v19)
    v21 = 2;
  else
    v21 = 1;
  v22 = ssftriff_reader_ObjOpen((_WORD *)v17[1], v17[2], v21, v20, v54, 1031, (uint64_t *)&v57);
  if ((v22 & 0x80000000) == 0)
  {
    v30 = 0;
    while (!v30
         && (ssftriff_reader_OpenChunk((uint64_t)v57, (__int32 *)__s1, (unsigned int *)&v55, &v56, v26, v27, v28, v29) & 0x80000000) == 0)
    {
      if (cstdlib_strcmp(__s1, "CLMP"))
        goto LABEL_21;
      v51 = 256;
      v31 = ssftriff_reader_ReadStringZ((uint64_t)v57, v56, v55, 0, v60, &v51);
      if ((v31 & 0x80000000) != 0)
        goto LABEL_42;
      if (!cstdlib_strstr(v60, __s2))
      {
LABEL_21:
        v30 = 0;
      }
      else
      {
        v31 = ssftriff_reader_DetachChunkData((uint64_t)v57, (void **)v17 + 3, v17 + 4, v32, v33, v34, v35, v36);
        if ((v31 & 0x80000000) != 0)
        {
LABEL_42:
          v11 = v31;
          ssftriff_reader_CloseChunk((uint64_t)v57);
          ssftriff_reader_ObjClose(v57, v42, v43, v44, v45, v46, v47, v48);
          goto LABEL_39;
        }
        v37 = v51 | 0xFFFFFFFC;
        if ((v51 & 3) == 0)
          v37 = 0;
        v38 = v51 - v37;
        v17[4] += v38;
        v30 = 1;
        *((_DWORD *)v17 + 10) = v55 - v38;
        *((_DWORD *)v17 + 11) = 1;
      }
      v39 = ssftriff_reader_CloseChunk((uint64_t)v57);
      if ((v39 & 0x80000000) != 0)
      {
        v11 = v39;
        ssftriff_reader_ObjClose(v57, v23, v24, v25, v26, v27, v28, v29);
        v17[3] = 0;
        goto LABEL_39;
      }
    }
    v11 = ssftriff_reader_ObjClose(v57, v23, v24, v25, v26, v27, v28, v29);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_39;
    goto LABEL_33;
  }
  if (v18)
  {
    v11 = v22;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 32), (uint64_t)"CLM", 30006, (uint64_t)"%s", v26, v27, v28, v29, "clm.dat not found");
    goto LABEL_39;
  }
  cstdlib_strcpy(__dst, "clm/");
  cstdlib_strcat(__dst, __s2);
  inited = brokeraux_ComposeBrokerString(*(_QWORD *)(a5 + 24), __dst, 0, 1, __s2, 0, 0, v61, 0x100uLL);
  if ((inited & 0x80000000) != 0
    || (inited = brk_DataOpenEx(*(_QWORD *)(*v17 + 24), (uint64_t)v61, 1, (uint64_t)(v17 + 3)),
        (inited & 0x80000000) != 0))
  {
LABEL_38:
    v11 = inited;
  }
  else
  {
    *((_DWORD *)v17 + 10) = 0;
    v11 = brk_DataMapEx(*(_QWORD *)(*v17 + 24), v17[3], 0, (uint64_t)(v17 + 5), (uint64_t)(v17 + 4));
    if ((v11 & 0x80000000) == 0)
    {
LABEL_33:
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 48);
      return v11;
    }
    brk_DataClose(*(_QWORD *)(*v17 + 24), v17[3]);
  }
LABEL_39:
  v40 = *(_QWORD *)(a5 + 48);
  if (v40)
  {
    heap_Free(*(_QWORD **)(v50 + 8), v40);
    *(_QWORD *)(a5 + 48) = 0;
  }
  return v11;
}

uint64_t IRefCnt_ObjcUnloadCLMData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a3 + 32);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 44))
    {
      ssftriff_reader_ReleaseChunkData(*(_QWORD **)(v8 + 24), a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      brk_DataUnmap(*(_QWORD *)(*(_QWORD *)v8 + 24), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
      brk_DataClose(*(_QWORD *)(*(_QWORD *)v8 + 24), *(_QWORD *)(v8 + 24));
    }
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    heap_Free(*(_QWORD **)(*(_QWORD *)v8 + 8), v8);
  }
  return 0;
}

uint64_t CLM_LoadRules(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int *a5)
{
  uint64_t *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t result;
  int v14;

  if (a4)
    v9 = (uint64_t *)(a1 + 120);
  else
    v9 = (uint64_t *)(a1 + 88);
  if (a4)
    v10 = (uint64_t *)(a1 + 136);
  else
    v10 = (uint64_t *)(a1 + 104);
  if (a4)
    v11 = (unsigned int *)(a1 + 128);
  else
    v11 = (unsigned int *)(a1 + 96);
  if (a4)
    v12 = (unsigned int *)(a1 + 144);
  else
    v12 = (unsigned int *)(a1 + 112);
  result = CLM_EnumerateLanguages(a1, v9, v11, 0, a2, a3, *a5);
  if ((result & 0x80000000) == 0)
  {
    if ((CLM_FindSeperationRecord(a2, a3, a5) & 0x80000000) != 0)
    {
      return 2347777666;
    }
    else
    {
      v14 = CLM_EnumerateLanguages(a1, v10, v12, 0, a2, a3, *a5);
      return v14 & (v14 >> 31);
    }
  }
  return result;
}

uint64_t CLM_GetForeignLoanPhonemeSets(uint64_t a1, int a2, _WORD *a3, _QWORD *a4)
{
  int v7;
  uint64_t result;

  v7 = safeh_HandleCheck(a1, a2, 63000, 216);
  result = 2347769864;
  if ((v7 & 0x80000000) == 0)
  {
    if (a1)
    {
      result = 0;
      *a3 = *(_WORD *)(a1 + 204);
      *a4 = *(_QWORD *)(a1 + 208);
    }
  }
  return result;
}

uint64_t fe_normout_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62387, 120);
  if ((result & 0x80000000) != 0)
    return 2340429832;
  if (a1)
  {
    v4 = a1[14];
    if (v4)
      heap_Free(*(_QWORD **)(*a1 + 8), v4);
    a1[14] = 0;
    objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_normout_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62387, 120);
  if ((result & 0x80000000) != 0)
    return 2340429832;
  if (a1)
    return fe_normout_get_fecfg(a1);
  return result;
}

uint64_t fe_normout_get_fecfg(uint64_t a1)
{
  uint64_t result;
  char v3;
  __int16 v4;
  _BYTE **v5;

  v5 = 0;
  v4 = 0;
  v3 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "usetntag", &v5, &v4, &v3);
  if ((result & 0x80000000) == 0)
  {
    if (v4 == 1 && v5 && **v5 == 49)
      *(_DWORD *)(a1 + 104) = 1;
    v4 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE ***, __int16 *, char *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "mdesegpos_morpheme_processing", &v5, &v4, &v3);
    if ((result & 0x80000000) == 0 && v4 == 1 && v5 && **v5 == 49)
      *(_DWORD *)(a1 + 108) = 1;
  }
  return result;
}

uint64_t fe_normout_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62387, 120);
  if ((int)result >= 0)
    return result;
  else
    return 2340429832;
}

uint64_t fe_normout_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  uint64_t v33;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v80;
  unsigned __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v87;
  unsigned __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int16 v121;
  int NextWord;
  __int16 v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  size_t v132;
  unsigned __int16 v133;
  unsigned __int16 v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  int *v140;
  int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint32x2_t v146;
  int v147;
  uint32x2_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *);
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int16 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned __int16 v187;
  unsigned __int16 v188;
  __int16 v189;
  unsigned __int16 v190;
  char *v191;
  int v192;
  uint64_t v193;
  char *__src;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int16 v207;
  unsigned __int16 v208;
  unsigned __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  int v217;
  unint64_t v218;
  char *v219;
  __int16 v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  char *__s;
  unsigned __int16 v228;
  int v229;
  unsigned int v230;
  unsigned __int16 v231;
  char __dst[128];
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  __s = 0;
  v226 = 0;
  v225 = 0;
  v224 = 0;
  v223 = 0;
  v222 = 0;
  v221 = 0;
  v220 = 0;
  v218 = 0;
  v219 = 0;
  v217 = 0;
  v216 = 0;
  v215 = 0;
  v214 = 0;
  v213 = 0;
  v212 = 0;
  v211 = 0;
  v210 = 1;
  v209 = 1;
  v208 = 1;
  v207 = 0;
  v205 = 0u;
  v206 = 0u;
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  cstdlib_strcpy(__dst, "normout");
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62387, 120) & 0x80000000) != 0)
    return 2340429832;
  *a5 = 1;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(a1[4] + 112))(a1[2], a1[3], &v212, 0);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[1] + 104))(a3, a4, 1, 0, (char *)&v226 + 2);
  if ((v11 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(a1[1] + 184))(a3, a4, HIWORD(v226), 0, (char *)&v216 + 2) & 0x80000000) == 0&& HIWORD(v216) == 1)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(a1[1] + 176))(a3, a4, HIWORD(v226), 0, &__s, &v224);
    if ((v11 & 0x80000000) == 0 && (unsigned __int16)v224 >= 2u)
    {
      v12 = *(_QWORD **)(*a1 + 8);
      v13 = cstdlib_strlen(__s);
      v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
      if (!v14)
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v15, v16, v17, v18, v179);
        return 2340429834;
      }
      v19 = v14;
      cstdlib_strcpy(v14, __s);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(a1[1] + 176))(a3, a4, HIWORD(v226), 1, &v213, (char *)&v225 + 2);
      if ((v20 & 0x80000000) == 0)
      {
        v25 = HIWORD(v225);
        v26 = *(_DWORD *)(v213 + 12);
        log_Markers((uint64_t)a1, (uint64_t)"Markers IN", v213, HIWORD(v225), v21, v22, v23, v24);
        v231 = 0;
        v229 = 0;
        v230 = 0;
        v228 = 0;
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(a3, a4, 2, HIWORD(v226), &v231);
        v11 = v27;
        if ((v27 & 0x80000000) == 0)
        {
          v31 = v231;
          if (v231)
          {
            __src = v19;
            v32 = 0;
            while (1)
            {
              v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(a1[1] + 168))(a3, a4, v31, 0, 1, &v230, (char *)&v229 + 2);
              if ((v33 & 0x80000000) != 0)
                break;
              if (v230 > 0xA || ((1 << v230) & 0x610) == 0)
              {
                v38 = 0;
                v37 = v231;
              }
              else
              {
                v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[1] + 168))(a3, a4, v231, 1, 1, &v229, (char *)&v229 + 2);
                if ((v33 & 0x80000000) != 0)
                  break;
                v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[1] + 168))(a3, a4, v231, 2, 1, &v228, (char *)&v229 + 2);
                if ((v33 & 0x80000000) != 0)
                  break;
                v36 = (unsigned __int16)v229 > v32 || v228 > v32;
                v37 = v231;
                if (v36)
                {
                  v32 = v228;
                  v38 = 0;
                }
                else
                {
                  v38 = v231;
                }
              }
              v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 120))(a3, a4, v37, &v231);
              if ((v33 & 0x80000000) != 0)
                break;
              if ((_DWORD)v38)
              {
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 1, 0, (uint64_t)"%s", v28, v29, v30, (uint64_t)"Dropping nested word record");
                v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 192))(a3, a4, v38);
                if ((v33 & 0x80000000) != 0)
                  break;
              }
              v31 = v231;
              if (!v231)
              {
                v19 = __src;
                goto LABEL_40;
              }
            }
            v11 = v33;
            v149 = 0;
            v45 = 0;
            goto LABEL_121;
          }
        }
        if ((v27 & 0x80000000) != 0)
          goto LABEL_118;
LABEL_40:
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v28, v29, v30, v179);
        *((_QWORD *)&v196 + 1) = &v209;
        *(_QWORD *)&v197 = &v208;
        *(_QWORD *)&v196 = &v216;
        *(_QWORD *)&v195 = a1;
        *((_QWORD *)&v198 + 1) = v19;
        *(_QWORD *)&v199 = 0;
        *((_QWORD *)&v199 + 1) = &v211;
        *(_QWORD *)&v200 = (char *)&v224 + 2;
        *((_QWORD *)&v197 + 1) = (char *)&v215 + 2;
        *(_QWORD *)&v198 = &v210;
        *((_QWORD *)&v200 + 1) = &v214;
        *(_QWORD *)&v201 = &v215;
        *((_QWORD *)&v201 + 1) = (char *)&v214 + 2;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t, _WORD *, uint64_t), uint64_t (*)(uint64_t, uint64_t, unsigned __int16 *, uint64_t *), _QWORD, uint64_t (*)(), __int128 *))(a1[1] + 288))(a3, a4, HIWORD(v226), getSentenceAndInsertedCGNLengthPre, getSentenceAndInsertedCGNLength, 0, getSentenceAndInsertedCGNLengthPost, &v195);
        if ((v20 & 0x80000000) == 0)
        {
          LOWORD(v226) = WORD4(v195);
          v40 = (void *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (16 * (unsigned __int16)v216) | 1);
          v45 = (uint64_t)v40;
          if (v40)
          {
            cstdlib_memset(v40, 0, 0x10uLL);
            v46 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), v208 + 128);
            a1[8] = v46;
            if (v46)
            {
              cstdlib_strcpy(v46, "");
              v47 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), v209);
              a1[9] = v47;
              if (v47)
              {
                cstdlib_strcpy(v47, "");
                v48 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), v209);
                a1[10] = v48;
                if (v48)
                {
                  cstdlib_strcpy(v48, "");
                  v49 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), v208 + 128);
                  a1[11] = v49;
                  if (v49)
                  {
                    cstdlib_strcpy(v49, "");
                    if (!*((_DWORD *)a1 + 26))
                      goto LABEL_49;
                    v50 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), v209);
                    a1[12] = v50;
                    if (v50)
                    {
                      cstdlib_strcpy(v50, "");
LABEL_49:
                      v210 = 1;
                      *((_QWORD *)&v203 + 1) = v45;
                      v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, _WORD *, uint64_t *), _QWORD, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), __int128 *))(a1[1] + 288))(a3, a4, HIWORD(v226), 0, normOutFnc, 0, normOutFncPost, &v195);
                      if ((v51 & 0x80000000) == 0)
                      {
                        v192 = v26;
                        v193 = v25;
                        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"ORIG   : %s", v52, v53, v54, (uint64_t)v19);
                        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v55, v56, v57, v181);
                        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"L1: %s", v58, v59, v60, a1[8]);
                        v61 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(a1[4] + 120);
                        v62 = (const char *)a1[8];
                        v63 = cstdlib_strlen(v62);
                        v51 = v61(a1[2], a1[3], 0, v62, v63);
                        if ((v51 & 0x80000000) == 0)
                        {
                          log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"L2: %s", v64, v65, v66, a1[9]);
                          v67 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(a1[4] + 120);
                          v68 = (const char *)a1[9];
                          v69 = cstdlib_strlen(v68);
                          v51 = v67(a1[2], a1[3], 1, v68, v69);
                          if ((v51 & 0x80000000) == 0)
                          {
                            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"L3: %s", v70, v71, v72, a1[10]);
                            v73 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(a1[4] + 120);
                            v74 = (const char *)a1[10];
                            v75 = cstdlib_strlen(v74);
                            v51 = v73(a1[2], a1[3], 2, v74, v75);
                            if ((v51 & 0x80000000) == 0)
                            {
                              __src = v19;
                              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"L4: %s", v76, v77, v78, a1[11]);
                              v79 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(a1[4] + 120);
                              v80 = (const char *)a1[11];
                              v81 = cstdlib_strlen(v80);
                              v82 = v79(a1[2], a1[3], 3, v80, v81);
                              if ((v82 & 0x80000000) == 0)
                              {
                                if (!*((_DWORD *)a1 + 26)
                                  || (log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"L5: %s", v83, v84, v85, a1[12]), v86 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(a1[4] + 136), v87 = (const char *)a1[12], v88 = cstdlib_strlen(v87), v82 = v86(a1[2], a1[3], 4, v87, v88), (v82 & 0x80000000) == 0))
                                {
                                  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v83, v84, v85, v182);
                                  if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[4] + 80))(a1[2], a1[3], __dst) & 0x80000000) != 0)
                                  {
                                    v11 = 0;
                                    goto LABEL_143;
                                  }
                                  v82 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, int *))(a1[4] + 128))(a1[2], a1[3], 0, &v219, &v217);
                                  if ((v82 & 0x80000000) == 0)
                                  {
                                    v219[(unsigned __int16)v217] = 0;
                                    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"O1     : %s", v89, v90, v91, (uint64_t)v219);
                                    v82 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t *, char *))(a1[4] + 128))(a1[2], a1[3], 3, &v218, (char *)&v217 + 2);
                                    if ((v82 & 0x80000000) == 0)
                                    {
                                      *(_BYTE *)(v218 + HIWORD(v217)) = 0;
                                      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"O4     : %s", v92, v93, v94, v218);
                                      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"ORIGL1 : %s", v95, v96, v97, (uint64_t)v19);
                                      if (HIWORD(v217))
                                      {
                                        v98 = 0;
                                        v99 = 0;
                                        do
                                        {
                                          if (!cstdlib_strncmp((const char *)(v218 + v98), "▬", 3uLL)
                                            && cstdlib_strncmp(&v219[v99], "▬", 3uLL))
                                          {
                                            v100 = Utf8_LengthInUtf8chars(v218, v98);
                                            v99 = Utf8_LengthInBytes((unsigned __int8 *)v219, v100);
                                            cstdlib_memmove(&v219[v99 + 3], &v219[v99 + 1], (unsigned __int16)v217 - (unint64_t)v99);
                                            cstdlib_strncpy(&v219[v99], "▬", 3uLL);
                                            LOWORD(v217) = v217 + 2;
                                          }
                                          ++v98;
                                          ++v99;
                                        }
                                        while (v98 < HIWORD(v217));
                                      }
                                      v101 = v217;
                                      if ((_WORD)v217)
                                      {
                                        v102 = 0;
                                        do
                                        {
                                          v103 = (unsigned __int16)v102;
                                          if (v219[(unsigned __int16)v102] == 126)
                                          {
                                            if ((unsigned __int16)v102 < v101)
                                            {
                                              do
                                              {
                                                v219[v103] = v219[v103 + 1];
                                                v101 = v217;
                                                ++v103;
                                              }
                                              while (v103 < (unsigned __int16)v217);
                                            }
                                            LOWORD(v217) = --v101;
                                            --v102;
                                          }
                                          ++v102;
                                        }
                                        while ((unsigned __int16)v102 < v101);
                                      }
                                      v219[v101] = 0;
                                      v191 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, (unsigned __int16)v224 + 1);
                                      if (!v191)
                                      {
                                        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v104, v105, v106, v107, v183);
                                        v149 = 0;
                                        v150 = 0;
                                        v11 = 2340429834;
                                        goto LABEL_122;
                                      }
                                      cstdlib_strcpy(v191, v19);
                                      v108 = cstdlib_strlen(v191);
                                      cstdlib_memset((void *)a1[14], 0, 0x80uLL);
                                      v109 = fe_normout_split_words(a1, a3, a4, v219, a1[14], (unsigned __int16 *)&v221);
                                      if ((v109 & 0x80000000) != 0)
                                        goto LABEL_154;
                                      v109 = fe_normout_split_words(a1, a3, a4, v19, 0, (unsigned __int16 *)&v221 + 1);
                                      if ((v109 & 0x80000000) != 0)
                                        goto LABEL_154;
                                      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v110, v111, v112, v183);
                                      v113 = (unsigned __int16)v221;
                                      v114 = HIWORD(v221);
                                      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"comparing O1 (%d words) and ORIGL1 (%d words) ", v115, v116, v117, (unsigned __int16)v221);
                                      if (v114 != v113)
                                      {
                                        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"Mismatch number of orthographic words and number of phonetic words : abandon processing", v118, v119, v120, v184);
                                        v11 = 0;
LABEL_155:
                                        v150 = 0;
LABEL_156:
                                        v149 = (uint64_t)v191;
                                        goto LABEL_122;
                                      }
                                      v222 = 0;
                                      v121 = v224;
                                      if (!(_WORD)v224)
                                      {
                                        v189 = 0;
LABEL_147:
                                        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v118, v119, v120, v184);
                                        v207 = 0;
                                        LOWORD(v221) = 0;
                                        v206 = (unint64_t)v191;
                                        *(_QWORD *)&v202 = &v221;
                                        *((_QWORD *)&v202 + 1) = &v220;
                                        *(_QWORD *)&v204 = 0;
                                        *(_QWORD *)&v203 = &v207;
                                        v109 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, uint64_t, _WORD *, uint64_t), _QWORD, _QWORD, __int128 *))(a1[1] + 288))(a3, a4, HIWORD(v226), 0, MvToEqWordRecUpdFieldsFnc, 0, 0, &v195);
                                        if ((v109 & 0x80000000) == 0)
                                        {
                                          v150 = *((_QWORD *)&v206 + 1);
                                          v156 = (const char *)v206;
                                          v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, int *))(a1[1] + 160);
                                          v158 = HIWORD(v226);
                                          v159 = cstdlib_strlen((const char *)v206);
                                          v160 = a4;
                                          v149 = (uint64_t)v156;
                                          v161 = v157(a3, v160, v158, 0, (unsigned __int16)(v159 + 1), v156, &v225);
                                          if ((v161 & 0x80000000) != 0)
                                          {
                                            v11 = v161;
                                          }
                                          else
                                          {
                                            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"new SE_TEXT : %s", v162, v163, v164, (uint64_t)v156);
                                            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)" ", v165, v166, v167, v185);
                                            if ((_WORD)v216)
                                            {
                                              v171 = 0;
                                              v172 = v45 + 14;
                                              do
                                              {
                                                v173 = *(unsigned __int16 *)(v172 - 14);
                                                v172 += 16;
                                                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"WORDREC[%d] %d,%d --> %d,%d", v168, v169, v170, v173);
                                                ++v171;
                                              }
                                              while (v171 < (unsigned __int16)v216);
                                            }
                                            v174 = cstdlib_strlen(v156);
                                            *(_DWORD *)(v213 + 16) = v174;
                                            v212 += v189;
                                            v11 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[4] + 104))(a1[2], a1[3]);
                                            if ((v11 & 0x80000000) == 0)
                                              log_Markers((uint64_t)a1, (uint64_t)"Markers OUT", v213, v193, v175, v176, v177, v178);
                                          }
                                          goto LABEL_122;
                                        }
                                        goto LABEL_154;
                                      }
                                      v189 = 0;
                                      v190 = 0;
                                      v186 = v108;
                                      while (1)
                                      {
                                        if (getNextWord((_WORD *)&v222 + 1, (_WORD *)&v223 + 1, (uint64_t)__src, v121))
                                        {
                                          NextWord = getNextWord(&v222, &v223, (uint64_t)v219, (unsigned __int16)v217);
                                          v123 = HIWORD(v222);
                                          if (NextWord)
                                          {
                                            v124 = (unsigned __int16)v222;
                                            log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"COMPARE WORD[%d] \"%s\" and \"%s\"", v118, v119, v120, v190);
                                            if (cstdlib_strcmp(&__src[HIWORD(v222)], &v219[v124]))
                                            {
                                              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"   UPDATE WORD[%d] \"%s\" and \"%s\"", v118, v119, v120, v190);
                                              v125 = cstdlib_strstr(&v219[v124], "▲");
                                              if (v125)
                                              {
                                                v126 = 0;
                                                while (1)
                                                {
                                                  *((_QWORD *)&v204 + 1) = v125;
                                                  *(_QWORD *)&v205 = v126;
                                                  *((_QWORD *)&v205 + 1) = (char *)&v222 + 2;
                                                  v109 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t (*)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), __int128 *))(a1[1] + 280))(a3, a4, &v226, updateWordRecFnc, &v195);
                                                  if ((v109 & 0x80000000) != 0)
                                                    break;
                                                  v131 = (void *)*((_QWORD *)&v204 + 1);
                                                  v126 = v205;
                                                  HIWORD(v222) = **((_WORD **)&v205 + 1);
                                                  **((_BYTE **)&v204 + 1) = 0;
                                                  if (!v126)
                                                  {
                                                    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 43001, (uint64_t)"%s%s", v127, v128, v129, v130, "message");
                                                    v150 = 0;
                                                    v11 = 2340429831;
                                                    goto LABEL_156;
                                                  }
                                                  v132 = cstdlib_strlen((const char *)(v126 + 3));
                                                  cstdlib_memmove(v131, (const void *)(v126 + 3), v132 + 1);
                                                  v125 = cstdlib_strstr(&v219[v124], "▲");
                                                  if (!v125)
                                                    goto LABEL_86;
                                                }
LABEL_154:
                                                v11 = v109;
                                                goto LABEL_155;
                                              }
LABEL_86:
                                              v133 = cstdlib_strlen(&v219[v124]);
                                              v134 = cstdlib_strlen(&__src[HIWORD(v222)]);
                                              v187 = cstdlib_strlen(v191);
                                              v188 = v133;
                                              v135 = v133;
                                              if (v133 > v134)
                                              {
                                                v136 = (unsigned __int16)(v133 - v134 + v187);
                                                v137 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v191, (v136 + 1));
                                                if (!v137)
                                                {
                                                  v150 = 0;
                                                  v11 = 2340429834;
                                                  goto LABEL_156;
                                                }
                                                *(_BYTE *)(v137 + v136) = 0;
                                                v191 = (char *)v137;
                                              }
                                              v138 = v135 - v134;
                                              if (v135 == v134)
                                              {
                                                cstdlib_memcpy(&v191[HIWORD(v222) + (uint64_t)v189], &v219[(unsigned __int16)v222], v188);
                                                goto LABEL_106;
                                              }
                                              cstdlib_memmove(&v191[v135 + v189 + HIWORD(v222)], &v191[v134 + HIWORD(v222) + v189], v186 - (v134 + HIWORD(v222)));
                                              cstdlib_memcpy(&v191[HIWORD(v222) + (uint64_t)v189], &v219[(unsigned __int16)v222], v188);
                                              updateWordRecs((uint64_t)a1, a3, a4, v45, (unsigned __int16)v216, HIWORD(v222), v134, v188);
                                              if ((_DWORD)v193)
                                              {
                                                v139 = 0;
                                                v140 = (int *)(v213 + 12);
                                                while (1)
                                                {
                                                  v141 = *v140;
                                                  v140 += 8;
                                                  if (v141 - v192 > (unsigned __int16)(HIWORD(v222) + v189))
                                                    break;
                                                  if (v193 == ++v139)
                                                    goto LABEL_106;
                                                }
                                              }
                                              else
                                              {
                                                LOWORD(v139) = 0;
                                              }
                                              if (v193 > (unsigned __int16)v139)
                                              {
                                                v142 = v213;
                                                v139 = (unsigned __int16)v139;
                                                v143 = (unsigned int *)(v213 + 32 * (unsigned __int16)v139 + 12);
                                                do
                                                {
                                                  if (v139)
                                                  {
                                                    v144 = v138 + *v143;
                                                    if (*(_DWORD *)(v142 + 32 * (v139 - 1) + 12) > v144)
                                                      goto LABEL_105;
                                                  }
                                                  else
                                                  {
                                                    v144 = v138 + *(_DWORD *)(v142 + 12);
                                                  }
                                                  *v143 = v144;
LABEL_105:
                                                  ++v139;
                                                  v143 += 8;
                                                }
                                                while (v193 != v139);
                                              }
LABEL_106:
                                              v189 += v188 - v134;
                                              if (v135 < v134 && (int)(v134 - v135) >= 1)
                                              {
                                                v145 = 0;
                                                v146 = (uint32x2_t)vdup_n_s32(v134 - v135 - 1);
                                                v147 = v187 - 1;
                                                do
                                                {
                                                  v148 = vcge_u32(v146, (uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v145), (int8x8_t)0x100000000));
                                                  if ((v148.i8[0] & 1) != 0)
                                                    v191[v147] = 0;
                                                  if ((v148.i8[4] & 1) != 0)
                                                    v191[v187 + (v145 ^ 0xFFFFFFFE)] = 0;
                                                  v145 += 2;
                                                  v147 -= 2;
                                                }
                                                while (((v134 - v135 + 1) & 0xFFFFFFFE) != v145);
                                              }
                                            }
                                            v123 = HIWORD(v223);
                                            LOWORD(v222) = v223;
                                            ++v190;
                                            v121 = v224;
                                          }
                                        }
                                        else
                                        {
                                          v123 = HIWORD(v222);
                                        }
                                        HIWORD(v222) = v123 + 1;
                                        if ((unsigned __int16)(v123 + 1) >= v121)
                                          goto LABEL_147;
                                      }
                                    }
                                  }
                                }
                              }
                              v11 = v82;
LABEL_143:
                              v149 = 0;
LABEL_121:
                              v150 = 0;
LABEL_122:
                              v19 = __src;
                              goto LABEL_124;
                            }
                          }
                        }
                      }
                      v11 = v51;
                      v149 = 0;
LABEL_119:
                      v150 = 0;
LABEL_124:
                      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v19);
                      if (v150)
                        heap_Free(*(_QWORD **)(*a1 + 8), v150);
                      if (v45)
                        heap_Free(*(_QWORD **)(*a1 + 8), v45);
                      if (v149)
                        heap_Free(*(_QWORD **)(*a1 + 8), v149);
                      v151 = a1[8];
                      if (v151)
                      {
                        heap_Free(*(_QWORD **)(*a1 + 8), v151);
                        a1[8] = 0;
                      }
                      v152 = a1[9];
                      if (v152)
                      {
                        heap_Free(*(_QWORD **)(*a1 + 8), v152);
                        a1[9] = 0;
                      }
                      v153 = a1[10];
                      if (v153)
                      {
                        heap_Free(*(_QWORD **)(*a1 + 8), v153);
                        a1[10] = 0;
                      }
                      v154 = a1[11];
                      if (v154)
                      {
                        heap_Free(*(_QWORD **)(*a1 + 8), v154);
                        a1[11] = 0;
                      }
                      v155 = a1[12];
                      if (v155)
                      {
                        heap_Free(*(_QWORD **)(*a1 + 8), v155);
                        a1[12] = 0;
                      }
                      return v11;
                    }
                  }
                }
              }
            }
          }
          log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v41, v42, v43, v44, v180);
          v149 = 0;
          v150 = 0;
          v11 = 2340429834;
          goto LABEL_124;
        }
      }
      v11 = v20;
LABEL_118:
      v149 = 0;
      v45 = 0;
      goto LABEL_119;
    }
  }
  return v11;
}

uint64_t log_Markers(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_NORMOUT", 5, 0, a2, a6, a7, a8, v19);
  if (a4)
  {
    v15 = a4;
    v16 = a3 + 8;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v18 = *(unsigned int *)(v16 - 8);
      if ((_DWORD)v18 == 0x4000)
        result = log_OutText(v17, (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%d,%d) Cur(%d,%d)", v12, v13, v14, *(unsigned int *)(v16 - 4));
      else
        result = log_OutText(v17, (uint64_t)"FE_NORMOUT", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%d,%d) Cur(%d,%d)", v12, v13, v14, v18);
      v16 += 32;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t getSentenceAndInsertedCGNLengthPre(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  *(_WORD *)(a4 + 8) = *a3;
  return 0;
}

uint64_t getSentenceAndInsertedCGNLength(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  __int16 v14;
  __int16 v15;
  char *__s;
  unsigned __int16 v18;
  int v19;
  unsigned int v20;

  v19 = 0;
  v20 = 0;
  v18 = 0;
  __s = 0;
  v8 = *a4;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(*a4 + 8) + 168))(a1, a2, *a3, 0, 1, &v20, (char *)&v19 + 2);
  if ((v9 & 0x80000000) != 0)
    return v9;
  ++*(_WORD *)a4[2];
  v10 = v20;
  if (v20 <= 0xA && ((1 << v20) & 0x610) != 0)
  {
    v11 = (_DWORD *)a4[6];
    if (!*v11)
    {
      ++*(_WORD *)a4[3];
      ++*(_WORD *)a4[4];
    }
    *v11 = 0;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(v8 + 8)
                                                                                               + 168))(a1, a2, *a3, 1, 1, &v19, (char *)&v19 + 2);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(v8 + 8) + 168))(a1, a2, *a3, 2, 1, &v18, (char *)&v19 + 2);
    if ((v9 & 0x80000000) != 0)
      return v9;
    *(_WORD *)a4[3] += Utf8_LengthInUtf8chars(a4[7] + (unsigned __int16)v19, v18 - (unsigned __int16)v19);
    *(_WORD *)a4[4] = v18 + *(_WORD *)a4[4] - v19;
    v10 = v20;
  }
  if (v10 == 7)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(v8 + 8) + 176))(a1, a2, *a3, 4, &__s, (char *)&v19 + 2);
    if ((v9 & 0x80000000) != 0)
      return v9;
    *(_WORD *)a4[4] += cstdlib_strlen(__s) + 6;
    *(_WORD *)a4[3] += cstdlib_strlen(__s) + 2;
    v10 = v20;
  }
  if (*(_DWORD *)(*a4 + 104))
    v13 = v10 == 6;
  else
    v13 = 0;
  if (v13)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(v8 + 8) + 176))(a1, a2, *a3, 4, &__s, (char *)&v19 + 2);
    if ((v9 & 0x80000000) == 0)
    {
      v14 = *(_WORD *)a4[3];
      *(_WORD *)a4[3] = v14 + 2 * cstdlib_strlen(__s) - 2;
      v15 = *(_WORD *)a4[4];
      *(_WORD *)a4[4] = v15 + 2 * cstdlib_strlen(__s) - 2;
    }
  }
  return v9;
}

uint64_t getSentenceAndInsertedCGNLengthPost()
{
  return 0;
}

uint64_t normOutFnc(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t BacktransPOS;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  const char *v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  char *v21;
  const char *v22;
  const char *v23;
  size_t v24;
  int v25;
  char *v26;
  const char *v27;
  const char *v28;
  size_t v29;
  char *v30;
  const char *v31;
  const char *v32;
  size_t v33;
  size_t v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  unsigned __int16 v38;
  int v39;
  uint64_t v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 v52;
  int v53;
  unsigned int v54;
  const char *v55;
  size_t v56;
  size_t v57;
  char *v58;
  const char *v59;
  const char *v60;
  size_t v61;
  int v62;
  char *v63;
  const char *v64;
  const char *v65;
  size_t v66;
  char *v67;
  const char *v68;
  const char *v69;
  size_t v70;
  size_t v71;
  unsigned __int16 v73;
  char *__s;
  char *v75;
  char *__s2;
  char v77[2];
  _BOOL4 v78;
  unsigned __int16 v79;
  int v80;
  unsigned int v81;

  v80 = 0;
  v81 = 0;
  v79 = 0;
  v78 = 0;
  v75 = 0;
  __s2 = 0;
  __s = 0;
  v8 = *a4;
  *(_WORD *)(a4[17] + 16 * *(unsigned __int16 *)a4[10]) = *a3;
  BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(v8 + 8) + 168))(a1, a2, (unsigned __int16)*a3, 0, 1, &v81, (char *)&v80 + 2);
  if ((BacktransPOS & 0x80000000) != 0)
    return BacktransPOS;
  *(_DWORD *)(a4[17] + 16 * *(unsigned __int16 *)a4[10] + 4) = v81;
  BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(v8 + 8) + 168))(a1, a2, (unsigned __int16)*a3, 1, 1, &v80, (char *)&v80 + 2);
  if ((BacktransPOS & 0x80000000) != 0)
    return BacktransPOS;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(v8 + 8) + 168))(a1, a2, (unsigned __int16)*a3, 2, 1, &v79, (char *)&v80 + 2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = v80;
  v12 = a4[17];
  v13 = (unsigned __int16 *)a4[10];
  *(_WORD *)(v12 + 16 * *v13 + 12) = v80;
  *(_WORD *)(v12 + 16 * *v13 + 8) = v11;
  v14 = v79;
  *(_WORD *)(v12 + 16 * *v13 + 14) = v79;
  *(_WORD *)(v12 + 16 * *v13 + 10) = v14;
  v15 = Utf8_LengthInUtf8chars(a4[7] + (unsigned __int16)v80, v79 - (unsigned __int16)v80);
  v16 = v81;
  if (v81 <= 0xA && ((1 << v81) & 0x610) != 0)
  {
    *(_WORD *)a4[5] = v79;
    BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(v8 + 8)
                                                                                                 + 176))(a1, a2, (unsigned __int16)*a3, 5, &__s2, (char *)&v80 + 2);
    if ((BacktransPOS & 0x80000000) != 0)
      return BacktransPOS;
    BacktransPOS = com_mosynt_UseMosynt(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), &v78);
    if ((BacktransPOS & 0x80000000) != 0)
      return BacktransPOS;
    if (v78)
    {
      BacktransPOS = com_mosynt_GetBacktransPOS(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), __s2, v77);
      if ((BacktransPOS & 0x80000000) != 0)
        return BacktransPOS;
      __s2 = v77;
    }
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(v8 + 8) + 176))(a1, a2, (unsigned __int16)*a3, 6, &v75, (char *)&v80 + 2);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (*(_DWORD *)(v8 + 104) && !*(_DWORD *)a4[6])
    {
      v17 = (const char *)a4[8];
      if (v17 && (unsigned __int16)v80 != *(unsigned __int16 *)a4[13])
      {
        if ((unsigned __int16)v80 > *(unsigned __int16 *)a4[12])
        {
          v19 = *(unsigned __int16 *)a4[11];
          v20 = 2 * cstdlib_strlen(v17) - 2;
          cstdlib_strcat(*(char **)(v8 + 96), "X");
          v21 = *(char **)(v8 + 96);
          v22 = (const char *)a4[8];
          v23 = v22 + 1;
          v24 = cstdlib_strlen(v22);
          cstdlib_strncat(v21, v23, v24 - 2);
          if (v20 >= v19)
          {
            cstdlib_strcat(*(char **)(v8 + 96), "Y");
            v30 = *(char **)(v8 + 96);
            v31 = (const char *)a4[8];
            v32 = v31 + 1;
            v33 = cstdlib_strlen(v31);
            cstdlib_strncat(v30, v32, v33 - 2);
            v34 = *(unsigned __int16 *)a4[11];
            if (2 * cstdlib_strlen((const char *)a4[8]) - 2 > v34)
            {
              do
              {
                cstdlib_strcat(*(char **)(v8 + 64), "~");
                cstdlib_strcat(*(char **)(v8 + 72), "~");
                cstdlib_strcat(*(char **)(v8 + 80), "~");
                cstdlib_strcat(*(char **)(v8 + 88), "~");
                LODWORD(v34) = v34 + 1;
              }
              while (2 * cstdlib_strlen((const char *)a4[8]) - 2 > (unsigned __int16)v34);
            }
          }
          else
          {
            v25 = 2 * cstdlib_strlen((const char *)a4[8]) - 2;
            if ((v25 & 0xFFFEu) < *(unsigned __int16 *)a4[11])
            {
              do
              {
                cstdlib_strcat(*(char **)(v8 + 96), "~");
                ++v25;
              }
              while (*(unsigned __int16 *)a4[11] > (unsigned __int16)v25);
            }
            cstdlib_strcat(*(char **)(v8 + 96), "Y");
            v26 = *(char **)(v8 + 96);
            v27 = (const char *)a4[8];
            v28 = v27 + 1;
            v29 = cstdlib_strlen(v27);
            cstdlib_strncat(v26, v28, v29 - 2);
          }
          a4[8] = 0;
        }
      }
      else if (*(_WORD *)a4[9])
      {
        v18 = 0;
        do
        {
          cstdlib_strcat(*(char **)(v8 + 96), " ");
          ++v18;
        }
        while (v18 < *(unsigned __int16 *)a4[9]);
      }
    }
    v35 = *(_DWORD *)a4[6];
    v36 = (unsigned __int16)v80;
    if (v35)
    {
      v37 = 0;
    }
    else
    {
      v38 = v36 - utf8_GetPreviousUtf8Offset(a4[7], (unsigned __int16)v80);
      cstdlib_strncat(*(char **)(v8 + 64), (const char *)(a4[7] + (unsigned __int16)v80 - v38), v38);
      cstdlib_strcat(*(char **)(v8 + 72), " ");
      cstdlib_strcat(*(char **)(v8 + 80), " ");
      cstdlib_strncat(*(char **)(v8 + 88), (const char *)(a4[7] + (unsigned __int16)v80 - v38), v38);
      v37 = 1;
      v36 = (unsigned __int16)v80;
    }
    cstdlib_strncat(*(char **)(v8 + 64), (const char *)(a4[7] + v36), v79 - (unint64_t)v36);
    cstdlib_strncat(*(char **)(v8 + 88), (const char *)(a4[7] + (unsigned __int16)v80), v79 - (unint64_t)(unsigned __int16)v80);
    v15 = Utf8_LengthInUtf8chars(a4[7] + (unsigned __int16)v80, v79 - (unsigned __int16)v80);
    v39 = v15;
    if (v15)
    {
      do
      {
        cstdlib_strncat(*(char **)(v8 + 72), __s2, 1uLL);
        cstdlib_strncat(*(char **)(v8 + 80), v75, 1uLL);
        --v39;
      }
      while (v39);
    }
    *(_WORD *)a4[9] = v15;
    if (*(_DWORD *)(v8 + 104))
    {
      v40 = a4[8];
      if (v40 && (unsigned __int16)v80 != *(unsigned __int16 *)a4[13])
      {
        *(_WORD *)a4[11] += v37 + v15;
      }
      else
      {
        if (!v35)
        {
          cstdlib_strcat(*(char **)(v8 + 96), " ");
          v40 = a4[8];
        }
        if (v40)
          *(_WORD *)a4[11] = *(_WORD *)a4[9];
      }
    }
    *(_DWORD *)a4[6] = 0;
    v16 = v81;
  }
  if (v16 == 7)
  {
    v41 = cstdlib_strlen(*(const char **)(v8 + 64));
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(v8 + 8) + 176))(a1, a2, (unsigned __int16)*a3, 4, &__s, (char *)&v80 + 2);
    if ((v10 & 0x80000000) != 0)
      return v10;
    v42 = cstdlib_strlen(__s);
    v43 = (unsigned __int16)Utf8_LengthInUtf8chars(*(_QWORD *)(v8 + 64), v41);
    v73 = Utf8_LengthInBytes(*(unsigned __int8 **)(v8 + 88), v43);
    if ((unsigned __int16)v80 >= *(unsigned __int16 *)a4[5])
    {
      cstdlib_strcat(*(char **)(v8 + 64), "▲");
      cstdlib_strcat(*(char **)(v8 + 64), __s);
      cstdlib_strcat(*(char **)(v8 + 64), "▼");
      v52 = v42;
      v53 = 0;
      v54 = v52 + 2;
      do
      {
        cstdlib_strcat(*(char **)(v8 + 72), " ");
        cstdlib_strcat(*(char **)(v8 + 80), " ");
        cstdlib_strcat(*(char **)(v8 + 88), "~");
        ++v53;
      }
      while (v54 > (unsigned __int16)v53);
    }
    else
    {
      cstdlib_memmove((void *)(*(_QWORD *)(v8 + 64) + v41 + (unsigned __int16)v80 - *(unsigned __int16 *)a4[5] + v42 + 6), (const void *)(*(_QWORD *)(v8 + 64) + v41 - *(unsigned __int16 *)a4[5] + (unsigned __int16)v80), *(unsigned __int16 *)a4[5] - (unsigned __int16)v80 + 1);
      v44 = (char *)(*(_QWORD *)(v8 + 72) + v43 - v15);
      cstdlib_memmove(&v44[v42 + 2], v44, v15 + 1);
      v45 = (char *)(*(_QWORD *)(v8 + 80) + v43 - v15);
      cstdlib_memmove(&v45[v42 + 2], v45, v15 + 1);
      v46 = *(unsigned __int16 *)a4[5];
      v47 = (char *)(*(_QWORD *)(v8 + 88) + v73 - v46 + (unsigned __int16)v80);
      cstdlib_memmove(&v47[v42 + 2], v47, v46 - (unsigned __int16)v80 + 1);
      cstdlib_strncpy((char *)(*(_QWORD *)(v8 + 64) + (unsigned __int16)(v41 - *(_WORD *)a4[5] + v80)), "▲", 3uLL);
      v48 = v43 - v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 72) + v48) = 32;
      *(_BYTE *)(*(_QWORD *)(v8 + 80) + v48) = 32;
      *(_BYTE *)(*(_QWORD *)(v8 + 88) + v73 - (unint64_t)*(unsigned __int16 *)a4[5] + (unsigned __int16)v80) = 126;
      if (v42)
      {
        v49 = 0;
        v50 = v48 + 1;
        do
        {
          if (__s[v49])
            *(_BYTE *)(*(_QWORD *)(v8 + 64) + (int)(v41 + 3 + v49 - *(unsigned __int16 *)a4[5] + (unsigned __int16)v80)) = __s[v49];
          *(_BYTE *)(*(_QWORD *)(v8 + 72) + v50 + v49) = 32;
          *(_BYTE *)(*(_QWORD *)(v8 + 80) + v50 + v49) = 32;
          *(_BYTE *)(*(_QWORD *)(v8 + 88) + (int)(v73 + 1 + v49++ - *(unsigned __int16 *)a4[5] + (unsigned __int16)v80)) = 126;
        }
        while (v42 != v49);
      }
      cstdlib_strncpy((char *)(*(_QWORD *)(v8 + 64) + (unsigned __int16)(v41 + v42 - *(_WORD *)a4[5] + v80 + 3)), "▼", 3uLL);
      v51 = v42 + 1 + v43 - v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 72) + v51) = 32;
      *(_BYTE *)(*(_QWORD *)(v8 + 80) + v51) = 32;
      *(_BYTE *)(*(_QWORD *)(v8 + 88)
               + (unsigned __int16)v80
               - (unint64_t)*(unsigned __int16 *)a4[5]
               + v42
               + 1
               + v73) = 126;
    }
    if (a4[8])
      *(_WORD *)a4[11] += cstdlib_strlen(__s) + 2;
    *(_WORD *)a4[9] += cstdlib_strlen(__s) + 2;
    v16 = v81;
  }
  if (v16 != 6)
  {
LABEL_71:
    ++*(_WORD *)a4[10];
    return v10;
  }
  BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v8 + 8) + 168))(a1, a2, (unsigned __int16)*a3, 1, 1, a4[13], (char *)&v80 + 2);
  if ((BacktransPOS & 0x80000000) != 0)
    return BacktransPOS;
  if (*(_DWORD *)(v8 + 104))
  {
    v55 = (const char *)a4[8];
    if (v55)
    {
      if (*(unsigned __int16 *)a4[13] > *(unsigned __int16 *)a4[12])
      {
        v56 = *(unsigned __int16 *)a4[11];
        v57 = 2 * cstdlib_strlen(v55) - 2;
        cstdlib_strcat(*(char **)(v8 + 96), "X");
        v58 = *(char **)(v8 + 96);
        v59 = (const char *)a4[8];
        v60 = v59 + 1;
        v61 = cstdlib_strlen(v59);
        cstdlib_strncat(v58, v60, v61 - 2);
        if (v57 >= v56)
        {
          cstdlib_strcat(*(char **)(v8 + 96), "Y");
          v67 = *(char **)(v8 + 96);
          v68 = (const char *)a4[8];
          v69 = v68 + 1;
          v70 = cstdlib_strlen(v68);
          cstdlib_strncat(v67, v69, v70 - 2);
          v71 = *(unsigned __int16 *)a4[11];
          if (2 * cstdlib_strlen((const char *)a4[8]) - 2 > v71)
          {
            do
            {
              cstdlib_strcat(*(char **)(v8 + 64), "~");
              cstdlib_strcat(*(char **)(v8 + 72), "~");
              cstdlib_strcat(*(char **)(v8 + 80), "~");
              cstdlib_strcat(*(char **)(v8 + 88), "~");
              LODWORD(v71) = v71 + 1;
            }
            while (2 * cstdlib_strlen((const char *)a4[8]) - 2 > (unsigned __int16)v71);
          }
        }
        else
        {
          v62 = 2 * cstdlib_strlen((const char *)a4[8]) - 2;
          if ((v62 & 0xFFFEu) < *(unsigned __int16 *)a4[11])
          {
            do
            {
              cstdlib_strcat(*(char **)(v8 + 96), "~");
              ++v62;
            }
            while (*(unsigned __int16 *)a4[11] > (unsigned __int16)v62);
          }
          cstdlib_strcat(*(char **)(v8 + 96), "Y");
          v63 = *(char **)(v8 + 96);
          v64 = (const char *)a4[8];
          v65 = v64 + 1;
          v66 = cstdlib_strlen(v64);
          cstdlib_strncat(v63, v65, v66 - 2);
        }
        a4[8] = 0;
        *(_WORD *)a4[9] = 0;
      }
    }
  }
  BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)(v8 + 8)
                                                                                                 + 176))(a1, a2, (unsigned __int16)*a3, 4, a4 + 8, (char *)&v80 + 2);
  if ((BacktransPOS & 0x80000000) != 0)
    return BacktransPOS;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v8 + 8)
                                                                                               + 168))(a1, a2, (unsigned __int16)*a3, 2, 1, a4[12], (char *)&v80 + 2);
  if ((v10 & 0x80000000) == 0)
  {
    *(_WORD *)a4[11] = *(_WORD *)a4[9];
    goto LABEL_71;
  }
  return v10;
}

uint64_t normOutFncPost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v4;
  const char *v7;
  size_t v8;
  size_t v9;
  char *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  int v14;
  char *v15;
  const char *v16;
  const char *v17;
  size_t v18;
  unsigned int v19;
  char *v20;
  const char *v21;
  const char *v22;
  size_t v23;
  size_t v24;

  v4 = *(char ***)a4;
  if (*(_DWORD *)(*(_QWORD *)a4 + 104) && !**(_DWORD **)(a4 + 48))
  {
    v7 = *(const char **)(a4 + 64);
    if (v7)
    {
      v8 = **(unsigned __int16 **)(a4 + 88);
      v9 = 2 * cstdlib_strlen(v7) - 2;
      cstdlib_strcat(v4[12], "X");
      v10 = v4[12];
      v11 = *(const char **)(a4 + 64);
      v12 = v11 + 1;
      v13 = cstdlib_strlen(v11);
      cstdlib_strncat(v10, v12, v13 - 2);
      if (v9 >= v8)
      {
        cstdlib_strcat(v4[12], "Y");
        v20 = v4[12];
        v21 = *(const char **)(a4 + 64);
        v22 = v21 + 1;
        v23 = cstdlib_strlen(v21);
        cstdlib_strncat(v20, v22, v23 - 2);
        v24 = **(unsigned __int16 **)(a4 + 88);
        if (2 * cstdlib_strlen(*(const char **)(a4 + 64)) - 2 > v24)
        {
          do
          {
            cstdlib_strcat(v4[8], "~");
            cstdlib_strcat(v4[9], "~");
            cstdlib_strcat(v4[10], "~");
            cstdlib_strcat(v4[11], "~");
            LODWORD(v24) = v24 + 1;
          }
          while (2 * cstdlib_strlen(*(const char **)(a4 + 64)) - 2 > (unsigned __int16)v24);
        }
      }
      else
      {
        v14 = 2 * cstdlib_strlen(*(const char **)(a4 + 64)) - 2;
        if ((v14 & 0xFFFEu) < **(unsigned __int16 **)(a4 + 88))
        {
          do
          {
            cstdlib_strcat(v4[12], "~");
            ++v14;
          }
          while (**(unsigned __int16 **)(a4 + 88) > (unsigned __int16)v14);
        }
        cstdlib_strcat(v4[12], "Y");
        v15 = v4[12];
        v16 = *(const char **)(a4 + 64);
        v17 = v16 + 1;
        v18 = cstdlib_strlen(v16);
        cstdlib_strncat(v15, v17, v18 - 2);
      }
    }
    else if (**(_WORD **)(a4 + 72))
    {
      v19 = 0;
      do
      {
        cstdlib_strcat(v4[12], " ");
        ++v19;
      }
      while (v19 < **(unsigned __int16 **)(a4 + 72));
    }
  }
  return 0;
}

uint64_t fe_normout_split_words(_QWORD *a1, uint64_t a2, uint64_t a3, char *__s, uint64_t a5, unsigned __int16 *a6)
{
  unsigned __int16 v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  int v28;
  BOOL v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v43;
  int v44;
  char *v45;
  int v46;
  uint64_t v47;
  unsigned __int16 v48;
  uint64_t result;
  unsigned __int16 *v50;
  unint64_t v51;
  unsigned __int16 v53;
  uint64_t v54;
  int v56;
  uint64_t v57;
  unsigned int v58;
  __int16 v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  unsigned __int16 v62;
  int v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  char *v66;

  v10 = cstdlib_strlen(__s);
  *a6 = 0;
  v11 = v10;
  if (!v10)
  {
    v48 = 0;
    goto LABEL_85;
  }
  v53 = 0;
  v54 = a2;
  v50 = a6;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = &__s[(unsigned __int16)v14];
    v16 = *v15;
    if (v16 != 32 && v16 != 95 && cstdlib_strncmp(&__s[(unsigned __int16)v14], "▬", 3uLL))
      goto LABEL_79;
    if (a5 && v53 >= 0x80u)
    {
      v17 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[14], (v53 & 0xFF80u) + 128);
      if (!v17)
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v18, v19, v20, v21, v50);
        return 2340429834;
      }
      a1[14] = v17;
      cstdlib_memset((void *)(v17 + v53), 0, (v53 & 0xFF80) + 128 - v53);
      v22 = a3;
    }
    else
    {
      v22 = a3;
      if (!a5)
        goto LABEL_67;
    }
    if (cstdlib_strncmp(&__s[(unsigned __int16)v14], "▬", 3uLL))
      goto LABEL_67;
    v64 = 0;
    v63 = 0;
    v62 = 0;
    v61 = -1;
    v60 = -1;
    v59 = 0;
    v58 = 11;
    v57 = 0;
    v56 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(v54, v22, 1, 0, &v64) & 0x80000000) != 0)goto LABEL_63;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(a1[1] + 152))(v54, v22, 2, v64, &v59) & 0x80000000) != 0)goto LABEL_63;
    if (!v59)
      goto LABEL_63;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[1] + 104))(v54, v22, 2, v64, (char *)&v63 + 2) & 0x80000000) != 0)goto LABEL_63;
    v23 = HIWORD(v63);
    if (!HIWORD(v63))
      goto LABEL_63;
    v24 = 0;
    while (1)
    {
      v25 = v61;
      v26 = v60;
      if (v61 != 0xFFFF && v60 != 0xFFFF)
        break;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(a1[1] + 168))(v54, v22, v23, 0, 1, &v58, &v63) & 0x80000000) != 0)goto LABEL_63;
      if (v58 > 0xA || ((1 << v58) & 0x610) == 0)
        goto LABEL_32;
      if (v24 == v13)
      {
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 168))(v54, v22, HIWORD(v63), 1, 1, &v61, &v63);
        goto LABEL_30;
      }
      if (v13 + 1 == v24)
      {
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 168))(v54, v22, HIWORD(v63), 2, 1, &v60, &v63);
LABEL_30:
        if (v28 < 0)
          goto LABEL_63;
      }
      ++v24;
LABEL_32:
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[1] + 120))(v54, v22, HIWORD(v63), (char *)&v63 + 2) & 0x80000000) != 0)goto LABEL_63;
      v23 = HIWORD(v63);
      if (!HIWORD(v63))
      {
        v25 = v61;
        v26 = v60;
        break;
      }
    }
    v29 = v25 == 0xFFFF || v26 == 0xFFFF;
    if (!v29
      && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(a1[1] + 176))(v54, v22, v64, 1, &v57, &v62) & 0x80000000) == 0)
    {
      v30 = v62;
      if (v62 < 2u)
      {
        v34 = 1;
      }
      else
      {
        v31 = (int *)(v57 + 44);
        v32 = 1;
        while (1)
        {
          v33 = *v31;
          v31 += 8;
          if (v33 - *(_DWORD *)(v57 + 12) > v61)
            break;
          if (v62 == ++v32)
            goto LABEL_63;
        }
        v34 = (unsigned __int16)v32;
      }
      if (v34 < v62 && !v56)
      {
        v35 = v34 + 1;
        v36 = 32 * v34;
        while (1)
        {
          v37 = (unsigned int *)(v57 + v36);
          if (*(_DWORD *)(v57 + v36 + 12) - *(_DWORD *)(v57 + 12) >= v60)
            break;
          v38 = *v37;
          v39 = (char *)*((_QWORD *)v37 + 3);
          v66 = 0;
          v65 = 0;
          if (v38 <= 0x39)
          {
            if (v38 == 51)
            {
              v51 = v35;
              v40 = hlp_NLUStrFind(v39, "PUNC", &v66, &v65);
              v35 = v51;
              if (!v40)
                goto LABEL_62;
              v41 = v56;
              v30 = v62;
              goto LABEL_58;
            }
            if (((1 << v38) & 0x3C0010124001140) != 0)
              goto LABEL_62;
          }
          if ((_DWORD)v38 == 17)
          {
LABEL_62:
            v56 = 1;
            break;
          }
          v41 = 0;
LABEL_58:
          if (!v41)
          {
            v36 += 32;
            if (v35++ < v30)
              continue;
          }
          break;
        }
      }
    }
LABEL_63:
    if (!v56)
    {
      fe_normout_check_if_word_in_prompt((uint64_t)a1, v54, v22, v13, &v56);
      if (!v56)
      {
        fe_normout_check_if_word_in_prompt((uint64_t)a1, v54, v22, (unsigned __int16)(v13 + 1), &v56);
        if (!v56)
          *(_BYTE *)(a1[14] + v53++) = v13 + 1;
      }
    }
LABEL_67:
    if (!cstdlib_strncmp(&__s[(unsigned __int16)v14], "▬", 3uLL))
    {
      *v15 = 0;
      __s[v12 + 1] = 0;
      v14 += 2;
    }
    __s[(unsigned __int16)v14] = 0;
    v43 = v14 + 1;
    if (v11 > (unsigned __int16)(v14 + 1))
    {
      v44 = (unsigned __int16)(v14 + 1);
      do
      {
        v45 = &__s[(unsigned __int16)v43];
        v46 = *v45;
        if (v46 != 32 && v46 != 95 && cstdlib_strncmp(&__s[(unsigned __int16)v43], "▬", 3uLL))
          break;
        if (cstdlib_strncmp(&__s[(unsigned __int16)v43], "▬", 3uLL))
        {
          v47 = (unsigned __int16)v43;
        }
        else
        {
          *v45 = 0;
          __s[v44 + 1] = 0;
          v43 = v14 + 3;
          v47 = (unsigned __int16)(v14 + 3);
        }
        v14 = v43;
        __s[v47] = 0;
        v44 = (unsigned __int16)++v43;
      }
      while (v11 > (unsigned __int16)v43);
    }
    ++v13;
LABEL_79:
    v12 = (unsigned __int16)++v14;
  }
  while (v11 > (unsigned __int16)v14);
  if (__s[(unsigned __int16)v14 - 1])
    v48 = v13 + 1;
  else
    v48 = v13;
  a6 = v50;
LABEL_85:
  result = 0;
  *a6 = v48;
  return result;
}

uint64_t getNextWord(_WORD *a1, _WORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int i;
  int v11;

  *a2 = *a1;
  v4 = (unsigned __int16)*a1;
  if (v4 >= a4)
    return 0;
  while (!*(_BYTE *)(a3 + v4))
  {
    *a1 = ++v4;
    if (a4 == (unsigned __int16)v4)
      return 0;
  }
  v6 = (unsigned __int16)*a2;
  v7 = a3 + (unsigned __int16)(v6 + 1) + 1;
  do
  {
    v8 = (unsigned __int8 *)v7;
    *a2 = ++v6;
    if (a4 <= (unsigned __int16)v6)
      break;
    ++v7;
  }
  while (*(_BYTE *)(a3 + (unsigned __int16)v6));
  for (i = (unsigned __int16)v6 + 1; i < a4; i = v11 + 2)
  {
    if (*v8++)
      break;
    v11 = (unsigned __int16)v6++;
    *a2 = v6;
  }
  return 1;
}

uint64_t updateWordRecFnc(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *);
  uint64_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  int v20;
  int v21;

  v20 = 0;
  v21 = 0;
  v19 = 0;
  v8 = *(_QWORD **)a4;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(*(_QWORD *)a4 + 8)
                                                                                               + 168))(a1, a2, *a3, 0, 1, &v21, (char *)&v20 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v8[1] + 168))(a1, a2, *a3, 1, 1, &v19, (char *)&v20 + 2);
    if ((result & 0x80000000) == 0 && v19 > **(unsigned __int16 **)(a4 + 168) && v21 == 7)
    {
      v11 = cstdlib_strstr((char *)(*(_QWORD *)(a4 + 152) + 3), "▼");
      *(_QWORD *)(a4 + 160) = v11;
      if (v11)
      {
        *v11 = 0;
        v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *))(v8[1] + 160);
        v17 = *a3;
        v18 = cstdlib_strlen(*(const char **)(a4 + 152));
        LODWORD(result) = v16(a1, a2, v17, 4, v18, *(_QWORD *)(a4 + 152) + 3, &v20);
        if ((int)result >= 0)
          return 2340437532;
        else
          return result;
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*v8 + 32), (uint64_t)"FE_NORMOUT", 43001, (uint64_t)"%s%s", v12, v13, v14, v15, "message");
        return 2340429831;
      }
    }
  }
  return result;
}

uint64_t updateWordRecs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, __int16 a8)
{
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  _WORD *v22;
  __int16 v23;
  unsigned __int16 *v24;
  _WORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _WORD *v42;
  _WORD __n[5];

  v39 = result;
  if (a5)
  {
    v8 = 0;
    v9 = (__int16)(a8 - a7);
    v10 = a7 + a6;
    v11 = a5;
    v35 = (_WORD *)(a4 + 14);
    v38 = a6;
    v37 = a4;
    v36 = a7 + a6;
    do
    {
      v12 = a4 + 16 * v8;
      v14 = *(_DWORD *)(v12 + 4);
      v13 = (_DWORD *)(v12 + 4);
      v15 = (1 << v14) & 0x610;
      if (v14 <= 0xA && v15 != 0)
      {
        v18 = *(unsigned __int16 *)(v12 + 8);
        v17 = (unsigned __int16 *)(v12 + 8);
        if (v18 == a6)
        {
          v19 = a4 + 16 * v8;
          v20 = (unsigned __int16 *)(v19 + 10);
          if (v10 == *(unsigned __int16 *)(v19 + 10))
          {
            v21 = 0;
            v23 = *(_WORD *)(v19 + 14);
            v22 = (_WORD *)(v19 + 14);
            *v22 = v23 + v9;
            v42 = v22;
            v24 = v22 - 1;
            v25 = v35;
            do
            {
              if (v8 != v21)
              {
                v26 = (unsigned __int16)*(v25 - 1);
                if (v26 > *v24)
                {
                  *(v25 - 1) = (v26 + v9) & ~((__int16)(v26 + v9) >> 15);
                  *v25 += v9;
                }
                v27 = *(_DWORD *)(v25 - 5);
                if (v27 <= 0xF && ((1 << v27) & 0x8060) != 0)
                {
                  v29 = *v17;
                  if (v29 >= (unsigned __int16)*(v25 - 3))
                  {
                    v30 = (unsigned __int16)*(v25 - 2);
                    if (v29 < v30 && v30 + 1 >= *v20)
                    {
                      if (v27 != 6
                        || (memset(__n, 0, sizeof(__n)),
                            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _WORD *, _WORD *))(*(_QWORD *)(v39 + 8) + 176))(a2, a3, (unsigned __int16)*(v25 - 7), 4, &__n[1], __n), !__n[0])|| (result = cstdlib_strncmp(*(const char **)&__n[1], "_PR_", __n[0]), (v9 & 0x80000000) == 0)|| (_DWORD)result)
                      {
                        *v25 += v9;
                      }
                    }
                  }
                }
              }
              ++v21;
              v25 += 8;
            }
            while (v11 != v21);
            v31 = v8 + 1;
            a4 = v37;
            if (v8 + 1 < v11 && *v13 == 4)
            {
              v32 = v37 + 16 * v31;
              if (*(_DWORD *)(v32 + 4) == 16 && *(unsigned __int16 *)(v32 + 12) == *v24)
                *(_WORD *)(v37 + 16 * v31 + 14) = *v42;
            }
            a6 = v38;
            v10 = v36;
            if (v8)
            {
              if (*v13 == 4)
              {
                v33 = (v8 - 1);
                v34 = v37 + 16 * v33;
                if (*(_DWORD *)(v34 + 4) == 16 && *(unsigned __int16 *)(v34 + 12) == *v24)
                  *(_WORD *)(v37 + 16 * v33 + 14) = *v42;
              }
            }
          }
        }
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t MvToEqWordRecUpdFieldsFnc(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  const char *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  _WORD *v17;
  const char *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *);
  uint64_t v30;
  __int16 v31;
  char *i;
  char *v33;
  char *__src;
  char *__s;
  int v37;
  int v38;
  int v39;
  unsigned int v40;

  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v8 = *(_QWORD **)a4;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(*(_QWORD *)a4 + 8) + 168))(a1, a2, (unsigned __int16)*a3, 0, 1, &v40, (char *)&v39 + 2);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = **(_WORD **)(a4 + 16);
    if (v10)
    {
      v11 = 0;
      v12 = "";
      do
      {
        v13 = (unsigned __int16 *)(*(_QWORD *)(a4 + 136) + 16 * v11);
        *(_QWORD *)(a4 + 144) = v13;
        if (*v13 == (unsigned __int16)*a3)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v8[1] + 160))(a1, a2);
          if ((v14 & 0x80000000) != 0)
            return v14;
          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(v8[1] + 160))(a1, a2, (unsigned __int16)*a3, 2, 1, *(_QWORD *)(a4 + 144) + 14, &v39);
          if ((v9 & 0x80000000) != 0)
            return v9;
          if (v40 <= 0xA && ((1 << v40) & 0x610) != 0)
          {
            __s = 0;
            v15 = *(_WORD **)(a4 + 112);
            v16 = (unsigned __int16)*v15;
            if (*v15)
            {
              v17 = *(_WORD **)(a4 + 128);
              if (v16 == *(unsigned __int8 *)(v8[14] + (unsigned __int16)*v17))
              {
                if (**(_WORD **)(a4 + 120))
                {
                  __src = 0;
                  ++*v17;
                  *(_BYTE *)(*(unsigned __int16 *)(*(_QWORD *)(a4 + 144) + 12) + *(_QWORD *)(a4 + 176) - 1) = 45;
                  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8[1] + 176))(a1, a2, (unsigned __int16)*a3, 3, &__s, (char *)&v39 + 2);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8[1] + 176))(a1, a2, **(unsigned __int16 **)(a4 + 120), 3, &__src, (char *)&v39 + 2);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  v18 = v12;
                  v19 = *(uint64_t **)(*v8 + 8);
                  v20 = *(_QWORD *)(a4 + 184);
                  v21 = cstdlib_strlen(__s);
                  v22 = cstdlib_strlen(__src);
                  v23 = (char *)heap_Realloc(v19, v20, (v21 + v22 + 2));
                  if (!v23)
                  {
                    log_OutPublic(*(_QWORD *)(*v8 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v24, v25, v26, v27, __src);
                    return 2340429834;
                  }
                  *(_QWORD *)(a4 + 184) = v23;
                  cstdlib_strcpy(v23, __src);
                  if (*((_DWORD *)v8 + 27))
                    v28 = "=";
                  else
                    v28 = "-";
                  cstdlib_strcat(*(char **)(a4 + 184), v28);
                  cstdlib_strcat(*(char **)(a4 + 184), __s);
                  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *))(v8[1] + 160);
                  v30 = **(unsigned __int16 **)(a4 + 120);
                  v31 = cstdlib_strlen(*(const char **)(a4 + 184));
                  v14 = v29(a1, a2, v30, 3, (unsigned __int16)(v31 + 1), *(_QWORD *)(a4 + 184), &v39);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(v8[1] + 160))(a1, a2, **(unsigned __int16 **)(a4 + 120), 2, 1, *(_QWORD *)(a4 + 144) + 14, &v39);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  v12 = v18;
                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v8[1] + 184))(a1, a2, **(unsigned __int16 **)(a4 + 144), 8, &v37) & 0x80000000) == 0&& (unsigned __int16)v37 == 1)
                  {
                    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v8[1] + 168))(a1, a2, **(unsigned __int16 **)(a4 + 144), 8, 1, (char *)&v37 + 2, (char *)&v39 + 2);
                    if ((v14 & 0x80000000) != 0)
                      return v14;
                    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v8[1] + 160))(a1, a2, **(unsigned __int16 **)(a4 + 120), 8, 1, (char *)&v37 + 2, &v39);
                    if ((v14 & 0x80000000) != 0)
                      return v14;
                  }
                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v8[1] + 184))(a1, a2, **(unsigned __int16 **)(a4 + 144), 14, &v37) & 0x80000000) == 0&& (unsigned __int16)v37 == 1)
                  {
                    v14 = MvToEqWordRecUpdNLU(a1, a2, v8, a4);
                    if ((v14 & 0x80000000) != 0)
                      return v14;
                  }
                  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8[1] + 192))(a1, a2, (unsigned __int16)*a3);
                  if ((v14 & 0x80000000) != 0)
                    return v14;
                  *a3 = **(_WORD **)(a4 + 120);
                }
              }
            }
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v8[1] + 176))(a1, a2, (unsigned __int16)*a3, 3, &__s, (char *)&v39 + 2);
            if ((v9 & 0x80000000) != 0)
              return v9;
            if (cstdlib_strcmp(__s, v12) && cstdlib_strstr(__s, "-*"))
            {
              v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v8[1] + 168))(a1, a2, (unsigned __int16)*a3, 1, 1, (char *)&v38 + 2, (char *)&v39 + 2);
              if ((v14 & 0x80000000) != 0)
                return v14;
              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v8[1] + 168))(a1, a2, (unsigned __int16)*a3, 2, 1, &v38, (char *)&v39 + 2);
              if ((v9 & 0x80000000) != 0)
                return v9;
              for (i = (char *)(*(_QWORD *)(a4 + 176) + HIWORD(v38)); ; i = v33 + 1)
              {
                v33 = cstdlib_strchr(i, 45);
                if (!v33 || (unint64_t)v33 >= *(_QWORD *)(a4 + 176) + (unint64_t)(unsigned __int16)v38)
                  break;
                *v33 = 95;
              }
            }
            ++**(_WORD **)(a4 + 112);
            **(_WORD **)(a4 + 120) = *a3;
          }
          v10 = **(_WORD **)(a4 + 16);
          v11 = v10;
        }
        ++v11;
      }
      while (v11 < v10);
    }
  }
  return v9;
}

uint64_t fe_normout_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62387, 120);
  if ((int)result >= 0)
    return result;
  else
    return 2340429832;
}

uint64_t fe_normout_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2340429825;
  result = 0;
  *a2 = &IFeNormout;
  return result;
}

uint64_t fe_normout_check_if_word_in_prompt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v13;
  unsigned int v14;
  int v15;
  int v16;

  v15 = 0;
  v16 = 0;
  v14 = 11;
  v13 = -1;
  *a5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a2, a3, 1, 0, (char *)&v16 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 152))(a2, a3, 2, HIWORD(v16), &v15);
    if ((result & 0x80000000) == 0)
    {
      if ((_WORD)v15)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 104))(a2, a3, 2, HIWORD(v16), &v16);
        if ((result & 0x80000000) == 0)
        {
          v10 = v16;
          if ((_WORD)v16)
          {
            v11 = 0;
            while (1)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(a1 + 8) + 168))(a2, a3, v10, 0, 1, &v14, (char *)&v15 + 2);
              if ((result & 0x80000000) != 0)
                break;
              if (v14 <= 0xA && ((1 << v14) & 0x610) != 0)
              {
                if (a4 == v11)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 8) + 168))(a2, a3, (unsigned __int16)v16, 1, 1, &v13, (char *)&v15 + 2);
                  if ((result & 0x80000000) != 0)
                    return result;
                }
                ++v11;
              }
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 120))(a2, a3, (unsigned __int16)v16, &v16);
              if ((result & 0x80000000) != 0)
                return result;
              v10 = v16;
              if (!(_WORD)v16 || a4 < v11)
              {
                if (v13 != 0xFFFF)
                  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 312))(a2, a3);
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t MvToEqWordRecUpdNLU(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  char *v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v35;
  __int16 v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  __int16 v38;
  char v39;
  char v40;
  uint64_t *v41;
  size_t v42;
  const char *v43;
  char *v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v46;
  __int16 v47;
  unsigned int v49;
  int v50;
  char *v51;
  unsigned __int16 v52;
  char *v53;
  unsigned __int16 v54;
  char *v55;
  unsigned __int16 __n[8];
  unsigned __int16 v57[5];
  char *__s;
  char *v59;

  __s = 0;
  v59 = 0;
  memset(v57, 0, sizeof(v57));
  *(_QWORD *)&__n[1] = 0;
  __n[0] = 0;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a3[1] + 176))(a1, a2, **(unsigned __int16 **)(a4 + 144), 14, &v59, &v50);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!hlp_NLUStrFind(v59, "POS", (char **)&v57[1], v57))
  {
    if (!hlp_NLUStrFind(v59, "PUNC", &v51, (unsigned __int16 *)&v50 + 1))
      return v8;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int *))(a3[1] + 184))(a1, a2, **(unsigned __int16 **)(a4 + 120), 14, &v49);
    v29 = a3[1];
    v30 = **(unsigned __int16 **)(a4 + 120);
    if (v28 < 0 || (unsigned __int16)v49 != 1)
    {
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(v29 + 160);
      v38 = cstdlib_strlen(v59);
      return v37(a1, a2, v30, 14, (unsigned __int16)(v38 + 1), v59, (char *)&v49 + 2);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(v29 + 176))(a1, a2, v30, 14, &__s, &v50);
    v31 = cstdlib_strlen(__s);
    v32 = cstdlib_strlen(v59);
    v33 = (char *)heap_Calloc(*(_QWORD **)(*a3 + 8), 1, (unsigned __int16)(v31 + v32 + 2));
    if (v33)
    {
      v26 = v33;
      cstdlib_strcpy(v33, __s);
      hlp_NLUStrRemoveKeyVal(__s, "BND");
      hlp_NLUStrJoin(v26, v59);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(a3[1] + 160);
      v35 = **(unsigned __int16 **)(a4 + 120);
      v36 = cstdlib_strlen(v26);
      v8 = v34(a1, a2, v35, 14, (unsigned __int16)(v36 + 1), v26, (char *)&v49 + 2);
LABEL_32:
      heap_Free(*(_QWORD **)(*a3 + 8), (uint64_t)v26);
      return v8;
    }
    goto LABEL_18;
  }
  hlp_NLUStrFind(v59, "BNDSHAPE", &v55, &v54);
  hlp_NLUStrFind(v59, "BND", &v53, &v52);
  hlp_NLUStrFind(v59, "PUNC", &v51, (unsigned __int16 *)&v50 + 1);
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int *))(a3[1] + 184))(a1, a2, **(unsigned __int16 **)(a4 + 120), 14, &v49) & 0x80000000) != 0)return v8;
  if ((unsigned __int16)v49 != 1)
    return v8;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a3[1] + 176))(a1, a2, **(unsigned __int16 **)(a4 + 120), 14, &__s, &v50);
  if (!hlp_NLUStrFind(__s, "POS", (char **)&__n[1], __n))
    return v8;
  v9 = heap_Calloc(*(_QWORD **)(*a3 + 8), 1, __n[0] + (unint64_t)v57[0] + 2);
  if (!v9)
  {
LABEL_18:
    v8 = 2340429834;
    log_OutPublic(*(_QWORD *)(*a3 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v10, v11, v12, v13, v49);
    return v8;
  }
  v14 = (char *)v9;
  v15 = cstdlib_strlen(__s);
  v16 = v57[0];
  v17 = v54;
  v18 = v52;
  v19 = HIWORD(v50);
  v20 = (unsigned __int16)(v15 + v16 + v17 + v18 + v19 + cstdlib_strlen("POS:BNDSHAPE:BND:PUNC:") + 2);
  v21 = (char *)heap_Calloc(*(_QWORD **)(*a3 + 8), 1, v20);
  v26 = v21;
  if (v21)
  {
    cstdlib_strcpy(v21, __s);
    cstdlib_strncpy(v14, *(const char **)&__n[1], __n[0]);
    if (!*((_DWORD *)a3 + 27))
      cstdlib_strcat(v14, "-");
    cstdlib_strncat(v14, *(const char **)&v57[1], v57[0]);
    hlp_NLUStrSet(v26, "POS", v14);
    if (v55)
    {
      v27 = v55[v54];
      v55[v54] = 0;
      hlp_NLUStrSet(v26, "BNDSHAPE", v55);
      v55[v54] = v27;
    }
    else
    {
      hlp_NLUStrRemoveKeyVal(v26, "BNDSHAPE");
    }
    if (v53)
    {
      v39 = v53[v54];
      v53[v54] = 0;
      hlp_NLUStrSet(v26, "BND", v53);
      v53[v54] = v39;
    }
    else
    {
      hlp_NLUStrRemoveKeyVal(v26, "BND");
    }
    if (v51)
    {
      v40 = v51[HIWORD(v50)];
      v51[HIWORD(v50)] = 0;
      hlp_NLUStrSet(v26, "PUNC", v51);
      v51[HIWORD(v50)] = v40;
    }
    else
    {
      hlp_NLUStrRemoveKeyVal(v26, "PUNC");
    }
    hlp_NLUStrRemoveKeyVal(v59, "POS");
    hlp_NLUStrRemoveKeyVal(v59, "PHR");
    hlp_NLUStrRemoveKeyVal(v59, "PUNC");
    hlp_NLUStrRemoveKeyVal(v59, "BNDSHAPE");
    hlp_NLUStrRemoveKeyVal(v59, "BND");
    if (!*v59)
      goto LABEL_29;
    v41 = *(uint64_t **)(*a3 + 8);
    v42 = cstdlib_strlen(v59);
    v43 = (const char *)heap_Realloc(v41, (uint64_t)v26, v42 + v20);
    if (v43)
    {
      v44 = (char *)v43;
      hlp_NLUStrJoin(v43, v59);
      v26 = v44;
LABEL_29:
      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(a3[1] + 160);
      v46 = **(unsigned __int16 **)(a4 + 120);
      v47 = cstdlib_strlen(v26);
      v8 = v45(a1, a2, v46, 14, (unsigned __int16)(v47 + 1), v26, (char *)&v49 + 2);
      goto LABEL_31;
    }
  }
  v8 = 2340429834;
  log_OutPublic(*(_QWORD *)(*a3 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v22, v23, v24, v25, v49);
LABEL_31:
  heap_Free(*(_QWORD **)(*a3 + 8), (uint64_t)v14);
  if (v26)
    goto LABEL_32;
  return v8;
}

uint64_t fe_normout_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t fecfg;
  uint64_t inited;
  uint64_t Object;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v29 = 0;
  v30 = 0;
  fecfg = 2340429834;
  v27 = 0;
  v28 = 0;
  if (!a5)
    return 2340429831;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v30);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v30[6], (uint64_t)"LINGDB", &v29);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v30[6], (uint64_t)"FE_DEPES", &v28);
  v9 = v30[6];
  if ((Object & 0x80000000) != 0)
  {
    v25 = "LINGDB";
LABEL_15:
    objc_ReleaseObject(v9, (uint64_t)v25);
    return Object;
  }
  v10 = objc_GetObject(v9, (uint64_t)"FE_DCTLKP", &v27);
  if ((v10 & 0x80000000) != 0)
  {
    Object = v10;
    objc_ReleaseObject(v30[6], (uint64_t)"LINGDB");
    v9 = v30[6];
    v25 = "FE_DEPES";
    goto LABEL_15;
  }
  v11 = heap_Alloc(v30[1], 120);
  v16 = v30;
  if (v11)
  {
    v17 = (_QWORD *)v11;
    *(_QWORD *)v11 = v30;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v29 + 8);
    v18 = v28;
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v28 + 8);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)(v18 + 16);
    v19 = v27;
    *(_QWORD *)(v11 + 56) = *(_QWORD *)(v27 + 8);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 96) = 0;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    v20 = heap_Alloc(v16[1], 128);
    v17[14] = v20;
    if (v20)
    {
      fecfg = fe_normout_get_fecfg((uint64_t)v17);
      if ((fecfg & 0x80000000) != 0)
        fe_normout_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = v17;
      *(_DWORD *)(a5 + 8) = 62387;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*v17 + 32), (uint64_t)"FE_NORMOUT", 43000, 0, v21, v22, v23, v24, v27);
      objc_ReleaseObject(v30[6], (uint64_t)"LINGDB");
      objc_ReleaseObject(v30[6], (uint64_t)"FE_DEPES");
      objc_ReleaseObject(v30[6], (uint64_t)"FE_DCTLKP");
      heap_Free(*(_QWORD **)(*v17 + 8), (uint64_t)v17);
    }
  }
  else
  {
    log_OutPublic(v30[4], (uint64_t)"FE_NORMOUT", 43000, 0, v12, v13, v14, v15, v27);
    objc_ReleaseObject(v30[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v30[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v30[6], (uint64_t)"FE_DCTLKP");
  }
  return fecfg;
}

uint64_t oneword_crosstoken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char *a6, int a7, int a8, const char *a9, char *a10, const char *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, char **a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, const char **a20,const char **a21,const char **a22,const char **a23)
{
  unint64_t *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  int v44;
  _BOOL4 v45;
  const char *v46;
  size_t v47;
  _BYTE *v48;
  void *v50;
  size_t v51;
  void *v52;
  size_t v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, _QWORD, const char *, _QWORD);
  const char *v68;
  unsigned __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  const char *v76;
  unsigned __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  const char *v82;
  unsigned __int16 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  const char *v88;
  unsigned __int16 v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char *v103;
  const char *v104;
  size_t v105;
  size_t v106;
  char *v107;
  const char *v108;
  size_t v109;
  __int16 v110;
  unsigned __int16 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  unsigned __int16 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  const char *v119;
  unsigned __int16 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t *v125;
  unsigned int v127;
  int v128;
  uint64_t v129;
  uint64_t v131;
  char *__s1;
  char v134;
  unsigned __int16 v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *__s;
  unsigned __int16 v141;
  char __dst[128];
  uint64_t v143;

  v29 = (unint64_t *)a12;
  v143 = *MEMORY[0x24BDAC8D0];
  v141 = 0;
  v139 = 0;
  __s = 0;
  v138 = 0;
  cstdlib_strcpy(__dst, "cross_token");
  cstdlib_strlen(__dst);
  v30 = cstdlib_strlen("¡");
  v31 = (unsigned __int16)(cstdlib_strlen(*a20) * v30 + 1);
  if (*(unsigned __int16 *)a16 < v31)
  {
    v32 = heap_Realloc(*(uint64_t **)(a1 + 8), *a12, v31);
    if (!v32)
      goto LABEL_99;
    *a12 = v32;
    *a16 = v31;
  }
  if (*(unsigned __int16 *)a17 < v31)
  {
    v37 = heap_Realloc(*(uint64_t **)(a1 + 8), *a13, v31);
    if (!v37)
      goto LABEL_99;
    *a13 = v37;
    *a17 = v31;
  }
  v131 = a3;
  v38 = a4;
  if (*(unsigned __int16 *)a18 < v31)
  {
    v39 = heap_Realloc(*(uint64_t **)(a1 + 8), *a14, v31);
    if (!v39)
      goto LABEL_99;
    *a14 = v39;
    *a18 = v31;
  }
  v40 = a15;
  if (*(unsigned __int16 *)a19 >= v31)
  {
LABEL_13:
    v128 = a5;
    v129 = a1;
    __s1 = a6;
    v42 = (char **)a20;
    cstdlib_strcpy((char *)*a12, *a20);
    cstdlib_strcpy((char *)*a13, *a21);
    cstdlib_strcpy((char *)*a14, *a22);
    cstdlib_strcpy(*a15, *a23);
    if (cstdlib_strlen((const char *)*a12))
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      do
      {
        v46 = (const char *)(*a12 + v43);
        v47 = cstdlib_strlen("◄");
        if (cstdlib_strncmp(v46, "◄", v47))
        {
          v48 = (_BYTE *)(*a12 + v43);
          if (*v48 == 126 && v45)
          {
            v50 = (void *)(v43 + *a12 + 1);
            v51 = cstdlib_strlen((const char *)(*a12 + v43));
            cstdlib_memmove(v50, v48, v51 + 1);
            v52 = (void *)(*a12 + v43);
            v53 = cstdlib_strlen("¡");
            cstdlib_memcpy(v52, "¡", v53);
            v45 = 1;
          }
        }
        else
        {
          v45 = !v45;
        }
        v43 = (unsigned __int16)++v44;
      }
      while (cstdlib_strlen((const char *)*a12) > (unsigned __int16)v44);
    }
    cstdlib_strcpy((char *)*a20, "");
    cstdlib_strcpy((char *)*a21, "");
    cstdlib_strcpy((char *)*a22, "");
    v54 = 0;
    v136 = (uint64_t *)(v129 + 32);
    while (1)
    {
      cstdlib_strcpy(__dst, "cross_token");
      v135 = cstdlib_strlen(__dst);
      v55 = (unsigned __int16)v54;
      if ((_WORD)v54)
      {
        cstdlib_strcat(*v42, " ");
        cstdlib_strcat((char *)*a21, " ");
        cstdlib_strcat((char *)*a22, " ");
      }
      v56 = *v29;
      v57 = (unsigned __int16)v54;
      v58 = *(unsigned __int8 *)(*v29 + (unsigned __int16)v54);
      if (*(_BYTE *)(*v29 + (unsigned __int16)v54))
      {
        v59 = (unsigned __int16)v54;
        v60 = (uint64_t *)(v129 + 32);
        while ((v58 > 0x20 || ((1 << v58) & 0x100002600) == 0) && v58 != 95)
        {
          v59 = (unsigned __int16)++v54;
          v58 = *(unsigned __int8 *)(v56 + (unsigned __int16)v54);
          if (!*(_BYTE *)(v56 + (unsigned __int16)v54))
          {
            v134 = 1;
            goto LABEL_34;
          }
        }
        v134 = 0;
LABEL_34:
        v61 = (unsigned __int16)v54;
      }
      else
      {
        v134 = 1;
        v61 = (unsigned __int16)v54;
        v59 = (unsigned __int16)v54;
        v60 = (uint64_t *)(v129 + 32);
      }
      *(_BYTE *)(v56 + v59) = 0;
      v62 = Utf8_LengthInUtf8chars(*v29, v61);
      v63 = Utf8_LengthInUtf8chars(*v29, v55);
      *(_BYTE *)(*a13 + v62) = 0;
      *(_BYTE *)(*a14 + v62) = 0;
      (*v40)[v62] = 0;
      log_OutText(*v60, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v64, v65, v66, (uint64_t)__dst);
      v67 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, const char *, _QWORD))(v38 + 120);
      v68 = (const char *)(*v29 + v57);
      v69 = cstdlib_strlen(v68);
      v70 = v67(a2, v131, 0, v68, v69);
      if ((v70 & 0x80000000) != 0)
        return v70;
      v74 = v63;
      log_OutText(*v60, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v71, v72, v73, (uint64_t)__dst);
      v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(v38 + 120);
      v76 = (const char *)(*a13 + v74);
      v77 = cstdlib_strlen(v76);
      v70 = v75(a2, v131, 1, v76, v77);
      if ((v70 & 0x80000000) != 0)
        return v70;
      log_OutText(*v60, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v78, v79, v80, (uint64_t)__dst);
      v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(v38 + 120);
      v82 = (const char *)(*a14 + v74);
      v83 = cstdlib_strlen(v82);
      v70 = v81(a2, v131, 2, v82, v83);
      if ((v70 & 0x80000000) != 0)
        return v70;
      log_OutText(*v60, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v84, v85, v86, (uint64_t)__dst);
      v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(v38 + 136);
      v88 = &(*a15)[v74];
      v89 = cstdlib_strlen(v88);
      v70 = v87(a2, v131, 3, v88, v89);
      if ((v70 & 0x80000000) != 0)
        return v70;
      if (cstdlib_strcmp(__s1, "normal") && cstdlib_strlen(__s1) + v135 + 2 <= 0x7F)
      {
        cstdlib_strcat(__dst, "_");
        cstdlib_strcat(__dst, __s1);
      }
      v29 = (unint64_t *)a12;
      if (((*(uint64_t (**)(uint64_t, uint64_t, char *))(v38 + 80))(a2, v131, __dst) & 0x80000000) != 0)
      {
        __dst[v135] = 0;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v38 + 80))(a2, v131, __dst);
        if ((v70 & 0x80000000) != 0)
          return v70;
      }
      else if (!a7)
      {
        if (!v128)
        {
          v90 = __s1;
          a7 = *__s1;
LABEL_51:
          cstdlib_strncpy(a10, v90, 0x14uLL);
          goto LABEL_52;
        }
        v90 = a9;
        a7 = a8;
        if (a9)
          goto LABEL_51;
        a7 = 0;
      }
LABEL_52:
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char **, unsigned __int16 *))(v38 + 128))(a2, v131, 0, &__s, &v141);
      if ((v70 & 0x80000000) != 0)
        return v70;
      __s[v141] = 0;
      log_OutText(*v136, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v91, v92, v93, (uint64_t)__dst);
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(v38 + 128))(a2, v131, 1, &v139, &v141);
      if ((v70 & 0x80000000) != 0)
        return v70;
      *(_BYTE *)(v139 + v141) = 0;
      log_OutText(*v136, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O2: %s", v94, v95, v96, (uint64_t)__dst);
      v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(v38 + 128))(a2, v131, 2, &v138, &v141);
      if ((v100 & 0x80000000) != 0)
        return v100;
      *(_BYTE *)(v138 + v141) = 0;
      log_OutText(*v136, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O3: %s", v97, v98, v99, (uint64_t)__dst);
      if (cstdlib_strlen(__s))
      {
        v101 = 0;
        v102 = 0;
        do
        {
          v103 = &__s[v101];
          if (__s[v101] == 126)
          {
            v104 = &__s[v101 + 1];
            v105 = cstdlib_strlen(v104);
            cstdlib_memmove(v103, v104, v105 + 1);
            --v102;
          }
          else
          {
            v106 = cstdlib_strlen("¡");
            if (!cstdlib_strncmp(v103, "¡", v106))
            {
              v107 = &__s[(unsigned __int16)v102 + 1];
              v108 = &__s[(unsigned __int16)v102 + 2];
              v109 = cstdlib_strlen(v108);
              cstdlib_memmove(v107, v108, v109 + 1);
              __s[v101] = 126;
            }
          }
          v101 = (unsigned __int16)++v102;
        }
        while (cstdlib_strlen(__s) > (unsigned __int16)v102);
      }
      v42 = (char **)a20;
      v110 = cstdlib_strlen(*a20);
      v111 = v110 + cstdlib_strlen(__s) + 2;
      v40 = a15;
      if (v111 >= 0x81u)
      {
        v112 = heap_Realloc(*(uint64_t **)(v129 + 8), (uint64_t)*a20, v111);
        if (!v112)
        {
          v125 = (uint64_t *)(v129 + 32);
          goto LABEL_100;
        }
        *a20 = (const char *)v112;
      }
      if (cstdlib_strlen(__s) == 3)
      {
        v137 = 0;
        utf8_Utf8ToUtf32_Tolerant((uint64_t)__s, 3u, (uint64_t)&v137 + 4, 1u, &v137);
        v113 = (char *)*a20;
        if (HIDWORD(v137) == 8230)
        {
          v114 = ".";
          goto LABEL_70;
        }
      }
      else
      {
        v113 = (char *)*a20;
      }
      v114 = __s;
LABEL_70:
      cstdlib_strcat(v113, v114);
      v115 = 0;
      v116 = v139;
      while (1)
      {
        v117 = v115;
        v118 = *(unsigned __int8 *)(v139 + v115);
        if (v118 != 32 && v118 != 126)
          break;
        ++v115;
      }
      if (*(_BYTE *)(v139 + v115))
      {
        while (v118 != 32 && v118 != 126)
          LOBYTE(v118) = *(_BYTE *)(v139 + ++v115);
        *(_BYTE *)(v139 + v115) = 0;
        v116 = v139;
      }
      if (cstdlib_strcmp((const char *)(v116 + v117), ""))
        v119 = (const char *)(v139 + v117);
      else
        v119 = "*";
      cstdlib_strcat((char *)*a21, v119);
      if (a11 && cstdlib_strstr(__s1, "latin"))
        cstdlib_strcpy((char *)*a21, a11);
      v120 = 0;
      v121 = v138;
      while (1)
      {
        v122 = v120;
        v123 = *(unsigned __int8 *)(v138 + v120);
        if (v123 != 32 && v123 != 126)
          break;
        ++v120;
      }
      if (*(_BYTE *)(v138 + v120))
      {
        while (v123 != 32 && v123 != 126)
          LOBYTE(v123) = *(_BYTE *)(v138 + ++v120);
        *(_BYTE *)(v138 + v120) = 0;
        v121 = v138;
      }
      if (cstdlib_strcmp((const char *)(v121 + v122), ""))
        v124 = (const char *)(v138 + v122);
      else
        v124 = "*";
      cstdlib_strcat((char *)*a22, v124);
      ++v54;
      if ((v134 & 1) != 0)
        return v100;
    }
  }
  v41 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a15, v31);
  if (v41)
  {
    *a15 = (char *)v41;
    *a19 = v31;
    goto LABEL_13;
  }
LABEL_99:
  v125 = (uint64_t *)(a1 + 32);
LABEL_100:
  log_OutPublic(*v125, (uint64_t)"FE_ONEWORD", 34000, 0, v33, v34, v35, v36, v127);
  return 2310021130;
}

uint64_t crf_mde_seg_fv_new(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;

  v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16 * a2);
  *a3 = v6;
  if (!v6)
  {
LABEL_7:
    v14 = 2310021130;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 35000, 0, v7, v8, v9, v10, v16);
    return v14;
  }
  *((_DWORD *)a3 + 3) = a2;
  if (a2)
  {
    v11 = 0;
    do
    {
      v12 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
      v13 = *a3;
      *(_QWORD *)(*a3 + v11) = v12;
      if (!v12)
        goto LABEL_7;
      *(_DWORD *)(v13 + v11 + 8) = 65;
      cstdlib_strcpy(v12, "-");
      v11 += 16;
    }
    while (16 * a2 != v11);
  }
  v14 = 0;
  *((_DWORD *)a3 + 2) = a2;
  return v14;
}

_QWORD *crf_mde_seg_fv_dealloc(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;

  if (a2)
  {
    v3 = *(_QWORD *)a2;
    if (v3)
    {
      v4 = result;
      v5 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v5)
      {
        v6 = 0;
        for (i = 0; i < v5; ++i)
        {
          if (*(_QWORD *)(v3 + v6))
          {
            heap_Free((_QWORD *)v4[1], *(_QWORD *)(v3 + v6));
            v3 = *(_QWORD *)a2;
            *(_QWORD *)(*(_QWORD *)a2 + v6) = 0;
            v5 = *(unsigned int *)(a2 + 8);
          }
          v6 += 16;
        }
      }
      result = heap_Free((_QWORD *)v4[1], v3);
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t crf_mde_seg_fv_clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*(_DWORD *)(a1 + 8))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      cstdlib_strcpy(*(char **)(*(_QWORD *)a1 + v2), "-");
      ++v3;
      v2 += 16;
    }
    while (v3 < *(unsigned int *)(a1 + 8));
  }
  return 0;
}

uint64_t crf_mde_seg_fv_add(uint64_t a1, _QWORD *a2, unsigned int a3, char *__s)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v8 = cstdlib_strlen(__s);
  v9 = *a2 + 16 * a3;
  if (*(_DWORD *)(v9 + 8) >= v8)
  {
    v11 = *(char **)v9;
    goto LABEL_5;
  }
  v10 = v8 + 1;
  v11 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)v9, v10);
  if (v11)
  {
    v16 = *a2 + 16 * a3;
    *(_QWORD *)v16 = v11;
    *(_DWORD *)(v16 + 8) = v10;
LABEL_5:
    cstdlib_strcpy(v11, __s);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 35000, 0, v12, v13, v14, v15, v18);
  return 2310021130;
}

uint64_t crf_mde_seg_get_features(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, __int16 a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, _QWORD *a10, unsigned int a11, unsigned int a12)
{
  uint64_t v14;
  char *v15;
  const char *v16;
  uint64_t result;
  int v18;
  char __s[513];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a9)
  {
    v14 = 0;
    while (2)
    {
      v15 = &byte_24D285DB8;
      v16 = "char";
      while (cstdlib_strcmp(*(const char **)(a8 + 8 * v14), v16))
      {
        v16 = (const char *)*((_QWORD *)v15 + 1);
        v15 += 24;
        if (!v16)
          goto LABEL_9;
      }
      BYTE2(v18) = *v15;
      LOWORD(v18) = a6;
      result = (*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, int, char *))v15
                - 1))(a1, a2, a3, a4, a5, a11, a12, a7, v18, __s);
      if ((result & 0x80000000) != 0)
        return result;
      result = crf_mde_seg_fv_add(a1, a10, v14, __s);
      if ((result & 0x80000000) != 0)
        return result;
LABEL_9:
      if (++v14 != a9)
        continue;
      break;
    }
  }
  return 0;
}

uint64_t crf_mde_seg_set_padding_features(uint64_t a1, unsigned int a2, int a3, _QWORD *a4, int a5)
{
  unsigned int v9;
  const char *v10;
  char *v11;
  uint64_t result;
  char __s2[3];
  char __dst[8];
  char __s[1024];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v9 = 0;
  if (a5 == 1)
    v10 = ">";
  else
    v10 = "<";
  while (1)
  {
    v11 = "-";
    if (!v9)
    {
      v11 = __dst;
      cstdlib_strcpy(__dst, v10);
      LH_itoa(a2, __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
    }
    cstdlib_strcpy(__s, v11);
    result = crf_mde_seg_fv_add(a1, a4, v9, __s);
    if ((result & 0x80000000) != 0)
      break;
    if (a3 == ++v9)
      return 0;
  }
  return result;
}

uint64_t crf_mde_seg_fe_char(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned int v11;
  const char *v12;
  unsigned __int16 v13;
  size_t v14;

  v11 = a10 + a9;
  if (v11 >= a3)
    v12 = "-";
  else
    v12 = *(const char **)(a2 + 8 * v11);
  v13 = cstdlib_strlen(v12);
  if ((v13 & 0xFE00) != 0)
    v14 = 512;
  else
    v14 = v13;
  cstdlib_strncpy(a11, v12, v14);
  a11[v14] = 0;
  return 0;
}

uint64_t crf_mde_seg_fe_isvowel(int a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, char *__s, unsigned __int16 a9, char a10, char *a11)
{
  uint64_t v11;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  const char *v18;
  unsigned __int16 v19;
  size_t v20;

  v11 = a10 + a9;
  if (v11 >= a3)
  {
    v18 = "-";
  }
  else if (__s && (v14 = cstdlib_strlen(__s)) != 0)
  {
    v15 = v14;
    v16 = 0;
    while (1)
    {
      v17 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v16], 1);
      if (!cstdlib_strncmp(*(const char **)(a2 + 8 * v11), &__s[v16], v17))
        break;
      v16 += v17;
      if (v16 >= v15)
        goto LABEL_7;
    }
    v18 = "1";
  }
  else
  {
LABEL_7:
    v18 = "0";
  }
  v19 = cstdlib_strlen(v18);
  if ((v19 & 0xFE00) != 0)
    v20 = 512;
  else
    v20 = v19;
  cstdlib_strncpy(a11, v18, v20);
  a11[v20] = 0;
  return 0;
}

uint64_t crf_mde_seg_fe_char_count(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned __int16 v11;
  size_t v12;
  unsigned __int16 v13;
  size_t v14;
  char __s[5];

  if (a10 + a9 >= a3)
  {
    v13 = cstdlib_strlen("-");
    if ((v13 & 0xFE00) != 0)
      v14 = 512;
    else
      v14 = v13;
    cstdlib_strncpy(a11, "-", v14);
    a11[v14] = 0;
  }
  else
  {
    LH_itoa(a9, __s, 0xAu);
    v11 = cstdlib_strlen(__s);
    if ((v11 & 0xFE00) != 0)
      v12 = 512;
    else
      v12 = v11;
    cstdlib_strncpy(a11, __s, v12);
    a11[v12] = 0;
  }
  return 0;
}

uint64_t crf_mde_seg_fe_char_revcount(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  int v11;
  unsigned __int16 v12;
  size_t v13;
  unsigned __int16 v14;
  size_t v15;
  char __s[5];

  v11 = a10 + a9;
  if (v11 < 0 || v11 >= a3)
  {
    v14 = cstdlib_strlen("-");
    if ((v14 & 0xFE00) != 0)
      v15 = 512;
    else
      v15 = v14;
    cstdlib_strncpy(a11, "-", v15);
    a11[v15] = 0;
  }
  else
  {
    LH_itoa(~a9 + a3, __s, 0xAu);
    v12 = cstdlib_strlen(__s);
    if ((v12 & 0xFE00) != 0)
      v13 = 512;
    else
      v13 = v12;
    cstdlib_strncpy(a11, __s, v13);
    a11[v13] = 0;
  }
  return 0;
}

uint64_t crf_mde_seg_fe_morpheme(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned int v11;
  const char *v12;
  unsigned __int16 v13;
  size_t v14;

  v11 = a10 + a9;
  if (v11 >= a3)
  {
    if (a6 == 1 && (v11 & 0x80000000) != 0)
    {
      v12 = "SOS";
    }
    else if (a7 == 1 && (int)v11 >= (int)a3)
    {
      v12 = "EOS";
    }
    else
    {
      v12 = "-";
    }
  }
  else
  {
    v12 = *(const char **)(a2 + 8 * v11);
  }
  v13 = cstdlib_strlen(v12);
  if ((v13 & 0xFE00) != 0)
    v14 = 512;
  else
    v14 = v13;
  cstdlib_strncpy(a11, v12, v14);
  a11[v14] = 0;
  return 0;
}

uint64_t crf_mde_seg_fe_punc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, char a10, char *a11)
{
  unsigned int v11;
  const char *v12;
  unsigned __int16 v13;
  size_t v14;

  v11 = a10 + a9;
  if (v11 >= a3)
  {
    v12 = "-";
  }
  else if (*(_DWORD *)(a4 + 4 * v11) == 1)
  {
    v12 = "YES";
  }
  else
  {
    v12 = "NO";
  }
  v13 = cstdlib_strlen(v12);
  if ((v13 & 0xFE00) != 0)
    v14 = 512;
  else
    v14 = v13;
  cstdlib_strncpy(a11, v12, v14);
  a11[v14] = 0;
  return 0;
}

uint64_t crf_mde_utils_add2Str(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  unsigned int v22;

  v8 = cstdlib_strlen(__s);
  v9 = *a3;
  if (v8 >= v9 - cstdlib_strlen(*a2))
  {
    v11 = cstdlib_strlen(__s);
    v12 = *a3;
    v13 = (unsigned __int16)(v11 - v12 + cstdlib_strlen(*a2));
    if (v13 <= 0x80)
      v14 = 128;
    else
      v14 = v13;
    v10 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a3 + v14 + 1);
    if (!v10)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v22);
      return 2310021130;
    }
    *a2 = v10;
    *a3 += v14;
  }
  else
  {
    v10 = *a2;
  }
  v19 = cstdlib_strlen(v10);
  v20 = (char *)*a2;
  if (v19)
    cstdlib_strcat(v20, __s);
  else
    cstdlib_strcpy(v20, __s);
  return 0;
}

uint64_t hlp_Write2WordRec(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, __int16 a5, __int16 a6, int a7, const char *a8, char *__s, char *a10, char *a11, int a12, int a13)
{
  uint64_t result;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v20;
  __int16 v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v23;
  __int16 v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v26;
  __int16 v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v29;
  __int16 v30;
  unsigned __int16 v31;
  int v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;

  v35 = a5;
  v34 = a6;
  v33 = 0;
  v32 = 8;
  v31 = 0;
  if (a7)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1 + 80))(a2, a3, *a4, &v31);
    goto LABEL_3;
  }
  if (!a13)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1 + 88))(a2, a3, *a4, &v31);
LABEL_3:
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_7;
  }
  v31 = *a4;
LABEL_7:
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, v31, 0, 1, &v32, &v33);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, v31, 1, 1, &v35, &v33);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, v31, 2, 1, &v34, &v33);
      if ((result & 0x80000000) == 0)
      {
        v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a1 + 160);
        v20 = v31;
        v21 = cstdlib_strlen(__s);
        result = v19(a2, a3, v20, 3, (unsigned __int16)(v21 + 1), __s, &v33);
        if ((result & 0x80000000) == 0)
        {
          v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
          v23 = v31;
          v24 = cstdlib_strlen(a8);
          result = v22(a2, a3, v23, 5, (unsigned __int16)(v24 + 1), a8, &v33);
          if ((result & 0x80000000) == 0)
          {
            v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a1 + 160);
            v26 = v31;
            v27 = cstdlib_strlen(a10);
            result = v25(a2, a3, v26, 6, (unsigned __int16)(v27 + 1), a10, &v33);
            if ((result & 0x80000000) == 0)
            {
              v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a1 + 160);
              v29 = v31;
              v30 = cstdlib_strlen(a11);
              result = v28(a2, a3, v29, 9, (unsigned __int16)(v30 + 1), a11, &v33);
              if ((result & 0x80000000) == 0)
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, v31, 7, 1, &a12, &v33);
                if ((result & 0x80000000) == 0)
                  *a4 = v31;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t crf_mde_utils_POS_dctlkp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a2 + 96))(a3, a4, a5, a6, &__c[3], &__c[1], __c);
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1]
      || (log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : no result", v10, v11, v12, a5), *(_WORD *)&__c[1]))
    {
      v14 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v14)
        *v14 = 0;
      v15 = *(_QWORD **)(a1 + 8);
      v16 = cstdlib_strlen(**(const char ***)&__c[3]);
      v17 = (char *)heap_Calloc(v15, 1, v16 + 1);
      *a7 = v17;
      if (v17)
      {
        cstdlib_strcpy(v17, **(const char ***)&__c[3]);
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s POS dct look up %s : adding %s %s %s", v22, v23, v24, a5);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v18, v19, v20, v21, v26);
        return 2310021130;
      }
    }
  }
  return v13;
}

uint64_t crf_mde_utils_write_morphemes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 *a11, unsigned __int16 a12, __int16 a13, unsigned __int16 *a14, const char *a15, unsigned __int16 *a16)
{
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  uint64_t v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  int v37;
  unsigned __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  unsigned int v42;
  int v43;
  __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  uint64_t v49;
  _BOOL4 v51;
  unsigned __int16 v52;
  uint64_t v53;
  char *v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  int v65;
  unsigned int __s;
  int v68;
  __int16 v70;
  _BOOL4 v71;
  int v72;
  uint64_t v74;
  uint64_t v76;
  unsigned __int16 v79;
  unsigned __int16 v80;
  char *v81;
  char __dst[21];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  v80 = *a11;
  v18 = cstdlib_strlen(a15);
  cstdlib_strcpy(__dst, "normal");
  if (*a14)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v21 += cstdlib_strlen(*(const char **)(*((_QWORD *)a14 + 1) + v19)) + 1;
      ++v20;
      v19 += 48;
    }
    while (v20 < *a14);
  }
  else
  {
    LOWORD(v21) = 0;
  }
  v22 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, (unsigned __int16)v21 + 1);
  if (!v22)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v23, v24, v25, v26, __s);
    return 2310021130;
  }
  v27 = v22;
  cstdlib_strcpy(v22, **((const char ***)a14 + 1));
  if (*a14 >= 2u)
  {
    cstdlib_strcat(v27, "_");
    if (*a14 >= 2u)
    {
      v28 = 1;
      v29 = 48;
      do
      {
        cstdlib_strcat(v27, *(const char **)(*((_QWORD *)a14 + 1) + v29));
        v30 = *a14;
        if ((int)v28 + 1 < v30)
        {
          cstdlib_strcat(v27, "_");
          v30 = *a14;
        }
        ++v28;
        v29 += 48;
      }
      while (v28 < v30);
    }
  }
  if (cstdlib_strlen(v27) == 128)
    cstdlib_strcat(v27, "_");
  v79 = cstdlib_strlen(v27);
  v31 = a13 + a12 + v79;
  *a16 = v31;
  v32 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v31], 1);
  v33 = *a16;
  if (v18 > v33)
  {
    v34 = v32;
    do
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, a6, &a15[v33]))
        break;
      if (!cstdlib_strncmp(&a15[*a16], "_", v34))
        break;
      v35 = *a16 + v34;
      *a16 = v35;
      v34 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v35], 1);
      v33 = *a16;
    }
    while (v18 > v33);
  }
  v72 = a13 + a12;
  v36 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v72], 1);
  v37 = a12 - v36 + a13;
  v74 = a1;
  v76 = a6;
  if (v37 >= 0
    && (v38 = v36,
        v39 = &a15[v37],
        (*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, a6, v39)))
  {
    v40 = 0;
    v41 = 0;
    v42 = v38;
    LOWORD(v43) = v38;
    do
    {
      v44 = v43;
      if (!cstdlib_strncmp(v39, "_", v42))
        break;
      v41 = (unsigned __int16)v43;
      v45 = Utf8_LengthInBytes((unsigned __int8 *)&a15[v72 - (unsigned __int16)v43], 1);
      v43 = (unsigned __int16)v43 + v45;
      if (a12 - v43 + a13 < 0)
      {
        v40 = v44;
        break;
      }
      v42 = v45;
      v39 = &a15[a12 - v43 + a13];
      v40 = v44;
    }
    while ((*(unsigned int (**)(uint64_t, uint64_t, const char *))(a4 + 128))(a5, v76, v39));
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  if (!v79)
  {
    v49 = 0;
    v47 = 0;
    v46 = 0;
LABEL_50:
    if (a2 == 1 && a3)
    {
      v58 = v74;
      v53 = crf_mde_utils_POS_dctlkp(v74, a4, a5, v76, a3, *(_QWORD *)(*((_QWORD *)a14 + 1) + 48 * v46), &v81);
      if ((v53 & 0x80000000) != 0)
        return v53;
      v54 = v81;
      v59 = *a16 - a13;
      if (v81)
      {
        LOWORD(v68) = 0;
        v49 = hlp_Write2WordRec(a7, a9, a10, &v80, a12 - v40 + v47, v59, v46, v81, "", "", __dst, v68, 1);
        if ((v49 & 0x80000000) != 0)
          goto LABEL_74;
        heap_Free(*(_QWORD **)(v74 + 8), (uint64_t)v54);
      }
      else
      {
        LOWORD(v68) = 0;
        v49 = hlp_Write2WordRec(a7, a9, a10, &v80, a12 - v40 + v47, v59, v46, "*", "", "", __dst, v68, 1);
        if ((v49 & 0x80000000) != 0)
        {
LABEL_70:
          *a11 = v80;
          v58 = v74;
          goto LABEL_71;
        }
      }
    }
    else
    {
      if (a12 - v41 + v47 != (unsigned __int16)(*a16 - a13))
      {
        LOWORD(v68) = 0;
        v49 = hlp_Write2WordRec(a7, a9, a10, &v80, a12 - (unsigned __int16)v41 + v47, *a16 - a13, v46, "", "", "", __dst, v68, 1);
      }
      if ((v49 & 0x80000000) != 0)
        goto LABEL_70;
    }
    v60 = (unsigned __int16)(v72 + v79);
    v61 = (unsigned __int16)(a13 + a12);
    if (v60 > (unsigned __int16)(a13 + a12) && v79)
    {
      v62 = 0;
      v63 = &a15[v61];
      v64 = v61 + 1;
      do
      {
        v65 = v27[v62];
        if (v63[v62] != v65)
          v63[v62] = v65;
        if (v64 + v62 >= v60)
          break;
        ++v62;
      }
      while (v62 < v79);
    }
    goto LABEL_70;
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v51 = a2 == 1 && a3 != 0;
  v70 = a12 - v40;
  v71 = v51;
  while (1)
  {
    v52 = Utf8_LengthInBytes((unsigned __int8 *)&v27[v48], 1);
    if (!cstdlib_strncmp(&v27[v48], "_", v52))
      break;
LABEL_46:
    v48 += v52;
    if (v48 >= v79)
      goto LABEL_50;
  }
  if (!v71)
  {
    LOWORD(v68) = 0;
    v57 = hlp_Write2WordRec(a7, a9, a10, &v80, v70 + v47, v48 + a12, v46, "", "", "", __dst, v68, 1);
    goto LABEL_44;
  }
  v53 = crf_mde_utils_POS_dctlkp(v74, a4, a5, v76, a3, *(_QWORD *)(*((_QWORD *)a14 + 1) + 48 * v46), &v81);
  if ((v53 & 0x80000000) != 0)
    return v53;
  v54 = v81;
  v55 = v70 + v47;
  v56 = v48 + a12;
  if (!v81)
  {
    LOWORD(v68) = 0;
    v57 = hlp_Write2WordRec(a7, a9, a10, &v80, v55, v56, v46, "*", "", "", __dst, v68, 1);
LABEL_44:
    v49 = v57;
    if ((v57 & 0x80000000) != 0)
      goto LABEL_70;
    goto LABEL_45;
  }
  LOWORD(v68) = 0;
  v49 = hlp_Write2WordRec(a7, a9, a10, &v80, v55, v56, v46, v81, "", "", __dst, v68, 1);
  if ((v49 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v74 + 8), (uint64_t)v54);
    v81 = 0;
LABEL_45:
    ++v46;
    v47 = v48 + 1;
    goto LABEL_46;
  }
  v58 = v74;
LABEL_74:
  *a11 = v80;
  heap_Free(*(_QWORD **)(v58 + 8), (uint64_t)v54);
LABEL_71:
  heap_Free(*(_QWORD **)(v58 + 8), (uint64_t)v27);
  return v49;
}

uint64_t crf_mde_utils_adddctres(uint64_t a1, uint64_t a2, const char *a3, char *__s, const char *a5, int a6)
{
  _QWORD *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned __int16 i;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  char *v38;
  _QWORD *v39;
  size_t v40;
  char *v41;
  _QWORD *v42;
  size_t v43;
  char *v44;
  _QWORD *v45;
  size_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  size_t v50;
  char *v51;
  _QWORD *v52;
  size_t v53;
  char *v54;
  _QWORD *v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  unsigned int v60;

  v12 = *(_QWORD **)(a1 + 8);
  v13 = cstdlib_strlen(__s);
  v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
  if (v14)
  {
    v19 = v14;
    cstdlib_strcpy(v14, __s);
    v20 = cstdlib_strchr(__s, 92);
    for (i = 1; v20; ++i)
    {
      *v20 = 0;
      v20 = cstdlib_strchr(v20 + 1, 92);
    }
    v22 = *(unsigned __int16 *)(a2 + 24);
    if (*(_WORD *)(a2 + 24))
    {
      if (*(unsigned __int16 *)(a2 + 8) + i >= v22)
      {
        v23 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 16), 32 * (v22 + i) + 160);
        if (!v23)
          goto LABEL_33;
        *(_QWORD *)(a2 + 16) = v23;
        v28 = i + *(_WORD *)(a2 + 24) + 5;
        *(_WORD *)(a2 + 24) = v28;
        v29 = *(unsigned __int16 *)(a2 + 8);
        if (v29 < v28)
        {
          v30 = v28;
          v31 = (_QWORD *)(v23 + 32 * v29 + 8);
          v32 = v30 - v29;
          do
          {
            *((_DWORD *)v31 - 2) = 0;
            v31[1] = 0;
            v31[2] = 0;
            *v31 = 0;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    else
    {
      if (i >= 5u)
        v34 = i + 1;
      else
        v34 = 5;
      v35 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32 * v34);
      *(_QWORD *)(a2 + 16) = v35;
      if (!v35)
        goto LABEL_33;
      *(_WORD *)(a2 + 24) = v34;
    }
    v36 = cstdlib_strchr(v19, 92);
    v37 = v19;
    if (v36)
    {
      v38 = v36;
      v37 = v19;
      do
      {
        *v38 = 0;
        v39 = *(_QWORD **)(a1 + 8);
        v40 = cstdlib_strlen(v37);
        v41 = (char *)heap_Calloc(v39, 1, v40 + 1);
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 8) = v41;
        if (!v41)
          goto LABEL_33;
        cstdlib_strcpy(v41, v37);
        v42 = *(_QWORD **)(a1 + 8);
        v43 = cstdlib_strlen(a3);
        v44 = (char *)heap_Calloc(v42, 1, v43 + 1);
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 16) = v44;
        if (!v44)
          goto LABEL_33;
        cstdlib_strcpy(v44, a3);
        if (a5 && cstdlib_strlen(a5))
        {
          v45 = *(_QWORD **)(a1 + 8);
          v46 = cstdlib_strlen(a5);
          v47 = (char *)heap_Calloc(v45, 1, v46 + 1);
          *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 24) = v47;
          if (!v47)
            goto LABEL_33;
          cstdlib_strcpy(v47, a5);
        }
        v48 = *(unsigned __int16 *)(a2 + 8);
        *(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v48) = a6;
        *(_WORD *)(a2 + 8) = v48 + 1;
        v37 = v38 + 1;
        v38 = cstdlib_strchr(v38 + 1, 92);
      }
      while (v38);
    }
    v49 = *(_QWORD **)(a1 + 8);
    v50 = cstdlib_strlen(v37);
    v51 = (char *)heap_Calloc(v49, 1, v50 + 1);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 8) = v51;
    if (v51)
    {
      cstdlib_strcpy(v51, v37);
      v52 = *(_QWORD **)(a1 + 8);
      v53 = cstdlib_strlen(a3);
      v54 = (char *)heap_Calloc(v52, 1, v53 + 1);
      *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 16) = v54;
      if (v54)
      {
        cstdlib_strcpy(v54, a3);
        if (!a5 || !cstdlib_strlen(a5))
          goto LABEL_32;
        v55 = *(_QWORD **)(a1 + 8);
        v56 = cstdlib_strlen(a5);
        v57 = (char *)heap_Calloc(v55, 1, v56 + 1);
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * *(unsigned __int16 *)(a2 + 8) + 24) = v57;
        if (v57)
        {
          cstdlib_strcpy(v57, a5);
LABEL_32:
          v33 = 0;
          v58 = *(unsigned __int16 *)(a2 + 8);
          *(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v58) = a6;
          *(_WORD *)(a2 + 8) = v58 + 1;
          *(_DWORD *)(a2 + 28) = 1;
          *(_DWORD *)(a2 + 40) = 1;
LABEL_34:
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v19);
          return v33;
        }
      }
    }
LABEL_33:
    v33 = 2310021130;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, v60);
    goto LABEL_34;
  }
  v33 = 2310021130;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v60);
  return v33;
}

uint64_t crf_mde_utils_sysdctlkp(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  char *v38;
  size_t v39;
  _QWORD *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v62;
  char *v63;
  char __dst[6];
  char *__s1;
  unsigned __int8 v70;
  unsigned __int16 v71;
  char **v72;

  v72 = 0;
  v70 = 0;
  __s1 = 0;
  v71 = -1;
  v14 = "xps";
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, "fecfg", "mde_affixtags", &v72, &v71, &v70) & 0x80000000) == 0&& v71)
  {
    v15 = cstdlib_strchr(*v72, v70);
    if (v15)
      *v15 = 0;
    v14 = *v72;
  }
  if ((paramc_ParamGetStr(a1[5], (uint64_t)"sysdctlookup", &__s1) & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "no"))
    return 0;
  v16 = (uint64_t)a9;
  v71 = 0;
  cstdlib_strcpy(__dst, "g2p");
  if (a5)
  {
    cstdlib_strcat(__dst, (const char *)(a6 + 3 * *a9));
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int8 *, char ***, unsigned __int16 *, unsigned __int8 *, _QWORD))(a2 + 232))(a3, a4, __dst, a9, &v72, &v71, &v70, 0);
  }
  else
  {
    v62 = 0;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int8 *, char ***, unsigned __int16 *, unsigned __int8 *, uint64_t))(a2 + 240))(a3, a4, __dst, a9, &v72, &v71, &v70, a7);
  }
  v21 = v17;
  if ((v17 & 0x80000000) == 0)
  {
    if (v71
      || (log_OutText(a1[4], (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : no result", v18, v19, v20, (uint64_t)a9), v71))
    {
      v63 = (char *)v14;
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = v72[v22];
        v25 = cstdlib_strchr(v24, v70);
        if (!v25)
          goto LABEL_34;
        *v25 = 0;
        v29 = cstdlib_strchr(v25 + 1, v70);
        if (!v29)
          goto LABEL_34;
        *v29 = 0;
        v30 = cstdlib_strchr(v29 + 1, v70);
        if (!v30)
          goto LABEL_34;
        *v30 = 0;
        v31 = v30 + 1;
        v32 = cstdlib_strchr(v30 + 1, v70);
        v33 = v32;
        if (v32)
        {
          *v32 = 0;
          v33 = v32 + 1;
          v34 = cstdlib_strchr(v32 + 1, v70);
          if (v34)
          {
            *v34 = 0;
            v35 = cstdlib_strchr(v34 + 1, v70);
            if (v35)
            {
              *v35 = 0;
              v36 = v35 + 1;
              v37 = cstdlib_strchr(v35 + 1, v70);
              if (v37)
              {
                *v37 = 0;
                v38 = cstdlib_strchr(v37 + 1, v70);
                if (v38)
                  *v38 = 0;
              }
              if (!cstdlib_strcmp(v36, "0") || !cstdlib_strcmp(v36, "2"))
                goto LABEL_34;
            }
          }
        }
        v39 = cstdlib_strlen(v31);
        if (v24 && v39 && cstdlib_strlen(v24))
        {
          v40 = (_QWORD *)a1[1];
          v41 = cstdlib_strlen(v24);
          v42 = (char *)heap_Calloc(v40, 1, v41 + 1);
          if (!v42 || (v47 = v42, cstdlib_strcpy(v42, v24), (v48 = heap_Calloc((_QWORD *)a1[1], 1, 256)) == 0))
          {
            log_OutPublic(a1[4], (uint64_t)"FE_ONEWORD", 34000, 0, v43, v44, v45, v46, v62);
            return 2310021130;
          }
          v49 = (char *)v48;
          if (cstdlib_strlen(v31) == 1 && cstdlib_strstr(v63, v31))
          {
            cstdlib_strcpy(v49, v31);
            v53 = 2;
          }
          else
          {
            cstdlib_strcpy(v49, v31);
            if (a8)
            {
              v54 = v49;
              while (1)
              {
                v55 = cstdlib_strstr(v31, "\\");
                if (v55)
                {
                  cstdlib_strncpy(v54, v31, (unsigned __int16)((_WORD)v55 - (_WORD)v31));
                  v54[(unsigned __int16)((_WORD)v55 - (_WORD)v31)] = 0;
                }
                else
                {
                  cstdlib_strcpy(v54, v31);
                }
                v71 = -1;
                v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char ***, unsigned __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, a8, v54, &v72, &v71, &v70);
                if ((v56 & 0x80000000) != 0)
                  return v56;
                if (v71 == 1)
                {
                  v57 = cstdlib_strchr(*v72, v70);
                  if (v57)
                    *v57 = 0;
                  cstdlib_strcpy(v54, *v72);
                }
                if (!v55)
                  break;
                v58 = &v54[cstdlib_strlen(v54)];
                cstdlib_strcpy(v58, "\\");
                v54 = v58 + 1;
                v31 = v55 + 1;
              }
            }
            v53 = 1;
          }
          log_OutText(a1[4], (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : adding %s %s %s", v50, v51, v52, (uint64_t)a9);
          v59 = crf_mde_utils_adddctres((uint64_t)a1, a10, v47, v49, v33, v53);
          heap_Free((_QWORD *)a1[1], (uint64_t)v47);
          v60 = (uint64_t)v49;
          v16 = (uint64_t)a9;
          heap_Free((_QWORD *)a1[1], v60);
          v21 = 0;
          if ((v59 & 0x80000000) != 0)
            return v59;
        }
        else
        {
LABEL_34:
          if (!v23)
            log_OutText(a1[4], (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s : found entry, but discarded (mde field))", v26, v27, v28, v16);
          v23 = 1;
        }
        ++v22;
      }
      while (v22 < v71);
    }
  }
  return v21;
}

uint64_t crf_mde_utils_dctlkp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  size_t v29;
  char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  _BYTE __c[11];

  memset(__c, 0, sizeof(__c));
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a2 + 96))(a3, a4, a5, a6, &__c[3], &__c[1], __c);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (!*(_WORD *)&__c[1])
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : no result", v10, v11, v12, a5);
    if (!*(_WORD *)&__c[1])
      return v13;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  while (1)
  {
    v17 = cstdlib_strchr(*(char **)(*(_QWORD *)&__c[3] + 8 * v14), __c[0]);
    v18 = v16;
    if (v17)
    {
      *v17 = 0;
      v18 = v17 + 1;
    }
    v19 = *(_QWORD **)(a1 + 8);
    v20 = cstdlib_strlen(*(const char **)(*(_QWORD *)&__c[3] + 8 * v14));
    v21 = (char *)heap_Calloc(v19, 1, v20 + 1);
    if (!v21)
    {
LABEL_26:
      v13 = 2310021130;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = 34000;
      goto LABEL_28;
    }
    v26 = v21;
    cstdlib_strcpy(v21, *(const char **)(*(_QWORD *)&__c[3] + 8 * v14));
    v27 = cstdlib_strchr(v18, __c[0]);
    if (!v27)
    {
      v16 = v18;
      if (v15)
        goto LABEL_12;
LABEL_27:
      v13 = 2310021130;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = 34008;
LABEL_28:
      log_OutPublic(v40, (uint64_t)"FE_ONEWORD", v41, 0, v22, v23, v24, v25, v43);
      return v13;
    }
    *v27 = 0;
    v16 = v27 + 1;
    v15 = v18;
    if (!v18)
      goto LABEL_27;
LABEL_12:
    v28 = *(_QWORD **)(a1 + 8);
    v29 = cstdlib_strlen(v15);
    v30 = (char *)heap_Calloc(v28, 1, v29 + 1);
    if (!v30)
      goto LABEL_26;
    v31 = v30;
    cstdlib_strcpy(v30, v15);
    v32 = cstdlib_strchr(v16, __c[0]);
    if (v32)
      *v32 = 0;
    if (v16 && *v16 != __c[0] && cstdlib_strlen(v16))
    {
      v36 = *(_QWORD **)(a1 + 8);
      v37 = cstdlib_strlen(v16);
      v38 = (char *)heap_Calloc(v36, 1, v37 + 1);
      if (!v38)
        goto LABEL_26;
      v39 = v38;
      cstdlib_strcpy(v38, v16);
    }
    else
    {
      v39 = 0;
    }
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s dct look up %s : adding %s %s %s", v33, v34, v35, a5);
    v13 = crf_mde_utils_adddctres(a1, a7, v31, v26, v39, a8);
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v31);
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v26);
    if ((v13 & 0x80000000) != 0)
      break;
    if (v39)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v39);
    if (++v14 >= (unint64_t)*(unsigned __int16 *)&__c[1])
      return 0;
  }
  if (v39)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v39);
  return v13;
}

uint64_t crf_mde_utils_dynstr_add(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v8 = 2310021120;
  v9 = cstdlib_strlen(*(const char **)a2);
  v10 = cstdlib_strlen(a3);
  v11 = *(unsigned __int16 *)(a2 + 8);
  if (v9 + v10 + 2 >= v11)
  {
    v12 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a2, v10 + v11 + *(unsigned __int16 *)(a2 + 10));
    if (!v12)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v13, v14, v15, v16, v18);
      return 2310021130;
    }
    *(_QWORD *)a2 = v12;
    *(_WORD *)(a2 + 8) += v10 + *(_WORD *)(a2 + 10);
  }
  if (a4 == 1)
  {
    cstdlib_strcat(*(char **)a2, a3);
    return 0;
  }
  if (a4 == 2)
  {
    cstdlib_strcpy(*(char **)a2, a3);
    return 0;
  }
  return v8;
}

_QWORD *crf_mde_utils_dynstr_free(_QWORD *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)a2;
  if (v3)
  {
    result = heap_Free((_QWORD *)result[1], v3);
    *(_QWORD *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t crf_mde_utils_dynstr_init(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  __int16 v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v5 = a3;
  v8 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, a3);
  *(_QWORD *)a2 = v8;
  if (v8)
  {
    *(_WORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 10) = a4;
    cstdlib_strcpy(v8, "");
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v9, v10, v11, v12, v14);
    return 2310021130;
  }
}

uint64_t crf_mde_utils_CRF_MDE_SEGPAT_T_init(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;

  v6 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 80 * a3);
  *a2 = v6;
  if (v6)
  {
    if (a3)
    {
      v11 = 0;
      v12 = 80 * a3;
      while (1)
      {
        result = crf_mde_utils_dynstr_init(a1, *a2 + v11, 0x20u, 16);
        if ((result & 0x80000000) != 0)
          break;
        result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 32, 0x20u, 16);
        if ((result & 0x80000000) != 0)
          break;
        result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 48, 0x20u, 16);
        if ((result & 0x80000000) != 0)
          break;
        result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 16, 0x20u, 16);
        if ((result & 0x80000000) != 0)
          break;
        result = crf_mde_utils_dynstr_init(a1, *a2 + v11 + 64, 0x20u, 16);
        if ((result & 0x80000000) != 0)
          break;
        v11 += 80;
        if (v12 == v11)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v7, v8, v9, v10, v14);
    return 2310021130;
  }
  return result;
}

_QWORD *crf_mde_utils_CRF_MDE_SEGPAT_T_free(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if (v4)
  {
    v5 = result;
    if (a3)
    {
      v6 = 0;
      v7 = 80 * a3;
      do
      {
        v8 = *a2;
        v9 = *(_QWORD *)(*a2 + v6);
        if (v9)
        {
          heap_Free((_QWORD *)v5[1], v9);
          *(_QWORD *)(v8 + v6) = 0;
        }
        v10 = *a2;
        *(_DWORD *)(v8 + v6 + 8) = 0;
        v11 = v10 + v6;
        v12 = *(_QWORD *)(v10 + v6 + 32);
        if (v12)
        {
          heap_Free((_QWORD *)v5[1], v12);
          *(_QWORD *)(v11 + 32) = 0;
          v10 = *a2;
        }
        *(_DWORD *)(v11 + 40) = 0;
        v13 = v10 + v6;
        v14 = *(_QWORD *)(v10 + v6 + 48);
        if (v14)
        {
          heap_Free((_QWORD *)v5[1], v14);
          *(_QWORD *)(v13 + 48) = 0;
          v10 = *a2;
        }
        *(_DWORD *)(v13 + 56) = 0;
        v15 = v10 + v6;
        v16 = *(_QWORD *)(v10 + v6 + 16);
        if (v16)
        {
          heap_Free((_QWORD *)v5[1], v16);
          *(_QWORD *)(v15 + 16) = 0;
          v10 = *a2;
        }
        *(_DWORD *)(v15 + 24) = 0;
        v17 = v10 + v6;
        v18 = *(_QWORD *)(v10 + v6 + 64);
        if (v18)
        {
          heap_Free((_QWORD *)v5[1], v18);
          *(_QWORD *)(v17 + 64) = 0;
        }
        *(_DWORD *)(v17 + 72) = 0;
        v6 += 80;
      }
      while (v7 != v6);
      v4 = *a2;
    }
    result = heap_Free((_QWORD *)v5[1], v4);
    *a2 = 0;
  }
  return result;
}

uint64_t crf_mde_utils_do_validation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int16 a13, int a14, const char *a15, char **a16, unsigned __int16 *a17)
{
  uint64_t v17;
  uint64_t i;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  uint64_t j;
  unsigned __int16 *v52;
  unint64_t k;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  const char *v65;
  _QWORD *v66;
  size_t v67;
  char *v68;
  _QWORD *v69;
  size_t v70;
  char *v71;
  uint64_t v72;
  uint64_t m;
  unsigned __int16 *v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t n;
  unsigned __int16 *v79;
  uint64_t v80;
  int v81;
  int v82;
  _DWORD *v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  char *v91;
  _QWORD *v92;
  size_t v93;
  char *v94;
  _QWORD *v95;
  size_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned __int16 *v111;
  __int16 *v112;
  unsigned __int16 v113;
  __int16 v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int16 *v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int16 v125;
  _QWORD *v126;
  uint64_t v127;
  const char **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  const char **v150;
  uint64_t v151;
  const char *v152;
  const char **v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int16 *v157;
  uint64_t v158;
  uint64_t *v159;
  const char **v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unsigned __int16 *v174;
  __int16 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v182;
  uint64_t v184;
  unsigned int v188;
  unsigned int v189;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v195;
  __int16 v196;
  char **v197;
  uint64_t v198;
  uint64_t v199[2];

  v188 = a7;
  v17 = a13;
  if (a13)
  {
    for (i = 0; i != a13; ++i)
    {
      v19 = *(unsigned __int16 **)(a12 + 8 * i);
      if (*((_DWORD *)v19 + 8) == 5)
      {
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"skip nbest[%d] as contains split umlaut", a6, a7, a8, i);
      }
      else if (*v19)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *((_QWORD *)v19 + 1);
          if (!*(_WORD *)(v22 + 48 * v21 + 8))
          {
            v23 = v22 + 48 * v21;
            v25 = *(_DWORD *)(v23 + 40);
            v24 = (_DWORD *)(v23 + 40);
            if (!v25)
            {
              *v24 = 1;
              v26 = crf_mde_utils_sysdctlkp((_QWORD *)a1, a2, a3, a4, a5, a6, v188, a8, *(unsigned __int8 **)(v22 + 48 * v21), v22 + 48 * v21);
              if ((v26 & 0x80000000) != 0)
                return v26;
              v27 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21);
              v26 = crf_mde_utils_dctlkp(a1, a2, a3, a4, a9, *v27, (uint64_t)v27, 1);
              if ((v26 & 0x80000000) != 0)
                return v26;
              if (a10)
              {
                v28 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21);
                v26 = crf_mde_utils_dctlkp(a1, a2, a3, a4, a10, *v28, (uint64_t)v28, 2);
                if ((v26 & 0x80000000) != 0)
                  return v26;
              }
              v29 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8);
              if (*(_WORD *)(v29 + 48 * v21 + 8))
              {
                v30 = 0;
                *(_DWORD *)(v29 + 48 * v21 + 32) = 0;
                v31 = 24;
                do
                {
                  v32 = *(char **)(*(_QWORD *)(v29 + 48 * v21 + 16) + v31 - 8);
                  if (v32)
                  {
                    v33 = cstdlib_strstr(v32, "◈");
                    if (v33)
                    {
                      v34 = v33;
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"segment %s has phon with special umlaut character=%s", a6, a7, a8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21));
                      v38 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21;
                      if (*(_DWORD *)(v38 + 36) == 1)
                      {
                        v39 = "umlauted segment; modified to=%s";
                      }
                      else
                      {
                        v191 = *(void **)(*(_QWORD *)(v38 + 16) + v31 - 8);
                        v40 = &v34[cstdlib_strlen("◈")];
                        v41 = cstdlib_strlen("◈");
                        v42 = cstdlib_strlen(&v34[v41]);
                        cstdlib_memcpy(v191, v40, v42);
                        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 16)
                                        + v31
                                        - 8);
                        v44 = cstdlib_strlen("◈");
                        v34 = (char *)(v43 + cstdlib_strlen(&v34[v44]));
                        v39 = "non-umlauted segment; modified to=%s";
                      }
                      *v34 = 0;
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v39, v35, v36, v37, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 16) + v31 - 8));
                    }
                  }
                  v29 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8);
                  v45 = *(char **)(*(_QWORD *)(v29 + 48 * v21 + 16) + v31);
                  if (v45)
                  {
                    v46 = cstdlib_strstr(v45, "force");
                    v29 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8);
                    if (v46)
                    {
                      v47 = v46;
                      v48 = cstdlib_strlen(*(const char **)(*(_QWORD *)(v29 + 48 * v21 + 16) + v31));
                      v49 = cstdlib_strlen("force");
                      v50 = v49;
                      if (v49 + 1 < v48)
                      {
                        if (v47[v49] == 44)
                          v50 = v49 + 1;
                        else
                          v50 = v49;
                      }
                      if (!cstdlib_strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 16)+ v31), "force")|| (cstdlib_memmove(v47, &v47[v50], v48 - v50 + 1), !cstdlib_strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8)+ 48 * v21+ 16)+ v31))))
                      {
                        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 16) + v31));
                        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 16) + v31) = 0;
                      }
                      v29 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8);
                      *(_DWORD *)(v29 + 48 * v21 + 32) = 1;
                    }
                  }
                  ++v30;
                  v31 += 32;
                }
                while (v30 < *(unsigned __int16 *)(v29 + 48 * v21 + 8));
                for (j = 0; j != a13; ++j)
                {
                  v52 = *(unsigned __int16 **)(a12 + 8 * j);
                  if (*v52)
                  {
                    for (k = 0; k < *v52; ++k)
                    {
                      if ((i != j || v21 != k) && *((_DWORD *)v52 + 8) != 5)
                      {
                        v54 = *((_QWORD *)v52 + 1);
                        if (!*(_WORD *)(v54 + 48 * k + 8))
                        {
                          if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21), *(const char **)(v54 + 48 * k)))
                          {
                            v52 = *(unsigned __int16 **)(a12 + 8 * j);
                          }
                          else
                          {
                            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * j) + 8) + 48 * k + 16) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21 + 8));
                            v52 = *(unsigned __int16 **)(a12 + 8 * j);
                            v56 = *((_QWORD *)v52 + 1);
                            if (!*(_QWORD *)(v56 + 48 * k + 16))
                              goto LABEL_218;
                            v57 = *(_QWORD *)(a12 + 8 * i);
                            v58 = *(_QWORD *)(v57 + 8);
                            v59 = v58 + 48 * v21;
                            v60 = *(_WORD *)(v59 + 8);
                            v61 = v56 + 48 * k;
                            *(_WORD *)(v61 + 24) = v60;
                            *(_WORD *)(v61 + 8) = v60;
                            *(_DWORD *)(v61 + 28) = 1;
                            *(_DWORD *)(v61 + 40) = 1;
                            if (*(_WORD *)(v59 + 8))
                            {
                              v62 = 0;
                              v63 = 0;
                              while (1)
                              {
                                v64 = *(_QWORD *)(v58 + 48 * v21 + 16) + v62;
                                *(_DWORD *)(*(_QWORD *)(v56 + 48 * k + 16) + v62) = *(_DWORD *)v64;
                                v65 = *(const char **)(v64 + 8);
                                if (v65)
                                {
                                  v66 = *(_QWORD **)(a1 + 8);
                                  v67 = cstdlib_strlen(v65);
                                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * j) + 8) + 48 * k + 16)
                                            + v62
                                            + 8) = heap_Calloc(v66, 1, v67 + 1);
                                  v68 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * j) + 8) + 48 * k + 16)
                                                 + v62
                                                 + 8);
                                  if (!v68)
                                    break;
                                  cstdlib_strcpy(v68, *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8)+ 48 * v21+ 16)+ v62+ 8));
                                  v57 = *(_QWORD *)(a12 + 8 * i);
                                }
                                v69 = *(_QWORD **)(a1 + 8);
                                v70 = cstdlib_strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 48 * v21 + 16)
                                                                    + v62
                                                                    + 16));
                                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * j) + 8) + 48 * k + 16)
                                          + v62
                                          + 16) = heap_Calloc(v69, 1, v70 + 1);
                                v71 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * j) + 8) + 48 * k + 16)
                                               + v62
                                               + 16);
                                if (!v71)
                                  break;
                                cstdlib_strcpy(v71, *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8)+ 48 * v21+ 16)+ v62+ 16));
                                v57 = *(_QWORD *)(a12 + 8 * i);
                                v58 = *(_QWORD *)(v57 + 8);
                                v72 = v58 + 48 * v21;
                                v52 = *(unsigned __int16 **)(a12 + 8 * j);
                                v56 = *((_QWORD *)v52 + 1);
                                *(_DWORD *)(v56 + 48 * k + 32) = *(_DWORD *)(v72 + 32);
                                ++v63;
                                v62 += 32;
                                if (v63 >= *(unsigned __int16 *)(v72 + 8))
                                  goto LABEL_43;
                              }
LABEL_218:
                              v117 = 2310021130;
                              v167 = *(_QWORD *)(a1 + 32);
LABEL_219:
                              log_OutPublic(v167, (uint64_t)"FE_ONEWORD", 34000, 0, v55, a6, a7, a8, v169);
                              return v117;
                            }
                          }
                        }
                      }
LABEL_43:
                      ;
                    }
                  }
                }
              }
              else
              {
                for (m = 0; m != a13; ++m)
                {
                  v74 = *(unsigned __int16 **)(a12 + 8 * m);
                  if (*v74)
                  {
                    v75 = 0;
                    v76 = 0;
                    do
                    {
                      if (i != m || v20 != v75)
                      {
                        v77 = cstdlib_strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * i) + 8) + 48 * v21), *(const char **)(*((_QWORD *)v74 + 1) + v75));
                        v74 = *(unsigned __int16 **)(a12 + 8 * m);
                        if (!v77)
                          *(_DWORD *)(*((_QWORD *)v74 + 1) + v75 + 40) = 1;
                      }
                      ++v76;
                      v75 += 48;
                    }
                    while (v76 < *v74);
                  }
                }
              }
            }
          }
          ++v21;
          v19 = *(unsigned __int16 **)(a12 + 8 * i);
          v20 += 48;
        }
        while (v21 < *v19);
      }
    }
    for (n = 0; n != a13; ++n)
    {
      v79 = *(unsigned __int16 **)(a12 + 8 * n);
      v80 = *v79;
      if (*v79)
      {
        v81 = 0;
        v82 = 0;
        v83 = (_DWORD *)(*((_QWORD *)v79 + 1) + 32);
        do
        {
          if (!*((_WORD *)v83 - 12))
          {
            *(v83 - 1) = 0;
            v82 = 1;
          }
          v84 = *v83;
          v83 += 12;
          if (v84 == 1)
            v81 = 1;
          --v80;
        }
        while (v80);
        if (v82 == 1)
        {
          *((_DWORD *)v79 + 8) = 2;
          if (v81 == 1)
          {
            v85 = 0;
            *((_DWORD *)v79 + 8) = 1;
            do
            {
              v86 = *((_QWORD *)v79 + 1);
              if (*(_WORD *)(v86 + 48 * v85 + 8))
              {
                v87 = 0;
                v88 = 8;
                do
                {
                  if (**(_DWORD **)(v86 + 48 * v85 + 16) == 2)
                  {
                    v89 = *(_QWORD **)(a1 + 8);
                    v90 = cstdlib_strlen("*");
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) + v88) = heap_Calloc(v89, 1, v90 + 1);
                    v91 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) + v88);
                    if (!v91)
                      goto LABEL_218;
                    cstdlib_strcpy(v91, "*");
                    v79 = *(unsigned __int16 **)(a12 + 8 * n);
                  }
                  ++v87;
                  v86 = *((_QWORD *)v79 + 1);
                  v88 += 32;
                }
                while (v87 < *(unsigned __int16 *)(v86 + 48 * v85 + 8));
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32);
                if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16)
                  || (v92 = *(_QWORD **)(a1 + 8),
                      v93 = cstdlib_strlen("*"),
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) + 8) = heap_Calloc(v92, 1, v93 + 1),
                      (v94 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) + 8)) == 0))
                {
                  v117 = 2310021130;
                  v167 = *(_QWORD *)(a1 + 32);
                  goto LABEL_219;
                }
                cstdlib_strcpy(v94, "*");
                v95 = *(_QWORD **)(a1 + 8);
                v96 = cstdlib_strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85));
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8) + 48 * v85 + 16) + 16) = heap_Calloc(v95, 1, v96 + 1);
                v97 = *(_QWORD *)(*(_QWORD *)(a12 + 8 * n) + 8);
                v98 = *(char **)(*(_QWORD *)(v97 + 48 * v85 + 16) + 16);
                if (!v98)
                  goto LABEL_218;
                cstdlib_strcpy(v98, *(const char **)(v97 + 48 * v85));
                v79 = *(unsigned __int16 **)(a12 + 8 * n);
                v99 = *((_QWORD *)v79 + 1) + 48 * v85;
                **(_DWORD **)(v99 + 16) = 0;
                *(_WORD *)(v99 + 8) = 1;
              }
              ++v85;
            }
            while (v85 < *v79);
          }
        }
      }
      v17 = a13;
    }
  }
  v100 = a1;
  v26 = crf_mde_dump(a1, (uint64_t)"After mlex lookup", a12, v17, a14, a16, a17, a8);
  if ((v26 & 0x80000000) != 0)
    return v26;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"get pattern combinations for valid/partial segmentations:", v101, v102, v103, 0);
  if (!(_DWORD)v17)
    return crf_mde_dump(v100, (uint64_t)"results after mlex/pattern validation", a12, v17, a14, a16, a17, v106);
  v107 = 0;
  while (1)
  {
    v108 = *(_QWORD *)(v100 + 32);
    if (*(_DWORD *)(*(_QWORD *)(a12 + 8 * v107) + 32) <= 1u)
      break;
    log_OutText(v108, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"skip invalid nbest[%d]", v104, v105, v106, v107);
LABEL_183:
    if (++v107 == v17)
      return crf_mde_dump(v100, (uint64_t)"results after mlex/pattern validation", a12, v17, a14, a16, a17, v106);
  }
  log_OutText(v108, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"doing valid nbest[%d]", v104, v105, v106, v107);
  v109 = *(unsigned __int16 **)(a12 + 8 * v107);
  v198 = 0;
  v199[0] = 0;
  v197 = 0;
  v196 = -1;
  v110 = *v109;
  if (*v109)
  {
    v111 = v109;
    v112 = (__int16 *)(*((_QWORD *)v109 + 1) + 8);
    v113 = 1;
    do
    {
      v114 = *v112;
      v112 += 24;
      v113 *= v114;
      --v110;
    }
    while (v110);
  }
  else
  {
    v111 = v109;
    v113 = 1;
  }
  v195 = 0;
  v115 = v113;
  v116 = crf_mde_utils_CRF_MDE_SEGPAT_T_init(v100, v199, v113);
  v189 = v115;
  if ((v116 & 0x80000000) != 0
    || (v116 = crf_mde_utils_CRF_MDE_SEGPAT_T_init(v100, &v198, v115), (v116 & 0x80000000) != 0))
  {
    v117 = v116;
    goto LABEL_180;
  }
  v196 = -1;
  v117 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, "fecfg", "mde_addpos", &v197, &v196, &v195);
  v182 = 1;
  if ((v117 & 0x80000000) != 0)
  {
    v118 = v111;
  }
  else
  {
    v118 = v111;
    if (v196)
    {
      v119 = cstdlib_strchr(*v197, v195);
      if (v119)
        *v119 = 0;
      v182 = cstdlib_strcmp(*v197, "YES") && cstdlib_strcmp(*v197, "yes");
    }
  }
  if (!*v118)
  {
LABEL_180:
    crf_mde_utils_CRF_MDE_SEGPAT_T_free((_QWORD *)v100, v199, v189);
    crf_mde_utils_CRF_MDE_SEGPAT_T_free((_QWORD *)v100, &v198, v189);
    if ((v117 & 0x80000000) != 0)
      return v117;
    v155 = *(_QWORD *)(a12 + 8 * v107);
    if (!*(_WORD *)(v155 + 16))
      *(_DWORD *)(v155 + 32) = 3;
    goto LABEL_183;
  }
  v120 = 0;
  LOWORD(v121) = 0;
  v122 = v198;
  v178 = v199[0] + 64;
  v171 = v199[0];
  v172 = v199[0] + 32;
  v174 = v118;
  do
  {
    v123 = *((_QWORD *)v118 + 1);
    v179 = v123 + 48 * v120;
    if (*(_WORD *)(v179 + 8))
    {
      v124 = 0;
      v125 = 0;
      v126 = (_QWORD *)(v123 + 48 * v120 + 16);
      v175 = v121;
      v177 = (unsigned __int16)v121;
      v173 = v120;
      do
      {
        v192 = v124;
        if ((_WORD)v121)
        {
          v180 = 32 * v124;
          v127 = v177;
          v128 = (const char **)v178;
          while (1)
          {
            v184 = v127;
            v129 = v122;
            v130 = v122 + 80 * v125;
            v131 = v100;
            v132 = crf_mde_utils_dynstr_add(v100, v130 + 32, *(v128 - 4), 2);
            if ((v132 & 0x80000000) != 0)
            {
LABEL_176:
              v117 = v132;
              v100 = v131;
LABEL_179:
              v17 = a13;
              goto LABEL_180;
            }
            v133 = crf_mde_utils_dynstr_add(v100, v130 + 32, a15, 1);
            if ((v133 & 0x80000000) != 0)
              goto LABEL_178;
            if (*(_DWORD *)(*v126 + v180) != 2)
              break;
            v133 = crf_mde_utils_dynstr_add(a1, v130 + 32, *(const char **)v179, 1);
            if ((v133 & 0x80000000) != 0)
            {
LABEL_178:
              v117 = v133;
              v100 = a1;
              goto LABEL_179;
            }
            v131 = a1;
            if (!v182)
            {
              v132 = crf_mde_utils_dynstr_add(a1, v130 + 32, "_", 1);
              if ((v132 & 0x80000000) != 0)
                goto LABEL_176;
              v134 = *(const char **)(*v126 + 32 * v192 + 8);
LABEL_127:
              v132 = crf_mde_utils_dynstr_add(v131, v130 + 32, v134, 1);
              if ((v132 & 0x80000000) != 0)
                goto LABEL_176;
            }
            v135 = v129 + 80 * v125 + 48;
            v132 = crf_mde_utils_dynstr_add(v131, v135, *(v128 - 2), 2);
            if ((v132 & 0x80000000) != 0)
              goto LABEL_176;
            v132 = crf_mde_utils_dynstr_add(v131, v135, a15, 1);
            if ((v132 & 0x80000000) != 0)
              goto LABEL_176;
            v132 = crf_mde_utils_dynstr_add(v131, v135, *(const char **)(*v126 + 32 * v192 + 8), 1);
            if ((v132 & 0x80000000) != 0)
              goto LABEL_176;
            v136 = crf_mde_utils_dynstr_add(v131, v130, *(v128 - 8), 2);
            v100 = v131;
            if ((v136 & 0x80000000) != 0)
              goto LABEL_177;
            v136 = crf_mde_utils_dynstr_add(v131, v130, a15, 1);
            if ((v136 & 0x80000000) != 0)
              goto LABEL_177;
            v136 = crf_mde_utils_dynstr_add(v131, v130, *(const char **)(*v126 + 32 * v192 + 16), 1);
            if ((v136 & 0x80000000) != 0)
              goto LABEL_177;
            v122 = v129;
            v137 = v129 + 80 * v125 + 64;
            v136 = crf_mde_utils_dynstr_add(v100, v137, *v128, 2);
            if ((v136 & 0x80000000) != 0)
              goto LABEL_177;
            v136 = crf_mde_utils_dynstr_add(v100, v137, a15, 1);
            if ((v136 & 0x80000000) != 0)
              goto LABEL_177;
            v138 = *(const char **)(*v126 + 32 * v192 + 24);
            if (!v138)
              v138 = "*";
            v136 = crf_mde_utils_dynstr_add(v100, v137, v138, 1);
            if ((v136 & 0x80000000) != 0)
            {
LABEL_177:
              v117 = v136;
              goto LABEL_179;
            }
            ++v125;
            v128 += 10;
            v127 = v184 - 1;
            if (v184 == 1)
              goto LABEL_154;
          }
          v134 = *(const char **)(*v126 + 32 * v192 + 8);
          v131 = a1;
          goto LABEL_127;
        }
        if (*(_DWORD *)(*v126 + 32 * v124) == 2)
        {
          v139 = crf_mde_utils_dynstr_add(a1, v122 + 80 * v125 + 32, *(const char **)v179, 2);
          if ((v139 & 0x80000000) != 0)
          {
            v117 = v139;
            v100 = a1;
            goto LABEL_215;
          }
          v140 = a1;
          v141 = v192;
          if (!v182)
          {
            v142 = crf_mde_utils_dynstr_add(a1, v122 + 80 * v125 + 32, "_", 1);
            if ((v142 & 0x80000000) != 0
              || (v141 = v192,
                  v142 = crf_mde_utils_dynstr_add(a1, v122 + 80 * v125 + 32, *(const char **)(*v126 + 32 * v192 + 8), 1), (v142 & 0x80000000) != 0))
            {
LABEL_185:
              v117 = v142;
              v100 = v140;
              goto LABEL_186;
            }
          }
        }
        else
        {
          v140 = a1;
          v141 = v124;
          v142 = crf_mde_utils_dynstr_add(a1, v122 + 80 * v125 + 32, *(const char **)(*v126 + 32 * v124 + 8), 2);
          if ((v142 & 0x80000000) != 0)
            goto LABEL_185;
        }
        v143 = crf_mde_utils_dynstr_add(v140, v122 + 80 * v125 + 48, *(const char **)(*v126 + 32 * v141 + 8), 2);
        if ((v143 & 0x80000000) != 0)
        {
          v117 = v143;
          v100 = v140;
LABEL_212:
          v17 = a13;
          goto LABEL_180;
        }
        v144 = crf_mde_utils_dynstr_add(v140, v122 + 80 * v125, *(const char **)(*v126 + 32 * v141 + 16), 2);
        if ((v144 & 0x80000000) != 0)
        {
          v117 = v144;
          v100 = a1;
          goto LABEL_212;
        }
        v145 = *(const char **)(*v126 + 32 * v141 + 24);
        v100 = a1;
        if (!v145)
          v145 = "*";
        v146 = crf_mde_utils_dynstr_add(a1, v122 + 80 * v125 + 64, v145, 2);
        if ((v146 & 0x80000000) != 0)
        {
LABEL_209:
          v117 = v146;
LABEL_215:
          v17 = a13;
          goto LABEL_180;
        }
        ++v125;
LABEL_154:
        v124 = v192 + 1;
        v120 = v173;
        v118 = v174;
        LOWORD(v121) = v175;
      }
      while (v192 + 1 < (unint64_t)*(unsigned __int16 *)(v179 + 8));
      if (v125)
      {
        v121 = 0;
        v147 = 0;
        v170 = v122;
        while (1)
        {
          v176 = v121;
          if ((_WORD)v121)
          {
            v148 = 0;
            v149 = (unsigned __int16)v121;
            v150 = (const char **)v172;
            v151 = (unsigned __int16)v121;
            do
            {
              v152 = *v150;
              v150 += 10;
              if (!cstdlib_strcmp(v152, *(const char **)(v122 + 80 * v147 + 32)))
                v148 = 1;
              --v151;
            }
            while (v151);
            if (v148)
            {
              v100 = a1;
              v121 = v176;
              goto LABEL_170;
            }
          }
          else
          {
            v149 = 0;
          }
          v153 = (const char **)(v122 + 80 * v147);
          v140 = a1;
          v142 = crf_mde_utils_dynstr_add(a1, v171 + 80 * v149 + 32, v153[4], 2);
          if ((v142 & 0x80000000) != 0)
            goto LABEL_185;
          v142 = crf_mde_utils_dynstr_add(a1, v171 + 80 * v149 + 48, *(const char **)(v122 + 80 * v147 + 48), 2);
          if ((v142 & 0x80000000) != 0)
            goto LABEL_185;
          v154 = crf_mde_utils_dynstr_add(a1, v171 + 80 * v149, *v153, 2);
          v100 = a1;
          if ((v154 & 0x80000000) != 0)
          {
            v117 = v154;
LABEL_186:
            v17 = a13;
            goto LABEL_180;
          }
          v122 = v170;
          v146 = crf_mde_utils_dynstr_add(a1, v171 + 80 * v149 + 64, *(const char **)(v170 + 80 * v147 + 64), 2);
          if ((v146 & 0x80000000) != 0)
            goto LABEL_209;
          v121 = (v176 + 1);
LABEL_170:
          ++v147;
          v120 = v173;
          v118 = v174;
          if (v147 == v125)
            goto LABEL_173;
        }
      }
      LOWORD(v121) = 0;
    }
    else
    {
      LOWORD(v121) = 0;
    }
LABEL_173:
    ++v120;
    v17 = a13;
  }
  while (v120 < *v118);
  if (!(_WORD)v121)
  {
    v117 = 0;
    goto LABEL_180;
  }
  v193 = (unsigned __int16)v121;
  v156 = heap_Calloc(*(_QWORD **)(v100 + 8), 1, 80 * (unsigned __int16)v121);
  *((_QWORD *)v118 + 3) = v156;
  if (!v156)
  {
    v117 = 2310021130;
    v167 = *(_QWORD *)(v100 + 32);
    goto LABEL_219;
  }
  v157 = v118;
  v158 = 0;
  v117 = 0;
  v157[8] = 0;
  v159 = (uint64_t *)v172;
  while (1)
  {
    v160 = (const char **)v159;
    if (a11)
    {
      log_OutText(*(_QWORD *)(v100 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"   check pattern %s", a6, a7, a8, *v159);
      v196 = -1;
      v161 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a2 + 96))(a3, a4, "mde_segpatterns", *v160, &v197, &v196, &v195);
      v159 = (uint64_t *)v160;
      v117 = v161;
      if ((v161 & 0x80000000) != 0)
        return v117;
    }
    if (v196)
    {
      v162 = cstdlib_strchr(*v197, v195);
      if (v162)
        *v162 = 0;
      log_OutText(*(_QWORD *)(v100 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     Found Solution %d %s : Valid, PRON=%s POS=%s", v163, v164, v165, v158);
      v166 = crf_mde_utils_dynstr_init(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 16, 0x20u, 16);
      if ((v166 & 0x80000000) != 0)
        goto LABEL_213;
      v166 = crf_mde_utils_dynstr_add(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 16, *v197, 2);
      if ((v166 & 0x80000000) != 0)
        goto LABEL_213;
      v166 = crf_mde_utils_dynstr_init(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 32, 0x20u, 16);
      if ((v166 & 0x80000000) != 0
        || (v166 = crf_mde_utils_dynstr_add(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 32, *v160, 2),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_init(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 48, 0x20u, 16),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_add(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 48, v160[2], 2),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_init(v100, *((_QWORD *)v174 + 3) + 80 * v174[8], 0x20u, 16),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_add(v100, *((_QWORD *)v174 + 3) + 80 * v174[8], *(v160 - 4), 2),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_init(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 64, 0x20u, 16),
            (v166 & 0x80000000) != 0)
        || (v166 = crf_mde_utils_dynstr_add(v100, *((_QWORD *)v174 + 3) + 80 * v174[8] + 64, v160[4], 2),
            (v166 & 0x80000000) != 0))
      {
LABEL_213:
        v117 = v166;
        goto LABEL_180;
      }
      v117 = 0;
      ++v174[8];
    }
    else
    {
      v160 = (const char **)v159;
      log_OutText(*(_QWORD *)(v100 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     pattern [%d] %s : Invalid", a6, a7, a8, v158);
    }
    ++v158;
    v159 = (uint64_t *)(v160 + 10);
    if (v193 == v158)
      goto LABEL_180;
  }
}

uint64_t crf_mde_dump(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char **a6, unsigned __int16 *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int *v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (!a5)
    return 0;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s:", (uint64_t)a6, (uint64_t)a7, a8, a2);
  if (!a4)
    return 0;
  v14 = 0;
  while (1)
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"nbest[%d]", v11, v12, v13, v14);
    cstdlib_strcpy(*a6, "MSD: ");
    v18 = *(unsigned __int16 **)(a3 + 8 * v14);
    v19 = *v18;
    if (*v18)
    {
      v20 = 0;
      v21 = (int *)(*((_QWORD *)v18 + 1) + 28);
      do
      {
        v22 = *v21;
        v21 += 12;
        if (!v22)
          v20 = 1;
        --v19;
      }
      while (v19);
      if (v20 != 1)
        break;
      result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, " !! ");
      if ((result & 0x80000000) != 0)
        return result;
      v18 = *(unsigned __int16 **)(a3 + 8 * v14);
      if (*v18)
        break;
    }
LABEL_18:
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v15, v16, v17, (uint64_t)*a6);
    v27 = *(_DWORD *)(*(_QWORD *)(a3 + 8 * v14) + 32) - 1;
    if (v27 <= 4)
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)off_24D285EB0[v27], v11, v12, v13, 0);
    v28 = *(unsigned __int16 **)(a3 + 8 * v14);
    if (*v28)
    {
      v29 = 0;
      do
      {
        v30 = "   ";
        if (!*(_DWORD *)(*((_QWORD *)v28 + 1) + 48 * v29 + 28))
          v30 = "!! ";
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s %s", v11, v12, v13, (uint64_t)v30);
        v28 = *(unsigned __int16 **)(a3 + 8 * v14);
        v31 = *((_QWORD *)v28 + 1);
        if (*(_WORD *)(v31 + 48 * v29 + 8))
        {
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = (_DWORD *)(*(_QWORD *)(v31 + 48 * v29 + 16) + v32);
            v35 = " ISAffix";
            if (*v34 != 2)
              v35 = "";
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"     %s%s%s%s%s%s%s", v11, v12, v13, (uint64_t)v35);
            v28 = *(unsigned __int16 **)(a3 + 8 * v14);
            ++v33;
            v31 = *((_QWORD *)v28 + 1);
            v32 += 32;
          }
          while (v33 < *(unsigned __int16 *)(v31 + 48 * v29 + 8));
        }
        ++v29;
      }
      while (v29 < *v28);
    }
    if (v28[8])
    {
      v36 = 0;
      v37 = 0;
      do
      {
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"    solution[%d]", v11, v12, v13, v37);
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      segpat:%s", v38, v39, v40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v14) + 24) + v36 + 32));
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      segpatPOS:%s", v41, v42, v43, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v14) + 24) + v36 + 48));
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      wordPOS:%s", v44, v45, v46, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v14) + 24) + v36 + 16));
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      pron:%s", v47, v48, v49, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v14) + 24) + v36));
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"      feat:%s", v50, v51, v52, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8 * v14) + 24) + v36 + 64));
        ++v37;
        v36 += 80;
      }
      while (v37 < *(unsigned __int16 *)(*(_QWORD *)(a3 + 8 * v14) + 16));
    }
    if (++v14 == a4)
      return 0;
  }
  v24 = 0;
  v25 = 0;
  while (1)
  {
    result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, *(char **)(*((_QWORD *)v18 + 1) + v24));
    if ((result & 0x80000000) != 0)
      return result;
    v18 = *(unsigned __int16 **)(a3 + 8 * v14);
    v26 = *v18;
    if ((int)v25 + 1 < v26)
    {
      result = crf_mde_utils_add2Str(a1, (const char **)a6, a7, " | ");
      if ((result & 0x80000000) != 0)
        return result;
      v18 = *(unsigned __int16 **)(a3 + 8 * v14);
      v26 = *v18;
    }
    ++v25;
    v24 += 48;
    if (v25 >= v26)
      goto LABEL_18;
  }
}

char *dynamic_strcat(const char **a1, const char *a2, size_t *a3, uint64_t *a4)
{
  size_t v8;
  size_t v9;
  char *v10;
  size_t v11;
  char *result;

  v8 = cstdlib_strlen(*a1);
  v9 = cstdlib_strlen(a2) + v8;
  v10 = (char *)*a1;
  if (v9 >= *a3)
  {
    v11 = v9 + 128;
    result = (char *)heap_Realloc(a4, (uint64_t)v10, (v9 + 128));
    if (!result)
      return result;
    v10 = result;
    *a1 = result;
    *a3 = v11;
  }
  return cstdlib_strcat(v10, a2);
}

char *dynamic_strncat(const char **a1, const char *a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  size_t v10;
  char *v11;
  size_t v12;
  char *result;

  v10 = cstdlib_strlen(*a1) + a3;
  v11 = (char *)*a1;
  if (v10 >= *a4)
  {
    v12 = v10 + 128;
    result = (char *)heap_Realloc(a5, (uint64_t)v11, (v10 + 128));
    if (!result)
      return result;
    v11 = result;
    *a1 = result;
    *a4 = v12;
  }
  return cstdlib_strncat(v11, a2, a3);
}

uint64_t fe_oneword_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Object;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v55;
  unsigned int v56;
  __int128 v57[2];
  uint64_t (*v58)();
  uint64_t v59;
  __int128 __b;
  __int128 v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v5 = 2310021130;
  v63 = 0;
  v64 = 0;
  v59 = 0;
  if (!a5)
    return 2310021127;
  v62 = 0;
  __b = 0u;
  v61 = 0u;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v68);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v68 + 8), 1, 2288);
  v17 = v68;
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(v68 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v13, v14, v15, v16, v56);
    return v5;
  }
  v18 = (uint64_t)v12;
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a1;
  v12[5] = a2;
  *v12 = v17;
  v12[1] = a1;
  v19 = (_QWORD *)heap_Calloc(*(_QWORD **)(v68 + 8), 1, 1040);
  *(_QWORD *)(v18 + 48) = v19;
  if (!v19)
  {
LABEL_52:
    v38 = v68;
LABEL_53:
    log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v20, v21, v22, v23, v56);
LABEL_64:
    fe_oneword_ObjClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  *v19 = a3;
  v19[1] = a4;
  Object = objc_GetObject(*(_QWORD *)(v68 + 48), (uint64_t)"LINGDB", &v67);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  *(_QWORD *)(v18 + 56) = *(_QWORD *)(v67 + 8);
  Object = objc_GetObject(*(_QWORD *)(v68 + 48), (uint64_t)"FE_DCTLKP", &v66);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  v25 = v66;
  *(_QWORD *)(v18 + 80) = *(_QWORD *)(v66 + 8);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v25 + 16);
  Object = objc_GetObject(*(_QWORD *)(v68 + 48), (uint64_t)"FE_DEPES", &v65);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  v26 = v65;
  *(_QWORD *)(v18 + 104) = *(_QWORD *)(v65 + 8);
  *(_OWORD *)(v18 + 88) = *(_OWORD *)(v26 + 16);
  Object = objc_GetObject(*(_QWORD *)(v68 + 48), (uint64_t)"CLMOBJECT", &v64);
  if ((Object & 0x80000000) != 0
    || (v27 = v64,
        *(_QWORD *)(v18 + 128) = *(_QWORD *)(v64 + 8),
        *(_OWORD *)(v18 + 112) = *(_OWORD *)(v27 + 16),
        Object = objc_GetObject(*(_QWORD *)(v68 + 48), (uint64_t)"PHONMAP", &v63),
        (Object & 0x80000000) != 0))
  {
LABEL_63:
    v5 = Object;
    goto LABEL_64;
  }
  v28 = v63;
  *(_QWORD *)(v18 + 152) = *(_QWORD *)(v63 + 8);
  *(_OWORD *)(v18 + 136) = *(_OWORD *)(v28 + 16);
  inited = checkStatCOMP(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (_DWORD *)(v18 + 2000));
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = checkSkipCrosstoken(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (_DWORD *)(v18 + 936));
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = checkFeOneWordCLM(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (_DWORD *)(v18 + 940));
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = checkParaDCT(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (_DWORD *)(v18 + 1996));
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = oneword_posparser_Open(v18);
  if ((inited & 0x80000000) != 0)
    return inited;
  v29 = *(_QWORD *)(v18 + 2176);
  if (v29)
    heap_Free(*(_QWORD **)(*(_QWORD *)v18 + 8), v29);
  *(_QWORD *)(v18 + 2176) = 0;
  inited = hlp_setKeyword(*(_QWORD *)v18, *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (uint64_t)"feoneword_latinPOStag", (char **)(v18 + 2176));
  if ((inited & 0x80000000) != 0)
    return inited;
  v30 = *(_QWORD *)(v18 + 2184);
  if (v30)
    heap_Free(*(_QWORD **)(*(_QWORD *)v18 + 8), v30);
  *(_QWORD *)(v18 + 2184) = 0;
  inited = hlp_setKeyword(*(_QWORD *)v18, *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (uint64_t)"feoneword_latin2enx", (char **)(v18 + 2184));
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_DWORD *)(v18 + 2168) = 0;
  inited = crf_mde_seg_load(*(_WORD **)(v18 + 16), *(_QWORD *)(v18 + 24), *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), *(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), v18 + 2016, (_DWORD *)(v18 + 2168));
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_DWORD *)(v18 + 2192) = 0;
  if (!*(_DWORD *)(v18 + 2168))
  {
    Object = com_mosynt_UseMosynt(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), (_BOOL4 *)(v18 + 2192));
    if ((Object & 0x80000000) != 0)
      goto LABEL_63;
    if (*(_DWORD *)(v18 + 2192))
    {
      LODWORD(v57[0]) = 1;
      Object = hlp_GetParams((uint64_t *)v18, (_DWORD *)(v18 + 2248), v57);
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = wgram_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), (_QWORD *)(v18 + 2232));
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = kbsymtab_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), (uint64_t *)(v18 + 2200), v57[0]);
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = fst_LoadData(a3, a4, (uint64_t *)(v18 + 2240));
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(_QWORD *)(v18 + 24), *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), v18 + 1228, *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), 0, (_QWORD *)(v18 + 2208));
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(_QWORD *)(v18 + 24), *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), v18 + 1228, *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), 1u, (_QWORD *)(v18 + 2216));
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
      Object = kblex_InitLex(*(_WORD **)(v18 + 16), *(_QWORD *)(v18 + 24), *(_WORD **)(v18 + 32), *(_QWORD *)(v18 + 40), v18 + 1228, *(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), *(_QWORD *)(v18 + 80), 2u, (_QWORD *)(v18 + 2224));
      if ((Object & 0x80000000) != 0)
        goto LABEL_63;
    }
  }
  *(_QWORD *)a5 = v18;
  *(_DWORD *)(a5 + 8) = 62340;
  Object = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(v18 + 80) + 88))(*(_QWORD *)(v18 + 64), *(_QWORD *)(v18 + 72), (char *)&v59 + 4, &v59);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  v31 = (_DWORD)v59 == 1 && HIDWORD(v59) == 1;
  v32 = v31;
  *(_DWORD *)(v18 + 560) = v32;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_WORD *)(v18 + 224) = 0;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 248) = 0u;
  *(_QWORD *)(v18 + 264) = 0;
  *(_BYTE *)(v18 + 556) = 1;
  *(_QWORD *)(v18 + 568) = 0;
  Object = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)v18 + 40), (uint64_t)"langcode", (_QWORD *)(v18 + 1208), 0);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  v33 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 128);
  *(_QWORD *)(v18 + 160) = v33;
  if (!v33)
    goto LABEL_66;
  *(_QWORD *)(v18 + 192) = 128;
  v34 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 128);
  *(_QWORD *)(v18 + 168) = v34;
  if (!v34)
    goto LABEL_66;
  *(_QWORD *)(v18 + 200) = 128;
  v35 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 128);
  *(_QWORD *)(v18 + 176) = v35;
  if (!v35)
    goto LABEL_66;
  *(_QWORD *)(v18 + 208) = 128;
  v36 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 128);
  *(_QWORD *)(v18 + 184) = v36;
  if (!v36)
    goto LABEL_66;
  *(_QWORD *)(v18 + 216) = 128;
  v37 = heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 128);
  *(_QWORD *)(v18 + 232) = v37;
  v38 = *(_QWORD *)v18;
  if (!v37)
    goto LABEL_53;
  v39 = heap_Alloc(*(_QWORD *)(v38 + 8), 128);
  *(_QWORD *)(v18 + 240) = v39;
  v38 = *(_QWORD *)v18;
  if (!v39)
    goto LABEL_53;
  v40 = heap_Alloc(*(_QWORD *)(v38 + 8), 128);
  *(_QWORD *)(v18 + 248) = v40;
  v38 = *(_QWORD *)v18;
  if (!v40)
    goto LABEL_53;
  v41 = heap_Alloc(*(_QWORD *)(v38 + 8), 128);
  *(_QWORD *)(v18 + 256) = v41;
  v38 = *(_QWORD *)v18;
  if (!v41)
    goto LABEL_53;
  v42 = heap_Alloc(*(_QWORD *)(v38 + 8), 128);
  *(_QWORD *)(v18 + 264) = v42;
  if (!v42)
  {
LABEL_66:
    v38 = *(_QWORD *)v18;
    goto LABEL_53;
  }
  cstdlib_strcpy((char *)(v18 + 300), "normal");
  Object = oneword_GetMdeSettings(v18, "normal");
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  Object = hlp_GetPart(v18);
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  cstdlib_memset(&__b, 0, 0x28uLL);
  *(_QWORD *)&__b = ssftmap_ElemCopyString;
  *((_QWORD *)&__b + 1) = ssftmap_ElemFreeString;
  v62 = stringmap_loc_ElemFreeNoOp;
  *(_QWORD *)&v61 = ssftmap_ElemCompareKeysString;
  *((_QWORD *)&v61 + 1) = stringmap_loc_ElemCopyPtr;
  v43 = *(_QWORD **)(*(_QWORD *)v18 + 8);
  v57[0] = __b;
  v57[1] = v61;
  v58 = stringmap_loc_ElemFreeNoOp;
  Object = ssftmap_ObjOpen(v43, 0, v57, (uint64_t *)(v18 + 568));
  if ((Object & 0x80000000) != 0)
    goto LABEL_63;
  *(_QWORD *)(v18 + 856) = heap_Alloc;
  *(_QWORD *)(v18 + 864) = heap_Calloc;
  *(_QWORD *)(v18 + 872) = heap_Realloc;
  *(_QWORD *)(v18 + 880) = heap_Free;
  v44 = OOCAllocator_Con(v18 + 888, (_OWORD *)(v18 + 856), *(_QWORD *)(*(_QWORD *)v18 + 8));
  v45 = LH_ERROR_to_VERROR(v44);
  v50 = *(_QWORD *)v18;
  if ((v45 & 0x80000000) != 0)
  {
    v55 = v45;
    log_OutPublic(*(_QWORD *)(v50 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v46, v47, v48, v49, v56);
    v5 = v55;
    goto LABEL_64;
  }
  v51 = (char *)heap_Alloc(*(_QWORD *)(v50 + 8), 64);
  *(_QWORD *)(v18 + 2256) = v51;
  if (!v51)
    goto LABEL_52;
  cstdlib_strcpy(v51, "");
  v52 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 64);
  *(_QWORD *)(v18 + 2264) = v52;
  if (!v52)
    goto LABEL_52;
  cstdlib_strcpy(v52, "");
  v53 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)v18 + 8), 16);
  *(_QWORD *)(v18 + 2280) = v53;
  if (!v53)
    goto LABEL_52;
  cstdlib_strcpy(v53, "");
  v5 = hlp_common_ObjOpenReopen(v18);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_64;
  return v5;
}

uint64_t checkStatCOMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  char *v7;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a3 + 96))(a1, a2, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
      *a4 = 1;
  }
  return v5;
}

uint64_t checkFeOneWordCLM(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  char *v7;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a3 + 96))(a1, a2, "fecfg", "feoneword_clm", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
      *a4 = 1;
  }
  return v5;
}

uint64_t checkParaDCT(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  char *v7;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a3 + 96))(a1, a2, "fecfg", "feoneword_parallel", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
      *a4 = 1;
  }
  return v5;
}

uint64_t hlp_setKeyword(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  int v8;
  uint64_t result;
  char *v11;
  _QWORD *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE __c[11];

  memset(__c, 0, sizeof(__c));
  *a6 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a4 + 96))(a2, a3, "fecfg", a5, &__c[3], &__c[1], __c);
  result = 0;
  if ((v8 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(_QWORD *)&__c[3] != 0)
  {
    v11 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v11)
      *v11 = 0;
    v12 = *(_QWORD **)(a1 + 8);
    v13 = cstdlib_strlen(**(const char ***)&__c[3]);
    v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
    *a6 = v14;
    if (v14)
    {
      cstdlib_strcpy(v14, **(const char ***)&__c[3]);
      return 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v19);
      return 2310021130;
    }
  }
  return result;
}

uint64_t hlp_GetParams(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t CfgParamVal;
  uint64_t v7;
  char *__s1;

  __s1 = 0;
  CfgParamVal = com_mosynt_GetCfgParamVal(a1[8], a1[9], a1[10], (uint64_t)"mosynt_usesubmorphana", "yes", &__s1);
  if ((CfgParamVal & 0x80000000) != 0)
    return CfgParamVal;
  *a2 = cstdlib_strcmp(__s1, "yes") == 0;
  v7 = com_mosynt_GetCfgParamVal(a1[8], a1[9], a1[10], (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
  if ((v7 & 0x80000000) == 0)
    *a3 = cstdlib_strcmp(__s1, "yes") == 0;
  return v7;
}

uint64_t hlp_GetPart(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = -1;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "nrpart_g2p", &__c[3], &__c[1], __c);
  if ((v2 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    v3 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v3)
      *v3 = 0;
    *(_BYTE *)(a1 + 556) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  return v2;
}

uint64_t stringmap_loc_ElemCopyPtr(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t hlp_common_ObjOpenReopen(uint64_t a1)
{
  uint64_t DTData;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  size_t v17;
  _BOOL4 v19;
  unsigned int v21;
  char *v22;
  const char **v23;
  char *__s1;
  char __s[4];
  char __b[3];
  _BYTE v27[7];

  *(_WORD *)&v27[5] = -1;
  __s1 = 0;
  v22 = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  DTData = hlp_LoadDTData(a1);
  if ((DTData & 0x80000000) != 0)
    return DTData;
  v27[4] = 0;
  v23 = 0;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "esctn", &v23, &v27[5], &v27[4]);
  if ((v3 & 0x80000000) == 0)
  {
    if (!*(_WORD *)&v27[5])
      goto LABEL_7;
    v4 = *(_QWORD *)(a1 + 1216);
    v5 = *(uint64_t **)(*(_QWORD *)a1 + 8);
    v6 = cstdlib_strlen(*v23) + 1;
    if (v4)
    {
      v7 = (char *)heap_Realloc(v5, v4, v6);
      if (v7)
      {
LABEL_6:
        *(_QWORD *)(a1 + 1216) = v7;
        cstdlib_strcpy(v7, *v23);
        v12 = *(_QWORD *)(a1 + 1216);
        *(_BYTE *)(cstdlib_strlen(*v23) + v12 - 1) = 124;
LABEL_7:
        *(_DWORD *)(a1 + 1224) = 1;
        cstdlib_memset(__b, 0, 7uLL);
        cstdlib_strcpy(__b, "g2p");
        if (*(_DWORD *)(a1 + 1224))
        {
          v13 = (char *)(a1 + 1327);
          v14 = -223;
          while (1)
          {
            LH_itoa(v14 + 256, __s, 0xAu);
            v15 = cstdlib_strlen(__s);
            cstdlib_memcpy(v27, __s, v15);
            *(_WORD *)&v27[5] = -1;
            v3 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __b, &v23, &v27[5], &v27[4]);
            if ((v3 & 0x80000000) != 0)
              break;
            if (*(_WORD *)&v27[5])
            {
              cstdlib_strcpy(v13, "");
              v16 = *v23;
              v17 = cstdlib_strlen(*v23);
              cstdlib_strncat(v13, v16, v17 - 1);
            }
            else
            {
              *(_DWORD *)(a1 + 1224) = 0;
            }
            if (!__CFADD__(v14++, 1))
            {
              v13 += 3;
              if (*(_DWORD *)(a1 + 1224))
                continue;
            }
            goto LABEL_15;
          }
        }
        else
        {
LABEL_15:
          *(_DWORD *)(a1 + 2272) = 0;
          if ((hlp_GetCfgParamVal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)"feoneword_enable_POIenhancement", "no", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 2272) = cstdlib_strcmp(__s1, "yes") == 0;
          if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"enablePOIenhancement", &v22) & 0x80000000) == 0)
          {
            if (cstdlib_strcmp(v22, "yes"))
              v19 = cstdlib_strcmp(v22, "YES") == 0;
            else
              v19 = 1;
            *(_DWORD *)(a1 + 2272) = v19;
          }
          *(_DWORD *)(a1 + 2276) = 1;
          if ((hlp_GetCfgParamVal(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)"feoneword_MW_replace_spaces_with_underscores", "yes", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 2276) = cstdlib_strcmp(__s1, "yes") == 0;
        }
        return v3;
      }
    }
    else
    {
      v7 = (char *)heap_Alloc((uint64_t)v5, v6);
      if (v7)
        goto LABEL_6;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v8, v9, v10, v11, v21);
    return 2310021130;
  }
  return v3;
}

uint64_t fe_oneword_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0)
    return 2310021128;
  if (a1)
  {
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if (a1[10])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    if (a1[13])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    if (a1[19])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"PHONMAP");
    if (a1[16])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"CLMOBJECT");
    oneword_posparser_Close((uint64_t)a1, v4, v5, v6, v7, v8, v9, v10);
    v11 = a1[272];
    if (v11)
      heap_Free(*(_QWORD **)(*a1 + 8), v11);
    a1[272] = 0;
    v12 = a1[273];
    if (v12)
      heap_Free(*(_QWORD **)(*a1 + 8), v12);
    a1[273] = 0;
    if (*((_DWORD *)a1 + 542) == 1)
    {
      crf_mde_seg_unload(*a1, a1[1], (uint64_t)(a1 + 252));
      *((_DWORD *)a1 + 542) = 0;
    }
    v13 = a1[20];
    if (v13)
      heap_Free(*(_QWORD **)(*a1 + 8), v13);
    a1[20] = 0;
    a1[24] = 0;
    v14 = a1[21];
    if (v14)
      heap_Free(*(_QWORD **)(*a1 + 8), v14);
    a1[21] = 0;
    a1[25] = 0;
    v15 = a1[22];
    if (v15)
      heap_Free(*(_QWORD **)(*a1 + 8), v15);
    a1[22] = 0;
    a1[26] = 0;
    v16 = a1[23];
    if (v16)
      heap_Free(*(_QWORD **)(*a1 + 8), v16);
    a1[23] = 0;
    a1[27] = 0;
    v17 = a1[29];
    if (v17)
      heap_Free(*(_QWORD **)(*a1 + 8), v17);
    a1[29] = 0;
    v18 = a1[30];
    if (v18)
      heap_Free(*(_QWORD **)(*a1 + 8), v18);
    a1[30] = 0;
    v19 = a1[31];
    if (v19)
      heap_Free(*(_QWORD **)(*a1 + 8), v19);
    a1[31] = 0;
    v20 = a1[32];
    if (v20)
      heap_Free(*(_QWORD **)(*a1 + 8), v20);
    a1[32] = 0;
    v21 = a1[33];
    if (v21)
      heap_Free(*(_QWORD **)(*a1 + 8), v21);
    a1[33] = 0;
    v22 = a1[152];
    if (v22)
      heap_Free(*(_QWORD **)(*a1 + 8), v22);
    a1[152] = 0;
    if (a1[71])
    {
      hlp_UnLoadDTData(a1);
      ssftmap_ObjClose(a1[71]);
    }
    if (a1[275])
      kbsymtab_UnloadData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1 + 275);
    if (a1[279])
      wgram_UnloadData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1 + 279);
    if (a1[280])
      fst_UnloadData((_WORD *)a1[2], a1[3], a1 + 280);
    v23 = a1[276];
    if (v23)
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v23);
    v24 = a1[277];
    if (v24)
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v24);
    v25 = a1[278];
    if (v25)
      kblex_FinishLex((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], v25);
    v26 = a1[6];
    if (v26)
      heap_Free(*(_QWORD **)(*a1 + 8), v26);
    v27 = a1[282];
    if (v27)
      heap_Free(*(_QWORD **)(*a1 + 8), v27);
    v28 = a1[283];
    if (v28)
      heap_Free(*(_QWORD **)(*a1 + 8), v28);
    v29 = a1[285];
    if (v29)
    {
      heap_Free(*(_QWORD **)(*a1 + 8), v29);
      a1[285] = 0;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_UnLoadDTData(uint64_t *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD v20[101];

  v20[100] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  bzero(v20, 0x320uLL);
  if ((ssftmap_IteratorOpen(a1[71], 0, 1, (uint64_t)&v19) & 0x80000000) != 0)
    return ssftmap_Clear(a1[71]);
  v17 = 0;
  v18 = 0;
  v2 = 0;
  while ((ssftmap_IteratorNext(v19, &v18, &v17) & 0x80000000) == 0)
  {
    if (v2)
    {
      v3 = 0;
      v4 = v2;
      do
        v5 = v20[v3++];
      while (v3 < v2 && v5 != v17);
      if (v5 == v17)
        continue;
    }
    else
    {
      v4 = 0;
    }
    ++v2;
    v20[v4] = v17;
  }
  ssftmap_IteratorClose((uint64_t)v19);
  result = ssftmap_Clear(a1[71]);
  if (v2)
  {
    v7 = v2;
    v8 = v20;
    do
    {
      v9 = *v8++;
      OOC_PlacementDeleteObject((uint64_t)(a1 + 111), *(_QWORD *)(v9 + 16));
      ssftriff_reader_ReleaseChunkData(*(_QWORD **)v9, v10, v11, v12, v13, v14, v15, v16);
      result = (uint64_t)heap_Free(*(_QWORD **)(*a1 + 8), v9);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t fe_oneword_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  v26 = 0;
  v25 = 0;
  result = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0)
    return 2310021128;
  if (!a1)
    return result;
  result = (*(uint64_t (**)(_QWORD, _QWORD, int *, int *))(*(_QWORD *)(a1 + 80) + 88))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v26, &v25);
  if ((result & 0x80000000) != 0)
    return result;
  v4 = v25 == 1 && v26 == 1;
  v5 = v4;
  *(_DWORD *)(a1 + 560) = v5;
  *(_BYTE *)(a1 + 556) = 1;
  result = checkStatCOMP(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 2000));
  if ((result & 0x80000000) != 0)
    return result;
  result = checkSkipCrosstoken(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 936));
  if ((result & 0x80000000) != 0)
    return result;
  result = checkFeOneWordCLM(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 940));
  if ((result & 0x80000000) != 0)
    return result;
  result = checkParaDCT(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (_DWORD *)(a1 + 1996));
  if ((result & 0x80000000) != 0)
    return result;
  result = oneword_posparser_Reopen(a1, v6, v7, v8, v9, v10, v11, v12);
  if ((result & 0x80000000) != 0)
    return result;
  v13 = *(_QWORD *)(a1 + 2176);
  if (v13)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v13);
  *(_QWORD *)(a1 + 2176) = 0;
  result = hlp_setKeyword(*(_QWORD *)a1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)"feoneword_latinPOStag", (char **)(a1 + 2176));
  if ((result & 0x80000000) != 0)
    return result;
  v14 = *(_QWORD *)(a1 + 2184);
  if (v14)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
  *(_QWORD *)(a1 + 2184) = 0;
  result = hlp_setKeyword(*(_QWORD *)a1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)"feoneword_latin2enx", (char **)(a1 + 2184));
  if ((result & 0x80000000) != 0)
    return result;
  if (*(_DWORD *)(a1 + 2168) == 1)
    crf_mde_seg_unload(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a1 + 2016);
  *(_DWORD *)(a1 + 2168) = 0;
  result = crf_mde_seg_load(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), a1 + 2016, (_DWORD *)(a1 + 2168));
  if ((result & 0x80000000) != 0)
    return result;
  v15 = (int *)(a1 + 2192);
  v16 = *(_DWORD *)(a1 + 2192);
  result = com_mosynt_UseMosynt(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (_BOOL4 *)(a1 + 2192));
  if ((result & 0x80000000) != 0)
    return result;
  v17 = *v15;
  if (v16 != 1)
  {
    if (v17 == 1)
    {
      v24 = 1;
      goto LABEL_57;
    }
    goto LABEL_64;
  }
  if (v17 != 1)
  {
    if (v17)
      goto LABEL_64;
    if (*(_QWORD *)(a1 + 2200))
    {
      result = kbsymtab_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2200));
      *(_QWORD *)(a1 + 2200) = 0;
      if ((result & 0x80000000) != 0)
        return result;
    }
    if (*(_QWORD *)(a1 + 2232))
    {
      result = wgram_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2232));
      *(_QWORD *)(a1 + 2232) = 0;
      if ((result & 0x80000000) != 0)
        return result;
    }
    if (*(_QWORD *)(a1 + 2240))
    {
      result = fst_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t *)(a1 + 2240));
      *(_QWORD *)(a1 + 2240) = 0;
      if ((result & 0x80000000) != 0)
        return result;
    }
    v18 = *(_QWORD *)(a1 + 2208);
    if (v18)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v18);
      *(_QWORD *)(a1 + 2208) = 0;
    }
    v19 = *(_QWORD *)(a1 + 2216);
    if (v19)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v19);
      *(_QWORD *)(a1 + 2216) = 0;
    }
    v20 = *(_QWORD *)(a1 + 2224);
    if (v20)
    {
      kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v20);
      *(_QWORD *)(a1 + 2224) = 0;
    }
    if (*v15 != 1)
    {
LABEL_64:
      cstdlib_strcpy((char *)(a1 + 300), "normal");
      result = oneword_GetMdeSettings(a1, "normal");
      if ((result & 0x80000000) == 0)
      {
        result = hlp_GetPart(a1);
        if ((result & 0x80000000) == 0)
        {
          hlp_UnLoadDTData((uint64_t *)a1);
          return hlp_common_ObjOpenReopen(a1);
        }
      }
      return result;
    }
  }
  v24 = 1;
  if (!*(_QWORD *)(a1 + 2200)
    || (result = kbsymtab_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2200)), *(_QWORD *)(a1 + 2200) = 0, (result & 0x80000000) == 0))
  {
    if (!*(_QWORD *)(a1 + 2232)
      || (result = wgram_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2232)), *(_QWORD *)(a1 + 2232) = 0, (result & 0x80000000) == 0))
    {
      if (!*(_QWORD *)(a1 + 2240)
        || (result = fst_UnloadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t *)(a1 + 2240)),
            *(_QWORD *)(a1 + 2240) = 0,
            (result & 0x80000000) == 0))
      {
        v21 = *(_QWORD *)(a1 + 2208);
        if (v21)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v21);
          *(_QWORD *)(a1 + 2208) = 0;
        }
        v22 = *(_QWORD *)(a1 + 2216);
        if (v22)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v22);
          *(_QWORD *)(a1 + 2216) = 0;
        }
        v23 = *(_QWORD *)(a1 + 2224);
        if (v23)
        {
          kblex_FinishLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), v23);
          *(_QWORD *)(a1 + 2224) = 0;
        }
LABEL_57:
        result = hlp_GetParams((uint64_t *)a1, (_DWORD *)(a1 + 2248), &v24);
        if ((result & 0x80000000) != 0)
          return result;
        result = wgram_LoadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (_QWORD *)(a1 + 2232));
        if ((result & 0x80000000) != 0)
          return result;
        result = kbsymtab_LoadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2200), v24);
        if ((result & 0x80000000) != 0)
          return result;
        result = fst_LoadData(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t *)(a1 + 2240));
        if ((result & 0x80000000) != 0)
          return result;
        result = kblex_InitLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a1 + 1228, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0, (_QWORD *)(a1 + 2208));
        if ((result & 0x80000000) != 0)
          return result;
        result = kblex_InitLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a1 + 1228, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 1u, (_QWORD *)(a1 + 2216));
        if ((result & 0x80000000) != 0)
          return result;
        result = kblex_InitLex(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD **)(a1 + 32), *(_QWORD *)(a1 + 40), a1 + 1228, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 2u, (_QWORD *)(a1 + 2224));
        if ((result & 0x80000000) != 0)
          return result;
        goto LABEL_64;
      }
    }
  }
  return result;
}

uint64_t fe_oneword_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((result & 0x80000000) != 0)
    return 2310021128;
  if (*(_DWORD *)(a1 + 2004))
    return oneword_posparser_Start(a1);
  return result;
}

uint64_t fe_oneword_MosyntGetMosyntParamVal(_QWORD *a1, uint64_t a2, char *__src, char *__dst, int a5)
{
  uint64_t TermSubstr;
  int v12;
  int v13;
  unsigned __int8 v14[11];

  *(_QWORD *)&v14[3] = 0;
  *(_WORD *)&v14[1] = -1;
  v14[0] = 0;
  v12 = 0;
  cstdlib_strcpy(__dst, __src);
  TermSubstr = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "fecfg", a2, &v14[3], &v14[1], v14);
  if ((TermSubstr & 0x80000000) == 0)
  {
    if (*(_WORD *)&v14[1])
    {
      v13 = 0;
      TermSubstr = mosynt_GetTermSubstr(**(_QWORD **)&v14[3], &v13, v14[0], &v12, __dst, a5);
      if ((TermSubstr & 0x80000000) == 0 && !v12)
        cstdlib_strcpy(__dst, __src);
    }
  }
  return TermSubstr;
}

const char *hlp_FindWordSep(const char *a1, int a2, unsigned int a3)
{
  unint64_t v4;
  size_t v6;
  const char *result;
  int v8;
  size_t v9;

  LODWORD(v4) = a2;
  v6 = cstdlib_strlen(a1);
  result = 0;
  if (v6 > v4 && v4 < a3)
  {
    v4 = v4;
    while (1)
    {
      v8 = a1[v4];
      if (v8 == 95 || v8 == 32)
        break;
      ++v4;
      v9 = cstdlib_strlen(a1);
      result = 0;
      if (v4 >= v9 || v4 >= a3)
        return result;
    }
    return &a1[v4];
  }
  return result;
}

uint64_t hlp_ShouldAddAsVariant(const char *a1, char *a2, char *__s2)
{
  uint64_t result;
  char *v6;
  char *v7;
  char *v8;

  result = cstdlib_strcmp(a1, __s2);
  if ((_DWORD)result)
  {
    v6 = cstdlib_strstr(a2, __s2);
    if (v6)
    {
      v7 = v6;
      v8 = a2;
      while (v7 != a2 && *(v7 - 1) == 18 || v8[cstdlib_strlen(__s2)] && v8[cstdlib_strlen(__s2)] != 18)
      {
        v8 = &v7[cstdlib_strlen(__s2)];
        v7 = cstdlib_strstr(v8, __s2);
        if (!v7)
          return 1;
      }
      cstdlib_strlen(__s2);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t fe_oneword_SplitMW(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t WordDctBeforOrAfter;
  char *PhonWordSep;
  char *v15;
  const char *WordSep;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  size_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  size_t v30;
  int v31;
  char *v32;
  _BOOL4 v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  char v40;
  _BOOL4 v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  const char *v52;
  unsigned __int16 v53;
  int *v54;
  int *v55;
  const char *v56;
  const char *v57;
  char v59;
  char *v60;
  const char *v61;
  _BOOL4 v62;
  int v63;
  const char *v64;
  char *v65;
  char *__s2;
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  int v71[2];
  char *__s;
  __int16 v73;
  int v74;
  char *v75;
  char *v76;
  const char *v77;
  unsigned __int8 v78;
  __int16 v79;
  int v80;
  int v81;
  const char *v82;
  char *v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  unsigned __int16 v88;
  int v89;
  char v90[9];

  v89 = 0;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  v84 = 0;
  v85 = 0;
  v82 = 0;
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v73 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v89 + 2);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, char *))(a1[7] + 176))(a2, a3, HIWORD(v89), 0, &v82, (char *)&v86 + 2);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v89), &v89);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v89;
    if ((_WORD)v89)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v8, 0, 1, (char *)&v87 + 4, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
        {
LABEL_118:
          v7 = WordDctBeforOrAfter;
          if (!v11)
            goto LABEL_123;
          goto LABEL_122;
        }
        if (HIDWORD(v87) != 4)
          goto LABEL_113;
        if (v11)
          *(_BYTE *)v11 = 0;
        if (v10)
          *(_BYTE *)v10 = 0;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 3, &v85, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        PhonWordSep = oneword_FindPhonWordSep(v85, (char *)&v78);
        if (!PhonWordSep)
          goto LABEL_113;
        v15 = PhonWordSep;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v89, 1, 1, (char *)&v81 + 2, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v89, 2, 1, (char *)&v80 + 2, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        WordSep = hlp_FindWordSep(v82, HIWORD(v81), HIWORD(v80));
        if (!WordSep)
          goto LABEL_113;
        __s = 0;
        LOWORD(v80) = HIWORD(v80);
        HIWORD(v80) = (_WORD)WordSep - (_WORD)v82;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[7] + 160))(a2, a3, (unsigned __int16)v89, 2, 1, (char *)&v80 + 2, &v86);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        v79 = HIWORD(v80) + 1;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v89, 11, &v73) & 0x80000000) == 0&& v73 == 1&& ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 11, &__s, (char *)&v86 + 2) & 0x80000000) == 0)
        {
          break;
        }
LABEL_66:
        v42 = v15;
        *v15 = 0;
        v43 = v78;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 5, &v83, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        v67 = v9;
        v44 = cstdlib_strstr(v83, "\\");
        if (v44)
        {
          *v44 = 0;
          v45 = v44 + 1;
        }
        else
        {
          v45 = v83;
        }
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 6, &v84, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 9, &v76, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 4, &v75, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        WordDctBeforOrAfter = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v89, 7, 1, (char *)&v74 + 2, (char *)&v86 + 2);
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        *(_QWORD *)v71 = v11;
        v46 = (*(int (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v89, 17, &v73) >= 0&& v73 == 1;
        v47 = v46;
        if (v46)
        {
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v89, 17, 1, &v74, (char *)&v86 + 2);
          if ((v48 & 0x80000000) != 0)
          {
            v7 = v48;
            v11 = *(_QWORD *)v71;
            if (!*(_QWORD *)v71)
            {
LABEL_123:
              if (v10)
                heap_Free(*(_QWORD **)(*a1 + 8), v10);
              return v7;
            }
LABEL_122:
            heap_Free(*(_QWORD **)(*a1 + 8), v11);
            goto LABEL_123;
          }
        }
        v69 = (char *)v10;
        v77 = 0;
        v49 = (*(int (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v89, 12, &v73) >= 0&& v73 == 1;
        v50 = v49;
        if (v49)
        {
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v89, 12, &v77, (char *)&v86 + 2);
          if ((v51 & 0x80000000) != 0)
            goto LABEL_120;
        }
        v52 = &v42[v43];
        v53 = v89;
        v88 = v89;
        if ((_WORD)v89)
        {
          if (v47)
            v54 = &v74;
          else
            v54 = 0;
          while (1)
          {
            v12 = v53;
            v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v53, 1, 1, &v81, (char *)&v86 + 2);
            if ((v51 & 0x80000000) != 0)
              break;
            v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(a1[7] + 168))(a2, a3, v88, 0, 1, &v87, (char *)&v86 + 2);
            if ((v51 & 0x80000000) != 0)
              break;
            if (HIWORD(v80) + 1 < (unsigned __int16)v81
              || (unsigned __int16)v81 >= HIWORD(v80) && (_DWORD)v87 == 16)
            {
              v57 = v77;
              if (!v50)
                v57 = 0;
              v10 = (uint64_t)v69;
              WordDctBeforOrAfter = hlp_CreateWordDctBeforOrAfter((uint64_t)a1, a2, a3, 1, v88, (uint64_t)&v79, (uint64_t)&v80, v52, v69, v45, v84, v76, v75, (uint64_t)&v74 + 2, (uint64_t)v54, v57);
              goto LABEL_111;
            }
            v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 120))(a2, a3, v88, &v88);
            if ((v51 & 0x80000000) != 0)
              break;
            v53 = v88;
            if (!v88)
              goto LABEL_103;
          }
LABEL_120:
          v7 = v51;
          v10 = (uint64_t)v69;
          v11 = *(_QWORD *)v71;
LABEL_121:
          if (!v11)
            goto LABEL_123;
          goto LABEL_122;
        }
LABEL_103:
        v55 = &v74;
        if (!v47)
          v55 = 0;
        v56 = v77;
        if (!v50)
          v56 = 0;
        v10 = (uint64_t)v69;
        WordDctBeforOrAfter = hlp_CreateWordDctBeforOrAfter((uint64_t)a1, a2, a3, 0, v12, (uint64_t)&v79, (uint64_t)&v80, v52, v69, v45, v84, v76, v75, (uint64_t)&v74 + 2, (uint64_t)v55, v56);
LABEL_111:
        v11 = *(_QWORD *)v71;
        if ((WordDctBeforOrAfter & 0x80000000) != 0)
          goto LABEL_118;
        v9 = v67;
LABEL_113:
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v89, &v89);
        if ((v7 & 0x80000000) == 0)
        {
          v8 = v89;
          if ((_WORD)v89)
            continue;
        }
        goto LABEL_121;
      }
      if (v11 | v10)
      {
        if (cstdlib_strlen(__s) + 1 <= v9)
          goto LABEL_26;
        v22 = v15;
        v23 = *(uint64_t **)(*a1 + 8);
        v24 = cstdlib_strlen(__s);
        v11 = heap_Realloc(v23, v11, v24 + 1);
        v25 = *(uint64_t **)(*a1 + 8);
        v26 = cstdlib_strlen(__s) + 1;
        v27 = v25;
        v15 = v22;
        v21 = heap_Realloc(v27, v10, v26);
      }
      else
      {
        v17 = *(_QWORD *)(*a1 + 8);
        v18 = cstdlib_strlen(__s);
        v11 = heap_Alloc(v17, v18 + 1);
        v19 = *(_QWORD *)(*a1 + 8);
        v20 = cstdlib_strlen(__s);
        v21 = heap_Alloc(v19, v20 + 1);
      }
      v10 = v21;
      v9 = cstdlib_strlen(__s) + 1;
LABEL_26:
      v7 = 2310021130;
      if (!v11 || !v10)
        goto LABEL_121;
      v65 = v15;
      v28 = v85;
      if (v85 && (v29 = __s) != 0 && cstdlib_strlen(__s) + 1 <= v9)
      {
        v90[0] = 0;
        *(_BYTE *)v11 = 0;
        *(_BYTE *)v10 = 0;
        v30 = cstdlib_strlen(v28);
        v31 = oneword_CountPhoneticWords(v28, &v28[v30]);
        v32 = oneword_FindPhonWordSep(v28, v90);
        v70 = (char *)v11;
        v64 = v28;
        if (v32)
        {
          v61 = &v32[v90[0]];
        }
        else
        {
          v61 = 0;
          v32 = &v28[cstdlib_strlen(v28)];
        }
        v59 = *v32;
        v60 = v32;
        *v32 = 0;
        if (cstdlib_strlen(v29))
        {
          v34 = v31 == 2 && v61 != 0;
          v62 = v34;
          v63 = v31;
          v68 = (char *)v10;
          do
          {
            v35 = cstdlib_strstr(v29, "\x12");
            if (!v35)
              v35 = &v29[cstdlib_strlen(v29)];
            v36 = oneword_CountPhoneticWords(v29, v35);
            v37 = *v35;
            if (v31 == v36)
            {
              *v35 = 0;
              v38 = oneword_FindPhonWordSep(v29, v90);
              if (v38)
              {
                v39 = v38;
                __s2 = &v38[v90[0]];
              }
              else
              {
                v90[0] = 0;
                __s2 = 0;
                v39 = &v29[cstdlib_strlen(v29)];
              }
              v40 = *v39;
              *v39 = 0;
              if (hlp_ShouldAddAsVariant(v64, v70, v29))
              {
                if (cstdlib_strlen(v70))
                  cstdlib_strcat(v70, "\x12");
                cstdlib_strcat(v70, v29);
              }
              *v39 = v40;
              v10 = (uint64_t)v68;
              if (cstdlib_strlen(&v39[v90[0]]))
              {
                v41 = v62;
                if (!__s2)
                  v41 = 0;
                if (!v41 || hlp_ShouldAddAsVariant(v61, v68, __s2))
                {
                  if (cstdlib_strlen(v68))
                    cstdlib_strcat(v68, "\x12");
                  cstdlib_strcat(v68, &v39[v90[0]]);
                }
              }
              *v35 = v37;
              v31 = v63;
            }
            if (!v37)
              break;
            v29 = v35 + 1;
          }
          while (cstdlib_strlen(v35 + 1));
        }
        *v60 = v59;
        v11 = (uint64_t)v70;
      }
      else
      {
        *(_BYTE *)v11 = 0;
        *(_BYTE *)v10 = 0;
      }
      v15 = v65;
      cstdlib_strcpy(__s, (const char *)v11);
      goto LABEL_66;
    }
  }
  return v7;
}

uint64_t hlp_CreateWordDctBeforOrAfter(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, char *__s, char *a10, char *a11, char *a12, char *a13, uint64_t a14, uint64_t a15, const char *a16)
{
  uint64_t v22;
  uint64_t result;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *);
  uint64_t v25;
  __int16 v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v28;
  __int16 v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v31;
  __int16 v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v37;
  __int16 v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v40;
  __int16 v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *);
  uint64_t v43;
  __int16 v44;
  int v45;
  int v46;

  v45 = 0;
  v22 = 88;
  if (!a4)
    v22 = 80;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 56) + v22))(a2, a3, a5, &v45);
  if ((result & 0x80000000) == 0)
  {
    v46 = 4;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56)
                                                                                                 + 160))(a2, a3, (unsigned __int16)v45, 0, 1, &v46, (char *)&v45 + 2);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v45, 1, 1, a6, (char *)&v45 + 2);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v45, 2, 1, a7, (char *)&v45 + 2);
        if ((result & 0x80000000) == 0)
        {
          v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *))(*(_QWORD *)(a1 + 56) + 160);
          v25 = (unsigned __int16)v45;
          v26 = cstdlib_strlen(a8);
          result = v24(a2, a3, v25, 3, (unsigned __int16)(v26 + 1), a8, (char *)&v45 + 2);
          if ((result & 0x80000000) == 0)
          {
            if (!__s
              || !cstdlib_strlen(__s)
              || (v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160),
                  v28 = (unsigned __int16)v45,
                  v29 = cstdlib_strlen(__s),
                  result = v27(a2, a3, v28, 11, (unsigned __int16)(v29 + 1), __s, (char *)&v45 + 2),
                  (result & 0x80000000) == 0))
            {
              v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
              v31 = (unsigned __int16)v45;
              v32 = cstdlib_strlen(a10);
              result = v30(a2, a3, v31, 5, (unsigned __int16)(v32 + 1), a10, (char *)&v45 + 2);
              if ((result & 0x80000000) == 0)
              {
                v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                v34 = (unsigned __int16)v45;
                v35 = cstdlib_strlen(a11);
                result = v33(a2, a3, v34, 6, (unsigned __int16)(v35 + 1), a11, (char *)&v45 + 2);
                if ((result & 0x80000000) == 0)
                {
                  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                  v37 = (unsigned __int16)v45;
                  v38 = cstdlib_strlen(a12);
                  result = v36(a2, a3, v37, 9, (unsigned __int16)(v38 + 1), a12, (char *)&v45 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                    v40 = (unsigned __int16)v45;
                    v41 = cstdlib_strlen(a13);
                    result = v39(a2, a3, v40, 4, (unsigned __int16)(v41 + 1), a13, (char *)&v45 + 2);
                    if ((result & 0x80000000) == 0)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v45, 7, 1, a14, (char *)&v45 + 2);
                      if ((result & 0x80000000) == 0)
                      {
                        if (!a15)
                        {
                          if (!a16)
                            return result;
                          goto LABEL_19;
                        }
                        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v45, 17, 1, a15, (char *)&v45 + 2);
                        if (a16 && (result & 0x80000000) == 0)
                        {
LABEL_19:
                          v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                          v43 = (unsigned __int16)v45;
                          v44 = cstdlib_strlen(a16);
                          return v42(a2, a3, v43, 12, (unsigned __int16)(v44 + 1), a16, (char *)&v45 + 2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_oneword_MosyntCleanup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  unsigned __int16 v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v15;
  __int16 v16;
  _BOOL4 v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v19;
  __int16 v20;
  char *v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v24;
  __int16 v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  char *__src;
  char *v37;
  char *v38;
  char *v39;
  char *__s;
  int v41;
  int v42;
  int v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  char __s1[10];
  char v47[200];
  char v48[200];
  char __dst[20];
  char v50[5000];
  char v51[5000];
  char v52[5000];
  char v53[5000];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v45 = 0;
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v39 = 0;
  __s = 0;
  v37 = 0;
  v38 = 0;
  __src = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__src);
  if ((result & 0x80000000) == 0)
  {
    result = fe_oneword_MosyntGetMosyntParamVal((_QWORD *)a1, (uint64_t)"mosynt_defaultpos_stressed", "XN()", v48, 200);
    if ((result & 0x80000000) == 0)
    {
      result = fe_oneword_MosyntGetMosyntParamVal((_QWORD *)a1, (uint64_t)"mosynt_defaultpos_unstressed", "XX()", v47, 200);
      if ((result & 0x80000000) == 0)
      {
        result = fe_oneword_MosyntGetMosyntParamVal((_QWORD *)a1, (uint64_t)"mosynt_usepkupos", "no", __s1, 10);
        if ((result & 0x80000000) == 0)
        {
          v7 = cstdlib_strcmp(__s1, "yes");
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 104))(a2, a3, 1, 0, &v45);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v45, 0, &v33, (char *)&v42 + 2);
            if ((result & 0x80000000) == 0)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 104))(a2, a3, 2, v45, &v44);
              if ((result & 0x80000000) == 0)
              {
                v8 = v44;
                if (v44)
                {
                  v30 = 0;
                  v31 = 0;
                  v9 = "¡";
                  while (1)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v8, 0, 1, &v43, (char *)&v42 + 2);
                    if ((result & 0x80000000) != 0)
                      break;
                    v10 = v43;
                    if (v43 == 8)
                    {
                      v43 = 9;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v44, 0, 1, &v43, &v42);
                      if ((result & 0x80000000) != 0)
                        return result;
                      v10 = v43;
                    }
                    v11 = v10 > 0xA;
                    v12 = (1 << v10) & 0x610;
                    if (v11 || v12 == 0)
                    {
                      v17 = 0;
                    }
                    else
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v44, 3, &__s, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = mosynt_SubstAllSubstrOcc(__s, v9, "~", v53, 5000);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = mosynt_SubstAllSubstrOcc(v53, "[SVOX]", "", __s, 5000);
                      if ((result & 0x80000000) != 0)
                        return result;
                      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                      v15 = v44;
                      v16 = cstdlib_strlen(__s);
                      result = v14(a2, a3, v15, 3, (unsigned __int16)(v16 + 1), __s, &v42);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v44, 1, 1, (char *)&v35 + 2, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v44, 2, 1, &v35, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v44, 5, &v38, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v44, 6, &v39, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      if (v43 == 9)
                      {
                        if (cstdlib_strcmp(v39, "Y"))
                        {
                          if (v43 == 9
                            && cstdlib_strcmp(v39, "X")
                            && (HIWORD(v35) < v31 || (unsigned __int16)v35 < v30))
                          {
                            HIWORD(v35) = v31;
                            LOWORD(v35) = v30;
                          }
                        }
                        else
                        {
                          v30 = v35;
                          v31 = HIWORD(v35);
                        }
                      }
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v44, 9, &v37, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      if (!cstdlib_strcmp(v37, "normal"))
                      {
                        cstdlib_strcpy(__dst, __src);
                        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                        v19 = v44;
                        v20 = cstdlib_strlen(__dst);
                        result = v18(a2, a3, v19, 9, (unsigned __int16)(v20 + 1), __dst, &v42);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v44, 1, 1, (char *)&v35 + 2, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v44, 2, 1, &v35, (char *)&v42 + 2);
                      if ((result & 0x80000000) != 0)
                        return result;
                      v41 = 0;
                      result = mosynt_GetTermSubstr((uint64_t)v39, &v41, 0x21u, &v32, v50, 5000);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = mosynt_GetTermSubstr((uint64_t)v39, &v41, 0x21u, &v32, v52, 5000);
                      if ((result & 0x80000000) != 0)
                        return result;
                      v17 = cstdlib_strcmp(v39, "Y") == 0;
                      v34 = 0;
                      if (!cstdlib_strcmp(v52, ""))
                      {
                        v34 = 1;
                        if (cstdlib_strcmp(v38, "*"))
                          com_mosynt_GetBacktrans2POS(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v38, 0x1388u, v52);
                        if (!cstdlib_strcmp(v52, ""))
                        {
                          if (cstdlib_strstr(__s, "'") || cstdlib_strstr(__s, "'2"))
                            v21 = v48;
                          else
                            v21 = v47;
                          cstdlib_strcpy(v52, v21);
                        }
                      }
                      if (!cstdlib_strcmp(v50, ""))
                        cstdlib_strcpy(v50, "*");
                      if (v52[0] - 48 > 9)
                      {
                        cstdlib_strcpy(v51, v52);
                      }
                      else
                      {
                        result = mosynt_NumPOSListToPOSList(*(_QWORD *)(a1 + 48), *(uint64_t **)(a1 + 2200), v52, (uint64_t)v51, 5000);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      v22 = v9;
                      if (v7)
                      {
                        v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                        v24 = v44;
                        v25 = cstdlib_strlen(v51);
                        result = v23(a2, a3, v24, 5, (unsigned __int16)(v25 + 1), v51, &v42);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                      v27 = v44;
                      v28 = cstdlib_strlen(v50);
                      result = v26(a2, a3, v27, 6, (unsigned __int16)(v28 + 1), v50, &v42);
                      if ((result & 0x80000000) != 0)
                        return result;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v44, 17, 1, &v34, (char *)&v42 + 2);
                      v9 = v22;
                      if ((result & 0x80000000) != 0)
                        return result;
                    }
                    v29 = v44;
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a2, a3, v44, &v44);
                    if ((result & 0x80000000) == 0)
                    {
                      if (!v17
                        || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 192))(a2, a3, v29), (result & 0x80000000) == 0))
                      {
                        v8 = v44;
                        if (v44)
                          continue;
                      }
                    }
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_oneword_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int Str;
  _BOOL4 v15;
  int v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t DTData;
  _BOOL4 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 *v46;
  uint64_t v47;
  int *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v65;
  __int16 v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v68;
  __int16 v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v71;
  __int16 v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v74;
  __int16 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 v100;
  int v101;
  unsigned int v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  uint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v112;
  int v113;
  _WORD *v114;
  __int16 v115;
  _DWORD *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  __int16 v122;
  int v123;
  int v124;
  uint64_t (*v125)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, char *);
  uint64_t v126;
  __int16 v127;
  unsigned __int16 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int16 v132;
  int v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unsigned __int16 v137;
  int v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  uint64_t v140;
  __int16 v141;
  int v142;
  char v143;
  uint64_t v144;
  char **v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char *v159;
  char *v160;
  unsigned __int16 i;
  unsigned int v162;
  BOOL v163;
  uint64_t (*v164)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v165;
  __int16 v166;
  uint64_t (*v167)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v168;
  __int16 v169;
  char *v170;
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v172;
  __int16 v173;
  char *v174;
  unsigned __int16 v175;
  unsigned __int16 v176;
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v178;
  __int16 v179;
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v181;
  __int16 v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v184;
  __int16 v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v187;
  __int16 v188;
  uint64_t v189;
  char **v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  char *v195;
  uint64_t v196;
  void (*v197)(_QWORD, _QWORD, char *, const char *, _QWORD);
  char *v198;
  const char *v199;
  __int16 v200;
  uint64_t (*v201)(_QWORD, _QWORD, _QWORD, char *, _QWORD);
  char *v202;
  unsigned __int16 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  const char *v208;
  char *v209;
  size_t v210;
  char *v211;
  size_t v212;
  unsigned __int16 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t (*v220)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v221;
  unsigned __int16 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int16 v227;
  char *v228;
  const char *v229;
  size_t v230;
  size_t v231;
  char *v232;
  const char *v233;
  size_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  const char *v238;
  uint64_t (*v239)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *);
  uint64_t v240;
  __int16 v241;
  unsigned __int16 v242;
  unsigned __int16 v243;
  unsigned __int16 v244;
  int v245;
  const char *v247;
  _BYTE *v248;
  uint64_t (*v250)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  uint64_t v251;
  __int16 v252;
  uint64_t (*v254)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v255;
  int v256;
  char *v257;
  _BOOL4 v258;
  int v259;
  uint64_t v260;
  char *v261;
  unsigned int v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v280;
  __int16 v281;
  uint64_t *v282;
  int v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t (*v294)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v295;
  __int16 v296;
  unsigned int v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  int v302;
  int v303;
  char *v304;
  __int16 *v305;
  int v306;
  int v307;
  unsigned __int16 v308;
  uint64_t v309;
  const char **v310;
  int v311;
  int v312;
  size_t *v313;
  uint64_t v314;
  int v315;
  char v316;
  unsigned int v317;
  uint64_t v318;
  char v319[8];
  uint64_t *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  _BYTE __c[11];
  int v327;
  __int16 v328;
  char *v329;
  __int16 v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  char *__src;
  char *__s2;
  int v337;
  int v338;
  int v339;
  unsigned __int16 v340;
  unsigned __int16 v341;
  int v342;
  char *v343;
  char *__s;
  char *v345[16];
  char __dst[8];
  char *__s1[2];
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;

  v363 = *MEMORY[0x24BDAC8D0];
  v343 = 0;
  __s = 0;
  v9 = 2310021130;
  v341 = 0;
  v338 = 0;
  __src = 0;
  __s2 = 0;
  v333 = 0;
  v330 = 0;
  v328 = 0;
  v327 = 1601400688;
  *(_WORD *)&__c[1] = -1;
  v324 = 0;
  v325 = 0;
  if ((safeh_HandleCheck(a1, a2, 62340, 2288) & 0x80000000) != 0)
    return 2310021128;
  v342 = 0;
  v340 = 0;
  v339 = 0;
  v337 = 0;
  v334 = 0;
  v332 = 0;
  v331 = 0;
  v329 = 0;
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  v323 = 0;
  *a5 = 1;
  v10 = (paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clmvariants", &v323, 0) & 0x80000000) == 0
     && LH_stricmp(v323, "no") != 0;
  *(_DWORD *)(a1 + 844) = v10;
  v12 = (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcmlextramaintrans", &v323) & 0x80000000) == 0
     && LH_stricmp(v323, "no")
     && *(_DWORD *)(a1 + 852) != 0;
  *(_DWORD *)(a1 + 848) = v12;
  __s1[0] = 0;
  *(_DWORD *)__dst = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 128) + 96))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), __dst) & 0x80000000) != 0|| (v13 = 0, !*(_DWORD *)__dst))
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clm", __s1);
    v15 = 1;
    if ((Str & 0x80000000) == 0 && __s1[0])
      v15 = cstdlib_strcmp(__s1[0], "yes") == 0;
    v13 = v15 && *(_DWORD *)(a1 + 1204) == 1 || *(_DWORD *)(a1 + 940) == 1;
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpppipelinemode", &v323) & 0x80000000) == 0
    && v323
    && *v323)
  {
    fe_oneword_ResetCarryOverSentenceParams(a1);
  }
  v16 = *(unsigned __int8 *)(a1 + 1201);
  *(_BYTE *)(a1 + 1201) = 1;
  if ((paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"numberoutputtranscriptions", &v323, 0) & 0x80000000) == 0
    && v323)
  {
    v17 = cstdlib_atoi((unsigned __int8 *)v323);
    if (v16 == v17)
    {
      v18 = v17;
      *(_BYTE *)(a1 + 1201) = v16;
      v19 = *(unsigned __int8 *)(a1 + 1200);
    }
    else
    {
      *(_BYTE *)(a1 + 1201) = v17;
      hlp_UnLoadDTData((uint64_t *)a1);
      DTData = hlp_LoadDTData(a1);
      if ((DTData & 0x80000000) != 0)
        return DTData;
      v18 = *(unsigned __int8 *)(a1 + 1200);
      v19 = *(unsigned __int8 *)(a1 + 1201);
    }
    if (v18 >= v19)
      LOBYTE(v18) = v19;
    *(_BYTE *)(a1 + 1200) = v18;
  }
  v21 = (paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"norichtranscription", &v323, 0) & 0x80000000) == 0
     && LH_stricmp(v323, "false") != 0;
  *(_DWORD *)(a1 + 840) = v21;
  v22 = paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fecfg", &v323, 0);
  if (*(_DWORD *)(a1 + 840)
    && (v22 & 0x80000000) == 0
    && LH_stricmp(v323, "mpthree")
    && LH_stricmp(v323, "mpthreeml")
    && LH_stricmp(v323, "vadvde"))
  {
    *(_DWORD *)(a1 + 840) = 0;
  }
  if (ssftmap_GetSize(*(_QWORD *)(a1 + 568)))
  {
    __s1[0] = 0;
    *(_QWORD *)__dst = 0;
    v345[0] = 0;
    v321 = 0;
    v322 = 0;
    v320 = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"decisiontreescorepruning", __s1) & 0x80000000) != 0)
      __s1[0] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"decisiontreehistogrampruning", __dst) & 0x80000000) != 0)
      *(_QWORD *)__dst = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"decisiontreevariantpruning", v345) & 0x80000000) != 0)
      v345[0] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"numberoutputtranscriptions", &v322) & 0x80000000) != 0)
      v322 = 0;
    if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 568), 0, 1, (uint64_t)&v320) & 0x80000000) == 0)
    {
      v318 = 0;
      *(_QWORD *)v319 = 0;
      while ((ssftmap_IteratorNext(v320, v319, &v318) & 0x80000000) == 0)
      {
        if (!__s1[0]
          || (LODWORD(v321) = 1,
              HIDWORD(v321) = cstdlib_atoi((unsigned __int8 *)__s1[0]),
              v23 = LexDT_SetParamList(*(_QWORD *)(v318 + 16), (uint64_t)&v321, 1u),
              v24 = LH_ERROR_to_VERROR(v23),
              (v24 & 0x80000000) == 0))
        {
          if (!*(_QWORD *)__dst
            || (LODWORD(v321) = 2,
                HIDWORD(v321) = cstdlib_atoi(*(unsigned __int8 **)__dst),
                v29 = LexDT_SetParamList(*(_QWORD *)(v318 + 16), (uint64_t)&v321, 1u),
                v24 = LH_ERROR_to_VERROR(v29),
                (v24 & 0x80000000) == 0))
          {
            if (!v345[0]
              || (LODWORD(v321) = 5,
                  HIDWORD(v321) = cstdlib_atoi((unsigned __int8 *)v345[0]),
                  v30 = LexDT_SetParamList(*(_QWORD *)(v318 + 16), (uint64_t)&v321, 1u),
                  v24 = LH_ERROR_to_VERROR(v30),
                  (v24 & 0x80000000) == 0))
            {
              if (!v322)
                continue;
              LODWORD(v321) = 0;
              HIDWORD(v321) = cstdlib_atoi((unsigned __int8 *)v322);
              v31 = LexDT_SetParamList(*(_QWORD *)(v318 + 16), (uint64_t)&v321, 1u);
              v24 = LH_ERROR_to_VERROR(v31);
              if ((v24 & 0x80000000) == 0)
                continue;
            }
          }
        }
        v11 = v24;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v25, v26, v27, v28, v297);
        return v11;
      }
      ssftmap_IteratorClose((uint64_t)v320);
    }
  }
  if (*(_DWORD *)(a1 + 2004))
  {
    DTData = oneword_posparser_Process((_QWORD *)a1, a3, a4);
    if ((DTData & 0x80000000) != 0)
      return DTData;
  }
  v32 = a1 + 56;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 56) + 104))(a3, a4, 1, 0, (char *)&v342 + 2);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, HIWORD(v342), 0, &v330) & 0x80000000) != 0)return v11;
  if (v330 != 1)
    return v11;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, HIWORD(v342), 0, &__s, &v340);
  if ((v11 & 0x80000000) != 0 || v340 < 2u)
    return v11;
  v33 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v34 = cstdlib_strlen(__s);
  v35 = (char *)heap_Alloc(v33, (v34 + 1));
  v343 = v35;
  if (!v35)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v36, v37, v38, v39, v297);
    return 2310021130;
  }
  cstdlib_strcpy(v35, __s);
  *(_OWORD *)__s1 = 0u;
  v348 = 0u;
  v349 = 0u;
  v350 = 0u;
  v351 = 0u;
  v352 = 0u;
  v353 = 0u;
  v354 = 0u;
  v355 = 0u;
  v356 = 0u;
  v357 = 0u;
  v358 = 0u;
  v359 = 0u;
  v360 = 0u;
  v361 = 0u;
  v362 = 0u;
  HIWORD(v338) = 128;
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v32 + 176))(a3, a4, HIWORD(v342), 1, &v334, (char *)&v333 + 2);
  if ((v40 & 0x80000000) != 0)
    goto LABEL_95;
  HIWORD(v338) = 0;
  if (HIWORD(v333))
  {
    v41 = 0;
    do
    {
      if (*(_DWORD *)(v334 + 32 * v41) == 34)
      {
        v42 = cstdlib_strstr(*(char **)(v334 + 32 * v41 + 24), "\x14");
        if (v42)
          *v42 = 0;
      }
      v41 = HIWORD(v338) + 1;
      HIWORD(v338) = v41;
      v43 = HIWORD(v333);
    }
    while (HIWORD(v333) > v41);
    v44 = v334;
    v45 = *(_DWORD *)(v334 + 12);
    *(_WORD *)(a1 + 224) = 0;
    v46 = (__int16 *)(a1 + 224);
    v47 = (unsigned __int16)v333;
    if ((unsigned __int16)v333 < v43)
    {
      v48 = (int *)(v44 + 32 * (unsigned __int16)v333 + 12);
      do
      {
        v49 = *v48;
        v48 += 8;
        if (v49 != v45)
          break;
        LOWORD(v333) = ++v47;
      }
      while (v43 != v47);
    }
  }
  else
  {
    v45 = *(_DWORD *)(v334 + 12);
    *(_WORD *)(a1 + 224) = 0;
    v46 = (__int16 *)(a1 + 224);
  }
  v40 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 104) + 112))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &v331, 0);
  if ((v40 & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 932) = 0,
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 104))(a3, a4, 3, HIWORD(v342), &v342), (v40 & 0x80000000) != 0)|| (*(_WORD *)&__c[1] = -1, v40 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "normal", &__c[3], &__c[1], __c), (v40 & 0x80000000) != 0))
  {
LABEL_95:
    v57 = 0;
    v58 = 0;
    v9 = v40;
    goto LABEL_96;
  }
  cstdlib_strcpy(__dst, "normal");
  if (*(_WORD *)&__c[1])
  {
    v50 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v50)
      *v50 = 0;
    cstdlib_strcpy(__dst, **(const char ***)&__c[3]);
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    v51 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 352);
    if (!v51)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v52, v53, v54, v55, v297);
      v57 = 0;
      v58 = 0;
      goto LABEL_96;
    }
    v56 = v334;
    *(_DWORD *)(v51 + 12) = *(_DWORD *)(v334 + 12);
    *(_DWORD *)v51 = 0x4000;
    *(_DWORD *)(v51 + 44) = *(_DWORD *)(v56 + 12);
    *(_DWORD *)(v51 + 32) = 36;
    *(_QWORD *)(v51 + 56) = "normal";
    v311 = 10;
    v314 = v51;
    v305 = v46;
    v308 = 2;
  }
  else
  {
    v305 = v46;
    v308 = 0;
    v311 = 0;
    v314 = 0;
  }
  v59 = 78;
  v315 = 1;
  while ((_WORD)v342)
  {
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v61 = v332;
    if ((v332 - 5) <= 2)
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 4, &__s2, &v340);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      if (!cstdlib_strcmp(__s2, "phon"))
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 3, &__src, &v340);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
      }
      v62 = v332;
      if (v332 == 5)
      {
        v330 = 0;
        v325 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 6, &v330) & 0x80000000) == 0&& v330 == 1)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 6, &v325, &v340);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
        v62 = v332;
      }
      if (v62 == 6)
      {
        v330 = 0;
        v324 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 7, &v330) & 0x80000000) == 0&& v330 == 1)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 7, &v324, &v340);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
      }
      v63 = *(_QWORD *)v32;
      if (v315)
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v63 + 72))(a3, a4, 2, HIWORD(v342), &v341);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
      }
      else
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v63 + 80))(a3, a4, v341, &v341);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
      }
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 0, 1, &v332, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 1, 1, &v338, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 2, 1, &v337, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
      v65 = v341;
      v66 = cstdlib_strlen(__s2);
      v60 = v64(a3, a4, v65, 4, (unsigned __int16)(v66 + 1), __s2, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      if (!cstdlib_strcmp(__s2, "phon"))
      {
        if (__src)
        {
          v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
          v68 = v341;
          v69 = cstdlib_strlen(__src);
          v60 = v67(a3, a4, v68, 3, (unsigned __int16)(v69 + 1), __src, (char *)&v339 + 2);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
      }
      v61 = v332;
      if (v332 == 5 && v325)
      {
        v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
        v71 = v341;
        v72 = cstdlib_strlen(v325);
        v60 = v70(a3, a4, v71, 9, (unsigned __int16)(v72 + 1), v325, (char *)&v339 + 2);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        v61 = v332;
      }
      v315 = 0;
      if (v61 == 6 && v324)
      {
        v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
        v74 = v341;
        v75 = cstdlib_strlen(v324);
        v60 = v73(a3, a4, v74, 19, (unsigned __int16)(v75 + 1), v324, (char *)&v339 + 2);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        v315 = 0;
        v61 = v332;
      }
    }
    if (*(_DWORD *)(a1 + 560) != 1 || v61 != 5 || !__s2)
      goto LABEL_162;
    if (!cstdlib_strcmp(__s2, "phon")
      || !cstdlib_strcmp(__s2, "prompt")
      || !cstdlib_strcmp(__s2, "internal-nuance-system-norm"))
    {
LABEL_159:
      v79 = 78;
LABEL_160:
      v81 = v311;
      goto LABEL_161;
    }
    v76 = *(char **)(a1 + 1216);
    if (!v76)
    {
      v58 = 0;
      v57 = 0;
      v9 = 2310021126;
      goto LABEL_277;
    }
    v77 = cstdlib_strstr(v76, __s2);
    if (!cstdlib_strcmp(__s2, "latin"))
      goto LABEL_176;
    if (!cstdlib_strcmp(__s2, __dst))
      goto LABEL_159;
    if (!v77 || v77[cstdlib_strlen(__s2)] != 124)
    {
LABEL_176:
      v79 = 76;
      goto LABEL_160;
    }
    v78 = (unsigned __int16)cstdlib_strlen(__s2);
    if (!v78)
      goto LABEL_159;
    LODWORD(v79) = 78;
    v80 = __s2;
    v81 = v311;
    do
    {
      v82 = *v80++;
      if (v82 == 95)
        v79 = 76;
      else
        v79 = v79;
      --v78;
    }
    while (v78);
LABEL_161:
    if (v59 != v79)
    {
      v84 = (unsigned __int16)v338;
      if ((_WORD)v338)
      {
        if (v308 >= (unsigned __int16)v81)
        {
          v86 = v81;
          v85 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v314, 32 * (unsigned __int16)v81 + 352);
          if (!v85)
          {
LABEL_493:
            v237 = *(_QWORD *)a1;
LABEL_494:
            log_OutPublic(*(_QWORD *)(v237 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v87, v88, v89, v90, v297);
            goto LABEL_495;
          }
          v311 = v86 + 10;
          v84 = (unsigned __int16)v338;
        }
        else
        {
          v85 = v314;
        }
        v314 = v85;
        v91 = v85 + 32 * v308;
        *(_DWORD *)v91 = 36;
        *(_DWORD *)(v91 + 12) = *(_DWORD *)(v334 + 12) + v84;
        v92 = "normal";
        if (v79 == 76)
          v92 = "latin";
        *(_QWORD *)(v91 + 24) = v92;
        ++v308;
      }
      else if (v79 == 76)
      {
        *(_QWORD *)(v314 + 56) = "latin";
        v79 = 76;
      }
      else
      {
        *(_QWORD *)(v314 + 56) = "normal";
      }
      goto LABEL_163;
    }
LABEL_162:
    v79 = v59;
LABEL_163:
    v83 = (unsigned __int16)v342;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
    if ((v60 & 0x80000000) == 0)
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 192))(a3, a4, v83);
      v59 = v79;
      if ((v60 & 0x80000000) == 0)
        continue;
    }
    goto LABEL_275;
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    v93 = *(_QWORD *)(a1 + 64);
    v94 = *(_QWORD *)(a1 + 72);
    v95 = v308;
    v96 = a3;
    v97 = a4;
    v98 = v314;
  }
  else
  {
    v98 = v334;
    v95 = HIWORD(v333);
    v93 = *(_QWORD *)(a1 + 64);
    v94 = *(_QWORD *)(a1 + 72);
    v96 = a3;
    v97 = a4;
  }
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 56))(v93, v94, v96, v97, v98, v95);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 3, HIWORD(v342), &v342);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v341);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, v341, 1, 1, (char *)&v337 + 2, &v340);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  if (HIWORD(v337))
  {
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 88))(a3, a4, v341, &v341);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 0, 1, &v332, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 0, 1, &v332, (char *)&v339 + 2);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 1, 1, &v338, (char *)&v339 + 2);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 2, 1, &v337, (char *)&v339 + 2);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
  }
  LOWORD(v338) = 0;
  while (1)
  {
    v99 = *(_QWORD *)v32;
    if (!(_WORD)v342)
      break;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 168))(a3, a4);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v100 = v341;
    v101 = (unsigned __int16)v338;
    v102 = HIWORD(v337);
    if ((unsigned __int16)v338 > HIWORD(v337) && v341)
    {
      while (1)
      {
        v103 = v100;
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 120))(a3, a4, v100, &v341);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        if (v341)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
          v102 = HIWORD(v337);
        }
        else
        {
          v104 = cstdlib_strlen(__s);
          v102 = v104;
          HIWORD(v337) = v104;
        }
        v101 = (unsigned __int16)v338;
        v100 = v341;
        if ((unsigned __int16)v338 <= v102 || v341 == 0)
          goto LABEL_213;
      }
    }
    v103 = v341;
LABEL_213:
    if (v101 != v102)
      v341 = v103;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, v341, 0, 1, (char *)&v331 + 4, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    if (HIDWORD(v331) == 5 && (unsigned __int16)v338 == HIWORD(v337))
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 88))(a3, a4, v341, &v341);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 0, 1, &v332, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 1, 1, &v338, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 2, 1, &v337, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 120))(a3, a4, v341, &v341);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
    }
    else
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)v32 + 80))(a3, a4, v341, &v341);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 0, 1, &v332, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 1, 1, &v338, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, v341, 2, 1, &v337, (char *)&v339 + 2);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
    }
    v106 = (unsigned __int16)v342;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
    if ((v60 & 0x80000000) == 0)
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 192))(a3, a4, v106);
      if ((v60 & 0x80000000) == 0)
        continue;
    }
    goto LABEL_275;
  }
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v99 + 104))(a3, a4, 2, HIWORD(v342), &v342);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v107 = (unsigned __int16)v342;
  *(_WORD *)(a1 + 280) = v342;
  LOWORD(v339) = v107;
  if (v107)
  {
    LOWORD(v108) = 0;
    while (1)
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v107, 0, 1, (char *)&v331 + 4, &v340);
      if ((v60 & 0x80000000) != 0)
        break;
      v109 = *(_QWORD *)v32;
      v110 = (unsigned __int16)v339;
      if (HIDWORD(v331) != 5)
        goto LABEL_256;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(v109 + 168))(a3, a4, (unsigned __int16)v339, 1, 1, &v338, &v340);
      if ((v60 & 0x80000000) != 0)
        break;
      v108 = (unsigned __int16)v338 <= (unsigned __int16)v108
           ? (unsigned __int16)v108
           : (unsigned __int16)v338;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v339, 2, 1, &v337, &v340);
      if ((v60 & 0x80000000) != 0)
        break;
      v109 = *(_QWORD *)v32;
      v110 = (unsigned __int16)v339;
      if (v108 < (unsigned __int16)v337)
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(v109 + 176))(a3, a4, (unsigned __int16)v339, 4, &__s2, &v340);
        if ((v60 & 0x80000000) != 0)
          break;
        if (cstdlib_strcmp(__s2, "phon"))
        {
          v330 = 0;
          v112 = (*(int (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a1 + 56) + 184))(a3, a4, (unsigned __int16)v339, 9, &v330) >= 0&& v330 == 1;
          v60 = oneword_G2PLookup(a1, (const char **)&v343, v108, (unsigned __int16 *)&v337, __s2, a3, a4, (unsigned __int16 *)&v342, v334, &v333, (unsigned __int16 *)&v333 + 1, v45, v112);
          if ((unsigned __int16)v337 > v108)
            LOWORD(v108) = v337;
          if ((v60 & 0x80000000) != 0)
            break;
        }
        else
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v339, 3, &__src, &v340);
          if ((v60 & 0x80000000) != 0)
            break;
          v60 = oneword_ConvertPhon(a1, (uint64_t)__s, (uint64_t)__src, v338, (unsigned __int16)v337, a3, a4, (unsigned __int16 *)&v342, v334, &v333, (unsigned __int16 *)&v333 + 1, v45);
          if ((v60 & 0x80000000) != 0)
            break;
        }
        LOWORD(v339) = v342;
      }
      else
      {
LABEL_256:
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v109 + 120))(a3, a4, v110, &v339);
        if ((v60 & 0x80000000) != 0)
          break;
      }
      if ((_WORD)v342)
      {
        LOWORD(v107) = v339;
        if ((_WORD)v339)
          continue;
      }
      goto LABEL_263;
    }
LABEL_275:
    v58 = 0;
    v57 = 0;
LABEL_276:
    v9 = v60;
    goto LABEL_277;
  }
LABEL_263:
  v113 = *v305;
  if (*v305)
  {
    v114 = (_WORD *)(a1 + 280);
    v115 = HIWORD(v333);
    if ((unsigned __int16)v333 < HIWORD(v333))
    {
      v116 = (_DWORD *)(v334 + 32 * (unsigned __int16)v333 + 12);
      v117 = HIWORD(v333) - (unint64_t)(unsigned __int16)v333;
      do
      {
        *v116 += v113;
        v116 += 8;
        --v117;
      }
      while (v117);
      LOWORD(v333) = v115;
    }
    LOWORD(v345[0]) = 0;
    LOWORD(v322) = 0;
    if (!*v114)
    {
      v119 = 0;
      goto LABEL_280;
    }
LABEL_269:
    v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    while (1)
    {
      v119 = LOWORD(v345[0]);
LABEL_280:
      if (v119 > (__int16)cstdlib_strlen(__s) || !*v114)
        break;
      v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
      if ((v118 & 0x80000000) != 0)
        goto LABEL_272;
      if ((HIDWORD(v331) & 0xFFFFFFFC) == 4 || (HIDWORD(v331) - 9) <= 1)
      {
        v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)*v114, 2, 1, &v322, &v340);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
        v122 = *v305;
        LOWORD(v345[0]) += *v305;
        LOWORD(v322) = (_WORD)v322 + v122;
        v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)*v114, 1, 1, v345, (char *)&v339 + 2);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
        v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)*v114, 2, 1, &v322, (char *)&v339 + 2);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
      }
      v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)*v114, a1 + 280);
      if ((v118 & 0x80000000) != 0)
        goto LABEL_272;
      if (*v114)
      {
        v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
        v123 = LOWORD(v345[0]);
        if (v123 > (__int16)cstdlib_strlen(__s))
        {
          while (*v114)
          {
            v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            if (HIDWORD(v331) != 17)
              break;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)*v114, a1 + 280);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
          }
          goto LABEL_269;
        }
      }
    }
    LOWORD(v113) = *v305;
  }
  LODWORD(v331) = v331 + (__int16)v113;
  v60 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 104) + 104))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v124 = cstdlib_strlen(v343);
  *(_DWORD *)(v334 + 16) = v124;
  v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
  v126 = HIWORD(v342);
  v127 = cstdlib_strlen(v343);
  v60 = v125(a3, a4, v126, 0, (unsigned __int16)(v127 + 1), v343, (char *)&v339 + 2);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v128 = v342;
  if ((_WORD)v342)
  {
    v129 = 0;
    do
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, v128, 0, 1, (char *)&v331 + 4, &v340);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      if (HIDWORD(v331) > 3)
      {
        v130 = (unsigned __int16)v342;
      }
      else
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 192))(a3, a4, (unsigned __int16)v342);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        LOWORD(v342) = v129;
        v130 = v129;
      }
      v131 = *(_QWORD *)v32;
      if ((_WORD)v130)
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v131 + 120))(a3, a4, (unsigned __int16)v130, &v342);
        v129 = v130;
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
      }
      else
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v131 + 104))(a3, a4, 2, HIWORD(v342), &v342);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
      }
      v128 = v342;
    }
    while ((_WORD)v342);
  }
  LOWORD(v333) = 0;
  v132 = cstdlib_strlen(v343);
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
  if ((v60 & 0x80000000) != 0)
    goto LABEL_275;
  v309 = 0;
  v302 = 0;
  v306 = 0;
  v316 = 0;
  v312 = v132;
  while (2)
  {
    if (!(_WORD)v342)
    {
      if (v306 && v302 && (_BYTE)v309)
      {
        v189 = v309;
        v190 = __s1;
        do
        {
          v191 = *(unsigned __int16 *)v190;
          v190 = (char **)((char *)v190 + 2);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 192))(a3, a4, v191);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
        while (--v189);
      }
      if (*(_BYTE *)(a1 + 1200))
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        v310 = (const char **)(a1 + 168);
        v313 = (size_t *)(a1 + 200);
        while ((_WORD)v342)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
          if (HIDWORD(v331) == 9)
          {
            v330 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 11, &v330) & 0x80000000) != 0)
            {
              v330 = 0;
            }
            else if (v330)
            {
              goto LABEL_491;
            }
            v321 = 0;
            v322 = 0;
            LOWORD(v318) = 0;
            v320 = 0;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            v192 = (unsigned __int16)v337;
            v193 = (unsigned __int16)v338;
            v194 = (unsigned __int16)v337 - (unsigned __int16)v338;
            v195 = *(char **)(a1 + 160);
            if (v194 >= *(unsigned __int16 *)(a1 + 192))
            {
              v196 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 160), (v194 + 1));
              if (!v196)
                goto LABEL_493;
              v195 = (char *)v196;
              *(_QWORD *)(a1 + 160) = v196;
              v192 = (unsigned __int16)v337;
              v193 = (unsigned __int16)v338;
              *(_QWORD *)(a1 + 192) = (unsigned __int16)v337 - (unint64_t)(unsigned __int16)v338 + 1;
            }
            cstdlib_strncpy(v195, &v343[v193], v192 - v193);
            *(_BYTE *)(*(_QWORD *)(a1 + 160) - (unsigned __int16)v338 + (unsigned __int16)v337) = 0;
            v197 = *(void (**)(_QWORD, _QWORD, char *, const char *, _QWORD))(*(_QWORD *)(a1 + 80) + 112);
            v198 = __s2;
            v199 = *(const char **)(a1 + 160);
            v200 = cstdlib_strlen(v199);
            v197(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v198, v199, (unsigned __int16)(v200 + 1));
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v342, 3, &__src, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 9, &v320, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            cstdlib_strcpy(*(char **)(a1 + 168), "");
            if (*(_BYTE *)(a1 + 1200))
            {
              v317 = 0;
              v307 = 3;
              do
              {
                LH_itoa(++v317, v319, 0xAu);
                cstdlib_strcpy((char *)v345, "multi_trans_");
                cstdlib_strcat((char *)v345, v319);
                v201 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
                v202 = __src;
                v203 = cstdlib_strlen(__src);
                v118 = v201(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v202, v203);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                v118 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, uint64_t *))(*(_QWORD *)(a1 + 104)
                                                                                             + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &v322, &v318);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                v322[(unsigned __int16)v318] = 0;
                HIWORD(v338) = 0;
                if (cstdlib_strlen(v322))
                {
                  do
                  {
                    v207 = v322;
                    v208 = (const char *)HIWORD(v338);
                    if (v322[HIWORD(v338)] == 126)
                    {
                      v209 = (char *)&v208[cstdlib_strlen("¡") - 1 + (_QWORD)v207];
                      v208 = &v322[HIWORD(v338)];
                      v210 = cstdlib_strlen(v208);
                      cstdlib_memmove(v209, v208, v210 + 1);
                      v211 = &v322[HIWORD(v338)];
                      v212 = cstdlib_strlen("¡");
                      cstdlib_memcpy(v211, "¡", v212);
                      LOWORD(v208) = HIWORD(v338);
                      v207 = v322;
                    }
                    HIWORD(v338) = (_WORD)v208 + 1;
                  }
                  while (cstdlib_strlen(v207) > (unsigned __int16)((_WORD)v208 + 1));
                }
                if (*(_BYTE *)v320)
                {
                  v118 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 104)
                                                                                                  + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 2, &v321, &v318);
                  if ((v118 & 0x80000000) != 0)
                    goto LABEL_272;
                  *(_BYTE *)(v321 + (unsigned __int16)v318) = 0;
                  HIWORD(v338) = 0;
                  if ((_WORD)v318)
                  {
                    v213 = 0;
                    do
                    {
                      *(_BYTE *)(v321 + v213) = *(_BYTE *)v320;
                      v213 = HIWORD(v338) + 1;
                      HIWORD(v338) = v213;
                    }
                    while ((unsigned __int16)v318 > v213);
                  }
                }
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v204, v205, v206, (uint64_t)v345);
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v214, v215, v216, (uint64_t)v345);
                if (*(_BYTE *)v320)
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v217, v218, v219, (uint64_t)v345);
                v220 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 104)
                                                                                               + 120);
                v221 = *(const char **)(a1 + 160);
                v222 = cstdlib_strlen(v221);
                v118 = v220(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 1, v221, v222);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                v118 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v345);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                v118 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, uint64_t *))(*(_QWORD *)(a1 + 104)
                                                                                             + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &v322, &v318);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                v322[(unsigned __int16)v318] = 0;
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v223, v224, v225, (uint64_t)v345);
                if (cstdlib_strlen(v322))
                {
                  v226 = 0;
                  v227 = 0;
                  do
                  {
                    v228 = &v322[v226];
                    if (v322[v226] == 126)
                    {
                      v229 = &v322[v226 + 1];
                      v230 = cstdlib_strlen(v229);
                      cstdlib_memmove(v228, v229, v230 + 1);
                    }
                    else
                    {
                      v231 = cstdlib_strlen("¡");
                      if (!cstdlib_strncmp(v228, "¡", v231))
                      {
                        v232 = &v322[v227 + 1];
                        v233 = &v322[v227 + 2];
                        v234 = cstdlib_strlen(v233);
                        cstdlib_memmove(v232, v233, v234 + 1);
                        v322[v226] = 126;
                      }
                    }
                    v226 = ++v227;
                  }
                  while (cstdlib_strlen(v322) > v227);
                }
                if (cstdlib_strcmp(__src, v322))
                {
                  v307 += cstdlib_strlen(v322) + 1;
                  if (*v313 < (unsigned __int16)v307)
                  {
                    v235 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), (unsigned __int16)v307);
                    if (!v235)
                      goto LABEL_493;
                    *v310 = (const char *)v235;
                    *v313 = (unsigned __int16)v307;
                  }
                  v236 = dynamic_strcat(v310, v322, v313, *(uint64_t **)(*(_QWORD *)a1 + 8));
                  v237 = *(_QWORD *)a1;
                  if (!v236)
                    goto LABEL_494;
                  if (!dynamic_strcat(v310, "\x12", v313, *(uint64_t **)(v237 + 8)))
                    goto LABEL_493;
                }
              }
              while (v317 < *(unsigned __int8 *)(a1 + 1200));
            }
            if (**v310)
            {
              v238 = *v310;
              v238[cstdlib_strlen(*v310) - 1] = 0;
              v239 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, char *))(*(_QWORD *)v32 + 160);
              v240 = (unsigned __int16)v342;
              v241 = cstdlib_strlen(*v310);
              v118 = v239(a3, a4, v240, 11, (unsigned __int16)(v241 + 1), *v310, (char *)&v339 + 2);
              if ((v118 & 0x80000000) != 0)
                goto LABEL_272;
            }
          }
LABEL_491:
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
      }
      if (*(_DWORD *)(a1 + 1204) && *(_DWORD *)(a1 + 848) && *(unsigned __int8 *)(a1 + 1201) >= 2u)
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        v242 = 0;
        v243 = 0;
        v244 = 0;
        v245 = 0;
        while ((_WORD)v342)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
          if (HIDWORD(v331) == 9 || HIDWORD(v331) == 4)
          {
            v345[0] = 0;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 9, v345, &v340);
            if ((v118 & 0x80000000) != 0)
              goto LABEL_272;
            if ((unsigned __int16)v338 != v243)
            {
              if (!v245)
              {
                if (v243 | v244)
                {
                  v118 = hlp_GenXtraMainVarMW(a1, a3, a4, v242, v243, v244, (uint64_t)v343);
                  if ((v118 & 0x80000000) != 0)
                    goto LABEL_272;
                }
              }
              v245 = 0;
            }
            if (!LH_stricmp(v345[0], *(char **)(a1 + 1208))
              || !cstdlib_strcmp(v345[0], "")
              || !cstdlib_strcmp(v345[0], "normal"))
            {
              v245 = 1;
            }
            v243 = v338;
            v244 = v337;
          }
          v242 = v342;
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
        }
        if (!v245)
        {
          if (v243 | v244)
          {
            v60 = hlp_GenXtraMainVarMW(a1, a3, a4, v242, v243, v244, (uint64_t)v343);
            if ((v60 & 0x80000000) != 0)
              goto LABEL_275;
          }
        }
      }
      v247 = *(const char **)(a1 + 2184);
      if (v247)
      {
        if (cstdlib_strlen(v247) == 3)
        {
          v248 = *(_BYTE **)(a1 + 2184);
          if (*v248 == 101 && v248[1] == 110)
          {
            v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
            if ((v60 & 0x80000000) != 0)
              goto LABEL_275;
            while ((_WORD)v342)
            {
              v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_275;
              if (HIDWORD(v331) <= 0xA && ((1 << SBYTE4(v331)) & 0x610) != 0)
              {
                v345[0] = 0;
                v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 9, v345, &v340);
                if ((v118 & 0x80000000) != 0)
                  goto LABEL_272;
                if (!cstdlib_strcmp(v345[0], "latin"))
                {
                  v250 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 56) + 160);
                  v251 = (unsigned __int16)v342;
                  v252 = cstdlib_strlen(*(const char **)(a1 + 2184));
                  v118 = v250(a3, a4, v251, 9, (unsigned __int16)(v252 + 1), *(_QWORD *)(a1 + 2184), (char *)&v339 + 2);
                  if ((v118 & 0x80000000) != 0)
                    goto LABEL_272;
                }
              }
              v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_275;
            }
          }
        }
      }
      if (v13)
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 104))(a3, a4, 2, HIWORD(v342), &v342);
        if ((v60 & 0x80000000) == 0)
        {
          v58 = 0;
          v57 = 0;
          while (1)
          {
            if (!(_WORD)v342)
              goto LABEL_611;
            v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
            if ((v60 & 0x80000000) != 0)
              goto LABEL_276;
            if (HIDWORD(v331) <= 0xA && ((1 << SBYTE4(v331)) & 0x610) != 0)
            {
              v345[0] = 0;
              v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 3, &__src, &v340);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_276;
              v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 9, v345, &v340);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_276;
              v330 = 0;
              v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 12, &v330);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_276;
              if (v330 != 1)
              {
                if (v345[0] && (!cstdlib_strlen(v345[0]) || cstdlib_strlen(v345[0]) == 3))
                {
                  v254 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
                  v255 = (unsigned __int16)v342;
                  v256 = cstdlib_strlen(v345[0]) + 1;
                  v257 = v345[0];
                }
                else
                {
                  v254 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                  v255 = (unsigned __int16)v342;
                  v256 = cstdlib_strlen(*(const char **)(a1 + 1208)) + 1;
                  v257 = *(char **)(a1 + 1208);
                }
                v60 = v254(a3, a4, v255, 12, (unsigned __int16)v256, v257, (char *)&v339 + 2);
                if ((v60 & 0x80000000) != 0)
                  goto LABEL_276;
              }
              if (LH_stricmp(v345[0], *(char **)(a1 + 1208)))
              {
                if (cstdlib_strcmp(v345[0], ""))
                {
                  if (cstdlib_strcmp(v345[0], "normal"))
                  {
                    if (cstdlib_strcmp(v345[0], "latin"))
                    {
                      v258 = hlp_checkDoClmForForeignLanguage(a1, v345[0]);
                      if (v258 || *(_DWORD *)(a1 + 844))
                      {
                        v259 = cstdlib_strlen(__src);
                        v260 = 0;
                        LOWORD(v321) = v342;
                        v261 = v345[0];
                        do
                        {
                          v262 = v261[v260];
                          if (v262 > 0x60)
                            LOBYTE(v262) = v262 - 32;
                          *((_BYTE *)&v322 + v260++) = v262;
                        }
                        while (v260 != 3);
                        v263 = (4 * v259 + 4);
                        BYTE3(v322) = 0;
                        v264 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v58, v263);
                        v58 = v264;
                        if (!v264)
                          goto LABEL_618;
                        cstdlib_strcpy(v264, "");
                        if (!v258 && *(_DWORD *)(a1 + 844))
                        {
                          LOWORD(v320) = 1;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v32 + 80))(a3, a4, (unsigned __int16)v342, &v321);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          HIDWORD(v331) = 16;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 0, 1, (char *)&v331 + 4, (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 1, 1, &v338, (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 2, 1, &v337, (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 5, 1, "*", (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 6, 1, "*", (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t **, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 7, 1, &v320, (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 12, 4, "map", (char *)&v339 + 2);
                          if ((v60 & 0x80000000) != 0)
                            goto LABEL_276;
                        }
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon before %s CLM %s", v269, v270, v271, (uint64_t)&v322);
                        if (((*(uint64_t (**)(_QWORD, _QWORD, char **, char *, char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 128) + 64))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), &v322, __src, v58, 0, 0, v263) & 0x80000000) != 0&& *(_DWORD *)(a1 + 940))
                        {
                          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CLM failed for %s", v273, v274, v275, (uint64_t)__src);
                        }
                        else
                        {
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v321, 9, 1, "", (char *)&v339 + 2);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                        }
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon after %s CLM %s", v276, v277, v278, (uint64_t)&v322);
                        v279 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                        v280 = (unsigned __int16)v321;
                        v281 = cstdlib_strlen(v58);
                        v272 = v279(a3, a4, v280, 3, (unsigned __int16)(v281 + 1), v58, (char *)&v339 + 2);
                        if ((v272 & 0x80000000) != 0)
                        {
LABEL_617:
                          v9 = v272;
                          goto LABEL_619;
                        }
                        v330 = 0;
                        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 11, &v330) & 0x80000000) == 0&& v330 == 1)
                        {
                          v272 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 11, &__src, &v340);
                          if ((v272 & 0x80000000) != 0)
                            goto LABEL_617;
                          if (cstdlib_strcmp(__src, ""))
                          {
                            v282 = *(uint64_t **)(*(_QWORD *)a1 + 8);
                            v283 = cstdlib_strlen(__src);
                            v284 = (char *)heap_Realloc(v282, (uint64_t)v57, (4 * v283 + 4));
                            v57 = v284;
                            if (!v284)
                              goto LABEL_618;
                            cstdlib_strcpy(v284, "");
                            v285 = __src;
                            if (__src)
                            {
                              while (1)
                              {
                                v286 = cstdlib_strchr(v285, 18);
                                v287 = v286;
                                if (v286)
                                  *v286 = 0;
                                if (*v57)
                                  cstdlib_strcat(v57, "\x12");
                                cstdlib_strcpy(v58, "_");
                                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon before %s CLM %s", v288, v289, v290, (uint64_t)&v322);
                                if (4 * cstdlib_strlen(__src) + 4 > v263)
                                {
                                  v263 = 4 * cstdlib_strlen(__src) + 4;
                                  v58 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v58, v263);
                                  if (!v58)
                                    break;
                                }
                                if (((*(uint64_t (**)(_QWORD, _QWORD, char **, char *, char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 128) + 64))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), &v322, __src, v58, 0, 0, v263) & 0x80000000) != 0)log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CLM failed for %s", v291, v292, v293, (uint64_t)__src);
                                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Phon after %s CLM %s", v291, v292, v293, (uint64_t)&v322);
                                cstdlib_strcat(v57, v58);
                                if (!v287)
                                {
                                  __src = 0;
                                  goto LABEL_607;
                                }
                                *v287 = 18;
                                v285 = v287 + 1;
                                __src = v285;
                              }
LABEL_618:
                              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v265, v266, v267, v268, v297);
LABEL_619:
                              v60 = v9;
                              goto LABEL_276;
                            }
LABEL_607:
                            v294 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
                            v295 = (unsigned __int16)v321;
                            v296 = cstdlib_strlen(v57);
                            v60 = v294(a3, a4, v295, 11, (unsigned __int16)(v296 + 1), v57, (char *)&v339 + 2);
                            if ((v60 & 0x80000000) != 0)
                              goto LABEL_276;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
            if ((v60 & 0x80000000) != 0)
              goto LABEL_276;
          }
        }
        goto LABEL_275;
      }
      v58 = 0;
      v57 = 0;
LABEL_611:
      v60 = fe_oneword_SplitMW((_QWORD *)a1, a3, a4);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_276;
      if (*(_DWORD *)(a1 + 2192))
      {
        v60 = fe_oneword_MosyntCleanup(a1, a3, a4);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_276;
      }
      DTData = fe_oneword_TreatNLUMarkup(a1, a3, a4);
      if ((DTData & 0x80000000) == 0)
      {
        v9 = fe_oneword_ProcessPinyinMarkup((_QWORD *)a1, a3, a4);
        v11 = v9;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_277;
        return v11;
      }
      return DTData;
    }
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 1, 1, &v338, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
    if ((v60 & 0x80000000) != 0)
      goto LABEL_275;
    v133 = HIDWORD(v331);
    switch(HIDWORD(v331))
    {
      case 4:
LABEL_324:
        v345[0] = 0;
        v330 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 11, &v330) & 0x80000000) == 0&& v330 == 1)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 11, v345, &v340);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
          v134 = cstdlib_strstr(v345[0], "\x12;_");
          if (v134)
            *v134 = 0;
          v135 = cstdlib_strstr(v345[0], ";_");
          if (v135)
            *v135 = 0;
        }
LABEL_331:
        v303 = (unsigned __int16)v338;
        if ((unsigned __int16)v338 == v312)
        {
          v306 = 1;
          v303 = v312;
          v136 = v309;
        }
        else
        {
          v136 = 0;
          if (v306 && v302)
          {
            v302 = 0;
            v306 = 0;
            v316 = 0;
            if ((_BYTE)v309)
            {
              v144 = v309;
              v145 = __s1;
              while (1)
              {
                v146 = *(unsigned __int16 *)v145;
                v145 = (char **)((char *)v145 + 2);
                v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 192))(a3, a4, v146);
                if ((v60 & 0x80000000) != 0)
                  goto LABEL_275;
                if (!--v144)
                {
                  v136 = 0;
                  v306 = 0;
                  v316 = 0;
                  v302 = 0;
                  v303 = (unsigned __int16)v338;
                  break;
                }
              }
            }
          }
          else
          {
            v302 = 0;
            v306 = 0;
            v316 = 0;
          }
        }
        v137 = v333;
        if ((unsigned __int16)v333 < HIWORD(v333))
        {
          while ((__int16)(*(_DWORD *)(v334 + 32 * v137 + 12) - v45) < (__int16)(v338 + 1))
          {
            v138 = *(_DWORD *)(v334 + 32 * v137);
            if (v138 == 14)
            {
              v142 = *(_DWORD *)(v334 + 32 * v137 + 24);
              if (v142 != 64)
              {
                v328 = v142;
                *(_WORD *)&__c[1] = -1;
                v60 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, int *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", &v327, &__c[3], &__c[1], __c);
                if ((v60 & 0x80000000) != 0)
                  goto LABEL_275;
                if (*(_WORD *)&__c[1])
                  v143 = ***(_BYTE ***)&__c[3];
                else
                  v143 = v328;
                v316 = v143;
              }
            }
            else if (v138 == 37)
            {
              v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)v32 + 160);
              v140 = (unsigned __int16)v342;
              v141 = cstdlib_strlen(*(const char **)(v334 + 32 * v137 + 24));
              v60 = v139(a3, a4, v140, 10, (unsigned __int16)(v141 + 1), *(_QWORD *)(v334 + 32 * (unsigned __int16)v333 + 24), (char *)&v339 + 2);
              if ((v60 & 0x80000000) != 0)
                goto LABEL_275;
            }
            v137 = v333 + 1;
            LOWORD(v333) = v137;
            if (HIWORD(v333) <= v137)
              break;
          }
        }
        if (v316)
        {
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 5, &v329, &v340);
          if ((v60 & 0x80000000) != 0)
            goto LABEL_275;
          if (cstdlib_strchr(v329, v316))
          {
            v302 = 1;
          }
          else
          {
            *((_WORD *)__s1 + v136) = v342;
            v136 = (v136 + 1);
          }
          *v329 = v316;
          v329[1] = 0;
        }
        v309 = v136;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 21, &v330) & 0x80000000) != 0)
        {
          v330 = 0;
        }
        else if (v330)
        {
LABEL_364:
          v133 = HIDWORD(v331);
          v312 = v303;
          break;
        }
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 21, 6, "OTHER", (char *)&v339 + 2);
        if ((v60 & 0x80000000) != 0)
          goto LABEL_275;
        goto LABEL_364;
      case 0xA:
        goto LABEL_331;
      case 9:
        goto LABEL_324;
    }
    if (v133 != 9)
      goto LABEL_431;
    v345[0] = 0;
    LOWORD(v321) = 0;
    v322 = 0;
    LOWORD(v320) = 0;
    *(_WORD *)v319 = 0;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 3, &__src, &v340);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    if (!cstdlib_strchr(__src, 32))
    {
LABEL_431:
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, (unsigned __int16)v342, &v342);
      if ((v60 & 0x80000000) != 0)
        goto LABEL_275;
      continue;
    }
    break;
  }
  v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, &v340);
  if ((v118 & 0x80000000) != 0)
    goto LABEL_272;
  v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 7, 1, &v321, &v340);
  if ((v118 & 0x80000000) != 0)
    goto LABEL_272;
  v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 9, &v322, &v340);
  if ((v118 & 0x80000000) != 0)
    goto LABEL_272;
  v330 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)v32 + 184))(a3, a4, (unsigned __int16)v342, 8, &v330) & 0x80000000) == 0&& v330 == 1)
  {
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t **, unsigned __int16 *))(*(_QWORD *)v32 + 168))(a3, a4, (unsigned __int16)v342, 8, 1, &v320, &v340);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
  }
  v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 5, &v329, &v340);
  if ((v118 & 0x80000000) != 0)
    goto LABEL_272;
  v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)v32 + 176))(a3, a4, (unsigned __int16)v342, 6, v345, &v340);
  if ((v118 & 0x80000000) != 0)
    goto LABEL_272;
  if (cstdlib_strlen(__src) - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    v147 = *(uint64_t **)(*(_QWORD *)a1 + 8);
    v148 = *(_QWORD *)(a1 + 240);
    v149 = cstdlib_strlen(__src);
    v150 = heap_Realloc(v147, v148, (v149 + 1));
    if (!v150)
      goto LABEL_493;
    *(_QWORD *)(a1 + 240) = v150;
  }
  if (cstdlib_strlen(v329) - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    v151 = *(uint64_t **)(*(_QWORD *)a1 + 8);
    v152 = *(_QWORD *)(a1 + 248);
    v153 = cstdlib_strlen(v329);
    v154 = heap_Realloc(v151, v152, (v153 + 1));
    if (!v154)
      goto LABEL_493;
    *(_QWORD *)(a1 + 248) = v154;
  }
  if (cstdlib_strlen(v345[0]) - 128 <= 0xFFFFFFFFFFFFFF7ELL)
  {
    v155 = *(uint64_t **)(*(_QWORD *)a1 + 8);
    v156 = *(_QWORD *)(a1 + 256);
    v157 = cstdlib_strlen(v345[0]);
    v158 = heap_Realloc(v155, v156, (v157 + 1));
    if (!v158)
      goto LABEL_493;
    *(_QWORD *)(a1 + 256) = v158;
  }
  cstdlib_strcpy(*(char **)(a1 + 240), __src);
  cstdlib_strcpy(*(char **)(a1 + 248), v329);
  cstdlib_strcpy(*(char **)(a1 + 256), v345[0]);
  v159 = *(char **)(a1 + 240);
  v304 = *(char **)(a1 + 248);
  v301 = *(char **)(a1 + 256);
  v160 = cstdlib_strchr(v159, 32);
  v300 = cstdlib_strchr(*(char **)(a1 + 248), 32);
  v298 = v160;
  v299 = cstdlib_strchr(*(char **)(a1 + 256), 32);
  HIWORD(v338) = v338;
  if (!v160)
  {
LABEL_426:
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 2, 1, &v337, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    v180 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v181 = (unsigned __int16)v342;
    v182 = cstdlib_strlen(v159);
    v118 = v180(a3, a4, v181, 3, (unsigned __int16)(v182 + 1), v159, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v184 = (unsigned __int16)v342;
    v185 = cstdlib_strlen(v304);
    v118 = v183(a3, a4, v184, 5, (unsigned __int16)(v185 + 1), v304, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    v186 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v187 = (unsigned __int16)v342;
    v188 = cstdlib_strlen(v301);
    v118 = v186(a3, a4, v187, 6, (unsigned __int16)(v188 + 1), v301, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    *(_WORD *)v319 = 0;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t **, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 8, 1, &v320, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      goto LABEL_272;
    goto LABEL_431;
  }
  while (1)
  {
    for (i = HIWORD(v338); ; HIWORD(v338) = ++i)
    {
      v162 = v343[i];
      v163 = v162 > 0x20 || ((1 << v162) & 0x100002601) == 0;
      if (!v163 || v162 == 95)
        break;
    }
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 2, 1, (char *)&v338 + 2, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    ++HIWORD(v338);
    *v298 = 0;
    v164 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v165 = (unsigned __int16)v342;
    v166 = cstdlib_strlen(v159);
    v118 = v164(a3, a4, v165, 3, (unsigned __int16)(v166 + 1), v159, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    if (v300)
      *v300 = 0;
    v167 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v168 = (unsigned __int16)v342;
    v169 = cstdlib_strlen(v304);
    v118 = v167(a3, a4, v168, 5, (unsigned __int16)(v169 + 1), v304, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v170 = v304;
    if (v300)
      v170 = v300 + 1;
    v304 = v170;
    if (v299)
      *v299 = 0;
    v171 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v172 = (unsigned __int16)v342;
    v173 = cstdlib_strlen(v301);
    v118 = v171(a3, a4, v172, 6, (unsigned __int16)(v173 + 1), v301, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v174 = v301;
    if (v299)
      v174 = v299 + 1;
    v301 = v174;
    *(_WORD *)v319 = 0;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 8, 1, v319, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v175 = v342;
    if ((_WORD)v342 && HIWORD(v338) > (unsigned __int16)v338)
    {
      while (1)
      {
        v176 = v175;
        v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 120))(a3, a4, v175, &v342);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
        if (!(_WORD)v342)
          goto LABEL_416;
        v118 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 168))(a3, a4);
        if ((v118 & 0x80000000) != 0)
          goto LABEL_272;
        v175 = v342;
        if (!(_WORD)v342 || HIWORD(v338) <= (unsigned __int16)v338)
          goto LABEL_416;
      }
    }
    v176 = v342;
LABEL_416:
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v32 + 80))(a3, a4, v176, &v342);
    if ((v118 & 0x80000000) != 0)
      break;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 1, 1, (char *)&v338 + 2, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 0, 1, (char *)&v331 + 4, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)v32 + 160))(a3, a4, (unsigned __int16)v342, 7, 1, &v321, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v177 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)v32 + 160);
    v178 = (unsigned __int16)v342;
    v179 = cstdlib_strlen(v322);
    v118 = v177(a3, a4, v178, 9, (unsigned __int16)(v179 + 1), v322, (char *)&v339 + 2);
    if ((v118 & 0x80000000) != 0)
      break;
    v159 = v298 + 1;
    v298 = cstdlib_strchr(v298 + 1, 32);
    if (v304)
      v300 = cstdlib_strchr(v304, 32);
    if (v301)
      v299 = cstdlib_strchr(v301, 32);
    if (!v298)
      goto LABEL_426;
  }
LABEL_272:
  v9 = v118;
LABEL_495:
  v58 = 0;
  v57 = 0;
LABEL_277:
  if (v314)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v314);
LABEL_96:
  if (v343)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v343);
  if (v58)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v58);
  if (v57)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v57);
  return v9;
}

char *fe_oneword_ResetCarryOverSentenceParams(uint64_t a1)
{
  const char *v2;
  char *result;

  v2 = *(const char **)(a1 + 2256);
  if (v2 && cstdlib_strlen(v2))
    cstdlib_strcpy(*(char **)(a1 + 2256), "");
  result = *(char **)(a1 + 2264);
  if (result)
  {
    result = (char *)cstdlib_strlen(result);
    if (result)
      return cstdlib_strcpy(*(char **)(a1 + 2264), "");
  }
  return result;
}

uint64_t hlp_LoadDTData(uint64_t a1)
{
  uint64_t Str;
  const char *v3;
  char *v4;
  char *v5;
  const char *v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  __int32 v60;
  char v61;
  char *__s;
  char *v63;
  char *__s2;
  _BYTE __c[11];
  uint64_t v66;
  char __dst[256];
  _OWORD v68[16];
  char __s1[16];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  *(_OWORD *)__s1 = 0u;
  v70 = 0u;
  memset(v68, 0, sizeof(v68));
  *(_QWORD *)&__c[3] = 0;
  v66 = 0;
  __c[0] = 0;
  v63 = 0;
  __s2 = 0;
  __s = 0;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "dtlhp2lhtts", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  *(_DWORD *)(a1 + 576) = *(_WORD *)&__c[1] != 0;
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "dtcharsetutf8", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  v3 = *(_WORD *)&__c[1] ? **(const char ***)&__c[3] : "";
  cstdlib_strcpy((char *)(a1 + 584), v3);
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "phonlhp2lhtts", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  *(_DWORD *)(a1 + 580) = *(_WORD *)&__c[1] == 0;
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "extramaintrans", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  *(_DWORD *)(a1 + 852) = *(_WORD *)&__c[1]
                       || cstdlib_strstr("eng,ena,enu,dun,frc,frf,ged,iti,ptb,ptp,sws,spe,spm", *(const char **)(a1 + 1208));
  *(_DWORD *)(a1 + 1204) = (paramc_ParamGet(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"mlset", &__s, 0) & 0x80000000) == 0
                        && cstdlib_strlen(__s) >= 4
                        && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extclccfg", &v66) & 0x80000000) != 0;
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "lidenx", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  *(_DWORD *)(a1 + 928) = *(_WORD *)&__c[1] != 0;
  *(_DWORD *)(a1 + 932) = 0;
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "lidenxchars", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (*(_WORD *)&__c[1])
  {
    v4 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v4)
      *v4 = 0;
    v5 = (char *)(a1 + 944);
    v6 = **(const char ***)&__c[3];
  }
  else
  {
    v5 = (char *)(a1 + 944);
    v6 = "";
  }
  cstdlib_strcpy(v5, v6);
  *(_WORD *)&__c[1] = -1;
  Str = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "dpsmultitrans", &__c[3], &__c[1], __c);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (*(_WORD *)&__c[1])
  {
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    v8 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)(a1 + 1200) = v8;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fecfg", &v63);
  if ((Str & 0x80000000) != 0)
    return Str;
  __s1[0] = 0;
  cstdlib_strcat(__s1, "dt/");
  cstdlib_strcat(__s1, __s2);
  cstdlib_strcat(__s1, "/");
  cstdlib_strcat(__s1, v63);
  v9 = brokeraux_ComposeBrokerString(*(_QWORD *)a1, __s1, 0, 1, __s2, 0, 0, (char *)v68, 0x100uLL);
  if (v9 < 0)
    return v9 | 0x89B02000;
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 2, (const char *)v68, "DETR", 1031, (uint64_t *)&v59) & 0x80000000) != 0)return 0;
  while (2)
  {
    if ((ssftriff_reader_OpenChunk((uint64_t)v59, &v60, (unsigned int *)&v57, &v58, v10, v11, v12, v13) & 0x80000000) != 0)
      return ssftriff_reader_ObjClose(v59, v14, v15, v16, v17, v18, v19, v20);
    v56 = 256;
    Str = ssftriff_reader_ReadStringZ((uint64_t)v59, v58, v57, 0, __dst, &v56);
    if ((Str & 0x80000000) != 0)
      return Str;
    v21 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 24);
    if (!v21)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v23, v24, v25, v26, v55);
      return 2310021130;
    }
    v27 = (_QWORD **)v21;
    Str = ssftriff_reader_DetachChunkData((uint64_t)v59, (void **)v27, v27 + 1, v22, v23, v24, v25, v26);
    if ((Str & 0x80000000) != 0)
      return Str;
    v28 = v56;
    if ((v56 & 3) != 0)
    {
      v28 = v56 - (v56 | 0xFFFFFFFC);
      v56 = v28;
    }
    PNEW_LexDT_Con(a1 + 888, a1 + 888, 0, (_QWORD *)((char *)v27[1] + v28), 0, (uint64_t *)v27 + 2);
    v30 = LH_ERROR_to_VERROR(v29);
    if ((v30 & 0x80000000) != 0)
    {
      v49 = v30;
      ssftriff_reader_ReleaseChunkData(*v27, v31, v32, v33, v34, v35, v36, v37);
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v27);
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v51, v52, v53, v54, v55);
    }
    else
    {
      v38 = __dst;
      do
      {
        v39 = cstdlib_strchr(v38, 44);
        v40 = v39;
        if (v39)
          *v39 = 0;
        v41 = ssftmap_Insert(*(_QWORD *)(a1 + 568), (uint64_t)v38, (uint64_t)v27);
        if ((v41 & 0x80000000) != 0)
        {
          v49 = v41;
          ssftriff_reader_ReleaseChunkData(*v27, v42, v43, v44, v45, v46, v47, v48);
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v27);
          return v49;
        }
        v38 = v40 + 1;
      }
      while (v40);
      v49 = ssftriff_reader_CloseChunk((uint64_t)v59);
      if ((v49 & 0x80000000) == 0)
        continue;
    }
    break;
  }
  return v49;
}

uint64_t hlp_GenXtraMainVarMW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  unsigned int v9;
  uint64_t v10;
  char *v17;
  unsigned __int16 v18;
  uint64_t v19;
  char __dst[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = a4;
  if (a5 >= a6)
    return 0;
  v9 = a6 - a5;
  if ((int)(a6 - a5) > 127)
    return 0;
  cstdlib_strncpy(__dst, (const char *)(a7 + a5), a6 - a5);
  v17 = &__dst[v9];
  *v17 = 0;
  if (oneword_CountOrthographicWords(__dst, (int)v17, 0x23u, 0x23u) < 2)
    return hlp_GenXtraMainVar(a1, a2, a3, a4, a5, a6, a7, &v18);
  oneword_ReplaceAllCharactersInOrthography(__dst, (int)v17, 0x23u, 32);
  v10 = 0;
  v19 = 0;
  do
  {
    oneword_FindNextWord((size_t)__dst, 5u, v9, (unsigned int *)&v19 + 1, (unsigned int *)&v19);
    if (HIDWORD(v19) < v9)
    {
      v10 = hlp_GenXtraMainVar(a1, a2, a3, v18, (unsigned __int16)(WORD2(v19) + a5), (unsigned __int16)(v19 + a5), a7, &v18);
      if ((v10 & 0x80000000) != 0)
        break;
    }
    HIDWORD(v19) = v19;
  }
  while (v19 < v9);
  return v10;
}

BOOL hlp_checkDoClmForForeignLanguage(uint64_t a1, const char *a2)
{
  char *v4;
  int Str;
  char *__s1;
  char __dst[10];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  __s1 = 0;
  cstdlib_strcpy(__dst, "clm");
  cstdlib_strcat(__dst, a2);
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)__dst, &__s1) & 0x80000000) != 0
    || (v4 = __s1) == 0)
  {
    __s1 = 0;
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"noclmset", &__s1);
    v4 = __s1;
    if (Str < 0 || !__s1)
    {
      if (!__s1)
        return 1;
    }
    else
    {
      if (cstdlib_strstr(__s1, a2))
        v4 = "no";
      else
        v4 = "yes";
      __s1 = v4;
    }
  }
  return cstdlib_strcmp(v4, "yes") == 0;
}

uint64_t fe_oneword_TreatNLUMarkup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  unsigned __int16 v41;
  uint64_t v42;
  BOOL v43;
  uint64_t *v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  int v49;
  char *v50;
  int v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  char *v64;
  char *v65;
  int v66;
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  size_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  unsigned int v82;
  char *v83;
  char *v84;
  int v85;
  char *v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  unsigned __int16 v94;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v97;
  __int16 v98;
  __int16 v99;
  unsigned __int16 v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  unsigned int v109;
  unsigned int v110;
  char *v111;
  char *v112;
  int v113;
  char *v114;
  int v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  char *v133;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned __int16 v139;
  char *v140;
  int v141;
  uint64_t v142;
  char *__s;
  uint64_t v144;
  int v145;
  int v146;
  size_t __n;
  int v148;

  v148 = 0;
  __n = 0;
  v145 = 0;
  __s = 0;
  v144 = 0;
  v142 = 0;
  v141 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v148 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 184))(a2, a3, HIWORD(v148), 0, &v141) & 0x80000000) == 0&& (unsigned __int16)v141 == 1)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, HIWORD(v148), 0, &v144, (char *)&__n + 4);
    if ((v6 & 0x80000000) == 0 && WORD2(__n) >= 2u)
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, HIWORD(v148), 1, &v142, (char *)&v141 + 2);
      if ((v7 & 0x80000000) != 0)
        return v7;
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v148), &v148);
      if ((v6 & 0x80000000) == 0)
      {
        v146 = 0;
        LOWORD(v8) = v148;
        if ((_WORD)v148)
        {
          v9 = 0;
          v10 = 0;
          v136 = 0;
          v11 = 0;
          while (1)
          {
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v8, 0, 1, &v145, (char *)&__n + 4);
            if ((v12 & 0x80000000) != 0)
              break;
            if ((v145 - 9) >= 6 && v145 != 4)
              goto LABEL_82;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v148, 1, 1, (char *)&v146 + 2, (char *)&__n + 4);
            if ((v12 & 0x80000000) != 0)
              break;
            v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v148, 2, 1, &v146, (char *)&__n + 4);
            if ((v12 & 0x80000000) != 0)
              break;
            v14 = v11;
            if (v9 >= HIWORD(v141))
            {
LABEL_25:
              v18 = *(_DWORD *)(v142 + 16);
            }
            else
            {
              v15 = *(_DWORD *)(v142 + 12);
              v16 = (_DWORD *)(v142 + 32 * v9);
              v17 = HIWORD(v141) - (unint64_t)v9;
              while (1)
              {
                v18 = v16[3] - v15;
                v19 = (unsigned __int16)(*((_WORD *)v16 + 6) - v15);
                if (*v16 == 1 && v19 >= (unsigned __int16)v146)
                  break;
                v16 += 8;
                if (!--v17)
                  goto LABEL_25;
              }
              v36 = *((_WORD *)v16 + 6) == (_WORD)v15 || (_DWORD)v19 == *(_DWORD *)(v142 + 16);
              if (!v36 && *(_BYTE *)(v144 + v19) != 32)
              {
                LODWORD(v140) = v19 - 1;
                utf8_GetPreviousValidUtf8Offset(v144, (unsigned int *)&v140);
                v37 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v144 + v19));
                v38 = (int)v140;
                v39 = *(unsigned __int8 *)(v144 + v140);
                if (v39 != 95 && v39 != 32)
                  v38 = v37 + v18;
                v18 = v38;
              }
            }
            LOWORD(__n) = 0;
            v21 = *(const char **)(a1 + 2264);
            if (v21 && *v21)
            {
              v22 = cstdlib_strlen(v21);
              LOWORD(__n) = v22 + __n + 1;
              v23 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v14, (unsigned __int16)__n);
              if (!v23)
                goto LABEL_290;
              v28 = v23;
              cstdlib_strcpy(v23, *(const char **)(a1 + 2264));
              cstdlib_strcpy(*(char **)(a1 + 2264), "");
              v14 = (char *)v28;
            }
            else
            {
              v28 = 0;
            }
            v29 = HIWORD(v141);
            v138 = v10;
            if (v9 < HIWORD(v141))
            {
              v30 = 32 * v9;
              v9 = v9;
              while (v18 << 16 > (*(_DWORD *)(v142 + v30 + 12) - *(_DWORD *)(v142 + 12)) << 16)
              {
                if (*(_DWORD *)(v142 + v30) == 51)
                {
                  v31 = cstdlib_strlen(*(const char **)(v142 + v30 + 24));
                  LOWORD(__n) = v31 + __n + 1;
                  v32 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v14, (unsigned __int16)__n);
                  if (!v32)
                  {
                    v62 = (char *)v136;
LABEL_284:
                    v10 = v138;
                    goto LABEL_291;
                  }
                  v33 = v32;
                  if (v28)
                  {
                    v34 = v142;
                    v35 = *(_DWORD *)(v142 + v30 + 12) + 1 == *(_DWORD *)(v142 + 16) + *(_DWORD *)(v142 + 12);
                  }
                  else
                  {
                    cstdlib_strcpy(v32, "");
                    v35 = 0;
                    v34 = v142;
                  }
                  hlp_NLUStrOverride(v33, *(char **)(v34 + v30 + 24), v35);
                  v29 = HIWORD(v141);
                  v14 = v33;
                  v28 = v33;
                }
                else
                {
                  v33 = (char *)v28;
                }
                ++v9;
                v30 += 32;
                if (v9 >= v29)
                  goto LABEL_53;
              }
              v33 = (char *)v28;
LABEL_53:
              v9 = (unsigned __int16)v9;
              v28 = v33;
              v10 = v138;
            }
            if (!v28)
            {
              v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v148, 0, 1, &v145, (char *)&__n + 4);
              if ((v42 & 0x80000000) == 0)
              {
                v43 = (v145 - 9) < 6 || v145 == 4;
                v11 = v14;
                if (v43 && cstdlib_strcmp(*(const char **)(a1 + 2256), ""))
                {
                  v44 = *(uint64_t **)(*(_QWORD *)a1 + 8);
                  v45 = cstdlib_strlen(*(const char **)(a1 + 2256));
                  v46 = (char *)heap_Realloc(v44, v10, (v45 + 1));
                  if (!v46)
                    goto LABEL_290;
                  v47 = v46;
                  cstdlib_strcpy(v46, *(const char **)(a1 + 2256));
                  __s = v47;
                  v48 = v47;
                  do
                  {
                    if ((*v48 | 0x20) != 0x69)
                      goto LABEL_78;
                    if (v48[1] != 95)
                      goto LABEL_78;
                    LOWORD(__n) = (unsigned __int16)hlp_NLUStrLength(v48);
                    v48 = __s;
                    if (v47 >= __s)
                      goto LABEL_78;
                    v49 = 0;
                    v50 = v47;
                    do
                    {
                      if (*v50)
                      {
                        if (v50[1] == 95)
                        {
                          v51 = (unsigned __int16)__n;
                          if (v51 == hlp_NLUStrLength(v50)
                            && !cstdlib_strncmp(__s + 2, v50 + 2, (unsigned __int16)__n - 2))
                          {
                            v49 = 1;
                          }
                        }
                      }
                      v50 = hlp_NLUStrNext(v50);
                      v48 = __s;
                    }
                    while (v50 < __s);
                    if (v49)
                      v48 = hlp_NLUStrStrip(__s);
                    else
LABEL_78:
                      v48 = hlp_NLUStrNext(v48);
                    __s = v48;
                  }
                  while (v48);
                  hlp_NLUStrJoin(v47, "");
                  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                  v53 = (unsigned __int16)v148;
                  v54 = cstdlib_strlen(v47);
                  v55 = v52(a2, a3, v53, 14, (unsigned __int16)(v54 + 1), v47, (char *)&__n + 2);
                  if ((v55 & 0x80000000) != 0)
                  {
                    v6 = v55;
                    v10 = (uint64_t)v47;
                    goto LABEL_282;
                  }
                  v10 = (uint64_t)v47;
                }
LABEL_82:
                v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v148, &v148);
                if ((v6 & 0x80000000) != 0)
                  goto LABEL_282;
                v8 = (unsigned __int16)v148;
                v14 = v11;
                goto LABEL_262;
              }
              v6 = v42;
              v127 = v136;
LABEL_277:
              v11 = v14;
              goto LABEL_292;
            }
            LOWORD(__n) = 2 * cstdlib_strlen(v28) + 2;
            if (cstdlib_strcmp(*(const char **)(a1 + 2256), ""))
            {
              v40 = cstdlib_strlen(*(const char **)(a1 + 2256));
              v41 = v40 + __n + 1;
              LOWORD(__n) = v41;
            }
            else
            {
              v41 = __n;
            }
            v56 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v14, v41);
            if (!v56)
            {
LABEL_290:
              v62 = (char *)v136;
LABEL_291:
              v6 = 2310021130;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v24, v25, v26, v27, v135);
              v11 = v14;
              v127 = (uint64_t)v62;
              goto LABEL_292;
            }
            v14 = (char *)v56;
            v135 = v9;
            v57 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v136, (unsigned __int16)__n);
            if (!v57)
            {
              v6 = 2310021130;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v58, v59, v60, v61, v9);
              v127 = v136;
              goto LABEL_293;
            }
            v62 = (char *)v57;
            v63 = (unsigned __int16)v18;
            __s = v14;
            v64 = v14;
            do
            {
              if ((*v64 | 0x20) == 0x72 && v64[1] == 95)
              {
                cstdlib_strcpy(v62, *(const char **)(a1 + 2256));
                LOWORD(__n) = (unsigned __int16)hlp_NLUStrKeyLen(__s);
                if (v14 < __s)
                {
                  v65 = v14;
                  do
                  {
                    v66 = (unsigned __int16)__n;
                    if (v66 == hlp_NLUStrKeyLen(v65)
                      && !cstdlib_strncmp(__s + 2, v65 + 2, (unsigned __int16)__n - 2))
                    {
                      v67 = *v65;
                      if (v67 > 0x64)
                      {
                        if (v67 == 101)
                        {
LABEL_105:
                          if (v65[1] == 95)
                            hlp_NLUStrRemoveI(v62, v65);
                          goto LABEL_94;
                        }
                        if (v67 == 115)
                        {
LABEL_102:
                          if (v65[1] == 95)
                            hlp_NLUStrAddI(v62, v65);
                        }
                      }
                      else
                      {
                        if (v67 == 69)
                          goto LABEL_105;
                        if (v67 == 83)
                          goto LABEL_102;
                      }
                    }
LABEL_94:
                    v65 = hlp_NLUStrNext(v65);
                  }
                  while (v65 < __s);
                }
                v68 = v62;
                do
                {
                  if (*v68)
                    *v68 = 69;
                  v68 = hlp_NLUStrNext(v68);
                }
                while (v68);
                LOWORD(__n) = cstdlib_strlen(v62);
                v69 = __s;
                v70 = &__s[(unsigned __int16)__n + 1];
                v71 = cstdlib_strlen(__s);
                cstdlib_memmove(v70, v69, v71 + 1);
                cstdlib_strncpy(__s, v62, (unsigned __int16)__n);
                cstdlib_strncpy(&__s[(unsigned __int16)__n], ";", 1uLL);
                __s += (unsigned __int16)__n + 1;
                v64 = hlp_NLUStrStrip(__s);
              }
              else
              {
                v64 = hlp_NLUStrNext(v64);
              }
              __s = v64;
            }
            while (v64);
            __s = v14;
            v72 = v14;
            while (2)
            {
              if ((*v72 | 0x20) == 0x65 && v72[1] == 95)
              {
                v73 = hlp_NLUStrNext(v72);
                LOWORD(__n) = (unsigned __int16)hlp_NLUStrLength(__s);
                if (v73)
                {
                  while (1)
                  {
                    if ((*v73 | 0x20) == 0x73 && v73[1] == 95)
                    {
                      v74 = (unsigned __int16)__n;
                      if (v74 == hlp_NLUStrLength(v73)
                        && !cstdlib_strncmp(__s + 2, v73 + 2, (unsigned __int16)__n - 2))
                      {
                        break;
                      }
                    }
                    v73 = hlp_NLUStrNext(v73);
                    if (!v73)
                      goto LABEL_123;
                  }
                  hlp_NLUStrStrip(v73);
                  v72 = hlp_NLUStrStrip(__s);
                  goto LABEL_125;
                }
LABEL_123:
                v72 = __s;
              }
              v72 = hlp_NLUStrNext(v72);
LABEL_125:
              __s = v72;
              if (v72)
                continue;
              break;
            }
            __s = v14;
            v75 = v14;
LABEL_128:
            while (2)
            {
              if ((*v75 | 0x20) != 0x73 || v75[1] != 95)
                goto LABEL_145;
              v76 = hlp_NLUStrNext(v75);
              LOWORD(__n) = (unsigned __int16)hlp_NLUStrLength(__s);
              if (v76)
              {
                v77 = 0;
                do
                {
                  if (v77)
                  {
                    v78 = *v76;
                    if ((v78 | 0x20) != 0x65)
                      goto LABEL_138;
                    if (v76[1] == 95)
                    {
                      v79 = (unsigned __int16)__n;
                      if (v79 == hlp_NLUStrLength(v76)
                        && !cstdlib_strncmp(__s + 2, v76 + 2, (unsigned __int16)__n - 2))
                      {
                        hlp_NLUStrStrip(v76);
                        hlp_NLUStrStrip(__s);
                        v75 = __s;
                        if (!__s)
                          goto LABEL_148;
                        goto LABEL_128;
                      }
                    }
                  }
                  v78 = *v76;
LABEL_138:
                  if (v78)
                  {
                    if (v76[1] == 95)
                    {
                      v80 = (unsigned __int16)__n;
                      if (v80 == hlp_NLUStrLength(v76)
                        && !cstdlib_strncmp(__s + 2, v76 + 2, (unsigned __int16)__n - 2))
                      {
                        v77 = 1;
                      }
                    }
                  }
                  v76 = hlp_NLUStrNext(v76);
                }
                while (v76);
              }
              v75 = __s;
LABEL_145:
              v75 = hlp_NLUStrNext(v75);
              __s = v75;
              if (v75)
                continue;
              break;
            }
LABEL_148:
            __s = v14;
            v81 = v14;
            while (2)
            {
              if ((*v81 | 0x20) != 0x65
                || v81[1] != 95
                || (v82 = hlp_NLUStrSearchI(*(char **)(a1 + 2256), v81), v81 = __s, v82))
              {
                v83 = v81;
                goto LABEL_153;
              }
              LOWORD(__n) = (unsigned __int16)hlp_NLUStrLength(__s);
              v83 = __s;
              if (v14 >= __s)
                goto LABEL_165;
              v85 = 0;
              v86 = v14;
              do
              {
                if ((*v86 | 0x20) == 0x73 && v86[1] == 95)
                {
                  v87 = (unsigned __int16)__n;
                  if (v87 == hlp_NLUStrLength(v86)
                    && !cstdlib_strncmp(__s + 2, v86 + 2, (unsigned __int16)__n - 2))
                  {
                    v85 = 1;
                  }
                }
                v86 = hlp_NLUStrNext(v86);
                v83 = __s;
              }
              while (v86 < __s);
              if (v85)
LABEL_153:
                v84 = hlp_NLUStrNext(v83);
              else
LABEL_165:
                v84 = hlp_NLUStrStrip(v83);
              v81 = v84;
              __s = v84;
              if (v84)
                continue;
              break;
            }
            hlp_NLUStrJoin(v14, "");
            HIWORD(__n) = v148;
            v137 = HIWORD(v146);
            v88 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 120))(a2, a3);
            v6 = v88;
            if ((v88 & 0x80000000) != 0)
              goto LABEL_280;
            if (HIWORD(__n))
            {
              v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a2, a3);
              if ((v6 & 0x80000000) != 0)
                goto LABEL_280;
              v89 = HIWORD(__n);
              if (HIWORD(__n))
              {
                v90 = HIWORD(v146);
                v91 = v137;
                while (1)
                {
                  if (v90 >= v63)
                    goto LABEL_186;
                  v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v89, 0, 1, &v145, (char *)&__n + 4);
                  if ((v92 & 0x80000000) != 0)
                    break;
                  if ((v145 - 9) < 6 || v145 == 4)
                    v91 = HIWORD(v146);
                  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 56) + 120))(a2, a3, HIWORD(__n), (char *)&__n + 6);
                  if ((v6 & 0x80000000) != 0)
                    goto LABEL_280;
                  if (!HIWORD(__n))
                  {
                    v89 = 0;
                    goto LABEL_186;
                  }
                  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a2, a3);
                  if ((v6 & 0x80000000) != 0)
                    goto LABEL_280;
                  v89 = HIWORD(__n);
                  if (!HIWORD(__n))
                    goto LABEL_186;
                  v90 = HIWORD(v146);
                }
LABEL_279:
                v6 = v92;
LABEL_280:
                v11 = v14;
                v127 = (uint64_t)v62;
                v10 = v138;
LABEL_292:
                v14 = v11;
                if (v11)
LABEL_293:
                  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v14);
                if (v127)
                  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v127);
                if (v10)
                  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
                return v6;
              }
            }
            else
            {
              v89 = 0;
            }
            v91 = v137;
LABEL_186:
            v8 = (unsigned __int16)v148;
            if ((_WORD)v148 && (unsigned __int16)v148 != v89)
            {
              v94 = 0;
              while (1)
              {
                v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v8, 0, 1, &v145, (char *)&__n + 4);
                if ((v92 & 0x80000000) != 0)
                  goto LABEL_279;
                if ((v145 - 9) < 6 || v145 == 4)
                  break;
LABEL_258:
                v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 120))(a2, a3);
                if ((v6 & 0x80000000) != 0)
                  goto LABEL_280;
                v8 = (unsigned __int16)v148;
                if (!(_WORD)v148 || (unsigned __int16)v148 == HIWORD(__n))
                  goto LABEL_261;
              }
              if (v94)
              {
                v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, size_t *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v94, 1, 1, &__n, (char *)&__n + 4);
                if ((v92 & 0x80000000) != 0)
                  goto LABEL_279;
              }
              v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v148, 1, 1, (char *)&v146 + 2, (char *)&__n + 4);
              if ((v92 & 0x80000000) != 0)
                goto LABEL_279;
              v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v148, 2, 1, &v146, (char *)&__n + 4);
              if ((v92 & 0x80000000) != 0)
                goto LABEL_279;
              if (v94 && (unsigned __int16)__n == HIWORD(v146))
              {
                v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v94, 14, &__s, (char *)&__n + 4);
                if ((v92 & 0x80000000) != 0)
                  goto LABEL_279;
                v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                v97 = (unsigned __int16)v148;
                v98 = cstdlib_strlen(__s);
                v92 = v96(a2, a3, v97, 14, (unsigned __int16)(v98 + 1), __s, (char *)&__n + 2);
                if ((v92 & 0x80000000) != 0)
                  goto LABEL_279;
LABEL_257:
                v94 = v148;
                goto LABEL_258;
              }
              LOWORD(__n) = cstdlib_strlen(v14) + 1;
              if (cstdlib_strcmp(*(const char **)(a1 + 2256), ""))
              {
                v99 = cstdlib_strlen(*(const char **)(a1 + 2256));
                v100 = v99 + __n + 1;
                LOWORD(__n) = v100;
              }
              else
              {
                v100 = __n;
              }
              v101 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 2256), v100);
              if (!v101)
                goto LABEL_284;
              *(_QWORD *)(a1 + 2256) = v101;
              v102 = *(uint64_t **)(*(_QWORD *)a1 + 8);
              v103 = (unsigned __int16)__n;
              v104 = v103 + cstdlib_strlen(v14) + 1;
              v10 = v138;
              v105 = (char *)heap_Realloc(v102, v138, v104);
              if (!v105)
                goto LABEL_291;
              v106 = v105;
              v107 = cstdlib_strcpy(v105, v14);
              if (v107)
              {
                v108 = v107;
                do
                {
                  v109 = *v108;
                  if (v109 > 0x64)
                  {
                    if (v109 != 101)
                    {
                      if (v109 != 115)
                        goto LABEL_228;
LABEL_217:
                      if (v108[1] != 95)
                        goto LABEL_228;
                      v110 = hlp_NLUStrSearchI(*(char **)(a1 + 2256), v108);
                      if (HIWORD(v146) == v137)
                        hlp_NLUStrAddI(*(char **)(a1 + 2256), v108);
                      if (!v110)
                        goto LABEL_228;
                      goto LABEL_227;
                    }
                  }
                  else if (v109 != 69)
                  {
                    if (v109 != 83)
                      goto LABEL_228;
                    goto LABEL_217;
                  }
                  if (v108[1] != 95)
                    goto LABEL_228;
                  if (HIWORD(v146) == v91)
                    hlp_NLUStrRemoveI(*(const char **)(a1 + 2256), v108);
                  if (!hlp_NLUStrSearchI(*(char **)(a1 + 2256), v108))
                  {
LABEL_228:
                    v111 = hlp_NLUStrNext(v108);
                    goto LABEL_229;
                  }
LABEL_227:
                  v111 = hlp_NLUStrStrip(v108);
LABEL_229:
                  v108 = v111;
                }
                while (v111);
              }
              hlp_NLUStrJoin(v106, *(const char **)(a1 + 2256));
              __s = v106;
              v112 = v106;
              do
              {
                if ((*v112 | 0x20) != 0x69)
                  goto LABEL_243;
                if (v112[1] != 95)
                  goto LABEL_243;
                LOWORD(__n) = (unsigned __int16)hlp_NLUStrLength(v112);
                v112 = __s;
                if (v106 >= __s)
                  goto LABEL_243;
                v113 = 0;
                v114 = v106;
                do
                {
                  if (*v114)
                  {
                    if (v114[1] == 95)
                    {
                      v115 = (unsigned __int16)__n;
                      if (v115 == hlp_NLUStrLength(v114)
                        && !cstdlib_strncmp(__s + 2, v114 + 2, (unsigned __int16)__n - 2))
                      {
                        v113 = 1;
                      }
                    }
                  }
                  v114 = hlp_NLUStrNext(v114);
                  v112 = __s;
                }
                while (v114 < __s);
                if (v113)
                  v112 = hlp_NLUStrStrip(__s);
                else
LABEL_243:
                  v112 = hlp_NLUStrNext(v112);
                __s = v112;
              }
              while (v112);
              hlp_NLUStrJoin(v106, "");
              if (HIWORD(v146) == v91)
              {
                v140 = 0;
                v139 = 0;
                v116 = hlp_NLUStrFind(v106, "PUNC", &v140, &v139);
                if (!v116)
                  goto LABEL_255;
                v117 = v116;
                if (!cstdlib_strstr(v116, ":DASH"))
                  goto LABEL_255;
LABEL_253:
                if (*(_BYTE *)((unsigned __int16)v146 + v144 - 1) != 44)
LABEL_254:
                  hlp_NLUStrStrip(v117);
LABEL_255:
                v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(*(_QWORD *)(a1 + 56) + 160);
                v121 = (unsigned __int16)v148;
                v122 = cstdlib_strlen(v106);
                v123 = v120(a2, a3, v121, 14, (unsigned __int16)(v122 + 1), v106, (char *)&__n + 2);
                if ((v123 & 0x80000000) != 0)
                {
                  v6 = v123;
                  v127 = (uint64_t)v62;
LABEL_276:
                  v10 = (uint64_t)v106;
                  goto LABEL_277;
                }
                v138 = (uint64_t)v106;
                goto LABEL_257;
              }
              v140 = 0;
              v139 = 0;
              v118 = hlp_NLUStrFind(v106, "BND", &v140, &v139);
              if (v118)
                hlp_NLUStrStrip(v118);
              v119 = hlp_NLUStrFind(v106, "PUNC", &v140, &v139);
              if (!v119)
                goto LABEL_255;
              v117 = v119;
              if (cstdlib_strstr(v119, ":DASH"))
                goto LABEL_253;
              goto LABEL_254;
            }
LABEL_261:
            v136 = (uint64_t)v62;
            v9 = v135;
            v10 = v138;
LABEL_262:
            v11 = v14;
            if (!v8)
              goto LABEL_267;
          }
          v6 = v12;
        }
        else
        {
          v14 = 0;
          v136 = 0;
          v10 = 0;
          LODWORD(v9) = 0;
LABEL_267:
          v124 = HIWORD(v141);
          if (v9 < HIWORD(v141))
          {
            v106 = (char *)v10;
            v125 = v9;
            v126 = 32 * v9;
            v127 = v136;
            while (1)
            {
              v128 = v142;
              if (*(_DWORD *)(v142 + v126) == 51)
              {
                v129 = *(uint64_t **)(*(_QWORD *)a1 + 8);
                v130 = *(_QWORD *)(a1 + 2264);
                if (v130)
                {
                  v131 = cstdlib_strlen(*(const char **)(a1 + 2264));
                  v128 = v142;
                }
                else
                {
                  v131 = 0;
                }
                v132 = cstdlib_strlen(*(const char **)(v128 + v126 + 24));
                v133 = (char *)heap_Realloc(v129, v130, (v131 + v132 + 2));
                if (!v133)
                {
                  v62 = (char *)v136;
                  v10 = (uint64_t)v106;
                  goto LABEL_291;
                }
                *(_QWORD *)(a1 + 2264) = v133;
                hlp_NLUStrOverride(v133, *(char **)(v142 + v126 + 24), 0);
                v124 = HIWORD(v141);
              }
              ++v125;
              v126 += 32;
              if (v125 >= v124)
                goto LABEL_276;
            }
          }
          v11 = v14;
        }
LABEL_282:
        v127 = v136;
        goto LABEL_292;
      }
    }
  }
  return v6;
}

uint64_t fe_oneword_ProcessPinyinMarkup(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  __int16 ChineseUTFCharNum;
  __int16 v48;
  unsigned __int16 v49;
  uint64_t v50;
  int v51;
  unsigned __int16 v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  size_t v58;
  unsigned int v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, __int16 *);
  uint64_t *v63;
  unsigned __int16 *v64;
  void *__src;
  unsigned __int16 v66;
  int v67;
  _QWORD **v68;
  char *__s;
  const char *v70;
  int v71;
  int v72;
  __int16 v73;
  int v74;

  v67 = 0;
  v66 = 0;
  __src = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v67 + 2);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[7] + 176))(a2, a3, HIWORD(v67), 1, &__src, &v66);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v66;
    if (v66)
    {
      v9 = 0;
      LOWORD(v10) = 0;
      v11 = 0;
      v12 = (char *)__src + 12;
      do
      {
        v13 = *(v12 - 3);
        if (v13 == 99)
        {
          *v12 -= v11;
          v9 = 1;
        }
        else if (v13 == 0x4000)
        {
          v11 = (unsigned __int16)*v12;
          v10 = v12[1] + *v12;
        }
        v12 += 8;
        --v8;
      }
      while (v8);
    }
    else
    {
      v11 = 0;
      LOWORD(v10) = 0;
      v9 = 0;
    }
    if (cstdlib_strlen((const char *)a1[285]) || v9)
    {
      v14 = (void *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 32 * v66);
      if (v14)
      {
        v19 = (uint64_t)v14;
        cstdlib_memcpy(v14, __src, 32 * v66);
        v20 = cstdlib_strlen((const char *)a1[285]);
        v21 = v66;
        if (v20)
        {
          ++v66;
          v22 = heap_Realloc(*(uint64_t **)(*a1 + 8), v19, 32 * (unsigned __int16)(v21 + 1));
          if (!v22)
          {
            v7 = 2310021130;
            log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v23, v24, v25, v26, v60);
            goto LABEL_82;
          }
          v27 = v22;
          v21 = v66;
          if (v66)
          {
            v28 = 0;
            v29 = 32 * v66;
            v30 = 1;
            while (1)
            {
              if (v28)
              {
                if (*(_DWORD *)(v22 + v28) == 1 && v30 < v66)
                  break;
              }
              ++v30;
              v28 += 32;
              if (v29 == v28)
                goto LABEL_30;
            }
            v32 = v22 + v28;
            cstdlib_memmove((void *)(v22 + v28 + 32), (const void *)(v22 + v28), v29 - v28 - 32);
            *(_DWORD *)v32 = 99;
            *(_QWORD *)(v32 + 12) = (*(_DWORD *)(v32 + 44) - v11);
            v21 = v66;
          }
LABEL_30:
          v19 = v27;
        }
        if (*((_DWORD *)a1 + 499))
        {
          v33 = HIWORD(v67);
          v74 = 0;
          v73 = 0;
          v71 = 0;
          v72 = 0;
          __s = 0;
          v70 = 0;
          v68 = 0;
          v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v67), 0, &__s, &v74);
          if ((v34 & 0x80000000) != 0)
          {
            v7 = v34;
            v41 = 0;
          }
          else
          {
            v35 = *(_QWORD **)(*a1 + 8);
            v36 = cstdlib_strlen(__s);
            v41 = (char *)heap_Calloc(v35, 1, v36 + 1);
            v42 = *a1;
            if (v41)
            {
              v43 = ssftstring_ObjOpen(*(_QWORD **)(v42 + 8), &v68);
              if ((v43 & 0x80000000) == 0)
              {
                v43 = ssftstring_Reserve((uint64_t)v68, 30);
                if ((v43 & 0x80000000) == 0)
                {
                  if ((_DWORD)v21)
                  {
                    v44 = 0;
                    do
                    {
                      if (*(_DWORD *)(v19 + 32 * v44) == 99)
                      {
                        v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, v33, (char *)&v74 + 2);
                        if ((v43 & 0x80000000) != 0)
                          goto LABEL_62;
                        v45 = v19 + 32 * v44;
                        v63 = (uint64_t *)(v45 + 24);
                        v64 = (unsigned __int16 *)(v45 + 12);
                        while (HIWORD(v74))
                        {
                          v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
                          if ((v43 & 0x80000000) == 0)
                          {
                            v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v74), 1, 1, &v71, &v74);
                            if ((v43 & 0x80000000) == 0)
                            {
                              v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v74), 2, 1, (char *)&v71 + 2, &v74);
                              if ((v43 & 0x80000000) == 0)
                              {
                                cstdlib_strncpy(v41, &__s[(unsigned __int16)v71], HIWORD(v71) - (unint64_t)(unsigned __int16)v71);
                                v41[HIWORD(v71) - (unsigned __int16)v71] = 0;
                                if (v72 != 9 && v72 != 4)
                                  goto LABEL_58;
                                if (!utf8_IsChineseLetter(v41))
                                  goto LABEL_58;
                                v46 = *v64;
                                if (v46 >= HIWORD(v71) || v46 < (unsigned __int16)v71)
                                  goto LABEL_58;
                                v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v74), 3, &v70, &v74);
                                if ((v43 & 0x80000000) != 0)
                                  goto LABEL_62;
                                ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)__s, *v64);
                                v48 = utf8_GetChineseUTFCharNum((uint64_t)__s, (unsigned __int16)v71);
                                if (*v63)
                                {
                                  v43 = hlpProcessWordPhon(a1, v70, (unsigned __int16)(ChineseUTFCharNum - v48 + 1), *v63, (uint64_t)v68);
                                  if ((v43 & 0x80000000) != 0)
                                    goto LABEL_62;
                                }
                                else
                                {
                                  v43 = hlpProcessWordPhon(a1, v70, (unsigned __int16)(ChineseUTFCharNum - v48 + 1), a1[285], (uint64_t)v68);
                                  if ((v43 & 0x80000000) != 0)
                                    goto LABEL_62;
                                  cstdlib_strcpy((char *)a1[285], "");
                                }
                                if (!ssftstring_Size((uint64_t)v68)
                                  || (v62 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, __int16 *))(a1[7] + 160),
                                      v61 = HIWORD(v74),
                                      v49 = ssftstring_Size((uint64_t)v68) + 1,
                                      v50 = ssftstring_CStr((uint64_t)v68),
                                      v43 = v62(a2, a3, v61, 3, v49, v50, &v73),
                                      (v43 & 0x80000000) == 0))
                                {
LABEL_58:
                                  v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[7] + 120))(a2, a3, HIWORD(v74), (char *)&v74 + 2);
                                  if ((v43 & 0x80000000) == 0)
                                    continue;
                                }
                              }
                            }
                          }
                          goto LABEL_62;
                        }
                      }
                      ++v44;
                    }
                    while (v44 != v21);
                  }
                  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1[7] + 160))(a2, a3, v33, 1, v21, v19, &v73);
                }
              }
LABEL_62:
              v7 = v43;
            }
            else
            {
              v7 = 2310021130;
              log_OutPublic(*(_QWORD *)(v42 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v37, v38, v39, v40, v60);
            }
          }
          if (v68)
            ssftstring_ObjClose(v68);
          if (v41)
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v41);
          if ((v7 & 0x80000000) != 0)
            goto LABEL_82;
          LODWORD(v21) = v66;
        }
        if ((_DWORD)v21)
        {
          v51 = 0;
          v52 = 0;
          do
          {
            v53 = (_DWORD *)(v19 + 32 * v52);
            if (*v53 == 99)
            {
              v54 = (v51 + 1);
              if ((unsigned __int16)v21 > v54)
                cstdlib_memmove(v53, (const void *)(v19 + 32 * v54), 32 * ((unsigned __int16)v21 - (int)v54));
              v55 = v19 + 32 * v52;
              if (*(_DWORD *)(v55 + 12) >= (unsigned __int16)v10)
              {
                v56 = (void *)a1[285];
                v57 = *(const char **)(v55 + 24);
                v58 = cstdlib_strlen(v57);
                cstdlib_memcpy(v56, v57, v58 + 1);
              }
              LOWORD(v21) = --v66;
            }
            else
            {
              ++v52;
            }
            v51 = v52;
          }
          while (v52 < (unsigned __int16)v21);
        }
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, int *))(a1[7] + 160))(a2, a3, HIWORD(v67), 1, (unsigned __int16)v21, v19, &v67);
LABEL_82:
        heap_Free(*(_QWORD **)(*a1 + 8), v19);
        return v7;
      }
      v7 = 2310021130;
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v60);
    }
  }
  return v7;
}

uint64_t fe_oneword_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = safeh_HandleCheck(a1, a2, 62340, 2288);
  if ((v3 & 0x80000000) != 0)
    return 2310021128;
  v4 = v3;
  fe_oneword_ResetCarryOverSentenceParams(a1);
  if (*(_DWORD *)(a1 + 2004))
    return oneword_posparser_End(a1);
  return v4;
}

uint64_t fe_oneword_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  if ((safeh_HandleCheck(a1, a2, 62340, 2288) & 0x80000000) != 0)
    return 2310021128;
  result = 0;
  *a3 = &fe_oneword_ResourceTypes_SZ_CONTENT_TYPES;
  return result;
}

uint64_t fe_oneword_ResourceUnload(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288) & 0x80000000) != 0)
    return 2310021128;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[10] + 248))(a1[8], a1[9], a3, a4);
}

uint64_t fe_oneword_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2310021121;
  result = 0;
  *a2 = &IFeOneword;
  return result;
}

uint64_t hlp_GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char **a6)
{
  uint64_t v7;
  char *v8;
  char **v10;
  unsigned __int8 __c;
  __int16 __c_1;

  *a6 = a5;
  __c_1 = -1;
  __c = 0;
  v10 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v7 & 0x80000000) == 0 && __c_1)
  {
    v8 = cstdlib_strchr(*v10, __c);
    if (v8)
      *v8 = 0;
    *a6 = *v10;
  }
  return v7;
}

uint64_t hlpProcessWordPhon(_QWORD *a1, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t appended;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  size_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  char **v37;
  unsigned __int8 __c;
  __int16 __c_1;

  appended = ssftstring_Clear(a5);
  if ((appended & 0x80000000) != 0)
    return appended;
  __c = 0;
  v37 = 0;
  __c_1 = -1;
  appended = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "parallel", a4, &v37, &__c_1, &__c);
  if ((appended & 0x80000000) != 0)
    return appended;
  if (!__c_1)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"[PINYIN] ERROR [lhp for tagpyt=%s not found]", v11, v12, v13, a4);
    return 7;
  }
  v14 = *v37;
  while (1)
  {
    v15 = cstdlib_strchr(v14, __c);
    if (!v15)
      break;
    *v15 = 0;
  }
  if (a3 < 2)
  {
    v16 = 0;
    goto LABEL_26;
  }
  v16 = 0;
  v17 = 1;
  while (1)
  {
    v18 = cstdlib_strstr((char *)&a2[v16], "{SEP");
    v19 = cstdlib_strchr((char *)&a2[v16], 46);
    if (v18)
      v23 = v19 == 0;
    else
      v23 = 0;
    if (v23)
    {
      v25 = v18 + 6;
      goto LABEL_22;
    }
    v24 = v19;
    if (v18 || !v19)
      break;
    v25 = v19 + 1;
LABEL_22:
    v27 = cstdlib_strlen(a2);
    v16 = v27 - cstdlib_strlen(v25);
    if (++v17 >= a3)
      goto LABEL_26;
  }
  if (v18 && v19)
  {
    v26 = cstdlib_strlen(v18);
    if (v26 <= cstdlib_strlen(v24))
      v25 = v24 + 1;
    else
      v25 = v18 + 6;
    goto LABEL_22;
  }
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"[PINYIN] ERROR [word phon (%s not found)]", v20, v21, v22, (uint64_t)a2);
LABEL_26:
  appended = ssftstring_AppendCStrN(a5, a2, v16);
  if ((appended & 0x80000000) != 0)
    return appended;
  v28 = ssftstring_AppendCStr(a5, v14);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v29 = (char *)&a2[v16];
  v30 = cstdlib_strstr(v29, "{SEP");
  v31 = cstdlib_strchr(v29, 46);
  v32 = v31;
  if (v30 && !v31)
  {
LABEL_30:
    v33 = a5;
    v34 = v30;
    return ssftstring_AppendCStr(v33, v34);
  }
  if (!v30 && v31)
  {
LABEL_36:
    v33 = a5;
    v34 = (char *)v32;
    return ssftstring_AppendCStr(v33, v34);
  }
  if (v30 && v31)
  {
    v35 = cstdlib_strlen(v30);
    if (v35 > cstdlib_strlen(v32))
      goto LABEL_30;
    goto LABEL_36;
  }
  return v28;
}

uint64_t hlp_GenXtraMainVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, _WORD *a8)
{
  uint64_t v8;
  unsigned int v9;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t appended;
  const char *v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, size_t, int *);
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *);
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v45;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v57;
  unsigned __int16 v58;
  uint64_t v60;
  int v61[2];
  unsigned __int8 v62;
  unsigned __int16 v63;
  int v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  char __dst[128];
  char v69[128];
  uint64_t v70;

  v8 = 0;
  v70 = *MEMORY[0x24BDAC8D0];
  v62 = 32;
  v67 = a5;
  v66 = a6;
  v64 = 0;
  if (a5 < a6)
  {
    v9 = a6 - a5;
    if ((int)(a6 - a5) > 127)
      return 0;
    v65 = 0;
    cstdlib_strncpy(__dst, (const char *)(a7 + a5), a6 - a5);
    v15 = &__dst[v9];
    *v15 = 0;
    oneword_ReplaceAllCharactersInOrthography(__dst, (int)v15, 0x23u, 45);
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 144))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "normal", __dst, 128);
    if ((v8 & 0x80000000) == 0)
    {
      cstdlib_strcpy(*(char **)(a1 + 240), "");
      cstdlib_strcpy(*(char **)(a1 + 248), "");
      cstdlib_strcpy(*(char **)(a1 + 256), "");
      cstdlib_strcpy(*(char **)(a1 + 264), "");
      if (cstdlib_strlen(__dst))
      {
        if (cstdlib_strlen(__dst) == 1)
        {
          appended = oneword_TranscribeAcronym(a1, "normal", __dst, &v62, v69);
        }
        else
        {
          v31 = mde_stemafx_Main(a1, "normal", __dst, v16, v17, v18, v19, v20);
          if ((v31 & 0x80000000) != 0)
            return v31;
          cstdlib_strcpy(v69, "one_word");
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v41, v42, v43, (uint64_t)v69);
          v44 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
          v45 = *(const char **)(a1 + 160);
          v46 = cstdlib_strlen(v45);
          v31 = v44(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v45, v46);
          if ((v31 & 0x80000000) != 0)
            return v31;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v47, v48, v49, (uint64_t)v69);
          v50 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
          v51 = *(const char **)(a1 + 168);
          v52 = cstdlib_strlen(v51);
          v31 = v50(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 2, v51, v52);
          if ((v31 & 0x80000000) != 0)
            return v31;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v53, v54, v55, (uint64_t)v69);
          v56 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
          v57 = *(const char **)(a1 + 176);
          v58 = cstdlib_strlen(v57);
          v31 = v56(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 3, v57, v58);
          if ((v31 & 0x80000000) != 0)
            return v31;
          if ((ssftmap_Find(*(_QWORD *)(a1 + 568), (uint64_t)"normal", &v65) & 0x80000000) != 0)
          {
            v60 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v69);
            if ((v60 & 0x80000000) != 0)
            {
              v8 = v60;
              goto LABEL_31;
            }
            *(_QWORD *)v61 = 0;
            v63 = 0;
            appended = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, int *, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v61, &v63);
            if ((appended & 0x80000000) == 0)
            {
              *(_BYTE *)(*(_QWORD *)v61 + v63) = 0;
              appended = oneword_AppendPhon(a1, *(char **)v61, "", (uint64_t)"", 0, 1);
            }
          }
          else
          {
            appended = dt_Main(a1, 0, a2, a3, *(_QWORD *)(v65 + 16), "normal");
            v8 = 0;
            if ((appended & 0x1FFF) == 0x10A)
              goto LABEL_9;
          }
        }
        v8 = appended;
        if ((appended & 0x80000000) != 0)
          goto LABEL_31;
LABEL_9:
        if (!cstdlib_strcmp(*(const char **)(a1 + 240), ""))
          goto LABEL_31;
        v22 = *(const char **)(a1 + 240);
        v23 = cstdlib_strlen(v22);
        v22[v23 - cstdlib_strlen("◄")] = 0;
        v24 = *(_QWORD *)(a1 + 240);
        v25 = (char *)(v24 + cstdlib_strlen("◄"));
        v26 = *(const char **)(a1 + 240);
        v27 = cstdlib_strlen(v26);
        if (oneword_CountPhoneticWords(v25, (char *)&v26[v27]) != 1)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mismatch between number of ortographic words (%d) and phonetic words (%d) in DT(%s)", v28, v29, v30, 1);
          goto LABEL_31;
        }
        v61[0] = 16;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(a1 + 56) + 80))(a2, a3, a4, (char *)&v64 + 2);
        if ((v31 & 0x80000000) == 0)
        {
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 0, 1, v61, &v64);
          if ((v31 & 0x80000000) == 0)
          {
            v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 1, 1, &v67, &v64);
            if ((v31 & 0x80000000) == 0)
            {
              v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 2, 1, &v66, &v64);
              if ((v31 & 0x80000000) == 0)
              {
                v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, size_t, int *))(*(_QWORD *)(a1 + 56) + 160);
                v33 = HIWORD(v64);
                v34 = *(_QWORD *)(a1 + 240);
                v35 = cstdlib_strlen("◄");
                LOWORD(v34) = cstdlib_strlen((const char *)(v34 + v35)) + 1;
                v36 = *(_QWORD *)(a1 + 240);
                v37 = cstdlib_strlen("◄");
                v31 = v32(a2, a3, v33, 3, (unsigned __int16)v34, v36 + v37, &v64);
                if ((v31 & 0x80000000) == 0)
                {
                  v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 5, 2, "*", &v64);
                  if ((v31 & 0x80000000) == 0)
                  {
                    v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 6, 2, "*", &v64);
                    if ((v31 & 0x80000000) == 0)
                    {
                      v63 = 1;
                      v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v64), 7, 1, &v63, &v64);
                      if ((v31 & 0x80000000) == 0)
                      {
                        v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 160);
                        v39 = HIWORD(v64);
                        v40 = cstdlib_strlen(*(const char **)(a1 + 1208));
                        v8 = v38(a2, a3, v39, 9, (unsigned __int16)(v40 + 1), *(_QWORD *)(a1 + 1208), &v64);
                        if ((v8 & 0x80000000) != 0)
                          return v8;
                        if (a8)
                          *a8 = HIWORD(v64);
LABEL_31:
                        if ((v8 & 0x1FFF) == 0x10A || (v8 & 0x1FFF) == 4)
                          return 0;
                        return v8;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v31;
      }
    }
  }
  return v8;
}

uint64_t fe_oneword_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2310021127;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_oneword_ClassClose()
{
  return 0;
}

uint64_t fe_oneword_ResourceLoad(_QWORD *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL8 v20;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v27 = 0;
  v13 = 2310021127;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62340, 2288) & 0x80000000) != 0)
    return 2310021128;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if (!a3)
    goto LABEL_14;
  if (a4)
  {
    v18 = a6 != 0;
    if (a5 || !(_DWORD)a6)
    {
      if (!a5)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_14:
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 40001, 0, v14, v15, v16, v17, v26);
    return v13;
  }
  if (!a5 || !(_DWORD)a6)
    goto LABEL_14;
  v18 = 1;
LABEL_12:
  if (v18)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    v28 = a5;
    v27 = a6;
LABEL_19:
    v24 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[10] + 224))(a1[8], a1[9], a5, a6, v19, a7, a4);
    goto LABEL_20;
  }
LABEL_16:
  v22 = cstdlib_strstr(a3, ";loader=broker");
  v20 = v22 != 0;
  v23 = brk_DataOpenEx(*(_QWORD *)(*a1 + 24), a4, v20, (uint64_t)&v29);
  if ((v23 & 0x80000000) != 0)
  {
    if (v22)
      v13 = 0;
    else
      v13 = v23;
    if ((v13 & 0x80000000) == 0)
      return v13;
    goto LABEL_26;
  }
  v24 = brk_DataMapEx(*(_QWORD *)(*a1 + 24), v29, 0, (uint64_t)&v27, (uint64_t)&v28);
  if ((v24 & 0x80000000) == 0)
  {
    a5 = v28;
    v19 = v29;
    a6 = v27;
    goto LABEL_19;
  }
LABEL_20:
  v13 = v24;
  if ((v24 & 0x80000000) == 0)
    return v13;
LABEL_26:
  if (v20)
  {
    v25 = v29;
    if (v29)
    {
      if (v28)
      {
        brk_DataUnmap(*(_QWORD *)(*a1 + 24), v29, v28);
        v28 = 0;
        v25 = v29;
      }
      brk_DataClose(*(_QWORD *)(*a1 + 24), v25);
    }
  }
  return v13;
}

uint64_t oneword_Lid(uint64_t a1, _DWORD *a2)
{
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v29 = 0;
  v28 = -1;
  v27 = 0;
  v4 = cstdlib_strlen(*(const char **)(a1 + 160));
  v8 = v4;
  v9 = v4;
  if (!v4)
  {
    v17 = 0;
LABEL_18:
    if (*(_DWORD *)(a1 + 932))
    {
      *a2 = 1;
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v19 = "LID found ENX context";
    }
    else
    {
      if (v9)
      {
        v20 = 0;
        v21 = (v9 - 1);
        do
        {
          v22 = *(_QWORD *)(a1 + 160);
          v23 = v20 ? *(_BYTE *)(v22 + (v20 - 1)) : 95;
          v30 = v23;
          v31 = *(_BYTE *)(v22 + v20);
          v24 = v21 == v20 ? 95 : *(_BYTE *)(v22 + v20 + 1);
          v32 = v24;
          v33 = 0;
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, __int16 *, char *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "lidenx", &v30, &v29, &v28, &v27);
          if ((v17 & 0x80000000) != 0)
            return v17;
          if (v28)
          {
            *a2 = 1;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found ENX trigram", v5, v6, v7, v26);
            goto LABEL_22;
          }
        }
        while (v8 != ++v20);
      }
      *a2 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v19 = "LID default to LNG";
    }
    log_OutText(v18, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v19, v5, v6, v7, v26);
    return v17;
  }
  v10 = 0;
  v11 = v4;
  do
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 160) + v10);
    if (v12 >= 0x7B)
    {
      *a2 = 0;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found diacritic", v5, v6, v7, v26);
      v17 = 0;
LABEL_37:
      *(_DWORD *)(a1 + 932) = 0;
      return v17;
    }
    if (cstdlib_strchr((char *)(a1 + 944), v12))
    {
      *a2 = 1;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found ENX character", v5, v6, v7, v26);
      v17 = 0;
LABEL_22:
      *(_DWORD *)(a1 + 932) = 1;
      return v17;
    }
    ++v10;
  }
  while (v10 < v11);
  v13 = 0;
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 160);
    v15 = v13 ? *(_BYTE *)(v14 + (v13 - 1)) : 95;
    v30 = v15;
    v31 = *(_BYTE *)(v14 + v13);
    v16 = v9 - 1 == v13 ? 95 : *(_BYTE *)(v14 + v13 + 1);
    v32 = v16;
    v33 = 0;
    v17 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, __int16 *, char *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "lidlng", &v30, &v29, &v28, &v27);
    if ((v17 & 0x80000000) != 0)
      return v17;
    if (v28)
    {
      *a2 = 0;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"LID found LNG trigram", v5, v6, v7, v26);
      goto LABEL_37;
    }
    if (v8 == ++v13)
      goto LABEL_18;
  }
}

uint64_t oneword_NonDctDpsMde(_QWORD *a1, unsigned int a2, uint64_t a3, const char *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned __int16 v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  const char *v27;
  unsigned __int16 *v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  unsigned __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  unsigned __int16 v43;
  int v44;
  char *__s;
  int v46;
  int v47;
  unsigned __int16 v48;
  char __dst[128];
  uint64_t v50;

  v11 = a5;
  v50 = *MEMORY[0x24BDAC8D0];
  v48 = a5;
  v46 = 0;
  v47 = 0;
  __s = 0;
  v44 = 0;
  v43 = 0;
  cstdlib_strcpy(__dst, "nondctbased_mde");
  v16 = cstdlib_strlen(__dst);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, int *))(a1[7] + 168))(a7, a8, v11, 0, 1, &v47, &v46);
  if ((result & 0x80000000) != 0)
    return result;
  if (!(_DWORD)v11)
    return result;
  v18 = v47;
  if (v47 == 3)
    return result;
  v19 = a2 + 128;
  v20 = a3 - a2;
  v40 = v16;
  v41 = v16 + 2;
  v21 = 1;
  while (1)
  {
    if (!v18)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a7, a8, (unsigned __int16)v11, 1, 1, &v44, &v46);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a7, a8, v48, 2, 1, &v43, &v46);
      if ((result & 0x80000000) != 0)
        return result;
      v25 = (unsigned __int16)v44 + 1 < v43 && v19 > (unsigned __int16)v44;
      if (v25 && v19 > v43)
        break;
    }
LABEL_15:
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 120))(a7, a8, v48, &v48);
    if ((result & 0x80000000) == 0)
    {
      if (v48)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a7, a8);
        if ((result & 0x80000000) == 0)
        {
          LOWORD(v11) = v48;
          if (v48)
          {
            v18 = v47;
            if (v47 != 3)
              continue;
          }
        }
      }
    }
    return result;
  }
  v39 = v19;
  v27 = a4;
  v28 = a6;
  v29 = (const char *)(v20 + (unsigned __int16)v44);
  v30 = *(_BYTE *)(v20 + v43);
  *(_BYTE *)(v20 + v43) = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v22, v23, v24, (uint64_t)__dst);
  v31 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(a1[13] + 120);
  v32 = cstdlib_strlen(v29);
  result = v31(a1[11], a1[12], 0, v29, v32);
  if ((result & 0x80000000) != 0)
    return result;
  *(_BYTE *)(v20 + v43) = v30;
  if (cstdlib_strcmp(v27, "normal") && v41 + cstdlib_strlen(v27) <= 0x7F)
  {
    cstdlib_strcat(__dst, "_");
    cstdlib_strcat(__dst, v27);
  }
  a6 = v28;
  if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[13] + 80))(a1[11], a1[12], __dst) & 0x80000000) != 0)
  {
    __dst[v40] = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[13] + 80))(a1[11], a1[12], __dst) & 0x80000000) != 0)
      return 0;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, char *))(a1[13] + 128))(a1[11], a1[12], 0, &__s, (char *)&v44 + 2);
  if ((result & 0x80000000) != 0)
    return result;
  __s[HIWORD(v44)] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v33, v34, v35, (uint64_t)__dst);
  v36 = cstdlib_strchr(__s, 43);
  if (!v36)
  {
    a4 = v27;
    v19 = v39;
    goto LABEL_15;
  }
  v37 = v36;
  v38 = v21;
  a4 = v27;
  v19 = v39;
  while (1)
  {
    v42 = v44 + (_WORD)v37 - (_WORD)__s;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(a1[7] + 160))(a7, a8, v48, 2, 1, &v42, (char *)&v46 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 80))(a7, a8, v48, &v48);
    if ((result & 0x80000000) != 0)
      return result;
    v47 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a1[7] + 160))(a7, a8, v48, 0, 1, &v47, (char *)&v46 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(a1[7] + 160))(a7, a8, v48, 1, 1, &v42, (char *)&v46 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 160))(a7, a8, v48, 2, 1, &v43, (char *)&v46 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    LOWORD(v44) = v42;
    if (v38)
      *a6 = v48;
    __s = v37 + 1;
    v37 = cstdlib_strchr(v37 + 1, 43);
    v38 = 0;
    v21 = 0;
    if (!v37)
      goto LABEL_15;
  }
}

uint64_t oneword_DpsMde(_QWORD *a1, const char *a2, const char *a3, uint64_t a4, const char *a5, __int16 a6, unsigned __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unsigned __int8 v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  const char *v41;
  const char **v42;
  const char **v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  const char *v60;
  char *v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  size_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  int v83;
  char *v84;
  const char *v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *);
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  const char *v97;
  int v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  __int16 v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v115;
  char *v116;
  char v117;
  char *__s2;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unsigned __int16 v125;
  char *__s1;
  char *__s;
  __int16 v128;
  __int16 v129;
  int v130;
  _BYTE __c[15];
  unsigned __int16 v132;
  __int16 v133;
  _OWORD v134[5];
  _QWORD v135[10];
  _QWORD v136[10];
  _QWORD v137[11];
  char __dst[128];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v133 = a6;
  v132 = a7;
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  v130 = 8;
  v129 = 0;
  v128 = 1;
  __s1 = 0;
  __s = 0;
  v125 = 0;
  cstdlib_strcpy(__dst, "dctbased_mde");
  v16 = cstdlib_strlen(__dst);
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v17, v18, v19, (uint64_t)__dst);
  v20 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(a1[13] + 120);
  v21 = cstdlib_strlen(a2);
  v22 = v20(a1[11], a1[12], 0, a2, v21);
  if ((v22 & 0x80000000) != 0)
    return v22;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L2: %s", v23, v24, v25, (uint64_t)__dst);
  v26 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(a1[13] + 120);
  v27 = cstdlib_strlen(a3);
  v22 = v26(a1[11], a1[12], 1, a3, v27);
  if ((v22 & 0x80000000) != 0)
    return v22;
  if (cstdlib_strcmp(a5, "normal") && cstdlib_strlen(a5) + v16 + 2 <= 0x7F)
  {
    cstdlib_strcat(__dst, "_");
    cstdlib_strcat(__dst, a5);
  }
  if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[13] + 80))(a1[11], a1[12], __dst) & 0x80000000) != 0)
  {
    __dst[v16] = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[13] + 80))(a1[11], a1[12], __dst) & 0x80000000) != 0)
      return 0;
  }
  v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(a1[13] + 128))(a1[11], a1[12], 0, &__s, &v125);
  if ((v22 & 0x80000000) != 0)
    return v22;
  __s[v125] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v28, v29, v30, (uint64_t)__dst);
  v31 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char **, unsigned __int16 *))(a1[13] + 128))(a1[11], a1[12], 1, &__s1, &v125);
  if ((v31 & 0x80000000) == 0)
  {
    v123 = (char *)a3;
    __s2 = (char *)a5;
    memset(v137, 0, 80);
    memset(v135, 0, sizeof(v135));
    memset(v136, 0, sizeof(v136));
    memset(v134, 0, sizeof(v134));
    v32 = __s;
    if (*__s == 123)
    {
      *__s = 0;
      v137[0] = v32 + 1;
      v137[1] = "0";
      v136[0] = "0";
      v136[1] = v32 + 1;
      v33 = cstdlib_strchr(__s + 1, 125);
      if (v33)
      {
        *v33 = 0;
        v32 = v33 + 1;
        v34 = cstdlib_strchr(v33 + 1, 123);
        v121 = 2;
        if (!v34)
        {
          v35 = 0;
LABEL_21:
          v117 = 1;
LABEL_24:
          v124 = 0;
          v40 = v35;
          v119 = v35;
          while (!(_DWORD)v40)
          {
LABEL_37:
            ++v124;
            v40 = v119;
            if (v124 == v121)
              return v31;
          }
          v41 = (const char *)v136[v124];
          v42 = (const char **)v134;
          v43 = (const char **)v135;
          while (1)
          {
            if (cstdlib_strcmp(v41, "0") || cstdlib_strcmp(*v42, "0"))
            {
              v44 = (const char *)v137[v124];
              if (cstdlib_strcmp(v44, "0"))
              {
                cstdlib_strcpy(__s1, v44);
                cstdlib_strcat(__s1, v32);
              }
              else
              {
                cstdlib_strcpy(__s1, v32);
              }
              v45 = *v43;
              if (cstdlib_strcmp(*v43, "0"))
                cstdlib_strcat(__s1, v45);
              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v46, v47, v48, (uint64_t)__s1);
              v31 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, _BYTE *, _BYTE *, _BYTE *, _QWORD))(a1[10] + 152))(a1[8], a1[9], a4, __s1, &__c[3], &__c[1], __c, *((unsigned __int8 *)a1 + 556));
              if ((v31 & 0x80000000) != 0)
                return v31;
              if (*(_WORD *)&__c[1])
                break;
            }
            ++v42;
            ++v43;
            if (!--v40)
              goto LABEL_37;
          }
          v49 = 0;
          v116 = 0;
          v50 = a10;
          while (1)
          {
            v51 = *(char **)(*(_QWORD *)&__c[3] + 8 * v49);
            v52 = cstdlib_strchr(v51, __c[0]);
            if (!v52)
              break;
            *v52 = 0;
            v57 = cstdlib_strchr(v52 + 1, __c[0]);
            v58 = v57;
            if (!v57)
              goto LABEL_50;
            *v57 = 0;
            v58 = v57 + 1;
            v59 = cstdlib_strchr(v57 + 1, __c[0]);
            v60 = v59;
            if (!v59)
              goto LABEL_51;
            *v59 = 0;
            v60 = v59 + 1;
            v61 = cstdlib_strchr(v59 + 1, __c[0]);
            if (!v61)
              goto LABEL_51;
            *v61 = 0;
            v122 = v61 + 1;
            v62 = cstdlib_strchr(v61 + 1, __c[0]);
            if (!v62)
              goto LABEL_52;
            *v62 = 0;
            v120 = v62 + 1;
            v63 = cstdlib_strchr(v62 + 1, __c[0]);
            v64 = v63;
            if (v63)
            {
              *v63 = 0;
              v64 = v63 + 1;
              v65 = cstdlib_strchr(v63 + 1, __c[0]);
              if (v65)
              {
                *v65 = 0;
                v116 = v65 + 1;
                v66 = cstdlib_strchr(v65 + 1, __c[0]);
                if (v66)
                  *v66 = 0;
              }
            }
LABEL_53:
            v67 = *(_QWORD *)(*a1 + 32);
            if (!v51)
            {
              v31 = 2310021127;
              log_OutPublic(v67, (uint64_t)"FE_ONEWORD", 34001, 0, v53, v54, v55, v56, v115);
              return v31;
            }
            log_OutText(v67, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v54, v55, v56, (uint64_t)v51);
            if (v58 && cstdlib_strcmp(v58, "") && !cstdlib_strstr(v58, __s2))
            {
              v97 = "G2P Domain validation not OK";
              goto LABEL_78;
            }
            if (v64 && !cstdlib_strcmp(v64, "0"))
            {
              v97 = "G2P MDE usage validation not OK";
LABEL_78:
              log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v97, v68, v69, v70, v115);
              goto LABEL_94;
            }
            v71 = v133;
            *a11 = v71 + cstdlib_strlen(v123);
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 88))(a9, v50, v132, &v132);
            if ((v22 & 0x80000000) != 0)
              return v22;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a1[7] + 160))(a9, v50, v132, 0, 1, &v130, &v129);
            if ((v22 & 0x80000000) != 0)
              return v22;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a9, v50, v132, 1, 1, &v133, &v129);
            if ((v22 & 0x80000000) != 0)
              return v22;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _WORD *, __int16 *))(a1[7] + 160))(a9, v50, v132, 2, 1, a11, &v129);
            if ((v22 & 0x80000000) != 0)
              return v22;
            if ((v117 & 1) == 0)
            {
              v72 = cstdlib_strlen(v51);
              if (v72 + cstdlib_strlen(v34) - 124 <= 0xFFFFFFFFFFFFFF7ELL)
              {
                v73 = *(uint64_t **)(*a1 + 8);
                v74 = a1[30];
                v75 = cstdlib_strlen(v51);
                v76 = cstdlib_strlen(v34);
                v77 = heap_Realloc(v73, v74, (v75 + v76 + 5));
                if (!v77)
                {
                  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v78, v79, v80, v81, v115);
                  return 2310021130;
                }
                a1[30] = v77;
                v50 = a10;
              }
            }
            v82 = (const char *)v136[v124];
            v83 = cstdlib_strcmp(v82, "0");
            v84 = (char *)a1[30];
            if (v83)
            {
              cstdlib_strcpy(v84, v82);
              cstdlib_strcat((char *)a1[30], "◄");
            }
            else
            {
              cstdlib_strcpy(v84, "◄");
            }
            cstdlib_strcat((char *)a1[30], v51);
            cstdlib_strcat((char *)a1[30], "◄");
            v85 = *v42;
            if (cstdlib_strcmp(*v42, "0"))
              cstdlib_strcat((char *)a1[30], v85);
            v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(a1[7] + 160);
            v87 = v132;
            v88 = cstdlib_strlen((const char *)a1[30]);
            v22 = v86(a9, v50, v87, 3, (unsigned __int16)(v88 + 1), a1[30], &v129);
            if ((v22 & 0x80000000) != 0)
              return v22;
            if (v60)
            {
              v89 = cstdlib_strcmp(v60, "");
              v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160);
              v91 = v132;
              if (v89)
              {
                v92 = (unsigned __int16)(cstdlib_strlen(v60) + 1);
                v93 = a9;
                v94 = v50;
                v95 = v91;
                v96 = v60;
              }
              else
              {
                v93 = a9;
                v94 = v50;
                v95 = v132;
                v92 = 2;
                v96 = "*";
              }
              v22 = v90(v93, v94, v95, 5, v92, v96, &v129);
              if ((v22 & 0x80000000) != 0)
                return v22;
            }
            if (v122)
            {
              v98 = cstdlib_strcmp(v122, "");
              v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160);
              v100 = v132;
              if (v98)
              {
                v101 = (unsigned __int16)(cstdlib_strlen(v122) + 1);
                v102 = a9;
                v103 = v50;
                v104 = v100;
                v105 = v122;
              }
              else
              {
                v102 = a9;
                v103 = v50;
                v104 = v132;
                v101 = 2;
                v105 = "*";
              }
              v22 = v99(v102, v103, v104, 6, v101, v105, &v129);
              if ((v22 & 0x80000000) != 0)
                return v22;
            }
            v106 = v120 ? (unsigned __int16)LH_atou(v120) : 1;
            v128 = v106;
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a9, v50, v132, 7, 1, &v128, &v129);
            if ((v22 & 0x80000000) != 0)
              return v22;
            v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(a1[7] + 160);
            v108 = v132;
            if (v116)
            {
              v109 = (unsigned __int16)(cstdlib_strlen(v116) + 1);
              v110 = a9;
              v111 = v50;
              v112 = v108;
              v113 = v116;
            }
            else
            {
              v110 = a9;
              v111 = v50;
              v112 = v132;
              v109 = 1;
              v113 = "";
            }
            v31 = v107(v110, v111, v112, 9, v109, v113, &v129);
            if ((v31 & 0x80000000) != 0)
              return v31;
LABEL_94:
            if (++v49 >= (unint64_t)*(unsigned __int16 *)&__c[1])
              return v31;
          }
          v58 = 0;
LABEL_50:
          v60 = 0;
LABEL_51:
          v122 = 0;
LABEL_52:
          v120 = 0;
          v64 = 0;
          goto LABEL_53;
        }
LABEL_16:
        v35 = 0;
        while (*v34 != 125)
        {
          v37 = v35;
          v135[v35] = v34 + 1;
          *v34 = 0;
          v38 = cstdlib_strchr(v34 + 1, 43);
          if (!v38)
            return v31;
          ++v35;
          *v38 = 0;
          v39 = v38 + 1;
          *((_QWORD *)v134 + v37) = v39;
          v34 = cstdlib_strchr(v39, 44);
          if (!v34)
          {
            v34 = cstdlib_strchr(*((char **)v134 + v35 - 1), 125);
            if (!v34)
              goto LABEL_21;
          }
        }
        v117 = 0;
        *v34 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v137[0] = "0";
      v136[0] = "0";
      v36 = cstdlib_strchr(__s, 123);
      if (v36)
      {
        v34 = v36;
        v121 = 1;
        goto LABEL_16;
      }
    }
  }
  return v31;
}

uint64_t crf_mde_seg_get_broker_string(uint64_t a1, char **a2, char **a3)
{
  uint64_t Str;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  char *v15;
  unsigned int v17;
  char *v18;
  char *__s2;
  char __s1[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v18 = "";
  __s2 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)__s1 = 0u;
  v21 = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v18);
  if ((Str & 0x80000000) != 0)
    return Str;
  cstdlib_strcat(__s1, "crf_mde_seg_");
  cstdlib_strcat(__s1, __s2);
  cstdlib_strcat(__s1, "_");
  cstdlib_strcat(__s1, v18);
  v7 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1024);
  *a2 = v7;
  if (v7
    && (v12 = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, v7, 0x400uLL),
        v13 = *(_QWORD **)(a1 + 8),
        v14 = cstdlib_strlen(__s2),
        v15 = (char *)heap_Calloc(v13, 1, v14 + 1),
        (*a3 = v15) != 0))
  {
    cstdlib_strcpy(v15, __s2);
  }
  else
  {
    v12 = 2310021130;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v8, v9, v10, v11, v17);
  }
  return v12;
}

uint64_t getUmlautMap(uint64_t a1, char *__s1, uint64_t *a3, unsigned __int16 *a4)
{
  char *v6;
  char *v8;
  unsigned __int16 i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  char *v17;
  char *v18;
  char *v19;
  const char *v20;
  _QWORD *v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v30;

  v6 = __s1;
  v8 = cstdlib_strstr(__s1, ",");
  for (i = 1; v8; v8 = cstdlib_strstr(v8 + 1, ","))
    ++i;
  v10 = 16 * i;
  v11 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v10);
  *a3 = v11;
  if (v11)
  {
    if (i)
    {
      for (j = 0; v10 != j; j += 16)
      {
        v17 = cstdlib_strchr(v6, 44);
        v18 = v17;
        if (v17)
          *v17 = 0;
        v19 = cstdlib_strchr(v6, 59);
        if (v19)
        {
          *v19 = 0;
          v20 = v19 + 1;
          v21 = *(_QWORD **)(a1 + 8);
          v22 = cstdlib_strlen(v6);
          *(_QWORD *)(*a3 + j) = heap_Calloc(v21, 1, v22 + 1);
          v23 = *(char **)(*a3 + j);
          if (!v23)
            goto LABEL_18;
          cstdlib_strcpy(v23, v6);
          v24 = *(_QWORD **)(a1 + 8);
          v25 = cstdlib_strlen(v20);
          *(_QWORD *)(*a3 + j + 8) = heap_Calloc(v24, 1, v25 + 1);
          v26 = *(char **)(*a3 + j + 8);
          if (!v26)
            goto LABEL_18;
          cstdlib_strcpy(v26, v20);
          if (v18)
            v27 = (_DWORD)v10 - 16 == (_DWORD)j;
          else
            v27 = 1;
          if (!v27)
            v6 = v18 + 1;
        }
      }
    }
    v28 = 0;
    *a4 = i;
  }
  else
  {
LABEL_18:
    v28 = 2310021130;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v12, v13, v14, v15, v30);
  }
  return v28;
}

uint64_t crf_mde_seg_load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  uint64_t *v17;
  uint64_t broker_string;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t fecfgparam_string;
  char *v23;
  uint64_t UmlautMap;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *__s1;
  int v60;
  char *v61;

  v61 = 0;
  v60 = 0;
  __s1 = 0;
  *(_DWORD *)(a10 + 144) = log_GetLogLevel(*(_QWORD *)(a5 + 32)) > 4;
  *a11 = 0;
  v17 = (uint64_t *)(a10 + 32);
  broker_string = crf_mde_seg_get_broker_string(a5, (char **)(a10 + 32), &v61);
  if ((broker_string & 0x80000000) != 0)
    goto LABEL_16;
  if ((crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, (_QWORD *)(a10 + 40), 2, *(_QWORD *)(a10 + 32), "CRPH", 1031, 0, (uint64_t)crf_set_nbest_callback) & 0x80000000) != 0)
  {
    log_OutText(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"no CRF MDE model found", v19, v20, v21, *v17);
    v31 = 0;
    goto LABEL_18;
  }
  broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegsep", (char **)(a10 + 64), 0, "STR");
  if ((broker_string & 0x80000000) != 0
    || (broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"orthtrigger", (char **)(a10 + 72), 0, "STR"), (broker_string & 0x80000000) != 0)|| (broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdemorphesep", (char **)(a10 + 80), 0, "STR"), (broker_string & 0x80000000) != 0)
    || (broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegbypassonewordcrosstoken", 0, (_DWORD *)(a10 + 52), "BOOL"), (broker_string & 0x80000000) != 0)|| (broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegpostsegdictlookup", 0, (_DWORD *)(a10 + 56), "BOOL"), (broker_string & 0x80000000) != 0)
    || (broker_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdeskipwordswiththischar", (char **)(a10 + 88), 0, "STR"), (broker_string & 0x80000000) != 0))
  {
LABEL_16:
    v31 = broker_string;
    goto LABEL_18;
  }
  fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mdesegumlautmap", &__s1, 0, "STR");
  v23 = __s1;
  if ((fecfgparam_string & 0x80000000) != 0)
    goto LABEL_55;
  if (!__s1
    || (UmlautMap = getUmlautMap(a5, __s1, (uint64_t *)(a10 + 96), (unsigned __int16 *)(a10 + 104)),
        (UmlautMap & 0x80000000) == 0))
  {
    fecfgparam_string = crf_mde_seg_parse_params(a5, *(_QWORD *)(a10 + 40), a10);
    if ((fecfgparam_string & 0x80000000) != 0)
      goto LABEL_55;
    v29 = *(_DWORD *)(a10 + 12);
    if (v29 == 1)
    {
      v30 = "SEG_Char";
    }
    else
    {
      if (v29 != 2)
      {
        v31 = 2310021127;
        v36 = *(_QWORD *)(a5 + 32);
        goto LABEL_41;
      }
      v30 = "SEG_Morpheme";
    }
    log_OutText(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, type: %s", v26, v27, v28, (uint64_t)v30);
    v34 = *(_DWORD *)(a10 + 16);
    if (v34 == 1)
    {
      v35 = "ANN_BI";
LABEL_34:
      log_OutText(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, type: %s", v26, v27, v28, (uint64_t)v35);
      *(_DWORD *)(a10 + 48) = 1;
      *a11 = 1;
      v37 = (_QWORD *)(a10 + 112);
      fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_tag_mappings_dic", (char **)(a10 + 112), 0, "STR");
      if ((fecfgparam_string & 0x80000000) == 0)
      {
        if (*v37)
        {
          fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a9 + 72))(a7, a8, *v37, &v60);
          if ((fecfgparam_string & 0x80000000) != 0)
            goto LABEL_55;
          if (*v37 && !v60)
          {
            v31 = 2310021127;
            log_OutPublic(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34009, (uint64_t)"%s%s", v38, v39, v40, v41, "message");
            goto LABEL_56;
          }
        }
        v42 = (_QWORD *)(a10 + 120);
        fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_morpheme_dic", (char **)(a10 + 120), 0, "STR");
        if ((fecfgparam_string & 0x80000000) == 0)
        {
          if (*v42)
          {
            fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a9 + 72))(a7, a8, *v42, &v60);
            if ((fecfgparam_string & 0x80000000) != 0)
              goto LABEL_55;
            if (*v42 && !v60)
            {
              v31 = 2310021127;
              log_OutPublic(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34010, (uint64_t)"%s%s", v43, v44, v45, v46, "message");
              goto LABEL_56;
            }
          }
          v47 = (_QWORD *)(a10 + 128);
          fecfgparam_string = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_affix_dic", (char **)(a10 + 128), 0, "STR");
          if ((fecfgparam_string & 0x80000000) == 0)
          {
            if (!*v47)
            {
LABEL_58:
              v52 = (_QWORD *)(a10 + 136);
              v31 = crf_mde_seg_get_fecfgparam_string(a5, a7, a8, a9, (uint64_t)"mde_seg_patterns_dic", (char **)(a10 + 136), 0, "STR");
              if ((v31 & 0x80000000) == 0)
              {
                if (*v52)
                {
                  v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a9 + 72))(a7, a8, *v52, &v60);
                  if ((v31 & 0x80000000) == 0 && *v52 && !v60)
                  {
                    v31 = 2310021127;
                    log_OutPublic(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34012, (uint64_t)"%s%s", v53, v54, v55, v56, "message");
                  }
                }
              }
LABEL_56:
              if (!v23)
                goto LABEL_18;
              goto LABEL_57;
            }
            fecfgparam_string = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a9 + 72))(a7, a8, *v47, &v60);
            if ((fecfgparam_string & 0x80000000) == 0)
            {
              if (*v47 && !v60)
              {
                v31 = 2310021127;
                log_OutPublic(*(_QWORD *)(a5 + 32), (uint64_t)"FE_ONEWORD", 34011, (uint64_t)"%s%s", v48, v49, v50, v51, "message");
                goto LABEL_56;
              }
              goto LABEL_58;
            }
          }
        }
      }
LABEL_55:
      v31 = fecfgparam_string;
      goto LABEL_56;
    }
    if (v34 == 2)
    {
      v35 = "ANN_BMES";
      goto LABEL_34;
    }
    v31 = 2310021127;
    v36 = *(_QWORD *)(a5 + 32);
LABEL_41:
    log_OutPublic(v36, (uint64_t)"FE_ONEWORD", 34006, (uint64_t)"%s%s", v25, v26, v27, v28, "message");
    goto LABEL_56;
  }
  v31 = UmlautMap;
LABEL_57:
  heap_Free(*(_QWORD **)(a5 + 8), (uint64_t)v23);
LABEL_18:
  if (*v17)
  {
    heap_Free(*(_QWORD **)(a5 + 8), *v17);
    *v17 = 0;
  }
  if (v61)
    heap_Free(*(_QWORD **)(a5 + 8), (uint64_t)v61);
  if ((v31 & 0x80000000) != 0 && *(_DWORD *)(a10 + 48) == 1)
  {
    v32 = *(_QWORD *)(a10 + 40);
    if (v32)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(a5, a6, v32);
      *(_QWORD *)(a10 + 40) = 0;
    }
  }
  return v31;
}

uint64_t crf_set_nbest_callback(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  cstdlib_memset(&v7, 0, 0x20uLL);
  result = crf_mde_seg_parse_params((uint64_t)a1, a2, (uint64_t)&v7);
  if ((result & 0x80000000) == 0)
  {
    if (a3)
      *a3 = DWORD1(v8);
    crf_free_conf(a1, (uint64_t)&v7);
    return 0;
  }
  return result;
}

uint64_t crf_mde_seg_get_fecfgparam_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6, _DWORD *a7, char *__s1)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE __c[11];

  *(_WORD *)&__c[1] = -1;
  if (!cstdlib_strcmp(__s1, "BOOL"))
    *a7 = 0;
  if (!cstdlib_strcmp(__s1, "STR"))
    *a6 = 0;
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _BYTE *, _BYTE *, _BYTE *))(a4 + 96))(a2, a3, "fecfg", a5, &__c[3], &__c[1], __c);
  if ((v16 & 0x80001FFF) == 0x8000000A)
  {
LABEL_6:
    v21 = 2310021130;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v17, v18, v19, v20, v30);
    return v21;
  }
  v21 = v16;
  if ((v16 & 0x80000000) != 0)
    return 0;
  if (*(_WORD *)&__c[1])
  {
    v22 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v22)
      *v22 = 0;
    if (!cstdlib_strcmp(__s1, "STR"))
    {
      v24 = *(_QWORD **)(a1 + 8);
      v25 = cstdlib_strlen(**(const char ***)&__c[3]);
      v26 = (char *)heap_Calloc(v24, 1, (v25 + 1));
      *a6 = v26;
      if (v26)
      {
        cstdlib_strcpy(v26, **(const char ***)&__c[3]);
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde seg param %s = %s", v27, v28, v29, a5);
        return v21;
      }
      goto LABEL_6;
    }
    if (!cstdlib_strcmp(__s1, "BOOL"))
    {
      *a7 = 0;
      if (!cstdlib_strcmp(**(const char ***)&__c[3], "1"))
        *a7 = 1;
    }
  }
  return v21;
}

uint64_t crf_mde_seg_parse_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  uint64_t v5;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  unsigned __int16 v17;
  _BOOL4 v18;
  uint64_t result;
  int v20;
  BOOL v21;
  const char *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  _BOOL4 v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  unsigned __int16 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  _BOOL4 v52;
  int v53;
  _BYTE *v54;
  unsigned int v55;
  char **v57;
  _DWORD *v58;
  int *v59;
  int *v60;

  *(_WORD *)(a3 + 10) = 0;
  v3 = (_WORD *)(a3 + 10);
  *(_DWORD *)(a3 + 12) = 0;
  v60 = (int *)(a3 + 12);
  *(_DWORD *)(a3 + 16) = 0;
  v59 = (int *)(a3 + 16);
  *(_DWORD *)(a3 + 20) = 1;
  v58 = (_DWORD *)(a3 + 20);
  if (!*(_DWORD *)(a2 + 40))
    return 0;
  v5 = a2;
  v7 = 0;
  v57 = (char **)(a3 + 24);
  while (1)
  {
    v8 = cstdlib_strcmp(*(const char **)(*(_QWORD *)(v5 + 32) + 16 * v7), "features");
    v9 = *(_QWORD *)(v5 + 32);
    if (!v8)
      break;
    v10 = cstdlib_strcmp(*(const char **)(v9 + 16 * v7), "settings");
    v11 = *(_QWORD *)(v5 + 32);
    if (v10)
    {
      if (!cstdlib_strcmp(*(const char **)(v11 + 16 * v7), "featureparam"))
      {
        v12 = *(char **)(*(_QWORD *)(a2 + 32) + 16 * v7 + 8);
        v13 = (unsigned __int16)cstdlib_strlen(v12);
        if (v13)
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
LABEL_8:
          v18 = 0;
          while (2)
          {
            ++v14;
            while (v18)
            {
              if (v12[v14 - 1] != 32)
              {
                v18 = 1;
                goto LABEL_20;
              }
              v12[v14 - 1] = 0;
              if (!v16)
              {
                v16 = 1;
                v15 = v17;
                if (v14 != v13)
                  goto LABEL_8;
                goto LABEL_71;
              }
              result = crf_mde_seg_set_featureparam_value(a1, (uint64_t)v12, v15, v17, v57);
              if ((result & 0x80000000) != 0)
                return result;
              v16 = 0;
              v18 = 0;
              if (++v14 - v13 == 1)
                goto LABEL_72;
            }
            v20 = v12[v14 - 1];
            v21 = v20 == 32;
            v18 = v20 != 32;
            if (!v21)
              v17 = v14 - 1;
LABEL_20:
            if (v14 != v13)
              continue;
            break;
          }
          if (v16 != 1)
            goto LABEL_72;
LABEL_71:
          result = crf_mde_seg_set_featureparam_value(a1, (uint64_t)v12, v15, v17, v57);
          if ((result & 0x80000000) != 0)
            return result;
          do
          {
LABEL_72:
            if (!*v12)
              *v12 = 32;
            ++v12;
            --v13;
          }
          while (v13);
        }
      }
    }
    else
    {
      v42 = *(const char **)(v11 + 16 * v7 + 8);
      v43 = cstdlib_strlen(v42);
      v44 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v43 + 1);
      if (!v44)
        goto LABEL_77;
      v45 = (uint64_t)v44;
      cstdlib_strcpy(v44, v42);
      if (v43)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = v43;
        v50 = -(uint64_t)v43;
        v51 = 0;
LABEL_46:
        v52 = 0;
        while (2)
        {
          ++v46;
          while (v52)
          {
            if (*(_BYTE *)(v45 + v46 - 1) != 32)
            {
              v52 = 1;
              goto LABEL_57;
            }
            *(_BYTE *)(v45 + v46 - 1) = 0;
            if (!v48)
            {
              v48 = 1;
              v47 = v51;
              if (v50 + v46)
                goto LABEL_46;
              goto LABEL_62;
            }
            crf_mde_seg_set_param_value(a1, v45, v47, v51, v3, v60, v59, v58);
            v48 = 0;
            v52 = 0;
            ++v46;
            if (v50 + v46 == 1)
              goto LABEL_63;
          }
          v53 = *(unsigned __int8 *)(v45 + v46 - 1);
          v21 = v53 == 32;
          v52 = v53 != 32;
          if (!v21)
            v51 = v46 - 1;
LABEL_57:
          if (v50 + v46)
            continue;
          break;
        }
        if (v48 == 1)
LABEL_62:
          crf_mde_seg_set_param_value(a1, v45, v47, v51, v3, v60, v59, v58);
LABEL_63:
        v54 = (_BYTE *)v45;
        do
        {
          if (!*v54)
            *v54 = 32;
          ++v54;
          --v49;
        }
        while (v49);
      }
      heap_Free(*(_QWORD **)(a1 + 8), v45);
    }
LABEL_68:
    ++v7;
    v5 = a2;
    if (v7 >= *(unsigned int *)(a2 + 40))
      return 0;
  }
  v22 = *(const char **)(v9 + 16 * v7 + 8);
  v23 = cstdlib_strlen(v22);
  v24 = v23;
  *(_BYTE *)(a3 + 8) = 0;
  v25 = 0;
  if (v23)
  {
    v26 = 0;
    v27 = v23;
    v28 = v22;
    do
    {
      if (v26)
      {
        v26 = *(unsigned __int8 *)v28 != 32;
      }
      else if (*v28 == 32)
      {
        v26 = 0;
      }
      else
      {
        *(_BYTE *)(a3 + 8) = ++v25;
        v26 = 1;
      }
      ++v28;
      --v27;
    }
    while (v27);
  }
  v29 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v25 + 8);
  *(_QWORD *)a3 = v29;
  if (v29)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = v37;
      v39 = v22[v37];
      if (v39 == 32)
      {
        LOBYTE(v39) = 0;
        v40 = 0;
        v34 = 0;
        v41 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v36++);
      }
      else
      {
        if (v34)
        {
          v41 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v36);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v36) = heap_Alloc(*(_QWORD *)(a1 + 8), 64);
          v41 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v36);
          if (!v41)
            goto LABEL_77;
          LOBYTE(v39) = v22[v38];
        }
        v40 = v35 + 1;
        v34 = 1;
      }
      *(_BYTE *)(v41 + v35) = v39;
      v37 = v38 + 1;
      v35 = v40;
    }
    while ((int)v38 + 1 <= v24);
    goto LABEL_68;
  }
LABEL_77:
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v30, v31, v32, v33, v55);
  return 2310021130;
}

uint64_t crf_mde_seg_unload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Only_DereferenceCnt;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a3 + 32);
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v6);
    *(_QWORD *)(a3 + 32) = 0;
  }
  if (*(_DWORD *)(a3 + 48) == 1 && (v7 = *(_QWORD *)(a3 + 40)) != 0)
  {
    Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1, a2, v7);
    if ((Only_DereferenceCnt & 0x80000000) != 0)
      return Only_DereferenceCnt;
    *(_QWORD *)(a3 + 40) = 0;
    *(_DWORD *)(a3 + 48) = 0;
  }
  else
  {
    Only_DereferenceCnt = 0;
  }
  crf_free_conf((_QWORD *)a1, a3);
  v9 = *(_QWORD *)(a3 + 64);
  if (v9)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v9);
    *(_QWORD *)(a3 + 64) = 0;
  }
  v10 = *(_QWORD *)(a3 + 72);
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)(a3 + 72) = 0;
  }
  v11 = *(_QWORD *)(a3 + 80);
  if (v11)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v11);
    *(_QWORD *)(a3 + 80) = 0;
  }
  v12 = *(_QWORD *)(a3 + 88);
  if (v12)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v12);
    *(_QWORD *)(a3 + 88) = 0;
  }
  if (*(_WORD *)(a3 + 104))
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(a3 + 96);
    do
    {
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v15 + v13));
      v16 = (_QWORD *)(*(_QWORD *)(a3 + 96) + v13);
      *v16 = 0;
      heap_Free(*(_QWORD **)(a1 + 8), v16[1]);
      v15 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(v15 + v13 + 8) = 0;
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned __int16 *)(a3 + 104));
    heap_Free(*(_QWORD **)(a1 + 8), v15);
    *(_QWORD *)(a3 + 96) = 0;
    *(_WORD *)(a3 + 104) = 0;
  }
  v17 = *(_QWORD *)(a3 + 112);
  if (v17)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v17);
    *(_QWORD *)(a3 + 112) = 0;
  }
  v18 = *(_QWORD *)(a3 + 120);
  if (v18)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v18);
    *(_QWORD *)(a3 + 120) = 0;
  }
  v19 = *(_QWORD *)(a3 + 128);
  if (v19)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v19);
    *(_QWORD *)(a3 + 128) = 0;
  }
  v20 = *(_QWORD *)(a3 + 136);
  if (v20)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v20);
    *(_QWORD *)(a3 + 136) = 0;
  }
  return Only_DereferenceCnt;
}

_QWORD *crf_free_conf(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_BYTE *)(a2 + 8))
    {
      v5 = 0;
      do
        heap_Free((_QWORD *)v3[1], *(_QWORD *)(*(_QWORD *)a2 + 8 * v5++));
      while (v5 < *(unsigned __int8 *)(a2 + 8));
      v4 = *(_QWORD *)a2;
    }
    result = heap_Free((_QWORD *)v3[1], v4);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    result = heap_Free((_QWORD *)v3[1], v6);
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t crf_mde_getStrForCrossToken(uint64_t a1, char *__s, const char **a3, const char *a4, const char *a5, const char *a6)
{
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  char *v21;
  size_t v22;
  char *v23;
  const char *v24;
  size_t v25;
  const char *v26;
  char *v27;
  size_t v28;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  char *__s2;

  v12 = cstdlib_strlen(__s);
  __s2 = (char *)a4;
  v13 = cstdlib_strlen(a4);
  if (a5)
  {
    v14 = (unsigned __int16)cstdlib_strlen(a5);
    v32 = (unsigned __int16)cstdlib_strlen(a6);
  }
  else
  {
    v14 = 0;
    v32 = 0;
  }
  v30 = a1;
  v31 = a6;
  if (v12)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      if (v13 + v15 < v12 && !cstdlib_strncmp(&__s[v15], __s2, v13))
      {
        cstdlib_strncat((char *)a3[v17++], &__s[v16], v15 - v16);
        v16 = (unsigned __int16)(v13 + v15);
      }
      ++v15;
    }
    while (v12 != v15);
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  cstdlib_strncat((char *)a3[v17], &__s[v16], v12 - (unsigned __int16)v16);
  if (a5 && v17 != 0xFFFF)
  {
    v18 = 0;
    do
    {
      v19 = (char *)*a3;
      if (*(_DWORD *)(*(_QWORD *)(v30 + 8) + v18 + 28))
      {
        cstdlib_strcat(v19, a5);
        v20 = *a3;
        v21 = (char *)&(*a3)[v14];
        v22 = cstdlib_strlen(*a3);
        cstdlib_memmove(v21, v20, v22 + v14);
        v23 = (char *)*a3;
        v24 = a5;
        v25 = v14;
      }
      else
      {
        cstdlib_strcat(v19, v31);
        v26 = *a3;
        v27 = (char *)&(*a3)[v32];
        v28 = cstdlib_strlen(*a3);
        cstdlib_memmove(v27, v26, v28 + v32);
        v23 = (char *)*a3;
        v24 = v31;
        v25 = v32;
      }
      cstdlib_memcpy(v23, v24, v25);
      v18 += 48;
      ++a3;
    }
    while (48 * (unsigned __int16)(v17 + 1) != v18);
  }
  return 0;
}

uint64_t crf_mde_seg_label(uint64_t a1, char *__s, uint64_t a3, const char *a4, unsigned int a5, int a6, _WORD *a7, unsigned __int16 *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,char **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,char *a31,char *a32,char *a33,char *a34,char *a35,int a36)
{
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  const char **v59;
  const char **v60;
  const char **v61;
  unsigned __int16 **v62;
  _QWORD *v63;
  uint64_t k;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  unsigned __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  unsigned __int16 *v81;
  unint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int16 v120;
  unsigned __int16 v121;
  uint64_t v122;
  unsigned __int16 v123;
  int v124;
  const char *v125;
  const char *v126;
  unsigned __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned __int16 v132;
  unsigned __int16 v133;
  uint64_t v134;
  unsigned __int16 v135;
  unsigned __int16 v136;
  int v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  unsigned __int16 v142;
  char *v143;
  unsigned int v144;
  unsigned __int16 v145;
  size_t v146;
  char *v147;
  unsigned __int16 v148;
  const char *v149;
  size_t v150;
  __int16 v151;
  unsigned __int16 v152;
  int v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 *v161;
  _QWORD *v162;
  size_t v163;
  char *v164;
  unsigned __int16 *v165;
  uint64_t v166;
  __int16 v167;
  __int16 v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unsigned __int16 v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t features;
  uint64_t v177;
  int v178;
  uint64_t i;
  int v180;
  int v181;
  unsigned int v182;
  unsigned __int16 v183;
  uint64_t v184;
  unsigned __int16 v185;
  uint64_t v186;
  unsigned __int16 *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned __int16 *v191;
  unsigned int v192;
  __int16 v193;
  unsigned int v194;
  uint64_t v195;
  int v196;
  unsigned __int16 v197;
  unsigned int v198;
  unsigned __int16 v199;
  unsigned int v200;
  unsigned __int16 v201;
  unsigned int v202;
  int v204;
  _QWORD *v205;
  size_t v206;
  char *v207;
  unsigned __int16 *v208;
  unsigned __int16 v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  int v214;
  _QWORD *v215;
  size_t v216;
  char *v217;
  uint64_t v218;
  unsigned int v219;
  int v220;
  unsigned __int16 v221;
  unsigned __int16 *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  __int16 v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int16 *v231;
  unint64_t v232;
  unsigned __int16 v233;
  unsigned __int16 v234;
  unsigned int v235;
  uint64_t v236;
  unsigned __int16 *v237;
  unsigned int v238;
  unsigned int v239;
  int v241;
  uint64_t v242;
  unsigned __int16 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int16 *v247;
  unsigned __int16 *v248;
  uint64_t v249;
  _BOOL4 v250;
  int v251;
  unsigned __int16 v252;
  unsigned __int16 *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  int v258;
  char *v259;
  char *v260;
  unsigned __int16 v261;
  int v262;
  unsigned int v263;
  unsigned __int16 v264;
  unsigned __int16 j;
  unsigned __int16 *v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int16 v290;
  unsigned __int16 v291;
  unsigned __int16 v292;
  const char *v293;
  unsigned __int16 v294;
  unsigned __int16 v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  const char *v302;
  int v303;
  const char *v304;
  int v305;
  unsigned __int16 v306;
  const char *v307;
  int v308;
  unsigned __int16 v309;
  unsigned int v310;
  unint64_t v311;
  const char *v312;
  int v313;
  unsigned __int16 v314;
  unsigned int v315;
  const char *v316;
  int v317;
  unsigned __int16 v318;
  unsigned int v319;
  const char *v320;
  int v321;
  unsigned __int16 v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int16 *v338;
  int v339;
  const char **v340;
  const char *v341;
  char *v342;
  char *v343;
  __int16 v344;
  int v345;
  const char **v346;
  char **v347;
  char **v348;
  char *v349;
  char *v350;
  char *v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  int v355;
  int v356;
  char *v357;
  int v358;
  char v359;
  __int16 v360;
  int v361;
  const char *v362;
  unsigned __int16 v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  int v371;
  unsigned __int16 v372;
  unsigned __int16 v373;
  unsigned __int16 v374;
  _WORD *v375;
  _WORD *v376;
  unsigned __int16 *v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  __int16 v381;
  unsigned __int16 v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  unsigned __int16 v386;
  unsigned int v387;
  unsigned __int16 v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  unsigned __int16 v392;
  uint64_t v393;
  char **v394;
  int v395;
  unsigned __int16 v396;
  uint64_t v398;
  int v399;
  uint64_t v400;
  unsigned __int16 v402;
  _BYTE __c[11];
  char *__s1[2];
  int v405;
  char *v406;
  void *v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  char *v411;
  uint64_t v412[2];
  char __dst[21];
  char v414[8];
  uint64_t v415;
  uint64_t v416;

  v416 = *MEMORY[0x24BDAC8D0];
  v412[0] = 0;
  v412[1] = 0;
  v410 = 0;
  v411 = 0;
  v409 = 0;
  v399 = cstdlib_strlen(__s);
  v42 = cstdlib_strlen(a4);
  v395 = cstdlib_strlen(a4);
  v406 = 0;
  v407 = 0;
  v405 = 0;
  __s1[1] = 0;
  __s1[0] = 0;
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  v408 = 0;
  *(_WORD *)&__c[1] = -1;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a12 + 96))(a13, a14, "fecfg", "mde_morphweight", &__c[3], &__c[1], __c);
  if ((v43 & 0x80001FFF) == 0x8000000A)
    goto LABEL_2;
  v49 = 0;
  if (v43 < 0)
  {
    v50 = a3;
  }
  else
  {
    v50 = a3;
    if (*(_WORD *)&__c[1])
    {
      v51 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v51)
        *v51 = 0;
      v49 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    }
  }
  v381 = v49;
  v384 = a5;
  v52 = crf_mde_utils_dynstr_init(a1, (uint64_t)__s1, (unsigned __int16)(v42 + 16), 16);
  if ((v52 & 0x80000000) != 0)
  {
    v48 = v52;
    goto LABEL_15;
  }
  v48 = crf_mde_utils_dynstr_add(a1, (uint64_t)__s1, a4, 2);
  if ((v48 & 0x80000000) != 0)
  {
LABEL_15:
    v391 = 0;
    v392 = v42;
    LOWORD(v57) = 0;
    v58 = 0;
    v386 = 0;
    v389 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v383 = 0;
    v62 = 0;
    v396 = 0;
    v385 = 0;
    v63 = 0;
    goto LABEL_16;
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Doing CRF MDE segmentation for token \"%s\"", v45, v46, v47, (uint64_t)__s1[0]);
  v53 = *(const char **)(v50 + 88);
  if (v53 && cstdlib_strstr(__s1[0], v53))
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"found \"%s\" in token, skip CRF MDE segmentation", v54, v55, v56, *(_QWORD *)(v50 + 88));
    return v48;
  }
  v378 = a6;
  v377 = a8;
  if (!*(_QWORD *)(v50 + 96) || (v402 = 0, v92 = Utf8_LengthInBytes((unsigned __int8 *)__s1[0], 1), !v42))
  {
    v58 = 0;
    LOWORD(v57) = 0;
    goto LABEL_106;
  }
  v93 = v92;
  v375 = a7;
  v57 = 0;
  v94 = 0;
  do
  {
    v57 += isUmlaut(&__s1[0][(unsigned __int16)v94], (unsigned __int16)v93, *(unsigned __int8 ***)(v50 + 96), *(unsigned __int16 *)(v50 + 104), &v402);
    v94 += v93;
    v93 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][(unsigned __int16)v94], 1);
  }
  while ((unsigned __int16)v94 < v42);
  if ((_WORD)v57)
  {
    v415 = 0;
    *(_QWORD *)v414 = 0;
    v95 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4 * (unsigned __int16)v57);
    if (!v95)
      goto LABEL_2;
    v58 = v95;
    v96 = crf_mde_utils_dynstr_init(a1, (uint64_t)v414, (unsigned __int16)(v42 + 16), 16);
    if ((v96 & 0x80000000) != 0)
    {
      v48 = v96;
      v392 = v42;
    }
    else
    {
      v379 = v58;
      v97 = Utf8_LengthInBytes((unsigned __int8 *)__s1[0], 1);
      v98 = 0;
      v99 = 0;
      do
      {
        if (isUmlaut(&__s1[0][v99], v97, *(unsigned __int8 ***)(v50 + 96), *(unsigned __int16 *)(v50 + 104), &v402))
        {
          v100 = v402;
          cstdlib_strcpy(__dst, *(const char **)(*(_QWORD *)(v50 + 96) + 16 * v402 + 8));
          v101 = crf_mde_utils_dynstr_add(a1, (uint64_t)v414, __dst, 1);
          if ((v101 & 0x80000000) != 0)
            return v101;
          v102 = (unsigned __int16 *)(v379 + 4 * v98);
          *v102 = v99;
          v102[1] = cstdlib_strlen(*(const char **)(*(_QWORD *)(v50 + 96) + 16 * v100 + 8));
          ++v98;
        }
        else
        {
          cstdlib_strncpy(__dst, &__s1[0][v99], v97);
          __dst[v97] = 0;
          v101 = crf_mde_utils_dynstr_add(a1, (uint64_t)v414, __dst, 1);
          if ((v101 & 0x80000000) != 0)
            return v101;
        }
        v99 += v97;
        v97 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v99], 1);
      }
      while (v99 < v42);
      crf_mde_utils_dynstr_free((_QWORD *)a1, (uint64_t)__s1);
      v42 = cstdlib_strlen(*(const char **)v414);
      v103 = crf_mde_utils_dynstr_init(a1, (uint64_t)__s1, (unsigned __int16)(v42 + 16), 16);
      if ((v103 & 0x80000000) != 0)
      {
        v48 = v103;
        v392 = v42;
        LOWORD(v57) = v98;
      }
      else
      {
        v104 = crf_mde_utils_dynstr_add(a1, (uint64_t)__s1, *(const char **)v414, 2);
        LOWORD(v57) = v98;
        if ((v104 & 0x80000000) == 0)
        {
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"expanded umlaut token \"%s\"", v45, v46, v47, (uint64_t)__s1[0]);
          crf_mde_utils_dynstr_free((_QWORD *)a1, (uint64_t)v414);
          if (v98)
          {
            v108 = 0;
            v109 = v379 + 2;
            do
            {
              v109 += 4;
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"umlaut[%d] pos=%d len=%d", v105, v106, v107, v108++);
            }
            while (v98 != v108);
          }
          v58 = v379;
          LOWORD(v57) = v98;
          goto LABEL_105;
        }
        v48 = v104;
        v392 = v42;
      }
      v58 = v379;
    }
    v386 = 0;
    v389 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v383 = 0;
    v62 = 0;
    v396 = 0;
    v385 = 0;
    v391 = 0;
    v63 = 0;
    goto LABEL_16;
  }
  v58 = 0;
  LOWORD(v57) = 0;
LABEL_105:
  a7 = v375;
LABEL_106:
  v110 = v384 == 0;
  v111 = cstdlib_strlen(__s1[0]) + v384 == (unsigned __int16)v399;
  v112 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16 * *(unsigned __int16 *)(v50 + 10) + 8 * v42);
  if (!v112)
    goto LABEL_2;
  v63 = (_QWORD *)v112;
  v48 = crf_mde_seg_fv_new(a1, *(unsigned __int8 *)(v50 + 8), v412);
  v392 = v42;
  if ((v48 & 0x80000000) != 0)
  {
    v386 = 0;
    v389 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v383 = 0;
    v62 = 0;
    v396 = 0;
    v385 = 0;
    v391 = 0;
    goto LABEL_16;
  }
  v387 = v111;
  v376 = a7;
  v380 = v58;
  if (*(_DWORD *)(v50 + 144) == 1)
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"szSent %s", v45, v46, v47, (uint64_t)__s);
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"word %s", v113, v114, v115, (uint64_t)__s1[0]);
    if (*(_BYTE *)(v50 + 8))
    {
      v119 = 0;
      do
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"FEAT[%d] %s", v116, v117, v118, v119++);
      while (v119 < *(unsigned __int8 *)(v50 + 8));
    }
  }
  v374 = v57;
  if (v42)
  {
    v120 = 0;
    v121 = 0;
    do
    {
      v122 = v121;
      v123 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v121], 1);
      v124 = *(_DWORD *)(v50 + 12);
      if (v124 == 1
        || v124 == 2
        && ((v125 = *(const char **)(v50 + 80)) != 0 && !cstdlib_strncmp(&__s1[0][v122], v125, v123)
         || (v126 = *(const char **)(v50 + 64)) != 0 && !cstdlib_strncmp(&__s1[0][v122], v126, v123)))
      {
        ++v120;
      }
      v121 = v122 + v123;
    }
    while ((unsigned __int16)(v122 + v123) < v42);
  }
  else
  {
    v120 = 0;
  }
  v127 = v120 + 1;
  v128 = (unsigned __int16)(v120 + 1);
  v129 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v128);
  if (!v129)
    goto LABEL_2;
  v130 = v129;
  if (*(_DWORD *)(v50 + 12) == 2)
  {
    LOWORD(v57) = v374;
    v385 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4 * v128);
    v131 = v384;
    if (!v385)
      goto LABEL_2;
  }
  else
  {
    v385 = 0;
    v127 = 0;
    LOWORD(v57) = v374;
    v131 = v384;
  }
  v370 = v378 + v131;
  v371 = v378 + v131 + v395;
  v391 = v130;
  if (!v42)
  {
    v389 = 0;
    v145 = 0;
    goto LABEL_194;
  }
  v372 = v127;
  v396 = 0;
  v132 = 0;
  v133 = 0;
  v367 = v131;
  v390 = v42;
  while (1)
  {
    v134 = v133;
    v135 = Utf8_LengthInBytes((unsigned __int8 *)&__s1[0][v133], 1);
    v136 = v135;
    v137 = *(_DWORD *)(v50 + 12);
    if (v137 != 1)
      break;
    if (v135)
    {
      v142 = v135;
LABEL_148:
      v143 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v142 + 1);
      *(_QWORD *)(v391 + 8 * v396) = v143;
      if (!v143)
        goto LABEL_2;
      cstdlib_strncpy(v143, &__s1[0][v132], v142);
      if (*(_DWORD *)(v50 + 12) == 2)
        *(_DWORD *)(v385 + 4 * v396) = 0;
      ++v396;
      v132 = v134 + v136;
      v42 = v392;
    }
LABEL_152:
    v133 = v134 + v136;
    v144 = (unsigned __int16)(v134 + v136);
    if (v144 >= v42)
    {
      if (v144 == v132)
      {
        v389 = 0;
        v130 = v391;
        v145 = v396;
        v110 = v384 == 0;
        v127 = v372;
        goto LABEL_194;
      }
      v146 = (unsigned __int16)(v133 - v132);
      v147 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v146 + 1);
      *(_QWORD *)(v391 + 8 * v396) = v147;
      if (!v147)
        goto LABEL_2;
      cstdlib_strncpy(v147, &__s1[0][v132], v146);
      if (*(_DWORD *)(v50 + 12) == 2)
      {
        v148 = v390 + v384;
        if (v390 + v384 < (unsigned __int16)v399
          && TOK_IS_PUNCT(&__s[v367 + v42])
          && ((v149 = *(const char **)(v50 + 72)) == 0
           || (v150 = cstdlib_strlen(*(const char **)(v50 + 72)), cstdlib_strncmp(&__s[v367 + v42], v149, v150))))
        {
          do
            v151 = v148++;
          while (v148 < (unsigned __int16)v399 && TOK_IS_PUNCT(&__s[v148]));
          if (TOK_IS_PUNCT(&__s[v148]))
            v152 = v148;
          else
            v152 = v151;
          v153 = v152 - (unsigned __int16)(v390 + v384);
          v154 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v153 + 2);
          if (!v154)
            goto LABEL_2;
          v155 = v154;
          cstdlib_strncpy(v154, &__s[(unsigned __int16)(v390 + v384)], v153 + 1);
          v389 = (uint64_t)v155;
          v155[v153 + 1] = 0;
          v156 = 1;
          LOWORD(v57) = v374;
        }
        else
        {
          v156 = 0;
          v389 = 0;
        }
        v127 = v372;
        *(_DWORD *)(v385 + 4 * v396) = v156;
        v110 = v384 == 0;
      }
      else
      {
        v389 = 0;
        v110 = v384 == 0;
        v127 = v372;
      }
      v145 = v396 + 1;
      v130 = v391;
LABEL_194:
      v396 = v145;
      v373 = v145;
      LODWORD(v169) = *(unsigned __int16 *)(v50 + 10);
      if (*(_WORD *)(v50 + 10))
      {
        v170 = 0;
        while (1)
        {
          v171 = crf_mde_seg_set_padding_features(a1, (unsigned __int16)v170, *(unsigned __int8 *)(v50 + 8), v412, 1);
          if ((v171 & 0x80000000) != 0)
            break;
          v171 = crf_mde_seg_concat_strings(a1, (uint64_t)v412, &v411);
          if ((v171 & 0x80000000) != 0)
            break;
          v63[v170] = v411;
          v411 = 0;
          ++v170;
          v169 = *(unsigned __int16 *)(v50 + 10);
          if (v170 >= v169)
            goto LABEL_199;
        }
        v48 = v171;
        v386 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v383 = 0;
        v62 = 0;
        goto LABEL_225;
      }
LABEL_199:
      if (v396)
      {
        v172 = v127;
        v173 = v110;
        v174 = 0;
        v175 = v172;
        do
        {
          features = crf_mde_seg_get_features(a1, v130, v396, v385, v175, v174, *(_QWORD *)(v50 + 24), *(_QWORD *)v50, *(_BYTE *)(v50 + 8), v412, v173, v387);
          if ((features & 0x80000000) != 0)
            goto LABEL_226;
          features = crf_mde_seg_concat_strings(a1, (uint64_t)v412, &v411);
          if ((features & 0x80000000) != 0)
            goto LABEL_226;
          v169 = *(unsigned __int16 *)(v50 + 10);
          v63[v174 + v169] = v411;
          v411 = 0;
        }
        while (v396 != ++v174);
      }
      if ((_DWORD)v169)
      {
        v177 = 0;
        while (1)
        {
          features = crf_mde_seg_set_padding_features(a1, (unsigned __int16)v177, *(unsigned __int8 *)(v50 + 8), v412, 0);
          if ((features & 0x80000000) != 0)
            break;
          features = crf_mde_seg_concat_strings(a1, (uint64_t)v412, &v411);
          if ((features & 0x80000000) != 0)
            break;
          v169 = *(unsigned __int16 *)(v50 + 10);
          v63[v396 + v177 + v169] = v411;
          v411 = 0;
          if (++v177 >= v169)
            goto LABEL_209;
        }
LABEL_226:
        v48 = features;
        v386 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v383 = 0;
        v62 = 0;
LABEL_227:
        v183 = v373;
        LOWORD(v57) = v374;
        goto LABEL_228;
      }
LABEL_209:
      v178 = v396;
      if (*(_DWORD *)(v50 + 144) == 1 && v396)
      {
        for (i = 0; i != v396; ++i)
        {
          v180 = *(_DWORD *)(v50 + 12);
          if (v180 == 1)
          {
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"token[%d] %s", v45, v46, v47, i);
          }
          else if (v180 == 2)
          {
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"token[%d] %s punc = %d", v45, v46, v47, i);
          }
        }
        LODWORD(v169) = *(unsigned __int16 *)(v50 + 10);
      }
      v48 = crf_Process(*(_QWORD *)(v50 + 40), v63, v396 + 2 * v169, &v410, &v409);
      v58 = v380;
      LOWORD(v57) = v374;
      if ((v48 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v50 + 144) == 1)
        {
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"results : %d best", v45, v46, v47, *(unsigned int *)(v50 + 20));
          if (!v409)
            goto LABEL_295;
          v181 = 0;
          do
          {
            log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s ==> _%s_", v45, v46, v47, v63[(unsigned __int16)v181++]);
            v182 = v409;
          }
          while (v409 > (unsigned __int16)v181);
          v58 = v380;
        }
        else
        {
          v182 = v409;
        }
        if (v182)
        {
          v184 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(_DWORD *)(v50 + 20) * v396);
          if (v184)
          {
            v62 = (unsigned __int16 **)v184;
            if (*(_DWORD *)(v50 + 20))
            {
              v185 = 0;
              do
              {
                v186 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 40 * v396);
                v62[v185] = (unsigned __int16 *)v186;
                if (!v186)
                  goto LABEL_2;
                *((_QWORD *)v62[v185] + 1) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 48 * v396);
                v187 = v62[v185];
                if (!*((_QWORD *)v187 + 1))
                  goto LABEL_2;
                *v187 = 0;
                *((_DWORD *)v187 + 8) = 0;
              }
              while (*(_DWORD *)(v50 + 20) > ++v185);
            }
            v48 = crf_mde_utils_dynstr_init(a1, (uint64_t)&v407, 2 * (v42 & 0x7FFFu), 128);
            if ((v48 & 0x80000000) != 0)
            {
              v386 = 0;
              v59 = 0;
              v60 = 0;
              v61 = 0;
              v383 = 0;
LABEL_225:
              v183 = v373;
LABEL_228:
              v396 = v183;
              v58 = v380;
              goto LABEL_16;
            }
            v188 = *(_DWORD *)(v50 + 20);
            if (v188)
            {
              v189 = 0;
              v190 = v409;
              do
              {
                v191 = v62[(unsigned __int16)v189];
                *v191 = 0;
                if (v190)
                {
                  v192 = 0;
                  v193 = 0;
                  v194 = *(unsigned __int16 *)(v50 + 10);
                  v195 = v410;
                  do
                  {
                    if (v194 <= (unsigned __int16)v192 && v194 + v396 > v192)
                    {
                      v196 = *(unsigned __int8 *)(*(_QWORD *)(v195 + 8 * (unsigned __int16)v192) + 2 * v189);
                      if (v196 == 83 || v196 == 66)
                        *v191 = ++v193;
                    }
                    ++v192;
                  }
                  while (v190 > (unsigned __int16)v192);
                }
                else
                {
                  v193 = 0;
                }
                *v191 = v193 + 1;
                v197 = v189 + 1;
                v189 = (unsigned __int16)(v189 + 1);
              }
              while (v188 > v197);
              v198 = 0;
              v199 = 0;
              while (1)
              {
                cstdlib_memset(v407, 0, (unsigned __int16)v408);
                v363 = v199;
                *v62[v199] = 0;
                if (v409)
                  break;
LABEL_277:
                if (cstdlib_strlen((const char *)v407))
                {
                  v215 = *(_QWORD **)(a1 + 8);
                  v216 = cstdlib_strlen((const char *)v407);
                  *(_QWORD *)(*((_QWORD *)v62[v199] + 1) + 48 * *v62[v199]) = heap_Calloc(v215, 1, v216 + 1);
                  v217 = *(char **)(*((_QWORD *)v62[v199] + 1) + 48 * *v62[v199]);
                  if (!v217)
                    goto LABEL_2;
                  cstdlib_strcpy(v217, (const char *)v407);
                  ++*v62[v199];
                  v178 = v396;
                }
                ++v199;
                v198 = (unsigned __int16)(v363 + 1);
                if (*(_DWORD *)(v50 + 20) <= v198)
                  goto LABEL_281;
              }
              v200 = 0;
              v388 = 0;
              v201 = 0;
              while (1)
              {
                v202 = *(unsigned __int16 *)(v50 + 10);
                if (v202 <= v201 && v202 + v178 > v200)
                {
                  v204 = *(unsigned __int8 *)(*(_QWORD *)(v410 + 8 * v201) + 2 * v198);
                  if ((v204 == 83 || v204 == 66) && cstdlib_strlen((const char *)v407))
                  {
                    v205 = *(_QWORD **)(a1 + 8);
                    v206 = cstdlib_strlen((const char *)v407);
                    *(_QWORD *)(*((_QWORD *)v62[v199] + 1) + 48 * *v62[v199]) = heap_Calloc(v205, 1, v206 + 1);
                    v207 = *(char **)(*((_QWORD *)v62[v199] + 1) + 48 * *v62[v199]);
                    if (!v207)
                      goto LABEL_2;
                    cstdlib_strcpy(v207, (const char *)v407);
                    v208 = v62[v199];
                    v209 = *v208;
                    *(_DWORD *)(*((_QWORD *)v208 + 1) + 48 * *v208 + 28) = 1;
                    *v208 = v209 + 1;
                    cstdlib_memset(v407, 0, (unsigned __int16)v408);
                    v178 = v396;
                  }
                  if (cstdlib_strlen((const char *)v407))
                  {
                    v210 = a1;
                    v211 = 1;
                  }
                  else
                  {
                    v210 = a1;
                    v211 = 2;
                  }
                  v48 = crf_mde_utils_dynstr_add(v210, (uint64_t)&v407, *(const char **)(v391 + 8 * v388), v211);
                  if ((v48 & 0x80000000) != 0)
                    goto LABEL_300;
                  ++v388;
                  if (v200 + 1 < (unsigned __int16)v409)
                  {
                    v212 = *(unsigned __int8 *)(*(_QWORD *)(v410 + 8 * (v200 + 1)) + 2 * v198);
                    if (v212 != 66 && v212 != 83 && *(_QWORD *)(v50 + 80))
                    {
                      if (cstdlib_strlen((const char *)v407))
                      {
                        v213 = a1;
                        v214 = 1;
                      }
                      else
                      {
                        v213 = a1;
                        v214 = 2;
                      }
                      v48 = crf_mde_utils_dynstr_add(v213, (uint64_t)&v407, *(const char **)(v50 + 80), v214);
                      if ((v48 & 0x80000000) != 0)
                        goto LABEL_300;
                    }
                  }
                }
                v200 = ++v201;
                if (v409 <= v201)
                  goto LABEL_277;
              }
            }
LABEL_281:
            v406 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1024);
            if (!v406)
            {
              v48 = 2310021130;
              log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v218, v45, v46, v47, v352);
LABEL_300:
              v386 = 0;
              v59 = 0;
              v60 = 0;
              v61 = 0;
              v383 = 0;
              goto LABEL_227;
            }
            HIWORD(v405) = 1024;
            if (*(_DWORD *)(v50 + 144) == 1)
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Segmentation results:", v45, v46, v47, 0);
              v219 = *(_DWORD *)(a3 + 20);
              if (v219)
              {
                v220 = 0;
                v221 = 0;
                while (1)
                {
                  cstdlib_strcpy(v406, "");
                  __sprintf_chk(v414, 0, 0x40uLL, "nbest[%d] ", v220);
                  v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, v414);
                  if ((v48 & 0x80000000) != 0)
                    goto LABEL_396;
                  v222 = v62[v221];
                  if (*v222)
                  {
                    v223 = 0;
                    v224 = 0;
                    do
                    {
                      v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, *(char **)(*((_QWORD *)v222 + 1) + v223));
                      if ((v48 & 0x80000000) != 0)
                        goto LABEL_396;
                      v222 = v62[v221];
                      v225 = *v222;
                      if ((int)v224 + 1 < v225)
                      {
                        v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, " | ");
                        if ((v48 & 0x80000000) != 0)
                          goto LABEL_396;
                        v222 = v62[v221];
                        v225 = *v222;
                      }
                      ++v224;
                      v223 += 48;
                    }
                    while (v224 < v225);
                  }
                  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v45, v46, v47, (uint64_t)v406);
                  v220 = ++v221;
                  v219 = *(_DWORD *)(a3 + 20);
                  if (v219 <= v221)
                    goto LABEL_302;
                }
              }
            }
            else
            {
              v219 = *(_DWORD *)(a3 + 20);
LABEL_302:
              if (v219)
              {
                v227 = 0;
                v368 = 0;
                v228 = 0;
                v229 = a3;
                do
                {
                  if (*(_QWORD *)(v229 + 96))
                  {
                    v230 = (unsigned __int16)v228;
                    v231 = v62[(unsigned __int16)v228];
                    if (*v231)
                    {
                      v364 = v228;
                      v232 = 0;
                      v233 = 0;
                      do
                      {
                        v234 = cstdlib_strlen(*(const char **)(*((_QWORD *)v231 + 1) + 48 * v232));
                        if (v374)
                        {
                          v235 = v234 + v233;
                          v236 = v374;
                          v237 = (unsigned __int16 *)(v380 + 2);
                          do
                          {
                            v238 = *(v237 - 1);
                            if (v238 >= v233)
                            {
                              v239 = *v237 + v238;
                              if (v235 > v238 && v239 > v235)
                              {
                                *((_DWORD *)v62[v230] + 8) = 5;
                                v227 = 1;
                              }
                              if (v239 < v235)
                                *(_DWORD *)(*((_QWORD *)v62[v230] + 1) + 48 * v232 + 36) = 1;
                            }
                            v237 += 2;
                            --v236;
                          }
                          while (v236);
                        }
                        v233 += v234;
                        ++v232;
                        v231 = v62[v230];
                      }
                      while (v232 < *v231);
                      v229 = a3;
                      v219 = *(_DWORD *)(a3 + 20);
                      v228 = v364;
                    }
                  }
                  v241 = v228 + 1;
                  if (v219 > (unsigned __int16)(v228 + 1))
                  {
                    v242 = (unsigned __int16)v228;
                    v365 = v228 + 1;
                    v243 = v228 + 1;
                    do
                    {
                      v244 = v243;
                      if (*v62[v242] == *v62[v243])
                      {
                        v245 = 0;
                        v246 = -1;
                        while (1)
                        {
                          v247 = v62[v242];
                          v248 = v62[v244];
                          if (++v246 >= (unint64_t)*v247)
                            break;
                          v249 = *((_QWORD *)v248 + 1);
                          v250 = *(_DWORD *)(v249 + v245 + 28) != 1
                              || cstdlib_strcmp(*(const char **)(*((_QWORD *)v247 + 1) + v245), *(const char **)(v249 + v245)) == 0;
                          v245 += 48;
                          if (!v250)
                            goto LABEL_332;
                        }
                        *((_DWORD *)v248 + 8) = 4;
                        v368 = 1;
LABEL_332:
                        v229 = a3;
                      }
                      v243 = v244 + 1;
                      v219 = *(_DWORD *)(v229 + 20);
                    }
                    while (v219 > (unsigned __int16)(v244 + 1));
                    v241 = v365;
                  }
                  v228 = v241;
                }
                while (v219 > (unsigned __int16)v241);
LABEL_338:
                if ((v368 == 1 || v227 == 1) && *(_DWORD *)(a3 + 144) == 1)
                {
                  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Segmentation results (remove duplicates):", v45, v46, v47, 0);
                  v219 = *(_DWORD *)(a3 + 20);
                  if (v219)
                  {
                    v251 = 0;
                    v252 = 0;
                    do
                    {
                      cstdlib_strcpy(v406, "");
                      __sprintf_chk(v414, 0, 0x40uLL, "nbest[%d] ", v251);
                      v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, v414);
                      if ((v48 & 0x80000000) != 0)
                        goto LABEL_396;
                      v253 = v62[v252];
                      if (*v253)
                      {
                        v254 = 0;
                        v255 = 0;
                        do
                        {
                          v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, *(char **)(*((_QWORD *)v253 + 1) + v254));
                          if ((v48 & 0x80000000) != 0)
                            goto LABEL_396;
                          v253 = v62[v252];
                          v256 = *v253;
                          if ((int)v255 + 1 < v256)
                          {
                            v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, " | ");
                            if ((v48 & 0x80000000) != 0)
                              goto LABEL_396;
                            v253 = v62[v252];
                            v256 = *v253;
                          }
                          ++v255;
                          v254 += 48;
                        }
                        while (v255 < v256);
                      }
                      v257 = *((_DWORD *)v253 + 8);
                      if (v257 == 4)
                      {
                        v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, " MDE_Duplicate");
                        if ((v48 & 0x80000000) != 0)
                          goto LABEL_396;
                        v257 = *((_DWORD *)v62[v252] + 8);
                      }
                      if (v257 == 5)
                      {
                        v48 = crf_mde_utils_add2Str(a1, (const char **)&v406, (unsigned __int16 *)&v405 + 1, " MDE_UmlautSplit");
                        if ((v48 & 0x80000000) != 0)
                          goto LABEL_396;
                      }
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v45, v46, v47, (uint64_t)v406);
                      v251 = ++v252;
                      v219 = *(_DWORD *)(a3 + 20);
                    }
                    while (v219 > v252);
                  }
                }
                v258 = *(_DWORD *)(a3 + 56);
                if (v258 == 1)
                {
                  if (!*(_QWORD *)(a3 + 120))
                    goto LABEL_360;
                }
                else if (v258 || *(_QWORD *)(a3 + 120))
                {
LABEL_360:
                  if (a21 == 1)
                  {
                    v259 = cstdlib_strchr(a22, 95);
                    if (v259)
                      v260 = v259 + 1;
                    else
                      v260 = a22;
                    v362 = v260;
                    v361 = *v260;
                    v219 = *(_DWORD *)(a3 + 20);
                  }
                  else
                  {
                    v362 = 0;
                    v361 = 32;
                  }
                  v48 = crf_mde_utils_do_validation(a1, a12, a13, a14, a15, a16, a17, *(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120), *(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 136), (uint64_t)v62, v219, *(_DWORD *)(a3 + 144), *(const char **)(a3 + 64), &v406, (unsigned __int16 *)&v405 + 1);
                  if ((v48 & 0x80000000) == 0)
                  {
                    v263 = *(_DWORD *)(a3 + 20);
                    if (v263)
                    {
                      v264 = 0;
                      for (j = 0; j < v263; ++j)
                      {
                        v266 = v62[j];
                        v267 = *((_DWORD *)v266 + 8);
                        if (v267 < 2 || v267 == 3 && !*(_QWORD *)(a3 + 136))
                        {
                          v268 = *v266;
                          if (v268 > v264)
                            v264 = v268;
                        }
                      }
                      v386 = v264;
                      if (v264)
                      {
                        v269 = v264;
                        v383 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 2 * v264);
                        if (!v383)
                        {
                          v48 = 2310021130;
                          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v270, v271, v272, v273, v353);
                          goto LABEL_397;
                        }
                        v61 = (const char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v269);
                        if (!v61)
                        {
                          v48 = 2310021130;
                          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v274, v275, v276, v277, v353);
                          v59 = 0;
                          v60 = 0;
                          goto LABEL_398;
                        }
                        v60 = (const char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v269);
                        if (!v60)
                        {
                          v48 = 2310021130;
                          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v278, v279, v280, v281, v353);
                          v59 = 0;
                          goto LABEL_398;
                        }
                        v59 = (const char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * v269);
                        if (v59)
                        {
                          v286 = 0;
                          while (1)
                          {
                            v287 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 128);
                            v61[v286] = (const char *)v287;
                            if (!v287)
                              break;
                            v288 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 128);
                            v60[v286] = (const char *)v288;
                            if (!v288)
                              break;
                            v289 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 128);
                            v59[v286] = (const char *)v289;
                            if (!v289)
                              break;
                            cstdlib_strcpy((char *)v61[v286], "");
                            cstdlib_strcpy((char *)v60[v286], "");
                            cstdlib_strcpy((char *)v59[v286++], "");
                            if (v269 == v286)
                            {
                              v359 = 0;
                              goto LABEL_401;
                            }
                          }
                        }
                        v48 = 2310021130;
                        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v282, v283, v284, v285, v353);
LABEL_471:
                        v396 = v373;
                        goto LABEL_399;
                      }
                    }
                    v386 = 0;
                    v383 = 0;
                    v61 = 0;
                    v60 = 0;
                    v59 = 0;
                    v359 = 1;
LABEL_401:
                    v290 = v370 + cstdlib_strlen(__s1[0]);
                    v291 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v290], 1);
                    v355 = v290;
                    v356 = (unsigned __int16)v399;
                    if ((unsigned __int16)v399 > v290
                      && (v292 = v291,
                          v293 = &__s[v290],
                          (*(unsigned int (**)(uint64_t, uint64_t, const char *))(a12 + 128))(a13, a14, v293)))
                    {
                      LOWORD(v371) = v290;
                      do
                      {
                        if (!cstdlib_strncmp(v293, "_", v292))
                          break;
                        v294 = Utf8_LengthInBytes((unsigned __int8 *)&__s[(unsigned __int16)(v371 + v292)], 1);
                        v355 = (unsigned __int16)(v371 + v292);
                        LOWORD(v371) = v371 + v292;
                        if ((unsigned __int16)v399 <= (unsigned __int16)v371)
                          break;
                        v292 = v294;
                        v293 = &__s[(unsigned __int16)v371];
                      }
                      while ((*(unsigned int (**)(uint64_t, uint64_t, const char *))(a12 + 128))(a13, a14, v293));
                    }
                    else
                    {
                      LOWORD(v371) = v290;
                    }
                    if (*(_DWORD *)(a3 + 20))
                    {
                      v369 = 0;
                      v382 = 0;
                      v366 = 0;
                      v295 = 0;
                      v358 = a36;
                      v357 = a35;
                      while (1)
                      {
                        v400 = v295;
                        v296 = *((_DWORD *)v62[v295] + 8);
                        if (v296 < 2 || v296 == 3 && !*(_QWORD *)(a3 + 136))
                        {
                          cstdlib_strcpy(a31, "");
                          cstdlib_strcpy(a32, "");
                          cstdlib_strcpy(a33, "");
                          v297 = (uint64_t)v62[v400];
                          if (*(_WORD *)(v297 + 16))
                          {
                            v298 = 0;
                            v299 = v400;
                            v360 = v400 + 1;
                            while (1)
                            {
                              v393 = v298;
                              v300 = 5 * v298;
                              crf_mde_getStrForCrossToken(v297, *(char **)(*(_QWORD *)(v297 + 24) + 80 * v298), v60, *(const char **)(a3 + 64), "◄", "◖");
                              crf_mde_getStrForCrossToken((uint64_t)v62[v299], *(char **)(*((_QWORD *)v62[v299] + 3) + 16 * v300 + 48), v61, *(const char **)(a3 + 64), 0, 0);
                              crf_mde_getStrForCrossToken((uint64_t)v62[v299], *(char **)(*((_QWORD *)v62[v299] + 3) + 16 * v300 + 64), v59, *(const char **)(a3 + 64), 0, 0);
                              if (*v62[v299])
                              {
                                v301 = 0;
                                do
                                {
                                  v302 = v61[v301];
                                  v303 = cstdlib_strlen(v302);
                                  *(_WORD *)(v383 + 2 * v301) = Utf8_LengthInUtf8chars((unint64_t)v302, v303);
                                  v304 = v60[v301];
                                  v305 = cstdlib_strlen(v304);
                                  v306 = Utf8_LengthInUtf8chars((unint64_t)v304, v305);
                                  v307 = v59[v301];
                                  v308 = cstdlib_strlen(v307);
                                  v309 = Utf8_LengthInUtf8chars((unint64_t)v307, v308);
                                  v310 = *(unsigned __int16 *)(v383 + 2 * v301);
                                  if (v306 > v310)
                                  {
                                    *(_WORD *)(v383 + 2 * v301) = v306;
                                    v310 = v306;
                                  }
                                  if (v310 < v309)
                                    *(_WORD *)(v383 + 2 * v301) = v309;
                                  ++v301;
                                }
                                while (v301 < *v62[v400]);
                                v299 = v400;
                                if (*v62[v400])
                                {
                                  v311 = 0;
                                  do
                                  {
                                    v312 = v61[v311];
                                    v313 = cstdlib_strlen(v312);
                                    v314 = Utf8_LengthInUtf8chars((unint64_t)v312, v313);
                                    if (*(unsigned __int16 *)(v383 + 2 * v311) > v314)
                                    {
                                      v315 = v314;
                                      do
                                      {
                                        cstdlib_strcat((char *)v61[v311], "~");
                                        ++v315;
                                      }
                                      while (v315 < *(unsigned __int16 *)(v383 + 2 * v311));
                                    }
                                    v316 = v60[v311];
                                    v317 = cstdlib_strlen(v316);
                                    v318 = Utf8_LengthInUtf8chars((unint64_t)v316, v317);
                                    if (*(unsigned __int16 *)(v383 + 2 * v311) > v318)
                                    {
                                      v319 = v318;
                                      do
                                      {
                                        cstdlib_strcat((char *)v60[v311], "~");
                                        ++v319;
                                      }
                                      while (v319 < *(unsigned __int16 *)(v383 + 2 * v311));
                                    }
                                    v320 = v59[v311];
                                    v321 = cstdlib_strlen(v320);
                                    v322 = Utf8_LengthInUtf8chars((unint64_t)v320, v321);
                                    if (*(unsigned __int16 *)(v383 + 2 * v311) > v322)
                                    {
                                      v323 = v322;
                                      do
                                      {
                                        cstdlib_strcat((char *)v59[v311], "~");
                                        ++v323;
                                      }
                                      while (v323 < *(unsigned __int16 *)(v383 + 2 * v311));
                                    }
                                    ++v311;
                                    v299 = v400;
                                  }
                                  while (v311 < *v62[v400]);
                                }
                              }
                              cstdlib_strcpy(a31, "");
                              cstdlib_strcpy(a32, "");
                              cstdlib_strcpy(a33, "");
                              if (*v62[v299])
                              {
                                v327 = 0;
                                do
                                {
                                  cstdlib_strcat(a31, v60[v327]);
                                  cstdlib_strcat(a32, v61[v327]);
                                  cstdlib_strcat(a33, v59[v327++]);
                                }
                                while (v327 < *v62[v400]);
                              }
                              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call nbest[%d] solution[%d] segpat:%s patPOS:%s pos:%s pron:%s feat:%s", v324, v325, v326, v369);
                              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call phon:%s", v328, v329, v330, (uint64_t)a31);
                              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call pos :%s", v331, v332, v333, (uint64_t)a32);
                              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"crosstoken call cgn :%s", v334, v335, v336, (uint64_t)a33);
                              cstdlib_strcpy(a34, "");
                              cstdlib_strcpy(__dst, "normal");
                              v337 = oneword_crosstoken(a1, a18, a19, a20, a21, a22, 0, v361, v362, __dst, 0, a23, a24, a25, a26, a27, a28, a29, a30,
                                       (const char **)&a31,
                                       (const char **)&a32,
                                       (const char **)&a33,
                                       (const char **)&a34);
                              if ((v337 & 0x80000000) != 0)
                                break;
                              HIWORD(v354) = WORD1(a31);
                              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"write to lingdb nbest[%d] solution[%d] pos:%s pron:%s cgn:%s", v45, v46, v47, v369);
                              v338 = v62[v400];
                              v339 = *((_DWORD *)v338 + 8);
                              if (v358)
                              {
                                if (v339 == 3 && !*(_QWORD *)(a3 + 136))
                                  v340 = (const char **)&a32;
                                else
                                  v340 = (const char **)(*((_QWORD *)v338 + 3) + 80 * v393 + 16);
                                v341 = *v340;
                                v342 = a31;
                                v343 = a33;
                                v344 = v360 + *v338 * v381;
                                v345 = *(_DWORD *)(a3 + 52);
                              }
                              else
                              {
                                if (v339 == 3 && !*(_QWORD *)(a3 + 136))
                                  v346 = (const char **)&a32;
                                else
                                  v346 = (const char **)(*((_QWORD *)v338 + 3) + 80 * v393 + 16);
                                v341 = *v346;
                                v342 = a31;
                                v343 = a33;
                                v344 = v360 + *v338 * v381;
                                v345 = 1;
                              }
                              LOWORD(v354) = v344;
                              v48 = hlp_Write2WordRec(a9, a10, a11, v377, v384, (unsigned __int16)v371 - (unsigned __int16)v378, v382, v341, v342, v343, v357, v354, v345);
                              if ((v48 & 0x80000000) != 0)
                                goto LABEL_465;
                              if ((v359 & 1) == 0)
                              {
                                v398 = v386;
                                v394 = (char **)v59;
                                v347 = (char **)v60;
                                v348 = (char **)v61;
                                do
                                {
                                  v349 = *v348++;
                                  cstdlib_strcpy(v349, "");
                                  v350 = *v347++;
                                  cstdlib_strcpy(v350, "");
                                  v351 = *v394++;
                                  cstdlib_strcpy(v351, "");
                                  --v398;
                                }
                                while (v398);
                              }
                              ++v382;
                              v298 = v393 + 1;
                              v299 = v400;
                              v297 = (uint64_t)v62[v400];
                              if (v393 + 1 >= (unint64_t)*(unsigned __int16 *)(v297 + 16))
                                goto LABEL_457;
                            }
                            v48 = v337;
                            goto LABEL_465;
                          }
LABEL_457:
                          v366 = 1;
                        }
                        v295 = v400 + 1;
                        v369 = (unsigned __int16)(v400 + 1);
                        if (*(_DWORD *)(a3 + 20) <= (unsigned __int16)(v400 + 1))
                          goto LABEL_462;
                      }
                    }
                    v366 = 0;
LABEL_462:
                    if (v356 != v355)
                      v371 = v370 + cstdlib_strlen(__s1[0]);
LABEL_465:
                    if (v366 != 1)
                      goto LABEL_471;
                    v58 = v380;
                    LOWORD(v57) = v374;
                    v50 = a3;
LABEL_467:
                    v168 = v371;
                    goto LABEL_183;
                  }
                  goto LABEL_396;
                }
                if (v219)
                {
                  v366 = 0;
                  v261 = 0;
                  v50 = a3;
                  do
                  {
                    v48 = crf_mde_utils_write_morphemes(a1, *(_DWORD *)(a3 + 56), *(_QWORD *)(a3 + 120), a12, a13, a14, a9, v47, a10, a11, v377, v384, v378, v62[v261], __s, (unsigned __int16 *)&v405);
                    if ((v48 & 0x80000000) != 0)
                    {
                      v383 = 0;
                      v61 = 0;
                      v60 = 0;
                      v59 = 0;
                      v386 = 0;
                      goto LABEL_465;
                    }
                    if ((unsigned __int16)v405 == (unsigned __int16)v399)
                      v262 = v399;
                    else
                      v262 = v371;
                    v371 = v262;
                    ++v261;
                    v366 = 1;
                  }
                  while (*(_DWORD *)(a3 + 20) > v261);
                  v386 = 0;
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  v383 = 0;
                  v58 = v380;
                  LOWORD(v57) = v374;
                  goto LABEL_467;
                }
LABEL_396:
                v386 = 0;
LABEL_397:
                v59 = 0;
                v60 = 0;
                v61 = 0;
                v383 = 0;
LABEL_398:
                v396 = v373;
LABEL_399:
                v58 = v380;
                LOWORD(v57) = v374;
                v50 = a3;
                goto LABEL_16;
              }
            }
            v368 = 0;
            v227 = 0;
            goto LABEL_338;
          }
LABEL_2:
          v48 = 2310021130;
          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v44, v45, v46, v47, v352);
          return v48;
        }
      }
LABEL_295:
      v386 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v383 = 0;
      v62 = 0;
      v226 = v373;
LABEL_296:
      v396 = v226;
      goto LABEL_16;
    }
  }
  if (v137 != 2)
    goto LABEL_152;
  v138 = *(const char **)(v50 + 80);
  if (!v138 || cstdlib_strncmp(&__s1[0][v134], v138, v135))
  {
    v139 = *(const char **)(v50 + 64);
    if (!v139 || cstdlib_strncmp(&__s1[0][v134], v139, v136))
      goto LABEL_152;
  }
  v140 = *(const char **)(v50 + 64);
  if (!v140 || cstdlib_strncmp(&__s1[0][v134], v140, v136))
  {
    v141 = *(const char **)(v50 + 80);
    if (v141)
      cstdlib_strncmp(&__s1[0][v134], v141, v136);
  }
  v142 = v134 - v132;
  if ((_WORD)v134 != v132 && cstdlib_strcmp(a22, "prompt") && cstdlib_strcmp(a22, "internal-nuance-system-norm"))
    goto LABEL_148;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Error Parsing For Morpheme - character=%d, word=%s", v45, v46, v47, v134);
  v157 = *(_DWORD *)(v50 + 56);
  if (!v157)
  {
    v58 = v380;
    v158 = __s;
    if (!*(_QWORD *)(v50 + 120))
      goto LABEL_174;
LABEL_190:
    v386 = 0;
    v389 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v383 = 0;
    v62 = 0;
    goto LABEL_16;
  }
  v58 = v380;
  v158 = __s;
  if (v157 != 1 || !*(_QWORD *)(v50 + 120))
    goto LABEL_190;
LABEL_174:
  v159 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned int *)(v50 + 20));
  if (!v159)
    goto LABEL_2;
  v62 = (unsigned __int16 **)v159;
  v160 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 40);
  *v62 = (unsigned __int16 *)v160;
  if (!v160)
    goto LABEL_2;
  *((_QWORD *)*v62 + 1) = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 48);
  v161 = *v62;
  if (!*((_QWORD *)*v62 + 1))
    goto LABEL_2;
  *v161 = 0;
  *((_DWORD *)v161 + 8) = 0;
  v162 = *(_QWORD **)(a1 + 8);
  v163 = cstdlib_strlen(__s1[0]);
  *(_QWORD *)(*((_QWORD *)*v62 + 1) + 48 * **v62) = heap_Calloc(v162, 1, v163 + 1);
  v164 = *(char **)(*((_QWORD *)*v62 + 1) + 48 * **v62);
  if (!v164)
    goto LABEL_2;
  cstdlib_strcpy(v164, __s1[0]);
  v165 = *v62;
  *v165 = **v62 + 1;
  v48 = crf_mde_utils_write_morphemes(a1, 0, 0, a12, a13, a14, a9, v166, a10, a11, v377, v384, v378, v165, v158, (unsigned __int16 *)&v405);
  if ((v48 & 0x80000000) != 0)
  {
    v386 = 0;
    v389 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v383 = 0;
    v226 = 1;
    goto LABEL_296;
  }
  v386 = 0;
  v389 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v383 = 0;
  if ((unsigned __int16)v405 == (unsigned __int16)v399)
    v167 = v399;
  else
    v167 = v371;
  v168 = v167;
  v396 = 1;
LABEL_183:
  *v376 = v168 - v378;
LABEL_16:
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"CRF MDE segmentation for token \"%s\" : %s", v45, v46, v47, (uint64_t)__s1[0]);
  crf_mde_seg_fv_dealloc((_QWORD *)a1, (uint64_t)v412);
  if (v406)
  {
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v406);
    v406 = 0;
  }
  if ((_WORD)v57)
    heap_Free(*(_QWORD **)(a1 + 8), v58);
  if (v386)
  {
    for (k = 0; k != v386; ++k)
    {
      if (v61)
      {
        v65 = (uint64_t)v61[k];
        if (v65)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v65);
          v61[k] = 0;
        }
      }
      if (v60)
      {
        v66 = (uint64_t)v60[k];
        if (v66)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v66);
          v60[k] = 0;
        }
      }
      if (v59)
      {
        v67 = (uint64_t)v59[k];
        if (v67)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v67);
          v59[k] = 0;
        }
      }
    }
    if (v383)
      heap_Free(*(_QWORD **)(a1 + 8), v383);
    if (v61)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v61);
    if (v60)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v60);
    if (v59)
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v59);
  }
  crf_mde_utils_dynstr_free((_QWORD *)a1, (uint64_t)__s1);
  if (v407)
  {
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v407);
    v407 = 0;
  }
  if (v389)
    heap_Free(*(_QWORD **)(a1 + 8), v389);
  if (v391)
  {
    if (v396)
    {
      v68 = v396;
      v69 = (uint64_t *)v391;
      do
      {
        if (*v69)
        {
          heap_Free(*(_QWORD **)(a1 + 8), *v69);
          *v69 = 0;
        }
        ++v69;
        --v68;
      }
      while (v68);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v391);
    heap_Free(*(_QWORD **)(a1 + 8), v385);
  }
  if (v63)
  {
    v70 = *(unsigned __int16 *)(v50 + 10);
    if (2 * v70 + v392)
    {
      v71 = 0;
      do
      {
        v72 = v71;
        v73 = v63[v71];
        if (v73)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v73);
          v63[v72] = 0;
          v70 = *(unsigned __int16 *)(v50 + 10);
        }
        v71 = v72 + 1;
      }
      while (v392 + 2 * v70 > (unsigned __int16)(v72 + 1));
    }
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v63);
  }
  v74 = v410;
  if (v410)
  {
    v75 = v409;
    if (v409)
    {
      v76 = 0;
      do
      {
        v77 = v76;
        v78 = *(_QWORD *)(v410 + 8 * v76);
        if (v78)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v78);
          *(_QWORD *)(v410 + 8 * v77) = 0;
          v75 = v409;
        }
        v76 = v77 + 1;
      }
      while (v75 > (unsigned __int16)(v77 + 1));
      v74 = v410;
    }
    heap_Free(*(_QWORD **)(a1 + 8), v74);
    v410 = 0;
  }
  if (v62)
  {
    if (*(_DWORD *)(v50 + 20))
    {
      v79 = 0;
      do
      {
        v80 = v79;
        v81 = v62[v79];
        if (*v81)
        {
          v82 = 0;
          do
          {
            heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)v81 + 1) + 48 * v82));
            *(_QWORD *)(*((_QWORD *)v62[v80] + 1) + 48 * v82) = 0;
            v83 = v62[v80];
            v84 = *((_QWORD *)v83 + 1);
            if (*(_WORD *)(v84 + 48 * v82 + 8))
            {
              v85 = 0;
              v86 = 0;
              do
              {
                v87 = *(_QWORD *)(*(_QWORD *)(v84 + 48 * v82 + 16) + v85 + 8);
                if (v87)
                {
                  heap_Free(*(_QWORD **)(a1 + 8), v87);
                  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62[v80] + 1) + 48 * v82 + 16) + v85 + 8) = 0;
                  v83 = v62[v80];
                }
                v84 = *((_QWORD *)v83 + 1);
                v88 = *(_QWORD *)(v84 + 48 * v82 + 16);
                v89 = *(_QWORD *)(v88 + v85 + 16);
                if (v89)
                {
                  heap_Free(*(_QWORD **)(a1 + 8), v89);
                  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62[v80] + 1) + 48 * v82 + 16) + v85 + 16) = 0;
                  v83 = v62[v80];
                  v84 = *((_QWORD *)v83 + 1);
                  v88 = *(_QWORD *)(v84 + 48 * v82 + 16);
                }
                v90 = *(_QWORD *)(v88 + v85 + 24);
                if (v90)
                {
                  heap_Free(*(_QWORD **)(a1 + 8), v90);
                  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62[v80] + 1) + 48 * v82 + 16) + v85 + 24) = 0;
                  v83 = v62[v80];
                  v84 = *((_QWORD *)v83 + 1);
                }
                ++v86;
                v85 += 32;
              }
              while (v86 < *(unsigned __int16 *)(v84 + 48 * v82 + 8));
            }
            heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v84 + 48 * v82 + 16));
            *(_QWORD *)(*((_QWORD *)v62[v80] + 1) + 48 * v82++ + 16) = 0;
            v81 = v62[v80];
          }
          while (v82 < *v81);
        }
        heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)v81 + 1));
        *((_QWORD *)v62[v80] + 1) = 0;
        crf_mde_utils_CRF_MDE_SEGPAT_T_free((_QWORD *)a1, (uint64_t *)v62[v80] + 3, v62[v80][8]);
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v62[v80]);
        v62[v80] = 0;
        v79 = v80 + 1;
      }
      while (*(_DWORD *)(v50 + 20) > (unsigned __int16)(v80 + 1));
    }
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v62);
  }
  return v48;
}

uint64_t isUmlaut(const char *a1, int a2, unsigned __int8 **a3, unsigned int a4, _WORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;

  if (!a4)
    return 0;
  v9 = 0;
  v10 = a4;
  while (1)
  {
    v11 = Utf8_LengthInBytes(*a3, 1);
    if (a2 == v11 && !cstdlib_strncmp(a1, (const char *)*a3, v11))
      break;
    ++v9;
    a3 += 2;
    if (v10 == v9)
      return 0;
  }
  *a5 = v9;
  return 1;
}

uint64_t crf_mde_seg_concat_strings(uint64_t a1, uint64_t a2, char **a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int v17;

  if (*(_DWORD *)(a2 + 8))
  {
    v6 = 0;
    LODWORD(v7) = 0;
    do
      v7 = v7
         + cstdlib_strlen(*(const char **)(*(_QWORD *)a2 + 16 * v6++))
         + 2;
    while (*(_DWORD *)(a2 + 8) > v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, v7);
  *a3 = (char *)v8;
  if (v8)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        cstdlib_strcat(*a3, *(const char **)(*(_QWORD *)a2 + 16 * v14));
        v15 = *(_DWORD *)(a2 + 8);
        if (v15 - 1 > v13)
        {
          cstdlib_strcat(*a3, " ");
          v15 = *(_DWORD *)(a2 + 8);
        }
        v13 = ++v14;
      }
      while (v15 > v14);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v9, v10, v11, v12, v17);
    return 2310021130;
  }
}

uint64_t crf_mde_seg_set_param_value(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5, int *a6, int *a7, _DWORD *a8)
{
  const char *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v15 = (const char *)(a2 + a3);
  if (!cstdlib_strcmp(v15, "nbest"))
  {
    *a8 = cstdlib_atoi((unsigned __int8 *)(a2 + a4));
    return log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, %s: %s", v18, v19, v20, (uint64_t)v15);
  }
  if (!cstdlib_strcmp(v15, "padding"))
  {
    *a5 = cstdlib_atoi((unsigned __int8 *)(a2 + a4));
    return log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde param, %s: %s", v18, v19, v20, (uint64_t)v15);
  }
  if (!cstdlib_strcmp(v15, "annotation"))
  {
    result = cstdlib_strcmp((const char *)(a2 + a4), "BMES");
    if ((_DWORD)result)
    {
      result = cstdlib_strcmp((const char *)(a2 + a4), "BI");
      if ((_DWORD)result)
        return result;
      v21 = 1;
    }
    else
    {
      v21 = 2;
    }
    *a7 = v21;
    return result;
  }
  result = cstdlib_strcmp(v15, "type");
  if (!(_DWORD)result)
  {
    result = cstdlib_strcmp((const char *)(a2 + a4), "char");
    if (!(_DWORD)result)
    {
      v17 = 1;
      goto LABEL_18;
    }
    result = cstdlib_strcmp((const char *)(a2 + a4), "morpheme");
    if (!(_DWORD)result)
    {
      v17 = 2;
LABEL_18:
      *a6 = v17;
    }
  }
  return result;
}

uint64_t crf_mde_seg_set_featureparam_value(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char **a5)
{
  const char *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;

  v9 = (const char *)(a2 + a3);
  if (cstdlib_strcmp(v9, "isvowel"))
    return 0;
  v10 = *(_QWORD **)(a1 + 8);
  v11 = (const char *)(a2 + a4);
  v12 = cstdlib_strlen(v11);
  v13 = (char *)heap_Calloc(v10, 1, v12 + 1);
  *a5 = v13;
  if (v13)
  {
    cstdlib_strcpy(v13, v11);
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"set mde featureparam, %s: %s", v18, v19, v20, (uint64_t)v9);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v14, v15, v16, v17, v22);
  return 2310021130;
}

uint64_t oneword_posparser_Open(uint64_t a1)
{
  _OWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  __int128 v16[2];
  _QWORD *(*v17)(_QWORD *, _QWORD *);
  int v18;
  const char *v19;
  unsigned __int8 v20;
  __int16 v21;

  v19 = 0;
  *(_DWORD *)(a1 + 2004) = 0;
  *(_QWORD *)&v16[0] = 0;
  v20 = 0;
  v18 = 0;
  v21 = -1;
  v2 = (_OWORD *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, __int128 *, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "arwpospredictiononly", v16, &v21, &v20);
  if ((result & 0x80000000) != 0 || !v21)
  {
    if ((result & 0x80000000) != 0)
      return result;
    return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
  }
  v11 = cstdlib_strchr(**(char ***)&v16[0], v20);
  if (v11)
    *v11 = 0;
  if (cstdlib_strcmp(**(const char ***)&v16[0], "1"))
    return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
  v18 = 1;
  result = posparser_Open(*(_QWORD *)a1, (uint64_t *)(a1 + 2008));
  if ((result & 0x80000000) == 0)
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 2008) + 8) = *v2;
    v12 = *(_QWORD *)(a1 + 2008);
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v12 + 56) = *(_QWORD *)(a1 + 104);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(a1 + 88);
    result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &v19);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcpy((char *)(*(_QWORD *)(a1 + 2008) + 240), v19);
      cstdlib_strcpy((char *)(*(_QWORD *)(a1 + 2008) + 243), "pos");
      v13 = *(_QWORD *)(a1 + 2008);
      result = getPosparserIGTreesAndDict(*(_QWORD *)a1, *(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), (_DWORD *)(v13 + 232), (uint64_t *)(v13 + 216), (uint64_t *)(v13 + 224), (_DWORD *)(v13 + 236), (const char *)(v13 + 240), &v18);
      if ((result & 0x80000000) == 0)
      {
        if (v18)
        {
          *(_DWORD *)(a1 + 2004) = 1;
          v14 = *(_QWORD **)(*(_QWORD *)a1 + 8);
          v15 = (uint64_t *)(*(_QWORD *)(a1 + 2008) + 256);
          v16[0] = xmmword_24D285F60;
          v16[1] = *(_OWORD *)off_24D285F70;
          v17 = ssftmap_ElemFreeString;
          result = ssftmap_ObjOpen(v14, 0, v16, v15);
          if ((result & 0x80000000) == 0)
            return posparser_getPosMap(*(_QWORD **)(a1 + 2008));
          return result;
        }
        return oneword_posparser_Close(a1, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
  return result;
}

uint64_t oneword_posparser_Close(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 2008);
  if (v9)
  {
    if (v9[32])
    {
      v10 = ssftmap_ObjClose(v9[32]);
      v9 = *(_QWORD **)(a1 + 2008);
      if ((v10 & 0x80000000) != 0)
        goto LABEL_10;
    }
    else
    {
      v10 = 0;
    }
    if (v9[27] && v9[28])
    {
      v10 = freePosparserIGTrees(*(_QWORD *)a1, v9 + 27, v9 + 28, a4, a5, a6, a7, a8);
      v9 = *(_QWORD **)(a1 + 2008);
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_10:
  posparser_Close(v9);
  *(_QWORD *)(a1 + 2008) = 0;
  *(_DWORD *)(a1 + 2004) = 0;
  return v10;
}

uint64_t oneword_posparser_Reopen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = oneword_posparser_Close(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
    return oneword_posparser_Open(a1);
  return result;
}

uint64_t oneword_posparser_Start(uint64_t a1)
{
  uint64_t result;

  result = posparser_ProcessStart(*(char **)(a1 + 2008));
  if ((result & 0x80000000) == 0 && !*(_DWORD *)(*(_QWORD *)(a1 + 2008) + 248))
  {
    posparser_ProcessEnd(*(_QWORD **)(a1 + 2008));
    result = 0;
    *(_DWORD *)(a1 + 2004) = 0;
  }
  return result;
}

uint64_t oneword_posparser_End(uint64_t a1)
{
  posparser_ProcessEnd(*(_QWORD **)(a1 + 2008));
  return 0;
}

uint64_t oneword_posparser_Process(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *);
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  int v35;
  unsigned int v36;
  unsigned __int16 v37;
  char *v38;
  void *__src;
  __int16 v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *__s;
  __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  __int128 __b;
  __int128 v49;
  int v50;
  unsigned __int16 v51;
  int v52;
  int v53;

  v46 = 0;
  v45 = 0;
  v43 = 0;
  __s = 0;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  __src = 0;
  v37 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 104))(a2, a3, 1, 0, &v46);
  if ((v6 & 0x80000000) != 0)
    goto LABEL_22;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(a1[7] + 184))(a2, a3, v46, 0, &v45) & 0x80000000) != 0)
    return v6;
  if (v45 != 1)
    return v6;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(a1[7] + 176))(a2, a3, v46, 0, &__s, &v41);
  if ((v6 & 0x80000000) != 0 || (unsigned __int16)v41 < 2u)
    return v6;
  v7 = cstdlib_strlen(__s);
  v8 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v7 + 1);
  v43 = v8;
  if (!v8)
    goto LABEL_34;
  v13 = v8;
  cstdlib_strcpy(v8, __s);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[7] + 176))(a2, a3, v46, 1, &__src, &v37);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = (char *)heap_Alloc(*(_QWORD *)(*a1 + 8), 32 * v37);
    v38 = v15;
    if (v15)
    {
      v16 = (uint64_t)v15;
      cstdlib_memcpy(v15, __src, 32 * v37);
      v17 = v46;
      v52 = 0;
      v53 = 0;
      v51 = 0;
      v50 = 0;
      __b = 0u;
      v49 = 0u;
      v18 = v37;
      v47 = v37;
      cstdlib_memset(&__b, 0, 0x20uLL);
      LODWORD(__b) = 1;
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 184))(a2, a3, v17, 3, (char *)&v53 + 2) & 0x80000000) != 0|| HIWORD(v53) != 1|| ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[7] + 104))(a2, a3, 3, v17, &v53) & 0x80000000) != 0)
      {
LABEL_15:
        v21 = v16;
      }
      else
      {
        v19 = 0;
        v20 = 32 * v18 + 32;
        while ((_WORD)v53)
        {
          v20 += 32;
          --v19;
          if (((*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 120))(a2, a3) & 0x80000000) != 0)
            goto LABEL_15;
        }
        if (v19)
        {
          v21 = heap_Realloc(*(uint64_t **)(*a1 + 8), v16, v20);
          if (!v21)
          {
            log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 54000, 0, v30, v31, v32, v33, v36);
            LODWORD(v18) = v37;
            goto LABEL_17;
          }
        }
        else
        {
          v21 = v16;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[7] + 104))(a2, a3, 3, v17, &v53) & 0x80000000) == 0)
        {
          v34 = v53;
          if ((_WORD)v53)
          {
            do
            {
              if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v34, 1, 1, &v52, (char *)&v52 + 2) & 0x80000000) != 0)break;
              if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v53, 2, 1, &v51, (char *)&v52 + 2) & 0x80000000) != 0)break;
              if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v53, 0, 1, &v50, (char *)&v52 + 2) & 0x80000000) != 0)break;
              LODWORD(__b) = 59;
              DWORD1(__b) = (unsigned __int16)v52;
              v35 = *(_DWORD *)(v21 + 12) + (unsigned __int16)v52;
              DWORD2(__b) = v51;
              HIDWORD(__b) = v35;
              LODWORD(v49) = v51 - (unsigned __int16)v52;
              DWORD2(v49) = v50;
              posPInsertTOKMarker(v21, &v47, &__b);
              if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v53, &v53) & 0x80000000) != 0)break;
              v34 = v53;
            }
            while ((_WORD)v53);
            LODWORD(v18) = v47;
          }
        }
      }
      v38 = (char *)v21;
      v37 = v18;
      v16 = v21;
LABEL_17:
      v14 = posparser_ExtractWords((_DWORD *)a1[251], v16, v18, v13, v7, &v42, (unsigned __int16 *)&v41 + 1);
      if ((v14 & 0x80000000) == 0)
      {
        v14 = posparser_Process(a1[251], a2, a3, v42, HIWORD(v41), 0, v46, &v43, (uint64_t *)&v38, &v37);
        if ((v14 & 0x80000000) == 0)
        {
          v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *))(a1[7] + 160);
          v23 = v46;
          v24 = cstdlib_strlen(v43);
          v14 = v22(a2, a3, v23, 0, (unsigned __int16)(v24 + 1), v43, &v40);
          if ((v14 & 0x80000000) == 0)
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(a1[7] + 160))(a2, a3, v46, 1, v37, v38, &v40);
        }
      }
      goto LABEL_21;
    }
LABEL_34:
    v6 = 2310021130;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 54000, 0, v9, v10, v11, v12, v36);
    return v6;
  }
LABEL_21:
  v6 = v14;
LABEL_22:
  if (v43)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v43);
  v25 = (uint64_t)v38;
  if (v38)
  {
    v26 = v37;
    if (v37)
    {
      v27 = 0;
      v28 = 0;
      do
      {
        if (*(_DWORD *)&v38[v27] == 58)
        {
          heap_Free(*(_QWORD **)(*a1 + 8), *(_QWORD *)&v38[v27 + 24]);
          *(_QWORD *)&v38[v27 + 24] = 0;
          v26 = v37;
        }
        ++v28;
        v27 += 32;
      }
      while (v28 < v26);
      v25 = (uint64_t)v38;
    }
    heap_Free(*(_QWORD **)(*a1 + 8), v25);
  }
  if (v42)
    posparser_FreeWords((_QWORD *)a1[251], v42, HIWORD(v41));
  return v6;
}

uint64_t dt_Main(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  const char **v12;
  const char *v13;
  unsigned int v14;
  const char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int Word;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t appended;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 IsEmpty;
  char v54;
  char v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *);
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  size_t v77;
  void *v78;
  size_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  unsigned int v96;
  uint64_t (*v97)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v98;
  unsigned __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  const char *v108;
  size_t v109;
  char *v110;
  char *v111;
  size_t v112;
  __int16 v113;
  size_t *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v126;
  _BOOL4 v127;
  size_t *v128;
  unsigned __int16 v129;
  unsigned __int16 v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned __int16 v138;
  char *v139;
  char *__s;
  unsigned __int16 v141;
  int v142;
  _OWORD __b[2];
  _OWORD v144[2];
  char __dst[128];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  memset(v144, 0, sizeof(v144));
  memset(__b, 0, sizeof(__b));
  v142 = 0;
  v141 = 0;
  v139 = 0;
  __s = 0;
  v138 = 0;
  v137 = 0;
  cstdlib_memset(__b, 0, 0x20uLL);
  v12 = (const char **)(a1 + 168);
  cstdlib_strcpy(*(char **)(a1 + 168), "");
  *(_BYTE *)(*(_QWORD *)(a1 + 160) + 127) = 0;
  if (!cstdlib_strstr((char *)(a1 + 584), a6))
  {
    v13 = *(const char **)(a1 + 160);
    v14 = cstdlib_strlen(v13) + 1;
    v15 = *(const char **)(a1 + 160);
    v16 = cstdlib_strlen(v15);
    v17 = utf8_Utf8ToDepes((uint64_t)v13, v14, 0, (uint64_t)v15, v16 + 1, &v137, 0);
    if ((v17 & 0x80000000) != 0)
      return v17;
  }
  v18 = *(char **)(a1 + 160);
  v19 = cstdlib_strlen(v18);
  v20 = Transcription_Con((uint64_t)v144, a1 + 888, v18, v19 + 1, 4, 1);
  v21 = LH_ERROR_to_VERROR(v20);
  if ((v21 & 0x80000000) != 0)
  {
    v43 = v21;
LABEL_100:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v22, v23, v24, v25, v126);
    return v43;
  }
  v134 = a4;
  v26 = PtrQueue_Con((uint64_t)__b, a1 + 888, 5u, 5);
  v31 = LH_ERROR_to_VERROR(v26);
  if ((v31 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v27, v28, v29, v30, v126);
    appended = v31;
    goto LABEL_94;
  }
  Word = _LexDT_FindWord(a5, (uint64_t)v144, (uint64_t)__b);
  v33 = LH_ERROR_to_VERROR(Word);
  v38 = v33;
  if ((v33 & 0x80000000) != 0)
  {
    v39 = v33 & 0x1FFF;
    v40 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if (v39 != 266)
    {
      log_OutPublic(v40, (uint64_t)"FE_ONEWORD", 34004, 0, v34, v35, v36, v37, v126);
      goto LABEL_36;
    }
    log_OutPublic(v40, (uint64_t)"FE_ONEWORD", 34005, 0, v34, v35, v36, v37, v126);
  }
  if (PtrQueue_IsEmpty((uint64_t)__b))
  {
    v41 = 1;
    appended = v38;
    if (!(_DWORD)a2)
      goto LABEL_94;
LABEL_29:
    v54 = v41;
    if (cstdlib_strcmp(*v12, ""))
      v55 = 0;
    else
      v55 = v54;
    if ((v55 & 1) == 0)
    {
      if (dynamic_strcat((const char **)(a1 + 168), ";_", (size_t *)(a1 + 200), *(uint64_t **)(*(_QWORD *)a1 + 8)))
      {
        v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 56) + 160);
        v57 = cstdlib_strlen(*(const char **)(a1 + 168));
        appended = v56(a3, v134, a2, 11, (unsigned __int16)(v57 + 1), *(_QWORD *)(a1 + 168), (char *)&v142 + 2);
      }
      else
      {
LABEL_87:
        appended = 2310021130;
      }
    }
    goto LABEL_94;
  }
  v141 = 0;
  v131 = v31;
  if (!(_DWORD)a2)
    goto LABEL_26;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 184))(a3, v134, a2, 11, &v141);
  v45 = v141;
  if (v44 < 0 || v141 != 1)
    goto LABEL_19;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 56) + 176))(a3, v134, a2, 11, &__s, &v142);
  if ((v38 & 0x80000000) != 0)
  {
LABEL_36:
    appended = v38;
    goto LABEL_94;
  }
  v45 = v141;
LABEL_19:
  if (!v45 || !__s)
  {
LABEL_26:
    cstdlib_strcpy((char *)*v12, "");
    v129 = 3;
LABEL_27:
    IsEmpty = PtrQueue_IsEmpty((uint64_t)__b);
    v41 = 1;
    appended = v38;
    if (IsEmpty)
    {
      if (!(_DWORD)a2)
        goto LABEL_94;
      goto LABEL_29;
    }
    v132 = 0;
    v127 = a2 == 0;
    v128 = (size_t *)(a1 + 200);
    v135 = a2;
    while (1)
    {
      v58 = PtrQueue_Item((uint64_t)__b);
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"DT: %s", v59, v60, v61, *(_QWORD *)(v58 + 8));
      cstdlib_strcpy(__dst, "dtpostproc");
      v130 = cstdlib_strlen(__dst);
      v133 = v58;
      if (*(_DWORD *)(a1 + 576) && !*(_DWORD *)(a1 + 840))
      {
        v136 = 0;
        v80 = (unsigned __int16)(2 * cstdlib_strlen(*(const char **)(v58 + 8))) | 1u;
        v81 = *(_QWORD *)(a1 + 176);
        if (*(_QWORD *)(a1 + 208) < v80)
        {
          v82 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 176), v80);
          if (!v82)
          {
            appended = 2310021130;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v83, v84, v85, v86, v126);
            goto LABEL_90;
          }
          v81 = v82;
          *(_QWORD *)(a1 + 176) = v82;
          *(_QWORD *)(a1 + 208) = v80;
        }
        appended = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 152) + 72))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), 1, *(_QWORD *)(v133 + 8), v80, v81, 0);
        v87 = *(char **)(a1 + 176);
        v88 = cstdlib_strlen(v87);
        v89 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)v87, v88);
        if (v89 >= *(unsigned __int16 *)(a1 + 192))
        {
          v90 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 160), v89 + 1);
          if (!v90)
            goto LABEL_93;
          *(_QWORD *)(a1 + 160) = v90;
          *(_QWORD *)(a1 + 192) = v89 + 1;
        }
        if (!cstdlib_strstr((char *)(a1 + 584), a6))
        {
          v95 = *(const char **)(a1 + 176);
          v96 = cstdlib_strlen(v95);
          appended = utf8_DepesToUtf8((uint64_t)v95, v96, 0, *(_QWORD *)(a1 + 160), v89, &v136, 0);
          if ((appended & 0x80000000) != 0)
            goto LABEL_94;
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 160) + v136) = 0;
      }
      else
      {
        v62 = cstdlib_strlen(*(const char **)(v58 + 8)) + 1;
        v63 = *(char **)(a1 + 160);
        if (*(_QWORD *)(a1 + 192) < (unint64_t)v62)
        {
          v64 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 160), v62);
          if (!v64)
          {
            appended = 2310021130;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v65, v66, v67, v68, v126);
            PDELETE_Transcription(a1 + 888, v133);
            goto LABEL_92;
          }
          v63 = (char *)v64;
          *(_QWORD *)(a1 + 160) = v64;
          *(_QWORD *)(a1 + 192) = v62;
        }
        cstdlib_strcpy(v63, *(const char **)(v58 + 8));
        appended = 0;
        v72 = *(_DWORD *)(a1 + 840);
        if (v72 || !v62)
          goto LABEL_60;
        v73 = 0;
        v74 = 1;
        do
        {
          v75 = *(const char **)(a1 + 160);
          v76 = &v75[v73];
          if (v75[v73] == 126)
          {
            v77 = cstdlib_strlen(v75);
            cstdlib_memmove((void *)(v76 + 1), v76, v77 + v74);
            v78 = (void *)(*(_QWORD *)(a1 + 160) + v73);
            v79 = cstdlib_strlen("¡");
            cstdlib_memcpy(v78, "¡", v79);
            ++v62;
          }
          ++v73;
          --v74;
        }
        while (v73 < v62);
        appended = 0;
        a2 = v135;
      }
      v72 = *(_DWORD *)(a1 + 840);
LABEL_60:
      if (v72)
      {
        v139 = *(char **)(a1 + 160);
      }
      else
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v69, v70, v71, (uint64_t)__dst);
        v97 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
        v98 = *(const char **)(a1 + 160);
        v99 = cstdlib_strlen(v98);
        v100 = v97(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v98, v99);
        LODWORD(v31) = v131;
        if ((v100 & 0x80000000) != 0)
          goto LABEL_89;
        if (cstdlib_strcmp(a6, "normal"))
        {
          cstdlib_strcat(__dst, "_");
          cstdlib_strcat(__dst, a6);
        }
        if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst) & 0x80000000) != 0)
        {
          __dst[v130] = 0;
          v100 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst);
          if ((v100 & 0x80000000) != 0)
          {
LABEL_89:
            appended = v100;
LABEL_90:
            PDELETE_Transcription(a1 + 888, v133);
            goto LABEL_94;
          }
        }
        appended = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104)
                                                                                                  + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &v139, &v138);
        if ((appended & 0x80000000) != 0)
          goto LABEL_90;
        v139[v138] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v101, v102, v103, (uint64_t)__dst);
        if (v138)
        {
          v107 = 0;
          do
          {
            v108 = &v139[v107];
            v109 = cstdlib_strlen("¡");
            if (cstdlib_strncmp(v108, "¡", v109))
            {
              ++v107;
            }
            else
            {
              v110 = &v139[v107 + 1];
              v111 = &v139[v107 + 2];
              v112 = cstdlib_strlen(v139);
              cstdlib_memmove(v110, v111, v112 - v107 + 1);
              v139[v107++] = 126;
              a2 = v135;
            }
          }
          while (v107 < v138);
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v104, v105, v106, (uint64_t)__dst);
      }
      LODWORD(v31) = v131;
      if ((v132 & 1) != 0)
      {
        if ((_DWORD)a2)
        {
          v113 = cstdlib_strlen(v139);
          v114 = (size_t *)(a1 + 200);
          v129 += v113 + 1;
          if (*v128 < v129)
          {
            v115 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), v129);
            if (!v115)
            {
LABEL_93:
              appended = 2310021130;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v91, v92, v93, v94, v126);
              goto LABEL_94;
            }
            *v12 = (const char *)v115;
            v114 = (size_t *)(a1 + 200);
            *v128 = v129;
          }
          if (!dynamic_strcat((const char **)(a1 + 168), v139, v114, *(uint64_t **)(*(_QWORD *)a1 + 8))
            || !dynamic_strcat((const char **)(a1 + 168), "\x12", v128, *(uint64_t **)(*(_QWORD *)a1 + 8)))
          {
            goto LABEL_87;
          }
        }
      }
      else
      {
        appended = oneword_AppendPhon(a1, v139, "*", (uint64_t)"*", 0, v127);
        if ((appended & 0x80000000) != 0)
          goto LABEL_90;
      }
      PtrQueue_Remove((uint64_t)__b);
      PDELETE_Transcription(a1 + 888, v133);
      v132 = 1;
      if (PtrQueue_IsEmpty((uint64_t)__b))
      {
        v41 = 0;
        if ((_DWORD)a2)
          goto LABEL_29;
        goto LABEL_94;
      }
    }
  }
  appended = 2310021130;
  v46 = cstdlib_strlen(__s) + 3;
  v47 = *(char **)(a1 + 168);
  if (*(_QWORD *)(a1 + 200) >= (unint64_t)v46)
    goto LABEL_24;
  v48 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), v46);
  if (v48)
  {
    v47 = (char *)v48;
    *v12 = (const char *)v48;
    *(_QWORD *)(a1 + 200) = v46;
LABEL_24:
    cstdlib_strcpy(v47, __s);
    v129 = v46;
    LODWORD(v31) = v131;
    if (!dynamic_strcat((const char **)(a1 + 168), "\x12", (size_t *)(a1 + 200), *(uint64_t **)(*(_QWORD *)a1 + 8)))
      goto LABEL_94;
    goto LABEL_27;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v49, v50, v51, v52, v126);
LABEL_92:
  LODWORD(v31) = v131;
LABEL_94:
  v116 = Transcription_Des((uint64_t)v144);
  v117 = LH_ERROR_to_VERROR(v116);
  if ((appended & 0x80000000) == 0)
  {
    v122 = v117;
    if ((v117 & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34004, 0, v118, v119, v120, v121, v126);
      appended = v122;
    }
  }
  if ((v31 & 0x80000000) == 0)
  {
    v123 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)&__b[0] + 16))(__b);
    v124 = LH_ERROR_to_VERROR(v123);
    if ((appended & 0x80000000) == 0)
    {
      v43 = v124;
      if ((v124 & 0x80000000) != 0)
        goto LABEL_100;
    }
  }
  return appended;
}

uint64_t mde_stemafx_Main(uint64_t a1, const char *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  int v22;

  v22 = 0;
  if (*(_BYTE *)(a1 + 286) == 1
    && cstdlib_strlen(__s) >= *(unsigned __int8 *)(a1 + 282)
    && cstdlib_strlen(__s) <= *(unsigned __int8 *)(a1 + 283)
    && (*(_BYTE *)(a1 + 284) != 1
     || (v13 = *__s, (v13 - 65) < 0x1A)
     || (v14 = v13 - 128, v14 <= 0x25) && ((1 << v14) & 0x200605C001) != 0))
  {
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 104))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2, __s, 128);
    if ((v15 & 0x80000000) != 0)
      return v15;
    cstdlib_strcpy(*(char **)(a1 + 160), "");
    cstdlib_strcpy(*(char **)(a1 + 168), "");
    cstdlib_strcpy(*(char **)(a1 + 176), "");
    v11 = hlp_MdeRecurse((_QWORD *)a1, __s, 0, &v22, 0, 0, a2);
    if ((v11 & 0x80000000) == 0 && !v22)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde stem affix failed", v16, v17, v18, v21);
      cstdlib_strcpy(*(char **)(a1 + 160), __s);
      cstdlib_strcpy(*(char **)(a1 + 168), "");
      cstdlib_strcpy(*(char **)(a1 + 176), "");
      if ((unsigned __int16)cstdlib_strlen(__s))
      {
        v19 = 0;
        while (dynamic_strcat((const char **)(a1 + 168), " ", (size_t *)(a1 + 200), *(uint64_t **)(*(_QWORD *)a1 + 8))
             && dynamic_strcat((const char **)(a1 + 176), " ", (size_t *)(a1 + 208), *(uint64_t **)(*(_QWORD *)a1 + 8)))
        {
          v19 += utf8_determineUTF8CharLength(__s[(unsigned __int16)v19]);
          if ((unsigned __int16)cstdlib_strlen(__s) <= (unsigned __int16)v19)
            return v11;
        }
        return 2310021130;
      }
    }
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde stem affix cfg settings do not apply on %s", a6, a7, a8, (uint64_t)__s);
    v11 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 104))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2, __s, 128);
    if ((v11 & 0x80000000) == 0)
    {
      cstdlib_strcpy(*(char **)(a1 + 160), __s);
      cstdlib_strcpy(*(char **)(a1 + 168), "");
      cstdlib_strcpy(*(char **)(a1 + 176), "");
      if ((unsigned __int16)cstdlib_strlen(__s))
      {
        v12 = 0;
        while (dynamic_strcat((const char **)(a1 + 168), " ", (size_t *)(a1 + 200), *(uint64_t **)(*(_QWORD *)a1 + 8))
             && dynamic_strcat((const char **)(a1 + 176), " ", (size_t *)(a1 + 208), *(uint64_t **)(*(_QWORD *)a1 + 8)))
        {
          v12 += utf8_determineUTF8CharLength(__s[(unsigned __int16)v12]);
          if ((unsigned __int16)cstdlib_strlen(__s) <= (unsigned __int16)v12)
            return v11;
        }
        return 2310021130;
      }
    }
  }
  return v11;
}

uint64_t hlp_MdeRecurse(_QWORD *a1, const char *a2, unsigned int a3, _DWORD *a4, int a5, char *a6, const char *a7)
{
  uint64_t v14;
  uint64_t v15;
  const char **v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  unsigned __int16 v33;
  uint64_t v34;
  char v35;
  char *v36;
  const char *v37;
  char *v38;
  size_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  const char *v50;
  char *v51;
  const char *v52;
  int v53;
  signed int v54;
  const char *v55;
  const char *v56;
  signed int v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  signed int v61;
  int v62;
  signed int v63;
  signed int v64;
  int v65;
  signed int v66;
  size_t v67;
  int v68;
  int v69;
  size_t v70;
  int v71;
  size_t v72;
  int v73;
  size_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  size_t v85;
  int v86;
  int v87;
  size_t v88;
  int v89;
  size_t v90;
  int v91;
  size_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  const char *v96;
  char *v97;
  const char *v98;
  const char **v99;
  char *v100;
  unsigned __int16 v101;
  int v102;
  signed int v103;
  const char *v104;
  const char *v105;
  signed int v106;
  __int16 v107;
  int v108;
  signed int v109;
  int v110;
  signed int v111;
  signed int v112;
  int v113;
  signed int v114;
  size_t v115;
  int v116;
  int v117;
  size_t v118;
  int v119;
  size_t v120;
  int v121;
  size_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  size_t v133;
  int v134;
  int v135;
  size_t v136;
  int v137;
  size_t v138;
  int v139;
  size_t v140;
  uint64_t v141;
  int v142;
  int v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int16 v154;
  const char *v155;
  int v156;
  char *v157;
  char *v158;
  size_t v159;
  char *v160;
  char v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  const char *v166;
  char *v167;
  size_t *v168;
  int v169;
  signed int v170;
  const char *v171;
  const char **v172;
  __int16 v173;
  signed int v174;
  const char *v175;
  uint64_t v176;
  int v177;
  signed int v178;
  int v179;
  signed int v180;
  signed int v181;
  int v182;
  signed int v183;
  size_t v184;
  int v185;
  int v186;
  size_t v187;
  int v188;
  size_t v189;
  int v190;
  size_t v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  size_t v202;
  int v203;
  int v204;
  size_t v205;
  int v206;
  size_t v207;
  int v208;
  size_t v209;
  uint64_t *v210;
  int v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int16 v217;
  const char *v218;
  int v219;
  _QWORD *v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int16 v225;
  char v226;
  unsigned __int8 v227;
  unsigned __int16 v228;
  const char *v229;
  const char *v230;
  char *v231;
  size_t *v232;
  char *__s;
  char *__sa;
  const char **v235;
  char *v236;
  unsigned int v237;
  unsigned int v238;
  char v239;
  char v240;
  size_t *v241;
  char *v242;
  char *v243;
  unsigned __int16 v244;
  size_t *v245;
  const char **v246;
  const char **v247;
  const char **v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  size_t *v252;
  size_t *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char v258[3];
  char __dst[3];
  unsigned __int8 v260;
  int v261;
  uint64_t v262;
  uint64_t v263[2];

  v262 = 0;
  v263[0] = 0;
  v261 = 0;
  v260 = 0;
  cstdlib_strcpy(__dst, "1*");
  cstdlib_strcpy(v258, "  ");
  v14 = 0;
  if (a3 != (unsigned __int16)cstdlib_strlen(a2))
  {
LABEL_18:
    if (*((unsigned __int8 *)a1 + 285) != a5)
    {
      v33 = cstdlib_strlen(a2);
      if (a3 < v33)
      {
        v229 = a7;
        v227 = a5 + 1;
        v254 = (char *)(a1 + 24);
        v256 = (char *)(a1 + 20);
        __s = (char *)&a2[a3];
        v235 = (const char **)(a1 + 21);
        v252 = a1 + 25;
        v245 = a1 + 26;
        v247 = (const char **)(a1 + 22);
        v34 = v33;
        while (!*a4)
        {
          v35 = a2[v34];
          a2[v34] = 0;
          if (a3)
          {
            v36 = cstdlib_strchr(a6, 95);
            if (v36)
            {
              v37 = v36;
              v239 = v35;
              v38 = &a6[cstdlib_strlen(__s)];
              v39 = cstdlib_strlen(v37);
              cstdlib_memmove(v38, v37, v39 + 1);
              v40 = cstdlib_strlen(__s);
              cstdlib_memcpy(a6, __s, v40);
              v41 = cstdlib_strchr(a6, 95);
              if (v41)
              {
                if (!*a4)
                {
                  v42 = v41;
                  v238 = a3;
                  v231 = v41 + 1;
                  v43 = 1;
                  while (1)
                  {
                    v44 = v231;
                    if ((v43 & 1) == 0)
                    {
                      __dst[0] = v42[1];
                      *(_WORD *)v258 = *((_WORD *)v42 + 1);
                      *((_WORD *)v42 + 1) = 42;
                      v44 = __dst;
                    }
                    LOWORD(v261) = 0;
                    v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "mdeafx", a6, v263, &v261, &v260);
                    v45 = *(_QWORD **)(*a1 + 8);
                    if ((v14 & 0x80000000) != 0)
                      goto LABEL_276;
                    v46 = hlp_saveLookupResults(v45, v263[0], (unsigned __int16)v261, &v262, (unsigned __int16 *)&v261 + 1);
                    if ((v46 & 0x80000000) != 0)
                      return v46;
                    if ((v43 & 1) == 0)
                      *((_WORD *)v42 + 1) = *(_WORD *)v258;
                    if (HIWORD(v261) && !*a4)
                    {
                      v47 = 0;
                      v250 = a4;
                      v243 = a6;
                      while (1)
                      {
                        v223 = v47;
                        v48 = *(char **)(v262 + 8 * v47);
                        v49 = cstdlib_strchr(v48, v260);
                        v50 = v49;
                        if (v49)
                        {
                          *v49 = 0;
                          v50 = v49 + 1;
                          v51 = cstdlib_strchr(v49 + 1, v260);
                          if (v51)
                            *v51 = 0;
                        }
                        v225 = cstdlib_strlen(*(const char **)v256);
                        if (v225)
                        {
                          if (!dynamic_strcat((const char **)v256, "+", (size_t *)v254, *(uint64_t **)(*a1 + 8))
                            || !dynamic_strcat(v235, "~", v252, *(uint64_t **)(*a1 + 8))
                            || !dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                          {
                            goto LABEL_274;
                          }
                        }
                        v52 = __s;
                        if (v50)
                        {
                          if (cstdlib_strlen(v50))
                            v52 = v50;
                          else
                            v52 = __s;
                        }
                        v53 = cstdlib_strlen(v52);
                        v54 = cstdlib_strlen(v48) << 16;
                        if (v54 <= (int)(cstdlib_strlen(v44) << 16))
                          v55 = v44;
                        else
                          v55 = v48;
                        if (v53 << 16 <= (int)(cstdlib_strlen(v55) << 16))
                        {
                          v57 = cstdlib_strlen(v48) << 16;
                          if (v57 <= (int)(cstdlib_strlen(v44) << 16))
                            v56 = v44;
                          else
                            v56 = v48;
                        }
                        else
                        {
                          v56 = v52;
                        }
                        v58 = cstdlib_strlen(v56);
                        v59 = hlp_Realloc(a1, (unsigned __int16)(v58 + v225 + 4));
                        if ((v59 & 0x80000000) != 0)
                          goto LABEL_279;
                        if (!dynamic_strcat((const char **)v256, v52, (size_t *)v254, *(uint64_t **)(*a1 + 8))
                          || !dynamic_strcat(v235, v48, v252, *(uint64_t **)(*a1 + 8))
                          || !dynamic_strcat(v247, v44, v245, *(uint64_t **)(*a1 + 8)))
                        {
                          goto LABEL_274;
                        }
                        v60 = cstdlib_strlen(v52);
                        v61 = Utf8_LengthInUtf8chars((unint64_t)v52, v60) << 16;
                        if (v61 >= (int)(cstdlib_strlen(v48) << 16)
                          && (v62 = cstdlib_strlen(v52),
                              v63 = Utf8_LengthInUtf8chars((unint64_t)v52, v62) << 16,
                              v63 >= (int)(cstdlib_strlen(v44) << 16)))
                        {
                          v75 = cstdlib_strlen(v52);
                          v76 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v75);
                          if (cstdlib_strlen(v48) != v76)
                          {
                            v77 = 0;
                            while (dynamic_strcat(v235, "~", v252, *(uint64_t **)(*a1 + 8)))
                            {
                              ++v77;
                              v78 = cstdlib_strlen(v52);
                              v79 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v78);
                              if (v79 - cstdlib_strlen(v48) <= (unsigned __int16)v77)
                                goto LABEL_80;
                            }
                            goto LABEL_274;
                          }
LABEL_80:
                          v80 = cstdlib_strlen(v52);
                          v81 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v80);
                          if (cstdlib_strlen(v44) != v81)
                          {
                            v82 = 0;
                            while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                            {
                              ++v82;
                              v83 = cstdlib_strlen(v52);
                              v84 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v83);
                              if (v84 - cstdlib_strlen(v44) <= (unsigned __int16)v82)
                                goto LABEL_93;
                            }
                            goto LABEL_274;
                          }
                        }
                        else
                        {
                          v64 = cstdlib_strlen(v48) << 16;
                          v65 = cstdlib_strlen(v52);
                          if (v64 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v52, v65) << 16)
                            && (v66 = cstdlib_strlen(v48) << 16,
                                v66 >= (int)(cstdlib_strlen(v44) << 16)))
                          {
                            v85 = cstdlib_strlen(v48);
                            v86 = cstdlib_strlen(v52);
                            if (v85 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v86))
                            {
                              v87 = 0;
                              while (dynamic_strcat((const char **)v256, "~", (size_t *)v254, *(uint64_t **)(*a1 + 8)))
                              {
                                ++v87;
                                v88 = cstdlib_strlen(v48);
                                v89 = cstdlib_strlen(v52);
                                if (v88 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v89) <= (unsigned __int16)v87)
                                  goto LABEL_89;
                              }
                              goto LABEL_274;
                            }
LABEL_89:
                            v90 = cstdlib_strlen(v48);
                            if (v90 != cstdlib_strlen(v44))
                            {
                              v91 = 0;
                              while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                              {
                                ++v91;
                                v92 = cstdlib_strlen(v48);
                                if (v92 - cstdlib_strlen(v44) <= (unsigned __int16)v91)
                                  goto LABEL_93;
                              }
                              goto LABEL_274;
                            }
                          }
                          else
                          {
                            v67 = cstdlib_strlen(v44);
                            v68 = cstdlib_strlen(v52);
                            if (v67 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v68))
                            {
                              v69 = 0;
                              while (dynamic_strcat((const char **)v256, "~", (size_t *)v254, *(uint64_t **)(*a1 + 8)))
                              {
                                ++v69;
                                v70 = cstdlib_strlen(v44);
                                v71 = cstdlib_strlen(v52);
                                if (v70 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v52, v71) <= (unsigned __int16)v69)
                                  goto LABEL_71;
                              }
                              goto LABEL_274;
                            }
LABEL_71:
                            v72 = cstdlib_strlen(v44);
                            if (v72 != cstdlib_strlen(v48))
                            {
                              v73 = 0;
                              while (dynamic_strcat(v235, "~", v252, *(uint64_t **)(*a1 + 8)))
                              {
                                ++v73;
                                v74 = cstdlib_strlen(v44);
                                if (v74 - cstdlib_strlen(v48) <= (unsigned __int16)v73)
                                  goto LABEL_93;
                              }
                              goto LABEL_274;
                            }
                          }
                        }
LABEL_93:
                        v35 = v239;
                        a2[v34] = v239;
                        a4 = v250;
                        a6 = v243;
                        v14 = hlp_MdeRecurse(a1, a2, (unsigned __int16)v34, v250, v227, v243, v229);
                        if ((v14 & 0x80000000) != 0)
                          goto LABEL_275;
                        if (!*v250)
                        {
                          *(_BYTE *)(*(_QWORD *)v256 + v225) = 0;
                          (*v235)[v225] = 0;
                          (*v247)[v225] = 0;
                        }
                        v47 = v223 + 1;
                        if (v223 + 1 >= (unint64_t)HIWORD(v261) || *v250)
                          goto LABEL_36;
                      }
                    }
                    v14 = 0;
LABEL_36:
                    if ((v43 & 1) != 0)
                    {
                      v43 = 0;
                      if (!*a4)
                        continue;
                    }
                    a3 = v238;
                    break;
                  }
                }
              }
            }
          }
          else
          {
            LOWORD(v261) = 0;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "mdestem", a2, v263, &v261, &v260);
            v45 = *(_QWORD **)(*a1 + 8);
            if ((v14 & 0x80000000) != 0)
              goto LABEL_276;
            v46 = hlp_saveLookupResults(v45, v263[0], (unsigned __int16)v261, &v262, (unsigned __int16 *)&v261 + 1);
            if ((v46 & 0x80000000) != 0)
              return v46;
            if (HIWORD(v261) && !*a4)
            {
              v93 = 0;
              v251 = a4;
              v240 = v35;
              while (1)
              {
                v94 = *(char **)(v262 + 8 * v93);
                v95 = cstdlib_strchr(v94, v260);
                v96 = v95;
                if (v95)
                {
                  *v95 = 0;
                  v96 = v95 + 1;
                  v97 = cstdlib_strchr(v95 + 1, v260);
                  v98 = v97;
                  v99 = (const char **)(a1 + 21);
                  if (v97)
                  {
                    *v97 = 0;
                    v98 = v97 + 1;
                    v100 = cstdlib_strchr(v97 + 1, v260);
                    if (v100)
                      *v100 = 0;
                  }
                }
                else
                {
                  v98 = 0;
                  v99 = (const char **)(a1 + 21);
                }
                v101 = cstdlib_strlen(*(const char **)v256);
                if (v101)
                {
                  if (!dynamic_strcat((const char **)v256, "+", (size_t *)v254, *(uint64_t **)(*a1 + 8))
                    || !dynamic_strcat(v99, "~", v252, *(uint64_t **)(*a1 + 8))
                    || !dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                  {
                    goto LABEL_274;
                  }
                }
                if (!v96)
                  v96 = "";
                if (!v98 || !cstdlib_strcmp(v98, ""))
                  v98 = a2;
                v102 = cstdlib_strlen(v98);
                v103 = cstdlib_strlen(v94) << 16;
                if (v103 <= (int)(cstdlib_strlen(v96) << 16))
                  v104 = v96;
                else
                  v104 = v94;
                if (v102 << 16 <= (int)(cstdlib_strlen(v104) << 16))
                {
                  v106 = cstdlib_strlen(v94) << 16;
                  if (v106 <= (int)(cstdlib_strlen(v96) << 16))
                    v105 = v96;
                  else
                    v105 = v94;
                }
                else
                {
                  v105 = v98;
                }
                v107 = cstdlib_strlen(v105);
                v244 = v101;
                v59 = hlp_Realloc(a1, (unsigned __int16)(v107 + v101 + 4));
                if ((v59 & 0x80000000) != 0)
                {
LABEL_279:
                  v14 = v59;
                  goto LABEL_275;
                }
                if (!dynamic_strcat((const char **)v256, v98, (size_t *)v254, *(uint64_t **)(*a1 + 8))
                  || !dynamic_strcat(v235, v94, v252, *(uint64_t **)(*a1 + 8))
                  || !dynamic_strcat(v247, v96, v245, *(uint64_t **)(*a1 + 8)))
                {
                  goto LABEL_274;
                }
                v108 = cstdlib_strlen(v98);
                v109 = Utf8_LengthInUtf8chars((unint64_t)v98, v108) << 16;
                if (v109 >= (int)(cstdlib_strlen(v94) << 16)
                  && (v110 = cstdlib_strlen(v98),
                      v111 = Utf8_LengthInUtf8chars((unint64_t)v98, v110) << 16,
                      v111 >= (int)(cstdlib_strlen(v96) << 16)))
                {
                  v123 = cstdlib_strlen(v98);
                  v124 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v123);
                  if (cstdlib_strlen(v94) != v124)
                  {
                    v125 = 0;
                    while (dynamic_strcat(v235, "~", v252, *(uint64_t **)(*a1 + 8)))
                    {
                      ++v125;
                      v126 = cstdlib_strlen(v98);
                      v127 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v126);
                      if (v127 - cstdlib_strlen(v94) <= (unsigned __int16)v125)
                        goto LABEL_150;
                    }
                    goto LABEL_274;
                  }
LABEL_150:
                  v128 = cstdlib_strlen(v98);
                  v129 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v128);
                  if (cstdlib_strlen(v96) != v129)
                  {
                    v130 = 0;
                    while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                    {
                      ++v130;
                      v131 = cstdlib_strlen(v98);
                      v132 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v131);
                      if (v132 - cstdlib_strlen(v96) <= (unsigned __int16)v130)
                        goto LABEL_163;
                    }
                    goto LABEL_274;
                  }
                }
                else
                {
                  v112 = cstdlib_strlen(v94) << 16;
                  v113 = cstdlib_strlen(v98);
                  if (v112 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v98, v113) << 16)
                    && (v114 = cstdlib_strlen(v94) << 16,
                        v114 >= (int)(cstdlib_strlen(v96) << 16)))
                  {
                    v133 = cstdlib_strlen(v94);
                    v134 = cstdlib_strlen(v98);
                    if (v133 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v134))
                    {
                      v135 = 0;
                      while (dynamic_strcat((const char **)v256, "~", (size_t *)v254, *(uint64_t **)(*a1 + 8)))
                      {
                        ++v135;
                        v136 = cstdlib_strlen(v94);
                        v137 = cstdlib_strlen(v98);
                        if (v136 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v137) <= (unsigned __int16)v135)
                          goto LABEL_159;
                      }
                      goto LABEL_274;
                    }
LABEL_159:
                    v138 = cstdlib_strlen(v94);
                    if (v138 != cstdlib_strlen(v96))
                    {
                      v139 = 0;
                      while (dynamic_strcat(v247, "~", v245, *(uint64_t **)(*a1 + 8)))
                      {
                        ++v139;
                        v140 = cstdlib_strlen(v94);
                        if (v140 - cstdlib_strlen(v96) <= (unsigned __int16)v139)
                          goto LABEL_163;
                      }
                      goto LABEL_274;
                    }
                  }
                  else
                  {
                    v115 = cstdlib_strlen(v96);
                    v116 = cstdlib_strlen(v98);
                    if (v115 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v116))
                    {
                      v117 = 0;
                      while (dynamic_strcat((const char **)v256, "~", (size_t *)v254, *(uint64_t **)(*a1 + 8)))
                      {
                        ++v117;
                        v118 = cstdlib_strlen(v96);
                        v119 = cstdlib_strlen(v98);
                        if (v118 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v98, v119) <= (unsigned __int16)v117)
                          goto LABEL_141;
                      }
                      goto LABEL_274;
                    }
LABEL_141:
                    v120 = cstdlib_strlen(v96);
                    if (v120 != cstdlib_strlen(v94))
                    {
                      v121 = 0;
                      while (dynamic_strcat(v235, "~", v252, *(uint64_t **)(*a1 + 8)))
                      {
                        ++v121;
                        v122 = cstdlib_strlen(v96);
                        if (v122 - cstdlib_strlen(v94) <= (unsigned __int16)v121)
                          goto LABEL_163;
                      }
                      goto LABEL_274;
                    }
                  }
                }
LABEL_163:
                v35 = v240;
                a2[v34] = v240;
                v141 = *(_QWORD *)(*a1 + 8);
                v142 = cstdlib_strlen(a2);
                v143 = cstdlib_strlen(v96);
                v144 = (char *)heap_Alloc(v141, (v142 + v143 + 1));
                if (!v144)
                {
                  log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v145, v146, v147, v148, v222);
                  hlp_freeLookupResults(*(_QWORD **)(*a1 + 8), &v262, (_WORD *)&v261 + 1);
                  return 2310021130;
                }
                v149 = v144;
                cstdlib_strcpy(v144, "_");
                cstdlib_strcat(v149, v96);
                a4 = v251;
                v14 = hlp_MdeRecurse(a1, a2, (unsigned __int16)v34, v251, v227, v149, v229);
                heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v149);
                if ((v14 & 0x80000000) != 0)
                  goto LABEL_275;
                if (!*v251)
                {
                  *(_BYTE *)(*(_QWORD *)v256 + v244) = 0;
                  (*v235)[v244] = 0;
                  (*v247)[v244] = 0;
                }
                ++v93;
                a3 = 0;
                a6 = 0;
                if (v93 >= HIWORD(v261) || *v251)
                  goto LABEL_104;
              }
            }
            v14 = 0;
          }
LABEL_104:
          a2[v34--] = v35;
          if (a3 >= (unsigned __int16)v34)
            goto LABEL_275;
        }
      }
    }
    goto LABEL_275;
  }
  v242 = a6;
  v249 = a4;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = (const char **)(a1 + 21);
  v17 = cstdlib_strlen((const char *)a1[21]);
  v18 = cstdlib_strlen(a7);
  v19 = (char *)heap_Alloc(v15, (v17 + v18 + 6));
  if (!v19)
  {
    v14 = 2310021130;
LABEL_11:
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v20, v21, v22, v23, v222);
    return v14;
  }
  v24 = v19;
  v237 = a3;
  cstdlib_strcpy(v19, "mde_");
  v25 = a7;
  cstdlib_strcat(v24, a7);
  cstdlib_strcat(v24, "_");
  v26 = cstdlib_strlen(v24);
  if ((unsigned __int16)cstdlib_strlen(*v16))
  {
    v30 = 0;
    a4 = v249;
    do
    {
      v31 = *v16;
      v32 = (*v16)[v30];
      if (v32 != 32 && v32 != 126)
      {
        v24[v26] = v32;
        v31 = *v16;
        ++v26;
      }
      ++v30;
    }
    while ((unsigned __int16)cstdlib_strlen(v31) > (unsigned __int16)v30);
  }
  else
  {
    a4 = v249;
  }
  v24[v26] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v27, v28, v29, (uint64_t)v24);
  LOWORD(v261) = -1;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "fecfg", v24, v263, &v261, &v260);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_283;
  if ((_WORD)v261)
  {
LABEL_15:
    *a4 = 1;
LABEL_16:
    a3 = v237;
    goto LABEL_17;
  }
  cstdlib_strcpy(v24, "mde_");
  if ((unsigned __int16)cstdlib_strlen(*v16))
  {
    v153 = 0;
    v154 = 4;
    do
    {
      v155 = *v16;
      v156 = (*v16)[v153];
      if (v156 != 32 && v156 != 126)
      {
        v24[v154] = v156;
        v155 = *v16;
        ++v154;
      }
      ++v153;
    }
    while ((unsigned __int16)cstdlib_strlen(v155) > (unsigned __int16)v153);
  }
  else
  {
    v154 = 4;
  }
  v24[v154] = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v150, v151, v152, (uint64_t)v24);
  LOWORD(v261) = -1;
  v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "fecfg", v24, v263, &v261, &v260);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_283:
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v24);
    return v14;
  }
  if ((_WORD)v261)
    goto LABEL_15;
  if (*a4)
    goto LABEL_16;
  a3 = v237;
  if (!v242 || !*((_DWORD *)a1 + 72))
    goto LABEL_17;
  v157 = cstdlib_strchr(v242, 95);
  if (!v157
    || (v158 = v157,
        v159 = cstdlib_strlen(v157),
        cstdlib_memmove(v242 + 1, v158, v159 + 1),
        *v242 = 64,
        (v160 = cstdlib_strchr(v242, 95)) == 0))
  {
    a4 = v249;
    goto LABEL_17;
  }
  a4 = v249;
  if (*v249)
  {
LABEL_17:
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v24);
    a6 = v242;
    a7 = v25;
    goto LABEL_18;
  }
  __sa = v160;
  v236 = v160 + 1;
  v253 = a1 + 24;
  v232 = a1 + 25;
  v246 = (const char **)(a1 + 22);
  v248 = (const char **)(a1 + 20);
  v241 = a1 + 26;
  v161 = 1;
  while (1)
  {
    v162 = v236;
    if ((v161 & 1) == 0)
    {
      __dst[0] = __sa[1];
      *(_WORD *)v258 = *((_WORD *)__sa + 1);
      *((_WORD *)__sa + 1) = 42;
      v162 = __dst;
    }
    v255 = v162;
    LOWORD(v261) = 0;
    v163 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "mdeafx", v242, v263, &v261, &v260);
    if ((v163 & 0x80000000) != 0)
      goto LABEL_282;
    if ((v161 & 1) == 0)
      *((_WORD *)__sa + 1) = *(_WORD *)v258;
    v163 = hlp_saveLookupResults(*(_QWORD **)(*a1 + 8), v263[0], (unsigned __int16)v261, &v262, (unsigned __int16 *)&v261 + 1);
    if ((v163 & 0x80000000) != 0)
    {
LABEL_282:
      v14 = v163;
      goto LABEL_283;
    }
    if (HIWORD(v261) && !*a4)
      break;
    v14 = 0;
LABEL_197:
    if ((v161 & 1) != 0)
    {
      v161 = 0;
      if (!*a4)
        continue;
    }
    goto LABEL_17;
  }
  v164 = 0;
  v230 = v25;
  v226 = v161;
  while (1)
  {
    v224 = v164;
    v257 = *(char **)(v262 + 8 * v164);
    v165 = cstdlib_strchr(v257, v260);
    v166 = v165;
    if (v165)
    {
      *v165 = 0;
      v166 = v165 + 1;
      v167 = cstdlib_strchr(v165 + 1, v260);
      v168 = a1 + 25;
      if (v167)
        *v167 = 0;
    }
    else
    {
      v168 = a1 + 25;
    }
    v228 = cstdlib_strlen(*v248);
    if (v228
      && (!dynamic_strcat(v248, "+", v253, *(uint64_t **)(*a1 + 8))
       || !dynamic_strcat((const char **)a1 + 21, "~", v168, *(uint64_t **)(*a1 + 8))
       || !dynamic_strcat(v246, "~", v241, *(uint64_t **)(*a1 + 8))))
    {
      goto LABEL_274;
    }
    if (v166)
    {
      if (!cstdlib_strlen(v166))
        v166 = "@";
    }
    else
    {
      v166 = "@";
    }
    v169 = cstdlib_strlen(v166);
    v170 = cstdlib_strlen(v257) << 16;
    if (v170 <= (int)(cstdlib_strlen(v255) << 16))
      v171 = v255;
    else
      v171 = v257;
    v172 = (const char **)(a1 + 20);
    if (v169 << 16 <= (int)(cstdlib_strlen(v171) << 16))
    {
      v174 = cstdlib_strlen(v257) << 16;
      if (v174 <= (int)(cstdlib_strlen(v255) << 16))
        v175 = v255;
      else
        v175 = v257;
      v173 = cstdlib_strlen(v175);
      v172 = (const char **)(a1 + 20);
    }
    else
    {
      v173 = cstdlib_strlen(v166);
    }
    v161 = v226;
    v176 = hlp_Realloc(a1, (unsigned __int16)(v173 + v228 + 4));
    if ((v176 & 0x80000000) != 0)
    {
      v14 = v176;
      v221 = *(_QWORD **)(*a1 + 8);
      goto LABEL_287;
    }
    if (!dynamic_strcat(v172, v166, v253, *(uint64_t **)(*a1 + 8))
      || !dynamic_strcat((const char **)a1 + 21, v257, v232, *(uint64_t **)(*a1 + 8))
      || !dynamic_strcat(v246, v255, v241, *(uint64_t **)(*a1 + 8)))
    {
      goto LABEL_274;
    }
    v177 = cstdlib_strlen(v166);
    v178 = Utf8_LengthInUtf8chars((unint64_t)v166, v177) << 16;
    if (v178 >= (int)(cstdlib_strlen(v257) << 16)
      && (v179 = cstdlib_strlen(v166),
          v180 = Utf8_LengthInUtf8chars((unint64_t)v166, v179) << 16,
          v180 >= (int)(cstdlib_strlen(v255) << 16)))
    {
      v192 = cstdlib_strlen(v166);
      v193 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v192);
      if (cstdlib_strlen(v257) != v193)
      {
        v194 = 0;
        while (dynamic_strcat((const char **)a1 + 21, "~", v232, *(uint64_t **)(*a1 + 8)))
        {
          ++v194;
          v195 = cstdlib_strlen(v166);
          v196 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v195);
          if (v196 - cstdlib_strlen(v257) <= (unsigned __int16)v194)
            goto LABEL_244;
        }
        goto LABEL_274;
      }
LABEL_244:
      v197 = cstdlib_strlen(v166);
      v198 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v197);
      if (cstdlib_strlen(v255) != v198)
      {
        v199 = 0;
        while (dynamic_strcat(v246, "~", v241, *(uint64_t **)(*a1 + 8)))
        {
          ++v199;
          v200 = cstdlib_strlen(v166);
          v201 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v200);
          if (v201 - cstdlib_strlen(v255) <= (unsigned __int16)v199)
            goto LABEL_257;
        }
        goto LABEL_274;
      }
    }
    else
    {
      v181 = cstdlib_strlen(v257) << 16;
      v182 = cstdlib_strlen(v166);
      if (v181 >= (int)(Utf8_LengthInUtf8chars((unint64_t)v166, v182) << 16)
        && (v183 = cstdlib_strlen(v257) << 16, v183 >= (int)(cstdlib_strlen(v255) << 16)))
      {
        v202 = cstdlib_strlen(v257);
        v203 = cstdlib_strlen(v166);
        if (v202 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v203))
        {
          v204 = 0;
          while (dynamic_strcat(v248, "~", v253, *(uint64_t **)(*a1 + 8)))
          {
            ++v204;
            v205 = cstdlib_strlen(v257);
            v206 = cstdlib_strlen(v166);
            if (v205 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v206) <= (unsigned __int16)v204)
              goto LABEL_253;
          }
          goto LABEL_274;
        }
LABEL_253:
        v207 = cstdlib_strlen(v257);
        if (v207 != cstdlib_strlen(v255))
        {
          v208 = 0;
          while (dynamic_strcat(v246, "~", v241, *(uint64_t **)(*a1 + 8)))
          {
            ++v208;
            v209 = cstdlib_strlen(v257);
            if (v209 - cstdlib_strlen(v255) <= (unsigned __int16)v208)
              goto LABEL_257;
          }
          goto LABEL_274;
        }
      }
      else
      {
        v184 = cstdlib_strlen(v255);
        v185 = cstdlib_strlen(v166);
        if (v184 != (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v185))
        {
          v186 = 0;
          while (dynamic_strcat(v248, "~", v253, *(uint64_t **)(*a1 + 8)))
          {
            ++v186;
            v187 = cstdlib_strlen(v255);
            v188 = cstdlib_strlen(v166);
            if (v187 - (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v166, v188) <= (unsigned __int16)v186)
              goto LABEL_235;
          }
          goto LABEL_274;
        }
LABEL_235:
        v189 = cstdlib_strlen(v255);
        if (v189 != cstdlib_strlen(v257))
        {
          v190 = 0;
          while (dynamic_strcat((const char **)a1 + 21, "~", v232, *(uint64_t **)(*a1 + 8)))
          {
            ++v190;
            v191 = cstdlib_strlen(v255);
            if (v191 - cstdlib_strlen(v257) <= (unsigned __int16)v190)
              goto LABEL_257;
          }
LABEL_274:
          v14 = 2310021130;
          goto LABEL_275;
        }
      }
    }
LABEL_257:
    v210 = *(uint64_t **)(*a1 + 8);
    v211 = cstdlib_strlen((const char *)a1[21]);
    v212 = (char *)heap_Realloc(v210, (uint64_t)v24, (v211 + 4));
    if (!v212)
    {
      v14 = 2310021130;
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v24);
      hlp_freeLookupResults(*(_QWORD **)(*a1 + 8), &v262, (_WORD *)&v261 + 1);
      goto LABEL_11;
    }
    v24 = v212;
    cstdlib_strcpy(v212, "mde_");
    v25 = v230;
    if ((unsigned __int16)cstdlib_strlen(*v16))
    {
      v216 = 0;
      v217 = 4;
      do
      {
        v218 = *v16;
        v219 = (*v16)[v216];
        if (v219 != 32 && v219 != 126)
        {
          v24[v217] = v219;
          v218 = *v16;
          ++v217;
        }
        ++v216;
      }
      while ((unsigned __int16)cstdlib_strlen(v218) > (unsigned __int16)v216);
    }
    else
    {
      v217 = 4;
    }
    v24[v217] = 0;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v213, v214, v215, (uint64_t)v24);
    LOWORD(v261) = -1;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, int *, unsigned __int8 *))(a1[10] + 96))(a1[8], a1[9], "fecfg", v24, v263, &v261, &v260);
    if ((v14 & 0x80000000) != 0)
      break;
    a4 = v249;
    a3 = v237;
    if ((_WORD)v261)
    {
      *v249 = 1;
    }
    else if (!*v249)
    {
      (*v248)[v228] = 0;
      (*v16)[v228] = 0;
      (*v246)[v228] = 0;
    }
    v164 = v224 + 1;
    if (v224 + 1 >= (unint64_t)HIWORD(v261) || *v249)
      goto LABEL_197;
  }
  v221 = *(_QWORD **)(*a1 + 8);
LABEL_287:
  heap_Free(v221, (uint64_t)v24);
LABEL_275:
  v45 = *(_QWORD **)(*a1 + 8);
LABEL_276:
  hlp_freeLookupResults(v45, &v262, (_WORD *)&v261 + 1);
  return v14;
}

uint64_t hlp_saveLookupResults(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t result;
  uint64_t v11;
  unsigned __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  hlp_freeLookupResults(a1, a4, a5);
  result = 0;
  if (a2 && a3)
  {
    v11 = heap_Alloc((uint64_t)a1, 8 * a3);
    *a4 = v11;
    if (v11)
    {
      v12 = 0;
      *a5 = 0;
      while (1)
      {
        v13 = cstdlib_strlen(*(const char **)(a2 + 8 * v12));
        v14 = heap_Alloc((uint64_t)a1, (v13 + 1));
        v15 = *a5;
        *(_QWORD *)(*a4 + 8 * v15) = v14;
        v16 = *(char **)(*a4 + 8 * v15);
        if (!v16)
          break;
        cstdlib_strcpy(v16, *(const char **)(a2 + 8 * v15));
        v12 = *a5 + 1;
        *a5 = v12;
        if (a3 <= v12)
          return 0;
      }
    }
    hlp_freeLookupResults(a1, a4, a5);
    return 2310021130;
  }
  return result;
}

uint64_t hlp_Realloc(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v3 = a2;
  if (a1[24] < (unint64_t)a2)
  {
    v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[20], a2);
    if (!v4)
      goto LABEL_10;
    a1[20] = v4;
    a1[24] = v3;
  }
  if (a1[25] >= v3)
    goto LABEL_7;
  v9 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[21], v3);
  if (!v9)
  {
LABEL_10:
    v11 = 2310021130;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v5, v6, v7, v8, v13);
    return v11;
  }
  a1[21] = v9;
  a1[25] = v3;
LABEL_7:
  if (a1[26] >= v3)
    return 0;
  v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[22], v3);
  if (!v10)
    goto LABEL_10;
  v11 = 0;
  a1[22] = v10;
  a1[26] = v3;
  return v11;
}

_QWORD *hlp_freeLookupResults(_QWORD *result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  v5 = *a2;
  if (v5)
  {
    v6 = result;
    if (*a3)
    {
      v7 = 0;
      do
        heap_Free(v6, *(_QWORD *)(*a2 + 8 * v7++));
      while (v7 < (unsigned __int16)*a3);
      v5 = *a2;
    }
    result = heap_Free(v6, v5);
  }
  *a3 = 0;
  *a2 = 0;
  return result;
}

uint64_t hlp_WriteWordRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, __int16 a7, __int16 a8, const char *a9, const char *a10, const char *a11, const char *a12, uint64_t a13, ...)
{
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned int v23;
  uint64_t result;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v26;
  __int16 v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v29;
  __int16 v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  int v37;
  unsigned __int16 v38;
  char __dst[5000];
  char v40[5000];
  char v41[5000];
  uint64_t v42;
  va_list va;

  va_start(va, a13);
  v42 = *MEMORY[0x24BDAC8D0];
  v38 = a4;
  v37 = a6;
  v36 = a7;
  v35 = a8;
  v34 = 0;
  cstdlib_strcpy(v41, a9);
  cstdlib_strcpy(v40, a10);
  cstdlib_strcpy(__dst, a11);
  cstdlib_strcat(__dst, "!");
  cstdlib_strcat(__dst, a12);
  if (!a5)
    goto LABEL_11;
  v18 = cstdlib_strlen(v41);
  v19 = cstdlib_strlen(v40);
  v20 = cstdlib_strlen(__dst);
  v21 = v19 <= v18 ? v18 : v19;
  v22 = v20 <= v21 ? v21 : v20;
  v23 = v22;
  result = mosynt_PadWithChar((uint64_t)v41, 5000, 126, v22);
  if ((result & 0x80000000) == 0)
  {
    result = mosynt_PadWithChar((uint64_t)v40, 5000, 32, v23);
    if ((result & 0x80000000) == 0)
    {
      result = mosynt_PadWithChar((uint64_t)__dst, 5000, 32, v23);
      if ((result & 0x80000000) == 0)
      {
LABEL_11:
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a2, a3, a4, &v38);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v38, 0, 1, &v37, &v34);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v38, 1, 1, &v36, &v34);
            if ((result & 0x80000000) == 0)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v38, 2, 1, &v35, &v34);
              if ((result & 0x80000000) == 0)
              {
                v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                v26 = v38;
                v27 = cstdlib_strlen(v41);
                result = v25(a2, a3, v26, 3, (unsigned __int16)(v27 + 1), v41, &v34);
                if ((result & 0x80000000) == 0)
                {
                  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                  v29 = v38;
                  v30 = cstdlib_strlen(v40);
                  result = v28(a2, a3, v29, 5, (unsigned __int16)(v30 + 1), v40, &v34);
                  if ((result & 0x80000000) == 0)
                  {
                    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                    v32 = v38;
                    v33 = cstdlib_strlen(__dst);
                    result = v31(a2, a3, v32, 6, (unsigned __int16)(v33 + 1), __dst, &v34);
                    if ((result & 0x80000000) == 0)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v38, 7, 1, (uint64_t *)va, &v34);
                      if ((result & 0x80000000) == 0)
                        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v38, 9, 1, "", &v34);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mde_MosyntMorphAna(uint64_t a1, char *a2, unsigned __int8 *a3, const char *a4, uint64_t a5, __int16 a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 *a11, int a12, char a13, _DWORD *a14)
{
  uint64_t result;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _OWORD __b[140];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  memset(__b, 0, 512);
  v29 = 0;
  cstdlib_memset(__b, 0, 0x8C8uLL);
  *a14 = 0;
  cstdlib_strcpy(*(char **)(a1 + 240), "");
  cstdlib_strcpy(*(char **)(a1 + 248), "");
  cstdlib_strcpy(*(char **)(a1 + 256), "");
  result = mosynt_StartWordAnalysis(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 2200), *(_QWORD *)(a1 + 2208), *(_QWORD *)(a1 + 2216), *(_QWORD *)(a1 + 2224), *(_QWORD *)(a1 + 2232), *(_QWORD *)(a1 + 2240), (uint64_t)__b);
  if ((result & 0x80000000) == 0)
  {
    result = mosynt_WordAnalysis(*(_QWORD *)(a1 + 48), (uint64_t)__b, a3, 0, 1, a13, (_DWORD *)&v30 + 1, &v29);
    if ((result & 0x80000000) == 0)
    {
      v21 = HIDWORD(v30);
      *a14 = HIDWORD(v30);
      if (v21)
      {
        *a11 = cstdlib_strlen(a4) + a6;
        HIDWORD(v30) = 1;
        v22 = a2 + 15000;
        v23 = a2 + 5000;
        v24 = a2 + 10000;
        v25 = 1;
        while (1)
        {
          result = mosynt_GetReading(*(_QWORD *)(a1 + 48), (uint64_t)__b, 0, (_DWORD *)&v30 + 1, v22, 5000, v23, 5000, &v30);
          if ((result & 0x80000000) != 0)
            return result;
          result = mosynt_SubstAllSubstrOcc(v23, "~", "¡", v24, 5000);
          if ((result & 0x80000000) != 0)
            return result;
          cstdlib_strcpy(v23, v24);
          if (!HIDWORD(v30))
            return mosynt_FinishWordAnalysis(*(_QWORD *)(a1 + 48), (uint64_t)__b);
          if (a12)
            break;
          if (v25)
          {
            if ((_DWORD)v30 != v29)
            {
              v25 = 1;
              goto LABEL_13;
            }
            hlp_WriteWordRec(a1, a9, a10, a7, 1, 8, a6, *a11, v23, "", "", "", v28);
LABEL_12:
            v25 = 0;
LABEL_13:
            if (!HIDWORD(v30))
              return mosynt_FinishWordAnalysis(*(_QWORD *)(a1 + 48), (uint64_t)__b);
          }
        }
        v26 = a10;
        v27 = a9;
        if (v25)
        {
          hlp_WriteWordRec(a1, a9, a10, a7, 1, 4, a6, *a11, v23, "Y", "Y", "", v28);
          v27 = a9;
          v26 = a10;
        }
        hlp_WriteWordRec(a1, v27, v26, a7, 0, 8, a6, *a11, v23, "N", "*", v22, v28);
        goto LABEL_12;
      }
      return mosynt_FinishWordAnalysis(*(_QWORD *)(a1 + 48), (uint64_t)__b);
    }
  }
  return result;
}

uint64_t mde_Main(uint64_t a1, const char *a2, char *__s, const char *a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9)
{
  uint64_t result;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *);
  uint64_t v20;
  __int16 v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *);
  uint64_t v23;
  __int16 v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *);
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  __int16 v33;

  v33 = a5;
  v32 = a6;
  v30 = 8;
  v31 = 0;
  v29 = 0;
  v28 = 1;
  if (*(_BYTE *)(a1 + 286) == 1
    || cstdlib_strlen(__s) < *(unsigned __int8 *)(a1 + 282)
    || cstdlib_strlen(__s) > *(unsigned __int8 *)(a1 + 283)
    || *(_BYTE *)(a1 + 284) == 1
    && (v18 = *__s, (v18 - 65) >= 0x1A)
    && (v18 != 195 || __s[1] - 132 > 0x18 || ((1 << (__s[1] + 124)) & 0x104202F) == 0))
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Mde cfg settings do not apply on %s", a6, a7, a8, (uint64_t)a2);
    return 0;
  }
  else
  {
    cstdlib_strcpy(*(char **)(a1 + 240), "");
    cstdlib_strcpy(*(char **)(a1 + 248), "");
    cstdlib_strcpy(*(char **)(a1 + 256), "");
    result = hlp_MdeRecurse_0(a1, a2, a4, 0, &v31, 0);
    if ((result & 0x80000000) == 0)
    {
      if (v31)
      {
        *a9 = cstdlib_strlen(__s) + a5;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a7, a8, a6, &v32);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a7, a8, v32, 0, 1, &v30, &v29);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a7, a8, v32, 1, 1, &v33, &v29);
            if ((result & 0x80000000) == 0)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _WORD *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a7, a8, v32, 2, 1, a9, &v29);
              if ((result & 0x80000000) == 0)
              {
                v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                v20 = v32;
                v21 = cstdlib_strlen(*(const char **)(a1 + 240));
                result = v19(a7, a8, v20, 3, (unsigned __int16)(v21 + 1), *(_QWORD *)(a1 + 240), &v29);
                if ((result & 0x80000000) == 0)
                {
                  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                  v23 = v32;
                  v24 = cstdlib_strlen(*(const char **)(a1 + 248));
                  result = v22(a7, a8, v23, 5, (unsigned __int16)(v24 + 1), *(_QWORD *)(a1 + 248), &v29);
                  if ((result & 0x80000000) == 0)
                  {
                    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 56) + 160);
                    v26 = v32;
                    v27 = cstdlib_strlen(*(const char **)(a1 + 256));
                    result = v25(a7, a8, v26, 6, (unsigned __int16)(v27 + 1), *(_QWORD *)(a1 + 256), &v29);
                    if ((result & 0x80000000) == 0)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a7, a8, v32, 7, 1, &v28, &v29);
                      if ((result & 0x80000000) == 0)
                        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(*(_QWORD *)(a1 + 56) + 160))(a7, a8, v32, 9, 1, "", &v29);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_MdeRecurse_0(uint64_t a1, const char *a2, const char *a3, unsigned int a4, _DWORD *a5, int a6)
{
  const char *v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  unsigned __int16 v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD, _QWORD, _QWORD, char *, _QWORD);
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  char *v58;
  __int16 v59;
  size_t v60;
  char *v61;
  char *v62;
  size_t v63;
  __int16 v64;
  char *v65;
  int v66;
  int v67;
  char *v68;
  int v69;
  unsigned __int16 v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  const char *v82;
  char *v83;
  const char *v84;
  char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 v93;
  __int16 v94;
  int v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 v105;
  unint64_t v106;
  const char *v107;
  int v108;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  size_t __n;
  __int16 v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned __int8 v119;
  char *__s2;
  unsigned __int16 v121;
  const char *v122;
  _DWORD *v123;
  char v124[2];
  char v125[2];
  unsigned __int16 v126;
  char *__s;
  unsigned __int8 __c;
  unsigned __int16 __c_1;
  uint64_t __c_3;
  char __dst[257];
  uint64_t v132;

  v10 = a2;
  v132 = *MEMORY[0x24BDAC8D0];
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  v12 = 0;
  if (a4 == (unsigned __int16)cstdlib_strlen(a2))
  {
    cstdlib_strcpy(__dst, "mde_");
    cstdlib_strcat(__dst, a3);
    cstdlib_strcat(__dst, "_");
    v13 = (unsigned __int16)cstdlib_strlen(__dst);
    if (cstdlib_strlen(*(const char **)(a1 + 248)) && v13 <= 0xFF)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = *(const char **)(a1 + 248);
        v20 = v19[v17];
        if (v20 != 32)
          __dst[v13++] = v20;
        if (cstdlib_strlen(v19) <= ++v18)
          break;
        v17 = v18;
      }
      while (v13 < 0x100);
    }
    __dst[v13] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v14, v15, v16, (uint64_t)__dst);
    __c_1 = -1;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c_3, &__c_1, &__c);
    if ((v12 & 0x80000000) != 0)
      return v12;
    if (__c_1)
      goto LABEL_11;
    cstdlib_strcpy(__dst, "mde_");
    if (cstdlib_strlen(*(const char **)(a1 + 248)))
    {
      v104 = 0;
      v105 = 0;
      v106 = 4;
      do
      {
        v107 = *(const char **)(a1 + 248);
        v108 = v107[v104];
        if (v108 != 32)
          __dst[v106++] = v108;
        if (cstdlib_strlen(v107) <= ++v105)
          break;
        v104 = v105;
      }
      while (v106 < 0x100);
    }
    else
    {
      v106 = 4;
    }
    __dst[v106] = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Checking %s", v101, v102, v103, (uint64_t)__dst);
    __c_1 = -1;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c_3, &__c_1, &__c);
    if ((v12 & 0x80000000) != 0)
      return v12;
    if (__c_1)
    {
LABEL_11:
      *a5 = 1;
      v24 = "MDE succeeds";
    }
    else
    {
      v24 = "MDE fails";
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v24, v21, v22, v23, v111);
  }
  if (*(unsigned __int8 *)(a1 + 285) != a6)
  {
    v25 = cstdlib_strlen(v10);
    v26 = v25;
    if (a4 < v25)
    {
      v117 = a4;
      if (!*a5)
      {
        v122 = 0;
        v119 = a6 + 1;
        __s2 = (char *)&v10[a4];
        v27 = v25;
        v123 = a5;
        while (1)
        {
          v28 = v10[v27];
          v10[v27] = 0;
          __c_1 = 0;
          v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "mde", __s2, &__c_3, &__c_1, &__c);
          if ((v12 & 0x80000000) != 0)
            return v12;
          v10[v27] = v28;
          if (!__c_1)
            break;
          if (!*a5)
          {
            v112 = v28;
            v29 = 0;
            __n = (int)(v26 - v117);
            v115 = v27 - v117 + 2;
            v116 = (unsigned __int16)(v26 - v117 - 1);
            do
            {
              v30 = v10;
              v31 = v27;
              v32 = *(char **)(__c_3 + 8 * v29);
              v33 = cstdlib_strchr(v32, __c);
              if (v33)
              {
                *v33 = 0;
                v34 = v33 + 1;
                v35 = cstdlib_strchr(v33 + 1, __c);
                v36 = v35;
                if (v35)
                {
                  *v35 = 0;
                  v36 = v35 + 1;
                  v37 = cstdlib_strchr(v35 + 1, __c);
                  v38 = v37;
                  if (v37)
                  {
                    *v37 = 0;
                    v38 = v37 + 1;
                    v39 = cstdlib_strchr(v37 + 1, __c);
                    if (v39)
                      *v39 = 0;
                  }
                }
                else
                {
                  v38 = 0;
                }
              }
              else
              {
                v36 = 0;
                v38 = 0;
                v34 = v122;
              }
              v40 = cstdlib_strlen(*(const char **)(a1 + 240));
              if (v32 && cstdlib_strcmp(v32, ""))
              {
                if (v38)
                  goto LABEL_33;
              }
              else
              {
                v32 = "*";
                if (v38)
                {
LABEL_33:
                  if (cstdlib_strcmp(v38, ""))
                    goto LABEL_35;
                }
              }
              v38 = "*";
LABEL_35:
              v118 = v40;
              if (v40)
              {
                cstdlib_strcat(*(char **)(a1 + 240), "+");
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
              }
              v121 = v40;
              v122 = v34;
              if (v36 && cstdlib_strcmp(v36, ""))
              {
                v41 = cstdlib_strlen(v36);
                v42 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v41 + v40 + 4));
                if ((v42 & 0x80000000) != 0)
                  return v42;
                cstdlib_strcat(*(char **)(a1 + 240), "◄");
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
                cstdlib_strcat(*(char **)(a1 + 240), v36);
                cstdlib_strcat(*(char **)(a1 + 248), v32);
                cstdlib_strcat(*(char **)(a1 + 256), v38);
                v43 = cstdlib_strlen(v36);
                if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v36, v43) != 1)
                {
                  v44 = 0;
                  do
                  {
                    cstdlib_strcat(*(char **)(a1 + 248), " ");
                    cstdlib_strcat(*(char **)(a1 + 256), " ");
                    ++v44;
                    v45 = cstdlib_strlen(v36);
                  }
                  while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v36, v45) - 1) > (unsigned __int16)v44);
                }
                cstdlib_strcat(*(char **)(a1 + 240), "◄");
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
                a5 = v123;
                v27 = v31;
                v10 = v30;
              }
              else if (v34 && !cstdlib_strcmp(v34, "yes"))
              {
                __s = 0;
                v126 = 0;
                cstdlib_strcpy(__dst, "one_word");
                v27 = v31;
                v10 = v30;
                v30[v27] = 0;
                v125[0] = *v32;
                v125[1] = 0;
                v124[0] = *v38;
                v124[1] = 0;
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v47, v48, v49, (uint64_t)__dst);
                v50 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
                v51 = cstdlib_strlen(__s2);
                v42 = v50(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, __s2, v51);
                if ((v42 & 0x80000000) != 0)
                  return v42;
                v30[v27] = v112;
                v42 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst);
                if ((v42 & 0x80000000) != 0)
                  return v42;
                v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &__s, &v126);
                if ((v42 & 0x80000000) != 0)
                  return v42;
                __s[v126] = 0;
                a5 = v123;
                if ((unsigned __int16)cstdlib_strlen(__s))
                {
                  v55 = 0;
                  v56 = 0;
                  do
                  {
                    v57 = &__s[(unsigned __int16)v56];
                    if (*v57 == 126)
                    {
                      v58 = &__s[v55 + 1];
                      v59 = cstdlib_strlen(__s);
                      cstdlib_memmove(v57, v58, (unsigned __int16)(v59 - v56-- + 1));
                    }
                    else
                    {
                      v60 = cstdlib_strlen("¡");
                      if (!cstdlib_strncmp(v57, "¡", v60))
                      {
                        v61 = &__s[v55 + 1];
                        v62 = &__s[v55 + 2];
                        v63 = cstdlib_strlen(__s);
                        cstdlib_memmove(v61, v62, v63 - (unsigned __int16)v56 + 1);
                        __s[(unsigned __int16)v56] = 126;
                        a5 = v123;
                      }
                    }
                    v55 = (unsigned __int16)++v56;
                  }
                  while ((unsigned __int16)v56 < (unsigned __int16)cstdlib_strlen(__s));
                }
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v52, v53, v54, (uint64_t)__dst);
                v64 = cstdlib_strlen(__s);
                v42 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v64 + v121 + 4));
                if ((v42 & 0x80000000) != 0)
                  return v42;
                cstdlib_strcat(*(char **)(a1 + 240), "◄");
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
                cstdlib_strcat(*(char **)(a1 + 240), __s);
                cstdlib_strcat(*(char **)(a1 + 248), v125);
                cstdlib_strcat(*(char **)(a1 + 256), v124);
                v65 = __s;
                v66 = cstdlib_strlen(__s);
                if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v65, v66) != 1)
                {
                  v67 = 0;
                  do
                  {
                    cstdlib_strcat(*(char **)(a1 + 248), " ");
                    cstdlib_strcat(*(char **)(a1 + 256), " ");
                    ++v67;
                    v68 = __s;
                    v69 = cstdlib_strlen(__s);
                  }
                  while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v68, v69) - 1) > (unsigned __int16)v67);
                }
                cstdlib_strcat(*(char **)(a1 + 240), "◄");
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
              }
              else
              {
                v42 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v115 + v40));
                if ((v42 & 0x80000000) != 0)
                  return v42;
                v27 = v31;
                cstdlib_strncat(*(char **)(a1 + 240), __s2, __n);
                cstdlib_strcat(*(char **)(a1 + 248), v32);
                cstdlib_strcat(*(char **)(a1 + 256), v38);
                a5 = v123;
                v10 = v30;
                if (v116)
                {
                  v46 = v116;
                  do
                  {
                    cstdlib_strcat(*(char **)(a1 + 248), " ");
                    cstdlib_strcat(*(char **)(a1 + 256), " ");
                    --v46;
                  }
                  while (v46);
                }
              }
              v12 = hlp_MdeRecurse_0(a1, v10, a3, (unsigned __int16)v27, a5, v119);
              if ((v12 & 0x80000000) != 0)
                return v12;
              if (!*a5)
              {
                v70 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 240), v118);
                *(_BYTE *)(*(_QWORD *)(a1 + 240) + v121) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 248) + v70) = 0;
                *(_BYTE *)(*(_QWORD *)(a1 + 256) + v70) = 0;
              }
              if (++v29 >= (unint64_t)__c_1)
                goto LABEL_72;
            }
            while (!*a5);
          }
LABEL_73:
          v26 = v27 - 1;
          if (v117 < (unsigned __int16)(v27 - 1))
          {
            --v27;
            if (!*a5)
              continue;
          }
          return v12;
        }
LABEL_72:
        if (*a5)
          goto LABEL_73;
        v71 = v10[v27];
        v10[v27] = 0;
        __c_1 = 0;
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t *, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)(a1 + 80) + 152))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "g2p", __s2, &__c_3, &__c_1, &__c, *(unsigned __int8 *)(a1 + 556));
        if ((v12 & 0x80000000) != 0)
          return v12;
        v10[v27] = v71;
        if (!__c_1)
          goto LABEL_73;
        v72 = 0;
        v113 = v27;
        while (1)
        {
          if (*a5)
            goto LABEL_73;
          v73 = *(char **)(__c_3 + 8 * v72);
          v74 = cstdlib_strchr(v73, __c);
          if (!v74)
            break;
          *v74 = 0;
          v79 = cstdlib_strchr(v74 + 1, __c);
          v80 = v79;
          if (!v79)
            goto LABEL_89;
          *v79 = 0;
          v80 = v79 + 1;
          v81 = cstdlib_strchr(v79 + 1, __c);
          v82 = v81;
          if (!v81)
            goto LABEL_90;
          *v81 = 0;
          v82 = v81 + 1;
          v83 = cstdlib_strchr(v81 + 1, __c);
          v84 = v83;
          if (!v83)
            goto LABEL_91;
          *v83 = 0;
          v84 = v83 + 1;
          v85 = cstdlib_strchr(v83 + 1, __c);
          if (!v85)
            goto LABEL_91;
          *v85 = 0;
          v86 = cstdlib_strchr(v85 + 1, __c);
          v87 = v86;
          if (v86)
          {
            *v86 = 0;
            v87 = v86 + 1;
            v88 = cstdlib_strchr(v86 + 1, __c);
            if (v88)
              *v88 = 0;
          }
LABEL_92:
          v89 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          if (!v73)
          {
            log_OutPublic(v89, (uint64_t)"FE_ONEWORD", 34001, 0, v75, v76, v77, v78, v110);
            return 2310021127;
          }
          log_OutText(v89, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v76, v77, v78, (uint64_t)v73);
          if (v80 && cstdlib_strcmp(v80, "") && !cstdlib_strstr(v80, a3))
          {
            v99 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v100 = "G2P Domain validation not OK";
            goto LABEL_117;
          }
          if (v87 && !cstdlib_strcmp(v87, "0"))
          {
            v99 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v100 = "G2P MDE usage validation not OK";
LABEL_117:
            log_OutText(v99, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v100, v90, v91, v92, v110);
            a5 = v123;
            v27 = v113;
            goto LABEL_118;
          }
          v93 = cstdlib_strlen(*(const char **)(a1 + 240));
          if (cstdlib_strcmp(v73, ""))
          {
            if (!v82 || !cstdlib_strcmp(v82, ""))
              v82 = "*";
            if (!v84 || !cstdlib_strcmp(v84, ""))
              v84 = "*";
            v94 = cstdlib_strlen(v73);
            v42 = hlp_Realloc_0((uint64_t *)a1, (unsigned __int16)(v94 + v93 + 4));
            if ((v42 & 0x80000000) != 0)
              return v42;
            if (v93)
            {
              cstdlib_strcat(*(char **)(a1 + 240), "+");
              cstdlib_strcat(*(char **)(a1 + 248), " ");
              cstdlib_strcat(*(char **)(a1 + 256), " ");
            }
            cstdlib_strcat(*(char **)(a1 + 240), "◄");
            cstdlib_strcat(*(char **)(a1 + 248), " ");
            cstdlib_strcat(*(char **)(a1 + 256), " ");
            cstdlib_strcat(*(char **)(a1 + 240), v73);
            cstdlib_strcat(*(char **)(a1 + 248), v82);
            cstdlib_strcat(*(char **)(a1 + 256), v84);
            v95 = cstdlib_strlen(v73);
            if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v73, v95) != 1)
            {
              v96 = 0;
              do
              {
                cstdlib_strcat(*(char **)(a1 + 248), " ");
                cstdlib_strcat(*(char **)(a1 + 256), " ");
                ++v96;
                v97 = cstdlib_strlen(v73);
              }
              while ((unsigned __int16)(Utf8_LengthInUtf8chars((unint64_t)v73, v97) - 1) > (unsigned __int16)v96);
            }
            cstdlib_strcat(*(char **)(a1 + 240), "◄");
            cstdlib_strcat(*(char **)(a1 + 248), " ");
            cstdlib_strcat(*(char **)(a1 + 256), " ");
          }
          v27 = v113;
          a5 = v123;
          v12 = hlp_MdeRecurse_0(a1, v10, a3, (unsigned __int16)v113, v123, v119);
          if ((v12 & 0x80000000) != 0)
            return v12;
          if (!*v123)
          {
            v98 = Utf8_LengthInUtf8chars(*(_QWORD *)(a1 + 240), v93);
            *(_BYTE *)(*(_QWORD *)(a1 + 240) + v93) = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 248) + v98) = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 256) + v98) = 0;
          }
LABEL_118:
          if (++v72 >= (unint64_t)__c_1)
            goto LABEL_73;
        }
        v80 = 0;
LABEL_89:
        v82 = 0;
LABEL_90:
        v84 = 0;
LABEL_91:
        v87 = 0;
        goto LABEL_92;
      }
    }
  }
  return v12;
}

uint64_t hlp_Realloc_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  if (a2 < 0x81)
    return 0;
  v3 = a2;
  v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[30], a2);
  if (v4
    && (a1[30] = v4, (v9 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[31], v3)) != 0)
    && (a1[31] = v9, (v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[32], v3)) != 0))
  {
    v11 = 0;
    a1[32] = v10;
  }
  else
  {
    v11 = 2310021130;
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v5, v6, v7, v8, v13);
  }
  return v11;
}

char *oneword_FindPhonWordSep(char *a1, char *a2)
{
  char *result;
  char v5;

  *a2 = 0;
  result = cstdlib_strstr(a1, "_");
  if (result)
  {
    v5 = 1;
  }
  else
  {
    result = cstdlib_strstr(a1, "-*");
    if (!result)
      return result;
    v5 = 2;
  }
  *a2 = v5;
  return result;
}

uint64_t oneword_CountPhoneticWords(char *a1, char *a2)
{
  const char *v3;
  char *v4;
  char *v5;
  int64_t v6;
  unsigned __int16 v7;
  __int16 v8;

  v3 = a1;
  v4 = cstdlib_strstr(a1, "\x12");
  if (v4)
    v5 = v4;
  else
    v5 = a2;
  if (v5 - v3 >= 2 && !cstdlib_strncmp(v5 - 1, "#", 1uLL))
    --v5;
  if (v5 <= v3)
  {
    return 1;
  }
  else
  {
    v6 = v5 - v3;
    v7 = 1;
    do
    {
      v8 = 1;
      if (cstdlib_strncmp(v3, "#", 1uLL))
      {
        v8 = 1;
        if (cstdlib_strncmp(v3, "_", 1uLL))
          v8 = cstdlib_strncmp(v3, "-*", 2uLL) == 0;
      }
      v7 += v8;
      ++v3;
      --v6;
    }
    while (v6);
  }
  return v7;
}

size_t oneword_FindNextWord(size_t result, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v7;
  unsigned int v8;
  char *v10;
  unsigned int v11;

  v7 = a3;
  v8 = *a4;
  if (*a4 >= a3)
  {
    v8 = a3;
  }
  else
  {
    v10 = (char *)result;
    do
    {
      result = utf8_BelongsToSet(a2, v10, v8, v7);
      if (!(_DWORD)result)
        break;
      result = utf8_GetNextUtf8Offset(v10, v8);
      v8 = result;
    }
    while (result < v7);
    if (v8 >= v7)
    {
      v7 = v8;
    }
    else
    {
      v11 = v8;
      do
      {
        result = utf8_BelongsToSet(a2, v10, v11, v7);
        if ((_DWORD)result)
          break;
        result = utf8_GetNextUtf8Offset(v10, v11);
        v11 = result;
      }
      while (result < v7);
      v7 = v8;
      v8 = v11;
    }
  }
  *a4 = v7;
  *a5 = v8;
  return result;
}

uint64_t oneword_CountOrthographicWords(char *a1, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7;
  unsigned int i;
  unsigned int PreviousUtf8Offset;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 j;

  v7 = a2 - (_DWORD)a1;
  for (i = 0; utf8_BelongsToSet(a3, a1, i, v7); i = utf8_GetNextUtf8Offset(a1, i))
    ;
  PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a1, v7);
  if (v7)
  {
    v10 = PreviousUtf8Offset;
    v11 = v7;
    if (utf8_BelongsToSet(a3, a1, PreviousUtf8Offset, v7))
    {
      do
      {
        v11 = v10;
        v12 = utf8_GetPreviousUtf8Offset((uint64_t)a1, v10);
        if (!v10)
          break;
        v10 = v12;
      }
      while (utf8_BelongsToSet(a3, a1, v12, v7));
    }
  }
  else
  {
    v11 = 0;
  }
  for (j = 1; i < v11; i = utf8_GetNextUtf8Offset(a1, i))
  {
    if (!a1[i])
      break;
    if (utf8_BelongsToSet(a4, a1, i, v7))
    {
      ++j;
      for (; i < v11; i = utf8_GetNextUtf8Offset(a1, i))
      {
        if (!utf8_BelongsToSet(a4, a1, i, v7))
          break;
      }
    }
  }
  return j;
}

char *oneword_ReplaceAllCharactersInOrthography(char *a1, int a2, unsigned int a3, char a4)
{
  __int16 v5;

  v5 = a2 - (_WORD)a1;
  return oneword_ReplaceCharactersInOrthography(a1, a2, a3, a4, &v5);
}

char *oneword_ReplaceCharactersInOrthography(char *result, int a2, unsigned int a3, char a4, _WORD *a5)
{
  char *v8;
  unsigned int v9;
  unsigned int NextUtf8Offset;
  BOOL v11;
  unsigned int v12;
  BOOL v13;

  if (a5 && *a5)
  {
    v8 = result;
    v9 = a2 - (_DWORD)result;
    result = (char *)utf8_BelongsToSet(a3, result, 0, a2 - (int)result);
    if ((_DWORD)result)
    {
      NextUtf8Offset = 0;
      do
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset(v8, NextUtf8Offset);
        result = (char *)utf8_BelongsToSet(a3, v8, NextUtf8Offset, v9);
      }
      while ((_DWORD)result);
    }
    if (*a5)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = 0;
      do
      {
        if (utf8_BelongsToSet(a3, v8, v12, v9))
        {
          v8[v12] = a4;
          --*a5;
        }
        result = (char *)utf8_GetNextUtf8Offset(v8, v12);
        v12 = result;
        if (*a5)
          v13 = result >= v9;
        else
          v13 = 1;
      }
      while (!v13);
    }
  }
  return result;
}

uint64_t getDepesLayersForWordAndPOS(uint64_t a1, uint64_t a2, char *__s, char *a4)
{
  char *v5;
  int v8;
  unsigned __int16 v9;
  char **v10;
  char **v11;
  int v12;
  char *v13;
  char *v14;
  BOOL v15;
  BOOL v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  char **v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  char *v33;
  const char *v34;
  int v35;
  char *v36;
  unsigned int v37;
  __int16 v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  int v41;
  int v42;
  int v43;
  unsigned int i;
  uint64_t v45;
  uint64_t j;
  const char *v47;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  int v52;

  v5 = __s;
  v8 = cstdlib_strlen(__s);
  v9 = Utf8_LengthInUtf8chars((unint64_t)v5, v8);
  v10 = (char **)(a1 + 160);
  cstdlib_strcpy(*(char **)(a1 + 160), "");
  v11 = (char **)(a1 + 168);
  cstdlib_strcpy(*(char **)(a1 + 168), "");
  cstdlib_strcpy(*(char **)(a1 + 176), "");
  v49 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 104))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2, v5, 128);
  if ((v49 & 0x80000000) == 0)
  {
    if (a4)
    {
      v12 = cstdlib_strlen(a4);
      Utf8_LengthInUtf8chars((unint64_t)a4, v12);
      v13 = cstdlib_strstr(v5, "║");
      v14 = cstdlib_strstr(a4, "+");
      v15 = v13 != 0;
      v16 = v14 != 0;
      v50 = a4;
      if ((unint64_t)v13 | (unint64_t)v14)
      {
        v17 = (__int16)a4;
        v18 = v14;
        v19 = (__int16)v5;
        v20 = 0;
        v51 = a1;
        v52 = 0;
        while (1)
        {
          v21 = v15 ? (_WORD)v13 - v19 : 0;
          v22 = v16 ? (_WORD)v18 - v17 : 0;
          v23 = v22;
          v24 = v21;
          if (v21)
          {
            if (v22)
              break;
          }
          if (!v21 || v22)
          {
            if (!v21 && v22)
            {
              cstdlib_strncat(*v11, &v50[(unsigned __int16)v52], v22);
              cstdlib_strcat(*v11, " ");
              v30 = 0;
              do
              {
                cstdlib_strcat(*v10, "~");
                ++v30;
              }
              while (v23 > (unsigned __int16)v30);
              v52 += 1 + v23;
              cstdlib_strcat(*v10, " ");
              v18 = cstdlib_strstr(v18 + 1, "+");
              a1 = v51;
              goto LABEL_35;
            }
          }
          else
          {
            cstdlib_strncat(*v10, &v5[(unsigned __int16)v20], v21);
            cstdlib_strcat(*v10, " ");
            v29 = v20 + 3;
            do
            {
              cstdlib_strcat(*v11, "~");
              LODWORD(v23) = v23 + 1;
            }
            while (v24 > (unsigned __int16)v23);
            v20 = v29 + v24;
            cstdlib_strcat(*v11, " ");
            v13 = cstdlib_strstr(v13 + 3, "║");
          }
LABEL_34:
          a1 = v51;
LABEL_35:
          v15 = v13 != 0;
          v16 = v18 != 0;
          if (!((unint64_t)v13 | (unint64_t)v18))
            goto LABEL_45;
        }
        v25 = v21 - v22;
        if (v21 <= v22)
        {
          v26 = v52;
          cstdlib_strncat(*v11, &v50[(unsigned __int16)v52], v22);
          cstdlib_strcat(*v11, " ");
          cstdlib_strncat(*v10, &v5[(unsigned __int16)v20], v24);
          v27 = v10;
          if ((int)v23 - (int)v24 >= 1)
          {
            v31 = 0;
            do
            {
              cstdlib_strcat(*v10, "~");
              ++v31;
            }
            while ((int)v23 - (int)v24 > (unsigned __int16)v31);
            v27 = v10;
            goto LABEL_32;
          }
        }
        else
        {
          cstdlib_strncat(*v10, &v5[(unsigned __int16)v20], v21);
          cstdlib_strcat(*v10, " ");
          v26 = v52;
          cstdlib_strncat(*v11, &v50[(unsigned __int16)v52], v23);
          v27 = v11;
          if (v25 >= 1)
          {
            v28 = 0;
            do
            {
              cstdlib_strcat(*v11, "~");
              ++v28;
            }
            while (v25 > (unsigned __int16)v28);
            v27 = v11;
LABEL_32:
            v26 = v52;
          }
        }
        cstdlib_strcat(*v27, " ");
        v52 = v26 + v23 + 1;
        v20 += v24 + 3;
        v19 = (_WORD)v13 + 3;
        v17 = (_WORD)v18 + 1;
        v13 = cstdlib_strstr(v13 + 3, "║");
        v18 = cstdlib_strstr(v18 + 1, "+");
        goto LABEL_34;
      }
      LOWORD(v52) = 0;
      LOWORD(v20) = 0;
LABEL_45:
      v39 = cstdlib_strlen(v5);
      v40 = cstdlib_strlen(v50);
      if (v39 > (unsigned __int16)v20)
        cstdlib_strcat(*v10, &v5[(unsigned __int16)v20]);
      if (v40 > (unsigned __int16)v52)
        cstdlib_strcat(*v11, &v50[(unsigned __int16)v52]);
      v41 = cstdlib_strlen(*v10);
      v42 = cstdlib_strlen(*v11);
      v43 = v42;
      if ((unsigned __int16)v41 <= (unsigned __int16)v42)
      {
        for (i = (unsigned __int16)v42; i > (unsigned __int16)v41; ++v41)
          cstdlib_strcat(*v10, "~");
      }
      else
      {
        do
        {
          cstdlib_strcat(*v11, "~");
          ++v43;
        }
        while ((unsigned __int16)v41 > (unsigned __int16)v43);
      }
      v45 = (unsigned __int16)cstdlib_strlen(*v10);
      if (v45)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 160) + j) == 32)
            v47 = " ";
          else
            v47 = "~";
          cstdlib_strcat(*(char **)(a1 + 176), v47);
        }
      }
    }
    else if (v9)
    {
      v32 = 0;
      do
      {
        v33 = v5;
        v34 = &v5[v32];
        v35 = cstdlib_strncmp(v34, "║", 3uLL);
        v36 = *v10;
        if (v35)
        {
          v37 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v34);
          cstdlib_strncat(v36, v34, v37);
          cstdlib_strcat(*(char **)(a1 + 168), "~");
          cstdlib_strcat(*(char **)(a1 + 176), "~");
          v38 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v34);
        }
        else
        {
          cstdlib_strcat(*v10, " ");
          cstdlib_strcat(*(char **)(a1 + 168), " ");
          cstdlib_strcat(*(char **)(a1 + 176), " ");
          v38 = 3;
        }
        v5 = v33;
        v32 += v38;
      }
      while (v32 < v9);
    }
  }
  return v49;
}

uint64_t oneword_SkipCrosstoken(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, unsigned __int16 a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v26;
  __int16 v27;
  unsigned __int16 v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v31;
  __int16 v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *);
  uint64_t v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v37;
  __int16 v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v40;
  __int16 v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v43;
  __int16 v44;
  unsigned int v46;
  __int16 v47;
  unsigned __int16 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  char *__s;
  int v58;
  int v59;
  unsigned int v60;
  __int16 v61;
  __int16 v62;

  v62 = a6;
  v61 = a7;
  v58 = 17;
  v59 = 9;
  v56 = 0;
  __s = 0;
  v54 = 0;
  v55 = 0;
  v15 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (2 * a5) | 1);
  if (v15)
  {
    v20 = (char *)v15;
    if (a5 >= 2)
    {
      v21 = a5 - 1;
      do
      {
        cstdlib_strcat(v20, "*.");
        --v21;
      }
      while (v21);
    }
    v60 = 0;
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v48 = 0;
    cstdlib_strcat(v20, "*");
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, a9, 0, 1, &v60, (char *)&v53 + 2);
    if ((v22 & 0x80000000) == 0)
    {
      v23 = *(_QWORD *)(a1 + 56);
      v22 = v60 > 1
          ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v23 + 88))(a2, a3, a9, (char *)&v49 + 2)
          : (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v23 + 80))(a2, a3, a9, (char *)&v49 + 2);
      if ((v22 & 0x80000000) == 0)
      {
        v60 = 9;
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 0, 1, &v60, &v53);
        if ((v22 & 0x80000000) == 0)
        {
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 1, 1, &v62, &v53);
          if ((v22 & 0x80000000) == 0)
          {
            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 2, 1, &v61, &v53);
            if ((v22 & 0x80000000) == 0)
            {
              v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
              v26 = HIWORD(v49);
              v27 = cstdlib_strlen(v20);
              v22 = v25(a2, a3, v26, 3, (unsigned __int16)(v27 + 1), v20, &v53);
              if ((v22 & 0x80000000) == 0)
              {
                v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 5, 1, "*", &v53);
                if ((v22 & 0x80000000) == 0)
                {
                  v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 6, 1, "*", &v53);
                  if ((v22 & 0x80000000) == 0)
                  {
                    if (cstdlib_strcmp(a4, "latin")
                      || (v47 = 1,
                          v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 7, 1, &v47, &v53), (v22 & 0x80000000) == 0))
                    {
                      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 9, 7, "normal", &v53);
                      if ((v24 & 0x80000000) != 0)
                        goto LABEL_60;
                      LOWORD(v50) = a8;
                      if (HIWORD(v49) == a8)
                        goto LABEL_60;
                      v28 = 0;
                      while (1)
                      {
                        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)a8, 0, 1, &v60, (char *)&v53 + 2);
                        if ((v22 & 0x80000000) != 0)
                          break;
                        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v50, 1, 1, &v52, (char *)&v53 + 2);
                        if ((v22 & 0x80000000) != 0)
                          break;
                        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v50, 2, 1, (char *)&v51 + 2, (char *)&v53 + 2);
                        if ((v22 & 0x80000000) != 0)
                          break;
                        if (v60 <= 1)
                        {
                          v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 136))(a2, a3, (unsigned __int16)v50, &v48);
LABEL_27:
                          if ((v22 & 0x80000000) != 0)
                            break;
                          v29 = v48;
                          while (v29 != v28)
                          {
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v29, 0, 1, &v59, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v48, 1, 1, &v51, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v48, 2, 1, (char *)&v50 + 2, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            if (v59 != 4
                              || (unsigned __int16)v51 != (unsigned __int16)v52
                              || HIWORD(v50) != HIWORD(v51))
                            {
                              v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 136))(a2, a3, v48, &v48);
                              goto LABEL_27;
                            }
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 56)
                                                                                              + 88))(a2, a3, HIWORD(v49), (char *)&v49 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v48, 3, &__s, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v48, 5, &v54, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v48, 7, 1, (char *)&v52 + 2, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v48, 6, &v56, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a2, a3, v48, 9, &v55, (char *)&v53 + 2);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 0, 1, &v58, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            LOWORD(v51) = v51 + *(_WORD *)(a1 + 224);
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 1, 1, &v51, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            HIWORD(v50) += *(_WORD *)(a1 + 224);
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 2, 1, (char *)&v50 + 2, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v31 = HIWORD(v49);
                            v32 = cstdlib_strlen(__s);
                            v22 = v30(a2, a3, v31, 3, (unsigned __int16)(v32 + 1), __s, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v34 = HIWORD(v49);
                            v35 = cstdlib_strlen(a4);
                            v22 = v33(a2, a3, v34, 4, (unsigned __int16)(v35 + 1), a4, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v37 = HIWORD(v49);
                            v38 = cstdlib_strlen(v54);
                            v22 = v36(a2, a3, v37, 5, (unsigned __int16)(v38 + 1), v54, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v40 = HIWORD(v49);
                            v41 = cstdlib_strlen(v56);
                            v22 = v39(a2, a3, v40, 6, (unsigned __int16)(v41 + 1), v56, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, HIWORD(v49), 7, 1, (char *)&v52 + 2, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v43 = HIWORD(v49);
                            v44 = cstdlib_strlen(v55);
                            v22 = v42(a2, a3, v43, 9, (unsigned __int16)(v44 + 1), v55, &v53);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 56)
                                                                                             + 136))(a2, a3, v48, &v49);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 56) + 192))(a2, a3, v48);
                            if ((v22 & 0x80000000) != 0)
                              goto LABEL_59;
                            v29 = (unsigned __int16)v49;
                            v48 = v49;
                          }
                          v28 = v50;
                        }
                        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 120))(a2, a3);
                        if ((v24 & 0x80000000) == 0)
                        {
                          LOWORD(a8) = v50;
                          if ((unsigned __int16)v50 != HIWORD(v49))
                            continue;
                        }
                        goto LABEL_60;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    v24 = v22;
LABEL_60:
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v20);
    return v24;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v16, v17, v18, v19, v46);
  return 2310021130;
}

uint64_t hlp_RemoveMNCRecords(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;

  v14 = heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 129);
  if (!v14)
  {
    log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v15, v16, v17, v18, v27);
    return 2310021130;
  }
  v19 = (char *)v14;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v28 = 0;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[7] + 120))(a2, a3, a5, &v32);
  if ((v20 & 0x80000000) == 0)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, a5, 1, 1, &v29, (char *)&v30 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, a6, 2, 1, &v28, (char *)&v30 + 2);
      if ((v21 & 0x80000000) != 0)
        goto LABEL_22;
      v22 = v32;
      if (!v32)
        goto LABEL_22;
      while (1)
      {
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v22, 0, 1, &v31, (char *)&v30 + 2);
        if ((v20 & 0x80000000) != 0)
          break;
        if (v31 == 4)
        {
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v32, 1, 1, &v30, (char *)&v30 + 2);
          if ((v20 & 0x80000000) != 0)
            break;
          v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v32, 2, 1, (char *)&v29 + 2, (char *)&v30 + 2);
          if ((v21 & 0x80000000) != 0)
            goto LABEL_22;
          if ((unsigned __int16)v30 > ~a7)
          {
            v23 = HIWORD(v29) - (unint64_t)(unsigned __int16)v30;
            if ((int)v23 <= 127)
            {
              cstdlib_strncpy(v19, (const char *)(*a4 + (unsigned __int16)v30 + a7), v23);
              v24 = HIWORD(v29);
              v25 = (unsigned __int16)v30;
              v19[HIWORD(v29) - (unsigned __int16)v30] = 0;
              if (v25 < (unsigned __int16)v29 || v24 > v28 || cstdlib_strlen(v19) < 2 || !cstdlib_strstr(v19, "_"))
                goto LABEL_22;
              v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[7] + 192))(a2, a3, v32);
              if ((v20 & 0x80000000) != 0)
                break;
              v32 = a5;
            }
          }
        }
        LOWORD(a5) = v32;
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[7] + 120))(a2, a3, v32, &v32);
        if ((v21 & 0x80000000) == 0)
        {
          v22 = v32;
          if (v32)
            continue;
        }
        goto LABEL_22;
      }
    }
  }
  v21 = v20;
LABEL_22:
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v19);
  return v21;
}

uint64_t oneword_TranscribeAcronym(uint64_t a1, char *a2, const char *a3, unsigned __int8 *a4, char *a5)
{
  unsigned __int16 v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int16 v24;
  const char **v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  unsigned __int8 *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  unsigned int v64;
  int v65;
  BOOL v66;
  char *v67;
  uint64_t appended;
  unsigned __int8 v69;
  uint64_t (*v70)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v71;
  unsigned __int16 v72;
  const char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  char v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 v89;
  char __s1[6];
  unsigned __int16 v91;
  int v92[2];
  unsigned __int8 __c;
  unsigned __int16 __c_1;
  uint64_t __c_3;
  char v96[2];
  char __dst[128];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  *(_QWORD *)v92 = 0;
  v91 = 0;
  cstdlib_strcpy(__dst, "one_word");
  v9 = cstdlib_strlen(__dst);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v11 = cstdlib_strlen(a3);
  v12 = (char *)heap_Alloc(v10, (v11 + 1));
  if (!v12)
  {
    v21 = 2310021130;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v13, v14, v15, v16, v79);
    return v21;
  }
  v17 = v12;
  cstdlib_strcpy(v12, a3);
  v81 = a4;
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    v18 = cstdlib_strchr(a2, 95);
    if (v18)
      v19 = v18 + 1;
    else
      v19 = a2;
    v84 = v19;
    v20 = *v19;
  }
  else
  {
    v84 = 0;
    v20 = 32;
  }
  v83 = v20;
  cstdlib_strlen(v17);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (const char **)(a1 + 160);
  v26 = (_QWORD *)(a1 + 192);
  v82 = v9;
  v85 = v9 + 2;
  v89 = 32;
  v86 = (uint64_t)v17;
  while (1)
  {
    v27 = v17[v22];
    if (v27 >= -64)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 80) + 128))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v17[v22]))
      {
        break;
      }
      LOBYTE(v27) = v17[v22];
    }
    v28 = v27;
    v29 = (1 << v27) & 0x100002601;
    v30 = v28 > 0x20 || v29 == 0;
    if (!v30 || v28 == 95)
      break;
    ++v23;
LABEL_90:
    v22 = (unsigned __int16)v23;
    if (cstdlib_strlen(v17) < (unsigned __int16)v23)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v17);
      v21 = 0;
      *v81 = v89;
      return v21;
    }
  }
  v87 = (char *)&v17[v22];
  if ((unsigned __int16)v23 == v24)
  {
LABEL_88:
    v96[0] = *v87;
    v96[1] = 0;
    appended = oneword_AppendPhon(a1, v96, "", (uint64_t)"", 32, 0);
    if ((appended & 0x80000000) != 0)
      goto LABEL_94;
    v24 = ++v23;
    goto LABEL_90;
  }
  cstdlib_strcpy(*(char **)(a1 + 160), "");
  if (!dynamic_strncat(v25, &v17[v24], v22 - v24, v26, *(uint64_t **)(*(_QWORD *)a1 + 8)))
    return 2310021130;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v31, v32, v33, *(_QWORD *)(a1 + 160));
  __c_1 = 0;
  if (*(_DWORD *)(a1 + 1224))
  {
    cstdlib_strcpy(__s1, "g2p");
    cstdlib_strcat(__s1, (const char *)(a1 + 3 * **(unsigned __int8 **)(a1 + 160) + 1228));
    v34 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD, uint64_t *, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)(a1 + 80) + 232))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, *(_QWORD *)(a1 + 160), &__c_3, &__c_1, &__c, 0);
  }
  else
  {
    LODWORD(v80) = 0;
    v34 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, _QWORD, uint64_t *, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)(a1 + 80) + 240))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "g2p", *(_QWORD *)(a1 + 160), &__c_3, &__c_1, &__c, *(unsigned __int8 *)(a1 + 556));
  }
  v21 = v34;
  if ((v34 & 0x80000000) != 0)
    goto LABEL_95;
  if (!__c_1)
  {
    v69 = 32;
LABEL_74:
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v35, v36, v37, (uint64_t)__dst);
    v70 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
    v71 = *(const char **)(a1 + 160);
    v72 = cstdlib_strlen(v71);
    appended = v70(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v71, v72);
    if ((appended & 0x80000000) != 0)
      goto LABEL_94;
    if (cstdlib_strcmp(a2, "normal") && v85 + cstdlib_strlen(a2) <= 0x7F)
    {
      cstdlib_strcat(__dst, "_");
      cstdlib_strcat(__dst, a2);
    }
    if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst) & 0x80000000) != 0)
    {
      __dst[v82] = 0;
      appended = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst);
      if ((appended & 0x80000000) != 0)
        goto LABEL_94;
    }
    else
    {
      if (*(_DWORD *)(a1 + 560))
      {
        v73 = v84;
        v74 = v83;
        if (!v84)
          goto LABEL_86;
      }
      else
      {
        v74 = *a2;
        v73 = a2;
      }
      cstdlib_strncpy(a5, v73, 0x14uLL);
      v69 = v74;
    }
LABEL_86:
    appended = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, int *, unsigned __int16 *))(*(_QWORD *)(a1 + 104)
                                                                                            + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v92, &v91);
    if ((appended & 0x80000000) != 0)
      goto LABEL_94;
    *(_BYTE *)(*(_QWORD *)v92 + v91) = 0;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v75, v76, v77, (uint64_t)__dst);
    v89 = v69;
    appended = oneword_AppendPhon(a1, *(char **)v92, "*", (uint64_t)"*", v69, 1);
    if ((appended & 0x80000000) != 0)
      goto LABEL_94;
    goto LABEL_88;
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v89 = 32;
  do
  {
    v41 = *(char **)(__c_3 + 8 * v38);
    v42 = cstdlib_strchr(v41, __c);
    if (!v42)
    {
      v48 = 0;
LABEL_37:
      v52 = 0;
LABEL_38:
      v55 = 0;
      goto LABEL_39;
    }
    *v42 = 0;
    v47 = cstdlib_strchr(v42 + 1, __c);
    v48 = v47;
    if (!v47)
      goto LABEL_37;
    *v47 = 0;
    v48 = v47 + 1;
    v49 = cstdlib_strchr(v47 + 1, __c);
    if (!v49)
      goto LABEL_37;
    *v49 = 0;
    v50 = cstdlib_strchr(v49 + 1, __c);
    if (!v50)
      goto LABEL_37;
    *v50 = 0;
    v51 = cstdlib_strchr(v50 + 1, __c);
    v52 = (unsigned __int8 *)v51;
    if (!v51)
      goto LABEL_38;
    *v51 = 0;
    v52 = (unsigned __int8 *)(v51 + 1);
    v53 = cstdlib_strchr(v51 + 1, __c);
    if (!v53)
      goto LABEL_38;
    *v53 = 0;
    v54 = cstdlib_strchr(v53 + 1, __c);
    v55 = v54;
    if (v54)
    {
      *v54 = 0;
      v55 = v54 + 1;
      v56 = cstdlib_strchr(v54 + 1, __c);
      if (v56)
        *v56 = 0;
    }
LABEL_39:
    if (!v41)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v43, v44, v45, v46, v80);
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v86);
      return 2310021127;
    }
    oneword_ReplaceUnderscoreWithDot(v41);
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v57, v58, v59, (uint64_t)v41);
    if (v48 && cstdlib_strcmp(v48, "") && !cstdlib_strstr(v48, a2))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Domain validation not OK", v35, v36, v37, v80);
    }
    else if (v55
           && *(_DWORD *)(a1 + 1204)
           && ((v60 = cstdlib_strstr(a2, v55)) == 0 || (v61 = v60, cstdlib_strlen(v55)) && v61[cstdlib_strlen(v55)])
           && ((v62 = cstdlib_strstr(*(char **)(a1 + 1216), a2), LH_stricmp(v55, *(char **)(a1 + 1208)))
            || !v62
            || v62[cstdlib_strlen(a2)] != 124))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Language %s validation not OK", v35, v36, v37, (uint64_t)v55);
    }
    else
    {
      if (v52 && cstdlib_strcmp((const char *)v52, ""))
        v63 = cstdlib_atoi(v52);
      else
        v63 = 1;
      v64 = (unsigned __int16)(v63 - 1);
      if (v64 < (unsigned __int16)v39)
      {
        v65 = v39;
      }
      else
      {
        v40 = v41;
        v65 = v63;
      }
      if (v55)
      {
        v66 = v64 >= (unsigned __int16)v39;
        v39 = v65;
        if (v66)
        {
          v89 = *v55;
          cstdlib_strncpy(a5, v55, 0x14uLL);
          v40 = v41;
          v39 = v63;
        }
      }
      else
      {
        v39 = v65;
      }
    }
    ++v38;
  }
  while (v38 < __c_1);
  if (!v40)
  {
    v25 = (const char **)(a1 + 160);
    v17 = (const char *)v86;
    v26 = (_QWORD *)(a1 + 192);
    v69 = v89;
    goto LABEL_74;
  }
  v67 = cstdlib_strchr(v40, 18);
  v26 = (_QWORD *)(a1 + 192);
  v25 = (const char **)(a1 + 160);
  if (v67)
    *v67 = 0;
  if (!cstdlib_strcmp(v40, "_"))
  {
    v17 = (const char *)v86;
    goto LABEL_88;
  }
  appended = oneword_AppendPhon(a1, v40, "*", (uint64_t)"*", v89, 1);
  v17 = (const char *)v86;
  if ((appended & 0x80000000) == 0)
    goto LABEL_88;
LABEL_94:
  v21 = appended;
LABEL_95:
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v17);
  return v21;
}

size_t oneword_ReplaceUnderscoreWithDot(const char *a1)
{
  char *v1;
  size_t result;
  uint64_t v3;

  v1 = (char *)a1;
  result = cstdlib_strlen(a1);
  v3 = (unsigned __int16)result;
  if ((_WORD)result)
  {
    do
    {
      if (*v1 == 95)
        *v1 = 46;
      ++v1;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t oneword_AppendPhon(uint64_t a1, char *a2, char *__s, uint64_t a4, int a5, uint64_t a6)
{
  char v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  __int16 v33;
  int v34;
  __int16 v35;
  char *v36;
  const char *v37;
  __int16 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v54;
  const char *v55;
  char __s2[2];

  if (a5)
    v11 = a5;
  else
    v11 = 32;
  __s2[0] = v11;
  __s2[1] = 0;
  if (cstdlib_strlen(__s) >= 2)
  {
    if (!(_DWORD)a6 && cstdlib_strchr(__s, 32))
    {
      if (cstdlib_strlen((const char *)a4) <= 1)
        goto LABEL_14;
LABEL_12:
      if (cstdlib_strchr((char *)a4, 32))
        goto LABEL_14;
      goto LABEL_13;
    }
    __s[1] = 0;
  }
  if (cstdlib_strlen((const char *)a4) <= 1)
    goto LABEL_14;
  if (!(_DWORD)a6)
    goto LABEL_12;
LABEL_13:
  *(_BYTE *)(a4 + 1) = 0;
LABEL_14:
  if (!cstdlib_strcmp(a2, ""))
    return 0;
  v12 = cstdlib_strlen(*(const char **)(a1 + 240));
  v13 = cstdlib_strlen(a2);
  v14 = v12 + 7;
  if (!(_DWORD)a6)
    v14 = v12 + 1;
  v15 = v14 + v13;
  if (v15 >= 0x81u)
  {
    v16 = v15;
    v17 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 240), v15);
    if (!v17
      || (*(_QWORD *)(a1 + 240) = v17,
          (v22 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 248), v16)) == 0)
      || (*(_QWORD *)(a1 + 248) = v22,
          (v23 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 256), v16)) == 0)
      || (*(_QWORD *)(a1 + 256) = v23,
          (v24 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 264), v16)) == 0))
    {
      a6 = 2310021130;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v18, v19, v20, v21, v54);
      return a6;
    }
    *(_QWORD *)(a1 + 264) = v24;
  }
  if ((_DWORD)a6)
  {
    cstdlib_strcat(*(char **)(a1 + 240), "◄");
    cstdlib_strcat(*(char **)(a1 + 248), " ");
    cstdlib_strcat(*(char **)(a1 + 256), " ");
    cstdlib_strcat(*(char **)(a1 + 264), " ");
  }
  v25 = cstdlib_strstr(a2, "◄");
  if (cstdlib_strchr(__s, 32) || !v25)
  {
    cstdlib_strcat(*(char **)(a1 + 240), a2);
    cstdlib_strcat(*(char **)(a1 + 248), __s);
    cstdlib_strcat(*(char **)(a1 + 256), (const char *)a4);
    cstdlib_strcat(*(char **)(a1 + 264), __s2);
    v48 = cstdlib_strlen(a2);
    v49 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, v48);
    if (v49 > (unsigned __int16)cstdlib_strlen(__s))
    {
      v50 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 248), "~");
        ++v50;
      }
      while ((int)(v49 - (unsigned __int16)cstdlib_strlen(__s)) > (unsigned __int16)v50);
    }
    if (v49 > (unsigned __int16)cstdlib_strlen((const char *)a4))
    {
      v51 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 256), "~");
        ++v51;
      }
      while ((int)(v49 - (unsigned __int16)cstdlib_strlen((const char *)a4)) > (unsigned __int16)v51);
    }
    if (v49 > (unsigned __int16)cstdlib_strlen(__s2))
    {
      v52 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 264), __s2);
        ++v52;
      }
      while ((int)(v49 - (unsigned __int16)cstdlib_strlen(__s2)) > (unsigned __int16)v52);
    }
  }
  else
  {
    v26 = cstdlib_strlen("◄");
    v55 = cstdlib_strstr(&v25[v26], "◄");
    if (!v55)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v27, v28, v29, v30, 0);
      return 2310021127;
    }
    v31 = *(char **)(a1 + 240);
    v32 = cstdlib_strlen("◄");
    cstdlib_strncat(v31, a2, (unsigned __int16)(v32 + (_WORD)v25 - (_WORD)a2));
    v33 = cstdlib_strlen("◄");
    if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v25 - (int)a2 + v33))
    {
      v34 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 248), " ");
        cstdlib_strcat(*(char **)(a1 + 256), " ");
        cstdlib_strcat(*(char **)(a1 + 264), " ");
        ++v34;
        v35 = cstdlib_strlen("◄");
      }
      while ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v25 - (int)a2 + v35) > (unsigned __int16)v34);
    }
    v36 = *(char **)(a1 + 240);
    v37 = &v25[(__int16)cstdlib_strlen("◄")];
    v38 = cstdlib_strlen("◄");
    cstdlib_strncat(v36, v37, (unsigned __int16)((_WORD)v55 - (_WORD)v25 - v38));
    cstdlib_strcat(*(char **)(a1 + 248), __s);
    cstdlib_strcat(*(char **)(a1 + 256), (const char *)a4);
    cstdlib_strcat(*(char **)(a1 + 264), __s2);
    v39 = (__int16)Utf8_LengthInUtf8chars((unint64_t)v25, (int)v55 - (int)v25) - 1;
    if (v39 > (__int16)cstdlib_strlen(__s))
    {
      v40 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 248), "~");
        ++v40;
      }
      while (v39 - (__int16)cstdlib_strlen(__s) > (__int16)v40);
    }
    if (v39 > (__int16)cstdlib_strlen((const char *)a4))
    {
      v41 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 256), "~");
        ++v41;
      }
      while (v39 - (__int16)cstdlib_strlen((const char *)a4) > (__int16)v41);
    }
    if (v39 > (__int16)cstdlib_strlen(__s2))
    {
      v42 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 264), __s2);
        ++v42;
      }
      while (v39 - (__int16)cstdlib_strlen(__s2) > (__int16)v42);
    }
    cstdlib_strcat(*(char **)(a1 + 240), v55);
    v43 = cstdlib_strlen(a2);
    v44 = Utf8_LengthInUtf8chars((unint64_t)a2, v43) << 16;
    if (v44 > (int)(Utf8_LengthInUtf8chars((unint64_t)a2, (int)v55 - (int)a2) << 16))
    {
      v45 = 0;
      do
      {
        cstdlib_strcat(*(char **)(a1 + 248), " ");
        cstdlib_strcat(*(char **)(a1 + 256), " ");
        cstdlib_strcat(*(char **)(a1 + 264), " ");
        ++v45;
        v46 = cstdlib_strlen(a2);
        v47 = (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, v46);
      }
      while (v47 - (__int16)Utf8_LengthInUtf8chars((unint64_t)a2, (int)v55 - (int)a2) > (__int16)v45);
    }
  }
  if ((_DWORD)a6)
  {
    cstdlib_strcat(*(char **)(a1 + 240), "◄");
    cstdlib_strcat(*(char **)(a1 + 248), " ");
    cstdlib_strcat(*(char **)(a1 + 256), " ");
    cstdlib_strcat(*(char **)(a1 + 264), " ");
    return 0;
  }
  return a6;
}

uint64_t oneword_ConvertPhon(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, int a12)
{
  int v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;
  char *v33;
  int v34;
  char *v35;
  _BOOL4 v36;
  unsigned int v37;
  int v38;
  uint64_t v40;
  char *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  const char *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  __int16 v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v61;
  __int16 v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v64;
  __int16 v65;
  char *i;
  unsigned int v67;
  __int16 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  char *v79;
  unsigned __int16 v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int16 v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *);
  uint64_t v108;
  __int16 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  int v116;
  unsigned int v117;
  BOOL v118;
  unsigned int v119;
  uint64_t (*v120)(_QWORD, _QWORD, uint64_t, char *, _QWORD, char *, char *);
  char *v121;
  unsigned __int16 v122;
  char *v123;
  unsigned __int16 v124;
  char v125;
  unsigned __int16 *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  _BYTE __c[11];
  char *__s;
  __int16 v133;
  unsigned __int16 v134;
  char __dst[4];
  __int16 v136;
  char *__s1;
  __int16 v138;
  __int16 v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned __int16 v143;
  __int16 v144;
  char v145[20];
  char v146[8];
  char v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v144 = a4;
  v18 = *a8;
  v143 = *a8;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v139 = 1;
  v138 = 0;
  __s1 = 0;
  v136 = 200;
  v134 = 0;
  v133 = 0;
  __s = 0;
  cstdlib_strcpy(__dst, "");
  v19 = (unsigned __int16)*a10;
  if (v19 < *a11)
  {
    v20 = (_DWORD *)(a9 + 32 * v19 + 12);
    do
    {
      if (*v20 - a12 >= a5)
        break;
      *v20 += *(__int16 *)(a1 + 224);
      v20 += 8;
      *a10 = ++v19;
    }
    while (v19 < *a11);
  }
  v21 = 0;
  if (v18)
  {
    while (!v21 || SHIWORD(v140) < (__int16)a5)
    {
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, (unsigned __int16)v18, 0, 1, &v142, (char *)&v141 + 2);
      if ((v22 & 0x80000000) != 0)
        return v22;
      if (v142 > 3)
      {
        v23 = 0;
        if (v142 == 5)
          v21 = v143;
      }
      else
      {
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, v143, 2, 1, (char *)&v140 + 2, (char *)&v141 + 2);
        if ((v22 & 0x80000000) != 0)
          return v22;
        v23 = v143;
      }
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 120))(a6, a7);
      if ((v22 & 0x80000000) != 0)
        return v22;
      if ((_DWORD)v23)
      {
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 192))(a6, a7, v23);
        if ((v22 & 0x80000000) != 0)
          return v22;
        v18 = v143;
        if (*(unsigned __int16 *)(a1 + 280) == (_DWORD)v23)
          *(_WORD *)(a1 + 280) = v143;
        if (!v18)
          break;
      }
      else
      {
        LOWORD(v18) = v143;
        if (!v143)
          break;
      }
    }
  }
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a6, a7, v21, 3, &__s1, (char *)&v141 + 2);
  if ((v22 & 0x80000000) != 0)
    return v22;
  v133 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a1 + 56) + 184))(a6, a7, v21, 9, &v133) & 0x80000000) == 0&& v133 == 1)
  {
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a6, a7, v21, 9, &__s, (char *)&v141 + 2);
    if ((v22 & 0x80000000) != 0)
      return v22;
  }
  cstdlib_strcpy(v145, "EXTMRKP");
  v24 = cstdlib_strstr(__s1, "\x14");
  if (v24)
  {
    *v24 = 0;
    v25 = &v24[cstdlib_strlen("\x14")];
    v26 = cstdlib_strstr(v25, "\x14");
    v27 = v26;
    if (v26)
    {
      *v26 = 0;
      v27 = v26 + 1;
      if (cstdlib_strlen(v26 + 1) != 3)
        v27 = 0;
    }
    if (cstdlib_strlen(v25) && cstdlib_strlen(v25) + 1 <= 0x14)
      cstdlib_strcpy(v145, v25);
  }
  else
  {
    v27 = 0;
  }
  v28 = __s1;
  if (*__s1 == 32)
  {
    v29 = __s1 + 1;
    do
    {
      __s1 = v29;
      v30 = *v29++;
    }
    while (v30 == 32);
    v28 = v29 - 1;
  }
  v31 = cstdlib_strchr(v28, 18);
  v126 = a8;
  if (v31)
  {
    *v31 = 0;
    v127 = v31 + 1;
  }
  else
  {
    v127 = 0;
  }
  v32 = cstdlib_strlen(__s1);
  v33 = __s1;
  if (v32 >= 5)
  {
    v34 = *__s1;
    if (v34 != 92)
      goto LABEL_51;
    if (__s1[1] == 84)
    {
      *(_QWORD *)&__c[3] = 0;
      *(_WORD *)&__c[1] = -1;
      __c[0] = 0;
      cstdlib_strcpy(v146, "lngphon_e");
      v147 = __s1[2];
      v22 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", v146, &__c[3], &__c[1], __c);
      if ((v22 & 0x80000000) != 0)
        return v22;
      if (*(_WORD *)&__c[1])
      {
        v35 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v35)
          *v35 = 0;
        cstdlib_strncpy(__dst, **(const char ***)&__c[3], 3uLL);
      }
      v33 = __s1 + 4;
      __s1 += 4;
    }
  }
  v34 = *v33;
LABEL_51:
  if (v34 == 35)
  {
    *(_WORD *)&__c[3] = v21;
    v36 = v21 != 0;
    v37 = v142;
    if (!v21 || v142 == 4 || v142 == 9)
    {
      LOWORD(v38) = v21;
    }
    else
    {
      LOWORD(v38) = v21;
      if (v142 != 10)
      {
        LOWORD(v38) = v21;
        do
        {
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)(a1 + 56) + 136))(a6, a7, (unsigned __int16)v38, &__c[3]);
          if ((v22 & 0x80000000) != 0)
            return v22;
          if (*(_WORD *)&__c[3])
          {
            v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a6, a7);
            if ((v22 & 0x80000000) != 0)
              return v22;
            v38 = *(unsigned __int16 *)&__c[3];
          }
          else
          {
            v38 = 0;
          }
          v36 = v38 != 0;
          v37 = v142;
        }
        while (v38 && v142 != 4 && v142 != 9 && v142 != 10);
      }
    }
    if (v36)
    {
      *(_WORD *)&__c[1] = v38;
      *(_DWORD *)v146 = v37;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v38, 8, 1, &v136, &v141);
      if ((v22 & 0x80000000) == 0)
      {
        while (1)
        {
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, *(unsigned __int16 *)&__c[1], &__c[1]);
          if ((v22 & 0x80000000) != 0)
            break;
          if (!*(_WORD *)&__c[1])
            goto LABEL_82;
          v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a6, a7);
          if ((v22 & 0x80000000) != 0)
            break;
          if (!*(_WORD *)&__c[1])
            goto LABEL_82;
          if (*(unsigned __int16 *)&__c[1] == v21 || *(_DWORD *)v146 != 8)
            goto LABEL_82;
          v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 160))(a6, a7);
          if ((v22 & 0x80000000) != 0)
            return v22;
        }
      }
      return v22;
    }
LABEL_82:
    v33 = __s1;
    if (*__s1 == 35)
    {
      v42 = __s1 + 1;
      do
      {
        __s1 = v42;
        v43 = *v42++;
      }
      while (v43 == 35);
      v33 = v42 - 1;
    }
  }
  v142 = 10;
  LOWORD(v44) = v144;
  while (1)
  {
    v45 = *(unsigned __int8 *)(a2 + (unsigned __int16)v44);
    v46 = v45 > 0x20 || ((1 << v45) & 0x100002600) == 0;
    if (v46 && v45 != 95)
      break;
    LOWORD(v44) = v44 + 1;
    v144 = v44;
  }
  if (a5 <= (unsigned __int16)v44)
  {
    v124 = 0;
    v47 = 0;
LABEL_198:
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, (unsigned __int16)v140, v126);
    if ((v40 & 0x80000000) == 0 && v124 && v134 >= 2u)
    {
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, v124, 7, 1, &v134, &v141);
LABEL_202:
      v40 = v55;
      if (!v47)
        return v40;
      goto LABEL_206;
    }
    goto LABEL_205;
  }
  v47 = 0;
  v124 = 0;
  v48 = 0;
  v49 = a5;
  v122 = v21;
  v123 = v27;
  while (2)
  {
    v50 = (unsigned __int16)v44;
    if (a5 <= (unsigned __int16)(v44 + 1))
      v51 = v44 + 1;
    else
      v51 = a5;
    while (1)
    {
      v52 = *(unsigned __int8 *)(a2 + v50);
      v53 = v52 > 0x20 || ((1 << v52) & 0x100002600) == 0;
      if (!v53 || v52 == 95)
        break;
      if (++v50 >= v49)
        goto LABEL_108;
    }
    v51 = v50;
LABEL_108:
    HIWORD(v140) = v51;
    v54 = *(_QWORD *)(a1 + 56);
    v125 = v48;
    if ((v48 & 1) != 0)
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v54 + 80))(a6, a7, (unsigned __int16)v140, &v140);
    else
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v54 + 88))(a6, a7, v21, &v140);
    if ((v55 & 0x80000000) != 0)
      goto LABEL_202;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 0, 1, &v142, &v141);
    if ((v55 & 0x80000000) != 0)
      goto LABEL_202;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 160))(a6, a7, (unsigned __int16)v140, 1, 1, &v144, &v141);
    if ((v55 & 0x80000000) != 0)
      goto LABEL_202;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56)
                                                                                               + 160))(a6, a7, (unsigned __int16)v140, 2, 1, (char *)&v140 + 2, &v141);
    if ((v55 & 0x80000000) != 0)
      goto LABEL_202;
    v129 = (char *)v47;
    if (__s)
    {
      v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                + 160);
      v57 = (unsigned __int16)v140;
      v58 = cstdlib_strlen(__s);
      v59 = v56(a6, a7, v57, 9, (unsigned __int16)(v58 + 1), __s, &v141);
      if ((v59 & 0x80000000) != 0)
        goto LABEL_204;
    }
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56)
                                                                                              + 160);
    v61 = (unsigned __int16)v140;
    v62 = cstdlib_strlen(v145);
    v59 = v60(a6, a7, v61, 21, (unsigned __int16)(v62 + 1), v145, &v141);
    if ((v59 & 0x80000000) != 0)
      goto LABEL_204;
    if (v123)
    {
      v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                + 160);
      v64 = (unsigned __int16)v140;
      v65 = cstdlib_strlen(v123);
      v59 = v63(a6, a7, v64, 12, (unsigned __int16)(v65 + 1), v123, &v141);
      if ((v59 & 0x80000000) != 0)
        goto LABEL_204;
    }
    ++v134;
    for (i = v33 + 1; ; ++i)
    {
      v67 = *v33;
      if (v67 > 0x22)
        break;
      if (!*v33 || v67 == 32)
        goto LABEL_132;
LABEL_127:
      ++v33;
    }
    if (v67 == 35)
      goto LABEL_132;
    if (v67 != 95)
      goto LABEL_127;
    if (v33[1] == 95)
      v68 = 2;
    else
      v68 = 1;
    v138 = v68;
LABEL_132:
    *v33 = 0;
    if (!cstdlib_strcmp(__s1, ""))
    {
      v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 3, 1, "", &v141);
      if ((v59 & 0x80000000) != 0)
        goto LABEL_204;
      v47 = v129;
      goto LABEL_155;
    }
    v69 = *(uint64_t **)(*(_QWORD *)a1 + 8);
    v70 = (2 * cstdlib_strlen(__s1)) | 1;
    v71 = v69;
    v47 = v129;
    v72 = (char *)heap_Realloc(v71, (uint64_t)v129, v70);
    if (!v72)
    {
      v40 = 2310021130;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v73, v74, v75, v76, v119);
      if (!v129)
        return v40;
      goto LABEL_206;
    }
    v77 = v72;
    v121 = v33;
    if (!*(_DWORD *)(a1 + 580))
    {
      cstdlib_strcpy(v72, __s1);
      v47 = v77;
LABEL_146:
      if (cstdlib_strcmp(v47, "*,")
        && cstdlib_strcmp(v47, "*;")
        && cstdlib_strcmp(v47, "*:")
        && cstdlib_strcmp(v47, "'")
        && cstdlib_strcmp(v47, "\""))
      {
        v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 160);
        v130 = (char *)v47;
        v98 = (unsigned __int16)v140;
        v99 = cstdlib_strlen(v130);
        v100 = v98;
        v47 = v130;
        v101 = v97(a6, a7, v100, 3, (unsigned __int16)(v99 + 1), v130, &v141);
        v33 = v121;
        if ((v101 & 0x80000000) != 0)
        {
          v40 = v101;
LABEL_207:
          v91 = 0;
LABEL_208:
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v130);
          goto LABEL_209;
        }
        goto LABEL_155;
      }
      v102 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 3, 1, "", &v141);
      v33 = v121;
      if ((v102 & 0x80000000) == 0)
      {
LABEL_155:
        v103 = v127;
        v129 = (char *)v47;
        if (v127)
        {
          if (*(_DWORD *)(a1 + 2192))
          {
            v59 = mosynt_LHPlusMapping(*(_QWORD *)(a1 + 48), *(uint64_t **)(a1 + 2200), *(_QWORD *)(a1 + 2240), v127, v146, 0x1388u);
            v103 = v146;
            if ((v59 & 0x80000000) != 0)
              goto LABEL_204;
          }
          v128 = *(char **)(*(_QWORD *)(a1 + 56) + 160);
          v104 = (unsigned __int16)v140;
          v105 = v103;
          v106 = cstdlib_strlen(v103);
          v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))v128)(a6, a7, v104, 11, (unsigned __int16)(v106 + 1), v105, &v141);
          if ((v59 & 0x80000000) != 0)
            goto LABEL_204;
          v124 = v140;
        }
        v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 160))(a6, a7);
        if ((v59 & 0x80000000) == 0)
        {
          v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 6, 2, "*", &v141);
          if ((v59 & 0x80000000) == 0)
          {
            v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 7, 1, &v139, &v141);
            v47 = v129;
            if ((v55 & 0x80000000) != 0)
              goto LABEL_202;
            v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 20, 1, &v138, &v141);
            if ((v55 & 0x80000000) != 0)
              goto LABEL_202;
            v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
            v108 = (unsigned __int16)v140;
            if (__s)
            {
              v109 = cstdlib_strlen(__s);
              v110 = __s;
              v111 = (unsigned __int16)(v109 + 1);
              v112 = a6;
              v113 = a7;
              v114 = v108;
            }
            else
            {
              v112 = a6;
              v113 = a7;
              v114 = (unsigned __int16)v140;
              v111 = 1;
              v110 = "";
            }
            v59 = v107(v112, v113, v114, 9, v111, v110, &v141);
            if ((v59 & 0x80000000) == 0)
            {
              v47 = v129;
              if (v67 == 35
                || v129
                && cstdlib_strlen(v129) >= 2
                && v129[cstdlib_strlen(v129) - 2] == 42
                && (v129[cstdlib_strlen(v129) - 1] == 44
                 || v129[cstdlib_strlen(v129) - 1] == 59
                 || v129[cstdlib_strlen(v129) - 1] == 58))
              {
                v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, (unsigned __int16)v140, 8, 1, &v136, &v141);
                if ((v55 & 0x80000000) != 0)
                  goto LABEL_202;
              }
              if (v67)
              {
                *v33 = v67;
                v21 = v122;
                v49 = a5;
                v115 = v125;
                while (1)
                {
                  v116 = *i;
                  if (v116 != 95 && v116 != 35)
                    break;
                  ++i;
                }
                __s1 = i;
                v33 = i;
              }
              else
              {
                v21 = v122;
                v49 = a5;
                v115 = v125;
              }
              v44 = HIWORD(v140);
              if (HIWORD(v140) < a5)
              {
                while (1)
                {
                  v117 = *(unsigned __int8 *)(a2 + v44);
                  v118 = v117 > 0x20 || ((1 << v117) & 0x100002600) == 0;
                  if (v118 && v117 != 95)
                    break;
                  if (a5 == (unsigned __int16)++v44)
                  {
                    LOWORD(v44) = a5;
                    break;
                  }
                }
              }
              v144 = v44;
              if ((v115 & 1) == 0)
                LOWORD(v140) = v21;
              v127 = 0;
              v48 = 1;
              if (a5 <= (unsigned __int16)v44)
                goto LABEL_198;
              continue;
            }
          }
        }
LABEL_204:
        v40 = v59;
        v47 = v129;
LABEL_205:
        if (!v47)
          return v40;
        goto LABEL_206;
      }
      v40 = v102;
LABEL_206:
      v130 = (char *)v47;
      goto LABEL_207;
    }
    break;
  }
  v130 = v72;
  *(_DWORD *)&__c[3] = 0;
  v78 = cstdlib_strcmp(__dst, "");
  v120 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, _QWORD, char *, char *))(*(_QWORD *)(a1 + 152) + 72);
  v79 = __s1;
  v80 = (2 * cstdlib_strlen(__s1)) | 1;
  if (v78)
  {
    v81 = __dst;
    v82 = v79;
    v83 = v130;
  }
  else
  {
    v82 = v79;
    v83 = v130;
    v81 = 0;
  }
  v40 = v120(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), 1, v82, v80, v83, v81);
  if ((v40 & 0x80000000) != 0)
    goto LABEL_207;
  v84 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v85 = cstdlib_strlen(v130);
  v86 = (char *)heap_Alloc(v84, (v85 + 1));
  v91 = v86;
  if (!v86
    || (cstdlib_strcpy(v86, v130),
        v92 = cstdlib_strlen(v130),
        v93 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)v130, v92),
        (v94 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), (uint64_t)v130, v93 + 1)) == 0))
  {
    v40 = 2310021130;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v87, v88, v89, v90, v119);
    goto LABEL_208;
  }
  v47 = (const char *)v94;
  v95 = cstdlib_strlen(v91);
  v96 = utf8_DepesToUtf8((uint64_t)v91, v95, 0, (uint64_t)v47, v93, (unsigned int *)&__c[3], 0);
  if ((v96 & 0x80000000) == 0)
  {
    v47[*(unsigned int *)&__c[3]] = 0;
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v91);
    goto LABEL_146;
  }
  v40 = v96;
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v47);
LABEL_209:
  if (v91)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v91);
  return v40;
}

uint64_t oneword_G2PLookup(uint64_t a1, const char **a2, __int16 a3, unsigned __int16 *a4, const char *a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, __int16 a12, int a13)
{
  unsigned int v20;
  _BOOL4 v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t MdeSettings;
  uint64_t i;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  char *v51;
  unsigned __int16 v52;
  unsigned int v53;
  unsigned __int16 v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int isInputBetweenPOIMrk;
  const char *v61;
  int v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  unsigned __int16 v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  unsigned __int16 v74;
  int v75;
  int v76;
  char *v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  __int16 v86;
  int v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned __int16 v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  __int16 ChineseUTFCharNum;
  unsigned __int16 v116;
  int v117;
  BOOL v118;
  int v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v126;
  int v127;
  unint64_t v128;
  unsigned __int16 v129;
  unsigned __int16 v130;
  unint64_t j;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  char **v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned __int16 v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  char *__s1;
  int v157;
  unsigned __int16 v158;
  int v159;
  const char *v160;
  unsigned __int16 v161;
  unsigned __int16 v162;
  signed __int16 v163;
  unsigned __int8 v164;
  unsigned int v165;
  unsigned int v166;
  unsigned __int16 v167;
  __int16 v168;
  __int16 v169;
  const char *v170[16];
  char __b[64];
  char v172[129];
  char v173[129];
  char __s[256];
  char __s2[128];
  char v176[129];
  char __src[256];
  char __dst[128];
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v169 = a3;
  v20 = *a4;
  v168 = 0;
  v167 = 0;
  v166 = 0;
  v165 = 3;
  v164 = 0;
  v163 = a3 - 1;
  v161 = 0;
  v160 = 0;
  v159 = 0;
  v21 = *(_DWORD *)(a1 + 2192) != 0;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v23 = cstdlib_strlen(*a2);
  v24 = heap_Calloc(v22, 1, v23 + 1);
  if (v24)
  {
    v29 = (char *)v24;
    v155 = v21;
    v162 = 0;
    v30 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 25016);
    if (!v30)
    {
      v38 = 2310021130;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v31, v32, v33, v34, v126);
LABEL_295:
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v29);
      return v38;
    }
    v35 = v30;
    v154 = v20;
    __s1 = (char *)a5;
    MdeSettings = mosynt_ResetMosyntWS(*(_QWORD *)(a1 + 48), v30);
    if ((MdeSettings & 0x80000000) != 0)
      goto LABEL_293;
    cstdlib_strcpy(__dst, "");
    cstdlib_strcpy(__src, "");
    cstdlib_strcpy(v176, "");
    cstdlib_strcpy(__s2, "");
    cstdlib_strcpy(__s, "");
    cstdlib_strcpy(v173, "");
    *(_DWORD *)(a1 + 2172) = 0;
    if (cstdlib_strcmp(a5, (const char *)(a1 + 300)))
    {
      MdeSettings = oneword_GetMdeSettings(a1, a5);
      if ((MdeSettings & 0x80000000) != 0)
        goto LABEL_293;
      cstdlib_strcpy((char *)(a1 + 300), a5);
    }
    MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 0, 1, &v166, &v168);
    if ((MdeSettings & 0x80000000) != 0)
    {
LABEL_293:
      v38 = MdeSettings;
LABEL_294:
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v35);
      goto LABEL_295;
    }
    for (i = oneword_read_LD_W_INPUTSPACETAG(a1, a6, a7, v166, *a8, &v160);
          ;
          i = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a6, a7))
    {
      v38 = i;
      if ((i & 0x80000000) != 0)
        goto LABEL_294;
      if (v166 - 5 > 2)
        break;
      v38 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, *a8, a8);
      if ((v38 & 0x80000000) != 0 || !*a8)
        goto LABEL_294;
    }
    if (*(_DWORD *)(a1 + 2168) != 1)
      goto LABEL_20;
    v39 = *(_DWORD *)(a1 + 2072);
    if (v39 == 1)
    {
      if (!*(_QWORD *)(a1 + 2136))
      {
LABEL_20:
        v40 = 0;
        v41 = 1;
LABEL_21:
        LOWORD(v42) = *a8;
        if (!*a8)
          goto LABEL_294;
        v151 = v41;
        if ((__int16)v161 < (__int16)*a4)
        {
          v148 = v40;
          v149 = 0;
          v152 = 0;
          v146 = a1 + 1228;
          v147 = a1 + 2016;
          v144 = (uint64_t *)(a1 + 168);
          v145 = (uint64_t *)(a1 + 160);
          v142 = (char **)(a1 + 184);
          v143 = (uint64_t *)(a1 + 176);
          v140 = (uint64_t *)(a1 + 200);
          v141 = (uint64_t *)(a1 + 192);
          v138 = (uint64_t *)(a1 + 216);
          v139 = (uint64_t *)(a1 + 208);
          v150 = -1;
          v153 = 3;
          v43 = 1;
          while (1)
          {
            v158 = 0;
            MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 120))(a6, a7, (unsigned __int16)v42, &v167);
            if ((MdeSettings & 0x80000000) != 0)
              goto LABEL_293;
            v158 = v167;
            if (v167)
            {
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a6, a7);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              v44 = v165;
              v45 = v167;
            }
            else
            {
              v45 = 0;
              v44 = 3;
              v165 = 3;
            }
            MdeSettings = oneword_read_LD_W_INPUTSPACETAG(a1, a6, a7, v44, v45, &v160);
            if ((MdeSettings & 0x80000000) != 0)
              goto LABEL_293;
            if (v165 - 5 <= 2)
            {
              while (1)
              {
                MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, v167, &v167);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                if (!v167)
                  break;
                MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a6, a7);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, v167, 1, 1, (char *)&v159 + 2, &v168);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, v167, 2, 1, &v159, &v168);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                if (v165 - 5 >= 3)
                  goto LABEL_39;
              }
              v165 = 3;
            }
LABEL_39:
            MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 1, 1, &v169, &v168);
            if ((MdeSettings & 0x80000000) != 0)
              goto LABEL_293;
            v49 = v169;
            v50 = v163;
            if (v169 < v163)
              goto LABEL_41;
            v51 = __s1;
            if (v166 != 3 && v153 == 3)
            {
              v150 = *a8;
              if (oneword_GetWord(*(_WORD *)(a1 + 224) + v169, (uint64_t)*a2, (uint64_t)__dst))
              {
                if (v167 && cstdlib_strcmp(__s1, "prompt") && cstdlib_strcmp(__s1, "internal-nuance-system-norm"))
                {
                  v129 = v158;
                  cstdlib_strcpy(__src, __dst);
                  MdeSettings = oneword_GetMultiWordLen((_QWORD *)a1, (uint64_t)__src, (uint64_t)__s1, __b, &v164);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  v128 = v164;
                  if (v164)
                  {
                    v51 = __s1;
                    if (v169 > v163)
                    {
                      for (j = 0; j < v128 && v169 > v163; ++j)
                      {
                        v170[0] = 0;
                        v157 = 0;
                        if ((_WORD)v149)
                          v52 = v149;
                        else
                          v52 = v129;
                        v158 = v52;
                        if (v52 && __b[j])
                        {
                          v53 = 0;
                          do
                          {
                            MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, v52, 0, 1, &v157, &v168);
                            if ((MdeSettings & 0x80000000) != 0)
                              goto LABEL_293;
                            if (v157 == 3)
                            {
                              ++v53;
                            }
                            else if (v157 == 5)
                            {
                              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 56) + 176))(a6, a7, v158, 4, v170, &v168);
                              if ((MdeSettings & 0x80000000) != 0)
                                goto LABEL_293;
                              if (!cstdlib_strcmp(v170[0], "phon")
                                || !cstdlib_strcmp(v170[0], "prompt")
                                || !cstdlib_strcmp(v170[0], "internal-nuance-system-norm"))
                              {
                                __b[j] = v53;
                                break;
                              }
                              v149 = v158;
                            }
                            MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, v158, &v158);
                            if ((MdeSettings & 0x80000000) != 0)
                              goto LABEL_293;
                            v52 = v158;
                          }
                          while (v158 && v53 < __b[j]);
                        }
                        if (oneword_GetMultiWord((unsigned __int16)(*(_WORD *)(a1 + 224) + v169), (uint64_t)*a2, (uint64_t)__src, __b[j]))
                        {
                          cstdlib_strcpy(__s, __src);
                          v51 = __s1;
                          if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 144))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, __s, 256) & 0x80000000) != 0)continue;
                          MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)__s, __src, __s1, v160, v169, *a8, a6, a7, (unsigned __int16 *)&v163, 0, a13, v155);
                          if ((MdeSettings & 0x80000000) != 0)
                            goto LABEL_293;
                          v54 = v163;
                          if (v163 > (__int16)*a4)
                            goto LABEL_79;
                          if (*(_DWORD *)(a1 + 2000) && cstdlib_strlen(__s))
                          {
                            v56 = 0;
                            v127 = 0;
                            v57 = 0;
                            do
                            {
                              if (__s[v56] == 95)
                              {
                                __s[v56] = 32;
                                v127 = 1;
                              }
                              v56 = (unsigned __int16)++v57;
                            }
                            while (cstdlib_strlen(__s) > (unsigned __int16)v57);
                            if (v127)
                            {
                              MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)__s, __src, __s1, v160, v169, *a8, a6, a7, (unsigned __int16 *)&v163, 0, a13, v155);
                              if ((MdeSettings & 0x80000000) != 0)
                                goto LABEL_293;
                              v54 = v163;
                              if (v163 > (__int16)*a4)
                              {
LABEL_79:
                                v51 = __s1;
                                *a4 = v54;
                                v118 = v54 > v154;
                                v55 = v152;
                                if (!v118)
                                  v55 = v149;
                                v152 = v55;
                                continue;
                              }
                            }
                          }
                        }
                        v51 = __s1;
                      }
                    }
                  }
                  else
                  {
                    v51 = __s1;
                  }
                }
                LOWORD(v58) = v169;
                v59 = v163;
                if (v169 >= v163)
                {
                  MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)__dst, __dst, v51, v160, v169, *a8, a6, a7, (unsigned __int16 *)&v163, 0, a13, v155);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  isInputBetweenPOIMrk = oneword_isInputBetweenPOIMrk(a9, *a11, (unsigned __int16)v169, (unsigned __int16)v163);
                  v58 = v169;
                  v59 = v163;
                  if (isInputBetweenPOIMrk)
                  {
                    LOWORD(v157) = 0;
                    if (v169 < v163)
                    {
                      do
                      {
                        v61 = &(*a2)[(unsigned __int16)v58 + *(__int16 *)(a1 + 224)];
                        if (utf8_IsChineseLetter(v61))
                        {
                          v62 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v61);
                          v63 = v58 + v62;
                          LOWORD(v157) = v58 + v62;
                          if ((unsigned __int16)v169 != (unsigned __int16)v58
                            || (unsigned __int16)v163 > (unsigned __int16)v63)
                          {
                            v130 = v62;
                            v132 = v58 + v62;
                            cstdlib_memset(v170, 0, 0x80uLL);
                            cstdlib_strncpy((char *)v170, v61, v130);
                            MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)v170, (char *)v170, __s1, v160, v58, *a8, a6, a7, (unsigned __int16 *)&v157, 0, a13, v155);
                            v63 = v132;
                            if ((MdeSettings & 0x80000000) != 0)
                              goto LABEL_293;
                          }
                        }
                        else
                        {
                          v63 = v58 + 1;
                        }
                        v59 = v163;
                        v58 = v63;
                      }
                      while (v163 > (__int16)v63);
                      LOWORD(v58) = v169;
                    }
                  }
                  v51 = __s1;
                }
                if (v59 <= (__int16)v58)
                {
                  cstdlib_strcpy(__s2, __dst);
                  if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 144))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v51, __s2, 128) & 0x80000000) == 0)
                  {
                    if (cstdlib_strcmp(__dst, __s2))
                    {
                      MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)__s2, __dst, v51, v160, v169, *a8, a6, a7, (unsigned __int16 *)&v163, 0, a13, v155);
                      if ((MdeSettings & 0x80000000) != 0)
                        goto LABEL_293;
                    }
                  }
                }
              }
              v49 = v169;
              v50 = v163;
              if (v169 >= v163 && *(_DWORD *)(a1 + 292))
              {
                LOWORD(v170[0]) = 0;
                MdeSettings = oneword_NonDctDpsMde((_QWORD *)a1, (unsigned __int16)v169, (uint64_t)__dst, __s1, *a8, (unsigned __int16 *)v170, a6, a7);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                if (LOWORD(v170[0]))
                {
                  v165 = 0;
                  v167 = (unsigned __int16)v170[0];
                }
                v43 = 0;
                v49 = v169;
                v50 = v163;
              }
              else
              {
                v43 = 0;
              }
            }
            if (v49 < v50 || v153 == 3 && v165 == 3)
              break;
            if (v166 < 2 || v166 == 2 && *(_DWORD *)(a1 + 936) == 1)
            {
              v134 = v43;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v161, &v168);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              v66 = *(_WORD *)(a1 + 224);
              v67 = v66 + v169;
              v68 = (unsigned __int16)(v161 + v66) - (unsigned __int16)(v66 + v169);
              if (v68 >= 128)
                v69 = 128;
              else
                v69 = v68;
              cstdlib_strncpy(v176, &(*a2)[v67], v69);
              v176[v69] = 0;
              *(_DWORD *)(a1 + 2172) = 0;
              cstdlib_strcpy(v173, v176);
              if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 136))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, v173, 128) & 0x80000000) != 0)
              {
                cstdlib_strcpy(v173, v176);
              }
              else if (cstdlib_strcmp(__s2, v173))
              {
                MdeSettings = oneword_Lookup((_DWORD *)a1, v35, a2, (unsigned __int8 *)v173, v176, __s1, v160, v169, *a8, a6, a7, (unsigned __int16 *)&v163, 1, a13, v155);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                if (v163 > v169)
                {
                  v170[0] = 0;
                  LOWORD(v157) = 0;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 136))(a6, a7, *a8, &v157);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, __int16 *))(*(_QWORD *)(a1 + 56) + 176))(a6, a7, (unsigned __int16)v157, 3, v170, &v168);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  oneword_ReplaceUnderscoreWithDot(v170[0]);
                }
              }
              if (v169 >= v163)
              {
                v43 = v134;
                if (v166 == 1)
                {
                  LOWORD(v170[0]) = 0;
                  LOWORD(v157) = 0;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Front end oneword: Digit or punctuation not in G2P dictionary. Word='%s', tokenType=%d", v70, v71, v72, (uint64_t)__dst);
                  v102 = v169;
                  v163 = v102 + cstdlib_strlen(v176);
                  v166 = 4;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a6, a7, *a8, a8);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 0, 1, &v166, v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 1, 1, &v169, v170);
                  v43 = v134;
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, signed __int16 *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 2, 1, &v163, v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 3, 1, "", v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 5, 2, "*", v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 6, 2, "*", v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  LOWORD(v157) = 1;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 7, 1, &v157, v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 9, 1, "", v170);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  v103 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56)
                                                                                                 + 120))(a6, a7, *a8, a8);
                  if ((v103 & 0x80000000) != 0)
                  {
                    v38 = v103;
                    goto LABEL_294;
                  }
                }
                else if (!v166)
                {
                  if (*(_DWORD *)(a1 + 2192))
                  {
                    LODWORD(v170[0]) = 0;
                    v88 = cstdlib_strlen(__dst);
                    v89 = cstdlib_strlen(v176);
                    v91 = 0;
                    v92 = v88;
                    if (v88 >= 2u)
                    {
                      LOWORD(v157) = __dst[v88 - 1];
                      v93 = v89;
                      v113 = (*(unsigned int (**)(_QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 80) + 128))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v157) == 0;
                      v89 = v93;
                      v91 = !v113;
                    }
                    if (v92 == v89)
                    {
                      v94 = 1;
                    }
                    else
                    {
                      if (v91)
                        v113 = v89 == v92 - 1;
                      else
                        v113 = 0;
                      v94 = v113;
                    }
                    MdeSettings = mde_MosyntMorphAna(a1, v35, (unsigned __int8 *)v173, v176, (uint64_t)__s1, v169, *a8, v90, a6, a7, &v163, v94, 0, v170);
                    v43 = v134;
                    if ((MdeSettings & 0x80000000) != 0)
                      goto LABEL_293;
                  }
                  else
                  {
                    if (*(_DWORD *)(a1 + 2168) == 1
                      && !cstdlib_strstr(__s1, "latin")
                      && (!v151 || cstdlib_strcmp(__s1, "prompt") && cstdlib_strcmp(__s1, "internal-nuance-system-norm")))
                    {
                      cstdlib_strcpy(v172, v176);
                      if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80)
                                                                                               + 104))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, v172, 128) & 0x80000000) != 0)cstdlib_strcpy(v172, v176);
                      MdeSettings = crf_mde_seg_label(*(_QWORD *)a1, (char *)*a2, v147, v172, (unsigned __int16)v169, *(__int16 *)(a1 + 224), &v163, a8, *(_QWORD *)(a1 + 56), a6, a7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 1224), v146, *(_BYTE *)(a1 + 556), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96),
                                      *(_QWORD *)(a1 + 104),
                                      *(_DWORD *)(a1 + 560),
                                      __s1,
                                      v145,
                                      v144,
                                      v143,
                                      v142,
                                      v141,
                                      v140,
                                      v139,
                                      v138,
                                      *(char **)(a1 + 240),
                                      *(char **)(a1 + 248),
                                      *(char **)(a1 + 256),
                                      *(char **)(a1 + 264),
                                      *(char **)(a1 + 1208),
                                      1);
                      if ((MdeSettings & 0x80000000) != 0)
                        goto LABEL_293;
                      if (v169 < v163)
                      {
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD CRF MDE SEG %s", v105, v106, v72, (uint64_t)v176);
                        *(_DWORD *)(a1 + 2172) = 1;
                      }
                      if (!*(_DWORD *)(a1 + 2068))
                      {
                        if (*(_DWORD *)(a1 + 2172))
                        {
                          MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a6, a7, *a8, a8);
                          if ((MdeSettings & 0x80000000) != 0)
                            goto LABEL_293;
                        }
                      }
                    }
                    if (v169 >= v163 && *(_DWORD *)(a1 + 296))
                    {
                      MdeSettings = oneword_DpsMde((_QWORD *)a1, v173, v176, (uint64_t)"g2p", __s1, v169, *a8, v72, a6, a7, &v163);
                      if ((MdeSettings & 0x80000000) != 0)
                        goto LABEL_293;
                      if (v169 < v163)
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DEPES MAIN %s", v107, v108, v109, (uint64_t)v176);
                    }
                    v43 = v134;
                    if (!*(_DWORD *)(a1 + 2168) && v169 >= v163)
                    {
                      MdeSettings = mde_Main(a1, v173, v176, __s1, v169, *a8, a6, a7, &v163);
                      if ((MdeSettings & 0x80000000) != 0)
                        goto LABEL_293;
                      v43 = v134;
                      if (v169 < v163)
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DCTBASEDMDE MAIN %s", v110, v111, v112, (uint64_t)v176);
                    }
                  }
                }
                if (v169 >= v163)
                  v43 = 1;
              }
              else
              {
                v43 = v134;
              }
            }
            if ((v150 & 0x8000) == 0)
            {
              if (v166 == 3 || v165 != 3)
                goto LABEL_275;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, v150, 1, 1, &v162, &v168);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              cstdlib_strcpy(v29, "");
              if (v161 > v162)
              {
                cstdlib_strncpy(v29, &(*a2)[*(unsigned __int16 *)(a1 + 224) + v162], v161 - (unint64_t)v162);
                v29[v161 - v162] = 0;
              }
              v137 = v43;
              if (*(_DWORD *)(a1 + 936) && utf8_IsChineseLetter(v29))
              {
                v114 = *(unsigned __int16 *)(a1 + 224);
                ChineseUTFCharNum = utf8_GetChineseUTFCharNum((uint64_t)*a2, (unsigned __int16)(v161 + v114));
                v116 = ChineseUTFCharNum
                     - utf8_GetChineseUTFCharNum((uint64_t)*a2, (unsigned __int16)(*(_WORD *)(a1 + 224) + v162));
                while (1)
                {
                  v117 = (*a2)[v161 + v114];
                  if (v117 == 32)
                    break;
                  v118 = v117 == 95 || v114 > 5;
                  if (v118 || v117 == 0)
                    break;
                  ++v114;
                }
                MdeSettings = oneword_SkipCrosstoken(a1, a6, a7, __s1, v116, v162, v161 + (unsigned __int16)v114 - *(_WORD *)(a1 + 224), v150, *a8);
LABEL_274:
                v43 = v137;
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
LABEL_275:
                if (*(_DWORD *)(a1 + 2168) == 1
                  && (v166 != 3 && v165 == 3 || (unsigned __int16)v163 == *a4)
                  && (v148 && !cstdlib_strstr(__s1, "latin") || v151 && *(_DWORD *)(a1 + 2172)))
                {
                  MdeSettings = oneword_joinTokens(a1, a6, a7, v150, a8, v148);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  *(_DWORD *)(a1 + 2172) = 0;
                }
                goto LABEL_41;
              }
              v120 = *(_DWORD *)(a1 + 2168);
              v121 = __s1;
              if (v120 == 1)
              {
                if (v148)
                {
                  v122 = cstdlib_strstr(__s1, "latin");
                  v120 = *(_DWORD *)(a1 + 2168);
                  if (!v122)
                    goto LABEL_268;
                }
                else
                {
                  v120 = 1;
                }
              }
              else
              {
LABEL_268:
                v43 = v137;
                if (v120)
                  goto LABEL_275;
                v121 = __s1;
              }
              MdeSettings = oneword_ProcessNTokens(a1, v35, a2, v121, a6, a7, v150, *a8, a9, a10, a11, a12, v137, *(_DWORD *)(a1 + 2172), v120);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v161, &v168);
              goto LABEL_274;
            }
LABEL_41:
            v38 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v161, &v168);
            if ((v38 & 0x80000000) != 0)
              goto LABEL_294;
            v42 = v167;
            *a8 = v167;
            v153 = v166;
            v166 = v165;
            if (!v42 || (__int16)v161 >= (__int16)*a4)
              goto LABEL_298;
          }
          if (v49 < v50 || v153 != 3 || v165 != 3)
            goto LABEL_41;
          if (v166)
          {
            if (v166 <= 2)
            {
              v133 = v43;
              LOWORD(v170[0]) = 0;
              LOWORD(v157) = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Front end oneword: Digit or punctuation not in G2P dictionary. Word='%s', tokenType=%d", v46, v47, v48, (uint64_t)__dst);
              v64 = v169;
              v163 = v64 + cstdlib_strlen(__dst);
              v166 = 4;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a6, a7, *a8, a8);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 0, 1, &v166, v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 1, 1, &v169, v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, signed __int16 *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 2, 1, &v163, v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 3, 1, "", v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 5, 2, "*", v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 6, 2, "*", v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              LOWORD(v157) = 1;
              MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 7, 1, &v157, v170);
              v43 = v133;
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, const char **))(*(_QWORD *)(a1 + 56) + 160))(a6, a7, *a8, 9, 1, "", v170);
              if ((v65 & 0x80000000) != 0)
              {
                v38 = v65;
                goto LABEL_294;
              }
            }
            goto LABEL_41;
          }
          v135 = v43;
          MdeSettings = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(_QWORD *)(a1 + 56) + 168))(a6, a7, *a8, 2, 1, &v161, &v168);
          if ((MdeSettings & 0x80000000) != 0)
            goto LABEL_293;
          v73 = *(_WORD *)(a1 + 224);
          v74 = v73 + v169;
          v75 = (unsigned __int16)(v161 + v73) - (unsigned __int16)(v73 + v169);
          if (v75 >= 128)
            v76 = 128;
          else
            v76 = v75;
          cstdlib_strncpy(v176, &(*a2)[v74], v76);
          v176[v76] = 0;
          *(_DWORD *)(a1 + 2172) = 0;
          cstdlib_strcpy(v173, v176);
          v77 = __s1;
          if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 136))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, v173, 128) & 0x80000000) == 0)
          {
            if (*(_DWORD *)(a1 + 2192))
            {
              LODWORD(v170[0]) = 0;
              v79 = cstdlib_strcmp(__dst, v176) == 0;
              MdeSettings = mde_MosyntMorphAna(a1, v35, (unsigned __int8 *)v173, v176, (uint64_t)__s1, v169, *a8, v80, a6, a7, &v163, v79, 0, v170);
              if ((MdeSettings & 0x80000000) != 0)
                goto LABEL_293;
              if (LODWORD(v170[0]) == 1)
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD WGRAM %s", v81, v82, v83, (uint64_t)v176);
              v77 = __s1;
            }
            else
            {
              if (*(_DWORD *)(a1 + 2168) == 1
                && !cstdlib_strstr(__s1, "latin")
                && (!v151 || cstdlib_strcmp(__s1, "prompt") && cstdlib_strcmp(__s1, "internal-nuance-system-norm")))
              {
                cstdlib_strcpy(v172, v176);
                if (((*(uint64_t (**)(_QWORD, _QWORD, char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 104))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, v172, 128) & 0x80000000) != 0)cstdlib_strcpy(v172, v176);
                MdeSettings = crf_mde_seg_label(*(_QWORD *)a1, (char *)*a2, v147, v172, (unsigned __int16)v169, *(__int16 *)(a1 + 224), &v163, a8, *(_QWORD *)(a1 + 56), a6, a7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 1224), v146, *(_BYTE *)(a1 + 556), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96),
                                *(_QWORD *)(a1 + 104),
                                *(_DWORD *)(a1 + 560),
                                __s1,
                                v145,
                                v144,
                                v143,
                                v142,
                                v141,
                                v140,
                                v139,
                                v138,
                                *(char **)(a1 + 240),
                                *(char **)(a1 + 248),
                                *(char **)(a1 + 256),
                                *(char **)(a1 + 264),
                                *(char **)(a1 + 1208),
                                0);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                v77 = __s1;
                if (v169 < v163)
                {
                  *(_DWORD *)(a1 + 2172) = 1;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD CRF MDE SEG %s", v123, v124, v78, (uint64_t)v176);
                }
              }
              v85 = v169;
              v86 = v163;
              if (v169 >= v163 && *(_DWORD *)(a1 + 296))
              {
                MdeSettings = oneword_DpsMde((_QWORD *)a1, v173, v176, (uint64_t)"g2p", v77, v169, *a8, v78, a6, a7, &v163);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                v85 = v169;
                v86 = v163;
                if (v169 < v163)
                {
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DEPES MDE %s", v96, v97, v98, (uint64_t)v176);
                  v85 = v169;
                  v86 = v163;
                }
                v77 = __s1;
              }
              v84 = *(_DWORD *)(a1 + 2168);
              if (v84)
              {
LABEL_163:
                v118 = v85 < v86;
                v87 = v135;
                if (!v118)
                  v87 = 1;
                v136 = v87;
                if (v84 != 1)
                  goto LABEL_186;
                if (v148 && cstdlib_strstr(v77, "latin"))
                {
                  v84 = *(_DWORD *)(a1 + 2168);
                  if (v84 != 1)
                  {
LABEL_186:
                    if (!v84)
                      goto LABEL_213;
                    v43 = v136;
                    goto LABEL_41;
                  }
                }
                else
                {
                  MdeSettings = oneword_joinTokens(a1, a6, a7, v150, a8, v148);
                  if ((MdeSettings & 0x80000000) != 0)
                    goto LABEL_293;
                  v84 = *(_DWORD *)(a1 + 2168);
                  v77 = __s1;
                  if (v84 != 1)
                    goto LABEL_186;
                  if (!v148)
                  {
                    v84 = 1;
LABEL_213:
                    v104 = v77;
                    v43 = v136;
                    MdeSettings = oneword_ProcessNTokens(a1, v35, a2, v104, a6, a7, v150, *a8, a9, a10, a11, a12, v136, v84, v84);
                    if ((MdeSettings & 0x80000000) != 0)
                      goto LABEL_293;
                    goto LABEL_41;
                  }
                }
                v95 = cstdlib_strstr(v77, "latin");
                v84 = *(_DWORD *)(a1 + 2168);
                if (v95)
                  goto LABEL_213;
                goto LABEL_186;
              }
              if (v85 >= v86)
              {
                MdeSettings = mde_Main(a1, v173, v176, v77, v85, *a8, a6, a7, &v163);
                if ((MdeSettings & 0x80000000) != 0)
                  goto LABEL_293;
                v77 = __s1;
                if (v169 < v163)
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD DCTBASEDMDE %s", v99, v100, v101, (uint64_t)v176);
              }
            }
          }
          v84 = *(_DWORD *)(a1 + 2168);
          v85 = v169;
          v86 = v163;
          goto LABEL_163;
        }
        LOWORD(v152) = 0;
LABEL_298:
        if ((_WORD)v152)
          *a8 = v152;
        goto LABEL_294;
      }
    }
    else if (v39 || *(_QWORD *)(a1 + 2136))
    {
      goto LABEL_20;
    }
    v41 = 0;
    v40 = 1;
    goto LABEL_21;
  }
  v38 = 2310021130;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v25, v26, v27, v28, v126);
  return v38;
}

uint64_t oneword_GetMdeSettings(uint64_t a1, const char *a2)
{
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _BYTE __c[11];
  char __dst[256];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  v4 = (_BYTE *)(a1 + 282);
  *(_DWORD *)(a1 + 282) = 0x10000000;
  *(_BYTE *)(a1 + 286) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1;
  cstdlib_strcpy(__dst, "mdeminwrdlen_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_3;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdeminwrdlen", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_3:
    v6 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v6)
      *v6 = 0;
    *v4 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  cstdlib_strcpy(__dst, "mdemaxwrdlen_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_8;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdemaxwrdlen", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_8:
    v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7)
      *v7 = 0;
    *(_BYTE *)(a1 + 283) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  cstdlib_strcpy(__dst, "mdemaxnrmorph_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_13;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdemaxnrmorph", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_13:
    v8 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v8)
      *v8 = 0;
    *(_BYTE *)(a1 + 285) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  cstdlib_strcpy(__dst, "mdefirstletter_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_18;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdefirstletter", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_18:
    v9 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v9)
      *v9 = 0;
    *(_BYTE *)(a1 + 284) = cstdlib_strcmp(**(const char ***)&__c[3], "upper") == 0;
  }
  cstdlib_strcpy(__dst, "mdetype_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_23;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdetype", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_23:
    v10 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v10)
      *v10 = 0;
    if (!cstdlib_strcmp(**(const char ***)&__c[3], "stemafx"))
      *(_BYTE *)(a1 + 286) = 1;
  }
  cstdlib_strcpy(__dst, "mdeemptyafx_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_43;
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdeemptyafx", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_43:
    v11 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v11)
      *v11 = 0;
    *(_DWORD *)(a1 + 288) = cstdlib_strcmp(**(const char ***)&__c[3], "yes") == 0;
  }
  cstdlib_strcpy(__dst, "mdenondctdps_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80)
                                                                                                  + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
  {
LABEL_48:
    v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12)
      *v12 = 0;
    *(_DWORD *)(a1 + 292) = cstdlib_strcmp(**(const char ***)&__c[3], "yes") == 0;
    goto LABEL_51;
  }
  *(_WORD *)&__c[1] = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdenondctdps", &__c[3], &__c[1], __c);
  if ((v5 & 0x80000000) != 0)
    return v5;
  if (*(_WORD *)&__c[1])
    goto LABEL_48;
LABEL_51:
  cstdlib_strcpy(__dst, "mdedps_");
  cstdlib_strcat(__dst, a2);
  *(_WORD *)&__c[1] = -1;
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", __dst, &__c[3], &__c[1], __c);
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1]
      || (*(_WORD *)&__c[1] = -1,
          v13 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 80) + 96))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "fecfg", "mdedps", &__c[3], &__c[1], __c), (v13 & 0x80000000) == 0)&& *(_WORD *)&__c[1])
    {
      v14 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v14)
        *v14 = 0;
      *(_DWORD *)(a1 + 296) = cstdlib_strcmp(**(const char ***)&__c[3], "yes") == 0;
    }
  }
  return v13;
}

uint64_t oneword_read_LD_W_INPUTSPACETAG(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v13;
  uint64_t result;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 != 6)
    return 0;
  v16 = v6;
  v17 = v7;
  v15 = 0;
  *a6 = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a1 + 56) + 184))(a2, a3, a5, 19, &v15);
  result = 0;
  if ((v13 & 0x80000000) == 0 && v15 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, __int16 *))(*(_QWORD *)(a1 + 56)
                                                                                              + 176))(a2, a3, a5, 19, a6, &v15);
  return result;
}

uint64_t oneword_GetWord(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  v3 = 0;
  while (1)
  {
    v4 = *(unsigned __int8 *)(a2 + a1);
    v5 = v4 > 0x20 || ((1 << v4) & 0x100002601) == 0;
    if (!v5 || v4 == 95)
      break;
    ++a1;
    *(_BYTE *)(a3 + v3++) = v4;
    if (v3 == 127)
    {
      result = 0;
      goto LABEL_11;
    }
  }
  result = 1;
LABEL_11:
  *(_BYTE *)(a3 + (unsigned __int16)v3) = 0;
  return result;
}

uint64_t oneword_GetMultiWordLen(_QWORD *a1, uint64_t a2, uint64_t a3, void *__b, _BYTE *a5)
{
  uint64_t v10;
  unint64_t i;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 v16;
  uint64_t v17;

  v17 = 0;
  v16 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, const char *, uint64_t, uint64_t *, unsigned __int16 *))(a1[10] + 120))(a1[8], a1[9], a2, 255, "femwg2p", a3, &v17, &v16);
  if ((v10 & 0x80000000) == 0)
  {
    *a5 = 0;
    if (v16)
    {
      for (i = 0; i < v16; ++i)
      {
        v12 = LH_atou(*(const char **)(v17 + 8 * i));
        if (v12 <= 0x3F)
        {
          v13 = *a5;
          *a5 = v13 + 1;
          *((_BYTE *)__b + v13) = v12;
        }
      }
      v14 = *a5;
    }
    else
    {
      v14 = 0;
    }
    ssft_qsort((uint64_t)__b, v14, 1, (uint64_t (*)(unint64_t, unint64_t))compare_0);
  }
  return v10;
}

BOOL oneword_GetMultiWord(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v16;

  if (!a4)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = *(unsigned __int8 *)(a2 + a1);
  while (v7)
  {
    *(_BYTE *)(a3 + v4) = v7;
    if (v4 == 255)
      return 0;
    LOWORD(a1) = a1 + 1;
    v8 = (unsigned __int16)a1;
    v7 = *(unsigned __int8 *)(a2 + (unsigned __int16)a1);
    v9 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (!v9 || v7 == 95)
    {
      v10 = *(unsigned __int8 *)((unsigned __int16)a1 + a2 - 1);
      v11 = v10 == 95 ? v5 : v5 + 1;
      v12 = v10 > 0x20;
      v13 = (1 << v10) & 0x100002600;
      if (v12 || v13 == 0)
        v5 = v11;
    }
    ++v4;
    ++v6;
    if (a4 <= v5)
      goto LABEL_24;
  }
  v8 = (unsigned __int16)a1;
  v6 = v4;
LABEL_24:
  *(_BYTE *)(a3 + v6) = 0;
  if (!*(_BYTE *)(a2 + v8))
  {
    v16 = *(unsigned __int8 *)(v8 + a2 - 1);
    if ((v16 > 0x20 || ((1 << v16) & 0x100002600) == 0) && v16 != 95)
      LOBYTE(v5) = v5 + 1;
  }
  return a4 == v5;
}

uint64_t oneword_Lookup(_DWORD *a1, char *a2, _QWORD *a3, unsigned __int8 *a4, char *a5, char *a6, const char *a7, unsigned __int16 a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, unsigned __int16 *a12, int a13, int a14, int a15)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unsigned __int8 *v39;
  char *v40;
  const char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int16 v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v76;
  __int16 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  int v96;
  unsigned int v97;
  char v98;
  uint64_t v99;
  const char *v100;
  unsigned int PreviousUtf8Offset;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  char *v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v115;
  __int16 v116;
  char *v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v119;
  __int16 v120;
  int v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  int v129;
  uint64_t (*v130)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t (*v137)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v138;
  __int16 v139;
  __int16 v140;
  char *v141;
  int v142;
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v155;
  __int16 v156;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  char *v162;
  _QWORD *v163;
  char *v164;
  char *v165;
  char *__s;
  char *__s2;
  int v168;
  const char *v169;
  char *__s1;
  int v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  char *v175;
  const char *v176;
  unsigned __int16 *v177;
  char *v178;
  int v179;
  char *v180;
  char __dst[6];
  int v182;
  __int16 v183;
  const char *v184;
  __int16 v185;
  int v186;
  unsigned __int8 v187;
  unsigned __int16 v188;
  uint64_t v189;
  unsigned __int16 v190;
  _WORD v191[5];

  v190 = a8;
  v189 = 0;
  v188 = 0;
  v187 = 0;
  v186 = 4;
  v185 = 0;
  v184 = 0;
  v183 = 1;
  v182 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"sysdctlookup", &v184) & 0x80000000) == 0
    && !cstdlib_strcmp(v184, "no"))
  {
    return 0;
  }
  v179 = a13;
  if (a13)
  {
    if (a1[69])
      return 0;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P look up %s", v22, v23, v24, (uint64_t)a4);
  if (a1[306])
  {
    cstdlib_strcpy(__dst, "g2p");
    cstdlib_strcat(__dst, (const char *)a1 + 3 * *a4 + 1228);
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, char *, unsigned __int8 *, uint64_t *, unsigned __int16 *, unsigned __int8 *, int *))(*((_QWORD *)a1 + 10) + 232))(*((_QWORD *)a1 + 8), *((_QWORD *)a1 + 9), __dst, a4, &v189, &v188, &v187, &v182);
  }
  else
  {
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, unsigned __int8 *, uint64_t *, unsigned __int16 *, unsigned __int8 *, _QWORD, int *))(*((_QWORD *)a1 + 10) + 240))(*((_QWORD *)a1 + 8), *((_QWORD *)a1 + 9), "g2p", a4, &v189, &v188, &v187, *((unsigned __int8 *)a1 + 556), &v182);
  }
  v25 = v26;
  if ((v26 & 0x80000000) == 0)
  {
    v27 = "ADDONDCT";
    if (!v182)
      v27 = "OTHER";
    v165 = (char *)v27;
    if (v188)
    {
      __s = a5;
      v28 = 0;
      v168 = 0;
      v178 = a2 + 10000;
      v172 = a11;
      v163 = a3;
      v173 = a2 + 14999;
      v177 = a12;
      __s2 = (char *)(a1 + 68);
      v171 = a15;
      v160 = a14;
      v162 = a2 + 5000;
      v169 = a7;
      v164 = a6;
      v174 = a10;
      while (1)
      {
        if (v179 && a1[235] && (__int16)v190 < (__int16)*v177)
          goto LABEL_166;
        cstdlib_strncpy(v178, *(const char **)(v189 + 8 * v28), 0x1387uLL);
        *v173 = 0;
        v29 = cstdlib_strchr(v178, v187);
        if (!v29)
          break;
        *v29 = 0;
        v175 = v29 + 1;
        v33 = cstdlib_strchr(v29 + 1, v187);
        v34 = v33;
        if (!v33)
          goto LABEL_27;
        *v33 = 0;
        v34 = v33 + 1;
        v35 = cstdlib_strchr(v33 + 1, v187);
        v36 = v35;
        if (!v35)
          goto LABEL_28;
        *v35 = 0;
        v36 = v35 + 1;
        v37 = cstdlib_strchr(v35 + 1, v187);
        if (!v37)
          goto LABEL_28;
        *v37 = 0;
        v176 = v37 + 1;
        v38 = cstdlib_strchr(v37 + 1, v187);
        v39 = (unsigned __int8 *)v38;
        if (!v38)
          goto LABEL_29;
        *v38 = 0;
        v39 = (unsigned __int8 *)(v38 + 1);
        v40 = cstdlib_strchr(v38 + 1, v187);
        v41 = v40;
        if (!v40)
          goto LABEL_30;
        *v40 = 0;
        v41 = v40 + 1;
        v42 = cstdlib_strchr(v40 + 1, v187);
        if (!v42)
          goto LABEL_30;
        *v42 = 0;
        v180 = v42 + 1;
        v43 = cstdlib_strchr(v42 + 1, v187);
        if (v43)
          *v43 = 0;
LABEL_31:
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Validating %s", v30, v31, v32, (uint64_t)v178);
        if (cstdlib_strcmp(a6, "name"))
        {
          if (v34 && cstdlib_strcmp(v34, "") && !cstdlib_strstr(v34, a6))
            goto LABEL_63;
        }
        else if (v34 && cstdlib_strcmp(v34, ""))
        {
          if ((v47 = cstdlib_strstr(v34, a6)) == 0
            || (v48 = v47, v49 = cstdlib_strlen(a6), v48 != v34) && *(v48 - 1) != 44
            || v48[v49] && v48[v49] != 44)
          {
LABEL_63:
            v50 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v51 = "G2P Domain validation not OK";
            goto LABEL_83;
          }
        }
        if (v171 && v41 && cstdlib_strcmp(v41, "0"))
        {
          v50 = *(_QWORD *)(*(_QWORD *)a1 + 32);
          v51 = "MDE validation not OK";
LABEL_83:
          log_OutText(v50, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v51, v44, v45, v46, v158);
          goto LABEL_84;
        }
        __s1 = v36;
        if (v180 && a1[301])
        {
          v52 = v172;
          v53 = v174;
          if (cstdlib_strchr(v180, 33))
          {
            v180[3] = 0;
            if (!v179)
              goto LABEL_93;
          }
          else
          {
            v59 = cstdlib_strstr(a6, v180);
            v60 = v59;
            if (v160)
            {
              if (!v179)
              {
                v54 = v178;
                if ((!v59 || cstdlib_strlen(v180) && v60[cstdlib_strlen(v180)])
                  && LH_stricmp(v180, *((char **)a1 + 151)))
                {
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"G2P Language %s validation not OK", v61, v62, v63, (uint64_t)v180);
                  goto LABEL_84;
                }
                goto LABEL_94;
              }
            }
            else if (!v179)
            {
              if (!v59 || cstdlib_strlen(v180) && v60[cstdlib_strlen(v180)])
              {
                v69 = cstdlib_strstr(*((char **)a1 + 152), a6);
                if (LH_stricmp(v180, *((char **)a1 + 151)) || !v69 || v69[cstdlib_strlen(a6)] != 124)
                {
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"User lang lookup: G2P Language %s validation not OK", v70, v71, v72, (uint64_t)v180);
                  goto LABEL_84;
                }
              }
LABEL_93:
              v54 = v178;
              goto LABEL_94;
            }
          }
          v66 = cstdlib_strstr(a6, v180);
          if (!v66 || (v67 = v66, cstdlib_strlen(v180)) && v67[cstdlib_strlen(v180)])
          {
            v68 = cstdlib_strstr(*((char **)a1 + 152), a6);
            if (LH_stricmp(v180, *((char **)a1 + 151)) || !v68 || v68[cstdlib_strlen(a6)] != 124)
            {
              v50 = *(_QWORD *)(*(_QWORD *)a1 + 32);
              v158 = (uint64_t)v180;
              v51 = "Token lookup: G2P Language %s validation not OK";
              goto LABEL_83;
            }
          }
        }
        else
        {
          v52 = v172;
          v53 = v174;
          if (!v179)
            goto LABEL_93;
        }
        if (!a1[235])
          goto LABEL_93;
        v54 = v178;
        if (v180 && *v180 && cstdlib_strlen(v180) < 4)
          v55 = v180;
        else
          v55 = (const char *)*((_QWORD *)a1 + 151);
        cstdlib_strcpy(__dst, v55);
        if (*__s2 && cstdlib_strncmp(__dst, __s2, 2uLL)
          || cstdlib_strstr(a6, "latin") && !cstdlib_strcmp(__dst, *((const char **)a1 + 151)))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Token lookup: G2P Language %s validation not OK", v56, v57, v58, (uint64_t)v180);
          if (*((_BYTE *)a1 + 272))
          {
            v64 = cstdlib_strncmp(__dst, __s2, 2uLL);
            v65 = v168;
            if (v64)
              v65 = 1;
            v168 = v65;
          }
          goto LABEL_84;
        }
        cstdlib_strcpy(__s2, __dst);
        v168 = 0;
LABEL_94:
        v73 = v190;
        *v177 = v73 + cstdlib_strlen(__s);
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*((_QWORD *)a1 + 7) + 88))(v53, v52, a9, &a9);
        if ((v74 & 0x80000000) != 0)
          return v74;
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(*((_QWORD *)a1 + 7) + 160))(v53, v52, a9, 0, 1, &v186, &v185);
        if ((v74 & 0x80000000) != 0)
          return v74;
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*((_QWORD *)a1 + 7) + 160))(v53, v52, a9, 1, 1, &v190, &v185);
        if ((v74 & 0x80000000) != 0)
          return v74;
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*((_QWORD *)a1 + 7) + 160))(v53, v52, a9, 2, 1, v177, &v185);
        if ((v74 & 0x80000000) != 0)
          return v74;
        if (a7)
        {
          v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v76 = a9;
          v77 = cstdlib_strlen(a7);
          v74 = v75(v53, v52, v76, 19, (unsigned __int16)(v77 + 1), a7, &v185);
          v54 = v178;
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        v78 = cstdlib_strchr(v54, 18);
        v79 = v78;
        if (!v78)
          v79 = &v54[cstdlib_strlen(v54)];
        v80 = *((__int16 *)a1 + 112);
        v81 = (char *)(*v163 + v190 + v80);
        v82 = *v163 + *v177 + v80;
        v161 = a1[569];
        v83 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v191[0] = 0;
        v84 = oneword_CountPhoneticWords(v54, v79);
        log_OutText(v83, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of orthographic words: %d", v85, v86, v87, 0);
        v88 = oneword_CountOrthographicWords(v81, v82, 0x23u, 0x23u);
        log_OutText(v83, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of phonetic words:     %d", v89, v90, v91, v84);
        if (!(_DWORD)v84)
        {
          v99 = v83;
          v100 = "No phonetic words found: returning";
LABEL_108:
          log_OutText(v99, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)v100, v92, v93, v94, v159);
          goto LABEL_118;
        }
        if (!v88)
        {
          v99 = v83;
          v100 = "No orthographic words found: returning";
          goto LABEL_108;
        }
        if ((_DWORD)v84 == 1)
        {
          v191[0] = v88 - 1;
          oneword_ReplaceCharactersInOrthography(v81, v82, 0x21u, 45, v191);
          v95 = v81;
          v96 = v82;
          v97 = 5;
          v98 = 45;
LABEL_117:
          oneword_ReplaceCharactersInOrthography(v95, v96, v97, v98, v191);
          goto LABEL_118;
        }
        if (utf8_BelongsToSet(0x24u, v81, 0, (int)v82 - (int)v81))
        {
          PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v81, (int)v82 - (int)v81);
          if (PreviousUtf8Offset)
          {
            if (utf8_BelongsToSet(0x24u, v81, PreviousUtf8Offset, (int)v82 - (int)v81))
            {
              log_OutText(v83, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Orthography starts and ends with underscore or hyphen: no replacement made", v102, v103, v104, v159);
              v54 = v178;
              goto LABEL_118;
            }
          }
        }
        if (v161)
        {
          *(_WORD *)__dst = v82 - (_WORD)v81;
          oneword_ReplaceCharactersInOrthography(v81, v82, 5u, 95, __dst);
        }
        v54 = v178;
        if (v88 < v84)
        {
          v191[0] = v84 - v88;
          v95 = v81;
          v96 = v82;
          v97 = 34;
          v98 = 95;
          goto LABEL_117;
        }
LABEL_118:
        v105 = oneword_CountOrthographicWords(v81, v82, 0x23u, 0x23u);
        log_OutText(v83, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of orthographic words after adjustment: %d", v106, v107, v108, v105);
        log_OutText(v83, (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Number of phonetic words after adjustment:     %d", v109, v110, v111, v84);
        a7 = v169;
        a6 = v164;
        if (v78)
        {
          *v78 = 0;
          v112 = v78 + 1;
          if (a1[548])
          {
            v113 = (char *)v112;
            v112 = v162;
            v74 = mosynt_LHPlusMapping(*((_QWORD *)a1 + 6), *((uint64_t **)a1 + 275), *((_QWORD *)a1 + 280), v113, v162, 0x1388u);
            if ((v74 & 0x80000000) != 0)
              return v74;
          }
          v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v115 = a9;
          v116 = cstdlib_strlen(v112);
          v74 = v114(v174, v172, v115, 11, (unsigned __int16)(v116 + 1), v112, &v185);
          v54 = v178;
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        if (a1[548])
        {
          v117 = v54;
          v54 = v162;
          v74 = mosynt_LHPlusMapping(*((_QWORD *)a1 + 6), *((uint64_t **)a1 + 275), *((_QWORD *)a1 + 280), v117, v162, 0x1388u);
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
        v119 = a9;
        v120 = cstdlib_strlen(v54);
        v74 = v118(v174, v172, v119, 3, (unsigned __int16)(v120 + 1), v54, &v185);
        if ((v74 & 0x80000000) != 0)
          return v74;
        if (__s1)
        {
          v121 = cstdlib_strcmp(__s1, "");
          v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v123 = a9;
          if (v121)
          {
            v124 = (unsigned __int16)(cstdlib_strlen(__s1) + 1);
            v125 = v174;
            v126 = v172;
            v127 = v123;
            v128 = __s1;
          }
          else
          {
            v125 = v174;
            v126 = v172;
            v127 = a9;
            v124 = 2;
            v128 = "*";
          }
          v74 = v122(v125, v126, v127, 5, v124, v128, &v185);
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        if (v176)
        {
          v129 = cstdlib_strcmp(v176, "");
          v130 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v131 = a9;
          if (v129)
          {
            v132 = (unsigned __int16)(cstdlib_strlen(v176) + 1);
            v133 = v174;
            v134 = v172;
            v135 = v131;
            v136 = v176;
          }
          else
          {
            v133 = v174;
            v134 = v172;
            v135 = a9;
            v132 = 2;
            v136 = "*";
          }
          v74 = v130(v133, v134, v135, 6, v132, v136, &v185);
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        if (v175)
        {
          v137 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v138 = a9;
          v139 = cstdlib_strlen(v175);
          v74 = v137(v174, v172, v138, 4, (unsigned __int16)(v139 + 1), v175, &v185);
          if ((v74 & 0x80000000) != 0)
            return v74;
        }
        if (v39)
          v140 = cstdlib_atoi(v39);
        else
          v140 = 1;
        v183 = v140;
        if (v180)
        {
          v141 = cstdlib_strstr(v164, v180);
          v142 = *v180;
          v143 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
          v144 = a9;
          v145 = cstdlib_strlen(v180);
          v25 = v143(v174, v172, v144, 9, (unsigned __int16)(v145 + 1), v180, &v185);
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Language tag is %s", v146, v147, v148, (uint64_t)v180);
          v149 = (char *)*((_QWORD *)a1 + 152);
          if (v149)
            v150 = cstdlib_strstr(v149, v164);
          else
            v150 = 0;
          if (a1[301]
            && (v141 && (!cstdlib_strlen(v180) || !v141[cstdlib_strlen(v180)])
             || !LH_stricmp(v180, *((char **)a1 + 151)) && v150 && v150[cstdlib_strlen(v164)] == 124))
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Increasing priority to %d", v151, v152, v153, (unsigned __int16)++v183);
          }
          a7 = v169;
        }
        else
        {
          v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(*((_QWORD *)a1 + 7) + 160))(v174, v172, a9, 9, 1, "", &v185);
          v142 = 0;
        }
        if ((v25 & 0x80000000) != 0)
          return v25;
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(*((_QWORD *)a1 + 7) + 160))(v174, v172, a9, 7, 1, &v183, &v185);
        if ((v74 & 0x80000000) != 0)
          return v74;
        v154 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*((_QWORD *)a1 + 7) + 160);
        v155 = a9;
        v156 = cstdlib_strlen(v165);
        v25 = v154(v174, v172, v155, 21, (unsigned __int16)(v156 + 1), v165, &v185);
        if ((v25 & 0x80000000) != 0)
          return v25;
        if (v188 == 1 && v142)
          a1[233] = v142 == 101;
LABEL_84:
        if (++v28 >= (unint64_t)v188)
          goto LABEL_166;
      }
      v175 = 0;
      v34 = 0;
LABEL_27:
      v36 = 0;
LABEL_28:
      v176 = 0;
      v39 = 0;
LABEL_29:
      v41 = 0;
LABEL_30:
      v180 = 0;
      goto LABEL_31;
    }
    v168 = 0;
LABEL_166:
    a1[69] = v168;
  }
  return v25;
}

uint64_t oneword_isInputBetweenPOIMrk(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *i;

  if (!a2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = a2;
  for (i = (unsigned __int16 *)(a1 + 12); ; i += 16)
  {
    if (*((_DWORD *)i - 3) == 55 && cstdlib_strstr(*(char **)(i + 6), "POI"))
    {
      v6 = *i;
LABEL_12:
      v7 = 1;
      goto LABEL_13;
    }
    if (v7 == 1)
    {
      if (*((_DWORD *)i - 3) != 56 || !cstdlib_strstr(*(char **)(i + 6), "POI"))
        goto LABEL_12;
      if (v6 <= a3 && *i >= a4)
        break;
    }
    v7 = 0;
LABEL_13:
    if (!--v8)
      return 0;
  }
  return 1;
}

uint64_t oneword_ProcessNTokens(uint64_t a1, char *a2, const char **a3, char *a4, uint64_t a5, uint64_t a6, unsigned __int16 a7, uint64_t a8, uint64_t a9, _WORD *a10, unsigned __int16 *a11, __int16 a12, int a13, int a14, int a15)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t DepesLayersForWordAndPOS;
  uint64_t appended;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  int v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  unsigned int v47;
  int v48;
  unsigned __int16 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned __int16 v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v76;
  unsigned __int16 v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  const char *v98;
  size_t v99;
  const char *v100;
  size_t v101;
  const char *v102;
  size_t v103;
  const char *v104;
  size_t v105;
  const char *v106;
  size_t v107;
  const char *v108;
  size_t v109;
  __int16 v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  const char *v115;
  size_t v116;
  int v117;
  uint64_t v118;
  const char *v119;
  size_t v120;
  const char *v121;
  size_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  const char *v132;
  size_t v133;
  const char *v134;
  size_t v135;
  const char *v136;
  size_t v137;
  const char *v138;
  unsigned __int16 v139;
  unsigned __int16 v140;
  uint64_t v141;
  const char *v142;
  size_t v143;
  const char *v144;
  size_t v145;
  int v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  char **v151;
  const char *v152;
  __int16 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(_QWORD, _QWORD, char *, size_t, _QWORD);
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  size_t v160;
  __int16 v161;
  char *v162;
  uint64_t v163;
  size_t v164;
  unsigned __int16 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v170;
  unsigned __int16 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  __int16 v176;
  __int16 v177;
  int v178;
  uint64_t *v179;
  uint64_t v180;
  __int16 v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  __int16 v191;
  int v192;
  unsigned int v193;
  char *v194;
  char *v195;
  size_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;
  unint64_t v201;
  int v202;
  _DWORD *v203;
  _WORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(_QWORD, _QWORD, _QWORD, const char *, _QWORD);
  const char *v218;
  unsigned __int16 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v224;
  unsigned __int16 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t (*v229)(_QWORD, _QWORD, uint64_t, const char *, _QWORD);
  const char *v230;
  unsigned __int16 v231;
  const char *v232;
  const char **v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  size_t v237;
  const char *v238;
  unsigned __int8 v239;
  const char **v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int16 i;
  const char *v244;
  size_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  char *v262;
  const char *v263;
  __int16 v264;
  size_t v265;
  char *v266;
  const char *v267;
  size_t v268;
  unsigned __int16 v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unsigned __int16 v273;
  char *v274;
  char *v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  __int16 v281;
  uint64_t (*v282)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *);
  uint64_t v283;
  __int16 v284;
  uint64_t (*v285)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *);
  uint64_t v286;
  __int16 v287;
  uint64_t (*v288)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *);
  uint64_t v289;
  __int16 v290;
  uint64_t j;
  uint64_t (*v292)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v293;
  __int16 v294;
  unsigned __int16 *v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v299;
  char v300;
  uint64_t v301;
  int v302;
  char *v303;
  uint64_t v304;
  unsigned __int16 v305;
  char *v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  unsigned __int16 v311;
  char v312;
  int v313;
  int v314;
  int v315;
  const char **v316;
  int v317;
  int v318;
  uint64_t *v319;
  uint64_t *v320;
  int v321;
  uint64_t v322;
  unsigned __int16 *v323;
  int v324;
  __int16 v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  unsigned __int8 v329;
  int v330;
  uint64_t *v331;
  const char **v332;
  uint64_t *v333;
  char *__s1;
  char *v335;
  unsigned int v336;
  char *v337;
  unsigned __int16 v338;
  int v339;
  uint64_t v340;
  int v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  int v346;
  int v347;
  int v348;
  char v349;
  unsigned __int16 v350;
  unsigned __int16 v351;
  uint64_t v352;
  char *__src;
  int v354;
  int v355;
  int v356;
  int v357;
  unsigned __int16 v358;
  unsigned __int16 v359;
  char v360[129];
  char __dst[21];
  _WORD v362[132];
  char __s[128];
  uint64_t v364;

  v364 = *MEMORY[0x24BDAC8D0];
  v359 = a7;
  v358 = 0;
  v350 = 1;
  v349 = 32;
  v348 = 0;
  v22 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 2248);
  if (!v22)
  {
    DepesLayersForWordAndPOS = 2310021130;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v23, v24, v25, v26, v299);
    return DepesLayersForWordAndPOS;
  }
  v27 = v22;
  v357 = 0;
  v356 = 0;
  v355 = 0;
  v354 = 0;
  __src = 0;
  v352 = 0;
  v351 = 0;
  v347 = 0;
  v346 = 0;
  cstdlib_strcpy(__dst, "");
  cstdlib_strcpy(__s, "acronym_detection");
  v340 = v27;
  v338 = cstdlib_strlen(__s);
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    v28 = cstdlib_strchr(a4, 95);
    if (v28)
      v29 = v28 + 1;
    else
      v29 = a4;
    v337 = v29;
    v30 = *v29;
  }
  else
  {
    v337 = 0;
    v30 = 32;
  }
  memset(v362, 0, 256);
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v359, 1, 1, (char *)&v354 + 2, (char *)&v356 + 2);
  if ((appended & 0x80000000) != 0)
    goto LABEL_444;
  HIWORD(v355) = HIWORD(v354);
  do
  {
    if (!v359)
      break;
    v358 = v359;
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 136))(a5, a6, v359, &v359);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    if (!v359)
      break;
    appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
  }
  while (HIWORD(v355) == HIWORD(v354));
  v335 = a2;
  v359 = v358;
  cstdlib_strcpy(*(char **)(a1 + 240), "");
  cstdlib_strcpy(*(char **)(a1 + 248), "");
  cstdlib_strcpy(*(char **)(a1 + 256), "");
  cstdlib_strcpy(*(char **)(a1 + 264), "");
  appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, a8, 2, 1, &v354, (char *)&v356 + 2);
  if ((appended & 0x80000000) != 0)
    goto LABEL_444;
  v33 = (unsigned __int16)(v354 - HIWORD(v354));
  v34 = (v33 + 200);
  v333 = (uint64_t *)(a1 + 192);
  if (v34 > *(unsigned __int16 *)(a1 + 192))
  {
    v35 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 160), (v33 + 200));
    if (!v35)
      goto LABEL_394;
    *(_QWORD *)(a1 + 160) = v35;
    *(_QWORD *)(a1 + 192) = v34;
  }
  if (v34 > *(unsigned __int16 *)(a1 + 200))
  {
    v40 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), (v33 + 200));
    if (!v40)
      goto LABEL_394;
    *(_QWORD *)(a1 + 168) = v40;
    *(_QWORD *)(a1 + 200) = v34;
  }
  v331 = (uint64_t *)(a1 + 208);
  if (v34 > *(unsigned __int16 *)(a1 + 208))
  {
    v41 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 176), (v33 + 200));
    if (!v41)
      goto LABEL_394;
    *(_QWORD *)(a1 + 176) = v41;
    *(_QWORD *)(a1 + 208) = v34;
  }
  v332 = (const char **)(a1 + 160);
  cstdlib_strcpy(*(char **)(a1 + 160), "");
  v358 = v359;
  v42 = HIWORD(v354);
  v43 = (unsigned __int16)v354;
  __s1 = a4;
  v315 = v30;
  if (HIWORD(v354) >= (unsigned __int16)v354)
  {
    v46 = 0;
    v45 = 0;
  }
  else
  {
    v44 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 80) + 128))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) + HIWORD(v354)]);
    v42 = HIWORD(v354);
    v45 = 0;
    if (v44)
    {
      while (1)
      {
        v46 = v45 + utf8_determineUTF8CharLength((*a3)[*(__int16 *)(a1 + 224) + (uint64_t)(v45 + v42)]);
        v42 = HIWORD(v354);
        v45 = v46;
        v47 = HIWORD(v354) + v46;
        v43 = (unsigned __int16)v354;
        if (v47 >= (unsigned __int16)v354)
          break;
        v48 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 80) + 128))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) + (unint64_t)v47]);
        v42 = HIWORD(v354);
        if (!v48)
          goto LABEL_33;
      }
    }
    else
    {
      v46 = 0;
LABEL_33:
      v43 = (unsigned __int16)v354;
    }
  }
  v49 = v42 + v46;
  HIWORD(v354) = v49;
  v50 = (__int16)v43;
  v328 = (uint64_t *)(a1 + 200);
  if ((__int16)v43 > (int)v49)
  {
    while ((*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v43] < -64)
    {
      v50 = (__int16)--v43;
      if ((__int16)v43 <= (int)v49)
        goto LABEL_39;
    }
    v50 = (__int16)v43;
  }
LABEL_39:
  v316 = (const char **)(a1 + 256);
  if (v50 > v49)
  {
    v51 = v43;
    do
    {
      v52 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 80) + 128))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &(*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v51]);
      v49 = HIWORD(v354);
      if (!v52)
        break;
      LOWORD(v354) = --v51;
      v53 = (__int16)v51;
      if ((__int16)v51 > (int)HIWORD(v354))
      {
        while ((*a3)[*(__int16 *)(a1 + 224) - 1 + (unint64_t)(unsigned __int16)v51] < -64)
        {
          v53 = (__int16)--v51;
          if ((__int16)v51 <= (int)HIWORD(v354))
            goto LABEL_47;
        }
        v53 = (__int16)v51;
      }
LABEL_47:
      ;
    }
    while (v53 > HIWORD(v354));
  }
  v317 = v45;
  v336 = a8;
  v329 = 0;
  v54 = 0;
  v321 = v33 + 100;
  v319 = (uint64_t *)(a1 + 176);
  v320 = (uint64_t *)(a1 + 168);
  v323 = (unsigned __int16 *)(a1 + 280);
  v324 = 1;
  v55 = 1;
  v56 = 1;
LABEL_49:
  v57 = v358;
  while (1)
  {
    if (v57 == v336)
    {
      v69 = v336;
      v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56)
                                                                                                + 168))(a5, a6, v336, 0, 1, &v357, (char *)&v356 + 2);
      if ((v73 & 0x80000000) == 0)
      {
        if (v357 | v56)
        {
LABEL_121:
          v74 = (unsigned __int16)v354 - v49;
          if ((int)v74 >= 1
            && !dynamic_strncat(v332, &(*a3)[v49 + *(__int16 *)(a1 + 224)], v74, v333, *(uint64_t **)(*(_QWORD *)a1 + 8)))
          {
            DepesLayersForWordAndPOS = 2310021130;
            goto LABEL_445;
          }
          if (!a13)
          {
            if (cstdlib_strlen(*v332) - 128 >= 0xFFFFFFFFFFFFFF7FLL)
            {
              DepesLayersForWordAndPOS = v73;
              v314 = a15;
              v89 = *(char **)(a1 + 232);
            }
            else
            {
              v86 = *(uint64_t **)(*(_QWORD *)a1 + 8);
              v87 = *(_QWORD *)(a1 + 232);
              v88 = cstdlib_strlen(*(const char **)(a1 + 160));
              v89 = (char *)heap_Realloc(v86, v87, (v88 + 1));
              if (!v89)
                goto LABEL_394;
              DepesLayersForWordAndPOS = v73;
              v314 = a15;
              *(_QWORD *)(a1 + 232) = v89;
              v69 = v336;
            }
            v90 = v335;
            v91 = (uint64_t *)(a1 + 200);
            cstdlib_strcpy(v89, *v332);
            LOWORD(v92) = 0;
            v95 = cstdlib_strlen(*v332) + 1;
LABEL_149:
            if ((_WORD)v95)
            {
              v325 = v92;
              v318 = 0;
              v322 = 0;
              v96 = 0;
              v309 = 0;
              v310 = v90 + 15000;
              v306 = v90 + 10000;
              v307 = 0;
              v302 = (unsigned __int16)v95 - 2;
              v330 = v95;
              v303 = v90 + 20000;
              v304 = (unsigned __int16)v95;
              v308 = v90 + 5000;
              while (1)
              {
                v339 = v96;
                v97 = (unsigned __int16)v96;
                v98 = (const char *)(*(_QWORD *)(a1 + 232) + (unsigned __int16)v96);
                v99 = cstdlib_strlen("↕");
                if (!cstdlib_strncmp(v98, "↕", v99)
                  && cstdlib_strcmp(__s1, "prompt")
                  && cstdlib_strcmp(__s1, "internal-nuance-system-norm"))
                {
                  break;
                }
                if (*(_DWORD *)(a1 + 2192) && *(_DWORD *)(a1 + 2248))
                  goto LABEL_458;
                v100 = (const char *)(*(_QWORD *)(a1 + 232) + v97);
                v101 = cstdlib_strlen("§");
                if (!cstdlib_strncmp(v100, "§", v101)
                  || (v102 = (const char *)(*(_QWORD *)(a1 + 232) + v97),
                      v103 = cstdlib_strlen("↕"),
                      !cstdlib_strncmp(v102, "↕", v103))
                  && (!cstdlib_strcmp(__s1, "prompt") || !cstdlib_strcmp(__s1, "internal-nuance-system-norm")))
                {
                  v344 = 0;
                  v345 = 0;
                  v326 = v97;
                  v121 = (const char *)(*(_QWORD *)(a1 + 232) + v97);
                  v122 = cstdlib_strlen("§");
                  if (cstdlib_strncmp(v121, "§", v122))
                    v123 = "↕";
                  else
                    v123 = "§";
                  v311 = cstdlib_strlen(v123);
                  v129 = v339;
                  while (1)
                  {
                    v130 = v129++;
                    if ((unsigned __int16)v129 >= (unsigned __int16)v330)
                      break;
                    v131 = (unsigned __int16)v129;
                    v132 = (const char *)(*(_QWORD *)(a1 + 232) + (unsigned __int16)v129);
                    v133 = cstdlib_strlen("§");
                    if (cstdlib_strncmp(v132, "§", v133))
                    {
                      v134 = (const char *)(*(_QWORD *)(a1 + 232) + (unsigned __int16)v129);
                      v135 = cstdlib_strlen("↕");
                      if (cstdlib_strncmp(v134, "↕", v135))
                        continue;
                    }
                    goto LABEL_196;
                  }
                  v131 = (unsigned __int16)v129;
LABEL_196:
                  v147 = *(_QWORD *)(a1 + 232);
                  v148 = *(_BYTE *)(v147 + v131);
                  v301 = v131;
                  *(_BYTE *)(v147 + v131) = 0;
                  v300 = v148;
                  if (*(_DWORD *)(a1 + 2004))
                  {
                    v149 = *a11;
                    if (v149 >= 2)
                    {
                      v150 = v149 - 1;
                      v151 = (char **)(a9 + 56);
                      while (*((_DWORD *)v151 - 6) != 58
                           || *((_DWORD *)v151 - 3) + v317 - *(_DWORD *)(a9 + 12) != HIWORD(v354))
                      {
                        v151 += 4;
                        if (!--v150)
                          goto LABEL_296;
                      }
                      v307 = *v151;
                    }
LABEL_296:
                    DepesLayersForWordAndPOS = getDepesLayersForWordAndPOS(a1, (uint64_t)__s1, (char *)(*(_QWORD *)(a1 + 232) + v97 + v311), v307);
                    v152 = (const char *)(*(_QWORD *)(a1 + 232) + v97 + v311);
                  }
                  else
                  {
                    DepesLayersForWordAndPOS = mde_stemafx_Main(a1, __s1, (char *)(*(_QWORD *)(a1 + 232) + v97 + v311), v124, v125, v126, v127, v128);
                    v152 = *(const char **)(a1 + 160);
                  }
                  v213 = cstdlib_strlen(v152);
                  v313 = v129;
                  HIWORD(v354) += v213;
                  if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                    goto LABEL_445;
                  cstdlib_strcpy(__s, "one_word");
                  v305 = cstdlib_strlen(__s);
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v214, v215, v216, (uint64_t)__s);
                  v217 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104)
                                                                                                + 120);
                  v218 = *(const char **)(a1 + 160);
                  v219 = cstdlib_strlen(v218);
                  appended = v217(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v218, v219);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L3: %s", v220, v221, v222, (uint64_t)__s);
                  v223 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 104)
                                                                                                 + 120);
                  v224 = *(const char **)(a1 + 168);
                  v225 = cstdlib_strlen(v224);
                  appended = v223(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 2, v224, v225);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L4: %s", v226, v227, v228, (uint64_t)__s);
                  v229 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)(a1 + 104)
                                                                                                 + 120);
                  v230 = *(const char **)(a1 + 176);
                  v231 = cstdlib_strlen(v230);
                  appended = v229(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 3, v230, v231);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  v232 = __s1;
                  if (cstdlib_strcmp(__s1, "normal")
                    && (ssftmap_Find(*(_QWORD *)(a1 + 568), (uint64_t)__s1, &v344) & 0x80000000) == 0)
                  {
                    if (!(_WORD)v339 && v302 == (unsigned __int16)v129)
                    {
                      appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a5, a6, v359, &v358);
                      if ((appended & 0x80000000) != 0)
                        goto LABEL_444;
                      appended = dt_Main(a1, v358, a5, a6, *((_QWORD *)v344 + 2), __s1);
                      DepesLayersForWordAndPOS = (appended & 0x1FFF) == 0x10A ? 0 : appended;
                      v233 = (const char **)(a1 + 240);
                      v234 = v326;
                      if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                        goto LABEL_444;
                      v318 = 1;
LABEL_316:
                      v236 = (const char *)(*(_QWORD *)(a1 + 232) + v234);
                      v237 = cstdlib_strlen("§");
                      if (!cstdlib_strncmp(v236, "§", v237))
                      {
                        oneword_ReplaceUnderscoreWithDot(*v233);
                        DepesLayersForWordAndPOS = 0;
                      }
                      v91 = (uint64_t *)(a1 + 200);
                      if (*(_DWORD *)(a1 + 560))
                      {
                        v238 = v337;
                        if (v337)
                        {
                          v239 = v315;
                          goto LABEL_343;
                        }
                      }
                      else
                      {
                        v238 = __s1;
                        v239 = *__s1;
LABEL_343:
                        v349 = v239;
                        cstdlib_strncpy(__dst, v238, 0x14uLL);
                      }
LABEL_357:
                      v246 = v130 + 2;
LABEL_390:
                      v325 = 0;
                      LODWORD(v118) = v246;
                      v69 = v336;
                      goto LABEL_391;
                    }
                    v235 = dt_Main(a1, 0, a5, a6, *((_QWORD *)v344 + 2), __s1);
                    if ((v235 & 0x1FFF) == 0x10A)
                    {
                      DepesLayersForWordAndPOS = 0;
LABEL_315:
                      v233 = (const char **)(a1 + 240);
                      v234 = v326;
                      goto LABEL_316;
                    }
                    v232 = __s1;
                    if ((v235 & 0x80000000) == 0)
                    {
                      DepesLayersForWordAndPOS = v235;
                      goto LABEL_315;
                    }
                  }
                  if (cstdlib_strcmp(v232, "normal"))
                  {
                    if (cstdlib_strlen(v232) + v305 + 2 <= 0x7F)
                    {
                      cstdlib_strcat(__s, "_");
                      cstdlib_strcat(__s, v232);
                      if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s) & 0x80000000) == 0)
                      {
                        if (*(_DWORD *)(a1 + 560))
                        {
                          if (v337)
                          {
                            v349 = v315;
                            cstdlib_strncpy(__dst, v337, 0x14uLL);
                          }
                        }
                        else
                        {
                          v349 = *__s1;
                          cstdlib_strncpy(__dst, __s1, 0x14uLL);
                        }
                        goto LABEL_361;
                      }
                    }
                  }
                  LODWORD(v343) = 0;
                  if (*(_DWORD *)(a1 + 928))
                  {
                    if (cstdlib_strlen(__s1) >= 2 && !cstdlib_strchr(__s1, 95))
                    {
                      appended = oneword_Lid(a1, &v343);
                      if ((appended & 0x80000000) != 0)
                        goto LABEL_444;
                    }
                    if ((_DWORD)v343)
                    {
                      __s[v305] = 0;
                      goto LABEL_359;
                    }
                  }
                  if ((ssftmap_Find(*(_QWORD *)(a1 + 568), (uint64_t)"normal", &v344) & 0x80000000) == 0)
                  {
                    if (!(_WORD)v339 && v302 == (unsigned __int16)v129)
                    {
                      appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 88))(a5, a6, v359, &v358);
                      if ((appended & 0x80000000) != 0)
                        goto LABEL_444;
                      appended = dt_Main(a1, v358, a5, a6, *((_QWORD *)v344 + 2), __s1);
                      DepesLayersForWordAndPOS = (appended & 0x1FFF) == 0x10A ? 0 : appended;
                      v240 = (const char **)(a1 + 240);
                      v241 = v326;
                      if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                        goto LABEL_444;
                      v318 = 1;
                      goto LABEL_354;
                    }
                    v242 = dt_Main(a1, 0, a5, a6, *((_QWORD *)v344 + 2), __s1);
                    if ((v242 & 0x1FFF) == 0x10A)
                    {
                      DepesLayersForWordAndPOS = 0;
LABEL_353:
                      v240 = (const char **)(a1 + 240);
                      v241 = v326;
LABEL_354:
                      v244 = (const char *)(*(_QWORD *)(a1 + 232) + v241);
                      v245 = cstdlib_strlen("§");
                      if (!cstdlib_strncmp(v244, "§", v245))
                      {
                        oneword_ReplaceUnderscoreWithDot(*v240);
                        DepesLayersForWordAndPOS = 0;
                      }
                      v91 = (uint64_t *)(a1 + 200);
                      goto LABEL_357;
                    }
                    if ((v242 & 0x80000000) == 0)
                    {
                      DepesLayersForWordAndPOS = v242;
                      goto LABEL_353;
                    }
                  }
                  v247 = v343;
                  __s[v305] = 0;
                  if (v247)
                  {
LABEL_359:
                    cstdlib_strcat(__s, "_e");
                    v349 = 101;
                    cstdlib_strcpy(__dst, "e");
                  }
                  appended = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
LABEL_361:
                  appended = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &__src, &v351);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  __src[v351] = 0;
                  appended = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 2, &v352, &v351);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  *(_BYTE *)(v352 + v351) = 0;
                  appended = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 4, &v345, &v351);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  v345[v351] = 0;
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v248, v249, v250, (uint64_t)__s);
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O3: %s", v251, v252, v253, (uint64_t)__s);
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O5: %s", v254, v255, v256, (uint64_t)__s);
                  if ((unsigned __int16)cstdlib_strlen(__src))
                  {
                    v260 = 0;
                    v261 = 0;
                    do
                    {
                      v262 = &__src[(unsigned __int16)v261];
                      if (*v262 == 126)
                      {
                        v263 = &__src[v260 + 1];
                        v264 = cstdlib_strlen(v263);
                        cstdlib_memmove(v262, v263, (unsigned __int16)(v264 + 1));
                        --v261;
                      }
                      else
                      {
                        v265 = cstdlib_strlen("¡");
                        if (!cstdlib_strncmp(v262, "¡", v265))
                        {
                          v266 = &__src[v260 + 1];
                          v267 = &__src[v260 + 2];
                          v268 = cstdlib_strlen(v267);
                          cstdlib_memmove(v266, v267, v268 + 1);
                          __src[(unsigned __int16)v261] = 126;
                        }
                      }
                      v260 = (unsigned __int16)++v261;
                    }
                    while ((unsigned __int16)v261 < (unsigned __int16)cstdlib_strlen(__src));
                  }
                  v269 = 0;
                  *(_BYTE *)(*(_QWORD *)(a1 + 232) + v301) = v300;
                  v270 = v352;
                  while (1)
                  {
                    v271 = v269;
                    v272 = *(unsigned __int8 *)(v352 + v269);
                    if (v272 != 32 && v272 != 126)
                      break;
                    ++v269;
                  }
                  if (*(_BYTE *)(v352 + v269))
                  {
                    while (v272 != 32 && v272 != 126)
                      LOBYTE(v272) = *(_BYTE *)(v352 + ++v269);
                    *(_BYTE *)(v352 + v269) = 0;
                    v270 = v352;
                  }
                  v273 = 0;
                  v274 = (char *)(v270 + v271);
                  v275 = v345;
                  while (1)
                  {
                    v276 = v273;
                    v277 = v345[v273];
                    if (v277 != 32 && v277 != 126)
                      break;
                    ++v273;
                  }
                  if (v345[v273])
                  {
                    while (v277 != 32 && v277 != 126)
                      LOBYTE(v277) = v345[++v273];
                    v345[v273] = 0;
                    v275 = v345;
                  }
                  v278 = (uint64_t)&v275[v276];
                  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD ONEWORDGRAMMAR %s", v257, v258, v259, *(_QWORD *)(a1 + 232));
                  appended = oneword_AppendPhon(a1, __src, v274, v278, v349, 1);
                  DepesLayersForWordAndPOS = 0;
                  v91 = (uint64_t *)(a1 + 200);
                  v246 = v313;
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  goto LABEL_390;
                }
                if (*(_DWORD *)(a1 + 2192) && *(_DWORD *)(a1 + 2248))
                {
LABEL_458:
                  v104 = (const char *)(*(_QWORD *)(a1 + 232) + v97);
                  v105 = cstdlib_strlen("§");
                  if (!cstdlib_strncmp(v104, "§", v105)
                    || (v106 = (const char *)(*(_QWORD *)(a1 + 232) + v97),
                        v107 = cstdlib_strlen("↕"),
                        !cstdlib_strncmp(v106, "↕", v107))
                    && (!cstdlib_strcmp(__s1, "prompt") || !cstdlib_strcmp(__s1, "internal-nuance-system-norm")))
                  {
                    v327 = v97;
                    v136 = (const char *)(*(_QWORD *)(a1 + 232) + v97);
                    v137 = cstdlib_strlen("§");
                    if (cstdlib_strncmp(v136, "§", v137))
                      v138 = "↕";
                    else
                      v138 = "§";
                    v139 = cstdlib_strlen(v138);
                    while (1)
                    {
                      v140 = ++v339;
                      if ((unsigned __int16)v339 >= (unsigned __int16)v330)
                      {
                        v141 = v140;
                        goto LABEL_206;
                      }
                      v141 = v140;
                      v142 = (const char *)(*(_QWORD *)(a1 + 232) + v140);
                      v143 = cstdlib_strlen("§");
                      if (!cstdlib_strncmp(v142, "§", v143))
                        break;
                      v144 = (const char *)(*(_QWORD *)(a1 + 232) + v141);
                      v145 = cstdlib_strlen("↕");
                      v146 = cstdlib_strncmp(v144, "↕", v145);
                      v69 = v336;
                      if (!v146)
                        goto LABEL_206;
                    }
                    v69 = v336;
LABEL_206:
                    *(_BYTE *)(*(_QWORD *)(a1 + 232) + v141) = 0;
                    cstdlib_strncpy(v360, (const char *)(*(_QWORD *)(a1 + 232) + v327 + v139), 0x7FuLL);
                    v360[128] = 0;
                    appended = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, uint64_t))(*(_QWORD *)(a1 + 80) + 136))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), "normal", v360, 128);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    appended = mosynt_StartWordAnalysis(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 2200), *(_QWORD *)(a1 + 2208), *(_QWORD *)(a1 + 2216), *(_QWORD *)(a1 + 2224), *(_QWORD *)(a1 + 2232), *(_QWORD *)(a1 + 2240), v340);
                    v91 = (uint64_t *)(a1 + 200);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    appended = mosynt_WordAnalysis(*(_QWORD *)(a1 + 48), v340, (unsigned __int8 *)v360, 0, 1, 1, &v348, &v346);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    appended = mosynt_SkipToFirstOptimalReading(*(_QWORD *)(a1 + 48), v340);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    appended = mosynt_GetReading(*(_QWORD *)(a1 + 48), v340, 0, &v348, v310, 5000, v308, 5000, &v347);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    appended = mosynt_SubstAllSubstrOcc(v308, "~", "¡", v306, 5000);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    cstdlib_strcpy(v308, v306);
                    if (v348)
                    {
                      cstdlib_strcpy(v310, "");
                      cstdlib_strcpy(v303, "*");
                      v349 = 32;
                      appended = oneword_AppendPhon(a1, v308, v310, (uint64_t)v303, 32, 1);
                      if ((appended & 0x80000000) != 0)
                        goto LABEL_444;
                    }
                    appended = mosynt_FinishWordAnalysis(*(_QWORD *)(a1 + 48), v340);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    DepesLayersForWordAndPOS = mosynt_ResetMosyntWS(*(_QWORD *)(a1 + 48), v335);
                    if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                      goto LABEL_445;
                    v153 = cstdlib_strlen(*v332);
                    v325 = 0;
                    v110 = HIWORD(v354) + v153;
LABEL_217:
                    HIWORD(v354) = v110;
LABEL_218:
                    LODWORD(v118) = v339;
                    goto LABEL_391;
                  }
                }
                v108 = (const char *)(*(_QWORD *)(a1 + 232) + v97);
                v109 = cstdlib_strlen("◄");
                if (cstdlib_strncmp(v108, "◄", v109))
                {
                  utf8_ToLower((char *)(*(_QWORD *)(a1 + 232) + v97), 0, (uint64_t)&v345);
                  appended = oneword_AppendPhon(a1, (char *)&v345, "", (uint64_t)"", 32, 0);
                  v91 = (uint64_t *)(a1 + 200);
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                  DepesLayersForWordAndPOS = 0;
                  v325 = 0;
                  v110 = HIWORD(v354) + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 232) + v97));
                  goto LABEL_217;
                }
                v344 = 0;
                v345 = 0;
                v342 = 0;
                v343 = 0;
                v341 = 4;
                v117 = cstdlib_strlen("◄");
                LODWORD(v118) = v339 + v117;
                if ((unsigned __int16)(v339 + v117) < (unsigned __int16)v330)
                {
                  v118 = (unsigned __int16)(v339 + v117);
                  while (1)
                  {
                    v119 = (const char *)(*(_QWORD *)(a1 + 232) + v118);
                    v120 = cstdlib_strlen("◄");
                    if (!cstdlib_strncmp(v119, "◄", v120))
                      break;
                    ++HIWORD(v354);
                    if (v304 == ++v118)
                    {
                      LODWORD(v118) = v330;
                      break;
                    }
                  }
                }
                v208 = (unsigned __int16)v362[v322];
                appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a5, a6, v208, 3, &v345, (char *)&v356 + 2);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
                appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a5, a6, v208, 5, &v344, (char *)&v356 + 2);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
                appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)(a1 + 56) + 176))(a5, a6, v208, 6, &v343, (char *)&v356 + 2);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
                appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v208, 0, 1, &v341, (char *)&v356 + 2);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
                if ((v322 & 0x80) != 0)
                {
                  DepesLayersForWordAndPOS = 2310021632;
                  goto LABEL_445;
                }
                DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 176))(a5, a6, v208, 9, &v342, (char *)&v356 + 2);
                if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                  goto LABEL_445;
                cstdlib_strncpy(__dst, v342, 0x14uLL);
                if (__dst[0])
                  v209 = __dst[0];
                else
                  v209 = 32;
                v349 = v209;
                v69 = v336;
                if (v341 == 4)
                {
                  if (cstdlib_strcmp(v345, "_"))
                  {
                    appended = oneword_AppendPhon(a1, v345, v344, v343, v209, 1);
                    if ((appended & 0x80000000) != 0)
                      goto LABEL_444;
                    DepesLayersForWordAndPOS = 0;
                  }
                }
                else
                {
                  appended = oneword_AppendPhon(a1, v345, v344, v343, v209, 0);
                  DepesLayersForWordAndPOS = 0;
                  if ((appended & 0x80000000) != 0)
                    goto LABEL_444;
                }
                v325 = 0;
                ++v322;
                v91 = (uint64_t *)(a1 + 200);
LABEL_391:
                v279 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(_QWORD *)(a1 + 232) + (unsigned __int16)v118));
                v96 = v118 + v279;
                if ((unsigned __int16)(v118 + v279) >= (unsigned __int16)v330)
                  goto LABEL_397;
              }
              v111 = v97;
              v112 = cstdlib_strlen("↕");
              v113 = v339 + v112;
              if ((unsigned __int16)(v339 + v112) < (unsigned __int16)v330)
              {
                v114 = (unsigned __int16)(v339 + v112);
                while (1)
                {
                  v115 = (const char *)(*(_QWORD *)(a1 + 232) + v114);
                  v116 = cstdlib_strlen("↕");
                  if (!cstdlib_strncmp(v115, "↕", v116))
                    break;
                  if (v304 == ++v114)
                  {
                    v113 = v330;
                    goto LABEL_220;
                  }
                }
                v113 = v114;
              }
LABEL_220:
              v154 = *(_QWORD *)(a1 + 232);
              v339 = v113;
              v155 = (unsigned __int16)v113;
              v312 = *(_BYTE *)(v154 + (unsigned __int16)v113);
              *(_BYTE *)(v154 + (unsigned __int16)v113) = 0;
              v156 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t, _QWORD))(*(_QWORD *)(a1 + 80) + 104);
              v157 = *(_QWORD *)(a1 + 232);
              v158 = v157 + v111 + cstdlib_strlen("↕");
              v159 = *(_QWORD *)(a1 + 232);
              v160 = cstdlib_strlen("↕");
              v161 = cstdlib_strlen((const char *)(v159 + v111 + v160));
              appended = v156(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), __s1, v158, (unsigned __int16)(v161 + 1));
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              v162 = *(char **)(a1 + 160);
              v163 = *(_QWORD *)(a1 + 232);
              v164 = cstdlib_strlen("↕");
              cstdlib_strcpy(v162, (const char *)(v163 + v111 + v164));
              cstdlib_strcpy(__s, "spell_acronym");
              v165 = cstdlib_strlen(__s);
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v166, v167, v168, (uint64_t)__s);
              v169 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104)
                                                                                            + 120);
              v170 = *(const char **)(a1 + 160);
              v171 = cstdlib_strlen(v170);
              appended = v169(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v170, v171);
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              if (cstdlib_strcmp(__s1, "normal") && cstdlib_strlen(__s1) + v165 + 2 <= 0x7F)
              {
                cstdlib_strcat(__s, "_");
                cstdlib_strcat(__s, __s1);
              }
              if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s) & 0x80000000) != 0)
              {
                __s[v165] = 0;
                appended = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
              }
              appended = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &__src, &v351);
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              __src[v351] = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v172, v173, v174, (uint64_t)__s);
              v175 = cstdlib_strlen(__src);
              v176 = v175 - cstdlib_strlen(*(const char **)(a1 + 160));
              v177 = v325;
              *(_BYTE *)(*(_QWORD *)(a1 + 232) + v155) = v312;
              v178 = (__int16)(v325 + v176);
              if (v178 <= 0)
              {
                v182 = v178 + 1;
              }
              else
              {
                v179 = *(uint64_t **)(*(_QWORD *)a1 + 8);
                v180 = (uint64_t)*a3;
                v181 = cstdlib_strlen(*a3);
                v182 = v178 + 1;
                v183 = heap_Realloc(v179, v180, (unsigned __int16)(v178 + 1 + v181));
                if (!v183)
                  goto LABEL_394;
                *a3 = (const char *)v183;
                v177 = v325;
              }
              v184 = cstdlib_strlen(__src);
              v185 = (unsigned __int16)(HIWORD(v354) + *(_WORD *)(a1 + 224) + v184);
              if (v185 > (unsigned __int16)(v182 + cstdlib_strlen(*a3)))
              {
                log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34001, 0, v186, v187, v188, v189, v299);
                DepesLayersForWordAndPOS = 2310021127;
                goto LABEL_445;
              }
              v190 = HIWORD(v354);
              v191 = cstdlib_strlen(*v332);
              LOWORD(v354) = v190 - v177 + v191;
              if (v178 < 1)
              {
                if (v178 < 0)
                {
                  for (i = *(_WORD *)(a1 + 224) + v190 - v177 + v191;
                        i <= (unsigned __int16)cstdlib_strlen(*a3);
                        ++i)
                  {
                    (*a3)[i + v178] = (*a3)[i];
                  }
                }
              }
              else
              {
                v192 = cstdlib_strlen(*a3);
                if (*(__int16 *)(a1 + 224) + (unsigned __int16)v354 <= (unsigned __int16)v192)
                {
                  v193 = (unsigned __int16)v192;
                  do
                  {
                    (*a3)[v193 + (unint64_t)v178] = (*a3)[(unsigned __int16)v192--];
                    v193 = (unsigned __int16)v192;
                  }
                  while (*(__int16 *)(a1 + 224) + (unsigned __int16)v354 <= (unsigned __int16)v192);
                }
              }
              v194 = (char *)&(*a3)[HIWORD(v354) + *(__int16 *)(a1 + 224)];
              v195 = __src;
              v196 = cstdlib_strlen(__src);
              cstdlib_memcpy(v194, v195, v196);
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"Normalizing to: %s", v197, v198, v199, (uint64_t)*a3);
              v200 = cstdlib_strlen(*(const char **)(a1 + 160));
              HIWORD(v354) += v200;
              v201 = (unsigned __int16)*a10;
              if (v201 < *a11)
              {
                v202 = (unsigned __int16)v354;
                v203 = (_DWORD *)(a9 + 12 + 32 * v201);
                do
                {
                  if (v202 <= (__int16)(*v203 - a12))
                    break;
                  *v203 += *(__int16 *)(a1 + 224);
                  v203 += 8;
                  *a10 = ++v201;
                }
                while (v201 < *a11);
              }
              LOWORD(v345) = 0;
              LOWORD(v344) = 0;
              LOWORD(v343) = 0;
              LOWORD(v342) = 0;
              v204 = (_WORD *)(a1 + 280);
              if (*(_DWORD *)(a1 + 2272) == 1)
              {
                appended = hlp_RemoveMNCRecords((_QWORD *)a1, a5, a6, a3, v359, v336, v178);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
              }
              appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char **))(*(_QWORD *)(a1 + 56)
                                                                                               + 104))(a5, a6, 1, 0, &v342);
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 56)
                                                                                                 + 104))(a5, a6, 2, (unsigned __int16)v342, &v343);
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              while ((unsigned __int16)v343 != *v323)
              {
                appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
                if ((appended & 0x80000000) == 0)
                {
                  if ((unsigned __int16)v344 - *(__int16 *)(a1 + 224) >= (unsigned __int16)v354)
                    LOWORD(v344) = (_WORD)v344 + v178;
                  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, (unsigned __int16)v343, 2, 1, &v344, &v356);
                  if ((appended & 0x80000000) == 0)
                  {
                    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 56)
                                                                                              + 120))(a5, a6, (unsigned __int16)v343, &v343);
                    if ((appended & 0x80000000) == 0)
                      continue;
                  }
                }
                goto LABEL_444;
              }
              if ((_WORD)v343)
              {
                appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, (unsigned __int16)v343, 1, 1, &v345, (char *)&v356 + 2);
                if ((appended & 0x80000000) != 0)
                  goto LABEL_444;
              }
              while ((unsigned __int16)v345 < (unsigned __int16)v354 && *v204)
              {
                appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
                if ((appended & 0x80000000) == 0)
                {
                  v210 = (v357 & 0xFFFFFFFC) != 4 && (v357 - 9) > 1;
                  if (v210
                    || (appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, *(unsigned __int16 *)(a1 + 280), 2, 1, &v344, (char *)&v356 + 2), (appended & 0x80000000) == 0)&& ((v211 = *(_WORD *)(a1 + 224), LOWORD(v345) = v211 + (_WORD)v345, (unsigned __int16)v344 >= (unsigned __int16)v354)? (v212 = v178): (v212 = 0), (LOWORD(v344) = (_WORD)v344 + v211 + v212, appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, *(unsigned __int16 *)(a1 + 280), 1,
                                      1,
                                      &v345,
                                      &v356),
                         (appended & 0x80000000) == 0)
                     && (appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char **, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, *(unsigned __int16 *)(a1 + 280), 2, 1, &v344, &v356), (appended & 0x80000000) == 0)))
                  {
                    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(*(_QWORD *)(a1 + 56)
                                                                                            + 120))(a5, a6, *(unsigned __int16 *)(a1 + 280), v204);
                    if ((appended & 0x80000000) == 0)
                    {
                      if (!*v204)
                        continue;
                      appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
                      if ((appended & 0x80000000) == 0)
                      {
                        if ((unsigned __int16)v345 < (unsigned __int16)v354)
                          continue;
                        while (*v204)
                        {
                          appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
                          if ((appended & 0x80000000) != 0)
                            goto LABEL_444;
                          if (v357 != 17)
                            break;
                          DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(*(_QWORD *)(a1 + 56) + 120))(a5, a6, (unsigned __int16)*v204, v204);
                          if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                            goto LABEL_445;
                        }
                        appended = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a5, a6);
                        v204 = (_WORD *)(a1 + 280);
                        if ((appended & 0x80000000) == 0)
                          continue;
                      }
                    }
                  }
                }
                goto LABEL_444;
              }
              *(_WORD *)(a1 + 224) += v178;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"OOV_METHOD SPELLACRONYM %s", v205, v206, v207, *(_QWORD *)(a1 + 232));
              DepesLayersForWordAndPOS = oneword_TranscribeAcronym(a1, __s1, __src, (unsigned __int8 *)&v349, __dst);
              if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                goto LABEL_445;
              WORD2(v309) += v178;
              LODWORD(v309) = 1;
              v69 = v336;
              v91 = (uint64_t *)(a1 + 200);
              goto LABEL_218;
            }
            v309 = 0;
            v322 = 0;
            v318 = 0;
LABEL_397:
            if (v349 == 32)
              v280 = 0;
            else
              v280 = v349;
            v349 = v280;
            *(_BYTE *)(a1 + 272) = 0;
            *(_DWORD *)(a1 + 276) = 0;
            if (*(_DWORD *)(a1 + 2172) == 1 && (*(_DWORD *)(a1 + 2068) == 1 || !v322))
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s", v93, v280, v94, (uint64_t)"skipping crosstoken grammar");
              goto LABEL_445;
            }
            if (v318)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 248) + 1) = 0;
              *((_BYTE *)*v316 + 1) = 0;
            }
            else
            {
              appended = oneword_crosstoken(*(_QWORD *)a1, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 560), __s1, v280, v315, v337, __dst, *(const char **)(a1 + 2176), (uint64_t *)v332, v320, v319, (char **)(a1 + 184), v333, v91, v331, (uint64_t *)(a1 + 216),
                           (const char **)(a1 + 240),
                           (const char **)(a1 + 248),
                           v316,
                           (const char **)(a1 + 264));
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
              appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56)
                                                                                                 + 88))(a5, a6, v359, &v358);
              if ((appended & 0x80000000) != 0)
                goto LABEL_444;
            }
            appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v359, 0, 1, &v357, (char *)&v356 + 2);
            if ((appended & 0x80000000) == 0)
            {
              appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v359, 1, 1, (char *)&v355 + 2, (char *)&v356 + 2);
              if ((appended & 0x80000000) == 0)
              {
                if ((_DWORD)v309 && v357 != 4)
                  HIWORD(v355) = HIWORD(v355) - WORD2(v309) + *(_WORD *)(a1 + 224);
                appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, v358, 1, 1, (char *)&v355 + 2, &v356);
                if ((appended & 0x80000000) == 0)
                {
                  v357 = 9;
                  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, v358, 0, 1, &v357, &v356);
                  if ((appended & 0x80000000) == 0)
                  {
                    appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v69, 2, 1, &v355, (char *)&v356 + 2);
                    if ((appended & 0x80000000) == 0)
                    {
                      v281 = v355;
                      if ((_DWORD)v309)
                        v281 = v355 - WORD2(v309) + *(_WORD *)(a1 + 224);
                      LOWORD(v355) = v281 + WORD2(v309);
                      appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, v358, 2, 1, &v355, &v356);
                      if ((appended & 0x80000000) == 0)
                      {
                        v282 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 160);
                        v283 = v358;
                        v284 = cstdlib_strlen(*(const char **)(a1 + 240));
                        appended = v282(a5, a6, v283, 3, (unsigned __int16)(v284 + 1), *(_QWORD *)(a1 + 240), &v356);
                        if ((appended & 0x80000000) == 0)
                        {
                          v285 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 160);
                          v286 = v358;
                          v287 = cstdlib_strlen(*(const char **)(a1 + 248));
                          appended = v285(a5, a6, v286, 5, (unsigned __int16)(v287 + 1), *(_QWORD *)(a1 + 248), &v356);
                          if ((appended & 0x80000000) == 0)
                          {
                            v288 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 56) + 160);
                            v289 = v358;
                            v290 = cstdlib_strlen(*(const char **)(a1 + 256));
                            appended = v288(a5, a6, v289, 6, (unsigned __int16)(v290 + 1), *(_QWORD *)(a1 + 256), &v356);
                            if ((appended & 0x80000000) == 0)
                            {
                              if (v314 && !*(_DWORD *)(a1 + 2068) && v350 >= 2u)
                                v350 = ~v350;
                              appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 56) + 160))(a5, a6, v358, 7, 1, &v350, &v356);
                              if ((appended & 0x80000000) == 0)
                              {
                                if (*(_DWORD *)(a1 + 1204) && !cstdlib_strcmp(__dst, "normal"))
                                {
                                  cstdlib_strcpy(__dst, *(const char **)(a1 + 1208));
                                  for (j = 0; j != 3; ++j)
                                    __dst[j] = ssft_tolower(__dst[j]);
                                }
                                v292 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(*(_QWORD *)(a1 + 56) + 160);
                                v293 = v358;
                                v294 = cstdlib_strlen(__dst);
                                DepesLayersForWordAndPOS = v292(a5, a6, v293, 9, (unsigned __int16)(v294 + 1), __dst, &v356);
                                if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                                  goto LABEL_445;
                                if (v322)
                                {
                                  v295 = v362;
                                  do
                                  {
                                    v297 = *v295++;
                                    v296 = v297;
                                    if (*v323 == v297)
                                    {
                                      DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 120))(a5, a6);
                                      if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                                        goto LABEL_445;
                                    }
                                    if (!a14 || a14 == 1 && (cstdlib_strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
                                    {
                                      DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 192))(a5, a6, v296);
                                      if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
                                        goto LABEL_445;
                                    }
                                  }
                                  while (--v322);
                                }
                                if (HIWORD(v355) != (unsigned __int16)v355
                                  || a14 && (a14 != 1 || !cstdlib_strstr(__s1, "latin") && *(_DWORD *)(a1 + 2068)))
                                {
                                  goto LABEL_445;
                                }
                                appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 56)
                                                                                               + 192))(a5, a6, v358);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_444:
            DepesLayersForWordAndPOS = appended;
            goto LABEL_445;
          }
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s L1: %s", v70, v71, v72, (uint64_t)__s);
          v75 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, const char *, _QWORD))(*(_QWORD *)(a1 + 104) + 120);
          v76 = *(const char **)(a1 + 160);
          v77 = cstdlib_strlen(v76);
          appended = v75(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, v76, v77);
          if ((appended & 0x80000000) != 0)
            goto LABEL_444;
          if (cstdlib_strcmp(__s1, "normal") && cstdlib_strlen(__s1) + v338 + 2 <= 0x7F)
          {
            cstdlib_strcat(__s, "_");
            cstdlib_strcat(__s, __s1);
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s) & 0x80000000) != 0)
          {
            __s[v338] = 0;
            appended = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 104) + 80))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __s);
            if ((appended & 0x80000000) != 0)
              goto LABEL_444;
          }
          DepesLayersForWordAndPOS = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 104) + 128))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0, &__src, &v351);
          if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
            goto LABEL_445;
          __src[v351] = 0;
          v78 = cstdlib_strlen(__src);
          v79 = cstdlib_strlen(*(const char **)(a1 + 160));
          v80 = count_inserted_oneword_bytes(__src);
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 5, 0, (uint64_t)"%s O1: %s", v81, v82, v83, (uint64_t)__s);
          if (v351 <= 0x7FuLL)
          {
            v314 = a15;
            v84 = *(char **)(a1 + 232);
            goto LABEL_148;
          }
          v84 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 232), v351 + 1);
          if (v84)
          {
            v314 = a15;
            *(_QWORD *)(a1 + 232) = v84;
LABEL_148:
            v92 = (__int16)(v78 - (v80 + v79)) & ~((__int16)(v78 - (v80 + v79)) >> 31);
            cstdlib_strcpy(v84, __src);
            v95 = v351;
            v69 = v336;
            v90 = v335;
            v91 = (uint64_t *)(a1 + 200);
            goto LABEL_149;
          }
LABEL_394:
          DepesLayersForWordAndPOS = 2310021130;
          goto LABEL_395;
        }
        v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v358, 1, 1, (char *)&v355 + 2, (char *)&v356 + 2);
        if ((v73 & 0x80000000) == 0)
        {
          DepesLayersForWordAndPOS = 2310021130;
          v85 = HIWORD(v355) - v49;
          if ((int)v85 >= 1
            && !dynamic_strncat(v332, &(*a3)[v49 + *(__int16 *)(a1 + 224)], v85, v333, *(uint64_t **)(*(_QWORD *)a1 + 8))|| *(_DWORD *)(a1 + 292) && !dynamic_strcat(v332, "+", (size_t *)v333, *(uint64_t **)(*(_QWORD *)a1 + 8)))
          {
            goto LABEL_445;
          }
          v49 = HIWORD(v355);
          v69 = v336;
          goto LABEL_121;
        }
      }
      DepesLayersForWordAndPOS = v73;
      goto LABEL_445;
    }
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, (unsigned __int16)v57, 0, 1, &v357, (char *)&v356 + 2);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    if (!v357)
    {
      if (v56)
      {
        v56 = 0;
        goto LABEL_109;
      }
      appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v358, 1, 1, (char *)&v355 + 2, (char *)&v356 + 2);
      if ((appended & 0x80000000) != 0)
        goto LABEL_444;
      DepesLayersForWordAndPOS = 2310021130;
      v68 = HIWORD(v355) - v49;
      if ((int)v68 >= 1
        && !dynamic_strncat(v332, &(*a3)[v49 + *(__int16 *)(a1 + 224)], v68, v333, *(uint64_t **)(*(_QWORD *)a1 + 8))
        || *(_DWORD *)(a1 + 292) && !dynamic_strcat(v332, "+", (size_t *)v333, *(uint64_t **)(*(_QWORD *)a1 + 8)))
      {
        goto LABEL_445;
      }
      v56 = 0;
      v49 = HIWORD(v355);
LABEL_109:
      DepesLayersForWordAndPOS = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a5, a6, v358, &v358);
      if ((DepesLayersForWordAndPOS & 0x80000000) != 0)
        goto LABEL_445;
      goto LABEL_49;
    }
    if (*(_DWORD *)(a1 + 276) || v357 != 8 && v357 != 4)
      goto LABEL_108;
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v358, 1, 1, (char *)&v355 + 2, (char *)&v356 + 2);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v358, 2, 1, &v355, (char *)&v356 + 2);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a1 + 56) + 168))(a5, a6, v358, 7, 1, &v350, (char *)&v356 + 2);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    if (a15 && !*(_DWORD *)(a1 + 2068))
      v350 = ~v350;
    if ((unsigned __int16)v355 != v49)
      break;
    if (!v54 || *(_DWORD *)(a1 + 2192))
      goto LABEL_108;
    if (v350 >= v55)
    {
      if (!a14 || a14 == 1 && (cstdlib_strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
      {
        appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 56) + 192))(a5, a6, (unsigned __int16)v362[v54 - 1]);
        if ((appended & 0x80000000) != 0)
          goto LABEL_444;
      }
      v65 = (v54 - 1);
      v66 = (unsigned __int16)v362[v65];
      v67 = v358;
      if (v359 == v66)
        v359 = v358;
      if (*v323 == v66)
        *v323 = v358;
      v362[v65] = v67;
      if (a15 && !*(_DWORD *)(a1 + 2068))
        v55 = v350;
LABEL_108:
      v56 = 1;
      goto LABEL_109;
    }
    v58 = v358;
    appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a5, a6, v358, &v358);
    if ((appended & 0x80000000) != 0)
      goto LABEL_444;
    if (!a14 || a14 == 1 && (cstdlib_strstr(__s1, "latin") || !*(_DWORD *)(a1 + 2068)))
    {
      appended = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 192))(a5, a6, v58);
      if ((appended & 0x80000000) != 0)
        goto LABEL_444;
    }
    if (a15)
    {
      if (!*(_DWORD *)(a1 + 2068))
        v350 = v55;
    }
    v57 = v358;
    v56 = 1;
  }
  DepesLayersForWordAndPOS = 2310021130;
  if ((v54 & 0x80) != 0)
  {
    DepesLayersForWordAndPOS = 2310021632;
    goto LABEL_445;
  }
  v55 = v350;
  v362[v54] = v358;
  v59 = HIWORD(v355) - v49;
  if ((int)v59 < 1
    || dynamic_strncat(v332, &(*a3)[v49 + *(__int16 *)(a1 + 224)], v59, v333, *(uint64_t **)(*(_QWORD *)a1 + 8)))
  {
    v60 = v324;
    if (v329 + 2 > 100 * v324)
      v60 = v324 + 1;
    v324 = v60;
    v61 = v321 + 100 * v60;
    if (v61 > *(unsigned __int16 *)v333)
    {
      v62 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 160), v321 + 100 * v60);
      if (v62)
      {
        *v332 = (const char *)v62;
        *v333 = v61;
        goto LABEL_87;
      }
LABEL_395:
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_ONEWORD", 34000, 0, v36, v37, v38, v39, v299);
      goto LABEL_445;
    }
LABEL_87:
    if (v61 > *(unsigned __int16 *)v328)
    {
      v63 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 168), v61);
      if (!v63)
        goto LABEL_395;
      *v320 = v63;
      *v328 = v61;
    }
    if (v61 > *(unsigned __int16 *)v331)
    {
      v64 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 176), v61);
      if (!v64)
        goto LABEL_395;
      *v319 = v64;
      *v331 = v61;
    }
    if (dynamic_strcat(v332, "◄", (size_t *)v333, *(uint64_t **)(*(_QWORD *)a1 + 8))
      && dynamic_strncat(v332, &(*a3)[HIWORD(v355) + *(__int16 *)(a1 + 224)], (unsigned __int16)v355 - (unint64_t)HIWORD(v355), v333, *(uint64_t **)(*(_QWORD *)a1 + 8))&& dynamic_strcat(v332, "◄", (size_t *)v333, *(uint64_t **)(*(_QWORD *)a1 + 8)))
    {
      ++v54;
      v329 += 2;
      v56 = 1;
      v49 = v355;
      goto LABEL_109;
    }
  }
LABEL_445:
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v340);
  return DepesLayersForWordAndPOS;
}

uint64_t oneword_joinTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int a6)
{
  int v8;
  uint64_t v12;
  uint64_t result;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned __int16 v28;

  v8 = a4;
  v28 = a4;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v12 = *a5;
  v21 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, a4, 1, 1, &v21, (char *)&v26 + 2);
  if ((result & 0x80000000) != 0)
    return result;
  v22 = v21;
  if (v8)
  {
    while (1)
    {
      v14 = v8;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 136))(a2, a3, (unsigned __int16)v8, &v28);
      if ((result & 0x80000000) != 0)
        return result;
      if (!v28)
        goto LABEL_10;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168))(a2, a3);
      if ((result & 0x80000000) != 0)
        return result;
      if (v22 == v21)
      {
        LOWORD(v8) = v28;
        if (v28)
          continue;
      }
      goto LABEL_10;
    }
  }
  v14 = 0;
LABEL_10:
  v28 = v14;
  if ((_DWORD)v12 == v14)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 168))(a2, a3, v12, 0, 1, &v27, (char *)&v26 + 2);
    if ((result & 0x80000000) == 0 && v27 == 8)
    {
      v27 = 9;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                + 160))(a2, a3, v28, 0, 1, &v27, &v26);
    }
    return result;
  }
  LOWORD(v15) = 0;
  v23 = v14;
  while (1)
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 168);
    if (v23 == (_DWORD)v12)
      break;
    result = v16(a2, a3);
    if ((result & 0x80000000) != 0)
      return result;
    if (v27 == 8 || v27 == 4)
    {
      if ((_WORD)v15)
      {
        if ((unsigned __int16)v25 == HIWORD(v24))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 56) + 192))(a2, a3, (unsigned __int16)v15);
          if ((result & 0x80000000) != 0)
            return result;
          v18 = v23;
          if (*(unsigned __int16 *)(a1 + 280) == (unsigned __int16)v15)
            *(_WORD *)(a1 + 280) = v23;
          v27 = 9;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v18, 0, 1, &v27, &v26);
          if ((result & 0x80000000) != 0)
            return result;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v23, 1, 1, (char *)&v25 + 2, &v26);
          if ((result & 0x80000000) != 0)
            return result;
          if (a6)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v23, 3, 1, "", &v26);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
        else
        {
          v27 = 9;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v15, 0, 1, &v27, &v26);
          if ((result & 0x80000000) != 0)
            return result;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v23, 0, 1, &v27, &v26);
          if ((result & 0x80000000) != 0)
            return result;
          HIWORD(v25) = HIWORD(v24);
        }
        LOWORD(v25) = v24;
        LOWORD(v15) = v23;
      }
      else
      {
        v15 = v23;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 1, 1, (char *)&v25 + 2, (char *)&v26 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v15, 2, 1, &v25, (char *)&v26 + 2);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 56) + 120))(a2, a3, v23, &v23);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 1, 1, (char *)&v24 + 2, (char *)&v26 + 2);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 2, 1, &v24, (char *)&v26 + 2);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 0, 1, &v27, (char *)&v26 + 2);
          if ((result & 0x80000000) == 0)
            continue;
        }
      }
    }
    return result;
  }
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))v16)(a2, a3, v12, 0, 1, &v27, (char *)&v26 + 2);
  if ((result & 0x80000000) == 0)
  {
    if (v27 != 8 && v27 != 4)
    {
      if (!(_WORD)v15)
        goto LABEL_67;
      v27 = 9;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 160))(a2, a3, (unsigned __int16)v15, 0, 1, &v27, &v26);
      goto LABEL_66;
    }
    if ((_WORD)v15)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 1, 1, (char *)&v24 + 2, (char *)&v26 + 2);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a1 + 56) + 168))(a2, a3, v23, 2, 1, &v24, (char *)&v26 + 2);
      if ((result & 0x80000000) != 0)
        return result;
      if ((unsigned __int16)v25 == HIWORD(v24))
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 56) + 192))(a2, a3, (unsigned __int16)v15);
        if ((result & 0x80000000) != 0)
          return result;
        v20 = v23;
        if (*(unsigned __int16 *)(a1 + 280) == (unsigned __int16)v15)
          *(_WORD *)(a1 + 280) = v23;
        v27 = 9;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v20, 0, 1, &v27, &v26);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v23, 1, 1, (char *)&v25 + 2, &v26);
        if ((result & 0x80000000) != 0)
          return result;
        if (!a6)
        {
LABEL_67:
          *a5 = v23;
          return result;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(*(_QWORD *)(a1 + 56) + 160))(a2, a3, v23, 3, 1, "", &v26);
LABEL_66:
        if ((result & 0x80000000) != 0)
          return result;
        goto LABEL_67;
      }
      v27 = 9;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                  + 160))(a2, a3, (unsigned __int16)v15, 0, 1, &v27, &v26);
      if ((result & 0x80000000) != 0)
        return result;
    }
    else
    {
      v27 = 9;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a1 + 56)
                                                                                                + 160))(a2, a3, v23, 0, 1, &v27, &v26);
    goto LABEL_66;
  }
  return result;
}

uint64_t compare_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 - *a1;
}

uint64_t count_inserted_oneword_bytes(const char *a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  size_t v6;
  size_t v7;

  if (a1 && cstdlib_strlen(a1) && (v2 = cstdlib_strlen(a1)) != 0)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = cstdlib_strlen("↕");
      if (!cstdlib_strncmp(&a1[(unsigned __int16)v5], "↕", v6))
        v4 += cstdlib_strlen("↕");
      v7 = cstdlib_strlen("§");
      if (!cstdlib_strncmp(&a1[(unsigned __int16)v5], "§", v7))
        v4 += cstdlib_strlen("§");
      v5 += utf8_determineUTF8CharLength(a1[(unsigned __int16)v5]);
    }
    while ((unsigned __int16)v5 < v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  return (unsigned __int16)v4;
}

uint64_t printNode(int a1, const char **a2, char *a3, unsigned __int16 *a4, _QWORD *a5, uint64_t a6, unsigned __int16 *a7, int a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  if (!a1)
    return 0;
  sprintf(a3, "[%3d] ", a8);
  v14 = add2Str(*(_QWORD *)a6, a2, a4, a3);
  if ((v14 & 0x80000000) != 0)
    return v14;
  v15 = *((_DWORD *)a7 + 1);
  if (v15 == 2)
  {
    v16 = *(_QWORD *)a6;
    v17 = "(T) ";
  }
  else
  {
    if (v15 != 1)
      goto LABEL_9;
    v16 = *(_QWORD *)a6;
    v17 = "(S) ";
  }
  v14 = add2Str(v16, a2, a4, v17);
  if ((v14 & 0x80000000) != 0)
    return v14;
LABEL_9:
  v14 = add2Str(*(_QWORD *)a6, a2, a4, a3);
  if ((v14 & 0x80000000) != 0)
    return v14;
  sprintf(a3, "NODE <%3d,%3d > ", *a7, a7[1]);
  v18 = add2Str(*(_QWORD *)a6, a2, a4, a3);
  if ((v18 & 0x80000000) == 0)
  {
    v19 = *a7;
    if (v19 < a7[1])
    {
      v20 = 224 * v19;
      do
      {
        v14 = add2Str(*(_QWORD *)a6, a2, a4, *(char **)(*(_QWORD *)(*a5 + v20 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)));
        if ((v14 & 0x80000000) != 0)
          return v14;
        if (*(unsigned __int8 *)(*a5 + v20 + 72) != 255)
        {
          sprintf(a3, "_%d", *(unsigned __int8 *)(*a5 + v20 + 72));
          v14 = add2Str(*(_QWORD *)a6, a2, a4, a3);
          if ((v14 & 0x80000000) != 0)
            return v14;
        }
        v18 = add2Str(*(_QWORD *)a6, a2, a4, " ");
        if ((v18 & 0x80000000) != 0)
          return v18;
        ++v19;
        v20 += 224;
      }
      while (v19 < a7[1]);
    }
    if (!FLOATSUR_GT_INT(a7 + 4, 0, 0)
      || (sprintf(a3, "phraseWeight=%d.%d ", a7[4], a7[5]),
          v18 = add2Str(*(_QWORD *)a6, a2, a4, a3),
          (v18 & 0x80000000) == 0))
    {
      if (!FLOATSUR_GT_INT(a7 + 6, 0, 0)
        || (sprintf(a3, "bndWeight=%d.%d ", a7[6], a7[7]),
            v18 = add2Str(*(_QWORD *)a6, a2, a4, a3),
            (v18 & 0x80000000) == 0))
      {
        if (!FLOATSUR_GT_INT(a7 + 8, 0, 0)
          || (sprintf(a3, "bndValue=%d.%d ", a7[8], a7[9]),
              v18 = add2Str(*(_QWORD *)a6, a2, a4, a3),
              (v18 & 0x80000000) == 0))
        {
          v24 = "bndType=U ";
          switch(*((_DWORD *)a7 + 5))
          {
            case 0:
              goto LABEL_31;
            case 1:
              goto LABEL_29;
            case 3:
              v24 = "bndType=W ";
              goto LABEL_29;
            case 4:
              v24 = "bndType=S ";
LABEL_29:
              cstdlib_strcpy(a3, v24);
              break;
            default:
              break;
          }
          v18 = add2Str(*(_QWORD *)a6, a2, a4, a3);
          if ((v18 & 0x80000000) == 0)
          {
LABEL_31:
            if (*((_DWORD *)a7 + 6) != 1
              || (sprintf(a3, "bProcessed=%d ", 1), v18 = add2Str(*(_QWORD *)a6, a2, a4, a3), (v18 & 0x80000000) == 0))
            {
              if (*((_DWORD *)a7 + 7) != 1
                || (sprintf(a3, "bBndBefore=%d ", 1), v18 = add2Str(*(_QWORD *)a6, a2, a4, a3), (v18 & 0x80000000) == 0))
              {
                log_OutText(*(_QWORD *)(*(_QWORD *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a2);
                cstdlib_strcpy((char *)*a2, "");
              }
            }
          }
        }
      }
    }
  }
  return v18;
}

uint64_t printLevel(uint64_t result, const char **a2, char *a3, unsigned __int16 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  unint64_t v16;

  if ((_DWORD)result)
  {
    v14 = result;
    log_OutText(*(_QWORD *)(*(_QWORD *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Level dump : %s", a6, a7, a8, a8);
    if (*(_WORD *)(a7 + 8))
    {
      v15 = 0;
      v16 = 0;
      do
      {
        result = printNode(v14, a2, a3, a4, a5, a6, (unsigned __int16 *)(*(_QWORD *)a7 + v15), (unsigned __int16)v16);
        if ((result & 0x80000000) != 0)
          break;
        ++v16;
        v15 += 32;
      }
      while (v16 < *(unsigned __int16 *)(a7 + 8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t printAsString(int a1, char **a2, char *a3, unsigned __int16 *a4, _QWORD *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const char **v27;
  unsigned __int16 *v28;
  char *v29;

  if (!a1)
    return 0;
  cstdlib_strcpy(*a2, "");
  if (*((_WORD *)a7 + 4))
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *a7;
      v20 = (unsigned __int16 *)(*a7 + 32 * v17);
      v21 = *v20;
      if (v21 < v20[1])
      {
        v22 = 224 * v21;
        do
        {
          v23 = *a5 + v22;
          if (!*(_DWORD *)(v23 + 220))
          {
            v24 = add2Str(*(_QWORD *)a6, (const char **)a2, a4, *(char **)(*(_QWORD *)(v23 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)));
            if ((v24 & 0x80000000) != 0)
              return v24;
            if (*(unsigned __int8 *)(*a5 + v22 + 72) != 255)
            {
              sprintf(a3, "_%d", *(unsigned __int8 *)(*a5 + v22 + 72));
              v24 = add2Str(*(_QWORD *)a6, (const char **)a2, a4, a3);
              if ((v24 & 0x80000000) != 0)
                return v24;
            }
            v18 = add2Str(*(_QWORD *)a6, (const char **)a2, a4, " ");
            if ((v18 & 0x80000000) != 0)
              return v18;
            v19 = *a7;
          }
          ++v21;
          v22 += 224;
        }
        while (v21 < *(unsigned __int16 *)(v19 + 32 * v17 + 2));
      }
      v25 = *(_DWORD *)(v19 + 32 * v17 + 20);
      if (v25 == 4)
        break;
      if (v25 == 3)
      {
        v26 = *(_QWORD *)a6;
        v27 = (const char **)a2;
        v28 = a4;
        v29 = "| ";
        goto LABEL_17;
      }
LABEL_18:
      if (++v17 >= (unint64_t)*((unsigned __int16 *)a7 + 4))
        goto LABEL_22;
    }
    v26 = *(_QWORD *)a6;
    v27 = (const char **)a2;
    v28 = a4;
    v29 = "|| ";
LABEL_17:
    v18 = add2Str(v26, v27, v28, v29);
    if ((v18 & 0x80000000) != 0)
      return v18;
    goto LABEL_18;
  }
  v18 = 0;
LABEL_22:
  log_OutText(*(_QWORD *)(*(_QWORD *)a6 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s%s", v14, v15, v16, a8);
  cstdlib_strcpy(*a2, "");
  return v18;
}

unsigned __int16 *removeNode(unsigned __int16 *result, unsigned int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int v4;

  v2 = result;
  v3 = a2 + 1;
  v4 = result[4];
  if (v4 != (_DWORD)v3)
  {
    result = (unsigned __int16 *)cstdlib_memmove((void *)(*(_QWORD *)result + 32 * a2), (const void *)(*(_QWORD *)result + 32 * v3), 32 * (v4 - (int)v3));
    LOWORD(v4) = v2[4];
  }
  v2[4] = v4 - 1;
  return result;
}

uint64_t addNode(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, int a5, unsigned int a6)
{
  uint64_t NodeMem;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  NodeMem = getNodeMem(a1, a6, a2, 1u);
  if ((NodeMem & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)a2 + 32 * *(unsigned __int16 *)(a2 + 8);
    *(_WORD *)v11 = a3;
    *(_WORD *)(v11 + 2) = a4;
    *(_DWORD *)(v11 + 4) = a5;
    FLOATSUR_SET_INT((_WORD *)(v11 + 8), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(*(_QWORD *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) + 12), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(*(_QWORD *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) + 16), 0, 0);
    v12 = *(unsigned __int16 *)(a2 + 8);
    v13 = *(_QWORD *)a2 + 32 * v12;
    *(_QWORD *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 20) = 0;
    *(_WORD *)(a2 + 8) = v12 + 1;
  }
  return NodeMem;
}

uint64_t getNodeMem(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  unsigned int v17;

  if (!*(_QWORD *)a3)
  {
    if (a4 <= a2)
      v13 = 0;
    else
      v13 = a4;
    v14 = v13 + a2;
    v15 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (32 * (unsigned __int16)(v13 + a2)) | 1);
    *(_QWORD *)a3 = v15;
    if (v15)
    {
      v12 = 0;
      *(_WORD *)(a3 + 10) = v14;
      return v12;
    }
LABEL_11:
    v12 = 2315264010;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v8, v9, v10, v11, v17);
    return v12;
  }
  v6 = *(unsigned __int16 *)(a3 + 10);
  if (*(unsigned __int16 *)(a3 + 8) + a4 <= v6)
    return 0;
  v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a3, 32 * v6 + 321);
  if (!v7)
    goto LABEL_11;
  v12 = 0;
  *(_QWORD *)a3 = v7;
  *(_WORD *)(a3 + 10) += 10;
  return v12;
}

uint64_t addNewNode(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  uint64_t NodeMem;

  NodeMem = getNodeMem(a1, a4, a2, 1u);
  if ((NodeMem & 0x80000000) == 0)
  {
    cstdlib_memcpy((void *)(*(_QWORD *)a2 + 32 * *(unsigned __int16 *)(a2 + 8)), a3, 0x20uLL);
    ++*(_WORD *)(a2 + 8);
  }
  return NodeMem;
}

uint64_t addLevel(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t NodeMem;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  NodeMem = getNodeMem(a1, a4, a2, *(unsigned __int16 *)(a3 + 8));
  if ((NodeMem & 0x80000000) == 0)
  {
    v7 = *(unsigned __int16 *)(a2 + 8);
    LOWORD(v8) = *(_WORD *)(a3 + 8);
    if ((_WORD)v8)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        cstdlib_memcpy((void *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v7), (const void *)(*(_QWORD *)a3 + v9), 0x20uLL);
        ++v10;
        ++v7;
        v8 = *(unsigned __int16 *)(a3 + 8);
        v9 += 32;
      }
      while (v10 < v8);
      LOWORD(v7) = *(_WORD *)(a2 + 8);
    }
    *(_WORD *)(a2 + 8) = v7 + v8;
  }
  return NodeMem;
}

uint64_t createLevel0ProsodicStructure(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO createLevel0ProsodicStructure()", a6, a7, a8, 0);
  v27 = 0;
  v12 = a1 + 336;
  LOWORD(v13) = a1[340];
  if ((_WORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = a1 + 15;
    v17 = a1 + 16;
    do
    {
      v18 = v15;
      v19 = *(_QWORD *)(*v12 + 224 * v15 + 56);
      if (v19)
      {
        if (*(_DWORD *)(v19 + 32 * *v16) == 1)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get phrasing for token (%d,%d)", v9, v10, v11, v14);
          result = getPhrasingForToken((uint64_t *)a1, (uint64_t)&v27, v15);
          if ((result & 0x80000000) != 0)
            return result;
          result = addLevel(*(_QWORD *)a1, (uint64_t)(a1 + 360), (uint64_t)&v27, (unsigned __int16)a1[340]);
          if ((result & 0x80000000) != 0)
            return result;
          v21 = a1 + 15;
          if (v27)
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v27);
            v27 = 0;
            LODWORD(v28) = 0;
            v21 = a1 + 15;
          }
          goto LABEL_11;
        }
        v22 = *v17;
        if (*(_DWORD *)(v19 + 32 * v22) == 1)
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"add syntactic node (%d,%d)", v9, v10, v11, *(unsigned __int16 *)(v19 + 32 * v22 + 8));
          v23 = *(_QWORD *)(*((_QWORD *)a1 + 84) + 224 * v15 + 56) + 32 * (unsigned __int16)a1[16];
          result = addNode(*(_QWORD *)a1, (uint64_t)(a1 + 360), *(_WORD *)(v23 + 8), *(_WORD *)(v23 + 10) + 1, 1, (unsigned __int16)a1[340]);
          v21 = a1 + 16;
          if ((result & 0x80000000) != 0)
            return result;
LABEL_11:
          v15 = *(_WORD *)(*(_QWORD *)(*v12 + 224 * v15 + 56) + 32 * *v21 + 10) + 1;
          goto LABEL_21;
        }
      }
      v24 = v15;
      if (v15 < (unsigned __int16)v13)
      {
        v25 = (uint64_t *)(*v12 + 224 * v15 + 56);
        while (1)
        {
          v26 = *v25;
          if (*v25)
          {
            if (*(_DWORD *)(v26 + 32 * *v16) == 1 || *(_DWORD *)(v26 + 32 * *v17) == 1)
              break;
          }
          ++v18;
          v25 += 28;
          if ((unsigned __int16)v13 == v18)
          {
            v15 = v13;
            goto LABEL_20;
          }
        }
        v15 = v18;
      }
LABEL_20:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"handle in between node (%d,%d)", v9, v10, v11, v14);
      result = addNode(*(_QWORD *)a1, (uint64_t)(a1 + 360), v24, v15, 1, (unsigned __int16)a1[340]);
      if ((result & 0x80000000) != 0)
        return result;
LABEL_21:
      v14 = v15;
      v13 = (unsigned __int16)a1[340];
    }
    while (v15 < v13);
  }
  return printLevel(*((unsigned int *)a1 + 277), (const char **)a1 + 136, *((char **)a1 + 137), a1 + 552, (_QWORD *)a1 + 84, (uint64_t)(a1 + 4), (uint64_t)(a1 + 360), (uint64_t)"LEVEL0");
}

uint64_t checkStructure(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *i;
  uint64_t v16;
  uint64_t v17;

  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO checkStructure()", a6, a7, a8, 0);
  v13 = *((unsigned __int16 *)a2 + 4);
  if (!*((_WORD *)a2 + 4))
    return 0;
  v14 = 0;
  for (i = *a2; ; i += 16)
  {
    v16 = v14 + 1;
    if (v14 + 1 < v13 && i[1] != i[16])
      break;
    if (*((_DWORD *)i + 1) == 1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 224 * *i + 56);
      if (!v17 || !*(_DWORD *)(v17 + 32 * *(unsigned __int16 *)(a1 + 32)))
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING : wordindex=%d starts node %d but syntactic phrase doesnt start here", v10, v11, v12, *i);
        return 0;
      }
    }
    ++v14;
    if (v13 == v16)
      return 0;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nodeindex=%d and %d do not follow in sequence", v10, v11, v12, v14);
  return 2315264000;
}

uint64_t createLevel1ProsodicStructure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned __int16 v39;
  const char **v40;
  uint64_t v41;
  _QWORD v42[2];
  __int128 __b;
  __int128 v44;

  __b = 0u;
  v44 = 0u;
  memset(v42, 0, 12);
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO createLevel1ProsodicStructure()", a6, a7, a8, 0);
  if (*(_WORD *)(a1 + 728))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v39 = 0;
    v40 = (const char **)(a1 + 1088);
    v15 = a1 + 736;
    v16 = "FE_PHRASING";
    while (1)
    {
      v17 = v14;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"processing node %d", v9, v10, v11, v13);
      result = printNode(*(_DWORD *)(a1 + 1108), v40, *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, (unsigned __int16 *)(*(_QWORD *)(a1 + 720) + 32 * v12), (unsigned __int16)v12);
      if ((result & 0x80000000) != 0)
        break;
      cstdlib_memset(&__b, 0, 0x20uLL);
      v14 = v17;
      LOWORD(__b) = v17;
      v19 = *(_QWORD *)(a1 + 720);
      v20 = v19 + 32 * v12;
      v22 = *(_DWORD *)(v20 + 4);
      v21 = (_DWORD *)(v20 + 4);
      WORD1(__b) = *((_WORD *)v21 - 1);
      DWORD1(__b) = v22;
      DWORD1(v44) = 1;
      LODWORD(v13) = v13 + 1;
      if ((_DWORD)v13 != *(unsigned __int16 *)(a1 + 728))
      {
        if (*v21 == 2)
        {
          if ((_DWORD)v17 != *(unsigned __int16 *)(v19 + 32 * v12))
          {
            cstdlib_memset(&__b, 0, 0x20uLL);
            LOWORD(__b) = v17;
            WORD1(__b) = *(_WORD *)(*(_QWORD *)(a1 + 720) + 32 * v12);
            DWORD1(__b) = 1;
            DWORD1(v44) = 1;
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  adding (S) node before this token node", v23, v24, v25, 0);
            result = printNode(*(_DWORD *)(a1 + 1108), v40, *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, (unsigned __int16 *)&__b, 0);
            if ((result & 0x80000000) != 0)
              return result;
            result = addNewNode(*(_QWORD *)a1, v15, &__b, *(unsigned __int16 *)(a1 + 728));
            if ((result & 0x80000000) != 0)
              return result;
            v19 = *(_QWORD *)(a1 + 720);
          }
          cstdlib_memcpy(&__b, (const void *)(v19 + 32 * v12), 0x20uLL);
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  token node - copy verbatim", v26, v27, v28, 0);
LABEL_20:
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  adding new node", v29, v30, v31, 0);
          result = printNode(*(_DWORD *)(a1 + 1108), v40, *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, (unsigned __int16 *)&__b, 0);
          if ((result & 0x80000000) != 0)
            return result;
          result = addNewNode(*(_QWORD *)a1, v15, &__b, *(unsigned __int16 *)(a1 + 728));
          if ((result & 0x80000000) != 0)
            return result;
          v14 = WORD1(__b);
          v39 = v13;
        }
        else
        {
          v38 = v13;
          v41 = 0;
          v13 = (uint64_t)v16;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v16, 5, 0, (uint64_t)"  apply general rules on WordIdx %d", v9, v10, v11, *(unsigned __int16 *)(v19 + 32 * v12));
          v32 = 0;
          v33 = 0;
          WORD2(v42[0]) = *(_WORD *)(*(_QWORD *)(a1 + 720) + 32 * v12);
          LODWORD(v42[0]) = 4;
          *(_DWORD *)((char *)v42 + 6) = 0;
          while (!HIDWORD(v41))
          {
            if (v33 >= *(unsigned __int16 *)(a1 + 168))
              goto LABEL_23;
            result = matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), v40, (unsigned __int16 *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, (_DWORD *)(*(_QWORD *)(a1 + 160) + v32), (uint64_t)v42, (int *)&v41 + 1, &v41);
            if ((result & 0x80000000) != 0)
              return result;
            if (HIDWORD(v41) == 1)
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), v13, 5, 0, (uint64_t)"  general rule %d FIRED -> set bndWeight = %d.%d", v29, v30, v31, v33);
            ++v33;
            v32 += 32;
          }
          if (HIDWORD(v41) == 1)
          {
            HIDWORD(__b) = v41;
            v15 = a1 + 736;
            v16 = (const char *)v13;
            LOWORD(v13) = v38;
            goto LABEL_20;
          }
LABEL_23:
          v16 = (const char *)v13;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), v13, 5, 0, (uint64_t)"  no rules fire", v29, v30, v31, 0);
          v15 = a1 + 736;
          v14 = v17;
        }
      }
      v13 = ++v12;
      if (v12 >= *(unsigned __int16 *)(a1 + 728))
        goto LABEL_27;
    }
  }
  else
  {
    LODWORD(v14) = 0;
    v39 = 0;
LABEL_27:
    if ((_DWORD)v14 == *(unsigned __int16 *)(a1 + 680))
      return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, a1 + 736, (uint64_t)"LEVEL1");
    v34 = v14;
    cstdlib_memset(&__b, 0, 0x20uLL);
    LOWORD(__b) = v34;
    WORD1(__b) = *(_WORD *)(a1 + 680);
    *(_QWORD *)((char *)&__b + 4) = *(_QWORD *)(*(_QWORD *)(a1 + 720) + 32 * v39 + 4);
    FLOATSUR_SET_INT((_WORD *)((unint64_t)&__b | 0xC), 50, 0);
    DWORD1(v44) = 1;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  adding end node", v35, v36, v37, 0);
    result = printNode(*(_DWORD *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, (unsigned __int16 *)&__b, 0);
    if ((result & 0x80000000) == 0)
    {
      result = addNewNode(*(_QWORD *)a1, a1 + 736, &__b, *(unsigned __int16 *)(a1 + 728));
      if ((result & 0x80000000) == 0)
        return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), a1 + 8, a1 + 736, (uint64_t)"LEVEL1");
    }
  }
  return result;
}

uint64_t setLevel1StructureWeights(uint64_t a1)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char **v11;
  unsigned __int16 *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _QWORD *v75;
  __int16 v76;
  _BOOL4 v77;
  unsigned __int16 *v78;
  const char **v79;
  int v80;
  int v81;
  __int128 v82;
  uint64_t v83;

  v83 = 0;
  v2 = (unsigned __int16 *)(a1 + 8);
  v82 = 0uLL;
  v77 = isStrSetting(a1 + 8, "PHRASE_WEIGHT_ALG", "AVERAGE");
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setLevel1StructureWeights(bApplyWeighting=%d)", v3, v4, v5, 0);
  v9 = (_QWORD *)(a1 + 736);
  if (!*(_WORD *)(a1 + 744))
    return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
  v10 = 0;
  v11 = (const char **)(a1 + 1088);
  v12 = (unsigned __int16 *)(a1 + 1104);
  while (1)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing node %d", v6, v7, v8, v10);
    result = printNode(*(_DWORD *)(a1 + 1108), v11, *(char **)(a1 + 1096), v12, (_QWORD *)(a1 + 672), (uint64_t)v2, (unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v10), (unsigned __int16)v10);
    if ((result & 0x80000000) != 0)
      return result;
    if (*(_DWORD *)(*v9 + 32 * v10 + 4) == 2)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip token node", v6, v7, v8, 0);
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 224 * *(unsigned __int16 *)(*v9 + 32 * v10) + 56);
      if (v14 && *(_DWORD *)(v14 + 32 * *(unsigned __int16 *)(a1 + 32)) == 1)
      {
        v78 = v12;
        v79 = v11;
        v81 = 0;
        v80 = 0;
        FLOATSUR_SET_INT(&v81, 0, 0);
        FLOATSUR_SET_INT(&v80, 0, 0);
        v18 = (unsigned __int16 *)(*v9 + 32 * v10);
        v19 = *v18;
        if (v19 < v18[1])
        {
          do
          {
            FLOATSUR_PLUS_INT(&v80, (unsigned __int16 *)&v80, *(_WORD *)(*(_QWORD *)(a1 + 672) + 224 * v19 + 24), 0);
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  word[%d] : nodeSyllableWeight=%d.%d (word[%d].nsyll=%d)", v20, v21, v22, v19);
            v23 = 0;
            v24 = 0;
            HIDWORD(v83) = 0;
            do
            {
              if (v24 >= *(unsigned __int16 *)(a1 + 216))
                break;
              WORD2(v82) = v19;
              LODWORD(v82) = 1;
              *(_DWORD *)((char *)&v82 + 6) = 0;
              result = matchMMAPREGEX2NUM_TRule(v2, a1 + 672, (unsigned __int16 *)(*(_QWORD *)(a1 + 208) + v23), (unsigned __int16 *)&v82, (int *)&v83 + 1, (unsigned __int16 *)&v81, v16, v17);
              if ((result & 0x80000000) != 0)
                return result;
              v25 = HIDWORD(v83);
              if (HIDWORD(v83) == 1)
              {
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  word[%d] : pos weight rule %d FIRED nodePOSWeight=%d.%d", v15, v16, v17, v19);
                v25 = HIDWORD(v83);
              }
              ++v24;
              v23 += 10;
            }
            while (!v25);
            ++v19;
          }
          while (v19 < *(unsigned __int16 *)(*v9 + 32 * v10 + 2));
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted nodePOSWeight = %d.%d", v15, v16, v17, (unsigned __int16)v81);
        if (v77)
          FLOATSUR_TIMES(&v81, (unsigned __int16 *)&v81, (unsigned __int16 *)(a1 + 200));
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted nodePOSWeight = %d.%d", v26, v27, v28, (unsigned __int16)v81);
        v32 = 0;
        v33 = 0;
        HIDWORD(v83) = 0;
        do
        {
          if (v33 >= *(unsigned __int16 *)(a1 + 240))
            break;
          matchMAPNUMNUM_TRule(*(_QWORD *)(a1 + 232) + v32, (unsigned __int16 *)&v80, (_DWORD *)&v83 + 1);
          v34 = HIDWORD(v83);
          if (HIDWORD(v83) == 1)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  syll weight rule %d FIRED nodeSyllableWeight=%d.%d", v29, v30, v31, v33);
            v34 = HIDWORD(v83);
          }
          ++v33;
          v32 += 12;
        }
        while (!v34);
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted nodeSyllableWeight = %d.%d", v29, v30, v31, (unsigned __int16)v80);
        if (v77)
          FLOATSUR_TIMES(&v80, (unsigned __int16 *)&v80, (unsigned __int16 *)(a1 + 224));
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted nodeSyllableWeight = %d.%d", v35, v36, v37, (unsigned __int16)v80);
        if (*(_WORD *)(a1 + 256))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  apply %d gen weight rules", v38, v39, v40, *(unsigned __int16 *)(a1 + 256));
          v41 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, (4 * *(unsigned __int16 *)(a1 + 256)) | 1);
          if (!v41)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v42, v38, v39, v40, v74);
            return 2315264010;
          }
          v43 = *(_QWORD *)(a1 + 736);
          v46 = (unsigned __int16 *)(v43 + 32 * v10);
          v44 = *v46;
          v45 = v46[1];
          LODWORD(v46) = *(unsigned __int16 *)(a1 + 256);
          if (v44 < v45)
          {
            v47 = *(unsigned __int16 *)(a1 + 256);
            v75 = v9;
            do
            {
              if (v47)
              {
                v48 = v41;
                v49 = 0;
                v76 = v44;
                while (2)
                {
                  HIDWORD(v83) = 0;
                  WORD2(v82) = v44;
                  LODWORD(v82) = 4;
                  *(_DWORD *)((char *)&v82 + 6) = 0;
                  v50 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 248) + 12 * v49 + 8);
                  v51 = 32 * v50;
                  do
                  {
                    if (v50 >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 248) + 12 * v49 + 10))
                      break;
                    if ((matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), v79, v78, *(char **)(a1 + 1096), (uint64_t)v2, a1 + 672, (_DWORD *)(*(_QWORD *)(a1 + 264) + v51), (uint64_t)&v82, (int *)&v83 + 1, &v83) & 0x80000000) != 0)
                    {
                      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v48);
                      v9 = v75;
                      return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
                    }
                    v52 = HIDWORD(v83);
                    if (HIDWORD(v83) == 1)
                    {
                      *(_DWORD *)(v48 + 4 * v49) = v83;
                      v52 = HIDWORD(v83);
                      if (HIDWORD(v83) == 1)
                      {
                        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  general weight rule %d FIRED genRuleValues[%d]=%d.%d", v38, v39, v40, v50);
                        v52 = HIDWORD(v83);
                      }
                    }
                    ++v50;
                    v51 += 32;
                  }
                  while (!v52);
                  v46 = (unsigned __int16 *)*(unsigned __int16 *)(a1 + 256);
                  ++v49;
                  LOWORD(v44) = v76;
                  if (v49 < (unint64_t)v46)
                    continue;
                  break;
                }
                v9 = v75;
                v43 = *v75;
                v47 = *(unsigned __int16 *)(a1 + 256);
                v41 = v48;
              }
              LOWORD(v44) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 672) + 224 * (unsigned __int16)v44 + 56)
                                     + 32 * *(unsigned __int16 *)(a1 + 32)
                                     + 10)
                          + 1;
            }
            while (*(unsigned __int16 *)(v43 + 32 * v10 + 2) > (unsigned __int16)v44);
          }
          v53 = v9;
          if ((_DWORD)v46)
          {
            v54 = 0;
            v55 = 4;
            v56 = v41;
            v57 = (unsigned __int16 *)v41;
            do
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  unweighted genRuleValues[%d]  = %d.%d", v38, v39, v40, v54);
              if (v77)
                FLOATSUR_TIMES(v57, v57, (unsigned __int16 *)(*(_QWORD *)(a1 + 248) + v55));
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted genRuleValues[%d]  = %d.%d", v58, v59, v60, v54++);
              v57 += 2;
              v55 += 12;
            }
            while (v54 < *(unsigned __int16 *)(a1 + 256));
          }
          else
          {
            v56 = v41;
          }
        }
        else
        {
          v53 = v9;
          v56 = 0;
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  compute final phraseweight = %d.%d", v38, v39, v40, *(unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v10 + 8));
        FLOATSUR_PLUS((_WORD *)&v82 + 6, (unsigned __int16 *)&v81, (unsigned __int16 *)&v80);
        v61 = (unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v10 + 8);
        FLOATSUR_PLUS(v61, v61, (unsigned __int16 *)&v82 + 6);
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add weighted nodePOSWeight(%d.%d) and nodeSyllableWeight(%d.%d) -> %d.%d", v62, v63, v64, (unsigned __int16)v81);
        if (*(_WORD *)(a1 + 256))
        {
          v68 = 0;
          v69 = (unsigned __int16 *)v56;
          do
          {
            v70 = (unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v10 + 8);
            FLOATSUR_PLUS(v70, v70, v69);
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add weighted genRuleValues[%d](%d.%d) -> %d.%d", v71, v72, v73, v68++);
            v69 += 2;
          }
          while (v68 < *(unsigned __int16 *)(a1 + 256));
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  final phraseweight = %d.%d", v65, v66, v67, *(unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v10 + 8));
        if (v56)
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v56);
        v9 = v53;
        v12 = v78;
        v11 = v79;
      }
    }
    if (++v10 >= (unint64_t)*(unsigned __int16 *)(a1 + 744))
      return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), (uint64_t)v2, (uint64_t)v9, (uint64_t)"AFTER SET PHRASEWEIGHT");
  }
}

uint64_t setLevel1Boundaries(uint64_t a1)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD *v14;
  unsigned __int16 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60[6];

  *(_DWORD *)v60 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v2 = (unsigned __int16 *)(a1 + 400);
  v54 = 0;
  v52 = (unsigned __int16 *)(a1 + 396);
  v53 = a1 + 8;
  FLOATSUR_PLUS((_WORD *)&v58 + 2, (unsigned __int16 *)(a1 + 396), (unsigned __int16 *)(a1 + 400));
  FLOATSUR_PLUS(v60, (unsigned __int16 *)(a1 + 392), (unsigned __int16 *)&v58 + 2);
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setLevel1Boundaries(threshold_bnd_val_weak=%d threshold_weak_frag=%d threshold_bnd_val_strong=%d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 380));
  getLowestBnd(a1, (unsigned __int16 *)&v59);
  v6 = (unsigned __int16)v59;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"START lowestBnd : node %d", v7, v8, v9, (unsigned __int16)v59);
  if (HIDWORD(v59) == 1
    && FLOATSUR_LT((unsigned __int16 *)(*(_QWORD *)(a1 + 736) + 32 * v6 + 12), (unsigned __int16 *)(a1 + 376)))
  {
    v13 = 0;
    v14 = (_QWORD *)(a1 + 736);
    v51 = (unsigned __int16 *)(a1 + 388);
    v15 = v6;
    while (1)
    {
      v16 = v15;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"LOOP[%d] lowestBnd : node %d (bndWeight=%d.%d)", v10, v11, v12, v13);
      FLOATSUR_SET((_DWORD *)&v56 + 1, (_DWORD *)(*(_QWORD *)(a1 + 736) + 32 * v6 + 8));
      FLOATSUR_SET_INT(&v56, 0, 0);
      v17 = v16 + 1;
      if (v17 < *(unsigned __int16 *)(a1 + 744))
        FLOATSUR_SET(&v56, (_DWORD *)(*v14 + 32 * v17 + 8));
      FLOATSUR_SET(&v54, (_DWORD *)(*(_QWORD *)(a1 + 736) + 32 * v6 + 12));
      FLOATSUR_TIMES((_WORD *)&v58 + 2, (unsigned __int16 *)&v56 + 2, (unsigned __int16 *)(a1 + 392));
      FLOATSUR_TIMES(&v58, (unsigned __int16 *)&v56, v52);
      FLOATSUR_TIMES((_WORD *)&v57 + 2, (unsigned __int16 *)&v54, v2);
      FLOATSUR_PLUS(&v57, (unsigned __int16 *)&v58 + 2, (unsigned __int16 *)&v58);
      FLOATSUR_PLUS(&v57, (unsigned __int16 *)&v57, (unsigned __int16 *)&v57 + 2);
      FLOATSUR_DIV((_WORD *)&v58 + 2, (unsigned __int16 *)&v57, v60);
      FLOATSUR_TIMES_INT(&v55, (unsigned __int16 *)&v58 + 2, 0xAu, 0);
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  weighted mean bndVal = %d.%d (thisphraseWeight=%d.%d thisBndWeight=%d.%d nextphraseWeight=%d.%d)", v18, v19, v20, (unsigned __int16)v55);
      if (!FLOATSUR_LT((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 380))
        && !FLOATSUR_LT((unsigned __int16 *)&v56 + 2, v51)
        && !FLOATSUR_LT((unsigned __int16 *)&v56, v51))
      {
        break;
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  [bnd_val < threshold_weak(%d.%d) or one thisphraseWeight or nextphraseWeight < threshold_weak_frag(%d.%d)] remove node (merge %d and %d)", v21, v22, v23, *(unsigned __int16 *)(a1 + 380));
      if ((_DWORD)v17 == *(unsigned __int16 *)(a1 + 744))
        goto LABEL_10;
      v27 = (_WORD *)(*v14 + 32 * v6);
      *(_WORD *)(*v14 + 32 * (v16 + 1)) = *v27;
      FLOATSUR_PLUS(v27 + 20, v27 + 20, v27 + 4);
      removeNode((unsigned __int16 *)(a1 + 736), v16);
LABEL_12:
      getLowestBnd(a1, (unsigned __int16 *)&v59);
      v6 = (unsigned __int16)v59;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"END LOOP lowestBnd : node %d", v28, v29, v30, (unsigned __int16)v59);
      if (HIDWORD(v59) != 1)
        goto LABEL_23;
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ITERATION %d", v31, v32, v33, v13);
      result = printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), v53, a1 + 736, (uint64_t)"ITER");
      if ((result & 0x80000000) != 0)
        return result;
      if (FLOATSUR_EQUAL_INT((unsigned __int16 *)(*v14 + 32 * v6 + 12), 0, 0))
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 736) + 32 * v6 + 24) = 1;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  NO CHANGE - marked node as processed", v35, v36, v37, 0);
      }
      ++v13;
      v38 = FLOATSUR_LT((unsigned __int16 *)(*v14 + 32 * v6 + 12), (unsigned __int16 *)(a1 + 376));
      v15 = v6;
      if (!v38)
        goto LABEL_23;
    }
    if (FLOATSUR_LT((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 384)))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set WEAK BND", v39, v40, v41, 0);
      v42 = *(_QWORD *)(a1 + 736) + 32 * v6;
      v43 = 3;
    }
    else
    {
      if (!FLOATSUR_GTOREQUAL((unsigned __int16 *)&v55, (unsigned __int16 *)(a1 + 384)))
      {
LABEL_10:
        *(_DWORD *)(*(_QWORD *)(a1 + 736) + 32 * v6 + 24) = 1;
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  NO CHANGE - marked node as processed", v24, v25, v26, 0);
        goto LABEL_12;
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set STRONG BND", v24, v25, v26, 0);
      v42 = *(_QWORD *)(a1 + 736) + 32 * v6;
      v43 = 4;
    }
    *(_DWORD *)(v42 + 20) = v43;
    *(_DWORD *)(v42 + 16) = v55;
    goto LABEL_10;
  }
LABEL_23:
  if (*(_WORD *)(a1 + 744))
  {
    v44 = 0;
    v45 = *(_QWORD *)(a1 + 736);
    v46 = 20;
    do
    {
      if (*(_DWORD *)(v45 + v46) <= 1u)
      {
        v47 = FLOATSUR_GT((unsigned __int16 *)(v45 + v46 - 8), (unsigned __int16 *)(a1 + 376));
        v45 = *(_QWORD *)(a1 + 736);
        if (v47)
        {
          *(_DWORD *)(v45 + v46) = 4;
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  set node %d STRONG BND", v48, v49, v50, v44);
          v45 = *(_QWORD *)(a1 + 736);
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 672) + 224 * *(unsigned __int16 *)(v45 + v46 - 18) - 151) = *(_DWORD *)(v45 + v46);
      ++v44;
      v46 += 32;
    }
    while (v44 < *(unsigned __int16 *)(a1 + 744));
  }
  return printLevel(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (_QWORD *)(a1 + 672), v53, a1 + 736, (uint64_t)"AFTER SET BOUNDARIES");
}

uint64_t getLowestBnd(uint64_t result, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a2 = 0;
  *((_DWORD *)a2 + 1) = 0;
  v2 = *(unsigned __int16 *)(result + 744);
  if (*(_WORD *)(result + 744))
  {
    v4 = result;
    v5 = 0;
    for (i = 24; *(_DWORD *)(*(_QWORD *)(result + 736) + i) == 1; i += 32)
    {
      if (v2 == ++v5)
        return result;
    }
    v7 = (unsigned __int16)v5;
    *a2 = v5;
    *((_DWORD *)a2 + 1) = 1;
    v8 = (unsigned __int16)v5;
    if (v2 > (unsigned __int16)v5)
    {
      v9 = i - 24;
      v8 = (unsigned __int16)v5;
      do
      {
        v10 = *(_QWORD *)(v4 + 736);
        if (*(_DWORD *)(v10 + v9 + 20) == 1)
        {
          if ((result = FLOATSUR_LT((unsigned __int16 *)(v10 + v9 + 12), (unsigned __int16 *)(v10 + 32 * *a2 + 12)),
                v11 = *(_QWORD *)(v4 + 736),
                (_DWORD)result)
            && !*(_DWORD *)(v11 + v9 + 24)
            || (result = FLOATSUR_LT_INT((unsigned __int16 *)(v11 + v9 + 12), 0, 0), (_DWORD)result))
          {
            v8 = (unsigned __int16)v5;
            *a2 = v5;
            *((_DWORD *)a2 + 1) = 1;
          }
        }
        ++v5;
        v2 = *(unsigned __int16 *)(v4 + 744);
        v9 += 32;
      }
      while (v5 < v2);
    }
    if (v8 == v7 && v8 < v2 && !*(_DWORD *)(*(_QWORD *)(v4 + 736) + i))
    {
      *a2 = v7;
      *((_DWORD *)a2 + 1) = 1;
    }
  }
  return result;
}

uint64_t getProsodicStructure(uint64_t a1)
{
  unsigned __int16 **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unsigned __int16 **)(a1 + 720);
  cstdlib_memset((void *)(a1 + 720), 0, 0x10uLL);
  cstdlib_memset((void *)(a1 + 736), 0, 0x10uLL);
  result = createLevel0ProsodicStructure((_WORD *)a1, v3, v4, v5, v6, v7, v8, v9);
  if ((result & 0x80000000) == 0)
  {
    result = checkStructure(a1, v2, v11, v12, v13, v14, v15, v16);
    if ((result & 0x80000000) == 0)
    {
      if (*(_QWORD *)(a1 + 928))
      {
        result = simplifiedTokenPhrasing(*(_QWORD *)a1, v2, (_QWORD *)(a1 + 672), (unsigned __int16 *)(a1 + 8));
        if ((result & 0x80000000) == 0)
          return threePassIgtreePhrasing(*(_QWORD *)a1, (uint64_t)v2, (uint64_t *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
      else if (*(_QWORD *)(a1 + 816))
      {
        result = simplifiedTokenPhrasing(*(_QWORD *)a1, v2, (_QWORD *)(a1 + 672), (unsigned __int16 *)(a1 + 8));
        if ((result & 0x80000000) == 0)
          return twoPassIgtreePhrasing(*(_QWORD *)a1, (uint64_t)v2, (_QWORD *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
      else if (*(_QWORD *)(a1 + 760))
      {
        result = simplifiedTokenPhrasing(*(_QWORD *)a1, v2, (_QWORD *)(a1 + 672), (unsigned __int16 *)(a1 + 8));
        if ((result & 0x80000000) == 0)
          return singlePassIgtreePhrasing(*(_QWORD *)a1, (uint64_t)v2, (_QWORD *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 752));
      }
      else
      {
        result = createLevel1ProsodicStructure(a1, v17, v18, v19, v20, v21, v22, v23);
        if ((result & 0x80000000) == 0)
        {
          result = checkStructure(a1, (unsigned __int16 **)(a1 + 736), v24, v25, v26, v27, v28, v29);
          if ((result & 0x80000000) == 0)
          {
            result = setLevel1StructureWeights(a1);
            if ((result & 0x80000000) == 0)
              return setLevel1Boundaries(a1);
          }
        }
      }
    }
  }
  return result;
}

void *freeProsodicStructure(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 90;
  v3 = a1[90];
  if (v3)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v3);
    a1[90] = 0;
  }
  v4 = a1[92];
  if (v4)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v4);
    a1[92] = 0;
  }
  return cstdlib_memset(v2, 0, 0x20uLL);
}

uint64_t getPwPredict(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, _WORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  int v22;
  BOOL v23;
  _WORD *v25;
  int v26;
  uint64_t v27;

  v7 = *a5;
  if ((_DWORD)result)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = result;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      v15 = v9;
      v17 = 0.0;
      do
      {
        v16 = a2 + 28 * (unsigned __int16)(v10 + v8);
        if (v17 < *(float *)(v16 + 4 * v13))
        {
          v17 = *(float *)(v16 + 4 * v13);
          v14 = v13;
        }
        ++v13;
      }
      while (v13 != 7);
      if (a3 > (unsigned __int16)v10 && v8 == *(unsigned __int16 *)(a4 + 2 * (unsigned __int16)v10))
      {
        v18 = 0;
        v14 = 0;
        v19 = v10 + 1;
        v20 = a2 + 28 * (unsigned __int16)(v10 + v11);
        v21 = 0.0;
        do
        {
          if (v21 < *(float *)(v20 + 4 * v18))
          {
            v21 = *(float *)(v20 + 4 * v18);
            v14 = v18;
          }
          ++v18;
        }
        while (v18 != 7);
        result = 0;
        v10 = v19;
      }
      else
      {
        result = 1;
      }
      v22 = *(_DWORD *)(a7 + 4 * v8);
      v23 = v22 == 1 || v14 == 0;
      if (v23 || v14 == 3)
        break;
      v25 = (_WORD *)(v7 + 2 * v8);
      *v25 = 0;
      if ((result & 1) == 0)
      {
        v26 = 1;
LABEL_30:
        *v25 = 1;
        v9 = (v15 + v26);
        goto LABEL_31;
      }
      v9 = v15;
LABEL_31:
      ++v8;
      ++v11;
      if (v8 == v12)
      {
        v27 = v12 - 1;
        goto LABEL_34;
      }
    }
    v9 = (v15 + 1);
    *(_WORD *)(v7 + 2 * v8) = 1;
    if (!v8)
      goto LABEL_31;
    if (v22 != 1)
      goto LABEL_31;
    v25 = (_WORD *)(v7 + 2 * (v8 - 1));
    result = (unsigned __int16)*v25;
    if (*v25)
      goto LABEL_31;
    v26 = 2;
    goto LABEL_30;
  }
  LOWORD(v9) = 0;
  v27 = -1;
LABEL_34:
  if (*(_WORD *)(v7 + 2 * v27) != 1)
  {
    LOWORD(v9) = v9 + 1;
    *(_WORD *)(v7 + 2 * v27) = 1;
  }
  *a6 = v9;
  return result;
}

uint64_t findLabel(uint64_t result, uint64_t a2, _WORD *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;

  v3 = 0;
  v4 = 0;
  v6 = 0.0;
  do
  {
    v5 = a2 + 28 * result;
    if (v6 < *(float *)(v5 + 4 * v3))
    {
      v6 = *(float *)(v5 + 4 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v3 != 7);
  *a3 = v4;
  return result;
}

uint64_t storeResult(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, _WORD *a7, uint64_t a8, unsigned __int8 a9, const char **a10)
{
  uint64_t v10;
  uint64_t v12;
  __int16 v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  char *v17;
  const char **v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int16 *v37;
  __int16 v38;
  uint64_t result;
  uint64_t v45;
  char v46;
  unsigned int v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v50 = *a6;
  if (!a3)
  {
LABEL_50:
    result = 0;
    *a6 = v50;
    return result;
  }
  v10 = a8;
  v12 = 0;
  v48 = 0;
  v13 = 0;
  v49 = 0;
  if (a9)
    v14 = a10 == 0;
  else
    v14 = 1;
  v15 = v14;
  v46 = v15;
  v45 = a3;
  v16 = a2 + 64;
  while (1)
  {
    if ((v46 & 1) != 0)
    {
LABEL_13:
      v20 = (_WORD *)(a4 + 2 * v12);
      v21 = (unsigned __int16)*v20;
      v22 = 1;
      if (*v20)
      {
        v23 = v50;
        v24 = v48;
        if (v21 == 1)
          goto LABEL_31;
        if (!*(_DWORD *)v10)
          goto LABEL_49;
        goto LABEL_16;
      }
      v23 = v50;
      v24 = v48;
    }
    else
    {
      v17 = *(char **)(a2 + 40 * v12);
      v19 = a9;
      v18 = a10;
      while (!cstdlib_strstr(v17, *v18))
      {
        ++v18;
        if (!--v19)
          goto LABEL_13;
      }
      v22 = 0;
      v20 = (_WORD *)(a4 + 2 * v12);
      v23 = v50;
      v24 = v48;
      if (*v20)
        goto LABEL_31;
      LOBYTE(v21) = 1;
    }
    if (!*(_DWORD *)v10 || v24 >= *(unsigned __int16 *)(v10 + 4))
    {
      if (!v22)
        goto LABEL_31;
LABEL_30:
      ++v13;
      goto LABEL_49;
    }
    if (*(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v24))
      LOBYTE(v21) = 1;
    if ((v21 & 1) == 0)
      goto LABEL_30;
    if ((v22 & 1) == 0)
      break;
LABEL_16:
    if (v24 < *(unsigned __int16 *)(v10 + 4)
      && *(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v24))
    {
      LOBYTE(v22) = 1;
      goto LABEL_31;
    }
LABEL_49:
    ++v12;
    v16 += 40;
    if (v12 == v45)
      goto LABEL_50;
  }
  LOBYTE(v22) = 0;
LABEL_31:
  v25 = v13 + 1;
  *(_WORD *)(v23 + 184 * v49 + 8) = v25;
  if (*(_DWORD *)v10
    && v24 < *(unsigned __int16 *)(v10 + 4)
    && *(_DWORD *)(a2 + 40 * v12 + 32) + 1 == *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v24))
  {
    if (!*v20)
    {
      v26 = heap_Realloc(*(uint64_t **)(a1 + 8), v23, 184 * (unsigned __int16)*a7 + 184);
      if (!v26)
        return 2315264010;
      v51 = v26;
      cstdlib_memset((void *)(v26 + 184 * (unsigned __int16)*a7), 0, 0xB8uLL);
      v23 = v51;
      ++*a7;
      *v20 = 1;
      v24 = v48;
    }
    ++v24;
  }
  v27 = (_DWORD *)(v23 + 184 * v49 + 72);
  v50 = v23;
  v48 = v24;
  if (*(_WORD *)(a5 + 2 * v12) == 1)
  {
    *v27 = 1;
  }
  else
  {
    *v27 = 0;
    if ((v22 & 1) == 0 && !*v20)
    {
      v28 = heap_Realloc(*(uint64_t **)(a1 + 8), v23, 184 * (unsigned __int16)*a7 + 184);
      if (!v28)
        return 2315264010;
      v50 = v28;
      cstdlib_memset((void *)(v28 + 184 * (unsigned __int16)*a7), 0, 0xB8uLL);
      ++*a7;
    }
  }
  v29 = v25;
  v30 = 2 * v25;
  v31 = heap_Alloc(*(_QWORD *)(a1 + 8), v30);
  v35 = (uint64_t *)(v50 + 184 * v49);
  *v35 = v31;
  if (v31)
  {
    *(_QWORD *)(v50 + 184 * v49 + 56) = "";
    if (v25)
    {
      v36 = 0;
      v37 = (__int16 *)(v16 - 40 * v29);
      do
      {
        v38 = *v37;
        v37 += 20;
        *(_WORD *)(*v35 + v36) = v38;
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw:%d , tid=%d", v32, v33, v34, v49);
        v36 += 2;
      }
      while (v30 != v36);
    }
    v13 = 0;
    ++v49;
    v10 = a8;
    goto LABEL_49;
  }
  return 2315264010;
}

uint64_t storePwResult(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  if (!a3)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *a5;
  v13 = a3;
  v14 = a2 + 64;
  v24 = a4;
  v25 = a3;
  while (*(_WORD *)(a4 + 2 * v8) != 1)
  {
    if (*(_WORD *)(a4 + 2 * v8))
    {
      if (!*(_DWORD *)a6)
        goto LABEL_22;
    }
    else if (!*(_DWORD *)a6
           || *(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v9
           && *(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(_QWORD *)(a6 + 8) + 4 * (unsigned __int16)v9))
    {
      ++v10;
      goto LABEL_22;
    }
    if (*(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v9
      && *(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(_QWORD *)(a6 + 8) + 4 * (unsigned __int16)v9))
    {
      break;
    }
LABEL_22:
    ++v8;
    v14 += 40;
    if (v8 == v13)
      return 0;
  }
  v27 = v9;
  v15 = v10 + 1;
  v16 = v11;
  v17 = (unsigned __int16)v11;
  v18 = v12 + 184 * (unsigned __int16)v11;
  *(_WORD *)(v18 + 8) = v15;
  v19 = v15;
  v20 = (_WORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 2 * v15);
  *(_QWORD *)v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v12 + 184 * v17 + 56) = "";
    if ((_DWORD)v19)
    {
      v21 = (__int16 *)(v14 - 40 * (int)v19);
      do
      {
        v22 = *v21;
        v21 += 20;
        *v20++ = v22;
        --v19;
      }
      while (v19);
    }
    a4 = v24;
    v13 = v25;
    v9 = v27;
    if (*(_DWORD *)a6 && *(unsigned __int16 *)(a6 + 4) > (unsigned __int16)v27)
    {
      if (*(_DWORD *)(a2 + 40 * v8 + 32) == *(_DWORD *)(*(_QWORD *)(a6 + 8) + 4 * (unsigned __int16)v27))
        v9 = (v27 + 1);
      else
        v9 = v27;
    }
    v10 = 0;
    v11 = v16 + 1;
    goto LABEL_22;
  }
  return 2315264010;
}

uint64_t pw_nn_process(uint64_t a1, uint64_t ****a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _WORD *a6, uint64_t a7, _QWORD *a8, int a9, uint64_t a10, unsigned __int8 a11, const char **a12, int a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  const char **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int16 v35;
  uint64_t v36;
  uint64_t Embedding;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  __int16 v60;
  float v61;
  _WORD *v64;
  uint64_t *v65;
  uint64_t ****v66;
  uint64_t *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77[2];

  v69 = 0;
  v77[0] = *a5;
  v76 = 0;
  v20 = 2315264010;
  v74 = 0;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0;
  v21 = 2 * a4;
  v22 = heap_Alloc(*(_QWORD *)(a1 + 8), v21);
  v75 = v22;
  if (!v22)
  {
    v28 = 0;
    v24 = 0;
    goto LABEL_66;
  }
  v23 = (_WORD *)v22;
  v66 = a2;
  v24 = heap_Alloc(*(_QWORD *)(a1 + 8), v21);
  if (!v24)
    goto LABEL_65;
  v67 = a3;
  v65 = a5;
  if ((_DWORD)a4)
  {
    v25 = 0;
    v26 = 0;
    v27 = (const char **)v67;
    do
    {
      if (checkAttachedPunc(*v27))
        *(_WORD *)(v24 + 2 * v26++) = v25;
      ++v25;
      v27 += 5;
    }
    while (a4 != v25);
  }
  else
  {
    v26 = 0;
  }
  v29 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 4);
  v70 = v29;
  if (!v29)
    goto LABEL_29;
  v30 = v29;
  v31 = *(_QWORD **)(a1 + 8);
  if (a9 == 1)
  {
    v32 = heap_Alloc((uint64_t)v31, v21);
    v72 = v32;
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD **)(a1 + 8);
      if (a13)
      {
        v64 = (_WORD *)v33;
        v28 = 0;
        v73 = (float *)heap_Calloc(v34, 100 * (a4 + v26), 4);
        v35 = v26;
        v36 = (uint64_t)v67;
        if (v73)
          goto LABEL_16;
      }
      else
      {
        v28 = heap_Alloc((uint64_t)v34, v21);
        v69 = v28;
        if (!v28)
        {
          v20 = 2315264010;
          goto LABEL_46;
        }
        v64 = (_WORD *)v33;
        v36 = (uint64_t)v67;
        Embedding = getcharNum(a4, v67, &v70, (_WORD *)&v76 + 1, v26, v24, &v69);
        if ((Embedding & 0x80000000) != 0)
        {
LABEL_44:
          v20 = Embedding;
          goto LABEL_45;
        }
        v35 = HIWORD(v76);
        v73 = (float *)heap_Calloc(*(_QWORD **)(a1 + 8), HIWORD(v76) + 2, 4);
        if (v73)
        {
LABEL_16:
          Embedding = getEmbedding(a1, a7, a8, 1, a4, v36, v26, v24, &v73, &v70, a13);
          if ((Embedding & 0x80000000) == 0)
          {
            if ((_DWORD)a4 == 1)
            {
              v42 = 1;
              *v23 = 1;
              *v64 = 1;
              LOWORD(v76) = 1;
              if (v73)
              {
                heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v73);
                v73 = 0;
                v42 = 1;
              }
LABEL_41:
              v20 = 2315264010;
              *a6 = v42;
              v77[0] = heap_Calloc(*(_QWORD **)(a1 + 8), v42, 184);
              if (v77[0])
              {
                v56 = v36;
                v33 = (uint64_t)v64;
                v20 = storeResult(a1, v56, a4, (uint64_t)v23, (uint64_t)v64, v77, &v76, a10, a11, a12);
                if ((v20 & 0x80000000) == 0)
                {
                  *a6 = v76;
                  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v64);
                  v72 = 0;
                  *v65 = v77[0];
LABEL_70:
                  if (v28)
                    heap_Free(*(_QWORD **)(a1 + 8), v28);
                  goto LABEL_72;
                }
                goto LABEL_46;
              }
              goto LABEL_45;
            }
            if (a13)
              v55 = a4;
            else
              v55 = 2;
            Embedding = fi_predict(*v66, (const void **)&v73, v55 + v35, &v74, v38, v39, v40, v41);
            if ((Embedding & 0x80000000) == 0)
            {
              getJointResult((uint64_t)&v75, &v72, a4, v26, v24, &v76, v74, v70, a13, v28);
              v42 = (unsigned __int16)v76;
              goto LABEL_41;
            }
          }
          goto LABEL_44;
        }
      }
      v20 = 2315264010;
LABEL_45:
      v33 = (uint64_t)v64;
LABEL_46:
      heap_Free(*(_QWORD **)(a1 + 8), v33);
      goto LABEL_66;
    }
LABEL_29:
    v28 = 0;
    v20 = 2315264010;
    goto LABEL_66;
  }
  v73 = (float *)heap_Calloc(v31, (100 * a4), 4);
  if (!v73)
  {
    v28 = 0;
    v20 = 2315264010;
LABEL_68:
    if (v71)
      heap_Free(*(_QWORD **)(a1 + 8), v71);
    goto LABEL_70;
  }
  v43 = getEmbedding(a1, a7, a8, a9, a4, (uint64_t)v67, v26, v24, &v73, &v70, a13);
  if ((v43 & 0x80000000) != 0)
    goto LABEL_30;
  v43 = fi_predict(v66[1], (const void **)&v73, a4, &v74, v44, v45, v46, v47);
  if ((v43 & 0x80000000) != 0)
    goto LABEL_30;
  getPwPredict(a4, v74, v26, v24, &v75, &v76, v30);
  v48 = (unsigned __int16)v76;
  *a6 = v76;
  v49 = heap_Calloc(*(_QWORD **)(a1 + 8), v48, 184);
  v77[0] = v49;
  if (!v49)
    goto LABEL_29;
  v50 = v49;
  v43 = storePwResult(a1, (uint64_t)v67, a4, (uint64_t)v23, v77, a10);
  if ((v43 & 0x80000000) != 0)
  {
LABEL_30:
    v28 = 0;
    v20 = v43;
    goto LABEL_66;
  }
  v71 = heap_Calloc(*(_QWORD **)(a1 + 8), 100 * v48, 4);
  if (!v71)
    goto LABEL_29;
  if (v66[1])
  {
    v20 = fi_predict(*v66, (const void **)&v71, v48, &v74, v51, v52, v53, v54);
    if ((v20 & 0x80000000) != 0)
    {
LABEL_65:
      v28 = 0;
LABEL_66:
      if (v73)
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v73);
      goto LABEL_68;
    }
  }
  else
  {
    v20 = 0;
  }
  if ((_DWORD)v48)
  {
    v57 = 0;
    for (i = 0; i != v48; ++i)
    {
      v59 = 0;
      v60 = 0;
      v61 = 0.0;
      do
      {
        if (v61 < *(float *)(v74 + v57 + 4 * v59))
        {
          v61 = *(float *)(v74 + v57 + 4 * v59);
          v60 = v59;
        }
        ++v59;
      }
      while (v59 != 4);
      *(_DWORD *)(v50 + 184 * i + 72) = v60 == 3 || v60 == 0 || (_DWORD)v48 - 1 == i;
      v57 += 16;
    }
  }
  if (v71)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v71);
    v71 = 0;
  }
  *v65 = v50;
  if ((v20 & 0x80000000) != 0)
    goto LABEL_65;
LABEL_72:
  if (v24)
    heap_Free(*(_QWORD **)(a1 + 8), v24);
  if (v70)
    heap_Free(*(_QWORD **)(a1 + 8), v70);
  heap_Free(*(_QWORD **)(a1 + 8), v75);
  return v20;
}

uint64_t getcharNum(unsigned int a1, uint64_t *a2, uint64_t *a3, _WORD *a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t UTF8Char;
  __int16 v17;
  int v18;
  int v22;
  char v23;

  v23 = 0;
  v22 = 0;
  v7 = *a3;
  if (a1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *a7;
    v15 = a1;
    do
    {
      UTF8Char = utf8_getUTF8Char(*a2, 0, &v22);
      if ((UTF8Char & 0x80000000) != 0)
        break;
      if (utf8_IsChineseLetter((const char *)&v22))
      {
        v17 = Utf8_Utf8NbrOfSymbols((const char *)*a2) - 1;
        *(_WORD *)(v14 + 2 * v11) = v17;
        if (a5 > (unsigned __int16)v13 && v11 == *(unsigned __int16 *)(a6 + 2 * (unsigned __int16)v13))
          ++v13;
      }
      else
      {
        if (a5 > (unsigned __int16)v13 && v11 == *(unsigned __int16 *)(a6 + 2 * (unsigned __int16)v13))
        {
          ++v13;
          v18 = Utf8_Utf8NbrOfSymbols((const char *)*a2);
          v17 = 1;
          if (v18 >= 3)
          {
            *(_DWORD *)(v7 + 4 * v11) = 1;
            v17 = 2;
          }
        }
        else
        {
          v17 = 1;
          *(_DWORD *)(v7 + 4 * v11) = 1;
        }
        *(_WORD *)(v14 + 2 * v11) = v17;
      }
      v12 += v17;
      ++v11;
      a2 += 5;
    }
    while (v15 != v11);
  }
  else
  {
    v12 = 0;
    UTF8Char = 0;
  }
  *a3 = v7;
  *a4 = v12;
  return UTF8Char;
}

uint64_t getEmbedding(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, float **a9, uint64_t *a10, int a11)
{
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  unsigned __int16 v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int32 *v35;
  __int16 v36;
  unsigned int v37;
  unsigned __int16 v38;
  __int16 v39;
  char v40;
  unsigned __int16 v41;
  int UTF8Char;
  int v43;
  unsigned __int16 v44;
  char v45;
  int v46;
  __n128 v47;
  int v49;
  int v50;
  float v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 v58;
  unsigned int v59;
  unsigned __int16 v60;
  __int16 v61;
  uint64_t v62;
  int v63;
  const char *v64;
  __n128 v65;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  int v79;
  int v80;
  unsigned __int16 v81;
  int v82;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  __int16 v87;
  uint64_t v88;
  _BYTE __s[12];
  __int16 v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v87 = 0;
  if (!a4)
    return 0;
  v15 = a2;
  v16 = *a10;
  v88 = 0;
  v17 = *a9;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *))(a2 + 40))(*a3, a3[1], (char *)&v88 + 4);
  if ((result & 0x80000000) != 0)
    return result;
  if (a11)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v15 + 40))(a3[2], a3[3], &v88);
    if ((result & 0x80000000) != 0)
      return result;
    if (HIDWORD(v88) != (_DWORD)v88)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v19, v20, v21, (uint64_t)"ERROR: word embedding and character embedding do not have same dimension");
      return 2315264000;
    }
  }
  else
  {
    *v17 = 101.0;
    v17 += HIDWORD(v88);
  }
  if (!a5)
  {
LABEL_108:
    if (!a11)
      *v17 = 102.0;
    return result;
  }
  v22 = 0;
  v82 = 0;
  v85 = 0;
  v78 = a5;
  v68 = a7;
  v71 = a6;
  v72 = v16;
  v84 = v15;
  while (1)
  {
    v23 = cstdlib_strlen(*(const char **)(a6 + 40 * v22));
    v24 = 0;
    v86 = *(char **)(a6 + 40 * v22);
    if (a7)
    {
      v25 = v85;
      if (v85 < a7)
      {
        if (v22 == *(unsigned __int16 *)(a8 + 2 * v85))
        {
          if (v23 == 3
            && (*(_QWORD *)__s = 0,
                v26 = 3,
                v82 = 1,
                v27 = v23,
                utf8_Utf8ToUtf32_Tolerant((uint64_t)v86, 3u, (uint64_t)&__s[4], 1u, __s),
                v23 = v27,
                *(_DWORD *)&__s[4] == 8230))
          {
            v24 = 0;
          }
          else
          {
            v82 = 0;
            v87 = v86[v23 - 1];
            v26 = v23 - 1;
            v86[(unsigned __int16)(v23 - 1)] = 0;
            v24 = 1;
          }
          *(_DWORD *)(a6 + 40 * v22 + 36) = 1;
          v23 = v26;
          v25 = v85 + 1;
        }
        else
        {
          v24 = 0;
          v82 = 0;
        }
      }
    }
    else
    {
      v25 = v85;
    }
    v85 = v25;
    v81 = v23;
    if (!a11)
      break;
    *(_DWORD *)(v16 + 4 * v22) = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, char *, float *))(v15 + 56))(a3[2], a3[3], v86, v17);
    if (*v17 != 0.0 || (_DWORD)result == 0)
      goto LABEL_88;
    v29 = HIDWORD(v88);
    v74 = a3[1];
    v75 = *a3;
    v69 = a3[2];
    v70 = a3[3];
    v90 = 0;
    *(_QWORD *)&__s[4] = 0;
    v30 = heap_Calloc(*(_QWORD **)(a1 + 8), HIDWORD(v88), 4);
    if (v30)
    {
      v35 = (unsigned __int32 *)v30;
      v79 = v24;
      v36 = Utf8_Utf8NbrOfSymbols(v86);
      *(_WORD *)__s = v36 - 1;
      if (v36 == 1)
      {
LABEL_65:
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v35);
        a7 = v68;
        v25 = v85;
        v24 = v79;
      }
      else
      {
        checkremoveNormalSym(v86, (unsigned __int16 *)__s, 0x5Fu);
        checkremoveNormalSym(v86, (unsigned __int16 *)__s, 0x2Du);
        v37 = *(unsigned __int16 *)__s;
        if (*(_WORD *)__s)
        {
          v38 = 0;
          v39 = 0;
          if (*(unsigned __int16 *)__s == 1)
            v40 = 115;
          else
            v40 = 98;
          v73 = v40;
          while (1)
          {
            v41 = v38;
            UTF8Char = utf8_getUTF8Char((uint64_t)v86, v38, &__s[4]);
            if (UTF8Char < 0)
              goto LABEL_65;
            v43 = UTF8Char;
            v44 = cstdlib_strlen(&__s[4]);
            if (!utf8_IsChineseLetter(&__s[4]))
              break;
            if (v39)
              v45 = 109;
            else
              v45 = v73;
            __s[v44 + 4] = v45;
            __s[cstdlib_strlen(&__s[4]) + 4] = 0;
            v46 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, unsigned __int32 *))(v84 + 56))(v75, v74, &__s[4], v35);
            if (*(float *)v35 == 0.0 && v46 != 0)
            {
              v47.n128_u32[0] = *v35;
              v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *, __n128))(v84 + 56))(v69, v70, "</s>", v17, v47);
LABEL_83:
              *(_DWORD *)(v72 + 4 * v22) = 0;
              goto LABEL_84;
            }
            v43 = v46;
            if (v29)
            {
              v49 = 0;
              v38 = v41 + v44;
              LOBYTE(v50) = 1;
              do
              {
                v51 = *(float *)&v35[(unsigned __int16)v49];
                v50 = v50 & (v51 == 0.0);
                v17[(unsigned __int16)v49] = v17[(unsigned __int16)v49] + (float)(v51 / (float)v37);
                ++v49;
              }
              while (v29 > (unsigned __int16)v49);
              v52 = v37 <= (unsigned __int16)++v39 ? 1 : v50;
              if (v52 != 1)
                continue;
            }
            goto LABEL_83;
          }
          if (cstdlib_strlen(&__s[4]) == 1)
          {
            a7 = v68;
            v62 = a1;
            v24 = v79;
            if (__s[4] - 48 >= 0xA)
            {
              if ((__s[4] & 0xDFu) - 65 >= 0x1A)
              {
                v63 = 0;
                goto LABEL_106;
              }
              v63 = 1;
              v64 = "ENG";
            }
            else
            {
              v63 = 0;
              v64 = "NUM";
            }
          }
          else
          {
            v63 = 0;
            v64 = "</s>";
            a7 = v68;
            v62 = a1;
            v24 = v79;
          }
          v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *))(v84 + 56))(v69, v70, v64, v17);
LABEL_106:
          *(_DWORD *)(v72 + 4 * v22) = v63;
          goto LABEL_85;
        }
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, float *))(v84 + 56))(v69, v70, "</s>", v17);
LABEL_84:
        a7 = v68;
        v62 = a1;
        v24 = v79;
LABEL_85:
        heap_Free(*(_QWORD **)(v62 + 8), (uint64_t)v35);
        v25 = v85;
        if (!v43)
        {
          result = 0;
          a6 = v71;
          v15 = v84;
          goto LABEL_87;
        }
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v31, v32, v33, v34, v67);
    }
    v15 = v84;
    result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, float *))(v84 + 56))(a3[2], a3[3], "</s>", v17);
    a6 = v71;
LABEL_87:
    v16 = v72;
LABEL_88:
    if (v25 && !v82 && v22 == *(unsigned __int16 *)(a8 + 2 * (v25 - 1)))
      v86[v81] = 0;
    v17 += HIDWORD(v88);
    if (v24)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, __int16 *, float *))(v15 + 56))(a3[2], a3[3], &v87, v17);
      if (*v17 == 0.0 && (_DWORD)result != 0)
      {
        v65.n128_f32[0] = *v17;
        result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, float *, __n128))(v15 + 56))(a3[2], a3[3], "</s>", v17, v65);
      }
      v17 += HIDWORD(v88);
    }
LABEL_99:
    if (++v22 == v78)
      goto LABEL_108;
  }
  v80 = v24;
  v53 = HIDWORD(v88);
  v54 = *(_DWORD *)(v16 + 4 * v22);
  v55 = *a3;
  v56 = a3[1];
  __s[8] = 0;
  *(_DWORD *)&__s[4] = 0;
  if (v54)
  {
    *v17 = 1.0;
    v17 += v53;
    if (v80)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, float *))(v15 + 72))(v55, v56, &v87, v17);
      if ((result & 0x80000000) != 0)
      {
        result = 0;
        *v17 = 100.0;
      }
      v17 += v53;
    }
    else
    {
      result = 0;
    }
    goto LABEL_76;
  }
  v76 = HIDWORD(v88);
  *(_WORD *)__s = Utf8_Utf8NbrOfSymbols(v86) - 1;
  checkremoveNormalSym(v86, (unsigned __int16 *)__s, 0x5Fu);
  checkremoveNormalSym(v86, (unsigned __int16 *)__s, 0x2Du);
  v57 = *(unsigned __int16 *)__s;
  if (!(v80 | *(unsigned __int16 *)__s))
  {
    result = 0;
    *v17 = 100.0;
LABEL_75:
    v15 = v84;
    v16 = v72;
LABEL_76:
    if (v85 && !v82 && v22 == *(unsigned __int16 *)(a8 + 2 * (v85 - 1)))
      v86[v81] = 0;
    goto LABEL_99;
  }
  if (!*(_WORD *)__s)
  {
    result = 0;
LABEL_70:
    if (v80)
    {
      v15 = v84;
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, float *))(v84 + 72))(v55, v56, &v87, v17);
      a7 = v68;
      a6 = v71;
      v16 = v72;
      if ((result & 0x80000000) != 0)
      {
        result = 0;
        *v17 = 100.0;
      }
      v17 += v76;
      goto LABEL_76;
    }
    a7 = v68;
    a6 = v71;
    goto LABEL_75;
  }
  v58 = 0;
  v59 = 0;
  while (1)
  {
    v60 = v58;
    result = utf8_getUTF8Char((uint64_t)v86, v58, &__s[4]);
    if ((result & 0x80000000) != 0)
      return result;
    v61 = cstdlib_strlen(&__s[4]);
    result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, float *))(v84 + 72))(v55, v56, &__s[4], v17);
    if ((result & 0x80000000) != 0)
    {
      result = 0;
      *v17 = 100.0;
    }
    v58 = v60 + v61;
    ++v59;
    v17 += v76;
    if (v59 >= v57)
      goto LABEL_70;
  }
}

uint64_t getJointResult(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  int v15;
  unsigned __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v33;

  v10 = *(_QWORD *)result;
  v11 = *a2;
  if (a3)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    v18 = a3;
    while (a9)
    {
      v19 = 0;
      LODWORD(result) = 0;
      v21 = 0.0;
      do
      {
        v20 = a7 + 28 * (unsigned __int16)(v16 + v14);
        if (v21 >= *(float *)(v20 + 4 * v19))
        {
          result = result;
        }
        else
        {
          v21 = *(float *)(v20 + 4 * v19);
          result = v19;
        }
        ++v19;
      }
      while (v19 != 7);
      if (a4 <= v16 || v14 != *(unsigned __int16 *)(a5 + 2 * v16))
        goto LABEL_18;
      v22 = 0;
      LODWORD(result) = 0;
      v24 = 0.0;
      do
      {
        v23 = a7 + 28 * (unsigned __int16)(v16 + v17);
        if (v24 >= *(float *)(v23 + 4 * v22))
        {
          result = result;
        }
        else
        {
          v24 = *(float *)(v23 + 4 * v22);
          result = v22;
        }
        ++v22;
      }
      while (v22 != 7);
      v25 = 1;
      ++v16;
LABEL_19:
      if (*(_DWORD *)(a8 + 4 * v14) == 1)
        v26 = 1;
      else
        v26 = v25;
      if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(result), (int16x4_t)0x6000500040003)) & 1) == 0 && !v26)
      {
        *(_WORD *)(v10 + 2 * v14) = 0;
LABEL_32:
        *(_WORD *)(v11 + 2 * v14) = 0;
        goto LABEL_33;
      }
      ++*a6;
      *(_WORD *)(v10 + 2 * v14) = 1;
      v27 = v26 ^ 1;
      if (!v14)
        v27 = 1;
      if ((v27 & 1) == 0)
      {
        v28 = (v14 - 1);
        if (!*(_WORD *)(v10 + 2 * v28))
        {
          *(_WORD *)(v10 + 2 * v28) = 1;
          ++*a6;
        }
      }
      if ((result & 0xFFFD) != 4)
        goto LABEL_32;
      *(_WORD *)(v11 + 2 * v14) = 1;
LABEL_33:
      ++v14;
      ++v17;
      if (v14 == v18)
      {
        v29 = v18 - 1;
        goto LABEL_36;
      }
    }
    v33 = 0;
    v15 += *(unsigned __int16 *)(a10 + 2 * v14);
    LOBYTE(v33) = **(_BYTE **)(a7 + 8 * (unsigned __int16)v15);
    result = cstdlib_atoi((unsigned __int8 *)&v33);
LABEL_18:
    v25 = 0;
    goto LABEL_19;
  }
  v29 = -1;
LABEL_36:
  if (*(_WORD *)(v10 + 2 * v29) != 1)
  {
    ++*a6;
    *(_WORD *)(v10 + 2 * v29) = 1;
  }
  if (*(_WORD *)(v11 + 2 * v29) != 1)
    *(_WORD *)(v11 + 2 * v29) = 1;
  return result;
}

uint64_t load_pw_cfg(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  char *v10;
  _BOOL4 v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int8 ChineseUTFCharNum;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  size_t v33;
  uint64_t v34;
  void *v35;
  _BYTE __c[11];

  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_enable_cscgroup", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
  {
    v11 = 1;
  }
  else
  {
    v10 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v10)
      *v10 = 0;
    v11 = cstdlib_strcmp(**(const char ***)&__c[3], "no") != 0;
  }
  *((_DWORD *)a4 + 8) = v11;
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_cscgroup_stopwords", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
  {
    v13 = "";
  }
  else
  {
    v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12)
      *v12 = 0;
    v13 = **(const char ***)&__c[3];
  }
  cstdlib_strcpy((char *)a4 + 36, v13);
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_auxiliarywords", &__c[3], &__c[1], __c);
  if ((v14 & 0x80000000) != 0)
  {
    v20 = -1979703276;
  }
  else
  {
    v15 = v14;
    if (!*(_QWORD *)&__c[3] || *(unsigned __int16 *)&__c[1] != 1)
      goto LABEL_21;
    v16 = **(_QWORD **)&__c[3];
    v17 = cstdlib_strlen(**(const char ***)&__c[3]);
    ChineseUTFCharNum = utf8_GetChineseUTFCharNum(v16, v17);
    *a4 = ChineseUTFCharNum;
    v19 = heap_Alloc(*(_QWORD *)(a5 + 8), 8 * ChineseUTFCharNum);
    *((_QWORD *)a4 + 1) = v19;
    v20 = -1979703286;
    if (v19)
    {
      if (*a4)
      {
        v21 = 0;
        v22 = **(unsigned __int8 ***)&__c[3];
        while (1)
        {
          v23 = (unsigned __int16)utf8_determineUTF8CharLength(*v22);
          *(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * v21) = heap_Calloc(*(_QWORD **)(a5 + 8), 1, v23 + 1);
          v24 = *((_QWORD *)a4 + 1);
          v25 = *(void **)(v24 + 8 * v21);
          if (!v25)
            break;
          cstdlib_memcpy(v25, v22, v23);
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * v21) + v23) = 0;
          v22 += v23;
          if (++v21 >= (unint64_t)*a4)
            goto LABEL_21;
        }
        heap_Free(*(_QWORD **)(a5 + 8), v24);
        v20 = -1979703286;
        goto LABEL_24;
      }
LABEL_21:
      if (!(_DWORD)v15)
        goto LABEL_28;
      goto LABEL_25;
    }
  }
LABEL_24:
  LODWORD(v15) = v20;
LABEL_25:
  *((_QWORD *)a4 + 1) = 0;
  if ((_DWORD)v15 == -1979703286)
    v15 = 2315264010;
  else
    v15 = 0;
LABEL_28:
  a4[16] = 0;
  *((_QWORD *)a4 + 3) = 0;
  *(_QWORD *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(a1 + 96))(a2, a3, "fecfg", "fepw_custermizedchar", &__c[3], &__c[1], __c);
  if (v26 < 0)
  {
    v27 = -1979703276;
  }
  else
  {
    v27 = v26;
    if (!*(_QWORD *)&__c[3] || *(unsigned __int16 *)&__c[1] != 1)
    {
      a4[16] = 0;
      goto LABEL_39;
    }
    v28 = **(_QWORD **)&__c[3];
    *(_BYTE *)(cstdlib_strlen(**(const char ***)&__c[3]) + v28 - 1) = 0;
    v29 = Utf8_Utf8NbrOfSymbols(**(const char ***)&__c[3]);
    a4[16] = v29 - 1;
    v30 = heap_Alloc(*(_QWORD *)(a5 + 8), 8 * (v29 - 1));
    *((_QWORD *)a4 + 3) = v30;
    if (v30)
    {
      if (!a4[16])
        goto LABEL_40;
      v31 = 0;
      v32 = **(unsigned __int8 ***)&__c[3];
      while (1)
      {
        v33 = (unsigned __int16)utf8_determineUTF8CharLength(*v32);
        *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v31) = heap_Calloc(*(_QWORD **)(a5 + 8), 1, v33 + 1);
        v34 = *((_QWORD *)a4 + 3);
        v35 = *(void **)(v34 + 8 * v31);
        if (!v35)
          break;
        cstdlib_memcpy(v35, v32, v33);
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v31) + v33) = 0;
        v32 += v33;
        if (++v31 >= (unint64_t)a4[16])
          goto LABEL_40;
      }
      heap_Free(*(_QWORD **)(a5 + 8), v34);
      v27 = -1979703286;
LABEL_39:
      *((_QWORD *)a4 + 3) = 0;
LABEL_40:
      if (!v27)
        return v15;
      goto LABEL_43;
    }
    v27 = -1979703286;
  }
LABEL_43:
  *((_QWORD *)a4 + 3) = 0;
  if (v27 == -1979703286)
    return 2315264010;
  else
    return v15;
}

_QWORD *freePwTids(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 1064);
  if (v2)
  {
    v4 = *(unsigned __int16 *)(a2 + 1072);
    if (*(_WORD *)(a2 + 1072))
    {
      v5 = result;
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(v2 + v6);
        if (v8)
        {
          result = heap_Free((_QWORD *)v5[1], v8);
          v2 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v2 + v6) = 0;
          v4 = *(unsigned __int16 *)(a2 + 1072);
        }
        ++v7;
        v6 += 184;
      }
      while (v7 < v4);
    }
  }
  return result;
}

_QWORD *freePWInfo(_QWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 1064);
  if (v3)
  {
    v5 = result;
    v7 = *(_QWORD *)(v3 + 184 * a3 + 40);
    if (v7)
    {
      result = heap_Free((_QWORD *)result[1], v7);
      v3 = *(_QWORD *)(a2 + 1064);
    }
    v8 = *(_QWORD *)(v3 + 184 * a3 + 24);
    if (v8)
    {
      result = heap_Free((_QWORD *)v5[1], v8);
      v3 = *(_QWORD *)(a2 + 1064);
    }
    v9 = v3 + 184 * a3;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = 0;
  }
  return result;
}

uint64_t pw_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ****a6, uint64_t a7, _QWORD *a8, int a9, _QWORD *a10, uint64_t a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned int v26;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 v61;
  unsigned int v62;
  const char **v64;
  unsigned int v65;
  unsigned int v66;
  _WORD *v67;
  unsigned int v68;
  int v69;
  _BOOL4 IsChineseLetter;
  unsigned int v71;
  int v73;
  uint64_t *v74;
  unsigned int TNmarker;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  unsigned int word_separating_markers;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  BOOL v112;
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned __int16 v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  char *v129;
  uint64_t *v130;
  size_t v131;
  size_t v132;
  size_t v133;
  char *v134;
  char *v135;
  char *v136;
  size_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  size_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  char *v145;
  int v146;
  char *i;
  char *v148;
  __int16 v149;
  char v150;
  unsigned __int16 v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  size_t v155;
  unsigned __int16 **v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  size_t v161;
  char *v162;
  char *v163;
  void (*v164)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v165;
  char *v166;
  __int16 v167;
  uint64_t v168;
  size_t v169;
  char *v170;
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, __int16 *);
  uint64_t v172;
  __int16 v173;
  unsigned __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  size_t v178;
  uint64_t v179;
  unsigned __int16 v180;
  char *v181;
  uint64_t v182;
  size_t v183;
  char *v184;
  unsigned __int16 v185;
  int v186;
  int v187;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v193;
  _BOOL4 v194;
  uint64_t v195;
  int *v196;
  int v197;
  unsigned int *v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v203;
  int v204;
  uint64_t v205;
  size_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  size_t v210;
  size_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  size_t v215;
  uint64_t *v216;
  size_t v217;
  size_t v218;
  char *v219;
  size_t v220;
  uint64_t *v221;
  size_t v222;
  size_t v223;
  char *v224;
  char *v225;
  size_t v226;
  const char *v227;
  uint64_t (*v228)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *);
  __int16 v229;
  unsigned __int16 v230;
  uint64_t *v231;
  uint64_t v232;
  size_t v233;
  size_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *);
  __int16 v241;
  uint64_t v242;
  int v243;
  uint64_t *v244;
  uint64_t v245;
  size_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  _BOOL4 *v250;
  int v251;
  _BOOL4 v252;
  int v253;
  uint64_t (*v254)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _OWORD *, __int16 *);
  __int16 v255;
  uint64_t v256;
  uint64_t v257;
  __int16 v258;
  unsigned __int16 v259;
  int v260;
  unsigned __int16 v261;
  unsigned __int16 v262;
  int v263;
  uint64_t *v264;
  char v265;
  int v266;
  char *__s;
  unsigned int v268;
  unsigned int v269;
  uint64_t *v270;
  uint64_t v271;
  unsigned __int16 v272;
  uint64_t v273;
  unsigned __int8 *v274;
  int v275;
  unsigned __int16 v276;
  const char **v277;
  unsigned __int16 *v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  int v284;
  char v285[4];
  char v286;
  char *__s2;
  char *v288;
  uint64_t v289;
  char v290[8];
  int v291;
  uint64_t *v292;
  unsigned int v293;
  int *v294;
  _OWORD __b[64];
  unsigned int v296;
  char *v297;
  const char *v298;
  unsigned __int16 v299;
  unsigned __int16 v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  unsigned int v305;
  __int16 v306;
  int v307;
  int v308;
  int v309;
  uint64_t __dst;
  _OWORD __s1[4];
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  v308 = 0;
  v309 = 0;
  v307 = 0;
  v306 = 0;
  v304 = 0;
  v303 = "";
  v302 = 0;
  v299 = 0;
  v298 = 0;
  v297 = 0;
  v294 = 0;
  v293 = 0;
  v292 = 0;
  v291 = 0;
  v290[6] = 0;
  strcpy(v290, "latin");
  memset(__s1, 0, sizeof(__s1));
  v288 = 0;
  v289 = 0;
  v13 = 2315264007;
  if (!a3)
    return v13;
  v14 = a4;
  if (!a4)
    return v13;
  v15 = a5;
  if (!a5)
    return v13;
  if (!a6)
    return v13;
  if (!a7)
    return v13;
  if (!a8)
    return v13;
  v18 = a3;
  v305 = 0;
  v301 = 0;
  v300 = 0;
  memset(__b, 0, 512);
  cstdlib_memset(__b, 0, 0x404uLL);
  v13 = 0;
  *(_QWORD *)(v15 + 1088) = 0;
  *(_QWORD *)(v15 + 1064) = 0;
  if (*(_WORD *)(v15 + 1098) != 1)
    return v13;
  v277 = (const char **)(v15 + 1088);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v18 + 176))(a1, a2, *(unsigned __int16 *)(v15 + 1096), 0);
  if ((v13 & 0x80000000) != 0 || HIWORD(v309) < 2u)
    return v13;
  v21 = *(unsigned __int16 *)(v15 + 1096);
  LOWORD(__dst) = 0;
  LODWORD(__s2) = 0;
  *(_WORD *)v285 = 0;
  LOWORD(v284) = 0;
  LOWORD(v283) = 0;
  v281 = a2;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v18 + 104))(a1, a2, 2, v21, &__dst);
  v23 = v22;
  v280 = v18;
  if ((v22 & 0x80000000) == 0)
  {
    v24 = __dst;
    if ((_WORD)__dst)
    {
      v274 = (unsigned __int8 *)v15;
      v25 = 0;
      while (1)
      {
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char **, char *))(v18 + 168))(a1, v281, v24, 0, 1, &__s2, v285);
        if ((v26 & 0x80000000) != 0)
          break;
        if (__s2 > 0xA || ((1 << (char)__s2) & 0x610) == 0)
        {
          v31 = 0;
          v30 = (unsigned __int16)__dst;
          v32 = v281;
        }
        else
        {
          v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v18 + 168))(a1, v281, (unsigned __int16)__dst, 1, 1, &v284, v285);
          if ((v26 & 0x80000000) != 0)
            break;
          v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v18 + 168))(a1, v281, (unsigned __int16)__dst, 2, 1, &v283, v285);
          if ((v26 & 0x80000000) != 0)
            break;
          v29 = (unsigned __int16)v284 > v25 || (unsigned __int16)v283 > v25;
          v30 = (unsigned __int16)__dst;
          if (v29)
          {
            v25 = v283;
            v31 = 0;
          }
          else
          {
            v31 = (unsigned __int16)__dst;
          }
          v32 = v281;
        }
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v280 + 120))(a1, v32, v30, &__dst);
        if ((v26 & 0x80000000) != 0)
          break;
        if ((_DWORD)v31)
        {
          log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v33, v34, v35, (uint64_t)"Dropping nested word record");
          v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v280 + 192))(a1, v281, v31);
          if ((v26 & 0x80000000) != 0)
            break;
        }
        v24 = __dst;
        v18 = v280;
        if (!(_WORD)__dst)
          goto LABEL_37;
      }
      v23 = v26;
      v46 = 0;
      v51 = 0;
      goto LABEL_134;
    }
  }
  if ((v22 & 0x80000000) != 0)
  {
    v46 = 0;
    v51 = 0;
    v102 = 0;
    v103 = 0;
    goto LABEL_142;
  }
LABEL_37:
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v18 + 104))(a1, v281, 2, *(unsigned __int16 *)(v15 + 1096), &v309);
  v13 = v36;
  if ((v36 & 0x80000000) != 0)
  {
    v46 = 0;
    v102 = 0;
    v103 = 0;
    v23 = v36;
    v51 = 0;
    goto LABEL_142;
  }
  v40 = v309;
  if (!(_WORD)v309)
  {
LABEL_138:
    log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: no lexicon word", v37, v38, v39, v256);
    return v13;
  }
  v271 = v14;
  v272 = 0;
  v276 = 0;
  v275 = 0;
  v23 = -1979703286;
  v270 = (uint64_t *)(v15 + 1064);
  do
  {
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v280 + 120))(a1, v281, v40, (char *)&v308 + 2);
    if ((v41 & 0x80000000) != 0)
    {
      v51 = 0;
      v102 = 0;
      v103 = 0;
      v23 = v41;
LABEL_141:
      v46 = v276;
      goto LABEL_142;
    }
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v280 + 168))(a1, v281, (unsigned __int16)v309, 0, 1, &v305, (char *)&v309 + 2);
    v13 = v42;
    if ((v42 & 0x80000000) != 0)
    {
      v102 = 0;
      v103 = 0;
      v23 = v42;
      v51 = 0;
      goto LABEL_141;
    }
    v43 = v305;
    if (v305 <= 0xA && ((1 << v305) & 0x610) != 0)
    {
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v280 + 168))(a1, v281, (unsigned __int16)v309, 1, 1, &v308, (char *)&v309 + 2);
      if ((v45 & 0x80000000) != 0)
        return v45;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v280 + 168))(a1, v281, (unsigned __int16)v309, 2, 1, (char *)&v307 + 2, (char *)&v309 + 2);
      if ((v13 & 0x80000000) != 0)
        return v13;
      if (!(_WORD)v308 || v275 + 1 == (unsigned __int16)v308 && HIWORD(v307) > (unsigned __int16)v308)
      {
        ++v276;
        v275 = HIWORD(v307);
      }
      v43 = v305;
    }
    if (v43 == 5)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(v280 + 176))(a1, v281, (unsigned __int16)v309, 4, &v298, (char *)&v309 + 2);
      if ((v13 & 0x80000000) != 0)
        return v13;
      if (HIWORD(v309))
      {
        if (!cstdlib_strncmp(v298, "prompt", HIWORD(v309)))
        {
          ++v272;
          if (v296 <= 0x7F)
          {
            v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v280 + 168))(a1, v281, (unsigned __int16)v309, 1, 1, &v308, (char *)&v309 + 2);
            if ((v45 & 0x80000000) != 0)
              return v45;
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v280 + 168))(a1, v281, (unsigned __int16)v309, 2, 1, (char *)&v307 + 2, (char *)&v309 + 2);
            if ((v13 & 0x80000000) != 0)
              return v13;
            *((_DWORD *)__b + v296) = (unsigned __int16)v308;
            *((_DWORD *)&__b[32] + v296++) = HIWORD(v307);
          }
        }
      }
    }
    v40 = HIWORD(v308);
    LOWORD(v309) = HIWORD(v308);
  }
  while (HIWORD(v308));
  if (v272 >= 0x81u)
    log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: the prompt number %d is large than the threshold %d, so the last %d promp not used to guide grouping", v37, v38, v39, v272);
  v46 = v276;
  if (!v276)
    goto LABEL_138;
  v274 = (unsigned __int8 *)v15;
  v51 = (uint64_t *)heap_Calloc(*(_QWORD **)(v14 + 8), v276, 40);
  if (!v51)
  {
LABEL_180:
    log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v47, v48, v49, v50, v256);
    v102 = 0;
    v103 = 0;
    goto LABEL_135;
  }
  v52 = 0;
  while (2)
  {
    v53 = heap_Calloc(*(_QWORD **)(v14 + 8), 128, 1);
    v51[v52] = v53;
    if (!v53)
      goto LABEL_180;
    v54 = heap_Calloc(*(_QWORD **)(v14 + 8), 1, 64);
    v51[v52 + 1] = v54;
    if (!v54)
    {
      log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v55, v56, v57, v58, v256);
LABEL_134:
      v102 = 0;
      v103 = 0;
LABEL_135:
      v15 = (uint64_t)v274;
      goto LABEL_142;
    }
    v52 += 5;
    if (5 * v276 != v52)
      continue;
    break;
  }
  v15 = (uint64_t)v274;
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v280 + 104))(a1, v281, 2, *((unsigned __int16 *)v274 + 548), &v309);
  if ((v59 & 0x80000000) != 0)
  {
    v102 = 0;
    v103 = 0;
    v23 = v59;
    goto LABEL_142;
  }
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, char *))(v280 + 176))(a1, v281, *((unsigned __int16 *)v274 + 548), 0, v277, (char *)&v309 + 2);
  if ((v60 & 0x80000000) != 0 || (v273 = a1, HIWORD(v309) < 2u))
  {
    v23 = v60;
    v102 = 0;
    v103 = 0;
    goto LABEL_142;
  }
  v264 = v51;
  v61 = v309;
  if ((_WORD)v309)
  {
    v262 = 0;
    v260 = 0;
    while (1)
    {
      v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v280 + 120))(v273, v281, v61, (char *)&v308 + 2);
      if ((v62 & 0x80000000) != 0)
        break;
      v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v280 + 168))(v273, v281, (unsigned __int16)v309, 0, 1, &v305, (char *)&v309 + 2);
      if ((v62 & 0x80000000) != 0)
        break;
      if (v305 <= 0xA && ((1 << v305) & 0x610) != 0)
      {
        v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v280 + 168))(v273, v281, (unsigned __int16)v309, 1, 1, &v308, (char *)&v309 + 2);
        if ((v62 & 0x80000000) != 0)
          break;
        v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v280 + 168))(v273, v281, (unsigned __int16)v309, 2, 1, (char *)&v307 + 2, (char *)&v309 + 2);
        if ((v62 & 0x80000000) != 0)
          break;
        v64 = v277;
        if (!(_WORD)v308 || v260 + 1 == (unsigned __int16)v308 && HIWORD(v307) > (unsigned __int16)v308)
        {
          v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, (unsigned __int16)v309, 3, &v297, (char *)&v309 + 2);
          if ((v65 & 0x80000000) != 0)
            goto LABEL_189;
          v66 = v262;
          v67 = (_WORD *)&v51[5 * v262 + 3] + 1;
          if (cstdlib_strstr(v297, "comma"))
          {
            *v67 = 11;
          }
          else
          {
            *v67 = 1;
            v78 = v297;
            while (1)
            {
              v79 = cstdlib_strstr(v78, ".");
              v302 = v79;
              if (!v79)
                break;
              v78 = v79 + 1;
              v302 = v78;
              ++*v67;
            }
          }
          v68 = (unsigned __int16)v308;
          if ((unsigned __int16)v308 >= HIWORD(v307))
          {
            v69 = 0;
          }
          else
          {
            v69 = 0;
            do
            {
              IsChineseLetter = utf8_IsChineseLetter(&(*v277)[v68]);
              v71 = (*v277)[v68];
              if (v71 > 0x3E || ((1 << v71) & 0x4C00510000000000) == 0)
                v73 = 1;
              else
                v73 = v69;
              if (!IsChineseLetter)
                v69 = v73;
              v68 += utf8_determineUTF8CharLength((*v277)[v68]);
            }
            while (v68 < HIWORD(v307));
          }
          v74 = &v51[5 * v262];
          *((_WORD *)v74 + 12) = v309;
          if (!a12)
          {
            TNmarker = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, (unsigned __int16)v309, 14, &v303, (char *)&v309 + 2);
            if ((TNmarker & 0x80000000) != 0)
              goto LABEL_131;
            if (!hlp_NLUStrFind(v303, "POS", &v301, &v300))
            {
              v102 = 0;
              v103 = 0;
              v23 = -1979703296;
LABEL_190:
              v14 = v271;
LABEL_187:
              v15 = (uint64_t)v274;
LABEL_188:
              v46 = v276;
              goto LABEL_142;
            }
            v66 = v262;
            v76 = &v51[5 * v262];
            *(_BYTE *)v76[1] = 0;
            v77 = (char *)v76[1];
            if (v69)
              cstdlib_strcat(v77, "non");
            else
              cstdlib_strncat(v77, v301, v300);
            v64 = v277;
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v280 + 184))(v273, v281, (unsigned __int16)v309, 9, (char *)&v309 + 2) & 0x80000000) == 0&& HIWORD(v309) == 1)
          {
            v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(v280 + 176))(v273, v281, (unsigned __int16)v309, 9, &v51[5 * v66 + 2], (char *)&v309 + 2);
            if ((v65 & 0x80000000) != 0)
            {
LABEL_189:
              v102 = 0;
              v103 = 0;
              v23 = v65;
              goto LABEL_190;
            }
          }
          v80 = HIWORD(v307);
          v81 = (unsigned __int16)v308;
          v82 = HIWORD(v307) - (unsigned __int16)v308;
          v83 = (void *)*v74;
          if (v82 >= 128)
          {
            v84 = heap_Realloc(*(uint64_t **)(v271 + 8), *v74, (v82 + 1));
            *v74 = v84;
            if (!v84)
            {
              v14 = v271;
              log_OutPublic(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v85, v86, v87, v88, v256);
              v102 = 0;
              v103 = 0;
              goto LABEL_187;
            }
            v83 = (void *)v84;
            v81 = (unsigned __int16)v308;
            v80 = HIWORD(v307);
          }
          v15 = (uint64_t)v274;
          cstdlib_memcpy(v83, &(*v64)[v81], v80 - v81);
          *(_BYTE *)(*v74 - (unsigned __int16)v308 + HIWORD(v307)) = 0;
          v89 = &v51[5 * v66];
          v90 = HIWORD(v307);
          *((_DWORD *)v89 + 7) = (unsigned __int16)v308;
          *((_DWORD *)v89 + 8) = v90;
          v260 = v90;
          ++v262;
        }
      }
      v61 = HIWORD(v308);
      LOWORD(v309) = HIWORD(v308);
      if (!HIWORD(v308))
        goto LABEL_120;
    }
    v102 = 0;
    v103 = 0;
    v23 = v62;
    v14 = v271;
    goto LABEL_188;
  }
LABEL_120:
  v14 = v271;
  word_separating_markers = pw_get_word_separating_markers(v280, v271, v273, v281, *(unsigned __int16 *)(v15 + 1096), (uint64_t *)&v294, &v293);
  if ((word_separating_markers & 0x80000000) != 0)
  {
    v102 = 0;
    v103 = 0;
    v23 = word_separating_markers;
    goto LABEL_187;
  }
  v95 = v293;
  log_OutText(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers Count:%d", v92, v93, v94, v293);
  if (v95)
  {
    v99 = 0;
    v100 = v294;
    do
      log_OutText(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers POS:%d", v96, v97, v98, v100[(unsigned __int16)v99++]);
    while (v95 > (unsigned __int16)v99);
  }
  TNmarker = getTNmarker(*((unsigned __int16 *)v274 + 548), v271, v280, v273, v281, &v289);
  if ((TNmarker & 0x80000000) != 0
    || (v101 = v289,
        *a10 = v289,
        *((_WORD *)v274 + 536) = 0,
        *((_QWORD *)v274 + 133) = 0,
        cstdlib_strlen(*((const char **)v274 + 136)),
        TNmarker = pw_nn_process(v271, a6, v51, v276, (uint64_t *)&v292, &v307, a7, a8, a9, v101, v274[16], *((const char ***)v274 + 3), a13), (TNmarker & 0x80000000) != 0)|| (paramc_ParamGetStr(*(_QWORD *)(v271 + 40), (uint64_t)"spaceInPYT", &v304) & 0x80000000) == 0&& !LH_stricmp(v304, "yes")&& (TNmarker = pw_PYT_process(v280, v273,
                     v281,
                     v271,
                     (uint64_t)v51,
                     v276,
                     v294,
                     v95,
                     (uint64_t *)&v292,
                     (unsigned __int16 *)&v307),
        (TNmarker & 0x80000000) != 0))
  {
LABEL_131:
    v102 = 0;
    v103 = 0;
    v23 = TNmarker;
LABEL_132:
    v14 = v271;
    goto LABEL_187;
  }
  v279 = (unsigned __int16 *)(v274 + 1072);
  if (*((_DWORD *)v274 + 8) == 1)
  {
    TNmarker = pw_group_csc(v271, (uint64_t)__b, (uint64_t)v51, v276, (char *)v274 + 36, (uint64_t)v292, (unsigned __int16)v307, v270, v279, *v274, *((const char ***)v274 + 1));
    if ((TNmarker & 0x80000000) != 0)
      goto LABEL_131;
  }
  else
  {
    *v279 = v307;
    *v270 = (uint64_t)v292;
    v292 = 0;
    LOWORD(v307) = 0;
  }
  v114 = pw_respect_word_separating_markers(v280, v271, v273, v281, *((unsigned __int16 *)v274 + 548), v270, v279);
  if ((v114 & 0x80000000) != 0
    || a11 && (v114 = pw_igtree_process(v271, (uint64_t)v51, v270, v279, v276, a11), (v114 & 0x80000000) != 0))
  {
    v102 = 0;
    v103 = 0;
    v23 = v114;
    goto LABEL_132;
  }
  if (!*v277)
  {
    v14 = v271;
    v15 = (uint64_t)v274;
    freePwTids((_QWORD *)v271, (uint64_t)v274);
    v102 = 0;
    v103 = 0;
    v23 = v114;
    goto LABEL_188;
  }
  __s = (char *)heap_Calloc(*(_QWORD **)(v271 + 8), 1024, 1);
  if (!__s)
  {
    v102 = 0;
    v103 = 0;
    goto LABEL_132;
  }
  v103 = (void *)heap_Calloc(*(_QWORD **)(v271 + 8), 64, 1);
  if (!v103)
    goto LABEL_417;
  v115 = *(_QWORD **)(v271 + 8);
  v116 = *((unsigned __int16 *)v274 + 536);
  v117 = cstdlib_strlen(*((const char **)v274 + 136));
  v118 = heap_Calloc(v115, v116, v117 + 2);
  *((_QWORD *)v274 + 135) = v118;
  if (!v118)
    goto LABEL_417;
  cstdlib_strlen(*v277);
  if (!*v279)
  {
LABEL_293:
    freePwTids((_QWORD *)v271, (uint64_t)v274);
    *((_WORD *)v274 + 537) = *((_WORD *)v274 + 536);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v280 + 104))(v273, v281, 2, *((unsigned __int16 *)v274 + 548), &v309);
    if ((v23 & 0x80000000) == 0)
    {
      cstdlib_memset(__s, 0, 0x400uLL);
      cstdlib_memset(v103, 0, 0x40uLL);
      cstdlib_memset(__s1, 0, 0x40uLL);
      HIWORD(v308) = 0;
      v185 = v309;
      if ((_WORD)v309)
      {
        v186 = 0;
        LOWORD(v269) = 0;
        v187 = 0;
        while (1)
        {
          v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v280 + 120))(v273, v281, v185, (char *)&v308 + 2);
          if ((v128 & 0x80000000) != 0)
            goto LABEL_416;
          v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v280 + 168))(v273, v281, (unsigned __int16)v309, 0, 1, &v305, (char *)&v309 + 2);
          if ((v23 & 0x80000000) != 0)
            goto LABEL_417;
          if (v305 <= 0xA && ((1 << v305) & 0x610) != 0)
            break;
LABEL_384:
          v185 = HIWORD(v308);
          LOWORD(v309) = HIWORD(v308);
          if (!HIWORD(v308))
            goto LABEL_417;
        }
        v189 = *v270;
        v190 = *v270 + 184 * (unsigned __int16)v186;
        *(_DWORD *)(v190 + 36) = v305;
        LOWORD(v308) = *(_WORD *)(v190 + 16);
        v191 = *(unsigned __int16 *)(v190 + 18);
        HIWORD(v307) = v191;
        if ((_WORD)v308)
        {
          if (v187 + 1 != (unsigned __int16)v308 || v191 <= (unsigned __int16)v308)
          {
LABEL_383:
            if (*v279 <= (unsigned __int16)++v186)
              goto LABEL_417;
            goto LABEL_384;
          }
        }
        __s2 = 0;
        v193 = v189 + 184 * (unsigned __int16)v186;
        v297 = *(char **)(v193 + 24);
        v303 = 0;
        v303 = *(char **)(v193 + 40);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(v280 + 184))(v273, v281, (unsigned __int16)v309, 10, &v299) & 0x80000000) == 0&& v299 == 1)
        {
          v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, (unsigned __int16)v309, 10, &__s2, (char *)&v309 + 2);
          if ((v23 & 0x80000000) != 0)
            goto LABEL_417;
        }
        if (HIWORD(v307) - (unsigned __int16)v308 > 5)
        {
          v194 = 0;
          goto LABEL_340;
        }
        __dst = 0;
        v286 = 0;
        *(_DWORD *)v285 = 0;
        cstdlib_memcpy(&__dst, &(*v277)[(unsigned __int16)v308], HIWORD(v307) - (unint64_t)(unsigned __int16)v308);
        *((_BYTE *)&__dst + HIWORD(v307) - (unsigned __int16)v308) = 0;
        if (!utf8_IsChineseLetter((const char *)&__dst))
          goto LABEL_337;
        v195 = v293;
        if (v293)
        {
          v196 = v294;
          do
          {
            v197 = *v196++;
            if (v197 == (unsigned __int16)v308)
              goto LABEL_337;
          }
          while (--v195);
        }
        if (*(_DWORD *)v289 && *(_WORD *)(v289 + 4))
        {
          v198 = *(unsigned int **)(v289 + 8);
          v199 = *(unsigned __int16 *)(v289 + 4) - 1;
          do
          {
            v201 = *v198++;
            v200 = v201;
            if (v201 == HIWORD(v307))
              goto LABEL_337;
          }
          while (v200 <= HIWORD(v307) && v199-- != 0);
        }
        if (!cstdlib_strstr(v297, "11") || !utf8_IsChineseLetter((const char *)&v291))
        {
          v284 = 0;
          v203 = cstdlib_strlen((const char *)&__dst);
          v282 = 0;
          v283 = 0;
          utf8_Utf8ToUtf32_Tolerant((uint64_t)&__dst, v203, (uint64_t)&v284, 1u, &v283);
          v204 = v283;
          if (v203 <= 3)
            v204 = 0;
          utf8_Utf32ToUtf8((uint64_t)&v284, 1, (uint64_t)v285, v203 - v204, &v282);
          v285[v282] = 0;
          if (!*v274)
          {
LABEL_337:
            v194 = 0;
LABEL_338:
            if (HIWORD(v307) - (unsigned __int16)v308 <= 2)
            {
              cstdlib_memcpy(&v291, &(*v277)[(unsigned __int16)v308], HIWORD(v307) - (unint64_t)(unsigned __int16)v308);
              *((_BYTE *)&v291 + HIWORD(v307) - (unsigned __int16)v308) = 0;
              goto LABEL_343;
            }
LABEL_340:
            if (checkAttachedPunc(*(const char **)(*v270 + 184 * (unsigned __int16)v186 + 56)))
            {
              LOBYTE(v291) = 0;
            }
            else
            {
              cstdlib_memcpy(&v291, &(*v277)[HIWORD(v307) - 3], 3uLL);
              HIBYTE(v291) = 0;
            }
LABEL_343:
            if (v194)
            {
              if ((_WORD)v269)
              {
                LODWORD(__dst) = 0;
                v23 = pw_check_if_glue_forbidden(v280, v273, v281, *((unsigned __int16 *)v274 + 548), (unsigned __int16)v269, (unsigned __int16)v309, (int *)&__dst);
                v194 = __dst == 0;
                if ((v23 & 0x80000000) != 0)
                  goto LABEL_417;
              }
            }
            if (v303)
            {
              hlp_NLUStrFind(v303, "POS", &v301, &v300);
              if (__s2
                && (v206 = cstdlib_strlen((const char *)__s1), v206 + cstdlib_strlen(__s2) - 63 < 0xFFFFFFFFFFFFFFC0)
                || v301
                && (v210 = cstdlib_strlen((const char *)v103), v210 + cstdlib_strlen(v301) - 62 < 0xFFFFFFFFFFFFFFC0)
                || v297 && (v211 = cstdlib_strlen(__s), v211 + cstdlib_strlen(v297) - 1022 <= 0xFFFFFFFFFFFFFBFFLL))
              {
                log_OutText(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip the merging due to the length limit of prosodic word", v207, v208, v209, v257);
                goto LABEL_362;
              }
            }
            else
            {
              v300 = 0;
              v301 = 0;
            }
            if (v194 && (_WORD)v269 && cstdlib_strcmp(v290, "latin"))
            {
              log_OutText(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"merge special auxiliary word and neutral tone cases", v212, v213, v214, v257);
              (*v277)[(unsigned __int16)v308 - 1] = 45;
              cstdlib_strcat(__s, ".");
              if (v297)
              {
                v215 = cstdlib_strlen(v297);
                if (cstdlib_strlen(__s) + v215 < 0x401)
                {
                  v219 = __s;
                }
                else
                {
                  v216 = *(uint64_t **)(v271 + 8);
                  v217 = cstdlib_strlen(__s);
                  v218 = cstdlib_strlen(v297);
                  v219 = (char *)heap_Realloc(v216, (uint64_t)__s, v217 + v218 + 1);
                  if (!v219)
                    goto LABEL_421;
                }
                cstdlib_strcat(v219, v297);
                __s = v219;
              }
              if (v303)
              {
                if (v300)
                {
                  cstdlib_strcat((char *)v103, "-");
                  if (v301)
                    cstdlib_strncat((char *)v103, v301, v300);
                }
              }
              if (__s2 && cstdlib_strcmp((const char *)__s1, ""))
                cstdlib_strcat((char *)__s1, __s2);
              else
                cstdlib_strcpy((char *)__s1, "");
              v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v280 + 192))(v273, v281, (unsigned __int16)v309);
              if ((v128 & 0x80000000) != 0)
                goto LABEL_416;
              v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v280 + 160))(v273, v281, (unsigned __int16)v269, 2, 1, (char *)&v307 + 2, &v306);
              if ((v128 & 0x80000000) != 0)
                goto LABEL_416;
              v228 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(v280 + 160);
              v229 = cstdlib_strlen(__s);
              v23 = v228(v273, v281, (unsigned __int16)v269, 3, (unsigned __int16)(v229 + 1), __s, &v306);
              if ((v23 & 0x80000000) != 0)
                goto LABEL_417;
              if (v303)
              {
                v230 = cstdlib_strlen(*(const char **)(*v270 + 184 * ((unsigned __int16)v186 - 1) + 40));
                v231 = *(uint64_t **)(v271 + 8);
                v232 = *(_QWORD *)(*v270 + 184 * ((unsigned __int16)v186 - 1) + 40);
                v233 = cstdlib_strlen((const char *)v103);
                v234 = cstdlib_strlen(*(const char **)(*v270 + 184 * ((unsigned __int16)v186 - 1) + 40));
                v235 = heap_Realloc(v231, v232, v233 + v234 + 5);
                *(_QWORD *)(*v270 + 184 * ((unsigned __int16)v186 - 1) + 40) = v235;
                if (!v235)
                {
                  log_OutPublic(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v236, v237, v238, v239, v257);
LABEL_421:
                  v23 = -1979703286;
                  goto LABEL_417;
                }
                *(_BYTE *)(v235 + v230) = 0;
                hlp_NLUStrSet(*(char **)(*v270 + 184 * ((unsigned __int16)v186 - 1) + 40), "POS", (char *)v103);
                v240 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(v280 + 160);
                v241 = cstdlib_strlen(v303);
                v23 = v240(v273, v281, (unsigned __int16)v269, 14, (unsigned __int16)(v241 + 1), v303, &v306);
                if ((v23 & 0x80000000) != 0)
                  goto LABEL_417;
                v303 = "";
              }
              v242 = *v270;
              v243 = (unsigned __int16)v186 - 1;
              *(_WORD *)(*v270 + 184 * v243 + 18) = HIWORD(v307);
              v244 = *(uint64_t **)(v271 + 8);
              v245 = *(_QWORD *)(v242 + 184 * (unsigned __int16)v186 + 24);
              v246 = cstdlib_strlen(__s);
              v247 = (char *)heap_Realloc(v244, v245, v246 + 1);
              *(_QWORD *)(*v270 + 184 * (unsigned __int16)v186 + 24) = v247;
              cstdlib_strcpy(v247, __s);
              v248 = *v270;
              v249 = *v270 + 184 * v243;
              v251 = *(_DWORD *)(v249 + 72);
              v250 = (_BOOL4 *)(v249 + 72);
              if (v251)
                v252 = 1;
              else
                v252 = *(_DWORD *)(v248 + 184 * (unsigned __int16)v186 + 72) != 0;
              *v250 = v252;
              cstdlib_strcat(*(char **)(v248 + 184 * v243 + 56), "-");
              cstdlib_strcat(*(char **)(*((_QWORD *)v274 + 133) + 184 * v243 + 56), *(const char **)(*((_QWORD *)v274 + 133) + 184 * (unsigned __int16)v186 + 56));
              --*((_WORD *)v274 + 536);
              freePWInfo((_QWORD *)v271, (uint64_t)v274, (unsigned __int16)v186);
              v253 = *((unsigned __int16 *)v274 + 536);
              if ((unsigned __int16)v186 != v253)
                cstdlib_memmove((void *)(*v270 + 184 * (unsigned __int16)v186), (const void *)(*v270 + 184 * ((unsigned __int16)v186 + 1)), 184 * (v253 - (unsigned __int16)v186));
              --v186;
              if (cstdlib_strcmp((const char *)__s1, ""))
              {
                v254 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _OWORD *, __int16 *))(v280 + 160);
                v255 = cstdlib_strlen((const char *)__s1);
                v23 = v254(v273, v281, (unsigned __int16)v269, 10, (unsigned __int16)(v255 + 1), __s1, &v306);
                if ((v23 & 0x80000000) != 0)
                  goto LABEL_417;
              }
              goto LABEL_382;
            }
LABEL_362:
            if (v297)
            {
              if (cstdlib_strlen(v297) < 0x401 || (v220 = cstdlib_strlen(v297), v220 <= cstdlib_strlen(__s)))
              {
                v224 = __s;
              }
              else
              {
                v221 = *(uint64_t **)(v271 + 8);
                v222 = cstdlib_strlen(__s);
                v223 = cstdlib_strlen(v297);
                v224 = (char *)heap_Realloc(v221, (uint64_t)__s, v222 + v223 + 1);
                if (!v224)
                  goto LABEL_421;
              }
              cstdlib_strcpy(v224, v297);
              __s = v224;
            }
            cstdlib_strcpy((char *)v103, "");
            if (v300 && v301)
              cstdlib_strncat((char *)v103, v301, v300);
            if (__s2)
              v225 = __s2;
            else
              v225 = "";
            cstdlib_strcpy((char *)__s1, v225);
            v269 = (unsigned __int16)v309;
            if (((*(uint64_t (**)(uint64_t, uint64_t))(v280 + 184))(v273, v281) & 0x80000000) != 0
              || HIWORD(v309) != 1)
            {
              v227 = "latin";
            }
            else
            {
              v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, v269, 9, &v302, (char *)&v309 + 2);
              if ((v23 & 0x80000000) != 0)
                goto LABEL_417;
              v226 = cstdlib_strlen(v302);
              if (v226 > cstdlib_strlen("normal"))
                goto LABEL_417;
              v227 = v302;
            }
            cstdlib_strcpy(v290, v227);
LABEL_382:
            v187 = HIWORD(v307);
            goto LABEL_383;
          }
          v205 = 0;
          while (cstdlib_strcmp(v285, *(const char **)(*((_QWORD *)v274 + 1) + 8 * v205))
               || !utf8_IsChineseLetter((const char *)&v291))
          {
            if (++v205 >= (unint64_t)*v274)
              goto LABEL_337;
          }
        }
        v194 = 1;
        goto LABEL_338;
      }
    }
LABEL_417:
    v14 = v271;
    goto LABEL_418;
  }
  v122 = 0;
  v123 = 0;
  v259 = 64;
  v261 = 1024;
  while (1)
  {
    v268 = v123;
    v124 = *(unsigned __int16 *)(*v270 + 184 * v123 + 8);
    if (v124 == 1)
    {
      v149 = cstdlib_strlen(*v277);
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(v280 + 168))(v273, v281, **(unsigned __int16 **)(*v270 + 184 * v268), 1, 1, *v270 + 184 * v268 + 16, (char *)&v309 + 2);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, char *))(v280 + 168))(v273, v281, **(unsigned __int16 **)(*v270 + 184 * v268), 2, 1, *v270 + 184 * v268 + 18, (char *)&v309 + 2);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, **(unsigned __int16 **)(*v270 + 184 * v268), 3, &v297, (char *)&v309 + 2);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
      if (a12)
      {
        v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(v280 + 184))(v273, v281, (unsigned __int16)v309, 14, &v299);
        v263 = v299;
        if (!v299)
          goto LABEL_266;
        if (v299 != 1)
        {
          if ((v128 & 0x80000000) != 0)
            goto LABEL_416;
          v263 = v122;
          if (!v122)
          {
LABEL_266:
            v263 = 0;
            v303 = 0;
            v150 = 1;
LABEL_286:
            v174 = v268 + v268 * v149;
            v175 = *((_QWORD *)v274 + 133) + 184 * v268;
            v176 = *(_WORD *)(v175 + 18);
            v177 = *(unsigned __int16 *)(v175 + 16);
            v178 = (unsigned __int16)(v176 - v177);
            cstdlib_memcpy((void *)(*((_QWORD *)v274 + 135) + v174), (const void *)(*((_QWORD *)v274 + 136) + v177), v178);
            *(_BYTE *)(*((_QWORD *)v274 + 135) + v174 + v178) = 0;
            v179 = *((_QWORD *)v274 + 133);
            *(_QWORD *)(v179 + 184 * v268 + 56) = *((_QWORD *)v274 + 135) + v174;
            if ((v150 & 1) != 0)
            {
              *(_QWORD *)(v179 + 184 * v268 + 40) = 0;
            }
            else
            {
              v180 = cstdlib_strlen(v303);
              v181 = (char *)heap_Alloc(*(_QWORD *)(v271 + 8), v180 + 1);
              *(_QWORD *)(*v270 + 184 * v268 + 40) = v181;
              if (!v181)
                goto LABEL_417;
              cstdlib_strcpy(v181, v303);
            }
            v182 = *(_QWORD *)(v271 + 8);
            v183 = cstdlib_strlen(v297);
            v184 = (char *)heap_Alloc(v182, v183 + 1);
            *(_QWORD *)(*v270 + 184 * v268 + 24) = v184;
            if (!v184)
              goto LABEL_417;
            cstdlib_strcpy(v184, v297);
            goto LABEL_292;
          }
        }
      }
      else
      {
        v263 = 1;
      }
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, **(unsigned __int16 **)(*v270 + 184 * v268), 14, &v303, (char *)&v309 + 2);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
      v150 = 0;
      goto LABEL_286;
    }
    if (!v124)
      break;
    __s2 = 0;
    v258 = cstdlib_strlen(*v277);
    cstdlib_memset(__s, 0, 0x400uLL);
    cstdlib_memset(v103, 0, 0x40uLL);
    cstdlib_memset(__s1, 0, 0x40uLL);
    v125 = *v270;
    if (*(_WORD *)(*v270 + 184 * v268 + 8))
    {
      v126 = 0;
      v127 = 0;
      v266 = 1;
      while (1)
      {
        v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v280 + 168))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(v125 + 184 * v268) + 2 * v126), 1, 1, &v308, (char *)&v309 + 2);
        if ((v128 & 0x80000000) != 0)
          break;
        v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v280 + 168))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126), 2, 1, (char *)&v307 + 2, (char *)&v309 + 2);
        if ((v128 & 0x80000000) != 0)
          break;
        v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126), 3, &v297, (char *)&v309 + 2);
        if ((v128 & 0x80000000) != 0)
          break;
        if (a12
          && ((*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(v280 + 184))(v273, v281, (unsigned __int16)v309, 14, &v299), v299 != 1))
        {
          v263 = 0;
          v265 = 1;
        }
        else
        {
          v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126), 14, &v303, (char *)&v309 + 2);
          if ((v128 & 0x80000000) != 0)
            break;
          v265 = 0;
          v263 = 1;
        }
        if (!v126)
          *(_WORD *)(*v270 + 184 * v268 + 16) = v308;
        if ((v265 & 1) == 0)
        {
          v129 = v288;
          v130 = *(uint64_t **)(v271 + 8);
          v131 = cstdlib_strlen(v303);
          v132 = v131;
          if (v129)
          {
            v133 = cstdlib_strlen(v129);
            v134 = (char *)heap_Realloc(v130, (uint64_t)v129, v132 + v133 + 2);
            if (!v134)
              goto LABEL_417;
            v135 = v134;
            v288 = v134;
            cstdlib_strcat(v134, ";");
            cstdlib_strcat(v135, v303);
          }
          else
          {
            v136 = (char *)heap_Alloc((uint64_t)v130, v131 + 1);
            v288 = v136;
            if (!v136)
              goto LABEL_417;
            cstdlib_strcpy(v136, v303);
          }
        }
        if (v266)
        {
          v266 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(v280 + 184))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126), 10, &v299) & 0x80000000) == 0&& v299 == 1)
          {
            v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v280 + 176))(v273, v281, *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126), 10, &__s2, (char *)&v309 + 2);
            if ((v128 & 0x80000000) != 0)
              break;
            v266 = 1;
          }
        }
        else
        {
          v266 = 0;
        }
        if (v126)
        {
          v137 = cstdlib_strlen(__s);
          if (v137 + cstdlib_strlen(v297) + 1 > v261)
          {
            v138 = heap_Realloc(*(uint64_t **)(v271 + 8), (uint64_t)__s, (unsigned __int16)(v261 + 1024));
            if (!v138)
              goto LABEL_417;
            __s = (char *)v138;
            v261 += 1024;
          }
          (*v277)[(unsigned __int16)v308 - 1] = 45;
          if (cstdlib_strlen(v297))
            cstdlib_strcat(__s, ".");
          v139 = *(unsigned __int16 *)(*(_QWORD *)(*v270 + 184 * v268) + 2 * v126);
          v140 = cstdlib_strstr(v297, "{SEP");
          v302 = v140;
          if (v140)
          {
            v302 = v140 + 4;
            v140[4] += v127;
          }
        }
        else
        {
          v139 = 0;
        }
        cstdlib_strcat(__s, v297);
        if ((v265 & 1) == 0 && hlp_NLUStrFind(v303, "POS", &v301, &v300))
        {
          v141 = cstdlib_strlen((const char *)v103);
          if (v141 + v300 + 2 > v259)
          {
            v142 = heap_Realloc(*(uint64_t **)(v271 + 8), (uint64_t)v103, (unsigned __int16)(v259 + 64) + 1);
            if (!v142)
              goto LABEL_417;
            v103 = (void *)v142;
            v259 += 64;
          }
          if (cstdlib_strlen((const char *)v103))
            cstdlib_strcat((char *)v103, "-");
          cstdlib_strncat((char *)v103, v301, v300);
        }
        v143 = v266;
        if (!__s2)
          v143 = 0;
        if (v143 == 1)
          cstdlib_strcat((char *)__s1, __s2);
        v144 = v297;
        if (v297)
        {
          do
          {
            v145 = v144;
            v146 = v127;
            v127 = 0;
            v302 = cstdlib_strstr(v144, "{SEP");
            v144 = v302 + 1;
          }
          while (v302);
          for (i = v145; ; i = v148 + 1)
          {
            v148 = cstdlib_strstr(i, ".");
            v302 = v148;
            if (!v148)
              break;
            ++v146;
          }
        }
        else
        {
          v146 = v127;
        }
        if ((_DWORD)v139)
        {
          v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v280 + 192))(v273, v281, v139);
          if ((v128 & 0x80000000) != 0)
            break;
        }
        v127 = v146 + 1;
        v125 = *v270;
        if (++v126 >= (unint64_t)*(unsigned __int16 *)(*v270 + 184 * v268 + 8))
          goto LABEL_268;
      }
LABEL_416:
      v23 = v128;
      goto LABEL_417;
    }
    v266 = 1;
    v263 = v122;
LABEL_268:
    if (v263)
    {
      v128 = pw_merge_NLU(v271, &v288);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
      v125 = *v270;
    }
    if (*((_DWORD *)v274 + 8) == 1)
    {
      pw_split_csc_pw(v125 + 184 * v268, __s);
      v125 = *v270;
    }
    v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v280 + 160))(v273, v281, **(unsigned __int16 **)(v125 + 184 * v268), 2, 1, (char *)&v307 + 2, &v306);
    if ((v128 & 0x80000000) != 0)
      goto LABEL_416;
    v151 = v268 + v268 * v258;
    v152 = HIWORD(v307);
    v153 = *((_QWORD *)v274 + 133) + 184 * v268;
    *(_WORD *)(v153 + 18) = HIWORD(v307);
    v154 = *(unsigned __int16 *)(v153 + 16);
    v155 = (unsigned __int16)(v152 - v154);
    cstdlib_memcpy((void *)(*((_QWORD *)v274 + 135) + v151), (const void *)(*((_QWORD *)v274 + 136) + v154), v155);
    *(_BYTE *)(*((_QWORD *)v274 + 135) + v151 + v155) = 0;
    v156 = (unsigned __int16 **)(*((_QWORD *)v274 + 133) + 184 * v268);
    v156[7] = (unsigned __int16 *)(*((_QWORD *)v274 + 135) + v151);
    v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(v280 + 160);
    v158 = **v156;
    v159 = cstdlib_strlen(__s);
    v128 = v157(v273, v281, v158, 3, (unsigned __int16)(v159 + 1), __s, &v306);
    if ((v128 & 0x80000000) != 0)
      goto LABEL_416;
    v160 = *(_QWORD *)(v271 + 8);
    v161 = cstdlib_strlen(__s);
    v162 = (char *)heap_Alloc(v160, v161 + 1);
    *(_QWORD *)(*v270 + 184 * v268 + 24) = v162;
    if (!v162)
      goto LABEL_417;
    cstdlib_strcpy(v162, __s);
    if (v263)
    {
      v163 = v288;
      hlp_NLUStrRemoveKeyVal(v288, "POS");
      hlp_NLUStrSet(v163, "POS", (char *)v103);
      v164 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(v280 + 160);
      v165 = **(unsigned __int16 **)(*v270 + 184 * v268);
      v166 = v288;
      v167 = cstdlib_strlen(v288);
      v164(v273, v281, v165, 14, (unsigned __int16)(v167 + 1), v166, &v306);
      v168 = *(_QWORD *)(v271 + 8);
      v169 = cstdlib_strlen(v166);
      v170 = (char *)heap_Alloc(v168, v169 + 1);
      *(_QWORD *)(*v270 + 184 * v268 + 40) = v170;
      if (!v170)
        goto LABEL_417;
      cstdlib_strcpy(v170, v166);
      v303 = "";
      if (v166)
      {
        heap_Free(*(_QWORD **)(v271 + 8), (uint64_t)v166);
        v288 = 0;
      }
    }
    if (v266)
    {
      v171 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, __int16 *))(v280 + 160);
      v172 = **(unsigned __int16 **)(*v270 + 184 * v268);
      v173 = cstdlib_strlen((const char *)__s1);
      v128 = v171(v273, v281, v172, 10, (unsigned __int16)(v173 + 1), __s1, &v306);
      if ((v128 & 0x80000000) != 0)
        goto LABEL_416;
    }
LABEL_292:
    v123 = v268 + 1;
    v122 = v263;
    if (*v279 <= (unsigned __int16)(v268 + 1))
      goto LABEL_293;
  }
  v14 = v271;
  log_OutText(*(_QWORD *)(v271 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error: the prosody word should has at least one lexical word", v119, v120, v121, v257);
LABEL_418:
  v15 = (uint64_t)v274;
  v46 = v276;
  v51 = v264;
  v102 = (uint64_t)__s;
LABEL_142:
  if (v288)
  {
    heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v288);
    v288 = 0;
  }
  if ((v23 & 0x80000000) != 0)
  {
    v104 = v289;
    if (v289)
    {
      v105 = *(_QWORD *)(v289 + 8);
      if (v105)
        heap_Free(*(_QWORD **)(v14 + 8), v105);
      *(_QWORD *)(v104 + 8) = 0;
      heap_Free(*(_QWORD **)(v14 + 8), v104);
      v289 = 0;
    }
    freePwTids((_QWORD *)v14, v15);
  }
  if (v294)
    heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v294);
  if (v51)
  {
    if (v46)
    {
      v106 = v46;
      v107 = v51 + 1;
      do
      {
        v108 = *(v107 - 1);
        if (v108)
        {
          heap_Free(*(_QWORD **)(v14 + 8), v108);
          *(v107 - 1) = 0;
        }
        if (*v107)
        {
          heap_Free(*(_QWORD **)(v14 + 8), *v107);
          *v107 = 0;
        }
        v107 += 5;
        --v106;
      }
      while (v106);
    }
    heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v51);
  }
  v109 = (uint64_t)v292;
  if (v292)
  {
    v110 = (unsigned __int16)v307;
    if ((_WORD)v307)
    {
      v111 = v292;
      do
      {
        if (*v111)
        {
          heap_Free(*(_QWORD **)(v14 + 8), *v111);
          *v111 = 0;
        }
        v111 += 23;
        --v110;
      }
      while (v110);
    }
    heap_Free(*(_QWORD **)(v14 + 8), v109);
    v292 = 0;
  }
  if (v102)
    heap_Free(*(_QWORD **)(v14 + 8), v102);
  if (v103)
    heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v103);
  if ((_WORD)v307)
    v112 = 0;
  else
    v112 = v23 == -1979703288;
  if (v112)
    return 0;
  else
    return v23;
}

uint64_t pw_get_word_separating_markers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v31;
  unsigned __int16 v32;

  v32 = 0;
  v31 = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, unsigned __int16 *))(a1 + 176))(a3, a4, a5, 1, &v31, &v32);
  if ((v13 & 0x80000000) != 0)
  {
LABEL_18:
    if (*a6)
    {
      heap_Free(*(_QWORD **)(a2 + 8), *a6);
      *a6 = 0;
    }
    return v13;
  }
  if (!v32)
  {
    log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Warning: no marker in lingdb.", v10, v11, v12, (uint64_t)v31);
    return v13;
  }
  v14 = heap_Calloc(*(_QWORD **)(a2 + 8), v32, 4);
  *a6 = v14;
  if (!v14)
    goto LABEL_17;
  *a7 = 0;
  v19 = v32;
  if (v32)
  {
    v20 = 0;
    v21 = (uint64_t)v31;
    v22 = v32;
    v23 = (uint64_t)v31;
    v24 = v31;
    do
    {
      v25 = *v24;
      v24 += 8;
      v26 = (1 << v25) & 0x3C0010124001140;
      if (v25 <= 0x39 && v26 != 0)
      {
        *(_DWORD *)(v14 + 4 * v20) = *(_DWORD *)(v23 + 12) - *(_DWORD *)(v21 + 12);
        v20 = *a7 + 1;
        *a7 = v20;
      }
      v23 = (uint64_t)v24;
      --v22;
    }
    while (v22);
  }
  else
  {
    v20 = 0;
  }
  v28 = v20 + 1;
  if (v28 > v19)
  {
    v29 = heap_Realloc(*(uint64_t **)(a2 + 8), v14, 4 * v28);
    *a6 = v29;
    if (!v29)
    {
LABEL_17:
      log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v31);
      v13 = 2315264010;
      goto LABEL_18;
    }
  }
  return v13;
}

uint64_t getTNmarker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v33;
  unsigned __int16 v34;

  v12 = 2315264010;
  v34 = 0;
  v33 = 0;
  v13 = heap_Alloc(*(_QWORD *)(a2 + 8), 24);
  v14 = v13;
  if (!v13)
    goto LABEL_32;
  *(_DWORD *)v13 = 0;
  *(_WORD *)(v13 + 4) = 0;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **, unsigned __int16 *))(a3 + 176))(a4, a5, a1, 1, &v33, &v34);
  v16 = v15;
  if ((v15 & 0x80000000) != 0)
  {
    v12 = v15;
    goto LABEL_27;
  }
  v17 = v34;
  if (v34)
  {
    v18 = v33;
    v19 = v33;
    do
    {
      v21 = *v19;
      v19 += 8;
      v20 = v21;
      if (v21 == 34 || v20 == 70 && v18[6] >= 3u)
      {
        if (!*(_DWORD *)v14)
          *(_DWORD *)v14 = 1;
        ++*(_WORD *)(v14 + 4);
      }
      v18 = v19;
      --v17;
    }
    while (v17);
  }
  if (!*(_DWORD *)v14)
    goto LABEL_24;
  v22 = heap_Alloc(*(_QWORD *)(a2 + 8), 4 * *(unsigned __int16 *)(v14 + 4));
  *(_QWORD *)(v14 + 8) = v22;
  if (v22)
  {
    v23 = heap_Alloc(*(_QWORD *)(a2 + 8), 2 * *(unsigned __int16 *)(v14 + 4));
    *(_QWORD *)(v14 + 16) = v23;
    if (v23)
    {
      if (v34)
      {
        v24 = 0;
        v25 = 0;
        v26 = v33 + 3;
        do
        {
          v27 = *(v26 - 3);
          if (v27 == 34)
          {
            LOWORD(v29) = 0;
            v28 = v25;
            *(_DWORD *)(*(_QWORD *)(v14 + 8) + 4 * v25) = *v26;
          }
          else
          {
            if (v27 != 70 || v26[3] < 3u)
              goto LABEL_23;
            v28 = v25;
            *(_DWORD *)(*(_QWORD *)(v14 + 8) + 4 * v25) = *v26;
            v29 = v26[3];
          }
          *(_WORD *)(v23 + 2 * v28) = v29;
          ++v25;
LABEL_23:
          v26 += 8;
          ++v24;
        }
        while (v24 < v34);
      }
LABEL_24:
      v12 = v16;
      if ((v16 & 0x80000000) == 0)
      {
        v12 = v16;
        goto LABEL_32;
      }
    }
LABEL_27:
    v30 = *(_QWORD *)(v14 + 8);
    if (v30)
    {
      heap_Free(*(_QWORD **)(a2 + 8), v30);
      *(_QWORD *)(v14 + 8) = 0;
    }
  }
  v31 = *(_QWORD *)(v14 + 16);
  if (v31)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v31);
    *(_QWORD *)(v14 + 16) = 0;
  }
  heap_Free(*(_QWORD **)(a2 + 8), v14);
  v14 = 0;
LABEL_32:
  *a6 = v14;
  return v12;
}

uint64_t pw_PYT_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, unsigned int a8, uint64_t *a9, unsigned __int16 *a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  int v16;
  unsigned __int16 **v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  unsigned __int16 **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v108;
  uint64_t v109;
  const char *v115;
  __int16 v116;
  const char *v117;

  v10 = *a9;
  v11 = *a10;
  v117 = 0;
  v12 = a6;
  v116 = 0;
  v115 = 0;
  if (v11)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v108 = a8;
    v105 = (unsigned __int16 *)(a5 + 24);
    v16 = 1;
    while (1)
    {
      v17 = (unsigned __int16 **)(v10 + 184 * v14);
      if (*((unsigned __int16 *)v17 + 4) > 1u)
        goto LABEL_9;
      v18 = **v17;
      v116 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v18, 9, &v116);
      if ((v13 & 0x80000000) == 0 && v116 == 1)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v18, 9, &v117, &v116);
        if ((v13 & 0x80000000) != 0)
          goto LABEL_75;
      }
      if (v117 && cstdlib_strcmp(v117, "mnc!"))
      {
LABEL_9:
        v19 = 1;
        v16 = 1;
      }
      else
      {
        v20 = 0;
        if (v12)
        {
          v21 = v105;
          while (1)
          {
            v22 = *v21;
            v21 += 20;
            if (v22 == **v17)
              break;
            if (v12 == ++v20)
            {
              LODWORD(v20) = v12;
              goto LABEL_16;
            }
          }
          LODWORD(v20) = (unsigned __int16)v20;
        }
LABEL_16:
        if (a8)
        {
          v23 = *(unsigned __int16 *)(a5 + 40 * v20 + 28);
          v24 = a7;
          v25 = v108;
          while (1)
          {
            v26 = *v24++;
            if (v26 == v23)
              break;
            if (!--v25)
              goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          if (v16 != 1)
          {
            v116 = 0;
            v115 = 0;
            v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v18, 19, &v116);
            v16 = 0;
            v19 = 1;
            if ((v13 & 0x80000000) == 0 && v116 == 1)
            {
              v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v18, 19, &v115, &v116);
              if ((v13 & 0x80000000) != 0)
                return v13;
              v16 = 0;
              v19 = cstdlib_strcmp(v115, "left") == 0;
            }
            goto LABEL_26;
          }
        }
        v16 = 0;
        v19 = 1;
      }
LABEL_26:
      v15 += v19;
      if (v11 <= ++v14)
        goto LABEL_29;
    }
  }
  v15 = 0;
  v13 = 0;
LABEL_29:
  v27 = a4;
  v28 = heap_Calloc(*(_QWORD **)(a4 + 8), v15, 184);
  if (!v28)
  {
    v13 = 2315264010;
    log_OutPublic(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v101);
    if (!v10)
      return v13;
    goto LABEL_75;
  }
  *a10 = v15;
  *a9 = v28;
  if (!v11)
  {
LABEL_74:
    if (!v10)
      return v13;
LABEL_75:
    heap_Free(*(_QWORD **)(a4 + 8), v10);
    return v13;
  }
  v109 = v28;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  while (1)
  {
    v37 = (unsigned __int16 **)(v10 + 184 * v34);
    if (*((unsigned __int16 *)v37 + 4) >= 2u)
      goto LABEL_39;
    v38 = **v37;
    v116 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v38, 9, &v116) & 0x80000000) == 0
      && v116 == 1)
    {
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v38, 9, &v117, &v116);
      if ((v39 & 0x80000000) != 0)
      {
LABEL_77:
        v13 = v39;
        goto LABEL_75;
      }
    }
    if (v117 && cstdlib_strcmp(v117, "mnc!"))
    {
      v27 = a4;
LABEL_39:
      log_OutText(*(_QWORD *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> Not a PYT PW. Skip by copying pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      v45 = pw_copy_pw(v27, (uint64_t)v37, v109 + 184 * (unsigned __int16)v35, v40, v41, v42, v43, v44);
      if ((v45 & 0x80000000) != 0)
        return v45;
      log_OutText(*(_QWORD *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v46, v47, v48, v33);
      ++v35;
      v36 = 1;
      goto LABEL_67;
    }
    v49 = 0;
    if (v12)
    {
      v50 = (unsigned __int16 *)(a5 + 24);
      while (1)
      {
        v51 = *v50;
        v50 += 20;
        if (v51 == **v37)
          break;
        if (v12 == ++v49)
        {
          LODWORD(v49) = v12;
          goto LABEL_47;
        }
      }
      LODWORD(v49) = (unsigned __int16)v49;
    }
LABEL_47:
    if (a8)
    {
      v52 = *(unsigned __int16 *)(a5 + 40 * v49 + 28);
      v53 = a7;
      v54 = a8;
      while (1)
      {
        v55 = *v53++;
        if (v55 == v52)
          break;
        if (!--v54)
          goto LABEL_51;
      }
      if (v36 == 1)
      {
LABEL_62:
        v27 = a4;
        v86 = (unsigned __int16)v35;
        log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> I am First PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      }
      else
      {
        v27 = a4;
        v86 = (unsigned __int16)v35;
        log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> I am a PYT PW start with Marker! Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      }
LABEL_65:
      v45 = pw_copy_pw(v27, (uint64_t)v37, v109 + 184 * v86, v87, v88, v89, v90, v91);
      if ((v45 & 0x80000000) != 0)
        return v45;
LABEL_66:
      log_OutText(*(_QWORD *)(v27 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v92, v93, v94, v33);
      v36 = 0;
      ++v35;
      goto LABEL_67;
    }
LABEL_51:
    if (v36 == 1)
      goto LABEL_62;
    v116 = 0;
    v115 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, v38, 19, &v116) & 0x80000000) != 0|| v116 != 1)
    {
      v27 = a4;
      v86 = (unsigned __int16)v35;
      log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> The WORD_DCT record doesn't has field LD_W_INPUTSPACETAG. Copy pPWIn[%d] to pPWOut[%d].", v56, v57, v58, v33);
      goto LABEL_65;
    }
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(a1 + 176))(a2, a3, v38, 19, &v115, &v116);
    if ((v45 & 0x80000000) != 0)
      return v45;
    v62 = cstdlib_strcmp(v115, "left");
    v27 = a4;
    v63 = *(_QWORD *)(a4 + 32);
    if (!v62)
    {
      log_OutText(v63, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> There is a space before this PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v59, v60, v61, v33);
      v45 = pw_copy_pw(a4, (uint64_t)v37, v109 + 184 * (unsigned __int16)v35, v95, v96, v97, v98, v99);
      if ((v45 & 0x80000000) != 0)
        return v45;
      goto LABEL_66;
    }
    v104 = (unsigned __int16)v35 - 1;
    log_OutText(v63, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)">>> No space before this PYT unit. Merge pPWIn[%d] to pPWOut[%d] ...", v59, v60, v61, v33);
    log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pPWIn[%d] is: ", v64, v65, v66, v33);
    v67 = pw_show_pw(a4, (uint64_t)v37);
    if ((v67 & 0x80000000) != 0)
      break;
    log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Before merge, pPWOut[%d] is: ", v68, v69, v70, v104);
    v103 = (uint64_t *)(v109 + 184 * (int)v104);
    v67 = pw_show_pw(a4, (uint64_t)v103);
    if ((v67 & 0x80000000) != 0)
      break;
    v71 = v109 + 184 * (int)v104;
    v73 = *(_WORD *)(v71 + 8);
    v72 = (_WORD *)(v71 + 8);
    *v72 = v73 + 1;
    v74 = heap_Realloc(*(uint64_t **)(a4 + 8), *v103, 2 * (unsigned __int16)(v73 + 1));
    *v103 = v74;
    if (!v74)
    {
      v13 = 2315264010;
      log_OutPublic(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v75, v76, v77, v78, v102);
      return v13;
    }
    v79 = *v37;
    *(_WORD *)(v74 + 2 * (unsigned __int16)*v72 - 2) = **v37;
    heap_Free(*(_QWORD **)(a4 + 8), (uint64_t)v79);
    log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"After merge, pPWOut[%d] is: ", v80, v81, v82, v104);
    v39 = pw_show_pw(a4, (uint64_t)v103);
    if ((v39 & 0x80000000) != 0)
      goto LABEL_77;
    log_OutText(*(_QWORD *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Merge pPWIn[%d] to pPWOut[%d] done!", v83, v84, v85, v33);
    v36 = 0;
LABEL_67:
    v33 = ++v34;
    if ((int)v33 >= v11)
    {
      v13 = 0;
      goto LABEL_74;
    }
  }
  v13 = v67;
  if (v10)
    goto LABEL_75;
  return v13;
}

uint64_t pw_group_csc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _WORD *a9, unsigned __int16 a10, const char **a11)
{
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned __int16 **v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  const char *v37;
  uint64_t v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  unsigned int v45;
  const char *v46;
  _BOOL4 IsChineseLetter;
  unsigned int v48;
  unsigned __int16 v49;
  uint64_t v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  const char **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int16 v79;
  uint64_t v80;
  unsigned __int16 **v81;
  unsigned int v82;
  unsigned __int16 *v83;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned int v100;
  __int16 v101;
  int v102;
  unsigned __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;

  v12 = a7;
  v107 = *MEMORY[0x24BDAC8D0];
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw_group_csc Begin", a6, a7, (uint64_t)a8, v90);
  v16 = heap_Calloc(*(_QWORD **)(a1 + 8), v12, 184);
  *a8 = v16;
  if (!v16)
  {
    v87 = 2315264010;
    v88 = *(_QWORD *)(a1 + 32);
LABEL_76:
    log_OutPublic(v88, (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v91);
    return v87;
  }
  v92 = a1;
  *a9 = 0;
  v106 = 0;
  v105 = 0;
  if (v12)
  {
    LOWORD(v21) = 0;
    v22 = 0;
    v23 = 0;
    v24 = a4;
    v25 = (unsigned __int16 *)(v16 + 8);
    v26 = (unsigned __int16 *)(a3 + 24);
    v96 = a8;
    v95 = v12;
    while (1)
    {
      v97 = v22;
      v98 = v25;
      v93 = v23;
      *v25 = 0;
      v27 = a3;
      while (1)
      {
        v28 = (unsigned __int16 **)(a6 + 184 * (unsigned __int16)v21);
        if (v24)
        {
          v29 = 0;
          v30 = **v28;
          v31 = v26;
          while (1)
          {
            v32 = *v31;
            v31 += 20;
            if (v32 == v30)
              break;
            if (v24 == ++v29)
            {
              v100 = v24;
              goto LABEL_12;
            }
          }
          v100 = (unsigned __int16)v29;
LABEL_12:
          v34 = 0;
          v35 = v26;
          while (1)
          {
            v36 = *v35;
            v35 += 20;
            if (v36 == v30)
              break;
            if (v24 == ++v34)
            {
              v33 = v24;
              goto LABEL_17;
            }
          }
          v33 = (unsigned __int16)v34;
        }
        else
        {
          v100 = 0;
          v33 = 0;
        }
LABEL_17:
        v37 = *(const char **)(v27 + 40 * v33);
        v101 = Utf8_Utf8NbrOfSymbols(v37);
        if (v24)
        {
          v38 = 0;
          v39 = **v28;
          v40 = v26;
          while (1)
          {
            v41 = *v40;
            v40 += 20;
            if (v41 == v39)
              break;
            if (v24 == ++v38)
            {
              v38 = v24;
              break;
            }
          }
          v42 = 0;
          v102 = *(_DWORD *)(v27 + 40 * v38 + 36);
          v43 = v26;
          while (1)
          {
            v44 = *v43;
            v43 += 20;
            if (v44 == v39)
              break;
            if (v24 == ++v42)
            {
              v45 = v24;
              goto LABEL_28;
            }
          }
          v45 = (unsigned __int16)v42;
        }
        else
        {
          v45 = 0;
          v102 = *(_DWORD *)(v27 + 36);
        }
LABEL_28:
        v46 = *(const char **)(v27 + 40 * v45 + 16);
        utf8_getUTF8Char((uint64_t)v37, 0, &v105);
        IsChineseLetter = utf8_IsChineseLetter((const char *)&v105);
        v48 = *(_DWORD *)(a2 + 1024);
        if (v48)
        {
          v49 = 0;
          v50 = v27 + 40 * v100;
          v51 = *(_DWORD *)(v50 + 28);
          v52 = (_DWORD *)(v50 + 32);
          while (*(_DWORD *)(a2 + 4 * v49) > v51 || *v52 > *(_DWORD *)(a2 + 4 * v49 + 512))
          {
            if (v48 <= ++v49)
              goto LABEL_33;
          }
          v53 = 0;
        }
        else
        {
LABEL_33:
          v53 = 1;
        }
        v54 = a6 + 184 * (unsigned __int16)v21;
        v56 = *(unsigned __int16 *)(v54 + 8);
        v55 = (unsigned __int16 *)(v54 + 8);
        if (v56 != 1)
          break;
        v57 = (unsigned __int16)(v101 - 1);
        if (v57 != 1 && (v57 != 2 || !v102))
          break;
        v58 = cstdlib_strcmp(v46, "latin") && IsChineseLetter;
        v59 = v58 ? v53 : 0;
        if (v59 != 1)
          break;
        v27 = a3;
        if (cstdlib_strstr(a5, v37))
          goto LABEL_55;
        v60 = a11;
        v61 = a10;
        if (a10)
        {
          while (cstdlib_strcmp(v37, *v60))
          {
            ++v60;
            if (!--v61)
              goto LABEL_50;
          }
LABEL_55:
          v104 = v21 + 1;
          v62 = v97;
          v66 = v98;
          LOWORD(v21) = *v98;
          v65 = v92;
          v64 = v96;
LABEL_56:
          *v66 = v21 + 1;
          goto LABEL_57;
        }
LABEL_50:
        if (v102 || *(_DWORD *)(a6 + 184 * (unsigned __int16)v21 + 72))
          goto LABEL_55;
        v62 = v97;
        v63 = *v98 + 1;
        *v98 = v63;
        LOWORD(v21) = v21 + 1;
        v64 = v96;
        v26 = (unsigned __int16 *)(a3 + 24);
        if (v95 <= (unsigned __int16)v21 || v63 >= 3u)
        {
          v104 = v21;
          v65 = v92;
          goto LABEL_57;
        }
      }
      v104 = v21;
      v62 = v97;
      v65 = v92;
      v64 = v96;
      if (!*v98)
      {
        *v98 = *v55;
        v66 = &v104;
        goto LABEL_56;
      }
LABEL_57:
      ++*a9;
      *(_QWORD *)(*v64 + 184 * v62) = heap_Calloc(*(_QWORD **)(v65 + 8), *(unsigned __int16 *)(*v64 + 184 * v62 + 8), 2);
      v67 = *v64;
      v68 = *(_QWORD *)(*v64 + 184 * v62);
      if (!v68)
        break;
      v69 = v67 + 184 * v62;
      v72 = *(unsigned __int16 *)(v69 + 8);
      v70 = (unsigned __int16 *)(v69 + 8);
      v71 = v72;
      v21 = v104;
      v73 = v104 - 1;
      if (v72 <= *(unsigned __int16 *)(a6 + 184 * v73 + 8))
      {
        if (v71)
        {
          v85 = 0;
          v86 = *(_QWORD *)(a6 + 184 * v73);
          do
          {
            *(_WORD *)(v68 + 2 * v85) = *(_WORD *)(v86 + 2 * v85);
            ++v85;
          }
          while (v85 < *v70);
        }
        *(_DWORD *)(v67 + 184 * v62 + 72) = *(_DWORD *)(a6 + 184 * v73 + 72);
      }
      else
      {
        v74 = heap_Calloc(*(_QWORD **)(v65 + 8), 1, 1024);
        if (!v74)
          break;
        v75 = (const char *)v74;
        v76 = *v64;
        v77 = *v64 + 184 * v62;
        *(_DWORD *)(v77 + 12) = 1;
        v78 = *(unsigned __int16 *)(v77 + 8);
        if (v78)
        {
          v79 = 0;
          v80 = -(uint64_t)v78;
          v81 = (unsigned __int16 **)(a6 + 184 * v21 - 184 * v78);
          v82 = v78 - 1;
          do
          {
            v83 = *v81;
            v81 += 23;
            *(_WORD *)(*(_QWORD *)(*v64 + 184 * v62) + 2 * (v80 + *(unsigned __int16 *)(*v64 + 184 * v62 + 8))) = *v83;
            sprintf((char *)&v75[v79], "%d-", *v83);
            v79 = cstdlib_strlen(v75);
            ++v80;
          }
          while ((unsigned __int16)v82--);
          v76 = *v64;
          v65 = v92;
          v73 = v21 - 1;
        }
        *(_DWORD *)(v76 + 184 * v62 + 72) = *(_DWORD *)(a6 + 184 * v73 + 72);
        log_OutText(*(_QWORD *)(v65 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"\t group [tids:%s, ntok: %d]", v18, v19, v20, (uint64_t)v75);
        heap_Free(*(_QWORD **)(v65 + 8), (uint64_t)v75);
        v67 = *v64;
      }
      v26 = (unsigned __int16 *)(a3 + 24);
      v23 = v93 + 1;
      v22 = (unsigned __int16)(v93 + 1);
      v25 = (unsigned __int16 *)(v67 + 184 * v22 + 8);
      v106 = 0;
      v105 = 0;
      if (v21 >= v95)
        goto LABEL_73;
    }
    v87 = 2315264010;
    v88 = *(_QWORD *)(v65 + 32);
    goto LABEL_76;
  }
LABEL_73:
  log_OutText(*(_QWORD *)(v92 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pw_group_csc End", v18, v19, v20, v91);
  return 0;
}

uint64_t pw_respect_word_separating_markers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned __int16 *a7)
{
  unsigned __int16 *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unsigned __int16 *v35;
  int v37;

  if (!*a7)
    return 0;
  v7 = a7;
  v13 = 0;
  v14 = 0;
  v37 = 0;
  v15 = *a6;
  while (1)
  {
    if (*(unsigned __int16 *)(v15 + 184 * v13 + 8) >= 2u)
    {
      v37 = 0;
      v15 = *a6;
      if (*(unsigned __int16 *)(*a6 + 184 * v13 + 8) >= 2u)
        break;
    }
LABEL_17:
    if (++v13 >= (unint64_t)*v7)
      return v14;
  }
  v16 = 1;
  while (1)
  {
    v17 = (unsigned __int16 *)(*(_QWORD *)(v15 + 184 * v13) + 2 * v16);
    v14 = pw_check_if_glue_forbidden(a1, a3, a4, a5, *(v17 - 1), *v17, &v37);
    if ((v14 & 0x80000000) != 0)
      return v14;
    if (v37)
    {
      v18 = heap_Realloc(*(uint64_t **)(a2 + 8), *a6, 184 * *v7 + 184);
      if (!v18)
        goto LABEL_21;
      *a6 = v18;
      cstdlib_memset((void *)(v18 + 184 * *v7), 0, 0xB8uLL);
      v23 = *v7 + 1;
      *v7 = v23;
      v35 = v7;
      if (v13 + 2 < (unint64_t)v23)
        cstdlib_memmove((void *)(*a6 + 184 * (v13 + 2)), (const void *)(*a6 + 184 * (v13 + 1)), (0xB800000000 * (v23 - v13) - 0x17000000000) >> 32);
      v24 = *a6 + 184 * v13;
      v25 = *(_WORD *)(v24 + 8) - v16;
      v34 = v13 + 1;
      v26 = 184 * (v13 + 1);
      *(_WORD *)(*a6 + v26 + 8) = v25;
      *(_WORD *)(v24 + 8) = v16;
      *(_QWORD *)(*a6 + v26) = heap_Calloc(*(_QWORD **)(a2 + 8), 2, v25);
      v15 = *a6;
      v27 = *(_QWORD *)(*a6 + v26);
      v7 = v35;
      if (!v27)
      {
LABEL_21:
        log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v34);
        return 2315264010;
      }
      v28 = v15 + 184 * v34;
      v30 = *(unsigned __int16 *)(v28 + 8);
      v29 = (unsigned __int16 *)(v28 + 8);
      if (v30)
      {
        v31 = 0;
        v32 = *(_QWORD *)(v15 + 184 * v13) + 2 * v16;
        do
        {
          *(_WORD *)(v27 + 2 * v31) = *(_WORD *)(v32 + 2 * v31);
          ++v31;
        }
        while (v31 < *v29);
      }
      goto LABEL_17;
    }
    ++v16;
    v15 = *a6;
    if (*(unsigned __int16 *)(*a6 + 184 * v13 + 8) <= v16)
      goto LABEL_17;
  }
}

uint64_t pw_igtree_process(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  const char **v41;
  const char *v42;
  uint64_t v43;
  _WORD *v44;
  unsigned __int16 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _WORD *v59;
  __int16 v60;
  unsigned __int16 v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  int v74;
  _WORD *v75;
  uint64_t *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v86;
  const char *v87;

  v6 = a6;
  v9 = a1;
  inited = 2315264010;
  v11 = *a4;
  v87 = 0;
  v12 = *a3;
  v13 = (char **)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(a6 + 1296) - 8);
  if (!v13)
    return inited;
  v14 = (uint64_t *)v13;
  inited = hlp_igtree_initFeatureVector(v9, v13, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
  if ((inited & 0x80000000) != 0)
  {
    v31 = 0;
    goto LABEL_58;
  }
  v15 = heap_Calloc(*(_QWORD **)(v9 + 8), a5, 4);
  if (!v15)
  {
    v31 = 0;
    inited = 2315264010;
    goto LABEL_58;
  }
  v16 = v15;
  v83 = v9;
  v81 = (uint64_t)v14;
  v75 = a4;
  v76 = a3;
  if (!(_DWORD)v11)
  {
LABEL_54:
    *v75 = v11;
    *v76 = v12;
    v31 = v16;
    v14 = (uint64_t *)v81;
LABEL_57:
    v9 = v83;
    goto LABEL_58;
  }
  v17 = 0;
  v18 = 0;
  v80 = a5 - 1;
  v82 = v6;
  while (1)
  {
    v19 = v12 + 184 * v17;
    v22 = *(unsigned __int16 *)(v19 + 8);
    v21 = (unsigned __int16 *)(v19 + 8);
    v20 = v22;
    v23 = v17;
    v79 = v11;
    if (v22)
    {
      if (v80 != v18)
        break;
    }
LABEL_8:
    v24 = v23 + 1;
    v11 = v79;
    v25 = v24 >= (unsigned __int16)v79;
    v17 = v24;
    v6 = v82;
    if (v25)
      goto LABEL_54;
  }
  v26 = 0;
  v27 = 0;
  v78 = v17 + 1;
  v77 = v17 + 2;
  v74 = ~(_DWORD)v17;
  v28 = 2;
  while (1)
  {
    v86 = v27;
    v29 = v23;
    v30 = v18;
    v31 = v16;
    *(_DWORD *)(v16 + 4 * v18) = v20 - 1 == v26;
    v6 = v82;
    v14 = (uint64_t *)v81;
    v32 = hlp_igtree_setFeatureVector(v83, v81, *(_QWORD *)(v82 + 1312), *(unsigned __int8 *)(v82 + 1296), a2, a5, v18);
    if ((v32 & 0x80000000) != 0)
    {
      inited = v32;
      goto LABEL_57;
    }
    inited = igtree_Process(v82, v81, &v87);
    if ((inited & 0x80000000) != 0)
    {
      v14 = (uint64_t *)v81;
      v6 = v82;
      goto LABEL_57;
    }
    if (cstdlib_strcmp(v87, "NOMATCH"))
    {
      v33 = cstdlib_strcmp(v87, "1");
      v34 = *(_DWORD *)(v31 + 4 * v30);
      if (v34 != (v33 == 0))
        break;
    }
    v16 = v31;
    v35 = v12;
    v23 = v29;
LABEL_17:
    v36 = v86;
LABEL_18:
    v18 = v30 + 1;
    v12 = v35;
    v37 = v35 + 184 * v23;
    v38 = *(unsigned __int16 *)(v37 + 8);
    v21 = (unsigned __int16 *)(v37 + 8);
    v20 = v38;
    v26 = v36 + 1;
    v28 += 2;
    v39 = v36 + 1 >= (unint64_t)v38 || v80 == (unsigned __int16)(v30 + 1);
    v27 = v36 + 1;
    if (v39)
      goto LABEL_8;
  }
  v23 = v29;
  if (!(_DWORD)v30 || !v33)
    goto LABEL_31;
  v40 = a2 + 40 * v30;
  v42 = *(const char **)(v40 + 16);
  v41 = (const char **)(v40 + 16);
  if (cstdlib_strcmp(v42, "normal") && cstdlib_strcmp(*v41, "mnx") || *(_DWORD *)(a2 + 40 * v30 + 36))
  {
    v16 = v31;
    v35 = v12;
    goto LABEL_17;
  }
  v34 = *(_DWORD *)(v31 + 4 * v30);
LABEL_31:
  if (v34)
  {
    v43 = v12 + 184 * v78;
    v44 = (_WORD *)(v43 + 8);
    v45 = *v21 + *(_WORD *)(v43 + 8);
    *v21 = v45;
    v46 = heap_Realloc(*(uint64_t **)(v83 + 8), *(_QWORD *)(v12 + 184 * v23), 2 * v45);
    *(_QWORD *)(v12 + 184 * v23) = v46;
    if (!v46)
      goto LABEL_61;
    LOWORD(v47) = *v44;
    if (*v44)
    {
      v48 = 0;
      v49 = *(_QWORD *)v43;
      do
      {
        *(_WORD *)(v46 + 2 * (v48 - (unsigned __int16)v47 + *v21)) = *(_WORD *)(v49 + 2 * v48);
        ++v48;
        v47 = (unsigned __int16)*v44;
      }
      while (v48 < v47);
    }
    v35 = v12;
    v50 = v12 + 184 * v23;
    v52 = *(_DWORD *)(v50 + 72);
    v51 = (_DWORD *)(v50 + 72);
    if (v52)
      *v51 = *(_DWORD *)(v12 + 184 * v78 + 72);
    *(_DWORD *)(v12 + 184 * v23 + 12) |= *(_DWORD *)(v12 + 184 * v78 + 12);
    heap_Free(*(_QWORD **)(v83 + 8), *(_QWORD *)v43);
    v53 = v79;
    if (v77 < (unsigned __int16)v79)
      cstdlib_memmove((void *)v43, (const void *)(v12 + 184 * v77), 184 * ((unsigned __int16)v79 - (int)v23) - 368);
    v54 = 0xFFFF;
    v16 = v31;
    v36 = v86;
LABEL_51:
    inited = 0;
    v79 = (v54 + v53);
    goto LABEL_18;
  }
  v9 = v83;
  v55 = heap_Realloc(*(uint64_t **)(v83 + 8), v12, 184 * (unsigned __int16)v79 + 184);
  if (v55)
  {
    v56 = v55;
    cstdlib_memset((void *)(v55 + 184 * (unsigned __int16)v79), 0, 0xB8uLL);
    v57 = v78;
    if (v78 < (unsigned __int16)v79)
    {
      cstdlib_memmove((void *)(v56 + 184 * v77), (const void *)(v56 + 184 * v78), 184 * ((unsigned __int16)v79 + v74));
      v57 = v78;
    }
    v58 = v56 + 184 * v23;
    v60 = *(_WORD *)(v58 + 8);
    v59 = (_WORD *)(v58 + 8);
    v61 = v60 + ~(_WORD)v26;
    v62 = v56 + 184 * v57;
    v63 = 184 * v57;
    *(_WORD *)(v62 + 8) = v61;
    v64 = (_WORD *)(v62 + 8);
    v65 = heap_Alloc(*(_QWORD *)(v83 + 8), 2 * v61);
    *(_QWORD *)(v56 + v63) = v65;
    if (!v65)
    {
LABEL_61:
      inited = 2315264010;
      v9 = v83;
      goto LABEL_63;
    }
    if (*v64)
    {
      v66 = 0;
      v67 = *(_QWORD *)(v56 + 184 * v23) + v28;
      do
      {
        *(_WORD *)(v65 + 2 * v66) = *(_WORD *)(v67 + 2 * v66);
        ++v66;
      }
      while (v66 < (unsigned __int16)*v64);
    }
    v68 = 0;
    v35 = v56;
    v69 = v56 + 184 * v23;
    v71 = *(_DWORD *)(v69 + 12);
    v70 = (_DWORD *)(v69 + 12);
    v72 = v56 + 184 * v78;
    *(_DWORD *)(v72 + 72) = v70[15];
    v70[15] = 0;
    *(_DWORD *)(v72 + 112) = v70[25];
    v70[25] = 0;
    v16 = v31;
    if (v71 == 1)
    {
      *v70 = 0;
      v68 = 1;
    }
    *(_DWORD *)(v56 + 184 * v78 + 12) = v68;
    v36 = v86;
    *v59 = v86 + 1;
    v54 = 1;
    v53 = v79;
    goto LABEL_51;
  }
  inited = 2315264010;
LABEL_63:
  v14 = (uint64_t *)v81;
  v6 = v82;
LABEL_58:
  hlp_igtree_freeFeatureVector(v9, v14, (unsigned __int16)(*(unsigned __int8 *)(v6 + 1296) - 1));
  heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)v14);
  if (v31)
    heap_Free(*(_QWORD **)(v9 + 8), v31);
  return inited;
}

uint64_t pw_merge_NLU(uint64_t a1, char **a2)
{
  char *v2;
  unsigned __int16 v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *i;
  unsigned int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  size_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *j;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int KeyIdx;
  uint64_t v49;
  unsigned __int8 *v50;
  const char *v51;
  unsigned int v52;
  char *v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  const char *v61;
  const char *v62;
  char *v63;
  _QWORD *v64;
  size_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  size_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  size_t v73;
  char *v74;
  char *v75;
  const char *v76;
  int v77;
  int v78;
  int v79;
  const char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 v90;
  unint64_t k;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  char *__s1;
  unsigned int __n;
  size_t __n_4;
  char *__s;
  char *v101;
  char *v102;
  char *v103;
  unsigned int v104;
  char **v105;
  char *__s2;
  unsigned __int16 v107;

  v2 = *a2;
  if (!*a2)
    return 0;
  v5 = 0;
  do
  {
    if (hlp_NLUStrKeyLen(v2) >= 3)
    {
      v6 = *v2 - 69;
      v7 = v6 > 0xE;
      v8 = (1 << v6) & 0x4011;
      v9 = v7 || v8 == 0;
      if (!v9 && v2[1] == 95)
        ++v5;
    }
    v2 = hlp_NLUStrNext(v2);
  }
  while (v2);
  if (!v5)
    return 0;
  v10 = 2315264010;
  v11 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, v5);
  if (v11)
  {
    v12 = v11;
    v13 = *a2;
    if (!*a2)
      goto LABEL_160;
    v105 = a2;
    v104 = -1979703286;
    v14 = 0;
    do
    {
      v15 = hlp_NLUStrKeyLen(v13);
      if (v15 >= 3)
      {
        v16 = *v13 - 69;
        v7 = v16 > 0xE;
        v17 = (1 << v16) & 0x4011;
        v18 = v7 || v17 == 0;
        if (!v18 && v13[1] == 95)
        {
          v19 = v15;
          v20 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v15 - 1);
          if (!v20)
          {
            v26 = v12;
            v10 = 2315264010;
            goto LABEL_185;
          }
          v21 = v20;
          cstdlib_strncpy(v20, v13 + 2, v19 - 2);
          if (v14)
          {
            v22 = v14;
            v23 = (const char **)v12;
            v24 = v14;
            while (1)
            {
              if (!*v23)
                goto LABEL_29;
              if (!cstdlib_strcmp(*v23, v21))
                break;
              ++v23;
              if (!--v24)
                goto LABEL_29;
            }
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v21);
          }
          else
          {
            v22 = 0;
LABEL_29:
            *(_QWORD *)(v12 + 8 * v22) = v21;
            ++v14;
          }
        }
      }
      v13 = hlp_NLUStrNext(v13);
    }
    while (v13);
    if (!v14)
    {
LABEL_160:
      v10 = 0;
      goto LABEL_191;
    }
    v25 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 8 * v14);
    if (v25)
    {
      v26 = v25;
      v27 = heap_Calloc(*(_QWORD **)(a1 + 8), 2, v14);
      if (v27)
      {
        v28 = v27;
        for (i = *v105; i; i = hlp_NLUStrNext(i))
        {
          v30 = hlp_NLUStrKeyLen(i);
          if (v30 >= 3)
          {
            v31 = *i - 69;
            v7 = v31 > 0xE;
            v32 = (1 << v31) & 0x4011;
            v33 = v7 || v32 == 0;
            if (!v33 && i[1] == 95)
            {
              v34 = 0;
              v35 = (unsigned __int16)(v30 - 2);
              while (1)
              {
                v36 = *(const char **)(v26 + 8 * v34);
                if (!v36)
                  goto LABEL_49;
                if (!cstdlib_strncmp(v36, i + 2, v35))
                  break;
                if (v14 == ++v34)
                  goto LABEL_49;
              }
              if ((v34 & 0x8000) == 0)
                ++*(_WORD *)(v28 + 2 * v34);
            }
          }
LABEL_49:
          ;
        }
        v37 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, v14);
        if (!v37)
        {
          v10 = 2315264010;
          goto LABEL_184;
        }
        v38 = v37;
        v39 = 0;
        if ((v14 & 0xFFFE) != 0)
          v40 = v14;
        else
          v40 = 1;
        do
        {
          v41 = heap_Calloc(*(_QWORD **)(a1 + 8), 8, *(unsigned __int16 *)(v28 + 2 * v39));
          *(_QWORD *)(v38 + 8 * v39) = v41;
          if (!v41)
          {
            v87 = v28;
            v42 = 0;
            goto LABEL_170;
          }
          ++v39;
        }
        while (v40 != v39);
        v42 = heap_Calloc(*(_QWORD **)(a1 + 8), 2, v14);
        if (!v42)
        {
LABEL_166:
          v87 = v28;
          goto LABEL_170;
        }
        v96 = v40;
        for (j = *v105; j; j = hlp_NLUStrNext(j))
        {
          v44 = hlp_NLUStrKeyLen(j);
          if (v44 >= 3)
          {
            v45 = *j - 69;
            v7 = v45 > 0xE;
            v46 = (1 << v45) & 0x4011;
            if (!v7 && v46 != 0 && j[1] == 95)
            {
              KeyIdx = hlp_getKeyIdx(v26, v14, j + 2, (unsigned __int16)(v44 - 2));
              if ((KeyIdx & 0x80000000) == 0)
              {
                v49 = (unsigned __int16)KeyIdx;
                v102 = *(char **)(v38 + 8 * (unsigned __int16)KeyIdx);
                v50 = hlp_NLUStrKeyValue(j);
                v51 = (const char *)v50;
                v52 = v50 ? hlp_NLUStrLength((char *)v50) : 0;
                if (!hlp_checkValExist(v102, *(unsigned __int16 *)(v42 + 2 * v49), v51, v52))
                {
                  v53 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v52 + 2);
                  if (!v53)
                  {
LABEL_167:
                    v87 = v28;
                    goto LABEL_169;
                  }
                  if (v51)
                  {
                    v54 = v52;
                    v55 = v53;
                    cstdlib_strncpy(v53, v51, v54);
                  }
                  else
                  {
                    v55 = v53;
                    cstdlib_strcpy(v53, " ");
                  }
                  v56 = *(unsigned __int16 *)(v42 + 2 * v49);
                  *(_QWORD *)&v102[8 * v56] = v55;
                  *(_WORD *)(v42 + 2 * v49) = v56 + 1;
                }
              }
            }
          }
        }
        v57 = 0;
        v40 = v96;
        do
        {
          v58 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(v38 + 8 * v57), 8 * *(unsigned __int16 *)(v42 + 2 * v57));
          if (!v58)
            goto LABEL_166;
          *(_QWORD *)(v38 + 8 * v57++) = v58;
        }
        while (v96 != v57);
        v59 = 0;
        while (!*(_WORD *)(v42 + 2 * v59))
        {
LABEL_157:
          ++v59;
          v40 = v96;
          if (v59 == v96)
          {
            v87 = v28;
            v104 = 0;
            goto LABEL_170;
          }
        }
        v60 = 0;
        while (1)
        {
          v61 = *(const char **)(v26 + 8 * v59);
          v62 = *(const char **)(*(_QWORD *)(v38 + 8 * v59) + 8 * v60);
          v63 = *v105;
          v107 = 0;
          __s2 = 0;
          v103 = v63;
          if (!v63)
            goto LABEL_131;
          __n_4 = v60;
          if (v62)
            __n = (unsigned __int16)cstdlib_strlen(v62);
          else
            __n = 0;
          v64 = *(_QWORD **)(a1 + 8);
          v65 = cstdlib_strlen(v61);
          v66 = (char *)heap_Calloc(v64, 1, v65 + 3);
          if (!v66)
            goto LABEL_167;
          v67 = v66;
          __s1 = (char *)v62;
          cstdlib_strcpy(v66, "S_");
          cstdlib_strcat(v67, v61);
          v68 = *(_QWORD **)(a1 + 8);
          v69 = cstdlib_strlen(v61);
          v70 = (char *)heap_Calloc(v68, 1, v69 + 3);
          if (!v70)
          {
            __s = 0;
            v101 = 0;
LABEL_124:
            v81 = -1979703286;
            goto LABEL_125;
          }
          v71 = v70;
          cstdlib_strcpy(v70, "I_");
          __s = v71;
          cstdlib_strcat(v71, v61);
          v72 = *(_QWORD **)(a1 + 8);
          v73 = cstdlib_strlen(v61);
          v74 = (char *)heap_Calloc(v72, 1, v73 + 3);
          if (!v74)
          {
            v101 = 0;
            goto LABEL_124;
          }
          v75 = v74;
          cstdlib_strcpy(v74, "E_");
          v101 = v75;
          cstdlib_strcat(v75, v61);
          v76 = __s1;
          if (!hlp_NLUStrFind(v103, v67, &__s2, &v107))
            goto LABEL_96;
          v77 = v107;
          if (!__s1 || v107)
            goto LABEL_93;
          if (cstdlib_strcmp(__s1, " "))
            break;
LABEL_97:
          if (!hlp_NLUStrFind(v103, __s, &__s2, &v107))
            goto LABEL_105;
          v78 = v107;
          if (__s1 && !v107)
          {
            if (!cstdlib_strcmp(__s1, " "))
              goto LABEL_106;
            v78 = v107;
          }
          if (!__s1 || v78 != __n || cstdlib_strncmp(__s1, __s2, __n))
          {
LABEL_105:
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)__s);
            __s = 0;
          }
LABEL_106:
          if (!hlp_NLUStrFind(v103, v101, &__s2, &v107))
            goto LABEL_116;
          v79 = v107;
          if (__s1 && !v107)
          {
            if (!cstdlib_strcmp(__s1, " "))
              goto LABEL_117;
            v79 = v107;
          }
          if (!__s1 || v79 != __n)
          {
LABEL_116:
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v101);
            v101 = 0;
            if (!__s1)
              goto LABEL_119;
            goto LABEL_117;
          }
          if (cstdlib_strncmp(__s1, __s2, __n))
          {
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v101);
            v101 = 0;
          }
LABEL_117:
          if (!cstdlib_strcmp(__s1, " "))
            v76 = 0;
LABEL_119:
          hlp_NLUStrRemoveRangeKey((unsigned __int8 *)v103, v61, v76);
          if (v67)
          {
            if (!__s)
            {
              v80 = v67;
              if (!v101)
                goto LABEL_122;
            }
          }
          if (v67)
            v84 = 1;
          else
            v84 = __s == 0;
          v85 = !v84;
          if (!v84)
          {
            v86 = __s;
            if (!v101)
              goto LABEL_141;
          }
          if (v67 || __s || !v101)
          {
            if (v67 && v101)
            {
              hlp_NLUStrAppendKeyVal(v103, v67, v76);
              v80 = v101;
              goto LABEL_122;
            }
            if (v67 && __s && (v80 = v67, !v101))
            {
LABEL_122:
              hlp_NLUStrAppendKeyVal(v103, v80, v76);
              v81 = 0;
            }
            else
            {
              if (!v101)
                v85 = 0;
              v86 = v101;
              if ((v85 & 1) != 0)
              {
LABEL_141:
                hlp_NLUStrAppendKeyVal(v103, v86, v76);
                v82 = (uint64_t)__s;
                v81 = 0;
LABEL_127:
                heap_Free(*(_QWORD **)(a1 + 8), v82);
LABEL_128:
                v83 = (uint64_t)v101;
                if (!v101)
                  goto LABEL_130;
                goto LABEL_129;
              }
              v81 = 0;
              if (!v67)
              {
LABEL_126:
                v82 = (uint64_t)__s;
                if (__s)
                  goto LABEL_127;
                goto LABEL_128;
              }
            }
LABEL_125:
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v67);
            goto LABEL_126;
          }
          hlp_NLUStrAppendKeyVal(v103, v101, v76);
          v83 = (uint64_t)v101;
          v81 = 0;
LABEL_129:
          heap_Free(*(_QWORD **)(a1 + 8), v83);
LABEL_130:
          v60 = __n_4;
          if (v81 < 0)
          {
            v87 = v28;
            v104 = v81;
LABEL_169:
            v40 = v96;
LABEL_170:
            v88 = 0;
            do
            {
              v89 = *(_QWORD *)(v38 + 8 * v88);
              if (v89)
              {
                if (v42)
                {
                  v90 = *(_WORD *)(v42 + 2 * v88);
                  if (v90)
                  {
                    for (k = 0; k < v90; ++k)
                    {
                      v92 = *(_QWORD *)(*(_QWORD *)(v38 + 8 * v88) + 8 * k);
                      if (v92)
                      {
                        heap_Free(*(_QWORD **)(a1 + 8), v92);
                        v90 = *(_WORD *)(v42 + 2 * v88);
                      }
                    }
                    v89 = *(_QWORD *)(v38 + 8 * v88);
                  }
                }
                heap_Free(*(_QWORD **)(a1 + 8), v89);
              }
              ++v88;
            }
            while (v88 != v40);
            heap_Free(*(_QWORD **)(a1 + 8), v38);
            v28 = v87;
            if (v42)
              heap_Free(*(_QWORD **)(a1 + 8), v42);
            v10 = v104;
LABEL_184:
            heap_Free(*(_QWORD **)(a1 + 8), v28);
            v12 = v26;
LABEL_185:
            if (v14)
            {
LABEL_186:
              v93 = 0;
              do
              {
                v94 = *(_QWORD *)(v26 + 8 * v93);
                if (v94)
                  heap_Free(*(_QWORD **)(a1 + 8), v94);
                ++v93;
              }
              while (v14 != v93);
              v12 = v26;
            }
LABEL_191:
            heap_Free(*(_QWORD **)(a1 + 8), v12);
            return v10;
          }
LABEL_131:
          if (++v60 >= *(unsigned __int16 *)(v42 + 2 * v59))
            goto LABEL_157;
        }
        v77 = v107;
LABEL_93:
        if (__s1 && v77 == __n && !cstdlib_strncmp(__s1, __s2, __n))
          goto LABEL_97;
LABEL_96:
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v67);
        v67 = 0;
        goto LABEL_97;
      }
    }
    else
    {
      v26 = v12;
    }
    v10 = 2315264010;
    goto LABEL_186;
  }
  return v10;
}

void pw_split_csc_pw(uint64_t a1, char *a2)
{
  char v5;
  char *v6;
  char v7;
  char *v8;
  char __dst[1024];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  bzero(__dst, 0x400uLL);
  if (*(_DWORD *)(a1 + 12) == 1 && (*(_WORD *)(a1 + 8) & 0xFFFE) == 4 && a2 != 0)
  {
    v5 = 1;
    v6 = a2;
    do
    {
      v7 = v5;
      v8 = cstdlib_strstr(v6, ".");
      if (v8)
        v6 = v8 + 1;
      else
        v6 = 0;
      if (!v8)
        break;
      v5 = 0;
    }
    while ((v7 & 1) != 0);
    if (v8)
    {
      cstdlib_strncpy(__dst, a2, ((_DWORD)v6 + ~(_DWORD)a2));
      cstdlib_strcat(__dst, "{SEP2}");
      cstdlib_strcat(__dst, v6);
      cstdlib_strcpy(a2, __dst);
    }
  }
}

uint64_t checkAttachedPunc(const char *a1)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v5;

  v2 = cstdlib_strlen(a1);
  v5 = 0;
  v3 = v2;
  if (v2)
  {
    if (cstdlib_strchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", a1[v2 - 1]))
    {
      return 1;
    }
    else
    {
      if ((_DWORD)v3 != 3)
        return 0;
      v3 = 1;
      utf8_Utf8ToUtf32_Tolerant((uint64_t)a1, 3u, (uint64_t)&v5 + 4, 1u, &v5);
      if (HIDWORD(v5) != 8230)
        return 0;
    }
  }
  return v3;
}

uint64_t pw_check_if_glue_forbidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t result;
  uint64_t v15;
  int *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  *a7 = 0;
  result = pw_check_if_word_in_prompt(a1, a2, a3, a5, a7);
  if ((result & 0x80000000) == 0 && !*a7)
  {
    result = pw_check_if_word_in_prompt(a1, a2, a3, a6, a7);
    if ((result & 0x80000000) == 0 && !*a7)
    {
      v24 = 0;
      v25 = 0;
      v23 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, a4, 1, &v23, &v24);
      if ((result & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, a5, 1, 1, (char *)&v25 + 2, (char *)&v24 + 2);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, a6, 2, 1, &v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v24)
          {
            v15 = 0;
            v16 = (int *)(v23 + 12);
            while (1)
            {
              v17 = *v16;
              v16 += 8;
              if (v17 - *(_DWORD *)(v23 + 12) > HIWORD(v25))
                break;
              if ((unsigned __int16)v24 == ++v15)
                goto LABEL_24;
            }
            v18 = (unsigned __int16)v15;
          }
          else
          {
            v18 = 0;
          }
          if (v18 < (unsigned __int16)v24)
          {
            v19 = (unsigned __int16)v24 - (unint64_t)v18;
            v20 = (_DWORD *)(v23 + 32 * v18);
            while (v20[3] - *(_DWORD *)(v23 + 12) < (unsigned __int16)v25)
            {
              if (*v20 <= 0x39u && ((1 << *v20) & 0x3C0010124001140) != 0)
              {
                v22 = 1;
                goto LABEL_25;
              }
              v20 += 8;
              if (!--v19)
                break;
            }
          }
LABEL_24:
          v22 = 0;
LABEL_25:
          *a7 = v22;
        }
      }
    }
  }
  return result;
}

char *checkremoveNormalSym(char *a1, unsigned __int16 *a2, unsigned __int8 a3)
{
  int v5;
  char *result;
  unsigned int v7;
  unint64_t v8;
  unsigned __int16 v9;
  int v10;

  v5 = a3;
  result = cstdlib_strchr(a1, a3);
  if (result)
  {
    v7 = *a2;
    if (*a2)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = a1[v8];
        if (v10 != v5)
        {
          if (v8 != v9)
          {
            a1[v9] = v10;
            v7 = *a2;
          }
          ++v9;
        }
        ++v8;
      }
      while (v8 < v7);
    }
    else
    {
      v9 = 0;
    }
    a1[v9] = 0;
    *a2 = v9;
  }
  return result;
}

uint64_t pw_copy_pw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copying PW ... ", a6, a7, a8, v19);
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pPWIn and pPWOut is: ", v11, v12, v13, v20);
  v17 = pw_show_pw(a1, a2);
  if ((v17 & 0x80000000) == 0)
  {
    *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy PW done!", v14, v15, v16, v21);
  }
  return v17;
}

uint64_t pw_show_pw(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  int v10;

  v4 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 1000);
  if (!v4)
    return 2315264010;
  v8 = (const char *)v4;
  if (*(_WORD *)(a2 + 8))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      sprintf((char *)&v8[v10], "%d-", *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * v9));
      v10 = cstdlib_strlen(v8);
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(a2 + 8));
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"\tPW [tids:%s, ntok:%d]", v5, v6, v7, (uint64_t)v8);
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v8);
  return 0;
}

uint64_t hlp_getKeyIdx(uint64_t a1, unsigned int a2, char *__s2, size_t __n)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  const char *v9;

  if (a2)
  {
    v6 = 0;
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *(const char **)(a1 + 8 * v6);
      if (!v9)
        break;
      if (!cstdlib_strncmp(v9, __s2, v7))
        return (__int16)v6;
      ++v6;
    }
    while (v8 != v6);
  }
  LOWORD(v6) = -1;
  return (__int16)v6;
}

char *hlp_checkValExist(char *result, unsigned int a2, const char *a3, unsigned int a4)
{
  const char *v4;
  const char **v5;
  size_t v6;
  uint64_t v7;

  if (result)
  {
    if (a3)
      v4 = a3;
    else
      v4 = " ";
    if (a2)
    {
      v5 = (const char **)result;
      if (a3)
        v6 = a4;
      else
        v6 = 1;
      v7 = a2;
      while (1)
      {
        result = (char *)*v5;
        if (!*v5)
          break;
        if (cstdlib_strlen(result) == v6 && !cstdlib_strncmp(*v5, v4, v6))
          return (char *)1;
        ++v5;
        if (!--v7)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pw_check_if_word_in_prompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  int v10;

  v10 = 0;
  *a5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, a4, 1, 1, &v10, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *))(a1 + 312))(a2, a3, (unsigned __int16)v10, a5);
  return result;
}

uint64_t getphraseCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, char **a6, char **a7)
{
  uint64_t result;
  BOOL v15;
  unsigned int v16;
  char v17;
  __int16 v18;
  const char **v19;

  v19 = 0;
  v18 = -1;
  v17 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", "fephrase_slience", &v19, &v18, &v17);
  if ((result & 0x80000000) == 0)
  {
    if (v19)
      v15 = v18 == 0;
    else
      v15 = 1;
    if (v15)
      v16 = 300;
    else
      v16 = LH_atou(*v19);
    *a5 = v16;
    result = getPunc(a1, a2, a3, a4, a6, (uint64_t)"fephrase_strongphrasepunc");
    if ((result & 0x80000000) == 0)
      return getPunc(a1, a2, a3, a4, a7, (uint64_t)"fephrase_weakphrasepunc");
  }
  return result;
}

uint64_t getPunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v8;
  BOOL v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  char v16;
  __int16 v17;
  const char **v18;

  v18 = 0;
  v17 = 0;
  v16 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", a6, &v18, &v17, &v16);
  if ((v8 & 0x80000000) == 0)
  {
    if (v18)
      v9 = v17 == 0;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 10);
      if (v10)
      {
        v11 = v10;
        cstdlib_strcpy(v10, ",;:.?!_~|");
        v12 = v11 + 9;
LABEL_11:
        *v12 = 0;
        *a5 = v11;
        return v8;
      }
    }
    else
    {
      v13 = cstdlib_strlen(*v18);
      v14 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v13 + 1);
      if (v14)
      {
        v11 = v14;
        cstdlib_strcpy(v14, *v18);
        v12 = &v11[v13 - 1];
        goto LABEL_11;
      }
    }
    return 2315264010;
  }
  return v8;
}

uint64_t com_crf_GetCfgParamValNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char **a6)
{
  uint64_t v7;
  char *v8;
  char **v10;
  unsigned __int8 __c;
  __int16 __c_1;

  *a6 = a5;
  __c_1 = -1;
  __c = 0;
  v10 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v7 & 0x80000000) == 0 && __c_1)
  {
    v8 = cstdlib_strchr(*v10, __c);
    if (v8)
      *v8 = 0;
    *a6 = *v10;
  }
  return v7;
}

uint64_t ruleNNInit(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int Str;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int ChunkData;
  char *v41;
  char *v42;
  unsigned __int16 v43;
  unsigned int v44;
  int v45;
  char *v46;
  char *i;
  unsigned int v48;
  char v49;
  int v50;
  int v51;
  uint64_t v53;
  char *v54;
  const char *v55;
  int v56;
  unsigned __int16 v57;
  uint64_t j;
  char *v59;
  unsigned int v61;
  uint64_t v62;
  unsigned __int16 v63;
  char *v65;
  int v66[2];
  unsigned int v67;
  int __c[2];
  uint64_t v69;
  int v70;
  char __s1[4];
  char v72;
  char *v73;
  char *__s2;
  char v75[16];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD __dst[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  *(_OWORD *)v75 = 0u;
  v76 = 0u;
  v72 = 0;
  v70 = 0;
  *(_DWORD *)__s1 = 0;
  *(_QWORD *)__c = 0;
  v69 = 0;
  v67 = 0;
  v65 = 0;
  *(_QWORD *)v66 = 0;
  if ((com_crf_GetCfgParamValNN(a5, a6, a4, (uint64_t)"fephrase_max_rule", "1024", &v65) & 0x80000000) != 0)
    v15 = 1024;
  else
    v15 = cstdlib_atoi((unsigned __int8 *)v65);
  v20 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), 1, v15);
  if (v20)
  {
    v73 = 0;
    __s2 = 0;
    v97 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_OWORD *)__dst = 0u;
    v92 = 0u;
    Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", &__s2);
    if (Str < 0
      || (Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v73), Str < 0)
      || (cstdlib_strcpy((char *)__dst, "sprules"),
          cstdlib_strcat((char *)__dst, "_"),
          cstdlib_strcat((char *)__dst, __s2),
          cstdlib_strcat((char *)__dst, "_"),
          cstdlib_strcat((char *)__dst, v73),
          Str = brokeraux_ComposeBrokerString(a3, (const char *)__dst, 1, 1, __s2, 0, 0, v75, 0x100uLL),
          Str < 0))
    {
      v50 = Str;
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for SP rules %s", v22, v23, v24, (uint64_t)"sprules");
      v39 = v50 | 0x8A002000;
    }
    else
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"looking for SP rules %s at %s", v22, v23, v24, (uint64_t)"sprules");
      v25 = ssftriff_reader_ObjOpen(a1, a2, 2, v75, "SPDT", 1031, (uint64_t *)v66);
      if (v25 < 0)
      {
        v39 = v25;
        log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no sp rules", v27, v28, v29, v62);
        *(_WORD *)(a7 + 10) = 0;
        *(_QWORD *)a7 = 0;
      }
      else
      {
        while (1)
        {
          v30 = ssftriff_reader_OpenChunk(*(uint64_t *)v66, (__int32 *)__s1, (unsigned int *)&v70, &v69, v26, v27, v28, v29);
          if (v30 < 0)
            break;
          if (!cstdlib_strcmp(__s1, "DSTR"))
          {
            ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v66, v70, __c, v34, v35, v36, v37, v38);
            if (ChunkData < 0)
              goto LABEL_77;
            v67 = 0;
            ssftriff_reader_ReadStringZ(*(uint64_t *)v66, *(uint64_t *)__c, v70, 0, 0, &v67);
            ssftriff_reader_ReadStringZ(*(uint64_t *)v66, *(uint64_t *)__c, v70, 0, v20, &v67);
            v41 = cstdlib_strchr(v20, 10);
            if (v41)
              *v41 = 0;
            v42 = cstdlib_strchr(v20, 58);
            v43 = v42 ? cstdlib_atoi((unsigned __int8 *)v42 + 2) : 0;
            v44 = v67;
            ChunkData = initPhrasingRuleStructNN(a3, a7, v43);
            if (ChunkData < 0)
              goto LABEL_77;
            v63 = v43;
            if (v43)
            {
              v45 = 0;
              while (1)
              {
                do
                {
                  v67 = 0;
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v66, *(uint64_t *)__c, v70, v44, 0, &v67);
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v66, *(uint64_t *)__c, v70, v44, v20, &v67);
                  v44 += v67;
                  v46 = v20 + 1;
                  for (i = v20; ; ++i)
                  {
                    v48 = *i;
                    if (v48 > 0x23)
                      goto LABEL_29;
                    if (((1 << v48) & 0x100000200) == 0)
                      break;
                    ++v46;
                  }
                }
                while (((1 << v48) & 0x800002401) != 0);
LABEL_29:
                while ((_BYTE)v48)
                {
                  if (v48 == 35)
                  {
                    *(v46 - 1) = 0;
                    break;
                  }
                  v49 = *v46++;
                  LOBYTE(v48) = v49;
                }
                ChunkData = addPhrasingRuleNN(a3, (uint64_t *)a7, v20);
                if (ChunkData < 0)
                  break;
                if ((unsigned __int16)++v45 >= v63)
                  goto LABEL_11;
              }
LABEL_77:
              v39 = ChunkData;
              goto LABEL_37;
            }
          }
LABEL_11:
          v39 = ssftriff_reader_CloseChunk(*(uint64_t *)v66);
          if (v39 < 0)
            goto LABEL_37;
        }
        if ((v30 & 0x1FFF) == 0x14)
          v39 = 0;
        else
          v39 = v30;
      }
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v61);
    v39 = -1979703286;
  }
LABEL_37:
  if (*(_QWORD *)v66)
  {
    v51 = ssftriff_reader_ObjClose(*(_QWORD **)v66, v31, v32, v33, v26, v27, v28, v29);
    if (v51 < 0 && v39 > -1)
      v39 = v51;
  }
  if (v20)
    heap_Free(*(_QWORD **)(a3 + 8), (uint64_t)v20);
  if (a7 && v39 < 0)
    releasePhrasingRuleStructNN(a3, a7);
  v53 = 0;
  v73 = 0;
  __s2 = 0;
  LOWORD(v69) = -1;
  LOBYTE(__c[0]) = 0;
  *(_OWORD *)(a8 + 2) = 0u;
  *(_OWORD *)(a8 + 18) = 0u;
  *(_OWORD *)(a8 + 34) = 0u;
  *(_OWORD *)(a8 + 50) = 0u;
  __dst[0] = "JOY_KEYS";
  __dst[1] = "DID_KEYS";
  *(_QWORD *)&v92 = "NEU_KEYS";
  *((_QWORD *)&v92 + 1) = "COM_KEYS";
  *(_OWORD *)(a8 + 66) = 0u;
  while (1)
  {
    cstdlib_strcpy(v75, "statbnd_");
    cstdlib_strcat(v75, (const char *)__dst[v53]);
    LOWORD(v69) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, char **, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v75, &__s2, &v69, __c) & 0x80000000) != 0|| !(_WORD)v69)
    {
      break;
    }
    v54 = cstdlib_strchr(*(char **)__s2, LOBYTE(__c[0]));
    if (v54)
      *v54 = 0;
    v55 = *(const char **)__s2;
    v56 = **(unsigned __int8 **)__s2;
    if (**(_BYTE **)__s2)
    {
      v57 = 0;
      do
      {
        for (j = 0; v56; v56 = v55[++j])
        {
          if (v56 == 44)
            break;
        }
        cstdlib_strcpy(v75, "statbnd_");
        cstdlib_strncat(v75, v55, (unsigned __int16)j);
        LOWORD(v69) = 0;
        (*(void (**)(uint64_t, uint64_t, const char *, char *, char **, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v75, &v73, &v69, __c);
        if ((_WORD)v69)
        {
          v59 = cstdlib_strchr(*(char **)v73, LOBYTE(__c[0]));
          if (v59)
            *v59 = 0;
          if ((unsigned __int16)v53 == 2)
          {
            *(_WORD *)(a8 + 2 * v57 + 42) = cstdlib_atoi(*(unsigned __int8 **)v73);
          }
          else if ((unsigned __int16)v53 == 1)
          {
            *(_WORD *)(a8 + 2 * v57 + 22) = cstdlib_atoi(*(unsigned __int8 **)v73);
          }
          else if ((_WORD)v53)
          {
            *(_WORD *)(a8 + 2 * v57 + 62) = cstdlib_atoi(*(unsigned __int8 **)v73);
          }
          else
          {
            *(_WORD *)(a8 + 2 * v57 + 2) = cstdlib_atoi(*(unsigned __int8 **)v73);
          }
        }
        if (v55[j] == 44)
          v55 += j + 1;
        else
          v55 += j;
        ++v57;
        v56 = *(unsigned __int8 *)v55;
      }
      while (*v55);
    }
    else
    {
      v57 = 0;
    }
    if (++v53 == 4)
    {
      *(_WORD *)a8 = v57;
      return 0;
    }
  }
  return 0;
}

uint64_t doesNNCustermizedFE(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  unsigned __int16 v24;
  uint64_t v25;
  char __s2[2];
  char v27;
  char __s1[8];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  *(_WORD *)__s2 = -22590;
  if (result)
  {
    v5 = result;
    v6 = *(const char **)(a2 + 1088);
    v7 = *(_QWORD *)(result + 8);
    v8 = cstdlib_strlen(v6);
    v9 = heap_Alloc(v7, v8 + 2);
    if (v9)
    {
      v10 = (void *)v9;
      if (*(_WORD *)(a2 + 1072))
      {
        v25 = v5;
        v11 = 0;
        v12 = 0;
        do
        {
          v13 = *(_QWORD *)(a2 + 1064);
          v14 = *(_DWORD *)(v13 + 184 * v11 + 36);
          v15 = v14 > 0xA;
          v16 = (1 << v14) & 0x610;
          if (!v15 && v16 != 0)
          {
            v18 = v13 + 184 * v11;
            v19 = *(unsigned __int16 *)(v18 + 16);
            v20 = *(unsigned __int16 *)(v18 + 18);
            if ((_DWORD)v19 != (_DWORD)v20)
            {
              v21 = v20 - v19;
              cstdlib_memcpy(v10, &v6[v19], v20 - v19);
              *((_BYTE *)v10 + v21) = 0;
              v22 = cstdlib_strlen((const char *)v10);
              v23 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v10, v22);
              if (v23)
              {
                v24 = 0;
                do
                {
                  utf8_getUTF8Char((uint64_t)v10, v24, __s1);
                  if (!cstdlib_strcmp(__s1, __s2))
                    ++v12;
                  v24 += utf8_determineUTF8CharLength(__s1[0]);
                  --v23;
                }
                while (v23);
              }
            }
          }
          ++v11;
        }
        while (v11 < *(unsigned __int16 *)(a2 + 1072));
        v5 = v25;
        if (v12 >= 3u)
          *a3 = 1;
      }
      heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
      return 0;
    }
    else
    {
      return 2315264010;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t addPOS(uint64_t a1, unsigned int a2, char *__s, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;

  v8 = *(_QWORD **)(a1 + 8);
  v9 = cstdlib_strlen(__s);
  v10 = (char *)heap_Calloc(v8, 1, (v9 + 1));
  *(_QWORD *)(*(_QWORD *)(a4 + 1064) + 184 * a2 + 48) = v10;
  if (v10)
  {
    cstdlib_strcpy(v10, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v11, v12, v13, v14, v16);
    return 2315264010;
  }
}

uint64_t checkMSPOSForCompoundNN(uint64_t a1, unsigned int a2, char *__s2, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t CompoundAccent;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  char *v38;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;

  v10 = 0;
  CompoundAccent = 0;
  v42 = 0;
  v43 = 0;
  do
  {
    v12 = v10;
    if (v10 >= *(unsigned __int16 *)(a4 + 360))
      return CompoundAccent;
    if (*(_DWORD *)(*(_QWORD *)(a4 + 352) + 4 * v10) == 1)
    {
      v13 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a4 + 344) + 8 * v10) + 2);
      v14 = cstdlib_strlen(__s2);
      CompoundAccent = do_pcre_exec(a4, v13, __s2, v14, 0, (uint64_t)&v43, v15, v16);
      if ((CompoundAccent & 0x80000000) != 0)
        return CompoundAccent;
    }
    else if (!cstdlib_strcmp((const char *)(*(_QWORD *)(a4 + 528)+ *(unsigned int *)(*(_QWORD *)(a4 + 536)+ 4 * **(unsigned int **)(*(_QWORD *)(a4 + 344) + 8 * v10))), __s2))
    {
      v43 = 1;
    }
    v10 = v12 + 1;
  }
  while (!v43);
  if (v43 != 1)
    return CompoundAccent;
  v17 = (unsigned __int16)v12;
  v18 = 4;
  if (*(_DWORD *)(*(_QWORD *)(a4 + 352) + 4 * (unsigned __int16)v12) == 1)
    v18 = 8;
  v19 = (const char *)(*(_QWORD *)(a4 + 528)
                     + *(unsigned int *)(*(_QWORD *)(a4 + 536)
                                       + 4
                                       * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a4 + 344)
                                                                     + 8 * (unsigned __int16)v12)
                                                         + v18)));
  if (cstdlib_strcmp(v19, *(const char **)(a4 + 640)))
  {
    v20 = a2;
    v21 = *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120);
    if (v21)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v21);
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120) = 0;
    }
    v22 = *(_QWORD **)(a1 + 8);
    v23 = cstdlib_strlen(v19);
    v24 = (char *)heap_Calloc(v22, 1, (v23 + 52));
    *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * v20 + 120) = v24;
    if (v24)
    {
      cstdlib_strcpy(v24, v19);
      goto LABEL_17;
    }
LABEL_24:
    CompoundAccent = 2315264010;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v41);
    return CompoundAccent;
  }
  v42 = 0;
  v43 = 0;
  CompoundAccent = getCompoundAccent(a4, __s2, &v43, (_WORD *)&v42 + 1, &v42);
  if ((CompoundAccent & 0x80000000) != 0)
    return CompoundAccent;
  if (!v43)
  {
    v20 = a2;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no stress information on first word of compound word : word index=%d pos=%s", v33, v34, v35, a2);
    v40 = *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120);
    if (v40)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v40);
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120) = 0;
    }
    goto LABEL_17;
  }
  v36 = *(_QWORD **)(a1 + 8);
  v37 = cstdlib_strlen(v19);
  v38 = (char *)heap_Calloc(v36, 1, v37 + (unsigned __int16)v42 - HIWORD(v42) + 2);
  *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120) = v38;
  if (!v38)
    goto LABEL_24;
  v20 = a2;
  cstdlib_strcpy(v38, v19);
  cstdlib_strcat(*(char **)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120), "-");
  cstdlib_strncat(*(char **)(*(_QWORD *)(a5 + 1064) + 184 * a2 + 120), &__s2[HIWORD(v42)], (unsigned __int16)v42 - (unint64_t)HIWORD(v42));
LABEL_17:
  if (*(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * v20 + 120))
  {
    v32 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(*(_QWORD *)(a4 + 352) + 4 * v17) == 1)
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND regex rule %d FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a4 + 344) + 8 * v17) + 2));
    else
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND normal rule FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, (uint64_t)__s2);
  }
  return CompoundAccent;
}

uint64_t expandAndValidateCompoundsNN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t i;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  const char *v16;
  const char *v17;
  size_t v18;
  const char *v19;
  const char *v20;
  size_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  size_t v37;

  if (*(_WORD *)(a2 + 1072))
  {
    for (i = 0; i < *(unsigned __int16 *)(a2 + 1072); ++i)
    {
      v7 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * i + 120);
      if (v7)
      {
        v8 = *(_DWORD *)(a3 + 656);
        if (!v8)
        {
          if (!cstdlib_strncmp(v7, "B-", 2uLL)
            || !cstdlib_strncmp(*(const char **)(*(_QWORD *)(a2 + 1064) + 184 * i + 120), "I-", 2uLL))
          {
            continue;
          }
          v8 = *(_DWORD *)(a3 + 656);
        }
        if (v8 != 1)
        {
          v9 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * i + 120);
          v10 = *(const char **)(a3 + 640);
          v11 = cstdlib_strlen(v10);
          if (cstdlib_strncmp(v9, v10, v11))
          {
            if (i)
            {
              v15 = i;
              while (1)
              {
                v16 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * v15 + 120);
                if (!v16)
                  break;
                v17 = *(const char **)(a3 + 640);
                v18 = cstdlib_strlen(v17);
                if (!cstdlib_strncmp(v16, v17, v18))
                  break;
                if (!--v15)
                  goto LABEL_12;
              }
            }
            else
            {
LABEL_12:
              v15 = 0;
            }
            v19 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * v15 + 120);
            if (!v19)
            {
LABEL_24:
              v24 = 184 * i;
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no start word for internal compound word : word index=%d compound tag=%s", v12, v13, v14, i);
LABEL_25:
              v34 = *(_QWORD *)(*(_QWORD *)(a2 + 1064) + v24 + 120);
              if (v34)
              {
                heap_Free(*(_QWORD **)(a1 + 8), v34);
                *(_QWORD *)(*(_QWORD *)(a2 + 1064) + 184 * i + 120) = 0;
              }
              continue;
            }
            v20 = *(const char **)(a3 + 640);
            v21 = cstdlib_strlen(v20);
            v22 = cstdlib_strncmp(v19, v20, v21);
            v23 = *(_QWORD *)(a2 + 1064);
            if (v22)
            {
              v24 = 184 * i;
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"compound word has no beginning tag : word index=%d compound tag=%s", v12, v13, v14, i);
              goto LABEL_25;
            }
            v33 = *(_QWORD *)(v23 + 184 * v15 + 120);
            if (!v33)
              goto LABEL_24;
            cstdlib_strcat(*(char **)(v23 + 184 * i + 120), (const char *)(v33 + 1));
          }
          else
          {
            v25 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * i + 120);
            v26 = *(const char **)(a3 + 640);
            v27 = cstdlib_strlen(v26);
            if (!cstdlib_strncmp(v25, v26, v27))
            {
              v31 = i + 1;
              v32 = *(unsigned __int16 *)(a2 + 1072);
              if (i + 1 == v32
                || i + 1 < v32
                && ((v35 = *(const char **)(*(_QWORD *)(a2 + 1064) + 184 * v31 + 120)) == 0
                 || (v36 = *(const char **)(a3 + 640), v37 = cstdlib_strlen(v36), !cstdlib_strncmp(v35, v36, v37))
                 || !*(_QWORD *)(*(_QWORD *)(a2 + 1064) + 184 * v31 + 120)))
              {
                v24 = 184 * i;
                log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"single word cannot be a compound word : word index=%d compound tag=%s", v28, v29, v30, i);
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t getWordIdxForMSPhrNN(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _WORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;

  if (*(_WORD *)(a2 + 1072))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 1064);
    v10 = (unsigned __int16 *)(v9 + 18);
    v11 = 1;
    while (*(unsigned __int16 *)(v9 + 184 * v8 + 16) != a3)
    {
      ++v8;
      ++v11;
      v10 += 92;
      if (v8 >= *(unsigned __int16 *)(a2 + 1072))
        goto LABEL_5;
    }
    *a5 = v8;
    *a6 = v8;
    LODWORD(v13) = *(unsigned __int16 *)(a2 + 1072);
    if (v8 >= v13)
    {
LABEL_12:
      v12 = 2315264000;
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with end word : start position=%d start word=%d unknown end=%d", (uint64_t)a6, a7, a8, a3);
    }
    else
    {
      while (1)
      {
        v15 = *v10;
        v10 += 92;
        v14 = v15;
        if (a4 - 1 == v15 || (_DWORD)v11 == (_DWORD)v13 && v14 == a4)
          return 0;
        *a6 = v11;
        v13 = *(unsigned __int16 *)(a2 + 1072);
        if (v11++ >= v13)
          goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_5:
    v12 = 2315264000;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with start word : start position=%d", (uint64_t)a6, a7, a8, a3);
  }
  return v12;
}

uint64_t addPHRRangeNN(uint64_t a1, unsigned int a2, unsigned int a3, char *__s, uint64_t a5)
{
  unsigned int v5;
  unsigned __int16 v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  const char *v21;

  if (a2 > a3)
    return 0;
  v12 = a2;
  while (1)
  {
    v13 = *(_QWORD **)(a1 + 8);
    v14 = cstdlib_strlen(__s);
    v15 = heap_Calloc(v13, 1, (v14 + 3));
    v20 = v12;
    *(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * v12 + 88) = v15;
    if (!v15)
      break;
    if (cstdlib_strcmp(__s, "O"))
    {
      if (v12 == a2)
        v21 = "B-";
      else
        v21 = "I-";
      cstdlib_strcpy(*(char **)(*(_QWORD *)(a5 + 1064) + 184 * v12 + 88), v21);
      cstdlib_strcat(*(char **)(*(_QWORD *)(a5 + 1064) + 184 * v12 + 88), __s);
    }
    else
    {
      cstdlib_strcpy(*(char **)(*(_QWORD *)(a5 + 1064) + 184 * v12 + 88), __s);
    }
    *(_WORD *)(*(_QWORD *)(a5 + 1064) + 184 * v12++ + 96) = a2;
    if (a3 < (unsigned __int16)(v20 + 1))
      return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v5);
  return 2315264010;
}

uint64_t addTokenNN(uint64_t a1, unsigned __int16 *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  unsigned int v36;

  v11 = *(unsigned __int16 *)(a4 + 1072);
  v12 = *a2;
  if (!*(_WORD *)(a4 + 1072))
    goto LABEL_14;
  v13 = 0;
  v14 = v11 + 1;
  v15 = a2[1];
  v16 = (unsigned __int16 *)(*(_QWORD *)(a4 + 1064) + 18);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v12 == v17)
      v14 = v13;
    v18 = *v16;
    if (v15 == v18)
      break;
    if (v15 >= v17 && v15 < v18)
      break;
    v16 += 92;
    ++v13;
    v12 = *a2;
    if (v11 == v13)
      goto LABEL_14;
  }
  if ((_DWORD)v11 + 1 != v14)
  {
    v26 = *(_QWORD **)(a1 + 8);
    v27 = cstdlib_strlen(__s);
    v28 = heap_Calloc(v26, 1, (v27 - 1));
    *(_QWORD *)(*(_QWORD *)(a4 + 1064) + 184 * v14 + 128) = v28;
    if (v28)
    {
      v33 = (char *)v28;
      v34 = cstdlib_strlen(__s + 1);
      cstdlib_strncpy(v33, __s + 1, v34 - 1);
      return 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v36);
      return 2315264010;
    }
  }
  else
  {
LABEL_14:
    v20 = 2315264000;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)__s);
    if (*(_WORD *)(a4 + 1072))
    {
      v24 = 0;
      v25 = 0;
      do
      {
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word[%d] %d,%d", v21, v22, v23, v25++);
        v24 += 184;
      }
      while (v25 < *(unsigned __int16 *)(a4 + 1072));
    }
  }
  return v20;
}

uint64_t doMapStrNN(uint64_t a1, const char **a2, char *__s)
{
  size_t v6;
  size_t v7;
  char *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v6 = cstdlib_strlen(__s);
  v7 = cstdlib_strlen(*a2);
  v8 = (char *)*a2;
  if (v6 <= v7)
    goto LABEL_4;
  v9 = *(uint64_t **)(a1 + 8);
  v10 = cstdlib_strlen(__s);
  v11 = heap_Realloc(v9, (uint64_t)v8, (v10 + 1));
  if (v11)
  {
    v8 = (char *)v11;
    *a2 = (const char *)v11;
LABEL_4:
    cstdlib_strcpy(v8, __s);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v17);
  return 2315264010;
}

uint64_t doRetaggingnn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned __int16 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  _BYTE v30[6];
  int v31;

  *(_DWORD *)&v30[2] = 0;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d retagging rules", a6, a7, a8, *(unsigned __int16 *)(a2 + 88));
  if (!*(_WORD *)(a3 + 1072))
    return 0;
  v11 = 0;
  result = 0;
  while (1)
  {
    v31 = 0;
    if (*(_WORD *)(a2 + 88))
      break;
LABEL_12:
    if (++v11 >= (unint64_t)*(unsigned __int16 *)(a3 + 1072))
      return result;
  }
  v13 = 0;
  v14 = 0;
  while (1)
  {
    v29 = v11;
    v28 = 3;
    *(_DWORD *)v30 = 0;
    result = matchMAPRULE2STR_TRuleNN(0, 0, 0, 0, a2, a3, *(_QWORD *)(a2 + 80) + v13, &v28, &v31);
    if ((result & 0x80000000) != 0)
      return result;
    v18 = v31;
    if (v31 == 1)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v15, v16, v17, v14);
      result = doMapStrNN(a1, (const char **)(*(_QWORD *)(a3 + 1064) + 184 * v11 + 48), (char *)(*(_QWORD *)(a2 + 528)+ *(unsigned int *)(*(_QWORD *)(a2 + 536) + 4 * *(unsigned int *)(*(_QWORD *)(a2 + 80) + v13))));
      if ((result & 0x80000000) != 0)
        return result;
      v19 = *(_QWORD **)(a1 + 8);
      v20 = cstdlib_strlen(*(const char **)(*(_QWORD *)(a3 + 1064) + 184 * v11 + 48));
      v21 = (char *)heap_Calloc(v19, 1, v20 + 1);
      v26 = *(_QWORD *)(a3 + 1064);
      *(_QWORD *)(v26 + 184 * v11 + 80) = v21;
      if (!v21)
      {
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v27);
        return 2315264010;
      }
      cstdlib_strcpy(v21, *(const char **)(v26 + 184 * v11 + 48));
      result = 0;
      v18 = v31;
    }
    if (!v18)
    {
      ++v14;
      v13 += 32;
      if (v14 < *(unsigned __int16 *)(a2 + 88))
        continue;
    }
    goto LABEL_12;
  }
}

uint64_t doSubtaggingNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d subtagging rules", a6, a7, a8, *(unsigned __int16 *)(a2 + 104));
  return 0;
}

uint64_t insert_NLU_infoNN(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v7;
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  char *v25;
  const char *v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  unsigned int v37;

  v7 = a3;
  v8 = a2;
  if (a2 == a3)
  {
    if (a2 + 1 == *(unsigned __int16 *)(a5 + 1072))
      v7 = a2 + 1;
    else
      v7 = a2;
  }
  if (a2 >= v7)
    return 0;
  v10 = 184 * a2 + 88;
  v11 = a2 + 1;
  while (1)
  {
    v12 = *(const char **)(a4 + 8);
    if (!v12)
      goto LABEL_12;
    v13 = *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10);
    if (v13)
    {
      heap_Free(*(_QWORD **)(a1 + 8), v13);
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10) = 0;
      v12 = *(const char **)(a4 + 8);
    }
    v14 = *(_QWORD **)(a1 + 8);
    v15 = cstdlib_strlen(v12);
    v16 = (char *)heap_Calloc(v14, 1, (v15 + 1));
    *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10) = v16;
    if (!v16)
      break;
    cstdlib_strcpy(v16, *(const char **)(a4 + 8));
    *(_WORD *)(*(_QWORD *)(a5 + 1064) + v10 + 8) = v8;
LABEL_12:
    v21 = *(const char **)(a4 + 56);
    if (v21)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 32);
      if (v22)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v22);
        *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 32) = 0;
        v21 = *(const char **)(a4 + 56);
      }
      v23 = *(_QWORD **)(a1 + 8);
      v24 = cstdlib_strlen(v21);
      v25 = (char *)heap_Calloc(v23, 1, (v24 + 1));
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 32) = v25;
      if (!v25)
        break;
      cstdlib_strcpy(v25, *(const char **)(a4 + 56));
    }
    v26 = *(const char **)(a4 + 40);
    if (v26)
    {
      v27 = cstdlib_strlen(v26);
      v28 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 56), (v27 + 32) & 0xFFFFFFE0);
      if (!v28)
        break;
      v29 = v28;
      cstdlib_strcpy(v28, *(const char **)(a4 + 40));
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 56) = v29;
    }
    v30 = *(_QWORD *)(a4 + 72);
    if (v30)
    {
      *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 64) = v30;
      v31 = *(const char **)(a4 + 64);
      if (v31)
      {
        v32 = *(_QWORD *)(a1 + 8);
        v33 = cstdlib_strlen(v31);
        v34 = (char *)heap_Alloc(v32, v33 + 1);
        *(_QWORD *)(*(_QWORD *)(a5 + 1064) + v10 + 72) = v34;
        if (!v34)
          break;
        cstdlib_strcpy(v34, *(const char **)(a4 + 64));
      }
    }
    v10 += 184;
    if (v7 == (unsigned __int16)v11++)
      return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v37);
  return 2315264010;
}

uint64_t addSynChunkNN(uint64_t a1, char *__s, const char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  uint64_t v12;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;

  v8 = a4;
  v10 = *(unsigned __int16 *)(a6 + 1072);
  if (a4 <= a5 && v10 > a4 && v10 > a5)
  {
    v17 = *(_QWORD **)(a1 + 8);
    v18 = cstdlib_strlen(__s);
    v19 = v18;
    if (a3)
    {
      v20 = cstdlib_strlen(a3);
      v21 = (char *)heap_Calloc(v17, 1, (v19 + v20 + 1));
      *(_QWORD *)(*(_QWORD *)(a6 + 1064) + 184 * v8 + 128) = v21;
      if (v21)
      {
        cstdlib_strcpy(v21, __s);
        cstdlib_strcat(*(char **)(*(_QWORD *)(a6 + 1064) + 184 * v8 + 128), a3);
        return 0;
      }
    }
    else
    {
      v26 = (char *)heap_Calloc(v17, 1, (v18 + 1));
      *(_QWORD *)(*(_QWORD *)(a6 + 1064) + 184 * v8 + 128) = v26;
      if (v26)
      {
        cstdlib_strcpy(v26, __s);
        return 0;
      }
    }
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v27);
    return 2315264010;
  }
  v12 = 2315264000;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"syntactic chunks out of order : fromWordIdx=%d toWordIdx=%d numWords=%d", a6, a7, a8, a4);
  return v12;
}

uint64_t resolvePHRNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  int v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  const char *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v98;
  char __dst[64];
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a3 + 1072))
  {
    v11 = 0;
    v12 = 88;
    do
    {
      if (v12 != 88)
      {
        v13 = *(_QWORD *)(a3 + 1064);
        if (!*(_QWORD *)(v13 + v12))
        {
          v14 = v11 - 1;
          v15 = *(const char **)(v13 + 184 * (v11 - 1) + 88);
          if (v15)
          {
            v16 = *(unsigned __int16 *)(v13 + v12 - 72);
            if (v16 >= 2 && *(_BYTE *)(a1 + (v16 - 1)) == 95)
            {
              v17 = *(_QWORD **)(a2 + 8);
              v18 = cstdlib_strlen(v15);
              v19 = (char *)heap_Calloc(v17, 1, (v18 + 3));
              v24 = *(_QWORD *)(a3 + 1064);
              *(_QWORD *)(v24 + v12) = v19;
              if (!v19)
                goto LABEL_72;
              cstdlib_strcpy(v19, *(const char **)(v24 + 184 * v14 + 88));
              if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(a3 + 1064) + v12), "O"))
                **(_BYTE **)(*(_QWORD *)(a3 + 1064) + v12) = 73;
              v25 = *(_QWORD **)(a2 + 8);
              v26 = cstdlib_strlen(*(const char **)(*(_QWORD *)(a3 + 1064) + 184 * v14 + 48));
              v27 = (char *)heap_Calloc(v25, 1, (v26 + 3));
              v28 = *(_QWORD *)(a3 + 1064);
              *(_QWORD *)(v28 + v12 - 40) = v27;
              if (!v27)
              {
LABEL_72:
                v91 = 2315264010;
                log_OutPublic(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v98);
                goto LABEL_76;
              }
              cstdlib_strcpy(v27, *(const char **)(v28 + 184 * v14 + 48));
              log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v29, v30, v31, v11);
            }
            else
            {
              v32 = *(unsigned __int8 *)v15;
              if (v32 == 66)
              {
                v44 = *(_QWORD **)(a2 + 8);
                v45 = cstdlib_strlen(v15);
                v46 = (char *)heap_Calloc(v44, 1, (v45 + 3));
                v47 = *(_QWORD *)(a3 + 1064);
                *(_QWORD *)(v47 + v12) = v46;
                if (!v46)
                  goto LABEL_72;
                cstdlib_strcpy(v46, *(const char **)(v47 + 184 * v14 + 88));
                **(_BYTE **)(*(_QWORD *)(a3 + 1064) + v12) = 73;
                v48 = *(_QWORD **)(a2 + 8);
                v49 = cstdlib_strlen(*(const char **)(*(_QWORD *)(a3 + 1064) + 184 * v14 + 48));
                v50 = (char *)heap_Calloc(v48, 1, (v49 + 3));
                v51 = *(_QWORD *)(a3 + 1064);
                *(_QWORD *)(v51 + v12 - 40) = v50;
                if (!v50)
                  goto LABEL_72;
                cstdlib_strcpy(v50, *(const char **)(v51 + 184 * v14 + 48));
                log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v52, v53, v54, v11);
              }
              else if (v32 == 79 || v32 == 73)
              {
                v33 = *(_QWORD **)(a2 + 8);
                v34 = cstdlib_strlen(v15);
                v35 = (char *)heap_Calloc(v33, 1, (v34 + 3));
                v36 = *(_QWORD *)(a3 + 1064);
                *(_QWORD *)(v36 + v12) = v35;
                if (!v35)
                  goto LABEL_72;
                cstdlib_strcpy(v35, *(const char **)(v36 + 184 * v14 + 88));
                v37 = *(_QWORD **)(a2 + 8);
                v38 = cstdlib_strlen(*(const char **)(*(_QWORD *)(a3 + 1064) + 184 * v14 + 48));
                v39 = (char *)heap_Calloc(v37, 1, (v38 + 3));
                v40 = *(_QWORD *)(a3 + 1064);
                *(_QWORD *)(v40 + v12 - 40) = v39;
                if (!v39)
                  goto LABEL_72;
                cstdlib_strcpy(v39, *(const char **)(v40 + 184 * v14 + 48));
                log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v41, v42, v43, v11);
              }
            }
          }
        }
      }
      ++v11;
      v55 = *(unsigned __int16 *)(a3 + 1072);
      v12 += 184;
    }
    while (v11 < v55);
    if (!*(_WORD *)(a3 + 1072))
      goto LABEL_71;
    v56 = 0;
    v57 = 88;
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(a3 + 1064) + v57))
      {
        if ((insert_NLU_infoNN(a2, (unsigned __int16)v56, (unsigned __int16)(v56 + 1), (uint64_t)&unk_24D285F88, a3) & 0x80000000) != 0)
        {
          log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Failed to fill out PHR=B-NIL on word : word index=%d", a6, a7, a8, v56);
          goto LABEL_75;
        }
        LODWORD(v55) = *(unsigned __int16 *)(a3 + 1072);
      }
      ++v56;
      v57 += 184;
    }
    while (v56 < v55);
    if (!(_DWORD)v55)
      goto LABEL_71;
    v58 = 0;
    v59 = (_QWORD *)(*(_QWORD *)(a3 + 1064) + 88);
    while (*v59)
    {
      ++v58;
      v59 += 23;
      if (v55 == v58)
      {
        v60 = 0;
        v61 = 88;
        do
        {
          if (!cstdlib_strncmp(*(const char **)(*(_QWORD *)(a3 + 1064) + v61), "I-", 2uLL))
          {
            v65 = *(_QWORD *)(a3 + 1064);
            if (v60)
            {
              if (cstdlib_strcmp(*(const char **)(v65 + 184 * (v60 - 1) + 88), *(const char **)(v65 + v61)))
              {
                cstdlib_strcpy(__dst, *(const char **)(*(_QWORD *)(a3 + 1064) + v61));
                __dst[0] = 66;
                if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(a3 + 1064) + 184 * (v60 - 1) + 88), __dst))
                {
                  **(_BYTE **)(*(_QWORD *)(a3 + 1064) + v61) = 66;
                  log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v66, v67, v68, v60);
                }
              }
            }
            else
            {
              **(_BYTE **)(v65 + 88) = 66;
              log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v62, v63, v64, 0);
            }
          }
          ++v60;
          v61 += 184;
        }
        while (v60 < *(unsigned __int16 *)(a3 + 1072));
        if (!*(_WORD *)(a3 + 1072))
          return 0;
        v69 = 0;
        v70 = *(_QWORD *)(a3 + 1064);
        while (2)
        {
          cstdlib_strcpy(__dst, *(const char **)(v70 + 184 * (unsigned __int16)v69 + 88));
          if (!cstdlib_strncmp(__dst, "B-", 2uLL))
            cstdlib_strcpy(__dst, (const char *)(*(_QWORD *)(*(_QWORD *)(a3 + 1064) + 184 * (unsigned __int16)v69 + 88) + 2));
          LODWORD(v74) = v69;
          if (*(unsigned __int16 *)(a3 + 1072) > (unsigned __int16)v69)
          {
            v75 = 184 * (unsigned __int16)v69 + 88;
            v74 = (unsigned __int16)v69;
            do
            {
              v76 = *(const char **)(*(_QWORD *)(a3 + 1064) + v75);
              if (!v76
                || cstdlib_strcmp(v76, __dst)
                && (cstdlib_strlen(*(const char **)(*(_QWORD *)(a3 + 1064) + v75)) < 3
                 || cstdlib_strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(a3 + 1064) + v75) + 2), __dst)
                 || cstdlib_strncmp(*(const char **)(*(_QWORD *)(a3 + 1064) + v75), "I-", 2uLL))
                && *(unsigned __int16 *)(*(_QWORD *)(a3 + 1064) + v75 + 8) != *(unsigned __int16 *)(*(_QWORD *)(a3 + 1064)
                                                                                                  + 184 * (unsigned __int16)v69
                                                                                                  + 96))
              {
                break;
              }
              ++v74;
              v75 += 184;
            }
            while (v74 < *(unsigned __int16 *)(a3 + 1072));
          }
          v77 = (unsigned __int16)v74 - 1;
          v78 = (unsigned __int16)v69;
          if (v77 > (unsigned __int16)v69)
          {
            v79 = 0;
            v80 = v69;
            v81 = v69;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(a3 + 1064) + 184 * (unsigned __int16)v80 + 100) == 1)
              {
                v82 = v81;
                log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] add syn chunk %s%s from %d to %d", v71, v72, v73, (uint64_t)__dst);
                v85 = addSynChunkNN(a2, __dst, "-P", v82, (unsigned __int16)v80, a3, v83, v84);
                if ((v85 & 0x80000000) != 0)
                  return v85;
                ++v80;
                v79 = 1;
                v81 = v80;
              }
              else
              {
                ++v80;
              }
            }
            while (v77 > (unsigned __int16)v80);
            v78 = (unsigned __int16)v69;
            if (v79)
            {
              if ((unsigned __int16)v74 > v81)
              {
                v78 = v81;
                log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] add syn chunk %s%s from %d to %d", v71, v72, v73, (uint64_t)__dst);
                v88 = (unsigned __int16)(v74 - 1);
                v89 = a2;
                v90 = "-P";
LABEL_65:
                v85 = addSynChunkNN(v89, __dst, v90, v78, v88, a3, v86, v87);
                if ((v85 & 0x80000000) != 0)
                  return v85;
              }
              v91 = 0;
              v70 = *(_QWORD *)(a3 + 1064);
              *(_DWORD *)(v70 + 184 * (unsigned __int16)v69 + 136) = 1;
              *(_DWORD *)(v70 + 184 * v77 + 140) = 1;
              if ((unsigned __int16)v69 == (unsigned __int16)v74)
                v69 = v74 + 1;
              else
                v69 = v74;
              v92 = *(unsigned __int16 *)(a3 + 1072);
              if ((unsigned __int16)v69 >= v92)
                goto LABEL_77;
              continue;
            }
          }
          break;
        }
        log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v71, v72, v73, (uint64_t)__dst);
        v88 = (unsigned __int16)(v74 - 1);
        v89 = a2;
        v90 = 0;
        goto LABEL_65;
      }
    }
    log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v58);
LABEL_75:
    v91 = 2315264000;
  }
  else
  {
LABEL_71:
    v91 = 0;
  }
LABEL_76:
  v92 = *(unsigned __int16 *)(a3 + 1072);
LABEL_77:
  if (v92)
  {
    v93 = 0;
    v94 = *(_QWORD *)(a3 + 1064);
    v95 = 88;
    do
    {
      v96 = *(_QWORD *)(v94 + v95);
      if (v96)
      {
        heap_Free(*(_QWORD **)(a2 + 8), v96);
        v94 = *(_QWORD *)(a3 + 1064);
        *(_QWORD *)(v94 + v95) = 0;
        LOWORD(v92) = *(_WORD *)(a3 + 1072);
      }
      ++v93;
      v95 += 184;
    }
    while (v93 < (unsigned __int16)v92);
  }
  return v91;
}

uint64_t addMarkerTypeNN(uint64_t a1, char *__s2, const char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;

  v14 = *(unsigned __int16 *)(a5 + 74);
  v15 = 8 * v14;
  do
  {
    if (v14 >= *(unsigned __int16 *)(a5 + 72) || (v16 = *(_QWORD *)(a5 + 528)) == 0)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Ignoring marker :%s, as not in DEFMAPPING list", a6, a7, a8, (uint64_t)__s2);
      return 0;
    }
    v17 = cstdlib_strcmp((const char *)(v16+ *(unsigned int *)(*(_QWORD *)(a5 + 536) + 4 * *(unsigned int *)(*(_QWORD *)(a5 + 64) + v15))), __s2);
    ++v14;
    v15 += 8;
  }
  while (v17);
  if ((_WORD)v14 != 1)
    return 0;
  v18 = *(_QWORD **)(a1 + 8);
  v19 = cstdlib_strlen(a3);
  v20 = (char *)heap_Calloc(v18, 1, (v19 + 1));
  *(_QWORD *)(*(_QWORD *)(a6 + 1064) + 184 * a4 + 128) = v20;
  if (v20)
  {
    cstdlib_strcpy(v20, a3);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v26);
  return 2315264010;
}

uint64_t getNNSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inserted;
  uint64_t v6;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  const char *v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unsigned __int8 *i;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  const char *v42;
  const char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  char *v60;
  const char *v61;
  _QWORD *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 v83;
  int v84;
  unsigned __int16 v85;
  int DomainFromPausingDefs;
  unsigned __int16 v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  const char *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  __int128 v107;
  const char *v108;
  __int16 v109;
  unsigned int v110;
  char *v111;
  int v112;
  __int16 v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned __int16 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v115 = 0;
  v114 = 0;
  inserted = *(_QWORD *)(a5 + 1088);
  if (!inserted)
    return inserted;
  v6 = a5;
  v11 = *(unsigned __int16 *)(a5 + 1096);
  if (!cstdlib_strcmp(*(const char **)(a5 + 1088), ""))
    return 0;
  v12 = cstdlib_strlen(*(const char **)(v6 + 1088));
  v13 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (unsigned __int16)(v12 + 2));
  if (!v13)
  {
    inserted = 2315264010;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v90);
    return inserted;
  }
  v18 = (char *)v13;
  v93 = v11;
  v91 = a3;
  v92 = a4;
  v116 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  if (!*(_WORD *)(v6 + 1072))
  {
LABEL_79:
    v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 104))(v91, v92, 2, v93, &v116);
    if ((v73 & 0x80000000) != 0)
    {
LABEL_91:
      inserted = v73;
    }
    else
    {
      while (v116)
      {
        v73 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(v91, v92);
        if ((v73 & 0x80000000) != 0)
          goto LABEL_91;
        if (v112 == 6)
        {
          v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, __int16 *))(a2 + 168))(v91, v92, v116, 1, 1, &v110, &v113);
          if ((v73 & 0x80000000) != 0)
            goto LABEL_91;
          v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a2 + 168))(v91, v92, v116, 2, 1, (char *)&v110 + 2, &v113);
          if ((v73 & 0x80000000) != 0)
            goto LABEL_91;
          if ((unsigned __int16)v110 > HIWORD(v110))
          {
            inserted = 2315271857;
            goto LABEL_92;
          }
          v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a2 + 176))(v91, v92, v116, 4, &v111, &v113);
          if ((v73 & 0x80000000) != 0)
            goto LABEL_91;
          if (cstdlib_strcmp(v111, "_PR_"))
          {
            v81 = addTokenNN(a1, (unsigned __int16 *)&v110, v111, v6, v77, v78, v79, v80);
            if ((v81 & 0x80000000) != 0)
            {
              inserted = v81;
              if ((_DWORD)v81 != -1979703296)
                goto LABEL_92;
            }
          }
        }
        v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 120))(v91, v92, v116, &v116);
        if ((v73 & 0x80000000) != 0)
          goto LABEL_91;
      }
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Added words information", v74, v75, v76, 0);
      inserted = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(a2 + 176))(v91, v92, v93, 1, &v115, &v114);
      if ((inserted & 0x80000000) == 0)
      {
        v83 = v114;
        if (v114)
        {
          v84 = 0;
          v85 = 0;
          do
          {
            if (*(_DWORD *)(v115 + 32 * v85) == 21)
            {
              DomainFromPausingDefs = getDomainFromPausingDefs(v6 + 1104, *(char **)(v115 + 32 * v85 + 24), &v109);
              v83 = v114;
              if (DomainFromPausingDefs == 1)
              {
                v87 = v85 + 1;
                if (v114 > (unsigned __int16)(v85 + 1))
                {
                  v88 = a1;
                  while (1)
                  {
                    v89 = v87;
                    if (*(_DWORD *)(v115 + 32 * v87) == 21)
                    {
                      if (cstdlib_strcmp(*(const char **)(v115 + 32 * v85 + 24), *(const char **)(v115 + 32 * v87 + 24)))
                      {
                        break;
                      }
                    }
                    v87 = v89 + 1;
                    v83 = v114;
                    if (v114 <= (unsigned __int16)(v89 + 1))
                      goto LABEL_108;
                  }
                  v83 = v114;
                  v85 = v89 - (v89 + 1 != v84);
LABEL_108:
                  a1 = v88;
                }
              }
            }
            v84 = ++v85;
          }
          while (v85 < v83);
        }
      }
    }
    goto LABEL_92;
  }
  v19 = 0;
  v94 = v6 + 1104;
  v95 = a2;
  v104 = v6;
  v105 = inserted;
  v97 = a1;
  v96 = (char *)v13;
  while (1)
  {
    v20 = *(_QWORD *)(v6 + 1064) + 184 * v19;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    *(_QWORD *)(v20 + 120) = 0;
    *(_QWORD *)(v20 + 128) = 0;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    v110 = *(_DWORD *)(v20 + 16);
    v21 = v110;
    v22 = (unint64_t)v110 >> 16;
    cstdlib_strncpy(v18, (const char *)(inserted + (unsigned __int16)v21), (v21 >> 16) - (unsigned __int16)v21);
    v18[v22 - (unsigned __int16)v110] = 0;
    if ((_DWORD)v22 == (unsigned __int16)v21)
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v23, v24, v25, (unsigned __int16)v21);
      goto LABEL_75;
    }
    v26 = doesWordEndInComma(v18);
    v27 = *(_QWORD *)(v6 + 1064);
    if (v26)
      *(_DWORD *)(v27 + 184 * *(unsigned __int16 *)(v6 + 1072) - 84) = 1;
    v28 = *(const char **)(v27 + 184 * v19 + 40);
    if (v28)
      break;
LABEL_75:
    ++v19;
    inserted = v105;
    if (v19 >= *(unsigned __int16 *)(v6 + 1072))
      goto LABEL_79;
  }
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v117 = 0u;
  v29 = *(_QWORD **)(a1 + 8);
  v30 = cstdlib_strlen(v28);
  v31 = (char *)heap_Calloc(v29, 1, (v30 + 1));
  if (!v31)
  {
LABEL_95:
    inserted = 2315264010;
    a1 = v97;
    log_OutPublic(*(_QWORD *)(v97 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v32, v33, v34, v35, v90);
    v18 = v96;
    goto LABEL_92;
  }
  v36 = v31;
  v98 = v28;
  cstdlib_strcpy(v31, v28);
  for (i = (unsigned __int8 *)&v36[cstdlib_strlen(v36) - 1]; i >= (unsigned __int8 *)v36; --i)
  {
    v38 = *i;
    v39 = v38 > 0x3B;
    v40 = (1 << v38) & 0x800000100002600;
    if (v39 || v40 == 0)
      break;
    *i = 0;
  }
  v42 = 0;
  v108 = 0;
  v106 = 0;
  v107 = 0uLL;
  v102 = 0;
  v103 = 0;
  v99 = 0;
  v100 = 0;
  v43 = 0;
  v101 = 0;
  v44 = (char *)v36;
  do
  {
    v45 = cstdlib_strchr(v44, 59);
    v46 = v45;
    if (v45)
      *v45 = 0;
    v47 = cstdlib_strchr(v44, 58);
    v48 = v47;
    if (v47)
    {
      *v47 = 0;
      v49 = v47 + 1;
    }
    else
    {
      v49 = "null";
    }
    if (cstdlib_strcmp(v44, "POS"))
    {
      if (cstdlib_strcmp(v44, "PHR"))
      {
        if (cstdlib_strcmp(v44, "BND"))
        {
          if (!cstdlib_strcmp(v44, "BNDSHAPE"))
          {
            inserted = 0;
            v106 = v49;
            goto LABEL_51;
          }
          if (!cstdlib_strcmp(v44, "S_POI"))
          {
            inserted = 0;
            v54 = "B";
LABEL_50:
            *((_QWORD *)&v107 + 1) = v54;
            *(_QWORD *)&v107 = v49;
            goto LABEL_51;
          }
          if (!cstdlib_strcmp(v44, "I_POI"))
          {
            inserted = 0;
            v54 = "I";
            goto LABEL_50;
          }
          if (!cstdlib_strcmp(v44, "E_POI"))
          {
            inserted = 0;
            v54 = "S";
            if (!*((_QWORD *)&v107 + 1))
              v54 = "E";
            goto LABEL_50;
          }
          if (cstdlib_strcmp(v44, "PRM"))
          {
            v53 = *(_DWORD *)(v104 + 1760);
            if (!v53)
            {
              if (!cstdlib_strcmp(v44, "COMP"))
              {
                inserted = 0;
                v102 = v49;
                goto LABEL_51;
              }
              v53 = *(_DWORD *)(v104 + 1760);
            }
            if (v53 == 1 && !cstdlib_strcmp(v44 + 1, "_COMP"))
            {
              v55 = *(_QWORD **)(v97 + 8);
              v56 = cstdlib_strlen(v49);
              v57 = heap_Calloc(v55, 1, (v56 + 3));
              if (!v57)
                goto LABEL_95;
              v58 = (char *)v57;
              if (cstdlib_strcmp(v44, "S_COMP"))
                v59 = "I-";
              else
                v59 = "B-";
              cstdlib_strcpy(v58, v59);
              cstdlib_strcat(v58, v49);
              v60 = v58;
              inserted = 0;
              v101 = (uint64_t)v60;
              v102 = v60;
            }
            else
            {
              if (!v48 || v48 <= v44 + 1)
                goto LABEL_41;
              if (!cstdlib_strcmp(v44 + 1, "_CLASS"))
              {
                inserted = 0;
                v99 = v49;
                goto LABEL_51;
              }
              if (!cstdlib_strcmp(v44 + 1, "_PUNC"))
              {
                v61 = v100;
                if (!v100)
                {
                  v62 = *(_QWORD **)(v97 + 8);
                  v63 = cstdlib_strlen(v98);
                  v64 = (char *)heap_Calloc(v62, 1, (v63 + 1));
                  if (!v64)
                  {
                    inserted = 2315264010;
                    a1 = v97;
                    log_OutPublic(*(_QWORD *)(v97 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v65, v66, v67, v68, v90);
                    v69 = (uint64_t)v36;
                    a2 = v95;
LABEL_71:
                    heap_Free(*(_QWORD **)(a1 + 8), v69);
                    goto LABEL_72;
                  }
                  v61 = v64;
                  cstdlib_strcpy(v64, "");
                }
                *v48 = 58;
                v100 = v61;
                hlp_NLUStrJoin(v61, v44);
                inserted = 0;
              }
              else
              {
LABEL_41:
                inserted = addMarkerTypeNN(v97, v44, v49, (unsigned __int16)v19, v94, v104, v51, v52);
              }
            }
          }
          else
          {
            inserted = 0;
            v103 = v49;
          }
        }
        else
        {
          inserted = 0;
          v108 = v49;
        }
      }
      else
      {
        inserted = 0;
        v42 = v49;
      }
    }
    else
    {
      inserted = 0;
      v43 = v49;
    }
LABEL_51:
    if (!v46)
      break;
    v44 = v46 + 1;
  }
  while ((inserted & 0x80000000) == 0);
  v69 = (uint64_t)v100;
  *(_QWORD *)&v120 = v100;
  *((_QWORD *)&v120 + 1) = v102;
  *(_QWORD *)&v119 = v103;
  *((_QWORD *)&v119 + 1) = v99;
  v121 = v107;
  *(_QWORD *)&v118 = v108;
  *((_QWORD *)&v118 + 1) = v106;
  *(_QWORD *)&v117 = v43;
  *((_QWORD *)&v117 + 1) = v42;
  a1 = v97;
  log_OutText(*(_QWORD *)(v97 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"parsed NLU %s[%d,%d] -> POS=%s, PHR=%s, BND=%s, BNDSHAPE=%s, PRM=%s, CLASS=%s, PUNC=%s, COMP=%s, POIClass=%s, POIPosi=%s", v50, v51, v52, (uint64_t)v98);
  a2 = v95;
  if ((inserted & 0x80000000) == 0)
  {
    if (!v43)
      log_OutText(*(_QWORD *)(v97 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"missing POS in NLU string: arg=%s", v70, v71, v72, (uint64_t)v36);
    inserted = insert_NLU_infoNN(v97, (unsigned __int16)v19, (unsigned __int16)(v19 + 1), (uint64_t)&v117, v104);
  }
  heap_Free(*(_QWORD **)(v97 + 8), (uint64_t)v36);
  if (v100)
    goto LABEL_71;
LABEL_72:
  v18 = v96;
  v6 = v104;
  if (v101)
    heap_Free(*(_QWORD **)(a1 + 8), v101);
  if ((inserted & 0x80000000) == 0)
    goto LABEL_75;
LABEL_92:
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v18);
  return inserted;
}

uint64_t recursiveFindSplitNN(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, unsigned int a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;

  v9 = result;
  if (a2 <= a3)
  {
    v10 = 0;
    v11 = a2;
    do
    {
      v10 += *(_WORD *)(result + 2 * v11);
      if (a4 >> 1 <= v10)
        break;
      ++v11;
    }
    while (a3 >= v11);
  }
  else
  {
    v10 = 0;
    v11 = a2;
  }
  if (a7 <= v10 && (int)(a4 - v10) >= (int)a7)
  {
    recursiveFindSplitNN(result);
    result = recursiveFindSplitNN(v9);
    *(_WORD *)(a5 + 2 * (unsigned __int16)(*a6)++) = v11;
  }
  return result;
}

uint64_t getDocumentClassNN(uint64_t a1)
{
  __int16 v2;
  int v3;
  char *v4;
  char *v5;
  char *v6;

  if (!*(_WORD *)(a1 + 1072))
    return 0;
  v2 = 0;
  while (1)
  {
    v3 = v2;
    v4 = *(char **)(*(_QWORD *)(a1 + 1064) + 184 * v2 + 144);
    if (v4)
    {
      if (cstdlib_strstr(v4, "joyfulstyle"))
        return 1;
      v5 = *(char **)(*(_QWORD *)(a1 + 1064) + 184 * v3 + 144);
      if (v5)
      {
        if (cstdlib_strstr(v5, "didacticstyle"))
          return 2;
        v6 = *(char **)(*(_QWORD *)(a1 + 1064) + 184 * v3 + 144);
        if (v6)
        {
          if (cstdlib_strstr(v6, "neutralstyle"))
            break;
        }
      }
    }
    v2 = v3 + 1;
    if (*(unsigned __int16 *)(a1 + 1072) <= (__int16)(v3 + 1))
      return 0;
  }
  return 3;
}

uint64_t nnpuncPhrasing(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int16 *a5, const char *a6, char *__s)
{
  char *v7;
  int DocumentClassNN;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;

  v7 = __s;
  if (cstdlib_strchr(__s, 44))
  DocumentClassNN = getDocumentClassNN(a2);
  v19 = a5 + 25;
  v20 = a5 + 15;
  v21 = a5 + 35;
  if (DocumentClassNN == 1)
    v21 = a5 + 5;
  if (DocumentClassNN != 2)
    v20 = v21;
  if (DocumentClassNN != 3)
    v19 = v20;
  v22 = *v19;
  if (v22)
    v23 = v22;
  else
    v23 = 9;
  if (!*(_QWORD *)(a2 + 1088))
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"%s\n", v16, v17, v18, (uint64_t)"input parameter: sent is NULL");
    return 0;
  }
  if (*(_WORD *)(a2 + 1072))
  {
    v24 = 0;
    v25 = 100;
    while (1)
    {
      v26 = doesWordEndInCommaNN(*(_QWORD *)(*(_QWORD *)(a2 + 1064) + v25 - 36), a6);
      v27 = *(_QWORD *)(a2 + 1064);
      if ((v26 || *(_DWORD *)(v27 + v25) == 1 && *(_BYTE *)(v27 + v25 + 4))
        && *(_DWORD *)(v27 + v25 + 8)
        && *(_WORD *)(a2 + 1072))
      {
        *(_BYTE *)(v27 + v25 - 24) = 4;
      }
      if (*(_DWORD *)(v27 + v25) == 1)
      {
        v28 = cstdlib_strchr(v7, *(char *)(v27 + v25 + 4));
        v27 = *(_QWORD *)(a2 + 1064);
        if (v28)
        {
          if (*(_BYTE *)(v27 + v25 + 4) && !*(_DWORD *)(v27 + v25 + 8))
            *(_BYTE *)(v27 + v25 - 24) = 3;
        }
      }
      v29 = *(const char **)(v27 + v25 + 52);
      if (!v29)
        goto LABEL_35;
      if (cstdlib_strcmp(v29, "B") && cstdlib_strcmp(*(const char **)(*(_QWORD *)(a2 + 1064) + v25 + 52), "S"))
        break;
      if (v25 != 100)
      {
        v31 = (_BYTE *)(*(_QWORD *)(a2 + 1064) + 184 * (v24 - 1) + 76);
LABEL_34:
        *v31 = 4;
      }
LABEL_35:
      ++v24;
      v25 += 184;
      if (v24 >= *(unsigned __int16 *)(a2 + 1072))
        goto LABEL_36;
    }
    if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(a2 + 1064) + v25 + 52), "E"))
      goto LABEL_35;
    v30 = *(_QWORD *)(a2 + 1064) + v25;
    if (*(_DWORD *)(v30 + 76) < v23)
      goto LABEL_35;
    v31 = (_BYTE *)(v30 - 24);
    goto LABEL_34;
  }
LABEL_36:
  printPhrasesNN(a1, a2, v13, v14, v15, v16, v17, v18);
  v32 = heap_Calloc(*(_QWORD **)(a1 + 8), 1024, 2);
  if (v32)
  {
    v39 = v32;
    printPhrasesNN(a1, a2, v33, v34, v35, v36, v37, v38);
    heap_Free(*(_QWORD **)(a1 + 8), v39);
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v35, v36, v37, v38, v41);
  return 2315264010;
}

size_t doesWordEndInCommaNN(size_t result, const char *a2)
{
  char *v3;
  __int16 v4;
  int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  __int16 v8;
  char __s[4];

  *(_DWORD *)__s = 0;
  if (result)
  {
    v3 = (char *)result;
    result = cstdlib_strlen((const char *)result);
    if (result)
    {
      v4 = Utf8_Utf8NbrOfSymbols(a2);
      v5 = (unsigned __int16)(v4 - 1);
      if (v4 != 1)
      {
        v6 = 0;
        do
        {
          v7 = v6;
          if ((utf8_getUTF8Char((uint64_t)a2, v6, __s) & 0x80000000) != 0)
            break;
          v8 = cstdlib_strlen(__s);
          if (cstdlib_strstr(v3, __s))
            return 1;
          v6 = v7 + v8;
          --v5;
        }
        while (v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t printPhrasesNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (*(_WORD *)(a2 + 1072))
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      result = log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\t\t%c\n", a6, a7, a8, *(_QWORD *)(*(_QWORD *)(a2 + 1064) + v10 + 56));
      ++v11;
      v10 += 184;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 1072));
  }
  return result;
}

uint64_t updateLingdbNNPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, const char *a7, int a8)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  const char *v52;
  uint64_t *v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  size_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  size_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  uint64_t v84;
  size_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, const char **);
  __int16 v92;
  uint64_t (*v93)(void);
  char *v94;
  unsigned int v96;
  const char *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__s1;
  __int16 v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  __int16 v113;
  unsigned int v114;
  int v115;
  int v116;
  __int16 v117;
  const char *v118;
  __int16 v119;
  char __s[10];
  char __dst[10];
  uint64_t v122;

  LODWORD(v8) = a8;
  v122 = *MEMORY[0x24BDAC8D0];
  __s1 = 0;
  v16 = heap_Calloc(*(_QWORD **)(a1 + 8), 32, 1);
  if (v16)
  {
    v21 = (char *)v16;
    v116 = 0;
    v115 = 0;
    v114 = 0;
    v113 = 0;
    v111 = 0;
    v112 = 0;
    v110 = 0;
    v109 = 0;
    v22 = *(unsigned __int16 *)(a5 + 1096);
    v105 = a5;
    v104 = *(char **)(a5 + 1088);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __int16 *))(a2 + 176))(a3, a4, v22, 1, &v110, &v109);
    if ((v23 & 0x80000000) != 0)
    {
      return v23;
    }
    else
    {
      cstdlib_strcpy(__dst, "");
      v101 = a2;
      v107 = a3;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, v22, (char *)&v116 + 2);
      if ((v24 & 0x80000000) != 0)
      {
        v28 = a1;
      }
      else
      {
        v25 = HIWORD(v116);
        if (HIWORD(v116))
        {
          v97 = a7;
          v99 = v8;
          v26 = 0;
          LOWORD(v8) = 0;
          v98 = a6;
          v106 = a4;
          v27 = a3;
          v28 = a1;
          v29 = v101;
          v103 = v28;
          while (1)
          {
            v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v29 + 168))(v27, a4, v25, 0, 1, &v114, (char *)&v115 + 2);
            if ((v24 & 0x80000000) != 0)
              goto LABEL_136;
            if (v114 <= 0xA && ((1 << v114) & 0x610) != 0)
              break;
LABEL_119:
            v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v29 + 120))(v27, a4, HIWORD(v116), (char *)&v116 + 2);
            if ((v24 & 0x80000000) != 0)
              goto LABEL_136;
            v25 = HIWORD(v116);
            if (!HIWORD(v116))
              goto LABEL_129;
          }
          v31 = *(_QWORD *)(a5 + 1064);
          v112 = *(_DWORD *)(v31 + 184 * v26 + 16);
          if ((unsigned __int16)v112 == HIWORD(v112))
          {
            v32 = v21;
            goto LABEL_118;
          }
          HIWORD(v111) = 0;
          if (v26 | (unsigned __int16)v8 && (unsigned __int16)v8 >= v26)
          {
            __dst[0] = 0;
          }
          else
          {
            v33 = *(unsigned __int16 *)(a5 + 1072);
            LOWORD(v8) = v26;
            if (v33 > v26)
            {
              v34 = (_DWORD *)(v31 + 184 * v26 + 112);
              v8 = v26;
              while (*((unsigned __int8 *)v34 - 36) - 3 >= 2 && !*v34)
              {
                ++v8;
                v34 += 46;
                if (v33 == v8)
                  goto LABEL_23;
              }
            }
            if ((_DWORD)v33 == (unsigned __int16)v8)
            {
LABEL_23:
              v113 = *(_WORD *)(v31 + 184 * *(unsigned __int16 *)(a5 + 1072) - 166);
              if (*(_QWORD *)(a5 + 1768))
                v35 = *(const char **)(a5 + 1768);
              else
                v35 = "T";
              LOWORD(v8) = v33;
            }
            else
            {
              v113 = *(_WORD *)(v31 + 184 * (unsigned __int16)v8 + 18);
              if ((unsigned __int16)v8 + 1 == (_DWORD)v33)
              {
                if (*(_QWORD *)(a5 + 1768))
                  v35 = *(const char **)(a5 + 1768);
                else
                  v35 = "T";
              }
              else
              {
                v35 = "P";
              }
            }
            cstdlib_strcpy(__dst, v35);
            if (v26)
            {
              if (*(_BYTE *)(*(_QWORD *)(a5 + 1064) + 184 * (v26 - 1) + 76) == 3)
                v36 = 2;
              else
                v36 = 1;
            }
            else
            {
              v36 = 0;
            }
            HIWORD(v111) = v36;
            v27 = v107;
            if (__dst[0])
            {
              LOWORD(v111) = 0;
              v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v29 + 88))(v107, a4, HIWORD(v116), &v116);
              if ((v37 & 0x80000000) != 0
                || (v114 = 15,
                    v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 0, 1, &v114, &v115), (v37 & 0x80000000) != 0)|| (v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 1, 1, &v112, &v115), (v37 & 0x80000000) != 0)|| (v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, int *))(v29 + 160))(v107,
                            a4,
                            (unsigned __int16)v116,
                            2,
                            1,
                            &v113,
                            &v115),
                    (v37 & 0x80000000) != 0))
              {
LABEL_135:
                v24 = v37;
                goto LABEL_136;
              }
              v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(v29 + 160);
              v39 = (unsigned __int16)v116;
              v40 = cstdlib_strlen(__dst);
              v41 = v38(v107, a4, v39, 4, (unsigned __int16)(v40 + 1), __dst, &v115);
              if ((v41 & 0x80000000) != 0
                || (v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 7, 1, (char *)&v111 + 2, &v115), (v41 & 0x80000000) != 0))
              {
                v24 = v41;
                v32 = v21;
                goto LABEL_137;
              }
              v27 = v107;
              v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 8, 1, &v111, &v115);
              a5 = v105;
              if ((v37 & 0x80000000) != 0)
                goto LABEL_135;
            }
          }
          LOWORD(v111) = 0;
          v42 = *(_QWORD *)(a5 + 1064);
          if (*(_BYTE *)(v42 + 184 * v26 + 76) == 4)
          {
            if (*(unsigned __int16 *)(a5 + 1072) - 1 != v26)
            {
              v43 = cstdlib_strlen(*(const char **)(v42 + 184 * v26 + 56));
              LOWORD(v111) = 100;
              if (doesWordEndInCommaNN(*(_QWORD *)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 56), v97)
                || (v44 = *(_QWORD *)(a5 + 1064), *(_DWORD *)(v44 + 184 * v26 + 100))
                || *(_BYTE *)(*(_QWORD *)(v44 + 184 * v26 + 56) + (v43 - 1)) == 46)
              {
                v45 = v98;
                LOWORD(v111) = v98;
              }
              else
              {
                v45 = (unsigned __int16)v111;
              }
              v27 = v107;
              if (v45)
                goto LABEL_55;
            }
            v42 = *(_QWORD *)(a5 + 1064);
          }
          if (*(_DWORD *)(v42 + 184 * v26 + 112))
            LOWORD(v111) = v98;
LABEL_55:
          v46 = v27;
          v47 = HIWORD(v116);
          v119 = 0;
          v118 = 0;
          v117 = 0;
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(v29 + 184))(v46, a4, HIWORD(v116), 18, &v119);
          v24 = v48;
          if ((v48 & 0x80000000) != 0 || !v119)
          {
            v49 = v107;
            if ((v48 & 0x80000000) != 0)
              goto LABEL_136;
          }
          else
          {
            v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(v29 + 176))(v107, a4, v47, 18, &v118, &v117);
            if ((v37 & 0x80000000) != 0)
              goto LABEL_135;
            v49 = v107;
            if (!cstdlib_strcmp(v118, "external"))
              goto LABEL_62;
          }
          v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v29 + 160))(v49, a4, HIWORD(v116), 8, 1, &v111, &v115);
          if ((v37 & 0x80000000) != 0)
            goto LABEL_135;
LABEL_62:
          v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v29 + 176))(v49, a4, HIWORD(v116), 9, &__s1, (char *)&v115 + 2);
          if ((v37 & 0x80000000) != 0)
            goto LABEL_135;
          if (cstdlib_strcmp(__s1, "normal"))
          {
            v50 = cstdlib_strcmp(__s1, "mnx");
            v51 = *(_QWORD *)(a5 + 1064);
            if (v50)
              v102 = *(unsigned __int8 *)(v51 + 184 * v26 + 77);
            else
              v102 = 0;
          }
          else
          {
            v102 = 0;
            v51 = *(_QWORD *)(a5 + 1064);
          }
          v52 = *(const char **)(v51 + 184 * v26 + 128);
          if (v52)
          {
            if (cstdlib_strlen(v52) - 32 > 0xFFFFFFFFFFFFFFDELL)
            {
              v32 = v21;
            }
            else
            {
              v53 = *(uint64_t **)(v28 + 8);
              v54 = cstdlib_strlen(*(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 128));
              v32 = (char *)heap_Realloc(v53, (uint64_t)v21, v54 + 1);
              if (!v32)
              {
                v24 = 2315264010;
                log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v55, v56, v57, v58, v96);
                goto LABEL_136;
              }
            }
            if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 128), "O")
              && cstdlib_strcmp(*(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 128), "O-P"))
            {
              cstdlib_strcpy(v32, "B-");
              cstdlib_strcat(v32, *(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 128));
            }
            else
            {
              cstdlib_strcpy(v32, *(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 128));
            }
            if (cstdlib_strlen(v32) >= 2)
            {
              v59 = cstdlib_strlen(v32);
              if (!cstdlib_strcmp(&v32[v59 - 2], "-P"))
                v32[cstdlib_strlen(v32) - 2] = 0;
            }
          }
          else
          {
            if (*v21 && cstdlib_strcmp(v21, "O"))
              *v21 = 73;
            v32 = v21;
          }
          v60 = *(_QWORD *)(a5 + 1064);
          v61 = *(const char **)(v60 + 184 * v26 + 80);
          if (v61)
          {
            v62 = *(_QWORD *)(v28 + 8);
            v63 = cstdlib_strlen(v61);
            v64 = (char *)heap_Alloc(v62, v63 + 1);
            if (!v64)
              goto LABEL_141;
            v69 = v64;
            cstdlib_strcpy(v64, *(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 80));
          }
          else
          {
            v70 = *(char **)(v60 + 184 * v26 + 48);
            if (v70)
            {
              v71 = hlp_NLUStrValueLen(v70);
              v72 = (char *)heap_Alloc(*(_QWORD *)(v28 + 8), v71 + 1);
              if (!v72)
              {
LABEL_141:
                v24 = 2315264010;
                log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v65, v66, v67, v68, v96);
                goto LABEL_137;
              }
              v69 = v72;
              cstdlib_strncpy(v72, *(const char **)(*(_QWORD *)(a5 + 1064) + 184 * v26 + 48), v71);
              v69[v71] = 0;
            }
            else
            {
              v69 = 0;
            }
          }
          v73 = HIWORD(v116);
          v74 = *(_QWORD *)(a5 + 1064);
          v75 = *(char **)(v74 + 184 * v26 + 168);
          if (v99 && !*(_QWORD *)(v74 + 184 * v26 + 40))
          {
            if (!cstdlib_strcmp(v32, ""))
            {
              v28 = v103;
              if (!v69)
              {
LABEL_117:
                log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v76, v77, v78, HIWORD(v116));
                LH_itoa(v102, __s, 0xAu);
                v93 = *(uint64_t (**)(void))(v29 + 160);
                cstdlib_strlen(__s);
                v27 = v107;
                v24 = v93();
                if ((v24 & 0x80000000) != 0)
                  goto LABEL_137;
LABEL_118:
                ++v26;
                v21 = v32;
                a4 = v106;
                if (*(unsigned __int16 *)(a5 + 1072) <= v26)
                  goto LABEL_129;
                goto LABEL_119;
              }
LABEL_116:
              heap_Free(*(_QWORD **)(v28 + 8), (uint64_t)v69);
              goto LABEL_117;
            }
            v74 = *(_QWORD *)(a5 + 1064);
          }
          v100 = v73;
          v79 = v74 + 184 * v26;
          v80 = *(const char **)(v79 + 40);
          if (v80)
          {
            v81 = cstdlib_strlen(*(const char **)(v79 + 40)) + 1;
            if (!v69)
              goto LABEL_98;
          }
          else
          {
            v81 = 1;
            if (!v69)
            {
LABEL_98:
              v83 = cstdlib_strlen(";PHR:");
              v84 = v83 + v81 + cstdlib_strlen(v32);
              if (v75)
              {
                v85 = cstdlib_strlen(";BNDSHAPE:");
                v84 += v85 + cstdlib_strlen(v75);
              }
              v86 = (char *)heap_Alloc(*(_QWORD *)(v103 + 8), v84);
              if (!v86)
              {
                v24 = 2315264010;
                v28 = v103;
                goto LABEL_137;
              }
              v90 = v86;
              LOWORD(v118) = 0;
              if (v80)
              {
                cstdlib_strcpy(v86, v80);
                if (!v69)
                  goto LABEL_109;
              }
              else
              {
                *v86 = 0;
                if (!v69)
                  goto LABEL_109;
              }
              if (*v69)
                hlp_NLUStrSet(v90, "POS", v69);
LABEL_109:
              if (*v32)
                hlp_NLUStrSet(v90, "PHR", v32);
              if (v75 && *v75)
                hlp_NLUStrSet(v90, "BNDSHAPE", v75);
              v28 = v103;
              log_OutText(*(_QWORD *)(v103 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v87, v88, v89, v100);
              v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, const char **))(v29 + 160);
              v92 = cstdlib_strlen(v90);
              v24 = v91(v107, v106, v100, 14, (unsigned __int16)(v92 + 1), v90, &v118);
              heap_Free(*(_QWORD **)(v103 + 8), (uint64_t)v90);
              if ((v24 & 0x80000000) != 0)
                goto LABEL_137;
              if (!v69)
                goto LABEL_117;
              goto LABEL_116;
            }
          }
          v82 = cstdlib_strlen(";POS:");
          v81 += v82 + cstdlib_strlen(v69);
          goto LABEL_98;
        }
        v28 = a1;
LABEL_129:
        if (!cstdlib_strcmp(__dst, "W") || !cstdlib_strcmp(__dst, "AF"))
        {
          v94 = cstdlib_strrchr(v104, 63);
          if (v94 && v94 != v104 && *(v94 - 1) != 32)
            *v94 = 46;
        }
LABEL_136:
        v32 = v21;
LABEL_137:
        v21 = v32;
      }
      heap_Free(*(_QWORD **)(v28 + 8), (uint64_t)v21);
    }
  }
  else
  {
    v24 = 2315264010;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v96);
  }
  return v24;
}

_QWORD *freeRules(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = a2[80];
  if (v4)
    result = heap_Free((_QWORD *)result[1], v4);
  v5 = a2[56];
  if (v5)
    result = heap_Free((_QWORD *)v3[1], v5);
  v6 = a2[57];
  if (v6)
    result = heap_Free((_QWORD *)v3[1], v6);
  v7 = a2[61];
  if (v7)
    result = heap_Free((_QWORD *)v3[1], v7);
  v8 = a2[62];
  if (v8)
    result = heap_Free((_QWORD *)v3[1], v8);
  v9 = a2[66];
  if (v9)
    result = heap_Free((_QWORD *)v3[1], v9);
  v10 = a2[67];
  if (v10)
    return heap_Free((_QWORD *)v3[1], v10);
  return result;
}

_QWORD *freePwInObjClose(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;

  v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    v11 = *a2;
    if (*a2)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v12);
        if (v13)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v13);
          *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v12) = 0;
          v11 = *a2;
        }
        ++v12;
      }
      while (v12 < v11);
      v10 = *((_QWORD *)a2 + 1);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *((_QWORD *)a2 + 1) = 0;
    *a2 = 0;
  }
  v14 = *((_QWORD *)a2 + 3);
  if (v14)
  {
    v15 = a2[16];
    if (a2[16])
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v16);
        if (v17)
        {
          heap_Free(*(_QWORD **)(a1 + 8), v17);
          *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v16) = 0;
          v15 = a2[16];
        }
        ++v16;
      }
      while (v16 < v15);
      v14 = *((_QWORD *)a2 + 3);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    *((_QWORD *)a2 + 3) = 0;
    a2[16] = 0;
  }
  freePandPRules((_QWORD *)a2 + 138, v14, a3, a4, a5, a6, a7, a8);
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a2);
}

_QWORD *freeSPPunc(_QWORD *result, uint64_t a2)
{
  if (a2)
    return heap_Free((_QWORD *)result[1], a2);
  return result;
}

_QWORD *freeSentenceDataNN(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 1768);
  if (v4)
  {
    result = heap_Free((_QWORD *)result[1], v4);
    *(_QWORD *)(a2 + 1768) = 0;
  }
  v5 = *(_QWORD *)(a2 + 1080);
  if (v5)
  {
    result = heap_Free((_QWORD *)v3[1], v5);
    *(_QWORD *)(a2 + 1080) = 0;
  }
  v6 = *(_QWORD *)(a2 + 1064);
  if (v6)
  {
    if (*(_WORD *)(a2 + 1072))
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if (*(_QWORD *)(v6 + v7 + 40))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 40));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 40) = 0;
        }
        if (*(_QWORD *)(v6 + v7 + 24))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 24));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 24) = 0;
        }
        if (*(_QWORD *)(v6 + v7 + 128))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 128));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 128) = 0;
        }
        if (*(_QWORD *)(v6 + v7 + 144))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 144));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 144) = 0;
        }
        if (*(_QWORD *)(v6 + v7 + 160))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 160));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 160) = 0;
        }
        if (*(_QWORD *)(v6 + v7 + 168))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7 + 168));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7 + 168) = 0;
        }
        if (*(_QWORD *)(v6 + v7))
        {
          heap_Free((_QWORD *)v3[1], *(_QWORD *)(v6 + v7));
          v6 = *(_QWORD *)(a2 + 1064);
          *(_QWORD *)(v6 + v7) = 0;
        }
        ++v8;
        v7 += 184;
      }
      while (v8 < *(unsigned __int16 *)(a2 + 1072));
    }
    result = heap_Free((_QWORD *)v3[1], v6);
    *(_QWORD *)(a2 + 1064) = 0;
  }
  *(_DWORD *)(a2 + 1072) = 0;
  *(_DWORD *)(a2 + 1096) = 0;
  return result;
}

uint64_t nn_model_getBrokerString(uint64_t a1, char *a2, const char *a3, unint64_t a4)
{
  uint64_t result;
  int v9;
  char *v10;
  char *__s2;
  char __s1[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  __s2 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__s1 = 0u;
  v13 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v10);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, a3);
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v10);
      v9 = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, a4);
      return v9 & (v9 >> 31);
    }
  }
  return result;
}

uint64_t initFiModel(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, _QWORD *a10)
{
  uint64_t BrokerString;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int16 v36;
  const char **v37;
  _OWORD v38[16];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v35 = 0;
  v33 = 0;
  v34 = 0;
  memset(v38, 0, sizeof(v38));
  v36 = -1;
  BrokerString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_phrase_nn_type_joint", &v37, &v36, &v35);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v16 = 2315264010;
  if (v36)
  {
    v17 = *v37;
    v17[cstdlib_strlen(*v37) - 1] = 0;
    if (cstdlib_strcmp(*v37, "yes"))
    {
      *a9 = 0;
      v18 = *(_QWORD *)(a1 + 8);
      v19 = 16;
    }
    else
    {
      *a9 = 1;
      v18 = *(_QWORD *)(a1 + 8);
      v19 = 8;
    }
    v24 = (_QWORD *)heap_Alloc(v18, v19);
    if (!v24)
    {
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v31);
      return v16;
    }
    BrokerString = nn_model_getBrokerString(a1, (char *)v38, "nnphrase_", 0x100uLL);
    if ((BrokerString & 0x80000000) == 0)
    {
      v16 = fi_init(a2, a3, a4, a5, &v34, 0, (uint64_t)v38, "FINN", 1031, 0);
      if ((v16 & 0x80000000) != 0)
      {
        v28 = *(_QWORD *)(a1 + 32);
        v29 = "load FI model failed";
        goto LABEL_14;
      }
      *v24 = v34;
      if (*a9)
      {
LABEL_11:
        *a10 = v24;
        return v16;
      }
      BrokerString = nn_model_getBrokerString(a1, (char *)v38, "nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        v16 = fi_init(a2, a3, a4, a5, &v33, 0, (uint64_t)v38, "FINN", 1031, 0);
        if ((v16 & 0x80000000) == 0)
        {
          v24[1] = v33;
          goto LABEL_11;
        }
        v28 = *(_QWORD *)(a1 + 32);
        v29 = "load FI pw model failed";
LABEL_14:
        log_OutText(v28, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v29, v25, v26, v27, v32);
        return v16;
      }
    }
    return BrokerString;
  }
  return 2315264020;
}

uint64_t loadEmbedding(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, _BOOL4 *a9)
{
  uint64_t result;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int16 v24;
  char *__s1;
  const char **v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  __s1 = 0;
  v24 = -1;
  v23 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_embed_type", &v26, &v24, &v23);
  if ((result & 0x80000000) == 0)
  {
    result = 2315264020;
    if (v24)
    {
      if (v26)
      {
        v15 = *v26;
        v15[cstdlib_strlen(*v26) - 1] = 0;
        v16 = extstdlib_strtok_r((char *)*v26, "|", (const char **)&__s1);
        v17 = !cstdlib_strcmp(v16, "joint_char") && !cstdlib_strcmp(__s1, "joint_word");
        *a9 = v17;
        result = nn_word_lkp_GetInterface(1u, &v27);
        if ((result & 0x80000000) == 0)
        {
          *a5 = safeh_GetNullHandle();
          a5[1] = v18;
          a5[2] = safeh_GetNullHandle();
          a5[3] = v19;
          v20 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t *))(v27 + 16);
          v21 = *a4;
          v22 = a4[1];
          if (*a9)
          {
            result = v20(v21, v22, "joint_char", a1, a2, a5);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, uint64_t *))(v27 + 16))(*a4, a4[1], "joint_word", a1, a2, a5 + 2);
          }
          else
          {
            result = v20(v21, v22, "albert", a1, a2, a5);
          }
          if ((result & 0x80000000) == 0)
            *a3 = v27;
        }
      }
    }
  }
  return result;
}

_QWORD *freeSpRules(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = *(_QWORD *)a2;
    if (v3)
    {
      v4 = result;
      v5 = *(unsigned __int16 *)(a2 + 10);
      if (*(_WORD *)(a2 + 10))
      {
        v6 = 0;
        do
        {
          v7 = *(_QWORD *)(v3 + 16 * v6);
          if (v7)
          {
            if (*(_WORD *)(v3 + 16 * v6 + 8))
            {
              v8 = 0;
              v9 = 0;
              do
              {
                if (*(_QWORD *)(v7 + v8 + 24))
                {
                  heap_Free((_QWORD *)v4[1], *(_QWORD *)(v7 + v8 + 24));
                  v3 = *(_QWORD *)a2;
                  v7 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v6);
                  *(_QWORD *)(v7 + v8 + 24) = 0;
                }
                if (*(_QWORD *)(v7 + v8 + 16))
                {
                  heap_Free((_QWORD *)v4[1], *(_QWORD *)(v7 + v8 + 16));
                  v3 = *(_QWORD *)a2;
                  v7 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v6);
                  *(_QWORD *)(v7 + v8 + 16) = 0;
                }
                ++v9;
                v8 += 40;
              }
              while (v9 < *(unsigned __int16 *)(v3 + 16 * v6 + 8));
            }
            heap_Free((_QWORD *)v4[1], v7);
            v3 = *(_QWORD *)a2;
            v10 = *(_QWORD *)a2 + 16 * v6;
            *(_QWORD *)v10 = 0;
            *(_WORD *)(v10 + 8) = 0;
            v5 = *(unsigned __int16 *)(a2 + 10);
          }
          ++v6;
        }
        while (v6 < v5);
      }
      result = heap_Free((_QWORD *)v4[1], v3);
      *(_QWORD *)a2 = 0;
      *(_WORD *)(a2 + 10) = 0;
    }
  }
  return result;
}

uint64_t nnEmbeddingReLoad(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, _BOOL4 *a9)
{
  uint64_t result;
  uint64_t v18;

  if (!*a3)
    goto LABEL_6;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(*a5, a5[1]);
  if ((result & 0x80000000) == 0)
  {
    if (!*a9
      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(a5[2], a5[3]), (result & 0x80000000) == 0))
    {
      *a3 = 0;
LABEL_6:
      *a4 = safeh_GetNullHandle();
      a4[1] = v18;
      *a9 = 1;
      return loadEmbedding(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  return result;
}

uint64_t nnModelReload(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t ***a11)
{
  uint64_t **v17;
  const char *v18;
  int v19;
  uint64_t BrokerString;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char v39;
  __int16 v40;
  const char **v41;
  _OWORD v42[16];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  memset(v42, 0, sizeof(v42));
  v17 = *a11;
  v40 = -1;
  (*(void (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a9 + 96))(a7, a8, "fecfg", "statbnd_phrase_nn_type_joint", &v41, &v40, &v39);
  v18 = *v41;
  v18[cstdlib_strlen(*v41) - 1] = 0;
  v19 = cstdlib_strcmp(*v41, "yes");
  BrokerString = nn_model_getBrokerString(a1, (char *)v42, "nnphrase_", 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v24 = fi_init(a2, a3, a5, a6, &v38, 0, (uint64_t)v42, "FINN", 1031, 0);
  if ((v24 & 0x80000000) != 0)
  {
    v25 = *(_QWORD *)(a1 + 32);
    v26 = "load FI model failed";
    goto LABEL_10;
  }
  if (!v17)
  {
    v27 = *(_QWORD *)(a1 + 8);
    if (v19)
    {
      v28 = (uint64_t **)heap_Alloc(v27, 16);
      if (v28)
      {
        v17 = v28;
        *v28 = v38;
        goto LABEL_14;
      }
    }
    else
    {
      v34 = (uint64_t **)heap_Alloc(v27, 8);
      if (v34)
      {
        v17 = v34;
        *v34 = v38;
        goto LABEL_23;
      }
    }
    v24 = 2315264010;
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v36);
    return v24;
  }
  if (!*v17 || (v24 = fi_deinit(a1, a4, *v17), (v24 & 0x80000000) == 0))
  {
    if (*a10 || (v33 = v17[1]) == 0 || (v24 = fi_deinit(a1, a4, v33), (v24 & 0x80000000) == 0))
    {
      *v17 = v38;
      if (!v19)
        goto LABEL_23;
LABEL_14:
      BrokerString = nn_model_getBrokerString(a1, (char *)v42, "nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        v24 = fi_init(a2, a3, a5, a6, &v37, 0, (uint64_t)v42, "FINN", 1031, 0);
        if ((v24 & 0x80000000) == 0)
        {
          v17[1] = v37;
LABEL_23:
          *a10 = v19 == 0;
          *a11 = v17;
          return v24;
        }
        v25 = *(_QWORD *)(a1 + 32);
        v26 = "load FI pw model failed";
LABEL_10:
        log_OutText(v25, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v26, v21, v22, v23, v36);
        return v24;
      }
      return BrokerString;
    }
  }
  return v24;
}

