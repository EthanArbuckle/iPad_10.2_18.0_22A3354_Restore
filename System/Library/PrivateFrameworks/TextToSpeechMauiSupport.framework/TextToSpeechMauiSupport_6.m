uint64_t clcpipeline_LoadObject(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  __int128 __b;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t NullHandle;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v47 = 0;
  v48 = a3;
  NullHandle = safeh_GetNullHandle();
  v46 = v12;
  v43 = 0;
  v44 = 0;
  __b = 0u;
  v42 = 0u;
  inited = InitRsrcFunction(a1, a2, &v47);
  if ((inited & 0x80000000) == 0)
  {
    if ((objc_GetObject(v47[6], a3, &v44) & 0x80000000) != 0)
    {
      cstdlib_memset(&__b, 0, 0x28uLL);
      LOBYTE(__b) = 1;
      v23 = brk_InterfaceQuery(v47[3]);
      if ((v23 & 0x80000000) != 0)
        return v23;
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v24, v25, v26, a4);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t, __int128 *))(*((_QWORD *)&__b + 1) + 32))(NullHandle, v46, a1, a2, &v42);
      if ((v27 & 0x80000000) != 0)
      {
        inited = v27;
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, (uint64_t)"%s%s%s%x", v28, v29, v30, v31, "component");
        brk_InterfaceRelease(v47[3], *((uint64_t *)&__b + 1));
        return inited;
      }
      inited = objc_RegisterObject(v47[6], a3, &__b);
      if ((inited & 0x80000000) != 0)
      {
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, (uint64_t)"%s%s%s%x", v32, v33, v34, v35, "component");
      }
      else
      {
        if (!a5 || vector_Add(a5, &v48))
          return inited;
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16000, 0, v36, v37, v38, v39, v40);
        inited = 2358255626;
      }
      (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)&__b + 1) + 40))(v42, *((_QWORD *)&v42 + 1));
      brk_InterfaceRelease(v47[3], *((uint64_t *)&__b + 1));
      return inited;
    }
    v17 = v44[1];
    if (*(_QWORD *)(v17 + 48))
    {
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen object: %s", v14, v15, v16, a3);
      if (a6)
        *a6 = 1;
      inited = (*(uint64_t (**)(_QWORD, _QWORD))(v17 + 48))(v44[2], v44[3]);
      if ((inited & 0x80000000) != 0)
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, (uint64_t)"%s%s%s%x", v18, v19, v20, v21, "component");
    }
    objc_ReleaseObject(v47[6], a3);
  }
  return inited;
}

uint64_t clcpipeline_silently_add_fe_clm_component(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Str;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  uint64_t Object;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t inserted;
  unsigned int v39;
  char *__s1;
  int v41;
  _QWORD *v42;

  __s1 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"blockautoinsertionfeclm", &__s1);
  if ((Str & 0x80000000) != 0 || (v7 = Str, !__s1) || cstdlib_strcmp(__s1, "yes"))
  {
    if (!*(_WORD *)(a2 + 16))
      return 0;
    v8 = 0;
    v9 = -1;
    v10 = -1;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v8);
      if (v11)
      {
        if (cstdlib_strcmp(*(const char **)(v11 + 8), "fe/fe_clm"))
        {
          if (!cstdlib_strcmp(*(const char **)(v11 + 8), "fe/fe_global"))
            v9 = v8;
        }
        else
        {
          v10 = v8;
        }
      }
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a2 + 16));
    v7 = 0;
    if (v10 == -1 && v9 != -1)
    {
      v42 = 0;
      v41 = 0;
      Object = objc_GetObject(*(_QWORD *)(a1 + 48), (uint64_t)"CLMOBJECT", &v42);
      if ((Object & 0x80000000) == 0)
        Object = (*(uint64_t (**)(_QWORD, _QWORD, int *))(v42[1] + 104))(v42[2], v42[3], &v41);
      v7 = Object;
      if (v42)
        objc_ReleaseObject(*(_QWORD *)(a1 + 48), (uint64_t)"CLMOBJECT");
      if ((v7 & 0x80000000) == 0 && v41)
      {
        if (v41 == 2)
          v13 = v9 + 1;
        else
          v13 = v9;
        v14 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 8), 8 * *(unsigned __int16 *)(a2 + 16) + 8);
        if (!v14)
          goto LABEL_41;
        *(_QWORD *)(a2 + 8) = v14;
        v19 = *(unsigned __int16 *)(a2 + 16);
        *(_QWORD *)(v14 + 8 * v19) = 0;
        if (*(_QWORD *)(a2 + 24))
        {
          v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 40), 8 * v19 + 32);
          if (!v20)
            goto LABEL_41;
          *(_QWORD *)(a2 + 40) = v20;
          v19 = *(unsigned __int16 *)(a2 + 16);
          *(_QWORD *)(v20 + 8 * v19 + 24) = 0;
        }
        v21 = heap_Realloc(*(uint64_t **)(a1 + 8), *a3, 16 * v19 + 16);
        if (v21)
        {
          *a3 = v21;
          v22 = (uint64_t *)(v21 + 16 * *(unsigned __int16 *)(a2 + 16));
          *v22 = safeh_GetNullHandle();
          v22[1] = v23;
          v24 = *(unsigned __int16 *)(a2 + 16);
          *(_WORD *)(a2 + 16) = v24 + 1;
          if (v24 > v13)
          {
            v25 = 16 * v24;
            do
            {
              *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v24) = *(_QWORD *)(*(_QWORD *)(a2 + 8)
                                                                     + 8 * (v24 - 1));
              *(_OWORD *)(*a3 + v25) = *(_OWORD *)(*a3 + 16 * --v24);
              v25 -= 16;
            }
            while (v13 < (unsigned __int16)v24);
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v13) = 0;
          v26 = (uint64_t *)(*a3 + 16 * v13);
          *v26 = safeh_GetNullHandle();
          v26[1] = v27;
          v33 = *(_QWORD *)(a2 + 40);
          if (!v33)
            return clcpipeline_PrepareForOpeningComponent((uint64_t *)a1, v13, "fe/fe_clm", (_QWORD *)a2);
          v34 = *(unsigned __int16 *)(a2 + 16) + 2;
          v35 = v13 + 2;
          if (v35 < (unsigned __int16)(*(_WORD *)(a2 + 16) + 2))
          {
            v36 = (unsigned __int16)(*(_WORD *)(a2 + 16) + 2);
            do
            {
              *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * (unsigned __int16)v34--) = *(_QWORD *)(*(_QWORD *)(a2 + 40)
                                                                                            + 8
                                                                                            * (v36 - 1));
              v36 = (unsigned __int16)v34;
            }
            while (v35 < (unsigned __int16)v34);
            v33 = *(_QWORD *)(a2 + 40);
          }
          *(_QWORD *)(v33 + 8 * v35) = 0;
          inserted = compstats_InsertNewAt(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), v35, v28, v29, v30, v31, v32);
          if ((inserted & 0x80000000) == 0)
            return clcpipeline_PrepareForOpeningComponent((uint64_t *)a1, v13, "fe/fe_clm", (_QWORD *)a2);
          return inserted;
        }
LABEL_41:
        v7 = 2358255626;
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_CLCML", 16000, 0, v15, v16, v17, v18, v39);
      }
    }
  }
  return v7;
}

uint64_t clcpipeline_disclose_location_of_fe_clm_component(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned int v9;

  v4 = paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"fe_clm_component", 0);
  if ((v4 & 0x80000000) != 0 || !*(_WORD *)(a2 + 16))
    return v4;
  v5 = 0;
  v6 = -1;
  v7 = -1;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v5);
    if (v8)
    {
      if (cstdlib_strcmp(*(const char **)(v8 + 8), "fe/fe_clm"))
      {
        if (!cstdlib_strcmp(*(const char **)(v8 + 8), "fe/fe_global"))
          v6 = v5;
      }
      else
      {
        v7 = v5;
      }
    }
    ++v5;
  }
  while (v5 < *(unsigned __int16 *)(a2 + 16));
  if (v7 == 0xFFFF || v6 == 0xFFFF)
    return v4;
  if (v6 >= v7)
    v9 = 1;
  else
    v9 = 2;
  return paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"fe_clm_component", v9);
}

uint64_t clcpipeline_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Str;
  int v18;
  uint64_t v19;
  uint64_t ResourceOwner;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, char *, const char *, uint64_t, uint64_t, __int128 *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33[2];
  __int128 v34;
  _QWORD *v35;
  char v36[1024];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v14 = 2358255623;
  v35 = 0;
  *(_QWORD *)&v34 = safeh_GetNullHandle();
  *((_QWORD *)&v34 + 1) = v15;
  if (a1 && a3)
  {
    v16 = *a1;
    if (a4)
    {
      if (cstdlib_strstr(a3, ";loader=broker"))
      {
        *(_QWORD *)v33 = 0;
        Str = paramc_ParamGetStr(*(_QWORD *)(v16 + 40), (uint64_t)"langcode", v33);
        if ((Str & 0x80000000) != 0)
          return Str;
        v18 = brokeraux_ComposeBrokerString(v16, a4, 1, 1, *(char **)v33, 0, 0, v36, 0x400uLL);
        if (v18 < 0)
          return v18 | 0x8C902000;
        a4 = v36;
      }
    }
    else
    {
      a4 = "";
    }
    if (a7)
    {
      *a7 = safeh_GetNullHandle();
      a7[1] = v19;
    }
    ResourceOwner = clcpipeline_FindResourceOwner((uint64_t)a1, a3, &v35);
    if ((ResourceOwner & 0x80000000) != 0)
    {
      v31 = ResourceOwner;
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16077, (uint64_t)"%s%s%s%s", v21, v22, v23, v24, "uri");
      return v31;
    }
    else
    {
      v25 = *(uint64_t (**)(_QWORD, _QWORD, char *, const char *, uint64_t, uint64_t, __int128 *))(v35[2] + 64);
      if (v25)
      {
        v26 = v25(v35[3], v35[4], a3, a4, a5, a6, &v34);
        v14 = v26;
        if ((v26 & 0x80000000) != 0)
        {
          if (!a2 || (v26 & 0x1FFF) != 0x40C)
            log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16038, (uint64_t)"%s%s%s%s%s%s%s%x", v27, v28, v29, v30, "component");
        }
        else if (a7)
        {
          *(_OWORD *)a7 = v34;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_CLCML", 16039, (uint64_t)"%s%s%s%s%s%s", v21, v22, v23, v24, "component");
      }
    }
  }
  return v14;
}

uint64_t clcpipeline_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t NullHandle;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;

  if (!a1)
    return 2358255622;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      compstats_Reset(v10);
      compstats_Start(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0, v11, v12, v13, v14, v15);
    }
    v16 = *(_WORD *)(a1 + 16);
    if (v16)
    {
      v17 = 0;
      v18 = (unsigned __int16)(v16 - 1) + 2;
      v19 = v16 - 1;
      do
      {
        v20 = v19;
        v21 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 8) + 8 * v19);
        if (v21)
        {
          v22 = *v21;
          v23 = v22 != 0;
          v24 = v22 - 1;
          if (v24 != 0 && v23)
          {
            *v21 = v24;
          }
          else
          {
            NullHandle = safeh_GetNullHandle();
            if (!safeh_HandlesEqual(*((_QWORD *)v21 + 3), *((_QWORD *)v21 + 4), NullHandle, v26))
            {
              log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Close component: %s", v27, v28, v29, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19) + 8));
              v35 = *(_QWORD *)(a1 + 24);
              if (v35)
                compstats_Start(v35, *(_QWORD *)(a1 + 32), v18, v30, v31, v32, v33, v34);
              v36 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v19);
              v42 = (*(uint64_t (**)(_QWORD, _QWORD))(v36[2] + 40))(v36[3], v36[4]);
              v43 = *(_QWORD *)(a1 + 24);
              if (v43)
                compstats_Stop(v43, *(_QWORD *)(a1 + 32), v18, v37, v38, v39, v40, v41);
              if ((v42 & 0x80000000) != 0)
              {
                log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"FE_CLCML", 16002, (uint64_t)"%s%s%s%x", v38, v39, v40, v41, "component");
                if ((int)v17 >= 0)
                  v17 = v42;
                else
                  v17 = v17;
              }
            }
            v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            v45 = *(_QWORD *)(v44 + 16);
            if (v45)
            {
              v46 = brk_InterfaceRelease(*(_QWORD *)(v9 + 24), v45);
              if (v46 >= 0 || (int)v17 <= -1)
                v17 = v17;
              else
                v17 = v46;
              v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            }
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(v44 + 8));
            heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v19));
          }
        }
        v18 = (v18 - 1);
        --v19;
      }
      while (v20);
    }
    else
    {
      v17 = 0;
    }
    v48 = *(_QWORD *)(a1 + 24);
    if (v48)
    {
      compstats_Stop(v48, *(_QWORD *)(a1 + 32), 0, a4, a5, a6, a7, a8);
      compstats_Log(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(v9 + 32), "Pipeline Close", *(_QWORD *)(a1 + 40), 0, 0);
    }
    heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(a1 + 8));
  }
  else
  {
    v17 = 0;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
    compstats_ObjClose(v49, *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v50);
      if (v51)
        heap_Free(*(_QWORD **)(v9 + 8), v51);
      ++v50;
    }
    while (*(unsigned __int16 *)(a1 + 16) + 3 > v50);
    heap_Free(*(_QWORD **)(v9 + 8), *(_QWORD *)(a1 + 40));
  }
  heap_Free(*(_QWORD **)(v9 + 8), a1);
  return v17;
}

uint64_t clcpipeline_Find(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;

  v3 = 2358255623;
  if (a1 && __s2 && *__s2)
  {
    v7 = 0;
    *a3 = 0;
    while (v7 < *(unsigned __int16 *)(a1 + 16))
    {
      if (cstdlib_strcmp(*(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7) + 8), __s2))
      {
        v8 = *a3;
      }
      else
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7);
        *a3 = v8;
      }
      ++v7;
      if (v8)
        return 0;
    }
    return 2358255636;
  }
  return v3;
}

uint64_t clcpipeline_FindResourceOwner(uint64_t a1, const char *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t *);
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t *);
  int v16;
  BOOL v17;
  uint64_t v19;

  v3 = 2358255623;
  if (a1 && a2 && *a2)
  {
    v7 = 0;
    *a3 = 0;
    while (v7 < *(unsigned __int16 *)(a1 + 16))
    {
      v19 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v7);
      v9 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v8[2] + 56);
      if (v9)
      {
        v10 = v9(v8[3], v8[4], &v19);
        v9 = (uint64_t (*)(_QWORD, _QWORD, uint64_t *))*a3;
        if ((v10 & 0x80000000) == 0)
        {
          if (v19)
          {
            if (v9)
              return 0;
            v11 = 0;
            while (1)
            {
              v12 = v11;
              v13 = *(const char **)(v19 + 8 * v11);
              if (!v13)
                break;
              v14 = cstdlib_strlen(v13);
              if (!cstdlib_strncmp(a2, *(const char **)(v19 + 8 * v12), v14)
                && ((v16 = a2[v14], v16 != 59) ? (v17 = v16 == 0) : (v17 = 1), v17))
              {
                v15 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)(a1 + 8) + 8 * v7);
                *a3 = v15;
              }
              else
              {
                v15 = (uint64_t (*)(_QWORD, _QWORD, uint64_t *))*a3;
              }
              v11 = v12 + 1;
              if (v15)
                return 0;
            }
            v9 = 0;
          }
        }
      }
      ++v7;
      if (v9)
        return 0;
    }
    return 2358255636;
  }
  return v3;
}

uint64_t clcpipeline_ResourceUnload(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t);

  v8 = 2358255623;
  if (a1)
  {
    v12 = 0;
    v13 = *a1;
    v8 = 2358255624;
    do
    {
      if (v12 >= *((unsigned __int16 *)a1 + 8))
        break;
      v14 = *(_QWORD **)(a1[1] + 8 * v12);
      v15 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v14[2] + 72);
      if (v15)
      {
        v8 = v15(v14[3], v14[4], a2, a3);
        if ((v8 & 0x80000000) == 0)
          return v8;
      }
      ++v12;
    }
    while ((v8 & 0x1FFF) == 8);
    if ((v8 & 0x80000000) != 0)
      log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"FE_CLCML", 16041, (uint64_t)"%s%p%s%x", a5, a6, a7, a8, "handle");
  }
  return v8;
}

uint64_t clcpipeline_UnloadObjects(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  int i;
  int Size;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  v20 = 0;
  v21 = 0;
  v19 = 0;
  inited = InitRsrcFunction(a1, a2, &v21);
  if ((inited & 0x80000000) == 0)
  {
    for (i = 1; i != 3; ++i)
    {
      Size = vector_GetSize(a3);
      if (Size)
      {
        v7 = Size - 1;
        do
        {
          if (!vector_GetElemAt(a3, v7, &v20))
            break;
          if ((objc_GetObject(v21[6], *v20, &v19) & 0x80000000) == 0)
          {
            objc_ReleaseObject(v21[6], *v20);
            if (i == 1)
            {
              v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v19[1] + 40))(v19[2], v19[3]);
              if (v8 < 0)
              {
                v13 = v8;
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16100, (uint64_t)"%s%x%s%s", v9, v10, v11, v12, "lherror");
              }
              else
              {
                v13 = brk_InterfaceRelease(v21[3], v19[1]);
              }
            }
            else
            {
              v13 = objc_UnregisterObject(v21[6], *v20);
              if (v13 < 0)
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16101, (uint64_t)"%s%x%s%s", v14, v15, v16, v17, "lherror");
            }
            if (v13 >= 0)
              inited = inited;
            else
              inited = v13;
          }
          --v7;
        }
        while (v7 != -1);
      }
    }
  }
  return inited;
}

uint64_t fe_deinitlingdb_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (!a5)
    return 2308972551;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v23[6], (uint64_t)"LINGDB", &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
  v8 = v23[6];
  if ((Object & 0x80000000) != 0)
  {
    v16 = "LINGDB";
LABEL_15:
    objc_ReleaseObject(v8, (uint64_t)v16);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"FE_DEPES", &v20);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    v8 = v23[6];
    v16 = "SYNTHSTREAM";
    goto LABEL_15;
  }
  v9 = heap_Alloc(v23[1], 928);
  if (v9)
  {
    v14 = v9;
    *(_QWORD *)v9 = v23;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v22 + 8);
    v15 = v20;
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(v20 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v15 + 16);
    *(_DWORD *)(v9 + 920) = 0;
    if ((paramc_ParamGetUInt(v23[5], (uint64_t)"usewordorthography", &v19) & 0x80000000) == 0 && v19 == 1)
      *(_DWORD *)(v14 + 920) = 1;
    *(_QWORD *)a5 = v14;
    *(_DWORD *)(a5 + 8) = 62337;
  }
  else
  {
    log_OutPublic(v23[4], (uint64_t)"FE_DEINITLINGDB", 31000, 0, v10, v11, v12, v13, v18);
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v23[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v23[6], (uint64_t)"FE_DEPES");
    return 2308972554;
  }
  return Object;
}

uint64_t fe_deinitlingdb_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0)
    return 2308972552;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_deinitlingdb_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((int)result >= 0)
    return result;
  else
    return 2308972552;
}

uint64_t fe_deinitlingdb_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0)
    return 2308972552;
  synstrmaux_InitStreamOpener(a1 + 48, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_DEINITLINGDB");
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/plain;charset=depes", a1 + 872);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 888);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/x-realspeak-phonemes;charset=tts", a1 + 904);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 16), a3, a4);
  if ((v7 & 0x80000000) != 0)
  {
    v8 = v7;
LABEL_7:
    synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
    return v8;
  }
  v8 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"willbeprocessingdeinitlingdb", "yes");
  if ((v8 & 0x80000000) != 0)
    goto LABEL_7;
  return v8;
}

uint64_t fe_deinitlingdb_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  uint64_t (*v23)(_QWORD, _QWORD, char *, _QWORD);
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int16 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v37;
  uint64_t (*v38)(_QWORD, _QWORD, char *, size_t);
  size_t v39;
  int v40;
  int v41;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int *v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t (*v69)(uint64_t, uint64_t, const char *, ...);
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, char *, size_t);
  size_t v73;
  int v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  __int16 v79;
  uint64_t (*v80)(_QWORD, _QWORD, char *, size_t);
  size_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  unsigned __int16 v91;
  unsigned __int16 v92;
  unsigned int v93;
  int v94;
  int v95;
  char *v96;
  int v97;
  unsigned __int16 v98;
  uint64_t v99;
  int v100;
  char *__s;
  char v102;
  char v103;
  char v104[30];
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  __s = 0;
  v99 = 0;
  v96 = 0;
  v95 = 0;
  v91 = 0;
  v90 = 0;
  v89 = 0;
  result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0)
    return 2308972552;
  *a5 = 1;
  if (*(_QWORD *)(a1 + 872))
  {
    v100 = 0;
    v98 = 0;
    v97 = 0;
    v93 = 0;
    v94 = 0;
    v92 = 0;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 272))(a3, a4, 98, 3, 0, 0);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v100 + 2);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 8)
                                                                                              + 168))(a3, a4, HIWORD(v100), 3, 1, &v90, &v100);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v94, 1);
    if (v10 < 0)
      goto LABEL_46;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v93, 0);
    if (v10 < 0)
      goto LABEL_46;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v100), 0, &v95);
    v12 = *(_QWORD *)(a1 + 8);
    if (v11 < 0 || (unsigned __int16)v95 != 1)
    {
      v13 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v12 + 184))(a3, a4, HIWORD(v100), 1, &v95) & 0x80000000) != 0|| (unsigned __int16)v95 != 1|| (v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 8)+ 176))(a3, a4, HIWORD(v100), 1, &v99, &v100), (v10 & 0x80000000) == 0)&& ((v13 = (unsigned __int16)v100, !(_WORD)v100)|| (v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896),
                     v99,
                     32 * (unsigned __int16)v100),
             (v10 & 0x80000000) == 0)))
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), "##", 3);
        if (v13)
        {
          v15 = 0;
          v16 = 0;
          v17 = (_DWORD *)(v99 + 12);
          v18 = v13;
          do
          {
            if (*(v17 - 3) == 8)
            {
              v19 = v17[3];
              v20 = v19 + v15;
              v21 = v19 + v16;
              if (*v17 == *(_DWORD *)(v99 + 12))
                v16 = v21;
              else
                v15 = v20;
            }
            v17 += 8;
            --v18;
          }
          while (v18);
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
        if (!(v16 | v15))
          goto LABEL_47;
        v102 = 35;
        if (v16)
        {
          v103 = 91;
          LH_utoa(v16, v104, 0xAu);
          v32 = cstdlib_strlen(&v102);
          *(&v102 + v32) = 93;
          *(&v102 + v32 + 1) = 35;
          v33 = v32 + 2;
        }
        else
        {
          v103 = 35;
          v33 = 2;
        }
        v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v102, v33);
        if ((v10 & 0x80000000) == 0)
        {
          if (v15)
          {
            v102 = 91;
            LH_utoa(v15, &v103, 0xAu);
            v34 = cstdlib_strlen(&v102);
            *(&v102 + v34) = 93;
            *(&v102 + v34 + 1) = 0;
            v35 = v34 + 2;
          }
          else
          {
            v102 = 0;
            v35 = 1;
          }
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v102, v35);
        }
      }
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(v12 + 176))(a3, a4, HIWORD(v100), 0, &__s, &v100);
      if ((v10 & 0x80000000) == 0)
      {
        if ((unsigned __int16)v100 <= 1u)
        {
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), "##", 3);
          goto LABEL_46;
        }
        v22 = cstdlib_strlen(__s);
        v23 = *(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 16) + 104);
        v24 = __s;
        v25 = cstdlib_strlen(__s);
        v10 = v23(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), v24, (v25 + 1));
        if (v10 < 0)
          goto LABEL_46;
        v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a1 + 8)
                                                                                             + 176))(a3, a4, HIWORD(v100), 1, &v99, &v100);
        if (v10 < 0)
          goto LABEL_46;
        v26 = (unsigned __int16)v100;
        v27 = v99 + 12;
        v28 = *(_DWORD *)(v99 + 12);
        v87 = v22;
        if ((_WORD)v100)
        {
          v29 = 0;
          v30 = 0;
          while (*(_DWORD *)v27 == v28)
          {
            if (*(_DWORD *)(v27 - 12) == 8)
              v30 += *(_WORD *)(v27 + 12);
            ++v29;
            v27 += 32;
            if ((unsigned __int16)v100 == v29)
            {
              v31 = (unsigned __int16)v100;
              goto LABEL_58;
            }
          }
          v31 = (unsigned __int16)v29;
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
LABEL_58:
        v37 = 1;
        (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "#", 1);
        if (v30)
        {
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "[", 1);
          if (v10 < 0)
            goto LABEL_46;
          LH_itoa(v30, &v102, 0xAu);
          v38 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104);
          v39 = cstdlib_strlen(&v102);
          v10 = v38(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v102, v39);
          if (v10 < 0)
            goto LABEL_46;
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
          if (v10 < 0)
            goto LABEL_46;
          v37 = cstdlib_strlen(&v102) + 3;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 152))(a3, a4, 2, HIWORD(v100), &v95) & 0x80000000) != 0|| !(_WORD)v95)
        {
          v75 = v91;
        }
        else
        {
          v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 104))(a3, a4, 2, HIWORD(v100), &v98);
          if (v10 < 0)
            goto LABEL_46;
          v85 = 0;
          v86 = 0;
          v40 = 0;
          v88 = 0;
          v83 = 1;
          v84 = v28;
          while (v98)
          {
            v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
            if (v10 < 0)
              goto LABEL_46;
            v41 = v97;
            if ((v97 - 9) < 6 || v97 == 4)
            {
              if (v97 == 11)
              {
                v43 = v88;
              }
              else
              {
                v43 = v88;
                if (v88)
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x12\x10", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v43 = 0;
                  v37 += 2;
                  v41 = v97;
                }
              }
              if (v41 != 12 && HIDWORD(v86))
              {
                v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x13\x10", 2);
                if (v10 < 0)
                  goto LABEL_46;
                HIDWORD(v86) = 0;
                v37 += 2;
              }
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v98, 1, 1, &v92, &v100);
              if (v10 < 0)
                goto LABEL_46;
              v88 = v43;
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v98, 2, 1, &v91, &v100);
              if (v10 < 0)
                goto LABEL_46;
              v44 = v92;
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                 + 176))(a3, a4, v98, 3, &v96, &v100);
              if (v10 < 0)
                goto LABEL_46;
              v45 = v37 - v44 + v40;
              if (!v96 || !*v96)
                goto LABEL_102;
              v46 = cstdlib_strlen(v96);
              v47 = v46;
              if (!*(_DWORD *)(a1 + 920) && (_WORD)v46)
              {
                v48 = 0;
                v49 = 0;
                do
                {
                  if (v48 && v96[v48] == 42 && v96[(v48 - 1)] != 45)
                  {
                    v96[v48] = 45;
                    v49 = 1;
                  }
                  ++v48;
                }
                while ((unsigned __int16)v46 != v48);
                if (v49 == 1)
                {
                  v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(*(_QWORD *)(a1 + 8) + 160);
                  v51 = v98;
                  v52 = cstdlib_strlen(v96);
                  v10 = v50(a3, a4, v51, 3, (unsigned __int16)(v52 + 1), v96, &v89);
                  if (v10 < 0)
                    goto LABEL_46;
                }
              }
              v85 = v47;
              if (v96 && *v96)
              {
                if (v83)
                {
                  v53 = 0;
                  v54 = v45;
                }
                else
                {
                  v69 = *(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)(a1 + 16) + 104);
                  v70 = *(_QWORD *)(a1 + 904);
                  v71 = *(_QWORD *)(a1 + 912);
                  if (HIWORD(v95))
                  {
                    v10 = v69(v70, v71, "%#[", 3);
                    if (v10 < 0)
                      goto LABEL_46;
                    LH_itoa(HIWORD(v95), &v102, 0xAu);
                    v72 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104);
                    v73 = cstdlib_strlen(&v102);
                    v10 = v72(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v102, v73);
                    if (v10 < 0)
                      goto LABEL_46;
                    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
                    if (v10 < 0)
                      goto LABEL_46;
                    v54 = v45 + cstdlib_strlen(&v102) + 4;
                    v53 = v45;
                  }
                  else
                  {
                    v10 = v69(v70, v71, "-*", 2);
                    if (v10 < 0)
                      goto LABEL_46;
                    v53 = 0;
                    v54 = v45 + 2;
                  }
                }
                v74 = v97;
                if (v97 == 13)
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x10\x12", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v54 += 2;
                  v88 = 1;
                  v74 = v97;
                }
                if (v74 == 14)
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x10\x13", 2);
                  if (v10 < 0)
                    goto LABEL_46;
                  v45 = v54 + 2;
                  HIDWORD(v86) = 1;
                }
                else
                {
                  v45 = v54;
                }
                if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, v98, 8, &v95) & 0x80000000) != 0|| (unsigned __int16)v95 != 1)
                {
                  v83 = 0;
                  HIWORD(v95) = 0;
                }
                else
                {
                  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v98, 8, 1, (char *)&v95 + 2, &v100);
                  if (v10 < 0)
                    goto LABEL_46;
                  v83 = 0;
                }
              }
              else
              {
LABEL_102:
                v53 = 0;
              }
              v55 = v92;
              if (v31 >= v26)
              {
                v30 = 0;
              }
              else
              {
                v30 = 0;
                v56 = v99;
                v57 = v28 + (__int16)v92 + (__int16)v45;
                v58 = v28 + (__int16)v92 + v53;
                v59 = v86;
                while (1)
                {
                  v60 = v56 + 32 * v31;
                  v62 = *(_DWORD *)(v60 + 12);
                  v61 = (int *)(v60 + 12);
                  if (v55 < (unsigned __int16)(v62 - v28))
                    break;
                  *v61 = v57;
                  if (*(_DWORD *)(v56 + 32 * v31) == 8)
                  {
                    if (v31)
                    {
                      v63 = v31;
                      do
                      {
                        v64 = v56 + 32 * (v63 - 1);
                        v66 = *(_DWORD *)(v64 + 12);
                        v65 = (int *)(v64 + 12);
                        if (v66 == *v61)
                          *v65 = v58;
                        --v63;
                      }
                      while ((_WORD)v63);
                    }
                    v30 += *(_WORD *)(v56 + 32 * v31 + 24);
                    *v61 = v58;
                    v59 = v55;
                  }
                  if (++v31 >= v26)
                  {
                    LODWORD(v86) = v59;
                    v31 = v26;
                    goto LABEL_117;
                  }
                }
                LODWORD(v86) = v59;
              }
LABEL_117:
              v40 = v91;
              v37 = v55 - v91 + v45;
              if (v96 && *v96)
              {
                v67 = v26;
                v68 = v91;
                v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912));
                if (v10 < 0)
                  goto LABEL_46;
                v37 += v85;
                v40 = v68;
                v26 = v67;
                v28 = v84;
              }
            }
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, v98, &v98);
            if (v14 < 0)
              goto LABEL_47;
          }
          if (v88)
          {
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x12\x10", 2);
            if (v10 < 0)
              goto LABEL_46;
            LOWORD(v37) = v37 + 2;
          }
          if (HIDWORD(v86))
          {
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "\x13\x10", 2);
            if (v10 < 0)
              goto LABEL_46;
            LOWORD(v37) = v37 + 2;
          }
          v75 = v91;
          if ((_WORD)v86 && (unsigned __int16)v86 == (unsigned __int16)(v91 - 1))
          {
LABEL_144:
            if (v31 >= v26)
            {
              v78 = v87;
            }
            else
            {
              v76 = v99 + 32 * v31 + 12;
              v77 = v26 - v31;
              v78 = v87;
              do
              {
                *(_DWORD *)v76 = v28 + (__int16)v37 + (__int16)v75 + 1;
                if (*(_DWORD *)(v76 - 12) == 8)
                  v30 += *(_WORD *)(v76 + 12);
                v76 += 32;
                --v77;
              }
              while (v77);
            }
            (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "#", 1);
            v79 = v37 - v78 + v75 + 1;
            if (v30)
            {
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "[", 1);
              if (v10 < 0)
                goto LABEL_46;
              LH_itoa(v30, &v102, 0xAu);
              v80 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 16) + 104);
              v81 = cstdlib_strlen(&v102);
              v10 = v80(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v102, v81);
              if (v10 < 0)
                goto LABEL_46;
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "]", 1);
              if (v10 < 0)
                goto LABEL_46;
              v79 += cstdlib_strlen(&v102) + 2;
            }
            (*(void (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), "", 1);
            *(_DWORD *)(v99 + 16) += v79;
            v82 = v93 + v79 + v94;
            v93 = 0;
            v94 = v82;
            v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
            if ((v10 & 0x80000000) == 0)
            {
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v93, 0);
              if ((v10 & 0x80000000) == 0)
                v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 104))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v99, (32 * v26));
            }
            goto LABEL_46;
          }
        }
        v30 = 0;
        goto LABEL_144;
      }
    }
LABEL_46:
    v14 = v10;
LABEL_47:
    if (v90)
      v14 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
    LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a3, a4);
    if (v14 > -1 && (int)result < 0)
      return result;
    else
      return v14;
  }
  return result;
}

uint64_t fe_deinitlingdb_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0)
    return 2308972552;
  result = synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(_QWORD *)(a1 + 16));
  if ((result & 0x80000000) == 0)
    return paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"willbeprocessingdeinitlingdb", "no");
  return result;
}

uint64_t fe_deinitlingdb_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2308972545;
  result = 0;
  *a2 = &IFeDeinitlingdb;
  return result;
}

uint64_t sprop_str_realloc(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;

  v3 = *(_DWORD *)(a2 + 16);
  if (a3 + 1 <= v3)
    return 0;
  if (v3 <= 1)
    v3 = 1;
  do
  {
    v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3 + 1);
  v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a2, v6);
  if (v7)
  {
    v12 = v7;
    result = 0;
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 16) = v6;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v14);
    return 2409635850;
  }
  return result;
}

uint64_t sprop_str_dealloc(uint64_t a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 4))
  {
    heap_Free(*(_QWORD **)(a1 + 8), *a2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  a2[1] = 0;
  return 0;
}

uint64_t sprop_str_clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    **(_BYTE **)a1 = 0;
  }
  return 0;
}

uint64_t sprop_str_cat(uint64_t a1, uint64_t a2, char *__s, unsigned int a4)
{
  unsigned int v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = a4;
  v8 = *(unsigned int *)(a2 + 8);
  if (!a4)
    v4 = cstdlib_strlen(__s);
  v9 = v4 + v8;
  v10 = sprop_str_realloc(a1, a2, v4 + v8);
  if ((v10 & 0x80000000) == 0)
  {
    cstdlib_memcpy((void *)(*(_QWORD *)a2 + v8), __s, v4);
    *(_BYTE *)(*(_QWORD *)a2 + v9) = 0;
    *(_DWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) += Utf8_LengthInUtf8chars((unint64_t)__s, v4);
  }
  return v10;
}

uint64_t sprop_str_copy(uint64_t a1, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 16))
  {
    *(_QWORD *)(a2 + 8) = 0;
    **(_BYTE **)a2 = 0;
  }
  if (!a3)
    return 0;
  result = sprop_str_cat(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
    return 0;
  return result;
}

uint64_t sprop_str_take_ownership(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16))
  {
    heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)a2 = a3;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 8) = a4 - 1;
  *(_BYTE *)(a3 + (a4 - 1)) = 0;
  v8 = Utf8_LengthInUtf8chars(*(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  *(_DWORD *)(a2 + 12) = v8;
  if (*(_DWORD *)(a2 + 8) != (_DWORD)v8)
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"utf8length = %d, byte length = %d", v9, v10, v11, v8);
  return 0;
}

uint64_t sprop_ne_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  const char *v38;
  char *__s1;
  int v40[2];
  char v41[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v38 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  __s1 = 0;
  *(_QWORD *)v40 = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v40);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v38);
  if ((Str & 0x80000000) != 0)
    return Str;
  v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(_QWORD *)a4, 256);
  if (v9)
  {
    v14 = (char *)v9;
    *(_QWORD *)a4 = v9;
    if (cstdlib_strstr(__s1, "uni"))
    {
      __sprintf_chk(v41, 0, 0x80uLL, "crf/ne/%s/%s/ne", *(const char **)v40, v38);
      v15 = 0;
      __s1 = 0;
    }
    else
    {
      __sprintf_chk(v41, 0, 0x80uLL, "crf/ne/%s/%s/%s/ne", *(const char **)v40, __s1, v38);
      v15 = __s1;
    }
    v16 = brokeraux_ComposeBrokerString(a3, v41, 1, 1, *(char **)v40, v15, 0, v14, 0x100uLL);
    if ((v16 & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v17, v18, v19, *(_QWORD *)a4);
      if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v37) & 0x80000000) == 0)
      {
        v23 = crf_Init(a1, a2, (uint64_t)v37, a4 + 8);
        if ((v23 & 0x80000000) != 0)
        {
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading named entity model (NE): %x", v24, v25, v26, v23);
        }
        else
        {
          *(_DWORD *)(a4 + 352) = 1;
          log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v24, v25, v26, *(_QWORD *)a4);
        }
        return ssftriff_reader_ObjClose(v37, v27, v28, v29, v30, v31, v32, v33);
      }
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no named entity model (NE)", v20, v21, v22, v36);
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v35);
    return 2409635850;
  }
  return v16;
}

uint64_t sprop_ne_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;

  v10 = *(_QWORD *)a2;
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1)
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a2 + 352) = 0;
  v11 = *(_QWORD *)(a2 + 360);
  if (v11 && *(_DWORD *)(a2 + 376))
  {
    v12 = 0;
    while (1)
    {
      v13 = sprop_str_set_dealloc(a1, *(_QWORD *)(a2 + 360) + 16 * v12);
      if ((v13 & 0x80000000) != 0)
        break;
      if (*(_DWORD *)(a2 + 376) <= ++v12)
      {
        v11 = *(_QWORD *)(a2 + 360);
        goto LABEL_12;
      }
    }
  }
  else
  {
    v13 = 0;
LABEL_12:
    heap_Free(*(_QWORD **)(a1 + 8), v11);
    *(_QWORD *)(a2 + 360) = 0;
    heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 368));
    *(_QWORD *)(a2 + 368) = 0;
    *(_DWORD *)(a2 + 376) = 0;
  }
  return v13;
}

uint64_t sprop_ne_label(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t word_features;
  unsigned __int16 i;
  unsigned __int16 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;

  v9 = *(_DWORD *)(a2 + 352);
  v40 = SPROP_STR_SET_null;
  if (v9)
  {
    v14 = *(_DWORD *)(a5 + 8);
    if (v14)
    {
      v15 = (void *)heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 360), (16 * v14));
      if (!v15
        || (*(_QWORD *)(a2 + 360) = v15,
            cstdlib_memset(v15, 0, (16 * v14)),
            (v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 368), (8 * v14))) == 0))
      {
        v35 = 2409635850;
        log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v16, v17, v18, v19, v37);
        return v35;
      }
      *(_QWORD *)(a2 + 368) = v20;
    }
    *(_DWORD *)(a2 + 376) = v14;
    word_features = sprop_get_word_features(a1, a3, *(_QWORD *)(a2 + 360));
    if ((word_features & 0x80000000) == 0)
    {
      v39 = 0;
      v38 = 0;
      if (*(_DWORD *)(a2 + 376))
      {
        for (i = 0; ; ++i)
        {
          sprop_str_set_add(a1, (uint64_t)&v40, "", "", 0);
          v23 = i;
          word_features = sprop_str_set_join(a1, v40 + 24 * i, *(_QWORD *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0)
            break;
          word_features = sprop_str_set_dealloc(a1, *(_QWORD *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0)
            break;
          *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * i) = *(_QWORD *)(v40 + 24 * i);
          v24 = *(_DWORD *)(a2 + 376);
          if (v24 <= (unsigned __int16)(v23 + 1))
          {
            if (!v24)
              return sprop_str_set_dealloc(a1, (uint64_t)&v40);
            word_features = crf_Process(a2 + 8, *(_QWORD **)(a2 + 368), v24, &v39, &v38);
            if ((word_features & 0x80000000) == 0)
            {
              if (v38 == *(_DWORD *)(a2 + 376))
              {
                if (v38)
                {
                  v28 = 0;
                  do
                  {
                    sprop_str_set_add(a1, (uint64_t)a4, "", "", 0);
                    v29 = *a4 + 24 * v28;
                    v30 = *(const char **)(v39 + 8 * v28);
                    v31 = cstdlib_strlen(v30);
                    sprop_str_take_ownership(a1, v29, (uint64_t)v30, v31);
                    if (a5 && *(_DWORD *)(*(_QWORD *)a5 + 24 * v28 + 8))
                      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector ne : %s %s : %s", v25, v26, v27, *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * v28));
                    ++v28;
                  }
                  while (*(_DWORD *)(a2 + 376) > v28);
                }
                v32 = *(_QWORD *)(a1 + 32);
                v33 = "traceFeatureVector ne : END_OF_SEQUENCE : ";
                v34 = 4;
              }
              else
              {
                v32 = *(_QWORD *)(a1 + 32);
                v33 = "sprop_dcme_label: crf_Process returned no predictions";
                v34 = 0;
              }
              log_OutText(v32, (uint64_t)"FE_SPROP", v34, 0, (uint64_t)v33, v25, v26, v27, v37);
              if (v39)
                heap_Free(*(_QWORD **)(a1 + 8), v39);
              return sprop_str_set_dealloc(a1, (uint64_t)&v40);
            }
            return word_features;
          }
        }
      }
      else
      {
        return sprop_str_set_dealloc(a1, (uint64_t)&v40);
      }
    }
    return word_features;
  }
  else
  {
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_ne_label: called while model not loaded", a6, a7, a8, v37);
    return 2409635842;
  }
}

uint64_t sprop_str_set_realloc(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 >= a3)
    return 0;
  if (v3 <= 1)
    v3 = 1;
  do
  {
    v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3);
  v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)a2, 24 * v6);
  if (v7)
  {
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 12) = v6;
    cstdlib_memset((void *)(v7 + 24 * *(unsigned int *)(a2 + 8)), 0, 24 * (v6 - *(_DWORD *)(a2 + 8)));
    return 0;
  }
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v13);
  return 2409635850;
}

uint64_t sprop_str_set_dealloc(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;

  v2 = *(_DWORD *)(a2 + 12);
  if (!v2)
    return 0;
  *(_DWORD *)(a2 + 8) = 0;
  while (1)
  {
    v5 = sprop_str_dealloc(a1, (uint64_t *)(*(_QWORD *)a2 + 24 * v2 - 24));
    if ((v5 & 0x80000000) != 0)
      break;
    v2 = *(_DWORD *)(a2 + 12) - 1;
    *(_DWORD *)(a2 + 12) = v2;
    if (!v2)
    {
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)a2);
      *(_QWORD *)a2 = 0;
      return v5;
    }
  }
  return v5;
}

uint64_t sprop_str_set_clear(uint64_t a1)
{
  unsigned int v1;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    return 0;
  do
  {
    result = sprop_str_clear(*(_QWORD *)a1 + 24 * v1 - 24);
    if ((result & 0x80000000) != 0)
      break;
    v1 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v1;
  }
  while (v1);
  return result;
}

uint64_t sprop_str_set_dump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_str_set_dump: %s (%d records)", a6, a7, a8, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_str_set_dump: record[%d] = %s", v10, v11, v12, v14++);
      v13 += 24;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
  return 0;
}

uint64_t sprop_str_set_add(uint64_t a1, uint64_t a2, char *a3, char *a4, unsigned int a5)
{
  uint64_t result;

  result = sprop_str_set_realloc(a1, a2, *(_DWORD *)(a2 + 8) + 1);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_cat(a1, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8), a3, 0);
    if ((result & 0x80000000) == 0)
    {
      result = sprop_str_cat(a1, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8), a4, a5);
      if ((result & 0x80000000) == 0)
        ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sprop_str_set_join(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  sprop_str_clear(a2);
  if (!*(_DWORD *)(a3 + 8))
    return 0;
  result = sprop_str_copy(a1, a2, **(char ***)a3, *(_DWORD *)(*(_QWORD *)a3 + 8));
  if ((result & 0x80000000) == 0 && *(_DWORD *)(a3 + 8) >= 2u)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      result = sprop_str_cat(a1, a2, " ", 1u);
      if ((result & 0x80000000) != 0)
        break;
      result = sprop_str_cat(a1, a2, *(char **)(*(_QWORD *)a3 + v7 + 24), *(_DWORD *)(*(_QWORD *)a3 + v7 + 32));
      if ((result & 0x80000000) != 0)
        break;
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a3 + 8));
  }
  return result;
}

uint64_t sprop_dcme_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Str;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _BYTE **v51;
  _BYTE *i;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const char *v58;
  char *__s1;
  int v60[2];
  char v61[16];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  __s1 = 0;
  *(_QWORD *)v60 = 0;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  *(_OWORD *)v61 = 0u;
  v62 = 0u;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"langcode", v60);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a3 + 40), (uint64_t)"fecfg", &v58);
  if ((Str & 0x80000000) != 0)
    return Str;
  v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(_QWORD *)a4, 256);
  if (!v9)
  {
    log_OutPublic(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v54);
    return 2409635850;
  }
  v14 = (char *)v9;
  *(_QWORD *)a4 = v9;
  if (cstdlib_strstr(__s1, "uni"))
  {
    __sprintf_chk(v61, 0, 0x80uLL, "crf/dcls/%s/%s/default", *(const char **)v60, v58);
    v15 = 0;
    __s1 = 0;
  }
  else
  {
    __sprintf_chk(v61, 0, 0x80uLL, "crf/dcls/%s/%s/%s/default", *(const char **)v60, __s1, v58);
    v15 = __s1;
  }
  v16 = brokeraux_ComposeBrokerString(a3, v61, 1, 1, *(char **)v60, v15, 0, v14, 0x100uLL);
  if ((v16 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v17, v18, v19, *(_QWORD *)a4);
    if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v57) & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no maxent doc class model (DCME)", v20, v21, v22, v55);
      return v16;
    }
    v23 = crf_Init(a1, a2, (uint64_t)v57, a4 + 8);
    if ((v23 & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading maxent doc class model (DCME): %x", v24, v25, v26, v23);
      return ssftriff_reader_ObjClose(v57, v27, v28, v29, v30, v31, v32, v33);
    }
    *(_DWORD *)(a4 + 352) = 1;
    log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v24, v25, v26, *(_QWORD *)a4);
    if (*(_DWORD *)(a4 + 352) == 1)
    {
      if (*(_DWORD *)(a4 + 48))
      {
        v34 = 0;
        v35 = 0;
        do
        {
          v36 = *(_QWORD *)(a3 + 32);
          cstdlib_strlen(*(const char **)(*(_QWORD *)(a4 + 40) + v34));
          log_OutText(v36, (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].key   = %.40s%s", v37, v38, v39, v35);
          v40 = *(_QWORD *)(a3 + 32);
          cstdlib_strlen(*(const char **)(*(_QWORD *)(a4 + 40) + v34 + 8));
          log_OutText(v40, (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].value = %.40s%s", v41, v42, v43, v35++);
          v34 += 16;
        }
        while (v35 < *(unsigned int *)(a4 + 48));
      }
      else
      {
        log_OutText(*(_QWORD *)(a3 + 32), (uint64_t)"FE_SPROP", 3, 0, (uint64_t)"_dcme_dump_params: no params loaded", v31, v32, v33, v56);
      }
      if (*(_DWORD *)(a4 + 352) == 1 && *(_DWORD *)(a4 + 48))
      {
        v44 = 0;
        v16 = 0;
        while (1)
        {
          v45 = cstdlib_strcmp("features", *(const char **)(*(_QWORD *)(a4 + 40) + 16 * v44));
          v46 = *(_QWORD *)(a4 + 40);
          if (!v45)
          {
            v16 = sprop_str_copy(a3, a4 + 400, *(char **)(v46 + 16 * v44 + 8), 0);
            v51 = (_BYTE **)(a4 + 400);
            if ((v16 & 0x80000000) != 0)
              return v16;
            goto LABEL_32;
          }
          v47 = cstdlib_strcmp("uni500", *(const char **)(v46 + 16 * v44));
          v48 = *(_QWORD *)(a4 + 40);
          if (!v47)
            break;
          v49 = cstdlib_strcmp("threshold", *(const char **)(v48 + 16 * v44));
          v50 = *(_QWORD *)(a4 + 40);
          if (v49)
          {
            if (!cstdlib_strcmp("numbers", *(const char **)(v50 + 16 * v44)))
            {
              v51 = (_BYTE **)(a4 + 472);
              v16 = sprop_str_copy(a3, a4 + 472, *(char **)(*(_QWORD *)(a4 + 40) + 16 * v44 + 8), 0);
              if ((v16 & 0x80000000) != 0)
                return v16;
              goto LABEL_32;
            }
          }
          else
          {
            v16 = sprop_str_copy(a3, a4 + 448, *(char **)(v50 + 16 * v44 + 8), 0);
            if ((v16 & 0x80000000) != 0)
              return v16;
          }
LABEL_39:
          if (++v44 >= (unint64_t)*(unsigned int *)(a4 + 48))
          {
            if ((v16 & 0x80000000) == 0)
              return ssftriff_reader_ObjClose(v57, v27, v28, v29, v30, v31, v32, v33);
            return v16;
          }
        }
        v16 = sprop_str_copy(a3, a4 + 424, *(char **)(v48 + 16 * v44 + 8), 0);
        v51 = (_BYTE **)(a4 + 424);
        if ((v16 & 0x80000000) != 0)
          return v16;
LABEL_32:
        for (i = *v51; ; ++i)
        {
          if (*i == 32)
          {
            *i = 0;
          }
          else if (!*i)
          {
            goto LABEL_39;
          }
        }
      }
    }
    return ssftriff_reader_ObjClose(v57, v27, v28, v29, v30, v31, v32, v33);
  }
  return v16;
}

uint64_t sprop_dcme_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;

  v10 = *(_QWORD *)a2;
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1)
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a2 + 352) = 0;
  result = sprop_str_set_dealloc(a1, a2 + 360);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 376));
    if ((result & 0x80000000) == 0)
    {
      result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 400));
      if ((result & 0x80000000) == 0)
      {
        result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 424));
        if ((result & 0x80000000) == 0)
        {
          result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 448));
          if ((result & 0x80000000) == 0)
            return sprop_str_dealloc(a1, (uint64_t *)(a2 + 472));
        }
      }
    }
  }
  return result;
}

uint64_t sprop_dcme_label(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t features;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char **v38;
  uint64_t v39;

  if (*(_DWORD *)(a2 + 352))
  {
    v13 = a2 + 360;
    features = sprop_str_set_clear(a2 + 360);
    if ((features & 0x80000000) != 0)
      return features;
    v15 = (_QWORD *)(a2 + 448);
    features = sprop_get_features(a1, a3, a2 + 400, a2 + 424, (_QWORD *)(a2 + 448), a2 + 472, v13);
    if ((features & 0x80000000) != 0)
      return features;
    features = sprop_str_set_join(a1, a2 + 376, v13);
    if ((features & 0x80000000) != 0)
      return features;
    v38 = 0;
    v37 = 0;
    if (!*v15)
    {
      v19 = cstdlib_strstr(*(char **)(a2 + 376), " lc");
      if (v19)
        v19[3] = 0;
    }
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: features = %s", v16, v17, v18, *(_QWORD *)(a2 + 376));
    v39 = *(_QWORD *)(a2 + 376);
    features = crf_Process(a2 + 8, &v39, 1u, (uint64_t *)&v38, &v37);
    if ((features & 0x80000000) != 0)
    {
      return features;
    }
    else
    {
      if (v37)
      {
        v23 = *v38;
        if (v37 != 1)
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"sprop_dcme_label: crf_Process returned %d predictions, using only first one", v20, v21, v22, v37);
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: pred[0] = %s", v20, v21, v22, (uint64_t)v23);
        v24 = cstdlib_strlen(v23);
        v28 = sprop_str_take_ownership(a1, a4, (uint64_t)v23, v24);
        if (a5 && *(_DWORD *)(a5 + 8))
        {
          if (*v15)
            v29 = "intc ";
          else
            v29 = "";
          log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector dcls : %s%s %s : %s", v25, v26, v27, (uint64_t)v29);
        }
      }
      else
      {
        log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: crf_Process returned no predictions", v20, v21, v22, v36);
        v28 = 2409635847;
      }
      v31 = (uint64_t)v38;
      if (v38)
      {
        v32 = v37;
        v33 = --v37;
        if (v32 >= 2)
        {
          do
          {
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v38[v33]);
            v33 = v37 - 1;
          }
          while (v37-- > 1);
          v31 = (uint64_t)v38;
        }
        heap_Free(*(_QWORD **)(a1 + 8), v31);
      }
    }
  }
  else
  {
    v28 = 2409635842;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: called while model not loaded", a6, a7, a8, v35);
  }
  return v28;
}

uint64_t sprop_input_dealloc(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = sprop_str_dealloc(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_dealloc(a1, a2 + 3);
    if ((result & 0x80000000) == 0)
      return sprop_str_dealloc(a1, a2 + 6);
  }
  return result;
}

uint64_t sprop_input_clear(uint64_t a1)
{
  uint64_t result;

  result = sprop_str_clear(a1);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_str_clear(a1 + 24);
    if ((result & 0x80000000) == 0)
      return sprop_str_clear(a1 + 48);
  }
  return result;
}

uint64_t sprop_input_mrk_cnt(uint64_t a1)
{
  return (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
}

uint64_t sprop_input_mrk(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_DWORD *sprop_input_find_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *result;

  v3 = (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
  if ((unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5))
  {
    v4 = 0;
    result = *(_DWORD **)(a1 + 48);
    do
    {
      if (a3)
      {
        if (result == a3)
          a3 = 0;
      }
      else
      {
        if (*result == a2)
          return result;
        a3 = 0;
      }
      result += 8;
      ++v4;
    }
    while (v4 < v3);
  }
  return 0;
}

_DWORD *sprop_input_rfind_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *result;

  v3 = *(_DWORD *)(a1 + 56);
  if ((unsigned __int16)(v3 >> 5))
  {
    v4 = 0;
    result = (_DWORD *)((*(_QWORD *)&v3 & 0x1FFFE0) + *(_QWORD *)(a1 + 48) - 32);
    do
    {
      if (a3)
      {
        if (result == a3)
          a3 = 0;
      }
      else
      {
        if (*result == a2)
          return result;
        a3 = 0;
      }
      ++v4;
      result -= 8;
    }
    while (v4 < (unsigned __int16)(v3 >> 5));
  }
  return 0;
}

_OWORD *sprop_input_insert_marker(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v13;
  _OWORD *v14;
  __int128 v15;

  v7 = *(_QWORD *)(a2 + 48);
  v5 = a2 + 48;
  v6 = v7;
  v8 = *(unsigned int *)(v5 + 8);
  v9 = v7 + 32 * (unsigned __int16)(v8 >> 5);
  v10 = v7 <= a3 && v9 > a3;
  if (!v10 || (sprop_str_realloc(a1, v5, (int)v8 + 32) & 0x80000000) != 0)
    return 0;
  v13 = (v8 >> 5) - ((a3 - v6) >> 5);
  v14 = (_OWORD *)(*(_QWORD *)(a2 + 48) + a3 - v6);
  cstdlib_memmove(v14 + 2, v14, 32 * (unsigned __int16)v13);
  *(_DWORD *)(a2 + 56) += 32;
  v15 = a4[1];
  *v14 = *a4;
  v14[1] = v15;
  return v14;
}

uint64_t fe_sprop_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2409635841;
  result = 0;
  *a2 = &ISProp;
  return result;
}

uint64_t fe_sprop_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = 2409635847;
  if (a3)
  {
    v11 = 0;
    inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, 24);
      if (v8)
      {
        v3 = 0;
        v9 = v11;
        v8[1] = a2;
        v8[2] = v9;
        *v8 = a1;
        *(_QWORD *)a3 = v8;
        *(_DWORD *)(a3 + 8) = 501;
      }
      else
      {
        return 2409635850;
      }
    }
  }
  return v3;
}

uint64_t fe_sprop_ClassClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 501, 24);
  if ((result & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_sprop_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t UInt;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v5 = 2409635847;
  if (a5)
  {
    inited = safeh_HandleCheck(a1, a2, 501, 24);
    if ((inited & 0x80000000) != 0)
      return inited;
    v17 = 0;
    v18 = 0;
    inited = InitRsrcFunction(a3, a4, &v18);
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = objc_GetObject(*(_QWORD *)(v18 + 48), (uint64_t)"SYNTHSTREAM", &v17);
    if ((inited & 0x80000000) != 0)
      return inited;
    v11 = (uint64_t *)heap_Calloc(*(_QWORD **)(v18 + 8), 1, 1944);
    if (!v11)
      return 2409635850;
    v12 = v11;
    v13 = v18;
    *v11 = v18;
    v11[1] = (uint64_t)a3;
    v11[2] = a4;
    v11[3] = a1;
    v14 = v18;
    v11[4] = *(_QWORD *)(v17 + 8);
    v19 = 0;
    inited = sprop_dcme_load(a3, a4, v13, (uint64_t)(v11 + 125));
    if ((inited & 0x80000000) != 0)
      return inited;
    inited = sprop_ne_load((_WORD *)v12[1], v12[2], *v12, (uint64_t)(v12 + 187));
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *((_DWORD *)v12 + 484) = 0;
      UInt = paramc_ParamGetUInt(*(_QWORD *)(v14 + 40), (uint64_t)"dont_insert_ne_markers", &v19);
      if ((UInt & 0x1FFF) == 0x14)
      {
LABEL_16:
        v5 = 0;
        *(_QWORD *)a5 = v12;
        *(_DWORD *)(a5 + 8) = 501;
        return v5;
      }
      v5 = UInt;
      if ((UInt & 0x80000000) == 0 && v19 == 1)
      {
        *((_DWORD *)v12 + 484) = 1;
        goto LABEL_16;
      }
      if ((UInt & 0x80000000) == 0)
        goto LABEL_16;
    }
  }
  return v5;
}

uint64_t fe_sprop_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = safeh_HandleCheck((uint64_t)a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      v10 = *a1;
      result = sprop_dcme_unload(*a1, (uint64_t)(a1 + 125), v4, v5, v6, v7, v8, v9);
      if ((result & 0x80000000) == 0)
      {
        result = sprop_ne_unload(v10, (uint64_t)(a1 + 187), v11, v12, v13, v14, v15, v16);
        if ((result & 0x80000000) == 0)
        {
          result = sprop_input_dealloc(v10, a1 + 116);
          if ((result & 0x80000000) == 0)
          {
            result = sprop_str_dealloc(v10, a1 + 237);
            if ((result & 0x80000000) == 0)
            {
              result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 240));
              if ((result & 0x80000000) == 0)
              {
                result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 235));
                if ((result & 0x80000000) == 0)
                {
                  objc_ReleaseObject(*(_QWORD *)(v10 + 48), (uint64_t)"SYNTHSTREAM");
                  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = safeh_HandleCheck(a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    result = sprop_dcme_unload(*(_QWORD *)a1, a1 + 1000, v4, v5, v6, v7, v8, v9);
    if ((result & 0x80000000) == 0)
    {
      result = sprop_dcme_load(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, a1 + 1000);
      if ((result & 0x80000000) == 0)
      {
        result = sprop_ne_unload(*(_QWORD *)a1, a1 + 1496, v10, v11, v12, v13, v14, v15);
        if ((result & 0x80000000) == 0)
        {
          v16 = sprop_ne_load(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a1, a1 + 1496);
          return v16 & (v16 >> 31);
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  synstrmaux_InitStreamOpener(a1 + 40, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_SPROP");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 864);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 880);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  return v7;
}

uint64_t fe_sprop_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _BOOL4 v34;
  char **marker;
  char **v36;
  char *v37;
  _BOOL4 v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char *v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  char **v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  const char *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int16 v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 v71;
  uint64_t v72;
  __int16 v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  uint64_t v92;
  char *v93;
  int v94;
  uint64_t v95;
  int *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  _BOOL4 v107;
  _DWORD __n[5];
  __int128 v109;
  char *__s1[2];
  uint64_t v111;
  __int128 v112;
  char *v113[2];

  if ((safeh_HandleCheck((uint64_t)a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: start", v7, v8, v9, v102);
  *a5 = 1;
  *(_QWORD *)&__n[1] = 0;
  LODWORD(v112) = 0;
  LODWORD(v113[0]) = 0;
  __n[0] = 0;
  v10 = a1[4];
  v11 = a1[108];
  v12 = a1[109];
  LODWORD(__s1[0]) = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, char **))(v10 + 144))(v11, v12, __s1, v113);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (LODWORD(__s1[0]))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, __int128 *))(v10 + 88))(v11, v12, &__n[1], &v112);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v14 = *(char **)&__n[1];
  }
  else
  {
    v14 = 0;
    *(_QWORD *)&__n[1] = 0;
    LODWORD(v112) = 0;
  }
  v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 116), v14, 0);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 96))(a1[108], a1[109], v112);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v16 = a1[4];
  v17 = a1[110];
  v18 = a1[111];
  LODWORD(__s1[0]) = 0;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, _DWORD *))(v16 + 144))(v17, v18, __s1, __n);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (LODWORD(__s1[0]))
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, __int128 *))(v16 + 88))(v17, v18, &__n[1], &v112);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v19 = *(char **)&__n[1];
    v20 = v112;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    *(_QWORD *)&__n[1] = 0;
    LODWORD(v112) = 0;
  }
  v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 122), v19, v20);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v21 = sprop_input_mrk((uint64_t)(a1 + 116));
  v22 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
  if (!v22)
    goto LABEL_23;
  v15 = 0;
  v23 = v22;
  v24 = (char **)(v21 + 24);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v24 - 6)))
    {
      v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 235), "", *v24, 0);
      if ((v15 & 0x80000000) != 0)
        return v15;
      *v24 = *(char **)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
    }
    v24 += 4;
    --v23;
  }
  while (v23);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_23:
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 96))(a1[110], a1[111], v112);
    if ((v13 & 0x80000000) != 0)
      return v13;
    v25 = *a1;
    v26 = (int *)sprop_input_mrk((uint64_t)(a1 + 116));
    v27 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
    _dump_markers(v25, v26, v27);
    v31 = (int)v113[0];
    v32 = (int)v113[0];
    if (LODWORD(v113[0]) != __n[0])
    {
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"_read_streams: detected sync loss: bEndText=%d, bEndMrk=%d", v28, v29, v30, LODWORD(v113[0]));
      v32 = (int)v113[0];
      v31 = __n[0];
    }
    v34 = v32 == 1 || v31 == 1;
    if (!*((_DWORD *)a1 + 234))
      goto LABEL_127;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"fe_sprop_Process: input = %s", v28, v29, v30, a1[116]);
    if (*((_DWORD *)a1 + 338) != 1)
      goto LABEL_142;
    *(_OWORD *)__s1 = SPROP_STR_null;
    v111 = 0;
    *(_QWORD *)&__n[1] = 0;
    *(_QWORD *)&v112 = "";
    LOWORD(v113[0]) = 0;
    LOWORD(__n[0]) = 0;
    marker = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, 0);
    if (marker)
    {
      v36 = marker;
      do
      {
        v37 = hlp_NLUStrFind(v36[3], "S_CLASS", (char **)&__n[1], (unsigned __int16 *)v113);
        v38 = v37 == 0;
        if (v37)
          break;
        v36 = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, v36);
      }
      while (v36);
    }
    else
    {
      v38 = 1;
    }
    v39 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, 0);
    if (v39)
    {
      v43 = v39;
      do
      {
        v44 = hlp_NLUStrFind(v43[3], "E_CLASS", (char **)&v112, (unsigned __int16 *)__n);
        v45 = v44 == 0;
        if (v44)
          break;
        v43 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, v43);
      }
      while (v43);
    }
    else
    {
      v45 = 1;
    }
    if (!v38)
    {
      if (*((_DWORD *)a1 + 476))
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s implicitly closed by S_CLASS:%*s", v40, v41, v42, a1[237]);
      sprop_str_copy(*a1, (uint64_t)(a1 + 237), *(char **)&__n[1], LOWORD(v113[0]));
    }
    if (!v45 && *((_DWORD *)a1 + 476) && cstdlib_strncmp((const char *)a1[237], (const char *)v112, LOWORD(__n[0])))
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s closed by E_CLASS:%*s", v40, v41, v42, a1[237]);
    if (v38 && !*((_DWORD *)a1 + 476))
    {
      v46 = (uint64_t)(a1 + 237);
      v79 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, 0, v40, v41, v42);
      v80 = sprop_input_find_marker((uint64_t)(a1 + 116), 1, 0);
      if (v80)
      {
        v84 = (unint64_t)v80;
        *(_OWORD *)&__n[1] = 0u;
        v109 = 0u;
        cstdlib_memset(&__n[1], 0, 0x20uLL);
        v85 = *(_DWORD *)(v84 + 4);
        __n[1] = 51;
        __n[2] = v85;
        __n[4] = *(_DWORD *)(v84 + 12);
        if (v79 < 0 || !cstdlib_strcmp(__s1[0], "1"))
        {
          v86 = *a1;
          v87 = (uint64_t)(a1 + 235);
          v88 = "none";
        }
        else
        {
          v86 = *a1;
          v87 = (uint64_t)(a1 + 235);
          v88 = __s1[0];
        }
        v89 = sprop_str_set_add(v86, v87, "S_CLASS:", v88, 0);
        if ((v89 & 0x80000000) != 0)
        {
          v15 = v89;
        }
        else
        {
          *((_QWORD *)&v109 + 1) = *(_QWORD *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
          sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v84, &__n[1]);
          v90 = sprop_input_rfind_marker((uint64_t)(a1 + 116), 1, 0);
          v91 = v90[3];
          __n[2] = v90[1];
          __n[4] = v91;
          if (v79 < 0 || !cstdlib_strcmp(__s1[0], "1"))
          {
            v92 = *a1;
            v93 = "none";
          }
          else
          {
            v92 = *a1;
            v93 = __s1[0];
          }
          v15 = sprop_str_set_add(v92, (uint64_t)(a1 + 235), "E_CLASS:", v93, 0);
          if ((v15 & 0x80000000) == 0)
          {
            *((_QWORD *)&v109 + 1) = *(_QWORD *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
            sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), (unint64_t)v90, &__n[1]);
          }
        }
      }
      else
      {
        log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"unable to insert NLU CLASS markers", v81, v82, v83, v103);
        v15 = 2409635847;
      }
    }
    else
    {
      v46 = (uint64_t)(a1 + 237);
      v47 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, (uint64_t)(a1 + 237), v40, v41, v42);
      v15 = v47 & ~(v47 >> 31);
    }
    if (!v45)
      sprop_str_clear(v46);
    sprop_str_dealloc(*a1, (uint64_t *)__s1);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_142:
      if (*((_DWORD *)a1 + 462) != 1)
        goto LABEL_125;
      v112 = SPROP_STR_SET_null;
      v111 = 0;
      v109 = 0u;
      *(_OWORD *)__s1 = SPROP_STR_null;
      *(_OWORD *)&__n[1] = 0u;
      v15 = sprop_str_set_clear((uint64_t)(a1 + 240));
      v107 = v34;
      if ((v15 & 0x80000000) != 0)
        goto LABEL_124;
      v48 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
      v49 = sprop_input_mrk((uint64_t)(a1 + 116));
      if (!v48)
        goto LABEL_81;
      v53 = 0;
      v54 = 0;
      v113[0] = 0;
      LOWORD(__n[0]) = 0;
      v55 = v48;
      v56 = (char **)(v49 + 24);
      v57 = "";
      v58 = "O";
      do
      {
        v59 = *((_DWORD *)v56 - 6);
        if (v59 == 1)
        {
          v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 240), v58, v57, v54);
          if ((v15 & 0x80000000) != 0)
            goto LABEL_124;
          v60 = cstdlib_strcmp(v58, "B-");
          v61 = "I-";
          if (v60)
            v61 = v58;
          if (v53)
          {
            v57 = "";
            v58 = "O";
          }
          else
          {
            v58 = (char *)v61;
          }
          if (v53)
            v54 = 0;
          v53 = 0;
        }
        else if (v59 == 51)
        {
          if (hlp_NLUStrFind(*v56, "S_NE", v113, (unsigned __int16 *)__n))
          {
            v57 = v113[0];
            v58 = "B-";
            v54 = LOWORD(__n[0]);
          }
          if (hlp_NLUStrFind(*v56, "E_NE", v113, (unsigned __int16 *)__n))
            v53 = 1;
        }
        v56 += 4;
        --v55;
      }
      while (v55);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_81:
        v62 = sprop_ne_label(*a1, (uint64_t)(a1 + 187), (uint64_t)(a1 + 116), &v112, (uint64_t)(a1 + 240), v50, v51, v52);
        if ((v62 & 0x80000000) != 0)
        {
          v15 = 0;
          goto LABEL_124;
        }
        v15 = v62;
        if (*((_DWORD *)a1 + 468))
        {
          v63 = 0;
          v64 = 0;
          do
          {
            v65 = v64;
            if (!cstdlib_strncmp(*(const char **)(v112 + 24 * v64), "I-", 2uLL))
            {
              if (!v65
                || (v66 = v63 - 1, cstdlib_strlen(*(const char **)(v112 + 24 * v66)) < 3)
                || cstdlib_strcmp((const char *)(*(_QWORD *)(v112 + 24 * v65) + 2), (const char *)(*(_QWORD *)(v112 + 24 * v66) + 2)))
              {
                v67 = sprop_str_copy(*a1, (uint64_t)__s1, "B-", 0);
                if ((v67 & 0x80000000) != 0
                  || (v67 = sprop_str_cat(*a1, (uint64_t)__s1, (char *)(*(_QWORD *)(v112 + 24 * v65) + 2), 0),
                      (v67 & 0x80000000) != 0))
                {
LABEL_123:
                  v15 = v67;
                  goto LABEL_124;
                }
                v15 = sprop_str_copy(*a1, v112 + 24 * v65, __s1[0], 0);
                if ((v15 & 0x80000000) != 0)
                  goto LABEL_124;
              }
            }
            v64 = v65 + 1;
            v63 = (unsigned __int16)(v65 + 1);
          }
          while (*((_DWORD *)a1 + 468) > v63);
        }
        if (!*((_DWORD *)a1 + 484))
        {
          v68 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
          v69 = sprop_input_mrk((uint64_t)(a1 + 116));
          if (v68)
          {
            v70 = v69;
            v104 = (uint64_t)(a1 + 235);
            v105 = *((_DWORD *)a1 + 468);
            v71 = v68 - 1;
            do
            {
              v72 = v71;
              if (*(_DWORD *)(v70 + 32 * v71) == 1)
              {
                v73 = v105;
                v106 = *((_DWORD *)a1 + 468) != (unsigned __int16)v105
                    && cstdlib_strncmp(*(const char **)(v112 + 24 * (unsigned __int16)v105), "I-", 2uLL) == 0;
                LOWORD(v105) = v105 - 1;
                v74 = (unsigned __int16)(v73 - 1);
                v75 = v70;
                if (!cstdlib_strncmp(*(const char **)(v112 + 24 * v74), "B-", 2uLL))
                {
                  cstdlib_memset(&__n[1], 0, 0x20uLL);
                  __n[1] = 51;
                  v76 = v70 + 32 * v71;
                  __n[2] = *(_DWORD *)(v76 + 4);
                  __n[4] = *(_DWORD *)(v76 + 12);
                  v15 = sprop_str_set_add(*a1, v104, "S_NE:", (char *)(*(_QWORD *)(v112 + 24 * v74) + 2), 0);
                  if ((v15 & 0x80000000) != 0)
                    break;
                  v77 = (_QWORD *)(a1[235] + 24 * *((unsigned int *)a1 + 472) - 24);
                  if (!v106)
                  {
                    v67 = sprop_str_cat(*a1, a1[235] + 24 * *((unsigned int *)a1 + 472) - 24, ";E_NE:", 0);
                    if ((v67 & 0x80000000) != 0)
                      goto LABEL_123;
                    v15 = sprop_str_cat(*a1, (uint64_t)v77, (char *)(*(_QWORD *)(v112 + 24 * v74) + 2), 0);
                    if ((v15 & 0x80000000) != 0)
                      break;
                  }
                  *((_QWORD *)&v109 + 1) = *v77;
                  sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v70 + 32 * v71, &__n[1]);
                  v75 = sprop_input_mrk((uint64_t)(a1 + 116));
                }
                if (v106 || cstdlib_strncmp(*(const char **)(v112 + 24 * v74), "I-", 2uLL))
                {
                  v70 = v75;
                }
                else
                {
                  cstdlib_memset(&__n[1], 0, 0x20uLL);
                  __n[1] = 51;
                  v78 = v70 + 32 * v71;
                  __n[2] = *(_DWORD *)(v78 + 4);
                  __n[4] = *(_DWORD *)(v78 + 12);
                  v15 = sprop_str_set_add(*a1, v104, "E_NE:", (char *)(*(_QWORD *)(v112 + 24 * v74) + 2), 0);
                  if ((v15 & 0x80000000) != 0)
                    break;
                  *((_QWORD *)&v109 + 1) = *(_QWORD *)(a1[235] + 24 * *((unsigned int *)a1 + 472) - 24);
                  sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v70 + 32 * v71, &__n[1]);
                  v70 = sprop_input_mrk((uint64_t)(a1 + 116));
                }
              }
              --v71;
            }
            while (v72);
          }
        }
      }
LABEL_124:
      sprop_str_set_dealloc(*a1, (uint64_t)&v112);
      sprop_str_dealloc(*a1, (uint64_t *)__s1);
      v34 = v107;
      if ((v15 & 0x80000000) == 0)
      {
LABEL_125:
        v94 = *((_DWORD *)a1 + 234);
        if (v94)
        {
          v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 104))(a1[112], a1[113], a1[116], (v94 + 1));
          if ((v13 & 0x80000000) != 0)
            return v13;
        }
LABEL_127:
        if (!*((_DWORD *)a1 + 246)
          || (v95 = *a1,
              v96 = (int *)sprop_input_mrk((uint64_t)(a1 + 116)),
              v97 = sprop_input_mrk_cnt((uint64_t)(a1 + 116)),
              _dump_markers(v95, v96, v97),
              v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 104))(a1[114], a1[115], a1[122], *((unsigned int *)a1 + 246)), (v13 & 0x80000000) == 0))
        {
          if (!v34 || (v13 = synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 20, a1[4]), (v13 & 0x80000000) == 0))
          {
            v13 = sprop_input_clear((uint64_t)(a1 + 116));
            if ((v13 & 0x80000000) == 0)
            {
              v15 = sprop_str_set_clear((uint64_t)(a1 + 235));
              if ((v15 & 0x80000000) == 0)
                log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: end (fRet=0x%x)", v98, v99, v100, v15);
              return v15;
            }
          }
        }
        return v13;
      }
    }
  }
  return v15;
}

uint64_t fe_sprop_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0)
    return 2409635848;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t _dump_markers(uint64_t result, int *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v4 = result;
    v5 = 0;
    v6 = a3;
    do
    {
      marker_hasCharPtrArg(*a2);
      result = log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"mrk[%02d] = %-4s (%05d) %3d %3d %3d %3d %p %s", v7, v8, v9, v5++);
      a2 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

const char *sprop_bigrams(const char *a1, char *__s1)
{
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;

  v4 = cstdlib_strstr(__s1, "_");
  if (!v4 || !*a1)
    return 0;
  v5 = v4 + 1;
  v6 = (unsigned __int16)((_WORD)v4 - (_WORD)__s1);
  while (1)
  {
    if (!cstdlib_strncmp(a1, __s1, v6) && a1[v6] == 32)
    {
      v7 = cstdlib_strlen(v5);
      if (!cstdlib_strncmp(&a1[v6 + 1], v5, v7))
        break;
    }
    if (!*(unsigned __int8 *)++a1)
      return 0;
  }
  return a1;
}

uint64_t sprop_get_features(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2[1].i32[0] && !a2[4].i32[0])
  {
    v19 = (uint64_t *)&a2[3];
    v14 = sprop_normalize(a1, a2 + 3, (uint64_t)a2, 1);
    if ((v14 & 0x80000000) != 0)
      return v14;
    log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_get_features: normalized input = %s", v20, v21, v22, *v19);
  }
  else
  {
    v14 = 0;
  }
  v15 = _sprop_feature_set_catalogs[*a5 == 0];
  if (*(_QWORD *)v15)
  {
    v16 = v15 + 16;
    do
    {
      if (*a5)
        v17 = a3;
      else
        v17 = a4;
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, int32x2_t *, uint64_t, _QWORD *, uint64_t, uint64_t))v16)(a1, *((_QWORD *)v16 - 1), a2, v17, a5, a6, a7);
      if ((v14 & 0x80000000) != 0)
        break;
      v18 = *((_QWORD *)v16 + 1);
      v16 += 24;
    }
    while (v18);
  }
  return v14;
}

uint64_t sprop_normalize(uint64_t a1, int32x2_t *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int32 v19;
  uint64_t v20;
  _BYTE v22[7];

  v8 = *(unsigned __int8 **)a3;
  v9 = *(unsigned int *)(a3 + 8);
  v10 = sprop_str_clear((uint64_t)a2);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = *(unsigned __int8 **)a3;
    if (v12 < &v8[v9])
    {
      v13 = 0;
      do
      {
        v14 = Utf8_LengthInBytes(v12, 1);
        if (utf8_BelongsToSet(0, v12, 0, v14) == 1)
        {
          if (v13)
          {
            v13 = 1;
          }
          else
          {
            v13 = 1;
            sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
          }
        }
        else if (!utf8_BelongsToSet(0xAu, v12, 0, v14))
        {
          if (a4 && utf8_ToLower((char *)v12, 0, (uint64_t)v22) == 1)
          {
            v15 = v22;
            v16 = a1;
            v17 = (uint64_t)a2;
            v18 = 0;
          }
          else
          {
            v16 = a1;
            v17 = (uint64_t)a2;
            v15 = (char *)v12;
            v18 = v14;
          }
          sprop_str_cat(v16, v17, v15, v18);
          v13 = 0;
        }
        v12 += v14;
      }
      while ((unint64_t)v12 < v11);
    }
    if (!*(_QWORD *)a2)
      sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
    v19 = a2[1].i32[0];
    if (v19)
    {
      v20 = (v19 - 1);
      if (*(_BYTE *)(*(_QWORD *)a2 + v20) == 32)
      {
        *(_BYTE *)(*(_QWORD *)a2 + v20) = 0;
        a2[1] = vadd_s32(a2[1], (int32x2_t)-1);
      }
    }
  }
  return v10;
}

uint64_t sprop_get_word_features(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t (**v8)();
  uint64_t (*v9)();

  v6 = *(_DWORD *)(a2 + 8);
  if (!v6
    || *(_DWORD *)(a2 + 32)
    || (result = sprop_str_copy(a1, a2 + 24, *(char **)a2, v6), (result & 0x80000000) == 0))
  {
    v8 = &off_24D292AD8;
    do
    {
      result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))*v8)(a1, *(v8 - 1), a2, 0, 0, 0, a3);
      if ((result & 0x80000000) != 0)
        break;
      v9 = v8[1];
      v8 += 3;
    }
    while (v9);
  }
  return result;
}

uint64_t SPROP_sen_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v18;

  v12 = *(_BYTE **)(a3 + 24);
  v13 = 1;
  while (*v12 == 32)
  {
    v13 = (v13 + 1);
LABEL_6:
    ++v12;
  }
  if (*v12)
    goto LABEL_6;
  v14 = uint32_log2(v13);
  if (v14 >= 8)
    v15 = 8;
  else
    v15 = v14;
  v18 = v15 | 0x30;
  if (*a5)
    v16 = a4;
  else
    v16 = 0;
  return sprop_add_feature(a1, a7, v16, "SENTLEN=", a2, &v18, 1u);
}

uint64_t SPROP_avg_wrd_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v18;

  v12 = *(_BYTE **)(a3 + 24);
  v13 = 1;
  while (*v12 == 32)
  {
    ++v13;
LABEL_6:
    ++v12;
  }
  if (*v12)
    goto LABEL_6;
  v14 = uint32_log2(4 * *(_DWORD *)(a3 + 36) / v13);
  if (v14 >= 8)
    v15 = 8;
  else
    v15 = v14;
  v18 = v15 | 0x30;
  if (*a5)
    v16 = a4;
  else
    v16 = 0;
  return sprop_add_feature(a1, a7, v16, "WORDLEN=", a2, &v18, 1u);
}

uint64_t SPROP_freq10_caps(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  unsigned int v12;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v20[7];
  char v21;

  v12 = *((_DWORD *)a3 + 2);
  if (v12)
  {
    v14 = *a3;
    v15 = **a3;
    if (**a3)
    {
      v16 = 0;
      do
      {
        v17 = Utf8_LengthInBytes(v14, 1);
        if (utf8_ToLower((char *)v14, 0, (uint64_t)v20) == 1)
          ++v16;
        v14 += v17;
      }
      while (*v14);
      v15 = 10 * v16;
    }
    v12 = v15 / *((_DWORD *)a3 + 3);
  }
  if (v12 >= 9)
    LOBYTE(v12) = 9;
  v21 = v12 | 0x30;
  if (*a5)
    v18 = a4;
  else
    v18 = 0;
  return sprop_add_feature(a1, a7, v18, "CAPS=", a2, &v21, 1u);
}

uint64_t SPROP_freq10_puncs(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char v20;

  if (*((_DWORD *)a3 + 2))
  {
    v13 = *a3;
    v14 = **a3;
    if (**a3)
    {
      v15 = 0;
      do
      {
        v16 = Utf8_LengthInBytes(v13, 1);
        if (utf8_BelongsToSet(0xAu, v13, 0, v16) == 1)
          ++v15;
        v13 += v16;
      }
      while (*v13);
      v14 = 10 * v15;
    }
    v17 = v14 / *((_DWORD *)a3 + 3) + 48;
  }
  else
  {
    LOBYTE(v17) = 48;
  }
  v20 = v17;
  if (*a5)
    v18 = a4;
  else
    v18 = 0;
  return sprop_add_feature(a1, a7, v18, "PUNC=", a2, &v20, 1u);
}

uint64_t SPROP_first_wrd(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  char *v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;

  v13 = utf8_strchr(*(char **)(a3 + 24), " ");
  v14 = cstdlib_strlen(*(const char **)(a3 + 24));
  v15 = *(char **)(a3 + 24);
  if (v13)
    v16 = (_DWORD)v13 - (_DWORD)v15;
  else
    v16 = v14;
  if (*a5)
    v17 = a4;
  else
    v17 = 0;
  return sprop_add_feature(a1, a7, v17, "FIRSTWD=", a2, v15, v16);
}

uint64_t SPROP_last_char(uint64_t a1, char *a2, _BYTE **a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;

  v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    do
    {
      v19 = v7 - 1;
      if (v7 == 1)
        break;
      utf8_GetPreviousValidUtf8Offset((uint64_t)*a3, &v19);
      if (!utf8_BelongsToSet(0, *a3, v19, *((_DWORD *)a3 + 2)))
      {
        v14 = (uint64_t)*a3;
        v15 = &(*a3)[v19];
        v16 = Utf8_LengthInBytes(v15, 1);
        if (!v14)
          return 0;
        if (*a5)
          v17 = a4;
        else
          v17 = 0;
        return sprop_add_feature(a1, a7, v17, "LASTCH=", a2, (char *)v15, v16);
      }
      v7 = v19;
    }
    while (v19);
  }
  return 0;
}

uint64_t SPROP_freq4_singlechars(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v7;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v19;

  if (!*(_DWORD *)(a3 + 32))
    return 0;
  v7 = *(unsigned __int8 **)(a3 + 24);
  if (!*v7)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = *(unsigned __int8 **)(a3 + 24);
  do
  {
    v16 = &v15[Utf8_LengthInBytes(v15, 1)];
    if ((*v15 | 0x20) == 0x20)
    {
      ++v13;
      if (Utf8_LengthInUtf8chars((unint64_t)v7, (int)v15 - (int)v7) == 1)
      {
        ++v14;
        v7 = v16;
      }
    }
    v15 = v16;
  }
  while (*v16);
  if (!v13)
    return 0;
  v19 = v14 / v13 + 48;
  if (*a5)
    v17 = a4;
  else
    v17 = 0;
  return sprop_add_feature(a1, a7, v17, "SINGLECH=", a2, &v19, 1u);
}

uint64_t SPROP_numeral(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;

  v7 = a7;
  v9 = a4;
  v11 = a2;
  v12 = a1;
  v13 = *(unsigned int *)(a6 + 8);
  v14 = *(_QWORD *)(a3 + 24);
  if ((_DWORD)v13)
  {
    v16 = *(const char **)a6;
    v17 = *(_QWORD *)a6 + v13;
    v18 = v14 + *(unsigned int *)(a3 + 32);
    v19 = "1";
    do
    {
      v20 = *(char **)(a3 + 24);
      v21 = cstdlib_strlen(v16);
      v22 = v21;
      if ((unint64_t)v20 < v18)
      {
        v23 = v21;
        do
        {
          v24 = cstdlib_strstr(v20, v16);
          if (!v24)
            break;
          v20 = &v24[v23];
          if ((v24[v23] | 0x20) == 0x20 && (v24 == *(char **)(a3 + 24) || *(v24 - 1) == 32))
          {
            v7 = a7;
            v12 = a1;
            v11 = a2;
            v9 = a4;
            goto LABEL_23;
          }
        }
        while ((unint64_t)v20 < v18);
      }
      v16 += v22 + 1;
    }
    while ((unint64_t)v16 < v17);
    v14 = *(_QWORD *)(a3 + 24);
    v7 = a7;
    v12 = a1;
    v11 = a2;
    v9 = a4;
  }
  v25 = *(unsigned int *)(a3 + 32);
  if (!(_DWORD)v25)
    goto LABEL_22;
  v26 = v14 + v25;
  v27 = v14 + 1;
  do
  {
    v28 = cstdlib_isdigit(*(_BYTE *)(v27 - 1));
    if (v28)
      v29 = 1;
    else
      v29 = v27 >= v26;
    ++v27;
  }
  while (!v29);
  if (v28)
    v19 = "1";
  else
LABEL_22:
    v19 = "0";
LABEL_23:
  if (*a5)
    v30 = v9;
  else
    v30 = 0;
  return sprop_add_feature(v12, v7, v30, "NUMERAL=", v11, v19, 0);
}

uint64_t SPROP_keywords(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;

  v7 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v7)
    return 0;
  v11 = 0;
  v12 = *(char **)a4;
  v13 = *(_QWORD *)a4 + v7;
  v14 = *(_QWORD *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    v15 = *(char **)(a3 + 24);
    v16 = cstdlib_strlen(v12);
    v17 = v16;
    if ((unint64_t)v15 < v14)
    {
      v18 = v16;
      do
      {
        v19 = cstdlib_strstr(v15, v12);
        if (!v19)
          break;
        v15 = &v19[v18];
        if ((v19[v18] | 0x20) == 0x20 && (v19 == *(char **)(a3 + 24) || *(v19 - 1) == 32))
        {
          v11 = sprop_str_set_add(a1, a7, a2, v12, v17);
          if ((v11 & 0x80000000) != 0)
            return v11;
          break;
        }
      }
      while ((unint64_t)v15 < v14);
    }
    v12 += v17 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t SPROP_keywords_bigrams(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;

  v7 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v7)
    return 0;
  v11 = 0;
  v12 = *(char **)a4;
  v13 = *(_QWORD *)a4 + v7;
  v14 = *(_QWORD *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    v15 = *(const char **)(a3 + 24);
    v16 = cstdlib_strlen(v12);
    v17 = v16;
    if ((unint64_t)v15 < v14)
    {
      v18 = v16;
      do
      {
        v19 = sprop_bigrams(v15, v12);
        if (!v19)
          break;
        v15 = &v19[v18];
        if ((v19[v18] | 0x20) == 0x20 && (v19 == *(const char **)(a3 + 24) || *(v19 - 1) == 32))
        {
          v11 = sprop_str_set_add(a1, a7, a2, v12, v17);
          if ((v11 & 0x80000000) != 0)
            return v11;
          break;
        }
      }
      while ((unint64_t)v15 < v14);
    }
    v12 += v17 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t sprop_add_feature(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, char *a5, char *a6, unsigned int a7)
{
  const char *v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  const char *v17;
  size_t v18;

  if (a3)
  {
    v13 = *(const char **)a3;
    v14 = *(unsigned int *)(a3 + 8);
    v15 = cstdlib_strlen(__s);
    if (a7)
    {
      v16 = a7;
      if (!(_DWORD)v14)
        return 0;
    }
    else
    {
      v16 = cstdlib_strlen(a6);
      if (!(_DWORD)v14)
        return 0;
    }
    v17 = &v13[v14];
    v18 = v16;
    while (cstdlib_strncmp(v13, __s, v15) || cstdlib_strncmp(&v13[v15], a6, v18))
    {
      v13 += cstdlib_strlen(v13) + 1;
      if (v13 >= v17)
        return 0;
    }
  }
  return sprop_str_set_add(a1, a2, a5, a6, a7);
}

uint64_t SPROP_word_token(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;

  v10 = sprop_input_mrk_cnt((uint64_t)a3);
  v11 = sprop_input_mrk((uint64_t)a3);
  v23 = SPROP_STR_null;
  v24 = 0;
  if (v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      v17 = *(v16 - 3);
      if (v17 == 1)
      {
        v18 = sprop_str_set_add(a1, a7 + 16 * v13, "", "", 0);
        if ((v18 & 0x80000000) != 0
          || (v19 = *(_QWORD *)(a7 + 16 * v13),
              v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          v14 = v18;
          goto LABEL_16;
        }
        v21 = v19 + 24 * v20;
        v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 0);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_16;
        if (!*(_DWORD *)(v21 - 16))
        {
          v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_16;
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        v12 = *v16;
      }
      v16 += 8;
      if (!--v15)
        goto LABEL_16;
    }
  }
  v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_lowercase_token(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;

  v10 = sprop_input_mrk_cnt((uint64_t)a3);
  v11 = sprop_input_mrk((uint64_t)a3);
  v23 = SPROP_STR_null;
  v24 = 0;
  if (v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v10;
    v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      v17 = *(v16 - 3);
      if (v17 == 1)
      {
        v18 = sprop_str_set_add(a1, a7 + 16 * v13, "", "", 0);
        if ((v18 & 0x80000000) != 0
          || (v19 = *(_QWORD *)(a7 + 16 * v13),
              v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          v14 = v18;
          goto LABEL_16;
        }
        v21 = v19 + 24 * v20;
        v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 1);
        if ((v14 & 0x80000000) != 0)
          goto LABEL_16;
        if (!*(_DWORD *)(v21 - 16))
        {
          v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_16;
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        v12 = *v16;
      }
      v16 += 8;
      if (!--v15)
        goto LABEL_16;
    }
  }
  v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_token_class(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t NextUtf8OffsetLimit;
  unsigned int v26;
  char *v27;
  BOOL v28;
  const char *v29;
  const char *v30;
  _QWORD *v31;

  v8 = sprop_input_mrk_cnt(a3);
  v31 = (_QWORD *)a3;
  v9 = sprop_input_mrk(a3);
  if (v8)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    result = 0;
    v15 = v8;
    while (1)
    {
      v16 = *(_DWORD *)(v10 + 32 * v11);
      if (v16 == 1)
        break;
      if (v16 == 0x4000)
        v12 = *(unsigned int *)(v10 + 32 * v11 + 12);
LABEL_48:
      if (++v11 == v15)
        return result;
    }
    v17 = v10 + 32 * v11;
    v20 = *(_DWORD *)(v17 + 16);
    v19 = (unsigned int *)(v17 + 16);
    v18 = v20;
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = (_BYTE *)(*v31 + *(v19 - 1) - v12);
      v24 = 30;
      do
      {
        if (utf8_BelongsToSet(6u, v23, v21, v18))
        {
          v24 = v24 & 0xFFFFFEF1 | 0x100;
          ++v22;
        }
        else if (utf8_BelongsToSet(0xAu, v23, v21, *v19))
        {
          v24 &= 0xFFFFFFE1;
          switch(v23[v21])
          {
            case ',':
              v24 |= 0x40u;
              break;
            case '-':
              v24 |= 0x200u;
              break;
            case '.':
              v24 |= 0x20u;
              break;
            case '/':
              v24 |= 0x80u;
              break;
            default:
              break;
          }
        }
        else if (utf8_BelongsToSet(0x12u, v23, v21, *v19)
               || utf8_BelongsToSet(0x15u, v23, v21, *v19)
               || utf8_BelongsToSet(0x18u, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Bu, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Eu, v23, v21, *v19))
        {
          v26 = v24 | 0xC01;
          if ((_DWORD)v21)
            v26 = v24 & 0xFFFFFBEF | 0x400;
          v24 = v26 & 0xFFFFFFEB;
        }
        else
        {
          v24 = v24 & 0xFFFFFBED | 0x400;
        }
        NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(v23, v21, *v19);
        v21 = NextUtf8OffsetLimit;
        v18 = *v19;
      }
      while ((_DWORD)NextUtf8OffsetLimit != *v19);
      v27 = "lc";
      if ((v24 & 4) != 0)
        goto LABEL_46;
      if (v22 == 2)
      {
        v27 = "2d";
      }
      else
      {
        if (v22 != 4)
        {
          if ((v24 & 0x100) != 0)
          {
            v27 = "an";
            if ((v24 & 0x400) != 0)
              goto LABEL_46;
            v27 = "dd";
            if ((v24 & 0x200) != 0)
              goto LABEL_46;
            v27 = "ds";
            if ((v24 & 0x80) != 0)
              goto LABEL_46;
            v27 = "dc";
            if ((v24 & 0x40) != 0)
              goto LABEL_46;
            v28 = (v24 & 0x20) == 0;
            v29 = "dp";
            v30 = "num";
          }
          else if ((v24 & 2) != 0)
          {
            v28 = (_DWORD)NextUtf8OffsetLimit == 1;
            v29 = "ac";
            v30 = "sc";
          }
          else
          {
            v27 = "cp";
            if ((v24 & 0x20) != 0)
              goto LABEL_46;
            v28 = (v24 & 1) == 0;
            v29 = "ic";
            v30 = "other";
          }
          if (v28)
            v27 = (char *)v30;
          else
            v27 = (char *)v29;
          goto LABEL_46;
        }
        v27 = "4d";
      }
    }
    else
    {
      v27 = "lc";
    }
LABEL_46:
    result = sprop_str_set_add(a1, a7 + 16 * v13, "", v27, 0);
    if ((result & 0x80000000) != 0)
      return result;
    ++v13;
    goto LABEL_48;
  }
  return 0;
}

uint64_t SPROP_word_begin_sentence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  int *v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int v17;

  v10 = sprop_input_mrk_cnt(a3);
  v11 = sprop_input_mrk(a3);
  if (!v10)
    return 0;
  v12 = (int *)v11;
  v13 = 0;
  result = 0;
  v15 = v10;
  v16 = "1";
  do
  {
    v17 = *v12;
    v12 += 8;
    if (v17 == 1)
    {
      result = sprop_str_set_add(a1, a7 + 16 * v13, "", v16, 0);
      if ((result & 0x80000000) != 0)
        return result;
      ++v13;
      v16 = "0";
    }
    --v15;
  }
  while (v15);
  return result;
}

uint64_t geene_adapt_common_DuplicateString_Num_FreeFirst(uint64_t a1, const char *a2, size_t a3, uint64_t *a4)
{
  char *v8;

  if (*a4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), *a4);
    *a4 = 0;
  }
  v8 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, a3 + 1);
  *a4 = (uint64_t)v8;
  if (!v8)
    return 3221233674;
  cstdlib_strncpy(v8, a2, a3);
  return 0;
}

uint64_t geene_adapt_common_DuplicateString_FreeFirst(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6;

  v6 = cstdlib_strlen(__s);
  return geene_adapt_common_DuplicateString_Num_FreeFirst(a1, __s, v6, a3);
}

uint64_t geene_adapt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 3221233665;
  result = 0;
  *a2 = &IGEEnEAdapt;
  return result;
}

uint64_t geene_adapt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  inited = InitRsrcFunction(a3, a4, &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = 3221233674;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v14 + 8), 1, 960);
  if (v8)
  {
    v9 = v8;
    v10 = v14;
    *v8 = v14;
    v11 = heap_Calloc(*(_QWORD **)(v10 + 8), 128, 20);
    v9[117] = v11;
    if (v11)
    {
      inited = objc_GetObject(*(_QWORD *)(*v9 + 48), (uint64_t)"SYNTHSTREAM", &v13);
      if ((inited & 0x80000000) == 0)
      {
        v9[8] = *(_QWORD *)(v13 + 8);
        inited = objc_GetObject(*(_QWORD *)(*v9 + 48), (uint64_t)"LINGDB", &v13);
        if ((inited & 0x80000000) == 0)
        {
          v9[1] = *(_QWORD *)(v13 + 8);
          *(_QWORD *)a5 = v9;
          *(_DWORD *)(a5 + 8) = 135971;
          return geene_adapt_ObjReopen((uint64_t)v9, *(_QWORD *)(a5 + 8));
        }
      }
      return inited;
    }
  }
  return v7;
}

uint64_t geene_adapt_ObjClose(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 135971, 960);
  if ((v3 & 0x80000000) != 0)
    return 3221233672;
  if (a1[1])
  {
    v4 = objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if ((v4 & 0x80000000) != 0)
      return v4;
  }
  else
  {
    v4 = v3;
  }
  if (!a1[8] || (v4 = objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM"), (v4 & 0x80000000) == 0))
  {
    heap_Free(*(_QWORD **)(*a1 + 8), a1[117]);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  }
  return v4;
}

uint64_t geene_adapt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  char *__s1;

  __s1 = 0;
  v3 = safeh_HandleCheck(a1, a2, 135971, 960);
  result = 3221233672;
  if ((v3 & 0x80000000) == 0 && a1)
  {
    *(_QWORD *)(a1 + 912) = 0;
    paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"punctmarks", (_QWORD *)(a1 + 912));
    *(_DWORD *)(a1 + 924) = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"mnctnplus", &__s1) & 0x80000000) == 0
      && __s1
      && !cstdlib_strcmp(__s1, "yes"))
    {
      *(_DWORD *)(a1 + 924) = 1;
    }
    *(_OWORD *)(a1 + 944) = xmmword_214F74F10;
    return v3;
  }
  return result;
}

uint64_t geene_adapt_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if ((safeh_HandleCheck(a1, a2, 135971, 960) & 0x80000000) != 0)
    return 3221233672;
  *(_DWORD *)(a1 + 920) = 0;
  *(_DWORD *)(a1 + 928) = 1;
  v7 = geene_adapt_lingdb_orth_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 912), *(_DWORD *)(a1 + 924), *(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (uint64_t *)(a1 + 16));
  if (!(_DWORD)v7)
  {
    v7 = geene_adapt_lingdb_phon_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 924), *(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (uint64_t *)(a1 + 24));
    if (!(_DWORD)v7)
    {
      v7 = geene_adapt_lingdb_tn_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 40));
      if (!(_DWORD)v7)
      {
        v7 = geene_adapt_lingdb_punct_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 924), *(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (uint64_t *)(a1 + 32));
        if (!(_DWORD)v7)
        {
          v7 = geene_adapt_lingdb_pt_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 48));
          if (!(_DWORD)v7)
          {
            v7 = geene_adapt_lingdb_meta_visitor_New(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 924), *(_QWORD *)(a1 + 936), v8, *(_QWORD *)(a1 + 944), *(_QWORD *)(a1 + 952), (_QWORD *)(a1 + 56));
            if (!(_DWORD)v7)
            {
              v7 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"processingtnplus", "yes");
              if (!(_DWORD)v7)
              {
                synstrmaux_InitStreamOpener(a1 + 88, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"GEEnEAdapt");
                synstrmaux_RegisterOutStream((_WORD *)(a1 + 88), (uint64_t)"application/x-tnplus-words;version=1.0",
                  a1 + 72);
                v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 88), *(_QWORD *)(a1 + 64), a3, a4);
                if ((v7 & 0x80000000) != 0)
                  synstrmaux_CloseStreams((_WORD *)(a1 + 88), *(_QWORD *)(a1 + 64));
              }
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t geene_adapt_Process(int8x16_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t accumulated_sildur_from_markers_and_waitfactor;
  uint64_t inserted;
  int8x16_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int NStreams;
  __int32 v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Stream;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t PreCallback;
  uint64_t Callback;
  uint64_t PostCallback;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  _DWORD *v46;
  int8x16_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t (*v60)(uint64_t);
  uint64_t NullHandle;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  unint64_t v79;
  _QWORD *v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  int v84;
  _DWORD *v85;
  unsigned int v86;
  int v87;
  int v88;
  char *__s1;
  unsigned int v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  unsigned __int16 v94;
  unsigned __int16 v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  void *v104;
  unsigned int v105;
  _OWORD v106[2];
  __int128 v107;
  _DWORD __src[3];
  int8x16_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  __s1 = 0;
  *a5 = 1;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135971, 960) & 0x80000000) != 0)
    return 3221233672;
  v96 = 0;
  accumulated_sildur_from_markers_and_waitfactor = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1->i64[1] + 104))(a3, a4, 1, 0, &v95);
  if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
    goto LABEL_106;
  inserted = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(a1->i64[1] + 168))(a3, a4, v95, 3, 1, &v93, &v96);
  if ((inserted & 0x80000000) != 0)
    goto LABEL_107;
  v107 = 0u;
  v10 = a1[2];
  v106[0] = 0u;
  v106[1] = vextq_s8(v10, v10, 8uLL);
  v11 = (_QWORD *)a1[1].i64[0];
  v12 = (_QWORD *)a1[1].i64[1];
  *(_QWORD *)&v106[0] = v11;
  *((_QWORD *)&v106[0] + 1) = v12;
  v13 = (_QWORD *)a1[3].i64[1];
  *(_QWORD *)&v107 = a1[3].i64[0];
  *((_QWORD *)&v107 + 1) = v13;
  v11[7] = 0x100000000;
  v12[7] = 0x100000000;
  *(_QWORD *)(v10.i64[0] + 56) = 0x100000000;
  v13[7] = 0x100000000;
  *((_DWORD *)v11 + 17) = 1;
  *((_DWORD *)v12 + 17) = 1;
  *(_DWORD *)(v10.i64[0] + 68) = 1;
  *((_DWORD *)v13 + 17) = 1;
  if (v93 && a1[57].i32[2])
    goto LABEL_6;
  v92 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _DWORD **, unsigned __int16 *))(a1->i64[1] + 176))(a3, a4, v95, 1, &v92, &v94) & 0x80000000) != 0)
  {
    v86 = 0;
    v84 = 0;
    v87 = 0;
  }
  else
  {
    v27 = v94;
    if (v94)
    {
      v28 = 0;
      v29 = v92;
      while (v92[v28] != 26)
      {
        v28 += 8;
        if (8 * v94 == v28)
        {
          v84 = 0;
          goto LABEL_31;
        }
      }
      v84 = 1;
LABEL_31:
      if (*v92 == 0x4000)
        v30 = v92[3];
      else
        v30 = 0;
      v109.i16[0] = -1;
      if ((geene_adapt_get_frompos_wordrec(a1->i64[1], a3, a4, 1, 0xFFFFFFFF, 0, (unsigned __int16 *)&v109) & 0x80000000) == 0)
      {
        v31 = v29 + 3;
        v32 = v27;
        while (v109.u16[0] == 0xFFFF || *v31 - v30 <= v109.u16[0])
        {
          v33 = *(v31 - 3);
          if (v33 == 8)
          {
            if (v31[3] != 29999)
            {
              v34 = 1;
              goto LABEL_44;
            }
          }
          else if (v33 == 26)
          {
            break;
          }
          v31 += 8;
          if (!--v32)
            break;
        }
      }
    }
    else
    {
      v84 = 0;
    }
    v34 = 0;
LABEL_44:
    v87 = v34;
    v86 = v27;
  }
  v35 = 0;
  while (1)
  {
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1->i64[1] + 288);
    v37 = v95;
    v38 = *(_QWORD *)((char *)v106 + v35);
    PreCallback = geene_adapt_lingdb_visitor_GetPreCallback(v38);
    Callback = geene_adapt_lingdb_visitor_GetCallback(v38);
    PostCallback = geene_adapt_lingdb_visitor_GetPostCallback(v38);
    v42 = v36(a3, a4, v37, PreCallback, Callback, 0, PostCallback, v38);
    v43 = v42;
    if ((v42 & 0x80000000) != 0)
      break;
    v35 += 8;
    if (v35 == 48)
    {
      a1[57].i32[2] = 1;
      inserted = v42;
      v44 = v87;
      goto LABEL_49;
    }
  }
  if ((v42 & 0x1FFF) != 0x1E08)
  {
    inserted = v42;
    goto LABEL_107;
  }
  v44 = v87;
  if (!(v87 | v84) && (v93 != 1 || a1[57].i32[2]))
  {
LABEL_81:
    inserted = 0;
    goto LABEL_6;
  }
  v58 = 0;
  v109 = a1[1];
  v59 = (_QWORD *)a1[3].i64[1];
  v110 = (_QWORD *)a1[2].i64[0];
  v111 = v59;
  do
  {
    v60 = (uint64_t (*)(uint64_t))geene_adapt_lingdb_visitor_GetPreCallback(v109.i64[v58]);
    NullHandle = safeh_GetNullHandle();
    v62 = v60(NullHandle);
    inserted = v62;
    if ((v62 & 0x80000000) != 0)
      goto LABEL_107;
    if (v58 > 2)
      break;
    ++v58;
  }
  while (!(_DWORD)v62);
LABEL_49:
  if (v44)
  {
    v45 = 0;
    v46 = v92;
    v105 = 0;
    v104 = 0;
    v102 = -1;
    v103 = -1;
    v100 = -1;
    v101 = -1;
    v99 = -1;
    v97 = 0;
    v98 = 0;
    v47 = a1[1];
    v48 = (_QWORD *)a1[3].i64[1];
    v110 = (_QWORD *)a1[2].i64[0];
    v111 = v48;
    v109 = v47;
    while (1)
    {
      v49 = v109.i64[v45];
      if (v45 <= 1)
        break;
      if ((_DWORD)v45 == 3)
      {
        geene_adapt_lingdb_meta_visitor_GetCurrentMetaDataValues(v49, &v98, &v97, &v103, &v102, &v101, &v100);
        accumulated_sildur_from_markers_and_waitfactor = geene_adapt_get_accumulated_sildur_from_markers_and_waitfactor(a1->i64[0], a1->i64[1], a3, a4, v46, v86, 1, -1, 0, &v99);
        if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
          goto LABEL_106;
        accumulated_sildur_from_markers_and_waitfactor = geene_adapt_meta_stream_ItemToBuff(*(_QWORD *)v49, (uint64_t *)&v104, &v105, 18, v53, v54, v55, v56, (uint64_t)"");
        if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
          goto LABEL_106;
        inserted = geene_adapt_stream_InsertItemFromMarker(*(_QWORD *)(*(_QWORD *)(v49 + 24) + 8 * *(unsigned int *)(v49 + 32)), v104, v105, 0);
        heap_Free(*(_QWORD **)(*(_QWORD *)v49 + 8), (uint64_t)v104);
        if ((inserted & 0x80000000) != 0)
          goto LABEL_107;
      }
      else
      {
        if ((_DWORD)v45 == 2)
        {
          __src[0] = 0;
          v50 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 8 * *(unsigned int *)(v49 + 32));
          v51 = (char *)__src;
          v52 = 4;
LABEL_56:
          inserted = geene_adapt_stream_InsertItemFromMarker(v50, v51, v52, 0);
          if ((inserted & 0x80000000) != 0)
            goto LABEL_107;
          goto LABEL_63;
        }
        inserted = 0;
      }
LABEL_63:
      if (v45 <= 2)
      {
        ++v45;
        if (!(_DWORD)inserted)
          continue;
      }
      goto LABEL_65;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 8 * *(unsigned int *)(v49 + 32));
    v51 = "";
    v52 = 1;
    goto LABEL_56;
  }
LABEL_65:
  if (!v84)
    goto LABEL_123;
  v57 = v92;
  v105 = 0;
  v104 = 0;
  v102 = -1;
  v103 = -1;
  v100 = -1;
  v101 = -1;
  v99 = -1;
  v97 = 0;
  v98 = 0;
  if (!v86)
  {
    if (v43 < 0)
    {
LABEL_124:
      v79 = 0;
      v109 = a1[1];
      v80 = (_QWORD *)a1[3].i64[1];
      v110 = (_QWORD *)a1[2].i64[0];
      v111 = v80;
      while (1)
      {
        v81 = (uint64_t (*)(uint64_t))geene_adapt_lingdb_visitor_GetPostCallback(v109.i64[v79]);
        v82 = safeh_GetNullHandle();
        v83 = v81(v82);
        inserted = v83;
        if ((v83 & 0x80000000) != 0)
          goto LABEL_107;
        if (v79 <= 2)
        {
          ++v79;
          if (!(_DWORD)v83)
            continue;
        }
        a1[57].i32[2] = 1;
        goto LABEL_6;
      }
    }
    goto LABEL_81;
  }
  if (*v92 == 0x4000)
    v88 = v92[3];
  else
    v88 = 0;
  v63 = 0;
  inserted = 0;
  v109 = a1[1];
  v64 = (_QWORD *)a1[3].i64[1];
  v110 = (_QWORD *)a1[2].i64[0];
  v111 = v64;
  v85 = v92;
  do
  {
    if (v57[8 * v63] == 26 && (_DWORD)inserted == 0)
    {
      v66 = 0;
      while (1)
      {
        v67 = v85[8 * v63 + 3] - v88;
        v68 = v109.i64[v66];
        if (v66 <= 1)
          break;
        if ((_DWORD)v66 == 3)
        {
          geene_adapt_lingdb_meta_visitor_GetCurrentMetaDataValues(v68, &v98, &v97, &v103, &v102, &v101, &v100);
          accumulated_sildur_from_markers_and_waitfactor = geene_adapt_get_accumulated_sildur_from_markers_and_waitfactor(a1->i64[0], a1->i64[1], a3, a4, v85, v86, 0, v63, 0, &v99);
          if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
            goto LABEL_106;
          accumulated_sildur_from_markers_and_waitfactor = geene_adapt_meta_stream_ItemToBuff(*(_QWORD *)v68, (uint64_t *)&v104, &v105, 18, v73, v74, v75, v76, (uint64_t)"");
          if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
            goto LABEL_106;
          inserted = geene_adapt_stream_InsertItemFromMarker(*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * *(unsigned int *)(v68 + 32)), v104, v105, (unsigned __int16)v67);
          heap_Free(*(_QWORD **)(*(_QWORD *)v68 + 8), (uint64_t)v104);
          if ((inserted & 0x80000000) != 0)
            goto LABEL_107;
        }
        else
        {
          if ((_DWORD)v66 == 2)
          {
            __src[0] = 0;
            v69 = *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * *(unsigned int *)(v68 + 32));
            v70 = (unsigned __int16)v67;
            v71 = (char *)__src;
            v72 = 4;
LABEL_96:
            inserted = geene_adapt_stream_InsertItemFromMarker(v69, v71, v72, v70);
            if ((inserted & 0x80000000) != 0)
              goto LABEL_107;
            goto LABEL_103;
          }
          inserted = 0;
        }
LABEL_103:
        if (v66 <= 2)
        {
          ++v66;
          if (!(_DWORD)inserted)
            continue;
        }
        goto LABEL_88;
      }
      v69 = *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8 * *(unsigned int *)(v68 + 32));
      v70 = (unsigned __int16)(LOWORD(v85[8 * v63 + 3]) - v88);
      v71 = "";
      v72 = 1;
      goto LABEL_96;
    }
LABEL_88:
    ++v63;
    v57 = v85;
  }
  while (v63 != v86);
  if ((inserted & 0x80000000) != 0)
    goto LABEL_107;
LABEL_123:
  if (v43 < 0)
    goto LABEL_124;
LABEL_6:
  NStreams = geene_adapt_lingdb_visitor_GetNStreams(a1[1].i64[0]);
  v90 = NStreams;
  if (!NStreams)
  {
LABEL_107:
    v16 = v93;
    goto LABEL_108;
  }
  v15 = a1[58].i32[0];
  v16 = v93;
  if (v15)
    v17 = 0;
  else
    v17 = v93 == 1;
  v18 = v17;
  if (v15 == 1 || v18)
  {
    accumulated_sildur_from_markers_and_waitfactor = tnplus_sentences_alloc(a1->i64[0], NStreams, &v91);
    if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
      goto LABEL_106;
    if (v90)
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = a1->i64[0];
        Stream = geene_adapt_lingdb_visitor_GetStream(a1[1].i64[0], v20);
        v23 = geene_adapt_lingdb_visitor_GetStream(a1[1].i64[1], v20);
        v24 = geene_adapt_lingdb_visitor_GetStream(a1[2].i64[0], v20);
        v25 = geene_adapt_lingdb_visitor_GetStream(a1[3].i64[1], v20);
        accumulated_sildur_from_markers_and_waitfactor = geene_adapt_streams_to_sentence(v21, Stream, v23, v24, v25, v91 + v19);
        if ((accumulated_sildur_from_markers_and_waitfactor & 0x80000000) != 0)
          break;
        ++v20;
        v26 = v90;
        v19 += 16;
        if (v20 >= v90)
          goto LABEL_118;
      }
LABEL_106:
      inserted = accumulated_sildur_from_markers_and_waitfactor;
    }
    else
    {
      v26 = 0;
LABEL_118:
      inserted = geene_adapt_write_sentences_to_outstream_words(a1, v91, v26);
      tnplus_sentences_free(a1->i64[0], &v90, &v91);
      for (i = 0; i != 48; i += 8)
        geene_adapt_lingdb_generic_visitor_ClearStreams(*(_QWORD **)((char *)v106 + i));
    }
    goto LABEL_107;
  }
LABEL_108:
  if (v16 == 1)
    inserted = synstrmaux_CloseStreams(&a1[5].i16[4], a1[4].i64[0]);
  if ((paramc_ParamGetStr(*(_QWORD *)(a1->i64[0] + 40), (uint64_t)"willbeprocessingdeinitlingdb", &__s1) & 0x80000000) != 0
    || !__s1
    || cstdlib_strcmp(__s1, "yes"))
  {
    (*(void (**)(uint64_t, uint64_t))(a1->i64[1] + 64))(a3, a4);
  }
  if (v91)
    tnplus_sentences_free(a1->i64[0], &v90, &v91);
  return inserted;
}

uint64_t geene_adapt_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;

  if ((safeh_HandleCheck(a1, a2, 135971, 960) & 0x80000000) != 0)
    return 3221233672;
  result = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"processingtnplus", "no");
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 16))
      geene_adapt_lingdb_orth_visitor_Delete();
    if (*(_QWORD *)(a1 + 24))
      geene_adapt_lingdb_phon_visitor_Delete();
    v4 = *(_QWORD **)(a1 + 32);
    if (v4)
      geene_adapt_lingdb_punct_visitor_Delete(v4);
    if (*(_QWORD *)(a1 + 40))
      geene_adapt_lingdb_tn_visitor_Delete();
    if (*(_QWORD *)(a1 + 48))
      geene_adapt_lingdb_tn_visitor_Delete();
    v5 = *(_QWORD **)(a1 + 56);
    if (v5)
      geene_adapt_lingdb_meta_visitor_Delete(v5);
    return synstrmaux_CloseStreams((_WORD *)(a1 + 88), *(_QWORD *)(a1 + 64));
  }
  return result;
}

uint64_t geene_adapt_write_sentences_to_outstream_words(_QWORD *a1, uint64_t a2, int a3)
{
  size_t v4;
  uint64_t result;
  void *__dst;

  __dst = 0;
  if (a3 != 1)
    return 3221233664;
  v4 = (152 * *(_DWORD *)a2);
  if (!(_DWORD)v4)
    return 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(a1[8] + 112))(a1[9], a1[10], &__dst, v4);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_memcpy(__dst, *(const void **)(a2 + 8), v4);
    return (*(uint64_t (**)(_QWORD, _QWORD, size_t))(a1[8] + 120))(a1[9], a1[10], v4);
  }
  return result;
}

uint64_t geene_adapt_streams_to_sentence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  unsigned int NItems;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t Item;
  const void *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  size_t v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  const char *v46;
  char **v47;
  void *v48;
  int v49;
  void *v50;
  char **v51;
  int v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  char **v60;
  char **v61;
  char **v62;
  char **v63;
  char **v64;
  char **v65;
  char **v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  char **v77;
  unsigned int __dst[4];

  v10 = a2;
  v12 = 3221233664;
  NItems = geene_adapt_stream_GetNItems(a2);
  if (NItems != geene_adapt_stream_GetNItems(a3)
    || NItems != geene_adapt_stream_GetNItems(a4)
    || NItems != geene_adapt_stream_GetNItems(a5))
  {
    return 3221233664;
  }
  v14 = (_QWORD *)(a6 + 8);
  result = tnplus_words_alloc(a1, NItems, (uint64_t *)(a6 + 8));
  if ((result & 0x80000000) == 0)
  {
    v67 = a5;
    *(_DWORD *)a6 = NItems;
    if (NItems)
    {
      v16 = 0;
      v55 = NItems;
      v56 = a4;
      v54 = -1073733632;
      v72 = v14;
      v57 = v10;
      v58 = a3;
      while (2)
      {
        v17 = *v14;
        __dst[1] = 0;
        Item = geene_adapt_stream_GetItem(v10, v16, &__dst[1]);
        if (Item)
        {
          v19 = (const void *)Item;
          v20 = (_QWORD *)(v17 + 152 * v16);
          v21 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), __dst[1] + 1);
          *v20 = v21;
          if (v21)
          {
            cstdlib_memcpy(v21, v19, __dst[1]);
            *(_BYTE *)(*v20 + __dst[1]) = 0;
          }
        }
        v22 = *v14;
        __dst[1] = 0;
        v23 = geene_adapt_stream_GetItem(a3, v16, &__dst[1]);
        if (v23)
        {
          v24 = (const void *)v23;
          v25 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), __dst[1] + 1);
          v26 = v22 + 152 * v16;
          *(_QWORD *)(v26 + 8) = v25;
          v27 = (_QWORD *)(v26 + 8);
          if (v25)
          {
            cstdlib_memcpy(v25, v24, __dst[1]);
            *(_BYTE *)(*v27 + __dst[1]) = 0;
          }
        }
        v28 = *v14;
        __dst[1] = 0;
        v29 = (unsigned __int8 *)geene_adapt_stream_GetItem(a4, v16, &__dst[1]);
        if (!v29)
          return v12;
        v30 = v29;
        v31 = *v29;
        v32 = v29[1];
        v33 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v31 + 1);
        v34 = v16;
        v35 = v28 + 152 * v16;
        *(_QWORD *)(v35 + 16) = v33;
        v36 = (_QWORD *)(v35 + 16);
        v12 = 3221233674;
        if (!v33)
          return v12;
        v37 = (char *)(v30 + 2);
        cstdlib_memcpy(v33, v37, v31);
        *(_BYTE *)(*v36 + v31) = 0;
        v38 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v32 + 1);
        v39 = v28 + 152 * v34;
        *(_QWORD *)(v39 + 24) = v38;
        v40 = (_QWORD *)(v39 + 24);
        if (v38)
        {
          v41 = v34;
          cstdlib_memcpy(v38, &v37[v31], v32);
          *(_BYTE *)(*v40 + v32) = 0;
          v42 = *v72;
          *(_QWORD *)__dst = 0;
          v43 = geene_adapt_stream_GetItem(v67, v34, &__dst[1]);
          if (v43)
          {
            v44 = (char *)v43;
            v45 = 0;
            v46 = (const char *)(v43 + 72);
            v47 = (char **)(v42 + 152 * v34);
            v66 = v47 + 15;
            v77 = v47 + 4;
            v64 = v47 + 12;
            v65 = v47 + 13;
            v62 = v47 + 10;
            v63 = v47 + 11;
            v60 = v47 + 7;
            v61 = v47 + 9;
            v59 = v47 + 6;
            v73 = v47 + 14;
            v74 = v47 + 8;
            v75 = v47 + 5;
            v76 = (char *)v47 + 68;
            v70 = (char *)v47 + 140;
            v71 = v47 + 18;
            v68 = (char *)v47 + 132;
            v69 = v47 + 17;
            v48 = v47 + 16;
            v10 = v57;
            a3 = v58;
            do
            {
              cstdlib_memcpy(__dst, v44, 4uLL);
              v49 = dword_24D292D98[v45 + 4];
              switch(v49)
              {
                case 2:
                  v51 = v77;
                  switch(dword_24D292D98[v45])
                  {
                    case 0:
                      break;
                    case 2:
                      v51 = v59;
                      break;
                    case 3:
                      v51 = v60;
                      break;
                    case 6:
                      v51 = v61;
                      break;
                    case 7:
                      v51 = v62;
                      break;
                    case 8:
                      v51 = v63;
                      break;
                    case 9:
                      v51 = v64;
                      break;
                    case 10:
                      v51 = v65;
                      break;
                    case 12:
                      v51 = v66;
                      break;
                    default:
                      return v54;
                  }
                  v53 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), __dst[0] + 1);
                  *v51 = v53;
                  if (!v53)
                    return -1073733622;
                  cstdlib_strncpy(v53, v46, __dst[0]);
                  (*v51)[__dst[0]] = 0;
                  v46 += __dst[0];
                  break;
                case 1:
                  v52 = dword_24D292D98[v45];
                  if (v52 > 4)
                  {
                    v50 = v76;
                    if (v52 != 5)
                    {
                      if (v52 != 11)
                        return v54;
                      v50 = v73;
                    }
                  }
                  else
                  {
                    v50 = v75;
                    if (v52 != 1)
                    {
                      v50 = v74;
                      if (v52 != 4)
                        return v54;
                    }
                  }
LABEL_35:
                  cstdlib_memcpy(v50, v46, 4uLL);
                  v46 += 4;
                  break;
                case 0:
                  v50 = v48;
                  switch(dword_24D292D98[v45])
                  {
                    case 13:
                      goto LABEL_35;
                    case 14:
                      v50 = v68;
                      goto LABEL_35;
                    case 15:
                      v50 = v69;
                      goto LABEL_35;
                    case 16:
                      v50 = v70;
                      goto LABEL_35;
                    case 17:
                      v50 = v71;
                      goto LABEL_35;
                    default:
                      return v54;
                  }
              }
              v45 += 6;
              v44 += 4;
            }
            while (v45 != 108);
            result = 0;
            v16 = v41 + 1;
            a4 = v56;
            v12 = 3221233664;
            v14 = v72;
            if (v16 != v55)
              continue;
          }
          else
          {
            return v54;
          }
        }
        else
        {
          return v12;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t geene_adapt_lingdb_visitor_GetStream(uint64_t result, unsigned int a2)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2);
  return result;
}

uint64_t geene_adapt_lingdb_visitor_GetNStreams(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 36);
  return result;
}

uint64_t geene_adapt_lingdb_visitor_GetCallback(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

uint64_t geene_adapt_lingdb_visitor_GetPreCallback(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t geene_adapt_lingdb_visitor_GetPostCallback(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

BOOL tokens_contained_puncs_only(const char *a1, int a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  int v7;

  v4 = cstdlib_strlen(a1);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = Utf8_LengthInBytes((unsigned __int8 *)&a1[v6], 1);
      if (v7 != 1 && !utf8_IsChineseLetter(&a1[v6]))
        v5 += v7;
      v6 += v7;
    }
    while (v6 < v4);
  }
  else
  {
    v5 = 0;
  }
  return a2 || v5 == v4;
}

char *map_to_start_puncs(char *a1, int a2)
{
  const char *v4;

  if (cstdlib_strlen(a1))
    cstdlib_strcat(a1, "|");
  v4 = "SQUOTE";
  switch(a2)
  {
    case '"':
      v4 = "QUOTE";
      break;
    case '#':
    case '$':
    case '%':
    case '&':
      goto LABEL_8;
    case '\'':
      return cstdlib_strcat(a1, v4);
    case '(':
      v4 = "PARENTH";
      break;
    case ')':
      v4 = "PAIRED_PARENTH";
      break;
    default:
      if (a2 == 91)
      {
        v4 = "SQUAREBRACKET";
      }
      else if (a2 == 93)
      {
        v4 = "PAIRED_SQUAREBRACKET";
      }
      else
      {
LABEL_8:
        v4 = "";
      }
      break;
  }
  return cstdlib_strcat(a1, v4);
}

size_t map_to_end_puncs(uint64_t a1, char *__s, unsigned int a3, unsigned int a4)
{
  unsigned __int16 v8;
  unsigned __int8 v9;
  unsigned int v10;
  const char *v11;
  size_t result;

  if (cstdlib_strlen(__s))
    cstdlib_strcat(__s, "|");
  if (a3 < a4)
  {
    v8 = 0;
    while (1)
    {
      v9 = Utf8_LengthInBytes((unsigned __int8 *)(a1 + v8), 1);
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (v10 <= 0x39)
      {
        v11 = "FULL_STOP";
        switch(*(_BYTE *)(a1 + v8))
        {
          case '!':
            v11 = "EXCLAMATION_MARK";
            break;
          case '"':
            v11 = "QUOTE";
            break;
          case '\'':
            v11 = "SQUOTE";
            break;
          case ')':
            v11 = "PAIRED_PARENTH";
            break;
          case ',':
            v11 = "COMMA";
            break;
          case '.':
            goto LABEL_23;
          default:
            goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (*(unsigned __int8 *)(a1 + v8) <= 0x3Eu)
        break;
      switch(v10)
      {
        case '~':
          goto LABEL_15;
        case ']':
          v11 = "PAIRED_SQUAREBRACKET";
          break;
        case '?':
          v11 = "QUESTION_MARK";
          break;
        default:
          goto LABEL_22;
      }
LABEL_23:
      cstdlib_strcat(__s, v11);
      if (*__s)
        cstdlib_strcat(__s, "|");
      v8 += v9;
      if (a3 + v8 >= a4)
        goto LABEL_26;
    }
    if (v10 == 58)
    {
      v11 = "COLON";
      goto LABEL_23;
    }
    if (v10 != 59)
    {
LABEL_22:
      v11 = "";
      goto LABEL_23;
    }
LABEL_15:
    v11 = "SEMI_COLON";
    goto LABEL_23;
  }
LABEL_26:
  result = cstdlib_strlen(__s);
  if ((_WORD)result)
    __s[(unsigned __int16)result - 1] = 0;
  return result;
}

uint64_t geene_adapt_lingdb_orth_visitor_New(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  result = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v16);
  v15 = v16;
  if (!(_DWORD)result)
  {
    *(_QWORD *)(v16 + 80) = geene_adapt_lingdb_orth_visitor_callback;
    *(_QWORD *)(v15 + 16) = a3;
    *(_DWORD *)(v15 + 44) = a4 == 1;
    *(_QWORD *)(v15 + 48) = a5;
    *(_QWORD *)(v15 + 56) = a6;
    *(_QWORD *)(v15 + 64) = a7;
  }
  *a8 = v15;
  return result;
}

uint64_t geene_adapt_lingdb_orth_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t appended;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  unsigned int NextUtf8Offset;
  uint64_t v23;
  char *v24;
  unsigned __int16 v25;
  unsigned int v26;
  signed int v27;
  int v28;
  size_t v29;
  char *v30;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  int v43;

  v42 = 0;
  v43 = 4;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a4 + 8)
                                                                                                + 168))(a1, a2, *a3, 0, 1, &v43, &v42);
  if ((appended & 0x80000000) != 0)
    return appended;
  v9 = *(char **)(a4 + 16);
  if ((v43 - 9) >= 6 && v43 != 4)
    return appended;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a4 + 8) + 104))(a1, a2, 1, 0, (char *)&v42 + 2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a4 + 8) + 184))(a1, a2, HIWORD(v42), 0, &v41);
  if ((appended & 0x80000000) != 0 || !v41)
    return appended;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, HIWORD(v42), 0, &v40, &v42);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a4 + 8)
                                                                                             + 168))(a1, a2, *a3, 1, 1, (char *)&v39 + 2, &v42);
  if ((v10 & 0x80000000) != 0)
    return v10;
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a4 + 8)
                                                                                                 + 168))(a1, a2, *a3, 2, 1, &v39, &v42);
  if ((appended & 0x80000000) != 0)
    return appended;
  v11 = HIWORD(v39);
  v12 = (char *)(v40 + HIWORD(v39));
  if (v9)
  {
    v13 = (unsigned __int16)v39 - HIWORD(v39);
    v14 = cstdlib_strlen(v9);
    geene_adapt_lingdb_visitor_extractPunct(v12, v13, v9, v14, (int *)&v38, 0);
    v15 = (unsigned __int16)v39 - HIWORD(v39);
    v16 = cstdlib_strlen(v9);
    geene_adapt_lingdb_visitor_extractPunct(v12, v15, v9, v16, &v37, 1);
    LODWORD(v11) = HIWORD(v39);
    if (*(_DWORD *)(a4 + 44) == 1)
    {
      v17 = *(_DWORD *)(a4 + 56);
      v18 = (unsigned __int16)v39 - HIWORD(v39);
      v19 = cstdlib_strlen(v9);
      geene_adapt_lingdb_visitor_extractPunct(v12, v18, v9, v19, (int *)&v38, 0);
      v20 = (unsigned __int16)v39 - HIWORD(v39);
      v21 = cstdlib_strlen(v9);
      geene_adapt_lingdb_visitor_extractPunct(v12, v20, v9, v21, &v37, 1);
      NextUtf8Offset = (unsigned __int16)v38;
      v11 = HIWORD(v39);
      goto LABEL_16;
    }
    v29 = v38;
    goto LABEL_26;
  }
  if (*(_DWORD *)(a4 + 44) != 1)
  {
    v29 = 0;
LABEL_26:
    v30 = (char *)(v40 + v11);
    if ((unsigned __int16)v39 - (_DWORD)v11 != (_DWORD)v29)
    {
      v30 += v29;
      v29 = (unsigned __int16)v39 - v37 - ((_DWORD)v29 + (_DWORD)v11);
    }
    return geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), v30, v29, v11);
  }
  NextUtf8Offset = 0;
  v17 = *(_DWORD *)(a4 + 56);
LABEL_16:
  v23 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a4 + 8), (unsigned __int16)v39 - v11 + 1);
  if (!v23)
    return 3221233674;
  v24 = (char *)v23;
  if ((unsigned __int16)v39 - (v37 + HIWORD(v39)) <= NextUtf8Offset)
  {
    v25 = 0;
    v28 = 1;
  }
  else
  {
    v25 = 0;
    do
    {
      v26 = NextUtf8Offset;
      NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v12, NextUtf8Offset);
      v27 = NextUtf8Offset - v26;
      if (NextUtf8Offset - v26 != 1 || v12[v26] != 45)
      {
        cstdlib_memcpy(&v24[v25], &v12[v26], v27);
        v25 += v27;
      }
    }
    while ((unsigned __int16)v39 - (v37 + HIWORD(v39)) > NextUtf8Offset);
    v28 = 0;
  }
  v24[NextUtf8Offset] = 0;
  v32 = cstdlib_strcmp(v24, "§");
  v33 = tokens_contained_puncs_only(v24, v28);
  v34 = *(_QWORD *)(a4 + 48);
  v35 = (_DWORD *)(v34 + 20 * v17 + 16);
  if (v32 && v33)
  {
    *v35 = 2;
  }
  else
  {
    *v35 = 1;
    appended = geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), v24, v25, SHIWORD(v39));
    v34 = *(_QWORD *)(a4 + 48);
  }
  v36 = v34 + 20 * v17;
  *(_WORD *)v36 = HIWORD(v39);
  *(_WORD *)(v36 + 2) = v39;
  *(_DWORD *)(v36 + 8) = v37;
  *(_DWORD *)(v36 + 4) = v38;
  *(_DWORD *)(v36 + 12) = 0;
  ++*(_DWORD *)(a4 + 56);
  heap_Free(*(_QWORD **)(*(_QWORD *)a4 + 8), (uint64_t)v24);
  return appended;
}

uint64_t geene_adapt_lingdb_phon_visitor_New(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v14);
  v13 = v14;
  if (!(_DWORD)result)
    *(_QWORD *)(v14 + 80) = geene_adapt_lingdb_phon_visitor_callback;
  *(_DWORD *)(v13 + 44) = a3 == 1;
  *(_QWORD *)(v13 + 48) = a4;
  *(_QWORD *)(v13 + 56) = a5;
  *(_QWORD *)(v13 + 64) = a6;
  *a7 = v13;
  return result;
}

uint64_t geene_adapt_lingdb_phon_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t appended;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  const void *v23;
  size_t v24;
  char *v25;
  char *v26;
  const void *v27;
  size_t v28;
  _DWORD __n[4];
  int v31;

  v31 = 4;
  *(_QWORD *)&__n[1] = 0;
  __n[0] = 0;
  v8 = *(_DWORD *)(a4 + 56);
  v9 = *(_DWORD *)(a4 + 60);
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a4 + 8)
                                                                                                 + 168))(a1, a2, *a3, 0, 1, &v31, (char *)__n + 2);
  if ((appended & 0x80000000) != 0)
    return appended;
  if ((v31 - 9) >= 6 && v31 != 4)
    return appended;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _DWORD *, char *))(*(_QWORD *)(a4 + 8)
                                                                                                + 168))(a1, a2, *a3, 1, 1, __n, (char *)__n + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _DWORD *, char *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, *a3, 3, &__n[1], (char *)__n + 2);
  if ((appended & 0x80000000) != 0)
    return appended;
  v13 = HIWORD(__n[0]);
  if (HIWORD(__n[0]))
  {
    v14 = 0;
    do
    {
      if (*(unsigned __int8 *)(*(_QWORD *)&__n[1] + v14) == 173)
      {
        *(_BYTE *)(*(_QWORD *)&__n[1] + v14) = 126;
        v13 = HIWORD(__n[0]);
      }
      ++v14;
    }
    while (v14 < v13);
  }
  if (*(_DWORD *)(a4 + 44) != 1)
  {
    v25 = cstdlib_strstr(*(char **)&__n[1], "\\TQ\\");
    if (v25)
    {
      v26 = v25;
      v27 = v25 + 4;
      v28 = cstdlib_strlen(v25 + 4);
      cstdlib_memmove(v26, v27, v28 + 1);
    }
    return geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), *(void **)&__n[1], HIWORD(__n[0]), __n[0]);
  }
  v15 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a4 + 8), v13 + 1);
  if (!v15)
    return 3221233674;
  v16 = v15;
  cstdlib_memcpy(v15, *(const void **)&__n[1], HIWORD(__n[0]));
  v17 = HIWORD(__n[0]);
  if (HIWORD(__n[0]))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v16[v18];
      if ((v20 - 54) <= 0xFFFFFFFA)
      {
        v16[(unsigned __int16)v19++] = v20;
        v17 = HIWORD(__n[0]);
      }
      ++v18;
    }
    while (v18 < v17);
  }
  v21 = cstdlib_strstr(v16, "\\TQ\\");
  if (v21)
  {
    v22 = v21;
    v23 = v21 + 4;
    v24 = cstdlib_strlen(v21 + 4);
    cstdlib_memmove(v22, v23, v24 + 1);
  }
  if (v9)
  {
    v8 = 0;
    *(_DWORD *)(a4 + 60) = 0;
  }
  if (*(_DWORD *)(*(_QWORD *)(a4 + 48) + 20 * v8 + 16) == 1)
    appended = geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), v16, HIWORD(__n[0]), __n[0]);
  *(_DWORD *)(a4 + 56) = v8 + 1;
  heap_Free(*(_QWORD **)(*(_QWORD *)a4 + 8), (uint64_t)v16);
  return appended;
}

uint64_t geene_adapt_lingdb_punct_visitor_New(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;

  v21 = 0;
  v16 = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v21);
  if ((_DWORD)v16)
  {
    v17 = v21;
  }
  else
  {
    v18 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 16);
    if (!v18)
      return 3221233664;
    v19 = (_QWORD *)v21;
    *(_DWORD *)(v21 + 44) = a5 == 1;
    v19[6] = a6;
    v19[7] = a7;
    v19[8] = a8;
    *v18 = a4;
    v18[1] = a3;
    v17 = v21;
    *(_QWORD *)(v21 + 80) = geene_adapt_lingdb_punct_visitor_callback;
    *(_QWORD *)(v17 + 16) = v18;
  }
  *a9 = v17;
  return v16;
}

uint64_t geene_adapt_lingdb_punct_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t appended;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char *__s1;
  _WORD v52[7];
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  int v59;
  char __src[128];
  char v61[128];
  char __s[128];
  char __b[128];
  unsigned __int8 v64;
  unsigned __int8 __n;
  _BYTE __n_1[254];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a4 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(*v8 + 24) + 8 * *(unsigned int *)(a4 + 32));
  v58 = 0;
  v59 = 4;
  v57 = 0;
  v56 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  *(_QWORD *)&v52[1] = 0;
  v52[0] = 0;
  __s1 = 0;
  v50 = 0;
  v10 = *(_DWORD *)(a4 + 56);
  v11 = *(_DWORD *)(a4 + 64);
  cstdlib_memset(__b, 0, 0x80uLL);
  cstdlib_memset(__s, 0, 0x80uLL);
  cstdlib_memset(v61, 0, 0x80uLL);
  cstdlib_memset(__src, 0, 0x80uLL);
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)(a4 + 8)
                                                                                                + 168))(a1, a2, *a3, 0, 1, &v59, &v58);
  if ((appended & 0x80000000) != 0)
    return appended;
  v13 = (char *)v8[1];
  if ((v59 - 9) >= 6 && v59 != 4)
    return appended;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a4 + 8) + 104))(a1, a2, 1, 0, (char *)&v58 + 2);
  if ((v14 & 0x80000000) != 0)
    return v14;
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a4 + 8) + 184))(a1, a2, HIWORD(v58), 0, &v57);
  if ((appended & 0x80000000) != 0 || !v57)
    return appended;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, HIWORD(v58), 0, &v56, &v58);
  if ((v14 & 0x80000000) != 0)
    return v14;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a4 + 8)
                                                                                             + 168))(a1, a2, *a3, 1, 1, (char *)&v55 + 2, &v58);
  if ((v14 & 0x80000000) != 0)
    return v14;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a4 + 8) + 168))(a1, a2, *a3, 2, 1, &v55, &v58);
  if ((v14 & 0x80000000) != 0)
    return v14;
  v15 = (char *)(v56 + HIWORD(v55));
  if (v13)
  {
    v16 = (unsigned __int16)v55 - HIWORD(v55);
    v17 = cstdlib_strlen(v13);
    geene_adapt_lingdb_visitor_extractPunct(v15, v16, v13, v17, &v54, 0);
    v18 = (unsigned __int16)v55 - HIWORD(v55);
    v19 = cstdlib_strlen(v13);
    geene_adapt_lingdb_visitor_extractPunct(v15, v18, v13, v19, &v53, 1);
  }
  v57 = 0;
  v52[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a4 + 8) + 184))(a1, a2, *a3, 18, &v57) & 0x80000000) == 0&& v57 == 1)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, *a3, 18, &__s1, &v58);
    if ((v14 & 0x80000000) != 0)
      return v14;
  }
  if (__s1 && !cstdlib_strcmp(__s1, "external")
    || (paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)"nnpausingthresholdpercent", &v50) & 0x80000000) == 0)
  {
    v57 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(*(_QWORD *)(a4 + 8) + 184))(a1, a2, *a3, 8, &v57) & 0x80000000) == 0&& v57 == 1)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _WORD *, int *))(*(_QWORD *)(a4 + 8)
                                                                                                  + 168))(a1, a2, *a3, 8, 1, v52, &v58);
      if ((v14 & 0x80000000) != 0)
        return v14;
    }
  }
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _WORD *, int *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, *a3, 14, &v52[1], &v58);
  if ((appended & 0x80000000) != 0)
  {
    appended = 0;
    *(_QWORD *)&v52[1] = 0;
  }
  if (*(_DWORD *)(a4 + 44) != 1)
  {
    loc_ComputePunctFromNLU(*(char **)&v52[1], (uint64_t)v15, (unsigned __int16)v55 - HIWORD(v55), v53, __b, __s, HIWORD(v55), v52[0], v9);
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(a4 + 48);
  if (*(_DWORD *)(v20 + 20 * v10 + 16) != 1)
    goto LABEL_26;
  v21 = v20 + 20 * v10;
  v23 = *(_DWORD *)(v21 + 4);
  v22 = *(_DWORD *)(v21 + 8);
  if (v23)
  {
    if (v22)
    {
LABEL_26:
      loc_ComputPunctFromOrth(v15, (unsigned __int16)v55 - HIWORD(v55), __b, __s);
      goto LABEL_32;
    }
  }
  else
  {
    if (!v22)
      goto LABEL_41;
    loc_ComputPunctFromOrth(v15, (unsigned __int16)v55 - HIWORD(v55), v61, __src);
    cstdlib_strcpy(__s, __src);
    v20 = *(_QWORD *)(a4 + 48);
    if (!*(_DWORD *)(v20 + 20 * v10 + 4))
      goto LABEL_41;
  }
  loc_ComputPunctFromOrth(v15, (unsigned __int16)v55 - HIWORD(v55), v61, __src);
  cstdlib_strcpy(__b, v61);
  v20 = *(_QWORD *)(a4 + 48);
LABEL_41:
  v26 = v10 - 1;
  if (v10 >= 1)
  {
    v27 = (unsigned __int16 *)(v20 + 20 * v26);
    if (*((_DWORD *)v27 + 4) == 2 && !*(_DWORD *)(v20 + 20 * v10 + 4) && !*(_DWORD *)(v20 + 20 * v26 + 12))
    {
      v28 = *v27;
      v29 = (char *)(v56 + v28);
      v30 = *(unsigned __int16 *)(v20 + 20 * v26 + 2);
      if ((_DWORD)v30 - (_DWORD)v28 != 1)
        v29 = &v29[v30 - *(unsigned int *)(v20 + 20 * v26 + 8)];
      map_to_start_puncs(__b, *v29);
    }
    if (v10 > 0x7E)
      goto LABEL_32;
    v20 = *(_QWORD *)(a4 + 48);
  }
  v31 = v10 + 1;
  v32 = (unsigned __int16 *)(v20 + 20 * (v10 + 1));
  if (*((_DWORD *)v32 + 4) == 2
    && (v33 = v20 + 20 * v31, v35 = *(_DWORD *)(v33 + 12), v34 = (_DWORD *)(v33 + 12), !v35))
  {
    v47 = *v32;
    v48 = v56 + v47;
    v49 = *(unsigned __int16 *)(v20 + 20 * v31 + 2);
    v36 = 1;
    *v34 = 1;
    map_to_end_puncs(v48, __s, v47, v49);
  }
  else
  {
    v36 = 0;
  }
  if (v10 <= 125)
  {
    v37 = *(_QWORD *)(a4 + 48);
    v38 = v10 + 2;
    v39 = (unsigned __int16 *)(v37 + 20 * (v10 + 2));
    if (*((_DWORD *)v39 + 4) != 1)
    {
      v40 = v37 + 20 * v38;
      v42 = *(_DWORD *)(v40 + 12);
      v41 = (_DWORD *)(v40 + 12);
      v43 = v36 ^ 1;
      if (v42)
        v43 = 1;
      if ((v43 & 1) == 0)
      {
        v44 = *v39;
        v45 = v56 + v44;
        v46 = *(unsigned __int16 *)(v37 + 20 * v38 + 2);
        *v41 = 1;
        map_to_end_puncs(v45, __s, v44, v46);
      }
    }
  }
LABEL_32:
  v25 = cstdlib_strlen(__b);
  v64 = v25;
  __n = cstdlib_strlen(__s);
  cstdlib_memcpy(__n_1, __b, v25);
  cstdlib_memcpy(&__n_1[v64], __s, __n);
  if (v11)
  {
    v10 = 0;
    *(_DWORD *)(a4 + 64) = 0;
  }
  if (!*(_DWORD *)(a4 + 44) || *(_DWORD *)(*(_QWORD *)(a4 + 48) + 20 * v10 + 16) == 1)
    appended = geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), &v64, v64 + __n + 2, SHIWORD(v55));
  *(_DWORD *)(a4 + 56) = v10 + 1;
  return appended;
}

_QWORD *geene_adapt_lingdb_punct_visitor_Delete(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = a1[2];
    if (v2)
      heap_Free(*(_QWORD **)(*a1 + 8), v2);
  }
  return geene_adapt_lingdb_generic_visitor_Delete(a1);
}

char *loc_ComputPunctFromOrth(char *a1, unsigned int a2, char *__s1, char *a4)
{
  int v7;
  char *v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  char *result;
  const char *v16;

  *__s1 = 0;
  *a4 = 0;
  v7 = *a1;
  v8 = &a1[a2];
  v9 = *(v8 - 1);
  if (*__s1)
  {
    cstdlib_strcat(__s1, "|");
    if (*a4)
      cstdlib_strcat(a4, "|");
  }
  if (a2 >= 4)
  {
    v10 = *(v8 - 3);
    if (v10 <= 43)
    {
      switch(v10)
      {
        case '"':
          v11 = "QUOTE";
          goto LABEL_22;
        case '\'':
          v11 = "SQUOTE";
          goto LABEL_22;
        case ')':
          v11 = "PAIRED_PARENTH";
          goto LABEL_22;
      }
    }
    else if (v10 > 92)
    {
      if (v10 == 93)
      {
        v11 = "PAIRED_SQUAREBRACKET";
        goto LABEL_22;
      }
      if (v10 == 126)
      {
        v11 = "SEMI_COLON";
        goto LABEL_22;
      }
    }
    else
    {
      if (v10 == 44)
      {
        v11 = "COMMA";
        goto LABEL_22;
      }
      if (v10 == 58)
      {
        v11 = "COLON";
LABEL_22:
        cstdlib_strcat(a4, v11);
        goto LABEL_23;
      }
    }
    v11 = "";
    goto LABEL_22;
  }
LABEL_23:
  if (*a4)
    cstdlib_strcat(a4, "|");
  if (a2 >= 3)
  {
    v12 = *(v8 - 2);
    if (v12 <= 57)
    {
      if (v12 > 40)
      {
        if (v12 == 41)
        {
          v13 = "PAIRED_PARENTH";
          goto LABEL_46;
        }
        if (v12 == 44)
        {
          v13 = "COMMA";
          goto LABEL_46;
        }
      }
      else
      {
        if (v12 == 34)
        {
          v13 = "QUOTE";
          goto LABEL_46;
        }
        if (v12 == 39)
        {
          v13 = "SQUOTE";
LABEL_46:
          cstdlib_strcat(a4, v13);
          goto LABEL_47;
        }
      }
LABEL_45:
      v13 = "";
      goto LABEL_46;
    }
    if (v12 > 92)
    {
      if (v12 == 93)
      {
        v13 = "PAIRED_SQUAREBRACKET";
        goto LABEL_46;
      }
      if (v12 != 126)
        goto LABEL_45;
    }
    else
    {
      if (v12 == 58)
      {
        v13 = "COLON";
        goto LABEL_46;
      }
      if (v12 != 59)
        goto LABEL_45;
    }
    v13 = "SEMI_COLON";
    goto LABEL_46;
  }
LABEL_47:
  if (*a4)
    cstdlib_strcat(a4, "|");
  if (v9 > 57)
  {
    if (v9 > 90)
    {
      if (v9 == 91)
      {
        v14 = "SQUAREBRACKET";
        goto LABEL_70;
      }
      if (v9 == 93)
      {
        v14 = "PAIRED_SQUAREBRACKET";
        goto LABEL_70;
      }
      if (v9 != 126)
        goto LABEL_69;
    }
    else
    {
      if (v9 == 58)
      {
        v14 = "COLON";
        goto LABEL_70;
      }
      if (v9 != 59)
      {
        if (v9 == 63)
        {
          v14 = "QUESTION_MARK";
          goto LABEL_70;
        }
LABEL_69:
        v14 = "";
        goto LABEL_70;
      }
    }
    v14 = "SEMI_COLON";
    goto LABEL_70;
  }
  v14 = "FULL_STOP";
  switch(v9)
  {
    case '!':
      v14 = "EXCLAMATION_MARK";
      break;
    case '"':
      v14 = "QUOTE";
      break;
    case '\'':
      v14 = "SQUOTE";
      break;
    case '(':
      v14 = "PARENTH";
      break;
    case ')':
      v14 = "PAIRED_PARENTH";
      break;
    case ',':
      v14 = "COMMA";
      break;
    case '.':
      break;
    default:
      goto LABEL_69;
  }
LABEL_70:
  result = cstdlib_strcat(a4, v14);
  if (a2 >= 2)
  {
    v16 = "SQUOTE";
    switch(v7)
    {
      case '"':
        v16 = "QUOTE";
        break;
      case '#':
      case '$':
      case '%':
      case '&':
        goto LABEL_77;
      case '\'':
        return cstdlib_strcat(__s1, v16);
      case '(':
        v16 = "PARENTH";
        break;
      case ')':
        v16 = "PAIRED_PARENTH";
        break;
      default:
        if (v7 == 91)
        {
          v16 = "SQUAREBRACKET";
        }
        else if (v7 == 93)
        {
          v16 = "PAIRED_SQUAREBRACKET";
        }
        else
        {
LABEL_77:
          v16 = "";
        }
        break;
    }
    return cstdlib_strcat(__s1, v16);
  }
  return result;
}

char *loc_ComputePunctFromNLU(char *result, uint64_t a2, unsigned int a3, unsigned int a4, char *a5, char *__s1, int a7, int a8, uint64_t a9)
{
  char *v15;
  char *v17;
  const char *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t Item;
  const char *v22;
  unsigned __int16 __n[11];
  int v24;

  v15 = result;
  *(_QWORD *)&__n[1] = 0;
  *(_QWORD *)&__n[5] = result;
  __n[0] = 0;
  *a5 = 0;
  *__s1 = 0;
  if (!result)
    goto LABEL_16;
  do
  {
    result = hlp_NLUStrFind(result, "S_PUNC", (char **)&__n[5], __n);
    if (!result)
      break;
    if (*a5)
      cstdlib_strcat(a5, "|");
    cstdlib_strncat(a5, *(const char **)&__n[5], __n[0]);
    result = *(char **)&__n[5];
  }
  while (*(_QWORD *)&__n[5]);
  *(_QWORD *)&__n[5] = v15;
  if (!v15)
    goto LABEL_16;
  v17 = v15;
  do
  {
    if (!hlp_NLUStrFind(v17, "E_PUNC", (char **)&__n[5], __n))
      break;
    if (*__s1)
      cstdlib_strcat(__s1, "|");
    cstdlib_strncat(__s1, *(const char **)&__n[5], __n[0]);
    v17 = *(char **)&__n[5];
  }
  while (*(_QWORD *)&__n[5]);
  result = hlp_NLUStrFind(v15, "PUNC", (char **)&__n[5], __n);
  v18 = *(const char **)&__n[5];
  if (!*(_QWORD *)&__n[5])
  {
LABEL_16:
    if (*(_BYTE *)(a2 + a3 - a4) == 44)
    {
      v24 = 0;
      result = (char *)geene_adapt_stream_GetNItems(a9);
      if (!(_DWORD)result)
        goto LABEL_31;
      v19 = 0;
      v20 = a3 - a4 + a7;
      while (1)
      {
        Item = geene_adapt_stream_GetItem(a9, v19, &v24);
        if (*(_DWORD *)(Item + 64) <= v20 && *(_DWORD *)(Item + 68) > v20)
          break;
        ++v19;
        result = (char *)geene_adapt_stream_GetNItems(a9);
        if (v19 >= result)
          goto LABEL_31;
      }
      if (*__s1)
        cstdlib_strcat(__s1, "|");
      v22 = "TNCOMMA";
    }
    else
    {
      if (!a8)
        goto LABEL_31;
      if (*__s1)
        cstdlib_strcat(__s1, "|");
      v22 = "COMMA";
    }
    result = cstdlib_strcat(__s1, v22);
    goto LABEL_31;
  }
  if (*__s1)
  {
    cstdlib_strcat(__s1, "|");
    v18 = *(const char **)&__n[5];
  }
  result = cstdlib_strncat(__s1, v18, __n[0]);
LABEL_31:
  if (v15)
  {
    if (a3 >= 2 && *(_BYTE *)(a2 + a3) == 95)
    {
      hlp_NLUStrFind(v15, "S_COMP", (char **)&__n[5], __n);
      result = hlp_NLUStrFind(v15, "I_COMP", (char **)&__n[1], __n);
      if (*(_OWORD *)&__n[1] != 0)
      {
        if (*__s1)
          cstdlib_strcat(__s1, "|");
        return cstdlib_strcat(__s1, "HYPHEN_LINK");
      }
    }
  }
  return result;
}

uint64_t geene_adapt_lingdb_generic_visitor_New(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = 3221233674;
  v7 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 96);
  if (v7)
  {
    v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 256, 8);
    *(_QWORD *)(v7 + 24) = v8;
    if (v8)
    {
      v6 = 0;
      *(_QWORD *)v7 = a1;
      *(_QWORD *)(v7 + 8) = a2;
      *(_DWORD *)(v7 + 40) = 256;
      *(_QWORD *)(v7 + 72) = geene_adapt_lingdb_generic_visitor_preCallback;
      *(_QWORD *)(v7 + 88) = geene_adapt_lingdb_generic_visitor_postCallback;
    }
  }
  *a3 = v7;
  return v6;
}

uint64_t geene_adapt_lingdb_generic_visitor_preCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_DWORD *)(a4 + 36);
  v5 = *(_DWORD *)(a4 + 40);
  if (v6 + 1 <= v5)
  {
    v7 = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v7 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a4 + 8), *(_QWORD *)(a4 + 24), 16 * v5);
    *(_QWORD *)(a4 + 24) = v7;
    if (!v7)
      return 3221233674;
    v6 = *(_DWORD *)(a4 + 36);
    *(_DWORD *)(a4 + 40) *= 2;
  }
  *(_DWORD *)(a4 + 32) = v6;
  result = geene_adapt_stream_New(*(_QWORD *)a4, (uint64_t *)(v7 + 8 * v6));
  if (!(_DWORD)result)
    ++*(_DWORD *)(a4 + 36);
  return result;
}

uint64_t geene_adapt_lingdb_generic_visitor_postCallback()
{
  return 0;
}

_QWORD *geene_adapt_lingdb_generic_visitor_ClearStreams(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = result[3];
    if (v2)
    {
      if (*((_DWORD *)result + 9))
      {
        v3 = 0;
        do
          result = geene_adapt_stream_Delete(*(_QWORD **)(v1[3] + 8 * v3++));
        while (v3 < *((unsigned int *)v1 + 9));
        v2 = v1[3];
      }
      else
      {
        v3 = 0;
      }
      *(_QWORD *)(v2 + 8 * v3) = 0;
      *((_DWORD *)v1 + 9) = 0;
    }
  }
  return result;
}

_QWORD *geene_adapt_lingdb_generic_visitor_Delete(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = result[3];
    if (v2)
    {
      if (*((_DWORD *)result + 9))
      {
        v3 = 0;
        do
          geene_adapt_stream_Delete(*(_QWORD **)(*(_QWORD *)(v1 + 24) + 8 * v3++));
        while (v3 < *(unsigned int *)(v1 + 36));
        v2 = *(_QWORD *)(v1 + 24);
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)v1 + 8), v2);
    }
    return heap_Free(*(_QWORD **)(*(_QWORD *)v1 + 8), v1);
  }
  return result;
}

uint64_t geene_adapt_lingdb_visitor_extractPunct(char *a1, uint64_t a2, char *a3, uint64_t a4, int *a5, int a6)
{
  uint64_t v10;
  int v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  unsigned int v18;
  int PreviousUtf8OffsetLimit;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int *v30;
  int v31;
  unsigned int v32;

  v10 = a2;
  v12 = Utf8_LengthInUtf8chars((unint64_t)a1, a2);
  v13 = Utf8_LengthInUtf8chars((unint64_t)a3, a4);
  if (a6)
  {
    v14 = &a1[v10 - 1];
    if (v12)
    {
      v31 = v10;
      do
      {
        v15 = 0;
        if (v13)
        {
          v16 = a3;
          while (1)
          {
            v17 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v14);
            if (v17 == utf8_determineUTF8CharLength(*(unsigned __int8 *)v16))
            {
              v18 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v14);
              if (!cstdlib_strncmp(v14, v16, v18))
                break;
            }
            v16 = &a3[utf8_GetNextUtf8OffsetLimit(a3, ((_DWORD)v16 - (_DWORD)a3), a4)];
            if (v13 == ++v15)
            {
              LODWORD(v10) = v31;
              goto LABEL_28;
            }
          }
          LODWORD(v10) = v31;
        }
        if (v15 == v13)
          break;
        PreviousUtf8OffsetLimit = utf8_GetPreviousUtf8OffsetLimit((uint64_t)a1, (int)v14 - (int)a1, v10);
        if (PreviousUtf8OffsetLimit != -1)
          v14 = &a1[PreviousUtf8OffsetLimit];
        --v12;
      }
      while (v12);
    }
LABEL_28:
    v26 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v14) + (_DWORD)v14 - (_DWORD)a1;
    v27 = v10 >= v26;
    v28 = v10 - v26;
    if (!v27)
      v28 = 0;
  }
  else
  {
    if (v12)
    {
      v20 = 0;
      v21 = a1;
      v30 = a5;
      v32 = v10;
      while (1)
      {
        v22 = 0;
        if (v13)
        {
          v23 = a3;
          while (1)
          {
            v24 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v21);
            if (v24 == utf8_determineUTF8CharLength(*(unsigned __int8 *)v23))
            {
              v25 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v21);
              if (!cstdlib_strncmp(v21, v23, v25))
                break;
            }
            v23 = &a3[utf8_GetNextUtf8OffsetLimit(a3, ((_DWORD)v23 - (_DWORD)a3), a4)];
            if (v13 == ++v22)
              goto LABEL_31;
          }
          v10 = v32;
        }
        if (v22 == v13)
          break;
        v21 = &a1[utf8_GetNextUtf8OffsetLimit(a1, ((_DWORD)v21 - (_DWORD)a1), v10)];
        ++v20;
        a5 = v30;
        if (v20 == v12)
          goto LABEL_33;
      }
LABEL_31:
      a5 = v30;
    }
    else
    {
      LODWORD(v21) = (_DWORD)a1;
    }
LABEL_33:
    v28 = (_DWORD)v21 - (_DWORD)a1;
  }
  *a5 = v28;
  return 0;
}

uint64_t geene_adapt_meta_stream_ItemToBuff(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  const char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  unsigned int v22;
  unsigned int v23;
  const char **v24;
  const char **v25;
  const char *v26;
  int v28;
  const char **v29;
  unsigned int __src;

  v9 = 3221233671;
  if (a4 == 18)
  {
    __src = 0;
    v29 = (const char **)&a9;
    v13 = 72;
    v14 = 0x10u;
    do
    {
      v15 = *(_DWORD *)((char *)&unk_24D292F48 + v14);
      if (v15 == 2)
      {
        v16 = v29++;
        v13 += cstdlib_strlen(*v16);
      }
      else if (v15 <= 1)
      {
        v13 += 4;
        ++v29;
      }
      v14 += 24;
    }
    while (v14 != 448);
    v17 = heap_Alloc(*(_QWORD *)(a1 + 8), v13);
    if (v17)
    {
      v18 = v17;
      v19 = 0;
      v20 = (char *)(v17 + 72);
      v29 = (const char **)&a9;
      v21 = &dword_24D292F58;
      do
      {
        v23 = *v21;
        v21 += 6;
        v22 = v23;
        if (v23 == 2)
        {
          v25 = v29++;
          v26 = *v25;
          __src = cstdlib_strlen(*v25);
          cstdlib_memcpy((void *)(v18 + v19), &__src, 4uLL);
          cstdlib_memcpy(v20, v26, __src);
          v20 += __src;
        }
        else if (v22 <= 1)
        {
          v24 = v29++;
          v28 = *(_DWORD *)v24;
          __src = 1;
          cstdlib_memcpy((void *)(v18 + v19), &__src, 4uLL);
          cstdlib_memcpy(v20, &v28, 4uLL);
          v20 += 4;
        }
        v19 += 4;
      }
      while (v19 != 72);
      v9 = 0;
      *a2 = v18;
      *a3 = v13;
    }
    else
    {
      return 3221233674;
    }
  }
  return v9;
}

uint64_t geene_adapt_stream_New(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 3221233674;
  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 40);
  if (v5)
  {
    v6 = heap_Alloc(*(_QWORD *)(a1 + 8), 1024);
    *(_QWORD *)(v5 + 16) = v6;
    if (v6)
    {
      v7 = heap_Alloc(*(_QWORD *)(a1 + 8), 2048);
      *(_QWORD *)(v5 + 8) = v7;
      if (v7)
      {
        v4 = 0;
        *(_QWORD *)v5 = a1;
        *(_OWORD *)(v5 + 24) = xmmword_214F74F60;
        goto LABEL_10;
      }
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8);
      if (v8)
        heap_Free(*(_QWORD **)(a1 + 8), v8);
    }
    v9 = *(_QWORD *)(v5 + 16);
    if (v9)
      heap_Free(*(_QWORD **)(a1 + 8), v9);
    heap_Free(*(_QWORD **)(a1 + 8), v5);
    v5 = 0;
  }
LABEL_10:
  *a2 = v5;
  return v4;
}

_QWORD *geene_adapt_stream_Delete(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      heap_Free(*(_QWORD **)(*result + 8), v2);
    v3 = v1[1];
    if (v3)
      heap_Free(*(_QWORD **)(*v1 + 8), v3);
    return heap_Free(*(_QWORD **)(*v1 + 8), (uint64_t)v1);
  }
  return result;
}

uint64_t geene_adapt_stream_AppendItemFromWordRecord(uint64_t a1, void *__src, size_t __n, __int16 a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 3221233671;
  v5 = __n;
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v8 != *(_DWORD *)(a1 + 28) - 1)
        break;
      result = geene_adapt_stream_DoubleItems(a1);
      if ((_DWORD)result)
        return result;
    }
    v10 = *(unsigned int *)(a1 + 32);
    if (*(_DWORD *)(a1 + 36) >= v10 + v5)
      break;
    result = geene_adapt_stream_DoubleData(a1);
    if ((_DWORD)result)
      return result;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 8) + 16 * v8;
  *(_DWORD *)v12 = v10;
  *(_DWORD *)(v12 + 4) = v5;
  *(_WORD *)(v12 + 8) = a4;
  *(_DWORD *)(v12 + 12) = 0;
  cstdlib_memcpy((void *)(v11 + v10), __src, v5);
  result = 0;
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 32) += v5;
  return result;
}

uint64_t geene_adapt_stream_DoubleItems(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 8), 16 * (2 * *(_DWORD *)(a1 + 28)));
  *(_QWORD *)(a1 + 8) = v2;
  if (!v2)
    return 3221233674;
  result = 0;
  *(_DWORD *)(a1 + 28) *= 2;
  return result;
}

uint64_t geene_adapt_stream_DoubleData(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 16), (2 * *(_DWORD *)(a1 + 36)));
  *(_QWORD *)(a1 + 16) = v2;
  if (!v2)
    return 3221233674;
  result = 0;
  *(_DWORD *)(a1 + 36) *= 2;
  return result;
}

uint64_t geene_adapt_stream_InsertItemFromMarker(uint64_t a1, void *__src, size_t __n, unsigned int a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;

  if (!a1)
    return 3221233671;
  v5 = __n;
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v8 != *(_DWORD *)(a1 + 28) - 1)
        break;
      result = geene_adapt_stream_DoubleItems(a1);
      if ((_DWORD)result)
        return result;
    }
    v10 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 36) >= v10 + v5)
      break;
    result = geene_adapt_stream_DoubleData(a1);
    if ((_DWORD)result)
      return result;
  }
  if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 8) + 12;
    while (1)
    {
      v13 = *(unsigned __int16 *)(v12 - 4);
      if (v13 >= a4)
        break;
      ++v11;
      v12 += 16;
      if (v8 == v11)
      {
LABEL_14:
        LODWORD(v11) = *(_DWORD *)(a1 + 24);
        goto LABEL_21;
      }
    }
    if (v13 == a4 && v8 > v11)
    {
      v24 = (int *)v12;
      while (1)
      {
        v25 = *v24;
        v24 += 4;
        if (v25 != 1 || *(unsigned __int16 *)(v12 - 4) != a4)
          break;
        ++v11;
        v12 = (uint64_t)v24;
        if (v8 == v11)
          goto LABEL_14;
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
LABEL_21:
    v15 = v11;
    v16 = *(unsigned int *)(a1 + 32);
    v17 = *(_DWORD *)(a1 + 32);
    v18 = v5;
  }
  else
  {
    v16 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16 * v11);
    v15 = v11;
    v17 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * v11);
    v18 = v5;
    cstdlib_memmove((void *)(*(_QWORD *)(a1 + 16) + v16 + v5), (const void *)(*(_QWORD *)(a1 + 16) + v16), (v10 - v16));
    v19 = *(_DWORD *)(a1 + 24);
    if (v19 - 1 >= (int)v11)
    {
      v20 = *(_QWORD *)(a1 + 8);
      do
      {
        *(_OWORD *)(v20 + 16 * v19) = *(_OWORD *)(v20 + 16 * (v19 - 1));
        v20 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(v20 + 16 * v19) += v5;
        v21 = v19 - 2;
        --v19;
      }
      while (v21 >= (int)v11);
    }
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 8) + 16 * v15;
  *(_DWORD *)v23 = v17;
  *(_DWORD *)(v23 + 4) = v5;
  *(_WORD *)(v23 + 8) = a4;
  *(_DWORD *)(v23 + 12) = 1;
  cstdlib_memcpy((void *)(v22 + v16), __src, v18);
  result = 0;
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 32) += v5;
  return result;
}

uint64_t geene_adapt_stream_GetItem(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;

  if (result)
  {
    if (*(_DWORD *)(result + 24) <= a2)
    {
      return 0;
    }
    else
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = (unsigned int *)(*(_QWORD *)(result + 8) + 16 * a2);
      *a3 = v4[1];
      return v3 + *v4;
    }
  }
  return result;
}

uint64_t geene_adapt_stream_GetNItems(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

uint64_t geene_adapt_lingdb_tn_visitor_New(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v6);
  v5 = v6;
  if (!(_DWORD)result)
    *(_QWORD *)(v6 + 80) = geene_adapt_lingdb_tn_visitor_callback;
  *a3 = v5;
  return result;
}

uint64_t geene_adapt_lingdb_tn_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int16 v9;
  int v10;
  char *__src;
  int v12;
  char __dst[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = 4;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__dst = 0u;
  v14 = 0u;
  __src = 0;
  v10 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a4 + 8)
                                                                                               + 168))(a1, a2, *a3, 0, 1, &v12, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0 && v12 == 6)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, *a3, 4, &__src, (char *)&v10 + 2);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a4 + 8) + 168))(a1, a2, *a3, 1, 1, &v10, (char *)&v10 + 2);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a4 + 8) + 168))(a1, a2, *a3, 2, 1, &v9, (char *)&v10 + 2);
        if ((result & 0x80000000) == 0)
        {
          cstdlib_strcpy(__dst, __src);
          LODWORD(v17) = (unsigned __int16)v10;
          HIDWORD(v17) = v9;
          return geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), __dst, 0x48uLL, v10);
        }
      }
    }
  }
  return result;
}

uint64_t geene_adapt_lingdb_pt_visitor_New(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v6);
  v5 = v6;
  if (!(_DWORD)result)
    *(_QWORD *)(v6 + 80) = geene_adapt_lingdb_pt_visitor_callback;
  *a3 = v5;
  return result;
}

uint64_t geene_adapt_lingdb_pt_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int16 v9;
  int v10;
  char *__src;
  int v12;
  char __dst[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = 4;
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__dst = 0u;
  v14 = 0u;
  __src = 0;
  v10 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(*(_QWORD *)(a4 + 8)
                                                                                               + 168))(a1, a2, *a3, 0, 1, &v12, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0 && v12 == 15)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(*(_QWORD *)(a4 + 8) + 176))(a1, a2, *a3, 4, &__src, (char *)&v10 + 2);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(*(_QWORD *)(a4 + 8) + 168))(a1, a2, *a3, 1, 1, &v10, (char *)&v10 + 2);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(*(_QWORD *)(a4 + 8) + 168))(a1, a2, *a3, 2, 1, &v9, (char *)&v10 + 2);
        if ((result & 0x80000000) == 0)
        {
          cstdlib_strcpy(__dst, __src);
          LODWORD(v17) = (unsigned __int16)v10;
          HIDWORD(v17) = v9;
          return geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), __dst, 0x48uLL, v10);
        }
      }
    }
  }
  return result;
}

uint64_t geene_adapt_lingdb_meta_visitor_New(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  v17 = geene_adapt_lingdb_generic_visitor_New(a1, a2, &v24);
  if ((_DWORD)v17)
  {
    v18 = (_QWORD *)v24;
  }
  else
  {
    v19 = heap_Alloc(*(_QWORD *)(a1 + 8), 72);
    if (!v19)
      return 3221233664;
    v20 = (_DWORD *)v19;
    *(_QWORD *)v19 = a4;
    *(_QWORD *)(v19 + 8) = a5;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 64) = 0;
    *(_OWORD *)(v19 + 40) = xmmword_214F74F70;
    if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"timbre", (unsigned int *)&v23 + 1) & 0x80000000) == 0)
      v20[13] = HIDWORD(v23);
    if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"volume", (unsigned int *)&v23) & 0x80000000) == 0)
      v20[10] = v23;
    if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"pitch", (unsigned int *)&v22 + 1) & 0x80000000) == 0)
      v20[11] = HIDWORD(v22);
    if ((paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"rate", (unsigned int *)&v22) & 0x80000000) == 0)
      v20[12] = v22;
    v18 = (_QWORD *)v24;
    *(_DWORD *)(v24 + 44) = a6 == 1;
    v18[6] = a7;
    v18[7] = a9;
    v18[8] = a10;
    v18[9] = geene_adapt_lingdb_meta_visitor_preCallback;
    v18[10] = geene_adapt_lingdb_meta_visitor_callback;
    v18[11] = geene_adapt_lingdb_meta_visitor_postCallback;
    v18[2] = v20;
  }
  *a11 = v18;
  return v17;
}

uint64_t geene_adapt_lingdb_meta_visitor_preCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v7 = *(_QWORD *)(a4 + 16);
  v14 = 0;
  v8 = geene_adapt_lingdb_generic_visitor_preCallback(a1, a2, a3, a4);
  if ((v8 & 0x80000000) == 0)
  {
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1, a2, NullHandle, v10))
    {
      v15 = 0;
      v13 = 0;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a4 + 8) + 104))(a1, a2, 1, 0, (char *)&v15 + 2);
      if ((v12 & 0x80000000) != 0)
      {
        return v12;
      }
      else
      {
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a4 + 8)
                                                                                                 + 168))(a1, a2, HIWORD(v15), 3, 1, &v13, &v15);
        if ((v8 & 0x80000000) == 0 && !v13)
        {
          v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(*(_QWORD *)(a4 + 8)
                                                                                              + 176))(a1, a2, HIWORD(v15), 1, &v14, &v15);
          if ((v8 & 0x80000000) == 0)
          {
            *(_DWORD *)(v7 + 64) = (unsigned __int16)v15;
            *(_QWORD *)(v7 + 56) = v14;
          }
        }
      }
    }
  }
  return v8;
}

uint64_t geene_adapt_lingdb_meta_visitor_callback(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t appended;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t Item;
  const char *v21;
  unsigned int v22;
  unsigned int v24;
  const char *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  int v54;
  int v55;
  unsigned int *v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  unsigned __int16 *v65;
  char *v66;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int16 v73;
  int v74;
  int v75;
  _BOOL4 v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  unsigned int v83;
  int v84;
  int v85;
  int i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v101;
  uint64_t v102;
  unsigned int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  int v108;
  unsigned __int16 *v109;
  int v110;
  void *v111;
  void *v112;
  void *__src;
  uint64_t v114;
  int v115[2];
  uint64_t v116;
  size_t v117;
  size_t __n;
  char *__s1;
  int v120;
  int v121;
  unsigned __int16 v122;
  __int16 v123;
  __int16 v124;
  int v125;
  unsigned __int16 v126;
  __int16 v127;
  __int16 v128;
  unsigned __int16 v129;
  unsigned __int16 v130;
  __int16 v131;
  unsigned __int16 v132;
  char *v133;
  char __str[20];
  char v135[64];
  char __dst[64];
  uint64_t v137;

  v6 = a2;
  v7 = a1;
  v137 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(unsigned int *)(a4 + 32);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 24) + 8 * v10);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 24) + 8 * v10);
  __n = 0x400000000;
  v117 = 0;
  *(_QWORD *)v115 = 0;
  v116 = 0;
  __src = 0;
  v114 = 0;
  v111 = 0;
  v112 = 0;
  v110 = -1;
  v13 = *(_DWORD *)(a4 + 56);
  v14 = *(_DWORD *)(a4 + 68);
  appended = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, size_t *))(v8 + 168))(a1, a2, *a3, 0, 1, (char *)&__n + 4, &__n);
  if ((appended & 0x80000000) != 0)
    return appended;
  v109 = a3;
  v107 = v14;
  v108 = v13;
  if ((HIDWORD(__n) - 9) >= 6 && HIDWORD(__n) != 4)
    return appended;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                                + 168))(v7, v6, *a3, 1, 1, (char *)&v117 + 6, &__n);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                                + 168))(v7, v6, *a3, 2, 1, (char *)&v117 + 4, &__n);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v17 = HIWORD(v117);
  v18 = WORD2(v117);
  *(_DWORD *)v135 = 0;
  v19 = 0;
  if (geene_adapt_stream_GetNItems(v11))
  {
    do
    {
      Item = geene_adapt_stream_GetItem(v11, v19, v135);
      v21 = (const char *)Item;
      v22 = *(_DWORD *)(Item + 64);
      if (v22 <= v17 && *(_DWORD *)(Item + 68) >= v18)
        break;
      if (v22 >= v17 && v22 <= v18)
        break;
      v24 = *(_DWORD *)(Item + 68);
      if (v24 >= v17 && v24 <= v18)
        break;
      ++v19;
    }
    while (v19 < geene_adapt_stream_GetNItems(v11));
  }
  else
  {
    v21 = 0;
  }
  if (v19 >= geene_adapt_stream_GetNItems(v11))
    v26 = "normal";
  else
    v26 = v21;
  cstdlib_strcpy(__dst, v26);
  v27 = HIWORD(v117);
  v28 = WORD2(v117);
  *(_DWORD *)__str = 0;
  v29 = 0;
  if (geene_adapt_stream_GetNItems(v12))
  {
    do
    {
      v30 = geene_adapt_stream_GetItem(v12, v29, __str);
      v31 = (const char *)v30;
      if (*(_DWORD *)(v30 + 64) <= v27 && *(_DWORD *)(v30 + 68) >= v28)
        break;
      ++v29;
    }
    while (v29 < geene_adapt_stream_GetNItems(v12));
  }
  else
  {
    v31 = 0;
  }
  if (v29 >= geene_adapt_stream_GetNItems(v12))
    v32 = "P";
  else
    v32 = v31;
  cstdlib_strcpy(v135, v32);
  v33 = *(_QWORD *)a4;
  v34 = *(_DWORD **)(v9 + 56);
  v35 = *(_DWORD *)(v9 + 64);
  v36 = HIWORD(v117);
  if (*(_QWORD *)(v9 + 24))
  {
    appended = 0;
  }
  else
  {
    appended = geene_adapt_common_DuplicateString_FreeFirst(*(_QWORD *)a4, "", (uint64_t *)(v9 + 24));
    if ((appended & 0x80000000) != 0)
      return appended;
  }
  v106 = (uint64_t *)(v9 + 32);
  if (*(_QWORD *)(v9 + 32)
    || (appended = geene_adapt_common_DuplicateString_FreeFirst(v33, "", v106), (appended & 0x80000000) == 0))
  {
    if (v35 && *v34 == 0x4000)
      v36 += v34[3];
    v37 = (_DWORD *)(v9 + 40);
    v38 = *(_DWORD *)(v9 + 68);
    if (v38 >= v35)
      goto LABEL_56;
    v105 = v6;
    while (2)
    {
      if (v36 >= v34[8 * v38 + 3])
      {
        v39 = v34[8 * v38];
        v40 = v37;
        switch(v39)
        {
          case 16:
            v40 = (_DWORD *)(v9 + 44);
            goto LABEL_53;
          case 17:
            v40 = (_DWORD *)(v9 + 52);
            goto LABEL_53;
          case 18:
            v40 = (_DWORD *)(v9 + 48);
            goto LABEL_53;
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
            goto LABEL_54;
          case 24:
LABEL_53:
            *v40 = v34[8 * v38 + 6];
            goto LABEL_54;
          default:
            if (v39 != 60)
              goto LABEL_54;
            v41 = v7;
            v42 = v37;
            appended = loc_ComputeStyleFieldsFromStyleMarkerArg(v33, *(char **)&v34[8 * v38 + 6], (uint64_t *)(v9 + 24), v106);
            if ((appended & 0x80000000) != 0)
              return appended;
            v38 = *(_DWORD *)(v9 + 68);
            v37 = v42;
            v7 = v41;
LABEL_54:
            *(_DWORD *)(v9 + 68) = ++v38;
            if (v38 >= v35)
              break;
            continue;
        }
      }
      break;
    }
    v6 = v105;
    if ((appended & 0x80000000) == 0)
    {
LABEL_56:
      v43 = *(_DWORD **)(v9 + 56);
      v44 = *(unsigned int *)(v9 + 64);
      __str[0] = 0;
      if ((_DWORD)v44 && *v43 == 0x4000)
      {
        v45 = 0;
        v46 = v43[3];
        v47 = v46 + HIWORD(v117);
        v48 = v46 + WORD2(v117);
        v49 = -1;
        v50 = v43;
        do
        {
          if (*v50 == 1)
          {
            v51 = v50[3];
            if (v51 > v47)
              break;
            if (v49 == -1 || v43[8 * v49 + 3] != v51)
              v49 = v45;
          }
          ++v45;
          v50 += 8;
        }
        while (v44 != v45);
        if (v49 != -1)
        {
          v52 = &v43[8 * v49];
          v53 = v52[1];
          v54 = v52[2] + v53;
          if (v49 + 1 < v44)
          {
            v55 = ~v49 + v44;
            v56 = v52 + 11;
            do
            {
              if (*(v56 - 3) == 1)
              {
                if (v48 <= *v56)
                  break;
                v54 = *(v56 - 1) + *(v56 - 2);
              }
              v56 += 8;
              --v55;
            }
            while (v55);
          }
          snprintf(__str, 0x14uLL, "%u:%u", v53, v54);
        }
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a4 + 8) + 104))(v7, v6, 1, 0, (char *)&__n + 2);
      if ((v16 & 0x80000000) == 0)
      {
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                               + 176))(v7, v6, WORD1(__n), 0, &v116, &__n);
        if ((v16 & 0x80000000) == 0)
        {
          v57 = *(char **)(v9 + 16);
          v58 = HIWORD(v117);
          v59 = WORD2(v117);
          LODWORD(v133) = 0;
          LODWORD(__s1) = 0;
          v60 = (char *)(v116 + HIWORD(v117));
          if (v57)
          {
            v61 = cstdlib_strlen(v57);
            geene_adapt_lingdb_visitor_extractPunct(v60, (v59 - v58), v57, v61, (int *)&v133, 0);
            v62 = cstdlib_strlen(v57);
            geene_adapt_lingdb_visitor_extractPunct(v60, (v59 - v58), v57, v62, (int *)&__s1, 1);
            v63 = (int)v133;
            v64 = (int)__s1;
          }
          else
          {
            v64 = 0;
            v63 = 0;
          }
          v65 = v109;
          v66 = &v60[v63];
          v67 = v59 - (v64 + v63 + v58);
          if (Utf8_LengthInUtf8chars((unint64_t)v66, v67) == 1)
            utf8_BelongsToSet(0x12u, v66, 0, v67);
          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                              + 176))(v7, v6, *v109, 14, v115, &__n) & 0x80000000) == 0)
          {
            v68 = *(char **)v115;
            v133 = 0;
            LOWORD(__s1) = 0;
            hlp_NLUStrFind(*(char **)v115, "S_COMP", &v133, (unsigned __int16 *)&__s1);
            if (!v133)
            {
              hlp_NLUStrFind(v68, "I_COMP", &v133, (unsigned __int16 *)&__s1);
              if (!v133)
                hlp_NLUStrFind(v68, "E_COMP", &v133, (unsigned __int16 *)&__s1);
            }
          }
          v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                                  + 176))(v7, v6, *v109, 9, &v114, &__n);
          if ((v16 & 0x80000000) == 0)
          {
            v104 = *(_DWORD **)(v9 + 56);
            v103 = *(_DWORD *)(v9 + 64);
            v69 = *(_QWORD *)a4;
            v70 = *(_QWORD *)(a4 + 8);
            v129 = *v109;
            v71 = v129;
            v128 = 0;
            v127 = 255;
            v126 = 0;
            v125 = 4;
            v124 = 0;
            v133 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(v70 + 184))(v7, v6, v129, 18, &v124) & 0x80000000) == 0&& v124 == 1)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(v70 + 176))(v7, v6, v71, 18, &v133, &v128);
              v71 = v129;
            }
            v72 = 1;
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(v70 + 120))(v7, v6, v71, &v129) & 0x80000000) == 0)
            {
              v73 = v129;
              if (v129)
              {
                v102 = v69;
                v74 = -1;
                while (1)
                {
                  v72 = 1;
                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(v70 + 168))(v7, v6, v73, 0, 1, &v125, &v128) & 0x80000000) != 0)
                  {
LABEL_145:
                    v110 = v74;
                    break;
                  }
                  if ((v125 - 9) < 6)
                    goto LABEL_93;
                  if (v125 == 15)
                  {
                    v123 = 0;
                    v122 = 0;
                    v121 = 0;
                    v120 = 0;
                    __s1 = 0;
                    v76 = 0;
                    if ((paramc_ParamGetStr(*(_QWORD *)(v69 + 40), (uint64_t)"langcode", &__s1) & 0x80000000) == 0
                      && __s1)
                    {
                      v76 = cstdlib_strcmp(__s1, "jpj") == 0;
                    }
                    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(v70 + 168))(v7, v6, v129, 1, 1, &v123, &v128) & 0x80000000) != 0)
                    {
                      v77 = 0;
LABEL_110:
                      v79 = 0;
                    }
                    else
                    {
                      v77 = 0;
                      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(v70 + 168))(v7, v6, v129, 2, 1, &v122, &v128) & 0x80000000) != 0)
                      {
                        v79 = 0;
                      }
                      else
                      {
                        v78 = v122;
                        v79 = 0;
                        if (v122)
                        {
                          if (v76)
                          {
                            v80 = (unsigned __int16)(v122 - 1);
                            v81 = (unsigned __int16)(v122 + 1);
                            v82 = v104;
                            v83 = v103;
                            goto LABEL_136;
                          }
                          if (v123)
                          {
                            v80 = (unsigned __int16)(v123 - 1);
                            v82 = v104;
                            v83 = v103;
                            v81 = v122;
LABEL_136:
                            v77 = loc_CheckPauseMarker(v82, v83, v80, v81, &v121, &v120);
                          }
                          else
                          {
                            v77 = 0;
                          }
                          v132 = v129;
                          v131 = 0;
                          v130 = 0;
                          for (i = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 120))(v7, v6);
                                ;
                                i = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 120))(v7, v6))
                          {
                            v79 = 1;
                            if (i < 0 || !v132)
                              break;
                            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(v70 + 168))(v7, v6, v132, 2, 1, &v130, &v131) & 0x80000000) == 0&& v130 > v78)
                            {
                              goto LABEL_110;
                            }
                          }
                        }
                      }
                    }
                    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(v70 + 168))(v7, v6, v129, 8, 1, &v126, &v128) & 0x80000000) != 0&& v77 == 1)
                    {
                      if (v76 && v121 == 29999)
                        v84 = 200;
                      else
                        v84 = v121;
                      goto LABEL_117;
                    }
                    v84 = -1;
                    if (!v77 || v126 == 29999)
                    {
LABEL_117:
                      v69 = v102;
                    }
                    else
                    {
                      v69 = v102;
                      if (v133 && !cstdlib_strcmp(v133, "external"))
                      {
                        if (v120 == 1)
                          v84 = v121;
                        else
                          v84 = v126;
                      }
                    }
                    v85 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(v70 + 168))(v7, v6, v129, 7, 1, &v127, &v128);
                    if (v76 && v84 == 1)
                      v74 = -1;
                    else
                      v74 = v84;
                    if (v85 < 0 || v76 && v84 == 1)
                    {
                      v127 = 255;
                      v65 = v109;
                    }
                    else
                    {
                      v65 = v109;
                      if (!v79 && !v127)
                        v127 = 1;
                    }
                    v72 = 0;
                    goto LABEL_94;
                  }
                  if (v125 == 4)
                  {
LABEL_93:
                    v72 = 0;
                    v127 = 255;
                  }
LABEL_94:
                  v75 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v70 + 120))(v7, v6, v129, &v129);
                  if (v72)
                  {
                    if ((v75 & 0x80000000) == 0)
                    {
                      v73 = v129;
                      if (v129)
                        continue;
                    }
                  }
                  goto LABEL_145;
                }
              }
            }
            if (v127 != 1 && v127 != 2 && ((v127 != 0) & ~v72) == 0)
              geene_adapt_get_accumulated_sildur_from_markers_and_waitfactor(v69, v70, v7, v6, v104, v103, 0, -1, 1, &v110);
            if (HIDWORD(__n) != 10)
            {
              v87 = *(_QWORD *)(a4 + 8);
              v88 = *v65;
              v133 = 0;
              LOWORD(__s1) = 0;
              LOWORD(v125) = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **))(v87 + 184))(v7, v6, v88, 21, &__s1) & 0x80000000) == 0&& (_WORD)__s1&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(v87 + 176))(v7, v6, v88, 21, &v133, &v125) & 0x80000000) == 0)
              {
                cstdlib_strcmp(v133, "ADDONDCT");
              }
            }
            v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, size_t *))(*(_QWORD *)(a4 + 8)
                                                                                                  + 176))(v7, v6, *v65, 3, &__src, &__n);
            if ((v16 & 0x80000000) == 0)
            {
              v93 = *(_QWORD *)a4;
              if (*(_DWORD *)(a4 + 44) == 1)
              {
                v94 = (void *)heap_Alloc(*(_QWORD *)(v93 + 8), (unsigned __int16)__n + 1);
                v112 = v94;
                if (!v94)
                  return 3221233674;
                v95 = (uint64_t)v94;
                loc_ComputeToneField(__src, (unsigned __int16)__n, &v112);
                appended = geene_adapt_meta_stream_ItemToBuff(*(_QWORD *)a4, (uint64_t *)&v111, (unsigned int *)&v117, 18, v96, v97, v98, v99, (uint64_t)__dst);
              }
              else
              {
                appended = geene_adapt_meta_stream_ItemToBuff(v93, (uint64_t *)&v111, (unsigned int *)&v117, 18, v89, v90, v91, v92, (uint64_t)__dst);
                v95 = 0;
              }
              v101 = v108;
              if (v107)
              {
                v101 = 0;
                *(_DWORD *)(a4 + 68) = 0;
              }
              if (!*(_DWORD *)(a4 + 44) || *(_DWORD *)(*(_QWORD *)(a4 + 48) + 20 * v101 + 16) == 1)
                appended = geene_adapt_stream_AppendItemFromWordRecord(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * *(unsigned int *)(a4 + 32)), v111, v117, SHIWORD(v117));
              *(_DWORD *)(a4 + 56) = v101 + 1;
              heap_Free(*(_QWORD **)(*(_QWORD *)a4 + 8), (uint64_t)v111);
              if (v95)
                heap_Free(*(_QWORD **)(*(_QWORD *)a4 + 8), v95);
              return appended;
            }
          }
        }
      }
      return v16;
    }
  }
  return appended;
}

uint64_t geene_adapt_lingdb_meta_visitor_postCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = a4[2];
  v6 = *(_DWORD *)(v5 + 64);
  if (v6)
  {
    v7 = (v6 - 1);
    if (v6 != 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = v7 - 1;
      v14 = (32 * v7) | 0x18;
      do
      {
        if (v12 && v11 && v10 && v9 && v8)
          return geene_adapt_lingdb_generic_visitor_postCallback();
        if (!v12)
        {
          v15 = *(_QWORD *)(v5 + 56);
          if (*(_DWORD *)(v15 + v14 - 24) == 60)
          {
            result = loc_ComputeStyleFieldsFromStyleMarkerArg(*a4, *(char **)(v15 + v14), (uint64_t *)(v5 + 24), (uint64_t *)(v5 + 32));
            if ((result & 0x80000000) != 0)
              return result;
            v12 = 1;
            goto LABEL_26;
          }
        }
        if (v11 || (v17 = *(_QWORD *)(v5 + 56), *(_DWORD *)(v17 + v14 - 24) != 24))
        {
          if (v10 || (v18 = *(_QWORD *)(v5 + 56), *(_DWORD *)(v18 + v14 - 24) != 16))
          {
            if (v9 || (v19 = *(_QWORD *)(v5 + 56), *(_DWORD *)(v19 + v14 - 24) != 18))
            {
              if (!v8)
              {
                v20 = *(_QWORD *)(v5 + 56);
                if (*(_DWORD *)(v20 + v14 - 24) != 17)
                {
                  v8 = 0;
                  goto LABEL_26;
                }
                *(_DWORD *)(v5 + 52) = *(_DWORD *)(v20 + v14);
              }
              v8 = 1;
            }
            else
            {
              *(_DWORD *)(v5 + 48) = *(_DWORD *)(v19 + v14);
              v9 = 1;
            }
          }
          else
          {
            *(_DWORD *)(v5 + 44) = *(_DWORD *)(v18 + v14);
            v10 = 1;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 40) = *(_DWORD *)(v17 + v14);
          v11 = 1;
        }
LABEL_26:
        v14 -= 32;
      }
      while ((_DWORD)v13--);
    }
  }
  return geene_adapt_lingdb_generic_visitor_postCallback();
}

_QWORD *geene_adapt_lingdb_meta_visitor_Delete(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
        heap_Free(*(_QWORD **)(*result + 8), v3);
      v4 = *(_QWORD *)(v2 + 32);
      if (v4)
        heap_Free(*(_QWORD **)(*v1 + 8), v4);
      heap_Free(*(_QWORD **)(*v1 + 8), v2);
    }
    return geene_adapt_lingdb_generic_visitor_Delete(v1);
  }
  return result;
}

uint64_t geene_adapt_lingdb_meta_visitor_GetCurrentMetaDataValues(uint64_t result, _QWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7;

  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      *a2 = *(_QWORD *)(v7 + 24);
      *a3 = *(_QWORD *)(v7 + 32);
      *a4 = *(_DWORD *)(v7 + 40);
      *a5 = *(_DWORD *)(v7 + 44);
      *a6 = *(_DWORD *)(v7 + 48);
      *a7 = *(_DWORD *)(v7 + 52);
    }
  }
  return result;
}

uint64_t geene_adapt_get_frompos_wordrec(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, unsigned __int16 *a7)
{
  uint64_t v14;
  unsigned __int16 v15;
  _BOOL4 v16;
  char v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v24;
  unsigned __int16 v25;
  int v26;
  int v27;

  v26 = 0;
  v27 = 0;
  v25 = -1;
  v24 = 11;
  *a7 = -1;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v27 + 2);
  if ((v14 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a1 + 152))(a2, a3, 2, HIWORD(v27), &v26) & 0x80000000) == 0)
  {
    if ((_WORD)v26)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a1 + 104))(a2, a3, 2, HIWORD(v27), &v27);
      if ((v14 & 0x80000000) == 0)
      {
        v15 = v27;
        if ((_WORD)v27)
        {
          v20 = a4 == 1;
          v16 = a4 != 1;
          v17 = v20;
          if (a6 == 1)
            v18 = 1;
          else
            v18 = v17;
          while (1)
          {
            v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(a1 + 168))(a2, a3, v15, 0, 1, &v24, (char *)&v26 + 2);
            if ((v19 & 0x80000000) != 0)
              return v19;
            v20 = (v24 - 9) < 6 || v24 == 4;
            if (!v20)
              break;
            v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1 + 168))(a2, a3, (unsigned __int16)v27, 1, 1, &v25, (char *)&v26 + 2);
            if ((v19 & 0x80000000) != 0)
              return v19;
            v21 = v16;
            if ((v18 & 1) == 0)
            {
              if (v25 < a5)
                break;
              v21 = 0;
            }
            *a7 = v25;
LABEL_24:
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a1 + 120))(a2, a3, (unsigned __int16)v27, &v27);
            if ((v14 & 0x80000000) == 0)
            {
              v15 = v27;
              v22 = (_WORD)v27 ? v21 : 0;
              if (v22 == 1)
                continue;
            }
            return v14;
          }
          v21 = 1;
          goto LABEL_24;
        }
      }
    }
  }
  return v14;
}

uint64_t geene_adapt_get_accumulated_sildur_from_markers_and_waitfactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, int a7, int a8, int a9, int *a10)
{
  int v15;
  uint64_t frompos_wordrec;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  int *v29;
  int v30;
  int *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  int v39;
  unsigned __int16 v41;
  uint64_t v42;

  v41 = -1;
  *a10 = -1;
  if (!a6)
    return 0;
  if (*a5 == 0x4000)
    v15 = a5[3];
  else
    v15 = 0;
  if (a8 == -1)
    v17 = -1;
  else
    v17 = a5[8 * a8 + 3] - v15;
  frompos_wordrec = geene_adapt_get_frompos_wordrec(a2, a3, a4, a7, v17, a9, &v41);
  if ((frompos_wordrec & 0x80000000) == 0)
  {
    if (a7 != 1 && a8 == -1)
    {
      if (v41 != 0xFFFF)
      {
        v18 = 0;
        LODWORD(v19) = 0;
        v20 = a5 + 3;
        while (1)
        {
          v21 = *v20;
          v20 += 8;
          v22 = v21 - v15;
          if (v21 - v15 >= v41)
          {
            if (v22 > v41)
            {
              LODWORD(v19) = v18;
LABEL_31:
              if (v19 < a6)
              {
                v29 = &a5[8 * v19];
                v24 = v19;
                do
                {
                  v30 = *v29;
                  v29 += 8;
                  if (v30 == 26)
                    goto LABEL_36;
                }
                while (a6 != ++v24);
              }
LABEL_35:
              v24 = a6;
              goto LABEL_36;
            }
            LODWORD(v19) = v18;
          }
          if (a6 == ++v18)
            goto LABEL_31;
        }
      }
      return frompos_wordrec;
    }
    if (a7)
      v19 = 0;
    else
      v19 = (a8 + 1);
    if (v19 >= a6)
      goto LABEL_35;
    v23 = &a5[8 * v19];
    v24 = v19;
    v25 = a6;
    v26 = v23;
    while (1)
    {
      v27 = *v26;
      v26 += 8;
      if (v27 == 26)
        break;
      if (v41 != 0xFFFF)
      {
        v28 = v23[3] - v15;
        if (v28 >= v41)
        {
          v25 = v24;
          if (v28 > v41)
            break;
        }
      }
      ++v24;
      v23 = v26;
      if (a6 == v24)
      {
        v24 = v25;
        break;
      }
    }
LABEL_36:
    v42 = 0;
    *a10 = -1;
    if (v19 >= v24)
    {
      if (v24 != a6)
        return frompos_wordrec;
    }
    else
    {
      v31 = &a5[8 * v19 + 6];
      v32 = v24 - (unint64_t)v19;
      v33 = -1;
      do
      {
        if (*(v31 - 6) == 8)
        {
          v34 = *v31;
          if (*v31 != 29999)
          {
            if (v33 == -1)
            {
              v33 = 0;
              *a10 = 0;
              v34 = *v31;
            }
            v33 += v34;
            *a10 = v33;
          }
        }
        v31 += 8;
        --v32;
      }
      while (v32);
      if (v24 != a6)
        return frompos_wordrec;
      if (v33 != -1)
        goto LABEL_49;
    }
    *a10 = 0;
LABEL_49:
    paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"finalsentencefound", (unsigned int *)&v42);
    if ((_DWORD)v42 != 1)
    {
      paramc_ParamGetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"waitfactor", (unsigned int *)&v42 + 1);
      v35 = (uint64_t)&a5[8 * v24 + 6];
      v36 = v24 + 1;
      while ((int)--v36 >= 1)
      {
        v37 = (_DWORD *)(v35 - 32);
        v38 = *(_DWORD *)(v35 - 56);
        v35 -= 32;
        if (v38 == 25)
        {
          HIDWORD(v42) = *v37;
          paramc_ParamSetUInt(*(_QWORD *)(a1 + 40), (uint64_t)"waitfactor", HIDWORD(v42));
          break;
        }
      }
      v39 = *a10 + 200 * HIDWORD(v42);
      if (v39 < 0)
        v39 = 200;
      *a10 = v39;
    }
  }
  return frompos_wordrec;
}

void *loc_ComputeToneField(void *__src, size_t __n, void **a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  BOOL v10;

  v3 = __n;
  v4 = (unsigned __int8 *)*a3;
  cstdlib_memcpy(*a3, __src, __n);
  v5 = 0;
  if (v3)
  {
    v6 = v3;
    v7 = v4;
    do
    {
      v9 = *v7++;
      v8 = v9;
      if ((v9 - 49) < 5 || (v8 != 46 ? (v10 = v8 == 0) : (v10 = 1), v10))
        v4[v5++] = v8;
      --v6;
    }
    while (v6);
  }
  return cstdlib_memset(&v4[v5], 0, v3 - (unint64_t)v5);
}

uint64_t loc_ComputeStyleFieldsFromStyleMarkerArg(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4)
{
  const char *v6;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t result;
  char *v12;

  v6 = __s;
  v8 = cstdlib_strchr(__s, 59);
  if (v8)
  {
    v9 = v8 - v6;
    v10 = v8 + 1;
    if (v8 == v6)
      goto LABEL_6;
LABEL_5:
    if (cstdlib_strncmp(v6, "default", 7uLL))
      goto LABEL_7;
    goto LABEL_6;
  }
  v9 = cstdlib_strlen(v6);
  v10 = 0;
  if (v9)
    goto LABEL_5;
LABEL_6:
  v6 = "";
  v9 = cstdlib_strlen("");
LABEL_7:
  result = geene_adapt_common_DuplicateString_Num_FreeFirst(a1, v6, v9, a3);
  if ((result & 0x80000000) == 0)
  {
    if (v10)
      v12 = v10;
    else
      v12 = "";
    return geene_adapt_common_DuplicateString_FreeFirst(a1, v12, a4);
  }
  return result;
}

uint64_t loc_CheckPauseMarker(_DWORD *a1, unsigned int a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t i;
  unsigned int v14;
  int v15;

  if (!a2)
    return 0;
  if (*a1 == 0x4000)
    v7 = a1[3];
  else
    v7 = 0;
  v9 = 0;
  result = 0;
  *a6 = 0;
  *a5 = 0;
  v10 = v7 + a4;
  v11 = v7 + a3;
  v12 = a1 + 3;
  for (i = a2; i; --i)
  {
    v14 = *v12;
    if (v10 < *v12)
      break;
    v15 = *(v12 - 3);
    if (v15 == 8)
    {
      if (v11 <= v14 && v14 < v10)
      {
        v9 += v12[3];
        *a5 = v9;
        result = 1;
      }
    }
    else if (v15 == 26 && v11 <= v14 && v14 < v10)
    {
      if ((_DWORD)result == 1)
        *a6 = 1;
      return result;
    }
    v12 += 8;
  }
  return result;
}

uint64_t be_adapt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v5 = 2410684423;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v28);
    if ((inited & 0x80000000) == 0)
    {
      v10 = heap_Calloc(*(_QWORD **)(v28 + 8), 1, 656);
      if (v10)
      {
        v15 = v10;
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"LINGDB", &v27);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v27 + 8);
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v17 = v26;
        *(_QWORD *)(v15 + 32) = *(_QWORD *)(v26 + 8);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(v17 + 16);
        Object = objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v25);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v18 = v25;
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(v25 + 8);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)(v18 + 16);
        *(_QWORD *)(v15 + 80) = 0;
        *(_QWORD *)(v15 + 64) = safeh_GetNullHandle();
        *(_QWORD *)(v15 + 72) = v19;
        if ((objc_GetObject(*(_QWORD *)(v28 + 48), (uint64_t)"PHONMAP", &v24) & 0x80000000) == 0)
        {
          v20 = v24;
          *(_QWORD *)(v15 + 80) = *(_QWORD *)(v24 + 8);
          *(_OWORD *)(v15 + 64) = *(_OWORD *)(v20 + 16);
        }
        *(_QWORD *)v15 = v28;
        *(_DWORD *)(v15 + 88) = 0;
        *(_QWORD *)(v15 + 296) = a3;
        *(_QWORD *)(v15 + 304) = a4;
        Object = hlp_VoiceSetup_0(v15);
        if ((Object & 0x80000000) != 0)
        {
LABEL_13:
          v5 = Object;
        }
        else
        {
          v5 = globalbeadapt_SetFEBOOLKeyword((_QWORD *)v15, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(v15 + 280), 1);
          if ((v5 & 0x80000000) == 0)
          {
            v21 = 503;
LABEL_16:
            *(_QWORD *)a5 = v15;
            *(_DWORD *)(a5 + 8) = v21;
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v11, v12, v13, v14, v23);
        v5 = 2410684426;
      }
      be_adapt_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
      v15 = 0;
      v21 = 0;
      goto LABEL_16;
    }
    return inited;
  }
  return v5;
}

uint64_t hlp_VoiceSetup_0(uint64_t a1)
{
  uint64_t inited;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  const char *v24;
  char *v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  const char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  const char *v52;
  char *v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  const char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  _QWORD *v74;
  uint64_t *v75;
  int v76;
  char *v77;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  _QWORD *(*v82)(_QWORD *, _QWORD *);
  int v83;
  char *__s1;
  unsigned int v85;
  unsigned __int8 __c;
  __int16 __c_1;
  const char **__c_3;
  char v89[10];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  __c_3 = 0;
  __c_1 = 0;
  __c = 0;
  v85 = 0;
  __s1 = 0;
  v83 = 0;
  *(_DWORD *)(a1 + 636) = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voicelexicontraining", &__s1) & 0x80000000) == 0
    && __s1
    && !cstdlib_strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 636) = 1;
  }
  *(_DWORD *)(a1 + 264) = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", &v85) & 0x80000000) == 0
    && v85 == 1)
  {
    *(_DWORD *)(a1 + 264) = 1;
  }
  *(_DWORD *)(a1 + 248) = 0;
  __c_1 = 0;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "usetntag", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1 && __c_3 && **__c_3 == 49)
    *(_DWORD *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 252) = 0;
  __c_1 = 0;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "fecfg", "docclassmap", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1 && __c_3 && !cstdlib_strncmp(*__c_3, "yes", 3uLL))
    *(_DWORD *)(a1 + 252) = 1;
  inited = com_depes_InitLayers(*(_QWORD *)a1, a1 + 96);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(a1 + 224) = 0x3000200010000;
  *(_WORD *)(a1 + 232) = 4;
  if (*(_DWORD *)(a1 + 264))
  {
    v3 = 8;
    v4 = 7;
    v5 = 6;
    v6 = 5;
  }
  else
  {
    v6 = 0;
    v3 = 7;
    v4 = 6;
    v5 = 5;
  }
  *(_WORD *)(a1 + 234) = v6;
  *(_WORD *)(a1 + 238) = v5;
  *(_WORD *)(a1 + 240) = v4;
  v7 = v3 - (*(_DWORD *)(a1 + 248) == 0);
  *(_WORD *)(a1 + 236) = v7;
  *(_WORD *)(a1 + 106) = v7 + 1;
  inited = globalbeadapt_Init_SpecialSymbolsFromPhonmap(a1);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "pre_be_adapt");
  v9 = 1;
  if (!v8)
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), "post_be_adapt") != 0;
  *(_DWORD *)(a1 + 320) = v9;
  *(_DWORD *)(a1 + 312) = 1;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlex", a1 + 312);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_BYTE *)(a1 + 480) = 1;
  *(_DWORD *)(a1 + 316) = 1;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlexmw", a1 + 316);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_WORD *)(a1 + 632) = 513;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, int *))(*(_QWORD *)(a1 + 56) + 72))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", &v83);
  if ((v10 & 0x80000000) != 0)
    return v10;
  *(_OWORD *)(a1 + 640) = 0u;
  if (v83)
  {
    __c_1 = 2;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "loo", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0)
      return inited;
    if (__c_1 == 1)
    {
      v11 = cstdlib_strchr((char *)*__c_3, __c);
      if (v11)
        *v11 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v13 = cstdlib_strlen(*__c_3);
      v14 = (char *)heap_Alloc(v12, v13 + 1);
      *(_QWORD *)(a1 + 640) = v14;
      if (!v14)
        goto LABEL_143;
      cstdlib_strcpy(v14, *__c_3);
    }
    __c_1 = 2;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "loodiff", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (__c_1 == 1)
    {
      v19 = cstdlib_strchr((char *)*__c_3, __c);
      if (v19)
        *v19 = 0;
      v20 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v21 = cstdlib_strlen(*__c_3);
      v22 = (char *)heap_Alloc(v20, v21 + 1);
      *(_QWORD *)(a1 + 648) = v22;
      if (!v22)
        goto LABEL_143;
      cstdlib_strcpy(v22, *__c_3);
    }
  }
  if (*(_DWORD *)(a1 + 312))
  {
    __c_1 = 2;
    inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "nrdctpart", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0)
      return inited;
    if (__c_1 == 1)
    {
      v23 = cstdlib_strchr((char *)*__c_3, __c);
      if (v23)
        *v23 = 0;
      *(_BYTE *)(a1 + 480) = cstdlib_atoi((unsigned __int8 *)*__c_3);
    }
    __c_1 = 2;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "fn", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0)
      return v10;
    if (__c_1 == 1)
    {
      v24 = *__c_3;
      v25 = cstdlib_strchr((char *)*__c_3, 59);
      if (v25)
      {
        v26 = v25;
        do
        {
          *v26 = 0;
          v27 = *(unsigned __int8 *)(a1 + 324);
          *(_BYTE *)(a1 + 324) = v27 + 1;
          cstdlib_strcpy((char *)(a1 + 10 * v27 + 325), v24);
          v24 = v26 + 1;
          v26 = cstdlib_strchr(v26 + 1, 59);
        }
        while (v26);
      }
      v28 = *(unsigned __int8 *)(a1 + 324);
      *(_BYTE *)(a1 + 324) = v28 + 1;
      cstdlib_strcpy((char *)(a1 + 10 * v28 + 325), v24);
      __c_1 = 2;
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", "ft", &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0)
        return v10;
      if (__c_1 == 1)
      {
        v29 = *__c_3;
        v30 = cstdlib_strchr((char *)*__c_3, 59);
        *(_BYTE *)(a1 + 324) = 0;
        if (v30)
        {
          v31 = v30;
          while (1)
          {
            *v31 = 0;
            if (!cstdlib_strcmp(v29, "NLU"))
              break;
            if (!cstdlib_strcmp(v29, "PRM"))
            {
              v32 = 1;
              goto LABEL_64;
            }
            if (!cstdlib_strcmp(v29, "BND"))
            {
              v32 = 2;
              goto LABEL_64;
            }
            if (!cstdlib_strcmp(v29, "LNG"))
            {
              v32 = 3;
LABEL_64:
              v33 = *(unsigned __int8 *)(a1 + 324);
              *(_BYTE *)(a1 + 324) = v33 + 1;
              *(_DWORD *)(a1 + 4 * v33 + 428) = v32;
            }
            v29 = v31 + 1;
            v31 = cstdlib_strchr(v31 + 1, 59);
            if (!v31)
              goto LABEL_66;
          }
          v32 = 0;
          goto LABEL_64;
        }
LABEL_66:
        if (cstdlib_strcmp(v29, "NLU"))
        {
          if (cstdlib_strcmp(v29, "PRM"))
          {
            if (cstdlib_strcmp(v29, "BND"))
            {
              v34 = cstdlib_strcmp(v29, "LNG");
              v35 = *(unsigned __int8 *)(a1 + 324);
              if (!v34)
              {
                v36 = a1 + 4 * v35;
                LOBYTE(v35) = v35 + 1;
                *(_BYTE *)(a1 + 324) = v35;
                *(_DWORD *)(v36 + 428) = 3;
              }
              goto LABEL_76;
            }
            v41 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v35) = v41 + 1;
            *(_BYTE *)(a1 + 324) = v41 + 1;
            v39 = a1 + 4 * v41;
            v40 = 2;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v35) = v38 + 1;
            *(_BYTE *)(a1 + 324) = v38 + 1;
            v39 = a1 + 4 * v38;
            v40 = 1;
          }
          *(_DWORD *)(v39 + 428) = v40;
        }
        else
        {
          v37 = *(unsigned __int8 *)(a1 + 324);
          LOBYTE(v35) = v37 + 1;
          *(_BYTE *)(a1 + 324) = v37 + 1;
          *(_DWORD *)(a1 + 4 * v37 + 428) = 0;
        }
      }
      else
      {
        LOBYTE(v35) = *(_BYTE *)(a1 + 324);
      }
LABEL_76:
      v42 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8 * v35);
      *(_QWORD *)(a1 + 472) = v42;
      if (!v42)
      {
LABEL_143:
        v10 = 2410684426;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v15, v16, v17, v18, v79);
        return v10;
      }
      if (*(_BYTE *)(a1 + 324))
      {
        v43 = 0;
        v44 = xmmword_24D293170;
        v45 = *(_OWORD *)off_24D293180;
        v79 = off_24D293180[0];
        do
        {
          v46 = *(_QWORD **)(*(_QWORD *)a1 + 8);
          v47 = (uint64_t *)(*(_QWORD *)(a1 + 472) + 8 * v43);
          v80 = v44;
          v81 = v45;
          v82 = ssftmap_ElemFreeString;
          inited = ssftmap_ObjOpen(v46, 0, &v80, v47);
          if ((inited & 0x80000000) != 0)
            return inited;
          __c_1 = 2;
          LH_itoa(1u, v89, 0xAu);
          cstdlib_strcat(v89, (const char *)(a1 + 10 * v43 + 325));
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", v89, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0)
            return v10;
          if (__c_1)
          {
            v48 = 1;
            do
            {
              v49 = cstdlib_strchr((char *)*__c_3, 59);
              if (v49)
              {
                *v49 = 0;
                inited = ssftmap_Insert(*(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v43), (uint64_t)*__c_3, (uint64_t)(v49 + 1));
                if ((inited & 0x80000000) != 0)
                  return inited;
              }
              __c_1 = 2;
              LH_itoa((unsigned __int16)++v48, v89, 0xAu);
              cstdlib_strcat(v89, (const char *)(a1 + 10 * v43 + 325));
              v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfg", v89, &__c_3, &__c_1, &__c);
              if ((v10 & 0x80000000) != 0)
                return v10;
            }
            while (__c_1);
          }
          ++v43;
          v45 = *(_OWORD *)off_24D293180;
          v44 = xmmword_24D293170;
        }
        while (v43 < *(unsigned __int8 *)(a1 + 324));
      }
    }
  }
  if (!*(_DWORD *)(a1 + 316))
    return v10;
  __c_1 = 2;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "nrdctpart", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1)
  {
    v50 = cstdlib_strchr((char *)*__c_3, __c);
    if (v50)
      *v50 = 0;
    *(_BYTE *)(a1 + 632) = cstdlib_atoi((unsigned __int8 *)*__c_3);
  }
  __c_1 = 2;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "maxnrword", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (__c_1 == 1)
  {
    v51 = cstdlib_strchr((char *)*__c_3, __c);
    if (v51)
      *v51 = 0;
    *(_BYTE *)(a1 + 633) = cstdlib_atoi((unsigned __int8 *)*__c_3);
  }
  __c_1 = 2;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "fn", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0 || __c_1 != 1)
    return v10;
  v52 = *__c_3;
  v53 = cstdlib_strchr((char *)*__c_3, 59);
  if (v53)
  {
    v54 = v53;
    do
    {
      *v54 = 0;
      v55 = *(unsigned __int8 *)(a1 + 481);
      *(_BYTE *)(a1 + 481) = v55 + 1;
      cstdlib_strcpy((char *)(a1 + 10 * v55 + 482), v52);
      v52 = v54 + 1;
      v54 = cstdlib_strchr(v54 + 1, 59);
    }
    while (v54);
  }
  v56 = *(unsigned __int8 *)(a1 + 481);
  *(_BYTE *)(a1 + 481) = v56 + 1;
  cstdlib_strcpy((char *)(a1 + 10 * v56 + 482), v52);
  __c_1 = 2;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", "ft", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0)
    return v10;
  if (__c_1 != 1)
  {
    LOBYTE(v63) = *(_BYTE *)(a1 + 481);
    goto LABEL_128;
  }
  v57 = *__c_3;
  v58 = cstdlib_strchr((char *)*__c_3, 59);
  *(_BYTE *)(a1 + 481) = 0;
  if (v58)
  {
    v59 = v58;
    while (1)
    {
      *v59 = 0;
      if (!cstdlib_strcmp(v57, "NLU"))
        break;
      if (!cstdlib_strcmp(v57, "PRM"))
      {
        v60 = 1;
        goto LABEL_116;
      }
      if (!cstdlib_strcmp(v57, "BND"))
      {
        v60 = 2;
        goto LABEL_116;
      }
      if (!cstdlib_strcmp(v57, "LNG"))
      {
        v60 = 3;
LABEL_116:
        v61 = *(unsigned __int8 *)(a1 + 481);
        *(_BYTE *)(a1 + 481) = v61 + 1;
        *(_DWORD *)(a1 + 4 * v61 + 584) = v60;
      }
      v57 = v59 + 1;
      v59 = cstdlib_strchr(v59 + 1, 59);
      if (!v59)
        goto LABEL_118;
    }
    v60 = 0;
    goto LABEL_116;
  }
LABEL_118:
  if (!cstdlib_strcmp(v57, "NLU"))
  {
    v65 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v63) = v65 + 1;
    *(_BYTE *)(a1 + 481) = v65 + 1;
    *(_DWORD *)(a1 + 4 * v65 + 584) = 0;
    goto LABEL_128;
  }
  if (!cstdlib_strcmp(v57, "PRM"))
  {
    v66 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v63) = v66 + 1;
    *(_BYTE *)(a1 + 481) = v66 + 1;
    v67 = a1 + 4 * v66;
    v68 = 1;
LABEL_127:
    *(_DWORD *)(v67 + 584) = v68;
    goto LABEL_128;
  }
  if (!cstdlib_strcmp(v57, "BND"))
  {
    v69 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v63) = v69 + 1;
    *(_BYTE *)(a1 + 481) = v69 + 1;
    v67 = a1 + 4 * v69;
    v68 = 2;
    goto LABEL_127;
  }
  v62 = cstdlib_strcmp(v57, "LNG");
  v63 = *(unsigned __int8 *)(a1 + 481);
  if (!v62)
  {
    v64 = a1 + 4 * v63;
    LOBYTE(v63) = v63 + 1;
    *(_BYTE *)(a1 + 481) = v63;
    *(_DWORD *)(v64 + 584) = 3;
  }
LABEL_128:
  v70 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8 * v63);
  *(_QWORD *)(a1 + 624) = v70;
  if (!v70)
    goto LABEL_143;
  if (*(_BYTE *)(a1 + 481))
  {
    v71 = 0;
    v72 = xmmword_24D293170;
    v73 = *(_OWORD *)off_24D293180;
    while (1)
    {
      v74 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      v75 = (uint64_t *)(*(_QWORD *)(a1 + 624) + 8 * v71);
      v80 = v72;
      v81 = v73;
      v82 = ssftmap_ElemFreeString;
      inited = ssftmap_ObjOpen(v74, 0, &v80, v75);
      if ((inited & 0x80000000) != 0)
        return inited;
      __c_1 = 2;
      LH_itoa(1u, v89, 0xAu);
      cstdlib_strcat(v89, (const char *)(a1 + 10 * v71 + 482));
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", v89, &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0)
        return v10;
      if (__c_1)
      {
        v76 = 1;
        do
        {
          v77 = cstdlib_strchr((char *)*__c_3, 59);
          if (v77)
          {
            *v77 = 0;
            inited = ssftmap_Insert(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * v71), (uint64_t)*__c_3, (uint64_t)(v77 + 1));
            if ((inited & 0x80000000) != 0)
              return inited;
          }
          __c_1 = 2;
          LH_itoa((unsigned __int16)++v76, v89, 0xAu);
          cstdlib_strcat(v89, (const char *)(a1 + 10 * v71 + 482));
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(_QWORD *)(a1 + 56) + 96))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptcfgmw", v89, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0)
            return v10;
        }
        while (__c_1);
      }
      ++v71;
      v73 = *(_OWORD *)off_24D293180;
      v72 = xmmword_24D293170;
      if (v71 >= *(unsigned __int8 *)(a1 + 481))
        return v10;
    }
  }
  return v10;
}

uint64_t be_adapt_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0)
    return 2410684424;
  if (a1)
  {
    globalbeadapt_DeInit_SpecialSymbolsFromPhonmap(a1);
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
    if (a1[4])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    if (a1[10])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"PHONMAP");
    FreeFeatureMaps(a1);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t be_adapt_ObjReopen(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0)
    return 2410684424;
  if (a1)
  {
    FreeFeatureMaps(a1);
    return hlp_VoiceSetup_0((uint64_t)a1);
  }
  return result;
}

_QWORD *FreeFeatureMaps(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[59];
  if (v2)
  {
    v3 = *((unsigned __int8 *)result + 324);
    if (*((_BYTE *)result + 324))
    {
      v4 = 0;
      do
      {
        v5 = v1[59];
        v6 = *(_QWORD *)(v5 + 8 * v4);
        if (v6)
        {
          ssftmap_ObjClose(v6);
          v5 = v1[59];
          v3 = *((unsigned __int8 *)v1 + 324);
        }
        *(_QWORD *)(v5 + 8 * v4++) = 0;
      }
      while (v4 < v3);
      v2 = v1[59];
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v2);
    *((_BYTE *)v1 + 324) = 0;
    v1[59] = 0;
  }
  v7 = v1[78];
  if (v7)
  {
    v8 = *((unsigned __int8 *)v1 + 481);
    if (*((_BYTE *)v1 + 481))
    {
      v9 = 0;
      do
      {
        v10 = v1[78];
        v11 = *(_QWORD *)(v10 + 8 * v9);
        if (v11)
        {
          ssftmap_ObjClose(v11);
          v10 = v1[78];
          v8 = *((unsigned __int8 *)v1 + 481);
        }
        *(_QWORD *)(v10 + 8 * v9++) = 0;
      }
      while (v9 < v8);
      v7 = v1[78];
    }
    result = heap_Free(*(_QWORD **)(*v1 + 8), v7);
    *((_BYTE *)v1 + 481) = 0;
    v1[78] = 0;
  }
  v12 = v1[80];
  if (v12)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v12);
    v1[80] = 0;
  }
  v13 = v1[81];
  if (v13)
  {
    result = heap_Free(*(_QWORD **)(*v1 + 8), v13);
    v1[81] = 0;
  }
  return result;
}

uint64_t be_adapt_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0)
    return result;
  else
    return 2410684424;
}

uint64_t hlp_CntNrPhonWord(_BYTE *a1)
{
  _BYTE *v1;
  unsigned __int8 v2;

  if (*a1)
    v1 = a1 + 1;
  else
    v1 = a1;
  v2 = 1;
  while (*v1 == 95)
  {
    ++v2;
LABEL_9:
    ++v1;
  }
  if (*v1)
    goto LABEL_9;
  return v2;
}

uint64_t hlp_CntNrHyphen(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  int v5;

  if (a2 >= a3)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = (unsigned __int8 *)(a1 + a2);
    do
    {
      v5 = *v4++;
      if (v5 == 45)
        ++v3;
    }
    while ((unint64_t)v4 < a1 + (unint64_t)a3);
  }
  return v3;
}

uint64_t be_adapt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  size_t v33;
  __int16 v34;
  unsigned __int16 v35;
  size_t v36;
  int v37;
  unsigned __int8 v38;
  size_t v39;
  int v41;
  char v42;
  __int16 v43;
  char **v44;
  unsigned int v45;
  unsigned __int16 v46;
  __int16 v47;
  unsigned __int16 v48;
  char *v49;
  __int16 v50;
  int v51;
  const char *v52;
  unsigned int v53;
  int v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  unsigned int v57;
  char *v58;
  __int16 v59;
  unsigned __int16 v60;
  char __s[256];
  char __dst[128];
  char __s2[256];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  v43 = 2;
  if ((safeh_HandleCheck(a1, a2, 503, 656) & 0x80000000) != 0)
    return 2410684424;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v42 = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 104);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_99;
  updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v51 + 2);
  if ((updated & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(*(_QWORD *)(a1 + 8) + 184))(a3, a4, HIWORD(v51), 0, &v47) & 0x80000000) == 0&& v47 == 1)
  {
    updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, int *))(*(_QWORD *)(a1 + 8)
                                                                                                + 176))(a3, a4, HIWORD(v51), 0, &v52, &v51);
    if ((updated & 0x80000000) == 0 && (unsigned __int16)v51 >= 2u)
    {
      updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, __int16 *))(*(_QWORD *)(a1 + 8) + 160))(a3, a4, HIWORD(v51), 2, 1, "", &v50);
      if ((updated & 0x80000000) != 0)
        goto LABEL_100;
      if (!*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 320))
      {
LABEL_27:
        if (*(_QWORD *)(a1 + 640) && *(_QWORD *)(a1 + 648) && *(_QWORD *)(a1 + 80))
          hlp_DifferentiatorLOO((_QWORD *)a1, a3, a4, HIWORD(v51));
        goto LABEL_100;
      }
      *(_DWORD *)(a1 + 268) = 0;
      cstdlib_strcpy(__dst, "pre_be_adapt");
      v9 = globalbeadapt_SetupDepesInput((_QWORD *)a1, a3, a4, HIWORD(v51), (uint64_t)__dst, 1, v11, v12);
      if ((v9 & 0x80000000) == 0)
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), __dst) & 0x80000000) != 0|| (v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32)+ 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &v49, &v48), (v9 & 0x80000000) == 0)&& (v49[v48] = 0, v9 = globalbeadapt_DoPostprocessing((uint64_t *)a1, v52, &v49, 0), (v9 & 0x80000000) == 0)&& (v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 320))(a3, a4, 0), (v9 & 0x80000000) == 0)&& (log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0,
                (uint64_t)"%s O1: %s",
                v13,
                v14,
                v15,
                (uint64_t)__dst),
              v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v51), (uint64_t)v52, v49),
              (v9 & 0x80000000) == 0))
        {
          com_depes_FreeLayers(*(_QWORD *)a1, a1 + 96);
          if (*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 636))
          {
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8)
                                                                                                  + 104))(a3, a4, 2, HIWORD(v51), &v46);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_99;
            while (v46)
            {
              updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
              if ((updated & 0x80000000) != 0)
                goto LABEL_100;
              if (v45 <= 0xA && ((1 << v45) & 0x610) != 0)
              {
                v41 = 0;
                v22 = *(unsigned __int8 *)(a1 + 633);
                if (*(_BYTE *)(a1 + 633))
                {
                  while (1)
                  {
                    v23 = v46;
                    v24 = v52;
                    v56 = v46;
                    v55 = 0;
                    v53 = 0;
                    v54 = 0;
                    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v46, 1, 1, &v55, &v54);
                    if ((v9 & 0x80000000) != 0)
                      goto LABEL_99;
                    updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v23, 2, 1, (char *)&v54 + 2, &v54);
                    if ((updated & 0x80000000) != 0)
                      goto LABEL_100;
                    v28 = HIWORD(v54) - (unint64_t)v55;
                    if ((int)v28 < 256)
                    {
                      cstdlib_strncpy(__s, &v24[v55], v28);
                      v30 = HIWORD(v54);
                      v31 = v55;
                      __s[HIWORD(v54) - v55] = 0;
                      v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", __s, (unsigned __int16)(v30 - v31));
                      if ((v9 & 0x80000000) != 0)
                        goto LABEL_99;
                      v29 = 1;
                      if (v22 >= 2u && (_DWORD)v23)
                      {
                        v32 = v23;
                        while (1)
                        {
                          v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, v32, &v56);
                          if ((v9 & 0x80000000) != 0)
                            goto LABEL_99;
                          if (v56)
                          {
                            v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                            if ((v9 & 0x80000000) != 0)
                              goto LABEL_99;
                            if (v53 - 11 < 5)
                              break;
                            if (v53 <= 0xA && ((1 << v53) & 0x610) != 0)
                            {
                              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v56, 1, 1, &v55, &v54);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(*(_QWORD *)(a1 + 8) + 168))(a3, a4, v56, 2, 1, (char *)&v54 + 2, &v54);
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              v33 = cstdlib_strlen(__s);
                              if (v33 + HIWORD(v54) - v55 - 255 < 0xFFFFFFFFFFFFFF00)
                                break;
                              cstdlib_strncpy(__s2, &v24[v55], HIWORD(v54) - (unint64_t)v55);
                              v34 = HIWORD(v54);
                              v35 = v55;
                              __s2[HIWORD(v54) - v55] = 0;
                              v9 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", __s2, (unsigned __int16)(v34 - v35));
                              if ((v9 & 0x80000000) != 0)
                                goto LABEL_99;
                              cstdlib_strcat(__s, "_");
                              cstdlib_strcat(__s, __s2);
                              ++v29;
                            }
                          }
                          if (v29 < v22)
                          {
                            v32 = v56;
                            if (v56)
                              continue;
                          }
                          break;
                        }
                      }
                      v60 = v23;
                      v59 = 0;
                      v58 = 0;
                      v57 = 0;
                      updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, v23, 3, &v58, &v59);
                      if ((updated & 0x80000000) != 0)
                        goto LABEL_100;
                      v36 = cstdlib_strlen(__s);
                      if (v36 + cstdlib_strlen(v58) - 255 >= 0xFFFFFFFFFFFFFF00)
                      {
                        cstdlib_strcat(__s, ":");
                        cstdlib_strcat(__s, v58);
                        if ((_DWORD)v23 && v29 >= 2u)
                        {
                          v38 = 1;
                          while (1)
                          {
                            updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 8) + 120))(a3, a4, (unsigned __int16)v23, &v60);
                            if ((updated & 0x80000000) != 0)
                              goto LABEL_100;
                            if (v60)
                            {
                              updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 168))(a3, a4);
                              if ((updated & 0x80000000) != 0)
                                goto LABEL_100;
                              if (v57 <= 0xA && ((1 << v57) & 0x610) != 0)
                              {
                                updated = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(*(_QWORD *)(a1 + 8) + 176))(a3, a4, v60, 3, &v58, &v59);
                                if ((updated & 0x80000000) != 0)
                                  goto LABEL_100;
                                v39 = cstdlib_strlen(__s);
                                if (v39 + cstdlib_strlen(v58) - 255 < 0xFFFFFFFFFFFFFF00)
                                  goto LABEL_63;
                                ++v38;
                                cstdlib_strcat(__s, "_");
                                cstdlib_strcat(__s, v58);
                              }
                            }
                            if (v38 < v29)
                            {
                              LOWORD(v23) = v60;
                              if (v60)
                                continue;
                            }
                            break;
                          }
                        }
                      }
                      else
                      {
LABEL_63:
                        __s[0] = 0;
                      }
                    }
                    else
                    {
                      __s[0] = 0;
                      v29 = v22;
                    }
                    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"voice lexicon key= %s", v25, v26, v27, (uint64_t)__s);
                    v37 = 0;
                    if (v29 == 1 && __s[0])
                    {
                      v43 = 2;
                      updated = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 152))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlex", __s, &v44, &v43, &v42, *(unsigned __int8 *)(a1 + 480));
                      if ((updated & 0x80000000) != 0)
                        goto LABEL_100;
                      if (v43 == 1)
                      {
                        v41 = 1;
                        updated = hlp_UpdateLdb((_QWORD *)a1, a3, a4, &v46, *v44, 1u, 0, &v41, (uint64_t)v52);
                        if ((updated & 0x80000000) != 0)
                          goto LABEL_100;
                        v37 = v41;
                      }
                      else
                      {
                        v37 = 0;
                      }
                    }
                    if (__s[0])
                    {
                      if (!v37)
                      {
                        v37 = *(_DWORD *)(a1 + 316);
                        if (v37)
                        {
                          v43 = 2;
                          updated = (*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, char ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 56) + 152))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "adaptlexmw", __s, &v44, &v43, &v42, *(unsigned __int8 *)(a1 + 632));
                          if ((updated & 0x80000000) != 0)
                            goto LABEL_100;
                          if (v43 == 1)
                          {
                            v41 = 1;
                            updated = hlp_UpdateLdb((_QWORD *)a1, a3, a4, &v46, *v44, v29, 1, &v41, (uint64_t)v52);
                            if ((updated & 0x80000000) != 0)
                              goto LABEL_100;
                            v37 = v41;
                          }
                          else
                          {
                            v37 = 0;
                          }
                        }
                      }
                    }
                    v22 = v29 - 1;
                    if ((_BYTE)v29 == 1 || v37)
                      break;
                  }
                }
              }
              if (v46)
                updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 120))(a3, a4);
              if ((updated & 0x80000000) != 0)
                goto LABEL_100;
            }
          }
          cstdlib_strcpy(__dst, "post_be_adapt");
          v9 = globalbeadapt_SetupDepesInput((_QWORD *)a1, a3, a4, HIWORD(v51), (uint64_t)__dst, 0, v16, v17);
          if ((v9 & 0x80000000) == 0)
          {
            if (!*(_DWORD *)(a1 + 636))
              (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 80))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), __dst);
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char **, unsigned __int16 *))(*(_QWORD *)(a1 + 32)
                                                                                                + 128))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0, &v49, &v48);
            if ((v9 & 0x80000000) == 0)
            {
              v49[v48] = 0;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"%s O1: %s", v18, v19, v20, (uint64_t)__dst);
              v9 = globalbeadapt_DoPostprocessing((uint64_t *)a1, v52, &v49, 1);
              if ((v9 & 0x80000000) == 0)
              {
                v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 320))(a3, a4, 1);
                if ((v9 & 0x80000000) == 0)
                {
                  v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v51), (uint64_t)v52, v49);
                  if ((v9 & 0x80000000) == 0)
                  {
                    updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 272))(a3, a4, 4, 1, 0, 0);
                    if ((updated & 0x80000000) == 0)
                      goto LABEL_27;
LABEL_100:
                    com_depes_FreeLayers(*(_QWORD *)a1, a1 + 96);
                    return updated;
                  }
                }
              }
            }
          }
        }
      }
LABEL_99:
      updated = v9;
      goto LABEL_100;
    }
  }
  return updated;
}

uint64_t hlp_UpdateLdb(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, char *a5, unsigned int a6, int a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  int v46;
  char *v47;
  char *v48;
  unsigned __int16 v49;
  unsigned __int8 v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned __int16 v57;
  char *v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int16 v61;
  char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _DWORD *v69;
  unsigned int v70;
  __int16 v71;
  char *v72;
  unsigned __int16 v73;
  int v74;
  unsigned __int16 v75;
  unsigned __int16 v76;
  unsigned int v77;
  uint64_t *v78;
  char *__s;
  char *__s2;
  char *__s1;
  char *v82;
  __int16 v83;
  _WORD __b[10];
  char __dst[256];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v83 = 0;
  __s1 = 0;
  v82 = 0;
  __s = 0;
  __s2 = 0;
  v78 = 0;
  v77 = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 3, &__s, &v83);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v69 = a8;
  v70 = a6;
  v18 = 481;
  if (a7)
  {
    v19 = a1 + 73;
  }
  else
  {
    v18 = 324;
    v19 = (_QWORD *)((char *)a1 + 428);
  }
  v20 = 78;
  if (!a7)
    v20 = 59;
  v21 = a1[v20];
  v22 = *((unsigned __int8 *)a1 + v18);
  cstdlib_memset(__b, 0, 0x14uLL);
  cstdlib_strcpy(__dst, "|");
  if (v22)
  {
    for (i = 0; i != v22; ++i)
    {
      if (i)
      {
        cstdlib_strcat(__dst, ":");
        __b[i] = cstdlib_strlen(__dst);
      }
      switch(*((_DWORD *)v19 + i))
      {
        case 0:
          v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v83);
          if ((v17 & 0x80000000) == 0)
          {
            if ((ssftmap_IteratorOpen(*(_QWORD *)(v21 + 8 * i), 0, 0, (uint64_t)&v78) & 0x80000000) == 0)
            {
              while ((ssftmap_IteratorNext(v78, &v82, &__s2) & 0x80000000) == 0)
              {
                if (cstdlib_strstr(__s1, v82))
                  cstdlib_strcat(__dst, __s2);
              }
              ssftmap_IteratorClose((uint64_t)v78);
            }
            continue;
          }
          return v17;
        case 1:
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 13, &v82, &v83);
          goto LABEL_31;
        case 2:
          v75 = 0;
          v74 = 0;
          v73 = 3;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, (char *)&v74 + 2, &v83);
          if ((v24 & 0x80000000) != 0)
            return v24;
          LOWORD(v74) = *a4;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
          break;
        case 3:
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 9, &v82, &v83);
LABEL_31:
          if ((v24 & 0x80000000) != 0)
            return v24;
          v17 = ssftmap_Find(*(_QWORD *)(v21 + 8 * i), (uint64_t)v82, &__s2);
          if ((v17 & 0x80000000) != 0 || (v26 = __s2) == 0)
            v26 = v82;
          goto LABEL_35;
        default:
          continue;
      }
      while (1)
      {
        if ((v24 & 0x80000000) != 0)
          return v24;
        if (!(_WORD)v74 || v75 > HIWORD(v74))
          break;
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
        if ((v24 & 0x80000000) != 0)
          return v24;
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v74, 1, 1, &v75, &v83);
        if ((v24 & 0x80000000) != 0)
          return v24;
        if (v77 == 15)
        {
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v74, 7, 1, &v73, &v83);
          if ((v24 & 0x80000000) != 0)
            return v24;
        }
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
      }
      if ((_WORD)v74)
      {
        v27 = v73;
      }
      else
      {
        v27 = 0;
        v73 = 0;
      }
      LH_itoa(v27, (char *)&v76, 0xAu);
      v28 = ssftmap_Find(*(_QWORD *)(v21 + 8 * i), (uint64_t)&v76, &__s2);
      v17 = v28;
      if (__s2)
        v29 = (int)v28 <= -1;
      else
        v29 = 1;
      if (v29)
        v26 = (char *)&v76;
      else
        v26 = __s2;
LABEL_35:
      cstdlib_strcat(__dst, v26);
    }
  }
  cstdlib_strcat(__dst, ";");
  v30 = cstdlib_strstr(a5, __dst);
  if (!v30 && (_DWORD)v22)
  {
    do
    {
      __dst[(unsigned __int16)__b[(v22 - 1)]] = 0;
      v30 = cstdlib_strstr(a5, __dst);
      if (v30)
        break;
      LODWORD(v22) = v22 - 1;
    }
    while ((_BYTE)v22);
  }
  if (!v30)
    v30 = a5;
  v31 = cstdlib_strchr(v30, 59);
  if (v31)
  {
    v32 = v31 + 1;
    v33 = cstdlib_strchr(v31 + 1, 124);
    if (v33)
    {
      *v33 = 0;
      __s = v32;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"adapted transcription= %s", v34, v35, v36, (uint64_t)v32);
    }
  }
  v37 = *__s != 0;
  v38 = 1;
  while (__s[v37] == 95)
  {
    ++v38;
LABEL_62:
    ++v37;
  }
  if (__s[v37])
    goto LABEL_62;
  if (v70 != 1)
  {
    if (v38 == 1)
    {
      v40 = *a4;
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, v40, 14, &__s1, &v83);
      if ((v17 & 0x80000000) != 0)
        return v17;
      if (!cstdlib_strstr(__s1, "E_") && !cstdlib_strstr(__s1, "e_"))
      {
        if (v70 >= 2)
        {
          v59 = 1;
          v60 = 1;
          while (*a4)
          {
            v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
            if ((v24 & 0x80000000) != 0)
              return v24;
            if (*a4)
            {
              v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
              if ((v24 & 0x80000000) != 0)
                return v24;
              if (v77 <= 0xA && ((1 << v77) & 0x610) != 0)
              {
                v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v83);
                if ((v17 & 0x80000000) != 0)
                  return v17;
                if (v70 - 1 != v59 && (cstdlib_strstr(__s1, "E_") || cstdlib_strstr(__s1, "e_"))
                  || cstdlib_strstr(__s1, "S_")
                  || cstdlib_strstr(__s1, "s_")
                  || cstdlib_strstr(__s1, "B-"))
                {
                  *a4 = v40;
                  goto LABEL_152;
                }
                ++v60;
              }
            }
            v59 = v60;
            if (v60 >= v70)
              break;
          }
        }
        v17 = hlp_AdjustWordRecord(a1, a2, a3, v40, __s);
        if ((v17 & 0x80000000) == 0)
        {
          *a4 = v40;
          if (v70 >= 2)
          {
            if ((_DWORD)v40)
            {
              v41 = 1;
              v42 = v40;
              do
              {
                v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v42, a4);
                if ((v17 & 0x80000000) != 0)
                  break;
                if (*a4)
                {
                  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                  if ((v17 & 0x80000000) != 0)
                    break;
                  if (v77 <= 0xA && ((1 << v77) & 0x610) != 0)
                  {
                    v17 = hlp_DeleteWordRecord(a1, a2, a3, a4, v40, a9);
                    if ((v17 & 0x80000000) != 0)
                      break;
                    if (v70 <= ++v41)
                      break;
                  }
                }
                v42 = *a4;
              }
              while (*a4);
            }
          }
        }
        return v17;
      }
    }
    else if (v70 == v38)
    {
      v47 = cstdlib_strchr(__s, 95);
      v48 = v47;
      if (v47)
        *v47 = 0;
      v17 = hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
      if ((v17 & 0x80000000) == 0 && v70 >= 2)
      {
        v49 = *a4;
        if (*a4)
        {
          if (v48)
          {
            v50 = 1;
            while (1)
            {
              v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v49, a4);
              if ((v17 & 0x80000000) != 0)
                break;
              if (*a4)
              {
                v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                v51 = v70;
                if ((v17 & 0x80000000) != 0)
                  return v17;
                if (v77 <= 0xA && ((1 << v77) & 0x610) != 0)
                {
                  __s = v48 + 1;
                  v52 = cstdlib_strchr(v48 + 1, 95);
                  v48 = v52;
                  if (v52)
                    *v52 = 0;
                  v17 = hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
                  if ((v17 & 0x80000000) != 0)
                    return v17;
                  ++v50;
                }
              }
              else
              {
                v51 = v70;
              }
              if (v51 > v50)
              {
                v49 = *a4;
                if (*a4)
                {
                  if (v48)
                    continue;
                }
              }
              return v17;
            }
          }
        }
      }
      return v17;
    }
    *v69 = 0;
    return v17;
  }
  v39 = v38 - 1;
  if (v38 == 1)
    return hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
  v76 = 0;
  HIWORD(v74) = 0;
  v43 = *a4;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, &v76, &v83);
  if ((v24 & 0x80000000) != 0)
    return v24;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 2, 1, (char *)&v74 + 2, &v83);
  if ((v17 & 0x80000000) == 0)
  {
    if (v76 >= HIWORD(v74))
    {
      v44 = 0;
    }
    else
    {
      v44 = 0;
      v45 = (unsigned __int8 *)(a9 + v76);
      do
      {
        v46 = *v45++;
        if (v46 == 45)
          ++v44;
      }
      while ((unint64_t)v45 < a9 + (unint64_t)HIWORD(v74));
    }
    if (v39 == v44)
    {
      v53 = cstdlib_strchr(__s, 95);
      v54 = v53;
      if (v53)
        *v53 = 0;
      v24 = hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
      if ((v24 & 0x80000000) != 0)
        return v24;
      v55 = cstdlib_strchr((char *)(a9 + v76), 45);
      if (v55)
      {
        *v55 = 32;
        v71 = (_WORD)v55 - a9 + 1;
      }
      else
      {
        v71 = 0;
      }
      v75 = v76;
      v56 = *a4;
      if (*a4)
      {
        v57 = *a4;
        do
        {
          v43 = v57;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 120))(a2, a3, v57, a4);
          if ((v24 & 0x80000000) != 0)
            return v24;
          if (!*a4)
            break;
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
          if ((v24 & 0x80000000) != 0)
            return v24;
          v57 = *a4;
        }
        while (*a4 && v75 == v76);
      }
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 80))(a2, a3, v43, a4);
      if ((v24 & 0x80000000) != 0)
        return v24;
      v24 = hlp_CopyWordRec_0(a1, a2, a3, v56, *a4, v71);
      if ((v24 & 0x80000000) != 0)
        return v24;
      if (v54)
      {
        v58 = v54 + 1;
        __s = v54 + 1;
      }
      else
      {
        v58 = __s;
      }
      v61 = v71;
      v62 = cstdlib_strchr(v58, 95);
      if (v62)
        *v62 = 0;
      v72 = v62;
      v17 = hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
      if ((v17 & 0x80000000) == 0)
      {
        v76 = v61;
        if (v44 >= 2u)
        {
          v63 = 1;
          while (1)
          {
            v64 = cstdlib_strchr((char *)(a9 + v61), 45);
            if (v64)
            {
              *v64 = 32;
              v61 = (_WORD)v64 - a9 + 1;
            }
            v65 = *a4;
            v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 80))(a2, a3, v65, a4);
            if ((v24 & 0x80000000) != 0)
              break;
            v24 = hlp_CopyWordRec_0(a1, a2, a3, v65, *a4, v61);
            if ((v24 & 0x80000000) != 0)
              break;
            if (v72)
            {
              v66 = v72 + 1;
              __s = v72 + 1;
            }
            else
            {
              v66 = __s;
            }
            v67 = cstdlib_strchr(v66, 95);
            if (v67)
              *v67 = 0;
            v72 = v67;
            v17 = hlp_AdjustWordRecord(a1, a2, a3, *a4, __s);
            if ((v17 & 0x80000000) == 0)
            {
              v76 = v61;
              if (++v63 < v44)
                continue;
            }
            return v17;
          }
          return v24;
        }
      }
    }
    else
    {
LABEL_152:
      *v69 = 0;
    }
  }
  return v17;
}

uint64_t hlp_DifferentiatorLOO(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t NullHandle;
  int v12;
  uint64_t result;
  BOOL v14;
  _BOOL4 v15;
  unsigned __int16 v16;
  char *v17;
  char *v19;
  char *v20;
  char *v21;
  unsigned __int16 v22;
  size_t v23;
  char *v24;
  char v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD, _QWORD, _OWORD *);
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  char __s2[2];
  char *v48;
  char *__s;
  _QWORD *v50;
  char __dst[64];
  _OWORD v52[80];
  char v53[1155];
  uint64_t v54;

  v8 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  v48 = 0;
  __s = 0;
  *(_WORD *)__s2 = 0;
  v46 = 0;
  v45 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v50 = 0;
  memset(v52, 0, 512);
  while (1)
  {
    v9 = off_24D293198[v8];
    if ((objc_GetObject(*(_QWORD *)(*a1 + 48), (uint64_t)v9, &v50) & 0x80000000) == 0)
      break;
    if (++v8 == 3)
    {
      LODWORD(v10) = 0;
      goto LABEL_9;
    }
  }
  v10 = v50;
  if (v50)
  {
    NullHandle = safeh_GetNullHandle();
    if (safeh_HandlesEqual(v10[2], v10[3], NullHandle, v12)
      || (v38 = v50[1]) == 0
      || (v39 = *(uint64_t (**)(_QWORD, _QWORD, _OWORD *))(v38 + 120)) == 0
      || (v39(v50[2], v50[3], v52) & 0x80000000) != 0)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      cstdlib_strcpy(__dst, v53);
      LODWORD(v10) = 1;
    }
  }
  objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)v9);
LABEL_9:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)&v43 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetUInt(*(_QWORD *)(*a1 + 40), (uint64_t)"disableloodifferentiator", (unsigned int *)&v42);
    v14 = (int)result >= 0 && (_DWORD)v42 == 1;
    v15 = !v14;
    v16 = HIWORD(v43);
    if (HIWORD(v43))
    {
      v41 = (int)v10;
      v17 = 0;
      v40 = !v15;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v16, 0, 1, (char *)&v42 + 4, (char *)&v44 + 2);
        if ((result & 0x80000000) != 0)
          break;
        if (HIDWORD(v42) <= 0xA && ((1 << SBYTE4(v42)) & 0x610) != 0)
        {
          LOWORD(v43) = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v43), 12, &v43);
          if ((result & 0x80000000) != 0)
            break;
          if ((unsigned __int16)v43 == 1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v43), 12, &__s, (char *)&v44 + 2);
            if ((result & 0x80000000) != 0)
              break;
            v19 = __s;
            v20 = (char *)a1[80];
            v21 = (char *)a1[81];
            v22 = cstdlib_strlen(__s);
            if (v20)
            {
              v23 = v22;
              while (cstdlib_strcmp(v21, ""))
              {
                if (!cstdlib_strncmp(v19, v20, v23))
                {
                  if (v41 && !cstdlib_strchr(__dst, *v21))
                    break;
                  v46 = *v21;
                  v25 = v40;
                  if (!v46)
                    v25 = 1;
                  if ((v25 & 1) != 0)
                    goto LABEL_32;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v43), 3, &v48, (char *)&v44 + 2);
                  if ((result & 0x80000000) != 0)
                    goto LABEL_58;
                  v26 = (2 * (cstdlib_strlen(v48) & 0x7FFF)) | 1;
                  v27 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v17, v26);
                  if (!v27)
                  {
                    result = log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v28, v29, v30, v31, v40);
                    goto LABEL_58;
                  }
                  v17 = v27;
                  cstdlib_memset(v27, 0, v26);
                  v45 = 0;
                  if (cstdlib_strlen(v48))
                  {
                    v32 = 0;
                    v33 = 0;
                    v34 = 1;
                    do
                    {
                      __s2[0] = v48[v32];
                      cstdlib_strcat(v17, __s2);
                      if (__s2[0] == 92)
                      {
                        v34 = !v34;
                      }
                      else if (v34)
                      {
                        v34 = 1;
                        if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t *, _QWORD))(a1[10] + 64))(a1[8], a1[9], 0, __s2, &v45, 0) & 0x80000000) == 0)
                        {
                          if (v45)
                          {
                            v34 = 1;
                            cstdlib_strncat(v17, &v46, 1uLL);
                          }
                        }
                      }
                      v32 = (unsigned __int16)++v33;
                    }
                    while (cstdlib_strlen(v48) > (unsigned __int16)v33);
                  }
                  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(a1[1] + 160);
                  v36 = HIWORD(v43);
                  v37 = cstdlib_strlen(v17);
                  result = v35(a2, a3, v36, 3, (unsigned __int16)(v37 + 1), v17, &v44);
                  if ((result & 0x80000000) == 0)
                    goto LABEL_32;
                  goto LABEL_58;
                }
                v24 = cstdlib_strchr(v20, 44);
                v20 = v24 + 1;
                ++v21;
                if (!v24)
                  break;
              }
            }
            v46 = 0;
          }
        }
LABEL_32:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1[1] + 120))(a2, a3, HIWORD(v43), (char *)&v43 + 2);
        if ((result & 0x80000000) != 0)
          break;
        v16 = HIWORD(v43);
      }
      while (HIWORD(v43));
LABEL_58:
      if (v17)
        return (uint64_t)heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v17);
    }
  }
  return result;
}

uint64_t be_adapt_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0)
    return result;
  else
    return 2410684424;
}

uint64_t be_adapt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2410684417;
  result = 0;
  *a2 = &IFeBeadapt;
  return result;
}

uint64_t hlp_AdjustWordRecord(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s)
{
  _BOOL4 v10;
  uint64_t result;
  _BOOL4 v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  __int16 v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *);
  __int16 v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  char *__sa;
  char *__s1;

  __sa = 0;
  __s1 = 0;
  v17 = 0;
  v18 = 0;
  v10 = !cstdlib_strchr(__s, 39) && !cstdlib_strchr(__s, 34);
  v19 = 0;
  v20 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 3, &__sa, (char *)&v20 + 2);
  if ((result & 0x80000000) == 0)
  {
    v12 = cstdlib_strchr(__sa, 39) || cstdlib_strchr(__sa, 34);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 13, &__s1, (char *)&v20 + 2);
    if ((result & 0x80000000) == 0)
    {
      if (v10 || v12 || cstdlib_strcmp(__s1, "0"))
      {
        if (!v10 || !cstdlib_strcmp(__s1, "0"))
        {
LABEL_18:
          v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(a1[1] + 160);
          v14 = cstdlib_strlen(__s);
          result = v13(a2, a3, a4, 3, (unsigned __int16)(v14 + 1), __s, &v20);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, a4, 0, 1, &v19, (char *)&v20 + 2);
            if ((result & 0x80000000) == 0 && v19 == 10)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 9, &v18, (char *)&v20 + 2);
              if ((result & 0x80000000) == 0)
              {
                if (v18 && cstdlib_strlen(v18)
                  || (result = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"langcode", &v17),
                      (result & 0x80000000) == 0)
                  && (!v17
                   || (v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, int *))(a1[1] + 160),
                       v16 = cstdlib_strlen(v17),
                       result = v15(a2, a3, a4, 9, (unsigned __int16)(v16 + 1), v17, &v20),
                       (result & 0x80000000) == 0)))
                {
                  v19 = 4;
                  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, a4, 0, 4, &v19, &v20);
                }
              }
            }
          }
          return result;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "0", &v20);
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "1", &v20);
      }
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t hlp_CopyWordRec_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int16 a6)
{
  char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *i;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, int *);
  __int16 v24;
  char *j;
  char *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  const char *v43;
  size_t v44;
  char *k;
  char *v46;
  uint64_t (*v47)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *);
  __int16 v48;
  unsigned int v50;
  int v52;
  char *__s1;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v52 = 0;
  v10 = 0;
  v11 = 0;
  v56 = a6;
  v55 = 0;
  v54 = 0;
  __s1 = 0;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(a1[1] + 184))(a2, a3, a4, v11, &v55);
    if ((v12 & 0x80000000) != 0)
      break;
    if (v55)
    {
      if (v11 <= 0x11u && ((1 << v11) & 0x20186) != 0)
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *, char *))(a1[1] + 168))(a2, a3, a4, v11, 1, &v54, (char *)&v52 + 2);
        if ((v13 & 0x80000000) != 0)
          goto LABEL_49;
        v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
        if (v11 == 1)
        {
          v15 = a2;
          v16 = a3;
          v17 = a5;
          v18 = 1;
LABEL_12:
          v19 = v14(v15, v16, v17, v18, 1, &v56, &v52);
          goto LABEL_13;
        }
        v12 = v14(a2, a3, a5, v11, 1, &v54, &v52);
        if ((v12 & 0x80000000) != 0)
          break;
        if (v11 == 2)
        {
          --v56;
          v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
          v15 = a2;
          v16 = a3;
          v17 = a4;
          v18 = 2;
          goto LABEL_12;
        }
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 176))(a2, a3, a4);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_49:
          v12 = v13;
          break;
        }
        if (v11 != 14)
        {
          v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, int *))(a1[1] + 160);
          v24 = cstdlib_strlen(__s1);
          v19 = v23(a2, a3, a5, v11, (unsigned __int16)(v24 + 1), __s1, &v52);
LABEL_13:
          v12 = v19;
          if ((v19 & 0x80000000) != 0)
            break;
          goto LABEL_14;
        }
        for (i = __s1; ; i = v22 + 1)
        {
          v22 = cstdlib_strstr(i, "e_");
          if (!v22)
            break;
          *v22 = 69;
        }
        for (j = __s1; ; j = v26 + 1)
        {
          v26 = cstdlib_strstr(j, "s_");
          if (!v26)
            break;
          *v26 = 83;
        }
        v27 = *(_QWORD *)(*a1 + 8);
        v28 = cstdlib_strlen(__s1);
        v29 = (char *)heap_Alloc(v27, (v28 + 1));
        if (!v29)
        {
          log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v30, v31, v32, v33, v50);
          return 2410684426;
        }
        v10 = v29;
        cstdlib_strcpy(v29, __s1);
        v34 = cstdlib_strstr(__s1, "E_");
        if (v34)
        {
          v35 = v34;
          do
          {
            *v35 = 83;
            v36 = cstdlib_strchr(v35, 59);
            if (v36)
            {
              v37 = v36;
              *v36 = 0;
              if (cstdlib_strstr(v10, v35))
              {
                v38 = cstdlib_strlen(v37 + 1);
                cstdlib_memmove(v35, v37 + 1, v38 + 1);
              }
              else
              {
                *v35 = 73;
                *v37 = 59;
              }
            }
            else if (cstdlib_strstr(v10, v35))
            {
              *v35 = 0;
            }
            else
            {
              *v35 = 73;
            }
            v35 = cstdlib_strstr(v35 + 1, "E_");
          }
          while (v35);
        }
        v39 = cstdlib_strstr(v10, "S_");
        if (v39)
        {
          v40 = v39;
          do
          {
            *v40 = 69;
            v41 = cstdlib_strchr(v40, 59);
            if (v41)
            {
              v42 = v41;
              *v41 = 0;
              v43 = v41 + 1;
              if (cstdlib_strstr(v41 + 1, v40))
              {
                v44 = cstdlib_strlen(v43);
                cstdlib_memmove(v40, v43, v44 + 1);
              }
              else
              {
                *v40 = 73;
                *v42 = 59;
              }
            }
            else
            {
              *v40 = 73;
            }
            v40 = cstdlib_strstr(v40 + 1, "S_");
          }
          while (v40);
        }
        for (k = v10; ; k = v46 + 1)
        {
          v46 = cstdlib_strstr(k, "PHR:B-");
          if (!v46)
            break;
          v46[4] = 73;
        }
        v47 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(a1[1] + 160);
        v48 = cstdlib_strlen(v10);
        v12 = v47(a2, a3, a5, 14, (unsigned __int16)(v48 + 1), v10, &v52);
        if ((v12 & 0x80000000) != 0)
          break;
      }
    }
LABEL_14:
    v20 = v11++;
  }
  while (v20 < 0x15);
  if (v10)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
  return v12;
}

uint64_t hlp_DeleteWordRecord(_QWORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *);
  __int16 v33;
  unsigned int v35;
  unsigned __int16 v36;
  int v37;
  char *__s;
  char *v39;

  __s = 0;
  v39 = 0;
  v37 = 0;
  v36 = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[1] + 168))(a2, a3, a5, 2, 1, &v36, (char *)&v37 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  *(_BYTE *)(a6 + v36) = 45;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[1] + 168))(a2, a3, (unsigned __int16)*a4, 2, 1, &v36, (char *)&v37 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 160))(a2, a3, a5, 2, 1, &v36, &v37);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, (unsigned __int16)*a4, 14, &v39, (char *)&v37 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a5, 14, &__s, (char *)&v37 + 2);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v39;
    if (v39)
    {
      v15 = 0;
      do
      {
        if ((*v14 | 0x20) == 0x65 && v14[1] == 95)
        {
          LODWORD(v16) = hlp_NLUStrLength(v14);
          v17 = *(uint64_t **)(*a1 + 8);
          if (v15)
          {
            v18 = cstdlib_strlen(v15);
            v19 = heap_Realloc(v17, (uint64_t)v15, (v16 + v18 + 2));
            if (!v19)
            {
              v13 = 2410684426;
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v20, v21, v22, v23, v35);
              goto LABEL_27;
            }
            v16 = v16;
            v15 = (const char *)v19;
          }
          else
          {
            v24 = cstdlib_strlen(__s);
            v25 = (char *)heap_Alloc((uint64_t)v17, (v16 + v24 + 2));
            if (!v25)
            {
              v13 = 2410684426;
              log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v26, v27, v28, v29, v35);
              return v13;
            }
            v15 = v25;
            v16 = v16;
            cstdlib_strcpy(v25, __s);
          }
          v30 = v39[v16];
          v39[v16] = 0;
          hlp_NLUStrJoin(v15, v39);
          v39[v16] = v30;
          v14 = v39;
        }
        v14 = hlp_NLUStrNext(v14);
        v39 = v14;
      }
      while (v14);
      v31 = v15 == 0;
      if (v15)
      {
        v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(a1[1] + 160);
        v33 = cstdlib_strlen(v15);
        v13 = v32(a2, a3, a5, 14, (unsigned __int16)(v33 + 1), v15, &v37);
      }
      if ((v13 & 0x80000000) != 0)
        goto LABEL_26;
    }
    else
    {
      v15 = 0;
      v31 = 1;
    }
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[1] + 192))(a2, a3, (unsigned __int16)*a4);
    if ((v13 & 0x80000000) == 0)
      *a4 = a5;
LABEL_26:
    if (!v31)
LABEL_27:
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v15);
  }
  return v13;
}

uint64_t prmfx_CommonProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t result;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _BOOL4 v26;
  char *v27;
  const char *v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *i;
  char *j;
  char *k;
  size_t v45;
  char *v46;
  char *v47;
  char *v48;
  unsigned __int16 v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unsigned __int16 v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  const char *v61;
  unsigned __int16 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  const char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  _BOOL4 v77;
  char *v78;
  unsigned __int16 v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  unsigned __int16 v84;
  uint64_t v85;
  const char *v86;
  size_t v87;
  unsigned int v88;
  unsigned __int16 v89;
  uint64_t v90;
  int v91;
  int v92;
  char *__s1;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v99;
  unsigned __int16 v100;
  uint64_t v101;
  unsigned __int16 __n[5];
  const char *v103;
  unsigned __int16 v104;
  const char *v105;
  unsigned __int16 v106;
  const char *v107;
  char *v108;
  unsigned __int16 v109;
  uint64_t v110;
  int v111;
  int v112;
  char __s[16];
  uint64_t v114;

  v7 = a5;
  v8 = a4;
  v114 = *MEMORY[0x24BDAC8D0];
  v111 = 0;
  v112 = 0;
  v110 = 0;
  v108 = 0;
  v103 = "null";
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(char **)(a1 + 72);
  __s1 = *(char **)(*(_QWORD *)(a1 + 64) + 1304);
  v92 = *(_DWORD *)(a1 + 84);
  v109 = 0;
  v107 = "null";
  v106 = 0;
  v105 = "null";
  v104 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v10 + 104))(a4, a5, 1, 0, (char *)&v112 + 2);
  if ((result & 0x80000000) != 0)
    return result;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v10 + 104))(v8, v7, 2, HIWORD(v112), &v112);
  if ((result & 0x80000000) != 0)
    return result;
  v13 = 0;
  v100 = 0;
  v96 = v7;
  v97 = 0;
  v14 = 0;
  v94 = 0xFFFF;
  v95 = v8;
  v91 = 0;
  v101 = v10;
  while (2)
  {
    if (!(_WORD)v112)
    {
      v89 = v94;
LABEL_206:
      if (*a6)
      {
        prmfx_setFeature("prm_previous_word", **((_QWORD **)a6 + 1), "null");
        prmfx_setFeature("pos_previous_word", **((_QWORD **)a6 + 1), "null");
        v90 = 8 * (unsigned __int16)v13 - 8;
        prmfx_setFeature("pos_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + v90), "null");
        prmfx_setFeature("phr_previous_word", **((_QWORD **)a6 + 1), "null");
        prmfx_setFeature("phr_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + v90), "null");
        prmfx_setFeature("ne_previous_word", **((_QWORD **)a6 + 1), "null");
        prmfx_setFeature("ne_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + v90), "null");
        prmfx_setFeature("doc_punc_previous_word", **((_QWORD **)a6 + 1), "null");
        prmfx_setFeature("doc_punc_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + v90), "null");
        prmfx_setFeature("bndshape_previous_word", **((_QWORD **)a6 + 1), "null");
        prmfx_setFeature("bndshape_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + v90), "null");
      }
      if ((v89 & 0x8000) == 0)
        prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * v89), "L");
      return 0;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
    if ((result & 0x80000000) != 0)
      return result;
    switch(HIDWORD(v110))
    {
      case 4:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
        v99 = v14;
        memset(__n, 0, sizeof(__n));
        if ((unsigned __int16)v13 >= *a6)
          return 2382372873;
        prmfx_setFeature("phrase_type", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v103);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v112, 14, &v108, &v111) & 0x80000000) != 0)
        {
          v15 = "null";
          v108 = "null";
        }
        else
        {
          v15 = v108;
        }
        v16 = *(_QWORD *)(a2 + 8);
        v17 = cstdlib_strlen(v15);
        v18 = heap_Alloc(v16, (7 * v17 + 15));
        if (!v18)
          return 2382372874;
        v19 = (char *)v18;
        v20 = *((_QWORD *)a6 + 2);
        v21 = a6[12];
        a6[12] = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21) = v18;
        if (hlp_NLUStrFind(v108, "POS", (char **)&__n[1], __n))
        {
          cstdlib_strncpy(v19, *(const char **)&__n[1], __n[0]);
          v22 = &v19[__n[0]];
          *v22 = 0;
          v23 = v22 + 1;
        }
        else
        {
          v23 = v19;
          v19 = "null";
        }
        if ((_WORD)v13)
          prmfx_setFeature("pos_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v19);
        prmfx_setFeature("pos_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v19);
        if (*a6 - 1 > (unsigned __int16)v13)
          prmfx_setFeature("pos_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 + 1)), v19);
        v24 = cstdlib_strstr(__s1, v19);
        if (!v24)
          goto LABEL_27;
        v25 = v24;
        do
        {
          v26 = *(v25 - 1) == 32 && v25[cstdlib_strlen(v19)] == 32;
          v27 = cstdlib_strstr(v25 + 1, v19);
          if (!v27)
            break;
          v25 = v27;
        }
        while (!v26);
        v28 = "A";
        v29 = v13;
        if (!v26)
        {
LABEL_27:
          v28 = "F";
          v29 = v94;
        }
        v94 = v29;
        prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v28);
        if (hlp_NLUStrFind(v108, "PHR", (char **)&__n[1], __n))
        {
          cstdlib_strncpy(v23, *(const char **)&__n[1], __n[0]);
          v30 = &v23[__n[0]];
          *v30 = 0;
          v31 = v30 + 1;
        }
        else
        {
          v31 = v23;
          v23 = "null";
        }
        if ((_WORD)v13)
          prmfx_setFeature("phr_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v23);
        prmfx_setFeature("phr_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v23);
        if (*a6 - 1 > (unsigned __int16)v13)
          prmfx_setFeature("phr_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 + 1)), v23);
        v32 = *((_QWORD *)a6 + 4);
        v33 = *(const char **)(v32 + 56 * (unsigned __int16)v13 + 32);
        if (v33)
        {
          cstdlib_strncpy(v31, v33, *(_QWORD *)(v32 + 56 * (unsigned __int16)v13 + 24));
          v34 = *(_QWORD *)(*((_QWORD *)a6 + 4) + 56 * (unsigned __int16)v13 + 24);
          v31[v34] = 0;
          v35 = &v31[v34 + 1];
        }
        else
        {
          v35 = v31;
          v31 = "null";
        }
        if ((_WORD)v13)
          prmfx_setFeature("bndshape_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v31);
        prmfx_setFeature("bndshape", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v31);
        if (*a6 - 1 > (unsigned __int16)v13)
          prmfx_setFeature("bndshape_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 + 1)), v31);
        if (v92)
        {
          if (hlp_NLUStrFind(v108, "S_COMP", (char **)&__n[1], __n))
          {
            v36 = v35;
            v37 = "B-";
LABEL_50:
            cstdlib_strcpy(v36, v37);
            cstdlib_strncpy(v35 + 2, *(const char **)&__n[1], __n[0] + 1);
            v38 = __n[0] + 2;
            goto LABEL_51;
          }
          if (hlp_NLUStrFind(v108, "I_COMP", (char **)&__n[1], __n)
            || hlp_NLUStrFind(v108, "E_COMP", (char **)&__n[1], __n))
          {
            v36 = v35;
            v37 = "I-";
            goto LABEL_50;
          }
        }
        else if (hlp_NLUStrFind(v108, "COMP", (char **)&__n[1], __n))
        {
          cstdlib_strncpy(v35, *(const char **)&__n[1], __n[0] + 1);
          v38 = __n[0];
LABEL_51:
          v35[v38] = 0;
          v39 = &v35[v38 + 1];
          goto LABEL_52;
        }
        v39 = v35;
        v35 = "null";
LABEL_52:
        prmfx_setFeature("compound", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v35);
        if (hlp_NLUStrFind(v108, "S_CLASS", (char **)&__n[1], __n)
          || hlp_NLUStrFind(v108, "I_CLASS", (char **)&__n[1], __n)
          || hlp_NLUStrFind(v108, "E_CLASS", (char **)&__n[1], __n))
        {
          cstdlib_strncpy(v39, *(const char **)&__n[1], __n[0] + 1);
          v40 = &v39[__n[0]];
          *v40 = 0;
          v41 = v40 + 1;
        }
        else
        {
          v41 = v39;
          v39 = "null";
        }
        prmfx_setFeature("doc_class", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v39);
        cstdlib_strcpy(v41, "");
        for (i = v108; hlp_NLUStrFind(i, "S_PUNC", (char **)&__n[1], __n); i = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (cstdlib_strlen(v41))
            cstdlib_strcat(v41, ";");
          cstdlib_strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          cstdlib_strncat(v41, *(const char **)&__n[1], __n[0]);
        }
        for (j = v108; hlp_NLUStrFind(j, "I_PUNC", (char **)&__n[1], __n); j = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (cstdlib_strlen(v41))
            cstdlib_strcat(v41, ";");
          cstdlib_strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          cstdlib_strncat(v41, *(const char **)&__n[1], __n[0]);
        }
        for (k = v108; hlp_NLUStrFind(k, "E_PUNC", (char **)&__n[1], __n); k = (char *)(*(_QWORD *)&__n[1] + __n[0]))
        {
          if (cstdlib_strlen(v41))
            cstdlib_strcat(v41, ";");
          cstdlib_strncat(v41, (const char *)(*(_QWORD *)&__n[1] - 7), 7uLL);
          cstdlib_strncat(v41, *(const char **)&__n[1], __n[0]);
        }
        if (cstdlib_strlen(v41))
        {
          v45 = cstdlib_strlen(v41);
          v41[v45] = 0;
          v46 = &v41[v45 + 1];
        }
        else
        {
          v46 = v41;
          v41 = "null";
        }
        if ((_WORD)v13)
          prmfx_setFeature("doc_punc_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v41);
        prmfx_setFeature("doc_punc", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v41);
        if (*a6 - 1 > (unsigned __int16)v13)
          prmfx_setFeature("doc_punc_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 + 1)), v41);
        if (hlp_NLUStrFind(v108, "S_NE", (char **)&__n[1], __n)
          || hlp_NLUStrFind(v108, "I_NE", (char **)&__n[1], __n)
          || hlp_NLUStrFind(v108, "E_NE", (char **)&__n[1], __n))
        {
          cstdlib_strncpy(v46, *(const char **)&__n[1], __n[0] + 1);
          v47 = &v46[__n[0]];
          *v47 = 0;
          v48 = v47 + 1;
        }
        else
        {
          v48 = v46;
          v46 = "null";
        }
        if ((_WORD)v13)
          prmfx_setFeature("ne_next_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v46);
        prmfx_setFeature("ne_current_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v46);
        if (*a6 - 1 > (unsigned __int16)v13)
          prmfx_setFeature("ne_previous_word", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 + 1)), v46);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v101 + 176))(v95, v96, (unsigned __int16)v112, 9, &v108, &v111) & 0x80000000) != 0)
        {
          v108 = "null";
        }
        else
        {
          cstdlib_strcpy(v48, "");
          cstdlib_strncat(v48, v108, 2uLL);
        }
        prmfx_setFeature("language_tag", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v48);
        v49 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v101 + 176))(v95, v96, (unsigned __int16)v112, 3, &v108, &v111) & 0x80000000) == 0)
        {
          v50 = v108;
          if (v108)
          {
            v49 = 0;
            do
            {
              ++v49;
              v51 = cstdlib_strstr(v50, ".");
              v50 = v51 + 1;
              if (v51)
                v52 = v51 + 1;
              else
                v52 = 0;
              v108 = v52;
            }
            while (v51);
          }
        }
        v53 = &v48[cstdlib_strlen(v48) + 1];
        snprintf(v53, 4uLL, "%u", v49 >> 1);
        prmfx_setFeature("word_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v53);
        if (WORD2(v97) == 1)
        {
          prmfx_setFeature("phrase_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), "0");
          v54 = v100;
        }
        else
        {
          v54 = v100;
          if (WORD2(v97) < 6u)
            v55 = "1";
          else
            v55 = "2";
          prmfx_setFeature("phrase_length", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v55);
        }
        if (WORD2(v97) - 1 == v54)
        {
          v56 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          v57 = "3";
        }
        else if (v54)
        {
          v56 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          if (WORD2(v97) - 2 == v54)
            v57 = "2";
          else
            v57 = "1";
        }
        else
        {
          v56 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          v57 = "0";
        }
        prmfx_setFeature("position", v56, v57);
        if ((unsigned __int16)v97 - 1 == (unsigned __int16)v99)
        {
          v58 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          v59 = "3";
        }
        else if ((_WORD)v99)
        {
          v58 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          if ((unsigned __int16)v97 - 2 == (unsigned __int16)v99)
            v59 = "2";
          else
            v59 = "1";
        }
        else
        {
          v58 = *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13);
          v59 = "0";
        }
        prmfx_setFeature("position_major_ip", v58, v59);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v101 + 168))(v95, v96, (unsigned __int16)v112, 1, 1, &v109, &v111);
        if ((result & 0x80000000) == 0)
        {
          if (v109 >= v106)
          {
            v60 = "null";
            v107 = "null";
          }
          else
          {
            v60 = v107;
          }
          prmfx_setFeature("domain", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v60);
          if (v109 >= v104)
          {
            v61 = "null";
            v105 = "null";
          }
          else
          {
            v61 = v105;
          }
          prmfx_setFeature("tn", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13), v61);
          v62 = (unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * (unsigned __int16)v13);
          v63 = v62[1];
          v64 = *v62;
          v65 = (unsigned __int16)(v63 - v64);
          v66 = heap_Alloc(*(_QWORD *)(a2 + 8), v65 + 5);
          if (v66)
          {
            v67 = (const char *)v66;
            v68 = *((_QWORD *)a6 + 2);
            v69 = a6[12];
            a6[12] = v69 + 1;
            *(_QWORD *)(v68 + 8 * v69) = v66;
            v70 = *(unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * (unsigned __int16)v13);
            v71 = *((_QWORD *)a6 + 5);
            if (v63 == v64)
            {
              v72 = 0;
            }
            else
            {
              v72 = 0;
              v73 = (const char *)(v71 + v70);
              v74 = v65;
              do
              {
                if (*(_DWORD *)(a1 + 88) || !cstdlib_strchr(__s, *v73))
                  v67[v72++] = *v73;
                ++v73;
                --v74;
              }
              while (v74);
            }
            v67[v72] = 0;
            if (*(_DWORD *)(a1 + 88))
            {
              result = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), "normal", v67, v65);
              v10 = v101;
              if ((result & 0x80000000) != 0)
                return result;
            }
            else
            {
              v10 = v101;
            }
            if (!cstdlib_strlen(v67))
              goto LABEL_147;
            v75 = cstdlib_strstr(v11, v67);
            if (!v75)
              goto LABEL_147;
            v76 = v75;
            do
            {
              v77 = (v76 == v11 || v76 > v11 && *(v76 - 1) == 32) && v76[cstdlib_strlen(v67)] == 32;
              v78 = cstdlib_strstr(v76 + 1, v67);
              if (!v78)
                break;
              v76 = v78;
            }
            while (!v77);
            if (!v77)
LABEL_147:
              v67 = "null";
            prmfx_setFeature("orth", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v13++), v67);
            ++v100;
            v14 = v99 + 1;
            v8 = v95;
            v7 = v96;
            goto LABEL_149;
          }
          return 2382372874;
        }
        return result;
      case 5:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v112, 1, 1, &v106, &v111);
        if ((result & 0x80000000) != 0)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v112, 4, &v107, &v111) & 0x80000000) != 0)v107 = "null";
        if (v106 == v109 && (_WORD)v13)
          prmfx_setFeature("domain", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v107);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v112, 2, 1, &v106, &v111) & 0x80000000) != 0)v106 = v109;
        goto LABEL_149;
      case 6:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v112, 1, 1, &v104, &v111);
        if ((result & 0x80000000) != 0)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v112, 4, &v105, &v111) & 0x80000000) != 0)v105 = "null";
        if (v104 == v109 && (_WORD)v13)
          prmfx_setFeature("tn", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * ((unsigned __int16)v13 - 1)), v105);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v10 + 168))(v8, v7, (unsigned __int16)v112, 2, 1, &v104, &v111) & 0x80000000) != 0)v104 = v109;
        goto LABEL_149;
      case 0xF:
        if ((v94 & 0x8000) == 0)
          prmfx_setFeature("accentable", *(_QWORD *)(*((_QWORD *)a6 + 1) + 8 * (unsigned __int16)v94), "L");
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, int *))(v10 + 176))(v8, v7, (unsigned __int16)v112, 4, &v103, &v111) & 0x80000000) != 0)v103 = "null";
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v10 + 120))(v8, v7, (unsigned __int16)v112, (char *)&v111 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        if (!HIWORD(v111))
        {
          v89 = -1;
          goto LABEL_206;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
        if ((result & 0x80000000) != 0)
          return result;
        WORD2(v97) = 0;
        v79 = HIWORD(v111);
        if (HIWORD(v111))
        {
          v80 = v110;
          if ((_DWORD)v110 != 15)
          {
            HIDWORD(v97) = 0;
            while (1)
            {
              v81 = (v80 - 9) < 6 || v80 == 4;
              v82 = HIDWORD(v97);
              if (v81)
                v82 = HIDWORD(v97) + 1;
              HIDWORD(v97) = v82;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v10 + 120))(v8, v7, v79, (char *)&v111 + 2);
              if ((result & 0x80000000) != 0)
                return result;
              if (!HIWORD(v111))
                break;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(v8, v7);
              if ((result & 0x80000000) != 0)
                return result;
              v79 = HIWORD(v111);
              if (HIWORD(v111))
              {
                v80 = v110;
                if ((_DWORD)v110 != 15)
                  continue;
              }
              break;
            }
          }
        }
        if ((_WORD)v13
          && v91 != *(unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * ((unsigned __int16)v13 - 1) + 4))
        {
          v100 = 0;
        }
        else
        {
          v83 = *a6;
          if (v83 - 1 <= (unsigned __int16)v13)
          {
            LOWORD(v97) = 1;
            v84 = v13;
          }
          else
          {
            LOWORD(v97) = 1;
            v84 = v13;
            do
            {
              v85 = *((_QWORD *)a6 + 4);
              if (*(_DWORD *)(v85 + 56 * v84 + 48))
                break;
              v86 = *(const char **)(v85 + 56 * v84 + 32);
              if (v86)
              {
                v87 = *(_QWORD *)(v85 + 56 * v84 + 24);
                if (v87)
                {
                  if (cstdlib_strncmp(v86, "%", v87))
                    break;
                  v83 = *a6;
                }
              }
              LOWORD(v97) = v97 + 1;
              ++v84;
            }
            while (v83 - 1 > v84);
          }
          v100 = 0;
          v88 = v84;
          v14 = 0;
          v91 = *(unsigned __int16 *)(*((_QWORD *)a6 + 4) + 56 * v88 + 4);
        }
        v94 = 0xFFFF;
LABEL_149:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v10 + 120))(v8, v7, (unsigned __int16)v112, &v112);
        if ((result & 0x80000000) != 0)
          return result;
        continue;
      default:
        goto LABEL_149;
    }
  }
}

uint64_t prmfx_setFeature(char *__s1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  uint64_t result;
  const char *v8;

  v6 = 0;
  while (1)
  {
    result = cstdlib_strcmp(__s1, g_FeatureNames[v6]);
    if (!(_DWORD)result)
      break;
    if (++v6 == 29)
      return result;
  }
  result = cstdlib_strcmp(a3, "");
  v8 = "null";
  if ((_DWORD)result)
    v8 = a3;
  *(_QWORD *)(a2 + v6 * 8) = v8;
  return result;
}

unsigned __int8 *getNluStringValue(const char *a1, const char *a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  char *v6;
  int64_t v7;
  int64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v3 = 0;
  if (a1 && a2)
  {
    v6 = (char *)a1;
    v7 = cstdlib_strlen(a1);
    v8 = cstdlib_strlen(a2);
    if (v8 >= v7)
    {
      return 0;
    }
    else
    {
      v9 = v8;
      v10 = &v6[v7];
      v11 = &v6[v8];
      while (1)
      {
        v12 = cstdlib_strstr(v6, ";");
        v13 = v12 ? v12 : v10;
        if (!cstdlib_strncmp(a2, v6, v9))
        {
          v14 = *v11;
          v3 = (unsigned __int8 *)(v11 + 1);
          if (v14 == 58 && v3 <= (unsigned __int8 *)v13)
            break;
        }
        v6 = v13 + 1;
        v11 = &v13[v9 + 1];
        if (v11 >= v10)
          return 0;
      }
      *a3 = v13 - (char *)v3;
    }
  }
  return v3;
}

uint64_t fe_prmfx_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2382372865;
  result = 0;
  *a2 = &IPrmFx;
  return result;
}

uint64_t prmfx_AllocateResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _WORD *v12;
  int v13;

  v13 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v13 + 2);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 104))(a4, a5, 2, HIWORD(v13), &v13);
  if ((v9 & 0x80000000) != 0)
    return v9;
  while ((_WORD)v13)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
    if ((v9 & 0x80000000) == 0)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a3 + 120))(a4, a5, (unsigned __int16)v13, &v13);
      if ((v9 & 0x80000000) == 0)
        continue;
    }
    return v9;
  }
  v10 = 2382372874;
  v12 = (_WORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 56);
  if (v12)
  {
    *v12 = 0;
    return 0;
  }
  return v10;
}

uint64_t fillWordInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  __int16 v20;
  unsigned __int16 v21;
  __int16 v22;
  int v23[2];

  v19 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1 + 104))(a2, a3, 1, 0, &v19);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(a1 + 184))(a2, a3, v19, 0, (char *)&v16 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v16) == 1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *))(a1 + 176))(a2, a3, v19, 0, a4 + 40, &v18);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v18 >= 2u)
      {
        *(_QWORD *)(a4 + 48) = cstdlib_strlen(*(const char **)(a4 + 40));
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 2, v19, (char *)&v18 + 2);
        if ((result & 0x80000000) == 0)
        {
          v9 = HIWORD(v18);
          if (HIWORD(v18))
          {
            v10 = 0;
            while (1)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a1 + 168))(a2, a3, v9, 0, 1, &v17, &v18);
              if ((result & 0x80000000) != 0)
                return result;
              if ((v17 - 9) < 6)
                goto LABEL_11;
              if (v17 == 15)
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, HIWORD(v18), 7, 1, &v16, &v18);
                if ((result & 0x80000000) != 0)
                  return result;
                if (v10 && (unsigned __int16)v16 <= 1u)
                  *(_DWORD *)(*(_QWORD *)(a4 + 32) + 56 * (v10 - 1) + 48) = 1;
                goto LABEL_15;
              }
              if (v17 == 4)
              {
LABEL_11:
                v11 = *(_QWORD *)(a4 + 32);
                v12 = v10;
                v13 = v11 + 56 * v10;
                v14 = HIWORD(v18);
                v20 = 0;
                *(_WORD *)(v13 + 4) = HIWORD(v18);
                *(_DWORD *)(v13 + 48) = 0;
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 168))(a2, a3, v14, 1, 1);
                if ((result & 0x80000000) != 0
                  || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 168))(a2, a3, v14, 2, 1, v11 + 56 * v10 + 2, &v20), (result & 0x80000000) != 0)|| (*(_QWORD *)v23 = 0, v22 = 0, result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, __int16 *))(a1 + 176))(a2, a3, v14, 14, v23, &v22), (result & 0x80000000) != 0))
                {
                  *(_DWORD *)(v11 + 56 * v10 + 44) = 0;
                  return result;
                }
                ++v10;
                v21 = 0;
                v15 = v11 + 56 * v12;
                hlp_NLUStrFind(*(char **)v23, "PRM", (char **)(v15 + 16), &v21);
                *(_QWORD *)(v15 + 8) = v21;
                hlp_NLUStrFind(*(char **)v23, "BNDSHAPE", (char **)(v15 + 32), &v21);
                *(_QWORD *)(v15 + 24) = v21;
                *(_DWORD *)(v15 + 44) = 1;
              }
LABEL_15:
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(a1 + 120))(a2, a3, HIWORD(v18), (char *)&v18 + 2);
              if ((result & 0x80000000) == 0)
              {
                v9 = HIWORD(v18);
                if (HIWORD(v18))
                  continue;
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t prmfx_FreeResults(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t v5;
  unint64_t v6;

  if (*a3)
  {
    v5 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a3 + 1) + 8 * v5++));
    while (v5 < *a3);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 1));
  if (a3[12])
  {
    v6 = 0;
    do
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v6++));
    while (v6 < a3[12]);
  }
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 2));
  heap_Free(*(_QWORD **)(a1 + 8), *((_QWORD *)a3 + 4));
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a3);
  return 0;
}

char **prmfx_featureNames()
{
  return g_FeatureNames;
}

uint64_t prmfx_getFeature(char *__s1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  while (cstdlib_strcmp(__s1, g_FeatureNames[v4]))
  {
    if (++v4 == 29)
      return 0;
  }
  return *(_QWORD *)(a2 + v4 * 8);
}

uint64_t prmfx_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t inited;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = 2382372871;
  if (a3)
  {
    v11 = 0;
    inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
      return inited;
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, 32);
    if (!v8)
      return 2382372874;
    v9 = v8;
    *v8 = v11;
    v8[1] = a1;
    v8[2] = a2;
    inited = critsec_ObjOpen(*(_QWORD *)(v11 + 16), *(_QWORD **)(v11 + 8), v8 + 3);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v3 = 0;
      *(_QWORD *)a3 = v9;
      *(_DWORD *)(a3 + 8) = 449;
    }
  }
  return v3;
}

uint64_t prmfx_ClassClose(uint64_t *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 449, 32);
  if ((result & 0x80000000) == 0)
  {
    critsec_ObjClose(a1[3]);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t prmfx_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[256];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = 2382372871;
  v19 = 0;
  v18 = 0;
  if (!a5)
    return v5;
  v20 = 0;
  v21 = 0;
  inited = InitRsrcFunction(a3, a4, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 96);
  if (!v12)
    return 2382372874;
  v13 = (uint64_t)v12;
  *v12 = v21;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = 0;
  v14 = v12 + 3;
  v12[4] = 0;
  inited = safeh_HandleCheck(a1, a2, 449, 32);
  if ((inited & 0x80000000) != 0)
    return inited;
  *v14 = a1;
  inited = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"LINGDB", &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v20 + 8);
  inited = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"FE_DCTLKP", &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  v15 = v19;
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v19 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v15 + 16);
  if ((paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"prmigactive", &v18) & 0x80000000) != 0 || v18 != 1)
  {
    *(_QWORD *)(v13 + 64) = 0;
    inited = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 0);
    if ((inited & 0x80000000) == 0)
    {
LABEL_20:
      v5 = 0;
      *(_QWORD *)a5 = v13;
      *(_DWORD *)(a5 + 8) = 449;
      return v5;
    }
    return inited;
  }
  inited = hlp_CreateVoiceBrokerString_1(*(_QWORD *)v13, v22);
  if ((inited & 0x80000000) != 0)
    return inited;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(v13 + 24) + 24));
  if ((igtree_Init_ReadOnly_ReferenceCnt(*(_WORD **)(v13 + 8), *(_QWORD *)(v13 + 16), *(_WORD **)(*(_QWORD *)(v13 + 24) + 8), *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16), (_QWORD *)(v13 + 64), 2, (uint64_t)v22, "IGTR", 5, 0) & 0x80000000) != 0)
  {
    *(_QWORD *)(v13 + 64) = 0;
    paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 0);
    v5 = 0;
  }
  else
  {
    v16 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v13 + 40), (uint64_t)"prmigexists", 1u);
    if ((v16 & 0x80000000) == 0)
      v16 = processIgParams(v13);
    v5 = v16;
  }
  critsec_Leave(*(_QWORD **)(*v14 + 24));
  if ((v5 & 0x80000000) == 0)
    goto LABEL_20;
  return v5;
}

uint64_t prmfx_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = safeh_HandleCheck(a1, a2, 449, 96);
  if ((result & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)a1;
    v5 = **(_QWORD **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(v4 + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(v4 + 48), (uint64_t)"FE_DCTLKP");
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
      igtree_Deinit_ReadOnly_DereferenceCnt(v4, v5, v6);
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t prmfx_ObjReopen(uint64_t a1, int a2)
{
  uint64_t VoiceBrokerString_1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  char v10[256];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  VoiceBrokerString_1 = safeh_HandleCheck(a1, a2, 449, 96);
  if ((VoiceBrokerString_1 & 0x80000000) != 0)
    return VoiceBrokerString_1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    igtree_Deinit_ReadOnly_DereferenceCnt(*(_QWORD *)a1, **(_QWORD **)(a1 + 24), v5);
  if ((paramc_ParamGetUInt(*(_QWORD *)(v4 + 40), (uint64_t)"prmigactive", &v9) & 0x80000000) != 0 || v9 != 1)
  {
    *(_QWORD *)(a1 + 64) = 0;
    VoiceBrokerString_1 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 0);
    if ((VoiceBrokerString_1 & 0x80000000) == 0)
      return 0;
    return VoiceBrokerString_1;
  }
  VoiceBrokerString_1 = hlp_CreateVoiceBrokerString_1(*(_QWORD *)a1, v10);
  if ((VoiceBrokerString_1 & 0x80000000) != 0)
    return VoiceBrokerString_1;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
  if ((igtree_Init_ReadOnly_ReferenceCnt(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), (_QWORD *)(a1 + 64), 2, (uint64_t)v10, "IGTR", 5, 0) & 0x80000000) != 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 0);
    v7 = 0;
  }
  else
  {
    v6 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"prmigexists", 1u);
    if ((v6 & 0x80000000) == 0)
      v6 = processIgParams(a1);
    v7 = v6;
  }
  critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
  if ((v7 & 0x80000000) == 0)
    return 0;
  return v7;
}

uint64_t prmfx_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int Int;
  int v6;

  result = safeh_HandleCheck(a1, a2, 449, 96);
  if ((result & 0x80000000) == 0)
  {
    v6 = 0;
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 84) = 1;
    Int = paramc_ParamGetInt(*(_QWORD *)(v4 + 40), (uint64_t)"statcompwidescope", &v6);
    result = 0;
    if ((Int & 0x80000000) == 0 && !v6)
    {
      result = 0;
      *(_DWORD *)(a1 + 84) = 0;
    }
  }
  return result;
}

uint64_t prmfx_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Results;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  int v36;
  int v37;
  char *__s1;
  unsigned int v39;
  char __dst[5];
  char *v41;
  int v42;
  _BYTE *v43;
  unsigned __int16 v44;
  unsigned __int16 *v45;
  _OWORD v46[14];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  __s1 = 0;
  v9 = safeh_HandleCheck(a1, a2, 449, 96);
  if ((v9 & 0x80000000) == 0)
  {
    v44 = 0;
    v43 = 0;
    v42 = 0;
    memset(v46, 0, sizeof(v46));
    v47 = 0;
    *a5 = 1;
    v10 = *(_QWORD *)a1;
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0
      && __s1
      && !cstdlib_strcmp(__s1, "yes"))
    {
      log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"PRMFX", 5, 0, (uint64_t)"<%s> disables voice-dependent igtree", v11, v12, v13, (uint64_t)"basicclcprosody");
      return v9;
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 32) + 104))(a3, a4, 1, 0, &v44);
    if ((v9 & 0x80000000) == 0
      && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 184))(a3, a4, v44, 0, (char *)&v42 + 2) & 0x80000000) == 0&& HIWORD(v42) == 1)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE **, int *))(*(_QWORD *)(a1 + 32) + 176))(a3, a4, v44, 0, &v43, &v42);
      if ((v9 & 0x80000000) == 0 && (unsigned __int16)v42 >= 2u)
      {
        Results = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32)
                                                                                                + 272))(a3, a4, 9, 1, 0, 0);
        if ((Results & 0x80000000) != 0)
          return Results;
        v9 = 0;
        if ((paramc_ParamGetUInt(*(_QWORD *)(v10 + 40), (uint64_t)"prmigactive", &v39) & 0x80000000) == 0 && v39 == 1)
        {
          if (!*(_QWORD *)(a1 + 64))
            return 0;
          v45 = 0;
          Results = prmfx_AllocateResults(v10, v15, *(_QWORD *)(a1 + 32), a3, a4);
          if ((Results & 0x80000000) != 0)
            return Results;
          critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
          v16 = v45;
          v9 = prmfx_CommonProcess(a1, v10, v17, a3, a4, v45);
          critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 24) + 24));
          if ((v9 & 0x80000000) == 0)
          {
            cstdlib_strcpy(__dst, "null");
            v41 = __dst;
            if (*v16)
            {
              v19 = 0;
              while (1)
              {
                v35 = *(unsigned __int16 *)(*((_QWORD *)v16 + 4) + 56 * v19 + 4);
                prmfx_setFeature("prm_previous_word", *(_QWORD *)(*((_QWORD *)v16 + 1) + 8 * v19), v41);
                v20 = *(_QWORD *)(a1 + 64);
                if (*(unsigned __int8 *)(v20 + 1296) >= 2u)
                {
                  v21 = 0;
                  while (2)
                  {
                    v22 = 0;
                    v23 = *(const char **)(*(_QWORD *)(v20 + 1312) + 8 * v21);
                    v24 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 8 * v19);
                    while (cstdlib_strcmp(v23, g_FeatureNames[v22]))
                    {
                      if (++v22 == 29)
                        return 2382372889;
                    }
                    v25 = *(_QWORD *)(v24 + v22 * 8);
                    *((_QWORD *)v46 + v21) = v25;
                    if (!v25)
                      return 2382372889;
                    ++v21;
                    v20 = *(_QWORD *)(a1 + 64);
                    if (*(unsigned __int8 *)(v20 + 1296) - 1 > (unsigned __int16)v21)
                      continue;
                    break;
                  }
                }
                Results = igtree_Process(v20, (uint64_t)v46, &v43);
                if ((Results & 0x80000000) != 0)
                  return Results;
                traceFeatureVector_0(v10, *(_QWORD *)(a1 + 64), (const char **)v46, (uint64_t)v16, (unsigned __int16)v19);
                *(_BYTE *)(*((_QWORD *)v16 + 4) + 56 * v19 + 40) = *v43;
                if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 32) + 176))(a3, a4, v35, 13, &v41, &v42) & 0x80000000) != 0)
                {
                  cstdlib_strcpy(__dst, "null");
                  v41 = __dst;
                }
                v29 = *((_QWORD *)v16 + 4);
                v30 = *(const char **)(v29 + 56 * v19 + 16);
                if (v30)
                {
                  *v41 = *v30;
                  v31 = *((_QWORD *)v16 + 4);
                  v32 = *(_QWORD *)(v31 + 56 * v19 + 8);
                  if (v32 >= 2)
                  {
                    log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"PRMFX", 1, 0, (uint64_t)"PRMFX: reference PRM %.*s truncated", v26, v27, v28, v32);
                    v31 = *((_QWORD *)v16 + 4);
                  }
                  *(_BYTE *)(v31 + 56 * v19 + 40) = *v41;
                }
                else
                {
                  *v41 = *(_BYTE *)(v29 + 56 * v19 + 40);
                }
                if (*(_BYTE *)(a1 + 92))
                {
                  v36 = 0;
                  v37 = 0;
                  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 32)
                                                                                             + 184))(a3, a4, v35, 8, (char *)&v37 + 2) & 0x80000000) == 0&& HIWORD(v37) == 1)
                  {
                    Results = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 32) + 168))(a3, a4, v35, 8, 1, &v37, &v42);
                    if ((Results & 0x80000000) != 0)
                      return Results;
                    if ((_WORD)v37 && *v41 == *(_BYTE *)(a1 + 92))
                    {
                      Results = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)(a1 + 32) + 160))(a3, a4, v35, 8, 1, a1 + 94, &v36);
                      if ((Results & 0x80000000) != 0)
                        return Results;
                      Results = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 32)
                                                                                            + 120))(a3, a4, v35, (char *)&v36 + 2);
                      if ((Results & 0x80000000) != 0)
                        return Results;
                      while (HIWORD(v36))
                      {
                        Results = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 168))(a3, a4);
                        if ((Results & 0x80000000) == 0)
                        {
                          Results = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 32)
                                                                                                + 120))(a3, a4, HIWORD(v36), (char *)&v36 + 2);
                          if ((Results & 0x80000000) == 0)
                            continue;
                        }
                        return Results;
                      }
                    }
                  }
                }
                if (++v19 >= (unint64_t)*v16)
                  break;
              }
            }
            v33 = *(unsigned __int8 *)(a1 + 80);
            if (v33 != 50)
            {
              if (v33 == 51)
              {
                Results = consistencyCheck3(*(_QWORD *)(a1 + 32), a3, a4, (signed __int16 *)v16);
                if ((Results & 0x80000000) != 0)
                  return Results;
              }
              goto LABEL_55;
            }
            Results = consistencyCheck2(*(_QWORD *)(a1 + 32), a3, a4, v16);
            if ((Results & 0x80000000) == 0)
            {
LABEL_55:
              prmfx_FreeResults(v10, v18, v16);
              return 0;
            }
            return Results;
          }
        }
      }
    }
  }
  return v9;
}

uint64_t prmfx_ProcessEnd(uint64_t a1, int a2)
{
  int v2;

  v2 = safeh_HandleCheck(a1, a2, 449, 96);
  return v2 & (v2 >> 31);
}

uint64_t hlp_CreateVoiceBrokerString_1(uint64_t a1, char *a2)
{
  uint64_t result;
  const char *v5;
  char *v6;

  v5 = 0;
  v6 = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &v6);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v5);
    if ((result & 0x80000000) == 0)
      return brokeraux_ComposeBrokerString(a1, "igtree", 1, 1, v6, v5, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t processIgParams(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  const char **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  int v13;
  char *v14;
  char *v15;
  char *__dst;

  v1 = 2382372871;
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 72) = "";
      *(_BYTE *)(a1 + 80) = 48;
      *(_QWORD *)(a1 + 88) = 0x50000000000000;
      if (*(_DWORD *)(v3 + 1336))
      {
        v4 = 0;
        __dst = (char *)(a1 + 92);
        do
        {
          v5 = *(_QWORD *)(v3 + 1328);
          v6 = v4;
          v7 = (const char **)(v5 + 16 * v4);
          if (cstdlib_strcmp("accentable_pos", *v7))
          {
            if (cstdlib_strcmp("orth_top200", *v7))
            {
              if (cstdlib_strcmp("canonical_conversion", *v7)
                || cstdlib_strcmp("yes", *(const char **)(v5 + 16 * v6 + 8)))
              {
                if (cstdlib_strcmp("consistency_check", *v7))
                {
                  if (cstdlib_strcmp("pause_prm_value", *v7))
                  {
                    if (!cstdlib_strcmp("pause_prm_length", *v7))
                      *(_WORD *)(a1 + 94) = cstdlib_atoi(*(unsigned __int8 **)(v5 + 16 * v6 + 8));
                  }
                  else
                  {
                    cstdlib_strncpy(__dst, *(const char **)(v5 + 16 * v6 + 8), 1uLL);
                  }
                }
                else
                {
                  v15 = cstdlib_strstr(*(char **)(v5 + 16 * v6 + 8), "prm");
                  if (v15)
                    *(_BYTE *)(a1 + 80) = v15[3];
                }
              }
              else
              {
                *(_DWORD *)(a1 + 88) = 1;
              }
            }
            else
            {
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(v5 + 16 * v6 + 8);
            }
          }
          else
          {
            v8 = *(uint64_t **)(*(_QWORD *)a1 + 8);
            v9 = *(_QWORD *)(v3 + 1304);
            v10 = v5 + 16 * v6;
            v12 = *(const char **)(v10 + 8);
            v11 = (const char **)(v10 + 8);
            v13 = cstdlib_strlen(v12);
            v14 = (char *)heap_Realloc(v8, v9, (v13 + 1));
            *(_QWORD *)(v3 + 1304) = v14;
            if (!v14)
              return 2382372874;
            cstdlib_strcpy(v14, *v11);
          }
          v4 = v6 + 1;
        }
        while (*(_DWORD *)(v3 + 1336) > (unsigned __int16)(v6 + 1));
      }
      return 0;
    }
  }
  return v1;
}

_QWORD *traceFeatureVector_0(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4, uint64_t a5)
{
  const char **v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v6 = a3;
  v8 = 1;
  v9 = (unsigned __int16)(*(unsigned __int8 *)(a2 + 1296) - 1);
  if (*(_BYTE *)(a2 + 1296) != 1)
  {
    v10 = (unsigned __int16)(*(unsigned __int8 *)(a2 + 1296) - 1);
    v11 = a3;
    do
    {
      v12 = *v11++;
      v8 += cstdlib_strlen(v12) + 1;
      --v10;
    }
    while (v10);
  }
  v13 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v8);
  if (!v13)
    return (_QWORD *)log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"PRMFX", 0, 0, (uint64_t)"in traceFeatureVector(): allocating %d bytes failed", v14, v15, v16, v8);
  v17 = v13;
  *v13 = 0;
  if (v9)
  {
    v18 = v9;
    do
    {
      cstdlib_strcat(v17, " ");
      v19 = *v6++;
      cstdlib_strcat(v17, v19);
      --v18;
    }
    while (v18);
  }
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"PRMFX", 5, 0, (uint64_t)"traceFeatureVector igtree [%02d] %-16.*s | %-54s | %.*s %s", v14, v15, v16, a5);
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v17);
}

uint64_t consistencyCheck3(uint64_t a1, uint64_t a2, uint64_t a3, signed __int16 *a4)
{
  signed __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v15;
  __int16 v16;
  BOOL v17;
  const char *v18;
  size_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v21;
  __int16 v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v24;
  __int16 v25;
  __int16 v28;

  if (!*a4)
    return 0;
  v7 = 0;
  v8 = 0;
  v28 = 0;
  v9 = -1;
  do
  {
    v10 = *((_QWORD *)a4 + 4);
    v11 = *(unsigned __int8 *)(v10 + 56 * v7 + 40);
    if (v11 == 49)
    {
      if ((v9 & 0x8000) != 0)
        goto LABEL_17;
      v17 = *(unsigned __int8 *)(v10 + 56 * v9 + 40) >= 0x32u;
LABEL_15:
      if (!v17)
        v9 = v7;
      goto LABEL_17;
    }
    if (v11 == 50)
    {
      if ((v9 & 0x8000) != 0)
        goto LABEL_17;
      v17 = *(unsigned __int8 *)(v10 + 56 * v9 + 40) >= 0x33u;
      goto LABEL_15;
    }
    if (v11 != 51)
      goto LABEL_17;
    if ((v9 & 0x8000) == 0)
    {
      v12 = v9;
      v13 = *(unsigned __int8 *)(v10 + 56 * v9 + 40);
      v9 = v7;
      if (v13 != 51)
        goto LABEL_17;
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
      v15 = *(unsigned __int16 *)(v10 + 56 * v12 + 4);
      v16 = cstdlib_strlen("2");
      v8 = v14(a2, a3, v15, 13, (unsigned __int16)(v16 + 1), "2", &v28);
      if ((v8 & 0x80000000) != 0)
        return v8;
      v10 = *((_QWORD *)a4 + 4);
    }
    v9 = v7;
LABEL_17:
    if ((v9 & 0x8000u) != 0)
      v9 = v7;
    v18 = *(const char **)(v10 + 56 * v7 + 32);
    if (v18)
    {
      v19 = *(_QWORD *)(v10 + 56 * v7 + 24);
      if (v19)
      {
        if (cstdlib_strncmp(v18, "%", v19))
        {
          v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
          v21 = *(unsigned __int16 *)(*((_QWORD *)a4 + 4) + 56 * (__int16)v9 + 4);
          v22 = cstdlib_strlen("3");
          v8 = v20(a2, a3, v21, 13, (unsigned __int16)(v22 + 1), "3", &v28);
          if ((v8 & 0x80000000) != 0)
            return v8;
          v9 = -1;
        }
      }
    }
    ++v7;
  }
  while ((unsigned __int16)*a4 > v7);
  if ((v9 & 0x8000) == 0)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
    v24 = *(unsigned __int16 *)(*((_QWORD *)a4 + 4) + 56 * v9 + 4);
    v25 = cstdlib_strlen("3");
    return v23(a2, a3, v24, 13, (unsigned __int16)(v25 + 1), "3", &v28);
  }
  return v8;
}

uint64_t consistencyCheck2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4;
  __int16 v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v15;
  __int16 v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v18;
  __int16 v19;
  __int16 v20;

  v4 = *a4;
  if (!*a4)
    return 0;
  v9 = 0;
  result = 0;
  v20 = 0;
  v11 = -1;
  do
  {
    v12 = *((_QWORD *)a4 + 4);
    v13 = *(unsigned __int8 *)(v12 + 56 * v9 + 40);
    if (v13 == 49)
    {
      if ((v11 & 0x8000) == 0 && *(unsigned __int8 *)(v12 + 56 * (unsigned __int16)v11 + 40) < 0x32u)
        v11 = v9;
    }
    else if (v13 == 50)
    {
      v11 = v9;
    }
    if (v11 < 0)
      v11 = v9;
    if (*(_DWORD *)(v12 + 56 * v9 + 48))
    {
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
      v15 = *(unsigned __int16 *)(v12 + 56 * v11 + 4);
      v16 = cstdlib_strlen("2");
      result = v14(a2, a3, v15, 13, (unsigned __int16)(v16 + 1), "2", &v20);
      if ((result & 0x80000000) != 0)
        return result;
      v4 = *a4;
      v11 = -1;
    }
    ++v9;
  }
  while (v4 > v9);
  if ((v11 & 0x8000) == 0)
  {
    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a1 + 160);
    v18 = *(unsigned __int16 *)(*((_QWORD *)a4 + 4) + 56 * (unsigned __int16)v11 + 4);
    v19 = cstdlib_strlen("2");
    return v17(a2, a3, v18, 13, (unsigned __int16)(v19 + 1), "2", &v20);
  }
  return result;
}

uint64_t fe_msp_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v5 = 2705334279;
  v23 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v25);
    if ((inited & 0x80000000) != 0)
      return inited;
    Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"LINGDB", &v24);
    if ((Object & 0x80000000) != 0)
      goto LABEL_11;
    Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"FE_DCTLKP", &v23);
    if ((Object & 0x80000000) != 0)
      goto LABEL_11;
    v11 = heap_Alloc(*(_QWORD *)(v25 + 8), 216);
    v16 = v25;
    if (v11)
    {
      v17 = v11;
      *(_QWORD *)v11 = v25;
      *(_QWORD *)(v11 + 8) = a3;
      *(_QWORD *)(v11 + 16) = a4;
      *(_QWORD *)(v11 + 200) = *(_QWORD *)(v24 + 8);
      v18 = v23;
      *(_QWORD *)(v11 + 40) = *(_QWORD *)(v23 + 8);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v18 + 16);
      *(_QWORD *)(v11 + 120) = 0;
      *(_QWORD *)(v11 + 208) = 0;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjOpen", v13, v14, v15, v22);
      Object = msp_check_dctlkp_version((_QWORD *)v17);
      if ((Object & 0x80000000) != 0)
        goto LABEL_11;
      *(_QWORD *)(v17 + 48) = heap_Alloc;
      *(_QWORD *)(v17 + 56) = heap_Calloc;
      *(_QWORD *)(v17 + 64) = heap_Realloc;
      *(_QWORD *)(v17 + 72) = heap_Free;
      v19 = OOCAllocator_Con(v17 + 80, (_OWORD *)(v17 + 48), *(_QWORD *)(*(_QWORD *)v17 + 8));
      v20 = LH_ERROR_to_VERROR(v19);
      if ((v20 & 0x80000000) == 0)
      {
        *(_DWORD *)(v17 + 192) = 0;
        cstdlib_memset((void *)(v17 + 160), 0, 0x20uLL);
        cstdlib_memset((void *)(v17 + 128), 0, 0x20uLL);
        Object = msp_prepare_voice_specific_msp_luavm(v17);
        if ((Object & 0x80000000) == 0)
        {
          v5 = msp_prepare_common_msp_luavm(v17);
          if ((v5 & 0x80000000) == 0)
          {
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 1065;
            return v5;
          }
LABEL_16:
          fe_msp_ObjClose(*(uint64_t **)a5, *(_QWORD *)(a5 + 8));
          return v5;
        }
LABEL_11:
        v5 = Object;
        goto LABEL_16;
      }
      v5 = v20;
      v16 = v25;
    }
    else
    {
      v5 = 2705334282;
    }
    log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"FE_MSP", 78000, 0, v12, v13, v14, v15, v22);
    goto LABEL_16;
  }
  return v5;
}

uint64_t fe_msp_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = 2705334280;
  v4 = safeh_HandleCheck((uint64_t)a1, a2, 1065, 216);
  if ((v4 & 0x80000000) == 0)
  {
    if (a1)
    {
      v8 = v4;
      log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjClose", v5, v6, v7, v10);
      msp_deallocate_supported_styles((uint64_t)a1, (uint64_t)(a1 + 20));
      msp_deallocate_supported_styles((uint64_t)a1, (uint64_t)(a1 + 16));
      luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 10), a1 + 20);
      luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 10), a1 + 16);
      OOCAllocator_Des();
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"LINGDB");
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
      return v8;
    }
    else
    {
      return 2705334282;
    }
  }
  return v3;
}

uint64_t fe_msp_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = 2705334280;
  if ((safeh_HandleCheck(a1, a2, 1065, 216) & 0x80000000) == 0)
  {
    if (a1)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_ObjReopen", v4, v5, v6, v9);
      v7 = msp_check_dctlkp_version((_QWORD *)a1);
      if ((v7 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 192) = 0;
        v7 = msp_prepare_voice_specific_msp_luavm(a1);
        if ((v7 & 0x80000000) == 0)
          return msp_prepare_common_msp_luavm(a1);
      }
      return v7;
    }
    else
    {
      return 2705334282;
    }
  }
  return v3;
}

uint64_t fe_msp_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 1065, 216);
  if ((int)result >= 0)
    return result;
  else
    return 2705334280;
}

uint64_t fe_msp_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t has_set_style_marker;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = 0;
  v30 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1065, 216) & 0x80000000) != 0)
    return 2705334280;
  *a5 = 1;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering fe_msp_Process", v9, v10, v11, v29);
  has_set_style_marker = LingDBIsValid(a1[25], a3, a4, &v31);
  if ((has_set_style_marker & 0x80000000) == 0)
  {
    if ((_DWORD)v31 == 1)
    {
      has_set_style_marker = LingDBHasSentence(a1[25], a3, a4, (_DWORD *)&v31 + 1);
      if ((has_set_style_marker & 0x80000000) != 0)
        goto LABEL_24;
      if (HIDWORD(v31) == 1)
      {
        v16 = msp_touch_lingdb_instance(a1[25], a3, a4);
        if ((v16 & 0x80000000) != 0)
        {
LABEL_19:
          has_set_style_marker = v16;
          goto LABEL_24;
        }
        has_set_style_marker = msp_lingDB_has_set_style_marker(a1[25], a3, a4, &v30);
        if ((has_set_style_marker & 0x80000000) != 0)
          goto LABEL_24;
        if (v30 == 1 || a1[26])
        {
          has_set_style_marker = initLDO((uint64_t)(a1 + 10), a1 + 15);
          if ((has_set_style_marker & 0x80000000) != 0)
            goto LABEL_24;
          v17 = *a1;
          if (a1[15])
          {
            v16 = importFromLingDBWordRecord(v17, a1[25], a3, a4, a1 + 15, 1);
            if ((v16 & 0x80000000) == 0)
            {
              v16 = msp_prepare_ldo_for_lua_style_processing(a1, v18, v19, v20, v21, v22, v23, v24);
              if ((v16 & 0x80000000) == 0)
              {
                if (!a1[20]
                  || (v16 = msp_execute_voice_specific_msp_entry_point(a1, (uint64_t)"FE_MSP"), (v16 & 0x80000000) == 0))
                {
                  if (!a1[16]
                    || (v16 = msp_execute_common_msp_entry_point(a1, (uint64_t)"FE_MSP"), (v16 & 0x80000000) == 0))
                  {
                    v16 = exportToLingDBWordRecord(*a1, a1[25], a3, a4, (uint64_t)(a1 + 10), a1[15], 1);
                  }
                }
              }
            }
            goto LABEL_19;
          }
          v25 = *(_QWORD *)(v17 + 32);
          v26 = "Init LDO is NULL, returning";
        }
        else
        {
          v25 = *(_QWORD *)(*a1 + 32);
          v26 = "Sentence does not contain <esc>style, returning";
        }
      }
      else
      {
        v25 = *(_QWORD *)(*a1 + 32);
        v26 = "LingDB has no sentence, returning";
      }
    }
    else
    {
      v25 = *(_QWORD *)(*a1 + 32);
      v26 = "Empty or Invalid LingDB, returning";
    }
    log_OutText(v25, (uint64_t)"FE_MSP", 5, 0, (uint64_t)v26, v12, v13, v14, 0);
  }
LABEL_24:
  v27 = a1[15];
  if (v27)
  {
    deinitLDO((uint64_t)(a1 + 10), v27);
    a1[15] = 0;
  }
  return has_set_style_marker;
}

uint64_t fe_msp_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = safeh_HandleCheck(a1, a2, 1065, 216);
  if ((result & 0x80000000) != 0)
    return 2705334280;
  v4 = *(_QWORD *)(a1 + 208);
  if (v4)
  {
    v5 = OOC_PlacementDeleteObject(a1 + 80, v4);
    result = LH_ERROR_to_VERROR(v5);
    if ((result & 0x80000000) == 0)
      *(_QWORD *)(a1 + 208) = 0;
  }
  return result;
}

uint64_t fe_msp_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2705334273;
  result = 0;
  *a2 = &IFeMSP;
  return result;
}

uint64_t msp_check_dctlkp_version(_QWORD *a1)
{
  int v2;
  int v3;

  v3 = 0;
  v2 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, int *, int *))(a1[5] + 88))(a1[3], a1[4], &v3, &v2);
}

uint64_t msp_deallocate_supported_styles(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    result = OOC_PlacementDeleteObject(result + 80, v3);
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t msp_execute_common_msp_entry_point(_QWORD *a1, uint64_t a2)
{
  return loc_process_ldo_with_lua(a1, a1 + 16, (uint64_t)"runMsp", a1[21], a2);
}

uint64_t loc_process_ldo_with_lua(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v8 = *a2;
  v9 = a1[15];
  if (a4)
    v10 = LuaVMLDO_RunFunctionWithLDOAndTableArguments(v8, a3, v9, a4);
  else
    v10 = LuaVMLDO_RunFunction(v8, a3, v9);
  v15 = LH_ERROR_to_VERROR(v10);
  if ((v15 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(*a1 + 32), a5, 78002, 0, v11, v12, v13, v14, v17);
  return v15;
}

uint64_t msp_execute_voice_specific_msp_entry_point(_QWORD *a1, uint64_t a2)
{
  return loc_process_ldo_with_lua(a1, a1 + 20, (uint64_t)"runVoiceMsp", 0, a2);
}

uint64_t msp_lingDB_has_set_style_marker(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  int v13;

  v13 = 0;
  v12 = 0;
  *a4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v13 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int **, int *))(a1 + 176))(a2, a3, HIWORD(v13), 1, &v12, &v13);
    if ((result & 0x80000000) == 0)
    {
      v9 = (unsigned __int16)v13;
      if ((_WORD)v13)
      {
        v10 = v12;
        while (1)
        {
          v11 = *v10;
          v10 += 8;
          if (v11 == 60)
            break;
          if (!--v9)
            return result;
        }
        *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t msp_prepare_common_msp_luavm(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 144) = "runMsp";
  *(_QWORD *)(a1 + 152) = "getSupportedStylesMsp";
  v6 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 128), "msp");
  if ((v6 & 0x80000000) == 0)
  {
    if (*v2)
    {
      *(_DWORD *)(a1 + 192) = 1;
      v7 = "Common MSP data available";
    }
    else
    {
      v7 = "No common MSP data available";
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)v7, v3, v4, v5, v9);
  }
  return v6;
}

uint64_t loc_prepare_luavm(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int IsLuaFunctionAvailable;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;

  v7 = a2 + 1;
  v6 = a2[1];
  if (v6)
  {
    OOC_PlacementDeleteObject(a1 + 80, v6);
    *v7 = 0;
  }
  v8 = PNEW_LDOObject_Con(a1 + 80, a1 + 80, v7);
  v9 = LH_ERROR_to_VERROR(v8);
  if ((v9 & 0x80000000) != 0)
  {
    v14 = v9;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v18 = "Error creating LDOObject for supported styles";
LABEL_17:
    log_OutText(v19, (uint64_t)"FE_MSP", 4, 0, (uint64_t)v18, v10, v11, v12, v21);
    return v14;
  }
  v13 = luavmldoutil_initialize_lua_vm(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 80, a2[2], (uint64_t)loc_lua_log_callback, a2, a3);
  v14 = v13;
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) != 0xA)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Ignoring error from LuaVM initialize", v10, v11, v12, v21);
      return 0;
    }
    return v14;
  }
  v15 = *a2;
  if (!*a2)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v18 = "No data to initialize LuaVM, returning";
    goto LABEL_17;
  }
  v22 = 0;
  IsLuaFunctionAvailable = LuaVMLDO_IsLuaFunctionAvailable(v15, a2[3], &v22);
  v14 = LH_ERROR_to_VERROR(IsLuaFunctionAvailable);
  if ((v14 & 0x80000000) != 0)
  {
    v18 = "Ignoring error from LuaVM get supported styles";
    goto LABEL_16;
  }
  if (v22 != 1)
  {
    v18 = "No Lua function to get supported styles found";
    goto LABEL_16;
  }
  LuaVMLDO_RunFunctionReturningTable(*a2, a2[3], a2[1]);
  v14 = LH_ERROR_to_VERROR(v17);
  if ((v14 & 0x80000000) != 0)
  {
    v18 = "Error executing the Lua function to get supported styles";
LABEL_16:
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    goto LABEL_17;
  }
  return v14;
}

uint64_t msp_prepare_ldo_for_lua_style_processing(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  int Type;
  uint64_t is_style_supported_by_lua;
  int StringAttribute;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  int AbsoluteFrom;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  const char **v47;
  char **v48;
  char **v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t *v70;
  size_t v71;
  size_t v72;
  int v73;
  int v74;
  const char *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  char **v81;
  uint64_t *__src;
  int v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *__s1;
  uint64_t v89;
  const char *v90[2];

  v79 = 0;
  v80 = 0;
  v81 = 0;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Entering prepare ldo for lua processing", a6, a7, a8, v77);
  v84 = 0;
  v85 = 0;
  v90[0] = 0;
  v87 = 0;
  __s1 = 0;
  __src = 0;
  v86 = 0;
  v9 = *(_QWORD *)(a1[15] + 32);
  v10 = *(uint64_t ***)(v9 + 24);
  if ((unint64_t)v10 < *(_QWORD *)(v9 + 32))
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      __src = *v10;
      Type = LDOObject_GetType((uint64_t)__src, (uint64_t *)v90);
      is_style_supported_by_lua = LH_ERROR_to_VERROR(Type);
      if ((is_style_supported_by_lua & 0x80000000) != 0)
        goto LABEL_133;
      if (!cstdlib_strcmp(v90[0], "MARKER_SET_STYLE"))
      {
        StringAttribute = LDOObject_GetStringAttribute(__src, "STRARGS", &v84, (uint64_t *)&__s1);
        is_style_supported_by_lua = LH_ERROR_to_VERROR(StringAttribute);
        if ((is_style_supported_by_lua & 0x80000000) != 0)
          goto LABEL_133;
        if ((_DWORD)v84 == 1)
        {
          v17 = __s1;
          v83 = 0;
          if (cstdlib_strcmp(__s1, "default"))
          {
            is_style_supported_by_lua = loc_is_style_supported_by_lua((uint64_t)a1, (uint64_t)(a1 + 20), v17, &v83);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              goto LABEL_133;
            is_style_supported_by_lua = loc_is_style_supported_by_lua((uint64_t)a1, (uint64_t)(a1 + 16), v17, &v83);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              goto LABEL_133;
            if (!v83)
            {
              v18 = (unint64_t)&v11[-v12];
              v19 = ((unint64_t)&v11[-v12] >> 3) + 1;
              if (v19 > v13)
              {
                v20 = 2 * v13;
                if (2 * v13 >= v13 + 1000000)
                  v20 = v13 + 1000000;
                if (v20 > v19)
                  v19 = v20;
                if (v19 <= 8)
                  v13 = 8;
                else
                  v13 = v19;
                v21 = OOCAllocator_Realloc((uint64_t)(a1 + 10), v12, 8 * v13, (_DWORD *)&v84 + 1);
                if (HIDWORD(v84))
                  goto LABEL_27;
                v12 = v21;
                v11 = (char *)(v21 + (v18 & 0x7FFFFFFF8));
              }
              cstdlib_memcpy(v11, &__src, 8uLL);
              v11 += 8;
            }
          }
          else
          {
            v83 = 1;
          }
        }
      }
      if ((unint64_t)++v10 >= *(_QWORD *)(*(_QWORD *)(a1[15] + 32) + 32))
        goto LABEL_26;
    }
  }
  v13 = 0;
  v12 = 0;
  v11 = 0;
LABEL_26:
  v86 = v12;
  v87 = v11;
  LODWORD(v85) = v13;
  is_style_supported_by_lua = loc_delete_style_markers((uint64_t)a1, (uint64_t)&v85);
  if ((is_style_supported_by_lua & 0x80000000) != 0)
  {
LABEL_133:
    v28 = is_style_supported_by_lua;
    goto LABEL_134;
  }
LABEL_27:
  LODWORD(__src) = 0;
  v90[0] = 0;
  v87 = 0;
  __s1 = 0;
  v85 = 0;
  v86 = 0;
  v22 = *(_QWORD *)(a1[15] + 32);
  v23 = *(const char ***)(v22 + 24);
  if ((unint64_t)v23 < *(_QWORD *)(v22 + 32))
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v90[0] = *v23;
      v27 = LDOObject_GetType((uint64_t)v90[0], (uint64_t *)&__s1);
      v28 = LH_ERROR_to_VERROR(v27);
      if ((v28 & 0x80000000) != 0)
        break;
      if (!cstdlib_strcmp(__s1, "MARKER_SET_STYLE")
        || (v29 = __s1, !cstdlib_strcmp(__s1, "MARKER_INSERT_PROMPT"))
        || !cstdlib_strcmp(v29, "MARKER_INSERT_AUDIO")
        || !cstdlib_strcmp(v29, "MARKER_SET_TYPE_OF_INPUT")
        || !cstdlib_strcmp(v29, "MARKER_SET_PINYIN"))
      {
        v30 = (unint64_t)&v24[-v25];
        v31 = ((unint64_t)&v24[-v25] >> 3) + 1;
        if (v31 > v26)
        {
          v32 = 2 * v26;
          if (2 * v26 >= v26 + 1000000)
            v32 = v26 + 1000000;
          if (v32 > v31)
            v31 = v32;
          if (v31 <= 8)
            v26 = 8;
          else
            v26 = v31;
          v33 = OOCAllocator_Realloc((uint64_t)(a1 + 10), v25, 8 * v26, &__src);
          v25 = v33;
          if ((_DWORD)__src)
            break;
          v24 = (char *)(v33 + (v30 & 0x7FFFFFFF8));
        }
        cstdlib_memcpy(v24, v90, 8uLL);
        v24 += 8;
      }
      if ((unint64_t)++v23 >= *(_QWORD *)(*(_QWORD *)(a1[15] + 32) + 32))
        goto LABEL_49;
    }
LABEL_70:
    if (!v25)
      goto LABEL_72;
    goto LABEL_71;
  }
  v28 = 0;
  v25 = 0;
  v24 = 0;
LABEL_49:
  if (((unint64_t)&v24[-v25] & 0x7FFFFFFF0) == 0)
    goto LABEL_70;
  v34 = 0;
  v35 = v87;
  v78 = v86;
  v36 = ((unint64_t)&v24[-v25] >> 3);
  v37 = v85;
  do
  {
    v90[0] = *(const char **)(v25 + 8 * v34);
    LDOObject_GetType((uint64_t)v90[0], (uint64_t *)&__s1);
    v38 = v34 + 1;
    if (cstdlib_strcmp(__s1, "MARKER_SET_STYLE"))
      v39 = 1;
    else
      v39 = v38 >= v36;
    if (!v39)
    {
      v40 = *(_QWORD *)(v25 + 8 * v34 + 8);
      LDOObject_GetType(v40, (uint64_t *)&__s1);
      if (!cstdlib_strcmp(__s1, "MARKER_SET_STYLE"))
      {
        AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v90[0]);
        if (AbsoluteFrom == LDOLabel_GetAbsoluteFrom(v40))
        {
          v42 = (unint64_t)&v35[-v78];
          v43 = ((unint64_t)&v35[-v78] >> 3) + 1;
          if (v43 > v37)
          {
            v44 = 2 * v37;
            if (2 * v37 >= v37 + 1000000)
              v44 = v37 + 1000000;
            if (v44 > v43)
              v43 = v44;
            if (v43 <= 8)
              v37 = 8;
            else
              v37 = v43;
            v45 = OOCAllocator_Realloc((uint64_t)(a1 + 10), v78, 8 * v37, &__src);
            v86 = v45;
            if ((_DWORD)__src)
              goto LABEL_71;
            LODWORD(v85) = v37;
            v78 = v45;
            v35 = (char *)(v45 + (v42 & 0x7FFFFFFF8));
            v87 = v35;
          }
          cstdlib_memcpy(v35, v90, 8uLL);
          v35 += 8;
          v87 = v35;
        }
      }
    }
    v34 = v38;
  }
  while (v36 != v38);
  v28 = loc_delete_style_markers((uint64_t)a1, (uint64_t)&v85);
LABEL_71:
  OOCAllocator_Free((uint64_t)(a1 + 10), v25);
LABEL_72:
  if ((v28 & 0x80000000) != 0)
  {
LABEL_134:
    v48 = v80;
    goto LABEL_135;
  }
  LODWORD(__s1) = 0;
  v85 = 0;
  v46 = *(_QWORD *)(a1[15] + 32);
  v47 = *(const char ***)(v46 + 24);
  v48 = v80;
  v49 = v81;
  if ((unint64_t)v47 >= *(_QWORD *)(v46 + 32))
  {
LABEL_90:
    v85 = 0;
    if (v49 > v48 && (((char *)v49 - (char *)v48) & 0x7FFFFFFF8) != 0)
    {
      while (1)
      {
        v85 = *v48;
        if (!LDOLabel_GetAbsoluteFrom((uint64_t)v85))
          break;
        if (++v48 >= v49)
          goto LABEL_99;
      }
    }
    if (!a1[26])
      goto LABEL_99;
    LODWORD(v90[0]) = 0;
    LODWORD(__s1) = 0;
    v58 = LDO_AddLabelOnSubstring(a1[15], "MARKER", "MARKER_SET_STYLE", (unsigned int *)v90, (unsigned int *)&__s1, &v85);
    is_style_supported_by_lua = LH_ERROR_to_VERROR(v58);
    if ((is_style_supported_by_lua & 0x80000000) == 0)
    {
      LDOObject_SetU32Attribute((uint64_t)v85, "_MTYPE", 60);
      is_style_supported_by_lua = LH_ERROR_to_VERROR(v59);
      if ((is_style_supported_by_lua & 0x80000000) == 0)
      {
        v60 = v85;
        v61 = (char *)LHString_BorrowCPtr(a1[26]);
        v62 = LDOObject_SetStringAttribute((uint64_t)v60, "STRARGS", v61);
        is_style_supported_by_lua = LH_ERROR_to_VERROR(v62);
        if ((is_style_supported_by_lua & 0x80000000) == 0)
        {
LABEL_99:
          v85 = 0;
          v86 = 0;
          v90[0] = 0;
          v90[1] = 0;
          __s1 = 0;
          v89 = 0;
          v63 = *(_QWORD *)(a1[15] + 16);
          v64 = *(uint64_t ***)(v63 + 80);
          v65 = *(_QWORD *)(v63 + 88);
          if ((unint64_t)v64 >= v65)
          {
            v28 = 0;
            goto LABEL_134;
          }
          v66 = a1 + 26;
          v67 = *(uint64_t ***)(v63 + 80);
          v68 = v64;
          while (1)
          {
            v70 = *v68++;
            v69 = v70;
            v71 = (unint64_t)v68 >= v65 ? 0 : (size_t)*v68;
            v72 = v67 <= v64 ? 0 : (size_t)*(v67 - 1);
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node((size_t)v69, (uint64_t)&v79, (uint64_t)&v85);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node(v72, (uint64_t)&v79, (uint64_t)v90);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            is_style_supported_by_lua = loc_find_style_suitable_for_given_node(v71, (uint64_t)&v79, (uint64_t)&__s1);
            if ((is_style_supported_by_lua & 0x80000000) != 0)
              break;
            if (v85)
            {
              v73 = *v66 ? LHString_Erase(*v66) : PNEW_LDOString_Con((uint64_t)(a1 + 10), (uint64_t)(a1 + 10), a1 + 26);
              is_style_supported_by_lua = LH_ERROR_to_VERROR(v73);
              if ((is_style_supported_by_lua & 0x80000000) != 0)
                break;
              v74 = LHString_Append(*v66, v85);
              is_style_supported_by_lua = LH_ERROR_to_VERROR(v74);
              if ((is_style_supported_by_lua & 0x80000000) != 0)
                break;
            }
            if (*v66)
            {
              v28 = 0;
              if ((_DWORD)v89)
              {
                if (HIDWORD(v89))
                {
                  v28 = loc_set_nlu_attribute((uint64_t)a1, v85, v69, 2);
                  if ((v28 & 0x80000000) != 0)
                    goto LABEL_134;
                }
              }
              if (!(_DWORD)v86)
                goto LABEL_142;
              v28 = loc_set_nlu_attribute((uint64_t)a1, v85, v69, 0);
              if ((v28 & 0x80000000) != 0)
                goto LABEL_134;
              if (!HIDWORD(v86))
              {
                if (v90[0])
                {
                  v28 = loc_set_nlu_attribute((uint64_t)a1, v90[0], v69, 2);
                  if ((v28 & 0x80000000) != 0)
                    goto LABEL_134;
                }
              }
              if (!(_DWORD)v86)
              {
LABEL_142:
                if (!(_DWORD)v89 || !HIDWORD(v89))
                {
                  v75 = (const char *)LHString_BorrowCPtr(a1[26]);
                  v28 = loc_set_nlu_attribute((uint64_t)a1, v75, v69, 1);
                  if ((v28 & 0x80000000) != 0)
                    goto LABEL_134;
                }
              }
            }
            else
            {
              v28 = 0;
            }
            v67 = v68;
            if ((unint64_t)v68 >= v65)
              goto LABEL_134;
          }
        }
      }
    }
    goto LABEL_133;
  }
  v50 = v79;
  while (1)
  {
    v90[0] = *v47;
    v51 = LDOObject_GetType((uint64_t)v90[0], (uint64_t *)&v85);
    v52 = LH_ERROR_to_VERROR(v51);
    if ((v52 & 0x80000000) != 0)
      break;
    if (!cstdlib_strcmp(v85, "MARKER_SET_STYLE"))
    {
      v53 = (char *)v49 - (char *)v48;
      v54 = ((unint64_t)((char *)v49 - (char *)v48) >> 3) + 1;
      if (v54 > v50)
      {
        v55 = 2 * v50;
        if (2 * v50 >= v50 + 1000000)
          v55 = v50 + 1000000;
        if (v55 > v54)
          v54 = v55;
        if (v54 <= 8)
          v56 = 8;
        else
          v56 = v54;
        v57 = OOCAllocator_Realloc((uint64_t)(a1 + 10), (uint64_t)v48, 8 * v56, &__s1);
        v48 = (char **)v57;
        if ((_DWORD)__s1)
        {
LABEL_89:
          v80 = v48;
          v81 = v49;
          LODWORD(v79) = v50;
          goto LABEL_90;
        }
        v49 = (char **)(v57 + (v53 & 0x7FFFFFFF8));
        v50 = v56;
      }
      cstdlib_memcpy(v49++, v90, 8uLL);
    }
    if ((unint64_t)++v47 >= *(_QWORD *)(*(_QWORD *)(a1[15] + 32) + 32))
      goto LABEL_89;
  }
  v28 = v52;
  v80 = v48;
  v81 = v49;
LABEL_135:
  LODWORD(v79) = 0;
  if (v48)
    OOCAllocator_Free((uint64_t)(a1 + 10), (uint64_t)v48);
  return v28;
}

uint64_t msp_prepare_voice_specific_msp_luavm(uint64_t a1)
{
  uint64_t voice_specific_broker_string;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _OWORD v10[16];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)(a1 + 176) = "runVoiceMsp";
  *(_QWORD *)(a1 + 184) = "getSupportedStylesVoiceMsp";
  voice_specific_broker_string = loc_generate_voice_specific_broker_string((uint64_t *)a1, (char *)v10, 1);
  if ((voice_specific_broker_string & 0x80000000) != 0)
    return voice_specific_broker_string;
  v3 = (_QWORD *)(a1 + 160);
  v7 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 160), (char *)v10);
  if ((v7 & 0x80000000) == 0)
  {
    if (*v3)
    {
      v8 = "Voice-specific MSP data available in the package";
      goto LABEL_5;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"No voice-specific MSP data available in the package", v4, v5, v6, *(uint64_t *)&v10[0]);
    voice_specific_broker_string = loc_generate_voice_specific_broker_string((uint64_t *)a1, (char *)v10, 0);
    if ((voice_specific_broker_string & 0x80000000) == 0)
    {
      v7 = loc_prepare_luavm(a1, (uint64_t *)(a1 + 160), (char *)v10);
      if ((v7 & 0x80000000) != 0)
        return v7;
      if (!*v3)
      {
        v8 = "No voice-specific MSP data available in the stage";
        goto LABEL_6;
      }
      v8 = "Voice-specific MSP data available in the stage";
LABEL_5:
      *(_DWORD *)(a1 + 192) = 1;
LABEL_6:
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)v8, v4, v5, v6, *(uint64_t *)&v10[0]);
      return v7;
    }
    return voice_specific_broker_string;
  }
  return v7;
}

uint64_t loc_generate_voice_specific_broker_string(uint64_t *a1, char *a2, int a3)
{
  uint64_t Str;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  char v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v17;
  char *__s2;
  _OWORD v19[16];
  char __s1[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  __s2 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)__s1 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  Str = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0)
    return Str;
  v7 = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"voice", &v17);
  if ((v7 & 0x80000000) == 0)
  {
    cstdlib_strncat(__s1, "msp/", 0x100uLL);
    v8 = 256 - cstdlib_strlen("msp/");
    cstdlib_strncat(__s1, __s2, v8);
    v9 = v8 - cstdlib_strlen(__s2);
    cstdlib_strncat(__s1, "/", v9);
    v10 = cstdlib_strlen("/");
    cstdlib_strncat(__s1, v17, (v9 - v10));
    v11 = __s1[0];
    if (__s1[0])
    {
      v12 = &__s1[1];
      do
      {
        *(v12 - 1) = cstdlib_tolower(v11);
        v13 = *v12++;
        v11 = v13;
      }
      while (v13);
    }
    if (a3 == 1)
    {
      v14 = *a1;
      v15 = (char *)v19;
      v7 = brokeraux_ComposeBrokerString(v14, __s1, 0, 0, 0, 0, 0, (char *)v19, 0x100uLL);
      if ((v7 & 0x80000000) != 0)
        return v7;
    }
    else
    {
      v15 = __s1;
    }
    cstdlib_strcpy(a2, v15);
  }
  return v7;
}

uint64_t msp_touch_lingdb_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v7 + 2);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(a1 + 160))(a2, a3, HIWORD(v7), 2, 1, "", &v7);
  return result;
}

uint64_t loc_lua_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"FE_MSP", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t loc_delete_style_markers(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    v6 = 0;
  }
  else
  {
    do
    {
      v5 = LDO_RemoveLabel(*(_QWORD *)(a1 + 120), *v4);
      v6 = LH_ERROR_to_VERROR(v5);
      if ((v6 & 0x80000000) != 0)
        break;
      ++v4;
    }
    while ((unint64_t)v4 < *(_QWORD *)(a2 + 16));
    v4 = *(uint64_t **)(a2 + 8);
  }
  *(_DWORD *)a2 = 0;
  if (v4)
  {
    OOCAllocator_Free(a1 + 80, (uint64_t)v4);
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  return v6;
}

uint64_t loc_is_style_supported_by_lua(uint64_t a1, uint64_t a2, char *a3, _DWORD *a4)
{
  int BoolAttribute;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (!*(_QWORD *)a2)
    return 0;
  BoolAttribute = LDOObject_GetBoolAttribute(*(uint64_t **)(a2 + 8), a3, (_DWORD *)&v14 + 1, &v14);
  v10 = LH_ERROR_to_VERROR(BoolAttribute);
  if ((v10 & 0x80000000) != 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_MSP", 4, 0, (uint64_t)"Error getting LDOObject BOOLean attribute", v7, v8, v9, v13);
  }
  else if (HIDWORD(v14) == 1 && (_DWORD)v14 == 1)
  {
    *a4 = 1;
  }
  return v10;
}

uint64_t loc_find_style_suitable_for_given_node(size_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t *v12;
  unsigned int AbsoluteFrom;
  int StringAttribute;
  uint64_t v17;

  v17 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  v3 = (_DWORD *)(a3 + 8);
  if (!a1)
    return 0;
  v7 = LDOTreeNode_ComputeAbsoluteFrom(a1, (_DWORD *)&v17 + 1);
  v8 = LH_ERROR_to_VERROR(v7);
  if ((v8 & 0x80000000) != 0)
    return v8;
  v9 = LDOTreeNode_ComputeAbsoluteTo(a1, &v17);
  v10 = LH_ERROR_to_VERROR(v9);
  if ((v10 & 0x80000000) == 0)
  {
    for (i = *(uint64_t **)(a2 + 8); (unint64_t)i < *(_QWORD *)(a2 + 16); ++i)
    {
      v12 = (uint64_t *)*i;
      AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*i);
      LDOLabel_GetAbsoluteFrom((uint64_t)v12);
      if (HIDWORD(v17) == AbsoluteFrom)
      {
        *(_DWORD *)(a3 + 12) = 1;
      }
      else if (!*(_DWORD *)(a3 + 12) && (AbsoluteFrom < HIDWORD(v17) || AbsoluteFrom > v17))
      {
        continue;
      }
      StringAttribute = LDOObject_GetStringAttribute(v12, "STRARGS", v3, (uint64_t *)a3);
      v10 = LH_ERROR_to_VERROR(StringAttribute);
      if ((v10 & 0x80000000) != 0 || *v3)
        return v10;
    }
  }
  return v10;
}

uint64_t loc_set_nlu_attribute(uint64_t a1, const char *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int StringAttribute;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  const char *v21;
  uint64_t v22;

  result = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (a2)
  {
    if (a3)
    {
      v9 = PNEW_LDOString_Con(a1 + 80, a1 + 80, &v22);
      result = LH_ERROR_to_VERROR(v9);
      if ((result & 0x80000000) == 0)
      {
        v10 = LHString_Append(v22, STYLE_KEYS[a4]);
        result = LH_ERROR_to_VERROR(v10);
        if ((result & 0x80000000) == 0)
        {
          v11 = LHString_Append(v22, a2);
          result = LH_ERROR_to_VERROR(v11);
          if ((result & 0x80000000) == 0)
          {
            v12 = LHString_Append(v22, ";");
            result = LH_ERROR_to_VERROR(v12);
            if ((result & 0x80000000) == 0)
            {
              StringAttribute = LDOObject_GetStringAttribute(a3, "NLU", &v20, (uint64_t *)&v21);
              result = LH_ERROR_to_VERROR(StringAttribute);
              if ((result & 0x80000000) == 0)
              {
                if (!v20
                  || (v14 = LHString_Append(v22, v21), result = LH_ERROR_to_VERROR(v14), (result & 0x80000000) == 0))
                {
                  v15 = (char *)LHString_BorrowCPtr(v22);
                  v16 = LDOObject_SetStringAttribute((uint64_t)a3, "NLU", v15);
                  result = LH_ERROR_to_VERROR(v16);
                }
              }
            }
          }
        }
      }
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = a1 + 80;
    do
    {
      v19 = OOC_PlacementDeleteObject(v18, v17);
      result = LH_ERROR_to_VERROR(v19);
      if ((result & 0x80000000) == 0)
        break;
      v17 = v22;
    }
    while (v22);
  }
  return result;
}

uint64_t tbmeg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2686459905;
  result = 0;
  *a2 = &ITbmeg;
  return result;
}

uint64_t tbmeg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Object;
  unsigned __int16 v15;
  int UInt;
  __int16 v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v5 = 2686459911;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    if ((InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 136);
      if (v10)
      {
        v11 = v10;
        *v10 = a3;
        v10[1] = a4;
        v10[4] = safeh_GetNullHandle();
        v11[5] = v12;
        v11[15] = safeh_GetNullHandle();
        v11[16] = v13;
        Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v11[6] = *(_QWORD *)(v20 + 8);
        Object = nuance_pcre_ObjOpen(a3, a4, (uint64_t)(v11 + 15));
        if ((Object & 0x80000000) != 0)
          goto LABEL_13;
        v15 = (int)paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"ppmaxpcreframeblocks", &v19) < 0 ? 30 : v19;
        UInt = paramc_ParamGetUInt(*(_QWORD *)(v21 + 40), (uint64_t)"ppnumframesinblock", &v19);
        v17 = v19;
        if (UInt < 0)
          v17 = 50;
        Object = nuance_pcre_Init((_QWORD *)v11[15], v11[16], v15, v17);
        if ((Object & 0x80000000) != 0)
        {
LABEL_13:
          v5 = Object;
          tbmeg_pObjClose((uint64_t)v11);
        }
        else
        {
          v5 = 0;
          *a5 = (uint64_t)v11;
          *((_DWORD *)a5 + 2) = 1029;
        }
      }
      else
      {
        return 2686459914;
      }
    }
  }
  return v5;
}

uint64_t tbmeg_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
  if ((result & 0x80000000) == 0)
  {
    tbmeg_ProcessEnd(a1, a2);
    return tbmeg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t tbmeg_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((result & 0x80000000) == 0)
    *a3 = tbmeg_ResourceTypes_SZ_TBMEG_CONTENT_TYPES;
  return result;
}

uint64_t tbmeg_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  const char *v11;
  uint64_t v15;
  uint64_t inited;
  uint64_t BinaryDataBroker;
  uint64_t NullHandle;
  _OWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t TextData;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t *v34;
  int __n[3];

  *(_QWORD *)&__n[1] = a5;
  __n[0] = a6;
  v7 = 2686459911;
  v33 = 0;
  v34 = 0;
  if (a3 && a7)
  {
    v11 = a4;
    if (a4)
    {
      if (!a5 && a6)
        return v7;
    }
    else if (!a5 || !a6)
    {
      return v7;
    }
    v15 = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
    if ((v15 & 0x80000000) != 0)
      return v15;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    inited = InitRsrcFunction((_WORD *)*a1, a1[1], &v34);
    if ((inited & 0x80000000) == 0)
    {
      BinaryDataBroker = inited;
      NullHandle = safeh_GetNullHandle();
      v19 = a1 + 4;
      if (!safeh_HandlesEqual(a1[4], a1[5], NullHandle, v20))
      {
        log_OutPublic(v34[4], (uint64_t)&modInfoTbm, 67001, 0, v21, v22, v23, v24, v33);
        return 2686459928;
      }
      if (!v11 || a5)
      {
        if (a5 && a6)
          goto LABEL_26;
      }
      else if (cstdlib_strstr(a3, "application/x-vocalizer-pt+bin") && cstdlib_strstr(a3, ";loader=broker"))
      {
        BinaryDataBroker = pts_ReadBinaryDataBroker((_WORD *)*a1, a1[1], v11, a1 + 4);
        if ((BinaryDataBroker & 0x80000000) == 0)
        {
          *(_OWORD *)a7 = *v19;
          goto LABEL_33;
        }
        goto LABEL_37;
      }
      v25 = brk_DataOpenEx(v34[3], (uint64_t)v11, 0, (uint64_t)&v33);
      if ((v25 & 0x80000000) != 0)
      {
        BinaryDataBroker = v25;
        goto LABEL_37;
      }
      BinaryDataBroker = brk_DataMapEx(v34[3], v33, 0, (uint64_t)__n, (uint64_t)&__n[1]);
      if ((BinaryDataBroker & 0x80000000) != 0)
      {
LABEL_37:
        v31 = v33;
        if (*(_QWORD *)&__n[1])
        {
          brk_DataUnmap(v34[3], v33, *(uint64_t *)&__n[1]);
          v31 = v33;
        }
        if (v31)
          brk_DataClose(v34[3], v31);
        if ((BinaryDataBroker & 0x80000000) != 0)
          tbmeg_ResourceUnload((uint64_t)a1, a2, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
        return BinaryDataBroker;
      }
      v26 = (_WORD *)heap_Alloc(v34[1], __n[0]);
      a1[2] = (uint64_t)v26;
      if (!v26)
        return 2686459914;
      cstdlib_memcpy(v26, *(const void **)&__n[1], __n[0]);
      *(_QWORD *)&__n[1] = a1[2];
LABEL_26:
      if (cstdlib_strstr(a3, "application/x-vocalizer-pt+text"))
      {
        TextData = pts_ReadTextData((_WORD *)*a1, a1[1], *(const char **)&__n[1], __n[0], a1 + 4, 0, 0);
      }
      else
      {
        if (!cstdlib_strstr(a3, "application/x-vocalizer-pt+bin"))
          goto LABEL_32;
        TextData = pts_ReadBinaryDataBuffer((_WORD *)*a1, a1[1], *(uint64_t *)&__n[1], __n[0], a1 + 4);
      }
      BinaryDataBroker = TextData;
      if ((TextData & 0x80000000) != 0)
        goto LABEL_37;
LABEL_32:
      *(_OWORD *)a7 = *v19;
      if (!v11)
      {
LABEL_34:
        v11 = "in-memory PTS";
LABEL_35:
        v28 = v34[1];
        v29 = cstdlib_strlen(v11);
        v30 = (char *)heap_Alloc(v28, (v29 + 1));
        a1[3] = (uint64_t)v30;
        if (v30)
        {
          cstdlib_strcpy(v30, v11);
          logLoadTemplateSet((uint64_t)v34);
          goto LABEL_37;
        }
        return 2686459914;
      }
LABEL_33:
      if (*v11)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  return v7;
}

uint64_t tbmeg_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NullHandle;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = 0;
  v6 = pts_HandleCheck(a3, a4);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v6 = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((v6 & 0x80000000) != 0)
    return v6;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v21);
  if ((inited & 0x80000000) != 0)
    return 2686459911;
  v8 = inited;
  v9 = v21;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v21 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(v9 + 32), 701, (uint64_t)"%s%s %s%s", v10, v11, v12, v13, v14, "BEG");
  NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v16))
  {
    pts_Free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    *(_QWORD *)(a1 + 32) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 40) = v17;
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (v18)
  {
    heap_Free(*(_QWORD **)(v21 + 8), v18);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    heap_Free(*(_QWORD **)(v21 + 8), v19);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v8;
}

uint64_t tbmeg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v8 = 2686459911;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1029, 136) & 0x80000000) != 0)
    return 2686459912;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v16) & 0x80000000) == 0)
  {
    a1[7] = a3;
    a1[8] = a4;
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual((uint64_t)a1[4], (int)a1[5], NullHandle, v10))
    {
      v12 = 0;
      do
      {
        v13 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[6] + 8))(a3, a4, 514, tbmeg_ProcessStart_szInput[v12], 0, 0, a1 + 13);
        if ((v13 & 0x80000000) == 0)
          break;
      }
      while (v12++ != 6);
      if (v13 < 0)
        a1[13] = 0;
      v15 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[6] + 8))(a3, a4, 514, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 9);
      if ((v15 & 0x80000000) != 0)
      {
        v8 = v15;
      }
      else
      {
        v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[6] + 8))(a3, a4, 514, "text/plain;charset=utf-8",
               0,
               1,
               a1 + 11);
        if ((v8 & 0x80000000) == 0)
          return v8;
      }
      tbmeg_ProcessEnd(a1, a2);
      return v8;
    }
    return 0;
  }
  return v8;
}

uint64_t tbmeg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int v28;
  uint64_t NullHandle;
  int v30;
  char *v31;
  char *v32;
  size_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  size_t __n;
  void *__dst;
  char *__s;
  char *__s1;
  uint64_t v42;
  char __s2[4];

  __s1 = 0;
  v42 = 0;
  __dst = 0;
  __s = 0;
  __n = 0;
  v7 = safeh_HandleCheck(a1, a2, 1029, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2686459911;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v42) & 0x80000000) == 0)
  {
    if (!*(_QWORD *)(a1 + 72) || !*(_QWORD *)(a1 + 88))
    {
      v8 = 0;
LABEL_15:
      v9 = 1;
LABEL_16:
      *a5 = v9;
      return v8;
    }
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t *))(*(_QWORD *)(a1 + 48) + 144))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      v9 = __n;
      if (!(_DWORD)__n)
      {
        v8 = 0;
        goto LABEL_16;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 48) + 88))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), &__s1, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        v10 = __s1;
        v11 = v42;
        v12 = HIDWORD(__n);
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v42 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v11 + 32), 702, (uint64_t)"%s%s", v13, v14, v15, v16, v17, "BEG");
          log_OutTraceTuningDataBinary(*(_QWORD *)(v11 + 32), 703, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)v10,
            v12);
        }
        v18 = HIDWORD(__n);
        strcpy(__s2, "﻿");
        if (HIDWORD(__n) >= 3)
        {
          if (cstdlib_strncmp(__s1, __s2, 3uLL))
          {
            v18 = HIDWORD(__n);
          }
          else
          {
            v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 3);
            if ((v20 & 0x80000000) != 0)
            {
              v35 = v20;
              v27 = 0;
              goto LABEL_39;
            }
            v18 = HIDWORD(__n) - 3;
            HIDWORD(__n) -= 3;
            __s1 += 3;
          }
        }
        v26 = (char *)heap_Alloc(*(_QWORD *)(v42 + 8), (v18 + 1));
        if (!v26)
          return 2686459914;
        v27 = v26;
        cstdlib_memcpy(v26, __s1, HIDWORD(__n));
        v27[HIDWORD(__n)] = 0;
        v28 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 96))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIDWORD(__n));
        if ((v28 & 0x80000000) != 0)
          goto LABEL_38;
        __s1 = 0;
        NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v30))
        {
          v31 = 0;
          __s = v27;
          v32 = v27;
        }
        else
        {
          pts_Apply(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128), v27, (uint64_t *)&__s);
          v32 = __s;
          v31 = v27;
          if (!__s)
            goto LABEL_32;
        }
        v33 = cstdlib_strlen(v32);
        if ((_DWORD)v33)
        {
          v34 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 48) + 112))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &__dst, v33);
          if ((v34 & 0x80000000) == 0)
          {
            if (__s)
              cstdlib_memcpy(__dst, __s, v33);
            logProcessOutput(v42, (uint64_t)__dst, v33);
            v27 = v31;
            goto LABEL_37;
          }
          v35 = v34;
          v27 = v31;
LABEL_39:
          log_OutTraceTuningData(*(uint64_t ***)(v42 + 32), 4, (uint64_t)"%s%s %s%u", v21, v22, v23, v24, v25, "END");
          if (v27)
            heap_Free(*(_QWORD **)(v42 + 8), (uint64_t)v27);
          if (__s)
            heap_Free(*(_QWORD **)(v42 + 8), (uint64_t)__s);
          v36 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 72))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
          if (v36 >= 0)
            v8 = v35;
          else
            v8 = v36;
          *(_QWORD *)(a1 + 88) = safeh_GetNullHandle();
          *(_QWORD *)(a1 + 96) = v37;
          goto LABEL_15;
        }
        v27 = v31;
LABEL_32:
        v28 = (*(uint64_t (**)(_QWORD, _QWORD, void **, uint64_t))(*(_QWORD *)(a1 + 48) + 112))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &__dst, 1);
        if ((v28 & 0x80000000) != 0)
        {
LABEL_38:
          v35 = v28;
          goto LABEL_39;
        }
        *(_BYTE *)__dst = 0;
        v33 = 1;
LABEL_37:
        v28 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 48) + 120))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v33);
        goto LABEL_38;
      }
    }
    return v7;
  }
  return v8;
}

uint64_t tbmeg_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 1029, 136);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[13], a1[14], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[13], a1[14]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[13] = safeh_GetNullHandle();
    a1[14] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[9], a1[10], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[9], a1[10]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[9] = safeh_GetNullHandle();
    a1[10] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[11], a1[12], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 72))(a1[11], a1[12]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[11] = safeh_GetNullHandle();
    a1[12] = v15;
  }
  return v3;
}

uint64_t tbmeg_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = 2686459911;
  v10 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      heap_Free(*(_QWORD **)(v10 + 8), v3);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (*(_QWORD *)(a1 + 48))
      objc_ReleaseObject(*(_QWORD *)(v10 + 48), (uint64_t)"SYNTHSTREAM");
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), NullHandle, v5))
    {
      pts_Free(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = safeh_GetNullHandle();
      *(_QWORD *)(a1 + 40) = v6;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      heap_Free(*(_QWORD **)(v10 + 8), v7);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = nuance_pcre_DeInit(*(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = nuance_pcre_ObjClose(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      heap_Free(*(_QWORD **)(v10 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t logLoadTemplateSet(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    return log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 700, (uint64_t)"%s%s %s%s %s%s", v3, v4, v5, v6, v7, "BEG");
  return result;
}

uint64_t logProcessOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    log_OutTraceTuningDataBinary(*(_QWORD *)(a1 + 32), 704, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8", a2, a3);
    return log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 702, (uint64_t)"%s%s", v7, v8, v9, v10, v11, "END");
  }
  return result;
}

uint64_t pts_strclone(uint64_t a1, char **a2, char *__s)
{
  uint64_t v3;
  size_t v7;
  char *v8;

  v3 = 2686459911;
  if (a2)
  {
    v7 = cstdlib_strlen(__s);
    v8 = (char *)heap_Alloc(a1, v7 + 1);
    *a2 = v8;
    if (v8)
    {
      cstdlib_strcpy(v8, __s);
      return 0;
    }
    else
    {
      return 2686459914;
    }
  }
  return v3;
}

uint64_t numberOfOccurrences(char *a1, char *__s)
{
  size_t v4;
  char *v5;
  uint64_t v6;

  if (!__s)
    return 0;
  v4 = cstdlib_strlen(__s);
  v5 = cstdlib_strstr(a1, __s);
  if (!v5)
    return 0;
  v6 = 0;
  do
  {
    ++v6;
    v5 = cstdlib_strstr(&v5[v4], __s);
  }
  while (v5);
  return v6;
}

uint64_t fillInSlots(uint64_t a1, char *a2, char *a3, unint64_t a4, int a5, char *a6, unint64_t a7, const char **a8)
{
  uint64_t appended;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  int64_t v23;
  _QWORD **v24;
  int v25;
  int v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  char *v34;
  char *v35;
  _QWORD **v36;
  _QWORD **v37;
  char *v38;
  unint64_t v39;
  uint64_t TnSequence;
  size_t v41;
  char *v42;
  const char *v43;
  size_t v44;
  const char *v45;
  unint64_t v47;
  _QWORD *v48;
  char *__s;
  _BOOL4 v50;
  BOOL v51;
  const char **v52;
  _QWORD **v53;
  _QWORD **v54;
  _QWORD **v55;
  _QWORD **v56;

  v53 = 0;
  v54 = 0;
  if (a7)
    *(_QWORD *)a7 = 0;
  if (a6)
    *a6 = 0;
  appended = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v54);
  if ((appended & 0x80000000) != 0)
  {
LABEL_77:
    v17 = appended;
    goto LABEL_84;
  }
  v17 = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v53);
  if ((v17 & 0x80000000) != 0)
    goto LABEL_84;
  v18 = cstdlib_strchr(a2, 36);
  v48 = (_QWORD *)a7;
  if (!v18)
  {
    v20 = 0;
    if (a6)
      goto LABEL_74;
    goto LABEL_75;
  }
  v19 = v18;
  v47 = a4;
  __s = a3;
  v20 = 0;
  v21 = ((unint64_t)a6 | a7) != 0;
  v50 = v21;
  if (!a8)
    v21 = 1;
  v51 = v21;
  v52 = a8;
  do
  {
    v22 = v19 + 1;
    if (!v19[1])
    {
      if (a8)
      {
        v45 = "use '$$' for literal dollar";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    v23 = v19 - a2;
    if (a6)
    {
      cstdlib_memcpy(&a6[v20], a2, v19 - a2);
      a6[v20 + v23] = 0;
      v20 += v23;
      if (*v22 == 36)
      {
        cstdlib_strcat(a6, "$");
        a8 = v52;
LABEL_16:
        ++v20;
        a2 = v19 + 2;
        goto LABEL_72;
      }
      a8 = v52;
    }
    else
    {
      v20 += v23;
      if (v19[1] == 36)
        goto LABEL_16;
    }
    v24 = v54;
    appended = ssftstring_Clear((uint64_t)v54);
    if ((appended & 0x80000000) != 0)
      goto LABEL_77;
    if (a8)
      *a8 = 0;
    v25 = *v22;
    v26 = v25;
    if (v25 == 123)
    {
      v26 = v19[2];
      v22 = v19 + 2;
    }
    if (v26)
    {
      v27 = 0;
      v28 = v22;
      while (cstdlib_strchr("0123456789", (char)v26))
      {
        v29 = *v28 + 10 * v27 - 48;
        if (v29 < v27)
        {
          v29 = 0;
          v31 = 0;
          v32 = "slot number a lot too big";
          a8 = v52;
          goto LABEL_34;
        }
        v30 = *++v28;
        LOBYTE(v26) = v30;
        v27 = v29;
        if (!v30)
          goto LABEL_31;
      }
      v29 = v27;
LABEL_31:
      v31 = v28 - v22;
      if (v51)
      {
        a8 = v52;
        goto LABEL_42;
      }
      a8 = v52;
      v33 = "";
      *v52 = "";
      if (v29)
      {
        v32 = "slot number too big";
        if (v29 <= v47)
        {
LABEL_41:
          if (*v33)
            goto LABEL_83;
          goto LABEL_42;
        }
      }
      else
      {
        v32 = "invalid slot number";
      }
LABEL_40:
      *a8 = v32;
      v33 = v32;
      goto LABEL_41;
    }
    v29 = 0;
    v31 = 0;
    v32 = "invalid slot number";
LABEL_34:
    if (!v51)
      goto LABEL_40;
LABEL_42:
    a2 = &v22[v31];
    if (v25 == 123)
    {
      if (*a2 != 58)
      {
        if (a8)
        {
          v45 = "bad slot reference: ':' expected";
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      v34 = cstdlib_strstr(a2 + 1, "}");
      if (!v34)
      {
        if (a8)
        {
          v45 = "bad slot reference: '}' expected";
          goto LABEL_82;
        }
LABEL_83:
        v17 = 2686459908;
        goto LABEL_84;
      }
      v35 = v34;
      appended = ssftstring_AppendCStrN((uint64_t)v24, a2 + 1, (int)v34 - ((int)a2 + 1));
      if ((appended & 0x80000000) != 0)
        goto LABEL_77;
      a2 = v35 + 1;
    }
    if (!a5 && ssftstring_Size((uint64_t)v54))
    {
      if (a8)
      {
        v45 = "slot type mapping not allowed";
LABEL_82:
        *a8 = v45;
      }
      goto LABEL_83;
    }
    if (v50)
    {
      v36 = v53;
      v37 = v54;
      v55 = 0;
      v56 = 0;
      v38 = __s;
      if (v29 >= 2)
      {
        v39 = v29 - 1;
        v38 = __s;
        do
        {
          v38 += cstdlib_strlen(v38) + 1;
          if (a5)
            v38 += cstdlib_strlen(v38) + 1;
          --v39;
        }
        while (v39);
      }
      v17 = ssftstring_AssignCStr((uint64_t)v36, v38);
      if ((v17 & 0x80000000) == 0 && ssftstring_Size((uint64_t)v37))
      {
        TnSequence = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v56);
        if ((TnSequence & 0x80000000) == 0)
        {
          TnSequence = ssftstring_ObjOpen(*(_QWORD **)(a1 + 8), &v55);
          if ((TnSequence & 0x80000000) == 0)
          {
            v41 = cstdlib_strlen(v38);
            TnSequence = makeTnSequence(&v38[v41 + 1], (uint64_t)v56);
            if ((TnSequence & 0x80000000) == 0)
            {
              v42 = (char *)ssftstring_CStr((uint64_t)v37);
              TnSequence = makeTnSequence(v42, (uint64_t)v55);
              if ((TnSequence & 0x80000000) == 0)
                TnSequence = ssftstring_ReplaceAllBy((uint64_t)v36, (uint64_t)v56, (uint64_t)v55);
            }
          }
        }
        v17 = TnSequence;
      }
      if (v56)
        ssftstring_ObjClose(v56);
      a8 = v52;
      if (v55)
        ssftstring_ObjClose(v55);
      if ((v17 & 0x80000000) != 0)
        goto LABEL_84;
      if (a6)
      {
        v43 = (const char *)ssftstring_CStr((uint64_t)v53);
        cstdlib_strcat(a6, v43);
      }
      v20 += ssftstring_Size((uint64_t)v53);
    }
    else
    {
      v17 = 0;
    }
LABEL_72:
    v19 = cstdlib_strchr(a2, 36);
  }
  while (v19);
  if (!a6)
    goto LABEL_75;
LABEL_74:
  cstdlib_strcat(a6, a2);
LABEL_75:
  v44 = cstdlib_strlen(a2);
  if (v48)
    *v48 = v20 + v44 + 1;
LABEL_84:
  if (v54)
    ssftstring_ObjClose(v54);
  if (v53)
    ssftstring_ObjClose(v53);
  return v17;
}

uint64_t pts_CheckDataConsistency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      if (*(_QWORD *)(a1 + 80))
      {
        v9 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)(a1 + 64))
        {
          if (v9)
          {
            if (*(_QWORD *)(a1 + 88) || !*(_DWORD *)(a1 + 96))
            {
              v10 = 2686459922;
              v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
              v12 = "Suspiciously initialized inputs";
            }
            else
            {
              if (!*(_QWORD *)(a1 + 104) && *(_DWORD *)(a1 + 112))
              {
                if (!*(_QWORD *)(a1 + 120))
                {
                  v10 = 2686459922;
                  v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
                  v12 = "Uninitialized input cache";
                  goto LABEL_24;
                }
                return 0;
              }
              v10 = 2686459922;
              v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
              v12 = "Suspiciously initialized outputs";
            }
          }
          else
          {
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "Missing handle on input offsets";
          }
        }
        else
        {
          if (v9)
            log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Suspiciously defined handle on input offsets", a6, a7, a8, v14);
          if (*(_QWORD *)(a1 + 88) && !*(_DWORD *)(a1 + 96))
          {
            if (*(_QWORD *)(a1 + 104) && !*(_DWORD *)(a1 + 112))
            {
              if (*(_QWORD *)(a1 + 120) || *(_BYTE *)(a1 + 128))
                log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Suspiciously configured input cache", a6, a7, a8, v14);
              return 0;
            }
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "uninitialized outputs";
          }
          else
          {
            v10 = 2686459922;
            v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            v12 = "uninitialized inputs";
          }
        }
      }
      else
      {
        v10 = 2686459922;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        v12 = "uninitialized input offsets";
      }
    }
    else
    {
      v10 = 2686459922;
      v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v12 = "unknown number of bytes of output sizes";
    }
  }
  else
  {
    v10 = 2686459922;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = "unknown number of bytes per output offset";
  }
LABEL_24:
  log_OutText(v11, (uint64_t)&modInfoTBM, 0, 0, (uint64_t)v12, a6, a7, a8, v14);
  return v10;
}

uint64_t pts_HandleCheck(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 1060, 144);
}

uint64_t pts_SetFormat(uint64_t a1, char *__s1)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    if (!cstdlib_strcmp(__s1, "Binary Template 1.0"))
      return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
    if (!cstdlib_strcmp(__s1, "Binary Template 2.0"))
    {
      *(_DWORD *)(a1 + 32) = 1;
      return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
    }
    if (cstdlib_strcmp(__s1, "Binary Template 2.1"))
    {
      if (!cstdlib_strcmp(__s1, "Binary Template 2.2"))
      {
        *(_QWORD *)(a1 + 32) = 0x100000001;
        return pts_strclone(*(_QWORD *)(*(_QWORD *)a1 + 8), (char **)(a1 + 8), __s1);
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&modInfoTBM, 0, 0, (uint64_t)"'%s' not supported anymore", v4, v5, v6, (uint64_t)"Binary Template 2.1");
    }
  }
  return 2686459911;
}

uint64_t pts_ReadBinaryDataBroker(_WORD *a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v30 = 0;
  v31 = 0;
  v4 = 2686459911;
  v29 = 0;
  if (!a3 || !a4 || (InitRsrcFunction(a1, a2, &v30) & 0x80000000) != 0)
    return v4;
  *a4 = safeh_GetNullHandle();
  a4[1] = v9;
  v10 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "PT10", 131846, (uint64_t *)&v29);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  v10 = pts_ReadBinaryData(v30, (uint64_t)v29, 0, &v31);
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  v18 = v31;
  v10 = brk_DataOpen(*(_QWORD *)(v30 + 24));
  if ((v10 & 0x80000000) != 0)
    goto LABEL_10;
  if (!*(_QWORD *)(v18 + 88))
  {
    v22 = *(_BYTE *)(v18 + 128);
    if (v22)
    {
      v23 = *(_QWORD *)(v18 + 40);
      while (!(v23 >> (v22 - 1)))
      {
        *(_BYTE *)(v18 + 128) = --v22;
        if (!v22)
        {
          v22 = 0;
          break;
        }
      }
    }
    v24 = heap_Calloc(*(_QWORD **)(v30 + 8), 1 << v22, 8);
    *(_QWORD *)(v18 + 120) = v24;
    if (!v24)
      return 2686459914;
    v25 = *(_BYTE *)(v18 + 128);
    if (v25)
    {
      v33 = 0;
      v34 = 0;
      v26 = 1 << v25;
      v32 = 0;
      v27 = (unint64_t)(1 << v25) >> 1;
      do
      {
        v28 = pts_BinSearch(v18, 0, v27, &v34, &v33, &v32);
        v4 = v28;
        if ((v28 & 0x80000000) != 0)
          break;
        ++v27;
      }
      while (v27 < v26);
      if ((v28 & 0x80000000) != 0)
        goto LABEL_11;
    }
  }
  v10 = pts_CheckDataConsistency(v18, v11, v12, v13, v14, v15, v16, v17);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_10:
    v4 = v10;
  }
  else
  {
    v4 = 0;
    *a4 = v18;
    *((_DWORD *)a4 + 2) = 1060;
  }
LABEL_11:
  if (v29)
  {
    v19 = ssftriff_reader_ObjClose(v29, v11, v12, v13, v14, v15, v16, v17);
    if (v19 >= 0 || (int)v4 <= -1)
      return v4;
    else
      return v19;
  }
  return v4;
}

uint64_t pts_ReadBinaryData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ChunkData;
  size_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  char **v33;
  size_t v34;
  unsigned int v35;
  unsigned int Position;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  char *__s;
  unsigned int v45;
  char __s1[4];
  char v47;

  v47 = 0;
  v45 = 0;
  *(_DWORD *)__s1 = 0;
  __s = 0;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 144);
  *a4 = v8;
  if (!v8)
    return 2686459914;
  v13 = v8;
  *(_QWORD *)v8 = a1;
  *(_DWORD *)(v8 + 116) = 0;
  v14 = ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, &v45, 0, v9, v10, v11, v12);
  if ((v14 & 0x80000000) == 0)
  {
    v43 = (_QWORD *)(v13 + 80);
    do
    {
      if (cstdlib_strcmp(__s1, "PTHE"))
      {
        if (cstdlib_strcmp(__s1, "PTOF"))
        {
          if (cstdlib_strcmp(__s1, "PTIP"))
          {
            if (cstdlib_strcmp(__s1, "PTOP"))
            {
              log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)&modInfoTBM, 4, 0, (uint64_t)"pts_ReadBinaryData unknown chunk type: '%s'", v25, v26, v27, (uint64_t)__s1);
            }
            else
            {
              Position = ssftriff_reader_GetPosition(a2);
              if (a3)
                *(_QWORD *)(v13 + 104) = a3 + Position;
              else
                *(_DWORD *)(v13 + 112) = Position;
            }
          }
          else
          {
            v35 = ssftriff_reader_GetPosition(a2);
            if (a3)
              *(_QWORD *)(v13 + 88) = a3 + v35;
            else
              *(_DWORD *)(v13 + 96) = v35;
          }
        }
        else if (v45 >= 4)
        {
          *(_QWORD *)(v13 + 40) = ((unint64_t)v45 >> 2) - 1;
          if (a3)
          {
            *v43 = a3 + ssftriff_reader_GetPosition(a2);
          }
          else
          {
            ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v13 + 72), v43, v20, v21, v22, v23, v24);
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_35;
          }
        }
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(a2, v45, &__s, v15, v16, v17, v18, v19);
        if ((ChunkData & 0x80000000) != 0
          || (ChunkData = pts_SetFormat(v13, __s), (ChunkData & 0x80000000) != 0)
          || (v29 = cstdlib_strlen(__s),
              __s += v29 + 1,
              ChunkData = pts_strclone(*(_QWORD *)(a1 + 8), (char **)(v13 + 16), __s),
              (ChunkData & 0x80000000) != 0))
        {
LABEL_35:
          v41 = ChunkData;
          goto LABEL_36;
        }
        v30 = cstdlib_strlen(*(const char **)(v13 + 16));
        v31 = &__s[v30 + 1];
        __s = v31;
        v32 = *(_QWORD *)(a1 + 8);
        v33 = (char **)(v13 + 24);
        if (*(_DWORD *)(v13 + 32))
        {
          ChunkData = pts_strclone(v32, v33, v31);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_35;
          v34 = cstdlib_strlen(*(const char **)(v13 + 24));
          __s += v34 + 1;
        }
        else
        {
          ChunkData = pts_strclone(v32, v33, "<>");
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_35;
        }
        *(_OWORD *)(v13 + 48) = xmmword_214F750B0;
        if (a3)
          *(_BYTE *)(v13 + 128) = 0;
        else
          *(_BYTE *)(v13 + 128) = 8;
      }
      ChunkData = ssftriff_reader_CloseChunk(a2);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_35;
      v14 = ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, &v45, 0, v37, v38, v39, v40);
    }
    while ((v14 & 0x80000000) == 0);
  }
  v41 = v14;
  if ((v14 & 0x1FFF) == 0x14)
    return 0;
LABEL_36:
  if (*a4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), *a4);
    *a4 = 0;
  }
  return v41;
}

uint64_t pts_ReadBinaryDataBuffer(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v5 = 2686459911;
  v24 = 0;
  if (a4)
  {
    if (a3)
    {
      if (a5)
      {
        v8 = a4;
        if ((InitRsrcFunction(a1, a2, &v25) & 0x80000000) == 0)
        {
          *a5 = safeh_GetNullHandle();
          a5[1] = v11;
          v12 = ssftriff_reader_ObjOpenEx(a1, a2, 4, "PromptTemplate in RAM", a3, v8, "PT10", 131846, (uint64_t *)&v24);
          if ((v12 & 0x80000000) != 0
            || (v12 = pts_ReadBinaryData(v25, (uint64_t)v24, a3, &v26), (v12 & 0x80000000) != 0)
            || (v20 = v26,
                v12 = pts_CheckDataConsistency(v26, v13, v14, v15, v16, v17, v18, v19),
                (v12 & 0x80000000) != 0))
          {
            v5 = v12;
          }
          else
          {
            v5 = 0;
            *a5 = v20;
            *((_DWORD *)a5 + 2) = 1060;
          }
          if (v24)
          {
            v21 = ssftriff_reader_ObjClose(v24, v13, v14, v15, v16, v17, v18, v19);
            if (v21 >= 0 || (int)v5 <= -1)
              return v5;
            else
              return v21;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t pts_Free(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8);
    if (v10)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      heap_Free(v11, v12);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      heap_Free(v11, v13);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v14 = *(_QWORD **)(a1 + 72);
    if (v14)
    {
      v9 = ssftriff_reader_ReleaseChunkData(v14, v13, v3, v4, v5, v6, v7, v8);
      *(_QWORD *)(a1 + 72) = 0;
    }
    else if (*(_DWORD *)(a1 + 116))
    {
      v15 = *(_QWORD *)(a1 + 80);
      if (v15)
        heap_Free(v11, v15);
    }
    *(_QWORD *)(a1 + 80) = 0;
    if (*(_DWORD *)(a1 + 116))
    {
      v16 = *(_QWORD *)(a1 + 88);
      if (v16)
        heap_Free(v11, v16);
    }
    *(_QWORD *)(a1 + 88) = 0;
    if (*(_QWORD *)(a1 + 120))
    {
      v17 = 0;
      do
        heap_Free(v11, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v17++));
      while (!(v17 >> *(_BYTE *)(a1 + 128)));
      heap_Free(v11, *(_QWORD *)(a1 + 120));
      *(_QWORD *)(a1 + 120) = 0;
    }
    if (*(_DWORD *)(a1 + 116))
    {
      v18 = *(_QWORD *)(a1 + 104);
      if (v18)
        heap_Free(v11, v18);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      brk_DataClose(*(_QWORD *)(*(_QWORD *)a1 + 24), v19);
      *(_QWORD *)(a1 + 64) = 0;
    }
    heap_Free(v11, a1);
  }
  return v9;
}

uint64_t pts_MatchSlots(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, _QWORD *a7)
{
  uint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v20;

  if (a4)
  {
    v7 = a5;
    v16 = a7;
    v17 = a6;
    v11 = 0;
    v12 = 0;
    while (v7)
    {
      v20 = v12;
      v13 = 0;
      v14 = 1;
      do
      {
        if (cstdlib_strcmp((const char *)(a3 + v11), ""))
        {
          if (cstdlib_strcmp((const char *)(a3 + v11), (const char *)(a2 + v13)))
            v14 = 0;
          else
            v14 = v14;
        }
        v13 += cstdlib_strlen((const char *)(a2 + v13)) + 1;
        v11 += cstdlib_strlen((const char *)(a3 + v11)) + 1;
        if (*(_DWORD *)(a1 + 36))
        {
          if (cstdlib_strcmp((const char *)(a3 + v11), "*"))
          {
            if (cstdlib_strcmp((const char *)(a3 + v11), (const char *)(a2 + v13)))
              v14 = 0;
            else
              v14 = v14;
          }
          v11 += cstdlib_strlen((const char *)(a3 + v11)) + 1;
          v13 += cstdlib_strlen((const char *)(a2 + v13)) + 1;
        }
        --v7;
      }
      while (v7);
      if ((_DWORD)v14)
      {
        a7 = v16;
        a6 = v17;
        v12 = v20;
        if (v16)
          goto LABEL_23;
        goto LABEL_24;
      }
      v11 += *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
      v12 = v20 + 1;
      v7 = a5;
      if (v11 >= a4)
      {
        v14 = 0;
        goto LABEL_22;
      }
    }
    v14 = 1;
LABEL_22:
    a7 = v16;
    a6 = v17;
    if (!v16)
      goto LABEL_24;
    goto LABEL_23;
  }
  v14 = 0;
  v12 = 0;
  v11 = 0;
  if (a7)
LABEL_23:
    *a7 = v12;
LABEL_24:
  if (a6)
    *a6 = v11;
  return v14;
}

uint64_t pts_Apply(uint64_t a1, int a2, _WORD *a3, int a4, _QWORD *a5, int a6, char *a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t Markup;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  size_t v37;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  unint64_t v57;
  int v58;
  char *__s;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  int matched;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  size_t v72;
  char *v73;
  char *v74[2];

  v62 = 0;
  v63 = 0;
  v60 = 0;
  v16 = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v17 = 2686459911;
  if (a7 && a8)
  {
    v65 = 0;
    matched = 0;
    v61 = 0;
    v18 = safeh_HandleCheck(a1, a2, 1060, 144);
    if ((v18 & 0x80000000) != 0)
    {
      v17 = v18;
      goto LABEL_40;
    }
    v52 = a8;
    __s = *(char **)(a1 + 24);
    v58 = *(_DWORD *)(a1 + 36);
    v73 = 0;
    v74[0] = 0;
    v71 = 0;
    v72 = 0;
    v69 = 0;
    v70 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v19 = 0;
    if ((InitRsrcFunction(a3, a4, &v66) & 0x80000000) != 0)
    {
      v20 = 0;
      goto LABEL_36;
    }
    v20 = 0;
    if (!v66)
      goto LABEL_36;
    v53 = a7;
    v54 = 0;
    v20 = 0;
    v57 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
LABEL_8:
    v56 = v23;
    if ((v23 & 1) != 0)
    {
      v19 = heap_Calloc(*(_QWORD **)(v66 + 8), v22, 1);
      if (!v19)
        goto LABEL_70;
      v20 = heap_Calloc(*(_QWORD **)(v66 + 8), v21 + 1, 1);
      if (!v20)
        goto LABEL_70;
      v54 = (char *)v19;
      v22 = 0;
      v21 = 0;
    }
    Markup = findMarkup("slotbegin", a3, a4, a5, a6, v53, v74, &v73, &v72, &v71);
    if ((Markup & 0x80000000) != 0)
    {
      v17 = Markup;
      v19 = (uint64_t)v54;
      goto LABEL_36;
    }
    v55 = (char *)v20;
    v25 = v53;
    v26 = v56;
    while (1)
    {
      if (!v71)
      {
        v37 = cstdlib_strlen(v25) + 1;
        if ((v26 & 1) == 0)
        {
          v22 += v37;
          v23 = 1;
          v20 = (uint64_t)v55;
          goto LABEL_8;
        }
        v39 = &v54[v22];
        cstdlib_memcpy(v39, v25, v37);
        v40 = &v39[v37];
        v19 = (uint64_t)v54;
        *(v40 - 1) = 0;
        if (v57 != numberOfOccurrences(v54, __s))
          *v54 = 0;
        replaceSubstr(v54);
        v17 = pts_BinSearch(a1, v54, 0, &v62, &v60, &matched);
        v20 = (uint64_t)v55;
        if ((v17 & 0x80000000) != 0)
          goto LABEL_37;
        if (matched)
        {
          matched = pts_MatchSlots(a1, (uint64_t)v55, v62, v60, v57, &v61, 0);
          if (matched)
          {
            v41 = v62 + v61;
            v42 = *(_QWORD *)(a1 + 48);
            if (v42)
            {
              v43 = 0;
              v44 = *(_QWORD *)(a1 + 48);
              do
                v43 = *(unsigned __int8 *)(v41 - 1 + v44--) | (v43 << 8);
              while (v44);
            }
            else
            {
              v43 = 0;
            }
            v45 = *(_QWORD *)(a1 + 104);
            if (v45)
            {
              v63 = (char *)(v45 + v43);
              goto LABEL_57;
            }
            v47 = *(_QWORD *)(a1 + 56);
            if (v47)
            {
              LODWORD(v48) = 0;
              v49 = v41 + v42;
              do
                v48 = *(unsigned __int8 *)(v49 + v47-- - 1) | ((_DWORD)v48 << 8);
              while (v47);
            }
            else
            {
              v48 = 0;
            }
            v17 = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (*(_DWORD *)(a1 + 112) + v43), v48, (uint64_t)&v63);
            if ((v17 & 0x80000000) == 0)
            {
              if (!matched)
                goto LABEL_66;
LABEL_57:
              v17 = fillInSlots(*(_QWORD *)a1, v63, v55, v57, *(_DWORD *)(a1 + 36), 0, (unint64_t)&v65, 0);
              if ((v17 & 0x80000000) == 0)
              {
                v46 = v65;
                goto LABEL_67;
              }
            }
LABEL_36:
            if (v19)
LABEL_37:
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v19);
            if (v20)
              heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v20);
LABEL_40:
            if (!*(_QWORD *)(a1 + 104) && v63)
              brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (uint64_t)v63);
            return v17;
          }
        }
LABEL_66:
        v46 = cstdlib_strlen(v53) + 1;
        v65 = v46;
LABEL_67:
        v50 = (char *)heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *v52, v46);
        if (v50)
        {
          *v52 = (uint64_t)v50;
          if (matched)
            v17 = fillInSlots(*(_QWORD *)a1, v63, v55, v57, *(_DWORD *)(a1 + 36), v50, 0, 0);
          else
            cstdlib_strcpy(v50, v53);
          goto LABEL_36;
        }
LABEL_70:
        v17 = 2686459914;
        goto LABEL_36;
      }
      v27 = findMarkup("slotend", a3, a4, a5, a6, v71, &v70, &v68, &v67, &v69);
      if ((v27 & 0x80000000) != 0)
        goto LABEL_34;
      if (v69)
        break;
      v36 = v71;
LABEL_28:
      v27 = findMarkup("slotbegin", a3, a4, a5, a6, v36, v74, &v73, &v72, &v71);
      if ((v27 & 0x80000000) != 0)
      {
LABEL_34:
        v17 = v27;
        v19 = (uint64_t)v54;
        v20 = (uint64_t)v55;
        goto LABEL_36;
      }
    }
    v28 = (char *)(v74[0] - v25);
    if ((v26 & 1) != 0)
    {
      cstdlib_memcpy(&v54[v22], v25, v74[0] - v25);
      v29 = &v28[v22];
      v30 = cstdlib_strlen(__s);
      ++v57;
      cstdlib_memcpy(&v29[(_QWORD)v54], __s, v30);
      v22 = (uint64_t)&v29[v30];
      v31 = v70 - v71;
      cstdlib_memcpy(&v55[v21], v71, v70 - v71);
      v21 += v31 + 1;
      v35 = v72;
      if (!v58)
      {
        if (v72)
          log_OutText(*(_QWORD *)(v66 + 32), (uint64_t)&modInfoTBM, 1, 0, (uint64_t)"Slot type is not supported by currently active Prompt Template Set", v32, v33, v34, v51);
        v26 = v56;
        goto LABEL_27;
      }
      cstdlib_memcpy(&v55[v21], v73, v72);
      v26 = v56;
    }
    else
    {
      v22 += (uint64_t)&v28[cstdlib_strlen(__s)];
      v21 = &v70[v21] - v71 + 1;
      if (!v58)
      {
LABEL_27:
        v25 = v69;
        v36 = v69;
        goto LABEL_28;
      }
      v35 = v72;
    }
    v21 += v35 + 1;
    goto LABEL_27;
  }
  return v17;
}

uint64_t pts_GetSlotPlaceholder(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t pts_BinSearch(uint64_t a1, char *__s1, unint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  uint64_t v6;
  _DWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  int v20;
  size_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v39;
  void *__src;

  v6 = 2686459911;
  if (a4)
  {
    if (a1)
    {
      if (a5)
      {
        v8 = a6;
        if (a6)
        {
          if ((v10 = *(_DWORD *)(a1 + 40), __s1) && !a3 || !__s1 && a3 && !(a3 >> *(_BYTE *)(a1 + 128)))
          {
            *a4 = 0;
            *a6 = 0;
            *a5 = 0;
            *(_QWORD *)(a1 + 136) = 1;
            if (v10 >= 1)
            {
              v11 = 0;
              v12 = v10 - 1;
              while (1)
              {
                v39 = v12;
                v13 = v12 - v11;
                if (v12 < v11)
                  ++v13;
                v14 = v11 + (v13 >> 1);
                v16 = *(_QWORD *)(a1 + 80);
                v15 = *(_QWORD *)(a1 + 88);
                v17 = *(unsigned int *)(v16 + 4 * v14);
                v18 = *(unsigned int *)(v16 + 4 * (v14 + 1)) - v17;
                if (v15)
                {
                  v6 = 0;
                  v19 = (const char *)(v15 + v17);
                  if (__s1)
                    goto LABEL_16;
                  goto LABEL_28;
                }
                __src = 0;
                v22 = *(_QWORD *)(a1 + 136);
                v23 = *(uint64_t **)(a1 + 120);
                if (v22 >> *(_BYTE *)(a1 + 128))
                {
                  v22 = 0;
                  v24 = *v23;
                }
                else
                {
                  v19 = (const char *)v23[v22];
                  if (v19)
                  {
                    v6 = 0;
                    goto LABEL_27;
                  }
                  v24 = 0;
                }
                v25 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v24, v18);
                if (!v25)
                  return 2686459914;
                *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v22) = v25;
                v26 = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (*(_DWORD *)(a1 + 96) + v17), v18, (uint64_t)&__src);
                if ((v26 & 0x80000000) != 0)
                  return v26;
                cstdlib_memcpy(*(void **)(*(_QWORD *)(a1 + 120) + 8 * v22), __src, v18);
                v6 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 64), (uint64_t)__src);
                if ((v6 & 0x80000000) != 0)
                  return v6;
                v19 = *(const char **)(*(_QWORD *)(a1 + 120) + 8 * v22);
LABEL_27:
                v8 = a6;
                if (__s1)
                {
LABEL_16:
                  v20 = cstdlib_strcmp(__s1, v19);
                  *(_QWORD *)(a1 + 136) = (v20 > 0) | (unint64_t)(2 * *(_QWORD *)(a1 + 136));
                  if (v20 > 0)
                    goto LABEL_41;
                  if ((v20 & 0x80000000) == 0)
                  {
LABEL_18:
                    *v8 = 1;
                    v21 = cstdlib_strlen(v19);
                    *a5 = v18 - (v21 + 1);
                    *a4 = &v19[v21 + 1];
                    goto LABEL_42;
                  }
                  goto LABEL_49;
                }
LABEL_28:
                v27 = a3;
                if (a3)
                {
                  v28 = 0;
                  do
                  {
                    ++v28;
                    v29 = v27 > 1;
                    v27 >>= 1;
                  }
                  while (v29);
                }
                else
                {
                  v28 = 0;
                }
                v30 = *(_QWORD *)(a1 + 136);
                if (v30)
                {
                  v31 = 0;
                  v32 = *(_QWORD *)(a1 + 136);
                  do
                  {
                    ++v31;
                    v29 = v32 > 1;
                    v32 >>= 1;
                  }
                  while (v29);
                }
                else
                {
                  v31 = 0;
                }
                if (v31 >= v28)
                {
                  v33 = 0;
                }
                else
                {
                  if (((a3 >> (v28 + ~(_BYTE)v31)) & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 136) = (2 * v30) | 1;
LABEL_41:
                    v11 = v14 + 1;
LABEL_42:
                    v12 = v39;
                    goto LABEL_43;
                  }
                  v33 = -1;
                }
                *(_QWORD *)(a1 + 136) = 2 * v30;
                if ((v33 & 0x80000000) == 0)
                  goto LABEL_18;
LABEL_49:
                v12 = v14 - 1;
LABEL_43:
                if (*v8 || v11 > v12)
                  return v6;
              }
            }
            return 0;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t pts_GetFormat(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 8);
  return result;
}

uint64_t pts_GetVersion(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t pts_GetNumberOfTemplates(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t pts_GetInputOffsets(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 80);
  return result;
}

uint64_t pts_GetInputs(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 88);
  return result;
}

uint64_t pts_GetOutputs(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1060, 144);
  if ((result & 0x80000000) == 0)
    *a3 = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t makeTnSequence(char *a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = cstdlib_strlen(a1);
  result = ssftstring_Reserve(a2, v4 + 7);
  if ((result & 0x80000000) == 0)
  {
    result = ssftstring_Clear(a2);
    if ((result & 0x80000000) == 0)
    {
      result = ssftstring_AppendChar(a2, 27);
      if ((result & 0x80000000) == 0)
      {
        result = ssftstring_AppendCStr(a2, "\\tn=");
        if ((result & 0x80000000) == 0)
        {
          result = ssftstring_AppendCStr(a2, a1);
          if ((result & 0x80000000) == 0)
            return ssftstring_AppendCStr(a2, "\\");
        }
      }
    }
  }
  return result;
}

uint64_t findMarkup(char *__s, _WORD *a2, int a3, _QWORD *a4, int a5, char *a6, char **a7, char **a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  size_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char **v35;
  size_t v36;
  unsigned __int16 v38;

  v38 = 0;
  v10 = 2686459911;
  if (__s)
  {
    if (*__s)
    {
      v36 = cstdlib_strlen(__s);
      if (a7)
      {
        if (a8 && a9 && a10)
        {
          *a7 = 0;
          *a8 = 0;
          *a10 = 0;
          *a9 = 0;
          if (a6 && (v18 = cstdlib_strlen(a6), (v19 = esc_seq_strstr(a2, a3, a4, a5, a6, &v38)) != 0))
          {
            v35 = a8;
            v20 = (unint64_t)&a6[v18];
            while (1)
            {
              *a7 = v19;
              v21 = &v19[v38];
              if (*v21 == 92)
              {
                v22 = v21 + 2;
                do
                {
                  v23 = v22;
                  if ((unint64_t)v22 > v20)
                    break;
                  v24 = cstdlib_strchr("\r\n\t ", *(v22 - 1));
                  v22 = v23 + 1;
                }
                while (v24);
                v21 = v23 - 1;
                v25 = &v23[v36 - 1];
                if ((unint64_t)v25 < v20
                  && !LH_strnicmp((uint64_t)(v23 - 1), (uint64_t)__s, v36))
                {
                  if ((unint64_t)&v23[v36] <= v20)
                  {
                    while (cstdlib_strchr("\r\n\t ", *v25))
                    {
                      v21 = v25 + 1;
                      v26 = v25 + 2;
                      ++v25;
                      if ((unint64_t)v26 > v20)
                        goto LABEL_20;
                    }
                  }
                  v21 = v25;
LABEL_20:
                  v27 = *v21;
                  if (v27 == 61)
                  {
                    v28 = v21 + 1;
                    do
                    {
                      if ((unint64_t)(v28 + 1) > v20)
                      {
                        *v35 = v28;
                        v31 = v28;
                        goto LABEL_31;
                      }
                      v29 = *v28++;
                    }
                    while (cstdlib_strchr("\r\n\t ", v29));
                    v30 = v28 - 1;
                    *v35 = v30;
                    while (!cstdlib_strchr("\r\n\t \\", *v30))
                    {
                      v31 = v30 + 1;
                      v32 = v30 + 2;
                      ++v30;
                      if ((unint64_t)v32 > v20)
                        goto LABEL_30;
                    }
                    v31 = v30;
LABEL_30:
                    v28 = *v35;
LABEL_31:
                    *a9 = v31 - v28;
                    if ((unint64_t)(v31 + 1) <= v20)
                    {
                      while (cstdlib_strchr("\r\n\t ", *v31))
                      {
                        v21 = v31 + 1;
                        v33 = v31 + 2;
                        ++v31;
                        if ((unint64_t)v33 > v20)
                          goto LABEL_35;
                      }
                    }
                    v21 = v31;
LABEL_35:
                    v27 = *v21;
                  }
                  if (v27 == 92)
                    break;
                }
              }
              v19 = esc_seq_strstr(a2, a3, a4, a5, v21, &v38);
              if (!v19)
                return 0;
            }
            v10 = 0;
            *a10 = v21 + 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return v10;
}

char *replaceSubstr(char *result)
{
  char *v1;
  size_t v2;
  size_t v3;
  size_t v4;

  if (result)
  {
    result = cstdlib_strstr(result, "\r\n");
    if (result)
    {
      v1 = result;
      v2 = cstdlib_strlen("\r\n");
      result = (char *)cstdlib_strlen("\n");
      if (v2 >= (unint64_t)result)
      {
        v3 = (size_t)result;
        do
        {
          v4 = cstdlib_strlen(&v1[v2]);
          cstdlib_memmove(&v1[v3], &v1[v2], v4 + 1);
          cstdlib_memcpy(v1, "\n", v3);
          result = cstdlib_strstr(&v1[v3], "\r\n");
          v1 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t get_cb(char *__s1, int a2)
{
  uint64_t v4;
  char *v6;

  v4 = 0;
  while (1)
  {
    if (!cstdlib_strcmp(__s1, &cbTable[v4]))
    {
      if (a2 == 2)
      {
        v6 = &cbTable[v4 + 40];
        return *(_QWORD *)v6;
      }
      if (a2 == 1)
      {
        v6 = &cbTable[v4 + 48];
        return *(_QWORD *)v6;
      }
      if (!a2)
        break;
    }
    v4 += 56;
    if (v4 == 280)
      return 0;
  }
  v6 = &cbTable[v4 + 32];
  return *(_QWORD *)v6;
}

char *get_parent(char *__s1)
{
  uint64_t v2;
  const char *v3;

  v2 = 0;
  v3 = "";
  while (cstdlib_strcmp(__s1, &cbTable[v2]))
  {
    v2 += 56;
    if (v2 == 280)
      return (char *)v3;
  }
  return &cbTable[v2 + 16];
}

uint64_t pts_ReadTextData(_WORD *a1, int a2, const char *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  XML_ParserStruct *v21;
  XML_ParserStruct *v22;
  XML_Status v23;
  uint64_t v24;
  XML_Size CurrentLineNumber;
  XML_Error ErrorCode;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  const char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  int len;
  int lena[2];
  const char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  XML_Memory_Handling_Suite memsuite;
  uint64_t (*v101)();
  uint64_t v102;
  char __dst[100];
  _QWORD __b[38];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[4];
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v7 = 2686459914;
  if (!a5)
    return 2686459911;
  v99 = 0;
  if ((InitRsrcFunction(a1, a2, &v99) & 0x80000000) != 0)
    return 2686459911;
  *a5 = safeh_GetNullHandle();
  a5[1] = v15;
  v16 = heap_Calloc(*(_QWORD **)(v99 + 8), 1, 64);
  if (v16)
  {
    v17 = v16;
    v102 = 0;
    v111 = 0u;
    v112 = 0u;
    memset(v110, 0, sizeof(v110));
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v105 = 0u;
    memset(__b, 0, sizeof(__b));
    cstdlib_memset(__b, 0, 0x1C0uLL);
    if ((InitRsrcFunction(a1, a2, &v102) & 0x80000000) != 0)
    {
      v7 = 2686459911;
    }
    else
    {
      v90 = a6;
      cstdlib_memset((void *)v17, 0, 0x40uLL);
      v18 = v102;
      *(_QWORD *)v17 = v102;
      memsuite.realloc_fcn = (void *(__cdecl *)(void *, size_t))builtin_Alloc;
      memsuite.free_fcn = (void (__cdecl *)(void *))builtin_Realloc;
      v101 = builtin_Free;
      memsuite.malloc_fcn = *(void *(__cdecl **)(size_t))(v18 + 8);
      cstdlib_strcpy(__dst, "<>");
      cstdlib_memset(__b, 0, 0x1C0uLL);
      *(_QWORD *)&v105 = __dst;
      *(_QWORD *)&v111 = v17;
      *((_QWORD *)&v111 + 1) = *(_QWORD *)v17;
      *(_QWORD *)&v106 = heap_Calloc(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), 4, 8);
      if ((_QWORD)v106)
      {
        v88 = a5;
        v89 = a7;
        v19 = 0;
        len = a4 - 1;
        do
        {
          do
            ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), (_QWORD *)(v106 + 8 * v19++));
          while (v19 != 4);
          DWORD2(v106) = -1;
          v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), (_QWORD *)&v107 + 1);
          if ((v20 & 0x80000000) != 0
            || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), &v108), (v20 & 0x80000000) != 0)
            || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), (_QWORD *)&v108 + 1),
                (v20 & 0x80000000) != 0)
            || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), &v109), (v20 & 0x80000000) != 0)
            || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), (_QWORD *)&v109 + 1),
                (v20 & 0x80000000) != 0)
            || (v20 = ssftstring_ObjOpen(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), v110), (v20 & 0x80000000) != 0))
          {
            v7 = v20;
            break;
          }
          v21 = XML_ParserCreate_MM(0, &memsuite, 0);
          if (!v21)
            goto LABEL_30;
          v22 = v21;
          *(_QWORD *)&v112 = v21;
          XML_SetElementHandler(v21, (XML_StartElementHandler)CB_start, (XML_EndElementHandler)CB_end);
          XML_SetCharacterDataHandler(v22, (XML_CharacterDataHandler)CB_char);
          XML_SetUserData(v22, __b);
          v23 = XML_Parse(v22, a3, len, 0);
          v24 = DWORD2(v112);
          if (v23)
          {
            if (DWORD2(v112) != -1608507392)
            {
              v30 = 2686459908;
              if (DWORD2(v112) != 1)
              {
                v30 = DWORD2(v112);
                if ((DWORD2(v112) & 0x80000000) == 0)
                {
                  v40 = pts_strclone(*(_QWORD *)(v102 + 8), (char **)(v17 + 16), (char *)&__b[12] + 4);
                  if ((v40 & 0x80000000) != 0)
                  {
                    v30 = v40;
                  }
                  else
                  {
                    v30 = pts_strclone(*(_QWORD *)(v102 + 8), (char **)(v17 + 24), __dst);
                    if ((v30 & 0x80000000) == 0)
                      ssft_qsort(*(_QWORD *)(v17 + 48), *(_QWORD *)(v17 + 32), 48, (uint64_t (*)(unint64_t, unint64_t))compare_4);
                  }
                }
              }
LABEL_40:
              XML_ParserFree(v22);
              DeiniState((uint64_t)__b);
              v37 = v30;
              if ((v30 & 0x80000000) == 0)
              {
                v87 = v99;
                v41 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), 1, 144);
                if (!v41)
                  goto LABEL_108;
                v42 = v41;
                *(_QWORD *)v41 = *(_QWORD *)v17;
                *(_DWORD *)(v41 + 116) = 1;
                v43 = pts_SetFormat(v41, *(char **)(v17 + 8));
                if ((v43 & 0x80000000) != 0)
                {
                  v37 = v43;
                  goto LABEL_31;
                }
                v37 = pts_strclone(*(_QWORD *)(*(_QWORD *)v17 + 8), (char **)(v42 + 16), *(char **)(v17 + 16));
                if ((v37 & 0x80000000) != 0)
                  goto LABEL_31;
                if (*(_DWORD *)(v42 + 32))
                {
                  v37 = pts_strclone(*(_QWORD *)(*(_QWORD *)v17 + 8), (char **)(v42 + 24), *(char **)(v17 + 24));
                  v44 = a7;
                  v45 = a6;
                  if ((v37 & 0x80000000) != 0)
                    goto LABEL_31;
                }
                else
                {
                  v44 = a7;
                  v45 = a6;
                  if (cstdlib_strcmp(*(const char **)(v17 + 24), "<>"))
                  {
                    log_OutText(*(_QWORD *)(v87 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"%s does not support custom slot place holders", v46, v47, v48, *(_QWORD *)(v17 + 8));
                    v37 = 2686459908;
                    goto LABEL_31;
                  }
                }
                *(_QWORD *)(v42 + 56) = 2;
                *(_OWORD *)(v42 + 40) = xmmword_214F75110;
                if (*(_QWORD *)(v17 + 32))
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = (const char **)(*(_QWORD *)(v17 + 48) + 16);
                  do
                  {
                    if (!v49 || cstdlib_strcmp(v49, *v51))
                    {
                      ++*(_QWORD *)(v42 + 40);
                      v49 = *v51;
                    }
                    ++v50;
                    v51 += 6;
                  }
                  while (v50 < *(_QWORD *)(v17 + 32));
                  v52 = *(_QWORD *)(v42 + 40) + 1;
                }
                else
                {
                  v52 = 1;
                }
                v53 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v52, 4);
                *(_QWORD *)(v42 + 80) = v53;
                if (!v53)
                {
LABEL_108:
                  v37 = 2686459914;
                  goto LABEL_31;
                }
                v85 = v37;
                if (*(_QWORD *)(v42 + 40))
                {
                  v61 = 0;
                  v62 = 0;
                  v63 = 0;
                  v64 = 0;
                  v65 = 0;
                  __dst[0] = 0;
                  v66 = 1;
                  do
                  {
                    v67 = v66;
                    if ((v65 & 1) != 0)
                    {
                      v68 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v62, 1);
                      *(_QWORD *)(v42 + 88) = v68;
                      if (!v68)
                        goto LABEL_108;
                      v69 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v17 + 8), v61, 1);
                      *(_QWORD *)(v42 + 104) = v69;
                      if (!v69)
                        goto LABEL_108;
                      v63 = v69;
                      v62 = 0;
                      v61 = 0;
                      v64 = *(_QWORD *)(v42 + 88);
                    }
                    v86 = v67;
                    if (*(_QWORD *)(v17 + 32))
                    {
                      v91 = v63;
                      v97 = 0;
                      v70 = 0;
                      v71 = 0;
                      v72 = 0;
                      v73 = *(_QWORD *)(v17 + 48);
                      do
                      {
                        if (v70 && !cstdlib_strcmp(v70, *(const char **)(v73 + 16)))
                        {
                          v75 = v62;
                        }
                        else
                        {
                          *(_DWORD *)(*(_QWORD *)(v42 + 80) + 4 * v71) = v62;
                          if (v64)
                            cstdlib_strcpy((char *)(v64 + v62), *(const char **)(v73 + 16));
                          v74 = *(const char **)(v73 + 16);
                          if (v74)
                            v62 += cstdlib_strlen(v74) + 1;
                          ++v71;
                          v75 = v62;
                          v97 = v62;
                        }
                        v95 = *(const char **)(v73 + 16);
                        v96 = v71;
                        *(_QWORD *)lena = cstdlib_strlen(*(const char **)(v73 + 40));
                        if (v63)
                          cstdlib_strcpy((char *)(v63 + v61), *(const char **)(v73 + 40));
                        v62 = v75;
                        if (*(_QWORD *)(v73 + 24))
                        {
                          v76 = 0;
                          v77 = *(const char **)(v73 + 32);
                          v62 = v75;
                          do
                          {
                            if (v64)
                              cstdlib_strcpy((char *)(v64 + v62), v77);
                            v62 += cstdlib_strlen(v77) + 1;
                            v77 += cstdlib_strlen(v77) + 1;
                            if (*(_DWORD *)(v17 + 56))
                            {
                              if (v64)
                                cstdlib_strcpy((char *)(v64 + v62), v77);
                              v62 += cstdlib_strlen(v77) + 1;
                              v77 += cstdlib_strlen(v77) + 1;
                            }
                            ++v76;
                          }
                          while (v76 < *(_QWORD *)(v73 + 24));
                        }
                        v78 = *(_QWORD *)(v42 + 48);
                        v98 = v75;
                        if (v78)
                        {
                          v79 = 0;
                          v80 = v61;
                          do
                          {
                            __dst[0] = v80;
                            if (v64)
                            {
                              cstdlib_memcpy((void *)(v64 + v62 + v79), __dst, 1uLL);
                              v78 = *(_QWORD *)(v42 + 48);
                            }
                            v80 >>= 8;
                            ++v79;
                          }
                          while (v79 < v78);
                          v62 += v79;
                          v75 = v98;
                        }
                        v81 = *(_QWORD *)(v42 + 56);
                        if (v81)
                        {
                          v82 = 0;
                          v83 = *(_QWORD *)lena + 1;
                          do
                          {
                            __dst[0] = v83;
                            if (v64)
                            {
                              cstdlib_memcpy((void *)(v64 + v62 + v82), __dst, 1uLL);
                              v81 = *(_QWORD *)(v42 + 56);
                            }
                            v83 >>= 8;
                            ++v82;
                          }
                          while (v82 < v81);
                          v62 += v82;
                          v75 = v98;
                        }
                        v63 = v91;
                        v71 = v96;
                        if (v64)
                        {
                          v56 = v75 - v97;
                          if (v75 > v97)
                          {
                            __b[0] = 0;
                            if (pts_MatchSlots(v42, v64 + v75, v64 + v97, v56, *(_QWORD *)(v73 + 24), 0, __b))log_OutText(*(_QWORD *)(v87 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %i: Template not reachable; covered by template in line %i",
                                v58,
                                v59,
                                v60,
                                *(_QWORD *)(v73 + 8));
                          }
                        }
                        v61 += *(_QWORD *)lena + 1;
                        v73 += 48;
                        ++v72;
                        v70 = v95;
                      }
                      while (v72 < *(_QWORD *)(v17 + 32));
                    }
                    else
                    {
                      v71 = 0;
                    }
                    v66 = 0;
                    *(_DWORD *)(*(_QWORD *)(v42 + 80) + 4 * v71) = v62;
                    v65 = 1;
                    v44 = v89;
                    v45 = v90;
                  }
                  while ((v86 & 1) != 0);
                }
                else
                {
                  v62 = 0;
                  v61 = 0;
                }
                if (v45)
                {
                  *v45 = v62;
                  *v44 = v61;
                }
                v37 = v85;
                if ((v85 & 0x80000000) == 0)
                {
                  v37 = pts_CheckDataConsistency(v42, v54, v55, v56, v57, v58, v59, v60);
                  if ((v37 & 0x80000000) == 0)
                  {
                    *v88 = v42;
                    *((_DWORD *)v88 + 2) = 1060;
                  }
                }
              }
LABEL_31:
              v38 = *(_QWORD **)(*(_QWORD *)v17 + 8);
              intpts_FreeContent((_QWORD *)v17);
              heap_Free(v38, v17);
              return v37;
            }
          }
          else
          {
            v92 = *(_QWORD *)(v102 + 32);
            CurrentLineNumber = XML_GetCurrentLineNumber(v22);
            ErrorCode = XML_GetErrorCode(v22);
            XML_ErrorString(ErrorCode);
            log_OutText(v92, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"XML error in line %d: %s", v27, v28, v29, CurrentLineNumber);
            if ((v24 & 0x80000000) == 0)
              goto LABEL_39;
            v30 = v24;
            if ((_DWORD)v24 != -1608507392)
              goto LABEL_40;
          }
          v31 = cstdlib_strlen(__dst);
          if (((v31 + 3) & 0xFFFFFFFC) > 0x63uLL)
          {
            log_OutText(*(_QWORD *)(v102 + 32), (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"Can't find suitable slot placeholder", v32, v33, v34, v84);
LABEL_39:
            v30 = 2686459908;
            goto LABEL_40;
          }
          v35 = v31 + 2;
          if (v31 <= 0xFFFFFFFD)
          {
            v36 = 0;
            do
            {
              __dst[v36] = 60;
              __dst[(v35 >> 1) + v36++] = 62;
            }
            while (v35 >> 1 != v36);
          }
          __dst[v35] = 0;
          DeiniState((uint64_t)__b);
          intpts_FreeContent((_QWORD *)v17);
          cstdlib_memset((void *)v17, 0, 0x40uLL);
          *(_QWORD *)v17 = v102;
          XML_ParserFree(v22);
          cstdlib_memset(__b, 0, 0x1C0uLL);
          *(_QWORD *)&v105 = __dst;
          *(_QWORD *)&v111 = v17;
          *((_QWORD *)&v111 + 1) = *(_QWORD *)v17;
          v19 = 0;
          *(_QWORD *)&v106 = heap_Calloc(*(_QWORD **)(*((_QWORD *)&v111 + 1) + 8), 4, 8);
        }
        while ((_QWORD)v106);
      }
      DeiniState((uint64_t)__b);
    }
LABEL_30:
    v37 = v7;
    goto LABEL_31;
  }
  return v7;
}

uint64_t CB_start_pts(uint64_t a1, char **a2)
{
  char *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  XML_Size v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  XML_ParserStruct *v15;
  uint64_t v16;
  XML_Size CurrentLineNumber;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  XML_Size v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *a2;
  if (!*a2)
  {
    v4 = 0;
LABEL_26:
    if (!cstdlib_strcmp((const char *)a1, "") || !cstdlib_strcmp((const char *)(a1 + 200), ""))
    {
      v4 = 2686459908;
      v15 = *(XML_ParserStruct **)(a1 + 432);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
      CurrentLineNumber = XML_GetCurrentLineNumber(v15);
      log_OutText(v16, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Missing '%s'", v18, v19, v20, CurrentLineNumber);
    }
    return v4;
  }
  v4 = 0;
  v5 = a2 + 1;
  while (LH_stricmp(v3, "format"))
  {
    if (LH_stricmp(*(v5 - 1), "version"))
    {
      if (LH_stricmp(*(v5 - 1), "esc"))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
        v10 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
        v11 = *(unsigned int *)(a1 + 328);
        if ((v11 & 0x80000000) == 0)
          ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v11));
        log_OutText(v6, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v7, v8, v9, v10);
        v4 = 1;
        goto LABEL_23;
      }
      v13 = *v5;
      if (*v5)
      {
        v14 = (char *)(a1 + 200);
        goto LABEL_17;
      }
    }
    else
    {
      v13 = *v5;
      if (*v5)
      {
        v14 = (char *)(a1 + 100);
LABEL_17:
        cstdlib_strcpy(v14, v13);
      }
    }
LABEL_23:
    v3 = v5[1];
    v5 += 2;
    if (!v3)
      goto LABEL_26;
  }
  if (!*v5)
    goto LABEL_23;
  cstdlib_strcpy((char *)a1, *v5);
  v12 = *(_QWORD *)(a1 + 416);
  *(_DWORD *)(v12 + 56) = 1;
  if (!cstdlib_strcmp((const char *)a1, "Text Template 2.2"))
  {
    v4 = pts_strclone(*(_QWORD *)(*(_QWORD *)v12 + 8), (char **)(v12 + 8), "Binary Template 2.2");
    if ((v4 & 0x80000000) != 0)
      goto LABEL_29;
    goto LABEL_20;
  }
  if (cstdlib_strcmp((const char *)a1, "Text Template 2.0"))
    goto LABEL_30;
  v4 = pts_strclone(*(_QWORD *)(*(_QWORD *)v12 + 8), (char **)(v12 + 8), "Binary Template 2.0");
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(v12 + 56) = 0;
LABEL_20:
    if (cstdlib_strcmp((const char *)a1, "Text Template 2.0"))
      *(_DWORD *)(a1 + 312) = 1;
    else
      *(_DWORD *)(a1 + 312) = 0;
    goto LABEL_23;
  }
LABEL_29:
  if ((_DWORD)v4 != -1608507385)
    return v4;
LABEL_30:
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
  v22 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  log_OutText(v21, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unsupported format: '%s'; use '%s' instead.",
    v23,
    v24,
    v25,
    v22);
  return 2686459911;
}

uint64_t CB_start_template(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  XML_Size CurrentLineNumber;
  uint64_t v9;

  *(_QWORD *)(a1 + 408) = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  *(_QWORD *)(a1 + 332) = 0;
  if (!*a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
  CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
  v9 = *(unsigned int *)(a1 + 328);
  if ((v9 & 0x80000000) == 0)
    ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v9));
  log_OutText(v4, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v5, v6, v7, CurrentLineNumber);
  return 1;
}

uint64_t CB_end_template(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  XML_Size CurrentLineNumber;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  uint64_t v20;

  v2 = ssftstring_CStrDetach(*(_QWORD *)(a1 + 376));
  v3 = ssftstring_CStrDetach(*(_QWORD *)(a1 + 384));
  if (!*(_DWORD *)(a1 + 332))
  {
    v10 = "line %d: Missing <input>...</input>";
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 336))
  {
    v10 = "line %d: Missing <output>...</output>";
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    log_OutText(v11, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)v10, v13, v14, v15, CurrentLineNumber);
    v16 = 1;
    if (!v2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(a1 + 408);
  v4 = *(_QWORD **)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 400);
  v7 = v4[4];
  v8 = v4[5];
  if (v7 < 1000 * v8)
  {
    v9 = v4[6];
LABEL_14:
    v16 = 0;
    v19 = (unint64_t *)(v9 + 48 * v7);
    v19[5] = v3;
    v19[2] = v2;
    v19[4] = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = 0;
    v19[3] = v6;
    *v19 = v7;
    v19[1] = v5;
    v4[4] = v7 + 1;
    goto LABEL_15;
  }
  v17 = 48000 * v8 + 48000;
  v18 = *(uint64_t **)(*v4 + 8);
  if (v8)
  {
    v9 = heap_Realloc(v18, v4[6], v17);
    if (v9)
    {
LABEL_13:
      v7 = v4[4];
      ++v4[5];
      v4[6] = v9;
      goto LABEL_14;
    }
  }
  else
  {
    v9 = heap_Alloc((uint64_t)v18, v17);
    if (v9)
      goto LABEL_13;
  }
  v16 = 2686459914;
  if (v2)
LABEL_8:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v2);
LABEL_9:
  if (v3)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v3);
LABEL_15:
  v20 = *(_QWORD *)(a1 + 392);
  if (v20)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v20);
  return v16;
}

uint64_t CB_start_input(uint64_t a1, _QWORD *a2)
{
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  XML_Size v14;
  uint64_t v15;

  ssftstring_Clear(*(_QWORD *)(a1 + 344));
  ssftstring_Clear(*(_QWORD *)(a1 + 368));
  *(_QWORD *)(a1 + 400) = 0;
  if (*(_DWORD *)(a1 + 332))
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unexpected <input>", v7, v8, v9, CurrentLineNumber);
  }
  else
  {
    *(_DWORD *)(a1 + 332) = 1;
    if (!*a2)
      return 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v14 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    v15 = *(unsigned int *)(a1 + 328);
    if ((v15 & 0x80000000) == 0)
      ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v15));
    log_OutText(v10, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v11, v12, v13, v14);
  }
  return 1;
}

uint64_t CB_char_container(uint64_t a1, const char *a2, unsigned int a3)
{
  return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 344), a2, a3);
}

uint64_t CB_end_input(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  XML_ParserStruct *v11;
  uint64_t v12;
  XML_Size v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  XML_Size CurrentLineNumber;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (char *)ssftstring_CStrWritable(*(_QWORD *)(a1 + 344));
  if (v2 && (v3 = v2, *v2))
  {
    replaceAltEsc(v2, (char *)(a1 + 200));
    v4 = *(_QWORD *)(a1 + 400);
    if (v4 == numberOfOccurrences(v3, *(char **)(a1 + 304)))
    {
      v5 = ssftstring_AssignCStr(*(_QWORD *)(a1 + 376), v3);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(a1 + 392);
        if (v6)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), v6);
          *(_QWORD *)(a1 + 392) = 0;
        }
        v7 = ssftstring_Size(*(_QWORD *)(a1 + 368));
        if (v7)
        {
          v8 = v7;
          v9 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 424) + 8), v7);
          *(_QWORD *)(a1 + 392) = v9;
          if (v9)
          {
            v10 = (const void *)ssftstring_CStrWritable(*(_QWORD *)(a1 + 368));
            cstdlib_memcpy(*(void **)(a1 + 392), v10, v8);
          }
          else
          {
            return 2686459914;
          }
        }
      }
    }
    else
    {
      v5 = 2686459908;
      if (*(_DWORD *)(a1 + 312))
      {
        return 2686459904;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
        CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
        log_OutText(v18, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: '%s' in input not allowed", v20, v21, v22, CurrentLineNumber);
      }
    }
  }
  else
  {
    v5 = 2686459908;
    v11 = *(XML_ParserStruct **)(a1 + 432);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v13 = XML_GetCurrentLineNumber(v11);
    log_OutText(v12, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: empty input not allowed", v14, v15, v16, v13);
  }
  return v5;
}

uint64_t CB_start_output(uint64_t a1, _QWORD *a2)
{
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  XML_Size v16;
  uint64_t v17;
  XML_ParserStruct *v18;

  ssftstring_Clear(*(_QWORD *)(a1 + 384));
  ssftstring_Clear(*(_QWORD *)(a1 + 344));
  if (*(_DWORD *)(a1 + 336))
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    v10 = "line %d: Unexpected <output>";
LABEL_3:
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)v10, v7, v8, v9, CurrentLineNumber);
    return 1;
  }
  *(_DWORD *)(a1 + 336) = 1;
  if (!*(_DWORD *)(a1 + 332))
  {
    v18 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v18);
    v10 = "line %d: Missing <input>...</input>";
    goto LABEL_3;
  }
  if (*a2)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    v16 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    v17 = *(unsigned int *)(a1 + 328);
    if ((v17 & 0x80000000) == 0)
      ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v17));
    log_OutText(v12, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v13, v14, v15, v16);
    return 1;
  }
  return 0;
}

uint64_t CB_end_output(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  XML_ParserStruct *v4;
  uint64_t v5;
  XML_Size CurrentLineNumber;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;

  v11 = "";
  v2 = (char *)ssftstring_CStrWritable(*(_QWORD *)(a1 + 344));
  replaceAltEsc(v2, (char *)(a1 + 200));
  v3 = ssftstring_AssignCStr(*(_QWORD *)(a1 + 384), v2);
  if ((v3 & 0x80000000) == 0
    && (fillInSlots(*(_QWORD *)(a1 + 424), v2, *(char **)(a1 + 392), *(_QWORD *)(a1 + 400), *(_DWORD *)(*(_QWORD *)(a1 + 416) + 56), 0, 0, &v11) & 0x80000000) != 0)
  {
    v4 = *(XML_ParserStruct **)(a1 + 432);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(v4);
    log_OutText(v5, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: %s", v7, v8, v9, CurrentLineNumber);
    return 1;
  }
  return v3;
}

uint64_t CB_start_slot(uint64_t a1, const char **a2)
{
  uint64_t result;
  const char *v5;
  const char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  XML_Size CurrentLineNumber;
  uint64_t v12;

  ssftstring_Clear(*(_QWORD *)(a1 + 352));
  result = ssftstring_AssignCStr(*(_QWORD *)(a1 + 360), "*");
  if ((result & 0x80000000) == 0)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2 + 1;
      do
      {
        if (cstdlib_strcmp("type", v5) || *(_DWORD *)(*(_QWORD *)(a1 + 416) + 56) != 1)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
          CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
          v12 = *(unsigned int *)(a1 + 328);
          if ((v12 & 0x80000000) == 0)
            ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v12));
          log_OutText(v7, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: Unknown attribute '%s' of '%s'", v8, v9, v10, CurrentLineNumber);
          result = 1;
        }
        else
        {
          result = ssftstring_AssignCStr(*(_QWORD *)(a1 + 360), (char *)*v6);
          if ((result & 0x80000000) != 0)
            return result;
        }
        v5 = v6[1];
        v6 += 2;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t CB_char_slot(uint64_t a1, const char *a2, unsigned int a3)
{
  return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 352), a2, a3);
}

uint64_t CB_end_slot(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t result;
  const char *v5;
  unsigned int v6;

  v2 = (char *)ssftstring_CStrWritable(*(_QWORD *)(a1 + 352));
  v3 = (char *)ssftstring_CStrWritable(*(_QWORD *)(a1 + 360));
  if (!v2
    || (replaceAltEsc(v2, (char *)(a1 + 200)),
        result = ssftstring_AppendCStr(*(_QWORD *)(a1 + 368), v2),
        (result & 0x80000000) == 0))
  {
    result = ssftstring_AppendChar(*(_QWORD *)(a1 + 368), 0);
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 416) + 56) != 1
        || (!v3 || (result = ssftstring_AppendCStr(*(_QWORD *)(a1 + 368), v3), (result & 0x80000000) == 0))
        && (result = ssftstring_AppendChar(*(_QWORD *)(a1 + 368), 0), (result & 0x80000000) == 0))
      {
        ++*(_QWORD *)(a1 + 400);
        v5 = *(const char **)(a1 + 304);
        v6 = cstdlib_strlen(v5);
        return ssftstring_AppendCStrN(*(_QWORD *)(a1 + 344), v5, v6);
      }
    }
  }
  return result;
}

char *replaceAltEsc(char *result, char *__s2)
{
  char *v3;
  char *v4;
  size_t v5;
  size_t v6;

  if (result)
  {
    if (__s2)
    {
      if (*__s2)
      {
        v3 = result;
        result = cstdlib_strstr(result, __s2);
        if (result)
        {
          v4 = result;
          v5 = cstdlib_strlen(__s2);
          do
          {
            *v4 = 27;
            v6 = cstdlib_strlen(&v4[v5]);
            cstdlib_memmove(v4 + 1, &v4[v5], v6 + 1);
            result = cstdlib_strstr(v3, __s2);
            v4 = result;
          }
          while (result);
        }
      }
    }
  }
  return result;
}

uint64_t builtin_Alloc(uint64_t a1, unsigned int a2)
{
  return heap_Alloc(a1, a2);
}

uint64_t builtin_Realloc(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  return heap_Realloc(a1, a2, a3);
}

void CB_start(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  XML_Size CurrentLineNumber;
  uint64_t i;
  int v13;
  uint64_t v14;
  XML_Size v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v6 = 0;
  v7 = "";
  while (cstdlib_strcmp(__s1, &cbTable[v6]))
  {
    v6 += 56;
    if (v6 == 280)
      goto LABEL_6;
  }
  v7 = &cbTable[v6 + 16];
LABEL_6:
  v8 = *(unsigned int *)(a1 + 328);
  if ((v8 & 0x80000000) != 0)
    v9 = "";
  else
    v9 = (const char *)ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v8));
  if (cstdlib_strcmp(v7, v9))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
    CurrentLineNumber = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
    for (i = 0; i != 280; i += 56)
    {
      if (!cstdlib_strcmp(__s1, &cbTable[i]))
        break;
    }
    for (j = 0; j != 280; j += 56)
    {
      if (!cstdlib_strcmp(__s1, &cbTable[j]))
        break;
    }
    v19 = -1608507388;
    log_OutText(v10, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %i: Unexpected <%s> inside <%s>...</%s>", v21, v22, v23, CurrentLineNumber);
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 328);
    if (v13 < 3)
    {
      v24 = v13 + 1;
      *(_DWORD *)(a1 + 328) = v24;
      v19 = ssftstring_AssignCStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v24), __s1);
      if ((v19 & 0x80000000) == 0)
      {
        v25 = 0;
        while (cstdlib_strcmp(__s1, &cbTable[v25]))
        {
          v25 += 56;
          if (v25 == 280)
            goto LABEL_20;
        }
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))&cbTable[v25 + 32])(a1, a3);
        if ((v19 & 0x80000000) == 0)
          setError(a1, v19);
      }
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32);
      v15 = XML_GetCurrentLineNumber(*(XML_Parser *)(a1 + 432));
      log_OutText(v14, (uint64_t)&modInfoTBM_0, 0, 0, (uint64_t)"line %d: XML parsing stack too small", v16, v17, v18, v15);
      v19 = -1608507382;
    }
  }
LABEL_20:
  setError(a1, v19);
}

void CB_end(uint64_t a1, char *__s1)
{
  uint64_t v4;
  char *v5;
  int v6;
  int v7;

  v4 = 0;
  v5 = cbTable;
  while (cstdlib_strcmp(__s1, v5))
  {
    ++v4;
    v5 += 56;
    if (v4 == 5)
      goto LABEL_8;
  }
  if (v4)
  {
    v6 = (*((uint64_t (**)(uint64_t))v5 + 6))(a1);
    if (v6 < 0)
      goto LABEL_11;
    setError(a1, v6);
  }
LABEL_8:
  v7 = *(_DWORD *)(a1 + 328);
  if (v7 < 0)
  {
    v6 = -1608507388;
  }
  else
  {
    v6 = 0;
    *(_DWORD *)(a1 + 328) = v7 - 1;
  }
LABEL_11:
  setError(a1, v6);
}

void CB_char(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  char *v9;
  int v11;

  v6 = *(unsigned int *)(a1 + 328);
  if ((v6 & 0x80000000) != 0)
    v7 = "";
  else
    v7 = (const char *)ssftstring_CStr(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v6));
  v8 = -5;
  v9 = cbTable;
  while (cstdlib_strcmp(v7, v9))
  {
    v9 += 56;
    if (__CFADD__(v8++, 1))
      goto LABEL_10;
  }
  if (v8 < 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  v11 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v9 + 5))(a1, a2, a3);
  if ((v11 & 0x80000000) == 0)
    setError(a1, v11);
LABEL_11:
  setError(a1, v11);
}

void *DeiniState(uint64_t a1)
{
  uint64_t i;

  if (*(_QWORD *)(a1 + 320))
  {
    for (i = 0; i != 32; i += 8)
      ssftstring_ObjClose(*(_QWORD ***)(*(_QWORD *)(a1 + 320) + i));
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 424) + 8), *(_QWORD *)(a1 + 320));
  }
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 344));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 352));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 360));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 368));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 376));
  ssftstring_ObjClose(*(_QWORD ***)(a1 + 384));
  return cstdlib_memset((void *)a1, 0, 0x1C0uLL);
}

_QWORD *intpts_FreeContent(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = result;
  v2 = *(_QWORD **)(*result + 8);
  v3 = result[2];
  if (v3)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v3);
    v1[2] = 0;
  }
  v4 = v1[1];
  if (v4)
  {
    result = heap_Free(v2, v4);
    v1[1] = 0;
  }
  v5 = v1[3];
  if (v5)
  {
    result = heap_Free(v2, v5);
    v1[3] = 0;
  }
  v6 = v1[6];
  if (v6)
  {
    if (v1[4])
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = v1[6];
        if (v9)
        {
          v10 = v9 + v7;
          v11 = *(_QWORD *)(v9 + v7 + 16);
          if (v11)
          {
            heap_Free(v2, v11);
            *(_QWORD *)(v10 + 16) = 0;
          }
          v12 = *(_QWORD *)(v10 + 32);
          if (v12)
          {
            heap_Free(v2, v12);
            *(_QWORD *)(v10 + 32) = 0;
          }
          v13 = v9 + v7;
          v14 = *(_QWORD *)(v13 + 40);
          if (v14)
          {
            heap_Free(v2, v14);
            *(_QWORD *)(v13 + 40) = 0;
          }
        }
        ++v8;
        v7 += 48;
      }
      while (v8 < v1[4]);
      v6 = v1[6];
    }
    result = heap_Free(v2, v6);
    v1[6] = 0;
  }
  return result;
}

uint64_t compare_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = cstdlib_strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)a1 >= *(_QWORD *)a2)
      return *(_QWORD *)a1 > *(_QWORD *)a2;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

void setError(uint64_t a1, int a2)
{
  if (a2)
  {
    if ((*(_DWORD *)(a1 + 440) & 0x80000000) == 0)
      *(_DWORD *)(a1 + 440) = a2;
    if (a2 < 0)
    {
      XML_SetElementHandler(*(XML_Parser *)(a1 + 432), 0, 0);
      XML_SetCharacterDataHandler(*(XML_Parser *)(a1 + 432), 0);
    }
  }
}

uint64_t domain_mngr_utils_AlignOffset(uint64_t result, unsigned int a2)
{
  if (a2 <= 1)
    return result;
  else
    return (result + a2 - 1) & -a2;
}

uint64_t domain_mngr_utils_GetU16(uint64_t a1, unsigned int a2, _DWORD *a3, void *__dst)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*a3 + 1) & 0xFFFFFFFE;
  *a3 = v4;
  if (v4 + 2 > (unint64_t)a2)
    return 2296389641;
  if (__dst)
  {
    cstdlib_memcpy(__dst, (const void *)(a1 + v4), 2uLL);
    LODWORD(v4) = *a3;
  }
  result = 0;
  *a3 = v4 + 2;
  return result;
}

uint64_t domain_mngr_utils_GetU32(uint64_t a1, unsigned int a2, _DWORD *a3, void *__dst)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*a3 + 3) & 0xFFFFFFFC;
  *a3 = v4;
  if (v4 + 4 > (unint64_t)a2)
    return 2296389641;
  if (__dst)
  {
    cstdlib_memcpy(__dst, (const void *)(a1 + v4), 4uLL);
    LODWORD(v4) = *a3;
  }
  result = 0;
  *a3 = v4 + 4;
  return result;
}

uint64_t domain_mngr_utils_CopyString(char *a1, char *__s, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  size_t v8;

  result = 2296389639;
  if (a1 && __s)
  {
    v7 = cstdlib_strlen(__s);
    if (v7 >= a3)
      v8 = a3 - 1;
    else
      v8 = v7;
    if ((_DWORD)v8)
      cstdlib_strncpy(a1, __s, v8);
    else
      v8 = 0;
    result = 0;
    a1[v8] = 0;
  }
  return result;
}

uint64_t domain_mngr_utils_DuplicateString(uint64_t a1, char *__s, char **a3)
{
  int v6;
  char *v7;

  v6 = cstdlib_strlen(__s);
  v7 = (char *)heap_Alloc(a1, (v6 + 1));
  *a3 = v7;
  if (!v7)
    return 2296389642;
  cstdlib_strcpy(v7, __s);
  return 0;
}

uint64_t domain_mngr_utils_ListContainsString(char *a1, char *__s)
{
  uint64_t v3;
  int v5;
  char *v6;

  if (!a1)
    return 0;
  v3 = 0;
  if (__s)
  {
    if (*a1)
    {
      v3 = *__s;
      if (*__s)
      {
        v5 = cstdlib_strlen(__s);
        v6 = cstdlib_strstr(a1, __s);
        if (v6)
        {
          while (1)
          {
            if (v6 == a1 || *(v6 - 1) == 124)
            {
              v3 = 1;
              if (!v6[v5] || v6[v5] == 124)
                break;
            }
            v6 = cstdlib_strstr(&v6[v5], __s);
            if (!v6)
              return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t domain_mngr_utils_IsActiveVoiceAddon(_QWORD *a1, char *a2, char *a3, char *a4, char *a5, int *a6)
{
  uint64_t v7;
  uint64_t result;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t Str;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  size_t v30;
  char *v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  const char *v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  char *__s1;
  char *__s;
  char *v65;
  char *v66;
  char *v67;

  v65 = 0;
  v66 = 0;
  v7 = 2296389642;
  __s1 = 0;
  __s = 0;
  result = 2296389639;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        *a6 = 0;
        result = paramc_ParamGetStr(a1[5], (uint64_t)"voice", &v66);
        if ((result & 0x80000000) == 0)
        {
          if ((paramc_ParamGetStr(a1[5], (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0)
            v14 = 0;
          else
            v14 = cstdlib_strlen(__s) + 1;
          if ((paramc_ParamGetStr(a1[5], (uint64_t)"vopversion", &__s1) & 0x80000000) != 0
            || !cstdlib_strcmp(__s1, "0.0.0"))
          {
            v15 = 0;
          }
          else
          {
            v15 = cstdlib_strlen(__s1) + 1;
          }
          v16 = (_QWORD *)a1[1];
          v17 = cstdlib_strlen(v66);
          v18 = (char *)heap_Calloc(v16, 1, (v14 + v15 + v17 + 14));
          if (!v18)
          {
            log_OutPublic(a1[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v19, v20, v21, v22, v62);
            return 2296389642;
          }
          v23 = v18;
          cstdlib_strcpy(v18, "voiceaddons.");
          v24 = cstdlib_strlen(v23);
          domain_mngr_utils_StrToLower(&v23[v24], v66);
          if (v14)
          {
            cstdlib_strcat(v23, ".");
            cstdlib_strcat(v23, __s);
          }
          if (v15)
          {
            cstdlib_strcat(v23, ".");
            cstdlib_strcat(v23, __s1);
          }
          Str = paramc_ParamGetStr(a1[5], (uint64_t)v23, &v65);
          if ((Str & 0x80000000) != 0)
          {
            v7 = Str;
          }
          else
          {
            v26 = v65;
            *a6 = 0;
            v27 = cstdlib_strchr(v26, 59);
            v28 = *a6;
            if (!*a6)
            {
              v29 = v27;
              if (v27)
              {
                v62 = a4;
                do
                {
                  v30 = cstdlib_strlen(a2);
                  if (v30 == v29 - v26 && !LH_strnicmp((uint64_t)v26, (uint64_t)a2, v30))
                    *a6 = 1;
                  v26 = v29 + 1;
                  v31 = cstdlib_strchr(v29 + 1, 59);
                  v29 = v31;
                  v28 = *a6;
                  if (*a6)
                    v32 = 1;
                  else
                    v32 = v31 == 0;
                }
                while (!v32);
              }
            }
            if (v28)
            {
              v33 = (_QWORD *)a1[1];
              v34 = cstdlib_strlen(a2);
              v35 = (char *)heap_Calloc(v33, 1, (v34 + 26));
              if (v35)
              {
                v40 = v35;
                cstdlib_strcpy(v35, "voiceaddonrawdataversion.");
                v41 = cstdlib_strlen(v40);
                domain_mngr_utils_StrToLower(&v40[v41], a2);
                v67 = 0;
                if (a3
                  && *a3
                  && (paramc_ParamGetStr(a1[5], (uint64_t)v40, &v67) & 0x80000000) == 0
                  && LH_stricmp(v67, a3))
                {
                  v42 = 0;
                }
                else
                {
                  v43 = (_QWORD *)a1[1];
                  v44 = cstdlib_strlen(a2);
                  v45 = (char *)heap_Calloc(v43, 1, (v44 + 28));
                  v42 = v45;
                  if (!v45)
                  {
                    log_OutPublic(a1[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v46, v47, v48, v49, v62);
                    v51 = 0;
                    goto LABEL_55;
                  }
                  cstdlib_strcpy(v45, "voiceaddonreductionversion.");
                  v50 = cstdlib_strlen(v42);
                  domain_mngr_utils_StrToLower(&v42[v50], a2);
                  if (!domain_mngr_utils_ReductionVersionCondition((uint64_t)a1, a5, (uint64_t)v42))
                  {
                    v54 = (_QWORD *)a1[1];
                    v55 = cstdlib_strlen(a2);
                    v56 = (char *)heap_Calloc(v54, 1, (v55 + 21));
                    v51 = v56;
                    if (!v56)
                    {
                      log_OutPublic(a1[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v57, v58, v59, v60, v62);
                      goto LABEL_55;
                    }
                    cstdlib_strcpy(v56, "voiceaddonreduction.");
                    v61 = cstdlib_strlen(v51);
                    domain_mngr_utils_StrToLower(&v51[v61], a2);
                    if (!a4
                      || !*a4
                      || !domain_mngr_utils_ReductionTypeVersionCondition((uint64_t)a1, a5, a4, (uint64_t)v51))
                    {
                      v7 = 0;
                      goto LABEL_55;
                    }
                    goto LABEL_42;
                  }
                }
                v51 = 0;
LABEL_42:
                v7 = 0;
                *a6 = 0;
LABEL_55:
                heap_Free((_QWORD *)a1[1], (uint64_t)v23);
                heap_Free((_QWORD *)a1[1], (uint64_t)v40);
                if (v51)
                  heap_Free((_QWORD *)a1[1], (uint64_t)v51);
                if (!v42)
                  return v7;
                v52 = (_QWORD *)a1[1];
                v53 = (uint64_t)v42;
LABEL_45:
                heap_Free(v52, v53);
                return v7;
              }
              log_OutPublic(a1[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v36, v37, v38, v39, v62);
            }
            else
            {
              v7 = 0;
            }
          }
          v52 = (_QWORD *)a1[1];
          v53 = (uint64_t)v23;
          goto LABEL_45;
        }
      }
    }
  }
  return result;
}

uint64_t domain_mngr_utils_StrToLower(_BYTE *a1, char *__s)
{
  char *v2;
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;

  v2 = __s;
  result = cstdlib_strlen(__s);
  v5 = result;
  if (result)
  {
    v6 = a1;
    v7 = result;
    do
    {
      v8 = *v2++;
      result = cstdlib_tolower(v8);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  a1[v5] = 0;
  return result;
}

BOOL domain_mngr_utils_ReductionVersionCondition(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;

  v5 = 0;
  return a2
      && *a2
      && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a3, &v5) & 0x80000000) == 0
      && LH_stricmp(v5, a2);
}

BOOL domain_mngr_utils_ReductionTypeVersionCondition(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v8;

  v8 = 0;
  return (!a2 || !*a2 || LH_stricmp(a2, "null"))
      && (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a4, &v8) & 0x80000000) == 0
      && LH_stricmp(v8, a3);
}

uint64_t activeprompt_db_UnloadData(uint64_t a1, uint64_t a2)
{
  if (a2)
    return objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), a2 + 296);
  else
    return 0;
}

uint64_t activeprompt_db_ObjClose(uint64_t a1, int a2)
{
  uint64_t inited;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  char *__s;
  char *v30;

  v28 = 0;
  if (!a1)
    return 2296389639;
  inited = InitRsrcFunction(**(_WORD ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a2)
  {
    v5 = *(uint64_t **)(*(_QWORD *)a1 + 16);
    __s = 0;
    v30 = 0;
    v6 = *(_QWORD *)(a1 + 64);
    if (!v6)
      goto LABEL_18;
    if ((paramc_ParamGetStr(v5[5], v6, &v30) & 0x80000000) != 0)
    {
LABEL_17:
      heap_Free((_QWORD *)v5[1], *(_QWORD *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
LABEL_18:
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
      {
        heap_Free((_QWORD *)v5[1], v18);
        *(_QWORD *)(a1 + 72) = 0;
      }
LABEL_20:
      if (__s)
        heap_Free((_QWORD *)v5[1], (uint64_t)__s);
      goto LABEL_22;
    }
    if ((domain_mngr_utils_DuplicateString(v5[1], v30, &__s) & 0x80000000) == 0)
    {
      paramc_ParamRelease(v5[5]);
      v11 = __s;
      v12 = cstdlib_strchr(__s, 59);
      if (v12)
      {
        v13 = v12;
        while (1)
        {
          *v13 = 0;
          v14 = *(const char **)(*(_QWORD *)(a1 + 8) + 72);
          if (v14)
          {
            if (!cstdlib_strcmp(v11, v14))
              break;
          }
          *v13 = 59;
          v11 = v13 + 1;
          v13 = cstdlib_strchr(v13 + 1, 59);
          if (!v13)
            goto LABEL_17;
        }
        v16 = v13 + 1;
        v17 = cstdlib_strlen(v16);
        cstdlib_memmove(v11, v16, v17 + 1);
        if ((paramc_ParamSetStr(v5[5], *(_QWORD *)(a1 + 64), __s) & 0x80000000) != 0)
          goto LABEL_20;
      }
      goto LABEL_17;
    }
    log_OutPublic(v5[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v7, v8, v9, v10, v27);
  }
LABEL_22:
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
  {
    v15 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48), v19 + 296);
    if ((v15 & 0x80000000) != 0)
      return v15;
  }
  else
  {
    v15 = 0;
  }
  v20 = *(_QWORD *)(a1 + 48);
  if (v20)
    heap_Free(*(_QWORD **)(v28 + 8), v20);
  v21 = *(_QWORD *)(a1 + 56);
  if (v21)
    heap_Free(*(_QWORD **)(v28 + 8), v21);
  v22 = *(_QWORD *)(a1 + 80);
  if (v22)
    heap_Free(*(_QWORD **)(v28 + 8), v22);
  v23 = *(_QWORD *)(a1 + 40);
  if (v23)
    heap_Free(*(_QWORD **)(v28 + 8), v23);
  v24 = *(_QWORD *)(a1 + 64);
  if (v24)
  {
    heap_Free(*(_QWORD **)(v28 + 8), v24);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v25 = *(_QWORD *)(a1 + 72);
  if (v25)
  {
    heap_Free(*(_QWORD **)(v28 + 8), v25);
    *(_QWORD *)(a1 + 72) = 0;
  }
  heap_Free(*(_QWORD **)(v28 + 8), a1);
  return v15;
}

uint64_t activeprompt_db_LoadData(uint64_t a1, const char *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char __dst[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__dst = 0u;
  v14 = 0u;
  v12 = 0;
  cstdlib_strcpy(__dst, a2);
  *(_QWORD *)&v29 = a3;
  DWORD2(v29) = a4;
  result = objc_GetAddRefCountedObject(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), (uint64_t)a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))apdb_loc_ObjcLoadData, (void (*)(_QWORD, _QWORD, _OWORD *))apdb_loc_ObjcUnloadData, (uint64_t)__dst, &v12);
  if ((result & 0x80000000) != 0)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v12 + 32);
  *a5 = v11;
  return result;
}

uint64_t apdb_loc_ObjcLoadData(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t StringZ;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t U32;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  uint64_t *v77;
  const char *v78;
  int v79;
  int v80;
  char *v81;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int v93[2];
  int v94;
  char __s1[4];
  char v96;
  char __src[256];
  char __s[2];
  unsigned __int8 v99;
  unsigned __int8 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v87 = 0;
  inited = InitRsrcFunction(a1, a2, &v87);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = 2296389642;
  v11 = (uint64_t *)heap_Calloc(*(_QWORD **)(v87 + 8), 1, 552);
  if (!v11)
    return v10;
  v12 = v11;
  inited = ssftriff_reader_ObjOpenEx(a1, a2, 4 * (*(_QWORD *)(a5 + 256) != 0), (const char *)a5, *(_QWORD *)(a5 + 256), *(_DWORD *)(a5 + 264), "APDB", 775, v11);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = ssftriff_reader_DetachChunkData(*v12, (void **)v12 + 2, v12 + 1, v13, v14, v15, v16, v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  cstdlib_strcpy((char *)v12 + 296, (const char *)a5);
  v96 = 0;
  *(_DWORD *)__s1 = 0;
  v94 = 0;
  v92 = 0;
  *(_QWORD *)v93 = 0;
  v18 = InitRsrcFunction(a1, a2, &v92);
  if ((v18 & 0x80000000) != 0)
  {
    v10 = v18;
    goto LABEL_141;
  }
  v19 = *(_QWORD **)(v92 + 8);
  v90 = xmmword_24D293610;
  *(_QWORD *)&v91 = activeprompt_db_FreePartsGroup;
  v86 = v12 + 33;
  if (!vector_ObjOpen(v19, &v90, 1, v12 + 33))
  {
    log_OutPublic(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v20, v21, v22, v23, v83);
    goto LABEL_141;
  }
  v84 = v12 + 25;
  v85 = a4;
  do
  {
    StringZ = ssftriff_reader_OpenChunk(*v12, (__int32 *)__s1, (unsigned int *)&v94, v93, v20, v21, v22, v23);
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_139;
    if (!cstdlib_strcmp(__s1, "ATTR"))
    {
      v28 = v94;
      if (!v94)
        goto LABEL_101;
      v29 = 0;
      while (1)
      {
        __s[0] = 0;
        __src[0] = 0;
        LODWORD(v90) = 64;
        StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v93, v28, v29, __s, (unsigned int *)&v90);
        if ((StringZ & 0x80000000) == 0 && v29 < v94)
        {
          v29 += v90;
          LODWORD(v90) = 256;
          StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v93, v94, v29, __src, (unsigned int *)&v90);
        }
        if ((StringZ & 0x80000000) != 0)
          goto LABEL_101;
        v30 = v90;
        if (!cstdlib_strcmp(__s, "Format"))
        {
          domain_mngr_utils_CopyString((char *)v12 + 32, __src, 0xCu);
          v37 = 0;
          while (cstdlib_strcmp((const char *)v12 + 32, off_24D2935F8[v37]))
          {
            if (++v37 == 2)
            {
              log_OutText(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB Format: %s not implemented", v38, v39, v40, (uint64_t)(v12 + 4));
              StringZ = 2296389633;
              goto LABEL_101;
            }
          }
          goto LABEL_63;
        }
        if (*((_BYTE *)v12 + 32))
        {
          if (!cstdlib_strcmp(__s, "Lng"))
          {
            v41 = (char *)v12 + 44;
            goto LABEL_57;
          }
          if (!cstdlib_strcmp(__s, "VaoName"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 9);
LABEL_61:
            StringZ = domain_mngr_utils_DuplicateString(v43, __src, v44);
            goto LABEL_62;
          }
          if (!cstdlib_strcmp(__s, "Voice"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 8);
            goto LABEL_61;
          }
          if (!cstdlib_strcmp(__s, "RawDataVersion"))
          {
            v41 = (char *)(v12 + 10);
            goto LABEL_57;
          }
          if (!cstdlib_strcmp(__s, "Reduction"))
          {
            v41 = (char *)(v12 + 11);
            goto LABEL_70;
          }
          if (!cstdlib_strcmp(__s, "ReductionVersion"))
          {
            v41 = (char *)v12 + 100;
LABEL_57:
            v42 = 8;
LABEL_58:
            domain_mngr_utils_CopyString(v41, __src, v42);
            goto LABEL_62;
          }
          if (!cstdlib_strcmp(__s, "UnitIDType"))
          {
            v41 = (char *)v12 + 108;
LABEL_70:
            v42 = 12;
            goto LABEL_58;
          }
          if (!cstdlib_strcmp(__s, "VoiceComponentID"))
          {
            domain_mngr_utils_CopyString((char *)v12 + 120, __src, 0x28u);
            *((_DWORD *)v12 + 40) = 1;
            goto LABEL_62;
          }
          if (!cstdlib_strcmp(__s, "Domain"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 21);
            goto LABEL_61;
          }
          if (!cstdlib_strcmp(__s, "TNType"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 25);
            goto LABEL_61;
          }
          if (!cstdlib_strcmp(__s, "PhrasePunctuation"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 23);
            goto LABEL_61;
          }
          if (!cstdlib_strcmp(__s, "AllPunctuation"))
          {
            v43 = *(_QWORD *)(v92 + 8);
            v44 = (char **)(v12 + 24);
            goto LABEL_61;
          }
          if (cstdlib_strcmp(__s, "UnitIDSize"))
          {
            if (cstdlib_strcmp(__s, "Mode"))
            {
              if (cstdlib_strcmp(__s, "URISuffix"))
              {
                if (cstdlib_strcmp(__s, "OriOrth"))
                {
                  if (cstdlib_strcmp(__s, "IdxU8V:WordPrm"))
                  {
                    if (cstdlib_strcmp(__s, "IdxU8V:PhrsBnd"))
                    {
                      if (!cstdlib_strcmp(__s, "SupportBackendPredictedSilenceDuration"))
                      {
                        if ((unsigned __int16)cstdlib_atoi((unsigned __int8 *)__src))
                          *((_DWORD *)v12 + 57) = 1;
                        else
                          *((_DWORD *)v12 + 57) = 0;
                      }
                    }
                    else
                    {
                      *((_DWORD *)v12 + 55) = 1;
                      ++*((_WORD *)v12 + 106);
                      *((_WORD *)v12 + 108) = cstdlib_atoi((unsigned __int8 *)__src);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v12 + 52) = 1;
                    ++*((_WORD *)v12 + 106);
                    *((_WORD *)v12 + 107) = cstdlib_atoi((unsigned __int8 *)__src);
                  }
                }
                else
                {
                  *((_DWORD *)v12 + 7) = 1;
                }
                goto LABEL_62;
              }
              v43 = *(_QWORD *)(v92 + 8);
              v44 = (char **)(v12 + 22);
              goto LABEL_61;
            }
            v41 = (char *)v12 + 52;
            goto LABEL_70;
          }
          if (cstdlib_atoi((unsigned __int8 *)__src) == 4)
            goto LABEL_62;
          log_OutPublic(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v45, v34, v35, v36, v83);
        }
        else
        {
          log_OutText(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB Format: 7.0.0 not supported", v31, v32, v33, v83);
        }
        StringZ = 2296389633;
LABEL_62:
        log_OutText(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB attribute %s=%s", v34, v35, v36, (uint64_t)__s);
LABEL_63:
        if ((StringZ & 0x80000000) == 0)
        {
          v29 += v30;
          v28 = v94;
          if (v29 < v94)
            continue;
        }
        goto LABEL_101;
      }
    }
    if (cstdlib_strcmp(__s1, "PHGP"))
    {
      if (!cstdlib_strcmp(__s1, "STRP"))
      {
        v12[30] = *(_QWORD *)v93;
        goto LABEL_102;
      }
      if (!cstdlib_strcmp(__s1, "UIDP"))
      {
        v12[31] = *(_QWORD *)v93;
        goto LABEL_102;
      }
      if (!cstdlib_strcmp(__s1, "WRDP"))
      {
        v12[32] = *(_QWORD *)v93;
        goto LABEL_102;
      }
      if (cstdlib_strcmp(__s1, "APPR") && cstdlib_strcmp(__s1, "RECP"))
      {
        if (cstdlib_strcmp(__s1, "TNAL"))
        {
          if (cstdlib_strcmp(__s1, "U8VP"))
          {
            if (cstdlib_strcmp(__s1, "ALV1"))
            {
              if (cstdlib_strcmp(__s1, "ALV2"))
                log_OutText(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"Unknown data: %s for %s", v25, v26, v27, (uint64_t)__s1);
              else
                v12[36] = *(_QWORD *)v93;
            }
            else
            {
              v12[35] = *(_QWORD *)v93;
            }
          }
          else
          {
            v12[34] = *(_QWORD *)v93;
          }
          goto LABEL_102;
        }
        LODWORD(v88) = 0;
        v89 = 0;
        *(_QWORD *)&v90 = 0;
        U32 = domain_mngr_utils_GetU32(*(uint64_t *)v93, v94, &v88, &v89);
        if ((U32 & 0x80000000) != 0)
        {
          StringZ = U32;
        }
        else
        {
          v65 = v12[30];
          v66 = v89;
          StringZ = domain_mngr_utils_GetU32(*(uint64_t *)v93, v94, &v88, &v89);
          if ((StringZ & 0x80000000) == 0)
          {
            v67 = (const char *)(v65 + v66);
            v68 = v12[30];
            v69 = v89;
            if (vector_GetElemAt(v12[33], 0, &v90))
            {
              v74 = (char *)(v68 + v69);
              v75 = 1;
              while (domain_mngr_utils_ListContainsString(*(char **)(v90 + 8), v74) != 1)
              {
                if (!vector_GetElemAt(*v86, v75++, &v90))
                  goto LABEL_128;
              }
              v77 = *(uint64_t **)(v92 + 8);
              v78 = *(const char **)(v90 + 8);
              v79 = cstdlib_strlen(v78);
              v80 = cstdlib_strlen(v67);
              v81 = (char *)heap_Realloc(v77, (uint64_t)v78, (v79 + v80 + 2));
              if (!v81)
              {
LABEL_121:
                log_OutPublic(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v60, v61, v62, v63, v83);
                StringZ = 2296389642;
                goto LABEL_101;
              }
              *(_QWORD *)(v90 + 8) = v81;
              cstdlib_strcat(v81, "|");
              cstdlib_strcat(*(char **)(v90 + 8), v67);
            }
            else
            {
LABEL_128:
              log_OutPublic(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 47017, (uint64_t)"%s%s%s%s", v70, v71, v72, v73, "chunk");
              StringZ = 2296389636;
            }
          }
        }
      }
      else
      {
        v90 = xmmword_24D293628;
        v91 = unk_24D293638;
        v89 = 0;
        if (cstdlib_strcmp(__s1, "RECP"))
        {
          if ((_DWORD)v90 == 1)
          {
            v88 = 0;
            if (vector_GetElemAt(*v86, 0, &v88))
            {
              v58 = 1;
              do
              {
                if (*v88 == 1)
                  log_OutPublic(*(_QWORD *)(v92 + 32), (uint64_t)"DOMAIN_MNGR", 47020, (uint64_t)"%s%s", v54, v55, v56, v57, "chunk");
              }
              while (vector_GetElemAt(*v86, v58++, &v88));
            }
          }
        }
        else
        {
          *((_DWORD *)v12 + 6) = 1;
          LODWORD(v90) = 2;
        }
        if (*v84 && *(_BYTE *)*v84)
          *((_QWORD *)&v90 + 1) = *v84;
        StringZ = domain_mngr_utils_GetU32(*(uint64_t *)v93, v94, &v89, &v91);
        if ((StringZ & 0x80000000) == 0)
        {
          *((_QWORD *)&v91 + 1) = *(_QWORD *)v93 + v89;
          if (!vector_Add(*v86, &v90))
            goto LABEL_121;
        }
      }
    }
    else
    {
      LODWORD(v90) = 0;
      *((_DWORD *)v12 + 56) = 1;
      v12[29] = heap_Calloc(*(_QWORD **)(v92 + 8), 100, 8);
      v46 = v94;
      if (v94)
      {
        v47 = 0;
        do
        {
          __s[0] = 0;
          __src[0] = 0;
          LODWORD(v90) = 64;
          StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v93, v46, v47, __s, (unsigned int *)&v90);
          if ((StringZ & 0x80000000) == 0 && v47 < v94)
          {
            v47 += v90;
            LODWORD(v90) = 256;
            StringZ = ssftriff_reader_ReadStringZ(*v12, *(uint64_t *)v93, v94, v47, __src, (unsigned int *)&v90);
          }
          if ((StringZ & 0x80000000) != 0)
            break;
          v48 = v90;
          if (cstdlib_strlen(__s) == 4
            && __s[0] == 80
            && __s[1] == 71
            && (char)v99 >= 48
            && (char)v99 <= 57
            && (char)v100 >= 48
            && (char)v100 <= 57)
          {
            v49 = v100 + 10 * v99 - 528;
            v50 = *(char **)(v12[29] + 8 * v49);
            if (!v50)
            {
              v51 = *(_QWORD **)(v92 + 8);
              v52 = cstdlib_strlen(__src);
              *(_QWORD *)(v12[29] + 8 * v49) = heap_Calloc(v51, (v52 + 1), 1);
              v50 = *(char **)(v12[29] + 8 * v49);
            }
            cstdlib_strcpy(v50, __src);
          }
          v47 += v48;
          v46 = v94;
        }
        while (v47 < v94);
      }
    }
LABEL_101:
    if ((StringZ & 0x80000000) != 0)
      goto LABEL_139;
LABEL_102:
    v53 = ssftriff_reader_CloseChunk(*v12);
  }
  while ((v53 & 0x80000000) == 0);
  StringZ = v53;
LABEL_139:
  v10 = StringZ;
  a4 = v85;
  if ((StringZ & 0x1FFF) == 0x14)
  {
    v10 = 0;
    goto LABEL_142;
  }
LABEL_141:
  v12 = 0;
LABEL_142:
  *(_QWORD *)(a4 + 32) = v12;
  return v10;
}

uint64_t apdb_loc_ObjcUnloadData(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v34 = 0;
  inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) == 0)
  {
    v12 = *(_QWORD *)(a3 + 32);
    if (v12)
    {
      v13 = *(_QWORD **)(v12 + 16);
      if (v13)
      {
        ssftriff_reader_ReleaseChunkData(v13, v4, v5, v6, v7, v8, v9, v10);
        if (*(_QWORD *)v12)
        {
          v21 = ssftriff_reader_ObjClose(*(_QWORD **)v12, v14, v15, v16, v17, v18, v19, v20);
          if (v21 >= 0)
            inited = inited;
          else
            inited = v21;
        }
      }
      v22 = *(_QWORD *)(v12 + 72);
      if (v22)
        heap_Free(*(_QWORD **)(v34 + 8), v22);
      v23 = *(_QWORD *)(v12 + 64);
      if (v23)
        heap_Free(*(_QWORD **)(v34 + 8), v23);
      v24 = *(_QWORD *)(v12 + 168);
      if (v24)
        heap_Free(*(_QWORD **)(v34 + 8), v24);
      v25 = *(_QWORD *)(v12 + 200);
      if (v25)
        heap_Free(*(_QWORD **)(v34 + 8), v25);
      v26 = *(_QWORD *)(v12 + 176);
      if (v26)
        heap_Free(*(_QWORD **)(v34 + 8), v26);
      v27 = *(_QWORD *)(v12 + 184);
      if (v27)
        heap_Free(*(_QWORD **)(v34 + 8), v27);
      v28 = *(_QWORD *)(v12 + 192);
      if (v28)
        heap_Free(*(_QWORD **)(v34 + 8), v28);
      v29 = *(_QWORD *)(v12 + 264);
      if (v29)
        vector_ObjClose(v29);
      if (*(_DWORD *)(v12 + 224) == 1)
      {
        for (i = 0; i != 800; i += 8)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v12 + 232) + i);
          if (v31)
            heap_Free(*(_QWORD **)(v34 + 8), v31);
        }
        v32 = *(_QWORD *)(v12 + 232);
        if (v32)
          heap_Free(*(_QWORD **)(v34 + 8), v32);
      }
      heap_Free(*(_QWORD **)(v34 + 8), v12);
    }
  }
  return inited;
}

uint64_t activeprompt_db_ObjOpen(uint64_t a1, uint64_t a2, char *a3, char *a4, const void *a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  int v43;
  size_t v44;
  _QWORD *v45;
  int v46;
  char *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  const char *v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  int Str;
  const char *v56;
  _QWORD *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  size_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  size_t v93;
  size_t v94;
  size_t v95;
  int v96;
  unsigned int *v97;
  char **v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  unsigned int v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char *v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  size_t v121;
  size_t v122;
  char *v123;
  char *v124;
  size_t v125;
  char *v126;
  char *v127;
  const char *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  _QWORD *__na;
  size_t __n;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *__s[2];
  __int128 v145;
  __int128 v146;
  char *v147[2];
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  _QWORD **v158;
  uint64_t v159;
  uint64_t v160;
  char *__s1;
  _OWORD __s2[6];
  uint64_t v163;
  char __dst[511];
  char v165;
  char __str[512];
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  v143 = 0;
  v8 = 2296389642;
  v141 = 0;
  if (!a8)
    return 2296389639;
  inited = InitRsrcFunction(*(_WORD **)a2, *(_QWORD *)(a2 + 8), &v143);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a8 = 0;
  if (a4 && *a4)
  {
    cstdlib_strncpy(__dst, a4, 0x1FFuLL);
    v165 = 0;
  }
  else
  {
    *(_QWORD *)&__s2[0] = 0;
    if (cupreader_IsCupInTheScope(v143, __s2))
    {
      snprintf(__str, 0x200uLL, "cup:%s", *(const char **)&__s2[0]);
      snprintf(__dst, 0x200uLL, "cup:%s%p");
    }
    else
    {
      snprintf(__str, 0x200uLL, "in-memory APDB%p", a5);
      snprintf(__dst, 0x200uLL, "in-memory APDB%p");
    }
    v165 = 0;
    __str[511] = 0;
    a4 = __str;
  }
  v17 = activeprompt_db_LoadData(a2, __dst, (uint64_t)a5, a6, &v142);
  if ((v17 & 0x80000000) != 0)
  {
    v16 = v17;
    log_OutPublic(*(_QWORD *)(v143 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v18, v19, v20, v21, v130);
    goto LABEL_32;
  }
  v22 = heap_Calloc(*(_QWORD **)(v143 + 8), 1, 88);
  *a8 = v22;
  if (!v22)
    goto LABEL_30;
  *(_QWORD *)(v22 + 8) = v142;
  *(_QWORD *)*a8 = a2;
  v27 = *a8;
  *(_DWORD *)(v27 + 24) = 1;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(*a8 + 64) = 0;
  if (!cupreader_GetTuningDataNameInCup(v143, &v141) || (v28 = v141) == 0)
    v28 = a4;
  v16 = domain_mngr_utils_DuplicateString(*(_QWORD *)(v143 + 8), v28, (char **)(*a8 + 56));
  if ((v16 & 0x80000000) != 0)
    goto LABEL_30;
  v29 = *a8;
  v30 = *(_QWORD *)(*a8 + 8);
  v31 = *(char **)(v30 + 176);
  if (!v31)
    goto LABEL_21;
  v32 = domain_mngr_utils_DuplicateString(*(_QWORD *)(v143 + 8), v31, (char **)(v29 + 40));
  if ((v32 & 0x80000000) != 0)
  {
LABEL_30:
    log_OutPublic(*(_QWORD *)(v143 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v23, v24, v25, v26, v130);
    v16 = 2296389642;
    goto LABEL_32;
  }
  v16 = v32;
  v29 = *a8;
  v30 = *(_QWORD *)(*a8 + 8);
LABEL_21:
  if (*(_DWORD *)(v30 + 24) != 1)
    goto LABEL_43;
  v33 = *(uint64_t **)(*(_QWORD *)v29 + 16);
  *(_QWORD *)&__s2[0] = 0;
  *(_QWORD *)&v151 = 0;
  __s[0] = 0;
  if ((hlp_GetMimeParam((uint64_t)v33, a3, "urisuffix", (char **)&v151) & 0x80000000) == 0)
  {
    v34 = *(_QWORD *)(v29 + 40);
    if (v34)
      heap_Free((_QWORD *)v33[1], v34);
    *(_QWORD *)(v29 + 40) = v151;
    if ((hlp_GetMimeParam((uint64_t)v33, a3, "uriprefix", (char **)&v151) & 0x80000000) != 0)
      goto LABEL_26;
LABEL_36:
    *(_DWORD *)(v29 + 32) = 2;
    v40 = *(_QWORD *)(v29 + 80);
    if (v40)
      heap_Free((_QWORD *)v33[1], v40);
    v16 = 0;
    *(_QWORD *)(v29 + 80) = v151;
    goto LABEL_39;
  }
  if ((hlp_GetMimeParam((uint64_t)v33, a3, "uriprefix", (char **)&v151) & 0x80000000) == 0)
    goto LABEL_36;
  if (IsRecordingCS((_QWORD *)v29, (uint64_t)a4, (uint64_t *)__s2))
  {
    *(_DWORD *)(v29 + 32) = 1;
    v67 = *(_QWORD *)(v29 + 80);
    if (v67)
      heap_Free((_QWORD *)v33[1], v67);
    v68 = v33[1];
    v69 = cstdlib_strlen("x-vocalizer-speechbase://");
    v70 = cstdlib_strlen(*(const char **)&__s2[0]);
    v71 = (char *)heap_Alloc(v68, v69 + v70 + 100);
    *(_QWORD *)(v29 + 80) = v71;
    if (v71)
    {
      cstdlib_strcpy(v71, "x-vocalizer-speechbase://");
      cstdlib_strcat(*(char **)(v29 + 80), *(const char **)&__s2[0]);
      v16 = 0;
    }
    else
    {
      log_OutPublic(v33[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v72, v73, v74, v75, v130);
      v16 = 2296389642;
    }
    goto LABEL_39;
  }
LABEL_26:
  if (*a4)
  {
    if ((brk_TagQueryEx(v33[3], (uint64_t)a4, (uint64_t)"BROKERSTRING", 1, (uint64_t)__s) & 0x80000000) != 0)
    {
      *(_DWORD *)(v29 + 32) = 2;
      v16 = domain_mngr_utils_DuplicateString(v33[1], a4, (char **)(v29 + 48));
      goto LABEL_39;
    }
    brk_TagRelease(v33[3], (uint64_t)__s[0]);
    __s[0] = 0;
  }
  log_OutPublic(v33[4], (uint64_t)"DOMAIN_MNGR", 47018, (uint64_t)"%s%s", v35, v36, v37, v38, "apdb");
  v16 = 2296389652;
LABEL_39:
  if (*(_QWORD *)&__s2[0])
    heap_Free((_QWORD *)v33[1], *(uint64_t *)&__s2[0]);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_32;
  v29 = *a8;
  v30 = *(_QWORD *)(*a8 + 8);
LABEL_43:
  if (!*(_QWORD *)(v30 + 72))
    goto LABEL_87;
  v41 = *(_QWORD **)(*(_QWORD *)v29 + 16);
  *(_QWORD *)&v151 = 0;
  if ((paramc_ParamGetStr(v41[5], (uint64_t)"voice", &v151) & 0x80000000) != 0)
  {
    v43 = 0;
    goto LABEL_71;
  }
  __s[0] = 0;
  __s1 = 0;
  if ((paramc_ParamGetStr(v41[5], (uint64_t)"voiceoperatingpoint", __s) & 0x80000000) != 0)
    v42 = 0;
  else
    v42 = cstdlib_strlen(__s[0]) + 1;
  if ((paramc_ParamGetStr(v41[5], (uint64_t)"vopversion", &__s1) & 0x80000000) != 0 || !cstdlib_strcmp(__s1, "0.0.0"))
    v44 = 0;
  else
    v44 = cstdlib_strlen(__s1) + 1;
  v45 = (_QWORD *)v41[1];
  v46 = cstdlib_strlen((const char *)v151);
  v47 = (char *)heap_Calloc(v45, 1, (v42 + v44 + v46 + 14));
  *(_QWORD *)(v29 + 64) = v47;
  if (!v47)
    goto LABEL_85;
  v140 = v41;
  cstdlib_strcpy(v47, "voiceaddons.");
  v48 = cstdlib_strlen(*(const char **)(v29 + 64));
  if (cstdlib_strlen((const char *)v151))
  {
    v49 = 0;
    v50 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v29 + 64) + v48 + v50++) = cstdlib_tolower(*(char *)(v151 + v49));
      v49 = v50;
    }
    while (cstdlib_strlen((const char *)v151) > v50);
  }
  else
  {
    LODWORD(v49) = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v29 + 64) + (v49 + v48)) = 0;
  if (v42)
  {
    cstdlib_strcat(*(char **)(v29 + 64), ".");
    cstdlib_strcat(*(char **)(v29 + 64), __s[0]);
  }
  v41 = v140;
  if (v44)
  {
    cstdlib_strcat(*(char **)(v29 + 64), ".");
    cstdlib_strcat(*(char **)(v29 + 64), __s1);
  }
  v51 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
  v53 = *(char **)(v29 + 56);
  v52 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)&__s2[0] = 0;
  LODWORD(v160) = 0;
  if (v53)
    v54 = cstdlib_strlen(v53);
  else
    v54 = 0;
  Str = paramc_ParamGetStr(v140[5], v52, __s2);
  v43 = 0;
  if (!v51 || Str < 0 || !*(_QWORD *)&__s2[0])
    goto LABEL_71;
  if (cstdlib_strstr(*(char **)&__s2[0], v51))
  {
    v43 = 1;
LABEL_71:
    v16 = 0;
    if (v43)
      goto LABEL_87;
    goto LABEL_72;
  }
  v137 = v52;
  if (!v53 || !*v53 || (int)IsThisUrlOrRealPath(v53, v54, &v160) < 1)
  {
    v114 = 0;
LABEL_135:
    v136 = 1;
    goto LABEL_136;
  }
  v112 = v160;
  v113 = cstdlib_strrchr(v53, 47);
  if (v112)
  {
    if (!v113)
    {
      v8 = 2296389639;
      goto LABEL_85;
    }
    goto LABEL_147;
  }
  if (v113 || (v113 = cstdlib_strrchr(v53, 92)) != 0)
  {
LABEL_147:
    v114 = v113 - v53 + 1;
    goto LABEL_135;
  }
  v136 = 0;
  v114 = 2;
LABEL_136:
  __na = (_QWORD *)v140[1];
  v115 = cstdlib_strlen(*(const char **)&__s2[0]);
  v116 = cstdlib_strlen(";");
  v117 = cstdlib_strlen(v51);
  v118 = (char *)heap_Calloc(__na, 1, (v114 + v116 + v115 + v117 + 2));
  if (!v118)
    goto LABEL_85;
  v119 = (uint64_t)v118;
  __n = v114;
  cstdlib_strcpy(v118, *(const char **)&__s2[0]);
  v120 = (_QWORD *)v140[1];
  v121 = cstdlib_strlen("voiceaddonbaseuri.");
  v122 = cstdlib_strlen(v51);
  v123 = (char *)heap_Calloc(v120, 1, v121 + v122 + 1);
  if (!v123)
  {
    v124 = (char *)v119;
LABEL_154:
    heap_Free((_QWORD *)v140[1], (uint64_t)v124);
    goto LABEL_85;
  }
  v124 = v123;
  v134 = (char *)v119;
  cstdlib_strcpy(v123, "voiceaddonbaseuri.");
  cstdlib_strcat(v124, v51);
  v125 = __n;
  v126 = (char *)heap_Calloc((_QWORD *)v140[1], 1, __n + 1);
  if (!v126)
  {
    heap_Free((_QWORD *)v140[1], v119);
    goto LABEL_154;
  }
  v127 = v126;
  if (__n)
  {
    if ((v136 & 1) != 0)
      v128 = v53;
    else
      v128 = "./";
    v125 = __n;
    cstdlib_strncpy(v126, v128, __n);
  }
  v127[v125] = 0;
  v129 = paramc_ParamSetStrPermanent(v140[5], (uint64_t)v124, v127);
  heap_Free((_QWORD *)v140[1], (uint64_t)v127);
  heap_Free((_QWORD *)v140[1], (uint64_t)v124);
  if ((v129 & 0x80000000) != 0)
  {
    v124 = v134;
    v8 = v129;
    goto LABEL_154;
  }
  cstdlib_strcat(v134, v51);
  cstdlib_strcat(v134, ";");
  v16 = paramc_ParamSetStrPermanent(v140[5], v137, v134);
  heap_Free((_QWORD *)v140[1], (uint64_t)v134);
  if ((v16 & 0x80000000) != 0)
  {
    v8 = v16;
    goto LABEL_85;
  }
LABEL_72:
  v56 = *(const char **)(*(_QWORD *)(v29 + 8) + 72);
  if (!v56)
    goto LABEL_87;
  v57 = (_QWORD *)v41[1];
  v58 = cstdlib_strlen(v56);
  v59 = (char *)heap_Calloc(v57, 1, (v58 + 18));
  *(_QWORD *)(v29 + 72) = v59;
  if (!v59)
  {
    log_OutPublic(v41[4], (uint64_t)"DOMAIN_MNGR", 47000, 0, v60, v61, v62, v63, v130);
LABEL_85:
    v16 = v8;
    goto LABEL_32;
  }
  cstdlib_strcpy(v59, "voiceaddonoffset.");
  v64 = cstdlib_strlen(*(const char **)(v29 + 72));
  if (cstdlib_strlen(*(const char **)(*(_QWORD *)(v29 + 8) + 72)))
  {
    v65 = 0;
    v66 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v29 + 72) + v64 + v66++) = cstdlib_tolower(*(char *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 72)
                                                                                              + v65));
      v65 = v66;
    }
    while (cstdlib_strlen(*(const char **)(*(_QWORD *)(v29 + 8) + 72)) > v66);
    *(_BYTE *)(*(_QWORD *)(v29 + 72) + v64 + v66) = 0;
    if ((v16 & 0x80000000) != 0)
    {
LABEL_32:
      if (*a8)
      {
        activeprompt_db_ObjClose(*a8, 0);
        *a8 = 0;
      }
      return v16;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(v29 + 72) + v64) = 0;
  }
LABEL_87:
  if (!log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)*a8 + 16) + 32)))
    return v16;
  v76 = (_QWORD *)*a8;
  v163 = 0;
  memset(__s2, 0, sizeof(__s2));
  __s1 = 0;
  v160 = 0;
  v159 = 0;
  v158 = 0;
  ssftstring_ObjOpen(*(_QWORD **)(*(_QWORD *)(*v76 + 16) + 8), &v158);
  if (v158)
  {
    activeprompt_db_GetTNTypes((uint64_t)v76, (uint64_t)v158);
    v79 = v158;
  }
  else
  {
    v79 = 0;
  }
  v80 = v76[1];
  v81 = *(_QWORD *)(*v76 + 16);
  v82 = *(uint64_t ***)(v81 + 32);
  v83 = v76[10];
  v84 = *(_QWORD *)(v80 + 184);
  v85 = *(_QWORD *)(v80 + 168);
  if (v79)
  {
    v132 = *(uint64_t ***)(v81 + 32);
    v133 = *(_QWORD *)(v80 + 184);
    v131 = *(_QWORD *)(v80 + 168);
    v135 = v76[10];
    ssftstring_CStr((uint64_t)v79);
    v85 = v131;
    v84 = v133;
    v83 = v135;
    v82 = v132;
  }
  log_OutTraceTuningData(v82, 203, (uint64_t)"%s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s %s%s", v83, v77, v84, v78, v85, "BEG");
  if (v158)
  {
    ssftstring_ObjClose(v158);
    v158 = 0;
  }
  if (vector_GetElemAt(*(_QWORD *)(v76[1] + 264), 0, &v159)
    && *(_DWORD *)v159 == 1
    && vector_GetElemAt(*(_QWORD *)(v76[1] + 264), 1u, &v160)
    && (v86 = v160, *(_DWORD *)v160 == 2))
  {
    v157 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    v150 = 0;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    *(_OWORD *)v147 = 0u;
    *(_OWORD *)__s = 0u;
    v145 = 0u;
    v87 = v159;
    hlp_FillActivePrompt((uint64_t)v76, *(_DWORD *)v159, *(unsigned int **)(v159 + 24), 0, (uint64_t)&v151);
    hlp_FillActivePrompt((uint64_t)v76, *(_DWORD *)v86, *(unsigned int **)(v86 + 24), 0, (uint64_t)__s);
    v88 = *(_DWORD *)(v87 + 16);
    v89 = *(_DWORD *)(v86 + 16);
    v90 = v89 != 0;
    if (v88 | v89)
    {
      v91 = 0;
      v92 = 0;
      do
      {
        if (v90
          && (v91 == v88
           || (v93 = cstdlib_strlen(v147[0]), v93 > cstdlib_strlen((const char *)v154))
           || (v94 = cstdlib_strlen(v147[0]), v94 == cstdlib_strlen((const char *)v154))
           && HIDWORD(v145) > HIDWORD(v152)
           || (v95 = cstdlib_strlen(v147[0]), v95 == cstdlib_strlen((const char *)v154))
           && HIDWORD(v145) == HIDWORD(v152)
           && v146 > v153))
        {
          hlp_TraceContent_AP((uint64_t)v76, (uint64_t)__s);
          if (++v92 < *(_DWORD *)(v160 + 16))
          {
            v96 = *(_DWORD *)v160;
            v97 = (unsigned int *)(*(_QWORD *)(v160 + 24) + 24 * v92);
            v98 = __s;
            v99 = (uint64_t)v76;
            v100 = v92;
LABEL_113:
            hlp_FillActivePrompt(v99, v96, v97, v100, (uint64_t)v98);
          }
        }
        else
        {
          hlp_TraceContent_AP((uint64_t)v76, (uint64_t)&v151);
          if (++v91 < *(_DWORD *)(v159 + 16))
          {
            v96 = *(_DWORD *)v159;
            v97 = (unsigned int *)(*(_QWORD *)(v159 + 24) + 24 * v91);
            v98 = (char **)&v151;
            v99 = (uint64_t)v76;
            v100 = v91;
            goto LABEL_113;
          }
        }
        v88 = *(_DWORD *)(v159 + 16);
        v101 = *(_DWORD *)(v160 + 16);
        v90 = v92 < v101;
      }
      while (v91 < v88 || v92 < v101);
    }
    v103 = 2;
  }
  else
  {
    v103 = 0;
  }
  while (vector_GetElemAt(*(_QWORD *)(v76[1] + 264), v103, &__s1))
  {
    v104 = __s1;
    if (*((_DWORD *)__s1 + 4))
    {
      v105 = 0;
      v106 = 0;
      do
      {
        hlp_FillActivePrompt((uint64_t)v76, *(_DWORD *)v104, (unsigned int *)(*((_QWORD *)v104 + 3) + v105), v106, (uint64_t)__s2);
        hlp_TraceContent_AP((uint64_t)v76, (uint64_t)__s2);
        ++v106;
        v104 = __s1;
        v105 += 24;
      }
      while (v106 < *((unsigned int *)__s1 + 4));
    }
    ++v103;
  }
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v76 + 16) + 32), 203, (uint64_t)"%s%s", v107, v108, v109, v110, v111, "END");
  return v16;
}

uint64_t activeprompt_db_Get(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = 2296389652;
  v12 = 0;
  hlp_CheckBECompatibility(a1);
  if (*(_DWORD *)(a1 + 28) == 2
    && *(_DWORD *)(a1 + 24)
    && vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v12))
  {
    v7 = 0;
    while (1)
    {
      v8 = v12;
      if (*(_DWORD *)(v12 + 16))
        break;
LABEL_9:
      if (!vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), ++v7, &v12))
        return v6;
    }
    v9 = 0;
    v10 = 0;
    while (LH_stricmp(a2, (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 240)+ *(unsigned int *)(*(_QWORD *)(v8 + 24) + v9))))
    {
      ++v10;
      v8 = v12;
      v9 += 24;
      if (v10 >= *(unsigned int *)(v12 + 16))
        goto LABEL_9;
    }
    if (a3)
      hlp_FillActivePrompt(a1, *(_DWORD *)v12, (unsigned int *)(*(_QWORD *)(v12 + 24) + v9), v10, a3);
    return 0;
  }
  return v6;
}

uint64_t hlp_CheckBECompatibility(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  v19 = 0;
  v18 = 0;
  result = domain_mngr_utils_IsActiveVoiceAddon(v3, *(char **)(v2 + 72), (char *)(v2 + 80), (char *)(v2 + 88), (char *)(v2 + 100), &v18);
  if ((result & 0x80000000) != 0)
  {
    result = hlp_CheckAttribute((uint64_t)v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"langcode", (char *)(*(_QWORD *)(a1 + 8) + 44));
    if (!(_DWORD)result)
      goto LABEL_26;
    result = hlp_CheckAttribute((uint64_t)v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"voice", *(char **)(*(_QWORD *)(a1 + 8) + 64));
    if (!(_DWORD)result)
    {
      result = hlp_CheckAttribute((uint64_t)v3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168), (uint64_t)"fevoice", *(char **)(*(_QWORD *)(a1 + 8) + 64));
      if (!(_DWORD)result)
        goto LABEL_26;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v6 + 80))
    {
      result = paramc_ParamGetStr(v3[5], (uint64_t)"uselectrawdataversion", &v19);
      v6 = *(_QWORD *)(a1 + 8);
      if ((result & 0x80000000) == 0)
      {
        result = LH_stricmp(v19, (char *)(v6 + 80));
        v6 = *(_QWORD *)(a1 + 8);
        if ((_DWORD)result)
        {
          v11 = v3[4];
          v12 = "voiceRawDataVersion";
LABEL_15:
          result = log_OutPublic(v11, (uint64_t)"DOMAIN_MNGR", 47002, (uint64_t)"%s%s%s%s", v7, v8, v9, v10, v12);
          goto LABEL_26;
        }
      }
    }
    if (*(_BYTE *)(v6 + 100))
    {
      result = paramc_ParamGetStr(v3[5], (uint64_t)"uselectreductionversion", &v19);
      v6 = *(_QWORD *)(a1 + 8);
      if ((result & 0x80000000) == 0)
      {
        result = LH_stricmp(v19, (char *)(v6 + 100));
        v6 = *(_QWORD *)(a1 + 8);
        if ((_DWORD)result)
        {
          v11 = v3[4];
          v12 = "voiceReductionVersion";
          goto LABEL_15;
        }
      }
    }
    if (*(_BYTE *)(v6 + 88))
    {
      if (!*(_BYTE *)(v6 + 100)
        || (result = LH_stricmp((char *)(v6 + 100), "null"), v6 = *(_QWORD *)(a1 + 8), (_DWORD)result))
      {
        result = hlp_CheckAttribute((uint64_t)v3, *(_QWORD *)(v6 + 168), (uint64_t)"reduction", (char *)(v6 + 88));
        if (!(_DWORD)result)
          goto LABEL_26;
        v6 = *(_QWORD *)(a1 + 8);
      }
    }
    if (*(_BYTE *)(v6 + 120))
    {
      if ((paramc_ParamGetStr(v3[5], (uint64_t)"voicecomponentid", &v19) & 0x80000000) != 0
        || (result = LH_stricmp(v19, (char *)(*(_QWORD *)(a1 + 8) + 120)), (_DWORD)result))
      {
        v17 = v3[4];
LABEL_25:
        result = log_OutPublic(v17, (uint64_t)"DOMAIN_MNGR", 47002, (uint64_t)"%s%s%s%s", v13, v14, v15, v16, "VoiceComponentID");
        goto LABEL_26;
      }
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_DWORD *)(v6 + 160) != 1)
      goto LABEL_3;
    if (*(_BYTE *)(v6 + 120))
      goto LABEL_3;
    result = paramc_ParamGetStr(v3[5], (uint64_t)"voicecomponentid", &v19);
    if ((result & 0x80000000) == 0 && !*v19)
      goto LABEL_3;
    v17 = v3[4];
    goto LABEL_25;
  }
  if (!v18)
  {
LABEL_26:
    v5 = 1;
    goto LABEL_27;
  }
LABEL_3:
  v5 = 2;
LABEL_27:
  *(_DWORD *)(a1 + 28) = v5;
  return result;
}

uint64_t hlp_FillActivePrompt(uint64_t result, int a2, unsigned int *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = 0;
  v6 = *(_QWORD **)(result + 8);
  v7 = v6[30] + *a3;
  *(_QWORD *)a5 = result;
  *(_DWORD *)(a5 + 96) = a4;
  *(_DWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = v7;
  *(_WORD *)(a5 + 24) = *((_WORD *)a3 + 2);
  v8 = *((unsigned __int8 *)a3 + 7);
  *(_DWORD *)(a5 + 28) = *((unsigned __int8 *)a3 + 6);
  *(_DWORD *)(a5 + 32) = v8;
  v9 = *((unsigned __int16 *)a3 + 4);
  if ((_DWORD)v9 == 0xFFFF)
    v10 = 0;
  else
    v10 = v7 + v9;
  v11 = *((unsigned __int16 *)a3 + 5);
  v12 = (_DWORD)v11 == 0xFFFF;
  v13 = v7 + v11;
  if (v12)
    v13 = 0;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v13;
  *(_WORD *)(a5 + 56) = *((_WORD *)a3 + 9);
  v14 = a3[5];
  v15 = a3[3];
  *(_DWORD *)(a5 + 60) = v14;
  *(_DWORD *)(a5 + 64) = v15;
  if (a2 != 2)
    v5 = v6[31] + 4 * v15;
  *(_QWORD *)(a5 + 72) = v5;
  v16 = *((unsigned __int16 *)a3 + 8);
  v17 = v7 + v16;
  if ((_DWORD)v16 == 0xFFFF)
    v17 = 0;
  v18 = v6[32] + 8 * v14;
  *(_QWORD *)(a5 + 80) = v17;
  *(_QWORD *)(a5 + 88) = v18;
  return result;
}

uint64_t activeprompt_db_GetTNTypes(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v8;

  v8 = 0;
  hlp_CheckBECompatibility(a1);
  if (*(_DWORD *)(a1 + 28) == 2 && vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v8))
  {
    v4 = 1;
    do
    {
      v5 = *(char **)(v8 + 8);
      if (v5 && *v5)
      {
        ssftstring_AppendCStr(a2, v5);
        ssftstring_AppendChar(a2, 124);
      }
    }
    while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v4++, &v8));
  }
  return 2296389652;
}

uint64_t activeprompt_db_ConsultOriOrth(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  size_t v37;
  int v38;
  unsigned int *v39;
  __int128 *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  size_t v44;
  unsigned int v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  __int16 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *__s[2];
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[16];

  v64 = 0;
  hlp_CheckBECompatibility(a1);
  v9 = 0;
  if (*(_DWORD *)(a1 + 28) != 2)
    return v9;
  if (!*(_DWORD *)(a1 + 24) || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 28))
    return 0;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 213, (uint64_t)"%s%s %s%s %s%s", v10, v11, v12, v13, v14, "BEG");
    v15 = a5;
    do
    {
      if (!v15)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 214, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
          *a2,
          0);
        if (!a4)
          goto LABEL_19;
        goto LABEL_17;
      }
      v16 = v15;
      v15 = *(_QWORD *)(v15 + 16);
    }
    while (v15);
    if (!a4)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
      v19 = *a2;
      v20 = "text/plain;charset=utf-8";
      v21 = 0;
      goto LABEL_18;
    }
    if (*a4)
      v17 = (*(_DWORD *)(v16 + 8) + *(_DWORD *)(v16 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v17 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 214, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
      *a2,
      v17);
LABEL_17:
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
    v19 = *a3;
    v21 = 32 * *a4;
    v20 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_18:
    log_OutTraceTuningDataBinary(v18, 214, (uint64_t)"", (uint64_t)v20, v19, v21);
  }
LABEL_19:
  if (!a5)
  {
    v9 = 0;
    goto LABEL_72;
  }
  v22 = a5;
  while (1)
  {
    v80 = 0;
    v81 = 0;
    v79 = 0;
    if (!*(_DWORD *)v22)
    {
      v9 = 0;
      goto LABEL_66;
    }
    memset(v82, 0, 104);
    v64 = 0;
    if (!vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 0, &v79)
      || *(_DWORD *)v79 != 1
      || !vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), 1u, &v80)
      || *(_DWORD *)v80 != 2)
    {
      v9 = 0;
      v47 = 0;
      goto LABEL_54;
    }
    v78 = 0;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    v72 = 0u;
    v71 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    *(_OWORD *)__s = 0u;
    v65 = 0u;
    v66 = 0u;
    v23 = domain_mngr_utils_ListContainsString(*(char **)(v79 + 8), "*");
    v24 = domain_mngr_utils_ListContainsString(*(char **)(v80 + 8), "*");
    if (!v23 || !v24)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 216, (uint64_t)"%s%s", v25, v26, v27, v28, v29, "INFO");
LABEL_69:
      v9 = 0;
      goto LABEL_70;
    }
    v30 = v79;
    hlp_FillActivePrompt(a1, *(_DWORD *)v79, *(unsigned int **)(v79 + 24), 0, (uint64_t)&v72);
    v31 = v80;
    hlp_FillActivePrompt(a1, *(_DWORD *)v80, *(unsigned int **)(v80 + 24), 0, (uint64_t)&v65);
    v9 = 0;
    if (*(_DWORD *)v22 == 1)
    {
      v32 = *(_DWORD *)(v30 + 16);
      v33 = *(_DWORD *)(v31 + 16);
      v34 = v33 != 0;
      if (v32 | v33)
      {
        v35 = 0;
        v36 = 0;
        while (1)
        {
          if (v34
            && (v36 == v32
             || (v37 = cstdlib_strlen(__s[0]), v37 > cstdlib_strlen((const char *)v75))
             || (v43 = cstdlib_strlen(__s[0]), v43 == cstdlib_strlen((const char *)v75)) && HIDWORD(v66) > HIDWORD(v73)
             || (v44 = cstdlib_strlen(__s[0]), v44 == cstdlib_strlen((const char *)v75))
             && HIDWORD(v66) == HIDWORD(v73)
             && v67 > v74))
          {
            v9 = activeprompt_ConsultOriOrth(&v65, (const char **)a2, a3, a4, v22, &v64);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_72;
            if (++v35 >= *(_DWORD *)(v80 + 16))
              goto LABEL_46;
            v38 = *(_DWORD *)v80;
            v39 = (unsigned int *)(*(_QWORD *)(v80 + 24) + 24 * v35);
            v40 = &v65;
            v41 = a1;
            v42 = v35;
          }
          else
          {
            v9 = activeprompt_ConsultOriOrth(&v72, (const char **)a2, a3, a4, v22, &v64);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_72;
            if (++v36 >= *(_DWORD *)(v79 + 16))
              goto LABEL_46;
            v38 = *(_DWORD *)v79;
            v39 = (unsigned int *)(*(_QWORD *)(v79 + 24) + 24 * v36);
            v40 = &v72;
            v41 = a1;
            v42 = v36;
          }
          hlp_FillActivePrompt(v41, v38, v39, v42, (uint64_t)v40);
LABEL_46:
          if (*(_DWORD *)v22 == 1)
          {
            v32 = *(_DWORD *)(v79 + 16);
            v45 = *(_DWORD *)(v80 + 16);
            v34 = v35 < v45;
            if (v36 < v32 || v35 < v45)
              continue;
          }
          goto LABEL_70;
        }
      }
      goto LABEL_69;
    }
LABEL_70:
    v47 = 2;
LABEL_54:
    if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v47, &v81))
      break;
LABEL_66:
    v22 = *(_QWORD *)(v22 + 16);
    if (!v22)
      goto LABEL_72;
  }
  do
  {
    if (domain_mngr_utils_ListContainsString(*(char **)(v81 + 8), "*"))
    {
      if (*(_DWORD *)v22 == 1)
      {
        v48 = v81;
        if (*(_DWORD *)(v81 + 16))
        {
          v49 = 0;
          v50 = 0;
          while (1)
          {
            hlp_FillActivePrompt(a1, *(_DWORD *)v48, (unsigned int *)(*(_QWORD *)(v48 + 24) + v49), v50, (uint64_t)v82);
            v9 = activeprompt_ConsultOriOrth(v82, (const char **)a2, a3, a4, v22, &v64);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_72;
            if (*(_DWORD *)v22 == 1)
            {
              ++v50;
              v48 = v81;
              v49 += 24;
              if (v50 < *(unsigned int *)(v81 + 16))
                continue;
            }
            break;
          }
        }
      }
    }
    ++v47;
  }
  while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264), v47, &v81));
  if ((v9 & 0x80000000) == 0)
    goto LABEL_66;
LABEL_72:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32)))
  {
    do
    {
      if (!a5)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 215, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
          *a2,
          0);
        if (!a4)
          goto LABEL_85;
        goto LABEL_83;
      }
      v51 = a5;
      a5 = *(_QWORD *)(a5 + 16);
    }
    while (a5);
    if (!a4)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
      v59 = *a2;
      v60 = "text/plain;charset=utf-8";
      v61 = 0;
      goto LABEL_84;
    }
    if (*a4)
      v52 = (*(_DWORD *)(v51 + 8) + *(_DWORD *)(v51 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v52 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 215, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
      *a2,
      v52);
LABEL_83:
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
    v59 = *a3;
    v61 = 32 * *a4;
    v60 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_84:
    log_OutTraceTuningDataBinary(v58, 215, (uint64_t)"", (uint64_t)v60, v59, v61);
LABEL_85:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 213, (uint64_t)"%s%s %s%u", v53, v54, v55, v56, v57, "END");
  }
  return v9;
}

uint64_t activeprompt_db_Consult(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  _BOOL4 v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  const char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int16 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  size_t v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  __int128 *v70;
  int v71;
  size_t v72;
  size_t v73;
  unsigned int v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  __int16 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *__s[2];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112[16];

  v15 = (_QWORD *)a1;
  v94 = 0;
  hlp_CheckBECompatibility(a1);
  v16 = 0;
  if (*((_DWORD *)v15 + 7) != 2)
    return v16;
  if (!*((_DWORD *)v15 + 6))
    return 0;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s %s%s %s%s", v17, v18, v19, v20, v21, "BEG");
    v22 = a7;
    do
    {
      if (!v22)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 274, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
          *a2,
          0);
        if (!a4)
          goto LABEL_18;
        goto LABEL_16;
      }
      v23 = v22;
      v22 = *(_QWORD *)(v22 + 16);
    }
    while (v22);
    if (!a4)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
      v26 = *a2;
      v27 = "text/plain;charset=depes";
      v28 = 0;
      goto LABEL_17;
    }
    if (*a4)
      v24 = (*(_DWORD *)(v23 + 8) + *(_DWORD *)(v23 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v24 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 274, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
      *a2,
      v24);
LABEL_16:
    v25 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
    v26 = *a3;
    v28 = 32 * *a4;
    v27 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_17:
    log_OutTraceTuningDataBinary(v25, 274, (uint64_t)"", (uint64_t)v27, v26, v28);
  }
LABEL_18:
  v89 = a7;
  if (!a7)
  {
    v16 = 0;
    goto LABEL_114;
  }
  v90 = a5;
  v91 = a6;
  v92 = a8;
  v93 = v15;
  v29 = a4;
  while (1)
  {
    v110 = 0;
    v111 = 0;
    v109 = 0;
    if (!*(_DWORD *)a7)
    {
      v16 = 0;
      goto LABEL_60;
    }
    memset(v112, 0, 104);
    v94 = 0;
    if (!vector_GetElemAt(*(_QWORD *)(v15[1] + 264), 0, &v109)
      || *(_DWORD *)v109 != 1
      || !vector_GetElemAt(*(_QWORD *)(v15[1] + 264), 1u, &v110)
      || *(_DWORD *)v110 != 2)
    {
      v16 = 0;
      v35 = 0;
      goto LABEL_36;
    }
    v108 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    *(_OWORD *)__s = 0u;
    v95 = 0u;
    v96 = 0u;
    v30 = domain_mngr_utils_ListContainsString(*(char **)(v109 + 8), "*");
    v31 = v30 != 0;
    if (!v30 && a4)
    {
      v32 = *a4;
      if (*a4)
      {
        v33 = 0;
        v34 = 0;
        v31 = 0;
        do
        {
          if (*(_DWORD *)(*a3 + v33) == 21)
          {
            if (domain_mngr_utils_ListContainsString(*(char **)(v109 + 8), *(char **)(*a3 + v33 + 24)) == 1)
              v31 = 1;
            v32 = *a4;
          }
          ++v34;
          v33 += 32;
        }
        while (v34 < v32);
      }
      else
      {
        v31 = 0;
      }
    }
    if (domain_mngr_utils_ListContainsString(*(char **)(v110 + 8), "*"))
    {
      v54 = 1;
      goto LABEL_65;
    }
    if (a4)
    {
      v55 = *a4;
      if (*a4)
      {
        v56 = 0;
        v57 = 0;
        v54 = 0;
        do
        {
          if (*(_DWORD *)(*a3 + v56) == 21)
          {
            if (domain_mngr_utils_ListContainsString(*(char **)(v110 + 8), *(char **)(*a3 + v56 + 24)) == 1)
              v54 = 1;
            v55 = *a4;
          }
          ++v57;
          v56 += 32;
        }
        while (v57 < v55);
LABEL_65:
        if (v54 && v31)
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    v54 = 0;
LABEL_78:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v93 + 16) + 32), 276, (uint64_t)"%s%s", v49, v50, v51, v52, v53, "INFO");
LABEL_79:
    v16 = 0;
    if (v54 == 1 && v31)
    {
      v58 = v109;
      hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v109, *(unsigned int **)(v109 + 24), 0, (uint64_t)&v102);
      v59 = v110;
      a4 = v29;
      hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v110, *(unsigned int **)(v110 + 24), 0, (uint64_t)&v95);
      v16 = 0;
      if (*(_DWORD *)a7 == 1)
      {
        v60 = *(_DWORD *)(v58 + 16);
        v61 = *(_DWORD *)(v59 + 16);
        v62 = v61 != 0;
        if (v60 | v61)
        {
          v63 = 0;
          v64 = 0;
          while (1)
          {
            if (v62
              && (__s[0] ? (v65 = (_QWORD)v105 == 0) : (v65 = 1),
                  !v65
               && (v64 == v60
                || (v66 = cstdlib_strlen(__s[0]), v66 > cstdlib_strlen((const char *)v105))
                || (v72 = cstdlib_strlen(__s[0]), v72 == cstdlib_strlen((const char *)v105))
                && HIDWORD(v96) > HIDWORD(v103)
                || (v73 = cstdlib_strlen(__s[0]), v73 == cstdlib_strlen((const char *)v105))
                && HIDWORD(v96) == HIDWORD(v103)
                && v97 > v104)))
            {
              v16 = activeprompt_Consult((uint64_t **)&v95, *(char **)(v110 + 8), (const char **)a2, a3, v29, a7, v90, v91, &v94, v92);
              if ((v16 & 0x80000000) != 0)
                goto LABEL_130;
              ++v63;
              v67 = (uint64_t)v93;
              if (v63 < *(_DWORD *)(v110 + 16))
              {
                v68 = *(_DWORD *)v110;
                v69 = (unsigned int *)(*(_QWORD *)(v110 + 24) + 24 * v63);
                v70 = &v95;
                v71 = v63;
LABEL_102:
                hlp_FillActivePrompt(v67, v68, v69, v71, (uint64_t)v70);
              }
            }
            else
            {
              v16 = activeprompt_Consult((uint64_t **)&v102, *(char **)(v109 + 8), (const char **)a2, a3, v29, a7, v90, v91, &v94, v92);
              if ((v16 & 0x80000000) != 0)
              {
LABEL_130:
                v15 = v93;
                goto LABEL_114;
              }
              ++v64;
              v67 = (uint64_t)v93;
              if (v64 < *(_DWORD *)(v109 + 16))
              {
                v68 = *(_DWORD *)v109;
                v69 = (unsigned int *)(*(_QWORD *)(v109 + 24) + 24 * v64);
                v70 = &v102;
                v71 = v64;
                goto LABEL_102;
              }
            }
            if (*(_DWORD *)a7 == 1)
            {
              v60 = *(_DWORD *)(v109 + 16);
              v74 = *(_DWORD *)(v110 + 16);
              v62 = v63 < v74;
              if (v64 < v60 || v63 < v74)
                continue;
            }
            goto LABEL_111;
          }
        }
        v16 = 0;
      }
    }
LABEL_111:
    v35 = 2;
    v15 = v93;
LABEL_36:
    if (vector_GetElemAt(*(_QWORD *)(v15[1] + 264), v35, &v111))
      break;
LABEL_60:
    a7 = *(_QWORD *)(a7 + 16);
    if (!a7)
      goto LABEL_114;
  }
  v36 = (const char **)a2;
  do
  {
    if (domain_mngr_utils_ListContainsString(*(char **)(v111 + 8), "*"))
      goto LABEL_133;
    if (!v29)
      goto LABEL_55;
    v45 = *v29;
    if (!*v29)
      goto LABEL_55;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    do
    {
      if (*(_DWORD *)(*a3 + v46) == 21)
      {
        if (domain_mngr_utils_ListContainsString(*(char **)(v111 + 8), *(char **)(*a3 + v46 + 24)) == 1)
          v48 = 1;
        v45 = *v29;
      }
      ++v47;
      v46 += 32;
    }
    while (v47 < v45);
    v15 = v93;
    if (v48)
    {
LABEL_133:
      if (*(_DWORD *)a7 == 1)
      {
        v42 = v111;
        if (*(_DWORD *)(v111 + 16))
        {
          v43 = 0;
          v44 = 0;
          while (1)
          {
            hlp_FillActivePrompt((uint64_t)v93, *(_DWORD *)v42, (unsigned int *)(*(_QWORD *)(v42 + 24) + v43), v44, (uint64_t)v112);
            v16 = activeprompt_Consult(v112, *(char **)(v42 + 8), v36, a3, v29, a7, v90, v91, &v94, v92);
            if ((v16 & 0x80000000) != 0)
              break;
            if (*(_DWORD *)a7 == 1)
            {
              ++v44;
              v42 = v111;
              v43 += 24;
              if (v44 < *(unsigned int *)(v111 + 16))
                continue;
            }
            goto LABEL_56;
          }
          a2 = (uint64_t *)v36;
          v15 = v93;
          a4 = v29;
          goto LABEL_114;
        }
      }
    }
    else
    {
LABEL_55:
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s", v37, v38, v39, v40, v41, "INFO");
    }
LABEL_56:
    ++v35;
    v15 = v93;
  }
  while (vector_GetElemAt(*(_QWORD *)(v93[1] + 264), v35, &v111));
  a2 = (uint64_t *)v36;
  a4 = v29;
  if ((v16 & 0x80000000) == 0)
    goto LABEL_60;
LABEL_114:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32)))
  {
    v76 = v89;
    do
    {
      if (!v76)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 275, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
          *a2,
          0);
        if (!a4)
          goto LABEL_128;
        goto LABEL_126;
      }
      v77 = v76;
      v76 = *(_QWORD *)(v76 + 16);
    }
    while (v76);
    if (!a4)
    {
      v84 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
      v85 = *a2;
      v86 = "text/plain;charset=depes";
      v87 = 0;
      goto LABEL_127;
    }
    if (*a4)
      v78 = (*(_DWORD *)(v77 + 8) + *(_DWORD *)(v77 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v78 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32), 275, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
      *a2,
      v78);
LABEL_126:
    v84 = *(_QWORD *)(*(_QWORD *)(*v15 + 16) + 32);
    v85 = *a3;
    v87 = 32 * *a4;
    v86 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_127:
    log_OutTraceTuningDataBinary(v84, 275, (uint64_t)"", (uint64_t)v86, v85, v87);
LABEL_128:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*v15 + 16) + 32), 273, (uint64_t)"%s%s %s%u", v79, v80, v81, v82, v83, "END");
  }
  return v16;
}

uint64_t IsRecordingCS(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*a1 + 16);
  v11 = 0;
  v10 = 0;
  if ((paramc_ParamGetInt(*(_QWORD *)(v6 + 40), (uint64_t)"frequencyhz", &v10) & 0x80000000) != 0)
  {
    result = 0;
    v8 = 0;
    if (a3)
LABEL_11:
      *a3 = v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (v8)
        heap_Free(*(_QWORD **)(v6 + 8), v8);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))((char *)&off_24D2935C8 + v7))(v6, a2, *(_QWORD *)(a1[1] + 64), *(_QWORD *)(a1[1] + 168), v10);
      if (v8)
      {
        if ((brk_DataOpenEx(*(_QWORD *)(v6 + 24), v8, 1, (uint64_t)&v11) & 0x80000000) == 0)
          break;
      }
      v7 += 8;
      if (v7 == 48)
      {
        result = 0;
        if (a3)
          goto LABEL_11;
        return result;
      }
    }
    brk_DataClose(*(_QWORD *)(v6 + 24), v11);
    result = 1;
    if (a3)
      goto LABEL_11;
  }
  return result;
}

char *hlp_GetRecordingSrcFromApdbBrkString(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = cstdlib_strlen(__s);
  v10 = (char *)heap_Alloc(v8, v9 + 5);
  v11 = v10;
  if (v10)
  {
    cstdlib_strcpy(v10, __s);
    if (!hlp_ReplaceRpWithCs(v11, 1, a5))
    {
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v11);
      return 0;
    }
  }
  return v11;
}

char *hlp_GetRecordingSrcFromFixedBrkString(uint64_t a1, uint64_t a2, const char *a3, const char *a4, int a5)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  char *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = cstdlib_strlen("apdb");
  v10 = cstdlib_strlen("/cs/");
  v11 = cstdlib_strlen(a3);
  v12 = cstdlib_strlen(a4);
  v13 = (char *)heap_Alloc(v8, v9 + v10 + v11 + v12 + 6);
  v14 = v13;
  if (v13)
  {
    *v13 = 0;
    hlp_AppendStandardName(v13, 1, a3, a4, a5);
  }
  return v14;
}

char *hlp_GetRecordingSrcFromApdbURI(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  char *v6;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _OWORD v15[2];
  uint64_t v16;

  v6 = __s;
  v16 = *MEMORY[0x24BDAC8D0];
  if (__s)
    __s = (char *)cstdlib_strlen(__s);
  if (!IsThisUrlOrRealPath(v6, (uint64_t)__s, 0))
    return 0;
  memset(v15, 0, sizeof(v15));
  v8 = *(_QWORD *)(a1 + 8);
  v9 = cstdlib_strlen(v6);
  v10 = (char *)heap_Alloc(v8, v9 + 5);
  v11 = v10;
  if (v10)
  {
    cstdlib_strcpy(v10, v6);
    v12 = cstdlib_strrchr(v11, 46);
    if (v12)
    {
      v13 = v12;
      cstdlib_strcpy((char *)v15, v12);
      *v13 = 0;
    }
    if (hlp_ReplaceRpWithCs(v11, 0, a5))
    {
      cstdlib_strcat(v11, (const char *)v15);
      return v11;
    }
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v11);
    return 0;
  }
  return v11;
}

char *hlp_GetRecordingSrcFromFixedURI(uint64_t a1, char *__s, const char *a3, const char *a4, int a5)
{
  char *v8;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char __sa[32];
  char v21[512];
  char __s2[32];
  char __src[32];
  uint64_t v24;

  v8 = __s;
  v24 = *MEMORY[0x24BDAC8D0];
  if (__s)
    __s = (char *)cstdlib_strlen(__s);
  if (!IsThisUrlOrRealPath(v8, (uint64_t)__s, 0))
    return 0;
  if (!SplitpathOrUrl((uint64_t)v8, __src, (uint64_t)__s2, v21, 0, __sa))
    return 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = cstdlib_strlen(v8);
  v12 = cstdlib_strlen("apdb");
  v13 = cstdlib_strlen("_cs_");
  v14 = cstdlib_strlen(a3);
  v15 = cstdlib_strlen(a4);
  v16 = cstdlib_strlen(__sa);
  v17 = (char *)heap_Alloc(v10, v11 + v12 + v13 + v14 + v15 + v16 + 6);
  if (!v17)
    return 0;
  v18 = v17;
  cstdlib_strcpy(v17, __src);
  cstdlib_strcat(v18, __s2);
  cstdlib_strcat(v18, v21);
  hlp_AppendStandardName(v18, 0, a3, a4, a5);
  cstdlib_strcat(v18, __sa);
  return v18;
}

char *hlp_GetRecordingSrcFromCupWithCustomName(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  size_t v8;
  char *v9;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char *__s;

  v8 = cstdlib_strlen("cup:");
  if (cstdlib_strncmp(a2, "cup:", v8))
    return 0;
  __s = 0;
  if (!cupreader_GetTuningDataNameInCup(a1, &__s))
    return 0;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = cstdlib_strlen(a2);
  v13 = cstdlib_strlen(__s);
  v14 = cstdlib_strlen("cup:");
  v9 = (char *)heap_Alloc(v11, v12 + v14 + v13 + 10);
  if (v9)
  {
    v15 = cstdlib_strlen("cup:");
    cstdlib_strcpy(v9, &a2[v15]);
    cstdlib_strcat(v9, ":");
    cstdlib_strcat(v9, __s);
    if (!hlp_ReplaceRpWithCs(v9, 0, a5))
    {
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v9);
      return 0;
    }
  }
  return v9;
}

char *hlp_GetRecordingSrcFromCupWithFixedName(uint64_t a1, const char *a2, const char *a3, const char *a4, int a5)
{
  size_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;

  v10 = cstdlib_strlen("cup:");
  if (cstdlib_strncmp(a2, "cup:", v10))
    return 0;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = cstdlib_strlen(a2);
  v14 = cstdlib_strlen("apdb");
  v15 = cstdlib_strlen("_cs_");
  v16 = cstdlib_strlen(a3);
  v17 = cstdlib_strlen(a4);
  v11 = (char *)heap_Alloc(v12, v13 + v14 + v15 + v16 + v17 + 6);
  if (v11)
  {
    v18 = cstdlib_strlen("cup:");
    cstdlib_strcpy(v11, &a2[v18]);
    cstdlib_strcat(v11, ":");
    hlp_AppendStandardName(v11, 0, a3, a4, a5);
  }
  return v11;
}

uint64_t activeprompt_db_CopyPartsGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v6;
  int v8;

  result = 0;
  if (a1 && a3)
  {
    v6 = *(const char **)(a1 + 8);
    if (v6)
    {
      v8 = cstdlib_strlen(v6);
      result = heap_Alloc(a2, (v8 + 1));
      *(_QWORD *)(a3 + 8) = result;
      if (!result)
        return result;
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 8));
    }
    return 1;
  }
  return result;
}

_QWORD *activeprompt_db_FreePartsGroup(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result[1];
    if (v2)
      return heap_Free(a2, v2);
  }
  return result;
}

uint64_t hlp_CheckAttribute(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;

  v10 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), a3, &v10) & 0x80000000) == 0 && !LH_stricmp(v10, a4))
    return 1;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 3, 0, (uint64_t)"APDB does not match the voice: %s=%s, %s=%s, %s=%s, %s=%s", v6, v7, v8, (uint64_t)"domain");
  return 0;
}

uint64_t hlp_ReplaceRpWithCs(char *__s1, int a2, int a3)
{
  const char *v5;
  const char *v6;
  const char *v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  size_t v12;

  if (a2)
    v5 = "/rp/";
  else
    v5 = "_rp_";
  if (a2)
    v6 = "/cs/";
  else
    v6 = "_cs_";
  if (a2)
    v7 = "/f";
  else
    v7 = "_f";
  v8 = __s1;
  if (*v5)
  {
    v9 = 0;
    v10 = __s1;
    do
    {
      v8 = v9;
      v9 = cstdlib_strstr(v10, v5);
      v10 = v9 + 1;
    }
    while (v9);
  }
  if (!v8)
    return 0;
  v11 = cstdlib_strlen(v5);
  cstdlib_strncpy(v8, v6, v11);
  cstdlib_strcat(__s1, v7);
  v12 = cstdlib_strlen(__s1);
  LH_itoa(a3 / 1000, &__s1[v12], 0xAu);
  return 1;
}

char *hlp_AppendStandardName(char *a1, int a2, const char *a3, const char *a4, int a5)
{
  BOOL v10;
  const char *v11;
  const char *v12;
  const char *v13;
  char *v14;

  cstdlib_strcat(a1, "apdb");
  v10 = a2 == 0;
  if (a2)
    v11 = "/cs/";
  else
    v11 = "_cs_";
  if (a2)
    v12 = "/";
  else
    v12 = "_";
  if (v10)
    v13 = "_f";
  else
    v13 = "/f";
  cstdlib_strcat(a1, v11);
  cstdlib_strcat(a1, a3);
  cstdlib_strcat(a1, v12);
  cstdlib_strcat(a1, a4);
  cstdlib_strcat(a1, v13);
  v14 = &a1[cstdlib_strlen(a1)];
  return LH_itoa(a5 / 1000, v14, 0xAu);
}

uint64_t hlp_GetMimeParam(uint64_t a1, char *a2, char *__s, char **a4)
{
  uint64_t v4;
  unsigned int v9;
  char *v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned int v25;

  v4 = 2296389639;
  if (a2)
  {
    if (__s)
    {
      if (*a2)
      {
        if (*__s)
        {
          *a4 = 0;
          v9 = cstdlib_strlen(__s);
          v10 = cstdlib_strchr(a2, 59);
          v4 = 2296389652;
          if (v10)
          {
            v11 = v10;
            v12 = v9;
            do
            {
              v13 = v11 + 1;
              if (!cstdlib_strncmp(v11 + 1, __s, v12))
              {
                v14 = &v13[v12];
                if (v13[v12] == 61)
                {
                  v15 = 0;
                  v16 = v14 + 1;
                  v17 = &v11[v12];
                  while (v17[v15 + 2] && v17[v15 + 2] != 59)
                    ++v15;
                  v18 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), (v15 + 1));
                  *a4 = v18;
                  if (!v18)
                  {
                    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v19, v20, v21, v22, v25);
                    return 2296389642;
                  }
                  if ((_DWORD)v15)
                  {
                    v23 = v15;
                    cstdlib_strncpy(v18, v16, v15);
                    v18 = &(*a4)[v15];
                  }
                  else
                  {
                    v23 = 0;
                  }
                  v4 = 0;
                  v13 = &v11[v12 + 1 + v15];
                  *v18 = 0;
                  v12 = v23;
                }
              }
              v11 = cstdlib_strchr(v13, 59);
            }
            while (v11);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t hlp_TraceContent_AP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10[10];
  char __dst[10];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  cstdlib_strcpy(__dst, AP_BOUNDARYCND_STR[*(unsigned int *)(a2 + 28)]);
  if (*(_DWORD *)(a2 + 28) == 5)
    __dst[1] = *(_BYTE *)(a2 + 24);
  cstdlib_strcpy(v10, AP_BOUNDARYCND_STR[*(unsigned int *)(a2 + 32)]);
  if (*(_DWORD *)(a2 + 32) == 5)
    v10[1] = *(_BYTE *)(a2 + 25);
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 204, (uint64_t)"%s%s %s%s %s%s %s%s %s%s %s%s %s%s", v4, v5, v6, v7, v8, "NAME");
  return log_OutTraceTuningDataBinary(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32), 204, (uint64_t)"", (uint64_t)"application/x-realspeak-usids;version=4.0",
           a2 + 64,
           4 * *(unsigned __int16 *)(a2 + 56));
}

uint64_t activeprompt_GetRecPromptURI(unsigned int *a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  const char *v6;
  int v8;
  int v9;
  char *v10;
  char __dst;
  char v13[11];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = 2296389639;
  if (*(_QWORD *)a1)
  {
    if (a3)
    {
      v6 = *(const char **)(*(_QWORD *)a1 + 80);
      if (v6)
      {
        v8 = cstdlib_strlen(v6);
        cstdlib_strcpy(&__dst, "#");
        LH_utoa(a1[16], v13, 0xAu);
        v9 = cstdlib_strlen(&__dst);
        v10 = (char *)heap_Alloc(a2, (v8 + v9 + 1));
        *a3 = v10;
        if (v10)
        {
          cstdlib_strcpy(v10, *(const char **)(*(_QWORD *)a1 + 80));
          cstdlib_strcpy(&(*a3)[v8], &__dst);
          return 0;
        }
        else
        {
          return 2296389642;
        }
      }
    }
  }
  return v3;
}

uint64_t activeprompt_GetUserNorm(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 2296389639;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t activeprompt_Insert(uint64_t **a1, unsigned int a2, int a3, int a4, const char **a5, uint64_t *a6, unsigned __int16 *a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12)
{
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t RecPromptURI;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int16 v30;
  const char *v31;
  unsigned __int16 v32;
  const char *v33;
  int64_t v34;
  int64_t v35;
  unsigned __int16 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  uint64_t NextTokenRecIdAtFrom;
  uint64_t v55;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  int v67;
  unsigned __int16 v68;
  const char *v69;
  int v70;
  uint64_t v71;
  int v72;
  char *v73;
  const char *v74;
  const char *v75;
  uint64_t *v76;
  size_t v77;
  uint64_t **v78;
  uint64_t v79;
  uint64_t (*v80)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, uint64_t, char **);
  uint64_t v81;
  uint64_t NullHandle;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  _QWORD *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _BOOL4 v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  char i;
  unsigned int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned __int16 v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned int v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  __int16 v148;
  int v149;
  unsigned __int16 v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v169;
  _QWORD *v170;
  int v171;
  uint64_t *v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t *v177;
  unsigned int v178;
  uint64_t **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int16 v183;
  unsigned __int16 v184;
  unsigned int v185;
  int v186;
  _DWORD *v188;
  uint64_t v190;
  const char **v191;
  const char **v192;
  const char **v193;
  unsigned __int16 *v194;
  uint64_t v195;
  char *__s;
  uint64_t v197;
  __int16 v198;
  char *v199;
  const char *v200;
  unsigned __int16 v201;
  unsigned __int16 v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  unsigned __int16 v207;
  int v208;
  char *v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;

  v17 = a1;
  v18 = a11;
  v188 = (_DWORD *)a9;
  v216 = *MEMORY[0x24BDAC8D0];
  v19 = **a1;
  v20 = *(_QWORD *)(v19 + 16);
  v208 = 0;
  v207 = 0;
  v205 = 0;
  v206 = 0;
  v203 = 11;
  v204 = 0;
  v202 = 0;
  v201 = 255;
  v199 = 0;
  v200 = 0;
  v195 = *(_QWORD *)(v19 + 56);
  v215 = 0;
  v214 = 0;
  v198 = 0;
  v197 = 0;
  __s = 0;
  v21 = cstdlib_strstr((char *)a1[6], "%Ä");
  v194 = a7;
  if (v21)
  {
    a3 = (_DWORD)v21 - *((_DWORD *)v17 + 12) + 1;
    hlp_RemoveSetPhonInRange((uint64_t)a5, (_DWORD **)a6, a7, a2, (unsigned __int16)((_WORD)v21 - *((_WORD *)v17 + 24) + 1));
    goto LABEL_3;
  }
  if (!a3)
  {
    v184 = cstdlib_strlen(*a5);
    v212 = 0;
    v213 = 0;
    v210 = 11;
    v211 = 0;
    v209 = 0;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v195 + 104))(a10, a11, 1, 0, (char *)&v213 + 2);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_273;
    LOWORD(a3) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v195 + 152))(a10, a11, 2, HIWORD(v213), &v211) & 0x80000000) == 0&& (_WORD)v211)
    {
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v195 + 104))(a10, a11, 2, HIWORD(v213), &v213);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_273;
      v68 = v213;
      if ((_WORD)v213)
      {
        LOWORD(a3) = 0;
        do
        {
          if ((_WORD)a3)
            break;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v195 + 168))(a10, a11, v68, 1, 1, &v212, (char *)&v212 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          if ((unsigned __int16)v212 > a2)
            goto LABEL_94;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v195 + 168))(a10, a11, (unsigned __int16)v213, 0, 1, &v210, (char *)&v212 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          if (v210 != 6)
            goto LABEL_94;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v195 + 176))(a10, a11, (unsigned __int16)v213, 4, &v209, (char *)&v212 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          if (HIWORD(v212) && !cstdlib_strncmp(v209, "_PR_", HIWORD(v212)))
          {
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v195 + 168))(a10, a11, (unsigned __int16)v213, 2, 1, (char *)&v211 + 2, (char *)&v212 + 2);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
            LOWORD(a3) = HIWORD(v211) >= a2 ? HIWORD(v211) - a2 : 0;
          }
          else
          {
LABEL_94:
            LOWORD(a3) = 0;
          }
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v195 + 120))(a10, a11, (unsigned __int16)v213, &v213);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          v68 = v213;
          if (!(_WORD)v213)
            break;
        }
        while ((unsigned __int16)v212 <= a2);
      }
      else
      {
        LOWORD(a3) = 0;
      }
    }
    if (a2 + (unsigned __int16)a3 >= v184)
    {
      if (v184 > a2)
        LOWORD(a3) = v184 - a2;
      else
        LOWORD(a3) = 0;
    }
    else
    {
      v119 = &(*a5)[a2];
      for (i = v119[(unsigned __int16)a3]; i; i = v119[(unsigned __int16)a3])
      {
        if (!cstdlib_strchr(" _", i) && !cstdlib_strchr(*(char **)((*v17)[1] + 192), v119[(unsigned __int16)a3]))
          break;
        LOWORD(a3) = a3 + 1;
      }
    }
  }
  hlp_RemoveSetPhonInRange((uint64_t)a5, (_DWORD **)a6, a7, a2, (unsigned __int16)a3);
  v28 = cstdlib_strstr((char *)&(*a5)[a2], "§");
  if (!v28)
  {
    v30 = 0;
LABEL_104:
    *a12 -= v30;
LABEL_3:
    if (*((_DWORD *)v17 + 2) == 2)
    {
      v22 = *v17;
      if (*((_DWORD *)*v17 + 8) == 1)
      {
        v209 = 0;
        RecPromptURI = activeprompt_GetRecPromptURI((unsigned int *)v17, *(_QWORD *)(v20 + 8), &v209);
        if ((RecPromptURI & 0x80000000) != 0)
        {
          v55 = RecPromptURI;
        }
        else
        {
          if (vector_Add(*(_QWORD *)(**v17 + 88), &v209))
          {
            v199 = v209;
            goto LABEL_123;
          }
          v55 = 2296389642;
          heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v209);
        }
LABEL_117:
        log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v24, v25, v26, v27, v169);
        goto LABEL_274;
      }
      if (!*(_QWORD *)(*v22 + 64))
        goto LABEL_192;
      v66 = (const char *)v22[10];
      if (v66)
      {
        v67 = cstdlib_strlen(v66);
        v22 = *v17;
      }
      else
      {
        v67 = 0;
      }
      v69 = (const char *)v22[5];
      if (v69)
        v70 = cstdlib_strlen(v69);
      else
        v70 = 0;
      v71 = *(_QWORD *)(v20 + 8);
      v72 = cstdlib_strlen((const char *)v17[2]);
      v73 = (char *)heap_Alloc(v71, (v67 + v70 + v72 + 1));
      if (!v73)
      {
        v55 = 2296389642;
        goto LABEL_117;
      }
      v74 = v73;
      v75 = (const char *)(*v17)[10];
      if (v75)
        cstdlib_strcpy(v73, v75);
      v192 = a5;
      cstdlib_strcpy((char *)&v74[v67], (const char *)v17[2]);
      v76 = *v17;
      if ((*v17)[5])
      {
        v77 = cstdlib_strlen(v74);
        cstdlib_strcpy((char *)&v74[v77], (const char *)(*v17)[5]);
        v78 = v17;
        v76 = *v17;
      }
      else
      {
        v78 = v17;
      }
      v79 = *v76;
      v80 = *(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, uint64_t, char **))(*(_QWORD *)(*v76 + 64) + 64);
      v81 = v76[10] ? 0 : v76[6];
      NullHandle = safeh_GetNullHandle();
      v84 = v80(*(_QWORD *)(v79 + 72), *(_QWORD *)(v79 + 80), v74, v81, NullHandle, v83, &v199);
      heap_Free(*(_QWORD **)(v20 + 8), (uint64_t)v74);
      v17 = v78;
      a5 = v192;
      if (v84 < 0)
      {
LABEL_192:
        v180 = (uint64_t)v17;
        v182 = v20;
        v55 = 0;
        v105 = 0;
        v112 = 0;
LABEL_193:
        v209 = 0;
        StrArrDelete(v112);
        StrArrDelete(v105);
        if ((ssftstring_ObjOpen(*(_QWORD **)(v182 + 8), &v209) & 0x80000000) == 0)
        {
          if ((ssftstring_AppendCStr((uint64_t)v209, *(char **)(*(_QWORD *)(*(_QWORD *)v180 + 8) + 168)) & 0x80000000) == 0
            && (ssftstring_AppendCStr((uint64_t)v209, "::") & 0x80000000) == 0
            && (ssftstring_AppendCStr((uint64_t)v209, *(char **)(v180 + 16)) & 0x80000000) == 0)
          {
            v113 = *(uint64_t ***)(v182 + 32);
            ssftstring_CStr((uint64_t)v209);
            log_OutEvent(v113, 14, (uint64_t)"%s%s", v114, v115, v116, v117, v118, "APID");
          }
          ssftstring_ObjClose((_QWORD **)v209);
        }
        goto LABEL_274;
      }
    }
LABEL_123:
    v55 = 2296389642;
    LODWORD(v214) = -65536;
    BYTE4(v214) = 0;
    v177 = a6;
    v193 = a5;
    v85 = a11;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v195 + 104))(a10, a11, 1, 0, (char *)&v208 + 2);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_273;
    NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v195 + 104))(a10, a11, 2, HIWORD(v208), &v208);
    if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
      goto LABEL_273;
    v86 = v208;
    if ((_WORD)v208)
    {
      v185 = 0;
      v170 = 0;
      v172 = 0;
      v175 = 0;
      v171 = 0;
      v87 = a2 + (unsigned __int16)a3;
      v173 = 1;
      v174 = 0;
      while (1)
      {
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(v195 + 168))(a10, a11, v86, 0, 1, &v203, (char *)&v205 + 2);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_273;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v195 + 168))(a10, a11, (unsigned __int16)v208, 1, 1, &v204, (char *)&v205 + 2);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_273;
        if (v203 - 9 < 2)
        {
LABEL_132:
          if ((unsigned __int16)v204 < a2 || v87 <= (unsigned __int16)v204)
          {
            v88 = 0;
            v93 = v174;
            if (v87 <= (unsigned __int16)v204)
              v93 = 1;
            v174 = v93;
          }
          else if (*((_DWORD *)v17 + 2) == 1)
          {
            v88 = (unsigned __int16)v208;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v195 + 184))(a10, a11, (unsigned __int16)v208, 14, (char *)&v204 + 2) & 0x80000000) == 0&& HIWORD(v204))
            {
              NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(v195 + 176))(a10, a11, (unsigned __int16)v208, 14, &v197, (char *)&v205 + 2);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_273;
              v89 = v197;
              if (v197)
              {
                v90 = v172;
                if (!v172)
                {
                  v90 = StrArrInit(*(_QWORD *)(**v17 + 16));
                  if (!v90)
                    goto LABEL_274;
                  v89 = v197;
                }
                v172 = v90;
                NextTokenRecIdAtFrom = StrArrSave(v90, v185, v89);
                if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                  goto LABEL_273;
              }
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v195 + 184))(a10, a11, (unsigned __int16)v208, 5, (char *)&v204 + 2) & 0x80000000) == 0&& HIWORD(v204))
            {
              NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v195 + 176))(a10, a11, (unsigned __int16)v208, 5, &__s, (char *)&v205 + 2);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_273;
              v91 = __s;
              if (__s)
              {
                v92 = v170;
                if (!v170)
                {
                  v92 = StrArrInit(*(_QWORD *)(**v17 + 16));
                  if (!v92)
                    goto LABEL_274;
                  v91 = __s;
                }
                v170 = v92;
                NextTokenRecIdAtFrom = StrArrSave(v92, v185, (uint64_t)v91);
                if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                  goto LABEL_273;
              }
            }
          }
          else
          {
            if (v173 == 1)
              v94 = 14;
            else
              v94 = 12;
            v203 = v94;
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(v195 + 160))(a10, a11, (unsigned __int16)v208, 0, 1, &v203, &v205);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
            v88 = 0;
            v173 = 0;
          }
          goto LABEL_171;
        }
        if (v203 != 15)
          break;
        if (*((_DWORD *)v17 + 2) != 1)
          goto LABEL_160;
        if ((unsigned __int16)v204 < a2 || v87 <= (unsigned __int16)v204)
        {
          v88 = 0;
          v95 = v174;
          v96 = v171;
          if (v87 <= (unsigned __int16)v204 && v174 == 0)
            v96 = (unsigned __int16)v208;
          v171 = v96;
          if (v87 <= (unsigned __int16)v204 && v174 == 0)
            v95 = 0;
          v174 = v95;
        }
        else
        {
          v88 = (unsigned __int16)v208;
          if ((unsigned __int16)v204 == a2)
            hlp_SavePhraseProps(v195, a10, a11, (unsigned __int16)v208, (uint64_t)&v214);
        }
LABEL_171:
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v195 + 120))(a10, a11, (unsigned __int16)v208, &v208);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_273;
        if ((_DWORD)v88)
        {
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(v195 + 168))(a10, a11, v88, 8, 1, &v202, (char *)&v205 + 2);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v195 + 184))(a10, a11, v88, 18, (char *)&v204 + 2);
          v102 = 0;
          if ((v101 & 0x80000000) == 0 && HIWORD(v204))
          {
            NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, char *))(v195 + 176))(a10, a11, v88, 18, &v200, (char *)&v205 + 2);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
            v102 = 0;
            if (HIWORD(v205) && v200)
              v102 = cstdlib_strcmp(v200, "external") == 0;
          }
          v175 = v102;
          if (v203 <= 0xA && ((1 << v203) & 0x610) != 0)
            ++v185;
          NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 192))(a10, a11, v88);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
        }
        v86 = v208;
        if (!(_WORD)v208)
        {
          if (*((_DWORD *)v17 + 2) != 1)
          {
            v85 = a11;
            v104 = a9;
            v105 = v170;
            goto LABEL_215;
          }
          v85 = a11;
          v103 = a6;
          v104 = a9;
          v105 = v170;
          if (v172)
          {
            StrArrDump((uint64_t)v172, v185, (uint64_t)"NLU feat Before AP subst", (uint64_t)"NLU", v97, v98, v99, v100);
            v106 = v172;
            v107 = *((unsigned __int16 *)v17 + 28);
            if (v172[1] < v107)
            {
              NextTokenRecIdAtFrom = StrArrRealloc(v172, v107 + 10);
              if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
                goto LABEL_273;
              v107 = *((unsigned __int16 *)v17 + 28);
              v106 = v172;
            }
            NextTokenRecIdAtFrom = NLUFeatAdaptToAp(v106, v185, v107);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
            StrArrDump((uint64_t)v106, *((unsigned __int16 *)v17 + 28), (uint64_t)"NLU feats after AP subst", (uint64_t)"NLU", v108, v109, v110, v111);
          }
          else
          {
            v106 = 0;
          }
          v172 = v106;
          if (!v170)
            goto LABEL_200;
          StrArrDump((uint64_t)v170, v185, (uint64_t)"POS Before AP subst", (uint64_t)"POS", v97, v98, v99, v100);
          v163 = *((unsigned __int16 *)v17 + 28);
          if (v170[1] < v163)
          {
            NextTokenRecIdAtFrom = StrArrRealloc(v170, v163 + 10);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
            v163 = *((unsigned __int16 *)v17 + 28);
          }
          NextTokenRecIdAtFrom = POSAdaptToAp(v170, v185, v163);
          if ((NextTokenRecIdAtFrom & 0x80000000) == 0)
          {
            StrArrDump((uint64_t)v170, *((unsigned __int16 *)v17 + 28), (uint64_t)"POS after AP subst", (uint64_t)"POS", v164, v165, v166, v167);
            goto LABEL_200;
          }
          goto LABEL_273;
        }
      }
      if (v203 == 4)
        goto LABEL_132;
LABEL_160:
      v88 = 0;
      goto LABEL_171;
    }
    v105 = 0;
    v172 = 0;
    v175 = 0;
    LOWORD(v171) = 0;
    v103 = a6;
    v104 = a9;
    if (*((_DWORD *)v17 + 2) == 1)
    {
LABEL_200:
      NextTokenRecIdAtFrom = hlp_AlignOrthAndPhonWords(a10, v85, v195, (unsigned __int16 *)v17, v193, v103, v194, v104, a4, a2, &v198);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_273;
    }
LABEL_215:
    v180 = (uint64_t)v17;
    v121 = a2 + a4;
    v123 = *(_DWORD *)(v104 + 4);
    v122 = *(_DWORD *)(v104 + 8);
    v190 = *(_QWORD *)(v104 + 16);
    v124 = v20;
    v125 = v198 + a3;
    v182 = v124;
    v126 = *(_QWORD *)(v124 + 8);
    v127 = v121;
    v186 = *(_DWORD *)v104;
    if (v121 <= v123)
    {
      v128 = (unsigned __int16)(v198 + a3);
      v55 = CI_Update(v126, (_DWORD *)v104, 0, v123, v125);
      v129 = v127;
      if ((v55 & 0x80000000) != 0)
        goto LABEL_274;
    }
    else
    {
      v55 = CI_Update(v126, (_DWORD *)v104, *(_DWORD *)v104, v123, v121 - v123);
      if ((v55 & 0x80000000) != 0)
        goto LABEL_274;
      v128 = v125;
      v129 = v127;
      v130 = CILE_New(*(_QWORD **)(v182 + 8), 0, v127, v128);
      if (!v130)
      {
        v162 = *(_QWORD *)(v182 + 32);
        goto LABEL_264;
      }
      *(_QWORD *)(v104 + 16) = v130;
      v188 = v130;
      v85 = a11;
    }
    v135 = v122 + v123 - (v129 + v128);
    if (v122 + v123 <= v129 + v128)
    {
      v136 = v182;
      v142 = v177;
      v137 = v188;
      v143 = v190;
    }
    else
    {
      v136 = v182;
      v137 = CILE_New(*(_QWORD **)(v182 + 8), v186, v129 + v128, v135);
      v142 = v177;
      v143 = v190;
      if (!v137)
      {
        log_OutPublic(*(_QWORD *)(v182 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v138, v139, v140, v141, v169);
        *((_QWORD *)v188 + 2) = v190;
LABEL_265:
        v55 = 2296389642;
        goto LABEL_274;
      }
      *((_QWORD *)v188 + 2) = v137;
    }
    *((_QWORD *)v137 + 2) = v143;
    if (*(_DWORD *)(v180 + 8) == 1)
    {
      v207 = 0;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v195 + 104))(a10, v85, 1, 0, (char *)&v208 + 2);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_273;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v195 + 104))(a10, v85, 2, HIWORD(v208), &v208);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_273;
      NextTokenRecIdAtFrom = hlp_GetNextTokenRecIdAtFrom(a10, v85, v195, a2, (unsigned __int16)v208, &v207);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        goto LABEL_273;
      if ((~(_DWORD)v214 & 0xFFFF0000) != 0)
      {
        NextTokenRecIdAtFrom = hlp_InsertInitialPhraseRecord(a10, v85, v195, HIWORD(v208), (uint64_t)&v214, &v207);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          goto LABEL_273;
      }
      v144 = (uint64_t)v105;
      v145 = *(unsigned __int16 *)(v180 + 56);
      if (*(_WORD *)(v180 + 56))
      {
        v146 = 0;
        v147 = 0;
        do
        {
          LOWORD(v209) = 0;
          if (v145 - 1 == v146)
            v147 = 1;
          v148 = a2;
          v149 = hlp_SearchWordBoundaryInOrth((char *)&(*v193)[(unsigned __int16)a2]);
          if (v149 == 0xFFFF)
            LOWORD(v149) = cstdlib_strlen(&(*v193)[(unsigned __int16)a2]);
          v150 = v149 + a2;
          NextTokenRecIdAtFrom = hlp_InsertPromptWordRecord(a10, a11, v195, v180, (uint64_t)v172, v144, (unsigned __int16)v146, v147, HIWORD(v208), a2, SBYTE1(a2), v149 + a2, v202, v175, (unsigned __int16 *)&v209, &v201, &v206, &v207);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          v151 = (*v193)[v150];
          if (v151)
          {
            LOWORD(a2) = v150;
            v152 = v180;
            do
            {
              if (!cstdlib_strchr(" _", v151))
                break;
              LOWORD(a2) = a2 + 1;
              v151 = (*v193)[(unsigned __int16)a2];
            }
            while (v151);
          }
          else
          {
            LOWORD(a2) = v150;
            v152 = v180;
          }
          NextTokenRecIdAtFrom = hlp_GetNextTokenRecIdAtFrom(a10, a11, v195, (unsigned __int16)a2, v207, &v207);
          if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
            goto LABEL_273;
          if (!v206)
          {
            NextTokenRecIdAtFrom = hlp_CreateOrUpdatePhraseRecord(a10, a11, v195, v147, (unsigned __int16)v171, v148, v201, (__int16)v209, &v207);
            if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
              goto LABEL_273;
          }
          ++v146;
          v145 = *(unsigned __int16 *)(v152 + 56);
        }
        while (v146 < v145);
      }
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v195 + 272))(a10, a11, 16, 3, 0, 0);
      v105 = (_QWORD *)v144;
LABEL_259:
      v112 = v172;
      if ((v55 & 0x80000000) != 0)
        goto LABEL_274;
      goto LABEL_193;
    }
    v153 = *v194;
    v154 = *v142;
    LOWORD(v155) = a8;
    if (v153 > a8)
    {
      v155 = a8;
      v156 = (unsigned int *)(v154 + 32 * a8 + 12);
      while (1)
      {
        v157 = *v156;
        v156 += 8;
        if (v157 > v129)
          break;
        if (v153 == ++v155)
        {
          LOWORD(v155) = *v194;
          break;
        }
      }
    }
    v158 = heap_Realloc(*(uint64_t **)(v136 + 8), v154, 32 * v153 + 32);
    if (v158)
    {
      *v142 = v158;
      v159 = *v194;
      if ((unsigned __int16)v155 < v159)
      {
        cstdlib_memmove((void *)(v158 + 32 * ((unsigned __int16)v155 + 1)), (const void *)(v158 + 32 * (unsigned __int16)v155), 32 * (int)(v159 - (unsigned __int16)v155));
        LOWORD(v159) = *v194;
        v158 = *v142;
      }
      *v194 = v159 + 1;
      cstdlib_memset((void *)(v158 + 32 * (unsigned __int16)v155), 0, 0x20uLL);
      v160 = *v142;
      *(_DWORD *)(*v142 + 32 * (unsigned __int16)v155) = 26;
      if ((_WORD)v155)
        *(_DWORD *)(v160 + 32 * (unsigned __int16)v155 + 4) = *(_DWORD *)(v160
                                                                          + 32
                                                                          * ((unsigned __int16)v155 - 1)
                                                                          + 4);
      v161 = v160 + 32 * (unsigned __int16)v155;
      *(_DWORD *)(v161 + 12) = v129;
      *(_QWORD *)(v161 + 24) = v199;
      goto LABEL_259;
    }
    v162 = *(_QWORD *)(v136 + 32);
LABEL_264:
    log_OutPublic(v162, (uint64_t)"DOMAIN_MNGR", 47000, 0, v131, v132, v133, v134, v169);
    goto LABEL_265;
  }
  v29 = v28;
  v30 = 0;
  v31 = "§";
  v179 = v17;
  v181 = v20;
  v191 = a5;
  v178 = a2;
  while (1)
  {
    if ((unsigned __int16)cstdlib_strlen(v31) + 1 >= (unsigned __int16)a3)
      goto LABEL_104;
    v32 = a3;
    v33 = v31;
    v183 = v32;
    v34 = v29 - *a5;
    v35 = v32 + a2;
    if (v34 >= v35)
    {
      v17 = v179;
      LOWORD(a3) = v32;
      goto LABEL_104;
    }
    v36 = cstdlib_strlen(v33);
    v37 = *a5;
    if ((unsigned __int16)v34 > a2 && v37[(unsigned __int16)v34 - 1] == 32)
    {
      ++v36;
      LOWORD(v34) = v34 - 1;
      v38 = a10;
      v39 = v195;
    }
    else
    {
      v40 = v36 + (unint64_t)(unsigned __int16)v34;
      v38 = a10;
      v39 = v195;
      if (v40 < v35 && v37[v40] == 32)
        ++v36;
    }
    v31 = v33;
    v41 = cstdlib_strlen(v37);
    v42 = v36;
    if (v36)
      break;
    v62 = (unsigned __int16)v34;
    v17 = v179;
    v63 = v183;
LABEL_72:
    v30 += v42;
    v52 = v63 >= v42;
    v65 = v63 - v42;
    if (v52)
      LOWORD(a3) = v65;
    else
      LOWORD(a3) = 0;
    a5 = v191;
    v29 = cstdlib_strstr((char *)&(*v191)[v62], v31);
    v20 = v181;
    a2 = v178;
    if (!v29)
      goto LABEL_104;
  }
  v176 = (unsigned __int16)v34;
  cstdlib_memmove((void *)&(*v191)[(unsigned __int16)v34], &(*v191)[(unsigned __int16)v34 + v36], v41 - ((unsigned __int16)v34 + (unint64_t)v36) + 1);
  v43 = *v194;
  if (*v194)
  {
    v44 = a4 + (unsigned __int16)v34;
    v45 = v44 + v36;
    v46 = (unsigned int *)(*a6 + 16);
    do
    {
      v47 = *(v46 - 1);
      v48 = *v46;
      v49 = v47 - v36;
      if (v47 <= v45)
        v49 = a4 + (unsigned __int16)v34;
      if (v47 <= v44)
        v49 = *(v46 - 1);
      if (v48)
      {
        v50 = v48 + v47;
        v51 = v50 - v36;
        if (v50 <= v45)
          v51 = a4 + (unsigned __int16)v34;
        if (v50 > v44)
          v50 = v51;
        v52 = v50 >= v49;
        v53 = v50 - v49;
        if (!v52)
          v53 = 0;
        *v46 = v53;
      }
      *(v46 - 1) = v49;
      v46 += 8;
      --v43;
    }
    while (v43);
  }
  LOWORD(v209) = 0;
  LOWORD(v210) = 0;
  v212 = 0;
  v213 = 0;
  NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char **))(v39 + 104))(v38, v18, 1, 0, &v209);
  if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
    goto LABEL_273;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v39 + 104))(v38, v18, 2, (unsigned __int16)v209, &v210);
  if ((v55 & 0x80000000) != 0 || !(_WORD)v210)
  {
LABEL_65:
    if ((v55 & 0x80000000) != 0)
      goto LABEL_274;
LABEL_66:
    *(_DWORD *)(a9 + 8) = (*(_DWORD *)(a9 + 8) - v42) & ~((int)(*(_DWORD *)(a9 + 8) - v42) >> 31);
    v64 = *(_QWORD *)(a9 + 16);
    if (v64)
    {
      v31 = v33;
      do
      {
        *(_DWORD *)(v64 + 4) = (*(_DWORD *)(v64 + 4) - v42) & ~((int)(*(_DWORD *)(v64 + 4) - v42) >> 31);
        v64 = *(_QWORD *)(v64 + 16);
      }
      while (v64);
      v17 = v179;
    }
    else
    {
      v17 = v179;
      v31 = v33;
    }
    v63 = v183;
    v62 = v176;
    goto LABEL_72;
  }
  NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 168))(v38, v18);
  if ((NextTokenRecIdAtFrom & 0x80000000) == 0)
  {
    v56 = v42 + (unsigned __int16)v34;
    do
    {
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v39 + 168))(v38, v18, (unsigned __int16)v210, 2, 1, &v212, (char *)&v213 + 2);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        break;
      if (HIWORD(v212) > (unsigned __int16)v34)
      {
        v57 = v56 >= HIWORD(v212) ? v34 : HIWORD(v212) - (unsigned __int16)v42;
        HIWORD(v212) = v57;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v39 + 160))(v38, v18, (unsigned __int16)v210, 1, 1, (char *)&v212 + 2, &v213);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          break;
      }
      v58 = (unsigned __int16)v212;
      if ((unsigned __int16)v212 > (unsigned __int16)v34)
      {
        if (v56 >= (unsigned __int16)v212)
          v59 = v34;
        else
          v59 = v212 - v42;
        LOWORD(v212) = v59;
        NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v39 + 160))(v38, v18, (unsigned __int16)v210, 2, 1, &v212, &v213);
        if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
          break;
        v58 = (unsigned __int16)v212;
      }
      v60 = v18;
      if (v58 <= HIWORD(v212))
        v61 = (unsigned __int16)v210;
      else
        v61 = 0;
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 120))(v38, v60);
      if ((NextTokenRecIdAtFrom & 0x80000000) != 0)
        break;
      if ((_DWORD)v61)
      {
        v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 192))(v38, a11, v61);
        if ((v55 & 0x80000000) != 0)
        {
          v18 = a11;
          goto LABEL_65;
        }
        v18 = a11;
        if (!(_WORD)v210)
          goto LABEL_65;
      }
      else
      {
        v18 = a11;
        if (!(_WORD)v210)
          goto LABEL_66;
      }
      NextTokenRecIdAtFrom = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 168))(v38, v18);
    }
    while ((NextTokenRecIdAtFrom & 0x80000000) == 0);
  }
LABEL_273:
  v55 = NextTokenRecIdAtFrom;
LABEL_274:
  *a12 += v198;
  return v55;
}

uint64_t hlp_RemoveSetPhonInRange(uint64_t result, _DWORD **a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  unsigned __int16 v5;
  const char **v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;

  v5 = *a3;
  if (*a3)
  {
    v9 = (const char **)result;
    v10 = 0;
    v11 = 0;
    v18 = 0;
    v16 = 0;
    v15 = 0;
    v12 = a5 + a4;
    do
    {
      if ((*a2)[8 * (unsigned __int16)v11] == 34)
      {
        result = hlp_GetRangeForSETPHON(*v9, *a2, v5, (unsigned __int16)v11, &v18, &v17, &v16, (unsigned int *)&v15 + 1, (unsigned int *)&v15);
        if ((_DWORD)result)
          v13 = HIDWORD(v15) >= a4;
        else
          v13 = 0;
        if (!v13 || v15 >= v12)
        {
          ++v11;
          v5 = *a3;
        }
        else
        {
          result = (uint64_t)cstdlib_memmove(&(*a2)[8 * (unsigned __int16)v11], &(*a2)[8 * (v10 + 1)], 32 * (*a3 + ~v10));
          v5 = *a3 - 1;
          *a3 = v5;
        }
      }
      else
      {
        ++v11;
      }
      v10 = (unsigned __int16)v11;
    }
    while ((unsigned __int16)v11 < v5);
  }
  return result;
}

_QWORD *StrArrInit(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  v2 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 24);
  v3 = v2;
  if (v2)
  {
    *v2 = a1;
    v2[1] = 10;
    v4 = heap_Alloc(*(_QWORD *)(a1 + 8), 80);
    v3[2] = v4;
    if (v4)
    {
      v5 = v3[1];
      if (v5)
      {
        for (i = 0; i != v5; ++i)
          *(_QWORD *)(v3[2] + 8 * i) = 0;
      }
    }
    else
    {
      StrArrDelete(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t StrArrSave(_QWORD *a1, unint64_t a2, uint64_t __s)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;

  v3 = a1[2];
  if (!v3)
    return 7;
  if (a1[1] <= a2)
  {
    if (StrArrRealloc(a1, a2 + 10))
      return 2296389642;
    v3 = a1[2];
  }
  v7 = *(_QWORD *)(v3 + 8 * a2);
  if (v7)
  {
    heap_Free(*(_QWORD **)(*a1 + 8), v7);
    *(_QWORD *)(a1[2] + 8 * a2) = 0;
  }
  if (__s)
  {
    v8 = *(_QWORD *)(*a1 + 8);
    v9 = cstdlib_strlen((const char *)__s);
    *(_QWORD *)(a1[2] + 8 * a2) = heap_Alloc(v8, (v9 + 1));
    v10 = *(char **)(a1[2] + 8 * a2);
    if (v10)
    {
      cstdlib_strcpy(v10, (const char *)__s);
      return 0;
    }
    else
    {
      __s = 2296389642;
      StrArrDelete(a1);
    }
  }
  return __s;
}

uint64_t hlp_SavePhraseProps(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *__src;
  __int16 v11;

  v11 = 0;
  __src = 0;
  if ((_DWORD)a4 && a5)
  {
    v9 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(result + 168))(a2, a3, a4, 8, 1, a5, &v11);
    if ((result & 0x80000000) != 0
      || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v9 + 168))(a2, a3, a4, 7, 1, a5 + 2, &v11), (result & 0x80000000) != 0)|| (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(v9 + 176))(a2, a3, a4, 4, &__src, &v11), (result & 0x80000000) != 0))
    {
      *(_DWORD *)a5 = -65536;
      *(_BYTE *)(a5 + 4) = 0;
    }
    else if (__src)
    {
      if (v11)
      {
        result = (uint64_t)cstdlib_strncpy((char *)(a5 + 4), __src, 8uLL);
        *(_BYTE *)(a5 + 11) = 0;
      }
    }
  }
  return result;
}

uint64_t StrArrDump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (_QWORD *)result;
  if (a3)
    result = log_OutText(*(_QWORD *)(*(_QWORD *)result + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s", a6, a7, a8, a3);
  if (a2)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*v10 + 32);
      if (*(_QWORD *)(v10[2] + 8 * v11))
        result = log_OutText(v12, (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s %3u: %s", a6, a7, a8, a4);
      else
        result = log_OutText(v12, (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"%s %3u: <NULL>", a6, a7, a8, a4);
      ++v11;
    }
    while (a2 != v11);
  }
  return result;
}

uint64_t StrArrRealloc(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (a1[1] >= a2)
    return 0;
  v4 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[2], (8 * a2));
  if (v4)
  {
    a1[2] = v4;
    v5 = a1[1];
    if (v5 < a2)
    {
      do
        *(_QWORD *)(a1[2] + 8 * v5++) = 0;
      while (a2 != v5);
    }
    result = 0;
    a1[1] = a2;
  }
  else
  {
    StrArrDelete(a1);
    return 2296389642;
  }
  return result;
}

uint64_t NLUFeatAdaptToAp(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  const char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  int v17;
  char *v18;
  unint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *i;
  uint64_t *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = a1[2];
  if (!v3)
    return 7;
  v4 = a2;
  v6 = a1[1];
  if (v6 < a2)
    return 7;
  v7 = 0;
  if (a3 && a2 && a3 != a2)
  {
    if (a3 <= a2)
    {
      v49 = 0;
      v21 = StrArrInit(*a1);
      if (!v21)
        return 2296389642;
      v26 = v21;
      v27 = a3 - 1;
      if (v27 >= v4)
      {
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v29 = v27;
        do
        {
          v30 = a1[2];
          if (v30)
          {
            if (a1[1] > v29)
            {
              for (i = *(char **)(v30 + 8 * v29); i; i = hlp_NLUStrNext(i))
              {
                if (cstdlib_strchr("seiSEI", *i) && i[1] == 95)
                {
                  v32 = *(uint64_t **)(*a1 + 8);
                  v33 = hlp_NLUStrLength(i);
                  v34 = strhelper_StringAppend(v32, 0, i, v33, &v49, 0xAuLL);
                  if (!v34)
                    goto LABEL_70;
                  v35 = v34;
                  v36 = StrArrSave(v26, v28, (uint64_t)v34);
                  if ((_DWORD)v36)
                  {
                    v7 = v36;
                    goto LABEL_76;
                  }
                  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v35);
                  v49 = 0;
                  ++v28;
                }
              }
            }
          }
          ++v29;
        }
        while (v29 != v4);
      }
      StrArrDump((uint64_t)v26, v28, (uint64_t)"Extra words before purge", (uint64_t)"NLU", v22, v23, v24, v25);
      PurgeNLUStrArr(v26, v28, 69, 83, 0);
      PurgeNLUStrArr(v26, v28, 73, 73, 73);
      PurgeNLUStrArr(v26, v28, 73, 69, 69);
      PurgeNLUStrArr(v26, v28, 83, 73, 83);
      StrArrDump((uint64_t)v26, v28, (uint64_t)"Extra words after purge", (uint64_t)"NLU", v37, v38, v39, v40);
      v41 = a1[2];
      if (v41 && a1[1] > v27 && (v42 = *(char **)(v41 + 8 * v27)) != 0)
      {
        v35 = 0;
        while (1)
        {
          if (!cstdlib_strchr("seiSEI", *v42) || v42[1] != 95)
          {
            if (v49)
            {
              v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, ";", 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
              if (!v35)
                break;
            }
            v43 = *(uint64_t **)(*a1 + 8);
            v44 = hlp_NLUStrLength(v42);
            v35 = strhelper_StringAppend(v43, v35, v42, v44, &v49, 0xAuLL);
            if (!v35)
              break;
          }
          v42 = hlp_NLUStrNext(v42);
          if (!v42)
            goto LABEL_60;
        }
      }
      else
      {
        v35 = 0;
LABEL_60:
        if (!v28)
        {
          v7 = 0;
LABEL_72:
          if (v35)
LABEL_76:
            heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v35);
          goto LABEL_77;
        }
        v45 = 0;
        while (1)
        {
          v46 = v26[2];
          if (v46)
          {
            if (v26[1] > v45)
            {
              v47 = *(char **)(v46 + 8 * v45);
              if (v47)
              {
                if (v49)
                {
                  v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, ";", 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
                  if (!v35)
                    break;
                }
                v35 = strhelper_StringAppend(*(uint64_t **)(*a1 + 8), v35, v47, 0xFFFFFFFFFFFFFFFFLL, &v49, 0xAuLL);
                if (!v35)
                  break;
              }
            }
          }
          v48 = StrArrSave(a1, v27, (uint64_t)v35);
          if (v28 == ++v45)
          {
            v7 = v48;
            goto LABEL_72;
          }
        }
      }
LABEL_70:
      v7 = 2296389642;
LABEL_77:
      v49 = 0;
      StrArrDelete(v26);
      return v7;
    }
    if (v6 > a2 - 1 && (v10 = *(const char **)(v3 + 8 * (a2 - 1))) != 0)
    {
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = cstdlib_strlen(v10);
      v13 = (char *)heap_Alloc(v11, (v12 + 1));
      if (v13)
      {
        v14 = (uint64_t)v13;
        cstdlib_strcpy(v13, v10);
        v15 = (char *)v14;
        do
        {
          if ((*v15 | 0x20) == 0x73 && v15[1] == 95)
          {
            v16 = hlp_NLUStrLength(v15);
            v17 = 1;
            v18 = v15;
            do
            {
              if ((*v18 | 0x20) == 0x65
                && v18[1] == 95
                && v16 == hlp_NLUStrLength(v18)
                && !cstdlib_strncmp(v15 + 2, v18 + 2, v16 - 2))
              {
                v17 = 0;
              }
              v18 = hlp_NLUStrNext(v18);
            }
            while (v18);
            if (v17)
              *v15 = 73;
          }
          v15 = hlp_NLUStrNext(v15);
        }
        while (v15);
        v19 = a3 - 1;
        do
        {
          v7 = StrArrSave(a1, v4, v14);
          if ((_DWORD)v7)
            break;
        }
        while (v19 != v4++);
        heap_Free(*(_QWORD **)(*a1 + 8), v14);
      }
      else
      {
        return 10;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t POSAdaptToAp(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;

  if (!a1[2])
    return 7;
  v3 = a2;
  if (a1[1] < a2)
    return 7;
  result = 0;
  if (a2 && a3 > a2)
  {
    while (1)
    {
      result = StrArrSave(a1, v3, (uint64_t)"*");
      if ((_DWORD)result)
        break;
      if (a3 == ++v3)
        return 0;
    }
  }
  return result;
}

uint64_t hlp_AlignOrthAndPhonWords(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, const char **a5, _QWORD *a6, _WORD *a7, uint64_t a8, int a9, unsigned __int16 a10, _WORD *a11)
{
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  char i;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  __int16 v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t result;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v62;
  __int16 v63;
  int v64;
  int v65;
  uint64_t v66;
  int v68;
  int v69;
  int v70;

  v17 = a10;
  *a11 = 0;
  v18 = hlp_SearchWordBoundaryInOrth(*((char **)a4 + 6));
  if (v18 == 0xFFFF)
  {
    v19 = 1;
  }
  else
  {
    v20 = 0;
    v19 = 1;
    do
    {
      ++v19;
      v20 += v18 + 1;
      v18 = hlp_SearchWordBoundaryInOrth((char *)(*((_QWORD *)a4 + 6) + v20));
    }
    while (v18 != 0xFFFF);
  }
  for (i = (*a5)[a10]; i; i = (*a5)[(unsigned __int16)v17])
  {
    if (cstdlib_strchr(" _", i))
      break;
    v17 = (v17 + 1);
  }
  v22 = a4[28];
  if (v22 >= 2)
  {
    v59 = a6;
    v58 = a8;
    v23 = 1;
    v24 = v17;
    v66 = a3;
    v25 = 1;
    while (1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v27 = *(_QWORD *)(v26 + 280);
      if (v27)
      {
        v28 = *(_DWORD *)(v27 + 4 * *((unsigned int *)a4 + 24));
        if (v28 == -1)
          goto LABEL_25;
        v29 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 288) + (v28 + v25));
      }
      else
      {
        if ((unsigned __int16)v19 <= (unsigned __int16)v22)
        {
          if ((unsigned __int16)v22 - (unsigned __int16)v19 < v25)
            goto LABEL_25;
          goto LABEL_27;
        }
        if (v25 != 1)
          goto LABEL_25;
        v29 = v19 - v22 + 1;
      }
      if ((_BYTE)v29)
      {
        if (v29 == 1)
        {
LABEL_25:
          v31 = (unsigned __int16)v24;
        }
        else
        {
          v64 = v25;
          v30 = (v29 - 2);
          do
          {
            (*a5)[(unsigned __int16)v24] = 45;
            do
            {
              v24 = (v24 + 1);
              v31 = (unsigned __int16)v24;
            }
            while ((*a5)[(unsigned __int16)v24] && !cstdlib_strchr(" _", (*a5)[(unsigned __int16)v24]));
            --v29;
          }
          while (v29 > 1u);
          v23 += v30 + 1;
          v25 = v64;
        }
        ++v23;
        v17 = v24;
        goto LABEL_65;
      }
LABEL_27:
      v65 = v25;
      if ((_WORD)v24)
      {
        v17 = (unsigned __int16)v24;
        while (cstdlib_strchr(*(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 192), (*a5)[(v17 - 1)]))
        {
          if (!(_WORD)--v17)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v17 = 0;
      }
      v62 = *(_QWORD *)(**(_QWORD **)a4 + 16);
      v32 = cstdlib_strlen(*a5);
      v33 = cstdlib_strlen("§");
      v31 = (unsigned __int16)v17;
      if (v32 >= (unsigned __int16)v17)
      {
        v35 = v33;
        v36 = heap_Realloc(*(uint64_t **)(v62 + 8), (uint64_t)*a5, (v32 + v33 + 2));
        if (!v36)
        {
          log_OutPublic(*(_QWORD *)(v62 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v37, v38, v39, v40, v57);
          return 2296389642;
        }
        *a5 = (const char *)v36;
        cstdlib_memmove((void *)(v36 + (unsigned __int16)v17 + v35 + 1), (const void *)(v36 + (unsigned __int16)v17), v32 - (unsigned __int16)v17 + 1);
        (*a5)[(unsigned __int16)v17] = 32;
        cstdlib_memcpy((void *)&(*a5)[(unsigned __int16)v17 + 1], "§", v35);
        v41 = (unsigned __int16)*a7;
        v63 = v35 + 1;
        v42 = (unsigned __int16)(v35 + 1);
        if (*a7)
        {
          v43 = a9 + (unsigned __int16)v17;
          v44 = (_DWORD *)(*v59 + 16);
          do
          {
            v45 = *(v44 - 1);
            if (v45 >= v43)
            {
              *(v44 - 1) = v45 + v42;
            }
            else
            {
              v46 = *v44 + v45;
              if (*v44)
                v47 = v46 >= v43;
              else
                v47 = 0;
              if (v47)
                *v44 += v42;
            }
            v44 += 8;
            --v41;
          }
          while (v41);
        }
        v60 = (unsigned __int16)(v35 + 1);
        v69 = 0;
        v70 = 0;
        v68 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v66 + 104))(a1, a2, 1, 0, (char *)&v70 + 2);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v66 + 104))(a1, a2, 2, HIWORD(v70), &v70);
        if ((result & 0x80000000) != 0)
          return result;
        v49 = v70;
        v51 = v66;
        v50 = a1;
        if ((_WORD)v70)
        {
          while (1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v51 + 168))(v50, a2, v49, 1, 1, (char *)&v68 + 2, (char *)&v69 + 2);
            if ((result & 0x80000000) != 0)
              return result;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v51 + 168))(v50, a2, (unsigned __int16)v70, 2, 1, &v68, (char *)&v69 + 2);
            if ((result & 0x80000000) != 0)
              return result;
            v51 = v66;
            v50 = a1;
            if (HIWORD(v68) > (unsigned __int16)v17)
            {
              HIWORD(v68) += v63;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v66 + 160))(a1, a2, (unsigned __int16)v70, 1, 1, (char *)&v68 + 2, &v69);
              if ((result & 0x80000000) != 0)
                return result;
            }
            if ((unsigned __int16)v68 > (unsigned __int16)v17)
            {
              LOWORD(v68) = v68 + v63;
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v66 + 160))(a1, a2, (unsigned __int16)v70, 2, 1, &v68, &v69);
              if ((result & 0x80000000) != 0)
                return result;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v66 + 120))(a1, a2, (unsigned __int16)v70, &v70);
            if ((result & 0x80000000) == 0)
            {
              v49 = v70;
              if ((_WORD)v70)
                continue;
            }
            if ((result & 0x80000000) != 0)
              return result;
            break;
          }
        }
        *(_DWORD *)(v58 + 8) = (*(_DWORD *)(v58 + 8) + v60) & ~((*(_DWORD *)(v58 + 8) + v60) >> 31);
        v52 = *(_QWORD *)(v58 + 16);
        if (v52)
        {
          v25 = v65;
          do
          {
            *(_DWORD *)(v52 + 4) = (*(_DWORD *)(v52 + 4) + v60) & ~((*(_DWORD *)(v52 + 4) + v60) >> 31);
            v52 = *(_QWORD *)(v52 + 16);
          }
          while (v52);
        }
        else
        {
          v25 = v65;
        }
        v34 = v35 + 1;
      }
      else
      {
        v34 = 0;
        v25 = v65;
      }
      *a11 += v34;
LABEL_65:
      v53 = *a5;
      while (1)
      {
        v54 = v53[v31];
        if (!v54)
          break;
        if (!cstdlib_strchr(" _", (char)v54)
          && !cstdlib_strchr(*(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 192), (*a5)[v31]))
        {
          v55 = (*a5)[(unsigned __int16)v17];
          if (v55)
          {
            v56 = v17;
            while (!cstdlib_strchr(" _", v55))
            {
              v56 = (v56 + 1);
              v55 = (*a5)[(unsigned __int16)v56];
              v17 = v56;
              if (!v55)
                goto LABEL_76;
            }
            v17 = v56;
          }
          break;
        }
        v17 = (v17 + 1);
        v53 = *a5;
        v31 = (unsigned __int16)v17;
      }
LABEL_76:
      ++v25;
      v22 = a4[28];
      v24 = v17;
      if (v25 >= v22)
        goto LABEL_79;
    }
  }
  v23 = 1;
LABEL_79:
  while ((unsigned __int16)v23 < (unsigned __int16)v19)
  {
    (*a5)[(unsigned __int16)v17] = 45;
    do
      LOWORD(v17) = v17 + 1;
    while ((*a5)[(unsigned __int16)v17] && !cstdlib_strchr(" _", (*a5)[(unsigned __int16)v17]));
    ++v23;
  }
  return 0;
}

uint64_t hlp_GetNextTokenRecIdAtFrom(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _WORD *a6)
{
  uint64_t result;
  __int16 v12;
  unsigned __int16 v13;
  __int16 v14;

  v14 = a5;
  if (!a5)
    return 0;
  v13 = 0;
  v12 = 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a3 + 168))(a1, a2, (unsigned __int16)a5, 1, 1, &v13, &v12);
    if ((result & 0x80000000) != 0)
      break;
    if (v13 >= a4)
      break;
    *a6 = v14;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a1, a2);
    if ((result & 0x80000000) != 0)
      break;
    LOWORD(a5) = v14;
  }
  while (v14);
  return result;
}

uint64_t hlp_InsertInitialPhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v13;
  const char *v14;
  __int16 v15;
  __int16 v16;
  int v17;
  __int16 v18;

  v18 = 0;
  v17 = 15;
  if (*a6)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a1, a2);
    if ((result & 0x80000000) != 0)
      return result;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a3 + 72))(a1, a2, 2, a4, a6);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v16 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 0, 1, &v17, &v16);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 1, 1, &v18, &v16);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 2, 1, &v18, &v16);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 7, 1, a5 + 2, &v16);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a6, 8, 1, a5, &v16);
          if ((result & 0x80000000) == 0)
          {
            v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a3 + 160);
            v13 = (unsigned __int16)*a6;
            v14 = (const char *)(a5 + 4);
            v15 = cstdlib_strlen(v14);
            return v12(a1, a2, v13, 4, (unsigned __int16)(v15 + 1), v14, &v16);
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_SearchWordBoundaryInOrth(char *a1)
{
  char *v2;
  unsigned __int16 v3;
  uint64_t v4;
  int v5;

  v2 = cstdlib_strstr(a1, "%Ä");
  if (v2)
    v3 = (_WORD)v2 - (_WORD)a1;
  else
    v3 = cstdlib_strlen(a1);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1[v4];
      if (v5 == 32 || v5 == 95)
        break;
      if (v3 == ++v4)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    LOWORD(v4) = -1;
  }
  return (unsigned __int16)v4;
}

uint64_t hlp_InsertPromptWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int16 a9, char a10, char a11, char a12, unsigned __int16 a13, int a14, unsigned __int16 *a15, _WORD *a16, _DWORD *a17, unsigned __int16 *a18)
{
  unsigned __int16 *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *);
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *);
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _WORD *v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *);
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  _WORD *v81;
  _DWORD *v82;
  unsigned __int16 *v83;
  int v84;
  unsigned int v85;
  int v86;
  char v87;
  int v88;
  int v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v99;
  int v100;
  __int16 v101;
  unsigned int v102;
  char v103;
  char __s[2];
  int v105;
  _DWORD v106[4];
  char v107[8];
  uint64_t v108;

  v21 = a18;
  v108 = *MEMORY[0x24BDAC8D0];
  v99 = *(_QWORD *)(**(_QWORD **)a4 + 16);
  v22 = a7;
  if (a7)
    v23 = 11;
  else
    v23 = 13;
  v105 = v23;
  strcpy(__s, "*");
  v103 = 0;
  v102 = 0;
  v101 = 0;
  v24 = *(_QWORD *)(a4 + 80);
  v97 = *(_QWORD *)(a4 + 88);
  v25 = *(unsigned __int16 *)(v97 + 8 * a7);
  v100 = 0;
  if (*a18)
  {
    v26 = a1;
    v27 = a2;
    v28 = (*(uint64_t (**)(void))(a3 + 80))();
    if ((v28 & 0x80000000) != 0)
      return v28;
  }
  else
  {
    v26 = a1;
    v27 = a2;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a3 + 72))(a1, a2, 2, a9, a18);
    if ((v28 & 0x80000000) != 0)
      return v28;
  }
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(v26, v27, *v21, 0, 1, &v105, &v101);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a3 + 160))(v26, v27, *v21, 1, 1, &a10, &v101);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(a3 + 160))(v26, v27, *v21, 2, 1, &a12, &v101);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v29 = (const char *)(v24 + v25);
  v94 = a3;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a3 + 160);
  v31 = *v21;
  v32 = cstdlib_strlen(v29);
  v93 = v26;
  v95 = v27;
  v28 = v30(v26, v27, v31, 3, (unsigned __int16)(v32 + 1), v29, &v101);
  if ((v28 & 0x80000000) != 0)
    return v28;
  if (a5)
  {
    v33 = *(_QWORD *)(a5 + 16);
    if (v33)
    {
      if (*(_QWORD *)(a5 + 8) > (unint64_t)v22)
      {
        v34 = *(_QWORD *)(v33 + 8 * v22);
        if (v34)
        {
          v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a3 + 160);
          v36 = *v21;
          v37 = cstdlib_strlen(*(const char **)(v33 + 8 * v22));
          v28 = v35(v26, v27, v36, 14, (unsigned __int16)(v37 + 1), v34, &v101);
          if ((v28 & 0x80000000) != 0)
            return v28;
        }
      }
    }
  }
  v92 = v22;
  if (a6
    && (v38 = *(_QWORD *)(a6 + 16)) != 0
    && *(_QWORD *)(a6 + 8) > (unint64_t)v22
    && (v39 = *(const char **)(v38 + 8 * v22)) != 0)
  {
    v40 = a3;
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a3 + 160);
    v42 = v22;
    v43 = *v21;
    v44 = (unsigned __int16)(cstdlib_strlen(v39) + 1);
    v45 = v93;
    v46 = v93;
    v47 = v95;
    v48 = v43;
    v22 = v42;
    v49 = (char *)v39;
  }
  else
  {
    v40 = a3;
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a3 + 160);
    v50 = *v21;
    v44 = (unsigned __int16)(cstdlib_strlen(__s) + 1);
    v49 = __s;
    v45 = v93;
    v46 = v93;
    v47 = v95;
    v48 = v50;
  }
  v28 = v41(v46, v47, v48, 5, v44, v49, &v101);
  if ((v28 & 0x80000000) != 0)
    return v28;
  v91 = v22;
  v51 = 2296389642;
  v102 = cstdlib_strlen(v29) + 1;
  v52 = heap_Calloc(*(_QWORD **)(v99 + 8), v102, 1);
  if (v52)
  {
    v53 = (const char *)v52;
    v54 = cstdlib_strlen(v29);
    utf8_Utf8ToDepes((uint64_t)v29, v54, 0, (uint64_t)v53, v102, &v102, 0);
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(v40 + 160);
    v56 = *v21;
    v57 = cstdlib_strlen(v53);
    v58 = v55(v45, v95, v56, 15, (unsigned __int16)(v57 + 1), v53, &v101);
    if ((v58 & 0x80000000) != 0)
    {
      v65 = (uint64_t)v53;
      v51 = v58;
      v59 = v99;
      goto LABEL_86;
    }
    v59 = v99;
    if ((domain_mngr_utils_IsActiveVoiceAddon((_QWORD *)v99, *(char **)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 72), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 80), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 88), (char *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 100), &v100) & 0x80000000) != 0|| !v100|| (v106[0] = 0, (paramc_ParamGetInt(*(_QWORD *)(v99 + 40), *(_QWORD *)(*(_QWORD *)a4 + 72), v106) & 0x80000000) != 0)|| (v60 = v106[0]) == 0)
    {
      v65 = 0;
      v69 = v92;
      v68 = v95;
    }
    else
    {
      v61 = v97 + 8 * v92;
      v63 = *(unsigned __int16 *)(v61 + 4);
      v62 = (_WORD *)(v61 + 4);
      v64 = (void *)heap_Calloc(*(_QWORD **)(v99 + 8), v63, 4);
      if (!v64)
      {
        v65 = (uint64_t)v53;
        v59 = v99;
        goto LABEL_86;
      }
      v65 = (uint64_t)v64;
      cstdlib_memcpy(v64, (const void *)(*(_QWORD *)(a4 + 72) + 4 * *(unsigned __int16 *)(v97 + 8 * v92 + 2)), 4 * (unsigned __int16)*v62);
      v66 = (unsigned __int16)*v62;
      if (*v62)
      {
        v67 = 0;
        v59 = v99;
        v40 = v94;
        v68 = v95;
        v45 = v93;
        v69 = v92;
        do
        {
          v70 = *(_DWORD *)(v65 + v67);
          if (v70 != -1)
            *(_DWORD *)(v65 + v67) = v70 + v60;
          v67 += 4;
        }
        while (4 * v66 != v67);
      }
      else
      {
        v59 = v99;
        v40 = v94;
        v68 = v95;
        v45 = v93;
        v69 = v92;
      }
    }
    v72 = v68;
    v73 = (*(uint64_t (**)(uint64_t))(v40 + 160))(v45);
    if ((v73 & 0x80000000) != 0)
      goto LABEL_84;
    v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v40 + 160))(v45, v72, *v21, 6, 2, __s, &v101);
    if ((v73 & 0x80000000) != 0)
      goto LABEL_84;
    v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v40 + 160))(v45, v72, *v21, 9, 1, &v103, &v101);
    if ((v73 & 0x80000000) != 0)
      goto LABEL_84;
    v74 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    if (*(_DWORD *)(v74 + 208) == 1)
    {
      v75 = v65;
      v76 = v59;
      __sprintf_chk(v107, 0, 8uLL, "%u", *(unsigned __int8 *)(*(_QWORD *)(v74 + 272)+ *(unsigned __int16 *)(v74 + 214)+ (*(_DWORD *)(a4 + 60) + v91) * *(unsigned __int16 *)(v74 + 212)));
      v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(v40 + 160);
      v78 = *v21;
      v79 = cstdlib_strlen(v107);
      v80 = v77(v45, v95, v78, 13, (unsigned __int16)(v79 + 1), v107, &v101);
      if ((v80 & 0x80000000) != 0)
      {
        v51 = v80;
        v59 = v76;
        v65 = v75;
        goto LABEL_85;
      }
      v74 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v59 = v76;
      v65 = v75;
      v69 = v92;
      v40 = v94;
    }
    v81 = a16;
    v82 = a17;
    v83 = a15;
    v84 = *(unsigned __int16 *)(v97 + 8 * v69 + 6);
    *a15 = v84;
    if (*(_DWORD *)(v74 + 220) == 1)
    {
      v85 = *(unsigned __int8 *)(*(_QWORD *)(v74 + 272)
                               + *(unsigned __int16 *)(v74 + 216)
                               + (*(_DWORD *)(a4 + 60) + v91) * *(unsigned __int16 *)(v74 + 212));
      *v81 = v85;
      if (v85 < 2)
      {
        v86 = a8;
        if (*v83 != 0xFFFF && *v83)
        {
          v87 = 0;
        }
        else
        {
          v87 = 0;
          *v83 = 1;
        }
LABEL_64:
        v88 = a14;
        *v82 = 0;
        v89 = *v83;
        if (v86)
        {
          if (v88 || v89 == 0xFFFF)
          {
            v89 = a13;
            *v83 = a13;
            *v82 = 1;
          }
        }
        else if (v89 == 0xFFFF)
        {
          *v83 = 0;
LABEL_72:
          if (*(_DWORD *)(v74 + 228) == 1)
            v90 = v87;
          else
            v90 = 1;
          if (((v90 & 1) != 0 || *v83 == 65533 || !*v83) && (v86 != 1 || v88 != 1)
            || (strcpy((char *)v106, "external"),
                v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _DWORD *, __int16 *))(v40 + 160))(v45, v95, *v21, 18, 9, v106, &v101), (v73 & 0x80000000) == 0))
          {
            if ((__int16)*v83 == -3)
              *v83 = 200;
            v73 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(v40 + 160))(v45, v95, *v21, 8, 1, v83, &v101);
          }
LABEL_84:
          v51 = v73;
LABEL_85:
          heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)v53);
          if (!v65)
            return v51;
LABEL_86:
          heap_Free(*(_QWORD **)(v59 + 8), v65);
          return v51;
        }
        if (v89)
          *v81 = 1;
        goto LABEL_72;
      }
      v86 = a8;
      if (v85 == 2)
        *v83 = 0;
    }
    else
    {
      if (!v84)
      {
        *v81 = 255;
        v87 = 1;
        v86 = a8;
        goto LABEL_64;
      }
      v86 = a8;
      if (v84 != 0xFFFF)
      {
        v87 = 0;
        *v81 = 1;
        goto LABEL_64;
      }
      *v81 = 255;
    }
    v87 = 1;
    goto LABEL_64;
  }
  return v51;
}

uint64_t hlp_CreateOrUpdatePhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 a6, int a7, __int16 a8, _WORD *a9)
{
  uint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *);
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v20 = a6;
  v19 = a7;
  v18 = a8;
  v17 = 15;
  if (a7 == 255)
  {
    result = 0;
    if (a4)
    {
      if ((_DWORD)a5)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 192))(a1, a2, a5);
    }
  }
  else
  {
    v16 = 0;
    if (a4 && (_DWORD)a5)
    {
      *a9 = a5;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _WORD *))(a3 + 80))(a1, a2, (unsigned __int16)*a9, a9);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 0, 1, &v17, &v16);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 1, 1, &v20, &v16);
      if ((result & 0x80000000) != 0)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 2, 1, &v20, &v16);
      if ((result & 0x80000000) != 0)
        return result;
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, __int16 *))(a3 + 160);
      v14 = (unsigned __int16)*a9;
      v15 = cstdlib_strlen("");
      result = v13(a1, a2, v14, 4, (unsigned __int16)(v15 + 1), "", &v16);
      if ((result & 0x80000000) != 0)
        return result;
      a5 = (unsigned __int16)*a9;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, a5, 7, 1, &v19, &v16);
    if ((result & 0x80000000) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a3 + 160))(a1, a2, (unsigned __int16)*a9, 8, 1, &v18, &v16);
  }
  return result;
}

_QWORD *StrArrDelete(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
    {
      v3 = result[1];
      if (v3)
      {
        v4 = v3 - 1;
        do
        {
          v5 = *(_QWORD *)(v1[2] + 8 * v4);
          if (v5)
            heap_Free(*(_QWORD **)(*v1 + 8), v5);
          --v4;
        }
        while (v4 != -1);
        v2 = v1[2];
      }
      heap_Free(*(_QWORD **)(*v1 + 8), v2);
    }
    return heap_Free(*(_QWORD **)(*v1 + 8), (uint64_t)v1);
  }
  return result;
}

uint64_t activeprompt_InsertOrth(char **a1, unsigned __int16 a2, int a3, const char **a4, uint64_t *a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const char *v19;
  int v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  const char *v33;
  int v34;
  int v35;
  uint64_t v36;
  const char *v37;
  unsigned __int16 v38;
  uint64_t *v39;
  int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  uint64_t v70;
  unsigned __int16 v71;
  __int16 v72;
  int v73;
  unsigned __int16 v74;
  unsigned int v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  uint64_t (*v79)(uint64_t, uint64_t, _QWORD, char *);
  uint64_t v80;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *);
  uint64_t v83;
  __int16 v84;
  unsigned int v85;
  unsigned __int16 v86;
  __int16 v87;
  unsigned __int16 v88;
  int v89;
  int v90;
  char v91;
  int v92;
  uint64_t v93;
  unsigned __int16 v95;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  __int16 v104;
  char *__s;
  __int16 v106;
  int v107;
  unsigned __int16 v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned __int16 v113[5];

  v113[0] = a2;
  v14 = *(_QWORD *)*a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = 2296389642;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 5;
  v106 = 0;
  __s = 0;
  v17 = *(_QWORD *)(v14 + 56);
  v104 = 0;
  v18 = cstdlib_strstr(a1[6], "%Ä");
  v19 = a1[6];
  if (v18)
  {
    v20 = (_DWORD)v18 - (_DWORD)v19;
    v21 = (unsigned __int16)((_WORD)v18 - (_WORD)v19);
    v22 = (char *)heap_Alloc(*(_QWORD *)(v15 + 8), v21 + 1);
    if (!v22)
    {
      log_OutPublic(*(_QWORD *)(v15 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v23, v24, v25, v26, v85);
      return v16;
    }
    v27 = v22;
    v93 = v17;
    v103 = v18;
    cstdlib_strncpy(v22, a1[6], v21);
    v27[v21] = 0;
    v28 = v20;
  }
  else
  {
    v93 = v17;
    v103 = 0;
    v28 = cstdlib_strlen(v19);
    v27 = a1[6];
  }
  v102 = (uint64_t)v27;
  v29 = (unsigned __int16)v28;
  if (!(_WORD)v28)
  {
    v16 = 2296389639;
    goto LABEL_150;
  }
  v101 = v15;
  v30 = v113[0];
  v31 = v113[0];
  if (v113[0] < (unsigned __int16)cstdlib_strlen(*a4))
  {
    v31 = v113[0];
    do
    {
      if (!cstdlib_strchr(*(char **)(*((_QWORD *)*a1 + 1) + 192), (*a4)[(unsigned __int16)v31]))
        break;
      ++v31;
    }
    while ((unsigned __int16)cstdlib_strlen(*a4) > (unsigned __int16)v31);
  }
  v32 = cstdlib_strlen(*a4);
  v33 = *a4;
  if ((unsigned __int16)v31 == v32 || v33[(unsigned __int16)v31] == 32)
  {
    v87 = 0;
    v90 = 0;
    if ((unsigned __int16)v31 != (unsigned __int16)cstdlib_strlen(v33))
      ++v31;
    v34 = v28;
    goto LABEL_15;
  }
  v34 = v28 + 1;
  v90 = 1;
  v87 = -1;
  v35 = v113[0];
  if ((unsigned __int16)v31 == (unsigned __int16)cstdlib_strlen(v33))
LABEL_15:
    v35 = v31;
  if (v113[0])
    LOWORD(v36) = v113[0] - 1;
  else
    LOWORD(v36) = 0;
  if (v113[0] >= 2u)
  {
    v36 = (unsigned __int16)v36;
    while (cstdlib_strchr(*(char **)(*((_QWORD *)*a1 + 1) + 192), (*a4)[v36]))
    {
      if (!(_WORD)--v36)
      {
        LOWORD(v36) = 0;
        break;
      }
    }
  }
  v89 = v35;
  if (v113[0])
  {
    v37 = *a4;
    v38 = v28;
    if ((*a4)[(unsigned __int16)v36] != 32)
    {
      ++v34;
      v88 = v113[0] + 1;
      v106 = v113[0] + 1;
      v91 = 0;
      v92 = 1;
      goto LABEL_32;
    }
    v92 = 0;
    v88 = v36 + 1;
    v106 = v36 + 1;
  }
  else
  {
    v38 = v28;
    v92 = 0;
    v88 = v36;
    v106 = v36;
    v37 = *a4;
  }
  v91 = 1;
LABEL_32:
  v39 = *(uint64_t **)(v101 + 8);
  v40 = cstdlib_strlen(v37);
  v41 = (const char *)heap_Realloc(v39, (uint64_t)v37, v40 + (unsigned __int16)v34 + 2);
  if (v41)
  {
    v46 = v34;
    *a4 = v41;
    LODWORD(v47) = cstdlib_strlen(v41) + 1;
    if ((int)v47 >= v30)
    {
      v47 = (int)v47;
      do
      {
        (*a4)[(unsigned __int16)v34 + v47] = (*a4)[v47];
        v30 = v113[0];
      }
      while (v47-- > v113[0]);
    }
    if (v92)
      (*a4)[v30] = 32;
    if (v29)
    {
      v49 = v38;
      v50 = (char *)v102;
      v51 = v92;
      do
      {
        v52 = *v50++;
        (*a4)[v51 + v113[0]] = v52;
        ++v51;
        --v49;
      }
      while (v49);
    }
    v86 = v38;
    v15 = v101;
    if (v90)
      (*a4)[v113[0] - 1 + (unint64_t)(unsigned __int16)v34] = 32;
    *a11 += v34;
    v53 = *a5;
    v54 = *a5 + 32 * a7;
    v57 = *(_DWORD *)(v54 + 12);
    v55 = (_DWORD *)(v54 + 12);
    v56 = v57;
    v55[1] = v29;
    if ((v91 & 1) == 0 && v56 == v113[0] + a3)
      *v55 = v56 + 1;
    v58 = *a6;
    if (v58 > (unsigned __int16)(a7 + 1))
    {
      v59 = (unsigned __int16)(a7 + 1);
      v60 = (_DWORD *)(v53 + 32 * v59 + 12);
      v61 = v59 + 1;
      do
      {
        *v60 += (unsigned __int16)v34;
        v60 += 8;
      }
      while (v58 != (unsigned __int16)v61++);
    }
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v93 + 104))(a9, a10, 1, 0, (char *)&v112 + 2);
    if ((v63 & 0x80000000) != 0)
      goto LABEL_149;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v93 + 152))(a9, a10, 3, HIWORD(v112), &v104) & 0x80000000) == 0&& v104)
    {
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v93 + 104))(a9, a10, 3, HIWORD(v112), &v112);
      if ((v63 & 0x80000000) != 0)
        goto LABEL_149;
      while ((_WORD)v112)
      {
        v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 168))(a9, a10);
        if ((v63 & 0x80000000) != 0)
          goto LABEL_149;
        v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v93 + 168))(a9, a10, (unsigned __int16)v112, 2, 1, &v108, &v110);
        if ((v63 & 0x80000000) != 0)
          goto LABEL_149;
        v64 = v113[0];
        if ((unsigned __int16)v109 >= v113[0])
        {
          LOWORD(v109) = v109 + v34;
          v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 1, 1, &v109, (char *)&v109 + 2);
          if ((v63 & 0x80000000) != 0)
            goto LABEL_149;
          v64 = v113[0];
        }
        if (v108 > v64)
        {
          v108 += v34;
          v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 2, 1, &v108, (char *)&v109 + 2);
          if ((v63 & 0x80000000) != 0)
            goto LABEL_149;
        }
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v93 + 120))(a9, a10, (unsigned __int16)v112, &v112);
        if ((v16 & 0x80000000) != 0)
          goto LABEL_150;
      }
    }
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v93 + 104))(a9, a10, 1, 0, (char *)&v112 + 2);
    if ((v63 & 0x80000000) == 0)
    {
      v65 = v34 + v89;
      v66 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v93 + 152))(a9, a10, 3, HIWORD(v112), &v104) & 0x80000000) != 0)
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
      }
      else
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
        if (v104)
        {
          v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v93 + 104))(a9, a10, 3, HIWORD(v112), &v112);
          if ((v70 & 0x80000000) != 0)
            goto LABEL_133;
          v71 = v112;
          if ((_WORD)v112)
          {
            v66 = 0;
            v72 = 0;
            v95 = 0;
            v97 = 0;
            v100 = 0;
            while (1)
            {
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(v93 + 168))(a9, a10, v71, 1, 1, &v109, &v110);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(v93 + 168))(a9, a10, (unsigned __int16)v112, 2, 1, &v108, &v110);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(v93 + 168))(a9, a10, (unsigned __int16)v112, 0, 1, &v107, &v110);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v73 = v107;
              if (v107 == 3)
              {
                if ((unsigned __int16)v109 >= v113[0] || v108 <= v113[0])
                {
LABEL_89:
                  v75 = (unsigned __int16)v109;
                  goto LABEL_90;
                }
                v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 2, 1, v113, (char *)&v109 + 2);
                if ((v70 & 0x80000000) != 0)
                  goto LABEL_133;
                v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v93 + 80))(a9, a10, (unsigned __int16)v112, &v112);
                if ((v70 & 0x80000000) != 0)
                  goto LABEL_133;
                v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 0, 1, &v107, (char *)&v109 + 2);
                if ((v70 & 0x80000000) != 0)
                  goto LABEL_133;
                LOWORD(v109) = v113[0] + v46;
                v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 1, 1, &v109, (char *)&v109 + 2);
                if ((v70 & 0x80000000) != 0)
                  goto LABEL_133;
                v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v112, 2, 1, &v108, (char *)&v109 + 2);
                if ((v70 & 0x80000000) != 0)
                  goto LABEL_133;
                LOWORD(v109) = v113[0];
                v73 = v107;
              }
              if (v73 != 5)
                goto LABEL_89;
              v74 = v112;
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v93 + 176))(a9, a10, (unsigned __int16)v112, 4, &__s, &v110);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v75 = (unsigned __int16)v109;
              v95 = v108;
              v97 = v74;
              v100 = v109;
LABEL_90:
              v76 = (unsigned __int16)v112;
              if (!HIWORD(v111) && v75 >= v113[0])
                HIWORD(v111) = v112;
              if (!v72)
              {
                if (v75 >= v88)
                {
                  LOWORD(v111) = v112;
                  v66 = v112;
                  v72 = v112;
                }
                else
                {
                  v72 = 0;
                }
              }
              if (!HIWORD(v110) && v75 >= (unsigned __int16)v65)
              {
                HIWORD(v110) = v112;
                if ((_WORD)v112)
                {
                  v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v93 + 88))(a9, a10, HIWORD(v111), (char *)&v111 + 2);
                  goto LABEL_132;
                }
                goto LABEL_135;
              }
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v93 + 120))(a9, a10, (unsigned __int16)v112, &v112);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v71 = v112;
              if (!(_WORD)v112)
              {
                if ((_DWORD)v76)
                {
                  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v93 + 80))(a9, a10, v76, (char *)&v111 + 2);
LABEL_132:
                  v67 = v95;
                  v69 = v97;
                  if ((v70 & 0x80000000) == 0)
                    goto LABEL_106;
                  goto LABEL_133;
                }
LABEL_135:
                v67 = v95;
                v69 = v97;
                v68 = v100;
                goto LABEL_105;
              }
            }
          }
          v66 = 0;
          v67 = 0;
          v68 = 0;
          v69 = 0;
        }
      }
LABEL_105:
      v100 = v68;
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v93 + 72))(a9, a10, 3, HIWORD(v112), (char *)&v111 + 2);
      if ((v70 & 0x80000000) != 0)
        goto LABEL_133;
LABEL_106:
      if (HIWORD(v110))
      {
        v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 120))(a9, a10);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
        if (!(_WORD)v112)
          goto LABEL_164;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 168))(a9, a10);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
        if (v107 == 5)
        {
          HIWORD(v110) = 0;
        }
        else
        {
LABEL_164:
          if (HIWORD(v110))
          {
            v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 80))(a9, a10);
            if ((v70 & 0x80000000) != 0)
              goto LABEL_133;
          }
        }
      }
      v98 = v69;
      if ((v91 & 1) == 0)
      {
        LOWORD(v109) = v113[0];
        v108 = v113[0] + 1;
        v107 = 3;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 0, 1, &v107, (char *)&v109 + 2);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 1, 1, &v109, (char *)&v109 + 2);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 2, 1, &v108, (char *)&v109 + 2);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v93 + 80))(a9, a10, HIWORD(v111), (char *)&v111 + 2);
        if ((v70 & 0x80000000) != 0)
          goto LABEL_133;
      }
      LOWORD(v109) = v113[0] + v92;
      v108 = v46 + v87 + v113[0];
      v107 = 6;
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 0, 1, &v107, (char *)&v109 + 2);
      if ((v70 & 0x80000000) != 0
        || (v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 1, 1, &v109, (char *)&v109 + 2), (v70 & 0x80000000) != 0)|| (v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 2, 1, &v108, (char *)&v109 + 2), (v70 & 0x80000000) != 0)|| (v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(v93 + 160))(a9,
                    a10,
                    HIWORD(v111),
                    4,
                    5,
                    "_PR_",
                    (char *)&v109 + 2),
            (v70 & 0x80000000) != 0)
        || (v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, char *))(v93 + 160))(a9, a10, HIWORD(v111), 3, (unsigned __int16)(v86 + 1), v102, (char *)&v109 + 2), (v70 & 0x80000000) != 0))
      {
LABEL_133:
        v16 = v70;
LABEL_134:
        v15 = v101;
        goto LABEL_150;
      }
      LOWORD(v109) = v88;
      v108 = v65;
      do
      {
        v77 = v65;
        v78 = (*a4)[(unsigned __int16)v65++];
      }
      while (v78 == 32);
      v107 = 5;
      v79 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v93 + 80);
      if (v92 + v113[0] == v88)
      {
        v63 = v79(a9, a10, HIWORD(v111), (char *)&v111 + 2);
        v15 = v101;
        if ((v63 & 0x80000000) != 0)
          goto LABEL_149;
        LOWORD(v111) = HIWORD(v111);
      }
      else
      {
        v63 = v79(a9, a10, v66, (char *)&v111);
        v15 = v101;
        if ((v63 & 0x80000000) != 0)
          goto LABEL_149;
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 160))(a9, a10);
      if ((v63 & 0x80000000) == 0)
      {
        v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v111, 1, 1, &v109, (char *)&v109 + 2);
        if ((v63 & 0x80000000) == 0)
        {
          v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v111, 2, 1, &v108, (char *)&v109 + 2);
          if ((v63 & 0x80000000) == 0)
          {
            v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, char *))(v93 + 160))(a9, a10, (unsigned __int16)v111, 4, 7, "prompt", (char *)&v109 + 2);
            if ((v16 & 0x80000000) != 0)
              goto LABEL_150;
            if (v90)
            {
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *))(v93 + 80))(a9, a10, HIWORD(v111), (char *)&v111 + 2);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              LOWORD(v109) = v113[0] + v46 - 1;
              v108 = v113[0] + v46;
              v107 = 3;
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 0, 1, &v107, (char *)&v109 + 2);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 1, 1, &v109, (char *)&v109 + 2);
              if ((v70 & 0x80000000) != 0)
                goto LABEL_133;
              v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, HIWORD(v111), 2, 1, &v108, (char *)&v109 + 2);
              v15 = v101;
              if ((v16 & 0x80000000) != 0)
                goto LABEL_150;
            }
            if (__s)
            {
              v80 = v100 >= v88
                  ? (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v93 + 192))(a9, a10, v98)
                  : (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, char *))(v93 + 160))(a9, a10, v98, 2, 1, &v106, (char *)&v109 + 2);
              v16 = v80;
              v15 = v101;
              if ((v80 & 0x80000000) != 0)
                goto LABEL_150;
            }
            if (HIWORD(v110))
            {
              v15 = v101;
              if (__s)
              {
                LOWORD(v109) = v77;
                v108 = v67;
                v107 = 5;
                v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 160))(a9, a10);
                if ((v70 & 0x80000000) == 0)
                {
                  v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v93 + 160))(a9, a10, HIWORD(v110), 1, 1, &v109, (char *)&v109 + 2);
                  if ((v70 & 0x80000000) == 0)
                  {
                    v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, char *))(v93 + 160))(a9, a10, HIWORD(v110), 2, 1, &v108, (char *)&v109 + 2);
                    if ((v70 & 0x80000000) == 0)
                    {
                      v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, char *))(v93 + 160);
                      v83 = HIWORD(v110);
                      v84 = cstdlib_strlen(__s);
                      v70 = v82(a9, a10, v83, 4, (unsigned __int16)(v84 + 1), __s, (char *)&v109 + 2);
                    }
                  }
                }
                goto LABEL_133;
              }
              goto LABEL_150;
            }
            goto LABEL_134;
          }
        }
      }
    }
LABEL_149:
    v16 = v63;
    goto LABEL_150;
  }
  log_OutPublic(*(_QWORD *)(v101 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v42, v43, v44, v45, v85);
  v15 = v101;
LABEL_150:
  if (v103 && v102)
    heap_Free(*(_QWORD **)(v15 + 8), v102);
  return v16;
}

uint64_t activeprompt_ConsultOriOrth(_QWORD *a1, const char **a2, uint64_t *a3, unsigned __int16 *a4, uint64_t a5, _WORD *a6)
{
  uint64_t i;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  int v27;
  unsigned __int16 v28;
  int v29;
  unsigned __int16 *v30;
  const char *v31;
  size_t v32;
  const char *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  unsigned __int16 v45;
  BOOL v46;
  int v47;
  const char *v48;
  size_t v49;
  int v50;
  const char *v51;
  size_t v52;
  int v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  uint64_t v56;
  char *v57;
  BOOL v58;
  unsigned __int16 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  unint64_t v94;
  int v95;
  const char *v96;
  int v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  int v111;
  BOOL v113;
  BOOL v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  BOOL v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  unsigned int v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  char *v147;
  const char *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int16 *v158;
  uint64_t v159;
  const char *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int16 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int16 *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const void *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  const char *v192;
  size_t v193;
  unsigned int v194;
  int v195;
  int *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _DWORD *v200;
  unsigned int v201;
  _WORD *v202;
  unsigned __int16 v203;
  unsigned __int16 v204;
  unsigned __int16 v205;
  unsigned int v206;
  unsigned int __s;
  char *__sa;
  char v209;
  uint64_t v210;
  _QWORD *v211;
  int v212;
  unsigned int v213;
  __int16 v214;
  unsigned __int16 v215;
  uint64_t v216;
  _BOOL4 v217;
  unsigned __int16 v218;
  unsigned int v219;
  uint64_t *v220;
  uint64_t v222;
  __int16 v223;
  int v224;
  char __s1[64];
  char __dst[128];
  _QWORD v227[4];
  _QWORD v228[6];

  v228[4] = *MEMORY[0x24BDAC8D0];
  i = *(_QWORD *)(*(_QWORD *)*a1 + 16);
  v224 = 0;
  v223 = 0;
  v222 = 0;
  if (!a1[5])
    return 0;
  v11 = a1;
  v203 = cstdlib_strlen(*a2);
  v12 = *(_DWORD *)(*a3 + 12);
  v13 = (*(_DWORD *)(a5 + 4) - v12);
  v14 = cstdlib_strlen((const char *)v11[5]);
  v218 = v14;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(i + 32)))
  {
    v20 = a5;
    do
    {
      v21 = v20;
      v20 = *(_QWORD *)(v20 + 16);
    }
    while (v20);
    v22 = (unsigned __int16)v13;
    if (a4)
    {
      v213 = v13;
      if (*a4)
        v23 = (*(_DWORD *)(v21 + 8) + *(_DWORD *)(v21 + 4) - *(_DWORD *)(*a3 + 12));
      else
        v23 = 0;
      log_OutTraceTuningData(*(uint64_t ***)(i + 32), 217, (uint64_t)"%s%s %s%s %s%d %s%d", v15, v16, v17, v18, v19, "BEG");
      log_OutTraceTuningDataBinary(*(_QWORD *)(i + 32), 218, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
        (uint64_t)*a2,
        v23);
      log_OutTraceTuningDataBinary(*(_QWORD *)(i + 32), 218, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        *a3,
        32 * *a4);
      v13 = v213;
    }
    else
    {
      log_OutTraceTuningData(*(uint64_t ***)(i + 32), 217, (uint64_t)"%s%s %s%s %s%d %s%d", v15, v16, v17, v18, v19, "BEG");
      log_OutTraceTuningDataBinary(*(_QWORD *)(i + 32), 218, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
        (uint64_t)*a2,
        0);
    }
  }
  else
  {
    v22 = (unsigned __int16)v13;
  }
  if ((__int16)(*(_DWORD *)(a5 + 8) + v13) < (__int16)(v13 + v14))
  {
LABEL_229:
    v24 = 0;
    goto LABEL_230;
  }
  v202 = a6;
  v215 = 0;
  LOWORD(__s) = 0;
  v204 = 0;
  v209 = 0;
  LOBYTE(v212) = 0;
  v206 = v22;
  v214 = v13;
  v220 = a3;
  v210 = i;
  v211 = v11;
  v216 = a5;
  while (1)
  {
    if (!(*a2)[(unsigned __int16)v13])
      goto LABEL_229;
    v219 = v22;
    v25 = (unsigned __int16)v13;
    if (v203 <= (unsigned __int16)v13)
    {
      v44 = i;
      v45 = 0;
      v29 = v13;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v13;
      v30 = a4;
      do
      {
        if ((_WORD)v27
          && v25 + 1 < v203
          && (*a2)[(unsigned __int16)v29] == 32
          && (v31 = &(*a2)[v25 + 1],
              v32 = cstdlib_strlen("§"),
              v33 = v31,
              v14 = v218,
              v34 = cstdlib_strncmp(v33, "§", v32),
              v30 = a4,
              !v34))
        {
          v43 = cstdlib_strlen("§");
          v30 = a4;
          v29 += v43;
          --v27;
          v41 = 1;
        }
        else
        {
          if (v30)
          {
            v35 = *v30;
            v36 = v26 <= v35 ? *v30 : v26;
            if (v26 >= v35)
            {
LABEL_32:
              v26 = v36;
LABEL_34:
              LOWORD(v38) = *v30;
            }
            else
            {
              v37 = v25 + v12;
              v38 = v26;
              v39 = (_DWORD *)(*v220 + 32 * v26);
              while (1)
              {
                v40 = v39[3];
                if (v40 > v37)
                {
                  v26 = v38;
                  goto LABEL_34;
                }
                if (v40 >= v37 && *v39 == 34)
                  break;
                v39 += 8;
                if (v36 == ++v38)
                  goto LABEL_32;
              }
              v26 = v38;
            }
            if (v35 > (unsigned __int16)v38)
            {
              if (!hlp_GetRangeForSETPHON(*a2, (_DWORD *)*v220, v35, (unsigned __int16)v38, &v224, &v223, (_WORD *)&v224 + 1, (unsigned int *)&v222 + 1, (unsigned int *)&v222))goto LABEL_62;
              if (v223)
                v27 = HIWORD(v224);
              v30 = a4;
            }
          }
          if (v28 >= v14)
            goto LABEL_51;
          v41 = *(unsigned __int8 *)(v11[5] + v28++) == (*a2)[(unsigned __int16)v29];
        }
        v25 = (unsigned __int16)++v29;
        v42 = v41 && v203 > (unsigned __int16)v29;
      }
      while (v42);
      if (!v41)
      {
LABEL_62:
        v53 = 0;
        v54 = v29 - v13;
        i = v210;
        a3 = v220;
        goto LABEL_90;
      }
LABEL_51:
      v45 = v29 - v13;
      v46 = v222 >= v25 || (unsigned __int16)v27 == 0;
      v44 = v210;
      if (v46)
      {
        a3 = v220;
        goto LABEL_66;
      }
      v47 = (unsigned __int16)v29;
      if (v203 > (unsigned __int16)v29)
      {
        v48 = &(*a2)[(unsigned __int16)v29];
        v49 = cstdlib_strlen("§");
        v50 = v29;
        if (cstdlib_strncmp(v48, "§", v49))
        {
          while (1)
          {
            v47 = (unsigned __int16)++v50;
            if (v203 <= (unsigned __int16)v50)
              break;
            v51 = &(*a2)[(unsigned __int16)v50];
            v52 = cstdlib_strlen("§");
            v29 = v50;
            if (!cstdlib_strncmp(v51, "§", v52))
              goto LABEL_64;
          }
          v29 = v50;
        }
      }
LABEL_64:
      if (v203 == v47)
      {
        v24 = 0;
        a3 = v220;
LABEL_258:
        a5 = v216;
        i = v210;
        goto LABEL_230;
      }
      v29 = v29 + v27 + v27 * cstdlib_strlen("§") - 1;
      a3 = v220;
      if ((unsigned __int16)v29 > v203)
      {
        v24 = 0;
        goto LABEL_258;
      }
    }
LABEL_66:
    v54 = v29 - v13;
    v215 = v45;
    v55 = v45 + v13;
    v42 = v203 > (unsigned __int16)(v45 + v13);
    i = v44;
    v11 = v211;
    if (v42)
    {
      while (1)
      {
        v56 = v55;
        if (cstdlib_strchr(" \t\r\n", (*a2)[v55]))
          break;
        v57 = cstdlib_strchr(*(char **)(*(_QWORD *)(*v211 + 8) + 192), (*a2)[v56]);
        v55 = v56 + 1;
        if (v57)
          v58 = v203 > (unsigned __int16)(v56 + 1);
        else
          v58 = 0;
        if (!v58)
        {
          if (v57)
            break;
          v53 = 0;
          goto LABEL_90;
        }
      }
    }
    v59 = a4;
    if (a4 && (LOWORD(v60) = *a4) != 0)
    {
      v61 = 0;
      v62 = 0;
      v63 = v219 + (unsigned __int16)(v29 - v13);
      while (1)
      {
        if (*(_DWORD *)(*a3 + v61) == 34)
        {
          if (!hlp_GetRangeForSETPHON(*a2, (_DWORD *)*a3, (unsigned __int16)v60, (unsigned __int16)v62, &v224, &v223, (_WORD *)&v224 + 1, (unsigned int *)&v222 + 1, (unsigned int *)&v222))break;
          v59 = a4;
          if (v223)
          {
            if (HIDWORD(v222) < v219 && v222 >= v219 || HIDWORD(v222) < v63 && v63 <= v222)
              break;
          }
        }
        ++v62;
        v60 = *v59;
        v61 += 32;
        if (v62 >= v60)
        {
          v53 = 1;
          goto LABEL_88;
        }
      }
      v53 = 0;
LABEL_88:
      v54 = v29 - v13;
      i = v210;
    }
    else
    {
      v53 = 1;
    }
LABEL_90:
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(i + 32)))
      break;
    v74 = a4;
    if (v53)
      goto LABEL_96;
LABEL_216:
    v146 = (*a2)[(unsigned __int16)v13];
    if ((*a2)[(unsigned __int16)v13])
    {
      a5 = v216;
      v14 = v218;
      while (1)
      {
        v147 = cstdlib_strchr(" \t\r\n", v146);
        v148 = *a2;
        if (v147)
          break;
        v13 = (v13 + 1);
        v146 = v148[(unsigned __int16)v13];
        if (!v148[(unsigned __int16)v13])
          goto LABEL_228;
      }
      v149 = v148[(unsigned __int16)v13];
      if (v148[(unsigned __int16)v13])
      {
        v150 = v13;
        while (cstdlib_strchr(" \t\r\n", v149))
        {
          v150 = (v150 + 1);
          v149 = (*a2)[(unsigned __int16)v150];
          v13 = v150;
          if (!(*a2)[(unsigned __int16)v150])
            goto LABEL_228;
        }
        v13 = v150;
      }
    }
    else
    {
      a5 = v216;
      v14 = v218;
    }
LABEL_228:
    v22 = (unsigned __int16)v13;
    if ((__int16)(*(_DWORD *)(a5 + 8) + v214) < (__int16)(v13 + v14))
      goto LABEL_229;
  }
  log_OutTraceTuningData(*(uint64_t ***)(i + 32), 220, (uint64_t)"%s%d %s%d %s%s", v64, v65, v66, v67, v68, "IDXBEG");
  if (!v53)
    goto LABEL_216;
  v205 = v54;
  v74 = a4;
  if (*((_DWORD *)v11 + 7) || *((_DWORD *)v11 + 8))
    goto LABEL_98;
  log_OutTraceTuningData(*(uint64_t ***)(i + 32), 221, (uint64_t)"%s%s %s%s", v69, v70, v71, v72, v73, "RES");
  log_OutTraceTuningData(*(uint64_t ***)(i + 32), 222, (uint64_t)"%s%s %s%s", v75, v76, v77, v78, v79, "RES");
  v74 = a4;
LABEL_96:
  v205 = v54;
  if (!*((_DWORD *)v11 + 7) && !*((_DWORD *)v11 + 8))
    goto LABEL_196;
  if (!v74)
    goto LABEL_114;
LABEL_98:
  v80 = *v74;
  if (*v74)
  {
    v81 = 0;
    v82 = *a3;
    v83 = (int *)*a3;
    while (1)
    {
      v84 = *v83;
      v83 += 8;
      if (v84 == 40 && *(_DWORD *)(v82 + 12) >= v12 + (unsigned __int16)v29)
        break;
      ++v81;
      v82 = (uint64_t)v83;
      if (v80 == v81)
        goto LABEL_108;
    }
    LODWORD(v81) = (unsigned __int16)v81;
  }
  else
  {
    LODWORD(v81) = 0;
  }
  if ((_DWORD)v81 == (_DWORD)v80)
  {
LABEL_108:
    v85 = (unsigned __int16)v29;
    if (cstdlib_strlen(*a2) > (unsigned __int16)v29)
    {
      v86 = v29;
      do
      {
        if (!cstdlib_strchr(" \t\r\n", (*a2)[v85])
          && !aux_special_strchr(*(const char **)(*(_QWORD *)(*v11 + 8) + 192), (*a2)[v85]))
        {
          break;
        }
        v85 = (unsigned __int16)++v86;
      }
      while (cstdlib_strlen(*a2) > (unsigned __int16)v86);
    }
    v217 = cstdlib_strlen(*a2) == v85;
  }
  else
  {
LABEL_114:
    v217 = 0;
  }
  v87 = *(_QWORD *)(*v11 + 8);
  v88 = *(const char **)(v87 + 192);
  __sa = *(char **)(v87 + 184);
  v89 = *a2;
  v90 = (unsigned __int16)v13;
  while (v90)
  {
    v91 = v90 - 1;
    v92 = cstdlib_strchr(" \t\r\n", v89[v90 - 1]);
    v90 = v91;
    if (!v92)
    {
      if ((v91 & 0x8000) == 0)
      {
        v93 = (unsigned __int8 *)aux_special_strchr(v88, v89[v91]);
        if (v93)
        {
          v212 = *v93;
          goto LABEL_122;
        }
      }
      break;
    }
  }
  v212 = 0;
LABEL_122:
  v94 = v215 + (unint64_t)(unsigned __int16)v13;
  if ((_DWORD)v94 << 16 >= (signed int)(cstdlib_strlen(v89) << 16))
  {
    v98 = 0;
    v99 = v212;
  }
  else
  {
    v95 = v89[v94];
    if (v89[v94])
    {
      v96 = &v89[v94 + 1];
      while (cstdlib_strchr(" \t\r\n", v95))
      {
        v97 = *(unsigned __int8 *)v96++;
        v95 = v97;
        if (!v97)
          goto LABEL_131;
      }
      v95 = *((unsigned __int8 *)v96 - 1);
    }
LABEL_131:
    v100 = (unsigned __int8 *)aux_special_strchr(v88, v95);
    v99 = v212;
    if (v100)
      v98 = *v100;
    else
      v98 = 0;
  }
  v101 = (char)v99;
  if ((_WORD)v13)
  {
    if (v99)
    {
      if (cstdlib_strchr(__sa, (char)v99))
      {
        LODWORD(v228[0]) = 2;
        v102 = 3;
        v103 = 1;
      }
      else
      {
        v103 = 0;
        v102 = 4;
      }
      *(_DWORD *)((unint64_t)v228 | (4 * v103)) = v102;
      *((_DWORD *)v228 + v103 + 1) = 6;
      v104 = v103 | 2;
LABEL_143:
      *((_DWORD *)v228 + v104++) = 5;
    }
    else
    {
      v228[0] = 0x600000004;
      v104 = 2;
    }
  }
  else
  {
    v228[0] = 0x300000001;
    v104 = 2;
    if (v99)
      goto LABEL_143;
  }
  *((_DWORD *)v228 + v104) = 0;
  v209 = v98;
  if (!v217)
  {
    if (!v98)
    {
      v227[0] = 0x600000004;
      v106 = 2;
      goto LABEL_154;
    }
    if (cstdlib_strchr(__sa, (char)v98))
    {
      LODWORD(v227[0]) = 2;
      v107 = 3;
      v108 = 1;
    }
    else
    {
      v108 = 0;
      v107 = 4;
    }
    *(_DWORD *)((unint64_t)v227 | (4 * v108)) = v107;
    *((_DWORD *)v227 + v108 + 1) = 6;
    v106 = v108 | 2;
    goto LABEL_153;
  }
  v227[0] = 0x300000001;
  v105 = v98;
  v106 = 2;
  if (v105)
LABEL_153:
    *((_DWORD *)v227 + v106++) = 5;
LABEL_154:
  *((_DWORD *)v227 + v106) = 0;
  v109 = *((_DWORD *)v11 + 7);
  if (v109)
  {
    v110 = 0;
    while (1)
    {
      v111 = *((_DWORD *)v228 + v110);
      if (v111 == v109 && v109 == 5)
        break;
      v113 = v111 == v109 || v110++ >= v104;
      if (v113)
      {
        v114 = v111 == v109;
        goto LABEL_168;
      }
    }
    v114 = *((unsigned __int8 *)v11 + 24) == v101;
LABEL_168:
    v115 = v114;
  }
  else
  {
    v115 = 1;
  }
  v116 = v104 + 1;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(i + 32)))
  {
    cstdlib_strcpy(__dst, "");
    hlp_ContextToString(v115, *((_DWORD *)v11 + 7), *((_BYTE *)v11 + 24), v116, (uint64_t)v228, v101, __dst);
    log_OutTraceTuningData(*(uint64_t ***)(i + 32), 221, (uint64_t)"%s%s %s%s", v117, v118, v119, v120, v121, "RES");
  }
  __s = v106 + 1;
  v204 = v116;
  if (!v115)
  {
    a3 = v220;
    goto LABEL_216;
  }
  v122 = *((_DWORD *)v11 + 8);
  if (v122)
  {
    v123 = 0;
    while (1)
    {
      v124 = *((_DWORD *)v227 + v123);
      if (v124 == v122 && v122 == 5)
        break;
      if (v124 == v122 || v123++ >= v106)
      {
        v127 = v124 == v122;
        goto LABEL_190;
      }
    }
    v127 = *((unsigned __int8 *)v11 + 25) == v209;
LABEL_190:
    v128 = v127;
  }
  else
  {
    v128 = 1;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(i + 32)))
  {
    cstdlib_strcpy(__dst, "");
    hlp_ContextToString(v128, *((_DWORD *)v11 + 8), *((_BYTE *)v11 + 25), __s, (uint64_t)v227, v209, __dst);
    log_OutTraceTuningData(*(uint64_t ***)(i + 32), 222, (uint64_t)"%s%s %s%s", v129, v130, v131, v132, v133, "RES");
  }
  a3 = v220;
  v74 = a4;
  if (!v128)
    goto LABEL_216;
LABEL_196:
  if (*((_DWORD *)v11 + 2) == 2 && v74)
  {
    if (*v74)
    {
      v134 = 0;
      v135 = 1;
      while (1)
      {
        v136 = *(_DWORD *)(*v220 + v134);
        v137 = (v136 - 16) < 4 || v136 == 24;
        if (v137 && *((_DWORD *)v11 + 2) == 2)
        {
          v138 = *(_DWORD *)(*v220 + v134 + 12);
          if (v138 > v12 + (unsigned __int16)v13 && v138 < v12 + (unsigned __int16)v29)
            break;
        }
        v145 = 1;
        v134 += 32;
        v113 = v135++ >= *v74;
        if (v113)
          goto LABEL_215;
      }
      log_OutText(*(_QWORD *)(i + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC pitch, volume or rate", v66, v67, v68, *(_QWORD *)(*(_QWORD *)(*v11 + 8) + 168));
      log_OutTraceTuningData(*(uint64_t ***)(i + 32), 223, (uint64_t)"%s%s %s%s", v140, v141, v142, v143, v144, "RES");
      v145 = 0;
    }
    else
    {
      v145 = 1;
    }
LABEL_215:
    a3 = v220;
    if (!v145)
      goto LABEL_216;
  }
  if (log_GetLogLevel(*(_QWORD *)(i + 32)) >= 5)
  {
    cstdlib_strcpy(__dst, "");
    cstdlib_strcpy(__s1, "");
    hlp_ContextToString(1, *((_DWORD *)v11 + 7), *((_BYTE *)v11 + 24), v204, (uint64_t)v228, v212, __dst);
    hlp_ContextToString(1, *((_DWORD *)v11 + 8), *((_BYTE *)v11 + 25), (unsigned __int16)__s, (uint64_t)v227, v209, __s1);
    log_OutText(*(_QWORD *)(i + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s], begPos %ld, endPos %ld, begCtxt %s, endCtxt %s", v164, v165, v166, *(_QWORD *)(*(_QWORD *)(*v11 + 8) + 168));
  }
  hlp_RemoveSetPhonInRange((uint64_t)a2, (_DWORD **)a3, a4, (unsigned __int16)v13, (unsigned __int16)(v29 - v13));
  if (!a4)
  {
    v170 = 0;
    a5 = v216;
LABEL_265:
    v190 = (char *)&(*a2)[(unsigned __int16)v13];
    v191 = v219 + v205;
    v192 = &(*a2)[v191];
    v193 = cstdlib_strlen(*a2);
    cstdlib_memmove(v190, v192, v193 - ((unsigned __int16)v13 + (unint64_t)v205) + 1);
    *v202 -= v205;
    if (a4)
    {
      v194 = *a4;
      if (v194 > (unsigned __int16)(v170 + 1))
      {
        v195 = *(_DWORD *)(*a3 + 32 * v170 + 12);
        v196 = (int *)(*a3 + 32 * (unsigned __int16)(v170 + 1) + 12);
        v197 = (unsigned __int16)(v170 + 1) + 1;
        do
        {
          v198 = *v196 - v205;
          if ((__int16)v205 > (__int16)(*(_WORD *)v196 - v195))
            v198 = v195;
          *v196 = v198;
          v196 += 8;
          v46 = v194 == (unsigned __int16)v197++;
        }
        while (!v46);
      }
    }
    v199 = *(_QWORD *)(a5 + 16);
    for (i = v210; v199; v199 = *(_QWORD *)(v199 + 16))
      *(_DWORD *)(v199 + 4) -= v205;
    v200 = CILE_New(*(_QWORD **)(v210 + 8), 1, v219 - v206 + *(_DWORD *)(a5 + 4), v206 - v191 + *(_DWORD *)(a5 + 8));
    if (v200)
    {
      *((_QWORD *)v200 + 2) = *(_QWORD *)(a5 + 16);
      *(_DWORD *)(a5 + 8) = v219 - v206;
      if (v219 == v206)
        *(_DWORD *)a5 = 0;
      v24 = 0;
      *(_QWORD *)(a5 + 16) = v200;
      goto LABEL_230;
    }
LABEL_278:
    v24 = 2296389642;
    goto LABEL_279;
  }
  v167 = *a4;
  v168 = v219 - v206;
  v169 = *a3;
  a5 = v216;
  if (*a4)
  {
    v170 = 0;
    while (*(_DWORD *)(v169 + 32 * v170 + 12) <= v168 + *(_DWORD *)(v216 + 4))
    {
      if (v167 <= ++v170)
        goto LABEL_252;
    }
  }
  else
  {
LABEL_252:
    v170 = *a4;
  }
  v171 = heap_Realloc(*(uint64_t **)(i + 8), v169, 32 * v167 + 32);
  if (!v171)
    goto LABEL_278;
  *a3 = v171;
  v176 = a4;
  v177 = *a4;
  if (v170 < v177)
  {
    cstdlib_memmove((void *)(v171 + 32 * (v170 + 1)), (const void *)(v171 + 32 * v170), 32 * (int)(v177 - v170));
    v176 = a4;
    LOWORD(v177) = *a4;
    v171 = *a3;
  }
  *v176 = v177 + 1;
  cstdlib_memset((void *)(v171 + 32 * v170), 0, 0x20uLL);
  v178 = *a3;
  *(_DWORD *)(*a3 + 32 * v170) = 40;
  if (v170)
    *(_DWORD *)(v178 + 32 * v170 + 4) = *(_DWORD *)(v178 + 32 * (v170 - 1) + 4);
  v179 = v178 + 32 * v170;
  *(_DWORD *)(v179 + 12) = v168 + *(_DWORD *)(v216 + 4);
  *(_DWORD *)(v179 + 16) = v205;
  v180 = *(_QWORD *)(i + 8);
  v181 = cstdlib_strlen(*(const char **)(*(_QWORD *)(*v11 + 8) + 168));
  v182 = cstdlib_strlen((const char *)v11[2]);
  *(_QWORD *)(*a3 + 32 * v170 + 24) = heap_Alloc(v180, (v181 + v182 + 3));
  v187 = *a3 + 32 * v170;
  v189 = *(_QWORD *)(v187 + 24);
  v188 = (const void *)(v187 + 24);
  if (v189)
  {
    a5 = v216;
    if (vector_Add(*(_QWORD *)(*(_QWORD *)*v11 + 88), v188))
    {
      cstdlib_strcpy(*(char **)(*a3 + 32 * v170 + 24), *(const char **)(*(_QWORD *)(*v11 + 8) + 168));
      cstdlib_strcat(*(char **)(*a3 + 32 * v170 + 24), "::");
      cstdlib_strcat(*(char **)(*a3 + 32 * v170 + 24), (const char *)v11[2]);
      goto LABEL_265;
    }
    v24 = 2296389642;
    heap_Free(*(_QWORD **)(i + 8), *(_QWORD *)(*a3 + 32 * v170 + 24));
    *(_QWORD *)(*a3 + 32 * v170 + 24) = 0;
LABEL_279:
    log_OutPublic(*(_QWORD *)(i + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v172, v173, v174, v175, v201);
  }
  else
  {
    v24 = 2296389642;
    log_OutPublic(*(_QWORD *)(i + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v183, v184, v185, v186, v201);
    a5 = v216;
  }
LABEL_230:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(i + 32)))
  {
    do
    {
      if (!a5)
      {
        log_OutTraceTuningDataBinary(*(_QWORD *)(i + 32), 219, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
          (uint64_t)*a2,
          0);
        v158 = a4;
        if (!a4)
          goto LABEL_243;
        goto LABEL_241;
      }
      v151 = a5;
      a5 = *(_QWORD *)(a5 + 16);
    }
    while (a5);
    if (!a4)
    {
      v159 = *(_QWORD *)(i + 32);
      v160 = *a2;
      v161 = "text/plain;charset=utf-8";
      v162 = 0;
      goto LABEL_242;
    }
    if (*a4)
      v152 = (*(_DWORD *)(v151 + 8) + *(_DWORD *)(v151 + 4) - *(_DWORD *)(*a3 + 12));
    else
      v152 = 0;
    log_OutTraceTuningDataBinary(*(_QWORD *)(i + 32), 219, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
      (uint64_t)*a2,
      v152);
    v158 = a4;
LABEL_241:
    v159 = *(_QWORD *)(i + 32);
    v160 = (const char *)*a3;
    v162 = 32 * *v158;
    v161 = "application/x-realspeak-markers-pp;version=4.0";
LABEL_242:
    log_OutTraceTuningDataBinary(v159, 219, (uint64_t)"", (uint64_t)v161, (uint64_t)v160, v162);
LABEL_243:
    log_OutTraceTuningData(*(uint64_t ***)(i + 32), 217, (uint64_t)"%s%s %s%s %s%u", v153, v154, v155, v156, v157, "END");
  }
  return v24;
}

uint64_t hlp_GetRangeForSETPHON(const char *a1, _DWORD *a2, unsigned int a3, unsigned int a4, _WORD *a5, _WORD *a6, _WORD *a7, unsigned int *a8, unsigned int *a9)
{
  __int16 v10;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  const char *v17;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _WORD *v27;
  int v28;
  int v29;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  int v36;
  char *v37;
  unsigned int v38;
  int v39;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  __int16 v44;
  int v45;
  _DWORD *v46;

  if (a4 >= a3)
    return 0;
  if (*a2 != 0x4000)
    return 0;
  v10 = a4;
  if (a2[8 * a4] != 34)
    return 0;
  v13 = a2[3];
  v14 = &a2[8 * a4];
  v16 = v14[3];
  v15 = v14 + 3;
  v17 = *(const char **)(v15 + 3);
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = v16 - v13;
  *a9 = v16 - v13;
  if (!v17)
    return 1;
  result = 1;
  if (!*v17)
    return result;
  v46 = v15;
  v45 = v13;
  *a5 = 1;
  if (cstdlib_strlen(v17) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v21 = 1;
    v22 = 1;
    do
    {
      v23 = v17[v21];
      if (v23 == 95 || v23 == 35)
        ++*a5;
      v21 = (unsigned __int16)++v22;
    }
    while (cstdlib_strlen(v17) - 1 > (unsigned __int16)v22);
  }
  LOWORD(v24) = v10 + 1;
  if (a3 <= (unsigned __int16)(v10 + 1))
  {
    v32 = 0;
    v27 = a7;
  }
  else
  {
    v24 = (unsigned __int16)(v10 + 1);
    v25 = &a2[8 * v24];
    v26 = v25;
    v27 = a7;
    while (1)
    {
      v29 = *v26;
      v26 += 8;
      v28 = v29;
      if (v29 == 34 || v28 == 21)
      {
        v31 = v25[3];
        if (*v46 != v31)
          break;
      }
      LOWORD(v24) = v24 + 1;
      v25 = v26;
      if (a3 == (unsigned __int16)v24)
        goto LABEL_26;
    }
    v32 = v31 - v45;
  }
  if (a3 == (unsigned __int16)v24)
LABEL_26:
    v32 = cstdlib_strlen(a1);
  v33 = v32 - 1;
  *a9 = v32 - 1;
  v34 = *a8;
  if (v32 - 1 <= *a8)
    goto LABEL_35;
  while (1)
  {
    v35 = cstdlib_strchr(" \t\r\n", a1[v33]);
    v33 = *a9;
    if (!v35)
      break;
    --v33;
LABEL_33:
    *a9 = v33;
    if (v33 <= *a8)
      goto LABEL_34;
  }
  if (v33 >= 3)
  {
    v36 = cstdlib_strncmp(&a1[v33 - 1], "§", 2uLL);
    v33 = *a9;
    if (!v36)
    {
      v33 -= 2;
      goto LABEL_33;
    }
  }
LABEL_34:
  v34 = *a8;
LABEL_35:
  if (v33 > v34)
  {
    while (1)
    {
      v37 = cstdlib_strchr(" \t\r\n", a1[v33]);
      v38 = *a9;
      if (v37)
        break;
      v33 = v38 - 1;
      *a9 = v33;
      v34 = *a8;
      if (v33 <= *a8)
        goto LABEL_40;
    }
    *a9 = v38 + 1;
    v34 = *a8;
  }
LABEL_40:
  v39 = v32 - v34;
  if (v32 > v34)
  {
    v40 = &a1[v34];
    do
    {
      if (!cstdlib_strncmp(v40, "§", 2uLL))
        ++*v27;
      ++v40;
      --v39;
    }
    while (v39);
  }
  v41 = (unsigned __int16)*v27;
  v42 = (unsigned __int16)*a5;
  v43 = v42 >= v41;
  v44 = v42 - v41;
  if (v43)
  {
    *a6 = v44;
    return 1;
  }
  return 0;
}

size_t aux_special_strchr(const char *a1, int a2)
{
  size_t result;
  uint64_t v5;
  int v6;

  result = cstdlib_strlen(a1);
  if (result)
  {
    v5 = 0;
    v6 = 0;
    while (a1[v5] != a2)
    {
      v5 = (unsigned __int16)++v6;
      if (cstdlib_strlen(a1) <= (unsigned __int16)v6)
        return 0;
    }
    return (size_t)&a1[v5];
  }
  return result;
}

char *hlp_ContextToString(int a1, int a2, char a3, unsigned int a4, uint64_t a5, char a6, char *__s1)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (a2 == 5)
  {
    *__s1 = 91;
    __s1[1] = a3;
    *((_WORD *)__s1 + 1) = 93;
  }
  else
  {
    cstdlib_strcpy(__s1, AP_BOUNDARYCND_STR_0[a2]);
  }
  if (a1 == 1)
    v12 = " matches (";
  else
    v12 = " does not match (";
  cstdlib_strcat(__s1, v12);
  if (a4)
  {
    v13 = 0;
    do
    {
      if (v13)
        cstdlib_strcat(__s1, " ");
      v14 = *(unsigned int *)(a5 + v13);
      if ((_DWORD)v14 == 5)
      {
        v15 = cstdlib_strlen(__s1);
        __s1[v15] = 91;
        __s1[v15 + 1] = a6;
        __s1[v15 + 2] = 93;
        __s1[v15 + 3] = 0;
      }
      else
      {
        cstdlib_strcat(__s1, AP_BOUNDARYCND_STR_0[v14]);
      }
      v13 += 4;
    }
    while (4 * a4 != v13);
  }
  return cstdlib_strcat(__s1, ")");
}

uint64_t activeprompt_Consult(uint64_t **a1, char *a2, const char **a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 *a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned __int16 v36;
  int v37;
  const char *v38;
  size_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  _BOOL4 v46;
  BOOL v47;
  BOOL v48;
  unsigned __int16 v49;
  int v50;
  int v51;
  const char *v52;
  size_t v53;
  int v54;
  int v55;
  const char *v56;
  size_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t i;
  size_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unsigned int v92;
  const char *v93;
  int v94;
  int v95;
  uint64_t v96;
  size_t v97;
  const char *v98;
  _BOOL4 v99;
  _BOOL4 v100;
  unsigned __int16 v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  size_t v106;
  char *v107;
  unsigned int v108;
  BOOL v109;
  BOOL v110;
  size_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  const char *v122;
  int v123;
  unsigned int v124;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  unsigned __int16 v130;
  char *v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  const char *v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unsigned __int16 v149;
  _BOOL4 v150;
  _QWORD *v151;
  int v152;
  uint64_t v153;
  char *v154;
  char *v155;
  const char *v156;
  char *v157;
  const char *v158;
  int v159;
  uint64_t v160;
  char *v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unsigned int v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  _DWORD *v185;
  const char **v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  char *v198;
  const char *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  size_t v208;
  const char *v209;
  int v210;
  int v211;
  uint64_t v212;
  const char *v213;
  size_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  int *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  __int16 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  const void *v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  char *v261;
  char *v262;
  int v263;
  unsigned __int16 v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  unsigned __int16 v268;
  unsigned __int16 v269;
  int v270;
  unsigned __int16 v271;
  int v272;
  unsigned __int16 v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  const char **v277;
  uint64_t v278;
  unsigned __int16 *v279;
  uint64_t v280;
  int v282;
  unsigned __int16 v283;
  uint64_t **v284;
  uint64_t *v285;
  unsigned int v286;
  unsigned int v287;
  int v288;
  unsigned __int16 v289;
  unsigned __int16 v290;
  int v291;
  char *__s;
  __int16 v293;
  unsigned int v294;
  unsigned __int16 v295;
  char __dst[64];
  char *__s1[16];
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;

  v302 = *MEMORY[0x24BDAC8D0];
  v16 = **a1;
  v17 = *(_QWORD *)(v16 + 16);
  v291 = 0;
  v280 = *(_QWORD *)(v16 + 56);
  v289 = 0;
  v288 = 0;
  v287 = 0;
  v286 = 0;
  v264 = cstdlib_strlen(*a3);
  v18 = *(_DWORD *)(*a4 + 12);
  v274 = a6;
  v19 = (*(_DWORD *)(a6 + 4) - v18);
  v20 = cstdlib_strstr((char *)a1[6], "%Ä");
  v21 = (const char *)a1[6];
  v262 = v20;
  if (v20)
    v22 = (_WORD)v20 - (_WORD)v21;
  else
    v22 = cstdlib_strlen(v21);
  v28 = (unsigned __int16)v19;
  v278 = v17;
  v283 = v22;
  v284 = a1;
  v275 = a8;
  v272 = (unsigned __int16)v19;
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v17 + 32)))
  {
    log_OutTraceTuningData(*(uint64_t ***)(v17 + 32), 277, (uint64_t)"%s%s %s%s %s%d %s%d", v23, v24, v25, v26, v27, "BEG");
    v29 = *(_QWORD *)(v17 + 32);
    v30 = *a3;
    v31 = cstdlib_strlen(*a3);
    v32 = v29;
    a8 = v275;
    log_OutTraceTuningDataBinary(v32, 278, (uint64_t)"", (uint64_t)"text/plain;charset=depes", (uint64_t)v30, v31);
    v28 = (unsigned __int16)v19;
    v22 = v283;
    log_OutTraceTuningDataBinary(*(_QWORD *)(v17 + 32), 278, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      *a4,
      32 * *a5);
  }
  v282 = v18;
  v33 = 0;
  v295 = 0;
  v294 = 0;
  v293 = 0;
  __s = 0;
  v290 = 0;
  if (*(_DWORD *)(v274 + 8) + v28 < (unsigned __int16)(v19 + v22))
    goto LABEL_368;
  v33 = 0;
  v266 = 0;
  v267 = 0;
  v263 = 0;
  v268 = 0;
  v269 = 0;
  v271 = 0;
  LOBYTE(v270) = 0;
  v265 = v22;
  v276 = v28;
  v279 = a5;
  v285 = a4;
LABEL_8:
  if (!(*a3)[(unsigned __int16)v19])
    goto LABEL_368;
  v34 = (unsigned __int16)v19;
  if (v264 <= (unsigned __int16)v19)
  {
    v36 = 0;
    v35 = 0;
    v46 = 1;
    v37 = v19;
    goto LABEL_39;
  }
  v35 = 0;
  v36 = 0;
  v37 = v19;
  while (1)
  {
    if ((_WORD)v35)
    {
      if (v34 + 1 < v264 && (*a3)[(unsigned __int16)v37] == 32)
      {
        v38 = &(*a3)[v34 + 1];
        v39 = cstdlib_strlen("§");
        if (!cstdlib_strncmp(v38, "§", v39))
        {
          v37 += cstdlib_strlen("§");
          --v35;
          v46 = 1;
          goto LABEL_31;
        }
      }
    }
    LOWORD(v40) = *a5;
    if ((_WORD)v37)
    {
      v41 = cstdlib_strchr(" _", (*a3)[v34 - 1]);
      v42 = *a5;
      if (!v41)
        goto LABEL_25;
      if (!*a5)
        goto LABEL_29;
    }
    else
    {
      v42 = *a5;
      if (!*a5)
        goto LABEL_29;
    }
    v40 = 0;
    v43 = (_DWORD *)*v285;
    v44 = (_DWORD *)*v285;
    while (1)
    {
      v45 = *v44;
      v44 += 8;
      if (v45 == 34 && v43[3] == v34 + v282)
        break;
      ++v40;
      v43 = v44;
      if (v42 == v40)
        goto LABEL_29;
    }
LABEL_25:
    if (v42 > (unsigned __int16)v40)
    {
      if (!hlp_GetRangeForSETPHON(*a3, (_DWORD *)*v285, v42, (unsigned __int16)v40, (_WORD *)&v288 + 1, &v288, &v289, &v287, &v286))goto LABEL_51;
      if ((_WORD)v288)
        v35 = v289;
    }
LABEL_29:
    if (v36 >= v283)
      break;
    v46 = *((unsigned __int8 *)v284[6] + v36++) == (*a3)[(unsigned __int16)v37];
LABEL_31:
    v34 = (unsigned __int16)++v37;
    v47 = v46 && v264 > (unsigned __int16)v37;
    if (!v47)
      goto LABEL_39;
  }
  v46 = 1;
LABEL_39:
  v48 = v265 > v36 && v264 == v34;
  if (v48 || !v46)
  {
LABEL_51:
    v58 = 0;
    v273 = v37 - v19;
    a4 = v285;
    goto LABEL_73;
  }
  v49 = v37 - v19;
  WORD2(v267) = v37 - v19;
  v50 = v37;
  v183 = v286 >= v34;
  a4 = v285;
  if (v183 || (v49 = v37 - v19, v50 = v37, !(_WORD)v35))
  {
LABEL_57:
    v257 = v50;
    v60 = 0;
    v61 = 0;
    v273 = v49;
    v62 = v276 + v49;
    while (1)
    {
      v63 = *a5;
      if (v61 >= v63)
        break;
      if (*(_DWORD *)(*v285 + v60) == 34)
      {
        if (!hlp_GetRangeForSETPHON(*a3, (_DWORD *)*v285, v63, (unsigned __int16)v61, (_WORD *)&v288 + 1, &v288, &v289, &v287, &v286))goto LABEL_66;
        v64 = (unsigned __int16)v288;
        if ((_WORD)v288)
        {
          if (v287 < v276 && v286 >= v276)
            goto LABEL_66;
          if (v287 >= v62)
          {
            v64 = 0;
            goto LABEL_68;
          }
          v64 = 0;
          if (v62 <= v286)
LABEL_66:
            v64 = 1;
        }
      }
      else
      {
        v64 = 0;
      }
LABEL_68:
      ++v61;
      v60 += 32;
      if (v64)
      {
        if (v64 == 1)
          goto LABEL_72;
        break;
      }
    }
    if (v262)
    {
      v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, a8, 1, 0, &v290);
      if ((v96 & 0x80000000) != 0)
      {
LABEL_367:
        v33 = v96;
        goto LABEL_368;
      }
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, a8, 2, v290, &v295);
      if ((v33 & 0x80000000) != 0)
        goto LABEL_368;
      v97 = cstdlib_strlen("%Ä");
      v261 = cstdlib_strstr((char *)v284[6], "§");
      if (v261)
      {
        v98 = &v262[v97];
        while (1)
        {
          while (!v295)
          {
            v99 = 1;
LABEL_110:
            if (v295)
              v100 = v99;
            else
              v100 = 0;
            if (*v98)
            {
              v101 = 1;
              do
              {
                if (!cstdlib_strcmp(v98, "%Ä"))
                  break;
                v98 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v98);
                v102 = *(unsigned __int8 *)v98;
                if (v102 == 95 || v102 == 35)
                {
                  v103 = *((unsigned __int8 *)v98 - 1) - 32;
                  v47 = v103 > 0x3F;
                  v104 = (1 << v103) & 0x8000000000000009;
                  if (v47 || v104 == 0)
                    ++v101;
                }
              }
              while (*v98);
            }
            else
            {
              v101 = 1;
            }
            v106 = cstdlib_strlen("§");
            v107 = cstdlib_strstr(&v261[v106 * v101 - 1 + v101], "§");
            v108 = *(unsigned __int8 *)v98;
            if (v107)
              v109 = v108 == 0;
            else
              v109 = 0;
            if (v109)
            {
              v58 = 0;
              a5 = v279;
              v65 = v284;
              a4 = v285;
              a8 = v275;
              goto LABEL_74;
            }
            v98 += utf8_determineUTF8CharLength(v108);
            v261 = v107;
            if (v107)
              v110 = !v100;
            else
              v110 = 1;
            a5 = v279;
            a4 = v285;
            a8 = v275;
            if (v110)
            {
              if (v100)
                goto LABEL_339;
LABEL_72:
              v58 = 0;
LABEL_73:
              v65 = v284;
LABEL_74:
              if (!log_HasTraceTuningDataSubscriber(*(_QWORD *)(v278 + 32)))
              {
                if (v58)
                {
LABEL_80:
                  if (!*((_DWORD *)v65 + 7) && !*((_DWORD *)v65 + 8))
                  {
                    v140 = v266;
                    goto LABEL_282;
                  }
                  goto LABEL_82;
                }
LABEL_322:
                LOBYTE(v197) = (*a3)[(unsigned __int16)v19];
                if ((_BYTE)v197)
                {
                  while (1)
                  {
                    v198 = cstdlib_strchr(" _", (char)v197);
                    v199 = *a3;
                    if (v198)
                      break;
                    v19 = (v19 + 1);
                    v197 = v199[(unsigned __int16)v19];
                    if (!v197)
                      goto LABEL_332;
                  }
                  v200 = v199[(unsigned __int16)v19];
                  if (v200)
                  {
                    v201 = v19;
                    while (cstdlib_strchr(" _", (char)v200))
                    {
                      v201 = (v201 + 1);
                      LOBYTE(v200) = (*a3)[(unsigned __int16)v201];
                      v19 = v201;
                      if (!(_BYTE)v200)
                        goto LABEL_332;
                    }
                    v19 = v201;
                  }
                }
LABEL_332:
                v276 = (unsigned __int16)v19;
                a5 = v279;
                if (*(_DWORD *)(v274 + 8) + v272 < (unsigned __int16)(v19 + v283))
                  goto LABEL_368;
                goto LABEL_8;
              }
              v71 = *(uint64_t ***)(v278 + 32);
              if (!v58)
              {
                log_OutTraceTuningData(v71, 280, (uint64_t)"%s%d %s%d %s%s", v66, v67, v68, v69, v70, "IDXBEG");
                goto LABEL_322;
              }
              log_OutTraceTuningData(v71, 280, (uint64_t)"%s%d %s%d %s%s", v66, v67, v68, v69, v70, "IDXBEG");
              if (!*((_DWORD *)v65 + 7) && !*((_DWORD *)v65 + 8))
              {
                log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 281, (uint64_t)"%s%s %s%s", v72, v73, v74, v75, v76, "RES");
                log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 282, (uint64_t)"%s%s %s%s", v77, v78, v79, v80, v81, "RES");
                goto LABEL_80;
              }
LABEL_82:
              v82 = v263;
              for (i = (unsigned __int16)v263; cstdlib_strlen(*a3) > (unsigned __int16)v82; i = (unsigned __int16)++v82)
              {
                if (cstdlib_strchr(" _", (*a3)[i]))
                  break;
              }
              v84 = cstdlib_strlen(*a3);
              v85 = (*v65)[1];
              v86 = *(char **)(v85 + 184);
              v87 = *(char **)(v85 + 192);
              v88 = *a3;
              v89 = v269;
              while (v89)
              {
                v90 = v89 - 1;
                v91 = cstdlib_strchr(" _", v88[v89 - 1]);
                v89 = v90;
                if (!v91)
                {
                  if ((v90 & 0x8000) == 0 && cstdlib_strchr(v87, v88[v90]))
                  {
                    v270 = v88[v90];
                    goto LABEL_92;
                  }
                  break;
                }
              }
              v270 = 0;
LABEL_92:
              v92 = v269 + WORD2(v267);
              if ((int)(v92 << 16) >= (int)(cstdlib_strlen(v88) << 16))
              {
                v95 = 0;
                a4 = v285;
                v112 = v270;
              }
              else
              {
                v93 = &v88[v92];
                do
                  v94 = *v93++;
                while (cstdlib_strchr(" _", v94));
                a4 = v285;
                if (cstdlib_strchr(v87, *(v93 - 1)))
                  v95 = *((unsigned __int8 *)v93 - 1);
                else
                  v95 = 0;
                v112 = v270;
              }
              LODWORD(v267) = v95;
              a5 = v279;
              if (v269)
              {
                if (v112 && cstdlib_strchr(v86, (char)v112))
                {
                  v300 = 0x300000002;
                  v301 = 6;
                  v113 = 3;
                  goto LABEL_153;
                }
                LODWORD(v300) = 4;
                v114 = 1;
                v115 = 0x600000007;
              }
              else
              {
                v114 = 0;
                v115 = 0x300000001;
              }
              *(_QWORD *)((unint64_t)&v300 | (4 * v114)) = v115;
              v113 = v114 | 2;
              if (v270)
LABEL_153:
                *((_DWORD *)&v300 + v113++) = 5;
              v116 = 0;
              *((_DWORD *)&v300 + v113) = 0;
              v117 = 0x300000001;
              if (v84 != i)
              {
                if ((_DWORD)v267 && cstdlib_strchr(v86, (char)v267))
                {
                  v298 = 0x300000002;
                  v299 = 6;
                  v118 = 3;
                  goto LABEL_160;
                }
                LODWORD(v298) = 4;
                v116 = 1;
                v117 = 0x600000007;
              }
              *(_QWORD *)((unint64_t)&v298 | (4 * v116)) = v117;
              v118 = v116 | 2;
              if ((_DWORD)v267)
LABEL_160:
                *((_DWORD *)&v298 + v118++) = 5;
              v271 = v113 + 1;
              *((_DWORD *)&v298 + v118) = 0;
              v268 = v118 + 1;
              if (*v279)
              {
                v119 = 0;
                v120 = 0;
                v121 = (unsigned __int16)(v269 + v273);
                do
                {
                  if (*(_DWORD *)(*a4 + v119) == 50)
                  {
                    v122 = *(const char **)(*a4 + v119 + 24);
                    if (v122)
                    {
                      if (*v122)
                      {
                        cstdlib_strncpy(*(char **)(*a4 + v119 + 24), *(const char **)(*a4 + v119 + 24), 8uLL);
                        v123 = *(_DWORD *)(*a4 + v119 + 12) - v282;
                        if (v123 == v269)
                        {
                          if (cstdlib_strcmp(v122, "medial"))
                          {
                            v124 = 0;
                          }
                          else
                          {
                            v300 = 0x700000004;
                            v124 = 2;
                          }
                          if (!cstdlib_strcmp(v122, "phrase-break"))
                          {
                            *(uint64_t *)((char *)&v300 + 4 * v124) = 0x300000002;
                            v124 += 2;
                          }
                          if (!cstdlib_strcmp(v122, "sentence-break"))
                          {
                            *(uint64_t *)((char *)&v300 + 4 * v124) = 0x300000001;
                            v124 += 2;
                          }
                          *((_DWORD *)&v300 + v124) = 0;
                          v271 = v124 + 1;
                          a4 = v285;
                          v123 = *(_DWORD *)(*v285 + v119 + 12) - v282;
                        }
                        if (v123 == v121 || v123 - 1 == v121)
                        {
                          if (cstdlib_strcmp(v122, "medial"))
                          {
                            v126 = 0;
                          }
                          else
                          {
                            v298 = 0x700000004;
                            v126 = 2;
                          }
                          if (!cstdlib_strcmp(v122, "phrase-break"))
                          {
                            *(uint64_t *)((char *)&v298 + 4 * v126) = 0x300000002;
                            v126 += 2;
                          }
                          if (!cstdlib_strcmp(v122, "sentence-break"))
                          {
                            *(uint64_t *)((char *)&v298 + 4 * v126) = 0x300000001;
                            v126 += 2;
                          }
                          *((_DWORD *)&v298 + v126) = 0;
                          v268 = v126 + 1;
                          a4 = v285;
                        }
                      }
                    }
                  }
                  ++v120;
                  v119 += 32;
                }
                while (v120 < *v279);
              }
              v65 = v284;
              if (!*((_DWORD *)v284 + 7))
              {
                LODWORD(v131) = 1;
                goto LABEL_232;
              }
              if (!v271)
                goto LABEL_231;
              v127 = 0;
              v128 = v271;
              while (2)
              {
                v129 = *((_DWORD *)&v300 + v127);
                if (v129 != *((_DWORD *)v65 + 7))
                  goto LABEL_207;
                if (v129 == 7)
                {
                  if (*(_QWORD *)(*(_QWORD *)((*v65)[1] + 232) + 8 * *((unsigned __int8 *)v65 + 24)))
                  {
                    __s1[0] = 0;
                    v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, v275, 1, 0, &v290);
                    if ((v96 & 0x80000000) != 0)
                      goto LABEL_367;
                    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, v275, 2, v290, &v295);
                    if ((v33 & 0x80000000) != 0)
                      goto LABEL_368;
                    v130 = v295;
                    if (v295)
                    {
                      while (1)
                      {
                        v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v280 + 168))(a7, v275, v130, 1, 1, (char *)&v291 + 2, &v293);
                        if ((v96 & 0x80000000) != 0)
                          goto LABEL_367;
                        v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v280 + 168))(a7, v275, v295, 2, 1, &v291, &v293);
                        if ((v96 & 0x80000000) != 0)
                          goto LABEL_367;
                        if ((unsigned __int16)v291 + 1 == v269)
                        {
                          v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v280 + 168))(a7, v275, v295, 0, 1, &v294, &v293);
                          if ((v96 & 0x80000000) != 0)
                            goto LABEL_367;
                          if (v294 <= 0xE && ((1 << v294) & 0x7E10) != 0)
                            break;
                        }
                        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 120))(a7, v275, v295, &v295);
                        if ((v33 & 0x80000000) != 0)
                          goto LABEL_368;
                        v130 = v295;
                        if (!v295)
                        {
                          LODWORD(v131) = 0;
                          goto LABEL_223;
                        }
                      }
                      v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v280 + 176))(a7, v275, v295, 3, __s1, &v293);
                      if ((v33 & 0x80000000) != 0)
                        goto LABEL_368;
                      v132 = *(_QWORD **)(v278 + 8);
                      v133 = cstdlib_strlen(*(const char **)(*(_QWORD *)((*v65)[1] + 232)
                                                           + 8 * *((unsigned __int8 *)v65 + 24)));
                      v134 = heap_Calloc(v132, (v133 + 1), 1);
                      cstdlib_strcpy((char *)v134, *(const char **)(*(_QWORD *)((*v65)[1] + 232) + 8 * *((unsigned __int8 *)v65 + 24)));
                      v135 = cstdlib_strpbrk((char *)v134, " ");
                      v136 = v134;
                      if (v134 | (unint64_t)v135)
                      {
                        v131 = v135;
                        v137 = (const char *)v134;
                        if (v135)
LABEL_214:
                          *v131 = 0;
                        while (1)
                        {
                          v138 = cstdlib_strlen(__s1[0]);
                          v139 = v138 - cstdlib_strlen(v137);
                          if (v139 >= 0 && !cstdlib_strcmp(v137, &__s1[0][v139]))
                            break;
                          a4 = v285;
                          if (!v131)
                            goto LABEL_221;
                          v137 = v131 + 1;
                          v131 = cstdlib_strpbrk(v131 + 1, " ");
                          if (v131)
                            goto LABEL_214;
                        }
                        LODWORD(v131) = 1;
                        a4 = v285;
LABEL_221:
                        v65 = v284;
                        v136 = v134;
                      }
                      else
                      {
                        LODWORD(v131) = 0;
                      }
                      heap_Free(*(_QWORD **)(v278 + 8), v136);
                    }
                    else
                    {
                      LODWORD(v131) = 0;
                    }
LABEL_223:
                    v128 = v271;
                    if ((_DWORD)v131)
                      goto LABEL_232;
                    goto LABEL_224;
                  }
LABEL_207:
                  LODWORD(v131) = 0;
LABEL_224:
                  if (++v127 >= v128)
                    goto LABEL_232;
                  continue;
                }
                break;
              }
              if (v129 != 5 || *((unsigned __int8 *)v65 + 24) == (char)v270)
              {
                LODWORD(v131) = 1;
                goto LABEL_232;
              }
LABEL_231:
              LODWORD(v131) = 0;
LABEL_232:
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v278 + 32)))
              {
                cstdlib_strcpy((char *)__s1, "");
                hlp_ContextToString((int)v131, *((_DWORD *)v65 + 7), *((_BYTE *)v65 + 24), v271, (uint64_t)&v300, v270, (char *)__s1);
                log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 281, (uint64_t)"%s%s %s%s", v141, v142, v143, v144, v145, "RES");
              }
              a8 = v275;
              if (!(_DWORD)v131)
                goto LABEL_322;
              if (*((_DWORD *)v65 + 8))
              {
                if (v268)
                {
                  v146 = 0;
                  v140 = v266;
                  v147 = v268;
                  while (1)
                  {
                    v148 = *((_DWORD *)&v298 + v146);
                    if (v148 != *((_DWORD *)v65 + 8))
                    {
LABEL_253:
                      v150 = 0;
                      goto LABEL_273;
                    }
                    if (v148 != 7)
                      break;
                    if (!*(_QWORD *)(*(_QWORD *)((*v65)[1] + 232) + 8 * *((unsigned __int8 *)v65 + 25)))
                      goto LABEL_253;
                    __s1[0] = 0;
                    v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, v275, 1, 0, &v290);
                    if ((v96 & 0x80000000) != 0)
                      goto LABEL_367;
                    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 104))(a7, v275, 2, v290, &v295);
                    if ((v33 & 0x80000000) != 0)
                      goto LABEL_368;
                    v149 = v295;
                    v140 = v266;
                    if (!v295)
                    {
LABEL_252:
                      v150 = 0;
                      goto LABEL_272;
                    }
                    while (1)
                    {
                      v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v280 + 168))(a7, v275, v149, 1, 1, (char *)&v291 + 2, &v293);
                      if ((v96 & 0x80000000) != 0)
                        goto LABEL_367;
                      if (HIWORD(v291) - 1 == (unsigned __int16)v263)
                      {
                        v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(v280 + 168))(a7, v275, v295, 2, 1, &v291, &v293);
                        if ((v96 & 0x80000000) != 0)
                          goto LABEL_367;
                        v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v280 + 168))(a7, v275, v295, 0, 1, &v294, &v293);
                        if ((v96 & 0x80000000) != 0)
                          goto LABEL_367;
                        v140 = v266;
                        if (v294 <= 0xE && ((1 << v294) & 0x7E10) != 0)
                          break;
                      }
                      v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 120))(a7, v275, v295, &v295);
                      if ((v33 & 0x80000000) != 0)
                        goto LABEL_368;
                      v149 = v295;
                      if (!v295)
                        goto LABEL_252;
                    }
                    v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v280 + 176))(a7, v275, v295, 3, __s1, &v293);
                    if ((v33 & 0x80000000) != 0)
                      goto LABEL_368;
                    v151 = *(_QWORD **)(v278 + 8);
                    v152 = cstdlib_strlen(*(const char **)(*(_QWORD *)((*v65)[1] + 232)
                                                         + 8 * *((unsigned __int8 *)v65 + 25)));
                    v153 = heap_Calloc(v151, (v152 + 1), 1);
                    cstdlib_strcpy((char *)v153, *(const char **)(*(_QWORD *)((*v65)[1] + 232) + 8 * *((unsigned __int8 *)v65 + 25)));
                    v154 = cstdlib_strpbrk((char *)v153, " ");
                    if (!(v153 | (unint64_t)v154))
                    {
LABEL_270:
                      v150 = 0;
                      goto LABEL_271;
                    }
                    v155 = v154;
                    v156 = (const char *)v153;
                    if (!v154)
                      goto LABEL_258;
LABEL_257:
                    *v155 = 0;
LABEL_258:
                    while (1)
                    {
                      v157 = cstdlib_strstr(__s1[0], v156);
                      if (v157)
                        break;
LABEL_267:
                      if (!v155)
                        goto LABEL_270;
                      v156 = v155 + 1;
                      v155 = cstdlib_strpbrk(v155 + 1, " ");
                      if (v155)
                        goto LABEL_257;
                    }
                    v158 = v157;
                    v159 = cstdlib_strlen(__s1[0]);
                    v160 = v159 - cstdlib_strlen(v158);
                    if ((int)v160 >= 1)
                    {
                      v161 = __s1[0];
                      a4 = v285;
                      while (1)
                      {
                        v162 = *v161++;
                        v163 = (1 << v162) & 0x4008400000000;
                        if (v162 > 0x32 || v163 == 0)
                          goto LABEL_267;
                        if (!--v160)
                        {
                          v150 = 1;
                          goto LABEL_271;
                        }
                      }
                    }
                    v150 = 1;
                    a4 = v285;
LABEL_271:
                    heap_Free(*(_QWORD **)(v278 + 8), v153);
                    v65 = v284;
                    v140 = v266;
LABEL_272:
                    v147 = v268;
                    if (v150)
                      goto LABEL_279;
LABEL_273:
                    if (++v146 >= v147)
                      goto LABEL_279;
                  }
                  v150 = v148 != 5 || *((unsigned __int8 *)v65 + 25) == (char)v267;
LABEL_279:
                  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v278 + 32)))
                  {
                    cstdlib_strcpy((char *)__s1, "");
                    hlp_ContextToString(v150, *((_DWORD *)v65 + 8), *((_BYTE *)v65 + 25), v268, (uint64_t)&v298, v267, (char *)__s1);
                    log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 282, (uint64_t)"%s%s %s%s", v165, v166, v167, v168, v169, "RES");
                  }
                  if (!v150)
                  {
                    a8 = v275;
                    goto LABEL_322;
                  }
LABEL_282:
                  if (!domain_mngr_utils_ListContainsString(a2, "*"))
                    v140 = 1;
                  LODWORD(v173) = *a5;
                  if (*((_DWORD *)v65 + 2) == 2 || v140 == 1)
                  {
                    v266 = v140;
                    v174 = v282 + (unsigned __int16)v263;
                    if (*a5)
                    {
                      v175 = 0;
                      v176 = 0;
                      v177 = 2;
                      v178 = 56;
                      v179 = v282 + v269;
                      a8 = v275;
                      while (1)
                      {
                        v180 = *v285;
                        v181 = *(_DWORD *)(*v285 + 32 * v175);
                        if ((v181 - 16) < 4)
                          goto LABEL_295;
                        if (v181 == 21)
                        {
                          if (v266 == 1)
                          {
                            if (v175 + 1 >= (unsigned __int16)v173)
                            {
                              v188 = -1;
                            }
                            else
                            {
                              v256 = v179;
                              v258 = v176;
                              v184 = v180 + 32 * v175;
                              v185 = (_DWORD *)(v184 + 12);
                              v277 = (const char **)(v184 + 24);
                              v186 = (const char **)(v180 + v178);
                              v187 = v177;
                              while (*((_DWORD *)v186 - 6) != 21
                                   || *((_DWORD *)v186 - 3) < *v185
                                   || !cstdlib_strcmp(*v186, *v277))
                              {
                                v186 += 4;
                                v48 = (unsigned __int16)v173 == (unsigned __int16)v187++;
                                if (v48)
                                {
                                  v188 = -1;
                                  goto LABEL_310;
                                }
                              }
                              v188 = *((_DWORD *)v186 - 3) - *v185;
LABEL_310:
                              v65 = v284;
                              a8 = v275;
                              v179 = v256;
                              v174 = v282 + (unsigned __int16)v263;
                              v176 = v258;
                            }
                            v189 = *(_DWORD *)(*v285 + 32 * v175 + 12);
                            if (v189 <= v179 && (v188 == -1 || v189 + v188 >= v174))
                            {
                              v259 = v176;
                              v190 = v179;
                              v191 = domain_mngr_utils_ListContainsString(a2, *(char **)(*v285 + 32 * v175 + 24));
                              v179 = v190;
                              v176 = v259;
                              v174 = v282 + (unsigned __int16)v263;
                              if (v191 == 1)
                                v176 = 1;
                            }
                          }
                          goto LABEL_297;
                        }
                        if (v181 == 24)
                        {
LABEL_295:
                          if (*((_DWORD *)v65 + 2) == 2)
                          {
                            v182 = *(_DWORD *)(v180 + 32 * v175 + 12);
                            v183 = v182 <= v179 || v182 >= v174;
                            if (!v183)
                            {
                              log_OutText(*(_QWORD *)(v278 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC pitch, volume or rate", v170, v171, v172, *(_QWORD *)((*v65)[1] + 168));
                              log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 283, (uint64_t)"%s%s %s%s", v202, v203, v204, v205, v206, "RES");
                              goto LABEL_321;
                            }
                          }
                        }
LABEL_297:
                        ++v175;
                        v173 = *v279;
                        v178 += 32;
                        ++v177;
                        if (v175 >= v173)
                          goto LABEL_318;
                      }
                    }
                    v176 = 0;
                    a8 = v275;
LABEL_318:
                    if (v266 == 1 && !v176)
                    {
                      log_OutText(*(_QWORD *)(v278 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s] at %u-%u deactivated because of ESC tn", v170, v171, v172, *(_QWORD *)((*v65)[1] + 168));
                      log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 283, (uint64_t)"%s%s %s%s", v192, v193, v194, v195, v196, "RES");
                      v266 = 1;
LABEL_321:
                      a4 = v285;
                      goto LABEL_322;
                    }
                    a5 = v279;
                    LODWORD(v173) = *v279;
                    a4 = v285;
                  }
                  if ((_DWORD)v173)
                  {
                    v221 = 0;
                    v222 = (int *)(*a4 + 12);
                    while (1)
                    {
                      v223 = *v222;
                      v222 += 8;
                      if (v223 - v282 >= v269)
                        break;
                      if (v173 == ++v221)
                        goto LABEL_378;
                    }
                    LOWORD(v173) = v221;
                  }
LABEL_378:
                  if (log_GetLogLevel(*(_QWORD *)(v278 + 32)) >= 5)
                  {
                    cstdlib_strcpy((char *)__s1, "");
                    cstdlib_strcpy(__dst, "");
                    hlp_ContextToString(1, *((_DWORD *)v65 + 7), *((_BYTE *)v65 + 24), v271, (uint64_t)&v300, v270, (char *)__s1);
                    hlp_ContextToString(1, *((_DWORD *)v65 + 8), *((_BYTE *)v65 + 25), v268, (uint64_t)&v298, v267, __dst);
                    v227 = *a5;
                    LOWORD(v228) = v173;
                    if (v227 > (unsigned __int16)v173)
                    {
                      v228 = (unsigned __int16)v173;
                      v229 = (_DWORD *)(*a4 + 32 * (unsigned __int16)v173);
                      while (v229[3] - v282 <= v269 && *v229 == 36)
                      {
                        ++v228;
                        v229 += 8;
                        if (v227 == v228)
                          goto LABEL_390;
                      }
                    }
                    if ((_DWORD)v227 != (unsigned __int16)v228 && *a5)
                    {
                      v230 = *a4 + 8;
                      do
                      {
                        if (*(_DWORD *)(v230 + 4) - v282 >= (unsigned __int16)v263)
                          break;
                        v230 += 32;
                        --v227;
                      }
                      while (v227);
                    }
LABEL_390:
                    log_OutText(*(_QWORD *)(v278 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Match with [%s::%s], begPos %ld, endPos %ld, begCtxt %s, endCtxt %s", v224, v225, v226, *(_QWORD *)((*v65)[1] + 168));
                  }
                  v231 = *a9;
                  v33 = activeprompt_Insert(v65, v269, v273, v282, a3, a4, a5, (unsigned __int16)v173, v274, a7, v275, a9);
                  if ((v33 & 0x80000000) != 0)
                    goto LABEL_368;
                  v232 = *a5;
                  v233 = *a4;
                  v234 = v282 + v269;
                  if (*a5)
                  {
                    v235 = 0;
                    v236 = (unsigned int *)(v233 + 12);
                    while (1)
                    {
                      v237 = *v236;
                      v236 += 8;
                      if (v237 > v234)
                        break;
                      if (v232 == ++v235)
                      {
                        LOWORD(v235) = *a5;
                        break;
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v235) = 0;
                  }
                  v238 = *a9;
                  v239 = v278;
                  v240 = heap_Realloc(*(uint64_t **)(v278 + 8), v233, 32 * v232 + 32);
                  if (!v240)
                    goto LABEL_406;
                  *a4 = v240;
                  v245 = *v279;
                  if ((unsigned __int16)v235 < v245)
                  {
                    cstdlib_memmove((void *)(v240 + 32 * ((unsigned __int16)v235 + 1)), (const void *)(v240 + 32 * (unsigned __int16)v235), 32 * (int)(v245 - (unsigned __int16)v235));
                    LOWORD(v245) = *v279;
                    v240 = *a4;
                  }
                  *v279 = v245 + 1;
                  cstdlib_memset((void *)(v240 + 32 * (unsigned __int16)v235), 0, 0x20uLL);
                  v246 = *a4;
                  *(_DWORD *)(*a4 + 32 * (unsigned __int16)v235) = 40;
                  if ((_WORD)v235)
                    *(_DWORD *)(v246 + 32 * (unsigned __int16)v235 + 4) = *(_DWORD *)(v246
                                                                                      + 32
                                                                                      * ((unsigned __int16)v235
                                                                                       - 1)
                                                                                      + 4);
                  v247 = v246 + 32 * (unsigned __int16)v235;
                  v248 = (unsigned __int16)v263 - v269 + (__int16)(v238 - v231);
                  *(_DWORD *)(v247 + 12) = v234;
                  *(_DWORD *)(v247 + 16) = v248 & ~(v248 >> 31);
                  v239 = v278;
                  v249 = *(_QWORD *)(v278 + 8);
                  v250 = cstdlib_strlen(*(const char **)((*v65)[1] + 168));
                  v251 = cstdlib_strlen((const char *)v65[2]);
                  *(_QWORD *)(*a4 + 32 * (unsigned __int16)v235 + 24) = heap_Alloc(v249, (v250 + v251 + 3));
                  v252 = *a4 + 32 * (unsigned __int16)v235;
                  v254 = *(_QWORD *)(v252 + 24);
                  v253 = (const void *)(v252 + 24);
                  if (v254)
                  {
                    if (vector_Add(*(_QWORD *)(**v65 + 88), v253))
                    {
                      cstdlib_strcpy(*(char **)(*a4 + 32 * (unsigned __int16)v235 + 24), *(const char **)((*v65)[1] + 168));
                      cstdlib_strcat(*(char **)(*a4 + 32 * (unsigned __int16)v235 + 24), "::");
                      cstdlib_strcat(*(char **)(*a4 + 32 * (unsigned __int16)v235 + 24), (const char *)v65[2]);
LABEL_408:
                      a5 = v279;
                      goto LABEL_368;
                    }
                    v33 = 2296389642;
                    v239 = v278;
                    heap_Free(*(_QWORD **)(v278 + 8), *(_QWORD *)(*a4 + 32 * (unsigned __int16)v235 + 24));
                    *(_QWORD *)(*a4 + 32 * (unsigned __int16)v235 + 24) = 0;
                  }
                  else
                  {
LABEL_406:
                    v33 = 2296389642;
                  }
                  log_OutPublic(*(_QWORD *)(v239 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v241, v242, v243, v244, v255);
                  goto LABEL_408;
                }
                v150 = 0;
              }
              else
              {
                v150 = 1;
              }
              v140 = v266;
              goto LABEL_279;
            }
          }
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, __int16 *))(v280 + 168))(a7, a8, v295, 1, 1, (char *)&v291 + 2, &v293);
          if ((v96 & 0x80000000) != 0)
            goto LABEL_367;
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unsigned int *, __int16 *))(v280 + 168))(a7, a8, v295, 0, 1, &v294, &v293);
          if ((v96 & 0x80000000) != 0)
            goto LABEL_367;
          if (v294 == 5 && HIWORD(v291) == (unsigned __int16)(v19 + (_WORD)v261 - *((_WORD *)v284 + 24)))
          {
            v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, __int16 *))(v280 + 176))(a7, a8, v295, 3, &__s, &v293);
            if ((v33 & 0x80000000) != 0)
              goto LABEL_368;
            v111 = cstdlib_strlen(__s);
            v99 = !cstdlib_strncmp(v98, __s, v111) && (!v98[v111] || !cstdlib_strcmp(&v98[v111], "%Ä"));
            goto LABEL_110;
          }
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v280 + 120))(a7, a8, v295, &v295);
          if ((v33 & 0x80000000) != 0)
            goto LABEL_368;
        }
      }
    }
LABEL_339:
    v65 = v284;
    while (1)
    {
      if (cstdlib_strlen(*a3) <= (unsigned __int16)v37)
      {
        v58 = 1;
        goto LABEL_346;
      }
      if (cstdlib_strchr(" _", (*a3)[(unsigned __int16)v37]))
        break;
      v207 = cstdlib_strchr(*(char **)((*v284)[1] + 192), (*a3)[(unsigned __int16)v37]);
      LOWORD(v37) = v37 + 1;
      a5 = v279;
      if (!v207)
      {
        v58 = 0;
        goto LABEL_346;
      }
    }
    v58 = 1;
    a5 = v279;
LABEL_346:
    if (!a10)
    {
LABEL_351:
      v269 = v19;
      v263 = v257;
      goto LABEL_74;
    }
    if ((_WORD)v19)
    {
      v208 = cstdlib_strlen(*a3);
      v209 = *a3;
      if (v208 == (unsigned __int16)v257 && v209[v276 - 1] == 95)
      {
        v58 = 0;
        goto LABEL_351;
      }
      v210 = v257;
      if (cstdlib_strlen(v209) > (unsigned __int16)v257)
      {
        if ((*a3)[v276 - 1] == 95 || (*a3)[(unsigned __int16)v257] == 95)
          v58 = 0;
        v269 = v19;
        v211 = v257;
        goto LABEL_364;
      }
      v269 = v19;
    }
    else
    {
      v210 = v257;
      if (cstdlib_strlen(*a3) <= (unsigned __int16)v257)
      {
        v269 = 0;
      }
      else
      {
        v269 = 0;
        if ((*a3)[(unsigned __int16)v257] == 95)
          v58 = 0;
      }
    }
    v211 = v210;
LABEL_364:
    v263 = v211;
    a5 = v279;
    goto LABEL_74;
  }
  v51 = (unsigned __int16)v37;
  if (v264 <= (unsigned __int16)v37)
  {
    v55 = v37;
  }
  else
  {
    v52 = &(*a3)[(unsigned __int16)v37];
    v53 = cstdlib_strlen("§");
    v54 = v37;
    v55 = v37;
    if (cstdlib_strncmp(v52, "§", v53))
    {
      while (1)
      {
        v51 = (unsigned __int16)++v54;
        if (v264 <= (unsigned __int16)v54)
          break;
        v56 = &(*a3)[(unsigned __int16)v54];
        v57 = cstdlib_strlen("§");
        v55 = v54;
        if (!cstdlib_strncmp(v56, "§", v57))
          goto LABEL_54;
      }
      v55 = v54;
    }
  }
LABEL_54:
  if (v264 == v51)
    goto LABEL_408;
  v59 = cstdlib_strlen("§");
  v50 = v55 + v35 + v35 * v59 - 1;
  a5 = v279;
  if ((unsigned __int16)(v55 + v35 + v35 * v59 - 1) <= v264)
  {
    v49 = v50 - v19;
    a8 = v275;
    goto LABEL_57;
  }
LABEL_368:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v278 + 32)))
  {
    v212 = *(_QWORD *)(v278 + 32);
    v213 = *a3;
    v214 = cstdlib_strlen(v213);
    log_OutTraceTuningDataBinary(v212, 279, (uint64_t)"", (uint64_t)"text/plain;charset=depes", (uint64_t)v213, v214);
    log_OutTraceTuningDataBinary(*(_QWORD *)(v278 + 32), 279, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      *a4,
      32 * *a5);
    log_OutTraceTuningData(*(uint64_t ***)(v278 + 32), 277, (uint64_t)"%s%s", v215, v216, v217, v218, v219, "END");
  }
  return v33;
}

_QWORD *PurgeNLUStrArr(_QWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  int v27;

  if (a2)
  {
    v6 = a5 == a3 || a5 == 0;
    v7 = v6;
    v8 = a2 - 1;
    if (a2 != 1)
    {
      v9 = result;
      v10 = 0;
      v11 = 0;
      v12 = a3;
      v27 = a3 + 32;
      v13 = a4;
      v14 = a4 + 32;
      v15 = a5 == a4 || v7;
      v16 = v15 ^ 1;
      while (1)
      {
        if (v9)
        {
          v17 = v9[2];
          if (v17)
          {
            if (v9[1] > v11)
            {
              v18 = *(char **)(v17 + 8 * v11);
              if (v18)
              {
                v19 = *v18;
                if (v19 == v12 || v27 == v19)
                {
                  v21 = v11 + 1;
                  do
                  {
                    v22 = v9[2];
                    if (v22)
                    {
                      if (v9[1] > v21)
                      {
                        v23 = *(char **)(v22 + 8 * v21);
                        if (v23)
                        {
                          v24 = *v23;
                          v25 = v24 == v13 || v14 == v24;
                          if (v25)
                            v10 = 1;
                          if (v25 && (v16 & 1) == 0)
                          {
                            if (v7)
                              v26 = v21;
                            else
                              v26 = v11;
                            result = (_QWORD *)StrArrSave(v9, v26, 0);
                            v10 = 1;
                          }
                        }
                      }
                    }
                    ++v21;
                  }
                  while (a2 != v21);
                }
              }
            }
          }
        }
        if (++v11 == v8)
        {
          if (!v10)
            break;
          v10 = 0;
          v11 = 0;
          if (!v8)
            break;
        }
      }
    }
  }
  return result;
}

_DWORD *CILE_New(_QWORD *a1, int a2, int a3, int a4)
{
  _DWORD *result;

  result = (_DWORD *)heap_Calloc(a1, 1, 24);
  if (result)
  {
    *result = a2;
    result[1] = a3;
    result[2] = a4;
  }
  return result;
}

_QWORD *CILE_Free(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    do
    {
      v4 = *(_QWORD *)(v3 + 16);
      result = heap_Free(a2, v3);
      v3 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t CILE_InsAfter(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 0xFFFFFFFFLL;
  v8 = a1;
  v9 = heap_Calloc(a2, 1, 24);
  if (!v9)
    return 0xFFFFFFFFLL;
  *(_DWORD *)v9 = a3;
  *(_DWORD *)(v9 + 4) = a4;
  *(_DWORD *)(v9 + 8) = a5;
  if (*(_QWORD *)v8)
  {
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(*(_QWORD *)v8 + 16);
    v8 = *(_QWORD *)v8 + 16;
  }
  v10 = 0;
  *(_QWORD *)v8 = v9;
  return v10;
}

uint64_t CI_Update(uint64_t a1, _DWORD *a2, int a3, int a4, int a5)
{
  *a2 = a3;
  a2[1] = a4;
  a2[2] = a5;
  return 0;
}

uint64_t domain_mngr_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2296389633;
  result = 0;
  *a2 = &IDomain_Mngr;
  return result;
}

uint64_t domain_mngr_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2296389639;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t domain_mngr_ClassClose()
{
  return 0;
}

uint64_t domain_mngr_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t Object;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  __int128 v41;
  _QWORD *(*v42)(_QWORD *, _QWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v43 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v45);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(a1, a2, &v44);
  if ((inited & 0x80000000) != 0)
    return inited;
  v14 = 2296389642;
  log_OutText(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjOpen", v11, v12, v13, v40);
  v15 = heap_Calloc(*(_QWORD **)(v45 + 8), 1, 136);
  if (!v15)
  {
    log_OutPublic(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v16, v17, v18, v19, v40);
    return v14;
  }
  v20 = v15;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 285;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  v22 = v44;
  v21 = v45;
  *(_QWORD *)(v15 + 16) = v45;
  *(_QWORD *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = v22;
  *(_DWORD *)(v15 + 96) = 1;
  *(_DWORD *)(v15 + 128) = 0;
  v23 = *(_QWORD **)(v21 + 8);
  v40 = xmmword_24D293780;
  *(_QWORD *)&v41 = domain_mngr_IElemConsultMemVecFreeParts;
  v24 = vector_ObjOpen(v23, &v40, 1, (uint64_t *)(v20 + 88));
  v29 = v45;
  if (!v24)
    goto LABEL_16;
  v30 = *(_QWORD **)(v45 + 8);
  v40 = xmmword_24D293798;
  v41 = *(_OWORD *)off_24D2937A8;
  v42 = domain_mngr_IElemDomainFree;
  v31 = ssftmap_ObjOpen(v30, 0, &v40, (uint64_t *)(v20 + 112));
  v29 = v45;
  if ((v31 & 0x80000000) != 0)
  {
    v14 = v31;
    goto LABEL_16;
  }
  v32 = *(_QWORD **)(v45 + 8);
  v40 = xmmword_214F75200;
  *(_QWORD *)&v41 = 0;
  v33 = vector_ObjOpen(v32, &v40, 1, (uint64_t *)(v20 + 120));
  v29 = v45;
  if (!v33)
  {
LABEL_16:
    log_OutPublic(*(_QWORD *)(v29 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v25, v26, v27, v28, v40);
    goto LABEL_17;
  }
  Object = objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"SYNTHSTREAM", &v43);
  if ((Object & 0x80000000) != 0)
  {
    v14 = Object;
  }
  else
  {
    *(_QWORD *)(v20 + 48) = *(_QWORD *)(v43 + 8);
    v14 = objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"LINGDB", &v43);
    if ((v14 & 0x80000000) == 0)
    {
      *(_QWORD *)(v20 + 56) = *(_QWORD *)(v43 + 8);
      if ((objc_GetObject(*(_QWORD *)(v45 + 48), (uint64_t)"AUDIOFETCHER", &v43) & 0x80000000) == 0)
      {
        v38 = v43;
        *(_QWORD *)(v20 + 64) = *(_QWORD *)(v43 + 8);
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(v38 + 16);
      }
      log_OutText(*(_QWORD *)(v45 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjOpen", v35, v36, v37, v40);
      return v14;
    }
  }
LABEL_17:
  if (v45)
  {
    domain_mngr_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v14;
}

uint64_t domain_mngr_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjClose", v4, v5, v6, v15);
    if (*(_QWORD *)(a1 + 64))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"AUDIOFETCHER");
    if (*(_QWORD *)(a1 + 56))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"LINGDB");
    if (*(_QWORD *)(a1 + 48))
      objc_ReleaseObject(*(_QWORD *)(v17 + 48), (uint64_t)"SYNTHSTREAM");
    v11 = *(_QWORD *)(a1 + 120);
    if (v11)
      vector_ObjClose(v11);
    v12 = *(_QWORD *)(a1 + 112);
    if (v12)
      ssftmap_ObjClose(v12);
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
      vector_ObjClose(v13);
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjClose", v8, v9, v10, v16);
    heap_Free(*(_QWORD **)(v17 + 8), a1);
  }
  return inited;
}

uint64_t domain_mngr_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ObjReopen", v4, v5, v6, v14);
    if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v19) & 0x80000000) == 0)
    {
      while ((ssftmap_IteratorNext(v19, &v18, &v17) & 0x80000000) == 0)
      {
        if (vector_GetElemAt(*(_QWORD *)(v17 + 16), 0, &v16))
        {
          v11 = 1;
          do
            *(_DWORD *)(*(_QWORD *)v16 + 28) = 0;
          while (vector_GetElemAt(*(_QWORD *)(v17 + 16), v11++, &v16));
        }
      }
      ssftmap_IteratorClose((uint64_t)v19);
    }
    *(_DWORD *)(a1 + 128) = 0;
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ObjReopen", v8, v9, v10, v15);
  }
  return inited;
}

uint64_t domain_mngr_ProcessStart(uint64_t a1, int a2)
{
  uint64_t inited;
  uint64_t refreshed;
  uint64_t v6;

  v6 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6);
  if ((inited & 0x80000000) != 0)
    return inited;
  refreshed = hlp_RefreshTNTypes(a1);
  if ((refreshed & 0x80000000) == 0)
    *(_DWORD *)(a1 + 104) = vector_GetSize(*(_QWORD *)(a1 + 120));
  return refreshed;
}

uint64_t domain_mngr_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  unsigned int Size;
  unsigned int v6;
  uint64_t v8;

  v8 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8);
  if ((inited & 0x80000000) == 0)
  {
    vector_Clear(*(_QWORD *)(a1 + 88));
    Size = vector_GetSize(*(_QWORD *)(a1 + 120));
    if (Size > *(_DWORD *)(a1 + 104))
    {
      v6 = Size;
      do
      {
        vector_StackPop(*(_QWORD *)(a1 + 120));
        --v6;
      }
      while (v6 > *(_DWORD *)(a1 + 104));
    }
  }
  return inited;
}

uint64_t domain_mngr_EnableDomain(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  v19 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = ssftmap_Find(*(_QWORD *)(a1 + 112), a3, &v19);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_8:
    log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 47008, (uint64_t)"%s%s%s%x", v6, v7, v8, v9, "domain");
    return v10;
  }
  v15 = vector_Add(*(_QWORD *)(a1 + 120), &v19);
  v16 = *(_QWORD *)(v20 + 32);
  if (!v15)
  {
    log_OutPublic(v16, (uint64_t)"DOMAIN_MNGR", 47000, 0, v11, v12, v13, v14, v18);
    v10 = 2296389642;
    goto LABEL_8;
  }
  log_OutText(v16, (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Enable domain [%s]", v12, v13, v14, a3);
  return v10;
}

uint64_t domain_mngr_DisableDomain(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  v6 = ssftmap_Find(*(_QWORD *)(a1 + 112), a3, &v12);
  if ((v6 & 0x80000000) == 0 && *(_DWORD *)(a1 + 100))
  {
    v7 = 0;
    while (1)
    {
      vector_GetElemAt(*(_QWORD *)(a1 + 120), v7, &v13);
      if (v13)
      {
        if (v12 == *v13)
          break;
      }
      if (++v7 >= *(_DWORD *)(a1 + 100))
        return v6;
    }
    vector_Remove(*(_QWORD *)(a1 + 120), v7);
    --*(_DWORD *)(a1 + 100);
    log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Disable domain [%s]", v9, v10, v11, a3);
  }
  return v6;
}

uint64_t domain_mngr_DisableAllDomains(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t inited;
  unsigned int Size;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v3 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v3 & 0x80000000) != 0)
    return v3;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v12);
  if ((inited & 0x80000000) == 0)
  {
    Size = vector_GetSize(*(_QWORD *)(a1 + 120));
    if (Size > *(_DWORD *)(a1 + 100))
    {
      v9 = Size;
      do
      {
        vector_StackPop(*(_QWORD *)(a1 + 120));
        --v9;
      }
      while (v9 > *(_DWORD *)(a1 + 100));
    }
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"    Disable all domains", v6, v7, v8, v11);
  }
  return inited;
}

BOOL domain_mngr_ActivePromptExists(uint64_t a1, int a2, char *a3)
{
  return (safeh_HandleCheck(a1, a2, 285, 136) & 0x80000000) == 0 && (int)hlp_FindActivePrompt(a1, a3, 0) >= 0;
}

uint64_t domain_mngr_ConsultActivePromptDbs(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, __int16 *a8, int a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int16 v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  unsigned int v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t ActivePrompt;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  int Size;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int16 v123;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  _WORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _OWORD __b[6];
  uint64_t v140;
  uint64_t v141;
  int v142;
  const char *v143;
  int v144;
  int v145;
  unsigned __int16 v146[6];

  v133 = 0;
  v17 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v17 & 0x80000000) != 0)
    return v17;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v133);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ConsultActivePromptDbs", v18, v19, v20, v125);
  vector_Clear(*(_QWORD *)(a1 + 88));
  v26 = *a5;
  if (v26 < 2)
  {
LABEL_7:
    log_OutText(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v23, v24, v25, *a3);
    v128 = a8;
    v30 = *(_DWORD *)(*a4 + 12) + *a8;
    v31 = *(_QWORD **)(v133 + 8);
    v32 = cstdlib_strlen((const char *)*a3);
    v132 = CILE_New(v31, 1, v30, v32);
    if (!v132)
    {
      inited = 2296389642;
      log_OutPublic(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v36, v37, v38, v39, v127);
      return inited;
    }
    v129 = a7;
    v131 = a6;
    if (!*a5)
    {
LABEL_34:
      if (!cstdlib_strlen((const char *)*a3))
        goto LABEL_108;
      v54 = *(_QWORD *)(a1 + 16);
      v140 = 0;
      memset(__b, 0, sizeof(__b));
      v137 = 0;
      v138 = 0;
      v135 = 0;
      v136 = 0;
      v134 = 0;
      v55 = *(_DWORD *)(*a4 + 12);
      if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v54 + 32)))
      {
        log_OutTraceTuningData(*(uint64_t ***)(v54 + 32), 250, (uint64_t)"%s%s", v56, v57, v58, v59, v60, "BEG");
        v61 = *(_QWORD *)(v54 + 32);
        v62 = *a3;
        v63 = cstdlib_strlen((const char *)*a3);
        log_OutTraceTuningDataBinary(v61, 251, (uint64_t)"", (uint64_t)"text/plain;charset=depes", v62, v63);
        log_OutTraceTuningDataBinary(*(_QWORD *)(v54 + 32), 251, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
          *a4,
          32 * *a5);
      }
      v64 = *a5;
      v130 = v54;
      if (!*a5)
      {
        inited = 0;
        v75 = 0;
        goto LABEL_61;
      }
      v65 = 0;
      v66 = 0;
      inited = 2296389642;
      v67 = (uint64_t)v132;
      while (1)
      {
        if (*(_DWORD *)(*a4 + 32 * v65) == 40)
        {
          v68 = *(_QWORD *)(v54 + 8);
          v69 = cstdlib_strlen(*(const char **)(*a4 + 32 * v65 + 24));
          v70 = (char *)heap_Alloc(v68, (v69 + 1));
          v75 = v70;
          if (!v70)
          {
            log_OutPublic(*(_QWORD *)(v130 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v71, v72, v73, v74, v127);
            goto LABEL_61;
          }
          cstdlib_strcpy(v70, *(const char **)(*a4 + 32 * v65 + 24));
          ActivePrompt = hlp_FindActivePrompt(a1, v75, __b);
          if ((ActivePrompt & 0x80000000) != 0)
          {
            inited = ActivePrompt;
LABEL_61:
            v90 = v129;
            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v130 + 32)))
            {
              v91 = *(_QWORD *)(v130 + 32);
              v92 = *a3;
              v93 = cstdlib_strlen((const char *)*a3);
              log_OutTraceTuningDataBinary(v91, 252, (uint64_t)"", (uint64_t)"text/plain;charset=depes", v92, v93);
              log_OutTraceTuningDataBinary(*(_QWORD *)(v130 + 32), 252, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                *a4,
                32 * *a5);
              v90 = v129;
              log_OutTraceTuningData(*(uint64_t ***)(v130 + 32), 250, (uint64_t)"%s%s %s%u", v94, v95, v96, v97, v98, "END");
            }
            if ((inited & 0x80000000) == 0 && *(_DWORD *)(a1 + 96))
            {
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v130 + 32)))
              {
                log_OutTraceTuningData(*(uint64_t ***)(v130 + 32), 270, (uint64_t)"%s%s", v99, v100, v101, v102, v103, "BEG");
                v104 = *(_QWORD *)(v130 + 32);
                v105 = *a3;
                v106 = cstdlib_strlen((const char *)*a3);
                log_OutTraceTuningDataBinary(v104, 271, (uint64_t)"", (uint64_t)"text/plain;charset=depes", v105, v106);
                v90 = v129;
                log_OutTraceTuningDataBinary(*(_QWORD *)(v130 + 32), 271, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                  *a4,
                  32 * *a5);
              }
              if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v135) & 0x80000000) == 0)
              {
                while ((ssftmap_IteratorNext(v135, &v137, &v136) & 0x80000000) == 0)
                  domain_SetConsulted(v136, 0);
                ssftmap_IteratorClose((uint64_t)v135);
              }
              Size = vector_GetSize(*(_QWORD *)(a1 + 120));
              if (Size)
              {
                v108 = Size;
                do
                {
                  if (!vector_GetElemAt(*(_QWORD *)(a1 + 120), --v108, &v138))
                    break;
                  if (!domain_GetConsulted(*v138))
                  {
                    v109 = vector_GetSize(*(_QWORD *)(*v138 + 16));
                    if (v109)
                    {
                      v110 = v109;
                      v111 = v90;
                      if (vector_GetElemAt(*(_QWORD *)(*v138 + 16), v109 - 1, &v134))
                      {
                        v112 = v110 - 2;
                        while (1)
                        {
                          inited = activeprompt_db_Consult(*v134, a3, a4, a5, v131, v111, (uint64_t)v132, a9);
                          if ((inited & 0x80000000) != 0)
                            break;
                          if (v112 != -1)
                          {
                            if (vector_GetElemAt(*(_QWORD *)(*v138 + 16), v112--, &v134))
                              continue;
                          }
                          goto LABEL_83;
                        }
                        v90 = v111;
                        break;
                      }
                    }
                    else
                    {
                      v111 = v90;
                    }
LABEL_83:
                    domain_SetConsulted(*v138, 1);
                    v90 = v111;
                  }
                }
                while (v108);
              }
            }
            if (v75)
              heap_Free(*(_QWORD **)(v130 + 8), (uint64_t)v75);
            if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v130 + 32)))
            {
              v114 = *(_QWORD *)(v130 + 32);
              v115 = *a3;
              v116 = cstdlib_strlen((const char *)*a3);
              log_OutTraceTuningDataBinary(v114, 272, (uint64_t)"", (uint64_t)"text/plain;charset=depes", v115, v116);
              log_OutTraceTuningDataBinary(*(_QWORD *)(v130 + 32), 272, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                *a4,
                32 * *a5);
              v117 = *(_QWORD *)(a1 + 56);
              v145 = 0;
              *(_DWORD *)v146 = 0;
              v144 = 0;
              v143 = 0;
              v142 = 0;
              v141 = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v117 + 104))(v131, v90, 1, 0, &v146[1]) & 0x80000000) == 0&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v117 + 152))(v131, v90, 2, v146[1], &v144) & 0x80000000) == 0)
              {
                if ((_WORD)v144)
                {
                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v117 + 104))(v131, v90, 2, v146[1], v146) & 0x80000000) == 0)
                  {
                    v123 = v146[0];
                    if (v146[0])
                    {
                      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v117 + 168))(v131, v90, v123, 0, 1, &v142, (char *)&v145 + 2) & 0x80000000) == 0)
                      {
                        if (v142 == 5)
                        {
                          if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, char *))(v117 + 176))(v131, v90, v146[0], 4, &v143, (char *)&v145 + 2) & 0x80000000) != 0)break;
                          if (HIWORD(v145) && !cstdlib_strncmp(v143, "phon", HIWORD(v145)))
                          {
                            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, char *))(v117 + 176))(v131, v90, v146[0], 3, &v141, (char *)&v145 + 2) & 0x80000000) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, char *))(v117 + 168))(v131, v90, v146[0], 1, 1, &v145, (char *)&v145 + 2) & 0x80000000) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, char *))(v117 + 168))(v131, v90, v146[0], 2,
                                    1,
                                    (char *)&v144 + 2,
                                    (char *)&v145 + 2) & 0x80000000) != 0)
                            {
                              break;
                            }
                            log_OutTraceTuningData(*(uint64_t ***)(v130 + 32), 272, (uint64_t)"%s%s %s%d %s%d", v118, v119, v120, v121, v122, "PHON");
                          }
                        }
                        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v117 + 120))(v131, v90, v146[0], v146) & 0x80000000) == 0)
                        {
                          v123 = v146[0];
                          if (v146[0])
                            continue;
                        }
                        break;
                      }
                    }
                  }
                }
              }
              log_OutTraceTuningData(*(uint64_t ***)(v130 + 32), 270, (uint64_t)"%s%s %s%u", v118, v119, v120, v121, v122, "END");
            }
LABEL_108:
            if (v133)
            {
              CILE_Free(v132, *(_QWORD **)(v133 + 8));
              goto LABEL_110;
            }
            return inited;
          }
          log_OutText(*(_QWORD *)(v130 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Do User Prompt Insertion for [%s]", v77, v78, v79, (uint64_t)v75);
          heap_Free(*(_QWORD **)(v130 + 8), (uint64_t)v75);
          v54 = v130;
          while (1)
          {
            v80 = *(_DWORD *)(*a4 + 32 * v65 + 12);
            v81 = *(_DWORD *)(v67 + 4);
            v82 = *(_DWORD *)(v67 + 8) + v81;
            if (v81 <= v80 && v80 < v82)
              break;
            if (v80 == v82 && v80 == v55 + cstdlib_strlen((const char *)*a3))
            {
              v80 = *(_DWORD *)(*a4 + 32 * v65 + 12);
              break;
            }
            v67 = *(_QWORD *)(v67 + 16);
            if (!v67)
            {
              v75 = 0;
              inited = 2296389632;
              goto LABEL_61;
            }
          }
          v66 = activeprompt_Insert((uint64_t **)__b, (unsigned __int16)(v80 - v55), 0, v55, (const char **)a3, a4, a5, (unsigned __int16)v65, v67, v131, v129, v128);
          if ((v66 & 0x80000000) != 0)
          {
LABEL_56:
            v75 = 0;
            inited = v66;
            goto LABEL_61;
          }
          log_OutText(*(_QWORD *)(v130 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v84, v85, v86, *a3);
          v64 = *a5;
        }
        if (++v65 >= (unint64_t)v64)
          goto LABEL_56;
      }
    }
    v40 = 0;
    v41 = 0;
    v42 = v132;
    while (1)
    {
      v43 = *a4;
      if (*(_DWORD *)(*a4 + v40) == 12)
      {
        v44 = *(const char **)(v43 + v40 + 24);
        if (v44)
        {
          if (*v44)
          {
            if (cstdlib_strcmp(v44, "normal"))
            {
              v43 = *a4;
              if (!*(_DWORD *)(a1 + 128))
              {
                v45 = *(_QWORD *)(v133 + 8);
                v46 = cstdlib_strlen(*(const char **)(v43 + v40 + 24));
                v47 = (char *)heap_Alloc(v45, (v46 + 1));
                if (!v47)
                  goto LABEL_86;
                v48 = (uint64_t)v47;
                cstdlib_strcpy(v47, *(const char **)(*a4 + v40 + 24));
                domain_mngr_EnableDomain(a1, a2, v48);
                heap_Free(*(_QWORD **)(v133 + 8), v48);
                goto LABEL_33;
              }
            }
            else
            {
              v43 = *a4;
            }
          }
        }
      }
      v49 = *(_DWORD *)(v43 + v40);
      if (v49 > 25)
      {
        if (v49 == 26 || v49 == 29)
        {
LABEL_28:
          v51 = *(_DWORD *)(v43 + v40 + 12);
          v35 = *((unsigned int *)v42 + 1);
          v36 = v51 - v35;
          if (v51 > v35)
          {
            v52 = *((_DWORD *)v42 + 2);
            if ((v52 - (int)v36) << 16 >= 1)
            {
              inited = CI_Update(*(_QWORD *)(v133 + 8), v42, *(_DWORD *)v42, v35, v36);
              if ((inited & 0x80000000) != 0)
                goto LABEL_108;
              v53 = CILE_New(*(_QWORD **)(v133 + 8), *(_DWORD *)v42, *(_DWORD *)(*a4 + v40 + 12), v52 - *((_DWORD *)v42 + 2));
              if (!v53)
              {
LABEL_86:
                inited = 2296389642;
                log_OutPublic(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v36, v37, v38, v39, v127);
                goto LABEL_108;
              }
              v42[2] = v53;
              v42 = v53;
            }
          }
        }
      }
      else
      {
        if (v49 == 8)
          goto LABEL_28;
        if (v49 == 12 && !*(_DWORD *)(a1 + 128))
          hlp_DisableLastDomain(a1, v33, v34, v35, v36, v37, v38, v39, v127);
      }
LABEL_33:
      ++v41;
      v40 += 32;
      if (v41 >= *a5)
        goto LABEL_34;
    }
  }
  v27 = 0;
  v28 = (unsigned int *)(*a4 + 44);
  while (1)
  {
    v29 = *v28;
    v28 += 8;
    if (*(_DWORD *)(*a4 + 32 * v27 + 12) > v29)
      break;
    if ((unsigned __int16)(v26 - 1) <= ++v27)
      goto LABEL_7;
  }
  log_OutPublic(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 47015, 0, v22, v23, v24, v25, v126);
  inited = 2296389639;
LABEL_110:
  if (v133)
    log_OutText(*(_QWORD *)(v133 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ConsultActivePromptDbs", v87, v88, v89, v127);
  return inited;
}

uint64_t domain_mngr_ConsultOriOrth(uint64_t a1, int a2, const char **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  const char **v40;
  const char *v41;
  int v42;
  const char *v43;
  char *v44;
  int v45;
  unsigned int v46;
  int v47;
  int *v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  size_t v61;
  int Size;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  const char *__s1;
  const char *v83;
  int *v84;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *__s2;
  char __dst[8];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v86 = 0;
  cstdlib_strcpy(__dst, "normal");
  v9 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v9 & 0x80000000) != 0)
    return v9;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v86);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v86 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering domain_mngr_ConsultOriOrth", v10, v11, v12, v80);
    *(_DWORD *)(a1 + 128) = 1;
    v84 = CILE_New(*(_QWORD **)(v86 + 8), 1, *(_DWORD *)(*a4 + 12), *(_DWORD *)(*a4 + 16));
    if (v84)
    {
      if (*a5)
      {
        v21 = 0;
        __s1 = __dst;
        v83 = __dst;
        v22 = v84;
        while (1)
        {
          v23 = *a4;
          v24 = *(_DWORD *)(*a4 + 32 * v21);
          if (v24 == 12)
          {
            v25 = *(const char **)(v23 + 32 * v21 + 24);
            if (!v25 || !*v25)
            {
LABEL_29:
              hlp_DisableLastDomain(a1, v14, v15, v16, v17, v18, v19, v20, v81);
              goto LABEL_30;
            }
            v26 = cstdlib_strcmp(v25, "normal");
            v23 = *a4;
            if (v26)
            {
              v27 = *(_QWORD *)(v86 + 8);
              v28 = cstdlib_strlen(*(const char **)(v23 + 32 * v21 + 24));
              v29 = (char *)heap_Alloc(v27, (v28 + 1));
              if (!v29)
                goto LABEL_98;
              v30 = (uint64_t)v29;
              cstdlib_strcpy(v29, *(const char **)(*a4 + 32 * v21 + 24));
              domain_mngr_EnableDomain(a1, a2, v30);
              heap_Free(*(_QWORD **)(v86 + 8), v30);
              goto LABEL_30;
            }
            v24 = *(_DWORD *)(v23 + 32 * v21);
          }
          if (v24 > 0x28)
            break;
          if (((1 << v24) & 0x10024000100) != 0)
          {
            v31 = *(_DWORD *)(v23 + 32 * v21 + 12);
            v16 = v22[1];
            v17 = v31 - v16;
            if (v31 > v16)
            {
              v32 = v22[2];
              if (v32 != (_DWORD)v17)
              {
                inited = CI_Update(*(_QWORD *)(v86 + 8), v22, *v22, v16, v17);
                if ((inited & 0x80000000) != 0)
                  goto LABEL_99;
                v33 = CILE_New(*(_QWORD **)(v86 + 8), *v22, *(_DWORD *)(*a4 + 32 * v21 + 12), v32 - v22[2]);
                if (!v33)
                  goto LABEL_98;
                *((_QWORD *)v22 + 2) = v33;
                v22 = v33;
              }
            }
            goto LABEL_30;
          }
          if (v24 == 12)
            goto LABEL_29;
          if (v24 != 21)
            break;
          v34 = cstdlib_strcmp(__s1, *(const char **)(v23 + 32 * v21 + 24));
          v23 = *a4;
          if (!v34)
            break;
LABEL_24:
          if (cstdlib_strcmp(*(const char **)(v23 + 32 * v21 + 24), __dst))
            goto LABEL_25;
          v45 = *(_DWORD *)(*a4 + 32 * v21);
          if (v45 == 21)
          {
            if (!cstdlib_strcmp(v83, __dst))
              goto LABEL_46;
            v45 = *(_DWORD *)(*a4 + 32 * v21);
          }
          if (v45 != 36 || cstdlib_strcmp(__s1, __dst))
          {
LABEL_25:
            v35 = 0;
            goto LABEL_26;
          }
LABEL_46:
          v35 = 1;
LABEL_26:
          v36 = *a4;
          v37 = *(_DWORD *)(*a4 + 32 * v21);
          if (v37 == 36)
          {
            v83 = *(const char **)(v36 + 32 * v21 + 24);
          }
          else if (v37 == 21)
          {
            __s1 = *(const char **)(v36 + 32 * v21 + 24);
          }
          v16 = *(unsigned int *)(v36 + 32 * v21 + 12);
          v46 = v22[1];
          v17 = v16 - v46;
          if (v16 <= v46 || (v47 = v22[2], v47 == (_DWORD)v17))
          {
            if ((_DWORD)v16 == v46)
            {
              inited = CI_Update(*(_QWORD *)(v86 + 8), v22, v35, v16, v22[2]);
              if ((inited & 0x80000000) != 0)
                goto LABEL_99;
            }
          }
          else
          {
            inited = CI_Update(*(_QWORD *)(v86 + 8), v22, *v22, v22[1], v17);
            if ((inited & 0x80000000) != 0)
              goto LABEL_99;
            v48 = CILE_New(*(_QWORD **)(v86 + 8), v35, *(_DWORD *)(*a4 + 32 * v21 + 12), v47 - v22[2]);
            if (!v48)
            {
LABEL_98:
              inited = 2296389642;
              log_OutPublic(*(_QWORD *)(v86 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v17, v18, v19, v20, v81);
              goto LABEL_99;
            }
            *((_QWORD *)v22 + 2) = v48;
            v22 = v48;
          }
LABEL_30:
          if (++v21 >= (unint64_t)*a5)
            goto LABEL_69;
        }
        v38 = v86;
        __s2 = 0;
        if (!v83)
          goto LABEL_30;
        if (!v86)
          goto LABEL_30;
        if (!v23)
          goto LABEL_30;
        if (*(_DWORD *)(v23 + 32 * v21) != 36)
          goto LABEL_30;
        v39 = v23 + 32 * v21;
        v41 = *(const char **)(v39 + 24);
        v40 = (const char **)(v39 + 24);
        if (!cstdlib_strcmp(v83, v41)
          || (paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"langcode", &__s2) & 0x80000000) != 0)
        {
          goto LABEL_30;
        }
        v42 = cstdlib_strcmp(v83, "normal");
        v43 = *v40;
        if (v42)
        {
          if (cstdlib_strcmp(v43, "normal"))
          {
LABEL_58:
            v23 = *a4;
            if (*a5)
            {
              v49 = 0;
              v50 = 0;
              v51 = *(_DWORD *)(v23 + 32 * v21 + 12);
              do
              {
                if (v50)
                  break;
                v52 = *(_DWORD *)(v23 + v49 + 12);
                if (v52 > v51)
                  break;
                v50 = v52 == v51 && *(_DWORD *)(v23 + v49) == 34;
                v49 += 32;
              }
              while (32 * *a5 != v49);
              if (v50)
                goto LABEL_30;
            }
            goto LABEL_24;
          }
          v44 = __s2;
          v43 = v83;
        }
        else
        {
          v44 = __s2;
        }
        if (!cstdlib_strcmp(v43, v44))
          goto LABEL_30;
        goto LABEL_58;
      }
LABEL_69:
      if (*a3 && cstdlib_strlen(*a3))
      {
        v53 = *(_QWORD *)(a1 + 16);
        v90 = 0;
        __s2 = 0;
        v88 = 0;
        v89 = 0;
        v87 = 0;
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v53 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v53 + 32), 210, (uint64_t)"%s%s", v54, v55, v56, v57, v58, "BEG");
          v59 = *(_QWORD *)(v53 + 32);
          v60 = *a3;
          v61 = cstdlib_strlen(*a3);
          log_OutTraceTuningDataBinary(v59, 211, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8", (uint64_t)v60, v61);
          log_OutTraceTuningDataBinary(*(_QWORD *)(v53 + 32), 211, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
            *a4,
            32 * *a5);
        }
        if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v88) & 0x80000000) == 0)
        {
          while ((ssftmap_IteratorNext(v88, &v90, &v89) & 0x80000000) == 0)
            domain_SetConsulted(v89, 0);
          ssftmap_IteratorClose((uint64_t)v88);
        }
        Size = vector_GetSize(*(_QWORD *)(a1 + 120));
        if (Size)
        {
          v63 = Size;
          inited = 0;
          while (vector_GetElemAt(*(_QWORD *)(a1 + 120), --v63, &__s2))
          {
            if (domain_GetConsulted(*(_QWORD *)__s2))
            {
              if (!v63)
                break;
            }
            else
            {
              v64 = vector_GetSize(*(_QWORD *)(*(_QWORD *)__s2 + 16));
              if (v64)
              {
                v65 = v64;
                if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)__s2 + 16), v64 - 1, &v87))
                {
                  v66 = v65 - 2;
                  while (1)
                  {
                    inited = activeprompt_db_ConsultOriOrth(*v87, (uint64_t *)a3, a4, a5, (uint64_t)v84);
                    if ((inited & 0x80000000) != 0)
                      goto LABEL_94;
                    if (v66 != -1)
                    {
                      if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)__s2 + 16), v66--, &v87))
                        continue;
                    }
                    break;
                  }
                }
              }
              domain_SetConsulted(*(_QWORD *)__s2, 1);
              if (!v63)
                break;
            }
          }
        }
        else
        {
          inited = 0;
        }
LABEL_94:
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v53 + 32)))
        {
          if ((inited & 0x80000000) == 0)
          {
            v73 = *(_QWORD *)(v53 + 32);
            v74 = *a3;
            v75 = cstdlib_strlen(*a3);
            log_OutTraceTuningDataBinary(v73, 212, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
              (uint64_t)v74,
              v75);
            log_OutTraceTuningDataBinary(*(_QWORD *)(v53 + 32), 212, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
              *a4,
              32 * *a5);
          }
          log_OutTraceTuningData(*(uint64_t ***)(v53 + 32), 210, (uint64_t)"%s%s %s%u", v68, v69, v70, v71, v72, "END");
        }
      }
LABEL_99:
      if (v86)
      {
        CILE_Free(v84, *(_QWORD **)(v86 + 8));
        if (v86)
          log_OutText(*(_QWORD *)(v86 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting domain_mngr_ConsultOriOrth", v76, v77, v78, v81);
      }
    }
    else
    {
      inited = 2296389642;
      log_OutPublic(*(_QWORD *)(v86 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v17, v18, v19, v20, v81);
    }
  }
  return inited;
}

uint64_t domain_mngr_InsertPromptOrth(uint64_t a1, int a2, const char **a3, uint64_t *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, _WORD *a8)
{
  uint64_t v12;
  uint64_t inited;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t ActivePrompt;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  _OWORD __b[6];
  uint64_t v40;
  uint64_t v41;

  v41 = 0;
  v12 = safeh_HandleCheck(a1, a2, 285, 136);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v40 = 0;
  memset(__b, 0, sizeof(__b));
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v41);
  if ((inited & 0x80000000) == 0)
  {
    v14 = *a5;
    if (*a5)
    {
      v15 = 0;
      v16 = 0;
      v17 = *(_DWORD *)(*a4 + 12);
      do
      {
        if (*(_DWORD *)(*a4 + v15) == 40)
        {
          v18 = *(_QWORD *)(v41 + 8);
          v19 = cstdlib_strlen(*(const char **)(*a4 + v15 + 24));
          v20 = (char *)heap_Alloc(v18, (v19 + 1));
          if (!v20)
          {
            log_OutPublic(*(_QWORD *)(v41 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v21, v22, v23, v24, v35);
            return 2296389642;
          }
          v25 = v20;
          cstdlib_strcpy(v20, *(const char **)(*a4 + v15 + 24));
          ActivePrompt = hlp_FindActivePrompt(a1, v25, __b);
          if ((ActivePrompt & 0x80000000) != 0)
          {
            inited = ActivePrompt;
            heap_Free(*(_QWORD **)(v41 + 8), (uint64_t)v25);
            return inited;
          }
          log_OutText(*(_QWORD *)(v41 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    Do User Prompt Insertion for [%s]", v27, v28, v29, (uint64_t)v25);
          heap_Free(*(_QWORD **)(v41 + 8), (uint64_t)v25);
          inited = activeprompt_InsertOrth((char **)__b, (unsigned __int16)*(_DWORD *)(*a4 + v15 + 12) - (unsigned __int16)v17, v17, a3, a4, a5, (unsigned __int16)v16, v30, a6, a7, a8);
          if ((inited & 0x80000000) != 0)
            return inited;
          log_OutText(*(_QWORD *)(v41 + 32), (uint64_t)"DOMAIN_MNGR", 5, 0, (uint64_t)"    [%s]", v31, v32, v33, (uint64_t)*a3);
          v14 = *a5;
        }
        ++v16;
        v15 += 32;
      }
      while (v16 < v14);
    }
  }
  return inited;
}

uint64_t domain_mngr_ExternalDBRegister(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    LODWORD(result) = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4);
    if ((int)result >= 0)
      return 2296389633;
    else
      return result;
  }
  return result;
}

uint64_t domain_mngr_ActivePromptFind(uint64_t a1, int a2, char *a3, void *a4, uint64_t a5, char **a6, _QWORD *a7)
{
  uint64_t result;

  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    result = hlp_FindActivePrompt(a1, a3, a4);
    if ((result & 0x80000000) == 0)
    {
      if (a6)
        result = activeprompt_GetRecPromptURI((unsigned int *)a4, a5, a6);
      if (a7)
      {
        if ((result & 0x80000000) == 0)
          return activeprompt_GetUserNorm((uint64_t)a4, a7);
      }
    }
  }
  return result;
}

uint64_t domain_mngr_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = safeh_HandleCheck(a1, a2, 285, 136);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v6);
    if ((result & 0x80000000) == 0)
      *a3 = &domain_mngr_ResourceTypes_SZ_CONTENT_TYPES;
  }
  return result;
}

uint64_t domain_mngr_ResourceLoad(_WORD **a1, int a2, char *a3, char *a4, const void *a5, int a6, uint64_t a7)
{
  uint64_t active;
  int v9;
  _BOOL4 v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = 0;
  v73 = 0;
  v74 = 0;
  active = 2296389639;
  if (!a3 || !a7)
    return active;
  v9 = a6;
  if (a4)
  {
    v15 = a6 != 0;
    if (!a5 && a6)
      return active;
  }
  else
  {
    if (!a5 || !a6)
      return active;
    v15 = 1;
  }
  inited = safeh_HandleCheck((uint64_t)a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  memset(v72, 0, sizeof(v72));
  inited = InitRsrcFunction(*a1, (int)a1[1], &v75);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  v22 = a5 != 0;
  if (v22 && v15)
    v23 = a5;
  else
    v23 = 0;
  if (!v22 || !v15)
    v9 = 0;
  log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%s %s%s", v17, v18, v19, v20, v21, "BEG");
  active = activeprompt_db_ObjOpen(0, (uint64_t)a1, a3, a4, v23, v9, 0, &v73);
  if ((active & 0x80000000) != 0)
    goto LABEL_43;
  v29 = v73;
  if (v73)
  {
    if (!*(_QWORD *)(v73 + 80))
      goto LABEL_27;
    v30 = cstdlib_strstr(a3, "application/x-vocalizer-activeprompt-db");
    v29 = v73;
    if (v30)
    {
      v31 = (*((uint64_t (**)(_WORD *, _WORD *, _QWORD))a1[8] + 13))(a1[9], a1[10], *(_QWORD *)(v73 + 80));
      active = v31;
      if ((v31 & 0x80000000) != 0 || (v29 = v73) == 0)
      {
        if ((v31 & 0x80000000) != 0)
          goto LABEL_43;
        goto LABEL_53;
      }
LABEL_27:
      v32 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 168);
      if ((ssftmap_Find((uint64_t)a1[14], v32, &v74) & 0x80000000) != 0)
      {
        v42 = domain_ObjOpen(0, *a1, (uint64_t)a1[1], (uint64_t *)v72);
        if ((v42 & 0x80000000) != 0)
        {
          v52 = v42;
          log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47004, (uint64_t)"%s%s%s%x", v43, v44, v45, v46, "domain");
          v53 = 0;
          v54 = 1;
          active = v52;
          goto LABEL_45;
        }
        v47 = ssftmap_Insert((uint64_t)a1[14], v32, (uint64_t)v72);
        if ((v47 & 0x80000000) != 0 || (v47 = ssftmap_Find((uint64_t)a1[14], v32, &v74), (v47 & 0x80000000) != 0))
        {
          active = v47;
          log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47005, (uint64_t)"%s%s%s%x", v48, v49, v50, v51, "domain");
          domain_ObjClose((uint64_t)v72);
          goto LABEL_43;
        }
        log_OutText(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Adding %s", v49, v50, v51, v32);
      }
      v33 = domain_checkIfPresent(v74, v73);
      if ((v33 & 0x80000000) == 0)
      {
        active = domain_AddActivePromptDb(v74, v73);
        if ((active & 0x80000000) == 0)
        {
          if (cstdlib_strstr(a3, ";mode=automatic")
            || !cstdlib_strcmp((const char *)(*(_QWORD *)(v73 + 8) + 52), "automatic"))
          {
            active = domain_mngr_EnableDomain((uint64_t)a1, a2, v32);
            if ((active & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47010, (uint64_t)"%s%s%s%x", v38, v39, v40, v41, "domain");
              v53 = 0;
              v54 = 0;
              goto LABEL_44;
            }
            ++*((_DWORD *)a1 + 25);
          }
          hlp_RefreshTNTypes((uint64_t)a1);
          *(_QWORD *)a7 = v73;
          *(_DWORD *)(a7 + 8) = 316;
          goto LABEL_53;
        }
        log_OutPublic(*(_QWORD *)(v75 + 32), (uint64_t)"DOMAIN_MNGR", 47009, (uint64_t)"%s%s%s%x", v34, v35, v36, v37, "domain");
LABEL_43:
        v53 = 0;
        v54 = 1;
LABEL_44:
        v52 = active;
        goto LABEL_45;
      }
      v52 = v33;
      v53 = (v33 & 0x1FFF) == 19;
      if ((v33 & 0x1FFF) == 0x13)
        active = 0;
      else
        active = v33;
      v54 = 1;
LABEL_45:
      log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%u", v24, v25, v26, v27, v28, "END");
      v60 = v73;
      if (v73)
      {
        if (v54)
        {
          log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 202, (uint64_t)"%s%s %s%s", v55, v56, v57, v58, v59, "BEG");
          activeprompt_db_ObjClose(v73, v53);
          log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 202, (uint64_t)"%s%s %s%u", v61, v62, v63, v64, v65, "END");
          return active;
        }
        *(_QWORD *)a7 = v73;
        *(_DWORD *)(a7 + 8) = 316;
        domain_mngr_ResourceUnload((uint64_t)a1, a2, v60, *(_QWORD *)(a7 + 8));
        *(_QWORD *)a7 = 0;
        *(_DWORD *)(a7 + 8) = 0;
      }
      return v52;
    }
    if (v73)
      goto LABEL_27;
  }
LABEL_53:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v75 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(v75 + 32), 201, (uint64_t)"%s%s %s%u", v66, v67, v68, v69, v70, "END");
  return active;
}

uint64_t domain_mngr_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v33);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v32) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v32, &v31, &v30) & 0x80000000) != 0)
    {
      ssftmap_IteratorClose((uint64_t)v32);
    }
    else
    {
      do
      {
        if (vector_GetElemAt(*(_QWORD *)(v30 + 16), 0, &v29))
        {
          v15 = 0;
          while (*v29 != a3)
          {
            if (!vector_GetElemAt(*(_QWORD *)(v30 + 16), ++v15, &v29))
              goto LABEL_16;
          }
          log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%s", v10, v11, v12, v13, v14, "BEG");
          v16 = *v29;
          if (*(_QWORD *)(*v29 + 80))
          {
            inited = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 112))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
            if ((inited & 0x80000000) != 0)
              return inited;
            v16 = *v29;
          }
          v17 = domain_mngr_DisableDomain(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 + 8) + 168));
          if ((v17 & 0x80000000) != 0)
          {
            v9 = v17;
            log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%u", v18, v19, v20, v21, v22, "END");
            return v9;
          }
          vector_Remove(*(_QWORD *)(v30 + 16), v15);
          log_OutTraceTuningData(*(uint64_t ***)(v33 + 32), 202, (uint64_t)"%s%s %s%u", v23, v24, v25, v26, v27, "END");
          v9 = 0;
        }
LABEL_16:
        ;
      }
      while ((ssftmap_IteratorNext(v32, &v31, &v30) & 0x80000000) == 0);
      ssftmap_IteratorClose((uint64_t)v32);
      if ((v9 & 0x80000000) == 0)
        hlp_RefreshTNTypes(a1);
    }
  }
  return v9;
}

uint64_t domain_mngr_ResourceEnable(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v16) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v16, &v15, &v14) & 0x80000000) != 0)
    {
      v9 = 2296390669;
    }
    else
    {
      v9 = 2296390669;
      do
      {
        if (vector_GetElemAt(*(_QWORD *)(v14 + 16), 0, &v13))
        {
          v10 = 1;
          while (*v13 != a3)
          {
            if (!vector_GetElemAt(*(_QWORD *)(v14 + 16), v10++, &v13))
              goto LABEL_15;
          }
          if (*(_DWORD *)(a3 + 24))
          {
            v9 = 2296390682;
          }
          else
          {
            v9 = 0;
            *(_DWORD *)(a3 + 24) = 1;
          }
        }
LABEL_15:
        ;
      }
      while ((ssftmap_IteratorNext(v16, &v15, &v14) & 0x80000000) == 0);
    }
    ssftmap_IteratorClose((uint64_t)v16);
    return v9;
  }
  return v8;
}

uint64_t domain_mngr_ResourceDisable(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  inited = safeh_HandleCheck(a1, a2, 285, 136);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = safeh_HandleCheck(a3, a4, 316, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v16);
  if ((inited & 0x80000000) != 0)
    return inited;
  v8 = 2296390669;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v15) & 0x80000000) == 0)
  {
LABEL_5:
    while ((ssftmap_IteratorNext(v15, &v14, &v13) & 0x80000000) == 0)
    {
      if (vector_GetElemAt(*(_QWORD *)(v13 + 16), 0, &v12))
      {
        v9 = 1;
        while (*v12 != a3)
        {
          if (!vector_GetElemAt(*(_QWORD *)(v13 + 16), v9++, &v12))
            goto LABEL_5;
        }
        v8 = 2296390669;
        if (*(_DWORD *)(a3 + 24))
        {
          v8 = 0;
          *(_DWORD *)(a3 + 24) = 0;
        }
      }
    }
    ssftmap_IteratorClose((uint64_t)v15);
  }
  return v8;
}

uint64_t domain_mngr_IElemConsultMemVecCopyParts()
{
  return 1;
}

uint64_t *domain_mngr_IElemConsultMemVecFreeParts(uint64_t *result, _QWORD *a2)
{
  if (result)
  {
    if (*result)
      return heap_Free(a2, *result);
  }
  return result;
}

uint64_t domain_mngr_IElemDomainCopy(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  uint64_t result;

  v5 = (void *)heap_Alloc(a2, 32);
  if (!v5)
    return 2296389642;
  v6 = v5;
  cstdlib_memcpy(v5, a1, 0x20uLL);
  result = 0;
  a1[2] = 0;
  *a3 = v6;
  return result;
}

_QWORD *domain_mngr_IElemDomainFree(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    domain_ObjClose((uint64_t)result);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t hlp_RefreshTNTypes(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD **v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Entering hlp_RefreshTNTypes", v3, v4, v5, (uint64_t)v15);
  inited = ssftstring_ObjOpen(*(_QWORD **)(v20 + 8), &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((ssftmap_IteratorOpen(*(_QWORD *)(a1 + 112), 0, 0, (uint64_t)&v18) & 0x80000000) == 0)
  {
    while ((ssftmap_IteratorNext(v18, &v17, &v16) & 0x80000000) == 0)
    {
      if (vector_GetElemAt(*(_QWORD *)(v16 + 16), 0, &v15))
      {
        v6 = 1;
        do
          activeprompt_db_GetTNTypes(*v15, (uint64_t)v19);
        while (vector_GetElemAt(*(_QWORD *)(v16 + 16), v6++, &v15));
      }
    }
    ssftmap_IteratorClose((uint64_t)v18);
  }
  v9 = *(_QWORD *)(v20 + 40);
  v10 = (char *)ssftstring_CStr((uint64_t)v19);
  v8 = paramc_ParamSetStr(v9, (uint64_t)"domainmngrtntypes", v10);
  ssftstring_ObjClose(v19);
  log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)"Exiting hlp_RefreshTNTypes", v11, v12, v13, (uint64_t)v15);
  return v8;
}

uint64_t hlp_FindActivePrompt(uint64_t a1, char *__s, void *__b)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int Size;
  int v17;
  unsigned int v18;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  char *__s1;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 16);
  __s1 = 0;
  v29 = 0;
  v4 = 2296389652;
  v27 = 0;
  if (!v3)
    return 2296389639;
  if (__b)
    cstdlib_memset(__b, 0, 0x68uLL);
  v8 = domain_mngr_utils_DuplicateString(*(_QWORD *)(v3 + 8), __s, &__s1);
  if ((v8 & 0x80000000) == 0)
  {
    v14 = cstdlib_strstr(__s1, "::");
    if (!v14)
    {
      v4 = 2296389633;
      goto LABEL_17;
    }
    *v14 = 0;
    v15 = v14 + 2;
    v8 = ssftmap_Find(*(_QWORD *)(a1 + 112), (uint64_t)__s1, &v29);
    if ((v8 & 0x80000000) == 0)
    {
      Size = vector_GetSize(*(_QWORD *)(v29 + 16));
      if (Size)
      {
        v17 = Size;
        if (vector_GetElemAt(*(_QWORD *)(v29 + 16), Size - 1, &v27))
        {
          v18 = v17 - 2;
          do
          {
            v4 = activeprompt_db_Get(*v27, v15, (uint64_t)__b);
            if ((v4 & 0x80000000) == 0)
              break;
            if (v18 == -1)
              break;
          }
          while (vector_GetElemAt(*(_QWORD *)(v29 + 16), v18--, &v27));
        }
      }
      goto LABEL_17;
    }
  }
  v4 = v8;
LABEL_17:
  if (__s1)
  {
    heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)__s1);
    __s1 = 0;
  }
  v20 = *(uint64_t ***)(v3 + 32);
  if ((v4 & 0x80000000) != 0)
  {
    log_OutPublic((uint64_t)v20, (uint64_t)"DOMAIN_MNGR", 47016, (uint64_t)"%s%s", v10, v11, v12, v13, "prompt");
    log_OutTraceTuningData(*(uint64_t ***)(v3 + 32), 253, (uint64_t)"%s%s %s%d", v21, v22, v23, v24, v25, "NAME");
  }
  else
  {
    log_OutTraceTuningData(v20, 253, (uint64_t)"%s%s", v9, v10, v11, v12, v13, "NAME");
  }
  return v4;
}

uint64_t hlp_DisableLastDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  v10 = *(_QWORD *)(a1 + 16);
  if (vector_GetSize(*(_QWORD *)(a1 + 120)) <= *(_DWORD *)(a1 + 100))
  {
    v14 = "    No domains were activated, so could not disable the last domain";
  }
  else
  {
    vector_StackPop(*(_QWORD *)(a1 + 120));
    v14 = "    Disable last enabled domain";
  }
  return log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"DOMAIN_MNGR", 4, 0, (uint64_t)v14, v11, v12, v13, a9);
}

uint64_t domain_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  _QWORD *(*v15)(_QWORD *);
  uint64_t v16;

  v16 = 0;
  inited = InitRsrcFunction(a2, a3, &v16);
  if ((inited & 0x80000000) == 0)
  {
    cstdlib_memset(a4, 0, 0x20uLL);
    *a4 = (uint64_t)a2;
    a4[1] = a3;
    v8 = *(_QWORD **)(v16 + 8);
    v14 = xmmword_24D2937D0;
    v15 = domain_IElemApdbVecFreeParts;
    if (!vector_ObjOpen(v8, &v14, 1, a4 + 2))
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"DOMAIN_MNGR", 47000, 0, v9, v10, v11, v12, v14);
      domain_ObjClose((uint64_t)a4);
      return 2296389642;
    }
  }
  return inited;
}

uint64_t domain_IElemApdbVecCopyParts()
{
  return 1;
}

_QWORD *domain_IElemApdbVecFreeParts(_QWORD *result)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)activeprompt_db_ObjClose((uint64_t)result, 0);
  }
  return result;
}

uint64_t domain_ObjClose(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (!a1)
    return 2296389639;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5);
  if ((inited & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      vector_ObjClose(v3);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  return inited;
}

uint64_t domain_checkIfPresent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  const char *v6;
  const char *v7;
  BOOL v8;
  uint64_t v10;

  v2 = 2296389639;
  if (a1)
  {
    v10 = 0;
    if (vector_GetSize(*(_QWORD *)(a1 + 16)))
    {
      v5 = 0;
      while (1)
      {
        vector_GetElemAt(*(_QWORD *)(a1 + 16), v5, &v10);
        v6 = *(const char **)(*(_QWORD *)v10 + 56);
        v7 = *(const char **)(a2 + 56);
        v8 = !v7 || v6 == 0;
        if (!v8 && cstdlib_strlen(v7) && !cstdlib_strcmp(*(const char **)(a2 + 56), v6))
          break;
        if (++v5 >= vector_GetSize(*(_QWORD *)(a1 + 16)))
          return 0;
      }
      return 2296389651;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t domain_AddActivePromptDb(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2296389639;
  if (a1)
  {
    v4 = a2;
    if (vector_Add(*(_QWORD *)(a1 + 16), &v4))
      return 0;
    else
      return 2296389642;
  }
  return v2;
}

uint64_t domain_GetConsulted(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

uint64_t domain_SetConsulted(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 2296389639;
  result = 0;
  *(_DWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t fe_prompt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  if (!a5)
    return 2342526983;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v26[6], (uint64_t)"LINGDB", &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v26[6], (uint64_t)"SYNTHSTREAM", &v25);
  v8 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    v19 = "LINGDB";
LABEL_16:
    objc_ReleaseObject(v8, (uint64_t)v19);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"DOMAINMNGR", &v23);
  v9 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v9, (uint64_t)"LINGDB");
    v8 = v26[6];
    v19 = "SYNTHSTREAM";
    goto LABEL_16;
  }
  Object = objc_GetObject(v9, (uint64_t)"FE_DEPES", &v22);
  v10 = v26[6];
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v10, (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    v8 = v26[6];
    v19 = "DOMAINMNGR";
    goto LABEL_16;
  }
  Object = objc_GetObject(v10, (uint64_t)"FE_DCTLKP", &v21);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v26[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v26[6], (uint64_t)"DOMAINMNGR");
    v8 = v26[6];
    v19 = "FE_DEPES";
    goto LABEL_16;
  }
  v11 = heap_Alloc(v26[1], 920);
  if (v11)
  {
    *(_QWORD *)v11 = v26;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v25 + 8);
    v16 = v23;
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v23 + 8);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v16 + 16);
    v17 = v22;
    *(_QWORD *)(v11 + 48) = *(_QWORD *)(v22 + 8);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(v17 + 16);
    v18 = v21;
    *(_QWORD *)(v11 + 912) = *(_QWORD *)(v21 + 8);
    *(_OWORD *)(v11 + 896) = *(_OWORD *)(v18 + 16);
    *(_QWORD *)a5 = v11;
    *(_DWORD *)(a5 + 8) = 62338;
  }
  else
  {
    log_OutPublic(v26[4], (uint64_t)"FE_PROMPT", 45200, 0, v12, v13, v14, v15, v21);
    objc_ReleaseObject(v26[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v26[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v26[6], (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(v26[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v26[6], (uint64_t)"FE_DCTLKP");
    return 2342526986;
  }
  return Object;
}

uint64_t fe_prompt_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62338, 920);
  if ((result & 0x80000000) != 0)
    return 2342526984;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_prompt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62338, 920);
  if ((int)result >= 0)
    return result;
  else
    return 2342526984;
}

uint64_t fe_prompt_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  synstrmaux_InitStreamOpener(a1 + 72, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPT");
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(_QWORD *)(a1 + 16), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t fe_prompt_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *);
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v45;
  int v46;
  __int16 v47;
  int v48;
  _DWORD *v49;
  void *__src;
  __int16 v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  __int16 v54;
  char v55;
  unsigned __int8 **v56;
  char *v57;
  const char *v58;

  v56 = 0;
  v57 = 0;
  v55 = 0;
  v54 = 0;
  v52 = 0;
  v51 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v46 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  v58 = 0;
  v53 = 0;
  __src = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(a3, a4, 1, 0, &v53);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_23;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a1[1] + 184))(a3, a4, v53, 0, &v48) & 0x80000000) == 0
    && (unsigned __int16)v48 == 1)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v53, 0, &v58, &v52);
    if ((v9 & 0x80000000) != 0)
    {
LABEL_23:
      if (v57)
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v57);
      v57 = 0;
      if (v49)
        heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v49);
      return v9;
    }
    if (v52 < 2u)
      return v9;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v53, 1, &__src, &v52);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = v52;
      HIWORD(v48) = v52;
      v12 = *(_QWORD *)(*a1 + 8);
      v13 = cstdlib_strlen(v58);
      v14 = (char *)heap_Alloc(v12, (v13 + 1));
      v57 = v14;
      if (v14)
      {
        v19 = (uint64_t)v14;
        cstdlib_strcpy(v14, v58);
        v20 = 32 * v11;
        v21 = (_DWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v20);
        v49 = v21;
        if (v21)
        {
          cstdlib_memcpy(v21, __src, v20);
          v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, unsigned __int8 ***, __int16 *, char *))(a1[114] + 96))(a1[112], a1[113], "fecfg", "mdesegpos_morpheme_processing", &v56, &v54, &v55);
          if ((v10 & 0x80000000) == 0)
          {
            v26 = 0;
            if (v54 == 1 && v56)
              v26 = **v56 == 49;
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _DWORD **, char *, uint64_t, uint64_t, __int16 *, _BOOL4))(a1[3] + 104))(a1[4], a1[5], &v57, &v49, (char *)&v48 + 2, a3, a4, &v47, v26);
            if ((v10 & 0x80000000) == 0)
            {
              if (!v57
                || (v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *))(a1[1] + 160),
                    v28 = v53,
                    v29 = cstdlib_strlen(v57),
                    v10 = v27(a3, a4, v28, 0, (unsigned __int16)(v29 + 1), v57, &v51),
                    (v10 & 0x80000000) == 0))
              {
                if (!v49
                  || !HIWORD(v48)
                  || (v49[4] += v47,
                      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1[1] + 160))(a3, a4, v53, 1), (v10 & 0x80000000) == 0))
                {
                  v10 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(a1[6] + 112))(a1[7], a1[8], &v46, 0);
                  if ((v10 & 0x80000000) == 0)
                  {
                    v46 += v47;
                    v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[6] + 104))(a1[7], a1[8]);
                  }
                }
              }
            }
          }
          goto LABEL_22;
        }
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPT", 45200, 0, v22, v23, v24, v25, v45);
        heap_Free(*(_QWORD **)(*a1 + 8), v19);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPT", 45200, 0, v15, v16, v17, v18, v45);
      }
      return 2342526986;
    }
LABEL_22:
    v9 = v10;
    goto LABEL_23;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(*a1 + 32))
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a3, a4, v53, 1, &v48) & 0x80000000) == 0
    && (unsigned __int16)v48 == 1
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v53, 1, &__src, &v52) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(*a1 + 32), 270, (uint64_t)"%s%s", v30, v31, v32, v33, v34, "BEG");
    v35 = *(_QWORD *)(*a1 + 32);
    v36 = cstdlib_strlen("");
    log_OutTraceTuningDataBinary(v35, 271, (uint64_t)"", (uint64_t)"text/plain;charset=depes", (uint64_t)"", v36);
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 271, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      (uint64_t)__src,
      32 * v52);
    v37 = *(_QWORD *)(*a1 + 32);
    v38 = cstdlib_strlen("");
    log_OutTraceTuningDataBinary(v37, 272, (uint64_t)"", (uint64_t)"text/plain;charset=depes", (uint64_t)"", v38);
    log_OutTraceTuningDataBinary(*(_QWORD *)(*a1 + 32), 272, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      (uint64_t)__src,
      32 * v52);
    log_OutTraceTuningData(*(uint64_t ***)(*a1 + 32), 270, (uint64_t)"%s%s %s%u", v39, v40, v41, v42, v43, "END");
  }
  return v9;
}

uint64_t fe_prompt_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62338, 920) & 0x80000000) != 0)
    return 2342526984;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
}

uint64_t fe_prompt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2342526977;
  result = 0;
  *a2 = &IFePrompt;
  return result;
}

uint64_t fe_promptorth_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t Object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  if (!a5)
    return 2343575559;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(v21[6], (uint64_t)"LINGDB", &v20);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(v21[6], (uint64_t)"DOMAINMNGR", &v19);
  v8 = v21[6];
  if ((Object & 0x80000000) != 0)
  {
    v16 = "LINGDB";
LABEL_12:
    objc_ReleaseObject(v8, (uint64_t)v16);
    return Object;
  }
  Object = objc_GetObject(v8, (uint64_t)"FE_DEPES", &v18);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v21[6], (uint64_t)"LINGDB");
    v8 = v21[6];
    v16 = "DOMAINMNGR";
    goto LABEL_12;
  }
  v9 = heap_Alloc(v21[1], 64);
  if (v9)
  {
    *(_QWORD *)v9 = v21;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v20 + 8);
    v14 = v19;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v19 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v14 + 16);
    v15 = v18;
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(v18 + 8);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v15 + 16);
    *(_QWORD *)a5 = v9;
    *(_DWORD *)(a5 + 8) = 62339;
  }
  else
  {
    log_OutPublic(v21[4], (uint64_t)"FE_PROMPTORTH", 45000, 0, v10, v11, v12, v13, v18);
    objc_ReleaseObject(v21[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v21[6], (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(v21[6], (uint64_t)"FE_DEPES");
    return 2343575562;
  }
  return Object;
}

uint64_t fe_promptorth_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62339, 64);
  if ((result & 0x80000000) != 0)
    return 2343575560;
  if (a1)
  {
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"DOMAINMNGR");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_promptorth_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 64);
  if ((int)result >= 0)
    return result;
  else
    return 2343575560;
}

uint64_t fe_promptorth_ProcessStart(_QWORD *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1[2] + 56))(a1[3], a1[4]);
}

uint64_t fe_promptorth_Process(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *);
  uint64_t v30;
  __int16 v31;
  unsigned int v33;
  int v34;
  __int16 v35;
  int v36;
  _DWORD *v37;
  void *__src;
  __int16 v39;
  unsigned __int16 v40;
  unsigned __int16 v41;
  char *__s1;
  char *__s;

  __s1 = 0;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  __s = 0;
  v41 = 0;
  __src = 0;
  *a5 = 1;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a1[1] + 104))(a3, a4, 1, 0, &v41);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_26;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a1[1] + 184))(a3, a4, v41, 0, &v36);
  v11 = a1[1];
  if (v10 < 0 || (unsigned __int16)v36 != 1)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(v11 + 184))(a3, a4, v41, 1, &v36);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, unsigned __int16 *))(v11 + 176))(a3, a4, v41, 0, &__s, &v40);
    if ((v9 & 0x80000000) != 0)
      return v9;
    if (v40 > 1u)
      goto LABEL_13;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1[1] + 184))(a3, a4, v41, 1, &v36);
  }
  if (v12 < 0 || (unsigned __int16)v36 != 1)
    return v9;
  __s = "";
LABEL_13:
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a1[1] + 176))(a3, a4, v41, 1, &__src, &v40);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v40;
    HIWORD(v36) = v40;
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = cstdlib_strlen(__s);
    v17 = (char *)heap_Alloc(v15, (v16 + 1));
    __s1 = v17;
    if (v17)
    {
      v22 = (uint64_t)v17;
      cstdlib_strcpy(v17, __s);
      v23 = 32 * v14;
      v24 = (_DWORD *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, v23);
      v37 = v24;
      if (v24)
      {
        cstdlib_memcpy(v24, __src, v23);
        v13 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _DWORD **, char *, uint64_t, uint64_t, __int16 *))(a1[2] + 120))(a1[3], a1[4], &__s1, &v37, (char *)&v36 + 2, a3, a4, &v35);
        if ((v13 & 0x80000000) == 0)
        {
          if (!__s1
            || !cstdlib_strcmp(__s1, "")
            || (v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *))(a1[1] + 160),
                v30 = v41,
                v31 = cstdlib_strlen(__s1),
                v13 = v29(a3, a4, v30, 0, (unsigned __int16)(v31 + 1), __s1, &v39),
                (v13 & 0x80000000) == 0))
          {
            if (!v37
              || !HIWORD(v36)
              || (v37[4] += v35,
                  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1[1] + 160))(a3, a4, v41, 1),
                  (v13 & 0x80000000) == 0))
            {
              v13 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(a1[5] + 112))(a1[6], a1[7], &v34, 0);
              if ((v13 & 0x80000000) == 0)
              {
                v34 += v35;
                v13 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 104))(a1[6], a1[7]);
              }
            }
          }
        }
        goto LABEL_25;
      }
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPTORTH", 45000, 0, v25, v26, v27, v28, v33);
      heap_Free(*(_QWORD **)(*a1 + 8), v22);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*a1 + 32), (uint64_t)"FE_PROMPTORTH", 45000, 0, v18, v19, v20, v21, v33);
    }
    return 2343575562;
  }
LABEL_25:
  v9 = v13;
LABEL_26:
  if (__s1)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__s1);
  __s1 = 0;
  if (v37)
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v37);
  return v9;
}

uint64_t fe_promptorth_ProcessEnd(_QWORD *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1[2] + 64))(a1[3], a1[4]);
}

uint64_t fe_promptorth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2343575553;
  result = 0;
  *a2 = &IFePromptorth;
  return result;
}

uint64_t fe_promptorth_ResourceTypes(_QWORD *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1[2] + 144))(a1[3], a1[4], a3);
}

uint64_t fe_promptorth_ResourceLoad(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[2] + 152))(a1[3], a1[4], a3, a4, a5, a6, a7);
}

uint64_t fe_promptorth_ResourceUnload(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 160))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptorth_ResourceEnable(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 168))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptorth_ResourceDisable(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 64) & 0x80000000) != 0)
    return 2343575560;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1[2] + 176))(a1[3], a1[4], a3, a4);
}

uint64_t fe_promptoriorth_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v5 = 2357207047;
  v18 = 0;
  v19 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v21);
    if ((inited & 0x80000000) != 0)
      return inited;
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 952);
    if (!v8)
    {
      log_OutPublic(*(_QWORD *)(v21 + 32), (uint64_t)"FE_PROMPTORIORTH", 57000, 0, v9, v10, v11, v12, v18);
      return 2357207050;
    }
    v13 = v8;
    *v8 = v21;
    Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
    if ((Object & 0x80000000) != 0
      || (Object = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"DOMAINMNGR", &v19), (Object & 0x80000000) != 0))
    {
      v5 = Object;
    }
    else
    {
      v5 = objc_GetObject(*(_QWORD *)(v21 + 48), (uint64_t)"FE_DEPES", &v18);
      if ((v5 & 0x80000000) == 0)
      {
        v13[1] = *(_QWORD *)(v20 + 8);
        v15 = v19;
        v13[2] = *(_QWORD *)(v19 + 8);
        *(_OWORD *)(v13 + 3) = *(_OWORD *)(v15 + 16);
        v16 = v18;
        v13[7] = *(_QWORD *)(v18 + 8);
        *(_OWORD *)(v13 + 5) = *(_OWORD *)(v16 + 16);
        *(_QWORD *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 62500;
        return v5;
      }
    }
    *(_QWORD *)a5 = v13;
    *(_DWORD *)(a5 + 8) = 62500;
    fe_promptoriorth_ObjClose(v13, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v5;
}

uint64_t fe_promptoriorth_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62500, 952);
  if ((result & 0x80000000) != 0)
    return 2357207048;
  if (a1)
  {
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[2])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"DOMAINMNGR");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_promptoriorth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPTORIORTH");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 8), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
  return v7;
}

uint64_t fe_promptoriorth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t (*v20)(_QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  void *v29;
  _DWORD __n[3];
  void *__src;
  int v32;
  uint64_t v33;

  v33 = 0;
  v7 = 2357207050;
  v32 = 0;
  __src = 0;
  memset(__n, 0, sizeof(__n));
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v26 = 0;
  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  *a5 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), (char *)&v33 + 4, &v32);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, int *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v33, &v32);
    if ((result & 0x80000000) == 0)
    {
      if (!v33)
      {
        if (v32 == 1)
          return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
        *a5 = 0;
        return result;
      }
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _DWORD *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), &__src, __n);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_22;
      v10 = (_BYTE *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), (__n[0] + 1));
      *(_QWORD *)&__n[1] = v10;
      if (v10)
      {
        v15 = v10;
        if (__src)
          cstdlib_memcpy(v10, __src, __n[0]);
        v15[__n[0]] = 0;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD, void **, char *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &v29, (char *)&v27 + 4);
        if ((v9 & 0x80000000) != 0)
          goto LABEL_22;
        v16 = HIDWORD(v27);
        LODWORD(v27) = HIDWORD(v27) >> 5;
        HIDWORD(v27) >>= 5;
        v17 = (_DWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v16 & 0xFFFFFFE0);
        v28 = v17;
        if (v17)
        {
          cstdlib_memcpy(v17, v29, 32 * HIDWORD(v27));
          v9 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(a1 + 56) + 112))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v26, 0);
          if ((v9 & 0x80000000) == 0)
          {
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD *, _DWORD **, uint64_t *))(*(_QWORD *)(a1 + 16) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &__n[1], &v28, &v27);
            if ((v9 & 0x80000000) == 0)
            {
              v18 = v28[4];
              v19 = cstdlib_strlen(*(const char **)&__n[1]);
              v28[4] = v18 + v19 - __n[0] + 1;
              if (!cstdlib_strlen(*(const char **)&__n[1])
                || (v20 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 104),
                    v21 = *(_QWORD *)&__n[1],
                    v22 = cstdlib_strlen(*(const char **)&__n[1]),
                    v9 = v20(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 928), v21, (v22 + 1)),
                    (v9 & 0x80000000) == 0))
              {
                v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), __n[0]);
                if ((v9 & 0x80000000) == 0)
                {
                  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _DWORD *, _QWORD))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), v28, (32 * v27));
                  if ((v9 & 0x80000000) == 0)
                  {
                    v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), (32 * HIDWORD(v27)));
                    if ((v9 & 0x80000000) == 0)
                    {
                      v23 = v26;
                      v24 = cstdlib_strlen(*(const char **)&__n[1]);
                      v26 = v23 + v24 - __n[0] + 1;
                      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 104))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
                    }
                  }
                }
              }
            }
          }
LABEL_22:
          v7 = v9;
LABEL_25:
          if (*(_QWORD *)&__n[1])
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(uint64_t *)&__n[1]);
          if (v28)
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v28);
          return v7;
        }
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_PROMPTORIORTH", 57000, 0, v11, v12, v13, v14, v25);
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t fe_promptoriorth_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62500, 952) & 0x80000000) != 0)
    return 2357207048;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 8));
}

uint64_t fe_promptoriorth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2357207041;
  result = 0;
  *a2 = &IFePromptoriorth;
  return result;
}

uint64_t fe_voice_switch_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t Str;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v32;
  _QWORD *v33;
  __int128 v34;
  char *__s;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  v5 = 2372935687;
  __s = 0;
  v36 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v38);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v38 + 8), 1, 1048);
      if (v8)
      {
        v13 = v8;
        *v8 = v38;
        Object = objc_GetObject(*(_QWORD *)(v38 + 48), (uint64_t)"SYNTHSTREAM", &v37);
        if ((Object & 0x80000000) != 0)
        {
          v5 = Object;
LABEL_41:
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 8) = 0;
          return v5;
        }
        v13[1] = *(_QWORD *)(v37 + 8);
        if ((objc_GetObject(*(_QWORD *)(v38 + 48), (uint64_t)"COMPQUERY", &v37) & 0x80000000) != 0)
        {
          v13[4] = 0;
          v13[2] = safeh_GetNullHandle();
          v13[3] = v16;
        }
        else
        {
          v15 = v37;
          v13[4] = *(_QWORD *)(v37 + 8);
          *((_OWORD *)v13 + 1) = *(_OWORD *)(v15 + 16);
        }
        if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"mlset", &__s) & 0x80000000) != 0)
        {
          Str = paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"langcode", &__s);
          if ((Str & 0x80000000) != 0)
            goto LABEL_40;
        }
        v22 = __s;
        v13[130] = __s;
        if ((int)cstdlib_strlen(v22) >= 1)
        {
          v23 = 0;
          do
          {
            *(_BYTE *)(v13[130] + (unsigned __int16)v23) = cstdlib_tolower(*(unsigned __int8 *)(v13[130]
                                                                                              + (unsigned __int16)v23));
            ++v23;
          }
          while ((int)cstdlib_strlen((const char *)v13[130]) > (unsigned __int16)v23);
        }
        *((_DWORD *)v13 + 233) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidvoiceswitch", &v36) & 0x80000000) == 0)
        {
          if (LH_stricmp(v36, "yes"))
          {
            if (LH_stricmp(v36, "no"))
              goto LABEL_22;
            v24 = 1;
          }
          else
          {
            v24 = 0;
          }
          *((_DWORD *)v13 + 233) = v24;
        }
LABEL_22:
        v25 = *(_QWORD *)(v38 + 40);
        v33 = v13;
        v32 = 349065012;
        v34 = xmmword_24D293958;
        Str = paramc_ListenerAdd(v25, "lidvoiceswitch", &v33);
        if ((Str & 0x80000000) == 0)
        {
          *((_DWORD *)v13 + 232) = 0;
          if ((paramc_ParamGetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidscope", &v36) & 0x80000000) == 0)
          {
            if (LH_stricmp(v36, "none"))
            {
              if (LH_stricmp(v36, "user-defined"))
              {
                if (LH_stricmp(v36, "message"))
                  goto LABEL_38;
                v26 = 2;
              }
              else
              {
                v26 = 1;
              }
            }
            else
            {
              v26 = 0;
            }
            *((_DWORD *)v13 + 232) = v26;
LABEL_38:
            v30 = *(_QWORD *)(v38 + 40);
            v33 = v13;
            v34 = xmmword_24D293958;
            Str = paramc_ListenerAdd(v30, "lidscope", &v33);
            if ((Str & 0x80000000) == 0)
            {
              v5 = 0;
              *(_QWORD *)a5 = v13;
              *(_DWORD *)(a5 + 8) = 62466;
              return v5;
            }
            goto LABEL_40;
          }
          v27 = *((_DWORD *)v13 + 232);
          v28 = "message";
          if (v27 == 1)
            v28 = "user-defined";
          if (v27)
            v29 = (char *)v28;
          else
            v29 = "none";
          Str = paramc_ParamSetStr(*(_QWORD *)(v38 + 40), (uint64_t)"lidscope", v29);
          if ((Str & 0x80000000) == 0)
            goto LABEL_38;
        }
LABEL_40:
        v5 = Str;
        log_OutPublic(*(_QWORD *)(*v13 + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v32);
        goto LABEL_41;
      }
      log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"FE_LID", 48000, 0, v9, v10, v11, v12, v32);
      return 2372935690;
    }
  }
  return v5;
}

uint64_t fe_lid_ParamCheckChange_0(int a1, char *__s1, char *a3, _BOOL4 *a4)
{
  uint64_t result;
  char *v8;
  int v9;
  _BOOL4 v10;

  if (cstdlib_strcmp(__s1, "lidscope"))
  {
    result = cstdlib_strcmp(__s1, "lidmode");
    if (!(_DWORD)result)
    {
LABEL_13:
      v10 = 1;
      goto LABEL_14;
    }
    if (cstdlib_strcmp(__s1, "lidvoiceswitch"))
    {
      result = 0;
      goto LABEL_13;
    }
    result = LH_stricmp(a3, "yes");
    if (!(_DWORD)result)
      goto LABEL_13;
    v8 = "no";
  }
  else
  {
    result = LH_stricmp(a3, "none");
    if (!(_DWORD)result)
      goto LABEL_13;
    result = LH_stricmp(a3, "user-defined");
    if (!(_DWORD)result)
      goto LABEL_13;
    v8 = "message";
  }
  v9 = LH_stricmp(a3, v8);
  v10 = v9 == 0;
  if (v9)
    result = 2372935695;
  else
    result = 0;
LABEL_14:
  *a4 = v10;
  return result;
}

uint64_t fe_lid_ParamLearnChange_0(uint64_t a1, char *__s1, char *a3)
{
  uint64_t result;
  int v7;

  if (cstdlib_strcmp(__s1, "lidscope"))
  {
    result = cstdlib_strcmp(__s1, "lidmode");
    if (!(_DWORD)result)
      return result;
    if (cstdlib_strcmp(__s1, "lidvoiceswitch"))
      return 0;
    result = LH_stricmp(a3, "yes");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "no");
      if ((_DWORD)result)
        return 2372935695;
      *(_DWORD *)(a1 + 932) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 932) = 0;
    }
  }
  else
  {
    result = LH_stricmp(a3, "none");
    if ((_DWORD)result)
    {
      result = LH_stricmp(a3, "user-defined");
      if ((_DWORD)result)
      {
        result = LH_stricmp(a3, "message");
        if ((_DWORD)result)
          return 2372935695;
        v7 = 2;
      }
      else
      {
        v7 = 1;
      }
      *(_DWORD *)(a1 + 928) = v7;
    }
    else
    {
      *(_DWORD *)(a1 + 928) = 0;
    }
  }
  return result;
}

uint64_t fe_voice_switch_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62466, 1048);
  if ((result & 0x80000000) != 0)
    return 2372935688;
  if (a1)
  {
    hlp_TrackStartMsgMarkers((uint64_t)a1, 1, 0, 0);
    if (a1[1])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[4])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"COMPQUERY");
    v4 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_24D293958;
    paramc_ListenerRemove(v4, "lidscope", (__int128 *)&v7);
    v5 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_24D293958;
    paramc_ListenerRemove(v5, "lidmode", (__int128 *)&v7);
    v6 = *(_QWORD *)(*a1 + 40);
    v7 = a1;
    v8 = xmmword_24D293958;
    paramc_ListenerRemove(v6, "lidvoiceswitch", (__int128 *)&v7);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_TrackStartMsgMarkers(uint64_t a1, int a2, int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;

  if (a2)
  {
    if (*(_DWORD *)(a1 + 1000) == 21)
    {
      v7 = *(_QWORD *)(a1 + 1024);
      if (v7)
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v7);
    }
    cstdlib_memset((void *)(a1 + 936), 0, 0x60uLL);
  }
  if (!a3)
    return 0;
  if (*(_DWORD *)(a1 + 928) != 1 || a4 == 0)
    return 0;
  v9 = a4;
  while (1)
  {
    v10 = *a3;
    if (*a3 != 31)
      break;
    v12 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 968) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 984) = v12;
LABEL_23:
    a3 += 8;
    if (!--v9)
      return 0;
  }
  if (v10 != 21)
  {
    if (v10 == 7)
    {
      v11 = *((_OWORD *)a3 + 1);
      *(_OWORD *)(a1 + 936) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 952) = v11;
    }
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(a1 + 1024);
  if (v13)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v13);
  if (!cstdlib_strcmp(*((const char **)a3 + 3), "normal"))
  {
    cstdlib_memset((void *)(a1 + 1000), 0, 0x20uLL);
    goto LABEL_23;
  }
  v14 = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 1016) = v14;
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v16 = cstdlib_strlen(*((const char **)a3 + 3));
  v17 = (char *)heap_Alloc(v15, (v16 + 1));
  *(_QWORD *)(a1 + 1024) = v17;
  if (v17)
  {
    cstdlib_strcpy(v17, *((const char **)a3 + 3));
    goto LABEL_23;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v23);
  return 2372935690;
}

uint64_t fe_voice_switch_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v10;
  char *v11;

  v10 = 0;
  v11 = 0;
  v7 = safeh_HandleCheck(a1, a2, 62466, 1048);
  if ((v7 & 0x80000000) != 0)
    return 2372935688;
  v8 = v7;
  synstrmaux_InitStreamOpener(a1 + 40, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_LID");
  if (*(_DWORD *)(a1 + 928))
  {
    synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 864);
    synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      0,
      a1 + 880);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", a1 + 896);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      a1 + 912);
    v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 8), a3, a4);
    if ((v8 & 0x80000000) != 0)
    {
      synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &v11) & 0x80000000) != 0
         || !v11
         || !*v11)
        && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v11) & 0x80000000) == 0
        && v11
        && *v11)
      {
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", v11);
      }
      if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", &v10) & 0x80000000) == 0
        && v10
        && *v10)
      {
        *(_DWORD *)(a1 + 1032) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 1032) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v11) & 0x80000000) == 0
          && v11
          && *v11)
        {
          paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", v11);
        }
      }
    }
  }
  return v8;
}

uint64_t fe_voice_switch_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t BestVoiceForLidLang;
  uint64_t v10;
  uint64_t Object;
  uint64_t v12;
  int v13;
  uint64_t InputOutputMarkers_0;
  unsigned int v15;
  int v16;
  _DWORD *v17;
  unsigned __int16 v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  char *v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  int v28;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const char *v49;
  unsigned __int16 v50;
  unsigned int v51;
  int v53;
  unsigned __int16 v54;
  int v55;
  unsigned int v56;
  _BOOL4 v57;
  int *v58;
  uint64_t v59;
  _QWORD *v60;
  char *__s1;
  char *__src;
  char *v63;
  int v64;
  uint64_t v65;
  void *v66;
  int *v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE v70[12];
  char __dst[1024];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  memset(v70, 0, sizeof(v70));
  v69 = 0;
  v68 = 0;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v64 = 0;
  __src = 0;
  v63 = 0;
  __s1 = 0;
  bzero(__dst, 0x400uLL);
  v8 = safeh_HandleCheck(a1, a2, 62466, 1048);
  if ((v8 & 0x80000000) != 0)
    return 2372935688;
  BestVoiceForLidLang = v8;
  *a5 = 1;
  v10 = *(_QWORD *)(a1 + 864);
  if (v10)
  {
    Object = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 8) + 144))(v10, *(_QWORD *)(a1 + 872), &v70[8], v70);
    if ((Object & 0x80000000) != 0)
      return Object;
    BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, _BYTE *))(*(_QWORD *)(a1 + 8) + 144))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), &v70[4], v70);
    if ((BestVoiceForLidLang & 0x80000000) != 0)
      return BestVoiceForLidLang;
    if (!*(_DWORD *)&v70[8])
    {
      v13 = *(_DWORD *)v70;
      if (!*(_QWORD *)v70)
      {
        *a5 = 0;
        return BestVoiceForLidLang;
      }
      if (*(_DWORD *)&v70[4])
      {
        InputOutputMarkers_0 = hlp_GetInputOutputMarkers_0((_QWORD *)a1, (const void **)&v67, &v66, (int *)&v65 + 1, (int *)&v65);
        if ((InputOutputMarkers_0 & 0x80000000) != 0)
        {
LABEL_156:
          BestVoiceForLidLang = InputOutputMarkers_0;
          goto LABEL_157;
        }
        BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), (32 * v65));
        v66 = 0;
        if ((BestVoiceForLidLang & 0x80000000) != 0)
          return BestVoiceForLidLang;
        if (HIDWORD(v65))
        {
          BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (32 * HIDWORD(v65)));
          if ((BestVoiceForLidLang & 0x80000000) != 0)
            goto LABEL_157;
        }
        v13 = *(_DWORD *)v70;
      }
      if (!v13)
        return BestVoiceForLidLang;
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
    }
    Object = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, unsigned int *))(*(_QWORD *)(a1 + 8) + 88))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), &v69, &v68);
    if ((Object & 0x80000000) != 0)
      return Object;
    v12 = v68;
    BestVoiceForLidLang = hlp_GetInputOutputMarkers_0((_QWORD *)a1, (const void **)&v67, &v66, (int *)&v65 + 1, (int *)&v65);
    if ((BestVoiceForLidLang & 0x80000000) != 0)
      goto LABEL_157;
    if (*(_DWORD *)v66 == 0x4000)
      v64 = *((_DWORD *)v66 + 3);
    else
      (*(void (**)(_QWORD, _QWORD, int *))(*(_QWORD *)(a1 + 8) + 136))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872), &v64);
    v15 = v65;
    if (v65 >= 2)
    {
      v16 = 1;
      v17 = v66;
      v18 = 1;
      do
      {
        if (v17[8 * v18] == 36)
        {
          v19 = &v17[8 * v16 - 8];
          if (*v19 == 36 && v17[8 * v18 + 3] == v19[3])
            *v19 = 0x4000;
        }
        v16 = ++v18;
      }
      while (v15 > v18);
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", &__s1) & 0x80000000) == 0
      && __s1
      && *__s1)
    {
      v20 = cstdlib_strcmp(__s1, "__NUAN_LID_voiceswitch");
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      if (v20)
      {
        v22 = __s1;
LABEL_110:
        v48 = paramc_ParamSetStr(v21, (uint64_t)"pipelineswitchvoice", v22);
        if ((v48 & 0x80000000) != 0)
        {
LABEL_131:
          BestVoiceForLidLang = v48;
        }
        else
        {
          BestVoiceForLidLang = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidstate", "__NUAN_LID_voiceswitch");
          if ((BestVoiceForLidLang & 0x80000000) == 0)
          {
            *a5 = 3;
            v68 = 0;
            HIDWORD(v65) = 0;
            goto LABEL_157;
          }
        }
LABEL_132:
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_LID", 48000, 0, v38, v39, v40, v41, v60);
LABEL_157:
        if (v66)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), 0);
        return BestVoiceForLidLang;
      }
      BestVoiceForLidLang = paramc_ParamRemove(v21, (uint64_t)"lidstate");
      if ((BestVoiceForLidLang & 0x80000000) != 0)
        goto LABEL_157;
      if (*(_DWORD *)(a1 + 928) == 1 && v15)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (1)
        {
          v46 = v45;
          if (*((_DWORD *)v66 + 8 * v45) == 36)
          {
            v47 = cstdlib_strncmp((const char *)(*((_QWORD *)v66 + 4 * v45 + 3) + 3), "_lid", 3uLL);
            if (v44)
            {
              if (!v47
                || !cstdlib_strncmp((const char *)(*((_QWORD *)v66 + 4 * v46 + 3) + 3), "_vli", 3uLL)
                || !cstdlib_strcmp(*((const char **)v66 + 4 * v46 + 3), "normal"))
              {
                v12 = (*((_DWORD *)v66 + 8 * v46 + 3) - v64);
                v68 = *((_DWORD *)v66 + 8 * v46 + 3) - v64;
                LODWORD(v65) = v43;
                *a5 = 2;
                v15 = v43;
                goto LABEL_119;
              }
            }
            else
            {
              v44 = !v47 || !cstdlib_strncmp((const char *)(*((_QWORD *)v66 + 4 * v46 + 3) + 3), "_vli", 3uLL);
            }
            ++v44;
          }
          v45 = v46 + 1;
          v43 = (unsigned __int16)(v46 + 1);
          if (v15 <= v43)
            goto LABEL_119;
        }
      }
      goto LABEL_119;
    }
    if (*(_DWORD *)(a1 + 928) == 2)
    {
      if (v15)
      {
        v23 = 0;
        while (*((_DWORD *)v66 + 8 * v23) != 36)
        {
          if (v15 <= ++v23)
            goto LABEL_108;
        }
        BestVoiceForLidLang = hlp_FindBestVoiceForLidLang((_QWORD *)a1, *(_DWORD *)(a1 + 932) == 0, *((_QWORD *)v66 + 4 * v23 + 3), __dst);
        if ((BestVoiceForLidLang & 0x80000000) != 0)
          goto LABEL_157;
      }
LABEL_108:
      if (!cstdlib_strcmp(__dst, ""))
        goto LABEL_119;
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      v22 = __dst;
      goto LABEL_110;
    }
    if (!v15)
    {
LABEL_118:
      LODWORD(v65) = v15;
LABEL_119:
      if (!(_DWORD)v12)
        goto LABEL_122;
      v60 = 0;
      Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT", &v60);
      if ((Object & 0x80000000) == 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v60[1] + 72))(v60[2], v60[3], v69, v12);
        objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"CHARCOUNT");
        BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 104))(*(_QWORD *)(a1 + 896), *(_QWORD *)(a1 + 904), v69, v12);
        if ((BestVoiceForLidLang & 0x80000000) != 0)
          goto LABEL_157;
LABEL_122:
        if (!v15)
        {
          v53 = 0;
LABEL_148:
          if (v68)
          {
            BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 864), *(_QWORD *)(a1 + 872));
            if ((BestVoiceForLidLang & 0x80000000) != 0)
              goto LABEL_157;
          }
          v56 = HIDWORD(v65);
          if (!HIDWORD(v65))
            goto LABEL_157;
          if (*a5 == 2)
          {
            v57 = v53 == 0;
            v58 = v67;
            v59 = a1;
          }
          else
          {
            v59 = a1;
            v57 = 1;
            v58 = 0;
            v56 = 0;
          }
          BestVoiceForLidLang = hlp_TrackStartMsgMarkers(v59, v57, v58, v56);
          if ((BestVoiceForLidLang & 0x80000000) != 0)
            goto LABEL_157;
          InputOutputMarkers_0 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 96))(*(_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 888), (32 * HIDWORD(v65)));
          goto LABEL_156;
        }
        if (*a5 == 2)
        {
          if (*((_DWORD *)v66 + 3) - v64 >= v12)
          {
            v51 = 0;
          }
          else
          {
            v50 = 0;
            do
              v51 = ++v50;
            while (v15 > v50 && *((_DWORD *)v66 + 8 * v50 + 3) - v64 < v12);
          }
          LODWORD(v65) = v51;
          if (HIDWORD(v65) && v67[3] - v64 < v68)
          {
            v54 = 0;
            do
              v55 = ++v54;
            while (HIDWORD(v65) > v54 && v67[8 * v54 + 3] - v64 < v68);
          }
          else
          {
            v55 = 0;
          }
          HIDWORD(v65) = v55;
          if (!v51)
            goto LABEL_146;
        }
        else
        {
          v51 = v15;
        }
        if (*(_DWORD *)v66 == 0x4000)
        {
          v53 = 0;
          *((_DWORD *)v66 + 4) = v12;
          goto LABEL_147;
        }
LABEL_146:
        hlp_AddStartMsgMarkers((_QWORD *)a1, (char *)v66, (int *)&v65, v12);
        v53 = 1;
        v51 = v65;
LABEL_147:
        BestVoiceForLidLang = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 120))(*(_QWORD *)(a1 + 912), *(_QWORD *)(a1 + 920), 32 * v51);
        v66 = 0;
        if ((BestVoiceForLidLang & 0x80000000) != 0)
          return BestVoiceForLidLang;
        goto LABEL_148;
      }
      return Object;
    }
    v24 = 0;
    while (1)
    {
      if (*a5 != 1)
        goto LABEL_118;
      if (*((_DWORD *)v66 + 8 * v24) == 36)
      {
        if (cstdlib_strcmp(*((const char **)v66 + 4 * v24 + 3), "normal"))
        {
          if (*((_DWORD *)v66 + 8 * v24) == 36
            && cstdlib_strcmp(*((const char **)v66 + 4 * v24 + 3), "unknown")
            && cstdlib_strncmp(*((const char **)v66 + 4 * v24 + 3), "vceunkn", 7uLL)
            && cstdlib_strcmp(*((const char **)v66 + 4 * v24 + 3), "normal"))
          {
            v25 = *((_DWORD *)v66 + 8 * v24 + 3);
            v26 = v12 - v25 + v64;
            v27 = v24;
            while (v15 > ++v27)
            {
              v28 = *((_DWORD *)v66 + 8 * v27);
              if (v28 == 36 || v28 == 7)
              {
                v26 = *((_DWORD *)v66 + 8 * v27 + 3) - v25;
                break;
              }
            }
            if (v26)
            {
              v30 = *(_DWORD *)(a1 + 932);
              v31 = (char *)v66 + 32 * v24;
              v32 = *((_QWORD *)v31 + 3);
              if (v32)
                v33 = cstdlib_strstr(*((char **)v31 + 3), "_vli");
              else
                v33 = 0;
              if (v33)
                v36 = 1;
              else
                v36 = v30 == 0;
              v37 = v36;
              BestVoiceForLidLang = hlp_FindBestVoiceForLidLang((_QWORD *)a1, v37, v32, __dst);
              if ((BestVoiceForLidLang & 0x80000000) != 0)
                goto LABEL_157;
              if (v37
                && !cstdlib_strcmp(__dst, "")
                && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &__src) & 0x80000000) == 0
                && __src
                && *__src)
              {
                cstdlib_strcpy(__dst, __src);
              }
              if (cstdlib_strcmp(__dst, ""))
              {
                v34 = *(_QWORD *)(*(_QWORD *)a1 + 40);
                if (*((_DWORD *)v66 + 8 * v24 + 3) == v64)
                {
                  v48 = paramc_ParamSetStr(v34, (uint64_t)"pipelineswitchvoice", __dst);
                  if ((v48 & 0x80000000) != 0)
                    goto LABEL_131;
                  v34 = *(_QWORD *)(*(_QWORD *)a1 + 40);
                  v49 = "lidstate";
                  v35 = "__NUAN_LID_voiceswitch";
                  goto LABEL_116;
                }
                v35 = __dst;
LABEL_82:
                BestVoiceForLidLang = paramc_ParamSetStr(v34, (uint64_t)"lidstate", v35);
                if ((BestVoiceForLidLang & 0x80000000) != 0)
                  goto LABEL_132;
                *a5 = 2;
                v42 = *((_DWORD *)v66 + 8 * v24 + 3);
                v12 = (v42 - v64);
                v68 = v42 - v64;
              }
            }
          }
        }
        else if (*(_DWORD *)(a1 + 1032)
               && (paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidoriginalvoice", &__src) & 0x80000000) == 0
               && __src
               && *__src
               && ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voice", &v63) & 0x80000000) != 0
                || !v63
                || LH_stricmp(v63, __src)))
        {
          v34 = *(_QWORD *)(*(_QWORD *)a1 + 40);
          v35 = __src;
          if (*((_DWORD *)v66 + 8 * v24 + 3) == v64)
          {
            v49 = "pipelineswitchvoice";
LABEL_116:
            BestVoiceForLidLang = paramc_ParamSetStr(v34, (uint64_t)v49, v35);
            if ((BestVoiceForLidLang & 0x80000000) != 0)
              goto LABEL_132;
            v15 = 0;
            v12 = 0;
            *a5 = 3;
            v68 = 0;
            HIDWORD(v65) = 0;
            goto LABEL_118;
          }
          goto LABEL_82;
        }
      }
      if (v15 <= ++v24)
        goto LABEL_118;
    }
  }
  return BestVoiceForLidLang;
}

uint64_t hlp_GetInputOutputMarkers_0(_QWORD *a1, const void **a2, void **a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a5 = 0;
  *a4 = 0;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, const void **))(a1[1] + 88))(a1[110], a1[111], a2);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = *a4;
  *a4 = *a4 >> 5;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD))(a1[1] + 112))(a1[114], a1[115], a3, (v11 & 0xFFFFFFE0) + 64);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *a4;
    if ((_DWORD)v13)
    {
      cstdlib_memcpy(*a3, *a2, 32 * v13);
      *a5 = *a4;
    }
  }
  return v12;
}

uint64_t hlp_FindBestVoiceForLidLang(_QWORD *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t Str;
  char *v9;
  size_t v10;
  _BOOL4 v11;
  char *v12;
  uint64_t result;
  size_t v14;
  char *__src;
  _OWORD __b[4];
  _OWORD v17[15];
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  memset(__b, 0, sizeof(__b));
  __src = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*a1 + 40), (uint64_t)"lidoriginalvoice", &__src);
  if ((Str & 0x80000000) != 0)
    __src = 0;
  cstdlib_memset(__b, 0, 0x154uLL);
  if (a3)
  {
    v9 = cstdlib_strstr((char *)a3, "_vli");
    if (v9)
    {
      v10 = (size_t)&v9[cstdlib_strlen("_vli")];
      VoiceParamExtract(v10, "gender", (char *)&v17[6] + 8);
      VoiceParamExtract(v10, "age", (char *)&v18 + 4);
      VoiceParamExtract(v10, "model", (char *)&v17[7] + 12);
    }
    v11 = *(unsigned __int8 *)(a3 + 2) == 120;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v11 = 0;
    if (!a2)
    {
LABEL_13:
      cstdlib_strcpy(a4, "");
      return 0;
    }
  }
  if (!a1[4])
    goto LABEL_13;
  if (v11)
  {
    if (!a3)
      goto LABEL_17;
    v12 = (char *)&v19;
  }
  else
  {
    if (!a3)
      goto LABEL_17;
    v12 = (char *)v17;
  }
  cstdlib_strncpy(v12, (const char *)a3, 3uLL);
LABEL_17:
  if (__src)
    cstdlib_strcpy((char *)&v17[4] + 8, __src);
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, char *, uint64_t))(a1[4] + 136))(a1[2], a1[3], *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 40), __b, a4, 1024) & 0x80000000) != 0)
  {
    result = Str;
    if ((Str & 0x80000000) != 0)
      return result;
    goto LABEL_25;
  }
  v14 = cstdlib_strlen(a4);
  if (v14)
    result = 0;
  else
    result = Str;
  if ((Str & 0x80000000) == 0 && !v14)
  {
LABEL_25:
    cstdlib_strcpy((char *)&v17[4] + 8, "");
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, char *, uint64_t))(a1[4] + 136))(a1[2], a1[3], *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 40), __b, a4, 1024);
  }
  return result;
}

uint64_t hlp_AddStartMsgMarkers(_QWORD *a1, char *__src, int *a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;

  v8 = *a3;
  if ((_DWORD)v8)
  {
    cstdlib_memmove(__src + 32, __src, 32 * v8);
    v9 = *a3 + 1;
  }
  else
  {
    v9 = 1;
  }
  *a3 = v9;
  *(_QWORD *)__src = 0x4000;
  *((_DWORD *)__src + 2) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, char *))(a1[1] + 136))(a1[108], a1[109], __src + 12);
  *((_DWORD *)__src + 4) = 2 * a4;
  return result;
}

uint64_t fe_voice_switch_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62466, 1048) & 0x80000000) != 0)
    return 2372935688;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(_QWORD *)(a1 + 8));
}

uint64_t fe_voice_switch_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2372935681;
  result = 0;
  *a2 = &IFeVoiceSwitch;
  return result;
}

size_t VoiceParamExtract(size_t result, const char *a2, char *a3)
{
  const char *v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  char __dst[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  if (result)
  {
    v5 = (const char *)result;
    result = cstdlib_strlen((const char *)result);
    if (result <= 0x7F)
    {
      cstdlib_strcpy(__dst, v5);
      result = (size_t)strhelper_SafeStrtok((uint64_t)__dst, "{}();,", &v12);
      if (result)
      {
        v6 = (char *)result;
        while (1)
        {
          v7 = cstdlib_strchr(v6, 58);
          if (v7)
          {
            v8 = v7;
            v9 = cstdlib_strlen(a2);
            result = cstdlib_strncmp(v6, a2, v9);
            if (!(_DWORD)result)
              break;
          }
          result = (size_t)strhelper_SafeStrtok((uint64_t)__dst, "{}();,", &v12);
          v6 = (char *)result;
          if (!result)
            return result;
        }
        v11 = v8[1];
        v10 = v8 + 1;
        if (v11)
          return (size_t)cstdlib_strcpy(a3, v10);
      }
    }
  }
  return result;
}

uint64_t fxd_HighPassInputFilter(uint64_t result, _WORD *a2, int a3, int a4, __int16 *a5, __int16 *a6)
{
  __int16 *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  __int16 v14;

  if (a3 >= 1)
  {
    v9 = (__int16 *)result;
    v10 = 2 * a4;
    v11 = a3 + 1;
    do
    {
      v12 = v10 * *a6 + 0x8000;
      v13 = fxd_S16SatSubS16S16(*v9, *a5);
      result = fxd_S16SatAddS16S16(v13, v12 >> 16);
      v14 = *v9++;
      *a5 = v14;
      *a6 = result;
      *a2++ = result;
      --v11;
    }
    while (v11 > 1);
  }
  return result;
}

uint64_t fxd_HighPrecisionHighPassInputFilter(uint64_t result, _WORD *a2, int a3, int a4, int *a5, int *a6)
{
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (a3 >= 1)
  {
    v10 = (unsigned __int16 *)result;
    v11 = a3 + 1;
    while (1)
    {
      v12 = (__int16)*v10;
      v13 = *v10;
      if (v12 >= 32256)
        break;
      if ((__int16)v13 <= -32257)
      {
        v14 = -32256 - ((8356352 - v12) >> 7);
        goto LABEL_7;
      }
LABEL_8:
      v15 = fxd_S32ShMultRndS32S32(*a6, a4, 24);
      v16 = fxd_S32SatSubS32S32((__int16)*v10, *a5);
      result = fxd_S32SatAddS32S32(v16, v15);
      v17 = (__int16)*v10++;
      *a5 = v17;
      if ((int)result <= -32768)
        v18 = -32768;
      else
        v18 = result;
      if (v18 >= 0x7FFF)
        v18 = 0x7FFF;
      *a6 = v18;
      *a2++ = v18;
      if (--v11 <= 1)
        return result;
    }
    v14 = ((v13 + 8356353) >> 7) + 32255;
LABEL_7:
    *v10 = v14;
    goto LABEL_8;
  }
  return result;
}

__int16 *fxd_SynthesisFilter(__int16 *result, _WORD *a2, int a3, __int16 *a4, int *a5, int a6)
{
  int v6;
  int v7;
  unsigned int v8;
  __int16 *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;

  if (a3 >= 1)
  {
    do
    {
      v6 = *result++;
      v7 = v6 << 14;
      if (a6 < 1)
      {
        --a5;
      }
      else
      {
        v8 = a6 + 1;
        v9 = a4;
        v10 = a5;
        do
        {
          v12 = *v9++;
          v11 = v12;
          v13 = *v10++;
          v7 = v7 - 16 * v11 * (v13 >> 16) - (((unsigned __int16)v13 * v11) >> 12);
          --v8;
        }
        while (v8 > 1);
        a5 += (a6 - 1);
        v14 = a6 + 1;
        if (a6 >= 2)
        {
          do
          {
            *a5 = *(a5 - 1);
            --a5;
            --v14;
          }
          while (v14 > 2);
        }
      }
      v15 = (v7 + 0x2000) >> 14;
      if (v15 <= -32768)
        LOWORD(v15) = 0x8000;
      if (v7 > 536862719)
        LOWORD(v15) = 0x7FFF;
      *a2++ = v15;
      *a5 = v7;
      v16 = __OFSUB__(a3--, 1);
    }
    while (!((a3 < 0) ^ v16 | (a3 == 0)));
  }
  return result;
}

__int16 *fxd_FastSynthesisFilter(__int16 *result, _WORD *a2, int a3, char a4, __int16 *a5, unsigned int a6, char a7, uint64_t a8, char a9)
{
  int *v9;
  char v10;
  int v11;
  int v12;
  int v13;
  __int16 *v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a3)
  {
    v9 = (int *)(a8 + 4 * a6 - 4);
    v10 = a9 - a4;
    v11 = 1 << (a9 - a4 - 1);
    do
    {
      v12 = *result++;
      v13 = v12 << v10;
      if (a6)
      {
        v14 = a5;
        v15 = v9;
        v16 = a6;
        do
        {
          v18 = *v14++;
          v17 = v18;
          v19 = *v15--;
          v13 -= (((v19 >> 16) * v17) << (16 - a7)) + (((unsigned __int16)v19 * v17) >> a7);
          --v16;
        }
        while ((_WORD)v16);
        v9 = (int *)((char *)v9 + ((-4 * a6) | 0xFFFFFFFFFFFC0000));
      }
      v9 += a6 + 1;
      *v9 = v13;
      v20 = (v13 + v11) >> v10;
      if (v20 <= -32768)
        v20 = -32768;
      if (v20 >= 0x7FFF)
        LOWORD(v20) = 0x7FFF;
      *a2++ = v20;
      --a3;
    }
    while ((_WORD)a3);
  }
  return result;
}

__int16 *fxd_FastSynthesisFilterModuloBuffer(__int16 *result, _WORD *a2, int a3, char a4, __int16 *a5, int a6, char a7, uint64_t a8, char a9)
{
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  __int16 *v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  int v17;

  if (a3)
  {
    v9 = 0;
    v10 = a9 - a4;
    do
    {
      v11 = *result++;
      v12 = v11 << v10;
      if (a6)
      {
        v13 = a5;
        v14 = a6;
        do
        {
          v15 = *v13++;
          v12 -= (((*(int *)(a8 + 4 * v9) >> 16) * v15) << (16 - a7))
               + (((unsigned __int16)*(_DWORD *)(a8 + 4 * v9) * v15) >> a7);
          v9 = ((unsigned __int16)v9 + 1) % a6;
          --v14;
        }
        while ((_WORD)v14);
      }
      v16 = (a6 - 1 + (unsigned __int16)v9) % a6;
      v9 = v16;
      *(_DWORD *)(a8 + 4 * v16) = v12;
      v17 = (v12 + (1 << (a9 - a4 - 1))) >> v10;
      if (v17 <= -32768)
        v17 = -32768;
      if (v17 >= 0x7FFF)
        LOWORD(v17) = 0x7FFF;
      *a2++ = v17;
      --a3;
    }
    while ((_WORD)a3);
  }
  return result;
}

uint64_t fxd_HighPrecisionFastSynthesisFilter(uint64_t result, _WORD *a2, int a3, char a4, int *a5, unsigned int a6, __int16 a7, uint64_t a8, char a9)
{
  int v11;
  __int16 *v13;
  int *v14;
  char v15;
  int v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v25;
  uint64_t v26;

  if (a3)
  {
    v11 = a3;
    v13 = (__int16 *)result;
    v14 = (int *)(a8 + 4 * a6 - 4);
    v15 = a9 - a4;
    v26 = a6 + 1;
    v25 = 1 << (a9 - a4 - 1);
    do
    {
      v16 = *v13++;
      v17 = v16 << v15;
      if (a6)
      {
        v18 = a5;
        v19 = a6;
        do
        {
          v21 = *v14--;
          v20 = v21;
          v22 = *v18++;
          result = fxd_S32ShMultRndS32S32(v20, v22, a7);
          v17 -= result;
          --v19;
        }
        while ((_WORD)v19);
      }
      v14 += v26;
      *v14 = v17;
      v23 = (v17 + v25) >> v15;
      if (v23 <= -32768)
        v23 = -32768;
      if (v23 >= 0x7FFF)
        LOWORD(v23) = 0x7FFF;
      *a2++ = v23;
      --v11;
    }
    while ((_WORD)v11);
  }
  return result;
}

uint64_t fxd_LspSynthesisFilter(int a1, uint64_t a2, int a3, int *a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  __int16 *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  char v25;

  v7 = a3;
  v8 = a3 + 1;
  v9 = &a4[v8];
  v10 = a1 << a5;
  if (a3 < 1)
  {
    v17 = a4[a3];
    v18 = v9[a3];
  }
  else
  {
    v25 = a5;
    v11 = 0;
    v12 = (__int16 *)(a2 + 2);
    v13 = a4 + 1;
    v14 = v8;
    do
    {
      *v13 -= fxd_S32ShMultRndS32S16(*(v13 - 1), *(v12 - 1), 14);
      v15 = &v13[v14];
      v16 = v13[v14] - fxd_S32ShMultRndS32S16(v13[v14 - 1], *v12, 14);
      *v15 = v16;
      v10 += v16 + *v13;
      v13[1] += *(v13 - 1);
      v15[1] += *(v15 - 1);
      v11 += 2;
      v12 += 2;
      v13 += 2;
    }
    while (v11 < a3);
    v17 = a4[v7];
    v18 = v9[v7];
    if (a3 < 1)
    {
      a5 = v25;
    }
    else
    {
      v19 = a3;
      a5 = v25;
      do
      {
        v20 = v19 > 1;
        a4[v19] = a4[(v19 - 1)];
        v9[v19] = v9[(v19 - 1)];
        --v19;
      }
      while (v20);
    }
  }
  v21 = v17 + v10 - v18;
  v22 = -(v21 >> 1);
  *v9 = v22;
  *a4 = v22;
  v23 = (v21 + (1 << (a5 - 1))) >> a5;
  if (v23 <= -32768)
    v23 = -32768;
  if (v23 >= 0x7FFF)
    return 0x7FFFLL;
  else
    return v23;
}

uint64_t fxd_LspInverseSynthesisFilter(int a1, uint64_t a2, int a3, int *a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  __int16 *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  char v24;

  v7 = a3;
  v8 = a3 + 1;
  v9 = &a4[v8];
  v10 = a1 << a5;
  if (a3 < 1)
  {
    v17 = a4[a3];
    v18 = v9[a3];
  }
  else
  {
    v24 = a5;
    v11 = 0;
    v12 = (__int16 *)(a2 + 2);
    v13 = a4 + 1;
    v14 = v8;
    do
    {
      *v13 -= fxd_S32ShMultRndS32S16(*(v13 - 1), *(v12 - 1), 14);
      v15 = &v13[v14];
      v16 = v13[v14] - fxd_S32ShMultRndS32S16(v13[v14 - 1], *v12, 14);
      *v15 = v16;
      v10 += v16 + *v13;
      v13[1] += *(v13 - 1);
      v15[1] += *(v15 - 1);
      v11 += 2;
      v12 += 2;
      v13 += 2;
    }
    while (v11 < a3);
    v17 = a4[v7];
    v18 = v9[v7];
    if (a3 < 1)
    {
      a5 = v24;
    }
    else
    {
      v19 = a3;
      a5 = v24;
      do
      {
        v20 = v19 > 1;
        a4[v19] = a4[(v19 - 1)];
        v9[v19] = v9[(v19 - 1)];
        --v19;
      }
      while (v20);
    }
  }
  v21 = v17 + v10 - v18;
  *v9 = v21 >> 1;
  *a4 = v21 >> 1;
  v22 = (v21 + (1 << (a5 - 1))) >> a5;
  if (v22 <= -32768)
    v22 = -32768;
  if (v22 >= 0x7FFF)
    return 0x7FFFLL;
  else
    return v22;
}

__int16 *fxd_InverseSynthesisFilter(__int16 *result, _WORD *a2, int a3, __int16 *a4, int *a5, int a6)
{
  int v6;
  unsigned int v7;
  __int16 *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;

  if (a3 >= 1)
  {
    do
    {
      v6 = *result << 14;
      v7 = a6 + 1;
      v8 = a4;
      v9 = a5;
      v10 = v6;
      if (a6 < 1)
      {
        --a5;
        v10 = *result << 14;
      }
      else
      {
        do
        {
          v12 = *v8++;
          v11 = v12;
          v13 = *v9++;
          v10 += 16 * v11 * (v13 >> 16) + (((unsigned __int16)v13 * v11) >> 12);
          --v7;
        }
        while (v7 > 1);
        a5 += (a6 - 1);
        v14 = a6 + 1;
        if (a6 >= 2)
        {
          do
          {
            *a5 = *(a5 - 1);
            --a5;
            --v14;
          }
          while (v14 > 2);
        }
      }
      ++result;
      *a5 = v6;
      v15 = (v10 + 0x2000) >> 14;
      if (v15 <= -32768)
        LOWORD(v15) = 0x8000;
      if (v10 > 536862719)
        LOWORD(v15) = 0x7FFF;
      *a2++ = v15;
      v16 = __OFSUB__(a3--, 1);
    }
    while (!((a3 < 0) ^ v16 | (a3 == 0)));
  }
  return result;
}

__int16 *fxd_FastInverseSynthesisFilter(__int16 *result, _WORD *a2, int a3, char a4, __int16 *a5, unsigned int a6, char a7, uint64_t a8, char a9)
{
  _DWORD *v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  __int16 *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  if (a3)
  {
    v9 = (_DWORD *)(a8 + 4 * a6);
    v10 = a9 - a4;
    v11 = 1 << (a9 - a4 - 1);
    do
    {
      v12 = *result++;
      v13 = v12 << v10;
      *v9 = v12 << v10;
      if (a6)
      {
        v14 = v9 - 1;
        v15 = a5;
        v16 = a6;
        do
        {
          v18 = *v15++;
          v17 = v18;
          v19 = *v14--;
          v13 += (((v19 >> 16) * v17) << (16 - a7)) + (((unsigned __int16)v19 * v17) >> a7);
          --v16;
        }
        while ((_WORD)v16);
        v9 = (_DWORD *)((char *)v9 + ((-4 * a6) | 0xFFFFFFFFFFFC0000));
      }
      v9 = &v9[a6 + 1];
      v20 = (v13 + v11) >> v10;
      if (v20 <= -32768)
        v20 = -32768;
      if (v20 >= 0x7FFF)
        LOWORD(v20) = 0x7FFF;
      *a2++ = v20;
      --a3;
    }
    while ((_WORD)a3);
  }
  return result;
}

__int16 *fxd_FastIirFilter(__int16 *result, _WORD *a2, int a3, char a4, __int16 *a5, int a6, __int16 *a7, unsigned int a8, char a9, uint64_t a10, char a11)
{
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  int v15;
  __int16 *v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  __int16 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  if (a3)
  {
    v11 = a10 + 4 * a8 - 4;
    v12 = a11 - a4;
    v13 = 16 - a9;
    do
    {
      v14 = *result++;
      v15 = v14 << v12;
      if (a8)
      {
        v16 = a7;
        v17 = (int *)v11;
        v18 = a8;
        do
        {
          v20 = *v16++;
          v19 = v20;
          v21 = *v17--;
          v15 -= (((v21 >> 16) * v19) << v13) + (((unsigned __int16)v21 * v19) >> a9);
          --v18;
        }
        while ((_WORD)v18);
        v11 += (-4 * a8) | 0xFFFFFFFFFFFC0000;
      }
      v22 = (int *)(v11 + 4 * a8);
      *(_DWORD *)(v11 + 4 * (a8 + 1)) = v15;
      v23 = (((unsigned __int16)v15 * *a5) >> a9) + (((v15 >> 16) * *a5) << v13);
      if (a6)
      {
        v24 = a5 + 1;
        v25 = a6;
        do
        {
          v27 = *v24++;
          v26 = v27;
          v28 = *v22--;
          v23 += (((v28 >> 16) * v26) << v13) + (((unsigned __int16)v28 * v26) >> a9);
          --v25;
        }
        while ((_WORD)v25);
      }
      v11 = (uint64_t)&v22[a6 + 1];
      v29 = (v23 + (1 << (a11 - a4 - 1))) >> v12;
      if (v29 <= -32768)
        v29 = -32768;
      if (v29 >= 0x7FFF)
        LOWORD(v29) = 0x7FFF;
      *a2++ = v29;
      --a3;
    }
    while ((_WORD)a3);
  }
  return result;
}

uint64_t fxd_OptAllZeroFilter(uint64_t result, uint64_t a2, unsigned int a3, __int16 *a4, char a5, unsigned int a6)
{
  uint64_t v6;
  _WORD *v7;
  __int16 *v8;
  int v9;
  unsigned int v10;
  __int16 *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v16;

  if (a3)
  {
    v6 = 2 * a3 - 2;
    v7 = (_WORD *)(a2 + v6);
    v8 = (__int16 *)(result + v6);
    do
    {
      v9 = 0;
      v10 = 0;
      v11 = a4;
      do
      {
        v13 = *v8--;
        v12 = v13;
        v14 = *v11++;
        result = v14;
        v9 += (int)(2 * v12 * v14) >> 1;
      }
      while (v10++ < a6);
      v16 = (v9 + (1 << (a5 - 1))) >> a5;
      if (v16 <= -32768)
        v16 = -32768;
      if (v16 >= 0x7FFF)
        LOWORD(v16) = 0x7FFF;
      *v7-- = v16;
      v8 += a6;
      --a3;
    }
    while ((_WORD)a3);
  }
  return result;
}

uint64_t MakeStream(int *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4, _WORD *a5)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  int v13;

  v5 = (unsigned __int16)*a5;
  v6 = 8;
  if (*a5)
  {
    v6 = 8 - v5;
    v7 = *a2;
    if (a3)
    {
LABEL_3:
      v8 = 0;
      v9 = 0;
      v10 = *a4;
      v11 = *a1;
      while (1)
      {
        if ((_WORD)v10)
        {
          if ((unsigned __int16)v10 > (unsigned __int16)v6)
          {
            v12 = v7 + ((as32CodeMask[(unsigned __int16)v6] & v11) << v5);
            v11 >>= v6;
            v13 = v10 - v6;
            a2[(unsigned __int16)v9++] = v12;
            v6 = 8;
            LOWORD(v5) = 0;
LABEL_11:
            v7 = 0;
            goto LABEL_12;
          }
          v7 += (as32CodeMask[(unsigned __int16)v10] & v11) << v5;
          v6 -= v10;
          v13 = a4[++v8];
          v11 = a1[v8];
          if (!(_WORD)v6)
          {
            LOWORD(v5) = 0;
            a2[(unsigned __int16)v9++] = v7;
            v6 = 8;
            goto LABEL_11;
          }
          LOWORD(v5) = v10 + v5;
        }
        else
        {
          v13 = a4[++v8];
          v11 = a1[v8];
        }
LABEL_12:
        v10 = v13;
        if (v8 >= a3)
          goto LABEL_16;
      }
    }
  }
  else
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
  }
  LOWORD(v9) = 0;
LABEL_16:
  if ((unsigned __int16)v6 <= 7u)
    a2[(unsigned __int16)v9] = v7;
  *a5 = v5;
  return (unsigned __int16)v9;
}

uint64_t DemuxStream(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4, _WORD *a5)
{
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  char v9;
  unsigned __int16 v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int v14;

  v5 = (unsigned __int16)*a5;
  v6 = 8 - v5;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a3;
    v12 = *a1 >> v5;
    v13 = *a4;
    while ((unsigned __int16)v13 <= (unsigned __int16)v6)
    {
      *(_DWORD *)(a2 + 4 * v8) = ((as32CodeMask[(unsigned __int16)v13] & v12) << v9) + v7;
      v6 -= v13;
      v14 = a4[++v8];
      v9 = 0;
      if (!(_WORD)v6)
      {
        v7 = 0;
        goto LABEL_8;
      }
      v12 = (v12 >> v13);
      v7 = 0;
LABEL_9:
      v13 = v14;
      if (v8 >= v11)
        goto LABEL_12;
    }
    v7 += (as32CodeMask[(unsigned __int16)v6] & v12) << v9;
    v14 = v13 - v6;
    v9 += v6;
LABEL_8:
    v12 = a1[++v10];
    v6 = 8;
    goto LABEL_9;
  }
  v10 = 0;
LABEL_12:
  *a5 = 8 - v6;
  return v10;
}

void *LH_S32ToLH_S32(void *__src, void *__dst, unsigned int a3)
{
  return cstdlib_memcpy(__dst, __src, 4 * a3);
}

void *LH_U16ToLH_U16(void *__src, void *__dst, unsigned int a3)
{
  return cstdlib_memcpy(__dst, __src, 2 * a3);
}

void *LH_S16ToLH_S16(void *__src, void *__dst, unsigned int a3)
{
  return cstdlib_memmove(__dst, __src, 2 * a3);
}

void *OverlapLH_S16ToLH_S16(void *__src, void *__dst, unsigned int a3)
{
  return cstdlib_memmove(__dst, __src, 2 * a3);
}

void *OverlapLH_S32ToLH_S32(void *__src, void *__dst, unsigned int a3)
{
  return cstdlib_memmove(__dst, __src, 4 * a3);
}

void *FillZeroLH_S32(void *a1, unsigned int a2)
{
  return cstdlib_memset(a1, 0, 4 * a2);
}

void *FillZeroLH_S16(void *a1, unsigned int a2)
{
  return cstdlib_memset(a1, 0, 2 * a2);
}

void *FillZeroLH_U16(void *a1, unsigned int a2)
{
  return cstdlib_memset(a1, 0, 2 * a2);
}

_WORD *FillLH_S16(_WORD *result, __int16 a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

_DWORD *FillLH_S32(_DWORD *result, int a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double InitRandom(uint64_t a1)
{
  double result;

  result = -2.41055443e116;
  *(_QWORD *)a1 = 0xD81878ACDEE2AD57;
  *(_DWORD *)(a1 + 8) = 82486;
  *(_WORD *)(a1 + 12) = 4;
  return result;
}

uint64_t RandomLH_S16(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  v2 = *(__int16 *)(a2 + 10);
  v3 = *(__int16 *)(a2 + 12);
  v4 = *(__int16 *)(a2 + 2 * v2) + *(__int16 *)(a2 + 2 * v3);
  v5 = v4 | 0x8000;
  if (v4 < 0x8000)
    v5 = *(_WORD *)(a2 + 2 * v2) + *(_WORD *)(a2 + 2 * v3);
  if (v4 >= -32768)
    v6 = v5;
  else
    v6 = v4 & 0x7FFF;
  *(_WORD *)(a2 + 2 * v3) = v6;
  v7 = v3 - 1;
  if (v7 < 0)
    v7 = 4;
  v8 = v2 - 1;
  if (v8 < 0)
    v8 = 4;
  *(_WORD *)(a2 + 10) = v8;
  *(_WORD *)(a2 + 12) = v7;
  return (__int16)((v6 * a1) >> 15);
}

uint64_t RandomLH_S16Vector(uint64_t result, int a2, int a3, uint64_t a4)
{
  _WORD *v6;
  uint64_t v7;

  if (a3 >= 1)
  {
    v6 = (_WORD *)result;
    v7 = (unsigned __int16)a3;
    do
    {
      result = RandomLH_S16(a2, a4);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t fxd_Energy(uint64_t result, _DWORD *a2, int a3)
{
  __int16 *v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a3 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = (__int16 *)result;
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = *v4++;
      result = fxd_S32FractMultS32S32(v7, v7);
      v5 += result;
      --v6;
    }
    while (v6);
  }
  *a2 = v5;
  return result;
}

uint64_t fxd_BoundedLinearInterpolation(int a1, int a2, int a3, int a4, int a5, char a6)
{
  __int16 v6;
  unsigned int v7;
  char v8;
  BOOL v9;
  char v10;
  int v11;
  int v12;
  int v13;

  if (a1 <= a2)
  {
    v11 = (unsigned __int16)a4 << a6;
  }
  else if (a1 >= a3)
  {
    v11 = (unsigned __int16)a5 << a6;
    if ((v11 & 0x8000) != 0)
      LOWORD(v11) = 0x7FFF;
  }
  else
  {
    v6 = a3 - a2;
    v7 = (unsigned __int16)((a3 - a2) / (a5 - a4));
    if (v7 < 3)
    {
      v10 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        ++v8;
        v9 = v7 > 5;
        v7 >>= 1;
      }
      while (v9);
      v10 = v8;
    }
    v12 = (a5 - a4) << v10;
    if (v6 == (__int16)v12)
      v13 = 0x7FFF;
    else
      v13 = (__int16)((v12 << 16 >> 1) / v6);
    v11 = ((v13 * (a1 - a2)) >> (v10 - a6 + 15)) + (a4 << a6);
  }
  return (__int16)v11;
}

uint64_t fxd_BoundedConstantLinearInterpolation(int a1, int a2, int a3, unsigned __int16 a4, unsigned __int16 a5, int a6, char a7, char a8)
{
  int v8;
  int v9;

  v8 = (((a1 - a2) * a6) >> (a8 - a7 + 15)) + (a4 << a7);
  v9 = a5 << a7;
  if ((v9 & 0x8000) != 0)
    LOWORD(v9) = 0x7FFF;
  if (a1 >= a3)
    LOWORD(v8) = v9;
  if (a1 <= a2)
    LOWORD(v8) = a4 << a7;
  return (__int16)v8;
}

__int16 *fxd_InterpolateVectors(__int16 *result, __int16 *a2, _WORD *a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (a5 >= 1)
  {
    v5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v8 = *a2++;
      *a3++ = (v6 * (a4 ^ 0x7FFFu) + v8 * a4) >> 15;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t fxd_InterpolateVectors_32BIT(uint64_t result, int *a2, _DWORD *a3, int a4, int a5)
{
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (a5 >= 1)
  {
    v8 = (int *)result;
    v9 = 0x800000 - a4;
    v10 = a5;
    do
    {
      v11 = *v8++;
      v12 = fxd_S32ShMultRndS32S32(v11, v9, 23);
      v13 = *a2++;
      result = fxd_S32ShMultRndS32S32(v13, a4, 23);
      *a3++ = result + v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t fxd_ScalarDecodeWithBounds(int a1, int a2, __int16 a3, __int16 a4, int a5)
{
  if (!a5)
    a2 += (__int16)(a3 - a2) * a1 / (unsigned __int16)(a4 - 1);
  return (__int16)a2;
}

uint64_t fxd_LinSpace(_WORD *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;

  if (a4 < 1)
    return 0xFFFFFFFFLL;
  v4 = a4;
  v5 = ((a3 - a2) << 16 >> 7) / (__int16)(((_WORD)a4 << 8) + 256);
  do
  {
    a2 += v5 >> 1;
    *a1++ = a2;
    --v4;
  }
  while (v4);
  return 0;
}

__int16 *fxd_LspToCosLsp(__int16 *result, _WORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v8;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      v6 = ((v5 << 14) / 25736) >> 1;
      if (v5 >= -1 && v4 < 25736)
        v8 = v6;
      else
        v8 = 0;
      *a2++ = CosTbl[v8];
      --v3;
    }
    while (v3);
  }
  return result;
}

__int16 *fxd_LspToCosLsp__32BIT(__int16 *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  unsigned int v6;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (v5 < 0 || v4 >> 3 >= 0xC91u)
        v6 = 0;
      else
        v6 = (v4 << 15) / 0xC910u;
      *a2++ = CosTbl__32BIT[v6];
      --v3;
    }
    while (v3);
  }
  return result;
}

int *fxd_LspToCosLsp__32BITX(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      v5 = 32 * v4 / 25736;
      if (((v5 >> 15) & 3) != 0)
        v6 = 0;
      else
        v6 = (__int16)(v5 >> 1);
      *a2++ = CosTbl__32BIT[v6];
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t fxd_LspToAi(__int16 *a1, _WORD *a2, int a3)
{
  _WORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v9;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x24BDAC8D0];
  if (a3 >= 1)
  {
    v3 = v11;
    v4 = a3;
    do
    {
      v6 = *a1++;
      v5 = v6;
      v7 = ((v6 << 14) / 25736) >> 1;
      if (v6 >= -1 && v5 < 25736)
        v9 = v7;
      else
        v9 = 0;
      *v3++ = CosTbl[v9];
      --v4;
    }
    while (v4);
  }
  return fxd_CosLspToAi((unint64_t)v11, a2, a3);
}

unint64_t fxd_CosLspToAi(unint64_t result, _WORD *a2, int a3)
{
  int *v3;
  int v4;
  __int16 *v5;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64_t v15;
  int v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  int *v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  _DWORD v42[2];
  int v43;
  _BYTE v44[172];

  *(_QWORD *)&v44[156] = *MEMORY[0x24BDAC8D0];
  v3 = &v42[a3 + 1];
  v3[2] = 0x800000;
  v43 = 0x800000;
  *v3 = 0x800000;
  v4 = -512 * *(__int16 *)result;
  v42[0] = 0x800000;
  v42[1] = v4;
  v3[1] = -512 * *(__int16 *)(result + 2);
  if (a3 >= 3)
  {
    v5 = (__int16 *)result;
    v6 = &v42[a3];
    v38 = ((a3 - 3) >> 1) + 2;
    v7 = v6 + 4;
    v40 = 2;
    v41 = (int *)v44;
    v8 = 1;
    v9 = v42;
    do
    {
      v10 = 0;
      v11 = v40;
      v12 = v5[v40];
      v39 = v7;
      v40 += 2;
      v42[v40] = 0x800000;
      v13 = v42[v11 - 1];
      v14 = v11 | 1;
      v42[v11 | 1] = v13 - (v12 << 9);
      v15 = v11 >> 1;
      do
      {
        v16 = fxd_S32ShMultRndS32S16(v13, v5[v11], 15);
        v17 = &v9[v10];
        v13 = *v17;
        v17[2] = (((*v17 - 2 * v16) & 0xFFFFFFFE) + v17[2]) & 0xFFFFFFFE;
        --v10;
      }
      while ((uint64_t)(v11 + v10) > v15);
      v18 = v41;
      v19 = v8;
      do
      {
        v20 = *v18++;
        v42[v19] = v20;
        v21 = v19-- <= 1;
      }
      while (!v21);
      v22 = 0;
      v23 = v5[v14];
      v3[v40] = 0x800000;
      LODWORD(result) = v3[v11 - 1];
      v3[v14] = result - (v23 << 9);
      do
      {
        v24 = fxd_S32ShMultRndS32S16(result, v5[v14], 15);
        v25 = &v6[v22];
        result = v25[1];
        v25[3] = (((result - 2 * v24) & 0xFFFFFFFE) + v25[3]) & 0xFFFFFFFE;
        --v22;
      }
      while ((uint64_t)(v11 + v22) > v15);
      v26 = v39;
      v27 = v8;
      do
      {
        v28 = *v26++;
        v3[v27] = v28;
        v21 = v27-- <= 1;
      }
      while (!v21);
      ++v8;
      v9 += 2;
      ++v41;
      v6 += 2;
      v7 = v39 + 1;
    }
    while (v8 != v38);
  }
  v29 = a2;
  if (a3 >= 1)
  {
    v30 = a3;
    v31 = *v3;
    v32 = v42[0];
    v33 = &v43;
    do
    {
      v34 = v33[a3];
      v35 = *(v33 - 1);
      *v29++ = (v35 + v34 - v31 + v32 + 2048) >> 12;
      ++v33;
      v32 = v35;
      v31 = v34;
      --v30;
    }
    while (v30);
  }
  return result;
}

unint64_t fxd_HighPrecisionCosLspToAi(unint64_t result, _DWORD *a2, int a3)
{
  int *v3;
  int v4;
  __int16 *v5;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int64_t v15;
  int v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  int *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  _DWORD v42[2];
  int v43;
  _BYTE v44[172];

  *(_QWORD *)&v44[156] = *MEMORY[0x24BDAC8D0];
  v3 = &v42[a3 + 1];
  v3[2] = 0x800000;
  v43 = 0x800000;
  *v3 = 0x800000;
  v4 = -512 * *(__int16 *)result;
  v42[0] = 0x800000;
  v42[1] = v4;
  v3[1] = -512 * *(__int16 *)(result + 2);
  if (a3 >= 3)
  {
    v5 = (__int16 *)result;
    v6 = &v42[a3];
    v38 = ((a3 - 3) >> 1) + 2;
    v7 = v6 + 4;
    v40 = 2;
    v41 = (int *)v44;
    v8 = 1;
    v9 = v42;
    do
    {
      v10 = 0;
      v11 = v40;
      v12 = v5[v40];
      v39 = v7;
      v40 += 2;
      v42[v40] = 0x800000;
      v13 = v42[v11 - 1];
      v14 = v11 | 1;
      v42[v11 | 1] = v13 - (v12 << 9);
      v15 = v11 >> 1;
      do
      {
        v16 = fxd_S32ShMultRndS32S16(v13, v5[v11], 15);
        v17 = &v9[v10];
        v13 = *v17;
        v17[2] = (((*v17 - 2 * v16) & 0xFFFFFFFE) + v17[2]) & 0xFFFFFFFE;
        --v10;
      }
      while ((uint64_t)(v11 + v10) > v15);
      v18 = v41;
      v19 = v8;
      do
      {
        v20 = *v18++;
        v42[v19] = v20;
        v21 = v19-- <= 1;
      }
      while (!v21);
      v22 = 0;
      v23 = v5[v14];
      v3[v40] = 0x800000;
      LODWORD(result) = v3[v11 - 1];
      v3[v14] = result - (v23 << 9);
      do
      {
        v24 = fxd_S32ShMultRndS32S16(result, v5[v14], 15);
        v25 = &v6[v22];
        result = v25[1];
        v25[3] = (((result - 2 * v24) & 0xFFFFFFFE) + v25[3]) & 0xFFFFFFFE;
        --v22;
      }
      while ((uint64_t)(v11 + v22) > v15);
      v26 = v39;
      v27 = v8;
      do
      {
        v28 = *v26++;
        v3[v27] = v28;
        v21 = v27-- <= 1;
      }
      while (!v21);
      ++v8;
      v9 += 2;
      ++v41;
      v6 += 2;
      v7 = v39 + 1;
    }
    while (v8 != v38);
  }
  v29 = a2;
  if (a3 >= 1)
  {
    v30 = a3;
    v31 = *v3;
    v32 = v42[0];
    v33 = &v43;
    do
    {
      v34 = *(v33 - 1);
      v35 = v33[a3];
      *v29++ = 16 * (v35 + v34 - v31 + v32);
      ++v33;
      v32 = v34;
      v31 = v35;
      --v30;
    }
    while (v30);
  }
  return result;
}

unint64_t fxd_HighPrecisionCosLspToAi__32BIT(unint64_t result, _DWORD *a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  int *v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  _DWORD v43[2];
  int v44;
  _BYTE v45[172];

  *(_QWORD *)&v45[156] = *MEMORY[0x24BDAC8D0];
  v3 = &v43[a3 + 1];
  v3[2] = 0x800000;
  v44 = 0x800000;
  *v3 = 0x800000;
  v4 = *(_DWORD *)(result + 4);
  v5 = -2 * *(_DWORD *)result;
  v43[0] = 0x800000;
  v43[1] = v5;
  v3[1] = -2 * v4;
  if (a3 >= 3)
  {
    v6 = (_DWORD *)result;
    v7 = &v43[a3];
    v39 = ((a3 - 3) >> 1) + 2;
    v8 = v7 + 4;
    v41 = 2;
    v42 = (int *)v45;
    v9 = 1;
    v10 = v43;
    do
    {
      v11 = 0;
      v12 = v41;
      v13 = v6[v41];
      v40 = v8;
      v41 += 2;
      v43[v41] = 0x800000;
      v14 = v43[v12 - 1];
      v15 = v12 | 1;
      v43[v12 | 1] = v14 - 2 * v13;
      v16 = v12 >> 1;
      do
      {
        v17 = fxd_S32ShMultRndS32S32(v14, v6[v12], 23);
        v18 = &v10[v11];
        v14 = *v18;
        v18[2] = (((*v18 - 2 * v17) & 0xFFFFFFFE) + v18[2]) & 0xFFFFFFFE;
        --v11;
      }
      while ((uint64_t)(v12 + v11) > v16);
      v19 = v42;
      v20 = v9;
      do
      {
        v21 = *v19++;
        v43[v20] = v21;
        v22 = v20-- <= 1;
      }
      while (!v22);
      v23 = 0;
      v24 = v6[v15];
      v3[v41] = 0x800000;
      LODWORD(result) = v3[v12 - 1];
      v3[v15] = result - 2 * v24;
      do
      {
        v25 = fxd_S32ShMultRndS32S32(result, v6[v15], 23);
        v26 = &v7[v23];
        result = v26[1];
        v26[3] = (((result - 2 * v25) & 0xFFFFFFFE) + v26[3]) & 0xFFFFFFFE;
        --v23;
      }
      while ((uint64_t)(v12 + v23) > v16);
      v27 = v40;
      v28 = v9;
      do
      {
        v29 = *v27++;
        v3[v28] = v29;
        v22 = v28-- <= 1;
      }
      while (!v22);
      ++v9;
      v10 += 2;
      ++v42;
      v7 += 2;
      v8 = v40 + 1;
    }
    while (v9 != v39);
  }
  v30 = a2;
  if (a3 >= 1)
  {
    v31 = a3;
    v32 = *v3;
    v33 = v43[0];
    v34 = &v44;
    do
    {
      v35 = *(v34 - 1);
      v36 = v34[a3];
      *v30++ = 16 * (v36 + v35 - v32 + v33);
      ++v34;
      v33 = v35;
      v32 = v36;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t fxd_AiToParCor(__int16 *a1, uint64_t a2, signed int a3)
{
  _DWORD *v5;
  unsigned __int16 v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD v21[40];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = &v21[a3];
  v6 = a3 - 1;
  if (a3 >= 1)
  {
    v7 = (unsigned __int16)a3;
    v8 = v21;
    do
    {
      v9 = *a1++;
      *v8++ = v9 << 15;
      --v7;
    }
    while (v7);
  }
  result = (uint64_t)FillZeroLH_S32(&v21[a3], a3);
  if ((v6 & 0x8000) == 0)
  {
    v11 = a3;
    v12 = v6;
    v13 = v11;
    v14 = &v21[v11 - 1];
    do
    {
      v15 = v21[v12];
      *(_WORD *)(a2 + 2 * v12) = v15 >> 12;
      if (!v12)
        break;
      v16 = 0;
      v17 = (((__int16)(v15 >> 12) * (__int16)(v15 >> 12)) >> 15) ^ 0x7FFF;
      do
      {
        v5[v16] = v21[v16];
        ++v16;
      }
      while (v12 != v16);
      v18 = v21;
      v19 = v12;
      do
      {
        result = fxd_S32FractDivS32S16(v18[v13]- 2 * *(__int16 *)(a2 + 2 * v12) * ((int)v14[v19] >> 16)- (((unsigned __int16)v14[v19] * *(__int16 *)(a2 + 2 * v12)) >> 15), (__int16)v17);
        *v18++ = result;
        --v19;
      }
      while (v19);
    }
    while (v12-- >= 1);
  }
  return result;
}

__int16 *fxd_ExpandLpcBandwidth(__int16 *result, _WORD *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;

  if (a5)
  {
    if (a4 >= 1)
    {
      v5 = a4;
      LOWORD(v6) = a3;
      do
      {
        v7 = *result++;
        *a2++ = (v7 * (__int16)v6) >> (15 - a5);
        v6 = ((__int16)v6 * a3) >> 15;
        --v5;
      }
      while (v5);
    }
  }
  else if (a4 >= 1)
  {
    v8 = a4;
    LOWORD(v9) = a3;
    do
    {
      v10 = *result++;
      *a2++ = (v10 * (__int16)v9) >> 15;
      v9 = ((__int16)v9 * a3) >> 15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t fxd_HighPrecisionExpandLpcBandwidth(uint64_t result, _DWORD *a2, int a3, int a4, char a5)
{
  int *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;

  if (a4 >= 1)
  {
    v7 = (int *)result;
    v8 = a4;
    v9 = 15 - a5;
    LOWORD(v10) = a3;
    do
    {
      v11 = *v7++;
      v12 = (__int16)v10;
      result = fxd_S32ShMultRndS32S16(v11, (__int16)v10, v9);
      *a2++ = result;
      v10 = (v12 * a3) >> 15;
      --v8;
    }
    while (v8);
  }
  return result;
}

unint64_t fxd_LspToSubFrameAi(__int16 *__src, __int16 *a2, int a3, unsigned int a4, __int16 *__dst)
{
  unsigned int v9;
  int v10;
  int v11;
  int v12;

  if (a3 >= 2)
  {
    LOWORD(v9) = 0;
    v10 = (__int16)((_WORD)a3 << 9);
    v11 = a3 - 1;
    v12 = 0x2000000;
    do
    {
      if (v10)
        v9 = (v12 / v10) >> 1;
      fxd_InterpolateVectors(a2, __src, __dst, (__int16)v9, a4);
      fxd_LspToAi(__dst, __dst, a4);
      __dst += (int)a4;
      v12 += 0x2000000;
      --v11;
    }
    while (v11);
  }
  LH_S16ToLH_S16(__src, __dst, a4);
  return fxd_LspToAi(__dst, __dst, a4);
}

uint64_t fxd_LspToTilt(_WORD *a1, int a2)
{
  __int16 v2;
  int v3;
  __int16 v4;
  int v5;
  int v6;
  signed int v7;
  unsigned int v8;

  v2 = a1[1];
  v3 = (__int16)(4 * *a1) * (__int16)(v2 - *a1);
  v4 = a1[2];
  v5 = ((((32 * v3) & 0xFF80) * (__int16)(v4 - v2)) >> 11) + 32 * (__int16)(v4 - v2) * (__int16)(v3 >> 11);
  v6 = (((unsigned __int16)v5 * (__int16)(a1[3] - v4)) >> 11) + 32 * (__int16)(a1[3] - v4) * (v5 >> 16);
  if (v6 > 183251937)
  {
    LOWORD(v8) = 0;
  }
  else
  {
    v7 = 768000 * (v6 >> 16) + ((24000 * (unsigned __int16)v6) >> 11) - 0x7FFFFFFF;
    v8 = (2 * a2 * (v7 >> 16) + (((unsigned __int16)v7 * a2) >> 15) + 0x8000) >> 16;
  }
  return (__int16)v8;
}

void *fxd_MultiStageVectorDecodeLsp(_DWORD *a1, int a2, _DWORD *a3, uint64_t a4, signed int a5, __int16 *a6)
{
  __int16 *v6;
  void *result;
  int v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  __int16 v18;
  __int16 *v19;
  uint64_t v20;
  int v21;
  __int16 v22;

  v6 = a6;
  result = FillZeroLH_S16(a6, a5);
  if (a2 > 1)
  {
    v13 = *a3 * a5;
    v14 = 1;
    do
    {
      if (a5 >= 1)
      {
        v15 = (__int16 *)(a4 + 2 * v13 + 2 * a1[v14] * a5);
        v16 = a5;
        v17 = v6;
        do
        {
          v18 = *v15++;
          *v17++ += v18;
          --v16;
        }
        while (v16);
      }
      v13 += a3[v14++] * a5;
    }
    while (v14 != a2);
  }
  if (a5 >= 1)
  {
    v19 = (__int16 *)(a4 + 2 * *a1 * a5);
    v20 = a5;
    do
    {
      v21 = *v6;
      *v6 >>= 2;
      v22 = *v19++;
      *v6++ = v22 + (v21 >> 2);
      --v20;
    }
    while (v20);
  }
  return result;
}

unint64_t fxd_MultiStageVectorDecodeLsp__32BIT(_DWORD *a1, int a2, _DWORD *a3, uint64_t a4, signed int a5, uint64_t a6, int *a7)
{
  unint64_t result;
  int v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  _BYTE v27[96];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  result = (unint64_t)FillZeroLH_S32(v27, a5);
  if (a2 > 1)
  {
    v15 = *a3 * a5;
    v16 = 1;
    do
    {
      if (a5 >= 1)
      {
        v17 = (__int16 *)(a4 + 2 * v15 + 2 * a1[v16] * a5);
        v18 = 8 - *(_DWORD *)(a6 + 4 * v16);
        v19 = v27;
        v20 = a5;
        do
        {
          v21 = *v17++;
          result = *v19;
          *v19++ = (v21 << v18) + result;
          --v20;
        }
        while (v20);
      }
      v15 += a3[v16++] * a5;
    }
    while (v16 != a2);
  }
  if (a5 >= 1)
  {
    v22 = (__int16 *)(a4 + 2 * *a1 * a5);
    v23 = a5;
    v24 = (int *)v27;
    do
    {
      v25 = *v22++;
      v26 = *v24 + (v25 << 10);
      *v24++ = v26;
      *a7++ = v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t fxd_OrderCheckLsp(__int16 *a1, int a2, int a3)
{
  int v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  __int16 *v8;
  int v9;

  v3 = 0;
  if (a3 == 3)
    v4 = 5;
  else
    v4 = 2;
  do
  {
    if (a2 < 2)
      break;
    v5 = *a1;
    v6 = 1;
    v7 = (a2 - 1);
    v8 = a1 + 1;
    do
    {
      v9 = *v8;
      if (v9 >= v5)
      {
        v5 = *v8;
      }
      else
      {
        v6 = 0;
        *(v8 - 1) = v9;
        *v8 = v5;
      }
      ++v8;
      --v7;
    }
    while (v7);
    if (v6 == 1)
      break;
    ++v3;
  }
  while (v3 != v4);
  return fxd_SmoothLsp(a1, a2, a3);
}

uint64_t fxd_SmoothLsp(__int16 *a1, int a2, int a3)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  __int16 v24;
  __int16 v25;

  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      result = 1;
      break;
    case 3:
      if ((a2 - 14) > 6)
        v4 = 322;
      else
        v4 = dword_214F89410[a2 - 14];
      v5 = 0;
      v6 = 2 * v4;
      v7 = (a2 - 1);
      v8 = (int)v7;
      v9 = v7 - 1;
      while (a2 >= 2)
      {
        v10 = 0;
        v11 = (unsigned __int16)*a1;
        v12 = (unsigned __int16 *)(a1 + 1);
        do
        {
          v13 = v10 + 1;
          v14 = (__int16)*v12;
          v15 = *v12;
          if (v4 > (__int16)(*v12 - v11))
          {
            v16 = (v4 - (v14 - v11)) << 16 >> 17;
            if (v10)
            {
              if (v4 <= (__int16)(v11 - a1[(v10 - 1)]))
              {
                v18 = v11 - a1[(v10 - 1)];
                if (v6 > v18)
                  v17 = (__int16)(v18 - v4) >> 1;
                else
                  v17 = (__int16)(v4 - (v14 - v11)) >> 1;
              }
              else
              {
                v17 = 0;
              }
            }
            else if (v4 <= *a1)
            {
              v17 = (__int16)(v4 - (v14 - v11)) >> 1;
            }
            else
            {
              v17 = (__int16)v11 >> 1;
            }
            if (v9 == v10 && 25736 - v4 < v14)
            {
              v16 = (25736 - v15) << 16 >> 17;
            }
            else if (v13 < v8)
            {
              v19 = (__int16)(v12[1] - v15);
              if (v6 > v19)
                v16 = (v19 - v4) << 16 >> 17;
              if (v4 > (__int16)(v12[1] - v15))
                v16 = 0;
            }
            *(v12 - 1) = v11 - v17;
            v15 += v16;
            *v12 = v15;
          }
          ++v12;
          ++v10;
          v11 = v15;
        }
        while (a2 - 1 != v13);
        v20 = *a1;
        v21 = 1;
        v22 = a2 - 1;
        v23 = a1 + 1;
        do
        {
          v25 = *v23++;
          v24 = v25;
          if ((int)((32440 * v4) >> 15) > (__int16)(v25 - v20))
            v21 = 0;
          v20 = v24;
          --v22;
        }
        while (v22);
        if (v21 == 1)
          break;
        if (++v5 == 10)
          return 0;
      }
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

int *fxd_OrderCheckLsp__S32(int *result, int a2)
{
  char v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  char v7;

  v2 = 1;
  do
  {
    if (a2 < 2)
      break;
    v3 = *result;
    v4 = 1;
    v5 = (a2 - 1);
    v6 = result + 1;
    do
    {
      if (v3 <= *v6)
      {
        v3 = *v6;
      }
      else
      {
        v4 = 0;
        *(v6 - 1) = *v6;
        *v6 = v3;
      }
      ++v6;
      --v5;
    }
    while (v5);
    v7 = (v4 != 1) & v2;
    v2 = 0;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t fxd_S16SatAddS16S16(int a1, int a2)
{
  int v2;

  v2 = a1 + a2;
  if (a1 + a2 >= 0x7FFF)
    v2 = 0x7FFF;
  if (v2 <= -32768)
    return 4294934528;
  else
    return v2;
}

uint64_t fxd_S32SatAddS32S32(int a1, int a2)
{
  if (((a2 + a1) ^ a1) > -1 || (a2 ^ a1) < 0)
    return (a2 + a1);
  else
    return (a1 >> 31) ^ 0x7FFFFFFFu;
}

uint64_t fxd_S16SatSubS16S16(int a1, int a2)
{
  int v2;

  v2 = a1 - a2;
  if (a1 - a2 >= 0x7FFF)
    v2 = 0x7FFF;
  if (v2 <= -32768)
    return 4294934528;
  else
    return v2;
}

uint64_t fxd_S32SatSubS32S32(int a1, int a2)
{
  char v2;

  if (((a2 ^ a1) & ((a1 - a2) ^ a1)) < 0 != v2)
    return (a1 >> 31) ^ 0x7FFFFFFFu;
  else
    return (a1 - a2);
}

uint64_t fxd_S32FractMultS32S32(int a1, int a2)
{
  if (a2 * a1 >= 1073741825)
    return 0x7FFFFFFFLL;
  else
    return (2 * a2 * a1);
}

uint64_t fxd_S32ShMultRndS32S32(int a1, int a2, __int16 a3)
{
  int v3;

  v3 = (int)((a2 >> 16) * (unsigned __int16)a1
           + (unsigned __int16)a2 * (a1 >> 16)
           + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16)
           + (1 << (a3 - 17))) >> (a3 - 16);
  if (a3 == 16)
    v3 = (a2 >> 16) * (unsigned __int16)a1
       + (unsigned __int16)a2 * (a1 >> 16)
       + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16);
  return (v3 + (((a2 >> 16) * (a1 >> 16)) << (32 - a3)));
}

uint64_t fxd_S32ShMultRndS32S16(int a1, int a2, char a3)
{
  return ((((1 << (a3 - 1)) + (unsigned __int16)a1 * a2) >> a3) + (((a1 >> 16) * a2) << (16 - a3)));
}

uint64_t fxd_S32ShDPFMultS32S16(int a1, int a2, int a3)
{
  return (((2 * a2 * a3) >> 15) & 0xFFFFFFFE) + 2 * a1 * a3;
}

uint64_t fxd_S32FractDivS32S16(int a1, int a2)
{
  return (((a1 % a2) << 15) / a2 + ((a1 / a2) << 15));
}

uint64_t fxd_S16FractDivS32S32(int a1, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;

  v2 = 0;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  v5 = 2 * v3 - v4;
  v6 = 15;
  do
  {
    HIDWORD(v7) = v2;
    LODWORD(v7) = ~v5;
    v2 = v7 >> 31;
    if (v5 < 0)
      v8 = v4;
    else
      v8 = -v4;
    v5 = v8 + 2 * v5;
    --v6;
  }
  while ((_WORD)v6);
  if ((a2 ^ a1) < 0)
    v2 = -v2;
  return (__int16)v2;
}

uint64_t fxd_S16NormS16(int a1)
{
  int v1;

  if (a1)
  {
    if (a1 == -1)
    {
      LOWORD(a1) = 15;
    }
    else
    {
      v1 = a1 ^ (a1 >> 15);
      if (v1 >= 0x4000)
      {
        LOWORD(a1) = 0;
      }
      else
      {
        LOWORD(a1) = 0;
        do
        {
          v1 = (__int16)(2 * v1);
          LOWORD(a1) = a1 + 1;
        }
        while (v1 < 0x4000);
      }
    }
  }
  return (__int16)a1;
}

uint64_t fxd_S16NormS32(int a1)
{
  __int16 v1;
  int v2;
  unsigned int v3;

  if (!a1)
    return 0;
  if (a1 == -1)
    return 31;
  v2 = a1 ^ (a1 >> 31);
  if (v2 > 0x3FFFFFFF)
    return 0;
  v1 = 0;
  do
  {
    v3 = v2 >> 29;
    v2 *= 2;
    ++v1;
  }
  while (!v3);
  return v1;
}

uint64_t fxd_S16Lookup10Log10S16S16(int a1, uint64_t a2)
{
  int v2;

  if (a1 >> 5 == 1023)
    LOWORD(v2) = 0;
  else
    v2 = *(__int16 *)(a2 + 2 * (a1 >> 5))
       + (((2 * a1 - (a1 >> 5 << 6)) * (*(__int16 *)(a2 + 2 * (a1 >> 5) + 2) - *(__int16 *)(a2 + 2 * (a1 >> 5)))
         + 0x8000) >> 24);
  return (__int16)v2;
}

uint64_t fxd_U16LookupPow10U16U16(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  int v3;

  v2 = a1 >> 5;
  if (a1 >> 5 > 0x400)
    v2 = 1023;
  v3 = *(unsigned __int16 *)(a2 + 2 * v2);
  return (unsigned __int16)(v3 + (((*(unsigned __int16 *)(a2 + 2 * (v2 + 1)) - v3) * (a1 - 32 * v2) + 16) >> 5));
}

uint64_t S32ComposeDPFS16S16(int a1, int a2)
{
  return ((a1 << 16) + 2 * a2);
}

uint64_t fxd_DPFExtractS32S16S16(uint64_t result, _WORD *a2, _WORD *a3)
{
  *a2 = WORD1(result);
  *a3 = (unsigned __int16)result >> 1;
  return result;
}

uint64_t fxd_U16FractSqrtS32(unsigned int a1)
{
  unsigned __int16 v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = 0;
  v2 = 0;
  v3 = 0x8000;
  do
  {
    v4 = 2 * (unsigned __int16)(v1 + v3) * (unsigned __int16)(v1 + v3);
    if (v4 <= a1)
    {
      v1 += v3;
      if (v4 == a1)
        break;
    }
    v3 >>= 1;
  }
  while (v2++ < 0xF);
  return v1;
}

uint64_t fxd_U16SqrtS32(int a1)
{
  unsigned __int16 v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 > 3519)
  {
    if (a1 <= 5119)
    {
      if (a1 == 3520)
        return 59;
      if (a1 == 4096)
        return 64;
    }
    else
    {
      switch(a1)
      {
        case 5120:
          return 72;
        case 5632:
          return 75;
        case 7040:
          return 84;
      }
    }
  }
  else if (a1 <= 2047)
  {
    if (a1 == 1024)
      return 32;
    if (a1 == 1408)
      return 38;
  }
  else
  {
    switch(a1)
    {
      case 2048:
        return 45;
      case 2560:
        return 51;
      case 2816:
        return 53;
    }
  }
  v1 = 0;
  v2 = 0;
  v3 = 0x8000;
  do
  {
    v4 = (unsigned __int16)(v1 + v3) * (unsigned __int16)(v1 + v3);
    if (v4 <= a1)
    {
      v1 += v3;
      if (v4 == a1)
        break;
    }
    v3 >>= 1;
  }
  while (v2++ < 0xF);
  return v1;
}

uint64_t fxd_U16SqrtU32(unsigned int a1)
{
  unsigned __int16 v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = 0;
  v2 = 0;
  v3 = 0x8000;
  do
  {
    v4 = (unsigned __int16)(v1 + v3) * (unsigned __int16)(v1 + v3);
    if (v4 <= a1)
    {
      v1 += v3;
      if (v4 == a1)
        break;
    }
    v3 >>= 1;
  }
  while (v2++ < 0xF);
  return v1;
}

uint64_t fxd_S32SqrtS32_sys32(unsigned int a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;

  v1 = 0;
  v2 = 0x8000;
  v3 = 16;
  do
  {
    v4 = (v1 + v2) * (v1 + v2);
    if (v4 <= a1)
    {
      v1 = v1 + v2;
      if (v4 == a1)
        break;
    }
    v2 >>= 1;
    --v3;
  }
  while (v3);
  return v1;
}

uint64_t uselect_CreateBrokerString(uint64_t a1, char *a2, size_t a3, char *a4, char *a5, int a6, int a7)
{
  uint64_t Str;
  _QWORD *v15;
  size_t v16;
  size_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  char v29;
  int v31;
  char *__s;
  const char *v33;
  char *__src;
  char v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  __src = 0;
  __s = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (!__s || !*__s)
    goto LABEL_12;
  v15 = *(_QWORD **)(a1 + 8);
  v16 = cstdlib_strlen("voiceaddonbaseuri.");
  v17 = cstdlib_strlen(__s);
  v18 = (char *)heap_Calloc(v15, 1, v16 + v17 + 1);
  if (!v18)
    return 2229280778;
  v19 = v18;
  cstdlib_strcpy(v18, "voiceaddonbaseuri.");
  cstdlib_strcat(v19, __s);
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)v19, &__src);
  if ((Str & 0x80000000) != 0)
    return Str;
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v19);
  if (__src && *__src)
  {
    Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    if (a2[cstdlib_strlen(a2) - 1] != 47)
    {
      Str = strhelper_SafeCat(a2, "/", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
    }
    v20 = 1;
    v21 = "_";
  }
  else
  {
LABEL_12:
    v20 = 0;
    v21 = "/";
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &__src);
  if ((Str & 0x80000000) != 0)
    return Str;
  v22 = 2229280778;
  if (!__src)
    return 2229282821;
  v31 = v20;
  v23 = *(_QWORD **)(a1 + 8);
  v24 = cstdlib_strlen(__src);
  v25 = (char *)heap_Calloc(v23, 1, v24 + 1);
  if (v25)
  {
    v26 = v25;
    cstdlib_strcpy(v25, __src);
    vf_MakeLower(v26);
    if (__s && *__s)
    {
      Str = strhelper_SafeCat(a2, "uselectvao", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v26, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, __s, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, "vao", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v26);
      v27 = 0;
    }
    else
    {
      Str = strhelper_SafeCat(a2, "uselect", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v26, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      if (a4)
        cstdlib_strcpy(a4, __src);
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v26);
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      v27 = 1;
    }
    if (a6 == 1)
    {
      Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &__src);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, v21, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
    }
    if (v27)
    {
      Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"reduction", &__src);
      if ((Str & 0x80000000) != 0)
        return Str;
      Str = strhelper_SafeCat(a2, __src, 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
      if (!a5)
        goto LABEL_47;
      v28 = __src;
    }
    else
    {
      if (!a5)
      {
LABEL_47:
        if (!v31 || (Str = strhelper_SafeCat(a2, ".dat", 0xFFFFFFFFFFFFFFFFLL, a3), (Str & 0x80000000) == 0))
        {
          v22 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__src);
          if ((v22 & 0x80000000) != 0)
            return v22;
          if (a7)
            v29 = 1;
          else
            v29 = v31;
          if ((v29 & 1) == 0 && __src)
          {
            if (*__src)
            {
              Str = brokeraux_ComposeBrokerString(a1, a2, 0, 0, 0, 0, 0, v35, a3);
              if ((Str & 0x80000000) == 0)
              {
                *a2 = 0;
                return strhelper_SafeCat(a2, v35, 0xFFFFFFFFFFFFFFFFLL, a3);
              }
              return Str;
            }
            return v22;
          }
          if (!a7 || !cupreader_IsCupInTheScope(a1, &v33))
            return v22;
          return cupreader_PrependCupName(a2, v33, a3);
        }
        return Str;
      }
      v28 = "vao";
    }
    cstdlib_strcpy(a5, v28);
    goto LABEL_47;
  }
  return v22;
}

uint64_t uselect_ObjcVoiceOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _WORD *v8;
  uint64_t inited;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _WORD *v22;
  unsigned __int16 *v23;
  uint64_t *v24;
  int v25;
  _WORD *v26;
  unsigned __int16 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  int v39;
  char v40;
  unsigned __int8 *v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  BOOL v45;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  unsigned int v55;
  _WORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _OWORD __dst[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *__src;
  int v89;
  _QWORD *v90;
  int *v91;
  _BYTE *v92;
  uint64_t *v93;
  char __s1[256];
  char v95[64];
  char v96[64];
  char v97[256];
  char __b[80];
  uint64_t v99;

  v8 = a1;
  v99 = *MEMORY[0x24BDAC8D0];
  __src = 0;
  v87 = 0;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  memset(__dst, 0, sizeof(__dst));
  inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0)
    return inited;
  cstdlib_memcpy(__dst, __src, 0x198uLL);
  v64 = *(_OWORD *)(a5 + 32);
  v90 = 0;
  v89 = 0;
  cstdlib_strcpy(v97, "");
  cstdlib_strcpy(v96, "");
  cstdlib_strcpy(v95, "");
  if ((uselect_CreateBrokerString((uint64_t)__dst, v97, 0x100uLL, v96, v95, 1, 0) & 0x80000000) != 0)
    goto LABEL_5;
  v10 = uselect_CheckForDataFile(v8, a2, v97, &v89);
  if ((v10 & 0x80001FFF) == 0x8000000A)
    return v10;
  if (!v89)
  {
LABEL_5:
    inited = uselect_CreateBrokerString((uint64_t)__dst, v97, 0x100uLL, v96, v95, 0, 0);
    if ((inited & 0x80000000) != 0)
      return inited;
    v10 = uselect_CheckForDataFile(v8, a2, v97, &v89);
    if ((v10 & 0x80001FFF) == 0x8000000A)
      return v10;
    if (!v89)
    {
      if ((uselect_CreateBrokerString((uint64_t)__dst, v97, 0x100uLL, v96, v95, 0, 1) & 0x80000000) != 0)
        goto LABEL_102;
      v10 = uselect_CheckForDataFile(v8, a2, v97, &v89);
      if ((v10 & 0x80001FFF) == 0x8000000A)
        return v10;
      if (!v89)
      {
LABEL_102:
        v19 = 0;
        v10 = 2229280788;
        goto LABEL_109;
      }
    }
  }
  inited = ssftriff_reader_ObjOpen(v8, a2, 0, v97, "USEL", 1031, (uint64_t *)&v90);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = 2229280769;
  v11 = (char *)heap_Calloc(*((_QWORD **)&__dst[0] + 1), 1, 28400);
  v19 = (uint64_t)v11;
  if (!v11)
    goto LABEL_98;
  cstdlib_strcpy(v11, v96);
  cstdlib_strcpy((char *)(v19 + 76), v95);
  cstdlib_strcpy((char *)(v19 + 152), v97);
  cstdlib_memset((void *)(v19 + 2144), 255, 0x100uLL);
  cstdlib_memset((void *)(v19 + 3048), 255, 0x11CuLL);
  cstdlib_memset((void *)(v19 + 3376), 255, 0x20uLL);
  cstdlib_memset((void *)(v19 + 2400), 0, 0x40uLL);
  cstdlib_memset((void *)(v19 + 2748), 0, 0xDAuLL);
  *(_QWORD *)(v19 + 28168) = uselect_CartLookup;
  *(_WORD *)(v19 + 3578) = 2;
  v20 = (_QWORD *)heap_Calloc(*((_QWORD **)&__dst[0] + 1), 1, 280);
  *(_QWORD *)(v19 + 3552) = v20;
  if (!v20)
  {
LABEL_98:
    v10 = 2229280778;
    goto LABEL_109;
  }
  *v20 = v19;
  cstdlib_memset(__b, 0, 0x50uLL);
  v21 = uselect_ParseRiff((uint64_t *)__dst, (uint64_t)v90, v19, 0, __b, 0, 0, 0);
  if ((v21 & 0x80000000) != 0)
  {
    v48 = v21;
    cstdlib_strcpy(__s1, "");
    if (__b[0])
    {
      v53 = 0;
      v54 = __b;
      do
      {
        cstdlib_strcat(__s1, "/");
        cstdlib_strcat(__s1, v54);
        v54 = &__b[5 * (unsigned __int16)++v53];
      }
      while (*v54);
    }
    log_OutPublic(v64, (uint64_t)"USELECT", 19000, (uint64_t)"%s%s%s%s%s%x", v49, v50, v51, v52, "file");
    v10 = v48;
  }
  else
  {
    v93 = 0;
    v92 = 0;
    v91 = 0;
    v22 = (_WORD *)(v19 + 3440);
    v23 = (unsigned __int16 *)(v19 + 3442);
    v24 = (uint64_t *)(v19 + 3448);
    v25 = 1;
    v56 = v8;
LABEL_13:
    v26 = v22;
    v27 = v23;
    v28 = v24;
    switch(v25)
    {
      case 1:
        goto LABEL_17;
      case 2:
        v27 = (unsigned __int16 *)(v19 + 3474);
        v26 = (_WORD *)(v19 + 3472);
        v28 = (uint64_t *)(v19 + 3480);
        goto LABEL_17;
      case 3:
        v27 = (unsigned __int16 *)(v19 + 3490);
        v26 = (_WORD *)(v19 + 3488);
        v28 = (uint64_t *)(v19 + 3496);
        goto LABEL_17;
      case 4:
        v27 = (unsigned __int16 *)(v19 + 3506);
        v26 = (_WORD *)(v19 + 3504);
        v28 = (uint64_t *)(v19 + 3512);
LABEL_17:
        v58 = (unsigned __int16)*v26;
        if (!*v26)
          goto LABEL_51;
        v29 = 0;
        v30 = *v28;
        v59 = *v27;
        v57 = v25;
        break;
      default:
        goto LABEL_109;
    }
LABEL_19:
    v31 = uselect_AddGenericContextRule((uint64_t)__dst, v19, (uint64_t)&v93);
    if ((v31 & 0x80000000) == 0)
    {
      v61 = v93;
      v31 = uselect_AddGCRAction((uint64_t)__dst, (uint64_t)v93, (uint64_t *)&v91);
      if ((v31 & 0x80000000) == 0)
      {
        v32 = v91;
        *v91 = v25;
        v62 = v29 * v59;
        v33 = v29 * v59 + v59;
        *((_BYTE *)v32 + 4) = *(_BYTE *)(v30 + v33 - 2);
        v34 = *(unsigned __int8 *)(v30 + v33 - 1);
        v32[2] = v34;
        if (v25 != 4)
        {
          if (v34)
          {
            if (v34 == 1)
              v35 = 0;
            else
              v35 = 10 * v34;
          }
          else
          {
            v35 = 10;
          }
          v32[2] = v35;
        }
        v60 = v29;
        v36 = 0;
        if (*(int *)(v19 + 3092) < 0)
          v37 = 4;
        else
          v37 = 6;
        while (1)
        {
          cstdlib_memset(__s1, 0, 0x20uLL);
          if ((v36 & 0x7FFFFFFE) == 4)
          {
            if (**(_QWORD **)(v19 + 2464))
            {
              v38 = 0;
              v39 = 1;
              do
              {
                if (cstdlib_strchr(*(char **)(*(_QWORD *)(v19 + 3432) + 8 * *(unsigned __int8 *)(v30 + v36 + v62)), (char)v38 + 48))
                {
                  __s1[v38 >> 3] |= 1 << (v38 & 7);
                }
                else
                {
                  v39 = 0;
                }
                ++v38;
              }
              while (*(_QWORD *)(*(_QWORD *)(v19 + 2464) + 8 * v38));
              goto LABEL_45;
            }
          }
          else
          {
            v40 = *(_BYTE *)(v19 + 602);
            if (v40)
            {
              v41 = (unsigned __int8 *)(v19 + 603);
              v39 = 1;
              do
              {
                if (cstdlib_strchr(*(char **)(*(_QWORD *)(v19 + 3424) + 8 * *(unsigned __int8 *)(v30 + v36 + v62)), v40))
                {
                  __s1[(unint64_t)*(v41 - 1) >> 3] |= 1 << (*(v41 - 1) & 7);
                }
                else
                {
                  v39 = 0;
                }
                v42 = *v41++;
                v40 = v42;
              }
              while (v42);
LABEL_45:
              if (!v39)
              {
                v31 = uselect_AddGCRCondition((uint64_t)__dst, v61, (uint64_t *)&v92);
                if ((v31 & 0x80000000) != 0)
                  break;
                v43 = v92;
                v44 = v92;
                *v92 = 0;
                cstdlib_memcpy(v44 + 3, __s1, 0x20uLL);
                if (v36 > 5)
                  goto LABEL_108;
                v43[1] = 0x1D1D02020202uLL >> (8 * v36);
                v43[2] = 0x10002FF0100uLL >> (8 * v36);
              }
            }
          }
          if (++v36 == v37)
          {
            v29 = v60 + 1;
            v25 = v57;
            if (v60 + 1 == v58)
            {
LABEL_51:
              ++v25;
              v8 = v56;
              v23 = (unsigned __int16 *)(v19 + 3442);
              v22 = (_WORD *)(v19 + 3440);
              v24 = (uint64_t *)(v19 + 3448);
              if (v25 == 5)
              {
                *(_DWORD *)(v19 + 2748) = 33620225;
                *(_WORD *)(v19 + 2752) = 513;
                *(_BYTE *)(v19 + 2777) = 1;
                *(_QWORD *)(v19 + 2755) = 0x101010101010101;
                *(_QWORD *)(v19 + 2763) = 0x101010101010101;
                if ((*(_DWORD *)(v19 + 3220) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2919) = 1;
                if ((*(_DWORD *)(v19 + 3224) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2920) = 1;
                if ((*(_DWORD *)(v19 + 3212) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2824) = 1;
                if ((*(_DWORD *)(v19 + 3168) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2813) = 1;
                if ((*(_DWORD *)(v19 + 3172) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2814) = 1;
                if ((*(_DWORD *)(v19 + 3176) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2815) = 1;
                if ((*(_DWORD *)(v19 + 3180) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2816) = 1;
                if ((*(_DWORD *)(v19 + 3184) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2817) = 1;
                if ((*(_DWORD *)(v19 + 3188) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2818) = 1;
                if ((*(_DWORD *)(v19 + 3192) & 0x80000000) == 0)
                {
                  *(_BYTE *)(v19 + 2819) = 1;
                  *(_BYTE *)(v19 + 2825) = 1;
                }
                if ((*(_DWORD *)(v19 + 3196) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2820) = 1;
                if ((*(_DWORD *)(v19 + 3200) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2821) = 1;
                if ((*(_DWORD *)(v19 + 3204) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2822) = 1;
                *(_BYTE *)(v19 + 2804) = -1;
                *(_DWORD *)(v19 + 2799) = -1;
                if (*(_DWORD *)(v19 + 2684))
                  *(_WORD *)(v19 + 2958) = 257;
                if (*(_DWORD *)(v19 + 2516))
                  *(_BYTE *)(v19 + 2803) = 1;
                if ((*(_DWORD *)(v19 + 3104) & 0x80000000) == 0)
                {
                  *(_WORD *)(v19 + 2779) = 257;
                  if ((*(_DWORD *)(v19 + 3208) & 0x80000000) == 0)
                    *(_BYTE *)(v19 + 2823) = 1;
                }
                if ((*(_DWORD *)(v19 + 3120) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2781) = 1;
                if ((*(_DWORD *)(v19 + 3068) & 0x80000000) == 0)
                {
                  *(_WORD *)(v19 + 2773) = 257;
                  v45 = *(_DWORD *)(v19 + 2736) != 0;
                  *(_BYTE *)(v19 + 2960) = v45;
                  *(_BYTE *)(v19 + 2961) = v45;
                }
                *(_BYTE *)(v19 + 2964) = *(_DWORD *)(v19 + 3324) >= 0;
                *(_BYTE *)(v19 + 2965) = *(_DWORD *)(v19 + 3328) >= 0;
                if ((*(_DWORD *)(v19 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v19 + 3396) & 0x80000000) == 0)
                  *(_BYTE *)(v19 + 2772) = 8;
                if ((*(_DWORD *)(v19 + 3072) & 0x80000000) == 0)
                {
                  *(_WORD *)(v19 + 2775) = 257;
                  v46 = *(_DWORD *)(v19 + 2740) != 0;
                  *(_BYTE *)(v19 + 2962) = v46;
                  *(_BYTE *)(v19 + 2963) = v46;
                }
                v10 = 0;
                if (*(_DWORD *)(v19 + 2560))
                  *(_BYTE *)(v19 + 2794) = 9;
                goto LABEL_109;
              }
              goto LABEL_13;
            }
            goto LABEL_19;
          }
        }
      }
    }
    v10 = v31;
LABEL_108:
    v8 = v56;
  }
LABEL_109:
  if (v90)
  {
    ssftriff_reader_ObjClose(v90, v12, v13, v14, v15, v16, v17, v18);
    v90 = 0;
  }
  if ((v10 & 0x80000000) != 0)
  {
    if ((v10 & 0x1FFF) == 0xA)
      log_OutPublic(v64, (uint64_t)"USELECT", 19000, 0, v15, v16, v17, v18, v55);
    uselect_VoiceClose(v8, a2, v19);
    v19 = 0;
  }
  *(_QWORD *)(a4 + 32) = v19;
  return v10;
}

uint64_t uselect_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  return uselect_VoiceClose(a1, a2, *(_QWORD *)(a3 + 32));
}

uint64_t uselect_VoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v53;

  v53 = 0;
  if (!a3)
    return 0;
  inited = InitRsrcFunction(a1, a2, &v53);
  if ((inited & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a3 + 28232);
    if (v5)
      heap_Free((_QWORD *)v53[1], v5);
    v6 = *(_QWORD *)(a3 + 28160);
    if (v6)
      heap_Free((_QWORD *)v53[1], v6);
    v7 = *(_QWORD *)(a3 + 3512);
    if (v7)
    {
      heap_Free((_QWORD *)v53[1], v7);
      *(_QWORD *)(a3 + 3512) = 0;
    }
    v8 = *(_QWORD *)(a3 + 3448);
    if (v8)
    {
      heap_Free((_QWORD *)v53[1], v8);
      *(_QWORD *)(a3 + 3448) = 0;
    }
    v9 = *(_QWORD *)(a3 + 3480);
    if (v9)
    {
      heap_Free((_QWORD *)v53[1], v9);
      *(_QWORD *)(a3 + 3480) = 0;
    }
    v10 = *(_QWORD *)(a3 + 3496);
    if (v10)
    {
      heap_Free((_QWORD *)v53[1], v10);
      *(_QWORD *)(a3 + 3496) = 0;
    }
    v11 = *(uint64_t **)(a3 + 3520);
    if (v11)
    {
      v12 = v53;
      do
      {
        v13 = v11;
        v11 = (uint64_t *)v11[2];
        v14 = *v13;
        if (*v13)
        {
          do
          {
            v15 = *(_QWORD *)(v14 + 40);
            heap_Free((_QWORD *)v12[1], v14);
            v14 = v15;
          }
          while (v15);
          v13 = *(uint64_t **)(a3 + 3520);
        }
        v16 = v13[1];
        if (v16)
        {
          do
          {
            v17 = *(_QWORD *)(v16 + 16);
            heap_Free((_QWORD *)v12[1], v16);
            v16 = v17;
          }
          while (v17);
          v13 = *(uint64_t **)(a3 + 3520);
        }
        heap_Free((_QWORD *)v12[1], (uint64_t)v13);
        *(_QWORD *)(a3 + 3520) = v11;
      }
      while (v11);
    }
    v18 = *(_QWORD *)(a3 + 3416);
    if (v18)
    {
      v19 = *(_WORD *)(a3 + 3408);
      if (v19)
      {
        do
        {
          *(_WORD *)(a3 + 3408) = --v19;
          v20 = *(_QWORD *)(a3 + 3416);
          v21 = v20 + 24 * v19;
          v24 = *(_QWORD *)(v21 + 8);
          v23 = (_QWORD *)(v21 + 8);
          v22 = v24;
          if (v24)
          {
            heap_Free((_QWORD *)v53[1], v22);
            *v23 = 0;
            v20 = *(_QWORD *)(a3 + 3416);
            v19 = *(_WORD *)(a3 + 3408);
          }
          v25 = *(_QWORD *)(v20 + 24 * v19 + 16);
          if (v25)
          {
            heap_Free((_QWORD *)v53[1], v25);
            v19 = *(_WORD *)(a3 + 3408);
          }
        }
        while (v19);
        v18 = *(_QWORD *)(a3 + 3416);
      }
      heap_Free((_QWORD *)v53[1], v18);
    }
    v26 = v53;
    v27 = *(uint64_t **)(a3 + 3336);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        v29 = 0;
        do
        {
          heap_Free((_QWORD *)v26[1], v28);
          ++v29;
          v27 = *(uint64_t **)(a3 + 3336);
          v28 = v27[(unsigned __int16)v29];
        }
        while (v28);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v27);
      *(_QWORD *)(a3 + 3336) = 0;
    }
    v30 = *(uint64_t ***)(a3 + 3344);
    if (v30)
    {
      v31 = *v30;
      if (*v30)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = *v31;
          if (*v31)
          {
            v35 = 0;
            do
            {
              heap_Free((_QWORD *)v26[1], v34);
              ++v35;
              v31 = *(uint64_t **)(*(_QWORD *)(a3 + 3344) + 8 * v32);
              v34 = v31[(unsigned __int16)v35];
            }
            while (v34);
          }
          heap_Free((_QWORD *)v26[1], (uint64_t)v31);
          ++v33;
          v30 = *(uint64_t ***)(a3 + 3344);
          v32 = (unsigned __int16)v33;
          v31 = v30[(unsigned __int16)v33];
        }
        while (v31);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v30);
      *(_QWORD *)(a3 + 3344) = 0;
    }
    v36 = *(uint64_t **)(a3 + 3352);
    if (v36)
    {
      v37 = *v36;
      if (*v36)
      {
        v38 = 0;
        do
        {
          heap_Free((_QWORD *)v26[1], v37);
          ++v38;
          v36 = *(uint64_t **)(a3 + 3352);
          v37 = v36[(unsigned __int16)v38];
        }
        while (v37);
      }
      heap_Free((_QWORD *)v26[1], (uint64_t)v36);
      *(_QWORD *)(a3 + 3352) = 0;
    }
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 3432));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 3424));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 2464));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28248));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28240));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28264));
    uselect_FreeRiffStringTable(v53, *(uint64_t **)(a3 + 28256));
    v45 = *(_QWORD *)(a3 + 2968);
    if (v45)
      heap_Free((_QWORD *)v53[1], v45);
    v46 = *(_QWORD *)(a3 + 3368);
    if (v46)
      heap_Free((_QWORD *)v53[1], v46);
    if (*(_WORD *)(a3 + 600))
    {
      v47 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(_QWORD **)(a3 + 408 + 8 * v47++), v46, v39, v40, v41, v42, v43, v44);
      while (v47 < *(unsigned __int16 *)(a3 + 600));
    }
    *(_WORD *)(a3 + 600) = 0;
    v48 = v53;
    v49 = *(_QWORD *)(a3 + 3552);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 152);
      if (v50)
        heap_Free((_QWORD *)v53[1], v50);
      if (*(_WORD *)(v49 + 104))
      {
        v51 = 0;
        do
          ssftriff_reader_ReleaseChunkData(*(_QWORD **)(v49 + 8 + 8 * v51++), v50, v39, v40, v41, v42, v43, v44);
        while (v51 < *(unsigned __int16 *)(v49 + 104));
      }
      heap_Free((_QWORD *)v48[1], v49);
      v48 = v53;
    }
    *(_QWORD *)(a3 + 3552) = 0;
    heap_Free((_QWORD *)v48[1], a3);
  }
  return inited;
}

uint64_t uselect_CheckForDataFile(_WORD *a1, uint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v15 = 0;
  *a4 = 0;
  v12 = ssftriff_reader_ObjOpen(a1, a2, 2, a3, "USEL", 1031, (uint64_t *)&v15);
  v13 = v15;
  if ((v12 & 0x80000000) == 0 && v15)
  {
    *a4 = 1;
LABEL_5:
    ssftriff_reader_ObjClose(v13, v5, v6, v7, v8, v9, v10, v11);
    return v12;
  }
  if (v15)
    goto LABEL_5;
  return v12;
}

uint64_t uselect_ParseRiff(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int RiffStringTable;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  size_t v133;
  int v134;
  unsigned __int8 *v135;
  unsigned int v136;
  size_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned __int16 v145;
  int v147;
  uint64_t v148;
  unsigned __int16 *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  void *v160;
  unsigned int v161;
  uint64_t v162;
  _BYTE *v163;
  unsigned __int16 *v164;
  unsigned __int16 *v165;
  uint64_t ChunkData;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unsigned __int16 *v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  _WORD *v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  _WORD *v186;
  int v187;
  _DWORD *v188;
  void *v189;
  _DWORD *v190;
  int SubChunkInfo;
  uint64_t v192;
  void **v193;
  void **v194;
  void **v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  _WORD *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  uint64_t Position;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  unsigned int v226;
  uint64_t v227;
  void *v228;
  int v229;
  unsigned int v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  _BYTE *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v243;
  _BYTE *v244;
  uint64_t *v245;
  unsigned int v246;
  uint64_t *v247;
  _BYTE *v248;
  _BYTE *v249;
  unsigned int v250;
  _BYTE *v251;
  uint64_t *v252;
  _BYTE *v253;
  void *v254;
  uint64_t v255;
  unsigned int v256;
  char *v258;
  char *__s1;
  char *__s;
  char *__dst;
  char *v262;
  unsigned int v263;
  int v264[2];
  unsigned int v265;
  int v266;
  char __src[4];
  char v268;
  unsigned int __n;
  unsigned int __n_4[64];
  void *v271[34];

  v263 = a7;
  v13 = a1;
  v256 = 0;
  v246 = 0;
  v250 = 0;
  v271[32] = *(void **)MEMORY[0x24BDAC8D0];
  __n = 0;
  v268 = 0;
  *(_DWORD *)__src = 0;
  v14 = (char *)&a5[5 * a4];
  v245 = (uint64_t *)(a3 + 3040);
  v247 = (uint64_t *)(a3 + 3032);
  v242 = (uint64_t *)(a3 + 3016);
  v243 = (uint64_t *)(a3 + 3024);
  v240 = (uint64_t *)(a3 + 3000);
  v241 = (uint64_t *)(a3 + 3008);
  v238 = (uint64_t *)(a3 + 2984);
  v239 = (uint64_t *)(a3 + 2992);
  v252 = (uint64_t *)(a3 + 2976);
  v232 = (uint64_t *)(a3 + 28264);
  v233 = (uint64_t *)(a3 + 28256);
  v234 = (uint64_t *)(a3 + 28248);
  v235 = (uint64_t *)(a3 + 28240);
  v236 = (uint64_t *)(a3 + 2464);
  v237 = (_BYTE *)(a3 + 2400);
  v244 = (_BYTE *)(a3 + 1887);
  v248 = (_BYTE *)(a3 + 1373);
  v249 = (_BYTE *)(a3 + 1630);
  v251 = (_BYTE *)(a3 + 1116);
  v253 = (_BYTE *)(a3 + 859);
  v254 = (void *)(a3 + 2500);
  v255 = a3 + 192 * a8;
  __s = (char *)(a3 + 602);
  __dst = (char *)(a3 + 140);
  v262 = (char *)(a3 + 64);
  __s1 = (char *)(a5 + 5);
  v258 = v14;
  while (1)
  {
    v266 = 1;
    LODWORD(v15) = ssftriff_reader_OpenChunk(a2, (__int32 *)__src, &__n, 0, (uint64_t)a5, a6, a7, a8);
    if ((v15 & 0x80000000) != 0)
      break;
    cstdlib_strcpy(v14, __src);
    if (a4 == 1)
    {
      if (cstdlib_strcmp(a5, "VCAT"))
      {
        if (!cstdlib_strcmp(a5, "PREF") && !cstdlib_strcmp(__src, "FEAT"))
        {
          v271[0] = 0;
          if (a6)
          {
            v149 = (unsigned __int16 *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v85, v86, v87, v88, v89);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v149 = (unsigned __int16 *)v271[0];
          }
          v167 = *v149;
          v271[0] = v149 + 1;
          if (v167 >= 0x47)
          {
LABEL_335:
            v15 = 2229280772;
            log_OutPublic(v13[4], (uint64_t)"USELECT", 19008, 0, v139, v140, v141, v142, v231);
            return v15;
          }
          *(_DWORD *)(a3 + 4 * v167 + 3048) = v256;
          v168 = *(_QWORD *)(a3 + 2968) + 32 * v256;
          *(_DWORD *)v168 = v167;
          *(_WORD *)(v168 + 8) = v149[1];
          *(_DWORD *)(v168 + 4) = *((_DWORD *)v149 + 1);
          *(_BYTE *)(v168 + 10) = *((_BYTE *)v149 + 8) + 1;
          *(_BYTE *)(v168 + 11) = *((_BYTE *)v149 + 9);
          *(_BYTE *)(v168 + 12) = *((_BYTE *)v149 + 10);
          *(_BYTE *)(v168 + 13) = *((_BYTE *)v149 + 11);
          v271[0] = v149 + 6;
          LODWORD(v15) = uselect_InitForPreselDistFunc(v168);
          v169 = *(_QWORD *)(a3 + 2968) + 32 * v256;
          *(_BYTE *)(v169 + 25) = v256;
          v170 = *(_DWORD *)v169;
          v171 = v252;
          v14 = v258;
          switch(*(_DWORD *)v169)
          {
            case 1:
              goto LABEL_278;
            case 2:
              v171 = v238;
              goto LABEL_278;
            case 3:
            case 4:
            case 6:
            case 8:
            case 9:
            case 0xC:
            case 0xD:
              goto LABEL_279;
            case 5:
              v171 = v241;
              goto LABEL_278;
            case 7:
              v171 = v239;
              goto LABEL_278;
            case 0xA:
              v171 = v243;
              goto LABEL_278;
            case 0xB:
              v171 = v240;
              goto LABEL_278;
            case 0xE:
              v171 = v242;
              goto LABEL_278;
            default:
              v171 = v247;
              v14 = v258;
              if (v170 != 26)
              {
                v171 = v245;
                if (v170 != 27)
                  goto LABEL_279;
              }
LABEL_278:
              *v171 = v169;
LABEL_279:
              v183 = v256;
              break;
          }
LABEL_280:
          ++v183;
          goto LABEL_281;
        }
        if (!cstdlib_strcmp(a5, "TRAF") && !cstdlib_strcmp(__src, "FEAT"))
        {
          v271[0] = 0;
          if (a6)
          {
            v164 = (unsigned __int16 *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
          }
          else
          {
            v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v90, v91, v92, v93, v94);
            if ((v15 & 0x80000000) != 0)
              return v15;
            v164 = (unsigned __int16 *)v271[0];
          }
          v172 = *v164;
          v271[0] = v164 + 1;
          if (v172 >= 8)
            goto LABEL_335;
          if ((_DWORD)v172 == 1)
          {
            v173 = 0;
          }
          else
          {
            if ((_DWORD)v172 != 3)
            {
              if (v256 == 2)
                v184 = 3;
              else
                v184 = v256;
              *(_DWORD *)(a3 + 4 * v172 + 3376) = v184;
              v185 = *(_QWORD *)(a3 + 3368) + 12 * v184;
              *(_DWORD *)v185 = v172;
              v187 = *((_DWORD *)v164 + 1);
              v186 = v164 + 2;
              *(_WORD *)(v185 + 8) = *(v186 - 1);
              v271[0] = v186;
              v183 = v184;
              *(_DWORD *)(v185 + 4) = v187;
              goto LABEL_280;
            }
            v173 = 2;
          }
          *(_DWORD *)(a3 + 4 * v172 + 3376) = v173;
          v180 = *(_QWORD *)(a3 + 3368) + 12 * v173;
          *(_DWORD *)v180 = v172;
          v182 = *((_DWORD *)v164 + 1);
          v181 = v164 + 2;
          *(_WORD *)(v180 + 8) = *(v181 - 1);
          v271[0] = v181;
          *(_DWORD *)(v180 + 4) = v182;
          v183 = v256;
          if (v173 == v256)
            goto LABEL_280;
LABEL_281:
          v256 = v183;
          goto LABEL_296;
        }
        if (cstdlib_strcmp(a5, "FUZZ") || cstdlib_strcmp(__src, "FTBL"))
        {
          if (cstdlib_strcmp(a5, "FUZZ") || cstdlib_strcmp(__src, "FTBA"))
          {
            if (cstdlib_strcmp(a5, "PCAR"))
            {
              if (cstdlib_strcmp(a5, "DCAR"))
              {
                if (cstdlib_strcmp(a5, "CCOS") || cstdlib_strcmp(__src, "CTXT"))
                {
                  if (cstdlib_strcmp(a5, "STDI") && cstdlib_strcmp(a5, "STSS"))
                  {
LABEL_43:
                    v266 = 0;
LABEL_297:
                    cstdlib_strcpy((char *)v271, "");
                    v202 = 0;
                    do
                    {
                      cstdlib_strcat((char *)v271, "/");
                      cstdlib_strcat((char *)v271, &a5[5 * (unsigned __int16)v202++]);
                    }
                    while (a4 >= (unsigned __int16)v202);
                    log_OutText(v13[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Unknown data: %s for %s", v203, v204, v205, (uint64_t)v271);
                    goto LABEL_300;
                  }
                  v271[0] = 0;
                  if (a6)
                  {
                    v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
                  }
                  else
                  {
                    v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v115, v116, v117, v118, v119);
                    if ((v15 & 0x80000000) != 0)
                      return v15;
                  }
                  if (cstdlib_strcmp(__src, "STVI"))
                  {
                    if (!cstdlib_strcmp(__src, "STVA"))
                    {
                      if (cstdlib_strcmp(a5, "STDI"))
                        *(void **)(a3 + 3544) = v271[0];
                      else
                        *(void **)(a3 + 3536) = v271[0];
                    }
                  }
                  else
                  {
                    *(void **)(a3 + 3528) = v271[0];
                  }
                }
                else
                {
                  LODWORD(v15) = uselect_ParseRiff(v13, a2, a3, 2, a5, a6, v263, v250++);
                }
              }
              else
              {
                v271[0] = 0;
                if (a6)
                {
                  v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
                }
                else
                {
                  v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v110, v111, v112, v113, v114);
                  if ((v15 & 0x80000000) != 0)
                    return v15;
                }
                if (cstdlib_strcmp(__src, "CAQF"))
                {
                  if (cstdlib_strcmp(__src, "CAQI"))
                  {
                    if (cstdlib_strcmp(__src, "CAQV"))
                    {
                      if (!cstdlib_strcmp(__src, "CATN"))
                        *(void **)(*(_QWORD *)(a3 + 28232) + 8 * v246++) = v271[0];
                    }
                    else
                    {
                      *(void **)(a3 + 28224) = v271[0];
                    }
                  }
                  else
                  {
                    *(void **)(a3 + 28216) = v271[0];
                  }
                }
                else
                {
                  *(void **)(a3 + 28208) = v271[0];
                }
              }
            }
            else
            {
              v271[0] = 0;
              if (a6)
              {
                v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
              }
              else
              {
                v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v105, v106, v107, v108, v109);
                if ((v15 & 0x80000000) != 0)
                  return v15;
              }
              if (cstdlib_strcmp(__src, "CAQF"))
              {
                if (cstdlib_strcmp(__src, "CAQI"))
                {
                  if (cstdlib_strcmp(__src, "CAQV"))
                  {
                    if (!cstdlib_strcmp(__src, "CATN"))
                      *(void **)(a3 + 28200) = v271[0];
                  }
                  else
                  {
                    *(void **)(a3 + 28192) = v271[0];
                  }
                }
                else
                {
                  *(void **)(a3 + 28184) = v271[0];
                }
              }
              else
              {
                *(void **)(a3 + 28176) = v271[0];
              }
            }
          }
          else
          {
            v271[0] = 0;
            if (a6)
            {
              v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            }
            else
            {
              v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v100, v101, v102, v103, v104);
              if ((v15 & 0x80000000) != 0)
                return v15;
            }
            if (!*(_WORD *)(a3 + 3408))
              goto LABEL_335;
            v189 = (void *)heap_Calloc((_QWORD *)v13[1], 1, __n);
            *(_QWORD *)(*(_QWORD *)(a3 + 3416) + 24 * *(unsigned __int16 *)(a3 + 3408) - 8) = v189;
            if (v189)
              cstdlib_memmove(v189, v271[0], __n);
            else
              LODWORD(v15) = -2065686518;
          }
        }
        else
        {
          v271[0] = 0;
          if (a6)
          {
            v165 = (unsigned __int16 *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            v271[0] = v165;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v95, v96, v97, v98, v99);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v165 = (unsigned __int16 *)v271[0];
          }
          LODWORD(v15) = -2065686524;
          v174 = __n;
          v175 = (unsigned __int16 *)(*(_QWORD *)(a3 + 3416) + 24 * *(unsigned __int16 *)(a3 + 3408));
          v176 = *v165;
          *v175 = v176;
          v177 = v165[1];
          v175[1] = v177;
          v178 = 2 * v176 * (unint64_t)v177;
          if (v178 + 4 <= v174)
          {
            v179 = (void *)heap_Alloc(a1[1], v178);
            *((_QWORD *)v175 + 1) = v179;
            if (v179)
            {
              cstdlib_memcpy(v179, v165 + 2, 2 * *v175 * (unint64_t)v175[1]);
              LODWORD(v15) = 0;
            }
            else
            {
              LODWORD(v15) = -2065686518;
            }
          }
          ++*(_WORD *)(a3 + 3408);
          v13 = a1;
        }
      }
      else
      {
        v271[0] = 0;
        if (a6)
        {
          v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
        }
        else
        {
          v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v80, v81, v82, v83, v84);
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        if (cstdlib_strcmp(__src, "ALPH"))
        {
          if (cstdlib_strcmp(__src, "VOIC"))
          {
            if (cstdlib_strcmp(__src, "COVO"))
            {
              if (cstdlib_strcmp(__src, "SAFE"))
              {
                if (cstdlib_strcmp(__src, "PLOS"))
                {
                  if (cstdlib_strcmp(__src, "SONO"))
                  {
                    if (cstdlib_strcmp(__src, "DIFF"))
                    {
                      if (cstdlib_strcmp(__src, "TAGA"))
                      {
                        if (cstdlib_strcmp(__src, "1BSL"))
                        {
                          if (cstdlib_strcmp(__src, "1BSR"))
                          {
                            if (cstdlib_strcmp(__src, "2BSL"))
                            {
                              if (cstdlib_strcmp(__src, "2BSR"))
                              {
                                v266 = 0;
                                goto LABEL_296;
                              }
                              v207 = v271[0];
                              v208 = __n;
                              v209 = (uint64_t)v13;
                              v210 = a2;
                              v211 = v232;
                            }
                            else
                            {
                              v207 = v271[0];
                              v208 = __n;
                              v209 = (uint64_t)v13;
                              v210 = a2;
                              v211 = v233;
                            }
                          }
                          else
                          {
                            v207 = v271[0];
                            v208 = __n;
                            v209 = (uint64_t)v13;
                            v210 = a2;
                            v211 = v234;
                          }
                        }
                        else
                        {
                          v207 = v271[0];
                          v208 = __n;
                          v209 = (uint64_t)v13;
                          v210 = a2;
                          v211 = v235;
                        }
                      }
                      else
                      {
                        v207 = v271[0];
                        v208 = __n;
                        v209 = (uint64_t)v13;
                        v210 = a2;
                        v211 = v236;
                      }
                      RiffStringTable = uselect_LoadRiffStringTable(v209, v210, v207, v208, v211);
                      goto LABEL_295;
                    }
                    __n_4[0] = 64;
                    v160 = v271[0];
                    v161 = __n;
                    v162 = a2;
                    v163 = v237;
                  }
                  else
                  {
                    __n_4[0] = 257;
                    v160 = v271[0];
                    v161 = __n;
                    v162 = a2;
                    v163 = v244;
                  }
                }
                else
                {
                  __n_4[0] = 257;
                  v160 = v271[0];
                  v161 = __n;
                  v162 = a2;
                  v163 = v248;
                }
              }
              else
              {
                __n_4[0] = 257;
                v160 = v271[0];
                v161 = __n;
                v162 = a2;
                v163 = v249;
              }
            }
            else
            {
              __n_4[0] = 257;
              v160 = v271[0];
              v161 = __n;
              v162 = a2;
              v163 = v251;
            }
          }
          else
          {
            __n_4[0] = 257;
            v160 = v271[0];
            v161 = __n;
            v162 = a2;
            v163 = v253;
          }
          RiffStringTable = ssftriff_reader_ReadStringZ(v162, (uint64_t)v160, v161, 0, v163, __n_4);
LABEL_295:
          LODWORD(v15) = RiffStringTable;
          goto LABEL_296;
        }
        __n_4[0] = 257;
        LODWORD(v15) = ssftriff_reader_ReadStringZ(a2, (uint64_t)v271[0], __n, 0, __s, __n_4);
        if ((v15 & 0x80000000) == 0)
        {
          *(_WORD *)(a3 + 2496) = 255;
          if (cstdlib_strlen(__s))
          {
            v133 = 0;
            v134 = 0;
            do
            {
              v135 = (unsigned __int8 *)(a3 + v133 + 602);
              v136 = *v135;
              if (v136 < *(unsigned __int8 *)(a3 + 2496))
              {
                *(_BYTE *)(a3 + 2496) = v136;
                v136 = *v135;
              }
              if (v136 > *(unsigned __int8 *)(a3 + 2497))
              {
                *(_BYTE *)(a3 + 2497) = v136;
                v136 = *v135;
              }
              *(_BYTE *)(a3 + v136 + 2144) = v134;
              v133 = (v134 + 1);
              v137 = cstdlib_strlen(__s);
              v134 = v133;
            }
            while (v137 > v133);
          }
          v138 = *(_BYTE *)(a3 + 2497) - *(_BYTE *)(a3 + 2496);
          *(_BYTE *)(a3 + 3576) = v138 + 2;
          *(_BYTE *)(a3 + 3577) = v138 + 1;
        }
      }
    }
    else
    {
      if (a4)
      {
        if (cstdlib_strcmp(__s1, "CTXT"))
          goto LABEL_43;
        v271[0] = 0;
        if (cstdlib_strcmp(__src, "L LL"))
        {
          if (!cstdlib_strcmp(__src, "L L "))
          {
            v122 = 0;
            v132 = 0;
            goto LABEL_253;
          }
          if (!cstdlib_strcmp(__src, "L R "))
          {
            v122 = 0;
            goto LABEL_143;
          }
          if (!cstdlib_strcmp(__src, "L RR"))
          {
            v122 = 0;
LABEL_155:
            v132 = 3;
            goto LABEL_253;
          }
          if (cstdlib_strcmp(__src, "R LL"))
          {
            if (cstdlib_strcmp(__src, "R L "))
            {
              if (cstdlib_strcmp(__src, "R R "))
              {
                if (!cstdlib_strcmp(__src, "R RR"))
                {
                  v122 = 1;
                  goto LABEL_155;
                }
LABEL_264:
                if ((v15 & 0x1FFF) == 0x14)
                  LODWORD(v15) = 0;
                goto LABEL_296;
              }
              v122 = 1;
LABEL_143:
              v132 = 1;
            }
            else
            {
              v132 = 0;
              v122 = 1;
            }
LABEL_253:
            SubChunkInfo = uselect_GetSubChunkInfo(a2, a6, v263, (__int32 *)__src, &__n, v271, v120, v121);
            if (SubChunkInfo < 0)
            {
              LODWORD(v15) = SubChunkInfo;
              v13 = a1;
            }
            else
            {
              v192 = v255 + 96 * v122 + 24 * v132;
              v193 = (void **)(v192 + 3600);
              v194 = (void **)(v192 + 3584);
              v195 = (void **)(v192 + 3592);
              do
              {
                if (cstdlib_strcmp(__src, "TABL"))
                {
                  if (cstdlib_strcmp(__src, "IDX "))
                  {
                    if (!cstdlib_strcmp(__src, "IDX2"))
                      *v193 = v271[0];
                  }
                  else
                  {
                    *v195 = v271[0];
                  }
                }
                else
                {
                  *v194 = v271[0];
                }
                v198 = uselect_GetSubChunkInfo(a2, a6, v263, (__int32 *)__src, &__n, v271, v196, v197);
              }
              while ((v198 & 0x80000000) == 0);
              LODWORD(v15) = v198;
              v13 = a1;
              v14 = v258;
            }
            goto LABEL_264;
          }
          v122 = 1;
        }
        else
        {
          v122 = 0;
        }
        v132 = 2;
        goto LABEL_253;
      }
      if (!cstdlib_strcmp(__src, "VINF"))
      {
        v265 = 0;
        *(_QWORD *)v264 = 0;
        if (a6)
        {
          *(_QWORD *)v264 = a6 + ssftriff_reader_GetPosition(a2) - v263;
        }
        else
        {
          v15 = ssftriff_reader_GetChunkData(a2, __n, v264, v16, v17, v18, v19, v20);
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        v123 = __n;
        if (__n)
        {
          v124 = 0;
          do
          {
            LOBYTE(__n_4[0]) = 0;
            LOBYTE(v271[0]) = 0;
            v265 = 256;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v264, v123, v124, v271, &v265);
            if ((v15 & 0x80000000) == 0 && v124 < __n)
            {
              v124 += v265;
              v265 = 256;
              LODWORD(v15) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v264, __n, v124, __n_4, &v265);
            }
            if ((v15 & 0x80000000) != 0)
              break;
            v125 = v265;
            v126 = cstdlib_strcmp((const char *)v271, "Version");
            v127 = v262;
            if (v126)
            {
              v131 = cstdlib_strcmp((const char *)v271, "ReductionVersion");
              v127 = __dst;
              if (v131)
                continue;
            }
            cstdlib_strcpy(v127, (const char *)__n_4);
            v124 += v125;
            log_OutText(v13[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Voice attribute %s=%s", v128, v129, v130, (uint64_t)v271);
            v123 = __n;
          }
          while (v124 < __n);
        }
        goto LABEL_132;
      }
      if (!cstdlib_strcmp(__src, "STAT"))
      {
        v265 = 0;
        *(_QWORD *)v264 = 0;
        if (a6)
        {
          *(_QWORD *)v264 = a6 + ssftriff_reader_GetPosition(a2) - v263;
        }
        else
        {
          v15 = ssftriff_reader_GetChunkData(a2, __n, v264, v21, v22, v23, v24, v25);
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        v150 = __n;
        if (__n)
        {
          v151 = 0;
          do
          {
            LOBYTE(__n_4[0]) = 0;
            LOBYTE(v271[0]) = 0;
            v265 = 64;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v264, v150, v151, v271, &v265);
            if ((v15 & 0x80000000) == 0 && v151 < __n)
            {
              v151 += v265;
              v265 = 64;
              LODWORD(v15) = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v264, __n, v151, __n_4, &v265);
            }
            if ((v15 & 0x80000000) != 0)
              break;
            v152 = v265;
            if (cstdlib_strcmp((const char *)v271, "p95:pitch"))
            {
              if (!cstdlib_strcmp((const char *)v271, "p95:logdur"))
              {
                v156 = cstdlib_atoi((unsigned __int8 *)__n_4);
                if (v156 >= 255)
                  v157 = 255;
                else
                  v157 = v156;
                *(_BYTE *)(a3 + 2498) = v157 & ~(v157 >> 31);
              }
            }
            else
            {
              v158 = cstdlib_atoi((unsigned __int8 *)__n_4);
              v159 = v158 >= 255 ? 255 : v158;
              *(_BYTE *)(a3 + 2499) = v159 & ~(v159 >> 31);
            }
            v151 += v152;
            log_OutText(v13[4], (uint64_t)"USELECT", 3, 0, (uint64_t)"Statistics %s=%s", v153, v154, v155, (uint64_t)v271);
            v150 = __n;
          }
          while (v151 < __n);
        }
        goto LABEL_132;
      }
      if (!cstdlib_strcmp(__src, "VCAT"))
      {
        if (a6)
        {
          ssftriff_reader_GetPosition(a2);
        }
        else
        {
          v271[0] = 0;
          ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v26, v27, v28, v29, v30);
          if ((ChunkData & 0x80000000) != 0)
            return ChunkData;
        }
        goto LABEL_294;
      }
      if (!cstdlib_strcmp(__src, "VBOP"))
      {
        v271[0] = 0;
        __n_4[0] = 0;
        if (a6)
        {
          v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
        }
        else
        {
          v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v31, v32, v33, v34, v35);
          if ((v15 & 0x80000000) != 0)
            return v15;
        }
        if (__n >= 0xF9)
          goto LABEL_335;
        cstdlib_memcpy(v254, v271[0], __n);
        if ((paramc_ParamGetUInt(v13[5], (uint64_t)"uselectmaxcandspruning", __n_4) & 0x80000000) == 0 && __n_4[0])
          *(_DWORD *)(a3 + 2552) = __n_4[0];
        if (__n <= 0x8F)
        {
          *(_DWORD *)(a3 + 2640) = 400000;
          goto LABEL_164;
        }
        if (__n <= 0xC3)
        {
LABEL_164:
          *(_DWORD *)(a3 + 2692) = 0;
          goto LABEL_165;
        }
        if (__n <= 0xC7)
        {
LABEL_165:
          *(_DWORD *)(a3 + 2696) = 0;
        }
        else if (__n > 0xCB)
        {
          if (__n > 0xCF)
          {
            if (__n > 0xD3)
            {
              if (__n > 0xD7)
              {
                if (__n > 0xDB)
                {
                  if (__n > 0xDF)
                  {
                    if (__n > 0xE3)
                    {
                      if (__n > 0xE7)
                      {
                        if (__n > 0xEB)
                        {
                          if (__n > 0xEF)
                          {
                            if (__n > 0xF3)
                            {
                              if (__n > 0xF7)
                                goto LABEL_178;
                              goto LABEL_177;
                            }
LABEL_176:
                            *(_DWORD *)(a3 + 2740) = 0;
LABEL_177:
                            *(_DWORD *)(a3 + 2744) = 0;
LABEL_178:
                            if (!*(_DWORD *)(a3 + 2672)
                              && !*(_DWORD *)(a3 + 2676)
                              && !*(_DWORD *)(a3 + 2664)
                              && !*(_DWORD *)(a3 + 2652))
                            {
                              *(_QWORD *)(a3 + 2672) = -1;
                            }
                            goto LABEL_296;
                          }
LABEL_175:
                          *(_DWORD *)(a3 + 2736) = 0;
                          goto LABEL_176;
                        }
LABEL_174:
                        *(_DWORD *)(a3 + 2732) = 0;
                        goto LABEL_175;
                      }
LABEL_173:
                      *(_DWORD *)(a3 + 2728) = 2;
                      goto LABEL_174;
                    }
LABEL_172:
                    *(_DWORD *)(a3 + 2724) = 1;
                    goto LABEL_173;
                  }
LABEL_171:
                  *(_DWORD *)(a3 + 2720) = 5;
                  goto LABEL_172;
                }
LABEL_170:
                *(_DWORD *)(a3 + 2716) = 2;
                goto LABEL_171;
              }
LABEL_169:
              *(_DWORD *)(a3 + 2712) = 0;
              goto LABEL_170;
            }
LABEL_168:
            *(_DWORD *)(a3 + 2708) = 5;
            goto LABEL_169;
          }
LABEL_167:
          *(_DWORD *)(a3 + 2704) = 1;
          goto LABEL_168;
        }
        *(_DWORD *)(a3 + 2700) = 0;
        goto LABEL_167;
      }
      if (cstdlib_strcmp(__src, "TPMX") && cstdlib_strcmp(__src, "TPMN"))
      {
        if (!cstdlib_strcmp(__src, "PREF"))
        {
          v271[0] = 0;
          if (a6)
          {
            v188 = (_DWORD *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            v271[0] = v188;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v41, v42, v43, v44, v45);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v188 = v271[0];
          }
          *(_WORD *)(a3 + 2966) = *v188;
          ssftriff_reader_Seek(a2, 4u, 1);
          v200 = heap_Calloc((_QWORD *)v13[1], 32, *(unsigned __int16 *)(a3 + 2966) + 1);
          *(_QWORD *)(a3 + 2968) = v200;
          if (!v200)
            return 2229280778;
          *(_DWORD *)(v200 + 32 * *(unsigned __int16 *)(a3 + 2966)) = 0;
LABEL_294:
          RiffStringTable = uselect_ParseRiff(v13, a2, a3, 1, a5, 0, 0, 0);
          goto LABEL_295;
        }
        if (!cstdlib_strcmp(__src, "TRAF"))
        {
          v271[0] = 0;
          if (a6)
          {
            v190 = (_DWORD *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            v271[0] = v190;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v46, v47, v48, v49, v50);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v190 = v271[0];
          }
          *(_WORD *)(a3 + 3360) = *v190;
          ssftriff_reader_Seek(a2, 4u, 1);
          v201 = heap_Calloc((_QWORD *)v13[1], 12, *(unsigned __int16 *)(a3 + 3360));
          *(_QWORD *)(a3 + 3368) = v201;
          if (!v201)
            return 2229280778;
          goto LABEL_294;
        }
        if (cstdlib_strcmp(__src, "FUZZ"))
        {
          if (!cstdlib_strcmp(__src, "CTXR"))
          {
            RiffStringTable = uselect_ParseContextRules((uint64_t)v13, a2, a3, v56, v57, v58, v59, v60);
            goto LABEL_295;
          }
          if (!cstdlib_strcmp(__src, "GCTR"))
          {
            RiffStringTable = uselect_ParseGenericContextRule((uint64_t)v13, a2, a3, __n, v61, v62, v63, v64);
            goto LABEL_295;
          }
          if (!cstdlib_strcmp(__src, "GENF"))
          {
            RiffStringTable = uselect_ParseGenericFeatureMap((uint64_t)v13, a2, (_QWORD *)a3, __n, v65, v66, v67, v68);
            goto LABEL_295;
          }
          if (!cstdlib_strcmp(__src, "PCAR"))
            goto LABEL_312;
          if (!cstdlib_strcmp(__src, "DCAR"))
          {
            Position = ssftriff_reader_GetPosition(a2);
            v271[0] = 0;
            ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), v271, v220, v221, v222, v223, v224);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            ++*(_WORD *)(a3 + 600);
            v225 = (_QWORD *)v13[1];
            v226 = cstdlib_strlen(__s);
            v227 = heap_Calloc(v225, v226, 8);
            *(_QWORD *)(a3 + 28232) = v227;
            if (!v227)
              return 2229280778;
LABEL_317:
            LODWORD(v15) = uselect_ParseRiff(v13, a2, a3, 1, a5, v271[0], Position, 0);
LABEL_132:
            v14 = v258;
            goto LABEL_296;
          }
          if (cstdlib_strcmp(__src, "PHIS"))
          {
            if (!cstdlib_strcmp(__src, "STDI") || !cstdlib_strcmp(__src, "STSS"))
            {
LABEL_312:
              Position = ssftriff_reader_GetPosition(a2);
              v271[0] = 0;
              ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), v271, v215, v216, v217, v218, v219);
              if ((ChunkData & 0x80000000) != 0)
                return ChunkData;
              ++*(_WORD *)(a3 + 600);
              goto LABEL_317;
            }
            if (cstdlib_strcmp(__src, "CDBK"))
            {
              if (!cstdlib_strcmp(__src, "CCOS"))
                goto LABEL_312;
              RiffStringTable = uselect_ParseVoicePartChunks((uint64_t)v13, a2, a3, __n, __src, &v266);
              goto LABEL_295;
            }
            v271[0] = 0;
            v15 = ssftriff_reader_DetachChunkData(a2, (void **)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), v271, v74, v75, v76, v77, v78);
            if ((v15 & 0x80000000) != 0)
              return v15;
            ++*(_WORD *)(a3 + 600);
            v229 = *(_DWORD *)(a3 + 2608);
            if (!v229)
              goto LABEL_329;
            if (v229 != 256)
            {
              if (v229 != 128)
                return 2229280772;
LABEL_329:
              *(void **)(a3 + 3560) = v271[0];
              goto LABEL_296;
            }
            *(void **)(a3 + 3568) = v271[0];
          }
          else
          {
            v271[0] = 0;
            if (a6)
            {
              v271[0] = (void *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            }
            else
            {
              v15 = ssftriff_reader_GetChunkData(a2, __n, v271, v69, v70, v71, v72, v73);
              if ((v15 & 0x80000000) != 0)
                return v15;
            }
            v228 = (void *)heap_Alloc(v13[1], __n);
            *(_QWORD *)(a3 + 28160) = v228;
            if (!v228)
              return 2229280778;
            cstdlib_memcpy(v228, v271[0], __n);
          }
        }
        else
        {
          v271[0] = 0;
          if (a6)
          {
            v199 = (int *)(a6 + ssftriff_reader_GetPosition(a2) - v263);
            v271[0] = v199;
          }
          else
          {
            ChunkData = ssftriff_reader_GetChunkData(a2, __n, v271, v51, v52, v53, v54, v55);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v199 = (int *)v271[0];
          }
          v212 = *v199;
          ssftriff_reader_Seek(a2, 4u, 1);
          v213 = heap_Calloc((_QWORD *)v13[1], 24, (v212 + 2));
          *(_QWORD *)(a3 + 3416) = v213;
          if (!v213)
            return 2229280778;
          *(_WORD *)(a3 + 3408) = 1;
          LODWORD(v15) = uselect_ParseRiff(v13, a2, a3, 1, a5, 0, 0, 0);
        }
      }
      else
      {
        v271[0] = 0;
        v15 = ssftriff_reader_DetachChunkData(a2, (void **)(a3 + 8 * *(unsigned __int16 *)(a3 + 600) + 408), v271, v36, v37, v38, v39, v40);
        if ((v15 & 0x80000000) != 0)
          return v15;
        ++*(_WORD *)(a3 + 600);
        v143 = *(_QWORD *)(a3 + 2464);
        if (!v143)
          goto LABEL_335;
        v144 = 0;
        do
          v145 = v144;
        while (*(_QWORD *)(v143 + 8 * (unsigned __int16)v144++));
        if (!v145 || (unsigned __int16)(__n >> 2) != 2 * v145)
          goto LABEL_335;
        v147 = cstdlib_strcmp(__src, "TPMX");
        v148 = 2488;
        if (!v147)
          v148 = 2480;
        *(void **)(a3 + v148) = v271[0];
      }
    }
LABEL_296:
    if (!v266)
      goto LABEL_297;
LABEL_300:
    if ((v15 & 0x80000000) != 0)
      break;
    v206 = ssftriff_reader_CloseChunk(a2);
    if (v206 < 0)
    {
      LODWORD(v15) = v206;
      break;
    }
  }
  if ((v15 & 0x1FFF) == 0x14)
    return 0;
  else
    return v15;
}

uint64_t uselect_ParseContextRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int16 *v29;
  char __s1[4];
  char v31;
  unsigned int v32;
  _WORD *v33;

  v33 = 0;
  v10 = (unsigned __int16 *)(a3 + 3488);
  v32 = 0;
  v29 = (unsigned __int16 *)(a3 + 3472);
  v11 = (unsigned __int16 *)(a3 + 3440);
  v31 = 0;
  v12 = (unsigned __int16 *)(a3 + 3504);
  v13 = (uint64_t *)(a3 + 3432);
  *(_DWORD *)__s1 = 0;
  v14 = (uint64_t *)(a3 + 3424);
  do
  {
    LODWORD(result) = ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, &v32, &v33, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      break;
    if (!cstdlib_strcmp(__s1, "RULF"))
    {
      v24 = v33;
      v25 = v32;
      v26 = a1;
      v27 = a2;
      v28 = v14;
      goto LABEL_12;
    }
    if (!cstdlib_strcmp(__s1, "RULT"))
    {
      v24 = v33;
      v25 = v32;
      v26 = a1;
      v27 = a2;
      v28 = v13;
LABEL_12:
      LODWORD(result) = uselect_LoadRiffStringTable(v26, v27, v24, v25, v28);
      if ((result & 0x80000000) != 0)
        break;
      goto LABEL_18;
    }
    if (cstdlib_strcmp(__s1, "FSWR"))
    {
      if (cstdlib_strcmp(__s1, "PREW"))
      {
        if (cstdlib_strcmp(__s1, "TRWD"))
        {
          if (cstdlib_strcmp(__s1, "TRWP"))
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", 19008, 0, v16, v17, v18, v19, v29);
            LODWORD(result) = -2065686524;
            break;
          }
          v20 = v33;
          v21 = v32;
          v22 = a1;
          v23 = v10;
        }
        else
        {
          v20 = v33;
          v21 = v32;
          v22 = a1;
          v23 = v29;
        }
      }
      else
      {
        v20 = v33;
        v21 = v32;
        v22 = a1;
        v23 = v11;
      }
    }
    else
    {
      v20 = v33;
      v21 = v32;
      v22 = a1;
      v23 = v12;
    }
    LODWORD(result) = uselect_LoadRiffMatrix2D_U8(v22, v20, v21, v23);
    if ((result & 0x80000000) != 0)
      break;
LABEL_18:
    LODWORD(result) = ssftriff_reader_CloseChunk(a2);
  }
  while ((result & 0x80000000) == 0);
  if ((result & 0x1FFF) == 0x14)
    return 0;
  else
    return result;
}

uint64_t uselect_ParseGenericContextRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int ChunkData;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v39;
  unsigned int *v40;
  _BYTE *v41;
  uint64_t *v42;
  char __s1[4];
  char v44;
  unsigned __int8 *v45;
  unsigned int v46;

  v46 = a4;
  v45 = 0;
  v44 = 0;
  *(_DWORD *)__s1 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  ChunkData = ssftriff_reader_GetChunkData(a2, a4, &v45, a4, a5, a6, a7, a8);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_32;
  ChunkData = ssftriff_reader_Seek(a2, 4u, 1);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_32;
  v16 = *(_DWORD *)v45;
  v45 += 4;
  if (!v16)
  {
    ChunkData = uselect_AddGenericContextRule(a1, a3, (uint64_t)&v42);
    if ((ChunkData & 0x80000000) == 0)
    {
      v23 = v42;
      while (1)
      {
        ChunkData = ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, &v46, &v45, v19, v20, v21, v22);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_32;
        if (!cstdlib_strcmp(__s1, "GCRC"))
        {
          ChunkData = uselect_AddGCRCondition(a1, v23, (uint64_t *)&v41);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_32;
          v30 = 0;
          v31 = v45;
          v32 = *v45;
          v33 = v41;
          *v41 = v32;
          v45 = v31 + 1;
          v34 = v31[1];
          v33[1] = v34;
          v45 = v31 + 2;
          v33[2] = v31[2];
          v35 = v31 + 3;
          v45 = v31 + 3;
          do
          {
            v33[v30 + 3] = *v35;
            v35 = ++v45;
            ++v30;
          }
          while (v30 != 32);
          if (!v32)
            *(_BYTE *)(a3 + v34 + 2748) = 1;
          goto LABEL_30;
        }
        if (cstdlib_strcmp(__s1, "GCRA"))
        {
          v17 = 19008;
          goto LABEL_5;
        }
        ChunkData = uselect_AddGCRAction(a1, (uint64_t)v23, (uint64_t *)&v40);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_32;
        v24 = v45;
        v25 = *v45;
        v26 = v40;
        *v40 = v25;
        v45 = v24 + 1;
        v27 = v24[1];
        *((_BYTE *)v26 + 4) = v27;
        if (v25 - 7 >= 2)
        {
          v28 = *((unsigned __int16 *)v24 + 1);
          v29 = 4;
        }
        else
        {
          v28 = *((_DWORD *)v24 + 1);
          v29 = 8;
        }
        v26[2] = v28;
        v45 = &v24[v29];
        v17 = 19008;
        if (v25 > 8)
          goto LABEL_5;
        v36 = 1 << v25;
        if ((v36 & 0x72) != 0)
          break;
        if ((v36 & 0xC) != 0)
        {
          v37 = *(_DWORD *)(a3 + 4 * v27 + 3376);
          if (v37 < 0)
          {
            v17 = 19025;
            goto LABEL_5;
          }
          goto LABEL_29;
        }
        if ((v36 & 0x180) == 0)
          goto LABEL_5;
        if ((_DWORD)v27 != 46)
        {
          v39 = 2229280772;
          log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", 19008, 0, v12, v13, v14, v15, v40);
          return v39;
        }
LABEL_30:
        v18 = ssftriff_reader_CloseChunk(a2);
        if ((v18 & 0x80000000) != 0)
          goto LABEL_33;
      }
      v37 = *(_DWORD *)(a3 + 4 * v27 + 3048);
      if (v37 < 0)
      {
        v17 = 19024;
        goto LABEL_5;
      }
LABEL_29:
      *((_BYTE *)v26 + 4) = v37;
      goto LABEL_30;
    }
LABEL_32:
    v18 = ChunkData;
    goto LABEL_33;
  }
  v17 = 19022;
LABEL_5:
  v18 = -2065686524;
  log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"USELECT", v17, 0, v12, v13, v14, v15, v40);
LABEL_33:
  if ((v18 & 0x1FFF) == 0x14)
    return 0;
  else
    return v18;
}

uint64_t uselect_ParseGenericFeatureMap(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChunkData;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t i;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30[2];
  char __dst[256];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v30 = 0;
  v28 = a4;
  ChunkData = ssftriff_reader_GetChunkData(a2, a4, v30, a4, a5, a6, a7, a8);
  if ((ChunkData & 0x80000000) == 0)
  {
    v12 = (unsigned __int16)**(_WORD **)v30;
    if (**(_WORD **)v30)
    {
      v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
      a3[417] = v13;
      if (v13)
      {
        v14 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
        a3[418] = v14;
        if (v14)
        {
          v15 = heap_Calloc(*(_QWORD **)(a1 + 8), v12 + 1, 8);
          a3[419] = v15;
          if (v15)
          {
            v16 = 0;
            v17 = 2;
            v27 = v12;
            while (1)
            {
              __dst[0] = 0;
              v29 = 256;
              ChunkData = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v30, v28, v17, __dst, &v29);
              v18 = v29;
              *(_QWORD *)(a3[417] + 8 * v16) = uselect_strdup(a1, __dst);
              if (!*(_QWORD *)(a3[417] + 8 * v16))
                break;
              v19 = v16;
              v20 = v18 + v17;
              v21 = *(unsigned __int16 *)(*(_QWORD *)v30 + v20);
              *(_QWORD *)(a3[418] + 8 * v16) = heap_Calloc(*(_QWORD **)(a1 + 8), (v21 + 1), 8);
              if (!*(_QWORD *)(a3[418] + 8 * v16))
                break;
              *(_QWORD *)(a3[419] + 8 * v16) = heap_Calloc(*(_QWORD **)(a1 + 8), (v21 + 1), 1);
              if (!*(_QWORD *)(a3[419] + 8 * v16))
                break;
              v17 = v20 + 2;
              if ((_DWORD)v21)
              {
                v22 = 0;
                while (1)
                {
                  v23 = v17;
                  __dst[0] = 0;
                  v29 = 256;
                  ChunkData = ssftriff_reader_ReadStringZ(a2, *(uint64_t *)v30, v28, v17, __dst, &v29);
                  v24 = v29;
                  *(_QWORD *)(*(_QWORD *)(a3[418] + 8 * v19) + 8 * v22) = uselect_strdup(a1, __dst);
                  if (!*(_QWORD *)(*(_QWORD *)(a3[418] + 8 * v19) + 8 * v22))
                    return 2229280778;
                  v17 += v24;
                  if (++v22 >= v21)
                  {
                    for (i = 0; i != v21; ++i)
                      *(_BYTE *)(*(_QWORD *)(a3[419] + 8 * v19) + i) = *(_BYTE *)(*(_QWORD *)v30
                                                                                + v23
                                                                                + v24
                                                                                + i);
                    v17 = v23 + v24 + i;
                    LODWORD(v12) = v27;
                    break;
                  }
                }
              }
              v16 = v19 + 1;
              if ((int)v19 + 1 >= v12)
                return ChunkData;
            }
          }
        }
      }
      return 2229280778;
    }
  }
  return ChunkData;
}

uint64_t uselect_ParseVoicePartChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1, _DWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ChunkData;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int Position;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int SubChunkInfo;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned int *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int v97;

  v97 = a4;
  v11 = *(_QWORD *)(a3 + 3552);
  if (cstdlib_strcmp(__s1, "CTUN"))
  {
    if (cstdlib_strcmp(__s1, "CNT0"))
    {
      if (cstdlib_strcmp(__s1, "TAB0"))
      {
        if (cstdlib_strcmp(__s1, "XTNU"))
        {
          if (cstdlib_strcmp(__s1, "SYMB"))
          {
            if (cstdlib_strcmp(__s1, "SYLC"))
            {
              if (cstdlib_strcmp(__s1, "UNIT"))
              {
                if (cstdlib_strcmp(__s1, "PREU"))
                {
                  if (cstdlib_strcmp(__s1, "TRI "))
                  {
                    ChunkData = 0;
                    *a6 = 0;
                    return ChunkData;
                  }
                  v96 = 0;
                  Position = ssftriff_reader_GetPosition(a2);
                  v95 = 0;
                  v72 = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v95, v67, v68, v69, v70, v71);
                  if ((v72 & 0x80000000) != 0)
                    return v72;
                  v77 = 0;
                  ++*(_WORD *)(v11 + 104);
                  while (1)
                  {
                    v94 = ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, &v97, 0, v73, v74, v75, v76);
                    if (!cstdlib_strcmp(__s1, "TRIL"))
                      break;
                    v80 = cstdlib_strcmp(__s1, "TRIR");
                    if (v80)
                      v81 = 4;
                    else
                      v81 = 1;
                    if (!v80)
                      goto LABEL_56;
LABEL_68:
                    if ((v77 & 0x1FFF) == 0x14)
                      v77 = 0;
                    if (v77 >= 0)
                      v92 = v94;
                    else
                      v92 = v77;
                    if ((v92 & 0x80000000) == 0)
                    {
                      v92 = ssftriff_reader_CloseChunk(a2);
                      if ((v92 & 0x80000000) == 0)
                        continue;
                    }
                    if ((v92 & 0x1FFF) == 0x14)
                      return 0;
                    else
                      return v92;
                  }
                  v81 = 0;
LABEL_56:
                  if ((v77 & 0x80000000) == 0)
                  {
                    SubChunkInfo = uselect_GetSubChunkInfo(a2, v95, Position, (__int32 *)__s1, &v97, &v96, v78, v79);
                    if (SubChunkInfo < 0)
                    {
                      v77 = SubChunkInfo;
                    }
                    else
                    {
                      v83 = v11 + 4 * v81;
                      v84 = (_QWORD *)(v11 + 8 * v81);
                      v93 = (unsigned int *)(v83 + 248);
                      v85 = v84 + 32;
                      v86 = v84 + 29;
                      v87 = (unsigned int *)(v83 + 204);
                      v88 = v84 + 27;
                      do
                      {
                        if (cstdlib_strcmp(__s1, "HAIN"))
                        {
                          if (cstdlib_strcmp(__s1, "OFCT"))
                          {
                            if (!cstdlib_strcmp(__s1, "TABL"))
                            {
                              *v93 = v97 >> 2;
                              *v85 = v96;
                            }
                          }
                          else
                          {
                            *v86 = v96;
                          }
                        }
                        else
                        {
                          *v87 = v97 >> 2;
                          *v88 = v96;
                        }
                        v91 = uselect_GetSubChunkInfo(a2, v95, Position, (__int32 *)__s1, &v97, &v96, v89, v90);
                      }
                      while ((v91 & 0x80000000) == 0);
                      v77 = v91;
                    }
                  }
                  goto LABEL_68;
                }
                v96 = 0;
                ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v47, v48, v49, v50, v51);
                if ((ChunkData & 0x80000000) != 0)
                  return ChunkData;
                v60 = 2229280772;
                ++*(_WORD *)(v11 + 104);
                v64 = *(_DWORD *)(v11 + 108);
                if (v64 && a4 >> 2 == v64)
                {
                  *(_QWORD *)(v11 + 272) = v96;
                  return ChunkData;
                }
                return v60;
              }
              v96 = 0;
              ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v42, v43, v44, v45, v46);
              if ((ChunkData & 0x80000000) != 0)
                return ChunkData;
              v60 = 2229280772;
              ++*(_WORD *)(v11 + 104);
              v63 = *(_DWORD *)(v11 + 108);
              if (!v63 || a4 % v63)
                return v60;
              *(_BYTE *)(v11 + 200) = a4 / v63;
              *(_QWORD *)(v11 + 192) = v96;
            }
            else
            {
              v96 = 0;
              ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v37, v38, v39, v40, v41);
              if ((ChunkData & 0x80000000) != 0)
                return ChunkData;
              v60 = 2229280772;
              ++*(_WORD *)(v11 + 104);
              v62 = *(_DWORD *)(v11 + 108);
              if (!v62 || a4 % v62)
                return v60;
              *(_BYTE *)(v11 + 184) = a4 / v62;
              *(_QWORD *)(v11 + 176) = v96;
            }
          }
          else
          {
            v96 = 0;
            ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v32, v33, v34, v35, v36);
            if ((ChunkData & 0x80000000) != 0)
              return ChunkData;
            v60 = 2229280772;
            ++*(_WORD *)(v11 + 104);
            v61 = *(_DWORD *)(v11 + 108);
            if (!v61 || a4 % v61)
              return v60;
            *(_BYTE *)(v11 + 168) = a4 / v61;
            *(_QWORD *)(v11 + 160) = v96;
          }
          return ChunkData;
        }
        v96 = 0;
        ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v27, v28, v29, v30, v31);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v11 + 104);
          *(_QWORD *)(v11 + 136) = v96;
          *(_DWORD *)(v11 + 144) = a4 >> 2;
          v53 = *(unsigned int *)(v11 + 108);
          if ((_DWORD)v53)
          {
            v54 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (v53 >> 3) + 2);
            *(_QWORD *)(v11 + 152) = v54;
            if (v54)
            {
              if (*(_DWORD *)(v11 + 144))
              {
                v55 = 0;
                v56 = *(_QWORD *)(v11 + 136);
                do
                {
                  v57 = *(unsigned int *)(v56 + 4 * v55);
                  v58 = v57 >> 3;
                  v59 = v57 & 7;
                  if (v59)
                    ++v58;
                  *(_BYTE *)(*(_QWORD *)(v11 + 152) + v58) |= 1 << (v59 ^ 7);
                  v56 = *(_QWORD *)(v11 + 136);
                  v55 += *(_DWORD *)(v56 + 4 * (v55 + 1)) + 2;
                }
                while (v55 < *(_DWORD *)(v11 + 144));
              }
            }
            else
            {
              return 2229280778;
            }
          }
          else
          {
            return 2229280772;
          }
        }
      }
      else
      {
        v96 = 0;
        ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v22, v23, v24, v25, v26);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v11 + 104);
          *(_QWORD *)(v11 + 128) = v96;
        }
      }
    }
    else
    {
      v96 = 0;
      ChunkData = ssftriff_reader_DetachChunkData(a2, (void **)(v11 + 8 * *(unsigned __int16 *)(v11 + 104) + 8), &v96, v17, v18, v19, v20, v21);
      if ((ChunkData & 0x80000000) == 0)
      {
        ++*(_WORD *)(v11 + 104);
        *(_QWORD *)(v11 + 120) = v96;
        *(_WORD *)(v11 + 112) = a4 >> 1;
      }
    }
  }
  else
  {
    v96 = 0;
    ChunkData = ssftriff_reader_GetChunkData(a2, a4, &v96, v12, v13, v14, v15, v16);
    if ((ChunkData & 0x80000000) == 0)
      *(_DWORD *)(v11 + 108) = *v96;
  }
  return ChunkData;
}

uint64_t uselect_LoadRiffStringTable(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t *a5)
{
  unint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  _BYTE *v16;
  unsigned int v17;

  v6 = (unsigned __int16)*a3;
  if (*a3)
  {
    v11 = heap_Calloc(*(_QWORD **)(a1 + 8), v6 + 1, 8);
    *a5 = v11;
    if (v11)
    {
      v12 = 0;
      v13 = (uint64_t)(a3 + 1);
      v14 = a4 - 2;
      do
      {
        v17 = 0;
        result = ssftriff_reader_ReadStringW(a2, v13, v14, 0, 0, &v17);
        if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 9)
          break;
        *(_QWORD *)(*a5 + 8 * v12) = heap_Alloc(*(_QWORD *)(a1 + 8), v17);
        v16 = *(_BYTE **)(*a5 + 8 * v12);
        if (!v16)
          return 2229280778;
        result = ssftriff_reader_ReadStringW(a2, v13, v14, 0, v16, &v17);
        if ((result & 0x80000000) != 0)
          break;
        v13 += v17 - 1 + 2;
        v14 -= v17 + 1;
        ++v12;
      }
      while (v12 < v6);
    }
    else
    {
      return 2229280778;
    }
  }
  else
  {
    result = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t uselect_GetSubChunkInfo(uint64_t a1, uint64_t a2, int a3, __int32 *a4, unsigned int *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int Position;
  uint64_t v15;

  result = ssftriff_reader_OpenChunk(a1, a4, a5, 0, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if ((result & 0x80000000) != 0)
  {
    v15 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    Position = ssftriff_reader_GetPosition(a1);
    result = ssftriff_reader_CloseChunk(a1);
    v15 = a2 + (Position - a3);
  }
  *a6 = v15;
  return result;
}

uint64_t uselect_LoadRiffMatrix2D_U8(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v10;

  v5 = 2229280772;
  v6 = *a2;
  *a4 = v6;
  v7 = a2[1];
  a4[1] = v7;
  v8 = v7 * (unint64_t)v6;
  if (v8 + 4 <= (unint64_t)a3)
  {
    v10 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v8);
    *((_QWORD *)a4 + 1) = v10;
    if (v10)
    {
      cstdlib_memcpy(v10, a2 + 2, a4[1] * (unint64_t)*a4);
      return 0;
    }
    else
    {
      return 2229280778;
    }
  }
  return v5;
}

uint64_t uselect_AddGenericContextRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v5 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, 24);
  *(_QWORD *)a3 = v5;
  if (!v5)
    return 2229280778;
  *v5 = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8) = 0;
  *(_QWORD *)(*(_QWORD *)a3 + 16) = 0;
  v6 = *(_QWORD *)(a2 + 3520);
  if (v6)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
    v8 = (_QWORD *)(v7 + 16);
  }
  else
  {
    v8 = (_QWORD *)(a2 + 3520);
  }
  result = 0;
  *v8 = *(_QWORD *)a3;
  return result;
}

uint64_t uselect_AddGCRCondition(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 48);
  *a3 = v5;
  if (!v5)
    return 2229280778;
  *(_WORD *)v5 = -256;
  *(_BYTE *)(v5 + 2) = 0;
  cstdlib_memset((void *)(v5 + 3), 0, 0x20uLL);
  *(_QWORD *)(*a3 + 40) = 0;
  v6 = *a2;
  if (*a2)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 40);
    }
    while (v6);
    a2 = (uint64_t *)(v7 + 40);
  }
  result = 0;
  *a2 = *a3;
  return result;
}

uint64_t uselect_AddGCRAction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 24);
  *a3 = v5;
  if (!v5)
    return 2229280778;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = -1;
  *(_DWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  v6 = v8;
  if (v8)
  {
    do
    {
      v9 = v6;
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
    v7 = (uint64_t *)(v9 + 16);
  }
  result = 0;
  *v7 = *a3;
  return result;
}

char *uselect_strdup(uint64_t a1, char *__s)
{
  _QWORD *v3;
  int v4;
  char *v5;
  char *v6;

  if (!__s)
    return 0;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = cstdlib_strlen(__s);
  v5 = (char *)heap_Calloc(v3, (v4 + 1), 1);
  v6 = v5;
  if (v5)
    cstdlib_strcpy(v5, __s);
  return v6;
}

_QWORD *uselect_FreeRiffStringTable(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    if (v4)
    {
      v5 = 0;
      do
      {
        heap_Free((_QWORD *)v3[1], v4);
        v4 = a2[(unsigned __int16)++v5];
      }
      while (v4);
    }
    return heap_Free((_QWORD *)v3[1], (uint64_t)a2);
  }
  return result;
}

uint64_t uselect_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2229280769;
  result = 0;
  *a2 = &IUselect;
  return result;
}

uint64_t get_f0(uint64_t a1, unsigned int a2, _DWORD *a3, int *a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v13 = 0;
  v12 = 0;
  result = uselect_splitGID(a1, a2, &v12, &v13);
  v7 = *(_DWORD *)(*(_QWORD *)v12 + 2604);
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      v8 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
      *a3 = *(unsigned __int8 *)(v8 + 16);
      v9 = (unsigned __int8 *)(v8 + 17);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (!*(_DWORD *)(*(_QWORD *)v12 + 2656))
  {
LABEL_6:
    v10 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v12 + 192) + v13 * *(unsigned __int8 *)(v12 + 200);
LABEL_7:
  *a3 = *(unsigned __int8 *)(v10 + 4);
  v9 = (unsigned __int8 *)(v10 + 5);
LABEL_8:
  v11 = *v9;
  *a4 = v11;
  if (*a3)
  {
    *a3 = ScaledLogToHz[3 * *a3 - 270];
    v11 = *a4;
  }
  if (v11)
    *a4 = ScaledLogToHz[3 * v11 - 270];
  return result;
}

uint64_t uselect_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2229280775;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 34633;
  }
  return result;
}

uint64_t uselect_ClassClose()
{
  return 0;
}

uint64_t uselect_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Param;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  *a5 = 0;
  *((_DWORD *)a5 + 2) = 0;
  inited = InitRsrcFunction(a3, a4, &v38);
  if ((inited & 0x80000000) != 0)
    return inited;
  v11 = 2229280778;
  if ((safeh_HandleCheck(a1, a2, 34633, 408) & 0x80000000) != 0)
    return 2229280776;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v38 + 8), 1, 952);
  if (!v12)
  {
    log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"USELECT", 19000, 0, v13, v14, v15, v16, v34);
    return v11;
  }
  v17 = (uint64_t)v12;
  *v12 = a3;
  v12[1] = a4;
  v18 = v38;
  v12[2] = v38;
  v12[3] = a1;
  *a5 = (uint64_t)v12;
  *((_DWORD *)a5 + 2) = 34632;
  v19 = heap_Calloc(*(_QWORD **)(v18 + 8), 1, 3656);
  *(_QWORD *)(v17 + 776) = v19;
  if (!v19)
  {
    log_OutPublic(*(_QWORD *)(v38 + 32), (uint64_t)"USELECT", 19000, 0, v20, v21, v22, v23, v34);
    goto LABEL_30;
  }
  Param = uselect_ObjReopen((_WORD **)*a5, a5[1]);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "minphrase", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselearlyemission", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectusetriphonecache", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightnoreusebias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightdurationbias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectweightpitchbias", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectonlinereduction", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  Param = uselect_GetParam(v17, "uselectmaxcandspruning", 1);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v25 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v25, "minphrase", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v26 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v26, "uselearlyemission", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v27 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v27, "uselectusetriphonecache", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v28 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v28, "uselectweightnoreusebias", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v29 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v29, "uselectweightdurationbias", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v30 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v30, "uselectweightpitchbias", &v34);
  if ((Param & 0x80000000) != 0)
    goto LABEL_27;
  v31 = *(_QWORD *)(v38 + 40);
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
  *(_QWORD *)&v35 = uselect_ParamLearnChange;
  Param = paramc_ListenerAdd(v31, "uselectonlinereduction", &v34);
  if ((Param & 0x80000000) != 0
    || (v32 = *(_QWORD *)(v38 + 40),
        *(_QWORD *)&v34 = v17,
        *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange,
        *(_QWORD *)&v35 = uselect_ParamLearnChange,
        Param = paramc_ListenerAdd(v32, "uselectmaxcandspruning", &v34),
        (Param & 0x80000000) != 0)
    || (Param = objc_GetObject(*(_QWORD *)(v38 + 48), (uint64_t)"SYNTHSTREAM", &v37), (Param & 0x80000000) != 0))
  {
LABEL_27:
    v11 = Param;
    goto LABEL_30;
  }
  *(_QWORD *)(v17 + 88) = *(_QWORD *)(v37 + 8);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  cstdlib_memset(&v34, 0, 0x28uLL);
  LOBYTE(v34) = 1;
  *((_QWORD *)&v34 + 1) = &IUselect;
  v35 = *(_OWORD *)a5;
  v36 = 0;
  v11 = objc_RegisterObject(*(_QWORD *)(v38 + 48), (uint64_t)"USELECT", &v34);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_30:
    uselect_ObjClose(*a5, a5[1]);
    *a5 = 0;
    *((_DWORD *)a5 + 2) = 0;
    return v11;
  }
  *(_DWORD *)(v17 + 32) = 1;
  return v11;
}

uint64_t uselect_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t (*v35)(uint64_t, char *);

  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 88))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    v3 = *(_QWORD *)(a1 + 816);
    if (v3 && *(_QWORD *)(a1 + 40))
    {
      v4 = *(unsigned __int8 *)(a1 + 908);
      if (*(_BYTE *)(a1 + 908))
      {
        v5 = 0;
        v6 = 24;
        do
        {
          if (*(_QWORD *)(v3 + v6))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v3 + v6));
            v3 = *(_QWORD *)(a1 + 816);
            *(_QWORD *)(v3 + v6) = 0;
            v4 = *(unsigned __int8 *)(a1 + 908);
          }
          ++v5;
          v6 += 112;
        }
        while (v5 < 3 * (unint64_t)v4);
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v3);
      *(_QWORD *)(a1 + 816) = 0;
    }
    v7 = *(_QWORD *)(a1 + 856);
    if (v7)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v7);
      *(_QWORD *)(a1 + 856) = 0;
    }
    v8 = *(_QWORD *)(a1 + 864);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v8);
      *(_QWORD *)(a1 + 864) = 0;
    }
    v9 = *(_QWORD *)(a1 + 888);
    if (v9)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v9);
      *(_QWORD *)(a1 + 888) = 0;
    }
    v10 = *(_QWORD *)(a1 + 896);
    if (v10)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v10);
      *(_QWORD *)(a1 + 896) = 0;
    }
    v11 = *(_QWORD *)(a1 + 936);
    if (v11)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11);
      *(_QWORD *)(a1 + 936) = 0;
    }
    v12 = *(_QWORD *)(a1 + 944);
    if (v12)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v12);
      *(_QWORD *)(a1 + 944) = 0;
    }
    uselect_ResetUnitSelector(a1, 0);
    v13 = *(_QWORD **)(a1 + 776);
    if (v13)
    {
      DeallocBufferUnitSelector((_QWORD *)a1, v13);
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 776));
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v14, "minphrase", &v34);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v15, "uselearlyemission", &v34);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v16, "uselectusetriphonecache", &v34);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v17, "uselectweightnoreusebias", &v34);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v18, "uselectweightdurationbias", &v34);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v19, "uselectweightpitchbias", &v34);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v20, "uselectonlinereduction", &v34);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v21, "uselectmaxcandspruning", &v34);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v23 = *(_BYTE **)(a1 + 80);
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = uselect_ParamCheckChange;
    v35 = uselect_ParamLearnChange;
    paramc_ListenerRemove(v22, v23, &v34);
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", "");
    v24 = *(_QWORD *)(a1 + 80);
    if (v24)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
      *(_QWORD *)(a1 + 80) = 0;
    }
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectrawdataversion", "");
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectreductionversion", "");
    v25 = *(_QWORD *)(a1 + 40);
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 24);
      if (!v26 || (v27 = *(_QWORD *)(v26 + 48)) == 0)
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
      objc_ReleaseObject(v27, v25 + 152);
    }
    v28 = *(_DWORD *)(a1 + 48);
    if (v28 >= 2)
    {
      v29 = v28 - 1;
      do
        uselect_RemoveDataPartClose(a1, v29--);
      while (v29);
    }
    v30 = *(uint64_t **)(a1 + 72);
    if (v30)
    {
      if (!*v30
        || (heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *v30),
            **(_QWORD **)(a1 + 72) = 0,
            (v30 = *(uint64_t **)(a1 + 72)) != 0))
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v30);
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
    v31 = *(_QWORD *)(a1 + 56);
    if (v31)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v31);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v32 = *(_QWORD *)(a1 + 64);
    if (v32)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v32);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (*(_DWORD *)(a1 + 32) == 1)
      objc_UnregisterObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"USELECT");
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
  }
  return 0;
}

uint64_t uselect_ObjReopen(_WORD **a1, int a2)
{
  uint64_t BrokerString;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AddRefCountedObject;
  _WORD *v31;
  _QWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  uint64_t v57;
  __int128 v58;
  uint64_t (*v59)(uint64_t, char *);
  char *__s1;
  char *__s;
  int v62;
  char __dst[256];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  __s1 = 0;
  __s = 0;
  cstdlib_strcpy(__dst, "");
  if ((safeh_HandleCheck((uint64_t)a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"voiceaddon", "");
  BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __dst, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v5 = (const char *)a1[5];
    if (v5)
    {
      v6 = BrokerString;
      if (!cstdlib_strcmp(v5 + 152, __dst))
        goto LABEL_21;
    }
  }
  v7 = uselect_CreateBrokerString((uint64_t)a1[2], __dst, 0x100uLL, 0, 0, 1, 0);
  if ((v7 & 0x80000000) != 0)
  {
    __dst[0] = 0;
  }
  else
  {
    v6 = v7;
    v8 = (const char *)a1[5];
    if (!v8 || cstdlib_strcmp(v8 + 152, __dst))
    {
      v9 = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __dst, &v62);
      v10 = v9;
      if (!v62)
        __dst[0] = 0;
      if ((v9 & 0x80001FFF) == 0x8000000A)
        return v10;
    }
    if (__dst[0])
      goto LABEL_21;
  }
  v11 = uselect_CreateBrokerString((uint64_t)a1[2], __dst, 0x100uLL, 0, 0, 0, 0);
  v6 = v11;
  if ((v11 & 0x80000000) != 0)
    return v11;
  v12 = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __dst, &v62);
  v10 = v12;
  if (!v62)
    __dst[0] = 0;
  if ((v12 & 0x80001FFF) != 0x8000000A)
  {
    if (__dst[0]
      || (v6 = uselect_CreateBrokerString((uint64_t)a1[2], __dst, 0x100uLL, 0, 0, 0, 1),
          v10 = v6,
          (v6 & 0x80000000) == 0))
    {
LABEL_21:
      v13 = (const char *)a1[5];
      if (!v13)
        goto LABEL_47;
      v10 = v6;
      if (!cstdlib_strcmp(v13 + 152, __dst))
        goto LABEL_91;
      DeallocUnitSelectorMemory_NRowsDependency(a1);
      v14 = (uint64_t)a1[107];
      if (v14)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v14);
        a1[107] = 0;
      }
      v15 = (uint64_t)a1[111];
      if (v15)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v15);
        a1[111] = 0;
      }
      v16 = (uint64_t)a1[112];
      if (v16)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v16);
        a1[112] = 0;
      }
      uselect_ResetUnitSelector((uint64_t)a1, 0);
      v17 = a1[3];
      if (!v17 || (v18 = *((_QWORD *)v17 + 6)) == 0)
        v18 = *((_QWORD *)a1[2] + 6);
      v10 = objc_ReleaseObject(v18, (uint64_t)(a1[5] + 76));
      a1[5] = 0;
      *(_QWORD *)a1[97] = 0;
      v19 = *((_DWORD *)a1 + 12);
      if (v19 >= 2)
      {
        v20 = v19 - 1;
        do
          uselect_RemoveDataPartClose((uint64_t)a1, v20--);
        while (v20);
      }
      v21 = (uint64_t *)a1[9];
      if (v21)
      {
        if (!*v21
          || (heap_Free(*((_QWORD **)a1[2] + 1), *v21), *(_QWORD *)a1[9] = 0, (v21 = (uint64_t *)a1[9]) != 0))
        {
          heap_Free(*((_QWORD **)a1[2] + 1), (uint64_t)v21);
          a1[9] = 0;
        }
      }
      v22 = (uint64_t)a1[7];
      if (v22)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v22);
        a1[7] = 0;
      }
      v23 = (uint64_t)a1[8];
      if (v23)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v23);
        a1[8] = 0;
      }
      *((_DWORD *)a1 + 12) = 0;
      v24 = *((_QWORD *)a1[2] + 5);
      v25 = a1[10];
      *(_QWORD *)&v58 = a1;
      *((_QWORD *)&v58 + 1) = uselect_ParamCheckChange;
      v59 = uselect_ParamLearnChange;
      paramc_ListenerRemove(v24, v25, &v58);
      v26 = (uint64_t)a1[10];
      if (v26)
      {
        heap_Free(*((_QWORD **)a1[2] + 1), v26);
        a1[10] = 0;
      }
      if ((v10 & 0x80000000) == 0)
      {
LABEL_91:
        if (!a1[5])
        {
LABEL_47:
          v57 = 0;
          v27 = a1[3];
          if (v27 && (v28 = *((_QWORD *)v27 + 6)) != 0)
          {
            v29 = (uint64_t)a1[2];
          }
          else
          {
            v29 = (uint64_t)a1[2];
            v28 = *(_QWORD *)(v29 + 48);
          }
          AddRefCountedObject = objc_GetAddRefCountedObject(v28, (uint64_t)__dst, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, _OWORD *))uselect_ObjcVoiceClose, v29, &v57);
          if ((AddRefCountedObject & 0x80000000) != 0)
            return AddRefCountedObject;
          v10 = 2229280778;
          v31 = *(_WORD **)(v57 + 32);
          a1[5] = v31;
          *(_QWORD *)a1[97] = v31;
          *((_DWORD *)a1 + 12) = 1;
          v32 = (_QWORD *)heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 8);
          a1[7] = v32;
          if (v32)
          {
            *v32 = *((_QWORD *)a1[5] + 444);
            v33 = (_DWORD *)heap_Calloc(*((_QWORD **)a1[2] + 1), *((unsigned int *)a1 + 12), 4);
            a1[8] = v33;
            if (v33)
            {
              *v33 = 0;
              v34 = heap_Calloc(*((_QWORD **)a1[2] + 1), *((unsigned int *)a1 + 12), 8);
              a1[9] = (_WORD *)v34;
              if (v34)
              {
                *(_QWORD *)a1[9] = heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 1);
                v35 = (paramc_ParamGetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0
                    ? 0
                    : cstdlib_strlen(__s) + 1;
                v36 = (paramc_ParamGetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"vopversion", &__s1) & 0x80000000) != 0
                   || !cstdlib_strcmp(__s1, "0.0.0")
                    ? 0
                    : cstdlib_strlen(__s1) + 1;
                v37 = (_QWORD *)*((_QWORD *)a1[2] + 1);
                v38 = cstdlib_strlen((const char *)a1[5]);
                v39 = (char *)heap_Calloc(v37, 1, (v35 + v36 + v38 + 14));
                a1[10] = v39;
                if (v39)
                {
                  cstdlib_strcpy(v39, "voiceaddons.");
                  v40 = cstdlib_strlen((const char *)a1[10]);
                  if (cstdlib_strlen((const char *)a1[5]))
                  {
                    v41 = 0;
                    v42 = 0;
                    do
                    {
                      *((_BYTE *)a1[10] + v40 + v42++) = cstdlib_tolower(*((char *)a1[5] + v41));
                      v41 = v42;
                    }
                    while (cstdlib_strlen((const char *)a1[5]) > v42);
                  }
                  if (v35)
                  {
                    cstdlib_strcat((char *)a1[10], ".");
                    cstdlib_strcat((char *)a1[10], __s);
                  }
                  if (v36)
                  {
                    cstdlib_strcat((char *)a1[10], ".");
                    cstdlib_strcat((char *)a1[10], __s1);
                  }
                  AddRefCountedObject = uselect_GetParam((uint64_t)a1, (char *)a1[10], 1);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  v43 = *((_QWORD *)a1[2] + 5);
                  v44 = a1[10];
                  *(_QWORD *)&v58 = a1;
                  *((_QWORD *)&v58 + 1) = uselect_ParamCheckChange;
                  v59 = uselect_ParamLearnChange;
                  AddRefCountedObject = paramc_ListenerAdd(v43, v44, &v58);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  AddRefCountedObject = uselect_GetParam((uint64_t)a1, "uselectmaxcandspruning", 0);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  AddRefCountedObject = uselect_ResetUnitSelector((uint64_t)a1, 500);
                  if ((AddRefCountedObject & 0x80000000) != 0)
                    return AddRefCountedObject;
                  v45 = heap_Calloc(*((_QWORD **)a1[2] + 1), 1, 74);
                  a1[107] = (_WORD *)v45;
                  v50 = a1[2];
                  if (v45)
                  {
                    v51 = heap_Calloc(*((_QWORD **)v50 + 1), 1, 160);
                    a1[111] = (_WORD *)v51;
                    v50 = a1[2];
                    if (v51)
                    {
                      v52 = heap_Calloc(*((_QWORD **)v50 + 1), (unsigned __int16)a1[5][1483], 24);
                      a1[112] = (_WORD *)v52;
                      if (v52)
                      {
                        v53 = a1[5];
                        v54 = *((_DWORD *)v53 + 770);
                        if ((v54 & 0x80000000) != 0 && (v54 = *((_DWORD *)v53 + 769), (v54 & 0x80000000) != 0))
                          v55 = 5000;
                        else
                          v55 = 5 * *(_DWORD *)(*((_QWORD *)v53 + 371) + 32 * v54 + 4);
                        *((_DWORD *)a1 + 226) = v55;
                        AddRefCountedObject = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)v53 + 64);
                        if ((AddRefCountedObject & 0x80000000) == 0)
                          return paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[5] + 140);
                        return AddRefCountedObject;
                      }
                      v50 = a1[2];
                    }
                  }
                  log_OutPublic(*((_QWORD *)v50 + 4), (uint64_t)"USELECT", 19000, 0, v46, v47, v48, v49, v57);
                }
              }
            }
          }
          else
          {
            *((_DWORD *)a1 + 12) = 0;
          }
        }
      }
    }
  }
  return v10;
}

uint64_t uselect_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) == 0)
  {
    *(_WORD *)(a1 + 736) = 0;
    *(_BYTE *)(a1 + 744) = 1;
    v7 = *(_DWORD *)(a1 + 752);
    if (!v7 || v7 != 1 && (v7 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 2616), v7 != 1))
      v7 = 0;
    v8 = 0;
    v9 = "application/x-realspeak-feat-vector";
    *(_DWORD *)(a1 + 756) = v7;
    while (1)
    {
      if (*(unsigned __int16 *)(a1 + 736) > 0xFuLL)
        goto LABEL_22;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 88) + 64))(a3, a4, 78, v9, 0, 0, a1 + 40 * *(unsigned __int16 *)(a1 + 736) + 104);
      if ((v10 & 0x80000000) != 0)
      {
        v12 = v10;
        if (cstdlib_strncmp(v9, "application/x-realspeak-cspp-", 0x1DuLL)
          && cstdlib_strcmp(v9, "application/x-realspeak-usnoreusebias;version=4.0")
          && cstdlib_strcmp(v9, "application/x-realspeak-usprosodybias;version=4.0")
          && cstdlib_strcmp(v9, "application/x-realspeak-usfrozen;version=4.0"))
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19001, (uint64_t)"%s%s", v13, v14, v15, v16, "layer");
LABEL_35:
          v24 = v12;
          if (!*(_WORD *)(a1 + 736))
          {
LABEL_32:
            *(_WORD *)(a1 + 736) = 0;
            return v12;
          }
LABEL_23:
          v25 = 0;
          v26 = (_QWORD *)(a1 + 96);
          do
          {
            v27 = v26[1];
            if (v27
              && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v27, v26[2]) & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, (uint64_t)"%s%s", v28, v29, v30, v31, "layer");
            }
            v32 = v26[3];
            if (v32
              && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v32, v26[4]) & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, (uint64_t)"%s%s", v33, v34, v35, v36, "layer");
            }
            ++v25;
            v26 += 5;
          }
          while (v25 < *(unsigned __int16 *)(a1 + 736));
          v12 = v24;
          goto LABEL_32;
        }
      }
      else
      {
        v11 = *(_WORD *)(a1 + 736);
        *(_QWORD *)(a1 + 40 * v11 + 96) = v9;
        *(_WORD *)(a1 + 736) = v11 + 1;
      }
      v9 = uselect_ProcessStart_szINPUT_STREAMS[++v8];
      if (v8 == 4)
      {
        v17 = "application/x-realspeak-usmarkers-u16;version=4.0";
        v18 = 1u;
        while (*(unsigned __int16 *)(a1 + 736) <= 0xFuLL)
        {
          v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 88) + 64))(a3, a4, 78, v17, 0, 1, a1 + 40 * *(unsigned __int16 *)(a1 + 736) + 120);
          if ((v12 & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19002, (uint64_t)"%s%s", v19, v20, v21, v22, "layer");
            goto LABEL_35;
          }
          v23 = *(_WORD *)(a1 + 736);
          *(_QWORD *)(a1 + 40 * v23 + 96) = v17;
          *(_WORD *)(a1 + 736) = v23 + 1;
          v17 = uselect_ProcessStart_szOUTPUT_STREAMS[v18++];
          if (v18 == 7)
            return v12;
        }
LABEL_22:
        v24 = 2229280777;
        goto LABEL_23;
      }
    }
  }
  return 2229280776;
}

uint64_t uselect_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int16 *v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  char v158;
  void *__src;
  int v160;
  size_t __n;

  __n = 0;
  v7 = -2065686521;
  v160 = 0;
  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  __src = 0;
  v158 = 0;
  *a5 = 1;
  if (*(_BYTE *)(a1 + 744) != 1)
  {
    v25 = 0;
    v26 = *(_WORD *)(a1 + 748);
    *(_WORD *)(a1 + 746) = v26;
    v27 = *(_DWORD *)(a1 + 768);
    goto LABEL_16;
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, char *, int *))(*(_QWORD *)(a1 + 88) + 144))(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), (char *)&__n + 4, &v160);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (HIDWORD(__n))
  {
    v12 = uselect_ReadDirectStart(a1, "application/x-realspeak-feat-vector", &__src, (_DWORD *)&__n + 1);
    v17 = HIDWORD(__n);
    *(_DWORD *)(a1 + 768) = (159072863 * (unint64_t)(HIDWORD(__n) >> 5)) >> 32;
    if ((v12 & 0x80000000) == 0)
    {
      v18 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v17);
      *(_QWORD *)(a1 + 760) = v18;
      if (!v18)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v19, v20, v21, v22, v155);
        v7 = -2065686518;
        goto LABEL_145;
      }
      cstdlib_memcpy(v18, __src, HIDWORD(__n));
      v17 = HIDWORD(__n);
    }
    if (*(_WORD *)(a1 + 736))
    {
      v23 = 0;
      v24 = (_QWORD *)(a1 + 112);
      while (cstdlib_strcmp((const char *)*(v24 - 2), "application/x-realspeak-feat-vector"))
      {
        ++v23;
        v24 += 5;
        if (v23 >= *(unsigned __int16 *)(a1 + 736))
          goto LABEL_12;
      }
      v140 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 88) + 96))(*(v24 - 1), *v24, v17);
      if ((v140 & 0x80000000) == 0)
      {
        v141 = *(_DWORD *)(a1 + 768);
        if (v141 >> 15)
          goto LABEL_145;
        v142 = *(_QWORD *)(a1 + 776);
        *(_WORD *)(v142 + 3524) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 3578) * v141;
        v143 = uselect_ReadDirectStart(a1, "application/x-realspeak-usfrozen;version=4.0",
                 (_QWORD *)(v142 + 3632),
                 &__n);
        v144 = *(_QWORD *)(a1 + 776);
        if (v143 < 0)
          *(_QWORD *)(v144 + 3632) = 0;
        if ((uselect_ReadDirectStart(a1, "application/x-realspeak-usnoreusebias;version=4.0",
                (_QWORD *)(v144 + 3640),
                &__n) & 0x80000000) != 0)
        {
          v145 = *(_QWORD *)(a1 + 776);
          *(_QWORD *)(v145 + 3640) = 0;
        }
        else
        {
          v145 = *(_QWORD *)(a1 + 776);
          if (__n / 0x1F8 != *(unsigned __int16 *)(v145 + 3524))
          {
            *(_QWORD *)(v145 + 3640) = 0;
            goto LABEL_145;
          }
        }
        if ((uselect_ReadDirectStart(a1, "application/x-realspeak-usprosodybias;version=4.0",
                (_QWORD *)(v145 + 3648),
                &__n) & 0x80000000) != 0)
        {
          v146 = *(_QWORD *)(a1 + 776);
          *(_QWORD *)(v146 + 3648) = 0;
        }
        else
        {
          v146 = *(_QWORD *)(a1 + 776);
          if (*(unsigned __int16 *)(v146 + 3524) != __n >> 3)
          {
            *(_QWORD *)(v146 + 3648) = 0;
            goto LABEL_145;
          }
        }
        v147 = *(_WORD *)(a1 + 768);
        *(_WORD *)(v146 + 10) = v147;
        *(_WORD *)(v146 + 3524) = *(_WORD *)(*(_QWORD *)(a1 + 40) + 3578) * v147;
        v52 = AllocBufferUnitSelector(a1, v146);
        if ((v52 & 0x80000000) != 0)
          goto LABEL_144;
        v27 = *(_DWORD *)(a1 + 768);
        if (v27)
        {
          v149 = *(_QWORD *)(a1 + 40);
          v150 = (unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 2);
          v151 = *(unsigned int *)(a1 + 768);
          do
          {
            v152 = *v150;
            if (*(unsigned __int8 *)(v149 + v152 + 2144) != 255
              && !*(_DWORD *)(v149 + 2684)
              && !*(_WORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 56) + 120)
                           + 2 * (int)(2 * (v152 - *(unsigned __int8 *)(v149 + 2496)))))
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19009, (uint64_t)"%s%d", v148, v8, v9, v10, "phoneme");
              v7 = -2065686500;
              goto LABEL_145;
            }
            v150 += 864;
            --v151;
          }
          while (v151);
          if (v27 == 2)
          {
            v153 = *(_QWORD *)(a1 + 760);
            if (*(_BYTE *)(v153 + 2) == 35)
            {
              v25 = *(unsigned __int8 *)(v153 + 866) == 35;
              goto LABEL_150;
            }
          }
        }
        v25 = 0;
LABEL_150:
        v26 = 0;
        *(_WORD *)(a1 + 746) = 0;
LABEL_16:
        v28 = v27 - 1;
        *(_WORD *)(a1 + 748) = v27 - 1;
        v29 = *(_DWORD *)(a1 + 740);
        if (v29 < 1 || (v30 = v29 + v26 + 1, v30 >= v28))
        {
LABEL_23:
          LOWORD(v31) = v27 - 1;
        }
        else
        {
          v31 = v30;
          v32 = (unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * v30 + 2);
          while (1)
          {
            v33 = *v32;
            if (v33 == 35)
              break;
            if (*(_DWORD *)(a1 + 756) == 1)
            {
              v34 = *(_QWORD *)(a1 + 40);
              if (*(_BYTE *)(v34 + *(unsigned __int8 *)(v34 + v33 + 2144) + 1630) == 83)
                goto LABEL_115;
            }
            v32 += 864;
            if (++v31 >= v28)
              goto LABEL_23;
          }
          v34 = *(_QWORD *)(a1 + 40);
LABEL_115:
          *(_WORD *)(a1 + 748) = v31;
          if (!*(_DWORD *)(v34 + 2616))
            *(_DWORD *)(a1 + 756) = 0;
        }
        if ((__int16)v27 - 1 <= (__int16)v31)
        {
          if (*(_BYTE *)(a1 + 744) == 1)
            v36 = 5;
          else
            v36 = 4;
          *(_BYTE *)(a1 + 744) = v36;
          v35 = 1;
        }
        else
        {
          v35 = 2;
        }
        *a5 = v35;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 3, 0, (uint64_t)"uselect phonemes %d -> %d, state %x", v8, v9, v10, *(__int16 *)(a1 + 746));
        if (v25)
        {
          v37 = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(v37 + 2684))
          {
            v38 = *(unsigned __int8 *)(v37 + 2497);
            v39 = *(unsigned __int8 *)(v37 + 2496);
            v40 = (v38 - v39 + 1);
            v41 = **(_QWORD **)(a1 + 56);
            v42 = (v38 - v39 + 2);
            v43 = v42 * (35 - v39) - v39;
            v44 = (v43 + 35);
            v45 = *(_QWORD *)(v41 + 120);
            if (*(_WORD *)(v45 + 2 * v44))
              v46 = 0;
            else
              v46 = v38 > v39;
            if (v46)
            {
              do
              {
                v44 = v43 + v39;
                if (*(_WORD *)(v45 + 2 * v44))
                  break;
                LOBYTE(v39) = v39 + 1;
              }
              while (v38 > v39);
            }
            v47 = v40 + v40 * v42;
            v48 = *(_QWORD *)(v41 + 128);
            v49 = *(_DWORD *)(v48 + 4 * v44);
            v50 = *(_QWORD *)(a1 + 776);
            v51 = *(_DWORD **)(v50 + 3528);
            v51[2] = v49;
            *v51 = v49;
            LODWORD(v48) = *(_DWORD *)(v48 + 4 * (v44 + v47));
            v51[3] = v48;
            v51[1] = v48;
          }
          else
          {
            v53 = **(_QWORD **)(a1 + 56);
            v54 = *(unsigned __int8 *)(v37 + 2496);
            v55 = 70 - 2 * v54;
            v56 = *(_QWORD *)(v53 + 128);
            v50 = *(_QWORD *)(a1 + 776);
            v57 = *(_DWORD **)(v50 + 3528);
            *v57 = *(_DWORD *)(v56 + 4 * v55);
            v57[2] = *(_DWORD *)(v56 + 4 * v55);
            v58 = 71 - 2 * v54;
            LODWORD(v53) = *(unsigned __int16 *)(*(_QWORD *)(v53 + 120) + 2 * v58) - 1;
            v57[1] = v53 + *(_DWORD *)(v56 + 4 * v58);
            v57[3] = v53 + *(_DWORD *)(v56 + 4 * v58);
          }
          v59 = *(_QWORD **)(v50 + 3536);
          *v59 = 0;
          v59[1] = 0;
LABEL_45:
          v60 = *(__int16 *)(a1 + 748) - *(__int16 *)(a1 + 746) + 1;
          v61 = 2 * v60;
          v62 = *(unsigned __int16 *)(v37 + 3578);
          if (2 * v60 * v62 >= 1)
          {
            v63 = 0;
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536);
            do
            {
              v65 = v63 + 2 * v62 * *(__int16 *)(a1 + 746);
              v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              if (v66 < 0x5B)
              {
                *(_WORD *)(v64 + 2 * v65) = 0;
              }
              else
              {
                *(_WORD *)(v64 + 2 * v65) = v66 - 90;
                v67 = v63 + 2 * *(__int16 *)(a1 + 746) * *(unsigned __int16 *)(v37 + 3578);
                *(_WORD *)(v64 + 2 * v67) *= 3;
              }
              v62 = *(unsigned __int16 *)(v37 + 3578);
              v68 = (v61 * v62);
              ++v63;
            }
            while ((int)v63 < (int)v68);
            if ((int)v68 >= 1)
            {
              v69 = 0;
              v70 = 0;
              v71 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536) + 4
                                                                                     * v62
                                                                                     * *(__int16 *)(a1 + 746));
              do
              {
                v72 = *v71++;
                v70 += v72;
                if (v72)
                  ++v69;
                --v68;
              }
              while (v68);
              if (v70)
                v73 = v69 == 0;
              else
                v73 = 1;
              if (!v73)
              {
                v74 = 0;
                v75 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536);
                v76 = v70 / v69;
                do
                {
                  v77 = v74 + 2 * v62 * *(__int16 *)(a1 + 746);
                  if (100 * *(unsigned __int16 *)(v75 + 2 * v77) / v76 - 201 <= 0xFFFFFF68)
                  {
                    *(_WORD *)(v75 + 2 * v77) = 0;
                    v62 = *(unsigned __int16 *)(v37 + 3578);
                  }
                  ++v74;
                }
                while ((int)v74 < v61 * v62);
              }
            }
          }
          smooth_f0(*(_QWORD *)(a1 + 16), (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 776) + 3536) + 4 * *(__int16 *)(a1 + 746) * v62), 2 * v60, 2u);
          v82 = *(_QWORD *)(a1 + 40);
          v83 = *(unsigned __int16 *)(v82 + 3578);
          if (v60 * v83 >= 1)
          {
            v84 = 0;
            v85 = *(_QWORD **)(a1 + 776);
            do
            {
              v156 = 0;
              v157 = 0;
              get_f0(a1, *(_DWORD *)(v85[441] + 4 * (v84 + *(__int16 *)(a1 + 746) * (uint64_t)v83)), &v157, (int *)&v156);
              v85 = *(_QWORD **)(a1 + 776);
              v86 = v85[443];
              v82 = *(_QWORD *)(a1 + 40);
              *(_WORD *)(v86 + 2 * (int)(2 * (v84 + *(unsigned __int16 *)(v82 + 3578) * *(__int16 *)(a1 + 746)))) = 1000;
              v87 = *(_WORD *)(a1 + 746);
              v88 = *(unsigned __int16 *)(v82 + 3578);
              if (v157)
              {
                v89 = 2 * (v84 + v88 * *(__int16 *)(a1 + 746));
                v90 = *(unsigned __int16 *)(v85[442] + 2 * v89);
                if ((v90 - 256) >= 0xFFFFFF01)
                {
                  *(_WORD *)(v86 + 2 * v89) = 1000 * ScaledLogToHz[v90] / v157;
                  v87 = *(_WORD *)(a1 + 746);
                  v88 = *(unsigned __int16 *)(v82 + 3578);
                }
              }
              *(_WORD *)(v86 + 2 * (int)((2 * (v84 + v88 * v87)) | 1)) = 1000;
              v83 = *(unsigned __int16 *)(v82 + 3578);
              v91 = v60 * v83;
              if ((int)v84 + 1 < v60 * v83 && v156 != 0)
              {
                v93 = 2 * (v84 + *(__int16 *)(a1 + 746) * v83);
                v94 = *(unsigned __int16 *)(v85[442] + 2 * (v93 + 2));
                if ((v94 - 256) >= 0xFFFFFF01)
                {
                  *(_WORD *)(v86 + 2 * (v93 | 1)) = 1000 * ScaledLogToHz[v94] / v156;
                  v83 = *(unsigned __int16 *)(v82 + 3578);
                  v91 = v60 * v83;
                }
              }
              ++v84;
            }
            while ((int)v84 < v91);
          }
          if (v61 * v83 >= 1)
          {
            v95 = 0;
            v96 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3544);
            do
            {
              v97 = v95 + 2 * v83 * *(__int16 *)(a1 + 746);
              if (*(unsigned __int16 *)(v96 + 2 * v97) - 1301 <= 0xFFFFFDD8)
              {
                *(_WORD *)(v96 + 2 * v97) = 1000;
                v83 = *(unsigned __int16 *)(v82 + 3578);
              }
              ++v95;
            }
            while ((int)v95 < v61 * v83);
          }
          LOBYTE(v157) = *(_BYTE *)(a1 + 744);
          LOBYTE(v156) = 0;
          v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts", (uint64_t)&v157, 1, v78, v79, v80, v81);
          if ((v52 & 0x80000000) == 0)
          {
            v158 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 2497);
            if (v60 < 1)
            {
              v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                      (uint64_t)&v156,
                      1,
                      v98,
                      v99,
                      v100,
                      v101);
              if ((v52 & 0x80000000) == 0)
              {
LABEL_106:
                v128 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3578);
                v52 = uselect_Write(a1, "application/x-realspeak-usids;version=4.0",
                        *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3528) + 4 * v128 * *(__int16 *)(a1 + 746),
                        (4 * v60 * v128),
                        v112,
                        v113,
                        v114,
                        v115);
                if ((v52 & 0x80000000) == 0)
                {
                  v133 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3578);
                  v7 = uselect_Write(a1, "application/x-realspeak-targf0;version=4.0",
                         *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3544) + 4 * *(__int16 *)(a1 + 746) * v133,
                         (4 * v60 * v133),
                         v129,
                         v130,
                         v131,
                         v132);
                  if ((v7 & 0x80000000) == 0)
                  {
                    if (v60 < 1)
                    {
LABEL_112:
                      *(_WORD *)(*(_QWORD *)(a1 + 760) + 864 * *(__int16 *)(a1 + 748)) = 0;
                      v139 = *(unsigned __int8 *)(a1 + 744);
                      if (v139 == 1)
                      {
                        *(_BYTE *)(a1 + 744) = 2;
                      }
                      else if ((v139 & 4) != 0)
                      {
                        *(_BYTE *)(a1 + 744) = 1;
                        DeallocBufferUnitSelector((_QWORD *)a1, *(_QWORD **)(a1 + 776));
                        *(_DWORD *)(a1 + 768) = 0;
                      }
                    }
                    else
                    {
                      v138 = 0;
                      while (1)
                      {
                        v7 = uselect_Write(a1, "application/x-realspeak-usplosives;version=4.0",
                               *(_QWORD *)(a1 + 760) + 864 * (v138 + *(__int16 *)(a1 + 746)) + 12,
                               1,
                               v134,
                               v135,
                               v136,
                               v137);
                        if ((v7 & 0x80000000) != 0)
                          break;
                        if (v60 == (_DWORD)++v138)
                          goto LABEL_112;
                      }
                    }
                  }
                  goto LABEL_145;
                }
              }
            }
            else
            {
              v102 = 0;
              while (1)
              {
                v52 = uselect_Write(a1, "application/x-realspeak-usmarkers-u16;version=4.0",
                        *(_QWORD *)(a1 + 760) + 864 * (v102 + *(__int16 *)(a1 + 746)),
                        2,
                        v98,
                        v99,
                        v100,
                        v101);
                if ((v52 & 0x80000000) != 0)
                  break;
                v107 = *(_QWORD *)(a1 + 760);
                v108 = v102 + *(__int16 *)(a1 + 746);
                v109 = v107 + 864 * v108;
                v111 = *(unsigned __int8 *)(v109 + 2);
                v110 = (char *)(v109 + 2);
                if (v111 == 35
                  && ((*(_DWORD *)(v107 + 864 * v108 + 4) & 0x80000000) == 0
                   || (*(_DWORD *)(v107 + 864 * v108 + 8) & 0x80000000) == 0))
                {
                  v110 = &v158;
                }
                v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                        (uint64_t)v110,
                        1,
                        v103,
                        v104,
                        v105,
                        v106);
                if ((v52 & 0x80000000) != 0)
                  break;
                if (v60 == (_DWORD)++v102)
                {
                  v52 = uselect_Write(a1, "text/x-realspeak-usphonemes;charset=tts",
                          (uint64_t)&v156,
                          1,
                          v98,
                          v99,
                          v100,
                          v101);
                  if ((v52 & 0x80000000) == 0)
                  {
                    v116 = 0;
                    while (1)
                    {
                      v52 = uselect_Write(a1, "application/x-realspeak-usdurs;version=4.0",
                              *(_QWORD *)(a1 + 760) + 864 * (v116 + *(__int16 *)(a1 + 746)) + 50,
                              2,
                              v112,
                              v113,
                              v114,
                              v115);
                      if ((v52 & 0x80000000) != 0)
                        break;
                      if (v60 == (_DWORD)++v116)
                        goto LABEL_106;
                    }
                  }
                  goto LABEL_144;
                }
              }
            }
          }
          goto LABEL_144;
        }
        v52 = uselect_ResetUnitSelector(a1, *(__int16 *)(*(_QWORD *)(a1 + 776) + 3524));
        if ((v52 & 0x80000000) == 0)
        {
          v52 = uselect_ProcessUnitSelector(a1);
          if ((v52 & 0x80000000) == 0)
          {
            v37 = *(_QWORD *)(a1 + 40);
            goto LABEL_45;
          }
        }
LABEL_144:
        v7 = v52;
LABEL_145:
        if ((v7 & 0x1FFF) == 0x80B)
          return 0;
        else
          return v7;
      }
      v7 = v140;
    }
    else
    {
LABEL_12:
      v7 = -2065686508;
    }
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19004, (uint64_t)"%s%s", v13, v14, v15, v16, "layer");
    goto LABEL_145;
  }
  if (v160)
  {
    *a5 = 1;
    v117 = *(unsigned __int16 *)(a1 + 736);
    if (*(_WORD *)(a1 + 736))
    {
      v118 = 0;
      v119 = (_QWORD *)(a1 + 128);
      do
      {
        v120 = *(v119 - 1);
        if (v120)
        {
          v121 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v120, *v119);
          if ((v121 & 0x80000000) != 0)
          {
            v126 = v121;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, (uint64_t)"%s%s", v122, v123, v124, v125, "layer");
            v11 = v126;
          }
          *(v119 - 1) = safeh_GetNullHandle();
          *v119 = v127;
          v117 = *(unsigned __int16 *)(a1 + 736);
        }
        ++v118;
        v119 += 5;
      }
      while (v118 < v117);
    }
  }
  else
  {
    *a5 = 0;
  }
  return v11;
}

uint64_t uselect_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v3 & 0x80000000) != 0)
    return 2229280776;
  v4 = v3;
  DeallocBufferUnitSelector((_QWORD *)a1, *(_QWORD **)(a1 + 776));
  if (*(_WORD *)(a1 + 736))
  {
    v5 = 0;
    v6 = (_QWORD *)(a1 + 128);
    do
    {
      v7 = *(v6 - 3);
      if (v7)
      {
        v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v7, *(v6 - 2));
        if ((v8 & 0x80000000) != 0)
        {
          v13 = v8;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, (uint64_t)"%s%s", v9, v10, v11, v12, "layer");
          v4 = v13;
        }
        *(v6 - 3) = safeh_GetNullHandle();
        *(v6 - 2) = v14;
      }
      v15 = *(v6 - 1);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 72))(v15, *v6);
        if ((v16 & 0x80000000) != 0)
        {
          v21 = v16;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19006, (uint64_t)"%s%s", v17, v18, v19, v20, "layer");
          v4 = v21;
        }
        *(v6 - 1) = safeh_GetNullHandle();
        *v6 = v22;
      }
      ++v5;
      v6 += 5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 736));
  }
  *(_WORD *)(a1 + 736) = 0;
  return v4;
}

uint64_t uselect_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  char *v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  int v13;
  char *v14;

  v5 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v5 & 0x80000000) != 0)
    return 2229280776;
  if (!*(_QWORD *)(a1 + 40))
    return 2229280785;
  v6 = v5;
  cstdlib_memset(a3, 0, 0x985uLL);
  v7 = 0;
  for (i = 2144; i != 2400; ++i)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) != 255)
    {
      v9 = &a3[(unsigned __int16)v7];
      *v9 = i - 96;
      v9[514] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1116);
      v9[257] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 859);
      v9[771] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1373);
      v9[1028] = *(_BYTE *)(*(_QWORD *)(a1 + 40) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + i) + 1630);
      ++v7;
    }
  }
  cstdlib_strcpy(a3 + 1285, (const char *)(*(_QWORD *)(a1 + 40) + 2400));
  v10 = *(_QWORD *)(a1 + 40);
  if ((*(_DWORD *)(v10 + 3120) & 0x80000000) == 0)
  {
    cstdlib_strcpy(a3 + 1349, "1234");
    v10 = *(_QWORD *)(a1 + 40);
  }
  v11 = *(const char ***)(v10 + 2464);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = 0;
      v14 = a3 + 1413;
      do
      {
        cstdlib_strcat(v14, v12);
        cstdlib_strcat(v14, " ");
        v12 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2464) + 8 * (unsigned __int16)++v13);
      }
      while (v12);
    }
  }
  return v6;
}

uint64_t uselect_SetUserInformation(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 34632, 952) & 0x80000000) != 0)
    return 2229280776;
  if (*(_QWORD *)(a1 + 40))
    return 2229280768;
  return 2229280785;
}

uint64_t uselect_QueryCapability(uint64_t a1, int a2, const char *a3, _BOOL4 *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *i;
  int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  _DWORD *v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int j;
  int v23;
  unsigned int v24;
  _BYTE *k;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned int m;
  char v32;

  v7 = 2229280768;
  v8 = safeh_HandleCheck(a1, a2, 34632, 952);
  if ((v8 & 0x80000000) != 0)
    return 2229280776;
  if (!*(_QWORD *)(a1 + 40))
    return 2229280785;
  v9 = v8;
  if (!cstdlib_strcmp(a3, "PRM"))
  {
    v14 = *(_QWORD *)(a1 + 40);
    if ((*(_DWORD *)(v14 + 3168) & 0x80000000) == 0)
    {
LABEL_24:
      v16 = 1;
      goto LABEL_25;
    }
    v15 = *(_DWORD *)(v14 + 3176);
LABEL_14:
    v16 = v15 >= 0;
LABEL_25:
    *a4 = v16;
    return v9;
  }
  if (!cstdlib_strcmp(a3, "BND"))
  {
    v17 = *(_DWORD **)(a1 + 40);
    if ((v17[793] & 0x80000000) == 0
      || (v17[794] & 0x80000000) == 0
      || (v17[795] & 0x80000000) == 0
      || (v17[796] & 0x80000000) == 0
      || (v17[797] & 0x80000000) == 0
      || (v17[798] & 0x80000000) == 0
      || (v17[799] & 0x80000000) == 0
      || (v17[800] & 0x80000000) == 0
      || (v17[801] & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    v15 = v17[803];
    goto LABEL_14;
  }
  if (!cstdlib_strcmp(a3, "max-PRM"))
  {
    v10 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)a4 = 0;
    v11 = *(_QWORD *)(v10 + 2968);
    for (i = (_BYTE *)(v11 + 12); ; i += 32)
    {
      v13 = *((_DWORD *)i - 3);
      if (v13 == 30)
      {
        v19 = **(_QWORD **)(a1 + 56);
        v20 = *(_DWORD *)(v19 + 108);
        if (!v20)
          return 0;
        v21 = 0;
        for (j = 0; j < v20; ++j)
        {
          v23 = i[12];
          v24 = (*(unsigned __int8 *)(*(_QWORD *)(v19 + 160)
                                    + j * *(unsigned __int8 *)(v19 + 168)
                                    + *(i - 1)) >> *i) & v23;
          if (v24 > v21 && v24 != 4)
          {
            *(_BYTE *)a4 = (*(unsigned __int8 *)(*(_QWORD *)(v19 + 160)
                                               + j * *(unsigned __int8 *)(v19 + 168)
                                               + *(i - 1)) >> *i) & v23;
            v20 = *(_DWORD *)(v19 + 108);
            v21 = v24;
          }
          v7 = 0;
        }
        return v7;
      }
      if (!v13)
        break;
    }
    for (k = (_BYTE *)(v11 + 12); ; k += 32)
    {
      v27 = *((_DWORD *)k - 3);
      if (!v27)
        break;
      if (v27 == 32)
      {
        v28 = **(_QWORD **)(a1 + 56);
        v29 = *(_DWORD *)(v28 + 108);
        if (!v29)
          return 0;
        v30 = 0;
        for (m = 0; m < v29; ++m)
        {
          if ((k[12] & (*(unsigned __int8 *)(*(_QWORD *)(v28 + 160)
                                                             + m * *(unsigned __int8 *)(v28 + 168)
                                                             + *(k - 1)) >> *k)) >= 6u)
            v32 = 1;
          else
            v32 = 0x20202020203uLL >> (8
                                     * (k[12] & (*(unsigned __int8 *)(*(_QWORD *)(v28 + 160)
                                                                                     + m
                                                                                     * *(unsigned __int8 *)(v28 + 168)
                                                                                     + *(k - 1)) >> *k)));
          if ((v32 & 3u) > v30)
          {
            *(_BYTE *)a4 = v32;
            v29 = *(_DWORD *)(v28 + 108);
            v30 = v32;
          }
          v7 = 0;
        }
        return v7;
      }
    }
  }
  return v7;
}

uint64_t uselect_GetParam(uint64_t a1, char *__s1, int a3)
{
  uint64_t Int;
  _QWORD *v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t i;
  char *v13;
  char *v14;
  const char *v15;
  int v16;
  char *v17;
  BOOL v18;
  uint64_t BrokerString;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t Str;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t UInt;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  _QWORD *v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  char *__s;
  char __s2[4];
  char __s1a[8];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!cstdlib_strcmp(__s1, "minphrase"))
  {
    Int = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"minphrase", (_DWORD *)(a1 + 740));
    if ((Int & 0x80000000) == 0)
      return Int;
    *(_DWORD *)(a1 + 740) = 10;
    if (a3)
      return paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"minphrase", 0xAu);
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "uselearlyemission"))
  {
    *(_QWORD *)__s1a = 0;
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselearlyemission", __s1a);
    if ((Str & 0x80000000) == 0)
    {
      Int = Str;
      if (cstdlib_strlen(*(const char **)__s1a))
      {
        if (cstdlib_strcmp(*(const char **)__s1a, "yes") && cstdlib_strcmp(*(const char **)__s1a, "1"))
        {
          if (cstdlib_strcmp(*(const char **)__s1a, "no") && cstdlib_strcmp(*(const char **)__s1a, "0"))
          {
            *(_DWORD *)(a1 + 752) = -1;
            return 2229280783;
          }
          else
          {
            *(_DWORD *)(a1 + 752) = 0;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 752) = 1;
        }
        return Int;
      }
    }
    *(_DWORD *)(a1 + 752) = -1;
    if (!a3)
      return 0;
    return paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselearlyemission", "");
  }
  if (!cstdlib_strcmp(__s1, "uselectusetriphonecache"))
  {
    *(_DWORD *)__s1a = 0;
    v39 = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectusetriphonecache", __s1a);
    if ((v39 & 0x80000000) == 0)
    {
      Int = v39;
      *(_DWORD *)(a1 + 912) = *(_DWORD *)__s1a != 0;
      return Int;
    }
    *(_DWORD *)(a1 + 912) = 1;
    if (a3)
      return paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectusetriphonecache", 1u);
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "uselectweightnoreusebias"))
  {
    v41 = (_DWORD *)(a1 + 916);
    UInt = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightnoreusebias", (unsigned int *)(a1 + 916));
    if ((UInt & 0x80000000) == 0)
    {
      Int = UInt;
      *v41 *= 100;
      return Int;
    }
    *v41 = 0;
    if (a3)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightnoreusebias", 0);
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "uselectweightdurationbias"))
  {
    v43 = (_DWORD *)(a1 + 920);
    v44 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightdurationbias", (unsigned int *)(a1 + 920));
    if ((v44 & 0x80000000) != 0)
    {
      *v43 = 0;
      if (!a3)
        return 0;
      Int = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightdurationbias", 0);
      if ((Int & 0x80000000) != 0 || !*v43)
        return Int;
    }
    else
    {
      Int = v44;
      v50 = *(_DWORD *)(a1 + 904) * *(_DWORD *)(a1 + 920) / 0x64u;
      *(_DWORD *)(a1 + 920) = v50;
      if (!v50)
        return Int;
    }
    if (*(_BYTE *)(a1 + 924) || !*(_QWORD *)(a1 + 40))
      return Int;
    v51 = (_BYTE *)(a1 + 924);
    v52 = (_QWORD *)a1;
    v53 = 0;
LABEL_80:
    uselect_GetP95Value(v52, v53, v51, v45, v46, v47, v48, v49, v61);
    return Int;
  }
  if (!cstdlib_strcmp(__s1, "uselectweightpitchbias"))
  {
    v54 = (_DWORD *)(a1 + 928);
    v55 = paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightpitchbias", (unsigned int *)(a1 + 928));
    if ((v55 & 0x80000000) != 0)
    {
      *v54 = 0;
      if (!a3)
        return 0;
      Int = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectweightpitchbias", 0);
      if ((Int & 0x80000000) != 0 || !*v54)
        return Int;
    }
    else
    {
      Int = v55;
      v56 = *(_DWORD *)(a1 + 904) * *(_DWORD *)(a1 + 928) / 0x64u;
      *(_DWORD *)(a1 + 928) = v56;
      if (!v56)
        return Int;
    }
    if (*(_BYTE *)(a1 + 932) || !*(_QWORD *)(a1 + 40))
      return Int;
    v51 = (_BYTE *)(a1 + 932);
    v52 = (_QWORD *)a1;
    v53 = 1;
    goto LABEL_80;
  }
  if (!cstdlib_strcmp(__s1, "uselectonlinereduction"))
  {
    *(_QWORD *)__s1a = 0;
    *(_DWORD *)__s2 = 0;
    LOBYTE(__s) = 0;
    if ((paramc_ParamGet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectonlinereduction", __s1a, __s2) & 0x80000000) == 0)
    {
      Int = uselect_ApplyOnlineReduction(a1, *(uint64_t *)__s1a, *(unsigned int *)__s2);
      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
      return Int;
    }
    if (a3)
      return paramc_ParamSet(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectonlinereduction", &__s, 1uLL);
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "uselectmaxcandspruning"))
  {
    *(_DWORD *)__s1a = 0;
    DeallocUnitSelectorMemory_NRowsDependency((_QWORD *)a1);
    if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectmaxcandspruning", __s1a) & 0x80000000) == 0)
      goto LABEL_91;
    *(_DWORD *)__s1a = 0;
    if (!a3)
      goto LABEL_105;
    v40 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"uselectmaxcandspruning", 0);
    if ((v40 & 0x80000000) == 0)
    {
LABEL_91:
      LOBYTE(v57) = __s1a[0];
      if (*(_DWORD *)__s1a)
      {
        if (*(int *)__s1a >= 256)
          LOBYTE(v57) = -1;
        v58 = *(_QWORD *)(a1 + 40);
        goto LABEL_106;
      }
LABEL_105:
      v58 = *(_QWORD *)(a1 + 40);
      v57 = *(_DWORD *)(v58 + 2552);
LABEL_106:
      *(_BYTE *)(a1 + 908) = v57;
      if (*(_DWORD *)(v58 + 2560))
      {
        v59 = v57;
        v60 = v57 + 20;
        if (v59 > 0xEB)
          v60 = -1;
        *(_BYTE *)(a1 + 908) = v60;
      }
      return AllocUnitSelectorMemory_NRowsDependency(a1);
    }
    return v40;
  }
  if (cstdlib_strcmp(__s1, *(const char **)(a1 + 80)))
    return 0;
  __s = 0;
  Int = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 80), &__s);
  if ((Int & 0x80000000) != 0)
  {
    if (a3)
      Int = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 80), "");
    v10 = 0;
LABEL_116:
    if (v10)
LABEL_117:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v10);
    return Int;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v8 = cstdlib_strlen(__s);
  v9 = (char *)heap_Calloc(v7, 1, (v8 + 1));
  if (v9)
  {
    v10 = v9;
    cstdlib_strcpy(v9, __s);
    paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
    if (*(_DWORD *)(a1 + 48) >= 2u)
    {
      v11 = 0;
      for (i = 1; i < *(unsigned int *)(a1 + 48); ++i)
      {
        v13 = cstdlib_strchr(v10, 59);
        if (!v13)
          goto LABEL_22;
        v14 = v13;
        v15 = v10;
        do
        {
          *v14 = 0;
          v16 = cstdlib_strcmp(v15, *(const char **)(*(_QWORD *)(a1 + 72) + 8 * i));
          *v14 = 59;
          v15 = v14 + 1;
          v17 = cstdlib_strchr(v14 + 1, 59);
          v14 = v17;
          if (v16)
            v18 = v17 == 0;
          else
            v18 = 1;
        }
        while (!v18);
        if (v16)
        {
LABEL_22:
          if (i >= *(unsigned int *)(a1 + 48))
          {
            Int = 0;
          }
          else
          {
            paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", *(char **)(*(_QWORD *)(a1 + 72) + 8 * i));
            BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), __s1a, 0x100uLL, 0, 0, 0, 0);
            if ((BrokerString & 0x80000000) != 0)
            {
              Int = BrokerString;
              goto LABEL_117;
            }
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i);
            if (v20)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v20);
              *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i) = 0;
            }
            v21 = *(_QWORD *)(a1 + 24);
            if (!v21 || (v22 = *(_QWORD *)(v21 + 48)) == 0)
              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
            v23 = objc_ReleaseObject(v22, (uint64_t)__s1a);
            Int = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), __s2, 0x100uLL, 0, 0, 0, 1);
            if ((Int & 0x80000000) != 0)
              goto LABEL_116;
            if ((v23 & 0x1FFF) == 0x14 && cstdlib_strcmp(__s1a, __s2))
            {
              v24 = *(_QWORD *)(a1 + 24);
              if (!v24 || (v25 = *(_QWORD *)(v24 + 48)) == 0)
                v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
              objc_ReleaseObject(v25, (uint64_t)__s2);
            }
            v26 = *(unsigned int *)(a1 + 48);
            v27 = v11;
            if (i + 1 < v26)
            {
              do
              {
                v28 = v27 + 1;
                *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v28) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v27 + 16);
                *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v28) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v27 + 16);
                v29 = *(_QWORD *)(a1 + 64);
                v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v27) + 108)
                    + *(_DWORD *)(v29 + 4 * v27);
                *(_DWORD *)(v29 + 4 * v28) = v30;
                Int = uselect_CommunicateAddonOffset(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (v27 + 1)), v30);
                if ((Int & 0x80000000) != 0)
                  goto LABEL_116;
                v26 = *(unsigned int *)(a1 + 48);
                v31 = v27 + 3;
                ++v27;
              }
              while (v31 < v26);
            }
            *(_DWORD *)(a1 + 48) = v26 - 1;
          }
        }
        ++v11;
      }
    }
    v32 = cstdlib_strchr(v10, 59);
    if (v32)
    {
      v33 = v32;
      v34 = v10;
      do
      {
        *v33 = 0;
        v35 = 1;
        while (v35 < *(unsigned int *)(a1 + 48))
        {
          if (!cstdlib_strcmp(v34, *(const char **)(*(_QWORD *)(a1 + 72) + 8 * v35++)))
            goto LABEL_49;
        }
        Int = uselect_AddDataPart(a1, v34);
        if ((Int & 0x80000000) != 0)
          goto LABEL_116;
LABEL_49:
        *v33 = 59;
        v34 = v33 + 1;
        v33 = cstdlib_strchr(v33 + 1, 59);
      }
      while (v33);
    }
    goto LABEL_116;
  }
  return 2229280778;
}

uint64_t uselect_ParamCheckChange(int a1, char *__s1, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t result;

  *a4 = 1;
  if (!cstdlib_strcmp(__s1, "minphrase"))
  {
    if ((cstdlib_atoi(a3) & 0x80000000) != 0)
    {
LABEL_10:
      *a4 = 0;
      return 2229280783;
    }
    return 0;
  }
  if (cstdlib_strcmp(__s1, "uselearlyemission"))
    return 0;
  result = cstdlib_strcmp((const char *)a3, "yes");
  if ((_DWORD)result)
  {
    result = cstdlib_strcmp((const char *)a3, "1");
    if ((_DWORD)result)
    {
      result = cstdlib_strcmp((const char *)a3, "no");
      if ((_DWORD)result)
      {
        result = cstdlib_strcmp((const char *)a3, "0");
        if ((_DWORD)result)
          goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t uselect_ParamLearnChange(uint64_t a1, char *a2)
{
  return uselect_GetParam(a1, a2, 0);
}

_QWORD *uselect_GetP95Value(_QWORD *result, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int j;
  char v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;

  if (result)
  {
    v9 = result;
    v10 = result[5];
    if (v10)
    {
      v11 = (uint64_t *)result[7];
      if (*(_DWORD *)(*v11 + 108))
      {
        if (a2)
        {
          i = *(_QWORD *)(v10 + 3008);
          if (!i)
            return result;
        }
        else
        {
          v18 = *(unsigned __int16 *)(v10 + 2966);
          if (!*(_WORD *)(v10 + 2966))
            return result;
          for (i = *(_QWORD *)(v10 + 2968); *(_DWORD *)i != 6; i += 32)
          {
            if (!--v18)
              return result;
          }
        }
        v15 = *((unsigned int *)result + 12);
        if ((_DWORD)v15)
        {
          LODWORD(v16) = 0;
          do
          {
            v17 = *v11++;
            v16 = (*(_DWORD *)(v17 + 108) + v16);
            --v15;
          }
          while (v15);
        }
        else
        {
          v16 = 0;
        }
        v19 = heap_Calloc(*(_QWORD **)(result[2] + 8), v16, 1);
        v24 = v9[2];
        if (v19)
        {
          v25 = v19;
          v30 = heap_Calloc(*(_QWORD **)(v24 + 8), v16, 1);
          if (v30)
          {
            v31 = *((unsigned int *)v9 + 12);
            if ((_DWORD)v31)
            {
              v32 = 0;
              v33 = 0;
              do
              {
                v34 = *(_QWORD *)(v9[7] + 8 * v32);
                v35 = *(_DWORD *)(v34 + 108);
                if (v35)
                {
                  for (j = 0; j < v35; ++j)
                  {
                    v37 = *(_BYTE *)(*(_QWORD *)(v34 + 160)
                                   + j * *(unsigned __int8 *)(v34 + 168)
                                   + *(unsigned __int8 *)(i + 11));
                    if (v37)
                      v38 = a2 == 0;
                    else
                      v38 = 1;
                    if (!a2 || !v38)
                    {
                      *(_BYTE *)(v25 + v33++) = v37;
                      v35 = *(_DWORD *)(v34 + 108);
                    }
                  }
                  v31 = *((unsigned int *)v9 + 12);
                }
                ++v32;
              }
              while (v32 < v31);
            }
            else
            {
              v33 = 0;
            }
            v40 = heap_Calloc(*(_QWORD **)(v9[2] + 8), 256, 4);
            v39 = v40;
            if (v40)
            {
              if (v33)
              {
                v45 = v33;
                v46 = (unsigned __int8 *)v25;
                do
                {
                  v47 = *v46++;
                  ++*(_DWORD *)(v40 + 4 * v47);
                  --v45;
                }
                while (v45);
              }
              v48 = 0;
              v49 = 0;
              do
              {
                if (*(_DWORD *)(v40 + 4 * v48))
                {
                  v50 = 0;
                  do
                    *(_BYTE *)(v30 + v49 + v50++) = v48;
                  while (v50 < *(_DWORD *)(v40 + 4 * v48));
                  v49 += v50;
                }
                ++v48;
              }
              while (v48 != 256);
              *a3 = *(_BYTE *)(v30 + (95 * v49) / 0x64uLL);
            }
            else
            {
              log_OutPublic(*(_QWORD *)(v9[2] + 32), (uint64_t)"USELECT", 19000, 0, v41, v42, v43, v44, v51);
            }
          }
          else
          {
            log_OutPublic(*(_QWORD *)(v9[2] + 32), (uint64_t)"USELECT", 19000, 0, v26, v27, v28, v29, v51);
            v39 = 0;
          }
          result = heap_Free(*(_QWORD **)(v9[2] + 8), v25);
          if (v39)
            result = heap_Free(*(_QWORD **)(v9[2] + 8), v39);
          if (v30)
            return heap_Free(*(_QWORD **)(v9[2] + 8), v30);
        }
        else
        {
          return (_QWORD *)log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"USELECT", 19000, 0, v20, v21, v22, v23, a9);
        }
      }
    }
  }
  return result;
}

uint64_t uselect_ApplyOnlineReduction(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;

  if (a3 != 1)
  {
    v5 = 2229280778;
    if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 108) != a3)
      return 2229280783;
    if (*(_QWORD *)(a1 + 936))
    {
      if (!a3)
        return 0;
    }
    else
    {
      v7 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a3, 1);
      *(_QWORD *)(a1 + 936) = v7;
      if (!v7)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v8, v9, v10, v11, v14);
        return v5;
      }
      if (!*(_DWORD *)(**(_QWORD **)(a1 + 56) + 108))
        return 0;
    }
    v12 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 936) + v12) = *(_BYTE *)(a2 + v12);
      ++v12;
    }
    while (v12 < *(unsigned int *)(**(_QWORD **)(a1 + 56) + 108));
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 936);
  if (!v4)
    return 0;
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4);
  v5 = 0;
  *(_QWORD *)(a1 + 936) = 0;
  return v5;
}

_QWORD *DeallocUnitSelectorMemory_NRowsDependency(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = result[108];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(result[2] + 8), v2);
    v1[108] = 0;
  }
  v3 = *((unsigned __int8 *)v1 + 908);
  if (!*((_BYTE *)v1 + 908))
  {
    v5 = v1[102];
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  v4 = 0;
  v5 = v1[102];
  v6 = 24;
  v7 = v5;
  do
  {
    if (v7 && *(_QWORD *)(v7 + v6))
    {
      result = heap_Free(*(_QWORD **)(v1[2] + 8), *(_QWORD *)(v7 + v6));
      v5 = v1[102];
      *(_QWORD *)(v5 + v6) = 0;
      v3 = *((unsigned __int8 *)v1 + 908);
      v7 = v5;
    }
    ++v4;
    v6 += 112;
  }
  while (v4 < 3 * (unint64_t)v3);
  if (v5)
  {
LABEL_10:
    result = heap_Free(*(_QWORD **)(v1[2] + 8), v5);
    v1[102] = 0;
  }
LABEL_11:
  *((_BYTE *)v1 + 908) = 0;
  return result;
}

uint64_t AllocUnitSelectorMemory_NRowsDependency(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v2 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 3 * *(unsigned __int8 *)(a1 + 908), 112);
  *(_QWORD *)(a1 + 816) = v2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 908))
    {
      v7 = 0;
      v8 = 24;
      while (1)
      {
        v9 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 3360), 4);
        *(_QWORD *)(*(_QWORD *)(a1 + 816) + v8) = v9;
        if (!v9)
          break;
        ++v7;
        v10 = *(unsigned __int8 *)(a1 + 908);
        v8 += 112;
        if (v7 >= 3 * v10)
        {
          v11 = v10 + 1;
          goto LABEL_8;
        }
      }
    }
    else
    {
      v11 = 1;
LABEL_8:
      v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11, 56);
      *(_QWORD *)(a1 + 864) = v12;
      if (v12)
        return 0;
    }
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v3, v4, v5, v6, v14);
  return 2229280778;
}

uint64_t uselect_AddDataPart(uint64_t a1, char *a2)
{
  uint64_t BrokerString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  const char **v20;
  const char *v21;
  const char **v22;
  const char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39[256];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v37 = 0;
  v39[0] = 0;
  if (!a2 || !*a2)
    return 0;
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", a2);
  BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), v39, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v5 = uselect_CheckForDataFile(*(_WORD **)a1, *(_QWORD *)(a1 + 8), v39, &v37);
  if ((v5 & 0x80001FFF) == 0x8000000A)
    return v5;
  if (!v37)
  {
    BrokerString = uselect_CreateBrokerString(*(_QWORD *)(a1 + 16), v39, 0x100uLL, 0, 0, 0, 1);
    if ((BrokerString & 0x80000000) != 0)
      return BrokerString;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 48)) != 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v8 + 48);
  }
  BrokerString = objc_GetAddRefCountedObject(v7, (uint64_t)v39, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, _OWORD *))uselect_ObjcVoiceClose, v8, &v38);
  if ((BrokerString & 0x80000000) != 0)
    return BrokerString;
  v9 = *(_QWORD *)(v38 + 32);
  if (cstdlib_strcmp((const char *)(*(_QWORD *)(a1 + 40) + 602), (const char *)(v9 + 602)))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, (uint64_t)"%s:%s", v10, v11, v12, v13, v9 + 152);
    v5 = 2229280793;
  }
  else
  {
    v5 = 0;
  }
  if (cstdlib_strcmp((const char *)(*(_QWORD *)(a1 + 40) + 2400), (const char *)(v9 + 2400)))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, (uint64_t)"%s:%s", v15, v16, v17, v18, v9 + 152);
    v5 = 2229280793;
  }
  v19 = *(const char ***)(*(_QWORD *)(a1 + 40) + 2464);
  v20 = *(const char ***)(v9 + 2464);
  if (v19)
  {
    if (v20)
    {
      v21 = *v19;
      if (*v19)
      {
        v22 = v19 + 1;
        while (*v20)
        {
          if (cstdlib_strcmp(v21, *v20))
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, (uint64_t)"%s:%s", v15, v16, v17, v18, v9 + 152);
            v5 = 2229280793;
          }
          ++v20;
          v23 = *v22++;
          v21 = v23;
          if (!v23)
            goto LABEL_28;
        }
        goto LABEL_38;
      }
LABEL_28:
      if (!*v20)
      {
LABEL_29:
        if ((v5 & 0x80000000) == 0)
        {
          v24 = *(_DWORD *)(a1 + 48) + 1;
          *(_DWORD *)(a1 + 48) = v24;
          v25 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 56), 8 * v24);
          if (v25
            && (*(_QWORD *)(a1 + 56) = v25,
                v26 = *(unsigned int *)(a1 + 48),
                *(_QWORD *)(v25 + 8 * (v26 - 1)) = *(_QWORD *)(v9 + 3552),
                (v27 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 64), 4 * v26)) != 0)
            && (*(_QWORD *)(a1 + 64) = v27,
                *(_DWORD *)(v27 + 4 * (*(_DWORD *)(a1 + 48) - 1)) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (*(_DWORD *)(a1 + 48) - 2))
                                                                                              + 108)
                                                                                  + *(_DWORD *)(v27
                                                                                              + 4
                                                                                              * (*(_DWORD *)(a1 + 48) - 2)),
                (v28 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 72), 8 * *(unsigned int *)(a1 + 48))) != 0))
          {
            *(_QWORD *)(a1 + 72) = v28;
            v29 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
            v30 = cstdlib_strlen(a2);
            v31 = heap_Calloc(v29, 1, (v30 + 1));
            v32 = *(_DWORD *)(a1 + 48) - 1;
            *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v32) = v31;
            v33 = *(char **)(*(_QWORD *)(a1 + 72) + 8 * v32);
            v5 = 2229280778;
            if (v33)
            {
              cstdlib_strcpy(v33, a2);
              v34 = uselect_CommunicateAddonOffset(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (*(_DWORD *)(a1 + 48) - 1)), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (*(_DWORD *)(a1 + 48) - 1)));
              if ((v34 & 0x80000000) != 0)
              {
                v5 = v34;
              }
              else
              {
                v5 = uselect_CommunicateAddonReductionParameters(a1, *(char **)(*(_QWORD *)(a1 + 72) + 8 * (*(_DWORD *)(a1 + 48) - 1)), (char *)v9);
                if ((v5 & 0x80000000) == 0)
                  return v5;
              }
            }
          }
          else
          {
            v5 = 2229280778;
          }
        }
        goto LABEL_39;
      }
    }
  }
  else if (!v20)
  {
    goto LABEL_29;
  }
LABEL_38:
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19026, (uint64_t)"%s:%s", v15, v16, v17, v18, v9 + 152);
  v5 = 2229280793;
LABEL_39:
  if (v9 && v39[0])
  {
    v35 = *(_QWORD *)(a1 + 24);
    if (!v35 || (v36 = *(_QWORD *)(v35 + 48)) == 0)
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    objc_ReleaseObject(v36, (uint64_t)v39);
    if ((v5 & 0x1FFF) == 0xA)
      --*(_DWORD *)(a1 + 48);
  }
  return v5;
}

uint64_t uselect_CommunicateAddonOffset(uint64_t a1, char *__s, unsigned int a3)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;

  if (!__s || !*__s)
    return 0;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v7 = cstdlib_strlen(__s);
  v8 = (char *)heap_Calloc(v6, 1, (v7 + 18));
  if (v8)
  {
    v13 = v8;
    cstdlib_strcpy(v8, "voiceaddonoffset.");
    v14 = cstdlib_strlen(v13);
    if (cstdlib_strlen(__s))
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v13[v14 + v16++] = cstdlib_tolower(__s[v15]);
        v15 = v16;
      }
      while (cstdlib_strlen(__s) > v16);
    }
    else
    {
      LODWORD(v15) = 0;
    }
    v13[(v15 + v14)] = 0;
    v18 = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v13, a3);
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v13);
    return v18;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v9, v10, v11, v12, v19);
    return 2229280778;
  }
}

uint64_t uselect_CommunicateAddonReductionParameters(uint64_t a1, char *__s, char *a3)
{
  uint64_t v3;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v43;

  v3 = 0;
  if (!__s || !a3)
    return v3;
  if (!*__s)
    return 0;
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v8 = cstdlib_strlen(__s);
  v9 = (char *)heap_Calloc(v7, 1, (v8 + 26));
  if (!v9)
  {
    v3 = 2229280778;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v10, v11, v12, v13, v43);
    return v3;
  }
  v14 = v9;
  cstdlib_strcpy(v9, "voiceaddonrawdataversion.");
  v15 = cstdlib_strlen(v14);
  if (cstdlib_strlen(__s))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v14[v15 + v17++] = cstdlib_tolower(__s[v16]);
      v16 = v17;
    }
    while (cstdlib_strlen(__s) > v17);
  }
  else
  {
    LODWORD(v16) = 0;
  }
  v14[(v16 + v15)] = 0;
  v18 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v14, a3 + 64);
  if ((v18 & 0x80000000) != 0)
  {
    v3 = v18;
    v30 = 0;
    v26 = 0;
  }
  else
  {
    v19 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
    v20 = cstdlib_strlen(__s);
    v21 = (char *)heap_Calloc(v19, 1, (v20 + 21));
    v26 = v21;
    if (v21)
    {
      cstdlib_strcpy(v21, "voiceaddonreduction.");
      v27 = cstdlib_strlen(v26);
      if (cstdlib_strlen(__s))
      {
        v28 = 0;
        v29 = 0;
        do
        {
          v26[v27 + v29++] = cstdlib_tolower(__s[v28]);
          v28 = v29;
        }
        while (cstdlib_strlen(__s) > v29);
      }
      else
      {
        LODWORD(v28) = 0;
      }
      v26[(v28 + v27)] = 0;
      v31 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v26, a3 + 76);
      if ((v31 & 0x80000000) == 0)
      {
        v32 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
        v33 = cstdlib_strlen(__s);
        v34 = (char *)heap_Calloc(v32, 1, (v33 + 28));
        v30 = v34;
        if (v34)
        {
          cstdlib_strcpy(v34, "voiceaddonreductionversion.");
          v39 = cstdlib_strlen(v30);
          if (cstdlib_strlen(__s))
          {
            v40 = 0;
            v41 = 0;
            do
            {
              v30[v39 + v41++] = cstdlib_tolower(__s[v40]);
              v40 = v41;
            }
            while (cstdlib_strlen(__s) > v41);
          }
          else
          {
            LODWORD(v40) = 0;
          }
          v30[(v40 + v39)] = 0;
          v3 = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)v30, a3 + 140);
        }
        else
        {
          v3 = 2229280778;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v35, v36, v37, v38, v43);
        }
        goto LABEL_32;
      }
      v3 = v31;
    }
    else
    {
      v3 = 2229280778;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v22, v23, v24, v25, v43);
    }
    v30 = 0;
  }
LABEL_32:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v14);
  if (v26)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v26);
  if (v30)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v30);
  return v3;
}

_QWORD *DeallocBufferUnitSelector(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v2 = result;
    if (result[5])
    {
      v4 = result[95];
      if (v4)
      {
        result = heap_Free(*(_QWORD **)(result[2] + 8), v4);
        v2[95] = 0;
      }
      v5 = a2[441];
      if (v5)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v5);
        a2[441] = 0;
      }
      v6 = a2[442];
      if (v6)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v6);
        a2[442] = 0;
      }
      v7 = a2[443];
      if (v7)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v7);
        a2[443] = 0;
      }
      v8 = a2[451];
      if (v8)
      {
        result = heap_Free(*(_QWORD **)(v2[2] + 8), v8);
        a2[451] = 0;
      }
    }
  }
  return result;
}

uint64_t uselect_RemoveDataPartClose(uint64_t result, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 48) > a2)
  {
    v3 = (_QWORD *)result;
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(result + 16) + 40), (uint64_t)"voiceaddon", "");
    v4 = *(_QWORD *)(v3[9] + 8 * a2);
    if (v4)
    {
      heap_Free(*(_QWORD **)(v3[2] + 8), v4);
      *(_QWORD *)(v3[9] + 8 * a2) = 0;
    }
    v5 = v3[3];
    if (!v5 || (v6 = *(_QWORD *)(v5 + 48)) == 0)
      v6 = *(_QWORD *)(v3[2] + 48);
    return objc_ReleaseObject(v6, **(_QWORD **)(v3[7] + 8 * a2) + 152);
  }
  return result;
}

uint64_t uselect_ReadDirectStart(uint64_t a1, char *__s1, _QWORD *a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 2229280775;
  if (!*(_WORD *)(a1 + 736))
  {
LABEL_5:
    v6 = 2229280788;
    goto LABEL_6;
  }
  v9 = 0;
  v10 = a1 + 96;
  while (cstdlib_strcmp(*(const char **)v10, __s1))
  {
    ++v9;
    v10 += 40;
    if (v9 >= *(unsigned __int16 *)(a1 + 736))
      goto LABEL_5;
  }
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _DWORD *))(*(_QWORD *)(a1 + 88) + 88))(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), a3, a4);
  v17 = v16;
  if ((v16 & 0x80000000) != 0)
  {
    v6 = v16;
LABEL_6:
    if (!cstdlib_strncmp(__s1, "application/x-realspeak-cspp-", 0x1DuLL)
      || !cstdlib_strcmp(__s1, "application/x-realspeak-usnoreusebias;version=4.0")
      || !cstdlib_strcmp(__s1, "application/x-realspeak-usprosodybias;version=4.0")
      || !cstdlib_strcmp(__s1, "application/x-realspeak-usfrozen;version=4.0"))
    {
      return v6;
    }
    v15 = 19004;
LABEL_16:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", v15, (uint64_t)"%s%s", v11, v12, v13, v14, "layer");
    return v6;
  }
  if (!cstdlib_strncmp(*(const char **)v10, "text/", 5uLL) && (!*a4 || *(_BYTE *)(*a3 + (*a4 - 1))))
  {
    v15 = 19005;
    goto LABEL_16;
  }
  return v17;
}

uint64_t AllocBufferUnitSelector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int v16;

  v4 = *(__int16 *)(a2 + 3524);
  v5 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v4, 4);
  *(_QWORD *)(a2 + 3528) = v5;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v5
    || (v11 = heap_Calloc(*(_QWORD **)(v10 + 8), (2 * v4), 2),
        *(_QWORD *)(a2 + 3536) = v11,
        v10 = *(_QWORD *)(a1 + 16),
        !v11)
    || (v12 = heap_Calloc(*(_QWORD **)(v10 + 8), (2 * v4), 2),
        *(_QWORD *)(a2 + 3544) = v12,
        v10 = *(_QWORD *)(a1 + 16),
        !v12))
  {
    v14 = 2229280778;
LABEL_9:
    log_OutPublic(*(_QWORD *)(v10 + 32), (uint64_t)"USELECT", 19000, 0, v6, v7, v8, v9, v16);
    return v14;
  }
  v13 = (void *)heap_Calloc(*(_QWORD **)(v10 + 8), v4, 4);
  *(_QWORD *)(a2 + 3608) = v13;
  if (!v13)
  {
    v14 = 2229280778;
    v10 = *(_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  if (*(__int16 *)(a2 + 3524) >= 1)
    memset(v13, 255, 4 * *(unsigned __int16 *)(a2 + 3524));
  return 0;
}

uint64_t uselect_Write(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v13;
  _QWORD *v14;

  v10 = 2229280788;
  if (!*(_WORD *)(a1 + 736))
    goto LABEL_7;
  v13 = 0;
  v14 = (_QWORD *)(a1 + 128);
  while (cstdlib_strcmp((const char *)*(v14 - 4), __s2))
  {
    ++v13;
    v14 += 5;
    if (v13 >= *(unsigned __int16 *)(a1 + 736))
      goto LABEL_7;
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 88) + 104))(*(v14 - 1), *v14, a3, a4);
  if ((v10 & 0x80000000) != 0)
LABEL_7:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19003, (uint64_t)"%s%s", a5, a6, a7, a8, "layer");
  return v10;
}

uint64_t uselect_GetOffsetAndCountInCache3Table(_BYTE *a1, uint64_t a2, _BYTE *a3, int a4, int a5, _DWORD *a6)
{
  int v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  uint64_t *v13;
  uint64_t *v14;
  int *v15;
  uint64_t *v16;
  int *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  unsigned __int8 v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v6 = a3[1];
  v7 = (int *)(a2 + 208);
  v8 = (uint64_t *)(a2 + 224);
  v9 = (uint64_t *)(a2 + 240);
  v10 = (int *)(a2 + 252);
  v11 = (uint64_t *)(a2 + 264);
  v12 = (int *)(a2 + 204);
  v13 = (uint64_t *)(a2 + 216);
  v14 = (uint64_t *)(a2 + 232);
  v15 = (int *)(a2 + 248);
  v16 = (uint64_t *)(a2 + 256);
  if (v6 == 108)
    v17 = v12;
  else
    v17 = v7;
  if (v6 == 108)
  {
    v10 = v15;
    v18 = v13;
  }
  else
  {
    v18 = v8;
  }
  if (v6 == 108)
    v19 = v14;
  else
    v19 = v9;
  if (v6 == 108)
    v20 = v16;
  else
    v20 = v11;
  if (a4)
    v21 = a4 - a1[2496];
  else
    v21 = a1[3577];
  v22 = *v19;
  v23 = *v18;
  v24 = *v10;
  v25 = *v17;
  if (a5)
  {
    v26 = a1[2496];
    v27 = a5 - v26;
  }
  else
  {
    v27 = a1[3577];
    v26 = a1[2496];
  }
  v28 = 0;
  v29 = *v20;
  v30 = *a3 - v26;
  v31 = a1[3576];
  v32 = v30;
  v33 = (v31 * v21 + v30) * v31;
  v34 = v27;
  v35 = v33 + v27;
  v36 = (v25 - 1);
  v37 = v36;
  v38 = v36;
  do
  {
    v39 = (v28 + v38) >> 1;
    v40 = *(_DWORD *)(v23 + 4 * v39);
    if (v40 <= v35)
    {
      if (v40 >= v35)
      {
LABEL_59:
        if (v39 != (_DWORD)v36)
        {
          v24 = *(_DWORD *)(v22 + 4 * (v39 + 1));
          v36 = v39;
        }
        *a6 = v24 - *(_DWORD *)(v22 + 4 * v36);
        return v29 + 4 * *(unsigned int *)(v22 + 4 * v39);
      }
      v28 = v39 + 1;
    }
    else
    {
      if (v28 + v38 < 2)
        break;
      v38 = v39 - 1;
    }
  }
  while (v28 <= v38);
  v41 = a1[3577];
  if (v6 == 108)
  {
    if (v34 != v41)
    {
      v42 = 0;
      v43 = v33 + v41;
      v44 = v36;
      do
      {
        v39 = (v42 + v44) >> 1;
        v45 = *(_DWORD *)(v23 + 4 * v39);
        if (v45 <= v43)
        {
          if (v45 >= v43)
            goto LABEL_59;
          v42 = v39 + 1;
        }
        else
        {
          if (v42 + v44 < 2)
            break;
          v44 = v39 - 1;
        }
      }
      while (v42 <= v44);
    }
    v46 = 0;
    v47 = v41 + (v32 + v41 * v31) * v31;
    do
    {
      v39 = (v46 + v37) >> 1;
      v48 = *(_DWORD *)(v23 + 4 * v39);
      if (v48 <= v47)
      {
        if (v48 >= v47)
          goto LABEL_59;
        v46 = v39 + 1;
      }
      else
      {
        if (v46 + v37 < 2)
          return 0;
        v37 = v39 - 1;
      }
    }
    while (v46 <= v37);
  }
  else
  {
    v49 = (v32 + v41 * v31) * v31;
    if (v41 != v21)
    {
      v50 = 0;
      v51 = v49 + v34;
      v52 = v36;
      do
      {
        v39 = (v50 + v52) >> 1;
        v53 = *(_DWORD *)(v23 + 4 * v39);
        if (v53 <= v51)
        {
          if (v53 >= v51)
            goto LABEL_59;
          v50 = v39 + 1;
        }
        else
        {
          if (v50 + v52 < 2)
            break;
          v52 = v39 - 1;
        }
      }
      while (v50 <= v52);
    }
    v54 = 0;
    v55 = v49 + v41;
    do
    {
      v39 = (v54 + v37) >> 1;
      v56 = *(_DWORD *)(v23 + 4 * v39);
      if (v56 <= v55)
      {
        if (v56 >= v55)
          goto LABEL_59;
        v54 = v39 + 1;
      }
      else
      {
        if (v54 + v37 < 2)
          return 0;
        v37 = v39 - 1;
      }
    }
    while (v54 <= v37);
  }
  return 0;
}

uint64_t uselect_InitForPreselDistFunc(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)();
  unsigned int v3;
  int v4;

  v1 = 2229280769;
  v2 = (uint64_t (*)())dist_LPHONEME_DATACOST;
  switch(*(_DWORD *)a1)
  {
    case 1:
      goto LABEL_16;
    case 2:
      v2 = (uint64_t (*)())dist_RPHONEME_DATACOST;
      goto LABEL_16;
    case 3:
      v2 = (uint64_t (*)())dist_LLPHONEME_DATACOST;
      goto LABEL_16;
    case 4:
      v2 = (uint64_t (*)())dist_RRPHONEME_DATACOST;
      goto LABEL_16;
    case 5:
      v2 = (uint64_t (*)())dist_PITCH_CART;
      goto LABEL_16;
    case 6:
      v2 = (uint64_t (*)())dist_DUR_CART;
      goto LABEL_16;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x12:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2B:
    case 0x2C:
    case 0x45:
    case 0x46:
      v3 = *(unsigned __int8 *)(a1 + 13) - 2;
      if (v3 >= 7 || ((0x47u >> v3) & 1) == 0)
        return v1;
      v2 = off_24D293AD0[(char)v3];
      goto LABEL_16;
    case 0x11:
      v2 = (uint64_t (*)())dist_UNITBIAS;
      goto LABEL_16;
    case 0x13:
    case 0x14:
    case 0x15:
      v4 = *(unsigned __int8 *)(a1 + 13);
      if (v4 == 2)
      {
        v2 = (uint64_t (*)())dist_COMMON_EMULATEBUG203_2;
      }
      else
      {
        if (v4 != 3)
          return v1;
        v2 = (uint64_t (*)())dist_COMMON_EMULATEBUG203_3;
      }
LABEL_16:
      v1 = 0;
      *(_QWORD *)(a1 + 16) = v2;
      *(_BYTE *)(a1 + 24) = ~(-1 << *(_BYTE *)(a1 + 13));
      return v1;
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      v2 = (uint64_t (*)())dist_COMMON_8;
      goto LABEL_16;
    default:
      return v1;
  }
}

uint64_t dist_LPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[6];
  v7 = v6[7];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[8];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_RPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[9];
  v7 = v6[10];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[11];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_LLPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[12];
  v7 = v6[13];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[14];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_RRPHONEME_DATACOST(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v6 = *(_QWORD **)(a1 + 888);
  v8 = v6[15];
  v7 = v6[16];
  v9 = *(unsigned __int8 *)(v7 + a2);
  v10 = *(unsigned __int8 *)(v7 + a3);
  v11 = v6[17];
  if (v9 <= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v9 < v10)
    v10 = v9;
  return *a5 * *(unsigned __int16 *)(v8 + 2 * (*(unsigned __int16 *)(v11 + 2 * v10) + v12));
}

uint64_t dist_PITCH_CART(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = (_DWORD *)a1[111];
  if (!*v5)
    return 0;
  if (!a3 && *a5)
    return 500000;
  v6 = a1[5];
  LODWORD(v7) = *(_DWORD *)(v6 + 2680);
  if ((_DWORD)v7)
  {
    LODWORD(v7) = v5[1];
    if ((_DWORD)v7)
    {
      v7 = *(_QWORD *)(v6 + 3000);
      if (v7)
      {
        v8 = *(unsigned __int8 *)(a1[107] + *(unsigned __int8 *)(v7 + 25) + 3);
        v7 = *(_QWORD *)(v6 + 2480);
        if (!v7 || (v9 = (_DWORD *)(v7 + 8 * v8), (LODWORD(v7) = *v9) == 0) || v9[1] >= a3)
        {
          v7 = *(_QWORD *)(v6 + 2488);
          if (v7)
          {
            v10 = (_DWORD *)(v7 + 8 * v8);
            LODWORD(v7) = *v10;
            if (*v10)
            {
              if (v10[1] <= a3)
                LODWORD(v7) = 0;
            }
          }
        }
      }
    }
  }
  v11 = a3 - a2;
  if (a2 >= a3)
    v11 = a2 - a3;
  if (*(_DWORD *)(v6 + 2700))
  {
    if (v11 <= v5[36] * *(_DWORD *)(v6 + 2704))
      v12 = v11 * v11 * *a5 / v5[37];
    else
      v12 = v11 * v11 * *a5 / v5[37] * *(_DWORD *)(v6 + 2708);
  }
  else
  {
    v12 = (a2 - a3) * (a2 - a3) * *a5 / v5[37];
    if (v11 > *(_DWORD *)(v6 + 2576))
      v12 *= 10;
  }
  return v12 + v7;
}

uint64_t dist_DUR_CART(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = *(_DWORD **)(a1 + 40);
  if (!v5[678])
  {
    if (a2)
    {
      v10 = a3 - a2;
      if (a2 >= a3)
        v10 = a2 - a3;
      v11 = (a2 - a3) * (a2 - a3) * *a5 / *(_DWORD *)(*(_QWORD *)(a1 + 888) + 156);
      if (v10 <= v5[645])
        return v11;
      else
        return 10 * v11;
    }
    return 0;
  }
  if (!a2)
    return 0;
  v6 = a2 - a3;
  if (a2 < a3)
    v6 = a3 - a2;
  v7 = *(_QWORD *)(a1 + 888);
  v8 = *(_DWORD *)(v7 + 152);
  if (v6 > v8 * v5[679])
  {
    v9 = v5[680];
    return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156) * v9;
  }
  if (a2 > a3 && v6 > v5[681] * v8)
  {
    v9 = v5[682];
    return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156) * v9;
  }
  return v6 * v6 * *a5 / *(_DWORD *)(v7 + 156);
}

uint64_t dist_UNITBIAS(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  return ((int)(a3 >> *(_BYTE *)(a4 + 12) << 31) >> 31) & *a5;
}

uint64_t dist_COMMON_EMULATEBUG203_2(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  int v12;

  v5 = *a5;
  if (!*a5)
    return 0;
  v6 = (a3 >> *(_BYTE *)(a4 + 12)) & 3;
  v7 = *((_QWORD *)a5 + 1);
  if (*(_WORD *)v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + v6)
         + *(unsigned __int16 *)(v7 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2);
    else
      v9 = v6 + *(unsigned __int16 *)(v7 + 2) * a2;
    v12 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 8) + 2 * v9);
    if (v12 == 150)
    {
      return 5000000;
    }
    else if (v12 == 200)
    {
      return 15000000;
    }
    else
    {
      return (v5 * v12);
    }
  }
  else
  {
    v11 = 100 * v5;
    if ((_DWORD)v6 == a2)
      return 0;
    else
      return v11;
  }
}

uint64_t dist_COMMON_EMULATEBUG203_3(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v10;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 7;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + v5)
         + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v7 + a2);
    else
      v8 = v5 + *(unsigned __int16 *)(v6 + 2) * a2;
    v10 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + 2 * v8);
    if (v10 == 150)
    {
      return 5000000;
    }
    else if (v10 == 200)
    {
      return 15000000;
    }
    else
    {
      return (*(_DWORD *)a5 * v10);
    }
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_2(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 3;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_3(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 7;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (a3 >> *(_BYTE *)(a4 + 12)) & 0xFLL;
  v6 = *(_QWORD *)(a5 + 8);
  if (*(_WORD *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
      v9 = *(unsigned __int16 *)(v7
                               + 2
                               * (*(unsigned __int8 *)(v8 + v5)
                                + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2)));
    else
      v9 = *(unsigned __int16 *)(v7 + 2 * (v5 + *(unsigned __int16 *)(v6 + 2) * a2));
    return (*(_DWORD *)a5 * v9);
  }
  else if ((_DWORD)v5 == a2)
  {
    return 0;
  }
  else
  {
    return (100 * *(_DWORD *)a5);
  }
}

uint64_t dist_COMMON_8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v11;

  v5 = *((_QWORD *)a5 + 1);
  if (*(_WORD *)v5)
  {
    v6 = *a5;
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + a3)
         + *(unsigned __int16 *)(v5 + 2) * (unint64_t)*(unsigned __int8 *)(v8 + a2);
    else
      v9 = *(unsigned __int16 *)(v5 + 2) * (unint64_t)a2 + a3;
    v11 = *(unsigned __int16 *)(v7 + 2 * v9);
  }
  else
  {
    if (a2 == a3)
      return 0;
    v6 = *a5;
    v11 = 100;
  }
  return (v6 * v11);
}

uint64_t uselect_IsNextUnit(uint64_t result, unsigned int a2)
{
  unsigned int *v2;
  uint64_t i;
  unsigned int v4;
  unsigned int v5;

  if (result)
  {
    v4 = *(_DWORD *)result;
    v2 = (unsigned int *)(result + 4);
    for (i = v4; ; --i)
    {
      if (!i)
        return 0;
      v5 = *v2;
      if (*v2 == a2)
        break;
      ++v2;
      if (v5 > a2)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t uselect_extractQuantization(unsigned int a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = a1 >> 4;
  if (a2 != 77)
    v3 = a1 & 0xF;
  v4 = ~(v3 - 8) + ~(v3 - 8) * (v3 - 8) - (v3 - 8);
  if (v3 <= 7)
    v4 = v3 + (v3 + 1) * (v3 + 1);
  v5 = (6554 * (66 * v3 + 38)) >> 16;
  if (a3 == 85)
    return v5;
  else
    return v4;
}

uint64_t uselect_CalculateCost(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t result;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  BOOL v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;

  result = 4000000000;
  v7 = *(_DWORD **)(a1 + 40);
  v8 = **(_QWORD **)(a2 + 40);
  *(_BYTE *)(a2 + 108) = 0;
  v9 = *(unsigned __int8 *)(a1 + 848);
  if (*(_BYTE *)(a1 + 848))
  {
    v10 = 0;
    v11 = a4 | a3;
    v12 = *(unsigned int **)(a1 + 824);
    v13 = a2 + 65;
    while (1)
    {
      v14 = *v12;
      v15 = **((_QWORD **)v12 + 5);
      if (v10)
      {
        v16 = v7[667] == 1 && v14 >= result;
        if (v16)
          return result;
      }
      if (!v11)
        break;
LABEL_9:
      if (v14 < result)
        goto LABEL_10;
LABEL_186:
      v12 += 28;
      if (++v10 >= v9)
        return result;
    }
    v17 = v7[640];
    if (v17 && (*((_BYTE *)v12 + 61) != 1 || *((_BYTE *)v12 + 77) != 114))
    {
      v18 = *(_DWORD *)(a2 + 96);
      if (v12[24])
      {
        if (!v18)
          goto LABEL_186;
      }
      else if (v18)
      {
        goto LABEL_186;
      }
    }
    if (v14 >= result)
      goto LABEL_186;
    if (v15 == v8 && v12[2] == *(_DWORD *)(a2 + 32))
    {
      v19 = 0;
LABEL_22:
      v20 = 1;
      if (!v17)
        goto LABEL_56;
    }
    else
    {
      if (a5 && (*((_BYTE *)v12 + 86) || *(_BYTE *)(a2 + 87)))
        goto LABEL_186;
      if (v15 == v8)
      {
        v21 = *(_DWORD *)(v8 + 2632);
        if (v21 <= 0x63)
        {
          v22 = (unsigned int *)*((_QWORD *)v12 + 2);
          if (v22)
          {
            v23 = *(_DWORD *)(a2 + 32);
            v26 = *v22;
            v24 = v22 + 1;
            v25 = v26;
            while (v25)
            {
              v27 = *v24;
              if (*v24 == v23)
              {
                v46 = **((_DWORD **)v12 + 3);
                v19 = 0;
                if (*(_DWORD *)(v8 + 2588) == 1)
                  v46 = v46 << *((_BYTE *)v12 + 86) << *(_BYTE *)(a2 + 87);
                v14 = v46 * v21 / 0x64 + v14;
                goto LABEL_22;
              }
              ++v24;
              --v25;
              if (v27 > v23)
                break;
            }
          }
        }
      }
      if (*(_DWORD *)(v15 + 2588) == 1 && *(_DWORD *)(v8 + 2588) == 1)
      {
        v20 = 0;
        v28 = **((_DWORD **)v12 + 3) << *((_BYTE *)v12 + 86) << *(_BYTE *)(a2 + 87);
      }
      else
      {
        v20 = 0;
        v28 = **((_DWORD **)v12 + 3);
      }
      v14 = (v28 + v14);
      v19 = 1;
      if (!v17)
      {
LABEL_56:
        if (v14 >= result)
          goto LABEL_186;
        v30 = *(unsigned int *)(v15 + 3384);
        if ((v30 & 0x80000000) != 0 || (*(_DWORD *)(v8 + 3384) & 0x80000000) != 0)
        {
LABEL_87:
          if (v15 != v8)
            goto LABEL_113;
          if (v19)
          {
            if (*(_DWORD *)(v8 + 2604) == 2)
            {
              if (*(_DWORD *)(v8 + 2624))
              {
                if (*((_BYTE *)v12 + 77) != 114)
                {
                  if (*(_BYTE *)(v8 + *((unsigned __int8 *)v12 + 76) + 1630) == 83)
                  {
                    v48 = 0;
                    goto LABEL_103;
                  }
                  v47 = (unsigned __int8 *)(*(_QWORD *)(v8 + 3568)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 8)
                                          + *(unsigned __int8 *)(a2 + 74)
                                          + 0x10000);
LABEL_102:
                  v48 = *v47;
LABEL_103:
                  if (v7[669] < v48)
                    goto LABEL_186;
                  v49 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 8);
                  v50 = v14 + v49 * v48;
                  LODWORD(v14) = v14 + 10 * v48 * v49;
                  if (v7[650] < v48)
                    v14 = v14;
                  else
                    v14 = v50;
                  goto LABEL_112;
                }
                v41 = *(unsigned __int8 *)(a2 + 74);
                v42 = *(_QWORD *)(v8 + 3568) + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 8);
              }
              else
              {
                v41 = *(unsigned __int8 *)(a2 + 74);
                v42 = *(_QWORD *)(v8 + 3560) + ((unint64_t)*((unsigned __int8 *)v12 + 75) << 7);
              }
              v47 = (unsigned __int8 *)(v42 + v41);
              goto LABEL_102;
            }
            v43 = *(_QWORD *)(v8 + 3560);
            if (v43)
            {
              v44 = 0;
              v45 = 0;
              do
              {
                v45 += 2
                     * *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 68) << 7))
                     + *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44 - 3)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 68) << 7))
                     + *(unsigned __int8 *)(v43
                                          + *(unsigned __int8 *)(v13 + v44)
                                          + ((unint64_t)*((unsigned __int8 *)v12 + v44 + 71) << 7));
                ++v44;
                v43 += 0x4000;
              }
              while (v44 != 3);
            }
            else
            {
              v45 = 0;
              v51 = *(_QWORD *)(v8 + 3568);
              do
              {
                v45 += 2
                     * *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43) | ((unint64_t)*((unsigned __int8 *)v12
                                                                                                  + v43
                                                                                                  + 68) << 8)))
                     + *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43 - 3) | ((unint64_t)*((unsigned __int8 *)v12 + v43 + 68) << 8)))
                     + *(unsigned __int8 *)(v51
                                          + (*(unsigned __int8 *)(v13 + v43) | ((unint64_t)*((unsigned __int8 *)v12
                                                                                                  + v43
                                                                                                  + 71) << 8)));
                ++v43;
                v51 += 0x10000;
              }
              while (v43 != 3);
            }
            v52 = v45 / 0xA;
            v53 = v45 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 8);
            if (v52 <= v7[650])
              v14 = (v14 + 2 * v53);
            else
              v14 = (v14 + 20 * v53);
          }
LABEL_112:
          if (v14 >= result)
            goto LABEL_186;
LABEL_113:
          v54 = *(unsigned int *)(v15 + 3404);
          if ((v54 & 0x80000000) != 0 || (*(_DWORD *)(v8 + 3404) & 0x80000000) != 0)
            goto LABEL_157;
          if (v19
            && *(_BYTE *)(v8 + *(unsigned __int8 *)(a2 + 76) + 859) == 118
            && *(_BYTE *)(v15 + *((unsigned __int8 *)v12 + 76) + 859) == 118)
          {
            v55 = *((unsigned __int8 *)v12 + 92);
            v57 = (v55 >> 4) + ((v55 >> 4) + 1) * ((v55 >> 4) + 1);
            if ((v55 & 0x80) != 0)
            {
              v56 = ((*((_BYTE *)v12 + 92) >> 4) - 8);
              v57 = ~v56 + ~v56 * v56 - v56;
            }
            v58 = v55 & 0xF;
            if (v58 <= 7)
              v59 = v58 + (v58 + 1) * (v58 + 1);
            else
              v59 = ~(v58 - 8)
                  + ~(v58 - 8) * (v58 - 8)
                  - (v58 - 8);
            if (*((_BYTE *)v12 + 77) == 114)
              v57 = v59;
            v60 = *(unsigned __int8 *)(a2 + 92);
            v62 = (v60 >> 4) + ((v60 >> 4) + 1) * ((v60 >> 4) + 1);
            if ((v60 & 0x80) != 0)
            {
              v61 = ((*(_BYTE *)(a2 + 92) >> 4) - 8);
              v62 = ~v61 + ~v61 * v61 - v61;
            }
            v63 = v60 & 0xF;
            if (v63 <= 7)
              v64 = v63 + (v63 + 1) * (v63 + 1);
            else
              v64 = ~(v63 - 8)
                  + ~(v63 - 8) * (v63 - 8)
                  - (v63 - 8);
            if (*(_BYTE *)(a2 + 77) == 114)
              v65 = v64;
            else
              v65 = v62;
            if (v65 - v57 >= 0)
              v66 = v65 - v57;
            else
              v66 = v57 - v65;
            if (v66 > v7[663])
              goto LABEL_186;
            v68 = v65 > 0 && v57 < 0;
            if (v66 > v7[662])
            {
              if (v68 || v65 < 0 && v57 >= 1)
              {
                v14 = v14 + 100 * v66 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54);
                goto LABEL_156;
              }
              goto LABEL_155;
            }
            if (v68 || v65 < 0 && v57 >= 1)
            {
LABEL_155:
              v14 = v14 + 10 * v66 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54);
              goto LABEL_156;
            }
            v14 = v14 + *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v54) * v66;
          }
LABEL_156:
          if (v14 >= result)
            goto LABEL_186;
LABEL_157:
          v69 = *(unsigned int *)(v15 + 3400);
          if ((v69 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 3400) & 0x80000000) == 0)
          {
            if (v19)
            {
              v70 = *((unsigned __int8 *)v12 + 91);
              v71 = v70 & 0xF;
              v72 = v70 >> 4;
              if (*((_BYTE *)v12 + 77) == 114)
                v73 = v71;
              else
                v73 = v72;
              v74 = 6554 * (66 * v73 + 38);
              v75 = HIWORD(v74);
              v76 = *(unsigned __int8 *)(a2 + 91);
              v77 = v76 & 0xF;
              v78 = v76 >> 4;
              if (*(_BYTE *)(a2 + 77) == 114)
                v79 = v77;
              else
                v79 = v78;
              v80 = 6554 * (66 * v79 + 38);
              v81 = HIWORD(v80) - HIWORD(v74);
              v16 = v75 >= HIWORD(v80);
              v82 = v75 - HIWORD(v80);
              if (v16)
                v83 = v82;
              else
                v83 = v81;
              if (v83 > v7[666])
                goto LABEL_186;
              v84 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v69);
              if (v83 <= v7[665])
                v14 = v14 + 10 * v83 * v84;
              else
                v14 = v14 + 100 * v83 * v84;
            }
            if (v14 >= result)
              goto LABEL_186;
          }
          if (v15 != v8
            || (v85 = *(unsigned int *)(v8 + 3392), (v85 & 0x80000000) != 0)
            && (v85 = *(unsigned int *)(v8 + 3396), (v85 & 0x80000000) != 0))
          {
LABEL_10:
            *(_BYTE *)(a2 + 108) = v10;
            result = v14;
            goto LABEL_186;
          }
          if (*(_BYTE *)(v8 + *(unsigned __int8 *)(a2 + 76) + 1116) == 86 && *(_BYTE *)(a2 + 77) == 108)
          {
            v86 = *((unsigned __int8 *)v12 + 85);
            if (v86 != 255)
            {
              v87 = *(unsigned __int8 *)(a2 + 84);
              if (v87 != 255)
              {
                v88 = v87 - v86;
                v89 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 3368) + 12 * v85 + 8);
                v90 = *(__int16 *)(a2 + 56);
                if (v88 >= v90)
                {
LABEL_185:
                  v94 = 10 * v89;
LABEL_189:
                  v14 = (v14 + *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v85) * v94);
                  goto LABEL_9;
                }
                v91 = *(__int16 *)(a2 + 54);
                if (v88 >= v91)
                {
                  v95 = (v88 - v91) * v89;
                  v96 = v90 - v91;
                  goto LABEL_193;
                }
                v92 = *(__int16 *)(a2 + 52);
                if (v92 > v88)
                {
                  v93 = *(__int16 *)(a2 + 50);
                  if (v88 < v93)
                    goto LABEL_185;
                  v95 = (v92 - v88) * v89;
                  v96 = v92 - v93;
LABEL_193:
                  v94 = v95 / v96;
                  goto LABEL_189;
                }
              }
            }
          }
          v94 = 0;
          goto LABEL_189;
        }
        if (v19)
        {
          if (*(_DWORD *)(a2 + 80) == 1
            && v12[20] == 1
            && (*(unsigned __int8 *)(a2 + 90) < 0x15u || *((unsigned __int8 *)v12 + 88) <= 0x14u))
          {
            v31 = 10 * *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v30);
            v32 = (unsigned __int8 *)(*(_QWORD *)(v15 + 28160) + 99);
LABEL_85:
            v14 = v14 + v31 * *v32;
            goto LABEL_86;
          }
          if (*(_DWORD *)(v15 + 2612) == 1)
          {
            v33 = *(unsigned __int8 *)(a2 + 90);
            if (*(_DWORD *)(v8 + 2612) == 1)
            {
              v34 = *((unsigned __int8 *)v12 + 88);
              goto LABEL_72;
            }
          }
          else
          {
            v33 = *(unsigned __int8 *)(a2 + 90);
          }
          if (v33 >= 0x15)
          {
            v34 = *((unsigned __int8 *)v12 + 88);
            if (v34 >= 0x15 && *((unsigned __int8 *)v12 + 89) <= 0xEu)
            {
LABEL_72:
              v35 = v34 - v33;
              v16 = v33 >= v34;
              v36 = v33 - v34;
              if (v16)
                v37 = v36;
              else
                v37 = v35;
              if (v36 >= 49)
                v38 = 49;
              else
                v38 = v36;
              v39 = v38 + 50;
              if (v36 >= -50)
                v40 = v39;
              else
                v40 = 0;
              if (v37 > v7[668])
                goto LABEL_186;
              v31 = *(_DWORD *)(*((_QWORD *)v12 + 3) + 4 * v30);
              if (v37 > v7[649])
                v31 *= 10;
              v32 = (unsigned __int8 *)(*(_QWORD *)(v15 + 28160) + v40);
              goto LABEL_85;
            }
          }
        }
LABEL_86:
        if (v14 >= result)
          goto LABEL_186;
        goto LABEL_87;
      }
    }
    v29 = *((unsigned __int8 *)v12 + 61);
    if (v29 == 1 && *((_BYTE *)v12 + 77) == 114)
    {
      if (!*(_DWORD *)(a2 + 100))
      {
        if (*(unsigned __int8 *)(a2 + 76) == *(unsigned __int8 *)(v8 + 2179))
          v14 = v14;
        else
          v14 = (v14 + 50000);
      }
    }
    else
    {
      if (v12[26])
      {
        if (!v12[25])
          v20 = 1;
        if (v20)
          v14 = v14;
        else
          v14 = (v14 + 50000);
      }
      if (v19 && (v29 != 1 || *((_BYTE *)v12 + 77) != 114) && (v12[24] || *(_DWORD *)(a2 + 96)))
        goto LABEL_186;
    }
    goto LABEL_56;
  }
  return result;
}

uint64_t logTransFormatHeader(_DWORD *a1, char *__dst)
{
  size_t v4;
  size_t v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  const char *v11;
  size_t v12;
  size_t v13;

  cstdlib_strcpy(__dst, "**** Transition Cost Details ****\n");
  v4 = cstdlib_strlen(__dst);
  sprintf(&__dst[v4], "Minimal transition cost up to and including left diphone (%d) +\n", 1);
  cstdlib_strcat(__dst, "(Pure transition cost)\n");
  if ((a1[845] & 0x80000000) != 0)
  {
    v6 = 2;
  }
  else
  {
    v5 = cstdlib_strlen(__dst);
    sprintf(&__dst[v5], "   TRANS_ADJACENT(%d) +\n", 2);
    v6 = 3;
  }
  if ((a1[846] & 0x80000000) == 0)
  {
    v7 = cstdlib_strlen(__dst);
    sprintf(&__dst[v7], "   TRANS_PITCH_HISTO(%d) +\n", v6++);
  }
  if ((a1[847] & 0x80000000) == 0)
  {
    v8 = cstdlib_strlen(__dst);
    sprintf(&__dst[v8], "   TRANS_CEPSTRUM(%d) +\n", v6++);
  }
  if ((a1[851] & 0x80000000) == 0)
  {
    v9 = cstdlib_strlen(__dst);
    sprintf(&__dst[v9], "   TRANS_GRDPITCH(%d) +\n", v6++);
  }
  if ((a1[850] & 0x80000000) == 0)
  {
    v10 = cstdlib_strlen(__dst);
    sprintf(&__dst[v10], "  TRANS_ENERGY_TRANS(%d) +\n", v6++);
  }
  if ((a1[848] & 0x80000000) == 0)
  {
    v11 = "   TRANS_PITCH_SYL_TRANS_DIFFERENTIATOR(%d) +\n";
LABEL_16:
    v12 = cstdlib_strlen(__dst);
    sprintf(&__dst[v12], v11, v6++);
    goto LABEL_17;
  }
  if ((a1[849] & 0x80000000) == 0)
  {
    v11 = "    TRANS_PITCH_SYL_TRANS_SMALLSPFY(%d) +\n";
    goto LABEL_16;
  }
LABEL_17:
  v13 = cstdlib_strlen(__dst);
  return sprintf(&__dst[v13], "node cost right (%d)\n = transition cost up to and including right diphone (%d)\n", v6, v6 + 1);
}

uint64_t uselect_ExtractFeatFromMsg(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  char v29;
  int v30;
  _BYTE *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  __int128 *v36;
  int v37;
  _BYTE *v38;
  __int128 *v39;
  int v40;
  _BYTE *v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  BOOL v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  __int128 *v90;
  __int128 *v91;
  __int128 *v92;
  __int128 *v93;
  __int128 *v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  __int128 *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD v125[2];

  v2 = result;
  v3 = 0;
  v4 = *(_QWORD *)(result + 888);
  v5 = *(_BYTE **)(result + 856);
  v6 = *(_QWORD *)(result + 896);
  v7 = *(_QWORD *)(result + 40);
  v8 = (__int16)(a2 + ((unsigned __int16)(a2 & 0x8000) >> 15)) >> 1;
  if ((a2 & 1) != 0)
    v9 = 114;
  else
    v9 = 108;
  v125[0] = 0;
  v124 = 0;
  v5[1] = v9;
  v10 = (uint64_t)(__int16)(a2 + ((unsigned __int16)(a2 & 0x8000) >> 15)) >> 1;
  *v5 = *(_BYTE *)(*(_QWORD *)(result + 760) + 864 * v8 + 2);
  v5[2] = 0;
  if (*(_DWORD *)(v7 + 2564) != 1)
    v3 = *(unsigned __int8 *)(v7 + *(unsigned __int8 *)(*(_QWORD *)(result + 760) + 864 * (int)v10 + 2) + 2144);
  if (*(_WORD *)(v7 + 2966))
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 + 1;
    v14 = v10 + 2;
    v120 = v8 - 2;
    v15 = v10 - 1;
    result = (v10 - 1);
    v16 = (_BYTE *)(v7 + 2179);
    v17 = v4 + 120;
    v18 = v4 + 48;
    v19 = (__int128 *)(v7 + 192 * v3);
    v20 = (__int128 *)((char *)v19 + 3752);
    v21 = v19 + 230;
    v22 = v19 + 224;
    v23 = (__int128 *)((char *)v19 + 3656);
    v123 = v4 + 96;
    v118 = v19 + 227;
    v119 = v19 + 233;
    v122 = v4 + 72;
    v116 = (__int128 *)((char *)v19 + 3608);
    v117 = (__int128 *)((char *)v19 + 3704);
    v121 = a2 + 1;
    v24 = v5 + 3;
    v25 = 864 * (int)v10;
    v26 = v25 + 356;
    while (2)
    {
      if (v5[1] == 108)
        v27 = (_DWORD *)(*(_QWORD *)(v2 + 760) + v26 - 284);
      else
        v27 = (_DWORD *)(*(_QWORD *)(v2 + 760) + v26);
      *(_DWORD *)v6 = *v27;
      v28 = *(_QWORD *)(v2 + 760);
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 3416)
                          + 24 * *(unsigned __int8 *)(v28 + v25 + v12 + 640);
      switch(*(_DWORD *)(*(_QWORD *)(v7 + 2968) + v11))
      {
        case 1:
          v30 = v5[1];
          v31 = v16;
          if (v121 >= 3)
          {
            if (v30 != 114 || (v31 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
              v31 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v15 + 2) + 2144);
          }
          v24[v12] = *v31;
          if (v30 == 108)
          {
            v32 = *v22;
            v33 = *((_QWORD *)v22 + 2);
          }
          else
          {
            v32 = *v21;
            v33 = *((_QWORD *)v21 + 2);
          }
          *(_QWORD *)(v18 + 16) = v33;
          *(_OWORD *)v18 = v32;
          goto LABEL_82;
        case 2:
          v34 = v5[1];
          v35 = v16;
          if (*(__int16 *)(v2 + 768) - 1 != v8)
          {
            if (v34 != 108 || (v35 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
              v35 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v13 + 2) + 2144);
          }
          v24[v12] = *v35;
          if (v34 == 108)
            v36 = v116;
          else
            v36 = v117;
          v52 = *v36;
          v53 = *((_QWORD *)v36 + 2);
          v54 = v122;
          goto LABEL_103;
        case 3:
          v37 = v5[1];
          v38 = v16;
          if (a2 >= 4)
          {
            if (v37 != 114 || (v38 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
            {
              v38 = v16;
              if (*(_BYTE *)(v28 + 864 * result + 2) != 35)
                v38 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * v120 + 2) + 2144);
            }
          }
          v24[v12] = *v38;
          if (v37 == 108)
            v39 = v118;
          else
            v39 = v119;
          v52 = *v39;
          v53 = *((_QWORD *)v39 + 2);
          v54 = v123;
LABEL_103:
          *(_QWORD *)(v54 + 16) = v53;
          *(_OWORD *)v54 = v52;
          goto LABEL_82;
        case 4:
          v40 = v5[1];
          v41 = v16;
          if ((int)v14 < *(__int16 *)(v2 + 768))
          {
            if (v40 != 108 || (v41 = v16, *(_BYTE *)(v28 + 864 * (int)v10 + 2) != 35))
            {
              v41 = v16;
              if (*(_BYTE *)(v28 + 864 * (int)v13 + 2) != 35)
                v41 = (_BYTE *)(v7 + *(unsigned __int8 *)(v28 + 864 * (int)v14 + 2) + 2144);
            }
          }
          v24[v12] = *v41;
          if (v40 == 108)
          {
            v42 = *v23;
            v43 = *((_QWORD *)v23 + 2);
          }
          else
          {
            v42 = *v20;
            v43 = *((_QWORD *)v20 + 2);
          }
          *(_QWORD *)(v17 + 16) = v43;
          *(_OWORD *)v17 = v42;
          goto LABEL_82;
        case 5:
          if (*(_DWORD *)(v7 + 2736) == 1 && v5[1] == 114)
            v44 = (_BYTE *)(v28 + 864 * (int)v10 + 44);
          else
            v44 = (_BYTE *)(v28 + 864 * (int)v10 + 22);
          v24[v12] = *v44;
          v48 = *(_QWORD *)(v4 + 16);
          if (v48 && *(_BYTE *)(v48 + 4) && *(_BYTE *)(v48 + 5))
          {
            v90 = v22;
            v92 = v21;
            v94 = v20;
            v96 = v18;
            v98 = v17;
            v100 = v16;
            v102 = (_QWORD *)result;
            v104 = v15;
            v106 = v14;
            v108 = v13;
            v110 = v8;
            v112 = a2;
            v114 = v4;
            uselect_splitGID(v2, *(_DWORD *)v48, v125, &v124);
            v4 = v114;
            v49 = *(_QWORD *)(v114 + 16);
            v50 = *(unsigned __int8 *)(v49 + 4);
            if (v50 == 3)
            {
              v51 = 0;
            }
            else if (v50 == 1)
            {
              v51 = *(unsigned __int8 *)(v49 + 5);
            }
            else
            {
              v51 = -*(unsigned __int8 *)(v49 + 5);
            }
            v8 = v110;
            a2 = v112;
            v14 = v106;
            v13 = v108;
            result = (uint64_t)v102;
            v15 = v104;
            v17 = v98;
            v16 = v100;
            v20 = v94;
            v18 = v96;
            v22 = v90;
            v21 = v92;
            v59 = (*(unsigned __int8 *)(*(_QWORD *)(v125[0] + 160)
                                      + v124 * *(unsigned __int8 *)(v125[0] + 168)
                                      + *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 11)) >> *(_BYTE *)(*(_QWORD *)(v7 + 2968) + v11 + 12)) & *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 24);
            v60 = *(unsigned __int8 *)(v2 + 932);
            v61 = v60 - v59;
            v62 = v59 >= v60;
            v63 = v59 - v60;
            if (v63 == 0 || !v62)
              LOBYTE(v63) = v61;
            v64 = v51 * v63 / 100 + v59;
            if (v64 >= 255)
              v64 = 255;
            v24[v12] = v64 & ~(v64 >> 31);
            *(_DWORD *)v6 = *(_DWORD *)(v2 + 928);
          }
          *(_DWORD *)v6 *= 1000;
          if (*(_DWORD *)(v7 + 2736) == 1 && v5[1] == 114)
          {
            v65 = *(_QWORD *)(v2 + 760);
            v66 = v65 + 864 * (int)v10;
            v69 = *(unsigned __int8 *)(v66 + 45);
            v67 = (unsigned __int8 *)(v66 + 45);
            v68 = v69;
          }
          else
          {
            v65 = *(_QWORD *)(v2 + 760);
            v70 = v65 + 864 * (int)v10;
            v71 = *(unsigned __int8 *)(v70 + 23);
            v67 = (unsigned __int8 *)(v70 + 23);
            v68 = v71;
          }
          *(_DWORD *)(v4 + 148) = v68 * v68;
          *(_DWORD *)(v4 + 144) = (6554 * *v67 + 32770) >> 16;
          v72 = v7 + *(unsigned __int8 *)(v7 + *(unsigned __int8 *)(v65 + 864 * (int)v10 + 2) + 2144);
          *(_DWORD *)v4 = *(unsigned __int8 *)(v72 + 859) == 118;
          *(_DWORD *)(v4 + 4) = *(_BYTE *)(v72 + 1116) == 86
                             && (v73 = *(_QWORD *)(v7 + 2992)) != 0
                             && v5[*(unsigned __int8 *)(v73 + 25) + 3] == 3;
          goto LABEL_82;
        case 6:
          if (*(_BYTE *)(v28 + 864 * (int)v10 + 2) == 35)
          {
            v45 = 0;
          }
          else if (*(_DWORD *)(v7 + 2740) == 1 && v5[1] == 114)
          {
            v45 = *(_BYTE *)(v28 + 864 * (int)v10 + 46);
          }
          else
          {
            v45 = *(_BYTE *)(v28 + 864 * (int)v10 + 24);
          }
          v24[v12] = v45;
          if (*(_BYTE *)(*(_QWORD *)(v2 + 760) + 864 * (int)v10 + 2) != 35)
          {
            v55 = *(_QWORD *)(v4 + 16);
            if (v55)
            {
              if (*(_BYTE *)(v55 + 6) && *(_BYTE *)(v55 + 7))
              {
                v91 = v22;
                v93 = v21;
                v95 = v20;
                v97 = v18;
                v99 = v17;
                v101 = v16;
                v103 = (_QWORD *)result;
                v105 = v15;
                v107 = v14;
                v109 = v13;
                v111 = v8;
                v113 = a2;
                v115 = v4;
                uselect_splitGID(v2, *(_DWORD *)v55, v125, &v124);
                v4 = v115;
                v56 = *(_QWORD *)(v115 + 16);
                v57 = *(unsigned __int8 *)(v56 + 6);
                if (v57 == 3)
                {
                  v58 = 0;
                }
                else if (v57 == 1)
                {
                  v58 = *(unsigned __int8 *)(v56 + 7);
                }
                else
                {
                  v58 = -*(unsigned __int8 *)(v56 + 7);
                }
                v8 = v111;
                a2 = v113;
                v14 = v107;
                v13 = v109;
                result = (uint64_t)v103;
                v15 = v105;
                v17 = v99;
                v16 = v101;
                v20 = v95;
                v18 = v97;
                v22 = v91;
                v21 = v93;
                v74 = (*(unsigned __int8 *)(*(_QWORD *)(v125[0] + 160)
                                          + v124 * *(unsigned __int8 *)(v125[0] + 168)
                                          + *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 11)) >> *(_BYTE *)(*(_QWORD *)(v7 + 2968) + v11 + 12)) & *(unsigned __int8 *)(*(_QWORD *)(v7 + 2968) + v11 + 24);
                v75 = *(unsigned __int8 *)(v2 + 924);
                v76 = v75 - v74;
                v62 = v74 >= v75;
                v77 = v74 - v75;
                if (v77 == 0 || !v62)
                  LOBYTE(v77) = v76;
                v78 = v58 * v77 / 100 + v74;
                if (v78 >= 255)
                  v78 = 255;
                v24[v12] = v78 & ~(v78 >> 31);
                *(_DWORD *)v6 = *(_DWORD *)(v2 + 920);
              }
            }
          }
          *(_DWORD *)v6 *= 10;
          if (*(_DWORD *)(v7 + 2740) == 1)
          {
            v79 = *(_QWORD *)(v2 + 760);
            if (v5[1] == 114)
            {
              v80 = v79 + 864 * (int)v10;
              *(_DWORD *)(v4 + 156) = *(unsigned __int8 *)(v80 + 47) * *(unsigned __int8 *)(v80 + 47);
              v81 = *(unsigned __int8 *)(v80 + 47);
              goto LABEL_145;
            }
          }
          else
          {
            v79 = *(_QWORD *)(v2 + 760);
          }
          v82 = v79 + 864 * (int)v10;
          *(_DWORD *)(v4 + 156) = *(unsigned __int8 *)(v82 + 25) * *(unsigned __int8 *)(v82 + 25);
          v81 = *(unsigned __int8 *)(v82 + 25);
LABEL_145:
          *(_DWORD *)(v4 + 152) = v81;
LABEL_82:
          v47 = !*(_DWORD *)v6
             && (*(_DWORD *)(*(_QWORD *)(v7 + 2968) + v11) != 5
              || !*(_DWORD *)(*(_QWORD *)(v2 + 40) + 2680)
              || !*(_DWORD *)(*(_QWORD *)(v2 + 888) + 4));
          *(_DWORD *)(v6 + 16) = v47;
          ++v12;
          v6 += 24;
          v26 += 4;
          v11 += 32;
          if (v12 >= *(unsigned __int16 *)(v7 + 2966))
            break;
          continue;
        case 7:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 13);
          goto LABEL_81;
        case 8:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 14);
          goto LABEL_81;
        case 9:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 15);
          goto LABEL_81;
        case 0xA:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 16);
          goto LABEL_81;
        case 0xB:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 17);
          goto LABEL_81;
        case 0xC:
        case 0x13:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 18);
          goto LABEL_81;
        case 0xD:
        case 0x14:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 21);
          goto LABEL_81;
        case 0xE:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 26);
          goto LABEL_81;
        case 0xF:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 27);
          goto LABEL_81;
        case 0x10:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 28);
          goto LABEL_81;
        case 0x11:
          v24[v12] = 0;
          goto LABEL_82;
        case 0x12:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 29);
          goto LABEL_81;
        case 0x1A:
          if (a2 < 2)
            goto LABEL_64;
          v46 = v28 + 864 * result;
          goto LABEL_63;
        case 0x1B:
          if (*(__int16 *)(v2 + 768) <= (int)v13)
            goto LABEL_64;
          v46 = v28 + 864 * (int)v13;
          goto LABEL_63;
        case 0x1C:
          if (a2 < 4)
            goto LABEL_64;
          v46 = v28 + 864 * v120;
          goto LABEL_63;
        case 0x1D:
          if (*(__int16 *)(v2 + 768) <= (int)v14)
          {
LABEL_64:
            v29 = 35;
          }
          else
          {
            v46 = v28 + 864 * (int)v14;
LABEL_63:
            v29 = *(_BYTE *)(v46 + 2);
          }
LABEL_81:
          v24[v12] = v29;
          goto LABEL_82;
        case 0x1E:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 30);
          goto LABEL_81;
        case 0x1F:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 31);
          goto LABEL_81;
        case 0x20:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 32);
          goto LABEL_81;
        case 0x21:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 33);
          goto LABEL_81;
        case 0x22:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 34);
          goto LABEL_81;
        case 0x23:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 35);
          goto LABEL_81;
        case 0x24:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 36);
          goto LABEL_81;
        case 0x25:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 37);
          goto LABEL_81;
        case 0x26:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 38);
          goto LABEL_81;
        case 0x27:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 39);
          goto LABEL_81;
        case 0x28:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 40);
          goto LABEL_81;
        case 0x29:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 41);
          goto LABEL_81;
        case 0x2B:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 42);
          goto LABEL_81;
        case 0x2C:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 43);
          goto LABEL_81;
        case 0x45:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 48);
          goto LABEL_81;
        case 0x46:
          v29 = *(_BYTE *)(v28 + 864 * (int)v10 + 49);
          goto LABEL_81;
        default:
          goto LABEL_82;
      }
      break;
    }
  }
  if (*(_DWORD *)(v7 + 2560))
  {
    v83 = *(_QWORD *)(v2 + 760) + 864 * (int)v10;
    v84 = *(_BYTE *)(v83 + 68);
    *(_QWORD *)(v4 + 29) = *(_QWORD *)(v83 + 60);
    result = v4 + 29;
    *(_BYTE *)(v4 + 37) = v84;
    v85 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 36));
    *(_BYTE *)(v4 + 36) = v85;
    v86 = *(unsigned __int8 *)(v7 + 2144 + v84);
    *(_BYTE *)(v4 + 37) = v86;
    v87 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 34));
    *(_BYTE *)(v4 + 34) = v87;
    v88 = *(unsigned __int8 *)(v7 + 2144 + *(unsigned __int8 *)(v4 + 35));
    *(_BYTE *)(v4 + 35) = v88;
    if (v85 == 255 || v86 == 255 || v87 == 255 || v88 == 255)
    {
      v89 = v4;
      result = (uint64_t)cstdlib_memset((void *)result, 0, 9uLL);
      v4 = v89;
    }
    if (*(_BYTE *)(*(_QWORD *)(v2 + 760) + 864 * (int)v10 + 20))
    {
      if (v5[1] == 108)
        *(_DWORD *)(v4 + 40) = 100000;
    }
  }
  return result;
}

uint64_t smooth_f0(uint64_t a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  char v4;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  BOOL *v31;
  int v32;
  _WORD *v33;
  uint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int32x2_t *v41;
  __int32 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  signed int v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned __int16 *v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;

  v4 = a4;
  v8 = (a3 + 1);
  v9 = 0x200000 / a4;
  v10 = 2229280778;
  v11 = heap_Calloc(*(_QWORD **)(a1 + 8), (3 * v8), 4);
  if (v11)
  {
    v12 = v11;
    v13 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 4);
    v14 = *(_QWORD **)(a1 + 8);
    if (!v13)
    {
      v67 = v12;
LABEL_78:
      heap_Free(v14, v67);
      return v10;
    }
    v15 = heap_Calloc(v14, v8, 2);
    if (!v15)
    {
LABEL_77:
      heap_Free(*(_QWORD **)(a1 + 8), v12);
      v14 = *(_QWORD **)(a1 + 8);
      v67 = v13;
      goto LABEL_78;
    }
    v72 = (unsigned __int16 *)v15;
    v16 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 4);
    v17 = *(_QWORD **)(a1 + 8);
    if (!v16)
    {
      v68 = (uint64_t)v72;
LABEL_76:
      heap_Free(v17, v68);
      goto LABEL_77;
    }
    v71 = v16;
    v70 = heap_Calloc(v17, v8, 1);
    if (v70)
    {
      v18 = heap_Calloc(*(_QWORD **)(a1 + 8), v8, 1);
      v19 = v18;
      if (v18)
      {
        v20 = (uint64_t)v72;
        *v72 = *a2;
        if (a3 >= 2)
        {
          v21 = v72 + 1;
          v22 = a2 + 2;
          v23 = a3 - 1;
          do
          {
            v24 = *v22;
            v25 = *(v22 - 1);
            v22 += 2;
            v26 = (v25 + v24) >> 1;
            if (!v25)
              LOWORD(v26) = v24;
            if (v24)
              v27 = v26;
            else
              v27 = v25;
            *v21++ = v27;
            --v23;
          }
          while (v23);
        }
        v28 = 2 * a3;
        v72[a3] = a2[2 * a3 - 1];
        if (a3 <= 0x7FFFFFFE)
        {
          v29 = v8;
          v30 = v72;
          v31 = (BOOL *)v70;
          do
          {
            v32 = *v30++;
            *v31++ = v32 != 0;
            --v29;
          }
          while (v29);
        }
        if (a3 >= 1)
        {
          v33 = a2 + 1;
          v34 = a3;
          v35 = (_BYTE *)v18;
          v36 = (_DWORD *)v71;
          do
          {
            v37 = (unsigned __int16)*(v33 - 1);
            if (*(v33 - 1))
            {
              v37 = (unsigned __int16)*v33 - v37;
              if (*v33)
              {
                v38 = v4;
              }
              else
              {
                v37 = 0;
                v38 = 0;
              }
            }
            else
            {
              v38 = 0;
            }
            *v36++ = v37;
            *v35++ = v38;
            v33 += 2;
            --v34;
          }
          while (v34);
        }
        v39 = v70;
        if (a3 <= 0x7FFFFFFE)
        {
          v40 = 0;
          v41 = (int32x2_t *)(v12 + 8);
          do
          {
            v41[-1].i32[0] = 0;
            v41[-1].i32[1] = *(unsigned __int8 *)(v70 + v40);
            v41->i32[0] = 0;
            *(_DWORD *)(v13 + 4 * v40) = v72[v40] * *(unsigned __int8 *)(v70 + v40);
            if (v40)
            {
              v42 = v41[-1].i32[1];
              v41[-1].i32[0] -= *(unsigned __int8 *)(v18 + (v40 - 1));
              v41[-1].i32[1] = v42 + *(unsigned __int8 *)(v18 + (v40 - 1));
              *(_DWORD *)(v13 + 4 * v40) += *(_DWORD *)(v71 + 4 * (v40 - 1))
                                          * *(unsigned __int8 *)(v18 + (v40 - 1));
            }
            if (v40 < a3)
            {
              v41[-1].i32[1] += *(unsigned __int8 *)(v18 + v40);
              v41->i32[0] -= *(unsigned __int8 *)(v18 + v40);
              *(_DWORD *)(v13 + 4 * v40) -= *(_DWORD *)(v71 + 4 * v40) * *(unsigned __int8 *)(v18 + v40);
            }
            v41[-1] = vshl_n_s32(v41[-1], 9uLL);
            v41->i32[0] <<= 9;
            v41 = (int32x2_t *)((char *)v41 + 12);
            *(_DWORD *)(v13 + 4 * v40++) <<= 9;
          }
          while (v8 != v40);
        }
        if (a3 >= 1)
        {
          v43 = 0;
          do
          {
            v44 = 3 * v43 + 1;
            v45 = *(_DWORD *)(v12 + 4 * v44);
            if (v45)
            {
              v46 = *(_DWORD *)(v13 + 4 * v43);
              v47 = 3 * v43 + 2;
              if (v46 <= v9)
              {
                v48 = *(_DWORD *)(v12 + 4 * v47);
              }
              else
              {
                do
                {
                  *(_DWORD *)(v13 + 4 * v43) = v46 >> 1;
                  v45 = *(_DWORD *)(v12 + 4 * v44) / 2;
                  *(_DWORD *)(v12 + 4 * v44) = v45;
                  v48 = *(_DWORD *)(v12 + 4 * v47) / 2;
                  *(_DWORD *)(v12 + 4 * v47) = v48;
                  v46 = *(_DWORD *)(v13 + 4 * v43);
                }
                while (v46 > v9);
              }
              v49 = (int *)(v12 + 12 * (v43 + 1));
              v50 = *v49;
              v51 = *v49 * v48;
              if (v45 >= 0)
                v52 = v45;
              else
                v52 = v45 + 1;
              v49[1] -= (v51 + (v52 >> 1)) / v45;
              *(_DWORD *)(v13 + 4 * (v43 + 1)) -= (*(_DWORD *)(v13 + 4 * v43) * v50 + (v52 >> 1)) / v45;
              ++v43;
            }
            else
            {
              ++v43;
            }
          }
          while (v43 != a3);
        }
        v53 = *(_DWORD *)(v12 + 12 * a3 + 4);
        if (v53)
        {
          if (v53 >= 0)
            v54 = *(_DWORD *)(v12 + 12 * a3 + 4);
          else
            v54 = v53 + 1;
          v53 = (*(_DWORD *)(v13 + 4 * a3) + (v54 >> 1)) / v53;
        }
        a2[2 * (_DWORD)v8 - 3] = v53;
        v55 = (a3 - 1);
        if (a3 - 1 >= 0)
        {
          v56 = 2 * (a3 - 1);
          v57 = (_DWORD *)(v12 + 12 * v55 + 8);
          v58 = a3;
          v59 = (a3 - 1);
          do
          {
            v60 = *(v57 - 1);
            if (v60)
            {
              v61 = &a2[v28];
              if (v58 >= a3)
                v61 = &a2[2 * (_DWORD)v8 - 3];
              v62 = *v61;
              if (v60 >= 0)
                v63 = *(v57 - 1);
              else
                v63 = v60 + 1;
              v60 = (*(_DWORD *)(v13 + 4 * v59) + (v63 >> 1) - *v57 * v62) / v60;
            }
            v57 -= 3;
            v64 = &a2[v56 & 0xFFFFFFFE];
            if (v59 >= a3)
              v64 = &a2[2 * (_DWORD)v8 - 3];
            *v64 = v60;
            v56 -= 2;
            --v58;
            v28 -= 2;
          }
          while (v59-- > 0);
          if (a3 >= 2)
          {
            v66 = a2 + 2;
            do
            {
              *(v66 - 1) = *v66;
              v66 += 2;
              --v55;
            }
            while (v55);
          }
        }
        v10 = 0;
        goto LABEL_72;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t)v72;
    v39 = v70;
LABEL_72:
    heap_Free(*(_QWORD **)(a1 + 8), v20);
    heap_Free(*(_QWORD **)(a1 + 8), v71);
    if (v39)
      heap_Free(*(_QWORD **)(a1 + 8), v39);
    if (!v19)
      goto LABEL_77;
    v17 = *(_QWORD **)(a1 + 8);
    v68 = v19;
    goto LABEL_76;
  }
  return v10;
}

uint64_t uselect_CountPhonemes(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  _BOOL4 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  if (a3)
  {
    v3 = 0;
    v4 = 0;
    v5 = a3;
    while (1)
    {
      v7 = *a2++;
      v6 = v7;
      if (v7 == 91)
        goto LABEL_9;
      if ((_DWORD)v6 == 92)
      {
        v3 = !v3;
      }
      else
      {
        if ((_DWORD)v6 != 93)
        {
          if (!v3)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v6 + 2144) != 255)
              ++v4;
            goto LABEL_10;
          }
LABEL_9:
          v3 = 1;
          goto LABEL_10;
        }
        v3 = 0;
      }
LABEL_10:
      if (!--v5)
        goto LABEL_16;
    }
  }
  v4 = 0;
LABEL_16:
  if (v4 < 2 && a3 > 1)
    return 2;
  return v4;
}

uint64_t US_comp(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

uint64_t uselect_ResetUnitSelector(uint64_t a1, int a2)
{
  int v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  if (a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 908);
    if ((v3 * a2) > *(_DWORD *)(a1 + 784))
    {
      v4 = (v3 * (__int16)((a2 & 0xFFC0) + 64));
      v5 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 792), 4 * v4);
      if (!v5
        || (*(_QWORD *)(a1 + 792) = v5,
            (v10 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 800), v4)) == 0)
        || (*(_QWORD *)(a1 + 800) = v10,
            (v11 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 808), 2 * v4)) == 0))
      {
        v12 = 2229280778;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19000, 0, v6, v7, v8, v9, v17);
        return v12;
      }
      *(_QWORD *)(a1 + 808) = v11;
      *(_DWORD *)(a1 + 784) = v4;
      cstdlib_memset(*(void **)(a1 + 792), -1, 4 * v4);
      cstdlib_memset(*(void **)(a1 + 800), -1, v4);
    }
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 792);
    if (v13)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
      *(_QWORD *)(a1 + 792) = 0;
      *(_DWORD *)(a1 + 784) = 0;
    }
    v14 = *(_QWORD *)(a1 + 800);
    if (v14)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
      *(_QWORD *)(a1 + 800) = 0;
    }
    v15 = *(_QWORD *)(a1 + 808);
    if (v15)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
      *(_QWORD *)(a1 + 808) = 0;
    }
    v12 = 0;
    *(_DWORD *)(a1 + 784) = 0;
  }
  return v12;
}

uint64_t uselect_ProcessUnitSelector(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 i;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  unsigned __int8 *v84;
  _BOOL4 v85;

  v2 = *(_DWORD **)(a1 + 40);
  if (v2[671])
  {
    v85 = v2[672] != 0;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v85 = 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 746);
  if (*(_WORD *)(a1 + 746))
  {
    v5 = *(_DWORD *)(a1 + 768);
LABEL_16:
    v14 = v5 << 16;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 824) = v6;
  v7 = *(unsigned __int8 *)(a1 + 908);
  v8 = v6 + 112 * v7;
  *(_QWORD *)(a1 + 832) = v8;
  *(_QWORD *)(a1 + 840) = v8 + 112 * v7;
  *(_WORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 850) = 0;
  if (v7)
  {
    v9 = v6 + 32;
    v10 = v7;
    do
    {
      *(_DWORD *)v9 = -1;
      *(_BYTE *)(v9 + 26) = -1;
      v9 += 112;
      --v10;
    }
    while (v10);
    v11 = v6 + 112 * v7 + 32;
    v12 = v7;
    do
    {
      *(_DWORD *)v11 = -1;
      *(_BYTE *)(v11 + 26) = -1;
      v11 += 112;
      --v12;
    }
    while (v12);
    v13 = v6 + 224 * v7 + 32;
    do
    {
      *(_DWORD *)v13 = -1;
      *(_BYTE *)(v13 + 26) = -1;
      v13 += 112;
      --v7;
    }
    while (v7);
  }
  v5 = *(_DWORD *)(a1 + 768);
  v14 = v5 << 16;
  if (v5 << 16 >= 1)
  {
    v15 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3528);
    do
    {
      *(_DWORD *)(v16 + 4 * (__int16)v15++) = -1;
      v5 = *(_DWORD *)(a1 + 768);
    }
    while (2 * (__int16)v5 > (__int16)v15);
    goto LABEL_16;
  }
LABEL_17:
  if (v4)
    LOWORD(v4) = 2 * v4 + 4;
  else
    LOWORD(v4) = 0;
  v17 = 2 * v5 - 1;
  if (v14 >> 15 > (__int16)(2 * *(_WORD *)(a1 + 748) + 3))
    v17 = 2 * *(_WORD *)(a1 + 748) + 3;
  v18 = v17;
  if ((__int16)v4 <= v17)
  {
    while (1)
    {
      v21 = (__int16)v4;
      v22 = (__int16)v4 - 1;
      if ((__int16)v4 > 1)
        break;
      result = uselect_SelectNextCandidate(a1, v3, 0, (__int16)v4);
      if ((_DWORD)result)
        return result;
      LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
      v25 = *(unsigned __int8 *)(a1 + 850);
      if (*(_BYTE *)(a1 + 850))
      {
        v26 = 0;
        v27 = (int)(v24 * v21);
        v28 = *(_QWORD *)(a1 + 808) + 2 * v27;
        v29 = *(_QWORD *)(a1 + 840);
        v30 = *(_QWORD *)(a1 + 64);
        v31 = *(_QWORD *)(a1 + 792) + 4 * v27;
        do
        {
          v32 = v29 + 112 * v26;
          v33 = *(_QWORD *)(v32 + 40);
          v34 = *(_DWORD *)(v32 + 32);
          v35 = *(_DWORD *)(a1 + 48) - 1;
          while (v35)
          {
            v36 = v35;
            v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v35--);
            if (v37 == v33)
            {
              v38 = v36;
              goto LABEL_33;
            }
          }
          v38 = 0;
LABEL_33:
          *(_DWORD *)(v31 + 4 * v26) = *(_DWORD *)(v30 + 4 * v38) + v34;
          *(_WORD *)(v28 + 2 * v26) = *(_WORD *)(v29 + 112 * v26 + 59);
          if (!v21)
            *(_DWORD *)(v29 + 112 * v26) = 0;
          ++v26;
        }
        while (v26 != v25);
      }
LABEL_65:
      v20 = *(unsigned __int8 *)(a1 + 849);
      *(_BYTE *)(a1 + 848) = v20;
      *(_BYTE *)(a1 + 849) = *(_BYTE *)(a1 + 850);
      *(_BYTE *)(a1 + 850) = 0;
      v60 = *(_QWORD *)(a1 + 824);
      v61 = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 824) = v61;
      *(_QWORD *)(a1 + 840) = v60;
      if ((_DWORD)v24)
      {
        v24 = v24;
        v62 = v60 + 32;
        do
        {
          *(_DWORD *)v62 = -1;
          *(_BYTE *)(v62 + 26) = -1;
          v62 += 112;
          --v24;
        }
        while (v24);
      }
      v4 = (__int16)(v21 + 1);
      if (v4 > v18)
      {
        v19 = (unsigned int *)v61;
        goto LABEL_70;
      }
    }
    if (!v85)
      goto LABEL_44;
    v39 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v39 + 2732) == 1)
    {
      if ((v21 & 1) != 0)
      {
LABEL_44:
        v40 = 0;
LABEL_45:
        result = uselect_SelectNextCandidate(a1, v3, v40, v21);
        if ((_DWORD)result)
          return result;
        if (v85 && v21 != 2 && (v21 & 1) == 0)
        {
          v41 = *(_QWORD *)(a1 + 40);
          if (*(_DWORD *)(v41 + 2732) == 1
            || *(_BYTE *)(v41
                        + *((unsigned __int8 *)v2
                          + *(unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * ((v21 >> 1) - 1) + 2)
                          + 2144)
                        + 1887) != 83)
          {
            result = uselect_SelectNextCandidate(a1, v3, 1, (__int16)v22);
            if ((_DWORD)result)
              return result;
          }
        }
        uselect_SelectBestPredecessor(a1);
        if (v2[667] == 1)
          ssft_qsort(*(_QWORD *)(a1 + 832), *(unsigned __int8 *)(a1 + 849), 112, (uint64_t (*)(unint64_t, unint64_t))US_comp);
        v42 = *(unsigned __int8 *)(a1 + 849);
        LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
        if (*(_BYTE *)(a1 + 849))
        {
          v43 = 0;
          v44 = *(_QWORD *)(a1 + 832);
          v45 = *(_QWORD *)(a1 + 64);
          v46 = *(_QWORD *)(a1 + 792) + 4 * (v22 * v24);
          do
          {
            v47 = v44 + 112 * v43;
            v48 = *(_QWORD *)(v47 + 40);
            v49 = *(_DWORD *)(v47 + 32);
            v50 = *(_DWORD *)(a1 + 48) - 1;
            while (v50)
            {
              v51 = v50;
              v52 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v50--);
              if (v52 == v48)
              {
                v53 = v51;
                goto LABEL_61;
              }
            }
            v53 = 0;
LABEL_61:
            *(_DWORD *)(v46 + 4 * v43++) = *(_DWORD *)(v45 + 4 * v53) + v49;
          }
          while (v43 != v42);
          v54 = 0;
          v55 = 0;
          v56 = *(_QWORD *)(a1 + 832);
          v57 = (v22 * v24);
          v58 = *(_QWORD *)(a1 + 800) + v57;
          v59 = *(_QWORD *)(a1 + 808) + 2 * v57 + 1;
          do
          {
            *(_BYTE *)(v58 + v55) = *(_BYTE *)(v56 + v54 + 108);
            v56 = *(_QWORD *)(a1 + 832);
            *(_WORD *)(v59 - 1) = *(_WORD *)(v56 + v54 + 59);
            ++v55;
            v59 += 2;
            v54 += 112;
          }
          while (v55 < *(unsigned __int8 *)(a1 + 849));
          LODWORD(v24) = *(unsigned __int8 *)(a1 + 908);
        }
        goto LABEL_65;
      }
    }
    else if ((v21 & 1) != 0
           || *(_BYTE *)(v39
                       + *((unsigned __int8 *)v2
                         + *(unsigned __int8 *)(*(_QWORD *)(a1 + 760) + 864 * (v21 >> 1) + 2)
                         + 2144)
                       + 1887) == 83)
    {
      goto LABEL_44;
    }
    v40 = 2;
    goto LABEL_45;
  }
  v19 = *(unsigned int **)(a1 + 824);
  v20 = *(unsigned __int8 *)(a1 + 848);
LABEL_70:
  if (v20 < 2)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    v66 = *v19;
    v64 = v19 + 28;
    v65 = v66;
    for (i = 1; i < v20; ++i)
    {
      v69 = *v64;
      v64 += 28;
      v68 = v69;
      if (v69 < v65)
      {
        v65 = v68;
        v63 = i;
      }
    }
  }
  v70 = v18 - 1;
  v71 = (__int16)(v18 - 1);
  if (v71 <= 2 * *(__int16 *)(a1 + 746))
  {
    v74 = *(_QWORD *)(a1 + 792);
    v73 = *(unsigned __int8 *)(a1 + 908);
    v82 = *(_QWORD *)(a1 + 776);
    v76 = *(_QWORD *)(v82 + 3528);
    v72 = *(_QWORD *)(a1 + 808);
    v77 = *(_QWORD *)(v82 + 3536);
  }
  else
  {
    v72 = *(_QWORD *)(a1 + 808);
    v73 = *(unsigned __int8 *)(a1 + 908);
    v74 = *(_QWORD *)(a1 + 792);
    v75 = *(_QWORD *)(a1 + 776);
    v76 = *(_QWORD *)(v75 + 3528);
    v77 = *(_QWORD *)(v75 + 3536);
    v78 = *(_QWORD *)(a1 + 800);
    do
    {
      v79 = v73 * (uint64_t)v71;
      v80 = v63;
      *(_DWORD *)(v76 + 4 * v70) = *(_DWORD *)(v74 + 4 * v79 + 4 * v63);
      v81 = (unsigned __int8 *)(v72 + 2 * v79 + 2 * v63);
      *(_WORD *)(v77 + 4 * v71) = *v81;
      *(_WORD *)(v77 + 4 * v71 + 2) = v81[1];
      v63 = *(_BYTE *)(v78 + v79 + v80);
      v71 = --v70;
    }
    while (v70 > 2 * *(__int16 *)(a1 + 746));
  }
  v83 = v71 * v73;
  *(_DWORD *)(v76 + 4 * v70) = *(_DWORD *)(v74 + 4 * v83 + 4 * v63);
  v84 = (unsigned __int8 *)(v72 + 2 * v83 + 2 * v63);
  *(_WORD *)(v77 + 4 * v71) = *v84;
  *(_WORD *)(v77 + 4 * v71 + 2) = v84[1];
  result = 0;
  if (v18 + 1 == (int)(*(_DWORD *)(a1 + 768) << 16) >> 15)
    *(_DWORD *)(v76 + 4 * v18) = *(_DWORD *)(*(_QWORD *)(a1 + 832) + 32);
  return result;
}

uint64_t uselect_SelectNextCandidate(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a1 + 776);
  if (*(_DWORD *)(a1 + 916))
  {
    v9 = *(_QWORD *)(v8 + 3640);
    v10 = v9 + 504 * a4;
    if (!v9)
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(v11 + 8) = v10;
  v12 = *(_QWORD *)(v8 + 3648);
  if (v12)
  {
    if (*(_BYTE *)(v12 + 8 * a4 + 4) || *(_BYTE *)(v12 + 8 * a4 + 6))
      v12 += 8 * a4;
    else
      v12 = 0;
  }
  *(_QWORD *)(v11 + 16) = v12;
  uselect_ExtractFeatFromMsg(a1, a4);
  v13 = *(_QWORD *)(a1 + 760);
  v14 = (uint64_t)(__int16)(a4 + ((unsigned __int16)(a4 & 0x8000) >> 15)) >> 1;
  v15 = *(_QWORD *)(a1 + 888);
  v16 = v13 + 864 * (int)v14;
  v17 = (int *)(v16 + 8);
  v18 = (int *)(v16 + 4);
  if ((a4 & 1) != 0)
    v18 = v17;
  v19 = *v18;
  *(_DWORD *)(v15 + 24) = v19;
  if (v19 <= 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 776) + 3632);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 4 * a4);
      if (v22 != -1)
        *(_DWORD *)(v15 + 24) = v22;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 2532))
  {
    if ((a4 + 1) >= 3)
      v20 = *(_BYTE *)(v13 + 864 * (int)v14 - 862);
    else
      v20 = 0;
    *(_BYTE *)(v15 + 44) = v20;
    if (*(__int16 *)(a1 + 768) - 1 == (_DWORD)v14)
      v24 = 0;
    else
      v24 = *(_BYTE *)(*(_QWORD *)(a1 + 760) + 864 * (int)v14 + 866);
    *(_BYTE *)(v15 + 45) = v24;
    v23 = *(_BYTE **)(a1 + 856);
    if (*v23 == 35)
    {
      if (v23[1] == 114)
        *(_BYTE *)(v15 + 44) = 35;
      else
        *(_BYTE *)(v15 + 45) = 35;
    }
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 856);
  }
  *(_BYTE *)(v15 + 28) = 0;
  if (v23[1] == 108)
  {
    if (a4 < 2)
      goto LABEL_34;
    v25 = *(_QWORD *)(a1 + 760) + 864 * (unsigned __int16)(((unsigned __int16)a4 >> 1) - 1);
  }
  else
  {
    if (*(__int16 *)(a1 + 768) <= (int)v14 + 1)
      goto LABEL_34;
    v25 = *(_QWORD *)(a1 + 760) + 864 * ((int)v14 + 1);
  }
  *(_BYTE *)(v15 + 28) = *(_BYTE *)(v25 + 2);
LABEL_34:
  if (a2)
  {
    v26 = *(_QWORD *)(a1 + 760);
    if (v23[1] == 108)
      v27 = *(unsigned __int8 *)(v26 + 864 * (int)v14 + 776);
    else
      v27 = *(unsigned __int8 *)(v26 + 864 * (int)v14 + 777);
    v28 = uselect_CascadingFlatSearch(a1, v27, a3);
  }
  else
  {
    v28 = uselect_FlatSearch(a1);
  }
  *(_BYTE *)(a1 + 872) = v28;
  uselect_CopyResultsToDpNode(a1, a3, a4);
  if (a3 == 1 || *(_BYTE *)(a1 + 850))
    return 0;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19009, (uint64_t)"%s%d", v29, v30, v31, v32, "phoneme");
  return 2229280796;
}

uint64_t uselect_createGID(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 48) - 1;
  while (v4)
  {
    LODWORD(v5) = v4;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4--);
    if (v6 == a2)
    {
      v5 = v5;
      goto LABEL_6;
    }
  }
  v5 = 0;
LABEL_6:
  *a4 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v5) + a3;
  return 0;
}

uint64_t uselect_SelectBestPredecessor(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = result;
  v2 = *(_QWORD *)(result + 824);
  v3 = *(unsigned __int8 *)(v2 + 76);
  v4 = **(_QWORD **)(v2 + 40);
  if ((_DWORD)v3 == *(unsigned __int8 *)(v4 + 2179)
    || *(unsigned __int8 *)(*(_QWORD *)(result + 832) + 76) == *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(result + 832)
                                                                                                  + 40)
                                                                                    + 2179))
  {
    if (!*(_DWORD *)(v4 + 2588) || (v5 = *(_QWORD *)(result + 832), !*(_DWORD *)(**(_QWORD **)(v5 + 40) + 2588)))
    {
      v6 = 1;
      goto LABEL_9;
    }
    if (!*(_BYTE *)(v2 + 86))
    {
      v6 = *(_BYTE *)(v5 + 87) == 0;
      goto LABEL_9;
    }
  }
  v6 = 0;
LABEL_9:
  v7 = *(unsigned __int8 *)(result + 849);
  v9 = *(_DWORD *)(*(_QWORD *)(result + 40) + 2616) == 1
    && *(_BYTE *)(v4 + v3 + 1630) == 83
    && (v8 = *(_QWORD *)(result + 832), *(_BYTE *)(**(_QWORD **)(v8 + 40) + *(unsigned __int8 *)(v8 + 76) + 1630) == 83)
    && *(unsigned __int8 *)(v8 + 77) == 114;
  v10 = *(_QWORD *)(result + 832);
  if (*(_DWORD *)(v4 + 2696))
  {
    v11 = v4 == **(_QWORD **)(v10 + 40);
    if (!*(_BYTE *)(result + 849))
      return result;
  }
  else
  {
    v11 = 0;
    if (!*(_BYTE *)(result + 849))
      return result;
  }
  v21 = *(_QWORD *)(result + 40);
  v12 = 1;
  do
  {
    result = uselect_CalculateCost(v1, v10, v6, v9, v11);
    *(_DWORD *)(v10 + 4) = result;
    if (result < 0xEE6B2800)
      v12 = 0;
    v13 = *(_QWORD *)(v1 + 832);
    v10 += 112;
  }
  while (v10 < v13 + 112 * v7);
  if (v12 && v11)
  {
    do
    {
      result = uselect_CalculateCost(v1, v13, v6, v9, 0);
      *(_DWORD *)(v13 + 4) = result;
      v13 += 112;
    }
    while (v13 < *(_QWORD *)(v1 + 832) + 112 * (unint64_t)v7);
    v13 = *(_QWORD *)(v1 + 832);
  }
  v14 = v13 + 112 * v7;
  v15 = *(_QWORD *)(v1 + 824);
  do
  {
    *(_DWORD *)v13 += *(_DWORD *)(v13 + 4);
    v16 = *(unsigned __int8 *)(v13 + 108);
    v17 = **(_DWORD ***)(v15 + 112 * *(unsigned __int8 *)(v13 + 108) + 40);
    if ((v17[848] & 0x80000000) == 0 || (v17[849] & 0x80000000) == 0)
    {
      v18 = **(_QWORD **)(v13 + 40);
      if (((*(_DWORD *)(v18 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v18 + 3396) & 0x80000000) == 0)
        && *(unsigned __int8 *)(v13 + 85) == 255)
      {
        *(_BYTE *)(v13 + 85) = *(_BYTE *)(v15 + 112 * *(unsigned __int8 *)(v13 + 108) + 85);
      }
    }
    if ((v17[846] & 0x80000000) == 0 && !v17[648])
    {
      v19 = **(_QWORD **)(v13 + 40);
      if ((*(_DWORD *)(v19 + 3384) & 0x80000000) == 0 && !*(_DWORD *)(v19 + 2592) && !*(_BYTE *)(v13 + 88))
      {
        v20 = v15 + 112 * v16;
        *(_BYTE *)(v13 + 88) = *(_BYTE *)(v20 + 88);
        *(_BYTE *)(v13 + 89) = *(_BYTE *)(v20 + 89) + 1;
      }
    }
    if (*(_DWORD *)(v21 + 2560)
      && (*(_BYTE *)(v15 + 112 * v16 + 61) != 1 || *(_BYTE *)(v15 + 112 * v16 + 77) != 114)
      && (v17 != **(_DWORD ***)(v13 + 40)
       || *(_DWORD *)(v15 + 112 * v16 + 8) != *(_DWORD *)(v13 + 32)
       || !*(_DWORD *)(v15 + 112 * v16 + 104)))
    {
      *(_DWORD *)(v13 + 104) = 0;
    }
    v13 += 112;
  }
  while (v13 < v14);
  return result;
}

uint64_t uselect_CopyResultsToDpNode(uint64_t result, int a2, int a3)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  BOOL v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  _WORD *v43;
  unsigned __int16 v44;
  unsigned int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  char v52;
  int v53;

  v3 = a3;
  v4 = result;
  if ((a3 & 1) != 0)
    v5 = 114;
  else
    v5 = 108;
  if (a2 != 1)
  {
    v6 = *(_QWORD *)(result + 840);
    v8 = *(unsigned __int8 *)(result + 872);
    *(_BYTE *)(result + 850) = v8;
    if (!v8)
      return result;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(result + 832) + 112 * *(unsigned __int8 *)(result + 849);
  v7 = *(unsigned __int8 *)(result + 872);
  *(_BYTE *)(result + 849) += v7;
  if (v7)
  {
LABEL_8:
    v53 = (a3 + ((unsigned __int16)(a3 & 0x8000) >> 15)) << 16 >> 17;
    v9 = *(unsigned int **)(result + 880);
    result = 0x3FFFFFFFLL;
    v10 = v6;
    v52 = v5;
    while (1)
    {
      v11 = *((_QWORD *)v9 + 1);
      *(_QWORD *)(v10 + 40) = v11;
      v12 = *v9;
      *(_DWORD *)(v10 + 32) = v12;
      *(_DWORD *)v10 = v9[4];
      *(_BYTE *)(v10 + 58) = *((_BYTE *)v9 + 20);
      if (*(_DWORD *)(*(_QWORD *)(v4 + 40) + 2560))
      {
        *(int32x2_t *)(v10 + 96) = vrev64_s32(*(int32x2_t *)(v9 + 7));
        *(_DWORD *)(v10 + 104) = 1;
      }
      v13 = *(_DWORD **)v11;
      v14 = *(unsigned __int8 *)(*(_QWORD *)v11 + *(unsigned __int8 *)(*(_QWORD *)(v4 + 760) + 864 * v53 + 2) + 2144);
      v15 = *(unsigned __int8 *)(*(_QWORD *)v11 + v14 + 859) == 118;
      *(_BYTE *)(v10 + 76) = v14;
      *(_BYTE *)(v10 + 77) = v5;
      *(_DWORD *)(v10 + 80) = v15;
      if (v13[658] <= 0x63u)
      {
        *(_QWORD *)(v10 + 16) = 0;
        v16 = *(_QWORD *)(v11 + 152);
        if (v16)
        {
          v17 = v12 >> 3;
          if ((v12 & 7) != 0)
            ++v17;
          if (((*(unsigned __int8 *)(v16 + v17) >> (v12 & 7 ^ 7)) & 1) != 0)
          {
            v18 = *(_DWORD *)(v11 + 144);
            if (v18)
            {
              v19 = 0;
              v20 = *(_QWORD *)(v11 + 136);
              while (1)
              {
                v21 = v19;
                v22 = *(_DWORD *)(v20 + 4 * v19);
                if (v22 == (_DWORD)v12)
                  break;
                if (v22 <= v12)
                {
                  v19 = v21 + *(_DWORD *)(v20 + 4 * (v21 + 1)) + 2;
                  if (v19 < v18)
                    continue;
                }
                goto LABEL_23;
              }
              *(_QWORD *)(v10 + 16) = v20 + 4 * v21 + 4;
            }
          }
        }
      }
LABEL_23:
      v23 = v13[651];
      if (v23 != 2)
        break;
      v29 = v13[661];
      if (v13[664])
      {
        v30 = *(_QWORD *)(v11 + 192) + v12 * *(unsigned __int8 *)(v11 + 200);
        cstdlib_memcpy((void *)(v10 + 8), (const void *)v30, 4uLL);
        v25 = *(_BYTE *)(v30 + 4);
        *(_BYTE *)(v10 + 59) = v25;
        v26 = *(unsigned __int8 *)(v30 + 5);
        *(_BYTE *)(v10 + 60) = v26;
        *(_WORD *)(v10 + 74) = *(_WORD *)(v30 + 6);
        if (v29)
          *(_WORD *)(v10 + 91) = *(_WORD *)(v30 + 8);
        else
          *(_BYTE *)(v10 + 91) = *(_BYTE *)(v30 + 8);
        v5 = v52;
        result = 0x3FFFFFFFLL;
        goto LABEL_36;
      }
      if (!v29)
        goto LABEL_33;
      v31 = *(_QWORD *)(v11 + 192) + v12 * *(unsigned __int8 *)(v11 + 200);
      cstdlib_memcpy((void *)(v10 + 8), (const void *)v31, 4uLL);
      result = 0x3FFFFFFFLL;
      v5 = v52;
      v25 = *(_BYTE *)(v31 + 4);
      *(_BYTE *)(v10 + 59) = v25;
      v26 = *(unsigned __int8 *)(v31 + 5);
      *(_BYTE *)(v10 + 60) = v26;
      *(_WORD *)(v10 + 74) = *(_WORD *)(v31 + 6);
      *(_BYTE *)(v10 + 92) = *(_BYTE *)(v31 + 8);
LABEL_36:
      v33 = *(_DWORD **)v11;
      if (*(_DWORD *)(*(_QWORD *)v11 + 2696))
      {
        v34 = *(_DWORD *)(v10 + 8);
        *(_BYTE *)(v10 + 87) = v34 < 0;
        *(_BYTE *)(v10 + 86) = (v34 & 0x40000000) != 0;
        v35 = v34 & 0x3FFFFFFF;
        if (v35 == 0x3FFFFFFF)
          v35 = -1;
        *(_DWORD *)(v10 + 8) = v35;
        v33 = *(_DWORD **)v11;
      }
      if ((v33[846] & 0x80000000) == 0)
      {
        *(_BYTE *)(v10 + 90) = v25;
        v36 = v33[648] == 0;
        v37 = v26 < 0x15;
        v38 = !v36 || !v37;
        if (v36 && v37)
          v39 = 0;
        else
          v39 = v26;
        if (v38)
          v40 = 0;
        else
          v40 = 100;
        *(_BYTE *)(v10 + 88) = v39;
        *(_BYTE *)(v10 + 89) = v40;
      }
      if ((v33[848] & 0x80000000) == 0 || (v33[849] & 0x80000000) == 0)
      {
        v41 = *((_BYTE *)v9 + 36);
        *(_BYTE *)(v10 + 84) = v41;
        v42 = *(_QWORD *)(v4 + 760);
        v43 = (_WORD *)(v42 + 864 * v53);
        *(_WORD *)(v10 + 50) = v43[26];
        *(_WORD *)(v10 + 52) = v43[27];
        *(_WORD *)(v10 + 54) = v43[28];
        *(_WORD *)(v10 + 56) = v43[29];
        if (*((_BYTE *)v33 + *(unsigned __int8 *)(v10 + 76) + 1116) == 86)
        {
          v44 = v53;
          do
          {
            if ((__int16)v44 < 1)
              break;
            if (*(_BYTE *)(v42 + 864 * --v44 + 19) == 1)
              goto LABEL_56;
          }
          while (*((_BYTE *)v33 + *((unsigned __int8 *)v33 + *(unsigned __int8 *)(v42 + 864 * v44 + 2) + 2144) + 1116) != 86);
        }
        v41 = -1;
LABEL_56:
        *(_BYTE *)(v10 + 85) = v41;
      }
      v45 = *((unsigned __int16 *)v33 + 1680);
      if (*((_WORD *)v33 + 1680))
      {
        v46 = 0;
        v47 = *(_QWORD *)(v4 + 760);
        v48 = *(_QWORD *)(v10 + 24);
        do
        {
          v49 = v47 + 864 * v53 + 4 * v46;
          v50 = (_DWORD *)(v49 + 712);
          v51 = (_DWORD *)(v49 + 744);
          if ((v3 & 1) == 0)
            v51 = v50;
          *(_DWORD *)(v48 + 4 * v46++) = *v51;
        }
        while (v45 > v46);
      }
      else
      {
        v47 = *(_QWORD *)(v4 + 760);
      }
      *(_BYTE *)(v10 + 61) = *(_BYTE *)(v47 + 864 * v53 + 19);
      v10 += 112;
      v9 = (unsigned int *)*((_QWORD *)v9 + 6);
      if (v10 >= v6 + 112 * (unint64_t)*(unsigned __int8 *)(v4 + 872))
        return result;
    }
    if (v23 == 1)
    {
      v24 = *(_QWORD *)(v11 + 192) + v12 * *(unsigned __int8 *)(v11 + 200);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)v24;
      v25 = *(_BYTE *)(v24 + 16);
      *(_BYTE *)(v10 + 59) = v25;
      v26 = *(unsigned __int8 *)(v24 + 17);
      *(_BYTE *)(v10 + 60) = v26;
      if (v13[647] == 1)
      {
        v27 = *(unsigned __int8 *)(v24 + 18);
        *(_BYTE *)(v10 + 87) = v27 & 0xF;
        *(_BYTE *)(v10 + 86) = v27 >> 4;
      }
      v28 = *(_QWORD *)(v24 + 4);
      *(_DWORD *)(v10 + 70) = *(_DWORD *)(v24 + 12);
      *(_QWORD *)(v10 + 62) = v28;
      goto LABEL_36;
    }
LABEL_33:
    v32 = *(_QWORD *)(v11 + 192) + v12 * *(unsigned __int8 *)(v11 + 200);
    *(_DWORD *)(v10 + 8) = *(_DWORD *)v32;
    v25 = *(_BYTE *)(v32 + 4);
    *(_BYTE *)(v10 + 59) = v25;
    v26 = *(unsigned __int8 *)(v32 + 5);
    *(_BYTE *)(v10 + 60) = v26;
    *(_WORD *)(v10 + 74) = *(_WORD *)(v32 + 6);
    goto LABEL_36;
  }
  return result;
}

uint64_t uselect_splitGID(uint64_t a1, unsigned int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 <= 1)
    v5 = 1;
  v6 = v5 - 1;
  while (v6 != v4)
  {
    v7 = v4 + 1;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v4++ + 4);
    if (v8 > a2)
    {
      v6 = v7 - 1;
      break;
    }
  }
  *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
  *a4 = a2 - *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v6);
  return 0;
}

uint64_t uselect_FlatSearch(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t OffsetAndCountInCache3Table;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  unsigned __int8 *v39;
  int v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int IsNextUnit;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unsigned __int8 *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int i;
  unsigned int v131;
  uint64_t v132;
  int v133;
  int v134;
  unsigned int v135;
  BOOL v136;
  unsigned int v137;
  uint64_t result;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *j;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  const void *v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned __int8 *v155;
  unsigned int *v156;
  unsigned int v157;
  _QWORD *v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  unsigned int v163;
  int v164;
  const void *v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned int v180;
  int v181;
  int v182;
  BOOL v183;
  char v184;
  char v185;
  unsigned __int8 v186;
  unsigned __int8 *v187;
  _BYTE *__s1;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned __int8 *v192;
  unsigned int v193;
  unsigned int *v194;
  _BOOL4 v195;
  uint64_t v196;
  int v197;
  char *v198;
  unsigned __int8 *v199;
  _BYTE *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  __int128 __b;
  __int128 v208;
  _BYTE v209[24];
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  _QWORD v215[4];
  _QWORD v216[145];

  v216[143] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(unsigned __int8 **)(a1 + 856);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 908);
  v208 = 0u;
  memset(v209, 0, sizeof(v209));
  __b = 0u;
  v205 = -1;
  v206 = 0;
  *(_QWORD *)(a1 + 880) = 0;
  cstdlib_memset(&__b, 0, 0x38uLL);
  v6 = v4;
  if (*(_DWORD *)(v4 + 2560))
    v7 = v5 - 20;
  else
    v7 = v5;
  v186 = v7;
  v8 = *v3;
  v9 = *(unsigned __int8 *)(v4 + 2496);
  v10 = v3[1];
  v11 = v10 == 114;
  v12 = **(_QWORD **)(a1 + 56);
  v210 = v12;
  v204 = v4;
  if (*(_DWORD *)(v4 + 2532) != 1 || *(_DWORD *)(a1 + 912) != 1)
    goto LABEL_32;
  if (*(_BYTE *)(v4 + *(unsigned __int8 *)(v4 + v8 + 2144) + 859) != 118)
    goto LABEL_28;
  v13 = *(_DWORD *)(v4 + 2536) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 1;
  if (*(_DWORD *)(v4 + 2540) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 2)
    v13 = 1;
  if (*(_DWORD *)(v4 + 2544) == 1 && v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 2992) + 25) + 3] == 3)
    v13 = 1;
  if (*(_DWORD *)(v4 + 2548) == 1)
  {
    v14 = v3[*(unsigned __int8 *)(*(_QWORD *)(v4 + 3000) + 25) + 3] != 1 && !v13;
    if (v14)
      goto LABEL_28;
  }
  else if (!v13)
  {
    goto LABEL_28;
  }
  if (v10 == 108)
  {
    *(_BYTE *)(v2 + 45) = 0;
  }
  else if (v10 == 114)
  {
    *(_BYTE *)(v2 + 44) = 0;
  }
LABEL_28:
  OffsetAndCountInCache3Table = uselect_GetOffsetAndCountInCache3Table((_BYTE *)v4, v12, v3, *(unsigned __int8 *)(v2 + 44), *(unsigned __int8 *)(v2 + 45), &v206);
  v6 = v4;
  if (!*(_DWORD *)(v4 + 2532) || (v16 = (unsigned int *)OffsetAndCountInCache3Table) == 0)
  {
    v12 = v210;
LABEL_32:
    v16 = 0;
    v17 = v11 | (2 * (v8 - v9));
    v189 = *(_DWORD *)(*(_QWORD *)(v12 + 128) + 4 * v17);
    v206 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 120) + 2 * v17);
    goto LABEL_33;
  }
  v189 = 0;
LABEL_33:
  v196 = v2;
  v192 = v3;
  v194 = v16;
  if (*v3 == 35 || *(_DWORD *)(v2 + 24) != -1)
    goto LABEL_35;
  v118 = *(_DWORD *)(v6 + 2556);
  if (v118 == 3)
  {
    v147 = *(_QWORD *)(a1 + 888);
    v149 = *(unsigned __int8 *)(v147 + 29);
    v148 = (const void *)(v147 + 29);
    if (!v149)
      goto LABEL_35;
    v150 = v206;
    v151 = v186 >> 1;
    if (!v206)
    {
      v153 = 0;
      v152 = 0;
LABEL_338:
      v195 = v153 > v186;
      v183 = v152 > v151;
LABEL_341:
      v184 = v183;
      v185 = v184;
      v2 = v196;
      v3 = v192;
      v16 = v194;
LABEL_36:
      if (!v206)
        goto LABEL_255;
      v193 = 0;
      v18 = 0;
      v197 = 0;
      v19 = v3;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v187 = v19 + 3;
      __s1 = (_BYTE *)(v2 + 29);
      v190 = -1;
      v191 = -1;
      while (1)
      {
        v23 = *(_DWORD *)(v2 + 24);
        if (v23 == -1)
        {
          if (v16)
            v24 = v16[v20];
          else
            v24 = v20 + v189;
          v205 = v24;
          goto LABEL_58;
        }
        if (v197)
        {
          *(_DWORD *)(v2 + 24) = -1;
          v210 = **(_QWORD **)(a1 + 56);
          v20 = 0;
          if (v16)
            v24 = *v16;
          else
            v24 = v189;
          v205 = v24;
        }
        else
        {
          uselect_splitGID(a1, v23 & 0x7FFFFFFF, &v210, &v205);
          v24 = v205;
          v29 = v210;
          if (v205 >= *(_DWORD *)(v210 + 108))
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19028, (uint64_t)"%s%d", v25, v26, v27, v28, "ID");
            *(_DWORD *)(v2 + 24) = -1;
            v210 = **(_QWORD **)(a1 + 56);
            v20 = 0;
            if (v16)
              v24 = *v16;
            else
              v24 = v189;
            v205 = v24;
            v197 = 1;
            v6 = v204;
            goto LABEL_58;
          }
          v30 = *(_DWORD *)(v2 + 24);
          if ((v30 & 0x80000000) == 0)
          {
            v20 = v206 - 1;
            v6 = v204;
LABEL_55:
            v201 = v21;
            v31 = 0;
            v32 = *(_QWORD *)(v210 + 160) + v205 * *(unsigned __int8 *)(v210 + 168);
            v33 = *(unsigned __int8 **)(v6 + 3000);
            v197 = 1;
            goto LABEL_64;
          }
          v6 = v204;
          if (v30 != -1)
            goto LABEL_55;
        }
        v197 = 1;
LABEL_58:
        v34 = *(_QWORD *)(a1 + 936);
        v29 = v210;
        if (v34 && v210 == **(_QWORD **)(a1 + 56) && *(unsigned __int8 *)(v34 + v24) == 255)
          goto LABEL_210;
        v32 = *(_QWORD *)(v210 + 160) + v24 * *(unsigned __int8 *)(v210 + 168);
        v33 = *(unsigned __int8 **)(v6 + 3000);
        if (v33)
        {
          if (*(unsigned __int8 *)(v32 + v33[11]) == 255)
            goto LABEL_210;
        }
        v201 = v21;
        v31 = 1;
LABEL_64:
        v35 = *(_QWORD *)(v6 + 2968);
        v36 = *(_QWORD *)(a1 + 896);
        v198 = v22;
        if (!v195 || *v192 == 35)
          goto LABEL_66;
        if (!v31)
          goto LABEL_97;
        v44 = *(_DWORD *)(v6 + 2556);
        switch(v44)
        {
          case 3:
            if (v192[v33[25] + 3] != ((*(unsigned __int8 *)(v32 + v33[11]) >> v33[12]) & v33[24]))
              goto LABEL_209;
            v33 = *(unsigned __int8 **)(v6 + 3016);
            v95 = &v192[v33[25]];
            break;
          case 2:
            v95 = &v192[v33[25]];
            break;
          case 1:
            v37 = *(_DWORD *)(v6 + 2560);
            if (v37 == 1)
              goto LABEL_69;
            v45 = v192[1];
            if (v45 == 114)
            {
              v46 = *(_QWORD *)(v6 + 2984);
            }
            else
            {
              if (v45 != 108)
                goto LABEL_209;
              v46 = *(_QWORD *)(v6 + 2976);
            }
            v96 = v192[*(unsigned __int8 *)(v46 + 25) + 3];
            v97 = *(unsigned __int8 *)(v32 + *(unsigned __int8 *)(v46 + 11));
            goto LABEL_198;
          default:
            goto LABEL_66;
        }
        v96 = v95[3];
        v97 = (*(unsigned __int8 *)(v32 + v33[11]) >> v33[12]) & v33[24];
LABEL_198:
        if (v96 != v97)
          goto LABEL_209;
LABEL_66:
        v37 = *(_DWORD *)(v6 + 2560);
        v38 = v31 ^ 1;
        if (!v37)
          v38 = 1;
        if ((v38 & 1) != 0)
        {
LABEL_97:
          v49 = 0;
          v40 = 0;
          goto LABEL_98;
        }
LABEL_69:
        if (!*__s1)
          goto LABEL_97;
        if (v37 != 2)
        {
          if (v37 != 1)
            goto LABEL_97;
          v39 = (unsigned __int8 *)(*(_QWORD *)(v29 + 176) + v24 * *(unsigned __int8 *)(v29 + 184));
          if (*(unsigned __int8 *)(v6 + v39[5] + 2144) == 255
            || *(unsigned __int8 *)(v6 + v39[6] + 2144) == 255
            || *v192 == 35)
          {
LABEL_75:
            v40 = 0;
          }
          else if (cstdlib_memcmp(__s1, v39, 5uLL))
          {
            v40 = 0;
            v6 = v204;
          }
          else
          {
            v98 = *(unsigned __int8 *)(v2 + 34);
            v6 = v204;
            v99 = *(unsigned __int8 *)(v204 + 2144 + v39[5]);
            if ((_DWORD)v98 == (_DWORD)v99)
            {
              v100 = 0;
            }
            else
            {
              v101 = (_QWORD *)(v204 + 192 * *(unsigned __int8 *)(v2 + 36));
              v102 = v101[449];
              v103 = *(unsigned __int8 *)(v102 + v99);
              v104 = *(unsigned __int8 *)(v102 + v98);
              v105 = v101[450];
              v106 = v101[448];
              if (v104 <= v103)
                v107 = v103;
              else
                v107 = v104;
              if (v104 >= v103)
                v104 = v103;
              v100 = *(unsigned __int16 *)(v106 + 2 * (*(unsigned __int16 *)(v105 + 2 * v104) + v107));
            }
            v108 = *(unsigned __int8 *)(v2 + 35);
            v109 = *(unsigned __int8 *)(v204 + 2144 + v39[6]);
            if ((_DWORD)v108 != (_DWORD)v109)
            {
              v110 = (_QWORD *)(v204 + 192 * *(unsigned __int8 *)(v2 + 37));
              v111 = v110[463];
              v112 = v110[464];
              v113 = *(unsigned __int8 *)(v112 + v108);
              v114 = v110[465];
              v115 = *(unsigned __int8 *)(v112 + v109);
              if (v113 <= v115)
                v116 = v115;
              else
                v116 = v113;
              if (v113 < v115)
                v115 = v113;
              v100 += *(unsigned __int16 *)(v111 + 2 * (*(unsigned __int16 *)(v114 + 2 * v115) + v116));
            }
            v117 = *(_DWORD *)(v2 + 40);
            v193 = v100;
            if (v100 >= v117 + 100)
              goto LABEL_75;
            if (v100 < v117)
              *(_DWORD *)(v2 + 40) = v100;
            v40 = 1;
          }
          v41 = !v195;
          if (*(_DWORD *)(v6 + 2556) != 1)
            v41 = 1;
          if ((v41 & 1) == 0 && *v192 != 35)
          {
            v42 = v192[1];
            if (v42 == 114)
            {
              v43 = *(_QWORD *)(v6 + 2984);
            }
            else
            {
              if (v42 != 108)
                goto LABEL_208;
              v43 = *(_QWORD *)(v6 + 2976);
            }
            if (v192[*(unsigned __int8 *)(v43 + 25) + 3] != *(unsigned __int8 *)(v32 + *(unsigned __int8 *)(v43 + 11)))
            {
LABEL_208:
              v16 = v194;
              goto LABEL_209;
            }
          }
          v49 = 0;
          goto LABEL_98;
        }
        if (*v192 == 35
          || (v47 = cstdlib_memcmp(__s1, (const void *)(*(_QWORD *)(v29 + 176) + v24 * *(unsigned __int8 *)(v29 + 184)), 5uLL), v6 = v204, v47))
        {
          if ((v185 & 1) != 0)
            goto LABEL_209;
          v48 = v192[1];
          if (v48 == 114)
          {
            if (v192[*(unsigned __int8 *)(*(_QWORD *)(v6 + 3024) + 25) + 3] == 3)
              goto LABEL_97;
          }
          else if (v48 == 108 && v192[*(unsigned __int8 *)(*(_QWORD *)(v6 + 3024) + 25) + 3] == 1)
          {
            goto LABEL_97;
          }
          v40 = 0;
          v49 = *(_DWORD *)(v6 + 2640);
        }
        else
        {
          v49 = 0;
          v40 = 1;
        }
LABEL_98:
        v50 = v18;
        if (v210 == **(_QWORD **)(a1 + 56))
        {
          v52 = v191 >= v190 ? v190 : v191;
          if (*(_DWORD *)v35)
          {
            v53 = v187;
            while (1)
            {
              v49 += (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v35 + 16))(a1, *v53, *(unsigned __int8 *)(v32 + *(unsigned __int8 *)(v35 + 11)), v35, v36);
              if (!v40 && v49 >= v52)
                break;
              v54 = *(_DWORD *)(v35 + 32);
              v35 += 32;
              ++v53;
              v36 += 24;
              if (!v54)
                goto LABEL_99;
            }
            if (*(_DWORD *)v35)
            {
              v2 = v196;
              v16 = v194;
              v18 = v50;
              v6 = v204;
              v22 = v198;
LABEL_209:
              v21 = v201;
              goto LABEL_210;
            }
          }
        }
LABEL_99:
        v2 = v196;
        v51 = *(unsigned int **)(v196 + 8);
        if (!v51)
        {
          v18 = v50;
          v6 = v204;
          goto LABEL_112;
        }
        v6 = v204;
        if (v210 != **(_QWORD **)(a1 + 56))
        {
          v18 = v50;
LABEL_112:
          v21 = v201;
LABEL_113:
          if (*(_DWORD *)(v6 + 2620))
          {
            v55 = *(unsigned __int8 *)(a1 + 849);
            if (!*(_BYTE *)(a1 + 849))
              goto LABEL_128;
            v56 = v21;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = *(_QWORD *)(a1 + 832);
              if (*(_DWORD *)(v60 + v57 + 8) == v205 && *(_QWORD *)(v60 + v57 + 40) == v210)
                break;
              if (*(_DWORD *)(v6 + 2636) <= 0x63u)
              {
                v61 = v60 + v57;
                v62 = *(_QWORD *)(v61 + 16);
                if (v62)
                {
                  if (*(_QWORD *)(v61 + 40) == v210)
                  {
                    IsNextUnit = uselect_IsNextUnit(v62, v205);
                    v6 = v204;
                    if (IsNextUnit)
                      v59 = 1;
                    v55 = *(unsigned __int8 *)(a1 + 849);
                  }
                }
              }
              ++v58;
              v57 += 112;
            }
            while (v58 < v55);
            v18 = v50;
            if (v55 == v58)
            {
              v21 = v56;
              v2 = v196;
              if (v59)
              {
                v49 += *(_DWORD *)(v6 + 2636) * *(_DWORD *)(v6 + 2620) / 0x64u;
                goto LABEL_135;
              }
LABEL_128:
              v49 += *(_DWORD *)(v6 + 2620);
            }
            else
            {
              v21 = v56;
              v2 = v196;
            }
          }
LABEL_135:
          LODWORD(v208) = v49;
          v67 = v205;
          LODWORD(__b) = v205;
          v68 = v210;
          *((_QWORD *)&__b + 1) = v210;
          v22 = v198;
          if (*(_DWORD *)(v6 + 2560))
            *((_QWORD *)&v208 + 1) = __PAIR64__(v40, v193);
          v69 = *(_QWORD *)v210;
          v70 = *(_QWORD *)(*(_QWORD *)v210 + 3008);
          if (v70 && ((*(_DWORD *)(v69 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v69 + 3396) & 0x80000000) == 0))
            v209[4] = *(_BYTE *)(v32 + *(unsigned __int8 *)(v70 + 11));
          v71 = *(_QWORD *)(a1 + 880);
          if (v71)
          {
            while (*(_DWORD *)(v71 + 16) <= v49)
            {
              v71 = *(_QWORD *)(v71 + 48);
              if (!v71)
                goto LABEL_144;
            }
            if ((int)v21 >= v186)
            {
              if (v198 == (char *)v71)
                v78 = 0;
              else
                v78 = v71;
              if (v198)
              {
                v73 = *(char **)(v71 + 40);
                v77 = (char *)*((_QWORD *)v198 + 5);
                if (v77)
                  *((_QWORD *)v77 + 6) = 0;
                v72 = (uint64_t)v198;
                goto LABEL_152;
              }
            }
            else
            {
              v72 = *(_QWORD *)(a1 + 864) + 56 * (int)v21;
              v73 = *(char **)(v71 + 40);
LABEL_151:
              v21 = (v21 + 1);
              v77 = v198;
              v78 = v71;
              if (v72)
              {
LABEL_152:
                v79 = v208;
                v80 = *(_QWORD *)v209;
                *(_OWORD *)v72 = __b;
                *(_OWORD *)(v72 + 16) = v79;
                *(_QWORD *)(v72 + 32) = v80;
                *(_QWORD *)(v72 + 40) = v73;
                *(_QWORD *)(v72 + 48) = v78;
                if (v73)
                {
                  *((_QWORD *)v73 + 6) = v72;
                }
                else
                {
                  *(_QWORD *)(a1 + 880) = v72;
                  v81 = *(_DWORD *)(v6 + 2568);
                  if (v81 != -1)
                    v190 = *(_DWORD *)(v72 + 16) + v81;
                }
                if (v78)
                  *(_QWORD *)(v78 + 40) = v72;
                else
                  v77 = (char *)v72;
                if ((int)v21 >= v186 && v77)
                  v191 = *((_DWORD *)v77 + 4);
                v22 = v77;
              }
            }
          }
          else
          {
LABEL_144:
            if ((int)v21 < v186)
            {
              v71 = 0;
              v72 = *(_QWORD *)(a1 + 864) + 56 * (int)v21;
              v73 = v198;
              goto LABEL_151;
            }
            if (v198 && v49 < *((_DWORD *)v198 + 4))
            {
              *(_OWORD *)&v209[8] = *(_OWORD *)(v198 + 40);
              v74 = __b;
              v75 = v208;
              v76 = *(_OWORD *)v209;
              *((_QWORD *)v198 + 6) = *(_QWORD *)&v209[16];
              *((_OWORD *)v198 + 1) = v75;
              *((_OWORD *)v198 + 2) = v76;
              *(_OWORD *)v198 = v74;
              v191 = v208;
            }
          }
          if (v40 && *(_DWORD *)(v6 + 2560))
          {
            v82 = (unsigned __int16)v18;
            v83 = &v215[7 * (unsigned __int16)v18];
            *((_DWORD *)v83 + 4) = v49;
            *(_DWORD *)v83 = v67;
            v83[1] = v68;
            *((_DWORD *)v83 + 6) = v193;
            *((_DWORD *)v83 + 7) = 1;
            v84 = *(_QWORD *)(*(_QWORD *)v68 + 3008);
            v16 = v194;
            if (v84)
              BYTE4(v216[7 * (unsigned __int16)v18]) = *(_BYTE *)(v32 + *(unsigned __int8 *)(v84 + 11));
            if ((_WORD)v18)
            {
              v85 = &v215[7 * (unsigned __int16)v18];
              do
              {
                v86 = &v215[7 * (v82 - 1)];
                v87 = *((_DWORD *)v86 + 6);
                v88 = *((_DWORD *)v85 + 6);
                if (v87 <= v88
                  && (v87 != v88 || LODWORD(v215[7 * (v82 - 1) + 2]) <= *((_DWORD *)v85 + 4)))
                {
                  break;
                }
                v89 = *((_OWORD *)v86 + 1);
                v211 = *(_OWORD *)v86;
                v212 = v89;
                v213 = *((_OWORD *)v86 + 2);
                v214 = v86[6];
                v91 = *((_OWORD *)v85 + 1);
                v90 = *((_OWORD *)v85 + 2);
                v92 = *(_OWORD *)v85;
                v86[6] = v85[6];
                *((_OWORD *)v86 + 1) = v91;
                *((_OWORD *)v86 + 2) = v90;
                *(_OWORD *)v86 = v92;
                v93 = v212;
                *(_OWORD *)v85 = v211;
                *((_OWORD *)v85 + 1) = v93;
                *((_OWORD *)v85 + 2) = v213;
                --v82;
                v85[6] = v214;
                v85 -= 7;
              }
              while ((_WORD)v82);
            }
            if ((unsigned __int16)v18 >= 0x14u)
              v18 = v18;
            else
              v18 = (v18 + 1);
          }
          else
          {
            v16 = v194;
          }
          goto LABEL_210;
        }
        v64 = *v51;
        v18 = v50;
        v21 = v201;
        if ((_DWORD)v64)
        {
          v65 = 0;
          while (v51[v65 + 1] != v205)
          {
            if (v64 == ++v65)
              goto LABEL_133;
          }
          v66 = *((unsigned __int8 *)v51 + v65 + 404);
        }
        else
        {
LABEL_133:
          v66 = 0;
        }
        v49 += 100 * *(_DWORD *)(a1 + 916) * v66;
        if (v40)
          goto LABEL_113;
        if (v49 < v191 && v49 < v190)
          goto LABEL_113;
        v16 = v194;
        v22 = v198;
LABEL_210:
        if (++v20 >= v206)
          goto LABEL_256;
      }
    }
    v152 = 0;
    v153 = 0;
    v154 = v210;
    v155 = *(unsigned __int8 **)(a1 + 856);
    v156 = v16;
    v157 = v189;
    v158 = *(_QWORD **)(a1 + 40);
    v199 = v155;
    while (1)
    {
      if (v153 > v186 && v152 > v151)
        goto LABEL_338;
      v159 = v157;
      if (v16)
        v159 = *v156;
      v160 = *(_QWORD *)(a1 + 936);
      if (!v160 || **(_QWORD **)(a1 + 56) != v154 || *(unsigned __int8 *)(v160 + v159) != 255)
      {
        v161 = *(_QWORD *)(v154 + 160) + v159 * *(unsigned __int8 *)(v154 + 168);
        v162 = (unsigned __int8 *)v158[375];
        if (v162)
        {
          v163 = *(unsigned __int8 *)(v161 + v162[11]);
          if (v163 == 255)
            goto LABEL_311;
        }
        else
        {
          v163 = *(unsigned __int8 *)(v161 + MEMORY[0xB]);
        }
        if (v155[v162[25] + 3] == ((v163 >> v162[12]) & v162[24])
          && v155[*(unsigned __int8 *)(v158[377] + 25) + 3] == ((*(unsigned __int8 *)(v161
                                                                                      + *(unsigned __int8 *)(v158[377] + 11)) >> *(_BYTE *)(v158[377] + 12)) & *(unsigned __int8 *)(v158[377] + 24)))
        {
          ++v153;
          v164 = v155[1];
          if (v164 == 114)
          {
            if (v155[*(unsigned __int8 *)(v158[378] + 25) + 3] != 3)
              goto LABEL_309;
          }
          else if (v164 != 108 || v155[*(unsigned __int8 *)(v158[378] + 25) + 3] != 1)
          {
LABEL_309:
            v165 = v148;
            v202 = v153;
            v166 = cstdlib_memcmp(v148, (const void *)(*(_QWORD *)(v154 + 176) + v159 * *(unsigned __int8 *)(v154 + 184)), 5uLL);
            v155 = v199;
            v6 = v204;
            v14 = v166 == 0;
            v153 = v202;
            v148 = v165;
            if (v14)
              ++v152;
          }
        }
      }
LABEL_311:
      ++v157;
      ++v156;
      if (!--v150)
        goto LABEL_338;
    }
  }
  if (v118 == 2)
  {
    v200 = (_BYTE *)(*(_QWORD *)(a1 + 888) + 29);
    if (!*v200)
      goto LABEL_35;
    v167 = v206;
    v168 = v186 >> 1;
    if (v206)
    {
      v169 = 0;
      v170 = 0;
      v171 = v210;
      v172 = *(_QWORD *)(a1 + 856);
      v173 = v16;
      v174 = v189;
      v175 = *(_QWORD *)(a1 + 40);
      while (1)
      {
        if (v170 > v186 && v169 > v168)
          goto LABEL_340;
        v176 = v174;
        if (v194)
          v176 = *v173;
        v177 = *(_QWORD *)(a1 + 936);
        if (!v177 || **(_QWORD **)(a1 + 56) != v171 || *(unsigned __int8 *)(v177 + v176) != 255)
        {
          v178 = *(_QWORD *)(v171 + 160) + v176 * *(unsigned __int8 *)(v171 + 168);
          v179 = *(unsigned __int8 **)(v175 + 3000);
          if (v179)
          {
            v180 = *(unsigned __int8 *)(v178 + v179[11]);
            if (v180 == 255)
              goto LABEL_335;
          }
          else
          {
            v180 = *(unsigned __int8 *)(v178 + MEMORY[0xB]);
          }
          if (*(unsigned __int8 *)(v172 + v179[25] + 3) == ((v180 >> v179[12]) & v179[24]))
          {
            ++v170;
            v181 = *(unsigned __int8 *)(v172 + 1);
            if (v181 == 114)
            {
              if (*(_BYTE *)(v172 + *(unsigned __int8 *)(*(_QWORD *)(v175 + 3024) + 25) + 3) != 3)
                goto LABEL_333;
            }
            else if (v181 != 108 || *(_BYTE *)(v172 + *(unsigned __int8 *)(*(_QWORD *)(v175 + 3024) + 25) + 3) != 1)
            {
LABEL_333:
              v203 = v170;
              v182 = cstdlib_memcmp(v200, (const void *)(*(_QWORD *)(v171 + 176) + v176 * *(unsigned __int8 *)(v171 + 184)), 5uLL);
              v6 = v204;
              v14 = v182 == 0;
              v170 = v203;
              if (v14)
                ++v169;
            }
          }
        }
LABEL_335:
        ++v174;
        ++v173;
        if (!--v167)
          goto LABEL_340;
      }
    }
    v170 = 0;
    v169 = 0;
LABEL_340:
    v195 = v170 > v186;
    v183 = v169 > v168;
    goto LABEL_341;
  }
  if (v118 != 1)
  {
LABEL_35:
    v195 = 0;
    v185 = 0;
    goto LABEL_36;
  }
  if (v206)
  {
    v119 = 0;
    v120 = 0;
    v121 = *(_QWORD *)(a1 + 856);
    v122 = *(_QWORD **)(a1 + 40);
    v123 = *(_QWORD *)(a1 + 936);
    while (1)
    {
      if (v16)
      {
        v124 = v16[v119];
        if (v123)
          goto LABEL_242;
      }
      else
      {
        v124 = v189 + v119;
        if (v123)
        {
LABEL_242:
          if (**(_QWORD **)(a1 + 56) == v210 && *(unsigned __int8 *)(v123 + v124) == 255)
            goto LABEL_252;
        }
      }
      v125 = *(_QWORD *)(v210 + 160) + v124 * *(unsigned __int8 *)(v210 + 168);
      v126 = v122[375];
      if (!v126 || *(unsigned __int8 *)(v125 + *(unsigned __int8 *)(v126 + 11)) != 255)
      {
        v127 = *(unsigned __int8 *)(v121 + 1);
        if (v127 == 114)
        {
          v128 = v122[373];
LABEL_250:
          if (*(unsigned __int8 *)(v121 + *(unsigned __int8 *)(v128 + 25) + 3) == *(unsigned __int8 *)(v125 + *(unsigned __int8 *)(v128 + 11)))
            ++v120;
          goto LABEL_252;
        }
        if (v127 == 108)
        {
          v128 = v122[372];
          goto LABEL_250;
        }
      }
LABEL_252:
      if (++v119 >= (unint64_t)v206 || v120 > v186)
      {
        v185 = 0;
        v195 = v120 > v186;
        goto LABEL_36;
      }
    }
  }
LABEL_255:
  v22 = 0;
  v21 = 0;
  LOWORD(v18) = 0;
  v190 = -1;
LABEL_256:
  if (*(_DWORD *)(v6 + 2568) != -1)
  {
    if (*(_DWORD *)(v6 + 2572) == -1)
    {
      v137 = v190;
LABEL_270:
      if ((int)v21 >= 2 && v22)
      {
        while (*((_DWORD *)v22 + 4) > v137)
        {
          v22 = (char *)*((_QWORD *)v22 + 5);
          *((_QWORD *)v22 + 6) = 0;
          result = (v21 - 1);
          if ((int)v21 >= 3)
          {
            v21 = (v21 - 1);
            if (v22)
              continue;
          }
          goto LABEL_277;
        }
      }
      goto LABEL_276;
    }
    cstdlib_memset(&v211, 0, 0xA4uLL);
    v6 = v204;
    v129 = *(_QWORD *)(a1 + 880);
    for (i = *(_DWORD *)(v204 + 2568); v129; v129 = *(_QWORD *)(v129 + 48))
    {
      v131 = (*(_DWORD *)(v129 + 16) - v190 + i) / 0x9C4;
      if (v131 >= 0x27)
        v131 = 39;
      ++*((_DWORD *)&v211 + v131);
    }
    v132 = 0;
    v133 = 0;
    v134 = *(_DWORD *)(v204 + 2572);
    v135 = 2500;
    while (1)
    {
      v133 += *((_DWORD *)&v211 + v132);
      if (v135 > i - v134 * v133)
        break;
      ++v132;
      v135 += 2500;
      if (v132 == 40)
      {
        v136 = 0;
        v135 = 100000;
        goto LABEL_268;
      }
    }
    v136 = (unsigned __int16)v132 < 0x27u;
LABEL_268:
    v137 = v135 + v190 - i;
    if (v136 || v134 == -1)
      goto LABEL_270;
  }
LABEL_276:
  result = v21;
LABEL_277:
  if (*(_DWORD *)(v6 + 2560))
    v139 = (unsigned __int16)v18 == 0;
  else
    v139 = 1;
  if (!v139)
  {
    v140 = result + (unsigned __int16)v18;
    v141 = (unsigned __int16)v18;
    v142 = 56 * v186;
    for (j = v216; *(j - 2) < *(_DWORD *)(v2 + 40) + 100; j += 14)
    {
      *j = 1;
      v144 = *(_QWORD *)(a1 + 864) + v142;
      v145 = *(_OWORD *)j;
      v146 = *((_OWORD *)j - 2);
      *(_OWORD *)(v144 + 16) = *((_OWORD *)j - 1);
      *(_OWORD *)(v144 + 32) = v145;
      *(_OWORD *)v144 = v146;
      *(_QWORD *)(v144 + 40) = v22;
      *(_QWORD *)(v144 + 48) = 0;
      if (v22)
        *((_QWORD *)v22 + 6) = v144;
      result = (result + 1);
      v142 += 56;
      v22 = (char *)v144;
      if (!--v141)
        return v140;
    }
  }
  return result;
}

uint64_t tmp_GetFirstContextPhone(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  unsigned __int8 ***v7;
  uint64_t v8;
  unsigned __int8 ***v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;

  v3 = a1[111];
  switch(a2)
  {
    case 0:
      return *(unsigned __int8 *)(v3 + 28);
    case 1:
      v5 = a1[5];
      v6 = *(_BYTE *)(a1[107] + 1) == 108;
      v7 = (unsigned __int8 ***)(v5 + 28248);
      v8 = 28240;
      goto LABEL_5;
    case 2:
      v5 = a1[5];
      v6 = *(_BYTE *)(a1[107] + 1) == 108;
      v7 = (unsigned __int8 ***)(v5 + 28264);
      v8 = 28256;
LABEL_5:
      v9 = (unsigned __int8 ***)(v5 + v8);
      if (v6)
        v7 = v9;
      v10 = *v7;
      if (!*v7)
        return 0;
      v11 = *v10;
      if (!*v10)
        return 0;
      v12 = *(unsigned __int8 *)(v3 + 28);
      v13 = v10 + 1;
      break;
    case 3:
      return *(unsigned __int8 *)(a1[5] + 2496);
    default:
      return 0;
  }
  while (*v11 != v12)
  {
    v14 = *v13++;
    v11 = v14;
    if (!v14)
      return 0;
  }
  *a3 = v11 + 1;
  return v11[1];
}

uint64_t tmp_GetNextContextPhone(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  _BYTE *v4;

  if (a2)
  {
    if (a2 == 3)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2497) > a3)
        LOBYTE(a2) = a3 + 1;
      else
        LOBYTE(a2) = 0;
    }
    else
    {
      v4 = (_BYTE *)(*a4 + 1);
      *a4 = v4;
      LOBYTE(a2) = *v4;
    }
  }
  return a2;
}

uint64_t presearch_IsCarryingRequired(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;

  if (a2 == 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 849);
    if ((_DWORD)v3 == *(unsigned __int8 *)(a1 + 908) >> 1)
    {
      if (*(_BYTE *)(a1 + 849))
      {
        v4 = (unsigned __int8 *)(*(_QWORD *)(a1 + 832) + 58);
        while (1)
        {
          v5 = *v4;
          v4 += 112;
          if (v5)
            break;
          if (!--v3)
            return 1;
        }
        return 0;
      }
      return 1;
    }
  }
  else if (a3 == *(unsigned __int8 *)(a1 + 908) >> 1)
  {
    v6 = *(_QWORD *)(a1 + 880);
    if (v6)
    {
      while (!*(_BYTE *)(v6 + 20))
      {
        v6 = *(_QWORD *)(v6 + 48);
        if (!v6)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t presearch_GetCarryCandidate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  unsigned int __dst;

  result = 0xFFFFFFFFLL;
  __dst = -1;
  if (*(_BYTE *)(a2 + 58))
    return result;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(unsigned int *)(a2 + 32);
  if (a3 == 1)
  {
    result = *(unsigned int *)(*(_QWORD *)(v5 + 272) + 4 * v6);
    if ((_DWORD)result == -1)
      return result;
    v7 = *(unsigned __int8 *)(a1 + 849);
    if (!*(_BYTE *)(a1 + 849))
      return result;
    v8 = *(_QWORD *)(a1 + 832);
    if (*(_QWORD *)(v8 + 40) == v5)
    {
      for (i = (_QWORD *)(v8 + 40); *((_DWORD *)i - 2) != (_DWORD)result || *i != v5; i += 14)
      {
        if (!--v7)
          return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  cstdlib_memcpy(&__dst, (const void *)(*(_QWORD *)(v5 + 192) + v6 * *(unsigned __int8 *)(v5 + 200)), 4uLL);
  result = __dst;
  if (*(_DWORD *)(v10 + 2696))
  {
    if ((__dst & 0x3FFFFFFF) == 0x3FFFFFFF)
      result = 0xFFFFFFFFLL;
    else
      result = __dst & 0x3FFFFFFF;
    __dst = result;
  }
  if ((_DWORD)result != -1)
  {
    v11 = *(_QWORD *)(a1 + 880);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 8) == v5)
      {
        while (*(_DWORD *)v11 != (_DWORD)result || *(_QWORD *)(v11 + 8) != v5)
        {
          v11 = *(_QWORD *)(v11 + 48);
          if (!v11)
            return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t presearch_GetIdRange(uint64_t result, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  _BYTE *v6;
  char v7;
  char v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(result + 40);
  v6 = *(_BYTE **)(result + 856);
  v7 = *(_BYTE *)(v5 + 2497);
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 2496);
  v8 = v7 - v5;
  v9 = (v8 + 2);
  v10 = (*v6 - v5) * v9 - v5 + a3;
  if (v6[1] == 114)
    v10 += (v8 + 1) * v9 + (v8 + 1);
  v11 = *(_QWORD *)(a2 + 120);
  *a4 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 4 * v10);
  *a5 = *(unsigned __int16 *)(v11 + 2 * v10);
  return result;
}

uint64_t presearch_CalculateUnitCost(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v3 = *a2;
  if ((_DWORD)v3 == -1
    || (v4 = result,
        v5 = *(_QWORD *)(*(_QWORD *)(result + 40) + 2968),
        v6 = *(_QWORD *)(result + 896),
        v7 = *(_QWORD *)(result + 856),
        v8 = (uint64_t *)*((_QWORD *)a2 + 1),
        (v9 = *(_QWORD *)(result + 936)) != 0)
    && v8 == **(uint64_t ***)(result + 56)
    && *(unsigned __int8 *)(v9 + v3) == 255)
  {
    v14 = -1;
LABEL_10:
    a2[4] = v14;
    return result;
  }
  a2[4] = 0;
  v10 = v8[20] + v3 * *((unsigned __int8 *)v8 + 168);
  v11 = *v8;
  v12 = *(_QWORD *)(*v8 + 3000);
  if (!v12 || *(unsigned __int8 *)(v10 + *(unsigned __int8 *)(v12 + 11)) != 255)
  {
    if (v8 == **(uint64_t ***)(result + 56))
    {
      v13 = *(_DWORD *)v5;
      if (*(_DWORD *)v5)
      {
        v13 = 0;
        v15 = (unsigned __int8 *)(v7 + 3);
        do
        {
          if (v13 >= a2[14])
            break;
          if (!*(_DWORD *)(v6 + 16))
          {
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v5 + 16))(v4, *v15, *(unsigned __int8 *)(v10 + *(unsigned __int8 *)(v5 + 11)), v5, v6);
            v13 = a2[4] + result;
            a2[4] = v13;
          }
          v16 = *(_DWORD *)(v5 + 32);
          v5 += 32;
          ++v15;
          v6 += 24;
        }
        while (v16);
        v11 = *v8;
      }
    }
    else
    {
      v13 = 0;
    }
    v17 = *(_QWORD *)(v11 + 3008);
    if (v17 && ((*(_DWORD *)(v11 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v11 + 3396) & 0x80000000) == 0))
      *((_BYTE *)a2 + 36) = *(_BYTE *)(v10 + *(unsigned __int8 *)(v17 + 11));
    v18 = *(unsigned int **)(*(_QWORD *)(v4 + 888) + 8);
    if (v18)
    {
      if (v8 == **(uint64_t ***)(v4 + 56) && v13 < a2[14])
      {
        v19 = *v18;
        if ((_DWORD)v19)
        {
          v20 = 0;
          while (v18[v20 + 1] != (_DWORD)v3)
          {
            if (v19 == ++v20)
              goto LABEL_29;
          }
          v21 = *((unsigned __int8 *)v18 + v20 + 404);
        }
        else
        {
LABEL_29:
          v21 = 0;
        }
        v14 = v13 + 100 * *(_DWORD *)(v4 + 916) * v21;
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t presearch_RetainCandidate(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v2 = (_QWORD *)(result + 880);
  v3 = *(_QWORD *)(result + 880);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 880);
    while (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(a2 + 16))
    {
      v4 = *(_QWORD *)(v4 + 48);
      if (!v4)
        goto LABEL_5;
    }
    v5 = (uint64_t *)(v4 + 40);
  }
  else
  {
LABEL_5:
    v4 = 0;
    v5 = (uint64_t *)(a2 + 64);
  }
  v6 = *(_QWORD *)(result + 40);
  v7 = *v5;
  v8 = *(_DWORD *)(a2 + 80);
  if (v8 < *(unsigned __int8 *)(a2 + 61))
  {
    v9 = *(_QWORD *)(a2 + 72);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(a2 + 72) = v10;
      if (v10)
        *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
LABEL_30:
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_OWORD *)(v9 + 16) = v14;
      *(_QWORD *)(v9 + 32) = v15;
      *(_QWORD *)(v9 + 40) = v7;
      *(_QWORD *)(v9 + 48) = v4;
      v16 = (_QWORD *)(v7 + 48);
      if (!v7)
        v16 = (_QWORD *)(result + 880);
      *v16 = v9;
      v17 = (uint64_t *)(a2 + 64);
      if (v4)
        v18 = (_QWORD *)(v4 + 40);
      else
        v18 = (_QWORD *)(a2 + 64);
      *v18 = v9;
      v19 = *(_DWORD *)(a2 + 80);
      v20 = v19 + 1;
      *(_DWORD *)(a2 + 80) = v19 + 1;
      if (!v7 && *(_BYTE *)(a2 + 60) != 1)
      {
        v21 = *(_DWORD *)(v6 + 2568);
        if (v21 != -1)
        {
          v22 = *(_DWORD *)(v9 + 16) + v21;
          *(_DWORD *)(a2 + 84) = v22;
          if (*v2)
          {
            if (*(_DWORD *)(v6 + 2568) != -1 && v19 >= 1)
            {
              v23 = *v17;
              if (*v17)
              {
                if (*(_DWORD *)(v23 + 16) >= v22)
                {
                  do
                  {
                    v24 = *(_QWORD *)(v23 + 40);
                    *(_DWORD *)(v23 + 16) = -1;
                    v25 = *(_QWORD *)(a2 + 72);
                    if (v25)
                    {
                      *(_QWORD *)(v25 + 48) = v23;
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 48) + 48) = 0;
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 48) + 40) = *(_QWORD *)(a2 + 72);
                      *(_QWORD *)(a2 + 72) = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 48);
                    }
                    else
                    {
                      *(_QWORD *)(a2 + 72) = v23;
                      *(_QWORD *)(v23 + 48) = 0;
                      *(_QWORD *)(*(_QWORD *)(a2 + 72) + 40) = 0;
                    }
                    *(_QWORD *)(a2 + 64) = v24;
                    *(_QWORD *)(v24 + 48) = 0;
                    v26 = *(_DWORD *)(a2 + 80);
                    v20 = v26 - 1;
                    *(_DWORD *)(a2 + 80) = v26 - 1;
                    if (v26 < 3)
                      break;
                    if (!v24)
                      break;
                    v23 = v24;
                  }
                  while (*(_DWORD *)(v24 + 16) >= v22);
                }
              }
            }
          }
          if (v22 < *(_DWORD *)(a2 + 56))
            *(_DWORD *)(a2 + 56) = v22;
        }
      }
      if (v20 >= *(unsigned __int8 *)(a2 + 61))
      {
        v27 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 16);
        *(_DWORD *)(a2 + 88) = v27;
        *(_DWORD *)(a2 + 56) = v27;
      }
      return result;
    }
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v9 = *(_QWORD *)(a2 + 64);
    while (*(unsigned __int8 *)(v9 + 20) != *(unsigned __int8 *)(a2 + 20))
    {
      v9 = *(_QWORD *)(v9 + 40);
      if (!v9)
        return result;
    }
    if (*(_DWORD *)(v9 + 16) > *(_DWORD *)(a2 + 16))
    {
      if (v7 == v9)
        v7 = *(_QWORD *)(v7 + 40);
      if (v4 == v9)
        v4 = *(_QWORD *)(v4 + 48);
      if (v3 == v9)
        *v2 = *(_QWORD *)(v3 + 48);
      if (v11 == v9)
      {
        v12 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(a2 + 64) = v12;
        if (!v12)
          goto LABEL_27;
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 40);
        if (!v12)
        {
LABEL_27:
          v13 = *(_QWORD *)(v9 + 48);
          if (v13)
            *(_QWORD *)(v13 + 40) = v12;
          *(_QWORD *)(v9 + 40) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          *(_DWORD *)(a2 + 80) = v8 - 1;
          goto LABEL_30;
        }
      }
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(v9 + 48);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t uselect_CascadingFlatSearch(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  int FirstContextPhone;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE __b[256];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 888);
  v6 = *(_QWORD *)(a1 + 40);
  v40 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  DWORD2(v36) = -1;
  *(_QWORD *)((char *)&v38 + 4) = -1;
  BYTE12(v36) = a3;
  v7 = *(unsigned __int8 *)(a1 + 908);
  v8 = *(_QWORD *)(a1 + 864);
  if (*(_BYTE *)(a1 + 908))
  {
    v9 = 0;
    v10 = v8 + 56;
    do
    {
      if (v9)
        *(_QWORD *)(v10 - 16) = v8 + 56 * (v9 - 1);
      else
        *(_QWORD *)(v8 + 40) = 0;
      if (++v9 >= v7)
        v11 = 0;
      else
        v11 = v10;
      *(_QWORD *)(v10 - 8) = v11;
      *(_DWORD *)(v10 - 40) = -1;
      v10 += 56;
    }
    while (v7 != v9);
  }
  *(_QWORD *)&v37 = 0;
  *((_QWORD *)&v37 + 1) = v8 + 56 * v7 - 56;
  *(_QWORD *)(a1 + 880) = 0;
  v31 = v6;
  if (*(_DWORD *)(v6 + 2684))
    LODWORD(v7) = v7 >> (*(_DWORD *)(v6 + 2688) != 0);
  BYTE13(v36) = v7;
  v12 = *(_DWORD *)(v5 + 24);
  if (v12 != -1)
  {
    uselect_splitGID(a1, v12 & 0x7FFFFFFF, (_QWORD *)&v33 + 1, &v33);
    if (v33 >= *(_DWORD *)(*((_QWORD *)&v33 + 1) + 108))
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"USELECT", 19028, (uint64_t)"%s%d", v13, v14, v15, v16, "ID");
      *(_DWORD *)(v5 + 24) = -1;
    }
    else
    {
      BYTE4(v34) = 0;
      presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
      presearch_RetainCandidate(a1, (uint64_t)&v33);
      if ((*(_DWORD *)(v5 + 24) & 0x80000000) == 0)
        return v38;
    }
  }
  v39 = 0;
  if (a3 != 1)
  {
    cstdlib_memset(__b, 0, 0x100uLL);
    if (a2 <= 3)
    {
      v17 = v38;
      v18 = BYTE13(v36);
      if ((int)v38 < BYTE13(v36))
      {
        v19 = a2;
        do
        {
          BYTE4(v34) = v19;
          FirstContextPhone = tmp_GetFirstContextPhone((_QWORD *)a1, v19, &v39);
          v21 = v39;
          if (FirstContextPhone)
          {
            do
            {
              v22 = FirstContextPhone;
              if (!__b[FirstContextPhone])
              {
                __b[FirstContextPhone] = 1;
                *((_QWORD *)&v33 + 1) = **(_QWORD **)(a1 + 56);
                presearch_GetIdRange(a1, *((uint64_t *)&v33 + 1), FirstContextPhone, &v40, (_DWORD *)&v40 + 1);
                v23 = HIDWORD(v40);
                if (HIDWORD(v40))
                {
                  v24 = v40;
                  do
                  {
                    LODWORD(v33) = v24;
                    presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
                    if (v34 < DWORD2(v36))
                      presearch_RetainCandidate(a1, (uint64_t)&v33);
                    ++v24;
                    --v23;
                  }
                  while (v23);
                }
              }
              if (v19 == 3)
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 2497) <= v22)
                  break;
                LOBYTE(FirstContextPhone) = v22 + 1;
              }
              else
              {
                if (!v19)
                  break;
                v25 = *(_BYTE *)++v21;
                LOBYTE(FirstContextPhone) = v25;
              }
            }
            while ((_BYTE)FirstContextPhone);
            v17 = v38;
            v18 = BYTE13(v36);
          }
          v39 = v21;
          if (v19 > 2u)
            break;
          ++v19;
        }
        while (v17 < v18);
      }
    }
  }
  if (!a2 && presearch_IsCarryingRequired(a1, a3, v38))
  {
    BYTE4(v34) = 4;
    if (a3 == 2)
    {
      v27 = *(_QWORD *)(a1 + 832);
      v28 = *(unsigned __int8 *)(a1 + 849);
    }
    else
    {
      if (a3 != 1)
        return v38;
      v27 = *(_QWORD *)(a1 + 840);
      v28 = *(unsigned __int8 *)(a1 + 850);
      v29 = *(_DWORD *)(v31 + 2568);
      if (v29 != -1)
        DWORD1(v38) = **(_DWORD **)(a1 + 832) + v29;
    }
    if (v27)
    {
      BYTE13(v36) = *(_BYTE *)(a1 + 908);
      DWORD2(v36) = DWORD1(v38);
      if (v28)
      {
        v30 = v28;
        do
        {
          *((_QWORD *)&v33 + 1) = *(_QWORD *)(v27 + 40);
          LODWORD(v33) = presearch_GetCarryCandidate(a1, v27, a3);
          presearch_CalculateUnitCost(a1, (unsigned int *)&v33);
          if (v34 < DWORD2(v36))
            presearch_RetainCandidate(a1, (uint64_t)&v33);
          v27 += 112;
          --v30;
        }
        while (v30);
      }
    }
  }
  return v38;
}

uint64_t uselect_CartLookup(_QWORD *a1, unsigned __int16 **a2, int a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  char v29;

  v9 = a4[4];
  if (*(_BYTE *)(v9 + a5) == 35)
    v10 = 1;
  else
    v10 = 2 * *(_BYTE *)(a4[24] + a5);
  v11 = *a4;
  if (a5 < 1)
    v12 = (unsigned __int8 *)(v11 + 2179);
  else
    v12 = (unsigned __int8 *)(v11 + *(unsigned __int8 *)(v9 + (a5 - 1)) + 2144);
  v13 = *v12;
  if (*((__int16 *)a4 + 5) - 2 <= a5)
    v14 = (unsigned __int8 *)(v11 + 2179);
  else
    v14 = (unsigned __int8 *)(v11 + *(unsigned __int8 *)(a5 + v9 + 1) + 2144);
  v15 = 0;
  v16 = *v14;
  if (a9)
    v17 = a8 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = 2;
  do
  {
    v19 = **a2;
    if (v19 == 0xFFFF)
    {
      v20 = *a2;
    }
    else
    {
      v20 = *a2;
      do
      {
        v21 = v20[2];
        v22 = v10;
        switch(*(_BYTE *)(*a1 + v21))
        {
          case 0xFA:
            v22 = v15;
            break;
          case 0xFB:
            break;
          case 0xFD:
            v22 = v13;
            break;
          case 0xFE:
            v22 = v16;
            break;
          default:
            v22 = *(_BYTE *)(a4[*(unsigned __int8 *)(*a1 + v21) + 2] + a5);
            break;
        }
        v23 = (unsigned __int16 *)(a1[1] + 2 * v21);
        v24 = *v23;
        v25 = v23[1];
        if (v24 >= v25)
        {
LABEL_28:
          v19 = v20[1];
        }
        else
        {
          v26 = (unsigned __int8 *)(a1[2] + v24);
          v27 = v25 - v24;
          while (1)
          {
            v28 = *v26++;
            if (v28 == v22)
              break;
            if (!--v27)
              goto LABEL_28;
          }
        }
        v20 = &(*a2)[3 * v19];
        v19 = *v20;
      }
      while (v19 != 0xFFFF);
    }
    if (a3)
    {
      v29 = *((_BYTE *)v20 + 5);
      if (v15)
      {
        *a9 = v29;
        LODWORD(v20) = *((unsigned __int8 *)v20 + 4)
                     + *(_DWORD *)(*a4 + 2584) * *((unsigned __int8 *)v20 + 5) / 0x64;
LABEL_35:
        *a8 = (_BYTE)v20;
        goto LABEL_38;
      }
      *a7 = v29;
      *a6 = *((_BYTE *)v20 + 4) + *(_DWORD *)(*a4 + 2584) * *((unsigned __int8 *)v20 + 5) / 0x64;
    }
    else
    {
      if (v15)
      {
        *a9 = *((_BYTE *)v20 + 5);
        LOBYTE(v20) = *((_BYTE *)v20 + 4);
        goto LABEL_35;
      }
      *a6 = *((_BYTE *)v20 + 4);
      *a7 = *((_BYTE *)v20 + 5);
    }
LABEL_38:
    ++v15;
  }
  while (v15 != v18);
  return 0;
}

uint64_t featextract_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", "");
  return featextract_loadVoice((_WORD **)a1);
}

uint64_t featextract_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v7 + 64);
  v9 = (*(uint64_t (**)(void))(v7 + 152))();
  v10 = v8(a3, a4, 207, "application/x-realspeak-markers-pp;version=4.0", v9, 1, a1 + 56);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = v10;
LABEL_7:
    featextract_closeStreams(*(_QWORD *)(a1 + 48), a1 + 56);
    return v11;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 64))(a3, a4, 207, "application/x-realspeak-feat-vector", 0, 1, a1 + 72);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_7;
  return v11;
}

uint64_t featextract_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  int v22;
  int v24;
  int Layers;
  int v28;
  int v29;

  v29 = 0;
  v9 = -1930420218;
  result = safeh_HandleCheck((uint64_t)a1, a2, 415, 104);
  if ((result & 0x80000000) != 0)
    return 2364547080;
  *a5 = 1;
  if (a1[7])
  {
    v11 = (uint64_t *)a1[12];
    cstdlib_memset(v11, 0, 0xE48uLL);
    v17 = a1[4];
    *v11 = v17;
    if (v17)
    {
      v9 = usextract_ProcessStart(a1[2], (uint64_t)"FEATEXTRACT", a1[5], a3, a4, (uint64_t)v11, &v29);
      if ((v9 & 0x80000000) == 0)
      {
        if (*((__int16 *)v11 + 5) > 1)
        {
          Layers = usextract_allocateLayers(a1[2], (uint64_t)"FEATEXTRACT", v11, *((unsigned __int16 *)v11 + 5) + 4 * *((__int16 *)v11 + 7));
          if (Layers < 0)
          {
            v9 = Layers;
            v18 = 0;
            v19 = 1;
          }
          else
          {
            v28 = usextract_Process(a1[2], (uint64_t)"FEATEXTRACT", a1[5], a3, a4, (uint64_t)v11, v15, v16);
            if ((v28 & 0x80000000) == 0)
            {
              v28 = featextract_logFeatures(a1[2], (uint64_t)v11);
              if ((v28 & 0x80000000) == 0)
              {
                featextract_adjustSilAudioOrder((uint64_t)v11);
                v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1[6] + 104))(a1[7], a1[8], v11[439], (32 * *((_DWORD *)v11 + 880)));
                if ((v28 & 0x80000000) == 0)
                  v28 = featextract_writeFeatures(a1[2], a1[6], (uint64_t)(a1 + 7), a1[4], v11);
              }
            }
            v9 = v28;
            v19 = 0;
            v18 = 0;
          }
        }
        else
        {
          if (!v29)
          {
            *a5 = 0;
LABEL_28:
            v24 = usextract_ProcessEnd(a1[2], (uint64_t)"FEATEXTRACT", (uint64_t)v11);
            if (v9 > -1 && v24 < 0)
              v9 = v24;
LABEL_33:
            LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[5] + 64))(a3, a4);
            if (v9 > -1 && (int)result < 0)
              return result;
            else
              return v9;
          }
          if (a1[7])
          {
            if (*((_DWORD *)v11 + 880))
            {
              v9 = (*(uint64_t (**)(void))(a1[6] + 104))();
              if (v9 < 0)
                log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FEATEXTRACT", 55008, (uint64_t)"%s%s%s%x", v13, v14, v15, v16, "contentType");
            }
          }
          v18 = 0;
          v19 = 1;
          *a5 = 1;
        }
LABEL_15:
        if (v29)
        {
          v20 = featextract_closeStreams(a1[6], (uint64_t)(a1 + 7));
          if (v9 > -1 && v20 < 0)
            v9 = v20;
        }
        if ((v19 & 1) == 0)
        {
          v22 = usextract_freeLayers(a1[2], (uint64_t)"FEATEXTRACT", v11, v12, v13, v14, v15, v16);
          if (v9 > -1 && v22 < 0)
            v9 = v22;
        }
        if ((v18 & 1) != 0)
          goto LABEL_33;
        goto LABEL_28;
      }
      log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"FEATEXTRACT", 55005, (uint64_t)"%s%x", v13, v14, v15, v16, "lhError");
    }
    v19 = 1;
    v18 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t featextract_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 415, 104) & 0x80000000) != 0)
    return 2364547080;
  else
    return featextract_closeStreams(*(_QWORD *)(a1 + 48), a1 + 56);
}

uint64_t featextract_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2364547073;
  result = 0;
  *a2 = &IFeatextract;
  return result;
}

uint64_t featextract_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2364547079;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 416;
  }
  return result;
}

uint64_t featextract_ClassClose()
{
  return 0;
}

uint64_t featextract_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Voice;
  uint64_t Object;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v25);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v25 + 8), 1, 104);
  if (!v10)
    goto LABEL_11;
  v15 = v10;
  *v10 = a3;
  v10[1] = a4;
  v16 = v25;
  v10[2] = v25;
  v10[3] = a1;
  v10[5] = 0;
  v10[6] = 0;
  v10[4] = 0;
  v17 = heap_Calloc(*(_QWORD **)(v16 + 8), 1, 3656);
  v15[12] = v17;
  if (!v17)
  {
LABEL_11:
    Object = 2364547082;
    log_OutPublic(*(_QWORD *)(v25 + 32), (uint64_t)"FEATEXTRACT", 31000, 0, v11, v12, v13, v14, v21);
    return Object;
  }
  paramc_ParamSetStr(*(_QWORD *)(v15[2] + 40), (uint64_t)"voiceaddon", "");
  Voice = featextract_loadVoice((_WORD **)v15);
  if ((Voice & 0x80000000) != 0
    || (Voice = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"LINGDB", &v23), (Voice & 0x80000000) != 0))
  {
    Object = Voice;
    goto LABEL_14;
  }
  v15[5] = *(_QWORD *)(v23 + 8);
  Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v24);
  if ((Object & 0x80000000) != 0)
  {
LABEL_14:
    featextract_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return Object;
  }
  v15[6] = *(_QWORD *)(v24 + 8);
  *((_DWORD *)v15 + 22) = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"usewordorthography", &v22) & 0x80000000) == 0 && v22 == 1)
    *((_DWORD *)v15 + 22) = 1;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 415;
  return Object;
}

uint64_t featextract_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = safeh_HandleCheck((uint64_t)a1, a2, 415, 104);
  if ((result & 0x80000000) != 0)
    return 2364547080;
  if (a1)
  {
    if (a1[5])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"LINGDB");
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectrawdataversion", "");
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectreductionversion", "");
    v4 = a1[4];
    if (v4)
    {
      v5 = a1[3];
      if (!v5 || (v6 = *(_QWORD *)(v5 + 48)) == 0)
        v6 = *(_QWORD *)(a1[2] + 48);
      objc_ReleaseObject(v6, v4 + 152);
    }
    v7 = a1[12];
    if (v7)
      heap_Free(*(_QWORD **)(a1[2] + 8), v7);
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t featextract_loadVoice(_WORD **a1)
{
  uint64_t BrokerString;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t AddRefCountedObject;
  const char *v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char __s2[256];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  LODWORD(v17) = 0;
  BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) != 0
    || (v3 = (const char *)a1[4]) == 0
    || (v4 = BrokerString, cstdlib_strcmp(v3 + 152, __s2)))
  {
    v5 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 1, 0);
    if ((v5 & 0x80000000) != 0)
    {
      __s2[0] = 0;
      goto LABEL_13;
    }
    v4 = v5;
    v6 = (const char *)a1[4];
    if (!v6 || cstdlib_strcmp(v6 + 152, __s2))
    {
      AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v17);
      if (!(_DWORD)v17)
        __s2[0] = 0;
      if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
        return AddRefCountedObject;
    }
    if (!__s2[0])
    {
LABEL_13:
      AddRefCountedObject = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
      v4 = AddRefCountedObject;
      if ((AddRefCountedObject & 0x80000000) != 0)
        return AddRefCountedObject;
      AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v17);
      if (!(_DWORD)v17)
        __s2[0] = 0;
      if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
        return AddRefCountedObject;
      if (!__s2[0])
      {
        v4 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 1);
        if ((v4 & 0x80000000) != 0)
          return v4;
      }
    }
  }
  v8 = (const char *)a1[4];
  if (v8)
  {
    if (cstdlib_strcmp(v8 + 152, __s2))
    {
      v9 = a1[3];
      if (!v9 || (v10 = *((_QWORD *)v9 + 6)) == 0)
        v10 = *((_QWORD *)a1[2] + 6);
      AddRefCountedObject = objc_ReleaseObject(v10, (uint64_t)(a1[4] + 76));
      a1[4] = 0;
      if ((AddRefCountedObject & 0x80000000) != 0)
        return AddRefCountedObject;
    }
    else if (a1[4])
    {
      return v4;
    }
  }
  v17 = 0;
  v11 = a1[3];
  if (v11 && (v12 = *((_QWORD *)v11 + 6)) != 0)
  {
    v13 = (uint64_t)a1[2];
  }
  else
  {
    v13 = (uint64_t)a1[2];
    v12 = *(_QWORD *)(v13 + 48);
  }
  AddRefCountedObject = objc_GetAddRefCountedObject(v12, (uint64_t)__s2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, _OWORD *))uselect_ObjcVoiceClose, v13, &v17);
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v14 = *(_QWORD *)(v17 + 32);
  a1[4] = (_WORD *)v14;
  AddRefCountedObject = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)(v14 + 64));
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v15 = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[4] + 140);
  v4 = v15;
  if ((v15 & 0x80000000) == 0)
  {
    if (a1[4][1789] == 2)
      return v15;
    else
      return 2364547087;
  }
  return v4;
}

double Downsample__Create(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = heap_Alloc(a1, 56);
  if (v2)
  {
    result = 0.0;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_QWORD *)(v2 + 48) = a1;
  }
  return result;
}

uint64_t Downsample__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 32) == a2)
      return 1;
    LODWORD(v3) = *(_DWORD *)(result + 36);
    if (v3 >= a2)
    {
      *(_DWORD *)(result + 32) = a2;
      if ((v3 & 0x80000000) == 0)
      {
        v13 = 0;
        v14 = *(_QWORD *)(result + 16);
        do
        {
          *(_DWORD *)(v14 + 4 * v13) = ((int)v13 + 1) % (*(_DWORD *)(result + 32) + 1);
          v3 = *(int *)(result + 36);
          v7 = v13++ < v3;
        }
        while (v7);
      }
      if ((v3 & 0x40000000) == 0)
      {
        v15 = 0;
        v16 = *(_QWORD *)(result + 24);
        do
        {
          *(_DWORD *)(v16 + 4 * v15) = (int)v15 % (*(_DWORD *)(result + 32) + 1);
          v7 = v15++ < ((2 * *(_DWORD *)(result + 36)) | 1);
        }
        while (v7);
      }
      v12 = *(_DWORD *)(result + 32) + 1;
      goto LABEL_25;
    }
    *(_DWORD *)(result + 36) = a2;
    result = heap_Realloc(*(uint64_t **)(result + 48), *(_QWORD *)result, 2 * a2 + 2);
    if (result)
    {
      *(_QWORD *)v2 = result;
      result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 8), (4 * *(_DWORD *)(v2 + 36) + 4));
      if (result)
      {
        *(_QWORD *)(v2 + 8) = result;
        result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 16), (4 * *(_DWORD *)(v2 + 36) + 4));
        if (result)
        {
          *(_QWORD *)(v2 + 16) = result;
          result = heap_Realloc(*(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 24), (8 * *(_DWORD *)(v2 + 36) + 8));
          if (result)
          {
            *(_QWORD *)(v2 + 24) = result;
            LODWORD(v4) = *(_DWORD *)(v2 + 36);
            if ((v4 & 0x80000000) == 0)
            {
              v5 = 0;
              v6 = *(_QWORD *)(v2 + 16);
              do
              {
                *(_DWORD *)(v6 + 4 * v5) = ((int)v5 + 1) % (*(_DWORD *)(v2 + 32) + 1);
                v4 = *(int *)(v2 + 36);
                v7 = v5++ < v4;
              }
              while (v7);
            }
            if ((v4 & 0x40000000) == 0)
            {
              v8 = 0;
              do
              {
                *(_DWORD *)(result + 4 * v8) = (int)v8 % (*(_DWORD *)(v2 + 32) + 1);
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
                v7 = v8++ < (int)((2 * v4) | 1);
              }
              while (v7);
            }
            v9 = *(_DWORD *)(v2 + 32) + 1;
            if (v9 <= v4)
            {
              v10 = *(_QWORD *)v2;
              v11 = *(_QWORD *)(v2 + 8);
              do
              {
                *(_WORD *)(v10 + 2 * v9) = 0;
                *(_DWORD *)(v11 + 4 * v9++) = 0;
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
              }
              while (v9 <= v4);
            }
            *(_DWORD *)(v2 + 32) = v4;
            v12 = v4 + 1;
LABEL_25:
            *(_DWORD *)(v2 + 44) = v12 >> 1;
            return 1;
          }
        }
      }
    }
    *(_DWORD *)(v2 + 32) = 0;
  }
  return result;
}

uint64_t Downsample__Copy(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v4;
  result = heap_Realloc(*(uint64_t **)(a1 + 48), *(_QWORD *)a1, 2 * (v4 + 1));
  if (result)
  {
    *(_QWORD *)a1 = result;
    result = heap_Realloc(*(uint64_t **)(a1 + 48), *(_QWORD *)(a1 + 8), 4 * (*(_DWORD *)(a1 + 32) + 1));
    if (result)
    {
      v6 = 0;
      *(_QWORD *)(a1 + 8) = result;
      v7 = *(_QWORD *)a1;
      v8 = *a2;
      v9 = a2[1];
      do
      {
        *(_WORD *)(v7 + 2 * v6) = *(_WORD *)(v8 + 2 * v6);
        *(_DWORD *)(result + 4 * v6) = *(_DWORD *)(v9 + 4 * v6);
        ++v6;
      }
      while (v6 <= *(_DWORD *)(a1 + 32));
      return 1;
    }
  }
  return result;
}

uint64_t *Downsample__Remove(uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;

  if (result)
  {
    v1 = result;
    result = (uint64_t *)*result;
    if (result)
    {
      v2 = (_QWORD *)result[6];
      Downsample__Empty(result);
      result = heap_Free(v2, *v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t *Downsample__Empty(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if (*result)
      result = heap_Free((_QWORD *)result[6], *result);
    *v1 = 0;
    v2 = v1[1];
    if (v2)
      result = heap_Free((_QWORD *)v1[6], v2);
    v1[1] = 0;
    v3 = v1[2];
    if (v3)
      result = heap_Free((_QWORD *)v1[6], v3);
    v4 = v1[3];
    v1[2] = 0;
    if (v4)
      result = heap_Free((_QWORD *)v1[6], v4);
    v1[3] = 0;
    v1[4] = 0;
    v1[5] = 0;
  }
  return result;
}

uint64_t Downsample__SetCoeff(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) >= a2 || (result = Downsample__Resize(a1, a2), (_DWORD)result))
  {
    *(_WORD *)(*(_QWORD *)a1 + 2 * a2) = a3;
    return 1;
  }
  return result;
}

uint64_t Downsample__ResetStates(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 0;
  v2 = *(_QWORD *)(result + 8);
  do
    *(_DWORD *)(v2 + 4 * v1++) = 0;
  while (v1 <= *(_DWORD *)(result + 32));
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t *Downsample__Generate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (a2 > 3)
    return 0;
  v4 = heap_Alloc(a1, 56);
  v5 = (uint64_t *)v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_QWORD *)(v4 + 48) = a1;
    v14 = v4;
    switch(a2)
    {
      case 0u:
        if (!Downsample__Resize(v4, 7u))
          goto LABEL_18;
        v6 = 0;
        v7 = *v5;
        do
        {
          *(_WORD *)(v7 + v6 * 2) = CoeffCorrFast2[v6];
          ++v6;
        }
        while (v6 != 8);
        break;
      case 1u:
        if (!Downsample__Resize(v4, 0x19u))
          goto LABEL_18;
        v8 = 0;
        v9 = *v5;
        do
        {
          *(_WORD *)(v9 + v8 * 2) = CoeffStage1Fast[v8];
          ++v8;
        }
        while (v8 != 26);
        break;
      case 2u:
        if (!Downsample__Resize(v4, 5u))
          goto LABEL_18;
        v10 = 0;
        v11 = *v5;
        do
        {
          *(_WORD *)(v11 + v10 * 2) = CoeffStage2[v10];
          ++v10;
        }
        while (v10 != 5);
        break;
      case 3u:
        if (!Downsample__Resize(v4, 3u))
        {
LABEL_18:
          Downsample__Remove(&v14);
          return 0;
        }
        v12 = *v5;
        *(_DWORD *)v12 = 1223358211;
        *(_WORD *)(v12 + 4) = 18666;
        break;
      default:
        return v5;
    }
  }
  return v5;
}

uint64_t Downsample__InterpolateBetweenTwoSamples(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(unsigned int *)(a1 + 40)) = a2;
  if (*(int *)(a1 + 44) < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    LODWORD(v4) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    v6 = 4 * (v5 + *(_DWORD *)(a1 + 32));
    do
    {
      v7 = fxd_S32MultIntS32FractS16(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(*(_QWORD *)(a1 + 24) + 4 * (v5 + (int)v3)))+ *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * *(int *)(*(_QWORD *)(a1 + 24) + v6)), *(__int16 *)(*(_QWORD *)a1 + 2 * v3));
      v4 = fxd_S32SatAddS32S32(v4, v7);
      ++v3;
      v6 -= 4;
    }
    while (v3 < *(int *)(a1 + 44));
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(unsigned int *)(a1 + 40));
  return v4;
}

uint64_t Downsample__PrepareToDownsample(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = *(_DWORD *)(result + 44);
  if (v3 >= 1)
  {
    v4 = a3 - 2 * v3 + 1;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v7 = (2 * v3) | 1;
    do
    {
      if ((v4 & 0x80000000) != 0)
        v8 = 0;
      else
        v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4);
      v4 += 2;
      *(_DWORD *)(v5 + 4 * *(unsigned int *)(result + 40)) = v8;
      *(_DWORD *)(result + 40) = *(_DWORD *)(v6 + 4 * *(unsigned int *)(result + 40));
      --v7;
    }
    while (v7 > 2);
  }
  return result;
}

uint64_t Downsample__Vector(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  unsigned int v31;
  uint64_t v32;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v9 = a4 - a3;
      if (a4 >= a3)
      {
        v10 = *(_DWORD *)(a2 + 8) - 1;
        if (v10 >= a3 && v10 >= a4)
        {
          result = Vect__Create(*(_QWORD *)(a1 + 48), 1u);
          v32 = result;
          if (result)
          {
            v12 = result;
            if (Vect__Resize(result, (v9 + 1) >> 1))
            {
              Downsample__PrepareToDownsample(a1, a2, a3);
              v13 = *(_QWORD *)(a2 + 16);
              v14 = (uint64_t *)(v13 + 8 * a3);
              v15 = *(_QWORD **)(v12 + 16);
              v16 = *(_DWORD *)(a1 + 44);
              v17 = (_DWORD *)(v13 + 8 * (a3 + 2 * v16 - 1));
              v18 = *(_DWORD *)(v12 + 8) - v16;
              if (v18 >= 1)
              {
                v19 = v18 + 1;
                do
                {
                  v20 = *v14;
                  v14 += 2;
                  *v15 = v20;
                  LODWORD(v20) = *v17;
                  v17 += 4;
                  *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v20);
                  --v19;
                }
                while (v19 > 1);
                v16 = *(_DWORD *)(a1 + 44);
              }
              v21 = *(_DWORD *)(a2 + 8);
              if (2 * v16 + a4 <= v21)
              {
                if (v16 >= 1)
                {
                  v27 = v16 + 1;
                  do
                  {
                    v28 = *v14;
                    v14 += 2;
                    *v15 = v28;
                    LODWORD(v28) = *v17;
                    v17 += 4;
                    *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v28);
                    --v27;
                  }
                  while (v27 > 1);
                }
              }
              else
              {
                if ((int)(v21 + ~a4) >= 1)
                {
                  v22 = v21 - a4;
                  do
                  {
                    v23 = *v14;
                    v14 += 2;
                    *v15 = v23;
                    LODWORD(v23) = *v17;
                    v17 += 4;
                    *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v23);
                    --v22;
                  }
                  while (v22 > 1);
                  v16 = *(_DWORD *)(a1 + 44);
                  v21 = *(_DWORD *)(a2 + 8);
                }
                v24 = v16 + a4 - v21;
                if (v24 >= 1)
                {
                  v25 = v24 + 1;
                  do
                  {
                    v26 = *v14;
                    v14 += 2;
                    *v15 = v26;
                    *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, 0);
                    --v25;
                  }
                  while (v25 > 1);
                }
              }
              result = v32;
              v29 = *(_DWORD *)(v32 + 8);
              if (v29 >= 1)
              {
                v30 = *(int **)(v32 + 16);
                v31 = v29 + 1;
                do
                {
                  *v30 /= 2;
                  v30 += 2;
                  --v31;
                }
                while (v31 > 1);
              }
            }
            else
            {
              Vect__Remove(&v32);
              return v32;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t Downsample__VectorNC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int *v31;
  unsigned int v32;

  if (!a1 || !a2 || !a3 || a5 < a4)
    return 1;
  v9 = *(_DWORD *)(a2 + 8) - 1;
  if (v9 < a4 || v9 < a5)
    return 1;
  v12 = a5 - a4 + 1;
  if (*(_DWORD *)(*a3 + 8) < v12 >> 1)
    Vect__Resize(*a3, v12 >> 1);
  Downsample__PrepareToDownsample(a1, a2, a4);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (_QWORD *)(v13 + 8 * a4);
  v15 = *(_QWORD **)(*a3 + 16);
  v16 = *(_DWORD *)(a1 + 44);
  v17 = (int *)(v13 + 8 * (a4 + 2 * v16 - 1));
  v18 = *(_DWORD *)(*a3 + 8) - v16;
  if (v18 >= 1)
  {
    v19 = v18 + 1;
    while (1)
    {
      *v15 = *v14;
      v20 = *(_DWORD *)v15 + Downsample__InterpolateBetweenTwoSamples(a1, *v17);
      *(_DWORD *)v15 = v20;
      v21 = 65534;
      if (v20 > 65534)
        goto LABEL_17;
      if (v20 <= -65537)
        break;
LABEL_18:
      ++v15;
      v14 += 2;
      v17 += 4;
      if (--v19 <= 1)
      {
        v16 = *(_DWORD *)(a1 + 44);
        goto LABEL_20;
      }
    }
    v21 = -65536;
LABEL_17:
    *(_DWORD *)v15 = v21;
    goto LABEL_18;
  }
LABEL_20:
  v22 = *(_DWORD *)(a2 + 8);
  if (2 * v16 + a5 <= v22)
  {
    if (v16 >= 1)
    {
      v28 = v16 + 1;
      do
      {
        v29 = *v14;
        v14 += 2;
        *v15 = v29;
        LODWORD(v29) = *v17;
        v17 += 4;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v29);
        --v28;
      }
      while (v28 > 1);
    }
  }
  else
  {
    if ((int)(v22 + ~a5) >= 1)
    {
      v23 = v22 - a5;
      do
      {
        v24 = *v14;
        v14 += 2;
        *v15 = v24;
        LODWORD(v24) = *v17;
        v17 += 4;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, v24);
        --v23;
      }
      while (v23 > 1);
      v16 = *(_DWORD *)(a1 + 44);
      v22 = *(_DWORD *)(a2 + 8);
    }
    v25 = v16 + a5 - v22;
    if (v25 >= 1)
    {
      v26 = v25 + 1;
      do
      {
        v27 = *v14;
        v14 += 2;
        *v15 = v27;
        *(_DWORD *)v15++ += Downsample__InterpolateBetweenTwoSamples(a1, 0);
        --v26;
      }
      while (v26 > 1);
    }
  }
  v30 = *(_DWORD *)(*a3 + 8);
  if (v30 >= 1)
  {
    v31 = *(int **)(*a3 + 16);
    v32 = v30 + 1;
    do
    {
      *v31 /= 2;
      v31 += 2;
      --v32;
    }
    while (v32 > 1);
  }
  return 1;
}

uint64_t Downsample__CascadeVector(unsigned int a1, uint64_t a2, signed int a3, int a4)
{
  signed int v8;
  char v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t Slice;
  char v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;

  v22 = 0;
  v8 = 0;
  if (a1)
  {
    v9 = a1;
    while (1)
    {
      v10 = Downsample__Generate(*(_QWORD *)(a2 + 24), v9);
      v22 = v10;
      if (!v10)
        return 0;
      v8 += *((_DWORD *)v10 + 11);
      Downsample__Remove((uint64_t *)&v22);
      if (!--v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (v8 >= a3)
      v11 = a3;
    else
      v11 = v8;
    v12 = *(_DWORD *)(a2 + 8);
    if (v8 + a4 >= v12)
      v8 = v12 + ~a4;
    Slice = Vect__GetSlice(a2, a3 - v11, v8 + a4, 1);
    v23 = Slice;
    if (a1)
    {
      v14 = 1;
      while (1)
      {
        v15 = Downsample__Generate(*(_QWORD *)(a2 + 24), v14);
        v22 = v15;
        if (!v15)
          break;
        v16 = 0;
        v17 = v15[1];
        do
          *(_DWORD *)(v17 + 4 * v16++) = 0;
        while (v16 <= *((_DWORD *)v15 + 8));
        *((_DWORD *)v15 + 10) = 0;
        v18 = Downsample__Vector((uint64_t)v15, v23, 0, *(_DWORD *)(v23 + 8) - 1);
        if (!v18)
          break;
        v19 = v18;
        Downsample__Remove((uint64_t *)&v22);
        Vect__Remove(&v23);
        v23 = v19;
        v11 *= 2;
        v8 *= 2;
        if (a1 < ++v14)
          goto LABEL_21;
      }
      v20 = 0;
    }
    else
    {
      v19 = Slice;
LABEL_21:
      v20 = Vect__GetSlice(v19, v11, *(_DWORD *)(v19 + 8) + ~v8, 1);
    }
    Vect__Remove(&v23);
  }
  return v20;
}

uint64_t Vect__Clear(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    *(_DWORD *)(result + 8) = 0;
    if (*(_DWORD *)(result + 4))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(v1 + 16);
        result = ESmpl__Zero();
        *(_QWORD *)(v3 + 8 * v2++) = result;
      }
      while (v2 < *(unsigned int *)(v1 + 4));
    }
  }
  return result;
}

_WORD *Vect__SetSamplingRate(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

uint64_t Vect__Reset(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 4))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(v1 + 16);
        result = ESmpl__Zero();
        *(_QWORD *)(v3 + 8 * v2++) = result;
      }
      while (v2 < *(unsigned int *)(v1 + 4));
    }
  }
  return result;
}

uint64_t Vect__Create(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = heap_Alloc(a1, 32);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 4) = a2;
    *(_WORD *)v4 = 22050;
    *(_QWORD *)(v4 + 24) = a1;
    v6 = heap_Alloc(a1, 8 * a2);
    *(_QWORD *)(v5 + 16) = v6;
    if (v6)
    {
      *(_DWORD *)(v5 + 8) = 0;
      if (*(_DWORD *)(v5 + 4))
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)(v8 + 8 * v7++) = ESmpl__Zero();
        }
        while (v7 < *(unsigned int *)(v5 + 4));
      }
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 24), v5);
      return 0;
    }
  }
  return v5;
}

uint64_t *Vect__Remove(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (*result)
    {
      v3 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        heap_Free(*(_QWORD **)(v2 + 24), v3);
        v2 = *v1;
      }
      *(_QWORD *)(v2 + 16) = 0;
      result = heap_Free(v4, *v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t Vect__Resize(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)(result + 4) >= a2)
    {
      return 1;
    }
    else
    {
      *(_DWORD *)(result + 4) = a2;
      v3 = heap_Realloc(*(uint64_t **)(result + 24), *(_QWORD *)(result + 16), 8 * a2);
      if (v3)
      {
        v4 = v3;
        result = 1;
      }
      else
      {
        *(_DWORD *)(v2 + 4) = 0;
        *(_DWORD *)(v2 + 8) = 0;
        v5 = *(_QWORD *)(v2 + 16);
        if (v5)
          heap_Free(*(_QWORD **)(v2 + 24), v5);
        v4 = 0;
        result = 0;
      }
      *(_QWORD *)(v2 + 16) = v4;
    }
  }
  return result;
}

uint64_t Vect__Dup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;

  if (!a1)
    return 0;
  v2 = Vect__Create(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 4));
  v3 = v2;
  if (v2)
  {
    v4 = *(_DWORD *)(v2 + 4);
    if (v4 == *(_DWORD *)(a1 + 4)
      && (*(_DWORD *)(v2 + 8) = *(_DWORD *)(a1 + 8), *(_WORD *)v2 = *(_WORD *)a1, *(_QWORD *)(a1 + 16)))
    {
      if (v4)
      {
        v5 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5);
          ++v5;
        }
        while (v5 < *(unsigned int *)(v2 + 4));
      }
    }
    else
    {
      heap_Free(*(_QWORD **)(a1 + 24), v2);
      return 0;
    }
  }
  return v3;
}

uint64_t Vect__Concat(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = Vect__Resize(a1, *(_DWORD *)(a2 + 8) + *(_DWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    result = (uint64_t)cstdlib_memmove((void *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 8)), *(const void **)(a2 + 16), 8 * *(unsigned int *)(a2 + 8));
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t Vect__GetSlice(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v9;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;

  if (!(_DWORD)a4)
    return 0;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= a2 || v7 <= a3)
    return 0;
  v12 = a3 - a2;
  if ((int)a4 >= 0)
    v13 = a4;
  else
    v13 = -(int)a4;
  v14 = v12 / v13;
  v15 = v12 / v13 + 1;
  v9 = Vect__Create(*(_QWORD *)(a1 + 24), v15);
  *(_DWORD *)(v9 + 8) = v15;
  v16 = *(_QWORD **)(v9 + 16);
  *(_WORD *)v9 = *(_WORD *)a1;
  if ((_DWORD)a4 == 1)
  {
    cstdlib_memmove(v16, (const void *)(*(_QWORD *)(a1 + 16) + 8 * a2), 8 * v15);
  }
  else if ((int)cstdlib_abs(a4) < 2)
  {
    if ((_DWORD)a4 == -1 && v15)
    {
      v19 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * a3);
      v20 = v14 + 1;
      do
      {
        v21 = *v19--;
        *v16++ = v21;
        --v20;
      }
      while (v20);
    }
  }
  else if (v15)
  {
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
    v18 = v14 + 1;
    do
    {
      *v16++ = *v17;
      v17 += (int)a4;
      --v18;
    }
    while (v18);
  }
  return v9;
}

_DWORD *Vect__FillSlice(_DWORD *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unsigned int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if ((_DWORD)a5)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 > a3 && v7 > a4)
    {
      v9 = a5;
      v10 = (int)a5 >= 1 ? (a4 - a3) / a5 : (a3 - a4) / -(int)a5;
      v11 = v10 + 1;
      if (v10 + 1 <= v7)
      {
        v12 = result;
        v13 = *(uint64_t **)(a2 + 16);
        result[2] = v11;
        result = (_DWORD *)cstdlib_abs(a5);
        if ((int)result < 2)
        {
          if (v9 == -1)
          {
            if (v10 != -1)
            {
              v16 = (_QWORD *)(*((_QWORD *)v12 + 2) + 8 * v10);
              do
              {
                v17 = *v13++;
                *v16-- = v17;
                --v11;
              }
              while (v11);
            }
          }
          else if (v9 == 1)
          {
            return cstdlib_memmove(*((void **)v12 + 2), (const void *)(*(_QWORD *)(a2 + 16) + 8 * a3), 8 * (v10 + 1));
          }
        }
        else if (v10 != -1)
        {
          v14 = (_QWORD *)*((_QWORD *)v12 + 2);
          do
          {
            v15 = *v13++;
            *v14 = v15;
            v14 += v9;
            --v11;
          }
          while (v11);
        }
      }
    }
  }
  return result;
}

uint64_t Vect__Copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a1 + 4) < v4)
  {
    result = Vect__Resize(a1, v4);
    if (!(_DWORD)result)
      return result;
    v4 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)a1 = *(_WORD *)a2;
  cstdlib_memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 8 * *(unsigned int *)(a2 + 8));
  return 1;
}

uint64_t Vect__Reverse(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 8);
  if (v1 >= 2)
  {
    v2 = v1 >> 1;
    v3 = *(uint64_t **)(result + 16);
    v4 = &v3[v1];
    do
    {
      v5 = *v3;
      *v3++ = *v4;
      *v4-- = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t Vect__OLA(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 8) - 1;
  v5 = v4 >> 1;
  v6 = (v4 >> 1) + 1;
  v7 = *(_DWORD *)(result + 8);
  v8 = v7;
  if ((v6 + v7) > *(_DWORD *)(result + 4))
  {
    result = Vect__Resize(result, v6 + v7);
    if (!(_DWORD)result)
      return result;
    v8 = *(_DWORD *)(v3 + 8);
  }
  if (v8)
  {
    v9 = *(_QWORD *)(v3 + 16) + 8 * (v7 - (v4 >> 1));
    v10 = *(int **)(a2 + 16);
    if (v4 >= 4)
    {
      v11 = v4 >> 2;
      do
      {
        v12 = *v10;
        v10 += 2;
        *(_DWORD *)v9 += v12;
        v9 += 8;
        --v11;
      }
      while (v11);
    }
    while (v5 > v4 >> 2)
    {
      *(_DWORD *)v9 += *v10;
      *(_BYTE *)(v9 + 4) = *((_BYTE *)v10 + 4);
      v9 += 8;
      v10 += 2;
      --v5;
    }
    v13 = (v4 >> 1) + 1;
    do
    {
      v14 = *(_QWORD *)v10;
      v10 += 2;
      *(_QWORD *)v9 = v14;
      v9 += 8;
      --v13;
    }
    while (v13);
    *(_DWORD *)(v3 + 8) += v6;
  }
  else
  {
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(a2 + 8);
    return Vect__Copy(v3, a2);
  }
  return result;
}

uint64_t Vect__OLAEnd(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  int v7;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 >> 1;
  v4 = *(_QWORD *)(result + 16) + 8 * (*(_DWORD *)(result + 8) - v2);
  v5 = *(int **)(a2 + 16);
  if (v2 >= 2)
  {
    v6 = v2 >> 1;
    do
    {
      v7 = *v5;
      v5 += 2;
      *(_DWORD *)v4 += v7;
      v4 += 8;
      --v6;
    }
    while (v6);
  }
  while (v2 > v3)
  {
    *(_DWORD *)v4 += *v5;
    *(_BYTE *)(v4 + 4) = *((_BYTE *)v5 + 4);
    --v2;
    v5 += 2;
    v4 += 8;
  }
  return result;
}

uint64_t Vect__PutElement(uint64_t result, unsigned int a2, int a3)
{
  if (*(_DWORD *)(result + 4) > a2)
    *(_DWORD *)(*(_QWORD *)(result + 16) + 8 * a2) = a3;
  return result;
}

BOOL Vect__State(uint64_t a1, unsigned int a2)
{
  return a2 < 2 || a2 == 2 && !*(_DWORD *)(a1 + 8);
}

uint64_t Vect__Insert(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return Vect__Copy(a3, a1);
  v8 = *(int *)(a2 + 8);
  result = Vect__Resize(a3, *(_DWORD *)(a1 + 8) + (int)v8);
  if ((_DWORD)result)
  {
    cstdlib_memcpy(*(void **)(a3 + 16), *(const void **)(a1 + 16), 8 * a4);
    cstdlib_memcpy((void *)(*(_QWORD *)(a3 + 16) + 8 * a4), *(const void **)(a2 + 16), 8 * v8);
    result = (uint64_t)cstdlib_memcpy((void *)(*(_QWORD *)(a3 + 16) + 8 * a4 + 8 * v8), (const void *)(*(_QWORD *)(a1 + 16) + 8 * a4), 8 * (*(_DWORD *)(a1 + 8) - a4));
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8) + v8;
  }
  return result;
}

const void **Vect__Cut(const void **result, uint64_t a2, int a3, int a4)
{
  int v5;
  const void **v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;

  v5 = *((_DWORD *)result + 2);
  if (v5 <= a3)
  {
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    v7 = result;
    if (a3 <= 0)
      return (const void **)Vect__Copy(a2, (uint64_t)result);
    result = (const void **)Vect__Resize(a2, v5 - a3);
    if ((_DWORD)result)
    {
      v9 = a4 - (a3 >> 1);
      v10 = *((_DWORD *)v7 + 2);
      if ((int)(v9 + a3) <= v10)
      {
        if ((v9 & 0x80000000) == 0)
        {
          cstdlib_memcpy(*(void **)(a2 + 16), v7[2], 8 * (v9 + 1));
          result = (const void **)cstdlib_memcpy((void *)(*(_QWORD *)(a2 + 16) + 8 * v9 + 8), (char *)v7[2] + 8 * v9 + 8 * a3 - 8, 8 * (int)(*((_DWORD *)v7 + 2) - (v9 + a3) + 1));
          *(_DWORD *)(a2 + 8) = *((_DWORD *)v7 + 2) - a3;
          return result;
        }
        v11 = v10 - 1;
        v14 = a3 - 1;
        v12 = (_DWORD *)a2;
        v13 = (uint64_t)v7;
      }
      else
      {
        v11 = v10 + ~a3;
        v12 = (_DWORD *)a2;
        v13 = (uint64_t)v7;
        v14 = 0;
      }
      return (const void **)Vect__FillSlice(v12, v13, v14, v11, 1);
    }
  }
  return result;
}

uint64_t WSOLA__SetWindowOverlap(unsigned __int16 *a1, int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  signed __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  a1[1] = a2;
  v3 = 274877907 * *a1 * a2;
  v4 = (v3 >> 63) + (SHIDWORD(v3) >> 6);
  a1[2] = v4;
  a1[8] = 2 * v4;
  a1[9] = v4;
  v5 = (__int16)a1[6];
  v6 = 2 * v5 - v4;
  if (v5 < (__int16)v4)
    v6 = a1[6];
  a1[16] = v6;
  v7 = 2 * (v5 + (__int16)(2 * v4)) - (__int16)v4 + v6;
  *((_DWORD *)a1 + 7) = v7;
  v8 = *((_QWORD *)a1 + 7);
  if (!v8
    || v7 <= *(_DWORD *)(v8 + 8)
    || (v9 = 2164269066, Vect__Resize(v8, v7) == 1)
    && Vect__Resize(*((_QWORD *)a1 + 8), *((_DWORD *)a1 + 7)) == 1
    && Vect__Resize(*((_QWORD *)a1 + 9), *((_DWORD *)a1 + 7) >> 1) == 1
    && Vect__Resize(*((_QWORD *)a1 + 10), *((_DWORD *)a1 + 7) >> 1) == 1
    && Vect__Resize(*((_QWORD *)a1 + 11), *((_DWORD *)a1 + 7) >> 2) == 1
    && Vect__Resize(*((_QWORD *)a1 + 12), *((_DWORD *)a1 + 7) >> 2) == 1)
  {
    v10 = *((_QWORD *)a1 + 5);
    if (v10)
    {
      v11 = (__int16)a1[2];
      v12 = 2 * v11;
      v13 = heap_Realloc(*((uint64_t **)a1 + 41), v10, (2 * v11));
      if (!v13)
        return 2164269066;
      *((_QWORD *)a1 + 5) = v13;
      if (v11 >= 1)
      {
        v14 = 0;
        v15 = 0;
        if (v12 <= 1)
          v16 = 1;
        else
          v16 = v12;
        v17 = 205887 * v16;
        do
        {
          v18 = (int)(0x10000 - fxd_S32CosS32((int)v15 / (__int16)a1[2])) >> 1;
          if (v18 >= 0xFFFF)
            LOWORD(v18) = -1;
          *(_WORD *)(*((_QWORD *)a1 + 5) + v14) = v18;
          v15 += 205887;
          v14 += 2;
        }
        while (v17 != v15);
      }
    }
    return 0;
  }
  return v9;
}

_WORD *WSOLA__SetTimeScaleFactor(_WORD *result, int a2)
{
  int v2;
  int v3;

  if (a2 >= 1)
  {
    v2 = (__int16)result[9];
    v3 = v2 * (unsigned __int16)a2 / 100;
    result[10] = v3;
    result[7] = (__int16)v3 / v2;
    result[17] = result[14] - v3;
  }
  return result;
}

uint64_t WSOLA__Create(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v26;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = heap_Calloc(v4, 336, 1);
  v6 = (unsigned __int16 *)v5;
  v26 = v5;
  if (v5)
  {
    *(_QWORD *)(v5 + 320) = a1;
    *(_QWORD *)(v5 + 328) = v4;
    *(_WORD *)v5 = a2;
    *(_DWORD *)(v5 + 312) = 0;
    if ((WSOLA__SetWindowOverlap((unsigned __int16 *)v5, 10) & 0x80000000) == 0)
    {
      *((_DWORD *)v6 + 2) = 4;
      v7 = 33555 * (*v6 >> 1);
      v8 = v7 >> 22;
      v6[6] = *v6 / 0xFAu;
      v9 = (__int16)v6[9];
      if ((int)(v7 >> 22) >= v9)
        LOWORD(v8) = 2 * (v7 >> 22) - v9;
      v6[16] = v8;
      v10 = 2 * ((__int16)v6[8] + (v7 >> 22)) - (__int16)v6[2] + (__int16)v8;
      *((_DWORD *)v6 + 7) = v10;
      v11 = *((_QWORD *)v6 + 7);
      if (v11 && v10 > *(_DWORD *)(v11 + 8))
      {
        if (Vect__Resize(v11, v10) != 1
          || Vect__Resize(*((_QWORD *)v6 + 8), *((_DWORD *)v6 + 7)) != 1
          || Vect__Resize(*((_QWORD *)v6 + 9), *((_DWORD *)v6 + 7) >> 1) != 1
          || Vect__Resize(*((_QWORD *)v6 + 10), *((_DWORD *)v6 + 7) >> 1) != 1
          || Vect__Resize(*((_QWORD *)v6 + 11), *((_DWORD *)v6 + 7) >> 2) != 1
          || Vect__Resize(*((_QWORD *)v6 + 12), *((_DWORD *)v6 + 7) >> 2) != 1)
        {
          goto LABEL_24;
        }
        v10 = *((_DWORD *)v6 + 7);
      }
      v12 = Vect__Create((uint64_t)v4, v10);
      *((_QWORD *)v6 + 7) = v12;
      if (v12)
      {
        v13 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7));
        *((_QWORD *)v6 + 8) = v13;
        if (v13)
        {
          v14 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
          *((_QWORD *)v6 + 9) = v14;
          if (v14)
          {
            v15 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
            *((_QWORD *)v6 + 10) = v15;
            if (v15)
            {
              v16 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
              *((_QWORD *)v6 + 11) = v16;
              if (v16)
              {
                v17 = Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
                *((_QWORD *)v6 + 12) = v17;
                if (v17)
                {
                  Vect__Clear(*((_QWORD *)v6 + 7));
                  Vect__Clear(*((_QWORD *)v6 + 8));
                  Vect__Clear(*((_QWORD *)v6 + 9));
                  Vect__Clear(*((_QWORD *)v6 + 10));
                  Vect__Clear(*((_QWORD *)v6 + 11));
                  Vect__Clear(*((_QWORD *)v6 + 12));
                  v18 = *((_DWORD *)v6 + 7);
                  v19 = *((_QWORD *)v6 + 8);
                  *(_DWORD *)(*((_QWORD *)v6 + 7) + 8) = v18;
                  *(_DWORD *)(v19 + 8) = v18;
                  v20 = *((_QWORD *)v6 + 10);
                  *(_DWORD *)(*((_QWORD *)v6 + 9) + 8) = v18 >> 1;
                  *(_DWORD *)(v20 + 8) = v18 >> 1;
                  v18 >>= 2;
                  v21 = *((_QWORD *)v6 + 12);
                  *(_DWORD *)(*((_QWORD *)v6 + 11) + 8) = v18;
                  *(_DWORD *)(v21 + 8) = v18;
                  v22 = Downsample__Generate((uint64_t)v4, 0);
                  *((_QWORD *)v6 + 15) = v22;
                  if (v22)
                  {
                    v23 = heap_Calloc(v4, 128, 4);
                    *((_QWORD *)v6 + 18) = v23;
                    if (v23)
                    {
                      if ((WSOLA__CreateOLAWindow((uint64_t)v6) & 0x80000000) == 0)
                      {
                        v24 = v6[9];
                        v6[10] = v24;
                        v6[7] = 1;
                        v6[17] = v6[14] - v24;
                        WSOLA__Initialise((uint64_t)v6);
                        return (uint64_t)v6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_24:
    WSOLA__Remove(&v26);
    return v26;
  }
  return (uint64_t)v6;
}

_QWORD *WSOLA__Remove(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_QWORD **)(*a1 + 328);
  Vect__Remove((uint64_t *)(*a1 + 56));
  Vect__Remove((uint64_t *)(*a1 + 64));
  Vect__Remove((uint64_t *)(*a1 + 72));
  Vect__Remove((uint64_t *)(*a1 + 80));
  Vect__Remove((uint64_t *)(*a1 + 88));
  Vect__Remove((uint64_t *)(*a1 + 96));
  v3 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    heap_Free(v2, *(_QWORD *)(*a1 + 40));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 120))
  {
    Downsample__Remove((uint64_t *)(v3 + 120));
    v3 = *a1;
  }
  if (*(_QWORD *)(v3 + 144))
  {
    heap_Free(v2, *(_QWORD *)(v3 + 144));
    v3 = *a1;
  }
  result = heap_Free(v2, v3);
  *a1 = 0;
  return result;
}

uint64_t WSOLA__CreateOLAWindow(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v2 = *(__int16 *)(a1 + 4);
  v3 = 2 * v2;
  v4 = heap_Alloc(*(_QWORD *)(a1 + 328), 2 * (2 * v2));
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
    return 2164269066;
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    if (v3 <= 1)
      v7 = 1;
    else
      v7 = v3;
    v8 = 2 * v7;
    do
    {
      v9 = (int)(0x10000 - fxd_S32CosS32(v6 / *(__int16 *)(a1 + 4))) >> 1;
      if (v9 >= 0xFFFF)
        LOWORD(v9) = -1;
      *(_WORD *)(*(_QWORD *)(a1 + 40) + v5) = v9;
      v6 += 205887;
      v5 += 2;
    }
    while (v8 != v5);
  }
  return 0;
}

double WSOLA__Initialise(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1;
  Vect__Reset(*(_QWORD *)(a1 + 56));
  Vect__Reset(*(_QWORD *)(v1 + 64));
  Vect__Reset(*(_QWORD *)(v1 + 72));
  Vect__Reset(*(_QWORD *)(v1 + 80));
  Vect__Reset(*(_QWORD *)(v1 + 88));
  Vect__Reset(*(_QWORD *)(v1 + 96));
  *(_QWORD *)(v1 + 304) = -1;
  *(_DWORD *)(v1 + 312) = 1;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 281) = 0;
  cstdlib_memset(*(void **)(v1 + 144), 0, 0x200uLL);
  result = 0.0;
  *(_OWORD *)(v1 + 152) = 0u;
  v1 += 152;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 - 130) = 0;
  *(_WORD *)(v1 - 100) = 0;
  return result;
}

uint64_t WSOLA__GetBestPositionRelToWindowOffset(__int16 *a1)
{
  int v1;
  int v3;
  __int16 v4;
  __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v19;

  v1 = a1[6];
  if (v1 < 1)
  {
    v5 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a1[9] + (uint64_t)a1[a1[25] + 11];
    v1 = (unsigned __int16)a1[6];
    do
    {
      v19 = 0;
      v9 = a1[8];
      if (v9 < 1)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v10 = (int *)(*(_QWORD *)(*(_QWORD *)&a1[4 * a1[25] + 28] + 16) + 8 * v8);
        v11 = (int *)(*(_QWORD *)(*(_QWORD *)&a1[4 * a1[24] + 28] + 16) + 8 * (v3 - v1 + a1[16]));
        do
        {
          v13 = *v11;
          v11 += 2;
          v12 = v13;
          v14 = *v10;
          v10 += 2;
          fxd_S64SatAddS32S32((int *)&v19 + 1, (int *)&v19, v14 * v12);
          v15 = (unsigned __int16)v9--;
        }
        while (v15 > 1);
        v16 = v19;
        v17 = HIDWORD(v19);
      }
      if (v17 > v7 || v17 == v7 && v16 > v6)
      {
        v7 = v17;
        v6 = v16;
        v5 = v4;
      }
      v3 = ++v4;
      v1 = a1[6];
    }
    while (v4 < 2 * v1);
  }
  return (__int16)(v5 - v1);
}

uint64_t WSOLA__GetOutputLength(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;

  if ((a2 & 0x80) != 0)
    return 0;
  v3 = a1 + a2;
  v5 = *(unsigned __int8 *)(v3 + 152);
  v4 = (_BYTE *)(v3 + 152);
  *a3 = v5 == 2;
  if (v5 == 2)
    *v4 = 0;
  return *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * a2);
}

uint64_t WSOLA__TimeScaleInputBuffer(uint64_t a1, char a2, __int16 *a3, int a4, _WORD *a5, int *a6, int a7, char *a8, _BYTE *a9)
{
  _WORD *v9;
  int v10;
  __int16 *v11;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int *v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  int v74;
  unsigned __int16 v75;
  int v76;
  int v77;
  unsigned __int16 v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int *v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned __int16 v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int *v104;
  int *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int *v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  signed int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned __int8 *v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  int v167;
  char v168;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  char v174;
  __int16 v177;
  _WORD *v178;
  uint64_t *v179;
  int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v13 = *a8;
  v14 = *(_DWORD *)(a1 + 312);
  if (v14)
  {
    v11 = &a3[*(int *)(a1 + 108)];
    v9 = &a5[*(int *)(a1 + 112)];
  }
  v168 = v13 | 0x80;
  v179 = (uint64_t *)(a1 + 72);
  v180 = (int *)(a1 + 308);
  v172 = (uint64_t *)(a1 + 88);
  v173 = (uint64_t *)(a1 + 80);
  v171 = (uint64_t *)(a1 + 96);
  v167 = (unsigned __int16)(a7 + 100);
  v174 = *a8;
LABEL_4:
  while (2)
  {
    switch(v14)
    {
      case 0:
        WSOLA__Initialise(a1);
        *(_DWORD *)(a1 + 312) = 1;
        goto LABEL_6;
      case 1:
LABEL_6:
        if (*(unsigned __int16 *)(a1 + 128) == (unsigned __int16)a7)
        {
          v15 = *(_DWORD *)(a1 + 28);
          goto LABEL_28;
        }
        *(_WORD *)(a1 + 128) = a7;
        if (a7)
        {
          v15 = *(_DWORD *)(a1 + 28);
          if ((__int16)v167 < 1)
            goto LABEL_28;
          v26 = *(__int16 *)(a1 + 18);
          v27 = v26 * v167 / 100;
          *(_WORD *)(a1 + 20) = v27;
          *(_WORD *)(a1 + 14) = (__int16)v27 / v26;
          v28 = v15 - v27;
        }
        else
        {
          v29 = *(_WORD *)(a1 + 18);
          *(_WORD *)(a1 + 20) = v29;
          *(_WORD *)(a1 + 14) = 1;
          v15 = *(_DWORD *)(a1 + 28);
          v28 = v15 - v29;
        }
        *(_WORD *)(a1 + 34) = v28;
LABEL_28:
        v30 = *(__int16 *)(a1 + 52);
        *(_WORD *)(a1 + 52) = 1 - v30;
        *(_WORD *)(a1 + 48) = 1 - v30;
        *(_WORD *)(a1 + 50) = v30;
        *(_DWORD *)(a1 + 304) = 0;
        v31 = *(void **)(*(_QWORD *)(a1 + 56 + 8 * (__int16)(1 - v30)) + 16);
        *(_QWORD *)(a1 + 136) = v31;
        cstdlib_memmove(v31, (const void *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * v30) + 16) + 8 * (v15 - *(__int16 *)(a1 + 34))), 8 * *(__int16 *)(a1 + 34));
        *(_QWORD *)(a1 + 136) += 8 * *(__int16 *)(a1 + 34);
        *(_DWORD *)(a1 + 312) = 2;
LABEL_29:
        v32 = *v180;
        if (*v180 == -1)
          v32 = *(__int16 *)(a1 + 34);
        v33 = *(_DWORD *)(a1 + 108);
        v34 = *(_DWORD *)(a1 + 28);
        v35 = v34 + v33 - v32;
        if (v35 >= v10)
          v36 = v10;
        else
          v36 = v34 + v33 - v32;
        v37 = v36 - v33 + v32;
        *(_DWORD *)(a1 + 308) = v37;
        if (v36 - v33 >= 1)
        {
          v38 = *(_QWORD *)(a1 + 136);
          v39 = v36 - v33 + 1;
          do
          {
            *(_BYTE *)(v38 + 4) = v13;
            v40 = *v11++;
            *(_DWORD *)v38 = v40;
            v38 += 8;
            --v39;
          }
          while (v39 > 1);
          *(_QWORD *)(a1 + 136) = v38;
        }
        *(_DWORD *)(a1 + 108) = v36;
        if (v35 < v10)
          goto LABEL_44;
        if ((a2 & 1) != 0)
        {
          if (v37 < v34)
          {
            v41 = *(_QWORD *)(a1 + 136);
            v42 = v33 + v34 - v32 - v36;
            do
            {
              *(_BYTE *)(v41 + 4) = v168;
              *(_DWORD *)v41 = 0;
              v41 += 8;
              --v42;
            }
            while (v42);
            *(_QWORD *)(a1 + 136) = v41;
          }
LABEL_44:
          *(_BYTE *)(a1 + 280) = v13;
          *(_QWORD *)v180 = 0x3FFFFFFFFLL;
LABEL_45:
          if (*(_WORD *)(a1 + 128))
          {
            v178 = v9;
            v177 = *(_WORD *)(a1 + 32);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 56), v179, 0, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 64), v173, 0, *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 72), v172, 0, *(_DWORD *)(*(_QWORD *)(a1 + 72) + 8) - 1);
            Downsample__VectorNC(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 80), v171, 0, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8) - 1);
            v43 = *(__int16 *)(a1 + 32);
            v44 = *(__int16 *)(a1 + 12);
            v45 = __OFSUB__(v43, v44);
            v46 = v43 - v44;
            if (v46 < 0 != v45)
              v46 += 3;
            v47 = v46 >> 2;
            v48 = (__int16)(v46 >> 2) & ~((__int16)(v46 >> 2) >> 31);
            v49 = v48 + ((__int16)(v44 + ((unsigned __int16)(v44 & 0x8000) >> 15)) >> 1);
            v50 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 8);
            v51 = (__int16)v50;
            v52 = v50 - 1;
            if (v51 <= (__int16)v49)
              v53 = v52;
            else
              v53 = v49;
            v54 = *(__int16 *)(a1 + 18);
            if (v48 >= (__int16)v53)
            {
              v71 = *(_WORD *)(a1 + 50);
            }
            else
            {
              v55 = 0;
              v56 = 0;
              v57 = *(__int16 *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
              v45 = __OFADD__(v57, v54);
              v58 = v57 + v54;
              if (v58 < 0 != v45)
                v58 += 3;
              v181 = (uint64_t)v58 >> 2;
              v59 = (unsigned __int16)v48;
              v60 = v53;
              do
              {
                v61 = 0;
                v62 = 0;
                v184 = 0;
                v63 = *(__int16 *)(a1 + 16);
                if (v63 >= 4)
                {
                  v64 = (unsigned __int16)v63 >> 2;
                  v65 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v181);
                  v66 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v59);
                  do
                  {
                    v68 = *v66;
                    v66 += 2;
                    v67 = v68;
                    v69 = *v65;
                    v65 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v69 * v67);
                    v70 = (unsigned __int16)v64--;
                  }
                  while (v70 > 1);
                  v61 = v184;
                  v62 = HIDWORD(v184);
                }
                if (v62 > v56 || v62 == v56 && v61 > v55)
                {
                  v56 = v62;
                  v55 = v61;
                  LOWORD(v47) = v59;
                }
                ++v59;
              }
              while (v59 != v60);
              v71 = *(_WORD *)(a1 + 50);
              LOWORD(v54) = *(_WORD *)(a1 + 18);
            }
            v73 = 2 * v47;
            v74 = (__int16)(2 * v47 - 3) & ~((__int16)(2 * v47 - 3) >> 31);
            v75 = v73 + 3;
            v76 = *(_DWORD *)(*v179 + 8);
            v77 = (__int16)v76;
            v78 = v76 - 1;
            if (v77 <= (__int16)v75)
              v75 = v78;
            if (v74 < (__int16)v75)
            {
              v79 = 0;
              v80 = 0;
              v81 = *(__int16 *)(a1 + 2 * v71 + 22) + (__int16)v54;
              v182 = (uint64_t)(v81 + (v81 < 0)) >> 1;
              v82 = (unsigned __int16)v74;
              v83 = v75;
              do
              {
                v84 = 0;
                v85 = 0;
                v184 = 0;
                v86 = *(__int16 *)(a1 + 16);
                if (v86 >= 2)
                {
                  v87 = (unsigned __int16)v86 >> 1;
                  v88 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v182);
                  v89 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v82);
                  do
                  {
                    v91 = *v89;
                    v89 += 2;
                    v90 = v91;
                    v92 = *v88;
                    v88 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v92 * v90);
                    v93 = (unsigned __int16)v87--;
                  }
                  while (v93 > 1);
                  v84 = v184;
                  v85 = HIDWORD(v184);
                }
                if (v85 > v80 || v85 == v80 && v84 > v79)
                {
                  v80 = v85;
                  v79 = v84;
                  LOWORD(v74) = v82;
                }
                ++v82;
              }
              while (v82 != v83);
              v71 = *(_WORD *)(a1 + 50);
              LOWORD(v54) = *(_WORD *)(a1 + 18);
            }
            v94 = (__int16)(2 * v74 - 3) & ~((__int16)(2 * v74 - 3) >> 31);
            v95 = 2 * v74 + 3;
            v96 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v97 = (__int16)v96;
            v98 = v96 - 1;
            if (v97 <= (__int16)v95)
              v95 = v98;
            if (v94 < (__int16)v95)
            {
              v99 = 0;
              v100 = 0;
              v183 = *(__int16 *)(a1 + 2 * v71 + 22) + (uint64_t)(__int16)v54;
              v101 = (unsigned __int16)((2 * v74 - 3) & ~((__int16)(2 * v74 - 3) >> 15));
              v102 = v95;
              do
              {
                v184 = 0;
                v103 = *(__int16 *)(a1 + 16);
                if (v103 < 1)
                {
                  v110 = 0;
                  v111 = 0;
                }
                else
                {
                  v104 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 16) + 8 * v183);
                  v105 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 16) + 8 * v101);
                  do
                  {
                    v107 = *v105;
                    v105 += 2;
                    v106 = v107;
                    v108 = *v104;
                    v104 += 2;
                    fxd_S64SatAddS32S32((int *)&v184 + 1, (int *)&v184, v108 * v106);
                    v109 = (unsigned __int16)v103--;
                  }
                  while (v109 > 1);
                  v110 = v184;
                  v111 = HIDWORD(v184);
                }
                if (v111 > v100 || v111 == v100 && v110 > v99)
                {
                  v100 = v111;
                  v99 = v110;
                  LOWORD(v94) = v101;
                }
                ++v101;
              }
              while (v101 != v102);
            }
            v72 = v94 + v177 - *(_WORD *)(a1 + 32);
            v9 = v178;
            v13 = v174;
            v10 = a4;
          }
          else
          {
            v72 = *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
          }
          *(_WORD *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48)) = v72;
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 16)
              + 8 * (*(__int16 *)(a1 + 18) + (uint64_t)*(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 50)));
          *(_QWORD *)(a1 + 288) = v16;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 16)
                                + 8 * *(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48));
          if (*(_WORD *)(a1 + 128))
          {
            v14 = 5;
            *(_DWORD *)(a1 + 312) = 5;
          }
          else
          {
LABEL_98:
            v112 = *(_BYTE *)(v16 + 4);
            if (*(_DWORD *)(a1 + 304) == -1)
              *(_DWORD *)(a1 + 304) = 0;
            v113 = v112 & 0x7F;
            v114 = *(unsigned __int8 *)(a1 + 281);
            if ((_DWORD)v114 != (_DWORD)v113)
            {
              if ((_DWORD)v113 == 127)
                v115 = 0;
              else
                v115 = v112 & 0x7F;
              v116 = v115 + 1;
              v117 = v115 + 2;
              if (v116 == (_DWORD)v114 || v117 == (_DWORD)v114)
                goto LABEL_111;
              v119 = v113 - 126;
              if (v113 < 0x7E)
                v119 = v113 + 1;
              if (v119 + 1 == (_DWORD)v114)
              {
LABEL_111:
                *(_BYTE *)(v16 + 4) = v114 | v112 & 0x80;
                v113 = v114;
              }
              else
              {
                if (!*(_BYTE *)(a1 + (v112 & 0x7F) + 152))
                  *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v113) = 0;
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v114 + 152) = 2;
                  v120 = v114
                       - 127
                       * ((((unsigned __int16)(v114 - ((517 * (unsigned __int16)v114) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v114) >> 16)) >> 6);
                  LODWORD(v114) = v120 + 1;
                }
                while ((_DWORD)v113 != (unsigned __int16)(v120 + 1));
                *(_BYTE *)(a1 + 281) = v112 & 0x7F;
              }
              *(_BYTE *)(a1 + v113 + 152) = 1;
              v16 = *(_QWORD *)(a1 + 288);
              v112 = *(_BYTE *)(v16 + 4);
            }
            *(_DWORD *)(a1 + 312) = 1;
            if (v112 < 0)
            {
              *a9 = 2;
              *a6 = *(_DWORD *)(a1 + 112);
              v162 = *(unsigned __int8 *)(a1 + 281);
              if (v162 != *(unsigned __int8 *)(a1 + 280))
              {
                do
                {
                  *(_BYTE *)(a1 + (unsigned __int16)v162 + 152) = 2;
                  v162 = v162
                       - 127
                       * ((((unsigned __int16)(v162 - ((517 * (unsigned __int16)v162) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v162) >> 16)) >> 6)
                       + 1;
                }
                while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v162);
                v162 = *(unsigned __int8 *)(a1 + 280);
              }
              *(_BYTE *)(a1 + v162 + 152) = 2;
              *a8 = *(_BYTE *)(a1 + 281);
LABEL_185:
              *(_DWORD *)(a1 + 112) = 0;
              *(_DWORD *)(a1 + 312) = 0;
              return 0;
            }
            v121 = *(unsigned __int8 *)(a1 + 281);
            if (*(_BYTE *)(a1 + 281))
            {
              v122 = *a6;
              v123 = *(_DWORD *)(a1 + 112);
              v124 = *(_DWORD *)(a1 + 304);
              if (*a6 >= v123 + *(__int16 *)(a1 + 4) - v124)
                v122 = v123 + *(__int16 *)(a1 + 4) - v124;
              v125 = v122 - v123;
              if (v122 - v123 > 1
                && *(unsigned __int8 *)(v16 + 8 * (v122 - v123 - 1) + 4) != (_DWORD)v121)
              {
                v134 = (unsigned __int8 *)(v16 + 4);
                v135 = 1;
                while (v125 + v135 - 1 >= 1)
                {
                  v136 = *v134;
                  v134 += 8;
                  --v135;
                  if (v136 != (_DWORD)v121)
                  {
                    v126 = 0;
                    v122 = v123 - v135;
                    v14 = 4;
                    *(_DWORD *)(a1 + 312) = 4;
                    v125 = -v135;
                    goto LABEL_124;
                  }
                }
              }
              v126 = 1;
              v14 = 1;
LABEL_124:
              *(_DWORD *)(a1 + 304) = v125 + v124;
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v121) += v125;
              v127 = v122 - *(_DWORD *)(a1 + 112);
              if (v127 >= 1)
              {
                v128 = v127 + 1;
                do
                {
                  v129 = *(_DWORD *)v16;
                  v16 += 8;
                  *v9++ = v129;
                  --v128;
                }
                while (v128 > 1);
              }
              *(_QWORD *)(a1 + 288) = v16;
              if (v122 >= *a6)
              {
                *a9 = 1;
                *a6 = v122;
                *a8 = *(_BYTE *)(a1 + 281);
                *(_DWORD *)(a1 + 112) = 0;
                if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
                  goto LABEL_187;
                v163 = 4;
                goto LABEL_189;
              }
              *(_DWORD *)(a1 + 112) = v122;
              if (v126)
                goto LABEL_163;
            }
            else
            {
              v130 = *(__int16 *)(a1 + 4);
              v14 = 1;
              if (*(_WORD *)(a1 + 4))
              {
                v14 = 1;
                if (*(_BYTE *)(v16 + 8 * (v130 - 1) + 4))
                {
                  v131 = v16 - 8;
                  v132 = 1;
                  while (v130 + v132 - 1 >= 1)
                  {
                    v133 = *(unsigned __int8 *)(v131 + 12);
                    v131 += 8;
                    --v132;
                    if (v133)
                    {
                      v14 = 4;
                      *(_DWORD *)(a1 + 312) = 4;
                      *(_QWORD *)(a1 + 288) = v131;
                      *(_DWORD *)(a1 + 304) -= v132;
                      goto LABEL_4;
                    }
                  }
                  goto LABEL_164;
                }
              }
            }
          }
          continue;
        }
        *(_DWORD *)(a1 + 108) = 0;
        *a9 = 0;
        *(_BYTE *)(a1 + 280) = v13;
        return 0;
      case 2:
        goto LABEL_29;
      case 3:
        goto LABEL_45;
      case 4:
        v16 = *(_QWORD *)(a1 + 288);
        goto LABEL_98;
      case 5:
        v17 = *(_QWORD *)(a1 + 288);
        v18 = *(_BYTE *)(v17 + 4);
        if (*(_DWORD *)(a1 + 304) == -1)
          *(_DWORD *)(a1 + 304) = 0;
        v19 = v18 & 0x7F;
        v20 = *(unsigned __int8 *)(a1 + 281);
        if ((_DWORD)v20 != (_DWORD)v19)
        {
          if ((_DWORD)v19 == 127)
            v21 = 0;
          else
            v21 = v18 & 0x7F;
          v22 = v21 + 1;
          v23 = v21 + 2;
          if (v22 == (_DWORD)v20 || v23 == (_DWORD)v20)
            goto LABEL_22;
          v25 = v19 - 126;
          if (v19 < 0x7E)
            v25 = v19 + 1;
          if (v25 + 1 == (_DWORD)v20)
          {
LABEL_22:
            *(_BYTE *)(v17 + 4) = v20 | v18 & 0x80;
            v19 = v20;
          }
          else
          {
            if (!*(_BYTE *)(a1 + (v18 & 0x7F) + 152))
              *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v19) = 0;
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v20 + 152) = 2;
              v137 = v20
                   - 127
                   * ((((unsigned __int16)(v20 - ((517 * (unsigned __int16)v20) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v20) >> 16)) >> 6);
              LODWORD(v20) = v137 + 1;
            }
            while ((_DWORD)v19 != (unsigned __int16)(v137 + 1));
            *(_BYTE *)(a1 + 281) = v18 & 0x7F;
          }
          *(_BYTE *)(a1 + v19 + 152) = 1;
          v17 = *(_QWORD *)(a1 + 288);
          v18 = *(_BYTE *)(v17 + 4);
        }
        *(_DWORD *)(a1 + 312) = 1;
        if (v18 < 0)
        {
          *a9 = 2;
          *a6 = *(_DWORD *)(a1 + 112);
          v164 = *(unsigned __int8 *)(a1 + 281);
          if (v164 != *(unsigned __int8 *)(a1 + 280))
          {
            do
            {
              *(_BYTE *)(a1 + (unsigned __int16)v164 + 152) = 2;
              v164 = v164
                   - 127
                   * ((((unsigned __int16)(v164 - ((517 * (unsigned __int16)v164) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v164) >> 16)) >> 6)
                   + 1;
            }
            while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v164);
            v164 = *(unsigned __int8 *)(a1 + 280);
          }
          *(_BYTE *)(a1 + v164 + 152) = 2;
          *a8 = *(_BYTE *)(a1 + 281);
          goto LABEL_185;
        }
        v138 = *(unsigned __int8 *)(a1 + 281);
        if (*(_BYTE *)(a1 + 281))
        {
          v139 = *(_DWORD *)(a1 + 304);
          if (*a6 - *(_DWORD *)(a1 + 112) >= *(__int16 *)(a1 + 4) - v139)
            v140 = *(__int16 *)(a1 + 4) - v139;
          else
            v140 = *a6 - *(_DWORD *)(a1 + 112);
          if (v140 >= 2 && *(unsigned __int8 *)(v17 + 8 * (v140 - 1) + 4) != (_DWORD)v138)
          {
            v159 = (unsigned __int8 *)(v17 + 4);
            v160 = 1;
            while (v140 + v160 - 1 >= 1)
            {
              v161 = *v159;
              v159 += 8;
              --v160;
              if (v161 != (_DWORD)v138)
              {
                v141 = 0;
                v140 = -v160;
                v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                goto LABEL_153;
              }
            }
          }
          v141 = 1;
          v14 = 1;
LABEL_153:
          *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v138) += v140;
          v142 = v140 + v139;
          v143 = *(int *)(a1 + 304);
          v144 = *(_DWORD *)(a1 + 112) + v142 - v143;
          *(_DWORD *)(a1 + 112) = v144;
          if (v142 > (int)v143)
          {
            v145 = *(_QWORD *)(a1 + 40);
            v146 = *(int **)(a1 + 296);
            do
            {
              v147 = *(unsigned __int16 *)(v145 + 2 * v143);
              v148 = *v146;
              v146 += 2;
              v149 = (unsigned __int16)v148 * v147;
              v150 = (v148 >> 16) * v147;
              v151 = *(unsigned __int16 *)(v145 + 2 * (v143 + *(__int16 *)(a1 + 4)));
              v152 = *(_DWORD *)v17;
              v17 += 8;
              v153 = v150 + HIWORD(v149) + (v152 >> 16) * v151 + (((unsigned __int16)v152 * v151) >> 16);
              if (v153 <= -32768)
                v153 = -32768;
              if (v153 >= 0x7FFF)
                LOWORD(v153) = 0x7FFF;
              *v9++ = v153;
              ++v143;
            }
            while (v142 != v143);
            *(_QWORD *)(a1 + 296) = v146;
          }
          *(_QWORD *)(a1 + 288) = v17;
          *(_DWORD *)(a1 + 304) = v142;
          if (v144 >= *a6)
          {
            *a9 = 1;
            *a6 = *(_DWORD *)(a1 + 112);
            *a8 = *(_BYTE *)(a1 + 281);
            *(_DWORD *)(a1 + 112) = 0;
            if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
            {
LABEL_187:
              *(_DWORD *)(a1 + 304) = 0;
              return 0;
            }
            v163 = 5;
LABEL_189:
            *(_DWORD *)(a1 + 312) = v163;
            return 0;
          }
          if (v141)
          {
LABEL_163:
            *(_DWORD *)(a1 + 304) = 0;
            goto LABEL_164;
          }
        }
        else
        {
          v154 = *(__int16 *)(a1 + 4);
          v14 = 1;
          if (*(_BYTE *)(v17 + 8 * (v154 - 1) + 4))
          {
            v155 = 0;
            v156 = 1;
            while (v154 + v156 - 1 >= 1)
            {
              v157 = *(unsigned __int8 *)(v17 + v155 + 4);
              v155 += 8;
              --v156;
              if (v157)
              {
                v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                v158 = *(_QWORD *)(a1 + 296) + v155 - 8;
                *(_QWORD *)(a1 + 288) = v17 + v155 - 8;
                *(_QWORD *)(a1 + 296) = v158;
                *(_DWORD *)(a1 + 304) -= v156;
                goto LABEL_4;
              }
            }
LABEL_164:
            v14 = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t WSOLA__rateChange(uint64_t a1, char a2, __int16 a3, __int16 *a4, int a5, _WORD *a6, int *a7, char *a8, _BYTE *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  int v28;
  char v29;
  unsigned __int8 v30;

  v28 = 0;
  v16 = 0;
  v30 = 0;
  v17 = *a7;
  v18 = (__int16)(a3 - 100);
  do
  {
    v29 = *a8;
    *a7 = v17;
    WSOLA__TimeScaleInputBuffer(a1, a2, a4, a5, a6, a7, v18, &v29, &v30);
    v19 = v30;
    if (v30 - 1 > 1)
    {
      *a8 = *a8
          - 127
          * ((((*a8 - ((unsigned __int16)(3 * *a8) >> 8)) >> 1)
            + ((3 * *a8) >> 8)) >> 6)
          + 1;
      *a7 = 0;
      v16 = 1;
    }
    else
    {
      v20 = *a9;
      if ((v20 & 0x80) != 0)
      {
        while (v16)
        {
LABEL_7:
          v20 = *a9
              - 127 * ((*a9 * (unsigned __int128)0x204081020408103uLL) >> 64)
              + 1;
          *a9 = v20;
          if ((v20 & 0x80) == 0)
            goto LABEL_4;
        }
      }
      else
      {
LABEL_4:
        v21 = a1 + v20;
        v23 = *(unsigned __int8 *)(v21 + 152);
        v22 = (_BYTE *)(v21 + 152);
        if (v23 == 2)
        {
          *v22 = 0;
          v16 = 1;
          goto LABEL_7;
        }
      }
      v28 += *a7;
      (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD))(a10 + 104))(a11, a12, a6, (2 * *a7));
      v16 = 0;
    }
  }
  while ((v19 & 0xFFFFFFFD) != 0);
  *a7 = v28;
  return 0;
}

uint64_t WSOLA__rateChange_bet4_approach(uint64_t a1, char a2, __int16 a3, __int16 *a4, int a5, _WORD *a6, int *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v14 = 0;
  v26 = 0;
  v15 = *a7;
  v16 = (__int16)(a3 - 100);
  do
  {
    v17 = 1;
    v25 = 1;
    *a7 = v15;
    WSOLA__TimeScaleInputBuffer(a1, a2, a4, a5, a6, a7, v16, (char *)&v25, &v26);
    if (((char)v25 & 0x80000000) == 0)
    {
      v18 = a1 + v25;
      v20 = *(unsigned __int8 *)(v18 + 152);
      v19 = (_BYTE *)(v18 + 152);
      if (v20 == 2)
      {
        v17 = 0;
        *v19 = 0;
      }
    }
    if (v26 - 1 > 1)
      break;
    v14 += *a7;
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD))(a8 + 104))(a9, a10, a6, (2 * *a7));
  }
  while ((v17 & 1) != 0);
  *a7 = v14;
  return 0;
}

uint64_t ESmpl__Zero()
{
  return 0;
}

uint64_t fxd_S32MultIntS32FractS16(int a1, int a2)
{
  return ((int)fxd_S32ShMultRndS32S16(a1, a2, 16) >> 16);
}

int *fxd_S64SatAddS32S32(int *result, int *a2, int a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v4 = result;
  v5 = *a2;
  v6 = *a2 + a3;
  *a2 = v6;
  if (((v5 ^ a3) & 0x80000000) == 0 && (v6 ^ v5) < 0)
  {
    v7 = *result;
    if (v5 < 0)
    {
      result = (int *)fxd_S32SatAddS32S32(v7, -1);
      *v4 = (int)result;
      v8 = -*a2;
    }
    else
    {
      result = (int *)fxd_S32SatAddS32S32(v7, 1);
      *v4 = (int)result;
      v8 = *a2 & 0x7FFFFFFF;
    }
    goto LABEL_15;
  }
  v9 = *result;
  if (*result >= 1)
  {
    if ((v6 & 0x80000000) == 0)
      return result;
    --*result;
    goto LABEL_14;
  }
  if (v9)
    v10 = v6 < 1;
  else
    v10 = 1;
  if (!v10)
  {
    *result = v9 + 1;
LABEL_14:
    v8 = *a2 ^ 0x80000000;
LABEL_15:
    *a2 = v8;
  }
  return result;
}

uint64_t fxd_S32CosS32(int a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a1 >= 0)
    v1 = a1;
  else
    v1 = -a1;
  if (v1 >= 411774)
    v2 = 411774;
  else
    v2 = v1;
  v3 = v1 - 411774 * ((v1 + ~v2 + 411774) / 0x6487Eu);
  v4 = v3 - 102944;
  v5 = 411774 - v3;
  if (v3 <= 308830)
    v5 = v3;
  if ((v3 - 205888) >= 0x1921F)
  {
    v6 = 1;
  }
  else
  {
    v5 = v3 - 205887;
    v6 = -1;
  }
  v7 = 205887 - v3;
  if (v4 < 0x19220)
    v8 = v7;
  else
    v8 = v5;
  if (v4 < 0x19220)
    v9 = -1;
  else
    v9 = v6;
  v10 = fxd_S32Q1616MultS32S32(v8, v8);
  v11 = fxd_S32Q1616MultS32S32(2328, v10);
  return (fxd_S32Q1616MultS32S32((v11 - 32551), v10) + 0x10000) * v9;
}

uint64_t fxd_S32Q1616MultS32S32(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v6;
  int v7;

  v6 = 0;
  v7 = 0;
  fxd_DPFExtractS32S16S16(a1, (_WORD *)&v7 + 1, &v7);
  fxd_DPFExtractS32S16S16(a2, (_WORD *)&v6 + 1, &v6);
  v3 = fxd_S32SatAddS32S32((((__int16)v6 * (__int16)v7) >> 14) & 0x1FFFF, 2 * (__int16)v6 * SHIWORD(v7));
  v4 = fxd_S32SatAddS32S32(v3, 2 * (__int16)v7 * SHIWORD(v6));
  return fxd_S32SatAddS32S32(v4, (HIWORD(v7) * HIWORD(v6)) << 16);
}

uint64_t Wsola__updatepointers(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t Wsola__updateSubunits(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;

  v3 = *(_QWORD *)(result + 152);
  v4 = v3 + 56 * a2;
  v5 = *(unsigned __int16 *)(v4 + 46);
  if (!*(_WORD *)(v4 + 46))
    return result;
  v6 = *(_DWORD *)(result + 144);
  v7 = *(_QWORD *)(result + 160);
  v8 = *(unsigned __int16 *)(v3 + 56 * a2 + 44);
  v9 = v7 + 16 * v8;
  v11 = *(_DWORD *)(v9 + 4);
  v10 = (int *)(v9 + 4);
  v12 = v11 + a3;
  if (v11 + a3 < 0)
  {
    if (v5 >= 2)
    {
      v13 = 0;
      v14 = 0;
      v15 = (int *)(v7 + 16 * v8 + 4);
      while (1)
      {
        v17 = *v15;
        v15 += 4;
        v16 = v17;
        result = (v17 + v14);
        if ((int)result > 1 - a3 + (int)v13)
          break;
        ++v13;
        v14 = result;
        if (v5 == v13)
          goto LABEL_7;
      }
      if ((_DWORD)v13)
      {
        v21 = (_DWORD *)(v7 + 16 * v8 + 4);
        v22 = v13;
        do
        {
          *v21 = 1;
          v21 += 4;
          --v22;
        }
        while (v22);
        v23 = v13;
      }
      else
      {
        v23 = 0;
      }
      *(_DWORD *)(v7 + 16 * (v23 + v8) + 4) = a3 + v14 + v16 - v13;
      goto LABEL_9;
    }
LABEL_7:
    v12 = 1;
  }
  *v10 = v12;
LABEL_9:
  v18 = 0;
  if (v5 <= 1)
    v19 = 1;
  else
    v19 = v5;
  v20 = v7 + 16 * v8;
  do
  {
    if (v18)
      v6 += *(_DWORD *)(v20 + v18 - 12);
    *(_DWORD *)(v20 + v18) = v6;
    v18 += 16;
  }
  while (16 * v19 != v18);
  return result;
}

uint64_t Wsola__findNextEventInSubUnit(uint64_t a1, unsigned int a2, int *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t result;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(unsigned __int16 *)(v4 + 56 * a2 + 46);
  if (*a3 >= v5)
  {
LABEL_6:
    v3 = 0;
    result = 0;
  }
  else
  {
    v6 = (unsigned __int16 *)(*(_QWORD *)(a1 + 160)
                            + 16 * (v3 + (unint64_t)*(unsigned __int16 *)(v4 + 56 * a2 + 44))
                            + 10);
    while (1)
    {
      v7 = *v6;
      v6 += 8;
      if (v7)
        break;
      if (v5 == ++v3)
        goto LABEL_6;
    }
    result = 1;
  }
  *a3 = v3;
  return result;
}

uint64_t Wsola__Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t ClientBuffer;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(*(_QWORD *)(v9 + 160) + 12) != 35)
  {
    v14 = 0;
LABEL_9:
    v15 = *(unsigned __int16 *)(v9 + 168);
    if (v14 >= v15)
    {
LABEL_28:
      synth_ProcessMarkers(a1, a2, a3, a4, a5, a6, a7, a8);
      if (!*(_BYTE *)(a1 + 1144)
        || (v26 = (*(_DWORD *)(a1 + 1096) + *(_DWORD *)(a1 + 1048)), (int)v26 < 1)
        || (ClientBuffer = InOut__InsertSilence(a1, v26, *(unsigned __int16 *)(v9 + 168) - 1),
            (ClientBuffer & 0x80000000) == 0)
        && !InOut__IsEndState(a1))
      {
        *(_DWORD *)(a1 + 1076) = 1;
        *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1028);
        ++*(_DWORD *)(v9 + 224);
        ClientBuffer = InOut__GetClientBuffer(a1, v26, v27, v28, v29, v30, v31, v32);
        if ((ClientBuffer & 0x80000000) == 0)
          InOut__IsEndState(a1);
      }
      return ClientBuffer;
    }
    v16 = v14 == v15 - 1;
    v17 = v14;
    v18 = 56 * v14;
    while (1)
    {
      ClientBuffer = Wsola__newunit(a1, *(_QWORD *)(v9 + 152) + v18);
      if ((ClientBuffer & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
      v24 = v16;
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 0xF) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 2) != 0)
        {
          v25 = Wsola__matchpreviousunit_wsola(a1, v17, v24);
        }
        else if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 1) != 0)
        {
          v25 = Wsola__plosive_silence(a1, v17);
        }
        else
        {
          if ((*(_BYTE *)(*(_QWORD *)(v9 + 152) + v18 + 48) & 4) == 0)
            goto LABEL_23;
          v25 = Wsola__plosive_rs(a1, v17);
        }
      }
      else
      {
        v25 = Wsola__Silence(a1, v17, v24);
      }
      ClientBuffer = v25;
      if ((v25 & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
LABEL_23:
      v16 = v17 == *(unsigned __int16 *)(v9 + 168) - 1;
      ClientBuffer = Wsola__middle(a1, v17, v24, v19, v20, v21, v22, v23);
      if ((ClientBuffer & 0x80000000) != 0)
        return ClientBuffer;
      if (InOut__IsEndState(a1))
        return ClientBuffer;
      ClientBuffer = Wsola__tail(a1, v17);
      if ((ClientBuffer & 0x80000000) != 0 || InOut__IsEndState(a1))
        return ClientBuffer;
      ++v17;
      v18 += 56;
      if (v17 >= *(unsigned __int16 *)(v9 + 168))
        goto LABEL_28;
    }
  }
  ClientBuffer = Wsola__newunit(a1, *(_QWORD *)(v9 + 152));
  if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v11 = *(_QWORD *)(a1 + 1088);
    Wsola__updateSubunits(v11, 0, 0);
    v12 = *(_QWORD *)(v11 + 152);
    if (*(_WORD *)(v12 + 46))
    {
      v13 = *(_DWORD *)(v12 + 40);
      if (v13)
      {
        ClientBuffer = InOut__InsertSilence(a1, v13, 0);
        if ((ClientBuffer & 0x80000000) != 0)
          return ClientBuffer;
        InOut__IsEndState(a1);
      }
      else
      {
        ClientBuffer = 0;
      }
    }
    else
    {
      ClientBuffer = 0;
      *(_DWORD *)(v12 + 40) = 0;
    }
    if (!InOut__IsEndState(a1))
    {
      ClientBuffer = Wsola__middle(a1, 0, v33, v34, v35, v36, v37, v38);
      if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
      {
        ClientBuffer = Wsola__tail(a1, 0);
        if ((ClientBuffer & 0x80000000) == 0 && !InOut__IsEndState(a1))
        {
          v14 = 1;
          goto LABEL_9;
        }
      }
    }
  }
  return ClientBuffer;
}

uint64_t Wsola__newunit(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t result;
  int v12;

  v3 = *(_QWORD *)(a1 + 1088);
  v4 = *(_DWORD *)(a2 + 28);
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(v3 + 28) = v5;
  v6 = *(unsigned __int8 *)(a2 + 48);
  if ((v6 & 0xF) == 0)
  {
    v7 = *(_DWORD *)(v3 + 4);
LABEL_7:
    v8 = v4 >= v7;
    v9 = v4 - v7;
    if (v4 >= v7)
      v5 += v7;
    else
      v5 += v4;
    if (v4 < v7)
      v7 = v4;
    if (v8)
      v4 = v9;
    else
      v4 = 0;
    *(_DWORD *)(v3 + 28) = v5;
    *(_DWORD *)(v3 + 32) = v7;
    goto LABEL_16;
  }
  if ((v6 & 2) != 0)
  {
    v7 = *(_DWORD *)v3;
    goto LABEL_7;
  }
  if ((v6 & 5) == 0)
    goto LABEL_17;
  v7 = 0;
LABEL_16:
  *(_DWORD *)(a2 + 36) = v7;
LABEL_17:
  *(_DWORD *)(v3 + 36) = v5;
  if (v6 > 0xF)
  {
    if ((v6 & 0x20) != 0)
    {
      v10 = (_DWORD *)(v3 + 8);
    }
    else
    {
      if ((v6 & 0x10) == 0)
        goto LABEL_24;
      v10 = (_DWORD *)(v3 + 180);
    }
  }
  else
  {
    v10 = (_DWORD *)(v3 + 4);
  }
  v5 += *v10;
  *(_DWORD *)(v3 + 28) = v5;
LABEL_24:
  result = Lookup_Init(**(_QWORD **)(a2 + 8), v4, v5);
  if ((result & 0x80000000) == 0)
  {
    v12 = *(unsigned __int16 *)(a2 + 46);
    *(_DWORD *)(v3 + 20) = 0;
    *(_DWORD *)(v3 + 24) = v12;
  }
  return result;
}

uint64_t Wsola__middle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;

  v9 = *(_QWORD *)(a1 + 1088);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 56 * (int)a2 + 48);
  if (v10 <= 0xF || (v10 & 0x20) != 0)
  {
    v12 = (_DWORD *)(v9 + 4);
LABEL_7:
    v13 = (_DWORD *)(v9 + 20);
    goto LABEL_8;
  }
  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 0x40) == 0)
    {
      v11 = 0;
      goto LABEL_9;
    }
    v12 = (_DWORD *)(v9 + 208);
    goto LABEL_7;
  }
  v12 = (_DWORD *)(v9 + 20);
  v13 = (_DWORD *)(v9 + 180);
LABEL_8:
  v14 = *(_DWORD *)(v9 + 36);
  v15 = *v12 + *v13;
  v11 = (v14 - v15);
  if (v14 - v15 < 0)
    return 0;
LABEL_9:
  v16 = InOut__AudioWriteToClientWithMarkers(a1, a2, v11, 2, a5, a6, a7, a8);
  if ((v16 & 0x80000000) == 0 && !InOut__IsEndState(a1))
    *(_DWORD *)(v9 + 20) += v11;
  return v16;
}

uint64_t Wsola__tail(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 1088);
  v3 = **(uint64_t ***)(*(_QWORD *)(v2 + 152) + 56 * a2 + 8);
  v4 = *(_DWORD *)(v2 + 28);
  v5 = *(_DWORD *)(v2 + 20);
  v6 = v4 - v5;
  if (v4 - v5 < 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8);
    v11 = *(_DWORD *)(v2 + 12);
    v12 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(v2 + 12);
    v8 = *(_QWORD *)(v2 + 48);
    v9 = **(_QWORD **)(*(_QWORD *)(v2 + 152) + 56 * a2 + 8);
    if (v6 >= v7)
    {
      InOut__DecodeToVector(a1, v9, v7, v8);
      return Lookup_DeInit(v3);
    }
    InOut__DecodeToVector(a1, v9, v4 - v5, v8);
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8);
    v11 = *(_DWORD *)(v2 + 12) - v6;
    v12 = v6;
  }
  Wsola__zero(v10, v12, v11);
  return Lookup_DeInit(v3);
}

uint64_t Wsola__matchpreviousunit_wsola(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_QWORD **)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 8);
  v8 = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
  v9 = *(_DWORD *)(v6 + 12);
  v10 = *(_QWORD *)(v6 + 64);
  if (v8 >= v9)
  {
    *(_DWORD *)(v10 + 4) = v9;
    v11 = InOut__DecodeToVector(a1, v7, v9, v10);
    if ((v11 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v11;
  }
  else
  {
    *(_DWORD *)(v10 + 4) = v8;
    v11 = InOut__DecodeToVector(a1, v7, v8, v10);
    if ((v11 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v11;
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8), *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4), *(_DWORD *)(v6 + 12) - *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4));
  }
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(unsigned int *)(v6 + 8);
  v17 = *(_DWORD *)(v6 + 16);
  if ((int)v16 < 1)
  {
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v19 += (*(_DWORD *)(v14 + 4 * v18) * *(_DWORD *)(v15 + 4 * v18)) >> 3;
      v18 += v17;
    }
    while (v18 < v16);
  }
  if (v17 <= *(_DWORD *)v6)
  {
    v20 = 0;
    v21 = *(_DWORD *)(v6 + 16);
    v22 = v15 + 4 * v17;
    do
    {
      if ((int)v16 < 1)
      {
        v24 = 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v24 += (*(_DWORD *)(v14 + 4 * v23) * *(_DWORD *)(v22 + 4 * v23)) >> 3;
          v23 += v17;
        }
        while (v23 < (int)v16);
      }
      if (v24 > v19)
      {
        v20 = v21;
        v19 = v24;
      }
      v21 += v17;
      v22 += 4 * v17;
    }
    while (v21 <= *(_DWORD *)v6);
  }
  else
  {
    v20 = 0;
  }
  v25 = *(_DWORD *)(v6 + 4) + v20;
  *(_DWORD *)(v6 + 32) = v25;
  v26 = *(_QWORD *)(v6 + 152) + 56 * (int)a2;
  *(_DWORD *)(v26 + 36) -= v25;
  Wsola__WindowsOverlap_wsola((int *)v6, v12, v13, 0, v20);
  v27 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v6 + 160) + 10))
    {
      v50 = 0;
      if (Wsola__findNextEventInSubUnit(v6, 0, &v50))
      {
        v35 = *(_QWORD *)(v6 + 152);
        v36 = *(unsigned __int16 *)(v35 + 46);
        if (v50 < (int)v36)
        {
          v37 = *(unsigned __int16 *)(v35 + 44);
          v38 = *(_DWORD *)(v6 + 144);
          v39 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v50 + v37));
          v40 = v36 - v50;
          do
          {
            if (*v39 > v38)
              *v39 = v38;
            v39 += 4;
            --v40;
          }
          while (v40);
        }
      }
    }
  }
  else
  {
    v51 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v6, (int)a2 - 1, &v51))
      {
        v28 = *(_QWORD *)(v6 + 152);
        v29 = *(unsigned __int16 *)(v28 + 56 * v27 + 46);
        if (v51 < (int)v29)
        {
          v30 = *(_DWORD *)(v6 + 4);
          if (v30 >= *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4))
            v30 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4);
          if (a3 == 1)
            v30 = 0;
          v31 = *(unsigned __int16 *)(v28 + 56 * v27 + 44);
          v32 = *(_DWORD *)(v6 + 144) + v30;
          v33 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v51 + v31));
          v34 = v29 - v51;
          do
          {
            if (*v33 > v32)
              *v33 = v32;
            v33 += 4;
            --v34;
          }
          while (v34);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), 0, *(unsigned int *)(v6 + 4));
  v11 = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(v6 + 4), 1, v41, v42, v43, v44);
  if ((v11 & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    Wsola__updateSubunits(v6, a2, *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 36));
    InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), *(_DWORD *)(v6 + 4), *(unsigned int *)(v6 + 4));
    v11 = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(v6 + 4), 0, v45, v46, v47, v48);
    if ((v11 & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), *(_DWORD *)v6 + v20, (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) - (*(_DWORD *)v6 + v20)));
      Wsola__updatepointers(v6, *(_DWORD *)(v6 + 4) + *(_DWORD *)(v6 + 32));
    }
  }
  return v11;
}

uint64_t Wsola__Silence(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t inserted;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_QWORD **)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 8);
  v8 = *(_DWORD *)(v6 + 4);
  v9 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20) >= v8)
  {
    *(_DWORD *)(v9 + 4) = v8;
    inserted = InOut__DecodeToVector(a1, v7, v8, v9);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
  }
  else
  {
    inserted = InOut__DecodeToVector(a1, v7, *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20), v9);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
    v11 = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8), v11, *(_DWORD *)(v6 + 4) - v11);
    *(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) = *(_DWORD *)(v6 + 28) - *(_DWORD *)(v6 + 20);
  }
  Wsola__fade_out(v6, *(_QWORD *)(v6 + 48), 0, *(_DWORD *)(v6 + 4));
  v12 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 32) = v12 >> 1;
  v13 = *(_QWORD *)(v6 + 152) + 56 * (int)a2;
  *(_DWORD *)(v13 + 36) -= v12 >> 1;
  v14 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v6 + 160) + 10))
    {
      v38 = 0;
      if (Wsola__findNextEventInSubUnit(v6, 0, &v38))
      {
        v22 = *(_QWORD *)(v6 + 152);
        v23 = *(unsigned __int16 *)(v22 + 46);
        if (v38 < (int)v23)
        {
          v24 = *(unsigned __int16 *)(v22 + 44);
          v25 = *(_DWORD *)(v6 + 144);
          v26 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v38 + v24));
          v27 = v23 - v38;
          do
          {
            if (*v26 > v25)
              *v26 = v25;
            v26 += 4;
            --v27;
          }
          while (v27);
        }
      }
    }
  }
  else
  {
    v39 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v6, (int)a2 - 1, &v39))
      {
        v15 = *(_QWORD *)(v6 + 152);
        v16 = *(unsigned __int16 *)(v15 + 56 * v14 + 46);
        if (v39 < (int)v16)
        {
          v17 = *(_DWORD *)(v6 + 4);
          if (v17 >= *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4))
            v17 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4);
          if (a3 == 1)
            v17 = 0;
          v18 = *(unsigned __int16 *)(v15 + 56 * v14 + 44);
          v19 = *(_DWORD *)(v6 + 144) + v17;
          v20 = (_DWORD *)(*(_QWORD *)(v6 + 160) + 16 * (v39 + v18));
          v21 = v16 - v39;
          do
          {
            if (*v20 > v19)
              *v20 = v19;
            v20 += 4;
            --v21;
          }
          while (v21);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 48), 0, *(unsigned int *)(v6 + 4));
  inserted = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(v6 + 4), 1, v28, v29, v30, v31);
  if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v32 = *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 40);
    Wsola__updateSubunits(v6, a2, *(_DWORD *)(*(_QWORD *)(v6 + 152) + 56 * (int)a2 + 36) + v32);
    inserted = InOut__InsertSilence(a1, v32, a2);
    if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      Wsola__fade_in(v6, *(_QWORD *)(v6 + 64), 0, *(_DWORD *)(v6 + 4));
      InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), 0, *(unsigned int *)(v6 + 4));
      inserted = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(v6 + 4), 0, v33, v34, v35, v36);
      if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
      {
        InOut__PutVectorInBuffer(v6, *(_QWORD *)(v6 + 64), *(_DWORD *)(v6 + 4), (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 4) - *(_DWORD *)(v6 + 4)));
        Wsola__updatepointers(v6, *(_DWORD *)(v6 + 32) + (*(int *)(v6 + 4) >> 1));
      }
    }
  }
  return inserted;
}

_DWORD *Wsola__copy(_DWORD *result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int *v5;
  int v6;

  if (a4 >= 1)
  {
    v4 = a4;
    v5 = (int *)(a2 + 4 * a3);
    do
    {
      v6 = *v5++;
      *result++ = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

void Wsola__zero(uint64_t a1, int a2, int a3)
{
  if (a3 >= 1)
    bzero((void *)(a1 + 4 * a2), 4 * a3);
}

int *Wsola__WindowsOverlap_wsola(int *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v5) = *result;
  if (*result >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 8) + 4 * a4;
    v9 = *(_QWORD *)(a3 + 8) + 4 * a5;
    v10 = *(_QWORD *)(*((_QWORD *)result + 7) + 8);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = ((*(_DWORD *)(v9 + 4 * v7) * *(_DWORD *)(v10 + 4 * (v6 + (int)v5))) >> 15)
                               + ((*(_DWORD *)(v8 + 4 * v7) * *(_DWORD *)(v10 + 4 * v7)) >> 15);
      ++v7;
      v5 = *result;
      --v6;
    }
    while (v7 < v5);
  }
  return result;
}

uint64_t Wsola__WindowsOverlap_rs(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;

  if (*(int *)(result + 4) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8) + 4 * a4;
    v8 = *(_QWORD *)(a3 + 8) + 4 * a5;
    v9 = *(int **)(*(_QWORD *)(result + 56) + 8);
    v10 = v9;
    do
    {
      v11 = *v10;
      v10 += 2;
      *(_DWORD *)(v7 + 4 * v6) = ((*(_DWORD *)(v8 + 4 * v6) * v9[v5 + *(_DWORD *)result]) >> 15)
                               + ((*(_DWORD *)(v7 + 4 * v6) * v11) >> 15);
      ++v6;
      v5 -= 2;
    }
    while (v6 < *(int *)(result + 4));
  }
  return result;
}

uint64_t Wsola__fade_out(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  do
  {
    if (2 * (a4 & ~(a4 >> 31)) == v4)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v4)) >> 15;
    ++v7;
    v4 += 2;
  }
  while (*(_DWORD *)(v5 + 4) > (int)v4);
  return result;
}

uint64_t Wsola__fade_in(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(result + 56);
  v5 = *(_DWORD *)(v4 + 4) - 1;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  v8 = v5;
  v9 = a4 & ~(a4 >> 31);
  do
  {
    if (!v9)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v8)) >> 15;
    ++v7;
    --v9;
    v10 = v8 <= 1;
    v8 -= 2;
  }
  while (!v10);
  return result;
}

uint64_t Wsola__fade_out_closure(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 8) + 4 * a3;
  do
  {
    if ((a4 & ~(a4 >> 31)) == v4)
      break;
    *(_DWORD *)(v7 + 4 * v4) = (*(_DWORD *)(v7 + 4 * v4) * *(_DWORD *)(v6 + 4 * v4)) >> 15;
    ++v4;
  }
  while (v4 < *(int *)(v5 + 4));
  return result;
}

uint64_t Wsola__fade_in_burst(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(result + 56);
  v5 = *(_DWORD *)(v4 + 4) - 1;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
  v8 = *(_DWORD *)(result + 216);
  v9 = a4 & ~(a4 >> 31);
  do
  {
    if (!v9)
      break;
    *v7 = (*v7 * *(_DWORD *)(v6 + 4 * v5)) >> 15;
    ++v7;
    v5 -= v8;
    --v9;
  }
  while ((v5 & 0x80000000) == 0);
  return result;
}

uint64_t Wsola__OverlapWindow__Init(uint64_t result, int a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2 > 15999)
  {
    if (a2 == 16000)
    {
      v2 = *(uint64_t **)(result + 56);
      v2[1] = (uint64_t)&smpOverlapWindow_16;
      v3 = 0xA1000000A1;
    }
    else
    {
      if (a2 != 22050)
        return result;
      v2 = *(uint64_t **)(result + 56);
      v2[1] = (uint64_t)&smpOverlapWindow_22;
      v3 = 0xDD000000DDLL;
    }
  }
  else if (a2 == 8000)
  {
    v2 = *(uint64_t **)(result + 56);
    v2[1] = (uint64_t)&smpOverlapWindow_8;
    v3 = 0x5100000051;
  }
  else
  {
    if (a2 != 11025)
      return result;
    v2 = *(uint64_t **)(result + 56);
    v2[1] = (uint64_t)&smpOverlapWindow_11;
    v3 = 0x7100000071;
  }
  *v2 = v3;
  return result;
}

uint64_t Wsola__matchpreviousunit_rs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = **(_QWORD **)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 8);
  v6 = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
  v7 = *(_DWORD *)(v4 + 192);
  if (v6 >= v7)
  {
    v11 = *(_QWORD *)(v4 + 64);
    *(_DWORD *)(v11 + 4) = v7;
    v9 = InOut__DecodeToVector(a1, v5, v7, v11);
    if ((v9 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v9;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 64);
    if (v6 <= ((2 * *(_DWORD *)(v4 + 220)) | 1))
    {
      v10 = 0;
      *(_DWORD *)(v8 + 4) = 0;
    }
    else
    {
      *(_DWORD *)(v8 + 4) = v6;
      v9 = InOut__DecodeToVector(a1, v5, v6, v8);
      if ((v9 & 0x80000000) != 0 || InOut__IsEndState(a1))
        return v9;
      v8 = *(_QWORD *)(v4 + 64);
      v10 = *(_DWORD *)(v8 + 4);
    }
    Wsola__zero(*(_QWORD *)(v8 + 8), v10, *(_DWORD *)(v4 + 12) - v10);
  }
  v12 = *(_QWORD *)(v4 + 48);
  v13 = *(_QWORD *)(v4 + 64);
  v14 = *(unsigned int *)(v4 + 220);
  v15 = (int)v14 >> 1;
  v16 = *(int *)(v4 + 188);
  v17 = (int)v14 >> 1;
  if ((int)v14 >> 1 < (int)v16)
  {
    v18 = v15;
    v19 = 4 * v15;
    v20 = -536870912;
    v17 = (int)v14 >> 1;
    do
    {
      if ((int)v14 < 2)
      {
        v21 = 0;
      }
      else
      {
        v21 = 0;
        v22 = (int)-(uint64_t)(v14 >> 1);
        do
          v21 += *(_DWORD *)(*(_QWORD *)(v12 + 8) + v19 + 4 * v22++);
        while (v22 < (uint64_t)(v14 >> 1));
      }
      if (v21 > v20)
      {
        v20 = v21;
        v17 = v18;
      }
      ++v18;
      v19 += 4;
    }
    while (v18 != v16);
  }
  v23 = v17 - v15;
  if (v17 - v15 <= v15)
    v23 = (int)v14 >> 1;
  v24 = v23 + v16;
  v25 = *(_DWORD *)(v13 + 4);
  if (v23 + (int)v16 >= v25)
    v24 = *(_DWORD *)(v13 + 4);
  v26 = v24 - v15;
  if (v23 < v24 - v15)
  {
    v27 = 0;
    v28 = v23;
    v29 = 4 * v23;
    do
    {
      if ((int)v14 < 2)
      {
        v30 = 0;
      }
      else
      {
        v30 = 0;
        v31 = (int)-(uint64_t)(v14 >> 1);
        do
          v30 += *(_DWORD *)(*(_QWORD *)(v13 + 8) + v29 + 4 * v31++);
        while (v31 < (uint64_t)(v14 >> 1));
      }
      if (v30 > v27)
      {
        v27 = v30;
        v23 = v28;
      }
      ++v28;
      v29 += 4;
    }
    while (v28 < v26);
  }
  v32 = v25 - v16;
  if (v23 + v15 - v17 >= v32)
    v33 = v32 - 1;
  else
    v33 = v23 + v15 - v17;
  v34 = v33 + *(_DWORD *)(v4 + 204);
  *(_DWORD *)(v4 + 32) = v34;
  v35 = *(_QWORD *)(v4 + 152) + 56 * (int)a2;
  *(_DWORD *)(v35 + 36) -= v34;
  Wsola__WindowsOverlap_rs(v4, v12, v13, v15, v33);
  if ((int)a2 <= 0)
  {
    v36 = (a2 - 1);
  }
  else
  {
    v52 = 0;
    v36 = (a2 - 1);
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v4, (int)a2 - 1, &v52))
      {
        v37 = *(_QWORD *)(v4 + 152);
        v38 = *(unsigned __int16 *)(v37 + 56 * v36 + 46);
        if (v52 < (int)v38)
        {
          v39 = *(unsigned __int16 *)(v37 + 56 * v36 + 44);
          v40 = *(_DWORD *)(v4 + 144) + v15 + *(_DWORD *)(v4 + 204);
          v41 = (int *)(*(_QWORD *)(v4 + 160) + 16 * (v52 + v39));
          v42 = v38 - v52;
          do
          {
            if (*v41 > v40)
              *v41 = v40;
            v41 += 4;
            --v42;
          }
          while (v42);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), 0, (*(_DWORD *)(v4 + 204) + v15));
  v9 = InOut__AudioWriteToClientWithMarkers(a1, v36, (*(_DWORD *)(v4 + 204) + v15), 1, v43, v44, v45, v46);
  if ((v9 & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36));
    InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), *(_DWORD *)(v4 + 204) + v15, *(unsigned int *)(v4 + 204));
    v9 = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(v4 + 204), 0, v47, v48, v49, v50);
    if ((v9 & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 64), *(_DWORD *)(v4 + 200) + v33, (*(_DWORD *)(*(_QWORD *)(v4 + 64) + 4) - (*(_DWORD *)(v4 + 200) + v33)));
      Wsola__updatepointers(v4, *(_DWORD *)(v4 + 204) + *(_DWORD *)(v4 + 32));
    }
  }
  return v9;
}

uint64_t Wsola__plosive_rs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  int v33;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = **(_QWORD **)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 8);
  v6 = *(_DWORD *)(v4 + 212);
  v7 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20) >= v6)
  {
    *(_DWORD *)(v7 + 4) = v6;
    v8 = InOut__DecodeToVector(a1, v5, v6, v7);
    if ((v8 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v8;
  }
  else
  {
    v8 = InOut__DecodeToVector(a1, v5, *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20), v7);
    if ((v8 & 0x80000000) != 0 || InOut__IsEndState(a1))
      return v8;
    v9 = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8), v9, *(_DWORD *)(v4 + 212) - v9);
    *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4) = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
  }
  Wsola__fade_out_closure(v4, *(_QWORD *)(v4 + 48), 0, *(_DWORD *)(v4 + 208));
  *(_DWORD *)(v4 + 32) = 0;
  v10 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v4 + 160) + 10))
    {
      v32 = 0;
      if (Wsola__findNextEventInSubUnit(v4, 0, &v32))
      {
        v17 = *(_QWORD *)(v4 + 152);
        v18 = *(unsigned __int16 *)(v17 + 46);
        if (v32 < (int)v18)
        {
          v19 = *(unsigned __int16 *)(v17 + 44);
          v20 = *(_DWORD *)(v4 + 144);
          v21 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v32 + v19));
          v22 = v18 - v32;
          do
          {
            if (*v21 > v20)
              *v21 = v20;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  else
  {
    v33 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v4, (int)a2 - 1, &v33))
      {
        v11 = *(_QWORD *)(v4 + 152);
        v12 = *(unsigned __int16 *)(v11 + 56 * v10 + 46);
        if (v33 < (int)v12)
        {
          v13 = *(unsigned __int16 *)(v11 + 56 * v10 + 44);
          v14 = *(_DWORD *)(v4 + 144) + *(_DWORD *)(v4 + 208);
          v15 = (int *)(*(_QWORD *)(v4 + 160) + 16 * (v33 + v13));
          v16 = v12 - v33;
          do
          {
            if (*v15 > v14)
              *v15 = v14;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), 0, *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4));
  v8 = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), *(unsigned int *)(*(_QWORD *)(v4 + 48) + 4), 1, v23, v24, v25, v26);
  if ((v8 & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    Wsola__fade_in_burst(v4, *(_QWORD *)(v4 + 64), 0, *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4));
    Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36));
    InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 64), 0, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4));
    v8 = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4), 0, v27, v28, v29, v30);
    if ((v8 & 0x80000000) == 0 && !InOut__IsEndState(a1))
      Wsola__updatepointers(v4, *(_DWORD *)(v4 + 212) + *(_DWORD *)(v4 + 32));
  }
  return v8;
}

uint64_t Wsola__plosive_silence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t inserted;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  int v34;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = **(_QWORD **)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 8);
  v6 = *(_DWORD *)(v4 + 180);
  v7 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20) >= v6)
  {
    *(_DWORD *)(v7 + 4) = v6;
    inserted = InOut__DecodeToVector(a1, v5, v6, v7);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
  }
  else
  {
    inserted = InOut__DecodeToVector(a1, v5, *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20), v7);
    if ((inserted & 0x80000000) != 0 || InOut__IsEndState(a1))
      return inserted;
    v9 = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
    Wsola__zero(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8), v9, *(_DWORD *)(v4 + 180) - v9);
    *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4) = *(_DWORD *)(v4 + 28) - *(_DWORD *)(v4 + 20);
  }
  *(_DWORD *)(v4 + 32) = 0;
  v10 = a2 - 1;
  if ((int)a2 < 1)
  {
    if (*(_WORD *)(*(_QWORD *)(v4 + 160) + 10))
    {
      v33 = 0;
      if (Wsola__findNextEventInSubUnit(v4, 0, &v33))
      {
        v17 = *(_QWORD *)(v4 + 152);
        v18 = *(unsigned __int16 *)(v17 + 46);
        if (v33 < (int)v18)
        {
          v19 = *(unsigned __int16 *)(v17 + 44);
          v20 = *(_DWORD *)(v4 + 144);
          v21 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v33 + v19));
          v22 = v18 - v33;
          do
          {
            if (*v21 > v20)
              *v21 = v20;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
      }
    }
  }
  else
  {
    v34 = 0;
    if ((_DWORD)a2 != 1)
    {
      if (Wsola__findNextEventInSubUnit(v4, (int)a2 - 1, &v34))
      {
        v11 = *(_QWORD *)(v4 + 152);
        v12 = *(unsigned __int16 *)(v11 + 56 * v10 + 46);
        if (v34 < (int)v12)
        {
          v13 = *(unsigned __int16 *)(v11 + 56 * v10 + 44);
          v14 = *(_DWORD *)(v4 + 144);
          v15 = (_DWORD *)(*(_QWORD *)(v4 + 160) + 16 * (v34 + v13));
          v16 = v12 - v34;
          do
          {
            if (*v15 > v14)
              *v15 = v14;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 48), 0, *(unsigned int *)(v4 + 180));
  inserted = InOut__AudioWriteToClientWithMarkers(a1, (a2 - 1), 1, 1, v23, v24, v25, v26);
  if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 40);
    Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36) + v27);
    inserted = InOut__InsertSilence(a1, v27, a2);
    if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
    {
      Wsola__updateSubunits(v4, a2, *(_DWORD *)(*(_QWORD *)(v4 + 152) + 56 * (int)a2 + 36));
      InOut__PutVectorInBuffer(v4, *(_QWORD *)(v4 + 64), 0, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4));
      inserted = InOut__AudioWriteToClientWithMarkers(a1, a2, *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4), 0, v28, v29, v30, v31);
      if ((inserted & 0x80000000) == 0 && !InOut__IsEndState(a1))
        Wsola__updatepointers(v4, *(_DWORD *)(v4 + 180) + *(_DWORD *)(v4 + 32));
    }
  }
  return inserted;
}

BOOL AdjacentUnits(int a1, int a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;

  result = 0;
  if (a1 != 35 && !a2)
    return !*(_BYTE *)(a3 + 12)
        && (int)cstdlib_abs((*(_DWORD *)(a4 + 4) - (*(_DWORD *)(a3 + 4) + *(_DWORD *)(a3 + 8)))) < 4;
  return result;
}

uint64_t synthfx_ExtractFeaturesForSynth_Demi(int a1, uint64_t a2)
{
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _WORD *v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  char v62;
  int v63;
  __int16 v64;
  int v65;
  int v66;
  int v67;
  uint64_t UnitData;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v78;
  __int16 v79;
  _BYTE *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unsigned int v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int16 v100;

  v3 = a1;
  v94 = *(_QWORD *)(a2 + 136);
  v95 = v94 != 0;
  v4 = *(_WORD *)(a2 + 32) - 2;
  *(_WORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 48) += 4;
  *(_WORD *)(a2 + 56) -= 4;
  if (!v4)
    goto LABEL_11;
  v5 = 0;
  v6 = v4;
  do
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v5) = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v5 + 4);
    *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v5 + 8);
    ++v5;
  }
  while (v4 != v5);
  if (v4 < 2u)
  {
LABEL_11:
    *(_WORD *)(a2 + 32) = 0;
    v11 = *(_QWORD *)(a2 + 112);
    goto LABEL_12;
  }
  LOWORD(v7) = v4;
  if (!a1)
  {
    v98 = 0uLL;
    v97 = 0uLL;
    UnitData = Lookup_GetUnitData(***(_QWORD ****)(a2 + 40), **(_DWORD **)(a2 + 24), (uint64_t)&v98);
    if ((UnitData & 0x80000000) != 0)
      return UnitData;
    if (*(_WORD *)(a2 + 32))
    {
      v70 = v3;
      v71 = 0;
      v72 = 0;
      v7 = 1;
      v4 = 1;
      while (1)
      {
        v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * (v71 + 1)), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * (v71 + 1)), (uint64_t)&v97);
        if ((v8 & 0x80000000) != 0)
          return v8;
        v73 = *(unsigned __int16 *)(a2 + 32);
        if (v71 >= v73)
        {
          ++v71;
        }
        else
        {
          v74 = v71 + 2;
          v75 = 8 * v71 + 8;
          do
          {
            if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + v75 - 8) != *(_QWORD *)(*(_QWORD *)(a2 + 40) + v75))
              break;
            v76 = *(_BYTE *)(*(_QWORD *)(a2 + 64) + v72) != 35 && *(_WORD *)(*(_QWORD *)(a2 + 96) + 2 * v72) == 0;
            if (!v76 || BYTE12(v98) != 0)
              break;
            if ((int)cstdlib_abs((DWORD1(v97) - (DWORD1(v98) + DWORD2(v98)))) > 3)
              break;
            ++v71;
            v72 = (v71 & 1) + (v71 >> 1);
            v98 = v97;
            ++v7;
            v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * v74), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v74), (uint64_t)&v97);
            v78 = v74++ - 1;
            v75 += 8;
          }
          while (v78 < *(unsigned __int16 *)(a2 + 32));
          if ((v8 & 0x80000000) != 0)
            return v8;
          v73 = *(unsigned __int16 *)(a2 + 32);
          ++v71;
        }
        v72 = (v71 & 1) + (v71 >> 1);
        v98 = v97;
        ++v7;
        ++v4;
        if (v71 >= v73)
          goto LABEL_138;
      }
    }
    v70 = v3;
    v4 = 1;
    LOWORD(v7) = 1;
LABEL_138:
    v6 = v4;
    v3 = v70;
  }
  v8 = 2164269066;
  if (!v94)
    LOWORD(v7) = 1;
  v9 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a2 + 8), v6, 56);
  *(_QWORD *)(a2 + 128) = v9;
  if (v9)
  {
    *(_WORD *)(a2 + 120) = v4;
    v10 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a2 + 8), (unsigned __int16)v7, 16);
    *(_QWORD *)(a2 + 112) = v10;
    if (v10)
    {
      v11 = v10;
      *(_WORD *)(a2 + 106) = v7;
LABEL_12:
      v100 = 0;
      v12 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)&v98 = v12;
      *((_QWORD *)&v98 + 1) = v11;
      *(_DWORD *)(v12 + 44) = 0;
      if (v3)
      {
        v13 = *(unsigned __int16 *)(a2 + 32);
        if (*(_WORD *)(a2 + 32))
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = *(_QWORD *)(a2 + 24);
          v18 = *(_QWORD *)(a2 + 40);
          v19 = *(_QWORD *)(a2 + 64);
          v20 = (_BYTE *)(v11 + 12);
          v21 = (unsigned __int16 *)(*(_QWORD *)(a2 + 48) + 2);
          while (1)
          {
            v22 = (v15 >> 1) + (unint64_t)(v15 & 1);
            v23 = v12 + v14;
            *(_DWORD *)v23 = *(_DWORD *)(v17 + 4 * v15);
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(v18 + 8 * v15);
            *(_DWORD *)(v23 + 16) = *(v21 - 1);
            *(_DWORD *)(v23 + 20) = *v21;
            *(_WORD *)(v23 + 44) = v15;
            if (v14)
            {
              if ((v15 & 1) == 0)
                break;
            }
            v27 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 2 * v22);
            *(_DWORD *)(v23 + 40) = v27;
            v26 = (_DWORD *)(v23 + 40);
            v24 = (_BYTE *)(v19 + v22);
            v28 = *(unsigned __int8 *)(v19 + v22);
            if (v28 == 35)
            {
              if (!v27)
                goto LABEL_22;
              LOBYTE(v28) = 35;
            }
LABEL_23:
            *v20 = v28;
            *((_WORD *)v20 - 2) = v16;
            if ((v15 & 1) != 0 || !(_DWORD)v22)
            {
LABEL_27:
              v29 = *(_WORD *)(*(_QWORD *)(a2 + 80) + 2 * v22);
              goto LABEL_28;
            }
LABEL_25:
            v29 = 0;
LABEL_28:
            v21 += 2;
            *((_WORD *)v20 - 1) = v29;
            v16 += v29;
            ++v15;
            v14 += 56;
            v20 += 16;
            if (56 * v13 == v14)
              goto LABEL_29;
          }
          *(_DWORD *)(v12 + v14 + 40) = 0;
          v24 = (_BYTE *)(v19 + v22);
          v25 = *(unsigned __int8 *)(v19 + v22);
          if (v25 != 35)
          {
            *v20 = v25;
            *((_WORD *)v20 - 2) = v16;
            if (!(_DWORD)v22)
              goto LABEL_27;
            goto LABEL_25;
          }
          v26 = (_DWORD *)(v12 + 56 * v15 + 40);
LABEL_22:
          *v26 = 1;
          LOBYTE(v28) = *v24;
          goto LABEL_23;
        }
LABEL_29:
        v8 = 0;
        *(_WORD *)(a2 + 120) = v13;
        *(_WORD *)(a2 + 106) = v13;
        goto LABEL_30;
      }
      v97 = 0uLL;
      v96 = 0uLL;
      v8 = Lookup_GetUnitData(***(_QWORD ****)(a2 + 40), **(_DWORD **)(a2 + 24), (uint64_t)&v97);
      if ((v8 & 0x80000000) != 0)
        return v8;
      if (**(_BYTE **)(a2 + 64) == 35)
      {
        v51 = DWORD2(v97);
        if (DWORD2(v97) >= 0x16)
          v51 = 22;
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v52 = v51;
        else
          v52 = 1;
        DWORD2(v97) = v52;
      }
      v99 = 1;
      FillUnit((_QWORD *)a2, v12, 0, 0, (uint64_t)&v97, 0, v95);
      FillSubunit(a2, (uint64_t)&v98, v12, 0, 0, (uint64_t)&v97, &v100, v95);
      v90 = v11;
      if (!*(_WORD *)(a2 + 32))
      {
        v54 = 0;
        LOWORD(v53) = 0;
        LOWORD(v13) = 1;
        goto LABEL_117;
      }
      v93 = 0;
      v53 = 0;
      v54 = 0;
      LODWORD(v55) = 0;
      LODWORD(v13) = 1;
      v91 = v12;
      while (1)
      {
        v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * ((int)v55 + 1)), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * ((int)v55 + 1)), (uint64_t)&v96);
        if ((int)v55 >= *(unsigned __int16 *)(a2 + 32))
          goto LABEL_84;
        v92 = v13;
        v56 = v12 + 56 * v93;
        v57 = (_BYTE *)(v56 + 48);
        v58 = (_WORD *)(v56 + 46);
        v59 = (int)v55;
        while (1)
        {
          v55 = v59;
          v60 = *(_BYTE *)(*(_QWORD *)(a2 + 64) + v54) != 35 && *(_WORD *)(*(_QWORD *)(a2 + 96) + 2 * v54) == 0;
          v61 = v60 && BYTE12(v97) == 0;
          if (!v61 || (int)cstdlib_abs((DWORD1(v96) - (DWORD1(v97) + DWORD2(v97)))) > 3)
            break;
          ++v59;
          if (v55 + 1 >= *(unsigned __int16 *)(a2 + 32))
            goto LABEL_82;
          v54 = (v59 & 1) + ((int)v59 >> 1);
          v97 = v96;
          *(_DWORD *)(v56 + 32) += DWORD2(v96);
          if ((v59 & 1) == 0)
          {
            v62 = *v57 & 0xF | 0x20;
LABEL_78:
            *v57 = v62;
            goto LABEL_79;
          }
          v63 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 2 * v54);
          v62 = *v57 & 0xF;
          *v57 = v62 | 0x20;
          if (v63)
            goto LABEL_78;
          if (*(_BYTE *)(*(_QWORD *)(a2 + 88) + v54) == 80)
          {
            v62 |= 0x40u;
            goto LABEL_78;
          }
LABEL_79:
          v64 = v94;
          if (v94)
            v64 = *v58 + 1;
          *v58 = v64;
          FillSubunit(a2, (uint64_t)&v98, v56, v55 + 1, (v59 & 1) + ((int)v59 >> 1), (uint64_t)&v97, &v100, v95);
          v8 = Lookup_GetUnitData(**(_QWORD ***)(*(_QWORD *)(a2 + 40) + 8 * v55 + 16), *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v55 + 8), (uint64_t)&v96);
          ++v53;
          if (v59 >= *(unsigned __int16 *)(a2 + 32))
          {
LABEL_82:
            LODWORD(v55) = v55 + 1;
            break;
          }
        }
        v12 = v91;
        LODWORD(v13) = v92;
LABEL_84:
        if ((v8 & 0x80000000) != 0)
          return v8;
        v65 = v55 + 1;
        v66 = *(unsigned __int16 *)(a2 + 32);
        if ((int)v55 + 1 < v66)
        {
          v54 = (v65 & 1) + (v65 >> 1);
          v97 = v96;
          v67 = v66 - 2;
          if (*(_BYTE *)(*(_QWORD *)(a2 + 64) + v54) == 35 && (_DWORD)v55 == v67)
            DWORD2(v97) = 4;
          ++v53;
          ++v93;
          FillUnit((_QWORD *)a2, v12 + 56 * v93, v55 + 1, (v65 & 1) + (v65 >> 1), (uint64_t)&v97, v53, v95);
          LODWORD(v13) = v13 + 1;
          LOWORD(v99) = v13;
          FillSubunit(a2, (uint64_t)&v98, v12 + 56 * v93, v55 + 1, (v65 & 1) + (v65 >> 1), (uint64_t)&v97, &v100, v95);
          LODWORD(v55) = v55 + 1;
          if (v65 < *(unsigned __int16 *)(a2 + 32))
            continue;
        }
LABEL_117:
        if (v94)
          v79 = v53 + 1;
        else
          v79 = 0;
        *(_WORD *)(a2 + 120) = v13;
        *(_WORD *)(a2 + 106) = v79;
        v80 = *(_BYTE **)(a2 + 64);
        v3 = 0;
        if (*v80 == 35)
        {
          *(_BYTE *)(v12 + 48) = 68;
          *(_BYTE *)(v12 + 104) = *(_BYTE *)(v12 + 104) & 0xF0 | 4;
        }
        if (v80[v54] == 35)
        {
          v81 = v12 + 56 * (unsigned __int16)v13;
          *(_BYTE *)(v81 - 64) = *(_BYTE *)(v81 - 64) & 0xF | 0x40;
          *(_BYTE *)(v81 - 8) = 68;
        }
        if ((unsigned __int16)v13 < 3u)
        {
LABEL_30:
          if (!v3 && (v8 & 0x80000000) == 0 && v94)
          {
            v30 = *(_BYTE *)(a2 + 16);
            if ((v30 & 1) == 0)
            {
              v31 = *(_QWORD *)(a2 + 128);
              v32 = *(_QWORD *)(a2 + 112) + 16 * *(unsigned __int16 *)(v31 + 44);
              if (*(_BYTE *)(v32 + 12) == 35)
              {
                *(_BYTE *)(v31 + 48) = *(_BYTE *)(v31 + 48) & 0xF0 | 1;
                v33 = *(_DWORD *)(v31 + 40);
                v34 = *(_DWORD *)(v31 + 32);
                v37 = *(_DWORD *)(v32 + 4);
                v35 = (int *)(v32 + 4);
                v36 = v37;
                v38 = 10 * v33;
                v39 = v33 > 0;
                v40 = v37 > 50;
                v41 = v38 - v37;
                if (v38 >= v37)
                  v42 = v36;
                else
                  v42 = v38;
                if (v38 <= v36)
                  v41 = 15;
                v43 = !v39 || !v40;
                if (v39 && v40)
                  v44 = v42;
                else
                  v44 = v36;
                if (!v43)
                  v38 = v41;
                v45 = v38 / 10;
                v46 = v36 - v44;
                v47 = __OFSUB__(v34, v46);
                v48 = v34 - v46;
                if (v48 < 0 == v47)
                {
                  *v35 = v44;
                  *(_DWORD *)(v31 + 28) += v46;
                  *(_DWORD *)(v31 + 32) = v48;
                }
                *(_DWORD *)(v31 + 40) = v45;
              }
            }
            if ((v30 & 4) == 0)
            {
              v49 = *(_QWORD *)(a2 + 128);
              v50 = (unsigned __int16)v13 - 1;
              if (*(_BYTE *)(*(_QWORD *)(a2 + 112)
                            + 16
                            * (*(unsigned __int16 *)(v49 + 56 * v50 + 44)
                             + (unint64_t)*(unsigned __int16 *)(v49 + 56 * v50 + 46))
                            - 4) == 35)
                *(_BYTE *)(v49 + 56 * v50 + 48) = *(_BYTE *)(v49 + 56 * v50 + 48) & 0xF | 0x10;
            }
          }
          return v8;
        }
        v82 = (char *)(v12 + 104);
        v83 = 1;
        while (2)
        {
          v84 = *v82;
          if ((v84 & 0xF) == 0 && *((_WORD *)v82 - 1) == 1)
          {
            v85 = 65;
            v86 = 4;
            v87 = -16;
            v88 = 1;
            goto LABEL_132;
          }
          if (v84 <= 0xF && *((_WORD *)v82 - 1) == 1)
          {
            v85 = 20;
            v86 = 64;
            v87 = 15;
            v88 = -1;
LABEL_132:
            *((_DWORD *)v82 - 4) = 3;
            *(_DWORD *)(v90 + 16 * *((unsigned __int16 *)v82 - 2) + 4) = 3;
            *(_BYTE *)(v12 + 56 * (v83 + v88) + 48) = *(_BYTE *)(v12 + 56 * (v83 + v88) + 48) & v87 | v86;
            *v82 = v85;
          }
          ++v83;
          v82 += 56;
          if ((unsigned __int16)v13 - 1 == v83)
            goto LABEL_30;
          continue;
        }
      }
    }
  }
  return v8;
}

_QWORD *FillUnit(_QWORD *result, uint64_t a2, int a3, int a4, uint64_t a5, __int16 a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  char v10;

  *(_DWORD *)a2 = *(_DWORD *)a5;
  v7 = result[6];
  v8 = *(unsigned __int16 *)(v7 + 4 * a3);
  LODWORD(v7) = *(unsigned __int16 *)(v7 + 2 * ((2 * a3) | 1));
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[5] + 8 * a3);
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v7;
  *(_QWORD *)(a2 + 28) = *(_QWORD *)(a5 + 4);
  *(_DWORD *)(a2 + 36) = 0;
  v9 = *(unsigned __int16 *)(result[12] + 2 * a4);
  *(_BYTE *)(a2 + 48) = 34;
  if ((a3 & 1) != 0)
  {
    *(_DWORD *)(a2 + 40) = 0;
    if (v9)
    {
      v10 = 2;
    }
    else
    {
      if (*(_BYTE *)(result[11] + a4) != 80)
        goto LABEL_11;
      v10 = 66;
    }
  }
  else if (v9)
  {
    *(_DWORD *)(a2 + 40) = v9;
    v10 = 32;
  }
  else
  {
    *(_DWORD *)(a2 + 40) = 0;
    if (*(_BYTE *)(result[11] + a4) != 80)
      goto LABEL_11;
    v10 = 36;
  }
  *(_BYTE *)(a2 + 48) = v10;
LABEL_11:
  if (a7 != 1)
    a6 = 0;
  *(_WORD *)(a2 + 46) = a7 == 1;
  *(_WORD *)(a2 + 44) = a6;
  return result;
}

uint64_t FillSubunit(uint64_t result, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, _WORD *a7, int a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;

  if (!a8)
  {
    *(_DWORD *)(a3 + 44) = 0;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned __int16 *)(a3 + 44) + (unint64_t)*(unsigned __int16 *)(a3 + 46) - 1;
  v10 = v8 + 16 * v9;
  *(_BYTE *)(v10 + 12) = *(_BYTE *)(*(_QWORD *)(result + 64) + a5);
  v11 = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(v10 + 4) = v11;
  if (*(_WORD *)(a2 + 16) == 1)
  {
    if ((a4 & 1) == 0)
    {
      v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 46);
      *(_DWORD *)v10 = 0;
      *(_WORD *)(v8 + 16 * v9 + 8) = *a7;
      if (!a5 && v12 == 1)
      {
        v13 = **(_WORD **)(result + 80);
        *(_WORD *)(v8 + 16 * v9 + 10) = v13;
LABEL_30:
        *a7 += v13;
        return result;
      }
LABEL_10:
      *(_WORD *)(v8 + 16 * v9 + 10) = 0;
      return result;
    }
  }
  else if ((a4 & 1) == 0)
  {
    *(_DWORD *)v10 = 0;
    *(_WORD *)(v8 + 16 * v9 + 8) = *a7;
    goto LABEL_10;
  }
  v14 = *(unsigned __int16 *)(result + 72) - 1;
  *(_DWORD *)v10 = 0;
  v15 = v8 + 16 * v9;
  *(_WORD *)(v15 + 8) = *a7;
  if (v14 != a5)
  {
    v13 = *(_WORD *)(*(_QWORD *)(result + 80) + 2 * a5);
    *(_WORD *)(v15 + 10) = v13;
    goto LABEL_30;
  }
  v16 = *(_BYTE *)(result + 16) & 4;
  v17 = *(_WORD *)(*(_QWORD *)(result + 80) + 2 * a5);
  *(_WORD *)(v15 + 10) = v17;
  *a7 += v17;
  v18 = *(unsigned __int16 *)(*(_QWORD *)(result + 96) + 2 * a5);
  if (!*(_WORD *)(*(_QWORD *)(result + 96) + 2 * a5) || !*(_WORD *)(a3 + 46))
  {
    v28 = (v16 << 14) | 0x20000;
LABEL_33:
    *(_DWORD *)v10 = v28;
    return result;
  }
  if (v16)
  {
    v28 = v18 | 0x30000;
    goto LABEL_33;
  }
  v19 = 10 * v18;
  if (v19 >= v11)
    v20 = v11;
  else
    v20 = v19;
  if (v19 <= v11)
    v21 = 15;
  else
    v21 = v19 - v11;
  if (v11 <= 50)
    v22 = v11;
  else
    v22 = v20;
  if (v11 > 50)
    v19 = v21;
  v23 = v19 / 10;
  v24 = v11 - v22;
  v25 = *(_DWORD *)(a3 + 32);
  v26 = __OFSUB__(v25, v24);
  v27 = v25 - v24;
  if (v27 < 0 == v26)
  {
    *(_DWORD *)(v10 + 4) = v22;
    *(_DWORD *)(a3 + 32) = v27;
  }
  *(_DWORD *)v10 = 0x20000;
  *(_WORD *)(result + 104) = v23;
  return result;
}

uint64_t synth_Wsola__Wsola(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 1088);
  *(_DWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 36) = 0;
  *(_QWORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 44) = 0;
  v3 = *(_DWORD *)(a1 + 1040);
  if (v3 > 15999)
  {
    if (v3 == 16000)
    {
      v4 = 160;
    }
    else
    {
      if (v3 != 22050)
        goto LABEL_8;
      v4 = 220;
    }
    *(_DWORD *)v2 = v4;
    v5 = 4;
    goto LABEL_13;
  }
  if (v3 == 8000)
  {
    v4 = 80;
    goto LABEL_10;
  }
  if (v3 != 11025)
  {
LABEL_8:
    v4 = *(_DWORD *)v2;
    goto LABEL_14;
  }
  v4 = 112;
LABEL_10:
  *(_DWORD *)v2 = v4;
  v5 = 2;
LABEL_13:
  *(_DWORD *)(v2 + 16) = v5;
LABEL_14:
  *(_DWORD *)(v2 + 4) = v4 >> 1;
  *(_DWORD *)(v2 + 8) = 2 * v4;
  *(_DWORD *)(v2 + 12) = 3 * v4;
  *(_QWORD *)(v2 + 64) = v2 + 112;
  *(_QWORD *)(v2 + 72) = v2 + 128;
  *(_QWORD *)(v2 + 48) = v2 + 80;
  *(_QWORD *)(v2 + 56) = v2 + 96;
  Wsola__OverlapWindow__Init(v2, v3);
  v6 = *(_QWORD *)(a1 + 1088);
  v7 = *(_DWORD *)(a1 + 1040);
  if (v7 > 15999)
  {
    if (v7 == 16000)
    {
      v8 = 216;
      *(_DWORD *)(v6 + 184) = 216;
      *(_DWORD *)(v6 + 196) = 188;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000020;
      v9 = 6;
      goto LABEL_24;
    }
    if (v7 == 22050)
    {
      v8 = 298;
      *(_DWORD *)(v6 + 184) = 298;
      *(_DWORD *)(v6 + 196) = 260;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x50000002CLL;
      v9 = 8;
      goto LABEL_24;
    }
  }
  else
  {
    if (v7 == 8000)
    {
      v8 = 108;
      *(_DWORD *)(v6 + 184) = 108;
      *(_DWORD *)(v6 + 196) = 94;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000010;
      v9 = 2;
      goto LABEL_24;
    }
    if (v7 == 11025)
    {
      v8 = 149;
      *(_DWORD *)(v6 + 184) = 149;
      *(_DWORD *)(v6 + 196) = 130;
      *(_DWORD *)(v6 + 208) = *(_DWORD *)v6;
      *(_QWORD *)(v6 + 212) = 0x500000016;
      v9 = 4;
LABEL_24:
      *(_DWORD *)(v6 + 220) = v9;
      goto LABEL_25;
    }
  }
  v8 = *(_DWORD *)(v6 + 184);
LABEL_25:
  *(_DWORD *)(v6 + 180) = 1;
  *(_DWORD *)(v6 + 188) = v8 >> 1;
  *(_DWORD *)(v6 + 192) = v8;
  v10 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 200) = v10;
  *(_DWORD *)(v6 + 204) = v10 >> 1;
  *(_DWORD *)(v2 + 224) = 0;
  return 0;
}

void synth_doWsolaSynthesis(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[100];
  _BYTE v24[100];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1088);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  Psola_GetSynthMode(a1, (_DWORD *)&v22 + 1, v24, v23, &v22, (_DWORD *)&v21 + 1, &v21, &v20);
  Synth_LinkMsgLayers(a1);
  if ((v3 & 0x80000000) == 0 && (synthfx_ExtractFeaturesForSynth_Demi(SHIDWORD(v22) > 0, a1 + 512) & 0x80000000) == 0)
  {
    if ((Synth_Reset(a1) & 0x80000000) == 0
      && (Synth__InitForProcessing(a1) & 0x80000000) == 0
      && (InOut__GetClientBuffer(a1, v4, v5, v6, v7, v8, v9, v10) & 0x80000000) == 0
      && !InOut__IsEndState(a1)
      && *(_DWORD *)(a1 + 1024))
    {
      *(_DWORD *)(v2 + 144) = 0;
      if (SHIDWORD(v22) < 2)
      {
        if (HIDWORD(v22) == 1)
        {
          v17 = v22;
          if ((int)v22 >= 1)
          {
            v17 = 10 * v22;
            LODWORD(v22) = 10 * v22;
          }
          v18 = HIDWORD(v21);
          if (SHIDWORD(v21) >= 1)
          {
            v18 = 10 * HIDWORD(v21);
            HIDWORD(v21) *= 10;
          }
          v19 = v21;
          if ((int)v21 >= 1)
          {
            v19 = 10 * v21;
            LODWORD(v21) = 10 * v21;
          }
          Psola_Process(a1, v17, v18, v19);
        }
        else
        {
          Wsola__Process(a1, HIDWORD(v22), v11, v12, v13, v14, v15, v16);
        }
      }
      else
      {
        Psola_DoSpecTreatment();
      }
    }
    Synth_UnlinkMsgLayers((_QWORD *)a1);
  }
}

uint64_t Convert2Samples(uint64_t a1, unsigned int a2)
{
  return TenthOfMsToSamples(*(_DWORD *)(a1 + 1040), a2);
}

uint64_t Convert2SamplesX(uint64_t a1, int a2)
{
  return TenthOfMsToSamples(*(_DWORD *)(a1 + 1040), 10 * a2);
}

uint64_t synth_SetWaitPeriod(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 > 9)
    return 2164269071;
  result = 0;
  *(_WORD *)(a1 + 1044) = a2;
  v4 = 1717986919 * (int)(2 * a2 * *(_DWORD *)(a1 + 1040) + 5);
  *(_DWORD *)(a1 + 1048) = (v4 >> 34) + ((unint64_t)v4 >> 63);
  return result;
}

uint64_t synth_GetWaitPeriod(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 1044);
  return 0;
}

uint64_t synth_SetRate(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 1052) = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1056), a2);
  return 0;
}

uint64_t synth_GetRate(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 1052);
  return 0;
}

uint64_t synth_GetPitch(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 1054);
  return 0;
}

uint64_t synth_SetPitch(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 1054) = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1060), a2);
  return 0;
}

uint64_t synth_SetRateBaseline(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;

  if (a2 <= 0x32)
    v2 = 50;
  else
    v2 = a2;
  if (v2 >= 0x190)
    v3 = 400;
  else
    v3 = v2;
  *(_DWORD *)(a1 + 1056) = v3;
  *(_WORD *)(a1 + 1052) = MapProsodyValue_Scaling(50, 100, 400, v3, 100);
  return 0;
}

uint64_t synth_GetRateBaseline(uint64_t a1, _WORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 1056);
  return 0;
}

uint64_t synth_GetPitchBaseline(uint64_t a1, _WORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 1060);
  return 0;
}

uint64_t synth_SetPitchBaseline(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;

  if (a2 >= 0xC8)
    v2 = 200;
  else
    v2 = a2;
  if (v2 <= 0x32)
    v3 = 50;
  else
    v3 = v2;
  *(_DWORD *)(a1 + 1060) = v3;
  *(_WORD *)(a1 + 1054) = MapProsodyValue_Scaling(50, 100, 200, v3, 100);
  return 0;
}

uint64_t CheckForVFStateTriggers(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  char *__s;

  if (*a2 != 25)
    return 0;
  __s = 0;
  v10 = 0;
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", &__s);
  paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v10);
  result = 0;
  if (v10 != 1)
  {
    if ((paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", a2[6]) & 0x80000000) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v6 = __s;
      v7 = cstdlib_strlen(__s);
      paramc_ParamRipple(v5, (uint64_t)"waitfactor", v6, (v7 + 1));
    }
    paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
    v8 = a2[6];
    if ((unsigned __int16)v8 <= 9u)
    {
      result = 0;
      *(_WORD *)(a1 + 1044) = v8;
      v9 = 1717986919 * (*(_DWORD *)(a1 + 1040) * 2 * (unsigned __int16)v8 + 5);
      *(_DWORD *)(a1 + 1048) = (v9 >> 34) + ((unint64_t)v9 >> 63);
    }
    else
    {
      return 2164269071;
    }
  }
  return result;
}

uint64_t synth_ProcessMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  v8 = *(unsigned __int16 *)(a1 + 1082);
  if (v8 < *(unsigned __int16 *)(a1 + 1080))
  {
    v10 = 32 * v8;
    do
    {
      if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 648);
        v12 = *(_DWORD *)(v11 + v10);
        if (v12 == 16)
        {
          if (*(_DWORD *)(v11 + v10 + 24) != 100)
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45002, (uint64_t)"%s%u", a5, a6, a7, a8, "pitch");
        }
        else if (v12 == 13)
        {
          result = synth_ResetParams(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
      result = CheckForVFStateTriggers(a1, (_DWORD *)(*(_QWORD *)(a1 + 648) + v10));
      if ((result & 0x80000000) != 0)
        return result;
      ++v8;
      v10 += 32;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 1080));
  }
  return 0;
}

uint64_t synth_splitGID(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 928);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(_DWORD *)(a1 + 928);
  v7 = (v6 - 1);
  v8 = 64;
  while (v7 != v4)
  {
    ++v4;
    v9 = *(_QWORD *)(a1 + 936);
    v10 = *(_DWORD *)(v9 + v8);
    v8 += 40;
    if (v10 > a2)
    {
      v7 = v4 - 1;
LABEL_10:
      v11 = 5 * v7;
      *a3 = v9 + 8 * v11;
      v12 = a2 - *(_DWORD *)(*(_QWORD *)(a1 + 936) + 8 * v11 + 24);
      goto LABEL_12;
    }
  }
  if (v5)
  {
    v9 = *(_QWORD *)(a1 + 936);
    goto LABEL_10;
  }
  v12 = 0;
  *a3 = 0;
LABEL_12:
  *a4 = v12;
  return 0;
}

uint64_t InOut__ResetOutputState(uint64_t a1)
{
  *(_DWORD *)(a1 + 1072) = 0;
  return 0;
}

BOOL InOut__IsEndState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1072) == 2;
}

uint64_t InOut__PutVectorInBuffer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;

  if ((int)a4 < 1)
  {
    a4 = 0;
    v4 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(_DWORD **)(v4 + 8);
    v6 = a4;
    v7 = (int *)(*(_QWORD *)(a2 + 8) + 4 * a3);
    do
    {
      v8 = *v7++;
      *v5++ = v8;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v4 + 4) = a4;
  return a4;
}

uint64_t InOut__GetClientBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(_QWORD *)(a1 + 1008);
  if (v8)
  {
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 1000) + 56);
  }
  else
  {
    v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 984) + 56);
    v8 = *(_QWORD *)(a1 + 992);
  }
  return InOut__PutOutput(a1, v9, v8, *(_DWORD *)(a1 + 1076) == 0, a5, a6, a7, a8);
}

uint64_t InOut__PutOutput(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  _QWORD *v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;

  v11 = *(_DWORD *)(a1 + 1072);
  if (v11 == 1)
  {
    v15 = a4;
    result = synth_ProcessMarkers(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      return result;
    v16 = *(unsigned __int16 *)(a1 + 1080);
    v17 = *(unsigned __int16 *)(a1 + 1082);
    v18 = (v16 - v17);
    if (v16 == (_DWORD)v17)
      v19 = 0;
    else
      v19 = *(_QWORD *)(a1 + 648) + 32 * v17;
    *(_WORD *)(a1 + 1082) = v16;
    if (v15)
      v20 = 2;
    else
      v20 = 3;
    *(_BYTE *)(a1 + 1032) = v20;
    v21 = *(_DWORD *)(a1 + 1024);
    v22 = v21 != 0;
    v23 = v21 - 1;
    if (!v22)
      v23 = 0;
    if (v16 != (_DWORD)v17)
    {
      v24 = (unsigned int *)(v19 + 12);
      v25 = v18;
      do
      {
        if (*v24 > v23)
          *v24 = v23;
        v24 += 8;
        --v25;
      }
      while (v25);
    }
    result = a2(a3, v20, a1 + 1016, a1 + 1024, v19, v18);
    if ((result & 0x80000000) == 0 && *(_QWORD *)(a1 + 1016) && v15 && *(_DWORD *)(a1 + 1024))
    {
      *(_DWORD *)(a1 + 1084) += *(_DWORD *)(a1 + 1036);
      *(_DWORD *)(a1 + 1036) = 0;
      *(_DWORD *)(a1 + 1028) = 0;
      return result;
    }
    goto LABEL_27;
  }
  if (v11)
    return 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1036) = 0;
  v12 = (_QWORD *)(a1 + 1016);
  result = a2(a3, *(unsigned __int8 *)(a1 + 1032), a1 + 1016, a1 + 1024, 0, 0);
  if ((result & 0x80000000) != 0 || !*(_DWORD *)(a1 + 1024) || !*v12)
  {
LABEL_27:
    v14 = 2;
    goto LABEL_28;
  }
  v14 = 1;
LABEL_28:
  *(_DWORD *)(a1 + 1072) = v14;
  return result;
}

uint64_t InOut__DecodeToVector(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  __int16 *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;

  v5 = a3;
  if (a3 < 1)
  {
    result = 0;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a1 + 1088);
  v15 = a3;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 72) + 4);
  if (v8 < 1)
  {
    v9 = 0;
    if (v8)
      goto LABEL_4;
LABEL_7:
    result = Lookup_Decode(a2, &v15, *(_QWORD *)(v7 + 40) + 2 * v9);
    v5 = v15 + v9;
    if (v15 + v9 < 1)
      goto LABEL_10;
    goto LABEL_8;
  }
  purgeBufferToVector(v7, &v15, *(_WORD **)(v7 + 40));
  v9 = v15;
  v15 = v5 - v15;
  if (!*(_DWORD *)(*(_QWORD *)(v7 + 72) + 4))
    goto LABEL_7;
LABEL_4:
  result = 0;
LABEL_8:
  v11 = *(__int16 **)(v7 + 40);
  v12 = *(_DWORD **)(a4 + 8);
  v13 = v5;
  do
  {
    v14 = *v11++;
    *v12++ = v14;
    --v13;
  }
  while (v13);
LABEL_10:
  *(_DWORD *)(a4 + 4) = v5;
  return result;
}

uint64_t purgeBufferToVector(uint64_t result, _DWORD *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v3) = *a2;
  if ((int)*a2 < 1 || (v4 = *(_QWORD *)(result + 72), v5 = *(_DWORD *)(v4 + 4), v5 < 1))
  {
    LODWORD(v3) = 0;
  }
  else
  {
    if (v3 >= v5)
      v3 = v5;
    else
      v3 = v3;
    v6 = *(int **)(v4 + 8);
    v7 = v3;
    do
    {
      v8 = *v6++;
      *a3++ = v8;
      --v7;
    }
    while (v7);
    if ((int)v3 >= v5)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v9 = 0;
      v10 = *(_QWORD *)(v4 + 8);
      do
      {
        *(_DWORD *)(v10 + 4 * v9) = *(__int16 *)(v10 + 4 * v3 + 4 * v9);
        ++v9;
      }
      while (*(_DWORD *)(v4 + 4) > (int)v3 + (int)v9);
    }
    *(_DWORD *)(v4 + 4) = v9;
  }
  *a2 = v3;
  return result;
}

uint64_t InOut__AudioWriteToClient__No_Subunits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;

  if ((int)a3 < 1)
    return 0;
  v8 = a3;
  v11 = *(_QWORD *)(a1 + 1088);
  do
  {
    v12 = *(_DWORD *)(a1 + 1028);
    v13 = *(_DWORD *)(a1 + 1024);
    if (v12 >= v13)
    {
      result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
      if ((result & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
        return result;
      v13 = *(_DWORD *)(a1 + 1024);
      v12 = *(_DWORD *)(a1 + 1028);
    }
    v15 = v13 - v12;
    if (v8 >= (int)v15)
      v16 = v15;
    else
      v16 = v8;
    *(_DWORD *)(v11 + 144) += v16;
    result = synthDecodeToClient(a1, a2, v16, a4, a5, a6, a7, a8);
    if ((result & 0x80000000) != 0)
      break;
    v8 -= v16;
  }
  while (*(_DWORD *)(a1 + 1072) != 2 && v8 > 0);
  return result;
}

uint64_t synthDecodeToClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 1088);
  v12 = *(_DWORD *)(a1 + 1028);
  v13 = *(_DWORD *)(a1 + 1024);
  if (v12 < v13)
  {
    result = 0;
    goto LABEL_7;
  }
  result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0 && *(_DWORD *)(a1 + 1072) != 2)
  {
    v13 = *(_DWORD *)(a1 + 1024);
    v12 = *(_DWORD *)(a1 + 1028);
LABEL_7:
    v15 = v13 - v12;
    if (v15 >= v8)
      v16 = v8;
    else
      v16 = v15;
    v24 = v16;
    v17 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
    if (v17 >= 1)
    {
      purgeBufferToVector(v11, &v24, (_WORD *)(*(_QWORD *)(a1 + 1016) + 2 * v12));
      result = 0;
      v18 = v24;
      v12 = *(_DWORD *)(a1 + 1028) + v24;
      *(_DWORD *)(a1 + 1028) = v12;
      v24 = v16 - v18;
      v17 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
    }
    if (v17)
    {
      do
      {
LABEL_15:
        *(_DWORD *)(a1 + 1036) += v16;
        v8 -= v16;
        if (!v8)
          return result;
        result = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
        if ((result & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
          return result;
        v20 = *(unsigned int *)(a1 + 1028);
        if (*(_DWORD *)(a1 + 1024) - (int)v20 >= v8)
          v16 = v8;
        else
          v16 = *(_DWORD *)(a1 + 1024) - v20;
        v23 = v16;
        v21 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
        if (v21 >= 1)
        {
          purgeBufferToVector(v11, &v23, (_WORD *)(*(_QWORD *)(a1 + 1016) + 2 * v20));
          result = 0;
          v22 = v23;
          LODWORD(v20) = *(_DWORD *)(a1 + 1028) + v23;
          *(_DWORD *)(a1 + 1028) = v20;
          v23 = v16 - v22;
          v21 = *(_DWORD *)(*(_QWORD *)(v11 + 72) + 4);
        }
      }
      while (v21);
      result = Lookup_Decode(a2, &v23, *(_QWORD *)(a1 + 1016) + 2 * v20);
      v19 = v23;
    }
    else
    {
      result = Lookup_Decode(a2, &v24, *(_QWORD *)(a1 + 1016) + 2 * v12);
      v19 = v24;
    }
    *(_DWORD *)(a1 + 1028) += v19;
    goto LABEL_15;
  }
  return result;
}

uint64_t synth_LimitMarkersDestPos(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *v4;

  if (a3)
  {
    v3 = a3;
    v4 = (_DWORD *)(a2 + 12);
    do
    {
      if (*v4 > result)
        *v4 = result;
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t InOut__AudioWriteToClientWithMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ClientBuffer;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v46;
  int v47;

  if ((int)a3 < 1)
  {
    return 0;
  }
  else
  {
    v8 = a4;
    v9 = a3;
    v10 = a2;
    v12 = *(_QWORD *)(a1 + 1088);
    if ((a2 & 0x80000000) != 0)
    {
      if (*(_WORD *)(a1 + 618))
      {
        v46 = 0;
        v47 = 0;
        goto LABEL_20;
      }
      v13 = 0;
    }
    else
    {
      v13 = **(_QWORD **)(*(_QWORD *)(v12 + 152) + 56 * a2 + 8);
      if (*(_WORD *)(a1 + 618))
      {
        v47 = 0;
        v46 = v13;
        if (Wsola__findNextEventInSubUnit(v12, a2, &v47)
          && *(_DWORD *)(*(_QWORD *)(v12 + 160)
                       + 16 * (v47 + *(unsigned __int16 *)(*(_QWORD *)(v12 + 152) + 56 * v10 + 44))) < *(_DWORD *)(v12 + 144))
        {
          do
          {
            v14 = *(_QWORD *)(v12 + 152);
            if (v47 >= *(unsigned __int16 *)(v14 + 56 * v10 + 46))
              break;
            v15 = *(_QWORD *)(v12 + 160);
            v16 = v47 + *(unsigned __int16 *)(v14 + 56 * v10 + 44);
            if (*(_DWORD *)(v15 + 16 * v16) >= *(_DWORD *)(v12 + 144))
              break;
            v17 = v15 + 16 * v16;
            v18 = *(unsigned __int16 *)(v17 + 8);
            v19 = *(unsigned __int16 *)(v17 + 10);
            if (v19 + v18 > *(unsigned __int16 *)(a1 + 656))
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45000, (uint64_t)"%s%u%s%u%s%u", a5, a6, a7, a8, "index");
              v20 = *(unsigned __int16 *)(a1 + 656);
              if (v18 >= v20)
                v18 = *(unsigned __int16 *)(a1 + 656);
              LOWORD(v19) = v20 - v18;
              v14 = *(_QWORD *)(v12 + 152);
              v15 = *(_QWORD *)(v12 + 160);
            }
            v21 = *(unsigned __int16 *)(v14 + 56 * v10 + 44);
            if ((_WORD)v19)
            {
              v22 = *(_DWORD *)(a1 + 1084);
              v23 = (unsigned __int16)v19;
              v24 = *(_QWORD *)(a1 + 648) + 32 * v18 + 16;
              do
              {
                *(_QWORD *)(v24 - 4) = (*(_DWORD *)(v15 + 16 * (v47 + v21)) - v22);
                v24 += 32;
                --v23;
              }
              while (v23);
            }
            *(_WORD *)(v15 + 16 * (v47 + v21) + 10) = 0;
            *(_WORD *)(a1 + 1080) = v19 + v18;
          }
          while (Wsola__findNextEventInSubUnit(v12, v10, &v47));
        }
        while (1)
        {
LABEL_20:
          v26 = *(_DWORD *)(a1 + 1028);
          v27 = *(_DWORD *)(a1 + 1024);
          if (v26 >= v27)
          {
            ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
            if ((ClientBuffer & 0x80000000) != 0 || *(_DWORD *)(a1 + 1072) == 2)
              return ClientBuffer;
            v27 = *(_DWORD *)(a1 + 1024);
            v26 = *(_DWORD *)(a1 + 1028);
          }
          v28 = v27 - v26;
          if (v9 >= v28)
            v29 = v28;
          else
            v29 = v9;
          *(_DWORD *)(v12 + 144) += v29;
          if (v9 <= v28)
            v30 = 1;
          else
            v30 = 2;
          if (v8 == 2)
            v8 = v30;
          if ((v10 & 0x80000000) == 0)
          {
            v31 = v47;
            v32 = *(_QWORD *)(v12 + 152);
            if (v47 < *(unsigned __int16 *)(v32 + 56 * v10 + 46))
              break;
          }
LABEL_55:
          ClientBuffer = synthDecodeToClient(a1, v46, v29, a4, a5, a6, a7, a8);
          if ((ClientBuffer & 0x80000000) == 0 && *(_DWORD *)(a1 + 1072) != 2)
          {
            v9 -= v29;
            if ((v10 & 0x80000000) == 0 && v9 >= 1)
              Wsola__findNextEventInSubUnit(v12, v10, &v47);
            if (v9 > 0)
              continue;
          }
          return ClientBuffer;
        }
        v33 = *(_QWORD *)(v12 + 160);
        while (1)
        {
          v34 = *(unsigned __int16 *)(v32 + 56 * v10 + 44);
          if (v8 == 1)
          {
            v35 = v31 + (int)v34;
            v36 = *(unsigned __int16 *)(v33 + 16 * v35 + 10);
            v37 = *(_DWORD *)(v12 + 144);
            if (*(_WORD *)(v33 + 16 * v35 + 10))
            {
              v38 = *(_DWORD *)(v33 + 16 * v35);
              goto LABEL_42;
            }
          }
          else
          {
            v37 = *(_DWORD *)(v12 + 144);
            v35 = v34 + v31;
          }
          v38 = *(_DWORD *)(v33 + 16 * v35);
          if (v38 <= v37)
          {
            v36 = *(unsigned __int16 *)(v33 + 16 * v35 + 10);
            if (*(_WORD *)(v33 + 16 * v35 + 10))
            {
              if (v8 == 1)
              {
LABEL_42:
                if (v38 < v37)
                  v37 = v38;
                *(_DWORD *)(v33 + 16 * v35) = v37;
              }
              v39 = *(unsigned __int16 *)(v33 + 16 * v35 + 8);
              if (v36 + v39 <= *(unsigned __int16 *)(a1 + 656))
                goto LABEL_49;
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45000, (uint64_t)"%s%u%s%u%s%u", a5, a6, a7, a8, "index");
              v40 = *(unsigned __int16 *)(a1 + 656);
              if (v39 >= v40)
                v39 = *(unsigned __int16 *)(a1 + 656);
              LOWORD(v36) = v40 - v39;
              v32 = *(_QWORD *)(v12 + 152);
              v33 = *(_QWORD *)(v12 + 160);
              if ((_WORD)v36)
              {
LABEL_49:
                v41 = *(unsigned __int16 *)(v32 + 56 * v10 + 44) + (uint64_t)v31;
                v42 = *(_DWORD *)(v33 + 16 * v41) - *(_DWORD *)(a1 + 1084);
                v43 = (unsigned __int16)v36;
                v44 = (_DWORD *)(*(_QWORD *)(a1 + 648) + 32 * v39 + 16);
                do
                {
                  *(v44 - 1) = v42;
                  *v44 = 0;
                  v44 += 8;
                  --v43;
                }
                while (v43);
              }
              else
              {
                LOWORD(v36) = 0;
                v41 = *(unsigned __int16 *)(v32 + 56 * v10 + 44) + (uint64_t)v31;
              }
              *(_WORD *)(v33 + 16 * v41 + 10) = 0;
              *(_WORD *)(a1 + 1080) = v36 + v39;
            }
          }
          if (++v31 >= *(unsigned __int16 *)(v32 + 56 * v10 + 46))
            goto LABEL_55;
        }
      }
    }
    return InOut__AudioWriteToClient__No_Subunits(a1, v13, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t InOut__InsertSilence(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  BOOL v22;

  v6 = *(_QWORD *)(a1 + 1088);
  v7 = **(_DWORD **)(v6 + 72);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = *(_DWORD *)v8;
  if (v7 >= *(_DWORD *)v8)
    v10 = *(_DWORD *)v8;
  else
    v10 = **(_DWORD **)(v6 + 72);
  Wsola__zero(*(_QWORD *)(v8 + 8), 0, v10);
  result = 0;
  if (a2 >= v10)
    v16 = v10;
  else
    v16 = a2;
  if (a2 >= 1 && (int)v16 >= 1)
  {
    do
    {
      if (v9 >= v7)
        LODWORD(v17) = v7;
      else
        LODWORD(v17) = v9;
      if ((int)v17 >= a2)
        v17 = a2;
      else
        v17 = v17;
      v18 = *(int **)(*(_QWORD *)(v6 + 48) + 8);
      v19 = *(_QWORD *)(v6 + 72);
      v20 = *(_DWORD **)(v19 + 8);
      do
      {
        v21 = *v18++;
        *v20++ = v21;
        --v17;
      }
      while (v17);
      *(_DWORD *)(v19 + 4) = v16;
      result = InOut__AudioWriteToClientWithMarkers(a1, a3, v16, 0, v11, v12, v13, v14);
      if ((result & 0x80000000) != 0)
        break;
      a2 -= v10;
      v16 = a2 >= v10 ? v10 : a2;
      v22 = *(_DWORD *)(a1 + 1072) == 2 || a2 < 1;
    }
    while (!v22 && (int)v16 > 0);
  }
  return result;
}

uint64_t Psola_OutputDataPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  unsigned int v12;
  unsigned int v13;
  uint64_t ClientBuffer;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 *v26;
  unsigned int v27;
  uint64_t v28;
  __int16 v29;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 1028);
  v13 = *(_DWORD *)(a1 + 1024);
  if (v12 >= v13)
  {
    ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    if (InOut__IsEndState(a1))
    {
LABEL_24:
      InOut__IsEndState(a1);
      return ClientBuffer;
    }
    v13 = *(_DWORD *)(a1 + 1024);
    v12 = *(_DWORD *)(a1 + 1028);
  }
  else
  {
    ClientBuffer = 0;
  }
  LODWORD(v15) = v13 - v12;
  if (v15 >= v8)
    v15 = v8;
  else
    v15 = v15;
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)(a1 + 1016);
    v17 = (__int16 *)(a2 + 2 * v9);
    v18 = v12;
    v19 = v15;
    do
    {
      v20 = *v17++;
      *(_WORD *)(v16 + 2 * v18++) = v20;
      --v19;
    }
    while (v19);
  }
  *(_DWORD *)(a1 + 1028) = v15 + v12;
  *(_DWORD *)(a1 + 1036) += v15;
  v21 = v8 - v15;
  if (!v21)
  {
LABEL_23:
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    goto LABEL_24;
  }
  v22 = v15 + v9;
  while (1)
  {
    ClientBuffer = InOut__GetClientBuffer(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((ClientBuffer & 0x80000000) != 0)
      return ClientBuffer;
    if (InOut__IsEndState(a1))
      goto LABEL_24;
    v23 = *(_DWORD *)(a1 + 1028);
    LODWORD(v24) = *(_DWORD *)(a1 + 1024) - v23;
    if (v24 >= v21)
      v24 = v21;
    else
      v24 = v24;
    if ((int)v24 >= 1)
    {
      v25 = *(_QWORD *)(a1 + 1016);
      v26 = (__int16 *)(a2 + 2 * v22);
      v27 = *(_DWORD *)(a1 + 1028);
      v28 = v24;
      do
      {
        v29 = *v26++;
        *(_WORD *)(v25 + 2 * v27++) = v29;
        --v28;
      }
      while (v28);
    }
    v22 += v24;
    *(_DWORD *)(a1 + 1028) = v24 + v23;
    *(_DWORD *)(a1 + 1036) += v24;
    v21 -= v24;
    if (!v21)
      goto LABEL_23;
  }
}

uint64_t Psola_GetDecodedUnitData_VE(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7, char *a8, unsigned int *a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v11;
  _QWORD *v17;
  uint64_t UnitData;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v11 = a7;
  v17 = (_QWORD *)*a2;
  if (*a2)
  {
    v32 = 0;
    v33 = 0;
    UnitData = Lookup_GetUnitData(v17, a3, (uint64_t)&v32);
    if ((UnitData & 0x80000000) == 0)
    {
      v19 = Convert2Samples(a1, HIDWORD(v32));
      if (a5 < 0)
        a5 = Convert2Samples(a1, v33);
      if (a6 + a4 + a5 > v11)
      {
        *a9 = 0;
        *a10 = 0;
        v20 = 2164269065;
        *a11 = 0;
        return v20;
      }
      if (v19 >= a4)
        v27 = a4;
      else
        v27 = v19;
      *a9 = v27;
      *a10 = a5;
      *a11 = a6;
      return Lookup_GetDecodedData(*a2, v19 - *a9, *a9 + a6 + *a10, a8);
    }
    return UnitData;
  }
  v21 = a2[1];
  if (!v21)
    return 0;
  LODWORD(v32) = a4;
  v30 = 0;
  v31 = a6 + 10;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *, unsigned int *, char *, uint64_t))(*(_QWORD *)(a1 + 952) + 48))(v21, a3, &v32, &v31, &v30, a8, a7);
  if ((v20 & 0x80000000) == 0)
  {
    v23 = v32;
    *a9 = v32;
    if (a5 < 0)
    {
      v26 = v31;
      *a10 = v30 - (v23 + v31);
    }
    else
    {
      if (a6 + a4 + a5 >= v11)
        v24 = v11;
      else
        v24 = a6 + a4 + a5;
      v25 = v30;
      if (v30 < v24)
      {
        bzero(&a8[2 * v30], 2 * (v24 + ~v30) + 2);
        v25 = v24;
      }
      *a10 = a5;
      v26 = v25 - a5 - v23;
    }
    *a11 = v26;
  }
  return v20;
}

uint64_t Psola_IsAdjacent(uint64_t a1, _QWORD **a2, signed int a3, _QWORD **a4, signed int a5, _DWORD *a6)
{
  BOOL v6;
  int v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  *a6 = 0;
  if (**(_QWORD **)(a1 + 936))
    v6 = a2 == a4;
  else
    v6 = 0;
  if (v6 && a3 >= 1 && a5 >= 1)
  {
    Lookup_GetUnitData(*a2, a3, (uint64_t)&v15);
    Lookup_GetUnitData(*a2, a5, (uint64_t)v14);
    v13 = cstdlib_abs((HIDWORD(v14[0]) - (HIDWORD(v15) + v16)));
    if (v13 <= 3)
      *a6 = 1;
  }
  return 0;
}

uint64_t Psola_Process(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t ClientBuffer;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  __int16 *v22;
  uint64_t UnitModif;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  int v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  int v59;
  int v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int16 *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75[4];

  ClientBuffer = 2164269066;
  v9 = *(_QWORD *)(a1 + 1088);
  v74 = 0;
  *(_QWORD *)v75 = 0;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v10 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4812);
  if (!v10)
    return ClientBuffer;
  v11 = (_DWORD *)v10;
  v12 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 48000);
  if (!v12)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v14 = 0;
    goto LABEL_50;
  }
  v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 48);
  v14 = (uint64_t *)v13;
  if (!v13)
    goto LABEL_48;
  *(_QWORD *)(v13 + 8) = 961;
  v15 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922);
  *v14 = v15;
  if (!v15
    || (v14[3] = 961, v16 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922), (v14[2] = v16) == 0)
    || (v14[5] = 961, v17 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 1922), (v14[4] = v17) == 0))
  {
LABEL_48:
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
    goto LABEL_50;
  }
  v18 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v18)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    goto LABEL_50;
  }
  v58 = a2;
  v19 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v19)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    v20 = 0;
    goto LABEL_50;
  }
  v56 = a3;
  v20 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60008);
  if (!v20)
  {
    v22 = 0;
    v68 = 0;
    v21 = 0;
    goto LABEL_50;
  }
  v59 = a4;
  v21 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006);
  if (!v21 || (v68 = (unsigned __int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006)) == 0)
  {
    v22 = 0;
    v68 = 0;
    goto LABEL_50;
  }
  v66 = v9;
  v22 = (__int16 *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 60006);
  if (!v22)
    goto LABEL_50;
  bzero(v11, 0x12CCuLL);
  *(_QWORD *)v18 = 0;
  *(_DWORD *)v21 = 0;
  v21[2] = 0;
  *(_QWORD *)v19 = 0;
  *(_DWORD *)v68 = 0;
  v68[2] = 0;
  UnitModif = Psola_SetUpCrossFading(a1, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 100, 100, v21, v68, &v74, (int *)&v73 + 1);
  if ((UnitModif & 0x80000000) != 0)
  {
LABEL_77:
    ClientBuffer = UnitModif;
    goto LABEL_50;
  }
  v64 = 0;
  v24 = 0;
  v57 = 0;
  v75[0] = 0;
  LODWORD(v25) = *(unsigned __int16 *)(v66 + 168);
  v60 = 1;
  v26 = -1;
  v27 = -1;
  do
  {
    v62 = v26;
    v63 = v27;
    v67 = v24;
    if (v24 >= v25)
    {
      v61 = 0;
      v65 = -1;
    }
    else
    {
      v28 = *(_QWORD *)(v66 + 152) + v64;
      v65 = *(_DWORD *)v28;
      v61 = *(uint64_t **)(v28 + 8);
      Psola_checkMarker(a1, v66, v24);
      v24 = v67;
      LOWORD(v25) = *(_WORD *)(v66 + 168);
    }
    if (v24 < (unsigned __int16)v25 && (Psola_SilUnitLen(a1, *(_QWORD *)(v66 + 152) + v64, v59) & 0x80000000) != 0)
    {
      if (!v61)
      {
        ClientBuffer = 2164269062;
        goto LABEL_50;
      }
      UnitModif = Pmk_Lookup_UnitPeriInfo((_QWORD *)v61[2], v65, (uint64_t)v20);
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
      Psola_AssignPeriRanges(v20);
      if (!v20[2])
      {
        v42 = v18;
        v43 = v21;
        v35 = v67;
        v26 = v62;
        v27 = v63;
        goto LABEL_41;
      }
      if (*(_DWORD *)(a1 + 1148) && (Psola_IsAdjacent(a1, (_QWORD **)v57, v63, (_QWORD **)v61, v65, &v70), v70))
      {
        Psola_SyncOverlappingPeriods(v19, v20);
        v41 = 1;
      }
      else
      {
        v41 = 100;
      }
      v55 = v41;
      UnitModif = Psola_CalculateModificationFactors(a1, *(_QWORD *)(v66 + 152) + v64, v58, v56, v59, (int *)&v72, (int *)&v71 + 1, &v71);
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
      UnitModif = Psola_GetUnitModif (a1, v65, v20, v72, SHIDWORD(v71), v71, v22, v44);
      v29 = v55;
      if ((UnitModif & 0x80000000) != 0)
        goto LABEL_77;
    }
    else
    {
      *(_QWORD *)v20 = 0;
      *(_DWORD *)v22 = 0;
      v29 = 100;
      v22[2] = 0;
    }
    UnitModif = Psola_SetUpCrossFading(a1, v63, v65, v29, v29, v68, (unsigned __int16 *)v22, &v73, (int *)&v72 + 1);
    if ((UnitModif & 0x80000000) != 0)
      goto LABEL_77;
    v35 = v67;
    if (v67 && (v62 & 0x80000000) == 0)
    {
      v36 = Psola_SilUnitLen(a1, *(_QWORD *)(v66 + 152) + 56 * v62, v59);
      if (v36 < 0 && *v19 == 0)
        v40 = 0;
      else
        v40 = v36;
      if (v40 < 0)
      {
        UnitModif = Psola_LoadUnitData(a1, v57, v63, v19, v12, &v75[1], (_DWORD *)&v74 + 1);
        if ((UnitModif & 0x80000000) != 0)
          goto LABEL_77;
        UnitModif = Psola_DoPeriSynth(a1, v63, v62, v11, (uint64_t)v14, &v69, (uint64_t)v12, HIDWORD(v74), (uint64_t)v19, v68, v74, SHIDWORD(v73), v73, SHIDWORD(v72), v75);
        v35 = v67;
        if ((UnitModif & 0x80000000) != 0)
          goto LABEL_77;
      }
      else
      {
        Psola_SynthSilence(a1, v63, v62, v11, v40, v75, v37, v38);
        v35 = v67;
      }
    }
    v60 = 3 - v60;
    v26 = v35;
    v42 = v19;
    v19 = v20;
    v43 = v68;
    v68 = (unsigned __int16 *)v22;
    v27 = v65;
    v57 = v61;
    HIDWORD(v73) = HIDWORD(v72);
    LODWORD(v74) = v73;
    v22 = (__int16 *)v21;
    v20 = v18;
    v21 = v43;
    v18 = v42;
LABEL_41:
    v24 = v35 + 1;
    v25 = *(unsigned __int16 *)(v66 + 168);
    v64 += 56;
  }
  while (v35 < v25);
  v21 = v43;
  v18 = v42;
  if (*(_BYTE *)(a1 + 1144))
  {
    v31 = (*(_DWORD *)(a1 + 1096) + *(_DWORD *)(a1 + 1048));
    if ((int)v31 >= 1)
      Psola_SynthSilence(a1, 0xFFFFFFFFLL, v25 - 1, v11, v31, v75, v33, v34);
  }
  Psola_FlushOlaBufPart(a1, v11, v11[2] + *v11, v30, v31, v32, v33, v34);
  *(_DWORD *)(a1 + 1076) = 1;
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a1 + 1028);
  ++*(_DWORD *)(v66 + 224);
  ClientBuffer = InOut__GetClientBuffer(a1, v48, v49, v50, v51, v52, v53, v54);
  if ((ClientBuffer & 0x80000000) == 0)
    InOut__IsEndState(a1);
LABEL_50:
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v11);
  if (v12)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v12);
  if (v14)
  {
    if (*v14)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *v14);
    v45 = v14[2];
    if (v45)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v45);
    v46 = v14[4];
    if (v46)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v46);
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v14);
  }
  if (v18)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v18);
  if (v19)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
  if (v20)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v20);
  if (v21)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  if (v68)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v68);
  if (v22)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v22);
  return ClientBuffer;
}

uint64_t Psola_SetUpCrossFading(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int16 *a6, unsigned __int16 *a7, _DWORD *a8, int *a9)
{
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned __int16 *v38;

  v9 = *(_DWORD *)(a1 + 1040);
  v10 = v9 * a4;
  v11 = 274877907 * v9 * a4;
  v12 = (unint64_t)v11 >> 63;
  v13 = v11 >> 38;
  v14 = v9 * a5 / 1000;
  v15 = a6[1] + *a6;
  *a9 = 0;
  v16 = a6[2];
  if (a6[2])
  {
    v17 = 0;
    v18 = 0;
    while (v18 < (unint64_t)a7[1] >> 1 && v17 < v14)
    {
      v17 += (__int16)a7[v18 + 20003 + *a7];
      a6[v15 + 20003 + v18] = a7[v18 + 20003 + *a7];
      *a9 = v17;
      if (v16 == ++v18)
        goto LABEL_9;
    }
    LOWORD(v16) = v18;
  }
LABEL_9:
  v20 = v13 + v12;
  a6[2] = v16;
  LODWORD(v16) = *a7;
  if (*a7)
  {
    v21 = 0;
    if (a6[1] && v10 >= 1000)
    {
      v22 = 0;
      v21 = 0;
      v23 = (uint64_t)&a6[v15 + 20002];
      v24 = 1;
      do
      {
        v25 = v22;
        v26 = *(__int16 *)(v23 + 2 * v22);
        a7[v25 + 20002 + v16] = v26;
        v21 += v26;
        v16 = *a7;
        if (v24 >= v16)
          break;
        v22 = v25 - 1;
        v27 = v24++ >= ((unint64_t)a6[1] + 1) >> 1;
      }
      while (!v27 && v21 < v20);
      v29 = 1 - v25;
    }
    else
    {
      v29 = 0;
    }
    v30 = v16;
  }
  else
  {
    v21 = 0;
    v29 = 0;
    v30 = 0;
  }
  v31 = v30 - v29;
  if ((int)(v30 - v29) >= 1)
  {
    v32 = a7[1];
    v33 = a7[2];
    if (v31 < v30 + v32 + v33)
    {
      v34 = 0;
      v35 = -v29;
      v36 = &a7[(unint64_t)v30 - v29];
      v37 = v32 + v33 - v35;
      do
      {
        v38 = &a7[v34];
        v38[3] = v36[3];
        v38[10003] = v36[10003];
        v38[20003] = v36[20003];
        ++v34;
        ++v36;
        --v37;
      }
      while (v37);
      LOWORD(v16) = *a7;
    }
    *a7 = v16 - v31;
  }
  if (v21 < v20)
    v20 = v21;
  *a8 = v20;
  if (*a9 < v14)
    v14 = *a9;
  *a9 = v14;
  if ((*a8 + v14 < 0) ^ __OFADD__(*a8, v14) | (*a8 + v14 == 0) && a6[1] && a7[1])
    return 2164269071;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"crossfading lengths between unit %d and %d: %d+%d\n", (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a2);
  return 0;
}

uint64_t Psola_checkMarker(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  unsigned __int16 v15;
  unsigned __int16 v16;

  v3 = *(_QWORD *)(a2 + 160);
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 152) + 56 * a3 + 44);
  if (*(_WORD *)(v3 + 16 * v4 + 10))
  {
    v5 = result;
    if (!a3 || (a3 & 1) != 0)
    {
      v6 = *(unsigned __int16 *)(v3 + 16 * v4 + 8);
      v7 = v6 + *(unsigned __int16 *)(v3 + 16 * v4 + 10);
      v8 = 32 * v6;
      while (2)
      {
        v9 = *(_QWORD *)(v5 + 648);
        v10 = *(_DWORD *)(v9 + v8);
        switch(v10)
        {
          case 16:
            v11 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v11;
            *(_WORD *)(v5 + 1054) = v11;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "pitch";
            goto LABEL_13;
          case 17:
            *(_WORD *)(v5 + 1064) = *(_DWORD *)(v9 + v8 + 24);
            goto LABEL_14;
          case 18:
            v15 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v15;
            *(_WORD *)(v5 + 1052) = v15;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "rate";
            goto LABEL_13;
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
            goto LABEL_14;
          case 25:
            v16 = *(_DWORD *)(v9 + v8 + 24);
            v12 = v16;
            *(_WORD *)(v5 + 1044) = v16;
            v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 40);
            v14 = "waitfactor";
LABEL_13:
            result = paramc_ParamSetUInt(v13, (uint64_t)v14, v12);
            if ((result & 0x80000000) == 0)
              goto LABEL_14;
            return result;
          default:
            if (v10 == 13)
            {
              result = synth_ResetParams(v5);
              if ((result & 0x80000000) != 0)
                return result;
            }
LABEL_14:
            ++v6;
            v8 += 32;
            if (v6 >= v7)
              return result;
            continue;
        }
      }
    }
  }
  return result;
}

uint64_t Psola_SilUnitLen(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a2 + 40);
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    if (a3 < 0)
      v4 = 500 - *(_DWORD *)(a1 + 1040) * a3;
    else
      v4 = v3 * a3 + 500;
    v3 = v4 / 1000;
  }
  return Convert2Samples(a1, 10 * v3);
}

unsigned __int16 *Psola_AssignPeriRanges(unsigned __int16 *result)
{
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  __int16 *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = result[3];
  v2 = (unsigned __int16)(result[2] + result[1] + v1);
  if (result[2] + result[1] + v1)
  {
    v3 = 0;
    v4 = result + 10004;
    result[1] = 0;
    v5 = (__int16 *)(result + 4);
    while (*v5 < 0)
    {
      result[1] = ++v3;
      ++v5;
      if (v2 == v3)
      {
        result[2] = 0;
LABEL_17:
        result[3] = v2 - v3;
        return result;
      }
    }
    result[2] = 0;
    if (v3 >= v2)
      goto LABEL_17;
    v6 = 0;
    v7 = v2 - v3;
    v8 = *result;
    do
    {
      v9 = *v5++;
      if (v9 >= v8)
        break;
      result[2] = ++v6;
      --v7;
    }
    while (v7);
    result[3] = v2 - (v3 + v6);
    if (!(_WORD)v3 && v6)
    {
      result[1] = 1;
      if (v6 == 1)
      {
        v10 = (v2 - 1);
        if ((_DWORD)v2 != 1)
        {
          v11 = v10 - 1;
          v12 = &result[v10];
          do
          {
            v13 = &result[v2];
            v13[4] = v12[4];
            v13[10004] = v12[10004];
            v13[20004] = v12[20004];
            LODWORD(v2) = v2 - 1;
            --v12;
          }
          while ((_DWORD)v11--);
        }
        v15 = (unsigned __int16)*v4;
        v16 = v15 + (v15 >> 15);
        result[10005] = (__int16)v16 >> 1;
        v17 = v15 - ((__int16)v16 >> 1);
        *v4 = v17;
        result[5] = result[4] + v17;
        *((_DWORD *)result + 10002) = 0;
      }
      else
      {
        result[2] = v6 - 1;
      }
    }
  }
  return result;
}

unsigned __int16 *Psola_SyncOverlappingPeriods(unsigned __int16 *result, _WORD *a2)
{
  unsigned __int16 v2;
  __int16 *v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  _WORD *v7;
  __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  int v35;
  BOOL v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;

  if (result[1] && a2[1])
  {
    v2 = result[1] + result[2] - 1;
    v3 = a2 + 3;
    v4 = (unsigned __int16)a2[2] + (unsigned __int16)a2[1] + (unsigned __int16)a2[3];
    v5 = (__int16)result[v2 + 10004] + (__int16)result[v2 + 4] - *result;
    v6 = v4 - 1;
    v7 = &a2[(v4 - 1)];
    v8 = v7[4];
    v9 = v7[10004];
    if (v4 <= 1)
    {
      v14 = 0;
      a2[4] = v5;
      v18 = a2 + 4;
    }
    else
    {
      v10 = 0;
      v11 = (unsigned __int16)(result[1] + result[2] - 1);
      if ((__int16)a2[5] - v5 >= 0)
        v12 = (__int16)a2[5] - v5;
      else
        v12 = v5 - (__int16)a2[5];
      do
      {
        if ((__int16)a2[++v10 + 5] - v5 >= 0)
          v13 = (__int16)a2[v10 + 5] - v5;
        else
          v13 = v5 - (__int16)a2[v10 + 5];
        v14 = v10;
        v15 = v10 + 1 >= v4 || v13 >= v12;
        v12 = v13;
      }
      while (!v15);
      v16 = v10;
      v17 = &a2[v10];
      v17[4] = v5;
      v18 = v17 + 4;
      if ((_DWORD)v16)
      {
        v19 = result + 10004;
        do
        {
          v20 = v19[v11];
          a2[v16 + 10003] = v20;
          v5 -= v20;
          v3[v16] = v5;
          if (v16 < 2)
            break;
          --v16;
        }
        while (v11-- > 0);
      }
      else
      {
        v14 = 0;
      }
    }
    v22 = v14 + 1;
    if (v14 + 1 >= v4)
    {
      v24 = 0;
      v6 = v14;
    }
    else
    {
      v23 = *v18 + 32;
      if (v23 <= (__int16)a2[v22 + 4])
      {
        v24 = 0;
        v6 = v14;
      }
      else
      {
        v24 = 0;
        v25 = v14;
        while (1)
        {
          ++v24;
          if (v25 + 2 >= v4)
            break;
          v26 = (__int16)a2[v25++ + 6];
          if (v23 <= v26)
          {
            v6 = v25;
            break;
          }
        }
      }
      v22 = v6 + 1;
    }
    if (v22 < v4)
    {
      v27 = v6;
      v28 = v14;
      v29 = a2[v14 + 4];
      v30 = v27 + 5;
      do
      {
        v31 = &a2[v28];
        v32 = a2[v30];
        a2[v28++ + 10004] = v32 - v29;
        v31[5] = v32;
        v33 = v30 - 3;
        ++v30;
        v29 = v32;
      }
      while (v33 < v4);
      v14 = v28;
    }
    v34 = v9 + v8;
    if (v14 >= 1)
    {
      v35 = v24 + v14;
      while (v34 - 32 < (__int16)a2[v14 + 4])
      {
        ++v24;
        v36 = __OFSUB__(v14--, 1);
        if ((v14 < 0) ^ v36 | (v14 == 0))
        {
          v14 = 0;
          goto LABEL_44;
        }
      }
    }
    v35 = v24;
LABEL_44:
    a2[v14 + 10004] = v34 - a2[v14 + 4];
    if ((_WORD)v35)
    {
      v37 = *v3;
      while (v37)
      {
        --v35;
        *v3 = --v37;
        if (!(_WORD)v35)
          return Psola_AssignPeriRanges(a2);
      }
      v38 = a2[2];
      while (v38)
      {
        --v35;
        a2[2] = --v38;
        if (!(_WORD)v35)
          return Psola_AssignPeriRanges(a2);
      }
      v39 = a2[1];
      do
      {
        if (!v39)
          break;
        --v35;
        a2[1] = --v39;
      }
      while ((_WORD)v35);
    }
    return Psola_AssignPeriRanges(a2);
  }
  return result;
}

uint64_t Psola_CalculateModificationFactors(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int *a6, int *a7, _DWORD *a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  if (a3 < 1)
  {
    if (!a3)
      a3 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    a3 = *(_DWORD *)(a2 + 16) * a3 / 1000;
  }
  *a6 = a3;
  if (a4 < 1)
  {
    if (!a4)
      a4 = *(_DWORD *)(a2 + 20);
  }
  else
  {
    a4 = *(_DWORD *)(a2 + 20) * a4 / 1000;
  }
  *a7 = a4;
  *a8 = a5;
  v8 = *(unsigned __int16 *)(a1 + 1052);
  if (v8 == 100)
  {
    v9 = 1000;
  }
  else
  {
    if (v8 - 50 > 0x15E)
      return 2164269071;
    v9 = ((v8 >> 1) + 100000) / v8;
  }
  v10 = 10 * *(unsigned __int16 *)(a1 + 1054);
  if (v10 && v10 != 1000)
  {
    v11 = 274877907 * (*a6 * v10 + 500);
    *a6 = (v11 >> 38) + ((unint64_t)v11 >> 63);
    v12 = 274877907 * (*a7 * v10 + 500);
    *a7 = (v12 >> 38) + ((unint64_t)v12 >> 63);
  }
  result = 0;
  if (v9 != 1000)
  {
    v14 = 274877907 * (int)(*a8 * v9 + 500);
    *a8 = (v14 >> 38) + ((unint64_t)v14 >> 63);
  }
  return result;
}

uint64_t Psola_GetUnitModif (uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5, uint64_t a6, __int16 *a7, uint64_t a8)
{
  __int16 *v8;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t i;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned __int16 v53;
  BOOL v55;
  uint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;

  v8 = a7;
  v10 = a3[1];
  v11 = a3[2] + v10;
  v12 = v11 - 1;
  if (v10 <= v12)
  {
    v13 = 0;
    v14 = a3[1];
    do
      v13 += (__int16)a3[(unsigned __int16)v14++ + 10004];
    while ((unsigned __int16)v14 <= v12);
  }
  else
  {
    v13 = 0;
  }
  v15 = a6;
  if ((a6 & 0x80000000) != 0)
  {
    v16 = *(_DWORD *)(a1 + 1040);
    if (v16 >= 0)
      v17 = *(_DWORD *)(a1 + 1040);
    else
      v17 = v16 + 1;
    v18 = (1000 * v13 + (v17 >> 1)) / v16;
    if (v18 >= 0)
      v19 = (1000 * v13 + (v17 >> 1)) / v16;
    else
      v19 = v18 + 1;
    v15 = (-1000 * (int)a6 + (v19 >> 1)) / v18;
  }
  v20 = v13;
  if (v15)
    v20 = (v15 * v13 + 500) / 1000;
  result = 2164269074;
  if (a4 >= 1 && a5 < 1 || a4 <= 0 && a5 > 0)
    return result;
  *a7 = 0;
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; *a7 = i)
    {
      a7[i + 3] = i;
      a7[i + 10003] = 0;
      a7[i + 20003] = a3[i + 10004];
      ++i;
    }
    LODWORD(v23) = v10;
  }
  else
  {
    LODWORD(v23) = 0;
  }
  a7[1] = 0;
  if (v10 <= v12)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v61 = a5 - a4;
    if (v20 >= 0)
      v39 = v20;
    else
      v39 = v20 + 1;
    v60 = v39 >> 1;
    if (v13 >= 0)
      v40 = v13;
    else
      v40 = v13 + 1;
    v59 = v40 >> 1;
    v58 = a2;
    v57 = v11;
    while (1)
    {
      a7 = (__int16 *)&a3[(unsigned __int16)v10 + 10004];
      v41 = (unsigned __int16)*a7;
      if (v15)
        v38 += (int)(v15 * v41 + 500) / 1000;
      else
        v38 = v37 + v41;
      v42 = v23 <= 0x2710 ? 10000 : v23;
      v43 = (unsigned __int16)v10 == v12 && v37 == 0;
      a8 = v43;
      if (v37 + (v41 >> 1) <= v38 || (_DWORD)a8 != 0)
        break;
LABEL_95:
      v36 += v41;
      LOWORD(v10) = v10 + 1;
      if ((unsigned __int16)v10 > v12)
        goto LABEL_25;
    }
    LODWORD(a8) = 0;
    v45 = &a3[(unsigned __int16)v10 + 20004];
    v46 = -(uint64_t)v23;
    v47 = (unsigned __int16 *)&v8[v23];
    v48 = -v42;
    while (1)
    {
      v49 = a4;
      if (v15)
      {
        if (!v20)
          goto LABEL_70;
        v50 = (int)(v60 + v37 * v61) / v20;
      }
      else
      {
        if (!v13)
          goto LABEL_70;
        v50 = (v59 + v36 * v61) / v13;
      }
      v49 = v50 + a4;
LABEL_70:
      v51 = v41;
      if (*v45 == 1)
      {
        if (v49 < 1)
        {
          v51 = v41;
          if ((v49 & 0x80000000) == 0)
            goto LABEL_75;
          v52 = *(_DWORD *)(a1 + 1040);
          v49 = -v49;
        }
        else
        {
          v52 = 1000 * *a7;
        }
        v51 = (int)(v52 + (v49 >> 1)) / v49;
      }
LABEL_75:
      if (v48 == v46)
        return 2164269065;
      if (v51 <= 0x10)
        v51 = 16;
      if (v51 >= 0x3C1)
        v51 = 961;
      v47[3] = v10;
      v47[20003] = v51;
      if (*v45)
        v53 = 0;
      else
        v53 = a8;
      a8 = (1 - a8);
      v37 += v51;
      if (!v15)
        v38 = v37;
      v47[10003] = v53;
      v8[1] = ++v35;
      v55 = (unsigned __int16)v10 == v12 && v37 == 0;
      --v46;
      ++v47;
      if (v37 + (v41 >> 1) > v38 && !v55)
      {
        v23 = -v46;
        a2 = v58;
        v11 = v57;
        goto LABEL_95;
      }
    }
  }
LABEL_25:
  v24 = a3[2] + a3[1] + a3[3];
  v8[2] = 0;
  if (v11 >= v24)
  {
LABEL_32:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"modified unit %d: f0Beg=%d, f0End=%d, dur=%d\n", a6, (uint64_t)a7, a8, a2);
    if (v8[1] + *v8 + v8[2])
    {
      v33 = 0;
      v34 = (unsigned __int16)(v8[1] + *v8 + v8[2]);
      do
      {
        if (v33 == (unsigned __int16)*v8)
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  --- start of nominal part\n", v30, v31, v32, v56);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  peri num: %d, type: %d, orig len: %d, new len: %d, rev: %d\n", v30, v31, v32, (unsigned __int16)v8[v33 + 3]);
        if ((_DWORD)v33 == (unsigned __int16)*v8 + (unsigned __int16)v8[1] - 1)
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 100, 0, (uint64_t)"  --- end of nominal part\n", v30, v31, v32, v56);
        ++v33;
      }
      while (v34 != v33);
    }
    return 0;
  }
  else
  {
    v25 = 0;
    v26 = v11;
    if (v23 <= 0x2710)
      v27 = 10000;
    else
      v27 = v23;
    v28 = v27 - v23;
    v29 = (unsigned __int16 *)&v8[v23];
    while (v28)
    {
      v29[3] = v26;
      v29[10003] = 0;
      v29[20003] = a3[v26 + 10004];
      v8[2] = ++v25;
      ++v26;
      --v28;
      ++v29;
      if (v26 >= v24)
        goto LABEL_32;
    }
    return 2164269065;
  }
}

void Psola_SynthSilence(uint64_t a1, uint64_t a2, int a3, int *a4, int a5, int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[2];

  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"PMK: %d 0 %d\n", (uint64_t)a6, a7, a8, a2);
  v17 = *(unsigned __int16 *)(a1 + 1052);
  if (v17 == 100)
  {
    v18 = 1000;
  }
  else if (v17 - 50 > 0x15E)
  {
    v18 = 0;
  }
  else
  {
    v18 = ((v17 >> 1) + 100000) / v17;
  }
  v33 = (int)(v18 * a5 + 500) / 1000;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"synthesizing silence for unit %d, len=%d\n", v14, v15, v16, a2);
  Psola_FlushOlaBufPart(a1, a4, *a6, v19, v20, v21, v22, v23);
  Psola_DepositMarkers(a1, a3, v24, v25, v26, v27, v28, v29);
  v32 = (*a6 + v33);
  *a6 = v32;
  if (*a4 <= (int)v32)
    Psola_AddToOlaBufAux(a1, a4, (uint64_t)v34, 0, 0, v32, v30, v31);
}

uint64_t Psola_LoadUnitData(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int16 *a4, char *a5, int *a6, _DWORD *a7)
{
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  int v18;
  int v19;
  unsigned int v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  *a6 = 0;
  *a7 = 0;
  v10 = a4 + 4;
  v11 = (__int16)a4[4];
  if (v11 <= 0)
    v12 = -v11;
  else
    v12 = 0;
  v13 = (__int16)a4[(unsigned __int16)(a4[1] + a4[2] + a4[3] - 1) + 10004]
      + (__int16)v10[(unsigned __int16)(a4[1] + a4[2] + a4[3] - 1)];
  result = Psola_GetDecodedUnitData_VE(a1, a2, a3, v12, *a4, (v13 - *a4) & ~((v13 - *a4) >> 31), 24000, a5, &v20, &v18, &v19);
  if ((result & 0x80000000) == 0)
  {
    v15 = v20;
    *a7 = v20;
    v16 = v18 + v15 + v19;
    *a6 = v16;
    if (*a7 + v13 > v16 || *a7 + (__int16)a4[4] < 0)
      return 2164269065;
    else
      return result;
  }
  return result;
}

uint64_t Psola_DoPeriSynth(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 *a10, int a11, int a12, int a13, int a14, int *a15)
{
  int v15;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  __int16 *v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t result;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 *v57;
  _WORD *v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 *v62;
  _WORD *v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v97;
  int v98;
  unsigned int v99;
  int v101;
  uint64_t v103;

  v15 = a8;
  v18 = a10;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"synthesizing unit %d\n", (uint64_t)a6, a7, a8, a2);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"PMK: %d", v19, v20, v21, a2);
  if (a10[1])
  {
    v25 = *a10;
    do
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)" %d %d", v22, v23, v24, *(__int16 *)(a9 + 2 * (__int16)a10[(unsigned __int16)v25++ + 3] + 40008));
    while (a10[1] + *a10 > (unsigned __int16)v25);
  }
  v26 = a15;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"PSOLA", 99, 0, (uint64_t)"\n", v22, v23, v24, v86);
  v27 = *a10;
  v28 = a10[1];
  v29 = v28 + v27;
  v30 = 0;
  if (*a10)
  {
    v31 = *a10;
    v32 = (__int16 *)(a10 + 20003);
    do
    {
      v33 = *v32++;
      v30 += v33;
      --v31;
    }
    while (v31);
  }
  v103 = a1;
  v34 = 0;
  if (a10[1])
  {
    v35 = &a10[*a10 + 20003];
    do
    {
      v36 = (__int16)*v35++;
      v34 += v36;
      LODWORD(v28) = v28 - 1;
    }
    while ((_DWORD)v28);
  }
  v37 = v29 + a10[2];
  v38 = a13;
  v39 = *a15;
  v98 = a12 + a11;
  if ((v98 < 0) ^ __OFADD__(a12, a11) | (v98 == 0))
  {
    v40 = a10[v27 + 20003];
    v98 = (int)((v40 + (v40 >> 15)) << 16) >> 17;
    v94 = *a15;
  }
  else
  {
    v94 = v39 - a11;
  }
  v97 = a14 + a13;
  if ((a14 + a13 < 0) ^ __OFADD__(a14, a13) | (a14 + a13 == 0))
  {
    v41 = a10[v29 + 20002];
    v38 = (__int16)(v41 + (v41 >> 15)) >> 1;
    v97 = v38;
  }
  v42 = v39 + v34;
  if ((_DWORD)v37)
  {
    v43 = 0;
    v44 = 0;
    v93 = v42 - v38;
    v45 = (v39 - v30);
    v89 = (uint64_t *)(a5 + 16);
    v90 = v37;
    v88 = (v37 - 1);
    v92 = (v37 + 1);
    v91 = v15;
    while (1)
    {
      v101 = v44;
      if (v43)
      {
        if (v43 == v90)
        {
          v46 = a9 + 2 * (__int16)a10[v88 + 3];
          LODWORD(v47) = *(__int16 *)(v46 + 20008);
          result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(v46 + 8) + v15, v47, (uint64_t *)a5);
          if ((result & 0x80000000) != 0)
            return result;
          LODWORD(v49) = 0;
          v50 = 0;
          v51 = v88;
        }
        else
        {
          v53 = &v18[v43];
          v54 = (__int16)v53[3];
          v55 = v54 - 1;
          if (v53[10003])
          {
            v47 = *(__int16 *)(a9 + 20008 + 2 * v54);
            v49 = *(__int16 *)(a9 + 20008 + 2 * v55);
            v56 = *(__int16 *)(a9 + 2 * v54 + 8);
            result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), (uint64_t *)a5, v47);
            if ((int)v47 >= 1 && (result & 0x80000000) == 0)
            {
              v57 = (__int16 *)(a7 + 2 * (v56 + v15));
              v58 = (_WORD *)(*(_QWORD *)a5 + 2 * v47 - 2);
              v59 = v47;
              do
              {
                v60 = *v57++;
                *v58-- = v60;
                --v59;
              }
              while (v59);
            }
            if ((result & 0x80000000) != 0)
              return result;
            v61 = *(__int16 *)(a9 + 2 * v55 + 8);
            result = Psola_ReallocIfNeeded(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), v89, v49);
            if ((int)v49 >= 1 && (result & 0x80000000) == 0)
            {
              v62 = (__int16 *)(a7 + 2 * (v61 + v15));
              v63 = (_WORD *)(*v89 + 2 * v49 - 2);
              v64 = v49;
              do
              {
                v65 = *v62++;
                *v63-- = v65;
                --v64;
              }
              while (v64);
            }
          }
          else
          {
            LODWORD(v47) = *(__int16 *)(a9 + 20008 + 2 * v55);
            LODWORD(v49) = *(__int16 *)(a9 + 20008 + 2 * v54);
            result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(a9 + 2 * v55 + 8) + v15, v47, (uint64_t *)a5);
            if ((result & 0x80000000) != 0)
              return result;
            result = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(a9 + 2 * v54 + 8) + v15, v49, v89);
            v45 = v45;
          }
          if ((result & 0x80000000) != 0)
            return result;
          v51 = v43 - 1;
          v50 = (__int16)v18[v43 + 20003];
        }
        v66 = (__int16)v18[v51 + 20003];
        if ((int)v47 <= v66)
        {
          v99 = 0;
        }
        else
        {
          cstdlib_memmove(*(void **)a5, (const void *)(*(_QWORD *)a5 + 2 * ((int)v47 - v66)), 2 * v66);
          v99 = 0;
          LODWORD(v47) = v66;
        }
      }
      else
      {
        v52 = a9 + 2 * (__int16)v18[3];
        LODWORD(v49) = *(__int16 *)(v52 + 20008);
        v99 = Psola_CopyDataPart(*(uint64_t **)(*(_QWORD *)(v103 + 16) + 8), a7, *(__int16 *)(v52 + 8) + v15, v49, v89);
        if ((v99 & 0x80000000) != 0)
          return v99;
        LODWORD(v47) = 0;
        v50 = (__int16)a10[20003];
      }
      if ((int)v49 >= v50)
        LODWORD(v49) = v50;
      Psola_ApplyHanning(*(__int16 **)(a5 + 32), a6, *(__int16 **)a5, v47, 1);
      Psola_ApplyHanning(*(__int16 **)(a5 + 32), a6, *(__int16 **)(a5 + 16), v49, 0);
      v67 = (v45 - v47);
      v68 = v45;
      Psola_ApplyFadingPart(*(__int16 **)a5, v47, v45 - v47, v94, v98, 1);
      Psola_ApplyFadingPart(*(__int16 **)(a5 + 16), v49, v45, v94, v98, 1);
      Psola_ApplyFadingPart(*(__int16 **)a5, v47, v67, v93, v97, 0);
      Psola_ApplyFadingPart(*(__int16 **)(a5 + 16), v49, v45, v93, v97, 0);
      Psola_AddToOlaBuf(v103, a4, *(_QWORD *)a5, v47, v67, v69, v70, v71);
      Psola_AddToOlaBuf(v103, a4, *(_QWORD *)(a5 + 16), v49, v45, v72, v73, v74);
      v45 = (v50 + v45);
      if (v101)
      {
        v15 = v91;
        v18 = a10;
        v44 = 1;
      }
      else
      {
        if ((int)v45 >= *a15 + 961 || v43 == v90)
        {
          Psola_FlushOlaBufPart(v103, a4, *a15, v75, v76, v77, v78, v79);
          v45 = (v50 + v68);
          Psola_DepositMarkers(v103, a3, v80, v81, v82, v83, v84, v85);
          v99 = 0;
          v44 = 1;
        }
        else
        {
          v44 = 0;
        }
        v15 = v91;
        v18 = a10;
      }
      if (++v43 == v92)
      {
        v26 = a15;
        v42 = *a15 + v34;
        result = v99;
        goto LABEL_54;
      }
    }
  }
  result = 0;
LABEL_54:
  *v26 = v42;
  return result;
}

void Psola_FlushOlaBufPart(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  _OWORD v21[12];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = a3 - *a2;
  if (v8 >= 1)
  {
    v11 = a2[1];
    v12 = a2[2];
    if (v8 >= v12)
      v13 = a2[2];
    else
      v13 = v8;
    if (v13 >= 2400 - (int)v11)
      v14 = (2400 - v11);
    else
      v14 = v13;
    v15 = v8 - v14;
    if (v8 >= v12)
      v16 = (v12 - v14);
    else
      v16 = v15;
    if ((int)v14 >= 1)
    {
      Psola_OutputDataPart(a1, (uint64_t)(a2 + 3), v11, v14, a5, a6, a7, a8);
      bzero((char *)a2 + 2 * a2[1] + 12, 2 * v14);
    }
    if ((int)v16 >= 1)
    {
      Psola_OutputDataPart(a1, (uint64_t)(a2 + 3), 0, v16, a5, a6, a7, a8);
      bzero(a2 + 3, 2 * v16);
    }
    v17 = v15 - v16;
    if (v17 >= 1)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      do
      {
        if (v17 >= 100)
          v18 = 100;
        else
          v18 = v17;
        Psola_OutputDataPart(a1, (uint64_t)v21, 0, v18, a5, a6, a7, a8);
        v19 = __OFSUB__(v17, (_DWORD)v18);
        v17 -= v18;
      }
      while (!((v17 < 0) ^ v19 | (v17 == 0)));
    }
    v20 = a2[1] + v8;
    *a2 += v8;
    a2[1] = v20 % 2400;
    a2[2] -= v16 + v14;
  }
}

uint64_t Psola_DepositMarkers(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;

  v8 = result;
  v9 = *(_QWORD *)(*(_QWORD *)(result + 1088) + 160)
     + 16 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(result + 1088) + 152) + 56 * a2 + 44);
  v11 = *(unsigned __int16 *)(v9 + 10);
  v10 = (_WORD *)(v9 + 10);
  v12 = v11 + (unsigned __int16)*(v10 - 1);
  if (v12 > *(unsigned __int16 *)(result + 656))
  {
    result = log_OutPublic(*(_QWORD *)(*(_QWORD *)(result + 16) + 32), (uint64_t)"PSOLA", 45000, (uint64_t)"%s%u%s%u%s%u", a5, a6, a7, a8, "index");
    v12 = *(unsigned __int16 *)(v8 + 656);
  }
  v13 = *(unsigned __int16 *)(v8 + 1080);
  if (v12 > v13)
  {
    v14 = *(_DWORD *)(v8 + 1028);
    v15 = (_DWORD *)(*(_QWORD *)(v8 + 648) + 32 * v13 + 16);
    v16 = v12 - v13;
    do
    {
      *(v15 - 1) = v14;
      *v15 = 0;
      v15 += 8;
      --v16;
    }
    while (v16);
    *(_WORD *)(v8 + 1080) = v12;
    *v10 = 0;
  }
  return result;
}

void Psola_AddToOlaBuf(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v16[2];

  if (*a2 <= (int)a5)
  {
    v8 = a5;
    v9 = a4;
    if (a4 < 1)
    {
      Psola_AddToOlaBufAux(a1, a2, (uint64_t)v16, 0, 0, a5, a7, a8);
    }
    else
    {
      v13 = 0;
      do
      {
        if (v9 >= 2400)
          v14 = 2400;
        else
          v14 = v9;
        Psola_AddToOlaBufAux(a1, a2, a3, v13, v14, v8, a7, a8);
        v13 = (v14 + v13);
        v8 = (v8 + v14);
        v15 = __OFSUB__(v9, (_DWORD)v14);
        v9 -= v14;
      }
      while (!((v9 < 0) ^ v15 | (v9 == 0)));
    }
  }
}

void Psola_AddToOlaBufAux(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _WORD *v19;
  __int16 *v20;
  int v21;
  __int16 v22;
  int v23;
  _WORD *v24;
  __int16 *v25;
  __int16 v26;
  int v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v13 = a6 + a5;
  v14 = a6 + a5 - 2400;
  v15 = *a2;
  if (v14 > *a2)
  {
    Psola_FlushOlaBufPart(a1, a2, v14, a4, a5, a6, a7, a8);
    v15 = *a2;
  }
  v16 = (v8 - v15 + a2[1]) % 2400;
  if (2400 - v16 >= v9)
    v17 = v9;
  else
    v17 = 2400 - v16;
  v18 = v9 - v17;
  if (v17 >= 1)
  {
    v19 = (_WORD *)a2 + v16 + 6;
    v20 = (__int16 *)(a3 + 2 * v10);
    v21 = v17;
    do
    {
      v22 = *v20++;
      *v19++ += v22;
      --v21;
    }
    while (v21);
  }
  if (v18 >= 1)
  {
    v23 = v17 + v10;
    v24 = a2 + 3;
    v25 = (__int16 *)(a3 + 2 * v23);
    do
    {
      v26 = *v25++;
      *v24++ += v26;
      --v18;
    }
    while (v18);
  }
  v27 = v13 - v15;
  if (a2[2] > v27)
    v27 = a2[2];
  a2[2] = v27;
}

uint64_t Psola_CopyDataPart(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a4;
  v9 = Psola_ReallocIfNeeded(a1, a5, a4);
  if ((v9 & 0x80000000) == 0)
    cstdlib_memcpy((void *)*a5, (const void *)(a2 + 2 * a3), 2 * v8);
  return v9;
}

__int16 *Psola_ApplyHanning(__int16 *result, int *a2, __int16 *a3, int a4, int a5)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if (*a2 != a4)
  {
    if (a4 >= 1)
    {
      v5 = 0;
      v6 = result;
      do
      {
        *v6++ = HanningTab[(int)v5 / a4]
              + (HanningTab[(int)v5 / a4 + 1] - HanningTab[(int)v5 / a4]) * ((int)v5 % a4) / a4;
        v5 += 200;
      }
      while (200 * a4 != v5);
    }
    *a2 = a4;
  }
  if (a5)
  {
    if (a4 >= 1)
    {
      v7 = a4;
      do
      {
        v8 = *result++;
        *a3 = v8 * *a3 / 0x8000;
        ++a3;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    v9 = a4;
    do
    {
      v10 = *result++;
      *a3 = (0x7FFF - v10) * *a3 / 0x8000;
      ++a3;
      --v9;
    }
    while (v9);
  }
  return result;
}

void Psola_ApplyFadingPart(__int16 *a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  if (a3 <= a4)
    v6 = a4;
  else
    v6 = a3;
  v7 = a3 + a2;
  v8 = a5 + a4;
  if (a3 + a2 >= a5 + a4)
    v9 = a5 + a4;
  else
    v9 = a3 + a2;
  v10 = v9 - v6;
  if (v10 >= 1)
  {
    v11 = v10 + v6 - a3;
    v12 = v6 - a3;
    if (a6)
    {
      v13 = v6 - a4;
      do
      {
        a1[v12] = v13 * a1[v12] / a5;
        ++v13;
        ++v12;
      }
      while (v12 < v11);
    }
    else
    {
      v14 = a5 + a4 - v6;
      do
      {
        a1[v12] = v14 * a1[v12] / a5;
        ++v12;
        --v14;
      }
      while (v12 < v11);
    }
  }
  if (a4 > a3 && a6)
  {
    if (a4 - a3 >= a2)
      v15 = a2;
    else
      v15 = a4 - a3;
    if (v15 <= 0)
      return;
LABEL_27:
    bzero(a1, 2 * v15);
    return;
  }
  if (!a6)
  {
    v16 = __OFSUB__(v7, v8);
    v15 = v7 - v8;
    if (!((v15 < 0) ^ v16 | (v15 == 0)))
    {
      if (v15 >= a2)
        v15 = a2;
      if (v15 >= 1)
      {
        a1 += a2 - v15;
        goto LABEL_27;
      }
    }
  }
}

uint64_t Psola_ReallocIfNeeded(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (a2[1] >= a3)
    return 0;
  v4 = (a3 & 0xFFFFFFFFFFFFFE00) + 512;
  v5 = heap_Realloc(a1, *a2, 2 * v4);
  if (!v5)
    return 2164269066;
  v6 = v5;
  result = 0;
  *a2 = v6;
  a2[1] = v4;
  return result;
}

uint64_t Psola_GetToolSynthMode(_DWORD *a1)
{
  *a1 = -1;
  return 0;
}

uint64_t Psola_GetSynthMode(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    *a2 = 1;
    *a7 = 100;
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

uint64_t Psola_DoSpecTreatment()
{
  return 0;
}

uint64_t Synth_RetrieveInputBlock(uint64_t a1, char *__s2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  const char *v11;

  v3 = 2164269076;
  *a3 = 0;
  v4 = *(unsigned __int16 *)(a1 + 328);
  if (!*(_WORD *)(a1 + 328))
    return v3;
  v8 = 0;
  v9 = (_QWORD *)(a1 + 336);
  for (i = (_QWORD *)(a1 + 64); ; i += 4)
  {
    v11 = (const char *)*(i - 2);
    if (!v11 || *((_DWORD *)i - 6))
      goto LABEL_7;
    if (!cstdlib_strcmp(v11, __s2))
      break;
    v4 = *(unsigned __int16 *)(a1 + 328);
LABEL_7:
    ++v8;
    v9 += 2;
    if (v8 >= v4)
      return v3;
  }
  if (*v9)
  {
    v3 = 0;
    goto LABEL_12;
  }
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD *))(*(_QWORD *)(a1 + 32) + 88))(*(i - 1), *i, v9, v9 + 1);
  if ((v3 & 0x80000000) == 0)
LABEL_12:
    *a3 = v9;
  return v3;
}

uint64_t Synth_SetVoicePartsAndRelativeIds(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = 2164269066;
  v5 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 8 * *(unsigned __int16 *)(a1 + 544));
  *(_QWORD *)(a1 + 552) = v5;
  if (v5)
  {
    v6 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4 * *(unsigned __int16 *)(a1 + 544));
    *(_QWORD *)(a1 + 536) = v6;
    if (v6)
    {
      if (*(_WORD *)(a1 + 544))
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        do
        {
          synth_splitGID(a1, *(_DWORD *)(a2 + v8), (_QWORD *)(*(_QWORD *)(a1 + 552) + v7), (unsigned int *)(*(_QWORD *)(a1 + 536) + v8));
          ++v9;
          v8 += 4;
          v7 += 8;
        }
        while (v9 < *(unsigned __int16 *)(a1 + 544));
      }
      return 0;
    }
  }
  return v4;
}

void Synth_LinkMsgLayers(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;

  v14 = 0;
  v2 = a1 + 512;
  v3 = *(_WORD *)(a1 + 616);
  cstdlib_memset((void *)(a1 + 512), 0, 0xA0uLL);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 16);
  if ((Synth_RetrieveInputBlock(a1, "text/x-realspeak-usphonemes;charset=tts", &v14) & 0x80000000) == 0)
  {
    v4 = v14;
    v5 = *(_QWORD *)v14 + 1;
    *(_BYTE *)(a1 + 528) = **(_BYTE **)v14;
    *(_QWORD *)(a1 + 576) = v5;
    LOWORD(v4) = *(_WORD *)(v4 + 8) - 2;
    *(_WORD *)(a1 + 584) = v4;
    if (!*(_BYTE *)(v5 + (unsigned __int16)v4)
      && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-usids;version=4.0", &v14) & 0x80000000) == 0)
    {
      v6 = *(_BYTE **)v14;
      v7 = *(_DWORD *)(v14 + 8);
      *(_WORD *)(a1 + 544) = v7 >> 2;
      if ((unsigned __int16)(v7 >> 2) == 2 * *(unsigned __int16 *)(a1 + 584)
        && (Synth_SetVoicePartsAndRelativeIds(a1, (uint64_t)v6) & 0x80000000) == 0
        && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-targf0;version=4.0", &v14) & 0x80000000) == 0)
      {
        v8 = v14;
        *(_QWORD *)(a1 + 560) = *(_QWORD *)v14;
        LODWORD(v8) = *(_DWORD *)(v8 + 8);
        *(_WORD *)(a1 + 568) = v8 >> 1;
        if ((unsigned __int16)(v8 >> 1) == 4 * *(unsigned __int16 *)(a1 + 584)
          && (Synth_RetrieveInputBlock(a1, "application/x-realspeak-usmarkers-u16;version=4.0", &v14) & 0x80000000) == 0)
        {
          v9 = v14;
          v10 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
          *(_QWORD *)(a1 + 592) = v10;
          if (v10)
          {
            cstdlib_memcpy(v10, *(const void **)v9, *(unsigned int *)(v9 + 8));
            if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-usplosives;version=4.0", &v14) & 0x80000000) == 0)
            {
              *(_QWORD *)(a1 + 600) = *(_QWORD *)v14;
              if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-usdurs;version=4.0", &v14) & 0x80000000) == 0)
              {
                v11 = v14;
                v12 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
                *(_QWORD *)(a1 + 608) = v12;
                if (v12)
                {
                  cstdlib_memcpy(v12, *(const void **)v11, *(unsigned int *)(v11 + 8));
                  if ((*(_BYTE *)(a1 + 528) & 1) == 0)
                    **(_WORD **)(a1 + 608) = v3;
                  *(_QWORD *)(a1 + 664) = a1;
                  if ((Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v14) & 0x80000000) == 0)
                  {
                    v13 = (_DWORD *)(v14 + 8);
                    Synth_SetupMarkers(v2, *(int **)v14, *(_DWORD *)(v14 + 8) >> 5, (unsigned int *)(v14 + 8));
                    *v13 *= 32;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

__n128 Synth_SetupMarkers(uint64_t a1, int *a2, unsigned int a3, unsigned int *a4)
{
  unsigned __int16 v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  __n128 result;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _WORD *v34;

  v8 = *(_WORD *)(a1 + 72) + a3;
  *(_WORD *)(a1 + 144) = v8;
  if (a3)
  {
    v9 = a3;
    v10 = a2;
    do
    {
      v11 = *v10;
      v10 += 8;
      if (v11 == 8)
        *(_WORD *)(a1 + 144) = ++v8;
      --v9;
    }
    while (v9);
  }
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v8, 32);
  *(_QWORD *)(a1 + 136) = v12;
  if (v12)
  {
    LOWORD(v14) = *(_WORD *)(a1 + 72);
    if ((_WORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        if (v16)
        {
          v19 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v14);
          *v19 = 8;
          v19[6] = 0;
          ++v14;
          ++*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        }
        v16 = 0;
        if (v18)
          break;
LABEL_23:
        if (v15 || (*(_BYTE *)(a1 + 16) & 1) != 0)
        {
          v23 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v14);
          *v23 = 33;
          v23[6] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + v15);
          ++v14;
          ++*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v15);
        }
        ++v15;
        v24 = *(unsigned __int16 *)(a1 + 72);
        if (v15 >= v24)
          goto LABEL_30;
      }
      while (1)
      {
        if (v17 >= a3 || v14 >= *(unsigned __int16 *)(a1 + 144))
          goto LABEL_19;
        v20 = &a2[8 * v17];
        if (*v20 == 33)
        {
          if (v20[6] != 35)
            goto LABEL_18;
        }
        else if (*v20 != 8 || !a2[8 * v17 + 6])
        {
          goto LABEL_18;
        }
        v16 = 1;
LABEL_18:
        result = *(__n128 *)v20;
        v21 = *((_OWORD *)v20 + 1);
        v22 = *(_QWORD *)(a1 + 136) + 32 * v14;
        *(__n128 *)v22 = result;
        *(_OWORD *)(v22 + 16) = v21;
        ++v17;
        ++v14;
LABEL_19:
        if (!--v18)
          goto LABEL_23;
      }
    }
    v17 = 0;
    LODWORD(v24) = 0;
LABEL_30:
    *(_WORD *)(a1 + 144) = v14;
    *a4 = v17;
    if (**(_BYTE **)(a1 + 64) == 35)
    {
      v25 = *(_QWORD *)(a1 + 80);
      if (!*(_WORD *)v25)
      {
        v26 = *(unsigned __int16 *)(v25 + 2);
        if (v24 < 3)
        {
          *(_DWORD *)v25 = (unsigned __int16)v26;
        }
        else
        {
          if (v26 >= (unsigned __int16)v14)
            v26 = (unsigned __int16)v14;
          if (v26)
          {
            v27 = 0;
            v28 = *(_QWORD *)(a1 + 136);
            v29 = 32 * v26;
            while (*(_DWORD *)(v28 + v27) != 0x4000)
            {
              v27 += 32;
              if (v29 == v27)
                return result;
            }
            v30 = (__int128 *)(v28 + v27);
            result = *(__n128 *)(v28 + 16);
            v32 = *v30;
            v31 = v30[1];
            *v30 = *(_OWORD *)v28;
            v30[1] = (__int128)result;
            v33 = *(_OWORD **)(a1 + 136);
            *v33 = v32;
            v33[1] = v31;
            v34 = *(_WORD **)(a1 + 80);
            ++*v34;
            --v34[1];
          }
        }
      }
    }
  }
  return result;
}

uint64_t Synth_UnlinkMsgLayers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[69];
  if (v2)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v2);
    a1[69] = 0;
  }
  v3 = a1[67];
  if (v3)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v3);
    a1[67] = 0;
  }
  v4 = a1[76];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v4);
    a1[76] = 0;
  }
  v5 = a1[74];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v5);
    a1[74] = 0;
  }
  v6 = a1[81];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v6);
    a1[81] = 0;
  }
  v7 = a1[78];
  if (v7)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v7);
    a1[78] = 0;
  }
  v8 = a1[80];
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v8);
    a1[80] = 0;
  }
  return 0;
}

uint64_t Synth_Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 1084) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 72) + 4) = 0;
  *(_DWORD *)(a1 + 1068) = 3;
  InOut__ResetOutputState(a1);
  *(_DWORD *)(a1 + 1096) = 0;
  *(_DWORD *)(a1 + 1036) = 0;
  *(_QWORD *)(a1 + 1076) = 0;
  return 0;
}

uint64_t Synth__InitForProcessing(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;

  v2 = *(unsigned __int16 *)(a1 + 632);
  v3 = *(_QWORD *)(a1 + 1088);
  *(_WORD *)(v3 + 168) = v2;
  v4 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(v3 + 160) = v4;
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    *(_BYTE *)(a1 + 1144) = (*(_BYTE *)(a1 + 528) & 4) != 0;
  }
  else
  {
    *(_BYTE *)(a1 + 1144) = 1;
    if (v2)
    {
      v5 = 0;
      do
      {
        v6 = Convert2Samples(a1, *(_DWORD *)(*(_QWORD *)(v3 + 152) + 56 * v5 + 28));
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1088) + 152) + 56 * v5;
        *(_DWORD *)(v7 + 28) = v6;
        v8 = Convert2Samples(a1, *(_DWORD *)(v7 + 32));
        v3 = *(_QWORD *)(a1 + 1088);
        v9 = *(_QWORD *)(v3 + 152);
        *(_DWORD *)(v9 + 56 * v5 + 32) = v8;
        v10 = *(_DWORD *)(v9 + 56 * v5 + 40);
        if (v10 >= 1)
        {
          v11 = Convert2SamplesX(a1, v10);
          v3 = *(_QWORD *)(a1 + 1088);
          v9 = *(_QWORD *)(v3 + 152);
          *(_DWORD *)(v9 + 56 * v5 + 40) = v11;
        }
        v12 = v9 + 56 * v5;
        v13 = *(unsigned __int16 *)(v12 + 46);
        if (*(_WORD *)(v12 + 46))
        {
          v14 = 0;
          v15 = (unsigned int *)(*(_QWORD *)(v3 + 160) + 16 * *(unsigned __int16 *)(v12 + 44) + 4);
          do
          {
            if ((int)*v15 >= 1)
            {
              v16 = Convert2Samples(a1, *v15);
              *v15 = v16;
              v14 += v16;
            }
            v15 += 4;
            --v13;
          }
          while (v13);
          v3 = *(_QWORD *)(a1 + 1088);
          v17 = *(_QWORD *)(v3 + 152) + 56 * v5;
          v19 = *(_DWORD *)(v17 + 32);
          v18 = (_DWORD *)(v17 + 32);
          if (v14 > v19)
            *v18 = v14;
        }
        ++v5;
        v20 = *(unsigned __int16 *)(v3 + 168);
      }
      while (v5 < v20);
    }
    else
    {
      LOWORD(v20) = 0;
    }
    do
    {
      if ((unsigned __int16)v20 < 3u)
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 1;
      do
      {
        v25 = *(_QWORD *)(v3 + 152);
        if (!*(_DWORD *)(v25 + 56 * v24 + 32) && !*(_DWORD *)(v25 + 56 * v24 + 40))
        {
          v26 = v25 + 56 * v24;
          *(_WORD *)(v26 - 10) += *(_WORD *)(v26 + 46);
          *(_BYTE *)(v26 - 8) = *(_BYTE *)(v26 - 8) & 0xF | 0x40;
          *(_BYTE *)(v26 + 104) = *(_BYTE *)(v26 + 104) & 0xF0 | 4;
          if (v24 <= (unsigned __int16)v20 - 2)
          {
            v27 = v21;
            v28 = v22;
            do
            {
              v29 = *(_QWORD *)(v3 + 152) + v27;
              v30 = *(_OWORD *)(v29 + 128);
              *(_OWORD *)(v29 + 56) = *(_OWORD *)(v29 + 112);
              *(_OWORD *)(v29 + 72) = v30;
              *(_OWORD *)(v29 + 88) = *(_OWORD *)(v29 + 144);
              *(_QWORD *)(v29 + 104) = *(_QWORD *)(v29 + 160);
              v3 = *(_QWORD *)(a1 + 1088);
              ++v28;
              v27 += 56;
            }
            while (v28 < *(unsigned __int16 *)(v3 + 168) - 2);
            LOWORD(v20) = *(_WORD *)(v3 + 168);
          }
          *(_WORD *)(v3 + 168) = v20 - 1;
          ++v23;
        }
        ++v24;
        v20 = *(unsigned __int16 *)(v3 + 168);
        ++v22;
        v21 += 56;
      }
      while (v24 < (uint64_t)(v20 - 1));
    }
    while (v23 > 0);
    if (*(_WORD *)(a1 + 618))
    {
      v31 = 56 * (unsigned __int16)v20 - 56;
      v32 = *(_QWORD *)(v3 + 152) + v31;
      v33 = *(unsigned __int16 *)(v32 + 46) - 1;
      *(_DWORD *)(a1 + 1096) = Convert2SamplesX(a1, *(unsigned __int16 *)(*(_QWORD *)(v3 + 160)+ 16 * (v33 + *(unsigned __int16 *)(v32 + 44))));
      *(_BYTE *)(a1 + 1144) = 1;
      v34 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 160)
                     + 16 * (v33 + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 152) + v31 + 44)));
      if ((*v34 & 0x30000) == 0x20000)
        *(_BYTE *)(a1 + 1144) = 0;
      *v34 = 0;
    }
  }
  return 0;
}

uint64_t Synth__SetVectPointer(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    *(_QWORD *)(a2 + 8) = a1;
    *(_DWORD *)a2 = a3;
    *(_DWORD *)(a2 + 4) = a3;
  }
  return 0;
}

uint64_t synth_CreateBrokerString(uint64_t a1, char *a2, size_t a3, int a4, int a5)
{
  uint64_t Str;
  _QWORD *v11;
  size_t v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  size_t v25;
  unsigned int v26;
  size_t v27;
  char *v28;
  const char *v30;
  int v31;
  char *__s;
  char *v33;
  char *v34;
  char *__s1;
  char v36[256];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  __s1 = 0;
  __s = 0;
  v33 = 0;
  v31 = 0;
  v30 = 0;
  *a2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (!__s || !*__s)
    goto LABEL_12;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = cstdlib_strlen("voiceaddonbaseuri.");
  v13 = cstdlib_strlen(__s);
  v14 = (char *)heap_Calloc(v11, 1, v12 + v13 + 1);
  if (!v14)
    return 2164269066;
  v15 = v14;
  cstdlib_strcpy(v14, "voiceaddonbaseuri.");
  cstdlib_strcat(v15, __s);
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)v15, &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v15);
  if (__s1 && *__s1)
  {
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v16 = cstdlib_strlen(a2);
    if (!cstdlib_strchr("\\/", a2[v16 - 1]))
    {
      Str = strhelper_SafeCat(a2, "/", 0xFFFFFFFFFFFFFFFFLL, a3);
      if ((Str & 0x80000000) != 0)
        return Str;
    }
    v17 = 0;
    v18 = "_";
  }
  else
  {
LABEL_12:
    v18 = "/";
    v17 = 1;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v33);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (__s && *__s)
  {
    Str = strhelper_SafeCat(a2, "synthvao", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v33);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v33, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, "vao", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v19 = 0;
  }
  else
  {
    Str = strhelper_SafeCat(a2, "synth", 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v33, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    v19 = 1;
  }
  Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (a4 == 1)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &__s1);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
  if (v19)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"reduction", &__s1);
    if ((Str & 0x80000000) != 0)
      return Str;
    v20 = cstdlib_strstr(__s1, "dev") || cstdlib_strstr(__s1, "DEV") ? "dev" : __s1;
    Str = strhelper_SafeCat(a2, v20, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"coder", &__s1);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
  if ((Str & 0x80000000) != 0)
    return Str;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"bitrate", &__s1) & 0x80000000) != 0
    || !*__s1
    || (paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"overheadframes", &v34) & 0x80000000) != 0
    || !*v34)
  {
    v22 = &a2[cstdlib_strlen(a2)];
    while (v22 > a2)
    {
      v24 = *--v22;
      v23 = v24;
      if ((v24 - 48) >= 0xA)
      {
        if (v23 == 102)
        {
          v25 = cstdlib_strlen(v22);
          cstdlib_memmove(v22 + 1, v22, v25 + 1);
          *v22 = *v18;
          goto LABEL_61;
        }
        break;
      }
    }
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"frequencyhz", &v31);
    if ((Str & 0x80000000) != 0)
      return Str;
    v26 = v31 / 1000;
    v27 = cstdlib_strlen(a2);
    LH_itoa(v26, &a2[v27], 0xAu);
  }
  else
  {
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, __s1, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v18, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    Str = strhelper_SafeCat(a2, v34, 0xFFFFFFFFFFFFFFFFLL, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
  }
LABEL_61:
  vf_MakeLower(a2);
  if ((v17 & 1) == 0)
  {
    v28 = ".dat";
    return strhelper_SafeCat(a2, v28, 0xFFFFFFFFFFFFFFFFLL, a3);
  }
  v21 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__s1);
  if ((v21 & 0x80000000) != 0)
    return v21;
  if (!a5)
  {
    if (!__s1 || !*__s1)
      return v21;
    Str = brokeraux_ComposeBrokerString(a1, a2, 0, 0, 0, 0, 0, v36, a3);
    if ((Str & 0x80000000) != 0)
      return Str;
    *a2 = 0;
    v28 = v36;
    return strhelper_SafeCat(a2, v28, 0xFFFFFFFFFFFFFFFFLL, a3);
  }
  if (cupreader_IsCupInTheScope(a1, &v30))
    return cupreader_PrependCupName(a2, v30, a3);
  return v21;
}

uint64_t synth_ResetParams(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 984) + 48))(*(_QWORD *)(a1 + 992));
  if ((result & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a1 + 1152) & 1) == 0
      || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 1000) + 48))(*(_QWORD *)(a1 + 1008)),
          (result & 0x80000000) == 0))
    {
      result = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", 2u);
      if ((result & 0x80000000) == 0 && (*(_BYTE *)(a1 + 1152) & 2) != 0)
      {
        result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
        if ((result & 0x80000000) == 0)
          return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pitch", 0x64u);
      }
    }
  }
  return result;
}

uint64_t synth_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth;
  return result;
}

uint64_t synth_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2164269063;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 83214;
  }
  return result;
}

uint64_t synth_ClassClose()
{
  return 0;
}

uint64_t synth_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Object;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t __b;
  uint64_t (*v34)(uint64_t, int, _QWORD *, int *, uint64_t, unsigned int);
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v10 = 2164269066;
  __b = 0;
  v34 = 0;
  cstdlib_memset(&__b, 0, 0x10uLL);
  if (!a5)
    return 2164269063;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((safeh_HandleCheck(a1, a2, 83214, 408) & 0x80000000) != 0)
    return 2164269064;
  v12 = heap_Calloc(*(_QWORD **)(v36 + 8), 1, 1160);
  if (v12)
  {
    v13 = v12;
    *(_QWORD *)v12 = a3;
    *(_QWORD *)(v12 + 8) = a4;
    *(_OWORD *)(v12 + 1016) = 0u;
    *(_BYTE *)(v12 + 1032) = 2;
    v14 = v36;
    *(_QWORD *)(v12 + 16) = v36;
    *(_QWORD *)(v12 + 24) = a1;
    *(_DWORD *)(v12 + 1076) = 1;
    Object = objc_GetObject(*(_QWORD *)(v14 + 48), (uint64_t)"SYNTHSTREAM", &v35);
    if ((Object & 0x80000000) == 0)
    {
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v35 + 8);
      Object = objc_GetObject(*(_QWORD *)(v36 + 48), (uint64_t)"SYNTHOUTPUTSINK", &v35);
      if ((Object & 0x80000000) == 0)
      {
        v16 = v35;
        *(_QWORD *)(v13 + 488) = *(_QWORD *)(v35 + 8);
        *(_OWORD *)(v13 + 496) = *(_OWORD *)(v16 + 16);
        *(_QWORD *)(v13 + 960) = v13;
        *(_QWORD *)(v13 + 968) = synth_CheckChange;
        *(_QWORD *)(v13 + 976) = synth_LearnChange;
        *(_BYTE *)(v13 + 1144) = 1;
        v17 = heap_Calloc(*(_QWORD **)(v36 + 8), 1, 232);
        *(_QWORD *)(v13 + 1088) = v17;
        if (!v17)
          goto LABEL_24;
        v18 = (__int128 *)(v13 + 960);
        LODWORD(v30) = 0;
        if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", &v30) & 0x80000000) != 0)
        {
          *(_WORD *)(v13 + 1044) = 2;
          paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", 2u);
        }
        else
        {
          v32 = 0;
          paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"finalsentencefound", &v32);
          if (v32 != 1)
            *(_WORD *)(v13 + 1044) = v30;
        }
        paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"finalsentencefound", 0);
        v19 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
        v30 = *v18;
        v31 = *(_QWORD *)(v13 + 976);
        Object = paramc_ListenerAdd(v19, "waitfactor", &v30);
        if ((Object & 0x80000000) == 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
          v30 = *v18;
          v31 = *(_QWORD *)(v13 + 976);
          Object = paramc_ListenerAdd(v20, "finalsentencefound", &v30);
          if ((Object & 0x80000000) == 0)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
            v30 = *v18;
            v31 = *(_QWORD *)(v13 + 976);
            Object = paramc_ListenerAdd(v21, "pitch", &v30);
            if ((Object & 0x80000000) == 0)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
              v30 = *v18;
              v31 = *(_QWORD *)(v13 + 976);
              Object = paramc_ListenerAdd(v22, "pitch_baseline", &v30);
              if ((Object & 0x80000000) == 0)
              {
                Object = vol_GetInterface(1u, (_QWORD *)(v13 + 984));
                if ((Object & 0x80000000) == 0)
                {
                  __b = v13;
                  v34 = PushOutput;
                  v23 = (*(uint64_t (**)(_WORD *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v13 + 984) + 32))(a3, a4, &__b, v13 + 992);
                  if ((v23 & 0x80000000) != 0)
                  {
                    v10 = v23;
                    *(_QWORD *)(v13 + 992) = 0;
                  }
                  else
                  {
                    *(_QWORD *)a5 = v13;
                    *(_DWORD *)(a5 + 8) = 83213;
                    v10 = synth_ObjReopen((_WORD **)v13, *(_QWORD *)(a5 + 8));
                    if ((v10 & 0x80000000) == 0)
                    {
                      log_OutEvent(*(uint64_t ***)(v36 + 32), 21, (uint64_t)"", v24, v25, v26, v27, v28, v30);
                      return v10;
                    }
                  }
LABEL_24:
                  synth_loc_ObjClose(v13, 0);
                  *(_QWORD *)a5 = 0;
                  *(_DWORD *)(a5 + 8) = 0;
                  return v10;
                }
              }
            }
          }
        }
      }
    }
    v10 = Object;
    goto LABEL_24;
  }
  return v10;
}

uint64_t synth_ObjClose(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  else
    return synth_loc_ObjClose(a1, 0);
}

uint64_t synth_ObjReopen(_WORD **a1, int a2)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t BrokerString;
  uint64_t v6;
  uint64_t v7;
  uint64_t Int;
  char v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  __int128 v38;
  _WORD *v39;
  uint64_t v40;
  char *__s2;
  char *__s;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  char *__s1;
  char __src[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v3 = 2164269066;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  *(_OWORD *)__src = 0u;
  v52 = 0u;
  v49 = 0;
  __s1 = 0;
  v48 = 0;
  v46 = 0;
  v44 = 0;
  __s2 = 0;
  __s = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  v47 = 0;
  v45 = 0;
  v43 = 0;
  v4 = a1[2];
  paramc_ParamSetStr(*((_QWORD *)v4 + 5), (uint64_t)"voiceaddon", "");
  BrokerString = synth_CreateBrokerString((uint64_t)a1[2], __src, 0x100uLL, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v6 = BrokerString;
    if (!LH_stricmp(__src, (char *)a1 + 672))
      return v6;
  }
  v7 = synth_CreateBrokerString((uint64_t)a1[2], __src, 0x100uLL, 1, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_13;
  v6 = v7;
  if (!LH_stricmp(__src, (char *)a1 + 672))
    return v6;
  if ((Lookup_CheckForDataFile(*a1, (uint64_t)a1[1], __src, &v46) & 0x80000000) != 0)
    __src[0] = 0;
  if (v46)
  {
    if (__src[0])
      goto LABEL_21;
    goto LABEL_14;
  }
LABEL_13:
  __src[0] = 0;
LABEL_14:
  Int = synth_CreateBrokerString((uint64_t)a1[2], __src, 0x100uLL, 0, 0);
  if ((Int & 0x80000000) != 0)
    return Int;
  Int = Lookup_CheckForDataFile(*a1, (uint64_t)a1[1], __src, &v46);
  if ((Int & 0x80000000) != 0)
    return Int;
  if (v46)
  {
    if (__src[0])
      goto LABEL_21;
  }
  else
  {
    __src[0] = 0;
  }
  Int = synth_CreateBrokerString((uint64_t)a1[2], __src, 0x100uLL, 0, 1);
  if ((Int & 0x80000000) != 0)
    return Int;
LABEL_21:
  Int = synth_loc_ObjClose((uint64_t)a1, 1);
  if ((Int & 0x80000000) != 0)
    return Int;
  cstdlib_strcpy((char *)a1 + 672, __src);
  Int = paramc_ParamGetInt(*((_QWORD *)a1[2] + 5), (uint64_t)"frequencyhz", (_DWORD *)a1 + 260);
  if ((Int & 0x80000000) != 0)
    return Int;
  Psola_GetToolSynthMode(&v47);
  if (v47 == 1)
  {
    v9 = 2;
    goto LABEL_29;
  }
  if (!v47)
  {
    v9 = 1;
LABEL_29:
    *((_BYTE *)a1 + 1152) = v9;
    goto LABEL_30;
  }
  if (v47 >= 2)
  {
    v9 = 6;
    goto LABEL_29;
  }
  *((_BYTE *)a1 + 1152) = 1;
  if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"typeofsynthesis", &__s1) & 0x80000000) == 0)
  {
    if (!cstdlib_strcmp(__s1, "psola"))
      *((_BYTE *)a1 + 1152) = 2;
    paramc_ParamRelease(*((_QWORD *)v4 + 5));
  }
LABEL_30:
  if (((_BYTE)a1[144] & 2) != 0)
  {
    v40 = 0;
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate_baseline", (unsigned int *)&v40 + 1) & 0x80000000) != 0)
    {
      *((_DWORD *)a1 + 264) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate_baseline", 0x64u);
    }
    else
    {
      *((_DWORD *)a1 + 264) = WORD2(v40);
    }
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate", (unsigned int *)&v40 + 1) & 0x80000000) != 0)
    {
      *((_WORD *)a1 + 526) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"rate", 0x64u);
      v11 = *((_WORD *)a1 + 526);
    }
    else
    {
      v11 = WORD2(v40);
      *((_WORD *)a1 + 526) = WORD2(v40);
    }
    *((_WORD *)a1 + 526) = MapProsodyValue_Scaling(50, 100, 400, *((_DWORD *)a1 + 264), v11);
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch_baseline", (unsigned int *)&v40) & 0x80000000) != 0)
    {
      *((_DWORD *)a1 + 265) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch_baseline", 0x64u);
    }
    else
    {
      *((_DWORD *)a1 + 265) = (unsigned __int16)v40;
    }
    if ((paramc_ParamGetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch", (unsigned int *)&v40) & 0x80000000) != 0)
    {
      *((_WORD *)a1 + 527) = 100;
      paramc_ParamSetUInt(*((_QWORD *)a1[2] + 5), (uint64_t)"pitch", 0x64u);
      v12 = *((_WORD *)a1 + 527);
    }
    else
    {
      v12 = v40;
      *((_WORD *)a1 + 527) = v40;
    }
    *((_WORD *)a1 + 527) = MapProsodyValue_Scaling(50, 100, 200, *((_DWORD *)a1 + 265), v12);
    v13 = *((_QWORD *)a1[2] + 5);
    v38 = *((_OWORD *)a1 + 60);
    v39 = a1[122];
    Int = paramc_ListenerAdd(v13, "rate_baseline", &v38);
    if ((Int & 0x80000000) != 0)
      return Int;
    v14 = *((_QWORD *)a1[2] + 5);
    v38 = *((_OWORD *)a1 + 60);
    v39 = a1[122];
    Int = paramc_ListenerAdd(v14, "rate", &v38);
    if ((Int & 0x80000000) != 0)
      return Int;
    if (a1[126])
    {
      (*((void (**)(void))a1[125] + 5))();
      a1[126] = 0;
    }
  }
  else if (((_BYTE)a1[144] & 1) != 0 && !a1[126])
  {
    Int = tsm_GetInterface(1u, a1 + 125);
    if ((Int & 0x80000000) == 0)
    {
      v10 = *((_QWORD *)a1[123] + 7);
      *(_QWORD *)&v38 = a1[124];
      *((_QWORD *)&v38 + 1) = v10;
      Int = (*((uint64_t (**)(_QWORD, _WORD *, __int128 *, _WORD **))a1[125] + 4))(*a1, a1[1], &v38, a1 + 126);
      if ((Int & 0x80000000) != 0)
      {
        a1[126] = 0;
        return Int;
      }
      goto LABEL_52;
    }
    return Int;
  }
LABEL_52:
  synth_Wsola__Wsola((uint64_t)a1);
  v15 = a1[136];
  v16 = *((unsigned int *)v15 + 3);
  v17 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v16);
  a1[138] = (_WORD *)v17;
  if (v17)
  {
    Synth__SetVectPointer(v17, *((_QWORD *)v15 + 6), v16);
    v18 = *((unsigned int *)v15 + 3);
    v19 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v18);
    a1[139] = (_WORD *)v19;
    if (v19)
    {
      Synth__SetVectPointer(v19, *((_QWORD *)v15 + 8), v18);
      v20 = (*((_DWORD *)v15 + 2) + *((_DWORD *)v15 + 3));
      v21 = heap_Alloc(*((_QWORD *)v4 + 1), 4 * v20);
      a1[140] = (_WORD *)v21;
      if (v21)
      {
        Synth__SetVectPointer(v21, *((_QWORD *)v15 + 9), v20);
        v22 = heap_Alloc(*((_QWORD *)v4 + 1), 2 * *((unsigned int *)v15 + 3));
        a1[142] = (_WORD *)v22;
        if (v22)
        {
          *((_QWORD *)v15 + 5) = v22;
          synth_SetWaitPeriod((uint64_t)a1, *((unsigned __int16 *)a1 + 522));
          Int = synth_GetDataHandles(a1, __src, &v45, &v44, &v43);
          if ((Int & 0x80000000) != 0)
            return Int;
          *((_DWORD *)a1 + 232) = 1;
          v23 = heap_Calloc(*((_QWORD **)v4 + 1), 1, 40);
          a1[117] = (_WORD *)v23;
          if (v23)
          {
            v24 = v44;
            v25 = v23 + 40 * (*((_DWORD *)a1 + 232) - 1);
            *(_QWORD *)v25 = v45;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(v25 + 16) = v43;
            *(_DWORD *)(v25 + 24) = 0;
            v26 = heap_Calloc(*((_QWORD **)v4 + 1), 1, 1);
            *(_QWORD *)&a1[117][20 * (*((_DWORD *)a1 + 232) - 1) + 16] = v26;
            if (v26)
            {
              Int = paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"voice", &v49);
              if ((Int & 0x80000000) != 0)
                return Int;
              if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"voiceoperatingpoint", &__s) & 0x80000000) != 0)
                v27 = 0;
              else
                v27 = cstdlib_strlen(__s) + 1;
              if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)"vopversion", &__s2) & 0x80000000) != 0
                || !cstdlib_strcmp(__s2, "0.0.0"))
              {
                v28 = 0;
              }
              else
              {
                v28 = cstdlib_strlen(__s2) + 1;
              }
              v29 = (_QWORD *)*((_QWORD *)v4 + 1);
              v30 = cstdlib_strlen(v49);
              v31 = (char *)heap_Calloc(v29, 1, (v27 + v28 + v30 + 14));
              a1[118] = v31;
              if (v31)
              {
                cstdlib_strcpy(v31, "voiceaddons.");
                v32 = cstdlib_strlen((const char *)a1[118]);
                if (cstdlib_strlen(v49))
                {
                  v33 = 0;
                  v34 = 0;
                  do
                  {
                    *((_BYTE *)a1[118] + v32 + v34++) = cstdlib_tolower(v49[v33]);
                    v33 = v34;
                  }
                  while (cstdlib_strlen(v49) > v34);
                }
                if (v27)
                {
                  cstdlib_strcat((char *)a1[118], ".");
                  cstdlib_strcat((char *)a1[118], __s);
                }
                if (v28)
                {
                  cstdlib_strcat((char *)a1[118], ".");
                  cstdlib_strcat((char *)a1[118], __s2);
                }
                paramc_ParamRelease(*((_QWORD *)v4 + 5));
                if ((paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], &v48) & 0x80000000) == 0
                  || (Int = paramc_ParamSetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], ""), (Int & 0x80000000) == 0)
                  && (Int = paramc_ParamGetStr(*((_QWORD *)v4 + 5), (uint64_t)a1[118], &v48), (Int & 0x80000000) == 0))
                {
                  Int = synth_UpdateAddons((uint64_t)a1, v48);
                  if ((Int & 0x80000000) == 0)
                  {
                    paramc_ParamRelease(*((_QWORD *)v4 + 5));
                    v35 = *((_QWORD *)v4 + 5);
                    v36 = a1[118];
                    v38 = *((_OWORD *)a1 + 60);
                    v39 = a1[122];
                    return paramc_ListenerAdd(v35, v36, &v38);
                  }
                }
                return Int;
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t synth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char __dst[64];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = 2164269065;
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  *(_WORD *)(a1 + 328) = 0;
  v8 = "text/x-realspeak-usphonemes;charset=tts";
  v9 = 1u;
  do
  {
    v10 = *(unsigned __int16 *)(a1 + 328);
    if (v10 > 8)
      goto LABEL_20;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, v8, 0, 0, a1 + 32 * v10 + 56);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_13;
    v12 = *(unsigned __int16 *)(a1 + 328);
    v13 = a1 + 32 * v12;
    *(_DWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = v8;
    *(_WORD *)(a1 + 328) = v12 + 1;
    v8 = synth_ProcessStart_szINPUT_STREAMS[v9++];
  }
  while (v9 != 7);
  v10 = *(unsigned __int16 *)(a1 + 328);
  if (v10 > 8)
    goto LABEL_20;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
          0,
          0,
          a1 + 32 * v10 + 56);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_13:
    v16 = v11;
  }
  else
  {
    v14 = *(unsigned __int16 *)(a1 + 328);
    v15 = a1 + 40 + 32 * v14;
    *(_DWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = "application/x-realspeak-markers-pp;version=4.0";
    LOWORD(v14) = v14 + 1;
    *(_WORD *)(a1 + 328) = v14;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
            0,
            1,
            a1 + 40 + 32 * (unsigned __int16)v14 + 16);
    if ((v16 & 0x80000000) == 0)
    {
      v17 = a1 + 32 * *(unsigned __int16 *)(a1 + 328);
      *(_DWORD *)(v17 + 40) = 1;
      *(_QWORD *)(v17 + 48) = "application/x-realspeak-markers-pp;version=4.0";
      v18 = cstdlib_strcmp("application/x-realspeak-markers-pp;version=4.0",
              "application/x-realspeak-markers-pp;version=4.0");
      v19 = *(_WORD *)(a1 + 328);
      if (!v18)
        *(_WORD *)(a1 + 480) = v19;
      *(_WORD *)(a1 + 328) = v19 + 1;
    }
  }
  LODWORD(v10) = *(unsigned __int16 *)(a1 + 328);
  if (v10 > 8)
  {
LABEL_20:
    v23 = 0;
    v24 = (_QWORD *)(a1 + 64);
    do
    {
      v25 = *(v24 - 1);
      if (v25)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v25, *v24);
        LOWORD(v10) = *(_WORD *)(a1 + 328);
      }
      ++v23;
      v24 += 4;
    }
    while (v23 < (unsigned __int16)v10);
    LOWORD(v10) = 0;
    v16 = v7;
    goto LABEL_25;
  }
  if ((v16 & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "audio/L16;rate=");
    v20 = *(_DWORD *)(a1 + 1040);
    v21 = cstdlib_strlen(__dst);
    LH_itoa(v20, &__dst[v21], 0xAu);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32)
                                                                                                 + 64))(a3, a4, 16, __dst, 0, 1, a1 + 32 * *(unsigned __int16 *)(a1 + 328) + 56);
    v10 = *(unsigned __int16 *)(a1 + 328);
    if ((v16 & 0x80000000) == 0)
    {
      v22 = a1 + 32 * v10;
      *(_DWORD *)(v22 + 40) = 1;
      *(_QWORD *)(v22 + 48) = 0;
      *(_WORD *)(a1 + 482) = v10;
      LOWORD(v10) = v10 + 1;
      goto LABEL_25;
    }
  }
  if ((_DWORD)v10)
  {
    v7 = v16;
    goto LABEL_20;
  }
LABEL_25:
  *(_WORD *)(a1 + 328) = v10;
  return v16;
}

uint64_t synth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t *v30;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 1160) & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  cstdlib_memset((void *)(a1 + 336), 0, 0x90uLL);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (char *)&v39 + 4, &v39);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (HIDWORD(v39))
  {
    synth_doWsolaSynthesis(a1);
    v9 = v8;
    goto LABEL_5;
  }
  v40 = 0;
  v9 = Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v40);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_59;
  v13 = *(unsigned int *)(v40 + 8);
  if (v13 < 0x20)
    goto LABEL_59;
  v14 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v13);
  *(_QWORD *)(a1 + 648) = v14;
  if (!v14)
  {
    v9 = 2164269066;
    goto LABEL_59;
  }
  cstdlib_memcpy(v14, *(const void **)v40, *(unsigned int *)(v40 + 8));
  v15 = 0;
  v16 = 0;
  *(_WORD *)(a1 + 656) = *(_DWORD *)(v40 + 8) >> 5;
  v17 = (_QWORD *)(a1 + 1016);
  v18 = (unsigned int *)(a1 + 1024);
  v38 = a1 + 1000;
  while (1)
  {
    v19 = *(unsigned __int16 *)(a1 + 656);
    if (v15 >= v19)
      break;
    v20 = *(_QWORD *)(a1 + 648);
    v21 = (int *)(v20 + 32 * v15);
    v21[3] = 0;
    v21[4] = 0;
    v22 = *v21;
    if (*v21 == 8)
    {
      v24 = Convert2SamplesX(a1, v21[6]);
      if (v24)
      {
        v25 = v24;
        if (*v17)
          goto LABEL_34;
        *(_DWORD *)(a1 + 1024) = 0;
        *(_BYTE *)(a1 + 1032) = 0;
        if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
        {
          v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1000)
                                                                                           + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
          if ((v9 & 0x80000000) == 0 && *v17)
            goto LABEL_34;
        }
        else
        {
          if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
            v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 984)
                                                                                             + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
LABEL_34:
          while (1)
          {
            v26 = *v18;
            if (v25 >= *v18)
            {
              v25 -= v26;
            }
            else
            {
              *v18 = v25;
              v26 = v25;
              v25 = 0;
            }
            *(_BYTE *)(a1 + 1032) = 2;
            cstdlib_memset(*(void **)(a1 + 1016), 0, 2 * v26);
            if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
            {
              v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 1000)
                                                                                                + 56))(*(_QWORD *)(a1 + 1008), *(unsigned __int8 *)(a1 + 1032), a1 + 1016, a1 + 1024, *(_QWORD *)(a1 + 648) + 32 * v16, (_DWORD)v15 + 1 - v16);
              if ((v9 & 0x80000000) != 0 || !*v17)
                break;
            }
            v16 = v15 + 1;
            if (!v25)
            {
              v16 = v15 + 1;
              goto LABEL_30;
            }
          }
        }
        goto LABEL_56;
      }
      goto LABEL_30;
    }
    if (v22 == 25)
    {
      v23 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", *(_DWORD *)(v20 + 32 * v15 + 24));
      goto LABEL_29;
    }
    if (v22 == 13)
    {
      v23 = synth_ResetParams(a1);
LABEL_29:
      v9 = v23;
    }
LABEL_30:
    ++v15;
    if ((v9 & 0x80000000) != 0)
    {
      LODWORD(v19) = *(unsigned __int16 *)(a1 + 656);
      break;
    }
  }
  if (v16 >= v19)
    goto LABEL_56;
  if (!*v17)
  {
    *(_DWORD *)(a1 + 1024) = 0;
    *(_BYTE *)(a1 + 1032) = 0;
    if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
    {
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 1000) + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
      if ((v9 & 0x80000000) != 0 || !*v17)
        goto LABEL_56;
    }
    else if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
    {
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 984) + 56))(*(_QWORD *)(a1 + 1008), 0, a1 + 1016, a1 + 1024, 0, 0);
    }
  }
  *(_DWORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 3;
  if ((*(_BYTE *)(a1 + 1152) & 1) != 0 || (v38 = a1 + 984, (*(_BYTE *)(a1 + 1152) & 2) != 0))
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 56))(*(_QWORD *)(a1 + 1008), 3, a1 + 1016, a1 + 1024, *(_QWORD *)(a1 + 648) + 32 * v16, *(unsigned __int16 *)(a1 + 656) - v16);
LABEL_56:
  v32 = *(_QWORD *)(a1 + 648);
  if (v32)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v32);
    *(_QWORD *)(a1 + 648) = 0;
  }
  *(_WORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
LABEL_59:
  if ((_DWORD)v39)
  {
    v33 = *(unsigned __int16 *)(a1 + 328);
    if (*(_WORD *)(a1 + 328))
    {
      v34 = 0;
      v35 = (_QWORD *)(a1 + 64);
      do
      {
        if (*(v35 - 1) && *((_DWORD *)v35 - 6) == 1)
        {
          v36 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
          if (v36 >= 0)
            v9 = v9;
          else
            v9 = v36;
          *(v35 - 1) = safeh_GetNullHandle();
          *v35 = v37;
          v33 = *(unsigned __int16 *)(a1 + 328);
        }
        ++v34;
        v35 += 4;
      }
      while (v34 < v33);
    }
  }
LABEL_5:
  if ((v9 & 0x80000000) != 0)
    goto LABEL_43;
  v10 = (_QWORD *)(a1 + 64);
  v11 = -1;
  v12 = 344;
  while (++v11 < (unint64_t)*(unsigned __int16 *)(a1 + 328))
  {
    if (!*((_DWORD *)v10 - 6))
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(v10 - 1), *v10, *(unsigned int *)(a1 + v12));
    v10 += 4;
    v12 += 16;
    if ((v9 & 0x80000000) != 0)
      goto LABEL_43;
  }
  if (InOut__IsEndState(a1))
  {
LABEL_43:
    v27 = *(unsigned int *)(a1 + 928);
    if ((_DWORD)v27)
    {
      v28 = 0;
      for (i = 0; i < v27; ++i)
      {
        v30 = *(uint64_t **)(*(_QWORD *)(a1 + 936) + v28);
        if (v30)
        {
          Lookup_DeInit(v30);
          v27 = *(unsigned int *)(a1 + 928);
        }
        v28 += 40;
      }
    }
    *(_DWORD *)(a1 + 1076) = 1;
  }
  return v9;
}

uint64_t synth_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = safeh_HandleCheck(a1, a2, 83213, 1160);
  if ((v3 & 0x80000000) != 0)
    return 2164269064;
  v4 = v3;
  v5 = *(unsigned __int16 *)(a1 + 328);
  if (*(_WORD *)(a1 + 328))
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 64);
    do
    {
      v8 = *(v7 - 1);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v8, *v7);
        if (v9 >= 0)
          v4 = v4;
        else
          v4 = v9;
        *(v7 - 1) = safeh_GetNullHandle();
        *v7 = v10;
        v5 = *(unsigned __int16 *)(a1 + 328);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 < v5);
  }
  *(_WORD *)(a1 + 328) = 0;
  return v4;
}

uint64_t synth_CheckChange(uint64_t a1, char *__s1, unsigned __int8 *a3, _DWORD *a4)
{
  char v8;
  uint64_t v9;

  *a4 = 1;
  if (!cstdlib_strcmp(__s1, "waitfactor"))
  {
    if (cstdlib_atoi(a3) < 0xA)
      return 0;
LABEL_20:
    v9 = 2164269071;
    goto LABEL_21;
  }
  if (!cstdlib_strcmp(__s1, *(const char **)(a1 + 944)) || !cstdlib_strcmp(__s1, "finalsentencefound"))
    return 0;
  v8 = *(_BYTE *)(a1 + 1152);
  if ((v8 & 2) == 0)
    goto LABEL_5;
  if (!cstdlib_strcmp(__s1, "rate"))
    goto LABEL_17;
  if (!cstdlib_strcmp(__s1, "pitch") || !cstdlib_strcmp(__s1, "pitch_baseline"))
  {
    if (cstdlib_atoi(a3) - 50 < 0x97)
      return 0;
    goto LABEL_20;
  }
  if (!cstdlib_strcmp(__s1, "rate_baseline"))
  {
LABEL_17:
    if (cstdlib_atoi(a3) - 50 < 0x15F)
      return 0;
    goto LABEL_20;
  }
  v8 = *(_BYTE *)(a1 + 1152);
LABEL_5:
  v9 = 2164269071;
  if ((v8 & 1) == 0)
  {
LABEL_9:
    v9 = 2164269063;
LABEL_21:
    *a4 = 0;
    return v9;
  }
  if (cstdlib_strcmp(__s1, "pitch"))
  {
    if (cstdlib_strcmp(__s1, "pitch_baseline"))
    {
      if (!*(_DWORD *)(a1 + 1076))
      {
        v9 = 2164269073;
        goto LABEL_21;
      }
      goto LABEL_9;
    }
    if (cstdlib_atoi(a3) - 50 >= 0x97)
      goto LABEL_21;
  }
  else if (cstdlib_atoi(a3) != 100)
  {
    v9 = 2164269057;
    goto LABEL_21;
  }
  return 0;
}

uint64_t synth_LearnChange(uint64_t a1, char *__s1, char *a3)
{
  uint64_t WaitPeriod;
  uint64_t v7;
  uint64_t updated;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  int v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;

  if (!cstdlib_strcmp(__s1, "waitfactor"))
  {
    v18 = 0;
    paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v18);
    if (v18 == 1)
      goto LABEL_8;
    v9 = (unsigned __int16)LH_atou(a3);
    updated = synth_SetWaitPeriod(a1, v9);
LABEL_11:
    v7 = updated;
    if ((updated & 0x80000000) != 0)
      return v7;
    goto LABEL_12;
  }
  if (!cstdlib_strcmp(__s1, *(const char **)(a1 + 944)))
  {
    updated = synth_UpdateAddons(a1, a3);
    goto LABEL_11;
  }
  if (!cstdlib_strcmp(__s1, "finalsentencefound"))
  {
    if ((unsigned __int16)LH_atou(a3) == 1)
    {
      v17 = 0;
      WaitPeriod = synth_GetWaitPeriod(a1, &v17);
      if ((WaitPeriod & 0x80000000) != 0)
        return WaitPeriod;
      paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", v17);
      v7 = synth_SetWaitPeriod(a1, 0);
    }
    else
    {
      v16 = 0;
      paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v16);
      v15 = synth_SetWaitPeriod(a1, (unsigned __int16)v16);
      v7 = v15 & (v15 >> 31);
      if (v15 < 0)
        return v7;
    }
    if ((v7 & 0x80000000) != 0)
      return v7;
    goto LABEL_12;
  }
LABEL_8:
  v7 = 2164269063;
LABEL_12:
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    if (cstdlib_strcmp(__s1, "pitch")
      || (v10 = (unsigned __int16)LH_atou(a3), v7 = synth_SetPitch(a1, v10), (v7 & 0x80000000) == 0))
    {
      if (!cstdlib_strcmp(__s1, "pitch_baseline"))
      {
        v12 = (unsigned __int16)LH_atoi(a3);
        return synth_SetPitchBaseline(a1, v12);
      }
      if (!cstdlib_strcmp(__s1, "rate"))
      {
        v13 = (unsigned __int16)LH_atou(a3);
        return synth_SetRate(a1, v13);
      }
      if (!cstdlib_strcmp(__s1, "rate_baseline"))
      {
        v11 = (unsigned __int16)LH_atou(a3);
        return synth_SetRateBaseline(a1, v11);
      }
    }
  }
  return v7;
}

uint64_t PushOutput(uint64_t a1, int a2, _QWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v23 = 0;
  v24 = a6;
  result = 2164269062;
  if (a1 && a3 && a4)
  {
    result = 0;
    if (a5)
    {
      v13 = 0;
      if (a6)
      {
        v14 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
        result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v14 + 56), *(_QWORD *)(v14 + 64), &v23);
        v15 = v23 >> 1;
        v23 >>= 1;
        if ((result & 0x80000000) != 0)
        {
          v13 = 0;
        }
        else
        {
          v16 = 0;
          do
          {
            *(_DWORD *)(a5 + v16 + 12) += v15;
            v16 += 32;
          }
          while (32 * a6 != v16);
          v17 = a1 + 32 * *(unsigned __int16 *)(a1 + 480);
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v17 + 56), *(_QWORD *)(v17 + 64), a5, 32 * a6);
          v13 = 1;
        }
      }
    }
    else
    {
      v13 = 0;
    }
    if (*a3 && *a4)
    {
      v18 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 120))(*(_QWORD *)(v18 + 56), *(_QWORD *)(v18 + 64), (2 * *a4));
      *a3 = 0;
      v13 = 1;
    }
    if ((result & 0x80000000) != 0)
      goto LABEL_26;
    v19 = 2 * v13;
    v20 = a2 == 3 ? 1 : v19;
    result = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, int *, int *))(a1 + 488))(*(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504), v20, a4, (int *)&v24);
    if ((result & 0x80000000) != 0)
      goto LABEL_26;
    v21 = *a4;
    if (a2 != 3 && v21)
    {
      v22 = a1 + 32 * *(unsigned __int16 *)(a1 + 482);
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)(a1 + 32) + 112))(*(_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 64), a3, (2 * v21));
      if ((result & 0x80000000) != 0)
      {
LABEL_26:
        *a3 = 0;
        *a4 = 0;
        return result;
      }
      v21 = *a4;
    }
    if (a2 == 3 || !v21)
      goto LABEL_26;
  }
  return result;
}

uint64_t synth_loc_ObjClose(uint64_t a1, int a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  uint64_t v32;
  int v33;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;

  *(_BYTE *)(a1 + 672) = 0;
  v4 = *(_BYTE **)(a1 + 944);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v6 = paramc_ListenerRemove(v5, v4, &v37);
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", "");
    v7 = v6 & (v6 >> 31);
    v8 = *(_QWORD *)(a1 + 944);
    if (v8)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v8);
      *(_QWORD *)(a1 + 944) = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(a1 + 928))
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 936);
    v12 = v11;
    do
    {
      if (v12)
      {
        if (*(_QWORD *)(v12 + v9))
        {
          v7 = Lookup_ObjClose((uint64_t *)(v12 + v9));
          v11 = *(_QWORD *)(a1 + 936);
        }
        if (*(_QWORD *)(v11 + v9 + 16))
        {
          v7 = Pmk_Lookup_ObjClose(v11 + v9 + 16);
          v11 = *(_QWORD *)(a1 + 936);
        }
        if (*(_QWORD *)(v11 + v9 + 32))
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v11 + v9 + 32));
          v11 = *(_QWORD *)(a1 + 936);
          *(_QWORD *)(v11 + v9 + 32) = 0;
        }
        v12 = v11;
      }
      ++v10;
      v9 += 40;
    }
    while (v10 < *(unsigned int *)(a1 + 928));
    if (v11)
      goto LABEL_17;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 936);
    if (v11)
    {
LABEL_17:
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v11);
      *(_QWORD *)(a1 + 936) = 0;
    }
  }
  *(_DWORD *)(a1 + 928) = 0;
  v13 = *(_QWORD *)(a1 + 1104);
  if (v13)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v13);
    *(_QWORD *)(a1 + 1104) = 0;
  }
  v14 = *(_QWORD *)(a1 + 1112);
  if (v14)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v14);
    *(_QWORD *)(a1 + 1112) = 0;
  }
  v15 = *(_QWORD *)(a1 + 1120);
  if (v15)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    *(_QWORD *)(a1 + 1120) = 0;
  }
  v16 = *(_QWORD *)(a1 + 1136);
  if (v16)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v16);
    *(_QWORD *)(a1 + 1136) = 0;
  }
  if ((*(_BYTE *)(a1 + 1152) & 2) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v18 = paramc_ListenerRemove(v17, "rate", &v37);
    if ((int)v7 > -1 && v18 < 0)
      LODWORD(v7) = v18;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v21 = paramc_ListenerRemove(v20, "rate_baseline", &v37);
    if ((int)v7 > -1 && v21 < 0)
      v7 = v21;
    else
      v7 = v7;
  }
  if (a2)
  {
    cstdlib_memset(*(void **)(a1 + 1088), 0, 0xE8uLL);
  }
  else
  {
    if (*(_QWORD *)(a1 + 1008))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 1000) + 40))();
      *(_QWORD *)(a1 + 1008) = 0;
    }
    if (*(_QWORD *)(a1 + 992))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 984) + 40))();
      *(_QWORD *)(a1 + 992) = 0;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v24 = paramc_ListenerRemove(v23, "waitfactor", &v37);
    if ((int)v7 > -1 && v24 < 0)
      LODWORD(v7) = v24;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v27 = paramc_ListenerRemove(v26, "finalsentencefound", &v37);
    if ((int)v7 > -1 && v27 < 0)
      LODWORD(v7) = v27;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v30 = paramc_ListenerRemove(v29, "pitch", &v37);
    if ((int)v7 > -1 && v30 < 0)
      LODWORD(v7) = v30;
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v37 = *(_OWORD *)(a1 + 960);
    v38 = *(_QWORD *)(a1 + 976);
    v33 = paramc_ListenerRemove(v32, "pitch_baseline", &v37);
    if ((int)v7 > -1 && v33 < 0)
      v7 = v33;
    else
      v7 = v7;
    v35 = *(_QWORD *)(a1 + 1088);
    if (v35)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v35);
      *(_QWORD *)(a1 + 1088) = 0;
    }
    if (*(_QWORD *)(a1 + 488))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHOUTPUTSINK");
    if (*(_QWORD *)(a1 + 32))
      objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
  }
  return v7;
}

uint64_t synth_UpdateAddons(uint64_t a1, char *__s)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  int v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  int v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[256];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = 2164269066;
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v6 = cstdlib_strlen(__s);
  v7 = (char *)heap_Calloc(v5, 1, (v6 + 1));
  if (v7)
  {
    v8 = v7;
    cstdlib_strcpy(v7, __s);
    if (*(_DWORD *)(a1 + 928) >= 2u)
    {
      v9 = 0;
      v10 = 1;
      v11 = 80;
      while (1)
      {
        v12 = cstdlib_strchr(v8, 59);
        if (!v12)
          goto LABEL_61;
        v13 = v12;
        v14 = v8;
        do
        {
          *v13 = 0;
          v15 = cstdlib_strcmp(v14, *(const char **)(*(_QWORD *)(a1 + 936) + 40 * v10 + 32));
          *v13 = 59;
          v14 = v13 + 1;
          v16 = cstdlib_strchr(v13 + 1, 59);
          v13 = v16;
          if (v15)
            v17 = v16 == 0;
          else
            v17 = 1;
        }
        while (!v17);
        if (v15)
        {
LABEL_61:
          v9 = 0;
          *(_DWORD *)v57 = 0;
          if (v10 < *(unsigned int *)(a1 + 928))
          {
            v18 = *(_QWORD *)(a1 + 936);
            v19 = *(_QWORD *)(v18 + 40 * v10);
            if (v19)
            {
              v20 = Lookup_NrUnits(v19, v57);
              if ((v20 & 0x80000000) != 0)
              {
                v9 = v20;
                goto LABEL_56;
              }
              v9 = Lookup_ObjClose((uint64_t *)(*(_QWORD *)(a1 + 936) + 40 * v10));
              if ((v9 & 0x80000000) != 0)
                goto LABEL_56;
              v18 = *(_QWORD *)(a1 + 936);
            }
            else
            {
              v9 = 0;
            }
            v21 = v18 + 40 * v10;
            v23 = *(_QWORD *)(v21 + 16);
            v22 = v21 + 16;
            if (v23)
            {
              v9 = Pmk_Lookup_ObjClose(v22);
              if ((v9 & 0x80000000) != 0)
                goto LABEL_56;
              v18 = *(_QWORD *)(a1 + 936);
            }
            v24 = *(_QWORD *)(v18 + 40 * v10 + 32);
            if (v24)
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
              v18 = *(_QWORD *)(a1 + 936);
              *(_QWORD *)(v18 + 40 * v10 + 32) = 0;
            }
            v25 = *(unsigned int *)(a1 + 928);
            if (v10 + 1 < v25)
            {
              v26 = v11;
              v27 = v10;
              do
              {
                v28 = v18 + 40 * v27;
                v29 = (__int128 *)(v18 + v26);
                v30 = *v29;
                v31 = v29[1];
                *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 4);
                *(_OWORD *)v28 = v30;
                *(_OWORD *)(v28 + 16) = v31;
                v18 = *(_QWORD *)(a1 + 936);
                *(_DWORD *)(v18 + 40 * v27 + 24) -= *(_DWORD *)v57;
                v25 = *(unsigned int *)(a1 + 928);
                v32 = v27 + 2;
                ++v27;
                v26 += 40;
              }
              while (v32 < v25);
            }
            *(_DWORD *)(a1 + 928) = v25 - 1;
          }
        }
        ++v10;
        v11 += 40;
        if (v10 >= *(unsigned int *)(a1 + 928))
          goto LABEL_30;
      }
    }
    v9 = 0;
LABEL_30:
    v33 = cstdlib_strchr(v8, 59);
    if (!v33)
      goto LABEL_56;
    v34 = v33;
    v35 = v8;
    while (2)
    {
      v36 = 0;
      *v34 = 0;
      v37 = 72;
      while (++v36 < (unint64_t)*(unsigned int *)(a1 + 928))
      {
        v38 = v37 + 40;
        v39 = cstdlib_strcmp(v35, *(const char **)(*(_QWORD *)(a1 + 936) + v37));
        v37 = v38;
        if (!v39)
          goto LABEL_51;
      }
      v53 = 0;
      if (!*v35)
      {
        v9 = 0;
        goto LABEL_51;
      }
      v55 = 0;
      v56 = 0;
      v54 = 0;
      paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", v35);
      v9 = CheckAndGetData(a1, v57, 0, &v53, &v56, &v55, &v54);
      if ((v9 & 0x80000000) == 0)
      {
        if (!(_DWORD)v53)
        {
          v9 = CheckAndGetData(a1, v57, 1, &v53, &v56, &v55, &v54);
          if ((v9 & 0x80000000) != 0)
            break;
          if (!(_DWORD)v53)
          {
            v9 = 2164269076;
            break;
          }
        }
        v40 = *(_DWORD *)(a1 + 928) + 1;
        *(_DWORD *)(a1 + 928) = v40;
        v41 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 936), 40 * v40);
        if (!v41)
        {
LABEL_53:
          v9 = 2164269066;
          break;
        }
        *(_QWORD *)(a1 + 936) = v41;
        v42 = v55;
        v43 = *(_DWORD *)(a1 + 928);
        v44 = v43 - 1;
        v45 = (_QWORD *)(v41 + 40 * (v43 - 1));
        *v45 = v56;
        v45[1] = v42;
        v45[2] = v54;
        if (v43 <= 1)
        {
          *(_DWORD *)(v41 + 40 * v44 + 24) = 0;
          goto LABEL_49;
        }
        v46 = v43 - 2;
        v47 = *(_QWORD *)(v41 + 40 * (v43 - 2));
        if (!v47)
        {
LABEL_48:
          *(_DWORD *)(v41 + 40 * v44 + 24) = *(_DWORD *)(v41 + 40 * v46 + 24) + v47;
LABEL_49:
          v49 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
          v50 = cstdlib_strlen(v35);
          v51 = (char *)heap_Calloc(v49, (v50 + 1), 1);
          *(_QWORD *)(*(_QWORD *)(a1 + 936) + 40 * (*(_DWORD *)(a1 + 928) - 1) + 32) = v51;
          if (v51)
          {
            cstdlib_strcpy(v51, v35);
LABEL_51:
            *v34 = 59;
            v35 = v34 + 1;
            v34 = cstdlib_strchr(v34 + 1, 59);
            if (v34)
              continue;
LABEL_56:
            heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v8);
            return v9;
          }
          goto LABEL_53;
        }
        v9 = Lookup_NrUnits(*(_QWORD *)(v41 + 40 * v46), (_DWORD *)&v53 + 1);
        if ((v9 & 0x80000000) == 0)
        {
          v41 = *(_QWORD *)(a1 + 936);
          v48 = *(_DWORD *)(a1 + 928);
          LODWORD(v47) = HIDWORD(v53);
          v46 = v48 - 2;
          v44 = v48 - 1;
          goto LABEL_48;
        }
      }
      break;
    }
    --*(_DWORD *)(a1 + 928);
    goto LABEL_56;
  }
  return v4;
}

uint64_t CheckAndGetData(uint64_t a1, char *a2, int a3, _DWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t BrokerString;
  uint64_t DataHandles;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;

  v20 = 0;
  BrokerString = synth_CreateBrokerString(*(_QWORD *)(a1 + 16), a2, 0x100uLL, 0, a3);
  if ((BrokerString & 0x80000000) != 0)
  {
    DataHandles = BrokerString;
  }
  else
  {
    DataHandles = Lookup_CheckForDataFile(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a2, &v20);
    if ((DataHandles & 0x80000000) == 0)
    {
      if (v20)
      {
        DataHandles = synth_GetDataHandles((_WORD **)a1, a2, a5, a6, a7);
        if ((DataHandles & 0x80000000) != 0)
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 45003, (uint64_t)"%s%s", v15, v16, v17, v18, "brokerStr");
      }
    }
  }
  *a4 = v20;
  return DataHandles;
}

uint64_t synth_GetDataHandles(_WORD **a1, char *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  _WORD *v9;
  uint64_t Str;
  uint64_t v11;
  size_t v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v18;
  signed int Int;
  int v20;
  char *__s1;
  char *v22;
  char __dst[256];
  char v24[256];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9 = a1[2];
  __s1 = 0;
  v22 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  Str = paramc_ParamGetStr(*((_QWORD *)v9 + 5), (uint64_t)"coder", &__s1);
  if ((Str & 0x80000000) != 0)
    goto LABEL_26;
  if (!cstdlib_strcmp(__s1, "1175mrf22"))
  {
    v11 = 2164269057;
    goto LABEL_27;
  }
  v11 = Lookup_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[3], (uint64_t)a2, a3);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_29;
  if (((_BYTE)a1[144] & 2) == 0)
    return v11;
  if (!a2)
  {
    v11 = 2164269063;
    goto LABEL_27;
  }
  v12 = cstdlib_strlen(a2);
  v24[0] = 0;
  if (v12 <= cstdlib_strlen(".dat") || cstdlib_strcmp(&a2[v12 - 4], ".dat"))
  {
    Str = strhelper_SafeCat(v24, a2, 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
    if ((Str & 0x80000000) != 0)
    {
LABEL_26:
      v11 = Str;
      goto LABEL_27;
    }
    v13 = "/";
    v14 = 1;
  }
  else
  {
    Str = strhelper_SafeCat(v24, a2, v12 - 4, 0x100uLL);
    if ((Str & 0x80000000) != 0)
      goto LABEL_26;
    v14 = 0;
    v13 = "_";
  }
  Str = strhelper_SafeCat(v24, v13, 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((Str & 0x80000000) != 0)
    goto LABEL_26;
  v11 = strhelper_SafeCat(v24, "pmk", 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((int)v11 < 0)
    v15 = 1;
  else
    v15 = v14;
  if ((v15 & 1) == 0)
    v11 = strhelper_SafeCat(v24, ".dat", 0xFFFFFFFFFFFFFFFFLL, 0x100uLL);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_27;
  v16 = Pmk_Lookup_ObjOpen(*a1, (int)a1[1], (uint64_t)a1[3], (uint64_t)v24, a5);
  if ((v16 & 0x80000000) != 0)
  {
    v11 = v16;
    v18 = *((_BYTE *)a1 + 1152);
    *a5 = 0;
    if ((v18 & 4) != 0)
      return 0;
    goto LABEL_27;
  }
  v11 = Pmk_Lookup_Fingerprint(*a5, &v22);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_27:
    if (!*a3)
      goto LABEL_30;
    Lookup_ObjClose(a3);
LABEL_29:
    *a3 = 0;
LABEL_30:
    if (*a5)
    {
      Pmk_Lookup_ObjClose((uint64_t)a5);
      *a5 = 0;
    }
    return v11;
  }
  if (*a3)
  {
    v11 = Lookup_Fingerprint(*a3, __dst, 0x100u);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_27;
  }
  else
  {
    cstdlib_strcpy(__dst, "");
  }
  if (cstdlib_strcmp(v22, __dst))
    v11 = 2164269081;
  else
    v11 = v11;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_27;
  v20 = 0;
  Int = paramc_ParamGetInt(*((_QWORD *)v9 + 5), (uint64_t)"pmksync", &v20);
  if (Int >= 0 && v20 != 0)
    v11 = Int;
  else
    v11 = 0;
  *((_DWORD *)a1 + 287) = Int >= 0 && v20 != 0;
  return v11;
}

uint64_t TenthOfMsToSamples(int a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  result = 0;
  if (a1 > 15999)
  {
    if (a1 == 16000)
    {
      v4 = HIWORD(a2);
      v5 = 62676 * HIWORD(a2)
         + 19779 * (unsigned __int16)a2
         + ((62676 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v6 = 39558;
      goto LABEL_11;
    }
    if (a1 == 22050)
    {
      v5 = 28836 * HIWORD(a2)
         + 6717 * (unsigned __int16)a2
         + ((28836 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v7 = 13434 * HIWORD(a2) + 2 * a2;
      return v7 + (v5 >> 15);
    }
  }
  else if (a1 == 8000)
  {
    return 2
         * (26272 * HIWORD(a2)
          + ((64821 * HIWORD(a2)
            + 13136 * (unsigned __int16)a2
            + ((64821 * (unsigned __int16)a2 + 0x8000) >> 16)
            + 0x4000) >> 15));
  }
  else if (a1 == 11025)
  {
    v4 = HIWORD(a2);
    v5 = 47186 * HIWORD(a2)
       + 3358 * (unsigned __int16)a2
       + ((47186 * (unsigned __int16)a2 + 0x8000) >> 16)
       + 0x4000;
    v6 = 6716;
LABEL_11:
    v7 = a2 + v4 * v6;
    return v7 + (v5 >> 15);
  }
  return result;
}

uint64_t GetMaxTenthOfMs(int a1)
{
  if (a1 > 15999)
  {
    if (a1 != 16000)
    {
      if (a1 == 22050)
        return 1947830972;
      return 0;
    }
    return 2678267587;
  }
  else
  {
    if (a1 != 8000)
    {
      if (a1 == 11025)
        return 3895661945;
      return 0;
    }
    return 3471966206;
  }
}

uint64_t MsToSamples(int a1, unsigned int a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;

  result = 0;
  if (a1 > 15999)
  {
    if (a1 != 16000)
    {
      if (a1 != 22050)
        return result;
      v4 = 22 * a2;
      v5 = HIWORD(a2);
      v6 = 26214 * HIWORD(a2)
         + 1638 * (unsigned __int16)a2
         + ((26214 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v7 = 3276;
      return v4 + v5 * v7 + (v6 >> 15);
    }
    v8 = 36938 * HIWORD(a2)
       + 1191 * (unsigned __int16)a2
       + ((36938 * (unsigned __int16)a2 + 0x8000) >> 16)
       + 0x4000;
    v9 = 2382 * HIWORD(a2) + 16 * a2;
  }
  else
  {
    if (a1 != 8000)
    {
      if (a1 != 11025)
        return result;
      v4 = 11 * a2;
      v5 = HIWORD(a2);
      v6 = 13107 * HIWORD(a2)
         + 819 * (unsigned __int16)a2
         + ((13107 * (unsigned __int16)a2 + 0x8000) >> 16)
         + 0x4000;
      v7 = 1638;
      return v4 + v5 * v7 + (v6 >> 15);
    }
    v8 = 51237 * HIWORD(a2)
       + 595 * (unsigned __int16)a2
       + ((51237 * (unsigned __int16)a2 + 0x8000) >> 16)
       + 0x4000;
    v9 = 1190 * HIWORD(a2) + 8 * a2;
  }
  return v9 + (v8 >> 15);
}

size_t vf_MakeLower(const char *a1)
{
  size_t result;
  uint64_t v3;
  unsigned int v4;

  if (!a1)
    return 2164269063;
  result = cstdlib_strlen(a1);
  if (result)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      a1[v3] = cstdlib_tolower(a1[v3]);
      v3 = v4;
    }
    while (cstdlib_strlen(a1) > v4++);
    return 0;
  }
  return result;
}

uint64_t db_hlp_GetString(const char *a1, unsigned int a2, void *__b, size_t __len)
{
  unsigned __int16 v7;
  int v8;

  if (a2 >= __len)
    return 2147491840;
  cstdlib_memset(__b, 0, __len);
  cstdlib_strncpy((char *)__b, a1, a2);
  v7 = cstdlib_strlen((const char *)__b) - 1;
  if ((v7 & 0x8000) == 0)
  {
    do
    {
      if (*((_BYTE *)__b + v7) != 32)
        break;
      v8 = (__int16)v7;
      *((_BYTE *)__b + v7--) = 0;
    }
    while (v8 > 0);
  }
  return 0;
}

uint64_t db_hlp_SetString(void *a1, unsigned int a2, char *__s)
{
  size_t v7;
  int i;

  if (cstdlib_strlen(__s) > a2)
    return 2147491840;
  v7 = cstdlib_strlen(__s);
  cstdlib_memmove(a1, __s, v7);
  for (i = cstdlib_strlen(__s); (int)a2 > (__int16)i; ++i)
    *((_BYTE *)a1 + (__int16)i) = 32;
  return 0;
}

uint64_t db_GetVersionInformation(const char *a1, int a2, void *a3, size_t a4, void *a5, size_t a6, void *a7, size_t a8, unsigned __int8 *a9, unsigned __int16 a10, void *a11, unsigned __int16 a12, void *a13, size_t a14, unsigned __int8 *a15, unsigned __int16 a16, void *a17, unsigned __int16 a18, void *a19, unsigned __int16 a20)
{
  size_t v21;

  LOWORD(v21) = a14;
  return db_GetVersionInformationExt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v21, a15, a16, a17, a18, a19,
           a20,
           0,
           0,
           0,
           0);
}

uint64_t db_GetVersionInformationExt(const char *a1, int a2, void *a3, size_t a4, void *__b, size_t __len, void *a7, size_t a8, unsigned __int8 *a9, unsigned __int16 a10, void *a11, unsigned __int16 a12, void *__ba, size_t __lena, unsigned __int8 *a15, unsigned __int16 a16, void *a17, unsigned __int16 a18, void *a19, unsigned __int16 a20,void *a21,unsigned __int16 a22,void *a23,unsigned __int16 a24)
{
  uint64_t String;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  if (a2 != 144)
    return 2147491840;
  if (a3)
  {
    String = db_hlp_GetString(a1 + 4, 8u, a3, a4);
    if ((String & 0x80000000) != 0)
      return String;
  }
  if (__b)
  {
    String = db_hlp_GetString(a1 + 12, 8u, __b, __len);
    if ((String & 0x80000000) != 0)
      return String;
  }
  if (a7)
  {
    String = db_hlp_GetString(a1 + 24, 8u, a7, a8);
    if ((String & 0x80000000) != 0)
      return String;
  }
  if (__ba)
  {
    String = db_hlp_GetString(a1 + 32, 6u, __ba, (unsigned __int16)__lena);
    if ((String & 0x80000000) != 0)
      return String;
  }
  if (a17)
  {
    String = db_hlp_GetString(a1 + 38, 6u, a17, a18);
    if ((String & 0x80000000) != 0)
      return String;
  }
  if (a15)
  {
    v29 = db_hlp_GetString(a1 + 44, 0x20u, a15, a16);
    if ((int)cstdlib_strlen((const char *)a15) >= 1)
    {
      v30 = 0;
      do
      {
        a15[v30] = cstdlib_tolower(a15[v30]);
        ++v30;
      }
      while ((int)cstdlib_strlen((const char *)a15) > v30);
    }
    if ((v29 & 0x80000000) != 0)
      return v29;
    if (!a9)
      goto LABEL_25;
  }
  else
  {
    v29 = 0;
    if (!a9)
      goto LABEL_25;
  }
  v29 = db_hlp_GetString(a1 + 76, 8u, a9, a10);
  if ((int)cstdlib_strlen((const char *)a9) >= 1)
  {
    v31 = 0;
    do
    {
      a9[v31] = cstdlib_tolower(a9[v31]);
      ++v31;
    }
    while ((int)cstdlib_strlen((const char *)a9) > v31);
  }
  if ((v29 & 0x80000000) != 0)
    return v29;
LABEL_25:
  if (a19)
  {
    String = db_hlp_GetString(a1 + 84, 0x20u, a19, a20);
    if ((String & 0x80000000) != 0)
      return String;
    v29 = 0;
  }
  if (!a11)
    goto LABEL_31;
  String = db_hlp_GetString(a1 + 135, 4u, a11, a12);
  if ((String & 0x80000000) != 0)
    return String;
  v29 = 0;
LABEL_31:
  if (!a21)
  {
    if (a23)
      return db_hlp_GetString(a1 + 132, 3u, a23, a24);
    return v29;
  }
  v32 = db_hlp_GetString(a1 + 128, 4u, a21, a22);
  v29 = v32;
  if (!a23 || (v32 & 0x80000000) != 0)
    return v29;
  return db_hlp_GetString(a1 + 132, 3u, a23, a24);
}

uint64_t db_CorrectVersionInformation(uint64_t a1, int a2, char *a3, char *__s, char *a5, char *a6, char *a7, char *a8, char *__sa, char *a10, char *a11)
{
  uint64_t result;

  if (a2 != 144)
    return 2147491840;
  if (!a3 || (result = db_hlp_SetString((void *)(a1 + 4), 8u, a3), (result & 0x80000000) == 0))
  {
    if (!__s || (result = db_hlp_SetString((void *)(a1 + 12), 8u, __s), (result & 0x80000000) == 0))
    {
      if (!a5 || (result = db_hlp_SetString((void *)(a1 + 24), 8u, a5), (result & 0x80000000) == 0))
      {
        if (!a8 || (result = db_hlp_SetString((void *)(a1 + 32), 6u, a8), (result & 0x80000000) == 0))
        {
          if (!a10 || (result = db_hlp_SetString((void *)(a1 + 38), 6u, a10), (result & 0x80000000) == 0))
          {
            if (!__sa || (result = db_hlp_SetString((void *)(a1 + 44), 0x20u, __sa), (result & 0x80000000) == 0))
            {
              if (!a6 || (result = db_hlp_SetString((void *)(a1 + 76), 8u, a6), (result & 0x80000000) == 0))
              {
                if (a11)
                {
                  result = db_hlp_SetString((void *)(a1 + 84), 0x20u, a11);
                  if (!a7 || (result & 0x80000000) != 0)
                    return result;
                }
                else if (!a7)
                {
                  return 0;
                }
                return db_hlp_SetString((void *)(a1 + 135), 4u, a7);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t db_FormatDBHeader(uint64_t a1, int a2, int a3, char *a4, char *a5, int a6, char *a7, char *a8, char *a9, char *a10, char *a11, char *a12, char *__s, char *a14, char *a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;
  int v23;
  int __src;

  v23 = a6;
  __src = a3;
  if (a2 != 144)
    return 2147491840;
  cstdlib_memset((void *)a1, 0, 0x90uLL);
  cstdlib_memmove((void *)a1, &__src, 4uLL);
  cstdlib_memmove((void *)(a1 + 20), &v23, 4uLL);
  cstdlib_memmove((void *)(a1 + 116), &a16, 4uLL);
  cstdlib_memmove((void *)(a1 + 120), (char *)&a16 + 4, 4uLL);
  cstdlib_memmove((void *)(a1 + 124), &a17, 4uLL);
  result = db_hlp_SetString((void *)(a1 + 128), 4u, a12);
  if ((result & 0x80000000) == 0)
  {
    result = db_hlp_SetString((void *)(a1 + 132), 3u, __s);
    if ((result & 0x80000000) == 0)
      return db_CorrectVersionInformation(a1, 144, a4, a5, a7, a10, a11, a8, a9, a14, a15);
  }
  return result;
}

uint64_t tsm_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ITsm;
  return result;
}

uint64_t tsm_ObjOpen(_WORD *a1, uint64_t a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t UInt;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t (*v21)(uint64_t, const char *, const char *);
  unsigned int v22;
  uint64_t v23;

  v23 = 0;
  v22 = 0;
  v4 = 2164269066;
  if (!a4)
    return 2164269062;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (!a3)
    return 2164269063;
  v10 = heap_Calloc(*(_QWORD **)(v23 + 8), 1, 744);
  if (v10)
  {
    v11 = v10;
    *(_QWORD *)v10 = v23;
    *(_QWORD *)(v10 + 8) = a1;
    *(_QWORD *)(v10 + 16) = a2;
    v12 = v23;
    *(_QWORD *)(v10 + 48) = *(_QWORD *)(v23 + 40);
    *(_OWORD *)(v10 + 24) = *a3;
    UInt = critsec_ObjOpen(*(_QWORD *)(v12 + 16), *(_QWORD **)(v12 + 8), (uint64_t *)(v10 + 728));
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    UInt = critsec_ObjOpen(*(_QWORD *)(v23 + 16), *(_QWORD **)(v23 + 8), (uint64_t *)(v11 + 736));
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_WORD *)(v11 + 80) = 100;
    *(_DWORD *)(v11 + 40) = 1;
    *(_DWORD *)(v11 + 720) = 0;
    UInt = paramc_ParamSetStr(*(_QWORD *)(v11 + 48), (uint64_t)"pausestatus", "0");
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_DWORD *)(v11 + 684) = 0;
    SetRateLevelBeforePause(v11, 100);
    UInt = paramc_ParamGetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"frequencyhz", &v22);
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    *(_WORD *)(v11 + 712) = v22;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"wordspermin", &v22) & 0x80000000) != 0)
    {
      v22 = 200;
      paramc_ParamSetUInt(*(_QWORD *)(v23 + 40), (uint64_t)"wordspermin", 0xC8u);
    }
    *(_DWORD *)(v11 + 716) = v22;
    v14 = WSOLA__Create(*(_QWORD *)v11, *(_WORD *)(v11 + 712));
    *(_QWORD *)(v11 + 704) = v14;
    if (!v14)
      goto LABEL_28;
    UInt = paramc_ParamSetStr(*(_QWORD *)(v11 + 48), (uint64_t)"pausestatus", "0");
    if ((UInt & 0x80000000) != 0)
      goto LABEL_27;
    if ((paramc_ParamGetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"rate", &v22) & 0x80000000) != 0)
    {
      v22 = 100;
      SetRate(v11, 0x64u);
      UInt = paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"rate", v22);
      if ((UInt & 0x80000000) != 0)
        goto LABEL_27;
    }
    else
    {
      SetRate(v11, (unsigned __int16)v22);
    }
    v15 = v22;
    if (v22 <= 0x32)
      v15 = 50;
    if (v15 >= 0x190)
      v15 = 400;
    paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"ratewpm", (v15 * *(_DWORD *)(v11 + 716) + 50) / 0x64);
    *(_QWORD *)(v11 + 56) = v11;
    *(_QWORD *)(v11 + 64) = acceptor_TsmCheckRange;
    *(_QWORD *)(v11 + 72) = acceptor_TsmLearnChange;
    v16 = *(_QWORD *)(v11 + 48);
    v20 = *(_OWORD *)(v11 + 56);
    v21 = acceptor_TsmLearnChange;
    UInt = paramc_ListenerAdd(v16, "wordspermin", &v20);
    if ((UInt & 0x80000000) == 0)
    {
      v17 = *(_QWORD *)(v11 + 48);
      v20 = *(_OWORD *)(v11 + 56);
      v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(v11 + 72);
      UInt = paramc_ListenerAdd(v17, "rate", &v20);
      if ((UInt & 0x80000000) == 0)
      {
        v18 = *(_QWORD *)(v11 + 48);
        v20 = *(_OWORD *)(v11 + 56);
        v21 = *(uint64_t (**)(uint64_t, const char *, const char *))(v11 + 72);
        v4 = paramc_ListenerAdd(v18, "ratewpm", &v20);
        if ((v4 & 0x80000000) == 0)
        {
LABEL_29:
          *a4 = v11;
          return v4;
        }
LABEL_28:
        tsm_ObjClose(v11);
        v11 = 0;
        goto LABEL_29;
      }
    }
LABEL_27:
    v4 = UInt;
    goto LABEL_28;
  }
  return v4;
}

uint64_t tsm_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  if (!a1)
    return 2164269062;
  if (*(_DWORD *)(a1 + 40) != 1)
    FreeTask((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v2);
  *(_QWORD *)(a1 + 136) = 0;
  if (*(_QWORD *)(a1 + 704))
    WSOLA__Remove((uint64_t *)(a1 + 704));
  v3 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v3, "wordspermin", &v9);
  v4 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v4, "rate", &v9);
  v5 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  paramc_ListenerRemove(v5, "ratewpm", &v9);
  v6 = *(_QWORD *)(a1 + 728);
  if (v6)
    critsec_ObjClose(v6);
  v7 = *(_QWORD *)(a1 + 736);
  if (v7)
    critsec_ObjClose(v7);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

uint64_t tsm_ResetParams(uint64_t a1)
{
  if (a1)
    return paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"rate", 0x64u);
  else
    return 2164269062;
}

uint64_t tsm_Process(uint64_t a1, int a2, uint64_t *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  int v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t Rate;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  int OutputLength;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  _QWORD *v89;
  _DWORD *v90;
  double v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v106;
  int v107;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  __int16 *v113;
  _QWORD *v114;
  int *v115;
  int v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 v120[9];

  v8 = 2164269066;
  v9 = 2164269062;
  if (!a1)
    return v9;
  v10 = a3;
  if (!a3)
    return v9;
  v11 = a4;
  if (!a4)
    return v9;
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 == -1)
    return 2164269073;
  v15 = *a3;
  if (!(a5 | *a3))
  {
    if (v13 == 1)
    {
      v15 = 0;
    }
    else
    {
      FreeTask((_QWORD *)a1);
      v15 = *v10;
    }
    *(_DWORD *)(a1 + 40) = 1;
LABEL_189:
    if (a5 | v15)
      return 2164269073;
    *(_DWORD *)(a1 + 40) = 3;
    *(_DWORD *)(a1 + 696) = 0;
    *(_BYTE *)(a1 + 148) = 1;
    cstdlib_memset((void *)(a1 + 152), 0, 0x200uLL);
    *(_OWORD *)(a1 + 88) = 0u;
    v89 = (_QWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 664) = 1;
    v90 = (_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 668) = 0u;
    if (*(_DWORD *)(a1 + 684))
      SetRate(a1, *(unsigned __int16 *)(a1 + 692));
    paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
    *(_QWORD *)(a1 + 684) = 0;
    SetRateLevelBeforePause(a1, 100);
    v91 = WSOLA__Initialise(*(_QWORD *)(a1 + 704));
    *(_DWORD *)(a1 + 96) = 0;
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, double))(a1 + 32))(*(_QWORD *)(a1 + 24), 0, a1 + 88, a1 + 96, 0, 0, v91);
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    if ((v9 & 0x80000000) != 0)
    {
      *v89 = 0;
      *v90 = 0;
    }
    else if (*v89 && *v90)
    {
LABEL_203:
      if (!*(_QWORD *)(a1 + 112) && *v89 && *v90)
      {
        v93 = (*v90 >> 7) & 0x1FFFFF8;
        if (v93)
          v94 = v93;
        else
          v94 = 8;
        *(_DWORD *)(a1 + 120) = v94;
        v95 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v94, 32);
        *(_QWORD *)(a1 + 112) = v95;
        if (!v95)
        {
          FreeTask((_QWORD *)a1);
          goto LABEL_232;
        }
      }
      else
      {
        *v90 = 0;
        *v89 = 0;
      }
      if ((v9 & 0x80000000) != 0)
      {
        v8 = v9;
        goto LABEL_232;
      }
      if (*(_DWORD *)(a1 + 40) != 1)
      {
        v96 = *(_DWORD *)(a1 + 96);
        if (v96 <= ((8589935 * (unint64_t)(*(unsigned __int16 *)(a1 + 712) << 7)) >> 32) >> 1)
          v96 = ((8589935 * (unint64_t)(*(unsigned __int16 *)(a1 + 712) << 7)) >> 32) >> 1;
        *(_DWORD *)(a1 + 144) = v96;
        *v11 = v96;
        v97 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 2 * v96);
        *(_QWORD *)(a1 + 136) = v97;
        *v10 = v97;
        if (!v97)
          goto LABEL_232;
        return v9;
      }
LABEL_207:
      v8 = v9;
      if ((v9 & 0x1FFF) == 0x807)
        goto LABEL_232;
      return v9;
    }
    FreeTask((_QWORD *)a1);
    goto LABEL_203;
  }
  if (v13 == 1)
    goto LABEL_189;
  LOBYTE(v16) = a2;
  v17 = *a4;
  v120[0] = 0;
  v119 = 0;
  v118 = -1;
  v114 = (_QWORD *)(a1 + 88);
  if (!*(_QWORD *)(a1 + 88) || !*(_DWORD *)(a1 + 96))
  {
    FreeTask((_QWORD *)a1);
    v9 = 0;
LABEL_198:
    v92 = *(_DWORD *)(a1 + 40);
    if (v92 == 1 || v92 == -1)
    {
      *v10 = 0;
    }
    else if ((v16 & 1) != 0)
    {
      v98 = *(_QWORD *)(a1 + 136);
      if (v98)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v98);
        *(_QWORD *)(a1 + 136) = 0;
      }
      *v10 = 0;
      if ((v16 & 2) != 0)
      {
        FreeTask((_QWORD *)a1);
        v99 = 1;
      }
      else
      {
        v99 = 4;
      }
      *(_DWORD *)(a1 + 40) = v99;
    }
    else
    {
      if ((v16 & 2) != 0)
        *v11 = *(_DWORD *)(a1 + 144);
      else
        *v11 = 0;
      *v10 = *(_QWORD *)(a1 + 136);
    }
    goto LABEL_207;
  }
  v18 = a6;
  v106 = v15;
  if (v15)
    v19 = v17;
  else
    v19 = 0;
  if (v19)
    *(_DWORD *)(a1 + 696) = 1;
  LODWORD(v20) = 0;
  v21 = 0;
  v22 = 0;
  v107 = 0;
  v115 = (int *)(a1 + 100);
  v111 = a2 & 2;
  v101 = a5 + 24;
  v102 = a6;
LABEL_18:
  v109 = v20;
  v112 = v22;
  if (v22 == v21)
  {
    while (1)
    {
      while (1)
      {
        HIDWORD(v119) = 0;
        v23 = SearchNextMarker(a5, v18, TSM_MARKER_INTEREST, 3u, &v119, &v118, (int *)&v119 + 1);
        v24 = v19;
        if (v119 < v18)
        {
          v24 = *(_DWORD *)(a5 + 32 * v119 + 12);
          if (v24 >= v19)
          {
            if (v24 | v19)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&ModuleInfoTsm, 3, 0, (uint64_t)"ERROR: Mrk[%d] (tot:%d) with posCur %lu > %lu", a6, a7, a8, v119);
              *(_DWORD *)(a5 + 32 * v119 + 12) = (__PAIR64__(v19, v21) - v19) >> 32;
              v24 = (__PAIR64__(v19, v21) - v19) >> 32;
            }
            else
            {
              v24 = 0;
            }
          }
        }
        if (HIDWORD(v119))
          break;
LABEL_43:
        v107 = v23;
        if (v24 < v19 && !*(_DWORD *)(a1 + 684) && *(_DWORD *)(a5 + 32 * v118) != 8)
        {
          LOWORD(v116) = 0;
          Rate = GetRate(a1, &v116);
          if ((Rate & 0x80000000) != 0)
            goto LABEL_224;
          v28 = *(_DWORD *)(a5 + 32 * v118);
          if (v28 == 19)
          {
            v29 = (100 * *(_DWORD *)(a5 + 32 * v118 + 24)) / *(_DWORD *)(a1 + 716);
            if (v29 <= 0x32)
              v29 = 50;
            if (v29 >= 0x190)
              v29 = 400;
          }
          else
          {
            v29 = v28 == 18 ? *(unsigned __int16 *)(a5 + 32 * v118 + 24) : (unsigned __int16)v116;
          }
          if (v29 == (unsigned __int16)v116)
            continue;
        }
        goto LABEL_85;
      }
      if ((v23 - 16) < 4)
        goto LABEL_26;
      if (v23 != 8)
        break;
      if (!*(_DWORD *)(a1 + 684))
      {
        LOWORD(v116) = 0;
        v30 = *(_DWORD *)(a5 + 32 * v118 + 24);
        if (v30)
        {
          *(_DWORD *)(a1 + 688) = v30 * ((8389 * (*(unsigned __int16 *)(a1 + 712) >> 3)) >> 20);
          GetRate(a1, &v116);
          LOWORD(v31) = v116;
          v32 = (v119 + 1);
          if (v32 < v18)
          {
            v33 = (unsigned int *)(v101 + 32 * v32);
            v34 = v102 - v32;
            do
            {
              if (*(v33 - 3) != v24)
                break;
              v35 = *(v33 - 6);
              if (v35 == 19)
              {
                v31 = 100 * *v33 / *(_DWORD *)(a1 + 716);
                if (v31 <= 0x32)
                  v31 = 50;
                if (v31 >= 0x190)
                  LOWORD(v31) = 400;
              }
              else if (v35 == 18)
              {
                v31 = *v33;
              }
              v33 += 8;
              --v34;
            }
            while (v34);
          }
          SetRateLevelBeforePause(a1, v31);
          SetRate(a1, 0x64u);
          paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "1");
          *(_DWORD *)(a1 + 684) = 1;
          if (!*(_DWORD *)(a5 + 32 * v118 + 24))
          {
            v36 = (v119 + 1);
            if (v36 >= v18)
            {
LABEL_83:
              SetRate(a1, *(unsigned __int16 *)(a1 + 692));
              paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
              *(_DWORD *)(a1 + 684) = 0;
              v23 = 8;
              goto LABEL_38;
            }
            v37 = (unsigned int *)(v101 + 32 * v36);
            v38 = v102 - v36;
            while (2)
            {
              if (*(v37 - 3) != v24)
                goto LABEL_83;
              v39 = *(v37 - 6);
              if (v39 == 19)
              {
                v40 = 100 * *v37 / *(_DWORD *)(a1 + 716);
                if (v40 <= 0x32)
                  v40 = 50;
                if (v40 >= 0x190)
                  LOWORD(v40) = 400;
LABEL_81:
                SetRateLevelBeforePause(a1, v40);
              }
              else if (v39 == 18)
              {
                v40 = *v37;
                goto LABEL_81;
              }
              v37 += 8;
              if (!--v38)
                goto LABEL_83;
              continue;
            }
          }
        }
      }
LABEL_38:
      v118 = v119;
      if (v24 != v21)
      {
        if (v119 < v18)
          LODWORD(v119) = v119 + 1;
        goto LABEL_43;
      }
      if (v119 < v18)
        LODWORD(v119) = v119 + 1;
    }
    if (v23 != 24)
      goto LABEL_38;
LABEL_26:
    v25 = *(_DWORD *)(a5 + 32 * v118);
    if (v25 == 19)
    {
      v26 = (100 * *(_DWORD *)(a5 + 32 * v118 + 24)) / *(_DWORD *)(a1 + 716);
      if (v26 <= 0x32)
        v26 = 50;
      if (v26 >= 0x190)
        LOWORD(v26) = 400;
    }
    else if (v25 == 18)
    {
      LOWORD(v26) = *(_WORD *)(a5 + 32 * v118 + 24);
    }
    else
    {
      LOWORD(v26) = 0;
    }
    paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"rate", (unsigned __int16)v26);
    goto LABEL_38;
  }
  v24 = v21;
LABEL_85:
  v41 = v112;
  v20 = v20;
  while (v20 < v18)
  {
    v42 = a5 + 32 * v20;
    v44 = *(_DWORD *)(v42 + 12);
    v43 = (_DWORD *)(v42 + 12);
    v22 = v44;
    if (v44 >= v19)
    {
      if (v22 | v19)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)&ModuleInfoTsm, 3, 0, (uint64_t)"ERROR: Mrk %d/%d with posCur %lu > %lu", a6, a7, a8, v20);
        v41 = v112;
        *v43 = (__PAIR64__(v19, v112) - v19) >> 32;
        v22 = (__PAIR64__(v19, v112) - v19) >> 32;
      }
      else
      {
        v22 = 0;
      }
    }
    if (v22 > v41)
      v20 = v20;
    else
      v20 = (v20 + 1);
    if (v22 > v41)
      goto LABEL_97;
  }
  v22 = v19;
LABEL_97:
  v45 = *(_DWORD *)(a1 + 684);
  if ((v16 & 1) != 0)
  {
    if (v45)
    {
      v46 = *(_DWORD *)(a1 + 688);
      if (v46)
      {
        if (v119 >= v18 && (v107 - 16) >= 4)
        {
          v41 = v112;
          if (v107 != 24)
          {
            v24 = v46 + v112;
            if (v46 + v112 >= v19)
            {
              if (v19 < v22)
                v22 = v19;
              v24 = v19;
            }
            else if (v24 < v22)
            {
              v22 = v46 + v112;
            }
          }
        }
        else
        {
          v41 = v112;
        }
      }
      goto LABEL_105;
    }
  }
  else if (v45)
  {
    v46 = *(_DWORD *)(a1 + 688);
LABEL_105:
    v47 = v22 - v41;
    v48 = v46 >= v47;
    v49 = v46 - v47;
    if (!v48)
      v49 = 0;
    *(_DWORD *)(a1 + 688) = v49;
  }
  v103 = v24;
  v50 = *(_QWORD *)(a1 + 112);
  if (v50)
  {
    v51 = v20 - v109;
    if (v20 > v109)
    {
      v52 = *(_DWORD *)(a1 + 128);
      v53 = a5 + 32 * v109;
      do
      {
        v54 = *(_DWORD *)(v53 + 12);
        v55 = *(_DWORD *)(a1 + 668);
        if (v52 >= *(_DWORD *)(a1 + 120))
        {
          v56 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), v50, 32 * (v52 + 8));
          if (!v56)
          {
            v9 = 2164269066;
            goto LABEL_231;
          }
          v50 = v56;
          *(_QWORD *)(a1 + 112) = v56;
          v52 = *(_DWORD *)(a1 + 128);
          *(_DWORD *)(a1 + 120) = v52 + 8;
        }
        v57 = *(_OWORD *)v53;
        v58 = *(_OWORD *)(v53 + 16);
        v53 += 32;
        v59 = (_OWORD *)(v50 + 32 * v52);
        *v59 = v57;
        v59[1] = v58;
        v50 = *(_QWORD *)(a1 + 112);
        v60 = *(unsigned int *)(a1 + 128);
        *(_DWORD *)(v50 + 32 * v60 + 12) = v55 + v54;
        v52 = v60 + 1;
        *(_DWORD *)(a1 + 128) = v52;
        --v51;
      }
      while (v51);
    }
  }
  v110 = v22 - v112;
  v16 = a2;
  if (v22 == v19)
    v61 = a2;
  else
    v61 = 0;
  v113 = (__int16 *)(v106 + 2 * v112);
  v62 = v120[0];
  while (1)
  {
    v63 = *(unsigned __int8 *)(a1 + 148);
    v117 = *(_BYTE *)(a1 + 148);
    if (!v62)
      *(_DWORD *)(a1 + 4 * v63 + 152) += v110;
    if (*(_DWORD *)(a1 + 696))
    {
      v120[0] = 0;
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 96);
      Rate = critsec_Enter(*(_QWORD **)(a1 + 728));
      if ((Rate & 0x80000000) != 0
        || (v64 = *(_WORD *)(a1 + 80), Rate = critsec_Leave(*(_QWORD **)(a1 + 728)), (Rate & 0x80000000) != 0))
      {
LABEL_224:
        v9 = Rate;
        goto LABEL_231;
      }
      v9 = WSOLA__TimeScaleInputBuffer(*(_QWORD *)(a1 + 704), v61, v113, v110, *(_WORD **)(a1 + 88), v115, (__int16)(v64 - 100), &v117, v120);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_231;
      v62 = v120[0];
      if (v120[0] - 1 > 1)
      {
        if (v120[0])
          goto LABEL_170;
        v88 = (*(_BYTE *)(a1 + 148)
                              - 127
                              * ((((*(_BYTE *)(a1 + 148)
                                                   - ((unsigned __int16)(3 * *(unsigned __int8 *)(a1 + 148)) >> 8)) >> 1)
                                + ((3 * *(unsigned __int8 *)(a1 + 148)) >> 8)) >> 6)
                              + 1);
        *(_BYTE *)(a1 + 148) = v88;
        *(_DWORD *)(a1 + 4 * v88 + 152) = 0;
LABEL_178:
        if (*(_DWORD *)(a1 + 684))
        {
          v21 = v103;
          if (!*(_DWORD *)(a1 + 688))
          {
            SetRate(a1, *(unsigned __int16 *)(a1 + 692));
            v9 = paramc_ParamSetStr(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", "0");
            *(_DWORD *)(a1 + 684) = 0;
            if ((v9 & 0x80000000) != 0)
              goto LABEL_231;
          }
        }
        else
        {
          v21 = v103;
        }
        if (v22 >= v19)
        {
          *(_DWORD *)(a1 + 668) += v19;
          goto LABEL_239;
        }
        goto LABEL_18;
      }
      v65 = *(_DWORD *)(a1 + 696);
    }
    else
    {
      v65 = 0;
      if ((v16 & 1) != 0)
        v120[0] = 2;
      else
        v120[0] = 1;
    }
    v116 = 0;
    if (!v65)
    {
      OutputLength = 0;
      v116 = 1;
      goto LABEL_135;
    }
    while (1)
    {
      OutputLength = WSOLA__GetOutputLength(*(_QWORD *)(a1 + 704), *(unsigned __int8 *)(a1 + 664), &v116);
LABEL_135:
      v67 = *(_QWORD *)(a1 + 112);
      if (v67)
      {
        v69 = *(unsigned int *)(a1 + 124);
        v68 = *(unsigned int *)(a1 + 128);
        if (v69 < v68)
        {
          v70 = *(_DWORD *)(a1 + 672);
          v71 = (unsigned int *)(v67 + 32 * v69 + 12);
          do
          {
            if (*v71 > v70)
              break;
            *v71 = *(_DWORD *)(a1 + 680) - *(_DWORD *)(a1 + 676);
            v71 += 8;
            *(_DWORD *)(a1 + 124) = ++v69;
          }
          while (v68 != v69);
        }
      }
      if (!v116 || !*(_DWORD *)(a1 + 696))
        break;
      *(_DWORD *)(a1 + 680) += OutputLength;
      v72 = *(unsigned __int8 *)(a1 + 664);
      *(_DWORD *)(a1 + 672) += *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 664) + 152);
      *(_BYTE *)(a1 + 664) = v72
                           - 127
                           * ((((v72 - ((unsigned __int16)(3 * v72) >> 8)) >> 1)
                             + ((3 * v72) >> 8)) >> 6)
                           + 1;
    }
    v73 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 676) += v73;
    v74 = v120[0];
    v75 = *(unsigned int *)(a1 + 124);
    if (v67)
    {
      if (v111)
      {
        v76 = *(unsigned int *)(a1 + 128);
        if ((_DWORD)v76 != (_DWORD)v75 && v120[0] == 2)
        {
          if (v75 < v76)
          {
            v77 = v73 - 1;
            if (!v73)
              v77 = 0;
            v78 = v76 - v75;
            v79 = (_DWORD *)(v67 + 32 * v75 + 12);
            do
            {
              *v79 = v77;
              v79 += 8;
              --v78;
            }
            while (v78);
          }
          *(_DWORD *)(a1 + 124) = v76;
          LODWORD(v75) = v76;
        }
      }
    }
    v80 = v74 == 2 ? v16 : 0;
    v81 = v80 | v111;
    v82 = v80 & 0xFFFFFFFD;
    v83 = (_DWORD)v75 ? v82 : v81;
    *(_DWORD *)(a1 + 104) += v73;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, int *))(a1 + 32))(*(_QWORD *)(a1 + 24), v83, v114, v115);
    if ((v9 & 0x80000000) != 0)
      break;
    v84 = *(char **)(a1 + 112);
    v85 = *(unsigned int *)(a1 + 124);
    v86 = *(_DWORD *)(a1 + 128);
    if (v84 && v86 > v85)
    {
      cstdlib_memmove(v84, &v84[32 * v85], 32 * (v86 - v85));
      LODWORD(v85) = *(_DWORD *)(a1 + 124);
      v86 = *(_DWORD *)(a1 + 128);
    }
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = v86 - v85;
    if ((v83 & 1) != 0)
    {
      v87 = 0;
      *v114 = 0;
    }
    else
    {
      v87 = *v115;
    }
    *(_DWORD *)(a1 + 96) = v87;
    *(_DWORD *)(a1 + 100) = 0;
    v62 = v120[0];
    v16 = a2;
    if (v120[0] != 2 && (!*v114 || !v87))
    {
      FreeTask((_QWORD *)a1);
LABEL_239:
      v10 = a3;
      v11 = a4;
      goto LABEL_198;
    }
    *(_DWORD *)(a1 + 104) = 0;
LABEL_170:
    if ((v62 & 0xFFFFFFFD) == 0 || !*(_DWORD *)(a1 + 696))
      goto LABEL_178;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
LABEL_231:
  v8 = v9;
  v10 = a3;
  v11 = a4;
LABEL_232:
  FreeTask((_QWORD *)a1);
  *(_DWORD *)(a1 + 40) = 1;
  *v10 = 0;
  *v11 = 0;
  return v8;
}

uint64_t tsm_Break(uint64_t a1, int a2)
{
  uint64_t result;

  result = 2164269062;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      return 2164269073;
    }
    else
    {
      result = 0;
      if (a2)
        *(_DWORD *)(a1 + 720) = 1;
    }
  }
  return result;
}

uint64_t SetRateLevelBeforePause(uint64_t a1, __int16 a2)
{
  uint64_t v4;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 736));
  if ((v4 & 0x80000000) == 0)
  {
    *(_WORD *)(a1 + 692) = a2;
    critsec_Leave(*(_QWORD **)(a1 + 736));
  }
  return v4;
}

uint64_t SetRate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v3 = result;
    result = critsec_Enter(*(_QWORD **)(result + 736));
    if ((result & 0x80000000) == 0)
    {
      if ((critsec_Enter(*(_QWORD **)(v3 + 728)) & 0x80000000) == 0)
      {
        *(_DWORD *)(v3 + 720) = 0;
        if (a2 <= 0x32)
          v4 = 50;
        else
          v4 = a2;
        if (v4 >= 0x190)
          LOWORD(v4) = 400;
        *(_WORD *)(v3 + 80) = v4;
        critsec_Leave(*(_QWORD **)(v3 + 728));
      }
      return critsec_Leave(*(_QWORD **)(v3 + 736));
    }
  }
  return result;
}

uint64_t acceptor_TsmCheckRange(uint64_t a1, char *__s1, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;

  *a4 = 1;
  if (!cstdlib_strcmp(__s1, "wordspermin"))
    return 0;
  v8 = 2164269071;
  if (!cstdlib_strcmp(__s1, "rate"))
  {
    if ((cstdlib_atoi(a3) << 16) - 26279936 <= 0xFEA00000)
      goto LABEL_5;
    return 0;
  }
  v8 = 2164269063;
LABEL_5:
  if (!cstdlib_strcmp(__s1, "ratewpm"))
  {
    v9 = LH_atou((const char *)a3);
    v10 = *(_DWORD *)(a1 + 716);
    v11 = (50 * v10 + 50) / 0x64u;
    v12 = (400 * v10 + 50) / 0x64u;
    v13 = v11 > v9 || v9 > v12;
    v8 = 2164269071;
    if (!v13)
      return 0;
  }
  *a4 = 0;
  return v8;
}

uint64_t acceptor_TsmLearnChange(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  char *__s2;
  char __s[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  __s2 = 0;
  v6 = paramc_ParamGet(*(_QWORD *)(a1 + 48), (uint64_t)"pausestatus", &__s2, 0);
  if ((v6 & 0x80000000) == 0)
  {
    if (!cstdlib_strcmp(a2, "wordspermin"))
    {
      v6 = 0;
      *(_DWORD *)(a1 + 716) = LH_atou(a3);
    }
    if (!cstdlib_strcmp(a2, "rate"))
    {
      v7 = (unsigned __int16)LH_atou(a3);
      if (cstdlib_strcmp("0", __s2))
        v8 = SetRateLevelBeforePause(a1, v7);
      else
        v8 = SetRateLevel(a1, v7);
      v6 = v8;
    }
    if (!cstdlib_strcmp(a2, "ratewpm"))
    {
      v9 = 100 * LH_atou(a3) / *(_DWORD *)(a1 + 716);
      if (v9 <= 0x32)
        v9 = 50;
      if (v9 >= 0x190)
        v10 = 400;
      else
        v10 = v9;
      if (cstdlib_strcmp("0", __s2))
        SetRateLevelBeforePause(a1, v10);
      else
        SetRateLevel(a1, (unsigned __int16)v10);
      LH_utoa(v10, __s, 0xAu);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = cstdlib_strlen(__s);
      return paramc_ParamRipple(v11, (uint64_t)"rate", __s, (v12 + 1));
    }
  }
  return v6;
}

uint64_t SetRateLevel(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 736));
  if ((v4 & 0x80000000) == 0)
  {
    if (a2 <= 0x32)
      v5 = 50;
    else
      v5 = a2;
    if (v5 >= 0x190)
      LOWORD(v5) = 400;
    *(_WORD *)(a1 + 80) = v5;
    critsec_Leave(*(_QWORD **)(a1 + 736));
  }
  return v4;
}

_QWORD *FreeTask(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  *((_DWORD *)result + 10) = 1;
  v2 = result[17];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(*result + 8), v2);
    v1[17] = 0;
  }
  v3 = v1[11];
  *((_DWORD *)v1 + 36) = 0;
  if (v3 || v1[14])
  {
    *((_DWORD *)v1 + 25) = 0;
    result = (_QWORD *)((uint64_t (*)(_QWORD, uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))v1[4])(v1[3], 3, v1 + 11, (uint64_t)v1 + 100, 0, 0);
    v4 = v1[14];
    v1[11] = 0;
    v1[12] = 0;
    if (v4)
      result = heap_Free(*(_QWORD **)(*v1 + 8), v4);
    v1[14] = 0;
    v1[15] = 0;
    *((_DWORD *)v1 + 32) = 0;
  }
  return result;
}

uint64_t GetRate(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = critsec_Enter(*(_QWORD **)(a1 + 728));
  if ((result & 0x80000000) == 0)
  {
    *a2 = *(_WORD *)(a1 + 80);
    return critsec_Leave(*(_QWORD **)(a1 + 728));
  }
  return result;
}

uint64_t vol_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &IVol;
  return result;
}

uint64_t vol_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t UInt;
  uint64_t v15;
  int v16;
  void *v18;
  __int16 v19;
  void *v20;
  __int128 v21;
  uint64_t (*v22)(uint64_t, char *, unsigned __int8 *);
  unsigned int v23;
  uint64_t v24;

  v24 = 0;
  v23 = 0;
  v4 = 2164269063;
  if (!a4)
    return 2164269062;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (a3 && *(_QWORD *)(a3 + 8))
  {
    v10 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 128);
    if (v10)
    {
      v11 = v10;
      *(_DWORD *)(v10 + 112) = 0;
      *(_QWORD *)(v10 + 40) = 0x100000001;
      *(_WORD *)(v10 + 82) = 0;
      *(_WORD *)(v10 + 92) = 0x7FFF;
      *(_DWORD *)(v10 + 86) = 5275647;
      *(_QWORD *)(v10 + 96) = 0;
      v12 = (_QWORD *)(v10 + 96);
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)v10 = v24;
      *(_QWORD *)(v10 + 8) = a1;
      *(_QWORD *)(v10 + 16) = a2;
      v13 = v24;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v24 + 40);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
      UInt = critsec_ObjOpen(*(_QWORD *)(v13 + 16), *(_QWORD **)(v13 + 8), (uint64_t *)(v10 + 120));
      if ((UInt & 0x80000000) == 0)
      {
        if ((paramc_ParamGetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"volume", &v23) & 0x80000000) != 0)
        {
          SetVolume(v11, 0x50u);
          UInt = paramc_ParamSetUInt(*(_QWORD *)(v11 + 48), (uint64_t)"volume", 0x50u);
          if ((UInt & 0x80000000) != 0)
            goto LABEL_18;
        }
        else
        {
          SetVolume(v11, (unsigned __int16)v23);
        }
        *(_QWORD *)(v11 + 56) = v11;
        *(_QWORD *)(v11 + 64) = acceptor_VolCheckRange;
        *(_QWORD *)(v11 + 72) = acceptor_VolLearnChange;
        v15 = *(_QWORD *)(v11 + 48);
        v21 = *(_OWORD *)(v11 + 56);
        v22 = acceptor_VolLearnChange;
        UInt = paramc_ListenerAdd(v15, "volume", &v21);
        if ((UInt & 0x80000000) == 0)
        {
          UInt = paramc_ParamGetUInt(*(_QWORD *)(v24 + 40), (uint64_t)"frequencyhz", &v23);
          if ((UInt & 0x80000000) == 0)
          {
            v16 = (unsigned __int16)v23;
            if (*(unsigned __int16 *)(v11 + 80) == (unsigned __int16)v23 && *v12)
            {
              v4 = 0;
LABEL_20:
              *a4 = v11;
              return v4;
            }
            *(_WORD *)(v11 + 80) = v23;
            v4 = 2164269071;
            if (v16 > 15999)
            {
              if (v16 == 16000)
              {
                v18 = &as16FadeOut_16;
                v19 = 495;
                v20 = &as16FadeIn_16;
                goto LABEL_31;
              }
              if (v16 == 22050)
              {
                v18 = &as16FadeOut_22;
                v19 = 676;
                v20 = &as16FadeIn_22;
                goto LABEL_31;
              }
            }
            else
            {
              if (v16 == 8000)
              {
                v18 = &as16FadeOut_8;
                v19 = 255;
                v20 = &as16FadeIn_8;
                goto LABEL_31;
              }
              if (v16 == 11025)
              {
                v18 = &as16FadeOut_11;
                v19 = 345;
                v20 = &as16FadeIn_11;
LABEL_31:
                v4 = 0;
                *(_WORD *)(v11 + 84) = v19;
                *(_QWORD *)(v11 + 96) = v20;
                *(_QWORD *)(v11 + 104) = v18;
                goto LABEL_20;
              }
            }
LABEL_19:
            vol_ObjClose(v11);
            v11 = 0;
            goto LABEL_20;
          }
        }
      }
LABEL_18:
      v4 = UInt;
      goto LABEL_19;
    }
    return 2164269066;
  }
  return v4;
}

uint64_t vol_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (!a1)
    return 2164269062;
  v2 = *(_QWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v3 = paramc_ListenerRemove(v2, "volume", &v6);
  v4 = *(_QWORD *)(a1 + 120);
  if (v4)
    critsec_ObjClose(v4);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return v3;
}

uint64_t vol_ResetParams(uint64_t a1)
{
  if (a1)
    return paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"volume", 0x50u);
  else
    return 2164269062;
}

uint64_t vol_Process(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  int v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  int v40;
  unsigned int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char __s[8];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  result = 2164269062;
  if (!a1 || !a3 || !a4)
    return result;
  v10 = a5;
  v49 = *a3;
  if (!(a5 | *a3))
  {
    *(_DWORD *)(a1 + 40) = 1;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) == 1)
  {
LABEL_7:
    if (*(_DWORD *)(a1 + 112))
    {
      *(_DWORD *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 44) = 1;
      *(_WORD *)(a1 + 82) = 0;
      result = paramc_ParamSetUInt(*(_QWORD *)(a1 + 48), (uint64_t)"volume", 0x50u);
      if ((result & 0x80000000) != 0)
        return result;
    }
    *(_DWORD *)(a1 + 40) = 3;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _DWORD *, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), a2, a3, a4, 0, 0);
    goto LABEL_10;
  }
  v13 = *a4;
  v53 = 0;
  result = critsec_Enter(*(_QWORD **)(a1 + 120));
  if ((result & 0x80000000) != 0)
    return result;
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    *(_DWORD *)(a1 + 44) = 1;
    *(_WORD *)(a1 + 82) = 0;
    LOWORD(v14) = *(_WORD *)(a1 + 86);
    *(_WORD *)(a1 + 90) = v14;
  }
  else
  {
    LOWORD(v14) = *(_WORD *)(a1 + 92);
  }
  v47 = a2;
  v52 = 0;
  v50 = a6;
  v51 = -1;
  v15 = 0;
  if ((_DWORD)v13)
  {
    v16 = 0;
    v17 = 0;
    v48 = v10;
    v18 = v49;
    do
    {
      if ((_DWORD)v17 == v16)
      {
        v19 = v13;
        SearchNextMarkerOfRTCSubType(v10, v50, (int *)&VOL_RTC_INTEREST, 1u, &v52, &v51, &v53);
        v15 = v52;
        if (v52 >= v50)
          v20 = -1;
        else
          v20 = *(_DWORD *)(v10 + 32 * v52 + 12);
        if (v53)
        {
          if (*(_DWORD *)(v10 + 32 * v51) == 24)
          {
            v21 = *(unsigned __int16 *)(v10 + 32 * v51 + 24);
            *(_WORD *)(a1 + 88) = v21;
          }
          else
          {
            v21 = *(unsigned __int16 *)(a1 + 88);
          }
          LH_itoa(v21, __s, 0xAu);
          v22 = *(_QWORD *)(a1 + 48);
          v23 = cstdlib_strlen(__s);
          paramc_ParamSet(v22, (uint64_t)"volume", __s, (v23 + 1));
          v24 = *(unsigned __int16 *)(a1 + 88);
          if (v24 >= 0x64)
            v24 = 100;
          v25 = aVolPar2Amplif[v24];
          *(_WORD *)(a1 + 86) = v25;
          if (v16 || *(_DWORD *)(a1 + 40) != 3)
          {
            v26 = v25 == (unsigned __int16)v14;
            if (v25 > (unsigned __int16)v14)
              v27 = 2;
            else
              v27 = 3;
            *(_DWORD *)(a1 + 44) = v27;
            *(_WORD *)(a1 + 90) = v14;
            if (v26)
            {
              *(_DWORD *)(a1 + 44) = 1;
              *(_WORD *)(a1 + 82) = 0;
            }
            else
            {
              *(_WORD *)(a1 + 82) = *(_WORD *)(a1 + 84);
            }
          }
          else
          {
            *(_WORD *)(a1 + 82) = 0;
            *(_DWORD *)(a1 + 44) = 1;
            LOWORD(v14) = v25;
          }
          v10 = v48;
          v15 = v52;
          v51 = v52;
          if (v52 < v50)
            v15 = ++v52;
        }
        v16 = v20;
        v13 = v19;
        v18 = v49;
      }
      v28 = *(unsigned __int16 *)(a1 + 82);
      if (*(_WORD *)(a1 + 82))
      {
        if (*(unsigned __int16 *)(a1 + 84) >= v28)
        {
          v36 = 104;
          if (*(_DWORD *)(a1 + 44) == 2)
            v36 = 96;
          v29 = *(_WORD *)(*(_QWORD *)(a1 + v36) + 2 * v28);
        }
        else
        {
          v29 = 0;
        }
        v14 = *(unsigned __int16 *)(a1 + 86);
        v37 = *(unsigned __int16 *)(a1 + 90) + (((v14 - *(unsigned __int16 *)(a1 + 90)) * v29) >> 15);
        v38 = v28 - 1;
        *(_WORD *)(a1 + 82) = v28 - 1;
        v39 = *(__int16 *)(v18 + 2 * v17);
        if (v38)
          LOWORD(v14) = v37;
        else
          *(_DWORD *)(a1 + 44) = 1;
        v40 = (unsigned __int16)v37 * v39;
        v41 = v40 >> 15;
        if (v40 < -1073709056)
          LOWORD(v41) = -32767;
        if (v40 <= 0x3FFFFFFF)
          v42 = v41;
        else
          v42 = 0x7FFF;
        *(_WORD *)(v18 + 2 * v17) = v42;
        v30 = (v17 + 1);
      }
      else
      {
        if (v16 >= v13)
          v30 = v13;
        else
          v30 = v16;
        if (*(_WORD *)(a1 + 88) != 80)
        {
          if (v17 >= v30)
          {
            v30 = v17;
          }
          else
          {
            v31 = v30 - v17;
            v32 = (__int16 *)(v18 + 2 * v17);
            do
            {
              v33 = *v32 * (unsigned __int16)v14;
              v34 = v33 >> 15;
              if (v33 < -1073709056)
                LOWORD(v34) = -32767;
              if (v33 <= 0x3FFFFFFF)
                v35 = v34;
              else
                v35 = 0x7FFF;
              *v32++ = v35;
              --v31;
            }
            while (v31);
          }
        }
      }
      v17 = v30;
    }
    while (v30 < v13);
  }
  if (v50)
  {
    v43 = v47;
    if (!(_DWORD)v13)
    {
      if (v15 < v50)
      {
        do
          SearchNextMarkerOfRTCSubType(v10, v50, (int *)&VOL_RTC_INTEREST, 1u, &v52, &v51, &v53);
        while (v52 < v50);
      }
      if (v53)
      {
        if (*(_DWORD *)(v10 + 32 * v51) == 24)
        {
          v44 = *(_DWORD *)(v10 + 32 * v51 + 24);
          *(_WORD *)(a1 + 88) = v44;
        }
        else
        {
          LOWORD(v44) = *(_WORD *)(a1 + 88);
        }
        v44 = (unsigned __int16)v44;
        if ((unsigned __int16)v44 >= 0x64u)
          v44 = 100;
        LOWORD(v14) = aVolPar2Amplif[v44];
        *(_WORD *)(a1 + 86) = v14;
        *(_WORD *)(a1 + 90) = *(_WORD *)(a1 + 92);
      }
    }
  }
  else
  {
    v43 = v47;
  }
  *(_WORD *)(a1 + 92) = v14;
  critsec_Leave(*(_QWORD **)(a1 + 120));
  if ((v43 & 2) != 0)
    v45 = 1;
  else
    v45 = 5;
  if ((v43 & 1) == 0)
    v45 = 4;
  *(_DWORD *)(a1 + 40) = v45;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _DWORD *, uint64_t, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), v43, a3, a4, v10, v50);
  v46 = *(_DWORD *)(a1 + 40);
  if (v46 == 5)
    goto LABEL_92;
  if (v46 == 4)
  {
LABEL_10:
    if (!*a3 || !*a4)
LABEL_92:
      *(_DWORD *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t vol_Break(uint64_t a1, int a2)
{
  uint64_t result;

  result = 2164269062;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      return 2164269073;
    }
    else
    {
      result = 0;
      if (a2)
        *(_DWORD *)(a1 + 112) = 1;
    }
  }
  return result;
}

uint64_t SetVolume(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  __int16 v10;

  v4 = critsec_Enter(*(_QWORD **)(a1 + 120));
  if ((v4 & 0x80000000) == 0)
  {
    if (a2 >= 0x64)
      v5 = 100;
    else
      v5 = a2;
    *(_DWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 88) = v5;
    v6 = aVolPar2Amplif[v5];
    *(_WORD *)(a1 + 86) = v6;
    v7 = *(unsigned __int16 *)(a1 + 92);
    *(_WORD *)(a1 + 90) = v7;
    v8 = v6 == v7;
    if (v6 > v7)
      v9 = 2;
    else
      v9 = 3;
    *(_DWORD *)(a1 + 44) = v9;
    if (v8)
    {
      v10 = 0;
      *(_DWORD *)(a1 + 44) = 1;
    }
    else
    {
      v10 = *(_WORD *)(a1 + 84);
    }
    *(_WORD *)(a1 + 82) = v10;
    critsec_Leave(*(_QWORD **)(a1 + 120));
  }
  return v4;
}

uint64_t acceptor_VolCheckRange(int a1, char *__s1, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v6;

  v6 = 2164269063;
  *a4 = 1;
  if (!cstdlib_strcmp(__s1, "volume"))
  {
    if (cstdlib_atoi(a3) < 0x65)
      return 0;
    v6 = 2164269071;
  }
  *a4 = 0;
  return v6;
}

uint64_t acceptor_VolLearnChange(uint64_t a1, char *__s1, unsigned __int8 *a3)
{
  uint64_t v5;
  unsigned int v6;

  v5 = 2164269063;
  if (!cstdlib_strcmp(__s1, "volume"))
  {
    v6 = cstdlib_atoi(a3);
    if (v6 <= 0x64)
      return SetVolume(a1, (unsigned __int16)v6);
    return 2164269071;
  }
  return v5;
}

uint64_t psi_lookup_GetBit(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v4 += *(unsigned __int8 *)(result + v3) << v3;
      ++v3;
    }
    while (a3 != (_DWORD)v3);
    result += a3;
  }
  *a2 = v4;
  return result;
}

uint64_t psi_lookup_MakeStream(unsigned int *a1, int a2, _BYTE *a3, int a4, _WORD *a5)
{
  unsigned int *v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  _BYTE __b[400];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 2164269056;
  v9 = a1;
  cstdlib_memset(__b, 0, 0x190uLL);
  if (a2)
  {
    v10 = 0;
    v11 = __b;
    do
    {
      v12 = (unsigned __int16)*a5;
      if (*a5)
      {
        v13 = 0;
        v14 = *v9;
        do
        {
          v11[v13] = (v14 >> v13) & 1;
          ++v13;
        }
        while (v12 != (_DWORD)v13);
        v11 += v13;
      }
      ++v9;
      ++a5;
      ++v10;
    }
    while (v10 != a2);
  }
  if (a4 >= 1)
  {
    v15 = a4;
    v16 = (uint8x8_t *)__b;
    do
    {
      v17 = *v16++;
      *a3++ = vaddv_s8((int8x8_t)vshl_u8(v17, (uint8x8_t)0x706050403020100));
      --v15;
    }
    while (v15);
  }
  return 0;
}

uint64_t psi_lookup_ReadStream(unsigned __int8 *a1, int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  unsigned int v8;
  uint32x4_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v16[400];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = 2164269056;
  if (a1 && a2 <= 50)
  {
    if (a2 >= 1)
    {
      v6 = a2;
      v7 = (int8x8_t *)v16;
      do
      {
        v8 = *a1++;
        v9 = (uint32x4_t)vdupq_n_s32(v8);
        *v7++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v9, (uint32x4_t)xmmword_214F8C220), (int16x8_t)vshlq_u32(v9, (uint32x4_t)xmmword_214F8C210))), (int8x8_t)0x101010101010101);
        --v6;
      }
      while (v6);
    }
    if (a4 >= 1)
    {
      v10 = 0;
      v11 = v16;
      do
      {
        v12 = (unsigned __int16)*a5;
        if (*a5)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            v14 += v11[v13] << v13;
            ++v13;
          }
          while ((_DWORD)v12 != (_DWORD)v13);
          v11 += v12;
        }
        else
        {
          v14 = 0;
        }
        *a3++ = v14;
        ++a5;
        ++v10;
      }
      while (v10 != a4);
    }
    return 0;
  }
  return v5;
}

double chi_DecodePolyphone__Construct__(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 138) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 5;
  return result;
}

uint64_t *chi_DecodePolyphone__Deconstruct__(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if (result[5])
    result[5] = 0;
  if (*result)
  {
    result = heap_Free(*(_QWORD **)(a2 + 8), *result);
    *v3 = 0;
  }
  v4 = v3[9];
  if (v4)
  {
    result = heap_Free(*(_QWORD **)(a2 + 8), v4);
    v3[9] = 0;
  }
  if (v3[20])
    result = (uint64_t *)vect_s_t__deleteVect((uint64_t)(v3 + 19));
  if (v3[26])
    result = (uint64_t *)vect_s_t__deleteVect((uint64_t)(v3 + 25));
  if (v3[23])
    result = (uint64_t *)vect_s_t__deleteVect((uint64_t)(v3 + 22));
  if (v3[37])
    result = (uint64_t *)vect_i_t__deleteVect((uint64_t)(v3 + 36));
  if (v3[40])
    return (uint64_t *)vect_i_t__deleteVect((uint64_t)(v3 + 39));
  return result;
}

uint64_t chi_DecodePolyphone__Create(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, __int128 *a5)
{
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  uint64_t Stream;
  char v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int16 *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int16 v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[3];
  int v34;
  int v35;
  int v36;
  _BYTE v37[28];
  uint64_t v38;

  v8 = 0;
  v9 = 0;
  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 80) = 0;
  v10 = a1 + 80;
  *(_DWORD *)(a1 + 336) = 5;
  *(_OWORD *)v37 = xmmword_214F8C230;
  *(_OWORD *)&v37[12] = *(__int128 *)((char *)&xmmword_214F8C230 + 12);
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 138) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v11 = *a5;
  *(_OWORD *)(a1 + 252) = a5[1];
  *(_QWORD *)(a1 + 352) = a2;
  *(_OWORD *)(a1 + 236) = v11;
  do
  {
    v9 += *(_WORD *)&v37[v8];
    v8 += 2;
  }
  while (v8 != 12);
  if ((v9 & 7) != 0)
    v12 = (v9 >> 3) + 1;
  else
    v12 = v9 >> 3;
  Stream = psi_lookup_ReadStream(a4, v12, v33, 6, v37);
  if (!(_DWORD)Stream)
  {
    v14 = v35;
    *(_WORD *)(a1 + 32) = v34;
    v15 = v36;
    *(_DWORD *)(a1 + 28) = v36;
    Stream = psi_lookup_ReadStream(&a4[v12], v12, v33, v15, (_WORD *)((unint64_t)v37 | 0xC));
    if (!(_DWORD)Stream)
    {
      v16 = *(unsigned int *)(a1 + 28);
      if ((int)v16 >= 1)
      {
        memcpy((void *)(a1 + 56), v33, 4 * v16);
        v17 = 0;
        v18 = (__int16 *)((unint64_t)v37 | 0xC);
        v19 = v16;
        do
        {
          v20 = *v18++;
          v17 += v20;
          --v19;
        }
        while (v19);
        v21 = 0;
        v22 = (v17 & 7) == 0;
        LODWORD(v23) = v12 + ((unsigned __int16)(v17 & 0xFFF8) >> 3);
        if (v22)
          v23 = v23;
        else
          v23 = (v23 + 1);
        v24 = &a4[v23];
        v25 = a1 + 56;
        do
        {
          *(_QWORD *)(v25 + 8 * v21 - 16) = &v24[(int)v19];
          LODWORD(v19) = *(_DWORD *)(v25 + 4 * v21++) + v19;
        }
        while (v16 != v21);
      }
      v26 = *(_WORD *)(a1 + 32);
      *(_WORD *)(a1 + 348) = v26;
      Stream = 2164269056;
      if (!smc1175mrf22spi_GetInfo(v26, v14, 0, a1 + 96))
      {
        v28 = (char *)heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 126), 1);
        *(_QWORD *)(a1 + 64) = v28;
        if (v28)
        {
          if (!smc1175mrf22spi_DecoderOpen(*(_WORD *)(a1 + 348), v14, &a4[v12 - 4], v28, v10))
          {
            v29 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 116), 1);
            *(_QWORD *)a1 = v29;
            if (v29
              && (v30 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 120), 1),
                  (*(_QWORD *)(a1 + 8) = v30) != 0)
              && (v31 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 120), 1),
                  (*(_QWORD *)(a1 + 16) = v31) != 0))
            {
              v32 = heap_Calloc(*(_QWORD **)(a3 + 8), *(unsigned __int16 *)(a1 + 128), 1);
              *(_QWORD *)(a1 + 72) = v32;
              Stream = 2164269066;
              if (v32)
              {
                *(_DWORD *)(a1 + 232) = 1;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 104);
                *(_WORD *)(a1 + 132) = 0;
                *(_WORD *)(a1 + 134) = *(_WORD *)(a1 + 120);
                Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 200, *(_DWORD *)(a1 + 236));
                if (!(_DWORD)Stream)
                {
                  Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 176, *(_DWORD *)(a1 + 236));
                  if (!(_DWORD)Stream)
                  {
                    Stream = vect_s_t__createVect(*(_QWORD **)(a3 + 8), a1 + 152, *(_DWORD *)(a1 + 236));
                    if (!(_DWORD)Stream)
                    {
                      Stream = vect_i_t__createVect(*(_QWORD **)(a3 + 8), a1 + 288, 0x1Eu);
                      if (!(_DWORD)Stream)
                        return vect_i_t__createVect(*(_QWORD **)(a3 + 8), a1 + 312, 0x1Eu);
                    }
                  }
                }
              }
            }
            else
            {
              return 2164269066;
            }
          }
        }
      }
    }
  }
  return Stream;
}

uint64_t chi_DecodePolyphone__Delete(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v4 = a1[9];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v4);
    a1[9] = 0;
  }
  v5 = a1[8];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v5);
    a1[8] = 0;
  }
  v6 = a1[1];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v6);
    a1[1] = 0;
  }
  v7 = a1[2];
  if (v7)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v7);
    a1[2] = 0;
  }
  if (*a1)
  {
    heap_Free(*(_QWORD **)(a2 + 8), *a1);
    *a1 = 0;
  }
  vect_i_t__deleteVect((uint64_t)(a1 + 36));
  vect_i_t__deleteVect((uint64_t)(a1 + 39));
  vect_s_t__deleteVect((uint64_t)(a1 + 25));
  vect_s_t__deleteVect((uint64_t)(a1 + 22));
  vect_s_t__deleteVect((uint64_t)(a1 + 19));
  v8 = a1[10];
  if (v8)
    return smc1175mrf22spi_DecoderClose(v8, a1[11]);
  else
    return 0;
}

uint64_t chi_DecodePolyphone__DeinitPoly(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = 2164269056;
  v3 = (_DWORD *)a1[10];
  if (v3 && !smc1175mrf22spi_DecoderResetMemory(v3, a1[11]))
  {
    v2 = 0;
    a1[28] = 0;
  }
  return v2;
}

uint64_t chi_DecodePolyphone__InitPoly(uint64_t a1)
{
  *(_WORD *)(a1 + 146) = 2 * *(_WORD *)(a1 + 236);
  *(_DWORD *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  return 0;
}

uint64_t chi_DecodePolyphone__OneFrame(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  char v15;
  unsigned __int16 v16;
  int v17;
  _BYTE *v18;
  unsigned __int16 v19;
  _DWORD *v20;
  unsigned __int8 *v21;
  char *v22;
  _WORD *v23;
  _DWORD *v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  _WORD *v30;
  __int16 *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v4 = *(unsigned __int16 *)(a1 + 146);
  v38 = *(unsigned __int16 *)(a1 + 134);
  v39 = v4;
  if (*(_DWORD *)(a1 + 268) >= *(_DWORD *)(a1 + 272))
    return 2164269056;
  v37 = 0;
  if (*(_DWORD *)(a2 + 124) == *(_DWORD *)(a2 + 56))
  {
    v9 = *(unsigned __int8 *)(a2 + 120);
    switch(v9)
    {
      case 3:
        v10 = 480;
        break;
      case 2:
        v10 = 320;
        break;
      case 1:
        v10 = 160;
        break;
      default:
        v10 = 640;
        break;
    }
    v39 = v10;
    v37 = v9;
  }
  v12 = *(unsigned __int8 *)(a2 + 144);
  smc1175mrf22spi_getDecoderBufferSize(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 112), &v38, &v39, *(_DWORD *)(a1 + 232), &v37);
  if (*(_DWORD *)(a1 + 268) + v38 + 5 > *(_DWORD *)(a1 + 272)
    || (v13 = *(_DWORD *)(a2 + 124), v14 = *(_DWORD *)(a2 + 56), v13 == v14) && v12 == 1
    || v13 >= v14 && !*(_DWORD *)(a1 + 232))
  {
    v_equ_i_t(*(_DWORD **)(a1 + 320), *(int **)(a1 + 296), *(_DWORD *)(a1 + 336));
    *(_DWORD *)(a1 + 340) = *(_DWORD *)(a1 + 344);
  }
  else
  {
    result = smc1175mrf22spi_getSpectrum(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)(*(_QWORD *)(a2 + 112) + v38), *(_DWORD **)(a1 + 320), (_DWORD *)(a1 + 340));
    if ((_DWORD)result)
      return result;
  }
  v15 = v38;
  if (v38)
  {
    v16 = 0;
    v17 = *(_DWORD *)(a1 + 268);
    while (v17 < *(_DWORD *)(a1 + 272))
    {
      v18 = *(_BYTE **)(a2 + 112);
      *(_QWORD *)(a2 + 112) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(unsigned __int16 *)(a1 + 132) + (unint64_t)v16++) = *v18;
      v17 = *(_DWORD *)(a1 + 268) + 1;
      *(_DWORD *)(a1 + 268) = v17;
      if (v38 <= v16)
      {
        v15 = 0;
        goto LABEL_25;
      }
    }
    cstdlib_memcpy(*(void **)(a1 + 8), *(const void **)(a1 + 16), *(unsigned __int16 *)(a1 + 142));
    v15 = 1;
  }
  else
  {
    v16 = 0;
  }
LABEL_25:
  v19 = *(_WORD *)(a1 + 132) + v16;
  *(_WORD *)(a1 + 140) = v19;
  *(_WORD *)(a1 + 136) = v16;
  *(_WORD *)(a1 + 134) = v16;
  *(_DWORD *)(a1 + 276) += v16;
  *(_WORD *)(a1 + 138) = v19;
  if ((v15 & 1) == 0)
  {
    cstdlib_memcpy(*(void **)(a1 + 16), *(const void **)(a1 + 8), v19);
    *(_WORD *)(a1 + 142) = *(_WORD *)(a1 + 140);
  }
  v20 = *(_DWORD **)(a1 + 72);
  v22 = *(char **)a1;
  v21 = *(unsigned __int8 **)(a1 + 8);
  v23 = (_WORD *)(a1 + 144);
  v24 = *(_DWORD **)(a1 + 320);
  if (*(_DWORD *)(a1 + 232))
  {
    result = smc1175mrf22spi_DecoderProcess_F1(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v21, (_WORD *)(a1 + 140), v20, v22, v23, v24, *(_DWORD *)(a1 + 340), a3);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 232) = 0;
  }
  else
  {
    result = smc1175mrf22spi_DecoderProcess(*(unsigned __int16 **)(a1 + 80), *(_QWORD *)(a1 + 88), v21, (_WORD *)(a1 + 140), v20, v22, v23, v24, *(_DWORD *)(a1 + 340), v37, a3, a4);
    if ((_DWORD)result)
      return result;
  }
  v25 = *(unsigned __int16 *)(a1 + 146);
  v26 = v39;
  if (v39 != v25)
  {
    *(_WORD *)(a1 + 146) = v39;
    LOWORD(v25) = v26;
  }
  v27 = (unsigned __int16)v25 >> 1;
  *(_DWORD *)(a2 + 8) += v27;
  v28 = *(unsigned int *)(a1 + 24);
  v29 = *(unsigned __int16 *)(a1 + 144);
  if (v28 <= v29 >> 1)
  {
    v30 = *(_WORD **)(a1 + 160);
    v31 = *(__int16 **)a1;
    if ((_DWORD)v28)
    {
      v_equ_s_t(v30, &v31[v28], (int)((unsigned __int16)v25 - ((2 * v28) & 0xFFFE)) >> 1);
      v32 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 168) = (*(unsigned __int16 *)(a1 + 146) - 2 * (v32 & 0x7FFF)) >> 1;
      *(_DWORD *)(a2 + 8) -= v32;
      *(_DWORD *)(a1 + 24) = 0;
    }
    else
    {
      v_equ_s_t(v30, v31, v27);
      *(_DWORD *)(a1 + 168) = *(unsigned __int16 *)(a1 + 146) >> 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v28 - (v29 >> 1);
    *(_DWORD *)(a1 + 168) = 0;
  }
  v33 = *(unsigned __int16 *)(a1 + 140);
  v34 = *(unsigned __int16 *)(a1 + 138);
  if (v34 <= v33)
  {
    *(_WORD *)(a1 + 132) = 0;
    v36 = *(_WORD *)(a1 + 120);
  }
  else
  {
    v35 = v34 - v33;
    *(_WORD *)(a1 + 132) = v35;
    cstdlib_memmove(*(void **)(a1 + 8), (const void *)(*(_QWORD *)(a1 + 8) + v33), v35);
    v36 = *(_WORD *)(a1 + 120) - *(_WORD *)(a1 + 132);
  }
  *(_WORD *)(a1 + 134) = v36;
  v_equ_i_t(*(_DWORD **)(a1 + 296), *(int **)(a1 + 320), *(_DWORD *)(a1 + 336));
  result = 0;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 340);
  return result;
}

uint64_t chi_DecodePolyphone__SmpRequested(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v4 = *a3;
  if (*a3 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_DWORD *)(a1 + 236);
  if (v4 < v11)
    v11 = *a3;
  v18 = v11;
  v12 = a1 + 176;
  do
  {
    if (v10 >= v4)
      break;
    result = chi_DecodePolyphone__OneFrameX(a1, a2, &v18, v12);
    if ((_DWORD)result)
      return result;
    v14 = *(_DWORD *)(a1 + 192);
    v10 += v14;
    v15 = v4 - v10;
    if (v4 - v10 >= *(_DWORD *)(a1 + 236))
      v15 = *(_DWORD *)(a1 + 236);
    v18 = v15;
    v_equ_s_t((_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v9), *(__int16 **)(a1 + 184), v14);
    v16 = *(_DWORD *)(a1 + 192);
    v17 = *(_DWORD *)(a1 + 280) + v16;
    *(_DWORD *)(a1 + 280) = v17;
    if (v17 >= a2[32])
      break;
    v9 += v16;
  }
  while (*(_DWORD *)(a1 + 276) < *(_DWORD *)(a1 + 272));
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t chi_DecodePolyphone__OneFrameX(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  __int16 *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  __int16 *v28;
  int v29;

  result = 2164269056;
  *(_DWORD *)(a4 + 16) = 0;
  v8 = *(_DWORD *)(a1 + 236);
  v9 = a2[31];
  if (*a3 <= v8)
  {
    v10 = *(_DWORD *)(a1 + 228);
    if (v10 >= 1)
    {
      v11 = *(_WORD **)(a4 + 8);
      v12 = (__int16 *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
      if (v10 >= *a3)
      {
        v_equ_s_t(v11, v12, *a3);
        v19 = *a3;
        *(_DWORD *)(a4 + 16) = *a3;
        v20 = *(_DWORD *)(a1 + 228);
        *(_DWORD *)(a1 + 224) += *a3;
        *(_DWORD *)(a1 + 228) = v20 - *a3;
        *a3 = v19;
        if (*(_DWORD *)(a1 + 228))
          return 0;
      }
      else
      {
        v_equ_s_t(v11, v12, *(_DWORD *)(a1 + 228));
        result = 0;
        v14 = *(_DWORD *)(a1 + 224);
        v13 = *(_DWORD *)(a1 + 228);
        *(_DWORD *)(a4 + 16) = v13;
        *(_QWORD *)(a1 + 224) = (v14 + v13);
        *a3 = v13;
        if (*(_DWORD *)(a1 + 228))
          return result;
      }
      result = 0;
      *(_DWORD *)(a1 + 224) = 0;
      return result;
    }
    if (v9 <= a2[14])
    {
      result = chi_DecodePolyphone__OneFrame(a1, (uint64_t)a2, v9 >= a2[13] - 3, v9 >= a2[13] - 18);
      if (!(_DWORD)result)
      {
        v16 = a2[31];
        v17 = a2[13];
        v18 = v16 == v17;
        if (v16 < v17)
        {
          result = 0;
LABEL_30:
          a2[31] = v16 + 1;
          return result;
        }
        v21 = a2[14];
        if (!v18)
        {
          if (v16 == v21)
          {
            v24 = a2[12];
            v8 = v24 + 1;
            v25 = *a3;
            if (*a3 <= v24)
            {
              v26 = v8 - v25;
              v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), v25);
              *(_DWORD *)(a4 + 16) += *a3;
              v27 = (_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
              v28 = (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * *a3);
LABEL_24:
              v_equ_s_t(v27, v28, v26);
              result = 0;
              *(_DWORD *)(a1 + 228) = v26;
LABEL_29:
              v16 = a2[31];
              goto LABEL_30;
            }
          }
          else
          {
            v29 = v8 - *a3;
            if (v8 > *a3)
            {
              v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), *a3);
              *(_DWORD *)(a4 + 16) += *a3;
              v_equ_s_t((_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224)), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * *a3), v29);
              result = 0;
              *(_DWORD *)(a1 + 228) = v29;
              goto LABEL_29;
            }
          }
          v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a1 + 160), v8);
          result = 0;
          *(_DWORD *)(a4 + 16) += v8;
          *a3 = v8;
          goto LABEL_29;
        }
        if (v16 == v21)
        {
          v22 = a2[11];
          v23 = a2[12] - v22 + 1;
        }
        else
        {
          v22 = a2[11];
          v23 = v8 - v22;
        }
        v26 = v23 - *a3;
        if (v23 <= *a3)
        {
          v_equ_s_t(*(_WORD **)(a4 + 8), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * v22), v23);
          result = 0;
          *(_DWORD *)(a4 + 16) += v23;
          *a3 = v23;
          goto LABEL_29;
        }
        v_equ_s_t(*(_WORD **)(a4 + 8), (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * v22), *a3);
        *(_DWORD *)(a4 + 16) += *a3;
        v27 = (_WORD *)(*(_QWORD *)(a1 + 208) + 2 * *(int *)(a1 + 224));
        v28 = (__int16 *)(*(_QWORD *)(a1 + 160) + 2 * (a2[11] + *a3));
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t xi_Segment__Construct__(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t xi_Segment__Deconstruct__(uint64_t result)
{
  if (*(_QWORD *)(result + 112))
    *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t staFrameBoundary(int *a1, int a2, int *a3)
{
  int v3;

  *a3 = 0;
  v3 = *a1;
  if (*a1)
  {
    *a1 = v3 / a2 * a2;
    *a3 = v3 / a2;
  }
  return 0;
}

uint64_t endFrameBoundary(int *a1, int a2, int a3, int a4, int *a5)
{
  int v5;
  int v6;
  BOOL v7;

  *a5 = a3;
  v5 = *a1;
  if (*a1 > a4)
  {
    v6 = ~(v5 % a2) + a2;
    if (v5 % a2)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v5 += v6;
      *a1 = v5;
    }
    *a5 = v5 / a2;
  }
  return 0;
}

uint64_t xi_figureOutSomething(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 132);
  v4 = *(_DWORD *)(a1 + 92);
  v5 = *(_DWORD *)(a1 + 100);
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)a1 + v4;
  v8 = v7 + *(_DWORD *)(a1 + 96);
  v9 = v6 + v8;
  v10 = *(_DWORD *)(a1 + 104) + v5;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v10 + v6 + v8;
  *(_DWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 24) = v6;
  v11 = v6 + v8 - 1;
  if ((v6 + v8 < 0) ^ __OFADD__(v6, v8) | (v6 + v8 == 0))
    v11 = 0;
  *(_DWORD *)(a1 + 28) = v11;
  *(_DWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 84) = 0;
  if ((a2 & 0xF) != 0)
  {
    if ((a2 & 4) != 0)
    {
      v12 = 0;
      *(_DWORD *)(a1 + 60) = v8;
    }
    else
    {
      *(_DWORD *)(a1 + 60) = v7;
      v12 = *(_DWORD *)(a1 + 156);
      v6 += v12;
      *(_DWORD *)(a1 + 80) = v6;
      *(_DWORD *)(a1 + 84) = v12;
      v8 = v7;
    }
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 152);
    v8 -= v12;
    *(_DWORD *)(a1 + 60) = v8;
    v6 += v12;
    *(_DWORD *)(a1 + 80) = v6;
    *(_DWORD *)(a1 + 84) = v12;
  }
  *(_DWORD *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 88) = v6;
  if (a2 <= 0xF)
  {
    v13 = *(_DWORD *)(a1 + 152);
    v11 += v13;
    *(_DWORD *)(a1 + 64) = v11;
  }
  else
  {
    if ((a2 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 64) = v11;
      goto LABEL_15;
    }
    v11 = v10 + v9 - 1;
    *(_DWORD *)(a1 + 64) = v11;
    v13 = *(_DWORD *)(a1 + 160);
  }
  *(_DWORD *)(a1 + 80) = v13 + v6;
LABEL_15:
  *(_DWORD *)(a1 + 68) = v11 - v8 + 1;
  v14 = v8 - v4;
  v15 = v11 + v5;
  *(_DWORD *)(a1 + 32) = v8 - v4;
  *(_DWORD *)(a1 + 36) = v15;
  v16 = 4;
  if (a2 >= 0x10 && (a2 & 0x40) == 0)
  {
    v17 = v15 % v3;
    if (v15 % v3 <= 239)
    {
      if (v17 <= 159)
      {
        if (v17 <= 79)
        {
          if (v17 < 0)
            goto LABEL_26;
          v16 = 1;
        }
        else
        {
          v16 = 2;
        }
      }
      else
      {
        v16 = 3;
      }
    }
    else
    {
      v16 = 4;
    }
  }
  *(_BYTE *)(a1 + 120) = v16;
LABEL_26:
  if (v8 != v4)
  {
    v14 = v14 / v3 * v3;
    *(_DWORD *)(a1 + 32) = v14;
  }
  if (v15 <= v14)
  {
    v20 = v15;
  }
  else
  {
    v18 = v3 + ~(v15 % v3);
    v19 = v15 == v15 / v3 * v3 || v18 == 0;
    v20 = v15;
    if (!v19)
    {
      v20 = v18 + v15;
      *(_DWORD *)(a1 + 36) = v18 + v15;
    }
  }
  v21 = v11 / v3;
  v22 = v8 / v3;
  v23 = v8 % v3;
  *(_DWORD *)(a1 + 40) = v20 - v14 + 1;
  *(_DWORD *)(a1 + 44) = v23;
  v24 = v11 % v3;
  *(_DWORD *)(a1 + 52) = v22;
  *(_DWORD *)(a1 + 56) = v21;
  *(_DWORD *)(a1 + 48) = v24;
  v25 = v21 - v22;
  v26 = v24 - v23;
  v27 = v3 - v23 + v24;
  v28 = v27 + 1;
  if (v25 != 1)
    v28 = v26 + 1;
  v29 = v27 + (v25 - 1) * v3;
  if (v25 >= 2)
    v30 = v29 + 1;
  else
    v30 = v28;
  *(_DWORD *)(a1 + 128) = v30;
  if ((int)cstdlib_abs((v20 - v15)) >= v3)
    return 2164269056;
  result = 0;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t xi_Segment__InitPoly_withDur(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  char v6;
  unsigned int v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 148) = a4;
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = a3;
  if (!a6)
    v8 = 0;
  *(_QWORD *)(a1 + 112) = a5 + v8;
  *(_DWORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 144) = (v6 & 0x10) != 0;
  xi_figureOutSomething(a1, v7);
  return 0;
}

uint64_t xi_Segment__InitPoly(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  char v5;
  unsigned int v6;
  uint64_t v7;

  v5 = *(_BYTE *)(a2 + 25);
  v6 = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a3;
  if (!a5)
    v7 = 0;
  *(_QWORD *)(a1 + 112) = a4 + v7;
  *(_DWORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 144) = (v5 & 0x10) != 0;
  xi_figureOutSomething(a1, v6);
  return 0;
}

uint64_t xi_Segment__DeinitPoly(_QWORD *a1)
{
  *a1 = 0;
  a1[14] = 0;
  return 0;
}

uint64_t xi_Segment__Init_for_psola(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 132) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 168) = a2;
  return 0;
}

uint64_t xi_Segment__Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;

  *(_QWORD *)(a1 + 132) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 8);
  v3 = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 156) = v3;
  v4 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 160) = v4;
  *(_DWORD *)(a1 + 92) = 640;
  *(_QWORD *)(a1 + 96) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 168) = a2;
  return 0;
}

uint64_t xi_Segment__Denit()
{
  return 0;
}

uint64_t rho_Concat__findbestmatch_fixed(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  __int16 *v22;
  __int16 *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  __int16 *v49;

  v3 = a1[4];
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(__int16 **)(a3 + 8);
  v7 = (int)a1[2];
  v8 = a1[2];
  if ((int)v7 < 1)
  {
    LOBYTE(v10) = 0;
    v16 = 0;
    v15 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v6[v9] >> v10;
      v13 = v11 + v12 * v12;
      if (v13 < 0x1FFFFFF)
      {
        v11 = v13;
      }
      else
      {
        do
        {
          if ((v10 + 1) > 1)
            ++v10;
          else
            v10 = 1;
          v11 = v13 >> 2;
          v31 = v13 <= 134217723;
          v13 >>= 2;
        }
        while (!v31);
      }
      v9 += v3;
    }
    while (v9 < v8);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v6[v14] >> v10;
      v15 += v17 * v17;
      v16 += (*(__int16 *)(v5 + 2 * v14) >> v10) * v17;
      v14 += v3;
    }
    while (v14 < v8);
  }
  v18 = a1[1];
  if (v3 <= v18)
  {
    v45 = a1[1];
    if (v15 <= 125 << (2 * v10))
      v20 = 125 << (2 * v10);
    else
      v20 = v15;
    v46 = v3;
    v47 = v8;
    v21 = rho_Concat__sqrt(v20);
    LODWORD(v19) = 0;
    v22 = &v6[v4];
    v23 = v6;
    LODWORD(v8) = v47;
    v24 = v46;
    v25 = v16 / v21;
    do
    {
      v49 = v6;
      v48 = v19;
      if ((int)v8 < 1)
      {
        v27 = 0;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v27 += (*(__int16 *)(v5 + 2 * v26) >> v10) * (v22[v26] >> v10);
          v26 += v4;
        }
        while (v26 < v7);
      }
      v28 = v23[v7] >> v10;
      v15 = v15 - (*v23 >> v10) * (*v23 >> v10) + v28 * v28;
      v23 += v4;
      if (v15 <= 125 << (2 * v10))
        v29 = 125 << (2 * v10);
      else
        v29 = v15;
      v30 = v27 / (int)rho_Concat__sqrt(v29);
      v31 = v30 <= v25;
      if (v30 <= v25)
        v19 = v48;
      else
        v19 = v24;
      if (v30 > v25)
        v25 = v30;
      v6 = v49;
      if (!v31)
        v6 = v23;
      v3 = v46;
      v8 = v47;
      v24 += v46;
      v22 += v4;
      v18 = v45;
    }
    while ((int)v24 <= v45);
  }
  else
  {
    v19 = 0;
  }
  v32 = v3 - 1;
  v33 = v19 + v3 - 1;
  v34 = v19 - (v3 - 1);
  v35 = v18 - 1;
  v36 = v34 & ~(v34 >> 31);
  if (v33 < v18)
    v35 = v19 + v3 - 1;
  else
    v36 = v19 - (v3 - 1);
  if (v36 <= v35)
  {
    v37 = 0;
    if (v34 < 0 && v33 < v18)
      v32 = v19;
    v39 = &v6[-v32];
    v40 = 2 * v8;
    do
    {
      if ((int)v7 < 1)
      {
        v42 = 0;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        do
        {
          v42 += (*(__int16 *)(v5 + v41) >> v10) * (v39[v41 / 2] >> v10);
          v41 += 2;
        }
        while (v40 != v41);
      }
      if (v42 <= v37)
        v19 = v19;
      else
        v19 = v36;
      if (v42 > v37)
        v37 = v42;
      ++v39;
    }
    while (v36++ != v35);
  }
  return v19;
}

uint64_t rho_Concat__sqrt(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  result = 1;
  if (a1 >= 2)
  {
    v3 = a1 >> 30;
    if (a1 >> 30)
      a1 -= 0x40000000;
    v4 = v3 != 0;
    v5 = v4 << 15;
    v6 = (v4 << 30) | 0x10000000;
    v7 = ((v4 & 1) << 15) | 0x4000;
    if (a1 >= v6)
      v8 = (v4 << 30) | 0x10000000;
    else
      v8 = 0;
    if (a1 >= v6)
      v5 = v7;
    v9 = a1 - v8;
    v10 = ((unsigned __int16)v5 >> 14 << 28) | 0x4000000;
    v11 = v5 | 0x2000;
    if (v9 < v10)
    {
      v10 = 0;
      v11 = v5;
    }
    v12 = v9 - v10;
    v13 = ((v11 >> 13) << 26) | 0x1000000;
    if (v12 >= v13)
      v11 |= 0x1000u;
    else
      v13 = 0;
    v14 = v12 - v13;
    v15 = (v11 << 12) + 0x400000;
    if (v14 >= v15)
      v11 += 2048;
    else
      v15 = 0;
    v16 = v14 - v15;
    v17 = (v11 << 11) + 0x100000;
    if (v16 >= v17)
      v11 += 1024;
    else
      v17 = 0;
    v18 = v16 - v17;
    v19 = (v11 << 10) + 0x40000;
    if (v18 >= v19)
      v11 += 512;
    else
      v19 = 0;
    v20 = v18 - v19;
    v21 = (v11 << 9) + 0x10000;
    if (v20 >= v21)
      v11 += 256;
    else
      v21 = 0;
    v22 = v20 - v21;
    v23 = (v11 << 8) + 0x4000;
    if (v22 >= v23)
      v11 += 128;
    else
      v23 = 0;
    v24 = v22 - v23;
    v25 = (v11 << 7) + 4096;
    if (v24 >= v25)
      v11 += 64;
    else
      v25 = 0;
    v26 = v24 - v25;
    v27 = (v11 << 6) + 1024;
    if (v26 >= v27)
      v11 += 32;
    else
      v27 = 0;
    v28 = v26 - v27;
    v29 = 32 * v11 + 256;
    if (v28 >= v29)
      v11 += 16;
    else
      v29 = 0;
    v30 = v28 - v29;
    v31 = 16 * v11 + 64;
    if (v30 >= v31)
      v11 += 8;
    else
      v31 = 0;
    v32 = v30 - v31;
    v33 = 8 * v11 + 16;
    if (v32 >= v33)
      v11 += 4;
    else
      v33 = 0;
    v34 = v32 - v33;
    v35 = 4 * v11 + 4;
    if (v34 >= v35)
      v11 += 2;
    else
      v35 = 0;
    if (v34 - v35 < ((2 * v11) | 1))
      return v11;
    else
      return v11 + 1;
  }
  return result;
}

uint64_t mu_Reset(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return 0;
}

uint64_t psi_Lookup_AvgSpeed(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 72);
  if (*(_WORD *)(a1 + 72))
    return 0;
  else
    return 2164269057;
}

uint64_t psi_Lookup_Freq(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 74);
  if (*(_WORD *)(a1 + 74))
    return 0;
  else
    return 2164269057;
}

uint64_t psi_VFDat__Construct__(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a4 + 44) = 0;
  *(_BYTE *)(a3 + 44) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  return 0;
}

uint64_t psi_VFDat__unloadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return v4;
  if (*(_BYTE *)(a2 + 44) == 1)
  {
    vect_uc_t__deleteVect(a2);
    v4 = 0;
LABEL_11:
    if (*(_BYTE *)(a3 + 44) == 1)
    {
      vect_uc_t__deleteVect(a3);
    }
    else
    {
      v18 = *(_QWORD **)(a3 + 24);
      if (v18)
      {
        v4 = ssftriff_reader_ReleaseChunkData(v18, v9, v10, v11, v12, v13, v14, v15);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    if (*(_BYTE *)(a4 + 44) == 1)
    {
      vect_uc_t__deleteVect(a4);
      return v4;
    }
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
        return brk_DataClose(v20, *(_QWORD *)(a4 + 32));
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    return 0;
  v4 = brk_DataClose(v17, *(_QWORD *)(a2 + 32));
  if ((v4 & 0x80000000) == 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    goto LABEL_11;
  }
  return v4;
}

uint64_t psi_VFDat__loadData(uint64_t a1, _WORD *a2, uint64_t a3, const char *a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  uint64_t inited;
  uint64_t ChunkData;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  void **v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67[2];
  char __s1[4];
  char v69;
  int v70[2];
  uint64_t v71;
  char __s2[64];
  char v73[64];
  _OWORD __dst[4];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v70 = 0;
  v71 = 0;
  v69 = 0;
  *(_DWORD *)__s1 = 0;
  *(_QWORD *)v67 = 0;
  v66 = 0;
  memset(__dst, 0, sizeof(__dst));
  inited = InitRsrcFunction(a2, a3, &v71);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_QWORD *)(a1 + 64) = v71;
  ChunkData = ssftriff_reader_ObjOpen(a2, a3, 0, a4, "VFNT", 131333, (uint64_t *)v70);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_53;
  v27 = ssftriff_reader_OpenChunk(*(uint64_t *)v70, (__int32 *)__s1, (unsigned int *)&v66, 0, v23, v24, v25, v26);
  if ((v27 & 0x80000000) != 0)
  {
LABEL_48:
    v28 = v27;
    if ((v27 & 0x1FFF) != 0x14)
      goto LABEL_54;
    v28 = ssftriff_reader_ObjClose(*(_QWORD **)v70, v20, v21, v22, v23, v24, v25, v26);
    if ((v28 & 0x80000000) != 0)
      goto LABEL_54;
    return v28;
  }
  v63 = a8;
  v28 = 2164269066;
  v62 = (_QWORD *)(a7 + 8);
  v61 = (void **)(a7 + 24);
  v64 = a7;
  while (cstdlib_strcmp(__s1, "VINF"))
  {
    if (!cstdlib_strcmp(__s1, "CODR"))
    {
      *(_QWORD *)(a1 + 56) = a9;
      if (!a10)
      {
        *(_BYTE *)(a9 + 44) = 0;
        goto LABEL_46;
      }
      *(_BYTE *)(a9 + 44) = 1;
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v70, v66, v67, v34, v35, v36, v37, v38);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_53;
      if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), a9, v66) & 0x80000000) != 0)
        goto LABEL_54;
      v58 = *(_BYTE **)(a9 + 8);
      goto LABEL_36;
    }
    if (cstdlib_strcmp(__s1, "CTUN"))
    {
      if (cstdlib_strcmp(__s1, "UNIT"))
      {
        if (cstdlib_strcmp(__s1, "SPCH"))
        {
          log_OutText(*(_QWORD *)(v71 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"Unknown data: %s for %s", v46, v47, v48, (uint64_t)__s1);
        }
        else
        {
          *(_QWORD *)(a1 + 40) = a5;
          if (a6)
          {
            *(_BYTE *)(a5 + 44) = 1;
            ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v70, v66, v67, v44, v45, v46, v47, v48);
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_53;
            if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), a5, v66) & 0x80000000) != 0)
              goto LABEL_54;
            *(_DWORD *)(a5 + 40) = 0;
            v_equ_uc_t(*(_BYTE **)(a5 + 8), *(char **)v67, v66);
            *(_QWORD *)(a5 + 32) = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a5 + 8) + *(unsigned int *)(a5 + 40);
          }
          else
          {
            *(_BYTE *)(a5 + 44) = 0;
            *(_QWORD *)(a5 + 8) = 0;
            v59 = v66;
            *(_DWORD *)(a9 + 16) = v66;
            *(_DWORD *)(a5 + 20) = v59;
            *(_DWORD *)(a5 + 40) = ssftriff_reader_GetPosition(*(uint64_t *)v70);
            ChunkData = brk_DataOpen(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24));
            if ((ChunkData & 0x80000000) != 0)
              goto LABEL_53;
            *(_QWORD *)(a1 + 24) = 0;
          }
        }
        goto LABEL_46;
      }
      *(_QWORD *)(a1 + 48) = a7;
      if (!v63)
      {
        *(_BYTE *)(a7 + 44) = 0;
        ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v70, v61, v62, v39, v40, v41, v42, v43);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_53;
        goto LABEL_46;
      }
      *(_BYTE *)(a7 + 44) = 1;
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v70, v66, v67, v39, v40, v41, v42, v43);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_53;
      if ((vect_uc_t__createVect(*(_QWORD **)(*(_QWORD *)(a1 + 64) + 8), a7, v66) & 0x80000000) != 0)
        goto LABEL_54;
      v58 = (_BYTE *)*v62;
LABEL_36:
      v_equ_uc_t(v58, *(char **)v67, v66);
    }
LABEL_46:
    ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v70);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_53;
    v27 = ssftriff_reader_OpenChunk(*(uint64_t *)v70, (__int32 *)__s1, (unsigned int *)&v66, 0, v23, v24, v25, v26);
    if ((v27 & 0x80000000) != 0)
      goto LABEL_48;
  }
  v65 = 0;
  ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v70, v66, v67, v29, v30, v31, v32, v33);
  if ((ChunkData & 0x80000000) != 0)
    goto LABEL_53;
  v49 = v66;
  if (!v66)
  {
LABEL_27:
    a7 = v64;
    goto LABEL_46;
  }
  v50 = 0;
  while (1)
  {
    __s2[0] = 0;
    v73[0] = 0;
    v65 = 64;
    ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v70, *(uint64_t *)v67, v49, v50, v73, &v65);
    if ((ChunkData & 0x80000000) == 0)
    {
      v21 = v66;
      if (v50 < v66)
      {
        v50 += v65;
        v65 = 64;
        ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v70, *(uint64_t *)v67, v66, v50, __s2, &v65);
      }
    }
    if ((ChunkData & 0x80000000) != 0)
      break;
    v51 = v65;
    if (cstdlib_strcmp(v73, "Freq"))
    {
      if (cstdlib_strcmp(v73, "AvgSpeed"))
      {
        if (!cstdlib_strcmp(v73, "Coder"))
        {
          if (__s2[0] && cstdlib_strcmp(__s2, "1175mrf22"))
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"SYNTH", 0, 0, (uint64_t)"Incompatible encoding of %s: %s", v55, v56, v57, (uint64_t)a4);
            ChunkData = 2164269081;
            break;
          }
          cstdlib_strcpy((char *)__dst, "decoder/");
          cstdlib_strcat((char *)__dst, __s2);
        }
      }
      else
      {
        *(_WORD *)(a1 + 72) = cstdlib_atoi((unsigned __int8 *)__s2);
      }
    }
    else
    {
      *(_WORD *)(a1 + 74) = cstdlib_atoi((unsigned __int8 *)__s2);
    }
    v50 += v51;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"VF attribute %s=%s", v52, v53, v54, (uint64_t)v73);
    v49 = v66;
    if (v50 >= v66)
      goto LABEL_27;
  }
LABEL_53:
  v28 = ChunkData;
LABEL_54:
  if (*(_QWORD *)v70)
    ssftriff_reader_ObjClose(*(_QWORD **)v70, v20, v21, v22, v23, v24, v25, v26);
  return v28;
}

uint64_t psi_mapCodedData(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v4;

  v4 = *a4;
  if ((_DWORD)v4)
    return brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(a2 + 32), (*(_DWORD *)(a2 + 40) + a3), v4, a1 + 24);
  else
    return 0;
}

uint64_t psi_unMapCodedData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 16785425;
  result = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(a2 + 32), v2);
  if ((result & 0x80000000) == 0)
    *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t psi_DataMapSegment__InitPoly(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v3 + 44))
    return 0;
  v5 = *a3;
  if (!(_DWORD)v5)
    return 0;
  else
    return brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 40) + *a2), v5, a1 + 24);
}

uint64_t psi_DataMapSegment__DeinitPoly(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v1 + 44))
    return 0;
  else
    return psi_unMapCodedData(a1, v1);
}

uint64_t convertFromMsecToTp(int a1)
{
  if (a1 < 1)
    return 0;
  else
    return 22 * a1
         + 3276 * HIWORD(a1)
         + ((26214 * HIWORD(a1)
           + 1638 * (unsigned __int16)a1
           + ((26214 * (unsigned __int16)a1 + 0x8000) >> 16)
           + 0x4000) >> 15);
}

uint64_t vu__UnitVector_t__Construct__(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t vu__UnitVector_t__Create(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  __int16 v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = 2164269066;
  if (a1)
  {
    v6 = a3;
    v9 = heap_Calloc(*(_QWORD **)(a2 + 8), a3, 28);
    v10 = heap_Calloc(*(_QWORD **)(a2 + 8), a4, 16);
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v4 = 0;
      *(_WORD *)(a1 + 16) = v6;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
      *(_WORD *)(a1 + 18) = a4;
    }
  }
  return v4;
}

uint64_t vu__UnitVector_t__Delete(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 2164269066;
  if (*(_QWORD *)a1)
  {
    heap_Free(*(_QWORD **)(a2 + 8), *(_QWORD *)a1);
    *(_QWORD *)a1 = 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    heap_Free(*(_QWORD **)(a2 + 8), v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
  result = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t vu__fillUnitAndSubUnit__Init(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2164269066;
  if (a1)
  {
    v4 = heap_Calloc(*(_QWORD **)(a2 + 8), 1, 40);
    *a1 = v4;
    if (v4)
    {
      v2 = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
    }
  }
  return v2;
}

uint64_t vu__fillUnitAndSubUnit__Denit(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = 2164269066;
  if (a1)
  {
    v4 = *a1;
    if (*a1)
    {
      if (!vu__UnitVector_t__Delete(*a1, a2))
      {
        heap_Free(*(_QWORD **)(a2 + 8), v4);
        v2 = 0;
        *a1 = 0;
      }
    }
  }
  return v2;
}

uint64_t vu__fillUnitAndSubUnit__Begin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  char v9;
  uint64_t Vect;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _OWORD *v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  BOOL *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];

  v5 = *(_DWORD *)(a4 + 32);
  if (!v5)
    return 0;
  v9 = *(_BYTE *)(a4 + 8);
  v103 = 0;
  v104[0] = 0;
  v101 = 0;
  v102 = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v91 = 0;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v84 = 0;
  v83 = 0;
  Vect = vect_c_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v88, v5);
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_c_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v85, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v97, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v100, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v94, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  Vect = vect_i_t__createVect(*(_QWORD **)(a2 + 8), (uint64_t)&v91, *(_DWORD *)(a4 + 32));
  if ((_DWORD)Vect)
    return Vect;
  v11 = *(_DWORD *)(a4 + 32);
  if (v11 < 1)
    goto LABEL_20;
  v12 = 0;
  for (i = 0; i < v11; i += 2)
  {
    v14 = *(_QWORD *)(a4 + 48);
    if (*(_BYTE *)(v14 + v12) == 35 && *(_BYTE *)(v14 + v12 + 1) == 35)
    {
      *(_BYTE *)(*(_QWORD *)(a4 + 96) + v12) = 80;
      *(_BYTE *)(*(_QWORD *)(a4 + 96) + v12 + 1) = 80;
      v11 = *(_DWORD *)(a4 + 32);
    }
    ++v12;
  }
  if (v11 < 2)
  {
LABEL_20:
    *v89 = 0;
    psi_Lookup__getPreviousDemiID(a3, **(_DWORD **)(a4 + 24), &v83, (_BYTE *)&v84 + 1, (_DWORD *)v104 + 1, v104, (int *)&v103 + 1, &v84, (unsigned int *)&v103);
    *v98 = v104[0];
    *v101 = HIDWORD(v104[0]);
    *v95 = HIDWORD(v103);
    *v92 = v103;
    *v86 = HIBYTE(v84) != 0;
    if (**(_BYTE **)(a4 + 48) != 35)
    {
      *v86 = 0;
      if (*(int *)(a4 + 32) >= 2)
        v89[1] = 0;
    }
    v18 = *(_DWORD *)(a4 + 32);
    if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + (v18 >> 1) - 1) != 35)
    {
      v89[v18 - 1] = 0;
      v19 = *(int *)(a4 + 32);
      if ((int)v19 < 1)
        goto LABEL_32;
      v86[v19 - 2] = 0;
      v18 = *(_DWORD *)(a4 + 32);
    }
    if (v18 >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = -1;
      do
      {
        if (!v89[v20])
          ++v22;
        v21 += (v20++ & 1) == 0;
      }
      while (v18 != v20);
      goto LABEL_33;
    }
LABEL_32:
    v21 = 0;
    v22 = -1;
LABEL_33:
    Vect = 2164269056;
    v73 = (v22 + 1);
    v23 = heap_Calloc(*(_QWORD **)(a2 + 8), v73, 28);
    if (!v23)
      return 2164269066;
    v24 = v23;
    v25 = heap_Calloc(*(_QWORD **)(a2 + 8), v21, 16);
    if (!v25)
      return 2164269066;
    v72 = v22;
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v25;
    v74 = v25;
    *(_WORD *)(a1 + 16) = v73;
    *(_WORD *)(a1 + 18) = v21;
    v78 = (_OWORD *)v24;
    if (*(int *)(a4 + 32) >= 1)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v79 = 0;
      v77 = 0;
      v75 = a4 + 112;
      v76 = a4 + 88;
      v32 = 0xFFFFFFFFLL;
      while (1)
      {
        v33 = v101[v29];
        HIDWORD(v104[0]) = v33;
        v34 = v89;
        if (!v89[v29])
          v31 = 0;
        v35 = v29 >> 1;
        if (!*(_WORD *)(*(_QWORD *)(a4 + 120) + 2 * v35))
          break;
        if (v33 >= 206)
          goto LABEL_44;
        v36 = 1;
LABEL_45:
        if ((v29 & 1) == 0)
        {
          if (v29 > 1)
          {
            v37 = v77;
          }
          else
          {
            v37 = v77;
            if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + v35) != 35)
            {
              v38 = *(_QWORD *)(a4 + 72);
              v37 = v77 + *(unsigned __int8 *)(v38 + v35);
              *(_BYTE *)(v38 + v35) = 0;
              v34 = v89;
            }
          }
          v39 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 72) + v35);
          v40 = v74 + 16 * v79;
          *(_BYTE *)(v40 + 14) = v39;
          *(_WORD *)(v40 + 12) = v37;
          *(_DWORD *)v40 = v31;
          *(_DWORD *)(v40 + 4) = HIDWORD(v104[0]) + v30;
          v77 = v37 + v39;
          v33 = HIDWORD(v104[0]);
          v30 = 0;
        }
        v81 = v33;
        v82 = v30;
        v80 = v33 + v31;
        if (v34[v29])
        {
          v41 = v24 + 28 * (int)v32;
          v42 = v24;
          v43 = v32;
          vu__PadUnit(v76, v75, v41, v29);
          v32 = v43;
          v24 = v42;
          *(_DWORD *)(v41 + 4) += HIDWORD(v104[0]);
        }
        else
        {
          LODWORD(v104[0]) = v98[v29];
          v44 = (int)v32 + 1;
          HIDWORD(v103) = v95[v29];
          LODWORD(v103) = v92[v29];
          v45 = (_DWORD *)(v24 + 28 * v44);
          *v45 = HIDWORD(v103);
          v45[1] = HIDWORD(v104[0]);
          if ((v36 & 1) == 0)
          {
            *v45 = v33 + v31;
            v45[1] = HIDWORD(v104[0]);
          }
          v46 = (uint64_t)v78 + 28 * v44;
          *(_WORD *)(v46 + 16) = v79;
          *(_WORD *)(v46 + 18) = 0;
          *(_BYTE *)(v46 + 24) = 0;
          vu__FillUnit(a4 + 40, v76, v75, (uint64_t)v45, v29, *(_DWORD *)(a4 + 32), v9);
          *(_DWORD *)(v46 + 12) = v104[0];
          *(_DWORD *)(v46 + 20) = v103;
          v24 = (uint64_t)v78;
          v32 = v44;
        }
        v47 = v24 + 28 * (int)v32;
        if (v86[v29])
          *(_BYTE *)(v47 + 25) |= 0x10u;
        if (v29 == *(_DWORD *)(a4 + 32) - 1)
        {
          *(_BYTE *)(v47 + 25) |= (v9 & 4) >> 1;
          if ((v9 & 4) != 0)
          {
            v48 = v32;
            log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"Last phrase in sentence reached\n", v26, v27, v28, v71);
            v32 = v48;
          }
        }
        if ((v29 & 1) == 0)
        {
          ++*(_WORD *)(v47 + 18);
          ++v79;
        }
        v30 = v81 + v82;
        ++v29;
        v31 = v80;
        if ((uint64_t)v29 >= *(int *)(a4 + 32))
          goto LABEL_69;
      }
      v36 = 1;
      if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + v35) != 35 || v33 <= 205)
        goto LABEL_45;
LABEL_44:
      v36 = 0;
      v31 = (v33 - 5) >> 1;
      v33 = 5;
      HIDWORD(v104[0]) = 5;
      goto LABEL_45;
    }
    LODWORD(v32) = -1;
LABEL_69:
    if ((_DWORD)v32 != v72)
    {
      log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"error in synth_fx. Number of Units do not match!", v26, v27, v28, v71);
      return Vect;
    }
    v49 = v73;
    if ((v72 & 0x80000000) == 0)
    {
      v50 = 0;
      do
      {
        v51 = v24 + 28 * v50;
        v52 = *(_DWORD *)(v51 + 4);
        HIDWORD(v104[0]) = v52;
        v53 = *(unsigned __int16 *)(v51 + 18);
        if (*(_WORD *)(v51 + 18))
        {
          v54 = *(unsigned __int16 *)(v24 + 28 * v50 + 16);
          v55 = v53 + v54;
          v56 = (int *)(v74 + 4 + 16 * (v55 - 1));
          do
          {
            v57 = (v52 - *(v56 - 1)) & ~((v52 - *(v56 - 1)) >> 31);
            *v56 = v57;
            v56 -= 4;
            v52 = HIDWORD(v104[0]) - v57;
            HIDWORD(v104[0]) = v52;
            --v55;
          }
          while (v55 > v54);
        }
        ++v50;
      }
      while (v50 != v73);
    }
    vect_c_t__deleteVect((uint64_t)&v88);
    vect_c_t__deleteVect((uint64_t)&v85);
    *(_WORD *)(a1 + 20) = 0;
    if ((v72 & 0x80000000) == 0)
    {
      v61 = 0;
      v62 = v78;
      do
      {
        if (v61 && !*((_DWORD *)v78 + 7 * v61 + 1))
        {
          v63 = v49;
          v64 = (v49 - 1);
          if (v61 < (int)v64)
          {
            v65 = *((_BYTE *)v78 + 28 * v61 + 24);
            if ((v65 & 0xF) != 4 && (v65 & 0xF0) != 0x40)
            {
              log_OutText(*(_QWORD *)(a2 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)"synth_fx: reducing number of fx units !", v58, v59, v60, v71);
              v66 = *((unsigned __int16 *)v78 + 14 * (v61 - 1) + 8);
              v67 = *((unsigned __int16 *)v78 + 14 * v61 + 8);
              if ((_DWORD)v67 != (_DWORD)v66)
              {
                *(_BYTE *)(v74 + 16 * v66 + 14) += *(_BYTE *)(v74 + 16 * v67 + 14);
                v68 = v64;
                v69 = v62;
                do
                {
                  *v69 = *(_OWORD *)((char *)v69 + 28);
                  *(_OWORD *)((char *)v69 + 12) = *(_OWORD *)((char *)v69 + 40);
                  v69 = (_OWORD *)((char *)v69 + 28);
                  --v68;
                }
                while (v61 != v68);
                *(_WORD *)(a1 + 16) = v64;
                v63 = v64;
              }
            }
          }
        }
        else
        {
          v63 = v49;
        }
        ++v61;
        v62 = (_OWORD *)((char *)v62 + 28);
        v49 = v63;
      }
      while (v61 < (int)v63);
    }
    vect_i_t__deleteVect((uint64_t)&v97);
    vect_i_t__deleteVect((uint64_t)&v100);
    vect_i_t__deleteVect((uint64_t)&v94);
    vect_i_t__deleteVect((uint64_t)&v91);
    return 0;
  }
  v15 = v11;
  while (1)
  {
    v16 = v15 - 1;
    if (psi_Lookup__getPreviousDemiID(a3, *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * (v15 - 1)), &v83, (_BYTE *)&v84 + 1, (_DWORD *)v104 + 1, v104, (int *)&v103 + 1, &v84, (unsigned int *)&v103))return 2164269056;
    v17 = (v15 - 1);
    v98[v17] = v104[0];
    v101[v17] = HIDWORD(v104[0]);
    v95[v17] = HIDWORD(v103);
    v92[v17] = v103;
    v89[v17] = *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * (v15 - 2)) == v83;
    v86[v17] = HIBYTE(v84) != 0;
    if (*(_BYTE *)(*(_QWORD *)(a4 + 48) + (v16 >> 1)) == 35)
    {
      v89[v17] = 0;
      v86[v17] = 1;
    }
    --v15;
    if ((unint64_t)(v16 + 1) <= 2)
      goto LABEL_20;
  }
}

uint64_t vu__FillUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  uint64_t v9;
  uint64_t result;
  char v11;
  unsigned int v14;

  v9 = (uint64_t)a5 >> 1;
  result = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 2 * (a5 >> 1));
  *(_BYTE *)(a4 + 24) = 34;
  if ((a5 & 1) == 0)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if ((_DWORD)result)
    {
      v11 = 2;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + v9) != 80)
        return result;
      v11 = 66;
    }
LABEL_18:
    *(_BYTE *)(a4 + 24) = v11;
    return result;
  }
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + v9) != 80)
      return result;
    v11 = 36;
    goto LABEL_18;
  }
  result = convertFromMsecToTp(result);
  if ((int)result <= 10)
    v14 = 10;
  else
    v14 = result;
  *(_DWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 24) = 32;
  if (a6 >= 6
    && *(_BYTE *)(*(_QWORD *)(a1 + 8) + v9) == 35
    && (!(a7 & 1 | v9) || (a6 >> 1) - 1 == (_DWORD)v9 && (a7 & 4) == 0))
  {
    *(_DWORD *)(a4 + 8) = v14 >> 1;
  }
  return result;
}

uint64_t vu__PadUnit(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  char v6;

  if ((a4 & 1) != 0)
  {
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a3 + 24) & 0xF | 0x20;
  }
  else
  {
    v4 = (uint64_t)a4 >> 1;
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v4);
    v6 = *(_BYTE *)(a3 + 24) & 0xF;
    *(_BYTE *)(a3 + 24) = v6 | 0x20;
    if (!v5)
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 8) + v4) != 80)
        return result;
      v6 |= 0x40u;
    }
    *(_BYTE *)(a3 + 24) = v6;
  }
  return result;
}

uint64_t vu__fillUnitAndSubUnit__End(uint64_t a1, uint64_t a2)
{
  if (vu__UnitVector_t__Delete(a1, a2))
    return 2164269066;
  else
    return 0;
}

uint64_t rho_InOut__PutVectorInBuffer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _WORD *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 v7;

  if ((int)a4 < 1)
  {
    a4 = 0;
  }
  else
  {
    v4 = *(_WORD **)(a1 + 88);
    v5 = a4;
    v6 = (__int16 *)(*(_QWORD *)(a2 + 8) + 2 * a3);
    do
    {
      v7 = *v6++;
      *v4++ = v7;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 96) = a4;
  return a4;
}

uint64_t rho_purgeBufferToVector(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  __int16 *v5;
  _WORD *v6;
  uint64_t v7;
  __int16 v8;
  BOOL v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;

  LODWORD(v3) = *a2;
  if ((int)*a2 < 1 || (v4 = *(_DWORD *)(a1 + 96), v4 < 1))
  {
    LODWORD(v3) = 0;
  }
  else
  {
    if (v3 >= v4)
      v3 = v4;
    else
      v3 = v3;
    v5 = *(__int16 **)(a1 + 88);
    v6 = *(_WORD **)(a3 + 8);
    v7 = v3;
    do
    {
      v8 = *v5++;
      *v6++ = v8;
      --v7;
    }
    while (v7);
    v9 = __OFSUB__(v4, (_DWORD)v3);
    v10 = (v4 - v3);
    if (((int)v10 < 0) ^ v9 | ((_DWORD)v10 == 0))
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v11 = *(_WORD **)(a1 + 88);
      v12 = v10;
      do
      {
        *v11 = v11[v3];
        ++v11;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(a1 + 96) = v10;
  }
  *a2 = v3;
  return 0;
}

uint64_t rho_InOut__DecodeToVector(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5)
{
  int v10;
  int v11;
  __int16 *v12;
  _WORD *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  __int16 *v18;
  _WORD *v19;
  uint64_t v20;
  __int16 v21;
  unsigned int v23;

  *(_DWORD *)(a5 + 16) = 0;
  if (a4 < 1)
    return 0;
  v23 = a4;
  v10 = *(_DWORD *)(a1 + 96);
  if (v10 < 1)
  {
    v16 = 0;
    if (v10)
      return 0;
    goto LABEL_9;
  }
  rho_purgeBufferToVector(a1, &v23, a1 + 104);
  v11 = v23;
  if ((int)v23 >= 1)
  {
    v12 = *(__int16 **)(a1 + 112);
    v13 = *(_WORD **)(a5 + 8);
    v14 = v23;
    do
    {
      v15 = *v12++;
      *v13++ = v15;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(a5 + 16) += v11;
  v23 = a4 - v11;
  v16 = v11;
  if (!*(_DWORD *)(a1 + 96))
  {
LABEL_9:
    chi_DecodePolyphone__SmpRequested(a2, a3, (int *)&v23, a1 + 104);
    v17 = v23;
    if ((int)v23 >= 1)
    {
      v18 = *(__int16 **)(a1 + 112);
      v19 = (_WORD *)(*(_QWORD *)(a5 + 8) + 2 * v16);
      v20 = v23;
      do
      {
        v21 = *v18++;
        *v19++ = v21;
        --v20;
      }
      while (v20);
    }
    *(_DWORD *)(a5 + 16) += v17;
  }
  return 0;
}

uint64_t rho_synthDecodeToClient(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t result;
  BOOL v18;
  int v19;
  int v20;
  int v21;

  v12 = *(_QWORD *)(a2 + 352);
  v13 = *(_DWORD *)(a1 + 96);
  if (v13 >= 1)
  {
    v14 = (int *)(a4 + 16);
    while (1)
    {
      v15 = *v14;
      if (*v14 >= a5)
        v15 = a5;
      v21 = v15;
      rho_purgeBufferToVector(a1, &v21, a6);
      v16 = v21;
      if (!v21)
        break;
      *(_DWORD *)(a4 + 16) = v21;
      v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a6 + 8), v16);
      result = rho_InOut__ApplyVolume(v12, a1, a4);
      if ((_DWORD)result)
        return result;
      result = eta_PushSamplesOut(v12, 2, (__int16 **)(a4 + 8), (unsigned int *)(a4 + 16));
      if ((_DWORD)result)
        return result;
      a5 -= v16;
      v13 = *(_DWORD *)(a1 + 96);
      if (v13 <= 0)
        goto LABEL_11;
    }
    v13 = *(_DWORD *)(a1 + 96);
  }
LABEL_11:
  if (v13)
    v18 = 1;
  else
    v18 = a5 == 0;
  if (!v18)
  {
    do
    {
      v19 = *(_DWORD *)(a4 + 16);
      if (v19 >= a5)
        v19 = a5;
      v21 = v19;
      chi_DecodePolyphone__SmpRequested(a2, a3, &v21, a6);
      v20 = v21;
      if (!v21)
        break;
      *(_DWORD *)(a4 + 16) = v21;
      v_equ_s_t(*(_WORD **)(a4 + 8), *(__int16 **)(a6 + 8), v20);
      result = rho_InOut__ApplyVolume(v12, a1, a4);
      if ((_DWORD)result)
        return result;
      result = eta_PushSamplesOut(v12, 2, (__int16 **)(a4 + 8), (unsigned int *)(a4 + 16));
      if ((_DWORD)result)
        return result;
      a5 -= v21;
    }
    while (a5);
  }
  return 0;
}

uint64_t rho_InOut__AudioWriteToClient__No_Subunits(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _BOOL4 IsEndState;
  BOOL v15;

  if (a5 < 1)
    return 0;
  v5 = a5;
  v10 = a1 + 104;
  v11 = a4 + 8;
  do
  {
    if (v5 >= *(_DWORD *)(a1 + 120))
      v12 = *(_DWORD *)(a1 + 120);
    else
      v12 = v5;
    *(_DWORD *)(a4 + 36) += v12;
    result = rho_synthDecodeToClient(a1, a2, a3, a4, v12, v10);
    if ((_DWORD)result)
      break;
    IsEndState = eta_InOut__IsEndState(v11);
    result = 0;
    if (IsEndState)
      break;
    v15 = __OFSUB__(v5, v12);
    v5 -= v12;
  }
  while (!((v5 < 0) ^ v15 | (v5 == 0)));
  return result;
}

uint64_t rho_InOut__AudioWriteToClientWithMarkers(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  int v41;
  uint64_t result;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v48;
  int v49;
  int v51;
  int v52;
  unsigned __int16 v53;

  v44 = a8;
  v8 = *(_QWORD *)(a2 + 352);
  v53 = 0;
  if ((int)a6 < 1)
    return 0;
  if (*(_WORD *)(*(_QWORD *)a4 + 18))
  {
    v10 = a7;
    v48 = 0;
    v45 = a1 + 104;
    v11 = a5;
    v43 = a4 + 8;
    v51 = a7;
    while (1)
    {
      v12 = *(_DWORD *)(a1 + 120);
      if ((int)a6 >= v12)
        v13 = *(_DWORD *)(a1 + 120);
      else
        v13 = a6;
      v49 = a6;
      if (v44 && (int)a6 <= v12 && *(_DWORD *)(v8 + 2036))
      {
        v14 = v48;
        if (*(_DWORD *)(v8 + 2040))
          v14 = 1;
        v48 = v14;
      }
      v15 = *(uint64_t **)a4;
      v16 = **(_QWORD **)a4;
      if (*(_WORD *)(v16 + 28 * v11 + 18))
        break;
LABEL_45:
      if (*(_DWORD *)(v8 + 2020))
      {
        if (v13 >= *(_DWORD *)(v8 + 2028) - *(_DWORD *)(a4 + 36))
          v41 = *(_DWORD *)(v8 + 2028) - *(_DWORD *)(a4 + 36);
        else
          v41 = v13;
      }
      else
      {
        v41 = v13;
      }
      if (v48)
      {
        *(_BYTE *)(v8 + 2016) = 1;
        result = rho_synthDecodeToClient(a1, a2, a3, a4, v41, v45);
        if ((_DWORD)result)
          return result;
        *(_BYTE *)(v8 + 2016) = 0;
      }
      else
      {
        result = rho_synthDecodeToClient(a1, a2, a3, a4, v41, v45);
        if ((_DWORD)result)
          return result;
      }
      if (*(_DWORD *)(v8 + 2020))
      {
        *(_DWORD *)(v8 + 2020) = 0;
        if (v13 != v41)
        {
          result = rho_synthDecodeToClient(a1, a2, a3, a4, v13 - v41, v45);
          if ((_DWORD)result)
            return result;
        }
      }
      if (!eta_InOut__IsEndState(v43))
      {
        *(_DWORD *)(a4 + 36) += v13;
        a6 = (v49 - v13);
        if (v49 > v13)
          continue;
      }
      return 0;
    }
    v17 = 0;
    v52 = v13;
    while (1)
    {
      v18 = v15[1];
      v19 = *(unsigned __int16 *)(v16 + 28 * v11 + 16);
      if (v10 == 1)
      {
        v20 = (v17 + v19);
        v21 = *(unsigned __int8 *)(v18 + 16 * v20 + 14);
        v22 = *(_DWORD *)(a4 + 36);
        if (*(_BYTE *)(v18 + 16 * v20 + 14))
        {
          v23 = v22 + v13;
          goto LABEL_22;
        }
      }
      else
      {
        v22 = *(_DWORD *)(a4 + 36);
        v20 = (v17 + v19);
      }
      v23 = v22 + v13;
      if (*(_DWORD *)(v18 + 16 * v20) <= v23)
      {
        v24 = v18 + 16 * v20;
        v21 = *(unsigned __int8 *)(v24 + 14);
        if (*(_BYTE *)(v24 + 14))
        {
          if (v10 == 1)
LABEL_22:
            *(_DWORD *)(v18 + 16 * v20) = v23;
          v25 = *(unsigned __int16 *)(v18 + 16 * v20 + 12);
          if (v21 + v25 > *(_DWORD *)(v8 + 608))
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 32), (uint64_t)"SYNTH", 45000, (uint64_t)"%s%u%s%u%s%u", a5, a6, a7, a8, "index");
            v26 = *(_DWORD *)(v8 + 608);
            if (v26 <= v25)
              LOWORD(v25) = v26 - 1;
            LOWORD(v21) = v26 - v25;
          }
          eta_synth_GetRate(v8, &v53);
          if (*(_DWORD *)(v8 + 2032) == 1)
          {
            *(_DWORD *)(v8 + 2032) = 0;
            v53 = 100;
          }
          v27 = (unsigned __int16)v21;
          if ((_WORD)v21)
          {
            v28 = 32 * (unsigned __int16)v25;
            v29 = (_DWORD *)(*(_QWORD *)(v8 + 600) + v28);
            v30 = (unsigned __int16)v21;
            v31 = v29;
            do
            {
              v33 = *v31;
              v31 += 8;
              v32 = v33;
              if (v33 == 8)
              {
                if (v29[6])
                {
                  *(_DWORD *)(v8 + 2020) = 1;
                  *(_DWORD *)(v8 + 2032) = 1;
                }
              }
              else if (v32 == 18)
              {
                *(_DWORD *)(v8 + 2020) = 1;
              }
              v29 = v31;
              --v30;
            }
            while (v30);
            do
            {
              v34 = *(_DWORD **)(*(_QWORD *)a4 + 8);
              v35 = *(unsigned __int16 *)(**(_QWORD **)a4 + 28 * v11 + 16) + (uint64_t)v17;
              if ((_DWORD)v35)
              {
                v36 = v35;
                v37 = v34[4 * v35 - 2] + 100 * (v34[4 * v35] - v34[4 * v35 - 4]) / v53;
              }
              else
              {
                v36 = 0;
                v37 = 100 * *v34 / v53;
              }
              v34[4 * v36 + 2] = v37;
              v38 = *(_DWORD *)(v8 + 1968);
              v39 = (int *)(*(_QWORD *)(v8 + 600) + v28);
              v39[4] = 0;
              if (*(_DWORD *)(v8 + 2020))
                *(_DWORD *)(v8 + 2028) = v34[4 * v35];
              eta_synth_ProcessThisMarker(v8, v39, v38 + v37);
              v40 = v8 + 32 * *(unsigned __int16 *)(v8 + 432);
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 32) + 104))(*(_QWORD *)(v40 + 56), *(_QWORD *)(v40 + 64), *(_QWORD *)(v8 + 600) + v28, 32);
              v28 += 32;
              --v27;
            }
            while (v27);
          }
          v15 = *(uint64_t **)a4;
          v16 = **(_QWORD **)a4;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 8)
                   + 16 * (v17 + *(unsigned __int16 *)(v16 + 28 * v11 + 16))
                   + 14) = 0;
          *(_WORD *)(v8 + 1956) = v25 + v21;
          *(_WORD *)(v8 + 1958) = v25 + v21;
          v10 = v51;
          v13 = v52;
        }
      }
      if (++v17 >= *(unsigned __int16 *)(v16 + 28 * v11 + 18))
        goto LABEL_45;
    }
  }
  return rho_InOut__AudioWriteToClient__No_Subunits(a1, a2, a3, a4, a6);
}

uint64_t rho_InOut__InsertSilence(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int16 *v20;
  _WORD *v21;
  __int16 v22;
  unsigned __int16 v25;

  v11 = *(_QWORD *)(a2 + 352);
  v25 = 0;
  v12 = *(_DWORD *)(a1 + 100);
  v13 = *(_DWORD *)(a1 + 52);
  if (v12 >= v13)
    v14 = *(_DWORD *)(a1 + 52);
  else
    v14 = *(_DWORD *)(a1 + 100);
  v_zap_s_t(*(void **)(a1 + 40), v14);
  eta_synth_GetRate(v11, &v25);
  if (*(_DWORD *)(v11 + 2032))
    eta_synth_SetRate(v11, 0x64u);
  if (a6 < 1)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = a6;
      if (v13 >= v12)
        LODWORD(v17) = v12;
      else
        LODWORD(v17) = v13;
      if ((int)v17 >= a6)
        v17 = a6;
      else
        v17 = v17;
      v18 = __OFSUB__(a6, v14);
      a6 -= v14;
      if (a6 < 0 != v18)
        v19 = v16;
      else
        v19 = v14;
      if ((a6 < 0) ^ v18 | (a6 == 0))
        *(_BYTE *)(v11 + 2016) = 1;
      if ((int)v19 < 1)
        break;
      v20 = *(__int16 **)(a1 + 40);
      v21 = *(_WORD **)(a1 + 88);
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v17;
      }
      while (v17);
      *(_DWORD *)(a1 + 96) = v19;
      v15 = rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, a4, a5, v19, 0, 0);
      if (*(_BYTE *)(v11 + 2016) == 1)
      {
        *(_WORD *)(v11 + 2044) = 0;
        *(_BYTE *)(v11 + 2016) = 0;
      }
    }
    while (a6 > 0);
  }
  eta_synth_SetRate(v11, v25);
  return v15;
}

uint64_t rho_InOut__ApplyVolume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int16 *v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  unsigned __int16 v11;

  v11 = 0;
  eta_synth_GetVolume(a1, &v11);
  if (v11 != 80)
  {
    v4 = *(unsigned int *)(a3 + 16);
    if ((int)v4 >= 1)
    {
      v5 = aVolPar2Amplif_0[v11];
      v6 = *(__int16 **)(a3 + 8);
      do
      {
        v7 = *v6 * v5;
        v8 = v7 >> 15;
        if (v7 < -1073709056)
          LOWORD(v8) = -32767;
        if (v7 <= 0x3FFFFFFF)
          v9 = v8;
        else
          v9 = 0x7FFF;
        *v6++ = v9;
        --v4;
      }
      while (v4);
    }
  }
  return 0;
}

uint64_t __psi_Lookup__getOffsetAndByteLength(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _BYTE *a6, unsigned int *a7)
{
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t Stream;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25[20];
  int v26;
  int v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 160);
  v14 = 6 * a2;
  v15 = 5 * a2;
  v16 = v13 * a2;
  if (v13 == 4)
    v16 = 4 * a2;
  if (v13 != 5)
    v15 = v16;
  if (v13 != 6)
    v14 = v15;
  Stream = psi_lookup_ReadStream((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v14), v13, &v26, *(_DWORD *)(a1 + 80), (_WORD *)(a1 + 136));
  if (!(_DWORD)Stream)
  {
    Stream = 2164269056;
    v19 = v26;
    *a6 = v27;
    v20 = v28;
    *a5 = v28;
    if (v19)
    {
      v21 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v21 + 44) == 1)
      {
        v22 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v20);
      }
      else
      {
        v25[0] = *(_DWORD *)(a1 + 156);
        psi_mapCodedData(a1, v21, v20 & 0x7FFFFFFF, v25);
        v22 = *(unsigned __int8 **)(a1 + 24);
        if (!v22)
          return Stream;
      }
      Stream = psi_lookup_ReadStream(v22, *(_DWORD *)(a1 + 156), v25, *(_DWORD *)(a1 + 84), (_WORD *)(a1 + 96));
      if (!(_DWORD)Stream)
      {
        *a3 = -1;
        v23 = v25[1];
        *a4 = v25[0];
        *a7 = v23;
        v24 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v24 + 44) == 1)
          return 0;
        else
          return psi_unMapCodedData(a1, v24);
      }
    }
  }
  return Stream;
}

uint64_t __psi_Lookup__getPrevDemiIDAndSmpDur(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _BYTE *a5, _BYTE *a6)
{
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t result;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 160);
  v11 = 6 * a2;
  v12 = 5 * a2;
  v13 = v10 * a2;
  if (v10 == 4)
    v13 = 4 * a2;
  if (v10 != 5)
    v12 = v13;
  if (v10 != 6)
    v11 = v12;
  result = psi_lookup_ReadStream((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v11), v10, &v17, *(_DWORD *)(a1 + 76), (_WORD *)(a1 + 116));
  if (!(_DWORD)result)
  {
    v15 = v18;
    *a5 = v17;
    *a6 = v15;
    v16 = v20;
    *a4 = v19;
    *a3 = v16;
  }
  return result;
}

uint64_t psi_Lookup__getPreviousDemiID(uint64_t a1, int a2, _DWORD *a3, _BYTE *a4, _DWORD *a5, _DWORD *a6, int *a7, _BYTE *a8, unsigned int *a9)
{
  uint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  unsigned __int8 v30;

  v30 = 0;
  v29 = 0;
  __psi_Lookup__getPrevDemiIDAndSmpDur(a1, a2, a3, a5, &v30, a4);
  if (v30)
  {
    __psi_Lookup__getOffsetAndByteLength(a1, a2, a3, a5, &v29, a4, a9);
    result = 0;
    *a6 = *(_DWORD *)(a1 + 156) + v29;
    *a7 = 0;
    *a8 = 1;
  }
  else
  {
    v24 = a6;
    v26 = 0;
    v27 = 0;
    *a8 = 1;
    __psi_Lookup__getPrevDemiIDAndSmpDur(a1, a2, &v27, a5, &v30, &v25);
    v18 = 0;
    v19 = 0;
    v20 = v30;
    while (!v20)
    {
      *a8 = 0;
      v21 = v27;
      __psi_Lookup__getPrevDemiIDAndSmpDur(a1, v27, &v27, a7, &v30, &v28);
      if (v18)
        v22 = v26;
      else
        v22 = 0;
      v20 = v30;
      if (v30)
        __psi_Lookup__getOffsetAndByteLength(a1, v21, &v27, &v26, &v29, &v28, a9);
      else
        v26 = *a7;
      v19 += v22;
      if (--v18 == -10001)
        return 2164269056;
    }
    result = 0;
    v23 = v26;
    if (!v18)
      v23 = 0;
    *v24 = *(_DWORD *)(a1 + 156) + v29;
    *a7 = v23 + v19;
  }
  return result;
}

uint64_t psi_Lookup__InitFromDatFiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int *v25;
  _WORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  int v35;
  _DWORD v36[2];
  int32x2_t v37;
  _DWORD v38[36];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = 2164269056;
  v7 = *(unsigned __int8 **)(a3 + 8);
  if (!v7)
    return 2164269062;
  if (!*(_QWORD *)(a4 + 8))
    return 2164269062;
  *(_OWORD *)(a1 + 76) = xmmword_214F8C320;
  *(_DWORD *)(a1 + 92) = 13;
  result = psi_lookup_ReadStream(v7, 19, v36, 13, bitHeaderAlloca);
  if (!(_DWORD)result)
  {
    v16 = v36[0];
    v17 = v36[1];
    *(_DWORD *)a1 = v36[0];
    *(_DWORD *)(a1 + 4) = v17;
    *(int32x2_t *)(a1 + 156) = vrev64_s32(v37);
    v18 = *(unsigned int *)(a1 + 76);
    if ((int)v18 < 1)
    {
      LODWORD(v18) = 0;
      LODWORD(i) = 4;
    }
    else
    {
      for (i = 0; i != v18; ++i)
        *(_WORD *)(a1 + 116 + 2 * i) = v38[i];
      LODWORD(i) = i + 4;
    }
    *(_WORD *)(a1 + 116 + 2 * (v18 + 2)) = 0;
    *(_WORD *)(a1 + 116 + 2 * (v18 + 1)) = 0;
    *(_WORD *)(a1 + 116 + 2 * v18) = 0;
    v20 = *(_DWORD *)(a1 + 80);
    if (v20 < 1)
    {
      v20 = 0;
    }
    else
    {
      v21 = (_WORD *)(a1 + 136);
      v22 = *(unsigned int *)(a1 + 80);
      i = i;
      do
      {
        v23 = v36[i++];
        *v21++ = v23;
        --v22;
      }
      while (v22);
    }
    *(_WORD *)(a1 + 136 + 2 * (v20 + 2)) = 0;
    *(_WORD *)(a1 + 136 + 2 * (v20 + 1)) = 0;
    *(_WORD *)(a1 + 136 + 2 * v20) = 0;
    v24 = *(_DWORD *)(a1 + 84);
    if (v24 < 1)
    {
      v24 = 0;
    }
    else
    {
      v25 = &v36[i];
      v26 = (_WORD *)(a1 + 96);
      v27 = *(unsigned int *)(a1 + 84);
      do
      {
        v28 = *v25++;
        *v26++ = v28;
        --v27;
      }
      while (v27);
    }
    *(_WORD *)(a1 + 96 + 2 * (v24 + 2)) = 0;
    *(_WORD *)(a1 + 96 + 2 * (v24 + 1)) = 0;
    *(_WORD *)(a1 + 96 + 2 * v24) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8) + 19;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(a2 + 44) == 1)
      *(_DWORD *)(a2 + 40) = 0;
    if (a5)
    {
      v29 = 0;
      if (v17)
      {
        v30 = 0;
        while (1)
        {
          v33 = 0;
          if (__psi_Lookup__getPrevDemiIDAndSmpDur(a1, v30, &v35, &v34, &v33, &v32))
            break;
          if (v33)
            ++v29;
          if (v17 == ++v30)
          {
            v16 = *(_DWORD *)a1;
            goto LABEL_31;
          }
        }
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Fatal Error: Number of counted polyphones don't match. Wrong speechbase? ", v13, v14, v15, v31);
        return 2164269056;
      }
      else
      {
LABEL_31:
        if (v29 == v16)
          return 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Fatal Error: Number of counted polyphones don't match. Wrong speechbase? ", v13, v14, v15, v31);
        return v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t tune_olalen(int a1)
{
  return (a1 + 2) & 0xFFFFFFFC;
}

uint64_t rho_Concat__Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;

  v3 = 2164269066;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a3 + 12) != 22050)
    return 2164269074;
  *(_DWORD *)(a1 + 24) = 44;
  *(_OWORD *)a1 = xmmword_214F8C3D0;
  *(_QWORD *)(a1 + 16) = 0xDC00000004;
  *(_OWORD *)(a3 + 16) = xmmword_214F8C3D0;
  if (!vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 32, 0x294u)
    && !vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 56, *(_DWORD *)(a1 + 12))
    && !vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 80, *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 12)))
  {
    *(_DWORD *)(a1 + 96) = 0;
    if (*(_DWORD *)a3 <= *(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 12);
    else
      v7 = *(_DWORD *)a3;
    if (!vect_s_t__createVect(*(_QWORD **)(a2 + 8), a1 + 104, v7))
    {
      if (rho_Concat__OverlapWindow__Init(a1, *(_DWORD *)(a3 + 12)))
        return 2164269066;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t rho_Concat__Delete(uint64_t a1)
{
  uint64_t result;

  result = vect_s_t__deleteVect(a1 + 32);
  if (!(_DWORD)result)
  {
    result = vect_s_t__deleteVect(a1 + 56);
    if (!(_DWORD)result)
    {
      result = vect_s_t__deleteVect(a1 + 80);
      if (!(_DWORD)result)
      {
        result = vect_s_t__deleteVect(a1 + 104);
        if (!(_DWORD)result)
          return rho_Concat__OverlapWindow__Denit(a1);
      }
    }
  }
  return result;
}

uint64_t rho__updatepointers(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

_DWORD *rho__updateSubunits(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t **a4, int a5, int a6, int a7)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;

  v7 = *a4;
  v8 = **a4;
  v9 = *(unsigned __int16 *)(v8 + 28 * a5 + 18);
  if (*(_WORD *)(v8 + 28 * a5 + 18))
  {
    if (a6 < 1)
    {
      if (a6 < 0)
      {
        v13 = 0;
        v14 = 0;
        v15 = (int *)(v7[1] + 16 * *(unsigned __int16 *)(v8 + 28 * a5 + 16));
        do
        {
          if (v13 * 4)
          {
            v16 = v15[v13] + a6;
            if (v16 <= v14)
              v16 = v14;
          }
          else
          {
            v16 = *v15;
            v14 = *v15;
          }
          v15[v13] = v16;
          v13 += 4;
        }
        while (4 * v9 != v13);
      }
    }
    else
    {
      v10 = 0;
      v11 = (int *)(v7[1] + 16 * *(unsigned __int16 *)(v8 + 28 * a5 + 16));
      do
      {
        if (v10 * 4)
          v12 = v11[v10] + a6;
        else
          v12 = *v11;
        v11[v10] = v12;
        v10 += 4;
      }
      while (4 * v9 != v10);
    }
    v17 = 0;
    v18 = v8 + 28 * a5;
    v19 = *(_DWORD *)(v18 + 4);
    v20 = (unsigned __int16 *)(v18 + 16);
    if (v9 <= 1)
      v21 = 1;
    else
      v21 = v9;
    do
    {
      if (v19 >= 1)
      {
        v22 = (int *)(v7[1] + 16 * (v17 + *v20));
        if (*v22 > v19)
          *v22 = v19;
      }
      if (a7 == 1 && (_DWORD)v9 - 1 == (_DWORD)v17)
      {
        v23 = *v20;
        v24 = (v9 + v23 - 1);
        v25 = v7[1];
        if (*(_DWORD *)(v25 + 16 * v24 + 4) < result[1])
          *(_DWORD *)(v25 + 16 * v24) = (*(_DWORD *)(v25 + 16 * v24) - *result) & ~((*(_DWORD *)(v25 + 16 * v24)
                                                                                   - *result) >> 31);
        *(_DWORD *)(v25 + 16 * (v9 - 1 + v23)) += *((_DWORD *)a4 + 9);
        v26 = (_DWORD *)(v25 + 16 * v24);
        v27 = *(_DWORD *)(v25 + 16 * ((int)v9 + v23 - 2));
        if (*v26 < v27)
          *v26 = v27 + 1;
      }
      else
      {
        *(_DWORD *)(v7[1] + 16 * (v17 + *v20)) += *((_DWORD *)a4 + 9);
      }
      ++v17;
    }
    while (v21 != (_DWORD)v17);
  }
  return result;
}

uint64_t rho_Concat__match(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5, int a6)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v12 = 2164269056;
  v13 = a3[20] - a3[19];
  v14 = a1[3];
  v15 = (uint64_t)(a1 + 14);
  if (v13 >= v14)
  {
    a1[18] = v14;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v14, (uint64_t)(a1 + 14)))
      return v12;
  }
  else
  {
    a1[18] = v13;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v13, (uint64_t)(a1 + 14)))
      return v12;
    v_zap_s_t((void *)(*((_QWORD *)a1 + 8) + 2 * (int)a1[18]), a1[3] - a1[18]);
  }
  v16 = rho_Concat__findbestmatch_fixed(a1, (uint64_t)(a1 + 8), v15);
  v17 = *a1 + v16;
  a3[21] = v17;
  a3[18] -= v17;
  rho_Concat__WindowsOverlap_wsola((uint64_t)a1, (uint64_t)(a1 + 8), v15, 0, v16);
  rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), 0, *a1);
  if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, (a5 - 1), *a1, 1, 0))
  {
    if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      rho__updateSubunits(a1, v18, v19, a4, a5, a3[18], a6);
      rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), *a1, *a1);
      if (rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, *a1, 0, 0))
        return v12;
      if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
      {
        rho_InOut__PutVectorInBuffer((uint64_t)a1, v15, a1[1] + v16, a1[18] - (a1[1] + v16));
        v12 = 0;
        a3[19] = *a1 + a3[21];
        return v12;
      }
    }
    return 0;
  }
  return v12;
}

uint64_t rho_Concat__plosive(uint64_t a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v10 = 2164269056;
  v11 = a1 + 56;
  v_zap_s_t(*(void **)(a1 + 64), *(_DWORD *)(a1 + 72));
  v12 = *(_DWORD *)(a1 + 24);
  if (a3[20] - a3[19] >= v12)
  {
    *(_DWORD *)(a1 + 72) = v12;
    if (rho_InOut__DecodeToVector(a1, a2, a3, v12, v11))
      return v10;
  }
  else
  {
    if (rho_InOut__DecodeToVector(a1, a2, a3, a3[20] - a3[19], v11))
      return v10;
    *(_DWORD *)(a1 + 72) = a3[20] - a3[19];
  }
  rho_Concat__fade_out_closure(a1, a1 + 32, 0, *(_DWORD *)(a1 + 20));
  a3[21] = 0;
  rho_InOut__PutVectorInBuffer(a1, a1 + 32, 0, *(unsigned int *)(a1 + 48));
  if (!rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, (uint64_t)a4, (a5 - 1), *(unsigned int *)(a1 + 48), 1, 0))
  {
    if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      rho_Concat__fade_in_burst(a1, v11, 0, *(_DWORD *)(a1 + 72));
      rho__updateSubunits((_DWORD *)a1, v13, v14, a4, a5, a3[18], 0);
      rho_InOut__PutVectorInBuffer(a1, v11, 0, *(unsigned int *)(a1 + 72));
      if (rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, (uint64_t)a4, a5, *(unsigned int *)(a1 + 72), 0, 0))return v10;
      if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
      {
        v10 = 0;
        a3[19] = *(_DWORD *)(a1 + 24) + a3[21];
        return v10;
      }
    }
    return 0;
  }
  return v10;
}

uint64_t rho_Concat__silence(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t inserted;

  v10 = 2164269056;
  v11 = (uint64_t)(a1 + 14);
  v_zap_s_t(*((void **)a1 + 8), *a1);
  v12 = *a1;
  if (a3[20] - a3[19] >= (int)*a1)
  {
    a1[18] = v12;
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, v12, v11))
      return v10;
  }
  else
  {
    if (rho_InOut__DecodeToVector((uint64_t)a1, a2, a3, a3[20] - a3[19], v11))
      return v10;
    a1[18] = a3[20] - a3[19];
  }
  v_zap_s_t(*((void **)a1 + 5), *a1);
  v13 = *a1;
  a3[21] = (int)v13 >> 1;
  a3[18] -= (int)v13 >> 1;
  rho_InOut__PutVectorInBuffer((uint64_t)a1, (uint64_t)(a1 + 8), 0, v13);
  if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, (a5 - 1), *a1, 1, 0))
  {
    if (eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    {
      return 0;
    }
    else
    {
      v16 = *(_DWORD *)(**a4 + 28 * (int)a5 + 8);
      rho__updateSubunits(a1, v14, v15, a4, a5, a3[18] + v16, 0);
      inserted = rho_InOut__InsertSilence((uint64_t)a1, a2, a3, (uint64_t)a4, a5, v16);
      v_zap_s_t(*((void **)a1 + 8), *a1);
      rho_InOut__PutVectorInBuffer((uint64_t)a1, v11, 0, *a1);
      if (!rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, *a1, 0, 0))
      {
        if (!eta_InOut__IsEndState((uint64_t)(a4 + 1)))
        {
          rho_InOut__PutVectorInBuffer((uint64_t)a1, v11, *a1, a1[18] - *a1);
          a3[19] = a3[21] + ((int)*a1 >> 1);
        }
        return inserted;
      }
    }
  }
  return v10;
}

uint64_t rho_Concat__first(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t **a4, int a5)
{
  rho__updateSubunits(a1, a2, a3, a4, a5, 0, 0);
  return 0;
}

uint64_t rho_Concat__last(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = (a3[22] - a3[19]);
  rho_InOut__PutVectorInBuffer(a1, a1 + 32, 0, v10);
  if (rho_InOut__AudioWriteToClientWithMarkers(a1, a2, a3, a4, a5, v10, 0, 0))
    return 2164269056;
  eta_InOut__IsEndState(a4 + 8);
  return 0;
}

uint64_t rho_Concat__middle(int *a1, uint64_t a2, int *a3, _QWORD **a4, uint64_t a5)
{
  unsigned int v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;

  v6 = *(unsigned __int8 *)(**a4 + 28 * (int)a5 + 24);
  if (v6 > 0xF)
  {
    v11 = a3[22];
    if ((v6 & 0x40) != 0)
      v12 = a1[5];
    else
      v12 = *a1;
    v7 = a3 + 19;
    v13 = v12 + a3[19];
    v10 = (v11 - v13);
    if (v11 - v13 < 0)
      return 0;
  }
  else
  {
    v7 = a3 + 19;
    v8 = a3[22];
    v9 = *a1 + a3[19];
    v10 = (v8 - v9);
    if (v8 - v9 < 0)
      return 0;
  }
  if (rho_InOut__AudioWriteToClientWithMarkers((uint64_t)a1, a2, a3, (uint64_t)a4, a5, v10, 0, 1))
    return 2164269056;
  if (eta_InOut__IsEndState((uint64_t)(a4 + 1)))
    return 0;
  result = 0;
  *v7 += v10;
  return result;
}

uint64_t rho_Concat__tail(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  int v8;

  v6 = a3[20] - a3[19];
  v_zap_s_t(*(void **)(a1 + 40), *(_DWORD *)(a1 + 12));
  if (v6 < 1)
    return 0;
  v7 = 2164269056;
  v8 = *(_DWORD *)(a1 + 12);
  if (v6 < v8)
    v8 = v6;
  if (!rho_InOut__DecodeToVector(a1, a2, a3, v8, a1 + 32))
    return 0;
  return v7;
}

uint64_t rho_concatenate(unsigned int *a1, uint64_t a2, int *a3, uint64_t **a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;

  v11 = *((unsigned __int16 *)*a4 + 10);
  v12 = **a4;
  v13 = v12 + 28 * v11;
  v14 = (unsigned int *)(v13 + 12);
  v15 = (int *)(v13 + 20);
  inited = psi_DataMapSegment__InitPoly(a5, (_DWORD *)(v13 + 12), (unsigned int *)(v13 + 20));
  if (!(_DWORD)inited)
  {
    inited = xi_Segment__InitPoly_withDur((uint64_t)a3, v12 + 28 * v11, *v14, *v15, *(_QWORD *)(a5 + 24), *(unsigned __int8 *)(*(_QWORD *)(a5 + 40) + 44));
    if (!(_DWORD)inited)
    {
      inited = chi_DecodePolyphone__InitPoly(a2);
      if (!(_DWORD)inited)
      {
        *(_DWORD *)(a2 + 272) = *(_DWORD *)(**a4 + 28 * v11 + 20);
        if ((_DWORD)v11)
        {
          if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 0xF) != 0)
          {
            if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 3) != 0)
            {
              rho_Concat__match(a1, a2, a3, a4, v11, a6);
            }
            else if ((*(_BYTE *)(v12 + 28 * v11 + 24) & 4) != 0)
            {
              rho_Concat__plosive((uint64_t)a1, a2, a3, a4, v11);
            }
          }
          else
          {
            rho_Concat__silence(a1, a2, a3, a4, v11);
          }
        }
        else
        {
          rho__updateSubunits(a1, v17, v18, a4, 0, 0, 0);
        }
        if (*(unsigned __int8 *)(v12 + 28 * v11 + 24) >= 0x10u)
        {
          rho_Concat__middle((int *)a1, a2, a3, a4, v11);
          rho_Concat__tail((uint64_t)a1, a2, a3);
        }
        if ((*(_BYTE *)(v12 + 28 * v11 + 25) & 2) != 0)
          inited = rho_InOut__InsertSilence((uint64_t)a1, a2, a3, (uint64_t)a4, v11, *(_DWORD *)(*(_QWORD *)(a2 + 352) + 644));
        else
          inited = 0;
        chi_DecodePolyphone__DeinitPoly((_QWORD *)a2);
        psi_DataMapSegment__DeinitPoly(a5);
        xi_Segment__DeinitPoly(a3);
        ++*((_WORD *)*a4 + 10);
      }
    }
  }
  return inited;
}

uint64_t eta_synth_SetWaitPeriod(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v4;
  int v5;

  if (a2 > 9)
    return 2164269071;
  result = 0;
  *(_WORD *)(a1 + 640) = a2;
  v4 = *(_DWORD *)(a1 + 1988) * a2;
  if ((v4 + 6) < 9)
    v5 = 1;
  else
    v5 = (v4 + 2) / 5;
  *(_DWORD *)(a1 + 644) = v5;
  return result;
}

uint64_t eta_synth_GetWaitPeriod(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 640);
  return 0;
}

uint64_t eta_synth_SetVolume(uint64_t a1, unsigned int a2)
{
  __int16 v2;

  if (a2 >= 0x64)
    v2 = 100;
  else
    v2 = a2;
  *(_WORD *)(a1 + 648) = v2;
  return 0;
}

uint64_t eta_synth_GetVolume(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 648);
  return 0;
}

uint64_t eta_synth_SetRate(uint64_t a1, unsigned int a2)
{
  __int16 v2;

  if (a2 >= 0x190)
    v2 = 400;
  else
    v2 = a2;
  *(_WORD *)(a1 + 652) = *(_WORD *)(a1 + 650);
  *(_WORD *)(a1 + 650) = v2;
  return 0;
}

uint64_t eta_synth_ResetRate(uint64_t a1, unsigned int a2)
{
  __int16 v2;

  if (a2 >= 0x190)
    v2 = 400;
  else
    v2 = a2;
  *(_WORD *)(a1 + 652) = v2;
  *(_WORD *)(a1 + 650) = v2;
  return 0;
}

uint64_t eta_synth_GetRate(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 650);
  return 0;
}

uint64_t eta_synth_GetPrevRate(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 652);
  return 0;
}

uint64_t eta_synth_ResetParams(uint64_t a1)
{
  uint64_t result;

  result = paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", 2u);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", 0x50u);
    if ((result & 0x80000000) == 0)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
  }
  return result;
}

uint64_t eta_synth_ProcessThisMarker(uint64_t a1, int *a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *__s;

  v5 = 0;
  a2[3] = a3;
  v6 = *a2;
  if (*a2 <= 23)
  {
    if (v6 == 13)
      return eta_synth_ResetParams(a1);
    if (v6 == 18)
      return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", a2[6]);
    return v5;
  }
  if (v6 != 24)
  {
    if (v6 == 25)
    {
      __s = 0;
      paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", &__s);
      v5 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", a2[6]);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 + 40);
      v10 = __s;
      if ((v5 & 0x80000000) != 0)
      {
        v12 = cstdlib_strlen(__s);
        paramc_ParamRipple(v9, (uint64_t)"waitfactor", v10, (v12 + 1));
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 40);
      }
      paramc_ParamRelease(v11);
    }
    return v5;
  }
  return paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"volume", a2[6]);
}

uint64_t eta_PrepareNewBuffers(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;

  if (!a1)
    return 2164269062;
  *(_DWORD *)(a1 + 1944) = 0;
  v6 = 0;
  if (((**(uint64_t (***)(_QWORD, _QWORD, _QWORD, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), 0, a1 + 2064, &v6) & 0x80000000) == 0&& *(_DWORD *)(a1 + 2064))
  {
    *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a1 + 2056);
    *(_DWORD *)(a1 + 1944) = 1024;
  }
  v5 = 0;
  v2 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
  result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), &v5);
  *(_DWORD *)(a1 + 1968) = v5 >> 1;
  if ((result & 0x80000000) != 0 || !*(_DWORD *)(a1 + 1944))
  {
    v4 = 2;
  }
  else if (*(_QWORD *)(a1 + 1936))
  {
    v4 = 1;
  }
  else
  {
    v4 = 2;
  }
  *(_DWORD *)(a1 + 1952) = v4;
  return result;
}

uint64_t eta_PushSamplesOut(uint64_t a1, int a2, __int16 **a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  __int16 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int16 *v23;
  __int16 v24;
  uint64_t v25;
  _BOOL4 v26;
  int v28;
  int v29;

  v28 = 1024;
  v4 = 2164269062;
  if (a1 && a3 && a4)
  {
    v9 = 0;
    v29 = 0;
    v10 = *(_DWORD *)(a1 + 2064);
    v11 = *(_DWORD *)(a1 + 2068);
    v12 = *a4 + v11;
    v13 = v10 >= v11;
    v14 = v10 - v11;
    if (v14 != 0 && v13)
    {
      if (v10 <= v12)
        v9 = v14;
      else
        v9 = *a4;
      v15 = (__int16 *)(a1 + 650);
      v16 = *(_DWORD *)(a1 + 2020);
      v17 = *(_QWORD *)(a1 + 2008);
      v18 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
      v20 = *(_QWORD *)(v18 + 56);
      v19 = *(_QWORD *)(v18 + 64);
      if (v16)
        v15 = (__int16 *)(a1 + 652);
      WSOLA__rateChange_bet4_approach(v17, *(_BYTE *)(a1 + 2016), *v15, *a3, v9, *(_WORD **)(a1 + 2048), &v28, *(_QWORD *)(a1 + 32), v20, v19);
      *(_DWORD *)(a1 + 2068) += v28;
    }
    if (v10 <= v12)
    {
      if (a2 == 3)
        v21 = 1;
      else
        v21 = 2 * (*a4 != 0);
      v4 = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v21, a1 + 2064, &v29);
      if ((v4 & 0x80000000) != 0)
        goto LABEL_27;
      *(_DWORD *)(a1 + 2068) = 0;
      v22 = *a4 - v9;
      if (*a4 > v9)
      {
        v23 = (__int16 *)(a1 + 650);
        if (*(_DWORD *)(a1 + 2020))
          v23 = (__int16 *)(a1 + 652);
        v24 = *v23;
        v28 = 1024;
        v25 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        WSOLA__rateChange_bet4_approach(*(_QWORD *)(a1 + 2008), *(_BYTE *)(a1 + 2016), v24, &(*a3)[v9], v22, *(_WORD **)(a1 + 2048), &v28, *(_QWORD *)(a1 + 32), *(_QWORD *)(v25 + 56), *(_QWORD *)(v25 + 64));
        *(_DWORD *)(a1 + 2068) = v28;
      }
    }
    else
    {
      v4 = 0;
    }
    if (a2 == 3)
    {
      v26 = *a4 == 0;
    }
    else
    {
      v26 = 0;
      *a3 = *(__int16 **)(a1 + 2056);
      *a4 = 1024;
    }
    if (a2 == 1 || v26)
    {
LABEL_27:
      *a3 = 0;
      *a4 = 0;
      *(_DWORD *)(a1 + 1952) = 2;
    }
  }
  return v4;
}

uint64_t eta_synth_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Str;
  const char *v6;
  uint64_t Int;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  unsigned int v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *__s2[2];
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  int v28;
  char *v29;
  char __dst[256];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = 2164269056;
  v27 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  v4 = *(_QWORD *)(a1 + 16);
  __s2[0] = 0;
  v29 = 0;
  v28 = 0;
  cstdlib_strcpy(__dst, "synth/");
  Str = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"voice", __s2);
  if ((Str & 0x80000000) != 0)
    return Str;
  cstdlib_strcat(__dst, __s2[0]);
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  cstdlib_strcat(__dst, "/");
  Str = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"reduction", __s2);
  if ((Str & 0x80000000) != 0)
    return Str;
  if (cstdlib_strstr(__s2[0], "dev") || cstdlib_strstr(__s2[0], "DEV"))
    v6 = "dev";
  else
    v6 = __s2[0];
  cstdlib_strcat(__dst, v6);
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  cstdlib_strcat(__dst, "/");
  Int = paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"coder", __s2);
  if ((Int & 0x80000000) != 0)
    return Int;
  cstdlib_strcat(__dst, __s2[0]);
  paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  if ((paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"bitrate", __s2) & 0x80000000) != 0
    || !*__s2[0]
    || (paramc_ParamGetStr(*(_QWORD *)(v4 + 40), (uint64_t)"overheadframes", &v29) & 0x80000000) != 0
    || !*v29)
  {
    v8 = &__dst[cstdlib_strlen(__dst)];
    while (v8 > __dst)
    {
      v10 = *--v8;
      v9 = v10;
      if ((v10 - 48) >= 0xA)
      {
        if (v9 == 102)
        {
          v11 = cstdlib_strlen(v8);
          cstdlib_memmove(v8 + 1, v8, v11 + 1);
          *v8 = 47;
          goto LABEL_21;
        }
        break;
      }
    }
    cstdlib_strcat(__dst, "/");
    Int = paramc_ParamGetInt(*(_QWORD *)(v4 + 40), (uint64_t)"frequencyhz", &v28);
    if ((Int & 0x80000000) != 0)
      return Int;
    v12 = v28 / 1000;
    v13 = cstdlib_strlen(__dst);
    LH_itoa(v12, &__dst[v13], 0xAu);
  }
  else
  {
    cstdlib_strcat(__dst, "/");
    cstdlib_strcat(__dst, __s2[0]);
    paramc_ParamRelease(*(_QWORD *)(v4 + 40));
    cstdlib_strcat(__dst, "/");
    cstdlib_strcat(__dst, v29);
    paramc_ParamRelease(*(_QWORD *)(v4 + 40));
  }
LABEL_21:
  if (cstdlib_strlen(__dst))
  {
    v14 = 0;
    v15 = 1;
    do
    {
      __dst[v14] = cstdlib_tolower(__dst[v14]);
      v14 = v15;
    }
    while (cstdlib_strlen(__dst) > v15++);
  }
  if ((Int & 0x80000000) != 0 || !LH_stricmp(__dst, (char *)(a1 + 656)))
    return Int;
  Str = eta_synth_loc_ObjClose(a1, 1);
  if ((Str & 0x80000000) != 0)
    return Str;
  cstdlib_strcpy((char *)(a1 + 656), __dst);
  Str = paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"frequencyhz", (_DWORD *)(a1 + 1988));
  if ((Str & 0x80000000) != 0)
    return Str;
  v17 = *(unsigned __int16 *)(a1 + 640);
  if (v17 <= 9)
  {
    v18 = *(_DWORD *)(a1 + 1988) * v17;
    if ((v18 + 6) < 9)
      v19 = 1;
    else
      v19 = (v18 + 2) / 5;
    *(_DWORD *)(a1 + 644) = v19;
  }
  v25 = 0;
  v26 = 0;
  *(_OWORD *)__s2 = xmmword_214F8C3F0;
  if (!psi_VFDat__loadData(a1 + 1064, *(_WORD **)a1, *(_QWORD *)(a1 + 8), (const char *)(a1 + 656), a1 + 920, 0, a1 + 968, 0, a1 + 1016, 1))
  {
    v20 = WSOLA__Create(*(_QWORD *)(a1 + 16), 22050);
    *(_QWORD *)(a1 + 2008) = v20;
    if (v20
      && (WSOLA__Initialise(v20),
          WSOLA__SetTimeScaleFactor(*(_WORD **)(a1 + 2008), 100),
          v21 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 2008) + 328), 2048),
          (*(_QWORD *)(a1 + 2048) = v21) != 0))
    {
      if (!psi_Synthesis__Init(a1, a1 + 920, a1 + 968, a1 + 1016, (uint64_t)__s2))
      {
        if ((psi_Lookup_AvgSpeed(a1 + 1064, &v27) & 0x80000000) != 0)
        {
          v22 = 200;
          v27 = 200;
        }
        else
        {
          v22 = v27;
        }
        Str = paramc_ParamSetUInt(*(_QWORD *)(v4 + 40), (uint64_t)"wordspermin", v22);
        if ((Str & 0x80000000) == 0)
          return vu__fillUnitAndSubUnit__Init((uint64_t *)(a1 + 1928), *(_QWORD *)(a1 + 16));
        return Str;
      }
    }
    else
    {
      return 2164269066;
    }
  }
  return v3;
}

uint64_t eta_synth_loc_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  __int128 v28;
  uint64_t v29;

  v2 = 2164269056;
  if (a1 && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    v5 = *(_QWORD *)(a1 + 2008);
    if (v5)
    {
      heap_Free(*(_QWORD **)(v5 + 328), *(_QWORD *)(a1 + 2048));
      WSOLA__Remove((uint64_t *)(a1 + 2008));
      *(_QWORD *)(a1 + 2008) = 0;
    }
    *(_BYTE *)(a1 + 656) = 0;
    v6 = psi_Synthesis__Denit(a1, a1 + 920, a1 + 968, a1 + 1016);
    if (v6)
      v7 = 2164269056;
    else
      v7 = 0;
    if (a2)
    {
      return v7;
    }
    else
    {
      v8 = v6;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v10 = (__int128 *)(a1 + 616);
      v28 = *(_OWORD *)(a1 + 616);
      v29 = *(_QWORD *)(a1 + 632);
      v11 = paramc_ListenerRemove(v9, "waitfactor", &v28);
      if (v8)
        LODWORD(v2) = -2130698240;
      else
        LODWORD(v2) = v11 & (v11 >> 31);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v13 = paramc_ListenerRemove(v12, "pitch", &v28);
      if (v13 < 0 && (int)v2 > -1)
        LODWORD(v2) = v13;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v16 = paramc_ListenerRemove(v15, "volume", &v28);
      if (v16 < 0 && (int)v2 > -1)
        LODWORD(v2) = v16;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
      v28 = *v10;
      v29 = *(_QWORD *)(a1 + 632);
      v19 = paramc_ListenerRemove(v18, "rate", &v28);
      if (v19 >= 0 || (int)v2 <= -1)
        v2 = v2;
      else
        v2 = v19;
      v21 = *(_BYTE **)(a1 + 912);
      if (v21)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
        v28 = *v10;
        v29 = *(_QWORD *)(a1 + 632);
        v23 = paramc_ListenerRemove(v22, v21, &v28);
        if (v23 >= 0 || (int)v2 <= -1)
          v2 = v2;
        else
          v2 = v23;
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 912));
        *(_QWORD *)(a1 + 912) = 0;
      }
      if (*(_QWORD *)(a1 + 440))
        objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHOUTPUTSINK");
      if (*(_QWORD *)(a1 + 32))
        objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
      vu__fillUnitAndSubUnit__Denit((uint64_t *)(a1 + 1928), *(_QWORD *)(a1 + 16));
      v25 = *(_QWORD *)(a1 + 2056);
      if (v25)
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v25);
      v26 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
      if (v26)
        heap_Free(v26, a1);
    }
  }
  return v2;
}

uint64_t Convert2SamplesX_(uint64_t a1, int a2)
{
  if (a2 < 1)
    return 0;
  else
    return fxd_S32ShMultRndS32S32(a2, 107374182, 31) + 22 * a2;
}

uint64_t eta_synth_doWsolaSynthesis(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  int v12;

  v2 = eta_Synth_Reset(a1);
  if ((v2 & 0x80000000) != 0)
    return v2;
  eta_Synth_LinkMsgLayers(a1);
  v4 = v3;
  if ((v3 & 0x80000000) == 0)
  {
    if (!vu__fillUnitAndSubUnit__Begin(*(_QWORD *)(a1 + 1928), *(_QWORD *)(a1 + 16), a1 + 1064, a1 + 464))
    {
      psi_Synthesis__FeedAllUnits(a1, *(_QWORD *)(a1 + 1928));
      xi_Segment__Init(a1 + 1752, *(_QWORD *)(a1 + 16), a1 + 1976);
      LODWORD(v4) = eta_PrepareNewBuffers(a1);
      if ((v4 & 0x80000000) == 0 && !eta_InOut__IsEndState(a1 + 1936) && *(_DWORD *)(a1 + 1944))
      {
        v8 = 0;
        *(_DWORD *)(a1 + 1964) = 0;
        v9 = *(_QWORD *)(a1 + 1928);
        v10 = *(unsigned __int16 *)(v9 + 16);
        *(_QWORD *)(a1 + 2036) = 0;
        v11 = *(_BYTE **)(a1 + 512);
        if (*v11 != 35)
        {
          ++*(_WORD *)(v9 + 20);
          v8 = 1;
        }
        if (v11[*(int *)(a1 + 520) - 1] != 35)
        {
          --v10;
          *(_DWORD *)(a1 + 2036) = 1;
        }
        v12 = v10 - v8;
        if (v10 > v8)
        {
          do
          {
            if (v12 == 1)
              *(_DWORD *)(a1 + 2040) = 1;
            psi_Synthesis__ProcessOnePolyphone(a1, --v12 == 0);
          }
          while (v12);
          v9 = *(_QWORD *)(a1 + 1928);
        }
        vu__fillUnitAndSubUnit__End(v9, *(_QWORD *)(a1 + 16));
      }
    }
    v5 = eta_Synth_UnlinkMsgLayers((_QWORD *)a1);
    if (v5)
      v6 = (_DWORD)v4 == 0;
    else
      v6 = 0;
    if (v6)
      return v5;
    else
      return v4;
  }
  return v4;
}

uint64_t synth_bet1b_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ISynth_bet1b;
  return result;
}

uint64_t eta_synth_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2164269063;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 83214;
  }
  return result;
}

uint64_t eta_synth_ClassClose()
{
  return 0;
}

uint64_t eta_synth_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Object;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v5 = 2164269066;
  if (!a5)
    return 2164269063;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v30);
  if ((inited & 0x80000000) != 0)
    return inited;
  if ((safeh_HandleCheck(a1, a2, 83214, 408) & 0x80000000) != 0)
    return 2164269064;
  v12 = heap_Calloc(*(_QWORD **)(v30 + 8), 1, 2072);
  if (v12)
  {
    v13 = v12;
    *(_WORD *)(v12 + 296) = 0;
    *(_DWORD *)(v12 + 432) = 0;
    *(_WORD *)(v12 + 640) = 0;
    *(_QWORD *)(v12 + 644) = 0;
    *(_QWORD *)v12 = a3;
    *(_QWORD *)(v12 + 8) = a4;
    v14 = v30;
    *(_QWORD *)(v12 + 16) = v30;
    *(_QWORD *)(v12 + 24) = a1;
    *(_WORD *)(v12 + 2044) = 257;
    Object = objc_GetObject(*(_QWORD *)(v14 + 48), (uint64_t)"SYNTHSTREAM", &v29);
    if ((Object & 0x80000000) != 0)
      goto LABEL_30;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v29 + 8);
    Object = objc_GetObject(*(_QWORD *)(v30 + 48), (uint64_t)"SYNTHOUTPUTSINK", &v29);
    if ((Object & 0x80000000) != 0)
      goto LABEL_30;
    v16 = v29;
    *(_QWORD *)(v13 + 440) = *(_QWORD *)(v29 + 8);
    *(_OWORD *)(v13 + 448) = *(_OWORD *)(v16 + 16);
    v17 = heap_Alloc(*(_QWORD *)(v30 + 8), 2048);
    *(_QWORD *)(v13 + 2056) = v17;
    if (!v17)
    {
LABEL_31:
      eta_synth_loc_ObjClose(v13, 0);
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    *(_QWORD *)(v13 + 616) = v13;
    *(_QWORD *)(v13 + 624) = eta_synth_CheckChange;
    *(_QWORD *)(v13 + 632) = eta_synth_LearnChange;
    LODWORD(v26) = 0;
    if ((paramc_ParamGetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", &v26) & 0x80000000) != 0)
    {
      *(_WORD *)(v13 + 640) = 2;
      paramc_ParamSetInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"waitfactor", 2u);
    }
    else
    {
      *(_WORD *)(v13 + 640) = v26;
    }
    LODWORD(v26) = 0;
    v28 = 0;
    if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"volume", (unsigned int *)&v26) & 0x80000000) != 0)
    {
      *(_WORD *)(v13 + 648) = 80;
      Object = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"volume", 0x50u);
      if ((Object & 0x80000000) != 0)
        goto LABEL_30;
    }
    else
    {
      v18 = v26;
      if ((unsigned __int16)v26 >= 0x64u)
        v18 = 100;
      *(_WORD *)(v13 + 648) = v18;
    }
    if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"rate", &v28) & 0x80000000) == 0)
    {
      v19 = v28;
      if ((unsigned __int16)v28 >= 0x190u)
        v19 = 400;
      *(_WORD *)(v13 + 652) = v19;
      *(_WORD *)(v13 + 650) = v19;
LABEL_23:
      v20 = (__int128 *)(v13 + 616);
      v21 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
      v26 = *(_OWORD *)(v13 + 616);
      v27 = *(_QWORD *)(v13 + 632);
      Object = paramc_ListenerAdd(v21, "waitfactor", &v26);
      if ((Object & 0x80000000) == 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
        v26 = *v20;
        v27 = *(_QWORD *)(v13 + 632);
        Object = paramc_ListenerAdd(v22, "pitch", &v26);
        if ((Object & 0x80000000) == 0)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
          v26 = *v20;
          v27 = *(_QWORD *)(v13 + 632);
          Object = paramc_ListenerAdd(v23, "volume", &v26);
          if ((Object & 0x80000000) == 0)
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 40);
            v26 = *v20;
            v27 = *(_QWORD *)(v13 + 632);
            Object = paramc_ListenerAdd(v24, "rate", &v26);
            if ((Object & 0x80000000) == 0)
            {
              Object = eta_synth_InterceptUnsupportedAddonLoading(v13);
              if ((Object & 0x80000000) == 0)
              {
                *(_QWORD *)a5 = v13;
                *(_DWORD *)(a5 + 8) = 83213;
                return eta_synth_ObjReopen(v13, *(_QWORD *)(a5 + 8));
              }
            }
          }
        }
      }
      goto LABEL_30;
    }
    *(_DWORD *)(v13 + 650) = 6553700;
    Object = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 40), (uint64_t)"rate", 0x64u);
    if ((Object & 0x80000000) == 0)
      goto LABEL_23;
LABEL_30:
    v5 = Object;
    goto LABEL_31;
  }
  return v5;
}

uint64_t eta_synth_ObjClose(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  else
    return eta_synth_loc_ObjClose(a1, 0);
}

uint64_t eta_synth_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v29;
  char __dst[64];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = 2164269065;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  v29 = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 2068) = 0;
  WSOLA__Initialise(*(_QWORD *)(a1 + 2008));
  *(_DWORD *)(a1 + 650) = 6553700;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", &v29) & 0x80000000) != 0)
  {
    v10 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"rate", 0x64u);
    if ((v10 & 0x80000000) != 0)
      return v10;
  }
  else
  {
    v8 = v29;
    if ((unsigned __int16)v29 >= 0x190u)
      v8 = 400;
    *(_WORD *)(a1 + 652) = v8;
    *(_WORD *)(a1 + 650) = v8;
  }
  *(_BYTE *)(a1 + 2016) = 0;
  *(_WORD *)(a1 + 2044) = 0;
  v11 = "text/x-realspeak-usphonemes;charset=tts";
  v12 = 1u;
  do
  {
    v13 = *(unsigned __int16 *)(a1 + 296);
    if (v13 > 7)
      goto LABEL_26;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, v11, 0, 0, a1 + 32 * v13 + 56);
    if ((v14 & 0x80000000) != 0)
      goto LABEL_18;
    v15 = *(unsigned __int16 *)(a1 + 296);
    v16 = a1 + 32 * v15;
    *(_DWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = v11;
    *(_WORD *)(a1 + 296) = v15 + 1;
    v11 = eta_synth_ProcessStart_szINPUT_STREAMS[v12++];
  }
  while (v12 != 6);
  v13 = *(unsigned __int16 *)(a1 + 296);
  if (v13 > 7)
    goto LABEL_26;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
          0,
          0,
          a1 + 32 * v13 + 56);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_18:
    v9 = v14;
  }
  else
  {
    v17 = *(unsigned __int16 *)(a1 + 296);
    v18 = a1 + 40 + 32 * v17;
    *(_DWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = "application/x-realspeak-markers-pp;version=4.0";
    LOWORD(v17) = v17 + 1;
    *(_WORD *)(a1 + 296) = v17;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
           0,
           1,
           a1 + 40 + 32 * (unsigned __int16)v17 + 16);
    if ((v9 & 0x80000000) == 0)
    {
      v19 = a1 + 32 * *(unsigned __int16 *)(a1 + 296);
      *(_DWORD *)(v19 + 40) = 1;
      *(_QWORD *)(v19 + 48) = "application/x-realspeak-markers-pp;version=4.0";
      v20 = cstdlib_strcmp("application/x-realspeak-markers-pp;version=4.0",
              "application/x-realspeak-markers-pp;version=4.0");
      v21 = *(_WORD *)(a1 + 296);
      if (!v20)
        *(_WORD *)(a1 + 432) = v21;
      *(_WORD *)(a1 + 296) = v21 + 1;
    }
  }
  LODWORD(v13) = *(unsigned __int16 *)(a1 + 296);
  if (v13 > 7)
  {
LABEL_26:
    v25 = 0;
    v26 = (_QWORD *)(a1 + 64);
    do
    {
      v27 = *(v26 - 1);
      if (v27)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v27, *v26);
        LOWORD(v13) = *(_WORD *)(a1 + 296);
      }
      ++v25;
      v26 += 4;
    }
    while (v25 < (unsigned __int16)v13);
    LOWORD(v13) = 0;
    v9 = v7;
    goto LABEL_31;
  }
  if ((v9 & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "audio/L16;rate=");
    v22 = *(_DWORD *)(a1 + 1988);
    v23 = cstdlib_strlen(__dst);
    LH_itoa(v22, &__dst[v23], 0xAu);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32)
                                                                                                + 64))(a3, a4, 16, __dst, 0, 1, a1 + 32 * *(unsigned __int16 *)(a1 + 296) + 56);
    v13 = *(unsigned __int16 *)(a1 + 296);
    if ((v9 & 0x80000000) == 0)
    {
      v24 = a1 + 32 * v13;
      *(_DWORD *)(v24 + 40) = 1;
      *(_QWORD *)(v24 + 48) = 0;
      *(_WORD *)(a1 + 434) = v13;
      LOWORD(v13) = v13 + 1;
      goto LABEL_31;
    }
  }
  if ((_DWORD)v13)
  {
    v7 = v9;
    goto LABEL_26;
  }
LABEL_31:
  *(_WORD *)(a1 + 296) = v13;
  return v9;
}

uint64_t eta_synth_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void **v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  if ((safeh_HandleCheck(a1, a2, 83213, 2072) & 0x80000000) != 0)
    return 2164269064;
  *a5 = 1;
  cstdlib_memset((void *)(a1 + 304), 0, 0x80uLL);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (char *)&v34 + 4, &v34);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (HIDWORD(v34))
  {
    v8 = eta_synth_doWsolaSynthesis(a1);
    goto LABEL_5;
  }
  v35 = 0;
  v8 = eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v35);
  if ((v8 & 0x80000000) != 0)
    goto LABEL_53;
  v12 = *(unsigned int *)(v35 + 8);
  if (v12 < 0x20)
    goto LABEL_53;
  v13 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v12);
  *(_QWORD *)(a1 + 600) = v13;
  if (!v13)
  {
    v8 = 2164269066;
    goto LABEL_53;
  }
  cstdlib_memcpy(v13, *(const void **)v35, *(unsigned int *)(v35 + 8));
  v14 = 0;
  v15 = 0;
  *(_DWORD *)(a1 + 608) = (unsigned __int16)(*(_DWORD *)(v35 + 8) >> 5);
  v16 = (void **)(a1 + 1936);
  v17 = (int *)(a1 + 1944);
  while (1)
  {
    v18 = *(int *)(a1 + 608);
    if (v14 >= v18)
      goto LABEL_40;
    v19 = *(_QWORD *)(a1 + 600);
    v20 = (int *)(v19 + 32 * v14);
    v20[3] = 0;
    v20[4] = 0;
    v21 = *v20;
    if (*v20 == 8)
      break;
    if (v21 == 25)
    {
      v22 = paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"waitfactor", *(_DWORD *)(v19 + 32 * v14 + 24));
      goto LABEL_37;
    }
    if (v21 == 13)
    {
      v22 = eta_synth_ResetParams(a1);
LABEL_37:
      v8 = v22;
    }
LABEL_38:
    ++v14;
    if ((v8 & 0x80000000) != 0)
    {
      LODWORD(v18) = *(_DWORD *)(a1 + 608);
LABEL_40:
      if (v15 >= (int)v18)
        goto LABEL_46;
      if (!*v16)
      {
        *(_DWORD *)(a1 + 1944) = 0;
        *(_BYTE *)(a1 + 1948) = 0;
        v8 = eta_PushSamplesAndMarkersOut(a1, 0, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), 0, 0);
        if ((v8 & 0x80000000) != 0 || !*v16)
          goto LABEL_46;
        LODWORD(v18) = *(_DWORD *)(a1 + 608);
      }
      *(_DWORD *)(a1 + 1944) = 0;
      *(_BYTE *)(a1 + 1948) = 3;
      v8 = eta_PushSamplesAndMarkersOut(a1, 3, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), *(_QWORD *)(a1 + 600) + 32 * v15, (int)v18 - v15);
      goto LABEL_46;
    }
  }
  v23 = v20[6];
  if (v23 < 1)
    goto LABEL_38;
  v24 = fxd_S32ShMultRndS32S32(v20[6], 107374182, 31) + 22 * v23;
  if (!v24)
    goto LABEL_38;
  v25 = *v16;
  if (!*v16)
  {
    *(_DWORD *)(a1 + 1944) = 0;
    *(_BYTE *)(a1 + 1948) = 0;
    v8 = eta_PushSamplesAndMarkersOut(a1, 0, (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), 0, 0);
    if ((v8 & 0x80000000) != 0)
      goto LABEL_46;
    v25 = *v16;
    if (!*v16)
      goto LABEL_46;
  }
  if (v24 < 1)
    goto LABEL_38;
  while (1)
  {
    v26 = *v17;
    if (v24 >= *v17)
    {
      v24 -= v26;
    }
    else
    {
      *v17 = v24;
      v26 = v24;
      v24 = 0;
    }
    *(_BYTE *)(a1 + 1948) = 2;
    cstdlib_memset(v25, 0, 2 * v26);
    v8 = eta_PushSamplesAndMarkersOut(a1, *(unsigned __int8 *)(a1 + 1948), (_QWORD *)(a1 + 1936), (int *)(a1 + 1944), *(_QWORD *)(a1 + 600) + 32 * v15, (int)v14 + 1 - v15);
    if ((v8 & 0x80000000) != 0)
      break;
    v25 = *v16;
    if (!*v16)
      break;
    v15 = v14 + 1;
    if (v24 < 1)
    {
      v15 = v14 + 1;
      goto LABEL_38;
    }
  }
LABEL_46:
  v27 = *(_QWORD *)(a1 + 600);
  if (v27)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v27);
    *(_QWORD *)(a1 + 600) = 0;
  }
  *(_DWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1936) = 0;
LABEL_53:
  if ((_DWORD)v34)
  {
    v29 = *(unsigned __int16 *)(a1 + 296);
    if (*(_WORD *)(a1 + 296))
    {
      v30 = 0;
      v31 = (_QWORD *)(a1 + 64);
      do
      {
        if (*(v31 - 1) && *((_DWORD *)v31 - 6) == 1)
        {
          v32 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 72))();
          if (v32 >= 0)
            v8 = v8;
          else
            v8 = v32;
          *(v31 - 1) = safeh_GetNullHandle();
          *v31 = v33;
          v29 = *(unsigned __int16 *)(a1 + 296);
        }
        ++v30;
        v31 += 4;
      }
      while (v30 < v29);
    }
  }
LABEL_5:
  if ((v8 & 0x80000000) != 0)
    goto LABEL_50;
  v9 = (_QWORD *)(a1 + 64);
  v10 = (unsigned int *)(a1 + 312);
  v11 = -1;
  while (++v11 < (unint64_t)*(unsigned __int16 *)(a1 + 296))
  {
    if (!*((_DWORD *)v9 - 6))
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(v9 - 1), *v9, *v10);
    v9 += 4;
    v10 += 4;
    if ((v8 & 0x80000000) != 0)
      goto LABEL_50;
  }
  if (eta_InOut__IsEndState(a1 + 1936))
  {
LABEL_50:
    *(_DWORD *)(a1 + 1960) = 7;
    chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 1232));
    psi_DataMapSegment__DeinitPoly(a1 + 1064);
    xi_Segment__DeinitPoly((_QWORD *)(a1 + 1752));
  }
  return v8;
}

uint64_t eta_synth_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = safeh_HandleCheck(a1, a2, 83213, 2072);
  if ((v3 & 0x80000000) != 0)
    return 2164269064;
  v4 = v3;
  v5 = *(unsigned __int16 *)(a1 + 296);
  if (*(_WORD *)(a1 + 296))
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 64);
    do
    {
      v8 = *(v7 - 1);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(v8, *v7);
        if (v9 >= 0)
          v4 = v4;
        else
          v4 = v9;
        *(v7 - 1) = safeh_GetNullHandle();
        *v7 = v10;
        v5 = *(unsigned __int16 *)(a1 + 296);
      }
      ++v6;
      v7 += 4;
    }
    while (v6 < v5);
  }
  *(_WORD *)(a1 + 296) = 0;
  return v4;
}

uint64_t eta_synth_CheckChange(uint64_t a1, char *__s1, char *a3, _DWORD *a4)
{
  int v8;
  uint64_t result;

  *a4 = 1;
  if (!cstdlib_strcmp(__s1, "waitfactor"))
  {
    if (LH_atou(a3) >= 0xA)
      goto LABEL_16;
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "pitch"))
  {
    if (cstdlib_atoi((unsigned __int8 *)a3) != 50)
      goto LABEL_12;
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "rate"))
  {
    if (cstdlib_atoi((unsigned __int8 *)a3) - 50 >= 0x15F)
    {
LABEL_16:
      result = 2164269071;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (!cstdlib_strcmp(__s1, "volume"))
  {
    if (cstdlib_atoi((unsigned __int8 *)a3) >= 0x65)
      goto LABEL_16;
    return 0;
  }
  if (!cstdlib_strcmp(__s1, *(const char **)(a1 + 912)))
  {
LABEL_12:
    *a4 = 0;
    return 2164269057;
  }
  v8 = *(_DWORD *)(a1 + 1960);
  *a4 = 0;
  if (v8 == 7)
    return 2164269073;
  else
    return 2164269063;
}

uint64_t eta_synth_LearnChange(uint64_t a1, char *__s1, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;

  if (cstdlib_strcmp(__s1, "waitfactor"))
  {
    if (cstdlib_strcmp(__s1, "volume"))
    {
      v6 = 2164269071;
      if (cstdlib_strcmp(__s1, "rate"))
        return 2164269063;
      v11 = cstdlib_atoi(a3);
      if ((v11 - 50) <= 0x15E)
      {
        v6 = 0;
        *(_WORD *)(a1 + 652) = *(_WORD *)(a1 + 650);
        *(_WORD *)(a1 + 650) = v11;
      }
      return v6;
    }
    v10 = cstdlib_atoi(a3);
    if (v10 <= 0x64)
    {
      v6 = 0;
      *(_WORD *)(a1 + 648) = v10;
      return v6;
    }
    return 2164269071;
  }
  v7 = cstdlib_atoi(a3);
  if (v7 > 9u)
    return 2164269071;
  v6 = 0;
  *(_WORD *)(a1 + 640) = v7;
  v8 = *(_DWORD *)(a1 + 1988) * v7;
  if ((v8 + 6) < 9)
    v9 = 1;
  else
    v9 = (v8 + 2) / 5;
  *(_DWORD *)(a1 + 644) = v9;
  return v6;
}

uint64_t eta_synth_InterceptUnsupportedAddonLoading(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *__s;

  v13 = 0;
  __s = 0;
  result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voice", &__s);
  if ((result & 0x80000000) == 0)
  {
    v3 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
    v4 = cstdlib_strlen(__s);
    v5 = (char *)heap_Calloc(v3, 1, (v4 + 13));
    *(_QWORD *)(a1 + 912) = v5;
    if (v5)
    {
      cstdlib_strcpy(v5, "voiceaddons.");
      v6 = cstdlib_strlen(*(const char **)(a1 + 912));
      if (cstdlib_strlen(__s))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 912) + v6 + v8++) = cstdlib_tolower(__s[v7]);
          v7 = v8;
        }
        while (cstdlib_strlen(__s) > v8);
      }
      paramc_ParamRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40));
      if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), &v13) & 0x80000000) == 0
        || (result = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), ""),
            (result & 0x80000000) == 0)
        && (result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD *)(a1 + 912), &v13),
            (result & 0x80000000) == 0))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
        v10 = *(_BYTE **)(a1 + 912);
        v11 = *(_OWORD *)(a1 + 616);
        v12 = *(_QWORD *)(a1 + 632);
        return paramc_ListenerAdd(v9, v10, &v11);
      }
    }
    else
    {
      return 2164269066;
    }
  }
  return result;
}

uint64_t eta_PushSamplesAndMarkersOut(uint64_t a1, int a2, _QWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;

  v25 = 0;
  v26 = a6;
  result = 2164269062;
  if (a1 && a3 && a4)
  {
    if (a5)
    {
      if (a6)
      {
        v13 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)(a1 + 32) + 136))(*(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), &v25);
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
        v14 = 0;
        v15 = v25 >> 1;
        v25 >>= 1;
        do
        {
          *(_DWORD *)(a5 + v14 + 12) += v15;
          v14 += 32;
        }
        while (32 * a6 != v14);
        v16 = a1 + 32 * *(unsigned __int16 *)(a1 + 432);
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v16 + 56), *(_QWORD *)(v16 + 64), a5, 32 * a6);
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
      }
    }
    v17 = *(_DWORD *)(a1 + 2064);
    v18 = *(_DWORD *)(a1 + 2068);
    if (v17 <= v18)
    {
      v19 = 0;
    }
    else
    {
      if (v17 <= *a4 + v18)
        v19 = v17 - v18;
      else
        v19 = *a4;
      if (*a3 && v19)
      {
        v20 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v20 + 56), *(_QWORD *)(v20 + 64));
        if ((result & 0x80000000) != 0)
          goto LABEL_29;
        *(_DWORD *)(a1 + 2068) += v19;
      }
    }
    if (a2 == 3)
    {
      v21 = 1;
    }
    else if (a6)
    {
      v21 = 2;
    }
    else
    {
      v21 = 2 * (*a4 != 0);
    }
    result = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, int *))(a1 + 440))(*(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), v21, a1 + 2064, (int *)&v26);
    if ((result & 0x80000000) != 0)
      goto LABEL_29;
    *(_DWORD *)(a1 + 2068) = 0;
    if (*a4 > v19)
    {
      v22 = a1 + 32 * *(unsigned __int16 *)(a1 + 434);
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 64), *(_QWORD *)(a1 + 2056) + 2 * v19, 2 * (*a4 - v19));
      if ((result & 0x80000000) != 0)
        goto LABEL_29;
      *(_DWORD *)(a1 + 2068) = *a4 - v19;
    }
    if (a2 != 3)
    {
      v23 = *(_QWORD *)(a1 + 2056);
      v24 = 1024;
      goto LABEL_30;
    }
LABEL_29:
    v23 = 0;
    v24 = 0;
LABEL_30:
    *a3 = v23;
    *a4 = v24;
  }
  return result;
}

uint64_t Rhelp2_Lookup_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t **a5)
{
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t Data;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0;
  v18 = 0uLL;
  inited = InitRsrcFunction(a1, a2, &v19);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a5 = 0;
  v11 = heap_Calloc(*(_QWORD **)(v19 + 8), 1, 968);
  if (v11)
  {
    v12 = v11;
    *(_QWORD *)v11 = v19;
    *(_QWORD *)(v11 + 8) = a3;
    cstdlib_strcpy((char *)(v11 + 16), a4);
    v17 = xmmword_214F8C3F0;
    Data = psi_VFDat__loadData(v12 + 232, a1, a2, a4, v12 + 88, 0, v12 + 136, 0, v12 + 184, 1);
    if ((Data & 0x80000000) != 0
      || (Data = psi_Lookup__InitFromDatFiles(v12 + 232, v12 + 88, v12 + 136, v12 + 184, 0), (Data & 0x80000000) != 0))
    {
      v14 = Data;
    }
    else
    {
      v14 = chi_DecodePolyphone__Create(v12 + 400, 0, v19, *(unsigned __int8 **)(v12 + 192), &v17);
      if ((v14 & 0x80000000) == 0)
      {
        v15 = v18;
        *(_OWORD *)(v12 + 936) = v17;
        *(_OWORD *)(v12 + 952) = v15;
LABEL_11:
        *a5 = (uint64_t *)v12;
        return v14;
      }
    }
    *a5 = (uint64_t *)v12;
    Rhelp2_Lookup_ObjClose(a5);
    v12 = 0;
    goto LABEL_11;
  }
  return 2164269066;
}

uint64_t Rhelp2_Lookup_ObjClose(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = chi_DecodePolyphone__Delete(v2 + 50, *v2);
    if ((v3 & 0x80000000) == 0)
      v3 = psi_VFDat__unloadData((uint64_t)(v2 + 29), (uint64_t)(v2 + 11), (uint64_t)(v2 + 17), (uint64_t)(v2 + 23));
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  heap_Free(*(_QWORD **)(*v2 + 8), (uint64_t)v2);
  *a1 = 0;
  return v4;
}

uint64_t Rhelp2_LoadUnitData(uint64_t a1, int a2, int *a3, unsigned int *a4, _DWORD *a5, _WORD *a6, unsigned int a7)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t PreviousDemiID;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t Vect;
  uint64_t inited;
  int v34;
  uint64_t v35;
  __int16 *v37;
  __int16 v38;
  _WORD *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v57 = 0;
  v58 = 0;
  v56 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v48 = 0;
  v49 = 0;
  v51 = 0;
  v11 = *a3;
  v12 = 860 - *a3;
  v50 = 0;
  if (v11 <= 0x35B)
    v13 = v12;
  else
    v13 = 0;
  v14 = a1 + 232;
  v15 = *a4;
  PreviousDemiID = psi_Lookup__getPreviousDemiID(a1 + 232, a2, &v55, (_BYTE *)&v56 + 1, (_DWORD *)&v58 + 1, &v58, (int *)&v57 + 1, &v56, (unsigned int *)&v57);
  if ((PreviousDemiID & 0x80000000) != 0)
    goto LABEL_47;
  v17 = HIDWORD(v57);
  v18 = v11 - 860;
  v42 = v14;
  v41 = a7;
  v40 = a5;
  v43 = v57;
  v44 = v58;
  if (v11 < 0x35C)
  {
    v19 = HIDWORD(v58) + 860;
    v23 = v11;
  }
  else
  {
    v19 = HIDWORD(v58) + 860;
    if (v11 == 860)
    {
      v23 = 860;
    }
    else
    {
      if (HIDWORD(v57))
        v20 = HIDWORD(v57) + 860;
      else
        v20 = 860;
      if (HIDWORD(v57))
        v19 += HIDWORD(v57);
      v21 = HIDWORD(v57) >= v18;
      v22 = HIDWORD(v57) - v18;
      if (v21)
        v23 = v11;
      else
        v23 = v20;
      if (v21)
        v19 = HIDWORD(v58) + v11;
      if (v21)
        v17 = v22;
      else
        v17 = 0;
    }
  }
  v24 = v19 + 440;
  v25 = v19 + 1300;
  v26 = v19 + v15;
  if (v15 - 440 <= 0x35C)
    v27 = v15;
  else
    v27 = 1300;
  if (v15 - 440 > 0x35C)
    v26 = v25;
  if (v15 == 440)
    v28 = 440;
  else
    v28 = v27;
  if (v15 == 440)
    v26 = v24;
  if (HIBYTE(v56))
  {
    v28 = 440;
    v26 = v24;
  }
  if (v15 >= 0x1B8)
    v29 = v28;
  else
    v29 = v15;
  if (v15 >= 0x1B8)
    v30 = v26;
  else
    v30 = v24;
  v31 = HIBYTE(v56) != 0;
  xi_Segment__Init_for_psola(a1 + 760, *(_QWORD *)a1, a1 + 936);
  *a3 = v23;
  *a4 = v29;
  v48 = __PAIR64__(v30, v17);
  LODWORD(v49) = 0;
  HIDWORD(v49) = v44;
  LODWORD(v50) = 0x10000;
  HIDWORD(v50) = v43;
  LOBYTE(v51) = 68;
  BYTE1(v51) = 16 * v31;
  Vect = vect_s_t__createVect(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)&v52, v17 + v30 + 2160);
  if ((Vect & 0x80000000) != 0)
  {
    inited = Vect;
    v14 = v42;
    goto LABEL_49;
  }
  LODWORD(v54) = HIDWORD(v54);
  v14 = v42;
  PreviousDemiID = psi_DataMapSegment__InitPoly(v42, (_DWORD *)&v49 + 1, (unsigned int *)&v50 + 1);
  if ((PreviousDemiID & 0x80000000) != 0
    || (PreviousDemiID = xi_Segment__InitPoly_withDur(a1 + 760, (uint64_t)&v48, HIDWORD(v49), SHIDWORD(v50), *(_QWORD *)(a1 + 256), *(unsigned __int8 *)(*(_QWORD *)(a1 + 272) + 44)), (PreviousDemiID & 0x80000000) != 0))
  {
LABEL_47:
    inited = PreviousDemiID;
  }
  else
  {
    inited = chi_DecodePolyphone__InitPoly(a1 + 400);
    if ((inited & 0x80000000) == 0)
    {
      v34 = HIDWORD(v48);
      *(_DWORD *)(a1 + 672) = HIDWORD(v50);
      v47 = v34;
      chi_DecodePolyphone__SmpRequested(a1 + 400, (int *)(a1 + 760), &v47, (uint64_t)&v52);
      v35 = *a3 + HIDWORD(v58) + *a4;
      *v40 = v35;
      if (v35 <= v41)
      {
        if (v11 <= 0x35B)
        {
          if ((_DWORD)v35)
          {
            v39 = v53;
            do
            {
              *a6++ = v39[v13++];
              --v35;
            }
            while (v35);
          }
        }
        else if ((_DWORD)v35)
        {
          v37 = v53;
          do
          {
            v38 = *v37++;
            *a6++ = v38;
            --v35;
          }
          while (v35);
        }
      }
      else
      {
        inited = 2164269065;
      }
    }
  }
LABEL_49:
  vect_s_t__deleteVect((uint64_t)&v52);
  chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 400));
  psi_DataMapSegment__DeinitPoly(v14);
  xi_Segment__DeinitPoly((_QWORD *)(a1 + 760));
  return inited;
}

uint64_t Rhelp2_Lookup_Deinit(uint64_t a1)
{
  chi_DecodePolyphone__DeinitPoly((_QWORD *)(a1 + 400));
  psi_DataMapSegment__DeinitPoly(a1 + 232);
  xi_Segment__DeinitPoly((_QWORD *)(a1 + 760));
  return 0;
}

uint64_t Rhelp2_Lookup_NrUnits(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 236);
  if (*(_DWORD *)(a1 + 236))
    return 0;
  else
    return 2164269057;
}

uint64_t Rhelp2_Lookup_Fingerprint(uint64_t a1, char *__dst, size_t __n)
{
  unsigned int v3;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;

  v3 = __n;
  v6 = *(const char **)(a1 + 80);
  if (v6)
  {
    if (cstdlib_strlen(v6) >= __n)
      v7 = 2164269057;
    else
      v7 = 0;
    cstdlib_strncpy(__dst, *(const char **)(a1 + 80), v3);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 236);
    v9 = __n;
    cstdlib_strncpy(__dst, (const char *)(a1 + 16), __n);
    LODWORD(v10) = cstdlib_strlen(__dst);
    v11 = v10 < v3;
    if (v10 < v3 && v8)
    {
      v10 = v10;
      do
      {
        __dst[v10++] = (v8 % 0xA) | 0x30;
        v11 = v10 < v3;
        if (v10 >= v9)
          break;
        v12 = v8 > 9;
        v8 /= 0xAu;
      }
      while (v12);
    }
    if (v11)
    {
      v7 = 0;
      __dst[v10] = 0;
    }
    else
    {
      return 2164269057;
    }
  }
  return v7;
}

uint64_t rhelp2_lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ILookup;
  return result;
}

uint64_t psi_Synthesis__Construct__(uint64_t a1)
{
  *(_QWORD *)(a1 + 1928) = 0;
  return 0;
}

uint64_t psi_Synthesis__Denit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;

  v4 = 2164269056;
  if (!a1)
    return 2164269062;
  if (chi_DecodePolyphone__Delete((uint64_t *)(a1 + 1232), *(_QWORD *)(a1 + 16)))
  {
    v12 = "error in chi_DecodePolyphone__Delete";
  }
  else if (rho_Concat__Delete(a1 + 1592))
  {
    v12 = "error in rho_Concat__Delete";
  }
  else
  {
    if (!psi_VFDat__unloadData(a1 + 1064, a2, a3, a4))
      return 0;
    v12 = "error in psi_VFDat__unloadData";
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)v12, v9, v10, v11, v14);
  return v4;
}

uint64_t psi_Synthesis__Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  __int128 v15;
  uint64_t v16;

  v5 = 2164269056;
  if (a1)
  {
    *(_QWORD *)(a1 + 1928) = 0;
    if (*(_DWORD *)(a5 + 12) == 22050)
    {
      if (psi_Lookup__InitFromDatFiles(a1 + 1064, a2, a3, a4, 0))
      {
        v12 = a1 + 16;
        v13 = "error in psi_Lookup__InitFromDatFiles";
      }
      else
      {
        v12 = a1 + 16;
        if (chi_DecodePolyphone__Create(a1 + 1232, a1, *(_QWORD *)(a1 + 16), *(unsigned __int8 **)(a4 + 8), (__int128 *)a5))
        {
          v13 = "error in chi_DecodePolyphone__Create";
        }
        else
        {
          if (!rho_Concat__Create(a1 + 1592, *(_QWORD *)(a1 + 16), a5))
          {
            v5 = 0;
            v15 = *(_OWORD *)(a5 + 16);
            *(_OWORD *)(a1 + 1976) = *(_OWORD *)a5;
            *(_OWORD *)(a1 + 1992) = v15;
            return v5;
          }
          v13 = "error in rho_Concat__Create";
        }
      }
      log_OutText(*(_QWORD *)(*(_QWORD *)v12 + 32), (uint64_t)"SYNTH", 3, 0, (uint64_t)v13, v9, v10, v11, v16);
    }
    psi_Synthesis__Denit(a1, a1 + 920, a1 + 968, a1 + 1016);
  }
  return v5;
}

uint64_t psi_Synthesis__FeedAllUnits(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 2164269056;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *(_QWORD *)(a1 + 1928) = a2;
      *(_WORD *)(a2 + 20) = 0;
      *(_DWORD *)(a1 + 1960) = 3;
    }
  }
  return result;
}

uint64_t psi_Synthesis__ProcessOnePolyphone(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  result = 0;
  v4 = *(_DWORD *)(a1 + 1960);
  if (v4 == 7)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if (v4 != 5)
  {
    if (v4 != 3)
      return result;
    *(_DWORD *)(a1 + 1960) = 5;
  }
  result = rho_concatenate((unsigned int *)(a1 + 1592), a1 + 1232, (int *)(a1 + 1752), (uint64_t **)(a1 + 1928), a1 + 1064, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 1928) + 20) != *(unsigned __int16 *)(*(_QWORD *)(a1 + 1928) + 16))
      return v5;
    LODWORD(result) = 7;
LABEL_9:
    *(_DWORD *)(a1 + 1960) = result;
    return v5;
  }
  return result;
}

_DWORD *v_equ_i_t(_DWORD *result, int *a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap_i_t(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, 4 * a2);
  return a1;
}

_WORD *v_equ_s_t(_WORD *result, __int16 *a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  __int16 v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap_s_t(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, 2 * a2);
  return a1;
}

_BYTE *v_equ_c_t(_BYTE *result, char *a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;
  char v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap_c_t(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, a2);
  return a1;
}

_BYTE *v_equ_uc_t(_BYTE *result, char *a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;
  char v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    do
    {
      v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap_uc_t(void *a1, int a2)
{
  if (a2 >= 1)
    bzero(a1, a2);
  return a1;
}

uint64_t vect_i_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269056;
  cstdlib_memset(v2, 0, (4 * *(_DWORD *)(a1 + 20)));
  return 0;
}

uint64_t vect_i_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  void *v6;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = a1;
    v6 = (void *)heap_Calloc(a1, 4, a3);
    *(_QWORD *)(a2 + 8) = v6;
    if (v6)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      cstdlib_memset(v6, 0, 4 * a3);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_i_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_u_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269056;
  cstdlib_memset(v2, 0, 4 * *(unsigned int *)(a1 + 20));
  return 0;
}

uint64_t vect_u_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 4, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      cstdlib_memset(v7, 0, 4 * v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_u_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_s_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269056;
  cstdlib_memset(v2, 0, 2 * *(unsigned int *)(a1 + 20));
  return 0;
}

uint64_t vect_s_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 2, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      cstdlib_memset(v7, 0, 2 * v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_s_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_us_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269056;
  cstdlib_memset(v2, 0, 2 * *(unsigned int *)(a1 + 20));
  return 0;
}

uint64_t vect_us_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 2, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      cstdlib_memset(v7, 0, 2 * v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_us_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_c_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269056;
  cstdlib_memset(v2, 0, *(unsigned int *)(a1 + 20));
  return 0;
}

uint64_t vect_c_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  size_t v6;
  void *v7;

  v3 = 2164269066;
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = a3;
    *(_QWORD *)a2 = a1;
    v7 = (void *)heap_Calloc(a1, 1, a3);
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      *(_DWORD *)(a2 + 16) = a3;
      *(_DWORD *)(a2 + 20) = a3;
      cstdlib_memset(v7, 0, v6);
      return 0;
    }
  }
  return v3;
}

uint64_t vect_c_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t vect_uc_t__fillZero(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (!v2)
    return 2164269066;
  cstdlib_memset(v2, 0, *(unsigned int *)(a1 + 20));
  return 0;
}

uint64_t vect_uc_t__createVect(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  size_t v5;
  void *v6;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = a3;
  *(_QWORD *)a2 = a1;
  v6 = (void *)heap_Calloc(a1, 1, a3);
  *(_QWORD *)(a2 + 8) = v6;
  if (!v6)
    return 2164269066;
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  cstdlib_memset(v6, 0, v5);
  return 0;
}

uint64_t vect_uc_t__deleteVect(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  if (!a1)
    return 2164269066;
  v2 = (_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  heap_Free(*(_QWORD **)a1, v1);
  result = 0;
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t z__fxd_S32ShMultRndS32S32(int a1, int a2, __int16 a3)
{
  int v3;

  v3 = (int)((a2 >> 16) * (unsigned __int16)a1
           + (unsigned __int16)a2 * (a1 >> 16)
           + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16)
           + (1 << (a3 - 17))) >> (a3 - 16);
  if (a3 == 16)
    v3 = (a2 >> 16) * (unsigned __int16)a1
       + (unsigned __int16)a2 * (a1 >> 16)
       + (((unsigned __int16)a2 * (unsigned __int16)a1 + 0x8000) >> 16);
  return (v3 + (((a2 >> 16) * (a1 >> 16)) << (32 - a3)));
}

uint64_t rho_Concat__OverlapWindow__Init(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  void *v4;

  v2 = 2164269056;
  if (a2 > 15999)
  {
    if (a2 == 16000)
    {
      v3 = 161;
      v4 = &smpOverlapWindow_16_0;
      goto LABEL_10;
    }
    if (a2 == 22050)
    {
      v3 = 221;
      v4 = &smpOverlapWindow_22_0;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2 == 8000)
    {
      v3 = 81;
      v4 = &smpOverlapWindow_8_0;
      goto LABEL_10;
    }
    if (a2 == 11025)
    {
      v3 = 113;
      v4 = &smpOverlapWindow_11_0;
LABEL_10:
      v2 = 0;
      *(_QWORD *)(a1 + 136) = v4;
      *(_DWORD *)(a1 + 144) = v3;
      *(_DWORD *)(a1 + 148) = v3;
    }
  }
  return v2;
}

uint64_t rho_Concat__OverlapWindow__Denit(uint64_t a1)
{
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return 0;
}

uint64_t rho_Concat__WindowsOverlap_wsola(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  v5 = *(unsigned int *)(a1 + 4);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8) + 2 * a4;
    v8 = *(_QWORD *)(a3 + 8) + 2 * a5;
    v9 = *(_QWORD *)(a1 + 136);
    v10 = 4 * v5;
    do
    {
      v11 = *(unsigned __int16 *)(v7 + 2 * v6);
      v12 = (unsigned __int16)*(_DWORD *)(v9 + 4 * v6);
      v13 = *(int *)(v9 + 4 * v6) >> 16;
      v14 = (__int16)v11 >> 16;
      v15 = (v11 * v13 + v14 * v12 + ((v11 * v12 + 0x8000) >> 16) + 0x2000) >> 14;
      LOWORD(v13) = v14 * v13;
      v16 = *(unsigned __int16 *)(v8 + 2 * v6);
      *(_WORD *)(v7 + 2 * v6++) = v15
                                + 4 * (v13 + ((__int16)v16 >> 15) * HIWORD(*(_DWORD *)(v9 + v10)))
                                + ((v16 * (*(int *)(v9 + v10) >> 16)
                                  + ((__int16)v16 >> 16) * (unsigned __int16)*(_DWORD *)(v9 + v10)
                                  + ((v16 * (unsigned __int16)*(_DWORD *)(v9 + v10) + 0x8000) >> 16)
                                  + 0x2000) >> 14);
      v10 -= 4;
    }
    while (v10);
  }
  return 0;
}

uint64_t rho_Concat__fade_out(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a2 + 8) + 2 * a3;
  do
  {
    if (2 * (a4 & ~(a4 >> 31)) == v4)
      break;
    v7 = *(unsigned __int16 *)(v6 + v4);
    v8 = (unsigned __int16)*(_DWORD *)(v5 + 4 * v4);
    *(_WORD *)(v6 + v4) = ((v7 * (*(int *)(v5 + 4 * v4) >> 16)
                          + ((__int16)v7 >> 16) * v8
                          + ((v7 * v8 + 0x8000) >> 16)
                          + 0x2000) >> 14)
                        + 4 * HIWORD(*(_DWORD *)(v5 + 4 * v4)) * ((__int16)v7 >> 15);
    v4 += 2;
  }
  while (*(_DWORD *)(a1 + 144) > (int)v4);
  return 0;
}

uint64_t rho_Concat__fade_in(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = (__int16 *)(*(_QWORD *)(a2 + 8) + 2 * a3);
  v6 = *(_DWORD *)(a1 + 144) - 1;
  v7 = a4 & ~(a4 >> 31);
  do
  {
    if (!v7)
      break;
    v8 = (unsigned __int16)*(_DWORD *)(v4 + 4 * v6);
    *v5 = (((unsigned __int16)*v5 * (*(int *)(v4 + 4 * v6) >> 16)
          + (*v5 >> 16) * v8
          + (((unsigned __int16)*v5 * v8 + 0x8000) >> 16)
          + 0x2000) >> 14)
        + 4 * HIWORD(*(_DWORD *)(v4 + 4 * v6)) * (*v5 >> 15);
    ++v5;
    --v7;
    v9 = v6 <= 1;
    v6 -= 2;
  }
  while (!v9);
  return 0;
}

uint64_t rho_Concat__fade_out_closure(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a2 + 8) + 2 * a3;
  do
  {
    if ((a4 & ~(a4 >> 31)) == v4)
      break;
    v7 = *(unsigned __int16 *)(v6 + 2 * v4);
    v8 = (unsigned __int16)*(_DWORD *)(v5 + 4 * v4);
    *(_WORD *)(v6 + 2 * v4) = ((v7 * (*(int *)(v5 + 4 * v4) >> 16)
                              + ((__int16)v7 >> 16) * v8
                              + ((v7 * v8 + 0x8000) >> 16)
                              + 0x2000) >> 14)
                            + 4 * HIWORD(*(_DWORD *)(v5 + 4 * v4)) * ((__int16)v7 >> 15);
    ++v4;
  }
  while (v4 < *(int *)(a1 + 144));
  return 0;
}

uint64_t rho_Concat__fade_in_burst(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = (__int16 *)(*(_QWORD *)(a2 + 8) + 2 * a3);
  v6 = *(_DWORD *)(a1 + 144) - 1;
  v7 = a4 & ~(a4 >> 31);
  do
  {
    if (!v7)
      break;
    v8 = (unsigned __int16)*(_DWORD *)(v4 + 4 * v6);
    *v5 = (((unsigned __int16)*v5 * (*(int *)(v4 + 4 * v6) >> 16)
          + (*v5 >> 16) * v8
          + (((unsigned __int16)*v5 * v8 + 0x8000) >> 16)
          + 0x2000) >> 14)
        + 4 * HIWORD(*(_DWORD *)(v4 + 4 * v6)) * (*v5 >> 15);
    ++v5;
    --v7;
    v9 = v6 <= 4;
    v6 -= 5;
  }
  while (!v9);
  return 0;
}

uint64_t eta_Synth_RetrieveInputBlock(uint64_t a1, char *__s2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  const char *v11;

  v3 = 2164269076;
  *a3 = 0;
  v4 = *(unsigned __int16 *)(a1 + 296);
  if (!*(_WORD *)(a1 + 296))
    return v3;
  v8 = 0;
  v9 = (_QWORD *)(a1 + 304);
  for (i = (_QWORD *)(a1 + 64); ; i += 4)
  {
    v11 = (const char *)*(i - 2);
    if (!v11 || *((_DWORD *)i - 6))
      goto LABEL_7;
    if (!cstdlib_strcmp(v11, __s2))
      break;
    v4 = *(unsigned __int16 *)(a1 + 296);
LABEL_7:
    ++v8;
    v9 += 2;
    if (v8 >= v4)
      return v3;
  }
  if (*v9)
  {
    v3 = 0;
    goto LABEL_12;
  }
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD *))(*(_QWORD *)(a1 + 32) + 88))(*(i - 1), *i, v9, v9 + 1);
  if ((v3 & 0x80000000) == 0)
LABEL_12:
    *a3 = v9;
  return v3;
}

void eta_Synth_LinkMsgLayers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;

  v14 = 0;
  v2 = a1 + 464;
  cstdlib_memset((void *)(a1 + 464), 0, 0x98uLL);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 16);
  if ((eta_Synth_RetrieveInputBlock(a1, "text/x-realspeak-usphonemes;charset=tts", &v14) & 0x80000000) == 0)
  {
    v3 = v14;
    v4 = *(_QWORD *)v14 + 1;
    *(_BYTE *)(a1 + 472) = **(_BYTE **)v14;
    *(_QWORD *)(a1 + 512) = v4;
    v5 = (unsigned __int16)(*(_DWORD *)(v3 + 8) - 2);
    *(_DWORD *)(a1 + 520) = v5;
    if (!*(_BYTE *)(v4 + v5)
      && (eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usids;version=4.0", &v14) & 0x80000000) == 0)
    {
      v6 = v14;
      *(_QWORD *)(a1 + 488) = *(_QWORD *)v14;
      LODWORD(v6) = *(_DWORD *)(v6 + 8) >> 2;
      *(_DWORD *)(a1 + 496) = v6;
      if ((_DWORD)v6 == 2 * *(_DWORD *)(a1 + 520)
        && (eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usmarkers-u16;version=4.0", &v14) & 0x80000000) == 0)
      {
        v7 = v14;
        v8 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
        *(_QWORD *)(a1 + 536) = v8;
        if (v8)
        {
          cstdlib_memcpy(v8, *(const void **)v7, *(unsigned int *)(v7 + 8));
          if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usplosives;version=4.0", &v14) & 0x80000000) == 0)
          {
            v9 = v14;
            v10 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
            *(_QWORD *)(a1 + 560) = v10;
            if (v10)
            {
              cstdlib_memcpy(v10, *(const void **)v9, *(unsigned int *)(v9 + 8));
              if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-usdurs;version=4.0", &v14) & 0x80000000) == 0)
              {
                v11 = v14;
                v12 = (void *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned int *)(v14 + 8));
                *(_QWORD *)(a1 + 584) = v12;
                if (v12)
                {
                  cstdlib_memcpy(v12, *(const void **)v11, *(unsigned int *)(v11 + 8));
                  if ((eta_Synth_RetrieveInputBlock(a1, "application/x-realspeak-markers-pp;version=4.0", &v14) & 0x80000000) == 0)
                  {
                    v13 = (_DWORD *)(v14 + 8);
                    eta_Synth_SetupMarkers(v2, *(int **)v14, *(_DWORD *)(v14 + 8) >> 5, (int *)(v14 + 8));
                    *v13 *= 32;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

__n128 eta_Synth_SetupMarkers(uint64_t a1, int *a2, int a3, int *a4)
{
  unsigned int v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int *v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  __n128 v32;
  __n128 *v33;

  v8 = (unsigned __int16)(*(_DWORD *)(a1 + 56) + a3);
  *(_DWORD *)(a1 + 144) = v8;
  if (a3 >= 1)
  {
    v9 = a3;
    v10 = a2;
    do
    {
      v11 = *v10;
      v10 += 8;
      if (v11 == 8)
        *(_DWORD *)(a1 + 144) = ++v8;
      --v9;
    }
    while (v9);
  }
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v8, 32);
  *(_QWORD *)(a1 + 136) = v12;
  if (v12)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + v14);
        if (v15)
        {
          v19 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v16);
          *v19 = 8;
          v19[6] = 0;
          ++v16;
          ++*(_BYTE *)(*(_QWORD *)(a1 + 72) + v14);
        }
        v15 = 0;
        if (v18)
          break;
LABEL_23:
        v23 = *(_BYTE **)(a1 + 48);
        if (v14 || *v23 != 35 || (*(_BYTE *)(a1 + 8) & 1) != 0)
        {
          v24 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 32 * v16);
          *v24 = 33;
          v24[6] = v23[v14];
          ++v16;
          ++*(_BYTE *)(*(_QWORD *)(a1 + 72) + v14);
        }
        if (++v14 >= *(int *)(a1 + 56))
          goto LABEL_31;
      }
      while (1)
      {
        if (v17 >= a3 || v16 >= *(_DWORD *)(a1 + 144))
          goto LABEL_19;
        v20 = &a2[8 * v17];
        if (*v20 == 33)
        {
          if (v20[6] != 35)
            goto LABEL_18;
        }
        else if (*v20 != 8 || !a2[8 * v17 + 6])
        {
          goto LABEL_18;
        }
        v15 = 1;
LABEL_18:
        result = *(__n128 *)v20;
        v21 = *((_OWORD *)v20 + 1);
        v22 = *(_QWORD *)(a1 + 136) + 32 * v16;
        *(__n128 *)v22 = result;
        *(_OWORD *)(v22 + 16) = v21;
        ++v17;
        ++v16;
LABEL_19:
        if (!--v18)
          goto LABEL_23;
      }
    }
    v17 = 0;
    LOWORD(v16) = 0;
LABEL_31:
    *(_DWORD *)(a1 + 144) = (unsigned __int16)v16;
    *a4 = v17;
    if (**(_BYTE **)(a1 + 48) == 35)
    {
      v25 = *(_BYTE **)(a1 + 72);
      if (!*v25)
      {
        v26 = v25[1];
        if (*(int *)(a1 + 56) < 3)
        {
          *v25 = v26;
          *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) = 0;
        }
        else if (v25[1])
        {
          v27 = 0;
          v28 = 32 * v26;
          while (32 * (*(_DWORD *)(a1 + 144) & ~(*(int *)(a1 + 144) >> 31)) != v27)
          {
            v29 = *(__n128 **)(a1 + 136);
            if (v29[v27 / 0x10].n128_u32[0] == 0x4000)
            {
              v30 = &v29[v27 / 0x10];
              v31 = *v30;
              result = v30[1];
              v32 = v29[1];
              *v30 = *v29;
              v30[1] = v32;
              v33 = *(__n128 **)(a1 + 136);
              *v33 = v31;
              v33[1] = result;
              ++**(_BYTE **)(a1 + 72);
              --*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1);
              return result;
            }
            v27 += 32;
            if (v28 == v27)
              return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t eta_Synth_UnlinkMsgLayers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a1)
    return 2164269062;
  v2 = a1[73];
  if (v2)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v2);
    a1[73] = 0;
  }
  v3 = a1[67];
  if (v3)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v3);
    a1[67] = 0;
  }
  v4 = a1[70];
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1[2] + 8), v4);
    a1[70] = 0;
  }
  v5 = a1[75];
  if (!v5)
    return 0;
  heap_Free(*(_QWORD **)(a1[2] + 8), v5);
  result = 0;
  a1[75] = 0;
  return result;
}

BOOL eta_InOut__IsEndState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 2;
}

uint64_t eta_Synth_Reset(uint64_t a1)
{
  mu_Reset(a1 + 1936);
  *(_DWORD *)(a1 + 1688) = 0;
  return 0;
}

uint64_t smc1175mrf22spi_DecoderProcess_F1(uint64_t a1, int a2, unsigned __int8 *a3, _WORD *a4, _DWORD *a5, char *a6, _WORD *a7, _DWORD *a8, int a9, int a10)
{
  char *v14;
  uint64_t result;
  unsigned __int16 *v17;
  int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int16 *v24;
  _OWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  unsigned __int16 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  _WORD *v39;
  _WORD *v40;
  void *__src;
  uint64_t v42;
  int __dst[17];
  int v44[5];
  _QWORD v45[4];

  v45[2] = *MEMORY[0x24BDAC8D0];
  if (a7 && a4 && a3 && a5 && (v14 = a6) != 0)
  {
    if (*a4)
    {
      v42 = 0;
      *a7 = 0;
      result = SecurelyRetrievePointer(a1, a2, &v42);
      if ((result & 0x80000000) == 0)
      {
        v17 = (unsigned __int16 *)v42;
        v18 = (int *)(v42 + 8);
        v19 = *(_DWORD *)(v42 + 8);
        if (v19 <= (unsigned __int16)*a4)
        {
          v39 = a5 + 96;
          v20 = a5 + 152;
          *(_DWORD *)(v42 + 4) = 19;
          ReadStream_CheckWhatModeFirst((uint64_t)(v17 + 76), (int *)v17 + 65, (uint64_t)a3, *v17, (unsigned __int16)v19, (int *)v17 + 1, v45, (char *)v17 + 2140, (_DWORD *)v17 + 3, v18, (_DWORD *)v17 + 6, 1, *((_BYTE *)v17 + 2506), 4);
          smc1175mrf22_ReadStream(a3, *(unsigned __int16 *)(v42 + 8), a5 + 152, *(unsigned __int16 *)(v42 + 12), (_WORD *)(v42 + 2140));
          v21 = v42;
          *a4 = *(_DWORD *)(v42 + 8);
          fxd_MultiStageVectorDecodeLsp__32BIT(a8, *(_DWORD *)(v21 + 4 * a9 + 152), (_DWORD *)(v21 + 32 * a9 + 164), *(_QWORD *)(v21 + 8 * a9 + 360), 16, v21 + 40 * a9 + 32, a5 + 335);
          fxd_OrderCheckLsp__S32(a5 + 335, 16);
          __src = a5 + 335;
          LH_S32ToLH_S32(a5 + 335, (void *)(v42 + 2072), 0x10u);
          v22 = 0;
          v23 = 0;
          v38 = a5 + 136;
          v40 = a7;
          do
          {
            v24 = (unsigned __int16 *)v42;
            *(_WORD *)(v42 + 1990) = 0;
            v25 = (_OWORD *)(*((_QWORD *)v24 + 49) + 160 * v23);
            v25[8] = 0u;
            v25[9] = 0u;
            v25[6] = 0u;
            v25[7] = 0u;
            v25[4] = 0u;
            v25[5] = 0u;
            v25[2] = 0u;
            v25[3] = 0u;
            *v25 = 0u;
            v25[1] = 0u;
            if (*((_DWORD *)v24 + 1) == 19 && v23 < *v24)
            {
              LOBYTE(v26) = 0;
              v27 = 0;
            }
            else
            {
              v26 = *v20;
              v27 = v20[1];
              v20 += 2;
            }
            smc1175mrf22_fxd_DecodWFSet1_5p(a5, v44, 80, v26, v27);
            v28 = 0;
            v29 = (unsigned __int16 *)v42;
            do
            {
              v30 = *(__int16 *)((char *)a5 + v28);
              v31 = 2 * v30 * (__int16)v29[996];
              v32 = (v31 + 0x4000) >> 15;
              if (v32 <= -32768)
                LOWORD(v32) = 0x8000;
              if (v31 <= 1073725439)
                v33 = v32;
              else
                v33 = 0x7FFF;
              *(_WORD *)((char *)a5 + v28) = v33 + v30;
              v28 += 2;
            }
            while (v28 != 160);
            if (*((_DWORD *)v29 + 1) == 19 && v23 < *v29)
            {
              v34 = 0;
            }
            else
            {
              v35 = *v20++;
              v34 = smc1175mrf22_fxd_DecodeCodeGain(v35, (__int16 *)a5, 0, (uint64_t)(v29 + 917), 80);
              v29 = (unsigned __int16 *)v42;
            }
            v36 = 0;
            v29[982] = v34;
            v29[969] = v34;
            v37 = *((_QWORD *)v29 + 49);
            do
            {
              *(_WORD *)(v37 + v22 + v36) += (2 * *(__int16 *)((char *)a5 + v36) * (__int16)v29[969]
                                                          + 0x8000) >> 16;
              v36 += 2;
            }
            while (v36 != 160);
            v29[996] = v29[995];
            LH_S32ToLH_S32(__src, v29 + 1036, 0x10u);
            LH_S32ToLH_S32(__src, __dst, 0x10u);
            if (a10)
            {
              fxd_LspToCosLsp__32BITX(__dst, __dst, 16);
              fxd_HighPrecisionCosLspToAi__32BIT((unint64_t)__dst, v38, 16);
              FillZeroLH_S32(a5, 0x60u);
              LH_S32ToLH_S32((void *)(v42 + 2008), a5, 0x10u);
              fxd_HighPrecisionFastSynthesisFilter(v37 + 160 * v23, v39, 80, 0, v38, 0x10u, 28, (uint64_t)a5, 14);
              LH_S32ToLH_S32(a5 + 80, (void *)(v42 + 2008), 0x10u);
            }
            LH_S16ToLH_S16(v39, v14, 0x50u);
            v14 += 160;
            *v40 += 160;
            ++v23;
            v22 += 160;
          }
          while (v23 != 4);
          LH_S32ToLH_S32(__src, (void *)(v42 + 2072), 0x10u);
          LH_S16ToLH_S16((void *)(v42 + 1040), (void *)(v42 + 400), *(_DWORD *)(v42 + 20));
          FillZeroLH_S16((void *)(v42 + 2 * *(int *)(v42 + 20) + 400), 0x140u);
          result = 0;
          ++*(_DWORD *)(v42 + 2136);
        }
        else
        {
          *a4 = 0;
          *a7 = 0;
          return 2353012745;
        }
      }
      return result;
    }
  }
  else if (!a4)
  {
    goto LABEL_12;
  }
  *a4 = 0;
LABEL_12:
  result = 2353012742;
  if (a7)
    *a7 = 0;
  return result;
}

uint64_t smc1175mrf22_dummy()
{
  return 0;
}

uint64_t GetBit(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v4 += *(unsigned __int8 *)(result + v3) << v3;
      ++v3;
    }
    while (a3 != (_DWORD)v3);
    result += a3;
  }
  *a2 = v4;
  return result;
}

unsigned __int8 *smc1175mrf22_ReadStream(unsigned __int8 *result, unsigned int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  int8x8_t *v6;
  unsigned int v7;
  uint32x4_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[214];

  v14[213] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = a2;
    v6 = (int8x8_t *)v14;
    do
    {
      v7 = *result++;
      v8 = (uint32x4_t)vdupq_n_s32(v7);
      *v6++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_214F8C220), (int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_214F8C210))), (int8x8_t)0x101010101010101);
      --v5;
    }
    while (v5);
  }
  if (a4)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = (unsigned __int16)*a5;
      if (*a5)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v13 += *((unsigned __int8 *)v10 + v12) << v12;
          ++v12;
        }
        while ((_DWORD)v11 != (_DWORD)v12);
        v10 = (_QWORD *)((char *)v10 + v11);
      }
      else
      {
        v13 = 0;
      }
      *a3++ = v13;
      ++a5;
      ++v9;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t ReadStream_CheckWhatModeFirst(uint64_t result, int *a2, uint64_t a3, int a4, int a5, int *a6, _QWORD *a7, char *__dst, _DWORD *a9, int *a10, _DWORD *a11, int a12, char a13, int a14)
{
  unsigned int *v19;
  uint64_t v20;
  uint32x4_t v22;
  __int128 v23;
  const __int16 *v24;
  void *v25;
  size_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  __int16 *v42;
  __int16 v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int32x4_t v65;
  int32x4_t v66;
  _DWORD v67[4];
  _BYTE v68[20];
  int v69;
  _BYTE v70[1705];
  uint64_t v71;

  v19 = (unsigned int *)result;
  v20 = 0;
  v71 = *MEMORY[0x24BDAC8D0];
  *a7 = -1;
  a7[1] = -1;
  do
  {
    v22 = (uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(a3 + v20));
    *(int8x8_t *)&v70[8 * v20++] = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v22, (uint32x4_t)xmmword_214F8C220), (int16x8_t)vshlq_u32(v22, (uint32x4_t)xmmword_214F8C210))), (int8x8_t)0x101010101010101);
  }
  while (v20 != 5);
  if (a13)
  {
    if (!a12)
    {
      switch(a13)
      {
        case 3:
          *a6 = 22;
          *a10 = 49;
          *(_QWORD *)&v30 = 0x300000003;
          *((_QWORD *)&v30 + 1) = 0x300000003;
          *(_OWORD *)a7 = v30;
          *a11 = 3;
          *a9 = 44;
          v24 = au16BitAllocatiobMod22;
          v25 = __dst;
          v26 = 88;
          break;
        case 2:
          *a6 = 21;
          *a10 = 39;
          *(_QWORD *)&v31 = 0x200000002;
          *((_QWORD *)&v31 + 1) = 0x200000002;
          *(_OWORD *)a7 = v31;
          *a11 = 2;
          *a9 = 36;
          v24 = (const __int16 *)&au16BitAllocatiobMod21;
          v25 = __dst;
          v26 = 72;
          break;
        case 1:
          *a6 = 20;
          *a10 = 28;
          *(_QWORD *)&v23 = 0x100000001;
          *((_QWORD *)&v23 + 1) = 0x100000001;
          *(_OWORD *)a7 = v23;
          *a11 = 1;
          *a9 = 28;
          v24 = au16BitAllocatiobMod20;
          v25 = __dst;
          v26 = 56;
          break;
        default:
LABEL_17:
          LODWORD(v28) = 0;
          goto LABEL_18;
      }
      result = (uint64_t)cstdlib_memcpy(v25, v24, v26);
      goto LABEL_17;
    }
LABEL_10:
    *a6 = 19;
    *a10 = 16;
    *(_QWORD *)&v27 = 0x100000001;
    *((_QWORD *)&v27 + 1) = 0x100000001;
    *(_OWORD *)a7 = v27;
    *a11 = 1;
    *a9 = 15;
    result = (uint64_t)cstdlib_memcpy(__dst, &au16BitAllocatiobMod19, 0x1EuLL);
    LODWORD(v28) = 0;
    a14 = 4 - a4;
    goto LABEL_18;
  }
  if (a12)
    goto LABEL_10;
  if (v70[0] != 1)
  {
    if (!v70[0])
    {
      *a6 = 15;
      *a10 = 28;
      *(_QWORD *)&v29 = 0x100000001;
      *((_QWORD *)&v29 + 1) = 0x100000001;
      *(_OWORD *)a7 = v29;
      LODWORD(v28) = 1;
      *a11 = 1;
      *a9 = 29;
      result = (uint64_t)cstdlib_memcpy(__dst, &au16BitAllocatiobMod15, 0x3AuLL);
      *(_WORD *)__dst = 1;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!v70[1])
  {
    *a6 = 16;
    *a10 = 39;
    *(_QWORD *)&v58 = 0x200000002;
    *((_QWORD *)&v58 + 1) = 0x200000002;
    *(_OWORD *)a7 = v58;
    LODWORD(v28) = 2;
    *a11 = 2;
    *a9 = 37;
    result = (uint64_t)cstdlib_memcpy(__dst, &au16BitAllocatiobMod16, 0x4AuLL);
LABEL_72:
    *(_DWORD *)__dst = 65537;
    goto LABEL_18;
  }
  if (!v70[2])
  {
    *a6 = 17;
    *a10 = 50;
    *(_QWORD *)&v59 = 0x300000003;
    *((_QWORD *)&v59 + 1) = 0x300000003;
    *(_OWORD *)a7 = v59;
    LODWORD(v28) = 3;
    *a11 = 3;
    *a9 = 46;
    result = (uint64_t)cstdlib_memcpy(__dst, &au16BitAllocatiobMod17, 0x5CuLL);
    *((_WORD *)__dst + 2) = 1;
    goto LABEL_72;
  }
  if (v70[3])
  {
    if (v70[4])
      goto LABEL_17;
    v53 = 0;
    v54 = v70;
    while (v53 != 9)
    {
      v55 = 0;
      v56 = 0;
      v57 = word_214F8D212[v53];
      do
      {
        v56 += v54[v55] << v55;
        ++v55;
      }
      while ((_DWORD)v57 != (_DWORD)v55);
      v54 += v57;
      v67[v53++] = v56;
      if (v53 == 10)
        goto LABEL_82;
    }
    v69 = 0;
LABEL_82:
    v66.i64[0] = 0x400000004;
    v66.i64[1] = 0x400000004;
    *(int32x4_t *)a7 = vaddq_s32(*(int32x4_t *)&v68[4], v66);
    *a6 = 23;
    *((_WORD *)__dst + 8) = 3;
    *(_OWORD *)__dst = xmmword_214F8CD50;
    LODWORD(v28) = 9;
  }
  else
  {
    v60 = 0;
    v61 = v70;
    while (v60 != 8)
    {
      v62 = 0;
      v63 = 0;
      v64 = word_214F8D1FE[v60];
      do
      {
        v63 += v61[v62] << v62;
        ++v62;
      }
      while ((_DWORD)v64 != (_DWORD)v62);
      v61 += v64;
      v67[v60++] = v63;
      if (v60 == 9)
        goto LABEL_80;
    }
    *(_DWORD *)&v68[16] = 0;
LABEL_80:
    v65.i64[0] = 0x100000001;
    v65.i64[1] = 0x100000001;
    *(int32x4_t *)a7 = vaddq_s32(*(int32x4_t *)v68, v65);
    *a6 = 18;
    *(_OWORD *)__dst = xmmword_214F8CD60;
    LODWORD(v28) = 8;
  }
LABEL_18:
  v32 = *a6;
  if ((*a6 - 20) >= 3)
  {
    if (v32 != 19)
    {
      if (v32 == 15)
      {
        v35 = v19[1];
        if ((int)v35 >= 1)
        {
          v28 = v28;
          v36 = a2 + 8;
          do
          {
            v37 = *v36++;
            *(_WORD *)&__dst[2 * v28++] = v37;
            --v35;
          }
          while (v35);
        }
      }
      else
      {
        v38 = *v19;
        if ((int)v38 >= 1)
        {
          v28 = v28;
          do
          {
            v39 = *a2++;
            *(_WORD *)&__dst[2 * v28++] = v39;
            --v38;
          }
          while (v38);
        }
      }
    }
  }
  else
  {
    v33 = *v19;
    if ((int)v33 >= 1)
    {
      v28 = v28;
      do
      {
        v34 = *a2++;
        *(_WORD *)&__dst[2 * v28++] = v34;
        --v33;
      }
      while (v33);
    }
  }
  if (a14 >= 1)
  {
    v40 = 0;
    if (v32 == 23)
      v41 = 7;
    else
      v41 = 5;
    result = 8;
    while (1)
    {
      if (v32 != 19)
      {
        v42 = (__int16 *)&__dst[2 * (int)v28];
        if ((v40 & 1) != 0)
          v43 = v41;
        else
          v43 = 9;
        *v42 = v43;
        LODWORD(v28) = v28 + 2;
        v42[1] = 8;
      }
      v44 = *((_DWORD *)a7 + v40);
      if (v44 >= 1)
        break;
LABEL_52:
      if (++v40 == a14)
        goto LABEL_53;
    }
    v45 = 0;
    while (1)
    {
      v46 = (int)v28;
      v28 = (int)v28 + 2;
      if (v45)
      {
        v47 = v46 + 1;
        if (v45 > 2)
        {
          *(_WORD *)&__dst[2 * v46] = 5;
          *(_WORD *)&__dst[2 * v47] = 20;
        }
        else
        {
          *(_WORD *)&__dst[2 * v46] = 4;
          *(_WORD *)&__dst[2 * v47] = 17;
        }
        if (v32 != 23)
          goto LABEL_51;
      }
      else
      {
        *(_DWORD *)&__dst[2 * v46] = 1310725;
      }
      *(_WORD *)&__dst[2 * v28] = 6;
      LODWORD(v28) = v46 + 3;
LABEL_51:
      if (v44 == ++v45)
        goto LABEL_52;
    }
  }
LABEL_53:
  v48 = 0;
  v49 = &__dst[2 * (int)v28];
  *(_QWORD *)v49 = 0;
  *((_WORD *)v49 + 4) = 0;
  v50 = (unsigned __int16 *)(v49 + 8);
  if ((int)v28 >= -4)
  {
    v48 = 0;
    do
    {
      v51 = *v50--;
      v48 += v51;
    }
    while (v50 >= (unsigned __int16 *)__dst);
  }
  if ((v48 & 7) != 0)
    v52 = (v48 >> 3) + 1;
  else
    v52 = v48 >> 3;
  *a10 = v52;
  *a9 = v28 + 3;
  return result;
}

uint64_t smc1175mrf22_f1_dummy()
{
  return 0;
}

uint64_t smc1175mrf22spi_GetInfo(__int16 a1, char a2, int a3, uint64_t a4)
{
  uint64_t v4;

  if (!a4)
    return 2353012742;
  *(_DWORD *)(a4 + 8) = 40;
  *(int32x2_t *)a4 = vdup_n_s32(0x53FCu);
  *(_WORD *)(a4 + 28) = 1704;
  *(_WORD *)(a4 + 16) = 4007;
  *(_QWORD *)(a4 + 20) = 0x34000D500680280;
  v4 = 0;
  if (a3 == 1)
  {
    *(_DWORD *)(a4 + 30) = 0;
  }
  else
  {
    *(_DWORD *)(a4 + 30) = 92015056;
    *(_DWORD *)(a4 + 12) = 4;
    *(_WORD *)(a4 + 18) = a1;
    *(_BYTE *)(a4 + 34) = a2;
  }
  return v4;
}

uint64_t SecurelyRetrievePointer(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result;

  *a3 = 0;
  result = safeh_HandleCheck(a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
      *a3 = a1;
    else
      return 2353012744;
  }
  return result;
}

uint64_t smc1175mrf22spi_DecoderOpen(__int16 a1, char a2, unsigned __int8 *a3, char *__b, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  _WORD *v24;
  uint64_t v25;
  _WORD *v26;
  unsigned int v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  unsigned __int16 v44;
  int v45;
  unsigned __int16 v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  unsigned __int16 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int16 *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned __int16 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  __int16 v72;
  uint64_t v73;
  char v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  int v80;
  _DWORD __src[100];
  __int16 v82;
  _WORD v83[99];
  _DWORD v84[3];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v5 = 2353012742;
  if (__b)
  {
    v7 = __b;
    cstdlib_memset(__b, 0, 0x9D0uLL);
    if (a5)
    {
      *(_QWORD *)a5 = v7;
      *(_DWORD *)(a5 + 8) = 65732;
      if (a3)
      {
        v73 = a5;
        v82 = 32;
        smc1175mrf22_ReadStream(a3, 4u, __src, 1, &v82);
        v11 = __src[0];
        *((_WORD *)v7 + 192) = __src[0];
        v74 = a2;
        v72 = a1;
        if (v11 << 16 <= 0)
        {
          LODWORD(v12) = 0;
          v13 = 0;
          v14 = 1;
        }
        else
        {
          if ((unsigned __int16)v11 <= 1u)
            v12 = 1;
          else
            v12 = (unsigned __int16)v11;
          memset_pattern16(v83, asc_214F8D250, (2 * v12));
          v13 = 0;
          v14 = v12 + 1;
          v15 = v83;
          v16 = v12;
          do
          {
            v17 = *v15++;
            v13 += v17;
            --v16;
          }
          while (v16);
        }
        if ((v13 & 7) != 0)
          v18 = (v13 >> 3) + 1;
        else
          v18 = v13 >> 3;
        v19 = v18;
        smc1175mrf22_ReadStream(a3 + 4, v18, v84, v12, v83);
        if (*((__int16 *)v7 + 192) >= 1)
        {
          v20 = 0;
          v21 = v19 + 4;
          v22 = (int *)(v7 + 164);
          v75 = v7;
          do
          {
            v23 = v14 + 1;
            v24 = &v83[v14 - 1];
            *v24 = 32;
            v79 = &v7[4 * v20 + 152];
            smc1175mrf22_ReadStream(&a3[v21], 4u, v79, 1, v24);
            v25 = *(unsigned int *)v79;
            if ((int)v25 <= 0)
            {
              v27 = 0;
              v26 = &v83[v23 - 1];
              v28 = v14 + 1;
            }
            else
            {
              v26 = &v83[v23 - 1];
              memset_pattern16(v26, asc_214F8D250, 2 * v25);
              v27 = 0;
              v28 = v14 + v25 + 1;
              v29 = v26;
              do
              {
                v30 = *v29++;
                v27 += v30;
                --v25;
              }
              while (v25);
            }
            v78 = v21;
            v31 = v21 + 4;
            if ((v27 & 7) != 0)
              v32 = (v27 >> 3) + 1;
            else
              v32 = v27 >> 3;
            v77 = v32;
            smc1175mrf22_ReadStream(&a3[v31], v32, &v7[32 * v20 + 164], (unsigned __int16)(v28 - v23), v26);
            v33 = *(unsigned int *)v79;
            v34 = 12 * v33 + 24;
            if ((int)v33 < 1)
            {
              if (v34 != v84[v20])
                return 2353012745;
              v39 = 0;
              v38 = &v83[v28 - 1];
              v40 = v28;
            }
            else
            {
              v35 = *(unsigned int *)v79;
              v36 = v22;
              do
              {
                v37 = *v36++;
                v34 += 32 * v37;
                --v35;
              }
              while (v35);
              if (v34 != v84[v20])
                return 2353012745;
              v38 = &v83[v28 - 1];
              memset_pattern16(v38, asc_214F8D250, 2 * v33);
              v39 = 0;
              v40 = v28 + v33;
              v41 = v38;
              do
              {
                v42 = *v41++;
                v39 += v42;
                --v33;
              }
              while (v33);
            }
            v43 = v31 + v32;
            if ((v39 & 7) != 0)
              v44 = (v39 >> 3) + 1;
            else
              v44 = v39 >> 3;
            v45 = v44;
            v46 = v40 - v28;
            v47 = (unsigned __int16)(v40 - v28);
            smc1175mrf22_ReadStream(&a3[v43], v44, __src, v47, v38);
            if (v47)
              memcpy(&v7[32 * v20 + 260], __src, 4 * v46);
            v48 = 0;
            v49 = 0;
            v50 = &v83[v40 - 1];
            *(_DWORD *)v50 = 2097184;
            v50[2] = 32;
            *(_DWORD *)(v50 + 3) = 2097184;
            do
              v49 += (unsigned __int16)v50[v48++];
            while (v48 != 5);
            v51 = (v43 + v45);
            v52 = v40 + 5;
            if ((v49 & 7) != 0)
              v53 = (v49 >> 3) + 1;
            else
              v53 = v49 >> 3;
            v76 = v45;
            smc1175mrf22_ReadStream(&a3[v51], v53, __src, 5, v50);
            *((_DWORD *)v7 + 7) = __src[1];
            v54 = *(unsigned int *)v79;
            if ((int)v54 < 1)
            {
              v14 = v40 + 5;
            }
            else
            {
              memset_pattern16(&v83[v52 - 1], asc_214F8D250, 2 * v54);
              v14 = v40 + v54 + 5;
            }
            v7 = v75;
            v55 = 0;
            if (v14 - v52 < 1)
            {
              v58 = v78;
            }
            else
            {
              v56 = &v83[v52 - 1];
              v57 = (v14 - v52);
              v58 = v78;
              do
              {
                v59 = *v56++;
                v55 += v59;
                --v57;
              }
              while (v57);
            }
            v60 = v51 + v53;
            if ((v55 & 7) != 0)
              v61 = (v55 >> 3) + 1;
            else
              v61 = v55 >> 3;
            smc1175mrf22_ReadStream(&a3[v60], v61, &v75[40 * v20 + 32], (unsigned __int16)(v14 - v52), &v83[v52 - 1]);
            v62 = v60 + v61;
            v80 = 16;
            v63 = &v75[8 * v20];
            *((_QWORD *)v63 + 45) = &a3[v62];
            v64 = *(unsigned int *)v79;
            if ((int)v64 >= 1)
            {
              v65 = 0;
              v66 = 0;
              v67 = v63 + 360;
              do
                v66 += 32 * v22[v65++];
              while (v64 != v65);
              if (v66)
              {
                v68 = 0;
                v69 = v66 >> 1;
                if (v66 >> 1 <= 1)
                  v69 = 1;
                v70 = 2 * v69;
                do
                {
                  smc1175mrf22_ReadStream(&a3[v58 + 4 + v61 + v77 + v76 + v53 + v68], 2u, __src, 1, &v80);
                  *(_WORD *)(*v67 + v68) = __src[0];
                  v68 += 2;
                }
                while (v70 != v68);
                LODWORD(v62) = v58 + v61 + v77 + v76 + v53 + v68 + 4;
                v7 = v75;
              }
            }
            ++v20;
            v22 += 8;
            v21 = v62;
          }
          while (v20 < *((__int16 *)v7 + 192));
        }
        *(_WORD *)v7 = v72;
        *((_DWORD *)v7 + 6) = 1;
        *(_OWORD *)(v7 + 8) = xmmword_214F8D230;
        *((_QWORD *)v7 + 49) = v7 + 1194;
        smc1175mrf22spi_DecoderResetMemory(*(_DWORD **)v73, *(_QWORD *)(v73 + 8));
        v5 = 0;
        *((_DWORD *)v7 + 534) = 0;
        v7[2506] = v74;
      }
    }
    else
    {
      return 2353012744;
    }
  }
  return v5;
}

uint64_t smc1175mrf22spi_DecoderResetMemory(_DWORD *a1, int a2)
{
  uint64_t result;
  uint64_t i;
  char *v5;
  uint64_t v6;
  int32x4_t *v7;
  int16x8_t v8;
  _WORD v9[16];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      cstdlib_memset(a1 + 100, 0, 0x59AuLL);
      cstdlib_memset(a1 + 502, 0, 0x40uLL);
      cstdlib_memset((char *)a1 + 1994, 0, 6uLL);
      cstdlib_memset(a1 + 500, 0, 6uLL);
      *(_DWORD *)((char *)a1 + 1990) = 214695936;
      memset_pattern16((char *)a1 + 1834, &unk_214F8D240, 0x68uLL);
      for (i = 0; i != 26; i += 2)
      {
        v5 = (char *)a1 + i;
        *((_WORD *)v5 + 969) = 0;
        *((_WORD *)v5 + 982) = 0;
      }
      fxd_LinSpace(v9, 0, 25736, 16);
      v6 = 0;
      v7 = (int32x4_t *)(a1 + 518);
      do
      {
        v8 = *(int16x8_t *)&v9[v6];
        *v7 = vshll_n_s16(*(int16x4_t *)v8.i8, 0xAuLL);
        v7[1] = vshll_high_n_s16(v8, 0xAuLL);
        v7 += 2;
        v6 += 8;
      }
      while (v6 != 16);
      result = 0;
      a1[534] = 0;
    }
    else
    {
      return 2353012744;
    }
  }
  return result;
}

uint64_t smc1175mrf22spi_getDecoderBufferSize(unsigned __int16 *a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, int a6, int *a7)
{
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v13 = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((v13 & 0x80000000) == 0)
  {
    if (a1)
    {
      v14 = *a5;
      if (*a5)
      {
        if (v14 < 0x280)
        {
          *a5 = v14 & 0xFFFFFFFE;
          if (v14 <= 0xA1)
            v16 = v14 > 1;
          else
            v16 = 2;
          if (v14 <= 0x141)
            v17 = v16;
          else
            v17 = 3;
          if (v14 <= 0x1E1)
            v15 = v17;
          else
            v15 = 4;
        }
        else
        {
          *a5 = 640;
          v15 = 4;
        }
        *a7 = v15;
        ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, a3, *a1, a1[4], (int *)a1 + 1, v19, (char *)a1 + 2140, (_DWORD *)a1 + 3, (int *)a1 + 2, (_DWORD *)a1 + 6, a6, *((_BYTE *)a1 + 2506), v15);
        v14 = *((_DWORD *)a1 + 2);
      }
      else
      {
        *((_QWORD *)a1 + 1) = 0;
        *((_DWORD *)a1 + 6) = 0;
        *a5 = 0;
      }
      *a4 = v14;
    }
    else
    {
      return 2353012744;
    }
  }
  return v13;
}

uint64_t smc1175mrf22spi_getSpectrum(unsigned __int16 *a1, int a2, unsigned __int8 *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD __dst[183];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v9 = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((v9 & 0x80000000) == 0)
  {
    if (a1)
    {
      v15 = 0;
      v16 = 0;
      ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, (uint64_t)a3, *a1, a1[4], (int *)&v15, &v17, (char *)__dst, &v16, (int *)&v16 + 1, (_DWORD *)&v15 + 1, 0, *((_BYTE *)a1 + 2506), 0);
      smc1175mrf22_ReadStream(a3, WORD2(v16), a4, (unsigned __int16)v16, __dst);
      v10 = v15 - 15;
      *a5 = v15 == 15;
      v11 = 0;
      switch(v10)
      {
        case 0:
          v11 = 1;
          break;
        case 1:
          v11 = 2;
          break;
        case 2:
          v11 = 3;
          break;
        case 3:
          v11 = 8;
          break;
        case 4:
          break;
        case 5:
        case 6:
        case 7:
          v11 = 0;
          *a5 = 0;
          break;
        case 8:
          v11 = 9;
          break;
        default:
          v11 = 4;
          break;
      }
      v12 = 0;
      v13 = &a4[v11];
      do
      {
        a4[v12] = v13[v12];
        ++v12;
      }
      while (v12 != 5);
    }
    else
    {
      return 2353012744;
    }
  }
  return v9;
}

uint64_t smc1175mrf22spi_DecoderProcess(unsigned __int16 *a1, int a2, unsigned __int8 *a3, _WORD *a4, _DWORD *a5, char *a6, _WORD *a7, _DWORD *a8, int a9, int a10, int a11, int a12)
{
  char *v16;
  uint64_t result;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int16 v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BOOL8 v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  int v56;
  int v57;
  __int16 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned __int16 *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  __int16 *v70;
  int v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned __int16 *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  __int16 *v84;
  int v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned __int16 *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  __int16 *v99;
  int v100;
  int v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  void *__src;
  int *v111;
  uint64_t v112;
  _WORD *v113;
  _WORD *v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  char *__dst;
  int *v119;
  unsigned int *v120;
  int v121;
  int v122;
  _QWORD v123[2];
  int v124[17];
  int __b[16];
  _DWORD v126[5];
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v122 = 0;
  if (!a7 || !a4 || !a3 || !a5 || (v16 = a6) == 0)
  {
    if (!a4)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!*a4)
  {
LABEL_12:
    *a4 = 0;
LABEL_13:
    result = 2353012742;
    if (a7)
      *a7 = 0;
    return result;
  }
  *a7 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  result = safeh_HandleCheck((uint64_t)a1, a2, 65732, 2512);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      if (*((_DWORD *)a1 + 2) > (int)(unsigned __int16)*a4)
      {
        *a4 = 0;
        *a7 = 0;
        return 2353012745;
      }
      v114 = a7;
      v21 = a5 + 152;
      ReadStream_CheckWhatModeFirst((uint64_t)(a1 + 76), (int *)a1 + 65, (uint64_t)a3, *a1, (unsigned __int16)*((_DWORD *)a1 + 2), (int *)a1 + 1, v123, (char *)a1 + 2140, (_DWORD *)a1 + 3, (int *)a1 + 2, (_DWORD *)a1 + 6, 0, *((_BYTE *)a1 + 2506), a10);
      smc1175mrf22_ReadStream(a3, a1[4], a5 + 152, a1[6], a1 + 1070);
      v22 = 0;
      *a4 = *((_DWORD *)a1 + 2);
      switch(*((_DWORD *)a1 + 1))
      {
        case 0xF:
          v21 = a5 + 153;
          v22 = 1;
          break;
        case 0x10:
          v22 = 0;
          v21 = a5 + 154;
          break;
        case 0x11:
          v22 = 0;
          v21 = a5 + 155;
          break;
        case 0x12:
          v22 = 0;
          v21 = a5 + 160;
          break;
        case 0x17:
          v22 = 0;
          v21 = a5 + 161;
          break;
        default:
          break;
      }
      if (a11)
      {
        fxd_MultiStageVectorDecodeLsp__32BIT(a8, *(_DWORD *)&a1[2 * a9 + 76], &a1[16 * a9 + 82], *(_QWORD *)&a1[4 * a9 + 180], 16, (uint64_t)&a1[20 * a9 + 16], __b);
        fxd_OrderCheckLsp__S32(__b, 16);
        fxd_MultiStageVectorDecodeLsp__32BIT(v21, *(_DWORD *)&a1[2 * v22 + 76], &a1[16 * v22 + 82], *(_QWORD *)&a1[4 * v22 + 180], 16, (uint64_t)&a1[20 * v22 + 16], a5 + 335);
        fxd_OrderCheckLsp__S32(a5 + 335, 16);
      }
      v23 = *(int *)&a1[2 * v22 + 76];
      v121 = 0;
      v24 = (int *)(a1 + 2);
      if (a10 >= 1)
      {
        v25 = 0;
        v26 = 0;
        v113 = a5 + 96;
        v27 = &v21[v23];
        v111 = a5 + 136;
        v112 = (uint64_t)(a1 + 917);
        __src = a1 + 1004;
        do
        {
          v117 = v25;
          __dst = v16;
          v28 = 2 * v25;
          v29 = 80 * v26;
          v116 = v26;
          if (a12)
          {
            v30 = v27;
            v31 = v28;
            smc1175mrf22_DecodeLag_11_22(*v27, v26, *((_DWORD *)a1 + 1), &v122, &v121);
            smc1175mrf22_fxd_ExcitWFSet0_Decod_11_22((_WORD *)(*((_QWORD *)a1 + 49) + 2 * v29), (__int16)v122, 80);
            v32 = 0;
            a1[995] = smc1175mrf22_fxd_qgp[v30[1]];
            v115 = v31;
            v33 = *((_QWORD *)a1 + 49) + v31;
            do
            {
              v34 = 2 * *(__int16 *)(v33 + v32) * (__int16)a1[995];
              v35 = (v34 + 0x4000) >> 15;
              if (v35 <= -32768)
                LOWORD(v35) = 0x8000;
              if (v34 <= 1073725439)
                v36 = v35;
              else
                v36 = 0x7FFF;
              *(_WORD *)(v33 + v32) = v36;
              v32 += 2;
            }
            while (v32 != 160);
            smc1175mrf22_fxd_DecodWFSet1_5p(a5, v126, 80, v30[2], v30[3]);
            v37 = v122;
            if (v122 > 79)
            {
              v47 = smc1175mrf22_fxd_DecodeCodeGain(v30[4], (__int16 *)a5, 5, v112, 80);
              v48 = 0;
              a1[982] = v47;
              a1[969] = v47;
              v49 = *((_QWORD *)a1 + 49);
              v24 = (int *)(a1 + 2);
              do
              {
                *(_WORD *)(v49 + 2 * (int)(v126[v48] + v29)) += (2
                                                                               * *((__int16 *)a5 + (int)v126[v48])
                                                                               * (__int16)a1[969]
                                                                               + 0x8000) >> 16;
                ++v48;
              }
              while (v48 != 5);
            }
            else
            {
              v38 = 0;
              v24 = (int *)(a1 + 2);
              do
              {
                v39 = 2 * *(__int16 *)((char *)a5 + v38) * (__int16)a1[996];
                v40 = (v39 + 0x4000) >> 15;
                if (v40 <= -32768)
                  LOWORD(v40) = 0x8000;
                if (v39 <= 1073725439)
                  v41 = v40;
                else
                  v41 = 0x7FFF;
                *((_WORD *)a5 + v37++) += v41;
                v38 += 2;
              }
              while ((_DWORD)v37 != 80);
              v42 = smc1175mrf22_fxd_DecodeCodeGain(v30[4], (__int16 *)a5, 0, v112, 80);
              v43 = 0;
              a1[982] = v42;
              a1[969] = v42;
              v44 = *((_QWORD *)a1 + 49) + v115;
              do
              {
                *(_WORD *)(v44 + v43) += (2 * *(__int16 *)((char *)a5 + v43) * (__int16)a1[969] + 0x8000) >> 16;
                v43 += 2;
              }
              while (v43 != 160);
            }
            v119 = (int *)v123 + v26;
            if (*v119 > 1)
            {
              v50 = *v24;
              smc1175mrf22_fxd_DecodWFSet1_4p(a5, v126, 80, v30[5], v30[6]);
              if (*v24 < 23)
              {
                v46 = v30 + 7;
                v51 = v50 > 22;
                v52 = (43690 * (__int16)a1[v51 + 982] + 0x8000) >> 16;
              }
              else
              {
                v51 = v50 > 22;
                LOWORD(v52) = smc1175mrf22_fxd_DecodeCodeGain(v30[7], (__int16 *)a5, 4, (uint64_t)&a1[4 * v51 + 917], 80);
                a1[v51 + 982] = v52;
                v46 = v30 + 8;
              }
              a1[v51 + 969] = v52;
              v53 = v122;
              if (v122 > 79)
              {
                v62 = 0;
                v63 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v63 + 2 * (int)(v126[v62] + v29)) += (2
                                                                                 * *((__int16 *)a5 + (int)v126[v62])
                                                                                 * (__int16)a1[(v50 > 22) + 969]
                                                                                 + 0x8000) >> 16;
                  ++v62;
                }
                while (v62 != 4);
              }
              else
              {
                v54 = v122 + 1;
                v55 = (__int16 *)a5;
                do
                {
                  v56 = 2 * *v55 * (__int16)a1[996];
                  v57 = (v56 + 0x4000) >> 15;
                  if (v57 <= -32768)
                    LOWORD(v57) = 0x8000;
                  if (v56 <= 1073725439)
                    v58 = v57;
                  else
                    v58 = 0x7FFF;
                  v55[v53] += v58;
                  ++v55;
                  v59 = (_DWORD)v54++ == 80;
                }
                while (!v59);
                v60 = 0;
                v61 = *((_QWORD *)a1 + 49) + v115;
                do
                {
                  *(_WORD *)(v61 + v60) += (2
                                                        * *(__int16 *)((char *)a5 + v60)
                                                        * (__int16)a1[(v50 > 22) + 969]
                                                        + 0x8000) >> 16;
                  v60 += 2;
                }
                while (v60 != 160);
              }
              if (*v119 <= 2)
                goto LABEL_138;
              v64 = 2 * (*v24 > 22);
              v65 = v46;
              smc1175mrf22_fxd_DecodWFSet1_4p(a5, v126, 80, *v46, v46[1]);
              v66 = &a1[v64];
              if (*v24 < 23)
              {
                v46 = v65 + 2;
                v67 = (((__int16)v66[982] << 15) + 0x8000) >> 16;
              }
              else
              {
                LOWORD(v67) = smc1175mrf22_fxd_DecodeCodeGain(v65[2], (__int16 *)a5, 4, (uint64_t)&a1[4 * v64 + 917], 80);
                v66[982] = v67;
                v46 = v65 + 3;
              }
              a1[v64 + 969] = v67;
              v68 = v122;
              if (v122 > 79)
              {
                v76 = 0;
                v77 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v77 + 2 * (int)(v126[v76] + v29)) += (2
                                                                                 * *((__int16 *)a5 + (int)v126[v76])
                                                                                 * (__int16)v66[969]
                                                                                 + 0x8000) >> 16;
                  ++v76;
                }
                while (v76 != 4);
              }
              else
              {
                v69 = v122 + 1;
                v70 = (__int16 *)a5;
                do
                {
                  v71 = 2 * *v70 * (__int16)a1[996];
                  v72 = (v71 + 0x4000) >> 15;
                  if (v72 <= -32768)
                    LOWORD(v72) = 0x8000;
                  if (v71 <= 1073725439)
                    v73 = v72;
                  else
                    v73 = 0x7FFF;
                  v70[v68] += v73;
                  ++v70;
                  v59 = (_DWORD)v69++ == 80;
                }
                while (!v59);
                v74 = 0;
                v75 = *((_QWORD *)a1 + 49) + v115;
                do
                {
                  *(_WORD *)(v75 + v74) += (2 * *(__int16 *)((char *)a5 + v74) * (__int16)v66[969] + 0x8000) >> 16;
                  v74 += 2;
                }
                while (v74 != 160);
              }
              if (*v119 <= 3)
                goto LABEL_138;
              if (*v24 <= 22)
                v78 = 0;
              else
                v78 = 3;
              v79 = v46;
              smc1175mrf22_fxd_DecodWFSet1_5p(a5, v126, 80, *v46, v46[1]);
              v80 = &a1[v78];
              if (*v24 < 23)
              {
                v46 = v79 + 2;
                v81 = (26214 * (__int16)v80[982] + 0x8000) >> 16;
              }
              else
              {
                LOWORD(v81) = smc1175mrf22_fxd_DecodeCodeGain(v79[2], (__int16 *)a5, 5, (uint64_t)&a1[4 * v78 + 917], 80);
                v80[982] = v81;
                v46 = v79 + 3;
              }
              a1[v78 + 969] = v81;
              v82 = v122;
              if (v122 > 79)
              {
                v90 = 0;
                v91 = *((_QWORD *)a1 + 49);
                do
                {
                  *(_WORD *)(v91 + 2 * (int)(v126[v90] + v29)) += (2
                                                                                 * *((__int16 *)a5 + (int)v126[v90])
                                                                                 * (__int16)v80[969]
                                                                                 + 0x8000) >> 16;
                  ++v90;
                }
                while (v90 != 5);
              }
              else
              {
                v83 = v122 + 1;
                v84 = (__int16 *)a5;
                do
                {
                  v85 = 2 * *v84 * (__int16)a1[996];
                  v86 = (v85 + 0x4000) >> 15;
                  if (v86 <= -32768)
                    LOWORD(v86) = 0x8000;
                  if (v85 <= 1073725439)
                    v87 = v86;
                  else
                    v87 = 0x7FFF;
                  v84[v82] += v87;
                  ++v84;
                  v59 = (_DWORD)v83++ == 80;
                }
                while (!v59);
                v88 = 0;
                v89 = *((_QWORD *)a1 + 49) + v115;
                do
                {
                  *(_WORD *)(v89 + v88) += (2 * *(__int16 *)((char *)a5 + v88) * (__int16)v80[969] + 0x8000) >> 16;
                  v88 += 2;
                }
                while (v88 != 160);
              }
              goto LABEL_113;
            }
            v46 = v30 + 5;
          }
          else
          {
            v119 = (int *)v123 + v26;
            v45 = *v119;
            if (*v119 <= 1)
            {
              v46 = v27 + 5;
            }
            else if (v45 == 2)
            {
              v46 = v27 + 8;
            }
            else
            {
              if (v45 != 3)
              {
                v115 = v28;
                v46 = v27 + 14;
LABEL_113:
                if (*v119 >= 5)
                {
                  v92 = 4;
                  do
                  {
                    if (*v24 <= 22)
                      v93 = 0;
                    else
                      v93 = v92;
                    if (a12)
                    {
                      v94 = v46;
                      smc1175mrf22_fxd_DecodWFSet1_5p(a5, v126, 80, *v46, v46[1]);
                      v95 = &a1[v93];
                      if (*v24 < 23)
                      {
                        v46 = v94 + 2;
                        v96 = (21846 * (__int16)v95[982] + 0x8000) >> 16;
                      }
                      else
                      {
                        LOWORD(v96) = smc1175mrf22_fxd_DecodeCodeGain(v94[2], (__int16 *)a5, 5, (uint64_t)&a1[4 * v93 + 917], 80);
                        v95[982] = v96;
                        v46 = v94 + 3;
                        v24 = (int *)(a1 + 2);
                      }
                      a1[v93 + 969] = v96;
                      v97 = v122;
                      if (v122 > 79)
                      {
                        v105 = 0;
                        v106 = *((_QWORD *)a1 + 49);
                        do
                        {
                          *(_WORD *)(v106 + 2 * (int)(v126[v105] + v29)) += (2
                                                                                           * *((__int16 *)a5
                                                                                             + (int)v126[v105])
                                                                                           * (__int16)v95[969]
                                                                                           + 0x8000) >> 16;
                          ++v105;
                        }
                        while (v105 != 5);
                      }
                      else
                      {
                        v98 = v122 + 1;
                        v99 = (__int16 *)a5;
                        do
                        {
                          v100 = 2 * *v99 * (__int16)a1[996];
                          v101 = (v100 + 0x4000) >> 15;
                          if (v101 <= -32768)
                            LOWORD(v101) = 0x8000;
                          if (v100 <= 1073725439)
                            v102 = v101;
                          else
                            v102 = 0x7FFF;
                          v99[v97] += v102;
                          ++v99;
                          v59 = (_DWORD)v98++ == 80;
                        }
                        while (!v59);
                        v103 = 0;
                        v104 = *((_QWORD *)a1 + 49) + v115;
                        do
                        {
                          *(_WORD *)(v104 + v103) += (2
                                                                  * *(__int16 *)((char *)a5 + v103)
                                                                  * (__int16)v95[969]
                                                                  + 0x8000) >> 16;
                          v103 += 2;
                        }
                        while (v103 != 160);
                      }
                    }
                    else
                    {
                      v46 += 3;
                    }
                    ++v92;
                  }
                  while (v92 < *v119);
                }
                goto LABEL_138;
              }
              v46 = v27 + 11;
            }
          }
LABEL_138:
          v120 = v46;
          a1[996] = a1[995];
          v107 = *((_QWORD *)a1 + 49);
          if (v116 > 1)
          {
            v109 = __b;
            v108 = (uint64_t)(a5 + 335);
          }
          else
          {
            v108 = (uint64_t)(a1 + 1036);
            v109 = a5 + 335;
          }
          fxd_InterpolateVectors_32BIT(v108, v109, v124, s32prev[v116], 16);
          if (a11)
          {
            fxd_LspToCosLsp__32BITX(v124, v124, 16);
            fxd_HighPrecisionCosLspToAi__32BIT((unint64_t)v124, v111, 16);
            fxd_HighPrecisionExpandLpcBandwidth((uint64_t)v111, v111, 32505, 16, 0);
            FillZeroLH_S32(a5, 0x60u);
            LH_S32ToLH_S32(__src, a5, 0x10u);
            fxd_HighPrecisionFastSynthesisFilter(v107 + 2 * v29, v113, 80, 0, v111, 0x10u, 28, (uint64_t)a5, 14);
            LH_S32ToLH_S32(a5 + 80, __src, 0x10u);
          }
          LH_S16ToLH_S16(v113, __dst, 0x50u);
          v16 = __dst + 160;
          *v114 += 160;
          v26 = v116 + 1;
          v25 = v117 + 80;
          v24 = (int *)(a1 + 2);
          v27 = v120;
        }
        while (v116 + 1 != a10);
      }
      LH_S32ToLH_S32(a5 + 335, a1 + 1036, 0x10u);
      LH_S16ToLH_S16(a1 + 520, a1 + 200, *((_DWORD *)a1 + 5));
      FillZeroLH_S16(&a1[*((int *)a1 + 5) + 200], 0x140u);
      result = 0;
      ++*((_DWORD *)a1 + 534);
    }
    else
    {
      return 2353012744;
    }
  }
  return result;
}

uint64_t smc1175mrf22spi_DecoderClose(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v4;

  LODWORD(result) = safeh_HandleCheck(a1, a2, 65732, 2512);
  if (a1)
    v4 = result;
  else
    v4 = -1941954552;
  if ((int)result >= 0)
    return v4;
  else
    return result;
}

uint64_t smc1175mrf22_artefact_dummy()
{
  return 0;
}

uint64_t smc1175mrf22_psflt_dummy()
{
  return 0;
}

void *smc1175mrf22_fxd_DecodWFSet1_5p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  void *result;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;

  result = FillZeroLH_S16(a1, a3);
  v11 = dword_214F8D284[a5 & 0xF];
  if ((a4 & 1) != 0)
    v12 = 0x2000;
  else
    v12 = -8192;
  *((_WORD *)a1 + v11) = v12;
  *a2 = v11;
  v13 = (dword_214F8D344[a5 >> 4] + (int)v11) % a3;
  if ((a4 & 2) != 0)
    v14 = 0x2000;
  else
    v14 = -8192;
  *((_WORD *)a1 + v13) = v14;
  a2[1] = v13;
  v15 = (dword_214F8D344[(a5 >> 8) & 0xF] + v13) % a3;
  if ((a4 & 4) != 0)
    v16 = 0x2000;
  else
    v16 = -8192;
  *((_WORD *)a1 + v15) = v16;
  a2[2] = v15;
  v17 = (dword_214F8D344[(unsigned __int16)a5 >> 12] + v15) % a3;
  if ((a4 & 8) != 0)
    v18 = 0x2000;
  else
    v18 = -8192;
  *((_WORD *)a1 + v17) = v18;
  a2[3] = v17;
  v19 = (dword_214F8D344[HIWORD(a5) & 0xF] + v17) % a3;
  if ((a4 & 0x10) != 0)
    v20 = 0x2000;
  else
    v20 = -8192;
  *((_WORD *)a1 + v19) = v20;
  a2[4] = v19;
  return result;
}

void *smc1175mrf22_fxd_DecodWFSet1_4p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  void *result;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;

  result = FillZeroLH_S16(a1, a3);
  v11 = dword_214F8D2C4[a5 & 0x1F];
  if ((a4 & 1) != 0)
    v12 = 0x2000;
  else
    v12 = -8192;
  *((_WORD *)a1 + v11) = v12;
  *a2 = v11;
  v13 = (dword_214F8D344[(a5 >> 5) & 0xF] + (int)v11) % a3;
  if ((a4 & 2) != 0)
    v14 = 0x2000;
  else
    v14 = -8192;
  *((_WORD *)a1 + v13) = v14;
  a2[1] = v13;
  v15 = (dword_214F8D344[(a5 >> 9) & 0xF] + v13) % a3;
  if ((a4 & 4) != 0)
    v16 = 0x2000;
  else
    v16 = -8192;
  *((_WORD *)a1 + v15) = v16;
  a2[2] = v15;
  v17 = (dword_214F8D344[(a5 >> 13) & 0xF] + v15) % a3;
  if ((a4 & 8) != 0)
    v18 = 0x2000;
  else
    v18 = -8192;
  *((_WORD *)a1 + v17) = v18;
  a2[3] = v17;
  return result;
}

uint64_t smc1175mrf22_sm_dummy()
{
  return 0;
}

uint64_t smc1175mrf22_fxd_gain_predict(int16x4_t *a1, __int16 *a2, int a3, _WORD *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  if (a3 < 1)
  {
    v6 = 20971;
  }
  else
  {
    v5 = a3;
    v6 = 20971;
    do
    {
      v7 = *a2++;
      v6 += (v7 * v7) >> 5;
      --v5;
    }
    while (v5);
  }
  v8 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_214F8D390), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)((v6 / (__int16)((_WORD)a3 << 8)) >> 1), (uint64_t)&s16LogTable)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v8 >> 36) + (v8 >> 63)) >> 1), (uint64_t)&u16PowTable);
  *a4 = 2 * result;
  return result;
}

uint64_t smc1175mrf22_fxd_gain_predict_pulses(int16x4_t *a1, int a2, __int16 a3, _WORD *a4)
{
  unint64_t v5;
  uint64_t result;

  v5 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_214F8D390), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)(((((a2 << 11) | 0x14) << 16 >> 6) / (__int16)(a3 << 8)) >> 1), (uint64_t)&s16LogTable)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v5 >> 36) + (v5 >> 63)) >> 1), (uint64_t)&u16PowTable);
  *a4 = 2 * result;
  return result;
}

uint64_t smc1175mrf22_fxd_gain_update(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t result;

  *(_WORD *)(a1 + 6) = *(_WORD *)(a1 + 4);
  *(_DWORD *)(a1 + 2) = *(_DWORD *)a1;
  result = fxd_S16Lookup10Log10S16S16(a2, (uint64_t)&s16LogTable);
  *(_WORD *)a1 = 4 * (result + a3);
  return result;
}

uint64_t smc1175mrf22_fxd_DecodeCodeGain(unsigned int a1, __int16 *a2, int a3, uint64_t a4, __int16 a5)
{
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v14;

  v14 = 0;
  if (a3)
    smc1175mrf22_fxd_gain_predict_pulses((int16x4_t *)a4, a3, a5, &v14);
  else
    smc1175mrf22_fxd_gain_predict((int16x4_t *)a4, a2, a5, &v14);
  if ((int)a1 > 58)
  {
    if (a1 > 0x3C)
    {
      v9 = 2 * v14 * smc1175mrf22_fxd_qgc[a1];
      v10 = (v9 + 512) >> 10;
      v11 = (v9 + 2048) >> 12;
      if (a1 <= 0x3E)
        LOWORD(v8) = v11;
      else
        LOWORD(v8) = v10;
      if (a1 <= 0x3E)
        v7 = 1541;
      else
        v7 = 3082;
    }
    else
    {
      v8 = (2 * v14 * smc1175mrf22_fxd_qgc[a1] + 4096) >> 13;
      v7 = 770;
    }
  }
  else
  {
    v7 = 0;
    v8 = (2 * v14 * smc1175mrf22_fxd_qgc[a1] + 0x2000) >> 14;
  }
  v12 = (__int16)smc1175mrf22_fxd_qgc[a1];
  *(_WORD *)(a4 + 6) = *(_WORD *)(a4 + 4);
  *(_DWORD *)(a4 + 2) = *(_DWORD *)a4;
  *(_WORD *)a4 = 4 * (fxd_S16Lookup10Log10S16S16(v12, (uint64_t)&s16LogTable) + v7);
  return (unsigned __int16)v8;
}

uint64_t smc1175mrf22_xe_lplib_dummy()
{
  return 0;
}

_WORD *smc1175mrf22_fxd_ExcitWFSet0_Decod_8Khz(_WORD *result, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int i;
  int v14;
  BOOL v15;

  if (a4 >= 1)
  {
    if (a3 == 1)
      v4 = 2;
    else
      v4 = -a3;
    if (a3 == 1)
      v5 = -1;
    else
      v5 = 0;
    v6 = (char *)&smc1175mrf22_s16LongTermInterpolationTable + 20 * (3 - v4);
    v7 = (char *)&smc1175mrf22_s16LongTermInterpolationTable + 20 * v4;
    v8 = (uint64_t)&result[v5 - a2];
    do
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = v8 + 2;
      for (i = 11; i > 1; --i)
      {
        v11 += ((*(__int16 *)&v7[v10] * *(__int16 *)(v8 + v9)) >> 1)
             + ((*(__int16 *)&v6[v10] * *(__int16 *)(v8 + v10 + 2)) >> 1);
        v10 += 2;
        v9 -= 2;
      }
      v14 = (v11 + 0x2000) >> 14;
      if (v14 <= -32768)
        LOWORD(v14) = 0x8000;
      if (v11 > 536862719)
        LOWORD(v14) = 0x7FFF;
      *result++ = v14;
      v8 = v12;
      v15 = __OFSUB__(a4--, 1);
    }
    while (!((a4 < 0) ^ v15 | (a4 == 0)));
  }
  return result;
}

_WORD *smc1175mrf22_fxd_ExcitWFSet0_Decod_11_22(_WORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  int64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    v5 = 0xFFFFFFFF00000000 * a2;
    do
    {
      *v4++ = *(_WORD *)((char *)result + (v5 >> 31));
      v5 += 0x100000000;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t smc1175mrf22_DecodeLag_8(uint64_t result, int a2, int a3, char a4, int *a5, int *a6, int *a7)
{
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v10 = result;
  if ((a4 & 1) == 0)
  {
    if ((int)result > 197)
    {
      v12 = 0;
      v11 = result - 112;
    }
    else
    {
      result = fxd_S32ShMultRndS32S32((int)result + 2, 1431655765, 31);
      v11 = ((int)result >> 1) + 19;
      v12 = v10 - 3 * v11 + 58;
    }
    *a5 = v11;
    *a6 = v12;
    goto LABEL_29;
  }
  v13 = *a7 - 5;
  if (v13 <= a2)
    v13 = a2;
  if (v13 + 9 > a3)
    v13 = a3 - 9;
  v14 = result & 0xF;
  if (v14 <= 3)
  {
    v15 = v13 + v14;
LABEL_16:
    *a5 = v15;
    *a6 = 0;
    goto LABEL_29;
  }
  if (v14 > 0xB)
  {
    v15 = v13 + v14 - 6;
    goto LABEL_16;
  }
  switch(result & 0xF)
  {
    case 4:
      *a6 = 1;
      v16 = v13 + 3;
      goto LABEL_28;
    case 5:
      v17 = -1;
      goto LABEL_20;
    case 6:
      *a6 = 0;
      goto LABEL_21;
    case 7:
      v17 = 1;
LABEL_20:
      *a6 = v17;
LABEL_21:
      v16 = v13 + 4;
      goto LABEL_28;
    case 8:
      v18 = -1;
      goto LABEL_25;
    case 9:
      *a6 = 0;
      goto LABEL_26;
    case 0xALL:
      v18 = 1;
LABEL_25:
      *a6 = v18;
LABEL_26:
      v16 = v13 + 5;
      goto LABEL_28;
    case 0xBLL:
      *a6 = -1;
      v16 = v13 + 6;
LABEL_28:
      *a5 = v16;
      break;
    default:
      break;
  }
LABEL_29:
  *a7 = *a5;
  return result;
}

uint64_t smc1175mrf22_DecodeLag_11_22(uint64_t result, char a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    if (a3 >= 0x17)
      v6 = 6;
    else
      v6 = 4;
    if (a3 <= 0x1D)
      v7 = v6;
    else
      v7 = 4;
    if (a3 >= 0xF)
      v8 = v7;
    else
      v8 = 2;
    if (a3 >= 0xC)
      v9 = v8;
    else
      v9 = 4;
    if ((int)a3 >= 9)
      v10 = v9;
    else
      v10 = 3;
    v5 = result + (-1 << v10) + *a5 + 1;
  }
  else if ((int)a3 > 5)
  {
    if (a3 > 0xB)
    {
      if (a3 >= 0x1E)
      {
        v5 = *a4;
        goto LABEL_21;
      }
      v5 = result + 54;
    }
    else
    {
      v5 = result + 40;
    }
  }
  else
  {
    v5 = result + 30;
  }
  *a4 = v5;
LABEL_21:
  *a5 = v5;
  return result;
}

uint64_t smc1175mrf22_xelp_dummy()
{
  return 0;
}

uint64_t SearchNextMarkerOfRTCSubType(uint64_t result, unsigned int a2, int *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v18;
  int v19;

  v7 = *a5;
  v8 = *a6;
  if (*a5 >= a2)
  {
    v16 = 0;
  }
  else
  {
    do
    {
      v9 = v7;
      if (a4)
      {
        v10 = *(_DWORD *)(result + 32 * v7);
        v11 = a3;
        v12 = a4;
        while (1)
        {
          v13 = *v11++;
          if (v13 == v10)
            break;
          if (!--v12)
            goto LABEL_6;
        }
        v15 = *(_DWORD *)(result + 32 * v9 + 12);
        if (v8 == -1)
          v14 = v15 != 0;
        else
          v14 = v15 > *(_DWORD *)(result + 32 * v8 + 12);
        if (!v14)
          v8 = v9;
      }
      else
      {
LABEL_6:
        v14 = 0;
      }
      v7 = v9 + !v14;
      v16 = v7 < a2;
    }
    while (v7 < a2 && !v14);
  }
  *a7 = 0;
  if (v8 < a2 && a4)
  {
    v18 = a4;
    while (1)
    {
      v19 = *a3++;
      if (v19 == *(_DWORD *)(result + 32 * v8))
        break;
      if (!--v18)
        goto LABEL_25;
    }
    *a7 = 1;
  }
LABEL_25:
  *a5 = v7;
  if (v16 && *a7 == 0)
    v8 = v7;
  *a6 = v8;
  return result;
}

uint64_t SearchNextMarker(uint64_t a1, unsigned int a2, int *a3, unsigned int a4, _DWORD *a5, _DWORD *a6, int *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;

  v7 = 0;
  if (a2 && a4)
  {
    v8 = *a5;
    LODWORD(v9) = *a6;
    if (v8 >= a2)
    {
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v11 = *a6;
      while (2)
      {
        v9 = v11;
        v12 = *(_DWORD *)(a1 + 32 * v8);
        v13 = a3;
        v14 = a4;
        while (1)
        {
          v15 = *v13++;
          if (v15 == v12)
            break;
          if (!--v14)
          {
            v11 = v9;
            goto LABEL_15;
          }
        }
        v16 = *(_DWORD *)(a1 + 32 * v8 + 12);
        if ((_DWORD)v9 == -1)
        {
          if (v16)
          {
            v19 = 0;
            LODWORD(v9) = -1;
            goto LABEL_24;
          }
          v11 = v8;
        }
        else
        {
          if (v16 >= *(_DWORD *)(a1 + 32 * v9 + 12))
            goto LABEL_18;
          v11 = v8;
          if (v12 != *(_DWORD *)(a1 + 32 * v9))
            goto LABEL_18;
        }
LABEL_15:
        v10 = ++v8 >= (unint64_t)a2;
        if (v8 != a2)
          continue;
        break;
      }
      LODWORD(v8) = a2;
      LODWORD(v9) = v11;
    }
LABEL_18:
    *a7 = 0;
    if (v9 < a2)
    {
      v17 = a4;
      while (1)
      {
        v18 = *a3++;
        if (v18 == *(_DWORD *)(a1 + 32 * v9))
          break;
        if (!--v17)
          goto LABEL_25;
      }
      v19 = 1;
LABEL_24:
      *a7 = v19;
    }
LABEL_25:
    *a5 = v8;
    if (v10 || *a7 != 0)
      LODWORD(v8) = v9;
    *a6 = v8;
    v7 = *a7;
    if ((_DWORD)v7)
      return *(unsigned int *)(a1 + 32 * v9);
  }
  return v7;
}

uint64_t Lookup_CheckForDataFile(_WORD *a1, uint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t inited;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *a4 = 0;
  inited = InitRsrcFunction(a1, a2, &v22);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = ssftriff_reader_ObjOpen(a1, a2, 2, a3, "VFNT", 1031, (uint64_t *)&v21);
  if ((v9 & 0x1FFF) > 0x14 || ((1 << v9) & 0x102010) == 0)
    v18 = v9;
  else
    v18 = 0;
  v19 = v21;
  if ((v18 & 0x80000000) == 0 && v21)
  {
    *a4 = 1;
LABEL_13:
    ssftriff_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
    return v18;
  }
  if (v21)
    goto LABEL_13;
  return v18;
}

uint64_t Lookup_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AddRefCountedObject;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  inited = InitRsrcFunction(a1, a2, &v21);
  if ((inited & 0x80000000) != 0)
    return inited;
  v11 = 2164269066;
  *a5 = 0;
  v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v21 + 8), 1, 128);
  if (v12)
  {
    v13 = v12;
    v14 = v21;
    *v12 = v21;
    v12[1] = a3;
    if (!a3 || (v15 = *(_QWORD *)(a3 + 48)) == 0)
      v15 = *(_QWORD *)(v14 + 48);
    AddRefCountedObject = objc_GetAddRefCountedObject(v15, a4, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))Lookup_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, _OWORD *))Lookup_ObjcVoiceClose, v14, &v20);
    if ((AddRefCountedObject & 0x80000000) != 0
      || (v13[2] = *(_QWORD *)(v20 + 32),
          AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)),
          (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0)
      || (AddRefCountedObject = brk_InterfaceQuery(*(_QWORD *)(v21 + 24)), (AddRefCountedObject & 0x80000000) != 0))
    {
      v11 = AddRefCountedObject;
    }
    else
    {
      v17 = (*(uint64_t (**)(_WORD *, uint64_t, _QWORD, _QWORD, _QWORD *))(v13[5] + 32))(a1, a2, *(_QWORD *)(v13[2] + 336), *(unsigned int *)(v13[2] + 344), v13 + 3);
      v18 = heap_Alloc(*(_QWORD *)(*v13 + 8), 44100);
      v13[9] = v18;
      if (v18)
      {
        v13[10] = 22050;
        *((_DWORD *)v13 + 22) = 0;
        v11 = v17;
        if ((v17 & 0x80000000) == 0)
        {
          v11 = v17;
LABEL_18:
          *a5 = (uint64_t)v13;
          return v11;
        }
      }
    }
    *a5 = (uint64_t)v13;
    Lookup_ObjClose(a5);
    v13 = 0;
    goto LABEL_18;
  }
  return v11;
}

uint64_t Lookup_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t ChunkData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  void *v71;
  uint64_t v72;
  void **v73;
  _QWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *__dst;
  unsigned int v80;
  unsigned int __n[3];
  char __s1[4];
  char v83;
  int v84[2];
  uint64_t v85;
  char __s2[256];
  char v87[256];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v84 = 0;
  v85 = 0;
  v83 = 0;
  *(_DWORD *)__s1 = 0;
  memset(__n, 0, sizeof(__n));
  inited = InitRsrcFunction(a1, a2, &v85);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = 2164269066;
  v10 = (char *)heap_Calloc(*(_QWORD **)(v85 + 8), 1, 592);
  if (v10)
  {
    v11 = v10;
    cstdlib_strcpy(v10, a3);
    *((_QWORD *)v11 + 44) = 0;
    v11[528] = 0;
    *((_QWORD *)v11 + 55) = 0x2800000014;
    *((_DWORD *)v11 + 112) = 40;
    ChunkData = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "VFNT", 1031, (uint64_t *)v84);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_72;
    v20 = ssftriff_reader_OpenChunk(*(uint64_t *)v84, (__int32 *)__s1, __n, 0, v16, v17, v18, v19);
    if ((v20 & 0x80000000) == 0)
    {
      __dst = v11 + 256;
      do
      {
        if (cstdlib_strcmp(__s1, "VINF"))
        {
          if (cstdlib_strcmp(__s1, "VFFP"))
          {
            if (!cstdlib_strcmp(__s1, "CODR"))
            {
              ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v31, v32, v33, v34, v35);
              if ((ChunkData & 0x80000000) != 0)
                goto LABEL_72;
              v71 = (void *)heap_Alloc(*(_QWORD *)(v85 + 8), __n[0]);
              *((_QWORD *)v11 + 42) = v71;
              if (!v71)
                goto LABEL_73;
              cstdlib_memcpy(v71, *(const void **)&__n[1], __n[0]);
              *((_DWORD *)v11 + 86) = __n[0];
              goto LABEL_65;
            }
            if (cstdlib_strcmp(__s1, "CTUN"))
            {
              if (!cstdlib_strcmp(__s1, "UNIT"))
              {
                v72 = *(_QWORD *)v84;
                v74 = v11 + 368;
                v73 = (void **)(v11 + 360);
                goto LABEL_50;
              }
              if (cstdlib_strcmp(__s1, "UOP1"))
              {
                if (!cstdlib_strcmp(__s1, "UOP2"))
                {
                  *(_QWORD *)v87 = 0;
                  ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v84, (void **)v11 + 49, v87, v46, v47, v48, v49, v50);
                  if ((ChunkData & 0x80000000) != 0)
                    goto LABEL_72;
                  v75 = *(_DWORD **)v87;
                  *((_DWORD *)v11 + 100) = **(_DWORD **)v87;
                  v76 = v75[1];
                  *((_DWORD *)v11 + 101) = v76;
                  v75 += 2;
                  *((_QWORD *)v11 + 51) = v75;
                  *((_QWORD *)v11 + 52) = &v75[v76];
                  goto LABEL_65;
                }
                if (cstdlib_strcmp(__s1, "UOP3"))
                {
                  if (!cstdlib_strcmp(__s1, "WPAR"))
                  {
                    ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v51, v52, v53, v54, v55);
                    if ((ChunkData & 0x80000000) != 0)
                      goto LABEL_72;
                    *((_DWORD *)v11 + 110) = **(_DWORD **)&__n[1];
                    goto LABEL_65;
                  }
                  if (!cstdlib_strcmp(__s1, "PPAR"))
                  {
                    ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v56, v57, v58, v59, v60);
                    if ((ChunkData & 0x80000000) != 0)
                      goto LABEL_72;
                    v77 = *(_QWORD *)&__n[1];
                    *((_DWORD *)v11 + 111) = **(_DWORD **)&__n[1];
                    *((_DWORD *)v11 + 112) = *(_DWORD *)(v77 + 4);
                    goto LABEL_65;
                  }
                  if (!cstdlib_strcmp(__s1, "PMPP"))
                  {
                    v72 = *(_QWORD *)v84;
                    v74 = v11 + 464;
                    v73 = (void **)(v11 + 456);
                    goto LABEL_50;
                  }
                  if (!cstdlib_strcmp(__s1, "PMBO"))
                  {
                    v72 = *(_QWORD *)v84;
                    v74 = v11 + 480;
                    v73 = (void **)(v11 + 472);
LABEL_50:
                    ChunkData = ssftriff_reader_DetachChunkData(v72, v73, v74, v41, v42, v43, v44, v45);
                    if ((ChunkData & 0x80000000) != 0)
                      goto LABEL_72;
                    goto LABEL_65;
                  }
                  if (cstdlib_strcmp(__s1, "PMUO"))
                  {
                    if (cstdlib_strcmp(__s1, "PMUD"))
                    {
                      if (cstdlib_strcmp(__s1, "SPCH"))
                      {
                        log_OutText(*(_QWORD *)(v85 + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"Unknown data: %s for %s", v61, v62, v63, (uint64_t)__s1);
                      }
                      else
                      {
                        *((_DWORD *)v11 + 130) = ssftriff_reader_GetPosition(*(uint64_t *)v84);
                        *((_DWORD *)v11 + 131) = __n[0];
                      }
                    }
                    else
                    {
                      *((_DWORD *)v11 + 129) = ssftriff_reader_GetPosition(*(uint64_t *)v84);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v11 + 128) = ssftriff_reader_GetPosition(*(uint64_t *)v84);
                  }
                }
                else
                {
                  *((_DWORD *)v11 + 127) = ssftriff_reader_GetPosition(*(uint64_t *)v84);
                  *((_QWORD *)v11 + 54) = 1;
                }
              }
              else
              {
                *((_DWORD *)v11 + 126) = ssftriff_reader_GetPosition(*(uint64_t *)v84);
                *((_QWORD *)v11 + 48) = 1;
              }
            }
            else
            {
              ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v36, v37, v38, v39, v40);
              *((_DWORD *)v11 + 82) = **(_DWORD **)&__n[1];
            }
          }
          else
          {
            ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v26, v27, v28, v29, v30);
            v70 = (_BYTE *)heap_Alloc(*(_QWORD *)(v85 + 8), __n[0]);
            *((_QWORD *)v11 + 44) = v70;
            if (!v70)
              goto LABEL_73;
            ssftriff_reader_ReadStringZ(*(uint64_t *)v84, *(uint64_t *)&__n[1], __n[0], 0, v70, __n);
          }
        }
        else
        {
          v80 = 0;
          ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v84, __n[0], &__n[1], v21, v22, v23, v24, v25);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_72;
          v64 = __n[0];
          if (__n[0])
          {
            v65 = 0;
            while (1)
            {
              __s2[0] = 0;
              v87[0] = 0;
              v80 = 256;
              ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v84, *(uint64_t *)&__n[1], v64, v65, v87, &v80);
              if ((ChunkData & 0x80000000) == 0)
              {
                v14 = __n[0];
                if (v65 < __n[0])
                {
                  v65 += v80;
                  v80 = 256;
                  ChunkData = ssftriff_reader_ReadStringZ(*(uint64_t *)v84, *(uint64_t *)&__n[1], __n[0], v65, __s2, &v80);
                }
              }
              if ((ChunkData & 0x80000000) != 0)
                break;
              v66 = v80;
              if (cstdlib_strcmp(v87, "Freq"))
              {
                if (cstdlib_strcmp(v87, "AvgSpeed"))
                {
                  if (cstdlib_strcmp(v87, "DurSizeBits"))
                  {
                    if (cstdlib_strcmp(v87, "GUID") && cstdlib_strcmp(v87, "ComponentID"))
                    {
                      if (!cstdlib_strcmp(v87, "Coder"))
                      {
                        if (!__s2[0])
                        {
                          log_OutText(*(_QWORD *)(v85 + 32), (uint64_t)"LOOKUP", 1, 0, (uint64_t)"undefined coder for (Genius) synth data %s: %s", v67, v68, v69, (uint64_t)a3);
                          ChunkData = 2164269081;
                          break;
                        }
                        cstdlib_strcpy(__dst, "decoder/");
                        cstdlib_strcat(__dst, __s2);
                      }
                    }
                    else
                    {
                      cstdlib_strcpy(v11 + 528, __s2);
                    }
                  }
                  else
                  {
                    *((_WORD *)v11 + 162) = (unsigned __int16)LH_atou(__s2);
                  }
                }
                else
                {
                  *((_WORD *)v11 + 161) = (unsigned __int16)LH_atou(__s2);
                }
              }
              else
              {
                *((_WORD *)v11 + 160) = (unsigned __int16)LH_atou(__s2);
              }
              v65 += v66;
              log_OutText(*(_QWORD *)(v85 + 32), (uint64_t)"LOOKUP", 3, 0, (uint64_t)"VF attribute %s=%s", v67, v68, v69, (uint64_t)v87);
              v64 = __n[0];
              if (v65 >= __n[0])
                goto LABEL_65;
            }
LABEL_72:
            v9 = ChunkData;
LABEL_73:
            if (*(_QWORD *)v84)
              ssftriff_reader_ObjClose(*(_QWORD **)v84, v13, v14, v15, v16, v17, v18, v19);
            goto LABEL_75;
          }
        }
LABEL_65:
        ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v84);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_72;
        v20 = ssftriff_reader_OpenChunk(*(uint64_t *)v84, (__int32 *)__s1, __n, 0, v16, v17, v18, v19);
      }
      while ((v20 & 0x80000000) == 0);
    }
    v9 = v20;
    if ((v20 & 0x1FFF) != 0x14)
      goto LABEL_73;
    v9 = ssftriff_reader_ObjClose(*(_QWORD **)v84, v13, v14, v15, v16, v17, v18, v19);
    *(_QWORD *)v84 = 0;
    if ((v9 & 0x80000000) != 0)
    {
LABEL_75:
      *(_QWORD *)(a4 + 32) = v11;
      Lookup_ObjcVoiceClose(a1, a2, a4);
      *(_QWORD *)(a4 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v11;
    }
  }
  return v9;
}

uint64_t Lookup_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;

  v3 = *(_QWORD **)(a3 + 32);
  v22 = 0;
  inited = InitRsrcFunction(a1, a2, &v22);
  if ((inited & 0x80000000) == 0)
  {
    v11 = v3[42];
    if (v11)
    {
      heap_Free(*(_QWORD **)(v22 + 8), v11);
      v3[42] = 0;
    }
    v12 = v3[44];
    if (v12)
    {
      heap_Free(*(_QWORD **)(v22 + 8), v12);
      v3[44] = 0;
    }
    v13 = (_QWORD *)v3[45];
    if (v13)
      inited = ssftriff_reader_ReleaseChunkData(v13, v12, v4, v5, v6, v7, v8, v9);
    v14 = (_QWORD *)v3[47];
    if (v14)
      inited = ssftriff_reader_ReleaseChunkData(v14, v12, v4, v5, v6, v7, v8, v9);
    v15 = (_QWORD *)v3[49];
    if (v15)
      inited = ssftriff_reader_ReleaseChunkData(v15, v12, v4, v5, v6, v7, v8, v9);
    v16 = (_QWORD *)v3[53];
    if (v16)
      inited = ssftriff_reader_ReleaseChunkData(v16, v12, v4, v5, v6, v7, v8, v9);
    v17 = (_QWORD *)v3[57];
    if (v17)
      inited = ssftriff_reader_ReleaseChunkData(v17, v12, v4, v5, v6, v7, v8, v9);
    v18 = (_QWORD *)v3[59];
    if (v18)
      inited = ssftriff_reader_ReleaseChunkData(v18, v12, v4, v5, v6, v7, v8, v9);
    v19 = (_QWORD *)v3[61];
    if (v19)
      inited = ssftriff_reader_ReleaseChunkData(v19, v12, v4, v5, v6, v7, v8, v9);
    v20 = (_QWORD *)v3[62];
    if (v20)
      inited = ssftriff_reader_ReleaseChunkData(v20, v12, v4, v5, v6, v7, v8, v9);
    heap_Free(*(_QWORD **)(v22 + 8), (uint64_t)v3);
  }
  return inited;
}

uint64_t Lookup_ObjClose(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if (v3)
  {
    heap_Free(*(_QWORD **)(*(_QWORD *)v2 + 8), v3);
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
  }
  v4 = *(_QWORD *)(v2 + 40);
  if (v4 && (v5 = *(_QWORD *)(v2 + 24)) != 0)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 40))(v5, *(_QWORD *)(v2 + 32));
    if ((v6 & 0x80000000) != 0)
      return v6;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v2 + 8);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 48)) == 0)
      v9 = *(_QWORD *)(*(_QWORD *)v2 + 48);
    objc_ReleaseObject(v9, v7);
  }
  v10 = *(_QWORD *)(v2 + 48);
  if (!v10 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v10), (v6 & 0x80000000) == 0))
  {
    v11 = *(_QWORD *)(v2 + 96);
    if (!v11 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v11), (v6 & 0x80000000) == 0))
    {
      v12 = *(_QWORD *)(v2 + 104);
      if (!v12 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v12), (v6 & 0x80000000) == 0))
      {
        v13 = *(_QWORD *)(v2 + 112);
        if (!v13 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v13), (v6 & 0x80000000) == 0))
        {
          v14 = *(_QWORD *)(v2 + 120);
          if (!v14 || (v6 = brk_DataClose(*(_QWORD *)(*(_QWORD *)v2 + 24), v14), (v6 & 0x80000000) == 0))
          {
            v15 = *(_QWORD *)(v2 + 40);
            if (!v15 || (v6 = brk_InterfaceRelease(*(_QWORD *)(*(_QWORD *)v2 + 24), v15), (v6 & 0x80000000) == 0))
            {
              heap_Free(*(_QWORD **)(*(_QWORD *)v2 + 8), v2);
              *a1 = 0;
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t Lookup_Init(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  v9 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, int *, int *, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 40)
                                                                                              + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), &v11, &v10, 0, (char *)&v9 + 4, &v9);
  if ((result & 0x80000000) == 0)
  {
    v5 = v9;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_DWORD *)(v6 + 524);
    if ((int)v9 + HIDWORD(v9) > v7)
    {
      v5 = v7 - HIDWORD(v9);
      LODWORD(v9) = v7 - HIDWORD(v9);
    }
    result = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), (*(_DWORD *)(v6 + 520) + HIDWORD(v9)), v5, a1 + 56);
    if ((result & 0x80000000) == 0)
    {
      v8 = v9;
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 68) = v8;
    }
  }
  return result;
}

uint64_t Lookup_Init_II(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 40)
                                                                                                  + 104))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2, a3, 0, (char *)&v6 + 4, &v6);
  if ((result & 0x80000000) == 0)
  {
    if ((_DWORD)v6)
    {
      result = brk_DataMap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 520) + HIDWORD(v6)), v6, a1 + 56);
      if ((result & 0x80000000) != 0)
        return result;
      v5 = v6;
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 68) = v5;
  }
  return result;
}

uint64_t Lookup_DeInit(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1[7];
  if (!v1)
    return 0;
  result = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[6], v1);
  a1[7] = 0;
  return result;
}

uint64_t Lookup_Decode(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (!*a2)
    return 0;
  result = 2164269063;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v5)
    return 2164269073;
  if (!(*a2 >> 30))
  {
    v8 = *(unsigned int *)(a1 + 64);
    v7 = *(_DWORD *)(a1 + 68);
    v10 = *a2;
    v11 = v7;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *, uint64_t, int *))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v5 + v8, &v11, a3, &v10);
    *a2 = v10;
    v9 = *(_DWORD *)(a1 + 68) - v11;
    *(_DWORD *)(a1 + 64) += v11;
    *(_DWORD *)(a1 + 68) = v9;
  }
  return result;
}

uint64_t Lookup_GetDecodedData(uint64_t a1, unsigned int a2, unsigned int a3, void *__dst)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v21;

  v8 = *(_DWORD *)(a1 + 84);
  if (v8 <= a2
    && (v9 = *(_DWORD *)(a1 + 88), v10 = v9 + v8, v9 + v8 >= a2)
    && (v11 = a3 + a2, *(_DWORD *)(a1 + 80) + v8 >= a3 + a2)
    && *(_QWORD *)(a1 + 56))
  {
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
    {
      v14 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(a1 + 48), v13);
      *(_QWORD *)(a1 + 56) = 0;
      if ((v14 & 0x80000000) != 0)
        return v14;
    }
    v15 = *(_DWORD *)(a1 + 80);
    if (v15 < a3)
    {
      v16 = *(_QWORD *)(a1 + 72);
      if (v16)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v16);
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
      }
      v17 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 2 * a3);
      *(_QWORD *)(a1 + 72) = v17;
      if (!v17)
        return 2164269066;
      *(_DWORD *)(a1 + 80) = a3;
      v15 = a3;
    }
    *(_DWORD *)(a1 + 84) = a2;
    *(_DWORD *)(a1 + 88) = 0;
    v12 = Lookup_Init(a1, a2, v15);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v8 = *(_DWORD *)(a1 + 84);
    v9 = *(_DWORD *)(a1 + 88);
    v11 = a3 + a2;
    v10 = v9 + v8;
  }
  v18 = v11 >= v10;
  v19 = v11 - v10;
  if (v19 == 0 || !v18)
    goto LABEL_19;
  v21 = v19;
  v12 = Lookup_Decode(a1, &v21, *(_QWORD *)(a1 + 72) + 2 * v9);
  if ((v12 & 0x80000000) == 0)
  {
    v8 = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 88) += v21;
LABEL_19:
    cstdlib_memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 72) + 2 * (a2 - v8)), 2 * a3);
  }
  return v12;
}

uint64_t Lookup_GetUnitData(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__src;

  *(_DWORD *)a3 = a2;
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 368);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8 * a2);
    *(_DWORD *)(a3 + 4) = v6 & 0x7FFFFFFF;
    if (*(_WORD *)(v4 + 324) == 32)
    {
      v7 = *(_DWORD *)(v5 + 8 * a2 + 4);
    }
    else
    {
      *(_DWORD *)(a3 + 8) = 0;
      v12 = v5 + 8 * a2;
      v13 = *(unsigned __int8 *)(v12 + 5) >> 4;
      *(_DWORD *)(a3 + 8) = v13;
      v7 = v13 | (16 * *(unsigned __int8 *)(v12 + 4));
    }
    *(_DWORD *)(a3 + 8) = v7;
    result = 0;
    *(_BYTE *)(a3 + 12) = v6 < 0;
    return result;
  }
  if (*(_QWORD *)(v4 + 384))
  {
    __src = 0;
    result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[12], *(_DWORD *)(v4 + 504) + 6 * a2, 6, (uint64_t)&__src);
    if ((result & 0x80000000) == 0 && __src)
    {
      cstdlib_memmove((void *)(a3 + 4), __src, 4uLL);
      v10 = *(_DWORD *)(a3 + 4);
      *(_BYTE *)(a3 + 12) = v10 < 0;
      *(_DWORD *)(a3 + 4) = v10 & 0x7FFFFFFF;
      v11 = __src;
      *(_DWORD *)(a3 + 8) = *((unsigned __int16 *)__src + 2);
      return brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[12], (uint64_t)v11);
    }
    return result;
  }
  v14 = *(_QWORD *)(v4 + 408);
  if (v14)
  {
    result = 0;
    v15 = *(_DWORD *)(v4 + 400);
    v16 = *(_QWORD *)(v4 + 416);
    v17 = *(_DWORD *)(v14 + 4 * (a2 / v15)) + *(unsigned __int16 *)(v16 + 2 * a2);
    *(_DWORD *)(a3 + 4) = v17;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v14 + 4 * ((a2 + 1) / v15)) - v17 + *(unsigned __int16 *)(v16 + 2 * (a2 + 1));
LABEL_13:
    *(_BYTE *)(a3 + 12) = 0;
    return result;
  }
  if (!*(_QWORD *)(v4 + 432))
    return 0;
  __src = 0;
  result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[13], *(_DWORD *)(v4 + 508) + 4 * a2, 4, (uint64_t)&__src);
  if ((result & 0x80000000) == 0)
  {
    v18 = __src;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)__src;
    result = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[13], (uint64_t)v18);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a3 + 8) = 0;
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t Lookup_Freq(uint64_t a1, _WORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_WORD *)(v2 + 320);
  if (*(_WORD *)(v2 + 320))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_AvgSpeed(uint64_t a1, _WORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_WORD *)(v2 + 322);
  if (*(_WORD *)(v2 + 322))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_NrUnits(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = *(_DWORD *)(v2 + 328);
  if (*(_DWORD *)(v2 + 328))
    return 0;
  else
    return 2164269057;
}

uint64_t Lookup_Fingerprint(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int v10;
  char *i;
  char *v12;
  const char *v13;
  unint64_t v14;
  _BOOL4 v15;
  BOOL v16;

  v6 = 2164269057;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(const char **)(v7 + 352);
  if (v8)
  {
    if (cstdlib_strlen(v8) >= a3)
      v6 = 2164269057;
    else
      v6 = 0;
    cstdlib_strncpy(a2, *(const char **)(*(_QWORD *)(a1 + 16) + 352), a3);
  }
  else
  {
    v10 = *(_DWORD *)(v7 + 328);
    if (IsThisUrlOrRealPath((char *)v7, 0, 0))
    {
      if (SplitpathOrUrl(v7, 0, 0, 0, a2, 0))
      {
        for (i = a2; ; ++i)
        {
          if (*i == 95)
          {
            *i = 47;
          }
          else if (!*i)
          {
            goto LABEL_19;
          }
        }
      }
      return 2164269063;
    }
    else
    {
      v12 = cstdlib_strchr((char *)v7, 58);
      if (v12)
        v13 = v12 + 1;
      else
        v13 = (const char *)v7;
      cstdlib_strncpy(a2, v13, a3);
LABEL_19:
      LODWORD(v14) = cstdlib_strlen(a2);
      v15 = v14 < a3;
      if (v14 < a3 && v10)
      {
        v14 = v14;
        do
        {
          a2[v14++] = (v10 % 0xA) | 0x30;
          v15 = v14 < a3;
          if (v14 >= a3)
            break;
          v16 = v10 > 9;
          v10 /= 0xAu;
        }
        while (v16);
      }
      if (v15)
      {
        v6 = 0;
        a2[v14] = 0;
      }
    }
  }
  return v6;
}

uint64_t Lookup_GetComponentID(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 2164269074;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 16) + 528;
  return result;
}

uint64_t Lookup_HasSupportForWsola(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 440);
  if (!v2)
    return 0;
  *a2 = v2;
  return 1;
}

uint64_t Lookup_HasSupportForPsola(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = *(_QWORD *)(result + 16);
    if (v3 && *(_QWORD *)(v3 + 464))
    {
      *a2 = *(_DWORD *)(v3 + 444);
      *a3 = *(_DWORD *)(v3 + 448);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Lookup_UnitPeriInfo(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  unsigned int v21;
  unsigned __int16 v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!*(_QWORD *)(a1[2] + 464))
    return 2164269076;
  v30 = 0;
  v29 = 0;
  *(_QWORD *)a3 = 0;
  v6 = a3 + 8;
  writeToPeriVec(a3 + 8, 0, 0);
  v7 = a1[2];
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 464) + 52);
  if (v8)
  {
    v31 = v8 * (a2 >> 10);
    unpackU32(&v30, *(_QWORD *)(v7 + 480), &v31, v8);
  }
  else
  {
    v30 = 0;
  }
  if ((a2 & 0x3FF) != 0)
  {
    v10 = a1[2];
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 464) + 56);
    v31 = v11 * (a2 - 1);
    v12 = unpackU32_Offline((int *)&v29 + 1, *(_DWORD *)(v10 + 512), *(_QWORD *)(*a1 + 24), a1[14], (unsigned int *)&v31, v11);
    if ((v12 & 0x80000000) != 0)
      return v12;
    v13 = a1[2];
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 464) + 56);
  }
  else
  {
    HIDWORD(v29) = 0;
    v13 = a1[2];
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 464) + 56);
    v31 = v14 * a2;
  }
  v9 = unpackU32_Offline((int *)&v29, *(_DWORD *)(v13 + 512), *(_QWORD *)(*a1 + 24), a1[14], (unsigned int *)&v31, v14);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v15 = v29 - HIDWORD(v29);
  if ((_DWORD)v29 == HIDWORD(v29))
    return v9;
  v28 = 0;
  v12 = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[15], (*(_DWORD *)(a1[2] + 516) + HIDWORD(v29) + v30), (v29 - HIDWORD(v29)), (uint64_t)&v28);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v16 = v28;
  v17 = *(_DWORD **)(a1[2] + 464);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  LODWORD(v26) = 0;
  unpackU32((int *)&v32, v28, &v26, v17[5]);
  writeToPeriVec(v6, 0, v17[4] + v32);
  v18 = v17[7];
  if (v18)
  {
    unpackU32((int *)&v32, v16, &v26, v18);
    v19 = v17[6] + v32;
  }
  else
  {
    LOWORD(v19) = 0;
  }
  v25 = a2;
  *(_WORD *)a3 = v19;
  v21 = v17[12];
  if (v15 <= (v26 + v21 + v17[11] - 1) >> 3)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    do
    {
      unpackU32((int *)&v33 + 1, v16, &v26, v21);
      unpackU32((int *)&v34 + 1, v16, &v26, v17[11]);
      for (; HIDWORD(v33); --HIDWORD(v33))
      {
        writeToPeriVec(a3 + 56, v22, SWORD2(v34));
        if (v22)
          writeToPeriVec(v6, v22, *(_WORD *)(*(_QWORD *)(a3 + 16) + 2 * (v22 - 1)) + v23);
        unpackU32((int *)&v34, v16, &v26, 1u);
        if ((_DWORD)v34)
        {
          if (v17[10] && (unpackU32((int *)&v34, v16, &v26, 1u), !(_DWORD)v34))
          {
            unpackS32((int *)&v32 + 1, v16, &v26, v17[10]);
            LOWORD(v24) = v23 + WORD2(v32);
          }
          else
          {
            unpackU32((int *)&v33, v16, &v26, v17[9]);
            v24 = v17[8] + v33;
          }
          writeToPeriVec(a3 + 32, v22, v24);
          v23 = *(_WORD *)(*(_QWORD *)(a3 + 40) + 2 * v22);
        }
        else
        {
          writeToPeriVec(a3 + 32, v22, v23);
        }
        ++v22;
      }
      v21 = v17[12];
    }
    while (v15 > (v26 + v21 + v17[11] - 1) >> 3);
  }
  *(_WORD *)(a3 + 2) = v22;
  v9 = brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[15], v28);
  if ((v9 & 0x80000000) == 0 && !*(_DWORD *)(*(_QWORD *)(a1[2] + 464) + 28))
  {
    v26 = 0;
    v27 = 0;
    Lookup_GetUnitData(a1, v25, (uint64_t)&v26);
    *(_WORD *)a3 = v27;
  }
  return v9;
}

uint64_t writeToPeriVec(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(unsigned int *)(a1 + 16);
  if (v6 <= a2)
  {
    result = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 8), 2 * v6 + 300);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 16) += 150;
  }
  else
  {
    result = *(_QWORD *)(a1 + 8);
  }
  *(_WORD *)(result + 2 * a2) = a3;
  return result;
}

uint64_t lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &ILookup_0;
  return result;
}

uint64_t Pmk_Lookup_ObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t inited;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AddRefCountedObject;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a5 = 0;
  v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v17 + 8), 1, 40);
  if (v9)
  {
    v10 = v9;
    v11 = v17;
    *v9 = v17;
    v9[1] = a3;
    if (!a3 || (v12 = *(_QWORD *)(a3 + 48)) == 0)
      v12 = *(_QWORD *)(v11 + 48);
    AddRefCountedObject = objc_GetAddRefCountedObject(v12, a4, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _OWORD *, uint64_t))Pmk_Lookup_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, _OWORD *))Pmk_Lookup_ObjcVoiceClose, v11, &v16);
    if ((AddRefCountedObject & 0x80000000) != 0
      || (v10[2] = *(_QWORD *)(v16 + 32),
          AddRefCountedObject = brk_DataOpen(*(_QWORD *)(v17 + 24)),
          (AddRefCountedObject & 0x80000000) != 0))
    {
      v14 = AddRefCountedObject;
    }
    else
    {
      v14 = brk_DataOpen(*(_QWORD *)(v17 + 24));
      if ((v14 & 0x80000000) == 0)
      {
LABEL_14:
        *a5 = v10;
        return v14;
      }
    }
    *a5 = v10;
    Pmk_Lookup_ObjClose((uint64_t)a5);
    v10 = 0;
    goto LABEL_14;
  }
  return 2164269066;
}

uint64_t Pmk_Lookup_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ChunkData;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  _DWORD *v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  int v66[2];
  char __s1[4];
  char v68;
  int v69[2];
  uint64_t v70;

  *(_QWORD *)v69 = 0;
  v70 = 0;
  v68 = 0;
  *(_DWORD *)__s1 = 0;
  *(_QWORD *)v66 = 0;
  v65 = 0;
  inited = InitRsrcFunction(a1, a2, &v70);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = heap_Calloc(*(_QWORD **)(v70 + 8), 1, 336);
  if (!v9)
    return 2164269066;
  v10 = v9;
  if (cstdlib_strlen(a3) > 0xFF)
    return 2164269065;
  cstdlib_strncpy((char *)v10, a3, 0xFFuLL);
  *(_QWORD *)(v10 + 264) = 0;
  *(_QWORD *)(v10 + 312) = 0;
  *(_QWORD *)(v10 + 320) = 0;
  *(_QWORD *)(v10 + 304) = 0;
  *(_WORD *)(v10 + 328) = -1;
  *(_BYTE *)(v10 + 330) = -1;
  v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "PIMK", 1031, (uint64_t *)v69);
  v19 = *(_QWORD **)v69;
  if ((v11 & 0x80000000) != 0)
    goto LABEL_52;
  for (i = ssftriff_reader_OpenChunk(*(uint64_t *)v69, (__int32 *)__s1, (unsigned int *)&v65, 0, v15, v16, v17, v18);
        (i & 0x80000000) == 0;
        i = ssftriff_reader_OpenChunk(*(uint64_t *)v69, (__int32 *)__s1, (unsigned int *)&v65, 0, v15, v16, v17, v18))
  {
    if (cstdlib_strcmp(__s1, "PMKH"))
    {
      if (!cstdlib_strcmp(__s1, "PMKF"))
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v69, v65, v66, v26, v27, v28, v29, v30);
        v53 = (_BYTE *)heap_Alloc(*(_QWORD *)(v70 + 8), v65);
        *(_QWORD *)(v10 + 320) = v53;
        if (!v53)
          return 2164269066;
LABEL_22:
        ssftriff_reader_ReadStringZ(*(uint64_t *)v69, *(uint64_t *)v66, v65, 0, v53, (unsigned int *)&v65);
        goto LABEL_23;
      }
      if (!cstdlib_strcmp(__s1, "PMKP"))
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v69, v65, v66, v31, v32, v33, v34, v35);
        v53 = (_BYTE *)heap_Alloc(*(_QWORD *)(v70 + 8), v65);
        *(_QWORD *)(v10 + 312) = v53;
        if (!v53)
          return 2164269066;
        goto LABEL_22;
      }
      if (cstdlib_strcmp(__s1, "PMFD"))
      {
        if (cstdlib_strcmp(__s1, "PMPP"))
        {
          if (cstdlib_strcmp(__s1, "PMBO"))
          {
            if (cstdlib_strcmp(__s1, "PMUO"))
            {
              if (!cstdlib_strcmp(__s1, "PMUD"))
                *(_DWORD *)(v10 + 296) = ssftriff_reader_GetPosition(*(uint64_t *)v69);
            }
            else
            {
              *(_DWORD *)(v10 + 300) = ssftriff_reader_GetPosition(*(uint64_t *)v69);
            }
          }
          else
          {
            ChunkData = ssftriff_reader_DetachChunkData(*(uint64_t *)v69, (void **)(v10 + 272), (_QWORD *)(v10 + 280), v46, v47, v48, v49, v50);
            if ((ChunkData & 0x80000000) != 0)
            {
LABEL_50:
              v11 = ChunkData;
              goto LABEL_51;
            }
          }
        }
        else
        {
          ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v69, v65, v66, v41, v42, v43, v44, v45);
          if ((ChunkData & 0x80000000) != 0)
            goto LABEL_50;
          v57 = (_DWORD *)heap_Alloc(*(_QWORD *)(v70 + 8), 60);
          *(_QWORD *)(v10 + 264) = v57;
          if (!v57)
            return 2164269066;
          v58 = *(unsigned __int8 *)(v10 + 328);
          if (v58 > 3)
          {
            v11 = 2164269081;
LABEL_51:
            v19 = *(_QWORD **)v69;
LABEL_52:
            if (v19)
              ssftriff_reader_ObjClose(v19, v12, v13, v14, v15, v16, v17, v18);
LABEL_54:
            *(_QWORD *)(a4 + 32) = v10;
            Pmk_Lookup_ObjcVoiceClose(a1, a2, a4);
            *(_QWORD *)(a4 + 32) = 0;
            return v11;
          }
          v59 = *(_DWORD **)v66;
          v60 = (_DWORD *)(*(_QWORD *)v66 + 4);
          *(_DWORD *)(v10 + 260) = **(_DWORD **)v66;
          if (v58 == 1 && !*(_BYTE *)(v10 + 329) && !*(_BYTE *)(v10 + 330))
          {
            v57[1] = v59[1];
            *v57 = v59[2];
            v57[3] = v59[3];
            v57[2] = v59[4];
            v60 = v59 + 5;
          }
          v57[5] = *v60;
          v57[4] = v60[1];
          v57[7] = v60[2];
          v57[6] = v60[3];
          v57[9] = v60[4];
          v57[8] = v60[5];
          v57[10] = v60[6];
          v57[11] = v60[7];
          v57[12] = v60[8];
          v57[13] = v60[9];
          v57[14] = v60[10];
        }
      }
      else
      {
        ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v69, v65, v66, v36, v37, v38, v39, v40);
        if ((ChunkData & 0x80000000) != 0)
          goto LABEL_50;
        v54 = heap_Calloc(*(_QWORD **)(v70 + 8), 9, 2);
        *(_QWORD *)(v10 + 304) = v54;
        if (!v54)
          return 2164269066;
        v55 = 0;
        v56 = *(_QWORD *)v66;
        do
        {
          *(_WORD *)(v54 + v55) = *(_WORD *)(v56 + v55);
          v55 += 2;
        }
        while (v55 != 18);
      }
    }
    else
    {
      ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v69, v65, v66, v21, v22, v23, v24, v25);
      if ((ChunkData & 0x80000000) != 0)
        goto LABEL_50;
      v52 = *(_BYTE **)v66;
      *(_BYTE *)(v10 + 328) = **(_BYTE **)v66;
      *(_BYTE *)(v10 + 329) = v52[1];
      *(_BYTE *)(v10 + 330) = v52[2];
      *(_BYTE *)(v10 + 256) = v52[3];
      *(_BYTE *)(v10 + 257) = v52[4];
      *(_BYTE *)(v10 + 258) = v52[5];
      *(_BYTE *)(v10 + 259) = v52[6];
    }
LABEL_23:
    ChunkData = ssftriff_reader_CloseChunk(*(uint64_t *)v69);
    if ((ChunkData & 0x80000000) != 0)
      goto LABEL_50;
  }
  v11 = i;
  v61 = i & 0x1FFF;
  v19 = *(_QWORD **)v69;
  if (v61 != 20)
    goto LABEL_52;
  v62 = ssftriff_reader_ObjClose(*(_QWORD **)v69, v12, v13, v14, v15, v16, v17, v18);
  v11 = v62;
  *(_QWORD *)v69 = 0;
  if ((v62 & 0x80000000) != 0)
    goto LABEL_54;
  if (*(_QWORD *)(v10 + 264))
    v63 = v62;
  else
    v63 = 2164269081;
  if ((v63 & 0x80000000) != 0)
  {
    v11 = v63;
    goto LABEL_54;
  }
  *(_QWORD *)(a4 + 32) = v10;
  return v11;
}

uint64_t Pmk_Lookup_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = *(_QWORD **)(a3 + 32);
  v19 = 0;
  inited = InitRsrcFunction(a1, a2, &v19);
  if ((inited & 0x80000000) == 0)
  {
    v12 = (_QWORD *)v3[34];
    if (v12)
      inited = ssftriff_reader_ReleaseChunkData(v12, v4, v5, v6, v7, v8, v9, v10);
    v13 = (_QWORD *)v3[36];
    if (v13)
      inited = ssftriff_reader_ReleaseChunkData(v13, v4, v5, v6, v7, v8, v9, v10);
    v14 = v3[40];
    if (v14)
      heap_Free(*(_QWORD **)(v19 + 8), v14);
    v15 = v3[39];
    if (v15)
      heap_Free(*(_QWORD **)(v19 + 8), v15);
    v16 = v3[38];
    if (v16)
      heap_Free(*(_QWORD **)(v19 + 8), v16);
    v17 = v3[33];
    if (v17)
      heap_Free(*(_QWORD **)(v19 + 8), v17);
    heap_Free(*(_QWORD **)(v19 + 8), (uint64_t)v3);
  }
  return inited;
}

uint64_t Pmk_Lookup_ObjClose(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = v2[1];
    if (!v4 || (v5 = *(_QWORD *)(v4 + 48)) == 0)
      v5 = *(_QWORD *)(*v2 + 48);
    objc_ReleaseObject(v5, v3);
  }
  v6 = v2[3];
  if (v6)
  {
    v7 = brk_DataClose(*(_QWORD *)(*v2 + 24), v6);
    if ((v7 & 0x80000000) != 0)
      return v7;
  }
  else
  {
    v7 = 0;
  }
  v8 = v2[4];
  if (!v8 || (v7 = brk_DataClose(*(_QWORD *)(*v2 + 24), v8), (v7 & 0x80000000) == 0))
  {
    heap_Free(*(_QWORD **)(*v2 + 8), (uint64_t)v2);
    *(_QWORD *)a1 = 0;
  }
  return v7;
}

uint64_t Pmk_Lookup_UnitPeriInfo(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = 0;
  v21 = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0;
  v5 = a1[2];
  if (*(_DWORD *)(v5 + 256) > a2)
  {
    v19 = 0;
    v18 = 0;
    v8 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 52);
    if (v8)
    {
      v20 = a2 / *(_DWORD *)(v5 + 260) * v8;
      unpackU32(&v19, *(_QWORD *)(v5 + 280), &v20, v8);
      v5 = a1[2];
    }
    else
    {
      v19 = 0;
    }
    if (a2 % *(_DWORD *)(v5 + 260))
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
      v20 = v9 * (a2 - 1);
      result = unpackU32_Offline((int *)&v18 + 1, *(_DWORD *)(v5 + 300), *(_QWORD *)(*a1 + 24), a1[4], (unsigned int *)&v20, v9);
      if ((result & 0x80000000) != 0)
        return result;
      v5 = a1[2];
      v10 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
    }
    else
    {
      HIDWORD(v18) = 0;
      v10 = *(_DWORD *)(*(_QWORD *)(v5 + 264) + 56);
      v20 = v10 * a2;
    }
    result = unpackU32_Offline((int *)&v18, *(_DWORD *)(v5 + 300), *(_QWORD *)(*a1 + 24), a1[4], (unsigned int *)&v20, v10);
    if ((result & 0x80000000) == 0)
    {
      v11 = v18 - HIDWORD(v18);
      if ((_DWORD)v18 != HIDWORD(v18))
      {
        result = brk_DataMap(*(_QWORD *)(*a1 + 24), a1[3], (*(_DWORD *)(a1[2] + 296) + HIDWORD(v18) + v19), (v18 - HIDWORD(v18)), (uint64_t)&v21);
        if ((result & 0x80000000) == 0)
        {
          v12 = v21;
          v13 = a1[2];
          v24 = 0;
          v25 = 0;
          v23 = 0;
          v22 = 0;
          v14 = *(_DWORD **)(v13 + 264);
          if (*(_BYTE *)(v13 + 328) == 1 && !*(_BYTE *)(v13 + 329) && !*(_BYTE *)(v13 + 330))
          {
            unpackU32(&v22, v21, (_DWORD *)&v25 + 1, v14[1]);
            unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[3]);
          }
          unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[5]);
          *(_WORD *)(a3 + 8) = v14[4] + v22;
          unpackU32(&v22, v12, (_DWORD *)&v25 + 1, v14[7]);
          *(_WORD *)a3 = v14[6] + v22;
          v15 = v14[12];
          if (v11 <= (HIDWORD(v25) + v15 + v14[11] - 1) >> 3)
          {
            v16 = 0;
          }
          else
          {
            v16 = 0;
            LOWORD(v17) = 0;
            do
            {
              unpackU32((int *)&v24, v12, (_DWORD *)&v25 + 1, v15);
              unpackU32((int *)&v25, v12, (_DWORD *)&v25 + 1, v14[11]);
              for (; (_DWORD)v24; LODWORD(v24) = v24 - 1)
              {
                *(_WORD *)(a3 + 2 * v16 + 40008) = v25;
                if (v16)
                  *(_WORD *)(a3 + 8 + 2 * v16) = *(_WORD *)(a3 + 8 + 2 * (v16 - 1)) + v17;
                unpackU32((int *)&v24 + 1, v12, (_DWORD *)&v25 + 1, 1u);
                if (HIDWORD(v24))
                {
                  if (v14[10] && (unpackU32((int *)&v24 + 1, v12, (_DWORD *)&v25 + 1, 1u), !HIDWORD(v24)))
                  {
                    unpackS32((int *)&v23, v12, (_DWORD *)&v25 + 1, v14[10]);
                    LOWORD(v17) = v17 + v23;
                  }
                  else
                  {
                    unpackU32((int *)&v23 + 1, v12, (_DWORD *)&v25 + 1, v14[9]);
                    v17 = v14[8] + HIDWORD(v23);
                  }
                }
                *(_WORD *)(a3 + 2 * v16++ + 20008) = v17;
              }
              v15 = v14[12];
            }
            while (v11 > (HIDWORD(v25) + v15 + v14[11] - 1) >> 3);
          }
          *(_WORD *)(a3 + 2) = v16;
          return brk_DataUnmap(*(_QWORD *)(*a1 + 24), a1[3], v21);
        }
      }
    }
  }
  return result;
}

uint64_t Pmk_Lookup_Preamble(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 312);
  return 0;
}

uint64_t Pmk_Lookup_Deciles(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 304);
  return 0;
}

uint64_t Pmk_Lookup_Fingerprint(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 320);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 320))
    return 0;
  else
    return 2164269057;
}

uint64_t pmk_lookup_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2164269057;
  result = 0;
  *a2 = &IPmkLookup;
  return result;
}

uint64_t packU32(unsigned int a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  if (a4)
  {
    v4 = *a3 + a4;
    v5 = (unint64_t)(v4 - 1) >> 3;
    v6 = ((_BYTE)v4 - 1) & 7;
    if (v6 + 1 < a4)
      v7 = v6 + 1;
    else
      v7 = a4;
    *(_BYTE *)(a2 + v5) += (a1 & ~(-1 << v7)) << (-(char)v4 & 7);
    v8 = a1 >> v7;
    if (a1 >> v7)
    {
      v9 = v5 - 1;
      do
      {
        *(_BYTE *)(a2 + v9--) += v8;
        v10 = v8 > 0xFF;
        v8 >>= 8;
      }
      while (v10);
    }
    *a3 += a4;
  }
  return 0;
}

uint64_t packS32(unsigned int a1, uint64_t a2, _DWORD *a3, int a4)
{
  unsigned int v7;

  v7 = a1;
  if ((a1 & 0x80000000) != 0)
  {
    packU32(1u, a2, a3, 1u);
    v7 = -v7;
  }
  else
  {
    ++*a3;
  }
  packU32(v7, a2, a3, a4 - 1);
  return 0;
}

uint64_t unpackU32_Offline(int *a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  unsigned int v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 *v23;

  v23 = 0;
  if (a6)
  {
    v10 = *a5;
    *a5 += a6;
    result = brk_DataMap(a3, a4, a2 + (v10 >> 3), 4, (uint64_t)&v23);
    if (!(_DWORD)result)
    {
      v12 = 8 - (v10 & 7);
      if (v12 >= a6)
        v13 = a6;
      else
        v13 = 8 - (v10 & 7);
      v14 = (uint64_t)v23;
      v15 = (*v23 >> (v12 - v13)) & ~(-1 << v13);
      *a1 = v15;
      v16 = a6 - v13;
      v17 = a6 - v13 - 8;
      if (a6 - v13 < 8)
      {
        v18 = 1;
        if (!v16)
          return brk_DataUnmap(a3, a4, v14);
      }
      else
      {
        v18 = (v17 >> 3) + 2;
        v19 = (unsigned __int8 *)(v14 + 1);
        v20 = (v17 >> 3) + 1;
        do
        {
          *a1 = v15 << 8;
          v21 = *v19++;
          v15 = v21 | (v15 << 8);
          *a1 = v15;
          v16 -= 8;
          --v20;
        }
        while (v20);
        if (!v16)
          return brk_DataUnmap(a3, a4, v14);
      }
      v22 = v15 << v16;
      *a1 = v22;
      *a1 = (*(unsigned __int8 *)(v14 + v18) >> (8 - v16)) + v22;
      return brk_DataUnmap(a3, a4, v14);
    }
  }
  else
  {
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t unpackU32(int *a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  if (!a4)
  {
    v12 = 0;
    goto LABEL_10;
  }
  v4 = *a3;
  v5 = v4 >> 3;
  v6 = 8 - (*a3 & 7);
  if (v6 >= a4)
    v7 = a4;
  else
    v7 = 8 - (*a3 & 7);
  *a3 = v4 + a4;
  v8 = (*(unsigned __int8 *)(a2 + v5) >> (v6 - v7)) & ~(-1 << v7);
  *a1 = v8;
  v9 = a4 - v7;
  v10 = (v5 + 1);
  if (a4 - v7 >= 8)
  {
    do
    {
      *a1 = v8 << 8;
      v8 = *(unsigned __int8 *)(a2 + v10) | (v8 << 8);
      *a1 = v8;
      v9 -= 8;
      ++v10;
    }
    while (v9 > 7);
  }
  if (v9)
  {
    v11 = v8 << v9;
    *a1 = v11;
    v12 = (*(unsigned __int8 *)(a2 + v10) >> (8 - v9)) + v11;
LABEL_10:
    *a1 = v12;
  }
  return 0;
}

uint64_t unpackS32(int *a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v8;
  uint64_t v10;

  v10 = 0;
  *a1 = 0;
  unpackU32((int *)&v10 + 1, a2, a3, 1u);
  unpackU32((int *)&v10, a2, a3, a4 - 1);
  if (HIDWORD(v10))
    v8 = -(int)v10;
  else
    v8 = v10;
  *a1 = v8;
  return 0;
}

uint64_t smcadpcmf5spi_GenDecOpen(_WORD *a1, int a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  int inited;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int Info;
  uint64_t v17;
  int NullHandle;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 __b;
  __int128 v28;
  int v29;

  v6 = 2328911882;
  v26 = 0;
  result = 2328911878;
  if (!a3 || !a5)
    return result;
  v29 = 0;
  __b = 0u;
  v28 = 0u;
  inited = InitRsrcFunction(a1, a2, &v26);
  if (inited < 0)
    return inited & 0xFDFFF | 0x8AD02000;
  v12 = heap_Calloc(*(_QWORD **)(v26 + 8), 1, 88);
  if (!v12)
    return 2328911882;
  v13 = v12;
  *(_QWORD *)(v12 + 80) = v26;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v14 = *a3;
  v15 = a3[1];
  *(_WORD *)(v12 + 4) = v15;
  if (a4 == 4)
  {
    *(_DWORD *)(v12 + 56) = 0;
    Info = smcadpcmf5spi_GetInfo(8450, v14, v15, 0, 0, (char *)&__b);
    if (Info < 0)
    {
      v21 = Info & 0x1FFFFF;
    }
    else
    {
      *(_QWORD *)(v13 + 40) = heap_Calloc(*(_QWORD **)(v26 + 8), 1, HIWORD(v28));
      if ((_WORD)v29)
        *(_QWORD *)(v13 + 48) = heap_Calloc(*(_QWORD **)(v26 + 8), 1, (unsigned __int16)v29);
      v17 = heap_Calloc(*(_QWORD **)(v26 + 8), *(unsigned __int16 *)(v13 + 4), 2);
      *(_QWORD *)(v13 + 16) = v17;
      if (!*(_QWORD *)(v13 + 40) || (_WORD)v29 && !*(_QWORD *)(v13 + 48) || !v17)
        goto LABEL_21;
      NullHandle = safeh_GetNullHandle();
      v20 = smcadpcmf5spi_DecoderOpen(8450, v15, NullHandle, v19, 0, 0, *(_WORD **)(v13 + 40), v13 + 64);
      v6 = v20;
      if ((v20 & 0x80000000) == 0)
      {
        *(_WORD *)(v13 + 2) = WORD3(v28);
        *(_WORD *)(v13 + 4) = WORD2(v28) >> 1;
        *(_WORD *)(v13 + 6) = WORD4(__b);
        *(_WORD *)v13 = 4;
        *(_WORD *)(v13 + 8) = 0;
        if (!(_DWORD)v20)
        {
          result = 0;
          *(_QWORD *)a5 = v13;
          *(_DWORD *)(a5 + 8) = 173;
          return result;
        }
        goto LABEL_21;
      }
      v21 = v20 & 0x1FFFFF;
    }
    v6 = v21 | 0x8AD02000;
  }
  else
  {
    v6 = 2328911881;
  }
LABEL_21:
  v22 = *(_QWORD *)(v13 + 40);
  v23 = v26;
  if (v22)
  {
    heap_Free(*(_QWORD **)(v26 + 8), v22);
    v23 = v26;
  }
  v24 = *(_QWORD *)(v13 + 48);
  if (v24)
  {
    heap_Free(*(_QWORD **)(v23 + 8), v24);
    v23 = v26;
  }
  v25 = *(_QWORD *)(v13 + 16);
  if (v25)
  {
    heap_Free(*(_QWORD **)(v23 + 8), v25);
    v23 = v26;
  }
  heap_Free(*(_QWORD **)(v23 + 8), v13);
  return v6;
}

uint64_t smcadpcmf5spi_GenDecGetInfo(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  result = safeh_HandleCheck(a1, a2, 173, 88);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      v13 = *a3 + *(unsigned __int16 *)(a1 + 6);
      v14 = *(unsigned __int16 *)(a1 + 4);
      v15 = (*a4 + v13 - 1) / v14;
      v16 = *(unsigned __int16 *)(a1 + 8);
      v17 = v13 / v14 - v16;
      if (v13 / v14 < v16)
        v17 = 0;
      v18 = *(unsigned __int16 *)(a1 + 2);
      *a6 = v17 * v18;
      *a7 = (unsigned __int16)(v15 - v17 + 1) * v18;
      *(_DWORD *)(a1 + 28) = *a4;
      *(_DWORD *)(a1 + 32) = v13 - v17 * v14;
      *(_WORD *)(a1 + 24) = 0;
      if (!(_DWORD)result)
      {
        smcadpcmf5spi_DecoderResetMemory(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
        return 0;
      }
    }
    else
    {
      return 2328911880;
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_GenDecClose(uint64_t *a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v5))
    return 0;
  v8 = safeh_HandleCheck((uint64_t)a1, a2, 173, 88);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!a1)
    return 2328911880;
  v6 = smcadpcmf5spi_DecoderClose(a1[8], a1[9]);
  heap_Free(*(_QWORD **)(a1[10] + 8), a1[5]);
  v9 = a1[6];
  if (v9)
    heap_Free(*(_QWORD **)(a1[10] + 8), v9);
  heap_Free(*(_QWORD **)(a1[10] + 8), a1[2]);
  heap_Free(*(_QWORD **)(a1[10] + 8), (uint64_t)a1);
  return v6;
}

uint64_t smcadpcmf5spi_GenDecProcess(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  _WORD v32[320];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v11 = safeh_HandleCheck(a1, a2, 173, 88);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (!a1)
    return 2328911880;
  if (*a6 >= *(_DWORD *)(a1 + 28))
    v12 = *(_DWORD *)(a1 + 28);
  else
    v12 = *a6;
  v28 = a4;
  v29 = a6;
  if (!v12)
    goto LABEL_12;
  v13 = *(unsigned __int16 *)(a1 + 24);
  if (v12 <= v13)
  {
    cstdlib_memcpy(a5, *(const void **)(a1 + 16), 2 * v12);
    cstdlib_memmove(*(void **)(a1 + 16), (const void *)(*(_QWORD *)(a1 + 16) + 2 * v12), 2 * (*(unsigned __int16 *)(a1 + 24) - v12));
    v17 = &a5[2 * v12];
    *(_WORD *)(a1 + 24) -= v12;
    *(_DWORD *)(a1 + 28) -= v12;
    goto LABEL_14;
  }
  v14 = *a4;
  v15 = *(unsigned __int16 *)(a1 + 2);
  if (v14 < v15)
  {
    if (*(_WORD *)(a1 + 24))
    {
      cstdlib_memcpy(a5, *(const void **)(a1 + 16), 2 * v13);
      v16 = *(unsigned __int16 *)(a1 + 24);
      v17 = &a5[2 * v16];
      *(_DWORD *)(a1 + 28) -= v16;
      *(_WORD *)(a1 + 24) = 0;
LABEL_14:
      LODWORD(v18) = a3;
      goto LABEL_15;
    }
LABEL_12:
    v17 = a5;
    goto LABEL_14;
  }
  v18 = a3;
  v17 = a5;
  while (1)
  {
    v20 = *(_DWORD *)(a1 + 32);
    v21 = *(unsigned __int16 *)(a1 + 4);
    v31 = v15;
    v30 = 2 * v21;
    *(_DWORD *)(a1 + 56) = 0;
    v11 = smcadpcmf5spi_DecoderProcess(*(unsigned __int16 **)(a1 + 64), *(_QWORD *)(a1 + 72), 0, v18, &v31, *(_QWORD *)(a1 + 48), v32, &v30);
    v22 = v30 >> 1;
    v30 >>= 1;
    if (v20 >= v21)
    {
      *(_DWORD *)(a1 + 32) -= v22;
      goto LABEL_31;
    }
    v23 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v23)
    {
      LOWORD(v22) = v22 - v23;
      v24 = &v32[v23];
      *(_DWORD *)(a1 + 32) = 0;
      if (*(_DWORD *)(a1 + 28) < (unsigned __int16)v22)
        LOWORD(v22) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      if (*(_WORD *)(a1 + 24))
      {
        cstdlib_memcpy(v17, *(const void **)(a1 + 16), 2 * *(unsigned __int16 *)(a1 + 24));
        v25 = *(unsigned __int16 *)(a1 + 24);
        v17 += 2 * v25;
        v22 = *(_DWORD *)(a1 + 28) - v25;
        *(_DWORD *)(a1 + 28) = v22;
        v12 -= v25;
        *(_WORD *)(a1 + 24) = 0;
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 28);
      }
      v24 = v32;
      if (v22 > *(unsigned __int16 *)(a1 + 4))
        LOWORD(v22) = v30;
    }
    v26 = (unsigned __int16)v22;
    if (v12 < (unsigned __int16)v22)
      break;
    cstdlib_memcpy(v17, v24, 2 * (unsigned __int16)v22);
    *(_DWORD *)(a1 + 28) -= v26;
    v17 += 2 * v26;
    v12 -= v26;
LABEL_31:
    v18 += v31;
    if (v12)
    {
      v14 -= v31;
      v15 = *(unsigned __int16 *)(a1 + 2);
      if (v14 >= v15)
        continue;
    }
    goto LABEL_15;
  }
  v27 = (unsigned __int16)v22 - v12;
  cstdlib_memcpy(*(void **)(a1 + 16), &v24[v12], 2 * v27);
  *(_WORD *)(a1 + 24) = v27;
  cstdlib_memcpy(v17, v24, 2 * v12);
  *(_DWORD *)(a1 + 28) -= v12;
  v17 += 2 * v12;
  LODWORD(v18) = v18 + v31;
LABEL_15:
  *v28 = v18 - a3;
  *v29 = (unint64_t)(v17 - a5) >> 1;
  return v11;
}

uint64_t gsmc_vssq5_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2328911873;
  result = 0;
  *a2 = &dec_I;
  return result;
}

uint64_t FG_adpcm_init_state(uint64_t result)
{
  *(_WORD *)result = 0;
  *(_BYTE *)(result + 2) = 0;
  return result;
}

__int16 *adpcm_coder(__int16 *result, _BYTE *a2, int a3, __int16 *a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v4 = *a4;
  v5 = *((char *)a4 + 2);
  if (a3 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = stepsizeTable[*((char *)a4 + 2)];
    v10 = a3 + 1;
    do
    {
      v11 = *result++;
      v12 = (v11 >> 2) - v4;
      if (v12 >= 0)
        v13 = v12;
      else
        v13 = -v12;
      v14 = v13 - v9;
      if (v13 >= v9)
      {
        v25 = 2 * v9;
        if (v14 >= v9 >> 1)
          v26 = 10;
        else
          v26 = 8;
        if (v14 >= v9 >> 1)
          v27 = v9 >> 1;
        else
          v27 = 0;
        v28 = v9 + (v9 >> 3) + v27;
        v29 = v14 - v27 < v9 >> 2;
        v23 = v26 | 1;
        if (v29)
          v23 = v26;
        else
          v28 += v9 >> 2;
        v30 = v13 - v25;
        v31 = v25 + (v9 >> 2);
        if (v30 >= v9)
          v32 = 14;
        else
          v32 = 12;
        if (v30 >= v9)
          v33 = v9;
        else
          v33 = 0;
        v34 = v31 + v33;
        v29 = v30 - v33 < v9 >> 1;
        v35 = v32 | 1;
        if (v29)
          v35 = v32;
        else
          v34 += v9 >> 1;
        if (v13 < 2 * v9)
        {
          v24 = v28;
        }
        else
        {
          v23 = v35;
          v24 = v34;
        }
      }
      else
      {
        v15 = v9 >> 1;
        v16 = v13 >= v9 >> 1;
        if (v13 < v9 >> 1)
          v15 = 0;
        v17 = v13 - v15;
        v18 = v15 + (v9 >> 4);
        if (v17 >= v9 >> 2)
          v19 = (4 * v16) | 2;
        else
          v19 = 4 * v16;
        if (v17 >= v9 >> 2)
          v20 = v9 >> 2;
        else
          v20 = 0;
        v21 = v17 - v20;
        v22 = v18 + v20;
        if (v21 >= v9 >> 3)
          v23 = v19 | 1;
        else
          v23 = v19;
        if (v21 >= v9 >> 3)
          v24 = v22 + (v9 >> 3);
        else
          v24 = v22;
      }
      if (v12 < 0)
        v24 = -v24;
      v4 += v24;
      if (v4 <= -8192)
        v4 = -8192;
      if (v4 >= 0x1FFF)
        v4 = 0x1FFF;
      v36 = indexTable[v23 | (v12 >> 27) & 0x10];
      v5 = (v36 + v5) & ~((int)(v36 + v5) >> 31);
      if (v5 >= 0x58)
        v5 = 88;
      v9 = stepsizeTable[v5];
      v37 = v6 + 1;
      v7 |= v12 >> 31 << v6;
      if (((v6 + 1) & 1) != 0)
      {
        v8 = 16 * v23;
      }
      else
      {
        a2[(v6 >> 1) + 1] = v23 | v8;
        if (v6 == 7)
        {
          v37 = 0;
          *a2 = v7;
          a2 += 5;
          v7 = 0;
        }
      }
      --v10;
      v6 = v37;
    }
    while (v10 > 1);
  }
  *a4 = v4;
  *((_BYTE *)a4 + 2) = v5;
  return result;
}

unsigned __int8 *adpcm_decoder(unsigned __int8 *result, _WORD *a2, int a3, __int16 *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int i;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;

  if (a3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v8 = (char)*result++;
    v7 = v8;
    v9 = *((char *)a4 + 2);
    v10 = stepsizeTable[*((char *)a4 + 2)];
    v11 = *a4;
    for (i = a3 + 1; i > 1; --i)
    {
      if (v4 == 8)
      {
        v14 = (char)*result++;
        v7 = v14;
        v4 = 1;
        if (!v5)
        {
LABEL_7:
          v15 = *result++;
          v13 = v15;
          LODWORD(v6) = v15 >> 4;
          goto LABEL_8;
        }
      }
      else
      {
        ++v4;
        if (!v5)
          goto LABEL_7;
      }
      v13 = v6;
LABEL_8:
      v5 ^= 1u;
      v16 = indexTable[v6 & 0xF];
      v9 = (v16 + v9) & ~((int)(v16 + v9) >> 31);
      if (v9 >= 0x58)
        v9 = 88;
      v17 = (int)((_DWORD)v6 << 30) >> 31;
      v18 = (((int)((_DWORD)v6 << 29) >> 31) & (v10 >> 1)) + (v10 >> 4) + (v17 & (v10 >> 2));
      if ((v6 & 1) != 0)
        v18 += v10 >> 3;
      v19 = v10 + (v10 >> 3) + (v17 & (v10 >> 1));
      if ((v6 & 1) != 0)
        v19 += v10 >> 2;
      v20 = (v10 >> 2) + 2 * v10 + (v10 & ((int)((_DWORD)v6 << 30) >> 31));
      v21 = v20 + (v10 >> 1);
      if ((v6 & 1) == 0)
        v21 = v20;
      if ((v6 & 4) == 0)
        v21 = v19;
      if ((v6 & 8) == 0)
        v21 = v18;
      v22 = (v7 & 1) == 0;
      v7 >>= 1;
      if (!v22)
        v21 = -v21;
      v11 += v21;
      if (v11 <= -8192)
        v11 = -8192;
      if (v11 >= 0x1FFF)
        v11 = 0x1FFF;
      v10 = stepsizeTable[v9];
      *a4 = v11;
      *((_BYTE *)a4 + 2) = v9;
      *a2++ = 4 * v11;
      v6 = v13;
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_GetInfo(int a1, int a2, unsigned __int16 a3, int a4, int a5, char *__b)
{
  uint64_t result;
  unsigned int v12;

  if (a5 == 1)
  {
    if ((a1 & 0xFE00FFFF) != 0x2102)
      return 2327847168;
  }
  else
  {
    result = 2327847168;
    if (a2 != 10000 || (a1 & 0xFE00FFFF) != 0x2102)
      return result;
  }
  if (!__b)
    return 2327846918;
  cstdlib_memset(__b, 0, 0x24uLL);
  *((_DWORD *)__b + 2) = 0;
  if (!a3 || (a3 & 7) != 0)
    return 2327846919;
  result = 2327846919;
  if (!(a3 >> 13))
  {
    v12 = ((5 * a3) >> 3) + 3;
    *((_WORD *)__b + 11) = v12;
    *((_WORD *)__b + 12) = v12;
    LOWORD(v12) = 8 * v12;
    *((_WORD *)__b + 13) = v12;
    *((_WORD *)__b + 14) = v12;
    if (a4)
    {
      return 2327846913;
    }
    else
    {
      *((_WORD *)__b + 8) = 10000;
      *((_WORD *)__b + 10) = 2 * a3;
      result = 0;
      if (a5 == 1)
      {
        *(_DWORD *)(__b + 30) = 0;
      }
      else
      {
        *(_DWORD *)(__b + 30) = 4;
        *((_DWORD *)__b + 3) = 0;
        *((_WORD *)__b + 9) = 0;
      }
    }
  }
  return result;
}

uint64_t smcadpcmf5spi_DecoderOpen(int a1, unsigned int a2, int a3, int a4, int a5, int a6, _WORD *__b, uint64_t a8)
{
  uint64_t v8;

  v8 = 2327846918;
  if ((a1 & 0xFE00FFFF) != 0x2102)
    return 2327847168;
  if (!a8)
    return 2327846920;
  if (__b)
  {
    cstdlib_memset(__b, 0, 4uLL);
    *(_QWORD *)a8 = __b;
    *(_DWORD *)(a8 + 8) = 65708;
    if (HIWORD(a2))
    {
      return 2327846919;
    }
    else
    {
      v8 = 0;
      *__b = a2;
      __b[1] = ((5 * a2) >> 3) + 3;
    }
  }
  return v8;
}

uint64_t smcadpcmf5spi_DecoderProcess(unsigned __int16 *a1, int a2, int a3, uint64_t a4, _WORD *a5, uint64_t a6, _WORD *a7, _WORD *a8)
{
  uint64_t result;
  int v14;

  if (a8 && a5 && a4 && a7)
  {
    if (*a5)
    {
      *a8 = 0;
      if (a3)
      {
        *a5 = 0;
        return 2327846913;
      }
      else
      {
        result = safeh_HandleCheck((uint64_t)a1, a2, 65708, 4);
        if ((result & 0x80000000) == 0)
        {
          if ((unsigned __int16)*a5 == a1[1])
          {
            v14 = 0;
            BYTE2(v14) = *(_BYTE *)a4;
            LOWORD(v14) = *(_WORD *)(a4 + 1);
            adpcm_decoder((unsigned __int8 *)(a4 + 3), a7, *a1, (__int16 *)&v14);
            result = 0;
            *a8 = 2 * *a1;
          }
          else
          {
            *a5 = 0;
            *a8 = 0;
            return 2327846921;
          }
        }
      }
      return result;
    }
  }
  else if (!a5)
  {
    goto LABEL_10;
  }
  *a5 = 0;
LABEL_10:
  result = 2327846918;
  if (a8)
    *a8 = 0;
  return result;
}

uint64_t smcadpcmf5spi_DecoderClose(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 65708, 4);
}

uint64_t smcadpcmf5spi_DecoderResetMemory(uint64_t a1, int a2)
{
  int v2;

  v2 = safeh_HandleCheck(a1, a2, 65708, 4);
  return v2 & (v2 >> 31);
}

uint64_t smcadpcmf5spi_dummy()
{
  return 0;
}

uint64_t smc155mrf22spi_GenDecOpen(_WORD *a1, int a2, int *a3, int a4, uint64_t a5)
{
  unsigned int v6;
  uint64_t result;
  int inited;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int Info;
  uint64_t v16;
  int NullHandle;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int __dst;
  __int128 __b;
  __int128 v25;
  int v26;

  v6 = -2043650038;
  result = 2251317254;
  if (a3 && a5)
  {
    v26 = 0;
    __b = 0u;
    v25 = 0u;
    v22 = 0;
    __dst = 0;
    v21 = 0;
    inited = InitRsrcFunction(a1, a2, &v21);
    if (inited < 0)
    {
      return inited & 0xFDFFF | 0x86302000;
    }
    else
    {
      v12 = heap_Calloc(*(_QWORD **)(v21 + 8), 1, 712);
      if (v12)
      {
        v13 = v12;
        *(_QWORD *)(v12 + 704) = v21;
        *(_QWORD *)a5 = v12;
        *(_DWORD *)(a5 + 8) = 99;
        cstdlib_memcpy((char *)&__dst + 2, a3, 2uLL);
        cstdlib_memcpy(&__dst, (char *)a3 + 2, 2uLL);
        cstdlib_memcpy((char *)&v22 + 2, a3 + 1, 2uLL);
        cstdlib_memcpy(&v22, (char *)a3 + 6, 2uLL);
        v14 = __dst & 3;
        *(_DWORD *)(v13 + 680) = 0;
        Info = smc155mrf22spi_GetInfo(1057026, HIWORD(__dst), v14, 0, 0, (char *)&__b);
        if (Info < 0)
        {
          v6 = Info & 0xFDFFF | 0x86302000;
        }
        else
        {
          *(_QWORD *)(v13 + 664) = heap_Calloc(*(_QWORD **)(v21 + 8), 1, HIWORD(v25));
          v16 = heap_Calloc(*(_QWORD **)(v21 + 8), 1, (unsigned __int16)v26);
          *(_QWORD *)(v13 + 672) = v16;
          if (*(_QWORD *)(v13 + 664) && v16)
          {
            NullHandle = safeh_GetNullHandle();
            result = smc155mrf22spi_DecoderOpen(1057026, v14, NullHandle, v18, a3 + 2, a4 - 8, *(char **)(v13 + 664), v13 + 688);
            if ((result & 0x80000000) == 0)
            {
              *(_WORD *)(v13 + 2) = WORD3(v25);
              *(_WORD *)(v13 + 4) = WORD2(v25) >> 1;
              *(_WORD *)(v13 + 6) = WORD4(__b);
              *(_WORD *)v13 = 8;
              *(_WORD *)(v13 + 8) = HIWORD(v22);
              return result;
            }
            v6 = result;
          }
        }
        v19 = *(_QWORD *)(v13 + 664);
        if (v19)
        {
          heap_Free(*(_QWORD **)(v21 + 8), v19);
          *(_QWORD *)(v13 + 664) = 0;
        }
        v20 = *(_QWORD *)(v13 + 672);
        if (v20)
        {
          heap_Free(*(_QWORD **)(v21 + 8), v20);
          *(_QWORD *)(v13 + 672) = 0;
        }
        return v6 & 0xFDFFF | 0x86302000;
      }
      else
      {
        return 2251317258;
      }
    }
  }
  return result;
}

uint64_t smc155mrf22spi_GenDecGetInfo(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;

  v12 = safeh_HandleCheck(a1, a2, 99, 712);
  if ((v12 & 0x80000000) == 0)
  {
    if (a1)
    {
      v13 = *a3 + *(unsigned __int16 *)(a1 + 6);
      v14 = *(unsigned __int16 *)(a1 + 4);
      v15 = (*a4 + v13 - 1) / v14;
      v16 = *(unsigned __int16 *)(a1 + 8);
      v17 = v13 / v14 - v16;
      if (v13 / v14 < v16)
        v17 = 0;
      v18 = *(unsigned __int16 *)(a1 + 2);
      *a6 = v17 * v18;
      *a7 = v18 + v18 * (v15 - v17);
      *(_DWORD *)(a1 + 652) = *a4;
      *(_DWORD *)(a1 + 656) = v13 - v17 * v14;
      *(_WORD *)(a1 + 650) = 0;
      cstdlib_memset((void *)(a1 + 10), 0, 2 * v14);
      smc155mrf22spi_DecoderResetMemory(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696));
    }
    else
    {
      return 2251317256;
    }
  }
  return v12;
}

uint64_t smc155mrf22spi_GenDecClose(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 99, 712);
  if ((v3 & 0x80000000) != 0)
    return v3;
  if (!a1)
    return 2251317256;
  v4 = smc155mrf22spi_DecoderClose(a1[86], a1[87]);
  v5 = a1[83];
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1[88] + 8), v5);
    a1[83] = 0;
  }
  v6 = a1[84];
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1[88] + 8), v6);
    a1[84] = 0;
  }
  heap_Free(*(_QWORD **)(a1[88] + 8), (uint64_t)a1);
  return v4;
}

uint64_t smc155mrf22spi_GenDecProcess(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *__src;
  int v30;
  unsigned int *v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  char v34[640];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v11 = safeh_HandleCheck(a1, a2, 99, 712);
  if ((v11 & 0x80000000) != 0)
    return v11;
  if (!a1)
    return 2251317256;
  if (*a6 >= *(_DWORD *)(a1 + 652))
    v12 = *(_DWORD *)(a1 + 652);
  else
    v12 = *a6;
  v31 = a4;
  v30 = (int)a3;
  if (!v12)
  {
LABEL_12:
    v17 = a5;
    goto LABEL_14;
  }
  v13 = *(unsigned __int16 *)(a1 + 650);
  if (v12 <= v13)
  {
    cstdlib_memcpy(a5, (const void *)(a1 + 10), 2 * v12);
    cstdlib_memmove((void *)(a1 + 10), (const void *)(a1 + 10 + 2 * v12), 2 * (*(unsigned __int16 *)(a1 + 650) - v12));
    v17 = &a5[2 * v12];
    *(_WORD *)(a1 + 650) -= v12;
    *(_DWORD *)(a1 + 652) -= v12;
    goto LABEL_14;
  }
  v14 = *a4;
  v15 = *(unsigned __int16 *)(a1 + 2);
  if (*a4 < v15)
  {
    if (*(_WORD *)(a1 + 650))
    {
      cstdlib_memcpy(a5, (const void *)(a1 + 10), 2 * v13);
      v16 = *(unsigned __int16 *)(a1 + 650);
      v17 = &a5[2 * v16];
      *(_DWORD *)(a1 + 652) -= v16;
      *(_WORD *)(a1 + 650) = 0;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  __src = (void *)(a1 + 10);
  v17 = a5;
  while (1)
  {
    v19 = *(_DWORD *)(a1 + 656);
    v20 = *(unsigned __int16 *)(a1 + 4);
    v33 = v15;
    v32 = 2 * v20;
    if (v19 >= v20)
    {
      v26 = v19 >= 3 * v20;
      *(_DWORD *)(a1 + 680) = v26;
      v11 = smc155mrf22spi_DecoderProcess(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696), v26, a3, &v33, *(_QWORD *)(a1 + 672), v34, &v32, 0, 0);
      v27 = v32;
      v32 >>= 1;
      *(_DWORD *)(a1 + 656) -= v27 >> 1;
      goto LABEL_31;
    }
    *(_DWORD *)(a1 + 680) = 0;
    v11 = smc155mrf22spi_DecoderProcess(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 696), 0, a3, &v33, *(_QWORD *)(a1 + 672), v34, &v32, 0, 0);
    v21 = v32 >> 1;
    v32 >>= 1;
    v22 = *(unsigned int *)(a1 + 656);
    if ((_DWORD)v22)
    {
      v23 = v21 - v22;
      v24 = &v34[2 * v22];
      *(_DWORD *)(a1 + 656) = 0;
      v25 = v23 >= *(_DWORD *)(a1 + 652) ? *(_DWORD *)(a1 + 652) : v23;
    }
    else
    {
      if (*(_WORD *)(a1 + 650))
      {
        cstdlib_memcpy(v17, __src, 2 * *(unsigned __int16 *)(a1 + 650));
        v28 = *(unsigned __int16 *)(a1 + 650);
        v17 += 2 * v28;
        v25 = *(_DWORD *)(a1 + 652) - v28;
        *(_DWORD *)(a1 + 652) = v25;
        v12 -= v28;
        *(_WORD *)(a1 + 650) = 0;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 652);
      }
      if (v25 > *(unsigned __int16 *)(a1 + 4))
        v25 = v32;
      v24 = v34;
    }
    if (v25 > v12)
      break;
    LH_S16ToLH_S16(v24, v17, v25);
    *(_DWORD *)(a1 + 652) -= v25;
    v17 += 2 * v25;
    v12 -= v25;
LABEL_31:
    a3 += v33;
    if (v12)
    {
      v14 -= v33;
      v15 = *(unsigned __int16 *)(a1 + 2);
      if (v14 >= v15)
        continue;
    }
    goto LABEL_14;
  }
  LH_S16ToLH_S16(&v24[2 * v12], __src, v25 - v12);
  *(_WORD *)(a1 + 650) = v25 - v12;
  LH_S16ToLH_S16(v24, v17, v12);
  *(_DWORD *)(a1 + 652) -= v12;
  v17 += 2 * v12;
  LODWORD(a3) = (_DWORD)a3 + v33;
LABEL_14:
  *v31 = (_DWORD)a3 - v30;
  *a6 = (unint64_t)(v17 - a5) >> 1;
  return v11;
}

uint64_t gsmc_155mrf22_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2251317249;
  result = 0;
  *a2 = &dec_I_0;
  return result;
}

uint64_t smc155mrf22_psflt_dummy()
{
  return 0;
}

uint64_t smc155mrf22_fxd_gain_predict(int16x4_t *a1, __int16 *a2, int a3, _WORD *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  if (a3 < 1)
  {
    v6 = 20971;
  }
  else
  {
    v5 = a3;
    v6 = 20971;
    do
    {
      v7 = *a2++;
      v6 += (v7 * v7) >> 5;
      --v5;
    }
    while (v5);
  }
  v8 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_214F8D390), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)((v6 / (__int16)((_WORD)a3 << 8)) >> 1), (uint64_t)&s16LogTable_0)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v8 >> 36) + (v8 >> 63)) >> 1), (uint64_t)&u16PowTable_0);
  *a4 = 2 * result;
  return result;
}

uint64_t smc155mrf22_fxd_gain_predict_pulses(int16x4_t *a1, int a2, __int16 a3, _WORD *a4)
{
  unint64_t v5;
  uint64_t result;

  v5 = 1717986919
     * (((vaddvq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*a1), (int32x4_t)xmmword_214F8D390), 1uLL)) + 256) >> 9)
      + ((__int16)(9216
                 - fxd_S16Lookup10Log10S16S16((__int16)(((((a2 << 11) | 0x14) << 16 >> 6) / (__int16)(a3 << 8)) >> 1), (uint64_t)&s16LogTable_0)) << 7));
  result = fxd_U16LookupPow10U16U16((unsigned __int16)(((v5 >> 36) + (v5 >> 63)) >> 1), (uint64_t)&u16PowTable_0);
  *a4 = 2 * result;
  return result;
}

uint64_t smc155mrf22_fxd_gain_update(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t result;

  *(_WORD *)(a1 + 6) = *(_WORD *)(a1 + 4);
  *(_DWORD *)(a1 + 2) = *(_DWORD *)a1;
  result = fxd_S16Lookup10Log10S16S16(a2, (uint64_t)&s16LogTable_0);
  *(_WORD *)a1 = 4 * (result + a3);
  return result;
}

uint64_t smc155mrf22_fxd_DecodeCodeGain(unsigned int a1, __int16 *a2, int a3, uint64_t a4, __int16 a5)
{
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v14;

  v14 = 0;
  if (a3)
    smc155mrf22_fxd_gain_predict_pulses((int16x4_t *)a4, a3, a5, &v14);
  else
    smc155mrf22_fxd_gain_predict((int16x4_t *)a4, a2, a5, &v14);
  if ((int)a1 > 58)
  {
    if (a1 > 0x3C)
    {
      v9 = 2 * v14 * smc155mrf22_fxd_qgc[a1];
      v10 = (v9 + 512) >> 10;
      v11 = (v9 + 2048) >> 12;
      if (a1 <= 0x3E)
        LOWORD(v8) = v11;
      else
        LOWORD(v8) = v10;
      if (a1 <= 0x3E)
        v7 = 1541;
      else
        v7 = 3082;
    }
    else
    {
      v8 = (2 * v14 * smc155mrf22_fxd_qgc[a1] + 4096) >> 13;
      v7 = 770;
    }
  }
  else
  {
    v7 = 0;
    v8 = (2 * v14 * smc155mrf22_fxd_qgc[a1] + 0x2000) >> 14;
  }
  v12 = (__int16)smc155mrf22_fxd_qgc[a1];
  *(_WORD *)(a4 + 6) = *(_WORD *)(a4 + 4);
  *(_DWORD *)(a4 + 2) = *(_DWORD *)a4;
  *(_WORD *)a4 = 4 * (fxd_S16Lookup10Log10S16S16(v12, (uint64_t)&s16LogTable_0) + v7);
  return (unsigned __int16)v8;
}

uint64_t smc155mrf22_sm_dummy()
{
  return 0;
}

uint64_t smc155mrf22_dummy()
{
  return 0;
}

unsigned __int8 *smc155mrf22_ReadStream(unsigned __int8 *result, unsigned int a2, _DWORD *a3, int a4, _WORD *a5)
{
  uint64_t v5;
  int8x8_t *v6;
  unsigned int v7;
  uint32x4_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[50];

  v14[49] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = a2;
    v6 = (int8x8_t *)v14;
    do
    {
      v7 = *result++;
      v8 = (uint32x4_t)vdupq_n_s32(v7);
      *v6++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_214F8C220), (int16x8_t)vshlq_u32(v8, (uint32x4_t)xmmword_214F8C210))), (int8x8_t)0x101010101010101);
      --v5;
    }
    while (v5);
  }
  if (a4)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = (unsigned __int16)*a5;
      if (*a5)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v13 += *((unsigned __int8 *)v10 + v12) << v12;
          ++v12;
        }
        while ((_DWORD)v11 != (_DWORD)v12);
        v10 = (_QWORD *)((char *)v10 + v11);
      }
      else
      {
        v13 = 0;
      }
      *a3++ = v13;
      ++a5;
      ++v9;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t smc155mrf22spi_GetInfo(int a1, int a2, unsigned int a3, unsigned int a4, int a5, char *__b)
{
  uint64_t result;
  signed int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;

  if (a5 == 1)
  {
    if (a1 != 1057026)
      return 2250252544;
  }
  else
  {
    result = 2250252544;
    if (a1 != 1057026 || a2 != 4005)
      return result;
  }
  if (!__b)
    return 2250252294;
  cstdlib_memset(__b, 0, 0x24uLL);
  *((_DWORD *)__b + 2) = 40;
  if (a3 > 3)
    return 2250252295;
  v12 = a3 - 1;
  if (a3 - 1 > 2)
  {
    LOWORD(v15) = 296;
    v14 = 20400;
    LOWORD(v13) = 37;
  }
  else
  {
    v13 = 0x310025001CuLL >> (16 * v12);
    v14 = dword_214F902E0[v12];
    v15 = 0x188012800E0uLL >> (16 * v12);
  }
  *((_WORD *)__b + 11) = v13;
  *((_WORD *)__b + 12) = v13;
  *(_DWORD *)__b = v14;
  *((_DWORD *)__b + 1) = v14;
  *((_WORD *)__b + 13) = v15;
  *((_WORD *)__b + 14) = v15;
  result = 2250252289;
  if (a5 == 1)
  {
    if (!a4)
    {
      result = 0;
      *((_WORD *)__b + 8) = 4005;
      *((_WORD *)__b + 10) = 640;
      *(_DWORD *)(__b + 30) = 0;
    }
  }
  else if (a4 < 2)
  {
    result = 0;
    *((_WORD *)__b + 10) = 640;
    *(_DWORD *)(__b + 30) = 56624768;
    *(_QWORD *)(__b + 12) = 0xFA500000004;
  }
  return result;
}

uint64_t smc155mrf22spi_DecoderOpen(int a1, unsigned int a2, int a3, int a4, int *a5, int a6, char *__b, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;

  v8 = 2250252294;
  if (a1 != 1057026)
    return 2250252544;
  if (__b)
  {
    cstdlib_memset(__b, 0, 0x680uLL);
    if (a8)
    {
      *(_QWORD *)a8 = __b;
      *(_DWORD *)(a8 + 8) = 65634;
      if (a2 > 3)
      {
        return 2250252295;
      }
      else if (a5)
      {
        v16 = *a5;
        v15 = a5 + 1;
        v14 = v16;
        *((_DWORD *)__b + 11) = v16;
        *((_QWORD *)__b + 6) = v15;
        v17 = 8 * v16 + 24;
        if ((int)v16 >= 1)
        {
          v18 = v14;
          v19 = v15;
          do
          {
            v20 = *v19++;
            v17 += 32 * v20;
            --v18;
          }
          while (v18);
        }
        if (v17 == a6)
        {
          v21 = &v15[v14];
          *((_QWORD *)__b + 7) = v21;
          v22 = &v21[v14];
          *((_DWORD *)__b + 10) = v22[1];
          *((_QWORD *)__b + 191) = v22 + 5;
          v23 = a2 & 3;
          if (v23 == 1)
          {
            v24 = 0x1C0000001CLL;
            v25 = 15;
          }
          else if (v23 == 3)
          {
            v24 = 0x2C00000031;
            v23 = 3;
            v25 = 17;
          }
          else
          {
            v24 = 0x2400000025;
            v23 = 2;
            v25 = 16;
          }
          *(_QWORD *)(__b + 28) = 0x18D00000036;
          *((_DWORD *)__b + 9) = v23;
          *(_QWORD *)(__b + 12) = v24;
          *((_DWORD *)__b + 5) = 22050;
          *((_DWORD *)__b + 1) = v25;
          *((_DWORD *)__b + 2) = 0;
          ClearLongTermMemory((uint64_t)__b);
          *((_QWORD *)__b + 8) = __b + 866;
          *(_OWORD *)(__b + 1506) = xmmword_214F90310;
          fxd_LinSpace((_WORD *)__b + 812, 0, 25736, 16);
          v8 = 0;
          *((_DWORD *)__b + 414) = 0;
        }
        else
        {
          return 2250252297;
        }
      }
    }
    else
    {
      return 2250252296;
    }
  }
  return v8;
}

uint64_t smc155mrf22spi_DecoderProcess(uint64_t a1, int a2, unsigned int a3, unsigned __int8 *a4, _WORD *a5, uint64_t a6, char *a7, _WORD *a8, void *a9, _WORD *a10)
{
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 *v43;
  int v44;
  int v45;
  __int16 v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v52;
  int v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 *v62;
  void *__src;
  void *v64;
  _DWORD *v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  char *v69;
  uint64_t v70;
  _DWORD v71[5];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a8 && a5 && a4 && a6 && a7)
  {
    if (*a5)
    {
      *a8 = 0;
      if (a3 >= 2)
      {
        *a5 = 0;
        return 2250252289;
      }
      else
      {
        result = safeh_HandleCheck(a1, a2, 65634, 1664);
        if ((result & 0x80000000) == 0)
        {
          if (a1)
          {
            if (*(_DWORD *)(a1 + 12) <= (int)(unsigned __int16)*a5)
            {
              v67 = (_WORD *)(a6 + 384);
              smc155mrf22_ReadStream(a4, (unsigned __int16)*(_DWORD *)(a1 + 12), (_DWORD *)(a6 + 608), *(unsigned __int16 *)(a1 + 16), &au16BitAllocationTable[56 * *(_DWORD *)(a1 + 4) - 840]);
              *a5 = *(_DWORD *)(a1 + 12);
              v69 = a7;
              if (a3)
              {
                fxd_LinSpace((_WORD *)(a6 + 832), 0, 25736, 16);
              }
              else
              {
                fxd_MultiStageVectorDecodeLsp((_DWORD *)(a6 + 608), *(_DWORD *)(a1 + 44), *(_DWORD **)(a1 + 48), *(_QWORD *)(a1 + 1528), 16, (__int16 *)(a6 + 832));
                fxd_OrderCheckLsp((__int16 *)(a6 + 832), 16, *(_DWORD *)(a1 + 40));
              }
              v18 = 0;
              v19 = 0;
              v70 = 0;
              v20 = (unsigned int *)(a6 + 608 + 4 * *(int *)(a1 + 44));
              v65 = (_DWORD *)(a6 + 544);
              v66 = a1 + 1506;
              v62 = (__int16 *)(a1 + 1624);
              __src = (void *)(a1 + 1560);
              v64 = (void *)(a6 + 832);
              v68 = a8;
              do
              {
                v21 = 80 * v19;
                smc155mrf22_DecodeLag_11_22(*v20, v19, *(_DWORD *)(a1 + 4), (int *)&v70 + 1, &v70);
                smc155mrf22_fxd_ExcitWFSet0_Decod_11_22((_WORD *)(*(_QWORD *)(a1 + 64) + 160 * v19), SWORD2(v70), 80);
                v22 = 0;
                *(_WORD *)(a1 + 1518) = smc155mrf22_fxd_qgp[v20[1]];
                v23 = *(_QWORD *)(a1 + 64) + v18;
                do
                {
                  v24 = 2 * *(__int16 *)(v23 + v22) * *(__int16 *)(a1 + 1518);
                  v25 = (v24 + 0x4000) >> 15;
                  if (v25 <= -32768)
                    LOWORD(v25) = 0x8000;
                  if (v24 <= 1073725439)
                    v26 = v25;
                  else
                    v26 = 0x7FFF;
                  *(_WORD *)(v23 + v22) = v26;
                  v22 += 2;
                }
                while (v22 != 160);
                v27 = v20[2];
                v28 = v20[3];
                if (*(_DWORD *)(a1 + 4) == 16)
                  smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v27, v28);
                else
                  smc155mrf22_fxd_DecodWFSet1_5p((void *)a6, v71, 80, v27, v28);
                v29 = SHIDWORD(v70);
                if (SHIDWORD(v70) > 79)
                {
                  if (*(_DWORD *)(a1 + 4) == 16)
                    v37 = 4;
                  else
                    v37 = 5;
                  v38 = smc155mrf22_fxd_DecodeCodeGain(v20[4], (__int16 *)a6, v37, v66, 80);
                  *(_WORD *)(a1 + 1516) = v38;
                  *(_WORD *)(a1 + 1514) = v38;
                  v36 = *(_QWORD *)(a1 + 64);
                  v39 = v71;
                  do
                  {
                    v40 = *v39++;
                    *(_WORD *)(v36 + 2 * ((int)v40 + v21)) += (2
                                                                             * *(__int16 *)(a6 + 2 * v40)
                                                                             * *(__int16 *)(a1 + 1514)
                                                                             + 0x8000) >> 16;
                    --v37;
                  }
                  while (v37);
                }
                else
                {
                  v30 = 0;
                  do
                  {
                    v31 = 2 * *(__int16 *)(a6 + v30) * *(__int16 *)(a1 + 1520);
                    v32 = (v31 + 0x4000) >> 15;
                    if (v32 <= -32768)
                      LOWORD(v32) = 0x8000;
                    if (v31 <= 1073725439)
                      v33 = v32;
                    else
                      v33 = 0x7FFF;
                    *(_WORD *)(a6 + 2 * v29++) += v33;
                    v30 += 2;
                  }
                  while ((_DWORD)v29 != 80);
                  v34 = smc155mrf22_fxd_DecodeCodeGain(v20[4], (__int16 *)a6, 0, v66, 80);
                  v35 = 0;
                  *(_WORD *)(a1 + 1516) = v34;
                  *(_WORD *)(a1 + 1514) = v34;
                  v36 = *(_QWORD *)(a1 + 64);
                  do
                  {
                    *(_WORD *)(v36 + v18 + v35) += (2 * *(__int16 *)(a6 + v35) * *(__int16 *)(a1 + 1514)
                                                                + 0x8000) >> 16;
                    v35 += 2;
                  }
                  while (v35 != 160);
                }
                if (*(int *)(a1 + 36) < 2)
                {
                  v20 += 5;
                }
                else
                {
                  smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v20[5], v20[6]);
                  *(_WORD *)(a1 + 1514) = (43690 * *(__int16 *)(a1 + 1516) + 0x8000) >> 16;
                  v41 = SHIDWORD(v70);
                  if (SHIDWORD(v70) > 79)
                  {
                    v49 = 0;
                    v36 = *(_QWORD *)(a1 + 64);
                    do
                    {
                      *(_WORD *)(v36 + 2 * (v71[v49] + v21)) += (2
                                                                               * *(__int16 *)(a6 + 2 * (int)v71[v49])
                                                                               * *(__int16 *)(a1 + 1514)
                                                                               + 0x8000) >> 16;
                      ++v49;
                    }
                    while (v49 != 4);
                  }
                  else
                  {
                    v42 = SHIDWORD(v70) + 1;
                    v43 = (__int16 *)a6;
                    do
                    {
                      v44 = 2 * *v43 * *(__int16 *)(a1 + 1520);
                      v45 = (v44 + 0x4000) >> 15;
                      if (v45 <= -32768)
                        LOWORD(v45) = 0x8000;
                      if (v44 <= 1073725439)
                        v46 = v45;
                      else
                        v46 = 0x7FFF;
                      v43[v41] += v46;
                      ++v43;
                      v47 = (_DWORD)v42++ == 80;
                    }
                    while (!v47);
                    v48 = 0;
                    v36 = *(_QWORD *)(a1 + 64);
                    do
                    {
                      *(_WORD *)(v36 + v18 + v48) += (2 * *(__int16 *)(a6 + v48) * *(__int16 *)(a1 + 1514)
                                                                  + 0x8000) >> 16;
                      v48 += 2;
                    }
                    while (v48 != 160);
                  }
                  if (*(_DWORD *)(a1 + 36) == 3)
                  {
                    smc155mrf22_fxd_DecodWFSet1_4p((void *)a6, v71, 80, v20[7], v20[8]);
                    *(_WORD *)(a1 + 1514) = ((*(__int16 *)(a1 + 1516) << 15) + 0x8000) >> 16;
                    v50 = SHIDWORD(v70);
                    if (SHIDWORD(v70) > 79)
                    {
                      v57 = 0;
                      v36 = *(_QWORD *)(a1 + 64);
                      do
                      {
                        *(_WORD *)(v36 + 2 * (v71[v57] + v21)) += (2
                                                                                 * *(__int16 *)(a6 + 2 * (int)v71[v57])
                                                                                 * *(__int16 *)(a1 + 1514)
                                                                                 + 0x8000) >> 16;
                        ++v57;
                      }
                      while (v57 != 4);
                    }
                    else
                    {
                      v51 = SHIDWORD(v70) + 1;
                      v52 = (__int16 *)a6;
                      do
                      {
                        v53 = 2 * *v52 * *(__int16 *)(a1 + 1520);
                        v54 = (v53 + 0x4000) >> 15;
                        if (v54 <= -32768)
                          LOWORD(v54) = 0x8000;
                        if (v53 <= 1073725439)
                          v55 = v54;
                        else
                          v55 = 0x7FFF;
                        v52[v50] += v55;
                        ++v52;
                        v47 = (_DWORD)v51++ == 80;
                      }
                      while (!v47);
                      v56 = 0;
                      v36 = *(_QWORD *)(a1 + 64);
                      do
                      {
                        *(_WORD *)(v36 + v18 + v56) += (2
                                                                    * *(__int16 *)(a6 + v56)
                                                                    * *(__int16 *)(a1 + 1514)
                                                                    + 0x8000) >> 16;
                        v56 += 2;
                      }
                      while (v56 != 160);
                    }
                    v20 += 9;
                  }
                  else
                  {
                    v20 += 7;
                  }
                }
                *(_WORD *)(a1 + 1520) = *(_WORD *)(a1 + 1518);
                v58 = v36 + 160 * v19;
                if (a3)
                {
                  v59 = (void *)(a6 + 384);
                  LH_S16ToLH_S16((void *)(v36 + 160 * v19), v67, 0x50u);
                  v60 = v68;
                }
                else
                {
                  v60 = v68;
                  if (v19 > 2)
                    LH_S16ToLH_S16(v64, v65, 0x10u);
                  else
                    fxd_InterpolateVectors(v62, (__int16 *)v64, v65, word_21500C5C4[v19], 16);
                  fxd_LspToCosLsp((__int16 *)v65, v65, 16);
                  fxd_HighPrecisionCosLspToAi((unint64_t)v65, v65, 16);
                  fxd_HighPrecisionExpandLpcBandwidth((uint64_t)v65, v65, 32505, 16, 0);
                  FillZeroLH_S32((void *)a6, 0x60u);
                  LH_S32ToLH_S32(__src, (void *)a6, 0x10u);
                  v61 = v58;
                  v59 = (void *)(a6 + 384);
                  fxd_HighPrecisionFastSynthesisFilter(v61, v67, 80, 0, v65, 0x10u, 28, a6, 14);
                  LH_S32ToLH_S32((void *)(a6 + 320), __src, 0x10u);
                }
                LH_S16ToLH_S16(v59, v69, 0x50u);
                v69 += 160;
                *v60 += 160;
                ++v19;
                v18 += 160;
              }
              while (v19 != 4);
              if (a9)
              {
                *a10 = 4;
                cstdlib_memcpy(a9, (const void *)a1, 4uLL);
              }
              LH_S16ToLH_S16(v64, v62, 0x10u);
              LH_S16ToLH_S16((void *)(a1 + 712), (void *)(a1 + 72), *(_DWORD *)(a1 + 32));
              FillZeroLH_S16((void *)(a1 + 72 + 2 * *(int *)(a1 + 32)), 0x140u);
              result = 0;
              ++*(_DWORD *)(a1 + 1656);
            }
            else
            {
              *a5 = 0;
              *a8 = 0;
              return 2250252297;
            }
          }
          else
          {
            return 2250252296;
          }
        }
      }
      return result;
    }
  }
  else if (!a5)
  {
    goto LABEL_14;
  }
  *a5 = 0;
LABEL_14:
  result = 2250252294;
  if (a8)
    *a8 = 0;
  return result;
}

uint64_t smc155mrf22spi_DecoderClose(uint64_t a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t result;
  unsigned int v7;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(a1, a2, NullHandle, v5))
    return 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 65634, 1664);
  if (a1)
    v7 = result;
  else
    v7 = -2044715000;
  if ((int)result >= 0)
    return v7;
  else
    return result;
}

uint64_t smc155mrf22spi_DecoderResetMemory(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 65634, 1664);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      ClearLongTermMemory(a1);
      *(_OWORD *)(a1 + 1506) = xmmword_214F90310;
      fxd_LinSpace((_WORD *)(a1 + 1624), 0, 25736, 16);
      return 0;
    }
    else
    {
      return 2250252296;
    }
  }
  return result;
}

void *ClearLongTermMemory(uint64_t a1)
{
  cstdlib_memset((void *)(a1 + 72), 0, 0x59AuLL);
  cstdlib_memset((void *)(a1 + 1560), 0, 0x40uLL);
  cstdlib_memset((void *)(a1 + 1536), 0, 0xCuLL);
  return cstdlib_memset((void *)(a1 + 1548), 0, 0xCuLL);
}

uint64_t smc155mrf22_xelp_dummy()
{
  return 0;
}

uint64_t smc155mrf22_xe_lplib_dummy()
{
  return 0;
}

uint64_t msvqtab155mrf22_dummy()
{
  return 0;
}

_WORD *smc155mrf22_fxd_ExcitWFSet0_Decod_8Khz(_WORD *result, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int i;
  int v14;
  BOOL v15;

  if (a4 >= 1)
  {
    if (a3 == 1)
      v4 = 2;
    else
      v4 = -a3;
    if (a3 == 1)
      v5 = -1;
    else
      v5 = 0;
    v6 = (char *)&smc155mrf22_s16LongTermInterpolationTable + 20 * (3 - v4);
    v7 = (char *)&smc155mrf22_s16LongTermInterpolationTable + 20 * v4;
    v8 = (uint64_t)&result[v5 - a2];
    do
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = v8 + 2;
      for (i = 11; i > 1; --i)
      {
        v11 += ((*(__int16 *)&v7[v10] * *(__int16 *)(v8 + v9)) >> 1)
             + ((*(__int16 *)&v6[v10] * *(__int16 *)(v8 + v10 + 2)) >> 1);
        v10 += 2;
        v9 -= 2;
      }
      v14 = (v11 + 0x2000) >> 14;
      if (v14 <= -32768)
        LOWORD(v14) = 0x8000;
      if (v11 > 536862719)
        LOWORD(v14) = 0x7FFF;
      *result++ = v14;
      v8 = v12;
      v15 = __OFSUB__(a4--, 1);
    }
    while (!((a4 < 0) ^ v15 | (a4 == 0)));
  }
  return result;
}

_WORD *smc155mrf22_fxd_ExcitWFSet0_Decod_11_22(_WORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  int64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    v4 = result;
    v5 = 0xFFFFFFFF00000000 * a2;
    do
    {
      *v4++ = *(_WORD *)((char *)result + (v5 >> 31));
      v5 += 0x100000000;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t smc155mrf22_DecodeLag_8(uint64_t result, int a2, int a3, char a4, int *a5, int *a6, int *a7)
{
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v10 = result;
  if ((a4 & 1) == 0)
  {
    if ((int)result > 197)
    {
      v12 = 0;
      v11 = result - 112;
    }
    else
    {
      result = fxd_S32ShMultRndS32S32((int)result + 2, 1431655765, 31);
      v11 = ((int)result >> 1) + 19;
      v12 = v10 - 3 * v11 + 58;
    }
    *a5 = v11;
    *a6 = v12;
    goto LABEL_29;
  }
  v13 = *a7 - 5;
  if (v13 <= a2)
    v13 = a2;
  if (v13 + 9 > a3)
    v13 = a3 - 9;
  v14 = result & 0xF;
  if (v14 <= 3)
  {
    v15 = v13 + v14;
LABEL_16:
    *a5 = v15;
    *a6 = 0;
    goto LABEL_29;
  }
  if (v14 > 0xB)
  {
    v15 = v13 + v14 - 6;
    goto LABEL_16;
  }
  switch(result & 0xF)
  {
    case 4:
      *a6 = 1;
      v16 = v13 + 3;
      goto LABEL_28;
    case 5:
      v17 = -1;
      goto LABEL_20;
    case 6:
      *a6 = 0;
      goto LABEL_21;
    case 7:
      v17 = 1;
LABEL_20:
      *a6 = v17;
LABEL_21:
      v16 = v13 + 4;
      goto LABEL_28;
    case 8:
      v18 = -1;
      goto LABEL_25;
    case 9:
      *a6 = 0;
      goto LABEL_26;
    case 0xALL:
      v18 = 1;
LABEL_25:
      *a6 = v18;
LABEL_26:
      v16 = v13 + 5;
      goto LABEL_28;
    case 0xBLL:
      *a6 = -1;
      v16 = v13 + 6;
LABEL_28:
      *a5 = v16;
      break;
    default:
      break;
  }
LABEL_29:
  *a7 = *a5;
  return result;
}

uint64_t smc155mrf22_DecodeLag_11_22(uint64_t result, char a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  if ((a2 & 1) != 0)
  {
    if (a3 >= 0x17)
      v6 = 6;
    else
      v6 = 4;
    if (a3 <= 0x1D)
      v7 = v6;
    else
      v7 = 4;
    if (a3 >= 0xF)
      v8 = v7;
    else
      v8 = 2;
    if (a3 >= 0xC)
      v9 = v8;
    else
      v9 = 4;
    if ((int)a3 >= 9)
      v10 = v9;
    else
      v10 = 3;
    v5 = result + (-1 << v10) + *a5 + 1;
  }
  else if ((int)a3 > 5)
  {
    if (a3 > 0xB)
    {
      if (a3 >= 0x1E)
      {
        v5 = *a4;
        goto LABEL_21;
      }
      v5 = result + 54;
    }
    else
    {
      v5 = result + 40;
    }
  }
  else
  {
    v5 = result + 30;
  }
  *a4 = v5;
LABEL_21:
  *a5 = v5;
  return result;
}

void *smc155mrf22_fxd_DecodWFSet1_5p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  void *result;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;

  result = FillZeroLH_S16(a1, a3);
  v11 = dword_214F90378[a5 & 0xF];
  if ((a4 & 1) != 0)
    v12 = 0x2000;
  else
    v12 = -8192;
  *((_WORD *)a1 + v11) = v12;
  *a2 = v11;
  v13 = (dword_214F90438[a5 >> 4] + (int)v11) % a3;
  if ((a4 & 2) != 0)
    v14 = 0x2000;
  else
    v14 = -8192;
  *((_WORD *)a1 + v13) = v14;
  a2[1] = v13;
  v15 = (dword_214F90438[(a5 >> 8) & 0xF] + v13) % a3;
  if ((a4 & 4) != 0)
    v16 = 0x2000;
  else
    v16 = -8192;
  *((_WORD *)a1 + v15) = v16;
  a2[2] = v15;
  v17 = (dword_214F90438[(unsigned __int16)a5 >> 12] + v15) % a3;
  if ((a4 & 8) != 0)
    v18 = 0x2000;
  else
    v18 = -8192;
  *((_WORD *)a1 + v17) = v18;
  a2[3] = v17;
  v19 = (dword_214F90438[HIWORD(a5) & 0xF] + v17) % a3;
  if ((a4 & 0x10) != 0)
    v20 = 0x2000;
  else
    v20 = -8192;
  *((_WORD *)a1 + v19) = v20;
  a2[4] = v19;
  return result;
}

void *smc155mrf22_fxd_DecodWFSet1_4p(void *a1, _DWORD *a2, signed int a3, char a4, unsigned int a5)
{
  void *result;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;

  result = FillZeroLH_S16(a1, a3);
  v11 = dword_214F903B8[a5 & 0x1F];
  if ((a4 & 1) != 0)
    v12 = 0x2000;
  else
    v12 = -8192;
  *((_WORD *)a1 + v11) = v12;
  *a2 = v11;
  v13 = (dword_214F90438[(a5 >> 5) & 0xF] + (int)v11) % a3;
  if ((a4 & 2) != 0)
    v14 = 0x2000;
  else
    v14 = -8192;
  *((_WORD *)a1 + v13) = v14;
  a2[1] = v13;
  v15 = (dword_214F90438[(a5 >> 9) & 0xF] + v13) % a3;
  if ((a4 & 4) != 0)
    v16 = 0x2000;
  else
    v16 = -8192;
  *((_WORD *)a1 + v15) = v16;
  a2[2] = v15;
  v17 = (dword_214F90438[(a5 >> 13) & 0xF] + v15) % a3;
  if ((a4 & 8) != 0)
    v18 = 0x2000;
  else
    v18 = -8192;
  *((_WORD *)a1 + v17) = v18;
  a2[3] = v17;
  return result;
}

uint64_t smc155mrf22_artefact_dummy()
{
  return 0;
}

uint64_t smcsch1spi_GenDecOpen(_WORD *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  int inited;
  uint64_t v10;
  _DWORD *v11;
  int Int;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int __dst;

  v28 = 0;
  v26 = 0;
  v5 = 2617270278;
  if (a3 && a5)
  {
    __dst = 0;
    v29 = 0;
    v27 = 0;
    inited = InitRsrcFunction(a1, a2, &v26);
    if (inited < 0)
      return inited & 0xFDFFF | 0x9C002000;
    v10 = heap_Calloc(*(_QWORD **)(v26 + 8), 1, 144);
    if (!v10)
      return 2617270282;
    v11 = (_DWORD *)v10;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    *(_QWORD *)(v10 + 136) = v26;
    v5 = 2617270281;
    if (a4 < 8)
      goto LABEL_13;
    cstdlib_memcpy((char *)&__dst + 2, (const void *)a3, 2uLL);
    if (HIWORD(__dst) != 11000)
      goto LABEL_12;
    cstdlib_memcpy(&__dst, (const void *)(a3 + 2), 2uLL);
    v11[10] = 100 * (unsigned __int16)__dst;
    cstdlib_memcpy(&v29, (const void *)(a3 + 4), 2uLL);
    Int = paramc_ParamGetInt(*(_QWORD *)(v26 + 40), (uint64_t)"decoderoverheadframes", &v28);
    v13 = v28;
    if (!v28)
      v13 = 2;
    if (Int < 0)
      v13 = 2;
    *((_WORD *)v11 + 40) = v13;
    cstdlib_memcpy(&v27, (const void *)(a3 + 6), 2uLL);
    if (v27)
      goto LABEL_12;
    if (a4 - 8 < 0x18)
      goto LABEL_13;
    cstdlib_memcpy(v11 + 25, (const void *)(a3 + 8), 4uLL);
    if (v11[25])
    {
      v18 = *(_QWORD *)(*((_QWORD *)v11 + 17) + 32);
      v19 = "incompatible coded speech base format version (%d > (expected) %d)";
      v25 = v11[25];
LABEL_20:
      log_OutText(v18, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v19, v15, v16, v17, v25);
LABEL_12:
      v5 = 2617270297;
LABEL_13:
      smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)v11);
      heap_Free(*(_QWORD **)(v26 + 8), (uint64_t)v11);
      return v5;
    }
    cstdlib_memcpy(v11 + 13, (const void *)(a3 + 12), 4uLL);
    cstdlib_memcpy(v11 + 12, (const void *)(a3 + 16), 4uLL);
    cstdlib_memcpy(v11 + 11, (const void *)(a3 + 20), 4uLL);
    v20 = v11[11];
    if (v20 <= 15999)
    {
      if (v20 != 8000)
      {
        v21 = 12000;
LABEL_27:
        if (v20 != v21)
          goto LABEL_12;
      }
    }
    else if (v20 != 16000 && v20 != 48000)
    {
      v21 = 24000;
      goto LABEL_27;
    }
    cstdlib_memcpy(v11 + 19, (const void *)(a3 + 24), 4uLL);
    cstdlib_memcpy(v11 + 18, (const void *)(a3 + 28), 4uLL);
    if ((a4 & 0xFFFFFFFC) == 0x20)
      goto LABEL_13;
    cstdlib_memcpy(v11 + 24, (const void *)(a3 + 32), 4uLL);
    v22 = v11[24];
    if (!v22)
      goto LABEL_12;
    if (8 * v22 + 44 != a4)
      goto LABEL_13;
    *((_QWORD *)v11 + 11) = a3 + 36;
    v23 = v11[12];
    if (v23 == v11[11])
    {
      v24 = 20 * (v23 / 0x3E8);
      v11[14] = v24;
      v11[15] = v24;
      v5 = smcsch1spi_GenDecInitializeLowLevelDecoder((uint64_t)v11);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)a5 = v11;
        *(_DWORD *)(a5 + 8) = 448;
        return v5;
      }
      goto LABEL_13;
    }
    v18 = *(_QWORD *)(*((_QWORD *)v11 + 17) + 32);
    v19 = "incompatible coded speech base: the speech base was encoded using internal resampling, but it's being decoded without it";
    goto LABEL_20;
  }
  return v5;
}

uint64_t smcsch1spi_GenDecInitializeLowLevelDecoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int size;
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = 2617270282;
  smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  size = opus_decoder_get_size(1);
  v5 = (_DWORD *)heap_Alloc(v3, size);
  *(_QWORD *)a1 = v5;
  if (!v5)
    goto LABEL_4;
  if (opus_decoder_init(v5, *(_DWORD *)(a1 + 44), 1u))
  {
    v2 = 2617270272;
LABEL_4:
    smcsch1spi_GenDecDestroyLowLevelDecoder((uint64_t *)a1);
    return v2;
  }
  *(_DWORD *)(a1 + 64) = 5760;
  v7 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 11520);
  *(_QWORD *)(a1 + 8) = v7;
  if (!v7)
    goto LABEL_4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 68) = 0;
  v8 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 2 * *(unsigned int *)(a1 + 60));
  result = 0;
  *(_QWORD *)(a1 + 24) = v8;
  if (!v8)
    goto LABEL_4;
  return result;
}

uint64_t *smcsch1spi_GenDecDestroyLowLevelDecoder(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  if (*result)
  {
    result = heap_Free(*(_QWORD **)(result[17] + 8), *result);
    *v1 = 0;
  }
  v2 = v1[2];
  if (v2)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v2);
    v1[2] = 0;
  }
  v3 = v1[1];
  if (v3)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v3);
    v1[1] = 0;
  }
  v4 = v1[3];
  if (v4)
  {
    result = heap_Free(*(_QWORD **)(v1[17] + 8), v4);
    v1[3] = 0;
  }
  return result;
}

uint64_t smcsch1spi_GenDecGetInfo(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int *v35;
  _DWORD v36[2];

  v12 = safeh_HandleCheck(a1, a2, 448, 144);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v13 = 2617270272;
  if (!a1)
    return 2617270280;
  v14 = *a3;
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(unsigned int *)(a1 + 96);
  v17 = *(_DWORD *)(v15 + 8 * v16);
  if (*a3 > v17)
  {
    *a3 = v17;
    v16 = *(unsigned int *)(a1 + 96);
    v14 = v17;
  }
  v36[0] = v14;
  v36[1] = 0;
  v18 = (int *)ssft_bsearch((uint64_t)v36, v15, v16, 8, (uint64_t (*)(uint64_t, unint64_t))smcsch1spi_CompareChunkIndexCells);
  *(_QWORD *)(a1 + 104) = v18;
  if (v18)
  {
    v25 = *v18;
    if (*a3 >= *v18 && (v26 = v18[2], *a3 < v26) && v18[1] <= v18[3])
    {
      v28 = *a3 - *v18 + *(_DWORD *)(a1 + 76);
      v29 = *a4 + v28 - 1;
      if (v29 + v25 >= v26)
      {
        v30 = v26 - v25;
        v29 = v30 - 1;
        *a4 = v30 - v28;
      }
      v31 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)(a1 + 112) = v28 / v31;
      *(_DWORD *)(a1 + 116) = v29 / v31;
      v32 = *(unsigned __int16 *)(a1 + 80);
      v33 = v28 / v31 - v32;
      if (v28 / v31 <= v32)
      {
        *(_DWORD *)(a1 + 120) = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 120) = v33;
        if (v28 / v31 != v32)
        {
          v34 = *(_DWORD *)(a1 + 76);
          do
          {
            if (v28 >= v34 + v33 * v31)
              break;
            *(_DWORD *)(a1 + 120) = --v33;
          }
          while (v33);
        }
      }
      *a6 = v18[1];
      *a7 = v18[3] - v18[1];
      *(_DWORD *)(a1 + 128) = *a4;
      *(_DWORD *)(a1 + 132) = v28;
      *(_DWORD *)(a1 + 124) = 0;
      *(_WORD *)(a1 + 82) = 0;
      if (*(_QWORD *)a1)
      {
        if (opus_decoder_ctl(*(int **)a1, 4028, v19, v20, v21, v22, v23, v24, v35))
          return 2617270272;
        else
          return 0;
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"inconsistent chunk index (sample and Byte offsets are not monotonically increasing)", v22, v23, v24, (uint64_t)v35);
    }
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"requested start of speech segment (sample %d) missing from speech base", v22, v23, v24, *a3);
    return 2617270281;
  }
  return v13;
}

uint64_t smcsch1spi_CompareChunkIndexCells(unsigned int *a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *a1;
    if (v4 >= *a2)
      return v4 >= a2[2];
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t smcsch1spi_GenDecClose(uint64_t *a1, int a2)
{
  uint64_t NullHandle;
  int v5;
  uint64_t v6;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v5))
    return 0;
  v6 = safeh_HandleCheck((uint64_t)a1, a2, 448, 144);
  if ((v6 & 0x80000000) == 0)
  {
    if (a1)
    {
      smcsch1spi_GenDecDestroyLowLevelDecoder(a1);
      heap_Free(*(_QWORD **)(a1[17] + 8), (uint64_t)a1);
    }
    else
    {
      return 2617270280;
    }
  }
  return v6;
}

uint64_t smcsch1spi_GenDecProcess(uint64_t a1, int a2, char *a3, _DWORD *a4, char *a5, unsigned int *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  char *v44;
  int v45;
  _DWORD *v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned __int8 __dst;

  __dst = 0;
  v11 = safeh_HandleCheck(a1, a2, 448, 144);
  if ((v11 & 0x80000000) == 0)
  {
    if (a1)
    {
      v12 = *(_DWORD *)(a1 + 128);
      if (*a6 >= v12)
        v13 = v12;
      else
        v13 = *a6;
      v46 = a4;
      v47 = a6;
      v44 = a5;
      v45 = (int)a3;
      if ((_DWORD)v13)
      {
        v14 = *(unsigned __int16 *)(a1 + 82);
        if (v13 <= v14)
        {
          cstdlib_memcpy(a5, *(const void **)(a1 + 24), 2 * v13);
          cstdlib_memmove(*(void **)(a1 + 24), (const void *)(*(_QWORD *)(a1 + 24) + 2 * v13), 2 * (*(unsigned __int16 *)(a1 + 82) - v13));
          v17 = &a5[2 * v13];
          *(_WORD *)(a1 + 82) -= v13;
          *(_DWORD *)(a1 + 128) -= v13;
LABEL_41:
          *v46 = (_DWORD)a3 - v45;
          *v47 = (unint64_t)(v17 - v44) >> 1;
          return v11;
        }
        v15 = *a4;
        if (*a4 > 1u)
        {
          v16 = *(_DWORD *)(a1 + 124);
          v17 = a5;
          v18 = v13;
          while (1)
          {
            v48 = v18;
            v19 = v17;
            v20 = *(_DWORD *)(a1 + 120);
            v21 = v16 >= v20 && v16 < *(_DWORD *)(a1 + 112);
            cstdlib_memcpy(&__dst, a3, 1uLL);
            v22 = __dst;
            cstdlib_memcpy(&__dst, a3 + 1, 1uLL);
            v26 = v22 | (__dst << 8);
            if (!v26)
              break;
            if (v26 >= 0x2D01)
            {
              v41 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
              v42 = "inconsistent packet payload size declared in frame header (%d Bytes > (expected) %d Bytes)";
              v43 = v22 | (__dst << 8);
              goto LABEL_45;
            }
            v27 = v15 - 2;
            v15 = v27 - v26;
            if (v27 < v26)
            {
              log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 32), (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"missing required packet payload Bytes for decoding one frame (%d Bytes < (expected) %d Bytes)", v23, v24, v25, v27);
              return 2617270281;
            }
            v28 = a3 + 2;
            v29 = *(_DWORD *)(a1 + 60);
            if (v16 >= v20)
            {
              v30 = smcsch1spi_GenDecProcessOneFrameWithLowLevelDecoder(a1, v28, v26);
              v11 = v30;
              v17 = v19;
              if (v21)
              {
                v18 = v48;
                if ((v30 & 0x80000000) != 0)
                  return v11;
                v11 = 0;
                *(_DWORD *)(a1 + 132) -= (unsigned __int16)v29;
              }
              else
              {
                v31 = v48;
                if ((v30 & 0x80000000) != 0)
                  return v11;
                v32 = *(unsigned int *)(a1 + 132);
                if ((_DWORD)v32)
                {
                  v33 = v29 - v32;
                  v34 = (char *)(*(_QWORD *)(a1 + 32) + 2 * v32);
                  *(_DWORD *)(a1 + 132) = 0;
                  v35 = *(_DWORD *)(a1 + 128);
                  if (v35 >= v33)
                    LOWORD(v35) = v33;
                }
                else
                {
                  if (*(_WORD *)(a1 + 82))
                  {
                    cstdlib_memcpy(v17, *(const void **)(a1 + 24), 2 * *(unsigned __int16 *)(a1 + 82));
                    v36 = *(unsigned __int16 *)(a1 + 82);
                    v17 += 2 * v36;
                    v35 = *(_DWORD *)(a1 + 128) - v36;
                    *(_DWORD *)(a1 + 128) = v35;
                    v31 = v48 - v36;
                    *(_WORD *)(a1 + 82) = 0;
                  }
                  else
                  {
                    v35 = *(_DWORD *)(a1 + 128);
                  }
                  v34 = *(char **)(a1 + 32);
                  if (v35 > *(_DWORD *)(a1 + 60))
                    LOWORD(v35) = v29;
                }
                v37 = (unsigned __int16)v35;
                v38 = v35 - v31;
                if ((unsigned __int16)v35 <= v31)
                {
                  cstdlib_memcpy(v17, v34, 2 * (unsigned __int16)v35);
                  v11 = 0;
                  *(_DWORD *)(a1 + 128) -= v37;
                  v17 += 2 * v37;
                  v18 = v31 - v37;
                }
                else
                {
                  cstdlib_memcpy(*(void **)(a1 + 24), &v34[2 * v31], 2 * ((unsigned __int16)v35 - v31));
                  *(_WORD *)(a1 + 82) = v38;
                  cstdlib_memcpy(v17, v34, 2 * v31);
                  v11 = 0;
                  *(_DWORD *)(a1 + 128) -= v31;
                  v17 += 2 * v31;
                  v18 = 0;
                }
              }
            }
            else
            {
              *(_DWORD *)(a1 + 132) -= (unsigned __int16)v29;
              v17 = v19;
              v18 = v48;
            }
            a3 = &v28[v26];
            v16 = *(_DWORD *)(a1 + 124) + 1;
            *(_DWORD *)(a1 + 124) = v16;
            if (!(_DWORD)v18 || v15 <= 1)
              goto LABEL_41;
          }
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
          v42 = "null packet payload size declared in frame header";
LABEL_45:
          log_OutText(v41, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v42, v23, v24, v25, v43);
          return 2617270272;
        }
        if (*(_WORD *)(a1 + 82))
        {
          cstdlib_memcpy(a5, *(const void **)(a1 + 24), 2 * v14);
          v39 = *(unsigned __int16 *)(a1 + 82);
          v17 = &a5[2 * v39];
          *(_DWORD *)(a1 + 128) -= v39;
          *(_WORD *)(a1 + 82) = 0;
          goto LABEL_41;
        }
      }
      v17 = a5;
      goto LABEL_41;
    }
    return 2617270280;
  }
  return v11;
}

uint64_t smcsch1spi_GenDecProcessOneFrameWithLowLevelDecoder(uint64_t a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = opus_decode(*(int **)a1, a2, a3, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 64), 0);
  if ((v4 & 0x80000000) != 0)
  {
    v8 = 2617270272;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
    v12 = opus_strerror(v4);
    log_OutText(v11, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)"error during decoding: %s", v13, v14, v15, (uint64_t)v12);
  }
  else
  {
    if (v4 >= 0x1681)
    {
      v8 = 2617270272;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
      v10 = "inconsistent number of decoded samples (%d samples > (expected) %d samples)";
LABEL_8:
      log_OutText(v9, (uint64_t)"GSMCSCH1", 0, 0, (uint64_t)v10, v5, v6, v7, v4);
      return v8;
    }
    if ((_DWORD)v4 != *(_DWORD *)(a1 + 56))
    {
      v8 = 2617270272;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
      v10 = "inconsistent number of decoded samples (%d samples != (expected) %d samples)";
      goto LABEL_8;
    }
    return 0;
  }
  return v8;
}

uint64_t gsmc_sch1_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2617270273;
  result = 0;
  *a2 = &dec_I_1;
  return result;
}

uint64_t opus_decoder_get_size(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int Decoder_Size;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 - 3) < 0xFFFFFFFE)
    return 0;
  v7 = v1;
  v8 = v2;
  v6 = 0;
  Decoder_Size = silk_Get_Decoder_Size(&v6);
  result = 0;
  if (!Decoder_Size)
  {
    v6 = (v6 + 7) & 0xFFFFFFF8;
    return celt_decoder_get_size(a1) + v6 + 80;
  }
  return result;
}

uint64_t opus_decoder_init(_DWORD *a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  int size;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;

  result = 0xFFFFFFFFLL;
  if (a2 <= 15999)
  {
    if (a2 != 8000)
    {
      v7 = 12000;
LABEL_7:
      if (a2 != v7)
        return result;
    }
  }
  else if (a2 != 16000 && a2 != 48000)
  {
    v7 = 24000;
    goto LABEL_7;
  }
  if (a3 - 3 >= 0xFFFFFFFE)
  {
    v18 = 0;
    size = opus_decoder_get_size(a3);
    bzero(a1, size);
    if (silk_Get_Decoder_Size(&v18))
      return 4294967293;
    v9 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v18 + 7) & 0xFFFFFFF8;
    v10 = v9 + 80;
    *a1 = v9 + 80;
    a1[1] = 80;
    a1[11] = a3;
    a1[2] = a3;
    a1[3] = a2;
    a1[6] = a2;
    a1[4] = a3;
    if (silk_InitDecoder((uint64_t)(a1 + 20)))
      return 4294967293;
    v11 = (_DWORD *)((char *)a1 + v10);
    if (celt_decoder_init(v11, a2, a3))
    {
      return 4294967293;
    }
    else
    {
      opus_custom_decoder_ctl(v11, 10016, v12, v13, v14, v15, v16, v17, 0);
      result = 0;
      a1[14] = 0;
      a1[15] = (unsigned __int16)a2 / 0x190u;
    }
  }
  return result;
}

uint64_t opus_decode_native(int *a1, char *a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, _DWORD *a8, int a9)
{
  int v10;
  int v17;
  int v18;
  int v19;
  unint64_t samples_per_frame;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int bandwidth;
  char v36;
  int v37;
  __int16 v38[48];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a6 > 1)
    return 0xFFFFFFFFLL;
  v10 = a7;
  if (!a2 || !a3 || a6)
  {
    if ((int)a5 % (a1[3] / 400))
      return 0xFFFFFFFFLL;
  }
  if (!a2 || !a3)
  {
    LODWORD(v24) = 0;
    while (1)
    {
      v26 = opus_decode_frame(a1, 0, 0, (__int16 *)(a4 + 2 * a1[2] * (int)v24), (a5 - v24), 0, a7, (uint64_t)a8);
      if ((v26 & 0x80000000) != 0)
        return v26;
      v24 = (v26 + v24);
      if ((int)v24 >= (int)a5)
        goto LABEL_26;
    }
  }
  if (a3 < 0)
    return 0xFFFFFFFFLL;
  v37 = 0;
  v36 = 0;
  v17 = *a2;
  v18 = (char)v17;
  if ((~v17 & 0x60) != 0)
    v19 = 1000;
  else
    v19 = 1001;
  if (v18 < 0)
    v19 = 1002;
  v34 = v19;
  bandwidth = opus_packet_get_bandwidth(a2);
  samples_per_frame = opus_packet_get_samples_per_frame(a2, a1[3]);
  HIDWORD(v33) = opus_packet_get_nb_channels(a2);
  v21 = opus_packet_parse_impl(a2, a3, v10, &v36, 0, v38, &v37, a8);
  v24 = v21;
  if ((v21 & 0x80000000) == 0)
  {
    v25 = (unsigned __int8 *)&a2[v37];
    if (a6)
    {
      if ((int)a5 < (int)samples_per_frame || v18 < 0 || a1[13] == 1002)
      {
        LODWORD(v33) = a9;
        return opus_decode_native(a1, 0, 0, a4, a5, 0, 0, 0, v33);
      }
      else
      {
        if ((_DWORD)a5 != (_DWORD)samples_per_frame)
        {
          v31 = a1[17];
          LODWORD(v33) = a9;
          v32 = opus_decode_native(a1, 0, 0, a4, (a5 - samples_per_frame), 0, 0, 0, v33);
          if ((v32 & 0x80000000) != 0)
          {
            v24 = v32;
            a1[17] = v31;
            return v24;
          }
        }
        a1[15] = samples_per_frame;
        a1[12] = bandwidth;
        a1[13] = v34;
        a1[11] = HIDWORD(v33);
        v26 = opus_decode_frame(a1, v25, v38[0], (__int16 *)(a4 + 2 * a1[2] * ((int)a5 - (int)samples_per_frame)), samples_per_frame, 1, v22, v23);
        if ((v26 & 0x80000000) == 0)
        {
          a1[17] = a5;
          return a5;
        }
      }
    }
    else
    {
      if ((int)v21 * (int)samples_per_frame > (int)a5)
        return 4294967294;
      a1[15] = samples_per_frame;
      a1[12] = bandwidth;
      a1[13] = v34;
      a1[11] = HIDWORD(v33);
      if (!(_DWORD)v21)
      {
LABEL_26:
        a1[17] = v24;
        return v24;
      }
      v28 = v21;
      v29 = v38;
      LODWORD(v24) = 0;
      while (1)
      {
        v26 = opus_decode_frame(a1, v25, *v29, (__int16 *)(a4 + 2 * a1[2] * (int)v24), (a5 - v24), 0, v22, v23);
        if ((v26 & 0x80000000) != 0)
          break;
        v30 = *v29++;
        v25 += v30;
        v24 = (v26 + v24);
        if (!--v28)
          goto LABEL_26;
      }
    }
    return v26;
  }
  return v24;
}

uint64_t opus_decode_frame(int *a1, unsigned __int8 *a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  __int16 *v13;
  signed int v14;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  signed int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  char *v43;
  _DWORD *v44;
  int v45;
  size_t v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned __int8 *v58;
  _BOOL4 v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  int v66;
  unsigned int v67;
  int32x2_t *v68;
  int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  size_t v79;
  unint64_t v80;
  int v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  size_t v95;
  char *v96;
  signed int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  __int16 *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int16 *v124;
  char v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  __int16 *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char *v154;
  uint64_t v155;
  __int16 *v156;
  _WORD *v157;
  __int16 v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int *v171;
  _BOOL4 v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char *v178;
  int v179;
  signed int v180;
  uint64_t v181;
  int v182;
  unsigned __int8 *v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v188 = 0;
  v8 = a1[3];
  v9 = (int)v8 / 50;
  v10 = ((int)v8 / 50) >> 3;
  if (v10 > (int)a5)
    return 4294967294;
  v12 = a6;
  v13 = a4;
  v14 = a3;
  v16 = (int *)*a1;
  v17 = a1[1];
  v18 = v9 >> 1;
  v186 = v9 >> 2;
  v193 = 0;
  v191 = 0u;
  v192 = 0u;
  v190 = 0u;
  v189 = 0;
  v19 = 3 * ((int)v8 / 25);
  if (v19 >= (int)a5)
    v11 = a5;
  else
    v11 = v19;
  if ((int)a3 > 1)
  {
    if (a2)
    {
      v181 = v17;
      v21 = v9 >> 1;
      v182 = a6;
      v22 = v16;
      v184 = (int)v8 / 50;
      v185 = v8;
      v23 = a1[15];
      v24 = a1[13];
      v26 = a3;
      ec_dec_init((uint64_t *)&v190, a2, a3);
      v27 = a1[14];
      if (v27 < 1)
      {
        v29 = 0;
        v179 = 0;
        v178 = 0;
        v34 = 1;
        v16 = v22;
        v14 = v26;
        v12 = v182;
        v18 = v21;
        v28 = a2;
      }
      else
      {
        if (v24 != 1002 || v27 == 1002)
        {
          v16 = v22;
          v18 = v21;
          v28 = a2;
          if (v24 != 1002)
          {
            v14 = v26;
            v17 = v181;
            if (v27 == 1002)
            {
              v178 = 0;
              v179 = a1[2] * v186;
              v29 = 1;
            }
            else
            {
              v29 = 0;
              v179 = 0;
              v178 = 0;
            }
            v34 = 1;
            v12 = v182;
            goto LABEL_46;
          }
          v29 = 0;
          v179 = 0;
          v178 = 0;
        }
        else
        {
          v28 = a2;
          if (a1[16])
          {
            v16 = v22;
            v18 = v21;
            v29 = 0;
            v179 = 0;
            v178 = 0;
            v24 = 1002;
          }
          else
          {
            v35 = v186;
            v36 = 2 * a1[2] * v186;
            v183 = v28;
            v37 = (char *)&v171 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
            bzero(v37, v36);
            if (v35 >= v23)
              v38 = v23;
            else
              v38 = v35;
            v178 = v37;
            v39 = v37;
            v40 = v183;
            opus_decode_frame(a1, 0, 0, v39, v38, 0);
            v28 = v40;
            v18 = v21;
            v16 = v22;
            v179 = 0;
            v24 = 1002;
            v29 = 1;
          }
        }
        v34 = 1;
        v14 = v26;
        v12 = v182;
      }
      v17 = v181;
      goto LABEL_46;
    }
  }
  else
  {
    v20 = a1[15];
    if ((int)v11 >= v20)
      v11 = v20;
    else
      v11 = v11;
  }
  v24 = a1[14];
  if (!v24)
  {
    if (a1[2] * (int)v11 >= 1)
      bzero(a4, 2 * (a1[2] * v11));
    return v11;
  }
  if ((int)v11 <= v9)
  {
    if ((int)v11 >= v9)
    {
      v178 = 0;
      v28 = 0;
      v34 = 0;
      v179 = 0;
      v29 = 0;
LABEL_48:
      HIDWORD(v176) = v29;
      v177 = v10;
      if (v24 == 1002)
      {
        v184 = v9;
        v185 = v8;
        v41 = 0;
        v175 = 0;
        v42 = 0;
        v173 = 0;
        v174 = 0;
        v172 = v12 == 0;
        v43 = &v194;
        LODWORD(v181) = 1002;
        goto LABEL_110;
      }
      LODWORD(v176) = v34;
      v171 = v16;
      v183 = v28;
LABEL_51:
      v184 = v9;
      v185 = v8;
      v44 = (int *)((char *)a1 + v17);
      if (v18 <= (int)v11)
        v45 = v11;
      else
        v45 = v18;
      v46 = 2 * a1[2] * v45;
      v43 = (char *)&v171 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v43, v46);
      if (a1[14] == 1002)
        silk_InitDecoder((uint64_t)v44);
      v180 = v14;
      v47 = 1000 * (int)v11 / a1[3];
      if (v47 <= 10)
        v47 = 10;
      a1[8] = v47;
      if ((_DWORD)v176)
      {
        a1[5] = a1[11];
        if (v24 == 1000 && (v48 = a1[12] - 1101, v48 <= 2))
          v49 = 4000 * v48 + 8000;
        else
          v49 = 16000;
        a1[7] = v49;
      }
      LODWORD(v181) = v24;
      v50 = 0;
      v182 = v12;
      if (v183)
        v51 = 2 * v12;
      else
        v51 = 1;
      v52 = v43;
      do
      {
        if (silk_Decode(v44, a1 + 4, v51, v50 == 0, (uint64_t)&v190, v52, &v189))
        {
          if (!v51)
            return 4294967293;
          v189 = v11;
          v53 = a1[2] * v11;
          if (v53 >= 1)
            bzero(v52, 2 * (a1[2] * v11));
          v54 = v11;
        }
        else
        {
          v54 = v189;
          v53 = a1[2] * v189;
        }
        v52 += 2 * v53;
        v50 += v54;
      }
      while (v50 < (int)v11);
      v55 = v176;
      if (v182)
        v55 = 0;
      if (v55 != 1)
      {
        v172 = v182 == 0;
        v42 = 0;
        v173 = 0;
        v174 = 0;
        v175 = 17;
        v41 = 1;
        v14 = v180;
        v28 = v183;
        goto LABEL_85;
      }
      v56 = __clz(v192);
      if (a1[13] == 1001)
        v57 = 20;
      else
        v57 = 0;
      v14 = v180;
      v28 = v183;
      if ((int)(DWORD2(v191) + v56 + v57 - 15) > 8 * v180)
      {
        v42 = 0;
        v173 = 0;
        v174 = 0;
        v175 = 17;
        v41 = 1;
        v172 = 1;
LABEL_85:
        v16 = v171;
        goto LABEL_110;
      }
      v58 = v183;
      if ((_DWORD)v181 == 1001)
      {
        v59 = ec_dec_bit_logp((uint64_t)&v190, 12);
        if (!v59)
        {
          v42 = 0;
          v173 = 0;
          v174 = 0;
          v175 = 17;
          LODWORD(v181) = 1001;
LABEL_109:
          v41 = 1;
          v172 = 1;
          v16 = v171;
          v28 = v58;
LABEL_110:
          v68 = (int32x2_t *)((char *)v16 + (_QWORD)a1);
          v69 = a1[12] - 1101;
          v180 = v14;
          v70 = v28;
          if (v69 > 3)
            v71 = 21;
          else
            v71 = dword_214F904D0[v69];
          opus_custom_decoder_ctl((int *)((char *)v16 + (_QWORD)a1), 10012, a3, (uint64_t)a4, a5, a6, a7, a8, (int *)v71);
          opus_custom_decoder_ctl(v68, 10008, v72, v73, v74, v75, v76, v77, (int *)a1[11]);
          v78 = v179;
          if (v42)
            v78 = 0;
          v79 = 2 * v78;
          v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF0;
          v81 = v42;
          if (v42)
            v82 = 0;
          else
            v82 = HIDWORD(v176);
          v83 = (char *)&v171 - v80;
          bzero((char *)&v171 - v80, v79);
          LODWORD(v176) = v82;
          v90 = v41 & v82;
          v91 = v41;
          v183 = v70;
          if (v90 == 1)
          {
            v92 = v81;
            if (v186 >= (int)v11)
              v93 = v11;
            else
              v93 = v186;
            opus_decode_frame(a1, 0, 0, v83, v93, 0);
            v178 = v83;
          }
          else
          {
            v92 = v81;
            if (v81)
            {
              v94 = v186;
              v95 = 2 * a1[2] * v186;
              v96 = (char *)&v171 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v96, v95);
              if (v174)
              {
                opus_custom_decoder_ctl(v68, 10010, v84, v85, v86, v87, v88, v89, 0);
                v97 = v180;
                celt_decode_with_ec(v68, &v183[v180], v173, v96, v94, 0);
                opus_custom_decoder_ctl(v68, 4031, v98, v99, v100, v101, v102, v103, &v188);
                HIDWORD(v176) = 1;
                v179 = 1;
                goto LABEL_128;
              }
              HIDWORD(v176) = 0;
              v179 = 0;
LABEL_127:
              v97 = v180;
LABEL_128:
              opus_custom_decoder_ctl(v68, 10010, v84, v85, v86, v87, v88, v89, (int *)v175);
              v182 = v92;
              if ((_DWORD)v181 == 1000)
              {
                LOWORD(v187) = -1;
                if (a1[2] * (int)v11 >= 1)
                  bzero(v13, 2 * (a1[2] * v11));
                if (a1[14] == 1001 && (!HIDWORD(v176) || !a1[16]))
                {
                  opus_custom_decoder_ctl(v68, 10010, v104, v105, v106, v107, v108, v109, 0);
                  celt_decode_with_ec(v68, (unsigned __int8 *)&v187, 2u, v13, v177, 0);
                }
                v110 = 0;
              }
              else
              {
                if (v184 >= (int)v11)
                  v111 = v11;
                else
                  v111 = v184;
                v112 = a1[14];
                if ((_DWORD)v181 != v112 && v112 >= 1 && !a1[16])
                  opus_custom_decoder_ctl(v68, 4028, v104, v105, v106, v107, v108, v109, v171);
                if (v172)
                  v113 = v183;
                else
                  v113 = 0;
                v110 = celt_decode_with_ec(v68, v113, v97, v13, v111, (uint64_t *)&v190);
                if (!v91)
                  goto LABEL_154;
              }
              v114 = (a1[2] * v11);
              if ((int)v114 >= 1)
              {
                v115 = v13;
                do
                {
                  v116 = *(__int16 *)v43;
                  v43 += 2;
                  v117 = *v115 + v116;
                  if (v117 >= 0x7FFF)
                    v117 = 0x7FFF;
                  if (v117 <= -32768)
                    LOWORD(v117) = 0x8000;
                  *v115++ = v117;
                  --v114;
                }
                while (v114);
              }
LABEL_154:
              v187 = 0;
              opus_custom_decoder_ctl(v68, 10015, v104, v105, v106, v107, v108, v109, (int *)&v187);
              v124 = *(__int16 **)(v187 + 64);
              v125 = v179;
              if (!v182)
                v125 = 1;
              v126 = v177;
              v127 = v186;
              if ((v125 & 1) == 0)
              {
                opus_custom_decoder_ctl(v68, 4028, v118, v119, v120, v121, v122, v123, v171);
                opus_custom_decoder_ctl(v68, 10010, v128, v129, v130, v131, v132, v133, 0);
                celt_decode_with_ec(v68, &v183[v97], v173, v96, v127, 0);
                opus_custom_decoder_ctl(v68, 4031, v134, v135, v136, v137, v138, v139, &v188);
                smooth_fade((uint64_t)&v13[a1[2] * ((int)v11 - v126)], (uint64_t)&v96[2 * a1[2] * v126], (uint64_t)&v13[a1[2] * ((int)v11 - v126)], v126, a1[2], v124, a1[3]);
              }
              if (HIDWORD(v176))
              {
                v140 = a1[2];
                v141 = v185;
                if ((int)v140 >= 1)
                {
                  v142 = 0;
                  if (v126 <= 1)
                    v143 = 1;
                  else
                    v143 = v126;
                  v144 = v13;
                  v145 = v96;
                  do
                  {
                    if (v141 >= 400)
                    {
                      v146 = 0;
                      v147 = v143;
                      do
                      {
                        v144[v146] = *(_WORD *)&v145[v146 * 2];
                        v146 += v140;
                        --v147;
                      }
                      while (v147);
                    }
                    ++v142;
                    v145 += 2;
                    ++v144;
                  }
                  while (v142 != v140);
                }
                smooth_fade((uint64_t)&v96[2 * (int)v140 * v126], (uint64_t)&v13[(int)v140 * v126], (uint64_t)&v13[(int)v140 * v126], v126, v140, v124, a1[3]);
              }
              if ((_DWORD)v176)
              {
                v148 = a1[2];
                if ((int)v11 >= v127)
                {
                  v153 = v148 * v126;
                  v154 = v178;
                  if (v148 * v126 >= 1)
                  {
                    v155 = (v148 * v126);
                    v156 = (__int16 *)v178;
                    v157 = v13;
                    do
                    {
                      v158 = *v156++;
                      *v157++ = v158;
                      --v155;
                    }
                    while (v155);
                  }
                  v150 = (uint64_t)&v154[2 * v153];
                  v149 = a1[3];
                  v151 = (uint64_t)&v13[v153];
                  v152 = v151;
                }
                else
                {
                  v149 = a1[3];
                  v150 = (uint64_t)v178;
                  v151 = (uint64_t)v13;
                  v152 = (uint64_t)v13;
                }
                smooth_fade(v150, v151, v152, v126, v148, v124, v149);
              }
              v159 = a1[10];
              v160 = v181;
              if (v159)
              {
                v161 = 21771 * (__int16)v159 + 0x4000;
                if ((__int16)(v161 >> 15) <= 15359)
                {
                  v163 = v161 >> 15;
                  if ((__int16)v163 >= -15360)
                  {
                    v164 = ((((((326528 * (v163 & 0x3FF)) >> 16) + 14819) * 32 * (v163 & 0x3FF) + 1494482944) >> 16)
                          * 32
                          * (v163 & 0x3FF)
                          + 1073676288) >> 16;
                    v162 = (__int16)v163 > -2049
                         ? v164 << (((__int16)v163 >> 10) + 2)
                         : v164 >> (-2 - ((__int16)v163 >> 10));
                  }
                  else
                  {
                    v162 = 0;
                  }
                }
                else
                {
                  v162 = 2130706432;
                }
                v165 = (a1[2] * v11);
                if ((int)v165 >= 1)
                {
                  do
                  {
                    v166 = (v162 >> 16) * *v13 + (((unsigned __int16)v162 * *v13 + 0x8000) >> 16);
                    if (v166 <= -32767)
                      v166 = -32767;
                    if (v166 >= 0x7FFF)
                      LOWORD(v166) = 0x7FFF;
                    *v13++ = v166;
                    --v165;
                  }
                  while (v165);
                }
              }
              v167 = v188 ^ v192;
              if (v97 < 2)
                v167 = 0;
              v168 = v182;
              a1[18] = v167;
              a1[14] = v160;
              v169 = v179 ^ 1;
              if (!v168)
                v169 = 0;
              a1[16] = v169;
              if (v110 >= 0)
                return v11;
              else
                return v110;
            }
          }
          HIDWORD(v176) = 0;
          v179 = v174;
          v96 = &v194;
          goto LABEL_127;
        }
        v60 = v59;
        v174 = ec_dec_bit_logp((uint64_t)&v190, 1);
        v61 = ec_dec_uint((uint64_t)&v190, 0x100u) + 2;
        v62 = DWORD2(v191);
        v63 = __clz(v192);
      }
      else
      {
        v60 = 1;
        v174 = ec_dec_bit_logp((uint64_t)&v190, 1);
        v62 = DWORD2(v191);
        v63 = __clz(v192);
        v61 = v14 - ((int)(DWORD2(v191) + v63 - 25) >> 3);
      }
      v65 = 8 * (v14 - v61);
      v66 = v62 + v63 - 32;
      if (v65 >= v66)
        v14 -= v61;
      else
        v14 = 0;
      if (v65 >= v66)
        v42 = v60;
      else
        v42 = 0;
      if (v65 >= v66)
        v67 = v61;
      else
        v67 = 0;
      v173 = v67;
      DWORD2(v190) -= v67;
      v175 = 17;
      goto LABEL_109;
    }
    if ((int)v11 <= v18)
    {
      if (v24 == 1000)
      {
        v171 = v16;
        v177 = ((int)v8 / 50) >> 3;
        v176 = 0;
        v179 = 0;
        v183 = 0;
        v178 = 0;
        goto LABEL_51;
      }
      v184 = (int)v8 / 50;
      v185 = v8;
      v179 = 0;
      v28 = 0;
      v178 = 0;
      v64 = (int)v11 >= v18 || (int)v11 <= v186;
      if (v64)
        v23 = v11;
      else
        v23 = v186;
      v29 = 0;
      v34 = 0;
    }
    else
    {
      v184 = (int)v8 / 50;
      v185 = v8;
      v29 = 0;
      v179 = 0;
      v34 = 0;
      v28 = 0;
      v178 = 0;
      v23 = v9 >> 1;
    }
LABEL_46:
    v64 = v23 <= (int)v11;
    LODWORD(v11) = v23;
    v8 = v185;
    v9 = v184;
    if (!v64)
      return 0xFFFFFFFFLL;
    goto LABEL_48;
  }
  v30 = v11;
  while (1)
  {
    v31 = v30 >= v9 ? v9 : v30;
    v32 = opus_decode_frame(a1, 0, 0, v13, v31, 0);
    if ((v32 & 0x80000000) != 0)
      break;
    v13 += a1[2] * (int)v32;
    v33 = __OFSUB__(v30, (_DWORD)v32);
    v30 -= v32;
    if ((v30 < 0) ^ v33 | (v30 == 0))
      return v11;
  }
  return v32;
}

uint64_t opus_decode(int *a1, char *a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if ((int)a5 < 1)
    return 0xFFFFFFFFLL;
  else
    return opus_decode_native(a1, a2, a3, a4, a5, a6, 0, 0, 0);
}

uint64_t opus_decoder_ctl(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int *v18;

  v10 = *a1;
  v11 = a1[1];
  result = 4294967291;
  v13 = (int *)((char *)a1 + v10);
  switch(a2)
  {
    case 4028:
      v14 = (uint64_t)a1 + v11;
      *(_OWORD *)(a1 + 15) = 0u;
      *(_OWORD *)(a1 + 11) = 0u;
      opus_custom_decoder_ctl(v13, 4028, a3, a4, a5, a6, a7, a8, v18);
      silk_InitDecoder(v14);
      result = 0;
      v15 = a1[3];
      a1[11] = a1[2];
      a1[15] = v15 / 400;
      return result;
    case 4029:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[3];
      goto LABEL_20;
    case 4030:
    case 4032:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
      return result;
    case 4031:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[18];
      goto LABEL_20;
    case 4033:
      if (!a9)
        return 0xFFFFFFFFLL;
      if (a1[14] == 1002)
      {
        opus_custom_decoder_ctl(v13, 4033, a3, a4, a5, a6, a7, a8, a9);
        return 0;
      }
      else
      {
        result = 0;
        *a9 = a1[9];
      }
      return result;
    case 4034:
      if ((_DWORD)a9 != (__int16)a9)
        return 0xFFFFFFFFLL;
      result = 0;
      a1[10] = (int)a9;
      return result;
    case 4039:
      v16 = a9;
      if (!a9)
        return 0xFFFFFFFFLL;
      result = 0;
      v17 = a1[17];
      goto LABEL_20;
    default:
      if (a2 == 4045)
      {
        v16 = a9;
        if (a9)
        {
          result = 0;
          v17 = a1[10];
          goto LABEL_20;
        }
      }
      else
      {
        if (a2 != 4009)
          return result;
        v16 = a9;
        if (a9)
        {
          result = 0;
          v17 = a1[12];
LABEL_20:
          *v16 = v17;
          return result;
        }
      }
      return 0xFFFFFFFFLL;
  }
}

uint64_t opus_decoder_get_nb_samples(uint64_t a1, _BYTE *a2, int a3)
{
  return opus_packet_get_nb_samples(a2, a3, *(_DWORD *)(a1 + 12));
}

uint64_t smooth_fade(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, __int16 *a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int v11;

  if (a5 >= 1)
  {
    v7 = 0;
    do
    {
      if (a4 >= 1)
      {
        v8 = 0;
        v9 = a4;
        v10 = a6;
        do
        {
          v11 = *v10 * *v10;
          *(_WORD *)(a3 + v8) = ((__int16)(v11 >> 15) * *(__int16 *)(a2 + v8)
                                             + ((int)((2 * v11) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                                             * *(__int16 *)(result + v8)) >> 15;
          v8 += 2 * a5;
          v10 += 48000 / a7;
          --v9;
        }
        while (v9);
      }
      ++v7;
      a2 += 2;
      result += 2;
      a3 += 2;
    }
    while (v7 != a5);
  }
  return result;
}

uint64_t opus_multistream_decoder_get_size(int a1, int a2)
{
  uint64_t result;
  int v5;
  int size;

  if (a1 < 1)
    return 0;
  result = 0;
  v5 = a1 - a2;
  if (a1 >= a2 && (a2 & 0x80000000) == 0)
  {
    size = opus_decoder_get_size(2);
    return ((opus_decoder_get_size(1) + 7) & 0xFFFFFFF8) * v5 + ((size + 7) & 0xFFFFFFF8) * a2 + 272;
  }
  return result;
}

uint64_t opus_multistream_decoder_init(unsigned int *a1, int a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  int size;
  int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 - 256 < 0xFFFFFF01 || a5 > a4)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if ((a5 & 0x80000000) == 0 && a4 >= 1 && a5 + a4 <= 255)
  {
    v10 = 0;
    *a1 = a3;
    a1[1] = a4;
    a1[2] = a5;
    do
    {
      *((_BYTE *)a1 + v10 + 12) = *(_BYTE *)(a6 + v10);
      ++v10;
    }
    while (a3 != v10);
    if (validate_layout(a1))
    {
      v11 = a1 + 68;
      size = opus_decoder_get_size(2);
      v13 = opus_decoder_get_size(1);
      if ((int)a1[2] < 1)
      {
        v14 = 0;
LABEL_19:
        if (v14 >= (int)a1[1])
        {
          return 0;
        }
        else
        {
          v16 = (int)((v13 + 7) & 0xFFFFFFF8);
          do
          {
            result = opus_decoder_init(v11, a2, 1u);
            if ((_DWORD)result)
              break;
            v11 = (_DWORD *)((char *)v11 + v16);
            ++v14;
          }
          while (v14 < (int)a1[1]);
        }
      }
      else
      {
        v14 = 0;
        v15 = (int)((size + 7) & 0xFFFFFFF8);
        while (1)
        {
          result = opus_decoder_init(v11, a2, 2u);
          if ((_DWORD)result)
            break;
          v11 = (_DWORD *)((char *)v11 + v15);
          if (++v14 >= (int)a1[2])
            goto LABEL_19;
        }
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t opus_multistream_decoder_create(_QWORD *a1, int a2, unsigned int a3, int a4, int a5, uint64_t a6, int *a7)
{
  BOOL v8;
  int size;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  int v19;

  v8 = a3 - 256 >= 0xFFFFFF01 && a5 <= a4;
  if (!v8 || a5 < 0 || a4 < 1 || a5 + a4 >= 256)
  {
    if (!a7)
      return 0;
    v17 = 0;
    v19 = -1;
    goto LABEL_16;
  }
  size = opus_multistream_decoder_get_size(a4, a5);
  v16 = (unsigned int *)heap_Alloc((uint64_t)a1, size);
  if (!v16)
  {
    if (!a7)
      return 0;
    v17 = 0;
    v19 = -7;
LABEL_16:
    *a7 = v19;
    return v17;
  }
  v17 = (uint64_t)v16;
  v18 = opus_multistream_decoder_init(v16, a2, a3, a4, a5, a6);
  if (a7)
    *a7 = v18;
  if (v18)
  {
    heap_Free(a1, v17);
    return 0;
  }
  return v17;
}

uint64_t opus_multistream_decode(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return opus_multistream_decode_native(a1, a2, a3, a4, (void (*)(uint64_t))opus_copy_channel_out_short, a5, a6, a8);
}

uint64_t opus_multistream_decode_native(int *a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  size_t v14;
  char *v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  char *v20;
  int v21;
  int nb_samples;
  int v23;
  int v24;
  signed int v25;
  int *v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  uint64_t left_channel;
  uint64_t mono_channel;
  int *v33;
  int v34;
  int i;
  uint64_t right_channel;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int size;
  uint64_t v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  char v50;
  __int16 v51[48];
  uint64_t v52;

  v42 = a7;
  LODWORD(v8) = a6;
  v11 = a3;
  v52 = *MEMORY[0x24BDAC8D0];
  v48 = 0;
  opus_multistream_decoder_ctl(a1, 4029, a3, a4, (uint64_t)a5, a6, a7, a8, v39);
  if ((int)v8 <= 0)
    v8 = v8;
  else
    v8 = 0;
  v14 = 4 * (_DWORD)v8;
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  size = opus_decoder_get_size(2);
  v43 = opus_decoder_get_size(1);
  if (v11 < 0)
    return 0xFFFFFFFFLL;
  if (!v11)
    goto LABEL_23;
  v47 = a2;
  v16 = a1[1];
  if (2 * v16 - 1 > v11)
    return 4294967292;
  v41 = v11;
  if (v16 >= 1)
  {
    v18 = 0;
    v19 = 0;
    v46 = v48;
    v50 = 0;
    v20 = v47;
    v21 = v41;
    v49 = 0;
    while (v21 >= 1)
    {
      result = opus_packet_parse_impl(v20, v21, v16 + v18 != 1, &v50, 0, v51, 0, &v49);
      if ((result & 0x80000000) != 0)
        return result;
      nb_samples = opus_packet_get_nb_samples(v20, v49, v46);
      v23 = nb_samples;
      if (v18)
      {
        if (v19 != nb_samples)
          break;
      }
      v20 += v49;
      v21 -= v49;
      --v18;
      v19 = nb_samples;
      if (!(v16 + v18))
        goto LABEL_18;
    }
    return 4294967292;
  }
  v23 = 0;
LABEL_18:
  result = v23 < 0 ? v23 : 4294967294;
  if ((v23 & 0x80000000) == 0)
  {
    v11 = v41;
    a2 = v47;
    if (v23 <= (int)v8)
    {
LABEL_23:
      v24 = a1[1];
      if (v24 < 1)
      {
LABEL_39:
        v37 = *a1;
        if (*a1 >= 1)
        {
          v38 = 0;
          do
          {
            if (*((unsigned __int8 *)a1 + v38 + 12) == 255)
            {
              a5(a4);
              v37 = *a1;
            }
            ++v38;
          }
          while (v38 < v37);
        }
      }
      else
      {
        v25 = 0;
        v26 = a1 + 68;
        v41 = v11;
        while (1)
        {
          v27 = v43;
          if (v25 < a1[2])
            v27 = size;
          if (v41 && v11 < 1)
            return 4294967293;
          v46 = v27;
          *(_DWORD *)v51 = 0;
          v8 = opus_decode_native(v26, a2, v11, (uint64_t)v15, v8, v42, v25 != v24 - 1, v51, 0);
          if ((int)v8 < 1)
            return v8;
          v47 = a2;
          v45 = *(int *)v51;
          v28 = a1;
          v29 = v25;
          v30 = -1;
          if (v25 >= a1[2])
          {
            while (1)
            {
              mono_channel = get_mono_channel(v28, v29, v30);
              if ((_DWORD)mono_channel == -1)
                break;
              ((void (*)(uint64_t, _QWORD, uint64_t, char *, uint64_t, uint64_t))a5)(a4, *a1, mono_channel, v15, 1, v8);
              v28 = a1;
              v29 = v25;
              v30 = mono_channel;
            }
          }
          else
          {
            while (1)
            {
              left_channel = get_left_channel(v28, v29, v30);
              if ((_DWORD)left_channel == -1)
                break;
              ((void (*)(uint64_t, _QWORD, uint64_t, char *, uint64_t, uint64_t))a5)(a4, *a1, left_channel, v15, 2, v8);
              v28 = a1;
              v29 = v25;
              v30 = left_channel;
            }
            v33 = a1;
            v34 = v25;
            for (i = -1; ; i = right_channel)
            {
              right_channel = get_right_channel(v33, v34, i);
              if ((_DWORD)right_channel == -1)
                break;
              ((void (*)(uint64_t, _QWORD, uint64_t, char *, uint64_t, uint64_t))a5)(a4, *a1, right_channel, v15 + 2, 2, v8);
              v33 = a1;
              v34 = v25;
            }
          }
          v26 = (int *)((char *)v26 + (int)((v46 + 7) & 0xFFFFFFF8));
          a2 = &v47[v45];
          v11 -= v45;
          ++v25;
          v24 = a1[1];
          if (v25 >= v24)
            goto LABEL_39;
        }
      }
      return v8;
    }
  }
  return result;
}

uint64_t opus_copy_channel_out_short(uint64_t result, int a2, int a3, _WORD *a4, int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;

  if (a4)
  {
    if (a6 >= 1)
    {
      v6 = a6;
      v7 = (_WORD *)(result + 2 * a3);
      do
      {
        *v7 = *a4;
        v7 += a2;
        a4 += a5;
        --v6;
      }
      while (v6);
    }
  }
  else if (a6 >= 1)
  {
    v8 = a6;
    v9 = (_WORD *)(result + 2 * a3);
    do
    {
      *v9 = 0;
      v9 += a2;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t opus_multistream_decode_float(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return opus_multistream_decode_native(a1, a2, a3, a4, (void (*)(uint64_t))opus_copy_channel_out_float, a5, a6, a8);
}

uint64_t opus_copy_channel_out_float(uint64_t result, int a2, int a3, __int16 *a4, int a5, int a6)
{
  uint64_t v6;
  float *v7;
  uint64_t v8;
  _DWORD *v9;

  if (a4)
  {
    if (a6 >= 1)
    {
      v6 = a6;
      v7 = (float *)(result + 4 * a3);
      do
      {
        *v7 = (float)*a4 * 0.000030518;
        v7 += a2;
        a4 += a5;
        --v6;
      }
      while (v6);
    }
  }
  else if (a6 >= 1)
  {
    v8 = a6;
    v9 = (_DWORD *)(result + 4 * a3);
    do
    {
      *v9 = 0;
      v9 += a2;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t opus_multistream_decoder_ctl(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int size;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int **v26;
  int **v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int **v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  int ***v37;
  int **v38;
  int i;
  int v40;
  int *v41;
  int v42;
  int **v43;

  v43 = (int **)&a9;
  size = opus_decoder_get_size(2);
  v18 = opus_decoder_get_size(1);
  v19 = a1 + 68;
  result = 4294967291;
  if (a2 > 4044)
  {
    if (a2 == 4045)
    {
LABEL_17:
      v26 = v43++;
      return opus_decoder_ctl(a1 + 68, a2, v12, v13, v14, v15, v16, v17, *v26);
    }
    else if (a2 == 5122)
    {
      v24 = (int *)v43++;
      v25 = *v24;
      if (v25 < 0 || v25 >= a1[1])
        result = 0xFFFFFFFFLL;
      else
        result = 0;
      v37 = (int ***)v43++;
      v38 = *v37;
      if (v38)
      {
        if (v25 >= 1)
        {
          for (i = 0; i != v25; ++i)
          {
            if (i >= a1[2])
              v40 = v18;
            else
              v40 = size;
            v19 = (int *)((char *)v19 + (int)((v40 + 7) & 0xFFFFFFF8));
          }
        }
        *v38 = v19;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 4028:
        if ((int)a1[1] < 1)
          return 0;
        v21 = 0;
        while (1)
        {
          v22 = a1[2];
          result = opus_decoder_ctl(v19, 4028, v12, v13, v14, v15, v16, v17, v41);
          if ((_DWORD)result)
            break;
          if (v21 >= v22)
            v23 = v18;
          else
            v23 = size;
          v19 = (int *)((char *)v19 + (int)((v23 + 7) & 0xFFFFFFF8));
          if (++v21 >= a1[1])
            return 0;
        }
        return result;
      case 4029:
      case 4039:
        goto LABEL_17;
      case 4030:
      case 4032:
      case 4033:
      case 4035:
      case 4036:
      case 4037:
      case 4038:
        return result;
      case 4031:
        v27 = v43++;
        v28 = *v27;
        v42 = 0;
        if (!v28)
          return 0xFFFFFFFFLL;
        *v28 = 0;
        if ((int)a1[1] < 1)
          return 0;
        v29 = 0;
        while (1)
        {
          v30 = a1[2];
          result = opus_decoder_ctl(v19, 4031, v12, v13, v14, v15, v16, v17, &v42);
          if ((_DWORD)result)
            break;
          if (v29 >= v30)
            v31 = v18;
          else
            v31 = size;
          v19 = (int *)((char *)v19 + (int)((v31 + 7) & 0xFFFFFFF8));
          *v28 ^= v42;
          if (++v29 >= a1[1])
            return 0;
        }
        return result;
      case 4034:
        v32 = v43++;
        if ((int)a1[1] < 1)
          return 0;
        v33 = 0;
        v34 = (int *)*(unsigned int *)v32;
        break;
      default:
        if (a2 == 4009)
          goto LABEL_17;
        return result;
    }
    while (1)
    {
      v35 = a1[2];
      result = opus_decoder_ctl(v19, 4034, v12, v13, v14, v15, v16, v17, v34);
      if ((_DWORD)result)
        break;
      if (v33 >= v35)
        v36 = v18;
      else
        v36 = size;
      v19 = (int *)((char *)v19 + (int)((v36 + 7) & 0xFFFFFFF8));
      if (++v33 >= a1[1])
        return 0;
    }
  }
  return result;
}

uint64_t opus_repacketizer_get_size()
{
  return 496;
}

uint64_t opus_repacketizer_init(uint64_t result)
{
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t opus_repacketizer_cat(char *a1, char *a2, int a3)
{
  return opus_repacketizer_cat_impl(a1, a2, a3, 0);
}

uint64_t opus_repacketizer_cat_impl(char *a1, char *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int nb_frames;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 < 1)
    return 4294967292;
  v15 = v4;
  v16 = v5;
  if (*((_DWORD *)a1 + 1))
  {
    if ((*a2 ^ *a1) > 3)
      return 4294967292;
  }
  else
  {
    *a1 = *a2;
    *((_DWORD *)a1 + 122) = opus_packet_get_samples_per_frame(a2, 8000);
  }
  nb_frames = opus_packet_get_nb_frames(a2, a3);
  if (nb_frames < 1)
    return 4294967292;
  v12 = nb_frames;
  v13 = *((int *)a1 + 1);
  if (((int)v13 + nb_frames) * *((_DWORD *)a1 + 122) > 960)
    return 4294967292;
  v14 = 0;
  result = opus_packet_parse_impl(a2, a3, a4, &v14, (char **)&a1[8 * v13 + 8], (__int16 *)&a1[2 * v13 + 392], 0, 0);
  if ((int)result >= 1)
  {
    result = 0;
    *((_DWORD *)a1 + 1) += v12;
  }
  return result;
}

uint64_t opus_repacketizer_get_nb_frames(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t opus_repacketizer_out_range_impl(uint64_t a1, unsigned int a2, int a3, _BYTE *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  unint64_t v8;
  int v10;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  char v17;
  int v18;
  int v19;
  _BYTE *v20;
  __int16 *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  size_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  int v43;
  int v44;
  uint64_t v45;

  v7 = 0xFFFFFFFFLL;
  if ((a2 & 0x80000000) != 0)
    return v7;
  v8 = a3 - a2;
  if (a3 <= (int)a2 || *(_DWORD *)(a1 + 4) < a3)
    return v7;
  v10 = a7;
  v14 = a1 + 392;
  v15 = a2;
  v16 = (__int16 *)(a1 + 392 + 2 * a2);
  if (a6)
  {
    if (v16[(int)v8 - 1] <= 251)
      v7 = 1;
    else
      v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  if ((_DWORD)v8 == 2)
  {
    v18 = (unsigned __int16)v16[1];
    v19 = (unsigned __int16)*v16;
    if (v18 != v19)
    {
      v23 = v7 + (__int16)v18 + (__int16)v19;
      if ((__int16)v19 > 251)
        ++v23;
      v7 = (v23 + 2);
      if ((int)v7 > (int)a5)
        return 4294967294;
      *a4 = *(_BYTE *)a1 & 0xFC | 2;
      v45 = a1 + 392 + 2 * a2;
      v20 = &a4[(int)encode_size(*v16, a4 + 1) + 1];
      if (!v10)
        goto LABEL_64;
LABEL_20:
      if ((int)v7 < (int)a5)
      {
LABEL_21:
        if (a6)
        {
          v21 = (__int16 *)v45;
          if (*(__int16 *)(v45 + 2 * (int)v8 - 2) <= 251)
            v22 = 3;
          else
            v22 = 4;
        }
        else
        {
          v22 = 2;
          v21 = (__int16 *)v45;
        }
        v24 = *v21;
        if ((int)v8 >= 2)
        {
          v25 = 1;
          if ((unsigned __int16)v21[1] != (unsigned __int16)v24)
          {
LABEL_37:
            v28 = v8 - 1;
            if ((int)v8 - 1 <= 1)
              v29 = 1;
            else
              v29 = v28;
            v30 = 2 * v15 + 392;
            do
            {
              v31 = *(__int16 *)(a1 + v30);
              if (v31 <= 251)
                v32 = 1;
              else
                v32 = 2;
              v22 += v31 + v32;
              v30 += 2;
              --v29;
            }
            while (v29);
            v7 = (v22 + v21[v28]);
            if ((int)v7 > (int)a5)
              return 4294967294;
            *a4 = *(_BYTE *)a1 | 3;
            v33 = v8 | 0x80;
            a4[1] = v8 | 0x80;
            goto LABEL_50;
          }
          v26 = 0;
          while (v8 - 2 != v26)
          {
            v27 = *(unsigned __int16 *)(a1 + 2 * v15 + 396 + 2 * v26++);
            if (v27 != (unsigned __int16)v24)
            {
              v25 = v26 + 1 < v8;
              goto LABEL_37;
            }
          }
        }
        v7 = (v22 + v8 * v24);
        if ((int)v7 > (int)a5)
          return 4294967294;
        v25 = 0;
        *a4 = *(_BYTE *)a1 | 3;
        a4[1] = v8;
        v33 = v8;
LABEL_50:
        v20 = a4 + 2;
        v34 = a5 - v7;
        v45 = (uint64_t)v21;
        if (v10 && (_DWORD)a5 != (_DWORD)v7)
        {
          a4[1] = v33 | 0x40;
          v35 = (v34 - 1) / 255;
          if (v34 >= 256)
          {
            if (v35 <= 1)
              v36 = 1;
            else
              v36 = v35;
            v43 = v36;
            v37 = v25;
            memset(a4 + 2, 255, v36);
            v25 = v37;
            v21 = (__int16 *)v45;
            v20 = &a4[v43 - 1 + 3];
          }
          *v20++ = v35 + v34 - 1;
          v7 = a5;
        }
        v38 = !v25;
        if ((int)v8 < 2)
          v38 = 1;
        if ((v38 & 1) == 0)
        {
          v44 = v10;
          v39 = (v8 - 1);
          v40 = v21;
          do
          {
            v41 = *v40++;
            v20 += (int)encode_size(v41, v20);
            --v39;
          }
          while (v39);
          v10 = v44;
        }
        goto LABEL_64;
      }
      goto LABEL_64;
    }
    v7 = (v7 + 2 * (__int16)v19 + 1);
    if ((int)v7 <= (int)a5)
    {
      v45 = a1 + 392 + 2 * a2;
      v17 = *(_BYTE *)a1 & 0xFC | 1;
LABEL_16:
      *a4 = v17;
      v20 = a4 + 1;
      if (!a7)
        goto LABEL_64;
      goto LABEL_20;
    }
    return 4294967294;
  }
  if ((_DWORD)v8 == 1)
  {
    v7 = (v7 + *v16 + 1);
    if ((int)v7 <= (int)a5)
    {
      v45 = a1 + 392 + 2 * a2;
      v17 = *(_BYTE *)a1 & 0xFC;
      goto LABEL_16;
    }
    return 4294967294;
  }
  v45 = a1 + 392 + 2 * a2;
  v20 = a4;
  if ((int)v8 > 2)
    goto LABEL_21;
  if (a7)
    goto LABEL_20;
LABEL_64:
  if (a6)
    v20 += (int)encode_size(*(__int16 *)(v45 + 2 * (int)v8 - 2), v20);
  if ((int)v8 >= 1)
  {
    do
    {
      memmove(v20, *(const void **)(v14 + 8 * v15 - 384), *(__int16 *)(v14 + 2 * v15));
      v20 += *(__int16 *)(v14 + 2 * v15++);
      --v8;
    }
    while (v8);
  }
  if (v10 && (int)v20 - (int)a4 < (int)a5)
    bzero(&a4[(int)v20 - (int)a4], ((_DWORD)a4 + a5 + ~(_DWORD)v20) + 1);
  return v7;
}

uint64_t opus_repacketizer_out_range(uint64_t a1, unsigned int a2, int a3, _BYTE *a4, uint64_t a5)
{
  return opus_repacketizer_out_range_impl(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t opus_repacketizer_out(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return opus_repacketizer_out_range_impl(a1, 0, *(_DWORD *)(a1 + 4), a2, a3, 0, 0);
}

uint64_t opus_packet_pad(char *__src, size_t __len, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  char *v9;
  int v10;
  _OWORD v11[31];
  uint64_t v12;
  uint64_t v13;

  if ((int)__len < 1)
    return 0xFFFFFFFFLL;
  v12 = v3;
  v13 = v4;
  v6 = __len;
  if ((_DWORD)__len == (_DWORD)a3)
    return 0;
  if ((int)__len > (int)a3)
    return 0xFFFFFFFFLL;
  v9 = &__src[a3 - __len];
  memset(v11, 0, sizeof(v11));
  memmove(v9, __src, __len);
  opus_repacketizer_cat_impl((char *)v11, v9, v6, 0);
  v10 = opus_repacketizer_out_range_impl((uint64_t)v11, 0, SDWORD1(v11[0]), __src, a3, 0, 1);
  return v10 & (v10 >> 31);
}

uint64_t opus_packet_unpad(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD v7[31];
  uint64_t v8;
  uint64_t v9;

  if ((int)a2 < 1)
    return 0xFFFFFFFFLL;
  v8 = v2;
  v9 = v3;
  memset(v7, 0, sizeof(v7));
  result = opus_repacketizer_cat_impl((char *)v7, a1, a2, 0);
  if ((result & 0x80000000) == 0)
    return opus_repacketizer_out_range_impl((uint64_t)v7, 0, SDWORD1(v7[0]), a1, a2, 0, 0);
  return result;
}

uint64_t opus_multistream_packet_pad(char *__src, size_t __len, int a3, int a4)
{
  size_t v4;
  int v5;
  uint64_t result;
  int v8;
  int v9;
  char v10;
  __int16 v11[48];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((int)__len < 1)
    return 0xFFFFFFFFLL;
  v4 = __len;
  v5 = a3 - __len;
  if (a3 == (_DWORD)__len)
    return 0;
  if (a3 < (int)__len)
    return 0xFFFFFFFFLL;
  v10 = 0;
  v9 = 0;
  if (a4 < 2)
    return opus_packet_pad(__src, v4, (v5 + v4));
  v8 = a4 - 1;
  while ((int)v4 >= 1)
  {
    result = opus_packet_parse_impl(__src, v4, 1, &v10, 0, v11, 0, &v9);
    if ((result & 0x80000000) != 0)
      return result;
    __src += v9;
    v4 = (v4 - v9);
    if (!--v8)
      return opus_packet_pad(__src, v4, (v5 + v4));
  }
  return 4294967292;
}

uint64_t opus_multistream_packet_unpad(_BYTE *a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD v10[31];
  int v11;
  char v12;
  __int16 v13[48];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 < 1)
    return 0xFFFFFFFFLL;
  v3 = a3;
  if (a3 < 1)
    return 0;
  v4 = a2;
  v5 = a1;
  LODWORD(v6) = 0;
  v12 = 0;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v7 = a1;
  while ((int)v4 >= 1)
  {
    DWORD1(v10[0]) = 0;
    v8 = opus_packet_parse_impl(v7, v4, v3 != 1, &v12, 0, v13, 0, &v11);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = opus_repacketizer_cat_impl((char *)v10, v7, v11, v3 != 1);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v8 = opus_repacketizer_out_range_impl((uint64_t)v10, 0, SDWORD1(v10[0]), v5, v4, v3 != 1, 0);
    if ((v8 & 0x80000000) != 0)
      return v8;
    v6 = (v8 + v6);
    v5 += v8;
    v7 += v11;
    v4 = (v4 - v11);
    if (!--v3)
      return v6;
  }
  return 4294967292;
}

uint64_t encode_size(int a1, _BYTE *a2)
{
  uint64_t v2;

  if (a1 >= 252)
  {
    a2[1] = (a1 - (a1 | 0xFCu)) >> 2;
    v2 = 2;
    LOBYTE(a1) = a1 | 0xFC;
  }
  else
  {
    v2 = 1;
  }
  *a2 = a1;
  return v2;
}

uint64_t opus_packet_parse_impl(char *a1, int a2, int a3, _BYTE *a4, char **a5, __int16 *a6, _DWORD *a7, _DWORD *a8)
{
  __int16 *v10;
  int samples_per_frame;
  char v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t result;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _WORD *v49;

  if (!a6)
    return 0xFFFFFFFFLL;
  v10 = a6;
  samples_per_frame = opus_packet_get_samples_per_frame(a1, 48000);
  v18 = a1 + 1;
  v17 = *a1;
  v19 = a2 - 1;
  v20 = *a1 & 3;
  if ((*a1 & 3) == 0)
  {
    v22 = 0;
    v21 = 1;
    v23 = a2 - 1;
    goto LABEL_9;
  }
  if (v20 == 2)
  {
    if (a2 >= 2)
    {
      v28 = *v18;
      if (v28 < 0xFC)
      {
        v29 = 1;
LABEL_63:
        *v10 = v28;
        v19 -= v29;
        v23 = v19 - v28;
        if (v19 < (int)v28)
          return 4294967292;
        v22 = 0;
        v20 = 0;
        v21 = 2;
        v18 += v29;
        goto LABEL_9;
      }
      if (a2 >= 3)
      {
        v28 += 4 * a1[2];
        v29 = 2;
        goto LABEL_63;
      }
    }
    *v10 = -1;
    return 4294967292;
  }
  if (v20 == 1)
  {
    if (a3)
    {
      v20 = 0;
      v21 = 2;
      v22 = 1;
      v23 = a2 - 1;
      if (v23 < 1)
        goto LABEL_30;
LABEL_10:
      v26 = *v18;
      if (v26 < 0xFC)
      {
        v27 = 1;
        goto LABEL_41;
      }
      if (v23 >= 2)
      {
        LOWORD(v26) = v26 + 4 * v18[1];
        v27 = 2;
      }
      else
      {
LABEL_30:
        v27 = -1;
        LOWORD(v26) = -1;
      }
LABEL_41:
      v10[v21 - 1] = v26;
      v36 = (v21 - 1);
      v37 = v10[v36];
      result = 4294967292;
      if (v37 < 0)
        return result;
      v38 = v23 - v27;
      if (v38 < v37)
        return result;
      v18 += v27;
      if (v22)
      {
        if ((int)v21 * v37 > v38)
          return result;
        if ((int)v21 >= 2)
        {
          v39 = (v21 - 1);
          v40 = v10;
          do
          {
            *v40++ = v10[v36];
            --v39;
          }
          while (v39);
        }
      }
      else if (v27 + v37 > v19)
      {
        return result;
      }
      goto LABEL_50;
    }
    if ((v19 & 1) == 0)
    {
      v20 = 0;
      if (v19 >= 0)
        v35 = a2 - 1;
      else
        v35 = a2;
      v25 = v35 >> 1;
      *v10 = v35 >> 1;
      v21 = 2;
      goto LABEL_36;
    }
    return 4294967292;
  }
  v23 = a2 - 2;
  if (a2 < 2)
    return 4294967292;
  v30 = samples_per_frame;
  v31 = *v18;
  result = 4294967292;
  v21 = *v18 & 0x3F;
  if ((*v18 & 0x3F) == 0 || (int)v21 * v30 > 5760)
    return result;
  v18 = a1 + 2;
  v20 = 0;
  if ((v31 & 0x40) != 0)
  {
    while (v23 >= 1)
    {
      v33 = *v18++;
      v32 = v33;
      if (v33 >= 0xFE)
        v34 = 254;
      else
        v34 = v32;
      v23 += ~v34;
      v20 += v34;
      if (v32 != 255)
      {
        if (v23 < 0)
          return 4294967292;
        goto LABEL_26;
      }
    }
    return 4294967292;
  }
LABEL_26:
  if (v31 < 0)
  {
    if (v21 < 2)
    {
      v22 = 0;
      v19 = v23;
    }
    else
    {
      v44 = (v21 - 1);
      v45 = v10;
      v19 = v23;
      do
      {
        if (v19 < 1)
        {
LABEL_84:
          *v45 = -1;
          return 4294967292;
        }
        v46 = *v18;
        if (v46 >= 0xFC)
        {
          if (v19 < 2)
            goto LABEL_84;
          v46 += 4 * v18[1];
          v47 = 2;
        }
        else
        {
          v47 = 1;
        }
        *v45 = v46;
        v19 -= v47;
        if (v19 < (int)v46)
          return 4294967292;
        v18 += v47;
        v23 = v23 - v47 - v46;
        ++v45;
        --v44;
      }
      while (v44);
      if (v23 < 0)
        return 4294967292;
      v22 = 0;
    }
  }
  else
  {
    if (a3)
    {
      v22 = 1;
      goto LABEL_10;
    }
    v25 = v23 / v21;
    if (v23 / v21 * (_DWORD)v21 != v23)
      return 4294967292;
    if (v21 < 2)
      goto LABEL_36;
    v48 = (v21 - 1);
    v49 = v10;
    v22 = 1;
    do
    {
      *v49++ = v25;
      --v48;
    }
    while (v48);
    v19 = v23;
    v23 /= v21;
  }
LABEL_9:
  v25 = v23;
  v23 = v19;
  v19 = v25;
  if (a3)
    goto LABEL_10;
LABEL_36:
  if (v25 > 1275)
    return 4294967292;
  v10[(v21 - 1)] = v25;
LABEL_50:
  if (a7)
    *a7 = (_DWORD)v18 - (_DWORD)a1;
  if ((_DWORD)v21)
  {
    v41 = v21;
    v42 = a5;
    do
    {
      if (a5)
        *v42 = v18;
      v43 = *v10++;
      v18 += v43;
      ++v42;
      --v41;
    }
    while (v41);
  }
  if (a8)
    *a8 = v20 + (_DWORD)v18 - (_DWORD)a1;
  if (a4)
    *a4 = v17;
  return v21;
}

unint64_t opus_packet_get_samples_per_frame(_BYTE *a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v2 = *a1;
  if ((char)*a1 < 0)
  {
    v8 = 1374389535 * (a2 << ((*a1 >> 3) & 3));
    return (v8 >> 39) + ((unint64_t)v8 >> 63);
  }
  else
  {
    v3 = 1374389535 * (a2 << ((*a1 >> 3) & 3));
    v4 = (v3 >> 37) + ((unint64_t)v3 >> 63);
    if (((v2 >> 3) & 3) == 3)
      v5 = 60 * a2 / 1000;
    else
      v5 = v4;
    v6 = a2 / 50;
    if ((v2 & 8) == 0)
      v6 = a2 / 100;
    if ((~v2 & 0x60) != 0)
      return v5;
    else
      return v6;
  }
}

uint64_t opus_packet_parse(char *a1, int a2, _BYTE *a3, char **a4, __int16 *a5, _DWORD *a6)
{
  return opus_packet_parse_impl(a1, a2, 0, a3, a4, a5, a6, 0);
}

uint64_t opus_packet_get_bandwidth(char *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned int v6;

  v1 = *a1;
  if ((v1 & 0x10) != 0)
    v2 = 1105;
  else
    v2 = 1104;
  if ((~v1 & 0x60) != 0)
    v3 = ((v1 >> 5) & 3) + 1101;
  else
    v3 = v2;
  v5 = (v1 >> 5) & 3;
  v4 = v5 == 0;
  v6 = v5 + 1102;
  if (v4)
    v6 = 1101;
  if (*a1 < 0)
    return v6;
  else
    return v3;
}

uint64_t opus_packet_get_nb_channels(_BYTE *a1)
{
  if ((*a1 & 4) != 0)
    return 2;
  else
    return 1;
}

uint64_t opus_packet_get_nb_frames(_BYTE *a1, int a2)
{
  if (a2 < 1)
    return 0xFFFFFFFFLL;
  if ((*a1 & 3) == 0)
    return 1;
  if ((*a1 & 3) != 3)
    return 2;
  if (a2 >= 2)
    return a1[1] & 0x3F;
  return 4294967292;
}

uint64_t opus_packet_get_nb_samples(_BYTE *a1, int a2, int a3)
{
  int v5;
  unsigned int v6;

  if (a2 < 1)
    return 0xFFFFFFFFLL;
  if ((*a1 & 3) != 0)
  {
    if ((*a1 & 3) == 3)
    {
      if (a2 < 2)
        return 4294967292;
      v5 = a1[1] & 0x3F;
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = opus_packet_get_samples_per_frame(a1, a3) * v5;
  if ((int)(25 * v6) <= 3 * a3)
    return v6;
  else
    return 4294967292;
}

uint64_t validate_layout(unsigned int *a1)
{
  int v1;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;

  v1 = a1[2] + a1[1];
  if (v1 > 255)
    return 0;
  v3 = *a1;
  if ((int)v3 >= 1)
  {
    v4 = (unsigned __int8 *)(a1 + 3);
    while (1)
    {
      v6 = *v4++;
      v5 = v6;
      if (v6 != 255 && v1 <= v5)
        break;
      if (!--v3)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t get_left_channel(int *a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;

  if (a3 >= 0)
    result = (a3 + 1);
  else
    result = 0;
  v5 = *a1;
  if ((int)result >= *a1)
    return 0xFFFFFFFFLL;
  v6 = (unsigned __int8 *)a1 + result + 12;
  while (1)
  {
    v7 = *v6++;
    if (2 * a2 == v7)
      break;
    result = (result + 1);
    if (v5 == (_DWORD)result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t get_right_channel(int *a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;

  if (a3 >= 0)
    result = (a3 + 1);
  else
    result = 0;
  v5 = *a1;
  if ((int)result >= *a1)
    return 0xFFFFFFFFLL;
  v6 = (unsigned __int8 *)a1 + result + 12;
  while (1)
  {
    v7 = *v6++;
    if (((2 * a2) | 1) == v7)
      break;
    result = (result + 1);
    if (v5 == (_DWORD)result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t get_mono_channel(int *a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;

  if (a3 >= 0)
    result = (a3 + 1);
  else
    result = 0;
  v5 = *a1;
  if ((int)result >= *a1)
    return 0xFFFFFFFFLL;
  v6 = a1[2] + a2;
  v7 = (unsigned __int8 *)a1 + result + 12;
  while (1)
  {
    v8 = *v7++;
    if (v6 == v8)
      break;
    result = (result + 1);
    if (v5 == (_DWORD)result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ogg_page_version(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)a1 + 4);
}

uint64_t ogg_page_continued(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) & 1;
}

uint64_t ogg_page_bos(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) & 2;
}

uint64_t ogg_page_eos(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) & 4;
}

uint64_t ogg_page_granulepos(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 6);
}

uint64_t ogg_page_serialno(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 14);
}

uint64_t ogg_page_pageno(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 18);
}

uint64_t ogg_page_packets(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *a1;
  v2 = *(unsigned __int8 *)(*a1 + 26);
  if (!*(_BYTE *)(*a1 + 26))
    return 0;
  LODWORD(result) = 0;
  v4 = (unsigned __int8 *)(v1 + 27);
  do
  {
    v5 = *v4++;
    if (v5 == 255)
      result = result;
    else
      result = (result + 1);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t ogg_stream_init(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;

  if (!a1)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 8) = 0x4000;
  *(_QWORD *)(a1 + 48) = 1024;
  v4 = malloc(0x4000uLL);
  *(_QWORD *)a1 = v4;
  v5 = malloc(0x1000uLL);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = malloc(0x2000uLL);
  *(_QWORD *)(a1 + 40) = v6;
  if (v4 && v5 && v6)
  {
    result = 0;
    *(_QWORD *)(a1 + 376) = a2;
  }
  else
  {
    ogg_stream_clear(a1);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ogg_stream_clear(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = *(void **)a1;
    if (v2)
      free(v2);
    v3 = *(void **)(a1 + 32);
    if (v3)
      free(v3);
    v4 = *(void **)(a1 + 40);
    if (v4)
      free(v4);
    *(_QWORD *)(a1 + 400) = 0;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return 0;
}

uint64_t ogg_stream_check(_QWORD *a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (*a1)
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t ogg_stream_destroy(void *a1)
{
  if (a1)
  {
    ogg_stream_clear((uint64_t)a1);
    free(a1);
  }
  return 0;
}

uint64_t ogg_page_checksum_set(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t updated;

  if (result)
  {
    v1 = result;
    *(_BYTE *)(*(_QWORD *)result + 22) = 0;
    *(_BYTE *)(*(_QWORD *)result + 23) = 0;
    *(_BYTE *)(*(_QWORD *)result + 24) = 0;
    *(_BYTE *)(*(_QWORD *)result + 25) = 0;
    v2 = *(_QWORD *)result;
    updated = _os_update_crc(0, *(unsigned __int8 **)result, *(_DWORD *)(result + 8));
    result = _os_update_crc(updated, *(unsigned __int8 **)(v1 + 16), *(_DWORD *)(v1 + 24));
    *(_BYTE *)(v2 + 22) = result;
    *(_BYTE *)(*(_QWORD *)v1 + 23) = BYTE1(result);
    *(_BYTE *)(*(_QWORD *)v1 + 24) = BYTE2(result);
    *(_BYTE *)(*(_QWORD *)v1 + 25) = BYTE3(result);
  }
  return result;
}

uint64_t _os_update_crc(uint64_t result, unsigned __int8 *a2, int a3)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;

  if (a3 < 8)
  {
    v4 = a3;
    if (!a3)
      return result;
    goto LABEL_6;
  }
  do
  {
    v3 = bswap32(*(_DWORD *)a2);
    result = crc_lookup[((v3 ^ result) >> 16) + 1536] ^ crc_lookup[((v3 ^ result) >> 24)
                                                                                                + 1792] ^ crc_lookup[((unsigned __int16)(v3 ^ result) >> 8) + 1280] ^ crc_lookup[(v3 ^ result) + 1024] ^ (crc_lookup[a2[4] + 768] ^ crc_lookup[a2[5] + 512]) ^ crc_lookup[a2[6] + 256] ^ crc_lookup[a2[7]];
    a2 += 8;
    v4 = a3 - 8;
    v5 = a3 > 0xF;
    a3 -= 8;
  }
  while (v5);
  for (; v4; --v4)
  {
LABEL_6:
    v6 = *a2++;
    result = (crc_lookup[v6 ^ BYTE3(result)] ^ ((_DWORD)result << 8));
  }
  return result;
}

uint64_t ogg_stream_iovecin(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    return 0xFFFFFFFFLL;
  v6 = *(char **)a1;
  if (!v6)
    return 0xFFFFFFFFLL;
  if (!a2)
    return 0;
  LODWORD(v10) = a3;
  if (a3 < 1)
  {
    v11 = 0;
LABEL_12:
    v17 = *(_QWORD *)(a1 + 24);
    if (v17)
    {
      v18 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v18 - v17;
      if (v18 != v17)
        memmove(v6, &v6[v17], v18 - v17);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (_os_body_expand(a1, v11) || _os_lacing_expand(a1, v11 / 255 + 1))
      return 0xFFFFFFFFLL;
    if ((int)v10 >= 1)
    {
      v10 = v10;
      v19 = *(_QWORD *)(a1 + 16);
      v20 = (size_t *)(a2 + 8);
      do
      {
        memcpy((void *)(*(_QWORD *)a1 + v19), (const void *)*(v20 - 1), *v20);
        v19 = *(int *)v20 + *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;
        v20 += 2;
        --v10;
      }
      while (v10);
    }
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 56);
    if (v11 <= 254)
    {
      v25 = 0;
      v24 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 40);
      do
      {
        *(_DWORD *)(v21 + 4 * v22 + 4 * v23) = 255;
        *(_QWORD *)(v24 + 8 * v22 + 8 * v23++) = *(_QWORD *)(a1 + 400);
      }
      while (v11 / 255 != v23);
      v25 = v11 / 255;
    }
    v26 = v22 + v25;
    *(_DWORD *)(v21 + 4 * v26) = v11 % 255;
    *(_QWORD *)(v24 + 8 * v26) = a5;
    *(_DWORD *)(v21 + 4 * v22) |= 0x100u;
    *(_QWORD *)(a1 + 56) = v22 + v11 / 255 + 1;
    ++*(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 400) = a5;
    if (a4)
    {
      v14 = 0;
      *(_DWORD *)(a1 + 368) = 1;
      return v14;
    }
    return 0;
  }
  v11 = 0;
  v12 = a3;
  v13 = (uint64_t *)(a2 + 8);
  v14 = 0xFFFFFFFFLL;
  while (1)
  {
    v16 = *v13;
    v13 += 2;
    v15 = v16;
    if (v16 < 0 || v11 > (v15 ^ 0x7FFFFFFFFFFFFFFFLL))
      return v14;
    v11 += v15;
    if (!--v12)
      goto LABEL_12;
  }
}

uint64_t _os_body_expand(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  size_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 - a2 > *(_QWORD *)(a1 + 16))
    return 0;
  if (v2 <= (a2 ^ 0x7FFFFFFFFFFFFFFFLL)
    && ((v5 = v2 + a2, v5 >= 0x7FFFFFFFFFFFFBFFLL) ? (v6 = v5) : (v6 = v5 + 1024),
        (v7 = realloc(*(void **)a1, v6)) != 0))
  {
    v8 = v7;
    result = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    ogg_stream_clear(a1);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _os_lacing_expand(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 - a2 > *(_QWORD *)(a1 + 56))
    return 0;
  if (v2 <= (a2 ^ 0x7FFFFFFFFFFFFFFFLL)
    && ((v5 = v2 + a2, v5 >= 0x7FFFFFFFFFFFFFDFLL) ? (v6 = v5) : (v6 = v5 + 32),
        (v7 = realloc(*(void **)(a1 + 32), 4 * v6)) != 0
     && (*(_QWORD *)(a1 + 32) = v7, (v8 = realloc(*(void **)(a1 + 40), 8 * v6)) != 0)))
  {
    v9 = v8;
    result = 0;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v6;
  }
  else
  {
    ogg_stream_clear(a1);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ogg_stream_packetin(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return ogg_stream_iovecin(a1, (uint64_t)v4, 1, a2[3], a2[4]);
}

uint64_t ogg_stream_flush(uint64_t *a1, _QWORD *a2)
{
  return ogg_stream_flush_i(a1, a2, 1, 4096);
}

uint64_t ogg_stream_flush_i(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int *v30;
  int v31;
  uint64_t v33;

  v4 = a1[7];
  if (v4 >= 255)
    LODWORD(v5) = 255;
  else
    v5 = a1[7];
  v6 = *a1;
  if (*a1)
    v7 = (_DWORD)v5 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v10 = *((_DWORD *)a1 + 93);
  if (!v10)
  {
    if ((int)v5 < 1)
    {
      LODWORD(v5) = 0;
LABEL_28:
      v15 = 0;
    }
    else
    {
      v17 = 0;
      while (*(unsigned __int8 *)(a1[4] + 4 * v17) == 0xFF)
      {
        if (v5 == ++v17)
          goto LABEL_28;
      }
      v15 = 0;
      LODWORD(v5) = v17 + 1;
    }
    goto LABEL_30;
  }
  if ((int)v5 < 1)
  {
    LODWORD(v5) = 0;
    v15 = -1;
    goto LABEL_30;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  while (v14 <= a4 || v12 <= 3)
  {
    v16 = *(unsigned __int8 *)(a1[4] + 4 * v11);
    if ((_DWORD)v16 == 255)
    {
      v12 = 0;
    }
    else
    {
      v15 = *(_QWORD *)(a1[5] + 8 * v11);
      v12 = ++v13;
    }
    v14 += v16;
    if (v5 == ++v11)
      goto LABEL_25;
  }
  a3 = 1;
  LODWORD(v5) = v11;
LABEL_25:
  if ((_DWORD)v5 != 255)
  {
LABEL_30:
    if (a3)
      goto LABEL_31;
    return 0;
  }
  LODWORD(v5) = 255;
LABEL_31:
  *((_DWORD *)a1 + 20) = 1399285583;
  *((_WORD *)a1 + 42) = 0;
  v18 = (int *)a1[4];
  if (v10)
    v19 = (*v18 & 0x100) == 0;
  else
    v19 = ((*v18 & 0x100) == 0) | 2;
  *((_BYTE *)a1 + 85) = v19;
  v20 = (int)v5;
  if (*((_DWORD *)a1 + 92))
    v21 = v4 == (int)v5;
  else
    v21 = 0;
  if (v21)
    *((_BYTE *)a1 + 85) = v19 | 4;
  v22 = 0;
  *((_DWORD *)a1 + 93) = 1;
  do
  {
    *((_BYTE *)a1 + v22 + 86) = v15;
    v15 >>= 8;
    ++v22;
  }
  while (v22 != 8);
  v23 = 0;
  v24 = a1[47];
  do
  {
    *((_BYTE *)a1 + v23 + 94) = v24;
    v24 >>= 8;
    ++v23;
  }
  while (v23 != 4);
  v25 = 0;
  v26 = a1[48];
  if (v26 == -1)
    v26 = 0;
  a1[48] = v26 + 1;
  do
  {
    *((_BYTE *)a1 + v25 + 98) = v26;
    v26 >>= 8;
    ++v25;
  }
  while (v25 != 4);
  *(_DWORD *)((char *)a1 + 102) = 0;
  *((_BYTE *)a1 + 106) = v20;
  if ((int)v20 < 1)
  {
    v27 = 0;
  }
  else
  {
    LODWORD(v27) = 0;
    v28 = v20;
    v29 = (char *)a1 + 107;
    v30 = v18;
    do
    {
      v31 = *v30++;
      *v29++ = v31;
      v27 = v27 + v31;
      --v28;
    }
    while (v28);
  }
  *((_DWORD *)a1 + 91) = v20 + 27;
  *a2 = a1 + 10;
  a2[1] = (int)v20 + 27;
  a2[2] = v6 + a1[3];
  a2[3] = v27;
  v33 = v4 - v20;
  a1[7] = v33;
  memmove(v18, &v18[v20], 4 * v33);
  memmove((void *)a1[5], (const void *)(a1[5] + 8 * v20), 8 * a1[7]);
  a1[3] += v27;
  ogg_page_checksum_set((uint64_t)a2);
  return 1;
}

uint64_t ogg_stream_flush_fill(uint64_t *a1, _QWORD *a2, int a3)
{
  return ogg_stream_flush_i(a1, a2, 1, a3);
}

uint64_t ogg_stream_pageout(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;

  if (!a1 || !*(_QWORD *)a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 56);
  if (!*(_DWORD *)(a1 + 368))
  {
    if (!v2 || *(_DWORD *)(a1 + 372))
      goto LABEL_9;
LABEL_10:
    v4 = 1;
    return ogg_stream_flush_i((uint64_t *)a1, a2, v4, 4096);
  }
  if (v2)
    goto LABEL_10;
LABEL_9:
  v4 = 0;
  return ogg_stream_flush_i((uint64_t *)a1, a2, v4, 4096);
}

uint64_t ogg_stream_pageout_fill(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  int v6;

  if (!a1 || !*(_QWORD *)a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 56);
  if (!*(_DWORD *)(a1 + 368))
  {
    if (!v4 || *(_DWORD *)(a1 + 372))
      goto LABEL_9;
LABEL_11:
    v6 = 1;
    return ogg_stream_flush_i((uint64_t *)a1, a2, v6, a3);
  }
  if (v4)
    goto LABEL_11;
LABEL_9:
  v6 = 0;
  return ogg_stream_flush_i((uint64_t *)a1, a2, v6, a3);
}

uint64_t ogg_stream_eos(uint64_t a1)
{
  if (a1 && *(_QWORD *)a1)
    return *(unsigned int *)(a1 + 368);
  else
    return 1;
}

uint64_t ogg_sync_init(_OWORD *a1)
{
  if (a1)
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  return 0;
}

uint64_t ogg_sync_clear(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    v2 = *(void **)a1;
    if (v2)
      free(v2);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return 0;
}

uint64_t ogg_sync_destroy(void *a1)
{
  if (a1)
  {
    ogg_sync_clear((uint64_t)a1);
    free(a1);
  }
  return 0;
}

uint64_t ogg_sync_check(uint64_t a1)
{
  return (*(int *)(a1 + 8) >> 31);
}

char *ogg_sync_buffer(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  size_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0)
  {
    v5 = *(int *)(a1 + 16);
    if ((_DWORD)v5)
    {
      v6 = (*(_DWORD *)(a1 + 12) - v5);
      *(_DWORD *)(a1 + 12) = v6;
      if ((int)v6 >= 1)
      {
        memmove(*(void **)a1, (const void *)(*(_QWORD *)a1 + v5), v6);
        v2 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = 0;
    }
    v7 = *(_DWORD *)(a1 + 12);
    if (v2 - v7 >= a2)
    {
      v10 = *(char **)a1;
      return &v10[v7];
    }
    if (2147479551 - v7 >= a2)
    {
      v8 = a2 + v7;
      v9 = v8 + 4096;
      if (*(_QWORD *)a1)
      {
        v10 = (char *)realloc(*(void **)a1, v8 + 4096);
        if (v10)
        {
LABEL_10:
          *(_QWORD *)a1 = v10;
          *(_DWORD *)(a1 + 8) = v9;
          v7 = *(_DWORD *)(a1 + 12);
          return &v10[v7];
        }
      }
      else
      {
        v10 = (char *)malloc(v8 + 4096);
        if (v10)
          goto LABEL_10;
      }
    }
    ogg_sync_clear(a1);
  }
  return 0;
}

uint64_t ogg_sync_wrote(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((v2 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = *(int *)(a1 + 12) + a2;
  if (v4 > v2)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)(a1 + 12) = v4;
  return result;
}

uint64_t ogg_sync_pageseek(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v19[4];
  int v20;

  if ((a1[1] & 0x80000000) != 0)
    return 0;
  v4 = *a1;
  v5 = *((int *)a1 + 4);
  v6 = *a1 + v5;
  v7 = *((int *)a1 + 3) - v5;
  v8 = *((_DWORD *)a1 + 6);
  if (!v8)
  {
    if ((int)v7 < 27)
      return 0;
    if (*(_DWORD *)v6 != 1399285583)
      goto LABEL_9;
    v8 = *(unsigned __int8 *)(v6 + 26) + 27;
    if (v7 < v8)
      return 0;
    if (*(_BYTE *)(v6 + 26))
    {
      v16 = 0;
      v17 = *((_DWORD *)a1 + 7);
      v18 = v5 + v4 + 27;
      do
      {
        v17 += *(unsigned __int8 *)(v18 + v16);
        *((_DWORD *)a1 + 7) = v17;
        ++v16;
      }
      while (v16 < *(unsigned __int8 *)(v6 + 26));
    }
    *((_DWORD *)a1 + 6) = v8;
  }
  if ((int)(v8 + *((_DWORD *)a1 + 7)) > (int)v7)
    return 0;
  v20 = *(_DWORD *)(v6 + 22);
  *(_DWORD *)(v6 + 22) = 0;
  v9 = *((int *)a1 + 6);
  v10 = *((int *)a1 + 7);
  v19[0] = v6;
  v19[1] = v9;
  v19[2] = v6 + v9;
  v19[3] = v10;
  ogg_page_checksum_set((uint64_t)v19);
  if (v20 != *(_DWORD *)(v6 + 22))
  {
    *(_DWORD *)(v6 + 22) = v20;
    v4 = *a1;
LABEL_9:
    a1[3] = 0;
    v12 = memchr((void *)(v6 + 1), 79, v7 - 1);
    if (!v12)
      v12 = (void *)(v4 + *((int *)a1 + 3));
    *((_DWORD *)a1 + 4) = (_DWORD)v12 - v4;
    return v6 - (_QWORD)v12;
  }
  v13 = *((int *)a1 + 6);
  v14 = *((int *)a1 + 7);
  if (a2)
  {
    *a2 = v6;
    a2[1] = v13;
    a2[2] = v6 + v13;
    a2[3] = v14;
  }
  v15 = v14 + v13;
  result = v15;
  a1[2] = (*((_DWORD *)a1 + 4) + v15);
  a1[3] = 0;
  return result;
}

uint64_t ogg_sync_pageout(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    return 0;
  while (1)
  {
    result = ogg_sync_pageseek((uint64_t *)a1, a2);
    if (result > 0)
      break;
    if (!result)
      return result;
    if (!*(_DWORD *)(a1 + 20))
    {
      *(_DWORD *)(a1 + 20) = 1;
      return 0xFFFFFFFFLL;
    }
  }
  return 1;
}

uint64_t ogg_stream_pagein(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = *a2;
  v5 = (char *)a2[2];
  v4 = a2[3];
  v6 = *(unsigned __int8 *)(*a2 + 4);
  v7 = *(_BYTE *)(*a2 + 5);
  v8 = ogg_page_granulepos((uint64_t)a2);
  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = v8;
  v10 = *(char **)a1;
  if (!*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  v43 = v9;
  v11 = *(int *)(v3 + 14);
  v12 = *(unsigned int *)(v3 + 18);
  v13 = *(unsigned __int8 *)(v3 + 26);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16 - v15;
    if (v16 != v15)
      memmove(v10, &v10[v15], v16 - v15);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (v14)
  {
    v17 = v14;
    v18 = *(_QWORD *)(a1 + 56) - v14;
    if (v18)
    {
      memmove(*(void **)(a1 + 32), (const void *)(*(_QWORD *)(a1 + 32) + 4 * v14), 4 * v18);
      memmove(*(void **)(a1 + 40), (const void *)(*(_QWORD *)(a1 + 40) + 8 * v14), 8 * (*(_QWORD *)(a1 + 56) - v14));
      v17 = *(_QWORD *)(a1 + 56);
    }
    v19 = *(_QWORD *)(a1 + 64) - v14;
    *(_QWORD *)(a1 + 56) = v17 - v14;
    *(_QWORD *)(a1 + 64) = v19;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v20 = *(_QWORD *)(a1 + 376) == v11 && v6 == 0;
  if (!v20 || _os_lacing_expand(a1, v13 + 1))
    return 0xFFFFFFFFLL;
  v22 = v7 & 2;
  v23 = *(_QWORD *)(a1 + 384);
  if (v23 != v12)
  {
    v25 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(a1 + 64);
    if (v25 > (int)v24)
    {
      v26 = (int)v24;
      v27 = *(_QWORD *)(a1 + 16);
      do
        v27 -= *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 4 * v26++);
      while (v25 > v26);
      *(_QWORD *)(a1 + 16) = v27;
    }
    *(_QWORD *)(a1 + 56) = v24;
    if (v23 != -1)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v24) = 1024;
      *(_QWORD *)(a1 + 56) = v24 + 1;
      *(_QWORD *)(a1 + 64) = v24 + 1;
    }
  }
  if ((v7 & 1) != 0
    && ((v28 = *(_QWORD *)(a1 + 56), v28 < 1)
     || (v29 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v28 - 4), v29 == 1024)
     || v29 != 255))
  {
    if ((_DWORD)v13)
    {
      v41 = 0;
      while (1)
      {
        v42 = *(unsigned __int8 *)(v3 + 27 + v41);
        v5 += v42;
        v4 -= v42;
        if (v42 != 255)
          break;
        if (v13 == ++v41)
        {
          v22 = 0;
          v30 = v13;
          goto LABEL_30;
        }
      }
      v22 = 0;
      v30 = v41 + 1;
    }
    else
    {
      v30 = 0;
      v22 = 0;
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_30:
  if (v4)
  {
    if (_os_body_expand(a1, v4))
      return 0xFFFFFFFFLL;
    memcpy((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v5, v4);
    *(_QWORD *)(a1 + 16) += v4;
  }
  if ((int)v30 < (int)v13)
  {
    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(_QWORD *)(a1 + 40);
    v33 = *(_QWORD *)(a1 + 56);
    v34 = v22 == 0;
    v35 = (unsigned __int8 *)(v3 + v30 + 27);
    v36 = v13 - v30;
    v37 = -1;
    do
    {
      v39 = *v35++;
      v38 = v39;
      *(_DWORD *)(v31 + 4 * v33) = v39;
      *(_QWORD *)(v32 + 8 * v33) = -1;
      if (!v34)
        *(_DWORD *)(v31 + 4 * v33) = v38 | 0x100;
      if (v38 == 255)
      {
        ++v33;
      }
      else
      {
        v37 = v33++;
        *(_QWORD *)(a1 + 64) = v33;
      }
      *(_QWORD *)(a1 + 56) = v33;
      v34 = 1;
      --v36;
    }
    while (v36);
    if (v37 != -1)
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v37) = v43;
  }
  if ((v7 & 4) != 0)
  {
    *(_DWORD *)(a1 + 368) = 1;
    v40 = *(_QWORD *)(a1 + 56);
    if (v40 >= 1)
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v40 - 4) |= 0x200u;
  }
  result = 0;
  *(_QWORD *)(a1 + 384) = v12 + 1;
  return result;
}

uint64_t ogg_sync_reset(uint64_t a1)
{
  uint64_t result;

  if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

uint64_t ogg_stream_reset(uint64_t a1)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = -1;
  return result;
}

uint64_t ogg_stream_reset_serialno(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = -1;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a2;
  return result;
}

uint64_t ogg_stream_packetout(_QWORD *a1, _QWORD *a2)
{
  if (a1 && *a1)
    return _packetout(a1, a2, 1);
  else
    return 0;
}

uint64_t _packetout(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1[9];
  if (a1[8] <= (int)v3)
    return 0;
  v4 = (int)v3;
  v5 = a1[4];
  v6 = *(_DWORD *)(v5 + 4 * (int)v3);
  if ((v6 & 0x400) != 0)
  {
    v13 = v3 + 1;
    v14 = 0xFFFFFFFFLL;
  }
  else
  {
    if (!a2 && !a3)
      return 1;
    v7 = *(_DWORD *)(v5 + 4 * (int)v3);
    v8 = *(_DWORD *)(v5 + 4 * (int)v3) & 0x200;
    if (*(_DWORD *)(v5 + 4 * (int)v3) == 255)
    {
      v9 = v5 + 4;
      v7 = 255;
      do
      {
        v3 = v4 + 1;
        v10 = *(_DWORD *)(v9 + 4 * v4);
        v11 = v10;
        if ((v10 & 0x200) != 0)
          v8 = 512;
        v7 += v10;
        v4 = v3;
      }
      while (v11 == 255);
    }
    if (a2)
    {
      a2[2] = v6 & 0x100;
      a2[3] = v8;
      v12 = *a1 + a1[3];
      a2[5] = a1[49];
      a2[4] = *(_QWORD *)(a1[5] + 8 * (int)v3);
      *a2 = v12;
      a2[1] = v7;
    }
    if (!a3)
      return 1;
    a1[3] += v7;
    v13 = (int)v3 + 1;
    v14 = 1;
  }
  a1[9] = v13;
  ++a1[49];
  return v14;
}

uint64_t ogg_stream_packetpeek(_QWORD *a1, _QWORD *a2)
{
  if (a1 && *a1)
    return _packetout(a1, a2, 0);
  else
    return 0;
}

double ogg_packet_clear(uint64_t a1)
{
  double result;

  free(*(void **)a1);
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

_BYTE *oggpack_writeinit(uint64_t a1)
{
  _BYTE *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = malloc(0x100uLL);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = result;
  *result = 0;
  *(_QWORD *)(a1 + 32) = 256;
  return result;
}

_BYTE *oggpackB_writeinit(uint64_t a1)
{
  _BYTE *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = malloc(0x100uLL);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = result;
  *result = 0;
  *(_QWORD *)(a1 + 32) = 256;
  return result;
}

uint64_t oggpack_writecheck(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 24))
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 32))
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t oggpackB_writecheck(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 24))
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 32))
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t oggpack_writetrunc(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 24))
  {
    v2 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 24) = v2 + (a2 >> 3);
    *(_QWORD *)result = a2 >> 3;
    v3 = mask[a2 & 7];
    *(_DWORD *)(result + 8) = a2 & 7;
    *(_BYTE *)(v2 + (a2 >> 3)) &= v3;
  }
  return result;
}

uint64_t oggpackB_writetrunc(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (*(_QWORD *)(result + 24))
  {
    v2 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 24) = v2 + (a2 >> 3);
    *(_DWORD *)(result + 8) = a2 & 7;
    v3 = mask8B[a2 & 7];
    *(_QWORD *)result = a2 >> 3;
    *(_BYTE *)(v2 + (a2 >> 3)) &= v3;
  }
  return result;
}

void oggpack_write(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;

  if (a3 > 0x20)
    goto LABEL_2;
  v7 = *(char **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a1 >= v6 - 4)
  {
    if (!v7)
      return;
    if (v6 > 0x7FFFFFFFFFFFFEFFLL || (v13 = (char *)realloc(*(void **)(a1 + 16), v6 + 256)) == 0)
    {
LABEL_2:
      oggpack_writeclear(a1);
      return;
    }
    v14 = *(_QWORD *)(a1 + 32) + 256;
    v7 = &v13[*(_QWORD *)a1];
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v14;
  }
  v8 = mask[a3] & a2;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = v9 + a3;
  *v7 |= v8 << v9;
  if ((int)(v9 + a3) >= 8)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) = v8 >> (8 - *(_DWORD *)(a1 + 8));
    if (v10 >= 0x10)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 2) = v8 >> (16 - *(_DWORD *)(a1 + 8));
      if (v10 >= 0x18)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + 3) = v8 >> (24 - *(_DWORD *)(a1 + 8));
        if (v10 >= 0x20)
        {
          v11 = *(_DWORD *)(a1 + 8);
          v12 = v8 >> (32 - v11);
          if (!v11)
            LOBYTE(v12) = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + 4) = v12;
        }
      }
    }
  }
  *(_QWORD *)a1 += (int)v10 / 8;
  *(_QWORD *)(a1 + 24) += (int)v10 / 8;
  *(_DWORD *)(a1 + 8) = v10 & 7;
}

double oggpack_writeclear(uint64_t a1)
{
  void *v2;
  double result;

  v2 = *(void **)(a1 + 16);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void oggpackB_write(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if (a3 > 0x20)
    goto LABEL_2;
  v7 = *(char **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a1 >= v6 - 4)
  {
    if (!v7)
      return;
    if (v6 > 0x7FFFFFFFFFFFFEFFLL || (v13 = (char *)realloc(*(void **)(a1 + 16), v6 + 256)) == 0)
    {
LABEL_2:
      oggpack_writeclear(a1);
      return;
    }
    v14 = *(_QWORD *)(a1 + 32) + 256;
    v7 = &v13[*(_QWORD *)a1];
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v14;
  }
  v8 = (mask[a3] & a2) << (32 - a3);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = v9 + a3;
  *v7 |= v8 >> (v9 + 24);
  if ((int)(v9 + a3) >= 8)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) = v8 >> (*(_DWORD *)(a1 + 8) + 16);
    if (v10 >= 0x10)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 2) = v8 >> (*(_DWORD *)(a1 + 8) + 8);
      if (v10 >= 0x18)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + 3) = v8 >> *(_DWORD *)(a1 + 8);
        if (v10 >= 0x20)
        {
          v11 = *(_DWORD *)(a1 + 8);
          v12 = v8 << (8 - v11);
          if (!v11)
            LOBYTE(v12) = 0;
          *(_BYTE *)(*(_QWORD *)(a1 + 24) + 4) = v12;
        }
      }
    }
  }
  *(_QWORD *)a1 += (int)v10 / 8;
  *(_QWORD *)(a1 + 24) += (int)v10 / 8;
  *(_DWORD *)(a1 + 8) = v10 & 7;
}

void oggpack_writealign(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 1)
    oggpack_write(a1, 0, 8 - v1);
}

void oggpackB_writealign(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 1)
    oggpackB_write(a1, 0, 8 - v1);
}

void oggpack_writecopy(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  oggpack_writecopy_helper(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD))oggpack_write, 0);
}

void oggpack_writecopy_helper(uint64_t a1, unsigned __int8 *__src, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), int a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  void (*v23)(uint64_t, _QWORD, uint64_t);
  void (*v24)(_QWORD, _QWORD, _QWORD);

  if (a3 >= 0)
    v9 = a3;
  else
    v9 = a3 + 7;
  v10 = (char *)*(int *)(a1 + 8);
  v11 = (uint64_t)&v10[a3];
  if ((uint64_t)&v10[a3] < 0 != __OFADD__(v10, a3))
    v11 = (uint64_t)&v10[a3 + 7];
  v12 = *(_QWORD *)a1 + (v11 >> 3);
  if (v12 >= *(_QWORD *)(a1 + 32))
  {
    if (!*(_QWORD *)(a1 + 24)
      || (*(_QWORD *)(a1 + 32) = v12 + 256,
          v22 = a4,
          v13 = (char *)realloc(*(void **)(a1 + 16), v12 + 256),
          a4 = v22,
          !v13))
    {
      oggpack_writeclear(a1);
      return;
    }
    v10 = &v13[*(_QWORD *)a1];
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  v14 = v9 >> 3;
  v15 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v10)
  {
    if (a3 >= 8)
    {
      v16 = v14;
      v17 = __src;
      v23 = a4;
      do
      {
        v18 = *v17++;
        v23(a1, v18, 8);
        a4 = v23;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    v24 = a4;
    memmove(*(void **)(a1 + 24), __src, v14);
    a4 = v24;
    v19 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v19 + v14;
    *(_QWORD *)a1 += v14;
    *(_BYTE *)(v19 + v14) = 0;
  }
  if (a3 != v15)
  {
    v20 = a3 - v15;
    v21 = __src[v14];
    if (a5)
      v21 = v21 >> (8 - v20);
    a4(a1, v21, v20);
  }
}

void oggpackB_writecopy(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  oggpack_writecopy_helper(a1, a2, a3, (void (*)(_QWORD, _QWORD, _QWORD))oggpackB_write, 1);
}

uint64_t oggpack_reset(uint64_t result)
{
  _BYTE *v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(_BYTE **)(result + 16);
    *(_QWORD *)(result + 24) = v1;
    *v1 = 0;
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t oggpackB_reset(uint64_t result)
{
  _BYTE *v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(_BYTE **)(result + 16);
    *(_QWORD *)(result + 24) = v1;
    *v1 = 0;
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

double oggpack_readinit(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return result;
}

double oggpackB_readinit(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return result;
}

uint64_t oggpack_look(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;

  if (a2 > 0x20)
    return -1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 + a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a1 < v5 - 4)
    goto LABEL_6;
  if (*(_QWORD *)a1 > v5 - ((int)(v4 + 7) >> 3))
    return -1;
  if (!v4)
    return 0;
LABEL_6:
  v6 = *(unsigned __int8 **)(a1 + 24);
  v7 = *v6 >> v3;
  if ((int)v4 >= 9)
  {
    v7 |= v6[1] << (8 - v3);
    if (v4 >= 0x11)
    {
      v7 |= v6[2] << (16 - v3);
      if (v4 >= 0x19)
      {
        v7 |= v6[3] << (24 - v3);
        if (v3)
        {
          if (v4 >= 0x21)
            v7 |= v6[4] << -(char)v3;
        }
      }
    }
  }
  return v7 & mask[a2];
}

unint64_t oggpackB_look(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;

  if (a2 > 0x20)
    return -1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 + a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a1 < v5 - 4)
    goto LABEL_6;
  if (*(_QWORD *)a1 > v5 - ((int)(v4 + 7) >> 3))
    return -1;
  if (!v4)
    return 0;
LABEL_6:
  v6 = *(unsigned __int8 **)(a1 + 24);
  v7 = *v6 << (v3 + 24);
  if ((int)v4 >= 9)
  {
    v7 |= v6[1] << (v3 + 16);
    if (v4 >= 0x11)
    {
      v7 |= v6[2] << (v3 + 8);
      if (v4 >= 0x19)
      {
        v7 |= v6[3] << v3;
        if (v3)
        {
          if (v4 >= 0x21)
            v7 |= v6[4] >> (8 - v3);
        }
      }
    }
  }
  return (unint64_t)v7 >> ((32 - a2) >> 1) >> ((33 - a2) >> 1);
}

uint64_t oggpack_look1(uint64_t a1)
{
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 32))
    return -1;
  else
    return (**(unsigned __int8 **)(a1 + 24) >> *(_DWORD *)(a1 + 8)) & 1;
}

uint64_t oggpackB_look1(uint64_t a1)
{
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 32))
    return -1;
  else
    return (**(unsigned __int8 **)(a1 + 24) >> (7 - *(_BYTE *)(a1 + 8))) & 1;
}

uint64_t *oggpack_adv(uint64_t *result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *((_DWORD *)result + 2) + a2;
  v3 = *result;
  v4 = result[4];
  if (*result <= v4 - ((v2 + 7) >> 3))
  {
    if (v2 >= 0)
      v6 = *((_DWORD *)result + 2) + a2;
    else
      v6 = v2 + 7;
    v7 = v6 >> 3;
    result[3] += v7;
    v4 = v3 + v7;
    v5 = v2 & 7;
  }
  else
  {
    result[3] = 0;
    v5 = 1;
  }
  *result = v4;
  *((_DWORD *)result + 2) = v5;
  return result;
}

uint64_t oggpack_adv1(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v1 + 1;
  if (v1 >= 7)
  {
    *(_DWORD *)(result + 8) = 0;
    ++*(_QWORD *)(result + 24);
    ++*(_QWORD *)result;
  }
  return result;
}

uint64_t oggpackB_adv1(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v1 + 1;
  if (v1 >= 7)
  {
    *(_DWORD *)(result + 8) = 0;
    ++*(_QWORD *)(result + 24);
    ++*(_QWORD *)result;
  }
  return result;
}

uint64_t oggpack_read(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;

  if (a2 >= 0x21)
  {
    v2 = a1[4];
LABEL_3:
    a1[3] = 0;
    *a1 = v2;
    *((_DWORD *)a1 + 2) = 1;
    return -1;
  }
  v4 = *((_DWORD *)a1 + 2);
  v5 = v4 + a2;
  v6 = *a1;
  v2 = a1[4];
  if (*a1 >= v2 - 4)
  {
    if (v6 > v2 - ((v5 + 7) >> 3))
      goto LABEL_3;
    if (!v5)
      return 0;
  }
  v7 = (unsigned __int8 *)a1[3];
  v8 = *v7 >> v4;
  if (v5 >= 9)
  {
    v8 |= v7[1] << (8 - v4);
    if (v5 >= 0x11)
    {
      v8 |= v7[2] << (16 - v4);
      if (v5 >= 0x19)
      {
        v8 |= v7[3] << (24 - v4);
        if (v4)
        {
          if (v5 >= 0x21)
            v8 |= v7[4] << -(char)v4;
        }
      }
    }
  }
  v3 = v8 & mask[a2];
  a1[3] = (uint64_t)&v7[v5 / 8];
  *a1 = v6 + v5 / 8;
  *((_DWORD *)a1 + 2) = v5 & 7;
  return v3;
}

uint64_t oggpackB_read(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;

  if (a2 >= 0x21)
  {
    v2 = *(_QWORD *)(a1 + 32);
LABEL_3:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)a1 = v2;
    *(_DWORD *)(a1 + 8) = 1;
    return -1;
  }
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 + a2;
  v6 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)a1 + 4 >= v2)
  {
    if (v6 > v2 - ((v5 + 7) >> 3))
      goto LABEL_3;
    if (!v5)
      return 0;
  }
  v7 = *(unsigned __int8 **)(a1 + 24);
  v8 = *v7 << (v4 + 24);
  if (v5 >= 9)
  {
    v8 |= v7[1] << (v4 + 16);
    if (v5 >= 0x11)
    {
      v8 |= v7[2] << (v4 + 8);
      if (v5 >= 0x19)
      {
        v8 |= v7[3] << v4;
        if (v4)
        {
          if (v5 >= 0x21)
            v8 |= v7[4] >> (8 - v4);
        }
      }
    }
  }
  v3 = v8 >> ((unint64_t)(int)(32 - a2) >> 1) >> ((unint64_t)((int)(32 - a2) + 1) >> 1);
  *(_QWORD *)(a1 + 24) = &v7[v5 / 8];
  *(_QWORD *)a1 = v6 + v5 / 8;
  *(_DWORD *)(a1 + 8) = v5 & 7;
  return v3;
}

uint64_t oggpack_read1(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 >= v2)
  {
    a1[3] = 0;
    *a1 = v2;
    *((_DWORD *)a1 + 2) = 1;
    return -1;
  }
  else
  {
    v3 = (unsigned __int8 *)a1[3];
    v4 = *((_DWORD *)a1 + 2);
    v5 = (*v3 >> v4) & 1;
    *((_DWORD *)a1 + 2) = v4 + 1;
    if (v4 >= 7)
    {
      *((_DWORD *)a1 + 2) = 0;
      a1[3] = (uint64_t)(v3 + 1);
      *a1 = v1 + 1;
    }
  }
  return v5;
}

uint64_t oggpackB_read1(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 >= v2)
  {
    a1[3] = 0;
    *a1 = v2;
    *((_DWORD *)a1 + 2) = 1;
    return -1;
  }
  else
  {
    v3 = (unsigned __int8 *)a1[3];
    v4 = *((_DWORD *)a1 + 2);
    v5 = (*v3 >> (7 - v4)) & 1;
    *((_DWORD *)a1 + 2) = v4 + 1;
    if (v4 >= 7)
    {
      *((_DWORD *)a1 + 2) = 0;
      a1[3] = (uint64_t)(v3 + 1);
      *a1 = v1 + 1;
    }
  }
  return v5;
}

uint64_t oggpack_bytes(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 8);
  v3 = v1 + 7;
  v2 = v1 < -7;
  v4 = v1 + 14;
  if (!v2)
    v4 = v3;
  return *(_QWORD *)a1 + (v4 >> 3);
}

uint64_t oggpack_bits(uint64_t a1)
{
  return *(int *)(a1 + 8) + 8 * *(_QWORD *)a1;
}

uint64_t oggpackB_bytes(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 8);
  v3 = v1 + 7;
  v2 = v1 < -7;
  v4 = v1 + 14;
  if (!v2)
    v4 = v3;
  return *(_QWORD *)a1 + (v4 >> 3);
}

uint64_t oggpackB_bits(uint64_t a1)
{
  return *(int *)(a1 + 8) + 8 * *(_QWORD *)a1;
}

uint64_t oggpack_get_buffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t oggpackB_get_buffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t op_test(unsigned int *a1, _DWORD *a2, size_t a3)
{
  uint64_t v3;
  char *v7;
  __int128 v8;
  int v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  _OWORD v16[2];
  _OWORD v17[25];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3 < 0x2F)
    return 0xFFFFFFFFLL;
  if (*a2 != 1399285583)
    return 4294967164;
  if ((a3 & 0x8000000000000000) != 0)
    return 4294967167;
  memset(v16, 0, sizeof(v16));
  ogg_sync_init(v16);
  v7 = ogg_sync_buffer((uint64_t)v16, a3);
  if (!v7)
  {
    v3 = 4294967167;
    goto LABEL_20;
  }
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v15, 0, sizeof(v15));
  memcpy(v7, a2, a3);
  ogg_sync_wrote((uint64_t)v16, a3);
  ogg_stream_init((uint64_t)v17, -1);
  v8 = 0uLL;
  while (1)
  {
    v13 = v8;
    v14 = v8;
    v12 = v8;
    v9 = ogg_sync_pageout((uint64_t)v16, v15);
    if (v9 < 0)
    {
LABEL_13:
      v3 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
    if (!v9)
      break;
    v10 = ogg_page_serialno((uint64_t)v15);
    ogg_stream_reset_serialno((uint64_t)v17, v10);
    ogg_stream_pagein((uint64_t)v17, v15);
    if (ogg_stream_packetout(v17, &v12) != 1)
      goto LABEL_13;
    if (!(_QWORD)v13)
    {
      v3 = 4294967164;
      goto LABEL_14;
    }
    v3 = opus_head_parse(a1, v12, *((unint64_t *)&v12 + 1));
    if ((_DWORD)v3 == -132)
      goto LABEL_13;
LABEL_14:
    v8 = 0uLL;
    if ((_DWORD)v3 != -1)
      goto LABEL_19;
  }
  v3 = 0xFFFFFFFFLL;
LABEL_19:
  ogg_stream_clear((uint64_t)v17);
LABEL_20:
  ogg_sync_clear((uint64_t)v16);
  return v3;
}

uint64_t opus_granule_sample(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  if (a2 == -1)
    return -1;
  if (op_granpos_add(&v3, a2, -*(_DWORD *)(a1 + 8)))
    return -1;
  return v3;
}

uint64_t op_granpos_add(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  int v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  if (a3 < 1)
  {
    if (a3 < 0)
    {
      if ((a2 & 0x8000000000000000) == 0 && -a3 > a2)
        return 4294967165;
      v8 = 0x8000000000000000 - a3;
      v5 = __OFSUB__(v8, a2);
      v9 = v8 == a2;
      v4 = (uint64_t)(v8 - a2) < 0;
      v10 = a2 + a3;
      if (v4 ^ v5 | v9)
      {
        v7 = a3;
      }
      else
      {
        a2 = 0x7FFFFFFFFFFFFFFFLL;
        v7 = v10 + 1;
      }
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    if ((a2 & 0x8000000000000000) != 0 && ~a3 <= a2)
      return 4294967165;
    v3 = a3 ^ 0x7FFFFFFFFFFFFFFFLL;
    v5 = __OFSUB__(v3, a2);
    v4 = (uint64_t)(v3 - a2) < 0;
    v6 = a2 + a3;
    if (v4 != v5)
      a2 = 0x8000000000000000;
    if (v4 != v5)
      v7 = v6;
    else
      v7 = a3;
  }
  v11 = 0;
  *a1 = a2 + v7;
  return v11;
}

uint64_t op_test_callbacks(uint64_t a1, uint64_t a2, const void *a3, size_t a4, int *a5)
{
  void *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unsigned int (*v14)(uint64_t, _QWORD, uint64_t);
  uint64_t (*v15)(_QWORD);
  int v16;
  int headers;
  uint64_t v18;
  int initial_pcm_offset;
  char v20;
  int v21;
  _OWORD v23[2];

  v10 = malloc(0x3260uLL);
  if (!v10)
  {
    v21 = -129;
LABEL_26:
    v11 = 0;
    if (!a5)
      return v11;
    goto LABEL_22;
  }
  v11 = (uint64_t)v10;
  bzero(v10, 0x3260uLL);
  if ((a4 & 0x8000000000000000) != 0)
  {
    v21 = -129;
    goto LABEL_25;
  }
  *(_QWORD *)(v11 + 80) = -1;
  *(_QWORD *)(v11 + 32) = a1;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 16) = v12;
  if (!*(_QWORD *)v11)
  {
    v21 = -128;
    goto LABEL_25;
  }
  ogg_sync_init((_OWORD *)(v11 + 88));
  if (a4)
  {
    v13 = ogg_sync_buffer(v11 + 88, a4);
    memcpy(v13, a3, a4);
    ogg_sync_wrote(v11 + 88, a4);
  }
  v14 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))(a2 + 8);
  if (!v14 || v14(a1, 0, 1) == -1)
  {
    v16 = 0;
  }
  else
  {
    v15 = *(uint64_t (**)(_QWORD))(v11 + 16);
    if (!v15 || v15(*(_QWORD *)(v11 + 32)) != a4)
    {
      v21 = -131;
      goto LABEL_25;
    }
    v16 = 1;
  }
  memset(v23, 0, sizeof(v23));
  *(_DWORD *)(v11 + 40) = v16;
  *(_QWORD *)(v11 + 48) = malloc(0x178uLL);
  ogg_stream_init(v11 + 168, -1);
  headers = op_fetch_headers(v11, (unsigned int *)(*(_QWORD *)(v11 + 48) + 52), (_OWORD *)(*(_QWORD *)(v11 + 48) + 344), (_DWORD **)(v11 + 64), (_DWORD *)(v11 + 56), (int *)(v11 + 60), 0);
  if (headers < 0)
  {
LABEL_18:
    v21 = headers;
LABEL_25:
    *(_QWORD *)(v11 + 24) = 0;
    op_clear(0, v11);
    free((void *)v11);
    goto LABEL_26;
  }
  while (1)
  {
    *(_DWORD *)(v11 + 44) = 1;
    v18 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v18 + 32) = -1;
    *(_DWORD *)(v18 + 48) = *(_QWORD *)(v11 + 544);
    initial_pcm_offset = op_find_initial_pcm_offset(v11, v18, v23);
    v20 = initial_pcm_offset < 1 ? 1 : v16;
    if ((v20 & 1) != 0)
      break;
    opus_tags_clear(*(_QWORD *)(v11 + 48) + 344);
    *(_DWORD *)(v11 + 44) = 0;
    ++*(_DWORD *)(v11 + 124);
    headers = op_fetch_headers(v11, (unsigned int *)(*(_QWORD *)(v11 + 48) + 52), (_OWORD *)(*(_QWORD *)(v11 + 48) + 344), (_DWORD **)(v11 + 64), (_DWORD *)(v11 + 56), (int *)(v11 + 60), v23);
    if (headers < 0)
      goto LABEL_18;
  }
  v21 = initial_pcm_offset;
  if (initial_pcm_offset < 0)
    goto LABEL_25;
  *(_DWORD *)(v11 + 120) = 1;
  if (a5)
  {
    v21 = 0;
LABEL_22:
    *a5 = v21;
  }
  return v11;
}

uint64_t op_clear(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t (*v10)(_QWORD);

  free(*(void **)(a2 + 12872));
  if (*(_QWORD *)(a2 + 12824))
    opus_multistream_decoder_destroy(a1);
  v4 = *(void **)(a2 + 48);
  if (*(_DWORD *)(a2 + 40))
  {
    if (v4)
    {
      v5 = *(unsigned int *)(a2 + 44);
      if ((int)v5 >= 1)
      {
        v6 = (uint64_t)v4 + 344;
        do
        {
          opus_tags_clear(v6);
          v6 += 376;
          --v5;
        }
        while (v5);
      }
    }
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 120);
    if (v7 > 2 || v7 == 1)
      opus_tags_clear((uint64_t)v4 + 344);
  }
  free(v4);
  free(*(void **)(a2 + 64));
  ogg_stream_clear(a2 + 168);
  result = ogg_sync_clear(a2 + 88);
  v10 = *(uint64_t (**)(_QWORD))(a2 + 24);
  if (v10)
    return v10(*(_QWORD *)(a2 + 32));
  return result;
}

_DWORD *op_open_callbacks(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, int *a6)
{
  _DWORD *v8;
  int v9;

  v8 = (_DWORD *)op_test_callbacks(a2, a3, a4, a5, a6);
  if (v8)
  {
    v9 = op_open2(a1, v8);
    if (v9 < 0)
    {
      if (a6)
        *a6 = v9;
      free(v8);
      return 0;
    }
  }
  return v8;
}

uint64_t op_open2(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t final_pcm_offset;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t next_page;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  __int128 v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  char *v91;
  void *v92;
  uint64_t v93;
  uint64_t decode_ready;
  void *v96;
  _OWORD *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  void *v102;
  size_t v103;
  _QWORD *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void **v109;
  unsigned int *v110;
  char *__ptr;
  char *v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  _OWORD v138[2];
  __int128 v139;
  __int128 v140;
  _BYTE __dst[408];
  __int128 v142;
  _OWORD v143[127];
  uint64_t v144;

  v2 = (uint64_t)a2;
  v144 = *MEMORY[0x24BDAC8D0];
  if (a2[10])
  {
    a2[30] = 2;
    v4 = (int)a2[3205];
    v5 = 48 * v4;
    v6 = malloc(48 * v4);
    if (!v6)
    {
      v5 = 4294967167;
      goto LABEL_154;
    }
    v136 = *(_OWORD *)(v2 + 88);
    v137 = *(_OWORD *)(v2 + 104);
    v7 = v6;
    memcpy(__dst, (const void *)(v2 + 168), sizeof(__dst));
    v99 = *(_QWORD *)(v2 + 144);
    v100 = *(_QWORD *)(v2 + 72);
    v102 = v7;
    v96 = (void *)(v2 + 576);
    memcpy(v7, (const void *)(v2 + 576), 48 * v4);
    v97 = (_OWORD *)(v2 + 88);
    ogg_sync_init((_OWORD *)(v2 + 88));
    v98 = (void *)(v2 + 168);
    ogg_stream_init(v2 + 168, -1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v2 + 32), 0, 2);
    v8 = (*(uint64_t (**)(_QWORD))(v2 + 16))(*(_QWORD *)(v2 + 32));
    *(_QWORD *)(v2 + 72) = v8;
    *(_QWORD *)(v2 + 80) = v8;
    v103 = 48 * v4;
    v104 = a1;
    v101 = v4;
    if (v8 < 0)
    {
      v5 = 4294967168;
      goto LABEL_149;
    }
    v9 = *(_QWORD *)(v2 + 48);
    if (v8 < *(_QWORD *)(v9 + 8))
      goto LABEL_161;
    v121 = *(_QWORD *)(v9 + 8);
    v123 = v2;
    v10 = 0;
    v134 = *(_DWORD *)(v9 + 48);
    v11 = *(_DWORD **)(v2 + 64);
    v109 = (void **)(v2 + 64);
    v12 = *(unsigned int *)(v2 + 56);
    v110 = (unsigned int *)(v2 + 56);
    v139 = 0u;
    v140 = 0u;
    v132 = v11;
    v13 = v11 + 1;
    v14 = 0x10000;
    memset(v138, 0, sizeof(v138));
    v15 = v8;
    v16 = v8;
    v126 = v8;
LABEL_6:
    v128 = v14;
    v17 = v15 - v14;
    v130 = v17 & ~(v17 >> 63);
    final_pcm_offset = op_seek_helper((_QWORD *)v2, v130);
    if ((final_pcm_offset & 0x80000000) != 0)
      goto LABEL_160;
    if (*(_QWORD *)(v2 + 72) >= v16)
    {
      v27 = v128;
      if (v17 >= 1)
      {
        v19 = -1;
        v28 = v126;
        goto LABEL_27;
      }
      goto LABEL_161;
    }
    v124 = v17;
    v19 = -1;
    v20 = v2;
    v21 = v17 & ~(v17 >> 63);
    while (1)
    {
      v22 = v5;
      next_page = op_get_next_page(v20, v138, v16);
      v5 = next_page;
      if (next_page < -1)
      {
        v2 = v123;
        if ((next_page & 0x80000000) == 0)
          goto LABEL_40;
LABEL_149:
        ogg_stream_clear((uint64_t)v98);
        ogg_sync_clear((uint64_t)v97);
        *v97 = v136;
        v97[1] = v137;
        memcpy(v98, __dst, 0x198uLL);
        *(_QWORD *)(v2 + 72) = v100;
        *(_DWORD *)(v2 + 12820) = v101;
        memcpy(v96, v102, v103);
        free(v102);
        v93 = *(_QWORD *)(v2 + 48);
        *(_QWORD *)(v2 + 136) = *(_QWORD *)(v93 + 40);
        *(_QWORD *)(v2 + 144) = v99;
        *(_DWORD *)(v2 + 128) = *(_DWORD *)(v93 + 60);
        a1 = v104;
        if ((v5 & 0x80000000) == 0)
        {
          if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v2 + 8))(*(_QWORD *)(v2 + 32), v100 + *(int *)(v2 + 100) - *(int *)(v2 + 104), 0) & 0x80000000) == 0)goto LABEL_151;
          v5 = 4294967168;
        }
LABEL_154:
        *(_QWORD *)(v2 + 24) = 0;
        op_clear((uint64_t)a1, v2);
        return v5;
      }
      if (next_page == -1)
      {
        v5 = v22;
LABEL_25:
        if (v124 >= 1)
        {
          v2 = v123;
          v28 = v126;
          v27 = v128;
          goto LABEL_27;
        }
        v2 = v123;
        v28 = v126;
        v27 = v128;
        if (v19 < 0)
        {
LABEL_161:
          v5 = 4294967159;
          goto LABEL_149;
        }
LABEL_27:
        v29 = 2 * v27;
        if (v29 >= 0x100000)
          v14 = 0x100000;
        else
          v14 = v29;
        if (v130 + 65306 >= v28)
          v16 = v28;
        else
          v16 = v130 + 65306;
        v15 = v130;
        if ((v19 & 0x8000000000000000) == 0)
        {
          if (v10)
          {
            v142 = v139;
            v143[0] = v140;
            v5 = *((_QWORD *)&v139 + 1);
            LODWORD(a1) = v140;
          }
          v22 = v5;
LABEL_40:
          v30 = v22 + (int)a1;
          *(_QWORD *)(v2 + 80) = v30;
          v31 = v121;
          if (v30 < v121)
            goto LABEL_161;
          v105 = (int *)(v2 + 60);
          v139 = 0u;
          v140 = 0u;
          v32 = *(unsigned int *)(v2 + 44);
          v33 = (int)v32;
          __ptr = *(char **)(v2 + 48);
          *(_QWORD *)&v138[0] = 0;
          v34 = 1;
          while (2)
          {
            v35 = *v109;
            v36 = *v110;
            if (v33 >= (int)v32)
            {
              if ((int)v32 > 0x3FFFFFFF
                || (v108 = (2 * (_DWORD)v32) | 1u, (v91 = (char *)realloc(__ptr, 376 * (int)v108)) == 0))
              {
                v5 = 4294967167;
                goto LABEL_149;
              }
              __ptr = v91;
              *(_QWORD *)(v2 + 48) = v91;
            }
            else
            {
              v108 = v32;
            }
            v116 = v36;
            if ((int)v34 >= 1)
            {
              v37 = 0;
              v38 = v36 - 1;
              while (1)
              {
                if ((int)v36 >= 1)
                {
                  v39 = DWORD1(v143[2 * v37]);
                  if (*v35 == v39)
                    break;
                  v40 = 0;
                  do
                  {
                    if (v38 == v40)
                      goto LABEL_52;
                    v41 = v35[++v40];
                  }
                  while (v41 != v39);
                  if (v40 < v36)
                    break;
                }
LABEL_52:
                if (++v37 == v34)
                {
                  v115 = 0;
                  v42 = v143[2 * (v34 - 1) - 1];
                  v125 = -1;
                  goto LABEL_59;
                }
              }
              if ((_DWORD)v37)
              {
                v42 = v143[2 * (v37 - 1) - 1];
                v43 = &v143[2 * v37 - 1];
                v31 = *((_QWORD *)v43 + 1) + *((int *)v43 + 4);
                if (*((_DWORD *)v43 + 5) == *(_DWORD *)&__ptr[376 * v33 - 328])
                {
                  v115 = *((_QWORD *)v43 + 1);
                  v44 = *((_QWORD *)v43 + 3);
                }
                else
                {
                  v115 = 0;
                  v44 = -1;
                }
                v125 = v44;
                v34 = v37;
LABEL_59:
                if (v33 >= 2
                  && ((v45 = (v33 - 1),
                       v46 = *(_QWORD *)&__ptr[376 * v45],
                       v47 = v46 / v45,
                       v48 = v42 - v47 - 0x10000,
                       v46 > v31 - v47)
                    ? (v49 = v46 < v48)
                    : (v49 = 0),
                      v49))
                {
                  v50 = v47 + v46;
                  if (v50 >= v48)
                    v47 = 0;
                  v51 = v47 + v50;
                }
                else
                {
                  v51 = -1;
                }
                v113 = *((_QWORD *)&v42 + 1);
                v52 = v42;
                v114 = v35;
                v106 = v33 - 1;
                v107 = v33;
                if (v31 >= (uint64_t)v42)
                {
                  v120 = -1;
                  v53 = v2;
LABEL_126:
                  v2 = v53;
                  if (*(_QWORD *)&__ptr[376 * v106 + 32] == -1)
                  {
                    v85 = v120;
                    if (v125 == -1)
                      v85 = -1;
                    v120 = v85;
                    v86 = v113;
                    if (v125 == -1)
                      v87 = v113;
                    else
                      v87 = v115;
                    v88 = v107;
                    final_pcm_offset = op_find_final_pcm_offset((_QWORD *)v53, v114, v116, (uint64_t)&__ptr[376 * v107 - 376], v87, *(_DWORD *)&__ptr[376 * v106 + 48], v125, (uint64_t *)v138);
                    if ((final_pcm_offset & 0x80000000) != 0)
                      goto LABEL_160;
                  }
                  else
                  {
                    v88 = v107;
                    v86 = v113;
                  }
                  if (v120 == v86)
                  {
                    v89 = &v139;
                  }
                  else
                  {
                    final_pcm_offset = op_seek_helper((_QWORD *)v53, v86);
                    if ((final_pcm_offset & 0x80000000) != 0)
                      goto LABEL_160;
                    v89 = 0;
                  }
                  final_pcm_offset = op_fetch_headers(v53, (unsigned int *)&__ptr[376 * v88 + 52], &__ptr[376 * v88 + 344], (_DWORD **)v109, v110, v105, v89);
                  if ((final_pcm_offset & 0x80000000) != 0)
                    goto LABEL_160;
                  v90 = (uint64_t)&__ptr[376 * v88];
                  *(_QWORD *)v90 = v86;
                  *(_QWORD *)(v90 + 8) = *(_QWORD *)(v53 + 72);
                  *(_DWORD *)(v90 + 48) = *(_QWORD *)(v53 + 544);
                  *(_QWORD *)(v90 + 32) = -1;
                  final_pcm_offset = op_find_initial_pcm_offset(v53, v90, 0);
                  if ((final_pcm_offset & 0x80000000) != 0)
                    goto LABEL_160;
                  *(_QWORD *)&__ptr[376 * v88 + 24] = *(_QWORD *)&v138[0];
                  v31 = *(_QWORD *)(v53 + 72);
                  v33 = v88 + 1;
                  *(_DWORD *)(v53 + 44) = v33;
                  v32 = v108;
                  continue;
                }
                v112 = &__ptr[376 * v33 - 328];
                v127 = v35 + 1;
                v129 = v36 - 1;
                v53 = v2;
                while (2)
                {
                  v54 = v52;
                  if (v51 == -1)
                    v51 = v31 + ((v52 - v31) >> 1);
                  v55 = v51 - v31 < 0x10000;
                  if (v51 - v31 >= 0x10000)
                    v52 = v51;
                  else
                    v52 = v31;
                  v56 = v125;
                  if (!v55)
                    v56 = -1;
                  v125 = v56;
                  v57 = op_seek_helper((_QWORD *)v53, v52);
                  if ((v57 & 0x80000000) != 0)
                  {
                    v5 = v57;
                    v2 = v53;
                    goto LABEL_149;
                  }
                  v58 = op_get_next_page(v53, &v139, *((_QWORD *)&v143[2 * (int)v34 - 2] - 1));
                  if (v58 <= -2)
                  {
                    v2 = v53;
                    v5 = v58;
                    goto LABEL_149;
                  }
                  v120 = v58;
                  if (v58 == -1)
                  {
                    v133 = 0;
                    goto LABEL_96;
                  }
                  v59 = ogg_page_serialno((uint64_t)&v139);
                  v60 = ogg_page_granulepos((uint64_t)&v139);
                  if ((int)v36 >= 1)
                  {
                    if (*v114 == v59)
                    {
LABEL_83:
                      v31 = *(_QWORD *)(v53 + 72);
                      v61 = v115;
                      if (v59 == *(_DWORD *)v112)
                        v61 = v120;
                      v115 = v61;
                      v62 = v125;
                      if (v59 == *(_DWORD *)v112)
                        v62 = v60;
                      v125 = v62;
                      v133 = 0x10000;
                      v52 = v54;
                      goto LABEL_96;
                    }
                    v63 = 0;
                    while (v38 != v63)
                    {
                      v64 = v127[v63++];
                      if (v64 == v59)
                      {
                        if (v63 < v36)
                          goto LABEL_83;
                        break;
                      }
                    }
                  }
                  v133 = 0;
                  if ((int)v34 <= 63)
                  {
                    v65 = &v143[2 * (int)v34 - 1];
                    *(_QWORD *)v65 = v52;
                    *((_QWORD *)v65 + 1) = v120;
                    *((_DWORD *)v65 + 4) = *(_DWORD *)(v53 + 72) - v120;
                    *((_DWORD *)v65 + 5) = v59;
                    *((_QWORD *)v65 + 3) = v60;
                    v34 = (v34 + 1);
                  }
                  v113 = v120;
LABEL_96:
                  v66 = v52 - 0x10000;
                  if (v52 - 0x10000 <= v31)
                  {
                    v51 = -1;
                  }
                  else
                  {
                    v118 = v52;
                    v119 = v34;
                    v117 = v52 - 0x10000;
                    if ((int)v34 < 1)
                    {
                      v122 = v52 - 0x10000;
                    }
                    else
                    {
                      v67 = 0;
                      v68 = &__dst[396];
                      v69 = 1;
                      v122 = v66;
                      v70 = v34;
                      v131 = v34;
                      do
                      {
                        v71 = &v143[2 * v67 - 1];
                        v72 = *((_QWORD *)v71 + 3);
                        if ((v72 & 0x8000000000000000) == 0)
                        {
                          v73 = v72 + 48000;
                          v74 = 0x8000000000000000;
                          if (v72 < 0x7FFFFFFFFFFF4480)
                          {
                            v74 = *((_QWORD *)v71 + 3);
                            v73 = 48000;
                          }
                          if (v67)
                          {
                            v75 = v74 + v73;
                            v135 = *((_QWORD *)v71 + 1);
                            v76 = *((_DWORD *)v71 + 5);
                            v77 = v68;
                            v78 = v69;
                            while (1)
                            {
                              v79 = *(_QWORD *)(v77 + 4);
                              if (v79 >= v75 && *(_DWORD *)v77 == v76)
                              {
                                v80 = *(_QWORD *)(v77 - 12);
                                v81 = v79 / (uint64_t)(v79 - v72);
                                v82 = v80 - v135;
                                if (v81 < 1 || (v80 - v31) / v81 >= v82)
                                {
                                  v83 = v133
                                      - op_rescale64(v79 % (uint64_t)(v79 - v72), v79 - v72, v82)
                                      + v80
                                      - v81 * v82;
                                  if (v83 >= v31)
                                    break;
                                }
                              }
                              --v78;
                              v77 -= 32;
                              if (v78 <= 1)
                                goto LABEL_110;
                            }
                            v84 = v122;
                            if (v122 >= v83)
                              v84 = v83;
                            v122 = v84;
LABEL_110:
                            v38 = v129;
                            v70 = v131;
                          }
                        }
                        ++v67;
                        ++v69;
                        v68 += 32;
                      }
                      while (v67 != v70);
                    }
                    v36 = v116;
                    v53 = v123;
                    if (v122 >= v117)
                      v51 = -1;
                    else
                      v51 = v122;
                    v52 = v118;
                    v34 = v119;
                  }
                  if (v31 >= v52)
                    goto LABEL_126;
                  continue;
                }
              }
            }
            break;
          }
          if (*(_QWORD *)&__ptr[376 * (int)v33 - 344] != -1
            || (final_pcm_offset = op_find_final_pcm_offset((_QWORD *)v2, v35, v36, (uint64_t)&__ptr[376 * (int)v33 - 376], *((uint64_t *)&v142 + 1), SDWORD1(v143[0]), *((uint64_t *)&v143[0] + 1), (uint64_t *)v138), (final_pcm_offset & 0x80000000) == 0))
          {
            v92 = realloc(__ptr, 376 * (int)v33);
            if (v92)
              *(_QWORD *)(v2 + 48) = v92;
            free(*v109);
            v5 = 0;
            *(_QWORD *)v110 = 0;
            *((_QWORD *)v110 + 1) = 0;
            goto LABEL_149;
          }
LABEL_160:
          v5 = final_pcm_offset;
          goto LABEL_149;
        }
        goto LABEL_6;
      }
      v24 = ogg_page_serialno((uint64_t)v138);
      *(_QWORD *)&v142 = v21;
      *((_QWORD *)&v142 + 1) = v5;
      LODWORD(a1) = *(_DWORD *)(v123 + 72) - v5;
      *(_QWORD *)&v143[0] = __PAIR64__(v24, a1);
      *((_QWORD *)&v143[0] + 1) = ogg_page_granulepos((uint64_t)v138);
      if (v24 == v134)
      {
        v139 = v142;
        v140 = v143[0];
        v10 = 1;
      }
      if ((int)v12 < 1)
        goto LABEL_19;
      if (*v132 != v24)
        break;
LABEL_20:
      v21 = v5 + 1;
      v20 = v123;
      v19 = v5;
      if (*(_QWORD *)(v123 + 72) >= v16)
        goto LABEL_25;
    }
    v25 = 0;
    while (v12 - 1 != v25)
    {
      v26 = v13[v25++];
      if (v26 == v24)
      {
        if (v25 < v12)
          goto LABEL_20;
        break;
      }
    }
LABEL_19:
    v10 = 0;
    goto LABEL_20;
  }
LABEL_151:
  *(_DWORD *)(v2 + 120) = 3;
  decode_ready = op_make_decode_ready(a1, v2);
  if ((decode_ready & 0x80000000) != 0)
  {
    v5 = decode_ready;
    goto LABEL_154;
  }
  return 0;
}

_DWORD *op_open_memory(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *result;
  __int128 v9;
  __int128 v10;

  v9 = 0u;
  v10 = 0u;
  v6 = op_mem_stream_create(&v9, a2, a3);
  if (!v6)
  {
    if (a4)
    {
      result = 0;
      *a4 = -129;
      return result;
    }
    return 0;
  }
  v7 = v6;
  result = op_open_callbacks(a1, (uint64_t)v6, (uint64_t)&v9, 0, 0, a4);
  if (!result)
  {
    (*((void (**)(_QWORD *))&v10 + 1))(v7);
    return 0;
  }
  return result;
}

uint64_t op_test_memory(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  v4 = op_mem_stream_create(&v7, a1, a2);
  if (!v4)
  {
    if (a3)
    {
      result = 0;
      *a3 = -129;
      return result;
    }
    return 0;
  }
  v5 = v4;
  result = op_test_callbacks((uint64_t)v4, (uint64_t)&v7, 0, 0, a3);
  if (!result)
  {
    (*((void (**)(_QWORD *))&v8 + 1))(v5);
    return 0;
  }
  return result;
}

uint64_t op_test_open(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1[30] != 1)
    return 4294967165;
  v2 = op_open2(0, a1);
  if ((v2 & 0x80000000) == 0)
    return 0;
  v3 = v2;
  bzero(a1, 0x3260uLL);
  return v3;
}

void op_free(uint64_t a1, void *a2)
{
  if (a2)
  {
    op_clear(a1, (uint64_t)a2);
    free(a2);
  }
}

uint64_t op_seekable(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t op_link_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t op_serialno(uint64_t a1, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (!*(_DWORD *)(a1 + 40))
    v3 = 0;
  if (v3 < 0)
    v3 = *(_DWORD *)(a1 + 124);
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 376 * v3 + 48);
}

uint64_t op_channel_count(uint64_t a1, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (!*(_DWORD *)(a1 + 40))
    v3 = 0;
  if (v3 < 0)
    v3 = *(_DWORD *)(a1 + 124);
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 376 * v3 + 56);
}

uint64_t op_head(uint64_t a1, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (!*(_DWORD *)(a1 + 40))
    v3 = 0;
  if (v3 < 0)
    v3 = *(_DWORD *)(a1 + 124);
  return *(_QWORD *)(a1 + 48) + 376 * v3 + 52;
}

uint64_t op_raw_total(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(a1 + 120) < 2)
    return -131;
  if (!*(_DWORD *)(a1 + 40))
    return -131;
  v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= (int)a2)
    return -131;
  if ((a2 & 0x80000000) != 0)
    return *(_QWORD *)(a1 + 80);
  if ((int)(a2 + 1) >= v2)
    v3 = (uint64_t *)(a1 + 80);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 376 * (a2 + 1));
  v5 = *v3;
  if (a2)
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 376 * a2);
  else
    v6 = 0;
  return v5 - v6;
}

uint64_t op_pcm_total(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (*(int *)(a1 + 120) < 2)
    return -131;
  v2 = *(_DWORD *)(a1 + 44);
  if (!*(_DWORD *)(a1 + 40) || v2 <= a2)
    return -131;
  v4 = *(_QWORD *)(a1 + 48);
  if (a2 < 0)
  {
    a2 = v2 - 1;
    v5 = *(_QWORD *)(v4 + 376 * (v2 - 1) + 24);
  }
  else
  {
    v5 = 0;
  }
  v6 = v4 + 376 * a2;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v9 = v7 ^ v8;
  v10 = v8 - v7;
  v11 = ((v8 | 0x8000000000000000) - v7) ^ 0x8000000000000000;
  if ((uint64_t)(v8 | 0x8000000000000000) < v7)
    v11 = 0;
  if (-2 - v8 >= (v7 ^ 0x7FFFFFFFFFFFFFFFLL))
    v12 = v8 - v7;
  else
    v12 = 0;
  if (v8 >= 0)
    v12 = v11;
  if (v9 >= 0)
    v12 = v10;
  return v12 + v5 - *(unsigned int *)(v4 + 376 * a2 + 60);
}

uint64_t op_tags(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (!*(_DWORD *)(a1 + 40))
  {
    v4 = *(_DWORD *)(a1 + 120);
    if (v4 <= 2 && v4 != 1)
      return 0;
    goto LABEL_13;
  }
  if (v3 < 0)
  {
    if (*(int *)(a1 + 120) >= 3)
    {
      v3 = *(_DWORD *)(a1 + 124);
      return *(_QWORD *)(a1 + 48) + 376 * v3 + 344;
    }
LABEL_13:
    v3 = 0;
  }
  return *(_QWORD *)(a1 + 48) + 376 * v3 + 344;
}

uint64_t op_current_link(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2)
    return 4294967165;
  else
    return *(unsigned int *)(a1 + 124);
}

uint64_t op_bitrate(_DWORD *a1, signed int a2)
{
  int64_t v4;
  unint64_t v5;

  if ((int)a1[30] < 2 || !a1[10] || a1[11] <= a2)
    return 4294967165;
  v4 = op_raw_total((uint64_t)a1, a2);
  v5 = op_pcm_total((uint64_t)a1, a2);
  return op_calc_bitrate(v4, v5);
}

uint64_t op_calc_bitrate(int64_t a1, unint64_t a2)
{
  if ((uint64_t)a2 < 1)
    return 0x7FFFFFFFLL;
  if (a1 > (uint64_t)(((a2 >> 1) ^ 0x7FFFFFFFFFFFFC00) / 0x5DC00))
  {
    if (a2 > a1 / 0x15D8uLL)
      return (uint64_t)(a1 + a2 / 0xBB800) / (uint64_t)(a2 / 0x5DC00);
    return 0x7FFFFFFFLL;
  }
  if ((uint64_t)((a2 >> 1) + 384000 * a1) / (uint64_t)a2 >= 0x7FFFFFFF)
    return 0x7FFFFFFFLL;
  else
    return (uint64_t)((a2 >> 1) + 384000 * a1) / (uint64_t)a2;
}

uint64_t op_bitrate_instant(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;

  if (*(int *)(a1 + 120) < 2)
    return 4294967165;
  v2 = *(_QWORD *)(a1 + 160);
  if (!v2)
    return 0xFFFFFFFFLL;
  result = op_calc_bitrate(*(_QWORD *)(a1 + 152), v2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return result;
}

uint64_t op_raw_seek(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  if (*(int *)(a1 + 120) < 2)
    return 4294967165;
  if (!*(_DWORD *)(a1 + 40))
    return 4294967158;
  if (a2 < 0 || *(_QWORD *)(a1 + 80) < a2)
    return 4294967165;
  *(_DWORD *)(a1 + 12820) = 0;
  *(_QWORD *)(a1 + 136) = -1;
  v3 = (_QWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 12884) = 0;
  *(_DWORD *)(a1 + 120) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = -1;
  if ((op_seek_helper((_QWORD *)a1, a2) & 0x80000000) != 0)
    return 4294967168;
  result = op_fetch_and_process_page(a1, 0, -1, 1, 1);
  if ((_DWORD)result == -2)
  {
    *(_DWORD *)(a1 + 12820) = 0;
    *(_DWORD *)(a1 + 12884) = 0;
    *v3 = -1;
    *(_QWORD *)(a1 + 144) = -1;
    if (!*(_DWORD *)(a1 + 40))
      opus_tags_clear(*(_QWORD *)(a1 + 48) + 344);
    result = 0;
    v5 = *(int *)(a1 + 44) - 1;
    *(_DWORD *)(a1 + 120) = 2;
    *(_DWORD *)(a1 + 124) = v5;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 376 * v5 + 32);
    *(_DWORD *)(a1 + 128) = 0;
  }
  return result;
}

uint64_t op_seek_helper(_QWORD *a1, uint64_t a2)
{
  unsigned int (*v3)(_QWORD);

  if (a1[9] != a2)
  {
    v3 = (unsigned int (*)(_QWORD))a1[1];
    if (!v3 || v3(a1[4]))
      return 4294967168;
    a1[9] = a2;
    ogg_sync_reset((uint64_t)(a1 + 11));
  }
  return 0;
}

uint64_t op_fetch_and_process_page(uint64_t a1, __int128 *a2, uint64_t next_page, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int64_t v30;
  int64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int64_t v36;
  uint64_t v37;
  int64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t link_from_serialno;
  int64_t v45;
  _OWORD *v46;
  unsigned int *v47;
  _QWORD *v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  int64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  __int128 v59;
  __int128 v60;
  _DWORD v61[255];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 48);
  v50 = *(_DWORD *)(a1 + 40);
  if (v50)
    v8 = *(unsigned int *)(a1 + 124);
  else
    v8 = 0;
  v52 = v8;
  v53 = *(_QWORD *)(a1 + 48);
  v49 = (_QWORD *)(a1 + 136);
  v9 = *(_DWORD *)(v7 + 376 * (int)v8 + 48);
  v46 = (_OWORD *)(v7 + 344);
  v47 = (unsigned int *)(v7 + 52);
  v54 = (int64_t *)(a1 + 608);
  v55 = a1 + 168;
  while (1)
  {
    v59 = 0u;
    v60 = 0u;
    if (!a2)
      break;
    v10 = a2[1];
    v59 = *a2;
    v60 = v10;
    if (next_page < 0)
      goto LABEL_116;
LABEL_9:
    v11 = *(_DWORD *)(a1 + 120);
    if (v11 < 3)
      goto LABEL_12;
    if (v9 == ogg_page_serialno((uint64_t)&v59))
    {
      v11 = *(_DWORD *)(a1 + 120);
LABEL_12:
      *(_QWORD *)(a1 + 152) += *((_QWORD *)&v59 + 1);
      goto LABEL_13;
    }
    if (!ogg_page_bos((uint64_t)&v59))
      goto LABEL_100;
    if (!a4)
      return 4294967294;
    v11 = *(_DWORD *)(a1 + 120);
    if (v11 > 3)
    {
      *(_DWORD *)(a1 + 12820) = 0;
      *(_DWORD *)(a1 + 12884) = 0;
      *v49 = -1;
      v49[1] = -1;
      if (!*(_DWORD *)(a1 + 40))
        opus_tags_clear(*(_QWORD *)(a1 + 48) + 344);
      *(_DWORD *)(a1 + 120) = 2;
      goto LABEL_37;
    }
LABEL_13:
    if (v11 >= 3)
    {
      if (v11 != 3)
        goto LABEL_15;
      goto LABEL_93;
    }
LABEL_37:
    if (!v50)
    {
      do
      {
        result = op_fetch_headers(a1, v47, v46, 0, 0, 0, &v59);
        if ((result & 0x80000000) != 0)
          return result;
        result = op_find_initial_pcm_offset(a1, v53, &v59);
        if ((result & 0x80000000) != 0)
          return result;
        v9 = *(_DWORD *)(a1 + 544);
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 48) = v9;
        ++*(_DWORD *)(a1 + 124);
      }
      while ((_DWORD)result);
      if (*(int *)(a1 + 12820) >= 1)
        return op_make_decode_ready(0, a1);
      goto LABEL_100;
    }
    v25 = ogg_page_serialno((uint64_t)&v59);
    v26 = v25;
    v27 = v52;
    v28 = (int)v52;
    if (*(_DWORD *)(v53 + 376 * (int)v52 + 48) != v25)
    {
      v27 = (int)v52 + 1;
      if ((int)v52 + 1 >= *(_DWORD *)(a1 + 44) || (v28 = (int)v52 + 1, *(_DWORD *)(v53 + 376 * v27 + 48) != v25))
      {
        link_from_serialno = op_get_link_from_serialno(a1, v52, next_page, v25);
        if ((link_from_serialno & 0x80000000) != 0)
          goto LABEL_100;
        v27 = link_from_serialno;
        v28 = link_from_serialno;
      }
    }
    *(_DWORD *)(a1 + 124) = v27;
    ogg_stream_reset_serialno(v55, v26);
    *(_DWORD *)(a1 + 120) = 3;
    if (next_page <= *(_QWORD *)(v53 + 376 * v28 + 8))
    {
      v43 = v53 + 376 * v28;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(v43 + 40);
      *(_QWORD *)(a1 + 144) = -1;
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(v43 + 60);
      a5 = 1;
    }
    v52 = v27;
    v9 = v26;
LABEL_93:
    result = op_make_decode_ready(0, a1);
    if ((result & 0x80000000) != 0)
      return result;
LABEL_15:
    ogg_stream_pagein(v55, &v59);
    if (*(int *)(a1 + 120) < 4)
      goto LABEL_100;
    v12 = op_collect_audio_packets(a1, (uint64_t)v61);
    if ((v12 & 0x80000000) == 0)
    {
      v13 = v12;
LABEL_18:
      v14 = 1;
      goto LABEL_19;
    }
    do
      v29 = op_collect_audio_packets(a1, (uint64_t)v61);
    while ((v29 & 0x80000000) != 0);
    v13 = v29;
    if (a5)
      goto LABEL_18;
    v14 = 0;
    *v49 = -1;
LABEL_19:
    v15 = *(unsigned int *)(a1 + 12820);
    if ((int)v15 < 1)
      goto LABEL_98;
    v16 = a1 + 48 * (v15 - 1);
    v17 = *(_QWORD *)(v16 + 608);
    v56 = v17;
    v57 = 0;
    v18 = *(_DWORD *)(v16 + 600);
    v19 = *(_QWORD *)(a1 + 136);
    v58 = v19;
    if (v19 == -1)
    {
      if (v18)
      {
        *(_DWORD *)(a1 + 12820) = 0;
        if ((v14 & 1) == 0)
          return 4294967293;
        goto LABEL_100;
      }
      v30 = *(_QWORD *)(v53 + 376 * (int)v52 + 40);
      v58 = v30;
      if (v17 == -1)
      {
        v19 = v30;
      }
      else
      {
        op_granpos_add(&v58, v17, -v13);
        v19 = v58;
      }
      if (((v19 ^ v30) & 0x8000000000000000) == 0)
      {
LABEL_47:
        v31 = v19 - v30;
        goto LABEL_48;
      }
      if (v19 < 0)
      {
        if (-2 - v19 >= (v30 ^ 0x7FFFFFFFFFFFFFFFLL))
          goto LABEL_47;
      }
      else if ((uint64_t)(v19 | 0x8000000000000000) >= v30)
      {
        v31 = ((v19 | 0x8000000000000000) - v30) ^ 0x8000000000000000;
LABEL_48:
        v32 = *(_DWORD *)(v53 + 376 * (int)v52 + 60);
        if (v32 <= 3840)
          v33 = 3840;
        else
          v33 = *(_DWORD *)(v53 + 376 * (int)v52 + 60);
        v34 = v32 - v31;
        if (v31 > (unint64_t)(v33 - 3840))
          v34 = 3840;
        if (v31 >= 0)
          v35 = v34;
        else
          v35 = 3840;
LABEL_56:
        *(_DWORD *)(a1 + 128) = v35;
        goto LABEL_21;
      }
      v35 = 3840;
      goto LABEL_56;
    }
LABEL_21:
    if (v17 == -1)
    {
      if ((op_granpos_add(&v56, v19, v13) & 0x80000000) != 0)
      {
        v17 = *(_QWORD *)(v53 + 376 * (int)v52 + 32);
        v56 = v17;
      }
      else
      {
        v17 = v56;
      }
    }
    if (v18)
    {
      if (((v19 ^ v17) & 0x8000000000000000) == 0)
        goto LABEL_60;
      if ((v17 & 0x8000000000000000) != 0)
      {
        if ((uint64_t)(-2 - v17) >= (v19 ^ 0x7FFFFFFFFFFFFFFFLL))
        {
LABEL_60:
          v36 = v17 - v19;
          goto LABEL_61;
        }
      }
      else if ((uint64_t)(v17 | 0x8000000000000000) >= v19)
      {
        v36 = ((v17 | 0x8000000000000000) - v19) ^ 0x8000000000000000;
LABEL_61:
        if (v36 >= v13)
          goto LABEL_23;
        v37 = 0;
        v57 = v19;
        v45 = v17 | 0x8000000000000000;
        v38 = v54;
        while (2)
        {
          if ((v36 & 0x8000000000000000) == 0)
          {
            v39 = v61[v37];
            v40 = v39;
            goto LABEL_66;
          }
          v39 = v61[v37];
          v40 = v39;
          if (v36 + 0x7FFFFFFFFFFFFFFFLL < v39)
            v41 = v39 + 1;
          else
LABEL_66:
            v41 = v40 - v36;
          if (v41 < 1)
          {
            op_granpos_add(&v57, v19, v39);
            v19 = v57;
          }
          else
          {
            if (v41 > v39)
            {
              LODWORD(v15) = v37;
              goto LABEL_97;
            }
            v57 = v17;
            *(v38 - 1) = 1;
            v19 = v17;
          }
          *v38 = v19;
          if (((v19 ^ v17) & 0x8000000000000000) != 0)
          {
            if ((v17 & 0x8000000000000000) != 0)
            {
              if ((uint64_t)(-2 - v17) >= (v19 ^ 0x7FFFFFFFFFFFFFFFLL))
                v36 = v17 - v19;
              else
                v36 = v41;
            }
            else
            {
              v36 = (v45 - v19) ^ 0x8000000000000000;
              if (v45 < v19)
                v36 = v41;
            }
          }
          else
          {
            v36 = v17 - v19;
          }
          ++v37;
          v38 += 6;
          if (v15 == v37)
            goto LABEL_97;
          continue;
        }
      }
    }
LABEL_23:
    if ((op_granpos_add(&v58, v17, -v13) & 0x80000000) != 0)
      v58 = 0;
    v20 = v61;
    v21 = v15;
    v22 = (unint64_t *)v54;
    do
    {
      if ((op_granpos_add(&v57, v17, -v13) & 0x80000000) != 0)
      {
        v23 = 0;
        v57 = 0;
      }
      else
      {
        v23 = v57;
      }
      v24 = *v20++;
      v13 -= v24;
      op_granpos_add(&v57, v23, v24);
      *v22 = v57;
      v22 += 6;
      --v21;
    }
    while (v21);
LABEL_97:
    *(_QWORD *)(a1 + 136) = v58;
    *(_QWORD *)(a1 + 144) = next_page;
    *(_DWORD *)(a1 + 12820) = v15;
LABEL_98:
    if (!v14)
      return 4294967293;
    if ((int)v15 > 0)
      return 0;
LABEL_100:
    a2 = 0;
  }
  next_page = op_get_next_page(a1, &v59, *(_QWORD *)(a1 + 80));
  if ((next_page & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_116:
  if (next_page == -1)
    return 4294967294;
  else
    return next_page;
}

uint64_t op_pcm_seek(uint64_t a1, int64_t a2)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int packet_duration;
  uint64_t v46;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  uint64_t decode_ready;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t next_page;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  BOOL v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  int64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[3];

  v2 = *(_DWORD *)(a1 + 120);
  if (v2 >= 2)
  {
    if (!*(_DWORD *)(a1 + 40))
      return 4294967158;
    if ((a2 & 0x8000000000000000) == 0)
    {
      v4 = 0;
      v5 = *(_DWORD *)(a1 + 44);
      v6 = *(_QWORD *)(a1 + 48);
      do
      {
        if (*(_QWORD *)(v6 + 376 * (v4 + ((v5 - v4) >> 1)) + 24) > a2)
          v5 = v4 + ((v5 - v4) >> 1);
        else
          v4 += (v5 - v4) >> 1;
      }
      while (v5 - v4 > 1);
      v7 = v6 + 376 * v4;
      v10 = *(_QWORD *)(v7 + 40);
      v8 = v7 + 40;
      v9 = v10;
      v12 = (int *)(v8 + 20);
      v11 = *(int *)(v8 + 20);
      v13 = *(_QWORD *)(v8 - 8);
      v14 = a2 - *(_QWORD *)(v8 - 16);
      v15 = v13 ^ v10;
      v16 = v13 - v10;
      v17 = ((v13 | 0x8000000000000000) - v10) ^ 0x8000000000000000;
      if ((uint64_t)(v13 | 0x8000000000000000) < v10)
        v17 = 0;
      if (-2 - v13 >= (v9 ^ 0x7FFFFFFFFFFFFFFFLL))
        v18 = v16;
      else
        v18 = 0;
      if (v13 < 0)
        v19 = v18;
      else
        v19 = v17;
      if (v15 >= 0)
        v19 = v16;
      if (v14 < (uint64_t)(v19 - v11))
      {
        v107 = *(_QWORD *)(a1 + 48);
        v20 = v14 + v11;
        if (v9 <= (v20 ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v21 = v9;
        }
        else
        {
          v20 += v9 + 0x8000000000000000;
          v21 = 0x8000000000000000;
        }
        v22 = v21 + v20;
        if (v21 + v20 != -1)
        {
          v23 = ((v22 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
          if ((uint64_t)(v22 | 0x8000000000000000) < v9)
            v23 = a2;
          if (-2 - v22 >= (v9 ^ 0x7FFFFFFFFFFFFFFFuLL))
            v24 = v22 - v9;
          else
            v24 = a2;
          if (v22 < 0)
            v23 = v24;
          if ((v9 ^ v22) < 0)
            v25 = v23;
          else
            v25 = v22 - v9;
          v100 = v25;
          v26 = v2 > 3 && v4 == *(_DWORD *)(a1 + 124);
          v27 = v26;
          if (!v26)
            goto LABEL_46;
          v28 = *(_QWORD *)(a1 + 136);
          *(_QWORD *)&v117[0] = v28;
          if (v28 == -1)
            goto LABEL_46;
          op_granpos_add(v117, v28, -((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) & ~((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) >> 31)));
          if ((*(_QWORD *)&v117[0] ^ v22) < 0)
          {
            if ((v22 & 0x8000000000000000) == 0)
            {
              if ((uint64_t)(v22 | 0x8000000000000000) < *(uint64_t *)&v117[0])
                goto LABEL_46;
              v29 = ((v22 | 0x8000000000000000) - *(_QWORD *)&v117[0]) ^ 0x8000000000000000;
              goto LABEL_45;
            }
            if (-2 - v22 < (*(_QWORD *)&v117[0] ^ 0x7FFFFFFFFFFFFFFFuLL))
              goto LABEL_46;
          }
          v29 = v22 - *(_QWORD *)&v117[0];
LABEL_45:
          if ((unint64_t)v29 >> 5 <= 0x86)
            goto LABEL_255;
LABEL_46:
          memset(v117, 0, 32);
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 160) = 0;
          v30 = *(_QWORD *)v8;
          v110 = *(_QWORD *)(v8 - 8);
          v98 = v4;
          v31 = v107 + 376 * v4;
          v32 = *(_DWORD *)(v31 + 48);
          v33 = *(_QWORD *)(v31 + 8);
          if ((unint64_t)v22 >= 0xF00)
          {
            v34 = -3840;
            if (v22 <= (uint64_t)0x8000000000000EFFLL)
              v35 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v35 = v22;
            if (v22 <= (uint64_t)0x8000000000000EFFLL)
              v34 = v22 - 3839;
            v36 = v35 + v34;
            if (v36 < 0)
            {
              if ((v30 & 0x8000000000000000) == 0)
              {
LABEL_55:
                v116 = 0;
                op_granpos_add(&v116, v30, *v12);
                v106 = v12;
                v111 = v36;
                v101 = v9;
                v109 = v30;
                if (v36 < 0)
                {
                  if ((v116 & 0x8000000000000000) == 0 || v116 <= v36)
                  {
LABEL_58:
                    v38 = *(_QWORD *)(v107 + 376 * v4 + 16);
                    v37 = 0;
                    if (!v27)
                      goto LABEL_94;
                    v39 = *(_DWORD *)(a1 + 12820);
                    v40 = __OFSUB__(v39, 1);
                    v41 = v39 - 1;
                    if (v41 < 0 != v40)
                      goto LABEL_94;
                    v42 = *(_QWORD *)(a1 + 72);
                    if (v42 > v38)
                      goto LABEL_94;
                    v43 = *(_QWORD *)(a1 + 48 * v41 + 608);
                    if (v43 == -1)
                      goto LABEL_276;
                    if (v109 < 0)
                    {
                      v37 = 0;
                      if ((v43 & 0x8000000000000000) == 0)
                      {
                        v12 = v106;
                        goto LABEL_94;
                      }
                      if (v43 <= v109)
                        goto LABEL_282;
                    }
                    else if ((v43 & 0x8000000000000000) == 0 && v43 <= v109)
                    {
                      goto LABEL_276;
                    }
                    if ((v110 & 0x8000000000000000) == 0)
                    {
                      v37 = 0;
                      if ((v43 & 0x8000000000000000) == 0 && v110 > v43)
                        goto LABEL_68;
LABEL_282:
                      v12 = v106;
                      goto LABEL_94;
                    }
                    if ((v43 & 0x8000000000000000) == 0 || v110 > v43)
                    {
LABEL_68:
                      if (((v43 ^ v36) & 0x8000000000000000) == 0)
                        goto LABEL_69;
                      if (v43 < 0)
                      {
                        if (-2 - v43 >= (v36 ^ 0x7FFFFFFFFFFFFFFFuLL))
                        {
LABEL_69:
                          v37 = v43 - v36;
                          if (((v43 - v36) & 0x8000000000000000) == 0)
                            goto LABEL_70;
                          goto LABEL_280;
                        }
                      }
                      else
                      {
                        v93 = (v43 | 0x8000000000000000) - v36;
                        if ((uint64_t)(v43 | 0x8000000000000000) >= v36)
                        {
                          v37 = v93 ^ 0x8000000000000000;
                          if (((v93 ^ 0x8000000000000000) & 0x8000000000000000) != 0)
                          {
LABEL_280:
                            if (v42 - v33 >= (v38 - v33) >> 1 || v37 >= 0xFFFFFFFFFFA81C01)
                            {
                              v108 = *(_QWORD *)(a1 + 72);
                              if (*(_QWORD *)(a1 + 192) < *(_QWORD *)(a1 + 184))
                                v108 = *(_QWORD *)(a1 + 144);
                              *(_QWORD *)(a1 + 136) = -1;
                              *(_DWORD *)(a1 + 12820) = 0;
                              *(_DWORD *)(a1 + 12884) = 0;
                              v99 = (int64_t *)(a1 + 136);
                              *(_QWORD *)(a1 + 144) = -1;
                              v52 = 1;
                              v109 = v43;
                              v33 = v42;
                              v12 = v106;
                              goto LABEL_96;
                            }
                            goto LABEL_282;
                          }
LABEL_70:
                          v115 = 0;
                          v44 = *(_QWORD *)(a1 + 608);
                          packet_duration = op_get_packet_duration(*(_BYTE **)(a1 + 576), *(_DWORD *)(a1 + 584));
                          op_granpos_add(&v115, v44, -packet_duration);
                          v46 = v115;
                          if (v115 < 0)
                          {
                            v36 = v111;
                            if ((v111 & 0x8000000000000000) == 0)
                              goto LABEL_73;
                          }
                          else
                          {
                            v36 = v111;
                            if ((v111 & 0x8000000000000000) != 0)
                              goto LABEL_87;
                          }
                          if (v115 > v36)
                          {
LABEL_73:
                            v48 = v42 - v33 <= (v38 - v33) >> 1 || v37 < 0x57E400;
                            *(_QWORD *)(a1 + 136) = -1;
                            v49 = v110;
                            if (v48)
                              v49 = v43;
                            v110 = v49;
                            v50 = *(_DWORD *)(a1 + 40);
                            *(_DWORD *)(a1 + 12820) = 0;
                            if (v48)
                              v38 = v42;
                            *(_DWORD *)(a1 + 12884) = 0;
                            v99 = (int64_t *)(a1 + 136);
                            *(_QWORD *)(a1 + 144) = -1;
                            if (!v50)
                              opus_tags_clear(*(_QWORD *)(a1 + 48) + 344);
                            v12 = v106;
                            goto LABEL_95;
                          }
LABEL_87:
                          *(_DWORD *)(a1 + 12816) = 0;
                          *(_DWORD *)(a1 + 12884) = 0;
                          *(_QWORD *)(a1 + 136) = v46;
                          *(_DWORD *)(a1 + 120) = 3;
                          decode_ready = op_make_decode_ready(0, a1);
                          goto LABEL_206;
                        }
                      }
                      v37 = 0;
                      goto LABEL_70;
                    }
LABEL_276:
                    v37 = 0;
                    goto LABEL_282;
                  }
                  v37 = 0;
                }
                else
                {
                  v37 = 0;
                  if ((v116 & 0x8000000000000000) == 0)
                  {
                    v38 = v33;
                    if (v116 <= v36)
                      goto LABEL_58;
LABEL_94:
                    *(_QWORD *)(a1 + 136) = -1;
                    *(_DWORD *)(a1 + 12820) = 0;
                    *(_DWORD *)(a1 + 12884) = 0;
                    v99 = (int64_t *)(a1 + 136);
                    *(_QWORD *)(a1 + 144) = -1;
LABEL_95:
                    *(_DWORD *)(a1 + 120) = 2;
                    ogg_stream_reset_serialno(a1 + 168, v32);
                    v52 = 0;
                    v108 = v33;
LABEL_96:
                    *(_DWORD *)(a1 + 120) = 3;
                    *(_DWORD *)(a1 + 124) = v4;
                    v105 = v33;
                    if (v38 <= v33)
                    {
                      decode_ready = -1;
                      goto LABEL_210;
                    }
                    v53 = 0;
                    v94 = -2 - v36;
                    v95 = v36 | 0x8000000000000000;
                    v114 = a1 + 168;
                    decode_ready = -1;
                    v102 = v38 - v33;
                    v103 = v38 - v33;
                    v97 = v38 - v33;
                    v54 = v38;
                    v55 = v33;
                    v113 = v109;
                    while (1)
                    {
                      v56 = v54 - v55;
                      if (v54 - v55 >= 0x10000)
                      {
                        v58 = v54;
                        v59 = v56 >> 1;
                        if ((_DWORD)v53)
                        {
                          v60 = v59 + v55;
                          v61 = v102;
                        }
                        else
                        {
                          if (((v113 ^ v111) & 0x8000000000000000) != 0)
                          {
                            if ((v111 & 0x8000000000000000) != 0)
                            {
                              if (v94 >= (v113 ^ 0x7FFFFFFFFFFFFFFFLL))
                                v62 = v111 - v113;
                              else
                                v62 = v37;
                            }
                            else if (v95 >= v113)
                            {
                              v62 = (v95 - v113) ^ 0x8000000000000000;
                            }
                            else
                            {
                              v62 = v37;
                            }
                          }
                          else
                          {
                            v62 = v111 - v113;
                          }
                          v61 = v102;
                          v63 = ((v110 | 0x8000000000000000) - v113) ^ 0x8000000000000000;
                          if ((uint64_t)(v110 | 0x8000000000000000) < v113)
                            v63 = 0;
                          if (-2 - v110 >= (v113 ^ 0x7FFFFFFFFFFFFFFFLL))
                            v64 = v110 - v113;
                          else
                            v64 = 0;
                          if (v110 < 0)
                            v63 = v64;
                          if ((v113 ^ v110) < 0)
                            v65 = v63;
                          else
                            v65 = v110 - v113;
                          v37 = v62;
                          v60 = v55 + op_rescale64(v62, v65, v56) - 0x10000;
                        }
                        v53 = 0;
                        v97 = v61 >> 1;
                        v102 = v103 >> 1;
                        v103 = v59;
                        if (v60 - 0x10000 >= v55)
                          v57 = v60;
                        else
                          v57 = v55;
                        v54 = v58;
                      }
                      else
                      {
                        v57 = v55;
                      }
                      if (v57 != *(_QWORD *)(a1 + 72))
                      {
                        v66 = v53;
                        if (v52)
                          ogg_stream_reset(v114);
                        v67 = op_seek_helper((_QWORD *)a1, v57);
                        if ((v67 & 0x80000000) != 0)
                          return v67;
                        v52 = 0;
                        decode_ready = -1;
                        v53 = v66;
                      }
                      if (v54 <= v55)
                      {
                        v57 = v54;
                        goto LABEL_182;
                      }
                      v112 = v54;
                      v96 = v53;
                      v104 = v37;
                      v68 = 0x10000;
                      v69 = v38;
                      while (1)
                      {
                        while (1)
                        {
                          do
                          {
                            while (1)
                            {
                              next_page = op_get_next_page(a1, v117, v69);
                              decode_ready = next_page;
                              if ((next_page & 0x8000000000000000) == 0)
                                break;
                              if (next_page != -1)
                              {
                                v9 = v101;
                                goto LABEL_206;
                              }
                              if (v57 <= v55 + 1)
                              {
                                decode_ready = -1;
                                goto LABEL_209;
                              }
                              if (v52)
                                ogg_stream_reset(v114);
                              if (v57 - v68 <= v55)
                                v57 = v55;
                              else
                                v57 -= v68;
                              v67 = op_seek_helper((_QWORD *)a1, v57);
                              if ((v67 & 0x80000000) != 0)
                                return v67;
                              v52 = 0;
                              if (2 * v68 >= 0x100000)
                                v68 = 0x100000;
                              else
                                v68 *= 2;
                              decode_ready = -1;
                              v72 = v113;
                              v69 = v38;
LABEL_148:
                              v113 = v72;
                              if (v55 >= v112)
                              {
                                v113 = v72;
LABEL_180:
                                v57 = v112;
                                v38 = v69;
LABEL_181:
                                v37 = v104;
                                v53 = v96;
                                goto LABEL_182;
                              }
                            }
                            if (next_page < v38)
                              v38 = next_page;
                          }
                          while (v32 != ogg_page_serialno((uint64_t)v117));
                          if ((int)ogg_page_packets((uint64_t *)v117) >= 1)
                            break;
                          if (v52)
                            ogg_stream_pagein(v114, v117);
                        }
                        v71 = ogg_page_granulepos((uint64_t)v117);
                        if (v71 != -1)
                          break;
                        if (v52)
                        {
                          ogg_stream_reset(v114);
                          v52 = 0;
                        }
                      }
                      v72 = v71;
                      if ((v71 & 0x8000000000000000) == 0)
                        break;
                      if ((v111 & 0x8000000000000000) != 0 && (uint64_t)v111 > v71)
                      {
                        v55 = *(_QWORD *)(a1 + 72);
                        v73 = v113;
                        if ((v113 & 0x8000000000000000) == 0)
                        {
                          if ((v110 & 0x8000000000000000) == 0)
                            goto LABEL_180;
                          goto LABEL_157;
                        }
LABEL_154:
                        if (v73 > v71)
                          goto LABEL_180;
                        if ((v110 & 0x8000000000000000) == 0)
                        {
                          if (v71 < 0)
                            goto LABEL_180;
                          goto LABEL_157;
                        }
                        if (v71 < 0)
                        {
LABEL_157:
                          if (v71 > v110)
                            goto LABEL_180;
                        }
                        if (v52)
                          ogg_stream_reset(v114);
                        v108 = v55;
                        if (*(unsigned __int8 *)(*(unsigned __int8 *)(*(_QWORD *)&v117[0] + 26)
                                                + *(_QWORD *)&v117[0]
                                                + 26) == 255)
                        {
                          op_buffer_continued_data(a1, v117);
                          v108 = decode_ready;
                        }
                        if (((v72 ^ v111) & 0x8000000000000000) != 0)
                        {
                          if ((v111 & 0x8000000000000000) != 0)
                          {
                            v74 = v104;
                            if (v94 >= (v72 ^ 0x7FFFFFFFFFFFFFFFLL))
                              v74 = v111 - v72;
                          }
                          else
                          {
                            v74 = v104;
                            if (v95 >= v72)
                              v74 = (v95 - v72) ^ 0x8000000000000000;
                          }
                        }
                        else
                        {
                          v74 = v111 - v72;
                        }
                        v52 = 1;
                        v109 = v72;
                        v104 = v74;
                        v105 = v55;
                        v57 = v55;
                        if (v74 > 48000)
                        {
                          v113 = v72;
                          v109 = v72;
                          v57 = v112;
                          v38 = v69;
                          v105 = v55;
                          goto LABEL_181;
                        }
                        goto LABEL_148;
                      }
LABEL_184:
                      if (v57 <= v55 + 1)
                      {
LABEL_209:
                        v12 = v106;
                        goto LABEL_210;
                      }
                      v53 = v57 - v55 > 2 * v97;
                      if (v110 < 0)
                      {
                        if (v71 < 0)
                        {
LABEL_187:
                          if (v110 <= v71)
                            goto LABEL_192;
                        }
                        if (v113 < 0)
                        {
                          if ((v71 & 0x8000000000000000) == 0)
                            goto LABEL_192;
LABEL_190:
                          if (v113 > v71)
                            goto LABEL_192;
                        }
                        else if ((v71 & 0x8000000000000000) == 0)
                        {
                          goto LABEL_190;
                        }
                        v110 = v71;
                        goto LABEL_192;
                      }
                      if ((v71 & 0x8000000000000000) == 0)
                        goto LABEL_187;
LABEL_192:
                      v37 = v104;
LABEL_182:
                      v54 = v57;
                      v75 = v55 < v57;
                      v12 = v106;
                      if (!v75)
                      {
LABEL_210:
                        if (v52)
                          goto LABEL_211;
                        if (v108 == decode_ready)
                        {
                          if (v108 >= v105)
                          {
LABEL_211:
                            *(_QWORD *)(a1 + 136) = v109;
                            *(_QWORD *)(a1 + 144) = v108;
                            if (decode_ready < 0)
                            {
                              v9 = v101;
                              goto LABEL_224;
                            }
                            v76 = v117;
                            v9 = v101;
LABEL_225:
                            if ((op_fetch_and_process_page(a1, v76, decode_ready, 0, 1) & 0x80000000) != 0)
                              return 4294967159;
                            if (*v99 < 0)
                            {
                              v79 = v111;
                              if ((v111 & 0x8000000000000000) == 0)
                                return 4294967159;
                            }
                            else
                            {
                              v79 = v111;
                              if ((v111 & 0x8000000000000000) != 0)
                                goto LABEL_229;
                            }
                            if (*v99 > v79)
                              return 4294967159;
                            goto LABEL_229;
                          }
                          v9 = v101;
                          v77 = v107;
                          if ((v108 & 0x8000000000000000) == 0)
                            goto LABEL_222;
LABEL_220:
                          v78 = op_get_next_page(a1, v117, *(_QWORD *)(v77 + 376 * v98 + 16));
                          if (v78 > -2)
                          {
                            if (v78 != v108)
                              return 4294967159;
LABEL_222:
                            op_buffer_continued_data(a1, v117);
LABEL_223:
                            *(_QWORD *)(a1 + 136) = v109;
                            *(_QWORD *)(a1 + 144) = v108;
                            decode_ready = -1;
LABEL_224:
                            v76 = 0;
                            goto LABEL_225;
                          }
                          decode_ready = v78;
LABEL_206:
                          v12 = v106;
                          if ((decode_ready & 0x80000000) != 0)
                            return decode_ready;
LABEL_229:
                          v80 = 3840;
                          if (v100 > 3840)
                            v80 = v100;
                          v81 = v80 - 3840;
                          if (v100 <= *v12)
                            v82 = 0;
                          else
                            v82 = v81;
                          v83 = v9 ^ 0x7FFFFFFFFFFFFFFFLL;
                          while (1)
                          {
                            v84 = *(_DWORD *)(a1 + 12820);
                            v85 = *(_QWORD *)(a1 + 136);
                            v86 = *(_DWORD *)(a1 + 12816);
                            if (v86 < v84)
                              break;
LABEL_247:
                            *(_QWORD *)(a1 + 136) = v85;
                            *(_DWORD *)(a1 + 12816) = v86;
                            if ((op_fetch_and_process_page(a1, 0, -1, 0, 1) & 0x80000000) != 0)
                              return 4294967159;
                          }
                          v87 = (uint64_t *)(a1 + 608 + 48 * v86);
                          while (2)
                          {
                            v88 = v85;
                            v89 = *v87;
                            v87 += 6;
                            v85 = v89;
                            if ((v89 ^ v9) < 0)
                            {
                              if (v85 < 0)
                              {
                                if (-2 - v85 >= v83)
                                  goto LABEL_238;
                              }
                              else if ((uint64_t)(v85 | 0x8000000000000000) >= v9)
                              {
                                v90 = ((v85 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
                                goto LABEL_239;
                              }
                            }
                            else
                            {
LABEL_238:
                              v90 = v85 - v9;
LABEL_239:
                              if (v90 > v82)
                              {
                                *(_QWORD *)(a1 + 136) = v88;
                                *(_DWORD *)(a1 + 12816) = v86;
                                if (((v88 ^ v9) & 0x8000000000000000) == 0)
                                  goto LABEL_250;
                                if ((v88 & 0x8000000000000000) == 0)
                                {
                                  if ((uint64_t)(v88 | 0x8000000000000000) >= v9)
                                  {
                                    v91 = ((v88 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
                                    goto LABEL_251;
                                  }
                                  return 4294967159;
                                }
                                if (-2 - v88 < v83)
                                  return 4294967159;
LABEL_250:
                                v91 = v88 - v9;
LABEL_251:
                                if (v91 > v82)
                                  return 4294967159;
                                v29 = v100 - v91;
                                if (v29 > 2147483646)
                                  return 4294967159;
LABEL_255:
                                decode_ready = 0;
                                *(_DWORD *)(a1 + 128) = v29;
                                return decode_ready;
                              }
                            }
                            if (v84 == ++v86)
                            {
                              v86 = *(_DWORD *)(a1 + 12820);
                              goto LABEL_247;
                            }
                            continue;
                          }
                        }
                        v67 = op_seek_helper((_QWORD *)a1, v108);
                        if ((v67 & 0x80000000) == 0)
                        {
                          v9 = v101;
                          v77 = v107;
                          if (v108 < v105)
                            goto LABEL_220;
                          goto LABEL_223;
                        }
                        return v67;
                      }
                    }
                    if ((v111 & 0x8000000000000000) == 0 && v111 <= v71)
                      goto LABEL_184;
                    v55 = *(_QWORD *)(a1 + 72);
                    v73 = v113;
                    if (v113 < 0)
                      goto LABEL_180;
                    goto LABEL_154;
                  }
                }
                v38 = v33;
                goto LABEL_94;
              }
              goto LABEL_54;
            }
            if ((v30 & 0x8000000000000000) == 0)
            {
LABEL_54:
              if (v30 <= v36)
                goto LABEL_55;
            }
          }
          v36 = v30;
          goto LABEL_55;
        }
      }
    }
  }
  return 4294967165;
}

uint64_t op_raw_tell(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2)
    return -131;
  else
    return *(_QWORD *)(a1 + 72);
}

uint64_t op_pcm_tell(uint64_t a1)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;

  if (*(int *)(a1 + 120) < 2)
    return -131;
  v2 = *(_QWORD *)(a1 + 136);
  v22 = v2;
  if (v2 == -1)
    return 0;
  op_granpos_add(&v22, v2, -((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) & ~((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) >> 31)));
  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
    v4 = *(_DWORD *)(a1 + 124);
  else
    v4 = 0;
  v6 = op_granpos_add(&v22, v22, *(_DWORD *)(a1 + 128));
  v7 = *(_QWORD *)(a1 + 48);
  v8 = v7 + 376 * v4;
  v9 = (unint64_t *)(v8 + 32);
  if (v6 >= 0)
    v9 = &v22;
  v10 = *v9;
  result = *(_QWORD *)(v8 + 24);
  if (v3)
  {
    v11 = *(_QWORD *)(v7 + 376 * v4 + 32);
    if ((v10 & 0x8000000000000000) == 0)
    {
      v12 = *(_QWORD *)(v7 + 376 * v4 + 40);
      if (v11 >= (unint64_t)v10)
        v13 = v10;
      else
        v13 = *(_QWORD *)(v7 + 376 * v4 + 32);
      if (v11 >= 0)
        v10 = v13;
      goto LABEL_19;
    }
    if (v11 < 0 && v11 >= v10)
    {
      v12 = *(_QWORD *)(v7 + 376 * v4 + 40);
      goto LABEL_34;
    }
  }
  else
  {
    v11 = v10;
  }
  v12 = *(_QWORD *)(v7 + 376 * v4 + 40);
  v10 = v11;
  if ((v11 & 0x8000000000000000) == 0)
  {
LABEL_19:
    if (v12 < 0)
      return result;
    v14 = 0;
    goto LABEL_21;
  }
LABEL_34:
  if ((v12 & 0x8000000000000000) == 0)
    goto LABEL_35;
  v14 = 1;
LABEL_21:
  v15 = v10 - v12;
  if (v10 <= v12)
    return result;
  if ((v10 ^ v12) < 0)
  {
    if (!v14)
    {
      v19 = v10 | 0x8000000000000000;
      v20 = v19 < v12;
      v21 = v19 - v12;
      if (!v20)
      {
        v15 = v21 ^ 0x8000000000000000;
        goto LABEL_23;
      }
      return 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_35:
    if (-2 - v10 >= (v12 ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v15 = v10 - v12;
      goto LABEL_23;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_23:
  v16 = *(unsigned int *)(v7 + 376 * v4 + 60);
  v17 = __OFSUB__(v15, v16);
  v18 = v15 - v16;
  if (v18 < 0 != v17)
    v18 = 0;
  result += v18;
  return result;
}

uint64_t op_set_decode_callback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 12832) = a2;
  *(_QWORD *)(result + 12840) = a3;
  return result;
}

uint64_t op_set_gain_offset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if ((a2 - 3007) >= 3 && (_DWORD)a2 != 0)
    return 4294967165;
  *(_DWORD *)(a1 + 12888) = a2;
  if ((int)a3 >= 98303)
    v9 = 98303;
  else
    v9 = a3;
  if (v9 <= -98302)
    v9 = -98302;
  *(_DWORD *)(a1 + 12892) = v9;
  op_update_gain(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t op_update_gain(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  if (*(int *)(result + 120) < 4)
    return result;
  v8 = result;
  if (*(_DWORD *)(result + 40))
    v9 = *(_DWORD *)(result + 124);
  else
    v9 = 0;
  v10 = *(_DWORD *)(result + 12892);
  v11 = *(_QWORD *)(result + 48);
  v12 = *(_DWORD *)(result + 12888);
  if (v12)
  {
    if (v12 == 3008)
    {
      v16 = 0;
      v13 = v11 + 376 * v9;
      opus_tags_get_track_gain((uint64_t *)(v13 + 344), &v16);
      v14 = v16;
      goto LABEL_11;
    }
    if (v12 == 3007)
    {
      v17 = 0;
      v13 = v11 + 376 * v9;
      opus_tags_get_album_gain((uint64_t *)(v13 + 344), &v17);
      v14 = v17;
LABEL_11:
      v10 += v14 + *(_DWORD *)(v13 + 68);
    }
  }
  else
  {
    v10 += *(_DWORD *)(v11 + 376 * v9 + 68);
  }
  if (v10 >= 0x7FFF)
    LODWORD(v15) = 0x7FFF;
  else
    LODWORD(v15) = v10;
  if ((int)v15 <= -32768)
    v15 = 4294934528;
  else
    v15 = v15;
  return opus_multistream_decoder_ctl(*(_DWORD **)(v8 + 12824), 4034, a3, a4, a5, a6, a7, a8, v15);
}

uint64_t op_read_native(uint64_t a1, char *a2, int a3, _DWORD *a4)
{
  int v4;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t packet_duration;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t inited;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;

  v4 = *(_DWORD *)(a1 + 120);
  if (v4 < 2)
    return 4294967165;
  v8 = a1 + 576;
  while (1)
  {
    if (v4 < 4)
    {
LABEL_22:
      v30 = op_fetch_and_process_page(a1, 0, -1, 1, 0);
      if (v30 == -2)
      {
        v29 = 0;
        goto LABEL_52;
      }
      if (v30 >= 0)
        v29 = v38;
      else
        v29 = v30;
      if (v30 < 0)
        return v29;
      goto LABEL_41;
    }
    v9 = *(_DWORD *)(a1 + 40);
    if (v9)
      v9 = *(_DWORD *)(a1 + 124);
    v10 = *(int *)(*(_QWORD *)(a1 + 48) + 376 * v9 + 56);
    v11 = *(_DWORD *)(a1 + 12880);
    v12 = (*(_DWORD *)(a1 + 12884) - v11);
    if ((int)v12 >= 1)
      break;
    v13 = *(_DWORD *)(a1 + 12816);
    if (v13 >= *(_DWORD *)(a1 + 12820))
      goto LABEL_22;
    v14 = v8 + 48 * v13;
    *(_DWORD *)(a1 + 12816) = v13 + 1;
    v15 = *(_DWORD *)(a1 + 128);
    v16 = (_QWORD *)(v14 + 8);
    packet_duration = op_get_packet_duration(*(_BYTE **)v14, *(_DWORD *)(v14 + 8));
    v21 = packet_duration;
    v22 = *(_QWORD *)(v14 + 32);
    v23 = packet_duration;
    if (*(_QWORD *)(v14 + 24))
    {
      v31 = *(_QWORD *)(a1 + 136);
      if ((v22 & 0x8000000000000000) == 0)
      {
        v23 = 0;
        if ((v31 & 0x8000000000000000) != 0 || (uint64_t)v22 <= (uint64_t)v31)
          goto LABEL_9;
LABEL_31:
        v32 = v22 - v31;
        if (v32 >= (int)packet_duration)
          v23 = packet_duration;
        else
          v23 = v32;
        goto LABEL_9;
      }
      if ((v31 & 0x8000000000000000) != 0)
      {
        if (v22 <= v31)
        {
          v23 = 0;
          goto LABEL_9;
        }
        if (((v31 ^ v22) & 0x8000000000000000) == 0)
          goto LABEL_31;
      }
      v23 = packet_duration;
      if ((uint64_t)(-2 - v22) >= (uint64_t)(v31 ^ 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_31;
    }
LABEL_9:
    *(_QWORD *)(a1 + 136) = v22;
    if ((int)packet_duration * (int)v10 > a3)
    {
      v33 = *(_QWORD *)(a1 + 12872);
      if (!v33)
      {
        v37 = packet_duration;
        inited = op_init_buffer(a1);
        if ((inited & 0x80000000) != 0)
          return inited;
        v33 = *(_QWORD *)(a1 + 12872);
        v21 = v37;
      }
      inited = op_decode(a1, v33, v14, v21, v10, v18, v19, v20);
      if ((inited & 0x80000000) != 0)
        return inited;
      if (v23 >= v15)
        v34 = v15;
      else
        v34 = v23;
      *(_DWORD *)(a1 + 128) = v15 - v34;
      *(_DWORD *)(a1 + 12880) = v34;
      *(_DWORD *)(a1 + 12884) = v23;
      v35 = *(_QWORD *)(a1 + 160) + v23 - v34;
      *(_QWORD *)(a1 + 152) += *v16;
      *(_QWORD *)(a1 + 160) = v35;
LABEL_40:
      LODWORD(v29) = v38;
      goto LABEL_41;
    }
    inited = op_decode(a1, (uint64_t)a2, v14, packet_duration, v10, v18, v19, v20);
    if ((inited & 0x80000000) != 0)
      return inited;
    if (v23 < 1)
      goto LABEL_40;
    if (v23 >= v15)
      v25 = v15;
    else
      v25 = v23;
    *(_DWORD *)(a1 + 128) = v15 - v25;
    v26 = (v23 - v25);
    if (v25 >= 1 && (int)v26 >= 1)
      memmove(a2, &a2[2 * v25 * (int)v10], 2 * v10 * v26);
    v28 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) += *v16;
    *(_QWORD *)(a1 + 160) = v28 + (int)v26;
    LODWORD(v29) = v38;
    if ((int)v26 >= 1)
    {
      v29 = v26;
      goto LABEL_52;
    }
LABEL_41:
    v38 = v29;
    v4 = *(_DWORD *)(a1 + 120);
  }
  if ((int)v12 * (int)v10 <= a3 || (v12 = (a3 / (int)v10), v29 = v12, (int)v12 >= 1))
  {
    memcpy(a2, (const void *)(*(_QWORD *)(a1 + 12872) + 2 * v11 * (int)v10), 2 * v10 * v12);
    *(_DWORD *)(a1 + 12880) = v12 + v11;
    v29 = v12;
  }
LABEL_52:
  if (a4)
    *a4 = *(_DWORD *)(a1 + 124);
  return v29;
}

uint64_t op_read_stereo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_stereo_filter, 0);
}

uint64_t op_filter_read_native(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), _DWORD *a5)
{
  uint64_t native;
  int v10;
  int v11;

  native = op_read_native(a1, 0, 0, a5);
  if ((native & 0x80000000) == 0 && *(int *)(a1 + 120) >= 4)
  {
    v10 = *(_DWORD *)(a1 + 12880);
    native = (*(_DWORD *)(a1 + 12884) - v10);
    if ((int)native >= 1)
    {
      if (*(_DWORD *)(a1 + 40))
        v11 = *(_DWORD *)(a1 + 124);
      else
        v11 = 0;
      native = a4(a1, a2, a3, *(_QWORD *)(a1 + 12872) + 2 * *(_DWORD *)(*(_QWORD *)(a1 + 48) + 376 * v11 + 56) * v10);
      *(_DWORD *)(a1 + 12880) = native + v10;
    }
  }
  return native;
}

uint64_t op_stereo_filter(int a1, char *__dst, int a3, char *__src, int a5, int a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t i;
  int32x2_t v11;
  uint64_t v12;
  __int16 *v13;
  __int16 *v14;
  unsigned int v15;
  int32x2_t v16;
  char *v17;
  int32x2_t v18;

  if (a3 >> 1 >= a5)
    v6 = a5;
  else
    v6 = (a3 >> 1);
  if (a6 == 2)
  {
    memcpy(__dst, __src, 4 * (_DWORD)v6);
  }
  else if (a6 == 1)
  {
    if ((int)v6 >= 1)
    {
      v7 = __dst + 2;
      v8 = v6;
      do
      {
        v9 = *(_WORD *)__src;
        __src += 2;
        *v7 = v9;
        *(v7 - 1) = v9;
        v7 += 2;
        --v8;
      }
      while (v8);
    }
  }
  else if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      v11 = 0;
      if (a6 >= 1)
      {
        v12 = a6;
        v13 = (__int16 *)((char *)&OP_STEREO_DOWNMIX_Q14 + 32 * a6 - 96);
        v14 = (__int16 *)__src;
        do
        {
          v15 = *v14++;
          v16.i32[0] = *v13;
          v16.i32[1] = v13[1];
          v11 = vmla_s32(v11, vdup_n_s32(v15), v16);
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v17 = &__dst[4 * i];
      v18 = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(v11, (int32x2_t)0x200000002000), 0xEuLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
      *((_WORD *)v17 + 1) = v18.i16[2];
      *(_WORD *)v17 = v18.i16[0];
      __src += 2 * a6;
    }
  }
  return v6;
}

uint64_t op_read_float(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_short2float_filter, a4);
}

uint64_t op_short2float_filter(uint64_t a1, float *a2, int a3, __int16 *a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v7;
  int v8;

  result = a5;
  LODWORD(v7) = a6 * a5;
  if (a6 * (int)a5 > a3)
  {
    result = (a3 / a6);
    LODWORD(v7) = result * a6;
  }
  if ((int)v7 >= 1)
  {
    v7 = v7;
    do
    {
      v8 = *a4++;
      *a2++ = (float)v8 * 0.000030518;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t op_read_float_stereo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_short2float_stereo_filter, 0);
}

uint64_t op_short2float_stereo_filter(int a1, float *a2, int a3, char *__dst, int a5, int a6)
{
  char *v6;
  float *v7;
  uint64_t result;
  float *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  float v14;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t i;
  float32x2_t v23;
  uint64_t v24;
  float32x2_t *v25;
  char *v26;
  int v27;
  float v28;
  float32x2_t v29;

  v6 = __dst;
  v7 = a2;
  if (a3 >> 1 >= a5)
    result = a5;
  else
    result = (a3 >> 1);
  if (a6 == 1)
  {
    if ((int)result >= 1)
    {
      v9 = a2;
      v10 = result;
      do
      {
        v11 = *(__int16 *)v6;
        v6 += 2;
        *v9++ = (float)v11 * 0.000030518;
        --v10;
      }
      while (v10);
      v12 = result + 1;
      v13 = 2 * result - 2;
      do
      {
        v14 = a2[(v12 - 2)];
        a2[v13 + 1] = v14;
        a2[v13] = v14;
        --v12;
        v13 -= 2;
      }
      while (v12 > 1);
    }
  }
  else if (a6 >= 5)
  {
    if ((int)result >= 1)
    {
      for (i = 0; i != result; ++i)
      {
        v23 = 0;
        v24 = a6;
        v25 = (float32x2_t *)((char *)&OP_STEREO_DOWNMIX + 64 * (unint64_t)(a6 - 3));
        v26 = v6;
        do
        {
          v27 = *(__int16 *)v26;
          v26 += 2;
          v28 = (float)v27 * 0.000030518;
          v29 = *v25++;
          v23 = vmla_n_f32(v23, v29, v28);
          --v24;
        }
        while (v24);
        *(float32x2_t *)&a2[2 * i] = v23;
        v6 += 2 * a6;
      }
    }
  }
  else
  {
    if (a6 >= 3)
      LODWORD(result) = op_stereo_filter(result, __dst, 2 * (int)result, __dst, result, a6);
    LODWORD(v16) = 2 * result;
    if (a3 >= 0)
      v17 = a3;
    else
      v17 = a3 + 1;
    v18 = v17 >> 1;
    v19 = v17 & 0xFFFFFFFE;
    v20 = (int)v16 <= a3;
    if ((int)v16 > a3)
      v16 = v19;
    else
      v16 = v16;
    if (v20)
      result = result;
    else
      result = v18;
    if ((int)v16 >= 1)
    {
      do
      {
        v21 = *(__int16 *)v6;
        v6 += 2;
        *v7++ = (float)v21 * 0.000030518;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t op_fetch_headers(uint64_t a1, unsigned int *a2, _OWORD *a3, _DWORD **a4, _DWORD *a5, int *a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD v33[2];
  _OWORD v34[3];

  v7 = a7;
  memset(v33, 0, sizeof(v33));
  if (!a7)
  {
    v13 = *(_QWORD *)(a1 + 72);
    v14 = v13 >= 0x7FFFFFFFFFFEFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v13 + 0x10000;
    v7 = v33;
    if (op_get_next_page(a1, v33, v14) < 0)
      return 4294967164;
  }
  v31 = a3;
  *(_DWORD *)(a1 + 120) = 2;
  if (a4)
    *a5 = 0;
  memset(v34, 0, sizeof(v34));
  while (ogg_page_bos((uint64_t)v7))
  {
    if (a4)
    {
      v15 = *a4;
      v16 = *a5;
      v17 = ogg_page_serialno((uint64_t)v7);
      if ((int)v16 >= 1)
      {
        if (*v15 == v17)
          goto LABEL_43;
        v18 = 0;
        while (v16 - 1 != v18)
        {
          v19 = v15[++v18];
          if (v19 == v17)
          {
            if (v18 < v16)
              goto LABEL_43;
            break;
          }
        }
      }
      v20 = ogg_page_serialno((uint64_t)v7);
      v21 = *a4;
      v22 = (int)*a5;
      v23 = *a6;
      if ((int)v22 >= *a6)
      {
        if (v23 > 0xFFFFFFF || (v23 = (2 * v23) | 1, (v21 = realloc(v21, 4 * v23)) == 0))
        {
          result = 4294967167;
          goto LABEL_44;
        }
      }
      v21[v22] = v20;
      *a4 = v21;
      *a5 = v22 + 1;
      *a6 = v23;
    }
    if (*(int *)(a1 + 120) <= 2)
    {
      v24 = ogg_page_serialno((uint64_t)v7);
      ogg_stream_reset_serialno(a1 + 168, v24);
      ogg_stream_pagein(a1 + 168, v7);
      if ((int)ogg_stream_packetout((_QWORD *)(a1 + 168), v34) >= 1)
      {
        result = opus_head_parse(a2, *(uint64_t *)&v34[0], *((unint64_t *)&v34[0] + 1));
        if ((result & 0x80000000) != 0)
        {
          if ((_DWORD)result != -132)
            goto LABEL_44;
        }
        else
        {
          *(_DWORD *)(a1 + 120) = 3;
        }
      }
    }
    v26 = *(_QWORD *)(a1 + 72);
    if (v26 >= 0x7FFFFFFFFFFEFFFFLL)
      v26 = 0x7FFFFFFFFFFEFFFFLL;
    if (op_get_next_page(a1, v7, v26 + 0x10000) < 0)
    {
      if (*(int *)(a1 + 120) >= 3)
        result = 4294967163;
      else
        result = 4294967164;
      goto LABEL_44;
    }
  }
  if (*(_DWORD *)(a1 + 120) != 3)
  {
    result = 4294967164;
    goto LABEL_44;
  }
  v27 = *(_QWORD *)(a1 + 544);
  if (v27 == (int)ogg_page_serialno((uint64_t)v7))
LABEL_34:
    ogg_stream_pagein(a1 + 168, v7);
  v28 = ogg_stream_packetout((_QWORD *)(a1 + 168), v34);
  if (!v28)
  {
    do
    {
      v29 = *(_QWORD *)(a1 + 72);
      if (v29 >= 0x7FFFFFFFFFFEFFFFLL)
        v29 = 0x7FFFFFFFFFFEFFFFLL;
      if (op_get_next_page(a1, v7, v29 + 0x10000) < 0)
        break;
      v30 = *(_QWORD *)(a1 + 544);
      if (v30 == (int)ogg_page_serialno((uint64_t)v7))
        goto LABEL_34;
    }
    while (!ogg_page_bos((uint64_t)v7));
    goto LABEL_43;
  }
  if (v28 == -1)
  {
LABEL_43:
    result = 4294967163;
LABEL_44:
    *(_DWORD *)(a1 + 120) = 2;
    return result;
  }
  result = opus_tags_parse(v31, *(uint64_t *)&v34[0], *((unint64_t *)&v34[0] + 1));
  if ((result & 0x80000000) != 0)
    goto LABEL_44;
  if (ogg_stream_packetout((_QWORD *)(a1 + 168), v34) || *(unsigned __int8 *)(v7[1] + *v7 - 1) == 255)
  {
    opus_tags_clear((uint64_t)v31);
    goto LABEL_43;
  }
  return 0;
}

uint64_t op_find_initial_pcm_offset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t next_page;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t *v20;
  int64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[2];
  _DWORD v30[255];
  uint64_t v31;

  v5 = 0;
  v6 = 0;
  v31 = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  if (a3)
    v7 = a3;
  else
    v7 = v29;
  v8 = a1 + 168;
  v9 = *(_DWORD *)(a1 + 544);
  do
  {
    next_page = op_get_next_page(a1, v7, *(_QWORD *)(a1 + 80));
    v11 = next_page;
    if (next_page < 0)
    {
      if (next_page != -1)
        return v11;
      if (!*(_DWORD *)(a2 + 60))
      {
        v11 = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 24) = 0;
        return v11;
      }
      return 4294967157;
    }
    if (ogg_page_bos((uint64_t)v7))
    {
      if (!*(_DWORD *)(a2 + 60))
      {
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 24) = 0;
        return 1;
      }
      return 4294967157;
    }
    if (ogg_page_serialno((uint64_t)v7) == v9)
    {
      ogg_stream_pagein(v8, v7);
      *(_QWORD *)(a1 + 152) += v7[1];
      do
        v12 = op_collect_audio_packets(a1, (uint64_t)v30);
      while (v12 < 0);
      v5 = v12;
      v6 = *(_DWORD *)(a1 + 12820);
    }
    v13 = v6 - 1;
  }
  while (v6 < 1);
  v14 = *(_QWORD *)(a1 + 48 * v13 + 608);
  if (v14 == -1)
    return 4294967157;
  v28 = 0;
  v15 = *(unsigned int *)(a1 + 48 * v13 + 600);
  v16 = op_granpos_add(&v28, v14, -v5);
  if (!v15)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_15;
    return 4294967157;
  }
  if (v16 < 0)
  {
    v28 = 0;
    if ((v14 & 0x8000000000000000) == 0 && v14 < *(unsigned int *)(a2 + 60))
      return 4294967157;
  }
LABEL_15:
  v27 = a2;
  v17 = 0;
  v18 = v6;
  v19 = v28;
  v26 = v14 | 0x8000000000000000;
  v20 = (int64_t *)(a1 + 608);
  v21 = v28;
  do
  {
    if (!v15)
    {
      v23 = v30[v17];
LABEL_23:
      op_granpos_add(v20, v21, v23);
      v21 = *v20;
      goto LABEL_24;
    }
    if (((v21 ^ v14) & 0x8000000000000000) != 0)
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        if ((uint64_t)(-2 - v14) >= (v21 ^ 0x7FFFFFFFFFFFFFFFLL))
          v22 = v21 - v14;
        else
          v22 = 0;
      }
      else if (v26 >= v21)
      {
        v22 = ((v26 - v21) ^ 0x7FFFFFFFFFFFFFFFLL) + 1;
      }
      else
      {
        v22 = 0;
      }
    }
    else
    {
      v22 = v21 - v14;
    }
    v23 = v30[v17];
    v24 = v22 + v23;
    if (v24 < 1)
      goto LABEL_23;
    if (v24 > v23)
      goto LABEL_33;
    *(v20 - 1) = 1;
    *v20 = v14;
    v21 = v14;
LABEL_24:
    ++v17;
    v20 += 6;
  }
  while (v18 != v17);
  LODWORD(v17) = v18;
LABEL_33:
  *(_DWORD *)(a1 + 12820) = v17;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(v27 + 60);
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 40) = v19;
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v11;
  return 0;
}

uint64_t op_get_next_page(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *i;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  for (i = (uint64_t *)(a1 + 88); ; ogg_sync_wrote((uint64_t)i, v12))
  {
    while (1)
    {
      if (a3 >= 1 && *(_QWORD *)(a1 + 72) >= a3)
        return -1;
      v7 = ogg_sync_pageseek(i, a2);
      v8 = v7;
      if ((v7 & 0x80000000) == 0)
        break;
      *(_QWORD *)(a1 + 72) -= (int)v7;
    }
    if (v7)
    {
      result = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = result + v8;
      return result;
    }
    if (!a3)
      return -1;
    if (a3 < 0)
    {
      v10 = 2048;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 72) + *(int *)(a1 + 100) - *(int *)(a1 + 104);
      if (a3 - v9 >= 2048)
        v10 = 2048;
      else
        v10 = a3 - v9;
      if (a3 <= v9)
        return -1;
    }
    v11 = ogg_sync_buffer((uint64_t)i, (int)v10);
    v12 = (*(uint64_t (**)(_QWORD, char *, uint64_t))a1)(*(_QWORD *)(a1 + 32), v11, v10);
    if (v12 <= 0)
      break;
  }
  v14 = -137;
  if (a3 < 0)
    v14 = -1;
  if (v12 >= 0)
    return v14;
  else
    return -128;
}

uint64_t op_collect_audio_packets(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int packet_duration;

  v4 = (_QWORD *)(a1 + 168);
  v5 = a1 + 576;
  v6 = ogg_stream_packetout((_QWORD *)(a1 + 168), (_QWORD *)(a1 + 576));
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while ((v6 & 0x80000000) == 0)
    {
      packet_duration = op_get_packet_duration(*(_BYTE **)(a1 + 48 * v7 + 576), *(_DWORD *)(a1 + 48 * v7 + 584));
      *(_DWORD *)(a2 + 4 * v7) = packet_duration;
      if (packet_duration < 1)
      {
        if (v8 >= 1)
          *(_QWORD *)(a1 + 576 + 48 * (v8 - 1) + 32) = *(_QWORD *)(a1 + 576 + 48 * v7 + 32);
      }
      else
      {
        ++v8;
        v9 = (packet_duration + v9);
      }
      v7 = v8;
      v6 = ogg_stream_packetout(v4, (_QWORD *)(v5 + 48 * v8));
      if (!v6)
        goto LABEL_11;
    }
    v9 = 4294967293;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
LABEL_11:
  *(_DWORD *)(a1 + 12816) = 0;
  *(_DWORD *)(a1 + 12820) = v8;
  return v9;
}

uint64_t op_get_packet_duration(_BYTE *a1, int a2)
{
  int nb_frames;
  uint64_t v4;
  int v5;

  nb_frames = opus_packet_get_nb_frames(a1, a2);
  v4 = 4294967160;
  if ((nb_frames & 0x80000000) == 0)
  {
    v5 = opus_packet_get_samples_per_frame(a1, 48000) * nb_frames;
    if (v5 <= 5760)
      return v5;
    else
      return 4294967160;
  }
  return v4;
}

uint64_t op_make_decode_ready(_QWORD *a1, uint64_t a2)
{
  int v2;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  signed int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;

  v2 = *(_DWORD *)(a2 + 120);
  if (v2 > 3)
    return 0;
  if (v2 == 3)
  {
    if (*(_DWORD *)(a2 + 40))
      v5 = *(_DWORD *)(a2 + 124);
    else
      v5 = 0;
    v6 = *(_QWORD *)(a2 + 48);
    v7 = (_DWORD *)(v6 + 376 * v5);
    v8 = v7[19];
    v9 = v7[20];
    v10 = v7[14];
    v11 = *(_DWORD **)(a2 + 12824);
    if (v11
      && *(_DWORD *)(a2 + 12848) == v8
      && *(_DWORD *)(a2 + 12852) == v9
      && *(_DWORD *)(a2 + 12856) == v10
      && !memcmp((const void *)(a2 + 12860), (const void *)(v6 + 376 * v5 + 84), v10))
    {
      opus_multistream_decoder_ctl(v11, 4028, v12, v13, v14, v15, v16, v17, v27);
      goto LABEL_13;
    }
    v28 = 0;
    opus_multistream_decoder_destroy(a1);
    v18 = opus_multistream_decoder_create(a1, 48000, v10, v8, v9, v6 + 376 * v5 + 84, &v28);
    *(_QWORD *)(a2 + 12824) = v18;
    if (v18)
    {
      *(_DWORD *)(a2 + 12848) = v8;
      *(_DWORD *)(a2 + 12852) = v9;
      *(_DWORD *)(a2 + 12856) = v10;
      memcpy((void *)(a2 + 12860), (const void *)(v6 + 376 * v5 + 84), v10);
LABEL_13:
      *(_DWORD *)(a2 + 120) = 4;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 160) = 0;
      op_update_gain(a2, v19, v20, v21, v22, v23, v24, v25);
      return 0;
    }
  }
  return 4294967167;
}

uint64_t op_find_final_pcm_offset(_QWORD *a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t next_page;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  BOOL v28;
  int64_t v29;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v36;
  int v38;
  _OWORD v40[2];

  v9 = *(_DWORD *)(a4 + 48);
  if (a7 != -1 && v9 == a6)
  {
    v10 = a7;
    v11 = a5;
    goto LABEL_36;
  }
  v33 = a4;
  v34 = a8;
  memset(v40, 0, sizeof(v40));
  v12 = a2 + 1;
  v13 = a3 - 1;
  v14 = 0x10000;
  v10 = -1;
  v15 = a5;
  v16 = a5;
  do
  {
    v36 = v14;
    v17 = v16 - v14;
    v16 = v17 & ~(v17 >> 63);
    v18 = op_seek_helper(a1, v16);
    if ((v18 & 0x80000000) != 0)
      return v18;
    if (a1[9] < v15)
    {
      v38 = 0;
      v11 = -1;
      while (1)
      {
        next_page = op_get_next_page((uint64_t)a1, v40, v15);
        v20 = next_page;
        if (next_page < -1)
          return v20;
        if (next_page == -1)
          goto LABEL_22;
        v21 = ogg_page_serialno((uint64_t)v40);
        if (v21 == v9)
        {
          v22 = ogg_page_granulepos((uint64_t)v40);
          if (v22 != -1)
          {
            v11 = v20;
            v10 = v22;
          }
          goto LABEL_21;
        }
        if (a3 < 1)
          goto LABEL_20;
        if (*a2 != v21)
          break;
LABEL_21:
        if (a1[9] >= v15)
        {
LABEL_22:
          if (!v38 && v17 >= 1 || (v11 & 0x8000000000000000) == 0)
            goto LABEL_28;
          return 4294967159;
        }
      }
      v23 = 0;
      while (v13 != v23)
      {
        v24 = v12[v23++];
        if (v24 == v21)
        {
          if (v23 < a3)
            goto LABEL_21;
          break;
        }
      }
LABEL_20:
      v38 = 1;
      goto LABEL_21;
    }
    if (v17 < 1)
      return 4294967159;
    v11 = -1;
LABEL_28:
    if (2 * v36 >= 0x100000)
      v14 = 0x100000;
    else
      v14 = 2 * v36;
    if (v16 + 65306 >= a5)
      v15 = a5;
    else
      v15 = v16 + 65306;
  }
  while (v11 < 0);
  a4 = v33;
  a8 = v34;
LABEL_36:
  if (v11 < *(_QWORD *)(a4 + 8))
    return 4294967159;
  v25 = *(_QWORD *)(a4 + 40);
  if (((v25 ^ v10) & 0x8000000000000000) == 0)
    goto LABEL_38;
  if ((v10 & 0x8000000000000000) == 0)
  {
    v31 = __OFSUB__(v10 | 0x8000000000000000, v25);
    v32 = (v10 | 0x8000000000000000) - v25;
    if (v32 < 0 == v31)
    {
      v26 = v32 ^ 0x8000000000000000;
      goto LABEL_39;
    }
    return 4294967157;
  }
  if (-2 - v10 < (v25 ^ 0x7FFFFFFFFFFFFFFFLL))
    return 4294967157;
LABEL_38:
  v26 = v10 - v25;
LABEL_39:
  v27 = *(unsigned int *)(a4 + 60);
  v28 = v26 < v27;
  v29 = v26 - v27;
  if (v28 || (v29 ^ 0x7FFFFFFFFFFFFFFFLL) < *a8)
    return 4294967157;
  v20 = 0;
  *a8 += v29;
  *(_QWORD *)(a4 + 32) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  return v20;
}

uint64_t op_rescale64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a1 < a2)
  {
    if (a1 < 1)
    {
      return 0;
    }
    else
    {
      v3 = 0;
      v4 = a2 >> 1;
      v5 = 63;
      do
      {
        v6 = a1 >= v4;
        if (a1 < v4)
          v7 = 0;
        else
          v7 = a2;
        a1 = 2 * a1 - v7;
        v3 = v6 | (2 * v3);
        --v5;
      }
      while (v5);
      v8 = a3 & 1;
      v9 = a3 >> 1;
      v10 = 63;
      a3 = 0;
      do
      {
        if ((v3 & 1) != 0)
          a3 = v9 + (a3 >> 1) + (v8 & a3);
        else
          a3 >>= 1;
        v3 >>= 1;
        --v10;
      }
      while (v10);
    }
  }
  return a3;
}

uint64_t op_get_link_from_serialno(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = a2 + 1;
  if ((signed int)(a2 + 1) >= *(_DWORD *)(a1 + 44) || *(_QWORD *)(v4 + 376 * (int)v5) <= a3)
    v5 = *(_DWORD *)(a1 + 44);
  v6 = 0;
  do
  {
    if (*(_QWORD *)(v4 + 376 * (int)a2) > a3)
      v5 = a2;
    else
      v6 = a2;
    a2 = v6 + ((int)(v5 - v6) >> 1);
  }
  while ((int)(v5 - v6) > 1);
  if (*(_DWORD *)(v4 + 376 * (int)a2 + 48) == a4)
    return a2;
  else
    return 0xFFFFFFFFLL;
}

uint64_t op_buffer_continued_data(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;
  _OWORD v4[3];

  memset(v4, 0, sizeof(v4));
  v2 = (_QWORD *)(a1 + 168);
  ogg_stream_pagein(a1 + 168, a2);
  do
    result = ogg_stream_packetout(v2, v4);
  while ((_DWORD)result);
  return result;
}

uint64_t op_init_buffer(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  size_t v5;
  void *v6;

  if (*(_DWORD *)(a1 + 40))
  {
    v2 = *(unsigned int *)(a1 + 44);
    if ((int)v2 < 1)
    {
      v5 = 11520;
    }
    else
    {
      v3 = (int *)(*(_QWORD *)(a1 + 48) + 56);
      v4 = 1;
      do
      {
        if (v4 <= *v3)
          v4 = *v3;
        v3 += 94;
        --v2;
      }
      while (v2);
      v5 = 11520 * v4;
    }
  }
  else
  {
    v5 = 92160;
  }
  v6 = malloc(v5);
  *(_QWORD *)(a1 + 12872) = v6;
  if (v6)
    return 0;
  else
    return 4294967167;
}

uint64_t op_decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t result;

  v12 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 12832);
  if (v12
    && (LODWORD(result) = v12(*(_QWORD *)(a1 + 12840), *(_QWORD *)(a1 + 12824), a2, a3, a4, a5, 7008, *(unsigned int *)(a1 + 124)), (_DWORD)result != 6720))
  {
    if ((int)result > 0)
      return 4294967160;
  }
  else
  {
    LODWORD(result) = opus_multistream_decode(*(int **)(a1 + 12824), *(char **)a3, *(unsigned int *)(a3 + 8), a2, a4, 0, a7, a8);
  }
  if ((int)result >= 0)
    return result;
  else
    return 4294967160;
}

uint64_t opus_head_parse(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;

  if (a3 >= 8)
  {
    if (*(_QWORD *)a2 != 0x646165487375704FLL)
      return 4294967164;
    if (a3 >= 9)
    {
      v4 = *(unsigned __int8 *)(a2 + 8);
      if (v4 > 0xF)
        return 4294967162;
      if (a3 >= 0x13)
      {
        v6 = *(unsigned __int8 *)(a2 + 18);
        if (v6 == 255)
          return 4294967166;
        v7 = *(unsigned __int8 *)(a2 + 9);
        v8 = *(unsigned __int16 *)(a2 + 10);
        v9 = *(_DWORD *)(a2 + 12);
        v10 = *(unsigned __int8 *)(a2 + 16);
        v11 = *(unsigned __int8 *)(a2 + 17);
        if (v6 == 1)
        {
          if ((v7 - 9) >= 0xFFFFFFF8 && v7 + 21 <= a3 && (v4 > 1 || v7 + 21 >= a3))
          {
            v14 = *(unsigned __int8 *)(a2 + 19);
            if (*(_BYTE *)(a2 + 19))
            {
              v15 = *(unsigned __int8 *)(a2 + 20);
              if (v14 >= v15)
              {
                if (!*(_BYTE *)(a2 + 9))
                {
LABEL_35:
                  v27 = *(unsigned __int8 *)(a2 + 20);
                  v28 = *(unsigned __int8 *)(a2 + 19);
                  v26 = *(unsigned __int8 *)(a2 + 16);
                  v24 = *(_DWORD *)(a2 + 12);
                  v25 = *(unsigned __int8 *)(a2 + 17);
                  v23 = *(unsigned __int16 *)(a2 + 10);
                  v22 = *(unsigned __int8 *)(a2 + 8);
                  if (a1)
                  {
                    v21 = a1;
                    v29 = *(unsigned __int8 *)(a2 + 9);
                    memcpy(a1 + 8, (const void *)(a2 + 21), v7);
                    LODWORD(v7) = v29;
                    a1 = v21;
                    v4 = v22;
                    v6 = 1;
                    v8 = v23;
                    v9 = v24;
                    v11 = v25;
                    v10 = v26;
                    v12 = v27;
                    v13 = v28;
                    goto LABEL_19;
                  }
                  return 0;
                }
                v16 = (unsigned __int8 *)(a2 + 21);
                v17 = *(unsigned __int8 *)(a2 + 9);
                while (1)
                {
                  v19 = *v16++;
                  v18 = v19;
                  if (v19 != 255 && v15 + v14 <= v18)
                    break;
                  if (!--v17)
                    goto LABEL_35;
                }
              }
            }
          }
        }
        else if (!*(_BYTE *)(a2 + 18) && (v7 - 3) >= 0xFFFFFFFE && (a3 < 0x14 || v4 >= 2))
        {
          if (a1)
          {
            v12 = v7 - 1;
            *((_WORD *)a1 + 16) = 256;
            v13 = 1;
LABEL_19:
            v3 = 0;
            *a1 = v4;
            a1[1] = v7;
            a1[2] = v8;
            a1[3] = v9;
            a1[4] = ((v10 << 16) | (v11 << 24)) >> 16;
            a1[5] = v6;
            a1[6] = v13;
            a1[7] = v12;
            return v3;
          }
          return 0;
        }
      }
    }
    return 4294967163;
  }
  return 4294967164;
}

double opus_tags_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void opus_tags_clear(uint64_t a1)
{
  int v2;
  void *v3;
  int v4;
  int v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(void **)a1;
  if (v3)
    v4 = v2 + 1;
  else
    v4 = v2;
  if (v4 >= 1)
  {
    v5 = v2 + (v3 != 0) + 1;
    v6 = v4 - 1;
    do
    {
      free(*(void **)(*(_QWORD *)a1 + 8 * v6));
      --v5;
      --v6;
    }
    while (v5 > 1);
    v3 = *(void **)a1;
  }
  free(v3);
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 24));
}

uint64_t opus_tags_parse(_OWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;

  if (!a1)
    return opus_tags_parse_impl(0, a2, a3);
  v7 = 0u;
  v8 = 0u;
  v4 = opus_tags_parse_impl((uint64_t)&v7, a2, a3);
  if ((v4 & 0x80000000) != 0)
  {
    opus_tags_clear((uint64_t)&v7);
  }
  else
  {
    v5 = v8;
    *a1 = v7;
    a1[1] = v5;
  }
  return v4;
}

uint64_t opus_tags_parse_impl(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  BOOL v9;
  size_t v10;
  _DWORD *v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;

  if (a3 < 8)
    return 4294967164;
  if (*(_QWORD *)a2 != 0x736761547375704FLL)
    return 4294967164;
  if (a3 < 0x10)
    return 4294967163;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = a3 - 12 - v4;
  if (a3 - 12 < v4)
    return 4294967163;
  v7 = a2 + 12;
  if (a1)
  {
    v8 = op_strdup_with_len((const void *)(a2 + 12), *(unsigned int *)(a2 + 8));
    *(_QWORD *)(a1 + 24) = v8;
    if (!v8)
      return 4294967167;
  }
  v9 = v5 >= 4;
  v10 = v5 - 4;
  if (!v9)
    return 4294967163;
  v11 = (_DWORD *)(v7 + v4);
  v14 = *v11;
  v13 = (char *)(v11 + 1);
  v12 = v14;
  if (v14 > v10 >> 2)
    return 4294967163;
  if (v12 > 0x7FFFFFFE)
    return 4294967167;
  if (!a1 || (result = op_tags_ensure_capacity(a1, v12), (result & 0x80000000) == 0))
  {
    if ((_DWORD)v12)
    {
      v15 = 0;
      while (v12 - v15 <= v10 >> 2)
      {
        v18 = *(_DWORD *)v13;
        v16 = v13 + 4;
        v17 = v18;
        v9 = v10 - 4 >= v18;
        v10 = v10 - 4 - v18;
        if (!v9)
          break;
        if ((v17 & 0x80000000) != 0)
          return 4294967167;
        if (a1)
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = op_strdup_with_len(v16, v17);
          v19 = *(_QWORD *)a1;
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
            return 4294967167;
          *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v15++) = v17;
          *(_DWORD *)(a1 + 16) = v15;
          *(_QWORD *)(v19 + 8 * v15) = 0;
        }
        else
        {
          ++v15;
        }
        v13 = &v16[v17];
        if (v15 == v12)
          goto LABEL_29;
      }
      return 4294967163;
    }
LABEL_29:
    if (!v10 || (*v13 & 1) == 0)
      return 0;
    result = v10 >> 31 ? 4294967167 : 0;
    if (a1 && !(v10 >> 31))
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = malloc(v10);
      v20 = *(void **)(*(_QWORD *)a1 + 8 * v12);
      if (v20)
      {
        memcpy(v20, v13, v10);
        result = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v10;
        return result;
      }
      return 4294967167;
    }
  }
  return result;
}

uint64_t opus_tags_copy(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;

  v21 = 0uLL;
  *(_QWORD *)&v22 = 0;
  v4 = *(const char **)(a2 + 24);
  v5 = strlen(v4);
  *((_QWORD *)&v22 + 1) = op_strdup_with_len(v4, v5);
  if (*((_QWORD *)&v22 + 1))
  {
    v6 = *(int *)(a2 + 16);
    v7 = op_tags_ensure_capacity((uint64_t)&v21, v6);
    if ((v7 & 0x80000000) != 0)
    {
      v15 = v7;
      goto LABEL_10;
    }
    if ((int)v6 < 1)
      goto LABEL_12;
    LODWORD(v8) = v22;
    v9 = **(_DWORD **)(a2 + 8);
    v10 = op_strdup_with_len(**(const void ***)a2, v9);
    v11 = v21;
    *(_QWORD *)v21 = v10;
    if (v10)
    {
      v8 = 0;
      v12 = *((_QWORD *)&v21 + 1);
      v13 = v11 + 8;
      while (1)
      {
        *(_DWORD *)(v12 + 4 * v8) = v9;
        if (v6 - 1 == v8)
          break;
        v9 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v8 + 4);
        v14 = op_strdup_with_len(*(const void **)(*(_QWORD *)a2 + 8 * v8 + 8), v9);
        *(_QWORD *)(v13 + 8 * v8++) = v14;
        if (!v14)
          goto LABEL_8;
      }
      LODWORD(v22) = v6;
LABEL_12:
      v16 = *(_QWORD *)(a2 + 8);
      if (!v16)
        goto LABEL_16;
      v17 = *(unsigned int *)(v16 + 4 * v6);
      if ((int)v17 < 1)
        goto LABEL_16;
      v18 = malloc(*(unsigned int *)(v16 + 4 * v6));
      *(_QWORD *)(v21 + 8 * v6) = v18;
      if (v18)
      {
        memcpy(v18, *(const void **)(*(_QWORD *)a2 + 8 * v6), v17);
        *(_DWORD *)(*((_QWORD *)&v21 + 1) + 4 * v6) = v17;
LABEL_16:
        v15 = 0;
        v19 = v22;
        *a1 = v21;
        a1[1] = v19;
        return v15;
      }
      goto LABEL_9;
    }
LABEL_8:
    LODWORD(v22) = v8;
  }
LABEL_9:
  v15 = 4294967167;
LABEL_10:
  opus_tags_clear((uint64_t)&v21);
  return v15;
}

uint64_t opus_tags_add(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  uint64_t result;
  size_t v8;
  size_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  v6 = *(int *)(a1 + 16);
  result = op_tags_ensure_capacity(a1, v6 + 1);
  if ((result & 0x80000000) == 0)
  {
    v8 = strlen(a2);
    v9 = strlen(a3);
    result = 4294967167;
    v10 = v9 + v8;
    if (!__CFADD__(v9, v8) && v10 <= 0x7FFFFFFD)
    {
      v11 = malloc(v10 + 2);
      if (v11)
      {
        v12 = v11;
        memcpy(v11, a2, v8);
        v12[v8] = 61;
        memcpy(&v12[v8 + 1], a3, v9 + 1);
        result = 0;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v6) = v10 + 1;
        *(_DWORD *)(a1 + 16) = v6 + 1;
      }
      else
      {
        return 4294967167;
      }
    }
  }
  return result;
}

uint64_t op_tags_ensure_capacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t result;

  if (a2 > 0x7FFFFFFE)
    return 4294967167;
  v4 = a2 + 1;
  v5 = *(int *)(a1 + 16);
  v6 = realloc(*(void **)(a1 + 8), 4 * (a2 + 1));
  if (!v6)
    return 4294967167;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
    LODWORD(v7) = v6[v5];
  else
    v6[v5] = 0;
  v6[a2] = v7;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = realloc(*(void **)a1, 8 * v4);
  if (!v8)
    return 4294967167;
  v9 = v8;
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
    v10 = (void *)v8[v5];
  else
    v8[v5] = 0;
  result = 0;
  v9[a2] = v10;
  *(_QWORD *)a1 = v9;
  return result;
}

uint64_t opus_tags_add_comment(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE *v7;
  _BYTE *v8;

  v4 = *(int *)(a1 + 16);
  result = op_tags_ensure_capacity(a1, v4 + 1);
  if ((result & 0x80000000) == 0)
  {
    v6 = strlen(a2);
    v7 = op_strdup_with_len(a2, v6);
    if (v7)
    {
      v8 = v7;
      result = 0;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v8;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v4) = v6;
      *(_DWORD *)(a1 + 16) = v4 + 1;
    }
    else
    {
      return 4294967167;
    }
  }
  return result;
}

_BYTE *op_strdup_with_len(const void *a1, size_t a2)
{
  _BYTE *v4;
  _BYTE *v5;

  if (a2 == -1)
    return 0;
  v4 = malloc(a2 + 1);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, a2);
    v5[a2] = 0;
  }
  return v5;
}

uint64_t opus_tags_set_binary_suffix(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v7;
  void *v8;
  void *v9;

  if ((a3 & 0x80000000) != 0)
    return 4294967165;
  if (a3 && (!a2 || (*a2 & 1) == 0))
    return 4294967165;
  v7 = *(int *)(a1 + 16);
  result = op_tags_ensure_capacity(a1, v7);
  if ((result & 0x80000000) == 0)
  {
    v8 = realloc(*(void **)(*(_QWORD *)a1 + 8 * v7), a3);
    if (v8)
    {
      v9 = v8;
      memcpy(v8, a2, a3);
      result = 0;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = v9;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) = a3;
    }
    else
    {
      return 4294967167;
    }
  }
  return result;
}

uint64_t opus_tagcompare(char *a1, char *a2)
{
  size_t v4;
  size_t v5;
  uint64_t result;

  v4 = strlen(a1);
  if (v4 >> 31)
    return 0xFFFFFFFFLL;
  v5 = v4;
  result = op_strncasecmp(a1, a2, v4);
  if (!(_DWORD)result)
    return (61 - a2[v5]);
  return result;
}

uint64_t opus_tagncompare(char *a1, int a2, char *a3)
{
  uint64_t result;

  result = op_strncasecmp(a1, a3, a2);
  if (!(_DWORD)result)
    return (61 - a3[a2]);
  return result;
}

char *opus_tags_query(uint64_t a1, char *__s, int a3)
{
  size_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  char **i;
  char *v11;

  v6 = strlen(__s);
  if (v6 >> 31)
    return 0;
  v7 = *(unsigned int *)(a1 + 16);
  if ((int)v7 < 1)
    return 0;
  v8 = v6;
  v9 = 0;
  for (i = *(char ***)a1; ; ++i)
  {
    v11 = *i;
    if (op_strncasecmp(__s, *i, v8) || v11[v8] != 61)
      goto LABEL_8;
    if (v9 == a3)
      break;
    ++v9;
LABEL_8:
    if (!--v7)
      return 0;
  }
  return &(*i)[v8 + 1];
}

uint64_t opus_tags_query_count(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  int v10;

  v4 = strlen(__s);
  if (v4 >> 31)
    return 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 < 1)
    return 0;
  v6 = v4;
  LODWORD(v7) = 0;
  v8 = *(char ***)a1;
  do
  {
    v9 = *v8;
    v10 = op_strncasecmp(__s, *v8, v6);
    if (!v10)
      v10 = 61 - v9[v6];
    if (v10)
      v7 = v7;
    else
      v7 = (v7 + 1);
    ++v8;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t opus_tags_get_binary_suffix(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(int *)(a1 + 16);
    v4 = *(_DWORD *)(v2 + 4 * v3);
    *a2 = v4;
    if (v4 < 1)
      return 0;
    else
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * v3);
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t opus_tags_get_album_gain(uint64_t *a1, int *a2)
{
  return opus_tags_get_gain(a1, a2, "R128_ALBUM_GAIN");
}

uint64_t opus_tags_get_gain(uint64_t *a1, int *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;

  v3 = *((unsigned int *)a1 + 4);
  if ((int)v3 < 1)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = *a1;
  while (1)
  {
    v8 = *(char **)(v7 + 8 * v6);
    if (!op_strncasecmp(a3, v8, 15) && v8[15] == 61)
    {
      v9 = *(_QWORD *)(v7 + 8 * v6);
      v10 = (_BYTE *)(v9 + 17);
      v13 = *(unsigned __int8 *)(v9 + 16);
      v11 = (_BYTE *)(v9 + 16);
      v12 = v13;
      if (v13 == 45)
      {
        v11 = v10;
        v14 = -1;
      }
      else
      {
        v14 = 0;
      }
      if (v12 == 43)
        v15 = v10;
      else
        v15 = v11;
      if (v12 == 43)
        v16 = 0;
      else
        v16 = v14;
      v17 = *v15;
      if ((v17 - 48) <= 9)
      {
        v18 = 0;
        v19 = v15 + 1;
        while (1)
        {
          v18 = v17 + 10 * v18 - 48;
          if (v18 > 0x7FFF - v16)
            goto LABEL_21;
          v20 = *v19++;
          v17 = v20;
          if ((v20 - 48) > 9)
          {
            if (v17)
              goto LABEL_21;
            goto LABEL_23;
          }
        }
      }
      v18 = 0;
      if (!*v15)
        break;
    }
LABEL_21:
    if (++v6 == v3)
      return 0xFFFFFFFFLL;
  }
LABEL_23:
  result = 0;
  *a2 = (v18 + v16) ^ v16;
  return result;
}

uint64_t opus_tags_get_track_gain(uint64_t *a1, int *a2)
{
  return opus_tags_get_gain(a1, a2, "R128_TRACK_GAIN");
}

uint64_t opus_picture_tag_parse(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  _BYTE *v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  unsigned int v27;
  char *v28;
  size_t v29;
  _BYTE *v30;
  size_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  int v42;
  char v43;
  size_t v44;
  int v45;
  unsigned __int16 *v46;
  unint64_t v47;
  size_t v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v54;
  size_t v55;
  size_t v56;
  void *v57;
  size_t v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;

  v4 = op_strncasecmp("METADATA_BLOCK_PICTURE", a2, 22);
  if (!v4)
    v4 = 61 - a2[22];
  v5 = 23;
  if (v4)
    v5 = 0;
  v6 = &a2[v5];
  v7 = strlen(&a2[v5]);
  if ((v7 & 3) == 0 && v7 >= 0x2C)
  {
    v8 = v7 >> 2;
    v9 = 3 * (v7 >> 2) - (v6[v7 - 1] == 61) - (v6[v7 - 2] == 61);
    v10 = v9 - 32;
    if (v9 >= 0x20)
    {
      v13 = (unsigned int *)malloc(v9 + 1);
      if (!v13)
        return 4294967167;
      v14 = v13;
      v15 = 0;
      v16 = 0;
      v11 = 4294967164;
      while (1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 3 * v16;
        do
        {
          v20 = v6[v17];
          if (v20 == 43)
          {
            v21 = 62;
          }
          else if (v20 == 47)
          {
            v21 = 63;
          }
          else if ((v20 - 48) > 9)
          {
            if ((v20 - 97) > 0x19)
            {
              v21 = v20 - 65;
              if ((v20 - 65) > 0x19)
              {
                v22 = 0;
                if (v20 != 61)
                {
                  v23 = 0;
                  goto LABEL_102;
                }
                v23 = 0;
                if (v15 + v17 <= v9)
                  goto LABEL_102;
                v21 = 0;
              }
            }
            else
            {
              v21 = v20 - 71;
            }
          }
          else
          {
            v21 = v20 + 4;
          }
          v18 = v21 | (v18 << 6);
          ++v17;
        }
        while (v17 != 4);
        *((_BYTE *)v13 + 3 * v16) = BYTE2(v18);
        if (v19 + 1 < v9)
        {
          *((_BYTE *)v13 + v19 + 1) = BYTE1(v18);
          v24 = v19 + 2;
          if (v24 < v9)
            *((_BYTE *)v13 + v24) = v18;
        }
        ++v16;
        v15 += 3;
        v6 += 4;
        if (v16 == v8)
        {
          v25 = bswap32(v13[1]);
          v26 = v10 - v25;
          if (v10 < v25)
          {
            v22 = 0;
            goto LABEL_36;
          }
          v27 = *v13;
          v28 = (char *)malloc((v25 + 1));
          v22 = v28;
          if (!v28)
          {
            v23 = 0;
            goto LABEL_101;
          }
          memcpy(v28, v14 + 2, v25);
          v22[v25] = 0;
          v29 = bswap32(*(unsigned int *)((char *)v14 + v25 + 8));
          if (v26 < v29)
          {
LABEL_36:
            v23 = 0;
            goto LABEL_37;
          }
          v30 = malloc((v29 + 1));
          v23 = v30;
          if (v30)
          {
            memcpy(v30, (char *)v14 + v25 + 12, v29);
            v23[v29] = 0;
            v31 = v25 + 12 + v29;
            HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 1);
            LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 2));
            v33 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31) << 24);
            HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 5);
            LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 6));
            v34 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 4) << 24);
            HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 9);
            LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 10));
            v35 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 8) << 24);
            HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 13);
            LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 14));
            v36 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 12) << 24);
            if (v35)
              v37 = v34 == 0;
            else
              v37 = 1;
            v38 = v37 || v33 == 0;
            if (!v38 || !(v33 | v34 | v35 | v36))
            {
              v39 = bswap32(*(unsigned int *)((char *)v14 + v31 + 16));
              v40 = v31 + 20;
              if (v9 - (v31 + 20) >= v39)
              {
                v60 = __PAIR64__(v35, v36);
                v61 = bswap32(v27);
                v62 = v39;
                v41 = v40 + v39;
                v42 = -1;
                v43 = 1;
                switch((int)v25)
                {
                  case 0:
                    goto LABEL_55;
                  case 3:
                    v58 = v40;
                    if (strcmp(v22, "-->"))
                    {
                      v42 = -1;
                      v43 = 1;
                      v40 = v58;
                      goto LABEL_92;
                    }
                    if (v61 == 1 && (v33 | v34) != 0)
                    {
                      v11 = 4294967164;
                      if (v33 != 32 || v34 != 32)
                        goto LABEL_102;
                    }
                    v59 = 0;
                    *((_BYTE *)v14 + v41++) = 0;
                    v54 = v61;
                    v40 = v58;
                    goto LABEL_99;
                  case 6:
                    v44 = v40;
                    v45 = op_strncasecmp(v22, "image/", 6);
                    v40 = v44;
                    if (v45)
                      goto LABEL_54;
LABEL_55:
                    v46 = (unsigned __int16 *)((char *)v14 + v40);
                    v47 = v62;
                    if (v62 < 3)
                      goto LABEL_62;
                    if (*v46 == 55551 && *((unsigned __int8 *)v46 + 2) == 255)
                    {
LABEL_88:
                      v64 = 0;
                      v65 = 0;
                      v49 = v40;
                      v63 = -1;
                      op_extract_jpeg_params((unsigned __int16 *)((char *)v14 + v40), v62, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, &v64, &v63);
                      v42 = 1;
                      v43 = 1;
                      goto LABEL_89;
                    }
                    v47 = v62;
                    if (v62 < 8 || *(_QWORD *)v46 != 0xA1A0A0D474E5089)
                    {
LABEL_62:
                      v49 = v40;
                      goto LABEL_63;
                    }
                    goto LABEL_81;
                  case 9:
                    v49 = v40;
                    if (op_strncasecmp(v22, "image/png", 9))
                    {
                      if (!op_strncasecmp(v22, "image/gif", 9))
                      {
                        v46 = (unsigned __int16 *)((char *)v14 + v49);
                        v47 = v62;
LABEL_63:
                        if (op_is_gif ((uint64_t)v46, v47))
                        {
                          v64 = 0;
                          v65 = 0;
                          v63 = -1;
                          op_extract_gif_params((uint64_t)v14 + v49, v62, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, &v64, &v63);
                          v43 = 1;
                          v42 = 3;
                          goto LABEL_89;
                        }
                      }
LABEL_82:
                      v42 = -1;
                      v43 = 1;
LABEL_91:
                      v40 = v49;
                      goto LABEL_92;
                    }
                    if (v62 < 8)
                      goto LABEL_82;
                    v40 = v49;
                    v47 = v62;
                    if (*(_QWORD *)((char *)v14 + v49) == 0xA1A0A0D474E5089)
                    {
LABEL_81:
                      v64 = 0;
                      v65 = 0;
                      v49 = v40;
                      v63 = -1;
                      op_extract_png_params((unsigned int *)((char *)v14 + v40), v47, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, (unsigned int *)&v64, &v63);
                      v43 = 0;
                      v42 = 2;
LABEL_89:
                      if ((v63 & 0x80000000) == 0)
                      {
                        v34 = v65;
                        v33 = HIDWORD(v65);
                        v60 = v64;
                      }
                      goto LABEL_91;
                    }
LABEL_54:
                    v42 = -1;
LABEL_87:
                    v43 = 1;
LABEL_92:
                    v54 = v61;
                    if (v61 == 1)
                    {
                      if (v33 != 32)
                        v43 = 1;
                      v11 = 4294967164;
                      if ((v43 & 1) != 0 || v34 != 32)
                        goto LABEL_102;
                      v59 = 2;
                      v33 = 32;
                    }
                    else
                    {
                      v59 = v42;
                    }
LABEL_99:
                    v55 = v41 - v40;
                    v56 = v40;
                    memmove(v14, (char *)v14 + v40, v41 - v40);
                    v57 = realloc(v14, v55);
                    if (v41 == v56 || v57)
                    {
                      v11 = 0;
                      *(_DWORD *)a1 = v54;
                      *(_DWORD *)(a1 + 4) = 0;
                      *(_QWORD *)(a1 + 8) = v22;
                      *(_QWORD *)(a1 + 16) = v23;
                      *(_DWORD *)(a1 + 24) = v33;
                      *(_DWORD *)(a1 + 28) = v34;
                      *(_DWORD *)(a1 + 32) = HIDWORD(v60);
                      *(_DWORD *)(a1 + 36) = v60;
                      *(_DWORD *)(a1 + 40) = v62;
                      *(_DWORD *)(a1 + 44) = 0;
                      *(_QWORD *)(a1 + 48) = v57;
                      *(_QWORD *)(a1 + 56) = v59;
                      return v11;
                    }
                    break;
                  case 10:
                    v49 = v40;
                    v50 = op_strncasecmp(v22, "image/jpeg", 10);
                    v42 = -1;
                    v43 = 1;
                    if (v62 < 3 || v50)
                      goto LABEL_91;
                    v51 = bswap32(*(unsigned __int16 *)((char *)v14 + v49)) >> 16;
                    if (v51 == 65496)
                    {
                      v52 = *((unsigned __int8 *)v14 + v49 + 2) - 255;
                    }
                    else if (v51 < 0xFFD8)
                    {
                      v52 = -1;
                    }
                    else
                    {
                      v52 = 1;
                    }
                    v40 = v49;
                    if (v52)
                      goto LABEL_87;
                    goto LABEL_88;
                  default:
                    goto LABEL_92;
                }
                goto LABEL_101;
              }
            }
LABEL_37:
            v11 = 4294967164;
          }
          else
          {
LABEL_101:
            v11 = 4294967167;
          }
LABEL_102:
          free(v23);
          free(v22);
          free(v14);
          return v11;
        }
      }
    }
  }
  return 4294967164;
}

double opus_picture_tag_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void opus_picture_tag_clear(void **a1)
{
  free(a1[2]);
  free(a1[1]);
  free(a1[6]);
}

BOOL op_is_gif (uint64_t a1, unint64_t a2)
{
  if (a2 < 6)
    return 0;
  if (*(_DWORD *)a1 == 944130375 && *(_WORD *)(a1 + 4) == 24887)
    return 1;
  return *(_DWORD *)a1 == 944130375 && *(_WORD *)(a1 + 4) == 24889;
}

unsigned __int16 *op_extract_jpeg_params(unsigned __int16 *result, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  if (a2 >= 3 && *result == 55551 && *((unsigned __int8 *)result + 2) == 255)
  {
    v8 = 2;
    while (1)
    {
      if (v8 < a2)
      {
        while (*((unsigned __int8 *)result + v8) != 255)
        {
          if (a2 == ++v8)
          {
LABEL_15:
            v9 = a2;
            goto LABEL_17;
          }
        }
      }
      if (v8 < a2)
      {
        while (*((unsigned __int8 *)result + v8) == 255)
        {
          if (a2 == ++v8)
            goto LABEL_15;
        }
      }
      v9 = v8;
LABEL_17:
      v8 = v9 + 1;
      v10 = a2 - (v9 + 1);
      if (a2 <= v9 + 1)
        break;
      v11 = *((unsigned __int8 *)result + v9);
      if ((v11 + 40) < 3u)
        break;
      if ((v11 & 0xF8) != 0xD0)
      {
        if (v10 < 2)
          return result;
        v12 = *((unsigned __int8 *)result + v9 + 2) | ((unint64_t)*((unsigned __int8 *)result + v8) << 8);
        if (v12 < 2 || v10 < v12)
          return result;
        if (v11 == 192 || (v11 + 48) >= 0xF1u && (v11 & 3) != 0)
        {
          if (v12 >= 8)
          {
            *a4 = __rev16(*(unsigned __int16 *)((char *)result + v9 + 4));
            *a3 = __rev16(*(unsigned __int16 *)((char *)result + v9 + 6));
            *a5 = *((unsigned __int8 *)result + v9 + 8) * *((unsigned __int8 *)result + v9 + 3);
            *a6 = 0;
            *a7 = 0;
          }
          return result;
        }
        v8 += v12;
      }
    }
  }
  return result;
}

_QWORD *op_extract_png_params(_QWORD *result, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, unsigned int *a6, int *a7)
{
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;

  if (a2 >= 8 && *result == 0xA1A0A0D474E5089 && a2 - 20 <= 0xFFFFFFFFFFFFFFF3)
  {
    v8 = 8;
    do
    {
      v9 = (_DWORD *)((char *)result + v8);
      v10 = bswap32(*(_DWORD *)((char *)result + v8));
      if (a2 - 12 - v8 < v10)
        break;
      if ((_DWORD)v10 == 13 && v9[1] == 1380206665)
      {
        *a3 = bswap32(v9[2]);
        *a4 = bswap32(v9[3]);
        if (*((_BYTE *)result + v8 + 17) != 3)
        {
          v11 = *((unsigned __int8 *)result + v8 + 16);
          switch(*((_BYTE *)result + v8 + 17))
          {
            case 0:
              goto LABEL_21;
            case 2:
              v11 *= 3;
              goto LABEL_21;
            case 4:
              v11 *= 2;
              goto LABEL_21;
            case 6:
              v11 *= 4;
LABEL_21:
              *a5 = v11;
              break;
            default:
              break;
          }
          *a6 = 0;
          *a7 = 0;
          return result;
        }
        *a5 = 24;
        *a7 = 1;
      }
      else if (*a7 >= 1 && v9[1] == 1163152464)
      {
        *a6 = v10 / 3;
        return result;
      }
      v8 += (v10 + 12);
    }
    while (a2 - v8 > 0xB);
  }
  return result;
}

