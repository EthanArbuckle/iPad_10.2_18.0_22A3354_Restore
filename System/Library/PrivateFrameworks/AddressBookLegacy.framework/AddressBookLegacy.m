CFTypeRef ABPersonCopyShortName(const void *a1)
{
  CFTypeRef v2;
  int ShortNameFormat;
  const __CFNumber *v4;
  CFComparisonResult v5;
  const __CFString *v6;
  const __CFString *v7;
  CFIndex Length;
  const __CFString *v10;
  int CompositeNameFormatAndDelimiterForRecord;
  const __CFString *v12;
  const __CFString *v13;
  void *v14;
  CFStringRef v15;
  CFStringRef v16;

  if (ABPersonGetShortNamePreferNicknames())
  {
    v2 = ABRecordCopyValue(a1, kABPersonNicknameProperty);
    if (v2)
      return v2;
  }
  if (!ABPersonGetShortNameFormatEnabled())
    return 0;
  ShortNameFormat = ABPersonGetShortNameFormat();
  v4 = (const __CFNumber *)ABRecordCopyValue(a1, kABPersonKindProperty);
  v5 = CFNumberCompare(v4, kABPersonKindPerson, 0);
  CFRelease(v4);
  v2 = 0;
  if (v5)
    return v2;
  v6 = (const __CFString *)ABRecordCopyValue(a1, kABPersonFirstNameProperty);
  v16 = v6;
  v7 = (const __CFString *)ABRecordCopyValue(a1, kABPersonLastNameProperty);
  v15 = v7;
  if (_ABStringContainsNonLatinCharacters((_BOOL8)v6)
    || _ABStringContainsEmojiCharacters((_BOOL8)v6)
    || _ABStringContainsNonLatinCharacters((_BOOL8)v7)
    || _ABStringContainsEmojiCharacters((_BOOL8)v7))
  {
    v2 = 0;
    goto LABEL_10;
  }
  if (ShortNameFormat == 2 && v6)
  {
    Length = CFStringGetLength(v6);
    v10 = v6;
  }
  else
  {
    if (ShortNameFormat != 3 || !v7)
    {
      if (!ShortNameFormat && v6 && v7)
      {
        if (CFStringGetLength(v6) >= 2)
        {
          _replaceNameWithInitial(&v15);
          v7 = v15;
        }
      }
      else if (ShortNameFormat == 1 && v6 && v7 && CFStringGetLength(v7) >= 2)
      {
        _replaceNameWithInitial(&v16);
        v6 = v16;
      }
      goto LABEL_35;
    }
    Length = CFStringGetLength(v7);
    v10 = v7;
  }
  if (Length > 1)
  {
    v2 = CFRetain(v10);
    if (v2)
      goto LABEL_10;
  }
LABEL_35:
  if (v6 && v7)
  {
    CompositeNameFormatAndDelimiterForRecord = ABPersonGetCompositeNameFormatAndDelimiterForRecord(0, 0);
    if (CompositeNameFormatAndDelimiterForRecord)
      v12 = v7;
    else
      v12 = v6;
    if (CompositeNameFormatAndDelimiterForRecord)
      v13 = v6;
    else
      v13 = v7;
    v14 = (void *)CFStringCreateWithFormat(0, 0, CFSTR("%@ %@"), v12, v13);
    goto LABEL_47;
  }
  if (!v6 || v7)
  {
    v2 = 0;
    if (!v6 && v7)
    {
      v2 = CFRetain(v7);
      goto LABEL_13;
    }
LABEL_10:
    if (!v6)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = (void *)CFRetain(v6);
LABEL_47:
  v2 = v14;
LABEL_11:
  CFRelease(v6);
LABEL_12:
  if (v7)
LABEL_13:
    CFRelease(v7);
  return v2;
}

BOOL _ABStringContainsNonLatinCharacters(_BOOL8 a1)
{
  _BOOL8 v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (a1)
  {
    if (_ABStringContainsNonLatinCharacters_onceToken != -1)
      dispatch_once(&_ABStringContainsNonLatinCharacters_onceToken, &__block_literal_global_12);
    v2 = objc_msgSend((id)v1, "length");
    v3 = malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
    objc_msgSend((id)v1, "getCharacters:range:", v3, 0, v2);
    v1 = v2 != (int)MEMORY[0x1A1ACC9E8](_ABStringContainsNonLatinCharacters___latinSet, v3, v2, 1);
    free(v3);
  }
  return v1;
}

BOOL _ABStringContainsEmojiCharacters(_BOOL8 theString)
{
  const __CFString *v1;
  const __CFCharacterSet *v2;
  CFRange v3;
  CFRange v4;

  if (theString)
  {
    v1 = (const __CFString *)theString;
    if (_ABStringContainsEmojiCharacters_onceToken != -1)
      dispatch_once(&_ABStringContainsEmojiCharacters_onceToken, &__block_literal_global_2_1);
    v3.location = 0;
    v3.length = 0;
    v2 = (const __CFCharacterSet *)_ABStringContainsEmojiCharacters___emojiSet;
    v4.length = CFStringGetLength(v1);
    v4.location = 0;
    return CFStringFindCharacterFromSet(v1, v2, v4, 0, &v3) != 0;
  }
  return theString;
}

uint64_t ABPersonGetShortNamePreferNicknames()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonGetShortNamePreferNicknames(void)", 1587, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNamePreferNicknames;
}

uint64_t ABPersonGetShortNameFormatEnabled()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonGetShortNameFormatEnabled(void)", 1569, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNameFormatEnabled;
}

uint64_t ABPersonGetShortNameFormat()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPersonShortNameFormat ABPersonGetShortNameFormat(void)", 1551, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNameFormat;
}

void ABPersonAppendNameParts(const void *a1, int a2, __CFString *a3, int a4, const __CFString *a5, int a6)
{
  int v11;
  int v12;
  int v13;
  int v14;
  ABPropertyID v15;
  ABPropertyID v16;
  ABPropertyID v17;
  int v18;
  ABPropertyID v19;

  if (a4)
    v11 = 8;
  else
    v11 = 2;
  if (a4)
    v12 = 2;
  else
    v12 = 4;
  if (a4)
    v13 = 4;
  else
    v13 = 8;
  v14 = v11 & a2;
  if (a4)
    v15 = kABPersonMiddleNameProperty;
  else
    v15 = kABPersonLastNameProperty;
  v19 = v15;
  if (a4)
    v16 = kABPersonFirstNameProperty;
  else
    v16 = kABPersonMiddleNameProperty;
  if (a4)
    v17 = kABPersonLastNameProperty;
  else
    v17 = kABPersonFirstNameProperty;
  if ((a2 & 1) != 0)
    ABPersonAppendNamePartToCompositeName(a1, kABPersonPrefixProperty, a3, a5, a6);
  v18 = v12 & a2;
  if (v14)
    ABPersonAppendNamePartToCompositeName(a1, v17, a3, a5, a6);
  if (v18)
    ABPersonAppendNamePartToCompositeName(a1, v16, a3, a5, a6);
  if ((v13 & a2) != 0)
    ABPersonAppendNamePartToCompositeName(a1, v19, a3, a5, a6);
  if ((a2 & 0x10) != 0)
    ABPersonAppendNamePartToCompositeName(a1, kABPersonSuffixProperty, a3, a5, a6);
}

void ABPersonAppendNamePartToCompositeName(const void *a1, ABPropertyID a2, __CFString *a3, const __CFString *a4, int a5)
{
  const __CFString *v8;
  const __CFString *v9;
  CFIndex Length;
  const __CFAllocator *v11;
  CFIndex v12;
  CFMutableStringRef MutableCopy;

  v8 = (const __CFString *)ABRecordCopyValue(a1, a2);
  if (v8)
  {
    v9 = v8;
    if (CFStringGetLength(v8) >= 1)
    {
      Length = CFStringGetLength(a3);
      if (a4 && Length >= 1)
        CFStringAppend(a3, a4);
      if (a5)
      {
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v12 = CFStringGetLength(v9);
        MutableCopy = CFStringCreateMutableCopy(v11, v12, v9);
        CFStringTrimWhitespace(MutableCopy);
        CFStringAppend(a3, MutableCopy);
        CFRelease(MutableCopy);
      }
      else
      {
        CFStringAppend(a3, v9);
      }
    }
    CFRelease(v9);
  }
}

CFTypeRef ABRecordCopyValue(ABRecordRef record, ABPropertyID property)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFDateRef v10;
  int PropertyType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const __CFString *v17;
  const void *valuePtr;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)", 88, v4, 0, v5, v6, v7, (uint64_t)v17);
    CFRelease(v4);
  }
  v8 = CPRecordCopyProperty();
  valuePtr = (const void *)v8;
  if (kABPersonCreationDateProperty == property || kABPersonModificationDateProperty == property)
  {
    if (!v8)
      goto LABEL_13;
    v10 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (double)(int)v8);
    goto LABEL_12;
  }
  PropertyType = ABRecordGetPropertyType(record, property);
  if (PropertyType == 2)
  {
    v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
LABEL_12:
    valuePtr = v10;
  }
LABEL_13:
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)", 116, CFSTR(">> "), 0, v12, v13, v14, v16);
  return valuePtr;
}

uint64_t ABRecordGetPropertyType(const void *a1, int a2)
{
  ABRecordType RecordType;

  RecordType = ABRecordGetRecordType(a1);
  if (RecordType == 1)
    return ABGroupGetTypeOfProperty(a2);
  if (RecordType)
    return ABSourceGetTypeOfProperty(a2);
  return ABPersonGetTypeOfProperty(a2);
}

ABRecordType ABRecordGetRecordType(ABRecordRef record)
{
  __CFString *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int RecordType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ABRecordType v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v1 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordType ABRecordGetRecordType(ABRecordRef)", 40, v1, 0, v2, v3, v4, (uint64_t)v12);
    CFRelease(v1);
  }
  RecordType = ABCRecordGetRecordType();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABRecordType ABRecordGetRecordType(ABRecordRef)", 51, CFSTR(">> "), 0, v6, v7, v8, v11);
  if (RecordType == 258)
    v9 = 1;
  else
    v9 = 2;
  if (RecordType == 257)
    return 0;
  else
    return v9;
}

uint64_t ABCRecordGetRecordType()
{
  char **Class;
  unsigned int v1;

  Class = (char **)CPRecordGetClass();
  if (Class == ABCGroupClass[0])
    v1 = 258;
  else
    v1 = 259;
  if (Class == (char **)ABCPersonClass)
    return 257;
  else
    return v1;
}

ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID property)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ABPropertyType v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const __CFString *v13;

  if (ABLogAPIUsage())
  {
    v13 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)", 278, v2, 0, v3, v4, v5, (uint64_t)v13);
    CFRelease(v2);
  }
  if (kABPersonModificationDateProperty == property || kABPersonCreationDateProperty == property)
    v7 = 4;
  else
    v7 = ABCPersonTypeOfProperty(property);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)", 286, CFSTR(">> "), 0, v8, v9, v10, v12);
  return v7;
}

uint64_t ABLogAPIUsage()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogAPIUsage)
    return result;
  else
    return 0;
}

BOOL ABDiagnosticsEnabled()
{
  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  return __ABLogMaxConsoleLevel > 4 || __ABLogMaxFileLevel > 0;
}

uint64_t ABCPersonTypeOfProperty(int a1)
{
  return *(unsigned int *)(*((_QWORD *)ABCPersonClass + 10) + 40 * a1 + 32);
}

void AppendBaseProperties(uint64_t a1, void *a2)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  int *v9;
  const void *v10;
  ABPropertyType TypeOfProperty;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  ABPropertyID v16;
  uint64_t v17;
  double v18[2];

  v18[1] = *(double *)MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a2, "resumeToken"))
  {
    Count = CFDictionaryGetCount((CFDictionaryRef)objc_msgSend((id)objc_msgSend(a2, "query"), "propertyIndices"));
    v5 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
    v7 = (const void **)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1E0C80A78](v5);
    v9 = (int *)((char *)&v13 - v8);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)objc_msgSend((id)objc_msgSend(a2, "query"), "propertyIndices"), v7, (const void **)((char *)&v13 - v8));
    if (Count)
    {
      v10 = (const void *)kABPersonInternalUUIDProperty;
      do
      {
        if (*v7 != v10)
        {
          if (sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), *v9))
          {
            v17 = 0;
            v18[0] = 0.0;
            v14 = 0;
            v15 = 2;
            v16 = *(_DWORD *)v7;
            TypeOfProperty = ABPersonGetTypeOfProperty(v16);
            v13 = 0;
            GetBytePointerAndLengthForTypeAtColumn(a1, TypeOfProperty, *v9, &v14, &v13, v18);
            v17 = v13;
            objc_msgSend((id)objc_msgSend(a2, "mutableData"), "appendBytes:length:", &v15, 13);
            v12 = (void *)objc_msgSend(a2, "mutableData");
            objc_msgSend(v12, "appendBytes:length:", v14, v17);
          }
        }
        v9 += 2;
        ++v7;
        --Count;
      }
      while (Count);
    }
  }
}

void GetBytePointerAndLengthForTypeAtColumn(uint64_t a1, int a2, int iCol, _QWORD *a4, uint64_t *a5, double *a6)
{
  uint64_t v9;

  if (a2 <= 256)
  {
    switch(a2)
    {
      case 1:
      case 5:
      case 7:
        goto LABEL_6;
      case 2:
        goto LABEL_8;
      case 4:
        goto LABEL_7;
      default:
        goto LABEL_10;
    }
  }
  switch(a2)
  {
    case 260:
LABEL_7:
      *a4 = a6;
      *a6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), iCol);
      v9 = 8;
      goto LABEL_9;
    case 258:
LABEL_8:
      *a4 = a6;
      *(_DWORD *)a6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), iCol);
      v9 = 4;
      goto LABEL_9;
    case 257:
LABEL_6:
      *a4 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), iCol);
      v9 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), iCol);
LABEL_9:
      *a5 = v9;
      return;
  }
LABEL_10:
  *a5 = 0;
  *a4 = 0;
}

uint64_t ABRegulatoryLogReadContactsData(uint64_t a1)
{
  uint64_t result;

  result = _shouldRegulatoryLog(a1);
  if ((_DWORD)result)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "readingContactsData");
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "logContactsDataAccessEvent");
  }
  return result;
}

uint64_t _shouldRegulatoryLog(uint64_t a1)
{
  if (a1 && !ABAddressBookIsUsedByContacts(a1))
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "isAccessGranted");
  else
    return 0;
}

BOOL ABAddressBookIsUsedByContacts(uint64_t a1)
{
  return a1 && (*(_BYTE *)(a1 + 378) & 0x40) != 0;
}

uint64_t ABCAddressBookGetPersonRecordDescriptorForPrefetchQueries(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  size_t v12;
  void *v13;

  result = *(_QWORD *)(a1 + 368);
  if (!result)
  {
    v3 = malloc_type_malloc(0x98uLL, 0x10F0040C975631FuLL);
    *(_QWORD *)(a1 + 368) = v3;
    v4 = ABCPersonClass;
    v5 = ABCPersonClass[6];
    v6 = ABCPersonClass[7];
    v7 = ABCPersonClass[8];
    v3[18] = *((_QWORD *)ABCPersonClass + 18);
    *((_OWORD *)v3 + 7) = v6;
    *((_OWORD *)v3 + 8) = v7;
    *((_OWORD *)v3 + 6) = v5;
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[5];
    *((_OWORD *)v3 + 4) = v4[4];
    *((_OWORD *)v3 + 5) = v10;
    *((_OWORD *)v3 + 2) = v8;
    *((_OWORD *)v3 + 3) = v9;
    v11 = v4[1];
    *(_OWORD *)v3 = *v4;
    *((_OWORD *)v3 + 1) = v11;
    v12 = 40 * *((int *)ABCPersonClass + 18);
    v13 = malloc_type_malloc(v12, 0x16190703uLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 368) + 80) = v13;
    memcpy(v13, *((const void **)ABCPersonClass + 10), v12);
    return *(_QWORD *)(a1 + 368);
  }
  return result;
}

uint64_t ABOSLogImageMetadata()
{
  if (ABOSLogImageMetadata_onceToken != -1)
    dispatch_once(&ABOSLogImageMetadata_onceToken, &__block_literal_global_22);
  return ABOSLogImageMetadata_imageMetadataLog;
}

uint64_t AppendImageData(int a1, int a2, char a3, uint64_t a4, void *a5)
{
  int v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  sqlite3_int64 v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  sqlite3_blob *ppBlob;
  _BYTE v30[14];
  int v31;
  unint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ABCAddressBookGetImageStore((CFStringRef)objc_msgSend((id)objc_msgSend(a5, "query"), "addressBook"));
  v10 = objc_msgSend((id)objc_msgSend(a5, "query"), "requestedImageCropRect");
  if (a2 == 2)
  {
    v11 = &stru_1E3CA4E68;
    if (v10)
      v11 = CFSTR(", crop_x , crop_y , crop_width");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID %@ FROM ABFullSizeImage WHERE record_id = ?;"),
      v11);
  }
  CPRecordStoreGetDatabase();
  v12 = CPSqliteDatabaseConnectionForReading();
  v13 = CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    v14 = v13;
    v15 = *(sqlite3_stmt **)(v13 + 8);
    if (v15)
    {
      sqlite3_bind_int(v15, 1, a1);
      if (a2 != 2)
        sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, a2);
      if (sqlite3_step(*(sqlite3_stmt **)(v14 + 8)) != 100)
        goto LABEL_31;
      memset(&v30[1], 0, 13);
      v30[0] = 6;
      v32 = 0;
      v31 = a2;
      v16 = sqlite3_column_int64(*(sqlite3_stmt **)(v14 + 8), 0);
      if (a2 == 2 && objc_msgSend((id)objc_msgSend(a5, "query"), "requestedImageCropRect"))
      {
        v30[1] = 1;
        *(_DWORD *)&v30[2] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 1);
        *(_DWORD *)&v30[6] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 2);
        *(_DWORD *)&v30[10] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 3);
      }
      else
      {
        v30[1] = 0;
      }
      ppBlob = 0;
      if ((a3 & 1) == 0)
      {
        v18 = a2 == 2 ? "ABFullSizeImage" : "ABThumbnailImage";
        if (!sqlite3_blob_open(*(sqlite3 **)(v12 + 8), "main", v18, "data", v16, 0, &ppBlob))
        {
          v19 = sqlite3_blob_bytes(ppBlob);
          v20 = v19;
          v32 = v19;
          v21 = ABOSLogImageMetadata();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = objc_msgSend(a5, "mutableData");
            *(_DWORD *)buf = 134219008;
            v34 = a5;
            v35 = 1024;
            v36 = a2;
            v37 = 1024;
            v38 = a1;
            v39 = 2048;
            v40 = v22;
            v41 = 2048;
            v42 = v20;
            _os_log_impl(&dword_19BC4B000, v21, OS_LOG_TYPE_DEFAULT, "ABBufferQueryCursor (%p) AppendImageData, reading %d from recordID %d into buffer (%p), [%lu]", buf, 0x2Cu);
          }
        }
      }
      objc_msgSend((id)objc_msgSend(a5, "mutableData"), "appendBytes:length:", v30, 26);
      objc_msgSend(a5, "setHasFoundAnyImageDataForCurrentContact:", 1);
      if (!ppBlob)
        goto LABEL_31;
      v23 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "length");
      v24 = v32;
      v25 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "length");
      v26 = v32 + v25;
      if (v26 > objc_msgSend(a5, "maxBufferSize"))
      {
        if (v23 >= objc_msgSend(a5, "maxBufferSize"))
        {
          v24 = 0;
LABEL_29:
          if (v24 != v32)
          {
            objc_msgSend(a5, "setBlobLength:");
            objc_msgSend(a5, "setIncompleteBlob:", ppBlob);
            objc_msgSend(a5, "setBlobBytesWritten:", v24);
            objc_msgSend(a5, "setResumeToken:", a4);
            v17 = 1;
            goto LABEL_32;
          }
          sqlite3_blob_close(ppBlob);
LABEL_31:
          v17 = 0;
LABEL_32:
          CPSqliteStatementReset();
          return v17;
        }
        v24 = objc_msgSend(a5, "maxBufferSize") - v23;
      }
      if (v24)
      {
        objc_msgSend((id)objc_msgSend(a5, "mutableData"), "increaseLengthBy:", v24);
        v27 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "mutableBytes");
        sqlite3_blob_read(ppBlob, (void *)(v27 + v23), v24, 0);
      }
      goto LABEL_29;
    }
  }
  return 0;
}

CFStringRef ABCAddressBookGetImageStore(CFStringRef result)
{
  uint64_t v1;

  if (result)
  {
    v1 = (uint64_t)result;
    result = (CFStringRef)result->length;
    if (!result)
    {
      result = ABCImageStoreCreateWithAddressBook(v1);
      *(_QWORD *)(v1 + 24) = result;
    }
  }
  return result;
}

uint64_t ABSourceGetTypeOfProperty(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPropertyType ABSourceGetTypeOfProperty(ABPropertyID)", 677, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCSourceTypeOfProperty(a1);
}

uint64_t ABCSourceTypeOfProperty(int a1)
{
  return *(unsigned int *)&ABCSourceClass[10][40 * a1 + 32];
}

CFTypeRef ABCMultiValueCreateCopy(CFTypeRef cf)
{
  if (cf)
  {
    if ((*((_BYTE *)cf + 60) & 1) != 0)
      return _copyMultivalue((uint64_t)cf);
    else
      return CFRetain(cf);
  }
  return cf;
}

CFStringRef ABCImageStoreCreateWithAddressBook(uint64_t a1)
{
  return ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(a1);
}

void AppendPropertyBlobData(int a1, int a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  sqlite3_blob *ppBlob;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend((id)objc_msgSend(a3, "query"), "addressBook");
  CPRecordStoreGetDatabase();
  v7 = CPSqliteDatabaseConnectionForWriting();
  ppBlob = 0;
  v8 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v6 + 368) + 80) + 40 * a2);
  v9 = sqlite3_blob_open(*(sqlite3 **)(v7 + 8), "main", "ABPerson", v8, a1, 0, &ppBlob);
  if (v9)
  {
    if (v9 == 21)
    {
      v10 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        v23 = a3;
        v24 = 2080;
        v25 = v8;
        v26 = 1024;
        v27 = a1;
        _os_log_error_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_ERROR, "ABBufferQueryCursor (%p) AppendPropertyBlobData, SQLITE_MISUSE opening blob %s from recordID %d", buf, 0x1Cu);
      }
    }
  }
  else
  {
    v11 = sqlite3_blob_bytes(ppBlob);
    if (v11 > 0)
    {
      v18 = 2;
      v19 = a2;
      v20 = v11;
      objc_msgSend((id)objc_msgSend(a3, "mutableData"), "appendBytes:length:", &v18, 13);
      v12 = objc_msgSend((id)objc_msgSend(a3, "mutableData"), "length");
      v13 = v20;
      objc_msgSend((id)objc_msgSend(a3, "mutableData"), "increaseLengthBy:", v20);
      v14 = (void *)(objc_msgSend((id)objc_msgSend(a3, "mutableData"), "mutableBytes") + v12);
      v15 = objc_msgSend((id)objc_msgSend(a3, "mutableData"), "length");
      v16 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = objc_msgSend(a3, "mutableData");
        *(_DWORD *)buf = 134219522;
        v23 = a3;
        v24 = 2080;
        v25 = v8;
        v26 = 1024;
        v27 = a1;
        v28 = 2048;
        v29 = v17;
        v30 = 2048;
        v31 = v12;
        v32 = 2048;
        v33 = v13;
        v34 = 2048;
        v35 = v15;
        _os_log_impl(&dword_19BC4B000, v16, OS_LOG_TYPE_DEFAULT, "ABBufferQueryCursor (%p) AppendPropertyBlobData, reading %s from recordID %d into buffer (%p), [%lu + %lu = %lu]", buf, 0x44u);
      }
      sqlite3_blob_read(ppBlob, v14, v13, 0);
    }
    sqlite3_blob_close(ppBlob);
  }
}

const void *ABCPersonCreateNewPerson(uint64_t a1)
{
  return ABCPersonCreateNewPersonInSourceAndReturnError(a1, 0, 0);
}

uint64_t ABCCopyArrayOfUIDsMatchingEmailAddress(uint64_t a1, const __CFString *a2, _QWORD *a3, _QWORD *a4)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLike(*(_QWORD *)(a1 + 16), kABCEmailProperty, a2, a3, a4);
}

BOOL ABRecordSetValue(ABRecordRef record, ABPropertyID property, CFTypeRef value, CFErrorRef *error)
{
  uint64_t v6;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v13;

  v6 = *(_QWORD *)&property;
  if (ABLogAPIUsage())
  {
    v13 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABRecordSetValue(ABRecordRef, ABPropertyID, CFTypeRef, CFErrorRef *)", 122, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCRecordSetValueAndReturnError(record, v6, (__CFString *)value, error);
}

void ABCAddressBookInvalidateCaches(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABCAddressBookInvalidateCaches(ABCAddressBookRef)", 1265, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (*(_QWORD *)(a1 + 16))
    CPRecordStoreInvalidateCaches();
  if (*(_QWORD *)(a1 + 24))
    CPRecordStoreInvalidateCaches();
  ABCAddressBookFlushPhoneCache(a1);
  *(_DWORD *)(a1 + 376) &= 0xFED81FFF;
}

void ABCAddressBookFlushPhoneCache(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1 && *(_QWORD *)(a1 + 40))
  {
    v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 56) = 0;
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void ABSqliteComparePhoneNumbers(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  size_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a2 == 4)
  {
    v5 = (uint64_t *)sqlite3_value_blob(*a3);
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    v7 = sqlite3_value_text(a3[1]);
    v8 = sqlite3_value_text(a3[2]);
    v9 = sqlite3_value_blob(a3[3]);
    if (v8)
    {
      v10 = (uint64_t)v9;
      v11 = strlen((const char *)v8);
      v12 = (__CFString *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, v11, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      if (v12)
      {
        v13 = v12;
        v14 = ABCreateNormalizedPhoneNumberAndDecompose(v12, v10, 0, 0, &v18);
        LODWORD(v8) = 0;
        if (v14)
          v15 = v6 == 0;
        else
          v15 = 1;
        if (!v15)
        {
          v16 = (char *)v14;
          LODWORD(v8) = 0;
          if (decomposedPhoneNumbersEqual())
          {
            if (v7 && (v17 = strlen((const char *)v7), !strncmp((const char *)v7, v16, v17)))
              LODWORD(v8) = 2;
            else
              LODWORD(v8) = 1;
          }
          free(v16);
        }
        CFRelease(v13);
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
    }
    sqlite3_result_int(a1, (int)v8);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t ABCreateNormalizedPhoneNumberAndDecompose(void *a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v7 = (uint64_t)a1;
  if (a3)
    v7 = objc_msgSend(a1, "_cn_stringBySanitizingPhoneNumber");
  if (!v7)
    return 0;
  v8 = PNCopyBestGuessNormalizedNumberForCountry();
  if (v8)
  {
    if (a4)
      *a4 = _PNCopyLastFourDigitsOfLocalNumber();
    if (a5)
    {
      v9 = MEMORY[0x1E0D17858];
      v10 = *(_OWORD *)(MEMORY[0x1E0D17858] + 16);
      *a5 = *MEMORY[0x1E0D17858];
      a5[1] = v10;
      v11 = *(_OWORD *)(v9 + 48);
      a5[2] = *(_OWORD *)(v9 + 32);
      a5[3] = v11;
      decomposePhoneNumber();
    }
  }
  return v8;
}

void *ABPersonGetUserActivityUserInfoWithInternalUUID(const void *a1, int a2, int a3)
{
  void *v6;
  CFTypeRef v7;
  const void *v8;
  void *v9;
  void *v10;
  __CFString **v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ABPropertyID v17;
  uint64_t i;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int IntValue;
  void *v26;
  void *v27;
  void *v28;
  CFArrayRef obj;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  id v36;
  _BYTE v37[128];
  _QWORD v38[3];

  v38[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v30 = a2;
  if (a2)
  {
    obj = ABPersonCopyArrayOfAllLinkedPeople(a1);
    v7 = ABPersonCopyPreferredLinkedPersonForName(a1);
  }
  else
  {
    v38[0] = a1;
    obj = (CFArrayRef)(id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
    v7 = CFRetain(a1);
  }
  v8 = v7;
  if (a3)
  {
    v9 = (void *)ABRecordCopyValue(v7, kABPersonInternalUUIDProperty);
    if (objc_msgSend(v9, "length"))
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, kABUserActivityUserInfoInternalUUIDKey);

  }
  IntValue = ABRecordGetIntValue((uint64_t)v8, kABPersonKindProperty);
  v28 = v6;
  if (IntValue == 1)
  {
    v10 = (void *)ABRecordCopyValue(v8, kABPersonOrganizationProperty);
    if (!objc_msgSend(v10, "length"))
      goto LABEL_16;
    v11 = kABUserActivityUserInfoOrganizationNameKey;
    goto LABEL_15;
  }
  v12 = (void *)ABRecordCopyValue(v8, kABPersonFirstNameProperty);
  if (objc_msgSend(v12, "length"))
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, kABUserActivityUserInfoFirstNameKey);

  v10 = (void *)ABRecordCopyValue(v8, kABPersonLastNameProperty);
  if (objc_msgSend(v10, "length"))
  {
    v11 = kABUserActivityUserInfoLastNameKey;
LABEL_15:
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, *v11);
  }
LABEL_16:

  v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v26 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v36 = v26;
  v27 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v35 = v27;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v14 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v32;
    v17 = kABPersonExternalUUIDProperty;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v32 != v16)
          objc_enumerationMutation(obj);
        v19 = *(const void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v20 = (void *)ABRecordCopyValue(v19, v17);
        if (objc_msgSend(v20, "length"))
        {
          if (v30 && v19 == v8)
            objc_msgSend(v13, "insertObject:atIndex:", v20, 0);
          else
            objc_msgSend(v13, "addObject:", v20);
        }

        _addUniqueValuesFromPersonMultiValuePropertyToArray(v19, kABPersonPhoneProperty, &v36);
        _addUniqueValuesFromPersonMultiValuePropertyToArray(v19, kABPersonEmailProperty, &v35);
      }
      v15 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v15);
  }
  v21 = v28;
  if (objc_msgSend(v13, "count"))
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v13, kABUserActivityUserInfoCardDAVUUIDsKey);
  if (objc_msgSend(v26, "count"))
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v26, kABUserActivityUserInfoPhoneNumbersKey);
  if (objc_msgSend(v27, "count"))
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v27, kABUserActivityUserInfoEmailAddressesKey);

  CFRelease(v8);
  if (!objc_msgSend(v28, "count"))
    return 0;
  objc_msgSend(v28, "setObject:forKeyedSubscript:", &unk_1E3CB9648, kABUserActivityUserInfoVersionKey);
  if (v30)
  {
    v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v22, kABUserActivityUserInfoUnifiedKey);
  }
  if (IntValue == 1)
  {
    v23 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v23, kABUserActivityUserInfoIsOrganizationKey);
  }
  return v21;
}

void _addUniqueValuesFromPersonMultiValuePropertyToArray(const void *a1, ABPropertyID a2, id *a3)
{
  CFTypeRef v4;
  const void *v5;
  CFArrayRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = ABRecordCopyValue(a1, a2);
  if (v4)
  {
    v5 = v4;
    v6 = ABMultiValueCopyArrayOfAllValues(v4);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (objc_msgSend(v11, "length"))
          {
            if ((objc_msgSend(*a3, "containsObject:", v11) & 1) == 0)
              objc_msgSend(*a3, "addObject:", v11);
          }
        }
        v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v8);
    }

    CFRelease(v5);
  }
}

CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef multiValue)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef)", 44, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCopyValues((uint64_t)multiValue);
}

CFArrayRef ABCMultiValueCopyValues(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && (v1 = *(const __CFArray **)(a1 + 40)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  else
    return 0;
}

uint64_t ABPolicyMaximumNumberOfValuesForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 24))(a2, a3, *(_QWORD *)(result + 104));
  return result;
}

ABRecordRef ABPersonCreate(void)
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreate(void)", 270, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCPersonCreateNewPerson(0);
}

uint64_t noMaximumValues(int a1, ABPropertyID property)
{
  if ((ABPersonGetTypeOfProperty(property) & 0x100) != 0)
    return 0x7FFFFFFFLL;
  else
    return 1;
}

uint64_t ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(uint64_t a1, const __CFString *a2, _QWORD *a3, _QWORD *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(ABAddressBookRef, CFStringRef, CFArrayRef *, CFArrayRef *)", 1959, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfUIDsMatchingEmailAddress(a1, a2, a3, a4);
}

void ABInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;

  if (ABLogAPIUsage())
  {
    v16 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABInitialize(void)", 1138, v9, 0, v10, v11, v12, (uint64_t)v16);
    CFRelease(v9);
  }
  ABCInitializeLibrary();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABInitialize(void)", 1140, CFSTR(">> "), 0, v13, v14, v15, a9);
}

const void *ABCPersonCreateNewPersonInSourceAndReturnError(uint64_t a1, const void *a2, CFErrorRef *a3)
{
  const void *v6;
  const void *Policy;

  ABCInitializeLibrary();
  v6 = (const void *)CPRecordCreate();
  if (!a2)
  {
    CPRecordSetProperty();
    CPRecordInitializeProperty();
    goto LABEL_6;
  }
  Policy = ABCSourceGetPolicy(a2);
  if (!Policy || ABPolicyShouldAddRecord((uint64_t)Policy, a1, (uint64_t)v6, 0))
  {
    CPRecordSetProperty();
    CPRecordSetProperty();
LABEL_6:
    CPRecordInitializeProperty();
    return v6;
  }
  if (a3)
    *a3 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
  CFRelease(v6);
  return 0;
}

uint64_t ABCInitializeLibrary()
{
  return pthread_once(&once_control, (void (*)(void))_ABCInitialize);
}

uint64_t ABCDBContextCollectMultiValueUID(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a3;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueRecordID(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 48) = a3;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueIdentifier(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 16) = a3;
  return 1;
}

uint64_t ABAddressBookGetAccountForSource(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int IntValue;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetAccountForSource(ABAddressBookRef, ABRecordRef)", 46, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  IntValue = ABRecordGetIntValue(a2, kABSourceAccountIDProperty);
  if (a1 && *(_QWORD *)(a1 + 16) && IntValue != -1)
    return ABCDBContextRecordForUIDOfType();
  else
    return 0;
}

uint64_t ABSourceIsRemote(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsRemote(ABRecordRef)", 1061, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (a1)
    return (ABRecordGetIntValue(a1, kABSourceTypeProperty) >> 24) & 1;
  else
    return 0;
}

uint64_t ABSourceIsContentReadonlyIncludingGuardianRestrictions(uint64_t a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AddressBook;
  uint64_t v9;
  uint64_t Policy;
  uint64_t v11;
  uint64_t IsContentReadonlyInCapabilityRestrictions;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsContentReadonlyIncludingGuardianRestrictions(ABRecordRef, _Bool)", 1175, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  AddressBook = ABRecordGetAddressBook();
  v9 = AddressBook;
  if (AddressBook && ABAddressBookIgnoresContactProviderRestrictions(AddressBook))
    return 0;
  Policy = ABSourceGetPolicy(a1);
  if ((ABPolicyShouldIgnoreCapabilitiesRestrictions(Policy) & 1) != 0)
    return 0;
  IsContentReadonlyInCapabilityRestrictions = ABSourceIsContentReadonlyInCapabilityRestrictions(a1);
  v11 = IsContentReadonlyInCapabilityRestrictions;
  if (v9 && !(_DWORD)IsContentReadonlyInCapabilityRestrictions && a2 && !ABAddressBookIgnoresGuardianRestrictions(v9))
    return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 2) & 1;
  return v11;
}

uint64_t ABSourceIsContentReadonlyInCapabilityRestrictions(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsContentReadonlyInCapabilityRestrictions(ABRecordRef)", 1163, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if ((ABRecordGetIntValue(a1, kABSourceTypeProperty) & 0x1000000) != 0
    || ABRecordGetIntValue(a1, kABSourceTypeProperty) == 7)
  {
    return 1;
  }
  else
  {
    return ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) & 1;
  }
}

uint64_t ABSourceGetPolicy(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPolicyRef ABSourceGetPolicy(ABRecordRef)", 336, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCSourceGetPolicy(a1);
}

const void *ABCSourceGetPolicy(const void *a1)
{
  const void *Property;
  const __CFString *v3;
  const __CFString *v4;
  uint64_t AddressBook;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;

  if (!a1)
    return 0;
  Property = (const void *)CPRecordGetProperty();
  if (!Property)
  {
    v3 = (const __CFString *)ABRecordCopyValue(a1, kABSourceConstraintsPathProperty);
    if (v3)
    {
      v4 = v3;
      Property = (const void *)ABPolicyCreateFromDictionaryAtPath(v3);
      CFRelease(v4);
      if (Property)
        goto LABEL_17;
    }
    if (ABSourceIsContactProvider((uint64_t)a1))
    {
      AddressBook = ABRecordGetAddressBook();
      if (AddressBook)
      {
        if (ABAddressBookIgnoresContactProviderRestrictions(AddressBook))
        {
          ABPolicyCreatePermissive();
          Property = v6;
          if (v6)
            goto LABEL_17;
        }
      }
    }
    if ((ABSourceIsContentReadonlyInCapabilityRestrictions((uint64_t)a1) & 1) != 0
      || ABSourceIsGuardianRestricted((uint64_t)a1)
      && (v8 = ABRecordGetAddressBook()) != 0
      && !ABAddressBookIgnoresGuardianRestrictions(v8))
    {
      ABPolicyCreateReadOnly();
      Property = v7;
      if (v7)
        goto LABEL_17;
    }
    ABPolicyCreatePermissive();
    Property = v9;
    if (v9)
    {
LABEL_17:
      CPRecordInitializeProperty();
      CFRelease(Property);
    }
  }
  return Property;
}

uint64_t permissivePolicyIgnoreCapabilitiesRestrictions(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t ABSourceIsGuardianRestricted(uint64_t a1)
{
  return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 2) & 1;
}

uint64_t ABPolicyShouldIgnoreCapabilitiesRestrictions(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(result + 96))(*(_QWORD *)(result + 104));
  return result;
}

double ABPolicyCreatePermissive()
{
  void *v0;

  v0 = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
  return ABPolicyCreateWithCallbacks((uint64_t)copyAllRecordTypes, (uint64_t)noMaximumValues, (uint64_t)anyLabels, (uint64_t)noPreferredLabels, (uint64_t)alwaysAddRecord, (uint64_t)alwaysRemoveRecord, (uint64_t)alwaysAddMember, (uint64_t)alwaysRemoveMember, (uint64_t)alwaysSetValue, (uint64_t)permissivePolicySetShouldIgnoreCapabilitiesRestrictions, (uint64_t)permissivePolicyIgnoreCapabilitiesRestrictions, (uint64_t)v0, 0, (uint64_t)freePermissivePolicyContext);
}

double ABPolicyCreateWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14)
{
  uint64_t Instance;
  double result;

  pthread_once(&kABPolicyRegisterClass, (void (*)(void))ABPolicyRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0.0;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_QWORD *)(Instance + 16) = a1;
    *(_QWORD *)(Instance + 24) = a2;
    *(_QWORD *)(Instance + 32) = a3;
    *(_QWORD *)(Instance + 40) = a4;
    *(_QWORD *)(Instance + 48) = a5;
    *(_QWORD *)(Instance + 56) = a6;
    *(_QWORD *)(Instance + 64) = a7;
    *(_QWORD *)(Instance + 72) = a8;
    *(_QWORD *)(Instance + 80) = a9;
    *(_QWORD *)(Instance + 88) = a10;
    *(_QWORD *)(Instance + 96) = a11;
    *(_QWORD *)(Instance + 104) = a12;
    *(_DWORD *)(Instance + 112) = a13;
    *(_QWORD *)(Instance + 120) = a14;
  }
  return result;
}

BOOL ABAddressBookIgnoresGuardianRestrictions(uint64_t a1)
{
  return a1 && (*(_BYTE *)(a1 + 378) & 0x20) != 0;
}

uint64_t ABCDBContextFetchMultiValuePropertyIntoRecord(uint64_t a1, void *a2, int a3, int a4)
{
  const __CFArray *v7;
  uint64_t MultiValuePropertyIntoRecords;
  void *values;

  values = a2;
  v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  MultiValuePropertyIntoRecords = ABCDBContextFetchMultiValuePropertyIntoRecords(a1, v7, a3, a4);
  if (v7)
    CFRelease(v7);
  return MultiValuePropertyIntoRecords;
}

uint64_t ABCDBContextFetchMultiValuePropertyIntoRecords(uint64_t a1, CFArrayRef theArray, int a3, int a4)
{
  CFIndex v8;
  CFMutableDictionaryRef MultiValueEntries;
  const __CFDictionary *v11;
  CFIndex Count;
  __CFSet *Mutable;
  CFIndex v14;
  unsigned __int8 Identifier;
  CFNumberRef v16;
  const __CFArray *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  CFIndex v28;
  uint64_t v29;
  const __CFString **ValueAtIndex;
  const __CFString **v31;
  int v32;
  CFMutableDictionaryRef v33;
  int v34;
  uint64_t v35;
  sqlite3_stmt *v36;
  int v37;
  const __CFString *v38;
  CFIndex v39;
  CFDateRef v40;
  const __CFString *v41;
  CFIndex v42;
  uint64_t (**v43)();
  uint64_t (*v44)();
  __CFString *v45;
  const __CFString *v46;
  CFIndex v47;
  uint64_t v48;
  const __CFDictionary *v49;
  int v50;
  __CFSet *v51;
  const __CFArray *v52;
  const __CFAllocator *allocator;
  void *value;
  CFRange v55;

  if (!a1)
    return 1;
  if (CFArrayGetCount(theArray) < 1)
    return 1;
  v8 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v8);
    if (CPRecordGetID() != -1)
      break;
    if (++v8 >= CFArrayGetCount(theArray))
      return 1;
  }
  if (!a4)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: invalid property type for %d\n", "ABCDBContextFetchMultiValuePropertyIntoRecords", a3);
    return 1;
  }
  MultiValueEntries = ABCDBContextFetchMultiValueEntries(theArray, a1, a3);
  if (!MultiValueEntries)
    return 1;
  v11 = MultiValueEntries;
  Count = CFArrayGetCount(theArray);
  Mutable = CFSetCreateMutable(0, Count, 0);
  if (CFArrayGetCount(theArray) < 1)
  {
    Identifier = 1;
  }
  else
  {
    v14 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Identifier = 1;
    v51 = Mutable;
    v50 = a4;
    v49 = v11;
    do
    {
      CFArrayGetValueAtIndex(theArray, v14);
      LODWORD(value) = 0;
      LODWORD(value) = CPRecordGetID();
      if (!CFSetContainsValue(Mutable, (const void *)(int)value))
      {
        CFSetAddValue(Mutable, (const void *)(int)value);
        if ((_DWORD)value != -1)
        {
          v16 = CFNumberCreate(allocator, kCFNumberSInt32Type, &value);
          v17 = (const __CFArray *)CFDictionaryGetValue(v11, v16);
          if (v16)
            CFRelease(v16);
          v18 = ABCMultiValueCreateMutable(a4);
          if (v18)
          {
            v26 = (uint64_t)v18;
            if (v17)
            {
              v27 = CFArrayGetCount(v17);
              if (v27 >= 1 && (Identifier & 1) != 0)
              {
                v28 = v27;
                v29 = 1;
                v52 = v17;
                do
                {
                  ValueAtIndex = (const __CFString **)CFArrayGetValueAtIndex(v17, v29 - 1);
                  v31 = ValueAtIndex;
                  v32 = *(_DWORD *)(v26 + 16);
                  if (v32 == 260)
                  {
                    v40 = _ABCCreateDateFromCFString(ValueAtIndex[4]);
                    v41 = v31[3];
                    v42 = ABCMultiValueGetCount(v26);
                    Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v40, v41, v42, v31[5], (int *)v31 + 4, 0);
                    if (v40)
                    {
                      v43 = ABCCallBacksForType(*(_DWORD *)(v26 + 16) & 0xFFFFFEFF);
                      if (v43)
                      {
                        v44 = v43[1];
                        if (v44)
                          ((void (*)(CFDateRef))v44)(v40);
                      }
                    }
                  }
                  else if (v32 == 261)
                  {
                    v33 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    v34 = *((_DWORD *)v31 + 2);
                    v35 = CPSqliteConnectionStatementForSQL();
                    if (v35)
                    {
                      v36 = *(sqlite3_stmt **)(v35 + 8);
                      if (v36)
                      {
                        sqlite3_bind_int(v36, 1, v34);
                        v37 = CPSqliteStatementSendResults();
                        if (v37 != 101)
                          syslog(3, "Error fetching multivalue sub entries: %d", v37);
                        CPSqliteStatementReset();
                        CPSqliteDatabaseReleaseSqliteStatement();
                      }
                    }
                    v38 = v31[3];
                    v39 = ABCMultiValueGetCount(v26);
                    Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v33, v38, v39, v31[5], (int *)v31 + 4, 0);
                    CFRelease(v33);
                    v17 = v52;
                  }
                  else
                  {
                    v46 = ValueAtIndex[3];
                    v45 = (__CFString *)ValueAtIndex[4];
                    v47 = ABCMultiValueGetCount(v26);
                    Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v45, v46, v47, v31[5], (int *)v31 + 4, 0);
                  }
                  if (v29 >= v28)
                    break;
                  ++v29;
                }
                while ((Identifier & 1) != 0);
                a4 = v50;
                v11 = v49;
              }
            }
            ABMultiValueSetImmutable(v26, v19, v20, v21, v22, v23, v24, v25, v48);
            ABCRecordSetContents();
            CFRelease((CFTypeRef)v26);
          }
          Mutable = v51;
          if (v17)
          {
            v55.length = CFArrayGetCount(v17);
            v55.location = 0;
            CFArrayApplyFunction(v17, v55, (CFArrayApplierFunction)freeEntriesStruct, 0);
          }
        }
      }
      ++v14;
    }
    while (v14 < CFArrayGetCount(theArray));
  }
  CFRelease(v11);
  CFRelease(Mutable);
  return Identifier & 1;
}

__CFArray *ABCMultiValueInsertAndCreateIdentifier(CFMutableArrayRef *a1, void *value, const void *a3, CFIndex idx, CFStringRef a5, int *a6, int a7)
{
  __CFArray *result;
  int v15;
  const __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  int IdentifierAtIndex;
  const __CFUUID *v21;
  const __CFAllocator *v22;
  const void *v23;

  result = 0;
  if (a1)
  {
    if (value)
    {
      if (a1[5]
        || (result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
            (a1[5] = result) != 0))
      {
        if (a1[4]
          || (result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
              (a1[4] = result) != 0))
        {
          if (a1[3]
            || (result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0), (a1[3] = result) != 0))
          {
            if (a1[6]
              || (result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
                  (a1[6] = result) != 0))
            {
              if (!a6 || a7)
              {
                v16 = a1[5];
                if (v16 && (Count = CFArrayGetCount(v16), Count >= 1))
                {
                  v18 = Count;
                  v19 = 0;
                  v15 = 0;
                  do
                  {
                    IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)a1, v19);
                    if (IdentifierAtIndex >= v15)
                      v15 = IdentifierAtIndex + 1;
                    ++v19;
                  }
                  while (v18 != v19);
                  if (!a6)
                    goto LABEL_22;
                }
                else
                {
                  v15 = 0;
                  if (!a6)
                    goto LABEL_22;
                }
                *a6 = v15;
              }
              else
              {
                v15 = *a6;
              }
LABEL_22:
              if (a5)
              {
                v21 = 0;
              }
              else
              {
                v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v21 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
                if (v21)
                {
                  a5 = CFUUIDCreateString(v22, v21);
                  CFRelease(v21);
                  v21 = (const __CFUUID *)a5;
                }
                else
                {
                  a5 = 0;
                }
              }
              CFArrayInsertValueAtIndex(a1[5], idx, value);
              if (a3)
                v23 = a3;
              else
                v23 = (const void *)*MEMORY[0x1E0C9B0D0];
              CFArrayInsertValueAtIndex(a1[4], idx, v23);
              CFArrayInsertValueAtIndex(a1[3], idx, (const void *)v15);
              CFArrayInsertValueAtIndex(a1[6], idx, a5);
              if (v21)
                CFRelease(v21);
              return (__CFArray *)1;
            }
          }
        }
      }
    }
  }
  return result;
}

CFIndex ABCMultiValueGetCount(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && (v1 = *(const __CFArray **)(a1 + 40)) != 0)
    return CFArrayGetCount(v1);
  else
    return 0;
}

void ABMultiValueSetImmutable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v10 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueSetImmutable(ABMultiValueRef)", 111, v10, 0, v11, v12, v13, (uint64_t)v17);
    CFRelease(v10);
  }
  if (a1)
    *(_BYTE *)(a1 + 60) &= ~1u;
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABMultiValueSetImmutable(ABMultiValueRef)", 116, CFSTR(">> "), 0, v14, v15, v16, a9);
}

uint64_t ABCRecordSetContents()
{
  CPRecordInitializeProperty();
  return 1;
}

_OWORD *ABCMultiValueCreateMutable(int a1)
{
  _OWORD *result;

  if (!a1)
    return 0;
  result = ABCMultiValueCreate(a1);
  if (result)
    *((_BYTE *)result + 60) |= 1u;
  return result;
}

_OWORD *ABCMultiValueCreate(int a1)
{
  _OWORD *result;

  if (!a1)
    return 0;
  pthread_once(&kABCMultiValueRegisterClass, (void (*)(void))ABCMultiValueRegisterClass);
  result = (_OWORD *)_CFRuntimeCreateInstance();
  if (result)
  {
    result[2] = 0u;
    result[3] = 0u;
    result[1] = 0u;
    *((_DWORD *)result + 4) = a1;
  }
  return result;
}

CFMutableDictionaryRef ABCDBContextFetchMultiValueEntries(CFArrayRef theArray, uint64_t a2, int a3)
{
  CFMutableDictionaryRef result;
  const __CFAllocator *v6;
  __CFString *Mutable;
  const __CFString *v8;
  CFIndex v9;
  int v10;
  _BOOL8 v11;
  int v12;
  uint64_t v13;
  CFMutableDictionaryRef v14;
  CFIndex v15;
  int ID;
  int v17;
  CFIndex Count;
  CFIndex v19;
  const void *ValueAtIndex;
  CFNumberRef v21;
  CFIndex v22;
  int v23;
  int valuePtr;
  __int128 v25;
  __int128 v26;
  CFMutableDictionaryRef v27;
  _QWORD v28[12];
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, uint64_t, CFTypeRef);
  _BOOL8 v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int, CFTypeRef);
  uint64_t v35;
  uint64_t v36;

  result = 0;
  v36 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  if (!theArray || !a2)
    return result;
  if (CFArrayGetCount(theArray) < 1)
    return 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("SELECT UID, identifier, record_id, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label), value, guid FROM ABMultiValue WHERE record_id "));
  if (CFArrayGetCount(theArray) == 1)
  {
    v8 = CFSTR("= ? ");
  }
  else
  {
    CFStringAppend(Mutable, CFSTR("IN ("));
    if (CFArrayGetCount(theArray) < 1)
    {
      v8 = CFSTR(") ");
    }
    else
    {
      v9 = 0;
      v8 = CFSTR(") ");
      do
      {
        if (v9)
          CFStringAppend(Mutable, CFSTR(", "));
        CFStringAppend(Mutable, CFSTR("?"));
        ++v9;
      }
      while (v9 < CFArrayGetCount(theArray));
    }
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(Mutable, CFSTR("AND property+0 = ?;"));
  v28[0] = 0;
  v28[1] = ABCDBContextCollectMultiValueUID;
  v28[2] = 0;
  v28[3] = 1;
  v28[4] = ABCDBContextCollectMultiValueIdentifier;
  v28[5] = 0;
  v28[6] = 2;
  v28[7] = ABCDBContextCollectMultiValueRecordID;
  v28[8] = 0;
  v28[9] = 0x200000003;
  v28[10] = ABCDBContextCollectMultiValueLabel;
  v28[11] = 0;
  v29 = 4;
  CFArrayGetValueAtIndex(theArray, 0);
  v10 = ABRecordTypeOfProperty() & 0xFFFFFEFF;
  v11 = v10 != 2;
  if (v10 == 7)
    v12 = 4;
  else
    v12 = 2 * v11;
  v30 = v12;
  v31 = ABCDBContextCollectMultiValueValue;
  v32 = v11;
  v33 = 0x200000005;
  v34 = ABCDBContextCollectMultiValueUUID;
  v35 = 0;
  v13 = CPSqliteConnectionStatementForSQL();
  if (!v13)
  {
    v14 = 0;
LABEL_38:
    if (Mutable)
      CFRelease(Mutable);
    if (v14)
      CFRelease(v14);
    return 0;
  }
  v14 = *(CFMutableDictionaryRef *)(v13 + 8);
  if (!v14)
    goto LABEL_38;
  if (CFArrayGetCount(theArray) < 1)
  {
    v17 = 1;
  }
  else
  {
    v15 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v15);
      ID = CPRecordGetID();
      sqlite3_bind_int(v14, ++v15, ID);
    }
    while (CFArrayGetCount(theArray) > v15);
    v17 = v15 + 1;
  }
  sqlite3_bind_int(v14, v17, a3);
  Count = CFArrayGetCount(theArray);
  v14 = CFDictionaryCreateMutable(v6, Count, MEMORY[0x1E0C9B390], 0);
  if (CFArrayGetCount(theArray) >= 1)
  {
    v19 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      valuePtr = 0;
      valuePtr = CPRecordGetID();
      v21 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v14, v21, ValueAtIndex);
      if (v21)
        CFRelease(v21);
      ++v19;
    }
    while (v19 < CFArrayGetCount(theArray));
  }
  *(_QWORD *)&v25 = v14;
  DWORD2(v25) = a3;
  *(_QWORD *)&v26 = v28;
  DWORD2(v26) = 6;
  v22 = CFArrayGetCount(theArray);
  v27 = CFDictionaryCreateMutable(v6, v22, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v27)
    goto LABEL_38;
  v23 = CPSqliteStatementSendResults();
  if (v23 != 101)
    syslog(3, "Error fetching multivalue entries: %d", v23);
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  if (Mutable)
    CFRelease(Mutable);
  if (v14)
    CFRelease(v14);
  return v27;
}

uint64_t ABTCCIsAccessGrantedToImages()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "isAccessGranted");
}

ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef options, CFErrorRef *error)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)", 461, v5, (uint64_t)CFSTR("options=%@"), v6, v7, v8, (uint64_t)options);
    CFRelease(v5);
  }
  if (error && *error)
    *error = 0;
  v9 = ABAddressBookCreateWithOptionsAndPolicy(options, 0, (const __CFString **)error);
  if (ABLogAPIUsage())
  {
    v10 = ABLogAddressBook((uint64_t)v9);
    ABLogErrorPtr((const __CFString **)error);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)", 470, CFSTR(">> "), (uint64_t)CFSTR("%@, %@"), v11, v12, v13, v10);
  }
  return v9;
}

const void *ABAddressBookCreateWithOptionsAndPolicy(const __CFDictionary *a1, uint64_t a2, const __CFString **a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    ABLogErrorPtr(a3);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 416, v7, (uint64_t)CFSTR("options=%@, policy=%i, %@"), v8, v9, v10, (uint64_t)a1);
    CFRelease(v7);
  }
  if (ABDiagnosticsEnabled())
    _ABLog2(7, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 417, 0, (uint64_t)CFSTR("policy = %i"), v11, v12, v13, a2);
  if (os_variant_has_internal_diagnostics()
    && _VerifyDirectDatabaseAccessEntitlementPresence_onceToken != -1)
  {
    dispatch_once(&_VerifyDirectDatabaseAccessEntitlementPresence_onceToken, &__block_literal_global_3);
  }
  v14 = (const void *)ABAddressBookCopyDBDirectoryWithOptions(a1);
  v15 = (const void *)ABAddressBookCreateWithDatabaseDirectory((uint64_t)v14);
  CFRelease(v14);
  v16 = ABTCCIsAccessDenied();
  if (!(_DWORD)a2 && v16)
  {
    if (ABDiagnosticsEnabled())
      _ABLog2(7, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 444, 0, (uint64_t)CFSTR("returning NULL ABAddressBookRef"), v17, v18, v19, v26);
    CFRelease(v15);
    v15 = 0;
    if (a3)
      *a3 = (const __CFString *)CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 1, 0);
  }
  v20 = ABTCCIsAccessUnknown();
  if ((_DWORD)a2 == 1 && v20)
    ABTCCRequestAccess();
  ABAddressBookConfigureDelegateOptions((uint64_t)v15, a1);
  if (ABLogAPIUsage())
  {
    v21 = ABLogAddressBook((uint64_t)v15);
    ABLogErrorPtr(a3);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 455, CFSTR(">> "), (uint64_t)CFSTR("%@, %@"), v22, v23, v24, v21);
  }
  return v15;
}

BOOL ABTCCIsAccessUnknown()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "authorizationStatus") == 0;
}

__CFString *_createMutableDBDirectory()
{
  const __CFString *v0;
  __CFString *MutableCopy;

  v0 = (const __CFString *)CPSharedResourcesDirectory();
  if (!v0)
    return 0;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v0);
  CFStringAppend(MutableCopy, CFSTR("/Library/AddressBook/"));
  return MutableCopy;
}

BOOL ABTCCIsAccessDenied()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "authorizationStatus") == 1;
}

uint64_t ABAddressBookCreateWithDatabaseDirectory(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)", 391, v3, (uint64_t)CFSTR("directory=%@"), v4, v5, v6, a1);
    CFRelease(v3);
  }
  v7 = ABCCreateAddressBookWithDatabaseDirectory(a1);
  if (ABLogAPIUsage())
  {
    v8 = ABLogAddressBook(v7);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)", 395, CFSTR(">> "), (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
  }
  return v7;
}

ABAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(const __CFString *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *Instance;
  uint64_t v12;
  __CFString *MutableCopy;
  const __CFString *v14;
  _BOOL4 v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  int CountOfInstancesOfClassWhere;
  ABPersonLinker *v30;
  unsigned int v31;
  int v32;
  int v33;
  NSObject *v34;
  const __CFString *v35;
  const __CFString *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t m;
  ABAddressBookRef addressBook;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  uint64_t v70;
  int v71;
  CFErrorRef error;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  _BYTE v78[128];
  _BYTE v79[128];
  pthread_mutexattr_t v80;
  uint8_t buf[4];
  const __CFString *v82;
  __int16 v83;
  const __CFString *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (ABDeviceIsBeforeFirstUnlockWithDataProtected())
  {
    if (os_variant_has_internal_content())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"ABCAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(CFStringRef, _Bool, _Bool, _Bool)", 240, 0, (uint64_t)CFSTR("%@"), v8, v9, v10, (uint64_t)CFSTR("AddressBook.framework was used before first unlock."));
    }
    ABDeviceRegisterCallbackForFirstUnlock((uint64_t)ABPostDatabaseChanged);
  }
  pthread_once(&once_control, (void (*)(void))_ABCInitialize);
  pthread_once(&kABCAddressBookRegisterClass, (void (*)(void))ABCAddressBookRegisterClass);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  v12 = (uint64_t)Instance;
  if (!Instance)
    return (ABAddressBookRef)v12;
  v80.__sig = 0;
  *(_QWORD *)v80.__opaque = 0;
  Instance[1] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[18] = 0u;
  Instance[19] = 0u;
  Instance[20] = 0u;
  Instance[21] = 0u;
  Instance[22] = 0u;
  Instance[23] = 0u;
  Instance[5] = 0u;
  v71 = 0;
  pthread_mutexattr_init(&v80);
  pthread_mutexattr_settype(&v80, 2);
  pthread_mutex_init((pthread_mutex_t *)(v12 + 80), &v80);
  pthread_mutexattr_destroy(&v80);
  if (a1)
  {
    *(_QWORD *)(v12 + 72) = CFRetain(a1);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    if (!MutableCopy)
    {
LABEL_81:
      CFRelease((CFTypeRef)v12);
      return 0;
    }
    v14 = MutableCopy;
    CFStringAppend(MutableCopy, CFSTR("AddressBook.sqlitedb"));
  }
  else
  {
    *(_QWORD *)(v12 + 72) = 0;
    v14 = CFSTR(":memory:");
  }
  *(_QWORD *)(v12 + 16) = ABCDBContextCreateWithPathAndAddressBook((uint64_t)v14, v12);
  CFRelease(v14);
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_81;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_QWORD *)(v12 + 336) = 0;
  *(_QWORD *)(v12 + 272) = 0;
  *(_QWORD *)(v12 + 280) = 850045858;
  CPRecordStoreGetDatabase();
  v66 = MEMORY[0x1E0C809B0];
  v67 = 3221225472;
  v68 = __ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys_block_invoke;
  v69 = &__block_descriptor_40_e5_v8__0l;
  v70 = v12;
  CPSqliteRegisterYieldNotifyBlock();
  if (*(_BYTE *)(v12 + 265))
  {
    CPRecordStoreGetDatabase();
    *(_QWORD *)(v12 + 64) = CPSqliteDatabaseCopyUniqueIdentifier();
    addressBook = (ABAddressBookRef)v12;
    if (a2)
    {
      if ((v71 & 1) != 0)
      {
        v17 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
        v62 = 0u;
        v63 = 0u;
        v64 = 0u;
        v65 = 0u;
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v63;
          do
          {
            for (i = 0; i != v19; ++i)
            {
              if (*(_QWORD *)v63 != v20)
                objc_enumerationMutation(v17);
              ABAddressBookRemoveRecord((ABAddressBookRef)v12, *(ABRecordRef *)(*((_QWORD *)&v62 + 1) + 8 * i), 0);
            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v62, v79, 16);
          }
          while (v19);
        }
        v22 = objc_msgSend(v17, "count");

        v23 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
        v58 = 0u;
        v59 = 0u;
        v60 = 0u;
        v61 = 0u;
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v58, v78, 16);
        if (v24)
        {
          v25 = v24;
          v26 = *(_QWORD *)v59;
          do
          {
            for (j = 0; j != v25; ++j)
            {
              if (*(_QWORD *)v59 != v26)
                objc_enumerationMutation(v23);
              ABAddressBookRemoveRecord((ABAddressBookRef)v12, *(ABRecordRef *)(*((_QWORD *)&v58 + 1) + 8 * j), 0);
            }
            v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v58, v78, 16);
          }
          while (v25);
        }
        v28 = objc_msgSend(v23, "count");

        v15 = v28 + v22 != 0;
        v16 = v15;
        if (!+[ABPersonLinker isInitialLinkingEnabled](ABPersonLinker, "isInitialLinkingEnabled"))
        {
LABEL_41:
          v57 = 1;
          v31 = a4 & ~ABCIsSortDataValid((uint64_t)addressBook, &v57);
          if (!v57)
            v31 = 0;
          v32 = v31 & (a2 ^ 1);
          if (+[ABPersonLinker isAutoLinkingEnabled](ABPersonLinker, "isAutoLinkingEnabled"))
            v33 = (+[ABPersonLinker isLinkDataValidForAddressBook:](ABPersonLinker, "isLinkDataValidForAddressBook:", addressBook) | a3) ^ 1;
          else
            v33 = 0;
          if ((v32 | v33) == 1)
          {
            v34 = ABOSLogGeneral();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              v35 = ABLogStringForBool(v32);
              v36 = ABLogStringForBool(v33);
              *(_DWORD *)buf = 138412546;
              v82 = v35;
              v83 = 2112;
              v84 = v36;
              _os_log_impl(&dword_19BC4B000, v34, OS_LOG_TYPE_DEFAULT, "shouldRebuildSortKeysOOP = %@, shouldRebuildLinkDataOOP = %@", buf, 0x16u);
            }
            ABStartDatabaseDoctor((uint64_t)addressBook);
          }
          if ((a2 & 1) != 0)
          {
            if ((v71 & 4) != 0)
            {
              v37 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
              v73 = 0u;
              v74 = 0u;
              v75 = 0u;
              v76 = 0u;
              v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, buf, 16);
              if (v38)
              {
                v39 = v38;
                v40 = *(_QWORD *)v74;
                do
                {
                  for (k = 0; k != v39; ++k)
                  {
                    if (*(_QWORD *)v74 != v40)
                      objc_enumerationMutation(v37);
                    v42 = *(const void **)(*((_QWORD *)&v73 + 1) + 8 * k);
                    error = 0;
                    if (!ABRecordSetValue(v42, kABPersonModificationDateProperty, (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99D68], "date"), &error))
                    {
                      ABDiagnosticsEnabled();
                      _ABLog2(3, (uint64_t)"_Bool _touchAllRecordsWithKatakanaPhoneticComponents(ABCAddressBook *)", 2615, 0, (uint64_t)CFSTR("Error touching record %@"), v43, v44, v45, (uint64_t)error);
                    }
                  }
                  v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v73, buf, 16);
                }
                while (v39);
                if (objc_msgSend(v37, "count"))
                  v16 = 1;
              }
              else if (objc_msgSend(v37, "count"))
              {
                v16 = 1;
              }
            }
            if ((v71 & 8) == 0)
            {
              if (!v16)
                return addressBook;
              goto LABEL_78;
            }
            v46 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
            v53 = 0u;
            v54 = 0u;
            v55 = 0u;
            v56 = 0u;
            v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v53, v77, 16);
            if (v47)
            {
              v48 = v47;
              v49 = *(_QWORD *)v54;
              do
              {
                for (m = 0; m != v48; ++m)
                {
                  if (*(_QWORD *)v54 != v49)
                    objc_enumerationMutation(v46);
                  v16 |= ABRecordSetValue(*(ABRecordRef *)(*((_QWORD *)&v53 + 1) + 8 * m), kABPersonKindProperty, kABPersonKindOrganization, 0);
                }
                v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v53, v77, 16);
              }
              while (v48);
            }

          }
          if ((v16 & 1) == 0)
            return addressBook;
LABEL_78:
          ABAddressBookSave(addressBook, 0);
          return addressBook;
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
        if (!+[ABPersonLinker isInitialLinkingEnabled](ABPersonLinker, "isInitialLinkingEnabled"))
          goto LABEL_41;
      }
      if ((v71 & 2) != 0)
      {
        CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
        v16 = CountOfInstancesOfClassWhere != CPRecordStoreGetCountOfInstancesOfClassWhere();
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = 0;
      if (!+[ABPersonLinker isInitialLinkingEnabled](ABPersonLinker, "isInitialLinkingEnabled"))
        goto LABEL_41;
      v15 = 0;
      if ((a3 & 1) == 0)
        goto LABEL_41;
    }
    if (!+[ABPersonLinker isLinkDataValidForAddressBook:](ABPersonLinker, "isLinkDataValidForAddressBook:", addressBook)|| v16)
    {
      v30 = -[ABPersonLinker initWithAddressBook:]([ABPersonLinker alloc], "initWithAddressBook:", addressBook);
      -[ABPersonLinker makeInitialLinks](v30, "makeInitialLinks");

    }
    v16 = v15;
    goto LABEL_41;
  }
  return (ABAddressBookRef)v12;
}

uint64_t ABCIsSortDataValid(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  _BOOL8 v15;
  uint64_t v17;

  v17 = 0;
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v3 = ABCGetICUVersion();
  ABCGetICUCollatorVersions((_DWORD *)&v17 + 1, &v17);
  v4 = CPSqliteConnectionIntegerForProperty();
  v5 = CPSqliteConnectionIntegerForProperty();
  v6 = CPSqliteConnectionIntegerForProperty();
  v7 = CPSqliteConnectionIntegerForProperty();
  v8 = CPSqliteConnectionIntegerForProperty();
  v9 = 0;
  if (v3 == v4 && v5 == 38 && HIDWORD(v17) == v6)
    v9 = v17 == v7;
  if (a2)
    *a2 = v9;
  if (v8 >= 1)
    v9 = 0;
  if (!v9)
    return 0;
  v11 = CPSqliteConnectionCopyValueForProperty();
  if (!v11)
    return 1;
  v12 = (const __CFString *)v11;
  v13 = ABCCopyUserLanguage();
  if (v13)
  {
    v14 = v13;
    v15 = CFStringCompare(v13, v12, 1uLL) == kCFCompareEqualTo;
    CFRelease(v14);
  }
  else
  {
    v15 = 1;
  }
  CFRelease(v12);
  return v15;
}

uint64_t ABCGetICUVersion()
{
  UVersionInfo versionArray;

  *(_DWORD *)versionArray = 0;
  u_getVersion(versionArray);
  return (versionArray[0] << 24) | (versionArray[1] << 16);
}

void ABCGetICUCollatorVersions(_DWORD *a1, _DWORD *a2)
{
  if (ABCGetICUCollatorVersions_onceToken == -1)
  {
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&ABCGetICUCollatorVersions_onceToken, &__block_literal_global_2);
  if (a2)
LABEL_3:
    *a2 = ABCGetICUCollatorVersions_cachedUCAVersion;
LABEL_4:
  if (a1)
    *a1 = ABCGetICUCollatorVersions_cachedCollatorVersion;
}

uint64_t ABCDBContextCreateWithPathAndAddressBook(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Database;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (!a1)
    return 0;
  v3 = CPRecordStoreCreateWithPathAndOptions();
  if (v3)
  {
    if (a2)
    {
      *(_BYTE *)(a2 + 264) = ABTCCIsAccessUnknown();
      *(_BYTE *)(a2 + 265) = ABTCCIsAccessGranted();
    }
    CPRecordStoreSetSetupHandler();
    CPRecordStoreLogChanges();
    Database = CPRecordStoreGetDatabase();
    CPSqliteDatabaseSetVersion();
    CPSqliteDatabaseSetJournalModeWAL();
    CPSqliteDatabaseSetAccessRequestHandler();
    CPSqliteDatabaseSetDataProtectionLevel();
    CPSqliteDatabaseSetAutoRetryStatements();
    CPSqliteDatabaseSetShouldUseInhibitorForConnections();
    *(_QWORD *)(Database + 264) = a2;
    CPSqliteDatabaseSetConnectionInitializer();
    CPSqliteDatabaseSetCorruptionHandler();
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    *(_QWORD *)recordStoreContext(v3) = a2;
    CPSqliteDatabaseSetShouldMigrateInProcess();
    CPSqliteDatabaseSetMigrationPluginBundleID();
    CPSqliteDatabaseSetMigrationHandlers();
    CPSqliteDatabaseSetShouldYieldWhenRequested();
    CPSqliteDatabaseSetShouldRequestUnlock();
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"ABCDBContextRef ABCDBContextCreateWithPathAndAddressBook(CFStringRef, ABCAddressBookRef, void *, _Bool)", 1196, 0, (uint64_t)CFSTR("Could not create address book database"), v5, v6, v7, v9);
  }
  return v3;
}

BOOL _accessRequestHandler()
{
  return ABTCCIsAccessGrantedToImages() != 0;
}

BOOL _accessRequestHandler_0()
{
  return (ABDeviceIsBeforeFirstUnlockWithDataProtected() & 1) == 0 && ABTCCIsAccessGranted() != 0;
}

uint64_t ABTCCIsAccessGranted()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "isAccessGranted");
}

uint64_t ABDeviceIsBeforeFirstUnlockWithDataProtected()
{
  uint64_t result;

  if (!__isBeforeFirstUnlockWithDataProtected)
    return 0;
  result = objc_msgSend(MEMORY[0x1E0D13AB8], "isDevicePasscodeProtected");
  if ((_DWORD)result)
    result = objc_msgSend(MEMORY[0x1E0D13AB8], "isDeviceUnlockedSinceBoot") ^ 1;
  __isBeforeFirstUnlockWithDataProtected = result;
  return result;
}

uint64_t ABCCreateAddressBookWithDatabaseDirectory(uint64_t a1)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, 0, 0, 1);
}

CFLocaleIdentifier ABCCopyUserLanguage()
{
  const __CFArray *v0;
  const __CFArray *v1;
  const __CFString *ValueAtIndex;
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString;

  v0 = (const __CFArray *)CFPreferencesCopyAppValue(CFSTR("AppleLanguages"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  if (!v0)
    goto LABEL_6;
  v1 = v0;
  if (CFArrayGetCount(v0) <= 0)
  {
    CFRelease(v1);
LABEL_6:
    CanonicalLanguageIdentifierFromString = CFSTR("en");
    CFRetain(CFSTR("en"));
    return CanonicalLanguageIdentifierFromString;
  }
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
  CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, ValueAtIndex);
  CFRelease(v1);
  if (!CanonicalLanguageIdentifierFromString)
    goto LABEL_6;
  return CanonicalLanguageIdentifierFromString;
}

uint64_t ABAddressBookCopyDBDirectoryWithOptions(const __CFDictionary *a1)
{
  void *Value;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  CFTypeRef v28;
  const void *v29;
  CFTypeRef v30;
  int v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;

  if (!a1)
    return ABCAddressBookCopyDBDirectory();
  Value = (void *)CFDictionaryGetValue(a1, CFSTR("ABAddressBookCreateOptionFamilyMemberAltDSID"));
  if (!Value)
    return ABCAddressBookCopyDBDirectory();
  v2 = Value;
  v3 = (void *)ABCAddressBookCopyDBDirectory();
  v4 = (void *)objc_msgSend(v3, "stringByAppendingString:", CFSTR("Family/"));
  CFRelease(v3);
  CPFileBuildDirectoriesToPath();
  v37 = open((const char *)objc_msgSend(v4, "fileSystemRepresentation"), 32);
  if (v37 == -1)
  {
    ABDiagnosticsEnabled();
    v35 = *__error();
    _ABLog2(3, (uint64_t)"CFStringRef ABAddressBookCopyDirectoryPathForDelegateWithAltDSID(CFStringRef)", 313, 0, (uint64_t)CFSTR("error opening Family directory lock at path %@, errno %d"), v5, v6, v7, (uint64_t)v4);
  }
  v36 = objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("family.plist"));
  v8 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:"), "mutableCopy");
  if (!v8)
    v8 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("Generation"));
  v10 = (id)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("Mappings")), "mutableCopy");
  if (!v10)
    v10 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v11 = objc_msgSend(v9, "intValue");
  v39 = 0;
  v12 = objc_msgSend(v4, "stringByAppendingPathComponent:", v2);
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", v12, &v39))
  {
    v38 = 0;
    if (v39)
    {
      if (ABDiagnosticsEnabled())
        _ABLog2(6, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 201, 0, (uint64_t)CFSTR("migrating folder for deletage with altdsid %@ into mappings registry"), v13, v14, v15, (uint64_t)v2);
      v16 = (const void *)objc_msgSend(v2, "stringByAppendingFormat:", CFSTR(":%d"), (v11 + 1), v35);
      v17 = objc_msgSend(v4, "stringByAppendingString:", v16);
      if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "moveItemAtPath:toPath:error:", v12, v17, &v38) & 1) != 0)
      {
        if (v16)
        {
          CFRetain(v16);
          objc_msgSend(v10, "setObject:forKeyedSubscript:", v16, v2);
          v18 = 1;
          v11 = (v11 + 1);
          goto LABEL_24;
        }
      }
      else
      {
        ABDiagnosticsEnabled();
        _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 207, 0, (uint64_t)CFSTR("error opening moving directory to path %@"), v24, v25, v26, v17);
      }
    }
    else
    {
      v20 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v12, &v38);
      ABDiagnosticsEnabled();
      if (v20)
      {
        _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 211, 0, (uint64_t)CFSTR("deleted item at path %@ - it wasn't a directory but we expected one"), v21, v22, v23, v12);
      }
      else
      {
        v35 = v38;
        _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 213, 0, (uint64_t)CFSTR("error encountered while deleting item of unexpected type at path %@ - it wasn't a directory but we expected one. error: %@"), v21, v22, v23, v12);
      }
    }
  }
  v27 = (const void *)objc_msgSend(v10, "objectForKeyedSubscript:", v2);
  if (!v27)
    goto LABEL_30;
  v28 = CFRetain(v27);
  if (!v28)
    goto LABEL_30;
  v16 = v28;
  v18 = 0;
LABEL_24:
  v29 = (const void *)objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("%@/"), v16, v35);
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v29)
    || !v29)
  {
    CFRelease(v16);
    goto LABEL_30;
  }
  v30 = CFRetain(v29);
  CFRelease(v16);
  if (!v30)
  {
LABEL_30:
    v11 = (v11 + 1);
    v32 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:%d"), v2, v11);
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v32, v2);
    v33 = (const void *)objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("%@/"), v32);
    if (v33)
      v30 = CFRetain(v33);
    else
      v30 = 0;
    v31 = v37;
    CPFileBuildDirectoriesToPath();
    goto LABEL_34;
  }
  v31 = v37;
  if (v18)
  {
LABEL_34:
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("Mappings"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11), CFSTR("Generation"));
    v34 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v8, 200, 0, 0);
    if (v34)
      objc_msgSend(v34, "writeToFile:atomically:", v36, 0);
  }
  close(v31);
  return (uint64_t)v30;
}

void ABAddressBookConfigureDelegateOptions(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = objc_msgSend(a2, "objectForKey:", CFSTR("ABAddressBookCreateOptionFamilyMemberAltDSID"));
    v5 = objc_msgSend(a2, "objectForKey:", CFSTR("ABAddressBookCreateOptionFamilyMemberACAccountID"));
    if (v4)
    {
      v6 = v5;
      ABAddressBookPrepareSourceForFamilyDelegate(a1, v4);
      if (v6)
        ABAddressBookPrepareAccountForFamilyDelegate(a1, v4, v6);
    }
  }
}

CFTypeRef ABAddressBookCopyMe(const void *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ABRecordID IntegerProperty;
  ABRecordRef SourceWithRecordID;
  const void *v10;
  ABRecordRef Me;
  CFTypeRef v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[16];

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)", 1244, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1)
    goto LABEL_11;
  IntegerProperty = ABAddressBookGetIntegerProperty((uint64_t)a1);
  if (IntegerProperty == -1)
    goto LABEL_11;
  SourceWithRecordID = ABAddressBookGetSourceWithRecordID(a1, IntegerProperty);
  if (!SourceWithRecordID)
    goto LABEL_11;
  v10 = SourceWithRecordID;
  Me = ABSourceGetMe((uint64_t)SourceWithRecordID);
  if (!Me || (v12 = ABPersonCopyPreferredLinkedPersonForName(Me)) == 0)
  {
    v13 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v13, OS_LOG_TYPE_INFO, "Could not copy the Me card", buf, 2u);
    }
    ABSourceSetMe(v10, 0, 0);
LABEL_11:
    v12 = 0;
  }
  if (ABLogAPIUsage())
  {
    v14 = ABLogStringForPerson(v12);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)", 1265, CFSTR(">> "), (uint64_t)CFSTR("me=%@"), v15, v16, v17, v14);
  }
  return v12;
}

uint64_t ABAddressBookGetIntegerProperty(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)", 907, v3, (uint64_t)CFSTR("%@, key=%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v8 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)", 913, CFSTR(">> "), (uint64_t)CFSTR("value=%i"), v9, v10, v11, v8);
  return v8;
}

uint64_t ABCDBContextRecordForUIDOfType()
{
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t ABCPersonGetRecordForUniqueID(uint64_t result)
{
  if (result)
    return ABCDBContextRecordForUIDOfType();
  return result;
}

ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef addressBook, ABRecordID recordID)
{
  const __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (ABLogAPIUsage())
  {
    v3 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v3);
    v5 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef, ABRecordID)", 754, v4, (uint64_t)CFSTR("%@"), v6, v7, v8, v5);
    CFRelease(v4);
  }
  return (ABRecordRef)ABCPersonGetRecordForUniqueID((uint64_t)addressBook);
}

void freeEntriesStruct(_QWORD *a1)
{
  const void *v2;
  int v3;
  uint64_t (**v4)();
  uint64_t (*v5)();
  const void *v6;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    if (a1[4])
    {
      v3 = ABRecordTypeOfProperty();
      v4 = ABCCallBacksForType(v3 & 0xFFFFFEFF);
      if (v4)
      {
        v5 = v4[1];
        if (v5)
          ((void (*)(_QWORD))v5)(a1[4]);
      }
    }
    v6 = (const void *)a1[5];
    if (v6)
      CFRelease(v6);
    free(a1);
  }
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForName(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef result;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForName(ABRecordRef)", 2769, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  result = _copyPreferredPersonWithPreferredColumnIfExists((uint64_t)a1, 1);
  if (!result)
    return CFRetain(a1);
  return result;
}

CFTypeRef _copyPreferredPersonWithPreferredColumnIfExists(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int IntValue;
  int v7;
  __CFString *SelectPrefix;
  __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  const __CFArray *v13;
  const void *ValueAtIndex;
  CFTypeRef v15;

  v4 = ABCGetAddressBookForRecord();
  if (!v4)
    return 0;
  v5 = v4;
  IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue == -1)
    return 0;
  v7 = IntValue;
  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  v9 = SelectPrefix;
  v10 = a2
      ? CFSTR(" JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredNamePersonID = abp.ROWID)")
      : CFSTR(" JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredImagePersonID = abp.ROWID)");
  CFStringAppend(SelectPrefix, v10);
  v11 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(v5);
  CFRelease(v9);
  if (v11 && (v12 = *(sqlite3_stmt **)(v11 + 8)) != 0)
  {
    sqlite3_bind_int(v12, 1, v7);
    v13 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    v13 = 0;
  }
  if (!v13)
    return 0;
  if (CFArrayGetCount(v13) < 1)
  {
    v15 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v13, 0);
    v15 = CFRetain(ValueAtIndex);
  }
  CFRelease(v13);
  return v15;
}

uint64_t ABCRecordSetValueAndReturnError(const void *a1, uint64_t a2, __CFString *a3, CFAllocatorRef *a4)
{
  _DWORD *v8;
  char **Class;
  int v10;
  int v11;
  const void **p_allocator;
  CFTypeID v13;
  unint64_t v14;
  char v15;
  const void *v16;
  BOOL v17;
  BOOL v18;
  char v19;
  const void *v20;
  const void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *Policy;
  int v27;
  __int128 *v28;
  const __CFNumber *SocialProfileValueFillMissingData;
  const __CFNumber *PhoneNumberValueSanitized;
  CFAllocatorRef v31;
  uint64_t v32;
  ABRecordID RecordID;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  CFAllocatorRef allocator;

  if (!a1)
    return 0;
  v8 = (_DWORD *)ABCGetAddressBookForRecord();
  Class = (char **)CPRecordGetClass();
  if (Class == ABCGroupClass[0])
    v10 = 258;
  else
    v10 = 259;
  if (Class == (char **)ABCPersonClass)
    v11 = 257;
  else
    v11 = v10;
  allocator = 0;
  if (a4)
    p_allocator = (const void **)&allocator;
  else
    p_allocator = 0;
  if (kABPersonInternalUUIDProperty == (_DWORD)a2)
  {
    if (!a3 || (v13 = CFGetTypeID(a3), v13 != CFStringGetTypeID()) || !CFStringGetLength(a3))
      ABCRecordSetValueAndReturnError_cold_1();
    goto LABEL_17;
  }
  if (a3)
  {
LABEL_17:
    v14 = unwrapCPValue((const __CFNumber *)a3, a2, a1);
    v15 = 0;
    goto LABEL_18;
  }
  v14 = 0;
  v15 = 1;
LABEL_18:
  if (v11 == 259)
  {
    if (ABRecordGetRecordID(a1))
      v17 = 1;
    else
      v17 = kABSourceEnabledProperty == (_DWORD)a2;
    v18 = v17 || kABSourceMeIdentifierProperty == (_DWORD)a2;
    v19 = v18;
    if (v18)
    {
      if (kABSourceCapabilitiesProperty != (_DWORD)a2)
        goto LABEL_47;
    }
    else
    {
      ABDiagnosticsEnabled();
      ABLogBacktrace();
      _ABLog2(3, (uint64_t)"_Bool ABCRecordSetValueAndReturnError(ABCRecordRef, ABCPropertyID, CFTypeRef, ABCErrorRef *)", 115, 0, (uint64_t)CFSTR("Someone tried to change property=%i on the local store. Please open a radar to PEP Address Book. %@"), v23, v24, v25, a2);
      if (kABSourceCapabilitiesProperty != (_DWORD)a2)
      {
LABEL_102:
        if (a4)
        {
          v32 = 0;
          if (allocator)
            *a4 = allocator;
          else
            *a4 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
          return v32;
        }
        return 0;
      }
    }
    if (!v8 || !ABAddressBookIgnoresGuardianRestrictions((uint64_t)v8))
    {
      Policy = ABCSourceGetPolicy(a1);
      if (!Policy || (ABPolicyShouldIgnoreCapabilitiesRestrictions((uint64_t)Policy) & 1) == 0)
      {
        v27 = ABRecordGetIntValue((uint64_t)a1, a2) & 0xC;
        if ((v14 & 0xC) != v27 && (v8 || (v14 & 0xC & ~v27) == 0))
        {
          ABPolicyPopulateRecordReadOnlyError(p_allocator, 1, CFSTR("RecordPropertyNotWritable"));
          goto LABEL_102;
        }
      }
    }
    if ((v19 & 1) == 0)
      goto LABEL_102;
LABEL_47:
    v20 = 0;
LABEL_48:
    v22 = 1;
    goto LABEL_49;
  }
  if (v11 == 258)
    v16 = (const void *)ABCGroupCopySource();
  else
    v16 = (const void *)ABCPersonCopySource();
  v20 = v16;
  if (!v16)
    goto LABEL_48;
  v21 = ABCSourceGetPolicy(v16);
  if (v21 && !ABPolicyShouldSetValue((uint64_t)v21, v8, a1, a2, a3, 0, p_allocator))
  {
    if (a4)
    {
      v31 = allocator;
      if (!allocator)
        v31 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
      PhoneNumberValueSanitized = 0;
      SocialProfileValueFillMissingData = 0;
      v32 = 0;
      *a4 = v31;
    }
    else
    {
      PhoneNumberValueSanitized = 0;
      SocialProfileValueFillMissingData = 0;
      v32 = 0;
    }
    goto LABEL_109;
  }
  v22 = 0;
LABEL_49:
  v28 = (__int128 *)CPRecordGetClass();
  if (v28 == ABCPersonClass)
  {
    if (kABCPhoneProperty == (_DWORD)a2)
    {
      ABCPersonClearAddressBookPhoneCacheForPerson((_BOOL8)v8);
      if ((v15 & 1) != 0)
      {
        PhoneNumberValueSanitized = 0;
        SocialProfileValueFillMissingData = 0;
        a3 = 0;
        goto LABEL_73;
      }
      PhoneNumberValueSanitized = (const __CFNumber *)ABPersonCreatePhoneNumberValueSanitized(a3);
      unwrapCPValue(PhoneNumberValueSanitized, a2, a1);
      a3 = (__CFString *)PhoneNumberValueSanitized;
      if (!PhoneNumberValueSanitized)
        goto LABEL_72;
    }
    else
    {
      PhoneNumberValueSanitized = 0;
      if (!a3)
        goto LABEL_72;
    }
    if (kABPersonSocialProfileProperty == (_DWORD)a2)
    {
      SocialProfileValueFillMissingData = (const __CFNumber *)ABCPersonCreateSocialProfileValueFillMissingData(a3);
      unwrapCPValue(SocialProfileValueFillMissingData, a2, a1);
      a3 = (__CFString *)SocialProfileValueFillMissingData;
      goto LABEL_73;
    }
LABEL_72:
    SocialProfileValueFillMissingData = 0;
LABEL_73:
    ABCPersonInvalidateSyntheticPropertiesIfNeeded((uint64_t)a1, a2);
    if (v8)
    {
      v41 = 0x2000;
      if (kABPersonPrefixProperty == (_DWORD)a2
        || kABPersonFirstNameProperty == (_DWORD)a2
        || kABPersonMiddleNameProperty == (_DWORD)a2
        || kABPersonLastNameProperty == (_DWORD)a2
        || kABPersonSuffixProperty == (_DWORD)a2
        || kABPersonKindProperty == (_DWORD)a2
        || kABPersonOrganizationProperty == (_DWORD)a2
        || kABPersonNicknameProperty == (_DWORD)a2
        || kABPersonPreviousFamilyNameProperty == (_DWORD)a2
        || kABPersonFirstNamePhoneticProperty == (_DWORD)a2
        || kABPersonMiddleNamePhoneticProperty == (_DWORD)a2
        || kABPersonLastNamePhoneticProperty == (_DWORD)a2
        || kABPersonOrganizationPhoneticProperty == (_DWORD)a2
        || kABPersonFirstNamePronunciationProperty == (_DWORD)a2
        || kABPersonMiddleNamePronunciationProperty == (_DWORD)a2
        || kABPersonLastNamePronunciationProperty == (_DWORD)a2
        || kABPersonOrganizationPronunciationProperty == (_DWORD)a2
        || (v41 = 0x20000, kABPersonBirthdayProperty == (_DWORD)a2)
        || kABPersonAlternateBirthdayProperty == (_DWORD)a2)
      {
        v8[94] |= v41;
      }
    }
    if ((ABRecordTypeOfProperty() & 0x100) != 0)
      ABCDBContextMultiValueWillChange(a1, a2, (uint64_t)a3);
    if (v8 && ABPersonIsLinkedToMe(v8, a1))
      v8[94] |= 0x40000u;
    goto LABEL_108;
  }
  if (v28 != (__int128 *)ABCSourceClass)
  {
LABEL_53:
    SocialProfileValueFillMissingData = 0;
    PhoneNumberValueSanitized = 0;
    goto LABEL_108;
  }
  if (kABCSourceConstraintsPathProperty == (_DWORD)a2)
  {
    CPRecordSetProperty();
    goto LABEL_53;
  }
  SocialProfileValueFillMissingData = 0;
  if (kABSourceEnabledProperty != (_DWORD)a2 || v14)
  {
    PhoneNumberValueSanitized = 0;
  }
  else
  {
    PhoneNumberValueSanitized = 0;
    if (v8)
    {
      RecordID = ABRecordGetRecordID(a1);
      if (RecordID == ABAddressBookGetIntegerProperty((uint64_t)v8))
        ABAddressBookClearPreferredMeSource((uint64_t)v8, v34, v35, v36, v37, v38, v39, v40);
      SocialProfileValueFillMissingData = 0;
      PhoneNumberValueSanitized = 0;
    }
  }
LABEL_108:
  CPRecordSetProperty();
  v32 = 1;
  if ((v22 & 1) == 0)
LABEL_109:
    CFRelease(v20);
  if (SocialProfileValueFillMissingData)
    CFRelease(SocialProfileValueFillMissingData);
  if (PhoneNumberValueSanitized)
    CFRelease(PhoneNumberValueSanitized);
  return v32;
}

uint64_t ABRecordTypeOfProperty()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t PropertyDescriptor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)", 282, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  PropertyDescriptor = CPRecordGetPropertyDescriptor();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)", 284, CFSTR(">> "), 0, v5, v6, v7, v9);
  if (PropertyDescriptor)
    return *(unsigned int *)(PropertyDescriptor + 32);
  else
    return 0;
}

uint64_t ABCPersonCopySource()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  const void *RecordForUniqueID;

  v0 = ABCGetAddressBookForRecord();
  v1 = CPRecordCopyProperty();
  if (v1)
    v2 = 1;
  else
    v2 = v0 == 0;
  if (!v2)
  {
    if (CPRecordGetProperty() == -1)
    {
      return 0;
    }
    else
    {
      RecordForUniqueID = (const void *)ABCSourceGetRecordForUniqueID(v0);
      v1 = (uint64_t)RecordForUniqueID;
      if (RecordForUniqueID)
        CFRetain(RecordForUniqueID);
    }
  }
  return v1;
}

uint64_t ABCGetAddressBookForRecord()
{
  uint64_t result;

  result = CPRecordGetStore();
  if (result)
    return ABCDBContextGetAddressBook(result);
  return result;
}

uint64_t ABCPersonInvalidateSyntheticPropertiesIfNeeded(uint64_t a1, int a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  if (CPRecordGetProperty())
    return 0;
  v4 = kABCFirstNameProperty == a2 || kABCLastNameProperty == a2;
  v5 = v4 || kABCFirstNamePhoneticProperty == a2;
  v6 = v5 || kABCLastNamePhoneticProperty == a2;
  v7 = v6 || kABCKindProperty == a2;
  v8 = v7 || kABCOrganizationProperty == a2;
  v9 = v8 || kABCOrganizationPhoneticProperty == a2;
  v10 = v9 || kABCNicknameProperty == a2;
  if (!v10 && kABCEmailProperty != a2 && kABCPhoneProperty != a2 && kABCJobTitleProperty != a2)
    return 0;
  ABCPersonInvalidateSyntheticProperties();
  return 1;
}

unint64_t unwrapCPValue(const __CFNumber *a1, int a2, const void *a3)
{
  const __CFNumber *v3;
  int PropertyType;
  uint64_t valuePtr;

  v3 = a1;
  if (kABPersonCreationDateProperty == a2 || kABPersonModificationDateProperty == a2)
    return llround(MEMORY[0x1A1ACB2E4](a1));
  PropertyType = ABRecordGetPropertyType(a3, a2);
  if (PropertyType == 2)
  {
    valuePtr = 0;
    CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return (unint64_t)v3;
}

uint64_t ABRecordGetIntValue(uint64_t a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"int ABRecordGetIntValue(ABRecordRef, ABPropertyID)", 183, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  v8 = ABCRecordCopyValue(a1, a2);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"int ABRecordGetIntValue(ABRecordRef, ABPropertyID)", 185, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

uint64_t ABCDBContextGetAddressBook(uint64_t a1)
{
  uint64_t result;

  result = recordStoreContext(a1);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLike(uint64_t a1, int a2, const __CFString *a3, _QWORD *a4, _QWORD *a5)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(a1, a2, a3, a4, a5);
}

uint64_t _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(uint64_t a1, int a2, const __CFString *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v11;
  _QWORD *v12;
  sqlite3_stmt *v13;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v16;
  const char *v17;
  CFIndex usedBufLen;
  CFRange v19;

  if ((ABPhoneUtilitiesIgnoreMatchingForLostMode() & 1) != 0)
    return 0;
  usedBufLen = 0;
  *a5 = 0;
  *a4 = 0;
  CPRecordStoreGetDatabase();
  v11 = CPSqliteDatabaseStatementForReading();
  v12 = (_QWORD *)recordStoreContext(a1);
  if (v12)
    v12 = (_QWORD *)*v12;
  ABRegulatoryLogReadContactsData((uint64_t)v12);
  if (v11)
  {
    v13 = *(sqlite3_stmt **)(v11 + 8);
    if (v13)
    {
      sqlite3_bind_int(v13, 1, a2);
      Length = CFStringGetLength(a3);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      v16 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 2, 0x722A516DuLL);
      if (v16)
      {
        v17 = (const char *)v16;
        v19.location = 0;
        v19.length = Length;
        CFStringGetBytes(a3, v19, 0x8000100u, 0, 0, v16, MaximumSizeForEncoding, &usedBufLen);
        *(_WORD *)&v17[usedBufLen] = 37;
        sqlite3_bind_text(*(sqlite3_stmt **)(v11 + 8), 2, v17, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        CPSqliteStatementSendResults();
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return 0;
}

uint64_t recordStoreContext(uint64_t a1)
{
  uint64_t Context;

  if (!a1)
    return 0;
  Context = CPRecordStoreGetContext();
  if (!Context)
  {
    Context = (uint64_t)malloc_type_calloc(1uLL, 0x68uLL, 0xE0040B79FBFCFuLL);
    CPRecordStoreSetContext();
  }
  return Context;
}

uint64_t ABPhoneUtilitiesIgnoreMatchingForLostMode()
{
  pthread_once(&init_lost_mode_once, _ABPhoneUtilitiesInitializeLostMode);
  return _ignoreMatchingForLostMode;
}

uint64_t (**ABCCallBacksForType(int a1))()
{
  int v1;

  if ((a1 & 0x100) != 0)
    return &ABCMultiValueTypeCallBacks;
  v1 = a1 - 1;
  if ((a1 - 1) < 5 && ((0x1Bu >> v1) & 1) != 0)
    return (uint64_t (**)())*(&off_1E3CA3330 + v1);
  printf("Can't return type callbacks for %d\n", a1);
  return (uint64_t (**)())&ABUnknownTypeCallbacks;
}

uint64_t ABCSourceGetRecordForUniqueID(uint64_t result)
{
  if (result)
    return ABCDBContextRecordForUIDOfType();
  return result;
}

ABRecordRef ABSourceGetMe(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ABRecordID IntValue;
  ABRecordID v7;
  const void *AddressBook;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABSourceGetMe(ABRecordRef)", 1048, v2, 0, v3, v4, v5, (uint64_t)v10);
    CFRelease(v2);
  }
  IntValue = ABRecordGetIntValue(a1, kABSourceMeIdentifierProperty);
  if (IntValue == -1)
    return 0;
  v7 = IntValue;
  AddressBook = (const void *)ABRecordGetAddressBook();
  return ABAddressBookGetPersonWithRecordID(AddressBook, v7);
}

uint64_t ABRecordGetAddressBook()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)", 195, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  v4 = ABCGetAddressBookForRecord();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)", 197, CFSTR(">> "), 0, v5, v6, v7, v9);
  return v4;
}

ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef addressBook, ABRecordID sourceID)
{
  const __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (ABLogAPIUsage())
  {
    v3 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v3);
    v5 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef, ABRecordID)", 295, v4, (uint64_t)CFSTR("%@"), v6, v7, v8, v5);
    CFRelease(v4);
  }
  return (ABRecordRef)ABCSourceGetRecordForUniqueID((uint64_t)addressBook);
}

uint64_t ABAddressBookSetUsedByContacts(uint64_t result, int a2)
{
  int v2;

  if (result)
  {
    if (a2)
      v2 = 0x400000;
    else
      v2 = 0;
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFFBFFFFF | v2;
  }
  return result;
}

CFTypeRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(__CFArray *a1, void *a2, int a3)
{
  void *v4;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex Count;
  CFIndex v23;
  CFIndex v24;
  ABRecordID ValueAtIndex;
  ABRecordRef PersonWithRecordID;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFRunLoopRef Current;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const __CFDictionary *Mutable;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFArrayRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t RecordID;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  id obj;
  id obja;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[5];
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[128];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v4 = a2;
  v6 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", kABUserActivityUserInfoVersionKey);
  v7 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoUnifiedKey), "BOOLValue");
  if (!objc_msgSend(v6, "isEqual:", &unk_1E3CB9648))
  {
LABEL_95:
    if (ABDiagnosticsEnabled())
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)", 465, 0, (uint64_t)CFSTR("Activity continuity - Failed to find person"), v75, v76, v77, RecordID);
    return 0;
  }
  v8 = objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoInternalUUIDKey);
  if (v8)
  {
    v9 = v8;
    v10 = ABAddressBookCopyPersonMatchingInternalUUID((uint64_t)a1, v8);
    if (v10)
    {
      v11 = v10;
      CFAutorelease(v10);
      if (ABDiagnosticsEnabled())
      {
        ABRecordGetRecordID(v11);
        _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByInternalUUID(ABAddressBookRef, NSDictionary *)", 421, 0, (uint64_t)CFSTR("Activity continuity - Found person with internal UUID = %@, recordID = %i"), v12, v13, v14, v9);
      }
      goto LABEL_87;
    }
  }
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  obj = (id)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoCardDAVUUIDsKey);
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v109, 16);
  v80 = v4;
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v106;
    while (2)
    {
      v18 = 0;
      v81 = v16;
      do
      {
        if (*(_QWORD *)v106 != v17)
          objc_enumerationMutation(obj);
        v19 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * v18);
        v20 = ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(a1);
        if (v20)
        {
          v21 = v20;
          Count = CFArrayGetCount(v20);
          if (Count >= 1)
          {
            v23 = Count;
            v24 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v21, v24);
              PersonWithRecordID = ABAddressBookGetPersonWithRecordID(a1, ValueAtIndex);
              if (PersonWithRecordID)
                break;
              if (v23 == ++v24)
                goto LABEL_17;
            }
            v11 = PersonWithRecordID;
            CFRelease(v21);
            if (ABDiagnosticsEnabled())
            {
              ABRecordGetRecordID(v11);
              _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByExternalUUID(ABAddressBookRef, NSDictionary *)", 400, 0, (uint64_t)CFSTR("Activity continuity - Found person with external UUID = %@, recordID = %i"), v30, v31, v32, v19);
            }
            goto LABEL_87;
          }
LABEL_17:
          CFRelease(v21);
          v16 = v81;
        }
        ++v18;
      }
      while (v18 != v16);
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v109, 16);
      v4 = v80;
      if (v16)
        continue;
      break;
    }
  }
  if ((objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoIsOrganizationKey), "BOOLValue") & 1) != 0)
  {
    v27 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoOrganizationNameKey[0]);
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v29 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoFirstNameKey);
    v28 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoLastNameKey[0]);
    v27 = 0;
  }
  v33 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoEmailAddressesKey);
  v34 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoPhoneNumbersKey);
  if (objc_msgSend(v29, "length"))
    v35 = (uint64_t)v29;
  else
    v35 = 0;
  if (objc_msgSend(v28, "length"))
    v36 = (uint64_t)v28;
  else
    v36 = 0;
  v98 = 0;
  v99 = 0;
  if (objc_msgSend(v27, "length"))
    v37 = (uint64_t)v27;
  else
    v37 = 0;
  v96 = 0;
  v97 = 0;
  v95 = 0;
  Current = CFRunLoopGetCurrent();
  v94[0] = MEMORY[0x1E0C809B0];
  v94[1] = 3221225472;
  v94[2] = ___findPersonByWeightedSearch_block_invoke;
  v94[3] = &__block_descriptor_40_e42_v28__0__ABSearchOperation_8__NSArray_16B24l;
  v94[4] = Current;
  v39 = (void *)objc_opt_new();
  objc_msgSend(v39, "setMaxConcurrentOperationCount:", 1);
  obja = (id)v35;
  _addOperation_0(v35, kABPersonFirstNameProperty, (uint64_t)&v99, (uint64_t)v94, (uint64_t)a1, v39, a3);
  v82 = v36;
  _addOperation_0(v36, kABPersonLastNameProperty, (uint64_t)&v98, (uint64_t)v94, (uint64_t)a1, v39, a3);
  _addOperation_0(v37, kABPersonOrganizationProperty, (uint64_t)&v97, (uint64_t)v94, (uint64_t)a1, v39, a3);
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v40 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v90, &v105, 16);
  if (v40)
  {
    v41 = v40;
    v42 = *(_QWORD *)v91;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v91 != v42)
          objc_enumerationMutation(v33);
        _addOperation_0(*(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * i), kABPersonEmailProperty, (uint64_t)&v96, (uint64_t)v94, (uint64_t)a1, v39, a3);
      }
      v41 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v90, &v105, 16);
    }
    while (v41);
  }
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v44 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v86, v104, 16);
  if (v44)
  {
    v45 = v44;
    v46 = *(_QWORD *)v87;
    do
    {
      for (j = 0; j != v45; ++j)
      {
        if (*(_QWORD *)v87 != v46)
          objc_enumerationMutation(v34);
        _addOperation_0(*(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * j), kABPersonPhoneProperty, (uint64_t)&v95, (uint64_t)v94, (uint64_t)a1, v39, a3);
      }
      v45 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v86, v104, 16);
    }
    while (v45);
  }
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v48 = (void *)objc_msgSend(v39, "operations");
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
  if (v49)
  {
    v50 = v49;
    while (2)
    {
      v51 = *(_QWORD *)v101;
LABEL_51:
      v52 = 0;
      while (1)
      {
        if (*(_QWORD *)v101 != v51)
          objc_enumerationMutation(v48);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v100 + 1) + 8 * v52), "isFinished"))
          break;
        if (v50 == ++v52)
        {
          v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
          if (v50)
            goto LABEL_51;
          goto LABEL_59;
        }
      }
      v53 = (void *)objc_opt_new();
      CFRunLoopRunInMode(kABSearchOperationRunloopMode, 0.1, 1u);

      v100 = 0u;
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      v48 = (void *)objc_msgSend(v39, "operations");
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
      if (v50)
        continue;
      break;
    }
  }
LABEL_59:

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v55 = (void *)objc_opt_new();
  v85 = 0;
  if (obja && v82)
  {
    if (v99 && v98)
    {
      objc_msgSend(v99, "intersectSet:");

      v98 = v99;
    }
    else
    {

      v99 = 0;
      v98 = 0;
    }
  }
  _countInstancesOfRecord_0(Mutable, v99, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v98, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v97, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v96, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v95, &v85, v55);
  if ((unint64_t)objc_msgSend(v55, "count") < 2)
  {
    v11 = (CFTypeRef)objc_msgSend(v55, "lastObject");
    if (v11)
      goto LABEL_83;
  }
  else
  {
    v56 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
    if (v57)
    {
      v58 = v57;
      v59 = *(_QWORD *)v101;
      do
      {
        for (k = 0; k != v58; ++k)
        {
          if (*(_QWORD *)v101 != v59)
            objc_enumerationMutation(v55);
          RecordID = ABRecordGetRecordID(*(ABRecordRef *)(*((_QWORD *)&v100 + 1) + 8 * k));
          objc_msgSend(v56, "appendFormat:", CFSTR("%i "));
        }
        v58 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
      }
      while (v58);
    }
    if (ABDiagnosticsEnabled())
    {
      v61 = objc_msgSend(v55, "count");
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)", 346, 0, (uint64_t)CFSTR("Activity continuity - Found %lu person(s) by weighted search, recordIDs = %@"), v62, v63, v64, v61);
    }
    if (objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", kABUserActivityUserInfoUnifiedKey), "BOOLValue"))
    {
      v65 = ABPersonCopyArrayOfAllLinkedPeople((ABRecordRef)objc_msgSend(v55, "lastObject"));
      if (objc_msgSend(v55, "isSubsetOfSet:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v65)))
      {
        v11 = ABPersonCopyPreferredLinkedPersonForName((const void *)objc_msgSend(v55, "lastObject"));
        CFAutorelease(v11);
      }
      else
      {
        v11 = 0;
      }

      if (v11)
      {
LABEL_83:
        if (ABDiagnosticsEnabled())
        {
          v66 = ABRecordGetRecordID(v11);
          CFDictionaryGetValue(Mutable, v11);
          _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)", 364, 0, (uint64_t)CFSTR("Activity continuity - Found person by weighted search, recordID = %i, matchCount = %i"), v67, v68, v69, v66);
        }
      }
    }
    else
    {
      v11 = 0;
    }
  }

  if (Mutable)
    CFRelease(Mutable);
LABEL_87:
  if (v11)
    v70 = v7;
  else
    v70 = 0;
  if (v70 == 1)
  {
    v11 = ABPersonCopyPreferredLinkedPersonForName(v11);
    if (ABDiagnosticsEnabled())
    {
      v71 = ABRecordGetRecordID(v11);
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)", 459, 0, (uint64_t)CFSTR("Activity continuity - Using preferred linked person, recordID = %i"), v72, v73, v74, v71);
    }
    CFAutorelease(v11);
  }
  if (!v11)
    goto LABEL_95;
  return v11;
}

const void *_copyPersonMatchingPrivateProperty(uint64_t a1, int a2, uint64_t a3)
{
  const __CFString *v3;
  CFStringRef v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  const void *v7;

  if (!a3)
    return 0;
  v3 = ABPersonNameForProperty(a2);
  v4 = CFStringCreateWithFormat(0, 0, CFSTR("WHERE %@ = ?"), v3);
  v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v4);
  if (!v5)
    return 0;
  if (CFArrayGetCount(v5) < 1)
  {
    v7 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    v7 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

void loadGUIDProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  const __CFAllocator *v7;
  const __CFUUID *v8;
  const __CFUUID *v9;

  if (CPRecordGetID() != -1)
  {
    v6 = (const void *)_ABCCreateSingleStringValue(a1, a2, a3);
    if (!v6)
      return;
LABEL_6:
    CPRecordInitializeProperty();
    CFRelease(v6);
    return;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v8)
  {
    v9 = v8;
    v6 = CFUUIDCreateString(v7, v8);
    CFRelease(v9);
    if (v6)
      goto LABEL_6;
  }
}

void loadSingleDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v3;
  const __CFString *v4;
  CFDateRef v5;
  CFDateRef v6;

  v3 = (const __CFString *)_ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    v4 = v3;
    v5 = _ABCCreateDateFromCFString(v3);
    if (v5)
    {
      v6 = v5;
      CPRecordInitializeProperty();
      CFRelease(v6);
    }
    CFRelease(v4);
  }
}

void _ABCLoadSingleString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v4;

  v3 = _ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    v4 = (const void *)v3;
    CPRecordInitializeProperty();
    CFRelease(v4);
  }
}

uint64_t _ABCCreateSingleStringValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableStringRef MutableCopy;
  __CFString *v5;
  const char *v6;
  uint64_t (*v7)(uint64_t);
  const __CFString *v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  int ID;
  uint64_t v12;

  if (!a1)
    return 0;
  if (!a3)
    return 0;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT "));
  if (!MutableCopy)
    return 0;
  v5 = MutableCopy;
  v6 = *(const char **)CPRecordGetClass();
  v7 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
  v8 = v7 ? (const __CFString *)v7(a2) : 0;
  CFStringAppend(v5, v8);
  CFStringAppend(v5, CFSTR(" FROM "));
  CFStringAppendCString(v5, v6, 0x8000100u);
  CFStringAppend(v5, CFSTR(" WHERE ROWID = ?;"));
  v9 = CPSqliteConnectionStatementForSQL();
  CFRelease(v5);
  if (!v9)
    return 0;
  v10 = *(sqlite3_stmt **)(v9 + 8);
  if (!v10)
    return 0;
  ID = CPRecordGetID();
  sqlite3_bind_int(v10, 1, ID);
  v12 = CPSqliteStatementCopyStringResult();
  CPSqliteStatementReset();
  return v12;
}

const __CFString *ABCPersonNameForProperty(int a1)
{
  if (kABCPhoneProperty == a1)
    return CFSTR("Phone");
  if (kABCEmailProperty == a1)
    return CFSTR("Email");
  if (kABCFirstNameProperty == a1)
    return CFSTR("First");
  if (kABCFirstNamePhoneticProperty == a1)
    return CFSTR("FirstPhonetic");
  if (kABCFirstNamePronunciationProperty == a1)
    return CFSTR("FirstPronunciation");
  if (kABCMiddleNameProperty == a1)
    return CFSTR("Middle");
  if (kABCMiddleNamePhoneticProperty == a1)
    return CFSTR("MiddlePhonetic");
  if (kABCMiddleNamePronunciationProperty == a1)
    return CFSTR("MiddlePronunciation");
  if (kABCLastNameProperty == a1)
    return CFSTR("Last");
  if (kABCLastNamePhoneticProperty == a1)
    return CFSTR("LastPhonetic");
  if (kABCLastNamePronunciationProperty == a1)
    return CFSTR("LastPronunciation");
  if (kABCAddressingGrammarProperty == a1)
    return CFSTR("AddressingGrammar");
  if (kABCOrganizationProperty == a1)
    return CFSTR("Organization");
  if (kABCOrganizationPhoneticProperty == a1)
    return CFSTR("OrganizationPhonetic");
  if (kABCOrganizationPronunciationProperty == a1)
    return CFSTR("OrganizationPronunciation");
  if (kABCDepartmentProperty == a1)
    return CFSTR("Department");
  if (kABCDateProperty == a1)
    return CFSTR("Date");
  if (kABCInstantMessageProperty == a1)
    return CFSTR("IM");
  if (kABCNoteProperty == a1)
    return CFSTR("Note");
  if (kABCImageProperty == a1)
    return CFSTR("Image");
  if (kABCKindProperty == a1)
    return CFSTR("Kind");
  if (kABCSoundProperty == a1)
    return CFSTR("Sound");
  if (kABCBirthdayProperty == a1)
    return CFSTR("Birthday");
  if (kABCJobTitleProperty == a1)
    return CFSTR("JobTitle");
  if (kABCNicknameProperty == a1)
    return CFSTR("Nickname");
  if (kABCPreviousFamilyNameProperty == a1)
    return CFSTR("PreviousFamilyName");
  if (kABCPrefixProperty == a1)
    return CFSTR("Prefix");
  if (kABCSuffixProperty == a1)
    return CFSTR("Suffix");
  if (kABCURLProperty == a1)
    return CFSTR("URL");
  if (kABCRelatedNamesProperty == a1)
    return CFSTR("RelatedNames");
  if (kABCFirstSortProperty == a1)
    return CFSTR("FirstSort");
  if (kABCLastSortProperty == a1)
    return CFSTR("LastSort");
  if (kABCCreationDateProperty == a1)
    return CFSTR("CreationDate");
  if (kABCModificationDateProperty == a1)
    return CFSTR("ModificationDate");
  if (kABCCompositeNameFallbackProperty == a1)
    return CFSTR("CompositeNameFallback");
  if (kABCSyntheticPropertiesReset == a1)
    return CFSTR("SyntheticPropertiesReset");
  if (kABCPersonExternalIdentifierProperty == a1)
    return CFSTR("ExternalIdentifier");
  if (kABCPersonStoreIDProperty == a1)
    return CFSTR("StoreID");
  if (kABCPersonExternalModificationTagProperty == a1)
    return CFSTR("ExternalModificationTag");
  if (kABCPersonExternalUUIDProperty == a1)
    return CFSTR("ExternalUUID");
  if (kABCPersonImageURIProperty == a1)
    return CFSTR("ImageURI");
  if (kABCPersonStoreReferenceProperty == a1)
    return CFSTR("StoreReference");
  if (kABCAddressProperty == a1)
    return CFSTR("Address");
  if (kABCPersonDisplayNameProperty == a1)
    return CFSTR("DisplayName");
  if (kABCFirstSortSectionProperty == a1)
    return CFSTR("FirstSortSection");
  if (kABCLastSortSectionProperty == a1)
    return CFSTR("LastSortSection");
  if (kABCFirstSortLanguageIndexSortProperty == a1)
    return CFSTR("FirstSortLanguageIndex");
  if (kABCLastSortLanguageIndexSortProperty == a1)
    return CFSTR("LastSortLanguageIndex");
  if (kABPersonSearchProperty == a1)
    return CFSTR("Search");
  if (kABPersonNameOnlySearchProperty == a1)
    return CFSTR("NameOnlySearch");
  if (kABPersonExternalRepresentationProperty == a1)
    return CFSTR("ExternalRepresentation");
  if (kABPersonLinkProperty == a1)
    return CFSTR("PersonLink");
  if (kABPersonIsPreferredNameProperty == a1)
    return CFSTR("IsPreferredName");
  if (kABCPersonSocialProfileProperty == a1)
    return CFSTR("SocialProfile");
  if (kABCPersonContentExtensionsProperty == a1)
    return CFSTR("GeoData");
  if (kABCPersonPhonemeDataProperty == a1)
    return CFSTR("PhonemeData");
  if (kABCPersonAlternateBirthdayProperty == a1)
    return CFSTR("AlternateBirthday");
  if (kABCPersonMapsDataProperty == a1)
    return CFSTR("MapsData");
  if (kABCPersonInternalUUIDProperty == a1)
    return CFSTR("guid");
  if (kABCPersonPreferredLikenessSourceProperty == a1)
    return CFSTR("PreferredLikenessSource");
  if (kABCPersonPreferredPersonaIdentifierProperty == a1)
    return CFSTR("PreferredPersonaIdentifier");
  if (kABCChangesProperty == a1)
    return CFSTR("Changes");
  if (kABCPersonLinkUUIDProperty == a1)
    return CFSTR("LinkUUID");
  if (kABCPersonImageDataProperty == a1)
    return CFSTR("ImageData");
  if (kABCPersonThumbnailDataProperty == a1)
    return CFSTR("ThumbnailData");
  if (kABCPersonImageCropRectProperty == a1)
    return CFSTR("ImageCropRect");
  if (kABCPersonFullscreenImageDataProperty == a1)
    return CFSTR("FullscreenImageData");
  if (kABCPersonSyncImageDataProperty == a1)
    return CFSTR("SyncImageData");
  if (kABCPersonIsPreferredImageProperty == a1)
    return CFSTR("IsPreferredImage");
  if (kABCPersonHasImageDataProperty == a1)
    return CFSTR("HasImageData");
  if (kABCPersonPreferredChannelProperty == a1)
    return CFSTR("PreferredChannel");
  if (kABCPersonDowntimeWhitelistProperty == a1)
    return CFSTR("DowntimeWhitelist");
  if (kABCPersonImageTypeProperty == a1)
    return CFSTR("ImageType");
  if (kABCPersonImageHashProperty == a1)
    return CFSTR("ImageHash");
  if (kABCPersonMemojiMetadataProperty == a1)
    return CFSTR("MemojiMetadata");
  if (kABCPersonWallpaperProperty == a1)
    return CFSTR("Wallpaper");
  if (kABCPersonWallpaperMetadataProperty == a1)
    return CFSTR("WallpaperMetadata");
  if (kABCPersonWatchWallpaperImageDataProperty == a1)
    return CFSTR("WatchWallpaperImageData");
  if (kABCPersonImageBackgroundColorsDataProperty == a1)
    return CFSTR("ImageBackgroundColorsData");
  if (kABCPersonDisplayFlagsProperty == a1)
    return CFSTR("DisplayFlags");
  if (kABCPersonSensitiveContentConfigurationProperty == a1)
    return CFSTR("SensitiveContentConfiguration");
  if (kABCPersonWallpaperURIProperty == a1)
    return CFSTR("WallpaperURI");
  if (kABCPersonImageSyncFailedTimeProperty == a1)
    return CFSTR("ImageSyncFailedTime");
  if (kABCPersonWallpaperSyncFailedTimeProperty == a1)
    return CFSTR("WallpaperSyncFailedTime");
  return CFSTR("UNKNOWN_PROPERTY");
}

const __CFString *ABCStoreNameForProperty(int a1)
{
  if (kABCSourceNameProperty == a1)
    return CFSTR("Name");
  if (kABCSourceExternalIdentifierProperty == a1)
    return CFSTR("ExternalIdentifier");
  if (kABCSourceTypeProperty == a1)
    return CFSTR("Type");
  if (kABCSourceConstraintsPathProperty == a1)
    return CFSTR("ConstraintsPath");
  if (kABCSourceExternalModificationTagProperty == a1)
    return CFSTR("ExternalModificationTag");
  if (kABCSourceExternalSyncTagProperty == a1)
    return CFSTR("ExternalSyncTag");
  if (kABCSourceAccountIDProperty == a1)
    return CFSTR("AccountID");
  if (kABCSourcePolicyProperty == a1)
    return CFSTR("Policy");
  if (kABCSourceEnabledProperty == a1)
    return CFSTR("Enabled");
  if (kABCSourceSyncDataProperty == a1)
    return CFSTR("SyncData");
  if (kABCSourceMeIdentifierProperty == a1)
    return CFSTR("MeIdentifier");
  if (kABCSourceCapabilitiesProperty == a1)
    return CFSTR("Capabilities");
  if (kABCSourceInternalUUIDProperty == a1)
    return CFSTR("guid");
  if (kABCSourceLastSyncDateProperty == a1)
    return CFSTR("LastSyncDate");
  if (kABCSourceProviderIdentifierProperty == a1)
    return CFSTR("ProviderIdentifier");
  if (kABCSourceProviderMetadataProperty == a1)
    return CFSTR("ProviderMetadata");
  return 0;
}

const __CFString *ABPersonNameForProperty(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonNameForProperty(ABPropertyID)", 1923, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonNameForProperty(a1);
}

void *ABGetCharacterSetWithPattern(void *result)
{
  if (result)
    return (void *)objc_msgSend((id)objc_msgSend(result, "_cn_resultWithAllCharacters:", &__block_literal_global_9), "pointerValue");
  return result;
}

CFMutableStringRef ABPersonCopyCompositeName(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFMutableStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeName(ABRecordRef)", 1479, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  v6 = ABPersonCopyCompositeNameIgnoringOrganization(a1, 0);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeName(ABRecordRef)", 1481, CFSTR(">> "), 0, v7, v8, v9, v11);
  return v6;
}

CFMutableStringRef ABPersonCopyCompositeNameIgnoringOrganization(const void *a1, char a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFMutableStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)", 1402, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  v8 = ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(a1, a2, 0);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)", 1404, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

CFMutableStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(const void *a1, char a2, char a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int CompositeNameFormatAndDelimiterForRecord;
  const __CFNumber *v11;
  CFMutableStringRef Mutable;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const __CFString *v22;
  CFTypeRef cf;

  if (ABLogAPIUsage())
  {
    v22 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)", 1409, v6, 0, v7, v8, v9, (uint64_t)v22);
    CFRelease(v6);
  }
  cf = 0;
  CompositeNameFormatAndDelimiterForRecord = ABPersonGetCompositeNameFormatAndDelimiterForRecord(a1, (CFStringRef *)&cf);
  v11 = (const __CFNumber *)ABRecordCopyValue(a1, kABPersonKindProperty);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if ((a2 & 1) != 0)
  {
LABEL_4:
    ABPersonAppendNameParts(a1, 31, Mutable, CompositeNameFormatAndDelimiterForRecord, (const __CFString *)cf, 0);
    goto LABEL_10;
  }
  if (CFNumberCompare(v11, kABPersonKindPerson, 0))
  {
    ABPersonAppendNamePartToCompositeName(a1, kABPersonOrganizationProperty, Mutable, (const __CFString *)cf, 0);
    if (CFStringGetLength(Mutable))
      goto LABEL_10;
    goto LABEL_4;
  }
  ABPersonAppendNameParts(a1, 31, Mutable, CompositeNameFormatAndDelimiterForRecord, (const __CFString *)cf, 0);
  if (!CFStringGetLength(Mutable))
    ABPersonAppendNamePartToCompositeName(a1, kABPersonOrganizationProperty, Mutable, (const __CFString *)cf, 0);
LABEL_10:
  if ((a3 & 1) == 0 && !CFStringGetLength(Mutable))
  {
    v13 = (const __CFString *)ABRecordCopyValue(a1, kABPersonNicknameProperty);
    if (v13)
    {
      v14 = v13;
      if (CFStringGetLength(v13) >= 1)
        CFStringAppend(Mutable, v14);
      CFRelease(v14);
    }
  }
  if (!CFStringGetLength(Mutable))
  {
    v15 = (const __CFString *)ABRecordCopyValue(a1, kABPersonDisplayNameProperty);
    if (v15)
    {
      v16 = v15;
      if (CFStringGetLength(v15) >= 1)
        CFStringAppend(Mutable, v16);
      CFRelease(v16);
    }
  }
  if (!CFStringGetLength(Mutable))
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)", 1464, CFSTR(">> "), 0, v17, v18, v19, v21);
  return Mutable;
}

uint64_t ABPersonGetCompositeNameFormatAndDelimiterForRecord(const void *a1, CFStringRef *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  const __CFString *v16;
  CFIndex v17;
  CFIndex v18;
  __CFString *Mutable;
  __CFString *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  const __CFString *v27;

  if (ABLogAPIUsage())
  {
    v27 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)", 1282, v4, 0, v5, v6, v7, (uint64_t)v27);
    CFRelease(v4);
  }
  v8 = __personCompositeNameFormat;
  if (!a1)
  {
    v16 = CFSTR(" ");
    goto LABEL_36;
  }
  v9 = ABKatakanaCharacterSet();
  v10 = ABChineseJapaneseKoreanCharacterSet();
  v11 = (const __CFString *)ABRecordCopyValue(a1, kABPersonFirstNameProperty);
  v12 = (const __CFString *)ABRecordCopyValue(a1, kABPersonMiddleNameProperty);
  v13 = (const __CFString *)ABRecordCopyValue(a1, kABPersonLastNameProperty);
  if (v11)
  {
    Length = CFStringGetLength(v11);
    if (v12)
    {
LABEL_6:
      v15 = CFStringGetLength(v12);
      goto LABEL_10;
    }
  }
  else
  {
    Length = 0;
    if (v12)
      goto LABEL_6;
  }
  v15 = 0;
LABEL_10:
  v17 = v15 + Length;
  if (v13)
    v18 = CFStringGetLength(v13);
  else
    v18 = 0;
  Mutable = CFStringCreateMutable(0, v17 + v18);
  if (Mutable)
  {
    v20 = Mutable;
    if (v11)
      CFStringAppend(Mutable, v11);
    if (v12)
      CFStringAppend(v20, v12);
    if (v13)
      CFStringAppend(v20, v13);
    v16 = CFSTR(" ");
    if (CFStringGetLength(v20) >= 1)
    {
      if (ABContentsExclusivelyInCharacterSet(v20, v9))
      {
        v16 = CFSTR("・");
        v8 = 1;
      }
      else
      {
        v21 = ABContentsExclusivelyInCharacterSet(v20, v10);
        if (v21)
          v8 = 1;
        else
          v8 = v8;
        if (v21)
          v16 = &stru_1E3CA4E68;
      }
    }
    CFRelease(v20);
    if (!v11)
      goto LABEL_32;
  }
  else
  {
    v16 = CFSTR(" ");
    if (!v11)
      goto LABEL_32;
  }
  CFRelease(v11);
LABEL_32:
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
LABEL_36:
  if (a2)
    *a2 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)", 1327, CFSTR(">> "), 0, v22, v23, v24, v26);
  return v8;
}

uint64_t ABContentsExclusivelyInCharacterSet(void *a1, uint64_t a2)
{
  _QWORD v5[5];

  if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13848] + 16))() & 1) != 0)
    return 1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __ABContentsExclusivelyInCharacterSet_block_invoke;
  v5[3] = &__block_descriptor_40_e13__24__0r_S8Q16l;
  v5[4] = a2;
  return objc_msgSend((id)objc_msgSend(a1, "_cn_resultWithAllCharacters:", v5), "BOOLValue");
}

uint64_t ABKatakanaCharacterSet()
{
  if (ABKatakanaCharacterSet___onceToken != -1)
    dispatch_once(&ABKatakanaCharacterSet___onceToken, &__block_literal_global_2_0);
  return ABKatakanaCharacterSet___katakanaSet;
}

uint64_t ABChineseJapaneseKoreanCharacterSet()
{
  if (ABChineseJapaneseKoreanCharacterSet___onceToken != -1)
    dispatch_once(&ABChineseJapaneseKoreanCharacterSet___onceToken, &__block_literal_global_4);
  return ABChineseJapaneseKoreanCharacterSet___CJKSet;
}

const void *ABAddressBookCopyPersonMatchingInternalUUID(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyPersonMatchingInternalUUID(ABAddressBookRef, CFStringRef)", 2094, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return _copyPersonMatchingPrivateProperty(a1, kABPersonInternalUUIDProperty, a2);
}

void *ABPersonGetUserActivityUserInfo(const void *a1, int a2)
{
  return ABPersonGetUserActivityUserInfoWithInternalUUID(a1, a2, 1);
}

ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatForRecord(ABRecordRef record)
{
  return ABPersonGetCompositeNameFormatAndDelimiterForRecord(record, 0);
}

uint64_t ABCAddressBookRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kABCAddressBookTypeID = result;
  return result;
}

void _registerForDistributedNotification()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)ABDatabaseChangedByOtherProcess, CFSTR("__ABDataBaseChangedByOtherProcessNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t ABCDBContextCollectMultiValueUUID(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 40) = cf;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueLabel(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 24) = cf;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueValue(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (a2 == 1 && cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 32) = cf;
  return 1;
}

uint64_t ABSourceIsContentReadonly(uint64_t a1)
{
  return ABSourceIsContentReadonlyIncludingGuardianRestrictions(a1, 1);
}

CFTypeRef ABAddressBookFindPersonMatchingUserActivityUserInfo(__CFArray *a1, void *a2)
{
  return _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(a1, a2, 1);
}

uint64_t ABAddressBookGetSequenceNumber(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SequenceNumber;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetSequenceNumber(ABAddressBookRef)", 953, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"int ABAddressBookGetSequenceNumber(ABAddressBookRef)", 959, CFSTR(">> "), (uint64_t)CFSTR("sequenceNumber=%i"), v9, v10, v11, SequenceNumber);
  return SequenceNumber;
}

uint64_t _initializeConnection()
{
  CPSqliteConnectionPerformSQL();
  return CPSqliteConnectionPerformSQL();
}

uint64_t _initializeConnection_0(_QWORD *a1, uint64_t a2)
{
  void *v4;

  ABRegisterSQLiteICUTokenizer(*(sqlite3 **)(a2 + 8));
  if (ABLogSqliteTrace())
    sqlite3_trace_v2(*(sqlite3 **)(a2 + 8), 3u, (int (__cdecl *)(unsigned int, void *, void *, void *))_abSqliteTraceCallback, a1);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_normalize_date", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteNormalizeDate, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_repair_guid", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteRepairUUID, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_generate_guid", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteGenerateUUID, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "has_sort_key_prefix", 3, 1, 0, MEMORY[0x1E0CFA898], 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_katakana_exclusively", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteKatakanaExclusively, 0, 0);
  v4 = (void *)a1[33];
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_update_value_from_trigger", 3, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCDBUpdatePersonValueFromTrigger, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_transform_string", -1, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteTransformString, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_is_store_allowed", 4, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteIsStoreAllowed, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_compare_phone_numbers", 4, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteComparePhoneNumbers, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_allowed_preferred_contact", 4, 1, v4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteSelectPreferredContact_Step, (void (__cdecl *)(sqlite3_context *))ABSqliteSelectPreferredContact_Final);
  return sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_collect_value_row_map", 3, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABValueRowMapCollect, 0, 0);
}

uint64_t ABRegisterSQLiteICUTokenizer(sqlite3 *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  sqlite3_stmt *ppStmt;

  if (!gFTSEabled)
    return 101;
  ppStmt = 0;
  result = sqlite3_db_config(a1, 1004, 1, 0);
  if (!(_DWORD)result)
  {
    result = sqlite3_prepare_v2(a1, "SELECT fts3_tokenizer(?, ?)", -1, &ppStmt, 0);
    if (!(_DWORD)result)
    {
      v3 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040CD2B339FuLL);
      v5 = v3;
      *(_DWORD *)v3 = 0;
      v3[1] = ABCFFTSTokenizerCreate;
      v3[2] = ABCFFTSTokenizerDestroy;
      v3[3] = ABCFFTSTokenizerOpen;
      v3[4] = ABCFFTSTokenizerClose;
      v3[5] = ABCFFTSTokenizerNext;
      v3[6] = a1;
      sqlite3_bind_text(ppStmt, 1, "ab_cf_tokenizer", -1, 0);
      sqlite3_bind_blob(ppStmt, 2, &v5, 8, 0);
      v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x6004073DA8B2BuLL);
      v4[3] = v5;
      ABCFTSSetCollationContextForDatabaseConnectionHandle(a1, v4);
      sqlite3_create_function(a1, "ab_cf_tokenizer_namerank", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerNameRankFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_matched_properties", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerPropertyMatchFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_sd_matched_properties", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFSmartDialerFTSTokenizerPropertyMatchFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_match_collect", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerPropertyMatchCollectFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_sd_match_collect", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFSmartDialerFTSTokenizerPropertyMatchCollectFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_select_snippet_column", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerSelectSnippetColumnFunction, 0, 0);
      sqlite3_step(ppStmt);
      return sqlite3_finalize(ppStmt);
    }
  }
  return result;
}

uint64_t ABLogSqliteTrace()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogSqliteTrace)
    return result;
  else
    return 0;
}

uint64_t ABCFTSSetCollationContextForDatabaseConnectionHandle(const void *a1, const void *a2)
{
  __CFDictionary *v4;

  if (ABCFTSGetCollationContextDictionary_predicate != -1)
    dispatch_once(&ABCFTSGetCollationContextDictionary_predicate, &__block_literal_global_18);
  v4 = (__CFDictionary *)ABCFTSGetCollationContextDictionary_collalationContextDict;
  pthread_mutex_lock(&gDictionaryMutex);
  if (a2)
    CFDictionarySetValue(v4, a1, a2);
  else
    CFDictionaryRemoveValue(v4, a1);
  return pthread_mutex_unlock(&gDictionaryMutex);
}

uint64_t ABCMultiValueLoad(void *a1, int a2, uint64_t a3)
{
  int v6;

  v6 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
  return ABCDBContextFetchMultiValuePropertyIntoRecord(a3, a1, a2, v6);
}

void ABCMultiValueDestroy(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = (const void *)a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    v3 = (const void *)a1[3];
    if (v3)
    {
      CFRelease(v3);
      a1[3] = 0;
    }
    v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    v5 = (const void *)a1[6];
    if (v5)
    {
      CFRelease(v5);
      a1[6] = 0;
    }
  }
}

uint64_t CollectMultiValueEntries(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  const __CFAllocator *v5;
  CFNumberRef v6;
  const void *Value;
  void *Mutable;
  int valuePtr;

  v3 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040D1D23B1BuLL);
  if (v3)
  {
    v4 = v3;
    v3[3] = *(_DWORD *)(a2 + 8);
    CPSqliteStatementApplyValuesFromRecord();
    valuePtr = v4[12];
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v6);
    if (Value)
    {
      *(_QWORD *)v4 = Value;
      Mutable = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 32), v6);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(v5, 0, 0);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 32), v6, Mutable);
        if (Mutable)
          CFRelease(Mutable);
      }
      CFArrayAppendValue((CFMutableArrayRef)Mutable, v4);
    }
    if (v6)
      CFRelease(v6);
  }
  return 0;
}

uint64_t ABCSourceCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result)
    return ABCDBContextCopyRecordsForUUIDsOfType(*(_QWORD *)(result + 16), a2, (__int128 *)ABCSourceClass);
  return result;
}

uint64_t multivalueSearchRowHandler(uint64_t a1, __CFArray ***a2)
{
  multivalueSearchRowHandlerIncludingLabels(a1, a2, 0);
  return 0;
}

void multivalueSearchRowHandlerIncludingLabels(uint64_t a1, __CFArray ***a2, int a3)
{
  __CFArray *v6;
  int v7;
  const unsigned __int8 *v8;
  CFStringRef v9;
  __CFArray *v10;
  int v11;
  const unsigned __int8 *v12;
  CFStringRef v13;

  if (!**a2)
    **a2 = CFArrayCreateMutable(0, 0, 0);
  if (!*a2[1])
    *a2[1] = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (*a2[2])
  {
    if (!a3)
      goto LABEL_11;
  }
  else
  {
    *a2[2] = CFArrayCreateMutable(0, 0, 0);
    if (!a3)
      goto LABEL_11;
  }
  if (!*a2[3])
    *a2[3] = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
LABEL_11:
  v6 = **a2;
  v7 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(v6, (const void *)v7);
  v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  v9 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
  CFArrayAppendValue(*a2[1], v9);
  CFRelease(v9);
  v10 = *a2[2];
  v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  CFArrayAppendValue(v10, (const void *)v11);
  if (a3)
  {
    v12 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
    if (v12)
    {
      v13 = CFStringCreateWithCString(0, (const char *)v12, 0x8000100u);
      CFArrayAppendValue(*a2[3], v13);
      CFRelease(v13);
    }
    else
    {
      CFArrayAppendValue(*a2[3], (const void *)*MEMORY[0x1E0C9B0D0]);
    }
  }
}

ABPersonSortOrdering ABPersonGetSortOrdering(void)
{
  const __CFString *v0;
  const __CFNumber *v1;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFNumber *Value;
  ABPersonSortOrdering valuePtr;

  valuePtr = 1;
  v0 = (const __CFString *)ABPeoplePickerPrefs();
  v1 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("contactsSortOrder"), v0);
  if (v1)
    goto LABEL_2;
  v3 = _abCopyCardDisplayDictionary();
  if (v3)
  {
    v4 = v3;
    Value = (const __CFNumber *)CFDictionaryGetValue(v3, CFSTR("contactsSortOrder"));
    if (Value)
    {
      v1 = Value;
      CFRetain(Value);
      CFRelease(v4);
LABEL_2:
      CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
      CFRelease(v1);
      return valuePtr;
    }
    CFRelease(v4);
  }
  return 1;
}

uint64_t ABPeoplePickerPrefs()
{
  uint64_t result;

  result = ABPeoplePickerPrefs__peoplePickerPrefs;
  if (!ABPeoplePickerPrefs__peoplePickerPrefs)
  {
    if (ABPeoplePickerPrefs___once_peoplePickerPrefs != -1)
      dispatch_once(&ABPeoplePickerPrefs___once_peoplePickerPrefs, &__block_literal_global_263);
    return ABPeoplePickerPrefs__peoplePickerPrefs;
  }
  return result;
}

uint64_t _ABCInitialize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars0;

  ABCCreateLock();
  ABCSourceInitialize();
  ABCPersonInitialize();
  ABCGroupInitialize(v0, v1, v2, v3, v4, v5, v6, v7, vars0);
  ABCImageStoreInitialize();
  return pthread_once(&_registerOnce, _registerForDistributedNotification);
}

void ABCSourceInitialize()
{
  kABCSourceNameProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceTypeProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceConstraintsPathProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalModificationTagProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalSyncTagProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceAccountIDProperty = CPRecordIndexOfPropertyNamed();
  kABCSourcePolicyProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceEnabledProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceSyncDataProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceMeIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceCapabilitiesProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceInternalUUIDProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceLastSyncDateProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceProviderIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCSourceProviderMetadataProperty = CPRecordIndexOfPropertyNamed();
  ABSourceInitialize();
}

void ABSourceInitialize()
{
  kABSourceNameProperty = kABCSourceNameProperty;
  kABSourceTypeProperty = kABCSourceTypeProperty;
  kABSourceConstraintsPathProperty = kABCSourceConstraintsPathProperty;
  kABSourceExternalModificationTagProperty = kABCSourceExternalModificationTagProperty;
  kABSourceExternalSyncTagProperty = kABCSourceExternalSyncTagProperty;
  kABSourceExternalIdentifierProperty = kABCSourceExternalIdentifierProperty;
  kABSourceAccountIDProperty = kABCSourceAccountIDProperty;
  kABSourceEnabledProperty = kABCSourceEnabledProperty;
  kABSourceSyncDataProperty = kABCSourceSyncDataProperty;
  kABSourceMeIdentifierProperty = kABCSourceMeIdentifierProperty;
  kABSourceCapabilitiesProperty = kABCSourceCapabilitiesProperty;
  kABSourceInternalUUIDProperty = kABCSourceInternalUUIDProperty;
  kABSourceLastSyncDateProperty = kABCSourceLastSyncDateProperty;
  kABSourceProviderIdentifierProperty = kABCSourceProviderIdentifierProperty;
  kABSourceProviderMetadataProperty = kABCSourceProviderMetadataProperty;
}

void ABPersonInitialize()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  int valuePtr;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonInitialize(void)", 1675, v0, 0, v1, v2, v3, (uint64_t)v11);
    CFRelease(v0);
  }
  kABPersonFirstNameProperty = kABCFirstNameProperty;
  kABPersonFirstNamePhoneticProperty = kABCFirstNamePhoneticProperty;
  kABPersonFirstNamePronunciationProperty = kABCFirstNamePronunciationProperty;
  kABPersonMiddleNameProperty = kABCMiddleNameProperty;
  kABPersonMiddleNamePhoneticProperty = kABCMiddleNamePhoneticProperty;
  kABPersonMiddleNamePronunciationProperty = kABCMiddleNamePronunciationProperty;
  kABPersonLastNameProperty = kABCLastNameProperty;
  kABPersonLastNamePhoneticProperty = kABCLastNamePhoneticProperty;
  kABPersonLastNamePronunciationProperty = kABCLastNamePronunciationProperty;
  kABPersonPreviousFamilyNameProperty = kABCPreviousFamilyNameProperty;
  kABPersonAddressingGrammarProperty = kABCAddressingGrammarProperty;
  kABPersonOrganizationProperty = kABCOrganizationProperty;
  kABPersonOrganizationPhoneticProperty = kABCOrganizationPhoneticProperty;
  kABPersonOrganizationPronunciationProperty = kABCOrganizationPronunciationProperty;
  kABPersonDepartmentProperty = kABCDepartmentProperty;
  kABPersonDateProperty = kABCDateProperty;
  kABPersonInstantMessageProperty = kABCInstantMessageProperty;
  kABPersonNoteProperty = kABCNoteProperty;
  kABPersonImageProperty = kABCImageProperty;
  kABPersonPhoneProperty = kABCPhoneProperty;
  kABPersonEmailProperty = kABCEmailProperty;
  kABPersonAddressProperty = kABCAddressProperty;
  kABPersonKindProperty = kABCKindProperty;
  kABPersonSoundProperty = kABCSoundProperty;
  kABPersonBirthdayProperty = kABCBirthdayProperty;
  kABPersonJobTitleProperty = kABCJobTitleProperty;
  kABPersonNicknameProperty = kABCNicknameProperty;
  kABPersonPrefixProperty = kABCPrefixProperty;
  kABPersonSuffixProperty = kABCSuffixProperty;
  kABPersonURLProperty = kABCURLProperty;
  kABPersonRelatedNamesProperty = kABCRelatedNamesProperty;
  kABPersonFirstSortProperty = kABCFirstSortProperty;
  kABPersonLastSortProperty = kABCLastSortProperty;
  kABPersonCreationDateProperty = kABCCreationDateProperty;
  kABPersonModificationDateProperty = kABCModificationDateProperty;
  kABPersonCompositeNameFallbackProperty = kABCCompositeNameFallbackProperty;
  kABPersonSyntheticPropertiesReset = kABCSyntheticPropertiesReset;
  kABPersonExternalIdentifierProperty = kABCPersonExternalIdentifierProperty;
  kABPersonStoreIDProperty = kABCPersonStoreIDProperty;
  kABPersonStoreReferenceProperty = kABCPersonStoreReferenceProperty;
  kABPersonExternalRepresentationProperty = kABCPersonExternalRepresentationProperty;
  kABPersonExternalModificationTagProperty = kABCPersonExternalModificationTagProperty;
  kABPersonExternalUUIDProperty = kABCPersonExternalUUIDProperty;
  kABPersonImageURIProperty = kABCPersonImageURIProperty;
  kABPersonFirstSortSectionProperty = kABCFirstSortSectionProperty;
  kABPersonLastSortSectionProperty = kABCLastSortSectionProperty;
  kABPersonFirstSortLanguageIndexSortProperty = kABCFirstSortLanguageIndexSortProperty;
  kABPersonLastSortLanguageIndexSortProperty = kABCLastSortLanguageIndexSortProperty;
  kABPersonDisplayNameProperty = kABCPersonDisplayNameProperty;
  valuePtr = 0;
  kABPersonKindPerson = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  valuePtr = 1;
  kABPersonKindOrganization = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  kABPersonSocialProfileProperty = kABCPersonSocialProfileProperty;
  kABPersonContentExtensionsProperty = kABCPersonContentExtensionsProperty;
  kABPersonPhonemeDataProperty = kABCPersonPhonemeDataProperty;
  kABPersonAlternateBirthdayProperty = kABCPersonAlternateBirthdayProperty;
  kABPersonMapsDataProperty = kABCPersonMapsDataProperty;
  kABPersonLinkUUIDProperty = kABCPersonLinkUUIDProperty;
  kABPersonInternalUUIDProperty = kABCPersonInternalUUIDProperty;
  kABPersonInternalGUIDProperty = kABCPersonInternalUUIDProperty;
  kABChangesProperty = kABCChangesProperty;
  kABPersonPreferredLikenessSourceProperty = kABCPersonPreferredLikenessSourceProperty;
  kABPersonPreferredPersonaIdentifierProperty = kABCPersonPreferredPersonaIdentifierProperty;
  kABPersonPreferredChannelProperty = kABCPersonPreferredChannelProperty;
  kABPersonDowntimeWhitelistProperty = kABCPersonDowntimeWhitelistProperty;
  kABPersonImageTypeProperty = kABCPersonImageTypeProperty;
  kABPersonImageHashProperty = kABCPersonImageHashProperty;
  kABPersonMemojiMetadataProperty = kABCPersonMemojiMetadataProperty;
  kABPersonWallpaperProperty = kABCPersonWallpaperProperty;
  kABPersonWallpaperMetadataProperty = kABCPersonWallpaperMetadataProperty;
  kABPersonWatchWallpaperImageDataProperty = kABCPersonWatchWallpaperImageDataProperty;
  kABPersonWallpaperURIProperty = kABCPersonWallpaperURIProperty;
  kABPersonImageBackgroundColorsDataProperty = kABCPersonImageBackgroundColorsDataProperty;
  kABPersonDisplayFlagsProperty = kABCPersonDisplayFlagsProperty;
  kABPersonSensitiveContentConfigurationProperty = kABCPersonSensitiveContentConfigurationProperty;
  kABPersonImageSyncFailedTimeProperty = kABCPersonImageSyncFailedTimeProperty;
  kABPersonWallpaperSyncFailedTimeProperty = kABCPersonWallpaperSyncFailedTimeProperty;
  __personCompositeNameFormat = 0;
  v4 = objc_msgSend(MEMORY[0x1E0CB3858], "_defaultDisplayNameOrder");
  if (v4 == 1)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 2)
      goto LABEL_8;
    v5 = 1;
  }
  __personCompositeNameFormat = v5;
LABEL_8:
  ABPersonRetrieveEditNameFormat();
  ABPersonRetrieveShortNameSettings();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__PreferencesChanged, CFSTR("com.apple.AddressBook.PreferenceChanged"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABPersonInitialize(void)", 1805, CFSTR(">> "), 0, v7, v8, v9, v10);
}

uint64_t ABPersonRetrieveShortNameSettings()
{
  unint64_t v0;
  uint64_t result;

  v0 = objc_msgSend(MEMORY[0x1E0CB3858], "_defaultShortNameFormat") - 1;
  if (v0 <= 3)
    __personShortNameFormat = v0;
  __personShortNameFormatEnabled = objc_msgSend(MEMORY[0x1E0CB3858], "_shortNameIsEnabled");
  result = objc_msgSend(MEMORY[0x1E0CB3858], "_shouldPreferNicknames");
  __personShortNamePreferNicknames = result;
  return result;
}

void ABPersonRetrieveEditNameFormat()
{
  const __CFArray *v0;
  const __CFArray *v1;
  const __CFNumber *Value;
  int valuePtr;

  v0 = _abCopyCardDisplayDictionary();
  if (v0)
  {
    v1 = v0;
    Value = (const __CFNumber *)CFDictionaryGetValue(v0, CFSTR("personNameOrderingForEdit"));
    if (Value)
    {
      valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      __personEditNameFormat = valuePtr;
    }
    CFRelease(v1);
  }
}

const __CFArray *_abCopyCardDisplayDictionary()
{
  __CFBundle *v0;
  __CFBundle *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFString *ValueAtIndex;
  CFURLRef v7;
  const __CFAllocator *v8;
  __CFReadStream *v9;
  __CFReadStream *v10;
  const __CFArray *Value;
  const __CFArray *v12;

  v0 = (__CFBundle *)_ABBundle();
  if (v0)
  {
    v1 = v0;
    v2 = CFBundleCopyBundleLocalizations(v0);
    if (v2)
    {
      v3 = v2;
      v4 = CFBundleCopyLocalizationsForPreferences(v2, 0);
      v5 = v4;
      if (!v4)
      {
        v7 = v3;
LABEL_18:
        CFRelease(v7);
        return v5;
      }
      if (CFArrayGetCount(v4) >= 1 && (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, 0)) != 0)
        v7 = CFBundleCopyResourceURLForLocalization(v1, CFSTR("ABLocalizableDefaults"), CFSTR("plist"), 0, ValueAtIndex);
      else
        v7 = 0;
      CFRelease(v5);
      CFRelease(v3);
      if (v7)
      {
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v9 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
        if (v9)
        {
          v10 = v9;
          if (CFReadStreamOpen(v9))
          {
            v5 = (const __CFArray *)CFPropertyListCreateWithStream(v8, v10, 0, 0, 0, 0);
            Value = (const __CFArray *)CFDictionaryGetValue(v5, CFSTR("_LOCALIZABLE_"));
            if (Value)
            {
              v12 = Value;
              CFRetain(Value);
              CFRelease(v5);
              v5 = v12;
            }
          }
          else
          {
            v5 = 0;
          }
          CFRelease(v10);
        }
        else
        {
          v5 = 0;
        }
        goto LABEL_18;
      }
    }
  }
  return 0;
}

uint64_t _ABBundle()
{
  uint64_t v0;
  CFBundleRef BundleWithIdentifier;

  v0 = _ABBundle___ABBundle;
  if (!_ABBundle___ABBundle)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.AddressBookLegacy"));
    if (BundleWithIdentifier)
    {
      v0 = (uint64_t)BundleWithIdentifier;
      CFRetain(BundleWithIdentifier);
      _ABBundle___ABBundle = v0;
    }
    else
    {
      return _ABBundle___ABBundle;
    }
  }
  return v0;
}

void ABGroupInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;

  if (ABLogAPIUsage())
  {
    v16 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABGroupInitialize(void)", 146, v9, 0, v10, v11, v12, (uint64_t)v16);
    CFRelease(v9);
  }
  kABGroupNameProperty = kABCNameProperty;
  kABGroupMembersProperty = kABCMembersProperty;
  kABGroupSubgroupsProperty = kABCSubgroupsProperty;
  kABGroupMembersAndSubgroupsProperty = kABCMembersAndSubgroupsProperty;
  kABGroupExternalIdentifierProperty = kABCGroupExternalIdentifierProperty;
  kABGroupStoreIDProperty = kABCGroupStoreIDProperty;
  kABGroupStoreReferenceProperty = kABCGroupSourceReferenceProperty;
  kABGroupExternalModificationTagProperty = kABCGroupExternalModificationTagProperty;
  kABGroupExternalRepresentationProperty = kABCGroupExternalRepresentationProperty;
  kABGroupExternalUUIDProperty = kABCGroupExternalUUIDProperty;
  kABGroupInternalUUIDProperty = kABCGroupInternalUUIDProperty;
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABGroupInitialize(void)", 158, CFSTR(">> "), 0, v13, v14, v15, a9);
}

void ABCPersonInitialize()
{
  kABCFirstNameProperty = CPRecordIndexOfPropertyNamed();
  kABCFirstNamePhoneticProperty = CPRecordIndexOfPropertyNamed();
  kABCFirstNamePronunciationProperty = CPRecordIndexOfPropertyNamed();
  kABCMiddleNameProperty = CPRecordIndexOfPropertyNamed();
  kABCMiddleNamePhoneticProperty = CPRecordIndexOfPropertyNamed();
  kABCMiddleNamePronunciationProperty = CPRecordIndexOfPropertyNamed();
  kABCLastNameProperty = CPRecordIndexOfPropertyNamed();
  kABCLastNamePhoneticProperty = CPRecordIndexOfPropertyNamed();
  kABCLastNamePronunciationProperty = CPRecordIndexOfPropertyNamed();
  kABCAddressingGrammarProperty = CPRecordIndexOfPropertyNamed();
  kABCOrganizationProperty = CPRecordIndexOfPropertyNamed();
  kABCOrganizationPhoneticProperty = CPRecordIndexOfPropertyNamed();
  kABCOrganizationPronunciationProperty = CPRecordIndexOfPropertyNamed();
  kABCDepartmentProperty = CPRecordIndexOfPropertyNamed();
  kABCDateProperty = CPRecordIndexOfPropertyNamed();
  kABCInstantMessageProperty = CPRecordIndexOfPropertyNamed();
  kABCNoteProperty = CPRecordIndexOfPropertyNamed();
  kABCImageProperty = CPRecordIndexOfPropertyNamed();
  kABCPhoneProperty = CPRecordIndexOfPropertyNamed();
  kABCEmailProperty = CPRecordIndexOfPropertyNamed();
  kABCAddressProperty = CPRecordIndexOfPropertyNamed();
  kABCKindProperty = CPRecordIndexOfPropertyNamed();
  kABCSoundProperty = CPRecordIndexOfPropertyNamed();
  kABCBirthdayProperty = CPRecordIndexOfPropertyNamed();
  kABCJobTitleProperty = CPRecordIndexOfPropertyNamed();
  kABCNicknameProperty = CPRecordIndexOfPropertyNamed();
  kABCPreviousFamilyNameProperty = CPRecordIndexOfPropertyNamed();
  kABCPrefixProperty = CPRecordIndexOfPropertyNamed();
  kABCSuffixProperty = CPRecordIndexOfPropertyNamed();
  kABCURLProperty = CPRecordIndexOfPropertyNamed();
  kABCRelatedNamesProperty = CPRecordIndexOfPropertyNamed();
  kABCFirstSortProperty = CPRecordIndexOfPropertyNamed();
  kABCLastSortProperty = CPRecordIndexOfPropertyNamed();
  kABCCreationDateProperty = CPRecordIndexOfPropertyNamed();
  kABCModificationDateProperty = CPRecordIndexOfPropertyNamed();
  kABCCompositeNameFallbackProperty = CPRecordIndexOfPropertyNamed();
  kABCSyntheticPropertiesReset = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonStoreIDProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonStoreReferenceProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalModificationTagProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalUUIDProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageURIProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonDisplayNameProperty = CPRecordIndexOfPropertyNamed();
  kABCFirstSortSectionProperty = CPRecordIndexOfPropertyNamed();
  kABCLastSortSectionProperty = CPRecordIndexOfPropertyNamed();
  kABCFirstSortLanguageIndexSortProperty = CPRecordIndexOfPropertyNamed();
  kABCLastSortLanguageIndexSortProperty = CPRecordIndexOfPropertyNamed();
  kABPersonSearchProperty = CPRecordIndexOfPropertyNamed();
  kABPersonNameOnlySearchProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalRepresentationProperty = CPRecordIndexOfPropertyNamed();
  kABPersonLinkProperty = CPRecordIndexOfPropertyNamed();
  kABPersonIsPreferredNameProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonSocialProfileProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonContentExtensionsProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonPhonemeDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonAlternateBirthdayProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonMapsDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonInternalUUIDProperty = CPRecordIndexOfPropertyNamed();
  kABCChangesProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredLikenessSourceProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredPersonaIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonLinkUUIDProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonThumbnailDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageCropRectProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonFullscreenImageDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonSyncImageDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonIsPreferredImageProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonHasImageDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredChannelProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonDowntimeWhitelistProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageTypeProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageHashProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonMemojiMetadataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperMetadataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonWatchWallpaperImageDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageBackgroundColorsDataProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperURIProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonDisplayFlagsProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonSensitiveContentConfigurationProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonImageSyncFailedTimeProperty = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperSyncFailedTimeProperty = CPRecordIndexOfPropertyNamed();
  ABPersonInitialize();
}

uint64_t ABCImageStoreInitialize()
{
  uint64_t result;

  ABCThumbnailImageRecordIDProperty = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageFormatProperty = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageDataProperty = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageDerivedFromFormatProperty = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageRecordIDProperty = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropXProperty = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropYProperty = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropWidthProperty = CPRecordIndexOfPropertyNamed();
  result = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageDataProperty = result;
  return result;
}

void ABCGroupInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  kABCNameProperty = CPRecordIndexOfPropertyNamed();
  kABCMembersProperty = CPRecordIndexOfPropertyNamed();
  kABCAddedMembersAndSubgroupsProperty = CPRecordIndexOfPropertyNamed();
  kABCRemovedMembersAndSubgroupsProperty = CPRecordIndexOfPropertyNamed();
  kABCFetchSortOrderProperty = CPRecordIndexOfPropertyNamed();
  kABCMembersAndSubgroupsProperty = CPRecordIndexOfPropertyNamed();
  kABCSubgroupsProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalIdentifierProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupStoreIDProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupSourceReferenceProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalModificationTagProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalRepresentationProperty = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalUUIDProperty = CPRecordIndexOfPropertyNamed();
  v9 = CPRecordIndexOfPropertyNamed();
  kABCGroupInternalUUIDProperty = v9;
  ABGroupInitialize(v9, v10, v11, v12, v13, v14, v15, v16, a9);
}

uint64_t ABCCreateLock()
{
  pthread_mutexattr_t v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1.__sig = 0;
  *(_QWORD *)v1.__opaque = 0;
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  pthread_mutex_init(&__lock, &v1);
  pthread_mutexattr_destroy(&v1);
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  pthread_mutex_init(&__darwinNotificationLock, &v1);
  return pthread_mutexattr_destroy(&v1);
}

ABRecordID ABRecordGetRecordID(ABRecordRef record)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ABRecordID UniqueId;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordID ABRecordGetRecordID(ABRecordRef)", 32, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  UniqueId = ABCRecordGetUniqueId(record);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABRecordID ABRecordGetRecordID(ABRecordRef)", 34, CFSTR(">> "), 0, v7, v8, v9, v11);
  return UniqueId;
}

__asl_object_s *___initIfNeeded_block_invoke()
{
  const __CFString *v0;
  int AppIntegerValue;
  int v2;
  int v3;
  int v4;
  int AppBooleanValue;
  BOOL v6;
  char v7;
  int v8;
  BOOL v9;
  char v10;
  int v11;
  BOOL v12;
  char v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  BOOL v18;
  char v19;
  __asl_object_s *result;
  BOOL v21;
  char v22;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  v0 = (const __CFString *)*MEMORY[0x1E0C9B228];
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("ABLogConsoleLevel"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v2 = AppIntegerValue;
  else
    v2 = 4;
  __ABLogMaxConsoleLevel = v2;
  v3 = CFPreferencesGetAppIntegerValue(CFSTR("ABLogFileLevel"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v4 = v3;
  else
    v4 = -1;
  __ABLogMaxFileLevel = v4;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("ABLogAPIUsage"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v6 = AppBooleanValue == 0;
  else
    v6 = 1;
  v7 = !v6;
  __ABLogAPIUsage = v7;
  v8 = CFPreferencesGetAppBooleanValue(CFSTR("ABLogSqlite"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v9 = v8 == 0;
  else
    v9 = 1;
  v10 = !v9;
  __ABLogSqliteTrace = v10;
  v11 = CFPreferencesGetAppBooleanValue(CFSTR("ABLogContactsSearch"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v12 = v11 == 0;
  else
    v12 = 1;
  v13 = !v12;
  __ABLogContactsSearch = v13;
  v14 = CFPreferencesGetAppBooleanValue(CFSTR("ABLogDataCollection"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v15 = v14 == 0;
  else
    v15 = 1;
  v16 = !v15;
  __ABLogDataCollection = v16;
  v17 = CFPreferencesGetAppBooleanValue(CFSTR("ABLogPersonDelete"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v18 = v17 == 0;
  else
    v18 = 1;
  v19 = !v18;
  __ABLogPersonDelete = v19;
  result = (__asl_object_s *)CFPreferencesGetAppBooleanValue(CFSTR("ABLogChangeHistory"), v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v21 = (_DWORD)result == 0;
  else
    v21 = 1;
  v22 = !v21;
  __ABLogChangeHistory = v22;
  if (__ABLogMaxFileLevel != -1)
  {
    __ABLogAslQueue = (uint64_t)dispatch_queue_create((const char *)objc_msgSend(CFSTR("com.apple.AddressBookLegacy"), "UTF8String"), 0);
    result = asl_open(0, (const char *)objc_msgSend(CFSTR("com.apple.AddressBookLegacy"), "UTF8String"), 0);
    __ABLogAslClient = (uint64_t)result;
    if (result)
      return (__asl_object_s *)asl_set_filter(result, ~(-1 << (__ABLogMaxFileLevel + 1)));
  }
  return result;
}

CFStringRef ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(uint64_t a1)
{
  CFStringRef result;
  CFStringRef v2;
  uint64_t v3;

  result = ABCImageStoreCopyPath(a1);
  if (result)
  {
    v2 = result;
    v3 = ABCImageStoreCreateWithPathAndForceInProcessMigration();
    CFRelease(v2);
    return (CFStringRef)v3;
  }
  return result;
}

uint64_t ABCImageStoreCreateWithPathAndForceInProcessMigration()
{
  uint64_t v0;

  v0 = CPRecordStoreCreateWithPath();
  if (v0)
  {
    CPRecordStoreSetSetupHandler();
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseSetVersion();
    CPSqliteDatabaseSetAutoVacuumLevel();
    CPSqliteDatabaseSetJournalModeWAL();
    CPSqliteDatabaseSetAccessRequestHandler();
    CPSqliteDatabaseSetDataProtectionLevel();
    CPSqliteDatabaseSetAutoRetryStatements();
    CPSqliteDatabaseSetShouldUseInhibitorForConnections();
    CPSqliteDatabaseSetConnectionInitializer();
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    CPSqliteDatabaseSetShouldMigrateInProcess();
    CPSqliteDatabaseSetMigrationHandlers();
    CPSqliteDatabaseSetShouldYieldWhenRequested();
    CPSqliteDatabaseSetShouldRequestUnlock();
    CPRecordStoreRegisterClass();
    CPRecordStoreRegisterClass();
  }
  return v0;
}

CFStringRef ABCImageStoreCopyPath(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFStringRef v3;

  if (a1)
    v1 = (const __CFString *)ABCAddressBookCopyAddressBookDBDirectory(a1);
  else
    v1 = (const __CFString *)ABCAddressBookCopyDBDirectory();
  v2 = v1;
  v3 = ABCImageStoreCopyDatabasePathForDatabaseDirectory(v1);
  if (v2)
    CFRelease(v2);
  return v3;
}

CFStringRef ABCImageStoreCopyDatabasePathForDatabaseDirectory(CFStringRef theString)
{
  const __CFAllocator *v2;
  __CFString *MutableCopy;
  __CFString *v4;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!theString)
    return CFStringCreateWithCString(v2, ":memory:", 0x8000100u);
  MutableCopy = CFStringCreateMutableCopy(v2, 0, theString);
  v4 = MutableCopy;
  if (MutableCopy)
    CFStringAppend(MutableCopy, CFSTR("AddressBookImages.sqlitedb"));
  return v4;
}

CFTypeRef ABCAddressBookCopyAddressBookDBDirectory(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 72);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t ABPolicyRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kABPolicyTypeID = result;
  return result;
}

uint64_t ABCMultiValueRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kABCMultiValueTypeID = result;
  return result;
}

void _ABPhoneUtilitiesInitializeLostMode()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _getLostMode();
  if (__kLostModeChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__LostModeChanged, (CFStringRef)__kLostModeChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

uint64_t _getLostMode()
{
  unsigned int (*v0)(_QWORD);
  BOOL v1;
  void *v2;
  uint64_t result;

  v0 = (unsigned int (*)(_QWORD))_isDeviceLocked_AB_MKBGetDeviceLockState;
  if (_isDeviceLocked__MobileKeyBagFrameworkHandle)
    v1 = _isDeviceLocked_AB_MKBGetDeviceLockState == 0;
  else
    v1 = 1;
  if (!v1
    || (+[ABDynamicLoader loadFrameworkAtPath:andStoreHandle:bundle:](ABDynamicLoader, "loadFrameworkAtPath:andStoreHandle:bundle:", CFSTR("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag"), &_isDeviceLocked__MobileKeyBagFrameworkHandle, 0), v0 = (unsigned int (*)(_QWORD))dlsym((void *)_isDeviceLocked__MobileKeyBagFrameworkHandle, "MKBGetDeviceLockState"), (_isDeviceLocked_AB_MKBGetDeviceLockState = v0) != 0))
  {
    if (v0(0) - 1 > 1)
    {
      result = 0;
      goto LABEL_15;
    }
  }
  if (!__FindMyDeviceFramework)
  {
    v2 = (void *)objc_opt_new();
    if (+[ABDynamicLoader loadFrameworkAtPath:andStoreHandle:bundle:](ABDynamicLoader, "loadFrameworkAtPath:andStoreHandle:bundle:", CFSTR("System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice"), &__FindMyDeviceFramework, 0))
    {
      __FMDFMIPManager = (uint64_t)NSClassFromString(CFSTR("FMDFMIPManager"));
      __kLostModeChangedNotification = *(_QWORD *)dlsym((void *)__FindMyDeviceFramework, "kLostModeChangedNotification");
    }

  }
  result = __FMDFMIPManager;
  if (__FMDFMIPManager)
  {
    result = objc_msgSend((id)objc_msgSend((id)__FMDFMIPManager, "sharedInstance"), "lostModeIsActive");
LABEL_15:
    _ignoreMatchingForLostMode = result;
  }
  return result;
}

uint64_t ABPersonGetEditNameFormat()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPersonEditNameFormat ABPersonGetEditNameFormat(void)", 1276, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personEditNameFormat;
}

uint64_t ABAddressBookGetPreferredNamePeopleCount(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPreferredNamePeopleCount(ABAddressBookRef)", 1127, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks(a1, 0, 1);
}

uint64_t ABCGetPersonCountInSourceShowingLinks(uint64_t a1, ABRecordRef record, int a3)
{
  uint64_t CountOfInstancesOfClassWhere;
  uint64_t RecordID;
  CFStringRef v6;
  CFStringRef v7;

  CountOfInstancesOfClassWhere = a1;
  if (!a1)
    return CountOfInstancesOfClassWhere;
  if (record)
  {
    RecordID = ABRecordGetRecordID(record);
    if ((_DWORD)RecordID != -1)
    {
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("StoreID = %i"), RecordID);
LABEL_7:
      v7 = v6;
      goto LABEL_9;
    }
  }
  if (a3)
  {
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("IsPreferredName = 1"));
    goto LABEL_7;
  }
  v7 = 0;
LABEL_9:
  CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
  if (v7)
    CFRelease(v7);
  return CountOfInstancesOfClassWhere;
}

void ___copyPersonMatchingPrivateProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v2;
  const char *v3;

  if (a2)
  {
    v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      v3 = (const char *)_CPCreateUTF8StringFromCFString();
      sqlite3_bind_text(v2, 1, v3, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    }
  }
}

ABRecordRef ABPersonCopySource(ABRecordRef person)
{
  __CFString *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v6;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v1 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopySource(ABRecordRef)", 496, v1, 0, v2, v3, v4, (uint64_t)v6);
    CFRelease(v1);
  }
  return (ABRecordRef)ABCPersonCopySource();
}

CFIndex ABAddressBookGetGroupCount(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetGroupCount(ABAddressBookRef)", 68, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetGroupCount((uint64_t)addressBook, 0);
}

uint64_t ABCGetGroupCount(uint64_t a1, ABRecordRef record)
{
  uint64_t CountOfInstancesOfClassWhere;
  uint64_t RecordID;
  CFStringRef v4;

  CountOfInstancesOfClassWhere = a1;
  if (a1)
  {
    if (!record || (RecordID = ABRecordGetRecordID(record), (_DWORD)RecordID == -1))
      v4 = 0;
    else
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("StoreID = %i"), RecordID);
    CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
    if (v4)
      CFRelease(v4);
  }
  return CountOfInstancesOfClassWhere;
}

void ABAddressBookRegisterExternalChangeCallback(ABAddressBookRef addressBook, ABExternalChangeCallback callback, void *context)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFArray *v13;
  __CFNotificationCenter *LocalCenter;
  const __CFAllocator *v15;
  __CFArray *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1853, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (addressBook)
  {
    if (!ABLinkedOnOrAfter() && *((_BYTE *)addressBook + 264) && ABTCCIsAccessGranted())
    {
      v25 = copyCurrentThreadHandle();
      v12 = ABAddressBookIsCallbackRegistered((uint64_t)addressBook, callback, context, v25) ^ 1;
    }
    else
    {
      v12 = 0;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)addressBook + 80));
    if (callback)
    {
      v13 = (const __CFArray *)*((_QWORD *)addressBook + 18);
      if (!v13 || !CFArrayGetCount(v13))
      {
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterAddObserver(LocalCenter, addressBook, (CFNotificationCallback)ABCAddressBookDatabaseChanged, CFSTR("ABCDataBaseChangedExternallyNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      if (!*((_QWORD *)addressBook + 18))
      {
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        *((_QWORD *)addressBook + 20) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
        *((_QWORD *)addressBook + 18) = CFArrayCreateMutable(v15, 0, 0);
        *((_QWORD *)addressBook + 19) = CFArrayCreateMutable(v15, 0, 0);
      }
      v16 = (__CFArray *)*((_QWORD *)addressBook + 20);
      v17 = copyCurrentThreadHandle();
      CFArrayAppendValue(v16, v17);
      CFArrayAppendValue(*((CFMutableArrayRef *)addressBook + 18), callback);
      if (context)
        v18 = context;
      else
        v18 = (void *)*MEMORY[0x1E0C9B0D0];
      CFArrayAppendValue(*((CFMutableArrayRef *)addressBook + 19), v18);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)addressBook + 80));
    if (v12)
    {
      ABDiagnosticsEnabled();
      _ABLog2(5, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1887, 0, (uint64_t)CFSTR("The external change callback was registered after the access status changed, invoking it now."), v19, v20, v21, v26);
      _ABCPostDatabaseChangedNotification(0, 1);
    }
    if (ABLogAPIUsage())
      _ABLog2(6, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1891, CFSTR(">> "), 0, v22, v23, v24, v27);
  }
}

id copyCurrentThreadHandle()
{
  return (id)objc_msgSend(MEMORY[0x1E0CB3978], "currentThread");
}

uint64_t ABLinkedOnOrAfter()
{
  if (__ABLinkedOnOrAfterSimulateLinkedBefore)
    return 0;
  else
    return _CFExecutableLinkedOnOrAfter();
}

uint64_t ABAddressBookCopySourcesWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySourcesWithUUIDs(ABAddressBookRef, CFArrayRef)", 301, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCSourceCopyRecordsForUUIDs(a1, a2);
}

uint64_t ABAddressBookCopyPeopleWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)", 760, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  v10 = ABCPersonCopyRecordsForUUIDs(a1, a2);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)", 762, CFSTR(">> "), 0, v11, v12, v13, v15);
  return v10;
}

uint64_t ABCDBContextCopyRecordsForUUIDsOfType(uint64_t a1, CFArrayRef theArray, __int128 *a3)
{
  __CFString *Mutable;
  CFIndex Count;
  uint64_t v8;
  CFMutableArrayRef v9;
  CFArrayRef v10;
  uint64_t v11;
  uint64_t i;
  CFIndex v13;
  CFRange v15;
  CFRange v16;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("guid IN ("));
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v8 = 0;
    do
    {
      if (v8)
        CFStringAppend(Mutable, CFSTR(", "));
      CFStringAppend(Mutable, CFSTR("?"));
      ++v8;
    }
    while (Count != v8);
  }
  CFStringAppend(Mutable, CFSTR(")"));
  if (ABCPersonClass != a3)
  {
    v9 = 0;
    if (Mutable)
      goto LABEL_10;
LABEL_22:
    v11 = 0;
    if (!v9)
      return v11;
LABEL_23:
    CFRelease(v9);
    return v11;
  }
  CFStringAppend(Mutable, CFSTR(" OR PersonLink in (select abpl.rowid from ABPersonLink abpl where abpl.guid in ("));
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      if (i)
        CFStringAppend(Mutable, CFSTR(", "));
      CFStringAppend(Mutable, CFSTR("?"));
    }
  }
  CFStringAppend(Mutable, CFSTR("))"));
  v13 = CFArrayGetCount(theArray);
  v9 = CFArrayCreateMutable(0, 2 * v13, MEMORY[0x1E0C9B378]);
  v15.length = CFArrayGetCount(theArray);
  v15.location = 0;
  CFArrayAppendArray(v9, theArray, v15);
  v16.length = CFArrayGetCount(theArray);
  v16.location = 0;
  CFArrayAppendArray(v9, theArray, v16);
  if (!Mutable)
    goto LABEL_22;
LABEL_10:
  if (v9)
    v10 = v9;
  else
    v10 = theArray;
  v11 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, (uint64_t)a3, 0, Mutable, v10);
  CFRelease(Mutable);
  if (v9)
    goto LABEL_23;
  return v11;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  const void *v14;
  void *values;

  v14 = a5;
  values = a4;
  if (!a4 || !a5)
    return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(a1, a2, a3, 0, 0);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  v11 = CFArrayCreate(v8, &v14, 1, v9);
  v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(a1, a2, a3, v10, v11);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return v12;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4, const __CFArray *a5)
{
  int UniqueId;
  __CFString *SelectPrefix;
  __CFString *v10;
  const __CFString *v11;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  uint64_t v15;
  _QWORD *v16;
  sqlite3_stmt *v17;
  int v18;
  uint64_t v19;
  const __CFArray *v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  void (__cdecl *v24)(void *);
  const __CFString *v25;
  CFTypeID v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex j;
  sqlite3_stmt *v30;
  const __CFString *v31;
  UInt8 *v32;
  sqlite3_stmt *v33;
  UInt8 *v34;
  __CFString *v36;
  CFIndex v37;
  const __CFArray *theArray;

  if (a3)
    UniqueId = ABCRecordGetUniqueId(a3);
  else
    UniqueId = -1;
  theArray = a5;
  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  v10 = SelectPrefix;
  if (UniqueId == -1)
  {
    if (!a4 || !theArray)
      goto LABEL_17;
    v11 = CFSTR(" WHERE ");
  }
  else
  {
    CFStringAppend(SelectPrefix, CFSTR(" WHERE "));
    CFStringAppend(v10, CFSTR("StoreID == ? "));
    if (!a4 || !theArray)
      goto LABEL_17;
    v11 = CFSTR(" AND ");
  }
  CFStringAppend(v10, v11);
  Count = CFArrayGetCount(a4);
  if (Count != CFArrayGetCount(theArray))
    ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates_cold_1();
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a4, i);
      CFStringAppend(v10, ValueAtIndex);
      if (i < Count - 1)
        CFStringAppend(v10, CFSTR(" AND "));
    }
  }
LABEL_17:
  CFStringAppend(v10, CFSTR(";"));
  v15 = CPSqliteDatabaseStatementForReading();
  v16 = (_QWORD *)recordStoreContext(a1);
  if (v16)
    v16 = (_QWORD *)*v16;
  ABRegulatoryLogReadContactsData((uint64_t)v16);
  if (v15 && (v17 = *(sqlite3_stmt **)(v15 + 8)) != 0)
  {
    v36 = v10;
    if (UniqueId == -1)
    {
      v18 = 1;
    }
    else
    {
      sqlite3_bind_int(v17, 1, UniqueId);
      v18 = 2;
    }
    v20 = theArray;
    if (a4)
    {
      if (theArray)
      {
        v21 = CFArrayGetCount(theArray);
        if (v21 >= 1)
        {
          v22 = v21;
          v23 = 0;
          v24 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
          v37 = v21;
          do
          {
            v25 = (const __CFString *)CFArrayGetValueAtIndex(v20, v23);
            v26 = CFGetTypeID(v25);
            if (v26 == CFArrayGetTypeID())
            {
              v27 = CFArrayGetCount((CFArrayRef)v25);
              if (v27 >= 1)
              {
                v28 = v27;
                for (j = 0; j != v28; ++j)
                {
                  v30 = *(sqlite3_stmt **)(v15 + 8);
                  v31 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v25, j);
                  v32 = _ABCCreateUTF8StringFromCFString(v31);
                  sqlite3_bind_text(v30, v18 + j, (const char *)v32, -1, v24);
                }
                v18 += j;
                v22 = v37;
                v20 = theArray;
              }
            }
            else
            {
              v33 = *(sqlite3_stmt **)(v15 + 8);
              v34 = _ABCCreateUTF8StringFromCFString(v25);
              sqlite3_bind_text(v33, v18++, (const char *)v34, -1, v24);
            }
            ++v23;
          }
          while (v23 != v22);
        }
      }
    }
    v19 = CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
    v10 = v36;
  }
  else
  {
    fwrite("AB: Could not compile statement for query (ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates):\n", 0x69uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    CFShow(v10);
    v19 = 0;
  }
  CFRelease(v10);
  return v19;
}

UInt8 *_ABCCreateUTF8StringFromCFString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v4;
  CFIndex usedBufLen;
  CFRange v7;

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = 0;
  v4 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xCC8B0DB1uLL);
  v7.location = 0;
  v7.length = Length;
  CFStringGetBytes(a1, v7, 0x8000100u, 0, 0, v4, MaximumSizeForEncoding, &usedBufLen);
  v4[usedBufLen] = 0;
  return v4;
}

uint64_t ABCPersonCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result)
    return ABCDBContextCopyRecordsForUUIDsOfType(*(_QWORD *)(result + 16), a2, ABCPersonClass);
  return result;
}

void ABAddressBookRegisterChangeCallback(uint64_t a1, const void *a2, const void *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFArray *Mutable;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)", 2008, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
    ABAddressBookRegisterChangeCallback_cold_1();
  Mutable = *(__CFArray **)(a1 + 168);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *(_QWORD *)(a1 + 168) = Mutable;
  }
  if (!*(_QWORD *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 176) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    Mutable = *(__CFArray **)(a1 + 168);
  }
  CFArrayAppendValue(Mutable, a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 176), a3);
}

uint64_t ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  int v10;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  if (!a2 || (objc_msgSend(a2, "deviceHasManagementRestrictions") & 1) == 0)
    return ABAddressBookGetPreferredNamePeopleCount(a1);
  v4 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
  v5 = SQLInClauseStringForParameterCount(objc_msgSend(v4, "count"));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT COUNT() FROM ABPerson WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) "), v5, v5);
  ABRegulatoryLogReadContactsData(a1);
  CPRecordStoreGetDatabase();
  v6 = CPSqliteDatabaseStatementForReading();
  if (!v6)
    return -1;
  v7 = v6;
  if (!*(_QWORD *)(v6 + 8))
    return -1;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  v8 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke;
  v14[3] = &unk_1E3CA3B48;
  v14[4] = &v15;
  v14[5] = v6;
  objc_msgSend(v4, "enumerateIndexesUsingBlock:", v14);
  v9 = *(sqlite3_stmt **)(v7 + 8);
  v10 = *((_DWORD *)v16 + 6);
  *((_DWORD *)v16 + 6) = v10 + 1;
  sqlite3_bind_blob(v9, v10, v4, 8, 0);
  v13[0] = v8;
  v13[1] = 3221225472;
  v13[2] = __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke_2;
  v13[3] = &unk_1E3CA3B48;
  v13[4] = &v15;
  v13[5] = v7;
  objc_msgSend(v4, "enumerateIndexesUsingBlock:", v13);
  if (sqlite3_step(*(sqlite3_stmt **)(v7 + 8)) == 100)
    v11 = sqlite3_column_int(*(sqlite3_stmt **)(v7 + 8), 0);
  else
    v11 = -1;
  CPSqliteStatementReset();
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_19BC5CEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ABCopyArrayOfSectionListOffsets(uint64_t a1, int a2, __CFArray **a3, CFMutableArrayRef *a4, __CFArray **a5)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *MutableCopy;
  __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  const unsigned __int8 *v21;
  const UInt8 *v22;
  size_t v23;
  CFStringRef v24;
  __CFArray *v25;
  int v26;
  __CFArray *v27;
  int v28;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABCopyArrayOfSectionListOffsets(ABAddressBookRef, ABPersonSortOrdering, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 952, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  if (!a1)
    return 0;
  MutableCopy = CFStringCreateMutableCopy(0, 0, CFSTR("SELECT LanguageIndex, Section, 0, number FROM "));
  v17 = MutableCopy;
  v18 = a2 ? CFSTR("LastSortSectionCountTotal") : CFSTR("FirstSortSectionCountTotal");
  CFStringAppend(MutableCopy, v18);
  CFStringAppend(v17, CFSTR(" WHERE number > 0 ORDER BY LanguageIndex ASC, Section ASC;"));
  CPRecordStoreGetDatabase();
  v19 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  CFRelease(v17);
  if (!v19 || !*(_QWORD *)(v19 + 8))
    return 0;
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
    *a3 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  *a4 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E0C9B378]);
  *a5 = CFArrayCreateMutable(v20, 0, 0);
  while (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) == 100)
  {
    v21 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
    if (v21)
    {
      v22 = v21;
      v23 = strlen((const char *)v21);
      v24 = CFStringCreateWithBytes(v20, v22, v23, 0x8000100u, 0);
      CFArrayAppendValue(*a4, v24);
      CFRelease(v24);
      if (a3)
      {
        v25 = *a3;
        v26 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
        CFArrayAppendValue(v25, (const void *)v26);
      }
      v27 = *a5;
      v28 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 3);
      CFArrayAppendValue(v27, (const void *)v28);
    }
  }
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return 1;
}

uint64_t ABCopyArrayOfSectionListOffsetsForManagedConfiguration(uint64_t a1, void *a2, int a3, __CFArray **a4, CFMutableArrayRef *a5, __CFArray **a6)
{
  void *v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  sqlite3_stmt *v19;
  int v20;
  const __CFAllocator *v21;
  const unsigned __int8 *v22;
  const UInt8 *v23;
  size_t v24;
  CFStringRef v25;
  __CFArray *v26;
  int v27;
  __CFArray *v28;
  int v29;
  _QWORD v30[6];
  _QWORD v31[6];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;

  if (!a2 || (objc_msgSend(a2, "deviceHasManagementRestrictions") & 1) == 0)
    return ABCopyArrayOfSectionListOffsets(a1, a3, a4, a5, a6);
  v12 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
  v13 = SQLInClauseStringForParameterCount(objc_msgSend(v12, "count"));
  v14 = CFSTR("FirstSortLanguageIndex, FirstSortSection");
  v15 = CFSTR("LastSortLanguageIndex ASC, LastSortSection ASC");
  if (a3)
    v14 = CFSTR("LastSortLanguageIndex, LastSortSection");
  else
    v15 = CFSTR("FirstSortLanguageIndex ASC, FirstSortSection ASC");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT %@, COUNT() from ABPerson where rowid in (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) GROUP BY %@ ORDER BY %@;"),
    v14,
    v13,
    v13,
    v14,
    v15);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    v17 = result;
    if (*(_QWORD *)(result + 8))
    {
      v32 = 0;
      v33 = &v32;
      v34 = 0x2020000000;
      v35 = 1;
      v18 = MEMORY[0x1E0C809B0];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke;
      v31[3] = &unk_1E3CA3B48;
      v31[4] = &v32;
      v31[5] = result;
      objc_msgSend(v12, "enumerateIndexesUsingBlock:", v31);
      v19 = *(sqlite3_stmt **)(v17 + 8);
      v20 = *((_DWORD *)v33 + 6);
      *((_DWORD *)v33 + 6) = v20 + 1;
      sqlite3_bind_blob(v19, v20, v12, 8, 0);
      v30[0] = v18;
      v30[1] = 3221225472;
      v30[2] = __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke_2;
      v30[3] = &unk_1E3CA3B48;
      v30[4] = &v32;
      v30[5] = v17;
      objc_msgSend(v12, "enumerateIndexesUsingBlock:", v30);
      v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (a4)
        *a4 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      *a5 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
      *a6 = CFArrayCreateMutable(v21, 0, 0);
      while (sqlite3_step(*(sqlite3_stmt **)(v17 + 8)) == 100)
      {
        v22 = sqlite3_column_text(*(sqlite3_stmt **)(v17 + 8), 1);
        v23 = v22;
        if (v22)
        {
          v24 = strlen((const char *)v22);
          v25 = CFStringCreateWithBytes(v21, v23, v24, 0x8000100u, 0);
          CFArrayAppendValue(*a5, v25);
          CFRelease(v25);
          if (a4)
          {
            v26 = *a4;
            v27 = sqlite3_column_int(*(sqlite3_stmt **)(v17 + 8), 0);
            CFArrayAppendValue(v26, (const void *)v27);
          }
          v28 = *a6;
          v29 = sqlite3_column_int(*(sqlite3_stmt **)(v17 + 8), 2);
          CFArrayAppendValue(v28, (const void *)v29);
        }
      }
      CPSqliteStatementReset();
      CPSqliteDatabaseReleaseSqliteStatement();
      _Block_object_dispose(&v32, 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_19BC5D404(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t ABLock()
{
  return pthread_mutex_lock(&__lock);
}

uint64_t ABUnlock()
{
  return pthread_mutex_unlock(&__lock);
}

uint64_t ABDarwinNotificationLock()
{
  return pthread_mutex_lock(&__darwinNotificationLock);
}

uint64_t ABDarwinNotificationUnlock()
{
  return pthread_mutex_unlock(&__darwinNotificationLock);
}

void ABPostDatabaseChanged()
{
  _ABCPostDatabaseChangedNotification(0, 1);
}

uint64_t ABStartDatabaseDoctor(uint64_t a1)
{
  uint64_t result;
  void *v3;
  id v4;
  _QWORD v5[5];

  result = ABDeviceIsBeforeFirstUnlockWithDataProtected();
  if ((result & 1) == 0)
  {
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName"), "isEqualToString:", CFSTR("ABDatabaseDoctor"));
    if ((result & 1) == 0)
    {
      pthread_mutex_lock(&__lock);
      if (!__startABDatabaseDoctorCoalescingTimer)
      {
        v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13A38], "currentEnvironment"), "schedulerProvider");
        v4 = objc_alloc(MEMORY[0x1E0D139C8]);
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = ___createStartABDatabaseDoctorCoalescingTimer_block_invoke;
        v5[3] = &__block_descriptor_40_e5_v8__0l;
        v5[4] = a1;
        __startABDatabaseDoctorCoalescingTimer = objc_msgSend(v4, "initWithDelay:options:block:schedulerProvider:downstreamScheduler:", 1, v5, v3, objc_msgSend(v3, "backgroundScheduler"), 1.0);
      }
      pthread_mutex_unlock(&__lock);
      return objc_msgSend((id)__startABDatabaseDoctorCoalescingTimer, "handleEvent");
    }
  }
  return result;
}

uint64_t ABCAddressBookMarkDirectoryForDeletion(uint64_t a1)
{
  const __CFString *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[3];
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFString *)objc_msgSend(MEMORY[0x1E0D139A8], "currentBootSessionUUID");
  if (!v2)
  {
    v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ABCAddressBookMarkDirectoryForDeletion_cold_2(v3);
    v2 = CFSTR("ERROR-FETCHING-BOOT-UUID");
  }
  v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 138543618;
    *(_QWORD *)&v14[1] = a1;
    v15 = 2114;
    v16 = v2;
    _os_log_impl(&dword_19BC4B000, v4, OS_LOG_TYPE_DEFAULT, "Marking database path %{public}@ for future deletion with current boot uuid %{public}@.", (uint8_t *)v14, 0x16u);
  }
  v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", 0), "_cn_setValue:forExtendedAttribute:path:error:", v2, CFSTR("AddressBookMarkedForDeletion"), a1, v14);
  if ((v5 & 1) == 0)
  {
    v6 = ABOSLogGeneral();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ABCAddressBookMarkDirectoryForDeletion_cold_1((uint64_t)v14, v6, v7, v8, v9, v10, v11, v12);
  }
  return v5;
}

BOOL ABCAddressBookIsDirectoryMarkedForDeletion(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "_cn_getValue:forExtendendAttribute:path:error:", &v12, CFSTR("AddressBookMarkedForDeletion"), a1, &v13) & 1) == 0)
  {
    v5 = ABOSLogGeneral();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABCAddressBookIsDirectoryMarkedForDeletion_cold_1((uint64_t)&v13, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  if (!v12)
    return 0;
  if (a2)
  {
    v3 = objc_msgSend(MEMORY[0x1E0D139A8], "currentBootSessionUUID");
    *a2 = objc_msgSend(v12, "isEqualToString:", v3) ^ 1;
  }
  return 1;
}

uint64_t ABCAddRecord(_DWORD *a1, ABRecordRef record, CFTypeRef *a3)
{
  uint64_t result;
  char **Class;

  result = 1;
  if (a1 && record)
  {
    if (ABRecordGetRecordID(record) != -1)
    {
      CPRecordStoreAddExistingRecord();
      return 1;
    }
    Class = (char **)CPRecordGetClass();
    if (Class == (char **)ABCPersonClass)
    {
      result = ABCPersonPrepareToAddToAddressBook(record, a1, a3);
      if (!(_DWORD)result)
        return result;
      ABCAddressBookFlushPhoneCache((uint64_t)a1);
    }
    else if (Class == ABCGroupClass[0])
    {
      result = ABCGroupPrepareToAddToAddressBook((uint64_t)record, a1, (uint64_t)a3);
      if (!(_DWORD)result)
        return result;
    }
    CPRecordStoreAddRecord();
    return 1;
  }
  return result;
}

uint64_t _ABCRemoveRecordArrayApplier(const void *a1, uint64_t a2)
{
  return ABCRemoveRecordAndOverridePolicy(a2, a1, 1, 0);
}

uint64_t ABCRemoveRecordAndOverridePolicy(uint64_t a1, const void *a2, char a3, const void **a4)
{
  uint64_t result;
  __int128 *Class;
  char **v10;
  BOOL v11;
  uint64_t Policy;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RecordID;
  uint64_t v19;
  ABRecordRef v20;
  uint64_t v21;
  __CFString *SelectPrefixFromRecordDescriptor;
  uint64_t v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex i;
  const void *ValueAtIndex;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  result = 0;
  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      if ((char **)CPRecordGetClass() != ABCSourceClass || (result = CPRecordGetID(), (_DWORD)result))
      {
        Class = (__int128 *)CPRecordGetClass();
        v10 = (char **)Class;
        if ((a3 & 1) != 0
          || (Class != ABCPersonClass ? (v11 = Class == (__int128 *)ABCGroupClass[0]) : (v11 = 1),
              !v11
           || (Policy = ABRecordGetPolicy(a2)) == 0
           || (result = ABPolicyShouldRemoveRecord(Policy, a1, a2, a4), (_DWORD)result)))
        {
          if (v10 != (char **)ABCPersonClass)
          {
            if (v10 == ABCSourceClass)
            {
              _prepareSourceForDeletion(a1, a2);
            }
            else if (v10 == ABAccountClass)
            {
              v13 = (void *)ABAddressBookCopyArrayOfAllSourcesInAccount(a1, a2);
              v29 = 0u;
              v30 = 0u;
              v31 = 0u;
              v32 = 0u;
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
              if (v14)
              {
                v15 = v14;
                v16 = *(_QWORD *)v30;
                do
                {
                  v17 = 0;
                  do
                  {
                    if (*(_QWORD *)v30 != v16)
                      objc_enumerationMutation(v13);
                    _prepareSourceForDeletion(a1, *(ABRecordRef *)(*((_QWORD *)&v29 + 1) + 8 * v17));
                    CPRecordStoreRemoveRecord();
                    ++v17;
                  }
                  while (v15 != v17);
                  v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
                }
                while (v15);
              }

            }
LABEL_37:
            CPRecordStoreRemoveRecord();
            return 1;
          }
          RecordID = ABRecordGetRecordID(a2);
          *(_DWORD *)(a1 + 376) |= 0x22000u;
          ABCPersonClearAddressBookPhoneCacheForPerson(a1);
          ABCPersonRemoveImageData(a2);
          if (ABLogPersonDelete())
          {
            v19 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("will delete \"%@\" recordID=%i, creating simulated crash report"), (id)ABRecordCopyCompositeName(a2), RecordID);
            ABLogSimulateCrashReport(v19);
            ABLogDisplayInternalAlert(v19);
          }
          if ((_DWORD)RecordID == -1)
            goto LABEL_37;
          v20 = ABPersonCopySource(a2);
          v21 = kABSourceMeIdentifierProperty;
          if (ABRecordGetIntValue((uint64_t)v20, kABSourceMeIdentifierProperty) == (_DWORD)RecordID)
          {
            ABRecordSetIntValue(v20, v21, -1, 0);
            ABCDBContextLogChangeForPerson(*(_QWORD *)(a1 + 16), 0, 0xAu);
          }
          else if (!ABPersonIsLinkedToMe((const void *)a1, a2))
          {
            goto LABEL_32;
          }
          *(_DWORD *)(a1 + 376) |= 0x40000u;
LABEL_32:
          CFRelease(v20);
          ABPersonUnlink(a2);
          CPRecordStoreGetDatabase();
          CPSqliteDatabaseConnectionForReading();
          SelectPrefixFromRecordDescriptor = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
          CFStringAppend(SelectPrefixFromRecordDescriptor, CFSTR(" WHERE ROWID in (select group_id from ABGroupMembers where member_id = ?)"));
          v23 = CPSqliteConnectionStatementForSQL();
          sqlite3_bind_int(*(sqlite3_stmt **)(v23 + 8), 1, RecordID);
          v24 = (const __CFArray *)CPRecordStoreProcessStatement();
          CPSqliteStatementReset();
          CFRelease(SelectPrefixFromRecordDescriptor);
          if (v24)
          {
            Count = CFArrayGetCount(v24);
            if (Count >= 1)
            {
              v26 = Count;
              for (i = 0; i != v26; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v24, i);
                ABCGroupRemoveMember(ValueAtIndex, a2);
              }
            }
            CFRelease(v24);
          }
          goto LABEL_37;
        }
      }
    }
  }
  return result;
}

uint64_t ABAddressBookDeleteAllRecordsWithStore(void *a1, uint64_t a2)
{
  _ABAddressBookDeleteAllRecordsWithStore(a1, a2, 0);
  return 1;
}

void _ABAddressBookDeleteAllRecordsWithStore(void *a1, uint64_t a2, char a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFRange v16;
  CFRange v17;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool _ABAddressBookDeleteAllRecordsWithStore(ABAddressBookRef, ABRecordRef, BOOL)", 568, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (a1 && a2 && ((a3 & 1) != 0 || CPRecordGetID()) && (char **)CPRecordGetClass() == ABCSourceClass)
  {
    v12 = ABCCopyArrayOfAllPeopleInSource((uint64_t)a1, a2);
    if (v12)
    {
      v13 = v12;
      v16.length = CFArrayGetCount(v12);
      v16.location = 0;
      CFArrayApplyFunction(v13, v16, (CFArrayApplierFunction)_ABCRemoveRecordArrayApplier, a1);
      CFRelease(v13);
    }
    v14 = (const __CFArray *)ABCCopyArrayOfAllGroupsInSource((uint64_t)a1, a2);
    if (v14)
    {
      v15 = v14;
      v17.length = CFArrayGetCount(v14);
      v17.location = 0;
      CFArrayApplyFunction(v15, v17, (CFArrayApplierFunction)_ABCRemoveRecordArrayApplier, a1);
      CFRelease(v15);
    }
  }
}

uint64_t ABAddressBookDeleteAllRecordsInLocalStore(void *a1)
{
  const void *v2;
  const void *v3;

  v2 = ABAddressBookCopyLocalSource((uint64_t)a1);
  if (v2)
  {
    v3 = v2;
    _ABAddressBookDeleteAllRecordsWithStore(a1, (uint64_t)v2, 1);
    CFRelease(v3);
  }
  return 1;
}

uint64_t ABCRemoveRecord(uint64_t a1, const void *a2, const void **a3)
{
  return ABCRemoveRecordAndOverridePolicy(a1, a2, 0, a3);
}

void ABCProcessAddedRecords(uint64_t a1)
{
  const __CFArray *v2;
  BOOL v3;
  __CFArray *v4;
  const __CFAllocator *v5;
  CFIndex Count;
  CFRange v7;

  if (a1 && *(_QWORD *)(a1 + 16))
  {
    v2 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType())
      v3 = v2 == 0;
    else
      v3 = 1;
    if (!v3)
    {
      v4 = *(__CFArray **)(a1 + 256);
      if (v4)
      {
        v7.length = CFArrayGetCount(v2);
        v7.location = 0;
        CFArrayAppendArray(v4, v2, v7);
      }
      else
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Count = CFArrayGetCount(v2);
        *(_QWORD *)(a1 + 256) = CFArrayCreateMutableCopy(v5, Count, v2);
      }
      goto LABEL_13;
    }
    if (v2)
LABEL_13:
      CFRelease(v2);
  }
}

uint64_t ABCProcessAddedImages(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    ABCProcessAddedRecords(result);
    CPRecordStoreProcessDeletedRecordsWithPolicyAndTransactionType();
    CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType();
    return ABCInvalidateCachedImages(v1);
  }
  return result;
}

uint64_t ABCInvalidateCachedImages(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      CPRecordStoreInvalidateCachedInstancesOfClass();
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        CPRecordStoreInvalidateCachedInstancesOfClass();
        return CPRecordStoreInvalidateCachedInstancesOfClass();
      }
    }
  }
  return result;
}

uint64_t _ABCPersonInvalidateImageCallback()
{
  CPRecordUnloadProperty();
  return 0;
}

void _ABCPostDatabaseChangedNotification(CFDictionaryRef theDict, int a2)
{
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v3;
  CFNumberRef v4;
  __CFNotificationCenter *LocalCenter;
  int valuePtr;

  valuePtr = a2;
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = MutableCopy;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v3, CFSTR("isLocal"), v4);
  CFRelease(v4);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("ABCDataBaseChangedExternallyNotification"), 0, v3, 1u);
  CFRelease(v3);
}

BOOL _hasAnyBackgroundColorRelatedImageUpdate(const void *a1, ABRecordID a2)
{
  ABRecordRef PersonWithRecordID;
  const __CFArray *Value;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  char **Class;

  PersonWithRecordID = ABAddressBookGetPersonWithRecordID(a1, a2);
  Value = (const __CFArray *)ABCRecordGetValue(PersonWithRecordID, kABCImageProperty);
  if (!Value)
    return 1;
  v4 = Value;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 0;
  v6 = Count;
  CFArrayGetValueAtIndex(v4, 0);
  if ((char **)CPRecordGetClass() == ABCFullSizeImageClass)
    return 1;
  v7 = 1;
  do
  {
    v8 = v7;
    if (v6 == v7)
      break;
    CFArrayGetValueAtIndex(v4, v7);
    Class = (char **)CPRecordGetClass();
    v7 = v8 + 1;
  }
  while (Class != ABCFullSizeImageClass);
  return v8 < v6;
}

void _clearBackgroundColorsForUpdatedPeople(void *a1, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;

  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ABChangeCallbackInfoUpdatedPeople"));
    if (Value)
      CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)ABCClearBackgroundColorsForUpdatedPerson_Apply, a1);
  }
}

void ABCClearBackgroundColorsForUpdatedPerson_Apply(ABRecordID a1, CFArrayRef theArray, const void *a3)
{
  uint64_t Count;
  NSObject *v7;
  CFIndex v8;
  unsigned int ValueAtIndex;
  BOOL v10;
  BOOL v11;
  ABRecordRef PersonWithRecordID;
  CFTypeRef v13;
  CFTypeRef v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  CFTypeRef v18;
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(theArray);
  v7 = ABOSLogImageMetadata();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 67109120;
    LODWORD(v18) = a1;
    _os_log_impl(&dword_19BC4B000, v7, OS_LOG_TYPE_DEFAULT, "ABCClearBackgroundColorsForUpdatedPerson_Apply to recordID = %d", (uint8_t *)&v17, 8u);
  }
  v20.location = 0;
  v20.length = Count;
  if (!CFArrayContainsValue(theArray, v20, (const void *)kABCPersonImageBackgroundColorsDataProperty))
  {
    if (Count >= 1)
    {
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        v10 = kABCPersonImageTypeProperty == ValueAtIndex || kABCPersonWallpaperProperty == ValueAtIndex;
        v11 = v10 || kABCPersonWallpaperMetadataProperty == ValueAtIndex;
        if (v11 || kABCImageProperty == ValueAtIndex && _hasAnyBackgroundColorRelatedImageUpdate(a3, a1))
          break;
        if (Count == ++v8)
          goto LABEL_19;
      }
      PersonWithRecordID = ABAddressBookGetPersonWithRecordID(a3, a1);
      ABRecordSetValue(PersonWithRecordID, kABCPersonImageBackgroundColorsDataProperty, 0, 0);
      v13 = ABRecordCopyValue(PersonWithRecordID, kABPersonInternalUUIDProperty);
      v14 = (id)CFMakeCollectable(v13);
      v15 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v17 = 138543362;
        v18 = v14;
        _os_log_impl(&dword_19BC4B000, v15, OS_LOG_TYPE_DEFAULT, "Cleared image background colors for contact identifier %{public}@", (uint8_t *)&v17, 0xCu);
      }
    }
LABEL_19:
    v16 = ABOSLogImageMetadata();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 67109120;
      LODWORD(v18) = a1;
      _os_log_impl(&dword_19BC4B000, v16, OS_LOG_TYPE_DEFAULT, "ABCClearBackgroundColorsForUpdatedPerson_Apply scanned recordID = %d", (uint8_t *)&v17, 8u);
    }
  }
}

BOOL _shouldClearbackgroundColors(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (_os_feature_enabled_impl())
    v2 = (*(_BYTE *)(a1 + 378) & 0x40) == 0;
  else
    v2 = 0;
  v3 = ABOSLogImageMetadata();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl(&dword_19BC4B000, v3, OS_LOG_TYPE_DEFAULT, "_shouldClearbackgroundColors = %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t ABCAddressBookSaveWithConflictPolicy(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v4;
  const __CFDictionary *Mutable;
  int v6;
  _BOOL4 shouldClearbackgroundColors;
  _BOOL4 v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  CFMutableDictionaryRef v14;
  const void *v15;
  const void *ValueAtIndex;
  uint64_t v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex v20;
  __CFArray *v21;
  uint64_t v22;
  CFIndex v23;
  signed int v24;
  BOOL v25;
  const void *v27;
  uint64_t v28;
  ABRecordID RecordID;
  CFMutableDictionaryRef v30;
  const void *v31;
  __CFDictionary *v32;
  ABRecordID v33;
  const __CFArray *v34;
  const __CFArray *v35;
  uint64_t v36;
  const __CFArray *v37;
  __CFArray *v38;
  const __CFArray *v39;
  CFIndex v40;
  const __CFArray *v41;
  const __CFArray *v42;
  CFIndex v43;
  const void *v44;
  const void *v45;
  int v46;
  CFStringRef v47;
  const __CFArray *v48;
  int v49;
  void *v50;
  uint64_t v51;
  int SequenceNumber;
  NSObject *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  CFIndex v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CFIndex v79;
  CFIndex v80;
  __CFArray *v81;
  __CFArray *v82;
  const void *v83;
  __CFArray *v84;
  ABRecordID v85;
  uint64_t v86;
  const void *v87;
  const __CFArray *v88;
  CFIndex v89;
  const __CFDictionary *v90;
  CFDictionaryRef Copy;
  const __CFArray *v92;
  int v93;
  CFIndex i;
  const void *v95;
  void (*v96)(uint64_t, CFDictionaryRef, const void *);
  CFErrorRef v97;
  const __CFString *Domain;
  CFComparisonResult v99;
  __CFString **v100;
  const __CFString *v101;
  CFIndex Code;
  const void *v103;
  uint64_t v105;
  _BOOL4 v106;
  __CFDictionary *v107;
  __CFDictionary *v108;
  CFIndex v109;
  const __CFArray *v110;
  CFErrorRef *v111;
  CFErrorRef *v112;
  int v113;
  int v114;
  __CFDictionary *value;
  __CFDictionary *theDict;
  int theDicta;
  uint64_t v118;
  const __CFAllocator *allocator;
  CFErrorRef err;
  uint8_t buf[4];
  int v122;
  __int16 v123;
  CFIndex v124;
  __int16 v125;
  CFIndex v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  CFRange v130;
  CFRange v131;
  CFRange v132;

  v129 = *MEMORY[0x1E0C80C00];
  err = 0;
  if (!a1)
    return 0;
  v4 = a1;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = *(_DWORD *)(v4 + 376);
  shouldClearbackgroundColors = _shouldClearbackgroundColors(v4);
  v8 = shouldClearbackgroundColors;
  v118 = v4;
  if ((v6 & 0x800000) == 0 || shouldClearbackgroundColors)
  {
    v9 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    if (v9)
    {
      v10 = v9;
      Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v12 = Count;
        v106 = v8;
        v113 = v6;
        v111 = a3;
        v107 = Mutable;
        value = 0;
        v13 = 0;
        v14 = 0;
        v15 = (const void *)kABGroupMembersProperty;
        v109 = Count;
        v110 = v10;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
          v17 = CPRecordCopyChangedProperties();
          if (v17)
          {
            v18 = (const __CFArray *)v17;
            v19 = *(const __CFArray **)(v4 + 256);
            if (!v19
              || (v130.length = CFArrayGetCount(*(CFArrayRef *)(v4 + 256)),
                  v130.location = 0,
                  !CFArrayContainsValue(v19, v130, ValueAtIndex)))
            {
              if (ABRecordGetRecordType(ValueAtIndex))
              {
                if (!v14)
                  v14 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E0C9B3A0]);
                theDict = v14;
                v20 = CFArrayGetCount(v18);
                v21 = CFArrayCreateMutable(allocator, 0, 0);
                if (v20 >= 1)
                {
                  v22 = 0;
                  v23 = 0;
                  while (1)
                  {
                    v24 = CFArrayGetValueAtIndex(v18, v23);
                    v25 = kABCAddedMembersAndSubgroupsProperty == v24 || kABCRemovedMembersAndSubgroupsProperty == v24;
                    if (!v25 && (_DWORD)v15 != v24)
                      break;
                    v28 = 1;
                    v27 = v15;
                    if ((v22 & 1) == 0)
                      goto LABEL_24;
LABEL_25:
                    ++v23;
                    v22 = v28;
                    if (v20 == v23)
                      goto LABEL_26;
                  }
                  v27 = (const void *)v24;
                  v28 = v22;
LABEL_24:
                  CFArrayAppendValue(v21, v27);
                  goto LABEL_25;
                }
LABEL_26:
                RecordID = ABRecordGetRecordID(ValueAtIndex);
                v14 = theDict;
                CFDictionarySetValue(theDict, (const void *)RecordID, v21);
                CFRelease(v21);
                v4 = v118;
                v12 = v109;
                v10 = v110;
              }
              else
              {
                v30 = value;
                if (!value)
                  v30 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E0C9B3A0]);
                v31 = ValueAtIndex;
                v32 = v30;
                v33 = ABRecordGetRecordID(v31);
                value = v32;
                CFDictionarySetValue(v32, (const void *)v33, v18);
              }
            }
            CFRelease(v18);
          }
          ++v13;
        }
        while (v13 != v12);
        Mutable = v107;
        if (value)
        {
          CFDictionarySetValue(v107, CFSTR("ABChangeCallbackInfoUpdatedPeople"), value);
          CFRelease(value);
        }
        a3 = v111;
        v6 = v113;
        v8 = v106;
        if (v14)
        {
          CFDictionarySetValue(v107, CFSTR("ABChangeCallbackInfoUpdatedGroups"), v14);
          CFRelease(v14);
        }
      }
      CFRelease(v10);
    }
  }
  if (v8)
    _clearBackgroundColorsForUpdatedPeople((void *)v4, Mutable);
  v34 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
  v35 = v34;
  if (v34)
    v36 = CFArrayGetCount(v34);
  else
    v36 = 0;
  v37 = *(const __CFArray **)(v4 + 256);
  if (v37)
    v36 += CFArrayGetCount(v37);
  if (v36 < 1)
  {
    v38 = 0;
    if (v35)
LABEL_50:
      CFRelease(v35);
  }
  else
  {
    v38 = CFArrayCreateMutable(allocator, v36, MEMORY[0x1E0C9B378]);
    if (v35)
    {
      v131.length = CFArrayGetCount(v35);
      v131.location = 0;
      CFArrayAppendArray(v38, v35, v131);
    }
    v39 = *(const __CFArray **)(v4 + 256);
    if (v39)
    {
      v132.length = CFArrayGetCount(*(CFArrayRef *)(v4 + 256));
      v132.location = 0;
      CFArrayAppendArray(v38, v39, v132);
    }
    if (v35)
      goto LABEL_50;
  }
  if (v38)
    v40 = CFArrayGetCount(v38);
  else
    v40 = 0;
  v41 = (const __CFArray *)CPRecordStoreCopyDeletedRecordIDsOfClass();
  if (v41)
  {
    v42 = v41;
    if ((v6 & 0x800000) == 0)
      CFDictionarySetValue(Mutable, CFSTR("ABChangeCallbackInfoDeletedPeople"), v41);
    ABRegulatoryLogDeleteContactsData(v4);
    v43 = CFArrayGetCount(v42);
    CFRelease(v42);
  }
  else
  {
    v43 = 0;
  }
  v44 = (const void *)CPRecordStoreCopyDeletedRecordIDsOfClass();
  if (v44)
  {
    v45 = v44;
    if ((v6 & 0x800000) == 0)
      CFDictionarySetValue(Mutable, CFSTR("ABChangeCallbackInfoDeletedGroups"), v44);
    ABRegulatoryLogDeleteContactsData(v4);
    CFRelease(v45);
  }
  v46 = *(_DWORD *)(v4 + 376);
  v47 = ABAddressBookCopySaveTransactionIdentifier(v4);
  if ((v6 & 0x800000) == 0)
  {
    v48 = *(const __CFArray **)(v4 + 144);
    if (v48)
    {
      if (CFArrayGetCount(v48) >= 1)
      {
        v49 = *(_DWORD *)(v4 + 376);
        if ((v49 & 0x80000) == 0)
          *(_DWORD *)(v4 + 376) = v49 & 0xFFFFFC03 | (4 * ((v49 + 4) >> 2));
      }
    }
    pthread_mutex_lock(&__darwinNotificationLock);
    if ((*(_BYTE *)(v4 + 378) & 8) == 0)
      ++_darwinNotificationCancellationCount;
    pthread_mutex_unlock(&__darwinNotificationLock);
  }
  if (!*(_QWORD *)(v4 + 16))
  {
    v51 = 0;
    goto LABEL_137;
  }
  theDicta = v46;
  v114 = v6;
  v112 = a3;
  v50 = (void *)objc_msgSend(MEMORY[0x1E0D13A88], "runningboardInhibitorWithExplanation:", CFSTR("com.apple.AddressBook.ABCAddressBookSaveWithConflictPolicy"));
  objc_msgSend(v50, "start");
  CPRecordStoreLogChanges();
  v51 = CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  SequenceNumber = ABAddressBookGetSequenceNumber(v4);
  v53 = ABOSLogGeneral();
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    v54 = *(_QWORD *)(v118 + 344);
    *(_DWORD *)buf = 67109890;
    v122 = SequenceNumber + 1;
    v123 = 2048;
    v124 = v43;
    v125 = 2048;
    v126 = v40;
    v127 = 2114;
    v128 = v54;
    _os_log_impl(&dword_19BC4B000, v53, OS_LOG_TYPE_DEFAULT, "AddressBook preparing save, sequence number = %d, deleted contact count = %ld, added contact count = %ld, change history id = %{public}@", buf, 0x26u);
  }
  if (err)
    v55 = 0;
  else
    v55 = v51;
  if (v55 == 1)
  {
    v56 = v118;
    if ((*(_BYTE *)(v118 + 378) & 0x10) != 0)
    {
      if (!CPRecordStoreGetCountOfInstancesOfClassWhere())
      {
        v57 = ABAddressBookCopyLocalSource(v118);
        if (v57)
        {
          v58 = v57;
          ABDiagnosticsEnabled();
          _ABLog2(4, (uint64_t)"_Bool ABCAddressBookSaveWithConflictPolicy(ABCAddressBookRef, ABConflictPolicy, CFErrorRef *)", 1118, 0, (uint64_t)CFSTR("Enabling the local source because no sources were enabled"), v59, v60, v61, v105);
          ABRecordSetIntValue(v58, kABSourceEnabledProperty, 1, 0);
          CFRelease(v58);
        }
      }
      *(_DWORD *)(v118 + 376) &= ~0x100000u;
      v56 = v118;
    }
    v51 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
    if (*(_QWORD *)(v56 + 24))
    {
      v62 = err ? 0 : v51;
      if (v62 == 1)
      {
        v51 = 1;
        if ((CPRecordStoreSaveWithCallbackAndTransactionType() & 1) == 0)
        {
          v63 = ABOSLogGeneral();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            ABCAddressBookSaveWithConflictPolicy_cold_1((uint64_t)&err, v63, v64, v65, v66, v67, v68, v69);
          v51 = 0;
        }
      }
    }
    if (v40 >= 1)
    {
      v70 = err ? 0 : v51;
      if (v70 == 1)
      {
        v108 = Mutable;
        v71 = CFArrayGetCount(v38);
        if (v71 >= 1)
        {
          v79 = v71;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = CFArrayGetValueAtIndex(v38, v80);
            if (ABRecordGetRecordType(v83))
            {
              if (v81)
              {
                v84 = v81;
              }
              else
              {
                v84 = CFArrayCreateMutable(allocator, 0, 0);
                v81 = v84;
              }
            }
            else if (v82)
            {
              v84 = v82;
            }
            else
            {
              v84 = CFArrayCreateMutable(allocator, 0, 0);
              v82 = v84;
            }
            v85 = ABRecordGetRecordID(v83);
            CFArrayAppendValue(v84, (const void *)v85);
            ++v80;
          }
          while (v79 != v80);
          if (v82)
          {
            CFDictionarySetValue(v108, CFSTR("ABChangeCallbackInfoInsertedPeople"), v82);
            CFRelease(v82);
          }
          if (v81)
          {
            CFDictionarySetValue(v108, CFSTR("ABChangeCallbackInfoInsertedGroups"), v81);
            CFRelease(v81);
          }
        }
        if ((v114 & 0x800000) == 0
          && +[ABPersonLinker isAutoLinkingEnabled](ABPersonLinker, "isAutoLinkingEnabled"))
        {
          +[ABPersonLinker startAutoLinkingNewPeopleInAddressBook:inProcess:](ABPersonLinker, "startAutoLinkingNewPeopleInAddressBook:inProcess:", v118, 0);
        }
        ABChangeHistoryUpdatePeakPersonCount((const void *)v118, v72, v73, v74, v75, v76, v77, v78, v105);
        v51 = 1;
        Mutable = v108;
      }
    }
  }
  v4 = v118;
  CPRecordStoreLogChanges();
  objc_msgSend(v50, "stop");
  if ((_DWORD)v51)
  {
    a3 = v112;
    v6 = v114;
    if (!err)
    {
      v86 = *(_QWORD *)(v118 + 72);
      v87 = *(const void **)(v118 + 256);
      if (v87)
      {
        CFRelease(v87);
        *(_QWORD *)(v118 + 256) = 0;
      }
      ABRegulatoryLogModifyContactsData(v118);
      if ((v114 & 0x800000) != 0)
      {
        v51 = 1;
        v4 = v118;
      }
      else
      {
        if (v86 && (*(_BYTE *)(v118 + 378) & 8) == 0)
        {
          ABPostDistributedNotification((uint64_t)CFSTR("ABDatabaseSavedDistributedNotification"));
          pthread_mutex_lock(&__lock);
          if (!__saveNotificationCoalescingTimer)
            __saveNotificationCoalescingTimer = _createDefaultCoalescingTimerForDarwinNotification((uint64_t)CFSTR("__ABDataBaseChangedByOtherProcessNotification"));
          pthread_mutex_unlock(&__lock);
          objc_msgSend((id)__saveNotificationCoalescingTimer, "handleEvent");
          if ((theDicta & 0x40000) != 0)
          {
            ABPostDistributedNotification((uint64_t)CFSTR("ABAddressBookMeCardChangeDistributedNotification"));
            pthread_mutex_lock(&__lock);
            if (!__meCardChangedNotificationCoalescingTimer)
              __meCardChangedNotificationCoalescingTimer = _createDefaultCoalescingTimerForDarwinNotification((uint64_t)CFSTR("com.apple.AddressBook.MeCardChanged"));
            pthread_mutex_unlock(&__lock);
            objc_msgSend((id)__meCardChangedNotificationCoalescingTimer, "handleEvent");
          }
        }
        v4 = v118;
        if ((*(_BYTE *)(v118 + 378) & 8) == 0)
          _ABCPostDatabaseChangedNotification(0, 1);
        v88 = *(const __CFArray **)(v118 + 168);
        if (!v88 || (*(_BYTE *)(v118 + 378) & 8) != 0)
        {
          v51 = 1;
        }
        else
        {
          v89 = CFArrayGetCount(v88);
          if (Mutable)
          {
            v90 = Mutable;
            Copy = CFDictionaryCreateCopy(allocator, Mutable);
          }
          else
          {
            v90 = 0;
            Copy = 0;
          }
          if (v89 >= 1)
          {
            for (i = 0; i != v89; ++i)
            {
              v95 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v118 + 176), i);
              v96 = (void (*)(uint64_t, CFDictionaryRef, const void *))CFArrayGetValueAtIndex(*(CFArrayRef *)(v118 + 168), i);
              v96(v118, Copy, v95);
            }
          }
          if (Copy)
            CFRelease(Copy);
          v51 = 1;
          Mutable = v90;
          a3 = v112;
        }
      }
      goto LABEL_156;
    }
LABEL_137:
    if ((v6 & 0x800000) == 0)
      goto LABEL_138;
    goto LABEL_156;
  }
  a3 = v112;
  if ((v114 & 0x800000) == 0)
  {
LABEL_138:
    v92 = *(const __CFArray **)(v4 + 144);
    if (v92)
    {
      if (CFArrayGetCount(v92) >= 1)
      {
        v93 = *(_DWORD *)(v4 + 376);
        if ((v93 & 0x80000) == 0)
          *(_DWORD *)(v4 + 376) = v93 & 0xFFFFFC03 | (4 * ((v93 + 1020) >> 2));
      }
    }
    pthread_mutex_lock(&__darwinNotificationLock);
    if ((*(_BYTE *)(v4 + 378) & 8) == 0)
      --_darwinNotificationCancellationCount;
    pthread_mutex_unlock(&__darwinNotificationLock);
  }
LABEL_156:
  v97 = err;
  if (err)
  {
    if (a3)
    {
      Domain = CFErrorGetDomain(err);
      v99 = CFStringCompare(Domain, (CFStringRef)*MEMORY[0x1E0CFAA48], 0);
      v100 = kABSQLiteErrorDomain;
      if (v99)
        v100 = kABErrorDomain;
      v101 = *v100;
      Code = CFErrorGetCode(err);
      *a3 = CFErrorCreate(0, v101, Code, 0);
      v97 = err;
    }
    CFRelease(v97);
  }
  v103 = *(const void **)(v4 + 360);
  if (v103)
  {
    CFRelease(v103);
    *(_QWORD *)(v4 + 360) = 0;
  }
  *(_DWORD *)(v4 + 376) &= ~0x800000u;
  if (Mutable)
    CFRelease(Mutable);
  if (v38)
    CFRelease(v38);
  if (v47)
    CFRelease(v47);
  return v51;
}

void ABPostDistributedNotification(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)MEMORY[0x1A1ACC34C]();
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
  if (ABGetProcessDistributedNotificationIdentifier_onceToken != -1)
    dispatch_once(&ABGetProcessDistributedNotificationIdentifier_onceToken, &__block_literal_global);
  objc_msgSend(v3, "postNotificationName:object:userInfo:", a1, ABGetProcessDistributedNotificationIdentifier_processNotificationIdentifier, 0);
  objc_autoreleasePoolPop(v2);
}

uint64_t ABCSave(uint64_t a1)
{
  return ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
}

uint64_t ABCAddressBookInvalidateAddressBookFlags(uint64_t result)
{
  *(_DWORD *)(result + 376) &= 0xFED81FFF;
  return result;
}

__CFString *FamilyDirectoryURL()
{
  __CFString *result;
  __CFString *v1;
  uint64_t v2;

  result = _createMutableDBDirectory();
  if (result)
  {
    v1 = result;
    v2 = -[__CFString stringByAppendingPathComponent:](result, "stringByAppendingPathComponent:", CFSTR("Family"));
    CFRelease(v1);
    return (__CFString *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v2, 1);
  }
  return result;
}

uint64_t FamilyDirectoryContents()
{
  __CFString *v0;
  __CFString *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v0 = FamilyDirectoryURL();
  if (v0
    && (v1 = v0,
        v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13A38], "currentEnvironment"), "fileManager"),
        v5[0] = *MEMORY[0x1E0C999D0],
        v3 = (void *)objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:", v1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1), 5), objc_msgSend(v3, "isSuccess")))
  {
    return objc_msgSend(v3, "value");
  }
  else
  {
    return MEMORY[0x1E0C9AA60];
  }
}

CFTypeRef ABCAddressBookCopyDelegateDBDirectories()
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend((id)objc_msgSend((id)FamilyDirectoryContents(), "_cn_filter:", objc_msgSend(MEMORY[0x1E0D13BC8], "isDirectory")), "valueForKey:", CFSTR("path"));
  if (result)
    return CFRetain(result);
  return result;
}

__CFString *ABCAddressBookCopyDBPath()
{
  __CFString *MutableDBDirectory;

  MutableDBDirectory = _createMutableDBDirectory();
  CFStringAppend(MutableDBDirectory, CFSTR("AddressBook.sqlitedb"));
  return MutableDBDirectory;
}

CFStringRef ABCCopyLocalizedPropertyOrLabel(const __CFString *a1)
{
  __CFBundle *v2;

  v2 = (__CFBundle *)_ABBundle();
  return CFBundleCopyLocalizedString(v2, a1, a1, CFSTR("Localized"));
}

CFMutableArrayRef ABCCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && (v2 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCDBContextCopyAllLabelsForProperty(v2, a2);
  else
    return 0;
}

uint64_t ABCDeleteLabel(uint64_t result, const __CFString *a2)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
      return ABCDBContextDeleteLabel(result, a2);
  }
  return result;
}

uint64_t ABCAddressBookBeginExclusiveRead(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      CPRecordStoreGetDatabase();
      CPSqliteDatabaseConnectionForWriting();
      return CPSqliteConnectionBegin();
    }
  }
  return result;
}

uint64_t ABCAddressBookEndExclusiveRead(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      CPRecordStoreGetDatabase();
      CPSqliteDatabaseConnectionForWriting();
      return CPSqliteConnectionRollback();
    }
  }
  return result;
}

uint64_t ABCStartSortDataReset(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABCStartSortDataReset(ABCAddressBookRef)", 1541, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABStartDatabaseDoctor(a1);
}

uint64_t ABCResetSortData(uint64_t a1, uint64_t a2)
{
  __CFSet *Mutable;
  uint64_t v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  const void *ValueAtIndex;
  const void *UniqueId;

  Mutable = CFSetCreateMutable(0, 0, 0);
  v5 = 0;
  while (1)
  {
    v6 = ABCCopyArrayOfAllPeople(a1);
    if (!v6)
      break;
    v7 = v6;
    Count = CFArrayGetCount(v6);
    if (Count < 1 || a2 < 1)
    {
      CFRelease(v7);
      break;
    }
    v9 = Count;
    v10 = 0;
    v11 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v11 - 1);
      UniqueId = (const void *)(int)ABCRecordGetUniqueId(ValueAtIndex);
      if (!CFSetContainsValue(Mutable, UniqueId))
      {
        ABCPersonInvalidateSyntheticProperties();
        CFSetAddValue(Mutable, UniqueId);
        ++v10;
      }
      if (v11 >= v9)
        break;
      ++v11;
    }
    while (v10 < a2);
    CFRelease(v7);
    v5 += v10;
    if (!v10)
      break;
    ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
    if (ABCIsSortDataValid(a1, 0))
      goto LABEL_15;
  }
  ABCDBContextUpdateSortDataVersions();
  ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
LABEL_15:
  CFRelease(Mutable);
  return v5;
}

uint64_t ABCRebuildSearchIndex(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v9;

  result = ABCFTSIsEnabled();
  if ((_DWORD)result)
  {
    result = a1[2];
    if (result)
    {
      CPRecordStoreGetDatabase();
      result = CPSqliteDatabaseConnectionForWriting();
      if (result)
      {
        v3 = result;
        ABCDBContextCreateSearchTablesAndDropFirst(result, 1);
        v4 = ABAddressBookCopyArrayOfAllPeople(a1);
        sqlite3_exec(*(sqlite3 **)(v3 + 8), "BEGIN IMMEDIATE;", 0, 0, 0);
        if (v4)
        {
          Count = CFArrayGetCount(v4);
          if (Count >= 1)
          {
            v6 = Count;
            for (i = 0; i != v6; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
              ABCDContextCreateSearchIndexEntryForPerson(v3, ValueAtIndex);
              v9 = CFArrayGetValueAtIndex(v4, i);
              ABCDContextUpdateSearchIndexForPerson(v3, v9);
            }
          }
          CFRelease(v4);
        }
        return sqlite3_exec(*(sqlite3 **)(v3 + 8), "END;", 0, 0, 0);
      }
    }
  }
  return result;
}

void _ABResetDarwinNotificationCancellationCount()
{
  _darwinNotificationCancellationCount = 0;
}

uint64_t ABGetProcessDistributedNotificationIdentifier()
{
  if (ABGetProcessDistributedNotificationIdentifier_onceToken != -1)
    dispatch_once(&ABGetProcessDistributedNotificationIdentifier_onceToken, &__block_literal_global);
  return ABGetProcessDistributedNotificationIdentifier_processNotificationIdentifier;
}

uint64_t ABAddressBookIsCallbackRegistered(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  pthread_mutex_t *v8;
  const __CFArray *v9;
  CFIndex Count;
  const void *v11;
  CFIndex v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    return 0;
  v8 = (pthread_mutex_t *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 80));
  if (a2
    && (v9 = *(const __CFArray **)(a1 + 144)) != 0
    && ((Count = CFArrayGetCount(v9), a3) ? (v11 = a3) : (v11 = (const void *)*MEMORY[0x1E0C9B0D0]), Count >= 1))
  {
    v12 = Count;
    v13 = 0;
    v14 = 1;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), v14 - 1) == a2
        && CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v14 - 1) == v11
        && CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 160), v14 - 1) == a4)
      {
        v13 = 1;
      }
      v15 = v13 & 1;
      if (v14 >= v12)
        break;
      ++v14;
    }
    while ((v13 & 1) == 0);
  }
  else
  {
    v15 = 0;
  }
  pthread_mutex_unlock(v8);
  return v15;
}

uint64_t ABCAddressBookDatabaseChanged(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v3;
  int v4;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  const __CFArray *Copy;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex v12;
  void *v13;
  void *ValueAtIndex;
  const void *v15;
  void *v16;
  void *v17;

  v3 = (pthread_mutex_t *)(a2 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 80));
  v4 = *(_DWORD *)(a2 + 376);
  if ((v4 & 0x3FC) != 0)
  {
    *(_DWORD *)(a2 + 376) = v4 & 0xFFFFFC03 | (4 * ((v4 + 1020) >> 2));
  }
  else
  {
    v6 = *(const __CFArray **)(a2 + 144);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        Copy = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 144));
        v10 = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 160));
        v11 = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 152));
        v12 = 0;
        v13 = (void *)*MEMORY[0x1E0C9B0D0];
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(Copy, v12);
          v15 = CFArrayGetValueAtIndex(v10, v12);
          v16 = (void *)CFArrayGetValueAtIndex(v11, v12);
          if (!ValueAtIndex)
            ABCAddressBookDatabaseChanged_cold_1();
          if (v16 == v13)
            v17 = 0;
          else
            v17 = v16;
          invokeOnThread((void *)a2, ValueAtIndex, v17, (uint64_t)v15);
          ++v12;
        }
        while (v8 != v12);
        CFRelease(Copy);
        CFRelease(v10);
        CFRelease(v11);
      }
    }
  }
  return pthread_mutex_unlock(v3);
}

void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef addressBook, ABExternalChangeCallback callback, void *context)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;
  void *v14;
  CFIndex v15;
  ABExternalChangeCallback ValueAtIndex;
  void *v18;
  __CFNotificationCenter *LocalCenter;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)", 1925, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (addressBook)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)addressBook + 80));
    v12 = (const __CFArray *)*((_QWORD *)addressBook + 18);
    if (v12)
    {
      Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        if (context)
          v14 = context;
        else
          v14 = (void *)*MEMORY[0x1E0C9B0D0];
        v15 = Count + 1;
        while (1)
        {
          ValueAtIndex = (ABExternalChangeCallback)CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 18), v15 - 2);
          if (CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 19), v15 - 2) == v14 && ValueAtIndex == callback)
            break;
          if ((unint64_t)--v15 <= 1)
            goto LABEL_17;
        }
        v18 = (void *)CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 20), v15 - 2);
        releaseThreadHandle(v18);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 18), v15 - 2);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 19), v15 - 2);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 20), v15 - 2);
      }
LABEL_17:
      if (!CFArrayGetCount(*((CFArrayRef *)addressBook + 18)))
      {
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterRemoveObserver(LocalCenter, addressBook, CFSTR("ABCDataBaseChangedExternallyNotification"), 0);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)addressBook + 80));
    if (ABLogAPIUsage())
      _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)", 1963, CFSTR(">> "), 0, v20, v21, v22, v23);
  }
}

void ABAddressBookUnregisterAllExternalChangeCallbacks(CFMutableArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex Count;
  unint64_t v4;
  void *ValueAtIndex;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  __CFNotificationCenter *LocalCenter;

  v2 = a1[18];
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count + 1;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1[20], v4 - 2);
        releaseThreadHandle(ValueAtIndex);
        CFArrayRemoveValueAtIndex(a1[18], v4 - 2);
        CFArrayRemoveValueAtIndex(a1[19], v4 - 2);
        CFArrayRemoveValueAtIndex(a1[20], v4 - 2);
        --v4;
      }
      while (v4 > 1);
    }
    v6 = a1[18];
    if (v6)
    {
      CFRelease(v6);
      a1[18] = 0;
    }
  }
  v7 = a1[19];
  if (v7)
  {
    CFRelease(v7);
    a1[19] = 0;
  }
  v8 = a1[20];
  if (v8)
  {
    CFRelease(v8);
    a1[20] = 0;
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, CFSTR("ABCDataBaseChangedExternallyNotification"), 0);
}

void ABAddressBookUnregisterChangeCallback(uint64_t a1, const void *a2, const void *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)", 2025, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
    ABAddressBookUnregisterChangeCallback_cold_1();
  v12 = *(const __CFArray **)(a1 + 168);
  if (v12)
  {
    Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      v14 = Count;
      v15 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 168), v15);
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v15) == a3 && ValueAtIndex == a2)
          break;
        if (++v15 >= v14)
          return;
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 168), v15);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 176), v15);
    }
  }
}

void ABAddressBookUnregisterAllChangeCallbacks(uint64_t a1)
{
  __CFArray *v2;
  __CFArray *v3;

  if (!a1)
    ABAddressBookUnregisterAllChangeCallbacks_cold_1();
  v2 = *(__CFArray **)(a1 + 168);
  if (v2)
  {
    CFArrayRemoveAllValues(v2);
    CFRelease(*(CFTypeRef *)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  v3 = *(__CFArray **)(a1 + 176);
  if (v3)
  {
    CFArrayRemoveAllValues(v3);
    CFRelease(*(CFTypeRef *)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
  }
}

uint64_t ABAddressBookHasPendingTransaction()
{
  uint64_t result;

  CPRecordStoreGetDatabase();
  result = CPSqliteDatabaseConnectionForWriting();
  if (result)
    return sqlite3_get_autocommit(*(sqlite3 **)(result + 8)) == 0;
  return result;
}

void ABAddressBookRevert(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRevert(ABCAddressBookRef)", 2074, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (*((_QWORD *)addressBook + 2))
  {
    CPRecordStoreGetDatabase();
    if (CPSqliteDatabaseConnectionForWriting())
      CPSqliteConnectionRollback();
    CPRecordStoreRevert();
  }
  if (*((_QWORD *)addressBook + 3))
  {
    CPRecordStoreGetDatabase();
    if (CPSqliteDatabaseConnectionForWriting())
      CPSqliteConnectionRollback();
    CPRecordStoreRevert();
  }
  ABCAddressBookFlushPhoneCache((uint64_t)addressBook);
  *((_DWORD *)addressBook + 94) &= 0xFED81FFF;
}

uint64_t ABCAddressBookShouldAddMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t Policy;
  uint64_t ShouldAddMember;

  v6 = ABCGroupCopySource();
  if (!v6)
    return 1;
  v7 = (const void *)v6;
  Policy = ABSourceGetPolicy(v6);
  if (Policy)
    ShouldAddMember = ABPolicyShouldAddMember(Policy, a1, a2, a3);
  else
    ShouldAddMember = 1;
  CFRelease(v7);
  return ShouldAddMember;
}

uint64_t ABCAddressBookShouldSetValue(const void *a1, ABRecordRef record, uint64_t a3, void *a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t Policy;
  uint64_t ShouldSetValue;

  if (ABRecordGetRecordType(record))
    v8 = ABCGroupCopySource();
  else
    v8 = ABCPersonCopySource();
  v9 = (const void *)v8;
  if (!v8)
    return 1;
  Policy = ABSourceGetPolicy(v8);
  if (Policy)
    ShouldSetValue = ABPolicyShouldSetValue(Policy, a1, record, a3, a4, 0, 0);
  else
    ShouldSetValue = 1;
  CFRelease(v9);
  return ShouldSetValue;
}

_QWORD *ABAddressBookSetSectionDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  _QWORD *result;
  CFMutableDictionaryRef MutableCopy;
  const void *v6;
  _QWORD *v7;
  const __CFString *v8;
  const __CFString *v9;
  CFLocaleRef v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 248) = 1;
  result = *(_QWORD **)(a1 + 184);
  if (result != (_QWORD *)theDict)
  {
    if (result)
      CFRelease(result);
    if (theDict)
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    else
      MutableCopy = 0;
    *(_QWORD *)(a1 + 184) = MutableCopy;
    v6 = *(const void **)(a1 + 224);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 224) = 0;
    }
    result = (_QWORD *)ABCFTSIsEnabled();
    if ((_DWORD)result)
    {
      v7 = (_QWORD *)ABCCreateCollator(a1, 1);
      v8 = ABAddressBookCopyCollatorType(a1, 1);
      if (v8)
      {
        v9 = v8;
        v10 = CFLocaleCreate(0, v8);
        CFRelease(v9);
      }
      else
      {
        v10 = 0;
      }
      CPRecordStoreGetDatabase();
      v11 = CPSqliteDatabaseConnectionForReading();
      result = ABCFTSSetCollatorOverrideForDatabaseConnectionHandle(*(const void **)(v11 + 8), v7);
      if (v10)
        return ABCFTSSetLocaleOverrideForDatabaseConnectionHandle(*(const void **)(v11 + 8), v10);
    }
  }
  return result;
}

const __CFString *ABAddressBookCopyCollatorType(uint64_t a1, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFDictionary *v11;
  const __CFString *Value;
  const __CFString *LocaleIdentifierFromComponents;
  char v14;
  char v15;
  CFLocaleIdentifier v16;
  CFLocaleIdentifier v17;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyCollatorType(ABAddressBookRef, _Bool)", 2390, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  v10 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v10)
  {
    if ((a2 & 1) == 0)
      return 0;
LABEL_14:
    v15 = 1;
    v17 = ABCCopyUserLanguage();
    LocaleIdentifierFromComponents = 0;
    v16 = v17;
    goto LABEL_15;
  }
  v11 = v10;
  if (a2)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("ABSearchCollationKey"));
    if (Value)
    {
      LocaleIdentifierFromComponents = Value;
      v14 = 1;
LABEL_8:
      CFRetain(LocaleIdentifierFromComponents);
      goto LABEL_9;
    }
  }
  LocaleIdentifierFromComponents = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("ABCollationKey"));
  v14 = 0;
  if (LocaleIdentifierFromComponents)
    goto LABEL_8;
LABEL_9:
  CFRelease(v11);
  if ((v14 & 1) != 0 || !a2)
    return LocaleIdentifierFromComponents;
  if (!LocaleIdentifierFromComponents)
    goto LABEL_14;
  v15 = 0;
  v16 = 0;
  v17 = LocaleIdentifierFromComponents;
LABEL_15:
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B058], CFSTR("search"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9B088], v17);
  if ((v15 & 1) == 0)
    CFRelease(LocaleIdentifierFromComponents);
  LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(v18, Mutable);
  CFRelease(Mutable);
  if (v16)
    CFRelease(v16);
  return LocaleIdentifierFromComponents;
}

uint64_t ABAddressBookGetCollator(uint64_t a1)
{
  uint64_t *v1;
  CFTypeRef *v2;

  if (a1)
    v1 = (uint64_t *)(a1 + 192);
  else
    v1 = 0;
  if (a1)
    v2 = (CFTypeRef *)(a1 + 208);
  else
    v2 = 0;
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSortCollator__globalSortCollator, &ABAddressBookGetSortCollator__globalSortCollatorLocaleIdentifier, 0);
}

uint64_t ABAddressBookGetSortCollator(uint64_t a1)
{
  uint64_t *v1;
  CFTypeRef *v2;

  if (a1)
    v1 = (uint64_t *)(a1 + 192);
  else
    v1 = 0;
  if (a1)
    v2 = (CFTypeRef *)(a1 + 208);
  else
    v2 = 0;
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSortCollator__globalSortCollator, &ABAddressBookGetSortCollator__globalSortCollatorLocaleIdentifier, 0);
}

uint64_t _ABAddressBookGetCollator(uint64_t a1, uint64_t *a2, CFTypeRef *a3, uint64_t *a4, CFTypeRef *a5, int a6)
{
  CFLocaleIdentifier v12;
  CFLocaleIdentifier v13;
  uint64_t v14;
  uint64_t v15;

  v12 = ABCCopyUserLanguage();
  v13 = v12;
  if (a2)
  {
    if (a3 && v12 && *a3 && !CFEqual(v12, *a3))
    {
      if (*a2)
      {
        ABCReleaseCollator(*a2);
        *a2 = 0;
      }
      *a2 = ABCCreateCollator(a1, a6);
    }
    else
    {
      v14 = *a2;
      if (*a2)
        goto LABEL_26;
      v15 = ABCCreateCollator(a1, a6);
      *a2 = v15;
      if (!a3)
      {
LABEL_16:
        v14 = v15;
        goto LABEL_26;
      }
    }
    if (*a3)
      CFRelease(*a3);
    if (!v13)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!a4)
  {
    v14 = 0;
    goto LABEL_26;
  }
  if (a5 && v12 && *a5 && !CFEqual(v12, *a5))
  {
    if (*a4)
    {
      ABCReleaseCollator(*a4);
      *a4 = 0;
    }
    *a4 = ABCCreateCollator(a1, a6);
  }
  else
  {
    v14 = *a4;
    if (*a4)
      goto LABEL_26;
    v15 = ABCCreateCollator(a1, a6);
    *a4 = v15;
    if (!a5)
      goto LABEL_16;
  }
  if (*a5)
    CFRelease(*a5);
  a3 = a5;
  a2 = a4;
  if (v13)
LABEL_24:
    CFRetain(v13);
LABEL_25:
  *a3 = v13;
  v14 = *a2;
LABEL_26:
  if (v13)
    CFRelease(v13);
  return v14;
}

uint64_t ABAddressBookGetSearchCollator(uint64_t a1)
{
  uint64_t *v1;
  CFTypeRef *v2;

  if (a1)
    v1 = (uint64_t *)(a1 + 200);
  else
    v1 = 0;
  if (a1)
    v2 = (CFTypeRef *)(a1 + 216);
  else
    v2 = 0;
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSearchCollator__globalSearchCollator, &ABAddressBookGetSearchCollator__globalSearchCollatorLocaleIdentifier, 1);
}

CFStringTokenizerRef ABAddressBookGetWordTokenizer(uint64_t a1)
{
  CFStringTokenizerRef v2;
  const __CFString *v3;
  const __CFString *v4;
  CFLocaleRef v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFString *ValueAtIndex;
  const void *v9;
  const void *v10;
  const void *v11;
  CFRange v13;

  if (a1)
  {
    v2 = *(CFStringTokenizerRef *)(a1 + 224);
    v3 = ABAddressBookCopyCollatorType(a1, 1);
    if (v3)
    {
      v4 = v3;
      v5 = CFLocaleCreate(0, v3);
      CFRelease(v4);
      if (!v5)
        goto LABEL_21;
    }
    else
    {
      v6 = CFLocaleCopyPreferredLanguages();
      if (v6)
      {
        v7 = v6;
        if (CFArrayGetCount(v6))
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0);
          v5 = CFLocaleCreate(0, ValueAtIndex);
          CFRelease(v7);
          if (v5)
            goto LABEL_12;
        }
        else
        {
          CFRelease(v7);
        }
      }
      v5 = CFLocaleCopyCurrent();
      if (!v5)
      {
LABEL_21:
        *(_QWORD *)(a1 + 224) = v2;
        return v2;
      }
    }
LABEL_12:
    v9 = *(const void **)(a1 + 232);
    if (v9 && (v10 = (const void *)MEMORY[0x1A1ACB41C](v5), !CFEqual(v9, v10)))
    {
      if (v2)
        CFRelease(v2);
      CFRelease(*(CFTypeRef *)(a1 + 232));
      *(_QWORD *)(a1 + 232) = 0;
    }
    else if (v2)
    {
LABEL_20:
      CFRelease(v5);
      goto LABEL_21;
    }
    v13.location = 0;
    v13.length = 0;
    v2 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &stru_1E3CA4E68, v13, 0x810000uLL, v5);
    v11 = (const void *)MEMORY[0x1A1ACB41C](v5);
    *(_QWORD *)(a1 + 232) = CFRetain(v11);
    goto LABEL_20;
  }
  return 0;
}

const __CFArray *ABAddressBookCopySectionInfoDictionary(uint64_t a1)
{
  CFLocaleIdentifier v2;
  CFLocaleIdentifier v3;
  const void *v4;
  int v5;
  const void *v7;
  CFTypeRef v8;

  if (!a1)
    return ABAddressBookCreateSectionHeaderDictionary();
  v2 = ABCCopyUserLanguage();
  v3 = v2;
  v4 = *(const void **)(a1 + 184);
  if (!v4)
    goto LABEL_9;
  if (!*(_BYTE *)(a1 + 248))
  {
    v5 = CFEqual(v2, *(CFTypeRef *)(a1 + 240));
    v4 = *(const void **)(a1 + 184);
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)(a1 + 184));
      *(_QWORD *)(a1 + 184) = 0;
      goto LABEL_9;
    }
    if (!v4)
    {
LABEL_9:
      *(_QWORD *)(a1 + 184) = ABAddressBookCreateSectionHeaderDictionary();
      v7 = *(const void **)(a1 + 240);
      if (v7)
        CFRelease(v7);
      if (v3)
        v8 = CFRetain(v3);
      else
        v8 = 0;
      *(_QWORD *)(a1 + 240) = v8;
      v4 = *(const void **)(a1 + 184);
      if (!v4)
        goto LABEL_16;
    }
  }
  CFRetain(v4);
LABEL_16:
  if (v3)
    CFRelease(v3);
  return (const __CFArray *)v4;
}

const void *ABAddressBookCopySectionIndices(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *Value;
  const void *v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySectionIndices(ABAddressBookRef)", 2427, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8)
    return 0;
  v9 = v8;
  Value = CFDictionaryGetValue(v8, CFSTR("SectionIndices"));
  v11 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopySectionHeaderDictionaries(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const void *Value;
  __CFArray *v17;
  __CFArray *v18;
  const void *v19;
  uint64_t Count;
  const __CFAllocator *v21;
  const CFArrayCallBacks *v22;
  CFIndex v23;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v25;
  __CFArray *MutableCopy;
  __CFArray *v27;
  uint64_t v28;
  CFIndex i;
  const __CFString *v30;
  const char *v31;
  const char *v32;
  _QWORD *v34;
  _QWORD *v35;
  __CFArray *Mutable;
  __CFArray *theArray;
  const __CFAllocator *allocator;
  uint64_t v39;
  CFRange v40;
  CFRange v41;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySectionHeaderDictionaries(ABAddressBookRef, CFArrayRef *, CFArrayRef *, UCollator *)", 2469, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  v14 = ABAddressBookCopySectionInfoDictionary(a1);
  if (v14)
  {
    v15 = v14;
    Value = CFDictionaryGetValue(v14, CFSTR("SectionHeaders"));
    if (!Value)
    {
LABEL_34:
      CFRelease(v15);
      return Value;
    }
    if (!(a2 | a3))
    {
LABEL_33:
      CFRetain(Value);
      goto LABEL_34;
    }
    v17 = (__CFArray *)CFDictionaryGetValue(v15, CFSTR("LanguageSortedSectionHeaders"));
    v18 = v17;
    if (v17)
    {
      CFRetain(v17);
      v19 = CFDictionaryGetValue(v15, CFSTR("LanguageSortedSectionHeaderSortKeys"));
      if (!v19)
      {
LABEL_12:
        if (a2)
        {
LABEL_13:
          *(_QWORD *)a2 = v18;
LABEL_29:
          if (a3)
          {
            *(_QWORD *)a3 = v19;
          }
          else if (v19)
          {
            CFRelease(v19);
          }
          goto LABEL_33;
        }
LABEL_27:
        if (v18)
          CFRelease(v18);
        goto LABEL_29;
      }
    }
    else
    {
      v19 = CFDictionaryGetValue(v15, CFSTR("LanguageSortedSectionHeaderSortKeys"));
      if (!v19)
      {
        v34 = (_QWORD *)a2;
        v35 = (_QWORD *)a3;
        Count = CFArrayGetCount((CFArrayRef)Value);
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v22 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
        allocator = v21;
        Mutable = CFArrayCreateMutable(v21, Count, v22);
        v39 = Count;
        if (Count >= 1)
        {
          v23 = 0;
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v23);
            v25 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Headers"));
            MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v25);
            v27 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            v28 = CFArrayGetCount(v25);
            if (v28 >= 1)
            {
              for (i = 0; i != v28; ++i)
              {
                v30 = (const __CFString *)CFArrayGetValueAtIndex(v25, i);
                v31 = ABCreateDataSortKey(v30, (uint64_t)a4, 0);
                if (v31)
                {
                  v32 = v31;
                  CFArrayAppendValue(v27, v31);
                  CFRelease(v32);
                }
              }
            }
            v40.location = 0;
            v40.length = v28;
            CFArraySortValues(MutableCopy, v40, (CFComparatorFunction)ABCompareStringsUsingICUSortKey, a4);
            v41.location = 0;
            v41.length = v28;
            CFArraySortValues(v27, v41, (CFComparatorFunction)ABCompareDataSortKeys, a4);
            if (MutableCopy)
            {
              CFArrayAppendValue(theArray, MutableCopy);
              CFRelease(MutableCopy);
            }
            if (v27)
            {
              CFArrayAppendValue(Mutable, v27);
              CFRelease(v27);
            }
            ++v23;
          }
          while (v23 != v39);
        }
        v18 = theArray;
        CFDictionarySetValue(v15, CFSTR("LanguageSortedSectionHeaders"), theArray);
        v19 = Mutable;
        CFDictionarySetValue(v15, CFSTR("LanguageSortedSectionHeaderSortKeys"), Mutable);
        a2 = (unint64_t)v34;
        a3 = (unint64_t)v35;
        if (v34)
          goto LABEL_13;
        goto LABEL_27;
      }
    }
    CFRetain(v19);
    goto LABEL_12;
  }
  return 0;
}

const void *ABAddressBookCopyLocalizedSectionIndexDictionary(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *Value;
  const void *v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedSectionIndexDictionary(ABAddressBookRef)", 2530, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8)
    return 0;
  v9 = v8;
  Value = CFDictionaryGetValue(v8, CFSTR("LocalizedSectionIndices"));
  v11 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopyLocalizedSectionHeaderDictionary(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *Value;
  const void *v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedSectionHeaderDictionary(ABAddressBookRef)", 2544, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8)
    return 0;
  v9 = v8;
  Value = CFDictionaryGetValue(v8, CFSTR("LocalizedSectionHeaders"));
  v11 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopySectionNameTransform(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopySectionNameTransform(ABAddressBookRef)", 2573, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _ABAddressBookCopySectionPropertyValue(a1, CFSTR("NameTransform"));
}

const void *_ABAddressBookCopySectionPropertyValue(uint64_t a1, const void *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const void *Value;
  const void *v6;

  v3 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v3)
    return 0;
  v4 = v3;
  Value = CFDictionaryGetValue(v3, a2);
  v6 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v4);
  return v6;
}

const void *ABAddressBookCopySearchTransform(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopySearchTransform(ABAddressBookRef)", 2579, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _ABAddressBookCopySectionPropertyValue(a1, CFSTR("SearchTransform"));
}

BOOL ABAddressBookShouldUseExtraTokenizations(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFBoolean *v8;
  const __CFBoolean *v9;
  CFTypeID v10;
  _BOOL8 v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookShouldUseExtraTokenizations(ABAddressBookRef)", 2585, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = (const __CFBoolean *)_ABAddressBookCopySectionPropertyValue(a1, CFSTR("ABUseExtraTokenizations"));
  if (!v8)
    return 0;
  v9 = v8;
  v10 = CFGetTypeID(v8);
  if (v10 == CFBooleanGetTypeID())
  {
    v11 = CFBooleanGetValue(v9) != 0;
  }
  else
  {
    fwrite("The ABContactSections plist contains an entry of the wrong type for \"ABUseExtraTokenizations\" it should be a BOOLean value. Ignoring:", 0x85uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    CFShow(v9);
    v11 = 0;
  }
  CFRelease(v9);
  return v11;
}

void ABDatabaseChangedByOtherProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  pthread_mutex_lock(&__darwinNotificationLock);
  if (_darwinNotificationCancellationCount < 1)
  {
    pthread_mutex_unlock(&__darwinNotificationLock);
    _ABCPostDatabaseChangedNotification(a5, 0);
  }
  else
  {
    --_darwinNotificationCancellationCount;
    pthread_mutex_unlock(&__darwinNotificationLock);
  }
}

void ABCDestroyAddressBook(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  void **v18;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
      ABCDBContextDestroy();
    if (*(_QWORD *)(a1 + 24))
      CPRecordStoreDestroy();
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = *(const void **)(a1 + 48);
      if (v2)
        CFRelease(v2);
      v3 = *(const void **)(a1 + 56);
      if (v3)
        CFRelease(v3);
      CFRelease(*(CFTypeRef *)(a1 + 40));
    }
    v4 = *(const void **)(a1 + 184);
    if (v4)
      CFRelease(v4);
    v5 = *(_QWORD *)(a1 + 192);
    if (v5)
      ABCReleaseCollator(v5);
    v6 = *(const void **)(a1 + 208);
    if (v6)
      CFRelease(v6);
    v7 = *(_QWORD *)(a1 + 200);
    if (v7)
      ABCReleaseCollator(v7);
    v8 = *(const void **)(a1 + 216);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(a1 + 240);
    if (v9)
      CFRelease(v9);
    v10 = *(const void **)(a1 + 224);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(a1 + 232);
    if (v11)
      CFRelease(v11);
    v12 = *(const void **)(a1 + 64);
    if (v12)
      CFRelease(v12);
    v13 = *(const void **)(a1 + 72);
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(a1 + 256);
    if (v14)
      CFRelease(v14);
    v15 = *(const void **)(a1 + 360);
    if (v15)
      CFRelease(v15);
    if (*(_QWORD *)(a1 + 272))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
      v16 = *(const void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = 0;
      _Block_release(v16);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
    }
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 280));
    v17 = *(const void **)(a1 + 344);
    if (v17)
      CFRelease(v17);
    v18 = *(void ***)(a1 + 368);
    if (v18)
    {
      if (v18[10])
      {
        free(v18[10]);
        v18 = *(void ***)(a1 + 368);
      }
      free(v18);
    }
    ABAddressBookUnregisterAllExternalChangeCallbacks((CFMutableArrayRef *)a1);
    ABAddressBookUnregisterAllChangeCallbacks(a1);
  }
}

uint64_t _prepareSourceForDeletion(uint64_t a1, ABRecordRef record)
{
  ABRecordID RecordID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  RecordID = ABRecordGetRecordID(record);
  if (RecordID == ABAddressBookGetIntegerProperty(a1))
    ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("MeSourceID"), 0xFFFFFFFFLL, v5, v6, v7, v8, v9, v11);
  result = _ABAddressBookDeleteAllRecordsWithStore(a1, record, 1);
  *(_DWORD *)(a1 + 376) |= 0x100000u;
  return result;
}

void ___createStartABDatabaseDoctorCoalescingTimer_block_invoke()
{
  void *v0;
  __CFMessagePort *Remote;
  __CFMessagePort *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = (void *)MEMORY[0x1A1ACC34C]();
  Remote = CFMessagePortCreateRemote((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.ABDatabaseDoctor"));
  if (Remote)
  {
    v2 = Remote;
    CFMessagePortSendRequest(Remote, 1, 0, 1.0, 0.0, 0, 0);
    CFRelease(v2);
  }
  else
  {
    v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ___createStartABDatabaseDoctorCoalescingTimer_block_invoke_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  objc_autoreleasePoolPop(v0);
}

uint64_t _createDefaultCoalescingTimerForDarwinNotification(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[5];

  v2 = (void *)MEMORY[0x1A1ACC34C]();
  v3 = (void *)objc_msgSend(MEMORY[0x1E0D13B70], "defaultProvider");
  v4 = objc_alloc(MEMORY[0x1E0D139C8]);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___createDefaultCoalescingTimerForDarwinNotification_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = a1;
  v5 = objc_msgSend(v4, "initWithDelay:options:block:schedulerProvider:downstreamScheduler:", 1, v7, v3, objc_msgSend(v3, "backgroundScheduler"), 1.0);
  objc_autoreleasePoolPop(v2);
  return v5;
}

void ___createDefaultCoalescingTimerForDarwinNotification_block_invoke(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, *(CFNotificationName *)(a1 + 32), 0, 0, 1u);
}

const __CFArray *ABAddressBookCreateSectionHeaderDictionary()
{
  __CFBundle *v0;
  CFArrayRef v1;
  const __CFArray *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  const __CFString *ValueAtIndex;
  __CFBundle *v11;
  CFURLRef v12;
  const __CFAllocator *v13;
  __CFReadStream *v14;
  __CFReadStream *v15;

  v0 = (__CFBundle *)_ABBundle();
  v1 = CFBundleCopyBundleLocalizations(v0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (const __CFArray *)CFPreferencesCopyAppValue(CFSTR("AppleLanguages"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  if (v3)
  {
    v4 = v3;
    if (CFArrayGetCount(v3))
    {
      v5 = CFBundleCopyLocalizationsForPreferences(v2, v4);
      CFRelease(v4);
      if (!v5)
      {
LABEL_5:
        v6 = v2;
LABEL_22:
        CFRelease(v6);
        return v5;
      }
      goto LABEL_8;
    }
    CFRelease(v4);
  }
  v5 = CFBundleCopyLocalizationsForPreferences(v2, 0);
  if (!v5)
    goto LABEL_5;
LABEL_8:
  Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    v6 = 0;
  }
  else
  {
    v8 = Count;
    v9 = 1;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9 - 1);
      v11 = (__CFBundle *)_ABBundle();
      v12 = CFBundleCopyResourceURLForLocalization(v11, CFSTR("ABContactSections"), CFSTR("plist"), 0, ValueAtIndex);
      v6 = v12;
      if (v9 >= v8)
        break;
      ++v9;
    }
    while (!v12);
  }
  CFRelease(v5);
  CFRelease(v2);
  if (v6)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    if (v14)
    {
      v15 = v14;
      if (CFReadStreamOpen(v14))
        v5 = (const __CFArray *)CFPropertyListCreateWithStream(v13, v15, 0, 1uLL, 0, 0);
      else
        v5 = 0;
      CFRelease(v15);
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_22;
  }
  return 0;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

CFArrayRef ABCGroupCopyArrayOfAllMembersWithSortOrdering(uint64_t a1, int a2)
{
  uint64_t Value;

  if (!a1)
    return 0;
  if (ABCRecordGetValue(a1, kABCFetchSortOrderProperty) - 1 != a2)
  {
    CPRecordInitializeProperty();
    CPRecordUnloadProperty();
  }
  Value = ABCRecordGetValue(a1, kABCMembersProperty);
  if (Value)
    return ABCMultiValueCopyValues(Value);
  else
    return 0;
}

CFArrayRef ABCGroupCopyArrayFromProperty(uint64_t a1, uint64_t a2)
{
  uint64_t Value;

  if (a1 && (Value = ABCRecordGetValue(a1, a2)) != 0)
    return ABCMultiValueCopyValues(Value);
  else
    return 0;
}

CFArrayRef ABCGroupCopyArrayOfAllMembers(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCMembersProperty);
}

CFArrayRef ABCGroupCopyArrayOfAllSubgroups(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCSubgroupsProperty);
}

CFArrayRef ABCGroupCopyArrayOfAllMembersAndSubgroups(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCMembersAndSubgroupsProperty);
}

uint64_t ABCGroupGetRecordForUniqueID(uint64_t result)
{
  if (result)
    return ABCDBContextRecordForUIDOfType();
  return result;
}

uint64_t ABCGroupCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result)
    return ABCDBContextCopyRecordsForUUIDsOfType(*(_QWORD *)(result + 16), a2, (__int128 *)ABCGroupClass[0]);
  return result;
}

uint64_t ABCGroupAddMemberOrSubgroup(const void *a1, const void *a2)
{
  uint64_t Policy;
  uint64_t v5;
  uint64_t v6;
  ABRecordRef v7;
  ABRecordRef v8;
  ABRecordRef v9;
  ABRecordRef v10;
  int v11;
  _BOOL4 v12;
  uint64_t Value;
  const __CFArray *Mutable;
  CFIndex FirstIndexOfValue;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFRange v20;
  CFRange v21;

  if (ABRecordGetRecordID(a1) == -1)
    goto LABEL_11;
  Policy = ABRecordGetPolicy(a1);
  if (Policy)
  {
    v5 = Policy;
    v6 = ABCGetAddressBookForRecord();
    if (!ABPolicyShouldAddMember(v5, v6, (uint64_t)a1, (uint64_t)a2))
      goto LABEL_11;
  }
  v7 = ABGroupCopySource(a1);
  if (!v7)
    goto LABEL_11;
  v8 = v7;
  if (ABCRecordGetRecordType() == 257)
    v9 = ABPersonCopySource(a2);
  else
    v9 = ABGroupCopySource(a2);
  v10 = v9;
  if (v9)
    CFRelease(v9);
  CFRelease(v8);
  if (v8 == v10)
  {
    Value = ABCRecordGetValue(a1, kABCAddedMembersAndSubgroupsProperty);
    Mutable = (const __CFArray *)Value;
    if (Value
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) != 0)
    {
      v20.length = CFArrayGetCount(Mutable);
      v20.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v20, a2);
      v12 = FirstIndexOfValue != -1;
      if (FirstIndexOfValue == -1)
      {
        CFArrayAppendValue(Mutable, a2);
        ABCRecordSetValue(a1, kABCAddedMembersAndSubgroupsProperty, (__CFString *)Mutable);
      }
      if (!Value)
        CFRelease(Mutable);
      v17 = (const __CFArray *)ABCRecordGetValue(a1, kABCRemovedMembersAndSubgroupsProperty);
      if (v17)
      {
        v18 = v17;
        v21.length = CFArrayGetCount(v17);
        v21.location = 0;
        v19 = CFArrayGetFirstIndexOfValue(v18, v21, a2);
        if ((v19 & 0x8000000000000000) == 0)
        {
          CFArrayRemoveValueAtIndex(v18, v19);
          ABCRecordSetValue(a1, kABCRemovedMembersAndSubgroupsProperty, (__CFString *)v18);
        }
      }
    }
    else
    {
      v12 = 0;
    }
    v11 = 1;
  }
  else
  {
LABEL_11:
    v11 = 0;
    v12 = 0;
  }
  return v11 & !v12;
}

uint64_t ABCGroupAddMember(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() == 257)
    return ABCGroupAddMemberOrSubgroup(a1, a2);
  else
    return 0;
}

uint64_t ABCGroupAddMemberAndReturnError(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() == 257)
    return ABCGroupAddMemberOrSubgroup(a1, a2);
  else
    return 0;
}

uint64_t ABCGroupRemoveMemberAndReturnError(const void *a1, const void *a2)
{
  uint64_t Policy;
  uint64_t v5;
  uint64_t v6;
  uint64_t Value;
  const __CFArray *Mutable;
  CFIndex FirstIndexOfValue;
  _BOOL4 v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex v13;
  int v14;
  CFRange v16;
  CFRange v17;

  Policy = ABRecordGetPolicy(a1);
  if (Policy)
  {
    v5 = Policy;
    v6 = ABCGetAddressBookForRecord();
    if (!ABPolicyShouldRemoveMember(v5, v6, (uint64_t)a1, (uint64_t)a2))
    {
      v14 = 0;
      v10 = 0;
      return v14 & !v10;
    }
  }
  Value = ABCRecordGetValue(a1, kABCRemovedMembersAndSubgroupsProperty);
  Mutable = (const __CFArray *)Value;
  if (Value || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) != 0)
  {
    v16.length = CFArrayGetCount(Mutable);
    v16.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v16, a2);
    v10 = FirstIndexOfValue != -1;
    if (FirstIndexOfValue == -1)
    {
      CFArrayAppendValue(Mutable, a2);
      ABCRecordSetValue(a1, kABCRemovedMembersAndSubgroupsProperty, (__CFString *)Mutable);
      if (Value)
        goto LABEL_7;
    }
    else if (Value)
    {
LABEL_7:
      v11 = (const __CFArray *)ABCRecordGetValue(a1, kABCAddedMembersAndSubgroupsProperty);
      if (v11)
      {
        v12 = v11;
        v17.length = CFArrayGetCount(v11);
        v17.location = 0;
        v13 = CFArrayGetFirstIndexOfValue(v12, v17, a2);
        if ((v13 & 0x8000000000000000) == 0)
        {
          CFArrayRemoveValueAtIndex(v12, v13);
          ABCRecordSetValue(a1, kABCAddedMembersAndSubgroupsProperty, (__CFString *)v12);
        }
      }
      goto LABEL_10;
    }
    CFRelease(Mutable);
    goto LABEL_7;
  }
  v10 = 0;
LABEL_10:
  v14 = 1;
  return v14 & !v10;
}

uint64_t ABCGroupAddSubgroup(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() == 258)
    return ABCGroupAddMemberOrSubgroup(a1, a2);
  else
    return 0;
}

const __CFString *ABCGroupNameForProperty(int a1)
{
  if (kABGroupNameProperty == a1)
    return CFSTR("Name");
  if (kABGroupExternalIdentifierProperty == a1)
    return CFSTR("ExternalIdentifier");
  if (kABGroupExternalModificationTagProperty == a1)
    return CFSTR("ExternalModificationTag");
  if (kABGroupExternalRepresentationProperty == a1)
    return CFSTR("ExternalRepresentation");
  if (kABGroupExternalUUIDProperty == a1)
    return CFSTR("ExternalUUID");
  if (kABGroupInternalUUIDProperty == a1)
    return CFSTR("guid");
  return CFSTR("UNKNOWN_PROPERTY");
}

uint64_t ABCGroupCreateNewGroup()
{
  ABCInitializeLibrary();
  return CPRecordCreate();
}

uint64_t ABCGroupCreateNewGroupAndReturnError()
{
  ABCInitializeLibrary();
  return CPRecordCreate();
}

const void *ABCGroupCreateNewGroupInSourceAndReturnError(uint64_t a1, const void *a2, CFErrorRef *a3)
{
  const void *v6;
  const void *Policy;

  ABCInitializeLibrary();
  v6 = (const void *)CPRecordCreate();
  if (a2)
  {
    if ((ABSourceIsContentReadonly((uint64_t)a2) & 1) != 0
      || (Policy = ABCSourceGetPolicy(a2)) != 0
      && !ABPolicyShouldAddRecord((uint64_t)Policy, a1, (uint64_t)v6, 0))
    {
      if (a3)
        *a3 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
      CFRelease(v6);
      return 0;
    }
    else
    {
      CPRecordSetProperty();
    }
  }
  return v6;
}

uint64_t ABCGroupPrepareToAddToAddressBook(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t ShouldAddRecord;
  ABRecordRef v10;
  const void *Policy;

  v6 = ABCGroupCopySource();
  if (v6)
  {
    v7 = (const void *)v6;
  }
  else
  {
    v10 = ABAddressBookCopyDefaultSource(a2);
    if (!v10)
      return 1;
    v7 = v10;
    CPRecordSetProperty();
    if ((ABRecordGetIntValue((uint64_t)v7, kABSourceTypeProperty) & 0x1000000) != 0)
    {
      ShouldAddRecord = 0;
      goto LABEL_4;
    }
    Policy = ABCSourceGetPolicy(v7);
    if (Policy)
    {
      ShouldAddRecord = ABPolicyShouldAddRecord((uint64_t)Policy, (uint64_t)a2, a1, a3);
      goto LABEL_4;
    }
  }
  ShouldAddRecord = 1;
LABEL_4:
  CFRelease(v7);
  return ShouldAddRecord;
}

uint64_t ABCGroupCopySource()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  const void *RecordForUniqueID;

  v0 = ABCGetAddressBookForRecord();
  v1 = CPRecordCopyProperty();
  if (v1)
    v2 = 1;
  else
    v2 = v0 == 0;
  if (!v2)
  {
    if (CPRecordGetProperty() == -1)
    {
      return 0;
    }
    else
    {
      RecordForUniqueID = (const void *)ABCSourceGetRecordForUniqueID(v0);
      v1 = (uint64_t)RecordForUniqueID;
      if (RecordForUniqueID)
        CFRetain(RecordForUniqueID);
    }
  }
  return v1;
}

uint64_t ABCCopyArrayOfAllGroupsInSource(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (!a2 || ABCRecordGetUniqueId(a2) == -1)
      return CPRecordStoreCopyAllInstancesOfClass();
    else
      return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  }
  return result;
}

uint64_t ABCCopyArrayOfAllGroups(uint64_t result)
{
  if (result)
    return CPRecordStoreCopyAllInstancesOfClass();
  return result;
}

uint64_t ABCCopyArrayOfAllGroupsWithSortOrdering(uint64_t result)
{
  if (result)
    return CPRecordStoreCopyAllInstancesOfClassWhere();
  return result;
}

uint64_t ABCCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(uint64_t a1, unsigned int a2, int a3, CFArrayRef theArray)
{
  uint64_t v4;
  CFIndex Count;
  __CFString *Mutable;
  __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFIndex v14;
  uint64_t i;
  const __CFString *v16;

  v4 = 0;
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v4 = 0;
      if (a2 <= 1)
      {
        if (Count)
        {
          Mutable = CFStringCreateMutable(0, 0);
          v10 = Mutable;
          v11 = CFSTR("1");
          if (!a2)
            v11 = CFSTR("0");
          v12 = CFSTR("ABGroup");
          if (!a2)
            v12 = CFSTR("ABPerson");
          v13 = &stru_1E3CA4E68;
          if (a3)
            v13 = CFSTR("RECURSIVE");
          CFStringAppendFormat(Mutable, 0, CFSTR(" WHERE ROWID IN (WITH %@ direct_members(groupid) AS (SELECT  abgm.group_id FROM ABGroupMembers abgm JOIN %@ abr ON abgm.member_type = %@ AND abgm.member_id = abr.ROWID WHERE abr.guid IN("), v13, v12, v11);
          v14 = CFArrayGetCount(theArray);
          if (v14 >= 1)
          {
            for (i = 0; i != v14; ++i)
            {
              if (i)
                v16 = CFSTR(", ?");
              else
                v16 = CFSTR("?");
              CFStringAppend(v10, v16);
            }
          }
          CFStringAppend(v10, CFSTR("))"));
          if (a3)
            CFStringAppendFormat(v10, 0, CFSTR(", ancestor_group(a_groupid) AS (SELECT groupid FROM direct_members UNION SELECT abgm.group_id FROM ABGroupMembers abgm JOIN ABGroup abg ON abgm.member_type = 1 AND abgm.member_id = abg.ROWID JOIN ancestor_group ag ON ag.a_groupid = abgm.member_id) SELECT a_groupid FROM ancestor_group)"));
          else
            CFStringAppendFormat(v10, 0, CFSTR(" SELECT groupid FROM direct_members)"));
          v4 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
          if (v10)
            CFRelease(v10);
        }
      }
    }
  }
  return v4;
}

uint64_t ABCGroupCopyCompositeName(uint64_t a1)
{
  return ABCRecordCopyValue(a1, kABCNameProperty);
}

uint64_t ABCGroupDelete(int a1)
{
  uint64_t result;

  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a1);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    return CPSqliteDatabaseReleaseSqliteStatement();
  }
  return result;
}

uint64_t ABCGroupTypeOfProperty(int a1)
{
  return *(unsigned int *)&ABCGroupClass[0][10][40 * a1 + 32];
}

uint64_t _prepareGroupForSave()
{
  uint64_t result;

  result = CPRecordGetProperty();
  if (result)
  {
    CPRecordGetID();
    return CPRecordSetProperty();
  }
  return result;
}

void showMembersAndSubgroups(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  CFIndex v5;
  FILE **v6;
  const __CFArray *v7;
  FILE *v8;
  const char *v9;
  int ID;

  if (a1)
  {
    Count = ABCMultiValueGetCount((uint64_t)a1);
    v3 = Count - 1;
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      v6 = (FILE **)MEMORY[0x1E0C80C10];
      do
      {
        v7 = ABCMultiValueCopyValueAtIndex(a1, v5);
        v8 = *v6;
        if (ABCRecordGetRecordType() == 257)
          v9 = "person";
        else
          v9 = "group";
        ID = CPRecordGetID();
        fprintf(v8, "%s %d", v9, ID);
        if (v7)
          CFRelease(v7);
        if (v5 < v3)
          fwrite(", ", 2uLL, 1uLL, *v6);
        ++v5;
      }
      while (v4 != v5);
    }
  }
}

uint64_t loadMembersAndSubgroups(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *Mutable;
  sqlite3_stmt *v7;
  int ID;
  const void *v9;

  if (a3)
  {
    v4 = result;
    result = ABCRecordGetValue(result, kABCFetchSortOrderProperty);
    if (v4)
    {
      if (a2)
      {
        result = CPSqliteConnectionStatementForSQL();
        if (result)
        {
          v5 = result;
          Mutable = ABCMultiValueCreateMutable(2);
          if (Mutable)
          {
            v9 = Mutable;
            ABCGetAddressBookForRecord();
            v7 = *(sqlite3_stmt **)(v5 + 8);
            ID = CPRecordGetID();
            sqlite3_bind_int(v7, 1, ID);
            CPSqliteStatementSendResults();
            CPSqliteStatementReset();
            ABCRecordSetContents();
            CFRelease(v9);
          }
          return CPSqliteDatabaseReleaseSqliteStatement();
        }
      }
    }
  }
  return result;
}

uint64_t addMemberFromUID(uint64_t a1, CFMutableArrayRef **a2)
{
  CFMutableArrayRef *v3;
  void *v4;

  v3 = *a2;
  sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v4 = (void *)ABCDBContextRecordForUIDOfType();
  if (v4)
    ABCMultiValueAdd(v3, v4, &stru_1E3CA4E68, 0, 0);
  return 0;
}

CFMutableArrayRef ArrayCopy(CFArrayRef theArray)
{
  return CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
}

const __CFArray *saveAddedMembersAndSubgroups(const __CFArray *result, int a2, uint64_t a3)
{
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFIndex i;
  sqlite3_stmt *v8;
  int ID;
  sqlite3_stmt *v10;
  _BOOL4 v11;
  sqlite3_stmt *v12;
  int v13;

  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        result = (const __CFArray *)ABCRecordGetValue(result, kABCAddedMembersAndSubgroupsProperty);
        if (result)
        {
          v3 = result;
          Count = CFArrayGetCount(result);
          v5 = CPSqliteConnectionStatementForSQL();
          if (v5)
          {
            v6 = v5;
            if (Count >= 1)
            {
              for (i = 0; i != Count; ++i)
              {
                CFArrayGetValueAtIndex(v3, i);
                v8 = *(sqlite3_stmt **)(v6 + 8);
                ID = CPRecordGetID();
                sqlite3_bind_int(v8, 1, ID);
                v10 = *(sqlite3_stmt **)(v6 + 8);
                v11 = ABCPersonClass != (__int128 *)CPRecordGetClass();
                sqlite3_bind_int(v10, 2, v11);
                v12 = *(sqlite3_stmt **)(v6 + 8);
                v13 = CPRecordGetID();
                sqlite3_bind_int(v12, 3, v13);
                CPSqliteStatementPerform();
                CPSqliteStatementReset();
              }
            }
            CPSqliteDatabaseReleaseSqliteStatement();
          }
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          return (const __CFArray *)CPRecordUnloadProperty();
        }
      }
    }
  }
  return result;
}

const __CFArray *saveRemovedMembersAndSubgroups(const __CFArray *result, int a2, uint64_t a3)
{
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  CFIndex i;
  sqlite3_stmt *v8;
  int ID;
  sqlite3_stmt *v10;
  int v11;

  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        result = (const __CFArray *)ABCRecordGetValue(result, kABCRemovedMembersAndSubgroupsProperty);
        if (result)
        {
          v3 = result;
          Count = CFArrayGetCount(result);
          v5 = CPSqliteConnectionStatementForSQL();
          if (v5)
          {
            v6 = v5;
            if (Count >= 1)
            {
              for (i = 0; i != Count; ++i)
              {
                CFArrayGetValueAtIndex(v3, i);
                v8 = *(sqlite3_stmt **)(v6 + 8);
                ID = CPRecordGetID();
                sqlite3_bind_int(v8, 1, ID);
                v10 = *(sqlite3_stmt **)(v6 + 8);
                v11 = CPRecordGetID();
                sqlite3_bind_int(v10, 2, v11);
                CPSqliteStatementPerform();
                CPSqliteStatementReset();
              }
            }
            CPSqliteDatabaseReleaseSqliteStatement();
          }
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          return (const __CFArray *)CPRecordUnloadProperty();
        }
      }
    }
  }
  return result;
}

uint64_t _configureImageDatabase(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      CPRecordStoreCreateTablesForClass();
      CPRecordStoreCreateTablesForClass();
      CPSqliteConnectionPerformSQL();
      return CPSqliteConnectionPerformSQL();
    }
  }
  return result;
}

uint64_t _databaseDeleted(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  NSObject *global_queue;

  ABDiagnosticsEnabled();
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 141, 0, (uint64_t)CFSTR("image database was deleted, %@"), v4, v5, v6, *a1);
  result = ABDatabaseIntegrityResolutionRecorder(1);
  if (!a2)
  {
    result = os_variant_has_internal_content();
    if ((_DWORD)result)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, &__block_literal_global_0);
      return sleep(1u);
    }
  }
  return result;
}

BOOL _imageStoreMigrationCheckDatabaseVersion(uint64_t a1, uint64_t a2, int a3)
{
  return a3 < 8;
}

uint64_t _imageStoreMigrationMigrateDatabase(uint64_t a1, uint64_t a2, int a3, __CFArray *a4)
{
  const __CFAllocator *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const UInt8 *v15;
  int v16;
  const __CFData *v17;
  const __CFData *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _BOOL4 IsLessThanOrEqualToPixelSize;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  sqlite3_stmt *v31;
  const UInt8 *BytePtr;
  int Length;
  int v34;
  int v35;
  int v36;
  signed int v37;
  const UInt8 *v38;
  int v39;
  const __CFData *v40;
  int v41;
  int v42;
  double v43;
  double PixelWidth;
  double PixelHeight;
  double v46;
  CGImageRef ImageFromImageSourceWithSizeCropRectMaxSize;
  CGImage *v48;
  float Scale;
  __CFData *ScaledImageData;
  sqlite3_stmt *v51;
  const UInt8 *v52;
  int v53;
  double v54;
  signed int width;
  signed int height;
  int v57;
  int *v58;
  int v59;
  int v60;
  CGImageRef v61;
  CGImage *v62;
  float v63;
  __CFData *v64;
  const __CFData *v65;
  sqlite3_stmt *v66;
  const UInt8 *v67;
  int v68;
  int v69;
  const __CFAllocator *v70;
  __CFArray *Mutable;
  CFMutableArrayRef v72;
  __CFArray *v73;
  BOOL v74;
  const UInt8 *v75;
  int v76;
  const __CFData *v77;
  const __CFData *v78;
  const void *v79;
  const void *v80;
  __CFString *v81;
  __CFString *v82;
  CFIndex Count;
  uint64_t v84;
  CFIndex v85;
  sqlite3 *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CFIndex v91;
  sqlite3_stmt *v92;
  CFIndex v93;
  int ValueAtIndex;
  uint64_t v96;
  const __CFData *v97;
  int v98;
  double v99;
  double v100;
  const __CFAllocator *allocator;
  int v102;
  CFTypeRef cf;
  int v104;
  sqlite3_stmt *v105;
  sqlite3_stmt *pStmt;
  sqlite3_stmt *v107;
  sqlite3_stmt *ppStmt[2];
  CFRange v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;

  if (!a2)
    return 0;
  if (a3 < 5)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    v107 = 0;
    ppStmt[0] = 0;
    v105 = 0;
    pStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, crop_x, crop_y, crop_width, crop_height, data FROM ABImage WHERE format=?;",
            -1,
            ppStmt,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage;",
            -1,
            &v107,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data) VALUES (?, ?, ?, ?, ?);",
            -1,
            &pStmt,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) VALUES (?, ?, 2, ?);",
            -1,
            &v105,
            0))
    {
      v96 = (uint64_t)a4;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
      v8 = &dword_19BCBE714;
      v9 = 2;
      do
      {
        sqlite3_bind_int(ppStmt[0], 1, v9);
        while (sqlite3_step(ppStmt[0]) == 100)
        {
          v10 = sqlite3_column_int(ppStmt[0], 0);
          v11 = sqlite3_column_int(ppStmt[0], 1);
          v12 = sqlite3_column_int(ppStmt[0], 2);
          v13 = sqlite3_column_int(ppStmt[0], 3);
          v14 = sqlite3_column_int(ppStmt[0], 4);
          v15 = (const UInt8 *)sqlite3_column_blob(ppStmt[0], 5);
          v16 = sqlite3_column_bytes(ppStmt[0], 5);
          if (v15)
          {
            if (v16 >= 1)
            {
              v17 = CFDataCreateWithBytesNoCopy(allocator, v15, v16, v7);
              if (v17)
              {
                v18 = v17;
                LODWORD(cf) = 0;
                v104 = 0;
                if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v17, 0, (int *)&cf, &v104))
                {
                  v19 = (double)v11;
                  v20 = (double)v12;
                  v21 = (double)v13;
                  v110.size.height = (double)v14;
                  v110.origin.x = (double)v11;
                  v110.origin.y = (double)v12;
                  v110.size.width = (double)v13;
                  if (CGRectIsEmpty(v110))
                  {
                    v22 = (double)(int)cf;
                    v23 = (double)v104;
                    IsLessThanOrEqualToPixelSize = ABPersonImageFormatIsLessThanOrEqualToPixelSize(1u, (signed int)cf, v104);
                    v25 = 0.0;
                    v26 = 0.0;
                    if (IsLessThanOrEqualToPixelSize)
                    {
                      v25 = ABImageUtilsCenteredRectWithFullScreenRatioForRect(0.0, 0.0, v22, v23);
                      v22 = v27;
                      v23 = v28;
                    }
                    v19 = ABImageUtilsCenteredSquareForRect(v25, v26, v22, v23);
                    v20 = v29;
                    v21 = v30;
                  }
                  sqlite3_bind_int(pStmt, 1, v10);
                  sqlite3_bind_int(pStmt, 2, (int)v19);
                  sqlite3_bind_int(pStmt, 3, (int)v20);
                  sqlite3_bind_int(pStmt, 4, (int)v21);
                  v31 = pStmt;
                  BytePtr = CFDataGetBytePtr(v18);
                  Length = CFDataGetLength(v18);
                  sqlite3_bind_blob(v31, 5, BytePtr, Length, 0);
                  sqlite3_step(pStmt);
                  sqlite3_reset(pStmt);
                  sqlite3_clear_bindings(pStmt);
                }
                CFRelease(v18);
              }
            }
          }
        }
        sqlite3_reset(ppStmt[0]);
        v34 = *v8++;
        v9 = v34;
      }
      while (v34 != -1);
      sqlite3_exec(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABImage WHERE format IN (0, 1) AND record_id IN (SELECT record_id FROM ABImage WHERE format=2) AND data IS NOT NULL;",
        0,
        0,
        0);
      a4 = (__CFArray *)v96;
      while (sqlite3_step(v107) == 100)
      {
        v98 = sqlite3_column_int(v107, 0);
        v35 = sqlite3_column_int(v107, 1);
        v36 = sqlite3_column_int(v107, 2);
        v37 = sqlite3_column_int(v107, 3);
        v38 = (const UInt8 *)sqlite3_column_blob(v107, 4);
        v39 = sqlite3_column_bytes(v107, 4);
        if (v38)
        {
          v40 = CFDataCreateWithBytesNoCopy(allocator, v38, v39, v7);
          cf = 0;
          v104 = 0;
          v102 = 0;
          if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v40, (CGImageSource **)&cf, &v104, &v102))
          {
            v97 = v40;
            v41 = v104;
            v42 = v102;
            v43 = (double)v37;
            PixelWidth = (double)v37;
            PixelHeight = (double)v37;
            if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(0, v37, v37))
            {
              PixelWidth = (double)(int)ABPersonImageFormatGetPixelWidth(0);
              PixelHeight = (double)(int)ABPersonImageFormatGetPixelHeight(0);
            }
            v46 = (double)v35;
            v99 = (double)v42;
            v100 = (double)v41;
            ImageFromImageSourceWithSizeCropRectMaxSize = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize((CGImageSource *)cf, (double)v41, (double)v42, (double)v35, (double)v36, (double)v37, (double)v37, PixelWidth, PixelHeight);
            if (ImageFromImageSourceWithSizeCropRectMaxSize)
            {
              v48 = ImageFromImageSourceWithSizeCropRectMaxSize;
              Scale = ABPersonImageFormatGetScale(-1);
              ScaledImageData = ABImageUtilsCreateScaledImageData(v48, 8u, CFSTR("public.jpeg"), 0, PixelWidth / Scale, PixelHeight / Scale, Scale);
              CFRelease(v48);
              if (ScaledImageData)
              {
                sqlite3_bind_int(v105, 1, v98);
                sqlite3_bind_int(v105, 2, 0);
                v51 = v105;
                v52 = CFDataGetBytePtr(ScaledImageData);
                v53 = CFDataGetLength(ScaledImageData);
                sqlite3_bind_blob(v51, 3, v52, v53, 0);
                sqlite3_step(v105);
                sqlite3_reset(v105);
                sqlite3_clear_bindings(v105);
                CFRelease(ScaledImageData);
              }
            }
            v54 = (double)v36 + v43 * -0.25;
            v113.origin.x = 0.0;
            v113.origin.y = 0.0;
            v111.origin.x = (double)v35;
            v111.origin.y = v54;
            v111.size.width = v43;
            v111.size.height = v43 * 1.5;
            v113.size.height = v99;
            v113.size.width = (double)v41;
            v112 = CGRectIntersection(v111, v113);
            width = (int)v112.size.width;
            height = (int)v112.size.height;
            v57 = 1;
            v58 = &dword_19BCBE720;
            do
            {
              if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(v57, width, height))
              {
                v59 = ABPersonImageFormatGetPixelWidth(v57);
                v60 = ABPersonImageFormatGetPixelHeight(v57);
                v61 = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize((CGImageSource *)cf, v100, v99, v46, v54, v43, v43 * 1.5, PixelWidth, PixelHeight);
                if (v61)
                {
                  v62 = v61;
                  v63 = ABPersonImageFormatGetScale(v57);
                  v64 = ABImageUtilsCreateScaledImageData(v62, 8u, CFSTR("public.jpeg"), 0, (double)v59 / v63, (double)v60 / v63, v63);
                  if (v64)
                  {
                    v65 = v64;
                    sqlite3_bind_int(v105, 1, v98);
                    sqlite3_bind_int(v105, 2, v57);
                    v66 = v105;
                    v67 = CFDataGetBytePtr(v65);
                    v68 = CFDataGetLength(v65);
                    sqlite3_bind_blob(v66, 3, v67, v68, 0);
                    sqlite3_step(v105);
                    sqlite3_reset(v105);
                    sqlite3_clear_bindings(v105);
                    CFRelease(v65);
                  }
                  CFRelease(v62);
                }
              }
              v69 = *v58++;
              v57 = v69;
            }
            while (v69 != -1);
            CFRelease(cf);
            cf = 0;
            a4 = (__CFArray *)v96;
            v40 = v97;
          }
          CFRelease(v40);
        }
      }
    }
    if (ppStmt[0])
      sqlite3_finalize(ppStmt[0]);
    if (v107)
      sqlite3_finalize(v107);
    if (pStmt)
      sqlite3_finalize(pStmt);
    if (v105)
      sqlite3_finalize(v105);
    CPSqliteConnectionPerformSQL();
  }
  if (a3 <= 5)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
LABEL_51:
    CPSqliteConnectionPerformSQL();
    goto LABEL_52;
  }
  if (a3 == 6)
    goto LABEL_51;
  if (a3 > 7)
    return 0;
LABEL_52:
  v107 = 0;
  v70 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v72 = CFArrayCreateMutable(v70, 0, 0);
  v73 = v72;
  if (Mutable)
    v74 = v72 == 0;
  else
    v74 = 1;
  if (v74)
    goto LABEL_82;
  if (!sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, data, ROWID FROM ABThumbnailImage WHERE format=?;",
          -1,
          &v107,
          0))
  {
    sqlite3_bind_int(v107, 1, 5);
    while (sqlite3_step(v107) == 100)
    {
      v75 = (const UInt8 *)sqlite3_column_blob(v107, 1);
      v76 = sqlite3_column_bytes(v107, 1);
      if (v76 >= 1)
      {
        v77 = CFDataCreate(0, v75, v76);
        if (v77)
        {
          v78 = v77;
          if ((ABImageUtilsIsImageDataInSyncCompatibleFormat(v77) & 1) == 0)
          {
            v79 = (const void *)sqlite3_column_int64(v107, 0);
            CFArrayAppendValue(Mutable, v79);
            v80 = (const void *)sqlite3_column_int64(v107, 2);
            CFArrayAppendValue(v73, v80);
          }
          CFRelease(v78);
        }
      }
    }
    if (CFArrayGetCount(v73) >= 1)
    {
      v81 = CFStringCreateMutable(v70, 0);
      if (v81)
      {
        v82 = v81;
        CFStringAppend(v81, CFSTR("DELETE FROM ABThumbnailImage WHERE ROWID IN(?"));
        Count = CFArrayGetCount(v73);
        v84 = Count;
        if (Count >= 2)
        {
          v85 = Count - 1;
          do
          {
            CFStringAppend(v82, CFSTR(", ?"));
            --v85;
          }
          while (v85);
        }
        CFStringAppend(v82, CFSTR(");"));
        ppStmt[0] = 0;
        v86 = *(sqlite3 **)(a2 + 8);
        v87 = (const char *)_CPCreateUTF8StringFromCFString();
        if (sqlite3_prepare(v86, v87, -1, ppStmt, 0))
        {
          ABDiagnosticsEnabled();
          _ABLog2(3, (uint64_t)"_Bool _ABCImageStoreDeleteSyncThumbnailImagesWithRowIDs(CPSqliteConnection *, CFArrayRef)", 463, 0, (uint64_t)CFSTR("error preparing delete statement for invalid sync thumbnails"), v88, v89, v90, v96);
        }
        else
        {
          if (v84 >= 1)
          {
            v91 = 0;
            do
            {
              v92 = ppStmt[0];
              v93 = v91 + 1;
              ValueAtIndex = CFArrayGetValueAtIndex(v73, v91);
              sqlite3_bind_int(v92, v93, ValueAtIndex);
              v91 = v93;
            }
            while (v84 != v93);
          }
          while (!sqlite3_step(ppStmt[0]))
            ;
          sqlite3_finalize(ppStmt[0]);
        }
        CFRelease(v82);
      }
    }
    if (a4)
    {
      v109.length = CFArrayGetCount(Mutable);
      v109.location = 0;
      CFArrayAppendArray(a4, Mutable, v109);
    }
    sqlite3_finalize(v107);
LABEL_82:
    if (!Mutable)
      goto LABEL_84;
  }
  CFRelease(Mutable);
LABEL_84:
  if (v73)
    CFRelease(v73);
  return 0;
}

CFStringRef ABCImageStoreCreateWithAddressBookPath(CFStringRef theString)
{
  CFMutableStringRef MutableCopy;
  uint64_t v2;
  CFRange v4;

  if (!theString)
    return ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(0);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0;
  v2 = 0;
  if (CFStringFindAndReplace(MutableCopy, CFSTR("AddressBook.sqlitedb"), CFSTR("AddressBookImages.sqlitedb"), v4, 1uLL) == 1)
    v2 = ABCImageStoreCreateWithPathAndForceInProcessMigration();
  CFRelease(MutableCopy);
  return (CFStringRef)v2;
}

uint64_t ABCImageStoreCopyImagesForRecordWithFormat(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  sqlite3_stmt *v7;
  int ID;
  uint64_t v9;
  sqlite3_stmt *v10;
  int v11;
  uint64_t v12;

  CPRecordStoreGetDatabase();
  if (a4 == 2)
  {
    v6 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v6)
    {
      v7 = *(sqlite3_stmt **)(v6 + 8);
      if (v7)
      {
        ID = CPRecordGetID();
        sqlite3_bind_int(v7, 1, ID);
LABEL_8:
        v12 = CPRecordStoreProcessStatement();
        CPSqliteStatementReset();
        return v12;
      }
    }
  }
  else
  {
    v9 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v9)
    {
      v10 = *(sqlite3_stmt **)(v9 + 8);
      if (v10)
      {
        v11 = CPRecordGetID();
        sqlite3_bind_int(v10, 1, v11);
        sqlite3_bind_int(*(sqlite3_stmt **)(v9 + 8), 2, a4);
        goto LABEL_8;
      }
    }
  }
  return 0;
}

uint64_t ABCImageStoreHasImagesForRecordWithFormat(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = a1;
  if (a3 == -1)
  {
    if (_imageStoreHasFullSizeImageForRecord(a1, a2, a4))
      return 1;
    a1 = v6;
    a2 = v5;
    a3 = -1;
  }
  else if (a3 == 2)
  {
    return _imageStoreHasFullSizeImageForRecord(a1, a2, a4);
  }
  return (int)_imageStoreCountOfThumbnailImagesForRecordWithFormat(a1, a2, a3, a4) > 0;
}

BOOL _imageStoreHasFullSizeImageForRecord(uint64_t a1, uint64_t a2, int a3)
{
  const __CFString *v3;
  uint64_t v4;
  sqlite3_stmt *v5;
  int ID;
  int v7;

  if (a3)
    v3 = CFSTR("SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ? AND data IS NOT NULL;");
  else
    v3 = CFSTR("SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ?;");
  CPRecordStoreGetDatabase();
  v4 = CPSqliteDatabaseStatementForReading();
  CFRelease(v3);
  if (!v4)
    return 0;
  v5 = *(sqlite3_stmt **)(v4 + 8);
  if (!v5)
    return 0;
  ID = CPRecordGetID();
  sqlite3_bind_int(v5, 1, ID);
  v7 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v7 != 0;
}

uint64_t _imageStoreCountOfThumbnailImagesForRecordWithFormat(uint64_t a1, uint64_t a2, int a3, int a4)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  int ID;
  uint64_t v11;

  v5 = CFSTR("SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ? AND data IS NOT NULL;");
  if (a3 == -1)
    v5 = CFSTR("SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND data IS NOT NULL;");
  v6 = CFSTR("SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ?;");
  if (a3 != -1)
    v6 = CFSTR("SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ?;");
  if (a4)
    v7 = v5;
  else
    v7 = v6;
  CPRecordStoreGetDatabase();
  v8 = CPSqliteDatabaseStatementForReading();
  CFRelease(v7);
  if (!v8)
    return 0;
  v9 = *(sqlite3_stmt **)(v8 + 8);
  if (!v9)
    return 0;
  ID = CPRecordGetID();
  sqlite3_bind_int(v9, 1, ID);
  if (a3 != -1)
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
  v11 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v11;
}

uint64_t ABCImageStoreHasImagesForRecord(uint64_t a1, uint64_t a2, int a3)
{
  return ABCImageStoreHasImagesForRecordWithFormat(a1, a2, -1, a3);
}

sqlite3_stmt *ABCImageStoreRemoveImagesForRecord(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  sqlite3_stmt *v7;
  int ID;
  uint64_t v10;
  sqlite3_stmt *v11;
  int v12;

  if (!a2)
    return 0;
  CPRecordStoreGetDatabase();
  v6 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  if (v6)
  {
    v7 = *(sqlite3_stmt **)(v6 + 8);
    if (v7)
    {
      ID = CPRecordGetID();
      sqlite3_bind_int(v7, 1, ID);
      if (a4 != -1)
        sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, a4);
      CPSqliteStatementIntegerResult();
      v7 = 0;
      CPSqliteStatementReset();
    }
  }
  else
  {
    v7 = 0;
  }
  if (a4 == -1)
  {
    v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        v12 = CPRecordGetID();
        sqlite3_bind_int(v11, 1, v12);
        CPSqliteStatementIntegerResult();
        v7 = 0;
        CPSqliteStatementReset();
      }
    }
  }
  return v7;
}

uint64_t ABCImageStoreRemoveImagesForRecordIds(const __CFString *a1, uint64_t a2, CFArrayRef theArray, int a4)
{
  CFIndex Count;
  uint64_t result;
  CFIndex v9;
  const __CFArray *MutableCopy;
  const __CFArray *i;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  int v15;
  CFIndex v16;
  uint64_t j;
  sqlite3_stmt *v18;
  int ValueAtIndex;
  sqlite3_stmt *v20;
  int v21;
  CFIndex v22;
  int v23;
  CFIndex v25;
  const void **v26;
  CFSetRef v27;
  const __CFAllocator *allocator;
  const __CFArray *theArraya;
  CFRange v31;

  if (!theArray)
    return 1;
  Count = CFArrayGetCount(theArray);
  result = 1;
  if (a2 && Count)
  {
    CPRecordStoreGetDatabase();
    v9 = CFArrayGetCount(theArray);
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    theArraya = theArray;
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, theArray);
    for (i = MutableCopy; ; MutableCopy = i)
    {
      if (!CFArrayGetCount(MutableCopy))
      {
        CFRelease(i);
        v25 = CFArrayGetCount(theArraya);
        v26 = (const void **)malloc_type_malloc(8 * v25, 0x80040B8603338uLL);
        v31.location = 0;
        v31.length = v25;
        CFArrayGetValues(theArraya, v31, v26);
        v27 = CFSetCreate(allocator, v26, v25, 0);
        ABCPersonInvalidateSpecificImageDataForSetOfPersonIds(a1);
        CFRelease(v27);
        free(v26);
        return 1;
      }
      if (a4 == -1)
      {
        v12 = CPSqliteDatabaseStatementForWriting();
        v13 = CPSqliteDatabaseStatementForWriting();
        if (!v12)
          goto LABEL_35;
      }
      else
      {
        v12 = CPSqliteDatabaseStatementForWriting();
        v13 = 0;
        if (!v12)
          goto LABEL_35;
      }
      v14 = *(sqlite3_stmt **)(v12 + 8);
      if (!v14 || v13 && !*(_QWORD *)(v13 + 8))
      {
LABEL_35:
        CFArrayGetCount(i);
        CFRelease(i);
        return 0;
      }
      if (a4 == -1)
      {
        v15 = 1;
      }
      else
      {
        sqlite3_bind_int(v14, 1, a4);
        v15 = 2;
      }
      if (CFArrayGetCount(i) <= 100)
      {
        v16 = CFArrayGetCount(i);
        if (v16 < 1)
          goto LABEL_25;
      }
      else
      {
        v16 = 100;
      }
      for (j = 0; j != v16; ++j)
      {
        v18 = *(sqlite3_stmt **)(v12 + 8);
        ValueAtIndex = CFArrayGetValueAtIndex(i, 0);
        sqlite3_bind_int(v18, v15 + j, ValueAtIndex);
        if (v13)
        {
          v20 = *(sqlite3_stmt **)(v13 + 8);
          v21 = CFArrayGetValueAtIndex(i, 0);
          sqlite3_bind_int(v20, v15 + j, v21);
        }
        CFArrayRemoveValueAtIndex(i, 0);
      }
      if (v16 <= 99)
      {
        v15 += j;
LABEL_25:
        v22 = v16 - 100;
        do
        {
          v23 = v15 + 1;
          sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), v15);
          if (v13)
          {
            sqlite3_bind_null(*(sqlite3_stmt **)(v13 + 8), v15 + 1);
            v23 = v15 + 2;
          }
          v15 = v23;
        }
        while (!__CFADD__(v22++, 1));
      }
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      if (v13)
      {
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
      ABRegulatoryLogModifyContactsData((uint64_t)a1);
    }
  }
  return result;
}

CFStringRef ABCImageStoreGetCountOfImagesWithFormat(uint64_t a1, uint64_t a2)
{
  CFStringRef result;
  CFStringRef v3;
  uint64_t CountOfInstancesOfClassWhere;

  if ((_DWORD)a2 == 2)
    return (CFStringRef)CPRecordStoreGetCountOfInstancesOfClassWhere();
  result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("format = %d"), a2);
  if (result)
  {
    v3 = result;
    CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
    CFRelease(v3);
    return (CFStringRef)CountOfInstancesOfClassWhere;
  }
  return result;
}

BOOL ABCImageStoreHasIndexes()
{
  int v0;
  int v1;
  _BOOL8 v3;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v0 = CPSqliteConnectionPerformSQL();
  v1 = CPSqliteConnectionPerformSQL();
  v3 = v0 != 1 && v1 != 1;
  CPSqliteDatabaseReleaseSqliteConnection();
  return v3;
}

uint64_t ___databaseDeleted_block_invoke()
{
  CFOptionFlags v1;

  v1 = 0;
  return CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, CFSTR("AddressBook"), CFSTR("The image database was corrupt.\n\nOpen a radar to PEP Address Book and attach syslog, AB logs and /tmp/AddressBook*"), CFSTR("OK"), 0, 0, &v1);
}

uint64_t ABCMultiValueGetTypeID()
{
  pthread_once(&kABCMultiValueRegisterClass, (void (*)(void))ABCMultiValueRegisterClass);
  return kABCMultiValueTypeID;
}

const __CFArray *ABCMultiValueCopyValueAtIndex(const __CFArray *result, CFIndex a2)
{
  const __CFArray *v2;
  int v4;
  uint64_t (**v5)();

  if (result)
  {
    v2 = result;
    result = (const __CFArray *)*((_QWORD *)result + 5);
    if (result)
    {
      if (CFArrayGetCount(result) <= a2)
      {
        return 0;
      }
      else
      {
        v4 = ABCSingleValueType(*((_DWORD *)v2 + 4));
        v5 = ABCCallBacksForType(v4);
        result = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v2 + 5), a2);
        if (*v5)
          return (const __CFArray *)((uint64_t (*)(const __CFArray *))*v5)(result);
      }
    }
  }
  return result;
}

CFArrayRef *ABCMultiValueCopyLabelAtIndex(CFArrayRef *result, CFIndex a2)
{
  CFArrayRef *v3;
  const void *ValueAtIndex;

  if (result)
  {
    v3 = result;
    result = 0;
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (v3[4])
      {
        if (CFArrayGetCount(v3[4]) <= a2)
        {
          return 0;
        }
        else
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v3[4], a2);
          result = 0;
          if (ValueAtIndex)
          {
            if ((const void *)*MEMORY[0x1E0C9B0D0] != ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              return (CFArrayRef *)ValueAtIndex;
            }
          }
        }
      }
    }
  }
  return result;
}

const __CFArray *ABCMultiValueGetLabelAtIndex(const __CFArray *result, CFIndex a2)
{
  const __CFArray *v2;

  if (result)
  {
    v2 = result;
    result = (const __CFArray *)*((_QWORD *)result + 4);
    if (result)
    {
      if (CFArrayGetCount(result) <= a2)
      {
        return 0;
      }
      else
      {
        result = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v2 + 4), a2);
        if ((const __CFArray *)*MEMORY[0x1E0C9B0D0] == result)
          return 0;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueGetPrimaryIdentifier(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 56);
  else
    return 0xFFFFFFFFLL;
}

CFIndex ABCMultiValueIndexForIdentifier(uint64_t a1, int a2)
{
  const __CFArray *v2;
  CFRange v5;

  if (!a1)
    return -1;
  v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
    return -1;
  v5.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  v5.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v5, (const void *)a2);
}

uint64_t ABCMultiValueGetIdentifierAtIndex(uint64_t a1, CFIndex a2)
{
  const __CFArray *v3;

  if (!a1)
    return 0xFFFFFFFFLL;
  v3 = *(const __CFArray **)(a1 + 24);
  if (v3 && CFArrayGetCount(v3) > a2)
    return (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  else
    return 0xFFFFFFFFLL;
}

CFArrayRef *ABCMultiValueCopyUUIDAtIndex(CFArrayRef *result, CFIndex a2)
{
  CFArrayRef *v3;
  const void *ValueAtIndex;

  if (result)
  {
    v3 = result;
    result = 0;
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (v3[6])
      {
        if (CFArrayGetCount(v3[6]) <= a2)
        {
          return 0;
        }
        else
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v3[6], a2);
          result = 0;
          if (ValueAtIndex)
          {
            if ((const void *)*MEMORY[0x1E0C9B0D0] != ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              return (CFArrayRef *)ValueAtIndex;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValuePropertyType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

CFIndex ABCMultiValueGetFirstIndexOfValue(uint64_t a1, const void *a2)
{
  const __CFArray *v2;
  CFRange v5;

  if (!a1)
    return -1;
  v2 = *(const __CFArray **)(a1 + 40);
  if (!v2)
    return -1;
  v5.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  v5.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v5, a2);
}

uint64_t ABCMultiValueGetFirstIndexOfValueWithCallback(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, const void *))
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;

  if (!a1)
    return -1;
  v4 = *(const __CFArray **)(a1 + 40);
  if (!v4)
    return -1;
  Count = CFArrayGetCount(v4);
  if (Count < 1)
    return -1;
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v9);
    if (a3(a2, ValueAtIndex))
      break;
    if (v8 == ++v9)
      return -1;
  }
  return v9;
}

CFIndex ABCMultiValueGetFirstIndexOfLabel(uint64_t a1, const void *a2)
{
  const __CFArray *v2;
  CFRange v5;

  if (!a1)
    return -1;
  v2 = *(const __CFArray **)(a1 + 32);
  if (!v2)
    return -1;
  v5.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v5.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v5, a2);
}

_OWORD *_copyMultivalue(uint64_t a1)
{
  _OWORD *v2;
  const __CFArray *v3;
  CFAllocatorRef *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  int v8;

  if (!a1)
    return 0;
  v2 = ABCMultiValueCreate(*(_DWORD *)(a1 + 16));
  if (v2)
  {
    v3 = *(const __CFArray **)(a1 + 40);
    v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v3)
      *((_QWORD *)v2 + 5) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v3);
    v5 = *(const __CFArray **)(a1 + 24);
    if (v5)
      *((_QWORD *)v2 + 3) = CFArrayCreateMutableCopy(*v4, 0, v5);
    v6 = *(const __CFArray **)(a1 + 32);
    if (v6)
      *((_QWORD *)v2 + 4) = CFArrayCreateMutableCopy(*v4, 0, v6);
    v7 = *(const __CFArray **)(a1 + 48);
    if (v7)
      *((_QWORD *)v2 + 6) = CFArrayCreateMutableCopy(*v4, 0, v7);
    v8 = *(_DWORD *)(a1 + 56);
    if (v8)
      *((_DWORD *)v2 + 14) = v8;
  }
  return v2;
}

_OWORD *ABCMultiValueCreateMutableCopy(_OWORD *result)
{
  if (result)
  {
    result = _copyMultivalue((uint64_t)result);
    if (result)
      *((_BYTE *)result + 60) |= 1u;
  }
  return result;
}

__CFArray *ABCMultiValueAdd(CFMutableArrayRef *a1, void *a2, const void *a3, const __CFString *a4, int *a5)
{
  const __CFArray *v10;
  CFIndex Count;

  if (!a1 || !a2)
    return 0;
  v10 = a1[5];
  if (v10)
    Count = CFArrayGetCount(v10);
  else
    Count = 0;
  return ABCMultiValueInsertAndCreateIdentifier(a1, a2, a3, Count, a4, a5, 1);
}

__CFArray *ABCMultiValueInsert(CFMutableArrayRef *a1, void *a2, const void *a3, CFIndex a4, const __CFString *a5, int *a6)
{
  return ABCMultiValueInsertAndCreateIdentifier(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t ABCMultiValueRemove(uint64_t result, CFIndex a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result;
    result = *(_QWORD *)(result + 40);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a2)
      {
        return 0;
      }
      else
      {
        if (*(_DWORD *)(v2 + 56) == CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), a2))
          *(_DWORD *)(v2 + 56) = 0;
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 24), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 32), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 40), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 48), a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueReplaceValue(uint64_t result, const void *a2, CFIndex a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    result = *(_QWORD *)(result + 40);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a3)
      {
        return 0;
      }
      else
      {
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v3 + 40), a3, a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueReplaceLabel(uint64_t result, const void *a2, CFIndex a3)
{
  uint64_t v3;
  const void *v6;

  if (result)
  {
    v3 = result;
    result = *(_QWORD *)(result + 32);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a3)
      {
        return 0;
      }
      else
      {
        if (a2)
          v6 = a2;
        else
          v6 = (const void *)*MEMORY[0x1E0C9B0D0];
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v3 + 32), a3, v6);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueSetPrimaryIdentifier(uint64_t result, int a2)
{
  uint64_t v3;
  const __CFArray *v4;
  CFRange v5;

  if (result)
  {
    v3 = result;
    result = 0;
    if (a2)
    {
      v4 = *(const __CFArray **)(v3 + 24);
      if (v4)
      {
        v5.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
        v5.location = 0;
        if (CFArrayGetFirstIndexOfValue(v4, v5, (const void *)a2) == -1)
        {
          return 0;
        }
        else
        {
          *(_DWORD *)(v3 + 56) = a2;
          return 1;
        }
      }
    }
  }
  return result;
}

void ABCMultiValueShow(uint64_t a1)
{
  int v2;
  uint64_t (**v3)();
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  FILE **v8;
  CFArrayRef *v9;
  const __CFArray *v10;
  const __CFString *v11;
  uint64_t (*v12)();

  if (a1)
  {
    v2 = ABCSingleValueType(*(_DWORD *)(a1 + 16));
    v3 = ABCCallBacksForType(v2);
    v4 = *(const __CFArray **)(a1 + 40);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v6 = Count;
        v7 = 0;
        v8 = (FILE **)MEMORY[0x1E0C80C10];
        do
        {
          v9 = ABCMultiValueCopyLabelAtIndex((CFArrayRef *)a1, v7);
          v10 = ABCMultiValueCopyValueAtIndex((const __CFArray *)a1, v7);
          if (v9)
            v11 = (const __CFString *)v9;
          else
            v11 = CFSTR("(NULL)");
          CFShow(v11);
          fwrite(": ", 2uLL, 1uLL, *v8);
          ((void (*)(const __CFArray *))v3[2])(v10);
          fputc(10, *v8);
          if (v9)
            CFRelease(v9);
          v12 = v3[1];
          if (v12)
            ((void (*)(const __CFArray *))v12)(v10);
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
}

const __CFArray *ABCMultiValueBatchLoad(const __CFArray *result, int a2, uint64_t a3)
{
  const __CFArray *v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v5 = result;
    result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      if (*(_QWORD *)(a3 + 16))
      {
        CFArrayGetValueAtIndex(v5, 0);
        CPRecordStoreGetDatabase();
        result = (const __CFArray *)CPSqliteDatabaseConnectionForWriting();
        if (result)
        {
          v6 = (uint64_t)result;
          v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
          return (const __CFArray *)ABCDBContextFetchMultiValuePropertyIntoRecords(v6, v5, a2, v7);
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueSave(const void *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  const __CFArray *Value;
  int v7;

  v4 = a2;
  Value = (const __CFArray *)ABCRecordGetValue(a1, a2);
  v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
  return ABCDBContextSaveMultiValue(a3, a1, v4, Value, v7);
}

__CFString *ABCMultiValueCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex i;
  const __CFArray *v6;
  const __CFString *ValueAtIndex;
  const void *v8;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    v3 = *(const __CFArray **)(a1 + 40);
    if (v3)
    {
      Count = CFArrayGetCount(v3);
      CFStringAppendFormat(Mutable, 0, CFSTR("ABMultiValueRef %p with %ld value(s)\n"), a1, Count);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v6 = *(const __CFArray **)(a1 + 32);
          if (v6)
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, i);
          else
            ValueAtIndex = CFSTR("<NULL>");
          v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
          CFStringAppendFormat(Mutable, 0, CFSTR("    %ld: %@ (%p) - %@ (%p)\n"), i, ValueAtIndex, ValueAtIndex, v8, v8);
        }
      }
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("ABMultiValueRef %p with %ld value(s)\n"), a1, 0);
    }
  }
  return Mutable;
}

const __CFString *ABCSmartDialerPersonNameForProperty(int a1)
{
  if (kABCFirstNameProperty == a1)
    return CFSTR("FirstEncoding");
  if (kABCMiddleNameProperty == a1)
    return CFSTR("MiddleEncoding");
  if (kABCLastNameProperty == a1)
    return CFSTR("LastEncoding");
  if (kABCOrganizationProperty == a1)
    return CFSTR("OrganizationEncoding");
  if (kABCNicknameProperty == a1)
    return CFSTR("NickNameEncoding");
  return CFSTR("UNKNOWN_PROPERTY");
}

const void *ABCPersonCreateNewPersonAndReturnError(uint64_t a1, CFErrorRef *a2)
{
  return ABCPersonCreateNewPersonInSourceAndReturnError(a1, 0, a2);
}

uint64_t ABPersonCreateTemporaryNewPersonWithRecordID()
{
  uint64_t v0;

  ABCInitializeLibrary();
  v0 = CPRecordCreateWithRecordID();
  CPRecordInitializeProperty();
  CPRecordInitializeProperty();
  return v0;
}

uint64_t ABCPersonPrepareToAddToAddressBook(const void *a1, _DWORD *a2, CFTypeRef *a3)
{
  int Property;
  uint64_t v7;
  const void *v8;
  const void *RecordForUniqueID;
  uint64_t result;
  const void *Policy;
  uint64_t v12;
  unsigned int ShouldAddRecord;
  unsigned int v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  const void *ValueAtIndex;
  void *v21;
  BOOL v22;
  int v23;
  int v24;
  unsigned int v25;
  void *v26;
  int v27;

  Property = CPRecordGetProperty();
  v7 = ABCPersonCopySource();
  v8 = (const void *)v7;
  if (v7 || Property == -1)
  {
    if (v7)
      goto LABEL_7;
LABEL_6:
    result = (uint64_t)ABAddressBookCopyDefaultSource(a2);
    v8 = (const void *)result;
    if (!result)
      return result;
    goto LABEL_7;
  }
  RecordForUniqueID = (const void *)ABCSourceGetRecordForUniqueID((uint64_t)a2);
  if (!RecordForUniqueID)
    goto LABEL_6;
  v8 = RecordForUniqueID;
  CFRetain(RecordForUniqueID);
LABEL_7:
  CPRecordSetProperty();
  Policy = ABCSourceGetPolicy(v8);
  if (!Policy)
    goto LABEL_27;
  v12 = (uint64_t)Policy;
  ShouldAddRecord = ABPolicyShouldAddRecord((uint64_t)Policy, (uint64_t)a2, (uint64_t)a1, (uint64_t)a3);
  if ((ShouldAddRecord & 1) == 0)
  {
    CFRelease(v8);
    return 0;
  }
  v14 = ShouldAddRecord;
  v15 = (const __CFArray *)CPRecordCopyChangedProperties();
  if (!v15)
  {
LABEL_27:
    CFRelease(v8);
    a2[94] |= 0x2000u;
    return 1;
  }
  v16 = v15;
  Count = CFArrayGetCount(v15);
  v25 = v14;
  if (Count >= 1)
  {
    v18 = Count;
    v19 = 0;
    v27 = 0;
    v26 = (void *)*MEMORY[0x1E0C9B0D0];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v16, v19);
      v21 = (void *)ABRecordCopyValue(a1, (ABPropertyID)ValueAtIndex);
      if ((ABPolicyShouldSetValue(v12, a2, a1, (uint64_t)ValueAtIndex, v21, 0, a3) & 1) != 0)
      {
        if (v21 && v21 != v26)
        {
          v22 = kABPersonAlternateBirthdayProperty == (_DWORD)ValueAtIndex
             || kABPersonBirthdayProperty == (_DWORD)ValueAtIndex;
          v23 = v27;
          if (v22)
            v23 = 1;
          v27 = v23;
LABEL_24:
          CFRelease(v21);
          goto LABEL_25;
        }
      }
      else
      {
        ABRecordRemoveValue(a1, (ABPropertyID)ValueAtIndex, 0);
      }
      if (v21)
        goto LABEL_24;
LABEL_25:
      if (v18 == ++v19)
        goto LABEL_32;
    }
  }
  LOBYTE(v27) = 0;
LABEL_32:
  CFRelease(v16);
  CFRelease(v8);
  result = v25;
  if (v25)
  {
    v24 = a2[94] | 0x2000;
    a2[94] = v24;
    if ((v27 & 1) != 0)
      goto LABEL_37;
    return 1;
  }
  if ((v27 & 1) == 0)
    return 0;
  v24 = a2[94];
LABEL_37:
  a2[94] = v24 | 0x20000;
  return result;
}

BOOL ABCPersonPropertySupportsLazyLoading(int a1)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)ABCPersonClass + 10) + 40 * a1 + 16) + 24) != 0;
}

CFArrayRef ABCCopyArrayOfAllPeopleInSource(uint64_t a1, uint64_t a2)
{
  return ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(a1, a2, -1);
}

CFArrayRef ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(uint64_t a1, uint64_t a2, int a3)
{
  int UniqueId;
  CFAllocatorRef *v5;
  __CFString *Mutable;
  __CFString *v7;
  const __CFString *v8;
  uint64_t v9;

  if (!a1)
    return 0;
  if (a2)
    UniqueId = ABCRecordGetUniqueId(a2);
  else
    UniqueId = -1;
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((UniqueId & a3) == 0xFFFFFFFF)
  {
    v9 = CPRecordStoreCopyAllInstancesOfClass();
    if (!v9)
      return CFArrayCreate(*v5, 0, 0, 0);
    return (CFArrayRef)v9;
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v7 = Mutable;
  if (UniqueId != -1)
    CFStringAppend(Mutable, CFSTR("WHERE StoreID = ? "));
  if (a3 == -2)
  {
    v8 = CFSTR(" ORDER BY ROWID");
  }
  else if (a3)
  {
    if (a3 != 1)
      goto LABEL_17;
    v8 = CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort");
  }
  else
  {
    v8 = CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort");
  }
  CFStringAppend(v7, v8);
LABEL_17:
  v9 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v7);
  if (!v9)
    return CFArrayCreate(*v5, 0, 0, 0);
  return (CFArrayRef)v9;
}

CFArrayRef ABCCopyArrayOfAllPeople(uint64_t a1)
{
  return ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(a1, 0, -1);
}

uint64_t ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(uint64_t a1, int a2, int a3, int a4, int a5)
{
  __CFString *SelectPrefixFromRecordDescriptor;
  __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  uint64_t v15;

  if (!a1)
    return 0;
  SelectPrefixFromRecordDescriptor = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  v11 = SelectPrefixFromRecordDescriptor;
  if (a5)
    CFStringAppend(SelectPrefixFromRecordDescriptor, CFSTR(" WHERE IsPreferredName = 1"));
  v12 = a2
      ? CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort LIMIT ? OFFSET ?")
      : CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort LIMIT ? OFFSET ?");
  CFStringAppend(v11, v12);
  CPRecordStoreGetDatabase();
  v13 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  CFRelease(v11);
  if (!v13)
    return 0;
  v14 = *(sqlite3_stmt **)(v13 + 8);
  if (!v14)
    return 0;
  sqlite3_bind_int(v14, 1, a4);
  sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a3 & ~(a3 >> 31));
  v15 = CPRecordStoreProcessStatement();
  CPSqliteStatementReset();
  return v15;
}

__CFArray *ABCCopyArrayOfKeyboardAutoCorrectionStrings(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  uint64_t v10;
  sqlite3_stmt *v11;
  int v12;
  const unsigned __int8 *v13;
  CFStringRef v14;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCCopyArrayOfKeyboardAutoCorrectionStrings(ABCAddressBookRef)", 994, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1)
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        if (sqlite3_step(v11) == 100)
        {
          v12 = 0;
          while (1)
          {
            if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), v12) != 5)
            {
              v13 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), v12);
              if (v13)
              {
                v14 = CFStringCreateWithCString(v8, (const char *)v13, 0x8000100u);
                CFArrayAppendValue(Mutable, v14);
                CFRelease(v14);
              }
            }
            if (++v12 == 6)
            {
              v12 = 0;
              if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100)
                break;
            }
          }
        }
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return Mutable;
}

__CFArray *ABAddressBookCopyArrayOfAllNamePhoneticPairs(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  uint64_t v10;
  sqlite3_stmt *v11;
  int v12;
  const void *v13;
  const unsigned __int8 *v14;
  CFStringRef v15;
  int v16;
  const unsigned __int8 *v17;
  CFStringRef v18;
  int i;
  const unsigned __int8 *v20;
  CFStringRef v21;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllNamePhoneticPairs(ABCAddressBookRef)", 1037, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1)
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        if (sqlite3_step(v11) == 100)
        {
          v12 = 0;
          v13 = (const void *)*MEMORY[0x1E0C9B0D0];
          while (1)
          {
            if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), 2 * v12) != 5)
            {
              v14 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), 2 * v12);
              if (v14)
              {
                v15 = CFStringCreateWithCString(v8, (const char *)v14, 0x8000100u);
                CFArrayAppendValue(Mutable, v15);
                CFRelease(v15);
                v16 = (2 * v12) | 1;
                if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), v16) == 5
                  || (v17 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), v16)) == 0)
                {
                  CFArrayAppendValue(Mutable, v13);
                }
                else
                {
                  v18 = CFStringCreateWithCString(v8, (const char *)v17, 0x8000100u);
                  CFArrayAppendValue(Mutable, v18);
                  CFRelease(v18);
                }
              }
            }
            if (++v12 == 3)
            {
              for (i = 6; i != 9; ++i)
              {
                if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), i) != 5)
                {
                  v20 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), i);
                  if (v20)
                  {
                    v21 = CFStringCreateWithCString(v8, (const char *)v20, 0x8000100u);
                    CFArrayAppendValue(Mutable, v21);
                    CFRelease(v21);
                    CFArrayAppendValue(Mutable, v13);
                  }
                }
              }
              v12 = 0;
              if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100)
                break;
            }
          }
        }
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return Mutable;
}

uint64_t ABCPersonCopyRecordsForUniqueIDs(uint64_t result)
{
  if (result)
    return ABCDBContextCopyRecordsForUIDsOfType();
  return result;
}

uint64_t ABCPersonCopyRecordsForLinkIdentifers(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2;
  __CFArray *Mutable;
  __CFString *v6;
  __CFString *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  CFStringRef v12;
  CFStringRef v13;

  v2 = 0;
  if (a1 && theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      return 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v6 = CFStringCreateMutable(0, 0);
      v7 = v6;
      v2 = 0;
      if (Mutable && v6)
      {
        CFStringAppend(v6, CFSTR("PersonLink IN ("));
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v9 = Count;
          for (i = 0; i != v9; ++i)
          {
            if (i)
              CFStringAppend(v7, CFSTR(", "));
            CFStringAppend(v7, CFSTR("?"));
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            v12 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), ValueAtIndex);
            if (v12)
            {
              v13 = v12;
              CFArrayAppendValue(Mutable, v12);
              CFRelease(v13);
            }
          }
        }
        CFStringAppend(v7, CFSTR(")"));
        v2 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(*(_QWORD *)(a1 + 16), (uint64_t)ABCPersonClass, 0, v7, Mutable);
      }
      if (v7)
        CFRelease(v7);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  return v2;
}

uint64_t ABCGetPersonCount(uint64_t result)
{
  if (result)
    return CPRecordStoreGetCountOfInstancesOfClassWhere();
  return result;
}

void ABCPersonAppendNamePartToCompositeName(uint64_t a1, uint64_t a2, __CFString *a3)
{
  const __CFString *Value;
  const __CFString *v5;

  Value = (const __CFString *)ABCRecordGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    if (CFStringGetLength(Value) >= 1)
    {
      if (CFStringGetLength(a3) >= 1)
        CFStringAppend(a3, CFSTR(" "));
      CFStringAppend(a3, v5);
    }
  }
}

CFMutableStringRef ABCPersonCopyCompositePhoneticName(const void *a1)
{
  ABPersonCompositeNameFormat CompositeNameFormatForRecord;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFMutableStringRef Mutable;

  CompositeNameFormatForRecord = ABPersonGetCompositeNameFormatForRecord(a1);
  if (CompositeNameFormatForRecord)
    v3 = kABCFirstNamePhoneticProperty;
  else
    v3 = kABCLastNamePhoneticProperty;
  v4 = kABCMiddleNamePhoneticProperty;
  if (CompositeNameFormatForRecord)
    v5 = kABCLastNamePhoneticProperty;
  else
    v5 = kABCFirstNamePhoneticProperty;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v5, Mutable);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v4, Mutable);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v3, Mutable);
  if (!CFStringGetLength(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

BOOL ABCPersonClearAddressBookPhoneCacheForPerson(_BOOL8 result)
{
  uint64_t v1;
  _QWORD v2[2];
  __int128 v3;

  v2[0] = 0;
  v3 = 0u;
  v2[1] = result;
  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 40))
    {
      DWORD2(v3) = CPRecordGetID();
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v1 + 40), (CFDictionaryApplierFunction)ABCPersonClearAddressBookPhoneCacheForPerson_apply, v2);
      return LOBYTE(v2[0]) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ABCPersonClearAddressBookPhoneCacheForPerson_apply(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  const void *v4;
  uint64_t v5;
  CFIndex Count;
  CFIndex v7;
  size_t v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  const __CFNumber *v12;
  const void *v13;
  CFTypeID v14;
  const __CFDictionary *v15;
  __CFDictionary *Value;
  int valuePtr;
  CFRange v19;

  if (theDict)
  {
    v4 = (const void *)*(int *)(a3 + 24);
    v5 = *(_QWORD *)(a3 + 8);
    Count = CFDictionaryGetCount(theDict);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 8 * Count;
      v9 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      v10 = (const void **)malloc_type_malloc(v8, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict, v9, v10);
      v11 = 0;
      while (1)
      {
        v12 = (const __CFNumber *)v10[v11];
        if (v12)
        {
          v13 = v9[v11];
          v14 = CFGetTypeID(v10[v11]);
          if (v14 == CFNumberGetTypeID())
          {
            valuePtr = -1;
            if (CFNumberGetValue(v12, kCFNumberIntType, &valuePtr) && (valuePtr == (_DWORD)v4 || valuePtr == -1))
              goto LABEL_13;
          }
          else if (v14 == CFArrayGetTypeID())
          {
            if (!CFArrayGetCount(v12)
              || (v19.length = CFArrayGetCount(v12), v19.location = 0, CFArrayContainsValue(v12, v19, v4)))
            {
LABEL_13:
              v15 = *(const __CFDictionary **)(v5 + 48);
              if (v15)
              {
                Value = (__CFDictionary *)CFDictionaryGetValue(v15, a1);
                if (Value)
                  CFDictionaryRemoveValue(Value, v13);
              }
              CFDictionaryRemoveValue(theDict, v13);
            }
          }
        }
        if (v7 == ++v11)
        {
          free(v9);
          free(v10);
          return;
        }
      }
    }
  }
}

ABMutableMultiValueRef ABCPersonCreateSocialProfileValueFillMissingData(const void *a1)
{
  ABMutableMultiValueRef MutableCopy;
  CFIndex v3;
  const __CFDictionary *v4;
  CFIndex v5;
  const __CFDictionary *v6;
  void *Value;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  __CFDictionary *v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  const __CFAllocator *allocator;
  CFIndex Count;

  if (!a1)
    return 0;
  MutableCopy = ABMultiValueCreateMutableCopy(a1);
  Count = ABMultiValueGetCount(a1);
  if (Count >= 1)
  {
    v3 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v4 = (const __CFDictionary *)ABMultiValueCopyValueAtIndex(a1, v3);
      v5 = CFDictionaryGetCount(v4);
      v6 = CFDictionaryCreateMutableCopy(allocator, v5, v4);
      Value = (void *)CFDictionaryGetValue(v6, CFSTR("url"));
      v8 = (void *)CFDictionaryGetValue(v6, CFSTR("service"));
      v9 = (unint64_t)CFDictionaryGetValue(v6, CFSTR("username"));
      v10 = (unint64_t)CFDictionaryGetValue(v6, CFSTR("identifier"));
      if (Value)
      {
        v11 = (const __CFDictionary *)socialProfileFromURL(Value, 0, 0, 0, 0, 0, 0);
        v12 = v11;
        if (!v8)
        {
          v13 = CFDictionaryGetValue(v11, CFSTR("service"));
          if (v13)
            CFDictionarySetValue(v6, CFSTR("service"), v13);
        }
        if (v9)
          goto LABEL_19;
        v14 = CFDictionaryGetValue(v12, CFSTR("username"));
        if (!v14)
          goto LABEL_19;
        v15 = v14;
        v16 = v6;
        v17 = CFSTR("username");
      }
      else
      {
        if (!v8 || !(v9 | v10))
          goto LABEL_19;
        v18 = (void *)(v9 ? v9 : v10);
        v19 = socialProfileURLForServiceAndUsername(v8, v18);
        if (!v19)
          goto LABEL_19;
        v15 = (const void *)v19;
        v16 = v6;
        v17 = CFSTR("url");
      }
      CFDictionarySetValue(v16, v17, v15);
LABEL_19:
      ABMultiValueReplaceValueAtIndex(MutableCopy, v6, v3);
      CFRelease(v4);
      CFRelease(v6);
      ++v3;
    }
    while (Count != v3);
  }
  return MutableCopy;
}

CFComparisonResult ABCPersonCompareNameOfPeople(uint64_t a1, uint64_t a2, int a3)
{
  int *v6;
  uint64_t v7;
  int IntValue;
  int v9;
  int *v10;
  CFComparisonResult result;
  int *v12;

  if (a1 == a2)
    return 0;
  v6 = &kABCFirstSortLanguageIndexSortProperty;
  if (a3)
    v6 = &kABCLastSortLanguageIndexSortProperty;
  v7 = *v6;
  IntValue = ABRecordGetIntValue(a1, v7);
  v9 = ABRecordGetIntValue(a2, v7);
  if (IntValue == v9)
  {
    v10 = &kABCFirstSortSectionProperty;
    if (a3)
      v10 = &kABCLastSortSectionProperty;
    result = ABCPersonCompareSortKeyProperties(*v10, a1, a2);
    if (result == kCFCompareEqualTo)
    {
      v12 = &kABCFirstSortProperty;
      if (a3)
        v12 = &kABCLastSortProperty;
      return ABCPersonCompareSortKeyProperties(*v12, a1, a2);
    }
  }
  else if (IntValue < v9)
  {
    return -1;
  }
  else
  {
    return 1;
  }
  return result;
}

CFComparisonResult ABCPersonCompareSortKeyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFComparisonResult v8;

  v5 = (const __CFString *)ABCRecordCopyValue(a2, a1);
  v6 = (const __CFString *)ABCRecordCopyValue(a3, a1);
  v7 = v6;
  if (v5 != v6)
  {
    if (!v5)
    {
      v8 = kCFCompareGreaterThan;
      goto LABEL_10;
    }
    if (v6)
      v8 = CFStringCompare(v5, v6, 0);
    else
      v8 = kCFCompareLessThan;
    goto LABEL_9;
  }
  v8 = kCFCompareEqualTo;
  if (v5)
LABEL_9:
    CFRelease(v5);
LABEL_10:
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t ABCPersonRemoveImageData(const void *a1)
{
  return ABCPersonRemoveImageDataAndReturnError(a1, -1);
}

uint64_t ABCPersonRemoveImageDataAndReturnError(const void *a1, int a2)
{
  const __CFString *v4;
  uint64_t v5;
  CFStringRef ImageStore;
  const __CFArray *Property;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  __CFArray *MutableCopy;
  uint64_t v14;
  const __CFAllocator *allocator;

  if (!a1)
    return 0;
  if (a2 == -1)
    CPRecordSetProperty();
  if (!ABCPersonHasImageDataEntries((uint64_t)a1, 0))
    return 1;
  v4 = (const __CFString *)ABCGetAddressBookForRecord();
  if (v4)
  {
    v5 = (uint64_t)v4;
    ImageStore = ABCAddressBookGetImageStore(v4);
    if (!ImageStore || !ABCImageStoreRemoveImagesForRecord(v5, (uint64_t)ImageStore, (uint64_t)a1, a2))
      return 0;
  }
  if (a2 == -1)
  {
    CPRecordSetProperty();
  }
  else
  {
    Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      v8 = Property;
      Count = CFArrayGetCount(Property);
      if (Count >= 1)
      {
        v10 = Count;
        v11 = 0;
        v12 = 0;
        MutableCopy = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          CFArrayGetValueAtIndex(v8, v12);
          if (a2 == 2 && (char **)CPRecordGetClass() == ABCFullSizeImageClass
            || (char **)CPRecordGetClass() != ABCFullSizeImageClass && CPRecordGetProperty() == a2)
          {
            if (!MutableCopy)
              MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v8);
            CFArrayRemoveValueAtIndex(MutableCopy, v11--);
          }
          ++v11;
          ++v12;
        }
        while (v10 != v12);
        if (MutableCopy)
        {
          CPRecordSetProperty();
          CFRelease(MutableCopy);
        }
      }
    }
  }
  CPRecordMarkChanged();
  v14 = 1;
  _updatePreferredImageForPerson(a1, 0, 1, 1);
  return v14;
}

uint64_t ABCPersonHasImageDataEntries(uint64_t result, int a2)
{
  uint64_t v3;
  const __CFArray *Property;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *v9;

  if (result)
  {
    v3 = result;
    Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      v5 = Property;
      Count = CFArrayGetCount(Property);
      v7 = Count;
      if ((a2 & 1) == 0 && Count)
        return 1;
      if (Count >= 1)
      {
        v8 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v5, v8);
          CPRecordGetClass();
          v9 = (const void *)CPRecordCopyProperty();
          if (v9)
            break;
          if (++v8 >= v7)
            goto LABEL_9;
        }
        CFRelease(v9);
        return 1;
      }
    }
LABEL_9:
    result = ABCGetAddressBookForRecord();
    if (result)
    {
      result = (uint64_t)ABCAddressBookGetImageStore((CFStringRef)result);
      if (result)
        return ABCImageStoreHasImagesForRecord(result, v3, a2);
    }
  }
  return result;
}

void _updatePreferredImageForPerson(const void *a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  ABRecordID RecordID;
  int v18;
  int IntValue;
  uint64_t v20;
  sqlite3_stmt *v21;
  uint64_t v22;
  const void *v23;

  v8 = ABCGetAddressBookForRecord();
  if (!v8)
    return;
  v9 = v8;
  if (!a2 || (v10 = a1, !ABPersonHasImageData(a1)))
  {
    v11 = ABPersonCopyArrayOfAllLinkedPeople(a1);
    if (!v11)
    {
      v18 = 0;
      v10 = 0;
      goto LABEL_17;
    }
    v12 = v11;
    Count = CFArrayGetCount(v11);
    if (Count < 1)
    {
LABEL_11:
      v10 = 0;
    }
    else
    {
      v14 = Count;
      v15 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v15);
        v10 = ValueAtIndex;
        if (((a2 & 1) != 0 || ValueAtIndex != a1) && ABPersonHasImageData(ValueAtIndex))
          break;
        if (v14 == ++v15)
          goto LABEL_11;
      }
    }
    CFRelease(v12);
  }
  if (v10)
  {
    RecordID = ABRecordGetRecordID(v10);
    v18 = 1;
    goto LABEL_18;
  }
  v18 = 0;
LABEL_17:
  RecordID = -1;
LABEL_18:
  IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  CPRecordStoreGetDatabase();
  v20 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(v9);
  if (v20)
  {
    v21 = *(sqlite3_stmt **)(v20 + 8);
    if (v21)
    {
      sqlite3_bind_int(v21, 1, RecordID);
      sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, IntValue);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
  }
  if ((v18 & a4) == 1)
    ABCDBContextLogChangeForPerson(*(_QWORD *)(v9 + 16), v10, 9u);
  if (a3)
  {
    v22 = ABPersonCopyLinkUUID((uint64_t)a1);
    if (v22)
    {
      v23 = (const void *)v22;
      ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(v9 + 16), v22, 4u);
      CFRelease(v23);
    }
  }
}

CFStringRef ABCPersonInvalidateImageData(const __CFString *a1)
{
  CFStringRef result;

  result = ABCAddressBookGetImageStore(a1);
  if (result)
  {
    CPRecordStoreInvalidateCachedInstancesOfClass();
    return (CFStringRef)CPRecordStoreInvalidateCachedInstancesOfClass();
  }
  return result;
}

uint64_t _clientThumbnailImageInvalidationCallbackWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t Property;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))a2;
  Property = CPRecordGetProperty();
  v5 = CPRecordGetProperty();
  v6 = v3(Property, v5, *(_QWORD *)(a2 + 8));
  if ((_DWORD)v6)
    CPRecordInvalidateRecord();
  return v6;
}

uint64_t _clientFullSizeImageInvalidationCallbackWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t Property;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))a2;
  Property = CPRecordGetProperty();
  v5 = v3(Property, 2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)v5)
    CPRecordInvalidateRecord();
  return v5;
}

CFStringRef ABCPersonInvalidateSpecificImageData(uint64_t a1)
{
  const __CFString *v1;

  ABCRecordGetUniqueId(a1);
  v1 = (const __CFString *)ABCGetAddressBookForRecord();
  return ABCPersonInvalidateImageData(v1);
}

BOOL _invalidatePersonImageDataPredicate(int a1, int a2, _DWORD *a3)
{
  int v3;

  if (*a3 != a1)
    return 0;
  v3 = a3[1];
  return v3 == -1 || v3 == a2;
}

CFStringRef ABCPersonInvalidateSpecificImageDataForSetOfPersonIds(const __CFString *a1)
{
  return ABCPersonInvalidateImageData(a1);
}

uint64_t _invalidatePeopleImageDataPredicate(int a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v6;

  result = CFSetContainsValue(*(CFSetRef *)a3, (const void *)a1);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a3 + 8);
    return v6 == -1 || v6 == a2;
  }
  return result;
}

const __CFString *ABCPersonInvalidateAllImageData(uint64_t a1)
{
  const __CFString *result;

  ABCRecordGetUniqueId(a1);
  result = (const __CFString *)ABCGetAddressBookForRecord();
  if (result)
    return ABCPersonInvalidateImageData(result);
  return result;
}

uint64_t ABCPersonGetDerivedFromFormatFromImageWithFormat(uint64_t a1, int a2)
{
  uint64_t result;
  const __CFString *v5;
  uint64_t v6;
  const __CFArray *Property;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  const __CFArray *v13;
  const __CFArray *v14;
  CFStringRef ImageStore;

  result = 2;
  if (a1 && a2 != 2)
  {
    v5 = (const __CFString *)ABCGetAddressBookForRecord();
    v6 = (uint64_t)v5;
    if (v5)
      ImageStore = ABCAddressBookGetImageStore(v5);
    else
      ImageStore = 0;
    Property = (const __CFArray *)CPRecordGetProperty();
    if (Property && (v8 = Property, Count = CFArrayGetCount(Property), Count >= 1))
    {
      v10 = Count;
      v11 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        if ((char **)CPRecordGetClass() != ABCFullSizeImageClass && CPRecordGetProperty() == a2)
          break;
        if (v10 == ++v11)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      ValueAtIndex = 0;
    }
    if (!ValueAtIndex && ImageStore)
    {
      v13 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat(v6, (uint64_t)ImageStore, a1, a2);
      if (!v13)
        return 2;
      v14 = v13;
      if (CFArrayGetCount(v13) < 1)
        ValueAtIndex = 0;
      else
        ValueAtIndex = CFArrayGetValueAtIndex(v14, 0);
      CFRelease(v14);
    }
    if (ValueAtIndex)
      return CPRecordGetProperty();
    return 2;
  }
  return result;
}

uint64_t ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(const void *a1, int a2)
{
  const __CFString *v4;
  uint64_t v5;
  CFStringRef ImageStore;
  const __CFArray *Property;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const void *v16;
  int ID;
  const void *v18;
  __CFArray *Mutable;
  uint64_t v20;
  uint64_t v22;

  if (!a1)
    return 0;
  v4 = (const __CFString *)ABCGetAddressBookForRecord();
  v5 = (uint64_t)v4;
  if (v4)
    ImageStore = ABCAddressBookGetImageStore(v4);
  else
    ImageStore = 0;
  if (a2 == 2)
    ABCPersonRemoveImageDataAndReturnError(a1, 5);
  Property = (const __CFArray *)CPRecordGetProperty();
  v22 = (uint64_t)ImageStore;
  if (Property && (v8 = Property, Count = CFArrayGetCount(Property), Count >= 1))
  {
    v10 = Count;
    v11 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v11 - 1);
      if ((a2 != 2 || (char **)CPRecordGetClass() != ABCFullSizeImageClass)
        && ((char **)CPRecordGetClass() == ABCFullSizeImageClass || CPRecordGetProperty() != a2))
      {
        ValueAtIndex = 0;
      }
      if (v11 >= v10)
        break;
      ++v11;
    }
    while (!ValueAtIndex);
  }
  else
  {
    ValueAtIndex = 0;
  }
  if (ValueAtIndex)
  {
    v13 = v22;
LABEL_25:
    if (!ValueAtIndex)
      goto LABEL_29;
    goto LABEL_37;
  }
  v13 = v22;
  if (!v22)
    goto LABEL_25;
  v14 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat(v5, v22, (uint64_t)a1, a2);
  if (!v14
    || ((v15 = v14, CFArrayGetCount(v14) < 1) ? (v16 = 0) : (v16 = CFArrayGetValueAtIndex(v15, 0)),
        CFRelease(v15),
        !v16))
  {
LABEL_29:
    ID = CPRecordGetID();
    v18 = (const void *)CPRecordCreate();
    if (ID != -1 && v13)
      CPRecordStoreAddRecord();
    if (a2 != 2)
      CPRecordSetProperty();
    CPRecordSetProperty();
    Mutable = (__CFArray *)ABCRecordCopyValue(a1, kABCImageProperty);
    if (!Mutable)
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(Mutable, v18);
    CPRecordSetProperty();
    CFRelease(Mutable);
    CFRelease(v18);
    if (v18)
      goto LABEL_37;
    return 0;
  }
LABEL_37:
  if ((char **)CPRecordGetClass() == ABCFullSizeImageClass)
  {
    CPRecordSetProperty();
    CPRecordSetProperty();
  }
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordMarkChanged();
  CPRecordMarkPropertyChanged();
  if (a2 == 5)
    return 1;
  CPRecordSetProperty();
  v20 = 1;
  _updatePreferredImageForPerson(a1, 1, 1, 0);
  if (a2 == 2)
    ABPersonResetImageTypeIfNeeded(a1);
  return v20;
}

uint64_t ABCPersonSetImageData(const void *a1, int a2)
{
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

uint64_t ABCPersonSetImageDataAndReturnError(const void *a1, int a2)
{
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

uint64_t ABCPersonCopyImageDataAndCropRect(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  const __CFString *v13;
  const __CFArray *Property;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  uint64_t v18;
  char **Class;
  int v20;
  CFStringRef ImageStore;
  const __CFArray *v22;
  const __CFArray *v23;
  int v24;
  uint64_t v26;
  const __CFString *v27;

  v12 = ABCGetAddressBookForRecord();
  if (a1)
  {
    v13 = (const __CFString *)v12;
    Property = (const __CFArray *)CPRecordGetProperty();
    v26 = a1;
    v27 = v13;
    if (Property)
    {
      v15 = Property;
      Count = CFArrayGetCount(Property);
      if (Count >= 1)
      {
        v17 = Count;
        v18 = 1;
        while (1)
        {
          CFArrayGetValueAtIndex(v15, v18 - 1);
          Class = (char **)CPRecordGetClass();
          if (a2 == 2 && Class == ABCFullSizeImageClass)
            break;
          if (Class == ABCThumbnailImageClass[0] && CPRecordGetProperty() == a2)
          {
            a1 = CPRecordCopyProperty();
            if (a3)
              *a3 = 0;
            if (a4)
              *a4 = 0;
            if (a5)
              *a5 = 0;
            if (!a6)
              goto LABEL_27;
            v20 = 0;
LABEL_15:
            *a6 = v20;
            goto LABEL_27;
          }
          a1 = 0;
LABEL_27:
          if (v18 < v17)
          {
            ++v18;
            if (!a1)
              continue;
          }
          goto LABEL_31;
        }
        a1 = CPRecordCopyProperty();
        if (a3)
          *a3 = CPRecordGetProperty();
        if (a4)
          *a4 = CPRecordGetProperty();
        if (a5)
          *a5 = CPRecordGetProperty();
        if (!a6)
          goto LABEL_27;
        v20 = CPRecordGetProperty();
        goto LABEL_15;
      }
    }
    a1 = 0;
LABEL_31:
    if (!a1 && v27)
    {
      ImageStore = ABCAddressBookGetImageStore(v27);
      if (ImageStore)
      {
        v22 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat((uint64_t)v27, (uint64_t)ImageStore, v26, a2);
        if (v22)
        {
          v23 = v22;
          if (CFArrayGetCount(v22) >= 1 && CFArrayGetValueAtIndex(v23, 0))
          {
            if ((char **)CPRecordGetClass() == ABCFullSizeImageClass)
            {
              a1 = CPRecordCopyProperty();
              if (a3)
                *a3 = CPRecordGetProperty();
              if (a4)
                *a4 = CPRecordGetProperty();
              if (a5)
                *a5 = CPRecordGetProperty();
              if (!a6)
                goto LABEL_57;
              v24 = CPRecordGetProperty();
            }
            else
            {
              a1 = CPRecordCopyProperty();
              if (a3)
                *a3 = 0;
              if (a4)
                *a4 = 0;
              if (a5)
                *a5 = 0;
              if (!a6)
                goto LABEL_57;
              v24 = 0;
            }
            *a6 = v24;
          }
          else
          {
            a1 = 0;
          }
LABEL_57:
          CFRelease(v23);
          return a1;
        }
      }
      return 0;
    }
  }
  return a1;
}

uint64_t ABCPersonCopyImageData(uint64_t a1, int a2)
{
  return ABCPersonCopyImageDataAndCropRect(a1, a2, 0, 0, 0, 0);
}

uint64_t ABCPersonHasImageDataWithFormat(uint64_t a1, int a2)
{
  const __CFString *v4;
  CFStringRef ImageStore;

  if (a1
    && (v4 = (const __CFString *)ABCGetAddressBookForRecord()) != 0
    && (ImageStore = ABCAddressBookGetImageStore(v4)) != 0)
  {
    return ABCImageStoreHasImagesForRecordWithFormat((uint64_t)ImageStore, a1, a2, 1);
  }
  else
  {
    return 0;
  }
}

uint64_t ABCPersonHasImageData(uint64_t a1)
{
  return ABCPersonHasImageDataEntries(a1, 1);
}

uint64_t ABCFindPersonMatchingPhoneNumber(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, 0, a3, a4);
}

uint64_t ABCFindPersonMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, int *a4, _QWORD *a5)
{
  uint64_t SanitizedPhoneNumber;
  void *v11;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  int v16;
  const __CFDictionary *v17;
  const __CFDictionary *Value;
  const void *v19;
  const void *v20;
  int v21;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  int v25;

  if ((ABPhoneUtilitiesIgnoreMatchingForLostMode() & 1) != 0)
    return 0;
  v25 = -1;
  SanitizedPhoneNumber = ABPersonGetSanitizedPhoneNumber(a2);
  if (!a1)
    return a1;
  v11 = (void *)SanitizedPhoneNumber;
  v12 = a3;
  if (!a3)
    v12 = (void *)CPPhoneNumberCopyHomeCountryCode();
  v13 = *(const __CFDictionary **)(a1 + 40);
  if (v13
    && (v14 = (const __CFDictionary *)CFDictionaryGetValue(v13, v12)) != 0
    && (v15 = v14, CFDictionaryContainsKey(v14, v11)))
  {
    v16 = _intValueForSanitiziedPhoneNumberInDictionary(v11, v15);
    if (a5)
    {
      v17 = *(const __CFDictionary **)(a1 + 48);
      if (v17 && (Value = (const __CFDictionary *)CFDictionaryGetValue(v17, v12)) != 0)
      {
        v19 = _stringValueForSanitizedPhoneNumberInDictionary(v11, Value);
        v20 = v19;
        if (v19)
          CFRetain(v19);
      }
      else
      {
        v20 = 0;
      }
      *a5 = v20;
    }
    if (a4)
    {
      v23 = *(const __CFDictionary **)(a1 + 56);
      if (v23 && (v24 = (const __CFDictionary *)CFDictionaryGetValue(v23, v12)) != 0)
      {
        v21 = _intValueForSanitiziedPhoneNumberInDictionary(v11, v24);
        v25 = v21;
      }
      else
      {
        v21 = -1;
      }
      goto LABEL_20;
    }
  }
  else
  {
    v16 = _PersonUIDForPhoneNumber(*(_QWORD *)(a1 + 16), (uint64_t)v11, (uint64_t)v12, &v25);
    _setIntValueForSanitizedPhoneNumberInDictionary(v16, v11, v12, (CFMutableDictionaryRef *)(a1 + 40));
    if (a5)
      *a5 = 0;
    if ((v25 & 0x80000000) == 0)
      _setIntValueForSanitizedPhoneNumberInDictionary(v25, v11, v12, (CFMutableDictionaryRef *)(a1 + 56));
    if (a4)
    {
      v21 = v25;
LABEL_20:
      *a4 = v21;
    }
  }
  if (v16 != -1)
  {
    a1 = ABCDBContextRecordForUIDOfType();
    if (!a5)
      goto LABEL_27;
LABEL_25:
    if (*MEMORY[0x1E0C9B0D0] == *a5)
      *a5 = 0;
    goto LABEL_27;
  }
  a1 = 0;
  if (a5)
    goto LABEL_25;
LABEL_27:
  if (v12 != a3 && v12)
    CFRelease(v12);
  return a1;
}

uint64_t _intValueForSanitiziedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  uint64_t v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  CFTypeID v6;
  unsigned int valuePtr;

  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFArrayGetTypeID() && CFArrayGetCount(v4) >= 1)
        return (uint64_t)CFArrayGetValueAtIndex(v4, 0);
      else
        return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

void _setValueForSanitizedPhoneNumberInDictionary(const void *a1, const void *a2, void *key, CFMutableDictionaryRef *a4)
{
  const __CFDictionary *Mutable;
  void *Value;

  Mutable = *a4;
  if (!*a4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *a4 = Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(*a4, key, Value);
    CFRelease(Value);
  }
  CFDictionarySetValue((CFMutableDictionaryRef)Value, a2, a1);
}

void _setIntValueForSanitizedPhoneNumberInDictionary(int a1, const void *a2, void *a3, CFMutableDictionaryRef *a4)
{
  CFNumberRef v7;
  int valuePtr;

  valuePtr = a1;
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  _setValueForSanitizedPhoneNumberInDictionary(v7, a2, a3, a4);
  CFRelease(v7);
}

const void *_stringValueForSanitizedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;
  CFTypeID v5;

  Value = CFDictionaryGetValue(theDict, key);
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 != CFStringGetTypeID())
    {
      v5 = CFGetTypeID(v3);
      if (v5 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v3) >= 1)
        return CFArrayGetValueAtIndex((CFArrayRef)v3, 0);
      return 0;
    }
  }
  return v3;
}

const void *_arrayValueForSanitizedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  const void *result;
  const void *v3;
  CFTypeID v4;

  result = CFDictionaryGetValue(theDict, key);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFArrayGetTypeID())
      return v3;
    else
      return 0;
  }
  return result;
}

CFArrayRef ABCCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, const __CFArray **a4)
{
  CFArrayRef Copy;
  uint64_t SanitizedPhoneNumber;
  void *v10;
  void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  const __CFArray *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFArray *v18;
  CFArrayRef v19;
  CFArrayRef theArray;
  CFTypeRef cf;

  if ((ABPhoneUtilitiesIgnoreMatchingForLostMode() & 1) != 0)
    return 0;
  theArray = 0;
  cf = 0;
  SanitizedPhoneNumber = ABPersonGetSanitizedPhoneNumber(a2);
  if (!a1)
    return 0;
  v10 = (void *)SanitizedPhoneNumber;
  if (a4)
    *a4 = 0;
  v11 = a3;
  if (!a3)
    v11 = (void *)CPPhoneNumberCopyHomeCountryCode();
  v12 = *(const __CFDictionary **)(a1 + 40);
  if (!v12)
    goto LABEL_21;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v12, v11);
  if (!Value)
    goto LABEL_21;
  v14 = Value;
  if (!CFDictionaryContainsKey(Value, v10))
    goto LABEL_21;
  v15 = (const __CFArray *)_arrayValueForSanitizedPhoneNumberInDictionary(v10, v14);
  if (v15)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15);
  else
    Copy = 0;
  v16 = *(const __CFDictionary **)(a1 + 48);
  if (v16)
  {
    v17 = (const __CFDictionary *)CFDictionaryGetValue(v16, v11);
    if (a4)
    {
      if (v17)
      {
        v18 = (const __CFArray *)_arrayValueForSanitizedPhoneNumberInDictionary(v10, v17);
        if (v18)
          v18 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18);
        *a4 = v18;
      }
    }
  }
  if (!Copy)
  {
LABEL_21:
    Copy = _CopyPersonUIDsForPhoneNumber(*(_QWORD *)(a1 + 16), (uint64_t)v10, (uint64_t)v11, (CFMutableArrayRef *)&cf, &theArray);
    _setValueForSanitizedPhoneNumberInDictionary(Copy, v10, v11, (CFMutableDictionaryRef *)(a1 + 40));
    _setValueForSanitizedPhoneNumberInDictionary(cf, v10, v11, (CFMutableDictionaryRef *)(a1 + 56));
    _setValueForSanitizedPhoneNumberInDictionary(theArray, v10, v11, (CFMutableDictionaryRef *)(a1 + 48));
    v19 = theArray;
    if (theArray)
    {
      if (a4)
      {
        *a4 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
        v19 = theArray;
      }
      CFRelease(v19);
    }
    if (cf)
      CFRelease(cf);
  }
  if (v11 != a3 && v11)
    CFRelease(v11);
  return Copy;
}

uint64_t ABCFindPersonMatchingPhoneNumberWithCountry(uint64_t a1, uint64_t a2, void *a3, int *a4, _QWORD *a5)
{
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4, a5);
}

void ABCFindUIDsMatchingPhoneNumbers(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, int a5)
{
  if (a1)
  {
    if ((a5 & 0x80000000) == 0)
      _FindUIDsMatchingPhoneNumbers(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
  }
}

void ABCCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6)
{
  if (a1 && a2)
  {
    if (a5)
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, 0, 0, 0);
  }
}

void ABCCopyPeopleAndMultiValuePropertiesMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7)
{
  if (a1 && a2)
  {
    if (a5)
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, 0, 0);
  }
}

void ABCCopyPeopleAndIdentifiersMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    if (a5)
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, 0, a7, a8);
  }
}

void ABCCopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7, uint64_t a8, uint64_t a9)
{
  if (a1 && a2)
  {
    if (a5)
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t ABCFindPersonMatchingEmailAddress(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return ABCFindPersonWithValueForMultivalueProperty(a1, kABCEmailProperty, a2, a3);
}

uint64_t ABCFindPersonWithValueForMultivalueProperty(uint64_t a1, int a2, const __CFString *a3, uint64_t a4)
{
  if ((ABPhoneUtilitiesIgnoreMatchingForLostMode() & 1) != 0
    || (_PersonUIDWithValueForMultivalueProperty(*(_QWORD *)(a1 + 16), a2, a3, a4) & 0x80000000) != 0)
  {
    return 0;
  }
  else
  {
    return ABCDBContextRecordForUIDOfType();
  }
}

uint64_t ABCCopyArrayOfUIDsMatchingEmailAddressIncludingLabels(uint64_t a1, const __CFString *a2, _QWORD *a3, _QWORD *a4)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(*(_QWORD *)(a1 + 16), kABCEmailProperty, a2, a3, a4);
}

uint64_t ABCFindPersonMatchingURL(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return ABCFindPersonWithValueForMultivalueProperty(a1, kABCURLProperty, a2, a3);
}

void ABCPersonDelete(int a1, const void *a2, uint64_t a3)
{
  ABCDBContextDeleteMultiValuesForRecord(a3, a1);
  if (ABCFTSIsEnabled())
    ABCDBContextDeleteSearchIndexEntryForRecord(a3, a2);
}

__CFArray *_copySortKeysForStringAndTransformedStringIfNotNull(__CFStringTokenizer *a1, const __CFString *a2, const __CFString *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  __CFArray *Mutable;
  __CFString *v13;
  const __CFString *v14;
  __CFArray *v15;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, a2);
  _appendTokenizedWordsToArray(Mutable, a2);
  if (a3)
  {
    v13 = _copyTransformedString(a2, a3);
    if (v13)
    {
      v14 = v13;
      CFArrayAppendValue(Mutable, v13);
      _appendTokenizedWordsToArray(Mutable, v14);
      CFRelease(v14);
    }
  }
  v15 = ABCopySortKeysForStrings(a1, Mutable, a4, a5, a6);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

__CFArray *_copyExtraSortKeysForOrganizationIfNotNull(__CFStringTokenizer *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  __CFArray *v10;
  __CFString *v11;
  const char *v12;
  const char *v13;
  __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const char *v20;
  __CFString *v21;
  __CFString *v22;
  const char *v23;

  if (!a2)
    return 0;
  v10 = ABCreateSortKeysMutableArray();
  v11 = _copyTransformedString(a2, a3);
  v12 = ABCreateSortKey(a2, a4, a5, 0);
  if (v12)
    CFArrayAppendValue(v10, v12);
  if (v11)
  {
    if (v11 != a2)
    {
      v13 = ABCreateSortKey(a2, a4, a5, 0);
      if (v13)
        CFArrayAppendValue(v10, v13);
    }
    CFRelease(v11);
  }
  v14 = ABCCreateArrayBySeparatingWordsInPropertyString(a1, a2);
  if (v14)
  {
    v15 = v14;
    Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      v17 = Count;
      for (i = 0; i != v17; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, i);
        v20 = ABCreateSortKey(ValueAtIndex, a4, a5, 0);
        if (v20)
          CFArrayAppendValue(v10, v20);
        v21 = _copyTransformedString(ValueAtIndex, a3);
        if (v21)
        {
          v22 = v21;
          if (v21 != ValueAtIndex)
          {
            v23 = ABCreateSortKey(v21, a4, a5, 0);
            if (v23)
              CFArrayAppendValue(v10, v23);
          }
          CFRelease(v22);
        }
      }
    }
    CFRelease(v15);
  }
  return v10;
}

__CFString *_copyTransformedString(CFStringRef theString, const __CFString *a2)
{
  __CFString *MutableCopy;
  __CFString *v4;

  if (!a2)
    return (__CFString *)CFRetain(theString);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  v4 = MutableCopy;
  if (MutableCopy)
  {
    if (!CFStringTransform(MutableCopy, 0, a2, 0))
    {
      CFRelease(v4);
      return 0;
    }
  }
  return v4;
}

void _appendSearchKeys(__CFArray *a1, CFArrayRef theArray)
{
  CFRange v4;

  if (a1 && theArray && CFArrayGetCount(theArray) >= 1)
  {
    v4.length = CFArrayGetCount(theArray);
    v4.location = 0;
    CFArrayAppendArray(a1, theArray, v4);
  }
}

const __CFArray *ABPersonCopyFirstNamePartForSorting(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  _OWORD v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, sizeof(v18));
  if (a2 == 1)
  {
    *(_QWORD *)&v18[0] = a8;
    *((_QWORD *)&v18[0] + 1) = a7;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = &v18[v9];
  if (a9 == 1)
    v11 = a6;
  else
    v11 = a4;
  if (a9 == 1)
    v12 = a5;
  else
    v12 = a3;
  if (a9 == 1)
    v13 = a4;
  else
    v13 = a6;
  *v10 = v11;
  *(_QWORD *)((char *)v18 + ((4 * v9) | 8)) = v12;
  if (a9 == 1)
    v14 = a3;
  else
    v14 = a5;
  v10[2] = v13;
  v10[3] = v14;
  if (a2 != 1)
  {
    v10[4] = a8;
    *(_QWORD *)((char *)v18 + ((4 * v9) | 0x28)) = a7;
  }
  v15 = 0;
  do
  {
    v16 = (const void *)*((_QWORD *)v18 + v15);
    if (v15 > 4)
      break;
    ++v15;
  }
  while (!v16);
  if (!v16)
    return ABCCopyFallbackStringFromRecord(a1);
  CFRetain(v16);
  return (const __CFArray *)v16;
}

const __CFArray *ABCCopyFallbackStringFromRecord(const void *a1)
{
  const __CFArray *result;
  const __CFString *Value;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;

  result = (const __CFArray *)ABRecordCopyValue(a1, kABCPersonDisplayNameProperty);
  if (!result)
  {
    Value = (const __CFString *)ABCRecordGetValue(a1, kABCNicknameProperty);
    if (!Value || (result = (const __CFArray *)CFStringCreateCopy(0, Value)) == 0)
    {
      v4 = ABCRecordGetValue(a1, kABCEmailProperty);
      if (!v4
        || (v5 = (const __CFArray *)v4, ABCMultiValueGetCount(v4) < 1)
        || (result = ABCMultiValueCopyValueAtIndex(v5, 0)) == 0)
      {
        result = (const __CFArray *)ABCRecordGetValue(a1, kABCPhoneProperty);
        if (result)
        {
          v6 = result;
          if (ABCMultiValueGetCount((uint64_t)result) < 1)
            return 0;
          else
            return ABCMultiValueCopyValueAtIndex(v6, 0);
        }
      }
    }
  }
  return result;
}

uint64_t ABCPersonNameOrderPieces(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t *a12)
{
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFString *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  BOOL v41;
  const __CFString *v42;

  v20 = a11;
  v21 = a12;
  if (ABLogAPIUsage())
  {
    v42 = _isMainThread();
    v22 = a8;
    v23 = a2;
    v24 = a4;
    v25 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABCPersonNameOrderPieces(ABPersonCompositeNameFormat, ABCPersonSortOrdering, int, void *, void *, void *, void *, void *, void *, void *, void **, CFIndex *)", 3077, v25, 0, v26, v27, v28, (uint64_t)v42);
    v29 = v25;
    a4 = v24;
    a2 = v23;
    a8 = v22;
    v21 = a12;
    v20 = a11;
    CFRelease(v29);
  }
  *v21 = -1;
  if (a3 == 1 && a4)
  {
    *v20 = a4;
LABEL_6:
    *v21 = 0;
    return 1;
  }
  if (a1)
    v31 = a8;
  else
    v31 = a6;
  if (a1)
    v32 = a6;
  else
    v32 = a7;
  if (a1)
    v33 = a7;
  else
    v33 = a8;
  if (a5)
  {
    *v20 = a5;
    v34 = 1;
    if (v31)
      goto LABEL_19;
  }
  else
  {
    v34 = 0;
    if (v31)
    {
LABEL_19:
      v20[v34] = v31;
      v35 = v34 + 1;
      if (!a2 && v31 == a6 || (v36 = 0, v37 = -1, a2 == 1) && v31 == a8)
      {
        *v21 = v34;
        v36 = 1;
        v37 = v34;
      }
      if (v32)
        goto LABEL_25;
LABEL_36:
      v38 = v35;
      goto LABEL_37;
    }
  }
  v36 = 0;
  v37 = -1;
  v35 = v34;
  v34 = -1;
  if (!v32)
    goto LABEL_36;
LABEL_25:
  v20[v35] = v32;
  v38 = v35 + 1;
  if (v32 != a7)
  {
    if (!a2 && v32 == a6 || (v32 == a8 ? (v39 = a2 == 1) : (v39 = 0), v39 || v37 == -1))
    {
      *v21 = v35;
      v36 = 1;
      v37 = v35;
    }
  }
LABEL_37:
  if (!v33)
  {
    result = v38;
    goto LABEL_46;
  }
  v20[v38] = v33;
  result = v38 + 1;
  if (v33 == a7)
    v40 = 1;
  else
    v40 = v36;
  if ((v40 & 1) != 0)
  {
LABEL_46:
    if (!v31 || v37 != -1)
    {
LABEL_49:
      if (!a9)
        goto LABEL_57;
LABEL_50:
      v20[result++] = a9;
      return result;
    }
LABEL_48:
    *v21 = v34;
    v36 = 1;
    goto LABEL_49;
  }
  if (!a2 && v33 == a6 || (v33 == a8 ? (v41 = a2 == 1) : (v41 = 0), v41 || v37 == -1))
  {
    v34 = v38;
    goto LABEL_48;
  }
  v36 = 0;
  if (a9)
    goto LABEL_50;
LABEL_57:
  if (!result)
  {
    if (a4)
    {
      *v20 = a4;
      if ((v36 & 1) != 0)
        return 1;
      goto LABEL_6;
    }
    if (a10)
    {
      *v20 = a10;
      if ((v36 & 1) != 0)
        return 1;
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

CFArrayRef ABCPersonCopyNamePieces(const void *a1, int a2, uint64_t *a3)
{
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ABPersonCompositeNameFormat CompositeNameFormatForRecord;
  int Value;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  CFIndex v18;
  const __CFString *v20;
  void *values[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v20 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABCPersonCopyNamePieces(ABCRecordRef, ABCPersonSortOrdering, CFIndex *)", 3178, v5, 0, v6, v7, v8, (uint64_t)v20);
    CFRelease(v5);
  }
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)values = 0u;
  CompositeNameFormatForRecord = ABPersonGetCompositeNameFormatForRecord(a1);
  Value = ABCRecordGetValue(a1, kABCKindProperty);
  v11 = _nonEmptyNamePiece((uint64_t)a1, kABCOrganizationProperty);
  v12 = _nonEmptyNamePiece((uint64_t)a1, kABCPrefixProperty);
  v13 = _nonEmptyNamePiece((uint64_t)a1, kABCFirstNameProperty);
  v14 = _nonEmptyNamePiece((uint64_t)a1, kABCMiddleNameProperty);
  v15 = _nonEmptyNamePiece((uint64_t)a1, kABCLastNameProperty);
  v16 = _nonEmptyNamePiece((uint64_t)a1, kABCSuffixProperty);
  v17 = _nonEmptyNamePiece((uint64_t)a1, kABCCompositeNameFallbackProperty);
  v18 = ABCPersonNameOrderPieces(CompositeNameFormatForRecord, a2, Value, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, values, a3);
  if (v18 < 1)
    return 0;
  else
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, v18, MEMORY[0x1E0C9B378]);
}

const __CFString *_nonEmptyNamePiece(uint64_t a1, uint64_t property)
{
  const __CFString *result;
  const __CFString *v5;

  if ((ABPersonGetTypeOfProperty(property) & 0x101) != 1)
    return 0;
  result = (const __CFString *)ABCRecordGetValue(a1, property);
  if (result)
  {
    v5 = result;
    if (CFStringGetLength(result))
      return v5;
    else
      return 0;
  }
  return result;
}

uint64_t ABCPersonInvalidateSyntheticProperties()
{
  CPRecordSetProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  return CPRecordUnloadProperty();
}

CFIndex saveImage(CFIndex result)
{
  CFIndex v1;
  const __CFString *v2;
  const __CFArray *v3;
  CFIndex v4;
  CFIndex i;

  if (result)
  {
    v1 = result;
    v2 = (const __CFString *)ABCGetAddressBookForRecord();
    ABCAddressBookGetImageStore(v2);
    result = ABCRecordGetValue(v1, kABCImageProperty);
    if (result)
    {
      v3 = (const __CFArray *)result;
      result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        v4 = result;
        for (i = 0; i != v4; ++i)
        {
          CFArrayGetValueAtIndex(v3, i);
          CPRecordGetClass();
          if (CPRecordGetProperty() == -1)
          {
            CPRecordGetID();
            CPRecordSetProperty();
          }
          result = CPRecordGetID();
          if ((_DWORD)result == -1)
            result = CPRecordStoreAddRecord();
        }
      }
    }
  }
  return result;
}

void loadSyntheticNameProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __CFStringTokenizer *WordTokenizer;
  void *SortCollator;
  uint64_t SearchCollator;
  CFMutableStringRef Mutable;
  uint64_t v11;
  CFMutableStringRef v12;
  const __CFString *v13;
  CFDataRef v14;
  CFDataRef v15;
  unsigned int ShouldUseExtraTokenizations;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  __CFArray *v20;
  _BOOL4 v21;
  __CFArray *v22;
  __CFArray *v23;
  __CFArray *v24;
  const __CFAllocator *v25;
  __CFString *v26;
  __CFArray *v27;
  __CFString *v28;
  const __CFArray *v29;
  const __CFString *v30;
  __CFArray *v31;
  const __CFArray *v32;
  uint64_t v33;
  __CFArray *v34;
  __CFArray *v35;
  __CFArray *v36;
  __CFString *v37;
  const __CFArray *v38;
  uint64_t v39;
  __CFArray *v40;
  __CFArray *v41;
  __CFArray *v42;
  __CFArray *v43;
  const __CFArray *v44;
  const __CFArray *v45;
  const __CFArray *v46;
  const __CFArray *v47;
  CFStringRef v48;
  __CFArray *v49;
  __CFArray *v50;
  const void *v51;
  __CFArray *v52;
  const __CFString *v53;
  const __CFString *v54;
  __CFArray *v55;
  const __CFString *v56;
  __CFArray *v57;
  __CFArray *v58;
  __CFArray *v59;
  __CFArray *v60;
  __CFArray *cf;
  const __CFString *v62;
  __CFArray *v63;
  const __CFString *v64;
  __CFArray *v65;
  __CFArray *v66;
  __CFArray *theArray;
  const __CFString *v68;
  __CFArray *v69;
  const __CFString *v70;
  __CFArray *v71;
  const __CFString *v72;
  __CFArray *v73;
  const __CFString *v74;
  const __CFString *v75;
  __CFArray *v76;
  uint64_t v77;
  CFMutableStringRef v78;
  const __CFString *v79;
  int Property;
  const __CFString *v81;
  const __CFString *v82;
  int v83;
  int v84;
  CFStringRef v85;
  CFStringRef v86;
  _QWORD v87[2];

  if (!CPRecordGetProperty())
  {
    _ABCLoadSingleString((uint64_t)a1, a2, a3);
    return;
  }
  v85 = 0;
  v86 = 0;
  v83 = -1;
  v84 = -1;
  v6 = ABCGetAddressBookForRecord();
  WordTokenizer = ABAddressBookGetWordTokenizer(v6);
  SortCollator = (void *)ABAddressBookGetSortCollator(v6);
  SearchCollator = ABAddressBookGetSearchCollator(v6);
  Mutable = 0;
  if (SortCollator)
  {
    v11 = SearchCollator;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (SearchCollator)
    {
      Property = CPRecordGetProperty();
      ShouldUseExtraTokenizations = ABAddressBookShouldUseExtraTokenizations(v6);
      v74 = (const __CFString *)ABAddressBookCopySectionNameTransform(v6);
      v17 = (const __CFString *)ABAddressBookCopySearchTransform(v6);
      v54 = (const __CFString *)CPRecordGetProperty();
      v79 = (const __CFString *)CPRecordGetProperty();
      v18 = (const __CFString *)CPRecordGetProperty();
      v56 = (const __CFString *)CPRecordGetProperty();
      v81 = (const __CFString *)CPRecordGetProperty();
      v77 = (uint64_t)SortCollator;
      v82 = (const __CFString *)CPRecordGetProperty();
      v75 = (const __CFString *)CPRecordGetProperty();
      v68 = (const __CFString *)CPRecordGetProperty();
      v70 = (const __CFString *)CPRecordGetProperty();
      v72 = (const __CFString *)CPRecordGetProperty();
      v64 = (const __CFString *)CPRecordGetProperty();
      v62 = (const __CFString *)CPRecordGetProperty();
      cf = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v54, v17, ShouldUseExtraTokenizations, v11, 0);
      v60 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v79, v17, ShouldUseExtraTokenizations, v11, 0);
      v59 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v18, v17, ShouldUseExtraTokenizations, v11, 0);
      v58 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v56, v17, ShouldUseExtraTokenizations, v11, 0);
      theArray = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v81, v17, ShouldUseExtraTokenizations, v11, 0);
      v66 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v82, v17, ShouldUseExtraTokenizations, v11, 0);
      v76 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v75, v17, 0, v11, 0);
      v57 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v68, v17, 0, v11, 0);
      v65 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v64, v17, ShouldUseExtraTokenizations, v11, 0);
      v63 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v62, v17, ShouldUseExtraTokenizations, v11, 0);
      v69 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v70, v17, 0, v11, 0);
      v55 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v72, v17, 0, v11, 0);
      v73 = _copyExtraSortKeysForOrganizationIfNotNull(WordTokenizer, v81, v17, v11, 0);
      v53 = v17;
      v71 = _copyExtraSortKeysForOrganizationIfNotNull(WordTokenizer, v82, v17, v11, 0);
      CreateSectionSortKeys(v6, a1, Property, (uint64_t)v54, (uint64_t)v18, (uint64_t)v79, (uint64_t)v56, (uint64_t)v81, (uint64_t)v82, &v86, &v84, 0, SortCollator, v74);
      v19 = (uint64_t)v18;
      CreateSectionSortKeys(v6, a1, Property, (uint64_t)v54, (uint64_t)v18, (uint64_t)v79, (uint64_t)v56, (uint64_t)v81, (uint64_t)v82, &v85, &v83, 1, SortCollator, v74);
      if (!v54 && !v79 && !v18 && !v56 && !v81 && !v82)
      {
        v13 = (const __CFString *)ABCCopyFallbackStringFromRecord(a1);
        if (v13)
        {
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          v20 = ABCCreateSortKeysForString(WordTokenizer, v13, 0, (uint64_t)SortCollator, 2);
          ABCMergeSortKeysIntoString(Mutable, v20, 0, 0);
          v21 = Mutable != 0;
          if (Mutable)
          {
            CFRetain(Mutable);
            CFRetain(Mutable);
          }
          CFRetain(v13);
        }
        else
        {
          Mutable = 0;
          v21 = 0;
          v20 = 0;
        }
        v30 = v53;
        v31 = CFArrayCreateMutable(0, 0, 0);
        _appendSearchKeys(v31, v76);
        _appendSearchKeys(v31, v69);
        if (CFArrayGetCount(v31) < 1)
        {
          if (!v20)
          {
            v14 = 0;
            if (!v13)
              goto LABEL_34;
            goto LABEL_33;
          }
          v32 = v20;
        }
        else
        {
          v32 = v31;
        }
        v14 = ABCopySortKeyForSortKeys(v32);
        if (!v13)
        {
LABEL_34:
          if (v21)
            CFRelease(Mutable);
          if (v20)
            CFRelease(v20);
          v27 = v66;
          if (v31)
            CFRelease(v31);
          v78 = Mutable;
          v34 = theArray;
LABEL_77:
          v42 = CFArrayCreateMutable(0, 0, 0);
          if (v42)
          {
            v43 = v42;
            v44 = v34;
            v45 = v27;
            v46 = v71;
            v47 = v73;
            if (!Property)
            {
              _appendSearchKeys(v42, v59);
              _appendSearchKeys(v43, v58);
              _appendSearchKeys(v43, cf);
              _appendSearchKeys(v43, v57);
              _appendSearchKeys(v43, v60);
              v44 = v76;
              v45 = v55;
              v46 = v63;
              v47 = v65;
            }
            _appendSearchKeys(v43, v44);
            _appendSearchKeys(v43, v45);
            _appendSearchKeys(v43, v47);
            _appendSearchKeys(v43, v46);
            v15 = ABCopySortKeyForSortKeys(v43);
            CFRelease(v43);
            v27 = v66;
            v34 = theArray;
          }
          else
          {
            v15 = 0;
          }
          if (v74)
            CFRelease(v74);
          if (v30)
            CFRelease(v30);
          if (cf)
            CFRelease(cf);
          if (v60)
            CFRelease(v60);
          if (v59)
            CFRelease(v59);
          if (v58)
            CFRelease(v58);
          if (v34)
            CFRelease(v34);
          if (v27)
            CFRelease(v27);
          v12 = v78;
          if (v76)
            CFRelease(v76);
          if (v57)
            CFRelease(v57);
          if (v69)
            CFRelease(v69);
          if (v55)
            CFRelease(v55);
          if (v73)
            CFRelease(v73);
          if (v71)
            CFRelease(v71);
          if (v65)
            CFRelease(v65);
          if (v63)
            CFRelease(v63);
          goto LABEL_114;
        }
LABEL_33:
        CFRelease(v13);
        goto LABEL_34;
      }
      v87[0] = 0;
      v22 = ABCCreateSortKeysForString(WordTokenizer, v54, 0, (uint64_t)SortCollator, 2);
      v50 = ABCCreateSortKeysForString(WordTokenizer, v79, 0, v77, 2);
      v49 = ABCCreateSortKeysForString(WordTokenizer, v18, 0, v77, 2);
      v52 = ABCCreateSortKeysForString(WordTokenizer, v56, 0, v77, 2);
      v23 = ABCCreateSortKeysForString(WordTokenizer, v81, 0, v77, 2);
      v24 = ABCCreateSortKeysForString(WordTokenizer, v82, 0, v77, 2);
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v26 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      Mutable = v26;
      v51 = v23;
      if (Property)
      {
        v27 = v66;
        if (!((unint64_t)v23 | (unint64_t)v24))
        {
          ABCMergeSortKeysIntoString(v26, v49, v19, v87);
          ABCMergeSortKeysIntoString(Mutable, v52, (uint64_t)v56, v87);
          ABCMergeSortKeysIntoString(Mutable, v22, (uint64_t)v54, v87);
          v28 = Mutable;
          v29 = v50;
          v33 = (uint64_t)v79;
          goto LABEL_42;
        }
        ABCMergeSortKeysIntoString(v26, v24, (uint64_t)v82, v87);
        v28 = Mutable;
        v29 = v23;
      }
      else
      {
        v27 = v66;
        if (!v22 && !v50 && !v49 && !v52 && !v81 && !v24)
        {
LABEL_43:
          if (CFStringGetLength(Mutable) <= 0)
          {
            CFRelease(Mutable);
            Mutable = 0;
          }
          v78 = CFStringCreateMutable(v25, 0);
          v87[0] = 0;
          if (Property)
          {
            if ((unint64_t)v23 | (unint64_t)v24)
            {
              ABCMergeSortKeysIntoString(v78, v24, (uint64_t)v82, v87);
              ABCMergeSortKeysIntoString(v78, v23, (uint64_t)v81, v87);
              v36 = v49;
              v35 = v50;
LABEL_57:
              if (CFStringGetLength(v78) <= 0)
              {
                CFRelease(v78);
                v78 = 0;
              }
              if (v22)
                CFRelease(v22);
              if (v35)
                CFRelease(v35);
              v30 = v53;
              if (v36)
                CFRelease(v36);
              if (v52)
                CFRelease(v52);
              if (v51)
                CFRelease(v51);
              if (v24)
                CFRelease(v24);
              v40 = CFArrayCreateMutable(0, 0, 0);
              if (v40)
              {
                v41 = v40;
                _appendSearchKeys(v40, v65);
                _appendSearchKeys(v41, v59);
                _appendSearchKeys(v41, v58);
                _appendSearchKeys(v41, cf);
                _appendSearchKeys(v41, v57);
                _appendSearchKeys(v41, v60);
                _appendSearchKeys(v41, v63);
                _appendSearchKeys(v41, v76);
                _appendSearchKeys(v41, v69);
                v34 = theArray;
                if (ShouldUseExtraTokenizations)
                {
                  _appendSearchKeys(v41, theArray);
                  _appendSearchKeys(v41, v27);
                }
                _appendSearchKeys(v41, v73);
                _appendSearchKeys(v41, v71);
                v14 = ABCopySortKeyForSortKeys(v41);
                CFRelease(v41);
              }
              else
              {
                v14 = 0;
                v34 = theArray;
              }
              v13 = 0;
              goto LABEL_77;
            }
            ABCMergeSortKeysIntoString(v78, v52, (uint64_t)v56, v87);
            v36 = v49;
            ABCMergeSortKeysIntoString(v78, v49, v19, v87);
            v35 = v50;
            ABCMergeSortKeysIntoString(v78, v50, (uint64_t)v79, v87);
            v37 = v78;
            v38 = v22;
            v39 = (uint64_t)v54;
          }
          else
          {
            v36 = v49;
            v35 = v50;
            if (!v22 && !v50 && !v49 && !v52 && !v81 && !v24)
              goto LABEL_57;
            ABCMergeSortKeysIntoString(v78, v52, (uint64_t)v56, v87);
            ABCMergeSortKeysIntoString(v78, v49, v19, v87);
            ABCMergeSortKeysIntoString(v78, v50, (uint64_t)v79, v87);
            ABCMergeSortKeysIntoString(v78, v22, (uint64_t)v54, v87);
            ABCMergeSortKeysIntoString(v78, v24, (uint64_t)v82, v87);
            v37 = v78;
            v38 = (const __CFArray *)v51;
            v39 = (uint64_t)v81;
          }
          ABCMergeSortKeysIntoString(v37, v38, v39, v87);
          goto LABEL_57;
        }
        ABCMergeSortKeysIntoString(v26, v49, v19, v87);
        ABCMergeSortKeysIntoString(Mutable, v52, (uint64_t)v56, v87);
        ABCMergeSortKeysIntoString(Mutable, v22, (uint64_t)v54, v87);
        ABCMergeSortKeysIntoString(Mutable, v50, (uint64_t)v79, v87);
        ABCMergeSortKeysIntoString(Mutable, v24, (uint64_t)v82, v87);
        v28 = Mutable;
        v29 = v23;
      }
      v33 = (uint64_t)v81;
LABEL_42:
      ABCMergeSortKeysIntoString(v28, v29, v33, v87);
      goto LABEL_43;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
LABEL_114:
  CPRecordInitializeProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  v48 = v86;
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordSetProperty();
  if (Mutable)
  {
    CFRelease(Mutable);
    v48 = v86;
  }
  if (v48)
    CFRelease(v48);
  if (v12)
    CFRelease(v12);
  if (v85)
    CFRelease(v85);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
}

void CreateSectionSortKeys(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFStringRef *a10, _DWORD *a11, int a12, void *a13, const __CFString *a14)
{
  const __CFString *NamePartForSorting;
  const __CFString *v16;
  __CFString *MutableCopy;
  const __CFString *v18;
  const void *v19;
  const char *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFIndex Count;
  CFIndex v24;
  BOOL v25;
  CFIndex v26;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v28;
  const __CFArray *v29;
  CFIndex v30;
  uint64_t v31;
  const __CFData *v32;
  const __CFString *Value;
  const char *v34;
  const __CFString *v35;
  const char *v36;
  int v37;
  const __CFData *v38;
  const char *BytePtr;
  size_t v40;
  const __CFAllocator *alloc;
  CFArrayRef v42;
  CFArrayRef theArray;
  CFRange v44;

  NamePartForSorting = (const __CFString *)ABPersonCopyFirstNamePartForSorting(a2, a3, a4, a5, a6, a7, a8, a9, a12);
  if (!NamePartForSorting)
    goto LABEL_35;
  v16 = NamePartForSorting;
  if (CFStringGetLength(NamePartForSorting) <= 0)
  {
    v19 = v16;
LABEL_34:
    CFRelease(v19);
    goto LABEL_35;
  }
  if (a14)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v16);
    if (CFStringTransform(MutableCopy, 0, a14, 0))
    {
      v18 = v16;
      v16 = MutableCopy;
    }
    else
    {
      v18 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_9;
    }
    CFRelease(v18);
  }
LABEL_9:
  v20 = ABCreateDataSortKey(v16, (uint64_t)a13, 0);
  CFRelease(v16);
  if (!v20)
  {
LABEL_35:
    *a11 = 0x7FFFFFFF;
    *a10 = 0;
    return;
  }
  v42 = 0;
  theArray = 0;
  v21 = (const __CFArray *)ABAddressBookCopySectionHeaderDictionaries(a1, (unint64_t)&theArray, (unint64_t)&v42, a13);
  if (!v21)
  {
    v19 = v20;
    goto LABEL_34;
  }
  v22 = v21;
  Count = CFArrayGetCount(v21);
  if (Count >= 1)
  {
    v24 = Count;
    v25 = 0;
    v26 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v26);
      v28 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v26);
      v29 = (const __CFArray *)CFArrayGetValueAtIndex(v42, v26);
      v30 = CFArrayGetCount(v28);
      v44.location = 0;
      v44.length = v30;
      v31 = CFArrayBSearchValues(v29, v44, v20, (CFComparatorFunction)ABCompareDataSortKeys, 0);
      if (v31 >= v30)
      {
        Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("FirstCharacterAfterLanguage"));
        if (Value)
        {
          v34 = ABCreateDataSortKey(Value, (uint64_t)a13, 0);
          if (ABCompareDataSortKeys((const __CFData *)v20, (const __CFData *)v34) == -1)
          {
            v31 = v30 - 1;
            v25 = 1;
          }
        }
        else
        {
          v35 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("LastCharacter"));
          v34 = ABCreateDataSortKey(v35, (uint64_t)a13, 0);
          v36 = ABCreateUpperBoundingDataSortKey((const __CFData *)v34);
          if (ABCompareDataSortKeys((const __CFData *)v20, (const __CFData *)v36) < 1)
          {
            v31 = v30 - 1;
            v25 = 1;
          }
          if (v36)
            CFRelease(v36);
        }
        if (v34)
          CFRelease(v34);
      }
      else
      {
        v32 = (const __CFData *)CFArrayGetValueAtIndex(v29, v31);
        if (v31)
        {
          if (v31 >= 1)
          {
            v31 -= ABCompareDataSortKeys(v32, (const __CFData *)v20) == 1;
            v25 = 1;
            goto LABEL_29;
          }
        }
        else
        {
          v25 = ABCompareDataSortKeys((const __CFData *)v20, v32) >= 0;
        }
      }
      if (!v25)
      {
        v37 = 0;
        goto LABEL_30;
      }
LABEL_29:
      v38 = (const __CFData *)CFArrayGetValueAtIndex(v29, v31);
      BytePtr = (const char *)CFDataGetBytePtr(v38);
      *a11 = v26;
      v40 = strlen(BytePtr);
      *a10 = CFStringCreateWithBytes(alloc, (const UInt8 *)BytePtr, v40, 0x201u, 0);
      v37 = v25;
LABEL_30:
      if (++v26 >= v24 || v37)
        goto LABEL_38;
    }
  }
  v25 = 0;
LABEL_38:
  CFRelease(v22);
  CFRelease(theArray);
  CFRelease(v42);
  CFRelease(v20);
  if (!v25)
    goto LABEL_35;
}

uint64_t saveSearchKey()
{
  const __CFData *Property;
  const __CFData *v1;
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  int ID;
  sqlite3_stmt *v6;
  const UInt8 *BytePtr;
  int Length;
  sqlite3_stmt *v9;
  const UInt8 *v10;
  int v11;

  Property = (const __CFData *)CPRecordGetProperty();
  v1 = (const __CFData *)CPRecordGetProperty();
  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    v3 = result;
    v4 = *(sqlite3_stmt **)(result + 8);
    if (v4)
    {
      ID = CPRecordGetID();
      sqlite3_bind_int(v4, 1, ID);
      v6 = *(sqlite3_stmt **)(v3 + 8);
      if (Property)
      {
        BytePtr = CFDataGetBytePtr(Property);
        Length = CFDataGetLength(Property);
        sqlite3_bind_blob(v6, 2, BytePtr, Length, 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v3 + 8), 2);
      }
      v9 = *(sqlite3_stmt **)(v3 + 8);
      if (v1)
      {
        v10 = CFDataGetBytePtr(v1);
        v11 = CFDataGetLength(v1);
        sqlite3_bind_blob(v9, 3, v10, v11, 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v3 + 8), 3);
      }
      CPSqliteStatementPerform();
      return CPSqliteStatementReset();
    }
  }
  return result;
}

void loadAlternateBirthday(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  const void *v4;
  void *v5;
  const void *v6;

  v3 = (void *)_ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    v4 = v3;
    v5 = ABCreateAlternateBirthdayFromString(v3);
    if (v5)
    {
      v6 = v5;
      CPRecordInitializeProperty();
      CFRelease(v6);
    }
    CFRelease(v4);
  }
}

void saveAlternateBirthday(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *Property;
  const __CFString *v7;

  Property = (void *)CPRecordGetProperty();
  v7 = (const __CFString *)ABCreateStringFromAlternateBirthday(Property);
  _ABCSaveSingleStringValue(a1, a2, a3, v7);
  if (v7)
    CFRelease(v7);
}

uint64_t _prepareForSave()
{
  if (CPRecordGetProperty())
  {
    CPRecordGetID();
    CPRecordSetProperty();
  }
  return CPRecordGetProperty();
}

void _didSave(const void *a1, uint64_t a2, const __CFDictionary *a3)
{
  CFIndex Count;
  const void **v7;
  const __CFArray *v8;

  if (ABCFTSIsEnabled())
  {
    if (CPRecordIsPendingAdd())
    {
      ABCDContextCreateSearchIndexEntryForPerson(a2, a1);
      ABCDContextUpdateSearchIndexForPerson(a2, a1);
    }
    else
    {
      Count = CFDictionaryGetCount(a3);
      v7 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(a3, v7, 0);
      v8 = CFArrayCreate(0, v7, Count, 0);
      ABCDContextUpdateSearchIndexForPersonAndProperties(a2, a1, v8);
      free(v7);
      CFRelease(v8);
    }
  }
}

void _appendTokenizedWordsToArray(__CFArray *a1, const __CFString *a2)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v4;
  CFRange v5;

  if (a1)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, CFSTR("-"));
    if (ArrayBySeparatingStrings)
    {
      v4 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
      {
        v5.length = CFArrayGetCount(v4);
        v5.location = 0;
        CFArrayAppendArray(a1, v4, v5);
      }
      CFRelease(v4);
    }
  }
}

uint64_t _findFacebookStoreRowHandler(uint64_t a1, uint64_t a2)
{
  id v4;
  const unsigned __int8 *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  sqlite3_stmt *v12;

  v4 = *(id *)(a2 + 8);
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v5, 4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "length"))
    {
      ABAccountCachedTypeForAccountIdentifier((uint64_t)v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        v9 = v7;
      }
      else
      {
        objc_msgSend(v4, "displayTypeForAccountWithIdentifier:", v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "identifier");
        v9 = (id)objc_claimAutoreleasedReturnValue();

      }
      if (+[ABFacebookMigrator isAccountTypeFacebook:](ABFacebookMigrator, "isAccountTypeFacebook:", v9))
      {
        v12 = *(sqlite3_stmt **)(a1 + 8);
        v10 = 1;
        *(_DWORD *)a2 = sqlite3_column_int(v12, 1);
      }
      else
      {
        v10 = 0;
      }

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t ABCRecordSetValue(const void *a1, uint64_t a2, __CFString *a3)
{
  return ABCRecordSetValueAndReturnError(a1, a2, a3, 0);
}

uint64_t ABCRecordSetIntValueAndReturnError(const void *a1, uint64_t a2, int a3, CFAllocatorRef *a4)
{
  __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  int valuePtr;

  valuePtr = a3;
  v7 = (__CFString *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = ABCRecordSetValueAndReturnError(a1, a2, v7, a4);
  CFRelease(v8);
  return v9;
}

uint64_t ABCRecordRemoveValue(const void *a1, uint64_t a2)
{
  return ABCRecordSetValueAndReturnError(a1, a2, 0, 0);
}

uint64_t ABCRecordRemoveValueAndReturnError(const void *a1, uint64_t a2)
{
  return ABCRecordSetValueAndReturnError(a1, a2, 0, 0);
}

uint64_t ABCRecordCopyCompositeName(uint64_t a1)
{
  __int128 *Class;

  Class = (__int128 *)CPRecordGetClass();
  if (Class == ABCPersonClass)
    return ABCPersonCopyCompositeName(a1);
  if (Class == (__int128 *)ABCGroupClass[0])
    return ABCGroupCopyCompositeName(a1);
  return 0;
}

uint64_t ABCRecordNameForProperty(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
  if (v3)
    return v3(a2);
  else
    return 0;
}

void _ABCSaveSingleStringValue(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  const char *v6;
  __CFString *MutableCopy;
  uint64_t (*v8)(uint64_t);
  const __CFString *v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  int ID;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v15;
  CFIndex usedBufLen;
  CFRange v17;

  if (a1)
  {
    if (a3)
    {
      v6 = *(const char **)CPRecordGetClass();
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE "));
      CFStringAppendCString(MutableCopy, v6, 0x8000100u);
      CFStringAppend(MutableCopy, CFSTR(" SET "));
      if (MutableCopy)
      {
        v8 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        v9 = v8 ? (const __CFString *)v8(a2) : 0;
        CFStringAppend(MutableCopy, v9);
        CFStringAppend(MutableCopy, CFSTR(" = ? WHERE ROWID = ?;"));
        v10 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v10)
        {
          v11 = *(sqlite3_stmt **)(v10 + 8);
          if (v11)
          {
            ID = CPRecordGetID();
            sqlite3_bind_int(v11, 2, ID);
            if (a4)
            {
              usedBufLen = 0;
              Length = CFStringGetLength(a4);
              MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
              v15 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xF35561A2uLL);
              v17.location = 0;
              v17.length = Length;
              CFStringGetBytes(a4, v17, 0x8000100u, 0, 0, v15, MaximumSizeForEncoding, &usedBufLen);
              v15[usedBufLen] = 0;
              sqlite3_bind_text(*(sqlite3_stmt **)(v10 + 8), 1, (const char *)v15, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
            }
            else
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v10 + 8), 1);
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
}

void _ABCSaveSingleString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *Property;

  Property = (const __CFString *)CPRecordGetProperty();
  _ABCSaveSingleStringValue(a1, a2, a3, Property);
}

void _ABCMultiSaveStrings(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  const __CFAllocator *v7;
  CFIndex v8;
  __CFArray *Mutable;
  CFIndex i;
  const void *Property;
  const char *v12;
  __CFString *MutableCopy;
  CFIndex v14;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t (*v17)(const void *);
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  int v22;
  int ID;
  CFIndex v24;
  void (__cdecl *v25)(void *);
  const __CFString *v26;
  const __CFString *v27;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v30;
  CFIndex usedBufLen;
  CFRange v32;

  Count = CFArrayGetCount(theArray);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable(v7, v8, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(theArray, i);
      Property = (const void *)CPRecordGetProperty();
      CFArrayAppendValue(Mutable, Property);
    }
  }
  if (a1)
  {
    if (a3)
    {
      v12 = *(const char **)CPRecordGetClass();
      MutableCopy = CFStringCreateMutableCopy(v7, 0, CFSTR("UPDATE "));
      CFStringAppendCString(MutableCopy, v12, 0x8000100u);
      CFStringAppend(MutableCopy, CFSTR(" SET "));
      if (MutableCopy)
      {
        v14 = CFArrayGetCount(theArray);
        if (v14 >= 1)
        {
          for (j = 0; j != v14; ++j)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, j);
            v17 = *(uint64_t (**)(const void *))(CPRecordGetClass() + 64);
            if (v17)
              v18 = (const __CFString *)v17(ValueAtIndex);
            else
              v18 = 0;
            CFStringAppend(MutableCopy, v18);
            if (j >= v14 - 1)
              v19 = CFSTR(" = ? WHERE ROWID = ?;");
            else
              v19 = CFSTR(" = ?,");
            CFStringAppend(MutableCopy, v19);
          }
        }
        v20 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v20)
        {
          v21 = *(sqlite3_stmt **)(v20 + 8);
          if (v21)
          {
            v22 = CFArrayGetCount(theArray) + 1;
            ID = CPRecordGetID();
            sqlite3_bind_int(v21, v22, ID);
            if (v14 >= 1)
            {
              v24 = 0;
              v25 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
              do
              {
                v26 = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v24);
                if (v26)
                {
                  v27 = v26;
                  usedBufLen = 0;
                  Length = CFStringGetLength(v26);
                  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                  v30 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x6C510CC3uLL);
                  v32.location = 0;
                  v32.length = Length;
                  CFStringGetBytes(v27, v32, 0x8000100u, 0, 0, v30, MaximumSizeForEncoding, &usedBufLen);
                  v30[usedBufLen] = 0;
                  sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), v24 + 1, (const char *)v30, -1, v25);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), v24 + 1);
                }
                ++v24;
              }
              while (v14 != v24);
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
  CFRelease(Mutable);
}

void _ABCSaveSingleData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Property;
  const __CFData *v7;
  const char *v8;
  __CFString *MutableCopy;
  uint64_t (*v10)(uint64_t);
  const __CFString *v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  int ID;
  CFIndex Length;
  int v16;
  const UInt8 *BytePtr;

  Property = CPRecordGetProperty();
  if (a1)
  {
    if (a3)
    {
      v7 = (const __CFData *)Property;
      v8 = *(const char **)CPRecordGetClass();
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE "));
      CFStringAppendCString(MutableCopy, v8, 0x8000100u);
      CFStringAppend(MutableCopy, CFSTR(" SET "));
      if (MutableCopy)
      {
        v10 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        v11 = v10 ? (const __CFString *)v10(a2) : 0;
        CFStringAppend(MutableCopy, v11);
        CFStringAppend(MutableCopy, CFSTR(" = ? WHERE ROWID = ?;"));
        v12 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v12)
        {
          v13 = *(sqlite3_stmt **)(v12 + 8);
          if (v13)
          {
            ID = CPRecordGetID();
            sqlite3_bind_int(v13, 2, ID);
            if (v7 && (Length = CFDataGetLength(v7), Length >= 1))
            {
              v16 = Length;
              BytePtr = CFDataGetBytePtr(v7);
              sqlite3_bind_blob(*(sqlite3_stmt **)(v12 + 8), 1, BytePtr, v16, 0);
            }
            else
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), 1);
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
}

void _ABCLoadSingleData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  const __CFAllocator *v5;
  CFMutableStringRef MutableCopy;
  __CFString *v7;
  uint64_t (*v8)(uint64_t);
  const __CFString *v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  int ID;
  unsigned int v13;
  const UInt8 *v14;
  BOOL v15;
  CFDataRef v16;

  if (a1)
  {
    if (a3)
    {
      v4 = *(const char **)CPRecordGetClass();
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT "));
      if (MutableCopy)
      {
        v7 = MutableCopy;
        v8 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        v9 = v8 ? (const __CFString *)v8(a2) : 0;
        CFStringAppend(v7, v9);
        CFStringAppend(v7, CFSTR(" FROM "));
        CFStringAppendCString(v7, v4, 0x8000100u);
        CFStringAppend(v7, CFSTR(" WHERE ROWID = ?;"));
        v10 = CPSqliteConnectionStatementForSQL();
        CFRelease(v7);
        if (v10)
        {
          v11 = *(sqlite3_stmt **)(v10 + 8);
          if (v11)
          {
            ID = CPRecordGetID();
            sqlite3_bind_int(v11, 1, ID);
            if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100
              || ((v13 = sqlite3_column_bytes(*(sqlite3_stmt **)(v10 + 8), 0),
                   v14 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v10 + 8), 0),
                   v13)
                ? (v15 = v14 == 0)
                : (v15 = 1),
                  v15))
            {
              CPSqliteStatementReset();
            }
            else
            {
              v16 = CFDataCreate(v5, v14, v13);
              CPSqliteStatementReset();
              if (v16)
              {
                CPRecordInitializeProperty();
                CFRelease(v16);
              }
            }
          }
        }
      }
    }
  }
}

void _ABCMultiSaveDatas(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  const __CFAllocator *v7;
  CFIndex v8;
  __CFArray *Mutable;
  CFIndex i;
  const void *Property;
  const char *v12;
  __CFString *MutableCopy;
  CFIndex v14;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t (*v17)(const void *);
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  int v22;
  int ID;
  CFIndex k;
  const __CFData *v25;
  const __CFData *v26;
  CFIndex Length;
  int v28;
  const UInt8 *BytePtr;

  Count = CFArrayGetCount(theArray);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable(v7, v8, 0);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(theArray, i);
      Property = (const void *)CPRecordGetProperty();
      CFArrayAppendValue(Mutable, Property);
    }
  }
  if (a1)
  {
    if (a3)
    {
      v12 = *(const char **)CPRecordGetClass();
      MutableCopy = CFStringCreateMutableCopy(v7, 0, CFSTR("UPDATE "));
      CFStringAppendCString(MutableCopy, v12, 0x8000100u);
      CFStringAppend(MutableCopy, CFSTR(" SET "));
      if (MutableCopy)
      {
        v14 = CFArrayGetCount(theArray);
        if (v14 >= 1)
        {
          for (j = 0; j != v14; ++j)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, j);
            v17 = *(uint64_t (**)(const void *))(CPRecordGetClass() + 64);
            if (v17)
              v18 = (const __CFString *)v17(ValueAtIndex);
            else
              v18 = 0;
            CFStringAppend(MutableCopy, v18);
            if (j >= v14 - 1)
              v19 = CFSTR(" = ? WHERE ROWID = ?;");
            else
              v19 = CFSTR(" = ?,");
            CFStringAppend(MutableCopy, v19);
          }
        }
        v20 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v20)
        {
          v21 = *(sqlite3_stmt **)(v20 + 8);
          if (v21)
          {
            v22 = CFArrayGetCount(theArray) + 1;
            ID = CPRecordGetID();
            sqlite3_bind_int(v21, v22, ID);
            if (v14 >= 1)
            {
              for (k = 0; k != v14; ++k)
              {
                v25 = (const __CFData *)CFArrayGetValueAtIndex(Mutable, k);
                if (v25 && (v26 = v25, Length = CFDataGetLength(v25), Length >= 1))
                {
                  v28 = Length;
                  BytePtr = CFDataGetBytePtr(v26);
                  sqlite3_bind_blob(*(sqlite3_stmt **)(v20 + 8), k + 1, BytePtr, v28, 0);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), k + 1);
                }
              }
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
  CFRelease(Mutable);
}

void loadLinkUUIDProperty(uint64_t a1)
{
  int IntValue;
  int v2;
  uint64_t v3;
  sqlite3_stmt *v4;
  const void *v5;

  IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue != -1)
  {
    v2 = IntValue;
    v3 = CPSqliteConnectionStatementForSQL();
    if (v3)
    {
      v4 = *(sqlite3_stmt **)(v3 + 8);
      if (v4)
      {
        sqlite3_bind_int(v4, 1, v2);
        v5 = (const void *)CPSqliteStatementCopyStringResult();
        CPRecordInitializeProperty();
        CPSqliteStatementReset();
        CFRelease(v5);
      }
    }
  }
}

CFDateRef _ABCCreateDateFromCFString(const __CFString *a1)
{
  UInt8 *v1;
  UInt8 *v2;
  CFDateRef v3;
  CFAbsoluteTime at;

  at = 0.0;
  v1 = _ABCCreateUTF8StringFromCFString(a1);
  if (!v1)
    return 0;
  v2 = v1;
  if (sscanf((const char *)v1, "%lf", &at) == 1)
    v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], at);
  else
    v3 = 0;
  free(v2);
  return v3;
}

CFStringRef _ABCCreateCFStringFromDate(uint64_t a1)
{
  double v1;
  CFStringRef v2;
  char *cStr;

  if (!a1)
    return 0;
  cStr = 0;
  v1 = MEMORY[0x1A1ACB2E4]();
  asprintf(&cStr, "%lf", v1);
  if (!cStr)
    return 0;
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  free(cStr);
  return v2;
}

void saveSingleDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Property;
  const __CFString *v7;

  Property = CPRecordGetProperty();
  v7 = _ABCCreateCFStringFromDate(Property);
  _ABCSaveSingleStringValue(a1, a2, a3, v7);
  if (v7)
    CFRelease(v7);
}

__CFDictionary *ABCMultiDictionaryCreateCopy(const __CFDictionary *a1)
{
  return ABCCopyDictionaryWithTypes(a1, 1, 1);
}

uint64_t ABCIntShow(const void *a1)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%p\n", a1);
}

__CFDictionary *ABCCopyDictionaryWithTypes(const __CFDictionary *a1, int a2, int a3)
{
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *Mutable;
  CFIndex Count;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (**v12)();
  const void **v13;
  const void **v14;
  const void **v15;
  const void **v16;
  const void **v17;
  const void *v18;
  const void *v19;
  const void *v20;

  if (!a1)
    return 0;
  if (a2 == 1)
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  else
    v6 = 0;
  if (a3 == 1)
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  else
    v7 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6, v7);
  Count = CFDictionaryGetCount(a1);
  if (Count)
  {
    v10 = Count;
    v11 = ABCCallBacksForType(a2);
    v12 = ABCCallBacksForType(a3);
    v13 = (const void **)malloc_type_malloc(8 * v10, 0x80040B8603338uLL);
    v14 = (const void **)malloc_type_malloc(8 * v10, 0x80040B8603338uLL);
    v15 = v14;
    if (v13 && v14)
    {
      CFDictionaryGetKeysAndValues(a1, v13, v14);
      if (v10 >= 1)
      {
        v16 = v13;
        v17 = v15;
        while (1)
        {
          v18 = (const void *)((uint64_t (*)(const void *))*v11)(*v16);
          v19 = (const void *)((uint64_t (*)(const void *))*v12)(*v17);
          v20 = v19;
          if (v18 && v19 != 0)
            break;
          if (v18)
            goto LABEL_23;
          if (v19)
            goto LABEL_20;
LABEL_21:
          ++v17;
          ++v16;
          if (!--v10)
            goto LABEL_27;
        }
        CFDictionarySetValue(Mutable, v18, v19);
LABEL_23:
        CFRelease(v18);
        if (!v20)
          goto LABEL_21;
LABEL_20:
        CFRelease(v20);
        goto LABEL_21;
      }
    }
    else if (!v13)
    {
      goto LABEL_28;
    }
LABEL_27:
    free(v13);
LABEL_28:
    if (v15)
      free(v15);
  }
  return Mutable;
}

uint64_t ABCSingleValueType(int a1)
{
  return a1 & 0xFFFFFEFF;
}

uint64_t ABCDBContextUpdateSortDataVersions()
{
  uint64_t result;

  result = CPRecordStoreGetDatabase();
  if (result)
  {
    CPSqliteDatabaseConnectionForWriting();
    ABCDBContextUpdateSortDataVersionsWithConnection();
    return CPSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

void ABCDBContextUpdateSortDataVersionsWithConnection()
{
  CFLocaleIdentifier v0;
  uint64_t v1;

  v1 = 0;
  v0 = ABCCopyUserLanguage();
  ABCGetICUCollatorVersions((_DWORD *)&v1 + 1, &v1);
  CPSqliteConnectionSetValueForProperty();
  ABCGetICUVersion();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionRemoveProperty();
  CPSqliteConnectionRemoveProperty();
  CFRelease(v0);
}

BOOL _migrationCheckDatabaseVersion(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = CPSqliteConnectionIntegerForProperty();
  return a3 < 101 || v4 < 9;
}

uint64_t _migrateStoreAndAccountTables(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 ABCSourceTables;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;

  if (a3 <= 45)
  {
    v5 = ABCDBContextPerformSQLResultDone();
    v6 = v5 & _renameTable(a2, (uint64_t)CFSTR("ABStore"), (uint64_t)CFSTR("ABStore_old"));
    v7 = v6 & ABCDBContextCreateABCSourceTables(a2, 0);
    ABCDBContextPerformSQLResultDone();
    v8 = ABCDBContextPerformSQLResultDone();
    v9 = v8 & ABCDBContextCreateDefaultABSource();
    v10 = v7 & v9 & ABCDBContextPerformSQLResultDone();
    v11 = v10 & ABCDBContextPerformSQLResultDone();
    if (a3 <= 24)
      v11 &= ABCDBContextPerformSQLResultDone();
    LODWORD(v12) = v11 & _dropTable(a2, (uint64_t)CFSTR("ABStore_old"));
    return v12 & ABCDBContextPerformSQLResultDone();
  }
  if (a3 > 0x5E)
    return 1;
  v13 = _renameTable(a2, (uint64_t)CFSTR("ABStore"), (uint64_t)CFSTR("ABStore_old"));
  v14 = v13 & _renameTable(a2, (uint64_t)CFSTR("ABAccount"), (uint64_t)CFSTR("ABAccount_old"));
  ABCSourceTables = ABCDBContextCreateABCSourceTables(a2, 0);
  v16 = v14 & ABCSourceTables & ABCDBContextPerformSQLResultDone();
  v17 = ABCDBContextPerformSQLResultDone();
  v18 = v17 & ABCDBContextPerformSQLResultDone();
  v19 = v16 & v18 & _dropTable(a2, (uint64_t)CFSTR("ABStore_old"));
  v12 = v19 & _dropTable(a2, (uint64_t)CFSTR("ABAccount_old"));
  if (a3 <= 0x5B)
    return v12 & ABCDBContextPerformSQLResultDone();
  return v12;
}

uint64_t _renameTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  CFStringCreateWithFormat(0, 0, CFSTR("alter table %@ rename to %@;"), a2, a3);
  if (ABCDBContextPerformSQLResultDone())
    return 1;
  if (_dropTable(a1, a3))
  {
    if (ABCDBContextPerformSQLResultDone())
      return 1;
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _renameTable(CPSqliteConnection *, CFStringRef, CFStringRef)", 415, 0, (uint64_t)CFSTR("Failed to drop table %@ after failed rename attempt."), v7, v8, v9, a3);
  }
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"_Bool _renameTable(CPSqliteConnection *, CFStringRef, CFStringRef)", 420, 0, (uint64_t)CFSTR("Failed to rename table %@ to %@."), v10, v11, v12, a2);
  return 0;
}

BOOL ABCDBContextPerformSQLResultDone()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = CPSqliteConnectionPerformSQL();
  if ((_DWORD)v0 != 101)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool ABCDBContextPerformSQLResultDone(CPSqliteConnection *, CFStringRef)", 142, 0, (uint64_t)CFSTR("Failed to execute sqlite. Result: %d, statement: %@."), v1, v2, v3, v0);
  }
  return (_DWORD)v0 == 101;
}

BOOL _dropTable(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  CFStringCreateWithFormat(0, 0, CFSTR("drop table IF EXISTS %@"), a2);
  v3 = ABCDBContextPerformSQLResultDone();
  if (!v3)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _dropTable(CPSqliteConnection *, CFStringRef)", 398, 0, (uint64_t)CFSTR("Failed to drop table %@."), v4, v5, v6, a2);
  }
  return v3;
}

uint64_t _migrateGroupTables(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  int v9;
  _BOOL4 v10;

  v3 = _renameTable(a2, (uint64_t)CFSTR("ABGroup"), (uint64_t)CFSTR("ABGroup_old"));
  v4 = _renameTable(a2, (uint64_t)CFSTR("ABGroupChanges"), (uint64_t)CFSTR("ABGroupChanges_old"));
  v5 = ABCDBContextPerformSQLResultDone();
  v6 = ABCDBContextPerformSQLResultDone();
  v7 = ABCDBContextPerformSQLResultDone();
  v8 = v7 & ABCDBContextPerformSQLResultDone();
  v9 = v3 & v4 & (v5 && v6) & v8 & _dropTable(a2, (uint64_t)CFSTR("ABGroup_old"));
  v10 = _dropTable(a2, (uint64_t)CFSTR("ABGroupChanges_old"));
  return v9 & v10 & _dropTable(a2, (uint64_t)CFSTR("ABGroupBasicChanges"));
}

uint64_t _migrationMigrateDatabase(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  int LimitedAccessTable;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int ABDatabaseTables;
  int ABDatabaseTriggersAndIndicesAndDropFirst;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int MultiValueTables;
  int MultiValueTriggersAndIndicesAndDropFirst;
  _BOOL4 v35;
  BOOL v36;
  const __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  const __CFArray *Mutable;
  CFStringRef v43;
  uint64_t v44;
  int v45;
  __CFString *MutableCopy;
  CFIndex v47;
  const void *ValueAtIndex;
  CFIndex Count;
  const void *v50;
  CFStringRef v51;
  int v52;
  CFStringRef v53;
  int v54;
  const __CFAllocator *v57;
  CFStringRef v58;
  CFStringRef v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const __CFString *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;
  int v73;
  _BOOL4 v74;
  int v75;
  uint64_t v76;
  _BOOL4 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  sqlite3_stmt *v81;
  char v82;
  int v83;
  int v84;
  const __CFString *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  int v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  const __CFString *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;

  if (a3 <= 0xB && ((1 << a3) & 0xB00) != 0)
  {
    LimitedAccessTable = _migrateStoreAndAccountTables(a1, a2, a3);
    if (ABDiagnosticsEnabled())
    {
      v8 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 998, 0, (uint64_t)CFSTR("success=%@"), v9, v10, v11, (uint64_t)v8);
    }
    if (LimitedAccessTable)
    {
      v12 = _recreatePersonTables(a2, a3);
      LimitedAccessTable = v12;
      if (a3 == 11)
      {
        v12 = ABCDBContextPerformSQLResultDone();
        if ((LimitedAccessTable & v12 & 1) == 0)
          goto LABEL_65;
      }
      else if (!(_DWORD)v12)
      {
        goto LABEL_126;
      }
      v31 = _migrateGroupTables(v12, a2);
      goto LABEL_21;
    }
    goto LABEL_126;
  }
  if (a3 <= 6)
  {
    v13 = _renameTable(a2, (uint64_t)CFSTR("ABPerson"), (uint64_t)CFSTR("ABPerson_old"));
    v14 = v13 & _renameTable(a2, (uint64_t)CFSTR("ABGroup"), (uint64_t)CFSTR("ABGroup_old"));
    v15 = _renameTable(a2, (uint64_t)CFSTR("ABGroupChanges"), (uint64_t)CFSTR("ABGroupChanges_old"));
    v16 = v14 & v15 & _renameTable(a2, (uint64_t)CFSTR("ABPersonChanges"), (uint64_t)CFSTR("ABPersonChanges_old"));
    v17 = v16 & _renameTable(a2, (uint64_t)CFSTR("ABMultiValue"), (uint64_t)CFSTR("ABMultiValue_old"));
    if (a3 == 6)
      v17 &= _renameTable(a2, (uint64_t)CFSTR("ABStore"), (uint64_t)CFSTR("ABStore_old"));
    ABDatabaseTables = _createABDatabaseTables(a2, a3, a3 != 6, 0);
    ABDatabaseTriggersAndIndicesAndDropFirst = 0;
    if (v17 && ABDatabaseTables)
      ABDatabaseTriggersAndIndicesAndDropFirst = _createABDatabaseTriggersAndIndicesAndDropFirst(a2, 1);
    v20 = ABDatabaseTriggersAndIndicesAndDropFirst & ABCDBContextPerformSQLResultDone();
    v21 = ABCDBContextPerformSQLResultDone();
    v22 = v20 & v21 & ABCDBContextPerformSQLResultDone();
    v23 = v22 & ABCDBContextPerformSQLResultDone();
    if (a3 == 6)
    {
      v24 = ABCDBContextPerformSQLResultDone();
      v25 = v24 & ABCDBContextPerformSQLResultDone();
      v23 &= v25 & ABCDBContextPerformSQLResultDone();
    }
    v26 = ABCDBContextPerformSQLResultDone();
    v27 = v26 & _dropTable(a2, (uint64_t)CFSTR("ABPerson_old"));
    v28 = v27 & _dropTable(a2, (uint64_t)CFSTR("ABGroup_old"));
    v29 = v28 & _dropTable(a2, (uint64_t)CFSTR("ABPersonChanges_old"));
    v30 = v23 & _dropTable(a2, (uint64_t)CFSTR("ABGroupChanges_old"));
    LimitedAccessTable = v30 & v29 & _dropTable(a2, (uint64_t)CFSTR("ABMultiValue_old"));
    if (a3 == 6)
      LimitedAccessTable &= _dropTable(a2, (uint64_t)CFSTR("ABStore_old"));
    goto LABEL_22;
  }
  if (a3 == 14)
  {
    v57 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT count() FROM ABStore WHERE Type != %i and Type != %i and Type != %i and Type != %i and Type != %i;"),
            0,
            1209,
            16778425,
            1210,
            16778427);
    CPSqliteConnectionStatementForSQL();
    CFRelease(v58);
    LODWORD(v58) = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
    if ((_DWORD)v58)
      goto LABEL_65;
    v102 = 1;
    v59 = CFStringCreateWithFormat(v57, 0, CFSTR("SELECT count() FROM ABPerson WHERE Kind > %i;"));
    CPSqliteConnectionStatementForSQL();
    CFRelease(v59);
    LODWORD(v59) = CPSqliteStatementIntegerResult();
    v60 = CPSqliteStatementReset();
    if ((_DWORD)v59)
      goto LABEL_65;
    v61 = _migrateStoreAndAccountTables(v60, a2, 14);
    if (!(_DWORD)v61 || !_migrateGroupTables(v61, a2))
      goto LABEL_65;
    v31 = _recreatePersonTables(a2, 14);
LABEL_21:
    LimitedAccessTable = v31;
    goto LABEL_22;
  }
  LimitedAccessTable = _migrateStoreAndAccountTables(a1, a2, a3);
  v62 = ABDiagnosticsEnabled();
  if (v62)
  {
    v63 = ABLogStringForBool(LimitedAccessTable);
    _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1087, 0, (uint64_t)CFSTR("success=%@"), v64, v65, v66, (uint64_t)v63);
  }
  if (LimitedAccessTable)
  {
    LimitedAccessTable = _migrateGroupTables(v62, a2);
    if (ABDiagnosticsEnabled())
    {
      v67 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1091, 0, (uint64_t)CFSTR("success=%@"), v68, v69, v70, (uint64_t)v67);
      if ((LimitedAccessTable & 1) == 0)
      {
LABEL_65:
        LimitedAccessTable = 0;
        goto LABEL_126;
      }
    }
    else if (!LimitedAccessTable)
    {
      goto LABEL_126;
    }
    LimitedAccessTable = _recreatePersonTables(a2, a3);
    if (ABDiagnosticsEnabled())
    {
      v85 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1096, 0, (uint64_t)CFSTR("success=%@"), v86, v87, v88, (uint64_t)v85);
    }
LABEL_22:
    if (a3 <= 60 && LimitedAccessTable)
    {
      v32 = _renameTable(a2, (uint64_t)CFSTR("ABMultiValue"), (uint64_t)CFSTR("ABMultiValue_old"));
      MultiValueTables = ABCDBContextCreateMultiValueTables();
      MultiValueTriggersAndIndicesAndDropFirst = 0;
      if (v32 && MultiValueTables)
        MultiValueTriggersAndIndicesAndDropFirst = ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a2, 1);
      v35 = ABCDBContextPerformSQLResultDone();
      v36 = _dropTable(a2, (uint64_t)CFSTR("ABMultiValue_old"));
      LimitedAccessTable = 0;
      if (!MultiValueTriggersAndIndicesAndDropFirst || !v35 || !v36)
        goto LABEL_126;
    }
    else if (!LimitedAccessTable)
    {
      goto LABEL_126;
    }
    if (ABDiagnosticsEnabled())
    {
      v37 = ABLogStringForBool(1);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1113, 0, (uint64_t)CFSTR("success=%@"), v38, v39, v40, (uint64_t)v37);
    }
    v41 = _dropTable(a2, (uint64_t)CFSTR("ABStoreChanges"));
    LimitedAccessTable = v41;
    if (a3 <= 32 && v41)
      LimitedAccessTable = ABCDBContextPerformSQLResultDone();
    if (a3 <= 47 && LimitedAccessTable)
    {
      Mutable = CFArrayCreateMutable(0, 0, 0);
      v102 = 4;
      v43 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT ROWID, ExternalIdentifier from ABStore where Type = %d OR Type = %d"));
      v44 = CPSqliteConnectionStatementForSQL();
      CFRelease(v43);
      if (v44)
      {
        v45 = CPSqliteStatementSendResults();
        LimitedAccessTable = v45 == 101;
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
        if (CFArrayGetCount(Mutable))
        {
          MutableCopy = CFStringCreateMutableCopy(0, 0, CFSTR("("));
          if (CFArrayGetCount(Mutable) >= 2)
          {
            v47 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v47);
              CFStringAppendFormat(MutableCopy, 0, CFSTR("%ld, "), ValueAtIndex);
              ++v47;
            }
            while (CFArrayGetCount(Mutable) - 1 > v47);
          }
          Count = CFArrayGetCount(Mutable);
          v50 = CFArrayGetValueAtIndex(Mutable, Count - 1);
          CFStringAppendFormat(MutableCopy, 0, CFSTR("%ld)"), v50);
          v51 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT ROWID, ExternalIdentifier from ABPerson where StoreID in %@"), MutableCopy);
          CPSqliteConnectionStatementForSQL();
          CFRelease(v51);
          v52 = CPSqliteStatementSendResults();
          CPSqliteStatementReset();
          CPSqliteDatabaseReleaseSqliteStatement();
          v102 = (uint64_t)MutableCopy;
          v53 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT ROWID, ExternalIdentifier from ABGroup where StoreID in %@"));
          CPSqliteConnectionStatementForSQL();
          CFRelease(v53);
          v54 = CPSqliteStatementSendResults();
          LimitedAccessTable = v52 == 101 && v54 == 101 && v45 == 101;
          CPSqliteStatementReset();
          CPSqliteDatabaseReleaseSqliteStatement();
          CFRelease(MutableCopy);
        }
      }
      else
      {
        LimitedAccessTable = 1;
      }
      CFRelease(Mutable);
    }
    if (a3 <= 51 && LimitedAccessTable)
    {
      if (CPSqliteConnectionStatementForSQL()
        && (v71 = CPSqliteStatementIntegerResult(), CPSqliteStatementReset(), v71))
      {
        v72 = ABCDBContextPerformSQLResultDone();
        v73 = v72 & ABCDBContextPerformSQLResultDone();
        v74 = ABCDBContextPerformSQLResultDone();
        LimitedAccessTable = v73 & v74 & ABCDBContextPerformSQLResultDone();
        if (CPSqliteConnectionStatementForSQL())
        {
          v75 = CPSqliteStatementIntegerResult();
          CPSqliteStatementReset();
          if (!v75)
            LimitedAccessTable &= ABCDBContextPerformSQLResultDone();
        }
        v76 = CPSqliteConnectionStatementForSQL();
        CFRelease(CFSTR("INSERT INTO ABStore (ROWID, Type, Enabled , StoreInternalIdentifier) VALUES('0', '0', '0', 'local');"));
        if (v76)
        {
          if (CPSqliteStatementPerform() != 101)
            LimitedAccessTable = 0;
          CPSqliteStatementReset();
        }
      }
      else
      {
        LimitedAccessTable = 1;
      }
    }
    if (a3 < 63 && LimitedAccessTable)
      LimitedAccessTable = _dropTable(a2, (uint64_t)CFSTR("ABRecent"));
    if (a3 <= 63 && LimitedAccessTable)
    {
      ABChangeHistoryCreateTables(a2, 0);
      v77 = _dropTable(a2, (uint64_t)CFSTR("ABPersonMultiValueDeletes"));
      LimitedAccessTable = v77 & ABCDBContextCreateMultiValueTables();
    }
    else
    {
      v78 = LimitedAccessTable ^ 1;
      if (a3 > 78)
        v78 = 1;
      if ((v78 & 1) == 0)
        LimitedAccessTable = ABChangeHistoryMigrateAddingSaveTimestamp();
    }
    if (a3 <= 67 && LimitedAccessTable)
      LimitedAccessTable = +[ABFacebookMigrator removeFacebookSensitiveInformation:](ABFacebookMigrator, "removeFacebookSensitiveInformation:", a2);
    if (a3 <= 69 && LimitedAccessTable)
    {
      v79 = CPSqliteConnectionStatementForSQL();
      if (v79 && (v80 = v79, (v81 = *(sqlite3_stmt **)(v79 + 8)) != 0))
      {
        sqlite3_bind_blob(v81, 1, CFSTR("Hiragana-Katakana"), 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 2, CFSTR("Hiragana-Katakana"), 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 3, CFSTR("Hiragana-Katakana"), 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 4, CFSTR("Hiragana-Katakana"), 8, 0);
        LimitedAccessTable = CPSqliteStatementPerform() == 101;
        CPSqliteStatementReset();
      }
      else
      {
        LimitedAccessTable = 0;
      }
      *a4 |= 4u;
    }
    if (a3 <= 77 && LimitedAccessTable)
      LimitedAccessTable = +[ABDowntimeWhitelistMigrator moveDowntimeWhitelistFromUnknownProperties:](ABDowntimeWhitelistMigrator, "moveDowntimeWhitelistFromUnknownProperties:", a2);
    if (a3 <= 83 && LimitedAccessTable)
      LimitedAccessTable = ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a2, 0);
    if (a3 <= 95 && LimitedAccessTable)
    {
      LimitedAccessTable = _createLimitedAccessTable();
LABEL_123:
      if (a3 <= 100 && LimitedAccessTable)
      {
        v96 = ABCDBContextPerformSQLResultDone();
        LimitedAccessTable = v96 & ABCDBContextPerformSQLResultDone();
      }
      goto LABEL_126;
    }
    v82 = LimitedAccessTable ^ 1;
    if (a3 > 97)
      v82 = 1;
    if ((v82 & 1) != 0)
      goto LABEL_123;
    if (CPSqliteConnectionStatementForSQL())
    {
      v83 = CPSqliteStatementIntegerResult();
      CPSqliteStatementReset();
      if (v83 >= 1)
      {
        if ((_renameTable(a2, (uint64_t)CFSTR("LimitedAccess"), (uint64_t)CFSTR("LimitedAccess_old")) & 1) != 0)
        {
          v84 = 1;
          goto LABEL_121;
        }
        ABDiagnosticsEnabled();
        _ABLog2(3, (uint64_t)"_Bool _migrateLimitedAccessTable(CPSqliteConnection *)", 943, 0, (uint64_t)CFSTR("Failed to migrate LimitedAccess table"), v89, v90, v91, v102);
      }
    }
    v84 = 0;
LABEL_121:
    v92 = ABCDBContextPerformSQLResultDone();
    v93 = v92 & ABCDBContextPerformSQLResultDone();
    v94 = _dropTable(a2, (uint64_t)CFSTR("LimitedAccess"));
    LimitedAccessTable = v93 & v94 & _createLimitedAccessTable();
    if (v84)
    {
      v95 = ABCDBContextPerformSQLResultDone();
      LimitedAccessTable &= v95 & _dropTable(a2, (uint64_t)CFSTR("LimitedAccess_old"));
    }
    goto LABEL_123;
  }
LABEL_126:
  *a4 = ((a3 - 25) < 4) | (2 * ((a3 - 22) < 0xA)) | (8 * ((a3 - 57) < 0xF)) | *a4 & 0xF4;
  if (ABDiagnosticsEnabled())
  {
    v97 = ABLogStringForBool(LimitedAccessTable);
    _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1176, 0, (uint64_t)CFSTR("success=%@"), v98, v99, v100, (uint64_t)v97);
  }
  return LimitedAccessTable ^ 1u;
}

uint64_t _recreatePersonTables(uint64_t a1, int a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int PersonTables;
  int SectionListTablesAndDropTablesWithTriggers;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  BOOL v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL4 v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  const __CFString *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;

  v4 = _renameTable(a1, (uint64_t)CFSTR("ABPerson"), (uint64_t)CFSTR("ABPerson_old"));
  v5 = v4 & _renameTable(a1, (uint64_t)CFSTR("ABPersonChanges"), (uint64_t)CFSTR("ABPersonChanges_old"));
  v6 = a2 - 22;
  if (a2 >= 22)
    v5 &= _renameTable(a1, (uint64_t)CFSTR("ABPersonLink"), (uint64_t)CFSTR("ABPersonLink_old"));
  v7 = a2 - 11;
  if ((a2 - 11) > 0x18)
  {
    if ((v5 & 1) == 0)
      goto LABEL_5;
  }
  else if ((v5 & _renameTable(a1, (uint64_t)CFSTR("ABPersonSearchKey"), (uint64_t)CFSTR("ABPersonSearchKey_old")) & 1) == 0)
  {
LABEL_5:
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 441, 0, (uint64_t)CFSTR("Failed to rename tables before recreate!"), v8, v9, v10, v56);
    return 0;
  }
  PersonTables = _createPersonTables();
  SectionListTablesAndDropTablesWithTriggers = PersonTables & ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(a1, 1);
  if (ABDiagnosticsEnabled())
  {
    v14 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
    _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 448, 0, (uint64_t)CFSTR("result=%@"), v15, v16, v17, (uint64_t)v14);
  }
  v18 = SectionListTablesAndDropTablesWithTriggers ^ 1;
  if (a2 != 44)
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    v69 = ABCDBContextPerformSQLResultDone();
    v68 = ABCDBContextPerformSQLResultDone();
    v67 = ABCDBContextPerformSQLResultDone();
    v66 = ABCDBContextPerformSQLResultDone();
    v65 = ABCDBContextPerformSQLResultDone();
    v64 = ABCDBContextPerformSQLResultDone();
    v63 = ABCDBContextPerformSQLResultDone();
    v62 = ABCDBContextPerformSQLResultDone();
    v61 = ABCDBContextPerformSQLResultDone();
    v60 = ABCDBContextPerformSQLResultDone();
    v59 = ABCDBContextPerformSQLResultDone();
    v58 = ABCDBContextPerformSQLResultDone();
    v57 = ABCDBContextPerformSQLResultDone();
    v19 = ABCDBContextPerformSQLResultDone();
    v20 = ABCDBContextPerformSQLResultDone();
    v21 = ABCDBContextPerformSQLResultDone();
    v22 = ABCDBContextPerformSQLResultDone();
    v23 = ABCDBContextPerformSQLResultDone();
    v24 = ABCDBContextPerformSQLResultDone();
    v25 = ABCDBContextPerformSQLResultDone();
    v26 = ABCDBContextPerformSQLResultDone();
    SectionListTablesAndDropTablesWithTriggers = 0;
    if (!v69)
      goto LABEL_54;
    if (!v68)
      goto LABEL_54;
    if (!v67)
      goto LABEL_54;
    if (!v66)
      goto LABEL_54;
    if (!v65)
      goto LABEL_54;
    if (!v64)
      goto LABEL_54;
    if (!v63)
      goto LABEL_54;
    if (!v62)
      goto LABEL_54;
    if (!v61)
      goto LABEL_54;
    if (!v60)
      goto LABEL_54;
    if (!v59)
      goto LABEL_54;
    if (!v58)
      goto LABEL_54;
    if (!v57)
      goto LABEL_54;
    if (!v19)
      goto LABEL_54;
    if (!v20)
      goto LABEL_54;
    if (!v21)
      goto LABEL_54;
    if (!v22)
      goto LABEL_54;
    if (!v23)
      goto LABEL_54;
    if (!v24)
      goto LABEL_54;
    if (!v25)
      goto LABEL_54;
    v6 = a2 - 22;
    v7 = a2 - 11;
    if (!v26)
      goto LABEL_54;
    goto LABEL_35;
  }
  if (SectionListTablesAndDropTablesWithTriggers)
  {
LABEL_35:
    SectionListTablesAndDropTablesWithTriggers = ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(a1, 1);
    if (ABDiagnosticsEnabled())
    {
      v27 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 455, 0, (uint64_t)CFSTR("result=%@"), v28, v29, v30, (uint64_t)v27);
    }
    if (!SectionListTablesAndDropTablesWithTriggers)
      goto LABEL_54;
    SectionListTablesAndDropTablesWithTriggers = ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(a1, 1);
    if (ABDiagnosticsEnabled())
    {
      v31 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 458, 0, (uint64_t)CFSTR("result=%@"), v32, v33, v34, (uint64_t)v31);
    }
    if (SectionListTablesAndDropTablesWithTriggers)
      SectionListTablesAndDropTablesWithTriggers = a2 <= 56 && v6 >= 4 && a2 < 26 || ABCDBContextPerformSQLResultDone();
    if (ABDiagnosticsEnabled())
    {
      v35 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 479, 0, (uint64_t)CFSTR("result=%@"), v36, v37, v38, (uint64_t)v35);
    }
    if (!SectionListTablesAndDropTablesWithTriggers)
      goto LABEL_54;
    if (a2 >= 88 || a2 >= 50)
      goto LABEL_52;
    if (a2 > 22)
    {
      v54 = ABCDBContextPerformSQLResultDone();
      SectionListTablesAndDropTablesWithTriggers = v54 & ABCDBContextPerformSQLResultDone();
      if (v7 > 0x18)
        goto LABEL_54;
      goto LABEL_53;
    }
    if (a2 <= 10)
    {
LABEL_52:
      SectionListTablesAndDropTablesWithTriggers = ABCDBContextPerformSQLResultDone();
    }
    else
    {
      v55 = ABCDBContextPerformSQLResultDone();
      SectionListTablesAndDropTablesWithTriggers = v55 & ABCDBContextPerformSQLResultDone();
    }
LABEL_53:
    SectionListTablesAndDropTablesWithTriggers &= ABCDBContextPerformSQLResultDone();
  }
LABEL_54:
  v39 = SectionListTablesAndDropTablesWithTriggers & ABCDBContextCreateSearchTablesAndDropFirst(a1, 0);
  v40 = _dropTable(a1, (uint64_t)CFSTR("ABPerson_old"));
  v41 = v40 & _dropTable(a1, (uint64_t)CFSTR("ABPersonChanges_old"));
  v42 = _dropTable(a1, (uint64_t)CFSTR("ABPersonLink_old"));
  v43 = v41 & v42 & _dropTable(a1, (uint64_t)CFSTR("ABPersonSearchKey_old"));
  v44 = v43 & _dropTable(a1, (uint64_t)CFSTR("ABPersonBasicChanges"));
  if ((v44 & 1) == 0)
  {
    ABDiagnosticsEnabled();
    v45 = ABLogStringForBool(0);
    _ABLog2(3, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 587, 0, (uint64_t)CFSTR("_recreatePersonTables dropTablesResult=%@"), v46, v47, v48, (uint64_t)v45);
  }
  v11 = v39 & v44;
  if (ABDiagnosticsEnabled())
  {
    v49 = ABLogStringForBool(v11);
    _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 592, 0, (uint64_t)CFSTR("_recreatePersonTables result=%@"), v50, v51, v52, (uint64_t)v49);
  }
  return v11;
}

uint64_t _createABDatabaseTables(uint64_t a1, int a2, int a3, int a4)
{
  _BOOL4 ABCSourceTables;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  FILE *v13;
  const char *v14;

  ABCSourceTables = ABCDBContextCreateABCSourceTables(a1, a3);
  v8 = ABCSourceTables & _createPersonTables();
  v9 = ABCDBContextPerformSQLResultDone();
  v10 = v9 & ABCDBContextPerformSQLResultDone();
  v11 = ABCDBContextPerformSQLResultDone() & v8 & v10;
  if (a4)
    LOBYTE(v11) = v11 & _createLimitedAccessTable();
  if (a1)
  {
    if (ABCDBContextPerformSQLResultDone())
    {
      if (ABCDBContextCreateMultiValueTables())
      {
        if (ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(a1, a2 != -1))
        {
          if (ABCDBContextCreateSearchTablesAndDropFirst(a1, a2 != -1))
          {
            ABChangeHistoryCreateTables(a1, a2 != -1);
            if ((v11 & 1) != 0)
              return 1;
          }
        }
      }
    }
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  }
  else
  {
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "no connection";
  }
  fprintf(v13, "error initializing AB database (_createABDatabaseTables): %s\n", v14);
  return 0;
}

uint64_t _createABDatabaseTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  FILE *v5;
  const char *v6;

  if (a1
    && ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(a1, a2)
    && ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a1, a2)
    && ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(a1, a2))
  {
    return 1;
  }
  v5 = (FILE *)*MEMORY[0x1E0C80C10];
  v6 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  fprintf(v5, "error initializing AB database (_createABDatabaseTriggersAndIndicesAndDropFirst): %s\n", v6);
  return 0;
}

uint64_t ABCDBContextCreateMultiValueTables()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;

  v0 = ABCDBContextPerformSQLResultDone();
  v1 = v0 & ABCDBContextPerformSQLResultDone();
  v2 = ABCDBContextPerformSQLResultDone();
  v3 = v1 & v2 & ABCDBContextPerformSQLResultDone();
  v4 = ABCDBContextPerformSQLResultDone();
  v5 = v3 & v4 & ABCDBContextPerformSQLResultDone();
  if ((v5 & 1) == 0)
    fwrite("***ABCDBContextCreateMultiValueTables failed\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return v5;
}

uint64_t ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  _BOOL4 v2;
  int v3;
  _BOOL4 v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;

  if (a2)
  {
    v2 = ABCDBContextPerformSQLResultDone();
    v3 = v2 & ABCDBContextPerformSQLResultDone();
    v4 = ABCDBContextPerformSQLResultDone();
    v5 = v3 & v4 & ABCDBContextPerformSQLResultDone();
    v6 = v5 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    v6 = 1;
  }
  v7 = v6 & ABCDBContextPerformSQLResultDone();
  v8 = ABCDBContextPerformSQLResultDone();
  v9 = v7 & v8 & ABCDBContextPerformSQLResultDone();
  v10 = ABCDBContextPerformSQLResultDone();
  v11 = v10 & ABCDBContextPerformSQLResultDone();
  v12 = v9 & v11 & ABCDBContextPerformSQLResultDone();
  v13 = ABCDBContextPerformSQLResultDone();
  v14 = v12 & v13 & ABCDBContextPerformSQLResultDone();
  if ((v14 & 1) == 0)
    fwrite("***ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst failed\n", 0x45uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  return v14;
}

uint64_t _createLimitedAccessTable()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  int v3;

  v0 = ABCDBContextPerformSQLResultDone();
  v1 = v0 & ABCDBContextPerformSQLResultDone();
  v2 = ABCDBContextPerformSQLResultDone();
  v3 = v1 & v2 & ABCDBContextPerformSQLResultDone();
  return v3 & ABCDBContextPerformSQLResultDone();
}

uint64_t _addLimitedAccessDeletionTriggers(uint64_t a1, int a2)
{
  _BOOL4 v2;
  int v3;
  int v4;

  if (a2)
  {
    v2 = ABCDBContextPerformSQLResultDone();
    v3 = v2 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    v3 = 1;
  }
  v4 = v3 & ABCDBContextPerformSQLResultDone();
  return v4 & ABCDBContextPerformSQLResultDone();
}

void _configureABDatabase(uint64_t a1, uint64_t a2)
{
  if (_createABDatabaseTables(a2, -1, 1, 1))
    _createABDatabaseTriggersAndIndicesAndDropFirst(a2, 0);
  ABCDBContextUpdateSortDataVersionsWithConnection();
}

uint64_t _databaseCorrupted(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3 *v6;
  int v7;
  CFIndex MaximumSizeOfFileSystemRepresentation;
  char *v9;
  int v10;
  pid_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _DWORD *v16;
  void (*v17)(_DWORD *, UInt8 *, CFIndex, _QWORD);
  UInt8 *MutableBytePtr;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  CFMutableDataRef Mutable;
  _DWORD *v31;
  sqlite3 *ppDb;
  _OWORD buffer[75];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"_Bool _databaseCorrupted(CPSqliteDatabase *)", 292, 0, (uint64_t)CFSTR("database may be corrupted [%p]"), v2, v3, v4, a1);
  ppDb = 0;
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 && (v6 = *(sqlite3 **)(v5 + 8)) != 0)
    {
      v7 = 0;
      ppDb = *(sqlite3 **)(v5 + 8);
    }
    else
    {
      if (!*(_QWORD *)a1)
        return 0;
      MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(*(CFStringRef *)a1);
      v9 = (char *)malloc_type_calloc(MaximumSizeOfFileSystemRepresentation + 1, 1uLL, 0x100004077774924uLL);
      CFStringGetFileSystemRepresentation(*(CFStringRef *)a1, v9, MaximumSizeOfFileSystemRepresentation);
      sqlite3_open_v2(v9, &ppDb, 1, 0);
      free(v9);
      v6 = ppDb;
      if (!ppDb)
        return 0;
      v7 = 1;
    }
    v31 = 0;
    sqlite3_file_control(v6, 0, 7, &v31);
    if (v31)
    {
      v10 = v31[6];
      memset(buffer, 0, 512);
      v11 = getpid();
      if (proc_pidfdinfo(v11, v10, 2, buffer, 1200) == 1200)
      {
        ABDiagnosticsEnabled();
        v15 = "new";
        if (v7)
          v15 = "current";
        _ABLog2(3, (uint64_t)"void _logDatabaseHeader(CPSqliteDatabase *)", 275, 0, (uint64_t)CFSTR("Corrupt database %s connection fd %d is opened to %s"), v12, v13, v14, (uint64_t)v15);
      }
      v27 = 0;
      v28 = &v27;
      v29 = 0x2020000000;
      Mutable = 0;
      Mutable = CFDataCreateMutable(0, 0);
      CFDataSetLength((CFMutableDataRef)v28[3], 0x2000);
      v16 = v31;
      v17 = *(void (**)(_DWORD *, UInt8 *, CFIndex, _QWORD))(*(_QWORD *)v31 + 16);
      MutableBytePtr = CFDataGetMutableBytePtr((CFMutableDataRef)v28[3]);
      Length = CFDataGetLength((CFDataRef)v28[3]);
      v17(v16, MutableBytePtr, Length, 0);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"void _logDatabaseHeader(CPSqliteDatabase *)", 282, 0, (uint64_t)CFSTR("Corrupt database header:"), v20, v21, v22, v25);
      v23 = v28[3];
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = ___logDatabaseHeader_block_invoke;
      v26[3] = &unk_1E3CA3360;
      v26[4] = &v27;
      ABLogAppendDataToLogFile(3, v23, v26);
      _Block_object_dispose(&v27, 8);
    }
    if (v7)
      sqlite3_close(ppDb);
  }
  return 0;
}

void sub_19BC6DA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _databaseDeleted_0(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t result;
  ABAddressBookRef v14;
  CFStringRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  ABDiagnosticsEnabled();
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 298, 0, (uint64_t)CFSTR("database was deleted (%@) with reason %d"), v4, v5, v6, *a1);
  if (!ABCImageStoreCreateWithAddressBookPath((CFStringRef)*a1))
    goto LABEL_6;
  CPRecordStoreGetDatabase();
  v7 = MEMORY[0x1A1ACBE78]();
  ABDiagnosticsEnabled();
  v11 = CFSTR("not deleted");
  if (v7)
    v11 = CFSTR("deleted");
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 307, 0, (uint64_t)CFSTR("image database was %@ (%@) "), v8, v9, v10, (uint64_t)v11);
  if ((v7 & 1) != 0)
    v12 = 2;
  else
LABEL_6:
    v12 = 0;
  result = ABDatabaseIntegrityResolutionRecorder(v12);
  if (!a2)
  {
    v14 = ABAddressBookCreateWithOptions(0, 0);
    v15 = ABCImageStoreCreateWithAddressBook((uint64_t)v14);
    if ((int)ABCImageStoreGetCountOfImagesWithFormat((uint64_t)v15, 0xFFFFFFFFLL) >= 1)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 321, 0, (uint64_t)CFSTR("image database still has orphans"), v16, v17, v18, v19);
    }
    return ABLogDisplayInternalAlert((uint64_t)CFSTR("The main database was corrupt. Please attach sysdiagnose, AB logs and /tmp/AddressBook*"));
  }
  return result;
}

uint64_t ABCDBContextDestroy()
{
  uint64_t v0;
  const void *v1;
  uint64_t Context;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  CPRecordStoreGetDatabase();
  v0 = CPSqliteDatabaseConnectionForReading();
  if (v0)
    v1 = *(const void **)(v0 + 8);
  else
    v1 = 0;
  Context = CPRecordStoreGetContext();
  if (Context)
  {
    v3 = (_QWORD *)Context;
    v4 = *(const void **)(Context + 8);
    if (v4)
      CFRelease(v4);
    v5 = (const void *)v3[2];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v3[3];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)v3[4];
    if (v7)
      CFRelease(v7);
    v8 = (const void *)v3[5];
    if (v8)
      CFRelease(v8);
    v9 = (const void *)v3[6];
    if (v9)
      CFRelease(v9);
    v10 = (const void *)v3[7];
    if (v10)
      CFRelease(v10);
    v11 = (const void *)v3[8];
    if (v11)
      CFRelease(v11);
    v12 = (const void *)v3[9];
    if (v12)
      CFRelease(v12);
    v13 = (const void *)v3[10];
    if (v13)
      CFRelease(v13);
    v14 = (const void *)v3[11];
    if (v14)
      CFRelease(v14);
    v15 = (const void *)v3[12];
    if (v15)
      CFRelease(v15);
    free(v3);
  }
  CPRecordStoreDestroy();
  return ABCFTSCollationContextFreeContextForDatabaseHandle(v1);
}

uint64_t ABCDBContextSaveMultiValue(uint64_t a1, const void *a2, int a3, const __CFArray *a4, int a5)
{
  int ID;
  uint64_t v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  const __CFArray *v14;
  CFIndex v15;
  int v16;
  const void *v17;
  int ValueAtIndex;
  const __CFString *LabelAtIndex;
  uint64_t Store;
  uint64_t v21;
  const __CFDictionary **v22;
  int v23;
  uint64_t AddressBook;
  ABRecordID RecordID;
  int v26;
  ABRecordRef v27;
  const void *v28;
  uint64_t v29;
  sqlite3_stmt *v30;
  int v31;
  const __CFData *v32;
  const __CFData *v33;
  unint64_t v34;
  const char *v35;
  int v36;
  _BOOL8 v37;
  int Insert;
  unint64_t v39;
  uint64_t (**v40)();
  uint64_t (*v41)();
  const void *v42;
  const __CFString *FourDigitsOfLocalNumber;
  uint64_t v44;
  const void *v45;
  sqlite3_stmt *v46;
  const char *v47;
  BOOL v48;
  CFIndex v49;
  const void **v50;
  const void **v51;
  uint64_t v52;
  const __CFString *v53;
  const __CFArray *Value;
  uint64_t v55;
  uint64_t v56;
  const __CFDictionary **v57;
  int v58;
  uint64_t v59;
  sqlite3_stmt *v60;
  CFStringRef v61;
  const char *v62;
  int v63;
  const __CFString *v64;
  const UInt8 *BytePtr;
  int Length;
  const UInt8 *v68;
  const char *v69;
  unsigned int v71;
  int v72;
  const void *v73;
  const __CFArray *v74;
  const __CFArray *v75;
  CFIndex Count;
  const __CFArray *v77;
  const __CFArray *theArray;
  unsigned int v79;
  int v80;
  const __CFString *cf;
  const __CFDictionary *theDict;
  char v84;

  ID = CPRecordGetID();
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = *(sqlite3_stmt **)(v10 + 8);
    sqlite3_bind_int(v11, 1, ID);
    sqlite3_bind_int(v11, 2, a3);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CPSqliteDatabaseReleaseSqliteStatement();
    v12 = CPSqliteConnectionStatementForSQL();
    if (v12)
    {
      v13 = *(sqlite3_stmt **)(v12 + 8);
      sqlite3_bind_int(v13, 1, ID);
      sqlite3_bind_int(v13, 2, a3);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CPSqliteDatabaseReleaseSqliteStatement();
    }
  }
  if (a4)
  {
    v14 = (const __CFArray *)*((_QWORD *)a4 + 5);
    if (v14)
    {
      v77 = (const __CFArray *)*((_QWORD *)a4 + 6);
      theArray = (const __CFArray *)*((_QWORD *)a4 + 3);
      Count = CFArrayGetCount(v14);
      if (Count >= 1)
      {
        v75 = v14;
        v15 = 0;
        v16 = 2 * ((a5 & 0xFFFFFEFF) != 2);
        v79 = a5 & 0xFFFFFEFF;
        v80 = a3;
        if ((a5 & 0xFFFFFEFF) == 7)
          v16 = 4;
        v71 = kABSourceMeIdentifierProperty;
        v72 = v16;
        v17 = a2;
        v74 = a4;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
          LabelAtIndex = (const __CFString *)ABCMultiValueGetLabelAtIndex(a4, v15);
          theDict = (const __CFDictionary *)CFArrayGetValueAtIndex(v75, v15);
          CFArrayGetValueAtIndex(v77, v15);
          v84 = 0;
          if (LabelAtIndex)
          {
            Store = CPRecordGetStore();
            v21 = recordStoreContext(Store);
            if (v21)
              v22 = (const __CFDictionary **)(v21 + 8);
            else
              v22 = 0;
            v23 = rowidForStringInTable(LabelAtIndex, a1, (uint64_t)CFSTR("SELECT ROWID FROM ABMultiValueLabel WHERE value = ?;"),
                                  (uint64_t)CFSTR("INSERT INTO ABMultiValueLabel VALUES (?);"),
                                  v22,
                                  &v84);
          }
          else
          {
            v23 = -1;
          }
          AddressBook = ABRecordGetAddressBook();
          RecordID = ABRecordGetRecordID(v17);
          if (!AddressBook)
            goto LABEL_29;
          if (v84)
            *(_DWORD *)(AddressBook + 376) |= 0x4000u;
          if (kABCPhoneProperty == a3)
          {
            v26 = 0x8000;
          }
          else
          {
            if (kABCEmailProperty != a3)
              goto LABEL_24;
            v26 = 0x10000;
          }
          *(_DWORD *)(AddressBook + 376) |= v26;
LABEL_24:
          v27 = ABPersonCopySource(a2);
          if (v27)
          {
            v28 = v27;
            if (RecordID != -1 && ABRecordGetIntValue((uint64_t)v27, v71) == RecordID)
              *(_DWORD *)(AddressBook + 376) |= 0x40000u;
            CFRelease(v28);
          }
LABEL_29:
          if (!a1)
            return 0;
          v29 = CPSqliteConnectionStatementForSQL();
          if (!v29)
            return 0;
          v30 = *(sqlite3_stmt **)(v29 + 8);
          sqlite3_bind_int(v30, 1, RecordID);
          sqlite3_bind_int(v30, 2, a3);
          if (v23 < 0)
            sqlite3_bind_null(v30, 3);
          else
            sqlite3_bind_int(v30, 3, v23);
          v31 = v79;
          sqlite3_bind_int(v30, 4, ValueAtIndex);
          if (v79 == 5)
          {
            sqlite3_bind_null(v30, 5);
            LODWORD(v33) = 0;
            LODWORD(v34) = 0;
            goto LABEL_40;
          }
          v32 = (const __CFData *)ABCCopySQLiteStringValueForValueOfType((uint64_t)theDict, v79);
          v33 = v32;
          v34 = (unint64_t)v32 >> 32;
          switch(v72)
          {
            case 4:
              if (v32)
              {
                BytePtr = CFDataGetBytePtr(v32);
                Length = CFDataGetLength(v33);
                v68 = BytePtr;
                v31 = v79;
                sqlite3_bind_blob(v30, 5, v68, Length, 0);
                break;
              }
LABEL_103:
              sqlite3_bind_null(v30, 5);
              break;
            case 2:
              if (v32)
              {
                v69 = (const char *)_CPCreateUTF8StringFromCFString();
                sqlite3_bind_text(v30, 5, v69, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
                break;
              }
              goto LABEL_103;
            case 0:
              sqlite3_bind_int(v30, 5, (int)v32);
              break;
          }
LABEL_40:
          v35 = (const char *)_CPCreateUTF8StringFromCFString();
          sqlite3_bind_text(v30, 6, v35, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
          v36 = CPSqliteStatementPerform();
          CPSqliteStatementReset();
          v37 = v36 == 101;
          if (v36 == 101)
            Insert = CPSqliteConnectionRowidOfLastInsert();
          else
            Insert = 0;
          if (v31 != 5)
          {
            v39 = v33 | ((unint64_t)v34 << 32);
            if (v39)
            {
              v40 = ABCCallBacksForType(v31);
              if (v40)
              {
                v41 = v40[1];
                if (v41)
                  ((void (*)(unint64_t))v41)(v39);
              }
            }
          }
          v42 = 0;
          if (v36 != 101)
          {
            cf = 0;
            a3 = v80;
            goto LABEL_61;
          }
          cf = 0;
          a3 = v80;
          if (kABCPhoneProperty != v80)
            goto LABEL_61;
          v42 = (const void *)CPPhoneNumberCopyHomeCountryCode();
          if (!v42 || (FourDigitsOfLocalNumber = (const __CFString *)_PNCopyLastFourDigitsOfLocalNumber()) == 0)
          {
            cf = 0;
LABEL_59:
            v37 = 1;
LABEL_61:
            CPSqliteDatabaseReleaseSqliteConnection();
            if (v31 == 5)
            {
              v17 = a2;
              if (v37)
              {
                v73 = v42;
                v49 = CFDictionaryGetCount(theDict);
                v50 = (const void **)malloc_type_malloc(8 * v49, 0x6004044C4A2DFuLL);
                if (v50)
                {
                  v51 = v50;
                  CFDictionaryGetKeysAndValues(theDict, v50, 0);
                  if (v49 < 1)
                  {
                    v37 = 1;
                  }
                  else
                  {
                    v52 = 0;
                    while (1)
                    {
                      v53 = (const __CFString *)v51[v52];
                      Value = (const __CFArray *)CFDictionaryGetValue(theDict, v53);
                      if (v53)
                      {
                        v55 = CPRecordGetStore();
                        v56 = recordStoreContext(v55);
                        v57 = v56 ? (const __CFDictionary **)(v56 + 16) : 0;
                        v58 = rowidForStringInTable(v53, a1, (uint64_t)CFSTR("SELECT ROWID FROM ABMultiValueEntryKey WHERE value = ?;"),
                                              (uint64_t)CFSTR("INSERT INTO ABMultiValueEntryKey VALUES(?);"),
                                              v57,
                                              0);
                      }
                      else
                      {
                        v58 = -1;
                      }
                      v59 = CPSqliteConnectionStatementForSQL();
                      if (!v59)
                        break;
                      v60 = *(sqlite3_stmt **)(v59 + 8);
                      sqlite3_bind_int(v60, 1, Insert);
                      if (v58 < 0)
                        sqlite3_bind_null(v60, 2);
                      else
                        sqlite3_bind_int(v60, 2, v58);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v61 = CFStringCreateByCombiningStrings(0, Value, CFSTR(","));
                      }
                      else
                      {
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) == 0)
                          ABCDBContextSaveMultiValue_cold_1();
                        v61 = 0;
                      }
                      v62 = (const char *)_CPCreateUTF8StringFromCFString();
                      sqlite3_bind_text(v60, 3, v62, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
                      v63 = CPSqliteStatementPerform();
                      CPSqliteStatementReset();
                      if (v61)
                        CFRelease(v61);
                      v37 = v63 == 101;
                      if (++v52 >= v49 || v63 != 101)
                        goto LABEL_88;
                    }
                    v37 = 0;
                  }
LABEL_88:
                  free(v51);
                  a3 = v80;
                  v17 = a2;
                }
                else
                {
                  v37 = 1;
                  a3 = v80;
                }
                v42 = v73;
              }
            }
            else
            {
              v17 = a2;
            }
            v64 = cf;
            if (!cf)
              goto LABEL_92;
            goto LABEL_91;
          }
          cf = FourDigitsOfLocalNumber;
          if (CFStringGetLength(FourDigitsOfLocalNumber) < 1)
            goto LABEL_59;
          v44 = CPSqliteConnectionStatementForSQL();
          if (v44)
          {
            v45 = v42;
            v46 = *(sqlite3_stmt **)(v44 + 8);
            sqlite3_bind_int(v46, 1, Insert);
            v47 = (const char *)_CPCreateUTF8StringFromCFString();
            sqlite3_bind_text(v46, 2, v47, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
            LODWORD(v46) = CPSqliteStatementPerform();
            CPSqliteStatementReset();
            v48 = (_DWORD)v46 == 101;
            v42 = v45;
            v37 = v48;
            v31 = v79;
            goto LABEL_61;
          }
          v37 = 1;
          v64 = cf;
          v17 = a2;
LABEL_91:
          CFRelease(v64);
LABEL_92:
          a4 = v74;
          if (v42)
            CFRelease(v42);
          if (++v15 >= Count || !v37)
            return v37;
        }
      }
    }
  }
  return 1;
}

uint64_t ABCDBContextDeleteMultiValuesForRecord(uint64_t a1, int a2)
{
  uint64_t result;

  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CPSqliteDatabaseReleaseSqliteStatement();
    result = CPSqliteConnectionStatementForSQL();
    if (result)
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      return CPSqliteDatabaseReleaseSqliteStatement();
    }
  }
  return result;
}

void appendSQLInitSingleValuePropertyString(__CFString *a1, CFStringRef appendedString, unsigned int a3)
{
  if (a1 && appendedString && a3)
  {
    CFStringAppend(a1, appendedString);
    CFStringAppend(a1, CFSTR(" "));
    if (a3 <= 7 && ((0x4Fu >> (a3 - 1)) & 1) != 0)
      CFStringAppend(a1, *((CFStringRef *)&off_1E3CA3410 + (int)(a3 - 1)));
    if (CFStringCompare(appendedString, CFSTR("UID"), 0) == kCFCompareEqualTo)
      CFStringAppend(a1, CFSTR(" PRIMARY KEY"));
  }
}

BOOL ABCDBContextCreateGroupTables()
{
  return ABCDBContextPerformSQLResultDone();
}

__CFString *ABCDBContextCreateStringForIndexingForStringProperty(uint64_t a1, int a2, int a3)
{
  uint64_t active;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  __CFString *Mutable;
  const __CFAllocator *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFStringRef v14;
  const __CFString *v15;
  uint64_t v16;

  if (kABPersonPhoneProperty != a3)
  {
    v16 = CPSqliteConnectionStatementForSQL();
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, a3);
    Mutable = (__CFString *)CPSqliteStatementCopyStringResult();
LABEL_17:
    CPSqliteStatementReset();
    return Mutable;
  }
  active = CPPhoneNumberCopyActiveCountryCode();
  if (active)
  {
    v6 = (const void *)active;
    v7 = CPSqliteConnectionStatementForSQL();
    sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 2, a3);
    v8 = CPSqliteStatementCopyStringResult();
    if (v8)
    {
      v9 = (const __CFString *)v8;
      Mutable = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        if (!Mutable)
          Mutable = CFStringCreateMutable(v11, 0);
        CFStringAppend(Mutable, v9);
        v12 = (const __CFArray *)_PNCopyIndexStringsForAddressBookSearch();
        if (v12)
        {
          v13 = v12;
          v14 = CFStringCreateByCombiningStrings(0, v12, CFSTR(" "));
          if (v14)
          {
            v15 = v14;
            CFStringAppend(Mutable, CFSTR(" "));
            CFStringAppend(Mutable, v15);
            CFStringAppend(Mutable, CFSTR(" "));
            CFRelease(v15);
          }
          CFRelease(v13);
        }
        CFRelease(v9);
        v9 = (const __CFString *)CPSqliteStatementCopyStringResult();
      }
      while (v9);
    }
    else
    {
      Mutable = 0;
    }
    CFRelease(v6);
    goto LABEL_17;
  }
  return 0;
}

uint64_t ABCDBContextCreateStringForIndexingForDictionaryProperty(uint64_t a1, int a2, int a3)
{
  char *v5;
  __CFString *Mutable;
  __CFString *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  void (__cdecl *v14)(void *);
  sqlite3_stmt *v15;
  UInt8 *v16;
  uint64_t v17;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (kABPersonAddressProperty == a3)
  {
    v5 = &v21;
  }
  else if (kABPersonSocialProfileProperty == a3)
  {
    v5 = &v20;
  }
  else
  {
    if (kABPersonInstantMessageProperty != a3)
      return 0;
    v5 = &v19;
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v7 = Mutable;
  CFStringAppend(Mutable, CFSTR("SELECT group_concat(mve.value, ' ') FROM ABMultiValue mv, ABMultiValueEntry mve, ABMultiValueEntryKey mvek WHERE mv.record_id = ? AND mve.parent_id = mv.UID AND mv.property = ? AND mvek.rowid = mve.key AND("));
  if (*(_QWORD *)v5)
  {
    v8 = 0;
    do
    {
      if (v8)
        CFStringAppend(v7, CFSTR("OR "));
      CFStringAppend(v7, CFSTR("mvek.value = ? "));
    }
    while (*(_QWORD *)&v5[8 * v8++ + 8]);
  }
  CFStringAppend(v7, CFSTR(");"));
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = v10;
    sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, a3);
    v12 = *(const __CFString **)v5;
    if (*(_QWORD *)v5)
    {
      v13 = 1;
      v14 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
      do
      {
        v15 = *(sqlite3_stmt **)(v11 + 8);
        v16 = _ABCCreateUTF8StringFromCFString(v12);
        sqlite3_bind_text(v15, v13 + 2, (const char *)v16, -1, v14);
        v12 = *(const __CFString **)&v5[8 * v13++];
      }
      while (v12);
    }
    v17 = CPSqliteStatementCopyStringResult();
    CPSqliteStatementReset();
  }
  else
  {
    v17 = 0;
  }
  CFRelease(v7);
  return v17;
}

__CFString *ABCDBContextCopyStringForIndexingForProperty(uint64_t a1, int a2, ABPropertyID property)
{
  ABPropertyType TypeOfProperty;

  TypeOfProperty = ABPersonGetTypeOfProperty(property);
  if (TypeOfProperty == 261)
    return (__CFString *)ABCDBContextCreateStringForIndexingForDictionaryProperty(a1, a2, property);
  if (TypeOfProperty == 257)
    return ABCDBContextCreateStringForIndexingForStringProperty(a1, a2, property);
  return 0;
}

void ABCDContextCreateSearchIndexEntryForPerson(uint64_t a1, const void *a2)
{
  UInt8 *v4;
  UInt8 *v5;
  sqlite3_stmt *v6;
  ABRecordID RecordID;
  UInt8 *v8;
  UInt8 *v9;
  sqlite3_stmt *v10;
  ABRecordID v11;
  sqlite3_stmt *ppStmt;

  v4 = _ABCCreateUTF8StringFromCFString(CFSTR("INSERT OR REPLACE INTO ABPersonFullTextSearch(rowid) VALUES( ?)"));
  if (v4)
  {
    v5 = v4;
    ppStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a1 + 8), (const char *)v4, -1, &ppStmt, 0))
    {
      v6 = ppStmt;
      RecordID = ABRecordGetRecordID(a2);
      sqlite3_bind_int(v6, 1, RecordID);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
    }
    free(v5);
  }
  v8 = _ABCCreateUTF8StringFromCFString(CFSTR("INSERT OR REPLACE INTO ABPersonSmartDialerFullTextSearch(rowid) VALUES( ?)"));
  if (v8)
  {
    v9 = v8;
    ppStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a1 + 8), (const char *)v8, -1, &ppStmt, 0))
    {
      v10 = ppStmt;
      v11 = ABRecordGetRecordID(a2);
      sqlite3_bind_int(v10, 1, v11);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
    }
    free(v9);
  }
}

void ABCDContextUpdateSearchIndexForPerson(uint64_t a1, const void *a2)
{
  const __CFArray *ArrayOfAllFTSPropertyIDs;

  ArrayOfAllFTSPropertyIDs = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs();
  ABCDContextUpdateSearchIndexForPersonAndProperties(a1, a2, ArrayOfAllFTSPropertyIDs);
}

void ABCDContextUpdateSearchIndexForPersonAndProperties(uint64_t a1, const void *a2, const __CFArray *a3)
{
  const __CFArray *ArrayOfAllFTSPropertyIDs;
  __CFArray *Mutable;
  const CFArrayCallBacks *v6;
  CFMutableArrayRef v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  int v11;
  CFIndex v12;
  const void *ValueAtIndex;
  int v14;
  signed int v15;
  ABPropertyID v16;
  _BOOL4 v21;
  __CFString *StringForIndexingForProperty;
  const __CFString *v23;
  __CFArray *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  ABRecordID RecordID;
  const __CFArray *v29;
  __CFString *v30;
  __CFString *v31;
  CFIndex v32;
  int v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  CFIndex v37;
  const __CFString *v38;
  void (__cdecl *v39)(void *);
  const __CFString *v40;
  sqlite3_stmt *v41;
  UInt8 *v42;
  int v43;
  __CFString *SupplementalStringForIndexingForCompositeName;
  sqlite3_stmt *v45;
  __CFString *v46;
  UInt8 *v47;
  const __CFArray *v48;
  __CFString *v49;
  __CFString *v50;
  CFIndex v51;
  const __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  CFIndex v55;
  const __CFString *v56;
  void (__cdecl *v57)(void *);
  const __CFString *v58;
  __CFString *SmartDialerStringForIndexingFromCFString;
  sqlite3_stmt *v60;
  __CFString *v61;
  UInt8 *v62;
  int v63;
  __CFArray *v64;
  __CFArray *v65;
  const __CFString *value;
  char v67;
  const __CFArray *theArray;
  CFRange v70;

  ArrayOfAllFTSPropertyIDs = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs();
  Mutable = CFArrayCreateMutable(0, 0, 0);
  v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v65 = CFArrayCreateMutable(0, 0, 0);
  v64 = CFArrayCreateMutable(0, 0, v6);
  Count = CFArrayGetCount(a3);
  theArray = v7;
  if (Count >= 1)
  {
    v9 = Count;
    v10 = 0;
    v11 = 0;
    value = (const __CFString *)*MEMORY[0x1E0C9B0D0];
    while (1)
    {
      v12 = CFArrayGetCount(ArrayOfAllFTSPropertyIDs);
      ValueAtIndex = CFArrayGetValueAtIndex(a3, v10);
      v70.location = 0;
      v70.length = v12;
      if (CFArrayContainsValue(ArrayOfAllFTSPropertyIDs, v70, ValueAtIndex))
      {
        v14 = v11;
        v15 = CFArrayGetValueAtIndex(a3, v10);
        v16 = v15;
        v21 = kABPersonFirstNameProperty == v15
           || kABPersonLastNameProperty == v15
           || kABPersonMiddleNameProperty == v15
           || kABPersonPrefixProperty == v15
           || kABPersonSuffixProperty == v15;
        CFArrayAppendValue(Mutable, (const void *)v15);
        StringForIndexingForProperty = ABPersonCreateStringForIndexingForProperty(a2, v16);
        v23 = StringForIndexingForProperty;
        if (StringForIndexingForProperty && CFStringGetLength(StringForIndexingForProperty) >= 1)
        {
          v24 = theArray;
          v25 = v23;
        }
        else
        {
          v24 = theArray;
          v25 = value;
        }
        CFArrayAppendValue(v24, v25);
        v11 = v21 | v14;
        v26 = ABCSmartDialerPersonNameForProperty(v16);
        if (v26)
        {
          v27 = v26;
          if (CFStringGetLength(v26))
          {
            if (!CFEqual(v27, CFSTR("UNKNOWN_PROPERTY")))
            {
              CFArrayAppendValue(v65, v27);
              if (v23 && CFStringGetLength(v23) >= 1)
              {
                CFArrayAppendValue(v64, v23);
              }
              else
              {
                CFArrayAppendValue(v64, value);
                if (!v23)
                  goto LABEL_28;
              }
LABEL_27:
              CFRelease(v23);
              goto LABEL_28;
            }
          }
        }
        if (v23)
          goto LABEL_27;
      }
LABEL_28:
      if (v9 == ++v10)
        goto LABEL_36;
    }
  }
  LOBYTE(v11) = 0;
LABEL_36:
  RecordID = ABRecordGetRecordID(a2);
  v29 = v65;
  if (Mutable)
  {
    if (CFArrayGetCount(Mutable))
    {
      v30 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (v30)
      {
        v31 = v30;
        CFStringAppend(v30, CFSTR("UPDATE ABPersonFullTextSearch SET "));
        if (CFArrayGetCount(Mutable) >= 1)
        {
          v32 = 0;
          do
          {
            v33 = CFArrayGetValueAtIndex(Mutable, v32);
            v34 = ABCPersonNameForProperty(v33);
            if (v32)
              CFStringAppend(v31, CFSTR(", "));
            CFStringAppend(v31, v34);
            CFStringAppend(v31, CFSTR(" = ? "));
            ++v32;
          }
          while (v32 < CFArrayGetCount(Mutable));
        }
        if ((v11 & 1) != 0)
          CFStringAppend(v31, CFSTR(", SupplementalCompositeNameTerms = ? "));
        CFStringAppend(v31, CFSTR("WHERE rowid = ?"));
        v35 = CPSqliteConnectionStatementForSQL();
        if (!v35)
          goto LABEL_61;
        v36 = v35;
        if (CFArrayGetCount(theArray) < 1)
        {
          v43 = 1;
          if ((v11 & 1) == 0)
          {
LABEL_60:
            sqlite3_bind_int(*(sqlite3_stmt **)(v36 + 8), v43, RecordID);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
LABEL_61:
            CFRelease(v31);
            goto LABEL_62;
          }
        }
        else
        {
          v67 = v11;
          v37 = 0;
          v38 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
          v39 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
          do
          {
            v40 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v37);
            v41 = *(sqlite3_stmt **)(v36 + 8);
            if (v40 == v38)
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v36 + 8), v37 + 1);
            }
            else
            {
              v42 = _ABCCreateUTF8StringFromCFString(v40);
              sqlite3_bind_text(v41, v37 + 1, (const char *)v42, -1, v39);
            }
            ++v37;
          }
          while (v37 < CFArrayGetCount(theArray));
          v43 = v37 + 1;
          v29 = v65;
          if ((v67 & 1) == 0)
            goto LABEL_60;
        }
        SupplementalStringForIndexingForCompositeName = ABPersonCreateSupplementalStringForIndexingForCompositeName(a2);
        v45 = *(sqlite3_stmt **)(v36 + 8);
        if (SupplementalStringForIndexingForCompositeName)
        {
          v46 = SupplementalStringForIndexingForCompositeName;
          v47 = _ABCCreateUTF8StringFromCFString(SupplementalStringForIndexingForCompositeName);
          sqlite3_bind_text(v45, v43, (const char *)v47, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
          CFRelease(v46);
        }
        else
        {
          sqlite3_bind_null(*(sqlite3_stmt **)(v36 + 8), v43);
        }
        ++v43;
        goto LABEL_60;
      }
    }
  }
LABEL_62:
  v48 = v64;
  if (v29)
  {
    if (CFArrayGetCount(v29))
    {
      v49 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (v49)
      {
        v50 = v49;
        CFStringAppend(v49, CFSTR("UPDATE ABPersonSmartDialerFullTextSearch SET "));
        if (CFArrayGetCount(v29) >= 1)
        {
          v51 = 0;
          do
          {
            v52 = (const __CFString *)CFArrayGetValueAtIndex(v29, v51);
            if (v51)
              CFStringAppend(v50, CFSTR(", "));
            CFStringAppend(v50, v52);
            CFStringAppend(v50, CFSTR(" = ? "));
            ++v51;
          }
          while (v51 < CFArrayGetCount(v29));
        }
        CFStringAppend(v50, CFSTR("WHERE rowid = ?"));
        v53 = CPSqliteConnectionStatementForSQL();
        if (v53)
        {
          v54 = v53;
          if (CFArrayGetCount(v64) < 1)
          {
            v63 = 1;
          }
          else
          {
            v55 = 0;
            v56 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
            v57 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
            do
            {
              v58 = (const __CFString *)CFArrayGetValueAtIndex(v48, v55);
              if (v58 == v56)
              {
                sqlite3_bind_null(*(sqlite3_stmt **)(v54 + 8), v55 + 1);
              }
              else
              {
                SmartDialerStringForIndexingFromCFString = ABPersonCreateSmartDialerStringForIndexingFromCFString(v58);
                v60 = *(sqlite3_stmt **)(v54 + 8);
                if (SmartDialerStringForIndexingFromCFString)
                {
                  v61 = SmartDialerStringForIndexingFromCFString;
                  v62 = _ABCCreateUTF8StringFromCFString(SmartDialerStringForIndexingFromCFString);
                  sqlite3_bind_text(v60, v55 + 1, (const char *)v62, -1, v57);
                  CFRelease(v61);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v54 + 8), v55 + 1);
                }
                v48 = v64;
                v29 = v65;
              }
              ++v55;
            }
            while (v55 < CFArrayGetCount(v48));
            v63 = v55 + 1;
          }
          sqlite3_bind_int(*(sqlite3_stmt **)(v54 + 8), v63, RecordID);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        CFRelease(v50);
      }
    }
    CFRelease(v29);
  }
  if (v48)
    CFRelease(v48);
  if (Mutable)
    CFRelease(Mutable);
  if (theArray)
    CFRelease(theArray);
}

void ABCDBContextDeleteSearchIndexEntryForRecord(uint64_t a1, ABRecordRef record)
{
  ABRecordID RecordID;

  RecordID = ABRecordGetRecordID(record);
  _DeleteEntryFromTableForRecordId(a1, RecordID, (uint64_t)CFSTR("ABPersonFullTextSearch"));
  _DeleteEntryFromTableForRecordId(a1, RecordID, (uint64_t)CFSTR("ABPersonSmartDialerFullTextSearch"));
}

void _DeleteEntryFromTableForRecordId(uint64_t a1, int a2, uint64_t a3)
{
  CFStringRef v4;
  uint64_t v5;

  v4 = CFStringCreateWithFormat(0, 0, CFSTR("DELETE FROM %@ WHERE rowid = ?"), a3);
  v5 = CPSqliteConnectionStatementForSQL();
  if (v5)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, a2);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  if (v4)
    CFRelease(v4);
}

uint64_t ABCDBContextCreateSearchTablesAndDropFirst(uint64_t a1, int a2)
{
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  CFLocaleIdentifier v7;
  const __CFString *v8;
  const __CFAllocator *v9;
  __CFString *Mutable;
  __CFString *v11;
  CFStringRef v12;
  int v13;
  CFStringRef v14;

  if (!ABCFTSIsEnabled())
    return 1;
  if (a2)
  {
    v4 = _dropTable(a1, (uint64_t)CFSTR("ABPersonFullTextSearch"));
    v5 = v4 & _dropTable(a1, (uint64_t)CFSTR("ABPersonSmartDialerFullTextSearch"));
  }
  else
  {
    v5 = 1;
  }
  v7 = ABCCopyUserLanguage();
  v8 = ABAddressBookCopyCollatorType(0, 1);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v11 = Mutable;
  if (v8)
    CFStringAppendFormat(Mutable, 0, CFSTR("collator=\"%@\""), v8);
  v12 = CFStringCreateWithFormat(v9, 0, CFSTR("CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language=\"%@\" %@, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, OrganizationPhonetic, Department, Note, Birthday, JobTitle, Nickname, Prefix, Suffix, DisplayName, Phone, Email, Address, SocialProfile, URL, RelatedNames, IM, Date, SupplementalCompositeNameTerms);"),
          v7,
          v11);
  v13 = v5 & ABCDBContextPerformSQLResultDone();
  v14 = CFStringCreateWithFormat(v9, 0, CFSTR("CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonSmartDialerFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language=\"en\" %@, FirstEncoding, MiddleEncoding, LastEncoding, OrganizationEncoding, NicknameEncoding);"),
          v11);
  v6 = v13 & ABCDBContextPerformSQLResultDone();
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v7);
  CFRelease(v11);
  if (v8)
    CFRelease(v8);
  return v6;
}

uint64_t ABCSQLiteTypeForType(int a1)
{
  if ((a1 & 0xFFFFFEFF) == 7)
    return 4;
  else
    return 2 * ((a1 & 0xFFFFFEFF) != 2);
}

uint64_t ABCDBContextCopyRecordsForUIDsOfType()
{
  return CPRecordStoreCopyInstancesOfClassWithUIDs();
}

CFStringRef ABCCopySQLiteStringValueForValueOfType(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t (**v4)();

  v3 = a2 & 0xFFFFFEFF;
  if ((a2 & 0xFFFFFEFF) <= 7)
  {
    if (((1 << a2) & 0xEE) != 0)
    {
      v4 = ABCCallBacksForType(v3);
      if (v4 && *v4)
        return (CFStringRef)((uint64_t (*)(uint64_t))*v4)(a1);
    }
    else if (v3 == 4)
    {
      return _ABCCreateCFStringFromDate(a1);
    }
  }
  return (CFStringRef)a1;
}

CFDateRef ABCCopyValueOfTypeForSQLiteValue(const __CFString *a1, int a2)
{
  unsigned int v3;
  uint64_t (**v4)();

  v3 = a2 & 0xFFFFFEFF;
  if ((a2 & 0xFFFFFEFF) <= 7)
  {
    if (((1 << a2) & 0xEE) != 0)
    {
      v4 = ABCCallBacksForType(v3);
      if (v4 && *v4)
        return (CFDateRef)((uint64_t (*)(const __CFString *))*v4)(a1);
    }
    else if (v3 == 4)
    {
      return _ABCCreateDateFromCFString(a1);
    }
  }
  return (CFDateRef)a1;
}

BOOL _runPhoneQueryWithContextForNumber(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  const __CFString *FourDigitsOfLocalNumber;
  const __CFString *v5;
  CFIndex Length;
  _BOOL8 v7;
  sqlite3_stmt *v8;
  UInt8 *v9;

  CPRecordStoreGetDatabase();
  v2 = CPSqliteDatabaseStatementForReading();
  v3 = (_QWORD *)recordStoreContext(a1);
  if (v3)
    v3 = (_QWORD *)*v3;
  ABRegulatoryLogReadContactsData((uint64_t)v3);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  FourDigitsOfLocalNumber = (const __CFString *)_PNCopyLastFourDigitsOfLocalNumber();
  if (!FourDigitsOfLocalNumber)
    return 0;
  v5 = FourDigitsOfLocalNumber;
  Length = CFStringGetLength(FourDigitsOfLocalNumber);
  v7 = Length > 0;
  if (Length >= 1)
  {
    v8 = *(sqlite3_stmt **)(v2 + 8);
    v9 = _ABCCreateUTF8StringFromCFString(v5);
    sqlite3_bind_text(v8, 1, (const char *)v9, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    CPSqliteStatementProcessPhoneQuery();
    CPSqliteStatementReset();
  }
  CFRelease(v5);
  return v7;
}

BOOL phoneQueryRowHandler(uint64_t a1, int a2, const char *a3, char a4, uint64_t a5)
{
  _BOOL8 v7;
  int v8;
  const char *v11;
  size_t v12;
  int v13;
  int v14;
  CFMutableArrayRef *v15;
  CFMutableArrayRef *v16;
  CFMutableArrayRef *v17;
  __CFArray **v18;
  __CFArray *v19;
  int v20;
  __CFArray **v21;
  __CFArray *v22;
  int v23;
  const unsigned __int8 *v24;
  CFStringRef v25;
  CFTypeRef *v26;
  CFMutableArrayRef *v27;

  if (a2)
  {
    v7 = *(_QWORD *)(a5 + 16) == 0;
    v8 = 3;
    goto LABEL_12;
  }
  v11 = *(const char **)(a5 + 48);
  if (!a3 || !v11)
  {
    v7 = 0;
    v8 = 1;
    if (!v11)
      goto LABEL_12;
LABEL_11:
    if ((a4 & 1) != 0)
      return v7;
    goto LABEL_12;
  }
  v12 = strlen(*(const char **)(a5 + 48));
  v13 = strncmp(v11, a3, v12);
  v7 = 0;
  if (v13)
    v8 = 1;
  else
    v8 = 2;
  if (v13)
    goto LABEL_11;
LABEL_12:
  v14 = *(_DWORD *)(a5 + 40);
  if (v8 >= v14)
  {
    if (v8 > v14)
    {
      v15 = *(CFMutableArrayRef **)(a5 + 16);
      if (v15)
        CFArrayRemoveAllValues(*v15);
      v16 = *(CFMutableArrayRef **)(a5 + 24);
      if (v16)
        CFArrayRemoveAllValues(*v16);
      v17 = *(CFMutableArrayRef **)(a5 + 32);
      if (v17)
        CFArrayRemoveAllValues(*v17);
      *(_DWORD *)(a5 + 40) = v8;
    }
    v18 = *(__CFArray ***)(a5 + 16);
    if (v18)
    {
      v19 = *v18;
      v20 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      CFArrayAppendValue(v19, (const void *)v20);
      v21 = *(__CFArray ***)(a5 + 24);
      if (v21)
      {
        v22 = *v21;
        v23 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
        CFArrayAppendValue(v22, (const void *)v23);
      }
    }
    else
    {
      *(_DWORD *)a5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      *(_DWORD *)(a5 + 4) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
    }
    if (*(_QWORD *)(a5 + 32) || *(_QWORD *)(a5 + 8))
    {
      v24 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
      if (v24)
      {
        v25 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v24, 0x8000100u);
        v26 = *(CFTypeRef **)(a5 + 8);
        if (v26)
        {
          if (*v26)
          {
            CFRelease(*v26);
            v26 = *(CFTypeRef **)(a5 + 8);
          }
          *v26 = v25;
        }
        else
        {
          CFArrayAppendValue(**(CFMutableArrayRef **)(a5 + 32), v25);
          CFRelease(v25);
        }
      }
      else
      {
        v27 = *(CFMutableArrayRef **)(a5 + 32);
        if (v27 && *(_QWORD *)(a5 + 16))
          CFArrayAppendValue(*v27, (const void *)*MEMORY[0x1E0C9B0D0]);
      }
    }
  }
  return v7;
}

CFMutableArrayRef _CopyPersonUIDsForPhoneNumber(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (a4)
    *a4 = CFArrayCreateMutable(v8, 0, 0);
  if (a5)
    *a5 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  _runPhoneQueryWithContextForNumber(a1);
  return Mutable;
}

uint64_t _PersonUIDForPhoneNumber(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _runPhoneQueryWithContextForNumber(a1);
  if (a4)
    *a4 = -1;
  return 0xFFFFFFFFLL;
}

uint64_t ABPhoneNumberGetLastFour(const char *a1)
{
  size_t v2;

  v2 = strlen(a1);
  if (v2 <= 4)
    return (uint64_t)a1;
  else
    return (uint64_t)&a1[v2 - 4];
}

void _FindUIDsMatchingPhoneNumbers(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  const void *v10;
  uint64_t *v11;
  void *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  __CFString *MutableCopy;
  uint64_t v17;
  char v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  const __CFString *v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  const char **v28;
  size_t v29;
  const char *v30;
  uint64_t v31;
  void **v32;
  void *v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;

  LODWORD(v5) = a5;
  v10 = (const void *)CPPhoneNumberCopyHomeCountryCode();
  v11 = (uint64_t *)malloc_type_malloc(8 * (int)v5, 0x10040436913F5uLL);
  v12 = malloc_type_malloc((uint64_t)(int)v5 << 6, 0x105004024FC7E8CuLL);
  v40 = v12;
  if ((int)v5 <= 0)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT value, record_id, identifier FROM ABMultiValue WHERE "));
  }
  else
  {
    v13 = v12;
    v34 = a1;
    v35 = v5;
    v14 = v5;
    v38 = *(_OWORD *)(MEMORY[0x1E0D17858] + 16);
    v39 = *MEMORY[0x1E0D17858];
    v36 = *(_OWORD *)(MEMORY[0x1E0D17858] + 48);
    v37 = *(_OWORD *)(MEMORY[0x1E0D17858] + 32);
    v5 = v5;
    v15 = v11;
    do
    {
      *v13 = v39;
      v13[1] = v38;
      v13[2] = v37;
      v13[3] = v36;
      if (*a4)
      {
        *v15 = CPPhoneNumberCopyNormalized();
        decomposePhoneNumber();
      }
      else
      {
        *v15 = 0;
      }
      *a2++ = -1;
      *a3++ = -1;
      ++v15;
      ++a4;
      v13 += 4;
      --v5;
    }
    while (v5);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT value, record_id, identifier FROM ABMultiValue WHERE "));
    v17 = 0;
    v18 = 0;
    do
    {
      while (1)
      {
        v19 = v11[v17];
        if (!v19)
          break;
        v20 = strlen((const char *)v11[v17]);
        v21 = (_BYTE *)(v19 + v20 - 4);
        if (v20 <= 4)
          v21 = (_BYTE *)v11[v17];
        if (!*v21)
          break;
        if ((v18 & 1) != 0)
          v22 = CFSTR("OR ");
        else
          v22 = CFSTR("UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE ");
        CFStringAppend(MutableCopy, v22);
        CFStringAppend(MutableCopy, CFSTR("value = ? "));
        v18 = 1;
        if (v14 - 1 == v17++)
          goto LABEL_21;
      }
      ++v17;
    }
    while (v14 != v17);
    if ((v18 & 1) == 0)
      goto LABEL_22;
LABEL_21:
    CFStringAppend(MutableCopy, CFSTR(");"));
LABEL_22:
    a1 = v34;
    LODWORD(v5) = v35;
  }
  CPRecordStoreGetDatabase();
  v24 = CPSqliteDatabaseStatementForReading();
  v25 = (_QWORD *)recordStoreContext(a1);
  if (v25)
    v25 = (_QWORD *)*v25;
  ABRegulatoryLogReadContactsData((uint64_t)v25);
  CFRelease(MutableCopy);
  if (v24 && *(_QWORD *)(v24 + 8))
  {
    if ((int)v5 >= 1)
    {
      v26 = v5;
      v27 = 1;
      v28 = (const char **)v11;
      do
      {
        if (*v28)
        {
          v29 = strlen(*v28);
          v30 = v29 <= 4 ? *v28 : &(*v28)[v29 - 4];
          if (*v30)
            sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), v27++, v30, -1, 0);
        }
        ++v28;
        --v26;
      }
      while (v26);
    }
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if (v10)
    CFRelease(v10);
  if ((int)v5 >= 1)
  {
    v31 = v5;
    v32 = (void **)v11;
    do
    {
      v33 = *v32++;
      free(v33);
      --v31;
    }
    while (v31);
  }
  free(v11);
  free(v40);
}

uint64_t ABDBContextBatchPhoneCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  v4 = CPPhoneNumberCopyNormalized();
  if (v4)
  {
    v5 = (void *)v4;
    decomposePhoneNumber();
    v6 = *(unsigned int *)(a2 + 32);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      while (*(_DWORD *)(*(_QWORD *)a2 + 4 * v8) != -1 || !decomposedPhoneNumbersEqual())
      {
        ++v8;
        v7 += 64;
        if (v8 >= v6)
          goto LABEL_9;
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v8) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
    }
LABEL_9:
    free(v5);
  }
  return 0;
}

uint64_t _iteratePeopleWithCallbacksRowHandler(uint64_t a1, _QWORD *a2)
{
  uint64_t RecordIDForRowid;

  sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), 0);
  RecordIDForRowid = CPRecordStoreGetRecordIDForRowid();
  if (!(*(unsigned int (**)(uint64_t, _QWORD))a2[1])(RecordIDForRowid, *a2))
    return 1;
  CPSqliteStatementApplyValuesFromRecord();
  return (*(unsigned int (**)(_QWORD))(a2[1] + 48))(*a2) ^ 1;
}

uint64_t ABCRecordStoreReadColumns()
{
  return CPRecordStoreCreateReadColumns();
}

uint64_t ABRecordStoreColumnTypeForPropertyType(int a1)
{
  int v1;

  v1 = a1 - 1;
  if ((a1 - 1) >= 7 || ((0x5Fu >> v1) & 1) == 0)
    abort();
  return dword_19BCBE808[v1];
}

uint64_t (*_setterForType(int a1))()
{
  if ((a1 - 1) < 5)
    return off_1E3CA3448[a1 - 1];
  syslog(3, "ignoring column with type %d", a1);
  return 0;
}

void appendTokenizations(void *a1, const __CFArray *a2, uint64_t a3, __CFString *a4, __CFArray **a5, _QWORD *a6, int a7, int a8)
{
  const __CFAllocator *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  uint64_t v18;
  const __CFArray *ValueAtIndex;
  int v20;
  char v21;
  __CFArray *MutableCopy;
  CFArrayRef v23;
  int v24;
  BOOL v25;
  CFIndex v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  _QWORD *v32;
  CFIndex v33;
  const __CFString *v34;
  char *v35;
  int v36;
  char v37;
  __CFArray **v38;
  __CFArray *theArray;
  __CFArray *v40;
  char v41;
  CFIndex v42;
  CFIndex v44;
  void *values;
  int64_t v47;
  CFRange v48;

  values = a1;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v15 = a2;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
    goto LABEL_7;
  v17 = Count;
  v18 = 1;
  do
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v15, v18 - 1);
    v48.length = CFArrayGetCount(ValueAtIndex);
    v48.location = 0;
    v20 = CFArrayContainsValue(ValueAtIndex, v48, a1);
    if (v18 >= v17)
      break;
    ++v18;
  }
  while (!v20);
  if (v20)
  {
    v21 = 1;
    MutableCopy = v15;
  }
  else
  {
LABEL_7:
    MutableCopy = CFArrayCreateMutableCopy(v14, 0, v15);
    v23 = CFArrayCreate(v14, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(MutableCopy, v23);
    CFRelease(v23);
    v21 = 0;
  }
  v42 = CFArrayGetCount(MutableCopy);
  if (v42 >= 1)
  {
    v37 = v21;
    v38 = a5;
    v41 = 0;
    v24 = 0;
    v25 = a8 == 0;
    v26 = 0;
    if (v25)
      v27 = CFSTR("abs.SearchKey");
    else
      v27 = CFSTR("abs.NameOnlySearchKey");
    if (a7)
      v28 = CFSTR(", 1))");
    else
      v28 = CFSTR(", 0))");
    v40 = MutableCopy;
    do
    {
      v29 = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, v26);
      if (v24 >= 1)
        CFStringAppend(a4, CFSTR(" OR"));
      v30 = CFArrayGetCount(v29);
      if (v30 < 1)
      {
        v24 = 0;
      }
      else
      {
        v31 = v30;
        v44 = v26;
        v32 = malloc_type_malloc(8 * v30, 0x10040436913F5uLL);
        v33 = 0;
        v24 = 0;
        do
        {
          v34 = (const __CFString *)CFArrayGetValueAtIndex(v29, v33);
          if (CFStringGetLength(v34) >= 1)
          {
            v47 = 0;
            v35 = (char *)ABCreateSortKey(v34, a3, 0, &v47);
            if (v47 < 1)
              free(v35);
            else
              v32[v24++] = v35;
          }
          ++v33;
        }
        while (v31 != v33);
        if (v24 < 1)
        {
          if (v32)
            free(v32);
          MutableCopy = v40;
          v26 = v44;
        }
        else
        {
          CFArrayAppendValue(theArray, (const void *)v24);
          CFArrayAppendValue(theArray, v32);
          CFStringAppend(a4, CFSTR(" ("));
          if ((v41 & 1) == 0)
            CFStringAppend(a4, CFSTR(" ("));
          v36 = 0;
          MutableCopy = v40;
          v26 = v44;
          do
          {
            ++*a6;
            if (v36)
              CFStringAppend(a4, CFSTR(" AND"));
            CFStringAppend(a4, CFSTR(" (1 == has_sort_key_prefix("));
            CFStringAppend(a4, v27);
            CFStringAppend(a4, CFSTR(", ?"));
            CFStringAppend(a4, v28);
            ++v36;
          }
          while (v24 != v36);
          CFStringAppend(a4, CFSTR(")"));
          v41 = 1;
        }
      }
      ++v26;
    }
    while (v26 != v42);
    a5 = v38;
    v21 = v37;
    if ((v41 & 1) != 0)
      CFStringAppend(a4, CFSTR(")"));
  }
  if ((v21 & 1) == 0)
    CFRelease(MutableCopy);
  *a5 = theArray;
}

uint64_t bindTokenizations(uint64_t a1, CFArrayRef theArray, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int ValueAtIndex;
  int v10;
  const char **v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;

  result = CFArrayGetCount(theArray);
  if (result >= 0)
    v7 = result;
  else
    v7 = result + 1;
  if (result >= 2)
  {
    v8 = 0;
    v15 = v7 >> 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 2 * v8);
      result = (uint64_t)CFArrayGetValueAtIndex(theArray, (2 * v8) | 1);
      v10 = *a3;
      if (ValueAtIndex >= 1)
      {
        v11 = (const char **)result;
        v12 = ValueAtIndex;
        do
        {
          v13 = *v11++;
          v14 = strlen(v13);
          result = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), v10++, v13, v14, 0);
          --v12;
        }
        while (v12);
        v10 = *a3;
      }
      *a3 = v10 + ValueAtIndex;
      ++v8;
    }
    while (v8 != v15);
  }
  return result;
}

void releaseTokenizationSortKeys(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ValueAtIndex;
  void *v7;
  void *v8;
  void **v9;
  void *v10;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 0)
      v3 = Count;
    else
      v3 = Count + 1;
    if (Count >= 2)
    {
      v4 = 0;
      v5 = v3 >> 1;
      do
      {
        ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(a1, 2 * v4);
        v7 = (void *)CFArrayGetValueAtIndex(a1, (2 * v4) | 1);
        if (v7)
        {
          v8 = v7;
          if (ValueAtIndex >= 1)
          {
            if (ValueAtIndex <= 1)
              ValueAtIndex = 1;
            v9 = (void **)v7;
            do
            {
              v10 = *v9++;
              free(v10);
              --ValueAtIndex;
            }
            while (ValueAtIndex);
          }
          free(v8);
        }
        ++v4;
      }
      while (v4 != v5);
    }
    CFRelease(a1);
  }
}

void ABCIteratePeopleMatchingStringWithCallbacks(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, uint64_t a8, uint64_t a9, char a10)
{
  const __CFString *theString;
  CFDictionaryRef v17;
  sqlite3_stmt *Prefix;
  sqlite3_stmt *v19;
  _QWORD v22[3];
  void *Columns;
  uint64_t v24;
  uint64_t v25;
  void *values[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *keys[10];

  keys[8] = *(void **)MEMORY[0x1E0C80C00];
  v22[0] = a9;
  v22[1] = a8;
  v22[2] = ABCPersonClass;
  Columns = 0;
  v24 = 0;
  v25 = a1;
  if (*(_QWORD *)(a8 + 56) && *(int *)(a8 + 64) >= 1 && *(_QWORD *)(CPRecordStoreGetDatabase() + 8))
    CPSqliteConnectionEnableProgressHandlerCallback();
  if ((a10 & 1) != 0)
  {
    theString = 0;
    v17 = 0;
  }
  else
  {
    keys[0] = (void *)kABPersonFirstNameProperty;
    keys[1] = (void *)kABPersonLastNameProperty;
    keys[2] = (void *)kABPersonMiddleNameProperty;
    keys[3] = (void *)kABPersonOrganizationProperty;
    keys[4] = (void *)kABPersonKindProperty;
    keys[5] = (void *)kABPersonPrefixProperty;
    keys[6] = (void *)kABPersonSuffixProperty;
    keys[7] = (void *)kABPersonCompositeNameFallbackProperty;
    *(_OWORD *)values = xmmword_19BCBE7C8;
    v27 = unk_19BCBE7D8;
    v28 = xmmword_19BCBE7E8;
    v29 = unk_19BCBE7F8;
    v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 8, 0, 0);
    theString = CFSTR("SELECT ROWID, First, Last, Middle, Organization, Kind, Prefix, Suffix, CompositeNameFallback ");
  }
  Columns = (void *)CPRecordStoreCreateReadColumns();
  Prefix = ABCIteratePeopleMatchingStringWithCustomQueryPrefix(a1, a2, a3, a4, a5, a6, a7, (int)_iteratePeopleWithCallbacksRowHandler, (uint64_t)v22, theString, (uint64_t)v17);
  if (Prefix)
  {
    v19 = Prefix;
    if (CFArrayGetCount(Prefix))
      ABCIteratePeopleMatchingStringWithCallbacks_cold_1();
    CFRelease(v19);
  }
  if ((a10 & 1) == 0)
    CFRelease(theString);
  if (v17)
    CFRelease(v17);
  if (*(_QWORD *)(a8 + 56) && *(_QWORD *)(CPRecordStoreGetDatabase() + 8))
    CPSqliteConnectionDisableProgressHandlerCallback();
  free(Columns);
}

uint64_t _iteratePeopleProgressHandlerCallback(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  if (!a2)
    return 0;
  v2 = a2[1];
  if (v2 && (v3 = *(uint64_t (**)(_QWORD))(v2 + 56)) != 0)
    return v3(*a2);
  else
    return 0;
}

sqlite3_stmt *ABCIteratePeopleMatchingStringWithCustomQueryPrefix(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, int a8, uint64_t a9, CFStringRef theString, uint64_t a11)
{
  const void *v18;
  _QWORD *v19;
  uint64_t SearchCollator;
  _QWORD *v21;
  __CFStringTokenizer *WordTokenizer;
  __CFString *MutableCopy;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  ABRecordID RecordID;
  ABRecordID v29;
  int v30;
  char v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  const __CFString *v36;
  uint64_t v37;
  _QWORD *v38;
  sqlite3_stmt *v39;
  int v40;
  int v41;
  sqlite3_stmt *v42;
  uint64_t v43;
  const __CFAllocator *v44;
  void (__cdecl *v45)(void *);
  CFMutableStringRef Mutable;
  const __CFString *TokenAtIndex;
  int i;
  UInt8 *v49;
  CFMutableStringRef v50;
  uint64_t Count;
  uint64_t v52;
  uint64_t j;
  const __CFString *v54;
  UInt8 *v55;
  UInt8 *v57;
  uint64_t v58;
  ABRecordID v59;
  int v60;

  if ((ABCFTSIsEnabled() & 1) == 0)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"CFArrayRef ABCIteratePeopleMatchingStringWithCustomQueryPrefix(ABCDBContextRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABCPersonSortOrdering, _Bool, CPRecordStoreRowHandler, void *, CFStringRef, CFDictionaryRef)", 4070, 0, (uint64_t)CFSTR("AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs) with simulated crash report."), v24, v25, v26, v58);
    ABLogSimulateCrashReport((uint64_t)CFSTR("AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs)."));
    return 0;
  }
  v18 = (const void *)ABTokenListCreate();
  v19 = (_QWORD *)recordStoreContext(a1);
  if (v19)
    v19 = (_QWORD *)*v19;
  SearchCollator = ABAddressBookGetSearchCollator((uint64_t)v19);
  v21 = (_QWORD *)recordStoreContext(a1);
  if (v21)
    v21 = (_QWORD *)*v21;
  WordTokenizer = ABAddressBookGetWordTokenizer((uint64_t)v21);
  if (!SearchCollator)
  {
LABEL_74:
    MutableCopy = 0;
    goto LABEL_75;
  }
  ABTokenListPopulateFromString((uint64_t)v18, WordTokenizer, 0, a2, 0, 1, 0);
  if (!v18)
    return 0;
  if (ABTokenListGetCount((uint64_t)v18) < 1)
  {
    v27 = 0;
    MutableCopy = 0;
LABEL_67:
    CFRelease(v18);
    goto LABEL_68;
  }
  v60 = a6;
  if (theString)
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  else
    MutableCopy = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  CFStringAppend(MutableCopy, CFSTR(" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE"));
  if (a1)
  {
    if (a4)
    {
      RecordID = ABRecordGetRecordID(a4);
      if (!a5)
        goto LABEL_22;
    }
    else
    {
      RecordID = -1;
      if (!a5)
        goto LABEL_22;
    }
    v29 = ABRecordGetRecordID(a5);
    if (v29 != -1)
    {
      v30 = v29;
      v31 = 0;
      v32 = CFSTR(" abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0) AND");
      goto LABEL_26;
    }
LABEL_22:
    v30 = -1;
    v31 = 1;
    if (RecordID == -1)
    {
      if (!a3)
        goto LABEL_27;
      v32 = CFSTR(" StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?) AND");
    }
    else
    {
      v32 = CFSTR(" StoreID = ? AND");
    }
LABEL_26:
    CFStringAppend(MutableCopy, v32);
LABEL_27:
    CFStringAppend(MutableCopy, CFSTR(" abp.ROWID IN "));
    if (a7)
    {
      CFStringAppend(MutableCopy, CFSTR("(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH '"));
      if (ABTokenListGetCount((uint64_t)v18) >= 1)
      {
        v59 = RecordID;
        v33 = 0;
        do
        {
          if (v33)
            CFStringAppend(MutableCopy, CFSTR(" AND "));
          CFStringAppend(MutableCopy, CFSTR("("));
          v34 = 0;
          while (1)
          {
            do
            {
              CFStringAppend(MutableCopy, gFTSearchNameOnlyProperties[v34]);
              CFStringAppend(MutableCopy, CFSTR(":' || ? || '"));
              ++v34;
            }
            while (!(_DWORD)v34);
            if ((_DWORD)v34 == 14)
              break;
            CFStringAppend(MutableCopy, CFSTR(" OR "));
          }
          CFStringAppend(MutableCopy, CFSTR(")"));
          ++v33;
        }
        while (ABTokenListGetCount((uint64_t)v18) > v33);
        RecordID = v59;
      }
      v35 = CFSTR(" ')");
    }
    else
    {
      v35 = CFSTR("(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH ?) ");
    }
    CFStringAppend(MutableCopy, v35);
    if (v60)
      v36 = CFSTR(" ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort");
    else
      v36 = CFSTR(" ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort");
    CFStringAppend(MutableCopy, v36);
    CFStringAppend(MutableCopy, CFSTR(";"));
    CPRecordStoreGetDatabase();
    v37 = CPSqliteDatabaseStatementForReading();
    v38 = (_QWORD *)recordStoreContext(a1);
    if (v38)
      v38 = (_QWORD *)*v38;
    ABRegulatoryLogReadContactsData((uint64_t)v38);
    CFRelease(MutableCopy);
    if (v37)
    {
      v27 = *(sqlite3_stmt **)(v37 + 8);
      if (!v27)
      {
LABEL_66:
        MutableCopy = 0;
        goto LABEL_67;
      }
      if ((v31 & 1) != 0)
      {
        if (RecordID == -1)
        {
          if (!a3)
          {
            v41 = 1;
            goto LABEL_54;
          }
          v57 = _ABCCreateUTF8StringFromCFString(a3);
          sqlite3_bind_text(v27, 1, (const char *)v57, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
LABEL_53:
          v41 = 2;
LABEL_54:
          v42 = *(sqlite3_stmt **)(v37 + 8);
          if (a7)
          {
            if (ABTokenListGetCount((uint64_t)v18) >= 1)
            {
              v43 = 0;
              v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
              v45 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
              do
              {
                Mutable = CFStringCreateMutable(v44, 0);
                TokenAtIndex = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v18, v43);
                CFStringAppend(Mutable, CFSTR("##&"));
                CFStringAppend(Mutable, TokenAtIndex);
                CFStringAppend(Mutable, CFSTR("* "));
                for (i = 0; i != 14; ++i)
                {
                  v49 = _ABCCreateUTF8StringFromCFString(Mutable);
                  sqlite3_bind_text(v42, v41 + i, (const char *)v49, -1, v45);
                }
                CFRelease(Mutable);
                ++v43;
                v41 += 14;
              }
              while (ABTokenListGetCount((uint64_t)v18) > v43);
            }
          }
          else
          {
            v50 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0);
            Count = ABTokenListGetCount((uint64_t)v18);
            if (Count >= 1)
            {
              v52 = Count;
              for (j = 0; j != v52; ++j)
              {
                v54 = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v18, j);
                CFStringAppend(v50, CFSTR("##&"));
                CFStringAppend(v50, v54);
                CFStringAppend(v50, CFSTR("* "));
              }
            }
            v55 = _ABCCreateUTF8StringFromCFString(v50);
            sqlite3_bind_text(v42, v41, (const char *)v55, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
            CFRelease(v50);
          }
          v27 = (sqlite3_stmt *)CPRecordStoreProcessStatementWithPropertyIndices();
          CPSqliteStatementReset();
          goto LABEL_66;
        }
        v39 = *(sqlite3_stmt **)(v37 + 8);
        v40 = RecordID;
      }
      else
      {
        v39 = *(sqlite3_stmt **)(v37 + 8);
        v40 = v30;
      }
      sqlite3_bind_int(v39, 1, v40);
      goto LABEL_53;
    }
    goto LABEL_74;
  }
LABEL_75:
  v27 = 0;
  if (v18)
    goto LABEL_67;
LABEL_68:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v27;
}

sqlite3_stmt *ABCDBCopyArrayOfAllPeopleMatchingString(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, const void *a5, const void *a6)
{
  return ABCIteratePeopleMatchingStringWithCustomQueryPrefix(a1, a2, a4, a5, a6, a3, 0, 0, 0, 0, 0);
}

void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7, uint64_t a8, uint64_t a9)
{
  const __CFArray **v10;
  const __CFArray **v11;
  const __CFArray **v12;
  uint64_t *v16;
  uint64_t v17;
  uint64_t SearchCollator;
  __CFStringTokenizer *WordTokenizer;
  const __CFArray *v20;
  const __CFArray *v21;
  __CFString *ColumnListWithAliasAndExtraColumns;
  int v23;
  __CFString *v24;
  BOOL v25;
  int v26;
  const __CFString *v27;
  const __CFString *v28;
  __CFString *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const __CFAllocator *v39;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v41;
  const __CFArray *v42;
  uint64_t v43;
  _QWORD *v44;
  const __CFDictionary *v45;
  CFIndex v46;
  CFMutableArrayRef *v47;
  const void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  signed int v58;
  const __CFDictionary *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const __CFArray *v64;
  CFIndex v65;
  BOOL v66;
  int v67;
  const void *ValueAtIndex;
  CFMutableStringRef v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const __CFArray **v90;
  const __CFArray **v91;
  int v92;
  void *value;
  const __CFArray **v94;
  CFIndex Count;
  __CFString *v96;
  __CFString *v97;
  const __CFArray *v98;
  int v99;
  const __CFArray *theArray;
  unsigned int v102;
  CFMutableArrayRef v103;
  CFMutableArrayRef v104;
  CFArrayRef v105;
  uint64_t v106;
  uint64_t v107;
  CFTypeRef v108;
  int v109;
  __CFArray *v110;
  uint64_t v111;

  v10 = a7;
  v11 = a6;
  v12 = a5;
  v110 = 0;
  v111 = 0;
  v109 = 1;
  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  v16 = (uint64_t *)recordStoreContext(a1);
  if (v16)
    v17 = *v16;
  else
    v17 = 0;
  SearchCollator = ABAddressBookGetSearchCollator(v17);
  WordTokenizer = ABAddressBookGetWordTokenizer(v17);
  if (SearchCollator)
  {
    if (WordTokenizer)
    {
      v20 = ABCCreateArrayOfTokenizationsBySeparatingWordsInCompositeName(WordTokenizer, a2, 1);
      if (v20)
      {
        v21 = v20;
        if (CFArrayGetCount(v20) < 1)
        {
          v98 = v21;
          v29 = 0;
          v30 = 0;
          theArray = 0;
          v31 = 0;
LABEL_87:
          if (ABLogContactsSearch())
          {
            if (ABDiagnosticsEnabled())
            {
              ABPersonNameForProperty(a4);
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4461, 0, (uint64_t)CFSTR("Searching for %@ with property %i (%@):"), v61, v62, v63, (uint64_t)a2);
            }
            v97 = v29;
            v64 = theArray;
            if (v31 && CFArrayGetCount(v31) >= 1)
            {
              if (CFArrayGetCount(v31) >= 1)
              {
                v65 = 0;
                if (v30)
                  v66 = theArray == 0;
                else
                  v66 = 1;
                v67 = !v66;
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v31, v65);
                  v69 = ABPersonCopyCompositeName(ValueAtIndex);
                  v70 = ABDiagnosticsEnabled();
                  if (v67)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v64, v65);
                      CFArrayGetValueAtIndex(v30, v65);
                      v64 = theArray;
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4467, 0, (uint64_t)CFSTR("%@ (%i) - %@ (%i)"), v71, v72, v73, (uint64_t)v69);
                    }
                  }
                  else if (v30)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v30, v65);
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4469, 0, (uint64_t)CFSTR("%@ (%i) - identifier %i"), v74, v75, v76, (uint64_t)v69);
                    }
                  }
                  else if (v64)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v64, v65);
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4471, 0, (uint64_t)CFSTR("%@ (%i) - %@"), v77, v78, v79, (uint64_t)v69);
                    }
                  }
                  else if (v70)
                  {
                    ABRecordGetRecordID(ValueAtIndex);
                    _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4473, 0, (uint64_t)CFSTR("%@ (%i)"), v80, v81, v82, (uint64_t)v69);
                  }
                  if (v69)
                    CFRelease(v69);
                  ++v65;
                }
                while (v65 < CFArrayGetCount(v31));
              }
            }
            else if (ABDiagnosticsEnabled())
            {
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4478, 0, (uint64_t)CFSTR("No results found."), v83, v84, v85, v89);
            }
            v29 = v97;
            if (ABDiagnosticsEnabled())
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4480, 0, (uint64_t)CFSTR("------"), v86, v87, v88, v89);
          }
          if (v12)
          {
            *v12 = v31;
          }
          else if (v31)
          {
            CFRelease(v31);
          }
          if (v11)
            *v11 = v30;
          v21 = v98;
          if (v10)
            *v10 = theArray;
          goto LABEL_126;
        }
        v108 = 0;
        ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
        v23 = a4;
        v24 = ColumnListWithAliasAndExtraColumns;
        v99 = v23;
        v25 = v23 < 0 || v11 == 0;
        v26 = !v25;
        if (v25)
        {
          v28 = CFSTR(" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE");
        }
        else
        {
          if (v10)
            v27 = CFSTR(", identifier, abv.value, abv.label");
          else
            v27 = CFSTR(", identifier");
          CFStringAppend(ColumnListWithAliasAndExtraColumns, v27);
          v28 = CFSTR(" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID JOIN ABMultiValue abv ON abp.ROWID = abv.record_id WHERE");
        }
        CFStringAppend(v24, v28);
        if (!a1)
        {
          v29 = v24;
          goto LABEL_126;
        }
        appendTokenizations(a2, v21, SearchCollator, v24, &v110, &v111, 0, 0);
        v29 = v24;
        if (v111 < 1)
        {
          v98 = v21;
          v30 = 0;
          theArray = 0;
          v31 = 0;
          a4 = v99;
LABEL_85:
          if (v108)
            CFRelease(v108);
          goto LABEL_87;
        }
        v106 = a8;
        v107 = a9;
        CPRecordStoreGetDatabase();
        v32 = CPSqliteDatabaseConnectionForWriting();
        if (a8)
          v33 = v32 == 0;
        else
          v33 = 1;
        v34 = !v33;
        v92 = v34;
        a4 = v99;
        if (!v33)
          CPSqliteConnectionEnableProgressHandlerCallback();
        if (v26)
          CFStringAppend(v29, CFSTR(" AND abv.property+0 = ?"));
        if (a3)
          v35 = CFSTR(" ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort");
        else
          v35 = CFSTR(" ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort");
        CFStringAppend(v29, v35);
        if (v11)
          CFStringAppend(v29, CFSTR(", record_id, identifier"));
        CFStringAppend(v29, CFSTR(";"));
        v96 = v29;
        v36 = CPSqliteConnectionStatementForSQL();
        if (v36)
        {
          v37 = v36;
          if (*(_QWORD *)(v36 + 8))
          {
            bindTokenizations(v36, v110, &v109);
            v98 = v21;
            if (!v11)
            {
              v31 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
              CPSqliteStatementReset();
              v30 = 0;
              theArray = 0;
              v29 = v96;
LABEL_83:
              if (v92)
                CPSqliteConnectionDisableProgressHandlerCallback();
              goto LABEL_85;
            }
            v94 = v12;
            v38 = v109;
            sqlite3_bind_int(*(sqlite3_stmt **)(v37 + 8), v109, v99);
            v109 = v38 + 1;
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
            if (Mutable)
            {
              v30 = Mutable;
              v103 = Mutable;
              if (v10)
              {
                v41 = CFArrayCreateMutable(v39, 0, MEMORY[0x1E0C9B378]);
                if (!v41)
                  goto LABEL_54;
                v42 = v41;
                v104 = v41;
                v105 = CFArrayCreateMutable(v39, 0, 0);
                if (!v105)
                  goto LABEL_54;
              }
              else
              {
                v42 = 0;
                v104 = 0;
                v105 = 0;
              }
              theArray = v42;
              v31 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
              CPSqliteStatementReset();
              v29 = v96;
              if (v10)
              {
                CPRecordStoreGetDatabase();
                v43 = CPSqliteDatabaseStatementForReading();
                v44 = (_QWORD *)recordStoreContext(a1);
                if (v44)
                  v44 = (_QWORD *)*v44;
                ABRegulatoryLogReadContactsData((uint64_t)v44);
                v45 = CFDictionaryCreateMutable(v39, 0, 0, MEMORY[0x1E0C9B3A0]);
                if (v43)
                {
                  CPSqliteStatementSendResults();
                  CPSqliteStatementReset();
                  CPSqliteDatabaseReleaseSqliteStatement();
                }
                if (v45)
                {
                  v90 = v10;
                  Count = CFArrayGetCount(v31);
                  if (Count >= 1)
                  {
                    v46 = 0;
                    v47 = 0;
                    v48 = 0;
                    v91 = v11;
                    do
                    {
                      v49 = CFArrayGetValueAtIndex(v31, v46);
                      v57 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
                      if ((v57 - 262) <= 0xFFFFFFFD)
                      {
                        v102 = 0;
                        v102 = CFArrayGetValueAtIndex(v30, v46);
                        value = (void *)CFArrayGetValueAtIndex(theArray, v46);
                        v58 = CFArrayGetValueAtIndex(v105, v46);
                        v59 = v45;
                        v60 = CFDictionaryGetValue(v45, (const void *)v58);
                        if (v49 == v48)
                        {
                          if (v47)
                            ABCMultiValueInsertAndCreateIdentifier(v47, value, v60, 0, 0, (int *)&v102, 0);
                        }
                        else
                        {
                          if (v47)
                          {
                            ABCRecordSetContents();
                            CFRelease(v47);
                          }
                          if (CPRecordGetCachedProperty())
                          {
                            v47 = 0;
                          }
                          else
                          {
                            v47 = (CFMutableArrayRef *)ABCMultiValueCreateMutable(v57);
                            ABCMultiValueInsertAndCreateIdentifier(v47, value, v60, 0, 0, (int *)&v102, 0);
                          }
                          v11 = v91;
                        }
                        v45 = v59;
                        a4 = v99;
                      }
                      ++v46;
                      v48 = v49;
                    }
                    while (Count != v46);
                    if (v47)
                    {
                      ABMultiValueSetImmutable((uint64_t)v47, v50, v51, v52, v53, v54, v55, v56, v89);
                      ABCRecordSetContents();
                      CFRelease(v47);
                    }
                  }
                  CFRelease(v45);
                  v10 = v90;
                  v29 = v96;
                }
              }
              if (v105)
                CFRelease(v105);
              v12 = v94;
              goto LABEL_83;
            }
          }
        }
        else
        {
          CFShow(CFSTR("error"));
        }
LABEL_54:
        v29 = v96;
LABEL_126:
        CFRelease(v21);
        if (v110)
          releaseTokenizationSortKeys(v110);
        if (v29)
          CFRelease(v29);
      }
    }
  }
}

uint64_t _copyPeopleAndMultiValuePropertiesCancellationCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))a2)(*(_QWORD *)(a2 + 8));
}

uint64_t ABCDBContextCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFArray **a2)
{
  __CFArray *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const unsigned __int8 *v9;
  CFStringRef v10;
  int v11;

  v4 = *a2;
  v5 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  v6 = v5 - 1;
  if (a2[1])
  {
    v7 = v5;
    v8 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v6);
    CFArrayAppendValue(a2[2], (const void *)v8);
    v9 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v7 - 2);
    if (v9)
      v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v9, 0x8000100u);
    else
      v10 = &stru_1E3CA4E68;
    CFArrayAppendValue(a2[1], v10);
    CFRelease(v10);
    v6 = v7 - 3;
  }
  v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v6);
  CFArrayAppendValue(v4, (const void *)v11);
  return 2;
}

void ABCDBContextCopyArrayOfPhoneNumbersLabelAndPeopleInRange(uint64_t a1, int a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  __CFString *ColumnListWithAliasAndExtraColumns;
  uint64_t v13;
  _QWORD *v14;
  sqlite3_stmt *v15;
  const void *v16;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  CFStringAppend(ColumnListWithAliasAndExtraColumns, CFSTR(", abv.value, abl.value from ABPerson abp JOIN ABMultiValue abv ON abp.ROWID = abv.record_id LEFT OUTER JOIN ABMultiValueLabel abl ON abv.label = abl.ROWID WHERE abv.property = ? LIMIT ? OFFSET ?;"));
  CFDictionaryGetCount(0);
  CPRecordStoreGetDatabase();
  v13 = CPSqliteDatabaseStatementForReading();
  v14 = (_QWORD *)recordStoreContext(a1);
  if (v14)
    v14 = (_QWORD *)*v14;
  ABRegulatoryLogReadContactsData((uint64_t)v14);
  CFRelease(ColumnListWithAliasAndExtraColumns);
  if (v13 && (v15 = *(sqlite3_stmt **)(v13 + 8)) != 0)
  {
    sqlite3_bind_int(v15, 1, kABPersonPhoneProperty);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 3, a2);
    v16 = (const void *)CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    v16 = 0;
  }
  if (v16)
  {
    if (CFArrayGetCount((CFArrayRef)v16) < 1)
    {
      CFRelease(v16);
    }
    else
    {
      *a6 = v16;
      *a4 = 0;
      *a5 = 0;
    }
  }
}

uint64_t phoneNumbersAndLabelRowHandler(uint64_t a1, uint64_t a2)
{
  const unsigned __int8 *v4;
  CFStringRef v5;
  const unsigned __int8 *v6;
  CFStringRef v7;

  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!*(_QWORD *)(a2 + 16))
    *(_QWORD *)(a2 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)a2);
  v5 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v5);
  CFRelease(v5);
  v6 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)a2 + 1);
  if (v6)
  {
    v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v7);
    CFRelease(v7);
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), (const void *)*MEMORY[0x1E0C9B0D0]);
  }
  return 2;
}

uint64_t multivalueSearchRowHandlerWithLabels(uint64_t a1, __CFArray ***a2)
{
  multivalueSearchRowHandlerIncludingLabels(a1, a2, 1);
  return 0;
}

uint64_t _PersonUIDWithValueForMultivalueProperty(uint64_t a1, int a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  sqlite3_stmt *v10;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v13;
  CFIndex usedBufLen;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[7];
  CFRange v21;

  v20[6] = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v16 = 0u;
  v17 = 0u;
  usedBufLen = 0;
  CPRecordStoreGetDatabase();
  v8 = CPSqliteDatabaseStatementForReading();
  v9 = (_QWORD *)recordStoreContext(a1);
  if (v9)
    v9 = (_QWORD *)*v9;
  ABRegulatoryLogReadContactsData((uint64_t)v9);
  if (!v8)
    return 0;
  v10 = *(sqlite3_stmt **)(v8 + 8);
  if (!v10)
    return 0;
  sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, a2);
  Length = CFStringGetLength(a3);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v13 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xD2C98143uLL);
  v21.location = 0;
  v21.length = Length;
  CFStringGetBytes(a3, v21, 0x8000100u, 0, 0, v13, MaximumSizeForEncoding, &usedBufLen);
  v13[usedBufLen] = 0;
  sqlite3_bind_text(v10, 2, (const char *)v13, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  v20[0] = 0;
  v20[1] = ABCDBContextFindMultivalueSetter;
  v20[2] = &v19;
  v20[3] = 1;
  v20[4] = ABCDBContextFindMultivalueSetter;
  v20[5] = a4;
  *(_QWORD *)&v17 = v20;
  DWORD2(v17) = 2;
  v18 = 0;
  CPSqliteStatementSendResults();
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return v19;
}

uint64_t ABCDBContextFindMultivalueSetter(uint64_t a1, _DWORD *a2, int a3)
{
  if (a2)
    *a2 = a3;
  return 1;
}

uint64_t ABCDBContextFindMultivalueCallback()
{
  CPSqliteStatementApplyValuesFromRecord();
  return 1;
}

CFMutableArrayRef ABCDBContextCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef *v4;
  CFStringRef v5;
  uint64_t v6;
  _QWORD *v7;
  CFMutableArrayRef Mutable;

  CPRecordStoreGetDatabase();
  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((_DWORD)a2 == -1)
    v5 = CFSTR("SELECT value FROM ABMultiValueLabel;");
  else
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("select mvl.value from ABMultiValueLabel mvl where ROWID in (select distinct label from ABMultiValue WHERE property = %i);"),
           a2);
  v6 = CPSqliteDatabaseStatementForReading();
  v7 = (_QWORD *)recordStoreContext(a1);
  if (v7)
    v7 = (_QWORD *)*v7;
  ABRegulatoryLogReadContactsData((uint64_t)v7);
  if ((_DWORD)a2 != -1)
    CFRelease(v5);
  if (!v6)
    return 0;
  Mutable = CFArrayCreateMutable(*v4, 0, MEMORY[0x1E0C9B378]);
  CPSqliteStatementSendResults();
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return Mutable;
}

uint64_t addStringToArray(uint64_t a1, __CFArray *a2)
{
  const unsigned __int8 *v3;
  CFStringRef v4;

  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v3, 0x8000100u);
  CFArrayAppendValue(a2, v4);
  CFRelease(v4);
  return 0;
}

uint64_t ABCDBContextDeleteLabel(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v8;
  uint64_t v9;
  uint64_t v10;
  __CFDictionary *v11;
  CFIndex usedBufLen;
  CFRange v13;

  CPRecordStoreGetDatabase();
  result = CPSqliteDatabaseStatementForWriting();
  if (a1)
  {
    v5 = result;
    if (result)
    {
      if (*(_QWORD *)(result + 8))
      {
        usedBufLen = 0;
        Length = CFStringGetLength(a2);
        MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x91BC3E45uLL);
        v13.location = 0;
        v13.length = Length;
        CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen);
        v8[usedBufLen] = 0;
        sqlite3_bind_text(*(sqlite3_stmt **)(v5 + 8), 1, (const char *)v8, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
        v9 = recordStoreContext(a1);
        if (v9)
        {
          if (*(_QWORD *)v9)
            *(_DWORD *)(*(_QWORD *)v9 + 376) |= 0x1C000u;
        }
      }
      v10 = recordStoreContext(a1);
      if (v10)
      {
        v11 = *(__CFDictionary **)(v10 + 8);
        if (v11)
          CFDictionaryRemoveValue(v11, a2);
      }
      return CPRecordStoreInvalidateCachedInstancesOfClass();
    }
  }
  return result;
}

uint64_t _clearCachedMultivalues()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = ABCPersonClass;
  if (*((int *)ABCPersonClass + 18) >= 1)
  {
    v1 = 0;
    v2 = 32;
    do
    {
      if ((*(_BYTE *)(*((_QWORD *)v0 + 10) + v2 + 1) & 1) != 0)
      {
        CPRecordUnloadProperty();
        v0 = ABCPersonClass;
      }
      ++v1;
      v2 += 40;
    }
    while (v1 < *((int *)v0 + 18));
  }
  return 0;
}

void ABCDBContextMultiValueWillChange(const void *a1, int a2, uint64_t a3)
{
  int ID;
  int v7;
  uint64_t CachedProperty;
  CFArrayRef *v9;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  CFIndex v13;
  ABPropertyID v14;
  int IdentifierAtIndex;
  CFIndex v16;
  __CFArray *v17;
  const CFArrayCallBacks *v18;
  CFMutableArrayRef Mutable;
  CFTypeRef v20;
  CFArrayRef *v21;
  uint64_t Store;
  void *v23;
  void *value;

  if (!a1)
    return;
  ID = CPRecordGetID();
  if (ID == -1)
    return;
  v7 = ID;
  Store = CPRecordGetStore();
  if (!Store)
    return;
  CachedProperty = CPRecordGetCachedProperty();
  v9 = (CFArrayRef *)CachedProperty;
  if (CachedProperty)
  {
    Count = ABCMultiValueGetCount(CachedProperty);
    if (a3)
    {
LABEL_6:
      v11 = ABCMultiValueGetCount(a3);
      goto LABEL_9;
    }
  }
  else
  {
    Count = 0;
    if (a3)
      goto LABEL_6;
  }
  v11 = 0;
LABEL_9:
  if (Count >= 1)
  {
    v12 = 0;
    v13 = 0;
    v23 = (void *)a2;
    value = (void *)v7;
    v14 = kABPersonInternalUUIDProperty;
    do
    {
      IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)v9, v13);
      if (v11 < 1)
      {
LABEL_15:
        if (!v12)
        {
          v12 = recordStoreContext(Store);
          if (!v12)
            return;
        }
        v17 = *(__CFArray **)(v12 + 24);
        if (!v17)
        {
          *(_QWORD *)(v12 + 24) = CFArrayCreateMutable(0, 0, 0);
          *(_QWORD *)(v12 + 32) = CFArrayCreateMutable(0, 0, 0);
          *(_QWORD *)(v12 + 40) = CFArrayCreateMutable(0, 0, 0);
          v18 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          *(_QWORD *)(v12 + 48) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          Mutable = CFArrayCreateMutable(0, 0, v18);
          *(_QWORD *)(v12 + 56) = Mutable;
          v17 = *(__CFArray **)(v12 + 24);
          if (!v17 || !*(_QWORD *)(v12 + 32) || !*(_QWORD *)(v12 + 40) || !*(_QWORD *)(v12 + 48) || !Mutable)
            return;
        }
        CFArrayAppendValue(v17, value);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 32), v23);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 40), (const void *)IdentifierAtIndex);
        v20 = ABRecordCopyValue(a1, v14);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 48), v20);
        CFRelease(v20);
        v21 = ABCMultiValueCopyUUIDAtIndex(v9, v13);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 56), v21);
        CFRelease(v21);
      }
      else
      {
        v16 = 0;
        while (IdentifierAtIndex != ABCMultiValueGetIdentifierAtIndex(a3, v16))
        {
          if (v11 == ++v16)
            goto LABEL_15;
        }
      }
      ++v13;
    }
    while (v13 != Count);
  }
}

void ABCDBContextLogChangeForPerson(uint64_t a1, ABRecordRef record, unsigned int a3)
{
  ABRecordID RecordID;
  CFTypeRef v7;

  if (record)
  {
    RecordID = ABRecordGetRecordID(record);
    v7 = ABRecordCopyValue(record, kABPersonInternalUUIDProperty);
    _appendToPersonChangeHistory(a1, a3, RecordID, (uint64_t)v7, 0, 0);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    _appendToPersonChangeHistory(a1, a3, -1, 0, 0, 0);
  }
}

void _appendToPersonChangeHistory(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  __CFArray *v12;
  const CFArrayCallBacks *v13;
  CFMutableArrayRef Mutable;
  __CFArray *v15;
  uint64_t v16;
  const void *v17;
  __CFArray *v18;
  const void *v19;
  __CFArray *v20;
  const void *v21;

  if (a1)
  {
    v11 = recordStoreContext(a1);
    v12 = *(__CFArray **)(v11 + 64);
    if (v12)
      goto LABEL_8;
    *(_QWORD *)(v11 + 64) = CFArrayCreateMutable(0, 0, 0);
    *(_QWORD *)(v11 + 72) = CFArrayCreateMutable(0, 0, 0);
    v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    *(_QWORD *)(v11 + 80) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v11 + 88) = CFArrayCreateMutable(0, 0, v13);
    Mutable = CFArrayCreateMutable(0, 0, v13);
    *(_QWORD *)(v11 + 96) = Mutable;
    v12 = *(__CFArray **)(v11 + 64);
    if (v12)
    {
      if (*(_QWORD *)(v11 + 72) && *(_QWORD *)(v11 + 80) && *(_QWORD *)(v11 + 88) && Mutable)
      {
LABEL_8:
        CFArrayAppendValue(v12, (const void *)a3);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 72), (const void *)a2);
        v15 = *(__CFArray **)(v11 + 80);
        v16 = *MEMORY[0x1E0D13878];
        v17 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t))(*MEMORY[0x1E0D13878] + 16))(*MEMORY[0x1E0D13878], a4);
        CFArrayAppendValue(v15, v17);
        v18 = *(__CFArray **)(v11 + 88);
        v19 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v16, a5);
        CFArrayAppendValue(v18, v19);
        v20 = *(__CFArray **)(v11 + 96);
        v21 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v16, a6);
        CFArrayAppendValue(v20, v21);
      }
    }
  }
}

void ABCDBContextLogChangeForUnifiedPerson(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _appendToPersonChangeHistory(a1, a3, -1, a2, 0, 0);
}

void ABCDBContextLogChangeForLinkingPersons(uint64_t a1, ABRecordRef record, const void *a3, uint64_t a4)
{
  ABRecordID RecordID;
  ABPropertyID v9;
  CFTypeRef v10;
  CFTypeRef v11;

  RecordID = ABRecordGetRecordID(record);
  v9 = kABPersonInternalUUIDProperty;
  v10 = ABRecordCopyValue(record, kABPersonInternalUUIDProperty);
  v11 = ABRecordCopyValue(a3, v9);
  _appendToPersonChangeHistory(a1, 6u, RecordID, (uint64_t)v10, (uint64_t)v11, a4);
  CFRelease(v10);
  CFRelease(v11);
}

void ABCDBContextSaveCallback(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  CFArrayRef *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex i;
  int ValueAtIndex;
  int v11;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  sqlite3_stmt *v15;
  UInt8 *v16;
  sqlite3_stmt *v17;
  void (__cdecl *v18)(void *);
  sqlite3_stmt *v19;
  UInt8 *v20;
  FILE *v21;
  int v22;
  const char *v23;
  FILE *v24;
  int v25;
  const char *v26;
  const __CFString *v27;
  const __CFArray *v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  int v33;
  int v34;
  const void *v35;
  void *v36;
  const void *v37;
  void *v38;
  const void *v39;
  void *v40;
  CFArrayRef v41;
  CFArrayRef v42;
  CFIndex Count;
  uint64_t v44;

  if (a1)
  {
    if (a2)
    {
      Context = CPRecordStoreGetContext();
      if (Context)
      {
        v5 = (CFArrayRef *)Context;
        v44 = a2;
        v6 = CPRecordStoreGetLastSequenceNumber() + 1;
        if (v5[3] && ABChangeHistoryHasSyncAgentClient(a1))
        {
          v7 = CPSqliteConnectionStatementForSQL();
          if (v7)
          {
            v8 = v7;
            Count = CFArrayGetCount(v5[3]);
            if (Count >= 1)
            {
              for (i = 0; i != Count; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v5[3], i);
                v11 = CFArrayGetValueAtIndex(v5[4], i);
                v12 = CFArrayGetValueAtIndex(v5[5], i);
                v13 = (const __CFString *)CFArrayGetValueAtIndex(v5[6], i);
                v14 = (const __CFString *)CFArrayGetValueAtIndex(v5[7], i);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, ValueAtIndex);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, v11);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 3, v12);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 4, v6);
                v15 = *(sqlite3_stmt **)(v8 + 8);
                v16 = _ABCCreateUTF8StringFromCFString(v13);
                v17 = v15;
                v18 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
                sqlite3_bind_text(v17, 5, (const char *)v16, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
                v19 = *(sqlite3_stmt **)(v8 + 8);
                v20 = _ABCCreateUTF8StringFromCFString(v14);
                sqlite3_bind_text(v19, 6, (const char *)v20, -1, v18);
                if (CPSqliteStatementPerform() != 101)
                {
                  v21 = (FILE *)*MEMORY[0x1E0C80C10];
                  v22 = sqlite3_errcode(*(sqlite3 **)(v44 + 8));
                  v23 = sqlite3_errmsg(*(sqlite3 **)(v44 + 8));
                  fprintf(v21, "Error %d performing multivalue delete log statement: %s\n", v22, v23);
                }
                CPSqliteStatementReset();
              }
            }
          }
          else
          {
            v24 = (FILE *)*MEMORY[0x1E0C80C10];
            v25 = sqlite3_errcode(*(sqlite3 **)(v44 + 8));
            v26 = sqlite3_errmsg(*(sqlite3 **)(v44 + 8));
            fprintf(v24, "Error %d preparing multivalue delete log statement: %s\n", v25, v26);
          }
        }
        v27 = (const __CFString *)*((_QWORD *)*v5 + 43);
        if (!v27)
        {
          v27 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
          if (!v27)
            v27 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
        }
        ABChangeHistoryAssociateSequenceNumberWithClient(*((double *)*v5 + 44), v44, v6, v27);
        v28 = v5[8];
        if (v28)
        {
          v29 = CFArrayGetCount(v28);
          if (v29 >= 1)
          {
            v30 = v29;
            v31 = 0;
            v32 = *MEMORY[0x1E0D13880];
            do
            {
              v33 = CFArrayGetValueAtIndex(v5[8], v31);
              v34 = CFArrayGetValueAtIndex(v5[9], v31);
              v35 = CFArrayGetValueAtIndex(v5[10], v31);
              v36 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v32 + 16))(v32, v35);
              v37 = CFArrayGetValueAtIndex(v5[11], v31);
              v38 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v32 + 16))(v32, v37);
              v39 = CFArrayGetValueAtIndex(v5[12], v31);
              v40 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v32 + 16))(v32, v39);
              ABChangeHistoryInsertPersonChangeRecord(a1, v33, v34, v6, 0, 0, -1, -1, v36, v38, v40);
              ++v31;
            }
            while (v30 != v31);
          }
        }
        v41 = v5[3];
        if (v41)
        {
          CFRelease(v41);
          v5[3] = 0;
          CFRelease(v5[4]);
          v5[4] = 0;
          CFRelease(v5[5]);
          v5[5] = 0;
          CFRelease(v5[6]);
          v5[6] = 0;
          CFRelease(v5[7]);
          v5[7] = 0;
        }
        v42 = v5[8];
        if (v42)
        {
          CFRelease(v42);
          v5[8] = 0;
          CFRelease(v5[9]);
          v5[9] = 0;
          CFRelease(v5[10]);
          v5[10] = 0;
          CFRelease(v5[11]);
          v5[11] = 0;
          CFRelease(v5[12]);
          v5[12] = 0;
        }
      }
    }
  }
}

uint64_t *ABCDBContextPreCommitSaveCallback(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (result)
  {
    if (a2)
    {
      v2 = (uint64_t)result;
      result = (uint64_t *)CPRecordStoreGetContext();
      if (result)
      {
        result = (uint64_t *)recordStoreContext(v2);
        if (result)
        {
          v3 = *result;
          if (*result)
          {
            if ((*(_DWORD *)(v3 + 376) & 0x7E000) != 0)
            {
              result = (uint64_t *)CPRecordStoreGetLastSequenceNumber();
              v4 = *(_DWORD *)(v3 + 376);
              if ((v4 & 0x4000) != 0)
              {
                result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
                v4 = *(_DWORD *)(v3 + 376) & 0xFFFFBFFF;
                *(_DWORD *)(v3 + 376) = v4;
                if ((v4 & 0x8000) == 0)
                {
LABEL_9:
                  if ((v4 & 0x10000) == 0)
                    goto LABEL_10;
                  goto LABEL_17;
                }
              }
              else if ((v4 & 0x8000) == 0)
              {
                goto LABEL_9;
              }
              result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              v4 = *(_DWORD *)(v3 + 376) & 0xFFFF7FFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x10000) == 0)
              {
LABEL_10:
                if ((v4 & 0x2000) == 0)
                  goto LABEL_11;
                goto LABEL_18;
              }
LABEL_17:
              result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              v4 = *(_DWORD *)(v3 + 376) & 0xFFFEFFFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x2000) == 0)
              {
LABEL_11:
                if ((v4 & 0x20000) == 0)
                  goto LABEL_12;
                goto LABEL_19;
              }
LABEL_18:
              result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              v4 = *(_DWORD *)(v3 + 376) & 0xFFFFDFFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x20000) == 0)
              {
LABEL_12:
                if ((v4 & 0x40000) == 0)
                  return result;
                goto LABEL_13;
              }
LABEL_19:
              result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              v5 = *(_DWORD *)(v3 + 376) & 0xFFFDFFFF;
              *(_DWORD *)(v3 + 376) = v5;
              if ((v5 & 0x40000) == 0)
                return result;
LABEL_13:
              result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              *(_DWORD *)(v3 + 376) &= ~0x40000u;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCDBContextGetMultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer(uint64_t a1, int a2, int a3, const char *a4, __CFArray **a5, __CFArray **a6, __CFArray **a7, CFMutableArrayRef *a8, CFMutableArrayRef *a9)
{
  uint64_t v9;
  const __CFAllocator *v15;
  __CFString *Mutable;
  BOOL v17;
  int v18;
  BOOL v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  sqlite3_stmt *v24;
  const CFArrayCallBacks *v25;
  __CFArray *v26;
  int v27;
  __CFArray *v28;
  int v29;
  __CFArray *v30;
  int v31;
  const unsigned __int8 *v32;
  CFStringRef v33;
  const unsigned __int8 *v34;
  CFStringRef v35;
  CFMutableArrayRef *v37;

  v9 = 0xFFFFFFFFLL;
  if (a1 && a5 && a6 && a7 && CPRecordStoreGetDatabase())
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CFStringAppend(Mutable, CFSTR("SELECT ROWID, record_id, property_id, identifier, sequence_number"));
    v37 = a8;
    if (a8)
      v17 = a9 == 0;
    else
      v17 = 1;
    v18 = !v17;
    if (!v17)
      CFStringAppend(Mutable, CFSTR(", record_uid, identifier_uid"));
    CFStringAppend(Mutable, CFSTR(" FROM ABPersonMultiValueDeletes"));
    v20 = a2 == -1 || a3 == -1 || a4 == 0;
    v21 = !v20;
    if (!v20)
      CFStringAppend(Mutable, CFSTR(" WHERE record_id IN (SELECT ROWID FROM ABPerson WHERE StoreID = ?) AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)"));
    CFStringAppend(Mutable, CFSTR(" ORDER BY ROWID ASC;"));
    v22 = CPSqliteDatabaseStatementForReading();
    v23 = (_QWORD *)recordStoreContext(a1);
    if (v23)
      v23 = (_QWORD *)*v23;
    ABRegulatoryLogReadContactsData((uint64_t)v23);
    if (v22 && (v24 = *(sqlite3_stmt **)(v22 + 8)) != 0)
    {
      if (v21)
      {
        sqlite3_bind_int(v24, 1, a2);
        sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 2, a3);
        sqlite3_bind_text(*(sqlite3_stmt **)(v22 + 8), 3, a4, -1, 0);
      }
      *a5 = CFArrayCreateMutable(v15, 0, 0);
      *a6 = CFArrayCreateMutable(v15, 0, 0);
      *a7 = CFArrayCreateMutable(v15, 0, 0);
      if (v18)
      {
        v25 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        *v37 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        *a9 = CFArrayCreateMutable(0, 0, v25);
      }
      if (sqlite3_step(*(sqlite3_stmt **)(v22 + 8)) == 100)
      {
        do
        {
          v26 = *a5;
          v27 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 1);
          CFArrayAppendValue(v26, (const void *)v27);
          v28 = *a6;
          v29 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 2);
          CFArrayAppendValue(v28, (const void *)v29);
          v30 = *a7;
          v31 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 3);
          CFArrayAppendValue(v30, (const void *)v31);
          if (v18)
          {
            v32 = sqlite3_column_text(*(sqlite3_stmt **)(v22 + 8), 5);
            if (v32)
            {
              v33 = CFStringCreateWithCString(0, (const char *)v32, 0x8000100u);
              CFArrayAppendValue(*v37, v33);
              CFRelease(v33);
            }
            v34 = sqlite3_column_text(*(sqlite3_stmt **)(v22 + 8), 6);
            if (v34)
            {
              v35 = CFStringCreateWithCString(0, (const char *)v34, 0x8000100u);
              CFArrayAppendValue(*a9, v35);
              CFRelease(v35);
            }
          }
          v9 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 4);
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v22 + 8)) == 100);
      }
      else
      {
        v9 = 0xFFFFFFFFLL;
      }
      CPSqliteStatementReset();
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v9;
}

sqlite3_stmt *ABCDBContextDeleteMultiValueDeletesInSourceToSequenceNumber(sqlite3_stmt *result, int a2, int a3)
{
  sqlite3_stmt *v5;
  int v6;

  if (result)
  {
    result = (sqlite3_stmt *)CPRecordStoreGetDatabase();
    if (result)
    {
      result = (sqlite3_stmt *)CPSqliteDatabaseStatementForWriting();
      if (result)
      {
        v5 = result;
        result = (sqlite3_stmt *)*((_QWORD *)result + 1);
        if (result)
        {
          sqlite3_bind_int(result, 1, a3);
          if (a2 != -1)
            sqlite3_bind_int(*((sqlite3_stmt **)v5 + 1), 2, a2);
          v6 = CPSqliteStatementPerform();
          CPSqliteStatementReset();
          return (sqlite3_stmt *)(v6 == 101);
        }
      }
    }
  }
  return result;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  CFIndex Count;
  void *v9;
  uint64_t i;
  const __CFString *v11;
  uint64_t v12;

  Count = CFArrayGetCount(theArray);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("ExternalIdentifier IN "));
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      if (i)
        v11 = CFSTR(", ?");
      else
        v11 = CFSTR("(?");
      objc_msgSend(v9, "appendString:", v11);
    }
  }
  objc_msgSend(v9, "appendString:", CFSTR(")"));
  v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, v9, theArray);

  return v12;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, CFSTR("ExternalIdentifier = ?"), a4);
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  CFIndex Count;
  void *v9;
  uint64_t i;
  const __CFString *v11;
  uint64_t v12;

  Count = CFArrayGetCount(theArray);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("ExternalUUID IN "));
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      if (i)
        v11 = CFSTR(", ?");
      else
        v11 = CFSTR("(?");
      objc_msgSend(v9, "appendString:", v11);
    }
  }
  objc_msgSend(v9, "appendString:", CFSTR(")"));
  v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, v9, theArray);

  return v12;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, CFSTR("ExternalUUID = ?"), a4);
}

uint64_t ABCCopyArrayOfAllPeopleWithSortOrdering(uint64_t a1, int a2)
{
  return _ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(a1, (uint64_t)ABCPersonClass, 0, a2);
}

uint64_t _ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  __CFString *SelectPrefix;
  __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  _QWORD *v11;
  sqlite3_stmt *v12;
  UInt8 *v13;
  uint64_t v14;

  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  v8 = SelectPrefix;
  if (a3)
  {
    CFStringAppend(SelectPrefix, CFSTR(" WHERE"));
    CFStringAppend(v8, CFSTR(" outerPerson.StoreID in (select abs.ROWID from ABStore abs, ABAccount aba where abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)"));
  }
  if (a4)
    v9 = CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort");
  else
    v9 = CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort");
  CFStringAppend(v8, v9);
  CFStringAppend(v8, CFSTR(";"));
  v10 = CPSqliteDatabaseStatementForReading();
  v11 = (_QWORD *)recordStoreContext(a1);
  if (v11)
    v11 = (_QWORD *)*v11;
  ABRegulatoryLogReadContactsData((uint64_t)v11);
  CFRelease(v8);
  if (!v10)
    return 0;
  v12 = *(sqlite3_stmt **)(v10 + 8);
  if (!v12)
    return 0;
  if (a3)
  {
    v13 = _ABCCreateUTF8StringFromCFString(a3);
    sqlite3_bind_text(v12, 1, (const char *)v13, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  }
  v14 = CPRecordStoreProcessStatementWithPropertyIndices();
  CPSqliteStatementReset();
  return v14;
}

void ABClearAllInstancesOfClassInSourceWithExternalIdentifier(uint64_t a1, const char **a2, uint64_t a3)
{
  int UniqueId;
  __CFString *Mutable;
  __CFString *v6;
  uint64_t v7;

  if (a3)
    UniqueId = ABCRecordGetUniqueId(a3);
  else
    UniqueId = -1;
  CPRecordStoreGetDatabase();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v6 = Mutable;
    CFStringAppend(Mutable, CFSTR("UPDATE "));
    CFStringAppendCString(v6, *a2, 0x8000100u);
    CFStringAppend(v6, CFSTR(" SET "));
    CFStringAppendCString(v6, "ExternalIdentifier", 0x8000100u);
    CFStringAppend(v6, CFSTR(" = NULL"));
    if (UniqueId != -1)
    {
      CFStringAppend(v6, CFSTR(" WHERE "));
      CFStringAppend(v6, CFSTR("StoreID == ? "));
    }
    CFStringAppend(v6, CFSTR(";"));
    v7 = CPSqliteDatabaseStatementForWriting();
    if (v7)
    {
      if (UniqueId != -1)
        sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 1, UniqueId);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    CFRelease(v6);
  }
}

BOOL ABCDBHasIndexes()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v21;
  int v23;
  int v24;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v24 = CPSqliteConnectionPerformSQL();
  v23 = CPSqliteConnectionPerformSQL();
  v0 = CPSqliteConnectionPerformSQL();
  v1 = CPSqliteConnectionPerformSQL();
  v2 = CPSqliteConnectionPerformSQL();
  v3 = CPSqliteConnectionPerformSQL();
  v4 = CPSqliteConnectionPerformSQL();
  v5 = CPSqliteConnectionPerformSQL();
  v6 = CPSqliteConnectionPerformSQL();
  v7 = CPSqliteConnectionPerformSQL();
  v8 = CPSqliteConnectionPerformSQL();
  v9 = CPSqliteConnectionPerformSQL();
  v21 = v24 != 1
     && v23 != 1
     && v0 != 1
     && v1 != 1
     && v2 != 1
     && v3 != 1
     && v4 != 1
     && v5 != 1
     && v6 != 1
     && v7 != 1
     && v8 != 1
     && v9 != 1;
  CPSqliteDatabaseReleaseSqliteConnection();
  return v21;
}

void ABSqliteGenerateUUID(sqlite3_context *a1)
{
  const __CFAllocator *v2;
  const __CFUUID *v3;
  const __CFUUID *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v9;
  CFIndex usedBufLen;
  CFRange v11;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v3)
  {
    v4 = v3;
    v5 = CFUUIDCreateString(v2, v3);
    if (v5)
    {
      v6 = v5;
      Length = CFStringGetLength(v5);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      usedBufLen = 0;
      v9 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xEBDD1334uLL);
      v11.location = 0;
      v11.length = Length;
      CFStringGetBytes(v6, v11, 0x8000100u, 0, 0, v9, MaximumSizeForEncoding, &usedBufLen);
      v9[usedBufLen] = 0;
      sqlite3_result_text(a1, (const char *)v9, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      CFRelease(v6);
      CFRelease(v4);
      return;
    }
    CFRelease(v4);
  }
  sqlite3_result_null(a1);
}

void ABSqliteRepairUUID(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const char *v5;

  if (a2 == 1
    && (v5 = (const char *)sqlite3_value_text(*a3)) != 0
    && *v5
    && !strnstr(v5, "CNSuggestedContactStore", 0x17uLL))
  {
    sqlite3_result_value(a1, *a3);
  }
  else
  {
    ABSqliteGenerateUUID(a1);
  }
}

void ABSqliteKatakanaExclusively(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v4;
  CFStringRef v5;
  __CFString *v6;
  uint64_t v7;
  _BOOL4 v8;

  if (a2 == 1
    && (v4 = sqlite3_value_text(*a3)) != 0
    && (v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v4, 0x8000100u)) != 0)
  {
    v6 = (__CFString *)v5;
    v7 = ABKatakanaCharacterSet();
    v8 = ABContentsExclusivelyInCharacterSet(v6, v7) != 0;
    sqlite3_result_int(a1, v8);
    CFRelease(v6);
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

void ABSqliteNormalizeDate(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFDateRef v8;
  CFDateRef v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  UInt8 *v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;

  if (ABSqliteNormalizeDate_onceToken != -1)
    dispatch_once(&ABSqliteNormalizeDate_onceToken, &__block_literal_global_1);
  v5 = sqlite3_value_text(*a3);
  if (v5)
  {
    if (*v5)
    {
      v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v5, 0x8000100u);
      if (v6)
      {
        v7 = v6;
        v8 = _ABCCreateDateFromCFString(v6);
        if (v8)
        {
          v9 = v8;
          v19 = 0;
          v20 = &v19;
          v21 = 0x3052000000;
          v22 = __Block_byref_object_copy_;
          v23 = __Block_byref_object_dispose_;
          v10 = (void *)getIntlUtilityClass_softClass;
          v24 = getIntlUtilityClass_softClass;
          if (!getIntlUtilityClass_softClass)
          {
            v18[0] = MEMORY[0x1E0C809B0];
            v18[1] = 3221225472;
            v18[2] = __getIntlUtilityClass_block_invoke;
            v18[3] = &unk_1E3CA3360;
            v18[4] = &v19;
            __getIntlUtilityClass_block_invoke((uint64_t)v18);
            v10 = (void *)v20[5];
          }
          _Block_object_dispose(&v19, 8);
          v11 = ABSqliteNormalizeDate_s_gmtGregorian;
          v12 = objc_msgSend((id)ABSqliteNormalizeDate_s_gmtGregorian, "components:fromDate:", 254, v9);
          if ((objc_msgSend(v10, "isYearlessDate:forCalendar:", v12, v11) & 1) != 0
            || (v13 = objc_msgSend((id)ABSqliteNormalizeDate_s_gmtJapanese, "components:fromDate:", 254, v9),
                (objc_msgSend(v10, "isYearlessDate:forCalendar:", v13, ABSqliteNormalizeDate_s_gmtJapanese) & 1) != 0)
            || (v14 = objc_msgSend((id)ABSqliteNormalizeDate_s_gmtBuddhist, "components:fromDate:", 254, v9),
                objc_msgSend(v10, "isYearlessDate:forCalendar:", v14, ABSqliteNormalizeDate_s_gmtBuddhist)))
          {
            objc_msgSend(v10, "setYearlessYear:forCalendar:", v12, ABSqliteNormalizeDate_s_gmtGregorian);
          }
          v15 = _ABCCreateCFStringFromDate(objc_msgSend((id)ABSqliteNormalizeDate_s_gmtGregorian, "dateFromComponents:", v12));
          if (v15)
          {
            v16 = v15;
            v17 = _ABCCreateUTF8StringFromCFString(v15);
            sqlite3_result_text(a1, (const char *)v17, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
            CFRelease(v16);
          }
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
  }
}

void sub_19BC73600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ABSqliteTransformString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  char *MutableCopy;
  Boolean v7;
  const __CFString *v8;
  const __CFString *v9;
  const unsigned __int8 *v10;
  const __CFString *v11;
  const __CFString *v12;
  UInt8 *v13;

  if ((a2 - 3) > 1)
    goto LABEL_17;
  MutableCopy = (char *)sqlite3_value_text(*a3);
  v7 = sqlite3_value_int(a3[1]) != 0;
  if (MutableCopy)
  {
    v8 = CFStringCreateWithCString(0, MutableCopy, 0x8000100u);
    if (v8)
    {
      v9 = v8;
      MutableCopy = (char *)CFStringCreateMutableCopy(0, 0, v8);
      CFRelease(v9);
    }
    else
    {
      MutableCopy = 0;
    }
  }
  if (a2 != 3)
  {
    v11 = (const __CFString *)sqlite3_value_blob(a3[3]);
LABEL_10:
    v12 = v11;
    if (MutableCopy && v11)
    {
      CFStringTransform((CFMutableStringRef)MutableCopy, 0, v11, v7);
      CFRelease(v12);
LABEL_16:
      v13 = _ABCCreateUTF8StringFromCFString((const __CFString *)MutableCopy);
      sqlite3_result_text(a1, (const char *)v13, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      CFRelease(MutableCopy);
      return;
    }
    if (v11)
      CFRelease(v11);
    goto LABEL_15;
  }
  v10 = sqlite3_value_text(a3[2]);
  if (v10)
  {
    v11 = CFStringCreateWithCString(0, (const char *)v10, 0x8000100u);
    goto LABEL_10;
  }
LABEL_15:
  if (MutableCopy)
    goto LABEL_16;
LABEL_17:
  sqlite3_result_null(a1);
}

void ABSqliteIsStoreAllowed(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v5;
  void *v6;
  int v7;
  int v8;
  int v9;

  if (a2 != 4)
  {
    sqlite3_result_null(a1);
    return;
  }
  v5 = (void *)sqlite3_value_blob(a3[3]);
  if (v5
    && ((v6 = v5, (objc_msgSend(v5, "deviceHasManagementRestrictions") & 1) != 0)
     || objc_msgSend(v6, "hasContactProviderRestrictions")))
  {
    if (sqlite3_value_type(*a3) == 5)
    {
      v7 = sqlite3_value_int(a3[1]);
      if (v7 == 7)
      {
        v8 = objc_msgSend(v6, "canAccessProviderContainerWithIdentifier:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(a3[2])));
      }
      else
      {
        if (v7)
        {
          v9 = 0;
          goto LABEL_14;
        }
        v8 = objc_msgSend(v6, "canReadFromLocalAccount");
      }
    }
    else
    {
      v8 = objc_msgSend(v6, "canReadFromAccountWithIdentifier:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(*a3)));
    }
    v9 = v8;
  }
  else
  {
    v9 = 1;
  }
LABEL_14:
  sqlite3_result_int(a1, v9);
}

_BYTE *ABSqliteSelectPreferredContact_Step(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _BYTE *result;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;

  result = sqlite3_aggregate_context(a1, 8);
  if (a2 == 4)
  {
    v6 = result;
    if (result)
    {
      if (!result[4])
      {
        v7 = sqlite3_value_int(*a3);
        v8 = sqlite3_value_int(a3[1]);
        v9 = sqlite3_value_int(a3[2]);
        result = (_BYTE *)objc_msgSend((id)sqlite3_value_blob(a3[3]), "containsIndex:", v8);
        if ((_DWORD)result)
        {
          if (v9)
          {
            v6[4] = 1;
LABEL_7:
            *(_DWORD *)v6 = v7;
            return result;
          }
          if (!*(_DWORD *)v6 || v7 < *(_DWORD *)v6)
            goto LABEL_7;
        }
      }
    }
  }
  return result;
}

void ABSqliteSelectPreferredContact_Final(sqlite3_context *a1)
{
  int *v2;

  v2 = (int *)sqlite3_aggregate_context(a1, 8);
  if (v2 && *v2)
    sqlite3_result_int(a1, *v2);
  else
    sqlite3_result_null(a1);
}

void ABValueRowMapCollect(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  NSMapTable *v6;
  NSMapTable *v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  id v10;

  if (a2 == 3)
  {
    v5 = sqlite3_value_int(a3[2]);
    v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    if (v6)
    {
      v7 = v6;
      v8 = sqlite3_value_text(a3[1]);
      if (v8)
      {
        v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
        v10 = NSMapGet(v7, (const void *)v5);
        if (!v10)
        {
          v10 = objc_alloc_init(MEMORY[0x1E0C99E20]);
          NSMapInsert(v7, (const void *)v5, v10);

        }
        objc_msgSend(v10, "addObject:", v9);
      }
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t _createPersonTables()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;

  v0 = ABCDBContextPerformSQLResultDone();
  v1 = v0 & ABCDBContextPerformSQLResultDone();
  v2 = ABCDBContextPerformSQLResultDone();
  return v1 & v2 & ABCDBContextPerformSQLResultDone();
}

uint64_t ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  _BOOL4 v4;
  BOOL v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  BOOL v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  BOOL v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  BOOL v33;
  _BOOL4 v34;
  _BOOL4 v35;

  if (a2)
  {
    v4 = ABCDBContextPerformSQLResultDone();
    v5 = ABCDBContextPerformSQLResultDone();
    if (!v4)
      return 0;
    if (!v5)
      return 0;
    v6 = ABCDBContextPerformSQLResultDone();
    v7 = ABCDBContextPerformSQLResultDone();
    if (!v6)
      return 0;
    if (!v7)
      return 0;
    v8 = ABCDBContextPerformSQLResultDone();
    v9 = ABCDBContextPerformSQLResultDone();
    v10 = ABCDBContextPerformSQLResultDone();
    if (!v8)
      return 0;
    if (!v9)
      return 0;
    if (!v10)
      return 0;
    v11 = ABCDBContextPerformSQLResultDone();
    v12 = ABCDBContextPerformSQLResultDone();
    if (!v11 || !v12)
      return 0;
    v13 = ABCDBContextPerformSQLResultDone();
    v14 = v13 & ABCDBContextPerformSQLResultDone();
    v15 = ABCDBContextPerformSQLResultDone();
    v16 = v14 & v15 & ABCDBContextPerformSQLResultDone();
    v17 = ABCDBContextPerformSQLResultDone();
    v18 = v16 & v17 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      return 0;
    }
    v18 = 1;
  }
  v19 = ABCDBContextPerformSQLResultDone();
  if (!v18
    || !v19
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone())
  {
    return 0;
  }
  if (a2)
  {
    performSQLWithConnection();
    performSQLWithConnection();
    performSQLWithConnection();
  }
  if (!ABCDBContextPerformSQLResultDone() || !ABCDBContextPerformSQLResultDone() || !ABCDBContextPerformSQLResultDone())
    return 0;
  if (a2)
  {
    v20 = ABCDBContextPerformSQLResultDone();
    v21 = ABCDBContextPerformSQLResultDone();
    if (!v20)
      return 0;
    if (!v21)
      return 0;
    v22 = ABCDBContextPerformSQLResultDone();
    v23 = ABCDBContextPerformSQLResultDone();
    if (!v22)
      return 0;
    if (!v23)
      return 0;
    v24 = ABCDBContextPerformSQLResultDone();
    v25 = ABCDBContextPerformSQLResultDone();
    if (!v24)
      return 0;
    if (!v25)
      return 0;
    v26 = ABCDBContextPerformSQLResultDone();
    v27 = ABCDBContextPerformSQLResultDone();
    if (!v26)
      return 0;
    if (!v27)
      return 0;
    v28 = ABCDBContextPerformSQLResultDone();
    v29 = ABCDBContextPerformSQLResultDone();
    if (!v28)
      return 0;
    if (!v29)
      return 0;
    v30 = ABCDBContextPerformSQLResultDone();
    v31 = ABCDBContextPerformSQLResultDone();
    if (!v30)
      return 0;
    if (!v31)
      return 0;
    v32 = ABCDBContextPerformSQLResultDone();
    v33 = ABCDBContextPerformSQLResultDone();
    if (!v32 || !v33)
      return 0;
    v34 = ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      return 0;
    }
    v34 = 1;
  }
  v35 = ABCDBContextPerformSQLResultDone();
  if (v34 && v35)
    return _addLimitedAccessDeletionTriggers(a1, a2);
  return 0;
}

uint64_t ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(uint64_t a1, int a2)
{
  _BOOL4 v2;
  _BOOL4 v3;
  BOOL v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  BOOL v11;

  if (a2)
  {
    v2 = ABCDBContextPerformSQLResultDone();
    v3 = ABCDBContextPerformSQLResultDone();
    v4 = ABCDBContextPerformSQLResultDone();
    if (!v2)
      goto LABEL_18;
    if (!v3)
      goto LABEL_18;
    if (!v4)
      goto LABEL_18;
    v5 = ABCDBContextPerformSQLResultDone();
    v6 = ABCDBContextPerformSQLResultDone();
    v7 = ABCDBContextPerformSQLResultDone();
    if (!v5)
      goto LABEL_18;
    if (!v6)
      goto LABEL_18;
    if (!v7)
      goto LABEL_18;
    v8 = ABCDBContextPerformSQLResultDone();
    v9 = ABCDBContextPerformSQLResultDone();
    if (!v8 || !v9)
      goto LABEL_18;
    v10 = ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      goto LABEL_18;
    }
    v10 = 1;
  }
  v11 = ABCDBContextPerformSQLResultDone();
  if (v10 && v11)
    return 1;
LABEL_18:
  syslog(3, "Error creating section tables");
  return 0;
}

BOOL ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  _BOOL4 v2;
  _BOOL4 v3;
  BOOL v4;
  _BOOL8 result;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  BOOL v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  BOOL v34;
  _BOOL4 v35;

  if (a2)
  {
    v2 = ABCDBContextPerformSQLResultDone();
    v3 = ABCDBContextPerformSQLResultDone();
    v4 = ABCDBContextPerformSQLResultDone();
    result = 0;
    if (v2 && v3 && v4)
    {
      v6 = ABCDBContextPerformSQLResultDone();
      v7 = ABCDBContextPerformSQLResultDone();
      v8 = ABCDBContextPerformSQLResultDone();
      result = 0;
      if (v6 && v7 && v8)
      {
        v9 = ABCDBContextPerformSQLResultDone();
        v10 = ABCDBContextPerformSQLResultDone();
        v11 = ABCDBContextPerformSQLResultDone();
        result = 0;
        if (v9 && v10 && v11)
        {
          v12 = ABCDBContextPerformSQLResultDone();
          v13 = ABCDBContextPerformSQLResultDone();
          v14 = ABCDBContextPerformSQLResultDone();
          result = 0;
          if (v12 && v13 && v14)
          {
            v15 = ABCDBContextPerformSQLResultDone();
            v16 = ABCDBContextPerformSQLResultDone();
            v17 = ABCDBContextPerformSQLResultDone();
            result = 0;
            if (v15 && v16 && v17)
            {
              v18 = ABCDBContextPerformSQLResultDone();
              v19 = ABCDBContextPerformSQLResultDone();
              v20 = ABCDBContextPerformSQLResultDone();
              result = 0;
              if (v18 && v19 && v20)
              {
                v21 = ABCDBContextPerformSQLResultDone();
                v22 = ABCDBContextPerformSQLResultDone();
                result = 0;
                if (v21 && v22)
                {
                  v23 = ABCDBContextPerformSQLResultDone();
                  v24 = ABCDBContextPerformSQLResultDone();
                  result = 0;
                  if (v23 && v24)
                  {
                    v25 = ABCDBContextPerformSQLResultDone();
                    v26 = ABCDBContextPerformSQLResultDone();
                    result = 0;
                    if (v25 && v26)
                    {
                      v27 = ABCDBContextPerformSQLResultDone();
                      v28 = ABCDBContextPerformSQLResultDone();
                      result = 0;
                      if (v27 && v28)
                      {
                        v29 = ABCDBContextPerformSQLResultDone();
                        v30 = ABCDBContextPerformSQLResultDone();
                        result = 0;
                        if (v29 && v30)
                        {
                          v31 = ABCDBContextPerformSQLResultDone();
                          v32 = ABCDBContextPerformSQLResultDone();
                          result = 0;
                          if (v31 && v32)
                          {
                            v33 = ABCDBContextPerformSQLResultDone();
                            v34 = ABCDBContextPerformSQLResultDone();
                            result = 0;
                            if (v33 && v34)
                            {
                              v35 = ABCDBContextPerformSQLResultDone();
                              return v35 & ABCDBContextPerformSQLResultDone();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    result = ABCDBContextPerformSQLResultDone();
    if (!result)
      return result;
    if (ABCDBContextPerformSQLResultDone())
    {
      result = ABCDBContextPerformSQLResultDone();
      if (!result)
        return result;
      if (ABCDBContextPerformSQLResultDone())
      {
        result = ABCDBContextPerformSQLResultDone();
        if (!result)
          return result;
        if (ABCDBContextPerformSQLResultDone())
        {
          result = ABCDBContextPerformSQLResultDone();
          if (!result)
            return result;
          if (ABCDBContextPerformSQLResultDone())
          {
            result = ABCDBContextPerformSQLResultDone();
            if (!result)
              return result;
            if (ABCDBContextPerformSQLResultDone())
            {
              result = ABCDBContextPerformSQLResultDone();
              if (!result)
                return result;
              if (ABCDBContextPerformSQLResultDone() && ABCDBContextPerformSQLResultDone())
              {
                v35 = 1;
                return v35 & ABCDBContextPerformSQLResultDone();
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t performSQLWithConnection()
{
  uint64_t result;

  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    CPSqliteStatementPerform();
    return CPSqliteStatementReset();
  }
  return result;
}

uint64_t trimStoreURLs(uint64_t a1, __CFArray **a2)
{
  __CFArray *v3;
  int v4;
  const unsigned __int8 *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  CFStringRef v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  UInt8 *v15;

  v3 = *a2;
  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(v3, (const void *)v4);
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v5)
  {
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v5, 0x8000100u);
    if (v6)
    {
      v7 = v6;
      if (CFStringGetLength(v6))
      {
        v8 = CFURLCreateWithString(0, v7, 0);
        if (v8)
        {
          v9 = v8;
          v10 = CFURLCopyPath(v8);
          if (v10)
          {
            v11 = v10;
            v12 = CPSqliteConnectionStatementForSQL();
            if (v12)
            {
              v13 = v12;
              v14 = *(sqlite3_stmt **)(v12 + 8);
              v15 = _ABCCreateUTF8StringFromCFString(v11);
              sqlite3_bind_text(v14, 1, (const char *)v15, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
              sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, v4);
              CPSqliteStatementPerform();
              CPSqliteStatementReset();
            }
            CFRelease(v11);
          }
          CFRelease(v9);
        }
      }
      CFRelease(v7);
    }
  }
  return 0;
}

uint64_t trimMemberURLs(uint64_t a1)
{
  int v2;
  const unsigned __int8 *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFURL *v6;
  CFStringRef v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  UInt8 *v12;

  v2 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v3)
  {
    v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v3, 0x8000100u);
    if (v4)
    {
      v5 = v4;
      if (CFStringGetLength(v4))
      {
        v6 = CFURLCreateWithString(0, v5, 0);
        v7 = CFURLCopyPath(v6);
        if (v7)
        {
          v8 = v7;
          v9 = CPSqliteConnectionStatementForSQL();
          if (v9)
          {
            v10 = v9;
            v11 = *(sqlite3_stmt **)(v9 + 8);
            v12 = _ABCCreateUTF8StringFromCFString(v8);
            sqlite3_bind_text(v11, 1, (const char *)v12, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
            sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 2, v2);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
      CFRelease(v5);
    }
  }
  return 0;
}

uint64_t _abSqliteTraceCallback(int a1, uint64_t a2, sqlite3_stmt *pStmt, char *__s1)
{
  char *v4;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = __s1;
  if (a1 == 2)
  {
    v8 = *(_QWORD *)__s1;
    if (*(_QWORD *)__s1 >= 0x989681uLL && ABDiagnosticsEnabled())
      _ABLog2(6, (uint64_t)"int _abSqliteTraceCallback(unsigned int, void *, void *, void *)", 355, 0, (uint64_t)CFSTR("sqlite profile: %llu ms, %s"), v9, v10, v11, v8 / 0xF4240);
  }
  else if (a1 == 1)
  {
    if (__s1 && !strncmp(__s1, "--", 2uLL))
    {
      v7 = 0;
    }
    else
    {
      if (!pStmt)
        return 0;
      v4 = sqlite3_expanded_sql(pStmt);
      if (!v4)
        goto LABEL_17;
      v7 = 1;
    }
    if (!strcasestr(v4, "-- TRIGGER") && ABDiagnosticsEnabled())
    {
      _ABLog2(6, (uint64_t)"int _abSqliteTraceCallback(unsigned int, void *, void *, void *)", 345, 0, (uint64_t)CFSTR("sqlite trace [%p]: %s"), v12, v13, v14, a2);
      if ((v7 & 1) == 0)
        return 0;
      goto LABEL_17;
    }
    if (v7)
LABEL_17:
      sqlite3_free(v4);
  }
  return 0;
}

void ABCDBUpdatePersonValueFromTrigger(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _QWORD *v5;
  sqlite3_value *v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 3)
  {
    v5 = sqlite3_user_data(a1);
    v6 = *a3;
    sqlite3_value_text(a3[1]);
    v7 = sqlite3_value_int(a3[2]);
    v8 = CPRecordIndexOfPropertyNamed();
    if ((v8 & 0x80000000) == 0
      && (signed int)v8 < *((_DWORD *)ABCPersonClass + 18)
      && *(_DWORD *)(*((_QWORD *)ABCPersonClass + 10) + 40 * v8 + 8) == 1
      && sqlite3_value_type(v6) == 1)
    {
      if (MEMORY[0x1A1ACBC14](v5[2], ABCPersonClass, v7))
      {
        sqlite3_value_int(v6);
        CPRecordInitializeProperty();
      }
    }
    sqlite3_result_value(a1, v6);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void ___logDatabaseHeader_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

const void *rowidForStringInTable(const __CFString *key, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary **a5, _BYTE *a6)
{
  const __CFDictionary *Mutable;
  uint64_t Insert;
  int v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  UInt8 *v21;
  int v22;
  CFIndex usedBufLen;
  CFRange v25;
  CFRange v26;

  if (a6)
    *a6 = 0;
  if (a5)
  {
    Mutable = *a5;
    if (*a5
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0),
          (*a5 = Mutable) != 0))
    {
      if (CFDictionaryContainsKey(Mutable, key))
        return CFDictionaryGetValue(Mutable, key);
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    Mutable = 0;
  }
  v12 = CPSqliteConnectionStatementForSQL();
  usedBufLen = 0;
  if (v12)
  {
    v13 = v12;
    Length = CFStringGetLength(key);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    v16 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x94D74D47uLL);
    v25.location = 0;
    v25.length = Length;
    CFStringGetBytes(key, v25, 0x8000100u, 0, 0, v16, MaximumSizeForEncoding, &usedBufLen);
    v16[usedBufLen] = 0;
    sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, (const char *)v16, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  else
  {
    fwrite("SQL error\n", 0xAuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  v17 = CPSqliteConnectionStatementForSQL();
  if (!v17)
  {
    Insert = 0xFFFFFFFFLL;
    if (!a6)
      goto LABEL_17;
    goto LABEL_16;
  }
  v18 = v17;
  v19 = CFStringGetLength(key);
  v20 = CFStringGetMaximumSizeForEncoding(v19, 0x8000100u);
  v21 = (UInt8 *)malloc_type_malloc(v20 + 1, 0x3DE1FFE2uLL);
  v26.location = 0;
  v26.length = v19;
  CFStringGetBytes(key, v26, 0x8000100u, 0, 0, v21, v20, &usedBufLen);
  v21[usedBufLen] = 0;
  sqlite3_bind_text(*(sqlite3_stmt **)(v18 + 8), 1, (const char *)v21, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  CPSqliteStatementPerform();
  CPSqliteStatementReset();
  Insert = CPSqliteConnectionRowidOfLastInsert();
  if (a6)
LABEL_16:
    *a6 = 1;
LABEL_17:
  if ((int)Insert >= 0)
    v22 = v11;
  else
    v22 = 0;
  if (v22 == 1)
    CFDictionarySetValue(Mutable, key, (const void *)Insert);
  return (const void *)Insert;
}

uint64_t AddEntryToDictionary(uint64_t a1, __CFDictionary *a2)
{
  const unsigned __int8 *v4;
  const __CFAllocator *v5;
  __CFString *v6;
  const unsigned __int8 *v7;
  __CFString *v8;
  int v9;
  __CFString *v10;

  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v4, 0x8000100u);
    v7 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
    if (v7)
      v8 = (__CFString *)CFStringCreateWithCString(v5, (const char *)v7, 0x8000100u);
    else
      v8 = &stru_1E3CA4E68;
    v9 = -[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("bundleIdentifiers"));
    v10 = v8;
    if (v9)
      v10 = (__CFString *)-[__CFString componentsSeparatedByString:](v8, "componentsSeparatedByString:", CFSTR(","));
    CFDictionarySetValue(a2, v6, v10);
    CFRelease(v6);
    CFRelease(v8);
  }
  return 0;
}

uint64_t _setInt(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[1] + 8);
  if (v3)
    return v3(a2, a3, *a1);
  else
    return 1;
}

uint64_t _setRawString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[1] + 32);
  if (v3)
    return v3(a2, a3, *a1);
  else
    return 1;
}

uint64_t _setRawData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1[1] + 40);
  if (v4)
    return v4(a2, a3, a4, *a1);
  else
    return 1;
}

uint64_t addLabelToDictionary(uint64_t a1, __CFDictionary *a2)
{
  int v4;
  const unsigned __int8 *v5;
  CFStringRef v6;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v5, 0x8000100u);
  CFDictionarySetValue(a2, (const void *)v4, v6);
  CFRelease(v6);
  return 0;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getIntlUtilityClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!IntlPreferencesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E3CA33F8;
    v5 = 0;
    IntlPreferencesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!IntlPreferencesLibraryCore_frameworkLibrary)
    __getIntlUtilityClass_block_invoke_cold_1(&v3);
  result = objc_getClass("IntlUtility");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getIntlUtilityClass_block_invoke_cold_2();
  getIntlUtilityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t ABIntFromUVersionInfo(unsigned __int8 *a1)
{
  return (*a1 << 24) | (a1[1] << 16);
}

uint64_t ABCCreateCollator(uint64_t a1, int a2)
{
  return ABCCreateCollatorWithPreferredLocale(a1, a2, 0);
}

uint64_t ABCCreateCollatorWithPreferredLocale(uint64_t a1, int a2, CFTypeRef cf)
{
  const __CFString *v5;
  const char *CStringPtr;
  UInt8 *v7;
  char v8;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex usedBufLen;
  int v16;
  CFRange v17;

  v16 = 0;
  if (cf && (v5 = (const __CFString *)CFRetain(cf)) != 0 || (v5 = ABAddressBookCopyCollatorType(a1, a2)) != 0)
  {
    if (CFStringGetLength(v5))
      goto LABEL_7;
    CFRelease(v5);
  }
  v5 = ABCCopyUserLanguage();
  if (!v5)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_11;
  }
LABEL_7:
  CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  if (!CStringPtr)
  {
    Length = CFStringGetLength(v5);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
    usedBufLen = 0;
    v7 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xB257DAF1uLL);
    v17.location = 0;
    v17.length = Length;
    CFStringGetBytes(v5, v17, 0x600u, 0, 0, v7, MaximumSizeForEncoding, &usedBufLen);
    v8 = 0;
    v11 = 0;
    v7[usedBufLen] = 0;
    goto LABEL_12;
  }
  v7 = (UInt8 *)CStringPtr;
  v8 = 0;
LABEL_11:
  v11 = 1;
LABEL_12:
  if (!v7)
    v7 = (UInt8 *)"en";
  v12 = ucol_open();
  if (v16 >= 1)
    v13 = 0;
  else
    v13 = v12;
  ucol_setAttribute();
  if ((v8 & 1) == 0)
    CFRelease(v5);
  if ((v11 & 1) == 0)
    free(v7);
  return v13;
}

uint64_t ABCReleaseCollator(uint64_t result)
{
  if (result)
    return ucol_close();
  return result;
}

const char *ABCreateSortKey(CFStringRef theString, uint64_t a2, uint64_t a3, int64_t *a4)
{
  uint64_t Length;
  uint64_t v8;
  const UniChar *CharactersPtr;
  UniChar *v10;
  unsigned int SortKey;
  unsigned int v12;
  size_t v13;
  char *v14;
  const char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  NSObject *v19;
  char __src[4000];
  uint64_t v22;
  CFRange v23;

  v22 = *MEMORY[0x1E0C80C00];
  if (theString)
    Length = CFStringGetLength(theString);
  else
    Length = 0;
  v8 = a2;
  if (!a2)
    v8 = ABCCreateCollatorWithPreferredLocale(0, 0, 0);
  if (Length < 1)
  {
    v15 = 0;
    v17 = 1;
    goto LABEL_21;
  }
  CharactersPtr = CFStringGetCharactersPtr(theString);
  v10 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
  {
    v10 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
    v23.location = 0;
    v23.length = Length;
    CFStringGetCharacters(theString, v23, v10);
  }
  ucol_setStrength();
  SortKey = ucol_getSortKey();
  if (!SortKey)
  {
    v19 = ABOSLogGeneral();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      ABCreateSortKey_cold_1((uint64_t)theString, v19);
    v15 = 0;
    v17 = 1;
    if (!CharactersPtr)
      goto LABEL_20;
    goto LABEL_21;
  }
  v12 = SortKey;
  v13 = SortKey;
  v14 = (char *)malloc_type_calloc(SortKey, 1uLL, 0xC2B5088EuLL);
  v15 = v14;
  if (v12 >= 0xFA1)
  {
    v12 = ucol_getSortKey();
    if (a4)
      goto LABEL_12;
LABEL_29:
    v17 = 0;
    if (CharactersPtr)
      goto LABEL_21;
    goto LABEL_20;
  }
  memcpy(v14, __src, v13);
  if (!a4)
    goto LABEL_29;
LABEL_12:
  v16 = strlen(v15);
  v17 = 0;
  v18 = v12 - 1;
  if (v16 < v18)
    v18 = v16;
  *a4 = v18;
  if (!CharactersPtr)
LABEL_20:
    free(v10);
LABEL_21:
  if (a4 && v17)
    *a4 = 0;
  if (v8 != a2 && v8)
    ucol_close();
  return v15;
}

uint64_t ABCreateUpperBoundingSortKey(const char *a1)
{
  strlen(a1);
  ucol_getBound();
  return 0;
}

const char *ABCreateDataSortKey(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  const char *result;
  CFIndex length;

  length = 0;
  result = ABCreateSortKey(a1, a2, a3, &length);
  if (result)
    return (const char *)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)result, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  return result;
}

const char *ABCreateUpperBoundingDataSortKey(const __CFData *a1)
{
  const char *BytePtr;
  const char *result;
  const UInt8 *v3;
  size_t v4;

  BytePtr = (const char *)CFDataGetBytePtr(a1);
  result = (const char *)ABCreateUpperBoundingSortKey(BytePtr);
  if (result)
  {
    v3 = (const UInt8 *)result;
    v4 = strlen(result);
    return (const char *)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  }
  return result;
}

__CFArray *ABCCreateSortKeysForString(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  __CFArray *Mutable;
  const __CFString *ValueAtIndex;
  const __CFString *v14;
  char *v15;
  char *v16;
  int64_t v18;

  if (!a2)
    return 0;
  v7 = _copyComponentsForString(a1, a2, a3, a5);
  if (!v7)
    return 0;
  v8 = v7;
  Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
    Mutable = 0;
  }
  else
  {
    v10 = Count;
    v11 = 0;
    Mutable = 0;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
      if (ValueAtIndex)
      {
        v14 = ValueAtIndex;
        if (CFStringGetLength(ValueAtIndex) >= 1)
        {
          v18 = 0;
          v15 = (char *)ABCreateSortKey(v14, a4, a5, &v18);
          if (v15)
          {
            v16 = v15;
            if (v18 < 1)
            {
              free(v15);
            }
            else
            {
              if (!Mutable)
                Mutable = CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
              CFArrayAppendValue(Mutable, v16);
            }
          }
        }
      }
      ++v11;
    }
    while (v10 != v11);
  }
  CFRelease(v8);
  return Mutable;
}

CFArrayRef _copyComponentsForString(__CFStringTokenizer *a1, CFStringRef theString, uint64_t a3, int a4)
{
  const __CFAllocator *v8;
  __CFArray *Mutable;
  CFArrayRef v10;
  const __CFArray *v11;
  CFArrayRef v12;
  const __CFArray *v13;
  CFIndex Count;
  const __CFArray *MutableCopy;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v22;
  CFIndex v23;
  CFIndex j;
  const __CFArray *v25;
  CFRange v26;
  CFRange v27;

  if (a4 == 2)
    return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, a3, 0);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v10 = ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, a3, 1);
  v11 = v10;
  if ((_DWORD)a3)
  {
    v12 = ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, 0, 1);
    v13 = v12;
    if (v11)
    {
      Count = CFArrayGetCount(v11);
      MutableCopy = CFArrayCreateMutableCopy(v8, Count, v11);
      v16 = CFArrayGetCount(MutableCopy);
      if (v13)
      {
        v17 = v16;
        v18 = CFArrayGetCount(v13);
        if (v18 >= 1)
        {
          v19 = v18;
          for (i = 0; i != v19; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
            v26.location = 0;
            v26.length = v17;
            if (!CFArrayContainsValue(MutableCopy, v26, ValueAtIndex))
              CFArrayAppendValue(MutableCopy, ValueAtIndex);
          }
        }
        CFRelease(v13);
      }
      CFRelease(v11);
      if (!MutableCopy)
        return Mutable;
      goto LABEL_17;
    }
    MutableCopy = v12;
    if (v12)
    {
LABEL_17:
      v22 = CFArrayGetCount(MutableCopy);
      if (v22 >= 1)
      {
        v23 = v22;
        for (j = 0; j != v23; ++j)
        {
          v25 = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, j);
          v27.length = CFArrayGetCount(v25);
          v27.location = 0;
          CFArrayAppendArray(Mutable, v25, v27);
        }
      }
      CFRelease(MutableCopy);
    }
  }
  else
  {
    MutableCopy = v10;
    if (v10)
      goto LABEL_17;
  }
  return Mutable;
}

CFMutableArrayRef ABCreateSortKeysMutableArray()
{
  return CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
}

void _freeSortKey(int a1, void *a2)
{
  if (a2)
    free(a2);
}

void ABCMergeSortKeysIntoString(__CFString *a1, CFArrayRef theArray, uint64_t a3, _QWORD *a4)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const char *ValueAtIndex;
  const char *v10;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  size_t v13;
  void *v14;
  void *v15;
  UInt8 *v16;
  size_t v17;
  const __CFString *v18;
  const __CFString *v19;
  void *v20;
  size_t v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFAllocator *contentsDeallocator;
  CFIndex usedBufLen;
  _BYTE v28[200];
  uint64_t v29;
  CFRange v30;

  v29 = *MEMORY[0x1E0C80C00];
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
      do
      {
        ValueAtIndex = (const char *)CFArrayGetValueAtIndex(theArray, v8);
        if (ValueAtIndex)
        {
          v10 = ValueAtIndex;
          if (CFStringGetLength(a1) < 1)
          {
            v17 = strlen(v10);
            v18 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v10, v17, 0x201u, 0, contentsDeallocator);
            if (v18)
            {
              v19 = v18;
              CFStringAppend(a1, v18);
              CFRelease(v19);
            }
            if (a4 && !*a4)
              *a4 = a3;
            goto LABEL_21;
          }
          Length = CFStringGetLength(a1);
          MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x201u);
          v13 = strlen(v10);
          usedBufLen = 0;
          if (MaximumSizeForEncoding < 200)
          {
            v15 = 0;
            v16 = v28;
          }
          else
          {
            v14 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0xDD2EC9DAuLL);
            v15 = v14;
            if (v14)
            {
              v16 = (UInt8 *)v14;
            }
            else
            {
              MaximumSizeForEncoding = 199;
              v16 = v28;
            }
          }
          v30.location = 0;
          v30.length = Length;
          CFStringGetBytes(a1, v30, 0x201u, 0, 0, v16, MaximumSizeForEncoding + 1, &usedBufLen);
          v16[usedBufLen] = 0;
          v20 = malloc_type_malloc(2 * (usedBufLen + v13), 0x100004077774924uLL);
          if ((int)ucol_mergeSortkeys() < 1)
          {
            free(v20);
            if (!v15)
              goto LABEL_21;
          }
          else
          {
            v21 = strlen((const char *)v20);
            v22 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v20, v21, 0x201u, 0, 0);
            if (v22)
            {
              v23 = v22;
              CFStringReplaceAll(a1, v22);
              CFRelease(v23);
            }
            if (!v15)
              goto LABEL_21;
          }
          free(v15);
        }
LABEL_21:
        ++v8;
      }
      while (v7 != v8);
    }
  }
}

CFDataRef ABCopySortKeyForSortKeys(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  size_t v4;
  CFIndex i;
  const char *ValueAtIndex;
  void *v7;
  void *v8;
  const char *v9;
  size_t v10;
  CFIndex j;
  const char *v12;
  size_t v13;
  CFDataRef v14;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  for (i = 0; i != v3; ++i)
  {
    ValueAtIndex = (const char *)CFArrayGetValueAtIndex(a1, i);
    v4 += strlen(ValueAtIndex) + 1;
  }
  v7 = malloc_type_calloc(1uLL, v4, 0x404EAF46uLL);
  v8 = malloc_type_calloc(1uLL, v4, 0xE5C27A59uLL);
  v9 = (const char *)CFArrayGetValueAtIndex(a1, 0);
  v10 = strlen(v9);
  memmove(v7, v9, v10);
  memmove(v8, v9, v10);
  if (v3 >= 2)
  {
    for (j = 1; j != v3; ++j)
    {
      v12 = (const char *)CFArrayGetValueAtIndex(a1, j);
      strlen(v12);
      v13 = (int)ucol_mergeSortkeys();
      memmove(v8, v7, v13);
    }
    v4 = v13;
  }
  v14 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v7, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  free(v8);
  return v14;
}

__CFArray *ABCopySortKeysForStrings(__CFStringTokenizer *a1, const __CFArray *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex j;
  const __CFString *v18;
  char *v19;
  int64_t v23;

  Mutable = CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v10 = Count;
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      v13 = _copyComponentsForString(a1, ValueAtIndex, a3, a5);
      if (v13)
      {
        v14 = v13;
        v15 = CFArrayGetCount(v13);
        if (v15 >= 1)
        {
          v16 = v15;
          for (j = 0; j != v16; ++j)
          {
            v18 = (const __CFString *)CFArrayGetValueAtIndex(v14, j);
            if (CFStringGetLength(v18) >= 1)
            {
              v23 = 0;
              v19 = (char *)ABCreateSortKey(v18, a4, a5, &v23);
              if (v23 < 1)
                free(v19);
              else
                CFArrayAppendValue(Mutable, v19);
            }
          }
        }
        CFRelease(v14);
      }
    }
  }
  return Mutable;
}

uint64_t ABCompareDataSortKeys(const __CFData *a1, const __CFData *a2)
{
  char *BytePtr;
  char *v4;

  BytePtr = (char *)CFDataGetBytePtr(a1);
  v4 = (char *)CFDataGetBytePtr(a2);
  return ABCompareSortKeys(BytePtr, v4);
}

uint64_t ABCompareSortKeys(char *a1, char *__s)
{
  uint64_t result;
  signed int v5;
  signed int v6;
  int v7;

  if (a1)
    result = -1;
  else
    result = __s != 0;
  if (a1 && __s)
  {
    v5 = strchr(__s, 1) - (_DWORD)__s;
    v6 = strchr(a1, 1) - (_DWORD)a1;
    if (v6 >= v5)
      v6 = v5;
    v7 = strncmp(a1, __s, v6);
    if (v7 >= 0)
      return v7 != 0;
    else
      return -1;
  }
  return result;
}

uint64_t ABCompareStringsUsingICUSortKey(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;

  v5 = (char *)ABCreateSortKey(a1, a3, 2, 0);
  v6 = (char *)ABCreateSortKey(a2, a3, 2, 0);
  v7 = ABCompareSortKeys(v5, v6);
  free(v5);
  free(v6);
  return v7;
}

CFArrayRef ABCCreateArrayOfTokenizationsBySeparatingWordsInCompositeName(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3)
{
  return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, a2, a3, 1);
}

CFArrayRef ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(__CFStringTokenizer *a1, CFStringRef theString, uint64_t a3, int a4)
{
  CFIndex Length;
  CFStringTokenizerRef v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFString *ValueAtIndex;
  const __CFLocale *v12;
  uint64_t PossibleNamePartsArrayWithStringAsCompositeName;
  CFArrayRef v14;
  CFRange v16;
  CFRange v17;

  Length = CFStringGetLength(theString);
  if (a1)
  {
    v16.location = 0;
    v16.length = Length;
    CFStringTokenizerSetString(a1, theString, v16);
    v8 = a1;
    goto LABEL_10;
  }
  v9 = CFLocaleCopyPreferredLanguages();
  if (v9)
  {
    v10 = v9;
    if (CFArrayGetCount(v9))
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, 0);
      v12 = CFLocaleCreate(0, ValueAtIndex);
      CFRelease(v10);
      if (v12)
        goto LABEL_9;
    }
    else
    {
      CFRelease(v10);
    }
  }
  v12 = CFLocaleCopyCurrent();
LABEL_9:
  v17.location = 0;
  v17.length = Length;
  v8 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, v17, 0, v12);
  CFRelease(v12);
  if (!v8)
    return 0;
LABEL_10:
  if (a4)
    PossibleNamePartsArrayWithStringAsCompositeName = _CFStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName();
  else
    PossibleNamePartsArrayWithStringAsCompositeName = _CFStringTokenizerCreateNamePartsArrayWithStringAsCompositeName();
  v14 = (CFArrayRef)PossibleNamePartsArrayWithStringAsCompositeName;
  if (PossibleNamePartsArrayWithStringAsCompositeName)
  {
    if (!a1)
      goto LABEL_17;
  }
  else
  {
    v14 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
    if (!a1)
LABEL_17:
      CFRelease(v8);
  }
  return v14;
}

__CFArray *ABCCreateArrayBySeparatingWordsInPropertyString(__CFStringTokenizer *a1, const __CFString *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex Length;
  CFRange CurrentTokenRange;
  CFStringRef v8;
  CFStringRef v9;
  CFRange v11;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Length = CFStringGetLength(a2);
  if (a1)
  {
    v11.length = Length;
    v11.location = 0;
    CFStringTokenizerSetString(a1, a2, v11);
    while (CFStringTokenizerAdvanceToNextToken(a1))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(a1);
      if (CurrentTokenRange.length >= 1)
      {
        v8 = CFStringCreateWithSubstring(v4, a2, CurrentTokenRange);
        if (v8)
        {
          v9 = v8;
          CFArrayAppendValue(Mutable, v8);
          CFRelease(v9);
        }
      }
    }
  }
  return Mutable;
}

CFArrayRef ABCCreateArrayBySeparatingWordsInCompositeNameString(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3)
{
  return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, a2, a3, 0);
}

__CFString *ABCreateASCIINumericStringFromString(const __CFString *a1)
{
  CFIndex Length;
  __CFString *Mutable;
  CFIndex v4;
  UChar32 CharacterAtIndex;
  double NumericValue;
  double v7;
  UniChar chars;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Length >= 1)
  {
    v4 = 0;
    chars = 0;
    do
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v4);
      chars = CharacterAtIndex;
      NumericValue = u_getNumericValue(CharacterAtIndex);
      if (NumericValue <= 9.0)
      {
        v7 = ceil(NumericValue);
        if (NumericValue >= 0.0 && NumericValue == v7)
          chars = (int)NumericValue + 48;
      }
      CFStringAppendCharacters(Mutable, &chars, 1);
      ++v4;
    }
    while (Length != v4);
  }
  return Mutable;
}

BOOL ABCDBContextCreateDefaultABSource()
{
  int v0;

  CPSqliteConnectionStatementForSQL();
  v0 = CPSqliteStatementPerform();
  CPSqliteStatementReset();
  return v0 == 101;
}

BOOL ABCDBContextCreateABCSourceTables(uint64_t a1, int a2)
{
  int v3;

  if (CPSqliteConnectionStatementForSQL())
  {
    v3 = CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CFRelease(CFSTR("CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, Type INTEGER, ConstraintsPath TEXT, ExternalModificationTag TEXT, ExternalSyncTag TEXT, StoreInternalIdentifier TEXT, AccountID INTEGER DEFAULT -1,Enabled INTEGER DEFAULT 1, SyncData BLOB, MeIdentifier INTEGER DEFAULT -1, Capabilities INTEGER DEFAULT 0, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), LastSyncDate TEXT, ProviderIdentifier TEXT, ProviderMetadata BLOB, UNIQUE(StoreInternalIdentifier), UNIQUE(guid));"));
    if (v3 == 101 && a2 != 0)
    {
      ABCDBContextCreateDefaultABSource();
      v3 = 101;
    }
  }
  else
  {
    CFRelease(CFSTR("CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, Type INTEGER, ConstraintsPath TEXT, ExternalModificationTag TEXT, ExternalSyncTag TEXT, StoreInternalIdentifier TEXT, AccountID INTEGER DEFAULT -1,Enabled INTEGER DEFAULT 1, SyncData BLOB, MeIdentifier INTEGER DEFAULT -1, Capabilities INTEGER DEFAULT 0, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), LastSyncDate TEXT, ProviderIdentifier TEXT, ProviderMetadata BLOB, UNIQUE(StoreInternalIdentifier), UNIQUE(guid));"));
    v3 = 1;
  }
  return v3 == 101;
}

uint64_t ABCSourceCreateNewSourceAndReturnError()
{
  uint64_t v0;

  ABCInitializeLibrary();
  v0 = CPRecordCreate();
  CPRecordInitializeProperty();
  CPRecordInitializeProperty();
  return v0;
}

const void *ABCSourceCopyLocalSource(uint64_t a1)
{
  const void *v1;

  if (!a1)
    return 0;
  v1 = (const void *)ABCDBContextRecordForUIDOfType();
  if (!v1)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForWriting();
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CPSqliteDatabaseReleaseSqliteConnection();
      v1 = (const void *)ABCDBContextRecordForUIDOfType();
      if (!v1)
        return v1;
      goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  CFRetain(v1);
  return v1;
}

uint64_t _ABCGetActualDefaultSource(uint64_t a1)
{
  if (!a1)
    return 0;
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  if ((CPSqliteConnectionIntegerForPropertyWithDefaultValue() & 0x80000000) != 0)
    return 0;
  else
    return ABCDBContextRecordForUIDOfType();
}

uint64_t ABCSourceCopyArrayOfAllSourcesIncludingDisabledSources(uint64_t a1, int a2)
{
  uint64_t v2;
  __CFString *v3;
  const __CFString *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (a2)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = CFSTR("Enabled = ?");
    v4 = CFSTR("1");
  }
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(v2, (uint64_t)ABCSourceClass, 0, v3, v4);
}

uint64_t ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFArrayRef v10;
  void *values;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(ABCAddressBookRef, CFStringRef)", 275, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (a2)
    return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  values = (void *)ABCSourceCopyLocalSource(a1);
  if (!values)
    return 0;
  v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  CFRelease(values);
  return (uint64_t)v10;
}

uint64_t ABCPersonCopyArrayOfPeopleWithExternalIdentifierInSource(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ABCGetAddressBookForRecord();
  if (v4 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(v5, (uint64_t)ABCPersonClass, a2, a1);
  else
    return 0;
}

uint64_t ABCGroupCopyArrayOfGroupsWithExternalIdentifierInSource(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ABCGetAddressBookForRecord();
  if (v4 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(v5, (uint64_t)ABCGroupClass[0], a2, a1);
  else
    return 0;
}

uint64_t ABCGroupCopyArrayOfGroupsWithExternalIdentifiersInSource(const __CFArray *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ABCGetAddressBookForRecord();
  if (v4 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(v5, (uint64_t)ABCGroupClass[0], a2, a1);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(uint64_t *a1, const __CFString *a2, int a3, int a4)
{
  const __CFArray *v8;
  uint64_t v9;
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!ABLogAPIUsage())
  {
    if (a4)
      goto LABEL_3;
    return ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(a1[2], (uint64_t)ABCPersonClass, a2, a3);
  }
  v11 = _isMainThread();
  v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v11);
  v13 = ABLogAddressBook((uint64_t)a1);
  _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, _Bool)", 342, v12, (uint64_t)CFSTR("%@"), v14, v15, v16, v13);
  CFRelease(v12);
  if (!a4)
    return ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(a1[2], (uint64_t)ABCPersonClass, a2, a3);
LABEL_3:
  if (!a2)
    return ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(a1, a3);
  v8 = (const __CFArray *)ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier((uint64_t)a1, (uint64_t)a2);
  v9 = ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(a1, 0, v8, a3);
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(uint64_t *a1, const __CFString *a2, int a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(ABAddressBookRef, CFStringRef, ABPersonSortOrdering)", 368, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(a1, a2, a3, 0);
}

void ABAddressBookSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)", 111, v11, (uint64_t)CFSTR("%@, key=%@, value=%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  if (a1 && *(_QWORD *)(a1 + 16))
    CPRecordStoreSetValueForProperty();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)", 118, CFSTR(">> "), 0, v16, v17, v18, a9);
}

uint64_t ABAddressBookCopyValue(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)", 123, v3, (uint64_t)CFSTR("%@, key=%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (a1 && *(_QWORD *)(a1 + 16))
    v8 = CPRecordStoreCopyValueForProperty();
  else
    v8 = 0;
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)", 131, CFSTR(">> "), (uint64_t)CFSTR("value=%@"), v9, v10, v11, v8);
  return v8;
}

uint64_t _CallStackSymbolsIncludeFrameworkWithName(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(a1);
        v6 |= objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "rangeOfString:options:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("^[ 0-9]*%@ .*$"), a2), 1024) != 0x7FFFFFFFFFFFFFFFLL;
      }
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t _CurrentProcessHasDirectDatabaseAccessEntitlement()
{
  __SecTask *v0;
  void *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFErrorRef error;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  error = 0;
  v1 = (void *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.Contacts.database-allow"), &error);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "BOOLValue");
    if (!v0)
      goto LABEL_4;
    goto LABEL_3;
  }
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"BOOL _CurrentProcessHasDirectDatabaseAccessEntitlement(void)", 158, 0, (uint64_t)CFSTR("Couldn't get entitlement value: %@"), v5, v6, v7, (uint64_t)error);
  v3 = 0;
  if (v0)
LABEL_3:
    CFRelease(v0);
LABEL_4:
  if (v2)
    CFRelease(v2);
  if (error)
    CFRelease(error);
  return v3;
}

void _VerifyDirectDatabaseAccessEntitlementPresence()
{
  if (_VerifyDirectDatabaseAccessEntitlementPresence_onceToken != -1)
    dispatch_once(&_VerifyDirectDatabaseAccessEntitlementPresence_onceToken, &__block_literal_global_3);
}

uint64_t ABAddressBookDirectoryOnlyKeepFamilyDatabasesWithDSIDs(void *a1)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  const __CFString *v41;
  uint64_t v43;
  int v44;
  _QWORD v45[5];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (void *)ABCAddressBookCopyDBDirectory();
  v3 = (void *)objc_msgSend(v2, "stringByAppendingString:", CFSTR("Family/"));
  CFRelease(v2);
  v4 = open((const char *)objc_msgSend(v3, "fileSystemRepresentation"), 32);
  if (v4 == -1)
  {
    ABDiagnosticsEnabled();
    __error();
    _ABLog2(3, (uint64_t)"void ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs(CFArrayRef)", 274, 0, (uint64_t)CFSTR("error opening Family directory lock at path %@, errno %d"), v5, v6, v7, (uint64_t)v3);
  }
  v8 = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("family.plist"));
  v9 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", v8), "mutableCopy");
  if (v9)
  {
    v10 = v9;
    v44 = v4;
    v11 = (id)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("Mappings")), "mutableCopy");
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v13 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v47 != v15)
            objc_enumerationMutation(a1);
          v17 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
          v18 = objc_msgSend(v11, "objectForKey:", v17);
          if (v18)
            objc_msgSend(v12, "setObject:forKey:", v18, v17);
        }
        v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
      }
      while (v14);
    }
    v19 = objc_msgSend(v11, "count");
    if (v19 != objc_msgSend(v12, "count"))
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("Mappings"));
      v20 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v10, 200, 0, 0);
      if (v20)
        objc_msgSend(v20, "writeToFile:atomically:", v8, 0);
    }
    v21 = (void *)objc_msgSend((id)objc_msgSend(v12, "allValues"), "arrayByAddingObject:", CFSTR("family.plist"));
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs_block_invoke;
    v45[3] = &unk_1E3CA3890;
    v45[4] = v3;
    v22 = (void *)objc_msgSend(v21, "_cn_map:", v45);
    v23 = (void *)ABCAddressBookCopyDBDirectory();
    v24 = (void *)objc_msgSend(v23, "stringByAppendingString:", CFSTR("Family/"));
    CFRelease(v23);
    v54 = 0;
    v25 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "contentsOfDirectoryAtPath:error:", v24, &v54);
    if (!v25)
    {
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"void ABPrepareForDeletionOrDeleteAllDelegateDatabasesExcludingPaths(CFArrayRef)", 256, 0, (uint64_t)CFSTR("error fetching family directory contents %@:"), v26, v27, v28, v54);
    }
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v29 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v51;
      do
      {
        for (j = 0; j != v30; ++j)
        {
          if (*(_QWORD *)v51 != v31)
            objc_enumerationMutation(v25);
          v33 = objc_msgSend(v24, "stringByAppendingPathComponent:", *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j));
          if ((objc_msgSend(v22, "containsObject:", v33) & 1) == 0)
          {
            v55 = 0;
            if (!ABCAddressBookIsDirectoryMarkedForDeletion(v33, &v55))
            {
              ABCAddressBookMarkDirectoryForDeletion(v33);
              continue;
            }
            if (v55)
            {
              v56 = 0;
              v34 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v33, &v56);
              ABDiagnosticsEnabled();
              if ((v34 & 1) != 0)
              {
                _ABLog2(5, (uint64_t)"void ABAddressBookDeleteDatabaseAtPath(CFStringRef)", 231, 0, (uint64_t)CFSTR("ABAddressBookDeleteDatabaseAtURL deleted database directory at URL: %@."), v35, v36, v37, v33);
                continue;
              }
              v43 = v33;
              v38 = 3;
              v39 = "void ABAddressBookDeleteDatabaseAtPath(CFStringRef)";
              v40 = 229;
              v41 = CFSTR("could not delete database at path:%@ :%@");
            }
            else
            {
              if (!ABDiagnosticsEnabled())
                continue;
              v38 = 6;
              v39 = "void ABAddressBookPrepareDirectoryForDeletionOrDeleteIfPossibleAtPath(CFStringRef)";
              v40 = 244;
              v41 = CFSTR("Database already marked for deletion but not yet eligible for unlink. Delete will not occur until this call is repeated on a subsequent system reboot.");
            }
            _ABLog2(v38, (uint64_t)v39, v40, 0, (uint64_t)v41, v35, v36, v37, v43);
          }
        }
        v30 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
      }
      while (v30);
    }
    v4 = v44;
  }
  return close(v4);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessMigrationAndResetSortKeys(const __CFString *a1, int a2, int a3)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, a2, 0, a3);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessMigration(const __CFString *a1, int a2)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, a2, 0, 1);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessLinking(const __CFString *a1, int a2)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, 0, a2, 1);
}

ABAddressBookRef ABAddressBookCreate(void)
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreate(void)", 476, v0, 0, v1, v2, v3, (uint64_t)v11);
    CFRelease(v0);
  }
  v4 = !ABLinkedOnOrAfter() && !ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled();
  v5 = ABAddressBookCreateWithOptionsAndPolicy(0, v4, 0);
  if (ABLogAPIUsage())
  {
    v6 = ABLogAddressBook((uint64_t)v5);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreate(void)", 484, CFSTR(">> "), (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
  }
  return v5;
}

BOOL ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int AppBooleanValue;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled(void)", 1540, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  CFPreferencesSynchronize(CFSTR(".GlobalPreferences"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("ABForceNullDatabaseForAccessDenied"), CFSTR(".GlobalPreferences"), 0);
  if (ABLogAPIUsage())
  {
    v5 = ABLogStringForBool(AppBooleanValue != 0);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled(void)", 1546, CFSTR(">> "), (uint64_t)CFSTR("override=%@"), v6, v7, v8, (uint64_t)v5);
  }
  return AppBooleanValue != 0;
}

CFTypeRef ABAddressBookCopyDatabaseDirectory(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)", 490, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABCAddressBookCopyAddressBookDBDirectory(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)", 494, CFSTR(">> "), (uint64_t)CFSTR("databaseDirectory=%@"), v9, v10, v11, (uint64_t)v8);
  return v8;
}

void ABAddressBookSetIsBackgroundProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)", 500, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseSetShouldYieldWhenRequested();
  CPSqliteDatabaseSetShouldRequestUnlock();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)", 507, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABAddressBookRegisterYieldBlock(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v11);
    v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))", 512, v12, (uint64_t)CFSTR("%@"), v14, v15, v16, v13);
    CFRelease(v12);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
  v17 = *(const void **)(a1 + 272);
  if (a2)
    v18 = _Block_copy(a2);
  else
    v18 = 0;
  *(_QWORD *)(a1 + 272) = v18;
  if (v17)
    _Block_release(v17);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))", 527, CFSTR(">> "), 0, v19, v20, v21, a9);
}

CFStringRef ABAddressBookSetSaveTransactionIdentifier(CFStringRef result, CFStringRef theString)
{
  CFStringRef v3;
  const void *info;

  if (result)
  {
    v3 = result;
    info = (const void *)result[11].info;
    if (info)
      CFRelease(info);
    result = 0;
    if (theString)
      result = CFStringCreateCopy(0, theString);
    v3[11].info = (uint64_t)result;
  }
  return result;
}

CFStringRef ABAddressBookCopySaveTransactionIdentifier(uint64_t a1)
{
  const __CFString *v1;

  if (a1 && (v1 = *(const __CFString **)(a1 + 360)) != 0)
    return CFStringCreateCopy(0, v1);
  else
    return 0;
}

uint64_t ABAddressBookSetIgnoresGuardianRestrictions(uint64_t result, int a2)
{
  int v2;

  if (result)
  {
    if (a2)
      v2 = 0x200000;
    else
      v2 = 0;
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFFDFFFFF | v2;
  }
  return result;
}

uint64_t ABAddressBookSetIgnoresContactProviderRestrictions(uint64_t result, int a2)
{
  int v2;

  if (result)
  {
    if (a2)
      v2 = 0x1000000;
    else
      v2 = 0;
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFEFFFFFF | v2;
  }
  return result;
}

BOOL ABAddressBookIgnoresContactProviderRestrictions(uint64_t a1)
{
  return a1 && (*(_BYTE *)(a1 + 379) & 1) != 0;
}

uint64_t ABAddressBookSetSuppressChangeNotifications(uint64_t result, int a2)
{
  int v2;

  if (result)
  {
    if (a2)
      v2 = 0x800000;
    else
      v2 = 0;
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFF7FFFFF | v2;
  }
  return result;
}

BOOL ABAddressBookHasMeCardChanges(uint64_t a1)
{
  return a1 && (*(_BYTE *)(a1 + 378) & 4) != 0;
}

BOOL ABAddressBookSave(ABAddressBookRef addressBook, CFErrorRef *error)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)", 639, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (ABAddressBookIsAccessPermitted(error))
    v10 = ABCSave((uint64_t)addressBook);
  else
    v10 = 0;
  if (ABLogAPIUsage())
  {
    v11 = ABLogStringForBool(v10);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)", 646, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

BOOL ABAddressBookIsAccessPermitted(CFErrorRef *a1)
{
  int v2;
  int v3;

  v2 = ABTCCIsAccessGranted();
  v3 = v2;
  if (a1 && !v2)
    *a1 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 1, 0);
  return v3 != 0;
}

BOOL ABAddressBookHasUnsavedChanges(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)", 652, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (addressBook)
    LODWORD(addressBook) = CPRecordStoreHasUnsavedChanges();
  if (ABLogAPIUsage())
  {
    v8 = ABLogStringForBool((int)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)", 660, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v9, v10, v11, (uint64_t)v8);
  }
  return (char)addressBook;
}

BOOL ABAddressBookAddRecord(ABAddressBookRef addressBook, ABRecordRef record, CFErrorRef *error)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 666, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(error))
    v12 = ABCAddRecord(addressBook, record, (CFTypeRef *)error);
  else
    v12 = 0;
  if (ABLogAPIUsage())
  {
    v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 673, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

BOOL ABAddressBookRemoveRecord(ABAddressBookRef addressBook, ABRecordRef record, CFErrorRef *error)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 679, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(error))
    v12 = ABCRemoveRecord((uint64_t)addressBook, record, (const void **)error);
  else
    v12 = 0;
  if (ABLogAPIUsage())
  {
    v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 686, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

uint64_t ABAddressBookCopyUniqueIdentifier(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 692, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = *(const void **)(a1 + 64);
  if (v8
    || (CPRecordStoreGetDatabase(),
        v8 = (const void *)CPSqliteDatabaseCopyUniqueIdentifier(),
        (*(_QWORD *)(a1 + 64) = v8) != 0))
  {
    CFRetain(v8);
    v9 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v9 = 0;
  }
  if (ABDiagnosticsEnabled())
    _ABLog2(7, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 704, 0, (uint64_t)CFSTR("returning %@"), v10, v11, v12, v9);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 705, CFSTR(">> "), (uint64_t)CFSTR("uniqueIdentifier=%@"), v13, v14, v15, v9);
  return v9;
}

void ABAddressBookSetUniqueIdentifierToNULL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)", 711, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  v16 = *(const void **)(a1 + 64);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)", 719, CFSTR(">> "), 0, v17, v18, v19, a9);
}

CFURLRef ABAddressBookCopyBundleURL()
{
  __CFBundle *v0;

  v0 = (__CFBundle *)_ABBundle();
  return CFBundleCopyBundleURL(v0);
}

CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef label)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)", 743, v3, (uint64_t)CFSTR("label=%@"), v4, v5, v6, (uint64_t)label);
    CFRelease(v3);
  }
  v7 = ABAddressBookCopyLocalizedLabelAllowingAbbreviations(label, 1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)", 747, CFSTR(">> "), (uint64_t)CFSTR("localizedLabel=%@"), v8, v9, v10, (uint64_t)v7);
  return v7;
}

const __CFString *ABAddressBookCopyLocalizedLabelAllowingAbbreviations(const __CFString *a1, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFBundle *v9;
  const __CFString *v10;
  const void *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    ABLogStringForBool(a2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)", 753, v5, (uint64_t)CFSTR("label=%@, allowAbbrevations=%@"), v6, v7, v8, (uint64_t)a1);
    CFRelease(v5);
  }
  v9 = (__CFBundle *)_ABBundle();
  if (!a2)
  {
    v12 = CFBundleCopyLocalizedString(v9, a1, a1, CFSTR("NonAbbreviated"));
    goto LABEL_8;
  }
  v10 = CFBundleCopyLocalizedString(v9, a1, CFSTR("notFound"), CFSTR("Localized"));
  if (CFStringCompare(v10, CFSTR("notFound"), 0))
    goto LABEL_9;
  CFRelease(v10);
  v11 = (const void *)objc_msgSend(MEMORY[0x1E0D13B08], "localizedStringForPostalAddressString:returningNilIfNotFound:", a1, 0);
  if (v11)
  {
    v12 = (const __CFString *)CFRetain(v11);
LABEL_8:
    v10 = v12;
LABEL_9:
    if (v10)
      goto LABEL_11;
  }
  v10 = (const __CFString *)CFRetain(&stru_1E3CA4E68);
LABEL_11:
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)", 772, CFSTR(">> "), (uint64_t)CFSTR("localizedLabel=%@"), v13, v14, v15, (uint64_t)v10);
  return v10;
}

void *ABAddressBookCopyLocalizedStringsForLanguageArray(void *a1)
{
  const __CFString *v2;
  __CFString *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFBundle *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogStringForStringArray(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 778, v3, (uint64_t)CFSTR("languageArray=%@"), v5, v6, v7, (uint64_t)v4);
    CFRelease(v3);
  }
  if (a1)
  {
    v8 = (__CFBundle *)_ABBundle();
    v9 = CFBundleCopyBundleLocalizations(v8);
    if (v9 && (v10 = v9, v11 = CFBundleCopyLocalizationsForPreferences(v9, (CFArrayRef)a1), CFRelease(v10), v11))
    {
      if (CFArrayGetCount(v11) < 1)
      {
        a1 = 0;
      }
      else
      {
        CFArrayGetValueAtIndex(v11, 0);
        a1 = (void *)CFBundleCopyLocalizedStringTableForLocalization();
      }
      CFRelease(v11);
    }
    else
    {
      a1 = 0;
    }
  }
  if (ABDiagnosticsEnabled())
  {
    v12 = ABLogStringForDictionary(a1);
    _ABLog2(7, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 801, 0, (uint64_t)CFSTR("dictionary={\n%@\n}"), v13, v14, v15, v12);
  }
  if (ABLogAPIUsage())
  {
    v16 = objc_msgSend(a1, "count");
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 802, CFSTR(">> "), (uint64_t)CFSTR("localized strings count = %ld"), v17, v18, v19, v16);
  }
  return a1;
}

void ABAddressBookBeginExclusiveRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookBeginExclusiveRead(ABAddressBookRef)", 810, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCAddressBookBeginExclusiveRead(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookBeginExclusiveRead(ABAddressBookRef)", 812, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABAddressBookEndExclusiveRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookEndExclusiveRead(ABAddressBookRef)", 817, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCAddressBookEndExclusiveRead(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookEndExclusiveRead(ABAddressBookRef)", 819, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABAddressBookProcessAddedRecords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookProcessAddedRecords(ABAddressBookRef)", 824, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCProcessAddedRecords(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookProcessAddedRecords(ABAddressBookRef)", 826, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABProcessAddedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABProcessAddedImages(ABAddressBookRef)", 833, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCProcessAddedImages(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABProcessAddedImages(ABAddressBookRef)", 835, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABInvalidateCachedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABInvalidateCachedImages(ABAddressBookRef)", 842, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCInvalidateCachedImages(a1);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABInvalidateCachedImages(ABAddressBookRef)", 844, CFSTR(">> "), 0, v16, v17, v18, a9);
}

uint64_t ABAddressBookFlushStatementCache(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookFlushStatementCache(ABAddressBookRef)", 856, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    CPRecordStoreGetDatabase();
    result = CPSqliteDatabaseConnectionForWriting();
    if (result)
      return CPSqliteConnectionFlushStatementCache();
  }
  return result;
}

uint64_t ABAddressBookSaveWithConflictPolicy(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)", 871, v7, (uint64_t)CFSTR("%@, policy=%i, error=%p"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(a3))
    v12 = ABCAddressBookSaveWithConflictPolicy(a1, a2, a3);
  else
    v12 = 0;
  if (ABLogAPIUsage())
  {
    v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)", 878, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

CFMutableArrayRef ABAddressBookCopyAllLabels(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFMutableArrayRef v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)", 884, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookCopyAllLabelsForProperty(a1, 0xFFFFFFFFLL);
  if (ABLogAPIUsage())
  {
    v9 = ABLogStringForStringArray(v8);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)", 886, CFSTR(">> "), (uint64_t)CFSTR("labels=%@"), v10, v11, v12, (uint64_t)v9);
  }
  return v8;
}

CFMutableArrayRef ABAddressBookCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFMutableArrayRef v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)", 892, v5, (uint64_t)CFSTR("%@, property=%i"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  v10 = ABCCopyAllLabelsForProperty(a1, a2);
  if (ABLogAPIUsage())
  {
    v11 = ABLogStringForStringArray(v10);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)", 894, CFSTR(">> "), (uint64_t)CFSTR("labels=%@"), v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

void ABAddressBookDeleteLabel(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v11);
    v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)", 900, v12, (uint64_t)CFSTR("%@, label=%@"), v14, v15, v16, v13);
    CFRelease(v12);
  }
  ABCDeleteLabel(a1, a2);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)", 902, CFSTR(">> "), 0, v17, v18, v19, a9);
}

void ABAddressBookSetIntegerProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)", 919, v11, (uint64_t)CFSTR("%@, key=%@, value=%i"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  CPSqliteConnectionSetIntegerForProperty();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)", 925, CFSTR(">> "), 0, v16, v17, v18, a9);
}

uint64_t ABAddressBookCopyValueForProperty(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)", 930, v3, (uint64_t)CFSTR("%@, key=%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v8 = CPSqliteConnectionCopyValueForProperty();
  if (ABLogAPIUsage())
  {
    v12 = CFSTR("nil");
    if (v8)
      v12 = (const __CFString *)v8;
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)", 936, CFSTR(">> "), (uint64_t)CFSTR("value=%@"), v9, v10, v11, (uint64_t)v12);
  }
  return v8;
}

void ABAddressBookSetValueForProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)", 942, v11, (uint64_t)CFSTR("%@, key=%@, value=%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  CPSqliteConnectionSetValueForProperty();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)", 948, CFSTR(">> "), 0, v16, v17, v18, a9);
}

uint64_t ABAddressBookGetNextSequenceNumber(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)", 965, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookGetSequenceNumber(a1) + 1;
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)", 967, CFSTR(">> "), (uint64_t)CFSTR("nextSequenceNumber=%i"), v9, v10, v11, v8);
  return v8;
}

uint64_t ABAddressBookGetImagesSequenceNumber(const __CFString *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SequenceNumber;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)", 973, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  ABCAddressBookGetImageStore(a1);
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)", 978, CFSTR(">> "), (uint64_t)CFSTR("sequenceNumber=%i"), v9, v10, v11, SequenceNumber);
  return SequenceNumber;
}

__CFDictionary *ABAddressBookCopyChangesSinceSequenceNumber(uint64_t a1, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int valuePtr;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)", 991, v5, (uint64_t)CFSTR("%@, sequenceNumber=%i"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v12 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToLabels"), v12);
    CFRelease(v12);
  }
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v13 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToPhoneLabels"), v13);
    CFRelease(v13);
  }
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v14 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToEmailLabels"), v14);
    CFRelease(v14);
  }
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v15 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToNames"), v15);
    CFRelease(v15);
  }
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v16 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToBirthdays"), v16);
    CFRelease(v16);
  }
  valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v17 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("ABChangesToMeCards"), v17);
    CFRelease(v17);
  }
  if (ABLogAPIUsage())
  {
    v18 = ABLogStringForDictionary(Mutable);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)", 1037, CFSTR(">> "), (uint64_t)CFSTR("changes={\n%@\n}"), v19, v20, v21, v18);
  }
  return Mutable;
}

uint64_t ABAddressBookForceResetSortData(uint64_t a1)
{
  uint64_t result;
  void *v3;
  void *v4;
  double v5;
  void *v6;

  CPRecordStoreGetDatabase();
  result = CPSqliteDatabaseConnectionForReading();
  if (result)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v4 = v3;
    if (ABAddressBookForceResetSortData_lastForceResetAttempt)
    {
      result = objc_msgSend(v3, "timeIntervalSinceDate:");
      if (v5 < 600.0)
        return result;
      v6 = (void *)ABAddressBookForceResetSortData_lastForceResetAttempt;
    }
    else
    {
      v6 = 0;
    }

    ABAddressBookForceResetSortData_lastForceResetAttempt = v4;
    CPSqliteConnectionSetIntegerForProperty();
    return ABCStartSortDataReset(a1);
  }
  return result;
}

void ABAddressBookResetSortDataInProcessIfNeeded()
{
  const __CFString *v0;
  ABAddressBookRef v1;

  v0 = (const __CFString *)ABCAddressBookCopyDBDirectory();
  v1 = ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(v0, 0, 0, 0);
  CFRelease(v0);
  if (v1)
  {
    if ((ABCIsSortDataValid((uint64_t)v1, 0) & 1) == 0)
      ABCResetSortData((uint64_t)v1, 100);
    CFRelease(v1);
  }
}

BOOL ABAddressBookSetMeCard(const void *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogStringForPerson(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMeCard(ABRecordRef)", 1174, v3, (uint64_t)CFSTR("me=%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABCGetAddressBookForRecord();
  v9 = ABAddressBookSetMe(v8, a1);
  if (ABLogAPIUsage())
  {
    v10 = ABLogStringForBool(v9);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMeCard(ABRecordRef)", 1179, CFSTR(">> "), (uint64_t)CFSTR("result=%@"), v11, v12, v13, (uint64_t)v10);
  }
  return v9;
}

BOOL ABAddressBookSetMe(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ABRecordRef v10;
  NSObject *v11;
  _BOOL8 v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t RecordID;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint8_t v34[16];
  uint8_t v35[8];
  CFTypeRef cf;
  uint8_t buf[16];

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    ABLogStringForPerson(a2);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)", 1201, v5, (uint64_t)CFSTR("%@, me=%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (a2)
  {
    v10 = ABPersonCopySource(a2);
    v11 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_DEFAULT, "AddressBook will set the Me card", buf, 2u);
    }
    if (v10)
    {
      cf = 0;
      v12 = ABSourceSetMe(v10, a2, (CFAllocatorRef *)&cf);
      v13 = ABOSLogMeCardChanges();
      v14 = v13;
      if (v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_19BC4B000, v14, OS_LOG_TYPE_INFO, "AddressBook did successfully set the Me card", v35, 2u);
        }
        RecordID = ABRecordGetRecordID(v10);
        ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("MeSourceID"), RecordID, v16, v17, v18, v19, v20, v33);
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        ABAddressBookSetMe_cold_2((const __CFString **)&cf, v14);
      }
      if (cf)
        CFRelease(cf);
      CFRelease(v10);
    }
    else
    {
      v27 = ABOSLogMeCardChanges();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        ABAddressBookSetMe_cold_1();
      v12 = 0;
    }
  }
  else
  {
    v21 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_19BC4B000, v21, OS_LOG_TYPE_DEFAULT, "AddressBook will clear the existing Me card", v34, 2u);
    }
    ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("MeSourceID"), 0xFFFFFFFFLL, v22, v23, v24, v25, v26, v33);
    ABCDBContextLogChangeForPerson(*(_QWORD *)(a1 + 16), 0, 0xAu);
    v12 = 1;
  }
  if (ABLogAPIUsage())
  {
    v28 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)", 1230, CFSTR(">> "), (uint64_t)CFSTR("success=%@"), v29, v30, v31, (uint64_t)v28);
  }
  return v12;
}

CFArrayRef ABAddressBookCopyArrayOfAllMeCards(const void *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  const void *v9;
  CFArrayRef v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)", 1185, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABAddressBookCopyMe(a1);
  if (v8)
  {
    v9 = v8;
    v10 = ABPersonCopyArrayOfAllLinkedPeople(v8);
    CFRelease(v9);
  }
  else
  {
    v10 = 0;
  }
  if (ABLogAPIUsage())
  {
    v11 = ABLogStringForPeople(v10);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)", 1195, CFSTR(">> "), (uint64_t)CFSTR("meCards=%@"), v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

void ABAddressBookClearPreferredMeSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("MeSourceID"), 0xFFFFFFFFLL, a4, a5, a6, a7, a8, v9);
  ABCDBContextLogChangeForPerson(*(_QWORD *)(a1 + 16), 0, 0xAu);
}

BOOL ABAddressBookSetBestMeIfNeeded(const void *a1, void *a2, void *a3, void *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  _BOOL8 v15;
  uint64_t v16;
  CFRunLoopRef Current;
  void *v18;
  uint64_t (*v19)(void);
  uint64_t (*v20)(void);
  void *v21;
  void *active;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const __CFDictionary *Mutable;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  ABRecordRef v34;
  const void *v35;
  const __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  void *v45;
  void *v46;
  id v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _DWORD v53[32];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)", 1358, v9, (uint64_t)CFSTR("%@, first=%@, last=%@, email=%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  v14 = ABAddressBookCopyMe(a1);
  if (v14)
  {
    CFRelease(v14);
    v15 = 0;
    goto LABEL_44;
  }
  if (!objc_msgSend(a2, "length"))
    a2 = 0;
  if (!objc_msgSend(a3, "length"))
    a3 = 0;
  v47 = 0;
  v48 = 0;
  if (objc_msgSend(a4, "length"))
    v16 = (uint64_t)a4;
  else
    v16 = 0;
  v45 = 0;
  v46 = 0;
  Current = CFRunLoopGetCurrent();
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke;
  v44[3] = &__block_descriptor_40_e42_v28__0__ABSearchOperation_8__NSArray_16B24l;
  v44[4] = Current;
  v18 = (void *)objc_opt_new();
  objc_msgSend(v18, "setMaxConcurrentOperationCount:", 1);
  _addOperation((uint64_t)a2, kABPersonFirstNameProperty, (uint64_t)&v48, (uint64_t)v44, (uint64_t)a1, v18);
  v41 = a3;
  _addOperation((uint64_t)a3, kABPersonLastNameProperty, (uint64_t)&v47, (uint64_t)v44, (uint64_t)a1, v18);
  _addOperation(v16, kABPersonEmailProperty, (uint64_t)&v46, (uint64_t)v44, (uint64_t)a1, v18);
  v19 = ABPhoneUtilitiesCopyDevicePhoneNumber();
  if (v19)
  {
    v20 = v19;
    if (CFStringGetLength((CFStringRef)v19))
    {
      v21 = (void *)objc_opt_new();
      active = (void *)CPPhoneNumberCopyActiveCountryCode();
      objc_msgSend(v21, "setPredicate:", +[ABSearchOperation personPredicateWithPhoneLike:countryHint:addressBook:](ABSearchOperation, "personPredicateWithPhoneLike:countryHint:addressBook:", v20, active, a1));

      objc_msgSend(v21, "setContext:", &v45);
      objc_msgSend(v21, "setProgressBlock:", v44);
      objc_msgSend(v21, "setAddressBook:", a1);
      objc_msgSend(v18, "addOperation:", v21);

    }
    CFRelease(v20);
  }
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v23 = (void *)objc_msgSend(v18, "operations");
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
  if (v24)
  {
    v25 = v24;
    while (2)
    {
      v26 = *(_QWORD *)v50;
LABEL_19:
      v27 = 0;
      while (1)
      {
        if (*(_QWORD *)v50 != v26)
          objc_enumerationMutation(v23);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * v27), "isFinished"))
          break;
        if (v25 == ++v27)
        {
          v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
          if (v25)
            goto LABEL_19;
          goto LABEL_27;
        }
      }
      v28 = (void *)objc_opt_new();
      CFRunLoopRunInMode(kABSearchOperationRunloopMode, 10.0, 1u);

      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v23 = (void *)objc_msgSend(v18, "operations");
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
      if (v25)
        continue;
      break;
    }
  }
LABEL_27:

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v30 = (void *)objc_opt_new();
  v53[0] = 0;
  v31 = v48;
  v32 = MEMORY[0x1E0C809B0];
  if (a2 && v41 && v48 && v47)
  {
    objc_msgSend(v48, "intersectSet:");

    v47 = v48;
    v31 = v48;
  }
  _countInstancesOfRecord(Mutable, v31, v53, v30);
  _countInstancesOfRecord(Mutable, v47, v53, v30);
  _countInstancesOfRecord(Mutable, v46, v53, v30);
  _countInstancesOfRecord(Mutable, v45, v53, v30);
  if ((unint64_t)objc_msgSend(v30, "count") >= 2)
  {
    v33 = (void *)objc_opt_new();
    v43[0] = v32;
    v43[1] = 3221225472;
    v43[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke_2;
    v43[3] = &unk_1E3CA3840;
    v43[4] = v33;
    objc_msgSend(v30, "enumerateObjectsUsingBlock:", v43);
    if (objc_msgSend(v33, "count"))
    {
      v34 = ABAddressBookCopyDefaultSource(a1);
      v42[0] = v32;
      v42[1] = 3221225472;
      v42[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke_3;
      v42[3] = &__block_descriptor_40_e11_q24__0_8_16l;
      v42[4] = v34;
      objc_msgSend(v30, "sortUsingComparator:", v42);
      if (v34)
        CFRelease(v34);
      v35 = (const void *)objc_msgSend(v30, "lastObject");
    }
    else
    {
      v35 = 0;
    }

    if (!v35)
      goto LABEL_41;
LABEL_38:
    v15 = ABAddressBookSetMe((uint64_t)a1, v35);
    goto LABEL_42;
  }
  v35 = (const void *)objc_msgSend(v30, "lastObject");
  if (v35)
    goto LABEL_38;
LABEL_41:
  v15 = 0;
LABEL_42:

  if (Mutable)
    CFRelease(Mutable);
LABEL_44:
  if (ABLogAPIUsage())
  {
    v36 = ABLogStringForBool(v15);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)", 1487, CFSTR(">> "), (uint64_t)CFSTR("changed=%@"), v37, v38, v39, (uint64_t)v36);
  }
  return v15;
}

void _addOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12;

  if (a1)
  {
    v12 = (id)objc_opt_new();
    objc_msgSend(v12, "setPredicate:", +[ABSearchOperation personPredicateWithValue:comparison:forProperty:addressBook:](ABSearchOperation, "personPredicateWithValue:comparison:forProperty:addressBook:", a1, 0, a2, a5));
    objc_msgSend(v12, "setContext:", a3);
    objc_msgSend(v12, "setProgressBlock:", a4);
    objc_msgSend(v12, "setAddressBook:", a5);
    objc_msgSend(a6, "addOperation:", v12);

  }
}

uint64_t _countInstancesOfRecord(const __CFDictionary *a1, void *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(a2);
        v12 = *(const void **)(*((_QWORD *)&v14 + 1) + 8 * v11);
        v13 = (const void *)(CFDictionaryGetValue(a1, v12) + 1);
        if ((_DWORD)v13 != *a3)
        {
          if (v13 <= *a3)
            goto LABEL_10;
          *a3 = (_DWORD)v13;
          objc_msgSend(a4, "removeAllObjects");
        }
        objc_msgSend(a4, "addObject:", v12);
LABEL_10:
        CFDictionarySetValue(a1, v12, v13);
        ++v11;
      }
      while (v9 != v11);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

ABAuthorizationStatus ABAddressBookGetAuthorizationStatus(void)
{
  int v0;

  v0 = ABTCCIsAccessRestricted();
  if (ABTCCIsAccessUnknown())
    return (unint64_t)(v0 != 0);
  if (ABTCCIsAccessDenied())
  {
    if (v0)
      return 1;
    else
      return 2;
  }
  else if (ABTCCIsAccessGranted())
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef addressBook, ABAddressBookRequestAccessCompletionHandler completion)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)", 1509, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABTCCRequestAccessWithCompletion((uint64_t)completion);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)", 1511, CFSTR(">> "), 0, v10, v11, v12, v13);
}

BOOL ABAddressBookIsAvailable()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookIsAvailable(void)", 1516, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABTCCIsAccessGranted() != 0;
}

BOOL ABAddressBookIsNeverAvailable()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookIsNeverAvailable(void)", 1522, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABTCCIsAccessDenied();
}

void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v10 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)", 1552, v10, 0, v11, v12, v13, (uint64_t)v17);
    CFRelease(v10);
  }
  CFPreferencesSetAppValue(CFSTR("ABForceNullDatabaseForAccessDenied"), a1, CFSTR(".GlobalPreferences"));
  CFPreferencesSynchronize(CFSTR(".GlobalPreferences"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)", 1555, CFSTR(">> "), 0, v14, v15, v16, a9);
}

uint64_t ABAddressBookGetSharedAddressFormatsDictionary()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)", 1560, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  v4 = ABGetSharedAddressFormatsDictionary();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)", 1562, CFSTR(">> "), 0, v5, v6, v7, v9);
  return v4;
}

BOOL ABAddressBookHasLocalContent(uint64_t a1)
{
  int v2;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  if (CPSqliteConnectionStatementForSQL() && (v2 = CPSqliteStatementIntegerResult(), CPSqliteStatementReset(), v2 > 0))
    return 1;
  else
    return +[ABFacebookMigrator mayHaveFacebookContacts:](ABFacebookMigrator, "mayHaveFacebookContacts:", a1);
}

BOOL ABAddressBookShouldAnalyzeDatabase(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL8 result;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = ABOSLogAnalyzeDatabase();
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABAddressBookShouldAnalyzeDatabase_cold_1();
    return 0;
  }
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForWriting())
  {
    v9 = ABOSLogAnalyzeDatabase();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABAddressBookShouldAnalyzeDatabase_cold_2();
    return 0;
  }
  v3 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  v4 = v3;
  if (v3 == -1)
  {
    v10 = ABOSLogAnalyzeDatabase();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_DEFAULT, "Never analyzed database before! Should analyze.", (uint8_t *)v12, 2u);
    }
  }
  else
  {
    if (v3 <= a2)
      v5 = a2;
    else
      v5 = v3;
    if (v3 >= a2)
      v6 = a2;
    else
      v6 = v3;
    if (v6)
    {
      if (v5 / v6 < 10)
        return 0;
    }
    else if (v5 <= 0)
    {
      return 0;
    }
  }
  v11 = ABOSLogAnalyzeDatabase();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = v4;
    v13 = 1024;
    v14 = a2;
    _os_log_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_DEFAULT, "Old count = %d, current count = %d. Should analyze database.", (uint8_t *)v12, 0xEu);
  }
  return 1;
}

void ABAddressBookAnalyzeDatabase(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  _BYTE v16[14];
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = ABOSLogAnalyzeDatabase();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_19BC4B000, v2, OS_LOG_TYPE_DEFAULT, "Will analyze database", (uint8_t *)&v15, 2u);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CPRecordStoreGetDatabase();
    v3 = CPSqliteDatabaseConnectionForWriting();
    if (v3)
    {
      v4 = v3;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13A38], "currentEnvironment"), "timeProvider"), "timestamp");
      v6 = v5;
      v7 = sqlite3_exec(*(sqlite3 **)(v4 + 8), "PRAGMA analysis_limit=5000;", 0, 0, 0);
      if (!v7)
        v7 = sqlite3_exec(*(sqlite3 **)(v4 + 8), "ANALYZE;", 0, 0, 0);
      CPSqliteConnectionSetIntegerForProperty();
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13A38], "currentEnvironment"), "timeProvider"), "timestamp");
      v9 = objc_msgSend(MEMORY[0x1E0D13BB0], "stringForTimeInterval:", v8 - v6);
      v10 = ABOSLogAnalyzeDatabase();
      v11 = v10;
      if (v7)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v12 = sqlite3_errmsg(*(sqlite3 **)(v4 + 8));
          v15 = 67109634;
          *(_DWORD *)v16 = v7;
          *(_WORD *)&v16[4] = 2080;
          *(_QWORD *)&v16[6] = v12;
          v17 = 2114;
          v18 = v9;
          _os_log_error_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_ERROR, "Failed to analyze database: (%d) %s (%{public}@)", (uint8_t *)&v15, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 138543362;
        *(_QWORD *)v16 = v9;
        _os_log_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_DEFAULT, "Did analyze database (%{public}@)", (uint8_t *)&v15, 0xCu);
      }
    }
    else
    {
      v14 = ABOSLogAnalyzeDatabase();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        ABAddressBookShouldAnalyzeDatabase_cold_2();
    }
  }
  else
  {
    v13 = ABOSLogAnalyzeDatabase();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      ABAddressBookShouldAnalyzeDatabase_cold_1();
  }
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

CFDateRef _ABRecordCopyWrappedCPPropertyRef(const void *a1, int a2, const void *a3)
{
  int PropertyType;
  const void *valuePtr;

  valuePtr = a3;
  if (kABPersonCreationDateProperty == a2 || kABPersonModificationDateProperty == a2)
  {
    if (a3)
      return CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (double)(int)a3);
  }
  else
  {
    PropertyType = ABRecordGetPropertyType(a1, a2);
    if (PropertyType == 2)
      return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (a3)
      return (CFDateRef)CFRetain(a3);
  }
  return 0;
}

CFDateRef ABRecordCopyOriginalValue(const void *a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *OriginalProperty;
  CFDateRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const __CFString *v15;

  if (ABLogAPIUsage())
  {
    v15 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)", 79, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  OriginalProperty = (const void *)CPRecordGetOriginalProperty();
  v9 = _ABRecordCopyWrappedCPPropertyRef(a1, a2, OriginalProperty);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)", 82, CFSTR(">> "), 0, v10, v11, v12, v14);
  return v9;
}

BOOL ABRecordRemoveValue(ABRecordRef record, ABPropertyID property, CFErrorRef *error)
{
  uint64_t v3;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v10;

  v3 = *(_QWORD *)&property;
  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABRecordRemoveValue(ABRecordRef, ABPropertyID, CFErrorRef *)", 132, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCRecordRemoveValueAndReturnError(record, v3);
}

CFStringRef ABRecordCopyCompositeName(ABRecordRef record)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *Class;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABRecordCopyCompositeName(ABRecordRef)", 138, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  Class = (__int128 *)CPRecordGetClass();
  if (Class == ABCPersonClass)
    return ABPersonCopyCompositeName(record);
  if (Class == (__int128 *)ABCGroupClass[0])
    return (CFStringRef)ABGroupCopyCompositeName((uint64_t)record);
  if (Class == (__int128 *)ABCSourceClass)
    return (CFStringRef)ABSourceCopyCompositeName();
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABRecordCopyCompositeName(ABRecordRef)", 152, CFSTR(">> "), 0, v7, v8, v9, v11);
  return 0;
}

uint64_t ABRecordShow(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABRecordShow(ABRecordRef)", 160, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCRecordShow(a1);
}

uint64_t ABRecordSetIntValue(const void *a1, uint64_t a2, int a3, CFAllocatorRef *a4)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v13;

  if (ABLogAPIUsage())
  {
    v13 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABRecordSetIntValue(ABRecordRef, ABPropertyID, int, CFErrorRef *)", 178, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCRecordSetIntValueAndReturnError(a1, a2, a3, a4);
}

uint64_t ABRecordNameForProperty(uint64_t a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABRecordNameForProperty(ABRecordRef, ABPropertyID)", 190, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCRecordNameForProperty(a1, a2);
}

uint64_t ABRecordGetPolicy(const void *a1)
{
  const void *AddressBook;
  ABRecordRef v3;
  uint64_t Policy;

  AddressBook = (const void *)ABRecordGetAddressBook();
  if (ABRecordGetRecordType(a1) == 1)
  {
    v3 = ABGroupCopySource(a1);
    goto LABEL_6;
  }
  if (!ABRecordGetRecordType(a1))
  {
    v3 = ABPersonCopySource(a1);
LABEL_6:
    if (v3)
      goto LABEL_9;
    goto LABEL_7;
  }
  v3 = 0;
LABEL_7:
  if (AddressBook)
  {
    v3 = ABAddressBookCopyDefaultSource(AddressBook);
    CPRecordSetProperty();
  }
LABEL_9:
  if (!v3)
    return 0;
  Policy = ABSourceGetPolicy((uint64_t)v3);
  CFRelease(v3);
  return Policy;
}

BOOL ABPersonPropertyIsStub(int a1)
{
  return *(_QWORD *)(*((_QWORD *)ABCPersonClass + 10) + 40 * a1 + 16) == (_QWORD)&_ABCEmptyMethods;
}

CFStringRef ABPersonCopyLocalizedLowercasePropertyName(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  __CFBundle *v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLocalizedLowercasePropertyName(ABPropertyID)", 296, v2, 0, v3, v4, v5, (uint64_t)v9);
    CFRelease(v2);
  }
  v6 = ABPersonNameForProperty(a1);
  v7 = (__CFBundle *)_ABBundle();
  return CFBundleCopyLocalizedString(v7, v6, v6, CFSTR("LocalizedLowercaseProperties"));
}

CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID property)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v8;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID)", 303, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  v6 = ABPersonNameForProperty(property);
  return ABCCopyLocalizedPropertyOrLabel(v6);
}

uint64_t _setImageDataWithCropRect(const void *a1, int a2, const __CFData *a3, int a4, double a5, double a6, double a7, double a8)
{
  double v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CFTypeRef cf;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  _DWORD v48[5];

  *(_QWORD *)&v48[3] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v38 = 0;
  if (ABImageUtilsCopyImageSourceAndGetSizeFromData(a3, (CGImageSource **)&cf, (int *)&v38 + 1, (int *)&v38))
  {
    if (a4)
    {
      v16 = (double)(int)v38 - a6 - a8;
      v17 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134219008;
        v40 = a5;
        v41 = 2048;
        v42 = a6;
        v43 = 2048;
        v44 = a7;
        v45 = 2048;
        v46 = a8;
        v47 = 2048;
        *(double *)v48 = v16;
        _os_log_debug_impl(&dword_19BC4B000, v17, OS_LOG_TYPE_DEBUG, "[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} inverted Y-origin to %.2f", buf, 0x34u);
      }
    }
    else
    {
      v16 = a6;
    }
    if ((objc_msgSend(MEMORY[0x1E0D13A80], "cropRect:fitsWithinSize:", a5, v16, a7, a8, (double)SHIDWORD(v38), (double)(int)v38) & 1) == 0)
    {
      v19 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134219264;
        v40 = a5;
        v41 = 2048;
        v42 = v16;
        v43 = 2048;
        v44 = a7;
        v45 = 2048;
        v46 = a8;
        v47 = 1024;
        v48[0] = HIDWORD(v38);
        LOWORD(v48[1]) = 1024;
        *(_DWORD *)((char *)&v48[1] + 2) = v38;
        _os_log_error_impl(&dword_19BC4B000, v19, OS_LOG_TYPE_ERROR, "[Likeness Update] Attempting to set imageData with cropRect {%.2f, %.2f, %.2f, %.2f} extending beyond image of size (%i x %i), forcing a centered square cropRect", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0D13A80], "centeredSquareCropRectInRect:", 0.0, 0.0, (double)SHIDWORD(v38), (double)(int)v38);
      a5 = v20;
      v16 = v21;
      a7 = v22;
      a8 = v23;
    }
    if (v16 >= 0.0)
    {
      v25 = v16;
    }
    else
    {
      v24 = ABOSLogImageMetadata();
      v25 = 0.0;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134219008;
        v40 = a5;
        v41 = 2048;
        v42 = v16;
        v43 = 2048;
        v44 = a7;
        v45 = 2048;
        v46 = a8;
        v47 = 1024;
        v48[0] = v38;
        _os_log_error_impl(&dword_19BC4B000, v24, OS_LOG_TYPE_ERROR, "[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} Y-origin forced to 0 because it was negative (availableHeight = %i)", buf, 0x30u);
      }
    }
    v26 = ABPersonSetImageDataAndCropRect(a1, a2);
    v18 = v26;
    if (a2 == 2 && (_DWORD)v26)
    {
      v27 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134219264;
        v40 = a5;
        v41 = 2048;
        v42 = v25;
        v43 = 2048;
        v44 = a7;
        v45 = 2048;
        v46 = a8;
        v47 = 1024;
        v48[0] = HIDWORD(v38);
        LOWORD(v48[1]) = 1024;
        *(_DWORD *)((char *)&v48[1] + 2) = v38;
        _os_log_impl(&dword_19BC4B000, v27, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Setting original size imageData with cropRect {%.2f, %.2f, %.2f, %.2f} for image of size (%i x %i). Also setting thumbnail & fullscreen derivatives.", buf, 0x36u);
      }
      v28 = *MEMORY[0x1E0C9D648];
      v29 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v30 = (double)SHIDWORD(v38);
      v31 = (double)(int)v38;
      v32 = ABImageUtilsCenteredOverflowRectWithFullScreenRatioForRectWithAvailableSize(a5, v25, a7, a8, (double)SHIDWORD(v38), (double)(int)v38);
      _resizeAndStoreImageSourceForFormat(a1, (CGImageSource *)cf, 4u, 0, v28, v29, v30, v31, v32, v33, v34, v35);
      _resizeAndStoreImageSourceForFormat(a1, (CGImageSource *)cf, 0, 1, v28, v29, v30, v31, a5, v25, a7, a8);
    }
    CFRelease(cf);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return ABCPersonRemoveImageData(a1);
  }
  return v18;
}

uint64_t ABPersonSetImageDataAndCropRect(const void *a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageDataAndCropRect(ABCRecordRef, ABPersonImageFormat, CFDataRef, int, int, int, int, CFErrorRef *)", 529, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

void _resizeAndStoreImageSourceForFormat(const void *a1, CGImageSource *a2, unsigned int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double PixelHeight)
{
  double Scale;
  double PixelWidth;
  CGImage *ImageFromImageSourceWithSizeCropRectMaxSize;
  const __CFString *v25;
  const __CFString *Type;
  const __CFString *v27;
  __CFData *ScaledImageData;
  double v29;

  if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(a3, (int)a7, (int)a8))
  {
    v29 = PixelHeight;
    Scale = ABPersonImageFormatGetScale(a3);
    PixelWidth = (double)(int)ABPersonImageFormatGetPixelWidth(a3);
    PixelHeight = (double)(int)ABPersonImageFormatGetPixelHeight(a3);
  }
  else
  {
    if (!a4)
    {
      ABCPersonRemoveImageDataAndReturnError(a1, a3);
      return;
    }
    Scale = 1.0;
    v29 = PixelHeight;
    PixelWidth = a11;
  }
  ImageFromImageSourceWithSizeCropRectMaxSize = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize(a2, a7, a8, a9, a10, a11, v29, PixelWidth, PixelHeight);
  if (Scale != 1.0)
  {
    PixelWidth = PixelWidth / Scale;
    PixelHeight = PixelHeight / Scale;
  }
  v25 = (const __CFString *)*MEMORY[0x1E0CA5C10];
  Type = CGImageSourceGetType(a2);
  if (UTTypeConformsTo(v25, Type))
    v27 = CFSTR("public.png");
  else
    v27 = CFSTR("public.jpeg");
  ScaledImageData = ABImageUtilsCreateScaledImageData(ImageFromImageSourceWithSizeCropRectMaxSize, 8u, v27, 0, PixelWidth, PixelHeight, Scale);
  ABPersonSetImageDataAndCropRect(a1, a3);
  CGImageRelease(ImageFromImageSourceWithSizeCropRectMaxSize);
  if (ScaledImageData)
    CFRelease(ScaledImageData);
}

BOOL ABPersonSetImageData(ABRecordRef person, CFDataRef imageData, CFErrorRef *error)
{
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const __CFString *v14;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageData(ABRecordRef, CFDataRef, CFErrorRef *)", 479, v5, 0, v6, v7, v8, (uint64_t)v14);
    CFRelease(v5);
  }
  v15 = 0;
  ABImageUtilsCopyImageSourceAndGetSizeFromData(imageData, 0, (int *)&v15 + 1, (int *)&v15);
  v9 = ABImageUtilsCenteredSquareForRect(0.0, 0.0, (double)SHIDWORD(v15), (double)(int)v15);
  return _setImageDataWithCropRect(person, 2, imageData, 0, v9, v10, v11, v12);
}

uint64_t ABPersonSetImageDataWithCropRect(const void *a1, int a2, const __CFData *a3, int a4, int a5, int a6, int a7)
{
  return _setImageDataWithCropRect(a1, a2, a3, 0, (double)a4, (double)a5, (double)a6, (double)a7);
}

uint64_t ABPersonSetImageDataWithInvertedCropRect(const void *a1, int a2, const __CFData *a3, int a4, int a5, int a6, int a7)
{
  return _setImageDataWithCropRect(a1, a2, a3, 1, (double)a4, (double)a5, (double)a6, (double)a7);
}

uint64_t ABPersonGetDerivedFromFormatFromImageWithFormat(uint64_t a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPersonImageFormat ABPersonGetDerivedFromFormatFromImageWithFormat(ABRecordRef, ABPersonImageFormat)", 501, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonGetDerivedFromFormatFromImageWithFormat(a1, a2);
}

const __CFData *ABPersonCopyImageDataAndInvertedCropRect(uint64_t a1, int a2, _DWORD *a3, int *a4, _DWORD *a5, _DWORD *a6)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  const __CFData *v17;
  const __CFString *v19;
  int v20;
  int v21;

  if (ABLogAPIUsage())
  {
    v19 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataAndInvertedCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)", 506, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  v21 = 0;
  v16 = (const __CFData *)ABCPersonCopyImageDataAndCropRect(a1, a2, a3, &v21, a5, a6);
  v17 = v16;
  if (v16)
  {
    v20 = 0;
    if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v16, 0, 0, &v20) && a4 && a6)
      *a4 = (v20 - (v21 + *a6)) & ~((v20 - (v21 + *a6)) >> 31);
  }
  return v17;
}

uint64_t ABPersonCopyImageDataAndCropRect(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v17;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataAndCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)", 524, v12, 0, v13, v14, v15, (uint64_t)v17);
    CFRelease(v12);
  }
  return ABCPersonCopyImageDataAndCropRect(a1, a2, a3, a4, a5, a6);
}

uint64_t ABPersonSetImageDataDerivedFromFormatAndReturnError(const void *a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageDataDerivedFromFormatAndReturnError(ABRecordRef, ABPersonImageFormat, ABPersonImageFormat, CFDataRef, CFErrorRef *)", 534, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

BOOL ABPersonSetImageHashForImageData(const void *a1, void *a2, CFErrorRef *a3)
{
  const void *v5;

  v5 = (const void *)objc_msgSend(a2, "_cn_md5Hash");
  return ABRecordSetValue(a1, kABPersonImageHashProperty, v5, a3);
}

void ABPersonResetImageTypeIfNeeded(const void *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;
  NSObject *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFDataRef v9;
  CFDataRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  NSObject *v13;
  int v14;
  CFTypeRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = ABRecordCopyValue(a1, kABPersonImageTypeProperty);
  if ((objc_msgSend((id)(id)CFMakeCollectable(v2), "isEqualToString:", CFSTR("PHOTO")) & 1) == 0)
  {
    if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13850] + 16))() & 1) == 0)
    {
      ABRecordSetValue(a1, kABPersonImageTypeProperty, CFSTR("PHOTO"), 0);
      v3 = ABRecordCopyValue(a1, kABPersonInternalUUIDProperty);
      v4 = (id)CFMakeCollectable(v3);
      v5 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138543362;
        v15 = v4;
        _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "AddressBook set empty image type to photo for contact identifier %{public}@", (uint8_t *)&v14, 0xCu);
      }
    }
    v6 = ABRecordCopyValue(a1, kABPersonImageHashProperty);
    v7 = (id)CFMakeCollectable(v6);
    if (v7)
    {
      v8 = v7;
      v9 = ABPersonCopyImageDataWithFormat(a1, (ABPersonImageFormat)5u);
      if ((objc_msgSend((id)objc_msgSend((id)(id)CFMakeCollectable(v9), "_cn_md5Hash"), "isEqualToData:", v8) & 1) == 0)
      {
        v10 = ABPersonCopyImageDataWithFormat(a1, kABPersonImageFormatOriginalSize);
        if ((objc_msgSend((id)objc_msgSend((id)(id)CFMakeCollectable(v10), "_cn_md5Hash"), "isEqualToData:", v8) & 1) == 0)
        {
          ABRecordSetValue(a1, kABPersonImageTypeProperty, CFSTR("PHOTO"), 0);
          v11 = ABRecordCopyValue(a1, kABPersonInternalUUIDProperty);
          v12 = (id)CFMakeCollectable(v11);
          v13 = ABOSLogImageMetadata();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            v14 = 138543362;
            v15 = v12;
            _os_log_impl(&dword_19BC4B000, v13, OS_LOG_TYPE_DEFAULT, "AddressBook reset image type to photo for contact identifier %{public}@", (uint8_t *)&v14, 0xCu);
          }
        }
      }
    }
  }
}

CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef person, ABPersonImageFormat format)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef, ABPersonImageFormat)", 607, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return (CFDataRef)ABCPersonCopyImageData((uint64_t)person, format);
}

void ABPersonResetSharedPhotoDisplayPreference(const void *a1)
{
  CFTypeRef v2;
  const void *v3;
  CFTypeRef v4;

  v2 = ABRecordCopyValue(a1, kABPersonDisplayFlagsProperty);
  v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)(id)CFMakeCollectable(v2), "integerValue") & 0xFFFFFFFFFFFFFF3FLL | 0x80);
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  ABRecordSetValue(a1, kABPersonDisplayFlagsProperty, v4, 0);
  CFRelease(v4);
}

CFDataRef ABPersonCopyImageData(ABRecordRef person)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageData(ABRecordRef)", 601, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABPersonCopyImageDataWithFormat(person, kABPersonImageFormatOriginalSize);
}

BOOL ABPersonHasImageData(ABRecordRef person)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonHasImageData(ABRecordRef)", 614, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonHasImageData((uint64_t)person);
}

BOOL ABPersonRemoveImageData(ABRecordRef person, CFErrorRef *error)
{
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v8;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonRemoveImageData(ABRecordRef, CFErrorRef *)", 620, v3, 0, v4, v5, v6, (uint64_t)v8);
    CFRelease(v3);
  }
  return ABCPersonRemoveImageDataAndReturnError(person, -1);
}

CFComparisonResult ABPersonComparePeopleByName(ABRecordRef person1, ABRecordRef person2, ABPersonSortOrdering ordering)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFComparisonResult v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  const __CFString *v16;

  if (ABLogAPIUsage())
  {
    v16 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 627, v6, 0, v7, v8, v9, (uint64_t)v16);
    CFRelease(v6);
  }
  v10 = ABCPersonCompareNameOfPeople((uint64_t)person1, (uint64_t)person2, ordering);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 629, CFSTR(">> "), 0, v11, v12, v13, v15);
  return v10;
}

uint64_t ABAddressBookGetEmailCount(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetEmailCount(ABAddressBookRef)", 674, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _countProperty(a1, kABPersonEmailProperty, 0);
}

uint64_t _countProperty(uint64_t a1, int a2, ABRecordRef record)
{
  int v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v5 = record ? ABRecordGetRecordID(record) : -1;
  CPRecordStoreGetDatabase();
  v6 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  if (!v6)
    return 0;
  v7 = *(sqlite3_stmt **)(v6 + 8);
  if (!v7)
    return 0;
  sqlite3_bind_int(v7, 1, a2);
  if (v5 != -1)
    sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, v5);
  v8 = (int)CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v8;
}

uint64_t ABAddressBookGetPhoneNumberCountInSource(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPhoneNumberCountInSource(ABAddressBookRef, ABRecordRef)", 680, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return _countProperty(a1, kABPersonPhoneProperty, a2);
}

uint64_t ABAddressBookGetPhoneNumberCount(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPhoneNumberCount(ABAddressBookRef)", 686, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _countProperty(a1, kABPersonPhoneProperty, 0);
}

void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(uint64_t a1, int a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  const __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v13 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v12);
    v14 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(ABAddressBookRef, CFRange, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 692, v13, (uint64_t)CFSTR("%@"), v15, v16, v17, v14);
    CFRelease(v13);
  }
  ABCDBContextCopyArrayOfPhoneNumbersLabelAndPeopleInRange(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

CFMutableArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(CFMutableArrayRef Mutable)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)Mutable);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(ABAddressBookRef)", 716, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    v8 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData((uint64_t)Mutable);
    if (v8 && *(_QWORD *)(v8 + 8))
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, kABPersonEmailProperty);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t _accumulateEmails(uint64_t a1, __CFArray *a2)
{
  const unsigned __int8 *v3;
  const __CFString *v4;
  const __CFString *v5;

  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3)
  {
    v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v3, 0x8000100u);
    if (v4)
    {
      v5 = v4;
      if (CFStringGetLength(v4))
        CFArrayAppendValue(a2, v5);
      CFRelease(v5);
    }
  }
  return 0;
}

CFIndex ABAddressBookGetPersonCount(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPersonCount(ABAddressBookRef)", 742, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks((uint64_t)addressBook, 0, 0);
}

uint64_t ABAddressBookGetPersonCountInSource(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPersonCountInSource(ABAddressBookRef, ABRecordRef)", 748, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks(a1, a2, 0);
}

uint64_t ABAddressBookCopyPeopleWithLinkIdentifiers(uint64_t a1, const __CFArray *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)", 769, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  v10 = ABCPersonCopyRecordsForLinkIdentifers(a1, a2);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)", 771, CFSTR(">> "), 0, v11, v12, v13, v15);
  return v10;
}

CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)", 777, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = ABCCopyArrayOfAllPeople((uint64_t)addressBook);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)", 779, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

__CFString *ABAddressBookCopyWhereClauseForLinkedPeopleInGroupsAndSources(int a1, char a2, CFArrayRef theArray, const __CFArray *a4, uint64_t a5)
{
  CFIndex Count;
  CFIndex v11;
  const __CFAllocator *v12;
  __CFString *Mutable;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef SubqueryForLinkedPersonIDsInGroups;
  CFStringRef v17;
  CFStringRef SubqueryForLinkedPersonIDsInSources;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a4)
    {
LABEL_3:
      v11 = CFArrayGetCount(a4);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a4)
      goto LABEL_3;
  }
  v11 = 0;
LABEL_6:
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a5)
  {
    v14 = CFStringCreateWithFormat(v12, 0, CFSTR("%@."), a5);
    v15 = CFStringCreateWithFormat(v12, 0, CFSTR("%@_inner"), a5);
    if (!a1)
      goto LABEL_13;
  }
  else
  {
    v15 = CFSTR("innerPerson");
    v14 = &stru_1E3CA4E68;
    if (!a1)
      goto LABEL_13;
  }
  if ((a2 & 1) == 0)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("%@IsPreferredName = 1"), v14);
    if (!a5)
      return Mutable;
    goto LABEL_22;
  }
LABEL_13:
  if (Count < 1 || v11 < 1)
  {
    if (Count < 1)
    {
      if (v11 < 1)
      {
        CFRelease(Mutable);
        Mutable = 0;
        if (!a5)
          return Mutable;
        goto LABEL_22;
      }
      SubqueryForLinkedPersonIDsInSources = _createSubqueryForLinkedPersonIDsInSources(a4, (uint64_t)v15, a1);
    }
    else
    {
      SubqueryForLinkedPersonIDsInSources = _createSubqueryForLinkedPersonIDsInGroups(theArray, (uint64_t)v15, a1);
    }
    v17 = SubqueryForLinkedPersonIDsInSources;
    CFStringAppendFormat(Mutable, 0, CFSTR("%@ROWID IN (%@)"), v14, SubqueryForLinkedPersonIDsInSources);
  }
  else
  {
    SubqueryForLinkedPersonIDsInGroups = _createSubqueryForLinkedPersonIDsInGroups(theArray, (uint64_t)v15, a1);
    v17 = _createSubqueryForLinkedPersonIDsInSources(a4, (uint64_t)v15, a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("%@ROWID IN (%@ UNION %@)"), v14, SubqueryForLinkedPersonIDsInGroups, v17);
    CFRelease(SubqueryForLinkedPersonIDsInGroups);
  }
  CFRelease(v17);
  if (a5)
  {
LABEL_22:
    CFRelease(v14);
    CFRelease(v15);
  }
  return Mutable;
}

CFStringRef _createSubqueryForLinkedPersonIDsInGroups(const __CFArray *a1, uint64_t a2, int a3)
{
  CFIndex Count;
  __CFString *PlaceholdersForNumberOfItems;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;

  Count = CFArrayGetCount(a1);
  PlaceholdersForNumberOfItems = _createPlaceholdersForNumberOfItems(Count);
  if (a3)
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("IFNULL(abpl.PreferredNamePersonID, %@.ROWID)"), a2);
  else
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@.ROWID"), a2);
  v8 = v7;
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT %@ FROM ABGroupMembers abgm JOIN ABPerson %@ ON abgm.member_id = %@.ROWID LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE abgm.group_id IN (%@) AND abgm.member_type = 0"), v7, a2, a2, a2, PlaceholdersForNumberOfItems);
  CFRelease(v8);
  CFRelease(PlaceholdersForNumberOfItems);
  return v9;
}

CFStringRef _createSubqueryForLinkedPersonIDsInSources(const __CFArray *a1, uint64_t a2, int a3)
{
  CFIndex Count;
  __CFString *PlaceholdersForNumberOfItems;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;

  Count = CFArrayGetCount(a1);
  PlaceholdersForNumberOfItems = _createPlaceholdersForNumberOfItems(Count);
  if (a3)
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("IFNULL(abpl.PreferredNamePersonID, %@.ROWID)"), a2);
  else
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@.ROWID"), a2);
  v8 = v7;
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT %@ FROM ABPerson %@ LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE %@.StoreID IN (%@)"), v7, a2, a2, a2, PlaceholdersForNumberOfItems);
  CFRelease(v8);
  CFRelease(PlaceholdersForNumberOfItems);
  return v9;
}

uint64_t ABAddressBookBindWhereClauseForLinkedPeopleInGroupsAndSources(uint64_t result, CFArrayRef theArray, CFArrayRef a3, sqlite3_stmt *a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  CFIndex i;
  const void *ValueAtIndex;
  ABRecordID RecordID;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex j;
  const void *v19;
  ABRecordID v20;
  int v21;
  int v22;

  if ((_DWORD)result)
  {
    if (theArray)
    {
      result = CFArrayGetCount(theArray);
      v9 = (uint64_t)(ceil((double)result / 10.0) * 10.0);
      if (v9 >= 1)
      {
        v10 = result;
        for (i = 0; i != v9; ++i)
        {
          if (i >= v10)
          {
            v15 = (*a5)++;
            result = sqlite3_bind_null(a4, v15);
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            RecordID = ABRecordGetRecordID(ValueAtIndex);
            v14 = (*a5)++;
            result = sqlite3_bind_int(a4, v14, RecordID);
          }
        }
      }
    }
    if (a3)
    {
      result = CFArrayGetCount(a3);
      v16 = (uint64_t)(ceil((double)result / 10.0) * 10.0);
      if (v16 >= 1)
      {
        v17 = result;
        for (j = 0; j != v16; ++j)
        {
          if (j >= v17)
          {
            v22 = (*a5)++;
            result = sqlite3_bind_null(a4, v22);
          }
          else
          {
            v19 = CFArrayGetValueAtIndex(a3, j);
            v20 = ABRecordGetRecordID(v19);
            v21 = (*a5)++;
            result = sqlite3_bind_int(a4, v21, v20);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(const void *a1, _BOOL8 a2, CFArrayRef theArray, const __CFArray *a4, int a5)
{
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  const void *ValueAtIndex;
  int v17;
  __CFString *SelectPrefix;
  __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  sqlite3_stmt *v23;
  int v25;
  CFTypeRef cf;
  CFRange v27;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a4)
      goto LABEL_3;
  }
  else
  {
    Count = 0;
    if (a4)
    {
LABEL_3:
      v11 = CFArrayGetCount(a4);
      if (!a2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  v11 = 0;
  if (!a2)
    goto LABEL_10;
LABEL_7:
  if (!Count && !v11)
    return 0;
LABEL_10:
  if (a2 && v11 >= 1)
  {
    v13 = ABAddressBookCopyArrayOfAllSources(a1);
    if (v13)
    {
      v14 = v13;
      if (CFArrayGetCount(v13) < 1)
      {
LABEL_18:
        v17 = 0;
      }
      else
      {
        v15 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
          if ((ABRecordGetIntValue((uint64_t)ValueAtIndex, kABSourceTypeProperty) & 0x1000000) == 0)
          {
            v27.length = CFArrayGetCount(a4);
            v27.location = 0;
            if (!CFArrayContainsValue(a4, v27, ValueAtIndex))
              break;
          }
          if (++v15 >= CFArrayGetCount(v14))
            goto LABEL_18;
        }
        v17 = 1;
      }
      CFRelease(v14);
    }
    else
    {
      v17 = 0;
    }
    a2 = v17 != 0;
  }
  cf = 0;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  v19 = ABAddressBookCopyWhereClauseForLinkedPeopleInGroupsAndSources(1, a2, theArray, a4, (uint64_t)CFSTR("outerPerson"));
  if (v19)
  {
    v20 = v19;
    CFStringAppend(SelectPrefix, CFSTR(" WHERE "));
    CFStringAppend(SelectPrefix, v20);
    CFRelease(v20);
  }
  if (a5)
    v21 = CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort");
  else
    v21 = CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort");
  CFStringAppend(SelectPrefix, v21);
  CFStringAppend(SelectPrefix, CFSTR(";"));
  CPRecordStoreGetDatabase();
  v22 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData((uint64_t)a1);
  CFRelease(SelectPrefix);
  if (v22 && (v23 = *(sqlite3_stmt **)(v22 + 8)) != 0)
  {
    v25 = 1;
    ABAddressBookBindWhereClauseForLinkedPeopleInGroupsAndSources(a2, theArray, a4, v23, &v25);
    v12 = CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    v12 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(const void *a1, const __CFArray *a2, const __CFArray *a3, int a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(ABAddressBookRef, CFArrayRef, CFArrayRef, ABPersonSortOrdering)", 998, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  return _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(a1, 1, a2, a3, a4);
}

uint64_t ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(const void *a1, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(ABAddressBookRef, ABPersonSortOrdering)", 1004, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(a1, 0, 0, 0, a2);
}

CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef addressBook, CFStringRef name)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ABPersonSortOrdering SortOrdering;
  CFArrayRef result;
  const __CFArray *v12;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef, CFStringRef)", 1010, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  SortOrdering = ABPersonGetSortOrdering();
  v12 = 0;
  ABCCopyPeopleAndIdentifiersMatchingName((uint64_t)addressBook, (__CFString *)name, SortOrdering, -1, &v12, 0);
  result = v12;
  if (!v12)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  return result;
}

void ABAddressBookMapPeopleMatchingString(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v18 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v17);
    v19 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookMapPeopleMatchingString(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABPersonSortOrdering, _Bool, ABAddressBookMapPeopleCallbacks *, void *)", 1026, v18, (uint64_t)CFSTR("%@"), v20, v21, v22, v19);
    CFRelease(v18);
  }
  if (a1)
  {
    if (a2)
      ABCIteratePeopleMatchingStringWithCallbacks(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, 0);
  }
}

CFStringRef ABPersonInvalidateImageData(const __CFString *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateImageData(ABAddressBookRef, ABImagePredicateFunction, void *)", 1040, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABCPersonInvalidateImageData(a1);
}

CFStringRef ABPersonInvalidateSpecificImageData(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateSpecificImageData(ABRecordRef, ABPersonImageFormat)", 1044, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonInvalidateSpecificImageData(a1);
}

const __CFString *ABPersonInvalidateAllImageData(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateAllImageData(ABRecordRef)", 1048, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonInvalidateAllImageData(a1);
}

void *SQLInClauseStringForParameterCount(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const __CFString *v4;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("("));
  if (a1)
  {
    v3 = 0;
    do
    {
      if (v3)
        v4 = CFSTR(",?");
      else
        v4 = CFSTR("?");
      objc_msgSend(v2, "appendString:", v4);
      ++v3;
    }
    while (a1 != v3);
  }
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

uint64_t ABCopyArrayOfPeopleAtOffset(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  const __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v10 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v9);
    v11 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCopyArrayOfPeopleAtOffset(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering, int, int)", 1121, v10, (uint64_t)CFSTR("%@"), v12, v13, v14, v11);
    CFRelease(v10);
  }
  return ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(a1, a3, a4, a5, 0);
}

uint64_t ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  void *v10;
  void *v11;
  void *SelectPrefixFromRecordDescriptor;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  sqlite3_stmt *v17;
  int v18;
  sqlite3_stmt *v19;
  int v20;
  sqlite3_stmt *v21;
  int v22;
  uint64_t v23;
  _QWORD v25[6];
  _QWORD v26[6];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  if (!a2 || (objc_msgSend(a2, "deviceHasManagementRestrictions") & 1) == 0)
    return ABCopyArrayOfPreferredNamePeopleAtOffset(a1, a3, a4, a5);
  v10 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
  v11 = SQLInClauseStringForParameterCount(objc_msgSend(v10, "count"));
  SelectPrefixFromRecordDescriptor = (void *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", CFSTR(" WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) "), v11, v11);
  if (a3)
    v13 = CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort");
  else
    v13 = CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort");
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendString:", v13);
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendString:", CFSTR(" LIMIT ? OFFSET ?"));
  ABRegulatoryLogReadContactsData(a1);
  CPRecordStoreGetDatabase();
  v14 = CPSqliteDatabaseStatementForReading();
  if (v14 && (v15 = v14, *(_QWORD *)(v14 + 8)))
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x2020000000;
    v30 = 1;
    v16 = MEMORY[0x1E0C809B0];
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke;
    v26[3] = &unk_1E3CA3B48;
    v26[4] = &v27;
    v26[5] = v14;
    objc_msgSend(v10, "enumerateIndexesUsingBlock:", v26);
    v17 = *(sqlite3_stmt **)(v15 + 8);
    v18 = *((_DWORD *)v28 + 6);
    *((_DWORD *)v28 + 6) = v18 + 1;
    sqlite3_bind_blob(v17, v18, v10, 8, 0);
    v25[0] = v16;
    v25[1] = 3221225472;
    v25[2] = __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke_2;
    v25[3] = &unk_1E3CA3B48;
    v25[4] = &v27;
    v25[5] = v15;
    objc_msgSend(v10, "enumerateIndexesUsingBlock:", v25);
    v19 = *(sqlite3_stmt **)(v15 + 8);
    v20 = *((_DWORD *)v28 + 6);
    *((_DWORD *)v28 + 6) = v20 + 1;
    sqlite3_bind_int(v19, v20, a5);
    v21 = *(sqlite3_stmt **)(v15 + 8);
    v22 = *((_DWORD *)v28 + 6);
    *((_DWORD *)v28 + 6) = v22 + 1;
    sqlite3_bind_int(v21, v22, a4 & ~(a4 >> 31));
    v23 = CPRecordStoreProcessStatement();
    CPSqliteStatementReset();
    _Block_object_dispose(&v27, 8);
  }
  else
  {
    v23 = 0;
  }

  return v23;
}

void sub_19BC7D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ABCopyArrayOfPreferredNamePeopleAtOffset(uint64_t a1, int a2, int a3, int a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCopyArrayOfPreferredNamePeopleAtOffset(ABAddressBookRef, ABPersonSortOrdering, int, int)", 1216, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(a1, a2, a3, a4, 1);
}

uint64_t ABPersonRetrieveCompositeNameFormat()
{
  uint64_t result;
  int v1;

  __personCompositeNameFormat = 0;
  result = objc_msgSend(MEMORY[0x1E0CB3858], "_defaultDisplayNameOrder");
  if (result == 1)
  {
    v1 = 0;
  }
  else
  {
    if (result != 2)
      return result;
    v1 = 1;
  }
  __personCompositeNameFormat = v1;
  return result;
}

void ABPersonSetCompositeNameFormat(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v8;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetCompositeNameFormat(ABPersonCompositeNameFormat)", 1235, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  if (__personCompositeNameFormat != a1)
  {
    __personCompositeNameFormat = a1;
    if (a1)
      v6 = 2;
    else
      v6 = 1;
    objc_msgSend((id)getNSPersonNameComponentsFormatterPreferencesClass(), "setDefaultDisplayNameOrder:", v6);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.AddressBook.PreferenceChanged"), 0, 0, 1u);
  }
}

uint64_t getNSPersonNameComponentsFormatterPreferencesClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getNSPersonNameComponentsFormatterPreferencesClass_softClass;
  v8 = getNSPersonNameComponentsFormatterPreferencesClass_softClass;
  if (!getNSPersonNameComponentsFormatterPreferencesClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke;
    v2[3] = &unk_1E3CA3360;
    v2[4] = &v3;
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19BC7D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)", 1253, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personCompositeNameFormat;
}

CFStringRef ABPersonCopyCompositeNameDelimiterForRecord(ABRecordRef record)
{
  CFStringRef v2;

  v2 = 0;
  ABPersonGetCompositeNameFormatAndDelimiterForRecord(record, &v2);
  return v2;
}

CFArrayRef ABPersonCopyNamePieces(const void *a1, int a2, uint64_t *a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyNamePieces(ABRecordRef, ABPersonSortOrdering, CFIndex *)", 1344, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCPersonCopyNamePieces(a1, a2, a3);
}

uint64_t ABPersonCopy()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopy(ABRecordRef)", 1469, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return CPRecordCreateCopy();
}

uint64_t ABPersonShow(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonShow(ABRecordRef)", 1474, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonShow(a1);
}

CFMutableStringRef ABPersonCopyCompositePhoneticName(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositePhoneticName(ABRecordRef)", 1486, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonCopyCompositePhoneticName(a1);
}

void ABPersonSetShortNameFormat(unsigned int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v8;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNameFormat(ABPersonShortNameFormat)", 1521, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  if (__personShortNameFormat != a1)
  {
    __personShortNameFormat = a1;
    if (a1 < 4)
      v6 = a1 + 1;
    else
      v6 = 3;
    objc_msgSend((id)getNSPersonNameComponentsFormatterPreferencesClass(), "setShortNameFormat:", v6);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.AddressBook.PreferenceChanged"), 0, 0, 1u);
  }
}

void ABPersonSetShortNameFormatEnabled(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNameFormatEnabled(_Bool)", 1557, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (__personShortNameFormatEnabled != (_DWORD)a1)
  {
    objc_msgSend((id)getNSPersonNameComponentsFormatterPreferencesClass(), "setShortNameIsEnabled:", a1);
    __personShortNameFormatEnabled = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.AddressBook.PreferenceChanged"), 0, 0, 1u);
  }
}

void ABPersonSetShortNamePreferNicknames(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNamePreferNicknames(_Bool)", 1575, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (__personShortNamePreferNicknames != (_DWORD)a1)
  {
    objc_msgSend((id)getNSPersonNameComponentsFormatterPreferencesClass(), "setPreferNicknamesDefault:", a1);
    __personShortNamePreferNicknames = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.AddressBook.PreferenceChanged"), 0, 0, 1u);
  }
}

void _replaceNameWithInitial(CFStringRef *a1)
{
  CFStringRef v2;
  CFRange v3;

  if (CFStringGetLength(*a1) >= 2)
  {
    v3.location = 0;
    v3.length = 1;
    v2 = CFStringCreateWithSubstring(0, *a1, v3);
    CFRelease(*a1);
    *a1 = v2;
  }
}

uint64_t __PreferencesChanged()
{
  const __CFString *v0;
  uint64_t v1;
  int v2;

  v0 = (const __CFString *)ABPeoplePickerPrefs();
  CFPreferencesAppSynchronize(v0);
  __personCompositeNameFormat = 0;
  v1 = objc_msgSend(MEMORY[0x1E0CB3858], "_defaultDisplayNameOrder");
  if (v1 == 1)
  {
    v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 2)
  {
    v2 = 1;
LABEL_5:
    __personCompositeNameFormat = v2;
  }
  ABPersonRetrieveEditNameFormat();
  return ABPersonRetrieveShortNameSettings();
}

CFTypeRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(const void *a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFStringRef v8;
  CFTypeRef v9;
  const void *v10;
  CFIndex IndexForIdentifier;
  CFTypeRef v12;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ABRecordRef, int)", 1810, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  if ((a2 & 0x80000000) != 0)
    v8 = 0;
  else
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), a2);
  v9 = ABRecordCopyValue(a1, kABPersonSoundProperty);
  if (!v9)
  {
    v12 = 0;
    if (!v8)
      return v12;
    goto LABEL_13;
  }
  v10 = v9;
  IndexForIdentifier = ABMultiValueGetIndexForIdentifier(v9, a2);
  if (IndexForIdentifier == -1)
    v12 = 0;
  else
    v12 = ABMultiValueCopyValueAtIndex(v10, IndexForIdentifier);
  CFRelease(v10);
  if (v8)
LABEL_13:
    CFRelease(v8);
  return v12;
}

const void *ABPersonCopySoundIdentifierForMultiValueIdentifierIncludingLinkedContacts(const void *a1, uint64_t a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  const void *v10;
  const void *ValueAtIndex;
  CFTypeRef v12;
  const void *v13;
  int v14;
  _BOOL4 v15;

  v4 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  if (!v4)
    return 0;
  v5 = v4;
  Count = CFArrayGetCount(v4);
  v7 = ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(a1, a2);
  v8 = v7;
  if (Count < 1)
  {
    v10 = v7;
  }
  else
  {
    v9 = 1;
    v10 = v7;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v9 - 1);
      v12 = ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ValueAtIndex, a2);
      if (v12)
      {
        v13 = v12;
        if (v10)
        {
          v14 = CFEqual(v12, v10);
          v15 = v14 == 0;
          if (!v14 && !v8)
          {
            CFRelease(v10);
            v10 = 0;
            v15 = 1;
          }
          CFRelease(v13);
        }
        else
        {
          v15 = 0;
          v10 = v12;
        }
      }
      else
      {
        v15 = 0;
      }
      if (v9 >= Count)
        break;
      ++v9;
    }
    while (!v15);
  }
  CFRelease(v5);
  return v10;
}

CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef person)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)", 2446, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  v6 = (const __CFArray *)ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier((void *)person, 0);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)", 2448, CFSTR(">> "), 0, v7, v8, v9, v11);
  return v6;
}

void ABPersonSetSoundIdentifierForMultiValueIdentifier(const void *a1, uint64_t a2, void *a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  CFTypeRef v11;
  const void *v12;
  __CFString *MutableCopy;
  CFIndex IndexForIdentifier;
  CFIndex Count;
  const __CFString *v16;
  int v17;

  v17 = a2;
  if (ABLogAPIUsage())
  {
    v16 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetSoundIdentifierForMultiValueIdentifier(ABRecordRef, int, CFStringRef)", 1877, v6, 0, v7, v8, v9, (uint64_t)v16);
    CFRelease(v6);
  }
  if ((a2 & 0x80000000) != 0)
    v10 = 0;
  else
    v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), a2);
  v11 = ABRecordCopyValue(a1, kABPersonSoundProperty);
  if (v11)
  {
    v12 = v11;
    MutableCopy = (__CFString *)ABMultiValueCreateMutableCopy(v11);
    CFRelease(v12);
  }
  else
  {
    MutableCopy = (__CFString *)ABMultiValueCreateMutable(0x101u);
  }
  IndexForIdentifier = ABMultiValueGetIndexForIdentifier(MutableCopy, a2);
  if (IndexForIdentifier == -1)
  {
    if (a3)
    {
      Count = ABMultiValueGetCount(MutableCopy);
      ABMultiValueInsertAndCreateIdentifier((uint64_t)MutableCopy, a3, 0, Count, 0, &v17, 0);
    }
    if (MutableCopy)
      goto LABEL_16;
  }
  else
  {
    if (a3)
    {
      ABMultiValueReplaceValueAtIndex(MutableCopy, a3, IndexForIdentifier);
      if (!MutableCopy)
        goto LABEL_17;
LABEL_16:
      ABCRecordSetValue(a1, kABCSoundProperty, MutableCopy);
      CFRelease(MutableCopy);
      goto LABEL_17;
    }
    ABMultiValueRemoveValueAndLabelAtIndex(MutableCopy, IndexForIdentifier);
    if (MutableCopy)
      goto LABEL_16;
  }
LABEL_17:
  if (v10)
    CFRelease(v10);
}

CFComparisonResult ABPersonCompareNameOfPeople(uint64_t a1, uint64_t a2, int a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonCompareNameOfPeople(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 1918, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCPersonCompareNameOfPeople(a1, a2, a3);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumber(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumber(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)", 1932, v9, (uint64_t)CFSTR("%@, phoneNumber=%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCFindPersonMatchingPhoneNumber(a1, a2, a3, a4);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumberWithCountry(uint64_t a1, uint64_t a2, void *a3, int *a4, _QWORD *a5)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountry(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)", 1936, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  return ABCFindPersonMatchingPhoneNumberWithCountry(a1, a2, a3, a4, a5);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, int *a4, _QWORD *a5)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *, const char *)", 1940, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4, a5);
}

CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, const __CFArray **a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(ABCAddressBookRef, CFStringRef, CFStringRef, CFArrayRef *, const char *)", 1945, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4);
}

uint64_t ABAddressBookFindPersonMatchingURL(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingURL(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)", 1950, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCFindPersonMatchingURL(a1, a2, a3);
}

uint64_t ABAddressBookFindPersonMatchingEmailAddress(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingEmailAddress(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)", 1954, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCFindPersonMatchingEmailAddress(a1, a2, a3);
}

void ABAddressBookCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6)
{
  const __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v13 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v12);
    v14 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookCopyPeopleAndIdentifiersMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *)", 1968, v13, (uint64_t)CFSTR("%@"), v15, v16, v17, v14);
    CFRelease(v13);
  }
  ABCCopyPeopleAndIdentifiersMatchingName(a1, a2, a3, a4, a5, a6);
}

void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7)
{
  const __CFString *v14;
  __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v15 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v14);
    v16 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 1976, v15, (uint64_t)CFSTR("%@"), v17, v18, v19, v16);
    CFRelease(v15);
  }
  ABCCopyPeopleAndMultiValuePropertiesMatchingName(a1, a2, a3, a4, a5, a6, a7);
}

sqlite3_stmt *ABAddressBookCopyArrayOfAllPeopleMatching(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5)
{
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ABPersonSortOrdering SortOrdering;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v10);
    v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleMatching(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef)", 1983, v11, (uint64_t)CFSTR("%@"), v13, v14, v15, v12);
    CFRelease(v11);
  }
  v16 = *(_QWORD *)(a1 + 16);
  SortOrdering = ABPersonGetSortOrdering();
  return ABCDBCopyArrayOfAllPeopleMatchingString(v16, a2, SortOrdering, a3, a4, a5);
}

CFMutableArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(CFMutableArrayRef Mutable)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3_stmt *v9;
  const char *v10;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)Mutable);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(ABAddressBookRef, CFStringRef)", 2000, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    v8 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData((uint64_t)Mutable);
    if (v8 && *(_QWORD *)(v8 + 8))
    {
      Mutable = CFArrayCreateMutable(0, 0, 0);
      v9 = *(sqlite3_stmt **)(v8 + 8);
      v10 = (const char *)_CPCreateUTF8StringFromCFString();
      sqlite3_bind_text(v9, 1, v10, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t _accumulateUIDsMatchingExternalUUID(uint64_t a1, __CFArray *a2)
{
  int v3;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(a2, (const void *)v3);
  return 0;
}

uint64_t ABAddressBookFindPersonMatchingMultiValueUUID(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  const __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v7);
    v9 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)", 2024, v8, (uint64_t)CFSTR("%@, multiValueUUID=%@"), v10, v11, v12, v9);
    CFRelease(v8);
  }
  if (a1)
  {
    CPRecordStoreGetDatabase();
    v13 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v13)
    {
      v14 = *(sqlite3_stmt **)(v13 + 8);
      if (v14)
      {
        v15 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v14, 1, v15, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        if (sqlite3_step(*(sqlite3_stmt **)(v13 + 8)) == 100)
        {
          v16 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 0);
          v17 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 1);
          v18 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 2);
          CPSqliteStatementReset();
          if (v16 == -1)
          {
            a1 = 0;
            if (!a3)
            {
LABEL_13:
              if (a4)
                *a4 = v18;
              goto LABEL_15;
            }
          }
          else
          {
            a1 = ABCDBContextRecordForUIDOfType();
            if (!a3)
              goto LABEL_13;
          }
LABEL_12:
          *a3 = v17;
          goto LABEL_13;
        }
        CPSqliteStatementReset();
      }
    }
    a1 = 0;
    v18 = -1;
    v17 = -1;
    if (!a3)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_15:
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)", 2060, CFSTR(">> "), 0, v19, v20, v21, v23);
  return a1;
}

const void *ABAddressBookCopyPersonMatchingMapData(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyPersonMatchingMapData(ABAddressBookRef, CFStringRef)", 2099, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2)
    return 0;
  CFRetain(a2);
  v10 = _copyPersonMatchingPrivateProperty(a1, kABPersonMapsDataProperty, (uint64_t)a2);
  CFRelease(a2);
  return v10;
}

__CFString *ABPersonCopyStringForIndexing(void *a1, int a2, int a3)
{
  const __CFAllocator *v6;
  CFMutableStringRef Mutable;
  CFArrayRef v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v17;
  CFIndex j;
  ABPropertyID v19;
  __CFString *StringForIndexingForProperty;
  __CFString *v21;
  __CFString *v22;
  const void *v23;
  uint64_t AddressBook;
  __CFStringTokenizer *WordTokenizer;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  const __CFString *TokenAtIndex;
  const __CFAllocator *v31;
  int v32;
  void *values;

  values = a1;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a2)
    v8 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  else
    v8 = CFArrayCreate(v6, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  v9 = v8;
  if (_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken != -1)
    dispatch_once(&_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken, &__block_literal_global_262);
  v10 = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs_retVal;
  Count = CFArrayGetCount((CFArrayRef)_ABPersonGetArrayOfAllFTSPropertyIDs_retVal);
  if (v9)
  {
    v12 = Count;
    v31 = v6;
    v32 = a3;
    v13 = CFArrayGetCount(v9);
    if (v13 >= 1)
    {
      v14 = v13;
      for (i = 0; i != v14; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        if (v12 >= 1)
        {
          v17 = ValueAtIndex;
          for (j = 0; j != v12; ++j)
          {
            v19 = CFArrayGetValueAtIndex(v10, j);
            StringForIndexingForProperty = ABPersonCreateStringForIndexingForProperty(v17, v19);
            if (StringForIndexingForProperty)
            {
              v21 = StringForIndexingForProperty;
              CFStringAppend(Mutable, StringForIndexingForProperty);
              CFStringAppend(Mutable, CFSTR(" "));
              CFRelease(v21);
            }
          }
        }
      }
    }
    CFRelease(v9);
    a3 = v32;
    v6 = v31;
  }
  if (!a3)
    return Mutable;
  v22 = CFStringCreateMutable(v6, 0);
  v23 = (const void *)ABTokenListCreate();
  AddressBook = ABRecordGetAddressBook();
  WordTokenizer = ABAddressBookGetWordTokenizer(AddressBook);
  ABTokenListPopulateFromString((uint64_t)v23, WordTokenizer, 0, Mutable, 1, 1, 0);
  v26 = ABTokenListGetCount((uint64_t)v23);
  if (v26 >= 1)
  {
    v27 = v26;
    for (k = 0; k != v27; ++k)
    {
      TokenAtIndex = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v23, k);
      CFStringAppend(v22, TokenAtIndex);
      CFStringAppend(v22, CFSTR(" "));
    }
  }
  CFRelease(v23);
  CFRelease(Mutable);
  return v22;
}

uint64_t _ABPersonGetArrayOfAllFTSPropertyIDs()
{
  if (_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken != -1)
    dispatch_once(&_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken, &__block_literal_global_262);
  return _ABPersonGetArrayOfAllFTSPropertyIDs_retVal;
}

__CFString *ABPersonCreateStringForIndexingForProperty(const void *a1, ABPropertyID property)
{
  uint64_t active;
  const void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFString *v12;
  const __CFString *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFStringRef v16;
  const __CFString *v17;
  ABPropertyType TypeOfProperty;
  __CFString *v20;
  __CFString *v21;
  uint64_t *v22;
  CFTypeRef v23;
  const __CFArray *v24;
  const void **v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFIndex v28;
  uint64_t v29;
  CFIndex j;
  const __CFDictionary *ValueAtIndex;
  const void *v32;
  const __CFDictionary *v33;
  const void **v34;
  const __CFString *Value;
  const __CFString *v36;
  const void *v37;
  __CFString *v38;

  if (kABPersonPhoneProperty == property)
  {
    active = CPPhoneNumberCopyActiveCountryCode();
    if (active)
    {
      v5 = (const void *)active;
      v6 = (const __CFArray *)ABRecordCopyValue(a1, property);
      if (v6)
      {
        v7 = v6;
        Mutable = CFStringCreateMutable(0, 0);
        Count = ABMultiValueGetCount(v7);
        if (Count >= 1)
        {
          v10 = Count;
          for (i = 0; i != v10; ++i)
          {
            v12 = (const __CFString *)ABMultiValueCopyValueAtIndex(v7, i);
            if (v12)
            {
              v13 = v12;
              CFStringAppend(Mutable, v12);
              v14 = (const __CFArray *)_PNCopyIndexStringsForAddressBookSearch();
              if (v14)
              {
                v15 = v14;
                v16 = CFStringCreateByCombiningStrings(0, v14, CFSTR(" "));
                if (v16)
                {
                  v17 = v16;
                  CFStringAppend(Mutable, CFSTR(" "));
                  CFStringAppend(Mutable, v17);
                  CFStringAppend(Mutable, CFSTR(" "));
                  CFRelease(v17);
                }
                CFRelease(v15);
              }
              CFRelease(v13);
            }
          }
        }
        goto LABEL_49;
      }
      goto LABEL_27;
    }
    return 0;
  }
  TypeOfProperty = ABPersonGetTypeOfProperty(property);
  switch(TypeOfProperty)
  {
    case 0x105u:
      v20 = (__CFString *)ABRecordCopyValue(a1, property);
      if (!v20)
        return 0;
      v21 = v20;
      if (ABPersonCreateStringForIndexingForProperty_onceToken != -1)
        dispatch_once(&ABPersonCreateStringForIndexingForProperty_onceToken, &__block_literal_global_4);
      if (kABPersonAddressProperty == property)
      {
        v22 = &ABPersonCreateStringForIndexingForProperty_addressKeys;
      }
      else if (kABPersonSocialProfileProperty == property)
      {
        v22 = &ABPersonCreateStringForIndexingForProperty_socialKeys;
      }
      else
      {
        if (kABPersonInstantMessageProperty != property)
          goto LABEL_45;
        v22 = &ABPersonCreateStringForIndexingForProperty_instantMessagingKeys;
      }
      v25 = (const void **)*v22;
      if (*v22)
      {
        v26 = ABMultiValueCopyArrayOfAllValues(v21);
        if (v26)
        {
          v27 = v26;
          v28 = CFArrayGetCount(v26);
          if (v28)
          {
            v29 = v28;
            Mutable = CFStringCreateMutable(0, 0);
            if (v29 >= 1)
            {
              for (j = 0; j != v29; ++j)
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v27, j);
                v32 = *v25;
                if (*v25)
                {
                  v33 = ValueAtIndex;
                  v34 = v25 + 1;
                  do
                  {
                    Value = (const __CFString *)CFDictionaryGetValue(v33, v32);
                    if (Value)
                    {
                      v36 = Value;
                      if (CFStringGetLength(Value))
                      {
                        CFStringAppend(Mutable, v36);
                        CFStringAppend(Mutable, CFSTR(" "));
                      }
                    }
                    v37 = *v34++;
                    v32 = v37;
                  }
                  while (v37);
                }
              }
            }
          }
          else
          {
            Mutable = 0;
          }
          CFRelease(v27);
          CFRelease(v21);
          if (!Mutable || CFStringGetLength(Mutable))
            return Mutable;
          v38 = Mutable;
          goto LABEL_46;
        }
      }
LABEL_45:
      v38 = v21;
LABEL_46:
      CFRelease(v38);
      return 0;
    case 0x101u:
      v23 = ABRecordCopyValue(a1, property);
      if (v23)
      {
        v5 = v23;
        v24 = ABMultiValueCopyArrayOfAllValues(v23);
        if (v24)
        {
          v7 = v24;
          if (CFArrayGetCount(v24))
            Mutable = (__CFString *)CFStringCreateByCombiningStrings(0, v7, CFSTR(" "));
          else
            Mutable = 0;
LABEL_49:
          CFRelease(v7);
          goto LABEL_50;
        }
LABEL_27:
        Mutable = 0;
LABEL_50:
        CFRelease(v5);
        return Mutable;
      }
      break;
    case 1u:
      return (__CFString *)ABRecordCopyValue(a1, property);
  }
  return 0;
}

__CFString *ABPersonCreateSupplementalStringForIndexingForCompositeName(const void *a1)
{
  CFMutableStringRef v2;
  __CFString *Mutable;
  const __CFAllocator *v5;
  unsigned int i;
  __CFString *v7;
  const __CFString *v8;

  v2 = ABPersonCopyCompositeName(a1);
  if (ABPersonCreateSupplementalStringForIndexingForCompositeName___onceToken != -1)
    dispatch_once(&ABPersonCreateSupplementalStringForIndexingForCompositeName___onceToken, &__block_literal_global_232);
  if (ABContentsExclusivelyInCharacterSet(v2, ABPersonCreateSupplementalStringForIndexingForCompositeName___invertedKorean))
  {
    Mutable = 0;
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    for (i = 0; i != 32; ++i)
    {
      if (i > 0x10 || ((1 << i) & 0x10116) == 0)
      {
        v7 = CFStringCreateMutable(v5, 0);
        if (v7)
        {
          v8 = v7;
          ABPersonAppendNameParts(a1, i, v7, 1, 0, 1);
          if (CFStringGetLength(v8))
          {
            CFStringAppend(Mutable, v8);
            CFStringAppend(Mutable, CFSTR(" "));
          }
          CFRelease(v8);
        }
      }
    }
  }
  if (v2)
    CFRelease(v2);
  return Mutable;
}

__CFString *ABPersonCreateSmartDialerStringForIndexingFromCFString(const __CFString *a1)
{
  __CFString *Mutable;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  uint64_t v9;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  UniChar v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  UniChar chars;
  UniChar buffer[8];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  CFStringRef v40;
  const UniChar *v41;
  const char *v42;
  uint64_t v43;
  CFIndex v44;
  uint64_t v45;
  uint64_t v46;
  CFRange v47;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    Length = CFStringGetLength(a1);
    if (Length)
    {
      MutableCopy = CFStringCreateMutableCopy(0, Length, a1);
      if (!CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0C9B358], 0))
      {
        ABDiagnosticsEnabled();
        _ABLog2(3, (uint64_t)"CFStringRef ABPersonCreateSmartDialerStringForIndexingFromCFString(CFStringRef)", 2356, 0, (uint64_t)CFSTR("Smart dialer stripDiacritics transform failure for string: %@"), v5, v6, v7, (uint64_t)a1);
      }
      v8 = CFStringGetLength(MutableCopy);
      if (v8)
      {
        v9 = v8;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        *(_OWORD *)buffer = 0u;
        v33 = 0u;
        v40 = MutableCopy;
        v43 = 0;
        v44 = v8;
        CharactersPtr = CFStringGetCharactersPtr(MutableCopy);
        CStringPtr = 0;
        v41 = CharactersPtr;
        if (!CharactersPtr)
          CStringPtr = CFStringGetCStringPtr(MutableCopy, 0x600u);
        v42 = CStringPtr;
        v45 = 0;
        v46 = 0;
        if (v9 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 64;
          while (1)
          {
            v15 = (unint64_t)v13 >= 4 ? 4 : v13;
            chars = 0;
            v16 = v44;
            if (v44 > v13)
              break;
LABEL_45:
            ++v13;
            --v12;
            ++v14;
            if (v9 == v13)
              goto LABEL_49;
          }
          if (v41)
          {
            v17 = v41[v13 + v43];
          }
          else if (v42)
          {
            v17 = v42[v43 + v13];
          }
          else
          {
            v18 = v45;
            v19 = v46 > v13 && v45 <= v13;
            if (!v19)
            {
              v20 = -v15;
              v21 = v15 + v12;
              v22 = v14 - v15;
              v23 = v13 + v20;
              v24 = v23 + 64;
              if (v23 + 64 >= v44)
                v24 = v44;
              v45 = v23;
              v46 = v24;
              if (v44 >= v22)
                v16 = v22;
              v47.length = v16 + v21;
              v47.location = v23 + v43;
              CFStringGetCharacters(v40, v47, buffer);
              v18 = v45;
            }
            v17 = buffer[v13 - v18];
          }
          chars = v17;
          v25 = v17;
          if ((unsigned __int16)(v17 - 65) > 0x19u)
          {
            if ((unsigned __int16)(v17 - 97) > 0x19u)
            {
              if ((unsigned __int16)(v17 + 223) > 0x19u)
              {
                if ((unsigned __int16)(v17 + 191) > 0x19u)
                {
                  if ((unsigned __int16)(v17 + 240) > 9u)
                    goto LABEL_39;
                  v17 += 288;
LABEL_38:
                  chars = v17;
LABEL_39:
                  if ((unsigned __int16)(v17 - 48) < 0xAu
                    || ((v19 = v17 > 0x2Bu, v28 = (1 << v17) & 0xC0900000000, !v19) ? (v29 = v28 == 0) : (v29 = 1),
                        !v29))
                  {
                    CFStringAppendCharacters(Mutable, &chars, 1);
                  }
                  goto LABEL_45;
                }
                v27 = -65345;
              }
              else
              {
                v27 = -65313;
              }
              v26 = v25 + v27;
            }
            else
            {
              v26 = v17 - 97;
            }
          }
          else
          {
            v26 = v17 - 65;
          }
          v17 = _LetterNumberMap[v26] + 48;
          goto LABEL_38;
        }
      }
LABEL_49:
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
  }
  return Mutable;
}

const void *ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(void *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int IntValue;
  int v13;
  __CFString *MutableCopy;
  __CFString *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void *values;

  values = a1;
  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a3);
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)", 2398, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  v13 = IntValue;
  if (!a3 || IntValue == -1)
    goto LABEL_10;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("WHERE PersonLink = ?"));
  v15 = MutableCopy;
  if (a2)
    CFStringAppend(MutableCopy, CFSTR(" AND StoreID IN (SELECT abs.rowid FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)"));
  v16 = (const void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v15);
  if (!v16)
    goto LABEL_10;
  if (!CFArrayGetCount((CFArrayRef)v16))
  {
    CFRelease(v16);
LABEL_10:
    if (!a2 || v13 == -1)
      v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    else
      v16 = 0;
  }
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)", 2431, CFSTR(">> "), 0, v17, v18, v19, v21);
  return v16;
}

const void *ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(void *a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AddressBook;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const __CFString *v15;

  if (ABLogAPIUsage())
  {
    v15 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)", 2436, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  AddressBook = ABRecordGetAddressBook();
  v9 = ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(a1, a2, AddressBook);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)", 2439, CFSTR(">> "), 0, v10, v11, v12, v14);
  return v9;
}

uint64_t ABPersonCopyLinkUUID(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AddressBook;
  uint64_t v7;
  int IntValue;
  int v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  const __CFString *v18;

  if (ABLogAPIUsage())
  {
    v18 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLinkUUID(ABRecordRef)", 2455, v2, 0, v3, v4, v5, (uint64_t)v18);
    CFRelease(v2);
  }
  AddressBook = ABRecordGetAddressBook();
  if (AddressBook
    && (v7 = AddressBook, CPRecordStoreGetDatabase())
    && (IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty), IntValue != -1)
    && (v9 = IntValue, v10 = CPSqliteDatabaseStatementForReading(), ABRegulatoryLogReadContactsData(v7), v10)
    && (v11 = *(sqlite3_stmt **)(v10 + 8)) != 0)
  {
    sqlite3_bind_int(v11, 1, v9);
    v12 = CPSqliteStatementCopyStringResult();
    CPSqliteStatementReset();
  }
  else
  {
    v12 = 0;
  }
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLinkUUID(ABRecordRef)", 2474, CFSTR(">> "), 0, v13, v14, v15, v17);
  return v12;
}

uint64_t ABPersonSetLinkUUID(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int IntValue;
  int v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  const char *v11;
  uint64_t v12;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetLinkUUID(ABRecordRef, CFStringRef)", 2480, v2, 0, v3, v4, v5, (uint64_t)v14);
    CFRelease(v2);
  }
  if (!ABRecordGetAddressBook())
    return 0;
  if (!CPRecordStoreGetDatabase())
    return 0;
  IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue == -1)
    return 0;
  v7 = IntValue;
  v8 = CPSqliteDatabaseStatementForWriting();
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(sqlite3_stmt **)(v8 + 8);
  if (!v10)
    return 0;
  v11 = (const char *)_CPCreateUTF8StringFromCFString();
  v12 = 1;
  sqlite3_bind_text(v10, 1, v11, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  sqlite3_bind_int(*(sqlite3_stmt **)(v9 + 8), 2, v7);
  CPSqliteStatementPerform();
  CPSqliteStatementReset();
  return v12;
}

uint64_t ABPersonLinkPerson(const void *a1, const void *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int IntValue;
  int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  sqlite3_stmt *v19;
  ABRecordID RecordID;
  int v21;
  uint64_t v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex v27;
  int v28;
  const void *ValueAtIndex;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _BOOL4 HasImageData;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFString *v50;
  uint64_t v51;
  _BOOL4 v52;
  CFTypeRef v53;

  if (ABLogAPIUsage())
  {
    v50 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2510, v4, 0, v5, v6, v7, (uint64_t)v50);
    CFRelease(v4);
  }
  result = ABRecordGetAddressBook();
  if (result)
  {
    v9 = result;
    if (result != ABRecordGetAddressBook())
      return 0;
    IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
    v11 = ABRecordGetIntValue((uint64_t)a2, kABPersonLinkProperty);
    v12 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a2);
    if (!v12)
      v12 = CFRetain(a2);
    v13 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
    if (!v13)
      v13 = CFRetain(a1);
    if (IntValue != -1 && v11 != -1)
    {
      v22 = ABPersonCopyLinkUUID((uint64_t)a2);
      v23 = ABPersonCopyArrayOfAllLinkedPeople(a2);
      if (v23)
      {
        v24 = v23;
        v53 = v12;
        Count = CFArrayGetCount(v23);
        if (Count < 1)
        {
          CFRelease(v24);
        }
        else
        {
          v26 = Count;
          v51 = v22;
          v27 = 0;
          LOBYTE(v28) = 1;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v24, v27);
            if ((_BYTE)v28)
              v28 = ABCRecordSetIntValueAndReturnError(ValueAtIndex, kABPersonLinkProperty, IntValue, 0);
            else
              v28 = 0;
            ++v27;
          }
          while (v26 != v27);
          CFRelease(v24);
          v22 = v51;
          v12 = v53;
          if (!v28)
          {
            v17 = 0;
LABEL_42:
            if (!v22)
              goto LABEL_56;
            v40 = (const void *)v22;
            goto LABEL_55;
          }
        }
      }
      if (v22)
      {
        ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(v9 + 16), v22, 5u);
      }
      else
      {
        ABDiagnosticsEnabled();
        v30 = ABLogStringForPerson(a1);
        ABLogStringForPerson(a2);
        _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2553, 0, (uint64_t)CFSTR("Failure getting toPersonLinkUUID while linking contact %@ to %@"), v31, v32, v33, v30);
      }
      v34 = ABPersonCopyLinkUUID((uint64_t)a1);
      if (v34)
      {
        v35 = (const void *)v34;
        ABCDBContextLogChangeForLinkingPersons(*(_QWORD *)(v9 + 16), a1, a2, v34);
        ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(v9 + 16), (uint64_t)v35, 4u);
        CFRelease(v35);
      }
      else
      {
        ABDiagnosticsEnabled();
        v36 = ABLogStringForPerson(a1);
        ABLogStringForPerson(a2);
        _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2563, 0, (uint64_t)CFSTR("Failure getting personLinkUUID while linking contact %@ to %@"), v37, v38, v39, v36);
      }
      v17 = 1;
      goto LABEL_42;
    }
    v15 = (IntValue & v11) == -1;
    if ((IntValue & v11) == 0xFFFFFFFF)
    {
      CPRecordStoreGetDatabase();
      v16 = CPSqliteDatabaseStatementForWriting();
      v17 = v16;
      if (!v16)
        goto LABEL_56;
      v52 = (IntValue & v11) == -1;
      v18 = v12;
      v19 = *(sqlite3_stmt **)(v16 + 8);
      if (!v19
        || (RecordID = ABRecordGetRecordID(a1),
            sqlite3_bind_int(v19, 1, RecordID),
            v21 = CPSqliteStatementPerform(),
            CPSqliteDatabaseConnectionForReading(),
            IntValue = CPSqliteConnectionRowidOfLastInsert(),
            CPSqliteStatementReset(),
            v21 != 101))
      {
        v17 = 0;
        v12 = v18;
        goto LABEL_56;
      }
      v12 = v18;
      v15 = v52;
    }
    else
    {
      if (IntValue != -1)
        goto LABEL_33;
      IntValue = v11;
      if (v11 == -1)
      {
        v17 = 0;
        goto LABEL_56;
      }
    }
    if (!ABCRecordSetIntValueAndReturnError(a1, kABPersonLinkProperty, IntValue, 0))
    {
      v17 = 0;
      goto LABEL_46;
    }
    ABCDBContextLogChangeForPerson(*(_QWORD *)(v9 + 16), a1, 5u);
LABEL_33:
    v17 = 1;
LABEL_46:
    if (v11 == -1)
    {
      if (ABCRecordSetIntValueAndReturnError(a2, kABPersonLinkProperty, IntValue, 0))
      {
        ABCDBContextLogChangeForPerson(*(_QWORD *)(v9 + 16), a2, 5u);
        v17 = 1;
      }
      else
      {
        v17 = 0;
      }
    }
    v41 = ABPersonCopyLinkUUID((uint64_t)a1);
    if (v41)
    {
      v42 = v41;
      ABCDBContextLogChangeForLinkingPersons(*(_QWORD *)(v9 + 16), a1, a2, v41);
      if (v15)
        v43 = 3;
      else
        v43 = 4;
      ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(v9 + 16), v42, v43);
      v40 = (const void *)v42;
LABEL_55:
      CFRelease(v40);
      goto LABEL_56;
    }
    ABDiagnosticsEnabled();
    v46 = ABLogStringForPerson(a1);
    ABLogStringForPerson(a2);
    _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2613, 0, (uint64_t)CFSTR("Failure getting linkUUID while linking contact %@ to %@"), v47, v48, v49, v46);
LABEL_56:
    HasImageData = ABPersonHasImageData(v12);
    v45 = ABPersonHasImageData(v13);
    if (!HasImageData || !v45)
      _updatePreferredImageForPerson(a2, 1, 1, 1);
    if (v12)
      CFRelease(v12);
    if (v13)
      CFRelease(v13);
    return v17 != 0;
  }
  return result;
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForImageIfExists(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForImageIfExists(ABRecordRef)", 2841, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return _copyPreferredPersonWithPreferredColumnIfExists(a1, 0);
}

uint64_t ABPersonUnlink(CFTypeRef a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int IntValue;
  uint64_t v7;
  const void *v8;
  uint64_t AddressBook;
  CFTypeRef v10;
  CFArrayRef v11;
  const __CFArray *v12;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  CFTypeRef ValueAtIndex;
  const void *v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v27;

  if (ABLogAPIUsage())
  {
    v27 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)", 2637, v2, 0, v3, v4, v5, (uint64_t)v27);
    CFRelease(v2);
  }
  IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  v7 = ABPersonCopyLinkUUID((uint64_t)a1);
  v8 = (const void *)v7;
  if (IntValue == -1)
  {
    v21 = 1;
    if (!v7)
      return v21;
  }
  else
  {
    AddressBook = ABRecordGetAddressBook();
    v10 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
    if (v10 == a1)
      _updatePreferredImageForPerson(a1, 0, 0, 1);
    if (v10)
      CFRelease(v10);
    v11 = ABPersonCopyArrayOfAllLinkedPeople(a1);
    if (v11)
    {
      v12 = v11;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        v15 = Count;
        for (i = 0; i != v15; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v12, i);
          if (ValueAtIndex != a1)
          {
            v18 = ValueAtIndex;
            if (ABRecordGetIntValue((uint64_t)ValueAtIndex, kABPersonLinkProperty) == IntValue)
              CFArrayAppendValue(Mutable, v18);
          }
        }
      }
      if (CFArrayGetCount(Mutable) == 1)
      {
        v19 = CFArrayGetValueAtIndex(Mutable, 0);
        if (ABCRecordSetIntValueAndReturnError(v19, kABPersonLinkProperty, -1, 0))
          ABCDBContextLogChangeForPerson(*(_QWORD *)(AddressBook + 16), v19, 3u);
        v20 = 5;
      }
      else
      {
        v20 = 4;
      }
      CFRelease(Mutable);
      CFRelease(v12);
    }
    else
    {
      v20 = 4;
    }
    v21 = ABCRecordSetIntValueAndReturnError(a1, kABPersonLinkProperty, -1, 0);
    if ((_DWORD)v21)
    {
      ABCDBContextLogChangeForPerson(*(_QWORD *)(AddressBook + 16), a1, 7u);
      ABCDBContextLogChangeForPerson(*(_QWORD *)(AddressBook + 16), a1, 3u);
    }
    if (!v8)
    {
      ABDiagnosticsEnabled();
      v22 = ABLogStringForPerson(a1);
      _ABLog2(3, (uint64_t)"_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)", 2695, 0, (uint64_t)CFSTR("Failure getting linkUUID while unlinking contact %@ "), v23, v24, v25, v22);
      return v21;
    }
    ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(AddressBook + 16), (uint64_t)v8, v20);
  }
  CFRelease(v8);
  return v21;
}

uint64_t ABPersonIsDowntimeWhitelisted(const void *a1)
{
  ABRecordID RecordID;
  void *v3;
  const void *v4;
  uint64_t v5;

  RecordID = ABRecordGetRecordID(a1);
  if (!a1)
    return 0;
  if (RecordID == -1)
    return 0;
  v3 = (void *)ABRecordCopyValue(a1, kABPersonDowntimeWhitelistProperty);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v3, "isEqualToString:", CFSTR("true"));
  CFRelease(v4);
  return v5;
}

ABRecordRef ABPersonIsReadonly(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ABRecordRef result;
  const void *v7;
  uint64_t IsContentReadonly;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPersonIsReadonly(ABRecordRef)", 2790, v2, 0, v3, v4, v5, (uint64_t)v9);
    CFRelease(v2);
  }
  result = ABPersonCopySource(a1);
  if (result)
  {
    v7 = result;
    IsContentReadonly = ABSourceIsContentReadonly((uint64_t)result);
    CFRelease(v7);
    return (ABRecordRef)IsContentReadonly;
  }
  return result;
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForImage(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFTypeRef v12;
  uint64_t v13;
  const void *ValueAtIndex;
  const __CFString *v15;

  if (ABLogAPIUsage())
  {
    v15 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForImage(ABRecordRef)", 2802, v2, 0, v3, v4, v5, (uint64_t)v15);
    CFRelease(v2);
  }
  v6 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
  if (v6)
    return v6;
  v8 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  if (!v8)
    return CFRetain(a1);
  v9 = v8;
  Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    v6 = 0;
    goto LABEL_21;
  }
  v11 = Count;
  v12 = 0;
  v13 = 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v9, v13 - 1);
    if (ABPersonHasImageData(ValueAtIndex))
    {
      if (v12 || !ABPersonIsReadonly(ValueAtIndex))
      {
        v6 = CFRetain(ValueAtIndex);
        goto LABEL_14;
      }
      v12 = CFRetain(ValueAtIndex);
    }
    v6 = 0;
LABEL_14:
    if (v13 >= v11)
      break;
    ++v13;
  }
  while (!v6);
  if (v12 && v6)
  {
    CFRelease(v12);
    CFRelease(v9);
    return v6;
  }
  if (!v12)
LABEL_21:
    v12 = v6;
  CFRelease(v9);
  v6 = v12;
  if (v12)
    return v6;
  return CFRetain(a1);
}

void ABPersonSetPreferredLinkedPersonForImage(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetPreferredLinkedPersonForImage(ABRecordRef)", 2847, v2, 0, v3, v4, v5, (uint64_t)v6);
    CFRelease(v2);
  }
  _updatePreferredImageForPerson(a1, 1, 1, 1);
}

void ABPersonSetPreferredLinkedPersonForName(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ABRecordID RecordID;
  int IntValue;
  int v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;

  if (ABLogAPIUsage())
  {
    v20 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)", 2853, v2, 0, v3, v4, v5, (uint64_t)v20);
    CFRelease(v2);
  }
  v6 = ABCGetAddressBookForRecord();
  if (v6)
  {
    v7 = v6;
    RecordID = ABRecordGetRecordID(a1);
    IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
    if (IntValue != -1)
    {
      v10 = IntValue;
      CPRecordStoreGetDatabase();
      v11 = CPSqliteDatabaseStatementForWriting();
      if (v11)
      {
        v12 = v11;
        v13 = *(sqlite3_stmt **)(v11 + 8);
        if (v13)
        {
          sqlite3_bind_int(v13, 1, RecordID);
          sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, v10);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
      }
      v14 = ABPersonCopyLinkUUID((uint64_t)a1);
      if (v14)
      {
        v15 = (const void *)v14;
        ABCDBContextLogChangeForPerson(*(_QWORD *)(v7 + 16), a1, 8u);
        ABCDBContextLogChangeForUnifiedPerson(*(_QWORD *)(v7 + 16), (uint64_t)v15, 4u);
        CFRelease(v15);
      }
      else
      {
        ABDiagnosticsEnabled();
        v16 = ABLogStringForPerson(a1);
        _ABLog2(3, (uint64_t)"void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)", 2880, 0, (uint64_t)CFSTR("Failure getting linkUUID while setting contact %@ as preferred name"), v17, v18, v19, v16);
      }
    }
  }
}

uint64_t ABAddressBookClearAllMeCards(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  NSObject *v5;
  CFIndex v6;
  int v7;
  const void *ValueAtIndex;
  const void *v9;
  NSObject *v10;
  uint8_t buf[4];
  CFIndex v13;
  __int16 v14;
  CFIndex v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = 1;
  v2 = (const __CFArray *)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(a1, 1);
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    v5 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v13 = Count;
      _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "Will clear all Me cards from %ld sources", buf, 0xCu);
    }
    if (Count < 1)
    {
      LOBYTE(v7) = 1;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        if (ValueAtIndex)
        {
          v9 = ValueAtIndex;
          if (ABSourceGetMe((uint64_t)ValueAtIndex))
          {
            v10 = ABOSLogMeCardChanges();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134218240;
              v13 = v6 + 1;
              v14 = 2048;
              v15 = Count;
              _os_log_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_INFO, "Removing Me card for source %ld of %ld", buf, 0x16u);
            }
            v7 &= ABSourceSetMe(v9, 0, 0);
          }
        }
        ++v6;
      }
      while (Count != v6);
    }
    CFRelease(v3);
    return v7 & 1;
  }
  return v1;
}

CFArrayRef ABPersonCreateArrayOfAllPropertyIDs()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;
  void *values[32];

  values[31] = *(void **)MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCreateArrayOfAllPropertyIDs(void)", 2910, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  values[0] = (void *)kABPersonPrefixProperty;
  values[1] = (void *)kABPersonFirstNameProperty;
  values[2] = (void *)kABPersonMiddleNameProperty;
  values[3] = (void *)kABPersonLastNameProperty;
  values[4] = (void *)kABPersonSuffixProperty;
  values[5] = (void *)kABPersonPreviousFamilyNameProperty;
  values[6] = (void *)kABPersonFirstNamePhoneticProperty;
  values[7] = (void *)kABPersonMiddleNamePhoneticProperty;
  values[8] = (void *)kABPersonLastNamePhoneticProperty;
  values[9] = (void *)kABPersonFirstNamePronunciationProperty;
  values[10] = (void *)kABPersonMiddleNamePronunciationProperty;
  values[11] = (void *)kABPersonLastNamePronunciationProperty;
  values[12] = (void *)kABPersonNicknameProperty;
  values[13] = (void *)kABPersonAddressingGrammarProperty;
  values[14] = (void *)kABPersonJobTitleProperty;
  values[15] = (void *)kABPersonDepartmentProperty;
  values[16] = (void *)kABPersonOrganizationProperty;
  values[17] = (void *)kABPersonOrganizationPhoneticProperty;
  values[18] = (void *)kABPersonOrganizationPronunciationProperty;
  values[19] = (void *)kABPersonPhoneProperty;
  values[20] = (void *)kABPersonEmailProperty;
  values[21] = (void *)kABPersonSoundProperty;
  values[22] = (void *)kABPersonURLProperty;
  values[23] = (void *)kABPersonAddressProperty;
  values[24] = (void *)kABPersonBirthdayProperty;
  values[25] = (void *)kABPersonAlternateBirthdayProperty;
  values[26] = (void *)kABPersonDateProperty;
  values[27] = (void *)kABPersonRelatedNamesProperty;
  values[28] = (void *)kABPersonSocialProfileProperty;
  values[29] = (void *)kABPersonInstantMessageProperty;
  values[30] = (void *)kABPersonNoteProperty;
  return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 31, 0);
}

const __CFArray *ABPersonCopyPropertyIDsExcludingPropertyIDs(const __CFArray *a1, const __CFArray *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *MutableCopy;
  CFIndex Count;
  CFIndex v10;
  unint64_t v11;
  signed int ValueAtIndex;
  CFIndex FirstIndexOfValue;
  const __CFString *v15;
  CFRange v16;

  if (ABLogAPIUsage())
  {
    v15 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyPropertyIDsExcludingPropertyIDs(CFArrayRef, CFArrayRef)", 3018, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  if (a2)
  {
    if (CFArrayGetCount(a2))
    {
      Count = CFArrayGetCount(MutableCopy);
      v10 = CFArrayGetCount(a2);
      if (v10 >= 1)
      {
        v11 = v10 + 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, v11 - 2);
          v16.location = 0;
          v16.length = Count;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v16, (const void *)ValueAtIndex);
          if (FirstIndexOfValue != -1)
          {
            CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
            --Count;
          }
          --v11;
        }
        while (v11 > 1);
      }
    }
  }
  return MutableCopy;
}

void ABMergePropertiesFromPersonIntoPerson(const __CFArray *a1, const void *a2, const void *a3)
{
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  ABPropertyID ValueAtIndex;
  CFTypeRef v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  _BYTE *MutableCopy;
  ABPropertyType PropertyType;
  CFIndex v16;
  CFIndex v17;
  CFIndex i;
  CFTypeRef v19;
  const __CFString *v20;
  const __CFArray *v21;
  const void *v22;

  v5 = a1;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    v21 = v5;
    v22 = a2;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
      if ((ABPersonGetTypeOfProperty(ValueAtIndex) & 0x100) != 0)
      {
        v10 = ABRecordCopyValue(a2, ValueAtIndex);
        if (v10)
        {
          v11 = v10;
          v12 = ABRecordCopyValue(a3, ValueAtIndex);
          if (v12)
          {
            v13 = v12;
            MutableCopy = ABMultiValueCreateMutableCopy(v12);
            CFRelease(v13);
          }
          else
          {
            PropertyType = ABMultiValueGetPropertyType(v11);
            MutableCopy = ABMultiValueCreateMutable(PropertyType);
          }
          v16 = ABMultiValueGetCount(v11);
          if (v16 >= 1)
          {
            v17 = v16;
            for (i = 0; i != v17; ++i)
            {
              v19 = ABMultiValueCopyValueAtIndex(v11, i);
              v20 = ABMultiValueCopyLabelAtIndex(v11, i);
              if (v19)
              {
                ABMultiValueAddValueAndLabelIfUnique(MutableCopy, v19, v20, 1, 0);
                CFRelease(v19);
              }
              if (v20)
                CFRelease(v20);
            }
          }
          ABRecordSetValue(a3, ValueAtIndex, MutableCopy, 0);
          CFRelease(MutableCopy);
          CFRelease(v11);
          v5 = v21;
          a2 = v22;
        }
      }
      else
      {
        _mergeSingleValuePropertyFromRecordIntoRecord(ValueAtIndex, a2, a3);
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void _mergeSingleValuePropertyFromRecordIntoRecord(ABPropertyID property, const void *a2, ABRecordRef record)
{
  CFTypeRef v6;
  CFTypeRef v7;

  v6 = ABRecordCopyValue(record, property);
  if (!v6)
  {
    v7 = ABRecordCopyValue(a2, property);
    if (!v7)
      return;
    v6 = v7;
    ABRecordSetValue(record, property, v7, 0);
  }
  CFRelease(v6);
}

void ABPersonMergePersonIntoPerson(const void *a1, const void *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *ArrayOfAllPropertyIDs;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABPersonMergePersonIntoPerson(ABRecordRef, ABRecordRef)", 3101, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  ArrayOfAllPropertyIDs = ABPersonCreateArrayOfAllPropertyIDs();
  ABMergePropertiesFromPersonIntoPerson(ArrayOfAllPropertyIDs, a1, a2);
  CFRelease(ArrayOfAllPropertyIDs);
}

const void *ABPersonCreateUnifiedPerson(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFArray *Mutable;
  const __CFArray *v7;
  __CFArray *ArrayOfUnifiedPeople;
  const __CFArray *v9;
  const void *ValueAtIndex;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreateUnifiedPerson(ABRecordRef)", 3109, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 0;
  v7 = Mutable;
  CFArrayAppendValue(Mutable, a1);
  ArrayOfUnifiedPeople = ABPersonCreateArrayOfUnifiedPeople(v7);
  if (ArrayOfUnifiedPeople)
  {
    v9 = ArrayOfUnifiedPeople;
    if (CFArrayGetCount(ArrayOfUnifiedPeople) == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
      CFRetain(ValueAtIndex);
    }
    else
    {
      ValueAtIndex = 0;
    }
    CFRelease(v9);
  }
  else
  {
    ValueAtIndex = 0;
  }
  CFRelease(v7);
  return ValueAtIndex;
}

__CFArray *ABPersonCreateArrayOfUnifiedPeople(const __CFArray *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeople(CFArrayRef)", 3132, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(a1, 0);
}

__CFArray *ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(const __CFArray *a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  CFMutableSetRef v10;
  __CFSet *v11;
  const __CFArray *ArrayOfAllPropertyIDs;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  void *ValueAtIndex;
  void *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  __CFArray *IndexValueIfExists;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  const void *TemporaryNewPersonWithRecordID;
  const void *v26;
  const __CFArray *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  const __CFString *v32;
  __CFArray *v33;
  uint64_t v34;
  const __CFArray *v35;
  CFIndex v36;
  __CFArray *v37;
  const __CFArray *cf;
  void *values[10];

  values[9] = *(void **)MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v32 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(CFArrayRef, CFStringRef)", 3168, v4, 0, v5, v6, v7, (uint64_t)v32);
    CFRelease(v4);
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v10 = CFSetCreateMutable(v8, 0, MEMORY[0x1E0C9B3B0]);
    if (v10)
    {
      v11 = v10;
      ArrayOfAllPropertyIDs = ABPersonCreateArrayOfAllPropertyIDs();
      values[0] = (void *)kABPersonPrefixProperty;
      values[1] = (void *)kABPersonFirstNameProperty;
      values[2] = (void *)kABPersonMiddleNameProperty;
      values[3] = (void *)kABPersonLastNameProperty;
      values[4] = (void *)kABPersonSuffixProperty;
      values[5] = (void *)kABPersonFirstNamePhoneticProperty;
      values[6] = (void *)kABPersonMiddleNamePhoneticProperty;
      values[7] = (void *)kABPersonLastNamePhoneticProperty;
      values[8] = (void *)kABPersonPreviousFamilyNameProperty;
      v13 = CFArrayCreate(v8, (const void **)values, 9, 0);
      if (v13 && ArrayOfAllPropertyIDs)
      {
        cf = ABPersonCopyPropertyIDsExcludingPropertyIDs(ArrayOfAllPropertyIDs, v13);
        if (!cf)
          goto LABEL_36;
        v35 = v13;
        Count = CFArrayGetCount(a1);
        if (Count >= 1)
        {
          v15 = Count;
          v16 = 0;
          v33 = Mutable;
          v34 = a2;
          v36 = Count;
          do
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v16);
            if (ValueAtIndex)
            {
              v18 = ValueAtIndex;
              if (!CFSetContainsValue(v11, ValueAtIndex))
              {
                if (!a2 && ABRecordGetIntValue((uint64_t)v18, kABPersonLinkProperty) == -1)
                {
                  CFArrayAppendValue(Mutable, v18);
                }
                else
                {
                  v19 = (const __CFArray *)ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(v18, a2);
                  if (v19)
                  {
                    v20 = v19;
                    IndexValueIfExists = ABAddressBookCopyArrayOfLinkedPeopleMovingPreferredNameToFirstIndexValueIfExists(v19);
                    CFRelease(v20);
                    if (IndexValueIfExists)
                    {
                      v22 = CFArrayGetCount(IndexValueIfExists);
                      if (v22 >= 1)
                      {
                        v23 = v22;
                        v24 = 0;
                        TemporaryNewPersonWithRecordID = 0;
                        v37 = IndexValueIfExists;
                        do
                        {
                          v26 = CFArrayGetValueAtIndex(IndexValueIfExists, v24);
                          CFSetAddValue(v11, v26);
                          if (TemporaryNewPersonWithRecordID)
                          {
                            ABMergePropertiesFromPersonIntoPerson(cf, v26, TemporaryNewPersonWithRecordID);
                          }
                          else
                          {
                            ABRecordGetRecordID(v26);
                            TemporaryNewPersonWithRecordID = (const void *)ABPersonCreateTemporaryNewPersonWithRecordID();
                            v27 = ArrayOfAllPropertyIDs;
                            ABMergePropertiesFromPersonIntoPerson(ArrayOfAllPropertyIDs, v26, TemporaryNewPersonWithRecordID);
                            v28 = ABRecordCopyValue(v26, kABPersonLinkProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonLinkProperty, v28, 0);
                            if (v28)
                              CFRelease(v28);
                            v29 = ABRecordCopyValue(v26, kABPersonInternalUUIDProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonInternalUUIDProperty, v29, 0);
                            if (v29)
                              CFRelease(v29);
                            v30 = ABRecordCopyValue(v26, kABPersonKindProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonKindProperty, v30, 0);
                            if (v30)
                              CFRelease(v30);
                            ArrayOfAllPropertyIDs = v27;
                            IndexValueIfExists = v37;
                          }
                          _mergeSingleValuePropertyFromRecordIntoRecord(kABPersonPhonemeDataProperty, v26, TemporaryNewPersonWithRecordID);
                          ++v24;
                        }
                        while (v23 != v24);
                        Mutable = v33;
                        a2 = v34;
                        if (TemporaryNewPersonWithRecordID)
                        {
                          CFArrayAppendValue(v33, TemporaryNewPersonWithRecordID);
                          CFRelease(TemporaryNewPersonWithRecordID);
                        }
                      }
                      CFRelease(IndexValueIfExists);
                      v15 = v36;
                    }
                  }
                }
              }
            }
            ++v16;
          }
          while (v16 != v15);
        }
        CFRelease(cf);
        v13 = v35;
      }
      if (!v13)
      {
LABEL_37:
        if (ArrayOfAllPropertyIDs)
          CFRelease(ArrayOfAllPropertyIDs);
        CFRelease(v11);
        return Mutable;
      }
LABEL_36:
      CFRelease(v13);
      goto LABEL_37;
    }
  }
  return Mutable;
}

__CFArray *ABAddressBookCopyArrayOfLinkedPeopleMovingPreferredNameToFirstIndexValueIfExists(const __CFArray *a1)
{
  uint64_t Count;
  __CFArray *MutableCopy;
  const void *ValueAtIndex;
  CFTypeRef v5;
  const void *v6;
  ABRecordID RecordID;
  CFIndex v8;
  const void *v9;
  ABRecordID v10;

  if (!a1 || CFArrayGetCount(a1) < 1)
    return 0;
  Count = CFArrayGetCount(a1);
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, a1);
  ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  v5 = ABPersonCopyPreferredLinkedPersonForName(ValueAtIndex);
  if (v5)
  {
    v6 = v5;
    RecordID = ABRecordGetRecordID(ValueAtIndex);
    if (RecordID != ABRecordGetRecordID(v6) && Count >= 1)
    {
      v8 = 0;
      while (1)
      {
        v9 = CFArrayGetValueAtIndex(a1, v8);
        v10 = ABRecordGetRecordID(v9);
        if (v10 == ABRecordGetRecordID(v6))
          break;
        if (Count == ++v8)
          goto LABEL_12;
      }
      CFArraySetValueAtIndex(MutableCopy, 0, v6);
      CFArraySetValueAtIndex(MutableCopy, v8, ValueAtIndex);
    }
LABEL_12:
    CFRelease(v6);
  }
  return MutableCopy;
}

uint64_t ABPersonIsLinkedToMe(const void *a1, ABRecordRef record)
{
  uint64_t result;
  ABRecordID IntegerProperty;
  uint64_t v6;
  int IntValue;

  if (ABRecordGetRecordID(record) == -1)
    return 0;
  result = 0;
  if (!a1 || !record)
    return result;
  IntegerProperty = ABAddressBookGetIntegerProperty((uint64_t)a1);
  if (IntegerProperty == -1)
    return 0;
  result = (uint64_t)ABAddressBookGetSourceWithRecordID(a1, IntegerProperty);
  if (result)
  {
    result = (uint64_t)ABSourceGetMe(result);
    if (result)
    {
      v6 = result;
      if ((ABRecordRef)result == record)
        return 1;
      IntValue = ABRecordGetIntValue((uint64_t)record, kABPersonLinkProperty);
      if (IntValue != -1)
        return IntValue == ABRecordGetIntValue(v6, kABPersonLinkProperty);
      return 0;
    }
  }
  return result;
}

ABMutableMultiValueRef ABPersonCreatePhoneNumberValueSanitized(const void *a1)
{
  ABMutableMultiValueRef MutableCopy;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *v6;
  const void *v7;

  if (!a1)
    return 0;
  MutableCopy = ABMultiValueCreateMutableCopy(a1);
  Count = ABMultiValueGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i != v4; ++i)
    {
      v6 = (void *)ABMultiValueCopyValueAtIndex(a1, i);
      v7 = (const void *)objc_msgSend(v6, "_cn_stringBySanitizingPhoneNumber");
      if (v6 != v7)
        ABMultiValueReplaceValueAtIndex(MutableCopy, v7, i);

    }
  }
  return MutableCopy;
}

__CFString *_createPlaceholdersForNumberOfItems(uint64_t a1)
{
  uint64_t v1;
  __CFString *Mutable;
  uint64_t v3;

  v1 = (uint64_t)(ceil((double)a1 / 10.0) * 10.0);
  Mutable = CFStringCreateMutable(0, 2 * v1 - 1);
  if (v1 >= 2)
  {
    v3 = v1 - 1;
    do
    {
      CFStringAppend(Mutable, CFSTR("?,"));
      --v3;
    }
    while (v3);
  }
  CFStringAppend(Mutable, CFSTR("?"));
  return Mutable;
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!IntlPreferencesLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E3CA3BE8;
    v5 = 0;
    IntlPreferencesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!IntlPreferencesLibraryCore_frameworkLibrary_0)
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_1(&v3);
  result = objc_getClass("NSPersonNameComponentsFormatterPreferences");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_2();
  getNSPersonNameComponentsFormatterPreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                           + 40);
  return result;
}

ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef multiValue)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)", 21, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  v6 = ABCMultiValuePropertyType((uint64_t)multiValue);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)", 23, CFSTR(">> "), 0, v7, v8, v9, v11);
  return v6 & 0xFFFFFEFF;
}

CFIndex ABMultiValueGetCount(ABMultiValueRef multiValue)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetCount(ABMultiValueRef)", 29, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  Count = ABCMultiValueGetCount((uint64_t)multiValue);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetCount(ABMultiValueRef)", 31, CFSTR(">> "), 0, v7, v8, v9, v11);
  return Count;
}

CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)", 37, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  v8 = ABCMultiValueCopyValueAtIndex((const __CFArray *)multiValue, index);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)", 39, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFArrayRef *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)", 50, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  v8 = ABCMultiValueCopyLabelAtIndex((CFArrayRef *)multiValue, index);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)", 52, CFSTR(">> "), 0, v9, v10, v11, v13);
  return (CFStringRef)v8;
}

CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef multiValue, ABMultiValueIdentifier identifier)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef, ABMultiValueIdentifier)", 58, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueIndexForIdentifier((uint64_t)multiValue, identifier);
}

ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ABMultiValueIdentifier IdentifierAtIndex;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)", 64, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)multiValue, index);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)", 66, CFSTR(">> "), 0, v9, v10, v11, v13);
  return IdentifierAtIndex;
}

CFArrayRef *ABMultiValueCopyUUIDAtIndex(CFArrayRef *a1, CFIndex a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFArrayRef *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const __CFString *v14;

  if (ABLogAPIUsage())
  {
    v14 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)", 72, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  v8 = ABCMultiValueCopyUUIDAtIndex(a1, a2);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)", 74, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef multiValue, CFTypeRef value)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef, CFTypeRef)", 81, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueGetFirstIndexOfValue((uint64_t)multiValue, value);
}

uint64_t ABMultiValueGetFirstIndexOfValueWithCallback(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, const void *))
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfValueWithCallback(ABMultiValueRef, CFTypeRef, CFArrayEqualCallBack)", 87, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCMultiValueGetFirstIndexOfValueWithCallback(a1, a2, a3);
}

CFIndex ABMultiValueGetFirstIndexOfLabel(uint64_t a1, const void *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfLabel(ABMultiValueRef, CFStringRef)", 93, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueGetFirstIndexOfLabel(a1, a2);
}

ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType type)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType)", 101, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateMutable(type);
}

ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef multiValue)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef)", 106, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateMutableCopy(multiValue);
}

BOOL ABMultiValueAddValueAndLabel(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, ABMultiValueIdentifier *outIdentifier)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v13;

  if (ABLogAPIUsage())
  {
    v13 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueAddValueAndLabel(ABMutableMultiValueRef, CFTypeRef, CFStringRef, ABMultiValueIdentifier *)", 123, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  if ((*((_BYTE *)multiValue + 60) & 1) == 0)
    ABMultiValueAddValueAndLabel_cold_1();
  return ABCMultiValueAdd((CFMutableArrayRef *)multiValue, (void *)value, label, 0, outIdentifier);
}

BOOL ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, CFIndex index, ABMultiValueIdentifier *outIdentifier)
{
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v15;

  if (ABLogAPIUsage())
  {
    v15 = _isMainThread();
    v10 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)", 130, v10, 0, v11, v12, v13, (uint64_t)v15);
    CFRelease(v10);
  }
  return ABMultiValueInsertValueAndLabelAndUUIDAtIndex((uint64_t)multiValue, (void *)value, label, 0, index, outIdentifier);
}

__CFArray *ABMultiValueInsertValueAndLabelAndUUIDAtIndex(uint64_t a1, void *a2, const void *a3, const __CFString *a4, CFIndex a5, int *a6)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v17;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertValueAndLabelAndUUIDAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)", 136, v12, 0, v13, v14, v15, (uint64_t)v17);
    CFRelease(v12);
  }
  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
    ABMultiValueInsertValueAndLabelAndUUIDAtIndex_cold_1();
  return ABCMultiValueInsert((CFMutableArrayRef *)a1, a2, a3, a5, a4, a6);
}

BOOL ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef multiValue, CFIndex index)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef, CFIndex)", 143, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if ((*((_BYTE *)multiValue + 60) & 1) == 0)
    ABMultiValueRemoveValueAndLabelAtIndex_cold_1();
  return ABCMultiValueRemove((uint64_t)multiValue, index);
}

BOOL ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef multiValue, CFTypeRef value, CFIndex index)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef, CFTypeRef, CFIndex)", 150, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  if ((*((_BYTE *)multiValue + 60) & 1) == 0)
    ABMultiValueReplaceValueAtIndex_cold_1();
  return ABCMultiValueReplaceValue((uint64_t)multiValue, value, index);
}

BOOL ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef multiValue, CFStringRef label, CFIndex index)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef, CFStringRef, CFIndex)", 157, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  if ((*((_BYTE *)multiValue + 60) & 1) == 0)
    ABMultiValueReplaceLabelAtIndex_cold_1();
  return ABCMultiValueReplaceLabel((uint64_t)multiValue, label, index);
}

BOOL ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef multiValue, CFStringRef identifier)
{
  int v2;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  v2 = (int)identifier;
  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef, ABMultiValueIdentifier)", 164, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if ((*((_BYTE *)multiValue + 60) & 1) == 0)
    ABMultiValueSetPrimaryIdentifier_cold_1();
  return ABCMultiValueSetPrimaryIdentifier((uint64_t)multiValue, v2);
}

ABMultiValueRef ABMultiValueCreate(void)
{
  int v0;
  int v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  v1 = v0;
  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABMultiValueRef ABMultiValueCreate(ABPropertyType)", 172, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreate(v1);
}

ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef multiValue)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef)", 176, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateCopy(multiValue);
}

__CFArray *ABMultiValueInsertAndCreateIdentifier(uint64_t a1, void *a2, const void *a3, CFIndex a4, const __CFString *a5, int *a6, int a7)
{
  __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v19;

  if (ABLogAPIUsage())
  {
    v19 = _isMainThread();
    v14 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertAndCreateIdentifier(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, CFStringRef, ABMultiValueIdentifier *, _Bool)", 181, v14, 0, v15, v16, v17, (uint64_t)v19);
    CFRelease(v14);
  }
  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
    ABMultiValueInsertAndCreateIdentifier_cold_1();
  return ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)a1, a2, a3, a4, a5, a6, a7);
}

void ABMultiValueShow(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueShow(ABMultiValueRef)", 187, v2, 0, v3, v4, v5, (uint64_t)v6);
    CFRelease(v2);
  }
  ABCMultiValueShow(a1);
}

uint64_t ABMultiValueLoad(void *a1, int a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueLoad(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 192, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCMultiValueLoad(a1, a2, a3);
}

void ABMultiValueBatchLoad(const __CFArray *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;

  if (ABLogAPIUsage())
  {
    v19 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)", 198, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  ABCMultiValueBatchLoad(a1, a2, a3);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)", 200, CFSTR(">> "), 0, v16, v17, v18, a9);
}

void ABMultiValueSave(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;

  if (ABLogAPIUsage())
  {
    v19 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 204, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  ABCMultiValueSave(a1, a2, a3);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 206, CFSTR(">> "), 0, v16, v17, v18, a9);
}

BOOL kABMultiValueDefaultComparator_block_invoke(int a1, CFTypeRef cf1, CFTypeRef cf2)
{
  return CFEqual(cf1, cf2) != 0;
}

BOOL kABMultiValueAddressComparator_block_invoke_2(int a1, CFTypeRef cf1, CFTypeRef cf2, CFTypeRef *a4)
{
  _BOOL8 v7;
  const __CFString *Value;
  const __CFString *v9;
  const __CFString *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;

  if (CFEqual(cf1, cf2))
    return 1;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf2, CFSTR("CountryCode"));
  v9 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf1, CFSTR("CountryCode"));
  v10 = v9;
  if (Value)
  {
    v11 = CFStringGetLength(Value) < 1;
    if (v10)
    {
LABEL_5:
      v12 = CFStringGetLength(v10) < 1;
      goto LABEL_8;
    }
  }
  else
  {
    v11 = 1;
    if (v9)
      goto LABEL_5;
  }
  v12 = 1;
LABEL_8:
  v13 = _abCopyAddressDictionaryWithoutCountryCode((CFDictionaryRef)cf1);
  v14 = _abCopyAddressDictionaryWithoutCountryCode((CFDictionaryRef)cf2);
  if (!CFEqual(v13, v14))
  {
    v7 = 0;
    goto LABEL_16;
  }
  if (v11 || !v12)
  {
    if (!v11 || v12)
    {
      v7 = 0;
      if (Value && v10)
      {
        v7 = CFStringCompare(v10, Value, 1uLL) == kCFCompareEqualTo;
        if (!v13)
          goto LABEL_18;
LABEL_17:
        CFRelease(v13);
        goto LABEL_18;
      }
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else
  {
    *a4 = CFRetain(cf2);
  }
  v7 = 1;
  if (v13)
    goto LABEL_17;
LABEL_18:
  if (v14)
    CFRelease(v14);
  return v7;
}

const __CFDictionary *_abCopyAddressDictionaryWithoutCountryCode(CFDictionaryRef theDict)
{
  const __CFDictionary *MutableCopy;

  MutableCopy = theDict;
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, CFSTR("CountryCode")))
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MutableCopy);
      CFDictionaryRemoveValue(MutableCopy, CFSTR("CountryCode"));
    }
    else
    {
      CFRetain(MutableCopy);
    }
  }
  return MutableCopy;
}

BOOL ABMultiValueAddValueAndLabelIfUnique(_BYTE *a1, const void *a2, const __CFString *a3, int a4, uint64_t (**a5)(void *, CFTypeRef, const void *, CFTypeRef *))
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  BOOL v16;
  int v17;
  CFTypeRef v18;
  int v19;
  BOOL v20;
  CFStringRef v21;
  const void *v22;
  const __CFString *v24;
  CFTypeRef value;

  if (ABLogAPIUsage())
  {
    v24 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueAddValueAndLabelIfUnique(ABMutableMultiValueRef, CFTypeRef, CFStringRef, _Bool, ABMultiValueUniqueInsertionComparator)", 262, v9, 0, v10, v11, v12, (uint64_t)v24);
    CFRelease(v9);
  }
  if ((a1[60] & 1) == 0)
    ABMultiValueAddValueAndLabelIfUnique_cold_1();
  Count = ABMultiValueGetCount(a1);
  if (!a5)
    a5 = (uint64_t (**)(void *, CFTypeRef, const void *, CFTypeRef *))&__block_literal_global_5;
  if (Count >= 1)
  {
    v14 = Count;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = ABMultiValueCopyValueAtIndex(a1, v15);
      value = 0;
      v19 = a5[2](a5, v18, a2, &value);
      if (v19)
        v20 = a4 == 0;
      else
        v20 = 1;
      if (v20)
      {
        v17 |= v19;
        goto LABEL_21;
      }
      v21 = ABMultiValueCopyLabelAtIndex(a1, v15);
      v22 = v21;
      if (!((unint64_t)a3 | (unint64_t)v21))
      {
        v17 = 1;
        goto LABEL_21;
      }
      if (a3 && v21)
      {
        v17 |= CFEqual(a3, v21) != 0;
      }
      else if (!v21)
      {
        goto LABEL_21;
      }
      CFRelease(v22);
LABEL_21:
      if (value)
      {
        v16 = ABMultiValueReplaceValueAtIndex(a1, value, v15);
        if (value)
          CFRelease(value);
      }
      if (v18)
        CFRelease(v18);
      if (v14 == ++v15)
      {
        if ((v17 & 1) != 0)
          return v16;
        goto LABEL_30;
      }
    }
  }
  v16 = 0;
LABEL_30:
  if (!v16)
    return ABMultiValueAddValueAndLabel(a1, a2, a3, 0);
  return v16;
}

uint64_t ABMultiValueGetTypeID()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFTypeID ABMultiValueGetTypeID(void)", 308, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCMultiValueGetTypeID();
}

void ABMultiValueEnumerateWithBlock(const void *a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFStringRef v11;
  CFTypeRef v12;
  int v13;
  int v15;
  const __CFString *v16;

  if (ABLogAPIUsage())
  {
    v16 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABMultiValueEnumerateWithBlock(ABMultiValueRef, ABMultiValueEnumeratorBlock)", 313, v4, 0, v5, v6, v7, (uint64_t)v16);
    CFRelease(v4);
  }
  if (a1)
  {
    Count = ABMultiValueGetCount(a1);
    v9 = Count - 1;
    if (Count >= 1)
    {
      v10 = 0;
      do
      {
        v11 = ABMultiValueCopyLabelAtIndex(a1, v10);
        v12 = ABMultiValueCopyValueAtIndex(a1, v10);
        v13 = (*(uint64_t (**)(uint64_t, CFIndex, CFStringRef, CFTypeRef))(a2 + 16))(a2, v10, v11, v12);
        if (v11)
          CFRelease(v11);
        if (v12)
          CFRelease(v12);
        if (v9 == v10++)
          v15 = 1;
        else
          v15 = v13;
      }
      while (v15 != 1);
    }
  }
}

ABRecordRef ABGroupCreate(void)
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCreate(void)", 24, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return (ABRecordRef)ABCGroupCreateNewGroup();
}

CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef group)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef)", 30, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllMembers((uint64_t)group);
}

CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef group, ABPersonSortOrdering sortOrdering)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef, ABPersonSortOrdering)", 36, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupCopyArrayOfAllMembersWithSortOrdering((uint64_t)group, sortOrdering);
}

BOOL ABGroupAddMember(ABRecordRef group, ABRecordRef person, CFErrorRef *error)
{
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABGroupAddMember(ABRecordRef, ABRecordRef, CFErrorRef *)", 42, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCGroupAddMemberAndReturnError(group, person);
}

BOOL ABGroupRemoveMember(ABRecordRef group, ABRecordRef member, CFErrorRef *error)
{
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABGroupRemoveMember(ABRecordRef, ABRecordRef, CFErrorRef *)", 48, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCGroupRemoveMemberAndReturnError(group, member);
}

ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef addressBook, ABRecordID recordID)
{
  const __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (ABLogAPIUsage())
  {
    v3 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v3);
    v5 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef, ABRecordID)", 55, v4, (uint64_t)CFSTR("%@"), v6, v7, v8, v5);
    CFRelease(v4);
  }
  return (ABRecordRef)ABCGroupGetRecordForUniqueID((uint64_t)addressBook);
}

uint64_t ABAddressBookCopyGroupsWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyGroupsWithUUIDs(ABAddressBookRef, CFArrayRef)", 61, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCGroupCopyRecordsForUUIDs(a1, a2);
}

uint64_t ABAddressBookGetGroupCountInSource(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetGroupCountInSource(ABAddressBookRef, ABRecordRef)", 73, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (int)ABCGetGroupCount(a1, a2);
}

CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)", 80, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  v8 = (const __CFArray *)ABCCopyArrayOfAllGroups((uint64_t)addressBook);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)", 82, CFSTR(">> "), 0, v9, v10, v11, v13);
  return v8;
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(ABAddressBookRef, ABGroupSortOrdering)", 88, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABCCopyArrayOfAllGroupsWithSortOrdering(a1);
}

uint64_t ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(uint64_t a1, unsigned int a2, int a3, const __CFArray *a4)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v13;

  if (ABLogAPIUsage())
  {
    v13 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(ABAddressBookRef, ABRecordType, _Bool, CFArrayRef)", 96, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(a1, a2, a3, a4);
}

CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABGroupRef group)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABRecordRef)", 101, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllSubgroups((uint64_t)group);
}

CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(ABRecordRef)", 105, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllMembersAndSubgroups(a1);
}

uint64_t ABGroupAddSubgroup(const void *a1, const void *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABGroupAddSubgroup(ABRecordRef, ABRecordRef)", 110, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupAddSubgroup(a1, a2);
}

uint64_t ABGroupRemoveSubgroup(uint64_t a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABGroupRemoveSubgroup(ABRecordRef, ABRecordRef)", 114, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupRemoveSubgroup(a1, a2);
}

uint64_t ABGroupDelete(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABGroupDelete(ABRecordID, ABRecordRef, CPSqliteConnection *)", 122, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupDelete(a1);
}

uint64_t ABGroupCopyCompositeName(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABGroupCopyCompositeName(ABRecordRef)", 127, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyCompositeName(a1);
}

uint64_t ABGroupGetTypeOfProperty(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABPropertyType ABGroupGetTypeOfProperty(ABPropertyID)", 162, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupTypeOfProperty(a1);
}

const __CFString *ABGroupNameForProperty(int a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABGroupNameForProperty(ABPropertyID)", 169, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupNameForProperty(a1);
}

uint64_t _updateDowntimeWhitelistForPerson(uint64_t a1)
{
  int v2;
  id v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  UInt8 *v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  id v17;

  v2 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v3 = objc_alloc(MEMORY[0x1E0C99D50]);
  v4 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), 1);
  v5 = (void *)objc_msgSend(v3, "initWithBytes:length:", v4, sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), 1));
  +[ABDowntimeWhitelistMigrator unknownPropertiesFromExternalRepresentation:](ABDowntimeWhitelistMigrator, "unknownPropertiesFromExternalRepresentation:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", AB_DOWNTIME_WHITELIST_KEY);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndex:", 0);
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (void *)objc_msgSend(v6, "mutableCopy");
    objc_msgSend(v9, "setObject:forKeyedSubscript:", 0, AB_DOWNTIME_WHITELIST_KEY);
    +[ABDowntimeWhitelistMigrator externalRepresentationFromUnknownProperties:](ABDowntimeWhitelistMigrator, "externalRepresentationFromUnknownProperties:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = CPSqliteConnectionStatementForSQL();
    if (v11)
    {
      v12 = v11;
      v13 = *(sqlite3_stmt **)(v11 + 8);
      v14 = _ABCCreateUTF8StringFromCFString(v8);
      sqlite3_bind_text(v13, 1, (const char *)v14, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      v15 = objc_msgSend(v10, "length");
      v16 = *(sqlite3_stmt **)(v12 + 8);
      if (v15)
      {
        v17 = objc_retainAutorelease(v10);
        sqlite3_bind_blob(v16, 2, (const void *)objc_msgSend(v17, "bytes"), objc_msgSend(v17, "length"), 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), 2);
      }
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 3, v2);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }

  }
  else
  {
    v10 = v5;
  }

  return 0;
}

void invokeOnThread(void *a1, void *a2, void *a3, uint64_t a4)
{
  _BOOL8 v8;
  ABCCallbackInvoker *v9;

  v9 = objc_alloc_init(ABCCallbackInvoker);
  v8 = objc_msgSend(MEMORY[0x1E0CB3978], "currentThread") == a4;
  CFRetain(a1);
  v9->cb = a2;
  v9->ab = a1;
  v9->context = a3;
  -[ABCCallbackInvoker performSelector:onThread:withObject:waitUntilDone:](v9, "performSelector:onThread:withObject:waitUntilDone:", sel_invoke, a4, 0, v8);

}

uint64_t ABSourceCreate()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABSourceCreate(void)", 40, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCSourceCreateNewSourceAndReturnError();
}

uint64_t ABAddressBookSetAccountForSource(uint64_t a1, const void *a2, const void *a3, CFAllocatorRef *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ABRecordID RecordID;
  uint64_t result;
  CFErrorRef v16;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetAccountForSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 58, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  if (!a3)
    return 1;
  RecordID = ABRecordGetRecordID(a3);
  if (RecordID != -1)
    return ABRecordSetIntValue(a2, kABSourceAccountIDProperty, RecordID, a4);
  if (!a4)
    return 0;
  v16 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
  result = 0;
  *a4 = v16;
  return result;
}

CFTypeRef ABAddressBookCopyAccountIdentifierForSource(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = (CFTypeRef)ABAddressBookGetAccountForSource(a1, a2);
  if (result)
    return ABAccountCopyIdentifier(result);
  return result;
}

const void *ABAddressBookCopyLocalSource(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *result;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyLocalSource(ABAddressBookRef)", 88, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  result = ABCSourceCopyLocalSource(a1);
  if (!result)
    return (const void *)ABSourceCreate();
  return result;
}

CFTypeRef ABAddressBookCopyDefaultSourceIsPersistableFallback(const void *a1, _BYTE *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  ABRecordID v13;
  NSObject *v14;
  const void *v16;
  const void *v17;
  void *v18;
  const void *AccountForSource;
  const void *v20;
  CFTypeRef v21;
  NSObject *v22;
  ABRecordID v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  NSObject *v30;
  ABRecordID v31;
  NSObject *v32;
  NSObject *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  ABRecordID RecordID;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyDefaultSourceIsPersistableFallback(ABAddressBookRef, BOOL *)", 135, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a1)
  {
    v14 = ABOSLogGeneral();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v14, OS_LOG_TYPE_DEFAULT, "No addressBook, returning an empty source", buf, 2u);
    }
    return (CFTypeRef)ABSourceCreate();
  }
  v10 = _ABCGetActualDefaultSource((uint64_t)a1);
  v11 = (const void *)v10;
  if (v10
    && ABRecordGetIntValue(v10, kABSourceEnabledProperty) == 1
    && ABRecordGetIntValue((uint64_t)v11, kABSourceTypeProperty) != 6
    && (ABSourceIsRemote((uint64_t)v11) & 1) == 0
    && (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v11, 0) & 1) == 0)
  {
    v34 = ABOSLogGeneral();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      RecordID = ABRecordGetRecordID(v11);
      _os_log_impl(&dword_19BC4B000, v34, OS_LOG_TYPE_DEFAULT, "Returning a valid actual default source (recordID %d)", buf, 8u);
    }
    return CFRetain(v11);
  }
  v12 = ABOSLogGeneral();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v11)
      v13 = ABRecordGetRecordID(v11);
    else
      v13 = -1;
    *(_DWORD *)buf = 67109120;
    RecordID = v13;
    _os_log_impl(&dword_19BC4B000, v12, OS_LOG_TYPE_DEFAULT, "Actual default source is invalid (recordID %d), trying fallbacks to find replacement default source", buf, 8u);
  }
  v17 = (const void *)ABAddressBookCopyArrayOfAllAccounts((uint64_t)a1);
  v18 = (void *)objc_msgSend((id)(id)CFMakeCollectable(v17), "mutableCopy");
  if (!v11)
    goto LABEL_24;
  AccountForSource = (const void *)ABAddressBookGetAccountForSource((uint64_t)a1, (uint64_t)v11);
  if (!AccountForSource)
    goto LABEL_24;
  v20 = AccountForSource;
  v21 = ABAddressBookCopySuitableDefaultSourceInAccount(a1, AccountForSource);
  if (!v21)
  {
    objc_msgSend(v18, "removeObject:", v20);
LABEL_24:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v25 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (!v25)
    {
LABEL_32:
      v30 = ABOSLogGeneral();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19BC4B000, v30, OS_LOG_TYPE_DEFAULT, "Failed to find a valid default source, returning the local source", buf, 2u);
      }
      v16 = ABCSourceCopyLocalSource((uint64_t)a1);
      goto LABEL_38;
    }
    v26 = v25;
    v27 = *(_QWORD *)v36;
LABEL_26:
    v28 = 0;
    while (1)
    {
      if (*(_QWORD *)v36 != v27)
        objc_enumerationMutation(v18);
      v29 = ABAddressBookCopySuitableDefaultSourceInAccount(a1, *(const void **)(*((_QWORD *)&v35 + 1) + 8 * v28));
      if (v29)
        break;
      if (v26 == ++v28)
      {
        v26 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        if (v26)
          goto LABEL_26;
        goto LABEL_32;
      }
    }
    v16 = v29;
    v22 = ABOSLogGeneral();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    v31 = ABRecordGetRecordID(v16);
    *(_DWORD *)buf = 67109120;
    RecordID = v31;
    v24 = "Found another syncing source (recordID %d) to use as default source";
    goto LABEL_37;
  }
  v16 = v21;
  v22 = ABOSLogGeneral();
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    goto LABEL_38;
  v23 = ABRecordGetRecordID(v16);
  *(_DWORD *)buf = 67109120;
  RecordID = v23;
  v24 = "Found another source (recordID %d) in the same account as invalid default, using that instead";
LABEL_37:
  _os_log_impl(&dword_19BC4B000, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 8u);
LABEL_38:
  if (a2 && v16)
  {
    *a2 = 1;
  }
  else if (!v16)
  {
    v32 = ABOSLogGeneral();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v32, OS_LOG_TYPE_DEFAULT, "Returning an empty source", buf, 2u);
    }
    v16 = (const void *)ABSourceCreate();
  }

  return v16;
}

CFTypeRef ABAddressBookCopySuitableDefaultSourceInAccount(const void *a1, const void *a2)
{
  ABRecordRef DefaultSourceForAccount;
  const void *v5;
  CFTypeRef result;
  const void *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  DefaultSourceForAccount = ABAddressBookGetDefaultSourceForAccount(a1, (uint64_t)a2);
  v5 = DefaultSourceForAccount;
  if (!DefaultSourceForAccount
    || ABRecordGetIntValue((uint64_t)DefaultSourceForAccount, kABSourceEnabledProperty) != 1
    || ABRecordGetIntValue((uint64_t)v5, kABSourceTypeProperty) == 6
    || (ABSourceIsRemote((uint64_t)v5) & 1) != 0
    || (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v5, 0) & 1) != 0
    || (result = CFRetain(v5)) == 0)
  {
    v7 = (const void *)ABAddressBookCopyArrayOfAllSourcesInAccount((uint64_t)a1, a2);
    v8 = (id)CFMakeCollectable(v7);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    result = (CFTypeRef)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (result)
    {
      v9 = result;
      v10 = *(_QWORD *)v15;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          v12 = *(const void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11);
          v13 = v12 == v5 || v12 == 0;
          if (!v13
            && ABRecordGetIntValue(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11), kABSourceEnabledProperty) == 1&& ABRecordGetIntValue((uint64_t)v12, kABSourceTypeProperty) != 6&& (ABSourceIsRemote((uint64_t)v12) & 1) == 0&& (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v12, 0) & 1) == 0)
          {
            return CFRetain(v12);
          }
          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        result = (CFTypeRef)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        v9 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  return result;
}

ABRecordRef ABAddressBookCopyDefaultSource(ABAddressBookRef addressBook)
{
  return ABAddressBookCopyDefaultSourceIsPersistableFallback(addressBook, 0);
}

void ABAddressBookSetDefaultSource(uint64_t a1, const void *a2, int a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ABRecordID RecordID;
  NSObject *v13;
  uint8_t buf[4];
  ABRecordID v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetDefaultSource(ABAddressBookRef, ABRecordRef, _Bool)", 208, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (a1 && (!a3 || !_ABCGetActualDefaultSource(a1)))
  {
    if (a2)
    {
      RecordID = ABRecordGetRecordID(a2);
      if ((ABRecordGetIntValue((uint64_t)a2, kABSourceTypeProperty) & 0x1000000) != 0)
        return;
    }
    else
    {
      RecordID = -1;
    }
    v13 = ABOSLogGeneral();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v15 = RecordID;
      v16 = 2112;
      v17 = ABLogBacktrace();
      _os_log_impl(&dword_19BC4B000, v13, OS_LOG_TYPE_DEFAULT, "Setting default source to recordID %d, %@", buf, 0x12u);
    }
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    CPSqliteConnectionSetIntegerForProperty();
  }
}

void ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded(const void *a1)
{
  NSObject *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  void *v9;
  char v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const void *v17;
  int IntValue;
  CFArrayRef v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  NSObject *v25;
  NSObject *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint8_t buf[16];
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BC4B000, v2, OS_LOG_TYPE_DEFAULT, "ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded - start", buf, 2u);
  }
  v35 = 0;
  v3 = ABAddressBookCopyDefaultSourceIsPersistableFallback(a1, &v35);
  if (!v35)
  {
    v7 = 0;
    goto LABEL_15;
  }
  v4 = ABAddressBookCopyLocalSource((uint64_t)a1);
  v5 = ABOSLogGeneral();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3 != v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "Persisting the non-local source as the default source", buf, 2u);
    }
    ABAddressBookSetDefaultSource((uint64_t)a1, v3, 0);
    goto LABEL_13;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "The local source is the default source fallback", buf, 2u);
  }
  if (ABRecordGetIntValue((uint64_t)v3, kABSourceEnabledProperty)
    || (v8 = objc_msgSend(MEMORY[0x1E0C8F2B8], "defaultStore"),
        v9 = (void *)objc_msgSend(MEMORY[0x1E0D13958], "providerWithStore:", v8),
        v10 = objc_msgSend(v9, "isAnyAccountSyncableIgnoringAccount:", 0),
        v9,
        (v10 & 1) != 0))
  {
LABEL_13:
    v7 = 0;
    if (!v4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v26 = ABOSLogGeneral();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BC4B000, v26, OS_LOG_TYPE_DEFAULT, "The local source is disabled and no other accounts are syncable. Enabling the local source to use as the default source", buf, 2u);
  }
  ABRecordSetValue(v3, kABSourceEnabledProperty, (CFTypeRef)*MEMORY[0x1E0C9AE50], 0);
  v7 = 1;
  if (v4)
LABEL_14:
    CFRelease(v4);
LABEL_15:
  if (v3)
    CFRelease(v3);
  v11 = (const void *)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources((uint64_t)a1, 1);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v12 = (id)CFMakeCollectable(v11);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v32 != v15)
          objc_enumerationMutation(v12);
        v17 = *(const void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        IntValue = ABRecordGetIntValue((uint64_t)v17, kABSourceTypeProperty);
        if (IntValue == 6)
        {
          v7 |= ABAddressBookRemoveRecord(a1, v17, 0);
        }
        else if ((IntValue & 0x1000000) != 0)
        {
          v19 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, v17);
          v20 = (id)CFMakeCollectable(v19);
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
          if (v21)
          {
            v22 = v21;
            v23 = *(_QWORD *)v28;
            do
            {
              for (j = 0; j != v22; ++j)
              {
                if (*(_QWORD *)v28 != v23)
                  objc_enumerationMutation(v20);
                v7 |= ABAddressBookRemoveRecord(a1, *(ABRecordRef *)(*((_QWORD *)&v27 + 1) + 8 * j), 0);
              }
              v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
            }
            while (v22);
          }
        }
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
    }
    while (v14);
  }
  if ((v7 & 1) != 0)
    ABAddressBookSave(a1, 0);
  v25 = ABOSLogGeneral();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BC4B000, v25, OS_LOG_TYPE_DEFAULT, "ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded - end", buf, 2u);
  }
}

uint64_t ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(uint64_t a1, int a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(ABAddressBookRef, _Bool)", 327, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCSourceCopyArrayOfAllSourcesIncludingDisabledSources(a1, a2);
}

CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef addressBook, ABRecordRef source)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef, ABRecordRef)", 509, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCCopyArrayOfAllPeopleInSource((uint64_t)addressBook, (uint64_t)source);
}

uint64_t ABAddressBookGetSourceCountIncludingDisabled()
{
  return (int)CPRecordStoreGetCountOfInstancesOfClassWhere();
}

uint64_t ABAddressBookGetCountOfRecordsOutsideSource(int a1, ABRecordRef record)
{
  int CountOfInstancesOfClassWhere;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("StoreID != %d"), ABRecordGetRecordID(record));
  CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
  return (int)(CPRecordStoreGetCountOfInstancesOfClassWhere() + CountOfInstancesOfClassWhere);
}

CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef addressBook)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFArrayRef result;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef)", 332, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  result = (CFArrayRef)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources((uint64_t)addressBook, 0);
  if (!result)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  return result;
}

void *ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(uint64_t a1, const void *a2, int a3)
{
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3_stmt *v9;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
  v6 = CFSTR("AND store.Enabled = 1");
  if (a3)
    v6 = &stru_1E3CA4E68;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT store.rowid from ABStore store LEFT JOIN ABAccount account on store.AccountID = account.ROWID WHERE ab_is_store_allowed(account.AccountIdentifier, store.type, store.guid, ?) = 1 %@;"),
    v6);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    v8 = v7;
    v9 = *(sqlite3_stmt **)(v7 + 8);
    if (v9)
    {
      sqlite3_bind_blob(v9, 1, a2, 8, 0);
      while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100)
        objc_msgSend(v5, "addIndex:", sqlite3_column_int(*(sqlite3_stmt **)(v8 + 8), 0));
      CPSqliteStatementReset();
    }
  }
  return v5;
}

const void *ABAddressBookCopySourceWithAccountAndExternalIdentifiers(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const void *ValueAtIndex;
  const void *v13;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopySourceWithAccountAndExternalIdentifiers(ABAddressBookRef, CFStringRef, CFStringRef)", 367, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a1 || !*(_QWORD *)(a1 + 16))
    return 0;
  v10 = (const __CFArray *)(a2
                          ? CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
                          : CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock());
  v11 = v10;
  if (!v10)
    return 0;
  if (CFArrayGetCount(v10) < 1)
  {
    v13 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
    v13 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  CFRelease(v11);
  return v13;
}

uint64_t ABAddressBookCopySourceWithProviderIdentifier(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *ValueAtIndex;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopySourceWithProviderIdentifier(ABAddressBookRef, CFStringRef)", 403, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16)
      && (v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()) != 0)
    {
      v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        a1 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
        a1 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
      }
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void ABAddressBookPrepareSourceForFamilyDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sqlite3_stmt *v5;
  const char *v6;
  sqlite3_stmt *v7;
  const char *v8;
  sqlite3_stmt *v9;
  const char *v10;

  if (a2)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    v2 = CPSqliteConnectionStatementForSQL();
    v3 = CPSqliteConnectionStatementForSQL();
    v4 = CPSqliteConnectionStatementForSQL();
    if (v2)
    {
      v5 = *(sqlite3_stmt **)(v2 + 8);
      if (v5)
      {
        v6 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v5, 1, v6, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
    if (v3)
    {
      v7 = *(sqlite3_stmt **)(v3 + 8);
      if (v7)
      {
        v8 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v7, 1, v8, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        sqlite3_bind_int(*(sqlite3_stmt **)(v3 + 8), 2, 4);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
    if (v4)
    {
      v9 = *(sqlite3_stmt **)(v4 + 8);
      if (v9)
      {
        v10 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v9, 1, v10, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
  }
}

ABRecordRef ABPersonCreateInSource(ABRecordRef source)
{
  return ABPersonCreateInSourceAndReturnError(source, 0);
}

const void *ABPersonCreateInSourceAndReturnError(const void *a1, CFErrorRef *a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v9;

  if (ABLogAPIUsage())
  {
    v9 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreateInSourceAndReturnError(ABRecordRef, CFErrorRef *)", 477, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if ((ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)a1, 1) & 1) == 0)
    return ABCPersonCreateNewPersonInSourceAndReturnError(0, a1, a2);
  if (a2)
    ABPolicyPopulateRecordReadOnlyError((const void **)a2, 0, CFSTR("SourceNotWritable"));
  return 0;
}

ABRecordRef ABGroupCreateInSource(ABRecordRef source)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCreateInSource(ABRecordRef)", 489, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCreateNewGroupInSourceAndReturnError(0, source, 0);
}

ABRecordRef ABGroupCopySource(ABRecordRef group)
{
  __CFString *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v6;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v1 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCopySource(ABRecordRef)", 502, v1, 0, v2, v3, v4, (uint64_t)v6);
    CFRelease(v1);
  }
  return (ABRecordRef)ABCGroupCopySource();
}

CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef addressBook, ABRecordRef source, ABPersonSortOrdering sortOrdering)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)", 515, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  v12 = ABCCopyArrayOfAllPeopleInSourceWithSortOrdering((uint64_t)addressBook, (uint64_t)source, sortOrdering);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)", 517, CFSTR(">> "), 0, v13, v14, v15, v17);
  return v12;
}

CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef addressBook, ABRecordRef source)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef, ABRecordRef)", 523, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (CFArrayRef)ABCCopyArrayOfAllGroupsInSource((uint64_t)addressBook, (uint64_t)source);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 530, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCPersonCopyArrayOfPeopleWithExternalIdentifierInSource(a2, a3);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 536, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(v12, (uint64_t)ABCPersonClass, a3, a2);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 552, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCGroupCopyArrayOfGroupsWithExternalIdentifierInSource(a2, a3);
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 558, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)ABCGroupClass[0], a3, a2);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 575, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(v12, (uint64_t)ABCPersonClass, a3, a2);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 591, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)ABCPersonClass, a3, a2);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 607, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(v12, (uint64_t)ABCGroupClass[0], a3, a2);
  else
    return 0;
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 622, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if ((a1 || (a1 = ABCGetAddressBookForRecord()) != 0) && (v12 = *(_QWORD *)(a1 + 16)) != 0)
    return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)ABCGroupClass[0], a3, a2);
  else
    return 0;
}

void ABAddressBookClearExternalIdentifiersInRecordsWithSource(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookClearExternalIdentifiersInRecordsWithSource(ABAddressBookRef, ABRecordRef)", 636, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABClearAllInstancesOfClassInSourceWithExternalIdentifier(a1, (const char **)ABCPersonClass, a2);
  ABClearAllInstancesOfClassInSourceWithExternalIdentifier(a1, (const char **)ABCGroupClass[0], a2);
}

uint64_t ABSourceCopyCompositeName()
{
  return 0;
}

CFMutableArrayRef copyRecordIDsInSource(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  CFMutableArrayRef Mutable;
  int v8;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT ROWID from %s where StoreID = %i;"),
         *a3,
         a4);
  if (!v5)
    return 0;
  v6 = v5;
  if (CPSqliteConnectionStatementForSQL())
  {
    Mutable = CFArrayCreateMutable(v4, 0, 0);
    CPSqliteStatementIntegerResult();
    v8 = 0;
    CPSqliteStatementReset();
  }
  else
  {
    Mutable = 0;
    v8 = 1;
  }
  CFRelease(v6);
  if (!v8 && Mutable)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

sqlite3_stmt *removeSyncImagesForRecord(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFStringRef ImageStore;

  if (a3 && (ImageStore = ABCAddressBookGetImageStore(a1)) != 0)
    return ABCImageStoreRemoveImagesForRecord((uint64_t)a1, (uint64_t)ImageStore, a3, 5);
  else
    return 0;
}

BOOL removeSyncImagesFromSource(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFStringRef ImageStore;
  _BOOL8 v7;

  v4 = copyRecordIDsInSource((uint64_t)a1, a2, ABCPersonClass, a3);
  if (!v4)
    return 0;
  v5 = v4;
  v7 = CFArrayGetCount(v4)
    && (ImageStore = ABCAddressBookGetImageStore(a1)) != 0
    && ABCImageStoreRemoveImagesForRecordIds(a1, (uint64_t)ImageStore, v5, 5) != 0;
  CFRelease(v5);
  return v7;
}

CFIndex updateRecordsForMoveToSource(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, const char **a5, int a6)
{
  const char *v9;
  size_t v10;
  int v11;
  CFIndex result;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;

  v9 = *a5;
  v10 = strlen(*(const char **)ABCPersonClass);
  LODWORD(v9) = strncmp(v9, *(const char **)ABCPersonClass, v10);
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  v11 = (int)v9;
  if (!(_DWORD)v9)
    CPRecordIndexOfPropertyNamed();
  if (a6)
    CPRecordIndexOfPropertyNamed();
  result = CFArrayGetCount(a3);
  if (result >= 1)
  {
    v13 = result;
    for (i = 0; i != v13; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a3, i);
      result = MEMORY[0x1A1ACBC14](*(_QWORD *)(a1 + 16), a5, ValueAtIndex);
      if (result)
      {
        CPRecordUnloadProperty();
        CPRecordInitializeProperty();
        CPRecordUnloadProperty();
        CPRecordUnloadProperty();
        CPRecordUnloadProperty();
        result = CPRecordUnloadProperty();
        if (a6)
          result = CPRecordUnloadProperty();
        if (!v11)
          result = CPRecordUnloadProperty();
      }
    }
  }
  return result;
}

uint64_t moveRecordsToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, int a6)
{
  const __CFArray *v10;
  const __CFString *v11;
  const char *v12;
  size_t v13;
  int v14;
  const __CFString *v15;
  CFStringRef v16;
  CFStringRef v17;
  uint64_t v18;
  uint64_t v19;

  v10 = copyRecordIDsInSource(a1, a2, a5, a3);
  if (a6)
    v11 = CFSTR(", ImageURI = NULL");
  else
    v11 = &stru_1E3CA4E68;
  v12 = *a5;
  v13 = strlen(*(const char **)ABCPersonClass);
  v14 = strncmp(*a5, *(const char **)ABCPersonClass, v13);
  v15 = CFSTR(", DowntimeWhitelist = NULL");
  if (v14)
    v15 = &stru_1E3CA4E68;
  v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@ WHERE StoreID = %i;"),
          v12,
          a4,
          v11,
          v15,
          a3);
  if (v16)
  {
    v17 = v16;
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CFRelease(v17);
      if (!v10)
        return 1;
      updateRecordsForMoveToSource(a1, v18, v10, a4, a5, a6);
      v19 = 1;
      goto LABEL_12;
    }
    CFRelease(v17);
  }
  v19 = 0;
  if (v10)
LABEL_12:
    CFRelease(v10);
  return v19;
}

BOOL moveRecordForIDToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, int a6, int a7)
{
  const __CFString *v11;
  const __CFString *v12;
  const char *v13;
  size_t v14;
  int v15;
  const __CFString *v16;
  const __CFAllocator *v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t v20;
  _BOOL8 v21;
  const __CFArray *v22;
  uint64_t v23;
  const __CFArray *v24;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a7)
    v11 = CFSTR(", ImageURI = NULL");
  else
    v11 = &stru_1E3CA4E68;
  if (a6)
    v12 = CFSTR(", ExternalUUID = NULL");
  else
    v12 = &stru_1E3CA4E68;
  v13 = *a5;
  v14 = strlen(*(const char **)ABCPersonClass);
  v15 = strncmp(v13, *(const char **)ABCPersonClass, v14);
  v16 = CFSTR(", DowntimeWhitelist = NULL");
  if (v15)
    v16 = &stru_1E3CA4E68;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@%@ WHERE ROWID = %i;"),
          v13,
          a4,
          v11,
          v12,
          v16,
          a3);
  if (v18)
  {
    v19 = v18;
    v20 = CPSqliteConnectionStatementForSQL();
    v21 = v20 != 0;
    if (v20)
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    CFRelease(v19);
  }
  else
  {
    v21 = 0;
  }
  values[0] = (void *)(int)a3;
  v22 = CFArrayCreate(v17, (const void **)values, 1, 0);
  if (v22)
  {
    v24 = v22;
    if (v21)
      updateRecordsForMoveToSource(a1, v23, v22, a4, a5, a7);
    CFRelease(v24);
  }
  return v21;
}

uint64_t ABAddressBookMovePersonToSource(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  _QWORD v6[5];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __ABAddressBookMovePersonToSource_block_invoke;
  v6[3] = &__block_descriptor_40_e614_B48__0_______CFRuntimeBase_QAQ___CPRecordStore___CPRecordStore_____CFString_____CFDictionary_____CFDictionary_____CFDictionary_____CFString_____CFString___opaque_pthread_mutex_t_q_56c______CFArray_____CFArray_____CFArray_____CFArray_____CFArray_____CFDictionary___UCollator___UCollator_____CFString_____CFString_____CFStringTokenizer_____CFString_____CFString_C____CFArray_CC____opaque_pthread_mutex_t_q_56c______CFString_d____CFString________ABBookflags_b1b1b8b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1__8__CPSqliteConnection___CPSqliteDatabase___sqlite3_____CFDictionary_____CFDictionary__v_____vIB_16_v24_v32_____CFError_40l;
  v6[4] = a2;
  ABAddressBookMoveRecordToSource(a1, a2, a3, (uint64_t)v6, a4, a5);
  return 0;
}

void ABAddressBookMoveRecordToSource(uint64_t a1, const void *a2, const void *a3, uint64_t a4, int a5, uint64_t a6)
{
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t RecordID;
  uint64_t v18;
  ABRecordType RecordType;
  uint64_t Class;
  const char **v21;
  uint64_t v22;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v11);
    v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMoveRecordToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, RecordTypeSpecificMoveWork, _Bool, CFErrorRef *)", 865, v12, (uint64_t)CFSTR("%@"), v14, v15, v16, v13);
    CFRelease(v12);
  }
  if (a2)
  {
    if (a3)
    {
      RecordID = ABRecordGetRecordID(a3);
      v18 = ABRecordGetRecordID(a2);
      RecordType = ABRecordGetRecordType(a2);
      Class = CPRecordGetClass();
      if (a1)
      {
        v21 = (const char **)Class;
        CPRecordStoreGetDatabase();
        v22 = CPSqliteDatabaseConnectionForWriting();
        if (a4)
          (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, const void *, uint64_t))(a4 + 16))(a4, a1, v22, a2, a3, a6);
        moveRecordForIDToSource(a1, v22, v18, RecordID, v21, a5, RecordType == 0);
        if (v22)
          CPSqliteDatabaseReleaseSqliteConnection();
      }
    }
  }
}

uint64_t ABAddressBookMoveGroupToSource(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  ABAddressBookMoveRecordToSource(a1, a2, a3, 0, a4, a5);
  return 0;
}

uint64_t ABAddressBookMoveAllRecordsInSourceToSource(uint64_t a1, const void *a2, const void *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t RecordID;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  int IntValue;
  int v21;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMoveAllRecordsInSourceToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 913, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  v12 = (unint64_t)ABRecordCopyValue(a2, kABSourceConstraintsPathProperty);
  v13 = (unint64_t)ABRecordCopyValue(a3, kABSourceConstraintsPathProperty);
  if (ABRecordGetIntValue((uint64_t)a2, kABSourceTypeProperty) == 2 && v12)
  {
    CFRelease((CFTypeRef)v12);
    v12 = 0;
  }
  if (ABRecordGetIntValue((uint64_t)a3, kABSourceTypeProperty) == 2 && v13)
  {
    CFRelease((CFTypeRef)v13);
    v13 = 0;
  }
  if (v12 | v13)
  {
    if (v12)
      CFRelease((CFTypeRef)v12);
    if (v13)
      CFRelease((CFTypeRef)v13);
    return 0;
  }
  else
  {
    RecordID = ABRecordGetRecordID(a2);
    v15 = ABRecordGetRecordID(a3);
    if (a1)
    {
      v16 = v15;
      CPRecordStoreGetDatabase();
      v17 = CPSqliteDatabaseConnectionForWriting();
      v18 = removeSyncImagesFromSource((const __CFString *)a1, v17, RecordID);
      v19 = moveRecordsToSource(a1, v17, RecordID, v16, (const char **)ABCPersonClass, 1);
      a1 = moveRecordsToSource(a1, v17, RecordID, v16, (const char **)ABCGroupClass[0], 0) & v19 & v18;
      if (v17)
        CPSqliteDatabaseReleaseSqliteConnection();
      IntValue = ABRecordGetIntValue((uint64_t)a2, kABSourceMeIdentifierProperty);
      v21 = ABRecordGetIntValue((uint64_t)a3, kABSourceMeIdentifierProperty);
      if (v21 != -1)
        IntValue = v21;
      ABRecordSetIntValue(a2, kABSourceMeIdentifierProperty, -1, 0);
      ABRecordSetIntValue(a3, kABSourceMeIdentifierProperty, IntValue, 0);
    }
  }
  return a1;
}

BOOL sourceContainsPerson(ABRecordRef record, uint64_t a2)
{
  _BOOL8 result;
  ABRecordID RecordID;

  result = 0;
  if (record)
  {
    if (a2)
    {
      RecordID = ABRecordGetRecordID(record);
      return RecordID == ABRecordGetIntValue(a2, kABPersonStoreIDProperty);
    }
  }
  return result;
}

BOOL ABSourceSetMe(const void *a1, const void *a2, CFAllocatorRef *a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int IntValue;
  ABRecordID RecordID;
  int v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL8 result;
  NSObject *v19;
  NSObject *v20;
  uint64_t AddressBook;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  const __CFString *v36;
  __int16 v37;
  uint8_t v38[2];
  uint8_t v39[16];
  uint8_t v40[16];
  uint8_t buf[16];

  if (ABLogAPIUsage())
  {
    v36 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceSetMe(ABRecordRef, ABRecordRef, CFErrorRef *)", 981, v6, 0, v7, v8, v9, (uint64_t)v36);
    CFRelease(v6);
  }
  IntValue = ABRecordGetIntValue((uint64_t)a1, kABSourceMeIdentifierProperty);
  if (!a2)
  {
    v15 = ABOSLogMeCardChanges();
    v16 = v15;
    if (IntValue == -1)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        ABSourceSetMe_cold_1();
      return 1;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v16, OS_LOG_TYPE_DEFAULT, "Asked to set a nil Me card and will remove the existing card", buf, 2u);
    }
    if ((ABRecordSetIntValue(a1, kABSourceMeIdentifierProperty, -1, a3) & 1) != 0)
      goto LABEL_24;
    v17 = ABOSLogMeCardChanges();
    result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABSourceSetMe_cold_3((const __CFString **)a3);
    return 0;
  }
  if (!sourceContainsPerson(a1, (uint64_t)a2))
  {
    v19 = ABOSLogMeCardChanges();
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABSourceSetMe_cold_7();
    return 0;
  }
  RecordID = ABRecordGetRecordID(a2);
  if (RecordID == -1)
  {
    v20 = ABOSLogMeCardChanges();
    result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ABSourceSetMe_cold_4();
    return 0;
  }
  v12 = RecordID;
  v13 = ABOSLogMeCardChanges();
  v14 = v13;
  if (v12 == IntValue)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      ABSourceSetMe_cold_5();
    return 1;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_19BC4B000, v14, OS_LOG_TYPE_DEFAULT, "Asked to set a new Me card and will replace the existing card", v40, 2u);
  }
  if ((ABRecordSetIntValue(a1, kABSourceMeIdentifierProperty, v12, a3) & 1) != 0)
  {
LABEL_24:
    AddressBook = ABRecordGetAddressBook();
    if (AddressBook)
    {
      v22 = AddressBook;
      if (ABAddressBookGetIntegerProperty(AddressBook) == -1)
      {
        v23 = ABOSLogMeCardChanges();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v39 = 0;
          _os_log_impl(&dword_19BC4B000, v23, OS_LOG_TYPE_INFO, "Updated the Me card and now adding the preferred souce", v39, 2u);
        }
        v24 = ABRecordGetRecordID(a1);
        ABAddressBookSetIntegerProperty(v22, (uint64_t)CFSTR("MeSourceID"), v24, v25, v26, v27, v28, v29, v35);
      }
      *(_DWORD *)(v22 + 376) |= 0x40000u;
      ABCDBContextLogChangeForPerson(*(_QWORD *)(v22 + 16), a2, 0xAu);
      if (!a2)
      {
LABEL_30:
        v30 = ABOSLogMeCardChanges();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v37 = 0;
          v31 = "We successfully removed the Me card";
          v32 = (uint8_t *)&v37;
LABEL_36:
          _os_log_impl(&dword_19BC4B000, v30, OS_LOG_TYPE_DEFAULT, v31, v32, 2u);
          return 1;
        }
        return 1;
      }
    }
    else
    {
      v33 = ABOSLogMeCardChanges();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        ABSourceSetMe_cold_2();
        if (!a2)
          goto LABEL_30;
      }
      else if (!a2)
      {
        goto LABEL_30;
      }
    }
    CPRecordMarkChanged();
    v30 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v38 = 0;
      v31 = "We successfully set a new Me card";
      v32 = v38;
      goto LABEL_36;
    }
    return 1;
  }
  v34 = ABOSLogMeCardChanges();
  result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ABSourceSetMe_cold_6((const __CFString **)a3);
    return 0;
  }
  return result;
}

uint64_t ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(const void *a1, const __CFArray *a2, const void *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  CFIndex Count;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex v16;
  char v17;
  const void *ValueAtIndex;
  const void *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex i;
  ABPropertyID v23;
  __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  CFIndex Length;
  const __CFArray *v28;
  CFIndex v29;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 1074, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  result = 0;
  if (a1)
  {
    if (a2)
    {
      Count = CFArrayGetCount(a2);
      result = 0;
      if (a3)
      {
        if (Count >= 1)
        {
          v14 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, a3);
          if (v14)
          {
            v15 = v14;
            v29 = CFArrayGetCount(v14);
            if (v29 < 1)
            {
              v17 = 0;
            }
            else
            {
              v16 = 0;
              v17 = 0;
              v28 = v15;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v15, v16);
                if (ValueAtIndex)
                {
                  v19 = ValueAtIndex;
                  v20 = CFArrayGetCount(a2);
                  if (v20 >= 1)
                  {
                    v21 = v20;
                    for (i = 0; i != v21; ++i)
                    {
                      v23 = CFArrayGetValueAtIndex(a2, i);
                      if (ABRecordTypeOfProperty() == 1)
                      {
                        v24 = (__CFString *)ABRecordCopyValue(v19, v23);
                        if (v24)
                        {
                          v25 = v24;
                          v26 = (const __CFString *)_ABStringByTrimmingWhiteSpace(v24);
                          Length = CFStringGetLength(v25);
                          if (Length != CFStringGetLength(v26))
                          {
                            ABRecordSetValue(v19, v23, v26, 0);
                            v17 = 1;
                          }
                          CFRelease(v25);
                        }
                      }
                    }
                  }
                }
                ++v16;
                v15 = v28;
              }
              while (v16 != v29);
            }
            CFRelease(v15);
          }
          else
          {
            v17 = 0;
          }
          return v17 & 1;
        }
      }
    }
  }
  return result;
}

BOOL ABSourceGetCapabilitiesFlag(uint64_t a1, int a2)
{
  return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) & a2) != 0;
}

uint64_t ABSourceSetCapabilitiesFlag(const void *a1, int a2, int a3)
{
  int IntValue;
  int v7;

  IntValue = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty);
  if (a3)
    v7 = IntValue | a2;
  else
    v7 = IntValue & ~a2;
  return ABRecordSetIntValue(a1, kABSourceCapabilitiesProperty, v7, 0);
}

uint64_t ABSourceSetShouldIgnoreCapabilitiesRestrictions(uint64_t a1, uint64_t a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Policy;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABSourceSetShouldIgnoreCapabilitiesRestrictions(ABRecordRef, _Bool)", 1143, v4, 0, v5, v6, v7, (uint64_t)v10);
    CFRelease(v4);
  }
  Policy = ABSourceGetPolicy(a1);
  return ABPolicySetShouldIgnoreCapabilitiesRestrictions(Policy, a2);
}

uint64_t ABSourceIsReadonly(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsReadonly(ABRecordRef)", 1150, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABSourceIsContentReadonlyIncludingGuardianRestrictions(a1, 1);
}

uint64_t ABSourceIsSearchable(uint64_t a1)
{
  return (ABRecordGetIntValue(a1, kABSourceTypeProperty) >> 24) & 1;
}

BOOL ABSourceIsContactProvider(uint64_t a1)
{
  return ABRecordGetIntValue(a1, kABSourceTypeProperty) == 7;
}

uint64_t ABSourceSetContentReadonly(const void *a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __CFString *v10;

  if (ABLogAPIUsage())
  {
    v10 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABSourceSetContentReadonly(ABRecordRef, _Bool)", 1203, v4, 0, v5, v6, v7, (uint64_t)v10);
    CFRelease(v4);
  }
  v8 = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty) & 0xFFFFFFFE | a2;
  return ABRecordSetIntValue(a1, kABSourceCapabilitiesProperty, v8, 0);
}

uint64_t ABSourceAreFoldersReadonlyInCapabilityRestrictions(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceAreFoldersReadonlyInCapabilityRestrictions(ABRecordRef)", 1208, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if ((ABRecordGetIntValue(a1, kABSourceTypeProperty) & 0x1000000) != 0)
    return 1;
  else
    return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 1) & 1;
}

uint64_t ABSourceAreFoldersReadonly(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Policy;
  const __CFString *v8;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABSourceAreFoldersReadonly(ABRecordRef)", 1213, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  Policy = ABSourceGetPolicy(a1);
  if ((ABPolicyShouldIgnoreCapabilitiesRestrictions(Policy) & 1) != 0)
    return 0;
  else
    return ABSourceAreFoldersReadonlyInCapabilityRestrictions(a1);
}

uint64_t ABSourceSetFoldersReadonly(const void *a1, int a2)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"void ABSourceSetFoldersReadonly(ABRecordRef, _Bool)", 1219, v4, 0, v5, v6, v7, (uint64_t)v11);
    CFRelease(v4);
  }
  v8 = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty) & 0xFFFFFFFD;
  if (a2)
    v9 = 2;
  else
    v9 = 0;
  return ABRecordSetIntValue(a1, kABSourceCapabilitiesProperty, v8 | v9, 0);
}

uint64_t ABSourceCopyPeopleWithImageSyncFailedTimeBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t v13;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABSourceCopyPeopleWithImageSyncFailedTimeBefore(ABAddressBookRef, ABRecordRef, CFDateRef)", 1225, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  v12 = _ABCCreateCFStringFromDate(a3);
  v13 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(*(_QWORD *)(a1 + 16), (uint64_t)ABCPersonClass, a2, CFSTR("ImageSyncFailedTime < ?"), v12);
  CFRelease(v12);
  CFRelease(CFSTR("ImageSyncFailedTime < ?"));
  return v13;
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t ABPolicyCopySupportedRecordTypes(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(result + 16))(*(_QWORD *)(result + 104));
  return result;
}

uint64_t ABPolicyCopySupportedLabelsForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 32))(a2, a3, *(_QWORD *)(result + 104));
  return result;
}

uint64_t ABPolicyCopyPreferredLabelsForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 40))(a2, a3, *(_QWORD *)(result + 104));
  return result;
}

uint64_t ABPolicyShouldAddRecord(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    if (((*(uint64_t (**)(_QWORD))(result + 96))(*(_QWORD *)(result + 104)) & 1) != 0)
      return 1;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v7 + 48))(a2, a3, *(_QWORD *)(v7 + 104), a4);
  }
  return result;
}

uint64_t ABPolicyShouldRemoveRecord(uint64_t result, uint64_t a2, const void *a3, const void **a4)
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    if (((*(uint64_t (**)(_QWORD))(result + 96))(*(_QWORD *)(result + 104)) & 1) != 0)
    {
      return 1;
    }
    else if (ABRecordGetRecordType(a3)
           || a2 && ABAddressBookIgnoresGuardianRestrictions(a2)
           || !ABPersonIsDowntimeWhitelisted(a3))
    {
      return (*(uint64_t (**)(uint64_t, const void *, _QWORD, const void **))(v7 + 56))(a2, a3, *(_QWORD *)(v7 + 104), a4);
    }
    else
    {
      ABPolicyPopulateRecordReadOnlyError(a4, 0, CFSTR("RecordNotWritable"));
      return 0;
    }
  }
  return result;
}

uint64_t ABPolicyPopulateRecordReadOnlyError(const void **a1, int a2, const void *a3)
{
  const void *v5;
  __CFDictionary *Mutable;

  if (a1)
  {
    if (a2)
    {
      v5 = *a1;
      if (*a1)
        CFRelease(v5);
    }
    if (a3)
    {
      Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("PolicyRejectionReason"), a3);
    }
    else
    {
      Mutable = 0;
    }
    *a1 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  return 0;
}

uint64_t ABPolicyShouldAddMember(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    if (((*(uint64_t (**)(_QWORD))(result + 96))(*(_QWORD *)(result + 104)) & 1) != 0)
      return 1;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 64))(a2, a3, a4, *(_QWORD *)(v7 + 104));
  }
  return result;
}

uint64_t ABPolicyShouldRemoveMember(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    if (((*(uint64_t (**)(_QWORD))(result + 96))(*(_QWORD *)(result + 104)) & 1) != 0)
      return 1;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 72))(a2, a3, a4, *(_QWORD *)(v7 + 104));
  }
  return result;
}

BOOL ABPolicyIsPropertyGuardianRestricted(int a1, int a2)
{
  return !a1 && kABPersonDowntimeWhitelistProperty == a2;
}

uint64_t ABPolicyRecordIsWriteable(const void *a1, _QWORD *a2)
{
  const void **v4;
  ABRecordType RecordType;
  ABRecordRef v6;
  const void *v7;
  __CFString **v8;
  ABRecordRef v9;
  const void *v10;
  uint64_t v11;
  uint64_t AddressBook;
  ABRecordRef v13;
  const void *v14;
  uint64_t Policy;
  char v16;
  uint64_t v18;

  v18 = 0;
  if (a2)
    v4 = (const void **)&v18;
  else
    v4 = 0;
  RecordType = ABRecordGetRecordType(a1);
  if (RecordType == 2)
  {
    if ((ABSourceIsContentReadonly((uint64_t)a1) & 1) == 0 && !ABSourceAreFoldersReadonly((uint64_t)a1))
      return 1;
    v8 = &ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonSourceNotWritable;
LABEL_28:
    ABPolicyPopulateRecordReadOnlyError(v4, 1, *v8);
LABEL_29:
    v11 = 0;
    if (!a2)
      return v11;
    goto LABEL_30;
  }
  if (RecordType != 1)
  {
    if (!RecordType)
    {
      v6 = ABPersonCopySource(a1);
      if (v6)
      {
        v7 = v6;
        if (ABSourceIsContentReadonly((uint64_t)v6))
        {
          ABPolicyPopulateRecordReadOnlyError(v4, 1, CFSTR("SourceNotWritable"));
          CFRelease(v7);
          goto LABEL_29;
        }
        CFRelease(v7);
      }
      AddressBook = ABRecordGetAddressBook();
      if (AddressBook)
      {
        if (ABAddressBookIgnoresGuardianRestrictions(AddressBook))
          return 1;
        v13 = ABPersonCopySource(a1);
        if (v13)
        {
          v14 = v13;
          Policy = ABSourceGetPolicy((uint64_t)v13);
          if (Policy)
          {
            v16 = (*(uint64_t (**)(_QWORD))(Policy + 96))(*(_QWORD *)(Policy + 104));
            CFRelease(v14);
            if ((v16 & 1) != 0)
              return 1;
          }
          else
          {
            CFRelease(v14);
          }
        }
      }
      if (ABPersonIsDowntimeWhitelisted(a1))
      {
        v8 = ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonRecordNotWritable;
        goto LABEL_28;
      }
    }
    return 1;
  }
  v9 = ABGroupCopySource(a1);
  if (!v9)
    return 1;
  v10 = v9;
  v11 = ABSourceIsContentReadonly((uint64_t)v9) ^ 1;
  if ((v11 & 1) == 0)
    ABPolicyPopulateRecordReadOnlyError(v4, 1, CFSTR("SourceNotWritable"));
  CFRelease(v10);
  if (a2)
  {
LABEL_30:
    if ((v11 & 1) == 0)
    {
      v11 = 0;
      *a2 = v18;
    }
  }
  return v11;
}

uint64_t ABPolicyShouldSetValue(uint64_t a1, ABAddressBookRef addressBook, ABRecordRef record, uint64_t a4, void *a5, uint64_t a6, CFTypeRef *a7)
{
  CFTypeRef *p_cf;
  ABRecordType RecordType;
  int v15;
  __CFString **v16;
  ABRecordRef v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  CFTypeRef v24;
  const void *v25;
  CFTypeRef cf;

  cf = 0;
  if (a7)
    p_cf = &cf;
  else
    p_cf = 0;
  if (record)
  {
    RecordType = ABRecordGetRecordType(record);
    v15 = ABPolicyRecordIsWriteable(record, p_cf) ^ 1;
    if (!RecordType)
    {
      if (ABPersonPropertyIsStub(a4))
      {
        v16 = ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonRecordPropertyNotWritable;
        goto LABEL_26;
      }
      v18 = 1;
      v19 = kABPersonLinkProperty == (_DWORD)a4 || kABPersonSoundProperty == (_DWORD)a4;
      v20 = 1;
      if (v19)
        goto LABEL_34;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (addressBook)
  {
    v17 = ABAddressBookCopyDefaultSource(addressBook);
    if ((ABSourceIsContentReadonly((uint64_t)v17) & 1) != 0)
      v15 = 1;
    else
      v15 = ABSourceAreFoldersReadonly((uint64_t)v17);
    CFRelease(v17);
LABEL_20:
    v18 = 0;
    goto LABEL_21;
  }
  v18 = 0;
  v15 = 0;
LABEL_21:
  v21 = ABRecordGetRecordType(record);
  if (a1 && ((*(uint64_t (**)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 104)) & 1) != 0)
    goto LABEL_33;
  if (v15)
  {
    if (cf)
    {
LABEL_27:
      v20 = 0;
      goto LABEL_38;
    }
    v16 = &ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonSourceNotWritable;
LABEL_26:
    ABPolicyPopulateRecordReadOnlyError(p_cf, 1, *v16);
    goto LABEL_27;
  }
  if (!record)
    goto LABEL_33;
  if ((_DWORD)v21
    || kABPersonDowntimeWhitelistProperty != (_DWORD)a4
    || ABAddressBookIgnoresGuardianRestrictions((uint64_t)addressBook))
  {
    if ((ABPolicyShouldSetValueForRecordType(a1, v21, a4, (uint64_t)a5, a6, (uint64_t)p_cf) & 1) != 0)
    {
LABEL_33:
      v20 = 1;
      goto LABEL_34;
    }
  }
  else
  {
    ABPolicyPopulateRecordReadOnlyError(p_cf, 1, CFSTR("RecordPropertyNotWritable"));
  }
  v24 = ABRecordCopyValue(record, a4);
  if (v24)
  {
    v25 = v24;
    v20 = CFEqual(a5, v24) != 0;
    CFRelease(v25);
  }
  else
  {
    v20 = a5 == 0;
  }
LABEL_34:
  if (v18 && (_DWORD)v20 && kABPersonAlternateBirthdayProperty == (_DWORD)a4)
    v20 = ABValidateAlternateBirthday(a5);
LABEL_38:
  if ((_DWORD)v20 || !cf)
  {
    if (cf)
      v22 = v20;
    else
      v22 = 0;
    if (v22 == 1)
      CFRelease(cf);
  }
  else
  {
    *a7 = cf;
  }
  return v20;
}

uint64_t ABPolicyShouldSetValueForRecordType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v17;

  if (ABLogAPIUsage())
  {
    v17 = _isMainThread();
    v12 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABPolicyShouldSetValueForRecordType(ABPolicyRef, ABRecordType, ABPropertyID, CFTypeRef, _Bool *, CFErrorRef *)", 414, v12, 0, v13, v14, v15, (uint64_t)v17);
    CFRelease(v12);
  }
  if (!a1)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 104)) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 80))(a2, a3, a4, a5, *(_QWORD *)(a1 + 104), a6);
}

uint64_t ABPolicySetShouldIgnoreCapabilitiesRestrictions(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 88))(a2, *(_QWORD *)(result + 104));
  return result;
}

void *createPermissivePolicyContext()
{
  return malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
}

uint64_t copyAllRecordTypes()
{
  return 0;
}

uint64_t anyLabels()
{
  return 0;
}

uint64_t noPreferredLabels()
{
  return 0;
}

uint64_t alwaysAddRecord()
{
  return 1;
}

uint64_t alwaysRemoveRecord()
{
  return 1;
}

uint64_t alwaysAddMember()
{
  return 1;
}

uint64_t alwaysRemoveMember()
{
  return 1;
}

uint64_t alwaysSetValue()
{
  return 1;
}

uint64_t permissivePolicySetShouldIgnoreCapabilitiesRestrictions(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t freePermissivePolicyContext(void *a1)
{
  if (a1)
    free(a1);
  return 1;
}

void *createReadOnlyPolicyContext()
{
  return malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
}

double ABPolicyCreateReadOnly()
{
  void *v0;

  v0 = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
  return ABPolicyCreateWithCallbacks((uint64_t)copyAllRecordTypes, (uint64_t)noMaximumValues, (uint64_t)anyLabels, (uint64_t)noPreferredLabels, (uint64_t)neverAddRecord, (uint64_t)neverRemoveRecord, (uint64_t)neverAddMember, (uint64_t)neverRemoveMember, (uint64_t)neverSetValue, (uint64_t)readOnlyPolicySetIgnoreCapabilitiesRestrictions, (uint64_t)readOnlyPolicyGetIgnoreCapabilitiesRestrictions, (uint64_t)v0, 1, (uint64_t)freeReadOnlyPolicyContext);
}

uint64_t neverAddRecord(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  ABPolicyPopulateRecordReadOnlyError(a4, 1, CFSTR("SourceNotWritable"));
  return 0;
}

uint64_t neverRemoveRecord(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  ABPolicyPopulateRecordReadOnlyError(a4, 1, CFSTR("SourceNotWritable"));
  return 0;
}

uint64_t neverAddMember()
{
  return 0;
}

uint64_t neverRemoveMember()
{
  return 0;
}

uint64_t neverSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  ABPolicyPopulateRecordReadOnlyError(a6, 1, CFSTR("SourceNotWritable"));
  return 0;
}

uint64_t readOnlyPolicySetIgnoreCapabilitiesRestrictions(uint64_t result, _BYTE *a2)
{
  *a2 = result;
  return result;
}

uint64_t readOnlyPolicyGetIgnoreCapabilitiesRestrictions(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t freeReadOnlyPolicyContext(void *a1)
{
  if (a1)
    free(a1);
  return 1;
}

double ABPolicyCreateWithCoder(void *a1, uint64_t a2)
{
  int v4;
  const __CFData *v6;
  CFPropertyListRef v7;

  v4 = objc_msgSend(a1, "decodeIntForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@::%@"), a2, CFSTR("context-type")));
  if (v4 == 1)
    return ABPolicyCreateReadOnly();
  if (!v4)
    return ABPolicyCreatePermissive();
  v6 = (const __CFData *)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@::%@"), a2, CFSTR("context-data")));
  v7 = CFPropertyListCreateWithData(0, v6, 0, 0, 0);
  if (!v7)
    ABPolicyCreateWithCoder_cold_1();
  return ABPolicyCreateWithDictionary((uint64_t)v7);
}

uint64_t ABPolicyPrefixedSecureCodingKey(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@::%@"), a1, a2);
}

void ABPolicyEncodeWithCoder(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  CFDataRef Data;

  v6 = *(unsigned int *)(a1 + 112);
  objc_msgSend(a2, "encodeInt:forKey:", v6, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@::%@"), a3, CFSTR("context-type")));
  if ((_DWORD)v6 == 2)
  {
    Data = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 104), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    objc_msgSend(a2, "encodeObject:forKey:", Data, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@::%@"), a3, CFSTR("context-data")));
    CFRelease(Data);
  }
}

uint64_t ABPolicyGetContextType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

BOOL ABPolicyIsEqualToPolicy(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 112);
  if (v2 != *(_DWORD *)(a2 + 112))
    return 0;
  if (v2 == 2)
    return CFEqual(*(CFTypeRef *)(a1 + 104), *(CFTypeRef *)(a2 + 104)) != 0;
  return 1;
}

uint64_t ABPolicyDestroy(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 120);
  if (v1)
    return v1(*(_QWORD *)(result + 104));
  return result;
}

void *ABPersonGetMatchingDictionary(const void *a1, int a2)
{
  return ABPersonGetUserActivityUserInfoWithInternalUUID(a1, a2, 0);
}

CFTypeRef ABAddressBookFindPersonMatchingMatchingDictionary(__CFArray *a1, void *a2)
{
  return _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(a1, a2, 0);
}

void ___findPersonByWeightedSearch_block_invoke(uint64_t a1, void *a2, void *a3, char a4)
{
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = (id *)objc_msgSend(a2, "context");
  if (objc_msgSend(a3, "count"))
  {
    if (!*v7)
      *v7 = (id)objc_opt_new();
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(a3);
          objc_msgSend(*v7, "addObject:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11++));
        }
        while (v9 != v11);
        v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v9);
    }
  }
  if ((a4 & 1) == 0)
    CFRunLoopStop(*(CFRunLoopRef *)(a1 + 32));
}

void _addOperation_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  void *v14;
  void *active;
  id v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v14 = (void *)objc_opt_new();
    if (kABPersonPhoneProperty == (_DWORD)a2)
    {
      active = (void *)CPPhoneNumberCopyActiveCountryCode();
      v16 = +[ABSearchOperation personPredicateWithPhoneLike:countryHint:addressBook:](ABSearchOperation, "personPredicateWithPhoneLike:countryHint:addressBook:", a1, active, a5);

      if (!a7)
      {
LABEL_4:
        v17 = v14;
        v18 = (uint64_t)v16;
LABEL_7:
        objc_msgSend(v17, "setPredicate:", v18);
        objc_msgSend(v14, "setContext:", a3);
        objc_msgSend(v14, "setProgressBlock:", a4);
        objc_msgSend(v14, "setAddressBook:", a5);
        objc_msgSend(a6, "addOperation:", v14);

        return;
      }
    }
    else
    {
      v16 = +[ABPredicate personPredicateWithValue:comparison:forProperty:](ABPredicate, "personPredicateWithValue:comparison:forProperty:", a1, 0, a2);
      if (!a7)
        goto LABEL_4;
    }
    v19[0] = v16;
    v19[1] = +[ABPredicate personPredicateWithValue:comparison:forProperty:](ABPredicate, "personPredicateWithValue:comparison:forProperty:", 0, 0, kABPersonExternalUUIDProperty);
    v18 = objc_msgSend(MEMORY[0x1E0CB3528], "andPredicateWithSubpredicates:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 2));
    v17 = v14;
    goto LABEL_7;
  }
}

uint64_t _countInstancesOfRecord_0(const __CFDictionary *a1, void *a2, unsigned int *a3, void *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  unsigned int Value;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(a2);
        v12 = *(const void **)(*((_QWORD *)&v15 + 1) + 8 * v11);
        Value = CFDictionaryGetValue(a1, v12);
        v14 = objc_msgSend(a2, "countForObject:", v12) + Value;
        if (*a3 != v14)
        {
          if (*a3 >= v14)
            goto LABEL_10;
          *a3 = v14;
          objc_msgSend(a4, "removeAllObjects");
        }
        objc_msgSend(a4, "addObject:", v12);
LABEL_10:
        CFDictionarySetValue(a1, v12, (const void *)v14);
        ++v11;
      }
      while (v9 != v11);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

uint64_t correctUnsupportedLabels(int a1, ABPropertyID property, const void *a3, _BYTE *a4, const __CFDictionary *a5)
{
  __int16 TypeOfProperty;
  uint64_t result;
  CFMutableDictionaryRef v12;
  const __CFDictionary *v13;
  CFIndex v14;
  const __CFDictionary *Mutable;
  char v16;
  CFIndex v17;
  CFStringRef v18;
  CFStringRef v19;
  CFStringRef v20;
  signed int Value;
  signed int v22;
  char v23;
  const __CFDictionary *v24;
  const __CFArray *PreferredLabels;
  CFIndex v26;
  CFStringRef v27;
  int v28;
  const void *ValueAtIndex;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  int v33;
  const __CFDictionary *v34;
  int v35;
  BOOL v36;
  _BYTE *v37;
  const __CFDictionary *theDict;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  const __CFString *v43;
  CFIndex Count;

  TypeOfProperty = ABPersonGetTypeOfProperty(property);
  result = 1;
  if (a3 && (TypeOfProperty & 0x100) != 0)
  {
    v12 = copyLabels(a1, property, a5);
    if (!v12)
    {
      v16 = 1;
      return v16 & 1;
    }
    v13 = v12;
    Count = ABMultiValueGetCount(a3);
    v14 = CFDictionaryGetCount(v13);
    v39 = a1;
    v40 = property;
    if (v14)
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
    else
      Mutable = 0;
    if (Count < 1)
    {
      v16 = 1;
      if (!Mutable)
        goto LABEL_58;
    }
    else
    {
      v17 = 0;
      v18 = (CFStringRef)*MEMORY[0x1E0C9B0D0];
      v16 = 1;
      v42 = (uint64_t)a3;
      v43 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
      do
      {
        v19 = ABMultiValueCopyLabelAtIndex(a3, v17);
        if (v19)
          v20 = v19;
        else
          v20 = v18;
        if (v20)
        {
          if (v14)
          {
            Value = CFDictionaryGetValue(Mutable, v20);
            v22 = CFDictionaryGetValue(v13, v20);
            CFDictionarySetValue(Mutable, v20, (const void *)(Value + 1));
            v36 = Value < v22;
            a3 = (const void *)v42;
            v18 = v43;
            v23 = v36;
            v16 &= v23;
          }
          else if (v20 != v18)
          {
            ABCMultiValueReplaceLabel((uint64_t)a3, v18, v17);
            if (a4)
              *a4 = 1;
          }
          CFRelease(v20);
        }
        ++v17;
      }
      while (Count != v17);
      if ((v16 & 1) == 0)
      {
        v37 = a4;
        theDict = a5;
        v24 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
        PreferredLabels = 0;
        v26 = 0;
        v41 = 1;
        while (1)
        {
          v27 = ABMultiValueCopyLabelAtIndex(a3, v26);
          if (v27)
            v18 = v27;
          if (!v18)
            goto LABEL_52;
          v28 = CFDictionaryGetValue(v24, v18);
          if (v28 >= (int)CFDictionaryGetValue(v13, v18))
          {
            if (!PreferredLabels)
            {
              PreferredLabels = (const __CFArray *)getPreferredLabels(v39, v40, theDict);
              if (!PreferredLabels)
                goto LABEL_50;
            }
            v30 = CFArrayGetCount(PreferredLabels);
            if (v30 < 1)
              goto LABEL_50;
            v31 = v30;
            v32 = 1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(PreferredLabels, v32 - 1);
              v33 = CFDictionaryGetValue(v24, ValueAtIndex);
              if (v33 <= (int)CFDictionaryGetValue(Mutable, ValueAtIndex))
                v34 = Mutable;
              else
                v34 = v24;
              v35 = CFDictionaryGetValue(v34, ValueAtIndex);
              if (v35 >= (int)CFDictionaryGetValue(v13, ValueAtIndex))
                ValueAtIndex = 0;
              if (ValueAtIndex)
                v36 = 0;
              else
                v36 = v32 < v31;
              ++v32;
            }
            while (v36);
            if (!ValueAtIndex)
            {
LABEL_50:
              v41 = 0;
              goto LABEL_51;
            }
            ABCMultiValueReplaceLabel(v42, ValueAtIndex, v26);
            if (v37)
              *v37 = 1;
            v28 = CFDictionaryGetValue(v24, ValueAtIndex);
          }
          else
          {
            ValueAtIndex = v18;
          }
          CFDictionarySetValue(v24, ValueAtIndex, (const void *)(v28 + 1));
LABEL_51:
          a3 = (const void *)v42;
          CFRelease(v18);
LABEL_52:
          v18 = v43;
          if (++v26 == Count)
          {
            if (v24)
              CFRelease(v24);
            v16 = v41;
            break;
          }
        }
      }
      if (!Mutable)
        goto LABEL_58;
    }
    CFRelease(Mutable);
LABEL_58:
    CFRelease(v13);
    return v16 & 1;
  }
  return result;
}

CFMutableDictionaryRef copyLabels(int a1, int a2, CFDictionaryRef theDict)
{
  __CFDictionary *Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  uint64_t Count;
  const void **v16;
  const void **v17;
  uint64_t i;
  uint64_t v19;
  unsigned int valuePtr;
  CFRange v21;

  if (a1)
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ABPerson"));
  if (!Value)
    return 0;
  v7 = Value;
  v8 = ABPersonNameForProperty(a2);
  v9 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("UnsupportedAttributes"));
  if (!v9 || (v10 = v9, v21.length = CFArrayGetCount(v9), v21.location = 0, !CFArrayContainsValue(v10, v21, v8)))
  {
    v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("MultiValueRestrictions"));
    if (v11)
    {
      v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, v8);
      if (v12)
      {
        v13 = (const __CFDictionary *)CFDictionaryGetValue(v12, CFSTR("SupportedLabels"));
        if (v13)
        {
          v14 = v13;
          Count = CFDictionaryGetCount(v13);
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B390], 0);
          if (Count >= 1)
          {
            valuePtr = 0;
            v16 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            v17 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            CFDictionaryGetKeysAndValues(v14, v16, v17);
            for (i = 0; i != Count; ++i)
            {
              CFNumberGetValue((CFNumberRef)v17[i], kCFNumberIntType, &valuePtr);
              v19 = valuePtr;
              if ((valuePtr & 0x80000000) != 0)
              {
                valuePtr = 0x7FFFFFFF;
                v19 = 0x7FFFFFFFLL;
              }
              CFDictionarySetValue(Mutable, v16[i], (const void *)v19);
            }
            free(v17);
            free(v16);
          }
          return Mutable;
        }
      }
    }
    return 0;
  }
  return CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
}

const void *getPreferredLabels(int a1, int a2, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  const __CFString *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;

  if (!a1
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ABPerson"))) != 0
    && (v6 = Value,
        v7 = ABPersonNameForProperty(a2),
        (v8 = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("MultiValueRestrictions"))) != 0)
    && (v9 = (const __CFDictionary *)CFDictionaryGetValue(v8, v7)) != 0)
  {
    return CFDictionaryGetValue(v9, CFSTR("PreferredLabels"));
  }
  else
  {
    return 0;
  }
}

uint64_t ABPolicyCreateFromDictionaryAtPath(CFStringRef filePath)
{
  const __CFURL *v1;
  const __CFURL *v2;
  uint64_t v3;

  if (!filePath)
    return 0;
  v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = ABPolicyCreateWithDictionaryAtURL(v1);
  CFRelease(v2);
  return v3;
}

uint64_t ABPolicyCreateWithDictionaryAtURL(CFURLRef fileURL)
{
  const __CFAllocator *v1;
  __CFReadStream *v2;
  __CFReadStream *v3;
  CFPropertyListRef v4;
  uint64_t v5;
  uint64_t v6;

  if (!fileURL)
    return 0;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E0C9AE00], fileURL);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    v4 = CFPropertyListCreateWithStream(v1, v3, 0, 1uLL, 0, 0);
    if (v4)
    {
      ABPolicyCreateWithCallbacks((uint64_t)copyRecordTypes, (uint64_t)getMaximumValues, (uint64_t)copyLabels, (uint64_t)copyPreferredLabels, (uint64_t)shouldAddRecord, (uint64_t)shouldRemoveRecord, (uint64_t)shouldAddMember, (uint64_t)shouldRemoveMember, (uint64_t)shouldSetValue, (uint64_t)setShouldIgnoreCapabilitiesRestrictions, (uint64_t)shouldIgnoreCapabilitiesRestrictions, (uint64_t)v4, 2, (uint64_t)freeContext);
      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    CFReadStreamClose(v3);
  }
  else
  {
    v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

double ABPolicyCreateWithDictionary(uint64_t a1)
{
  return ABPolicyCreateWithCallbacks((uint64_t)copyRecordTypes, (uint64_t)getMaximumValues, (uint64_t)copyLabels, (uint64_t)copyPreferredLabels, (uint64_t)shouldAddRecord, (uint64_t)shouldRemoveRecord, (uint64_t)shouldAddMember, (uint64_t)shouldRemoveMember, (uint64_t)shouldSetValue, (uint64_t)setShouldIgnoreCapabilitiesRestrictions, (uint64_t)shouldIgnoreCapabilitiesRestrictions, a1, 2, (uint64_t)freeContext);
}

__CFArray *copyRecordTypes(const __CFDictionary *a1)
{
  const __CFDictionary *Value;
  const __CFBoolean *v2;
  _BOOL4 v3;
  __CFArray *Mutable;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("ABGroup"));
  v3 = !Value
    || (v2 = (const __CFBoolean *)CFDictionaryGetValue(Value, CFSTR("Multigroups"))) == 0
    || CFBooleanGetValue(v2) != 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, 0);
  CFArrayAppendValue(Mutable, 0);
  if (v3)
    CFArrayAppendValue(Mutable, (const void *)1);
  return Mutable;
}

uint64_t getMaximumValues(int a1, int a2, CFDictionaryRef theDict)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFNumber *v13;
  unsigned int valuePtr;
  CFRange v15;

  result = 0x7FFFFFFFLL;
  valuePtr = 0x7FFFFFFF;
  if (!a1)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ABPerson"));
    if (!Value)
      return 0x7FFFFFFFLL;
    v7 = Value;
    v8 = ABPersonNameForProperty(a2);
    v9 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("UnsupportedAttributes"));
    if (v9)
    {
      v10 = v9;
      v15.length = CFArrayGetCount(v9);
      v15.location = 0;
      if (CFArrayContainsValue(v10, v15, v8))
        return 0;
    }
    if ((ABPersonGetTypeOfProperty(a2) & 0x100) == 0)
      return 1;
    v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("MultiValueRestrictions"));
    if (v11
      && (v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, v8)) != 0
      && (v13 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("MaximumNumber"))) != 0)
    {
      CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0x7FFFFFFFLL;
    }
  }
  return result;
}

const __CFArray *copyPreferredLabels(int a1, int a2, const __CFDictionary *a3)
{
  const __CFArray *result;

  result = (const __CFArray *)getPreferredLabels(a1, a2, a3);
  if (result)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], result);
  return result;
}

uint64_t shouldAddRecord(uint64_t a1, const void *a2, const __CFDictionary *a3, const void **a4)
{
  __CFArray *v7;
  ABRecordType RecordType;
  CFIndex FirstIndexOfValue;
  CFRange v11;

  if (ABPolicyRecordIsWriteable(a2, 0))
  {
    v7 = copyRecordTypes(a3);
    RecordType = ABRecordGetRecordType(a2);
    v11.length = CFArrayGetCount(v7);
    v11.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v11, (const void *)RecordType);
    CFRelease(v7);
    if (FirstIndexOfValue != -1)
      return 1;
  }
  ABPolicyPopulateRecordReadOnlyError(a4, 0, CFSTR("SourceNotWritable"));
  return 0;
}

uint64_t shouldRemoveRecord(uint64_t a1, const void *a2, uint64_t a3, const void **a4)
{
  uint64_t IsWriteable;

  IsWriteable = ABPolicyRecordIsWriteable(a2, 0);
  if ((IsWriteable & 1) == 0)
    ABPolicyPopulateRecordReadOnlyError(a4, 0, CFSTR("SourceNotWritable"));
  return IsWriteable;
}

uint64_t shouldAddMember(uint64_t a1, const void *a2)
{
  return ABPolicyRecordIsWriteable(a2, 0);
}

uint64_t shouldRemoveMember(uint64_t a1, const void *a2)
{
  return ABPolicyRecordIsWriteable(a2, 0);
}

uint64_t shouldSetValue(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, const __CFDictionary *a5)
{
  unint64_t v10;
  uint64_t result;
  BOOL v12;

  if (a4)
    *a4 = 0;
  v10 = 0;
  do
  {
    result = (*(&off_1E3CA3CD0 + v10))(a1, a2, a3, (int)a4, a5);
    if ((_DWORD)result)
      v12 = v10 >= 3;
    else
      v12 = 1;
    ++v10;
  }
  while (!v12);
  return result;
}

void setShouldIgnoreCapabilitiesRestrictions(int a1, CFMutableDictionaryRef theDict)
{
  if (theDict)
  {
    if (a1)
      CFDictionarySetValue(theDict, CFSTR("OverrideReadonly"), (const void *)*MEMORY[0x1E0C9AE50]);
    else
      CFDictionaryRemoveValue(theDict, CFSTR("OverrideReadonly"));
  }
}

const __CFDictionary *shouldIgnoreCapabilitiesRestrictions(const __CFDictionary *result)
{
  if (result)
    return (const __CFDictionary *)(CFDictionaryGetValue(result, CFSTR("OverrideReadonly")) == (const void *)*MEMORY[0x1E0C9AE50]);
  return result;
}

uint64_t freeContext(const void *a1)
{
  CFRelease(a1);
  return 1;
}

BOOL propertyIsSupported(int a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  const __CFString *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFString *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFRange v13;

  if (a1)
    v6 = CFSTR("ABGroup");
  else
    v6 = CFSTR("ABPerson");
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v6);
  if (!Value)
    return 1;
  v8 = Value;
  v9 = ABPersonNameForProperty(a2);
  v10 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("UnsupportedAttributes"));
  if (!v10)
    return 1;
  v11 = v10;
  v13.length = CFArrayGetCount(v10);
  v13.location = 0;
  return CFArrayContainsValue(v11, v13, v9) == 0;
}

BOOL notTooManyValuesForSet(int a1, ABPropertyID property, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  _BOOL8 result;
  int MaximumValues;

  result = 1;
  if (!a1 && a3)
  {
    if ((ABPersonGetTypeOfProperty(property) & 0x100) != 0
      && (MaximumValues = getMaximumValues(0, property, a5), MaximumValues != 0x7FFFFFFF))
    {
      return ABMultiValueGetCount(a3) <= MaximumValues;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t correctUnsupportedValueKeys(int a1, ABPropertyID property, const void *a3, _BYTE *a4, const __CFDictionary *a5)
{
  ABPropertyType TypeOfProperty;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFDictionary *Value;
  const __CFDictionary *v15;
  const __CFString *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  const __CFDictionary *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  __CFDictionary *MutableCopy;
  const void *ValueAtIndex;
  const __CFAllocator *Default;
  CFIndex v28;
  uint64_t v30;
  _BYTE *v31;

  TypeOfProperty = ABPersonGetTypeOfProperty(property);
  if (!a1)
  {
    if (a3)
    {
      if (TypeOfProperty == 261)
      {
        Count = ABMultiValueGetCount(a3);
        if (Count >= 1)
        {
          v12 = Count;
          v13 = 0;
          v30 = (uint64_t)a3;
          v31 = a4;
          do
          {
            Value = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("ABPerson"));
            if (Value)
            {
              v15 = Value;
              v16 = ABPersonNameForProperty(property);
              v17 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("MultiValueRestrictions"));
              if (v17)
              {
                v18 = (const __CFDictionary *)CFDictionaryGetValue(v17, v16);
                if (v18)
                {
                  v19 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("UnsupportedValueKeys"));
                  if (v19)
                  {
                    v20 = v19;
                    v21 = (const __CFDictionary *)ABMultiValueCopyValueAtIndex(a3, v13);
                    v22 = CFArrayGetCount(v20);
                    if (v22 >= 1)
                    {
                      v23 = v22;
                      v24 = 0;
                      MutableCopy = 0;
                      do
                      {
                        ValueAtIndex = CFArrayGetValueAtIndex(v20, v24);
                        if (CFDictionaryContainsKey(v21, ValueAtIndex))
                        {
                          if (!MutableCopy)
                          {
                            Default = CFAllocatorGetDefault();
                            v28 = CFDictionaryGetCount(v21);
                            MutableCopy = CFDictionaryCreateMutableCopy(Default, v28, v21);
                          }
                          CFDictionaryRemoveValue(MutableCopy, ValueAtIndex);
                        }
                        ++v24;
                      }
                      while (v23 != v24);
                      a3 = (const void *)v30;
                      if (MutableCopy)
                      {
                        ABCMultiValueReplaceValue(v30, MutableCopy, v13);
                        CFRelease(MutableCopy);
                        if (v31)
                          *v31 = 1;
                      }
                    }
                    CFRelease(v21);
                  }
                }
              }
            }
            ++v13;
          }
          while (v13 != v12);
        }
      }
    }
  }
  return 1;
}

__CFDictionary *ABCreateAddressDictionaryWithString(const __CFString *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  const void *v7;
  const void *ValueAtIndex;
  uint64_t Range;
  uint64_t v10;
  uint64_t v11;
  const __CFString *Type;
  const __CFArray *SubResults;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const void *v17;
  const __CFString *v18;
  __CFString **v19;
  __CFString *v20;
  const void *MatchedString;
  void *Value;
  const void *v23;
  const __CFString *v25;
  int v26;

  if (ABLogAPIUsage())
  {
    v25 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABCreateAddressDictionaryWithString(CFStringRef)", 136, v2, 0, v3, v4, v5, (uint64_t)v25);
    CFRelease(v2);
  }
  pthread_once(&__copyDataDetectorsResultsForString_sLoadDataDetectorsOnce, _loadDataDetectorsCoreFramework);
  Mutable = 0;
  if (!a1 || !sSharedDataDetectorsScanner)
    return Mutable;
  pthread_mutex_lock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
  if (!_lazyDDScannerScanString(sSharedDataDetectorsScanner, a1))
  {
    pthread_mutex_unlock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
    return 0;
  }
  v7 = (const void *)_lazyDDScannerCopyResults(sSharedDataDetectorsScanner);
  pthread_mutex_unlock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
  if (!v7)
    return 0;
  if (CFArrayGetCount((CFArrayRef)v7) != 1
    || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, 0),
        Range = _lazyDDResultGetRange(),
        v11 = v10,
        Type = (const __CFString *)_lazyDDResultGetType(ValueAtIndex),
        CFStringCompare(Type, CFSTR("FullAddress"), 0) | Range)
    || v11 != CFStringGetLength(a1))
  {
    CFRelease(v7);
    return 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  SubResults = (const __CFArray *)_lazyDDResultGetSubResults(ValueAtIndex);
  Count = CFArrayGetCount(SubResults);
  if (Count < 1)
    goto LABEL_31;
  v15 = Count;
  v16 = 0;
  v26 = 0;
  do
  {
    v17 = CFArrayGetValueAtIndex(SubResults, v16);
    v18 = (const __CFString *)_lazyDDResultGetType(v17);
    if (CFStringCompare(v18, CFSTR("Street"), 0))
    {
      if (CFStringCompare(v18, CFSTR("SubLocality"), 0))
      {
        if (CFStringCompare(v18, CFSTR("City"), 0))
        {
          if (CFStringCompare(v18, CFSTR("ZipCode"), 0))
          {
            if (CFStringCompare(v18, CFSTR("SubAdministrativeArea"), 0))
            {
              if (CFStringCompare(v18, CFSTR("State"), 0))
              {
                if (CFStringCompare(v18, CFSTR("Country"), 0))
                  goto LABEL_28;
                v26 = 1;
                v19 = (__CFString **)&kABPersonAddressCountryKey;
              }
              else
              {
                v19 = (__CFString **)&kABPersonAddressStateKey;
              }
            }
            else
            {
              v19 = kABPersonAddressSubAdministrativeAreaKey;
            }
          }
          else
          {
            v19 = (__CFString **)&kABPersonAddressZIPKey;
          }
        }
        else
        {
          v19 = (__CFString **)&kABPersonAddressCityKey;
        }
      }
      else
      {
        v19 = kABPersonAddressSubLocalityKey;
      }
    }
    else
    {
      v19 = (__CFString **)&kABPersonAddressStreetKey;
    }
    v20 = *v19;
    if (*v19)
    {
      MatchedString = (const void *)_lazyDDResultGetMatchedString(v17);
      CFDictionarySetValue(Mutable, v20, MatchedString);
    }
LABEL_28:
    ++v16;
  }
  while (v15 != v16);
  if (v26
    && (Value = (void *)CFDictionaryGetValue(Mutable, CFSTR("Country")),
        (v23 = (const void *)ABAddressCopyCountryCodeForCountryName(Value)) != 0))
  {
LABEL_33:
    CFDictionarySetValue(Mutable, CFSTR("CountryCode"), v23);
    CFRelease(v23);
  }
  else
  {
LABEL_31:
    v23 = (const void *)CPPhoneNumberCopyNetworkCountryCode();
    if (v23)
      goto LABEL_33;
    v23 = (const void *)CPPhoneNumberCopyHomeCountryCode();
    if (v23)
      goto LABEL_33;
  }
  CFRelease(v7);
  return Mutable;
}

void _loadDataDetectorsCoreFramework()
{
  const __CFString *v0;
  CFMutableStringRef MutableCopy;
  const __CFURL *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  FILE *v13;
  FILE *v14;
  UInt8 buffer[1025];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)CPSystemRootDirectory();
  MutableCopy = CFStringCreateMutableCopy(0, 0, v0);
  CFStringAppend(MutableCopy, CFSTR("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore"));
  v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MutableCopy, kCFURLPOSIXPathStyle, 0);
  CFRelease(MutableCopy);
  if (v2)
  {
    v3 = CFURLGetFileSystemRepresentation(v2, 1u, buffer, 1024);
    CFRelease(v2);
    if (v3)
    {
      v4 = dlopen((const char *)buffer, 1);
      if (v4)
      {
        v5 = v4;
        v6 = dlsym(v4, "DDScannerCreateWithType");
        _lazyDDScannerCreateWithType = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v6;
        v7 = dlsym(v5, "DDScannerCopyResults");
        _lazyDDScannerCopyResults = v7;
        v8 = dlsym(v5, "DDScannerScanString");
        _lazyDDScannerScanString = v8;
        v9 = dlsym(v5, "DDResultGetSubResults");
        _lazyDDResultGetSubResults = v9;
        v10 = dlsym(v5, "DDResultGetType");
        _lazyDDResultGetType = v10;
        v11 = dlsym(v5, "DDResultGetMatchedString");
        _lazyDDResultGetMatchedString = v11;
        v12 = dlsym(v5, "DDResultGetRange");
        _lazyDDResultGetRange = v12;
        if (v6 && v7 && v8 && v9 && v10 && v11 && v12)
        {
          if (!sSharedDataDetectorsScanner)
            sSharedDataDetectorsScanner = _lazyDDScannerCreateWithType(0, 0, 0);
        }
        else
        {
          v14 = (FILE *)*MEMORY[0x1E0C80C10];
          dlerror();
          fprintf(v14, "Failed to load some symbols from DataDetectorsCore.framework (%s)");
        }
      }
      else
      {
        v13 = (FILE *)*MEMORY[0x1E0C80C10];
        dlerror();
        fprintf(v13, "Failed to load DataDetectorsCore.framework (%s)");
      }
    }
  }
}

uint64_t _getWriterConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  CPRecordStoreGetDatabase();
  v3 = CPSqliteDatabaseConnectionForWriting();
  if (v3)
  {
    v4 = CPSqliteConnectionBeginTransactionType();
    if (v4 && v4 != 101)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)", 21, 0, (uint64_t)CFSTR("%s: failed to start transaction for writer connection (error %d)"), v5, v6, v7, a2);
      return 0;
    }
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(4, (uint64_t)"CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)", 24, 0, (uint64_t)CFSTR("%s: failed to get writer connection"), v8, v9, v10, a2);
  }
  return v3;
}

void _commitWriterConnection(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = CPSqliteConnectionCommit();
  if (v3)
  {
    v4 = v3;
    if (v3 != 101)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void _commitWriterConnection(CPSqliteConnection *, const char *)", 33, 0, (uint64_t)CFSTR("%s: failed to commit transaction (error %d)"), v5, v6, v7, a2);
      if (v4 != 10)
        CPSqliteConnectionRollback();
    }
  }
}

uint64_t _dumpTableWithConnection(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 100);
  v4 = objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 1000);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("select ROWID, * from %@"), a2);
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if (objc_msgSend(v3, "length"))
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%li) = (\n%@\n%@)"), a2, 0, v3, v4);
  else
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ =()"), a2, v6, v7, v8);
}

uint64_t _dumpTableRowHandler(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int i;
  const char *v8;
  const char *v9;
  int j;
  void *v11;
  const __CFString *v12;
  uint64_t v14;

  v4 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  v5 = v4 - 1;
  if (v4 >= 1)
  {
    v6 = v4;
    if (!objc_msgSend(*(id *)a2, "length"))
    {
      objc_msgSend(*(id *)a2, "appendString:", CFSTR("    "));
      for (i = 0; i != v6; ++i)
      {
        v8 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), i);
        v9 = v8;
        if (i == 1 && !strcasecmp(v8, "rowid"))
        {
          **(_BYTE **)(a2 + 16) = 1;
        }
        else
        {
          objc_msgSend(*(id *)a2, "appendFormat:", CFSTR("%s"), v9);
          if (i < v5)
            objc_msgSend(*(id *)a2, "appendString:", CFSTR("|"));
        }
      }
    }
    objc_msgSend(*(id *)(a2 + 8), "appendString:", CFSTR("    "));
    for (j = 0; j != v6; ++j)
    {
      if (j != 1 || !**(_BYTE **)(a2 + 16))
      {
        switch(sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), j))
        {
          case 1:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", CFSTR("%i"), sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 2:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", CFSTR("%f"), sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 3:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", CFSTR("%s"), sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 4:
            v11 = *(void **)(a2 + 8);
            v12 = CFSTR("<BLOB>");
            goto LABEL_19;
          case 5:
            v11 = *(void **)(a2 + 8);
            v12 = CFSTR("<NULL>");
LABEL_19:
            objc_msgSend(v11, "appendFormat:", v12, v14);
            break;
          default:
            break;
        }
        if (j < v5)
          objc_msgSend(*(id *)(a2 + 8), "appendString:", CFSTR("|"));
      }
    }
    objc_msgSend(*(id *)(a2 + 8), "appendString:", CFSTR("\n"));
    ++**(_QWORD **)(a2 + 24);
  }
  return 0;
}

uint64_t _dumpTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  CPRecordStoreGetDatabase();
  v3 = CPSqliteDatabaseConnectionForReading();
  return _dumpTableWithConnection(v3, a2);
}

uint64_t abPredicateSqliteEval(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = sqlite3_user_data(a1);
  v7 = sqlite3_value_int(*a3);
  v8 = (void *)objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", 2 * v7), "nonretainedObjectValue");
  v9 = (void *)objc_msgSend(v6, "objectAtIndex:", (2 * v7) | 1);
  if (objc_msgSend(v8, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")))
    v10 = 0;
  else
    v10 = v8;
  if (objc_msgSend(v9, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")))
    v11 = 0;
  else
    v11 = v9;
  return objc_msgSend(v10, "evaluateCallbackWithSqliteContext:predicateContext:values:count:", a1, v11, a3, a2);
}

uint64_t _predicateShouldInterruptSearch(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)a2, "predicateShouldContinue:", *(_QWORD *)(a2 + 8)) ^ 1;
}

uint64_t _predicateIteratePeopleWithCallbacksRecordHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a3 + 32) + 1;
  *(_QWORD *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 32) = v4;
  *(_QWORD *)(a3 + 40) = objc_msgSend(*(id *)(a3 + 8), "ab_metadataForMatchingRow:columnOffset:", a1, *(_QWORD *)(a3 + 48));
  if (*(_QWORD *)(a3 + 24))
  {
    v5 = objc_opt_respondsToSelector();
    v6 = *(void **)a3;
    v7 = *(_QWORD *)(a3 + 8);
    v8 = *(_QWORD *)(a3 + 24);
    if ((v5 & 1) != 0)
    {
      objc_msgSend(v6, "predicateShouldContinue:afterFindingRecord:metadata:", v7, v8, *(_QWORD *)(a3 + 40));
      v9 = 1;
    }
    else
    {
      v9 = objc_msgSend(v6, "predicateShouldContinue:afterFindingRecord:", v7, v8);
    }
    *(_QWORD *)(a3 + 24) = 0;
  }
  else
  {
    v9 = 1;
  }
  return v9 ^ 1u;
}

uint64_t excludeIdsRowHandler(uint64_t result, void *a2)
{
  if (result)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      if (objc_msgSend(a2, "containsIndex:", sqlite3_column_int((sqlite3_stmt *)result, 0)))
        return 0;
      else
        return 2;
    }
  }
  return result;
}

uint64_t appendToBufferWithLineFolding(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  void *v7;
  NSUInteger v8;
  int v9;
  void *v10;
  NSUInteger v11;
  int v12;
  void *v13;
  NSUInteger v14;
  int v15;
  void *v16;
  NSUInteger v17;

  v3 = a3;
  if (a3 >= 75)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(void **)a1;
    if (v6 == *(_DWORD *)(a1 + 12))
    {
      v8 = 2 * v6;
      *(_DWORD *)(a1 + 12) = v8;
      v7 = NSZoneRealloc(0, v7, v8);
      *(_QWORD *)a1 = v7;
      v6 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *((_BYTE *)v7 + v6) = 13;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(void **)a1;
    if (v9 == *(_DWORD *)(a1 + 12))
    {
      v11 = 2 * v9;
      *(_DWORD *)(a1 + 12) = v11;
      v10 = NSZoneRealloc(0, v10, v11);
      *(_QWORD *)a1 = v10;
      v9 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v9 + 1;
    *((_BYTE *)v10 + v9) = 10;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(void **)a1;
    if (v12 == *(_DWORD *)(a1 + 12))
    {
      v14 = 2 * v12;
      *(_DWORD *)(a1 + 12) = v14;
      v13 = NSZoneRealloc(0, v13, v14);
      *(_QWORD *)a1 = v13;
      v12 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v12 + 1;
    *((_BYTE *)v13 + v12) = 32;
    v3 = 1;
  }
  v15 = *(_DWORD *)(a1 + 8);
  v16 = *(void **)a1;
  if (v15 == *(_DWORD *)(a1 + 12))
  {
    v17 = 2 * v15;
    *(_DWORD *)(a1 + 12) = v17;
    v16 = NSZoneRealloc(0, v16, v17);
    *(_QWORD *)a1 = v16;
    v15 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *((_BYTE *)v16 + v15) = a2;
  return v3 + 1;
}

uint64_t ABLimitedAccessContactIdentifiersForBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForReading())
    return MEMORY[0x1E0C9AA60];
  v3 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13848] + 16))() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT LimitedAccess.guid FROM LimitedAccess WHERE LimitedAccess.BundleID = '%@' and IsActive = %i;"),
      a2,
      1);
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
  }
  return v3;
}

uint64_t _identifierRowHandler(uint64_t a1, void *a2)
{
  const unsigned __int8 *v3;

  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3)
    objc_msgSend(a2, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3));
  return 0;
}

uint64_t ABPopulateSyncTableForLimitedAccessAboveSequenceNumber(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v5 = objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v6 = objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v7 = objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v4, CFSTR("BundleID"), v5, CFSTR("guid"), v6, CFSTR("SequenceNumber"), v7, CFSTR("IsActive"), 0);
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  v9 = v8;
  CPRecordStoreGetDatabase();
  if (CPSqliteDatabaseConnectionForReading())
  {
    v10 = ABOSLogGeneral();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v13 = a2;
      _os_log_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_DEFAULT, "ABPopulateSyncTableForLimitedAccessAboveSequenceNumber %@", buf, 0xCu);
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("select * from LimitedAccess WHERE SequenceNumber > %i ;"),
      objc_msgSend(a2, "intValue"));
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
  }
  return v9;
}

uint64_t _syncTableRowHandler(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;

  v4 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("BundleID"));
  v5 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("guid"));
  v14 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("SequenceNumber"));
  v13 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("IsActive"));
  v6 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v6 >= 1)
  {
    v7 = v6;
    v8 = 0;
    while (1)
    {
      v9 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), v8);
      if (!strcasecmp(v9, "BundleID"))
        break;
      if (!strcasecmp(v9, "guid"))
      {
        objc_msgSend(v5, "appendFormat:", CFSTR("%s"), sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8));
        v11 = v5;
        goto LABEL_12;
      }
      if (!strcasecmp(v9, "SequenceNumber"))
      {
        v10 = v14;
        objc_msgSend(v14, "appendFormat:", CFSTR("%i"), sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v8));
LABEL_11:
        v11 = v10;
LABEL_12:
        objc_msgSend(v11, "appendFormat:", CFSTR("%s"), ", ");
        goto LABEL_13;
      }
      if (!strcasecmp(v9, "IsActive"))
      {
        v10 = v13;
        objc_msgSend(v13, "appendFormat:", CFSTR("%i"), sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v8));
        goto LABEL_11;
      }
LABEL_13:
      if (v7 == ++v8)
        return 0;
    }
    objc_msgSend(v4, "appendFormat:", CFSTR("%s"), sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8));
    v11 = v4;
    goto LABEL_12;
  }
  return 0;
}

void *convertStringtoIntArray(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(", "));
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "intValue");
        objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v7));
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t ABLimitedAccessUpdateTable(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t WriterConnection;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v17 = (void *)MEMORY[0x1E0C99DA0];
    v18 = *MEMORY[0x1E0C99778];
    v19 = CFSTR("parameter ‘addressBook’ must be nonnull");
    goto LABEL_18;
  }
  if (!a2)
  {
    v17 = (void *)MEMORY[0x1E0C99DA0];
    v18 = *MEMORY[0x1E0C99778];
    v19 = CFSTR("parameter ‘table’ must be nonnull");
LABEL_18:
    objc_exception_throw((id)objc_msgSend(v17, "exceptionWithName:reason:userInfo:", v18, v19, 0));
  }
  v4 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("BundleID")), "componentsSeparatedByString:", CFSTR(", "));
  v20 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("guid")), "componentsSeparatedByString:", CFSTR(", "));
  v5 = convertStringtoIntArray((void *)objc_msgSend(a2, "objectForKey:", CFSTR("SequenceNumber")));
  v6 = convertStringtoIntArray((void *)objc_msgSend(a2, "objectForKey:", CFSTR("IsActive")));
  v7 = objc_msgSend(v4, "count");
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABLimitedAccessUpdateTable(ABAddressBookRef, NSDictionary *)");
  if (WriterConnection)
  {
    v9 = WriterConnection;
    v10 = (v7 - 1);
    v11 = ABOSLogGeneral();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = v7 - 1;
      _os_log_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_DEFAULT, "ABLimitedAccessUpdateTable update %d rows", buf, 8u);
    }
    if (v7 < 2)
    {
      v13 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = CPSqliteConnectionStatementForSQL();
        if (v14)
        {
          v15 = v14;
          v13 = 1;
          sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, (const char *)objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v12), "UTF8String"), -1, 0);
          sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 2, (const char *)objc_msgSend((id)objc_msgSend(v20, "objectAtIndex:", v12), "UTF8String"), -1, 0);
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 3, objc_msgSend((id)objc_msgSend(v5, "objectAtIndex:", v12), "intValue"));
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 4, objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", v12), "intValue"));
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        ++v12;
      }
      while (v10 != v12);
    }
    _commitWriterConnection(v9, (uint64_t)"BOOL ABLimitedAccessUpdateTable(ABAddressBookRef, NSDictionary *)");
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

BOOL ABAddLimitedAccessForBundle(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  int FreshSequenceNumber;
  uint64_t WriterConnection;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  __CFNotificationCenter *DarwinNotifyCenter;
  _DWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  v6 = *MEMORY[0x1E0D13848];
  if (((*(uint64_t (**)(_QWORD))(*MEMORY[0x1E0D13848] + 16))(*MEMORY[0x1E0D13848]) & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t, void *))(v6 + 16))(v6, a3) & 1) != 0)
    return 0;
  FreshSequenceNumber = getFreshSequenceNumber(a1);
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABAddLimitedAccessForBundle(ABAddressBookRef, NSString *, NSString *)");
  if (!WriterConnection)
    return 0;
  v9 = WriterConnection;
  v10 = ABOSLogGeneral();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 67109120;
    v16[1] = FreshSequenceNumber;
    _os_log_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_DEFAULT, "ABAddLimitedAccessForBundle sequenceNumber %d ", (uint8_t *)v16, 8u);
  }
  v11 = CPSqliteConnectionStatementForSQL();
  v12 = v11 != 0;
  if (v11)
  {
    v13 = v11;
    sqlite3_bind_text(*(sqlite3_stmt **)(v11 + 8), 1, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0);
    sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 2, (const char *)objc_msgSend(a3, "UTF8String"), -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 3, FreshSequenceNumber);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 4, 1);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v9, (uint64_t)"BOOL ABAddLimitedAccessForBundle(ABAddressBookRef, NSString *, NSString *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CNContactStoreLimitedAccessDidChangeNotification"), 0, 0, 1u);
  return v12;
}

uint64_t getFreshSequenceNumber(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_19BC4B000, v2, OS_LOG_TYPE_DEFAULT, "getFreshSequenceNumber", (uint8_t *)&v10, 2u);
  }
  v3 = getLastUsedSequenceNumber(a1) + 1;
  ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessLastSequenceNumber"), v3, v4, v5, v6, v7, v8, v10);
  return v3;
}

BOOL ABRemoveLimitedAccessForBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t FreshSequenceNumber;
  uint64_t WriterConnection;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _BOOL8 v12;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  v6 = *MEMORY[0x1E0D13848];
  if (((*(uint64_t (**)(_QWORD))(*MEMORY[0x1E0D13848] + 16))(*MEMORY[0x1E0D13848]) & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v6, a3) & 1) != 0)
    return 0;
  FreshSequenceNumber = getFreshSequenceNumber(a1);
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABRemoveLimitedAccessForBundle(ABAddressBookRef, NSString *, NSString *)");
  if (!WriterConnection)
    return 0;
  v9 = WriterConnection;
  v10 = ABOSLogGeneral();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v16 = a2;
    v17 = 2112;
    v18 = a3;
    _os_log_impl(&dword_19BC4B000, v10, OS_LOG_TYPE_DEFAULT, "ABRemoveLimitedAccessForBundle.. remove %@ %@", buf, 0x16u);
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE LimitedAccess set SequenceNumber= %i, IsActive = %i WHERE BundleID = '%@' and guid = '%@';"),
    FreshSequenceNumber,
    0,
    a2,
    a3);
  v11 = CPSqliteConnectionStatementForSQL();
  v12 = v11 != 0;
  if (v11)
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v9, (uint64_t)"BOOL ABRemoveLimitedAccessForBundle(ABAddressBookRef, NSString *, NSString *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CNContactStoreLimitedAccessDidChangeNotification"), 0, 0, 1u);
  return v12;
}

uint64_t ABRemoveContactIdentifierFromLimitedAccessForAllBundles(uint64_t a1, uint64_t a2)
{
  uint64_t WriterConnection;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABRemoveContactIdentifierFromLimitedAccessForAllBundles(ABAddressBookRef, NSString *)");
  if (!WriterConnection)
    return 0;
  v4 = WriterConnection;
  v5 = ABOSLogGeneral();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v10 = a2;
    _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "ABRemoveContactIdentifierFromLimitedAccessForAllBundles.. remove %@", buf, 0xCu);
  }
  if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13848] + 16))() & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DELETE FROM LimitedAccess WHERE guid = '%@';"), a2);
    v6 = CPSqliteConnectionStatementForSQL();
    if (v6)
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      v6 = 1;
    }
  }
  _commitWriterConnection(v4, (uint64_t)"BOOL ABRemoveContactIdentifierFromLimitedAccessForAllBundles(ABAddressBookRef, NSString *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CNContactStoreLimitedAccessDidChangeNotification"), 0, 0, 1u);
  return v6;
}

uint64_t ABLimitedAccessContactsCountForBundle(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  sqlite3_stmt *v6;
  NSObject *v7;
  uint64_t v8;

  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  CPRecordStoreGetDatabase();
  result = CPSqliteDatabaseConnectionForReading();
  if (result)
  {
    if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13848] + 16))() & 1) == 0)
    {
      v4 = CPSqliteConnectionStatementForSQL();
      if (v4
        && (v5 = v4, (v6 = *(sqlite3_stmt **)(v4 + 8)) != 0)
        && !sqlite3_bind_text(v6, 1, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0)
        && !sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 2, 1))
      {
        v8 = CPSqliteStatementIntegerResult();
        CPSqliteStatementReset();
        if ((int)v8 >= 1)
          return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8);
      }
      else
      {
        v7 = ABOSLogGeneral();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          ABLimitedAccessContactsCountForBundle_cold_1((uint64_t)a2, v7);
      }
    }
    return 0;
  }
  return result;
}

uint64_t ABGetLimitedAccessLastSyncSequenceNumber(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t IntegerProperty;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl(&dword_19BC4B000, v2, OS_LOG_TYPE_DEFAULT, "ABGetLimitedAccessLastSyncSequenceNumber", (uint8_t *)v13, 2u);
  }
  v3 = (void *)MEMORY[0x1E0CB37E8];
  IntegerProperty = ABAddressBookGetIntegerProperty(a1);
  if ((_DWORD)IntegerProperty == -1)
  {
    CPRecordStoreGetDatabase();
    if (!CPSqliteDatabaseConnectionForReading())
    {
      IntegerProperty = 0xFFFFFFFFLL;
      return objc_msgSend(v3, "numberWithInt:", IntegerProperty);
    }
    IntegerProperty = lastSequenceNumber();
    v5 = ABOSLogGeneral();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v13[0]) = 67109120;
      HIDWORD(v13[0]) = IntegerProperty;
      _os_log_impl(&dword_19BC4B000, v5, OS_LOG_TYPE_DEFAULT, "getCurrentSequenceNumber key not found, save %d", (uint8_t *)v13, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessTableCurrentSequenceNumber"), IntegerProperty, v6, v7, v8, v9, v10, v13[0]);
  }
  v11 = ABOSLogGeneral();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v13[0]) = 67109120;
    HIDWORD(v13[0]) = IntegerProperty;
    _os_log_impl(&dword_19BC4B000, v11, OS_LOG_TYPE_DEFAULT, "getCurrentSequenceNumber %d", (uint8_t *)v13, 8u);
  }
  return objc_msgSend(v3, "numberWithInt:", IntegerProperty);
}

BOOL ABPurgeLimitedAccessRecordsForBundle(uint64_t a1, void *a2)
{
  uint64_t WriterConnection;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL8 v8;
  sqlite3_stmt *v9;
  int v10;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  if (((*(uint64_t (**)(void))(*MEMORY[0x1E0D13848] + 16))() & 1) != 0)
    return 0;
  markFullSyncRequired(a1);
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABPurgeLimitedAccessRecordsForBundle(ABAddressBookRef, NSString *)");
  if (!WriterConnection)
    return 0;
  v5 = WriterConnection;
  v6 = ABOSLogGeneral();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138412290;
    v14 = a2;
    _os_log_impl(&dword_19BC4B000, v6, OS_LOG_TYPE_DEFAULT, "ABPurgeLimitedAccessRecordsForBundle bundleId:%@", (uint8_t *)&v13, 0xCu);
  }
  v7 = CPSqliteConnectionStatementForSQL();
  v8 = v7 != 0;
  if (v7)
  {
    v9 = *(sqlite3_stmt **)(v7 + 8);
    v10 = sqlite3_bind_parameter_index(v9, ":bundleId");
    if (v10 >= 1)
    {
      if (a2)
        sqlite3_bind_text(v9, v10, (const char *)objc_msgSend(a2, "UTF8String"), -1, 0);
      else
        sqlite3_bind_null(v9, v10);
    }
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v5, (uint64_t)"BOOL ABPurgeLimitedAccessRecordsForBundle(ABAddressBookRef, NSString *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CNContactStoreLimitedAccessDidChangeNotification"), 0, 0, 1u);
  return v8;
}

void markFullSyncRequired(uint64_t a1)
{
  NSObject *v2;
  uint64_t FreshSequenceNumber;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_19BC4B000, v2, OS_LOG_TYPE_DEFAULT, "markFullSyncRequired", (uint8_t *)&v9, 2u);
  }
  FreshSequenceNumber = getFreshSequenceNumber(a1);
  ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessLastFullSyncSequencenumber"), FreshSequenceNumber, v4, v5, v6, v7, v8, v9);
}

ABLimitedAccessSyncData *ABGetWatchLimitedAccessSyncDataStartingAtSequenceNumber(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  ABLimitedAccessSyncData *v5;
  uint64_t v6;
  uint64_t SequenceNumber;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  int v19;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("parameter ‘addressBook’ must be nonnull"), 0));
  v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v21) = 67109120;
    HIDWORD(v21) = a2;
    _os_log_impl(&dword_19BC4B000, v4, OS_LOG_TYPE_DEFAULT, "ABGetWatchLimitedAccessSyncDataStartingAtSequenceNumber requesterSeqNum:%d", (uint8_t *)&v21, 8u);
  }
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForReading())
    return 0;
  v5 = objc_alloc_init(ABLimitedAccessSyncData);
  -[ABLimitedAccessSyncData setFullSyncRequired:](v5, "setFullSyncRequired:", 0);
  v6 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  LODWORD(SequenceNumber) = ABAddressBookGetIntegerProperty(a1);
  if ((_DWORD)SequenceNumber != -1)
    goto LABEL_10;
  CPRecordStoreGetDatabase();
  if (CPSqliteDatabaseConnectionForReading())
  {
    SequenceNumber = lastSequenceNumber();
    v8 = ABOSLogGeneral();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v21) = 67109120;
      HIDWORD(v21) = SequenceNumber;
      _os_log_impl(&dword_19BC4B000, v8, OS_LOG_TYPE_DEFAULT, "getFullSyncSequenceNumber key not found, save %d", (uint8_t *)&v21, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessLastFullSyncSequencenumber"), SequenceNumber, v9, v10, v11, v12, v13, v21);
LABEL_10:
    v14 = ABOSLogGeneral();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v21) = 67109120;
      HIDWORD(v21) = SequenceNumber;
      _os_log_impl(&dword_19BC4B000, v14, OS_LOG_TYPE_DEFAULT, "getFullSyncSequenceNumber %d", (uint8_t *)&v21, 8u);
    }
    goto LABEL_14;
  }
  LODWORD(SequenceNumber) = -1;
LABEL_14:
  if ((int)SequenceNumber > a2)
  {
    -[ABLimitedAccessSyncData setFullSyncRequired:](v5, "setFullSyncRequired:", 1);
    LODWORD(a2) = 0;
  }
  -[ABLimitedAccessSyncData setCurrentSequenceNumber:](v5, "setCurrentSequenceNumber:", (int)getLastUsedSequenceNumber(a1));
  v15 = ABOSLogGeneral();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = -[ABLimitedAccessSyncData currentSequenceNumber](v5, "currentSequenceNumber");
    LODWORD(v21) = 67109632;
    HIDWORD(v21) = a2;
    v22 = 1024;
    v23 = SequenceNumber;
    v24 = 1024;
    v25 = v16;
    _os_log_impl(&dword_19BC4B000, v15, OS_LOG_TYPE_DEFAULT, "ABLimitedAccess requesterSeqNum %d fullSyncVersion %d currentversion %d", (uint8_t *)&v21, 0x14u);
  }
  v17 = CPSqliteConnectionStatementForSQL();
  if (v17)
  {
    v18 = *(sqlite3_stmt **)(v17 + 8);
    v19 = sqlite3_bind_parameter_index(v18, ":seqNumber");
    if (v19 >= 1)
      sqlite3_bind_int(v18, v19, a2);
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  -[ABLimitedAccessSyncData setSyncEventsArray:](v5, "setSyncEventsArray:", v6);
  return v5;
}

uint64_t getLastUsedSequenceNumber(uint64_t a1)
{
  uint64_t IntegerProperty;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  IntegerProperty = ABAddressBookGetIntegerProperty(a1);
  if ((_DWORD)IntegerProperty == -1)
  {
    CPRecordStoreGetDatabase();
    if (!CPSqliteDatabaseConnectionForReading())
      return 0xFFFFFFFFLL;
    IntegerProperty = lastSequenceNumber();
    v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 67109120;
      HIDWORD(v11[0]) = IntegerProperty;
      _os_log_impl(&dword_19BC4B000, v3, OS_LOG_TYPE_DEFAULT, "getLastUsedSequenceNumber key not found, save %d", (uint8_t *)v11, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessLastSequenceNumber"), IntegerProperty, v4, v5, v6, v7, v8, v11[0]);
  }
  v9 = ABOSLogGeneral();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v11[0]) = 67109120;
    HIDWORD(v11[0]) = IntegerProperty;
    _os_log_impl(&dword_19BC4B000, v9, OS_LOG_TYPE_DEFAULT, "getLastUsedSequenceNumber %d", (uint8_t *)v11, 8u);
  }
  return IntegerProperty;
}

uint64_t _syncDataRowHandler(uint64_t a1, void *a2)
{
  ABLimitedAccessSyncEvent *v3;
  int v4;
  int v5;
  int i;
  const char *v7;

  v3 = objc_alloc_init(ABLimitedAccessSyncEvent);
  v4 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v4 >= 1)
  {
    v5 = v4;
    for (i = 0; i != v5; ++i)
    {
      v7 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), i);
      if (!strcasecmp(v7, "BundleID"))
      {
        -[ABLimitedAccessSyncEvent setBundleID:](v3, "setBundleID:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), i)));
      }
      else if (!strcasecmp(v7, "guid"))
      {
        -[ABLimitedAccessSyncEvent setContactID:](v3, "setContactID:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), i)));
      }
      else if (!strcasecmp(v7, "SequenceNumber"))
      {
        -[ABLimitedAccessSyncEvent setSequenceNumber:](v3, "setSequenceNumber:", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), i));
      }
      else if (!strcasecmp(v7, "IsActive"))
      {
        -[ABLimitedAccessSyncEvent setIsActive:](v3, "setIsActive:", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), i) != 0);
      }
    }
  }
  objc_msgSend(a2, "addObject:", v3);

  return 0;
}

uint64_t ABApplyLimitedAccessSyncEvents(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t WriterConnection;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  int v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BC4B000, v4, OS_LOG_TYPE_DEFAULT, "ABApplyLimitedAccessSyncEvents", buf, 2u);
  }
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABApplyLimitedAccessSyncEvents(ABAddressBookRef, NSArray<ABLimitedAccessSyncEvent *> *)");
  if (WriterConnection)
  {
    v6 = WriterConnection;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v19 != v10)
            objc_enumerationMutation(a2);
          v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          v13 = ABOSLogGeneral();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            v14 = objc_msgSend(v12, "sequenceNumber");
            *(_DWORD *)buf = 67109120;
            v23 = v14;
            _os_log_impl(&dword_19BC4B000, v13, OS_LOG_TYPE_DEFAULT, "ABApplyLimitedAccessSyncEvents sequenceNumber %d", buf, 8u);
          }
          v15 = CPSqliteConnectionStatementForSQL();
          if (v15)
          {
            v16 = v15;
            v9 = 1;
            sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)objc_msgSend((id)objc_msgSend(v12, "bundleID"), "UTF8String"), -1, 0);
            sqlite3_bind_text(*(sqlite3_stmt **)(v16 + 8), 2, (const char *)objc_msgSend((id)objc_msgSend(v12, "contactID"), "UTF8String"), -1, 0);
            sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 3, objc_msgSend(v12, "sequenceNumber"));
            sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 4, objc_msgSend(v12, "isActive"));
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
        v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
    _commitWriterConnection(v6, (uint64_t)"BOOL ABApplyLimitedAccessSyncEvents(ABAddressBookRef, NSArray<ABLimitedAccessSyncEvent *> *)");
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

BOOL ABDropAllLimitedAccessRows(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t WriterConnection;
  __CFNotificationCenter *DarwinNotifyCenter;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl(&dword_19BC4B000, v4, OS_LOG_TYPE_DEFAULT, "ABDropAllLimitedAccessRows enableFullSyncNotify %d", (uint8_t *)v8, 8u);
  }
  if (a2)
    markFullSyncRequired(a1);
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"BOOL ABDropAllLimitedAccessRows(ABAddressBookRef, BOOL)");
  if (WriterConnection)
  {
    CPSqliteConnectionPerformSQL();
    _commitWriterConnection(WriterConnection, (uint64_t)"BOOL ABDropAllLimitedAccessRows(ABAddressBookRef, BOOL)");
    if (a2)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CNContactStoreLimitedAccessDidChangeNotification"), 0, 0, 1u);
    }
  }
  return WriterConnection != 0;
}

void ABSetLimitedAccessTableCurrentSequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ABAddressBookSetIntegerProperty(a1, (uint64_t)CFSTR("ABlimitedAccessTableCurrentSequenceNumber"), a2, a4, a5, a6, a7, a8, a9);
}

uint64_t lastSequenceNumber()
{
  uint64_t v0;

  if (!CPSqliteConnectionStatementForSQL())
    return 0;
  v0 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v0;
}

uint64_t ABGetSharedAddressFormatsDictionary()
{
  return objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
}

const __CFDictionary *ABGetLocalizedAddressFormatDictionaryForCountryCode(const void *a1)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a1);
  return result;
}

const __CFDictionary *ABGetPreferredKeyboardSettingsForCountryCodeAndAddressPartKey(const void *a1, const void *a2)
{
  const __CFDictionary *result;
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;

  result = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
  if (result)
  {
    v5 = result;
    Value = (const __CFDictionary *)CFDictionaryGetValue(result, a1);
    if (!Value
      || (v7 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("kbdSettings"))) == 0
      || (result = (const __CFDictionary *)CFDictionaryGetValue(v7, a2)) == 0)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("defaultKbdSettings"));
      if (result)
        return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    }
  }
  return result;
}

uint64_t ABAddressCopyCountryCodeForCountryName(void *a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  uint64_t Count;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  BOOL v12;
  const void **v13;
  const void **v14;
  const void **v15;
  __CFArray *v16;
  const __CFDictionary *v17;
  CFIndex v18;
  uint64_t v19;
  void *v20;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)", 140, v3, (uint64_t)CFSTR("countryName=%@"), v4, v5, v6, (uint64_t)a1);
    CFRelease(v3);
  }
  if (!ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary)
  {
    v7 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
    Count = CFDictionaryGetCount(v7);
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    v11 = Mutable;
    if (Count)
      v12 = Mutable == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      if (v13)
      {
        v14 = v13;
        CFDictionaryGetKeysAndValues(v7, v13, 0);
        if (Count >= 1)
        {
          v15 = v14;
          do
          {
            if (CFStringCompare((CFStringRef)*v15, CFSTR("defaultKbdSettings"), 0))
              CFArrayAppendValue(v11, *v15);
            ++v15;
            --Count;
          }
          while (Count);
        }
        free(v14);
      }
    }
    v16 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    v17 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
    v18 = CFArrayGetCount(v11);
    if (v18)
    {
      v19 = v18;
      v20 = (void *)objc_opt_new();
      if (v19 >= 1)
      {
        for (i = 0; i != v19; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
          Value = (const __CFDictionary *)CFDictionaryGetValue(v17, ValueAtIndex);
          v24 = CFDictionaryGetValue(Value, CFSTR("COUNTRY"));
          if (v24)
            CFArrayAppendValue(v16, (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B08], "localizedStringForPostalAddressString:returningNilIfNotFound:", v24, 0), "lowercaseString"));
        }
      }

    }
    ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:", v11, v16);
    if (v11)
      CFRelease(v11);
    if (v16)
      CFRelease(v16);
  }
  v25 = (const void *)objc_msgSend(a1, "lowercaseString");
  v26 = CFDictionaryGetValue((CFDictionaryRef)ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary, v25);
  v27 = (uint64_t)v26;
  if (v26)
    CFRetain(v26);
  if (ABLogAPIUsage())
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)", 157, CFSTR(">> "), (uint64_t)CFSTR("countryCode=%@"), v28, v29, v30, v27);
  return v27;
}

void *ABCreateSingleLineStringForAddressDictionary(const __CFDictionary *a1, int a2)
{
  id v4;
  void *Value;
  const __CFDictionary *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v15;

  v4 = (id)objc_msgSend((id)CFDictionaryGetValue(a1, CFSTR("CountryCode")), "lowercaseString");
  if (objc_msgSend(v4, "length") != 2)
  {
    Value = (void *)CFDictionaryGetValue(a1, CFSTR("Country"));
    v4 = (id)ABAddressCopyCountryCodeForCountryName(Value);
  }
  if (!v4)
    v4 = +[ABPhoneFormatting abDefaultCountryCode](ABPhoneFormatting, "abDefaultCountryCode");
  v6 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0D13B08], "addressFormats");
  if (v6)
    v6 = (const __CFDictionary *)CFDictionaryGetValue(v6, v4);
  v7 = (void *)objc_msgSend((id)-[__CFDictionary valueForKey:](v6, "valueForKey:", CFSTR("URL_FORMAT")), "componentsSeparatedByString:", CFSTR(", "));
  v8 = (void *)objc_opt_new();
  v9 = objc_msgSend(v7, "count");
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v15 = *MEMORY[0x1E0C997B0];
    do
    {
      v12 = (void *)objc_msgSend(v7, "objectAtIndex:", v11);
      v13 = (void *)CFDictionaryGetValue(a1, v12);
      if (objc_msgSend(v12, "isEqualToString:", CFSTR("Country")) && a2 && !objc_msgSend(v13, "length"))
        v13 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"), "displayNameForKey:value:", v15, v4);
      if (objc_msgSend(v13, "length"))
      {
        if (objc_msgSend(v8, "length"))
          objc_msgSend(v8, "appendString:", CFSTR(" "));
        objc_msgSend(v8, "appendString:", v13);
      }
      ++v11;
    }
    while (v10 != v11);
  }
  objc_msgSend(v8, "replaceOccurrencesOfString:withString:options:range:", CFSTR("\n"), CFSTR(" "), 2, 0, objc_msgSend(v8, "length"));
  return v8;
}

#error "19BC99210: call analysis failed (funcsize=19)"

#error "19BC9B420: call analysis failed (funcsize=20)"

void sub_19BC9B42C()
{
  objc_end_catch();
  JUMPOUT(0x19BC9B394);
}

#error "19BC9BA28: call analysis failed (funcsize=20)"

void sub_19BC9BA34()
{
  objc_end_catch();
  JUMPOUT(0x19BC9B9C0);
}

void ABDeviceRegisterCallbackForFirstUnlock(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __ABDeviceRegisterCallbackForFirstUnlock_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (ABDeviceRegisterCallbackForFirstUnlock___once2 != -1)
    dispatch_once(&ABDeviceRegisterCallbackForFirstUnlock___once2, block);
}

id buildTokenTable(int a1)
{
  id v2;
  CFMutableArrayRef v3;
  _DWORD *Token;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  CFMutableArrayRef v13;
  _DWORD *v14;
  CFMutableArrayRef v15;
  _DWORD *v16;
  _DWORD *v17;
  CFMutableArrayRef v18;
  _DWORD *v19;
  __int16 v21;
  CFArrayCallBacks callBacks;

  v21 = 10;
  if (!ABReturnDelimiterData)
    ABReturnDelimiterData = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v21, 1);
  memset(&callBacks, 0, 24);
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)copyDescriptionCallBack;
  callBacks.equal = (CFArrayEqualCallBack)equalCallBack;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = CFArrayCreateMutable(0, 9, &callBacks);
  objc_msgSend(v2, "addObject:", v3);
  CFRelease(v3);
  Token = createToken(CFSTR(";"), 4097, a1);
  CFArrayAppendValue(v3, Token);
  v5 = createToken(CFSTR(":"), 8193, a1);
  CFArrayAppendValue(v3, v5);
  v6 = createToken(CFSTR(" "), 16385, a1);
  CFArrayAppendValue(v3, v6);
  v7 = createToken(CFSTR("="), 1025, a1);
  CFArrayAppendValue(v3, v7);
  v8 = createToken(CFSTR("\r"), 32770, a1);
  CFArrayAppendValue(v3, v8);
  v9 = createToken(CFSTR("\n"), 32769, a1);
  CFArrayAppendValue(v3, v9);
  v10 = createToken(CFSTR("\\"), 513, a1);
  CFArrayAppendValue(v3, v10);
  v11 = createToken(CFSTR("."), 257, a1);
  CFArrayAppendValue(v3, v11);
  v12 = createToken(CFSTR(","), 193, a1);
  CFArrayAppendValue(v3, v12);
  v13 = CFArrayCreateMutable(0, 1, &callBacks);
  objc_msgSend(v2, "addObject:", v13);
  CFRelease(v13);
  v14 = createToken(CFSTR("END"), 7, a1);
  CFArrayAppendValue(v13, v14);
  v15 = CFArrayCreateMutable(0, 2, &callBacks);
  objc_msgSend(v2, "addObject:", v15);
  CFRelease(v15);
  v16 = createToken(CFSTR("BEGIN"), 5, a1);
  CFArrayAppendValue(v15, v16);
  v17 = createToken(CFSTR("VCARD"), 6, a1);
  CFArrayAppendValue(v15, v17);
  v18 = CFArrayCreateMutable(0, 1, &callBacks);
  objc_msgSend(v2, "addObject:", v18);
  CFRelease(v18);
  v19 = createToken(CFSTR("VERSION"), 2049, a1);
  CFArrayAppendValue(v18, v19);
  return v2;
}

const __CFString *copyDescriptionCallBack()
{
  return CFSTR("token");
}

BOOL equalCallBack(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_DWORD *createToken(__CFString *a1, int a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  UInt8 *v8;
  CFIndex v9;
  uint64_t v10;
  CFRange v12;

  v6 = malloc_type_malloc(0x18uLL, 0x1080040BEC857D6uLL);
  *(_QWORD *)v6 = a1;
  v6[2] = a2;
  v7 = -[__CFString length](a1, "length");
  if (a3)
  {
    v8 = (UInt8 *)malloc_type_malloc(2 * v7 + 2, 0x1000040BDFB0063uLL);
    -[__CFString getCharacters:](a1, "getCharacters:", v8);
  }
  else
  {
    v8 = (UInt8 *)malloc_type_malloc(v7 + 1, 0x100004077774924uLL);
    v9 = -[__CFString length](a1, "length");
    v10 = -[__CFString length](a1, "length");
    v12.location = 0;
    v12.length = v9;
    CFStringGetBytes(a1, v12, 0x600u, 0, 0, v8, v10 + 1, 0);
  }
  *((_QWORD *)v6 + 2) = v8;
  return v6;
}

uint64_t ABIsDataAccess()
{
  if (dataAccessOnceToken != -1)
    dispatch_once(&dataAccessOnceToken, &__block_literal_global_7);
  return ABIsDataAccess_result;
}

uint64_t ABIsDatabaseDoctor()
{
  if (databaseDoctorOnceToken != -1)
    dispatch_once(&databaseDoctorOnceToken, &__block_literal_global_2);
  return ABIsDatabaseDoctor_result;
}

CFComparisonResult _SortPeople(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  v5 = *(void **)(a3 + 320);
  if (v5 && !objc_msgSend(v5, "isValid"))
    return 0;
  else
    return ABPersonCompareNameOfPeople(a1, a2, _sortOrdering);
}

void ABImageUtilsCenteredRectWithFullScreenRatioForImage(CGImage *a1)
{
  double Width;
  size_t Height;

  if (a1)
  {
    Width = (double)CGImageGetWidth(a1);
    Height = CGImageGetHeight(a1);
    ABImageUtilsCenteredRectWithFullScreenRatioForRect(0.0, 0.0, Width, (double)Height);
  }
}

double ABImageUtilsCenteredRectWithFullScreenRatioForRect(double a1, double a2, double a3, double a4)
{
  double v4;

  if (a3 / a4 >= 0.666666667)
    v4 = ceil(a4 * 0.666666667);
  else
    v4 = a3;
  return floor((a3 - v4) * 0.5);
}

double ABImageUtilsCenteredOverflowRectWithFullScreenRatioForRectWithAvailableSize(double result, double a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  double v9;
  double v10;

  if (a3 / a4 >= 0.666666667)
  {
    if (ceil(a3 / 0.666666667) > a6)
      return floor(result + (a3 - a6 * 0.666666667) * 0.5);
  }
  else
  {
    v7 = ceil(a4 * 0.666666667);
    if (v7 <= a5)
    {
      v8 = floor(result + (v7 - a3) * -0.5);
      result = 0.0;
      if (v8 > 0.0)
      {
        v9 = v7 + v8 - a5;
        v10 = floor(v8 - v9);
        if (v9 <= 0.0)
          return v8;
        else
          return v10;
      }
    }
    else
    {
      return 0.0;
    }
  }
  return result;
}

double ABImageUtilsCenteredSquareForRect(double a1, double a2, double a3, double a4)
{
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v12;

  if (ABLogAPIUsage())
  {
    v12 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CGRect ABImageUtilsCenteredSquareForRect(CGRect)", 182, v7, 0, v8, v9, v10, (uint64_t)v12);
    CFRelease(v7);
  }
  if (a3 > a4)
    return a1 + (a3 - a4) * 0.5;
  return a1;
}

CGImageRef ABImageUtilsCreateImageFromData(const __CFData *a1)
{
  CGImageSource *v1;
  CGImageSource *v2;
  CGImageRef ThumbnailAtIndex;

  if (!a1)
    return 0;
  v1 = CGImageSourceCreateWithData(a1, 0);
  if (!v1)
    return 0;
  v2 = v1;
  if (CGImageSourceGetCount(v1))
  {
    pthread_once(&__thumbnailPropertiesOnce, (void (*)(void))__initializeThumbnailProperties);
    ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v2, 0, (CFDictionaryRef)__thumbnailProperties);
  }
  else
  {
    ThumbnailAtIndex = 0;
  }
  CFRelease(v2);
  return ThumbnailAtIndex;
}

CGImageRef ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize(CGImageSource *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  void *v18;
  double v19;
  const __CFAllocator *v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  CGImage *ThumbnailAtIndex;
  CGImage *v24;
  double v25;
  CGImageRef ImageFromImageWithCropRect;
  double v28;
  unsigned int valuePtr;
  void *values[2];
  CFTypeRef cf;
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  if (!a1 || !CGImageSourceGetCount(a1))
    return 0;
  v28 = a5;
  v18 = (void *)*MEMORY[0x1E0CBD178];
  keys[0] = *(void **)MEMORY[0x1E0CBD190];
  keys[1] = v18;
  keys[2] = *(void **)MEMORY[0x1E0CBD2A0];
  v19 = fmin(a6 / a8, a7 / a9);
  values[0] = *(void **)MEMORY[0x1E0C9AE50];
  values[1] = values[0];
  valuePtr = vcvtpd_s64_f64(fmax(a3, a2) / v19);
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v21 = CFDictionaryCreate(v20, (const void **)keys, (const void **)values, 3, 0, 0);
  if (v21)
  {
    v22 = v21;
    ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(a1, 0, v21);
    if (ThumbnailAtIndex)
    {
      v24 = ThumbnailAtIndex;
      if (v19 >= 1.0)
      {
        a4 = round(a4 / v19);
        v25 = round(v28 / v19);
        a6 = a8;
        a7 = a9;
      }
      else
      {
        v25 = v28;
      }
      ImageFromImageWithCropRect = ABImageUtilsCreateImageFromImageWithCropRect(ThumbnailAtIndex, a4, v25, a6, a7);
      CFRelease(v24);
    }
    else
    {
      ImageFromImageWithCropRect = 0;
    }
    CFRelease(v22);
  }
  else
  {
    ImageFromImageWithCropRect = 0;
  }
  CFRelease(cf);
  return ImageFromImageWithCropRect;
}

CGImageRef ABImageUtilsCreateImageFromImageWithCropRect(CGImage *a1, double a2, double a3, double a4, double a5)
{
  CGColorSpace *DeviceRGB;
  double height;
  double x;
  double y;
  double width;
  double v11;
  double v12;
  CGContext *v14;
  CGImageRef v15;
  CGImage *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  if (!a1)
    return 0;
  v25 = CGRectStandardize(*(CGRect *)&a2);
  v26 = CGRectIntegral(v25);
  DeviceRGB = 0;
  if (v26.size.width > 0.0)
  {
    height = v26.size.height;
    if (v26.size.height > 0.0)
    {
      x = v26.origin.x;
      y = v26.origin.y;
      width = v26.size.width;
      v11 = (double)CGImageGetWidth(a1);
      v12 = (double)CGImageGetHeight(a1);
      v27.origin.x = 0.0;
      v27.origin.y = 0.0;
      v27.size.width = v11;
      v27.size.height = v12;
      v39.origin.x = x;
      v39.origin.y = y;
      v39.size.width = width;
      v39.size.height = height;
      v28 = CGRectIntersection(v27, v39);
      v29 = CGRectStandardize(v28);
      if (v29.size.width >= width && v29.size.height >= height)
      {
        v38.origin.x = x;
        v38.origin.y = y;
        v38.size.width = width;
        v38.size.height = height;
        return CGImageCreateWithImageInRect(a1, v38);
      }
      DeviceRGB = 0;
      if (v29.size.width >= 0.0 && v29.size.height >= 0.0)
      {
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        if (DeviceRGB)
        {
          v14 = CGBitmapContextCreate(0, (unint64_t)width, (unint64_t)height, 8uLL, vcvtd_n_u64_f64(width, 2uLL), DeviceRGB, 0x2006u);
          CGColorSpaceRelease(DeviceRGB);
          if (v14)
          {
            CGContextSetFillColor(v14, ABImageUtilsCreateImageFromImageWithCropRect_black);
            v30.origin.x = 0.0;
            v30.origin.y = 0.0;
            v30.size.width = width;
            v30.size.height = height;
            CGContextFillRect(v14, v30);
            v31.origin.x = x;
            v31.origin.y = y;
            v31.size.width = width;
            v31.size.height = height;
            v15 = CGImageCreateWithImageInRect(a1, v31);
            if (v15)
            {
              v16 = v15;
              v40.origin.x = -x;
              v40.origin.y = -y;
              v32.origin.x = 0.0;
              v32.origin.y = 0.0;
              v32.size.width = width;
              v32.size.height = height;
              v40.size.width = v11;
              v40.size.height = v12;
              v33 = CGRectIntersection(v32, v40);
              v17 = v33.origin.x;
              v18 = v33.origin.y;
              v19 = v33.size.width;
              v20 = v33.size.height;
              memset(&v24, 0, sizeof(v24));
              CGAffineTransformMakeScale(&v24, 1.0, -1.0);
              memset(&v23, 0, sizeof(v23));
              CGAffineTransformMakeTranslation(&v23, 0.0, height);
              v22 = v24;
              v34.origin.x = v17;
              v34.origin.y = v18;
              v34.size.width = v19;
              v34.size.height = v20;
              v35 = CGRectApplyAffineTransform(v34, &v22);
              v22 = v23;
              v36 = CGRectApplyAffineTransform(v35, &v22);
              v37 = CGRectStandardize(v36);
              CGContextDrawImage(v14, v37, v16);
              DeviceRGB = CGBitmapContextCreateImage(v14);
              CGImageRelease(v16);
            }
            else
            {
              DeviceRGB = 0;
            }
            CFRelease(v14);
            return DeviceRGB;
          }
          return 0;
        }
      }
    }
  }
  return DeviceRGB;
}

uint64_t _ABImageUtilsImageIsNormalOrientation(const __CFData *a1)
{
  CGImageSource *v1;
  CGImageSource *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const __CFNumber *Value;
  _BOOL8 v6;
  int valuePtr;

  if (!a1)
    return 1;
  v1 = CGImageSourceCreateWithData(a1, 0);
  if (!v1)
    return 1;
  v2 = v1;
  v3 = CGImageSourceCopyPropertiesAtIndex(v1, 0, 0);
  if (v3)
  {
    v4 = v3;
    Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CBCFF0]);
    if (Value)
    {
      valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      v6 = valuePtr == 1;
    }
    else
    {
      v6 = 1;
    }
    CFRelease(v4);
  }
  else
  {
    v6 = 1;
  }
  CFRelease(v2);
  return v6;
}

BOOL ABImageUtilsCopyImageSourceAndGetSizeFromData(const __CFData *a1, CGImageSource **a2, int *a3, int *a4)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGImageSource *v12;
  CGImageSource *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFNumber *Value;
  _BOOL4 v17;
  int v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFString *v22;
  int valuePtr;

  if (ABLogAPIUsage())
  {
    v22 = _isMainThread();
    v8 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABImageUtilsCopyImageSourceAndGetSizeFromData(CFDataRef, CGImageSourceRef *, int *, int *)", 279, v8, 0, v9, v10, v11, (uint64_t)v22);
    CFRelease(v8);
  }
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (!a1)
    return 0;
  v12 = CGImageSourceCreateWithData(a1, 0);
  if (v12)
  {
    v13 = v12;
    v14 = CGImageSourceCopyPropertiesAtIndex(v12, 0, 0);
    if (v14)
    {
      v15 = v14;
      valuePtr = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CBCFF0]);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        v17 = valuePtr > 4;
      }
      else
      {
        v17 = 0;
      }
      v20 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E0CBD048]);
      if (v20 && CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
      {
        if (v17)
        {
          if (a4)
            *a4 = valuePtr;
        }
        else if (a3)
        {
          *a3 = valuePtr;
        }
      }
      v21 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E0CBD040]);
      if (v21 && CFNumberGetValue(v21, kCFNumberIntType, &valuePtr))
      {
        if (v17)
        {
          if (a3)
            *a3 = valuePtr;
        }
        else if (a4)
        {
          *a4 = valuePtr;
        }
      }
      CFRelease(v15);
      if (a2)
      {
        *a2 = v13;
        v19 = 1;
        return v19 != 0;
      }
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
    CFRelease(v13);
    return v19 != 0;
  }
  v19 = 0;
  return v19 != 0;
}

uint64_t ABImageUtilsIsImageDataInSyncCompatibleFormat(const __CFData *a1)
{
  void *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  uint64_t IsImageDataOfFormatInUTIs;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (void *)*MEMORY[0x1E0CA5C10];
  values[0] = *(void **)MEMORY[0x1E0CA5BA8];
  values[1] = v2;
  v3 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, 0);
  if (!v3)
    return 0;
  v4 = v3;
  IsImageDataOfFormatInUTIs = ABImageUtilsIsImageDataOfFormatInUTIs(a1, v3);
  CFRelease(v4);
  return IsImageDataOfFormatInUTIs;
}

uint64_t ABImageUtilsIsImageDataOfFormatInUTIs(const __CFData *a1, CFArrayRef theArray)
{
  uint64_t result;
  CFIndex Count;
  CGImageSource *v6;
  CGImageSource *v7;
  CFStringRef Type;
  char v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *ValueAtIndex;

  result = 0;
  if (a1 && theArray)
  {
    Count = CFArrayGetCount(theArray);
    v6 = CGImageSourceCreateWithData(a1, 0);
    if (v6)
    {
      v7 = v6;
      Type = CGImageSourceGetType(v6);
      v9 = 0;
      if (Type && Count >= 1)
      {
        v10 = Type;
        v9 = 0;
        v11 = 1;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v11 - 1);
          if (UTTypeConformsTo(v10, ValueAtIndex))
            v9 = 1;
          if (v11 >= Count)
            break;
          ++v11;
        }
        while ((v9 & 1) == 0);
      }
      CFRelease(v7);
    }
    else
    {
      v9 = 0;
    }
    return v9 & 1;
  }
  return result;
}

BOOL _ABImageUtilsCropRectMatchesOrignalSizeCropRectWithScalingFactor(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 != 1.0)
  {
    a5 = floor(a5 * a9);
    a6 = floor(a6 * a9);
    a7 = ceil(a7 * a9);
    a8 = ceil(a8 * a9);
  }
  return CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5);
}

BOOL ABImageUtilsOriginalSizeCropRectMatchesSyncedCropRect(uint64_t a1, const __CFData *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  const __CFData *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  _BOOL8 v17;
  _BOOL4 SizeFromData;
  _BOOL4 v19;
  NSObject *v20;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  _BYTE v27[10];
  _BYTE v28[10];
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  CGFloat v33;
  __int16 v34;
  CGFloat v35;
  __int16 v36;
  CGFloat v37;
  __int16 v38;
  CGFloat v39;
  uint64_t v40;
  CGRect v41;
  CGRect v42;

  v40 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v11 = ABPersonCopyImageDataAndInvertedCropRect(a1, 2, (_DWORD *)&v25 + 1, (int *)&v25, (_DWORD *)&v24 + 1, &v24);
  v12 = (double)SHIDWORD(v25);
  v13 = (double)(int)v25;
  v14 = (double)SHIDWORD(v24);
  v15 = (double)(int)v24;
  v16 = ABOSLogGeneral();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219776;
    *(double *)v27 = v12;
    *(_WORD *)&v27[8] = 2048;
    *(double *)v28 = v13;
    *(_WORD *)&v28[8] = 2048;
    v29 = v14;
    v30 = 2048;
    v31 = v15;
    v32 = 2048;
    v33 = a3;
    v34 = 2048;
    v35 = a4;
    v36 = 2048;
    v37 = a5;
    v38 = 2048;
    v39 = a6;
    _os_log_debug_impl(&dword_19BC4B000, v16, OS_LOG_TYPE_DEBUG, "[Likeness Update] original cropRect {%.2f, %.2f, %.2f, %.2f} vs syncedCropRect: {%.2f, %.2f, %.2f, %.2f}", buf, 0x52u);
  }
  v41.origin.x = a3;
  v41.origin.y = a4;
  v41.size.width = a5;
  v41.size.height = a6;
  v42.origin.x = v12;
  v42.origin.y = v13;
  v42.size.width = v14;
  v42.size.height = v15;
  if (CGRectEqualToRect(v41, v42))
  {
    v17 = 1;
  }
  else
  {
    v23 = 0;
    SizeFromData = ABImageUtilsCopyImageSourceAndGetSizeFromData(v11, 0, 0, (int *)&v23 + 1);
    v19 = ABImageUtilsCopyImageSourceAndGetSizeFromData(a2, 0, 0, (int *)&v23);
    v17 = 0;
    if (SizeFromData && v19)
    {
      v17 = _ABImageUtilsCropRectMatchesOrignalSizeCropRectWithScalingFactor(a3, a4, a5, a6, v12, v13, v14, v15, (double)(int)v23 / (double)SHIDWORD(v23));
      v20 = ABOSLogGeneral();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v22 = CFSTR("NO");
        if (v17)
          v22 = CFSTR("YES");
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v27 = HIDWORD(v23);
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v23;
        *(_WORD *)v28 = 2112;
        *(_QWORD *)&v28[2] = v22;
        _os_log_debug_impl(&dword_19BC4B000, v20, OS_LOG_TYPE_DEBUG, "[Likeness Update] original height %i vs sync height: %i, cropRect is scaled down: %@", buf, 0x18u);
      }
    }
  }

  return v17;
}

__CFData *ABImageUtilsCreateScaledImageData(CGImage *a1, unsigned int a2, const __CFString *a3, _QWORD *a4, double a5, double a6, double a7)
{
  __CFData *ImageData;
  uint32_t v15;
  BOOL v16;
  CGColorSpaceRef DeviceRGB;
  CGColorSpace *v18;
  double v19;
  double v20;
  size_t Width;
  size_t Height;
  BOOL v23;
  double v24;
  CGContext *v25;
  CGContext *v26;
  CGImage *Image;
  const __CFAllocator *v28;
  const UInt8 *Data;
  size_t BytesPerRow;
  CGRect v32;

  if (a2 != 5 && a2 != 8)
    ABImageUtilsCreateScaledImageData_cold_1();
  ImageData = 0;
  if (a2 == 5)
    v15 = 4102;
  else
    v15 = 8198;
  v16 = a7 <= 0.0 || a1 == 0;
  if (!v16 && a6 > 0.0 && a5 > 0.0)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    if (DeviceRGB)
    {
      v18 = DeviceRGB;
      v19 = round(a5 * a7);
      v20 = round(a6 * a7);
      Width = CGImageGetWidth(a1);
      Height = CGImageGetHeight(a1);
      if (a3 && (v19 == (double)Width ? (v23 = v20 == (double)Height) : (v23 = 0), v23))
      {
        ImageData = _ABImageUtilsCreateImageData(a1, a3, a7);
        if (a4)
          *a4 = CFRetain(a1);
      }
      else
      {
        v24 = 4.0;
        if (a2 == 5)
          v24 = 2.0;
        v25 = CGBitmapContextCreate(0, (unint64_t)v19, (unint64_t)v20, a2, (unint64_t)(v19 * v24), v18, v15);
        if (v25)
        {
          v26 = v25;
          v32.origin.x = 0.0;
          v32.origin.y = 0.0;
          v32.size.width = v19;
          v32.size.height = v20;
          CGContextDrawImage(v25, v32, a1);
          if (a3)
          {
            Image = CGBitmapContextCreateImage(v26);
            ImageData = _ABImageUtilsCreateImageData(Image, a3, a7);
            if (a4)
              *a4 = Image;
            else
              CGImageRelease(Image);
          }
          else
          {
            v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            Data = (const UInt8 *)CGBitmapContextGetData(v26);
            BytesPerRow = CGBitmapContextGetBytesPerRow(v26);
            ImageData = CFDataCreate(v28, Data, (uint64_t)(v19 * (double)BytesPerRow));
          }
          CFRelease(v26);
        }
        else
        {
          ImageData = 0;
        }
      }
      CGColorSpaceRelease(v18);
    }
    else
    {
      return 0;
    }
  }
  return ImageData;
}

__CFData *_ABImageUtilsCreateImageData(CGImage *a1, const __CFString *a2, double a3)
{
  const __CFAllocator *v6;
  __CFData *Mutable;
  CGImageDestination *v8;
  CGImageDestination *v9;
  CFNumberRef v10;
  void *v11;
  const __CFDictionary *v12;
  double v14;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v8 = CGImageDestinationCreateWithData(Mutable, a2, 1uLL, 0);
  if (v8)
  {
    v9 = v8;
    if (a3 == 1.0)
    {
      CGImageDestinationAddImage(v8, a1, 0);
    }
    else
    {
      v14 = a3 * 72.0;
      v10 = CFNumberCreate(v6, kCFNumberDoubleType, &v14);
      v11 = (void *)*MEMORY[0x1E0CBC9F8];
      keys[0] = *(void **)MEMORY[0x1E0CBCA00];
      keys[1] = v11;
      values[0] = v10;
      values[1] = v10;
      v12 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CGImageDestinationAddImage(v9, a1, v12);
      CFRelease(v12);
      CFRelease(v10);
    }
    CGImageDestinationFinalize(v9);
    CFRelease(v9);
  }
  if (Mutable && !CFDataGetLength(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t ABPersonImageFormatGetPixelWidth(unsigned int a1)
{
  if (a1 > 4)
    return 0;
  else
    return dword_19BCBE9FC[a1];
}

uint64_t ABPersonImageFormatGetPixelHeight(unsigned int a1)
{
  if (a1 > 4)
    return 0;
  else
    return dword_19BCBEA10[a1];
}

float ABPersonImageFormatGetScale(int a1)
{
  float result;

  result = 1.0;
  if (a1 == 4)
    return 2.0;
  return result;
}

BOOL ABPersonImageFormatIsLessThanOrEqualToPixelSize(unsigned int a1, signed int a2, signed int a3)
{
  signed int v3;
  signed int v5;

  if (a1 > 4)
    v3 = 0;
  else
    v3 = dword_19BCBE9FC[a1];
  if (v3 > a2)
    return 0;
  if (a1 > 4)
    v5 = 0;
  else
    v5 = dword_19BCBEA10[a1];
  return v5 <= a3;
}

__CFData *ABImageUtilsCopySyncImageForPerson(const void *a1, unsigned int a2, _BYTE *a3, _DWORD *a4, int a5, int *a6, int *a7, int *a8, int *a9)
{
  NSObject *v17;
  const __CFData *v18;
  void *v19;
  NSObject *v20;
  _BOOL4 v21;
  const __CFString *v22;
  const __CFString *Type;
  int v24;
  CGImage *ImageAtIndex;
  CGImage *v26;
  CGImageAlphaInfo AlphaInfo;
  BOOL v28;
  int v29;
  __CFData *v30;
  NSObject *v31;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  unsigned int v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  CGImage *ImageFromData;
  CGImage *v41;
  const __CFString *v42;
  __CFData *ImageData;
  unint64_t v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  double v48;
  unsigned int v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  NSObject *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  CGImageSourceRef isrc;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint8_t buf[4];
  _BYTE v66[10];
  _BYTE v67[6];
  _BYTE v68[6];
  int v69;
  __int16 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v17 = ABOSLogGeneral();
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_DWORD *)buf = 67109632;
  *(_DWORD *)v66 = ABRecordGetRecordID(a1);
  *(_WORD *)&v66[4] = 1024;
  *(_DWORD *)&v66[6] = a2;
  *(_WORD *)v67 = 1024;
  *(_DWORD *)&v67[2] = a5;
  _os_log_debug_impl(&dword_19BC4B000, v17, OS_LOG_TYPE_DEBUG, "[Likeness Update] Enter ABImageUtilsCopySyncImageForPerson: ABRecordID = %i, maxSize = %i, allowOverflow = %i", buf, 0x14u);
  if (a3)
LABEL_3:
    *a3 = 1;
LABEL_4:
  if (a6)
    *a6 = 0;
  if (a7)
    *a7 = 0;
  if (a8)
    *a8 = 0;
  if (a9)
    *a9 = 0;
  if (a4)
    *a4 = 2;
  v63 = 0;
  v64 = 1.0;
  v61 = 0;
  v62 = 0;
  isrc = 0;
  v18 = ABPersonCopyImageDataAndInvertedCropRect((uint64_t)a1, 2, (_DWORD *)&v63 + 1, (int *)&v63, (_DWORD *)&v62 + 1, &v62);
  v19 = (id)CFMakeCollectable(v18);
  v20 = ABOSLogGeneral();
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  if (!v19)
  {
    if (v21)
    {
      ABImageUtilsCopySyncImageForPerson_cold_1();
      if (a3)
        goto LABEL_39;
    }
    else if (a3)
    {
LABEL_39:
      v30 = 0;
      *a3 = 0;
      return v30;
    }
    return 0;
  }
  if (v21)
  {
    v38 = objc_msgSend(v19, "length");
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)v66 = v38;
    *(_WORD *)&v66[8] = 1024;
    *(_DWORD *)v67 = HIDWORD(v63);
    *(_WORD *)&v67[4] = 1024;
    *(_DWORD *)v68 = v63;
    *(_WORD *)&v68[4] = 1024;
    v69 = HIDWORD(v62);
    v70 = 1024;
    v71 = v62;
    _os_log_debug_impl(&dword_19BC4B000, v20, OS_LOG_TYPE_DEBUG, "Original image has length = %lu with thumbnail crop rect (%i, %i, %i, %i)", buf, 0x24u);
  }
  if (ABLogDebugLevelEnabled())
    objc_msgSend(v19, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%i-origImage.jpg"), ABRecordGetRecordID(a1)), 1);
  if (!ABImageUtilsCopyImageSourceAndGetSizeFromData((const __CFData *)v19, &isrc, (int *)&v61 + 1, (int *)&v61))
  {
    isrc = 0;
    v61 = 0;
    goto LABEL_37;
  }
  if ((int)v61 < 1 || v61 <= 0)
  {
    if (isrc)
    {
      CFRelease(isrc);
      isrc = 0;
    }
LABEL_37:
    v31 = ABOSLogGeneral();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      ABImageUtilsCopySyncImageForPerson_cold_2();
      if (a3)
        goto LABEL_39;
    }
    else if (a3)
    {
      goto LABEL_39;
    }
    return 0;
  }
  v58 = a2;
  v22 = (const __CFString *)*MEMORY[0x1E0CA5C10];
  Type = CGImageSourceGetType(isrc);
  v24 = UTTypeConformsTo(v22, Type);
  if (v24 && (ImageAtIndex = CGImageSourceCreateImageAtIndex(isrc, 0, 0)) != 0)
  {
    v26 = ImageAtIndex;
    AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
    if (AlphaInfo)
      v28 = AlphaInfo - 7 >= 0xFFFFFFFE;
    else
      v28 = 1;
    v29 = !v28;
    v57 = v29;
    CFRelease(v26);
  }
  else
  {
    v57 = 0;
  }
  v33 = ABPersonCopyImageDataAndCropRect((uint64_t)a1, 5, 0, 0, 0, 0);
  if (v33)
  {
    v30 = (__CFData *)v33;
    v34 = ABOSLogGeneral();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      ABImageUtilsCopySyncImageForPerson_cold_7();
    if (ABLogDebugLevelEnabled())
      -[__CFData writeToFile:atomically:](v30, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%i-savedSyncImage.jpg"), ABRecordGetRecordID(a1)), 1);
    v59 = 0;
    if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v30, 0, (int *)&v59 + 1, (int *)&v59))
    {
      v64 = (double)(int)v59 / (double)(int)v61;
      if (vabdd_f64(v64, (double)SHIDWORD(v59) / (double)SHIDWORD(v61)) > 1.0)
      {
        v35 = ABOSLogGeneral();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)v66 = HIDWORD(v59);
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = v59;
          *(_WORD *)v67 = 1024;
          *(_DWORD *)&v67[2] = HIDWORD(v61);
          *(_WORD *)v68 = 1024;
          *(_DWORD *)&v68[2] = v61;
          _os_log_error_impl(&dword_19BC4B000, v35, OS_LOG_TYPE_ERROR, "[Likeness Update] ABImageUtilsCopySyncImageForPerson: inconsistent sync image ratio (%ix%i) vs original image ratio (%ix%i). Crop rect will be messed up", buf, 0x1Au);
          if (!a3)
            goto LABEL_82;
LABEL_58:
          *a3 = 0;
          goto LABEL_82;
        }
      }
LABEL_57:
      if (!a3)
        goto LABEL_82;
      goto LABEL_58;
    }
    v37 = ABOSLogGeneral();
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      goto LABEL_57;
    ABImageUtilsCopySyncImageForPerson_cold_6();
    if (a3)
      goto LABEL_58;
LABEL_82:
    v48 = v64;
    if (v64 == 1.0)
    {
      if (a6)
        *a6 = HIDWORD(v63);
      if (a7)
        *a7 = v63;
      if (a8)
        *a8 = HIDWORD(v62);
      if (!a9)
        goto LABEL_100;
      v49 = v62;
    }
    else
    {
      if (a6)
        *a6 = vcvtmd_s64_f64(v64 * (double)SHIDWORD(v63));
      if (a7)
        *a7 = vcvtmd_s64_f64(v48 * (double)(int)v63);
      if (a8)
        *a8 = vcvtpd_s64_f64(v48 * (double)SHIDWORD(v62));
      if (!a9)
        goto LABEL_100;
      v49 = vcvtpd_s64_f64(v48 * (double)(int)v62);
    }
    *a9 = v49;
LABEL_100:
    if (ABLogDebugLevelEnabled())
      -[__CFData writeToFile:atomically:](v30, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%i-syncImage.jpg"), ABRecordGetRecordID(a1)), 1);
    ABPersonSetImageHashForImageData(a1, v30, 0);
    goto LABEL_103;
  }
  if ((_ABImageUtilsImageIsNormalOrientation((const __CFData *)v19) & 1) != 0)
  {
    v36 = v58;
  }
  else
  {
    v39 = ABOSLogGeneral();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      ABImageUtilsCopySyncImageForPerson_cold_5();
    ImageFromData = ABImageUtilsCreateImageFromData((const __CFData *)v19);
    v41 = ImageFromData;
    if (v24)
      v42 = CFSTR("public.png");
    else
      v42 = CFSTR("public.jpeg");
    ImageData = _ABImageUtilsCreateImageData(ImageFromData, v42, 1.0);
    v19 = (id)CFMakeCollectable(ImageData);
    if (v41)
      CFRelease(v41);
    v36 = v58;
    if (ABLogDebugLevelEnabled())
      objc_msgSend(v19, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%i-normalizedOrigImage.jpg"), ABRecordGetRecordID(a1)), 1);
  }
  v44 = objc_msgSend(v19, "length");
  if (v19 && v44 <= v36 && ABImageUtilsIsImageDataInSyncCompatibleFormat((const __CFData *)v19))
  {
    v45 = ABOSLogGeneral();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      ABImageUtilsCopySyncImageForPerson_cold_4();
    v30 = v19;
    if (v30)
      goto LABEL_82;
  }
  v30 = _copyImageDataReducedUpToSize((const __CFData *)v19, (uint64_t)isrc, &v64, HIDWORD(v61), v61, v36, a5, v57);
  if (v30)
    v46 = 0;
  else
    v46 = v57;
  if (v46 == 1)
  {
    v47 = ABOSLogGeneral();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19BC4B000, v47, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Scaling failed to reduce to max size, trying again without alpha preservation by allowing JPEG conversion.", buf, 2u);
    }
    v30 = _copyImageDataReducedUpToSize((const __CFData *)v19, (uint64_t)isrc, &v64, HIDWORD(v61), v61, v36, a5, 0);
  }
  if (v30)
    goto LABEL_82;
  if (a3)
    *a3 = 0;
  v56 = ABOSLogGeneral();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    ABImageUtilsCopySyncImageForPerson_cold_3(v19, v36, v56);
  v30 = 0;
LABEL_103:
  v50 = ABOSLogGeneral();
  if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    goto LABEL_114;
  v51 = -[__CFData length](v30, "length");
  if (a6)
  {
    v52 = *a6;
    if (a7)
      goto LABEL_106;
  }
  else
  {
    v52 = -1;
    if (a7)
    {
LABEL_106:
      v53 = *a7;
      if (a8)
        goto LABEL_107;
LABEL_111:
      v54 = -1;
      if (a9)
        goto LABEL_108;
LABEL_112:
      v55 = -1;
      goto LABEL_113;
    }
  }
  v53 = -1;
  if (!a8)
    goto LABEL_111;
LABEL_107:
  v54 = *a8;
  if (!a9)
    goto LABEL_112;
LABEL_108:
  v55 = *a9;
LABEL_113:
  *(_DWORD *)buf = 134219008;
  *(_QWORD *)v66 = v51;
  *(_WORD *)&v66[8] = 1024;
  *(_DWORD *)v67 = v52;
  *(_WORD *)&v67[4] = 1024;
  *(_DWORD *)v68 = v53;
  *(_WORD *)&v68[4] = 1024;
  v69 = v54;
  v70 = 1024;
  v71 = v55;
  _os_log_impl(&dword_19BC4B000, v50, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: sync image length = %lu with thumbnail crop rect (%i, %i, %i, %i)", buf, 0x24u);
LABEL_114:
  if (isrc)
    CFRelease(isrc);
  return v30;
}

__CFData *_copyImageDataReducedUpToSize(const __CFData *a1, uint64_t a2, double *a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  double v14;
  CGImageSource *v15;
  CGImageSource *v16;
  CFDictionaryRef v17;
  CFTypeRef v18;
  CGImageRef ImageAtIndex;
  CGImage *v20;
  __CFData *v21;
  CGImageDestinationRef v22;
  CGImageDestination *v23;
  void *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  const __CFString *v36;
  unint64_t v37;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  CGImageSource *v42;
  CGImageSource *v43;
  CFDictionaryRef v44;
  CFTypeRef v45;
  CGImageRef v46;
  void *v47;
  BOOL v48;
  uint64_t v49;
  CGImageDestinationRef v50;
  CGImageDestination *v51;
  const __CFDictionary *v52;
  const __CFString *v53;
  const __CFDictionary *v54;
  double v55;
  const __CFDictionary *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;

  if (a1 && a7 && (a8 & 1) == 0)
  {
    if (ABDiagnosticsEnabled())
      _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 716, 0, (uint64_t)CFSTR("Trying to jpeg compresss the original image."), v10, v11, v12, v62);
    v65 = *MEMORY[0x1E0CBC780];
    v13 = 0.8;
    v14 = 0.800000012;
    do
    {
      v15 = CGImageSourceCreateWithData(a1, 0);
      if (v15)
      {
        v16 = v15;
        if (CGImageSourceGetCount(v15)
          && (v17 = CGImageSourceCopyPropertiesAtIndex(v16, 0, 0),
              v18 = (id)CFMakeCollectable(v17),
              (ImageAtIndex = CGImageSourceCreateImageAtIndex(v16, 0, 0)) != 0))
        {
          v20 = ImageAtIndex;
          v21 = (__CFData *)objc_opt_new();
          v22 = CGImageDestinationCreateWithData(v21, CFSTR("public.jpeg"), 1uLL, 0);
          if (v22)
          {
            v23 = v22;
            v24 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v18);
            *(float *)&v25 = v13;
            objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25), v65);
            CGImageDestinationAddImage(v23, v20, (CFDictionaryRef)v24);
            CGImageDestinationFinalize(v23);
            CFRelease(v23);
          }
          CGImageRelease(v20);
        }
        else
        {
          v21 = 0;
        }
        CFRelease(v16);
      }
      else
      {
        v21 = 0;
      }
      if (ABDiagnosticsEnabled())
      {
        -[__CFData length](v21, "length");
        _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 719, 0, (uint64_t)CFSTR("Original image at quality %f has length %lu"), v26, v27, v28, *(uint64_t *)&v14);
      }
      if (v21)
      {
        if (-[__CFData length](v21, "length") < (unint64_t)a6)
          return v21;
        CFRelease(v21);
      }
      v13 = v14 + -0.2;
      v14 = v13;
    }
    while (v13 > 0.0);
  }
  if (a1)
  {
    if (ABDiagnosticsEnabled())
      _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 731, 0, (uint64_t)CFSTR("Trying to scale down the original image."), v29, v30, v31, v62);
    if (a2)
    {
      v32 = (double)(int)a4;
      v33 = (double)a5;
      if ((double)(int)a4 <= (double)a5)
        v34 = (double)a5;
      else
        v34 = (double)(int)a4;
      if ((double)(int)a4 >= (double)a5)
        v32 = (double)a5;
      v35 = v32 / v34;
      if (a8)
        v36 = CFSTR("public.png");
      else
        v36 = CFSTR("public.jpeg");
      v37 = a6;
      v66 = *MEMORY[0x1E0CBC780];
      v38 = 1024;
      do
      {
        v39 = (double)v38;
        if (v34 <= (double)v38)
        {
          v21 = 0;
        }
        else
        {
          if (v34 == v33)
            v40 = (double)(unint64_t)(v35 * v39);
          else
            v40 = (double)v38;
          if (v34 == v33)
            v41 = (double)v38;
          else
            v41 = (double)(unint64_t)(v35 * v39);
          v42 = CGImageSourceCreateWithData(a1, 0);
          if (v42)
          {
            v43 = v42;
            if (CGImageSourceGetCount(v42))
            {
              v44 = CGImageSourceCopyPropertiesAtIndex(v43, 0, 0);
              v45 = (id)CFMakeCollectable(v44);
              v46 = CGImageSourceCreateImageAtIndex(v43, 0, 0);
              if (v46)
              {
                v47 = v46;
                if ((unint64_t)v40)
                  v48 = (unint64_t)v41 == 0;
                else
                  v48 = 1;
                if (!v48)
                {
                  v49 = CGImageCreateByScaling();
                  CFRelease(v47);
                  v47 = (void *)v49;
                }
                v21 = (__CFData *)objc_opt_new();
                v50 = CGImageDestinationCreateWithData(v21, v36, 1uLL, 0);
                if (v50)
                {
                  v51 = v50;
                  v52 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v45);
                  v53 = v36;
                  v54 = v52;
                  LODWORD(v55) = 0.5;
                  -[__CFDictionary setObject:forKeyedSubscript:](v52, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v55), v66);
                  v56 = v54;
                  v36 = v53;
                  CGImageDestinationAddImage(v51, (CGImageRef)v47, v56);
                  CGImageDestinationFinalize(v51);
                  CFRelease(v51);
                }
                CGImageRelease((CGImageRef)v47);
              }
              else
              {
                v21 = 0;
              }
              v37 = a6;
            }
            else
            {
              v21 = 0;
            }
            CFRelease(v43);
            if (!a3)
              goto LABEL_61;
          }
          else
          {
            v21 = 0;
            if (!a3)
              goto LABEL_61;
          }
          *a3 = v41 / v33;
        }
LABEL_61:
        if (ABDiagnosticsEnabled())
        {
          -[__CFData length](v21, "length");
          _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 739, 0, (uint64_t)CFSTR("Original image with size (%i, %i) at %d max edge has length %lu, scalingFactor = %f"), v57, v58, v59, a4);
        }
        if (v21)
        {
          if (-[__CFData length](v21, "length") < v37)
            return v21;
          CFRelease(v21);
        }
        v60 = v38 > 0x1FF;
        v38 >>= 1;
      }
      while (v60);
    }
  }
  return 0;
}

CFDictionaryRef __initializeThumbnailProperties()
{
  void *v0;
  CFDictionaryRef result;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CBD178];
  keys[0] = *(void **)MEMORY[0x1E0CBD190];
  keys[1] = v0;
  values[0] = *(void **)MEMORY[0x1E0C9AE50];
  values[1] = values[0];
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, 0, 0);
  __thumbnailProperties = (uint64_t)result;
  return result;
}

CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef source, CFDataRef vCardData)
{
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ABVCardParser *v8;
  const __CFArray *v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef, CFDataRef)", 19, v4, 0, v5, v6, v7, (uint64_t)v11);
    CFRelease(v4);
  }
  v8 = -[ABVCardParser initWithData:]([ABVCardParser alloc], "initWithData:", vCardData);
  -[ABVCardParser setSource:](v8, "setSource:", source);
  v9 = (const __CFArray *)-[ABVCardParser sortedPeopleAndProperties:](v8, "sortedPeopleAndProperties:", 0);

  return v9;
}

CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef people)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef)", 31, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return (CFDataRef)+[ABVCardExporter vCardRepresentationOfRecords:mode:](ABVCardExporter, "vCardRepresentationOfRecords:mode:", people, 1);
}

uint64_t ABChangeHistoryCreateTables(uint64_t a1, int a2)
{
  if (a2)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
  }
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  return CPSqliteConnectionPerformSQL();
}

uint64_t ABChangeHistoryMigrateAddingSaveTimestamp()
{
  uint64_t v0;
  sqlite3_stmt *v1;
  double Current;

  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  v0 = CPSqliteConnectionStatementForSQL();
  if (v0)
  {
    v1 = *(sqlite3_stmt **)(v0 + 8);
    Current = CFAbsoluteTimeGetCurrent();
    sqlite3_bind_double(v1, 1, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  CPSqliteConnectionPerformSQL();
  return 1;
}

uint64_t ABChangeHistoryRegisterClientForSource(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t WriterConnection;
  uint64_t v7;
  UInt8 *CString;
  char *v9;
  ABRecordID RecordID;
  uint64_t SequenceNumber;
  uint64_t v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  double Current;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (!a2)
  {
    ABLogSimulateCrashReport((uint64_t)CFSTR("Unknown client registering for AB change history, creating simulated crash report."));
    ABLogDisplayInternalAlert((uint64_t)CFSTR("Unknown client registering for AB change history, creating simulated crash report."));
    return 0xFFFFFFFFLL;
  }
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (!WriterConnection)
    return 0xFFFFFFFFLL;
  v7 = WriterConnection;
  v20 = 0;
  CString = _getCString(a2, &v20);
  if (!CString)
    return 0xFFFFFFFFLL;
  v9 = (char *)CString;
  if (a3)
    RecordID = ABRecordGetRecordID(a3);
  else
    RecordID = -1;
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  v13 = CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    v14 = v13;
    sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, v9, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, RecordID);
    sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 3, v9, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 4, RecordID);
    v15 = *(sqlite3_stmt **)(v14 + 8);
    Current = CFAbsoluteTimeGetCurrent();
    sqlite3_bind_double(v15, 5, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v7, (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (v20)
    free(v9);
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
  {
    _dumpTable(a1, (uint64_t)CFSTR("ClientCursor"));
    _ABLog2(6, (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 191, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i\n>> latestSequenceNumber = %i\n%@"), v17, v18, v19, (uint64_t)a2);
  }
  return SequenceNumber;
}

UInt8 *_getCString(const __CFString *a1, _BYTE *a2)
{
  UInt8 *CStringPtr;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex usedBufLen;
  CFRange v9;

  CStringPtr = (UInt8 *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    Length = CFStringGetLength(a1);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    usedBufLen = 0;
    CStringPtr = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xA6A166C0uLL);
    *a2 = 1;
    v9.location = 0;
    v9.length = Length;
    CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, CStringPtr, MaximumSizeForEncoding, &usedBufLen);
    CStringPtr[usedBufLen] = 0;
  }
  return CStringPtr;
}

id ABChangeHistoryCopyAllRegisteredClientIdentifiers()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
    _ABLog2(6, (uint64_t)"CFArrayRef ABChangeHistoryCopyAllRegisteredClientIdentifiers(ABAddressBookRef)", 227, 0, (uint64_t)CFSTR(">> clientIdentifiers = %@"), v1, v2, v3, (uint64_t)v0);
  return v0;
}

uint64_t _allClientsRowHandler(uint64_t a1, void *a2)
{
  const unsigned __int8 *v3;

  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3)
    objc_msgSend(a2, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3));
  return 0;
}

void ABChangeHistoryUnregisterClientForSource(uint64_t a1, const __CFString *a2, ABRecordRef record)
{
  ABRecordID RecordID;
  uint64_t WriterConnection;
  uint64_t v8;
  UInt8 *CString;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (record)
  {
    RecordID = ABRecordGetRecordID(record);
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    RecordID = -1;
    if (!a2)
      goto LABEL_12;
  }
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (!WriterConnection)
    return;
  v8 = WriterConnection;
  v15 = 0;
  CString = _getCString(a2, &v15);
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = v10;
    sqlite3_bind_text(*(sqlite3_stmt **)(v10 + 8), 1, (const char *)CString, -1, 0);
    if (record)
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, RecordID);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v8, (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (v15)
    free(CString);
LABEL_12:
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      _dumpTable(a1, (uint64_t)CFSTR("ClientCursor"));
      _ABLog2(6, (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 272, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i\n%@"), v12, v13, v14, (uint64_t)a2);
    }
  }
}

void ABChangeHistorySetAddressBookClientIdentifier(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(const void **)(a1 + 344);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 344) = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *(_QWORD *)(a1 + 344) = cf;
  }
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
      _ABLog2(6, (uint64_t)"void ABChangeHistorySetAddressBookClientIdentifier(ABAddressBookRef, CFStringRef)", 295, 0, (uint64_t)CFSTR("clientIdentifier = %@"), v5, v6, v7, (uint64_t)cf);
  }
}

CFStringRef ABChangeHistoryCopyAddressBookClientIdentifier(uint64_t a1)
{
  const __CFString *v1;

  if (a1 && (v1 = *(const __CFString **)(a1 + 344)) != 0)
    return CFStringCreateCopy(0, v1);
  else
    return 0;
}

void ABChangeHistorySetSaveTimestamp(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(a1 + 352) = a2;
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
      _ABLog2(6, (uint64_t)"void ABChangeHistorySetSaveTimestamp(ABAddressBookRef, CFAbsoluteTime)", 314, 0, (uint64_t)CFSTR("saveTimestamp = %@"), v4, v5, v6, v3);
    }
  }
}

void ABChangeHistoryAssociateSequenceNumberWithClient(double Current, uint64_t a2, int a3, const __CFString *a4)
{
  UInt8 *CString;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v9 = 0;
  CString = _getCString(a4, &v9);
  if (Current == 0.0)
    Current = CFAbsoluteTimeGetCurrent();
  v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    v8 = v7;
    sqlite3_bind_text(*(sqlite3_stmt **)(v7 + 8), 1, (const char *)CString, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
    sqlite3_bind_double(*(sqlite3_stmt **)(v8 + 8), 3, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  if (v9)
    free(CString);
}

void *ABChangeHistoryGetEntityChangesSinceSequenceNumberForClient(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, const __CFString *a7, const void *a8)
{
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v18[0] = a7;
    v16 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
  }
  else
  {
    v16 = 0;
  }
  return ABChangeHistoryGetChanges(a1, a2, a3, a4, a5, a6, a7, v16, a8);
}

void *ABChangeHistoryGetChanges(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, const __CFString *a7, uint64_t a8, const void *a9)
{
  uint64_t RecordID;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFString *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  const __CFArray *v43;
  const __CFArray *v44;
  __CFString *v45;
  void *v46;
  CFIndex Count;
  CFIndex v48;
  CFIndex v49;
  uint64_t v50;
  sqlite3_stmt *ValueAtIndex;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  const void *v56;
  CFTypeRef v57;
  void *v58;
  const void *v59;
  void *v60;
  const void *v61;
  const __CFArray *v62;
  CFIndex v63;
  __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const __CFString *v74;
  const __CFString *v75;
  const __CFString *v76;
  const __CFString *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __CFString *v83;
  CFTypeRef cf2;
  const __CFArray *v85;
  const __CFArray *v86;
  const __CFArray *v87;
  int v88;
  __CFArray *v89;
  id v91;
  uint64_t v92;
  uint64_t SequenceNumber;
  uint64_t v94;
  const __CFString *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  char *CString;
  _QWORD v100[5];
  int v101;
  _QWORD v102[5];
  int v103;
  unsigned int v104;
  _QWORD v105[5];
  int v106;
  int v107;
  unsigned int v108;
  _QWORD v109[5];
  int v110;
  int v111;
  unsigned int v112;
  __CFString *v113;
  __CFString *v114;
  __CFString *v115;
  __CFString *v116;
  __CFString *v117;
  __CFString *v118;
  CFArrayRef theArray;
  __CFString *v120;
  __CFString *v121;
  CFArrayRef v122;
  __CFString *v123;
  __CFString *v124;
  __CFString *v125;
  int v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __CFString *v134;
  _QWORD v135[3];

  v135[1] = *MEMORY[0x1E0C80C00];
  v98 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 13);
  v127 = 0;
  if (a7)
  {
    CString = (char *)_getCString(a7, &v127);
    if (a9)
    {
LABEL_3:
      RecordID = ABRecordGetRecordID(a9);
      goto LABEL_6;
    }
  }
  else
  {
    CString = 0;
    if (a9)
      goto LABEL_3;
  }
  RecordID = 0xFFFFFFFFLL;
LABEL_6:
  v97 = a2;
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      v95 = ABLogStringForBool(a4 & 1);
      v17 = ABLogStringForBool((a4 >> 1) & 1);
      v18 = a5;
      a5 = RecordID;
      v19 = a1;
      v20 = a7;
      v21 = a6;
      v22 = ABLogStringForBool((a4 >> 2) & 1);
      v77 = ABLogStringForBool((a4 >> 3) & 1);
      v78 = ABLogStringForStringArray(a3);
      v75 = v17;
      v76 = v22;
      a6 = v21;
      a7 = v20;
      a1 = v19;
      RecordID = a5;
      LODWORD(a5) = v18;
      v73 = a6;
      v74 = v95;
      v71 = v97;
      v72 = v18;
      v70 = RecordID;
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 715, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i, compressChanges = %@, unifyResults = %@, linkingResults = %@, meCardResults = %@, changeKeys = %@"), v23, v24, v25, (uint64_t)a7);
    }
    v96 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 1000);
    if ((a4 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
    v96 = 0;
    if ((a4 & 1) == 0)
      goto LABEL_13;
  }
  if ((objc_msgSend(a3, "containsObject:", CFSTR("RecordGUIDs")) & 1) == 0)
  {
    v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", a3);
    objc_msgSend(v26, "addObject:", CFSTR("RecordGUIDs"));
    if ((a4 & 2) == 0)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_13:
  v26 = 0;
  if ((a4 & 2) == 0)
    goto LABEL_20;
LABEL_16:
  if ((objc_msgSend(a3, "containsObject:", CFSTR("PersonLinks")) & 1) == 0)
  {
    if (!v26)
      v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", a3);
    objc_msgSend(v26, "addObject:", CFSTR("PersonLinks"));
  }
LABEL_20:
  if ((a4 & 4) != 0
    && (!objc_msgSend(a3, "containsObject:", CFSTR("LinkToPersonUUIDs"))
     || (objc_msgSend(a3, "containsObject:", CFSTR("PersonLinkUUIDs")) & 1) == 0))
  {
    if (!v26)
      v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", a3);
    objc_msgSend(v26, "addObject:", CFSTR("LinkToPersonUUIDs"));
    objc_msgSend(v26, "addObject:", CFSTR("PersonLinkUUIDs"));
  }
  if ((a4 & 8) != 0 && (objc_msgSend(a3, "containsObject:", CFSTR("RecordGUIDs")) & 1) == 0)
  {
    v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", a3);
    objc_msgSend(v26, "addObject:", CFSTR("RecordGUIDs"));
  }
  if (v26)
    a3 = (void *)objc_msgSend(v26, "allObjects");
  CPRecordStoreGetDatabase();
  v92 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  v126 = 0;
  v27 = CPSqliteConnectionStatementForSQL();
  if (!v27)
  {
    v33 = v97;
    goto LABEL_58;
  }
  v28 = v27;
  sqlite3_bind_text(*(sqlite3_stmt **)(v27 + 8), 1, CString, -1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 2, RecordID);
  v29 = CPSqliteStatementIntegerResult();
  v88 = RecordID;
  if (IsRunningInExchangesyncd_onceToken != -1)
    dispatch_once(&IsRunningInExchangesyncd_onceToken, &__block_literal_global_10);
  RecordID = a1;
  v30 = a7;
  if (IsRunningInExchangesyncd_isRunningInExchangesyncd == 1)
  {
    v31 = a6;
    v32 = (_DWORD)a5 == -1 || (int)v29 <= (int)a5;
LABEL_45:
    v34 = !v32;
    goto LABEL_48;
  }
  if ((_DWORD)a5 != -1 || (_DWORD)v29 != -1)
  {
    v31 = a6;
    v32 = (int)a5 <= 0 || (int)v29 <= (int)a5;
    goto LABEL_45;
  }
  v31 = a6;
  v34 = 1;
LABEL_48:
  objc_msgSend(v98, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v34), CFSTR("ChangesTruncated"));
  if (ABLogChangeHistory())
    objc_msgSend(v96, "appendFormat:", CFSTR("    %@ = %@\n"), CFSTR("ChangesTruncated"), ABLogStringForBool(v34));
  CPSqliteStatementReset();
  LODWORD(a6) = v31;
  a7 = v30;
  a1 = RecordID;
  LODWORD(RecordID) = v88;
  if ((v34 & 1) != 0)
  {
    v33 = v97;
    v35 = v98;
    MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = SequenceNumber;
    v37 = v96;
    goto LABEL_117;
  }
  v33 = v97;
  if ((_DWORD)a5 == -1 && (_DWORD)v29 != -1)
  {
    if (ABLogChangeHistory() && ABDiagnosticsEnabled())
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 760, 0, (uint64_t)CFSTR("using latest consumed sequenceNumber = %i"), v38, v39, v40, v29);
    LODWORD(a5) = v29;
  }
LABEL_58:
  v124 = 0;
  v125 = 0;
  v123 = 0;
  v121 = 0;
  v122 = 0;
  theArray = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  if (v33 == 2)
  {
    MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = ABCDBContextGetMultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer(*(_QWORD *)(a1 + 16), RecordID, a5, CString, (__CFArray **)&v125, (__CFArray **)&v118, (__CFArray **)&v117, &theArray, (CFMutableArrayRef *)&v116);
    if ((a4 & 1) == 0)
    {
LABEL_112:
      v46 = 0;
      goto LABEL_113;
    }
  }
  else
  {
    if ((_DWORD)RecordID == -1)
    {
      if ((_DWORD)a6 == -1)
      {
        if (a7)
        {
          v102[0] = MEMORY[0x1E0C809B0];
          v102[1] = 3221225472;
          v102[2] = __ABChangeHistoryGetChanges_block_invoke_3;
          v102[3] = &__block_descriptor_48_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v102[4] = CString;
          v103 = a5;
          v104 = v33;
          v41 = v102;
        }
        else
        {
          v100[0] = MEMORY[0x1E0C809B0];
          v100[1] = 3221225472;
          v100[2] = __ABChangeHistoryGetChanges_block_invoke_4;
          v100[3] = &__block_descriptor_44_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v101 = a5;
          v100[4] = a8;
          v41 = v100;
        }
      }
      else
      {
        v105[0] = MEMORY[0x1E0C809B0];
        v105[1] = 3221225472;
        v105[2] = __ABChangeHistoryGetChanges_block_invoke_2;
        v105[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
        v106 = a5;
        v107 = a6;
        v105[4] = CString;
        v108 = v33;
        v41 = v105;
      }
    }
    else
    {
      v109[0] = MEMORY[0x1E0C809B0];
      v109[2] = __ABChangeHistoryGetChanges_block_invoke;
      v109[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
      v109[1] = 3221225472;
      v110 = RecordID;
      v111 = a5;
      v109[4] = CString;
      v112 = v33;
      v41 = v109;
    }
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    if (objc_msgSend(a3, "containsObject:", CFSTR("RecordGUIDs")))
    {
      *(_QWORD *)&v131 = "guid";
      *(_QWORD *)&v128 = &theArray;
      v42 = 1;
    }
    else
    {
      v42 = 0;
    }
    if (objc_msgSend(a3, "containsObject:", CFSTR("ExternalIDs")))
    {
      *(_QWORD *)((unint64_t)&v131 | (8 * v42)) = "ExternalIdentifier";
      *(_QWORD *)((unint64_t)&v128 & 0xFFFFFFFFFFFFFFF7 | (8 * (v42++ & 1))) = &v121;
    }
    if (!v33)
    {
      if (objc_msgSend(a3, "containsObject:", CFSTR("ImagesChanged")))
      {
        *((_QWORD *)&v131 + v42) = "Image";
        *((_QWORD *)&v128 + v42++) = &v120;
      }
      if (objc_msgSend(a3, "containsObject:", CFSTR("PersonLinks")))
      {
        *((_QWORD *)&v131 + v42) = "PersonLink";
        *((_QWORD *)&v128 + v42++) = &v115;
      }
      if (objc_msgSend(a3, "containsObject:", CFSTR("LinkToPersonUUIDs")))
      {
        *((_QWORD *)&v131 + v42) = "LinkToPersonUUID";
        *((_QWORD *)&v128 + v42++) = &v114;
      }
      if (objc_msgSend(a3, "containsObject:", CFSTR("PersonLinkUUIDs")))
      {
        *((_QWORD *)&v131 + v42) = "PersonLinkUUID";
        *((_QWORD *)&v128 + v42) = &v113;
      }
    }
    ABRegulatoryLogReadContactsData(a1);
    objc_msgSend(a3, "containsObject:", CFSTR("ChangeTableRowIDs"));
    objc_msgSend(a3, "containsObject:", CFSTR("SequenceNumbers"));
    v81 = *((_QWORD *)&v130 + 1);
    v82 = 0;
    v79 = v130;
    v80 = *((_QWORD *)&v133 + 1);
    v77 = (const __CFString *)*((_QWORD *)&v129 + 1);
    v78 = (id)v133;
    v75 = (const __CFString *)v129;
    v76 = (const __CFString *)*((_QWORD *)&v132 + 1);
    v73 = *((_QWORD *)&v128 + 1);
    v74 = (const __CFString *)v132;
    v71 = v128;
    v72 = *((_QWORD *)&v131 + 1);
    v69 = v41;
    v70 = v131;
    CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithOrderAndBindBlockAndProperties();
    MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = SequenceNumber;
    if ((a4 & 1) == 0)
      goto LABEL_112;
  }
  v43 = theArray;
  if (!theArray)
    goto LABEL_112;
  v44 = (const __CFArray *)v124;
  v45 = v120;
  v85 = (const __CFArray *)v114;
  v86 = (const __CFArray *)v115;
  if (CFArrayGetCount(theArray) < 1)
    goto LABEL_112;
  v83 = v45;
  v94 = MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer;
  v46 = (void *)objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
  v89 = v43;
  v91 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  Count = CFArrayGetCount(v43);
  if (Count >= 1)
  {
    v48 = Count;
    v49 = 0;
    cf2 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
    v50 = -1;
    v87 = v44;
    do
    {
      ValueAtIndex = (sqlite3_stmt *)CFArrayGetValueAtIndex(v44, v49);
      v52 = (int)ValueAtIndex;
      v53 = (_DWORD)ValueAtIndex - 6;
      if ((a4 & 2) == 0 && v53 >= 0xFFFFFFFD || (a4 & 4) == 0 && v53 < 4)
        goto LABEL_93;
      if ((_DWORD)ValueAtIndex != 10)
      {
        if ((a4 & 2) != 0 && (_DWORD)ValueAtIndex == 1)
        {
          ValueAtIndex = (sqlite3_stmt *)CFArrayGetValueAtIndex(v86, v49);
          v55 = (int)ValueAtIndex;
          if ((_DWORD)ValueAtIndex != -1)
          {
            ValueAtIndex = (sqlite3_stmt *)CPSqliteDatabaseStatementForReading();
            if (ValueAtIndex)
            {
              ValueAtIndex = (sqlite3_stmt *)*((_QWORD *)ValueAtIndex + 1);
              if (ValueAtIndex)
              {
                sqlite3_bind_int(ValueAtIndex, 1, v55);
                v56 = (const void *)CPSqliteStatementCopyStringResult();
                if (v56)
                {
                  v57 = CFAutorelease(v56);
                  ValueAtIndex = (sqlite3_stmt *)CPSqliteStatementReset();
                  if (v57)
                  {
                    CFArraySetValueAtIndex(v89, v49, v57);
                    CFArraySetValueAtIndex(v44, v49, (const void *)4);
                  }
                }
                else
                {
                  ValueAtIndex = (sqlite3_stmt *)CPSqliteStatementReset();
                }
              }
            }
          }
        }
        v58 = (void *)MEMORY[0x1A1ACC34C](ValueAtIndex);
        v59 = CFArrayGetValueAtIndex(v89, v49);
        v135[0] = v59;
        v60 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v135, 1);
        if ((a4 & 4) != 0 && v52 == 6)
        {
          v61 = CFArrayGetValueAtIndex(v85, v49);
          if (!CFEqual(v61, cf2))
          {
            *(_QWORD *)&v128 = v59;
            *((_QWORD *)&v128 + 1) = v61;
            v60 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v128, 2);
          }
        }
        *(_QWORD *)&v131 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v131 + 1) = 3221225472;
        *(_QWORD *)&v132 = ___collateIndexByGuids_block_invoke;
        *((_QWORD *)&v132 + 1) = &unk_1E3CA41C8;
        *(_QWORD *)&v133 = v91;
        *((_QWORD *)&v133 + 1) = v49;
        objc_msgSend(v60, "_cn_each:", &v131, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
        objc_autoreleasePoolPop(v58);
        v54 = v50;
        v44 = v87;
        goto LABEL_94;
      }
      if ((a4 & 8) != 0)
      {
        v54 = v49;
        if (v50 != -1)
        {
          objc_msgSend(v46, "addIndex:", v50);
          v54 = v49;
        }
      }
      else
      {
LABEL_93:
        objc_msgSend(v46, "addIndex:", v49, v69);
        v54 = v50;
      }
LABEL_94:
      ++v49;
      v50 = v54;
    }
    while (v48 != v49);
  }
  *(_QWORD *)&v131 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v131 + 1) = 3221225472;
  *(_QWORD *)&v132 = ___filterAndCoalesceChangeResults_block_invoke;
  *((_QWORD *)&v132 + 1) = &unk_1E3CA41A0;
  *(_QWORD *)&v133 = v46;
  *((_QWORD *)&v133 + 1) = v44;
  v134 = v83;
  objc_msgSend(v91, "_cn_each:", &v131, v69);

  v33 = v97;
  MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = v94;
LABEL_113:
  v35 = v98;
  v37 = v96;
  if (v122 && CFArrayGetCount(v122) >= 1)
  {
    v62 = v122;
    v63 = CFArrayGetCount(v122);
    MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = (uint64_t)CFArrayGetValueAtIndex(v62, v63 - 1);
  }
  _addResultToChanges(v125, (uint64_t)CFSTR("RecordIDs"), a3, v46, v98, v96, 1);
  _addResultToChanges(v124, (uint64_t)CFSTR("EventTypes"), a3, v46, v98, v96, 1);
  _addResultToChanges(v123, (uint64_t)CFSTR("ChangeTableRowIDs"), a3, v46, v98, v96, 1);
  _addResultToChanges((__CFString *)v122, (uint64_t)CFSTR("SequenceNumbers"), a3, v46, v98, v96, 1);
  _addResultToChanges(v121, (uint64_t)CFSTR("ExternalIDs"), a3, v46, v98, v96, 0);
  _addResultToChanges(v120, (uint64_t)CFSTR("ImagesChanged"), a3, v46, v98, v96, 1);
  _addResultToChanges((__CFString *)theArray, (uint64_t)CFSTR("RecordGUIDs"), a3, v46, v98, v96, 0);
  _addResultToChanges(v118, (uint64_t)CFSTR("PropertyIDs"), a3, v46, v98, v96, 1);
  _addResultToChanges(v117, (uint64_t)CFSTR("MultiValueIdentifiers"), a3, v46, v98, v96, 1);
  _addResultToChanges(v116, (uint64_t)CFSTR("MultiValueGUIDs"), a3, v46, v98, v96, 0);
  _addResultToChanges(v115, (uint64_t)CFSTR("PersonLinks"), a3, v46, v98, v96, 1);
  _addResultToChanges(v114, (uint64_t)CFSTR("LinkToPersonUUIDs"), a3, v46, v98, v96, 0);
  _addResultToChanges(v113, (uint64_t)CFSTR("PersonLinkUUIDs"), a3, v46, v98, v96, 0);
LABEL_117:
  objc_msgSend(v35, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer, v69), CFSTR("LatestSequenceNumber"));
  if (ABLogChangeHistory())
  {
    objc_msgSend(v37, "appendFormat:", CFSTR("    %@ = %i"), CFSTR("LatestSequenceNumber"), MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer);
    if (ABDiagnosticsEnabled())
    {
      _dumpTableWithConnection(v92, (uint64_t)CFSTR("ClientCursor"));
      _dumpTableWithConnection(v92, (uint64_t)CFSTR("ClientCursorConsumed"));
      _dumpTableWithConnection(v92, (uint64_t)CFSTR("ClientSequence"));
      if (v33 > 2)
        v64 = 0;
      else
        v64 = off_1E3CA4210[v33];
      _dumpTableWithConnection(v92, (uint64_t)v64);
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 909, 0, (uint64_t)CFSTR(">> changes = (\n%@\n) \n%@\n%@\n%@\n%@"), v65, v66, v67, (uint64_t)v37);
    }
  }

  if (v127)
    free(CString);
  return v35;
}

uint64_t IsRunningInExchangesyncd()
{
  if (IsRunningInExchangesyncd_onceToken != -1)
    dispatch_once(&IsRunningInExchangesyncd_onceToken, &__block_literal_global_10);
  return IsRunningInExchangesyncd_isRunningInExchangesyncd;
}

void _addResultToChanges(__CFString *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, int a7)
{
  __CFString *v12;
  __CFString *v13;

  v13 = a1;
  if (a1)
  {
    v12 = a1;
    if (objc_msgSend(a3, "containsObject:", a2))
    {
      if (objc_msgSend(a4, "count"))
        -[__CFString removeObjectsAtIndexes:](v12, "removeObjectsAtIndexes:", a4);
      objc_msgSend(a5, "setObject:forKeyedSubscript:", v12, a2);
      if (ABLogChangeHistory())
      {
        if (a7)
          v12 = (__CFString *)ABLogStringForIntArrayPtr((void **)&v13);
        objc_msgSend(a6, "appendFormat:", CFSTR("    %@ = %@\n"), a2, v12);
        v12 = v13;
      }
    }
    CFRelease(v12);
  }
}

uint64_t _entityChangesExistWithSequenceNumberAfterRecordID(uint64_t a1, unsigned int a2, int a3, int a4)
{
  __CFString *v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  if (a2 > 2)
    v6 = 0;
  else
    v6 = off_1E3CA4210[a2];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT COUNT(*) FROM (SELECT NULL FROM %@ WHERE sequence_number = ? AND record > ? LIMIT 1);"),
    v6);
  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    v8 = result;
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a4);
    v9 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
    return v9 > 0;
  }
  return result;
}

void _clearChangesForClient(uint64_t a1, unsigned int a2, int a3, int a4, const __CFString *a5, int a6)
{
  uint64_t v9;
  uint64_t WriterConnection;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  UInt8 *CString;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  sqlite3_stmt *v31;
  double Current;
  _BOOL4 v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  LODWORD(v9) = a3;
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)");
  if (WriterConnection)
  {
    v13 = WriterConnection;
    if (ABLogChangeHistory())
    {
      v14 = ABDiagnosticsEnabled();
      if (a2 == -1)
      {
        if (v14)
        {
          v43 = _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientCursor"));
          _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientCursorConsumed"));
          _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientSequence"));
          _dumpTableWithConnection(v13, (uint64_t)CFSTR("ABPersonChanges"));
          _dumpTableWithConnection(v13, (uint64_t)CFSTR("ABGroupChanges"));
          _dumpTableWithConnection(v13, (uint64_t)CFSTR("ABPersonMultiValueDeletes"));
          _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 969, 0, (uint64_t)CFSTR("Tables before clear changes:\n%@\n%@\n%@\n%@\n%@\n%@"), v17, v18, v19, v43);
        }
      }
      else if (v14)
      {
        v15 = _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientCursor"));
        _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientCursorConsumed"));
        _dumpTableWithConnection(v13, (uint64_t)CFSTR("ClientSequence"));
        if (a2 > 2)
          v16 = 0;
        else
          v16 = off_1E3CA4210[a2];
        _dumpTableWithConnection(v13, (uint64_t)v16);
        _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 975, 0, (uint64_t)CFSTR("Tables before clear changes:\n%@\n%@\n%@\n%@"), v20, v21, v22, v15);
      }
    }
    if (((a4 | v9) & 0x80000000) == 0)
    {
      if (_entityChangesExistWithSequenceNumberAfterRecordID(v13, 0, v9, a4))
      {
        v9 = (v9 - 1);
        if (ABLogChangeHistory())
        {
          if (ABDiagnosticsEnabled())
            _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 985, 0, (uint64_t)CFSTR("will clear up to previous sequenceNumber = %i"), v23, v24, v25, v9);
        }
      }
    }
    v44 = 0;
    CString = _getCString(a5, &v44);
    v27 = CPSqliteConnectionStatementForSQL();
    if (v27)
    {
      v28 = v27;
      sqlite3_bind_text(*(sqlite3_stmt **)(v27 + 8), 1, (const char *)CString, -1, 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 2, a6);
      sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 3, v9);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    v29 = CPSqliteConnectionStatementForSQL();
    if (v29)
    {
      v30 = v29;
      v31 = *(sqlite3_stmt **)(v29 + 8);
      Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v31, 1, Current);
      sqlite3_bind_int(*(sqlite3_stmt **)(v30 + 8), 2, v9);
      sqlite3_bind_text(*(sqlite3_stmt **)(v30 + 8), 3, (const char *)CString, -1, 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(v30 + 8), 4, a6);
      sqlite3_bind_text(*(sqlite3_stmt **)(v30 + 8), 5, (const char *)CString, -1, 0);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    _commitWriterConnection(v13, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)");
    if (v44)
      free(CString);
    if (ABLogChangeHistory())
    {
      v33 = ABDiagnosticsEnabled();
      if (a2 == -1)
      {
        if (v33)
        {
          v36 = _dumpTable(a1, (uint64_t)CFSTR("ClientCursor"));
          _dumpTable(a1, (uint64_t)CFSTR("ClientCursorConsumed"));
          _dumpTable(a1, (uint64_t)CFSTR("ClientSequence"));
          _dumpTable(a1, (uint64_t)CFSTR("ABPersonChanges"));
          _dumpTable(a1, (uint64_t)CFSTR("ABGroupChanges"));
          _dumpTable(a1, (uint64_t)CFSTR("ABPersonMultiValueDeletes"));
          _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 1029, 0, (uint64_t)CFSTR("Tables after clear changes:\n%@\n%@\n%@\n%@\n%@\n%@"), v37, v38, v39, v36);
        }
      }
      else if (v33)
      {
        v34 = _dumpTable(a1, (uint64_t)CFSTR("ClientCursor"));
        _dumpTable(a1, (uint64_t)CFSTR("ClientCursorConsumed"));
        _dumpTable(a1, (uint64_t)CFSTR("ClientSequence"));
        if (a2 > 2)
          v35 = 0;
        else
          v35 = off_1E3CA4210[a2];
        _dumpTable(a1, (uint64_t)v35);
        _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 1035, 0, (uint64_t)CFSTR("Tables after clear changes:%@\n%@\n%@\n%@"), v40, v41, v42, v34);
      }
    }
  }
}

void ABChangeHistoryClearChangesUpToSequenceNumberForClient(uint64_t a1, int a2, const __CFString *a3, ABRecordRef record)
{
  ABRecordID RecordID;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (record)
    RecordID = ABRecordGetRecordID(record);
  else
    RecordID = -1;
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearChangesUpToSequenceNumberForClient(ABAddressBookRef, int, CFStringRef, ABRecordRef)", 1044, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i, sequenceNumber = %i"), v8, v9, v10, (uint64_t)a3);
  _clearChangesForClient(a1, 0xFFFFFFFF, a2, -1, a3, RecordID);
}

void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(uint64_t a1, unsigned int a2, int a3, int a4, const __CFString *a5, ABRecordRef record)
{
  ABRecordID RecordID;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (record)
    RecordID = ABRecordGetRecordID(record);
  else
    RecordID = -1;
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, ABRecordRef)", 1053, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i"), v12, v13, v14, (uint64_t)a5);
  _clearChangesForClient(a1, a2, a3, a4, a5, RecordID);
}

uint64_t _latestConsumedSequenceNumberForClient(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  UInt8 *CString;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v10 = 0;
  CString = _getCString(a2, &v10);
  v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    v8 = v7;
    sqlite3_bind_text(*(sqlite3_stmt **)(v7 + 8), 1, (const char *)CString, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
    a4 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  if (v10)
    free(CString);
  return a4;
}

uint64_t ABChangeHistoryGetLatestConsumedSequenceNumberForClient(int a1, const __CFString *a2, ABRecordRef record)
{
  ABRecordID RecordID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (record)
    RecordID = ABRecordGetRecordID(record);
  else
    RecordID = -1;
  CPRecordStoreGetDatabase();
  v5 = CPSqliteDatabaseConnectionForWriting();
  v6 = _latestConsumedSequenceNumberForClient(v5, a2, RecordID, 0xFFFFFFFFLL);
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
    _ABLog2(6, (uint64_t)"int ABChangeHistoryGetLatestConsumedSequenceNumberForClient(ABAddressBookRef, CFStringRef, ABRecordRef)", 1094, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i\n>> latestConsumedSequenceNumber = %i"), v7, v8, v9, (uint64_t)a2);
  return v6;
}

void ABChangeHistoryClearEntityChangeTableRowIDsForClient(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFString *a4, ABRecordRef record)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WriterConnection;
  uint64_t v13;
  UInt8 *CString;
  __int128 **v15;
  __int128 *v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  int v24;
  int ValueAtIndex;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const __CFString *v30;
  const __CFString *v31;
  ABRecordRef v32;
  uint64_t v33;
  uint64_t RecordID;
  char v35;
  CFArrayRef theArray;

  theArray = a3;
  if (record)
    RecordID = ABRecordGetRecordID(record);
  else
    RecordID = 0xFFFFFFFFLL;
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
  {
    v29 = a2;
    v30 = ABLogStringForIntArrayPtr((void **)&theArray);
    v28 = RecordID;
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)", 1130, 0, (uint64_t)CFSTR("clientIdentifier = %@, storeID = %i, entityType = %i, changeTableRowIDs = %@"), v9, v10, v11, (uint64_t)a4);
  }
  if (a2 >= 2)
    ABChangeHistoryClearEntityChangeTableRowIDsForClient_cold_1();
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
  if (WriterConnection)
  {
    v13 = WriterConnection;
    v35 = 0;
    CString = _getCString(a4, &v35);
    v33 = a1;
    if ((_DWORD)a2)
      v15 = (__int128 **)ABCGroupClass;
    else
      v15 = &ABCPersonClass;
    v16 = *v15;
    if (v16)
      v17 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)v16);
    else
      v17 = &stru_1E3CA4E68;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT sequence_number FROM %@Changes WHERE ROWID = ?;"),
      v17,
      v28,
      v29,
      v30);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO ClientCursorConsumed (client_identifier, store_id, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?, ?,  (SELECT record FROM %@Changes WHERE ROWID = ? LIMIT 1),  ?,  (SELECT sequence_number FROM %@Changes WHERE ROWID = ?))"), v17, v17);
    v18 = CPSqliteConnectionStatementForSQL();
    v19 = CPSqliteConnectionStatementForSQL();
    if (v18 && (v20 = v19) != 0 && theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
    {
      v22 = Count;
      v31 = a4;
      v32 = record;
      v23 = 0;
      v24 = -1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v23);
        sqlite3_bind_int(*(sqlite3_stmt **)(v18 + 8), 1, ValueAtIndex);
        v26 = CPSqliteStatementIntegerResult();
        v27 = v26;
        if (v24 <= v26)
          v24 = v26;
        CPSqliteStatementReset();
        if (v27 >= 1)
        {
          sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 1, (const char *)CString, -1, 0);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, RecordID);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 3, a2);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 4, ValueAtIndex);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 5, ValueAtIndex);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 6, ValueAtIndex);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        ++v23;
      }
      while (v22 != v23);
      _commitWriterConnection(v13, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
      if (v24 != -1)
        ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(v33, a2, v24, -1, v31, v32);
    }
    else
    {
      _commitWriterConnection(v13, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
    }
    if (v35)
      free(CString);
  }
}

void ABChangeHistoryPurgeIdleClients(uint64_t a1, int a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WriterConnection;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
    _ABLog2(6, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)", 1271, 0, (uint64_t)CFSTR("timestamp = %f, numChanges = %i"), v6, v7, v8, *(uint64_t *)&a3);
  WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
  if (WriterConnection)
  {
    v10 = WriterConnection;
    v11 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v12 = CPSqliteConnectionStatementForSQL();
    if (v12)
    {
      v13 = v12;
      sqlite3_bind_double(*(sqlite3_stmt **)(v12 + 8), 1, a3);
      sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a2);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    if (objc_msgSend(v11, "count") && (v14 = CPSqliteConnectionStatementForSQL()) != 0)
    {
      v15 = v14;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v16 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v16)
      {
        v17 = v16;
        v25 = v10;
        v18 = *(_QWORD *)v27;
        do
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v27 != v18)
              objc_enumerationMutation(v11);
            v20 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
            ABDiagnosticsEnabled();
            _ABLog2(4, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)", 1295, 0, (uint64_t)CFSTR("Purging change-tracking client %@ which has been idle since %f or is tracking all stores and is behind more more than %d changes"), v21, v22, v23, (uint64_t)v20);
            sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)objc_msgSend(v20, "cStringUsingEncoding:", 4), -1, 0);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
          v17 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        }
        while (v17);
        _commitWriterConnection(v25, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("ABChangeHistoryIdleClientWasPurgedNotification"), 0, 0, 1u);
      }
      else
      {
        _commitWriterConnection(v10, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
      }
    }
    else
    {
      _commitWriterConnection(v10, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
    }
  }
}

uint64_t _unusedClientRowHandler(uint64_t a1, void *a2)
{
  const unsigned __int8 *v3;

  v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3)
    objc_msgSend(a2, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3));
  return 0;
}

uint64_t _findSequenceNumberForAgeLimit(double a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 <= 0.0)
    return 0;
  v2 = CPSqliteConnectionStatementForSQL();
  if (!v2)
    return 0;
  sqlite3_bind_double(*(sqlite3_stmt **)(v2 + 8), 1, a1);
  v3 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v3;
}

uint64_t _findSequenceNumberForPersonChangesLimit(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < 1)
    return 0;
  v3 = CPSqliteConnectionStatementForSQL();
  if (!v3)
    return 0;
  sqlite3_bind_int(*(sqlite3_stmt **)(v3 + 8), 1, a2);
  v4 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v4;
}

uint64_t _findMinConsumedSequenceNumberForDataAccess()
{
  uint64_t v0;

  if (!CPSqliteConnectionStatementForSQL())
    return 0;
  v0 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v0;
}

void ABChangeHistoryUpdatePeakPersonCount(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex PersonCount;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  PersonCount = ABAddressBookGetPersonCount(a1);
  if ((int)PersonCount >= 1 && (int)ABAddressBookGetIntegerProperty((uint64_t)a1) < (int)PersonCount)
    ABAddressBookSetIntegerProperty((uint64_t)a1, (uint64_t)CFSTR("PeakContactCount"), PersonCount, v11, v12, v13, v14, v15, a9);
}

CFAbsoluteTime ABChangeHistoryGetDefaultAgeLimit()
{
  return CFAbsoluteTimeGetCurrent() + -2592000.0;
}

uint64_t ABChangeHistoryGetPersonChangesLimit(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v3 = 5 * CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if ((int)v3 <= (int)a2)
    return a2;
  else
    return v3;
}

uint64_t ABChangeHistoryGetSequenceNumberForClearingChanges(uint64_t a1)
{
  double v2;
  int PersonChangesLimit;

  v2 = CFAbsoluteTimeGetCurrent() + -2592000.0;
  PersonChangesLimit = ABChangeHistoryGetPersonChangesLimit(a1, 0x1F4u);
  return ABChangeHistoryGetSequenceNumberForClearingChangesWithAgeAndChangesLimits(v2, a1, PersonChangesLimit);
}

uint64_t ABChangeHistoryGetSequenceNumberForClearingChangesWithAgeAndChangesLimits(double a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int SequenceNumberForAgeLimit;
  unsigned int SequenceNumberForPersonChangesLimit;
  uint64_t v8;
  int MinConsumedSequenceNumberForDataAccess;
  unsigned int v10;

  CPRecordStoreGetDatabase();
  v5 = CPSqliteDatabaseConnectionForReading();
  SequenceNumberForAgeLimit = _findSequenceNumberForAgeLimit(a1);
  SequenceNumberForPersonChangesLimit = _findSequenceNumberForPersonChangesLimit(v5, a3);
  if ((int)SequenceNumberForAgeLimit <= (int)SequenceNumberForPersonChangesLimit)
    v8 = SequenceNumberForPersonChangesLimit;
  else
    v8 = SequenceNumberForAgeLimit;
  if ((int)v8 >= 1)
  {
    MinConsumedSequenceNumberForDataAccess = _findMinConsumedSequenceNumberForDataAccess();
    if ((int)v8 >= MinConsumedSequenceNumberForDataAccess)
      v10 = MinConsumedSequenceNumberForDataAccess;
    else
      v10 = v8;
    if (MinConsumedSequenceNumberForDataAccess <= 0)
      v8 = v8;
    else
      v8 = v10;
    if (MinConsumedSequenceNumberForDataAccess == -1)
      return 0;
  }
  return v8;
}

BOOL _performQueryToClearSequenceNumber(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  _BOOL8 v7;

  v5 = CPSqliteConnectionStatementForSQL();
  if (!v5)
    return 0;
  sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, a3);
  v6 = CPSqliteStatementPerform();
  v7 = v6 == 101;
  if (v6 != 101 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    _performQueryToClearSequenceNumber_cold_1(a1);
  CPSqliteStatementReset();
  return v7;
}

void ABChangeHistoryClearChangesToSequenceNumber(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 >= 1)
  {
    v8 = v2;
    v9 = v3;
    CPRecordStoreGetDatabase();
    v5 = CPSqliteDatabaseConnectionForWriting();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __ABChangeHistoryClearChangesToSequenceNumber_block_invoke;
    v6[3] = &__block_descriptor_44_e18_v16__0__NSString_8l;
    v6[4] = v5;
    v7 = a2;
    objc_msgSend(&unk_1E3CB97C8, "_cn_each:", v6);
  }
}

BOOL _hasClientWithIdentifier(uint64_t a1, const __CFString *a2)
{
  UInt8 *CString;
  uint64_t v4;
  int v5;
  char v7;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  v7 = 0;
  CString = _getCString(a2, &v7);
  v4 = CPSqliteConnectionStatementForSQL();
  if (v4)
  {
    sqlite3_bind_text(*(sqlite3_stmt **)(v4 + 8), 1, (const char *)CString, -1, 0);
    v5 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  else
  {
    v5 = 0;
  }
  if (v7)
    free(CString);
  return v5 > 0;
}

BOOL ABChangeHistoryHasClientWithIdentifier(uint64_t a1, CFStringRef theString)
{
  return theString && CFStringGetLength(theString) && _hasClientWithIdentifier(*(_QWORD *)(a1 + 16), theString);
}

BOOL ABChangeHistoryHasClients(uint64_t a1)
{
  return _hasClientWithIdentifier(a1, CFSTR("%"));
}

BOOL ABChangeHistoryHasSyncAgentClient(uint64_t a1)
{
  return _hasClientWithIdentifier(a1, CFSTR("com.apple.MobileSync"));
}

uint64_t ABChangeHistoryTableCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT COUNT(*) FROM (SELECT NULL FROM %@);"), a2);
  if (!CPSqliteConnectionStatementForSQL())
    return 0;
  v3 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v3;
}

void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  char HasPendingTransaction;
  uint64_t WriterConnection;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *ValueAtIndex;
  ABRecordType RecordType;
  ABRecordRef v15;
  const void *v16;
  ABRecordID v17;
  void *v18;
  void *v19;
  int IntValue;
  ABRecordID v21;
  NSObject *v22;
  const void *v23;
  ABRecordRef v24;
  ABRecordID RecordID;
  ABRecordID v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  const __CFString *v37;
  int v38;
  int property;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint8_t buf[4];
  ABRecordID v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  ABRecordID v49;
  __int16 v50;
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  HasPendingTransaction = ABAddressBookHasPendingTransaction();
  v42 = a1;
  if ((HasPendingTransaction & 1) != 0)
  {
    CPRecordStoreGetDatabase();
    WriterConnection = CPSqliteDatabaseConnectionForWriting();
  }
  else
  {
    WriterConnection = _getWriterConnection(*(_QWORD *)(a1 + 16), (uint64_t)"void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)");
  }
  v8 = WriterConnection;
  if (WriterConnection)
  {
    v9 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v43 = CPRecordStoreGetSequenceNumber() + 1;
    if (v9)
    {
      v35 = v8;
      v36 = HasPendingTransaction;
      v37 = a3;
      Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v11 = Count;
        v12 = 0;
        v41 = kABGroupExternalIdentifierProperty;
        v40 = kABGroupInternalUUIDProperty;
        property = kABPersonExternalIdentifierProperty;
        v38 = kABPersonInternalUUIDProperty;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
          RecordType = ABRecordGetRecordType(ValueAtIndex);
          if (RecordType == 1)
          {
            v24 = ABGroupCopySource(ValueAtIndex);
            if (v24)
            {
              v16 = v24;
              RecordID = ABRecordGetRecordID(v24);
              v26 = ABRecordGetRecordID(ValueAtIndex);
              v18 = (void *)ABRecordCopyValue(ValueAtIndex, v41);
              v27 = (void *)ABRecordCopyValue(ValueAtIndex, v40);
              ABChangeHistoryInsertGroupChangeRecord(*(_QWORD *)(v42 + 16), v26, 1, v43, v18, RecordID, v27);
              v28 = ABOSLogGeneral();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109890;
                v45 = v26;
                v46 = 2114;
                v47 = v27;
                v48 = 1024;
                v49 = RecordID;
                v50 = 1024;
                v51 = v43;
                _os_log_impl(&dword_19BC4B000, v28, OS_LOG_TYPE_INFO, "Inserted change history record for group id %d (guid %{public}@) after moving to store id %d; sequence number = %d\n",
                  buf,
                  0x1Eu);
              }
              if (v27)
              {
                v23 = v27;
LABEL_20:
                CFRelease(v23);
              }
LABEL_21:
              if (v18)
                CFRelease(v18);
              CFRelease(v16);
            }
          }
          else if (!RecordType)
          {
            v15 = ABPersonCopySource(ValueAtIndex);
            if (v15)
            {
              v16 = v15;
              v17 = ABRecordGetRecordID(v15);
              v18 = (void *)ABRecordCopyValue(ValueAtIndex, property);
              v19 = (void *)ABRecordCopyValue(ValueAtIndex, v38);
              IntValue = ABRecordGetIntValue((uint64_t)ValueAtIndex, kABPersonLinkProperty);
              v21 = ABRecordGetRecordID(ValueAtIndex);
              ABChangeHistoryInsertPersonChangeRecord(*(_QWORD *)(v42 + 16), v21, 1, v43, 0, v18, v17, IntValue, v19, 0, 0);
              v22 = ABOSLogGeneral();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109890;
                v45 = v21;
                v46 = 2114;
                v47 = v19;
                v48 = 1024;
                v49 = v17;
                v50 = 1024;
                v51 = v43;
                _os_log_impl(&dword_19BC4B000, v22, OS_LOG_TYPE_INFO, "Inserted change history record for person id %d (guid %{public}@) after moving to store id %d; sequence number = %d\n",
                  buf,
                  0x1Eu);
              }
              if (v19)
              {
                v23 = v19;
                goto LABEL_20;
              }
              goto LABEL_21;
            }
          }
          ++v12;
        }
        while (v11 != v12);
      }
      CFRelease(v9);
      a3 = v37;
      HasPendingTransaction = v36;
      v8 = v35;
    }
    ABChangeHistoryAssociateSequenceNumberWithClient(0.0, v8, v43, a3);
    ABAddressBookSetIntegerProperty(v42, (uint64_t)CFSTR("__CPRecordSequenceNumber"), v43, v29, v30, v31, v32, v33, v34);
    if ((HasPendingTransaction & 1) == 0)
      _commitWriterConnection(v8, (uint64_t)"void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)");
  }
}

BOOL ABChangeHistoryInsertPersonChangeRecordIntoAddressBook(_BOOL8 result, int a2, int a3, int a4, int a5, void *a6, int a7, int a8, void *a9)
{
  if (result)
    return ABChangeHistoryInsertPersonChangeRecord(*(_QWORD *)(result + 16), a2, a3, a4, a5, a6, a7, a8, a9, 0, 0);
  return result;
}

BOOL ABChangeHistoryInsertGroupChangeRecord(uint64_t a1, int a2, int a3, int a4, void *a5, int a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  FILE *v16;
  int v17;
  const char *v18;
  _BOOL8 v19;
  sqlite3_stmt *v20;
  int v21;
  FILE *v22;
  int v23;
  const char *v24;

  CPRecordStoreGetDatabase();
  v13 = CPSqliteDatabaseConnectionForReading();
  v14 = CPSqliteConnectionStatementForSQL();
  if (v14)
  {
    v15 = v14;
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 3, a4);
    if (a5)
      sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 4, (const char *)objc_msgSend(a5, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_bind_null(*(sqlite3_stmt **)(v15 + 8), 4);
    v20 = *(sqlite3_stmt **)(v15 + 8);
    if (a6 == -1)
      sqlite3_bind_null(v20, 5);
    else
      sqlite3_bind_int(v20, 5, a6);
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 6, (const char *)objc_msgSend(a7, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    v21 = CPSqliteStatementPerform();
    v19 = v21 == 101;
    if (v21 != 101)
    {
      v22 = (FILE *)*MEMORY[0x1E0C80C10];
      v23 = sqlite3_errcode(*(sqlite3 **)(v13 + 8));
      v24 = sqlite3_errmsg(*(sqlite3 **)(v13 + 8));
      fprintf(v22, "Error %d adding group change log entry statement: %s\n", v23, v24);
    }
    CPSqliteStatementReset();
  }
  else
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = sqlite3_errcode(*(sqlite3 **)(v13 + 8));
    v18 = sqlite3_errmsg(*(sqlite3 **)(v13 + 8));
    fprintf(v16, "Error %d preparing group changes log statement: %s\n", v17, v18);
    return 0;
  }
  return v19;
}

BOOL ABChangeHistoryInsertPersonChangeRecord(uint64_t a1, int a2, int a3, int a4, int a5, void *a6, int a7, int a8, void *a9, void *a10, void *a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  _BOOL8 v22;
  sqlite3_stmt *v23;
  int v24;

  CPRecordStoreGetDatabase();
  v18 = CPSqliteDatabaseConnectionForReading();
  v19 = CPSqliteConnectionStatementForSQL();
  if (v19)
  {
    v20 = v19;
    sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 3, a4);
    v21 = *(sqlite3_stmt **)(v20 + 8);
    if (a5)
      sqlite3_bind_int(v21, 4, 1);
    else
      sqlite3_bind_null(v21, 4);
    if (a6)
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 5, (const char *)objc_msgSend(a6, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 5);
    v23 = *(sqlite3_stmt **)(v20 + 8);
    if (a7 == -1)
      sqlite3_bind_null(v23, 6);
    else
      sqlite3_bind_int(v23, 6, a7);
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 7, a8);
    if (a9)
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 8, (const char *)objc_msgSend(a9, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 8);
    sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 9);
    if (a10)
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 10, (const char *)objc_msgSend(a10, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 10);
    if (a11)
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 11, (const char *)objc_msgSend(a11, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 11);
    v24 = CPSqliteStatementPerform();
    v22 = v24 == 101;
    if (v24 != 101 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      ABChangeHistoryInsertPersonChangeRecord_cold_2(v18);
    CPSqliteStatementReset();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      ABChangeHistoryInsertPersonChangeRecord_cold_1(v18);
    return 0;
  }
  return v22;
}

uint64_t ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  CFIndex Count;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v14;
  sqlite3_stmt *v15;
  CFIndex v16;
  int ValueAtIndex;
  int v18;
  const unsigned __int8 *v19;
  uint64_t v20;
  const unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  sqlite3_stmt *ppStmt;

  v2 = a1;
  if (a1)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      ppStmt = 0;
      CPRecordStoreGetDatabase();
      v5 = CPSqliteDatabaseConnectionForReading();
      v6 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("SELECT ROWID, StoreID, ExternalIdentifier, guid, PersonLink FROM ABPerson WHERE ROWID IN(? "));
      Count = CFArrayGetCount(theArray);
      v8 = Count;
      if (Count >= 2)
      {
        v9 = Count - 1;
        do
        {
          objc_msgSend(v6, "appendString:", CFSTR(", ? "));
          --v9;
        }
        while (v9);
      }
      objc_msgSend(v6, "appendString:", CFSTR(");"));
      if (sqlite3_prepare(*(sqlite3 **)(v5 + 8), (const char *)objc_msgSend(v6, "UTF8String"), -1, &ppStmt, 0))
      {
        return 0;
      }
      else
      {
        if (v8 >= 1)
        {
          v14 = 0;
          do
          {
            v15 = ppStmt;
            v16 = v14 + 1;
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
            sqlite3_bind_int(v15, v16, ValueAtIndex);
            v14 = v16;
          }
          while (v8 != v16);
        }
        while (1)
        {
          v18 = sqlite3_step(ppStmt);
          if (v18 != 100)
            break;
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(ppStmt, 0)));
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(ppStmt, 1)));
          v19 = sqlite3_column_text(ppStmt, 2);
          if (v19)
            v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
          else
            v20 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
          objc_msgSend(v4, "addObject:", v20);
          v21 = sqlite3_column_text(ppStmt, 3);
          if (v21)
            v22 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
          else
            v22 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
          objc_msgSend(v4, "addObject:", v22);
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(ppStmt, 4)));
        }
        if (v18 == 101)
        {
          v23 = CPRecordStoreGetSequenceNumber() + 1;
          if (objc_msgSend(v4, "count"))
          {
            v29 = 0;
            v30 = *MEMORY[0x1E0D13880];
            do
            {
              v31 = objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29), "intValue");
              v32 = objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29 + 1), "intValue");
              v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v30, objc_msgSend(v4, "objectAtIndex:", v29 + 2));
              v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v30, objc_msgSend(v4, "objectAtIndex:", v29 + 3));
              ABChangeHistoryInsertPersonChangeRecord(*(_QWORD *)(v2 + 16), v31, 1, v23, 1, v33, v32, objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29 + 4), "intValue"), v34, 0, 0);
              v29 += 5;
            }
            while (v29 < objc_msgSend(v4, "count"));
          }
          ABAddressBookSetIntegerProperty(v2, (uint64_t)CFSTR("__CPRecordSequenceNumber"), v23, v24, v25, v26, v27, v28, v35);
          v2 = 1;
        }
        else
        {
          v2 = 0;
        }
        sqlite3_finalize(ppStmt);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(ABAddressBookRef, CFArrayRef)", 1688, 0, (uint64_t)CFSTR("failed to write change history records for deleted thumbnails because we were not passed an ABAddressBookRef"), v10, v11, v12, v35);
  }
  return v2;
}

void ___filterAndCoalesceChangeResults_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v5[7];
  __int128 v6;
  _QWORD v7[3];
  uint64_t v8;

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v8 = 0;
  v8 = objc_msgSend(a3, "count");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___filterAndCoalesceChangeResults_block_invoke_2;
  v5[3] = &unk_1E3CA4178;
  v5[5] = a3;
  v5[6] = v7;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 40);
  objc_msgSend(a3, "_cn_each_reverse:", v5);
  _Block_object_dispose(v7, 8);
}

void sub_19BCAB934(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_2(uint64_t result, void *a2)
{
  uint64_t v2;
  CFIndex v3;
  unsigned int ValueAtIndex;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, _BYTE *);
  void *v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, int);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, int);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, int, _BYTE *);
  void *v34;
  uint64_t v35;
  CFIndex v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, CFIndex, int, _BYTE *);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  CFIndex v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void *);
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  if (--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 24))
  {
    v2 = result;
    v3 = objc_msgSend(a2, "longValue");
    result = objc_msgSend(*(id *)(v2 + 32), "containsIndex:", v3);
    if ((result & 1) == 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 56), v3);
      result = objc_msgSend(*(id *)(v2 + 40), "_cn_take:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) + 24));
      switch(ValueAtIndex)
      {
        case 1u:
        case 4u:
          v5 = *(_QWORD *)(v2 + 32);
          v37 = MEMORY[0x1E0C809B0];
          v38 = 3221225472;
          v39 = ___filterAndCoalesceChangeResults_block_invoke_3;
          v40 = &unk_1E3CA4100;
          v6 = *(_QWORD *)(v2 + 56);
          v7 = *(_QWORD *)(v2 + 64);
          v41 = v5;
          v42 = v7;
          v43 = v3;
          v44 = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___performBlockWithPreviousIndexes_block_invoke;
          v47 = &unk_1E3CA41F0;
          v48 = v5;
          v49 = &v37;
          v50 = v6;
          goto LABEL_12;
        case 2u:
        case 5u:
          v8 = *(_QWORD *)(v2 + 56);
          v9 = *(_QWORD *)(v2 + 32);
          v31 = MEMORY[0x1E0C809B0];
          v32 = 3221225472;
          v33 = ___filterAndCoalesceChangeResults_block_invoke_4;
          v34 = &unk_1E3CA4128;
          v35 = v9;
          v36 = v3;
          v44 = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___performBlockWithPreviousIndexes_block_invoke;
          v47 = &unk_1E3CA41F0;
          v50 = v8;
          v10 = &v31;
          goto LABEL_10;
        case 7u:
          v14 = *(_QWORD *)(v2 + 56);
          v9 = *(_QWORD *)(v2 + 32);
          v15 = MEMORY[0x1E0C809B0];
          v16 = 3221225472;
          v17 = ___filterAndCoalesceChangeResults_block_invoke_7;
          v18 = &unk_1E3CA4128;
          v19 = v9;
          v20 = v3;
          v44 = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___performBlockWithPreviousIndexes_block_invoke;
          v47 = &unk_1E3CA41F0;
          v50 = v14;
          v10 = &v15;
LABEL_10:
          v48 = v9;
          goto LABEL_11;
        case 8u:
          v11 = *(_QWORD *)(v2 + 56);
          v12 = *(_QWORD *)(v2 + 32);
          v26 = MEMORY[0x1E0C809B0];
          v27 = 3221225472;
          v28 = ___filterAndCoalesceChangeResults_block_invoke_5;
          v29 = &unk_1E3CA4150;
          v30 = v12;
          v44 = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___performBlockWithPreviousIndexes_block_invoke;
          v47 = &unk_1E3CA41F0;
          v50 = v11;
          v10 = &v26;
          goto LABEL_8;
        case 9u:
          v13 = *(_QWORD *)(v2 + 56);
          v12 = *(_QWORD *)(v2 + 32);
          v21 = MEMORY[0x1E0C809B0];
          v22 = 3221225472;
          v23 = ___filterAndCoalesceChangeResults_block_invoke_6;
          v24 = &unk_1E3CA4150;
          v25 = v12;
          v44 = MEMORY[0x1E0C809B0];
          v45 = 3221225472;
          v46 = ___performBlockWithPreviousIndexes_block_invoke;
          v47 = &unk_1E3CA41F0;
          v50 = v13;
          v10 = &v21;
LABEL_8:
          v48 = v12;
LABEL_11:
          v49 = v10;
LABEL_12:
          result = objc_msgSend((id)result, "enumerateObjectsWithOptions:usingBlock:", 2, &v44, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29,
                     v30,
                     v31,
                     v32,
                     v33,
                     v34,
                     v35,
                     v36,
                     v37,
                     v38,
                     v39,
                     v40,
                     v41,
                     v42,
                     v43);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

void ___filterAndCoalesceChangeResults_block_invoke_3(uint64_t a1, CFIndex a2, int a3, _BYTE *a4)
{
  switch(a3)
  {
    case 0:
    case 3:
      objc_msgSend(*(id *)(a1 + 32), "addIndex:", *(_QWORD *)(a1 + 48));
      *a4 = 1;
      break;
    case 1:
    case 4:
      objc_msgSend(*(id *)(a1 + 32), "addIndex:", a2);
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2) == 1)
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), *(_QWORD *)(a1 + 48), (const void *)1);
      break;
    default:
      return;
  }
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_4(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "addIndex:", a2);
  if (a3 == 3 || !a3)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "addIndex:", *(_QWORD *)(a1 + 40));
    *a4 = 1;
  }
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_5(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 8)
    return objc_msgSend(*(id *)(result + 32), "addIndex:", a2);
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_6(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 9)
    return objc_msgSend(*(id *)(result + 32), "addIndex:", a2);
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_7(uint64_t result, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v4;

  v4 = result;
  if ((a3 & 0xFFFFFFFE) == 8)
    return objc_msgSend(*(id *)(result + 32), "addIndex:", a2);
  if (a3 == 6)
  {
    objc_msgSend(*(id *)(result + 32), "addIndex:", a2);
    result = objc_msgSend(*(id *)(v4 + 32), "addIndex:", *(_QWORD *)(v4 + 40));
    *a4 = 1;
  }
  return result;
}

uint64_t ___collateIndexByGuids_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
  if (!v4)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v4, a2);
  }
  return objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", *(_QWORD *)(a1 + 40)));
}

uint64_t ___performBlockWithPreviousIndexes_block_invoke(uint64_t a1, void *a2)
{
  CFIndex v3;
  uint64_t result;

  v3 = objc_msgSend(a2, "longValue");
  result = objc_msgSend(*(id *)(a1 + 32), "containsIndex:", v3);
  if ((result & 1) == 0)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v3);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1)
{
  return sqlite3_errcode(*(sqlite3 **)(a1 + 8));
}

const char *OUTLINED_FUNCTION_4_0()
{
  uint64_t v0;

  return sqlite3_errmsg(*(sqlite3 **)(v0 + 8));
}

void sub_19BCAC4B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BCAC540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _createDictionaryFromFile(const __CFString *a1)
{
  __CFBundle *v2;
  CFURLRef v3;
  uint64_t v4;

  v2 = (__CFBundle *)_ABBundle();
  v3 = CFBundleCopyResourceURL(v2, a1, 0, 0);
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfFile:", -[__CFURL path](v3, "path"));
  CFRelease(v3);
  return v4;
}

uint64_t socialProfileURLForServiceAndUsername(void *key, void *a2)
{
  const __CFDictionary *v4;
  const void *Value;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v10;
  uint8_t buf[4];
  const void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (socialProfileURLForServiceAndUsername_onceToken != -1)
    dispatch_once(&socialProfileURLForServiceAndUsername_onceToken, &__block_literal_global_11);
  v4 = (const __CFDictionary *)socialProfileURLForServiceAndUsername_formats;
  if (!key || !socialProfileURLForServiceAndUsername_formats)
  {
LABEL_11:
    Value = CFDictionaryGetValue(v4, CFSTR("UnknownServiceURLFormat"));
    if (a2)
      goto LABEL_7;
    return 0;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)socialProfileURLForServiceAndUsername_formats, key);
  if (!Value)
  {
    v4 = (const __CFDictionary *)socialProfileURLForServiceAndUsername_formats;
    goto LABEL_11;
  }
  if (!a2)
    return 0;
LABEL_7:
  v10 = 0;
  v6 = objc_msgSend(a2, "stringByAddingPercentEncodingWithAllowedCharacters:", objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet"));
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithValidatedFormat:validFormatSpecifiers:error:", Value, CFSTR("%@"), &v10, v6);
  if (v10)
  {
    v8 = ABOSLogGeneral();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543874;
      v12 = Value;
      v13 = 2114;
      v14 = a2;
      v15 = 2114;
      v16 = v10;
      _os_log_error_impl(&dword_19BC4B000, v8, OS_LOG_TYPE_ERROR, "Error creating social profile URL from format = %{public}@, username = %{public}@, error = %{public}@", buf, 0x20u);
    }
  }
  return v7;
}

uint64_t __socialProfileURLForServiceAndUsername_block_invoke()
{
  uint64_t result;

  result = _createDictionaryFromFile(CFSTR("SocialServicesURLFormats.plist"));
  socialProfileURLForServiceAndUsername_formats = result;
  return result;
}

void *socialProfileFromURL(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  id obj;
  void *v28;
  _QWORD v29[8];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (socialProfileFromURL_onceToken != -1)
    dispatch_once(&socialProfileFromURL_onceToken, &__block_literal_global_8);
  v28 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", a3);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = (id)objc_msgSend((id)socialProfileFromURL_servicesDict, "allKeys");
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v32 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
        v14 = (void *)MEMORY[0x1A1ACC34C]();
        v30 = 0;
        v15 = (void *)objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", v13, 1, &v30);
        v16 = objc_msgSend(a1, "length");
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 3221225472;
        v29[2] = __socialProfileFromURL_block_invoke_2;
        v29[3] = &unk_1E3CA4250;
        v29[6] = a1;
        v29[7] = a4;
        v29[4] = v28;
        v29[5] = v13;
        objc_msgSend(v15, "enumerateMatchesInString:options:range:usingBlock:", a1, 0, 0, v16, v29);
        objc_autoreleasePoolPop(v14);
      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v10);
  }
  if (!objc_msgSend(v28, "objectForKey:", CFSTR("url")))
  {
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", a1);
    if (objc_msgSend(v17, "scheme"))
    {
      objc_msgSend(v28, "setObject:forKey:", a1, CFSTR("url"));
      v18 = v22;
      v19 = (uint64_t)a2;
      if (v22 || (v18 = _socialProfileUsernameFromURL((uint64_t)a1)) != 0)
        objc_msgSend(v28, "setObject:forKey:", v18, CFSTR("username"));
      if (!a2)
      {
        v19 = _socialProfileServiceFromURL((uint64_t)a1);
        if (!v19)
          goto LABEL_22;
      }
    }
    else
    {
      v19 = (uint64_t)a2;
      if (!a1 || !a2)
      {
LABEL_22:
        if (v17)

        goto LABEL_24;
      }
      objc_msgSend(v28, "setObject:forKey:", socialProfileURLForServiceAndUsername(a2, a1), CFSTR("url"));
      objc_msgSend(v28, "setObject:forKey:", a1, CFSTR("username"));
    }
    objc_msgSend(v28, "setObject:forKey:", v19, CFSTR("service"));
    goto LABEL_22;
  }
LABEL_24:
  if (v28)
  {
    if (a5)
      objc_msgSend(v28, "setObject:forKey:", a5, CFSTR("displayname"));
    if (a6)
      objc_msgSend(v28, "setObject:forKey:", a6, CFSTR("teamIdentifier"));
    if (a7)
      objc_msgSend(v28, "setObject:forKey:", a7, CFSTR("bundleIdentifiers"));
  }
  return v28;
}

uint64_t __socialProfileFromURL_block_invoke()
{
  uint64_t result;

  result = _createDictionaryFromFile(CFSTR("SocialServicesURLRegexes.plist"));
  socialProfileFromURL_servicesDict = result;
  return result;
}

uint64_t __socialProfileFromURL_block_invoke_2(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((unint64_t)objc_msgSend(a2, "numberOfRanges") >= 3)
  {
    v4 = *(void **)(a1 + 48);
    v5 = objc_msgSend(a2, "rangeAtIndex:", 2);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", objc_msgSend((id)objc_msgSend(v4, "substringWithRange:", v5, v6), "stringByRemovingPercentEncoding"), CFSTR("username"));
  }
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v7, CFSTR("identifier"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", objc_msgSend((id)socialProfileFromURL_servicesDict, "objectForKey:", *(_QWORD *)(a1 + 40)), CFSTR("service"));
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", *(_QWORD *)(a1 + 48), CFSTR("url"));
}

uint64_t _socialProfileUsernameFromURL(uint64_t a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", a1);
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", CFSTR("x-apple"))&& objc_msgSend(v1, "resourceSpecifier"))
  {
    return objc_msgSend((id)objc_msgSend(v1, "resourceSpecifier"), "stringByRemovingPercentEncoding");
  }
  else
  {
    return 0;
  }
}

uint64_t _socialProfileServiceFromURL(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", a1);
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", CFSTR("http")) & 1) == 0&& !objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", CFSTR("https"))|| !objc_msgSend(v1, "host"))
  {
    return 0;
  }
  v2 = (void *)objc_msgSend(v1, "host");
  if (objc_msgSend(v2, "hasPrefix:", CFSTR("www.")))
    return objc_msgSend(v2, "substringFromIndex:", 4);
  return (uint64_t)v2;
}

CFStringRef ABCopyPreferredNameForPerson(const void *a1)
{
  CFTypeRef v2;
  const void *v3;
  CFStringRef v4;

  v2 = ABPersonCopyPreferredLinkedPersonForName(a1);
  if (!v2)
    return ABRecordCopyCompositeName(a1);
  v3 = v2;
  v4 = ABRecordCopyCompositeName(v2);
  CFRelease(v3);
  return v4;
}

uint64_t _ABFavoritesPhoneNumbersEqualCallback(void *a1, void *a2)
{
  const void *v4;
  uint64_t v5;

  v4 = (const void *)CPPhoneNumberCopyHomeCountryCode();
  objc_msgSend(a1, "UTF8String");
  objc_msgSend(a2, "UTF8String");
  v5 = CPPhoneNumbersEqual();
  if (v4)
    CFRelease(v4);
  return v5;
}

void sub_19BCAEE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _SpeedDialListChangedExternally(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_listChangedExternally");
}

void _ABPhoneUtilitiesSetDevicePhoneNumber(CFTypeRef cf)
{
  if ((CFTypeRef)_globalPhoneNumberOverride != cf)
  {
    if (_globalPhoneNumberOverride)
      CFRelease((CFTypeRef)_globalPhoneNumberOverride);
    if (cf)
      CFRetain(cf);
    _globalPhoneNumberOverride = (uint64_t)cf;
  }
}

uint64_t (*ABPhoneUtilitiesCopyDevicePhoneNumber())(void)
{
  uint64_t (*result)(void);
  BOOL v1;

  if (_globalPhoneNumberOverride)
    return (uint64_t (*)(void))CFRetain((CFTypeRef)_globalPhoneNumberOverride);
  result = (uint64_t (*)(void))ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber;
  if (ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle)
    v1 = ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber == 0;
  else
    v1 = 1;
  if (!v1)
    return (uint64_t (*)(void))result();
  +[ABDynamicLoader loadFrameworkAtPath:andStoreHandle:bundle:](ABDynamicLoader, "loadFrameworkAtPath:andStoreHandle:bundle:", CFSTR("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony"), &ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle, 0);
  result = (uint64_t (*)(void))dlsym((void *)ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle, "CTSettingCopyMyPhoneNumber");
  ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber = result;
  if (result)
    return (uint64_t (*)(void))result();
  return result;
}

uint64_t _ABPhoneUtilitiesSetIgnoreMatchingForLostMode(uint64_t result)
{
  _ignoreMatchingForLostMode = result;
  return result;
}

void sub_19BCB17FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19BCB2024(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

const void *ABAddressBookPrimePersonContextForIdentifier(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)CPRecordCreateWithRecordID();
  v5 = v4;
  if (a3)
    ABRecordSetValue(v4, kABPersonInternalUUIDProperty, a3, 0);
  CPRecordStoreAddRecord();
  CFRelease(v5);
  return v5;
}

uint64_t ABAddressBookCopyAllPeopleForBufferPredicate(uint64_t a1, void *a2, int a3)
{
  uint64_t result;
  const __CFString *v5;

  result = 0;
  if (a1 && a2)
  {
    if (a3 == 1)
      v5 = CFSTR(" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort");
    else
      v5 = CFSTR(" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("WHERE rowid IN(%@) %@"), objc_msgSend(a2, "query"), v5);
    return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  }
  return result;
}

void sub_19BCB278C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL AppendPendingBlobData(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = objc_msgSend((id)objc_msgSend(a1, "mutableData"), "length");
  v3 = objc_msgSend(a1, "blobLength");
  v4 = v3 - objc_msgSend(a1, "blobBytesWritten");
  v5 = objc_msgSend((id)objc_msgSend(a1, "mutableData"), "length") + v4;
  v6 = objc_msgSend(a1, "maxBufferSize");
  if (v5 > v6)
  {
    if (v2 >= objc_msgSend(a1, "maxBufferSize"))
      return v5 <= v6;
    v4 = objc_msgSend(a1, "maxBufferSize") - v2;
  }
  if (v4)
  {
    objc_msgSend((id)objc_msgSend(a1, "mutableData"), "increaseLengthBy:", v4);
    sqlite3_blob_read((sqlite3_blob *)objc_msgSend(a1, "incompleteBlob"), (void *)(objc_msgSend((id)objc_msgSend(a1, "mutableData"), "mutableBytes") + v2), v4, objc_msgSend(a1, "blobBytesWritten"));
    objc_msgSend(a1, "setBlobBytesWritten:", objc_msgSend(a1, "blobBytesWritten") + v4);
  }
  if (v5 <= v6)
  {
    sqlite3_blob_close((sqlite3_blob *)objc_msgSend(a1, "incompleteBlob"));
    objc_msgSend(a1, "setIncompleteBlob:", 0);
    objc_msgSend(a1, "setBlobLength:", 0);
    objc_msgSend(a1, "setBlobBytesWritten:", 0);
  }
  return v5 <= v6;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t _ABStringByTrimmingWhiteSpace(void *a1)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet"));
}

uint64_t ABCFTSIsEnabled()
{
  return gFTSEabled;
}

uint64_t ABCFTSSetEnabled(uint64_t result)
{
  gFTSEabled = result;
  return result;
}

_QWORD *ABCFTSSetCollatorOverrideForDatabaseConnectionHandle(const void *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (result)
  {
    v4 = result;
    result = (_QWORD *)*result;
    if (result != a2)
    {
      if (result)
        result = (_QWORD *)ABCReleaseCollator((uint64_t)result);
      *v4 = a2;
    }
  }
  return result;
}

const void *ABCFTSGetCollationContextForDatabaseConnectionHandle(const void *a1)
{
  const __CFDictionary *v2;
  const void *Value;

  if (ABCFTSGetCollationContextDictionary_predicate != -1)
    dispatch_once(&ABCFTSGetCollationContextDictionary_predicate, &__block_literal_global_18);
  v2 = (const __CFDictionary *)ABCFTSGetCollationContextDictionary_collalationContextDict;
  pthread_mutex_lock(&gDictionaryMutex);
  Value = CFDictionaryGetValue(v2, a1);
  pthread_mutex_unlock(&gDictionaryMutex);
  return Value;
}

_QWORD *ABCFTSSetLocaleOverrideForDatabaseConnectionHandle(const void *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (result)
  {
    v4 = result;
    result = (_QWORD *)result[1];
    if (result != a2)
    {
      if (result)
        CFRelease(result);
      v4[1] = a2;
      return CFRetain(a2);
    }
  }
  return result;
}

uint64_t ABCFTSCollationContextFreeContextForDatabaseHandle(const void *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = (uint64_t *)ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (v2)
  {
    v3 = v2;
    v4 = *v2;
    if (v4)
      ABCReleaseCollator(v4);
    v5 = (const void *)v3[1];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v3[2];
    if (v6)
      CFRelease(v6);
    free((void *)v3[3]);
    free(v3);
  }
  return ABCFTSSetCollationContextForDatabaseConnectionHandle(a1, 0);
}

void ABCFSmartDialerFTSTokenizerPropertyMatchCollectFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  NSMapTable *v6;
  uint64_t v7;
  unsigned int *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  int v17;
  ABPropertyID v18;
  NSMapTable *v19;
  int v20;
  unsigned int v21;
  NSMapTable *table;

  if (a2 == 4)
  {
    v5 = sqlite3_value_int(a3[3]);
    v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    v7 = objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 1282, 0);
    v8 = (unsigned int *)sqlite3_value_blob(a3[1]);
    v9 = (const __CFArray *)sqlite3_value_blob(a3[2]);
    if (v6)
    {
      table = (NSMapTable *)v7;
      v19 = v6;
      v20 = v5;
      v21 = v8[1];
      if (v21)
      {
        v10 = v9;
        v11 = 0;
        v12 = *v8;
        v13 = 2;
        do
        {
          if (v12)
          {
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = v13;
            do
            {
              if (v8[v17])
              {
                if (!v15)
                {
                  v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  switch(v11)
                  {
                    case 0:
                      v18 = kABPersonFirstNameProperty;
                      break;
                    case 1:
                      v18 = kABPersonMiddleNameProperty;
                      break;
                    case 2:
                      v18 = kABPersonLastNameProperty;
                      break;
                    case 3:
                      v18 = kABPersonOrganizationProperty;
                      break;
                    case 4:
                      v18 = kABPersonNicknameProperty;
                      break;
                    default:
                      v18 = -1;
                      break;
                  }
                  NSMapInsert(table, (const void *)(v18 + 1), v15);
                }
                objc_msgSend(v15, "addObject:", CFArrayGetValueAtIndex(v10, v16));
              }
              ++v16;
              v17 += 3 * v21;
              v14 += 2;
            }
            while (v14 < v12);
          }
          ++v11;
          v13 += 3;
        }
        while (v11 != v21);
      }
      v5 = v20;
      if (table)
        NSMapInsert(v19, (const void *)v20, table);
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t ABCFFTSTokenizerCreate(int a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v9;
  __CFCharacterSet *MutableCopy;
  const __CFAllocator *v11;
  const __CFString *v12;
  const char *v13;
  CFStringRef v14;
  CFStringRef v15;
  const void *v16;
  uint64_t result;
  const void *v18;
  CFRange v19;

  v6 = sqlite3_malloc(64);
  if (!v6)
    return 7;
  v7 = v6;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  *((_QWORD *)v7 + 3) = CFCharacterSetCreateInvertedSet(0, Predefined);
  v9 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  MutableCopy = CFCharacterSetCreateMutableCopy(0, v9);
  *((_QWORD *)v7 + 4) = MutableCopy;
  if (MutableCopy)
    CFCharacterSetAddCharactersInString(MutableCopy, CFSTR("*"));
  if (a1 <= 1)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "en", 0x8000100u);
LABEL_9:
    v14 = 0;
    goto LABEL_10;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a2 + 8), 0x8000100u);
  if (a1 < 4)
    goto LABEL_9;
  v13 = *(const char **)(a2 + 24);
  if (!v13)
    goto LABEL_9;
  v14 = CFStringCreateWithCString(v11, v13, 0x8000100u);
LABEL_10:
  *((_QWORD *)v7 + 1) = CFLocaleCreate(v11, v12);
  if (v14)
    v15 = v14;
  else
    v15 = v12;
  *((_QWORD *)v7 + 2) = ABCCreateCollatorWithPreferredLocale(0, 1, v15);
  v19.location = 0;
  v19.length = 0;
  *((_QWORD *)v7 + 5) = CFStringTokenizerCreate(v11, &stru_1E3CA4E68, v19, 0x810000uLL, *((CFLocaleRef *)v7 + 1));
  *((_QWORD *)v7 + 7) = CFArrayCreateMutable(0, 2, MEMORY[0x1E0C9B378]);
  if (v12)
    CFRelease(v12);
  if (v14)
    CFRelease(v14);
  v16 = (const void *)*((_QWORD *)v7 + 3);
  if (v16)
  {
    if (*((_QWORD *)v7 + 4))
    {
      result = 0;
      *a3 = v7;
      return result;
    }
    CFRelease(v16);
  }
  v18 = (const void *)*((_QWORD *)v7 + 4);
  if (v18)
    CFRelease(v18);
  return 7;
}

uint64_t ABCFFTSTokenizerDestroy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  if (!*(_BYTE *)(a1 + 49))
  {
    v3 = *(const void **)(a1 + 8);
    if (v3)
      CFRelease(v3);
  }
  if (!*(_BYTE *)(a1 + 50))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      ABCReleaseCollator(v4);
  }
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
  sqlite3_free((void *)a1);
  return 0;
}

uint64_t ABCFFTSTokenizerOpen(uint64_t a1, char *__s, int a3, _QWORD *a4)
{
  int v5;
  _QWORD *v8;
  void *v9;
  const void *ValueAtIndex;
  uint64_t result;
  CFAllocatorRef *v12;
  const void *v13;
  const __CFLocale *v14;
  const void *v15;
  const void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  CFMutableStringRef MutableCopy;
  CFRange v22;
  CFIndex Length;
  const void *v24;
  CFRange v25;
  CFRange v26;

  v5 = a3;
  *a4 = 0;
  if (a3 < 0)
  {
    if (!__s)
      return 1;
    v5 = strlen(__s);
  }
  v8 = sqlite3_malloc(56);
  if (!v8)
    return 7;
  v9 = v8;
  v8[6] = 0;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)))
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0);
    *((_QWORD *)v9 + 6) = CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
  }
  else
  {
    *((_QWORD *)v9 + 6) = ABTokenListCreate();
  }
  v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!*(_BYTE *)(a1 + 48))
  {
    v13 = ABCFTSGetCollationContextForDatabaseConnectionHandle(*(const void **)(*(_QWORD *)a1 + 48));
    if (v13)
    {
      v14 = (const __CFLocale *)*((_QWORD *)v13 + 1);
      if (v14)
      {
        *(_BYTE *)(a1 + 49) = 1;
        v15 = *(const void **)(a1 + 8);
        if (v15)
          CFRelease(v15);
        *(_QWORD *)(a1 + 8) = v14;
        v16 = *(const void **)(a1 + 40);
        if (v16)
          CFRelease(v16);
        v25.location = 0;
        v25.length = 0;
        *(_QWORD *)(a1 + 40) = CFStringTokenizerCreate(*v12, &stru_1E3CA4E68, v25, 0x810000uLL, v14);
      }
    }
    v17 = (uint64_t *)ABCFTSGetCollationContextForDatabaseConnectionHandle(*(const void **)(*(_QWORD *)a1 + 48));
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        v19 = *(_QWORD *)(a1 + 16);
        if (v19)
          ABCReleaseCollator(v19);
        *(_QWORD *)(a1 + 16) = v18;
        *(_BYTE *)(a1 + 50) = 1;
      }
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v20 = CFStringCreateWithBytes(*v12, (const UInt8 *)__s, v5, 0x8000100u, 0);
  *((_QWORD *)v9 + 1) = v20;
  if (v20)
  {
    MutableCopy = CFStringCreateMutableCopy(0, 0, v20);
    CFStringTrimWhitespace(MutableCopy);
    if (CFStringHasPrefix(MutableCopy, CFSTR("##&")))
    {
      *((_DWORD *)v9 + 4) = 1;
      v22 = CFStringFind((CFStringRef)*((_QWORD *)v9 + 1), CFSTR("##&"), 0);
      *((_QWORD *)v9 + 5) = v22.length + v22.location;
    }
    else
    {
      *((_DWORD *)v9 + 4) = 0;
    }
    CFRelease(MutableCopy);
    Length = CFStringGetLength(*((CFStringRef *)v9 + 1));
    if (*((_DWORD *)v9 + 4))
    {
      v26.length = Length;
      v26.location = 0;
      CFStringTokenizerSetString(*(CFStringTokenizerRef *)(a1 + 40), *((CFStringRef *)v9 + 1), v26);
    }
    else
    {
      ABTokenListPopulateFromString(*((_QWORD *)v9 + 6), *(__CFStringTokenizer **)(a1 + 40), *(_QWORD *)(a1 + 16), *((const __CFString **)v9 + 1), 1, 1, 0);
    }
    v24 = (const void *)*((_QWORD *)v9 + 1);
    if (v24)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        result = 0;
        *a4 = v9;
        return result;
      }
      CFRelease(v24);
    }
  }
  sqlite3_free(v9);
  return 1;
}

uint64_t ABCFFTSTokenizerClose(CFTypeRef *a1)
{
  CFMutableArrayRef *v2;
  void *v3;

  v2 = (CFMutableArrayRef *)*a1;
  CFRelease(a1[1]);
  CFArrayAppendValue(v2[7], a1[6]);
  ABTokenListRemoveAllTokens((uint64_t)a1[6]);
  CFRelease(a1[6]);
  v3 = (void *)a1[4];
  if (v3)
    free(v3);
  sqlite3_free(a1);
  return 0;
}

uint64_t ABCFFTSTokenizerNext(uint64_t *a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11;
  int v12;
  CFIndex v13;
  CFIndex location;
  CFRange v15;
  CFRange v16;
  CFIndex v17;
  const __CFString *v18;
  CFIndex Length;
  const __CFString *v20;
  void *v21;
  const char *v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  CFRange v29;
  int64_t v30;
  CFIndex v31;
  CFIndex usedBufLen;
  CFRange result;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;

  v11 = *a1;
  *a3 = 0;
  v12 = *((_DWORD *)a1 + 4);
  if (v12)
  {
    v28 = a6;
    if (v12 == 1)
    {
      v13 = a1[5];
      do
      {
        v35.length = CFStringGetLength((CFStringRef)a1[1]) - a1[5];
        result.location = 0;
        result.length = 0;
        v31 = 0;
        usedBufLen = 0;
        v30 = 0;
        v35.location = v13;
        if (!CFStringFindCharacterFromSet((CFStringRef)a1[1], *(CFCharacterSetRef *)(v11 + 24), v35, 0, &result))
          return 101;
        v34.length = result.location;
        v34.location = 0;
        CFStringGetBytes((CFStringRef)a1[1], v34, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
        location = result.location;
        *a4 = usedBufLen;
        v15.length = CFStringGetLength((CFStringRef)a1[1]) - location;
        if (v15.length >= 1
          && (v15.location = location,
              CFStringFindCharacterFromSet((CFStringRef)a1[1], *(CFCharacterSetRef *)(v11 + 32), v15, 0, &result)))
        {
          v16.length = result.location;
          v17 = result.location - v13;
          v18 = (const __CFString *)a1[1];
        }
        else
        {
          Length = CFStringGetLength((CFStringRef)a1[1]);
          v17 = Length - result.location;
          v18 = (const __CFString *)a1[1];
          v16.length = CFStringGetLength(v18);
        }
        v16.location = 0;
        CFStringGetBytes(v18, v16, 0x8000100u, 0, 0, 0, 0, &v31);
        *a5 = v31;
        v36.location = v13;
        v36.length = v17;
        v20 = CFStringCreateWithSubstring(0, (CFStringRef)a1[1], v36);
        v21 = (void *)a1[4];
        if (v21)
          free(v21);
        v22 = ABCreateSortKey(v20, *(_QWORD *)(v11 + 16), 0, &v30);
        a1[4] = (uint64_t)v22;
        *a3 = v30;
        *a2 = v22;
        CFRelease(v20);
        v23 = v17 + v13;
        if (*a3)
        {
          a1[5] = v23;
          break;
        }
        v37.length = CFStringGetLength((CFStringRef)a1[1]) - v23;
        v29.location = 0;
        v29.length = 0;
        v37.location = v23;
        if (!CFStringFindWithOptions((CFStringRef)a1[1], CFSTR("##&"), v37, 0, &v29))
          return 101;
        v13 = v29.length + v29.location;
        a1[5] = v29.length + v29.location;
      }
      while (!*a3);
    }
  }
  else
  {
    v24 = a1[6];
    if (!v24)
      ABCFFTSTokenizerNext_cold_1();
    v25 = a1[3];
    if (*(_QWORD *)(v24 + 32) == v25)
      return 101;
    v28 = a6;
    *a3 = ABTokenListGetTokenCollationKeyLengthAtIndex(v24, v25);
    *a2 = ABTokenListGetTokenCollationKeyAtIndex(a1[6], a1[3]);
    *a4 = ABTokenListGetTokenStartByteOffsetAtIndex(a1[6], a1[3]);
    *a5 = ABTokenListGetTokenEndByteOffsetAtIndex(a1[6], a1[3]);
  }
  v26 = 0;
  v27 = a1[3];
  a1[3] = v27 + 1;
  *v28 = v27;
  return v26;
}

void ABCFFTSTokenizerNameRankFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int *v4;
  unint64_t v5;
  unsigned int v6;
  const __CFArray *v7;
  const __CFArray *v8;
  BOOL v9;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  const __CFString *ValueAtIndex;
  CFIndex v20;

  if (a2 < 2)
    goto LABEL_11;
  v4 = (unsigned int *)sqlite3_value_blob(*a3);
  v5 = *v4;
  v6 = v4[1];
  v7 = (const __CFArray *)sqlite3_value_blob(a3[1]);
  if ((v5 & 1) != 0)
    goto LABEL_11;
  v8 = v7;
  v20 = 2 * CFArrayGetCount(v7);
  v9 = v20 == v5 && v6 == 25;
  if (!v9 || (_DWORD)v5 == 0)
  {
LABEL_11:
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = v5 >> 1;
    v14 = 2;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if (((0xFF6FF8uLL >> v15) & 1) == 0)
        {
          if (v4[v17])
          {
            ++v12;
            if (v11 < v13)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
              v12 += ((v16 & 1) == 0) + CFStringGetLength(ValueAtIndex);
              v16 = 1;
            }
          }
        }
        ++v15;
        v17 += 3;
      }
      while (v15 != 25);
      ++v11;
      v14 += 75;
    }
    while (v11 != v20);
  }
  sqlite3_result_int(a1, v12);
}

void ABCFFTSTokenizerPropertyMatchFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v17;
  NSMapTable *table;
  NSMapTable *v19;

  table = (NSMapTable *)objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 1282, 0);
  v19 = table;
  if (a2 >= 2)
  {
    v5 = (unsigned int *)sqlite3_value_blob(*a3);
    v6 = (const __CFArray *)sqlite3_value_blob(a3[1]);
    v17 = v5[1];
    if (v17)
    {
      v7 = v6;
      v8 = 0;
      v9 = *v5;
      v10 = 2;
      do
      {
        if (v9)
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v14 = v10;
          do
          {
            if (v5[v14])
            {
              if (!v12)
              {
                v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v15 = ABCFFTSColumnToABPropertyID(v8);
                NSMapInsert(table, (const void *)(v15 + 1), v12);
              }
              objc_msgSend(v12, "addObject:", CFArrayGetValueAtIndex(v7, v13));
            }
            ++v13;
            v14 += 3 * v17;
            v11 += 2;
          }
          while (v11 < v9);
        }
        ++v8;
        v10 += 3;
      }
      while (v8 != v17);
    }
  }
  sqlite3_result_blob(a1, &v19, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void ABCFSmartDialerFTSTokenizerPropertyMatchFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  int v14;
  ABPropertyID v15;
  unsigned int v17;
  NSMapTable *table;
  NSMapTable *v19;

  table = (NSMapTable *)objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 1282, 0);
  v19 = table;
  if (a2 >= 2)
  {
    v5 = (unsigned int *)sqlite3_value_blob(*a3);
    v6 = (const __CFArray *)sqlite3_value_blob(a3[1]);
    v17 = v5[1];
    if (v17)
    {
      v7 = v6;
      v8 = 0;
      v9 = *v5;
      v10 = 2;
      do
      {
        if (v9)
        {
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v14 = v10;
          do
          {
            if (v5[v14])
            {
              if (!v12)
              {
                v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                switch(v8)
                {
                  case 0:
                    v15 = kABPersonFirstNameProperty;
                    break;
                  case 1:
                    v15 = kABPersonMiddleNameProperty;
                    break;
                  case 2:
                    v15 = kABPersonLastNameProperty;
                    break;
                  case 3:
                    v15 = kABPersonOrganizationProperty;
                    break;
                  case 4:
                    v15 = kABPersonNicknameProperty;
                    break;
                  default:
                    v15 = -1;
                    break;
                }
                NSMapInsert(table, (const void *)(v15 + 1), v12);
              }
              objc_msgSend(v12, "addObject:", CFArrayGetValueAtIndex(v7, v13));
            }
            ++v13;
            v14 += 3 * v17;
            v11 += 2;
          }
          while (v11 < v9);
        }
        ++v8;
        v10 += 3;
      }
      while (v8 != v17);
    }
  }
  sqlite3_result_blob(a1, &v19, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void ABCFFTSTokenizerPropertyMatchCollectFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  NSMapTable *v6;
  uint64_t v7;
  unsigned int *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  int v17;
  int v18;
  NSMapTable *v19;
  int v20;
  unsigned int v21;
  NSMapTable *table;

  if (a2 == 4)
  {
    v5 = sqlite3_value_int(a3[3]);
    v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    v7 = objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 1282, 0);
    v8 = (unsigned int *)sqlite3_value_blob(a3[1]);
    v9 = (const __CFArray *)sqlite3_value_blob(a3[2]);
    if (v6)
    {
      table = (NSMapTable *)v7;
      v19 = v6;
      v20 = v5;
      v21 = v8[1];
      if (v21)
      {
        v10 = v9;
        v11 = 0;
        v12 = *v8;
        v13 = 2;
        do
        {
          if (v12)
          {
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = v13;
            do
            {
              if (v8[v17])
              {
                if (!v15)
                {
                  v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v18 = ABCFFTSColumnToABPropertyID(v11);
                  NSMapInsert(table, (const void *)(v18 + 1), v15);
                }
                objc_msgSend(v15, "addObject:", CFArrayGetValueAtIndex(v10, v16));
              }
              ++v16;
              v17 += 3 * v21;
              v14 += 2;
            }
            while (v14 < v12);
          }
          ++v11;
          v13 += 3;
        }
        while (v11 != v21);
      }
      v5 = v20;
      if (table)
        NSMapInsert(v19, (const void *)v20, table);
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void ABCFFTSTokenizerSelectSnippetColumnFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a2 >= 1 && (v4 = (unsigned int *)sqlite3_value_blob(*a3), v5 = v4[1], (_DWORD)v5))
  {
    v6 = 0;
    v7 = 2;
    do
    {
      if (*v4)
      {
        v8 = *v4;
        v9 = v7;
        while (!v4[v9])
        {
          v9 += 3 * v5;
          if (!--v8)
            goto LABEL_8;
        }
        if (((0xFF6FF8uLL >> v6) & 1) != 0)
          v10 = v6;
        else
          v10 = -1;
      }
      else
      {
LABEL_8:
        v10 = -1;
      }
      if (v10 != -1)
        break;
      ++v6;
      v7 += 3;
    }
    while (v6 < v5);
  }
  else
  {
    v10 = -1;
  }
  sqlite3_result_int(a1, v10);
}

uint64_t ABTokenListCreate()
{
  uint64_t Instance;
  uint64_t v1;

  pthread_once(&kABTokenListRegisterClass, (void (*)(void))ABTokenListRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  v1 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    if (ABTokenListCreate_onceToken != -1)
      dispatch_once(&ABTokenListCreate_onceToken, &__block_literal_global_13);
    *(_QWORD *)(v1 + 40) = (id)ABTokenListCreate_sharedSubtokenRegex;
  }
  return v1;
}

void ABTokenListDestroy(uint64_t a1)
{
  void *v2;

  if (!a1)
    ABTokenListDestroy_cold_1();
  ABTokenListRemoveAllTokens(a1);

  v2 = *(void **)(a1 + 16);
  if (v2)
    free(v2);
}

void ABTokenListRemoveAllTokens(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!a1)
    ABTokenListRemoveAllTokens_cold_1();
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 16) + v3;
      CFRelease(*(CFTypeRef *)v4);
      v5 = *(void **)(v4 + 8);
      if (v5)
        free(v5);
      v3 += 56;
      --v2;
    }
    while (v2);
  }
  *(_QWORD *)(a1 + 32) = 0;
}

CFStringTokenizerTokenType ABTokenListPopulateFromString(uint64_t a1, __CFStringTokenizer *a2, uint64_t a3, const __CFString *a4, int a5, int a6, uint64_t a7)
{
  CFStringTokenizerTokenType result;
  char v12;
  CFRange CurrentTokenRange;
  char *v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  int v23;
  void *context;
  const __CFAllocator *alloc;
  _QWORD v29[5];
  CFRange v30;
  uint64_t v31;
  const __CFString *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  CFIndex v36;
  CFIndex usedBufLen[2];
  CFRange v38;
  CFRange v39;
  CFRange v40;

  if (!a1)
    ABTokenListPopulateFromString_cold_1();
  ABTokenListRemoveAllTokens(a1);
  v40.length = CFStringGetLength(a4);
  v40.location = 0;
  CFStringTokenizerSetString(a2, a4, v40);
  result = CFStringTokenizerAdvanceToNextToken(a2);
  if (result)
  {
    v12 = result;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v23 = a6;
    do
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(a2);
      v36 = 0;
      usedBufLen[0] = 0;
      v38.location = 0;
      v38.length = CurrentTokenRange.location;
      CFStringGetBytes(a4, v38, 0x8000100u, 0, 0, 0, 0, usedBufLen);
      v39.length = CurrentTokenRange.location + CurrentTokenRange.length;
      v39.location = 0;
      CFStringGetBytes(a4, v39, 0x8000100u, 0, 0, 0, 0, &v36);
      v14 = (char *)usedBufLen[0];
      v15 = v36 - usedBufLen[0];
      v16 = (__CFString *)CFStringCreateWithSubstring(alloc, a4, CurrentTokenRange);
      if ((v12 & 0x20) == 0)
        goto LABEL_8;
      if (a6)
      {
        context = (void *)MEMORY[0x1A1ACC34C]();
        v17 = a7;
        v18 = *(void **)(a1 + 40);
        v19 = -[__CFString length](v16, "length");
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 3221225472;
        v29[2] = __ABTokenListPopulateFromString_block_invoke;
        v29[3] = &__block_descriptor_96_e37_v32__0__NSTextCheckingResult_8Q16_B24l;
        v29[4] = v16;
        v30 = CurrentTokenRange;
        v31 = a1;
        v32 = a4;
        v33 = a3;
        v34 = v14;
        v35 = v15;
        v20 = v18;
        a7 = v17;
        a6 = v23;
        objc_msgSend(v20, "enumerateMatchesInString:options:range:usingBlock:", v16, 0, 0, v19, v29);
        objc_autoreleasePoolPop(context);
      }
      if ((_DWORD)a7)
LABEL_8:
        _AddTokenListEntryForRangeInString(a1, (uint64_t)a4, a3, v14, v15, (const void *)CurrentTokenRange.location, (const void *)CurrentTokenRange.length, v16);
      if (a5)
      {
        v21 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(a2, 0x10000uLL);
        if (v21)
        {
          v22 = v21;
          if (CFStringCompare(v21, v16, 0))
            _AddTokenListEntryForRangeInString(a1, (uint64_t)a4, a3, v14, v15, (const void *)CurrentTokenRange.location, (const void *)CurrentTokenRange.length, v22);
          CFRelease(v22);
        }
      }
      if (v16)
        CFRelease(v16);
      result = CFStringTokenizerAdvanceToNextToken(a2);
      v12 = result;
    }
    while (result);
  }
  return result;
}

void _AddTokenListEntryForRangeInString(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, const void *a6, const void *a7, CFStringRef theString)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  CFTypeRef *v20;
  const void *v21;

  if (a2 && a1 && theString && CFStringGetLength(theString))
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (v15 == *(_QWORD *)(a1 + 24))
    {
      v16 = malloc_type_realloc(*(void **)(a1 + 16), 56 * v15 + 2800, 0x1070040AB53498DuLL);
      v17 = *(_QWORD *)(a1 + 24) + 50;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v17;
    }
    v21 = 0;
    if (a3)
    {
      v18 = (char *)ABCreateSortKey(theString, a3, 0, (int64_t *)&v21);
      if (!v18 || !v21)
      {
        if (v18)
          free(v18);
        return;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = &a4[a5];
    v20 = (CFTypeRef *)(*(_QWORD *)(a1 + 16) + 56 * *(_QWORD *)(a1 + 32));
    v20[3] = a4;
    v20[4] = v19;
    v20[1] = v18;
    *v20 = CFRetain(theString);
    v20[2] = v21;
    v20[5] = a6;
    v20[6] = a7;
    ++*(_QWORD *)(a1 + 32);
  }
}

uint64_t ABTokenListGetCount(uint64_t a1)
{
  if (!a1)
    ABCFFTSTokenizerNext_cold_1();
  return *(_QWORD *)(a1 + 32);
}

uint64_t ABTokenListGetTokenStartByteOffsetAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenStartByteOffsetAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenStartByteOffsetAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 24);
}

uint64_t ABTokenListGetTokenEndByteOffsetAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenEndByteOffsetAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenEndByteOffsetAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 32);
}

uint64_t ABTokenListGetTokenAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2);
}

uint64_t ABTokenListGetTokenCollationKeyAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenCollationKeyAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenCollationKeyAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 8);
}

uint64_t ABTokenListGetTokenCollationKeyLengthAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenCollationKeyLengthAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenCollationKeyLengthAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 16);
}

uint64_t ABTokenListGetTokenRangeAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1)
    ABTokenListGetTokenRangeAtIndex_cold_1();
  if (*(_QWORD *)(a1 + 32) <= a2)
    ABTokenListGetTokenRangeAtIndex_cold_2();
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 40);
}

uint64_t ABCFFTSColumnToABPropertyID(int a1)
{
  const ABPropertyID *v1;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v1 = &kABPersonFirstNameProperty;
      goto LABEL_26;
    case 1:
      v1 = &kABPersonLastNameProperty;
      goto LABEL_26;
    case 2:
      v1 = &kABPersonMiddleNameProperty;
      goto LABEL_26;
    case 3:
      v1 = &kABPersonFirstNamePhoneticProperty;
      goto LABEL_26;
    case 4:
      v1 = &kABPersonMiddleNamePhoneticProperty;
      goto LABEL_26;
    case 5:
      v1 = &kABPersonLastNamePhoneticProperty;
      goto LABEL_26;
    case 6:
      v1 = &kABPersonOrganizationProperty;
      goto LABEL_26;
    case 7:
      v1 = &kABPersonOrganizationPhoneticProperty;
      goto LABEL_26;
    case 8:
      v1 = &kABPersonDepartmentProperty;
      goto LABEL_26;
    case 9:
      v1 = &kABPersonNoteProperty;
      goto LABEL_26;
    case 10:
      v1 = &kABPersonBirthdayProperty;
      goto LABEL_26;
    case 11:
      v1 = &kABPersonJobTitleProperty;
      goto LABEL_26;
    case 12:
      v1 = &kABPersonNicknameProperty;
      goto LABEL_26;
    case 13:
      v1 = &kABPersonPrefixProperty;
      goto LABEL_26;
    case 14:
      v1 = &kABPersonSuffixProperty;
      goto LABEL_26;
    case 15:
      v1 = &kABPersonDisplayNameProperty;
      goto LABEL_26;
    case 16:
      v1 = &kABPersonPhoneProperty;
      goto LABEL_26;
    case 17:
      v1 = &kABPersonEmailProperty;
      goto LABEL_26;
    case 18:
      v1 = &kABPersonAddressProperty;
      goto LABEL_26;
    case 19:
      v1 = &kABPersonSocialProfileProperty;
      goto LABEL_26;
    case 20:
      v1 = &kABPersonURLProperty;
      goto LABEL_26;
    case 21:
      v1 = &kABPersonRelatedNamesProperty;
      goto LABEL_26;
    case 22:
      v1 = &kABPersonInstantMessageProperty;
      goto LABEL_26;
    case 23:
      v1 = &kABPersonDateProperty;
LABEL_26:
      result = *(unsigned int *)v1;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t ABTokenListRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kABTokenListTypeID = result;
  return result;
}

uint64_t ABAccountStoreGetAccountTypeForAccount(void *a1, const void *a2)
{
  id v4;
  CFTypeRef v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = (id)__accountTypesCache;
  if (__accountTypesCache)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    if (objc_msgSend(v4, "objectForKey:", CFSTR("com.apple.unit-testing")))
      return objc_msgSend((id)__accountTypesCache, "objectForKey:", CFSTR("com.apple.unit-testing"));
    return 0;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99D38]);
  __accountTypesCache = (uint64_t)v4;
  if (!a2)
    goto LABEL_9;
LABEL_3:
  v5 = ABAccountCopyIdentifier(a2);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = objc_msgSend((id)__accountTypesCache, "objectForKey:", v5);
    if (v7)
    {
      v8 = v7;
      if (v7 == objc_msgSend(MEMORY[0x1E0C99E38], "null"))
        v9 = 0;
      else
        v9 = v8;
    }
    else
    {
      v9 = objc_msgSend((id)objc_msgSend(a1, "displayTypeForAccountWithIdentifier:", v6), "identifier");
      v11 = __accountTypesCache;
      if (v9)
      {
        v12 = (void *)__accountTypesCache;
        v13 = v9;
      }
      else
      {
        v13 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v12 = (void *)v11;
      }
      objc_msgSend(v12, "setObject:forKey:", v13, v6);
    }

    return v9;
  }
  return 0;
}

uint64_t ABAccountStoreGetAccountTypeForSource(void *a1, uint64_t a2)
{
  uint64_t result;
  const void *AccountForSource;

  result = ABRecordGetAddressBook();
  if (result)
  {
    AccountForSource = (const void *)ABAddressBookGetAccountForSource(result, a2);
    return ABAccountStoreGetAccountTypeForAccount(a1, AccountForSource);
  }
  return result;
}

uint64_t ABAccountCachedTypeForAccountIdentifier(uint64_t a1)
{
  return objc_msgSend((id)__accountTypesCache, "objectForKey:", a1);
}

uint64_t ABAccountAddTypeToCache(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = (id)__accountTypesCache;
  if (!__accountTypesCache)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99D38]);
    __accountTypesCache = (uint64_t)v4;
  }
  return objc_msgSend(v4, "setObject:forKey:", a2, a1);
}

uint64_t ABAccountCacheClear()
{
  return objc_msgSend((id)__accountTypesCache, "removeAllObjects");
}

uint64_t ABAddressBookMergeRecordsInSourceIntoSource(const __CFString *a1, const void *a2, const void *a3)
{
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int IntValue;
  int v16;

  if (ABLogAPIUsage())
  {
    v6 = _isMainThread();
    v7 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v6);
    v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMergeRecordsInSourceIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 28, v7, (uint64_t)CFSTR("%@"), v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1 || (ABSourceIsContentReadonly((uint64_t)a3) & 1) != 0)
    return 0;
  v13 = _mergeRecordsIntoSource(a1, a2, a3);
  v14 = kABSourceMeIdentifierProperty;
  IntValue = ABRecordGetIntValue((uint64_t)a2, kABSourceMeIdentifierProperty);
  v16 = ABRecordGetIntValue((uint64_t)a3, v14);
  if (v16 != -1)
    IntValue = v16;
  ABAddressBookRevert(a1);
  ABRecordSetIntValue(a2, v14, -1, 0);
  ABRecordSetIntValue(a3, v14, IntValue, 0);
  return v13;
}

uint64_t _mergeRecordsIntoSource(const __CFString *a1, const void *a2, const void *a3)
{
  const __CFArray *v6;
  CFIndex Count;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  const void *ValueAtIndex;
  int v14;
  _BOOL8 v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  CFErrorRef error;

  v6 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, a2);
  Count = CFArrayGetCount(v6);
  if (!v6)
    return 1;
  v8 = Count;
  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 134, 0, (uint64_t)CFSTR("Merging linked contacts"), v9, v10, v11, v24);
  if (v8 < 1)
  {
LABEL_6:
    v14 = 1;
  }
  else
  {
    v12 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v12);
      if (!_mergePersonIntoLinkedPeopleFromSource(a1, ValueAtIndex, a3))
        break;
      if (v8 == ++v12)
        goto LABEL_6;
    }
    v14 = 0;
  }
  error = 0;
  if (!ABAddressBookSave(a1, &error))
  {
    if (error)
    {
      v16 = CFErrorCopyDescription(error);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 147, 0, (uint64_t)CFSTR("Error saving DB when moving people to source %@: %@"), v17, v18, v19, (uint64_t)a3);
      CFRelease(v16);
    }
    v14 = 0;
  }
  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 157, 0, (uint64_t)CFSTR("Moving non linked contacts"), v20, v21, v22, v25);
  if (v14)
    v15 = _movePeopleAndGroupsToSource(a1, a2, a3);
  else
    v15 = 0;
  CFRelease(v6);
  return v15;
}

BOOL _mergePersonIntoLinkedPeopleFromSource(const void *a1, ABRecordRef person, const void *a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  char v10;
  CFIndex i;
  const void *ValueAtIndex;
  ABRecordID RecordID;
  ABRecordRef v14;
  const void *v15;
  ABRecordID v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL8 v21;
  ABRecordRef v22;
  const void *v23;
  int v24;
  int v25;
  CFStringRef v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFErrorRef error;

  v6 = ABPersonCopyArrayOfAllLinkedPeople(person);
  if (v6)
  {
    v7 = v6;
    Count = CFArrayGetCount(v6);
    if (Count < 2)
    {
      CFRelease(v7);
    }
    else
    {
      v9 = Count;
      v10 = 0;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        RecordID = ABRecordGetRecordID(ValueAtIndex);
        if (RecordID != ABRecordGetRecordID(person))
        {
          v14 = ABPersonCopySource(ValueAtIndex);
          if (v14)
          {
            v15 = v14;
            v16 = ABRecordGetRecordID(v14);
            if (v16 == ABRecordGetRecordID(a3))
            {
              ABDiagnosticsEnabled();
              _ABLog2(5, (uint64_t)"_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 69, 0, (uint64_t)CFSTR("Merging %@ into %@"), v17, v18, v19, (uint64_t)person);
              ABPersonMergePersonIntoPerson(person, ValueAtIndex);
              _movePicturesFromPersonToPerson(v20, person, ValueAtIndex);
              v10 = 1;
            }
            CFRelease(v15);
          }
        }
      }
      CFRelease(v7);
      if ((v10 & 1) != 0)
        return 1;
    }
  }
  v22 = ABPersonCreateInSource(a3);
  if (!v22)
    return 0;
  v23 = v22;
  ABPersonMergePersonIntoPerson(person, v22);
  error = 0;
  v24 = ABAddressBookAddRecord(a1, v23, &error);
  v25 = v24;
  if ((v24 & 1) == 0)
  {
    v24 = (int)error;
    if (error)
    {
      v26 = CFErrorCopyDescription(error);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 91, 0, (uint64_t)CFSTR("Error when adding person %@ to source %@: %@"), v27, v28, v29, (uint64_t)person);
      CFRelease(v26);
    }
  }
  if (v25)
    v21 = _movePicturesFromPersonToPerson(v24, person, v23);
  else
    v21 = 0;
  CFRelease(v23);
  return v21;
}

BOOL _movePicturesFromPersonToPerson(int a1, const void *a2, ABRecordRef person)
{
  const __CFData *v5;
  const __CFData *v6;
  _BOOL8 v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFErrorRef error;

  if (ABPersonHasImageData(person))
    return 1;
  v5 = ABPersonCopyImageData(a2);
  if (!v5)
    return 1;
  v6 = v5;
  error = 0;
  v7 = ABPersonSetImageData(person, v5, &error);
  if (!v7 && error)
  {
    v8 = CFErrorCopyDescription(error);
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _movePicturesFromPersonToPerson(ABAddressBookRef, ABRecordRef, ABRecordRef)", 179, 0, (uint64_t)CFSTR("Error when merging image from person %@ into %@: %@"), v9, v10, v11, (uint64_t)a2);
    CFRelease(v8);
  }
  CFRelease(v6);
  return v7;
}

BOOL _movePeopleAndGroupsToSource(const __CFString *a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RecordID;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;

  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _movePeopleAndGroupsToSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 110, 0, (uint64_t)CFSTR("Moving contacts from %@ into %@"), v6, v7, v8, (uint64_t)a2);
  CPRecordStoreGetDatabase();
  v9 = CPSqliteDatabaseConnectionForWriting();
  RecordID = ABRecordGetRecordID(a2);
  if (_removeSyncImagesFromSource(a1, v9, RecordID))
  {
    v11 = ABRecordGetRecordID(a2);
    v12 = ABRecordGetRecordID(a3);
    v13 = _moveRecordsInTableToSource(v12, v9, v11, v12, (uint64_t)"ABGroup", 0);
    if (!v9)
      return v13;
    goto LABEL_5;
  }
  v13 = 0;
  if (v9)
LABEL_5:
    CPSqliteDatabaseReleaseSqliteConnection();
  return v13;
}

BOOL _removeSyncImagesFromSource(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  const __CFArray *Mutable;
  CFStringRef ImageStore;
  _BOOL8 v9;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT ROWID from ABPerson where StoreID = %i;"),
         a3);
  if (!v5)
    return 0;
  v6 = v5;
  if (CPSqliteConnectionStatementForSQL())
  {
    Mutable = CFArrayCreateMutable(v4, 0, 0);
    CPSqliteStatementIntegerResult();
    v9 = CFArrayGetCount(Mutable)
      && (ImageStore = ABCAddressBookGetImageStore(a1)) != 0
      && ABCImageStoreRemoveImagesForRecordIds(a1, (uint64_t)ImageStore, Mutable, 5) != 0;
    CFRelease(Mutable);
  }
  else
  {
    v9 = 0;
  }
  CFRelease(v6);
  return v9;
}

BOOL _moveRecordsInTableToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const __CFString *v6;
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = CFSTR(", ImageURI = NULL");
  if (!a6)
    v6 = &stru_1E3CA4E68;
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@ WHERE StoreID = %i;"),
         a5,
         a4,
         v6,
         a3);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = CPSqliteConnectionStatementForSQL();
  v10 = v9 != 0;
  if (v9)
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  CFRelease(v8);
  return v10;
}

uint64_t ABLinkedOnOrAfterSimulateLinkedBefore(uint64_t result)
{
  __ABLinkedOnOrAfterSimulateLinkedBefore = result;
  return result;
}

uint64_t ABOSLogGeneral()
{
  if (ABOSLogGeneral_onceToken != -1)
    dispatch_once(&ABOSLogGeneral_onceToken, &__block_literal_global_15);
  return ABOSLogGeneral_generalLog;
}

uint64_t ABOSLogMeCardChanges()
{
  if (ABOSLogMeCardChanges_onceToken != -1)
    dispatch_once(&ABOSLogMeCardChanges_onceToken, &__block_literal_global_20);
  return ABOSLogMeCardChanges_meCardLog;
}

uint64_t ABOSLogAnalyzeDatabase()
{
  if (ABOSLogAnalyzeDatabase_onceToken != -1)
    dispatch_once(&ABOSLogAnalyzeDatabase_onceToken, &__block_literal_global_24);
  return ABOSLogAnalyzeDatabase_analyzeDatabaseLog;
}

BOOL ABLogDebugLevelEnabled()
{
  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  return __ABLogMaxConsoleLevel == 7 || __ABLogMaxFileLevel == 7;
}

uint64_t ABLogContactsSearch()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogContactsSearch)
    return result;
  else
    return 0;
}

uint64_t ABLogDataCollection()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogDataCollection)
    return result;
  else
    return 0;
}

uint64_t ABLogPersonDelete()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogPersonDelete)
    return result;
  else
    return 0;
}

uint64_t ABLogChangeHistory()
{
  uint64_t result;

  if (_initIfNeeded_onceToken != -1)
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_127);
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogChangeHistory)
    return result;
  else
    return 0;
}

void _ABLog2(int a1, uint64_t a2, uint64_t a3, __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  const __CFString *v16;
  _opaque_pthread_t *v17;
  __uint64_t v18;
  _QWORD block[7];
  int v20;
  int v21;
  __uint64_t v22;

  v9 = __ABLogMaxConsoleLevel;
  v10 = __ABLogMaxFileLevel;
  if (__ABLogMaxConsoleLevel >= a1 || __ABLogMaxFileLevel >= a1)
  {
    if (a4)
      v16 = a4;
    else
      v16 = &stru_1E3CA4E68;
    if (a5)
    {
      v16 = (const __CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a5, &a9);
      if (a4)
        v16 = (const __CFString *)-[__CFString stringByAppendingString:](a4, "stringByAppendingString:", v16);
    }
    if (v9 >= a1)
      NSLog(CFSTR("%s:%i | %@"), a2, a3, v16);
    if (v10 >= a1)
    {
      v22 = 0;
      if (pthread_threadid_np(0, &v22))
      {
        v17 = pthread_self();
        v18 = pthread_mach_thread_np(v17);
        v22 = v18;
      }
      else
      {
        v18 = v22;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ABLog2_block_invoke;
      block[3] = &unk_1E3CA4818;
      block[4] = v16;
      block[5] = v18;
      block[6] = a2;
      v20 = a1;
      v21 = a3;
      dispatch_async((dispatch_queue_t)__ABLogAslQueue, block);
    }
  }
}

uint64_t ABLogAddressBook(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("addressBookRef=%p"), a1);
}

uint64_t ABLogStringForPerson(const void *a1)
{
  void *v2;
  CFMutableStringRef v3;
  __CFString *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  if (a1)
  {
    v3 = ABPersonCopyCompositeName(a1);
    v4 = v3;
  }
  else
  {
    v3 = CFSTR("NULL");
  }
  return objc_msgSend(v2, "stringWithFormat:", CFSTR("%p(%@)"), a1, v3);
}

id ABLogStringForPeople(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  CFMutableStringRef v9;
  __CFString *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("(\n"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(a1);
        v8 = *(const void **)(*((_QWORD *)&v12 + 1) + 8 * v7);
        if ((v5 & 1) != 0)
          objc_msgSend(v2, "appendString:", CFSTR("\n"));
        if (v8)
        {
          v9 = ABPersonCopyCompositeName(v8);
          v10 = v9;
        }
        else
        {
          v9 = CFSTR("NULL");
        }
        objc_msgSend(v2, "appendString:", v9);
        ++v7;
        v5 = 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  objc_msgSend(v2, "appendString:", CFSTR("\n)"));
  return v2;
}

uint64_t ABLogErrorPtr(const __CFString **a1)
{
  const __CFString *v1;

  if (a1)
    v1 = *a1;
  else
    v1 = CFSTR("NULL");
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("error=%@"), v1);
}

const __CFString *ABLogStringForBool(int a1)
{
  if (a1)
    return CFSTR("true");
  else
    return CFSTR("false");
}

id ABLogStringForStringArray(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("("));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(a1);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7);
        if ((v5 & 1) != 0)
          objc_msgSend(v2, "appendString:", CFSTR(", "));
        objc_msgSend(v2, "appendString:", v8);
        ++v7;
        v5 = 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

const __CFString *ABLogStringForIntArrayPtr(void **a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  const __CFString *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*a1)
    return CFSTR("NULL");
  v2 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("("));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v3);
        if ((v6 & 1) != 0)
          v9 = CFSTR(", %i");
        else
          v9 = CFSTR("%i");
        objc_msgSend(v2, "appendFormat:", v9, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i));
        v6 = 1;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return (const __CFString *)v2;
}

uint64_t ABLogBacktrace()
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("backtrace:\n%@"), objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols"));
}

uint64_t ABLogEnableInternalAlert(uint64_t result)
{
  __ABAllowInternalAlert = result;
  return result;
}

uint64_t ABLogDisplayInternalAlert(uint64_t result)
{
  const void *v1;
  NSObject *global_queue;
  _QWORD block[5];

  if (__ABAllowInternalAlert)
  {
    v1 = (const void *)result;
    result = os_variant_has_internal_content();
    if ((_DWORD)result)
    {
      CFRetain(v1);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __ABLogDisplayInternalAlert_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v1;
      dispatch_async(global_queue, block);
      return sleep(1u);
    }
  }
  return result;
}

void *ABLogSimulateCrashReport(uint64_t a1)
{
  void *result;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  if (ABLogSimulateCrashReport___CrashReportHandle
    || (v4 = dlopen((const char *)objc_msgSend(CFSTR("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport"), "fileSystemRepresentation"), 1), (ABLogSimulateCrashReport___CrashReportHandle = (uint64_t)v4) == 0))
  {
    result = ABLogSimulateCrashReport_ABSimulateCrash;
    if (!ABLogSimulateCrashReport_ABSimulateCrash)
      return result;
    goto LABEL_3;
  }
  result = dlsym(v4, "SimulateCrash");
  ABLogSimulateCrashReport_ABSimulateCrash = result;
  if (result)
  {
LABEL_3:
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))result;
    v3 = getpid();
    return (void *)v5(v3, 464366555, a1);
  }
  return result;
}

const __CFString *_isMainThread()
{
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
    return CFSTR("YES");
  else
    return CFSTR("NO");
}

uint64_t ABRegulatoryLogDeleteContactsData(uint64_t a1)
{
  uint64_t result;

  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "isAccessGranted"))
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "deletingContactsData");
  result = _shouldRegulatoryLog(a1);
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "logContactsDataAccessEvent");
  return result;
}

uint64_t ABRegulatoryLogModifyContactsData(uint64_t a1)
{
  uint64_t result;

  result = _shouldRegulatoryLog(a1);
  if ((_DWORD)result)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "modifyingContactsData");
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "logContactsDataAccessEvent");
  }
  return result;
}

uint64_t ABRegulatoryLogReadTransmitContactsData()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D13B50], "sharedInstanceForAddressBook"), "readAndTransmittingContactsData");
}

id ABCreateStringFromAlternateBirthday(void *a1)
{
  id v2;

  if (!a1)
    return 0;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("calendarIdentifier")))
    objc_msgSend(v2, "appendString:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("calendarIdentifier")));
  objc_msgSend(v2, "appendString:", CFSTR(","));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("isLeapMonth")))
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("isLeapMonth")), "stringValue"));
  objc_msgSend(v2, "appendString:", CFSTR(","));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("era")))
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("era")), "stringValue"));
  objc_msgSend(v2, "appendString:", CFSTR(","));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("year")))
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("year")), "stringValue"));
  objc_msgSend(v2, "appendString:", CFSTR(","));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("month")))
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("month")), "stringValue"));
  objc_msgSend(v2, "appendString:", CFSTR(","));
  if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("day")))
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("day")), "stringValue"));
  return v2;
}

void *ABCreateAlternateBirthdayFromString(void *a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 6);
  v3 = (void *)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(","));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 0), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(v3, "objectAtIndexedSubscript:", 0), CFSTR("calendarIdentifier"));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 1), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 1), "BOOLValue")), CFSTR("isLeapMonth"));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 2), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 2), "integerValue")), CFSTR("era"));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 3), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 3), "integerValue")), CFSTR("year"));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 4), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 4), "integerValue")), CFSTR("month"));
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 5), "length"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 5), "integerValue")), CFSTR("day"));
  return v2;
}

uint64_t ABValidateAlternateBirthday(void *a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  if (!a1)
    return 1;
  result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("calendarIdentifier"));
  if (result)
  {
    result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("month"));
    if (result)
    {
      result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("day"));
      if (result)
      {
        v3 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("calendarIdentifier"));
        v4 = objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", v3);
        if (v4
          || (v5 = objc_msgSend(v3, "lowercaseString"),
              v4 = objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", v5),
              result = v4 != 0,
              v4))
        {
          v6 = objc_alloc_init(MEMORY[0x1E0C99D78]);
          objc_msgSend(v6, "setCalendar:", v4);
          objc_msgSend(v6, "setMonth:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("month")), "integerValue"));
          objc_msgSend(v6, "setDay:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("day")), "integerValue"));
          if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("isLeapMonth")))
            objc_msgSend(v6, "setLeapMonth:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("isLeapMonth")), "BOOLValue"));
          if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("era")))
            objc_msgSend(v6, "setEra:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("era")), "integerValue"));
          if (objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("year")))
            objc_msgSend(v6, "setYear:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("year")), "integerValue"));
          v7 = objc_msgSend(v6, "isValidDate");

          return v7;
        }
      }
    }
  }
  return result;
}

uint64_t sKeyComparator_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = objc_msgSend(&unk_1E3CB97E0, "indexOfObject:", a2);
  v6 = objc_msgSend(&unk_1E3CB97E0, "indexOfObject:", a3);
  if (v5 == 0x7FFFFFFFFFFFFFFFLL && v6 == 0x7FFFFFFFFFFFFFFFLL)
    return objc_msgSend(a2, "caseInsensitiveCompare:", a3);
  if (v5 == 0x7FFFFFFFFFFFFFFFLL)
    v8 = 1;
  else
    v8 = -1;
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = -1;
    if (v5 >= v6)
      v9 = v6 < v5;
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
      return v9;
  }
  return v8;
}

__CFString *ABAccountNameForProperty(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E3CA49B8[a1];
}

uint64_t ABAccountCreate()
{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFString *v5;

  if (ABLogAPIUsage())
  {
    v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"ABRecordRef ABAccountCreate(void)", 83, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return CPRecordCreate();
}

CFTypeRef ABAccountCopyInternalUUID(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABAccountCopyInternalUUID(ABRecordRef)", 88, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABRecordCopyValue(a1, 3);
}

BOOL ABAccountSetInternalUUID(const void *a1, const void *a2, CFErrorRef *a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABAccountSetInternalUUID(ABRecordRef, CFStringRef, CFErrorRef *)", 93, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABRecordSetValue(a1, 3, a2, a3);
}

CFTypeRef ABAccountCopyIdentifier(const void *a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v7;

  if (ABLogAPIUsage())
  {
    v7 = _isMainThread();
    v2 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"CFStringRef ABAccountCopyIdentifier(ABRecordRef)", 98, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABRecordCopyValue(a1, 0);
}

BOOL ABAccountSetIdentifier(const void *a1, const void *a2, CFErrorRef *a3)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v11;

  if (ABLogAPIUsage())
  {
    v11 = _isMainThread();
    v6 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "));
    _ABLog2(6, (uint64_t)"_Bool ABAccountSetIdentifier(ABRecordRef, CFStringRef, CFErrorRef *)", 103, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABRecordSetValue(a1, 0, a2, a3);
}

ABRecordRef ABAddressBookGetDefaultSourceForAccount(const void *a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ABRecordID IntValue;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef)", 108, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  IntValue = ABRecordGetIntValue(a2, 2);
  if (IntValue < 1)
    return 0;
  else
    return ABAddressBookGetSourceWithRecordID(a1, IntValue);
}

uint64_t ABAddressBookSetDefaultSourceForAccount(uint64_t a1, const void *a2, const void *a3, CFAllocatorRef *a4)
{
  const __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ABRecordID RecordID;

  if (ABLogAPIUsage())
  {
    v8 = _isMainThread();
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v8);
    v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 122, v9, (uint64_t)CFSTR("%@"), v11, v12, v13, v10);
    CFRelease(v9);
  }
  if (a3)
  {
    RecordID = ABRecordGetRecordID(a3);
    if (RecordID != -1)
      return ABRecordSetIntValue(a2, 2, RecordID, a4);
  }
  if (a4)
    *a4 = CFErrorCreate(0, CFSTR("ABAddressBookErrorDomain"), 0, 0);
  return 0;
}

const void *ABAddressBookCopyAccountWithIdentifier(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const void *ValueAtIndex;
  const void *v13;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyAccountWithIdentifier(ABAddressBookRef, CFStringRef)", 146, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2)
    return 0;
  v10 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v10)
    return 0;
  v11 = v10;
  if (CFArrayGetCount(v10) < 1)
  {
    v13 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
    v13 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  CFRelease(v11);
  return v13;
}

uint64_t ABAddressBookCopyAccountsWithUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result)
    return ABCDBContextCopyRecordsForUUIDsOfType(*(_QWORD *)(result + 16), a2, (__int128 *)ABAccountClass);
  return result;
}

uint64_t ABAddressBookCopyArrayOfAllAccounts(uint64_t a1)
{
  const __CFString *v2;
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (ABLogAPIUsage())
  {
    v2 = _isMainThread();
    v3 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v2);
    v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllAccounts(ABAddressBookRef)", 178, v3, (uint64_t)CFSTR("%@"), v5, v6, v7, v4);
    CFRelease(v3);
  }
  return CPRecordStoreCopyAllInstancesOfClass();
}

uint64_t ABAddressBookCopyArrayOfAllSourcesInAccount(uint64_t a1, const void *a2)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (ABLogAPIUsage())
  {
    v4 = _isMainThread();
    v5 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("<< Main thread:%@ | "), v4);
    v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesInAccount(ABAddressBookRef, ABRecordRef)", 184, v5, (uint64_t)CFSTR("%@"), v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2 || ABRecordGetRecordID(a2) == -1)
    return 0;
  else
    return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

uint64_t ABAddressBookPrepareAccountForFamilyDelegate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3_stmt *v6;
  const char *v7;
  void (__cdecl *v8)(void *);
  sqlite3_stmt *v9;
  const char *v10;
  sqlite3_stmt *v11;
  const char *v12;
  void (__cdecl *v13)(void *);
  sqlite3_stmt *v14;
  const char *v15;
  sqlite3_stmt *v16;
  const char *v17;
  void (__cdecl *v18)(void *);
  sqlite3_stmt *v19;
  const char *v20;

  if (result && a2 && a3)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    v3 = CPSqliteConnectionStatementForSQL();
    v4 = CPSqliteConnectionStatementForSQL();
    result = CPSqliteConnectionStatementForSQL();
    v5 = result;
    if (v3)
    {
      v6 = *(sqlite3_stmt **)(v3 + 8);
      if (v6)
      {
        v7 = (const char *)_CPCreateUTF8StringFromCFString();
        v8 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
        sqlite3_bind_text(v6, 1, v7, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        v9 = *(sqlite3_stmt **)(v3 + 8);
        v10 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v9, 2, v10, -1, v8);
        CPSqliteStatementPerform();
        result = CPSqliteStatementReset();
      }
    }
    if (v4)
    {
      v11 = *(sqlite3_stmt **)(v4 + 8);
      if (v11)
      {
        v12 = (const char *)_CPCreateUTF8StringFromCFString();
        v13 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
        sqlite3_bind_text(v11, 1, v12, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        v14 = *(sqlite3_stmt **)(v4 + 8);
        v15 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v14, 2, v15, -1, v13);
        CPSqliteStatementPerform();
        result = CPSqliteStatementReset();
      }
    }
    if (v5)
    {
      v16 = *(sqlite3_stmt **)(v5 + 8);
      if (v16)
      {
        v17 = (const char *)_CPCreateUTF8StringFromCFString();
        v18 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
        sqlite3_bind_text(v16, 1, v17, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        v19 = *(sqlite3_stmt **)(v5 + 8);
        v20 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v19, 2, v20, -1, v18);
        CPSqliteStatementPerform();
        return CPSqliteStatementReset();
      }
    }
  }
  return result;
}

uint64_t ABTCCIsAccessRestricted()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "isAccessRestricted");
}

uint64_t ABTCCRequestAccess()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance"), "requestAccessWithError:", 0);
}

uint64_t ABTCCRequestAccessWithCompletion(uint64_t a1)
{
  void *v2;
  _QWORD v4[6];

  v2 = (void *)objc_msgSend(MEMORY[0x1E0D139A0], "sharedInstance");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __ABTCCRequestAccessWithCompletion_block_invoke;
  v4[3] = &unk_1E3CA49E0;
  v4[4] = v2;
  v4[5] = a1;
  return objc_msgSend(v2, "requestAuthorization:completionHandler:", 1, v4);
}

__CFSet *ABCopyROWIDsForOrphanedPeople()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyUIDsForOrphanedMultiValues()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyROWIDsForOrphanedMultiValueEntries()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyMultiValueIDsOrphanedPhoneLastFour()
{
  return _copyResultsForQueryWithRecordStore();
}

CFMutableSetRef ABCopyRecordIDsForOrphanedImages()
{
  __CFSet *v0;
  __CFSet *v1;
  __CFSet *v2;
  CFMutableSetRef Mutable;
  _QWORD v5[2];

  v0 = _copyResultsForQueryWithRecordStore();
  v1 = _copyResultsForQueryWithRecordStore();
  v2 = _copyResultsForQueryWithRecordStore();
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v5[0] = v0;
  v5[1] = Mutable;
  CFSetApplyFunction(v1, (CFSetApplierFunction)_subtractSetApplier, v5);
  CFSetApplyFunction(v2, (CFSetApplierFunction)_subtractSetApplier, v5);
  CFRelease(v0);
  CFRelease(v1);
  CFRelease(v2);
  return Mutable;
}

__CFSet *_copyResultsForQueryWithRecordStore()
{
  __CFSet *Mutable;
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  int v4;

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  v1 = CPSqliteConnectionStatementForSQL();
  if (v1)
  {
    v2 = v1;
    v3 = *(sqlite3_stmt **)(v1 + 8);
    if (v3)
    {
      while (sqlite3_step(v3) == 100)
      {
        v4 = sqlite3_column_int(*(sqlite3_stmt **)(v2 + 8), 0);
        CFSetAddValue(Mutable, (const void *)v4);
        v3 = *(sqlite3_stmt **)(v2 + 8);
      }
      CPSqliteStatementReset();
    }
  }
  return Mutable;
}

void _subtractSetApplier(void *value, CFSetRef *a2)
{
  if (!CFSetContainsValue(*a2, value))
    CFSetAddValue(a2[1], value);
}

void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(const __CFString *a1, uint64_t a2)
{
  __CFSet *v4;
  CFIndex Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFSet *v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFSet *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFSet *v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFSet *v28;
  CFIndex v29;
  CFIndex v30;
  const void **v31;
  const __CFArray *v32;
  int v33;
  CFIndex v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = _copyResultsForQueryWithRecordStore();
  Count = CFSetGetCount(v4);
  if (Count >= 1)
  {
    v6 = Count;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 158, 0, (uint64_t)CFSTR("deleted %ld orphaned people"), v7, v8, v9, v6);
      objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 3));
    }
  }
  CFRelease(v4);
  v10 = _copyResultsForQueryWithRecordStore();
  v11 = CFSetGetCount(v10);
  if (v11 >= 1)
  {
    v12 = v11;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 166, 0, (uint64_t)CFSTR("deleted %ld orphaned multi-values"), v13, v14, v15, v12);
      objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 4));
    }
  }
  CFRelease(v10);
  v16 = _copyResultsForQueryWithRecordStore();
  v17 = CFSetGetCount(v16);
  if (v17 >= 1)
  {
    v18 = v17;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 174, 0, (uint64_t)CFSTR("deleted %ld orphaned multi-value entries"), v19, v20, v21, v18);
      objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 5));
    }
  }
  CFRelease(v16);
  v22 = _copyResultsForQueryWithRecordStore();
  v23 = CFSetGetCount(v22);
  if (v23 >= 1)
  {
    v24 = v23;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 182, 0, (uint64_t)CFSTR("deleted %ld orphaned phone last fours"), v25, v26, v27, v24);
      objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 6));
    }
  }
  CFRelease(v22);
  v28 = ABCopyRecordIDsForOrphanedImages();
  v29 = CFSetGetCount(v28);
  if (v29 >= 1)
  {
    v30 = v29;
    v31 = (const void **)malloc_type_malloc(8 * v29, 0x80040B8603338uLL);
    CFSetGetValues(v28, v31);
    v32 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v31, v30, 0);
    v33 = ABCImageStoreRemoveImagesForRecordIds(a1, a2, v32, -1);
    CFRelease(v32);
    free(v31);
    if (v33)
    {
      v34 = CFSetGetCount(v28);
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 190, 0, (uint64_t)CFSTR("deleted %ld orphaned images"), v35, v36, v37, v34);
      objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 7));
    }
  }
  CFRelease(v28);
}

uint64_t ABDatabaseIntegrityResolutionRecorder(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0D13C20], "logDatabaseResolution:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1));
}

void ABDatabaseIntegrityCheckWithAddressBook(const __CFString *a1)
{
  CFStringRef ImageStore;

  ImageStore = ABCAddressBookGetImageStore(a1);
  ABDatabaseIntegrityCheckWithAddressBookAndImageStore(a1, (uint64_t)ImageStore);
}

void ABDatabaseIntegrityCheck()
{
  const __CFString *v0;
  const __CFString *v1;
  CFStringRef ImageStore;

  v0 = (const __CFString *)ABAddressBookCreateWithOptions(0, 0);
  if (v0)
  {
    v1 = v0;
    ImageStore = ABCAddressBookGetImageStore(v0);
    ABDatabaseIntegrityCheckWithAddressBookAndImageStore(v1, (uint64_t)ImageStore);
    CFRelease(v1);
  }
}

BOOL _performQuery()
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  return CPSqliteConnectionPerformSQL() == 101;
}

void ABCAddressBookMarkDirectoryForDeletion_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19BC4B000, a2, a3, "Failed to mark address book database for deletion: _cn_setValue:forExtendedAttribute: returned  %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void ABCAddressBookMarkDirectoryForDeletion_cold_2(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19BC4B000, log, OS_LOG_TYPE_ERROR, "Error fetching boot UUID (missing entitlements?); using an error value instead",
    v1,
    2u);
}

void ABCAddressBookIsDirectoryMarkedForDeletion_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19BC4B000, a2, a3, "Error fetching xattrs to check if database is marked for deletion: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void ABCAddressBookSaveWithConflictPolicy_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19BC4B000, a2, a3, "AddressBook failed to save: CPRecordStoreSaveWithCallbackAndTransactionType returned error: %{public}@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void ABCAddressBookDatabaseChanged_cold_1()
{
  __assert_rtn("ABCAddressBookDatabaseChanged", "ABCAddressBook.m", 1345, "callback != NULL");
}

void ABAddressBookRegisterChangeCallback_cold_1()
{
  __assert_rtn("ABAddressBookRegisterChangeCallback", "ABCAddressBook.m", 2009, "addressBookRef != __sharedAddressBook");
}

void ABAddressBookUnregisterChangeCallback_cold_1()
{
  __assert_rtn("ABAddressBookUnregisterChangeCallback", "ABCAddressBook.m", 2026, "addressBookRef != __sharedAddressBook");
}

void ABAddressBookUnregisterAllChangeCallbacks_cold_1()
{
  __assert_rtn("ABAddressBookUnregisterAllChangeCallbacks", "ABCAddressBook.m", 2046, "addressBookRef != __sharedAddressBook");
}

void ___createStartABDatabaseDoctorCoalescingTimer_block_invoke_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19BC4B000, a1, a3, "Error, could not create MachMessagePort for database doctor (%s)", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void ABCRecordSetValueAndReturnError_cold_1()
{
  __assert_rtn("ABCRecordSetValueAndReturnError", "ABCRecord.c", 99, "value != NULL && CFGetTypeID(value) == CFStringGetTypeID() && CFStringGetLength(value) != 0");
}

void ABCDBContextSaveMultiValue_cold_1()
{
  __assert_rtn("ABCDBContextSaveMultiValueSubEntry", "ABCDBContext.m", 1407, "[(id)value isKindOfClass:[NSString class]]");
}

void ABCIteratePeopleMatchingStringWithCallbacks_cold_1()
{
  __assert_rtn("ABCIteratePeopleMatchingStringWithCallbacks", "ABCDBContext.m", 4244, "CFArrayGetCount(results) == 0");
}

void ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates_cold_1()
{
  __assert_rtn("ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates", "ABCDBContext.m", 5261, "count == CFArrayGetCount(values)");
}

void __getIntlUtilityClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntlPreferencesLibrary(void)"), CFSTR("ABCDBContext.m"), 66, CFSTR("%s"), *a1);
  __break(1u);
}

void __getIntlUtilityClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getIntlUtilityClass(void)_block_invoke"), CFSTR("ABCDBContext.m"), 67, CFSTR("Unable to find class %s"), "IntlUtility");
  __break(1u);
}

void ABCreateSortKey_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19BC4B000, a2, OS_LOG_TYPE_ERROR, "Internal error from ucol_getSortKey for '%@'", (uint8_t *)&v2, 0xCu);
}

void ABAddressBookSetMe_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "AddressBook could not set the Me card because it could not find the Me card's source", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABAddressBookSetMe_cold_2(const __CFString **a1, NSObject *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138543362;
  v4 = ABLogErrorPtr(a1);
  _os_log_error_impl(&dword_19BC4B000, a2, OS_LOG_TYPE_ERROR, "AddressBook could not set the Me card. %{public}@", (uint8_t *)&v3, 0xCu);
}

void ABAddressBookShouldAnalyzeDatabase_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "Failed to analyze database: No database context available", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABAddressBookShouldAnalyzeDatabase_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "Failed to analyze database: No database connection available", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntlPreferencesLibrary(void)"), CFSTR("ABPerson.m"), 261, CFSTR("%s"), *a1);
  __break(1u);
}

void __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNSPersonNameComponentsFormatterPreferencesClass(void)_block_invoke"), CFSTR("ABPerson.m"), 262, CFSTR("Unable to find class %s"), "NSPersonNameComponentsFormatterPreferences");
  __break(1u);
}

void ABMultiValueAddValueAndLabel_cold_1()
{
  __assert_rtn("ABMultiValueAddValueAndLabel", "ABMultiValue.c", 124, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueInsertValueAndLabelAndUUIDAtIndex_cold_1()
{
  __assert_rtn("ABMultiValueInsertValueAndLabelAndUUIDAtIndex", "ABMultiValue.c", 137, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueRemoveValueAndLabelAtIndex_cold_1()
{
  __assert_rtn("ABMultiValueRemoveValueAndLabelAtIndex", "ABMultiValue.c", 144, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueReplaceValueAtIndex_cold_1()
{
  __assert_rtn("ABMultiValueReplaceValueAtIndex", "ABMultiValue.c", 151, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueReplaceLabelAtIndex_cold_1()
{
  __assert_rtn("ABMultiValueReplaceLabelAtIndex", "ABMultiValue.c", 158, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueSetPrimaryIdentifier_cold_1()
{
  __assert_rtn("ABMultiValueSetPrimaryIdentifier", "ABMultiValue.c", 165, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueInsertAndCreateIdentifier_cold_1()
{
  __assert_rtn("ABMultiValueInsertAndCreateIdentifier", "ABMultiValue.c", 182, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABMultiValueAddValueAndLabelIfUnique_cold_1()
{
  __assert_rtn("ABMultiValueAddValueAndLabelIfUnique", "ABMultiValue.c", 263, "((ABCMultiValue *)multiValue)->flags.isMutable");
}

void ABSourceSetMe_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "Asked to remove the Me card, but we don't have one. Ignoring.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABSourceSetMe_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "Changed the Me card, but could not load the address book to record all changes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABSourceSetMe_cold_3(const __CFString **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ABLogErrorPtr(a1);
  OUTLINED_FUNCTION_2_0(&dword_19BC4B000, v1, v2, "Asked to set a nil Me card, but could not remove the old one. %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_5();
}

void ABSourceSetMe_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "Found the Me card we were asked to set in the container, but we could not load it.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABSourceSetMe_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "Asked to set the Me card, but it's the same as the one we already have. Ignoring.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABSourceSetMe_cold_6(const __CFString **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ABLogErrorPtr(a1);
  OUTLINED_FUNCTION_2_0(&dword_19BC4B000, v1, v2, "Error encountered while attempting to replace the existing Me card. %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_5();
}

void ABSourceSetMe_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "Asked to set the Me card to a contact we could not find in the container. Nothing more we can do here.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABPolicyCreateWithCoder_cold_1()
{
  __assert_rtn("ABPolicyCreateWithCoder", "ABPolicy.m", 587, "propertyList != NULL");
}

void ABLimitedAccessContactsCountForBundle_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19BC4B000, a2, OS_LOG_TYPE_ERROR, "ABLimitedAccessContactsCountForBundle unable to create statement (%@)", (uint8_t *)&v2, 0xCu);
}

void ABImageUtilsCreateScaledImageData_cold_1()
{
  __assert_rtn("ABImageUtilsCreateScaledImageData", "ABImageUtils.c", 511, "bitsPerComponent == 5 || bitsPerComponent == 8");
}

void ABImageUtilsCopySyncImageForPerson_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: no original image available to sync.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABImageUtilsCopySyncImageForPerson_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: can't get size of original image to sync.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABImageUtilsCopySyncImageForPerson_cold_3(void *a1, int a2, NSObject *a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = 134218240;
  v6 = objc_msgSend(a1, "length");
  v7 = 1024;
  v8 = a2;
  _os_log_error_impl(&dword_19BC4B000, a3, OS_LOG_TYPE_ERROR, "[Likeness Update] Scaling/compression failed to reduce image of size %lu to max size %u. Proceeding without sync image.", (uint8_t *)&v5, 0x12u);
}

void ABImageUtilsCopySyncImageForPerson_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "Returning the original image.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABImageUtilsCopySyncImageForPerson_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "Transforming the original image to normal orientation.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABImageUtilsCopySyncImageForPerson_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_19BC4B000, v0, v1, "[Likeness Update] ABImageUtilsCopySyncImageForPerson: Unable to get sync image size. Crop rect will be messed up", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABImageUtilsCopySyncImageForPerson_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4(&dword_19BC4B000, v0, v1, "Returning the AB saved sync image.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ABChangeHistoryClearEntityChangeTableRowIDsForClient_cold_1()
{
  __assert_rtn("ABChangeHistoryClearEntityChangeTableRowIDsForClient", "ABChangeHistory.m", 1133, "entityType == ABChangeHistoryEntityTypePerson || entityType == ABChangeHistoryEntityTypeGroup");
}

void _performQueryToClearSequenceNumber_cold_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(a1);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_19BC4B000, MEMORY[0x1E0C81028], v1, "Error %d with query to clear sequence number: %s\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void ABChangeHistoryInsertPersonChangeRecord_cold_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(a1);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_19BC4B000, MEMORY[0x1E0C81028], v1, "Error %d preparing person changes log statement: %s\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void ABChangeHistoryInsertPersonChangeRecord_cold_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_1(a1);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_19BC4B000, MEMORY[0x1E0C81028], v1, "Error %d adding change log entry statement: %s\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void ABCFFTSTokenizerNext_cold_1()
{
  __assert_rtn("ABTokenListGetCount", "ABSQLiteICUSupport.m", 1156, "list != NULL");
}

void ABTokenListDestroy_cold_1()
{
  __assert_rtn("ABTokenListDestroy", "ABSQLiteICUSupport.m", 1045, "inList");
}

void ABTokenListRemoveAllTokens_cold_1()
{
  __assert_rtn("ABTokenListRemoveAllTokens", "ABSQLiteICUSupport.m", 1228, "list");
}

void ABTokenListPopulateFromString_cold_1()
{
  __assert_rtn("ABTokenListPopulateFromString", "ABSQLiteICUSupport.m", 1108, "list != NULL");
}

void ABTokenListGetTokenStartByteOffsetAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenStartByteOffsetAtIndex", "ABSQLiteICUSupport.m", 1163, "list");
}

void ABTokenListGetTokenStartByteOffsetAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenStartByteOffsetAtIndex", "ABSQLiteICUSupport.m", 1164, "index < list->firstUnusedIndex");
}

void ABTokenListGetTokenEndByteOffsetAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenEndByteOffsetAtIndex", "ABSQLiteICUSupport.m", 1173, "list");
}

void ABTokenListGetTokenEndByteOffsetAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenEndByteOffsetAtIndex", "ABSQLiteICUSupport.m", 1174, "index < list->firstUnusedIndex");
}

void ABTokenListGetTokenAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenAtIndex", "ABSQLiteICUSupport.m", 1184, "list");
}

void ABTokenListGetTokenAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenAtIndex", "ABSQLiteICUSupport.m", 1185, "index < list->firstUnusedIndex");
}

void ABTokenListGetTokenCollationKeyAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenCollationKeyAtIndex", "ABSQLiteICUSupport.m", 1195, "list");
}

void ABTokenListGetTokenCollationKeyAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenCollationKeyAtIndex", "ABSQLiteICUSupport.m", 1196, "index < list->firstUnusedIndex");
}

void ABTokenListGetTokenCollationKeyLengthAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenCollationKeyLengthAtIndex", "ABSQLiteICUSupport.m", 1206, "list");
}

void ABTokenListGetTokenCollationKeyLengthAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenCollationKeyLengthAtIndex", "ABSQLiteICUSupport.m", 1207, "index < list->firstUnusedIndex");
}

void ABTokenListGetTokenRangeAtIndex_cold_1()
{
  __assert_rtn("ABTokenListGetTokenRangeAtIndex", "ABSQLiteICUSupport.m", 1217, "list");
}

void ABTokenListGetTokenRangeAtIndex_cold_2()
{
  __assert_rtn("ABTokenListGetTokenRangeAtIndex", "ABSQLiteICUSupport.m", 1218, "index < list->firstUnusedIndex");
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CC0]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1E0C97D08](theArray, range.location, range.length, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C97FF8](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1E0C98068]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1E0C98088](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x1E0C982A8](theSet, theString);
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982C0](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982D0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x1E0C98478](allocator, formatter, string, rangep);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1E0C98650](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98790]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987C8](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x1E0C98870](allocator, name);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1E0C98898](remote, *(_QWORD *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

uint64_t CFPhoneNumberCreate()
{
  return MEMORY[0x1E0D17838]();
}

uint64_t CFPhoneNumberCreateString()
{
  return MEMORY[0x1E0D17848]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1E0C98D88](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98DA0](allocator, capacity, theSet);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1E0C98DB8]();
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1E0C98F30](*(_QWORD *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C98F40](theString);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
  MEMORY[0x1E0C991F8](theString, replacement);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x1E0C99218](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x1E0C99240](tokenizer, string, range.location, range.length);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1E0C99248](string, range, transform, reverse);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995C8](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1E0C9BB60](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
  MEMORY[0x1E0C9C3F8](c, components);
}

uint64_t CGImageCreateByScaling()
{
  return MEMORY[0x1E0CBC2A0]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC588](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1E0CBC618](isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

uint64_t CPCopySharedResourcesPreferencesDomainForDomain()
{
  return MEMORY[0x1E0CFA250]();
}

uint64_t CPFileBuildDirectoriesToPath()
{
  return MEMORY[0x1E0CFA280]();
}

uint64_t CPPhoneNumberCopyActiveCountryCode()
{
  return MEMORY[0x1E0CFA330]();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1E0CFA360]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1E0CFA370]();
}

uint64_t CPPhoneNumberCopyNormalized()
{
  return MEMORY[0x1E0CFA378]();
}

uint64_t CPPhoneNumbersEqual()
{
  return MEMORY[0x1E0CFA3A0]();
}

uint64_t CPPhoneNumbersEqualWithCountries()
{
  return MEMORY[0x1E0CFA3A8]();
}

uint64_t CPRecordCopyChangedProperties()
{
  return MEMORY[0x1E0CFA3B8]();
}

uint64_t CPRecordCopyProperty()
{
  return MEMORY[0x1E0CFA3C0]();
}

uint64_t CPRecordCreate()
{
  return MEMORY[0x1E0CFA3C8]();
}

uint64_t CPRecordCreateCopy()
{
  return MEMORY[0x1E0CFA3D0]();
}

uint64_t CPRecordCreateWithRecordID()
{
  return MEMORY[0x1E0CFA3D8]();
}

uint64_t CPRecordGetCachedProperty()
{
  return MEMORY[0x1E0CFA3E0]();
}

uint64_t CPRecordGetClass()
{
  return MEMORY[0x1E0CFA3E8]();
}

uint64_t CPRecordGetID()
{
  return MEMORY[0x1E0CFA3F0]();
}

uint64_t CPRecordGetOriginalProperty()
{
  return MEMORY[0x1E0CFA400]();
}

uint64_t CPRecordGetProperty()
{
  return MEMORY[0x1E0CFA408]();
}

uint64_t CPRecordGetPropertyDescriptor()
{
  return MEMORY[0x1E0CFA410]();
}

uint64_t CPRecordGetStore()
{
  return MEMORY[0x1E0CFA418]();
}

uint64_t CPRecordIndexOfPropertyNamed()
{
  return MEMORY[0x1E0CFA428]();
}

uint64_t CPRecordInitializeProperty()
{
  return MEMORY[0x1E0CFA430]();
}

uint64_t CPRecordInvalidateRecord()
{
  return MEMORY[0x1E0CFA438]();
}

uint64_t CPRecordIsPendingAdd()
{
  return MEMORY[0x1E0CFA448]();
}

uint64_t CPRecordMarkChanged()
{
  return MEMORY[0x1E0CFA458]();
}

uint64_t CPRecordMarkPropertyChanged()
{
  return MEMORY[0x1E0CFA460]();
}

uint64_t CPRecordSetProperty()
{
  return MEMORY[0x1E0CFA478]();
}

uint64_t CPRecordShow()
{
  return MEMORY[0x1E0CFA480]();
}

uint64_t CPRecordStoreAddExistingRecord()
{
  return MEMORY[0x1E0CFA488]();
}

uint64_t CPRecordStoreAddRecord()
{
  return MEMORY[0x1E0CFA490]();
}

uint64_t CPRecordStoreCopyAddedRecords()
{
  return MEMORY[0x1E0CFA498]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClass()
{
  return MEMORY[0x1E0CFA4A0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhere()
{
  return MEMORY[0x1E0CFA4A8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()
{
  return MEMORY[0x1E0CFA4B0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
{
  return MEMORY[0x1E0CFA4B8]();
}

uint64_t CPRecordStoreCopyChangedRecords()
{
  return MEMORY[0x1E0CFA4C0]();
}

uint64_t CPRecordStoreCopyDeletedRecordIDsOfClass()
{
  return MEMORY[0x1E0CFA4C8]();
}

uint64_t CPRecordStoreCopyInstancesOfClassWithUIDs()
{
  return MEMORY[0x1E0CFA4D8]();
}

uint64_t CPRecordStoreCopyValueForProperty()
{
  return MEMORY[0x1E0CFA4E0]();
}

uint64_t CPRecordStoreCreateColumnListWithAliasAndExtraColumns()
{
  return MEMORY[0x1E0CFA4F0]();
}

uint64_t CPRecordStoreCreateReadColumns()
{
  return MEMORY[0x1E0CFA500]();
}

uint64_t CPRecordStoreCreateSelectPrefix()
{
  return MEMORY[0x1E0CFA508]();
}

uint64_t CPRecordStoreCreateSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1E0CFA510]();
}

uint64_t CPRecordStoreCreateSelectStatement()
{
  return MEMORY[0x1E0CFA518]();
}

uint64_t CPRecordStoreCreateTablesForClass()
{
  return MEMORY[0x1E0CFA520]();
}

uint64_t CPRecordStoreCreateWithPath()
{
  return MEMORY[0x1E0CFA528]();
}

uint64_t CPRecordStoreCreateWithPathAndOptions()
{
  return MEMORY[0x1E0CFA530]();
}

uint64_t CPRecordStoreDestroy()
{
  return MEMORY[0x1E0CFA558]();
}

uint64_t CPRecordStoreGetCachedInstanceOfClassWithUID()
{
  return MEMORY[0x1E0CFA560]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithOrderAndBindBlockAndProperties()
{
  return MEMORY[0x1E0CFA578]();
}

uint64_t CPRecordStoreGetContext()
{
  return MEMORY[0x1E0CFA5A0]();
}

uint64_t CPRecordStoreGetCountOfInstancesOfClassWhere()
{
  return MEMORY[0x1E0CFA5A8]();
}

uint64_t CPRecordStoreGetDatabase()
{
  return MEMORY[0x1E0CFA5B8]();
}

uint64_t CPRecordStoreGetInstanceOfClassWithUID()
{
  return MEMORY[0x1E0CFA5C0]();
}

uint64_t CPRecordStoreGetLastSequenceNumber()
{
  return MEMORY[0x1E0CFA5C8]();
}

uint64_t CPRecordStoreGetRecordIDForRowid()
{
  return MEMORY[0x1E0CFA5D0]();
}

uint64_t CPRecordStoreGetSequenceNumber()
{
  return MEMORY[0x1E0CFA5E0]();
}

uint64_t CPRecordStoreHasUnsavedChanges()
{
  return MEMORY[0x1E0CFA5E8]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClass()
{
  return MEMORY[0x1E0CFA5F0]();
}

uint64_t CPRecordStoreInvalidateCaches()
{
  return MEMORY[0x1E0CFA600]();
}

uint64_t CPRecordStoreLogChanges()
{
  return MEMORY[0x1E0CFA610]();
}

uint64_t CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType()
{
  return MEMORY[0x1E0CFA618]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1E0CFA620]();
}

uint64_t CPRecordStoreProcessDeletedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1E0CFA630]();
}

uint64_t CPRecordStoreProcessQueryWithBindBlock()
{
  return MEMORY[0x1E0CFA638]();
}

uint64_t CPRecordStoreProcessRecordStatementWithPropertyIndices()
{
  return MEMORY[0x1E0CFA640]();
}

uint64_t CPRecordStoreProcessStatement()
{
  return MEMORY[0x1E0CFA648]();
}

uint64_t CPRecordStoreProcessStatementWithPropertyIndices()
{
  return MEMORY[0x1E0CFA650]();
}

uint64_t CPRecordStoreRegisterClass()
{
  return MEMORY[0x1E0CFA658]();
}

uint64_t CPRecordStoreRemoveRecord()
{
  return MEMORY[0x1E0CFA668]();
}

uint64_t CPRecordStoreRemoveRecordOfClassWithUID()
{
  return MEMORY[0x1E0CFA670]();
}

uint64_t CPRecordStoreRevert()
{
  return MEMORY[0x1E0CFA678]();
}

uint64_t CPRecordStoreSaveWithCallbackAndTransactionType()
{
  return MEMORY[0x1E0CFA680]();
}

uint64_t CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType()
{
  return MEMORY[0x1E0CFA688]();
}

uint64_t CPRecordStoreSetContext()
{
  return MEMORY[0x1E0CFA690]();
}

uint64_t CPRecordStoreSetSetupHandler()
{
  return MEMORY[0x1E0CFA698]();
}

uint64_t CPRecordStoreSetValueForProperty()
{
  return MEMORY[0x1E0CFA6A0]();
}

uint64_t CPRecordUnloadProperty()
{
  return MEMORY[0x1E0CFA6A8]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

uint64_t CPSqliteConnectionBegin()
{
  return MEMORY[0x1E0CFA6D8]();
}

uint64_t CPSqliteConnectionBeginTransactionType()
{
  return MEMORY[0x1E0CFA6E0]();
}

uint64_t CPSqliteConnectionCommit()
{
  return MEMORY[0x1E0CFA6E8]();
}

uint64_t CPSqliteConnectionCopyValueForProperty()
{
  return MEMORY[0x1E0CFA6F0]();
}

uint64_t CPSqliteConnectionDisableProgressHandlerCallback()
{
  return MEMORY[0x1E0CFA700]();
}

uint64_t CPSqliteConnectionEnableProgressHandlerCallback()
{
  return MEMORY[0x1E0CFA708]();
}

uint64_t CPSqliteConnectionFlushStatementCache()
{
  return MEMORY[0x1E0CFA710]();
}

uint64_t CPSqliteConnectionIntegerForProperty()
{
  return MEMORY[0x1E0CFA720]();
}

uint64_t CPSqliteConnectionIntegerForPropertyWithDefaultValue()
{
  return MEMORY[0x1E0CFA728]();
}

uint64_t CPSqliteConnectionPerformSQL()
{
  return MEMORY[0x1E0CFA730]();
}

uint64_t CPSqliteConnectionRemoveProperty()
{
  return MEMORY[0x1E0CFA738]();
}

uint64_t CPSqliteConnectionRollback()
{
  return MEMORY[0x1E0CFA740]();
}

uint64_t CPSqliteConnectionRowidOfLastInsert()
{
  return MEMORY[0x1E0CFA748]();
}

uint64_t CPSqliteConnectionSetIntegerForProperty()
{
  return MEMORY[0x1E0CFA750]();
}

uint64_t CPSqliteConnectionSetValueForProperty()
{
  return MEMORY[0x1E0CFA758]();
}

uint64_t CPSqliteConnectionStatementForSQL()
{
  return MEMORY[0x1E0CFA760]();
}

uint64_t CPSqliteDatabaseConnectionForReading()
{
  return MEMORY[0x1E0CFA768]();
}

uint64_t CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags()
{
  return MEMORY[0x1E0CFA770]();
}

uint64_t CPSqliteDatabaseConnectionForWriting()
{
  return MEMORY[0x1E0CFA778]();
}

uint64_t CPSqliteDatabaseCopyUniqueIdentifier()
{
  return MEMORY[0x1E0CFA790]();
}

uint64_t CPSqliteDatabaseDeletePreservingOptions()
{
  return MEMORY[0x1E0CFA7A0]();
}

uint64_t CPSqliteDatabaseRegisterFunction()
{
  return MEMORY[0x1E0CFA7B0]();
}

uint64_t CPSqliteDatabaseReleaseSqliteConnection()
{
  return MEMORY[0x1E0CFA7C8]();
}

uint64_t CPSqliteDatabaseReleaseSqliteStatement()
{
  return MEMORY[0x1E0CFA7D0]();
}

uint64_t CPSqliteDatabaseSetAccessRequestHandler()
{
  return MEMORY[0x1E0CFA7D8]();
}

uint64_t CPSqliteDatabaseSetAutoRetryStatements()
{
  return MEMORY[0x1E0CFA7E0]();
}

uint64_t CPSqliteDatabaseSetAutoVacuumLevel()
{
  return MEMORY[0x1E0CFA7E8]();
}

uint64_t CPSqliteDatabaseSetConnectionInitializer()
{
  return MEMORY[0x1E0CFA7F8]();
}

uint64_t CPSqliteDatabaseSetCorruptionHandler()
{
  return MEMORY[0x1E0CFA800]();
}

uint64_t CPSqliteDatabaseSetDataProtectionLevel()
{
  return MEMORY[0x1E0CFA808]();
}

uint64_t CPSqliteDatabaseSetDatabaseDeletedCallback()
{
  return MEMORY[0x1E0CFA810]();
}

uint64_t CPSqliteDatabaseSetJournalModeWAL()
{
  return MEMORY[0x1E0CFA820]();
}

uint64_t CPSqliteDatabaseSetMigrationHandlers()
{
  return MEMORY[0x1E0CFA828]();
}

uint64_t CPSqliteDatabaseSetMigrationPluginBundleID()
{
  return MEMORY[0x1E0CFA830]();
}

uint64_t CPSqliteDatabaseSetShouldMigrateInProcess()
{
  return MEMORY[0x1E0CFA840]();
}

uint64_t CPSqliteDatabaseSetShouldRequestUnlock()
{
  return MEMORY[0x1E0CFA848]();
}

uint64_t CPSqliteDatabaseSetShouldUseInhibitorForConnections()
{
  return MEMORY[0x1E0CFA850]();
}

uint64_t CPSqliteDatabaseSetShouldYieldWhenRequested()
{
  return MEMORY[0x1E0CFA858]();
}

uint64_t CPSqliteDatabaseSetVersion()
{
  return MEMORY[0x1E0CFA878]();
}

uint64_t CPSqliteDatabaseStatementForReading()
{
  return MEMORY[0x1E0CFA880]();
}

uint64_t CPSqliteDatabaseStatementForWriting()
{
  return MEMORY[0x1E0CFA888]();
}

uint64_t CPSqliteRegisterYieldNotifyBlock()
{
  return MEMORY[0x1E0CFA8A0]();
}

uint64_t CPSqliteStatementApplyValuesFromRecord()
{
  return MEMORY[0x1E0CFA8B8]();
}

uint64_t CPSqliteStatementCopyStringResult()
{
  return MEMORY[0x1E0CFA8C0]();
}

uint64_t CPSqliteStatementIntegerResult()
{
  return MEMORY[0x1E0CFA8D0]();
}

uint64_t CPSqliteStatementPerform()
{
  return MEMORY[0x1E0CFA8D8]();
}

uint64_t CPSqliteStatementProcessPhoneQuery()
{
  return MEMORY[0x1E0CFA8E0]();
}

uint64_t CPSqliteStatementReset()
{
  return MEMORY[0x1E0CFA8E8]();
}

uint64_t CPSqliteStatementSendResults()
{
  return MEMORY[0x1E0CFA8F0]();
}

uint64_t CPSystemRootDirectory()
{
  return MEMORY[0x1E0CFA908]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1E0CB2DA0](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  MEMORY[0x1E0CB2DA8](table, key, value);
}

void NSZoneFree(NSZone *zone, void *ptr)
{
  MEMORY[0x1E0CB3458](zone, ptr);
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return (void *)MEMORY[0x1E0CB3468](zone, size);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  return (void *)MEMORY[0x1E0CB3470](zone, ptr, size);
}

uint64_t PNCopyBestGuessNormalizedNumberForCountry()
{
  return MEMORY[0x1E0D17868]();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return MEMORY[0x1E0D17878]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return MEMORY[0x1E0CA5940](inUTI, inConformsToUTI);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1E0C9A0C0]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1E0C9A178]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFStringTokenizerCreateNamePartsArrayWithStringAsCompositeName()
{
  return MEMORY[0x1E0C9A548]();
}

uint64_t _CFStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName()
{
  return MEMORY[0x1E0C9A550]();
}

uint64_t _CPCreateUTF8StringFromCFString()
{
  return MEMORY[0x1E0CFA9E8]();
}

uint64_t _PNCopyIndexStringsForAddressBookSearch()
{
  return MEMORY[0x1E0D178B0]();
}

uint64_t _PNCopyLastFourDigitsOfLocalNumber()
{
  return MEMORY[0x1E0D178B8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

void asl_free(asl_object_t obj)
{
  MEMORY[0x1E0C815C8](obj);
}

asl_object_t asl_new(uint32_t type)
{
  return (asl_object_t)MEMORY[0x1E0C815D8](*(_QWORD *)&type);
}

asl_object_t asl_open(const char *ident, const char *facility, uint32_t opts)
{
  return (asl_object_t)MEMORY[0x1E0C815E0](ident, facility, *(_QWORD *)&opts);
}

int asl_send(asl_object_t obj, asl_object_t msg)
{
  return MEMORY[0x1E0C815E8](obj, msg);
}

int asl_set(asl_object_t obj, const char *key, const char *value)
{
  return MEMORY[0x1E0C815F0](obj, key, value);
}

int asl_set_filter(asl_object_t client, int f)
{
  return MEMORY[0x1E0C815F8](client, *(_QWORD *)&f);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t decomposePhoneNumber()
{
  return MEMORY[0x1E0CFAA28]();
}

uint64_t decomposedPhoneNumbersEqual()
{
  return MEMORY[0x1E0D178D0]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_pidfdinfo(int pid, int fd, int flavor, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C38](*(_QWORD *)&pid, *(_QWORD *)&fd, *(_QWORD *)&flavor, buffer, *(_QWORD *)&buffersize);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1E0C84F38](a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  return (void *)MEMORY[0x1E0DE8550](a1, *(_QWORD *)&nBytes);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1E0DE85C0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_blob_bytes(sqlite3_blob *a1)
{
  return MEMORY[0x1E0DE8608](a1);
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  return MEMORY[0x1E0DE8610](a1);
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  return MEMORY[0x1E0DE8618](a1, zDb, zTable, zColumn, iRow, *(_QWORD *)&flags, ppBlob);
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return MEMORY[0x1E0DE8620](a1, Z, *(_QWORD *)&N, *(_QWORD *)&iOffset);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE8648](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1E0DE86A0](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1E0DE8708](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1E0DE8738](a1, *(_QWORD *)&op);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x1E0DE8780](db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return (char *)MEMORY[0x1E0DE87A8](pStmt);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x1E0DE87D0](a1);
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  return MEMORY[0x1E0DE87E0](a1);
}

void sqlite3_interrupt(sqlite3 *a1)
{
  MEMORY[0x1E0DE8810](a1);
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1E0DE8838](*(_QWORD *)&a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8878](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  MEMORY[0x1E0DE88D0](a1, a2, *(_QWORD *)&a3);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  MEMORY[0x1E0DE88F0](a1, *(_QWORD *)&a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
  MEMORY[0x1E0DE8920](a1, a2);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return MEMORY[0x1E0DE89F0](a1, *(_QWORD *)&uMask, xCallback, pCtx);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1E0DE8A10](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1E0C85508](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

double u_getNumericValue(UChar32 c)
{
  double result;

  MEMORY[0x1E0DE59C8](*(_QWORD *)&c);
  return result;
}

void u_getVersion(UVersionInfo versionArray)
{
  MEMORY[0x1E0DE59D8](versionArray);
}

uint64_t ucol_close()
{
  return MEMORY[0x1E0DE5F70]();
}

uint64_t ucol_getBound()
{
  return MEMORY[0x1E0DE5F98]();
}

uint64_t ucol_getSortKey()
{
  return MEMORY[0x1E0DE5FD0]();
}

uint64_t ucol_getUCAVersion()
{
  return MEMORY[0x1E0DE5FE0]();
}

uint64_t ucol_getVersion()
{
  return MEMORY[0x1E0DE5FE8]();
}

uint64_t ucol_mergeSortkeys()
{
  return MEMORY[0x1E0DE5FF0]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1E0DE6008]();
}

uint64_t ucol_setAttribute()
{
  return MEMORY[0x1E0DE6030]();
}

uint64_t ucol_setStrength()
{
  return MEMORY[0x1E0DE6038]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1E0DE69A0]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1E0DE69E0]();
}

uint64_t uset_span()
{
  return MEMORY[0x1E0DE6A18]();
}

