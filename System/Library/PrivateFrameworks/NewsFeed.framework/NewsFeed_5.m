uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_79(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_81(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_82(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_83(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_85(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_86(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_87(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_89(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_91(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_92(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_93(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_95(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_96(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_97(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_99(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_101(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_102(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_103(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_105(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_106(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_107(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_109(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_111(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_112(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_113(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_115(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_116(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_117(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_119(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for FormatBoolean(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAccessibilityProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F9)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 1018;
    if (a3 >= 0x3FA)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x3FA)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = (-a2 & 3) << 60;
      *(_BYTE *)(result + 8) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAccessibilityProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FA && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1018);
  v3 = ((*(_QWORD *)a1 >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 8))) ^ 0x3FF;
  if (v3 >= 0x3F9)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatFontScalingStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1BA80761C + 4 * byte_1BB937989[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1BA807650 + 4 * byte_1BB937984[v4]))();
}

uint64_t sub_1BA807650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA807658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA807660);
  return result;
}

uint64_t sub_1BA80766C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA807674);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1BA807678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA807680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatEquationOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1BA80771C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFD)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 16);
      if (v15 > 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA8077F0 + 4 * byte_1BB8FC500[(v9 - 1)]))();
}

uint64_t sub_1BA807860()
{
  char *v0;

  return sub_1BA5292C4(*v0);
}

uint64_t storeEnumTagSinglePayload for FormatSyncImageContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSyncImageContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

void sub_1BA80791C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_1BA807B78()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1BA807B64);
}

void sub_1BA807B80()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1BA807B64);
}

void sub_1BA807B90()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1BA807B64);
}

uint64_t sub_1BA807B9C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA807C70 + 4 * byte_1BB952580[(v9 - 1)]))();
}

void sub_1BA807CE0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1BA807E90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA807F40 + 4 * byte_1BB952592[(v7 - 1)]))();
}

uint64_t sub_1BA807F9C()
{
  unsigned __int8 *v0;

  return sub_1BA807FA4(*v0);
}

uint64_t sub_1BA807FA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BA807FDC + 4 * byte_1BB890F49[a1]))(0xD000000000000010, 0x80000001BB967170);
}

uint64_t sub_1BA807FDC()
{
  return 0x4264657472617473;
}

uint64_t sub_1BA808000(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1BA808028()
{
  return 0x5374736568676968;
}

uint64_t sub_1BA80804C()
{
  return 0x736B6165727473;
}

uint64_t storeEnumTagSinglePayload for FormatBindingBoolExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = a2 + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBoolBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x18)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 25;
    if (a3 >= 0x19)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0x19)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_WORD *)(result + 8) = (((-a2 >> 3) & 3) - 4 * (_WORD)a2) << 11;
    }
  }
  return result;
}

NewsFeed::FormatAnchor_optional sub_1BA808100(Swift::String *a1)
{
  return FormatAnchor.init(rawValue:)(*a1);
}

uint64_t sub_1BA80810C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA808134(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA808134(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA808164 + 4 * byte_1BB8AE645[a1]))(0x6465786966, 0xE500000000000000);
}

uint64_t sub_1BA808164()
{
  return 0x694664656C616373;
}

uint64_t sub_1BA808184()
{
  return 0x736E6D756C6F63;
}

uint64_t sub_1BA80819C()
{
  return 1819044198;
}

uint64_t sub_1BA8081AC()
{
  return 0x69466F54657A6973;
}

unint64_t sub_1BA8081C8()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA8081E4()
{
  return 0x747265766E69;
}

uint64_t sub_1BA8081F8()
{
  return 0x7274654D746E6F66;
}

uint64_t sub_1BA808214()
{
  return 0x4664657A69736572;
}

uint64_t sub_1BA808234()
{
  char *v0;

  return sub_1BA52097C(*v0);
}

uint64_t getEnumTagSinglePayload for HeadlineViewLayout.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA80824C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA808274(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA808274(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA8082A8 + 4 * byte_1BB8AE55E[a1]))(0x6E61656C6F6F62, 0xE700000000000000);
}

uint64_t sub_1BA8082A8()
{
  return 0x726F6C6F63;
}

uint64_t sub_1BA8082BC()
{
  return 1702125924;
}

uint64_t sub_1BA8082CC()
{
  return 1836412517;
}

uint64_t sub_1BA8082DC()
{
  return 0x74616F6C66;
}

uint64_t sub_1BA8082F0()
{
  return 0x72656765746E69;
}

uint64_t sub_1BA808304()
{
  return 0x676E69727473;
}

uint64_t sub_1BA808318()
{
  return 7107189;
}

uint64_t sub_1BA808328()
{
  return 1953394534;
}

uint64_t sub_1BA808338()
{
  return 0x6567616D69;
}

uint64_t getEnumTagSinglePayload for FormatFontDesign(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBorder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s5ColorOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t _s5ColorOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA8084F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA808520 + 4 * byte_1BB8AE37C[*v0]))();
}

void sub_1BA808520(_QWORD *a1@<X8>)
{
  *a1 = 1954047348;
  a1[1] = 0xE400000000000000;
}

void sub_1BA808534(_QWORD *a1@<X8>)
{
  *a1 = 1819242338;
  a1[1] = 0xE400000000000000;
}

void sub_1BA808548(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "layeredMedia");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1BA80856C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6572616873;
  a1[1] = v1;
}

void sub_1BA808580(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

void sub_1BA808594(_QWORD *a1@<X8>)
{
  *a1 = 0x656D695465746164;
  a1[1] = 0xE800000000000000;
}

void sub_1BA8085B0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x74616F6C66;
  a1[1] = v1;
}

uint64_t sub_1BA8085C4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA8085EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA8085EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80861C + 4 * byte_1BB8AE2EC[a1]))(0x7974706D65, 0xE500000000000000);
}

uint64_t sub_1BA80861C()
{
  return 0x676E69646E6962;
}

uint64_t sub_1BA808634()
{
  return 0x6D6574737973;
}

uint64_t sub_1BA808648()
{
  return 0x656C646E7562;
}

uint64_t sub_1BA80865C()
{
  return 0x646E616D6D6F63;
}

uint64_t sub_1BA808674()
{
  return 0x65746F6D6572;
}

uint64_t sub_1BA808688()
{
  return 0x686374697773;
}

uint64_t sub_1BA80869C()
{
  return 0x65746E4972657375;
}

uint64_t sub_1BA8086C0()
{
  return 0x656C797473;
}

uint64_t sub_1BA8086D0()
{
  return 0x726F7463656C6573;
}

uint64_t getEnumTagSinglePayload for FormatPackage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

NewsFeed::FormatAccessibility_optional sub_1BA808784(Swift::String *a1)
{
  return FormatAccessibility.init(rawValue:)(*a1);
}

uint64_t sub_1BA808794()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA8087C0 + 4 * byte_1BB8AE728[*v0]))();
}

void sub_1BA8087C0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6D6F74737563;
  a1[1] = v1;
}

void sub_1BA8087D4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x65746F6D6572;
  a1[1] = v1;
}

void sub_1BA8087E8(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69646E6962;
  a1[1] = 0xE700000000000000;
}

void sub_1BA808804(_QWORD *a1@<X8>)
{
  *a1 = 0x646E756F626E75;
  a1[1] = 0xE700000000000000;
}

ValueMetadata *type metadata accessor for FeedLayoutOrder()
{
  return &type metadata for FeedLayoutOrder;
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 7)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 8;
    if (a3 >= 8)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 8)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = (-2 * a2) & 0x1E;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageNodeBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 8 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 8);
  v3 = ~(*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF;
  if (v3 >= 7)
    v3 = -1;
  return v3 + 1;
}

void sub_1BA8088E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65756C6176;
  if (*v1)
    v2 = 0x6465646E756F72;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatPoint(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

NewsFeed::FormatFontScalingStyle_optional sub_1BA808948(Swift::String *a1)
{
  return FormatFontScalingStyle.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FeedWebEmbed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatBindingTextExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F9)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 506;
    if (a3 >= 0x1FA)
      *(_BYTE *)(result + 107) = 1;
  }
  else
  {
    if (a3 >= 0x1FA)
      *(_BYTE *)(result + 107) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_WORD *)(result + 104) = (-256 * a2) & 0xF800;
      *(_BYTE *)(result + 106) = (((-a2 & 0x100) << 12) - (a2 << 21)) >> 16;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingTextExpression(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1FA && *(_BYTE *)(a1 + 107))
    return (*(_DWORD *)a1 + 506);
  v3 = ((*(unsigned __int8 *)(a1 + 106) >> 5) | (8
                                               * ((*(unsigned __int16 *)(a1 + 104) >> 11) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 106) >> 4) & 1))))) ^ 0x1FF;
  if (v3 >= 0x1F9)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatFontScalingData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 245;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 11;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSubgroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatFontScaling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 244;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 12;
  }
  return result;
}

uint64_t sub_1BA808AEC@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupPaidVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA808B44 + 4 * byte_1BB925E01[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA808B78 + 4 * byte_1BB925DFC[v4]))();
}

uint64_t sub_1BA808B78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA808B80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA808B88);
  return result;
}

uint64_t sub_1BA808B94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA808B9CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA808BA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA808BA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA808BB4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA808BE8 + 4 * byte_1BB8AE21B[*v0]))();
}

void sub_1BA808BE8(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6562616CLL;
  a1[1] = 0xE500000000000000;
}

void sub_1BA808C00(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

void sub_1BA808C18(_QWORD *a1@<X8>)
{
  *a1 = 1886152040;
  a1[1] = 0xE400000000000000;
}

void sub_1BA808C2C(_QWORD *a1@<X8>)
{
  *a1 = 1953393000;
  a1[1] = 0xE400000000000000;
}

void sub_1BA808C40(_QWORD *a1@<X8>)
{
  *a1 = 0x65676175676E616CLL;
  a1[1] = 0xE800000000000000;
}

void sub_1BA808C5C(_QWORD *a1@<X8>)
{
  *a1 = 0x7469617274;
  a1[1] = 0xE500000000000000;
}

void sub_1BA808C74(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x646E616D6D6F63;
  if (v2 != 1)
  {
    v5 = 0x656E696C6E69;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x676E69646E6962;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t _s5ImageOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA808D1C + 4 * byte_1BB8D4749[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA808D50 + 4 * byte_1BB8D4744[v4]))();
}

uint64_t sub_1BA808D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA808D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA808D60);
  return result;
}

uint64_t sub_1BA808D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA808D74);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA808D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA808D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA808D90(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t FeedLayoutResult.feedItemLayoutAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for FormatGroupColumnSystem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeadlineViewLayout.Attributes(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 304) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupClusteringKnobs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA809094(uint64_t a1, uint64_t a2)
{
  return sub_1BA748C14(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (unint64_t *)&unk_1ED3B04D0, MEMORY[0x1E0CB0028]);
}

uint64_t sub_1BA8090B0(uint64_t *a1, uint64_t *a2)
{
  return sub_1BA809094(*a1, *a2);
}

uint64_t sub_1BA8090BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BA809138 + 4 * byte_1BB8DA480[v10]))();
  }
}

uint64_t sub_1BA8091BC()
{
  char *v0;

  return sub_1BA8091D0(*v0);
}

uint64_t sub_1BA8091D0(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 1701869940;
}

uint64_t sub_1BA8091F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA809218 + 4 * byte_1BB9338ED[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1BA809218()
{
  return 1635017060;
}

uint64_t sub_1BA809224()
{
  return 0x656469727265766FLL;
}

uint64_t sub_1BA809244()
{
  return 0x69666E6F43707061;
}

uint64_t sub_1BA809260()
{
  return 0x6E614D7465737361;
}

uint64_t sub_1BA809280()
{
  char *v0;

  return sub_1BA809294(*v0);
}

uint64_t sub_1BA809294(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736E6F6973726576;
  else
    return 0x65756C6176;
}

uint64_t sub_1BA8092C8()
{
  unsigned __int8 *v0;

  return sub_1BA8092D0(*v0);
}

uint64_t sub_1BA8092D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA809308 + 4 * byte_1BB906729[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1BA809308()
{
  return 0xD000000000000010;
}

uint64_t sub_1BA809324()
{
  return 0x74756F79616CLL;
}

uint64_t sub_1BA809338()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1BA809350()
{
  return 0x726F7463656C6573;
}

uint64_t sub_1BA80936C()
{
  return 0x73746E65746E6F63;
}

uint64_t sub_1BA809384()
{
  return 0x736E6F6974636573;
}

uint64_t sub_1BA80939C()
{
  return 0x737265746C6966;
}

ValueMetadata *type metadata accessor for FormatPropertyValue()
{
  return &type metadata for FormatPropertyValue;
}

uint64_t sub_1BA8093C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA8093EC + 4 * byte_1BB935421[*v0]))(1953459315, 0xE400000000000000);
}

uint64_t sub_1BA8093EC()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1BA809404()
{
  return 0x726F7463656C6573;
}

uint64_t sub_1BA809420()
{
  return 0x736D657469;
}

uint64_t sub_1BA809434()
{
  return 0x656C65536D657469;
}

uint64_t sub_1BA809458()
{
  return 0x6974704F6D657469;
}

uint64_t sub_1BA809478()
{
  return 0x697875416D657469;
}

NewsFeed::FormatItemTrait_optional sub_1BA80949C(Swift::String *a1)
{
  return FormatItemTrait.init(rawValue:)(*a1);
}

uint64_t _s8ResolvedVwst_1()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t destroy for FormatVideoPlayerContent()
{
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for NewsEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BA80950C + 4 * byte_1BB957CE5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BA809540 + 4 * byte_1BB957CE0[v4]))();
}

uint64_t sub_1BA809540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA809550);
  return result;
}

uint64_t sub_1BA80955C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA809564);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BA809568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA8095C8 + 4 * byte_1BB911BD8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA8095FC + 4 * byte_1BB911BD3[v4]))();
}

uint64_t sub_1BA8095FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80960CLL);
  return result;
}

uint64_t sub_1BA809618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA809620);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA809624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80962C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatLayeredMediaNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatDimensionSizing(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x79)
  {
    *(_QWORD *)result = a2 - 122;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatDimensionSizing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 122);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x79)
    v3 = -1;
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for HeadlineViewLayout.Attributes(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 304))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FormatBorderInset(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA809798 + 4 * byte_1BB89D921[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA8097CC + 4 * byte_1BB89D91C[v4]))();
}

uint64_t sub_1BA8097CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8097D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8097DCLL);
  return result;
}

uint64_t sub_1BA8097E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8097F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA8097F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8097FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatBorderInset_optional sub_1BA809808(Swift::String *a1)
{
  return FormatBorderInset.init(rawValue:)(*a1);
}

void sub_1BA809814(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69646E6962;
  a1[1] = 0xE700000000000000;
}

uint64_t storeEnumTagSinglePayload for FormatSizeEquation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatUnderlineStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1BA809900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4B07F0(0, qword_1ED3B1AB0, (uint64_t (*)(uint64_t))sub_1BA83B36C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for FormatContentSlotItemObject.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8099A8 + 4 * byte_1BB8AC10B[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1BA8099DC + 4 * byte_1BB8AC106[v4]))();
}

uint64_t sub_1BA8099DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8099E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8099ECLL);
  return result;
}

uint64_t sub_1BA8099F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA809A00);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1BA809A04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809A0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSlotItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA809A24()
{
  return 0x7261696C69787561;
}

uint64_t sub_1BA809A40@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1BA6D4F44(v1[2], v1[3], v1[4], a1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1BA809A60()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73746E657665;
  if (*v0 != 1)
    v1 = 0x7475706E69;
  if (*v0)
    return v1;
  else
    return 0x736574617473;
}

uint64_t sub_1BA809AB0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA809AD8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA809AD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BA809B10 + 4 * byte_1BB94E398[a1]))(0xD000000000000010, 0x80000001BB95C770);
}

uint64_t sub_1BA809B10(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1BA809D18()
{
  return 0x656E654749417369;
}

uint64_t sub_1BA809D3C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA809D68 + 4 * byte_1BB8AE330[*v0]))();
}

void sub_1BA809D68(_QWORD *a1@<X8>)
{
  *a1 = 0x746E656964617267;
  a1[1] = 0xE800000000000000;
}

void sub_1BA809D84(char *a1@<X8>)
{
  strcpy(a1, "radialGradient");
  a1[15] = -18;
}

void sub_1BA809DAC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656E696873;
  a1[1] = v1;
}

void sub_1BA809DE0(_QWORD *a1@<X8>)
{
  *a1 = 1633905005;
  a1[1] = 0xE400000000000000;
}

void sub_1BA809DF4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "visualEffect");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t storeEnumTagSinglePayload for FormatFontTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1BA809E64 + 4 * byte_1BB892819[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1BA809E98 + 4 * byte_1BB892814[v4]))();
}

uint64_t sub_1BA809E98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA809EA8);
  return result;
}

uint64_t sub_1BA809EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA809EBCLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1BA809EC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809EC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupEmitterPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA809F20 + 4 * byte_1BB9069C3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA809F54 + 4 * byte_1BB9069BE[v4]))();
}

uint64_t sub_1BA809F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA809F64);
  return result;
}

uint64_t sub_1BA809F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA809F78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA809F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA809F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatPreviewParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_BYTE *)(result + 64) = (a2 ^ 0x7F) & 0xFE | ((a2 ^ 0x7F) << 7);
    }
  }
  return result;
}

uint64_t sub_1BA809FF4()
{
  unsigned __int8 *v0;

  return sub_1BA809FFC(*v0);
}

uint64_t sub_1BA809FFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80A034 + 4 * byte_1BB8EE922[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BA80A034()
{
  return 0x446873696C627570;
}

uint64_t sub_1BA80A054()
{
  return 0x6F7779654B644169;
}

uint64_t sub_1BA80A074()
{
  return 0x73656D656874;
}

uint64_t sub_1BA80A088()
{
  return 0x70756F7267627573;
}

uint64_t sub_1BA80A0D0()
{
  return 6775156;
}

uint64_t sub_1BA80A0E0()
{
  return 0x6575737369;
}

uint64_t sub_1BA80A0F4()
{
  return 0x7069726373627573;
}

uint64_t sub_1BA80A114()
{
  return 0x7974696E69666661;
}

unint64_t sub_1BA80A138()
{
  return 0xD000000000000016;
}

uint64_t sub_1BA80A158()
{
  return 0x656E696C64616568;
}

uint64_t sub_1BA80A170()
{
  return 0x6465626D45626577;
}

unint64_t sub_1BA80A188()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA80A1A4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6874646977;
  if (*v0 != 1)
    v1 = 1885433183;
  if (*v0)
    return v1;
  else
    return 0x746867696568;
}

uint64_t storeEnumTagSinglePayload for FormatOptionExpression.Exists.Operator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80A23C + 4 * byte_1BB891AB9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80A270 + 4 * byte_1BB891AB4[v4]))();
}

uint64_t sub_1BA80A270(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80A280);
  return result;
}

uint64_t sub_1BA80A28C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80A294);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80A298(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A2A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatOptionExpression::Exists::Operator_optional sub_1BA80A2AC(Swift::String *a1)
{
  return FormatOptionExpression.Exists.Operator.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolWeight(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BA80A304 + 4 * byte_1BB8A0D0F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BA80A338 + 4 * byte_1BB8A0D0A[v4]))();
}

uint64_t sub_1BA80A338(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80A348);
  return result;
}

uint64_t sub_1BA80A354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80A35CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BA80A360(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A368(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA80A374(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t storeEnumTagSinglePayload for FormatBundleImageSize(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBundleImageSize(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA80A604()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80A630 + 4 * byte_1BB904218[*v0]))(0x656C616373, 0xE500000000000000);
}

uint64_t sub_1BA80A630()
{
  return 1886351971;
}

uint64_t sub_1BA80A640()
{
  return 1701603700;
}

uint64_t sub_1BA80A650()
{
  return 0x69736E6972746E69;
}

uint64_t getEnumTagSinglePayload for FormatShadow(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCellSelection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BA80A710()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = 0x724F737961776C61;
  v3 = 0x6E776F6E6B6E75;
  if (*v0 == 2)
    v3 = 0x6554737961776C61;
  if (v1 != 1)
    v2 = v3;
  if (v1)
    return v2;
  else
    return 0x6974616D6F747561;
}

uint64_t storeEnumTagSinglePayload for FormatMediaTimingFunctionControlPoints(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMediaTimingFunctionControlPoints(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t destroy for FormatContentRequirement(uint64_t a1)
{
  return sub_1BA80A84C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t sub_1BA80A84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return swift_release();
    case 7:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 15:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 16:
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextLineBreakMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BA80A93C + 4 * byte_1BB90005D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BA80A970 + 4 * byte_1BB900058[v4]))();
}

uint64_t sub_1BA80A970(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A978(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80A980);
  return result;
}

uint64_t sub_1BA80A98C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80A994);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BA80A998(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A9A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80A9AC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80A9D4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80A9D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80AA08 + 4 * byte_1BB8AE97A[a1]))(0x656E696C64616568, 0xE800000000000000);
}

uint64_t sub_1BA80AA08()
{
  return 0x6575737369;
}

uint64_t sub_1BA80AA1C()
{
  return 0x70756F7267;
}

uint64_t sub_1BA80AA30()
{
  return 6775156;
}

uint64_t sub_1BA80AA40()
{
  return 0x656C7A7A7570;
}

uint64_t sub_1BA80AA54()
{
  return 0x7954656C7A7A7570;
}

uint64_t sub_1BA80AA70()
{
  return 0x7453656C7A7A7570;
}

uint64_t sub_1BA80AA94()
{
  return 0x6E6F6974706FLL;
}

uint64_t sub_1BA80AAA8()
{
  return 0x76457374726F7073;
}

ValueMetadata *type metadata accessor for FormatContentSubgroup.Resolved()
{
  return &type metadata for FormatContentSubgroup.Resolved;
}

uint64_t FormatContentSubgroup.Resolved.layout.getter()
{
  return swift_retain();
}

uint64_t sub_1BA80AAE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80AB0C + 4 * byte_1BB8AE50C[*v0]))();
}

void sub_1BA80AB0C(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C64616568;
  a1[1] = 0xE800000000000000;
}

void sub_1BA80AB28(_QWORD *a1@<X8>)
{
  *a1 = 0x6172546F69647561;
  a1[1] = 0xEA00000000006B63;
}

void sub_1BA80AB48(_QWORD *a1@<X8>)
{
  *a1 = 6775156;
  a1[1] = 0xE300000000000000;
}

void sub_1BA80AB5C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6575737369;
  a1[1] = v1;
}

void sub_1BA80AB70(_QWORD *a1@<X8>)
{
  *a1 = 0x656C7A7A7570;
  a1[1] = 0xE600000000000000;
}

void sub_1BA80AB88(_QWORD *a1@<X8>)
{
  *a1 = 0x76457374726F7073;
  a1[1] = 0xEB00000000746E65;
}

void sub_1BA80ABAC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "liveActivity");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1BA80ABD0(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA80ACA4 + 4 * byte_1BB8FC4E0[(v9 - 1)]))();
}

uint64_t sub_1BA80AD1C()
{
  unsigned __int8 *v0;

  return sub_1BA80AD24(*v0);
}

uint64_t sub_1BA80AD24(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BA80AD60 + 4 * byte_1BB8922B0[a1]))(0xD000000000000018, 0x80000001BB967720);
}

uint64_t sub_1BA80AD60()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t FeedGroupDebugFormat.themes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of FeedGroupDebuggable.debugName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for FormatGroupNodeMaskStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatLineBreakStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA80AEC0 + 4 * byte_1BB91DB65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA80AEF4 + 4 * asc_1BB91DB60[v4]))();
}

uint64_t sub_1BA80AEF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80AEFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80AF04);
  return result;
}

uint64_t sub_1BA80AF10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80AF18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA80AF1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80AF24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatGroupCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatGroupCollection(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCommandBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F8)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 1017;
    if (a3 >= 0x3F9)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0x3F9)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 4 * (-(char)a2 & 3);
      *(_BYTE *)(result + 25) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCommandBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F9 && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 1017);
  v3 = ((*(unsigned __int8 *)(a1 + 24) >> 2) & 3 | (4 * *(unsigned __int8 *)(a1 + 25))) ^ 0x3FF;
  if (v3 >= 0x3F8)
    v3 = -1;
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatQueryValue(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA80B0B8@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

BOOL sub_1BA80B0C4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

uint64_t sub_1BA80B0F4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BA80B100()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F737365636F7270;
  else
    return 0x6973736572707865;
}

void sub_1BA80B16C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_1BA80B3D0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1BA80B3BCLL);
}

void sub_1BA80B3D8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1BA80B3BCLL);
}

void sub_1BA80B3E8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1BA80B3BCLL);
}

uint64_t sub_1BA80B3F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80B420 + 4 * byte_1BB8DFBAF[*v0]))();
}

void sub_1BA80B420(_QWORD *a1@<X8>)
{
  *a1 = 0x6B636F6C62;
  a1[1] = 0xE500000000000000;
}

void sub_1BA80B438(_QWORD *a1@<X8>)
{
  *a1 = 0x6974634165726F6DLL;
  a1[1] = 0xEB00000000736E6FLL;
}

void sub_1BA80B45C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x65726F6E6769;
  a1[1] = v1;
}

void sub_1BA80B470(_QWORD *a1@<X8>)
{
  *a1 = 0x657461676976616ELL;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1BA80B48C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574656D61726170;
  if (*v0 != 1)
    v1 = 1885433183;
  if (*v0)
    return v1;
  else
    return 0x65756C6176;
}

uint64_t storeEnumTagSinglePayload for FormatContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA80B4EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80B514 + 4 * byte_1BB91E3FE[*v0]))(7105633, 0xE300000000000000);
}

uint64_t sub_1BA80B514()
{
  return 0x7466654C706F74;
}

uint64_t sub_1BA80B52C()
{
  return 0x7468676952706F74;
}

uint64_t sub_1BA80B544()
{
  return 0x654C6D6F74746F62;
}

uint64_t sub_1BA80B560()
{
  return 0x69526D6F74746F62;
}

void sub_1BA80B580()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 1)
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(v0 + 24)
                                             + OBJC_IVAR____TtCC8NewsFeed33FeedItemRendererPipelineProcessorP33_D1D725D6BA23D5C832E553645D2883FA7Context_loadingGroup));
}

uint64_t sub_1BA80B5A4()
{
  return 0x676E697A65657266;
}

uint64_t storeEnumTagSinglePayload for FeedGroupRepooling(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA80B608 + 4 * byte_1BB912D15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA80B63C + 4 * byte_1BB912D10[v4]))();
}

uint64_t sub_1BA80B63C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80B644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80B64CLL);
  return result;
}

uint64_t sub_1BA80B658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80B660);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA80B664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80B66C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80B678()
{
  unsigned __int8 *v0;

  return sub_1BA80B680(*v0);
}

uint64_t sub_1BA80B680(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80B6B4 + 4 * byte_1BB8F5D64[a1]))(0x746E65746E6F63, 0xE700000000000000);
}

uint64_t sub_1BA80B6B4()
{
  return 0x6E656449646E696BLL;
}

uint64_t sub_1BA80B6D8()
{
  return 0x6973695664696170;
}

unint64_t sub_1BA80B6FC()
{
  return 0xD000000000000016;
}

uint64_t sub_1BA80B71C()
{
  return 0x746C754D6B6E6172;
}

uint64_t sub_1BA80B740()
{
  return 0x726F635365736162;
}

unint64_t sub_1BA80B75C()
{
  return 0xD000000000000024;
}

uint64_t sub_1BA80B79C()
{
  return 0x6E696C6F6F706572;
}

uint64_t sub_1BA80B7BC()
{
  return 0x72685465726F6373;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobs()
{
  return &type metadata for FeedGroupClusteringKnobs;
}

uint64_t storeEnumTagSinglePayload for FormatSymbolScale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA80B83C + 4 * byte_1BB91B63E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA80B870 + 4 * byte_1BB91B639[v4]))();
}

uint64_t sub_1BA80B870(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80B878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80B880);
  return result;
}

uint64_t sub_1BA80B88C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80B894);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA80B898(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80B8A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatItemNodeSwipeActionStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_1BA80B8FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80B924 + 4 * byte_1BB901B1F[*v0]))(7235949, 0xE300000000000000);
}

uint64_t sub_1BA80B924()
{
  return 7889261;
}

uint64_t sub_1BA80B930()
{
  return 0x73646E696BLL;
}

uint64_t sub_1BA80B944()
{
  return 0x69747265706F7270;
}

uint64_t sub_1BA80B960()
{
  return 0x7261696C69787561;
}

unint64_t sub_1BA80B97C()
{
  return 0xD000000000000010;
}

uint64_t storeEnumTagSinglePayload for FormatSymbolImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolImage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA80BA3C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80BA6C + 4 * byte_1BB8AE3EA[*v0]))();
}

void sub_1BA80BA6C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656E696C64616568;
  a1[1] = v1;
}

void sub_1BA80BA84(_QWORD *a1@<X8>)
{
  *a1 = 0x6575737369;
  a1[1] = 0xE500000000000000;
}

void sub_1BA80BA9C(_QWORD *a1@<X8>)
{
  *a1 = 0x70756F7267;
  a1[1] = 0xE500000000000000;
}

void sub_1BA80BAB4(_QWORD *a1@<X8>)
{
  *a1 = 6775156;
  a1[1] = 0xE300000000000000;
}

void sub_1BA80BAC8(_QWORD *a1@<X8>)
{
  *a1 = 0x76457374726F7073;
  a1[1] = 0xEB00000000746E65;
}

void sub_1BA80BAEC(_QWORD *a1@<X8>)
{
  *a1 = 0x656C7A7A7570;
  a1[1] = 0xE600000000000000;
}

void sub_1BA80BB04(_QWORD *a1@<X8>)
{
  *a1 = 0x7453656C7A7A7570;
  a1[1] = 0xEF63697473697461;
}

uint64_t storeEnumTagSinglePayload for FormatSymbolName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolName(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolName.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80BC08 + 4 * byte_1BB8A1F35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80BC3C + 4 * asc_1BB8A1F30[v4]))();
}

uint64_t sub_1BA80BC3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80BC44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80BC4CLL);
  return result;
}

uint64_t sub_1BA80BC58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80BC60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80BC64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80BC6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t dispatch thunk of FeedGroupRepresentable.feedGroupDebug.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t storeEnumTagSinglePayload for FormatFeedGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatLayeredMediaNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageRenderingMode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for FormatImageAdjustment(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t sub_1BA80BDB8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80BDE0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80BDE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80BE18 + 4 * byte_1BB8AE8FD[a1]))(0x69616E626D756874, 0xE90000000000006CLL);
}

uint64_t sub_1BA80BE18()
{
  return 0x656873696C627570;
}

uint64_t sub_1BA80BE3C()
{
  return 0x6974536F65646976;
}

unint64_t sub_1BA80BE58()
{
  return 0xD000000000000012;
}

unint64_t sub_1BA80BE78()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA80BE94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80BEC8 + 4 * byte_1BB89C54A[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BA80BEC8()
{
  return 0x7373616C63;
}

unint64_t sub_1BA80BEDC()
{
  return 0xD000000000000018;
}

uint64_t sub_1BA80BEF8()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1BA80BF10()
{
  return 0x726F7463656C6573;
}

void sub_1BA80BF2C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xEC000000656E6968;
  v5 = 0x63614D6574617473;
  if (v2 != 1)
  {
    v5 = 0x74496D6F74737563;
    v4 = 0xEA00000000006D65;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1836412517;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BA80BF90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80BFB8 + 4 * byte_1BB8AE7CA[*v0]))();
}

void sub_1BA80BFB8(_QWORD *a1@<X8>)
{
  *a1 = 0x72656874616577;
  a1[1] = 0xE700000000000000;
}

void sub_1BA80BFD4(_QWORD *a1@<X8>)
{
  *a1 = 1684366694;
  a1[1] = 0xE400000000000000;
}

void sub_1BA80BFE8(_QWORD *a1@<X8>)
{
  *a1 = 0x76457374726F7073;
  a1[1] = 0xEB00000000746E65;
}

uint64_t storeEnumTagSinglePayload for FormatAbsoluteURL()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatAbsoluteURL()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

NewsFeed::FormatOperator_optional sub_1BA80C024(Swift::String *a1)
{
  return FormatOperator.init(rawValue:)(*a1);
}

uint64_t sub_1BA80C030()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0x656D617266;
}

uint64_t _s8NewsFeed25FeedGroupFreezingDisallowVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80C0B8 + 4 * byte_1BB911235[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80C0EC + 4 * byte_1BB911230[v4]))();
}

uint64_t sub_1BA80C0EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C0F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80C0FCLL);
  return result;
}

uint64_t sub_1BA80C108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80C110);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80C114(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C11C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;

  sub_1BA6F3F50(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm_0()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for FormatPackage();
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v2 + 168) >= 3uLL)
    swift_bridgeObjectRelease();
  v4 = v3 + v1[23];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for FormatCompilerOptions(0);
  v6 = v4 + *(int *)(v5 + 24);
  if (*(_QWORD *)(v6 + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = v6 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
  v8 = sub_1BB86E710();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = v4 + *(int *)(v5 + 28);
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  v12 = v3 + v1[24];
  v13 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v3 + v1[25];
  if (!v10(v14, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm_1()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for FormatBindingImageExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingImageExpression(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for GroupLayoutBindingContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatComputedInvalidation.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatComputedInvalidation.Result(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatRepeatNodeIteration.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80C5AC + 4 * byte_1BB95435F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80C5E0 + 4 * byte_1BB95435A[v4]))();
}

uint64_t sub_1BA80C5E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C5E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80C5F0);
  return result;
}

uint64_t sub_1BA80C5FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80C604);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80C608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSizeCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 254 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 254) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 1)
    return ((uint64_t (*)(void))((char *)&loc_1BA80C668 + 4 * byte_1BB910D1C[v4]))();
  *a1 = a2 - 2;
  return ((uint64_t (*)(void))((char *)sub_1BA80C69C + 4 * byte_1BB910D17[v4]))();
}

uint64_t sub_1BA80C69C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C6A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80C6ACLL);
  return result;
}

uint64_t sub_1BA80C6B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80C6C0);
  *(_BYTE *)result = -32;
  return result;
}

uint64_t sub_1BA80C6C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80C6CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupLayoutContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatSymbolConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolConfig.Size(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSymbolConfig.Size(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void sub_1BA80C7B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1BA80C964(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA80CA14 + 4 * byte_1BB8FC4F2[(v7 - 1)]))();
}

uint64_t sub_1BA80CA64()
{
  char *v0;

  return sub_1BA619B04(*v0);
}

void sub_1BA80CA78(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0x6E61656C6F6F62;
  if (v2 != 1)
    v4 = 0x72656765746E69;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x676E69727473;
  if (!v5)
    v3 = 0xE700000000000000;
  *a1 = v6;
  a1[1] = v3;
}

void sub_1BA80CAD4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656C616353746F6ELL;
  if (*v1)
    v2 = 0x64656C616373;
  v3 = 0xE900000000000064;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BA80CB14()
{
  return 0x3273656D656874;
}

uint64_t dispatch thunk of FeedGroupDebuggable.debugFormat.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for FormatGradientDirection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

uint64_t sub_1BA80CB60@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80CB88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80CB88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80CBB4 + 4 * byte_1BB8AE444[a1]))(1970169197, 0xE400000000000000);
}

uint64_t sub_1BA80CBB4()
{
  return 0x646E616D6D6F63;
}

uint64_t sub_1BA80CBCC()
{
  return 0x4C52556E65706FLL;
}

uint64_t sub_1BA80CBE4()
{
  return 0x6574756F72;
}

uint64_t sub_1BA80CBF8()
{
  return 0x686374697773;
}

unint64_t sub_1BA80CC0C()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA80CC28()
{
  return 0x6F72687473736170;
}

uint64_t sub_1BA80CC48()
{
  return 0x6573616863727570;
}

uint64_t sub_1BA80CC60()
{
  return 0x676E69646E6962;
}

uint64_t sub_1BA80CC78()
{
  return 0x6775626564;
}

uint64_t getEnumTagSinglePayload for FormatSizeEquation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatBorderEdge(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA80CD20 + 4 * byte_1BB93CA47[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA80CD54 + 4 * byte_1BB93CA42[v4]))();
}

uint64_t sub_1BA80CD54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80CD5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80CD64);
  return result;
}

uint64_t sub_1BA80CD70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80CD78);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA80CD7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80CD84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatBorderEdge_optional sub_1BA80CD90(Swift::String *a1)
{
  return FormatBorderEdge.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatGradient(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t FeedLayoutSolver.Cursor.__deallocating_deinit()
{
  return sub_1BA5A6838((void (*)(void))FeedLayoutSolver.Cursor.deinit);
}

id FeedScoredItem.scoreProfile.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t sub_1BA80CE48()
{
  return sub_1BB86D204();
}

uint64_t getEnumTagSinglePayload for FeedCategory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatGroupNodeMaskPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAccessibilityRole.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA80CF40 + 4 * byte_1BB8ACE80[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA80CF74 + 4 * byte_1BB8ACE7B[v4]))();
}

uint64_t sub_1BA80CF74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80CF7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80CF84);
  return result;
}

uint64_t sub_1BA80CF90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80CF98);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA80CF9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80CFA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatArticleStoryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BA80CFFC + 4 * byte_1BB9024A7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BA80D030 + 4 * byte_1BB9024A2[v4]))();
}

uint64_t sub_1BA80D030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80D040);
  return result;
}

uint64_t sub_1BA80D04C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80D054);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BA80D058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s3URLOwst_0_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80D0B8 + 4 * byte_1BB883041[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80D0EC + 4 * byte_1BB88303C[v4]))();
}

uint64_t sub_1BA80D0EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D0F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80D0FCLL);
  return result;
}

uint64_t sub_1BA80D108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80D110);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80D114(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D11C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D12C()
{
  _BYTE *v0;

  if (*v0)
    return 1885433183;
  else
    return 0x6973736572707865;
}

uint64_t storeEnumTagSinglePayload for HeadlineViewLayout.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t destroy for FormatBindingError(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 56);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 5:
      case 6:
      case 7:
        return swift_bridgeObjectRelease();
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      case 2:
      case 4:
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      case 3:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      default:
        v2 = *(_DWORD *)a1 + 8;
        continue;
    }
  }
}

uint64_t _s14descr1E72DA4C9V7CommandO10CodingTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA80D24C + 4 * byte_1BB8DFBCD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA80D280 + 4 * byte_1BB8DFBC8[v4]))();
}

uint64_t sub_1BA80D280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80D290);
  return result;
}

uint64_t sub_1BA80D29C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80D2A4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA80D2A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80D2B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FeedLayoutSolverOptions::CoverOptions __swiftcall FeedLayoutSolverOptions.CoverOptions.init(alwaysShowTitle:alwaysIncludeBottomInset:)(Swift::Bool alwaysShowTitle, Swift::Bool alwaysIncludeBottomInset)
{
  Swift::Bool *v2;
  NewsFeed::FeedLayoutSolverOptions::CoverOptions result;

  *v2 = alwaysShowTitle;
  v2[1] = alwaysIncludeBottomInset;
  result.alwaysShowTitle = alwaysShowTitle;
  return result;
}

NewsFeed::FeedGroupPaidVisibility_optional sub_1BA80D2C8(Swift::String *a1)
{
  return FeedGroupPaidVisibility.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FormatProgressPieOptions(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedGroupGroupingRules()
{
  return &type metadata for FeedGroupGroupingRules;
}

uint64_t FeedGroupConfig.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t storeEnumTagSinglePayload for PuzzleStatsState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t objectdestroy_54Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1 + 16);
  a1(*(_QWORD *)(v1 + 64));
  return swift_deallocObject();
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_1BA80D3C4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1BA80D4B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D52CLL);
}

void sub_1BA80D4C0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BA80D4C8);
  JUMPOUT(0x1BA80D52CLL);
}

void sub_1BA80D508()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D52CLL);
}

void sub_1BA80D510()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D52CLL);
}

uint64_t sub_1BA80D518(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1BA80D52CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1BA80D528);
    JUMPOUT(0x1BA80D524);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1BA80D544(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA80D584 + 4 * byte_1BB8DA48F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA80D5A4 + 4 * byte_1BB8DA494[v4]))();
}

_BYTE *sub_1BA80D584(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA80D5A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA80D5AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA80D5B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA80D5BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA80D5C4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t _s5ImageOwet_2(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FormatGroupNodeMaskStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_1BA80D690(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1BA80D784()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D7F8);
}

void sub_1BA80D78C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BA80D794);
  JUMPOUT(0x1BA80D7F8);
}

void sub_1BA80D7D4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D7F8);
}

void sub_1BA80D7DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA80D7F8);
}

uint64_t sub_1BA80D7E4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1BA80D7F8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1BA80D7F4);
    JUMPOUT(0x1BA80D7F0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1BA80D810(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BA80D88C + 4 * byte_1BB948FB0[v10]))();
  }
}

_QWORD *destroy for FormatPropertyValue(_QWORD *result)
{
  if ((((*result >> 60) & 0x8F | (16 * (*result & 7))) ^ 0x7E) >= 0x72)
    return (_QWORD *)swift_release();
  return result;
}

NewsFeed::FormatImageResize_optional sub_1BA80D938(Swift::String *a1)
{
  return FormatImageResize.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatURLBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatURLBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t type metadata accessor for FeedGroupKnobsRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedGroupKnobsRules);
}

uint64_t sub_1BA80D9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B0A68, (uint64_t)&type metadata for DebugGroupLayoutContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3B0AA8, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3B0AE0 = result;
  return result;
}

uint64_t sub_1BA80DAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3C4A00, (uint64_t)&type metadata for FeedDatabaseCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3C4A60, (uint64_t)&type metadata for FeedDatabaseCommandContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4AC8 = result;
  return result;
}

uint64_t sub_1BA80DB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B0A68, (uint64_t)&type metadata for DebugGroupLayoutContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3B0AA8, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3B0AD8 = result;
  return result;
}

uint64_t sub_1BA80DC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, &qword_1ED3C49F8, (uint64_t)&type metadata for FeedPersonalizationDetailCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3C4A58, (uint64_t)&type metadata for FeedPersonalizationDetailCommandContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4AB0 = result;
  return result;
}

uint64_t sub_1BA80DD54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, &qword_1ED3B0A60, (uint64_t)&type metadata for FeedCursorCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3B0AA0, (uint64_t)&type metadata for FeedCursorCommandContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3B0AD0 = result;
  return result;
}

uint64_t sub_1BA80DE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, &qword_1ED3C49E8, (uint64_t)&type metadata for FeedCursorExportCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3C4A50, (uint64_t)&type metadata for FeedCursorExportCommandContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4AA0 = result;
  return result;
}

uint64_t sub_1BA80DF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B0A68, (uint64_t)&type metadata for DebugGroupLayoutContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3B0AA8, (uint64_t)&type metadata for DebugGroupLayoutContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3B0AC8 = result;
  return result;
}

uint64_t sub_1BA80DFE8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatCornerRadius.RoundedValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80E040 + 4 * byte_1BB91E408[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80E074 + 4 * byte_1BB91E403[v4]))();
}

uint64_t sub_1BA80E074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E07C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80E084);
  return result;
}

uint64_t sub_1BA80E090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80E098);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80E09C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E0A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E0B4()
{
  return sub_1BB86D210();
}

uint64_t sub_1BA80E0C0()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 1701869940;
}

NewsFeed::NewsEnvironment_optional sub_1BA80E0E8(Swift::String *a1)
{
  return NewsEnvironment.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatDateFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 2;
  }
  return result;
}

uint64_t sub_1BA80E14C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80E180 + 4 * byte_1BB8ACE68[*v0]))();
}

void sub_1BA80E180(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001BB95DB40;
}

void sub_1BA80E1A0(_QWORD *a1@<X8>)
{
  *a1 = 0x746E656D656C65;
  a1[1] = 0xE700000000000000;
}

void sub_1BA80E1BC(_QWORD *a1@<X8>)
{
  *a1 = 0x74756F6B61657262;
  a1[1] = 0xEF746E656D656C45;
}

uint64_t sub_1BA80E1E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA80E210 + 4 * byte_1BB8AF20E[*v0]))();
}

void sub_1BA80E210(_QWORD *a1@<X8>)
{
  *a1 = 0x74496D6F74737563;
  a1[1] = 0xEA00000000006D65;
}

void sub_1BA80E230(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C64616568;
  a1[1] = 0xE800000000000000;
}

void sub_1BA80E24C(_QWORD *a1@<X8>)
{
  *a1 = 0x6465626D45626577;
  a1[1] = 0xE800000000000000;
}

void sub_1BA80E268(_QWORD *a1@<X8>)
{
  *a1 = 0x70756F7267;
  a1[1] = 0xE500000000000000;
}

void sub_1BA80E280(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x6E6F6974706FLL;
  if (*v1)
    v2 = 0x656E696C6E69;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

ValueMetadata *type metadata accessor for FormatLayout()
{
  return &type metadata for FormatLayout;
}

unint64_t destroy for FormatSize(unint64_t *a1)
{
  return sub_1BA719718(*a1);
}

uint64_t sub_1BA80E2C8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BA576588(a1, v2, a2);
}

uint64_t sub_1BA80E2D0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1BA809900(*v1 + 136, a1);
}

uint64_t getEnumTagSinglePayload for FormatOptionBindingModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

void sub_1BA80E330(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x7465737361;
  if (v2 != 1)
  {
    v5 = 0x676E69646E6962;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6574756C6F736261;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BA80E38C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80E3B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80E3B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80E3E8 + 4 * byte_1BB91A8CC[a1]))(0x676E69646E6962, 0xE700000000000000);
}

uint64_t sub_1BA80E3E8()
{
  return 0x72656765746E69;
}

uint64_t sub_1BA80E3FC()
{
  return 0x74616F6C66;
}

uint64_t sub_1BA80E410()
{
  return 0x6E6F6974706FLL;
}

uint64_t sub_1BA80E424()
{
  return 0x686374697773;
}

uint64_t sub_1BA80E438()
{
  return 0x676E69727473;
}

uint64_t sub_1BA80E44C()
{
  return 1836412517;
}

uint64_t sub_1BA80E45C()
{
  return 1702125924;
}

uint64_t sub_1BA80E46C()
{
  return 7107189;
}

uint64_t sub_1BA80E47C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BA80E508 + 4 * byte_1BB952A00[v10]))();
  }
}

uint64_t _s14descr1E728F061C5ColorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA80E5D8 + 4 * byte_1BB89A686[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA80E60C + 4 * byte_1BB89A681[v4]))();
}

uint64_t sub_1BA80E60C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E614(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80E61CLL);
  return result;
}

uint64_t sub_1BA80E628(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80E630);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA80E634(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E63C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s17ResolvedContainerOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 32) >> 57) >> 6) | (2
                                                           * ((*(_QWORD *)(a1 + 32) >> 57) & 0x38 | *(_QWORD *)(a1 + 32) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA80E6A4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F72687473736170;
  else
    return 0x696669746E656469;
}

NewsFeed::FormatFontTrait_optional sub_1BA80E6EC(Swift::String *a1)
{
  return FormatFontTrait.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for FormatConfig()
{
  return &type metadata for FormatConfig;
}

void FeedItemLayoutAttributes.canRestoreInViewport.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1BA80E73C()
{
  return 1;
}

void sub_1BA80E754()
{
  FeedItemLayoutAttributes.canRestoreInViewport.getter();
  JUMPOUT(0x1BA80E740);
}

ValueMetadata *type metadata accessor for FeedGroupPaidVisibility()
{
  return &type metadata for FeedGroupPaidVisibility;
}

uint64_t sub_1BA80E778(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x726F7463656C6573;
}

ValueMetadata *type metadata accessor for FeedJournalEntry()
{
  return &type metadata for FeedJournalEntry;
}

uint64_t getEnumTagSinglePayload for FormatCompilerSlotDefinition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatOptionsNodeStatement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatWebEmbedNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 59))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for FormatSlotDefinition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatementValue.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BA80E878 + 4 * byte_1BB91A91F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BA80E8AC + 4 * byte_1BB91A91A[v4]))();
}

uint64_t sub_1BA80E8AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E8B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80E8BCLL);
  return result;
}

uint64_t sub_1BA80E8C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80E8D0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BA80E8D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E8DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTextNodeAttachment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatAccessibilityTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80E9C0 + 4 * byte_1BB94C7E7[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1BA80E9F4 + 4 * byte_1BB94C7E2[v4]))();
}

uint64_t sub_1BA80E9F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80E9FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80EA04);
  return result;
}

uint64_t sub_1BA80EA10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80EA18);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1BA80EA1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80EA24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeTransform(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA80EA7C + 4 * byte_1BB920105[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA80EAB0 + 4 * byte_1BB920100[v4]))();
}

uint64_t sub_1BA80EAB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80EAB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80EAC0);
  return result;
}

uint64_t sub_1BA80EACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80EAD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA80EAD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80EAE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatLayoutExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 245;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 11;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupLayoutBindingKey()
{
  return &type metadata for GroupLayoutBindingKey;
}

uint64_t _s14descr1E730C861C7CommandOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80EB8C + 4 * byte_1BB915107[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1BA80EBC0 + 4 * byte_1BB915102[v4]))();
}

uint64_t sub_1BA80EBC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80EBC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80EBD0);
  return result;
}

uint64_t sub_1BA80EBDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80EBE4);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1BA80EBE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80EBF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatLayoutOption(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t sub_1BA80EC24@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

uint64_t _s7CommandOwst_1(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 4 * ((((-a2 >> 2) & 3) - 4 * a2) & 0xF);
    }
  }
  return result;
}

uint64_t _s7CommandOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 13);
  v3 = (*(_BYTE *)(a1 + 24) & 0xC | (*(unsigned __int8 *)(a1 + 24) >> 4) & 3) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

ValueMetadata *type metadata accessor for FormatTagBinding.Asset()
{
  return &type metadata for FormatTagBinding.Asset;
}

uint64_t destroy for FormatBindResult(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 32);
  if (v1 <= 3)
    return sub_1BA7529B4(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), v1);
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatMotion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

void sub_1BA80ED60(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0x746867696568;
  if (v2 != 1)
    v4 = 0x746365707361;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6874646977;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t FeedHeadline.headline.getter()
{
  return swift_unknownObjectRetain();
}

ValueMetadata *type metadata accessor for FeedAdGroupAdjacency()
{
  return &type metadata for FeedAdGroupAdjacency;
}

ValueMetadata *type metadata accessor for FeedNativeAdContext()
{
  return &type metadata for FeedNativeAdContext;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

BOOL sub_1BA80EE3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BA80EE50@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80EE78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80EE78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80EEAC + 4 * byte_1BB9338E4[a1]))(0x656C6369747261, 0xE700000000000000);
}

uint64_t sub_1BA80EEAC()
{
  return 0x6575737369;
}

uint64_t sub_1BA80EEC0()
{
  return 6775156;
}

uint64_t sub_1BA80EED0()
{
  return 0x6465626D45626577;
}

uint64_t sub_1BA80EEE8()
{
  return 0x656C7A7A7570;
}

uint64_t sub_1BA80EEFC()
{
  return 0x7954656C7A7A7570;
}

uint64_t sub_1BA80EF18()
{
  return 0x7453656C7A7A7570;
}

uint64_t sub_1BA80EF3C()
{
  return 0x6D6F74737563;
}

uint64_t sub_1BA80EF50()
{
  return 0x6C6F686563616C70;
}

uint64_t storeEnumTagSinglePayload for FeedCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BA80EFD4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80EFFC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80EFFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80F028 + 4 * byte_1BB910CFA[a1]))(7958113, 0xE300000000000000);
}

uint64_t sub_1BA80F028()
{
  return 1480683374;
}

uint64_t sub_1BA80F038()
{
  return 0x5841796C6E6FLL;
}

uint64_t sub_1BA80F04C()
{
  return 0x6E6168547373656CLL;
}

uint64_t sub_1BA80F078()
{
  return 0x5472657461657267;
}

unint64_t sub_1BA80F098()
{
  return 0xD000000000000012;
}

uint64_t sub_1BA80F0B4()
{
  return 0x6C61757165;
}

uint64_t sub_1BA80F0C8()
{
  return 0x6C61757145746F6ELL;
}

uint64_t sub_1BA80F0E0()
{
  return 29804;
}

uint64_t sub_1BA80F0EC()
{
  return 6648940;
}

uint64_t sub_1BA80F0FC()
{
  return 29799;
}

uint64_t sub_1BA80F108()
{
  return 6648935;
}

uint64_t sub_1BA80F114()
{
  return 29029;
}

uint64_t sub_1BA80F120()
{
  return 7431534;
}

ValueMetadata *type metadata accessor for FormatPrefetchResources()
{
  return &type metadata for FormatPrefetchResources;
}

ValueMetadata *type metadata accessor for FormatPrefetchContext()
{
  return &type metadata for FormatPrefetchContext;
}

void sub_1BA80F14C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1BA80F320(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      v16 = v15 >= 2;
      v17 = v15 - 2;
      if (!v16)
        v17 = -1;
      if (v17 + 1 >= 2)
        return v17;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA80F3E8 + 4 * byte_1BB88B4C0[(v9 - 1)]))();
}

uint64_t sub_1BA80F454@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80F47C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80F47C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80F4B0 + 4 * byte_1BB8AE81C[a1]))(0x656E696C64616568, 0xE800000000000000);
}

uint64_t sub_1BA80F4B0()
{
  return 6775156;
}

uint64_t sub_1BA80F4C0()
{
  return 0x6575737369;
}

uint64_t sub_1BA80F4D4()
{
  return 0x72656874616577;
}

uint64_t sub_1BA80F4EC()
{
  return 0x6C6C6177796170;
}

uint64_t sub_1BA80F504()
{
  return 1684366694;
}

uint64_t sub_1BA80F514()
{
  return 0x6465626D45626577;
}

uint64_t sub_1BA80F528()
{
  return 0x76457374726F7073;
}

uint64_t sub_1BA80F548()
{
  return 0x7954656C7A7A7570;
}

uint64_t sub_1BA80F564()
{
  return 0x7453656C7A7A7570;
}

uint64_t sub_1BA80F588()
{
  return 0x656C7A7A7570;
}

uint64_t storeEnumTagSinglePayload for FormatRemoteImage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatRemoteImage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t _s14descr1E731D319V4TextOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_1BA80F600 + 4 * byte_1BB9255F4[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_1BA80F634 + 4 * byte_1BB9255EF[v4]))();
}

uint64_t sub_1BA80F634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80F63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80F644);
  return result;
}

uint64_t sub_1BA80F650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80F658);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_1BA80F65C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80F664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80F670@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA80F698(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA80F698(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA80F6D4 + 4 * byte_1BB9255D8[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BA80F6D4()
{
  return 1701667182;
}

uint64_t sub_1BA80F6E4()
{
  return 0x4E79616C70736964;
}

unint64_t sub_1BA80F718()
{
  return 0xD000000000000012;
}

uint64_t sub_1BA80F8A8()
{
  return 0x656E697A6167616DLL;
}

uint64_t sub_1BA80F8CC()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1BA80F8E4()
{
  return 0x6974616D6F747561;
}

uint64_t sub_1BA80F8FC()
{
  return 0x656C746974627573;
}

id static FeedScaling.scale(font:scaleValue:)(void *a1, double a2)
{
  double v3;
  double v4;

  if (byte_1EF3D0978 != 1)
    return a1;
  objc_msgSend(a1, sel_pointSize);
  v4 = round(v3 * 4.0 * a2 * 0.25);
  if (byte_1EF3D0978)
    v3 = v4;
  return objc_msgSend(a1, sel_fontWithSize_, v3);
}

NewsFeed::FeedGroupEmitterPriority_optional sub_1BA80F9AC(Swift::String *a1)
{
  return FeedGroupEmitterPriority.init(rawValue:)(*a1);
}

uint64_t sub_1BA80F9B8()
{
  return sub_1BB873BAC();
}

void sub_1BA80F9D0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static FeedAdGroupAdjacency.trailing.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FeedAdGroupAdjacency.leading.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t storeEnumTagSinglePayload for FeedLayoutResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_1BA80FA44()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA80FA54()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t objectdestroy_19Tm(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for FormatTextNodeAttachmentAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA80FAF4 + 4 * byte_1BB8F1285[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA80FB28 + 4 * asc_1BB8F1280[v4]))();
}

uint64_t sub_1BA80FB28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FB30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80FB38);
  return result;
}

uint64_t sub_1BA80FB44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80FB4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA80FB50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FB58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatTextNodeAttachmentAlignment_optional sub_1BA80FB64(Swift::String *a1)
{
  return FormatTextNodeAttachmentAlignment.init(rawValue:)(*a1);
}

uint64_t sub_1BA80FB70()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726F74617265706FLL;
  if (*v0 != 1)
    v1 = 1885433183;
  if (*v0)
    return v1;
  else
    return 0x65756C6176;
}

uint64_t storeEnumTagSinglePayload for FormatPublisherLogoSizeBinding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA80FC0C + 4 * byte_1BB8DDBE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA80FC40 + 4 * byte_1BB8DDBE0[v4]))();
}

uint64_t sub_1BA80FC40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FC48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80FC50);
  return result;
}

uint64_t sub_1BA80FC5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80FC64);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA80FC68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FC70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFrameExpression(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatPublisherLogoSize(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatPublisherLogoSize(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 3;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for FormatGroupColumnSystem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

void sub_1BA80FDD4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x656C646E7562;
  if (v2 != 1)
  {
    v5 = 0x726F7463656C6573;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6D6574737973;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t _s4BoolOwst_6(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BA80FE78 + 4 * byte_1BB93B77D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BA80FEAC + 4 * byte_1BB93B778[v4]))();
}

uint64_t sub_1BA80FEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA80FEBCLL);
  return result;
}

uint64_t sub_1BA80FEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA80FED0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BA80FED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA80FEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

double storeEnumTagSinglePayload for FormatImageAdjustmentBlend(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 128) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 2 * -a2;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 128) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s17ResolvedContainerOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_QWORD *)(result + 72) = 0;
    }
  }
  return result;
}

uint64_t sub_1BA80FFE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA81000C + 4 * byte_1BB8AE4E6[*v0]))();
}

void sub_1BA81000C(_QWORD *a1@<X8>)
{
  *a1 = 29295;
  a1[1] = 0xE200000000000000;
}

void sub_1BA81001C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 7630702;
  a1[1] = v1;
}

void sub_1BA81002C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E656E6F706D6F63;
  a1[1] = 0xE900000000000074;
}

void sub_1BA81004C(_QWORD *a1@<X8>)
{
  *a1 = 0x726F6C6F63;
  a1[1] = 0xE500000000000000;
}

unint64_t destroy for FormatSlotTransform(unint64_t *a1)
{
  return sub_1BA810070(*a1);
}

unint64_t sub_1BA810070(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGap(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA8100E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA810120 + 4 * byte_1BB88F7F0[*v0]))(0x6D6E6F7269766E65, 0xEB00000000746E65);
}

uint64_t sub_1BA810120()
{
  return 0x6974616C756D7563;
}

unint64_t sub_1BA810144()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA810160()
{
  return 0x7461447472617473;
}

uint64_t sub_1BA81017C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1BA81023C + 4 * byte_1BB930220[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t getEnumTagSinglePayload for FormatDecoration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 107))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA8102F8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6953776F646E6977;
  if (*v0 != 1)
    v1 = 0x546465776F6C6C61;
  if (*v0)
    return v1;
  else
    return 0x6C6F687365726874;
}

uint64_t getEnumTagSinglePayload for FeedGroupBundleArticleQuotas()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA810384(_QWORD *a1, uint64_t a2)
{
  return sub_1BA934F5C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA810390);
}

uint64_t sub_1BA810390(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F7463656C6573;
  else
    return 0x65756C6176;
}

uint64_t storeEnumTagSinglePayload for FeedGroupConfigSidecar()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for FeedGroupConfigSidecar()
{
  uint64_t result;

  result = qword_1ED3C5B58;
  if (!qword_1ED3C5B58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static FeedCursorStoreManager.shared.getter()
{
  if (qword_1ED3C5AA8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1BA810450(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA62D344(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BA810458(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA62D124(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BA810460@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA6D3C50(*(void **)(v1 + 40), *(_QWORD *)(v1 + 24), a1);
}

uint64_t _s8NewsFeed16FeedRefreshStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA8104B8 + 4 * byte_1BB888EB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA8104EC + 4 * byte_1BB888EB0[v4]))();
}

uint64_t sub_1BA8104EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8104F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8104FCLL);
  return result;
}

uint64_t sub_1BA810508(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA810510);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA810514(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81051C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t FeedGroupConfig.slots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA810534(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t storeEnumTagSinglePayload for FormatStateMachineDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatStateMachineDefinition(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCompilerSlotDefinition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatComputedInvalidation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 127);
  v3 = (HIBYTE(*(unsigned __int16 *)(a1 + 24)) & 0x7E | (*(unsigned __int16 *)(a1 + 24) >> 15)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA810644@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FormatWebEmbedNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 59) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 59) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatRadialGradientCircleRadius(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatRadialGradientCircleRadius(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA810734@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

ValueMetadata *type metadata accessor for FormatContentSubgroup.ResolvedContainer()
{
  return &type metadata for FormatContentSubgroup.ResolvedContainer;
}

uint64_t storeEnumTagSinglePayload for FeedIssue.Overrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatButtonNodeState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA8107FC + 4 * byte_1BB892C21[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA810830 + 4 * byte_1BB892C1C[v4]))();
}

uint64_t sub_1BA810830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA810838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA810840);
  return result;
}

uint64_t sub_1BA81084C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA810854);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA810858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA810860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81086C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA810894 + 4 * byte_1BB8AF060[*v0]))();
}

void sub_1BA810894(_QWORD *a1@<X8>)
{
  *a1 = 0x6C79745374786574;
  a1[1] = 0xE900000000000065;
}

void sub_1BA8108B4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1702521203;
  a1[1] = v1;
}

void sub_1BA8108C4(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696577;
  a1[1] = 0xE600000000000000;
}

void sub_1BA8108DC(_QWORD *a1@<X8>)
{
  *a1 = 0x656C616373;
  a1[1] = 0xE500000000000000;
}

void sub_1BA8108F4(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6D756C6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1BA810910()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA81091C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA810944(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA810944(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA810978 + 4 * byte_1BB8AE79D[a1]))(0x656E696C64616568, 0xE800000000000000);
}

uint64_t sub_1BA810978()
{
  return 6775156;
}

uint64_t sub_1BA810988()
{
  return 0x6575737369;
}

uint64_t sub_1BA81099C()
{
  return 0x72656874616577;
}

uint64_t sub_1BA8109B4()
{
  return 0x6C6C6177796170;
}

uint64_t sub_1BA8109CC()
{
  return 1684366694;
}

uint64_t sub_1BA8109DC()
{
  return 0x6465626D45626577;
}

uint64_t sub_1BA8109F0()
{
  return 0x76457374726F7073;
}

uint64_t sub_1BA810A10()
{
  return 0x7453656C7A7A7570;
}

uint64_t sub_1BA810A34@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA810A5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA810A5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA810A94 + 4 * byte_1BB9147B8[a1]))(0x656E6E6168437369, 0xE90000000000006CLL);
}

uint64_t sub_1BA810A94()
{
  return 0x6369706F547369;
}

uint64_t sub_1BA810AAC()
{
  return 0x6C61636F4C7369;
}

uint64_t sub_1BA810AC4()
{
  return 0x7374726F70537369;
}

uint64_t sub_1BA810C44()
{
  return 0x726F7053794D7369;
}

uint64_t sub_1BA810C64()
{
  return 0x656C7A7A75507369;
}

uint64_t sub_1BA810C84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA810CAC + 4 * byte_1BB8AE64E[*v0]))(7368564, 0xE300000000000000);
}

uint64_t sub_1BA810CAC()
{
  return 1952867692;
}

uint64_t sub_1BA810CBC()
{
  return 0x6D6F74746F62;
}

uint64_t sub_1BA810CD0()
{
  return 0x7468676972;
}

uint64_t sub_1BA810CE4()
{
  return 1885433183;
}

ValueMetadata *type metadata accessor for FeedGroupNativeAdInsertionLocation()
{
  return &type metadata for FeedGroupNativeAdInsertionLocation;
}

ValueMetadata *type metadata accessor for FeedScoredItem()
{
  return &type metadata for FeedScoredItem;
}

uint64_t sub_1BA810D14()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA810D48 + 4 * byte_1BB8AEC6C[*v0]))();
}

void sub_1BA810D48(_QWORD *a1@<X8>)
{
  *a1 = 0x746E656D656C65;
  a1[1] = 0xE700000000000000;
}

void sub_1BA810D64(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6564646968;
  a1[1] = 0xE600000000000000;
}

void sub_1BA810D7C(_QWORD *a1@<X8>)
{
  *a1 = 0x74756F6B61657262;
  a1[1] = 0xEF746E656D656C45;
}

uint64_t sub_1BA810DA4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t sub_1BA810DB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA810DE0 + 4 * byte_1BB8AE9F4[*v0]))();
}

void sub_1BA810DE0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6574616C706D6574;
  a1[1] = v1;
}

void sub_1BA810DF8(_QWORD *a1@<X8>)
{
  *a1 = 0x6974616D6F747561;
  a1[1] = 0xE900000000000063;
}

void sub_1BA810E18(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "userInterface");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1BA810E44@<X0>(char *a1@<X8>)
{
  return FormatWebEmbedBinding.URL.CodingType.init(rawValue:)(a1);
}

uint64_t sub_1BA810E50()
{
  char *v0;

  return sub_1BA4CEABC(*v0);
}

uint64_t FormatContentSubgroup.ResolvedContainer.headlines.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  sub_1BA6C5ACC(0);
  MEMORY[0x1E0C80A78](v1);
  v48 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for FormatWebEmbed.Resolved();
  MEMORY[0x1E0C80A78](v49);
  v50 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  v45 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v0[1];
  v8 = v0[3];
  v9 = v0[5];
  v10 = v0[6];
  v11 = v0[7];
  v12 = v0[8];
  v13 = v0[9];
  v33[5] = v0[4] & 0x7FFFFFFFFFFFFFFFLL;
  v33[6] = v8;
  sub_1BA6D78DC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v14 = sub_1BB4A4184(v12);
  swift_bridgeObjectRelease();
  v52 = v11;
  swift_bridgeObjectRetain();
  sub_1BA6D74C4(v14);
  swift_bridgeObjectRelease();
  v33[4] = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v52;
  v52 = MEMORY[0x1E0DEE9D8];
  v37 = *(_QWORD *)(v15 + 16);
  if (v37)
  {
    v33[2] = v9;
    v33[3] = v7;
    v34 = v15 + 32;
    v33[1] = v15;
    swift_bridgeObjectRetain();
    v16 = 0;
    v35 = v13;
    v36 = v11;
    v33[7] = v10;
    v38 = v4;
    do
    {
      v18 = (_QWORD *)(v34 + (v16 << 6));
      v19 = v18[1];
      v20 = v18[2];
      v22 = v18[3];
      v21 = v18[4];
      v24 = v18[5];
      v23 = v18[6];
      v25 = v18[7];
      v26 = MEMORY[0x1E0DEE9D8];
      v51 = MEMORY[0x1E0DEE9D8];
      v27 = *(_QWORD *)(v21 + 16);
      v47 = v16;
      if (v27)
      {
        v28 = v20;
        v29 = v21 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
        v44 = v19;
        v30 = v23;
        v46 = v25;
        swift_bridgeObjectRetain_n();
        v42 = v28;
        swift_bridgeObjectRetain_n();
        v41 = v22;
        swift_bridgeObjectRetain_n();
        v43 = v21;
        swift_bridgeObjectRetain_n();
        v40 = v24;
        swift_bridgeObjectRetain_n();
        v39 = v30;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        sub_1BA4C2DD8(v29, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
        v31 = (char *)&loc_1BA811220 + 4 * byte_1BB91CED0[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v17 = v47 + 1;
      sub_1BA66293C(v26);
      v16 = v17;
    }
    while (v17 != v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t sub_1BA8114FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA811524 + 4 * byte_1BB8AEB6B[*v0]))();
}

void sub_1BA811524(_QWORD *a1@<X8>)
{
  *a1 = 0x4C52556E65706FLL;
  a1[1] = 0xE700000000000000;
}

void sub_1BA811540(_QWORD *a1@<X8>)
{
  *a1 = 0x646E616D6D6F63;
  a1[1] = 0xE700000000000000;
}

void sub_1BA81155C(_QWORD *a1@<X8>)
{
  *a1 = 0x686374697773;
  a1[1] = 0xE600000000000000;
}

uint64_t FormatContentSlot.Resolved.itemAuxiliaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for PuzzleStatsState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA8115C8 + 4 * byte_1BB88F7F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA8115FC + 4 * byte_1BB88F7F4[v4]))();
}

uint64_t sub_1BA8115FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA811604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA81160CLL);
  return result;
}

uint64_t sub_1BA811618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA811620);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA811624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81162C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatCustomItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatCustomItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1BA811650(char *a1)
{
  sub_1BA50370C(*a1);
}

uint64_t sub_1BA81165C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for FeedGroupRepooling(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupEntity(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA8117B4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6369676F6CLL;
  if (*v0 != 1)
    v1 = 1885433183;
  if (*v0)
    return v1;
  else
    return 0x676E69646E6962;
}

uint64_t sub_1BA811804()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA811810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FeedContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FeedKind()
{
  return &type metadata for FeedKind;
}

uint64_t destroy for FeedLayoutSolverOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 24) >= 2uLL)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for FeedLayoutSolverOptions.PluginOptions(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = sub_1BB8705C4();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  return result;
}

uint64_t type metadata accessor for FeedLayoutSolverOptions(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3D24E8);
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.Traits()
{
  return &type metadata for FeedLayoutSolverOptions.Traits;
}

void static FeedLayoutSolverOptions.Traits.default.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BA8119B0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CursorTracking()
{
  return &type metadata for FeedLayoutSolverOptions.CursorTracking;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.HeadlineOptions()
{
  return &type metadata for FeedLayoutSolverOptions.HeadlineOptions;
}

NewsFeed::FeedLayoutSolverOptions::HeadlineOptions __swiftcall FeedLayoutSolverOptions.HeadlineOptions.init(alwaysFillWithExcerpt:alwaysShowAuthor:alwaysHidePublisherLogo:)(Swift::Bool alwaysFillWithExcerpt, Swift::Bool alwaysShowAuthor, Swift::Bool alwaysHidePublisherLogo)
{
  Swift::Bool *v3;
  NewsFeed::FeedLayoutSolverOptions::HeadlineOptions result;

  *v3 = alwaysFillWithExcerpt;
  v3[1] = alwaysShowAuthor;
  v3[2] = alwaysHidePublisherLogo;
  result.alwaysFillWithExcerpt = alwaysFillWithExcerpt;
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CategoryOptions()
{
  return &type metadata for FeedLayoutSolverOptions.CategoryOptions;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.CoverOptions()
{
  return &type metadata for FeedLayoutSolverOptions.CoverOptions;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.IssueStripOptions()
{
  return &type metadata for FeedLayoutSolverOptions.IssueStripOptions;
}

_QWORD *FeedLayoutSolverOptions.IssueStripOptions.init(separators:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_1BA811A40(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FeedLayoutSolverOptions.IssueStripOptions.Separators()
{
  return &type metadata for FeedLayoutSolverOptions.IssueStripOptions.Separators;
}

uint64_t getEnumTagSinglePayload for FeedSportsEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t static AdFeedGroup.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

uint64_t sub_1BA811AE8()
{
  unsigned __int8 *v0;

  return sub_1BA4CEA20(*v0);
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatementBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1B)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 28;
    if (a3 >= 0x1C)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0x1C)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_WORD *)(result + 48) = (((-a2 >> 3) & 3) - 4 * (_WORD)a2) << 11;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatOptionsNodeStatementBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1C && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 28);
  v3 = (HIBYTE(*(unsigned __int16 *)(a1 + 48)) & 0x18 | (*(unsigned __int16 *)(a1 + 48) >> 13)) ^ 0x1F;
  if (v3 >= 0x1B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatFrameExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatAdMetricsNodeContent(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA811C40 + 4 * byte_1BB94E650[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA811C60 + 4 * byte_1BB94E655[v4]))();
}

_BYTE *sub_1BA811C40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA811C60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA811C68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA811C70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA811C78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA811C80(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA811C8C@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

uint64_t storeEnumTagSinglePayload for FormatAdMetricsNodeBinding(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA811CD8 + 4 * byte_1BB944AB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA811CF8 + 4 * byte_1BB944AB5[v4]))();
}

_BYTE *sub_1BA811CD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA811CF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA811D00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA811D08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA811D10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA811D18(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA811D24@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

void sub_1BA811D30(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xE900000000000065;
  v3 = *v1;
  v4 = 0x7361637265776F6CLL;
  v5 = 0xEA0000000000657ALL;
  if (v3 == 1)
    v5 = 0xE900000000000065;
  else
    v4 = 0x696C617469706163;
  v6 = v3 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x7361637265707075;
  if (!v6)
    v2 = v5;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t FormatPackageInventory.references.getter()
{
  return sub_1BA4DE208();
}

void sub_1BA811DA0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 48);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1BA811EA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BA811F18);
}

void sub_1BA811EAC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BA811EB4);
  JUMPOUT(0x1BA811F18);
}

void sub_1BA811EF4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA811F18);
}

void sub_1BA811EFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA811F18);
}

uint64_t sub_1BA811F04(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1BA811F18);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1BA811F14);
    JUMPOUT(0x1BA811F10);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t dispatch thunk of ColorPaletteProviding.headlineColorPalette.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ColorPaletteProviding.gapColorPalette.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void __swiftcall HeadlineColorPalette.init(backgroundColor:titleColor:excerptColor:accessoryColor:publisherNameColor:thumbnailPlaceholderColor:badgePressReleaseColor:badgeBreakingColor:badgeDevelopingColor:badgeUpdatedColor:badgeSubscriptionColor:)(NewsFeed::HeadlineColorPalette *__return_ptr retstr, UIColor backgroundColor, UIColor titleColor, UIColor excerptColor, UIColor accessoryColor, UIColor publisherNameColor, UIColor thumbnailPlaceholderColor, UIColor badgePressReleaseColor, UIColor badgeBreakingColor, UIColor badgeDevelopingColor, UIColor badgeUpdatedColor, UIColor badgeSubscriptionColor)
{
  retstr->backgroundColor = backgroundColor;
  retstr->titleColor = titleColor;
  retstr->excerptColor = excerptColor;
  retstr->accessoryColor = accessoryColor;
  retstr->publisherNameColor = publisherNameColor;
  retstr->thumbnailPlaceholderColor = thumbnailPlaceholderColor;
  retstr->badgePressReleaseColor = badgePressReleaseColor;
  retstr->badgeBreakingColor = badgeBreakingColor;
  *(_OWORD *)&retstr->badgeDevelopingColor.super.isa = *(_OWORD *)&badgeDevelopingColor.super.isa;
  retstr->badgeSubscriptionColor = badgeSubscriptionColor;
}

uint64_t storeEnumTagSinglePayload for FormatUnderlineStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BA811FB4 + 4 * byte_1BB953A35[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BA811FE8 + 4 * byte_1BB953A30[v4]))();
}

uint64_t sub_1BA811FE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA811FF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA811FF8);
  return result;
}

uint64_t sub_1BA812004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81200CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BA812010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA812018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA812024()
{
  _BYTE *v0;

  if (*v0)
    return 0x4E79427365707974;
  else
    return 0x7365707974;
}

uint64_t getEnumTagSinglePayload for FormatSymbolImageColor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

NewsFeed::FormatTextAlignment_optional sub_1BA8120C0(Swift::String *a1)
{
  return FormatTextAlignment.init(rawValue:)(*a1);
}

uint64_t sub_1BA8120CC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA8120FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA8120FC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656E696C6E69;
  else
    return 7107189;
}

ValueMetadata *type metadata accessor for HeadlineViewLayout()
{
  return &type metadata for HeadlineViewLayout;
}

uint64_t getEnumTagSinglePayload for FormatFontWidth(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

NewsFeed::FormatSymbolWeight_optional sub_1BA8121C8(Swift::String *a1)
{
  return FormatSymbolWeight.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FeedGap(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s5ImageOwst_0_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA81226C + 4 * byte_1BB8FF2DD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8122A0 + 4 * byte_1BB8FF2D8[v4]))();
}

uint64_t sub_1BA8122A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8122A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8122B0);
  return result;
}

uint64_t sub_1BA8122BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8122C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA8122C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8122D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8122DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BA6197DC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t _s8NewsFeed16FormatFontMetricOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA812330 + 4 * byte_1BB88AC15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA812364 + 4 * byte_1BB88AC10[v4]))();
}

uint64_t sub_1BA812364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81236C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA812374);
  return result;
}

uint64_t sub_1BA812380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA812388);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA81238C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA812394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatDecoration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 107) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 107) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s6ActionO10CodingTypeOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA812440 + 4 * byte_1BB8D7A38[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA812460 + 4 * byte_1BB8D7A3D[v4]))();
}

_BYTE *sub_1BA812440(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA812460(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA812468(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA812470(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA812478(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA812480(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t type metadata accessor for OfflineManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OfflineManager);
}

uint64_t storeEnumTagSinglePayload for FormatSymbolImageColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

void sub_1BA8124EC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA8124FC()
{
  JUMPOUT(0x1BCCE5B24);
}

void destroy for FeedItemRendererResult(_QWORD *a1)
{

}

uint64_t sub_1BA812518()
{
  return swift_allocateGenericValueMetadata();
}

void FeedScoringContext.configurationSet.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1BA812558()
{
  return FeedHeadlineScoringContext.configurationSet.getter();
}

uint64_t FeedHeadlineScoringContext.configurationSet.getter()
{
  char *v0;

  return qword_1BB8DEB80[*v0];
}

uint64_t type metadata accessor for FeedPoolManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedPoolManager);
}

uint64_t FeedScoredItem.item.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1BA8125BC(uint64_t a1, uint64_t a2)
{
  return BlueprintSection<>.feedGroupDebug.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t getEnumTagSinglePayload for FormatVideoNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 161))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FormatContentSlot.Resolved()
{
  return &type metadata for FormatContentSlot.Resolved;
}

uint64_t getEnumTagSinglePayload for FormatRegex()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

id FeedEdition.dateRange.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for FeedEdition() + 20));
}

uint64_t type metadata accessor for FeedEdition()
{
  uint64_t result;

  result = qword_1ED39C900;
  if (!qword_1ED39C900)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FeedMode()
{
  return &type metadata for FeedMode;
}

ValueMetadata *type metadata accessor for Feed()
{
  return &type metadata for Feed;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

double sub_1BA8126F0()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 16);
}

uint64_t storeEnumTagSinglePayload for FeedLayoutDirection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t _s8ResolvedO10CodingTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BA812788 + 4 * byte_1BB933933[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BA8127BC + 4 * byte_1BB93392E[v4]))();
}

uint64_t sub_1BA8127BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8127C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8127CCLL);
  return result;
}

uint64_t sub_1BA8127D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8127E0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BA8127E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8127EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatFlexibleExpression(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA81284C + 4 * byte_1BB8DAA65[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA812880 + 4 * byte_1BB8DAA60[v4]))();
}

uint64_t sub_1BA812880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA812888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA812890);
  return result;
}

uint64_t sub_1BA81289C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8128A4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA8128A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8128B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatAccessibilityTrait_optional sub_1BA8128BC(Swift::String *a1)
{
  return FormatAccessibilityTrait.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for FormatPreviewParameters(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 126);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if ((v3 & 0x7E) != 0)
    v4 = 126 - (v3 & 0x7E | (v3 >> 7));
  else
    v4 = -1;
  return (v4 + 1);
}

void sub_1BA81291C(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C64616568;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1BA812944()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA812970 + 4 * byte_1BB8AEFAB[*v0]))();
}

void sub_1BA812970(_QWORD *a1@<X8>)
{
  *a1 = 0x74696D696CLL;
  a1[1] = 0xE500000000000000;
}

void sub_1BA812988(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616E6F73726570;
  a1[1] = 0xEB00000000657A69;
}

void sub_1BA8129AC(_QWORD *a1@<X8>)
{
  *a1 = 0x65726975716572;
  a1[1] = 0xE700000000000000;
}

void sub_1BA8129C8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7963696C6F70;
  a1[1] = v1;
}

void sub_1BA8129DC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "expireContent");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1BA812A04(_QWORD *a1@<X8>)
{
  *a1 = 6775156;
  a1[1] = 0xE300000000000000;
}

void sub_1BA812A18(_QWORD *a1@<X8>)
{
  *a1 = 0x7453656C7A7A7570;
  a1[1] = 0xEF63697473697461;
}

uint64_t sub_1BA812A44(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA657050(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

id sub_1BA812A50(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA656BE8(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BA812A5C(uint64_t a1)
{
  return sub_1BAB628B4(a1, sub_1BA656A00);
}

uint64_t _s4TextOwst_5(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x15)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 22;
    if (a3 >= 0x16)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x16)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 48) = 8 * (((-a2 & 0x10) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t _s4TextOwet_4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x16 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 22);
  v3 = ((*(unsigned __int8 *)(a1 + 48) >> 4) & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1))) ^ 0x1F;
  if (v3 >= 0x15)
    v3 = -1;
  return v3 + 1;
}

uint64_t FormatContentSlot.Resolved.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s14descr1E731D319V4TextOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1BA812BD0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 160);
  return result;
}

void sub_1BA812BDC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA812BEC()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA812BFC()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for FeedModeState()
{
  return &type metadata for FeedModeState;
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusteringKnobs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedEditionConfig.DateWindow(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupBindingOptions()
{
  return &type metadata for FeedGroupBindingOptions;
}

uint64_t type metadata accessor for FeedGroupKnobsRepool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedGroupKnobsRepool);
}

double FeedLayoutResult.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_1BA812CE4()
{
  return 0x7374756F79616CLL;
}

ValueMetadata *type metadata accessor for FeedOptionList()
{
  return &type metadata for FeedOptionList;
}

uint64_t sub_1BA812D0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA812D38 + 4 * byte_1BB91FD1C[*v0]))(0x657669746341, 0xE600000000000000);
}

uint64_t sub_1BA812D38()
{
  return 1852138835;
}

uint64_t sub_1BA812D48()
{
  return 0x6E657A6F7246;
}

uint64_t sub_1BA812D58()
{
  return 0x4620666F20646E45;
}

uint64_t sub_1BA812D78()
{
  return 0x646568636143;
}

uint64_t sub_1BA812D88()
{
  return 0x64656C6F6F706552;
}

uint64_t sub_1BA812DA0()
{
  return 0x6465646E61707845;
}

uint64_t FormatFeedGroup.revision.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t storeEnumTagSinglePayload for FeedSportsEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BA812E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3A3FE0, (uint64_t)&type metadata for FeedReadStoryCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3A4018, (uint64_t)&type metadata for FeedReadStoryCommandContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A4168 = result;
  return result;
}

uint64_t sub_1BA812EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;

  v0 = MEMORY[0x1E0DEA968];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3BBFD0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v7 - v4;
  sub_1BA4AD288(0, &qword_1ED3BC048, v0, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DBC3F8], v2);
  result = sub_1BB871458();
  qword_1ED3BC220 = result;
  return result;
}

uint64_t sub_1BA812FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, &qword_1ED3C4040, (uint64_t)&type metadata for ReportConcernCompleteContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA4AD288(0, &qword_1ED3C4048, (uint64_t)&type metadata for ReportConcernCompleteContext, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4068 = result;
  return result;
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

uint64_t sub_1BA8130A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BA7DDDA0(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t storeEnumTagSinglePayload for FormatCompilerSlotDefinitionItemSet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinTrait(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BA813104()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for FormatFrameExpressionLogicCompare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFrameExpressionLogicCompare(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatAccessibilityContainer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA8131E0 + 4 * byte_1BB9541F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA813214 + 4 * asc_1BB9541F0[v4]))();
}

uint64_t sub_1BA813214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81321C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA813224);
  return result;
}

uint64_t sub_1BA813230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA813238);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA81323C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSlotDefinitionItemSet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatVideoNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 161) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatImageAdjustmentBlend.ColorData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 241;
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 15;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatImageAdjustmentBlend.ColorData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF1 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 241);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 0x10;
  v5 = v3 - 16;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1BA813354@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FormatFlexibleExpression.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8133AC + 4 * byte_1BB8DAA6F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA8133E0 + 4 * byte_1BB8DAA6A[v4]))();
}

uint64_t sub_1BA8133E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8133E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8133F0);
  return result;
}

uint64_t sub_1BA8133FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA813404);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA813408(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813410(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatColorAndExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorAndExpression(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 124);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

void destroy for GroupLayoutFactoryError(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 0xD)
    v1 = *(_DWORD *)a1 + 13;
  switch(v1)
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    case 1u:

      break;
    case 6u:
    case 7u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_1BA81355C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA813584(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA813584(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA8135B4 + 4 * byte_1BB8AE63C[a1]))(0x7974706D65, 0xE500000000000000);
}

uint64_t sub_1BA8135B4()
{
  return 0x726F6C6F63;
}

uint64_t sub_1BA8135C4()
{
  return 0x746E656964617267;
}

uint64_t sub_1BA8135DC()
{
  return 0x72476C6169646172;
}

uint64_t sub_1BA813600()
{
  return 0x6E726574746170;
}

uint64_t sub_1BA813618()
{
  return 1633905005;
}

uint64_t sub_1BA813628()
{
  return 0x656E696873;
}

uint64_t sub_1BA813638()
{
  return 0x726F7463656C6573;
}

uint64_t sub_1BA813650()
{
  return 0x7463656C65736E75;
}

uint64_t _s3URLOwst_2(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA8136AC + 4 * byte_1BB89779C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA8136CC + 4 * byte_1BB8977A1[v4]))();
}

_BYTE *sub_1BA8136AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA8136CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA8136D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA8136DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA8136E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA8136EC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatResizeConstraint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatResizeConstraint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatResizeConstraint.Dimension(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8137CC + 4 * byte_1BB8D6AB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA813800 + 4 * asc_1BB8D6AB0[v4]))();
}

uint64_t sub_1BA813800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA813810);
  return result;
}

uint64_t sub_1BA81381C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA813824);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA813828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatResizeConstraint::Dimension_optional sub_1BA81383C(Swift::String *a1)
{
  return FormatResizeConstraint.Dimension.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatPackageDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA81389C + 4 * byte_1BB8A060A[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA8138D0 + 4 * byte_1BB8A0605[v5]))();
}

uint64_t sub_1BA8138D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8138D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8138E0);
  return result;
}

uint64_t sub_1BA8138EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8138F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA8138F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatIssueCoverTraits(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA813958 + 4 * byte_1BB93ECE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA81398C + 4 * byte_1BB93ECE0[v4]))();
}

uint64_t sub_1BA81398C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA81399CLL);
  return result;
}

uint64_t sub_1BA8139A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8139B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA8139B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8139BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8139CC@<X0>(char *a1@<X8>)
{
  return FormatWebEmbedBinding.Bool.CodingType.init(rawValue:)(a1);
}

uint64_t sub_1BA8139D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FormatWebEmbedBinding.Bool.CodingType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t FormatWebEmbedBinding.Bool.CodingType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA813A30 + 4 * byte_1BB93B76E[*v0]))(0x6369747241736168, 0xEA0000000000656CLL);
}

unint64_t sub_1BA813A30()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1BA813AE4()
{
  return 0x74726F7053736168;
}

uint64_t _s14descr1E7272991C8DateTimeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA813B54 + 4 * byte_1BB87CC0E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA813B88 + 4 * byte_1BB87CC09[v4]))();
}

uint64_t sub_1BA813B88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813B90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA813B98);
  return result;
}

uint64_t sub_1BA813BA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA813BACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA813BB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813BB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813BC4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA813BEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA813BEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA813C28 + 4 * byte_1BB9150F0[a1]))(0x654E6E496E65706FLL, 0xEC00000062615477);
}

uint64_t sub_1BA813C3C()
{
  return 0x6572616873;
}

uint64_t sub_1BA813C50()
{
  return 0x6974724179706F63;
}

uint64_t sub_1BA813C70()
{
  return 1702257011;
}

uint64_t sub_1BA813C80()
{
  return 1701538156;
}

uint64_t sub_1BA813C90()
{
  return 0x656B696C736964;
}

uint64_t sub_1BA813CA8()
{
  return 0x6E6168436E65706FLL;
}

uint64_t sub_1BA813CC8()
{
  return 0x776F6C6C6F66;
}

uint64_t sub_1BA813CDC()
{
  return 0x6B636F6C62;
}

uint64_t sub_1BA813CF0()
{
  return 0x61536E496E65706FLL;
}

uint64_t sub_1BA813D10()
{
  return 0x74726F706572;
}

unint64_t sub_1BA813D24()
{
  return 0xD000000000000011;
}

unint64_t sub_1BA813D40()
{
  return 0xD000000000000013;
}

uint64_t sub_1BA813D60()
{
  return 0x6B63616279616C70;
}

uint64_t sub_1BA813D78()
{
  return 2036427888;
}

uint64_t sub_1BA813D88()
{
  return 0x616C506B63617274;
}

uint64_t sub_1BA813DAC()
{
  return 0x6F72506B63617274;
}

uint64_t sub_1BA813DD0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA813DF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA813DF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA813E30 + 4 * byte_1BB89A67C[a1]))(0x70795479726F7473, 0xE900000000000065);
}

unint64_t sub_1BA813E30()
{
  return 0xD000000000000015;
}

uint64_t storeEnumTagSinglePayload for FormatCompilerOptions()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatCompilerOptions()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatCompilerOptions.Newsroom()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatCompilerOptions.Newsroom()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FeedIssue.Overrides(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

NewsFeed::FormatButtonNodeState_optional sub_1BA813F28(Swift::String *a1)
{
  return FormatButtonNodeState.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatResizeAutoMask(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BA813F80 + 4 * byte_1BB92D187[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BA813FB4 + 4 * byte_1BB92D182[v4]))();
}

uint64_t sub_1BA813FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA813FC4);
  return result;
}

uint64_t sub_1BA813FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA813FD8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BA813FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA813FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA813FF0()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA814000()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t getEnumTagSinglePayload for FormatCellSelection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatCellSelection.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8140A4 + 4 * byte_1BB94CE55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA8140D8 + 4 * byte_1BB94CE50[v4]))();
}

uint64_t sub_1BA8140D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8140E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8140E8);
  return result;
}

uint64_t sub_1BA8140F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8140FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA814100(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA814108(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatCellSelection::CodingType_optional sub_1BA814114(Swift::String *a1)
{
  return FormatCellSelection.CodingType.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for HeadlineViewLayout.Attributes()
{
  return &type metadata for HeadlineViewLayout.Attributes;
}

uint64_t _s4TextOwst_9(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BA81417C + 4 * byte_1BB8FD574[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BA8141B0 + 4 * byte_1BB8FD56F[v4]))();
}

uint64_t sub_1BA8141B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8141B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8141C0);
  return result;
}

uint64_t sub_1BA8141CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8141D4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BA8141D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8141E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8141EC()
{
  return sub_1BA4E8744();
}

void sub_1BA8141FC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81420C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81421C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81422C()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA81423C()
{
  return sub_1BA4E8744();
}

void sub_1BA814248()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA814258()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t storeEnumTagSinglePayload for FormatPackageRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BA8142B4 + 4 * byte_1BB95492F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BA8142E8 + 4 * byte_1BB95492A[v4]))();
}

uint64_t sub_1BA8142E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8142F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8142F8);
  return result;
}

uint64_t sub_1BA814304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81430CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BA814310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA814318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatPackageRole_optional sub_1BA814324(Swift::String *a1)
{
  return FormatPackageRole.init(rawValue:)(*a1);
}

NewsFeed::FormatContentMode_optional sub_1BA814330(Swift::String *a1)
{
  return FormatContentMode.init(rawValue:)(*a1);
}

uint64_t _s14descr1E730BF49V4BoolOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1BA814388 + 4 * byte_1BB91480A[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1BA8143BC + 4 * byte_1BB914805[v4]))();
}

uint64_t sub_1BA8143BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8143C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8143CCLL);
  return result;
}

uint64_t sub_1BA8143D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8143E0);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1BA8143E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8143EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA8143F8(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C6E69;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1BA814410()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D756D6978616DLL;
  else
    return 0x6D756D696E696DLL;
}

_QWORD *HeadlineService.init(tagService:coreConfigurationManager:cloudContext:paidAccessChecker:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  sub_1BA4CECCC(a1, (uint64_t)(v4 + 2));
  v4[7] = a2;
  v4[8] = a3;
  v4[9] = a4;
  return v4;
}

uint64_t storeEnumTagSinglePayload for FormatBlendMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1BA8144D0 + 4 * byte_1BB87FADD[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1BA814504 + 4 * byte_1BB87FAD8[v4]))();
}

uint64_t sub_1BA814504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81450C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA814514);
  return result;
}

uint64_t sub_1BA814520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA814528);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1BA81452C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA814534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBlendMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

NewsFeed::FormatBlendMode_optional sub_1BA8145D0(Swift::String *a1)
{
  return FormatBlendMode.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatRunMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

void sub_1BA814620()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA814630()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t storeEnumTagSinglePayload for FormatShine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_QWORD *)result = a2 - 4;
    if (a3 >= 4)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 4)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = -a2 & 7;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatShine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 4 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 4);
  v3 = ~*(_DWORD *)a1 & 7;
  if (v3 >= 3)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA8146D0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA8146F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA8146F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA814730 + 4 * byte_1BB8AEEDF[a1]))(0x6E69685364726163, 0xE900000000000065);
}

uint64_t sub_1BA814730()
{
  return 0x696853656C746974;
}

uint64_t storeEnumTagSinglePayload for FormatRegex()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA8147A4()
{
  _BYTE *v0;

  if (*v0)
    return 0x65746144646E65;
  else
    return 0x7461447472617473;
}

uint64_t type metadata accessor for FeedService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedService);
}

uint64_t FeedJournal.entriesByChosenGroupID.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for FeedEdition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA814804(_QWORD *a1)
{
  return *a1 >> 60;
}

ValueMetadata *type metadata accessor for FeedItemRendererResult()
{
  return &type metadata for FeedItemRendererResult;
}

void static FeedAdGroupAdjacency.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *sub_1BA81482C(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

uint64_t type metadata accessor for FeedCursorReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedCursorReference);
}

uint64_t sub_1BA81484C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return FeedCursorContainer.shortDescription.getter(*v1, a1);
}

ValueMetadata *type metadata accessor for FeedServiceOptions.Database()
{
  return &type metadata for FeedServiceOptions.Database;
}

uint64_t type metadata accessor for FeedConfigDecoder(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3B1510);
}

uint64_t FeedLayoutResult.feedGroupDecorations.getter()
{
  return swift_bridgeObjectRetain();
}

void FeedLayoutResult.layoutPath.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t sub_1BA81488C()
{
  return 0x73626F6C62;
}

uint64_t sub_1BA8148A0()
{
  return 0;
}

uint64_t AdFeedGroup.personalizingItems.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BA8148B4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6572646C696863;
  else
    return 0x6574617473;
}

uint64_t storeEnumTagSinglePayload for FormatColorColorExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorColorExpression(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 124);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 4) | (8
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 8 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA814998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA814A64(0, &qword_1ED3C4A38, (uint64_t (*)(uint64_t, unint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA814A64(0, &qword_1ED3C4A98, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4C08 = result;
  return result;
}

void sub_1BA814A64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA814ABC();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA814ABC()
{
  unint64_t result;

  result = qword_1ED3CF9B0;
  if (!qword_1ED3CF9B0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3CF9B0);
  }
  return result;
}

uint64_t sub_1BA814B30(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1BA511EE0(a1, a2, a3, (unint64_t *)&qword_1ED3CF910);
}

uint64_t sub_1BA814B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BA7DD6F8(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BA814B50()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA814B80 + 4 * byte_1BB8AEDE0[*v0]))();
}

void sub_1BA814B80(_QWORD *a1@<X8>)
{
  *a1 = 0x6575737369;
  a1[1] = 0xE500000000000000;
}

void sub_1BA814B98(_QWORD *a1@<X8>)
{
  *a1 = 6775156;
  a1[1] = 0xE300000000000000;
}

void sub_1BA814BAC(_QWORD *a1@<X8>)
{
  *a1 = 0x656C7A7A7570;
  a1[1] = 0xE600000000000000;
}

void sub_1BA814BC4()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA814BE4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

void sub_1BA814BF0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x73646E6F636573;
  if (*v1)
    v2 = 0x646E616D6D6F63;
  *a1 = v2;
  a1[1] = 0xE700000000000000;
}

uint64_t destroy for FormatSyncImageContent()
{
  return swift_release();
}

void sub_1BA814C34(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x656E696C6E69;
  if (v2 != 1)
  {
    v5 = 0x726F7463656C6573;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x676E69646E6962;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1BA814C90(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6465626D45626577;
  if (*v1)
    v2 = 0x6E6F6974706FLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1BA814CCC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1684957538;
  if (*v1)
    v2 = 0x746E756F63;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BA814D00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA814D28 + 4 * byte_1BB8AEDF9[*v0]))();
}

void sub_1BA814D28(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6C616D73;
  a1[1] = 0xE500000000000000;
}

void sub_1BA814D40(_QWORD *a1@<X8>)
{
  *a1 = 0x656772616CLL;
  a1[1] = 0xE500000000000000;
}

void sub_1BA814D58(_QWORD *a1@<X8>)
{
  *a1 = 0x746963696C707865;
  a1[1] = 0xE800000000000000;
}

uint64_t storeEnumTagSinglePayload for FormatColorBlendProcessor(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x74)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 117;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x75)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x75)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatColorBlendProcessor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x75 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 117);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x74)
    v3 = -1;
  return v3 + 1;
}

uint64_t getEnumTagSinglePayload for FormatGroupNodeMaskPath(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

void sub_1BA814E60(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7107189;
  if (*v1)
    v2 = 0x52556E6F69746361;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE90000000000004CLL;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1BA814E9C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x646E656C62;
  if (v2 != 1)
  {
    v5 = 0x7265746C6966;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1802723693;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatDerivedDataBlock(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatDerivedDataBlock(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17ResolvedContainerO10CodingTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA814FD4 + 4 * byte_1BB91CEDE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA815008 + 4 * byte_1BB91CED9[v4]))();
}

uint64_t sub_1BA815008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA815018);
  return result;
}

uint64_t sub_1BA815024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81502CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA815030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815048@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

NewsFeed::FormatUnderlineStyle_optional sub_1BA815054(Swift::String *a1)
{
  return FormatUnderlineStyle.init(rawValue:)(*a1);
}

uint64_t sub_1BA815060(char *a1)
{
  return sub_1BA675448(a1, (uint64_t)sub_1BA6757C0);
}

uint64_t _s8NewsFeed18SavingCommandStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8150B8 + 4 * byte_1BB88B4D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8150EC + 4 * byte_1BB88B4CE[v4]))();
}

uint64_t sub_1BA8150EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8150F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8150FCLL);
  return result;
}

uint64_t sub_1BA815108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA815110);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA815114(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81511C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_QWORD *sub_1BA81512C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1BA8151B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA53C61C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA8151C0(uint64_t a1)
{
  return sub_1BA4D79B8(a1);
}

uint64_t sub_1BA8151CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA655BB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32));
}

uint64_t sub_1BA8151D8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BA65534C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1BA8151E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BA655600(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1BA8151F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BA4E0274(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for FormatLayoutValue()
{
  return &type metadata for FormatLayoutValue;
}

uint64_t storeEnumTagSinglePayload for FormatBundleImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBundleImage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA8152A8@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

uint64_t sub_1BA8152B4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t getEnumTagSinglePayload for FormatUnderline(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && a1[16])
    return (*(_DWORD *)a1 + 248);
  if (*a1 <= 8u)
    v3 = 8;
  else
    v3 = *a1;
  v4 = v3 - 9;
  if (*a1 < 8u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

void sub_1BA815314(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1954047348;
  if (!*v1)
    v2 = 0x686374697773;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1BA815348(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x646E616D6D6F63;
  if (*v1)
    v2 = 0x6567616D69;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatLineCap(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8153D0 + 4 * byte_1BB946FCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA815404 + 4 * byte_1BB946FC8[v4]))();
}

uint64_t sub_1BA815404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81540C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA815414);
  return result;
}

uint64_t sub_1BA815420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA815428);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA81542C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatLineCap_optional sub_1BA815440(Swift::String *a1)
{
  return FormatLineCap.init(rawValue:)(*a1);
}

uint64_t dispatch thunk of FeedSectionPositionProviderType.sectionPosition<A, B>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

uint64_t _s8NewsFeed25FeedGroupFreezingDisallowV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA8154A0 + 4 * byte_1BB91123A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA8154C0 + 4 * byte_1BB91123F[v4]))();
}

_BYTE *sub_1BA8154A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA8154C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA8154C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA8154D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA8154D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA8154E0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA8154EC()
{
  return 0x7461726479686572;
}

uint64_t sub_1BA815508(char *a1, char *a2)
{
  return sub_1BA4CC148(*a1, *a2);
}

ValueMetadata *type metadata accessor for FeedPluginFactoryResult()
{
  return &type metadata for FeedPluginFactoryResult;
}

void sub_1BA81552C()
{
  JUMPOUT(0x1BCCE5B24);
}

id FeedScoredItem.init(item:scoreProfile:feedContext:)@<X0>(id result@<X0>, id a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v5;

  v5 = result;
  if (!a2)
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58B48]), sel_init);
    a2 = result;
  }
  *a4 = v5;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void sub_1BA815590()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA8155A0()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t getEnumTagSinglePayload for FormatDateFormat(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for FormatImageNodeRequestAdjustment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for FormatContentSlotItemAuxiliary.Resolved()
{
  return &type metadata for FormatContentSlotItemAuxiliary.Resolved;
}

uint64_t destroy for FormatOptionBindingModifier()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwet_0(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 123);
  v3 = ((*(_QWORD *)(a1 + 8) >> 57) >> 4) | (8
                                                         * ((*(_QWORD *)(a1 + 8) >> 57) & 8 | *(_QWORD *)(a1 + 8) & 7));
  v4 = v3 ^ 0x7F;
  v5 = 126 - v3;
  if (v4 >= 0x7B)
    v5 = -1;
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for FormatAnimationNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 53))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for FormatCellSelection.Background(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 123);
  v3 = ((*(_QWORD *)(a1 + 48) >> 57) >> 4) | (8
                                                          * ((*(_QWORD *)(a1 + 48) >> 57) & 8 | *(_QWORD *)(a1 + 48) & 7));
  v4 = v3 ^ 0x7F;
  v5 = 126 - v3;
  if (v4 >= 0x7B)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IssueCoverViewLayoutAttributes(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

uint64_t *sub_1BA8157CC(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  return result;
}

uint64_t dispatch thunk of FeedBannerAdFactoryType.makeBannerAd()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void sub_1BA8157EC()
{
  uint64_t *v0;

  FeedServiceFetchResult.shortDescription.getter(*v0);
}

uint64_t FeedJournalGroupResult.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA5B0E6C(v1 + 128, a1);
}

ValueMetadata *type metadata accessor for FeedRebuildPolicy()
{
  return &type metadata for FeedRebuildPolicy;
}

uint64_t destroy for FormatResizeConstraint()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA815824()
{
  return 0x7370756F7267;
}

NewsFeed::AdFeedGroup __swiftcall AdFeedGroup.init(identifier:)(NewsFeed::AdFeedGroup identifier)
{
  NewsFeed::AdFeedGroup *v1;

  *v1 = identifier;
  return identifier;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1BA815880()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0x656D617266;
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpressionLogicCompare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_QWORD *)result = a2 - 245;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 11;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpressionLogicCompare(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF5 && a1[16])
    return (*(_DWORD *)a1 + 245);
  v3 = *a1;
  v4 = v3 >= 0xC;
  v5 = v3 - 12;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpressionLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 243;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 13;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpressionLogic(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && a1[16])
    return (*(_DWORD *)a1 + 243);
  v3 = *a1;
  if (v3 >= 0xC)
    v4 = v3 - 11;
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t SharingPuzzleActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t SharingIssueActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t storeEnumTagSinglePayload for FormatImageNodeRequestAdjustment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 244;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingTextExpressionLogic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F9)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 506;
    if (a3 >= 0x1FA)
      *(_BYTE *)(result + 51) = 1;
  }
  else
  {
    if (a3 >= 0x1FA)
      *(_BYTE *)(result + 51) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_WORD *)(result + 48) = (-256 * a2) & 0xF800;
      *(_BYTE *)(result + 50) = (((-a2 & 0x100) << 12) - (a2 << 21)) >> 16;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingTextExpressionLogic(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1FA && *(_BYTE *)(a1 + 51))
    return (*(_DWORD *)a1 + 506);
  v3 = ((*(unsigned __int8 *)(a1 + 50) >> 5) | (8
                                              * ((*(unsigned __int16 *)(a1 + 48) >> 11) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 50) >> 4) & 1))))) ^ 0x1FF;
  if (v3 >= 0x1F9)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatBindingURLExpressionLogic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA815B5C + 4 * byte_1BB93FA39[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA815B90 + 4 * byte_1BB93FA34[v4]))();
}

uint64_t sub_1BA815B90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815B98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA815BA0);
  return result;
}

uint64_t sub_1BA815BAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA815BB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA815BB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815BC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingDateTimeExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 243;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 13;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingDateTimeExpression(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 243);
  if (*(unsigned __int8 *)(a1 + 8) <= 0xDu)
    v3 = 13;
  else
    v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 - 14;
  if (*(unsigned __int8 *)(a1 + 8) < 0xCu)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatRepeatNodeBindIteration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA815CB0 + 4 * byte_1BB954355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA815CE4 + 4 * byte_1BB954350[v4]))();
}

uint64_t sub_1BA815CE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA815CF4);
  return result;
}

uint64_t sub_1BA815D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA815D08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA815D0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA815D14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSubgroupSection.Resolved()
{
  return &type metadata for FormatContentSubgroupSection.Resolved;
}

uint64_t SharingActivityTypeProvider.init(supportedActivityTypes:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t storeEnumTagSinglePayload for FormatSlotDefinitionItemSet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BA815D4C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6574656D61726170;
  if (*v1)
    v2 = 0x7470697263736564;
  v3 = 0xEA00000000007372;
  if (*v1)
    v3 = 0xEB000000006E6F69;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BA815D98@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA815DC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA815DC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA815DF0 + 4 * byte_1BB8AE933[a1]))(0x6E616964656DLL, 0xE600000000000000);
}

unint64_t sub_1BA815DF0()
{
  return 0xD000000000000015;
}

uint64_t sub_1BA815F50()
{
  return 0x6E6F546169706573;
}

uint64_t sub_1BA815F6C()
{
  return 0x6E61697373756167;
}

uint64_t storeEnumTagSinglePayload for FormatBindingURLExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 3;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatBindingURLExpression(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

void sub_1BA81601C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BA57EF8C(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t _s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = ((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3) | ((unint64_t)((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3)) << 57)) & 0xF000000000000007;
  }
  return result;
}

NewsFeed::FormatFlexibleExpression::Direction_optional sub_1BA816080(Swift::String *a1)
{
  return FormatFlexibleExpression.Direction.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatAnimationNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 53) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_1BA8160E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x646E616D6D6F63;
  if (*v1)
    v2 = 0x656E696C6E69;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FormatButtonNodeBinding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 131 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 131) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7C)
    return ((uint64_t (*)(void))((char *)&loc_1BA816170 + 4 * byte_1BB8DF951[v4]))();
  *a1 = a2 - 125;
  return ((uint64_t (*)(void))((char *)sub_1BA8161A4 + 4 * byte_1BB8DF94C[v4]))();
}

uint64_t sub_1BA8161A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8161AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8161B4);
  return result;
}

uint64_t sub_1BA8161CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8161D4);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_1BA8161D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8161E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingArticleActivity()
{
  return &type metadata for SharingArticleActivity;
}

NewsFeed::FormatIssueCoverTraits_optional sub_1BA816200(Swift::String *a1)
{
  return FormatIssueCoverTraits.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for SharingPuzzleActivity()
{
  return &type metadata for SharingPuzzleActivity;
}

uint64_t _s12LayeredMediaOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA816260 + 4 * asc_1BB901190[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA816280 + 4 * byte_1BB901195[v4]))();
}

_BYTE *sub_1BA816260(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA816280(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA816288(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA816290(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA816298(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA8162A0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA8162AC@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

void sub_1BA8162B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x656E696C6E69;
  if (*v1)
    v2 = 0x6E6967756C70;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

ValueMetadata *type metadata accessor for SharingIssueActivity()
{
  return &type metadata for SharingIssueActivity;
}

NewsFeed::FormatResizeAutoMask_optional sub_1BA8162F8(Swift::String *a1)
{
  return FormatResizeAutoMask.init(rawValue:)(*a1);
}

void sub_1BA816304(uint64_t a1)
{
  char *v1;

  sub_1BA4CEDE4(a1, *v1);
}

uint64_t sub_1BA81630C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA816334(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA816334(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA816368 + 4 * byte_1BB8AEA59[a1]))(0x65746167656C6564, 0xE800000000000000);
}

uint64_t sub_1BA816368()
{
  return 0x676E69646E6962;
}

uint64_t sub_1BA816380()
{
  return 0x4C52556E65706FLL;
}

uint64_t sub_1BA816398()
{
  return 0x6574756F72;
}

uint64_t sub_1BA8163AC()
{
  return 0x616C506F65646976;
}

unint64_t sub_1BA8163D0()
{
  return 0xD000000000000013;
}

uint64_t sub_1BA8163EC()
{
  return 0x64656C6261736964;
}

uint64_t sub_1BA816400()
{
  return 0x726574756F72;
}

uint64_t storeEnumTagSinglePayload for FormatCommandOpenURL.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA816460 + 4 * byte_1BB889D49[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA816494 + 4 * byte_1BB889D44[v4]))();
}

uint64_t sub_1BA816494(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81649C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8164A4);
  return result;
}

uint64_t sub_1BA8164B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8164B8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA8164BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8164C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8164D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA8164FC + 4 * byte_1BB889D3F[*v0]))();
}

void sub_1BA8164FC(_QWORD *a1@<X8>)
{
  *a1 = 0x6574756C6F736261;
  a1[1] = 0xE800000000000000;
}

void sub_1BA816518(_QWORD *a1@<X8>)
{
  *a1 = 0x7465737361;
  a1[1] = 0xE500000000000000;
}

void sub_1BA816530(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E6F6974706FLL;
  a1[1] = v1;
}

void sub_1BA816544(_QWORD *a1@<X8>)
{
  *a1 = 0x79747265706F7270;
  a1[1] = 0xE800000000000000;
}

uint64_t StubOfflineProvider.init(offlineReason:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementary.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8165B8 + 4 * byte_1BB89FB75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8165EC + 4 * byte_1BB89FB70[v4]))();
}

uint64_t sub_1BA8165EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8165F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8165FCLL);
  return result;
}

uint64_t sub_1BA816608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA816610);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA816614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81661C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatSupplementary::Kind_optional sub_1BA816628(Swift::String *a1)
{
  return FormatSupplementary.Kind.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatJsonConfigKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA816680 + 4 * byte_1BB921355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8166B4 + 4 * byte_1BB921350[v4]))();
}

uint64_t sub_1BA8166B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8166BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8166C4);
  return result;
}

uint64_t sub_1BA8166D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8166D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA8166DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8166E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatGroupPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA81673C + 4 * byte_1BB8F2BC9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA816770 + 4 * byte_1BB8F2BC4[v4]))();
}

uint64_t sub_1BA816770(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816778(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA816780);
  return result;
}

uint64_t sub_1BA81678C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA816794);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA816798(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8167A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatGroupPriority_optional sub_1BA8167AC(Swift::String *a1)
{
  return FormatGroupPriority.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatGroupItemKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BA816804 + 4 * byte_1BB92F058[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BA816838 + 4 * byte_1BB92F053[v4]))();
}

uint64_t sub_1BA816838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA816848);
  return result;
}

uint64_t sub_1BA816854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81685CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BA816860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA816874(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xEA0000000000646ELL;
  v3 = *v1;
  v4 = 0xEA0000000000746ELL;
  v5 = 0x65746E6F436D6964;
  if (v3 != 1)
  {
    v5 = 1701736302;
    v4 = 0xE400000000000000;
  }
  v6 = v3 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x756F72676B636162;
  if (!v6)
    v2 = v4;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t storeEnumTagSinglePayload for FormatCellSelection.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = ((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3) | ((unint64_t)((16 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 3)) << 57)) & 0xF000000000000007;
  }
  return result;
}

uint64_t sub_1BA816934(uint64_t a1)
{
  return sub_1BA4D79B8(a1);
}

uint64_t storeEnumTagSinglePayload for FormatImageBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatURLAnnotator()
{
  return &type metadata for FormatURLAnnotator;
}

uint64_t storeEnumTagSinglePayload for FormatTagIconStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BA8169E4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA816A0C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA816A0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA816A48 + 4 * byte_1BB8FD568[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BA816A48()
{
  return 0x656C746974;
}

uint64_t sub_1BA816A5C()
{
  return 0x7461447265766F63;
}

unint64_t sub_1BA816A78()
{
  return 0xD000000000000010;
}

uint64_t sub_1BA816A94()
{
  return 0x656873696C627570;
}

uint64_t sub_1BA816AB8()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1BA816AD0()
{
  return 0x6974616D6F747561;
}

uint64_t _s4BoolOwst_0_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA816B38 + 4 * byte_1BB900ADF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA816B6C + 4 * byte_1BB900ADA[v4]))();
}

uint64_t sub_1BA816B6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816B74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA816B7CLL);
  return result;
}

uint64_t sub_1BA816B88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA816B90);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA816B94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816B9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s4BoolOwst_4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F7)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 504;
    if (a3 >= 0x1F8)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0x1F8)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 32 * (-(char)a2 & 1);
      *(_BYTE *)(result + 9) = -a2 >> 1;
    }
  }
  return result;
}

uint64_t sub_1BA816BFC()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BA816C04()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA816C14()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA816C24()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA816C34()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA816C44()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA816C54()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA816C64()
{
  _BYTE *v0;

  if (*v0)
    return 1885433183;
  else
    return 0x6574656D61726170;
}

NewsFeed::FormatSymbolScale_optional sub_1BA816C9C(Swift::String *a1)
{
  return FormatSymbolScale.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatMediaTiming(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 137) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t initializeWithCopy for FormatAssetHandle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 56);
    *v5 = *v6;
    *(_OWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  return a1;
}

uint64_t _s14descr1E7283981V5ColorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1BA816DE0 + 4 * byte_1BB88CCDE[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1BA816E14 + 4 * byte_1BB88CCD9[v4]))();
}

uint64_t sub_1BA816E14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA816E24);
  return result;
}

uint64_t sub_1BA816E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA816E38);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1BA816E3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA816E44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s10CodingKeysOwet_3(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1BA816EE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B98F0);
  result = sub_1BB86DF3C();
  if (result)
  {
    v4 = result;
    v5 = type metadata accessor for PaidBundleConfigManager();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for PaidBundleConfigManager;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatFontWidth(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BA816FC8 + 4 * byte_1BB906D13[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BA816FFC + 4 * byte_1BB906D0E[v4]))();
}

uint64_t sub_1BA816FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA81700CLL);
  return result;
}

uint64_t sub_1BA817018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA817020);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BA817024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81702C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1023);
  v3 = (((unsigned __int16)(2 * ((*(_QWORD *)(a1 + 8) >> 57) & 0x78 | *(_QWORD *)(a1 + 8) & 7)) | (unsigned __int16)((unsigned __int16)*(_DWORD *)(a1 + 24) << 8)) & 0x3FE | (*(_DWORD *)(a1 + 24) >> 2) & 1) ^ 0x3FF;
  if (v3 >= 0x3FE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA8170A0()
{
  return 1701667182;
}

uint64_t _s8NewsFeed14FormatItemKindO10CodingTypeOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA8170F0 + 4 * byte_1BB89342D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA817110 + 4 * byte_1BB893432[v4]))();
}

_BYTE *sub_1BA8170F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA817110(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA817118(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA817120(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA817128(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA817130(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1BA817140()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t FormatConfig.init(showMissingOptionBindings:environment:annotator:feedAppConfig:)@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v5 = result;
  v7 = *a2;
  v8 = *a3;
  v9 = a3[1];
  v10 = *a4;
  v11 = a4[1];
  v12 = *((_QWORD *)a4 + 4);
  if (v7 == 8)
  {
    v15 = a4[1];
    v16 = *a4;
    sub_1BB86D294();
    sub_1BB86D27C();
    if (qword_1ED3D5158 != -1)
      swift_once();
    sub_1BB86D270();
    result = swift_release();
    LOBYTE(v7) = v17;
    v11 = v15;
    v10 = v16;
  }
  *(_BYTE *)a5 = v5 & 1;
  if (v9 == 1)
    v13 = 0;
  else
    v13 = v8;
  *(_BYTE *)(a5 + 1) = v7;
  if (v9 == 1)
    v14 = 0;
  else
    v14 = v9;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 16) = v14;
  *(_OWORD *)(a5 + 24) = v10;
  *(_OWORD *)(a5 + 40) = v11;
  *(_QWORD *)(a5 + 56) = v12;
  return result;
}

uint64_t sub_1BA81722C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BA81725C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736D657469;
  if (*v0 != 1)
    v1 = 0x7974697669746361;
  if (*v0)
    return v1;
  else
    return 0x7370756F7267;
}

uint64_t dispatch thunk of FeedGroupType.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for FeedAppConfig()
{
  return &type metadata for FeedAppConfig;
}

uint64_t storeEnumTagSinglePayload for FeedEdition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BA8172E0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x746C7561666564;
  if (*v1)
    v2 = 0x656E696C66666FLL;
  *a1 = v2;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1BA817318(char *a1, char *a2)
{
  return sub_1BA4BC8BC(*a1, *a2);
}

uint64_t sub_1BA817328(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 7)
    return (*(_DWORD *)a1 + 7);
  return result;
}

ValueMetadata *type metadata accessor for FeedJournalGroupResultOutput()
{
  return &type metadata for FeedJournalGroupResultOutput;
}

uint64_t sub_1BA817358()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA817380 + 4 * byte_1BB925DF4[*v0]))();
}

void sub_1BA817380(_QWORD *a1@<X8>)
{
  *a1 = 0x646961706E75;
  a1[1] = 0xE600000000000000;
}

void sub_1BA817398(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1752461154;
  a1[1] = v1;
}

void sub_1BA8173A8(_QWORD *a1@<X8>)
{
  *a1 = 0x7265687469656ELL;
  a1[1] = 0xE700000000000000;
}

uint64_t FeedGroupKnobsRuleValue.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL FeedServiceFetchResult.isEndOfFeed.getter(unint64_t a1)
{
  return a1 >> 62 != 0;
}

ValueMetadata *type metadata accessor for FeedJournalGroupResult()
{
  return &type metadata for FeedJournalGroupResult;
}

_QWORD *sub_1BA817434(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_1BA817444(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA5470A4(a1, *(_QWORD *)(v1 + 64));
}

id static FeedJournalFormatter.dateFormatter.getter()
{
  return sub_1BA4B72EC(&qword_1ED39E040, (id *)&qword_1ED39AC18);
}

void sub_1BA817474(void *a1)
{
  uint64_t v1;

  sub_1BA4FD4A4(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

__n128 FeedGroupKnobsRules.init(rankMultiplier:baseScore:scoreThreshold:selectors:maxOccurrence:maxOccurrencePerConfig:maxOccurrencePerPublishDate:maxOccurrencePerEditions:precededBy:preferredPrecededBy:notPrecededBy:preferredNotPrecededBy:priorOccurrenceOf:noPriorOccurrenceOf:groupDistance:preferredGroupDistance:followedBy:preferredFollowedBy:notFollowedBy:preferredNotFollowedBy:daysOfWeek:notDaysOfWeek:timesOfDay:notTimesOfDay:feedModes:notFeedModes:alwaysSkip:alwaysSkipUntilEndOfFeed:allowedPlatforms:blockedPlatforms:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __n128 a19, uint64_t a20,uint64_t a21)
{
  __n128 result;

  result = a19;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(_OWORD *)(a9 + 128) = a14;
  *(_OWORD *)(a9 + 144) = a15;
  *(_OWORD *)(a9 + 160) = a16;
  *(_OWORD *)(a9 + 176) = a17;
  *(_OWORD *)(a9 + 192) = a18;
  *(__n128 *)(a9 + 208) = a19;
  *(_QWORD *)(a9 + 224) = a20;
  *(_QWORD *)(a9 + 232) = a21;
  return result;
}

uint64_t static FeedCursorReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  if ((v3 & 0x4000000000000000) != 0)
  {
    if ((v4 & 0x4000000000000000) != 0)
    {
      sub_1BB3A19A0();
      sub_1BB3A19A0();
      v7 = static FeedCursorContainer.== infix(_:_:)(v3 & 0xBFFFFFFFFFFFFFFFLL, v4 & 0xBFFFFFFFFFFFFFFFLL, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
      sub_1BA4B0900();
      sub_1BA4B0900();
      return v7 & 1;
    }
    return 0;
  }
  if ((v4 & 0x4000000000000000) != 0)
    return 0;
  if (*(_QWORD *)(v3 + 16) == *(_QWORD *)(v4 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(v4 + 24))
    return 1;
  else
    return sub_1BB874398();
}

uint64_t sub_1BA81757C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA8175AC + 4 * byte_1BB8A292F[*v0]))(0x65646F4D64656566, 0xE800000000000000);
}

unint64_t sub_1BA8175AC()
{
  return 0xD000000000000010;
}

unint64_t sub_1BA8175C8()
{
  return 0xD000000000000013;
}

uint64_t sub_1BA8175E8()
{
  return 0x6573616261746164;
}

ValueMetadata *type metadata accessor for FeedEditionConfig()
{
  return &type metadata for FeedEditionConfig;
}

uint64_t sub_1BA81760C()
{
  return sub_1BA4FA454();
}

uint64_t sub_1BA81761C()
{
  return swift_getAssociatedConformanceWitness();
}

ValueMetadata *type metadata accessor for FeedJournalGroup()
{
  return &type metadata for FeedJournalGroup;
}

uint64_t FeedJournalGroup.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4DD504(v1, a1);
}

uint64_t FeedJournalEntry.emittedGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA817664()
{
  return 0x73726F73727563;
}

uint64_t FeedGroupConfig.blockedSegmentSetIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.allowedSegmentSetIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.blockedPlatforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.allowedPlatforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeedGroupConfig.minNewsVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BA6BF98C(v2 + *(int *)(a1 + 60), a2);
}

uint64_t FeedGroupConfig.maxNewsVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BA6BF98C(v2 + *(int *)(a1 + 64), a2);
}

uint64_t storeEnumTagSinglePayload for FeedDaysOfWeek(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BA817718 + 4 * byte_1BB898E20[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BA81774C + 4 * byte_1BB898E1B[v4]))();
}

uint64_t sub_1BA81774C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA81775CLL);
  return result;
}

uint64_t sub_1BA817768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA817770);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BA817774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81777C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NewsEnvironment()
{
  return &type metadata for NewsEnvironment;
}

uint64_t storeEnumTagSinglePayload for FormatHeadlineTrackDurationFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8177E4 + 4 * byte_1BB92DBF6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA817818 + 4 * byte_1BB92DBF1[v4]))();
}

uint64_t sub_1BA817818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA817828);
  return result;
}

uint64_t sub_1BA817834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81783CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA817840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA817920(0, &qword_1ED3B0A90, (uint64_t (*)(uint64_t, unint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA817920(0, (unint64_t *)&unk_1ED3BA650, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4B60 = result;
  return result;
}

void sub_1BA817920(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA768D08();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t static Settings.NewsContentEnvironment.contentEnvironment.getter()
{
  if (qword_1ED3D5158 != -1)
    swift_once();
  return swift_retain();
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t objectdestroy_60Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1BA69D314(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BA817AFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA817B58();
    v7 = a3(a1, &type metadata for FormatContentSubgroupFilterSelector.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA817B58()
{
  unint64_t result;

  result = qword_1ED3A9FC0;
  if (!qword_1ED3A9FC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB940DB8, &type metadata for FormatContentSubgroupFilterSelector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FC0);
  }
  return result;
}

void sub_1BA817B9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA817BF8();
    v7 = a3(a1, &type metadata for FormatContentSubgroupFilter.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA817BF8()
{
  unint64_t result;

  result = qword_1ED3A7F60;
  if (!qword_1ED3A7F60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1A68, &type metadata for FormatContentSubgroupFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F60);
  }
  return result;
}

uint64_t sub_1BA817C3C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4CBD58(*(void **)(v1 + 24), a1);
}

void sub_1BA817C48(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BA4CFCA0(a1, a2, a3, a4, *(void **)(v4 + 24), *(_BYTE *)(v4 + 32));
}

double static Double.oneMinute.getter()
{
  return 60.0;
}

uint64_t sub_1BA817C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BA4C72F4(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BA817C68(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA594FA8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA817C70(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA59412C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA817C78(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA5953B4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA817C80(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA594538(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA817C88(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA4C3FD4(a1, *(_QWORD *)(v1 + 16));
}

void sub_1BA817C90(uint64_t a1)
{
  uint64_t v1;

  sub_1BA5957F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BA817C98(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA59569C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for PuzzleGameCenterOpenLeaderboardEntryPoint()
{
  return &type metadata for PuzzleGameCenterOpenLeaderboardEntryPoint;
}

uint64_t storeEnumTagSinglePayload for FormatBindingShareAttributionExpression(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA817CFC + 4 * byte_1BB92FDE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA817D30 + 4 * byte_1BB92FDE0[v4]))();
}

uint64_t sub_1BA817D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA817D40);
  return result;
}

uint64_t sub_1BA817D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA817D54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA817D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodeRubberbandTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA817DC0 + 4 * byte_1BB8860AA[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA817DF4 + 4 * byte_1BB8860A5[v5]))();
}

uint64_t sub_1BA817DF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817DFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA817E04);
  return result;
}

uint64_t sub_1BA817E10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA817E18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA817E1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA817E24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingLayeredMediaExpression(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA817E7C + 4 * byte_1BB9540F5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1BA817EB0 + 4 * byte_1BB9540F0[v4]))();
}

uint64_t sub_1BA817EB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1BA817EB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1BA817EC0);
  return result;
}

uint64_t sub_1BA817ECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1BA817ED4);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA817ED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1BA817EE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatShareAttributionNodeBinding(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA817F2C + 4 * byte_1BB91E2F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA817F4C + 4 * byte_1BB91E2F5[v4]))();
}

_BYTE *sub_1BA817F2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA817F4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA817F54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA817F5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA817F64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA817F6C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA817F78@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

void sub_1BA817F84()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA817F94()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA817FA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA817FCC + 4 * byte_1BB8AED31[*v0]))();
}

void sub_1BA817FCC(_QWORD *a1@<X8>)
{
  *a1 = 0x74616F6C66;
  a1[1] = 0xE500000000000000;
}

void sub_1BA817FE4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1954047348;
  a1[1] = v1;
}

void sub_1BA817FF4(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

void sub_1BA818008(_QWORD *a1@<X8>)
{
  *a1 = 0x656D695465746164;
  a1[1] = 0xE800000000000000;
}

uint64_t destroy for FormatImageNodeRequestAdjustment(uint64_t a1)
{
  return sub_1BA5271D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

void sub_1BA818044()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA818054()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA818064()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA818094 + 4 * byte_1BB8AE3AC[*v0]))();
}

void sub_1BA818094(_QWORD *a1@<X8>)
{
  *a1 = 0x7974706D45746F6ELL;
  a1[1] = 0xE800000000000000;
}

void sub_1BA8180B0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E7265746E497369;
  a1[1] = 0xEA00000000006C61;
}

uint64_t sub_1BA8180DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA818104 + 4 * byte_1BB8AF1BE[*v0]))();
}

void sub_1BA818104(_QWORD *a1@<X8>)
{
  *a1 = 0x656E694C74786574;
  a1[1] = 0xE900000000000073;
}

void sub_1BA818124(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 6581857;
  a1[1] = v1;
}

void sub_1BA818134(_QWORD *a1@<X8>)
{
  *a1 = 29295;
  a1[1] = 0xE200000000000000;
}

uint64_t storeEnumTagSinglePayload for FormatLayeredMediaNodeBinding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA818190 + 4 * byte_1BB886575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8181C4 + 4 * byte_1BB886570[v4]))();
}

uint64_t sub_1BA8181C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8181CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8181D4);
  return result;
}

uint64_t sub_1BA8181E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8181E8);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA8181EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8181F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818200@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerNodeBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerNodeBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA81829C@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

void sub_1BA8182A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E656964617267;
  if (*v1)
    v2 = 0x726F6C6F63;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BA8182E4()
{
  return 0x697461726F636564;
}

uint64_t storeEnumTagSinglePayload for FormatCompilerEnumProperty()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FormatCompilerEnumProperty()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FormatAnimationNodeKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 245;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatAnimationNodeKeyPath(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF5 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 245);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 0xB)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA8183C0()
{
  return sub_1BB86E41C();
}

uint64_t sub_1BA8183CC()
{
  return sub_1BB86E3BC();
}

uint64_t sub_1BA8183D4()
{
  return sub_1BB86E3C8();
}

uint64_t MailShareLinkTextProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t storeEnumTagSinglePayload for FormatMediaTimingFillMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA818430 + 4 * byte_1BB8F5A09[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA818464 + 4 * byte_1BB8F5A04[v4]))();
}

uint64_t sub_1BA818464(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81846C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA818474);
  return result;
}

uint64_t sub_1BA818480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA818488);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA81848C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818494(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.addObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

unint64_t sub_1BA8184A8()
{
  return 0xD00000000000001ELL;
}

_QWORD *ImagePersistenceProvider.init(imageCache:rendererEnvironment:layoutCollectionProvider:layoutProvider:layoutOptionsProvider:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  sub_1BA4CECCC(a1, (uint64_t)(v6 + 2));
  sub_1BA4CECCC(a2, (uint64_t)(v6 + 7));
  v6[12] = a3;
  v6[13] = a4;
  v6[14] = a5;
  v6[15] = a6;
  return v6;
}

uint64_t sub_1BA818520@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

void sub_1BA81852C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81853C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81854C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x746E756F63;
  if (v2 != 1)
  {
    v5 = 1953459315;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73626F6E6BLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

NewsFeed::FormatTextLineBreakMode_optional sub_1BA8185A0(Swift::String *a1)
{
  return FormatTextLineBreakMode.init(rawValue:)(*a1);
}

uint64_t sub_1BA8185AC@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FormatIssueCoverBinding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA818604 + 4 * byte_1BB8E6305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA818638 + 4 * byte_1BB8E6300[v4]))();
}

uint64_t sub_1BA818638(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA818648);
  return result;
}

uint64_t sub_1BA818654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA81865CLL);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA818660(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818668(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818674@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t sub_1BA818680()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA8186B8 + 4 * byte_1BB8AE84D[*v0]))();
}

void sub_1BA8186B8(_QWORD *a1@<X8>)
{
  *a1 = 0x61507265697A6562;
  a1[1] = 0xEA00000000006874;
}

void sub_1BA8186D8(_QWORD *a1@<X8>)
{
  *a1 = 1818326639;
  a1[1] = 0xE400000000000000;
}

void sub_1BA8186EC(_QWORD *a1@<X8>)
{
  *a1 = 0x746E656964617267;
  a1[1] = 0xE800000000000000;
}

void sub_1BA818708(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "actionOpenURL");
  *(_WORD *)(a1 + 14) = -4864;
}

ValueMetadata *type metadata accessor for FormatAccessibilityRole()
{
  return &type metadata for FormatAccessibilityRole;
}

uint64_t sub_1BA818740@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BA6195A0(v1, a1);
}

uint64_t _s6ActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA818794 + 4 * byte_1BB9469C1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8187C8 + 4 * asc_1BB9469BC[v4]))();
}

uint64_t sub_1BA8187C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8187D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8187D8);
  return result;
}

uint64_t sub_1BA8187E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8187ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA8187F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8187F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818804@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t _s14descr1E72FBAF1C3URLOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA81885C + 4 * byte_1BB903495[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA818890 + 4 * byte_1BB903490[v4]))();
}

uint64_t sub_1BA818890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8188A0);
  return result;
}

uint64_t sub_1BA8188AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8188B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA8188B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8188C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s10SharedItemOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA81890C + 4 * byte_1BB946614[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA81892C + 4 * byte_1BB946619[v4]))();
}

_BYTE *sub_1BA81890C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA81892C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA818934(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA81893C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA818944(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA81894C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA818958@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

id ColorPaletteProviding.gapColorPalette.getter@<X0>(void **a1@<X8>)
{
  return sub_1BA5E0754(&qword_1ED3BA728, (void **)&qword_1ED3B4500, (id *)algn_1ED3B4508, a1);
}

ValueMetadata *type metadata accessor for TraversalOnlyEncoder()
{
  return &type metadata for TraversalOnlyEncoder;
}

uint64_t (*TraversalOnlyEncoder.userInfo.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t TraversalOnlyEncoder.init(codingPath:userInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSizeConstraint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8189F8 + 4 * byte_1BB8A13E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA818A2C + 4 * asc_1BB8A13E0[v4]))();
}

uint64_t sub_1BA818A2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818A34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA818A3CLL);
  return result;
}

uint64_t sub_1BA818A48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA818A50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA818A54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818A5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

NewsFeed::FormatSizeConstraint_optional sub_1BA818A68(Swift::String *a1)
{
  return FormatSizeConstraint.init(rawValue:)(*a1);
}

void sub_1BA818A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BA50F95C(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t storeEnumTagSinglePayload for FormatPropertyValue.CodingType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA818AC0 + 4 * byte_1BB8946F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA818AE0 + 4 * byte_1BB8946F5[v4]))();
}

_BYTE *sub_1BA818AC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA818AE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA818AE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA818AF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA818AF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA818B00(_DWORD *result)
{
  *result = 0;
  return result;
}

NewsFeed::FormatJsonConfigKey_optional sub_1BA818B0C(Swift::String *a1)
{
  return FormatJsonConfigKey.init(rawValue:)(*a1);
}

NewsFeed::FormatGroupItemKind_optional sub_1BA818B18(Swift::String *a1)
{
  return FormatGroupItemKind.init(rawValue:)(*a1);
}

void sub_1BA818B24(uint64_t a1)
{
  char *v1;

  sub_1BA4BB3A8(a1, *v1);
}

uint64_t sub_1BA818B2C(char *a1)
{
  return sub_1BA675448(a1, (uint64_t)sub_1BA67B680);
}

void sub_1BA818B38(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6465766173;
  if (*v1)
    v2 = 0x6465766153746F6ELL;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for FormatTagIconStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void sub_1BA818BBC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7265766F63;
  if (*v1)
    v2 = 0x656873696C627570;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xED00006F676F4C72;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t _s10IssueCoverOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA818C48 + 4 * asc_1BB949A08[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA818C68 + 4 * byte_1BB949A0D[v4]))();
}

_BYTE *sub_1BA818C48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA818C68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA818C70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA818C78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA818C80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA818C88(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA818C94@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

uint64_t _s5ImageOwst_2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t _s5ImageOwet_1(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 123);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

unint64_t sub_1BA818D5C()
{
  unint64_t result;

  result = qword_1ED3C7BF0;
  if (!qword_1ED3C7BF0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerFlag, &type metadata for FormatCompilerFlag);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BF0);
  }
  return result;
}

uint64_t sub_1BA818DA0()
{
  uint64_t *v0;

  return sub_1BA4E23A8(v0[2], v0[3], v0[4]);
}

uint64_t ShareLinkProvider.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t getEnumTagSinglePayload for FormatMediaTiming(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 137))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s14descr1E72F5289V5ImageOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 2 * -a2;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s14descr1E72F5289V5ImageOwet(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)a1 >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

void sub_1BA818EB0()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA818EC0()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t storeEnumTagSinglePayload for FormatFontDesign(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA818F24 + 4 * byte_1BB89BBA9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA818F58 + 4 * byte_1BB89BBA4[v4]))();
}

uint64_t sub_1BA818F58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818F60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA818F68);
  return result;
}

uint64_t sub_1BA818F74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA818F7CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA818F80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA818F88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatFixedColor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1BA818FE0 + 4 * byte_1BB8E4AD2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1BA819014 + 4 * byte_1BB8E4ACD[v4]))();
}

uint64_t sub_1BA819014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA81901C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA819024);
  return result;
}

uint64_t sub_1BA819030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA819038);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1BA81903C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFixedColor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

NewsFeed::FormatFixedColor_optional sub_1BA8190E0(Swift::String *a1)
{
  return FormatFixedColor.init(rawValue:)(*a1);
}

uint64_t storeEnumTagSinglePayload for FormatCustomFont(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatCustomFont(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA819178@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 184);
  return result;
}

uint64_t sub_1BA819184@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B98F0);
  result = sub_1BB86DF3C();
  if (result)
  {
    v4 = result;
    v5 = type metadata accessor for FeedAppConfigManager();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    type metadata accessor for FormatFeedConfigManager();
    swift_allocObject();
    result = sub_1BA90728C();
    *(_QWORD *)(v6 + 24) = result;
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for FeedAppConfigManager;
    *a2 = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for GapColorPalette()
{
  return &type metadata for GapColorPalette;
}

id GapColorPalette.tintColor.getter()
{
  id *v0;

  return *v0;
}

uint64_t storeEnumTagSinglePayload for FormatMenuTitle(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 1023;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 >> 7) & 7;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuTitle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1023);
  v3 = (((unsigned __int16)(2 * ((*(_QWORD *)(a1 + 8) >> 57) & 0x78 | *(_QWORD *)(a1 + 8) & 7)) | (unsigned __int16)((unsigned __int16)*(_DWORD *)(a1 + 24) << 8)) & 0x3FE | (*(_DWORD *)(a1 + 24) >> 2) & 1) ^ 0x3FF;
  if (v3 >= 0x3FE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA819318@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

uint64_t storeEnumTagSinglePayload for FormatMenuImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 1023;
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0x3000000000000007;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = ((v3 >> 5) | (v3 << 52)) & 0x3000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenuImage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1023);
  v3 = (((*(_QWORD *)(a1 + 16) >> 52) >> 9) & 1 | (2
                                                               * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7 | (32 * (*(_QWORD *)(a1 + 16) & 7)) | (*(_QWORD *)(a1 + 16) >> 52) & 0x100))) ^ 0x3FF;
  if (v3 >= 0x3FE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BA819400@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

NewsFeed::FormatFontWidth_optional sub_1BA81940C(Swift::String *a1)
{
  return FormatFontWidth.init(rawValue:)(*a1);
}

unint64_t sub_1BA819418(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL OfflineManager.State.isOnline.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == 0;
}

uint64_t storeEnumTagSinglePayload for FormatMenuItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 1023;
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x3FF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FF | ((-a2 & 0x3FF) << 9);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 >> 7) & 7;
    }
  }
  return result;
}

uint64_t sub_1BA8194E4()
{
  return swift_task_switch();
}

uint64_t sub_1BA8194F8()
{
  return swift_task_switch();
}

uint64_t sub_1BA81950C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1768) = v0;
  return swift_task_switch();
}

uint64_t sub_1BA819538()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA8195A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BA819614@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

uint64_t storeEnumTagSinglePayload for FormatRoute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA81966C + 4 * byte_1BB8A1DCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA8196A0 + 4 * asc_1BB8A1DC8[v4]))();
}

uint64_t sub_1BA8196A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8196A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8196B0);
  return result;
}

uint64_t sub_1BA8196BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8196C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA8196C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8196D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedDateRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FeedGroupTopicDiversityRequirements(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGroupTopicDiversityRequirements(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for FeedGroupClusterOrderingMode()
{
  return &type metadata for FeedGroupClusterOrderingMode;
}

uint64_t storeEnumTagSinglePayload for FeedSubscriptionPaidAccess(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8197FC + 4 * byte_1BB89E187[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA819830 + 4 * byte_1BB89E182[v4]))();
}

uint64_t sub_1BA819830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA819840);
  return result;
}

uint64_t sub_1BA81984C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA819854);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA819858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t FeedPersonalizationService.init(feedPersonalizingEngine:groupingPersonalizer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

ValueMetadata *type metadata accessor for FeedRefreshUpdateBehavior()
{
  return &type metadata for FeedRefreshUpdateBehavior;
}

uint64_t FeedPluginManagerResult.pluginModels.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for FeedAutoRefreshStrategy()
{
  return &type metadata for FeedAutoRefreshStrategy;
}

unint64_t sub_1BA8198A0()
{
  unint64_t result;

  result = qword_1ED39ACE8;
  if (!qword_1ED39ACE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB378, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39ACE8);
  }
  return result;
}

unint64_t sub_1BA8198E4()
{
  unint64_t result;

  result = qword_1ED39ACE0;
  if (!qword_1ED39ACE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB350, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39ACE0);
  }
  return result;
}

uint64_t sub_1BA819928()
{
  return 0x72745F70756F7267;
}

void sub_1BA81994C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA81995C()
{
  JUMPOUT(0x1BCCE5B24);
}

unint64_t sub_1BA81996C()
{
  unint64_t result;

  result = qword_1ED3A4F68;
  if (!qword_1ED3A4F68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896D78, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F68);
  }
  return result;
}

unint64_t sub_1BA8199B0()
{
  unint64_t result;

  result = qword_1ED3A4F60;
  if (!qword_1ED3A4F60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896D50, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F60);
  }
  return result;
}

uint64_t sub_1BA8199F4()
{
  return 0x6F6A5F70756F7267;
}

void sub_1BA819A18()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA819A28()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t destroy for FeedGroupEmitterError(uint64_t a1)
{
  return sub_1BA819A48(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1BA819A48(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 2 <= 2)
    return swift_bridgeObjectRelease();
  return result;
}

id static FeedJournalFormatter.durationFormatter.getter()
{
  return sub_1BA4B72EC(qword_1ED39E4A8, (id *)&qword_1ED39AC20);
}

void sub_1BA819A80()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA819A90()
{
  JUMPOUT(0x1BCCE5B24);
}

ValueMetadata *type metadata accessor for FeedGroupSortOption()
{
  return &type metadata for FeedGroupSortOption;
}

void sub_1BA819AB0()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA819AC0()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t FeedCursorContainer.tracker.getter(unint64_t a1)
{
  sub_1BA819AE4(a1);
  return swift_retain();
}

uint64_t sub_1BA819AE4(unint64_t a1)
{
  uint64_t *v1;

  if ((a1 & 0x8000000000000000) != 0)
  {
    a1 &= ~0x8000000000000000;
    v1 = &qword_1ED476488;
  }
  else
  {
    v1 = (uint64_t *)(*(_QWORD *)a1 + 272);
  }
  return *(_QWORD *)(a1 + *v1);
}

uint64_t _s8NewsFeed18FeedServiceOptionsV8DatabaseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA819B58 + 4 * byte_1BB8A2947[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA819B8C + 4 * byte_1BB8A2942[v4]))();
}

uint64_t sub_1BA819B8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819B94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA819B9CLL);
  return result;
}

uint64_t sub_1BA819BA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA819BB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA819BB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819BBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA819BCC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedServiceOptions.RootCursorFreshness()
{
  return &type metadata for FeedServiceOptions.RootCursorFreshness;
}

void sub_1BA819BFC()
{
  __asm { BR              X11 }
}

uint64_t sub_1BA819C2C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t getEnumTagSinglePayload for FormatCornerRadius.RoundedValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

void sub_1BA819D6C(uint64_t *a1@<X8>)
{
  sub_1BA4D4904(a1);
}

unint64_t sub_1BA819D78()
{
  unint64_t result;

  result = qword_1ED39F438[0];
  if (!qword_1ED39F438[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9159C4, &type metadata for FeedLayoutEntity);
    atomic_store(result, qword_1ED39F438);
  }
  return result;
}

unint64_t sub_1BA819DBC()
{
  unint64_t result;

  result = qword_1ED39F430;
  if (!qword_1ED39F430)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91599C, &type metadata for FeedLayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39F430);
  }
  return result;
}

unint64_t sub_1BA819E00()
{
  unint64_t result;

  result = qword_1ED39AA80;
  if (!qword_1ED39AA80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1BE4, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA80);
  }
  return result;
}

unint64_t sub_1BA819E44()
{
  unint64_t result;

  result = qword_1ED39AA78;
  if (!qword_1ED39AA78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1BBC, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA78);
  }
  return result;
}

unint64_t sub_1BA819E88()
{
  unint64_t result;

  result = qword_1ED39AA50;
  if (!qword_1ED39AA50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89001C, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA50);
  }
  return result;
}

unint64_t sub_1BA819ECC()
{
  unint64_t result;

  result = qword_1ED39AA48;
  if (!qword_1ED39AA48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FFF4, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA48);
  }
  return result;
}

NewsFeed::FeedDaysOfWeek_optional sub_1BA819F10(Swift::String *a1)
{
  return FeedDaysOfWeek.init(rawValue:)(*a1);
}

unint64_t sub_1BA819F1C()
{
  unint64_t result;

  result = qword_1ED3A4950;
  if (!qword_1ED3A4950)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897CE4, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4950);
  }
  return result;
}

unint64_t sub_1BA819F60()
{
  unint64_t result;

  result = qword_1ED3A4948;
  if (!qword_1ED3A4948)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897CBC, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4948);
  }
  return result;
}

uint64_t AnyFeedManager.loadingGate.getter()
{
  sub_1BA819FBC();
  return swift_retain();
}

uint64_t sub_1BA819FBC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1BA819FC4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

void sub_1BA819FD0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = ((v10
        + *(unsigned __int8 *)(v7 + 80)
        + ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v10;
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_15;
      goto LABEL_22;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_15:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_22:
      __asm { BR              X11 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_15;
  goto LABEL_22;
}

void sub_1BA81A190()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BA81A198()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1BA81A1BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = ((v7
         + *(unsigned __int8 *)(v4 + 80)
         + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + v7;
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_8;
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v9);
        if (!*(_BYTE *)(a1 + v9))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v9 > 3)
          v13 = 0;
        if ((_DWORD)v9)
        {
          if (v9 > 3)
            LODWORD(v9) = 4;
          __asm { BR              X12 }
        }
        return v6 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (*(_WORD *)(a1 + v9))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_1BA81A30C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00006D75696465;
  v4 = 0xEB00000000676E6FLL;
  v5 = 0x4C6F6741656D6974;
  if (v2 != 1)
  {
    v5 = 0x6D6F74737563;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x4D6F6741656D6974;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t static Commands.Sharing.shareComplete.getter()
{
  return sub_1BA499934(&qword_1ED3BC1E8);
}

uint64_t static Commands.Saving.save.getter()
{
  return sub_1BA499934(&qword_1ED3BA8C8);
}

uint64_t sub_1BA81A3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA81A480(0, (unint64_t *)&unk_1ED3BBF80, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA81A480(0, (unint64_t *)&unk_1ED3BBFE8, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3BC070 = result;
  return result;
}

void sub_1BA81A480(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for OpenChannelCommandContext);
    if (!v5)
      atomic_store(v4, a2);
  }
}

__n128 __swift_memcpy177_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

__n128 __swift_memcpy161_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t objectdestroy_10Tm_0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) >= 3uLL)
    swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_11Tm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_1()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t objectdestroy_16Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm_0()
{
  swift_unownedRelease();
  swift_release();
  return swift_deallocObject();
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

char *keypath_get_selector_tagID()
{
  return sel_tagID;
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t objectdestroy_85Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 88) & ~v3;
  v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BA81AC98(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void sub_1BA81ACEC(void *a1)
{
  uint64_t v1;

  sub_1BA81ACF4(a1, v1);
}

void sub_1BA81ACF4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1BCCE5D40](v3);
  if (v4)
  {
    v5 = (void *)v4;
    swift_retain();
    sub_1BB86E878();
    swift_release();
    if (a1)
    {
      if (v10)
      {
        objc_msgSend(a1, sel_distanceFromLocation_, v10);
        if (v6 <= 0.0)
        {

LABEL_8:
          v5 = v10;
          goto LABEL_9;
        }
      }
    }
    else if (!v10)
    {
LABEL_9:

      return;
    }
    v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = a1;
    swift_retain();
    sub_1BB86ED4C();

    swift_release();
    swift_release();
    goto LABEL_8;
  }
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for WebEmbedDataVisualizationDataRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 24);
  v5 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_15Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(unint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for DebugFormatUploadPrivateEntry(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  v3 = v0 + v2 + *(int *)(v1 + 20);
  type metadata accessor for FormatFile();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      v4 = type metadata accessor for FormatContent(0);
      v5 = v3 + *(int *)(v4 + 20);
      v6 = sub_1BB86C8B0();
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v3 + *(int *)(v4 + 40);
      v8 = sub_1BB871E24();
      v9 = *(_QWORD *)(v8 - 8);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
      goto LABEL_31;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(unsigned __int8 *)(v3 + 106) != 255)
      {
        v10 = *(unsigned __int16 *)(v3 + 104) | (*(unsigned __int8 *)(v3 + 106) << 16);
        sub_1BA77A170(*(_QWORD *)(v3 + 96), v10, SBYTE2(v10), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v3 + 72) >= 3uLL)
        swift_bridgeObjectRelease();
      goto LABEL_31;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v3 + 56) >= 0xFuLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v3 + 168) >= 3uLL)
        swift_bridgeObjectRelease();
      v28 = (int *)type metadata accessor for FormatPackage();
      v11 = v3 + v28[23];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = type metadata accessor for FormatCompilerOptions(0);
      v13 = v11 + *(int *)(v12 + 24);
      if (*(_QWORD *)(v13 + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v14 = v13 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      v15 = sub_1BB86E710();
      v29 = *(_QWORD *)(v15 - 8);
      v30 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v29 + 48);
      if (!v30(v14, 1, v15))
        (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v14, v15);
      v16 = v11 + *(int *)(v12 + 28);
      if (!v30(v16, 1, v15))
        (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v16, v15);
      swift_bridgeObjectRelease();
      v17 = v3 + v28[24];
      v18 = sub_1BB86EB84();
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
      v19 = v3 + v28[25];
      if (!v30(v19, 1, v15))
        (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v19, v15);
      break;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 7u:
      swift_release();
      break;
    case 8u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 9u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 0xAu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA6C0C20(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_BYTE *)(v3 + 80));
      break;
    case 0xBu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v3 + *(int *)(type metadata accessor for FormatBindingContent() + 28);
      swift_bridgeObjectRelease();
      v21 = type metadata accessor for FormatContent(0);
      v22 = v20 + *(int *)(v21 + 20);
      v23 = sub_1BB86C8B0();
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v20 + *(int *)(v21 + 40);
      v25 = sub_1BB871E24();
      v26 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v24, v25);
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  sub_1BA5F1DE8(*(_QWORD *)(v0 + v2 + *(int *)(v1 + 24)), *(_QWORD *)(v0 + v2 + *(int *)(v1 + 24) + 8), *(_BYTE *)(v0 + v2 + *(int *)(v1 + 24) + 16));
  return swift_deallocObject();
}

uint64_t objectdestroy_15Tm_1()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6C1F54(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm_1()
{
  uint64_t v0;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

void *__swift_memcpy528_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x210uLL);
}

uint64_t objectdestroy_36Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t objectdestroy_36Tm_0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for FormatMicaData();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + ((v2 + 52) & ~v2) + *(int *)(v1 + 20);
  v4 = sub_1BB86FBD4();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject();
}

uint64_t objectdestroy_12Tm_0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_12Tm_1()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v1 = *(_QWORD *)(type metadata accessor for PuzzleResourceSource() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  v4 = v0 + v2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      sub_1BA976B30();
      v7 = v6;
      v8 = v4 + *(int *)(v6 + 48);
      v9 = sub_1BB86C67C();
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v11(v8, v9);
      v12 = v4 + *(int *)(v7 + 64);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
        v11(v12, v9);
      break;
    case 1:
      swift_unknownObjectRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
  if (*(_QWORD *)(v0 + v3 + 8) != 1)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_88Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1BA81BA70()
{
  unint64_t result;

  result = qword_1ED3D4480;
  if (!qword_1ED3D4480)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3D4480);
  }
  return result;
}

uint64_t sub_1BA81BAC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED3B9D50, type metadata accessor for FeedHeadline);
}

void sub_1BA81BAD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A0A50)
  {
    sub_1BA4CDF6C(255, (unint64_t *)&qword_1ED3A04E0, (uint64_t (*)(void))sub_1BA8281A8, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A0A50);
  }
}

void sub_1BA81BB4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AB928)
  {
    sub_1BA4CDF6C(255, (unint64_t *)&qword_1ED3A8420, (uint64_t (*)(void))sub_1BA82759C, (uint64_t)&type metadata for FormatGroupNodeMaskStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AB928);
  }
}

void sub_1BA81BBC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CFC00)
  {
    sub_1BA4CDF6C(255, (unint64_t *)&qword_1ED3CC678, (uint64_t (*)(void))sub_1BA822F14, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CFC00);
  }
}

void sub_1BA81BC34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CFB78)
  {
    sub_1BA4D9CE8(255, (unint64_t *)&qword_1ED3C69C0);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CFB78);
  }
}

void sub_1BA81BC98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39C1A8)
  {
    sub_1BA4D9CE8(255, &qword_1ED39A690);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39C1A8);
  }
}

void sub_1BA81BCFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3D5148)
  {
    sub_1BA841C20();
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3D5148);
  }
}

void sub_1BA81BD50(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED39C1A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3490], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1BA81BD6C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1BA842038(255, a3);
    v4 = sub_1BB874218();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1BA81BDC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3AB660;
  if (!qword_1ED3AB660)
  {
    sub_1BA4CDF6C(255, &qword_1ED3A09B0, (uint64_t (*)(void))sub_1BA4C783C, (uint64_t)&type metadata for FormatCountLimit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3AB660);
  }
  return result;
}

void sub_1BA81BE28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA531020();
    v7 = a3(a1, &type metadata for FormatMenu.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BA81BE84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9B90)
  {
    sub_1BA49A224(255, (unint64_t *)&unk_1ED3B9980);
    v0 = sub_1BB873F78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9B90);
  }
}

void sub_1BA81BEF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9B80)
  {
    sub_1BA4B07F0(255, &qword_1ED3B94C8, (uint64_t (*)(uint64_t))type metadata accessor for FormatTimerObserver, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BB873F78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9B80);
  }
}

void sub_1BA81BF74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A0940)
  {
    type metadata accessor for FormatAnimationData();
    v0 = sub_1BB873F78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A0940);
  }
}

void sub_1BA81BFD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3040)
  {
    v0 = sub_1BB873F78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3040);
  }
}

uint64_t sub_1BA81C03C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1BA6E3434(a1, a2, a3, a4, (void (*)(_QWORD))sub_1BA81BF74);
}

uint64_t sub_1BA81C048(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1BA498758(a3, a4[7] + 16 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_1BA81C0AC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BB873BD0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1BB8745CC();
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        v9 = sub_1BB874608();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1BA81C284(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1BA81C37C(0, v1, 0);
    v2 = v14;
    v4 = (uint64_t *)(a1 + 40);
    v5 = MEMORY[0x1E0DB2EC8];
    do
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      v14 = v2;
      v9 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
      {
        sub_1BA81C37C(v8 > 1, v9 + 1, 1);
        v2 = v14;
      }
      v4 += 2;
      v12 = MEMORY[0x1E0DEA968];
      v13 = v5;
      *(_QWORD *)&v11 = v7;
      *((_QWORD *)&v11 + 1) = v6;
      *(_QWORD *)(v2 + 16) = v9 + 1;
      sub_1BA4CECCC(&v11, v2 + 40 * v9 + 32);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BA81C37C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BA6EFF54(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))sub_1BA81BC98, &qword_1ED39A690);
  *v3 = result;
  return result;
}

uint64_t sub_1BA81C3B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BAC7B9B8(a1, a2, a3, (_QWORD *)*v3, sub_1BA81BD50, (uint64_t (*)(_QWORD))MEMORY[0x1E0DB3490]);
  *v3 = result;
  return result;
}

void sub_1BA81C3DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CFA68)
  {
    sub_1BA81D804(255, &qword_1ED3CF868, (void (*)(uint64_t))type metadata accessor for LiveActivityWebEmbedDatastoreManagerObserverProxy);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_1BB873D74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CFA68);
  }
}

void sub_1BA81C450()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CFA60)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_1BB873D74();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CFA60);
  }
}

_QWORD *sub_1BA81C4AC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BB38E480(a1, a2, a3, a4, &qword_1ED3CFC58, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector);
}

_QWORD *sub_1BA81C4C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BA81BAD8();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BA81C6FC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BA81C5C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BA81BBC0();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BA81C948(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1BA81C6E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1BA78B0D8(a1, a2, a3, a4, (unint64_t *)&unk_1ED3AB890, (uint64_t)&type metadata for FormatTagBinding.Asset);
}

uint64_t sub_1BA81C6FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3A04E0, (uint64_t (*)(void))sub_1BA8281A8, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA81C820(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 192 * a1 + 32;
    v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3A8420, (uint64_t (*)(void))sub_1BA82759C, (uint64_t)&type metadata for FormatGroupNodeMaskStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA81C948(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3CC678, (uint64_t (*)(void))sub_1BA822F14, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatNodeStyleSelectorOrder);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA81CA70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA81CB60(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 + 16);
  v39 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v36 = v9 + 6;
                while (v14 != v36)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return sub_1BA6EBA94(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_1BB8745CC();
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        v22 = sub_1BB874608();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v40 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (sub_1BB874398() & 1) != 0)
          break;
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_1BB874398() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
LABEL_23:
      v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3CFA18, (uint64_t)&unk_1E7272300, MEMORY[0x1E0DEEC78]);
}

void sub_1BA81CE70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C0480)
  {
    sub_1BA81D86C(255, (unint64_t *)&qword_1ED3C0478, &qword_1ED3C0470, 0x1E0D58A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C0480);
  }
}

void sub_1BA81CEE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C0478)
  {
    sub_1BA49A224(255, &qword_1ED3C0470);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C0478);
  }
}

unint64_t sub_1BA81CF48()
{
  unint64_t result;

  result = qword_1ED3B9950;
  if (!qword_1ED3B9950)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B9950);
  }
  return result;
}

unint64_t sub_1BA81CF84()
{
  unint64_t result;

  result = qword_1ED3B9900;
  if (!qword_1ED3B9900)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B9900);
  }
  return result;
}

void sub_1BA81CFD8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3C0468)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3C0468);
  }
}

uint64_t sub_1BA81D040()
{
  return sub_1BA4A2870(&qword_1ED3D5FF8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1BB87AFFC);
}

unint64_t sub_1BA81D06C()
{
  unint64_t result;

  result = qword_1ED3B98F0;
  if (!qword_1ED3B98F0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B98F0);
  }
  return result;
}

uint64_t FCNewsAppConfigurationManager.fetchConfiguration(cachedOnly:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = v2;
  *(_BYTE *)(v3 + 64) = a1;
  return swift_task_switch();
}

unint64_t sub_1BA81D0DC()
{
  unint64_t result;

  result = qword_1ED3C0448;
  if (!qword_1ED3C0448)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3C0448);
  }
  return result;
}

uint64_t sub_1BA81D118(uint64_t result, uint64_t a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_1BA8EBDF8();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    swift_unknownObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BA81D1A4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B98A0)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B98A0);
  }
}

uint64_t sub_1BA81D20C()
{
  return sub_1BA4A2870((unint64_t *)&unk_1ED3B9888, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87AB34);
}

void type metadata accessor for RenderingMode(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3C0438, (uint64_t)&unk_1E7271CD8, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA81D254()
{
  uint64_t result;

  result = sub_1BB872970();
  qword_1ED476890 = result;
  return result;
}

unint64_t sub_1BA81D288()
{
  unint64_t result;

  result = qword_1ED3B9860;
  if (!qword_1ED3B9860)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B9860);
  }
  return result;
}

unint64_t sub_1BA81D2C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3CF900;
  if (!qword_1ED3CF900)
  {
    v1 = sub_1BA49A224(255, &qword_1ED3CF908);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FCMescalSignature, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3CF900);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1ED3CF8F0, (uint64_t)&unk_1E72723B0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3CF8E0, (uint64_t)&unk_1E7272400, MEMORY[0x1E0DEEC78]);
}

unint64_t sub_1BA81D354()
{
  unint64_t result;

  result = qword_1ED3B97D0;
  if (!qword_1ED3B97D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B97D0);
  }
  return result;
}

unint64_t sub_1BA81D390()
{
  unint64_t result;

  result = qword_1ED3B97C0;
  if (!qword_1ED3B97C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B97C0);
  }
  return result;
}

void sub_1BA81D3CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CF8B8)
  {
    sub_1BA49A224(255, &qword_1ED3CF8B0);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CF8B8);
  }
}

uint64_t sub_1BA81D430(uint64_t (*a1)(uint64_t), uint64_t (*a2)(void))
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!(*v2 >> 62))
  {
    if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1BB873F30();
  swift_bridgeObjectRelease();
  if (!v7)
    return 0;
LABEL_3:
  result = sub_1BA79947C(a1);
  if (!result)
  {
    if (*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1BB873F30();
      swift_bridgeObjectRelease();
      result = v8 - 1;
      if (!__OFSUB__(v8, 1))
        return a2();
    }
    else
    {
      v6 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = v6 - 1;
      if (!__OFSUB__(v6, 1))
        return a2();
    }
    __break(1u);
  }
  return result;
}

void sub_1BA81D50C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B0400)
  {
    sub_1BA505288(255, (unint64_t *)&qword_1ED3B2E30);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B0400);
  }
}

void sub_1BA81D584()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B9700)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B9700);
  }
}

uint64_t sub_1BA81D5E8(uint64_t a1)
{
  return sub_1BA61BEC4(a1, (void (*)(void))sub_1BA832824, (uint64_t)&type metadata for FormatOptionType, (void (*)(char *, _QWORD))sub_1BA61C594);
}

void sub_1BA81D604()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CF898)
  {
    type metadata accessor for WebEmbedDatastoreCacheKey();
    sub_1BA4A2870(&qword_1ED3CB660, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey, (uint64_t)&unk_1BB915F8C);
    v0 = sub_1BB87309C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CF898);
  }
}

uint64_t sub_1BA81D67C()
{
  uint64_t result;

  result = sub_1BA81D5E8((uint64_t)&unk_1E724D420);
  qword_1ED3B9688 = result;
  return result;
}

uint64_t sub_1BA81D6A0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BA4AD288(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = a4;
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2EF8], v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BA81D6FC(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3C1DE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BA81D718()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AB158)
  {
    sub_1BA4EFE00(255, (unint64_t *)&qword_1ED39C030);
    sub_1BA4D9CE8(255, (unint64_t *)&qword_1ED3BA030);
    v0 = sub_1BB872F4C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AB158);
  }
}

unint64_t sub_1BA81D7A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B9660;
  if (!qword_1ED3B9660)
  {
    sub_1BA4B07F0(255, (unint64_t *)&unk_1ED3B9650, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B9660);
  }
  return result;
}

void sub_1BA81D804(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BB872EE0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BA81D850(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3B9650, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA81D86C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1BA49A224(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_1BA81D8CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3AAFB0;
  if (!qword_1ED3AAFB0)
  {
    sub_1BA4AD288(255, &qword_1ED3AAFA8, (uint64_t)&type metadata for FormatProgressViewNodeStyle.Selector, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BA823BA4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3AAFB0);
  }
  return result;
}

unint64_t sub_1BA81D944()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3AAF60;
  if (!qword_1ED3AAF60)
  {
    sub_1BA4AD288(255, &qword_1ED3AAF58, (uint64_t)&type metadata for FormatVideoPlayerNodeStyle.Selector, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BA824A64();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3AAF60);
  }
  return result;
}

unint64_t sub_1BA81D9BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3AAEF8;
  if (!qword_1ED3AAEF8)
  {
    sub_1BA4AD288(255, &qword_1ED3AAEF0, (uint64_t)&type metadata for FormatWebEmbedNodeStyle.Selector, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BA8288B8();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3AAEF8);
  }
  return result;
}

void sub_1BA81DA34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B03C0)
  {
    sub_1BA829AA0();
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B03C0);
  }
}

void sub_1BA81DA88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for LayeredMediaLayer);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BA81DAD0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3C0340)
  {
    sub_1BA81DB7C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3C0340);
  }
}

uint64_t sub_1BA81DB34(uint64_t a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(void (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2;
  swift_bridgeObjectRetain();
  v3(&v5);
  return swift_bridgeObjectRelease();
}

void sub_1BA81DB7C(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3C0330, (uint64_t (*)(uint64_t))type metadata accessor for SharedItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA81DB98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9390)
  {
    sub_1BA7C2A4C();
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9390);
  }
}

unint64_t sub_1BA81DBEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3B9348;
  if (!qword_1ED3B9348)
  {
    sub_1BA4AD288(255, &qword_1ED3B9340, (uint64_t)&type metadata for FormatStateViewNodeState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BA83EF24();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3B9348);
  }
  return result;
}

unint64_t sub_1BA81DC64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED39D960;
  if (!qword_1ED39D960)
  {
    sub_1BA81DCAC();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1ED39D960);
  }
  return result;
}

void sub_1BA81DCAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39D958)
  {
    sub_1BA4D787C(255, (unint64_t *)&qword_1ED3B0900, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39D958);
  }
}

unint64_t sub_1BA81DD10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B9250;
  if (!qword_1ED3B9250)
  {
    sub_1BA4B07F0(255, &qword_1ED3B9248, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4198], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B9250);
  }
  return result;
}

void sub_1BA81DD70(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED39BDB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3490], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA81DD8C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  sub_1BB67CD70(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1BA81DDA8(uint64_t a1)
{
  return sub_1BA6ECBC8(a1, (void (*)(_QWORD))sub_1BA81BC34, (unint64_t *)&qword_1ED3C69C0);
}

unint64_t sub_1BA81DDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  sub_1BA6D4F28(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for SharedItem();
  v8 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v35 = (uint64_t)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v33 = (uint64_t)v32 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  v32[1] = a1;
  v32[2] = v2;
  v13 = a1 + 32;
  v34 = (uint64_t *)(a2 + OBJC_IVAR____TtC8NewsFeed17SharedItemManager_itemsByArticleID);
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9B8] + 8;
  v16 = v39;
  do
  {
    sub_1BA747A10(v13, (uint64_t)v38);
    if (!swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, 1, 1, v16);
LABEL_4:
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA6D4F28);
      goto LABEL_5;
    }
    v17 = v14;
    v18 = v15;
    v20 = v36;
    v19 = v37;
    v21 = v34;
    swift_beginAccess();
    v22 = *v21;
    if (*(_QWORD *)(v22 + 16))
    {
      swift_bridgeObjectRetain();
      v23 = sub_1BA6E35A8(v20, v19);
      if ((v24 & 1) != 0)
      {
        sub_1BAF52AB4(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v8 + 72) * v23, (uint64_t)v7);
        v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v26 = v7;
        v27 = 0;
      }
      else
      {
        v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v26 = v7;
        v27 = 1;
      }
      v16 = v39;
      v25(v26, v27, 1, v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, 1, 1, v39);
    }
    v15 = v18;
    swift_endAccess();
    swift_bridgeObjectRelease();
    v14 = v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v16) == 1)
      goto LABEL_4;
    v28 = v33;
    sub_1BAF52BCC((uint64_t)v7, v33);
    sub_1BAF52BCC(v28, v35);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = sub_1BB392078(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v30 = *(_QWORD *)(v14 + 16);
    v29 = *(_QWORD *)(v14 + 24);
    if (v30 >= v29 >> 1)
      v14 = sub_1BB392078(v29 > 1, v30 + 1, 1, v14);
    *(_QWORD *)(v14 + 16) = v30 + 1;
    sub_1BAF52BCC(v35, v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v30);
    v16 = v39;
LABEL_5:
    v13 += 32;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

void sub_1BA81E0F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B9220)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B9220);
  }
}

void sub_1BA81E160()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3BBA68)
  {
    sub_1BA81CEE4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3BBA68);
  }
}

void sub_1BA81E1C4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3C02D8)
  {
    sub_1BA4B07F0(255, (unint64_t *)&qword_1ED3C0480, (uint64_t (*)(uint64_t))sub_1BA81CEE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3C02D8);
  }
}

void sub_1BA81E240()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B9210)
  {
    sub_1BA4D9CE8(255, qword_1ED3B0960);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B9210);
  }
}

unint64_t sub_1BA81E2B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED39BDA8;
  if (!qword_1ED39BDA8)
  {
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DB2EC0];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB2EF8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED39BDA8);
  }
  return result;
}

unint64_t sub_1BA81E324()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED3B9208;
  if (!qword_1ED3B9208)
  {
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DB64C8];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB6570], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED3B9208);
  }
  return result;
}

uint64_t static String.feedAds.getter()
{
  return 0x7364612D64656566;
}

uint64_t sub_1BA81E3AC(uint64_t *a1)
{
  return sub_1BA67FABC(a1, sub_1BA6809AC, sub_1BA680B3C);
}

void sub_1BA81E3D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CF670)
  {
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CF670);
  }
}

void sub_1BA81E434()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CF660)
  {
    type metadata accessor for FormatCompilerProperty(255);
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CF660);
  }
}

void sub_1BA81E498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B91B8)
  {
    sub_1BA670B14();
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B91B8);
  }
}

unint64_t sub_1BA81E4FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED3A2E18;
  if (!qword_1ED3A2E18)
  {
    sub_1BA5D2AE8();
    v2 = v1;
    v3 = sub_1BA629A0C(&qword_1ED3B0528, MEMORY[0x1E0CB08C0]);
    v4[0] = MEMORY[0x1E0DEA9A0];
    v4[1] = v3;
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED3A2E18);
  }
  return result;
}

void sub_1BA81E574()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CF648)
  {
    sub_1BA834FF0();
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CF648);
  }
}

uint64_t sub_1BA81E5D4(uint64_t a1, uint64_t a2)
{
  return sub_1BA4A7578(a1, a2, (void (*)(unint64_t, uint64_t))sub_1BA81C280, (void (*)(void))sub_1BA7F2580);
}

unint64_t sub_1BA81E5E8(uint64_t a1)
{
  return sub_1BA79E1C4(a1, (void (*)(_QWORD))sub_1BA7904E4, (uint64_t (*)(uint64_t, uint64_t))sub_1BA6E35A8);
}

uint64_t sub_1BA81E5FC(uint64_t a1)
{
  return sub_1BA517790(a1, 0x6C6169636F53, 0xE600000000000000, &qword_1ED476990);
}

void sub_1BA81E618()
{
  unint64_t v0;

  sub_1BA4A968C();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t sub_1BA81E6B4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatAbsoluteURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1BA81E72C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for EmptyView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA81E768()
{
  return sub_1BA81E72C(&qword_1ED3B9018, (uint64_t)&protocol conformance descriptor for EmptyView);
}

uint64_t sub_1BA81E7AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA81E7C0(uint64_t a1)
{
  return sub_1BA517790(a1, 0x646565467377654ELL, 0xE800000000000000, &qword_1ED476860);
}

uint64_t sub_1BA81E7E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for GapView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA81E81C()
{
  return sub_1BA81E7E0(&qword_1ED3B8FF0, (uint64_t)&protocol conformance descriptor for GapView);
}

uint64_t sub_1BA81E840(uint64_t a1)
{
  return sub_1BA517790(a1, 7562305, 0xE300000000000000, &qword_1ED476858);
}

uint64_t sub_1BA81E858()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1BB86EB84();
  __swift_allocate_value_buffer(v0, qword_1ED3B8FC8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED3B8FC8);
  return sub_1BA4CFE74(v1);
}

unint64_t sub_1BA81E8A0()
{
  unint64_t result;

  result = qword_1ED3B8FB8;
  if (!qword_1ED3B8FB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910994, &type metadata for A6_V4);
    atomic_store(result, (unint64_t *)&qword_1ED3B8FB8);
  }
  return result;
}

unint64_t sub_1BA81E8E4()
{
  unint64_t result;

  result = qword_1ED3B8FB0;
  if (!qword_1ED3B8FB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9109BC, &type metadata for A6_V4);
    atomic_store(result, (unint64_t *)&qword_1ED3B8FB0);
  }
  return result;
}

unint64_t sub_1BA81E928(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA81E8A0();
  result = sub_1BA81E8E4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V4.Layout()
{
  return &type metadata for A6_V4.Layout;
}

double sub_1BA81E964@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1BA49D16C(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

unint64_t sub_1BA81E9A8()
{
  unint64_t result;

  result = qword_1ED39DF38;
  if (!qword_1ED39DF38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910AE8, &type metadata for A6_V4.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DF38);
  }
  return result;
}

unint64_t sub_1BA81E9EC()
{
  unint64_t result;

  result = qword_1ED39DF30;
  if (!qword_1ED39DF30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910AC0, &type metadata for A6_V4.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DF30);
  }
  return result;
}

unint64_t sub_1BA81EA30()
{
  unint64_t result;

  result = qword_1ED39DF20;
  if (!qword_1ED39DF20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910B10, &type metadata for A6_V4.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DF20);
  }
  return result;
}

unint64_t sub_1BA81EA74()
{
  unint64_t result;

  result = qword_1ED39DF18;
  if (!qword_1ED39DF18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910A98, &type metadata for A6_V4.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DF18);
  }
  return result;
}

unint64_t sub_1BA81EAD0()
{
  unint64_t result;

  result = qword_1ED39DF10;
  if (!qword_1ED39DF10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910BB4, &type metadata for A6_V4.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39DF10);
  }
  return result;
}

unint64_t sub_1BA81EB14()
{
  unint64_t result;

  result = qword_1ED39DF08;
  if (!qword_1ED39DF08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910BDC, &type metadata for A6_V4.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39DF08);
  }
  return result;
}

unint64_t sub_1BA81EB58()
{
  unint64_t result;

  result = qword_1ED39DF00;
  if (!qword_1ED39DF00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB910C6C, &type metadata for A6_V4.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39DF00);
  }
  return result;
}

uint64_t sub_1BA81EB9C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA81EC28(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B8F08, (uint64_t (*)(uint64_t))type metadata accessor for A6_V4.Bound, (uint64_t)&unk_1BB910A20);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA81EC68(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA4F49A8(a1, *(int **)(v1 + 16));
}

uint64_t sub_1BA81EC70(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA4A2394(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1BA81EC78()
{
  unint64_t result;

  result = qword_1ED3B8EF8;
  if (!qword_1ED3B8EF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953DBC, &type metadata for A6_V3);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EF8);
  }
  return result;
}

unint64_t sub_1BA81ECBC()
{
  unint64_t result;

  result = qword_1ED3B8EF0;
  if (!qword_1ED3B8EF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953DE4, &type metadata for A6_V3);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EF0);
  }
  return result;
}

unint64_t sub_1BA81ED00(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA81EC78();
  result = sub_1BA81ECBC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V3.Layout()
{
  return &type metadata for A6_V3.Layout;
}

unint64_t sub_1BA81ED3C()
{
  unint64_t result;

  result = qword_1ED3B8EE0;
  if (!qword_1ED3B8EE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953F10, &type metadata for A6_V3.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EE0);
  }
  return result;
}

unint64_t sub_1BA81ED80()
{
  unint64_t result;

  result = qword_1ED3B8ED8;
  if (!qword_1ED3B8ED8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953EE8, &type metadata for A6_V3.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B8ED8);
  }
  return result;
}

unint64_t sub_1BA81EDC4()
{
  unint64_t result;

  result = qword_1ED3B8EC8;
  if (!qword_1ED3B8EC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953F38, &type metadata for A6_V3.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EC8);
  }
  return result;
}

unint64_t sub_1BA81EE08()
{
  unint64_t result;

  result = qword_1ED3B8EC0;
  if (!qword_1ED3B8EC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953EC0, &type metadata for A6_V3.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EC0);
  }
  return result;
}

unint64_t sub_1BA81EE64()
{
  unint64_t result;

  result = qword_1ED3B8EB8;
  if (!qword_1ED3B8EB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB953FDC, &type metadata for A6_V3.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EB8);
  }
  return result;
}

unint64_t sub_1BA81EEA8()
{
  unint64_t result;

  result = qword_1ED3B8EB0;
  if (!qword_1ED3B8EB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB954004, &type metadata for A6_V3.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B8EB0);
  }
  return result;
}

uint64_t sub_1BA81EEEC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA81EF78(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B8E00, (uint64_t (*)(uint64_t))type metadata accessor for A6_V3.Bound, (uint64_t)&unk_1BB953E48);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA81EFB4()
{
  unint64_t result;

  result = qword_1ED3B8DF0;
  if (!qword_1ED3B8DF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E43CC, &type metadata for A6_V2);
    atomic_store(result, (unint64_t *)&qword_1ED3B8DF0);
  }
  return result;
}

unint64_t sub_1BA81EFF8()
{
  unint64_t result;

  result = qword_1ED3B8DE8;
  if (!qword_1ED3B8DE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E43F4, &type metadata for A6_V2);
    atomic_store(result, (unint64_t *)&qword_1ED3B8DE8);
  }
  return result;
}

unint64_t sub_1BA81F03C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA81EFB4();
  result = sub_1BA81EFF8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA81F068()
{
  unint64_t result;

  result = qword_1ED3B8DD8;
  if (!qword_1ED3B8DD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89A914, &type metadata for A6_V1);
    atomic_store(result, (unint64_t *)&qword_1ED3B8DD8);
  }
  return result;
}

unint64_t sub_1BA81F0AC()
{
  unint64_t result;

  result = qword_1ED3B8DD0;
  if (!qword_1ED3B8DD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89A93C, &type metadata for A6_V1);
    atomic_store(result, (unint64_t *)&qword_1ED3B8DD0);
  }
  return result;
}

unint64_t sub_1BA81F0F0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA81F068();
  result = sub_1BA81F0AC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for A6_V1.Layout()
{
  return &type metadata for A6_V1.Layout;
}

unint64_t sub_1BA81F12C()
{
  unint64_t result;

  result = qword_1ED39DEF0;
  if (!qword_1ED39DEF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AA68, &type metadata for A6_V1.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DEF0);
  }
  return result;
}

unint64_t sub_1BA81F170()
{
  unint64_t result;

  result = qword_1ED39DEE8;
  if (!qword_1ED39DEE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AA40, &type metadata for A6_V1.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DEE8);
  }
  return result;
}

unint64_t sub_1BA81F1B4()
{
  unint64_t result;

  result = qword_1ED39DED8;
  if (!qword_1ED39DED8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AA90, &type metadata for A6_V1.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DED8);
  }
  return result;
}

unint64_t sub_1BA81F1F8()
{
  unint64_t result;

  result = qword_1ED39DED0;
  if (!qword_1ED39DED0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AA18, &type metadata for A6_V1.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39DED0);
  }
  return result;
}

unint64_t sub_1BA81F254()
{
  unint64_t result;

  result = qword_1ED39DEC8;
  if (!qword_1ED39DEC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AB34, &type metadata for A6_V1.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39DEC8);
  }
  return result;
}

unint64_t sub_1BA81F298()
{
  unint64_t result;

  result = qword_1ED39DEC0;
  if (!qword_1ED39DEC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89AB5C, &type metadata for A6_V1.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39DEC0);
  }
  return result;
}

uint64_t sub_1BA81F2DC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA81F368(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B8D28, (uint64_t (*)(uint64_t))type metadata accessor for A6_V1.Bound, (uint64_t)&unk_1BB89A9A0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LiveActivityWebEmbedDatastoreManagerObserverProxy()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FeedItemHiddenReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedItemHiddenReason(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t sub_1BA81F474@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatSupplementaryNodePinDistanceAdjustmentValue.init(from:)(a1, a2);
}

unint64_t sub_1BA81F488()
{
  unint64_t result;

  result = qword_1ED3A0760;
  if (!qword_1ED3A0760)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementaryNodePinDistanceAdjustmentValue, &type metadata for FormatSupplementaryNodePinDistanceAdjustmentValue);
    atomic_store(result, (unint64_t *)&qword_1ED3A0760);
  }
  return result;
}

uint64_t FormatSupplementaryNodePinDistanceAdjustmentValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA4DFF1C(a1, (void (*)(uint64_t))sub_1BA81F588, (uint64_t)&_s10CodingTypeON_14, (uint64_t)&unk_1E726EBE0, a2);
}

uint64_t sub_1BA81F4F8()
{
  sub_1BA81F5CC();
  return sub_1BB872D60();
}

uint64_t sub_1BA81F554@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA609110();
  *a1 = result;
  return result;
}

unint64_t sub_1BA81F588()
{
  unint64_t result;

  result = qword_1ED3AAB08;
  if (!qword_1ED3AAB08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C5C78, &_s10CodingTypeON_14);
    atomic_store(result, (unint64_t *)&qword_1ED3AAB08);
  }
  return result;
}

unint64_t sub_1BA81F5CC()
{
  unint64_t result;

  result = qword_1ED3AAB00;
  if (!qword_1ED3AAB00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1268, &_s10CodingTypeON_14);
    atomic_store(result, (unint64_t *)&qword_1ED3AAB00);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinDistanceAdjustment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinDistanceAdjustment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA81F69C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinDistanceAdjustment.init(from:)(a1, a2);
}

unint64_t sub_1BA81F6B0()
{
  unint64_t result;

  result = qword_1ED3A0750;
  if (!qword_1ED3A0750)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementaryNodePinDistanceAdjustment, &type metadata for FormatSupplementaryNodePinDistanceAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3A0750);
  }
  return result;
}

void sub_1BA81F6F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

double sub_1BA81F730()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v6;

  if (v1)
  {
    if (v1 != 1)
    {
      sub_1BB86DD80();
      v4 = sub_1BA72BED4(v6, v1);
      swift_release();
      if (v0)
        return v2;
      return v4 + v2;
    }
    sub_1BB86D648();
  }
  else
  {
    sub_1BB86D654();
  }
  v4 = v3;
  return v4 + v2;
}

uint64_t sub_1BA81F900()
{
  sub_1BA81F9D4();
  return sub_1BB872D60();
}

uint64_t sub_1BA81F95C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA5FB614();
  *a1 = result;
  return result;
}

unint64_t sub_1BA81F990()
{
  unint64_t result;

  result = qword_1ED3AA9D0;
  if (!qword_1ED3AA9D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C5CA0, &_s10CodingTypeON_15);
    atomic_store(result, (unint64_t *)&qword_1ED3AA9D0);
  }
  return result;
}

unint64_t sub_1BA81F9D4()
{
  unint64_t result;

  result = qword_1ED3AA9C8;
  if (!qword_1ED3AA9C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C11A0, &_s10CodingTypeON_15);
    atomic_store(result, (unint64_t *)&qword_1ED3AA9C8);
  }
  return result;
}

uint64_t sub_1BA81FA18()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PuzzleLeaderboardEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3C4378);
}

unint64_t sub_1BA81FAB8()
{
  unint64_t result;

  result = qword_1ED3CF440;
  if (!qword_1ED3CF440)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B45A8, &_s10CodingKeysON_197);
    atomic_store(result, (unint64_t *)&qword_1ED3CF440);
  }
  return result;
}

unint64_t sub_1BA81FAFC()
{
  unint64_t result;

  result = qword_1ED3CF438;
  if (!qword_1ED3CF438)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B45D0, &_s10CodingKeysON_197);
    atomic_store(result, (unint64_t *)&qword_1ED3CF438);
  }
  return result;
}

uint64_t type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory()
{
  return objc_opt_self();
}

double sub_1BA81FB60()
{
  double result;

  qword_1ED3CF328 = 0x4030000000000000;
  qword_1ED3CF330 = 0;
  word_1ED3CF338 = 3072;
  byte_1ED3CF33A = 0;
  qword_1ED3CF340 = MEMORY[0x1E0DEE9E8];
  result = 0.0;
  xmmword_1ED3CF348 = 0u;
  unk_1ED3CF358 = 0u;
  word_1ED3CF368 = 1280;
  return result;
}

uint64_t type metadata accessor for SingletonShareAttributionViewReuseManager()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SharingActivityProviderFactoryWithTracker()
{
  return objc_opt_self();
}

uint64_t SharingActivityProviderFactoryWithTracker.init(tracker:factory:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_1BA4CECCC(a2, v2 + 24);
  return v2;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTemplateKeyUIElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DebugFormatTemplateKeyUIElement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

unint64_t sub_1BA81FCB0()
{
  unint64_t result;

  result = qword_1ED3CF320;
  if (!qword_1ED3CF320)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF320);
  }
  return result;
}

unint64_t sub_1BA81FCF4()
{
  unint64_t result;

  result = qword_1ED3CF310;
  if (!qword_1ED3CF310)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF310);
  }
  return result;
}

unint64_t sub_1BA81FD38()
{
  unint64_t result;

  result = qword_1ED3CF308;
  if (!qword_1ED3CF308)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF308);
  }
  return result;
}

unint64_t sub_1BA81FD7C()
{
  unint64_t result;

  result = qword_1ED3CF300;
  if (!qword_1ED3CF300)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF300);
  }
  return result;
}

unint64_t sub_1BA81FDC0()
{
  unint64_t result;

  result = qword_1ED3CF2F8;
  if (!qword_1ED3CF2F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF2F8);
  }
  return result;
}

unint64_t sub_1BA81FE04()
{
  unint64_t result;

  result = qword_1ED3CF2F0;
  if (!qword_1ED3CF2F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationResponseEmbedType, &type metadata for SportsDataVisualizationResponseEmbedType);
    atomic_store(result, (unint64_t *)&qword_1ED3CF2F0);
  }
  return result;
}

uint64_t type metadata accessor for PuzzleNotificationAutoEnableStartupTask()
{
  uint64_t result;

  result = qword_1ED3CF2C8;
  if (!qword_1ED3CF2C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA81FE84()
{
  return sub_1BA4C4AA8();
}

uint64_t type metadata accessor for FormatGroupNodeMaskDataLayoutAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatGroupNodeMaskDataLayoutAttributes);
}

uint64_t type metadata accessor for FormatFileVersionURIReferenceCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatFileVersionURIReferenceCollection);
}

unint64_t sub_1BA81FEC8()
{
  unint64_t result;

  result = qword_1ED3CEFC8[0];
  if (!qword_1ED3CEFC8[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B67F0, &_s10CodingKeysON_171);
    atomic_store(result, qword_1ED3CEFC8);
  }
  return result;
}

unint64_t sub_1BA81FF0C()
{
  unint64_t result;

  result = qword_1ED3CEFC0;
  if (!qword_1ED3CEFC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6818, &_s10CodingKeysON_171);
    atomic_store(result, (unint64_t *)&qword_1ED3CEFC0);
  }
  return result;
}

unint64_t sub_1BA81FF50()
{
  unint64_t result;

  result = qword_1ED3A16C0;
  if (!qword_1ED3A16C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ManageChannelNotificationsCommandState, &type metadata for ManageChannelNotificationsCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3A16C0);
  }
  return result;
}

uint64_t sub_1BA81FF94()
{
  return sub_1BA49C040(&qword_1ED3B8BB8, (uint64_t)&protocol conformance descriptor for EmptyViewSupplementaryLayoutAttributes);
}

uint64_t sub_1BA81FFB8()
{
  return sub_1BA49C040(&qword_1ED3B8BC0, (uint64_t)&protocol conformance descriptor for EmptyViewSupplementaryLayoutAttributes);
}

uint64_t type metadata accessor for FormatSponsoredBannerLayoutAttributes()
{
  return objc_opt_self();
}

uint64_t sub_1BA81FFFC()
{
  return sub_1BB86D1F8();
}

unint64_t sub_1BA820008()
{
  unint64_t result;

  result = qword_1ED3CEA80;
  if (!qword_1ED3CEA80)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for LiveActivitySubscriptionCommandState, &type metadata for LiveActivitySubscriptionCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3CEA80);
  }
  return result;
}

unint64_t sub_1BA82004C()
{
  unint64_t result;

  result = qword_1ED3AA2A8;
  if (!qword_1ED3AA2A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSlotDefinitionItemSetAuxiliary, &type metadata for FormatSlotDefinitionItemSetAuxiliary);
    atomic_store(result, (unint64_t *)&qword_1ED3AA2A8);
  }
  return result;
}

uint64_t sub_1BA820090()
{
  return MEMORY[0x1E0DEA970];
}

uint64_t sub_1BA82009C()
{
  return MEMORY[0x1E0DEA9A0];
}

unint64_t sub_1BA8200A8()
{
  unint64_t result;

  result = qword_1ED3CEA10;
  if (!qword_1ED3CEA10)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingArticleOverridesStrategy, &type metadata for FormatCodingArticleOverridesStrategy);
    atomic_store(result, (unint64_t *)&qword_1ED3CEA10);
  }
  return result;
}

uint64_t sub_1BA8200EC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PuzzleStatisticValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticDifficultyLevelValue(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4350);
}

uint64_t sub_1BA82016C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FormatFileReference(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatDebuggerCallStackFrameContext(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4340);
}

uint64_t sub_1BA8201F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatContentSubgroupFilterSelector.init(from:)(a1, a2);
}

uint64_t sub_1BA82020C(_QWORD *a1)
{
  return FormatContentSubgroupFilterSelector.encode(to:)(a1);
}

unint64_t sub_1BA820220()
{
  unint64_t result;

  result = qword_1ED3A9FE0;
  if (!qword_1ED3A9FE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilterSelector, &type metadata for FormatContentSubgroupFilterSelector);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FE0);
  }
  return result;
}

unint64_t sub_1BA820264()
{
  unint64_t result;

  result = qword_1ED3A9FD8;
  if (!qword_1ED3A9FD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilterSelector, &type metadata for FormatContentSubgroupFilterSelector);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FD8);
  }
  return result;
}

uint64_t sub_1BA8202A8()
{
  return 0x726F7463656C6573;
}

unint64_t sub_1BA8202C8()
{
  unint64_t result;

  result = qword_1ED3A9FD0;
  if (!qword_1ED3A9FD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB940D00, &type metadata for FormatContentSubgroupFilterSelector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FD0);
  }
  return result;
}

unint64_t sub_1BA82030C()
{
  unint64_t result;

  result = qword_1ED3A9FC8;
  if (!qword_1ED3A9FC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB940D28, &type metadata for FormatContentSubgroupFilterSelector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FC8);
  }
  return result;
}

void sub_1BA820350()
{
  unint64_t v0;

  sub_1BA74E57C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA8203D8()
{
  unint64_t result;

  result = qword_1ED3A9FA0;
  if (!qword_1ED3A9FA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7730, &_s10CodingKeysON_158);
    atomic_store(result, (unint64_t *)&qword_1ED3A9FA0);
  }
  return result;
}

unint64_t sub_1BA82041C()
{
  unint64_t result;

  result = qword_1ED3A9F98;
  if (!qword_1ED3A9F98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7758, &_s10CodingKeysON_158);
    atomic_store(result, (unint64_t *)&qword_1ED3A9F98);
  }
  return result;
}

unint64_t sub_1BA820468()
{
  unint64_t result;

  result = qword_1ED3CE5A8;
  if (!qword_1ED3CE5A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7360, &_s14descr1E72CBC99O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CE5A8);
  }
  return result;
}

unint64_t sub_1BA8204AC()
{
  unint64_t result;

  result = qword_1ED3CE5A0;
  if (!qword_1ED3CE5A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7388, &_s14descr1E72CBC99O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CE5A0);
  }
  return result;
}

uint64_t sub_1BA8204F0(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  return sub_1BA7FDF04(a1, v2 | *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_1BA82051C()
{
  unint64_t result;

  result = qword_1ED3CE590;
  if (!qword_1ED3CE590)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6760, &_s10CodingKeysON_172);
    atomic_store(result, (unint64_t *)&qword_1ED3CE590);
  }
  return result;
}

unint64_t sub_1BA820560()
{
  unint64_t result;

  result = qword_1ED3CE588;
  if (!qword_1ED3CE588)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6788, &_s10CodingKeysON_172);
    atomic_store(result, (unint64_t *)&qword_1ED3CE588);
  }
  return result;
}

uint64_t type metadata accessor for FormatVideoPlayerReuseManagerCache()
{
  return objc_opt_self();
}

uint64_t sub_1BA8205C4()
{
  uint64_t result;

  type metadata accessor for FormatVideoPlayerReuseManagerCache();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  qword_1ED476980 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodePinDistance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinDistance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA820684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinDistance.init(from:)(a1, a2);
}

unint64_t sub_1BA820698()
{
  unint64_t result;

  result = qword_1ED3C0050[0];
  if (!qword_1ED3C0050[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementaryNodePinDistance, &type metadata for FormatSupplementaryNodePinDistance);
    atomic_store(result, qword_1ED3C0050);
  }
  return result;
}

double sub_1BA8206DC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  double v11;
  char v12;
  int v14;
  CGFloat Height;
  double v16;
  uint64_t v18;

  if ((a4 & 0x100) != 0)
  {
    v12 = a4;
    v14 = ~(_BYTE)a4;
    Height = CGRectGetHeight(*(CGRect *)&a5);
    v11 = Height + Height;
    if (v14)
    {
      sub_1BA81F6F4(a1, a2, a3, v12);
      if (!v8)
        return v16;
    }
  }
  else
  {
    sub_1BB86DD80();
    v11 = sub_1BA72BED4(v18, a3);
    swift_release();
  }
  return v11;
}

uint64_t sub_1BA8207AC()
{
  sub_1BA820858();
  return sub_1BB872D60();
}

uint64_t sub_1BA820808@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

unint64_t sub_1BA820814()
{
  unint64_t result;

  result = qword_1ED3A9D08;
  if (!qword_1ED3A9D08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C5CC8, &_s10CodingTypeON_16);
    atomic_store(result, (unint64_t *)&qword_1ED3A9D08);
  }
  return result;
}

unint64_t sub_1BA820858()
{
  unint64_t result;

  result = qword_1ED3A9D00;
  if (!qword_1ED3A9D00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C10D8, &_s10CodingTypeON_16);
    atomic_store(result, (unint64_t *)&qword_1ED3A9D00);
  }
  return result;
}

unint64_t sub_1BA82089C()
{
  unint64_t result;

  result = qword_1ED3CE4C8;
  if (!qword_1ED3CE4C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionsNodeStatementModifier, &type metadata for FormatOptionsNodeStatementModifier);
    atomic_store(result, (unint64_t *)&qword_1ED3CE4C8);
  }
  return result;
}

unint64_t sub_1BA8208E0()
{
  unint64_t result;

  result = qword_1ED3CE4C0;
  if (!qword_1ED3CE4C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionsNodeStatementModifier, &type metadata for FormatOptionsNodeStatementModifier);
    atomic_store(result, (unint64_t *)&qword_1ED3CE4C0);
  }
  return result;
}

uint64_t sub_1BA820924()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedItem(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_1BA8209E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A9BB8)
  {
    sub_1BA505288(255, &qword_1ED3A9BB0);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A9BB8);
  }
}

uint64_t sub_1BA820A48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatTextAdjustmentOtherBaseline.init(from:)(a1, a2);
}

unint64_t sub_1BA820A5C()
{
  unint64_t result;

  result = qword_1ED3B8A40;
  if (!qword_1ED3B8A40)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextAdjustmentOtherBaseline, &type metadata for FormatTextAdjustmentOtherBaseline);
    atomic_store(result, (unint64_t *)&qword_1ED3B8A40);
  }
  return result;
}

unint64_t sub_1BA820AA8()
{
  unint64_t result;

  result = qword_1ED3CE178;
  if (!qword_1ED3CE178)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1FB8, &_s10CodingKeysON_22);
    atomic_store(result, (unint64_t *)&qword_1ED3CE178);
  }
  return result;
}

unint64_t sub_1BA820AEC()
{
  unint64_t result;

  result = qword_1ED3CE170;
  if (!qword_1ED3CE170)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1FE0, &_s10CodingKeysON_22);
    atomic_store(result, (unint64_t *)&qword_1ED3CE170);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatShareAttributionNodeContent(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA820B70 + 4 * byte_1BB8AAD50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA820B90 + 4 * byte_1BB8AAD55[v4]))();
}

_BYTE *sub_1BA820B70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA820B90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA820B98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA820BA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA820BA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA820BB0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA820BBC(_QWORD *a1)
{
  return FormatShareAttributionNodeContent.init(from:)(a1);
}

unint64_t sub_1BA820BD0()
{
  unint64_t result;

  result = qword_1ED3BFF20;
  if (!qword_1ED3BFF20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShareAttributionNodeContent, &type metadata for FormatShareAttributionNodeContent);
    atomic_store(result, (unint64_t *)&qword_1ED3BFF20);
  }
  return result;
}

uint64_t sub_1BA820C14()
{
  sub_1BA820CC0();
  return sub_1BB872D60();
}

uint64_t sub_1BA820C70@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

unint64_t sub_1BA820C7C()
{
  unint64_t result;

  result = qword_1ED3CE160;
  if (!qword_1ED3CE160)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CEAC8, &_s10CodingTypeON_141);
    atomic_store(result, (unint64_t *)&qword_1ED3CE160);
  }
  return result;
}

unint64_t sub_1BA820CC0()
{
  unint64_t result;

  result = qword_1ED3CE158;
  if (!qword_1ED3CE158)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B47B8, &_s10CodingTypeON_141);
    atomic_store(result, (unint64_t *)&qword_1ED3CE158);
  }
  return result;
}

unint64_t sub_1BA820D04()
{
  unint64_t result;

  result = qword_1ED3C0B00;
  if (!qword_1ED3C0B00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingEmptyNewsroomStrategy, &type metadata for FormatCodingEmptyNewsroomStrategy);
    atomic_store(result, (unint64_t *)&qword_1ED3C0B00);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatBindingImageExpressionLogic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA820D94 + 4 * byte_1BB883895[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA820DC8 + 4 * byte_1BB883890[v4]))();
}

uint64_t sub_1BA820DC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA820DD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA820DD8);
  return result;
}

uint64_t sub_1BA820DE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA820DECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA820DF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA820DF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA820E04@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatBindingImageExpressionLogic.init(from:)(a1, a2);
}

unint64_t sub_1BA820E18()
{
  unint64_t result;

  result = qword_1ED3B89A8[0];
  if (!qword_1ED3B89A8[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingImageExpressionLogic, &type metadata for FormatBindingImageExpressionLogic);
    atomic_store(result, qword_1ED3B89A8);
  }
  return result;
}

uint64_t FormatBindingImageExpressionLogic.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BA58F088(a1, (uint64_t)sub_1BA820EF0, (uint64_t)&_s10CodingTypeON_179, (uint64_t)&unk_1E724EF30, a2);
}

uint64_t sub_1BA820E88()
{
  sub_1BA820F34();
  return sub_1BB872D60();
}

uint64_t sub_1BA820EE4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

unint64_t sub_1BA820EF0()
{
  unint64_t result;

  result = qword_1ED3CDF68;
  if (!qword_1ED3CDF68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D1A20, &_s10CodingTypeON_179);
    atomic_store(result, (unint64_t *)&qword_1ED3CDF68);
  }
  return result;
}

unint64_t sub_1BA820F34()
{
  unint64_t result;

  result = qword_1ED3CDF60;
  if (!qword_1ED3CDF60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0780, &_s10CodingTypeON_179);
    atomic_store(result, (unint64_t *)&qword_1ED3CDF60);
  }
  return result;
}

uint64_t type metadata accessor for ActivityItemsConfigurationFactory()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LayeredMediaLayerProviderFactory()
{
  return objc_opt_self();
}

unint64_t sub_1BA820FC0()
{
  unint64_t result;

  result = qword_1ED3CDDF8;
  if (!qword_1ED3CDDF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2998, &_s10CodingKeysON_11);
    atomic_store(result, (unint64_t *)&qword_1ED3CDDF8);
  }
  return result;
}

unint64_t sub_1BA821004()
{
  unint64_t result;

  result = qword_1ED3CDDF0;
  if (!qword_1ED3CDDF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C29C0, &_s10CodingKeysON_11);
    atomic_store(result, (unint64_t *)&qword_1ED3CDDF0);
  }
  return result;
}

uint64_t sub_1BA821048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA4A3F48(a1, a2, a3, (uint64_t)&unk_1BB90B378, (uint64_t (*)(uint64_t))sub_1BA82FA0C);
}

uint64_t type metadata accessor for FormatOsloSheetPurchaseDataModel(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4330);
}

unint64_t sub_1BA821070()
{
  unint64_t result;

  result = qword_1ED3CDDB0;
  if (!qword_1ED3CDDB0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestAdjustment, &type metadata for FormatImageNodeRequestAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3CDDB0);
  }
  return result;
}

unint64_t sub_1BA8210B4()
{
  unint64_t result;

  result = qword_1ED3CDDA8;
  if (!qword_1ED3CDDA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestAdjustment, &type metadata for FormatImageNodeRequestAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3CDDA8);
  }
  return result;
}

void sub_1BA8210F8(_QWORD *a1)
{
  FormatBindingTextExpressionLogic.encode(to:)(a1);
}

unint64_t sub_1BA82110C()
{
  unint64_t result;

  result = qword_1ED39BD28;
  if (!qword_1ED39BD28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingTextExpressionLogic, &type metadata for FormatBindingTextExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1ED39BD28);
  }
  return result;
}

unint64_t sub_1BA821158()
{
  unint64_t result;

  result = qword_1ED3CDBA8;
  if (!qword_1ED3CDBA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2DC8, &_s10CodingKeysON_216);
    atomic_store(result, (unint64_t *)&qword_1ED3CDBA8);
  }
  return result;
}

unint64_t sub_1BA82119C()
{
  unint64_t result;

  result = qword_1ED3CDBA0;
  if (!qword_1ED3CDBA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2DF0, &_s10CodingKeysON_216);
    atomic_store(result, (unint64_t *)&qword_1ED3CDBA0);
  }
  return result;
}

uint64_t sub_1BA8211E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA821210 + 4 * byte_1BB8AE394[*v0]))();
}

void sub_1BA821210(_QWORD *a1@<X8>)
{
  *a1 = 0x7974706D45746F6ELL;
  a1[1] = 0xE800000000000000;
}

void sub_1BA82122C(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6961746E6F63;
  a1[1] = 0xE800000000000000;
}

void sub_1BA821248(_QWORD *a1@<X8>)
{
  *a1 = 0x6966657250736168;
  a1[1] = 0xE900000000000078;
}

void sub_1BA821278(_QWORD *a1@<X8>)
{
  *a1 = 0x6874676E656CLL;
  a1[1] = 0xE600000000000000;
}

void sub_1BA821290(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x657261706D6F63;
  a1[1] = v1;
}

void sub_1BA8212A8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x676E69646E6962;
  a1[1] = v1;
}

uint64_t sub_1BA8212C0()
{
  sub_1BA4A6244();
  return sub_1BB872D0C();
}

unint64_t sub_1BA82130C()
{
  unint64_t result;

  result = qword_1ED3A9590;
  if (!qword_1ED3A9590)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2EE8, &_s10CodingTypeON_156);
    atomic_store(result, (unint64_t *)&qword_1ED3A9590);
  }
  return result;
}

uint64_t type metadata accessor for FormatAttributedStringAttachment()
{
  uint64_t result;

  result = qword_1ED3CDAD8;
  if (!qword_1ED3CDAD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatActivityItemsConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8213D8 + 4 * byte_1BB8D8B55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA82140C + 4 * asc_1BB8D8B50[v4]))();
}

uint64_t sub_1BA82140C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA821414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA82141CLL);
  return result;
}

uint64_t sub_1BA821428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA821430);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA821434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA82143C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1BA821448()
{
  unint64_t result;

  result = qword_1ED3BBA38;
  if (!qword_1ED3BBA38)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatActivityItemsConfiguration, &type metadata for FormatActivityItemsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED3BBA38);
  }
  return result;
}

void sub_1BA82148C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1ED3A9540)
  {
    sub_1BA4CDF6C(255, &qword_1ED3A09B0, (uint64_t (*)(void))sub_1BA4C783C, (uint64_t)&type metadata for FormatCountLimit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
    v3 = v2;
    v4 = sub_1BA81BDC0();
    v6 = type metadata accessor for VersionedKeyedEncodingContainer(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1ED3A9540);
  }
}

uint64_t type metadata accessor for NoopHiddenContentEffectRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FormatVideoPlayerViewController()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerOverlayContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatVideoPlayerOverlayContent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BA821610@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatVideoPlayerOverlayContent.init(from:)(a1, a2);
}

unint64_t sub_1BA821624()
{
  unint64_t result;

  result = qword_1ED3CD958;
  if (!qword_1ED3CD958)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerOverlayContent, &type metadata for FormatVideoPlayerOverlayContent);
    atomic_store(result, (unint64_t *)&qword_1ED3CD958);
  }
  return result;
}

unint64_t sub_1BA821670()
{
  unint64_t result;

  result = qword_1ED3CD950;
  if (!qword_1ED3CD950)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3D60, &_s10CodingKeysON_200);
    atomic_store(result, (unint64_t *)&qword_1ED3CD950);
  }
  return result;
}

unint64_t sub_1BA8216B4()
{
  unint64_t result;

  result = qword_1ED3CD948;
  if (!qword_1ED3CD948)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3D88, &_s10CodingKeysON_200);
    atomic_store(result, (unint64_t *)&qword_1ED3CD948);
  }
  return result;
}

unint64_t sub_1BA8216F8()
{
  unint64_t result;

  result = qword_1ED3CD940;
  if (!qword_1ED3CD940)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CF078, &_s10CodingKeysON_200);
    atomic_store(result, (unint64_t *)&qword_1ED3CD940);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodePinTrait(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 10);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BA821784@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodePinTrait.init(from:)(a1, a2);
}

uint64_t sub_1BA821798()
{
  sub_1BA82186C();
  return sub_1BB872D60();
}

uint64_t sub_1BA8217F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA609110();
  *a1 = result;
  return result;
}

unint64_t sub_1BA821828()
{
  unint64_t result;

  result = qword_1ED3CD938;
  if (!qword_1ED3CD938)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D0238, &_s10CodingTypeON_159);
    atomic_store(result, (unint64_t *)&qword_1ED3CD938);
  }
  return result;
}

unint64_t sub_1BA82186C()
{
  unint64_t result;

  result = qword_1ED3CD930;
  if (!qword_1ED3CD930)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B28C8, &_s10CodingTypeON_159);
    atomic_store(result, (unint64_t *)&qword_1ED3CD930);
  }
  return result;
}

void sub_1BA8218B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, double *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  char v12;
  double v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  int v19;
  CGFloat Height;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;

  if (!BYTE2(a4))
  {
    v16 = sub_1BB870F9C();
    if ((a3 & 1) != 0)
      v17 = (unsigned int *)MEMORY[0x1E0DBB610];
    else
      v17 = (unsigned int *)MEMORY[0x1E0DBB608];
    (*(void (**)(double *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a5, *v17, v16);
    v18 = (unsigned int *)MEMORY[0x1E0DBB620];
    goto LABEL_16;
  }
  v12 = a4;
  if (BYTE2(a4) == 1)
  {
    if ((a4 & 0x100) != 0)
    {
      v19 = ~(_BYTE)a4;
      Height = CGRectGetHeight(*(CGRect *)&a6);
      v15 = Height + Height;
      if (v19)
      {
        sub_1BA81F6F4(a1, a2, a3, v12);
        if (v9)
          return;
        v15 = v21;
      }
    }
    else
    {
      sub_1BB86DD80();
      v15 = sub_1BA72BED4(v25, a3);
      swift_release();
      if (v9)
        return;
    }
    *a5 = v15;
    v18 = (unsigned int *)MEMORY[0x1E0DBB630];
    goto LABEL_16;
  }
  if (BYTE1(a4) == 255)
  {
    v18 = (unsigned int *)MEMORY[0x1E0DBB638];
LABEL_16:
    v22 = *v18;
    v23 = sub_1BB870FA8();
    (*(void (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(a5, v22, v23);
    return;
  }
  v24 = sub_1BA8206DC(a1, a2, a3, a4 & 0x1FF, a6, a7, a8, a9);
  if (!v9)
  {
    *a5 = v24;
    v18 = (unsigned int *)MEMORY[0x1E0DBB600];
    goto LABEL_16;
  }
}

uint64_t sub_1BA821A58()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1BA821B0C()
{
  unint64_t result;

  result = qword_1ED3CD878;
  if (!qword_1ED3CD878)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91AB88, &type metadata for FormatOptionsNodeStatementValue.CodingValidationType);
    atomic_store(result, (unint64_t *)&qword_1ED3CD878);
  }
  return result;
}

unint64_t sub_1BA821B50()
{
  unint64_t result;

  result = qword_1ED3CD870;
  if (!qword_1ED3CD870)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91ABB0, &type metadata for FormatOptionsNodeStatementValue.CodingValidationType);
    atomic_store(result, (unint64_t *)&qword_1ED3CD870);
  }
  return result;
}

void sub_1BA821B94()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3BB3E8, (uint64_t (*)(uint64_t))type metadata accessor for FormatMicaSectionDecorationItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FormatMicaSectionDecorationView()
{
  uint64_t result;

  result = qword_1ED3BB450;
  if (!qword_1ED3BB450)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA821C6C()
{
  uint64_t result;

  result = type metadata accessor for FormatMicaSectionDecorationView();
  qword_1ED3B8768 = result;
  return result;
}

uint64_t sub_1BA821C8C(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3CD740, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1BA821CB8(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3CD738, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1BA821CE4(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3CD758, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
}

uint64_t sub_1BA821D10(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3CD750, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
}

void sub_1BA821D3C()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3B40F8, (uint64_t (*)(uint64_t))type metadata accessor for FormatMetadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BA821DBC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContentSlotItemObject.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA821E44()
{
  unint64_t result;

  result = qword_1ED39D498;
  if (!qword_1ED39D498)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EE15C, &type metadata for FormatColorConditionalProcessor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39D498);
  }
  return result;
}

unint64_t sub_1BA821E88()
{
  unint64_t result;

  result = qword_1ED39D490;
  if (!qword_1ED39D490)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EE184, &type metadata for FormatColorConditionalProcessor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39D490);
  }
  return result;
}

unint64_t sub_1BA821ED4()
{
  unint64_t result;

  result = qword_1ED3CD538;
  if (!qword_1ED3CD538)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6300, &_s10CodingKeysON_177);
    atomic_store(result, (unint64_t *)&qword_1ED3CD538);
  }
  return result;
}

unint64_t sub_1BA821F18()
{
  unint64_t result;

  result = qword_1ED3CD530;
  if (!qword_1ED3CD530)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6328, &_s10CodingKeysON_177);
    atomic_store(result, (unint64_t *)&qword_1ED3CD530);
  }
  return result;
}

unint64_t sub_1BA821F60()
{
  unint64_t result;

  result = qword_1ED3CD490;
  if (!qword_1ED3CD490)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationRequest, &type metadata for SportsDataVisualizationRequest);
    atomic_store(result, (unint64_t *)&qword_1ED3CD490);
  }
  return result;
}

unint64_t sub_1BA821FA4()
{
  unint64_t result;

  result = qword_1ED3CD488;
  if (!qword_1ED3CD488)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataVisualizationRequest, &type metadata for SportsDataVisualizationRequest);
    atomic_store(result, (unint64_t *)&qword_1ED3CD488);
  }
  return result;
}

unint64_t sub_1BA821FF4()
{
  unint64_t result;

  result = qword_1ED3CCFD0;
  if (!qword_1ED3CCFD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C22F8, &_s10CodingKeysON_19);
    atomic_store(result, (unint64_t *)&qword_1ED3CCFD0);
  }
  return result;
}

unint64_t sub_1BA822038()
{
  unint64_t result;

  result = qword_1ED3CCFC8;
  if (!qword_1ED3CCFC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2320, &_s10CodingKeysON_19);
    atomic_store(result, (unint64_t *)&qword_1ED3CCFC8);
  }
  return result;
}

unint64_t sub_1BA822080()
{
  unint64_t result;

  result = qword_1ED3CCFA0;
  if (!qword_1ED3CCFA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A1CA0, &type metadata for FormatPackageInventoryCacheKey);
    atomic_store(result, (unint64_t *)&qword_1ED3CCFA0);
  }
  return result;
}

unint64_t sub_1BA8220C4()
{
  unint64_t result;

  result = qword_1ED3CCF98;
  if (!qword_1ED3CCF98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A1C60, &type metadata for FormatPackageInventoryCacheKey);
    atomic_store(result, (unint64_t *)&qword_1ED3CCF98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatLayeredMediaRatioBinding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA822154 + 4 * byte_1BB8D9A35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA822188 + 4 * byte_1BB8D9A30[v4]))();
}

uint64_t sub_1BA822188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA822190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA822198);
  return result;
}

uint64_t sub_1BA8221A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8221ACLL);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA8221B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8221B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8221C4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatLayeredMediaRatioBinding.init(from:)(a1, a2);
}

unint64_t sub_1BA8221D8()
{
  unint64_t result;

  result = qword_1ED3B02C8;
  if (!qword_1ED3B02C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaRatioBinding, &type metadata for FormatLayeredMediaRatioBinding);
    atomic_store(result, (unint64_t *)&qword_1ED3B02C8);
  }
  return result;
}

uint64_t FormatLayeredMediaRatioBinding.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BA508EC0(a1, (void (*)(uint64_t))sub_1BA8222B0, (uint64_t)&_s10CodingTypeON_64, (uint64_t)&unk_1E726CB08, a2);
}

uint64_t sub_1BA822248()
{
  sub_1BA8222F4();
  return sub_1BB872D60();
}

uint64_t sub_1BA8222A4@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

unint64_t sub_1BA8222B0()
{
  unint64_t result;

  result = qword_1ED3CCF90;
  if (!qword_1ED3CCF90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C9568, &_s10CodingTypeON_64);
    atomic_store(result, (unint64_t *)&qword_1ED3CCF90);
  }
  return result;
}

unint64_t sub_1BA8222F4()
{
  unint64_t result;

  result = qword_1ED3CCF88;
  if (!qword_1ED3CCF88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC1D8, &_s10CodingTypeON_64);
    atomic_store(result, (unint64_t *)&qword_1ED3CCF88);
  }
  return result;
}

unint64_t sub_1BA822338()
{
  unint64_t result;

  result = qword_1ED3A8D58;
  if (!qword_1ED3A8D58)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlotItemAuxiliary.Resolved, &type metadata for FormatContentSlotItemAuxiliary.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED3A8D58);
  }
  return result;
}

unint64_t sub_1BA82237C()
{
  unint64_t result;

  result = qword_1ED3A8D48;
  if (!qword_1ED3A8D48)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlotItemAuxiliary.Resolved, &type metadata for FormatContentSlotItemAuxiliary.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED3A8D48);
  }
  return result;
}

unint64_t sub_1BA8223C8()
{
  unint64_t result;

  result = qword_1ED3A8D08;
  if (!qword_1ED3A8D08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B75D8, &_s10CodingKeysON_159);
    atomic_store(result, (unint64_t *)&qword_1ED3A8D08);
  }
  return result;
}

unint64_t sub_1BA82240C()
{
  unint64_t result;

  result = qword_1ED3A8D00;
  if (!qword_1ED3A8D00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7600, &_s10CodingKeysON_159);
    atomic_store(result, (unint64_t *)&qword_1ED3A8D00);
  }
  return result;
}

unint64_t sub_1BA822454()
{
  unint64_t result;

  result = qword_1ED3B8578;
  if (!qword_1ED3B8578)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAuxiliaryViewRequirement, &type metadata for FormatAuxiliaryViewRequirement);
    atomic_store(result, (unint64_t *)&qword_1ED3B8578);
  }
  return result;
}

unint64_t sub_1BA822498()
{
  unint64_t result;

  result = qword_1ED3B8570;
  if (!qword_1ED3B8570)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAuxiliaryViewRequirement, &type metadata for FormatAuxiliaryViewRequirement);
    atomic_store(result, (unint64_t *)&qword_1ED3B8570);
  }
  return result;
}

uint64_t sub_1BA8224DC()
{
  return sub_1BA4AB028(&qword_1ED3CCD88, (uint64_t)&protocol conformance descriptor for FormatAccessibilityLayoutValue);
}

uint64_t sub_1BA822500()
{
  return sub_1BA4AB028(&qword_1ED3CCDA0, (uint64_t)&protocol conformance descriptor for FormatAccessibilityLayoutValue);
}

uint64_t sub_1BA822524()
{
  return sub_1BA4AB028(&qword_1ED3CCD98, (uint64_t)&protocol conformance descriptor for FormatAccessibilityLayoutValue);
}

void sub_1BA822548()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3B8450, type metadata accessor for PublisherLogoProcessorOptions, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BA822610()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ImageRequestOptions();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1BA822680()
{
  qword_1ED3CCD28 = MEMORY[0x1E0DEE9D8];
  unk_1ED3CCD30 = 1;
}

uint64_t type metadata accessor for FormatVideoPlayerReuseManager()
{
  return objc_opt_self();
}

unint64_t sub_1BA8226BC()
{
  unint64_t result;

  result = qword_1ED3CCC58;
  if (!qword_1ED3CCC58)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatRepeatNodeBindIteration, &type metadata for FormatRepeatNodeBindIteration);
    atomic_store(result, (unint64_t *)&qword_1ED3CCC58);
  }
  return result;
}

uint64_t type metadata accessor for FormatPuzzleEmbedNodeRenderer()
{
  return objc_opt_self();
}

void sub_1BA822720()
{
  unint64_t v0;

  sub_1BA829D7C(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FormatPurchaseLandingPageData()
{
  uint64_t result;

  result = qword_1ED3BB2F0;
  if (!qword_1ED3BB2F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA8227D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v7 + 84);
  }
  return result;
}

uint64_t sub_1BA82282C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA8227D0(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1BA822894);
}

uint64_t type metadata accessor for FormatLayoutSectionDescriptor(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3D4E40);
}

unint64_t sub_1BA82284C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3D4E30;
  if (!qword_1ED3D4E30)
  {
    v1 = type metadata accessor for FormatLayoutSectionDescriptor(255);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutSectionDescriptor, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3D4E30);
  }
  return result;
}

void sub_1BA822894(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3D4E20, (uint64_t (*)(uint64_t))type metadata accessor for FormatContent.Resolved, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FormatLayoutSectionDescriptor.Data);
}

uint64_t type metadata accessor for FormatLayoutSectionDescriptor.Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatLayoutSectionDescriptor.Data);
}

uint64_t sub_1BA8228BC@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return FormatLayeredMediaNodeContent.init(from:)(a1, a2);
}

unint64_t sub_1BA8228D0()
{
  unint64_t result;

  result = qword_1ED3B0208;
  if (!qword_1ED3B0208)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaNodeContent, &type metadata for FormatLayeredMediaNodeContent);
    atomic_store(result, (unint64_t *)&qword_1ED3B0208);
  }
  return result;
}

uint64_t sub_1BA822914()
{
  sub_1BA8229C0();
  return sub_1BB872D60();
}

uint64_t sub_1BA822970@<X0>(char *a1@<X8>)
{
  return sub_1BA4E2654(a1);
}

unint64_t sub_1BA82297C()
{
  unint64_t result;

  result = qword_1ED3CCBB8;
  if (!qword_1ED3CCBB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C97A0, &_s10CodingTypeON_65);
    atomic_store(result, (unint64_t *)&qword_1ED3CCBB8);
  }
  return result;
}

unint64_t sub_1BA8229C0()
{
  unint64_t result;

  result = qword_1ED3CCBB0;
  if (!qword_1ED3CCBB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBF60, &_s10CodingTypeON_65);
    atomic_store(result, (unint64_t *)&qword_1ED3CCBB0);
  }
  return result;
}

uint64_t sub_1BA822A04(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for FormatVersionableValue(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1BA822A74()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA822A84()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA822A94()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, &qword_1ED3B40F8, (void (*)(uint64_t))type metadata accessor for FormatMetadata);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BA822B0C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingIgnoreSetStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for FormatCodingIgnoreSetStrategy()
{
  JUMPOUT(0x1BCCE5A70);
}

void type metadata accessor for FormatCodingColumnSetStrategy.SetOrSingle()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t sub_1BA822B50()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WebEmbedDataSourceJson();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceCacheEntry()
{
  uint64_t result;

  result = qword_1ED3CC8C8;
  if (!qword_1ED3CC8C8)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for ReportConcernCompleteContext()
{
  return &type metadata for ReportConcernCompleteContext;
}

void sub_1BA822C08()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for PuzzleStatisticsGroupedValue(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4308);
}

uint64_t getEnumTagSinglePayload for PuzzleGameCenterListenerType(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1BA822D10()
{
  return sub_1BB86EC14();
}

unint64_t sub_1BA822D34()
{
  unint64_t result;

  result = qword_1ED3CC7F8;
  if (!qword_1ED3CC7F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3E80, &_s14descr1E72CBD49V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CC7F8);
  }
  return result;
}

unint64_t sub_1BA822D78()
{
  unint64_t result;

  result = qword_1ED3CC7F0;
  if (!qword_1ED3CC7F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3EA8, &_s14descr1E72CBD49V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CC7F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatSupplementaryNodeStyle.Selector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatSupplementaryNodeStyle.Selector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t initializeWithCopy for FormatSupplementaryNodeStyle.Selector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(_BYTE *)(a2 + 34);
  v7 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v5;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(v5 + 7);
  }
  else
  {
    v8 = v7 & 0xFF00FFFF | (v6 << 16);
    v9 = *(_QWORD *)v5;
    sub_1BA77A170(v9, v8, SBYTE2(v8), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
    *(_QWORD *)(a1 + 24) = v9;
    *(_WORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 34) = BYTE2(v8);
  }
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  return a1;
}

uint64_t sub_1BA822F00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatSupplementaryNodeStyle.Selector.init(from:)(a1, a2);
}

unint64_t sub_1BA822F14()
{
  unint64_t result;

  result = qword_1ED3CC710;
  if (!qword_1ED3CC710)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB951584, &type metadata for FormatSupplementaryNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CC710);
  }
  return result;
}

unint64_t sub_1BA822F58()
{
  unint64_t result;

  result = qword_1ED3CC700;
  if (!qword_1ED3CC700)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementaryNodeStyle.Selector, &type metadata for FormatSupplementaryNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CC700);
  }
  return result;
}

unint64_t sub_1BA822F9C()
{
  unint64_t result;

  result = qword_1ED3CC6F8;
  if (!qword_1ED3CC6F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementaryNodeStyle.Selector, &type metadata for FormatSupplementaryNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6F8);
  }
  return result;
}

unint64_t sub_1BA822FE0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA822F58();
  result = sub_1BA822F9C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA823014()
{
  unint64_t result;

  result = qword_1ED3CC6F0;
  if (!qword_1ED3CC6F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1398, &_s10CodingKeysON_34);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6F0);
  }
  return result;
}

unint64_t sub_1BA823058()
{
  unint64_t result;

  result = qword_1ED3CC6E8;
  if (!qword_1ED3CC6E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C13C0, &_s10CodingKeysON_34);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6E8);
  }
  return result;
}

unint64_t sub_1BA82309C()
{
  unint64_t result;

  result = qword_1ED3CC6E0;
  if (!qword_1ED3CC6E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C5B40, &_s10CodingKeysON_34);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6E0);
  }
  return result;
}

unint64_t sub_1BA8230E8()
{
  unint64_t result;

  result = qword_1ED3CC6D8;
  if (!qword_1ED3CC6D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1308, &_s10CodingKeysON_35);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6D8);
  }
  return result;
}

unint64_t sub_1BA82312C()
{
  unint64_t result;

  result = qword_1ED3CC6D0;
  if (!qword_1ED3CC6D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1330, &_s10CodingKeysON_35);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6D0);
  }
  return result;
}

unint64_t sub_1BA823170()
{
  unint64_t result;

  result = qword_1ED3CC6C0;
  if (!qword_1ED3CC6C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEventValue, &type metadata for FormatStateMachineEventValue);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6C0);
  }
  return result;
}

unint64_t sub_1BA8231B4()
{
  unint64_t result;

  result = qword_1ED3B8280;
  if (!qword_1ED3B8280)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEventValue, &type metadata for FormatStateMachineEventValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B8280);
  }
  return result;
}

unint64_t sub_1BA8231F8()
{
  unint64_t result;

  result = qword_1ED3B8278;
  if (!qword_1ED3B8278)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEventValue, &type metadata for FormatStateMachineEventValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B8278);
  }
  return result;
}

uint64_t sub_1BA82323C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA8231B4, (uint64_t (*)(void))sub_1BA8231F8, (uint64_t (*)(void))sub_1BB5AC218);
}

unint64_t sub_1BA823260()
{
  unint64_t result;

  result = qword_1ED3CC6B8;
  if (!qword_1ED3CC6B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0CE0, &_s10CodingKeysON_38);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6B8);
  }
  return result;
}

unint64_t sub_1BA8232A4()
{
  unint64_t result;

  result = qword_1ED3CC6B0;
  if (!qword_1ED3CC6B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0D08, &_s10CodingKeysON_38);
    atomic_store(result, (unint64_t *)&qword_1ED3CC6B0);
  }
  return result;
}

unint64_t sub_1BA8232F0()
{
  unint64_t result;

  result = qword_1ED3B8268;
  if (!qword_1ED3B8268)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90FB68, &type metadata for FormatStateMachineDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B8268);
  }
  return result;
}

unint64_t sub_1BA823334()
{
  unint64_t result;

  result = qword_1ED3B8260;
  if (!qword_1ED3B8260)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90FB90, &type metadata for FormatStateMachineDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B8260);
  }
  return result;
}

void sub_1BA823378(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3A04E0)
  {
    v2 = sub_1BA8281A8();
    v4 = type metadata accessor for FormatNodeStyleSelectorOrder(a1, (uint64_t)&type metadata for FormatAnimationNodeStyle.Selector, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3A04E0);
  }
}

void sub_1BA8233D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3A8420)
  {
    v2 = sub_1BA82759C();
    v4 = type metadata accessor for FormatNodeStyleSelectorOrder(a1, (uint64_t)&type metadata for FormatGroupNodeMaskStyle.Selector, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3A8420);
  }
}

void sub_1BA823428(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3CC678)
  {
    v2 = sub_1BA822F14();
    v4 = type metadata accessor for FormatNodeStyleSelectorOrder(a1, (uint64_t)&type metadata for FormatSupplementaryNodeStyle.Selector, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3CC678);
  }
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.debugger.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.analyticsDataProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of FormatLayoutViewRendererType.presentingViewController.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1BA823498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_1BA49EBE0(v3);
  return swift_retain();
}

void sub_1BA8234C8()
{
  unint64_t v0;

  sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3C47E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA823588()
{
  unint64_t result;

  result = qword_1ED3CC5B0;
  if (!qword_1ED3CC5B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8BD0, &_s10CodingKeysON_141);
    atomic_store(result, (unint64_t *)&qword_1ED3CC5B0);
  }
  return result;
}

unint64_t sub_1BA8235CC()
{
  unint64_t result;

  result = qword_1ED3CC5A8;
  if (!qword_1ED3CC5A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8BF8, &_s10CodingKeysON_141);
    atomic_store(result, (unint64_t *)&qword_1ED3CC5A8);
  }
  return result;
}

uint64_t sub_1BA823610()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatDebuggerCallStackFrameContext(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA82368C()
{
  unint64_t result;

  result = qword_1ED3CC4F0;
  if (!qword_1ED3CC4F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupSection, &type metadata for FormatContentSubgroupSection);
    atomic_store(result, (unint64_t *)&qword_1ED3CC4F0);
  }
  return result;
}

unint64_t sub_1BA8236D0()
{
  unint64_t result;

  result = qword_1ED3A8408;
  if (!qword_1ED3A8408)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupSection.Resolved, &type metadata for FormatContentSubgroupSection.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED3A8408);
  }
  return result;
}

unint64_t sub_1BA823714()
{
  unint64_t result;

  result = qword_1ED3A83F8;
  if (!qword_1ED3A83F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupSection.Resolved, &type metadata for FormatContentSubgroupSection.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED3A83F8);
  }
  return result;
}

unint64_t sub_1BA823760()
{
  unint64_t result;

  result = qword_1ED3CC440;
  if (!qword_1ED3CC440)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1D88, &_s10CodingKeysON_231);
    atomic_store(result, (unint64_t *)&qword_1ED3CC440);
  }
  return result;
}

unint64_t sub_1BA8237A4()
{
  unint64_t result;

  result = qword_1ED3CC438;
  if (!qword_1ED3CC438)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1DB0, &_s10CodingKeysON_231);
    atomic_store(result, (unint64_t *)&qword_1ED3CC438);
  }
  return result;
}

unint64_t sub_1BA8237E8()
{
  unint64_t result;

  result = qword_1ED3C2918;
  if (!qword_1ED3C2918)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingMetadataStrategy, &type metadata for FormatCodingMetadataStrategy);
    atomic_store(result, (unint64_t *)&qword_1ED3C2918);
  }
  return result;
}

unint64_t sub_1BA823834()
{
  unint64_t result;

  result = qword_1ED3CC428;
  if (!qword_1ED3CC428)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B66D0, &_s10CodingKeysON_173);
    atomic_store(result, (unint64_t *)&qword_1ED3CC428);
  }
  return result;
}

unint64_t sub_1BA823878()
{
  unint64_t result;

  result = qword_1ED3CC420;
  if (!qword_1ED3CC420)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B66F8, &_s10CodingKeysON_173);
    atomic_store(result, (unint64_t *)&qword_1ED3CC420);
  }
  return result;
}

uint64_t type metadata accessor for FormatBackgroundLayoutSolver()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for FollowingNotificationContext()
{
  return &type metadata for FollowingNotificationContext;
}

uint64_t type metadata accessor for EngagementBannerViewRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ArticleThumbnailViewRenderer()
{
  return objc_opt_self();
}

void sub_1BA82394C(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  sub_1BA4DEAA8(a1, a2, a3, *(void (**)(uint64_t))(v3 + 24), *(_QWORD *)(v3 + 32), *(void (**)(unint64_t, _QWORD))(v3 + 40), *(_QWORD *)(v3 + 48), *(double *)(v3 + 16));
}

void sub_1BA82395C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BA4EEB30(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t dispatch thunk of PuzzleGameCenterServiceType.addListener(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 96) + *(_QWORD *)(a4 + 96));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1BA8195A4;
  return v11(a1, a2, a3, a4);
}

uint64_t type metadata accessor for FormatStateViewNodeRenderer()
{
  return objc_opt_self();
}

uint64_t sub_1BA823A08(_QWORD *a1)
{
  return FormatSlotDefinitionItemSet.encode(to:)(a1);
}

void sub_1BA823A1C()
{
  unint64_t v0;

  sub_1BA74E57C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA823AB8()
{
  unint64_t result;

  result = qword_1ED3BB928[0];
  if (!qword_1ED3BB928[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB901C34, &type metadata for FormatSlotDefinitionItemSet.CodingKeys);
    atomic_store(result, qword_1ED3BB928);
  }
  return result;
}

unint64_t sub_1BA823AFC()
{
  unint64_t result;

  result = qword_1ED3BF8C8;
  if (!qword_1ED3BF8C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB901C5C, &type metadata for FormatSlotDefinitionItemSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3BF8C8);
  }
  return result;
}

uint64_t sub_1BA823B40(_QWORD *a1)
{
  return FormatProgressViewNodeStyle.encode(to:)(a1);
}

unint64_t sub_1BA823B60()
{
  unint64_t result;

  result = qword_1ED3A8018;
  if (!qword_1ED3A8018)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeStyle.Selector, &type metadata for FormatProgressViewNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A8018);
  }
  return result;
}

unint64_t sub_1BA823BA4()
{
  unint64_t result;

  result = qword_1ED3A8010;
  if (!qword_1ED3A8010)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeStyle.Selector, &type metadata for FormatProgressViewNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A8010);
  }
  return result;
}

unint64_t sub_1BA823BF0()
{
  unint64_t result;

  result = qword_1ED3A8008;
  if (!qword_1ED3A8008)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B32B8, &_s10CodingKeysON_210);
    atomic_store(result, (unint64_t *)&qword_1ED3A8008);
  }
  return result;
}

unint64_t sub_1BA823C34()
{
  unint64_t result;

  result = qword_1ED3A8000;
  if (!qword_1ED3A8000)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B32E0, &_s10CodingKeysON_210);
    atomic_store(result, (unint64_t *)&qword_1ED3A8000);
  }
  return result;
}

unint64_t sub_1BA823C80()
{
  unint64_t result;

  result = qword_1ED3A7FF0;
  if (!qword_1ED3A7FF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3228, &_s10CodingKeysON_211);
    atomic_store(result, (unint64_t *)&qword_1ED3A7FF0);
  }
  return result;
}

unint64_t sub_1BA823CC4()
{
  unint64_t result;

  result = qword_1ED3A7FE8;
  if (!qword_1ED3A7FE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3250, &_s10CodingKeysON_211);
    atomic_store(result, (unint64_t *)&qword_1ED3A7FE8);
  }
  return result;
}

uint64_t type metadata accessor for FormatPackageInventoryCache()
{
  return objc_opt_self();
}

unint64_t sub_1BA823D28()
{
  unint64_t result;

  result = qword_1ED3B80F0;
  if (!qword_1ED3B80F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionBindingModifier, &type metadata for FormatOptionBindingModifier);
    atomic_store(result, (unint64_t *)&qword_1ED3B80F0);
  }
  return result;
}

unint64_t sub_1BA823D6C()
{
  unint64_t result;

  result = qword_1ED3B01E0;
  if (!qword_1ED3B01E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionBindingModifier, &type metadata for FormatOptionBindingModifier);
    atomic_store(result, (unint64_t *)&qword_1ED3B01E0);
  }
  return result;
}

uint64_t type metadata accessor for FormatLayoutViewPoolManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA823DD0()
{
  uint64_t result;

  type metadata accessor for FormatLayoutViewPoolManager();
  swift_allocObject();
  result = sub_1BA50044C();
  qword_1ED476AA0 = result;
  return result;
}

unint64_t sub_1BA823E08()
{
  unint64_t result;

  result = qword_1ED3CC0C8;
  if (!qword_1ED3CC0C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaNodeStyle.Selector, &type metadata for FormatLayeredMediaNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CC0C8);
  }
  return result;
}

unint64_t sub_1BA823E4C()
{
  unint64_t result;

  result = qword_1ED3CC0C0;
  if (!qword_1ED3CC0C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaNodeStyle.Selector, &type metadata for FormatLayeredMediaNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CC0C0);
  }
  return result;
}

unint64_t sub_1BA823E98()
{
  unint64_t result;

  result = qword_1ED3CC0B8;
  if (!qword_1ED3CC0B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC000, &_s10CodingKeysON_103);
    atomic_store(result, (unint64_t *)&qword_1ED3CC0B8);
  }
  return result;
}

unint64_t sub_1BA823EDC()
{
  unint64_t result;

  result = qword_1ED3CC0B0;
  if (!qword_1ED3CC0B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC028, &_s10CodingKeysON_103);
    atomic_store(result, (unint64_t *)&qword_1ED3CC0B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatItemNodeLayoutContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA823F2C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatGroupNodeMaskRenderer()
{
  return objc_opt_self();
}

uint64_t sub_1BA823FDC(_QWORD *a1)
{
  return FormatContentSubgroupFilter.init(from:)(a1);
}

void sub_1BA823FF0(_QWORD *a1)
{
  FormatContentSubgroupFilter.encode(to:)(a1);
}

unint64_t sub_1BA824004()
{
  unint64_t result;

  result = qword_1ED3CC058;
  if (!qword_1ED3CC058)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilter, &type metadata for FormatContentSubgroupFilter);
    atomic_store(result, (unint64_t *)&qword_1ED3CC058);
  }
  return result;
}

unint64_t sub_1BA824048()
{
  unint64_t result;

  result = qword_1ED3CC050;
  if (!qword_1ED3CC050)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroupFilter, &type metadata for FormatContentSubgroupFilter);
    atomic_store(result, (unint64_t *)&qword_1ED3CC050);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentSubgroupFilter.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BA8240D8 + 4 * byte_1BB8F1747[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BA82410C + 4 * byte_1BB8F1742[v4]))();
}

uint64_t sub_1BA82410C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA824114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA82411CLL);
  return result;
}

uint64_t sub_1BA824128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA824130);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BA824134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA82413C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA824148()
{
  sub_1BA824288();
  return sub_1BB872D60();
}

uint64_t sub_1BA8241A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA4A2B74();
  *a1 = result;
  return result;
}

uint64_t sub_1BA8241D0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA824310(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA8241F8()
{
  sub_1BA824288();
  return sub_1BB872D0C();
}

unint64_t sub_1BA824244()
{
  unint64_t result;

  result = qword_1ED3A7F88;
  if (!qword_1ED3A7F88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1A40, &type metadata for FormatContentSubgroupFilter.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F88);
  }
  return result;
}

unint64_t sub_1BA824288()
{
  unint64_t result;

  result = qword_1ED3A7F80;
  if (!qword_1ED3A7F80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1978, &type metadata for FormatContentSubgroupFilter.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F80);
  }
  return result;
}

unint64_t sub_1BA8242CC()
{
  unint64_t result;

  result = qword_1ED3A7F78;
  if (!qword_1ED3A7F78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1A18, &type metadata for FormatContentSubgroupFilter.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F78);
  }
  return result;
}

uint64_t sub_1BA824310(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA82433C + 4 * byte_1BB8F1738[a1]))(1802398060, 0xE400000000000000);
}

uint64_t sub_1BA82433C()
{
  return 0x6D65726975716572;
}

uint64_t sub_1BA82435C()
{
  return 1701015151;
}

uint64_t sub_1BA824368()
{
  return 0x6465646563657270;
}

uint64_t sub_1BA824384()
{
  return 0x636572507473616CLL;
}

uint64_t sub_1BA8243A8()
{
  return 0x65766F6D6572;
}

uint64_t sub_1BA8243BC()
{
  return 6581857;
}

uint64_t sub_1BA8243CC()
{
  return 29295;
}

uint64_t sub_1BA8243D8()
{
  return 7630702;
}

uint64_t sub_1BA8243E8()
{
  return 0x726F7463656C6573;
}

unint64_t sub_1BA824408()
{
  unint64_t result;

  result = qword_1ED3A7F70;
  if (!qword_1ED3A7F70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1888, &type metadata for FormatContentSubgroupFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F70);
  }
  return result;
}

unint64_t sub_1BA82444C()
{
  unint64_t result;

  result = qword_1ED3A7F68;
  if (!qword_1ED3A7F68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F18B0, &type metadata for FormatContentSubgroupFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F68);
  }
  return result;
}

uint64_t sub_1BA824490()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FormatWebEmbed();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FormatCustomItem();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BA824558()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for FormatWebEmbed.Resolved();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PuzzleStatistic();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for FormatCustomItem.Resolved();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1BA824624()
{
  unint64_t result;

  result = qword_1ED3A7F08;
  if (!qword_1ED3A7F08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB933B34, &_s8ResolvedO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F08);
  }
  return result;
}

unint64_t sub_1BA824668()
{
  unint64_t result;

  result = qword_1ED3A7F00;
  if (!qword_1ED3A7F00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB933B5C, &_s8ResolvedO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A7F00);
  }
  return result;
}

unint64_t sub_1BA8246B4()
{
  unint64_t result;

  result = qword_1ED3CBED0;
  if (!qword_1ED3CBED0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6948, &_s14descr1E72CC7E9O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CBED0);
  }
  return result;
}

unint64_t sub_1BA8246F8()
{
  unint64_t result;

  result = qword_1ED3CBEC8;
  if (!qword_1ED3CBEC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6970, &_s14descr1E72CC7E9O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CBEC8);
  }
  return result;
}

unint64_t sub_1BA824744()
{
  unint64_t result;

  result = qword_1ED3CBEB8;
  if (!qword_1ED3CBEB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6270, &_s10CodingKeysON_178);
    atomic_store(result, (unint64_t *)&qword_1ED3CBEB8);
  }
  return result;
}

unint64_t sub_1BA824788()
{
  unint64_t result;

  result = qword_1ED3CBEB0;
  if (!qword_1ED3CBEB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6298, &_s10CodingKeysON_178);
    atomic_store(result, (unint64_t *)&qword_1ED3CBEB0);
  }
  return result;
}

uint64_t type metadata accessor for FormatArticleThumbnailImage()
{
  uint64_t result;

  result = qword_1ED3CBE10;
  if (!qword_1ED3CBE10)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for CommandShareContentComplete()
{
  return &type metadata for CommandShareContentComplete;
}

uint64_t type metadata accessor for WebEmbedDataSourceWorkItem()
{
  return objc_opt_self();
}

void sub_1BA824838(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3CBD28, (uint64_t (*)(uint64_t))sub_1BA824854, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BA824854(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3CBD20, (uint64_t (*)(uint64_t))sub_1BA81E3D0, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ResourceConfigurationCache);
}

void sub_1BA824870()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A7E08)
  {
    sub_1BA8248D4(255, &qword_1ED3A7E00, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for ResourceConfigurationCache);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A7E08);
  }
}

void sub_1BA8248D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for SportsEmbedConfiguration);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for ResourceConfigurationCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResourceConfigurationCache);
}

uint64_t sub_1BA824928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA4A3F48(a1, a2, a3, (uint64_t)&unk_1BB90B3B0, (uint64_t (*)(uint64_t))sub_1BA829D7C);
}

uint64_t type metadata accessor for OsloSheetPurchaseDataModel(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C0AC8);
}

ValueMetadata *type metadata accessor for ManageNotificationsContext()
{
  return &type metadata for ManageNotificationsContext;
}

uint64_t type metadata accessor for LiveActivityCommandContext()
{
  uint64_t result;

  result = qword_1ED3CBBC8;
  if (!qword_1ED3CBBC8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA82499C()
{
  unint64_t result;

  result = qword_1ED3CBBC0;
  if (!qword_1ED3CBBC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for LikingCompleteCommandState, &type metadata for LikingCompleteCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3CBBC0);
  }
  return result;
}

uint64_t type metadata accessor for FormatWebEmbedNodeRenderer()
{
  return objc_opt_self();
}

uint64_t sub_1BA824A00(_QWORD *a1)
{
  return FormatVideoPlayerNodeStyle.encode(to:)(a1);
}

unint64_t sub_1BA824A20()
{
  unint64_t result;

  result = qword_1ED3CBAB0;
  if (!qword_1ED3CBAB0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerNodeStyle.Selector, &type metadata for FormatVideoPlayerNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CBAB0);
  }
  return result;
}

unint64_t sub_1BA824A64()
{
  unint64_t result;

  result = qword_1ED3CBAA8;
  if (!qword_1ED3CBAA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerNodeStyle.Selector, &type metadata for FormatVideoPlayerNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CBAA8);
  }
  return result;
}

unint64_t sub_1BA824AB0()
{
  unint64_t result;

  result = qword_1ED3CBAA0;
  if (!qword_1ED3CBAA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3378, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1ED3CBAA0);
  }
  return result;
}

unint64_t sub_1BA824AF4()
{
  unint64_t result;

  result = qword_1ED3CBA98;
  if (!qword_1ED3CBA98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C33A0, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA98);
  }
  return result;
}

unint64_t sub_1BA824B40()
{
  unint64_t result;

  result = qword_1ED3CBA88;
  if (!qword_1ED3CBA88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C32E8, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA88);
  }
  return result;
}

unint64_t sub_1BA824B84()
{
  unint64_t result;

  result = qword_1ED3CBA80;
  if (!qword_1ED3CBA80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3310, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA80);
  }
  return result;
}

unint64_t sub_1BA824BD0()
{
  unint64_t result;

  result = qword_1ED3CBA70;
  if (!qword_1ED3CBA70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1318, &_s10CodingKeysON_243);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA70);
  }
  return result;
}

unint64_t sub_1BA824C14()
{
  unint64_t result;

  result = qword_1ED3CBA68;
  if (!qword_1ED3CBA68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1340, &_s10CodingKeysON_243);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA68);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGapOffline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedGapOffline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA824CF4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatShareAttributionNode.init(from:)(a1, a2);
}

unint64_t sub_1BA824D08()
{
  unint64_t result;

  result = qword_1ED3BF6E8;
  if (!qword_1ED3BF6E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShareAttributionNode, &type metadata for FormatShareAttributionNode);
    atomic_store(result, (unint64_t *)&qword_1ED3BF6E8);
  }
  return result;
}

unint64_t sub_1BA824D54()
{
  unint64_t result;

  result = qword_1ED3CBA58;
  if (!qword_1ED3CBA58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF640, &_s10CodingKeysON_55);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA58);
  }
  return result;
}

unint64_t sub_1BA824D98()
{
  unint64_t result;

  result = qword_1ED3CBA50;
  if (!qword_1ED3CBA50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF668, &_s10CodingKeysON_55);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA50);
  }
  return result;
}

unint64_t sub_1BA824DDC()
{
  unint64_t result;

  result = qword_1ED3CBA48;
  if (!qword_1ED3CBA48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C6E58, &_s10CodingKeysON_55);
    atomic_store(result, (unint64_t *)&qword_1ED3CBA48);
  }
  return result;
}

uint64_t sub_1BA824E20()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SharedItem();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA824E88()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatOptionsNodeStatementValue();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA824F10()
{
  unint64_t result;

  result = qword_1ED3CB990;
  if (!qword_1ED3CB990)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD280, &_s10CodingKeysON_85);
    atomic_store(result, (unint64_t *)&qword_1ED3CB990);
  }
  return result;
}

unint64_t sub_1BA824F54()
{
  unint64_t result;

  result = qword_1ED3CB988;
  if (!qword_1ED3CB988)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD2A8, &_s10CodingKeysON_85);
    atomic_store(result, (unint64_t *)&qword_1ED3CB988);
  }
  return result;
}

uint64_t sub_1BA824F98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatImageNodeRequestSize.init(from:)(a1, a2);
}

unint64_t sub_1BA824FAC()
{
  unint64_t result;

  result = qword_1ED3CB968;
  if (!qword_1ED3CB968)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestSize, &type metadata for FormatImageNodeRequestSize);
    atomic_store(result, (unint64_t *)&qword_1ED3CB968);
  }
  return result;
}

unint64_t sub_1BA824FFC()
{
  unint64_t result;

  result = qword_1ED3CB960;
  if (!qword_1ED3CB960)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB138, &_s10CodingKeysON_113);
    atomic_store(result, (unint64_t *)&qword_1ED3CB960);
  }
  return result;
}

unint64_t sub_1BA825040()
{
  unint64_t result;

  result = qword_1ED3CB958;
  if (!qword_1ED3CB958)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB160, &_s10CodingKeysON_113);
    atomic_store(result, (unint64_t *)&qword_1ED3CB958);
  }
  return result;
}

unint64_t sub_1BA825084()
{
  unint64_t result;

  result = qword_1ED3CB950;
  if (!qword_1ED3CB950)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CA060, &_s10CodingKeysON_113);
    atomic_store(result, (unint64_t *)&qword_1ED3CB950);
  }
  return result;
}

uint64_t sub_1BA8250C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatImageNodeRequestPath.init(from:)(a1, a2);
}

unint64_t sub_1BA8250DC()
{
  unint64_t result;

  result = qword_1ED3CB948;
  if (!qword_1ED3CB948)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestPath, &type metadata for FormatImageNodeRequestPath);
    atomic_store(result, (unint64_t *)&qword_1ED3CB948);
  }
  return result;
}

uint64_t sub_1BA825120()
{
  _BYTE *v0;

  if (*v0)
    return 1885433183;
  else
    return 0x656D7473756A6461;
}

unint64_t sub_1BA825164()
{
  unint64_t result;

  result = qword_1ED3CB940;
  if (!qword_1ED3CB940)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB0A8, &_s10CodingKeysON_114);
    atomic_store(result, (unint64_t *)&qword_1ED3CB940);
  }
  return result;
}

unint64_t sub_1BA8251A8()
{
  unint64_t result;

  result = qword_1ED3CB938;
  if (!qword_1ED3CB938)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB0D0, &_s10CodingKeysON_114);
    atomic_store(result, (unint64_t *)&qword_1ED3CB938);
  }
  return result;
}

unint64_t sub_1BA8251EC()
{
  unint64_t result;

  result = qword_1ED3CB930;
  if (!qword_1ED3CB930)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CA110, &_s10CodingKeysON_114);
    atomic_store(result, (unint64_t *)&qword_1ED3CB930);
  }
  return result;
}

unint64_t sub_1BA825238()
{
  unint64_t result;

  result = qword_1ED3CB928;
  if (!qword_1ED3CB928)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BAB80, &_s10CodingKeysON_119);
    atomic_store(result, (unint64_t *)&qword_1ED3CB928);
  }
  return result;
}

unint64_t sub_1BA82527C()
{
  unint64_t result;

  result = qword_1ED3CB920;
  if (!qword_1ED3CB920)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BABA8, &_s10CodingKeysON_119);
    atomic_store(result, (unint64_t *)&qword_1ED3CB920);
  }
  return result;
}

unint64_t sub_1BA8252C8()
{
  unint64_t result;

  result = qword_1ED39BA68;
  if (!qword_1ED39BA68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890538, &type metadata for FormatDecorationCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39BA68);
  }
  return result;
}

unint64_t sub_1BA82530C()
{
  unint64_t result;

  result = qword_1ED39BA60;
  if (!qword_1ED39BA60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890560, &type metadata for FormatDecorationCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39BA60);
  }
  return result;
}

uint64_t sub_1BA825350(_QWORD *a1)
{
  return FormatCustomItemDefinition.encode(to:)(a1);
}

unint64_t sub_1BA825364()
{
  unint64_t result;

  result = qword_1ED39E808;
  if (!qword_1ED39E808)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCustomItemDefinition, &type metadata for FormatCustomItemDefinition);
    atomic_store(result, (unint64_t *)&qword_1ED39E808);
  }
  return result;
}

unint64_t sub_1BA8253B0()
{
  unint64_t result;

  result = qword_1ED3CB840;
  if (!qword_1ED3CB840)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B83C0, &_s10CodingKeysON_147);
    atomic_store(result, (unint64_t *)&qword_1ED3CB840);
  }
  return result;
}

unint64_t sub_1BA8253F4()
{
  unint64_t result;

  result = qword_1ED3CB838;
  if (!qword_1ED3CB838)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B83E8, &_s10CodingKeysON_147);
    atomic_store(result, (unint64_t *)&qword_1ED3CB838);
  }
  return result;
}

void sub_1BA825438()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA8254EC()
{
  unint64_t result;

  result = qword_1ED3CB770;
  if (!qword_1ED3CB770)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7C58, &_s10CodingKeysON_155);
    atomic_store(result, (unint64_t *)&qword_1ED3CB770);
  }
  return result;
}

unint64_t sub_1BA825530()
{
  unint64_t result;

  result = qword_1ED3CB768;
  if (!qword_1ED3CB768)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7C80, &_s10CodingKeysON_155);
    atomic_store(result, (unint64_t *)&qword_1ED3CB768);
  }
  return result;
}

uint64_t sub_1BA825574()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA8255EC()
{
  unint64_t result;

  result = qword_1ED3CB6B8;
  if (!qword_1ED3CB6B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B69D8, &_s10CodingKeysON_170);
    atomic_store(result, (unint64_t *)&qword_1ED3CB6B8);
  }
  return result;
}

unint64_t sub_1BA825630()
{
  unint64_t result;

  result = qword_1ED3CB6B0;
  if (!qword_1ED3CB6B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6A00, &_s10CodingKeysON_170);
    atomic_store(result, (unint64_t *)&qword_1ED3CB6B0);
  }
  return result;
}

void sub_1BA825674()
{
  __asm { BR              X10 }
}

uint64_t sub_1BA8256C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t result;
  double v5;
  uint64_t v6;

  if (v1)
  {
    *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEF040];
    swift_bridgeObjectRetain();
    sub_1BB86DD80();
    v3 = sub_1BA72BED4(v6, v1);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return __swift_deallocate_boxed_opaque_existential_0(v0);
    }
    else
    {
      v5 = v3;
      swift_release();
      *(double *)v0 = v5;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(_OWORD *)v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  return result;
}

unint64_t sub_1BA825800()
{
  unint64_t result;

  result = qword_1ED3CB680;
  if (!qword_1ED3CB680)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAccessibilityContent, &type metadata for FormatAccessibilityContent);
    atomic_store(result, (unint64_t *)&qword_1ED3CB680);
  }
  return result;
}

unint64_t sub_1BA825844(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA5DD9BC();
  a1[2] = sub_1BA5E4984();
  result = sub_1BB5E6404();
  a1[3] = result;
  return result;
}

uint64_t sub_1BA825878()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedEngagementBanner();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA8258E0()
{
  return sub_1BA4A2870(&qword_1ED3CB668, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey, (uint64_t)&unk_1BB915FCC);
}

uint64_t sub_1BA82590C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GenericDataVisualization();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceManager()
{
  return objc_opt_self();
}

void sub_1BA82599C()
{
  unint64_t v0;

  sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for SportsDataServiceResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SportsDataServiceEndpoint()
{
  return objc_opt_self();
}

void sub_1BA825AA0()
{
  unint64_t v0;

  sub_1BA4B07F0(319, qword_1ED3D53F0, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PuzzleEmbedViewController()
{
  uint64_t result;

  result = qword_1ED3D5A30;
  if (!qword_1ED3D5A30)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for OpenChannelCommandContext()
{
  return &type metadata for OpenChannelCommandContext;
}

uint64_t type metadata accessor for InternalErrorViewRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA825C2C()
{
  unint64_t result;

  result = qword_1ED3B7B98;
  if (!qword_1ED3B7B98)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeAlternative, &type metadata for FormatTextNodeAlternative);
    atomic_store(result, (unint64_t *)&qword_1ED3B7B98);
  }
  return result;
}

unint64_t sub_1BA825C70()
{
  unint64_t result;

  result = qword_1ED39BA28;
  if (!qword_1ED39BA28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeAlternative, &type metadata for FormatTextNodeAlternative);
    atomic_store(result, (unint64_t *)&qword_1ED39BA28);
  }
  return result;
}

unint64_t sub_1BA825CBC()
{
  unint64_t result;

  result = qword_1ED3CB278;
  if (!qword_1ED3CB278)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B10A0, &_s10CodingKeysON_246);
    atomic_store(result, (unint64_t *)&qword_1ED3CB278);
  }
  return result;
}

unint64_t sub_1BA825D00()
{
  unint64_t result;

  result = qword_1ED3CB270;
  if (!qword_1ED3CB270)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B10C8, &_s10CodingKeysON_246);
    atomic_store(result, (unint64_t *)&qword_1ED3CB270);
  }
  return result;
}

uint64_t sub_1BA825D44()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedSponsorshipBannerAd();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA825DB4()
{
  unint64_t result;

  result = qword_1ED3CB258;
  if (!qword_1ED3CB258)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0570, &_s10CodingKeysON_252);
    atomic_store(result, (unint64_t *)&qword_1ED3CB258);
  }
  return result;
}

unint64_t sub_1BA825DF8()
{
  unint64_t result;

  result = qword_1ED3CB250;
  if (!qword_1ED3CB250)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0598, &_s10CodingKeysON_252);
    atomic_store(result, (unint64_t *)&qword_1ED3CB250);
  }
  return result;
}

void sub_1BA825E3C()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, &qword_1ED3BE290, (void (*)(uint64_t))type metadata accessor for FormatPostPurchase);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FormatPurchaseLandingPage()
{
  uint64_t result;

  result = qword_1ED3BB1A8;
  if (!qword_1ED3BB1A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA825EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB66B870(a1, a2, a3, a4, (void (*)(uint64_t))sub_1BA55A020, sub_1BA4B9718, (uint64_t (*)(uint64_t, uint64_t))sub_1BA4F6D50, (void (*)(_QWORD))type metadata accessor for FormatGroupNodeMaskStyle, (void (*)(uint64_t))sub_1BA7AE9C4);
}

uint64_t sub_1BA825F44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1BA896394(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1BA825F5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1BA8964E0(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1BA825F74(_QWORD *a1)
{
  return FormatIssueCoverNodeStyle.encode(to:)(a1);
}

unint64_t sub_1BA825F94()
{
  unint64_t result;

  result = qword_1ED3A76D8;
  if (!qword_1ED3A76D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverNodeStyle.Selector, &type metadata for FormatIssueCoverNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A76D8);
  }
  return result;
}

unint64_t sub_1BA825FD8()
{
  unint64_t result;

  result = qword_1ED3A76D0;
  if (!qword_1ED3A76D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverNodeStyle.Selector, &type metadata for FormatIssueCoverNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A76D0);
  }
  return result;
}

unint64_t sub_1BA826024()
{
  unint64_t result;

  result = qword_1ED3A76C8;
  if (!qword_1ED3A76C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3198, &_s10CodingKeysON_212);
    atomic_store(result, (unint64_t *)&qword_1ED3A76C8);
  }
  return result;
}

unint64_t sub_1BA826068()
{
  unint64_t result;

  result = qword_1ED3A76C0;
  if (!qword_1ED3A76C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B31C0, &_s10CodingKeysON_212);
    atomic_store(result, (unint64_t *)&qword_1ED3A76C0);
  }
  return result;
}

unint64_t sub_1BA8260B4()
{
  unint64_t result;

  result = qword_1ED3A76B0;
  if (!qword_1ED3A76B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3108, &_s10CodingKeysON_213);
    atomic_store(result, (unint64_t *)&qword_1ED3A76B0);
  }
  return result;
}

unint64_t sub_1BA8260F8()
{
  unint64_t result;

  result = qword_1ED3A76A8;
  if (!qword_1ED3A76A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3130, &_s10CodingKeysON_213);
    atomic_store(result, (unint64_t *)&qword_1ED3A76A8);
  }
  return result;
}

unint64_t sub_1BA826144()
{
  unint64_t result;

  result = qword_1ED3CB218;
  if (!qword_1ED3CB218)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B98B8, &_s10CodingKeysON_125);
    atomic_store(result, (unint64_t *)&qword_1ED3CB218);
  }
  return result;
}

unint64_t sub_1BA826188()
{
  unint64_t result;

  result = qword_1ED3CB210;
  if (!qword_1ED3CB210)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B98E0, &_s10CodingKeysON_125);
    atomic_store(result, (unint64_t *)&qword_1ED3CB210);
  }
  return result;
}

unint64_t sub_1BA8261D4()
{
  unint64_t result;

  result = qword_1ED3CB158;
  if (!qword_1ED3CB158)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B74B8, &_s10CodingKeysON_161);
    atomic_store(result, (unint64_t *)&qword_1ED3CB158);
  }
  return result;
}

unint64_t sub_1BA826218()
{
  unint64_t result;

  result = qword_1ED3CB150;
  if (!qword_1ED3CB150)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B74E0, &_s10CodingKeysON_161);
    atomic_store(result, (unint64_t *)&qword_1ED3CB150);
  }
  return result;
}

unint64_t sub_1BA826260()
{
  unint64_t result;

  result = qword_1ED3B7B60;
  if (!qword_1ED3B7B60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeStateMask, &type metadata for FormatButtonNodeStateMask);
    atomic_store(result, (unint64_t *)&qword_1ED3B7B60);
  }
  return result;
}

unint64_t sub_1BA8262A4()
{
  unint64_t result;

  result = qword_1ED3B7B58;
  if (!qword_1ED3B7B58)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeStateMask, &type metadata for FormatButtonNodeStateMask);
    atomic_store(result, (unint64_t *)&qword_1ED3B7B58);
  }
  return result;
}

unint64_t sub_1BA8262E8()
{
  unint64_t result;

  result = qword_1ED3B7B50;
  if (!qword_1ED3B7B50)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeStateMask, &type metadata for FormatButtonNodeStateMask);
    atomic_store(result, (unint64_t *)&qword_1ED3B7B50);
  }
  return result;
}

unint64_t sub_1BA82632C()
{
  unint64_t result;

  result = qword_1ED3B01B0;
  if (!qword_1ED3B01B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeStateMask, &type metadata for FormatButtonNodeStateMask);
    atomic_store(result, (unint64_t *)&qword_1ED3B01B0);
  }
  return result;
}

unint64_t sub_1BA826378()
{
  unint64_t result;

  result = qword_1ED3CB140;
  if (!qword_1ED3CB140)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7058, &_s10CodingKeysON_165);
    atomic_store(result, (unint64_t *)&qword_1ED3CB140);
  }
  return result;
}

unint64_t sub_1BA8263BC()
{
  unint64_t result;

  result = qword_1ED3CB138;
  if (!qword_1ED3CB138)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7080, &_s10CodingKeysON_165);
    atomic_store(result, (unint64_t *)&qword_1ED3CB138);
  }
  return result;
}

uint64_t type metadata accessor for ShareAttributionViewItem()
{
  return objc_opt_self();
}

uint64_t sub_1BA826440()
{
  swift_getObjectType();
  return sub_1BB86E41C();
}

uint64_t sub_1BA82647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_1BA8265E4;
  *(_QWORD *)(v1 + 24) = v0;
  sub_1BB86E050();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_1BB247DCC;
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain_n();
  swift_retain();
  sub_1BB86E044();
  swift_release_n();
  swift_release();
  return swift_release();
}

uint64_t sub_1BA826550()
{
  swift_getObjectType();
  return sub_1BB86E3BC();
}

uint64_t sub_1BA826578()
{
  swift_getObjectType();
  return sub_1BB86E3C8();
}

void sub_1BA8265E4(char a1)
{
  uint64_t v1;

  sub_1BA4F8FC4(a1, v1);
}

uint64_t sub_1BA8265EC()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for ImagePersistenceProvider()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t type metadata accessor for GenericDataVisualization()
{
  uint64_t result;

  result = qword_1ED3CAFC8;
  if (!qword_1ED3CAFC8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FormatVisibilityRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA8266B0()
{
  unint64_t result;

  result = qword_1ED3CAFC0;
  if (!qword_1ED3CAFC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerContent, &type metadata for FormatVideoPlayerContent);
    atomic_store(result, (unint64_t *)&qword_1ED3CAFC0);
  }
  return result;
}

unint64_t sub_1BA8266F4()
{
  unint64_t result;

  result = qword_1ED3BF230;
  if (!qword_1ED3BF230)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerContent, &type metadata for FormatVideoPlayerContent);
    atomic_store(result, (unint64_t *)&qword_1ED3BF230);
  }
  return result;
}

unint64_t sub_1BA826738()
{
  unint64_t result;

  result = qword_1ED3BF228;
  if (!qword_1ED3BF228)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerContent, &type metadata for FormatVideoPlayerContent);
    atomic_store(result, (unint64_t *)&qword_1ED3BF228);
  }
  return result;
}

unint64_t sub_1BA82677C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA8266F4();
  a1[2] = sub_1BA826738();
  result = sub_1BB19AE5C();
  a1[3] = result;
  return result;
}

uint64_t sub_1BA8267B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BAA0133C(a1, a2, a3, type metadata accessor for FormatVersionRequirement.Value);
}

unint64_t sub_1BA8267C4()
{
  unint64_t result;

  result = qword_1ED3CADF0;
  if (!qword_1ED3CADF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2388, &_s10CodingKeysON_18);
    atomic_store(result, (unint64_t *)&qword_1ED3CADF0);
  }
  return result;
}

unint64_t sub_1BA826808()
{
  unint64_t result;

  result = qword_1ED3CADE8;
  if (!qword_1ED3CADE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C23B0, &_s10CodingKeysON_18);
    atomic_store(result, (unint64_t *)&qword_1ED3CADE8);
  }
  return result;
}

uint64_t sub_1BA82684C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatSlotDefinition();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1BA8268BC()
{
  unint64_t result;

  result = qword_1ED3A7440;
  if (!qword_1ED3A7440)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BFDC0, &_s10CodingTypeON_28);
    atomic_store(result, (unint64_t *)&qword_1ED3A7440);
  }
  return result;
}

unint64_t sub_1BA826908()
{
  unint64_t result;

  result = qword_1ED3CAD20;
  if (!qword_1ED3CAD20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B04E0, &_s10CodingKeysON_253);
    atomic_store(result, (unint64_t *)&qword_1ED3CAD20);
  }
  return result;
}

unint64_t sub_1BA82694C()
{
  unint64_t result;

  result = qword_1ED3CAD18;
  if (!qword_1ED3CAD18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0508, &_s10CodingKeysON_253);
    atomic_store(result, (unint64_t *)&qword_1ED3CAD18);
  }
  return result;
}

uint64_t type metadata accessor for FormatProgressCircleView()
{
  return objc_opt_self();
}

uint64_t sub_1BA8269B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatPercentFillSpacing.init(from:)(a1, a2);
}

unint64_t sub_1BA8269C4()
{
  unint64_t result;

  result = qword_1ED3BF218;
  if (!qword_1ED3BF218)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSpacing, &type metadata for FormatPercentFillSpacing);
    atomic_store(result, (unint64_t *)&qword_1ED3BF218);
  }
  return result;
}

uint64_t FormatPercentFillSpacing.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA4DFF1C(a1, (void (*)(uint64_t))sub_1BA826AC4, (uint64_t)&_s10CodingTypeON_185, (uint64_t)&unk_1E724BFC0, a2);
}

uint64_t sub_1BA826A34()
{
  sub_1BA826B08();
  return sub_1BB872D60();
}

uint64_t sub_1BA826A90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA609110();
  *a1 = result;
  return result;
}

unint64_t sub_1BA826AC4()
{
  unint64_t result;

  result = qword_1ED3CAD08;
  if (!qword_1ED3CAD08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D20B8, &_s10CodingTypeON_185);
    atomic_store(result, (unint64_t *)&qword_1ED3CAD08);
  }
  return result;
}

unint64_t sub_1BA826B08()
{
  unint64_t result;

  result = qword_1ED3CAD00;
  if (!qword_1ED3CAD00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8AFD88, &_s10CodingTypeON_185);
    atomic_store(result, (unint64_t *)&qword_1ED3CAD00);
  }
  return result;
}

unint64_t sub_1BA826B54()
{
  unint64_t result;

  result = qword_1ED3CACF8;
  if (!qword_1ED3CACF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E0320, &type metadata for FormatOptionCompareValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3CACF8);
  }
  return result;
}

unint64_t sub_1BA826B98()
{
  unint64_t result;

  result = qword_1ED3CACF0;
  if (!qword_1ED3CACF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E0348, &type metadata for FormatOptionCompareValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3CACF0);
  }
  return result;
}

unint64_t sub_1BA826BDC()
{
  unint64_t result;

  result = qword_1ED3B7878;
  if (!qword_1ED3B7878)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalizationString, &type metadata for FormatLocalizationString);
    atomic_store(result, (unint64_t *)&qword_1ED3B7878);
  }
  return result;
}

unint64_t sub_1BA826C20()
{
  unint64_t result;

  result = qword_1ED39B918;
  if (!qword_1ED39B918)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalizationString, &type metadata for FormatLocalizationString);
    atomic_store(result, (unint64_t *)&qword_1ED39B918);
  }
  return result;
}

unint64_t sub_1BA826C64()
{
  unint64_t result;

  result = qword_1ED3B7870;
  if (!qword_1ED3B7870)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalizationString.Selector, &type metadata for FormatLocalizationString.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3B7870);
  }
  return result;
}

unint64_t sub_1BA826CA8()
{
  unint64_t result;

  result = qword_1ED3B7868;
  if (!qword_1ED3B7868)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalizationString.Selector, &type metadata for FormatLocalizationString.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3B7868);
  }
  return result;
}

unint64_t sub_1BA826CF4()
{
  unint64_t result;

  result = qword_1ED3CACD8;
  if (!qword_1ED3CACD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC488, &_s10CodingKeysON_98);
    atomic_store(result, (unint64_t *)&qword_1ED3CACD8);
  }
  return result;
}

unint64_t sub_1BA826D38()
{
  unint64_t result;

  result = qword_1ED3CACD0;
  if (!qword_1ED3CACD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC460, &_s10CodingKeysON_98);
    atomic_store(result, (unint64_t *)&qword_1ED3CACD0);
  }
  return result;
}

unint64_t sub_1BA826D84()
{
  unint64_t result;

  result = qword_1ED3CACC0;
  if (!qword_1ED3CACC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC3F8, &_s10CodingKeysON_99);
    atomic_store(result, (unint64_t *)&qword_1ED3CACC0);
  }
  return result;
}

unint64_t sub_1BA826DC8()
{
  unint64_t result;

  result = qword_1ED3CACB8;
  if (!qword_1ED3CACB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC3D0, &_s10CodingKeysON_99);
    atomic_store(result, (unint64_t *)&qword_1ED3CACB8);
  }
  return result;
}

void sub_1BA826E0C(void *a1)
{
  sub_1BA4B8EF0();

}

uint64_t sub_1BA826E30()
{
  return sub_1BA4B5BAC();
}

uint64_t FormatLayoutViewDebugger.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t FormatLayoutViewDebugger.init(block:)(uint64_t a1, uint64_t a2)
{
  return sub_1BA826E88(a1, a2, (uint64_t)&unk_1E72FC0A8, (uint64_t)sub_1BB2CDDDC);
}

{
  return sub_1BA826E88(a1, a2, (uint64_t)&unk_1E72FC058, (uint64_t)sub_1BB2CDDD8);
}

uint64_t sub_1BA826E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v4 + 16) = a4;
  *(_QWORD *)(v4 + 24) = v8;
  return v4;
}

_QWORD *_s8NewsFeed24FormatLayeredMediaFilterO10MonochromeVwxx_0(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if ((~*result & 0xF000000000000007) != 0)
    result = (_QWORD *)swift_release();
  if ((~v1[1] & 0xF000000000000007) != 0)
    result = (_QWORD *)swift_release();
  if ((~v1[2] & 0xF000000000000007) != 0)
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *sub_1BA826F54(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0)
    swift_retain();
  *a1 = v4;
  v5 = a2[1];
  if ((~v5 & 0xF000000000000007) != 0)
    swift_retain();
  a1[1] = v5;
  v6 = a2[2];
  if ((~v6 & 0xF000000000000007) != 0)
    swift_retain();
  a1[2] = v6;
  return a1;
}

uint64_t sub_1BA826FD0(_QWORD *a1)
{
  return FormatLayeredMediaFilter.encode(to:)(a1);
}

unint64_t sub_1BA826FE4()
{
  unint64_t result;

  result = qword_1ED3CABD8;
  if (!qword_1ED3CABD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaFilter, &type metadata for FormatLayeredMediaFilter);
    atomic_store(result, (unint64_t *)&qword_1ED3CABD8);
  }
  return result;
}

unint64_t sub_1BA827028()
{
  unint64_t result;

  result = qword_1ED3A7410;
  if (!qword_1ED3A7410)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaFilter, &type metadata for FormatLayeredMediaFilter);
    atomic_store(result, (unint64_t *)&qword_1ED3A7410);
  }
  return result;
}

uint64_t sub_1BA82706C(_QWORD *a1)
{
  return FormatLayeredMediaFilter.Monochrome.encode(to:)(a1);
}

unint64_t sub_1BA827080()
{
  unint64_t result;

  result = qword_1ED3A7408;
  if (!qword_1ED3A7408)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaFilter.Monochrome, &type metadata for FormatLayeredMediaFilter.Monochrome);
    atomic_store(result, (unint64_t *)&qword_1ED3A7408);
  }
  return result;
}

unint64_t sub_1BA8270CC()
{
  unint64_t result;

  result = qword_1ED3CABC8;
  if (!qword_1ED3CABC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBE18, &_s10CodingKeysON_104);
    atomic_store(result, (unint64_t *)&qword_1ED3CABC8);
  }
  return result;
}

unint64_t sub_1BA827110()
{
  unint64_t result;

  result = qword_1ED3CABC0;
  if (!qword_1ED3CABC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBE40, &_s10CodingKeysON_104);
    atomic_store(result, (unint64_t *)&qword_1ED3CABC0);
  }
  return result;
}

unint64_t sub_1BA827154()
{
  unint64_t result;

  result = qword_1ED3CABB0;
  if (!qword_1ED3CABB0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageRenderingMode, &type metadata for FormatImageRenderingMode);
    atomic_store(result, (unint64_t *)&qword_1ED3CABB0);
  }
  return result;
}

unint64_t sub_1BA827198(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA699110();
  a1[2] = sub_1BA665D14();
  result = sub_1BB6846E8();
  a1[3] = result;
  return result;
}

id sub_1BA8271CC@<X0>(id result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v9 = *(_QWORD *)(v6 + 56);
  v10 = *(_QWORD *)(v6 + 64);
  v12 = *(_QWORD *)(v6 + 72);
  v11 = *(_QWORD *)(v6 + 80);
  v13 = *(_QWORD *)(v6 + 88);
  v14 = *(_QWORD *)(v6 + 96);
  v15 = *(_QWORD *)(v6 + 104);
  v16 = *(_QWORD *)(v6 + 112);
  switch(*(_BYTE *)(v6 + 120))
  {
    case 0:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 49) = 0u;
      result = (id)sub_1BA7AF9FC(v9, v10, v12, v11, v13, v14, v15, v16, 0);
      break;
    case 1:
      v38[0] = *(_QWORD *)(v6 + 56);
      v36 = v13;
      v37 = v14;
      v35 = v11;
      sub_1BA7AF9FC(v9, v10, v12, v11, v13, v14, v15, v16, 1);
      sub_1BB86DD80();
      v18 = sub_1BB362E48();
      swift_release();
      result = (id)sub_1BA7AF9E4(v9, v10, v12, v35, v36, v37, v15, v16, 1u);
      if (!v7)
      {
        *(_QWORD *)a2 = v18;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      break;
    case 2:
      v34 = &v32;
      v38[0] = (uint64_t)result;
      MEMORY[0x1E0C80A78](result);
      v31[2] = v38;
      v36 = v19;
      v37 = v20;
      v35 = v21;
      sub_1BA7AF9FC(v9, v10, v12, v21, v19, v20, v15, v16, 2);
      v22 = sub_1BA8A1234((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))sub_1BA773610, (uint64_t)v31, v9);
      if (!v7)
      {
        v33 = v22;
        swift_bridgeObjectRetain();
        if (v15)
        {
          v23 = v16;
          sub_1BB674700(v15, v16, v38);
          v25 = v9;
          v27 = v35;
          v26 = v36;
          v28 = v37;
          result = (id)sub_1BA7AF9E4(v25, v10, v12, v35, v36, v37, v15, v23, 2u);
          v29 = v38[0];
          v30 = v38[1];
        }
        else
        {
          v24 = v9;
          v26 = v36;
          v28 = v37;
          v30 = v16;
          v27 = v35;
          result = (id)sub_1BA7AF9E4(v24, v10, v12, v35, v36, v37, 0, v30, 2u);
          v29 = 0;
        }
        *(_QWORD *)a2 = v33;
        *(_QWORD *)(a2 + 8) = v10;
        *(_QWORD *)(a2 + 16) = v12;
        *(_QWORD *)(a2 + 24) = v27;
        *(_QWORD *)(a2 + 32) = v26;
        *(_QWORD *)(a2 + 40) = v28;
        *(_QWORD *)(a2 + 48) = v29;
        *(_QWORD *)(a2 + 56) = v30;
        v17 = 2;
        goto LABEL_9;
      }
      result = (id)sub_1BA7AF9E4(v9, v10, v12, v35, v36, v37, v15, v16, 2u);
      break;
    case 3:
      result = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, a3, a4, a5, a6);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      v17 = 1;
      goto LABEL_9;
    default:
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      v17 = 3;
LABEL_9:
      *(_BYTE *)(a2 + 64) = v17;
      break;
  }
  return result;
}

unint64_t sub_1BA82759C()
{
  unint64_t result;

  result = qword_1ED3A13E0;
  if (!qword_1ED3A13E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D5FA0, &type metadata for FormatGroupNodeMaskStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A13E0);
  }
  return result;
}

unint64_t sub_1BA8275E0()
{
  unint64_t result;

  result = qword_1ED3CAAC0;
  if (!qword_1ED3CAAC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeMaskStyle.Selector, &type metadata for FormatGroupNodeMaskStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CAAC0);
  }
  return result;
}

unint64_t sub_1BA827624()
{
  unint64_t result;

  result = qword_1ED3CAAB8;
  if (!qword_1ED3CAAB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeMaskStyle.Selector, &type metadata for FormatGroupNodeMaskStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CAAB8);
  }
  return result;
}

unint64_t sub_1BA827668(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA8275E0();
  result = sub_1BA827624();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA82769C()
{
  unint64_t result;

  result = qword_1ED3CAAB0;
  if (!qword_1ED3CAAB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA200, &_s10CodingKeysON_122);
    atomic_store(result, (unint64_t *)&qword_1ED3CAAB0);
  }
  return result;
}

unint64_t sub_1BA8276E0()
{
  unint64_t result;

  result = qword_1ED3CAAA8;
  if (!qword_1ED3CAAA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA228, &_s10CodingKeysON_122);
    atomic_store(result, (unint64_t *)&qword_1ED3CAAA8);
  }
  return result;
}

uint64_t FormatGroupNodeMaskStyle.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  uint64_t v80;

  v4 = v2;
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain_n();
    v10 = *(_OWORD *)(v8 + 176);
    v76 = *(_OWORD *)(v8 + 160);
    v77 = v10;
    v78 = *(_OWORD *)(v8 + 192);
    v79 = *(_BYTE *)(v8 + 208);
    v11 = *(_OWORD *)(v8 + 112);
    v72 = *(_OWORD *)(v8 + 96);
    v73 = v11;
    v12 = *(_OWORD *)(v8 + 144);
    v74 = *(_OWORD *)(v8 + 128);
    v75 = v12;
    v13 = *(_OWORD *)(v8 + 48);
    v68 = *(_OWORD *)(v8 + 32);
    v69 = v13;
    v14 = *(_OWORD *)(v8 + 80);
    v70 = *(_OWORD *)(v8 + 64);
    v71 = v14;
    sub_1BAC68298((uint64_t)&v68);
    FormatGroupNodeMaskStyle.Selector.bind(binder:context:)(a1, a2);
    if (v3)
    {
      sub_1BAC68394((uint64_t)&v68);
      return swift_bridgeObjectRelease_n();
    }
    for (i = 216; ; i += 184)
    {
      sub_1BAC68394((uint64_t)&v68);
      if (!--v9)
        break;
      v16 = *(_OWORD *)(v8 + i);
      v17 = *(_OWORD *)(v8 + i + 16);
      v18 = *(_OWORD *)(v8 + i + 48);
      v70 = *(_OWORD *)(v8 + i + 32);
      v71 = v18;
      v68 = v16;
      v69 = v17;
      v19 = *(_OWORD *)(v8 + i + 64);
      v20 = *(_OWORD *)(v8 + i + 80);
      v21 = *(_OWORD *)(v8 + i + 112);
      v74 = *(_OWORD *)(v8 + i + 96);
      v75 = v21;
      v72 = v19;
      v73 = v20;
      v22 = *(_OWORD *)(v8 + i + 128);
      v23 = *(_OWORD *)(v8 + i + 144);
      v24 = *(_OWORD *)(v8 + i + 160);
      v79 = *(_BYTE *)(v8 + i + 176);
      v77 = v23;
      v78 = v24;
      v76 = v22;
      sub_1BAC68298((uint64_t)&v68);
      FormatGroupNodeMaskStyle.Selector.bind(binder:context:)(a1, a2);
    }
    v25 = a1;
    result = swift_bridgeObjectRelease_n();
  }
  else
  {
    v25 = a1;
  }
  v26 = *(unsigned __int8 *)(v4 + 120);
  if (v26 != 255)
  {
    v28 = *(_QWORD *)(v4 + 56);
    v27 = *(_QWORD *)(v4 + 64);
    v30 = *(_QWORD *)(v4 + 72);
    v29 = *(_QWORD *)(v4 + 80);
    v31 = *(_QWORD *)(v4 + 88);
    v32 = *(_QWORD *)(v4 + 96);
    v33 = *(_QWORD *)(v4 + 104);
    v34 = *(_QWORD *)(v4 + 112);
    *(_QWORD *)&v68 = v28;
    *((_QWORD *)&v68 + 1) = v27;
    *(_QWORD *)&v69 = v30;
    *((_QWORD *)&v69 + 1) = v29;
    *(_QWORD *)&v70 = v31;
    *((_QWORD *)&v70 + 1) = v32;
    *(_QWORD *)&v71 = v33;
    *((_QWORD *)&v71 + 1) = v34;
    LOBYTE(v72) = v26;
    v60 = v29;
    v62 = v31;
    v64 = v32;
    v66 = v33;
    v80 = v34;
    sub_1BA7AF9FC(v28, v27, v30, v29, v31, v32, v33, v34, v26);
    FormatGroupNodeMaskPath.bind(binder:context:)();
    if (v3)
      return sub_1BA7AF9E4(v28, v27, v30, v60, v62, v64, v66, v80, v26);
    result = sub_1BA7AF9E4(v28, v27, v30, v60, v62, v64, v66, v80, v26);
  }
  v35 = *(_QWORD *)(v4 + 128);
  if (!v35 || (result = sub_1BAB73D7C(v25, a2, v35), !v3))
  {
    v36 = *(unsigned __int8 *)(v4 + 216);
    if (v36 != 254)
    {
      v37 = a2;
      v58 = *(_QWORD *)(v4 + 136);
      v59 = *(_QWORD *)(v4 + 144);
      v38 = *(_QWORD *)(v4 + 168);
      v65 = *(_QWORD *)(v4 + 160);
      v67 = *(_QWORD *)(v4 + 152);
      v61 = *(_QWORD *)(v4 + 184);
      v63 = *(_QWORD *)(v4 + 176);
      v39 = *(_QWORD *)(v4 + 200);
      v80 = *(_QWORD *)(v4 + 192);
      v40 = *(_QWORD *)(v4 + 208);
      *(_QWORD *)&v68 = v38;
      swift_retain();
      v41 = v25;
      FormatColor.bind(binder:context:)();
      if (v3)
      {
        return sub_1BA6E8A78(v58, v59, v67, v65, v38, v63, v61, v80, v39, v40, v36);
      }
      else
      {
        v43 = v65;
        v42 = v67;
        v44 = v61;
        v45 = v80;
        switch(v36)
        {
          case 0:
            v56 = 0;
            goto LABEL_26;
          case 1:
            sub_1BABD5EE8(v25, v37);
            v50 = 1;
            goto LABEL_25;
          case 2:
            sub_1BABD5EE8(v25, v37);
            v57 = v39;
            v52 = v80;
            sub_1BABD5EE8(v41, v37);
            v53 = 2;
            goto LABEL_29;
          case 3:
            sub_1BABD5EE8(v25, v37);
            v57 = v39;
            v52 = v80;
            sub_1BABD5EE8(v41, v37);
            v53 = 3;
            goto LABEL_29;
          case 4:
            sub_1BABD5EE8(v25, v37);
            v50 = 4;
LABEL_25:
            v56 = v50;
LABEL_26:
            v46 = v58;
            v54 = v39;
            v55 = v40;
            v47 = v59;
            v42 = v67;
            v43 = v65;
            v48 = v38;
            v49 = v63;
            v44 = v61;
            goto LABEL_27;
          case 5:
            sub_1BABD5EE8(v25, v37);
            v57 = v39;
            v52 = v80;
            sub_1BABD5EE8(v41, v37);
            v53 = 5;
LABEL_29:
            v56 = v53;
            v46 = v58;
            v54 = v57;
            v55 = v40;
            v47 = v59;
            v42 = v67;
            v43 = v65;
            v48 = v38;
            v49 = v63;
            v44 = v61;
            v51 = v52;
            goto LABEL_30;
          default:
            v56 = -1;
            v46 = v58;
            v54 = v39;
            v55 = v40;
            v47 = v59;
            v48 = v67;
            v49 = v63;
LABEL_27:
            v51 = v45;
LABEL_30:
            result = sub_1BA6E8A78(v46, v47, v42, v43, v48, v49, v44, v51, v54, v55, v56);
            break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1BA827CA0()
{
  unint64_t result;

  result = qword_1ED3CAA98;
  if (!qword_1ED3CAA98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA170, &_s10CodingKeysON_123);
    atomic_store(result, (unint64_t *)&qword_1ED3CAA98);
  }
  return result;
}

unint64_t sub_1BA827CE4()
{
  unint64_t result;

  result = qword_1ED3CAA90;
  if (!qword_1ED3CAA90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA198, &_s10CodingKeysON_123);
    atomic_store(result, (unint64_t *)&qword_1ED3CAA90);
  }
  return result;
}

unint64_t sub_1BA827D28()
{
  unint64_t result;

  result = qword_1ED3B7838;
  if (!qword_1ED3B7838)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93AADC, &type metadata for FormatGroupLayoutFactory);
    atomic_store(result, (unint64_t *)&qword_1ED3B7838);
  }
  return result;
}

unint64_t sub_1BA827D6C()
{
  unint64_t result;

  result = qword_1ED3B7830;
  if (!qword_1ED3B7830)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93AB04, &type metadata for FormatGroupLayoutFactory);
    atomic_store(result, (unint64_t *)&qword_1ED3B7830);
  }
  return result;
}

unint64_t sub_1BA827DB0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA827D28();
  result = sub_1BA827D6C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BA827DDC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA827E9C(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B7760, (uint64_t (*)(uint64_t))type metadata accessor for FormatGroupLayoutFactory.Bound, (uint64_t)&unk_1BB93AB2C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA827ED8(_QWORD *a1)
{
  return FormatFlexibleExpression.encode(to:)(a1);
}

unint64_t sub_1BA827EEC()
{
  unint64_t result;

  result = qword_1ED39B910;
  if (!qword_1ED39B910)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFlexibleExpression, &type metadata for FormatFlexibleExpression);
    atomic_store(result, (unint64_t *)&qword_1ED39B910);
  }
  return result;
}

uint64_t sub_1BA827F30(_QWORD *a1)
{
  return FormatFlexibleExpression.Direction.encode(to:)(a1);
}

unint64_t sub_1BA827F44()
{
  unint64_t result;

  result = qword_1ED39B908;
  if (!qword_1ED39B908)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFlexibleExpression.Direction, &type metadata for FormatFlexibleExpression.Direction);
    atomic_store(result, (unint64_t *)&qword_1ED39B908);
  }
  return result;
}

unint64_t sub_1BA827F90()
{
  unint64_t result;

  result = qword_1ED3D2C10;
  if (!qword_1ED3D2C10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8DF0, &_s10CodingKeysON_140);
    atomic_store(result, (unint64_t *)&qword_1ED3D2C10);
  }
  return result;
}

unint64_t sub_1BA827FD4()
{
  unint64_t result;

  result = qword_1ED3D2C08;
  if (!qword_1ED3D2C08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8E18, &_s10CodingKeysON_140);
    atomic_store(result, (unint64_t *)&qword_1ED3D2C08);
  }
  return result;
}

unint64_t sub_1BA828020()
{
  unint64_t result;

  result = qword_1ED3CAA80;
  if (!qword_1ED3CAA80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8B40, &_s10CodingKeysON_142);
    atomic_store(result, (unint64_t *)&qword_1ED3CAA80);
  }
  return result;
}

unint64_t sub_1BA828064()
{
  unint64_t result;

  result = qword_1ED3CAA78;
  if (!qword_1ED3CAA78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8B68, &_s10CodingKeysON_142);
    atomic_store(result, (unint64_t *)&qword_1ED3CAA78);
  }
  return result;
}

uint64_t type metadata accessor for FormatCustomNodeRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FormatCommandActionValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatCommandActionValue);
}

uint64_t type metadata accessor for FormatCommandActionValue.CaseValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatCommandActionValue.CaseValue);
}

unint64_t sub_1BA8280E8()
{
  unint64_t result;

  result = qword_1ED3A73C8;
  if (!qword_1ED3A73C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B72D0, &_s10CodingKeysON_162);
    atomic_store(result, (unint64_t *)&qword_1ED3A73C8);
  }
  return result;
}

unint64_t sub_1BA82812C()
{
  unint64_t result;

  result = qword_1ED3A73C0;
  if (!qword_1ED3A73C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B72F8, &_s10CodingKeysON_162);
    atomic_store(result, (unint64_t *)&qword_1ED3A73C0);
  }
  return result;
}

uint64_t sub_1BA828170()
{
  return MEMORY[0x1E0DEAFA8];
}

uint64_t sub_1BA82817C()
{
  return MEMORY[0x1E0DEAFC0];
}

uint64_t type metadata accessor for FormatButtonNodeRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA8281A8()
{
  unint64_t result;

  result = qword_1ED3A0280;
  if (!qword_1ED3A0280)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F7644, &type metadata for FormatAnimationNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A0280);
  }
  return result;
}

unint64_t sub_1BA8281EC()
{
  unint64_t result;

  result = qword_1ED39EC68;
  if (!qword_1ED39EC68)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAnimationNodeStyle.Selector, &type metadata for FormatAnimationNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED39EC68);
  }
  return result;
}

unint64_t sub_1BA828230()
{
  unint64_t result;

  result = qword_1ED3A0278;
  if (!qword_1ED3A0278)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAnimationNodeStyle.Selector, &type metadata for FormatAnimationNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3A0278);
  }
  return result;
}

unint64_t sub_1BA828274(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA8281EC();
  result = sub_1BA828230();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA8282A8()
{
  unint64_t result;

  result = qword_1ED3A73B0;
  if (!qword_1ED3A73B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B58E8, &_s10CodingKeysON_187);
    atomic_store(result, (unint64_t *)&qword_1ED3A73B0);
  }
  return result;
}

unint64_t sub_1BA8282EC()
{
  unint64_t result;

  result = qword_1ED3A73A8;
  if (!qword_1ED3A73A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5910, &_s10CodingKeysON_187);
    atomic_store(result, (unint64_t *)&qword_1ED3A73A8);
  }
  return result;
}

unint64_t sub_1BA828338()
{
  unint64_t result;

  result = qword_1ED3A7398;
  if (!qword_1ED3A7398)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5858, &_s10CodingKeysON_188);
    atomic_store(result, (unint64_t *)&qword_1ED3A7398);
  }
  return result;
}

unint64_t sub_1BA82837C()
{
  unint64_t result;

  result = qword_1ED3A7390;
  if (!qword_1ED3A7390)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5880, &_s10CodingKeysON_188);
    atomic_store(result, (unint64_t *)&qword_1ED3A7390);
  }
  return result;
}

unint64_t sub_1BA8283C0()
{
  unint64_t result;

  result = qword_1ED3B75F0;
  if (!qword_1ED3B75F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAccessibilityTrait, &type metadata for FormatAccessibilityTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B75F0);
  }
  return result;
}

unint64_t sub_1BA828404()
{
  unint64_t result;

  result = qword_1ED3B75E0;
  if (!qword_1ED3B75E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAccessibilityTrait, &type metadata for FormatAccessibilityTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B75E0);
  }
  return result;
}

uint64_t type metadata accessor for CoverChannelViewRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA828468()
{
  unint64_t result;

  result = qword_1ED3CA968;
  if (!qword_1ED3CA968)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9315CC, &type metadata for AuthTokenStoreDescriptor);
    atomic_store(result, (unint64_t *)&qword_1ED3CA968);
  }
  return result;
}

uint64_t sub_1BA8284AC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WebEmbedDataVisualization();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for WebEmbedDatastoreUpdate()
{
  uint64_t result;

  result = qword_1ED3CA8D8;
  if (!qword_1ED3CA8D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for WebEmbedDataSourceCache()
{
  return objc_opt_self();
}

void sub_1BA82857C(uint64_t a1)
{
  sub_1BA4B07F0(a1, qword_1ED3CA7A0, (uint64_t (*)(uint64_t))type metadata accessor for SportsDataConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BA828598()
{
  unint64_t v0;

  sub_1BA6F7928();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for SportsDataConfiguration()
{
  uint64_t result;

  result = qword_1ED3CA758;
  if (!qword_1ED3CA758)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for PuzzleStatisticCategory(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C2190);
}

uint64_t sub_1BA828660(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1ED3C2188, a2, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleGameCenterService, (uint64_t)&unk_1BB9208F8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA82869C()
{
  uint64_t v0;

  sub_1BA4AD30C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BA8286D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1BA8286EC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1BA82874C()
{
  swift_getObjectType();
  return sub_1BB86E3BC();
}

uint64_t type metadata accessor for PerformanceIssueService()
{
  return objc_opt_self();
}

uint64_t sub_1BA828798()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for InternalErrorViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InternalErrorViewLayout.Context()
{
  uint64_t result;

  result = qword_1ED3B73C8;
  if (!qword_1ED3B73C8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA828874()
{
  unint64_t result;

  result = qword_1ED3CA658;
  if (!qword_1ED3CA658)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatWebEmbedNodeStyle.Selector, &type metadata for FormatWebEmbedNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CA658);
  }
  return result;
}

unint64_t sub_1BA8288B8()
{
  unint64_t result;

  result = qword_1ED3CA650;
  if (!qword_1ED3CA650)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatWebEmbedNodeStyle.Selector, &type metadata for FormatWebEmbedNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3CA650);
  }
  return result;
}

unint64_t sub_1BA828904()
{
  unint64_t result;

  result = qword_1ED3CA648;
  if (!qword_1ED3CA648)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3900, &_s10CodingKeysON_205);
    atomic_store(result, (unint64_t *)&qword_1ED3CA648);
  }
  return result;
}

unint64_t sub_1BA828948()
{
  unint64_t result;

  result = qword_1ED3CA640;
  if (!qword_1ED3CA640)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3928, &_s10CodingKeysON_205);
    atomic_store(result, (unint64_t *)&qword_1ED3CA640);
  }
  return result;
}

unint64_t sub_1BA828994()
{
  unint64_t result;

  result = qword_1ED3CA630;
  if (!qword_1ED3CA630)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3870, &_s10CodingKeysON_206);
    atomic_store(result, (unint64_t *)&qword_1ED3CA630);
  }
  return result;
}

unint64_t sub_1BA8289D8()
{
  unint64_t result;

  result = qword_1ED3CA628;
  if (!qword_1ED3CA628)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3898, &_s10CodingKeysON_206);
    atomic_store(result, (unint64_t *)&qword_1ED3CA628);
  }
  return result;
}

unint64_t sub_1BA828A1C()
{
  unint64_t result;

  result = qword_1ED3B73B8;
  if (!qword_1ED3B73B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeTransform, &type metadata for FormatTextNodeTransform);
    atomic_store(result, (unint64_t *)&qword_1ED3B73B8);
  }
  return result;
}

unint64_t sub_1BA828A60()
{
  unint64_t result;

  result = qword_1ED39B8F8;
  if (!qword_1ED39B8F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeTransform, &type metadata for FormatTextNodeTransform);
    atomic_store(result, (unint64_t *)&qword_1ED39B8F8);
  }
  return result;
}

uint64_t sub_1BA828AA4(_QWORD *a1)
{
  return FormatTextLineBreakMode.encode(to:)(a1);
}

unint64_t sub_1BA828AB8()
{
  unint64_t result;

  result = qword_1ED39B8F0;
  if (!qword_1ED39B8F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextLineBreakMode, &type metadata for FormatTextLineBreakMode);
    atomic_store(result, (unint64_t *)&qword_1ED39B8F0);
  }
  return result;
}

unint64_t sub_1BA828B04()
{
  unint64_t result;

  result = qword_1ED3CA560;
  if (!qword_1ED3CA560)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3DF0, &_s14descr1E72CC979V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CA560);
  }
  return result;
}

unint64_t sub_1BA828B48()
{
  unint64_t result;

  result = qword_1ED3CA558;
  if (!qword_1ED3CA558)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3E18, &_s14descr1E72CC979V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3CA558);
  }
  return result;
}

unint64_t sub_1BA828B94()
{
  unint64_t result;

  result = qword_1ED3CA548;
  if (!qword_1ED3CA548)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4700, &_s10CodingKeysON_196);
    atomic_store(result, (unint64_t *)&qword_1ED3CA548);
  }
  return result;
}

unint64_t sub_1BA828BD8()
{
  unint64_t result;

  result = qword_1ED3CA540;
  if (!qword_1ED3CA540)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4728, &_s10CodingKeysON_196);
    atomic_store(result, (unint64_t *)&qword_1ED3CA540);
  }
  return result;
}

unint64_t sub_1BA828C1C()
{
  unint64_t result;

  result = qword_1ED3B73A0;
  if (!qword_1ED3B73A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEvent, &type metadata for FormatStateMachineEvent);
    atomic_store(result, (unint64_t *)&qword_1ED3B73A0);
  }
  return result;
}

uint64_t sub_1BA828C60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA828CAC()
{
  unint64_t result;

  result = qword_1ED3CA520;
  if (!qword_1ED3CA520)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0C50, &_s10CodingKeysON_39);
    atomic_store(result, (unint64_t *)&qword_1ED3CA520);
  }
  return result;
}

unint64_t sub_1BA828CF0()
{
  unint64_t result;

  result = qword_1ED3CA518;
  if (!qword_1ED3CA518)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0C78, &_s10CodingKeysON_39);
    atomic_store(result, (unint64_t *)&qword_1ED3CA518);
  }
  return result;
}

unint64_t sub_1BA828D3C()
{
  unint64_t result;

  result = qword_1ED3CA508;
  if (!qword_1ED3CA508)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BE0F8, &_s10CodingKeysON_71);
    atomic_store(result, (unint64_t *)&qword_1ED3CA508);
  }
  return result;
}

unint64_t sub_1BA828D80()
{
  unint64_t result;

  result = qword_1ED3CA500;
  if (!qword_1ED3CA500)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BE120, &_s10CodingKeysON_71);
    atomic_store(result, (unint64_t *)&qword_1ED3CA500);
  }
  return result;
}

unint64_t sub_1BA828DCC()
{
  unint64_t result;

  result = qword_1ED3CA4F0;
  if (!qword_1ED3CA4F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDB78, &_s10CodingKeysON_77);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4F0);
  }
  return result;
}

unint64_t sub_1BA828E10()
{
  unint64_t result;

  result = qword_1ED3CA4E8;
  if (!qword_1ED3CA4E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDBA0, &_s10CodingKeysON_77);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4E8);
  }
  return result;
}

uint64_t sub_1BA828E54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatPercentFillSizing.init(from:)(a1, a2);
}

unint64_t sub_1BA828E68()
{
  unint64_t result;

  result = qword_1ED3BB8C0;
  if (!qword_1ED3BB8C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSizing, &type metadata for FormatPercentFillSizing);
    atomic_store(result, (unint64_t *)&qword_1ED3BB8C0);
  }
  return result;
}

unint64_t sub_1BA828EB4()
{
  unint64_t result;

  result = qword_1ED3CA4D8;
  if (!qword_1ED3CA4D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8AFCD0, &_s10CodingKeysON_259);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4D8);
  }
  return result;
}

unint64_t sub_1BA828EF8()
{
  unint64_t result;

  result = qword_1ED3CA4D0;
  if (!qword_1ED3CA4D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8AFCF8, &_s10CodingKeysON_259);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4D0);
  }
  return result;
}

unint64_t sub_1BA828F3C()
{
  unint64_t result;

  result = qword_1ED3CA4C8;
  if (!qword_1ED3CA4C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D2108, &_s10CodingKeysON_259);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4C8);
  }
  return result;
}

uint64_t sub_1BA828F80()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t type metadata accessor for FormatLayoutViewFactory()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FormatLayeredMediaRatio(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8290B4 + 4 * byte_1BB957BF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA8290E8 + 4 * byte_1BB957BF0[v4]))();
}

uint64_t sub_1BA8290E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8290F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8290F8);
  return result;
}

uint64_t sub_1BA829104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA82910CLL);
  *(_BYTE *)result = -(char)a2;
  return result;
}

uint64_t sub_1BA829110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA829118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA829124@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatLayeredMediaRatio.init(from:)(a1, a2);
}

unint64_t sub_1BA829138()
{
  unint64_t result;

  result = qword_1ED3B0148;
  if (!qword_1ED3B0148)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayeredMediaRatio, &type metadata for FormatLayeredMediaRatio);
    atomic_store(result, (unint64_t *)&qword_1ED3B0148);
  }
  return result;
}

uint64_t sub_1BA82917C()
{
  _BYTE *v0;

  if (*v0)
    return 1885433183;
  else
    return 0x676E69646E6962;
}

unint64_t sub_1BA8291B8()
{
  unint64_t result;

  result = qword_1ED3CA4B8;
  if (!qword_1ED3CA4B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC120, &_s10CodingKeysON_101);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4B8);
  }
  return result;
}

unint64_t sub_1BA8291FC()
{
  unint64_t result;

  result = qword_1ED3CA4B0;
  if (!qword_1ED3CA4B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC148, &_s10CodingKeysON_101);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4B0);
  }
  return result;
}

unint64_t sub_1BA829240()
{
  unint64_t result;

  result = qword_1ED3CA4A8;
  if (!qword_1ED3CA4A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C95B8, &_s10CodingKeysON_101);
    atomic_store(result, (unint64_t *)&qword_1ED3CA4A8);
  }
  return result;
}

uint64_t sub_1BA829284(_QWORD *a1)
{
  return FormatIssueCoverContent.encode(to:)(a1);
}

unint64_t sub_1BA829298()
{
  unint64_t result;

  result = qword_1ED3A0258;
  if (!qword_1ED3A0258)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverContent, &type metadata for FormatIssueCoverContent);
    atomic_store(result, (unint64_t *)&qword_1ED3A0258);
  }
  return result;
}

void sub_1BA8292DC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E69646E6962;
  if (*v1)
    v2 = 0x726F7463656C6573;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BA82931C()
{
  sub_1BA4A06FC();
  return sub_1BB872D0C();
}

unint64_t sub_1BA829368()
{
  unint64_t result;

  result = qword_1ED3A71F0;
  if (!qword_1ED3A71F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB798, &_s10CodingTypeON_68);
    atomic_store(result, (unint64_t *)&qword_1ED3A71F0);
  }
  return result;
}

uint64_t sub_1BA8293AC(_QWORD *a1)
{
  return FormatIssueCoverBinding.encode(to:)(a1);
}

unint64_t sub_1BA8293C0()
{
  unint64_t result;

  result = qword_1ED3A0248;
  if (!qword_1ED3A0248)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverBinding, &type metadata for FormatIssueCoverBinding);
    atomic_store(result, (unint64_t *)&qword_1ED3A0248);
  }
  return result;
}

uint64_t FormatIssueCoverBinding.encode(to:)(_QWORD *a1)
{
  return sub_1BA4B2340(a1, (uint64_t)&type metadata for FormatIssueCoverBinding, (void (*)(_QWORD, char *))sub_1BACE8CAC, (void (*)(uint64_t, char *))sub_1BA4A9A50);
}

void sub_1BA829430(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x70756F7267;
  if (*v1)
    v2 = 0x6575737369;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1BA829460()
{
  sub_1BA49B08C();
  return sub_1BB872D0C();
}

unint64_t sub_1BA8294AC()
{
  unint64_t result;

  result = qword_1ED3A71D8;
  if (!qword_1ED3A71D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB6D0, &_s10CodingTypeON_69);
    atomic_store(result, (unint64_t *)&qword_1ED3A71D8);
  }
  return result;
}

uint64_t type metadata accessor for FormatImageNodeRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FormatGroupNodeRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA829530()
{
  unint64_t result;

  result = qword_1ED3A0238;
  if (!qword_1ED3A0238)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeMaskPath, &type metadata for FormatGroupNodeMaskPath);
    atomic_store(result, (unint64_t *)&qword_1ED3A0238);
  }
  return result;
}

unint64_t sub_1BA82957C()
{
  unint64_t result;

  result = qword_1ED3CA480;
  if (!qword_1ED3CA480)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9708, &_s10CodingKeysON_128);
    atomic_store(result, (unint64_t *)&qword_1ED3CA480);
  }
  return result;
}

unint64_t sub_1BA8295C0()
{
  unint64_t result;

  result = qword_1ED3CA478;
  if (!qword_1ED3CA478)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9730, &_s10CodingKeysON_128);
    atomic_store(result, (unint64_t *)&qword_1ED3CA478);
  }
  return result;
}

unint64_t sub_1BA829604()
{
  unint64_t result;

  result = qword_1ED3C2698;
  if (!qword_1ED3C2698)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDecorationContent, &type metadata for FormatDecorationContent);
    atomic_store(result, (unint64_t *)&qword_1ED3C2698);
  }
  return result;
}

unint64_t sub_1BA829648(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA5510D8();
  a1[2] = sub_1BA579ED0();
  result = sub_1BB242560();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA82967C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA650F04();
  a1[2] = sub_1BA766C2C();
  result = sub_1BB64147C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA8296B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3BEE88;
  if (!qword_1ED3BEE88)
  {
    sub_1BA7BE1A4();
    v2 = v1;
    v3 = sub_1BA5ED4F0();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB6570], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3BEE88);
  }
  return result;
}

unint64_t sub_1BA829710()
{
  unint64_t result;

  result = qword_1ED3B70E8;
  if (!qword_1ED3B70E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAccessibilityRole, &type metadata for FormatAccessibilityRole);
    atomic_store(result, (unint64_t *)&qword_1ED3B70E8);
  }
  return result;
}

unint64_t sub_1BA829768()
{
  unint64_t result;

  result = qword_1ED3CA360;
  if (!qword_1ED3CA360)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1F70, &_s10CodingKeysON_229);
    atomic_store(result, (unint64_t *)&qword_1ED3CA360);
  }
  return result;
}

unint64_t sub_1BA8297AC()
{
  unint64_t result;

  result = qword_1ED3CA358;
  if (!qword_1ED3CA358)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1F98, &_s10CodingKeysON_229);
    atomic_store(result, (unint64_t *)&qword_1ED3CA358);
  }
  return result;
}

ValueMetadata *type metadata accessor for FollowingCommandContext()
{
  return &type metadata for FollowingCommandContext;
}

uint64_t FeatureAvailabilityType.improvedBlockingBehavior.getter()
{
  return 0;
}

uint64_t dispatch thunk of FeatureAvailabilityType.narrativeAudio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

void sub_1BA829810()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BA6EF3B0();
  if (v0 <= 0x3F)
  {
    sub_1BA6CAB4C(319);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for WebEmbedViewController(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3D3B68);
}

uint64_t type metadata accessor for WebEmbedDataSourceJson()
{
  uint64_t result;

  result = qword_1ED3CA250;
  if (!qword_1ED3CA250)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t dispatch thunk of PuzzleStatsServiceType.updateStats()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BA8195A4;
  return v7(a1, a2);
}

uint64_t type metadata accessor for PuzzleLeaderboardEntry()
{
  uint64_t result;

  result = qword_1ED3C4238;
  if (!qword_1ED3C4238)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA829A4C()
{
  unint64_t result;

  result = qword_1ED3B6FE0;
  if (!qword_1ED3B6FE0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B6FE0);
  }
  return result;
}

unint64_t sub_1BA829AA0()
{
  unint64_t result;

  result = qword_1ED3B6FC0;
  if (!qword_1ED3B6FC0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B6FC0);
  }
  return result;
}

uint64_t type metadata accessor for GapOfflineViewRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FormatViewNodeRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA829B34()
{
  unint64_t result;

  result = qword_1ED3CA230;
  if (!qword_1ED3CA230)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoNodeContent, &type metadata for FormatVideoNodeContent);
    atomic_store(result, (unint64_t *)&qword_1ED3CA230);
  }
  return result;
}

unint64_t sub_1BA829B78()
{
  unint64_t result;

  result = qword_1ED3BED28;
  if (!qword_1ED3BED28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoNodeContent, &type metadata for FormatVideoNodeContent);
    atomic_store(result, (unint64_t *)&qword_1ED3BED28);
  }
  return result;
}

unint64_t sub_1BA829BBC()
{
  unint64_t result;

  result = qword_1ED3BED20;
  if (!qword_1ED3BED20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoNodeContent, &type metadata for FormatVideoNodeContent);
    atomic_store(result, (unint64_t *)&qword_1ED3BED20);
  }
  return result;
}

unint64_t sub_1BA829C00(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA829B78();
  a1[2] = sub_1BA829BBC();
  result = sub_1BA90B324();
  a1[3] = result;
  return result;
}

void sub_1BA829C34()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA829C44()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for FormatTextNodeRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA829C74()
{
  unint64_t result;

  result = qword_1ED3CA1A0[0];
  if (!qword_1ED3CA1A0[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSyncImageContent, &type metadata for FormatSyncImageContent);
    atomic_store(result, qword_1ED3CA1A0);
  }
  return result;
}

unint64_t sub_1BA829CB8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA574BC0();
  a1[2] = sub_1BA58FD48();
  result = sub_1BA895A6C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA829CF4()
{
  unint64_t result;

  result = qword_1ED3CA188;
  if (!qword_1ED3CA188)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF0A8, &_s10CodingKeysON_58);
    atomic_store(result, (unint64_t *)&qword_1ED3CA188);
  }
  return result;
}

unint64_t sub_1BA829D38()
{
  unint64_t result;

  result = qword_1ED3CA180;
  if (!qword_1ED3CA180)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF0D0, &_s10CodingKeysON_58);
    atomic_store(result, (unint64_t *)&qword_1ED3CA180);
  }
  return result;
}

void sub_1BA829D7C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3BECA8, (uint64_t (*)(uint64_t))type metadata accessor for FormatPostPurchaseData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for FormatPostPurchaseData()
{
  uint64_t result;

  result = qword_1ED3BEC98;
  if (!qword_1ED3BEC98)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA829DDC()
{
  unint64_t result;

  result = qword_1ED39B860;
  if (!qword_1ED39B860)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927FC4, &type metadata for FormatPackageInventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39B860);
  }
  return result;
}

unint64_t sub_1BA829E20()
{
  unint64_t result;

  result = qword_1ED39B858;
  if (!qword_1ED39B858)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927FEC, &type metadata for FormatPackageInventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39B858);
  }
  return result;
}

unint64_t sub_1BA829E6C()
{
  unint64_t result;

  result = qword_1ED3B6BA8;
  if (!qword_1ED3B6BA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89207C, &type metadata for FormatOptionExpression.Compare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B6BA8);
  }
  return result;
}

unint64_t sub_1BA829EB0()
{
  unint64_t result;

  result = qword_1ED3B6BA0;
  if (!qword_1ED3B6BA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8920A4, &type metadata for FormatOptionExpression.Compare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B6BA0);
  }
  return result;
}

unint64_t sub_1BA829EFC()
{
  unint64_t result;

  result = qword_1ED3CA100;
  if (!qword_1ED3CA100)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2090, &_s10CodingKeysON_227);
    atomic_store(result, (unint64_t *)&qword_1ED3CA100);
  }
  return result;
}

unint64_t sub_1BA829F40()
{
  unint64_t result;

  result = qword_1ED3CA0F8;
  if (!qword_1ED3CA0F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B20B8, &_s10CodingKeysON_227);
    atomic_store(result, (unint64_t *)&qword_1ED3CA0F8);
  }
  return result;
}

uint64_t type metadata accessor for FormatMicaNodeRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA829FAC()
{
  unint64_t result;

  result = qword_1ED3CA028;
  if (!qword_1ED3CA028)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC278, &_s10CodingKeysON_100);
    atomic_store(result, (unint64_t *)&qword_1ED3CA028);
  }
  return result;
}

unint64_t sub_1BA829FF0()
{
  unint64_t result;

  result = qword_1ED3CA020;
  if (!qword_1ED3CA020)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC2A0, &_s10CodingKeysON_100);
    atomic_store(result, (unint64_t *)&qword_1ED3CA020);
  }
  return result;
}

uint64_t sub_1BA82A034(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3C9F18, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatLayoutAttributes);
}

uint64_t sub_1BA82A060(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3C9F10, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatLayoutAttributes);
}

uint64_t sub_1BA82A08C(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3C9F30, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatLayoutAttributes);
}

uint64_t sub_1BA82A0B8(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1ED3C9F28, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatLayoutAttributes);
}

uint64_t sub_1BA82A0E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BA4D9E7C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1BA82A114()
{
  unint64_t result;

  result = qword_1ED3C9F08;
  if (!qword_1ED3C9F08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBEA8, &_s14descr1E72CBFA1O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C9F08);
  }
  return result;
}

unint64_t sub_1BA82A158()
{
  unint64_t result;

  result = qword_1ED3C9F00;
  if (!qword_1ED3C9F00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBED0, &_s14descr1E72CBFA1O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C9F00);
  }
  return result;
}

unint64_t sub_1BA82A19C()
{
  unint64_t result;

  result = qword_1ED3C9EF8;
  if (!qword_1ED3C9EF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C97F0, &_s14descr1E72CBFA1O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C9EF8);
  }
  return result;
}

unint64_t sub_1BA82A1E0()
{
  unint64_t result;

  result = qword_1ED3A01E8;
  if (!qword_1ED3A01E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverTraits, &type metadata for FormatIssueCoverTraits);
    atomic_store(result, (unint64_t *)&qword_1ED3A01E8);
  }
  return result;
}

unint64_t sub_1BA82A224()
{
  unint64_t result;

  result = qword_1ED3A01D8;
  if (!qword_1ED3A01D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueCoverTraits, &type metadata for FormatIssueCoverTraits);
    atomic_store(result, (unint64_t *)&qword_1ED3A01D8);
  }
  return result;
}

void sub_1BA82A268()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C9EF0)
  {
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C9EF0);
  }
}

uint64_t getEnumTagSinglePayload for FormatImageNodeRequest(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BA82A318@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatImageNodeRequest.init(from:)(a1, a2);
}

unint64_t sub_1BA82A334()
{
  unint64_t result;

  result = qword_1ED3C2668;
  if (!qword_1ED3C2668)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BAF50, &_s10CodingKeysON_115);
    atomic_store(result, (unint64_t *)&qword_1ED3C2668);
  }
  return result;
}

unint64_t sub_1BA82A378()
{
  unint64_t result;

  result = qword_1ED3C9EE0;
  if (!qword_1ED3C9EE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BAF78, &_s10CodingKeysON_115);
    atomic_store(result, (unint64_t *)&qword_1ED3C9EE0);
  }
  return result;
}

unint64_t sub_1BA82A3BC()
{
  unint64_t result;

  result = qword_1ED3C9ED8;
  if (!qword_1ED3C9ED8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CA1E8, &_s10CodingKeysON_115);
    atomic_store(result, (unint64_t *)&qword_1ED3C9ED8);
  }
  return result;
}

unint64_t sub_1BA82A400()
{
  unint64_t result;

  result = qword_1ED3C9E08;
  if (!qword_1ED3C9E08)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupRequirement, &type metadata for FormatGroupRequirement);
    atomic_store(result, (unint64_t *)&qword_1ED3C9E08);
  }
  return result;
}

unint64_t sub_1BA82A444()
{
  unint64_t result;

  result = qword_1ED3C9E00;
  if (!qword_1ED3C9E00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupRequirement, &type metadata for FormatGroupRequirement);
    atomic_store(result, (unint64_t *)&qword_1ED3C9E00);
  }
  return result;
}

uint64_t sub_1BA82A488(_QWORD *a1)
{
  return FormatFontMetricSizing.encode(to:)(a1);
}

unint64_t sub_1BA82A49C()
{
  unint64_t result;

  result = qword_1ED3A01D0;
  if (!qword_1ED3A01D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontMetricSizing, &type metadata for FormatFontMetricSizing);
    atomic_store(result, (unint64_t *)&qword_1ED3A01D0);
  }
  return result;
}

unint64_t sub_1BA82A4E8()
{
  unint64_t result;

  result = qword_1ED3C9DE8;
  if (!qword_1ED3C9DE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B91C0, &_s10CodingKeysON_136);
    atomic_store(result, (unint64_t *)&qword_1ED3C9DE8);
  }
  return result;
}

unint64_t sub_1BA82A52C()
{
  unint64_t result;

  result = qword_1ED3C9DE0;
  if (!qword_1ED3C9DE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B91E8, &_s10CodingKeysON_136);
    atomic_store(result, (unint64_t *)&qword_1ED3C9DE0);
  }
  return result;
}

unint64_t sub_1BA82A570()
{
  unint64_t result;

  result = qword_1ED3C9DB8;
  if (!qword_1ED3C9DB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeAction, &type metadata for FormatButtonNodeAction);
    atomic_store(result, (unint64_t *)&qword_1ED3C9DB8);
  }
  return result;
}

unint64_t sub_1BA82A5B4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA5C2BA4();
  a1[2] = sub_1BA5FB454();
  result = sub_1BB7A02C8();
  a1[3] = result;
  return result;
}

void sub_1BA82A5E8()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3CBE48, (void (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1BA82A684()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BA76D78C();
  if (v0 <= 0x3F)
  {
    sub_1BA629FB4(319);
    if (v1 <= 0x3F)
    {
      sub_1BA6EF3B0();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

unint64_t sub_1BA82A744()
{
  unint64_t result;

  result = qword_1ED3C9BE8;
  if (!qword_1ED3C9BE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91B264, &type metadata for FormatArticleOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BE8);
  }
  return result;
}

unint64_t sub_1BA82A788()
{
  unint64_t result;

  result = qword_1ED3C9BE0;
  if (!qword_1ED3C9BE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91B28C, &type metadata for FormatArticleOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BE0);
  }
  return result;
}

uint64_t type metadata accessor for CoverIssueViewRenderer()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of SharedItemManagerType.add(observer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of SharedItemManagerType.loadInitialItemsIfNeeded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SharedItemManagerType.itemArticleIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for PuzzleStatsStateStore()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OpenSportEventContext()
{
  return &type metadata for OpenSportEventContext;
}

unint64_t sub_1BA82A838()
{
  unint64_t result;

  result = qword_1ED3C9BC0;
  if (!qword_1ED3C9BC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GroupLayoutBindingKey, &type metadata for GroupLayoutBindingKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BC0);
  }
  return result;
}

unint64_t sub_1BA82A87C()
{
  unint64_t result;

  result = qword_1ED3C2650;
  if (!qword_1ED3C2650)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GroupLayoutBindingKey, &type metadata for GroupLayoutBindingKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C2650);
  }
  return result;
}

uint64_t _s6ActionOwst_2(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA82A900 + 4 * byte_1BB8E5123[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA82A920 + 4 * byte_1BB8E5128[v4]))();
}

_BYTE *sub_1BA82A900(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA82A920(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA82A928(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA82A930(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA82A938(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA82A940(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA82A94C(_QWORD *a1)
{
  return FormatWebEmbedBinding.Action.init(from:)(a1);
}

unint64_t sub_1BA82A960()
{
  unint64_t result;

  result = qword_1ED3C9BB8;
  if (!qword_1ED3C9BB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatWebEmbedBinding.Action, &type metadata for FormatWebEmbedBinding.Action);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BB8);
  }
  return result;
}

uint64_t FormatWebEmbedBinding.Action.init(from:)(_QWORD *a1)
{
  return sub_1BA57BEB8(a1, (void (*)(uint64_t))sub_1BA82AA38, (uint64_t)&_s10CodingTypeON_1, (uint64_t)&unk_1E726F608);
}

uint64_t sub_1BA82A9D0()
{
  sub_1BA82AA7C();
  return sub_1BB872D60();
}

uint64_t sub_1BA82AA2C@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

unint64_t sub_1BA82AA38()
{
  unint64_t result;

  result = qword_1ED3C9BB0;
  if (!qword_1ED3C9BB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3B58, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BB0);
  }
  return result;
}

unint64_t sub_1BA82AA7C()
{
  unint64_t result;

  result = qword_1ED3C9BA8;
  if (!qword_1ED3C9BA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C36A8, &_s10CodingTypeON_1);
    atomic_store(result, (unint64_t *)&qword_1ED3C9BA8);
  }
  return result;
}

uint64_t sub_1BA82AAC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BA4F34DC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1BA82AAF0()
{
  unint64_t result;

  result = qword_1ED3C9B80;
  if (!qword_1ED3C9B80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3190, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_1ED3C9B80);
  }
  return result;
}

unint64_t sub_1BA82AB34()
{
  unint64_t result;

  result = qword_1ED3C9B78;
  if (!qword_1ED3C9B78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C31B8, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_1ED3C9B78);
  }
  return result;
}

unint64_t sub_1BA82AB78()
{
  unint64_t result;

  result = qword_1ED3C9B70;
  if (!qword_1ED3C9B70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3F68, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_1ED3C9B70);
  }
  return result;
}

uint64_t sub_1BA82ABBC(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_1BA69C808(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA82ABF8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_1BA69C828(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA82AC34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatVideoPlayerLive.init(from:)(a1, a2);
}

unint64_t sub_1BA82AC48()
{
  unint64_t result;

  result = qword_1ED3BEA48;
  if (!qword_1ED3BEA48)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVideoPlayerLive, &type metadata for FormatVideoPlayerLive);
    atomic_store(result, (unint64_t *)&qword_1ED3BEA48);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerLive.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA82ACD8 + 4 * byte_1BB8958C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA82AD0C + 4 * byte_1BB8958C0[v4]))();
}

uint64_t sub_1BA82AD0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA82AD14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA82AD1CLL);
  return result;
}

uint64_t sub_1BA82AD28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA82AD30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA82AD34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA82AD3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA82AD48()
{
  sub_1BA82ADE8();
  return sub_1BB872D60();
}

unint64_t sub_1BA82ADA4()
{
  unint64_t result;

  result = qword_1ED3BEA40;
  if (!qword_1ED3BEA40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB895A54, &type metadata for FormatVideoPlayerLive.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3BEA40);
  }
  return result;
}

unint64_t sub_1BA82ADE8()
{
  unint64_t result;

  result = qword_1ED3BEA38;
  if (!qword_1ED3BEA38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8959B4, &type metadata for FormatVideoPlayerLive.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3BEA38);
  }
  return result;
}

uint64_t type metadata accessor for FormatSwitchListValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatSwitchListValue);
}

void sub_1BA82AE38()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82AE48()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82AE58()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82AE68()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82AE78()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82AE88()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for FormatSponsoredBanner()
{
  return objc_opt_self();
}

unint64_t sub_1BA82AEB8()
{
  unint64_t result;

  result = qword_1ED3B66D0[0];
  if (!qword_1ED3B66D0[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageAdjustment, &type metadata for FormatImageAdjustment);
    atomic_store(result, qword_1ED3B66D0);
  }
  return result;
}

unint64_t sub_1BA82AEFC()
{
  unint64_t result;

  result = qword_1ED3B66C8;
  if (!qword_1ED3B66C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageAdjustment, &type metadata for FormatImageAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3B66C8);
  }
  return result;
}

uint64_t sub_1BA82AF44@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatHeadlineBinding.URL.init(from:)(a1, a2);
}

unint64_t sub_1BA82AF58()
{
  unint64_t result;

  result = qword_1ED3C98B0;
  if (!qword_1ED3C98B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.URL, &type metadata for FormatHeadlineBinding.URL);
    atomic_store(result, (unint64_t *)&qword_1ED3C98B0);
  }
  return result;
}

uint64_t FormatHeadlineBinding.URL.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BA58F088(a1, (uint64_t)sub_1BA82B050, (uint64_t)&_s14descr1E72FBAF1C3URLO10CodingTypeON, (uint64_t)&unk_1E726C270, a2);
}

uint64_t sub_1BA82AFC8()
{
  sub_1BA82B094();
  return sub_1BB872D60();
}

uint64_t sub_1BA82B024@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA4A234C();
  *a1 = result;
  return result;
}

unint64_t sub_1BA82B050()
{
  unint64_t result;

  result = qword_1ED3C98A8;
  if (!qword_1ED3C98A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9036C0, &_s14descr1E72FBAF1C3URLO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1ED3C98A8);
  }
  return result;
}

unint64_t sub_1BA82B094()
{
  unint64_t result;

  result = qword_1ED3C98A0;
  if (!qword_1ED3C98A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB903620, &_s14descr1E72FBAF1C3URLO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1ED3C98A0);
  }
  return result;
}

unint64_t sub_1BA82B0E0()
{
  unint64_t result;

  result = qword_1ED3C9878;
  if (!qword_1ED3C9878)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9318, &_s10CodingKeysON_135);
    atomic_store(result, (unint64_t *)&qword_1ED3C9878);
  }
  return result;
}

unint64_t sub_1BA82B124()
{
  unint64_t result;

  result = qword_1ED3C9870;
  if (!qword_1ED3C9870)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9340, &_s10CodingKeysON_135);
    atomic_store(result, (unint64_t *)&qword_1ED3C9870);
  }
  return result;
}

unint64_t sub_1BA82B170()
{
  unint64_t result;

  result = qword_1ED3C9860;
  if (!qword_1ED3C9860)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8890, &_s10CodingKeysON_144);
    atomic_store(result, (unint64_t *)&qword_1ED3C9860);
  }
  return result;
}

unint64_t sub_1BA82B1B4()
{
  unint64_t result;

  result = qword_1ED3C9858;
  if (!qword_1ED3C9858)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B88B8, &_s10CodingKeysON_144);
    atomic_store(result, (unint64_t *)&qword_1ED3C9858);
  }
  return result;
}

unint64_t sub_1BA82B1F8()
{
  unint64_t result;

  result = qword_1ED3C9760;
  if (!qword_1ED3C9760)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCustomNodeStyle.Selector, &type metadata for FormatCustomNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C9760);
  }
  return result;
}

unint64_t sub_1BA82B23C()
{
  unint64_t result;

  result = qword_1ED3C9758;
  if (!qword_1ED3C9758)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCustomNodeStyle.Selector, &type metadata for FormatCustomNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C9758);
  }
  return result;
}

unint64_t sub_1BA82B288()
{
  unint64_t result;

  result = qword_1ED3C9748;
  if (!qword_1ED3C9748)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2FB0, &_s10CodingKeysON_214);
    atomic_store(result, (unint64_t *)&qword_1ED3C9748);
  }
  return result;
}

unint64_t sub_1BA82B2CC()
{
  unint64_t result;

  result = qword_1ED3C9740;
  if (!qword_1ED3C9740)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2FD8, &_s10CodingKeysON_214);
    atomic_store(result, (unint64_t *)&qword_1ED3C9740);
  }
  return result;
}

unint64_t sub_1BA82B318()
{
  unint64_t result;

  result = qword_1ED3C9730;
  if (!qword_1ED3C9730)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89C7BC, &type metadata for FormatCustomNodeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9730);
  }
  return result;
}

unint64_t sub_1BA82B35C()
{
  unint64_t result;

  result = qword_1ED3C9728;
  if (!qword_1ED3C9728)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89C7E4, &type metadata for FormatCustomNodeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9728);
  }
  return result;
}

void sub_1BA82B3A0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BA6BCC70(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for FormatMetadata();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_1BA82B450()
{
  unint64_t result;

  result = qword_1ED39B798;
  if (!qword_1ED39B798)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90680C, &_s8ResolvedV10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1ED39B798);
  }
  return result;
}

unint64_t sub_1BA82B494()
{
  unint64_t result;

  result = qword_1ED39B780[0];
  if (!qword_1ED39B780[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB906834, &_s8ResolvedV10CodingKeysON_1);
    atomic_store(result, qword_1ED39B780);
  }
  return result;
}

unint64_t sub_1BA82B4D8()
{
  unint64_t result;

  result = qword_1ED3A6AE0;
  if (!qword_1ED3A6AE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroup.ResolvedContainer, &type metadata for FormatContentSubgroup.ResolvedContainer);
    atomic_store(result, (unint64_t *)&qword_1ED3A6AE0);
  }
  return result;
}

unint64_t sub_1BA82B51C()
{
  unint64_t result;

  result = qword_1ED3A6AD8;
  if (!qword_1ED3A6AD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSubgroup.ResolvedContainer, &type metadata for FormatContentSubgroup.ResolvedContainer);
    atomic_store(result, (unint64_t *)&qword_1ED3A6AD8);
  }
  return result;
}

unint64_t sub_1BA82B568()
{
  unint64_t result;

  result = qword_1ED3A6A90;
  if (!qword_1ED3A6A90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91CFE4, &_s17ResolvedContainerO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A6A90);
  }
  return result;
}

unint64_t sub_1BA82B5AC()
{
  unint64_t result;

  result = qword_1ED3A6A88;
  if (!qword_1ED3A6A88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91D00C, &_s17ResolvedContainerO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A6A88);
  }
  return result;
}

unint64_t sub_1BA82B5F8()
{
  unint64_t result;

  result = qword_1ED3C9710;
  if (!qword_1ED3C9710)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90188C, &type metadata for FormatContentSubgroup.AltCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9710);
  }
  return result;
}

unint64_t sub_1BA82B63C()
{
  unint64_t result;

  result = qword_1ED3C9708;
  if (!qword_1ED3C9708)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9018B4, &type metadata for FormatContentSubgroup.AltCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9708);
  }
  return result;
}

unint64_t sub_1BA82B688()
{
  unint64_t result;

  result = qword_1ED3B65C0;
  if (!qword_1ED3B65C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90197C, &type metadata for FormatContentSubgroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B65C0);
  }
  return result;
}

unint64_t sub_1BA82B6CC()
{
  unint64_t result;

  result = qword_1ED3B65B8;
  if (!qword_1ED3B65B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9019A4, &type metadata for FormatContentSubgroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B65B8);
  }
  return result;
}

uint64_t sub_1BA82B710()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContentSlotItemObject();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA82B780(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatContentSlotItem();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BA82B7C8()
{
  unint64_t result;

  result = qword_1ED3C9660;
  if (!qword_1ED3C9660)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB94F57C, &type metadata for FormatContentSlotItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9660);
  }
  return result;
}

unint64_t sub_1BA82B80C()
{
  unint64_t result;

  result = qword_1ED3C9658;
  if (!qword_1ED3C9658)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB94F5A4, &type metadata for FormatContentSlotItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C9658);
  }
  return result;
}

uint64_t type metadata accessor for FormatComputedContext()
{
  return objc_opt_self();
}

void sub_1BA82B870()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FormatCompilerOptions.Newsroom(319);
  if (v0 <= 0x3F)
  {
    sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1BA82B918()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA82B9A4()
{
  unint64_t result;

  result = qword_1ED3C9470;
  if (!qword_1ED3C9470)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1840, &_s10CodingKeysON_239);
    atomic_store(result, (unint64_t *)&qword_1ED3C9470);
  }
  return result;
}

unint64_t sub_1BA82B9E8()
{
  unint64_t result;

  result = qword_1ED3C9468;
  if (!qword_1ED3C9468)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1868, &_s10CodingKeysON_239);
    atomic_store(result, (unint64_t *)&qword_1ED3C9468);
  }
  return result;
}

unint64_t sub_1BA82BA34()
{
  unint64_t result;

  result = qword_1ED3C9458;
  if (!qword_1ED3C9458)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B18D0, &_s10CodingKeysON_238);
    atomic_store(result, (unint64_t *)&qword_1ED3C9458);
  }
  return result;
}

unint64_t sub_1BA82BA78()
{
  unint64_t result;

  result = qword_1ED3C9450;
  if (!qword_1ED3C9450)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B18F8, &_s10CodingKeysON_238);
    atomic_store(result, (unint64_t *)&qword_1ED3C9450);
  }
  return result;
}

unint64_t sub_1BA82BAC4()
{
  unint64_t result;

  result = qword_1ED3C9440;
  if (!qword_1ED3C9440)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1960, &_s10CodingKeysON_237);
    atomic_store(result, (unint64_t *)&qword_1ED3C9440);
  }
  return result;
}

unint64_t sub_1BA82BB08()
{
  unint64_t result;

  result = qword_1ED3C9438;
  if (!qword_1ED3C9438)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1988, &_s10CodingKeysON_237);
    atomic_store(result, (unint64_t *)&qword_1ED3C9438);
  }
  return result;
}

unint64_t sub_1BA82BB54()
{
  unint64_t result;

  result = qword_1ED3C9428;
  if (!qword_1ED3C9428)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B19F0, &_s10CodingKeysON_236);
    atomic_store(result, (unint64_t *)&qword_1ED3C9428);
  }
  return result;
}

unint64_t sub_1BA82BB98()
{
  unint64_t result;

  result = qword_1ED3C9420;
  if (!qword_1ED3C9420)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1A18, &_s10CodingKeysON_236);
    atomic_store(result, (unint64_t *)&qword_1ED3C9420);
  }
  return result;
}

unint64_t sub_1BA82BBE0()
{
  unint64_t result;

  result = qword_1ED3B64F8;
  if (!qword_1ED3B64F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeState, &type metadata for FormatButtonNodeState);
    atomic_store(result, (unint64_t *)&qword_1ED3B64F8);
  }
  return result;
}

unint64_t sub_1BA82BC24()
{
  unint64_t result;

  result = qword_1ED3B64E8;
  if (!qword_1ED3B64E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeState, &type metadata for FormatButtonNodeState);
    atomic_store(result, (unint64_t *)&qword_1ED3B64E8);
  }
  return result;
}

unint64_t sub_1BA82BC68()
{
  unint64_t result;

  result = qword_1ED3B64E0;
  if (!qword_1ED3B64E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeState, &type metadata for FormatButtonNodeState);
    atomic_store(result, (unint64_t *)&qword_1ED3B64E0);
  }
  return result;
}

unint64_t sub_1BA82BCAC()
{
  unint64_t result;

  result = qword_1ED3B00F8;
  if (!qword_1ED3B00F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatButtonNodeState, &type metadata for FormatButtonNodeState);
    atomic_store(result, (unint64_t *)&qword_1ED3B00F8);
  }
  return result;
}

unint64_t sub_1BA82BCF8()
{
  unint64_t result;

  result = qword_1ED3C93F8;
  if (!qword_1ED3C93F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6BC0, &_s10CodingKeysON_168);
    atomic_store(result, (unint64_t *)&qword_1ED3C93F8);
  }
  return result;
}

unint64_t sub_1BA82BD3C()
{
  unint64_t result;

  result = qword_1ED3C93F0;
  if (!qword_1ED3C93F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6BE8, &_s10CodingKeysON_168);
    atomic_store(result, (unint64_t *)&qword_1ED3C93F0);
  }
  return result;
}

unint64_t sub_1BA82BD84()
{
  unint64_t result;

  result = qword_1ED3C4228;
  if (!qword_1ED3C4228)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E1DA8, &type metadata for FormatBindingResource);
    atomic_store(result, (unint64_t *)&qword_1ED3C4228);
  }
  return result;
}

unint64_t sub_1BA82BDC8()
{
  unint64_t result;

  result = qword_1ED3C4220;
  if (!qword_1ED3C4220)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E1DD0, &type metadata for FormatBindingResource);
    atomic_store(result, (unint64_t *)&qword_1ED3C4220);
  }
  return result;
}

unint64_t sub_1BA82BE0C()
{
  unint64_t result;

  result = qword_1ED3B64D0;
  if (!qword_1ED3B64D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FollowingCommandState, &type metadata for FollowingCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3B64D0);
  }
  return result;
}

uint64_t sub_1BA82BE50(uint64_t a1)
{
  return sub_1BA517790(a1, 0xD000000000000011, 0x80000001BB991F20, &qword_1ED476978);
}

uint64_t sub_1BA82BE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a3);
}

unint64_t sub_1BA82BE94()
{
  unint64_t result;

  result = qword_1ED3A2B08;
  if (!qword_1ED3A2B08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB905660, &type metadata for TraversalOnlyEncoder.AnyCodingKey);
    atomic_store(result, (unint64_t *)&qword_1ED3A2B08);
  }
  return result;
}

unint64_t sub_1BA82BED8()
{
  unint64_t result;

  result = qword_1ED3A2B00;
  if (!qword_1ED3A2B00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB905688, &type metadata for TraversalOnlyEncoder.AnyCodingKey);
    atomic_store(result, (unint64_t *)&qword_1ED3A2B00);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShortcutCommandState()
{
  return &type metadata for ShortcutCommandState;
}

unint64_t sub_1BA82BF2C()
{
  unint64_t result;

  result = qword_1ED3C15E0[0];
  if (!qword_1ED3C15E0[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ShortcutCommandState, &type metadata for ShortcutCommandState);
    atomic_store(result, qword_1ED3C15E0);
  }
  return result;
}

uint64_t sub_1BA82BF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  v7 = swift_allocObject();
  sub_1BA4CECCC(&v9, v7 + 16);
  return v7;
}

void sub_1BA82BFE8()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

uint64_t type metadata accessor for PuzzleStatisticValue(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4210);
}

uint64_t type metadata accessor for PuzzleHistoryService()
{
  return objc_opt_self();
}

id sub_1BA82C0B8()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory), sel_isPuzzleHistoryEmpty);
}

ValueMetadata *type metadata accessor for LikingCommandContext()
{
  return &type metadata for LikingCommandContext;
}

unint64_t sub_1BA82C0F4()
{
  unint64_t result;

  result = qword_1ED3A1380;
  if (!qword_1ED3A1380)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for IgnoringCommandState, &type metadata for IgnoringCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3A1380);
  }
  return result;
}

uint64_t type metadata accessor for HeadlineViewRenderer()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FormatProgressPieOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupLayoutInventory()
{
  return &type metadata for GroupLayoutInventory;
}

uint64_t sub_1BA82C1B4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatViewBackground.Mica(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_1BA82C22C()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3BA880, (void (*)(uint64_t))MEMORY[0x1E0DB7898]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA82C2B8()
{
  unint64_t result;

  result = qword_1ED3C9328;
  if (!qword_1ED3C9328)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2908, &_s10CodingKeysON_12);
    atomic_store(result, (unint64_t *)&qword_1ED3C9328);
  }
  return result;
}

unint64_t sub_1BA82C2FC()
{
  unint64_t result;

  result = qword_1ED3C9320;
  if (!qword_1ED3C9320)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2930, &_s10CodingKeysON_12);
    atomic_store(result, (unint64_t *)&qword_1ED3C9320);
  }
  return result;
}

unint64_t sub_1BA82C340()
{
  unint64_t result;

  result = qword_1ED3B6290;
  if (!qword_1ED3B6290)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTypeDefinition.Case, &type metadata for FormatTypeDefinition.Case);
    atomic_store(result, (unint64_t *)&qword_1ED3B6290);
  }
  return result;
}

unint64_t sub_1BA82C384()
{
  unint64_t result;

  result = qword_1ED39B688;
  if (!qword_1ED39B688)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTypeDefinition.Case, &type metadata for FormatTypeDefinition.Case);
    atomic_store(result, (unint64_t *)&qword_1ED39B688);
  }
  return result;
}

unint64_t sub_1BA82C3D0()
{
  unint64_t result;

  result = qword_1ED3C9310;
  if (!qword_1ED3C9310)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2878, &_s10CodingKeysON_13);
    atomic_store(result, (unint64_t *)&qword_1ED3C9310);
  }
  return result;
}

unint64_t sub_1BA82C414()
{
  unint64_t result;

  result = qword_1ED3C9308;
  if (!qword_1ED3C9308)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C28A0, &_s10CodingKeysON_13);
    atomic_store(result, (unint64_t *)&qword_1ED3C9308);
  }
  return result;
}

unint64_t sub_1BA82C460()
{
  unint64_t result;

  result = qword_1ED39B680;
  if (!qword_1ED39B680)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB933000, &type metadata for FormatTypeCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39B680);
  }
  return result;
}

unint64_t sub_1BA82C4A4()
{
  unint64_t result;

  result = qword_1ED39B678;
  if (!qword_1ED39B678)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB933028, &type metadata for FormatTypeCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39B678);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatTransformKnobs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA82C530(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  sub_1BA4CF8F4(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1BA82C56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA82C5B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BA82C5B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BE8A8)
  {
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BE8A8);
  }
}

unint64_t sub_1BA82C60C()
{
  unint64_t result;

  result = qword_1ED3C9238;
  if (!qword_1ED3C9238)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C15D8, &_s10CodingKeysON_32);
    atomic_store(result, (unint64_t *)&qword_1ED3C9238);
  }
  return result;
}

unint64_t sub_1BA82C650()
{
  unint64_t result;

  result = qword_1ED3C9230;
  if (!qword_1ED3C9230)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1600, &_s10CodingKeysON_32);
    atomic_store(result, (unint64_t *)&qword_1ED3C9230);
  }
  return result;
}

uint64_t type metadata accessor for FormatStringSelector()
{
  return objc_opt_self();
}

void sub_1BA82C6B4()
{
  unint64_t v0;

  sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3C47E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA82C75C()
{
  unint64_t result;

  result = qword_1ED3C9170;
  if (!qword_1ED3C9170)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BFBD8, &_s10CodingKeysON_53);
    atomic_store(result, (unint64_t *)&qword_1ED3C9170);
  }
  return result;
}

unint64_t sub_1BA82C7A0()
{
  unint64_t result;

  result = qword_1ED3C9168;
  if (!qword_1ED3C9168)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BFC00, &_s10CodingKeysON_53);
    atomic_store(result, (unint64_t *)&qword_1ED3C9168);
  }
  return result;
}

uint64_t sub_1BA82C7E4(_QWORD *a1)
{
  return FormatSizeConstraint.encode(to:)(a1);
}

unint64_t sub_1BA82C7F8()
{
  unint64_t result;

  result = qword_1ED3A0140;
  if (!qword_1ED3A0140)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSizeConstraint, &type metadata for FormatSizeConstraint);
    atomic_store(result, (unint64_t *)&qword_1ED3A0140);
  }
  return result;
}

uint64_t sub_1BA82C83C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatTransformData();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA82C908()
{
  unint64_t result;

  result = qword_1ED3C9158;
  if (!qword_1ED3C9158)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatResizeAutoMask, &type metadata for FormatResizeAutoMask);
    atomic_store(result, (unint64_t *)&qword_1ED3C9158);
  }
  return result;
}

unint64_t sub_1BA82C94C()
{
  unint64_t result;

  result = qword_1ED3C9148;
  if (!qword_1ED3C9148)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatResizeAutoMask, &type metadata for FormatResizeAutoMask);
    atomic_store(result, (unint64_t *)&qword_1ED3C9148);
  }
  return result;
}

unint64_t sub_1BA82C990()
{
  unint64_t result;

  result = qword_1ED3C9140;
  if (!qword_1ED3C9140)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatResizeAutoMask, &type metadata for FormatResizeAutoMask);
    atomic_store(result, (unint64_t *)&qword_1ED3C9140);
  }
  return result;
}

unint64_t sub_1BA82C9D4()
{
  unint64_t result;

  result = qword_1ED3C9138;
  if (!qword_1ED3C9138)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatResizeAutoMask, &type metadata for FormatResizeAutoMask);
    atomic_store(result, (unint64_t *)&qword_1ED3C9138);
  }
  return result;
}

unint64_t sub_1BA82CA18()
{
  unint64_t result;

  result = qword_1ED3B6280;
  if (!qword_1ED3B6280)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatQueryParameter, &type metadata for FormatQueryParameter);
    atomic_store(result, (unint64_t *)&qword_1ED3B6280);
  }
  return result;
}

unint64_t sub_1BA82CA5C()
{
  unint64_t result;

  result = qword_1ED3B00E0;
  if (!qword_1ED3B00E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatQueryParameter, &type metadata for FormatQueryParameter);
    atomic_store(result, (unint64_t *)&qword_1ED3B00E0);
  }
  return result;
}

unint64_t sub_1BA82CAA8()
{
  unint64_t result;

  result = qword_1ED3C9118;
  if (!qword_1ED3C9118)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1538, &_s10CodingKeysON_242);
    atomic_store(result, (unint64_t *)&qword_1ED3C9118);
  }
  return result;
}

unint64_t sub_1BA82CAEC()
{
  unint64_t result;

  result = qword_1ED3C9110;
  if (!qword_1ED3C9110)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1560, &_s10CodingKeysON_242);
    atomic_store(result, (unint64_t *)&qword_1ED3C9110);
  }
  return result;
}

unint64_t sub_1BA82CB38()
{
  unint64_t result;

  result = qword_1ED3C90F0;
  if (!qword_1ED3C90F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDD28, &_s10CodingKeysON_75);
    atomic_store(result, (unint64_t *)&qword_1ED3C90F0);
  }
  return result;
}

unint64_t sub_1BA82CB7C()
{
  unint64_t result;

  result = qword_1ED3C90E8;
  if (!qword_1ED3C90E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDD50, &_s10CodingKeysON_75);
    atomic_store(result, (unint64_t *)&qword_1ED3C90E8);
  }
  return result;
}

unint64_t FormatParagraphStyle.merge(other:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  char v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t *v24;
  char v25;
  uint64_t *v26;
  char v27;
  uint64_t *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v3 = *(_BYTE *)result;
  v4 = (uint64_t *)(result + 8);
  v5 = (uint64_t *)(result + 40);
  v6 = (uint64_t *)(result + 56);
  v7 = (uint64_t *)(result + 72);
  v8 = (uint64_t *)(result + 88);
  v9 = (uint64_t *)(result + 104);
  v10 = (uint64_t *)(result + 120);
  v11 = (uint64_t *)(result + 136);
  if (*v2 != 5)
    v3 = *v2;
  v44 = v3;
  if (!v2[16])
    v4 = (uint64_t *)(v2 + 8);
  v12 = v2[16] & *(_BYTE *)(result + 16);
  if (v2[32])
    v13 = (uint64_t *)(result + 24);
  else
    v13 = (uint64_t *)(v2 + 24);
  v14 = v2[32] & *(_BYTE *)(result + 32);
  if (!v2[48])
    v5 = (uint64_t *)(v2 + 40);
  v15 = v2[48] & *(_BYTE *)(result + 48);
  if (v2[49] == 6)
    v16 = *(_BYTE *)(result + 49);
  else
    v16 = v2[49];
  v43 = v16;
  if (v2[50] == 3)
    v17 = *(_BYTE *)(result + 50);
  else
    v17 = v2[50];
  if (!v2[64])
    v6 = (uint64_t *)(v2 + 56);
  v18 = v2[64] & *(_BYTE *)(result + 64);
  if (!v2[80])
    v7 = (uint64_t *)(v2 + 72);
  v19 = v2[80] & *(_BYTE *)(result + 80);
  if (!v2[96])
    v8 = (uint64_t *)(v2 + 88);
  v20 = v2[96] & *(_BYTE *)(result + 96);
  if (!v2[112])
    v9 = (uint64_t *)(v2 + 104);
  v21 = v2[112] & *(_BYTE *)(result + 112);
  if (!v2[128])
    v10 = (uint64_t *)(v2 + 120);
  v22 = v2[128] & *(_BYTE *)(result + 128);
  if (!v2[144])
    v11 = (uint64_t *)(v2 + 136);
  v23 = v2[144] & *(_BYTE *)(result + 144);
  if (v2[160])
    v24 = (uint64_t *)(result + 152);
  else
    v24 = (uint64_t *)(v2 + 152);
  v25 = v2[160] & *(_BYTE *)(result + 160);
  if (v2[176])
    v26 = (uint64_t *)(result + 168);
  else
    v26 = (uint64_t *)(v2 + 168);
  v27 = v2[176] & *(_BYTE *)(result + 176);
  v28 = (uint64_t *)(v2 + 184);
  if (v2[192])
    v28 = (uint64_t *)(result + 184);
  v29 = v2[192] & *(_BYTE *)(result + 192);
  LODWORD(result) = *(unsigned __int8 *)(result + 193);
  v30 = v2[193];
  if (v30 == 2)
    result = result;
  else
    result = v30;
  v31 = *v4;
  v32 = *v13;
  v33 = *v5;
  v34 = *v6;
  v35 = *v7;
  v36 = *v8;
  v37 = *v9;
  v38 = *v10;
  v39 = *v11;
  v40 = *v24;
  v41 = *v26;
  v42 = *v28;
  *(_BYTE *)a2 = v44;
  *(_QWORD *)(a2 + 8) = v31;
  *(_BYTE *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v32;
  *(_BYTE *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v33;
  *(_BYTE *)(a2 + 49) = v43;
  *(_BYTE *)(a2 + 50) = v17;
  *(_QWORD *)(a2 + 56) = v34;
  *(_BYTE *)(a2 + 64) = v18;
  *(_QWORD *)(a2 + 72) = v35;
  *(_BYTE *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v36;
  *(_BYTE *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 104) = v37;
  *(_BYTE *)(a2 + 112) = v21;
  *(_QWORD *)(a2 + 120) = v38;
  *(_BYTE *)(a2 + 128) = v22;
  *(_QWORD *)(a2 + 136) = v39;
  *(_BYTE *)(a2 + 144) = v23;
  *(_QWORD *)(a2 + 152) = v40;
  *(_BYTE *)(a2 + 160) = v25;
  *(_QWORD *)(a2 + 168) = v41;
  *(_BYTE *)(a2 + 176) = v27;
  *(_QWORD *)(a2 + 184) = v42;
  *(_BYTE *)(a2 + 192) = v29;
  *(_BYTE *)(a2 + 193) = result;
  *(_BYTE *)(a2 + 48) = v15;
  return result;
}

unint64_t sub_1BA82CEAC()
{
  unint64_t result;

  result = qword_1ED3C90C8;
  if (!qword_1ED3C90C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B08E8, &_s10CodingKeysON_250);
    atomic_store(result, (unint64_t *)&qword_1ED3C90C8);
  }
  return result;
}

unint64_t sub_1BA82CEF0()
{
  unint64_t result;

  result = qword_1ED3C90C0;
  if (!qword_1ED3C90C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0910, &_s10CodingKeysON_250);
    atomic_store(result, (unint64_t *)&qword_1ED3C90C0);
  }
  return result;
}

unint64_t sub_1BA82CF34()
{
  unint64_t result;

  result = qword_1ED3C90B0;
  if (!qword_1ED3C90B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93A3A0, &type metadata for FormatMenuItemAction);
    atomic_store(result, (unint64_t *)&qword_1ED3C90B0);
  }
  return result;
}

unint64_t sub_1BA82CF78(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA4ED72C();
  a1[2] = sub_1BA7B707C();
  result = sub_1BB668EDC();
  a1[3] = result;
  return result;
}

uint64_t sub_1BA82CFAC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatCommandOpenURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1BA82D024()
{
  unint64_t result;

  result = qword_1ED3B00D0;
  if (!qword_1ED3B00D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemCollection, &type metadata for FormatItemCollection);
    atomic_store(result, (unint64_t *)&qword_1ED3B00D0);
  }
  return result;
}

uint64_t sub_1BA82D068(_QWORD *a1)
{
  return FormatIssueCoverNode.encode(to:)(a1);
}

unint64_t sub_1BA82D090()
{
  unint64_t result;

  result = qword_1ED3A6828;
  if (!qword_1ED3A6828)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B11F8, &_s10CodingKeysON_245);
    atomic_store(result, (unint64_t *)&qword_1ED3A6828);
  }
  return result;
}

unint64_t sub_1BA82D0D4()
{
  unint64_t result;

  result = qword_1ED3A6820;
  if (!qword_1ED3A6820)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1220, &_s10CodingKeysON_245);
    atomic_store(result, (unint64_t *)&qword_1ED3A6820);
  }
  return result;
}

void sub_1BA82D118()
{
  unint64_t v0;

  sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3C47E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB48B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

unint64_t sub_1BA82D21C()
{
  unint64_t result;

  result = qword_1ED3C8E90;
  if (!qword_1ED3C8E90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9397C4, &type metadata for FormatImageNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E90);
  }
  return result;
}

unint64_t sub_1BA82D260()
{
  unint64_t result;

  result = qword_1ED3C8E88;
  if (!qword_1ED3C8E88)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeStyle.Selector, &type metadata for FormatImageNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E88);
  }
  return result;
}

unint64_t sub_1BA82D2A4()
{
  unint64_t result;

  result = qword_1ED3C8E80;
  if (!qword_1ED3C8E80)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeStyle.Selector, &type metadata for FormatImageNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E80);
  }
  return result;
}

unint64_t sub_1BA82D2E8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA82D260();
  result = sub_1BA82D2A4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA82D31C()
{
  unint64_t result;

  result = qword_1ED3C8E78;
  if (!qword_1ED3C8E78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB258, &_s10CodingKeysON_111);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E78);
  }
  return result;
}

unint64_t sub_1BA82D360()
{
  unint64_t result;

  result = qword_1ED3C8E70;
  if (!qword_1ED3C8E70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB280, &_s10CodingKeysON_111);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E70);
  }
  return result;
}

unint64_t sub_1BA82D3AC()
{
  unint64_t result;

  result = qword_1ED3C8E60;
  if (!qword_1ED3C8E60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB1C8, &_s10CodingKeysON_112);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E60);
  }
  return result;
}

unint64_t sub_1BA82D3F0()
{
  unint64_t result;

  result = qword_1ED3C8E58;
  if (!qword_1ED3C8E58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB1F0, &_s10CodingKeysON_112);
    atomic_store(result, (unint64_t *)&qword_1ED3C8E58);
  }
  return result;
}

uint64_t sub_1BA82D434(_QWORD *a1)
{
  return FormatGroupNodeStyle.encode(to:)(a1);
}

unint64_t sub_1BA82D454()
{
  unint64_t result;

  result = qword_1ED3C2620;
  if (!qword_1ED3C2620)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeStyle.Selector, &type metadata for FormatGroupNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C2620);
  }
  return result;
}

unint64_t sub_1BA82D498()
{
  unint64_t result;

  result = qword_1ED3C8D58;
  if (!qword_1ED3C8D58)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupNodeStyle.Selector, &type metadata for FormatGroupNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8D58);
  }
  return result;
}

unint64_t sub_1BA82D4E4()
{
  unint64_t result;

  result = qword_1ED3C8D50;
  if (!qword_1ED3C8D50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1C68, &_s10CodingKeysON_233);
    atomic_store(result, (unint64_t *)&qword_1ED3C8D50);
  }
  return result;
}

unint64_t sub_1BA82D528()
{
  unint64_t result;

  result = qword_1ED3C8D48;
  if (!qword_1ED3C8D48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1C90, &_s10CodingKeysON_233);
    atomic_store(result, (unint64_t *)&qword_1ED3C8D48);
  }
  return result;
}

unint64_t sub_1BA82D574()
{
  unint64_t result;

  result = qword_1ED3C8D38;
  if (!qword_1ED3C8D38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B90A0, &_s10CodingKeysON_138);
    atomic_store(result, (unint64_t *)&qword_1ED3C8D38);
  }
  return result;
}

unint64_t sub_1BA82D5B8()
{
  unint64_t result;

  result = qword_1ED3C8D30;
  if (!qword_1ED3C8D30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B90C8, &_s10CodingKeysON_138);
    atomic_store(result, (unint64_t *)&qword_1ED3C8D30);
  }
  return result;
}

unint64_t sub_1BA82D604()
{
  unint64_t result;

  result = qword_1ED3C8C68;
  if (!qword_1ED3C8C68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1EE0, &_s10CodingKeysON_230);
    atomic_store(result, (unint64_t *)&qword_1ED3C8C68);
  }
  return result;
}

unint64_t sub_1BA82D648()
{
  unint64_t result;

  result = qword_1ED3C8C60;
  if (!qword_1ED3C8C60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1F08, &_s10CodingKeysON_230);
    atomic_store(result, (unint64_t *)&qword_1ED3C8C60);
  }
  return result;
}

uint64_t sub_1BA82D68C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatAbsoluteURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_1BA82D6FC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA82D70C()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for FormatCellAutomation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatCellAutomation);
}

void sub_1BA82D728()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3C8C20)
  {
    type metadata accessor for FormatButtonNodeData();
    sub_1BA4B07F0(255, &qword_1ED3CEFB0, (uint64_t (*)(uint64_t))type metadata accessor for FormatButtonNodeDataLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FormatAnimationNodeDataLayoutAttributes);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3C8C20);
  }
}

void sub_1BA82D7AC()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FormatButtonNodeDataAction();
  if (v0 <= 0x3F)
  {
    sub_1BA7B41BC(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1BA82D830()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatBindingContent()
{
  uint64_t result;

  result = qword_1ED3C8AF0;
  if (!qword_1ED3C8AF0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA82D8F4()
{
  unint64_t result;

  result = qword_1ED3C2598[0];
  if (!qword_1ED3C2598[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B61E0, &_s10CodingKeysON_179);
    atomic_store(result, qword_1ED3C2598);
  }
  return result;
}

unint64_t sub_1BA82D938()
{
  unint64_t result;

  result = qword_1ED3C8AE8;
  if (!qword_1ED3C8AE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6208, &_s10CodingKeysON_179);
    atomic_store(result, (unint64_t *)&qword_1ED3C8AE8);
  }
  return result;
}

unint64_t sub_1BA82D97C()
{
  unint64_t result;

  result = qword_1ED3C8AD8;
  if (!qword_1ED3C8AD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB954BD8, &type metadata for FormatAttributeScope);
    atomic_store(result, (unint64_t *)&qword_1ED3C8AD8);
  }
  return result;
}

unint64_t sub_1BA82D9C0()
{
  unint64_t result;

  result = qword_1ED3C8AD0;
  if (!qword_1ED3C8AD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB954C08, &type metadata for FormatAttributeScope);
    atomic_store(result, (unint64_t *)&qword_1ED3C8AD0);
  }
  return result;
}

unint64_t sub_1BA82DA04()
{
  unint64_t result;

  result = qword_1ED3C8AC8;
  if (!qword_1ED3C8AC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB955378, &type metadata for FormatAttributeScope);
    atomic_store(result, (unint64_t *)&qword_1ED3C8AC8);
  }
  return result;
}

uint64_t sub_1BA82DA50(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for EngagementBannerView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA82DA8C()
{
  return sub_1BA82DA50(&qword_1ED3BE7D0, (uint64_t)&protocol conformance descriptor for EngagementBannerView);
}

uint64_t type metadata accessor for CategoryViewRenderer()
{
  return objc_opt_self();
}

unint64_t sub_1BA82DAD0()
{
  unint64_t result;

  result = qword_1ED3B60C0;
  if (!qword_1ED3B60C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for BlockingCommandState, &type metadata for BlockingCommandState);
    atomic_store(result, (unint64_t *)&qword_1ED3B60C0);
  }
  return result;
}

uint64_t sub_1BA82DB14()
{
  return sub_1BA4B552C();
}

BOOL sub_1BA82DB30(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA49DE4C(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BA82DB50()
{
  return swift_getAtKeyPath();
}

void sub_1BA82DB78(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3A67C8, (uint64_t (*)(uint64_t))type metadata accessor for SportsTaxonomyGraph, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SportsRecordFactory()
{
  return objc_opt_self();
}

void sub_1BA82DBB4()
{
  unint64_t v0;

  sub_1BA65805C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA82DC3C()
{
  unint64_t result;

  result = qword_1ED3B00C8;
  if (!qword_1ED3B00C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GroupLayoutPriority, &type metadata for GroupLayoutPriority);
    atomic_store(result, (unint64_t *)&qword_1ED3B00C8);
  }
  return result;
}

unint64_t sub_1BA82DC80()
{
  unint64_t result;

  result = qword_1ED3B00C0;
  if (!qword_1ED3B00C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GroupLayoutPriority, &type metadata for GroupLayoutPriority);
    atomic_store(result, (unint64_t *)&qword_1ED3B00C0);
  }
  return result;
}

unint64_t sub_1BA82DCC4()
{
  unint64_t result;

  result = qword_1ED3C88B0;
  if (!qword_1ED3C88B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8DAE34, &type metadata for FormatViewNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C88B0);
  }
  return result;
}

unint64_t sub_1BA82DD08()
{
  unint64_t result;

  result = qword_1ED3C88A0;
  if (!qword_1ED3C88A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatViewNodeStyle.Selector, &type metadata for FormatViewNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C88A0);
  }
  return result;
}

unint64_t sub_1BA82DD4C()
{
  unint64_t result;

  result = qword_1ED3C8898;
  if (!qword_1ED3C8898)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatViewNodeStyle.Selector, &type metadata for FormatViewNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8898);
  }
  return result;
}

unint64_t sub_1BA82DD90(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA82DD08();
  result = sub_1BA82DD4C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA82DDC4()
{
  unint64_t result;

  result = qword_1ED3C8890;
  if (!qword_1ED3C8890)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3528, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1ED3C8890);
  }
  return result;
}

unint64_t sub_1BA82DE08()
{
  unint64_t result;

  result = qword_1ED3C8888;
  if (!qword_1ED3C8888)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3550, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1ED3C8888);
  }
  return result;
}

unint64_t sub_1BA82DE54()
{
  unint64_t result;

  result = qword_1ED3C8878;
  if (!qword_1ED3C8878)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3498, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1ED3C8878);
  }
  return result;
}

unint64_t sub_1BA82DE98()
{
  unint64_t result;

  result = qword_1ED3C8870;
  if (!qword_1ED3C8870)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C34C0, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1ED3C8870);
  }
  return result;
}

uint64_t sub_1BA82DEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatTransformData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BA82DF20()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&unk_1ED3C23A0, (void (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA82DFC8()
{
  unint64_t result;

  result = qword_1ED3C8740;
  if (!qword_1ED3C8740)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91F7E4, &type metadata for FormatTextNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8740);
  }
  return result;
}

unint64_t sub_1BA82E00C()
{
  unint64_t result;

  result = qword_1ED3C8730;
  if (!qword_1ED3C8730)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeStyle.Selector, &type metadata for FormatTextNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8730);
  }
  return result;
}

unint64_t sub_1BA82E050()
{
  unint64_t result;

  result = qword_1ED3C8728;
  if (!qword_1ED3C8728)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeStyle.Selector, &type metadata for FormatTextNodeStyle.Selector);
    atomic_store(result, (unint64_t *)&qword_1ED3C8728);
  }
  return result;
}

unint64_t sub_1BA82E094(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA82E00C();
  result = sub_1BA82E050();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA82E0C8()
{
  unint64_t result;

  result = qword_1ED3C8720;
  if (!qword_1ED3C8720)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C25C8, &_s10CodingKeysON_14);
    atomic_store(result, (unint64_t *)&qword_1ED3C8720);
  }
  return result;
}

unint64_t sub_1BA82E10C()
{
  unint64_t result;

  result = qword_1ED3C8718;
  if (!qword_1ED3C8718)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C25F0, &_s10CodingKeysON_14);
    atomic_store(result, (unint64_t *)&qword_1ED3C8718);
  }
  return result;
}

unint64_t sub_1BA82E158()
{
  unint64_t result;

  result = qword_1ED3C8708;
  if (!qword_1ED3C8708)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2538, &_s10CodingKeysON_15);
    atomic_store(result, (unint64_t *)&qword_1ED3C8708);
  }
  return result;
}

unint64_t sub_1BA82E19C()
{
  unint64_t result;

  result = qword_1ED3C8700;
  if (!qword_1ED3C8700)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2560, &_s10CodingKeysON_15);
    atomic_store(result, (unint64_t *)&qword_1ED3C8700);
  }
  return result;
}

uint64_t type metadata accessor for FormatSystemFactory()
{
  uint64_t result;

  result = qword_1ED3D57D8;
  if (!qword_1ED3D57D8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA82E21C()
{
  unint64_t result;

  result = qword_1ED3B5F50;
  if (!qword_1ED3B5F50)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementary, &type metadata for FormatSupplementary);
    atomic_store(result, (unint64_t *)&qword_1ED3B5F50);
  }
  return result;
}

unint64_t sub_1BA82E260()
{
  unint64_t result;

  result = qword_1ED3B5F48;
  if (!qword_1ED3B5F48)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSupplementary, &type metadata for FormatSupplementary);
    atomic_store(result, (unint64_t *)&qword_1ED3B5F48);
  }
  return result;
}

unint64_t sub_1BA82E2AC()
{
  unint64_t result;

  result = qword_1ED3C86F0;
  if (!qword_1ED3C86F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3C40, &_s10CodingKeysON_202);
    atomic_store(result, (unint64_t *)&qword_1ED3C86F0);
  }
  return result;
}

unint64_t sub_1BA82E2F0()
{
  unint64_t result;

  result = qword_1ED3C86E8;
  if (!qword_1ED3C86E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3C68, &_s10CodingKeysON_202);
    atomic_store(result, (unint64_t *)&qword_1ED3C86E8);
  }
  return result;
}

uint64_t sub_1BA82E334@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BA4D3354(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1BA82E364()
{
  unint64_t result;

  result = qword_1ED3C86D8;
  if (!qword_1ED3C86D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0E38, &_s10CodingKeysON_37);
    atomic_store(result, (unint64_t *)&qword_1ED3C86D8);
  }
  return result;
}

unint64_t sub_1BA82E3A8()
{
  unint64_t result;

  result = qword_1ED3C86D0;
  if (!qword_1ED3C86D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0E60, &_s10CodingKeysON_37);
    atomic_store(result, (unint64_t *)&qword_1ED3C86D0);
  }
  return result;
}

unint64_t sub_1BA82E3EC()
{
  unint64_t result;

  result = qword_1ED3C86C8;
  if (!qword_1ED3C86C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C5EA0, &_s10CodingKeysON_37);
    atomic_store(result, (unint64_t *)&qword_1ED3C86C8);
  }
  return result;
}

unint64_t sub_1BA82E430()
{
  unint64_t result;

  result = qword_1ED3C0AA0;
  if (!qword_1ED3C0AA0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSourceMapNode, &type metadata for FormatSourceMapNode);
    atomic_store(result, (unint64_t *)&qword_1ED3C0AA0);
  }
  return result;
}

unint64_t sub_1BA82E47C()
{
  unint64_t result;

  result = qword_1ED3C0A98;
  if (!qword_1ED3C0A98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9357D0, &type metadata for FormatSourceMapNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C0A98);
  }
  return result;
}

unint64_t sub_1BA82E4C0()
{
  unint64_t result;

  result = qword_1ED3C41F8;
  if (!qword_1ED3C41F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9357F8, &type metadata for FormatSourceMapNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C41F8);
  }
  return result;
}

unint64_t sub_1BA82E504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3A1368;
  if (!qword_1ED3A1368)
  {
    sub_1BA4CDF6C(255, &qword_1ED3C85B8, (uint64_t (*)(void))sub_1BA829604, (uint64_t)&type metadata for FormatDecorationContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSelectorValue);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelectorValue<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3A1368);
  }
  return result;
}

uint64_t _s6ActionOwst_3(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA82E5AC + 4 * byte_1BB8AB0C4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA82E5CC + 4 * byte_1BB8AB0C9[v4]))();
}

_BYTE *sub_1BA82E5AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA82E5CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA82E5D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA82E5DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA82E5E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA82E5EC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BA82E5F8(_QWORD *a1)
{
  return FormatPuzzleBinding.Action.init(from:)(a1);
}

unint64_t sub_1BA82E60C()
{
  unint64_t result;

  result = qword_1ED3C85A8;
  if (!qword_1ED3C85A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPuzzleBinding.Action, &type metadata for FormatPuzzleBinding.Action);
    atomic_store(result, (unint64_t *)&qword_1ED3C85A8);
  }
  return result;
}

uint64_t FormatPuzzleBinding.Action.init(from:)(_QWORD *a1)
{
  return sub_1BA57BEB8(a1, (void (*)(uint64_t))sub_1BA82E6E4, (uint64_t)&_s10CodingTypeON_140, (uint64_t)&unk_1E72698A8);
}

uint64_t sub_1BA82E67C()
{
  sub_1BA82E728();
  return sub_1BB872D60();
}

uint64_t sub_1BA82E6D8@<X0>(BOOL *a1@<X8>)
{
  return sub_1BA592DC0(a1);
}

unint64_t sub_1BA82E6E4()
{
  unint64_t result;

  result = qword_1ED3C85A0;
  if (!qword_1ED3C85A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8CEAA0, &_s10CodingTypeON_140);
    atomic_store(result, (unint64_t *)&qword_1ED3C85A0);
  }
  return result;
}

unint64_t sub_1BA82E728()
{
  unint64_t result;

  result = qword_1ED3C8598;
  if (!qword_1ED3C8598)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4880, &_s10CodingTypeON_140);
    atomic_store(result, (unint64_t *)&qword_1ED3C8598);
  }
  return result;
}

unint64_t sub_1BA82E774()
{
  unint64_t result;

  result = qword_1ED3C8588;
  if (!qword_1ED3C8588)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDAE8, &_s10CodingKeysON_78);
    atomic_store(result, (unint64_t *)&qword_1ED3C8588);
  }
  return result;
}

unint64_t sub_1BA82E7B8()
{
  unint64_t result;

  result = qword_1ED3C8580;
  if (!qword_1ED3C8580)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDB10, &_s10CodingKeysON_78);
    atomic_store(result, (unint64_t *)&qword_1ED3C8580);
  }
  return result;
}

uint64_t type metadata accessor for FormatPluginFactory()
{
  return objc_opt_self();
}

uint64_t FormatPluginFactory.init(resolver:formatModelFactory:formatTracker:webEmbedManager:animatorFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1BA49DD54(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB04419C);
}

unint64_t sub_1BA82E830()
{
  unint64_t result;

  result = qword_1ED3C84A8;
  if (!qword_1ED3C84A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD040, &_s10CodingKeysON_89);
    atomic_store(result, (unint64_t *)&qword_1ED3C84A8);
  }
  return result;
}

unint64_t sub_1BA82E874()
{
  unint64_t result;

  result = qword_1ED3C84A0;
  if (!qword_1ED3C84A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD068, &_s10CodingKeysON_89);
    atomic_store(result, (unint64_t *)&qword_1ED3C84A0);
  }
  return result;
}

unint64_t sub_1BA82E8C0()
{
  unint64_t result;

  result = qword_1ED3C8490;
  if (!qword_1ED3C8490)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BCD90, &_s10CodingKeysON_91);
    atomic_store(result, (unint64_t *)&qword_1ED3C8490);
  }
  return result;
}

unint64_t sub_1BA82E904()
{
  unint64_t result;

  result = qword_1ED3C8488;
  if (!qword_1ED3C8488)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BCDB8, &_s10CodingKeysON_91);
    atomic_store(result, (unint64_t *)&qword_1ED3C8488);
  }
  return result;
}

uint64_t sub_1BA82E948(uint64_t a1, uint64_t a2)
{
  return sub_1BA4C2DD8(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatNodeStateData.Data);
}

uint64_t sub_1BA82E954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3C41E8, (uint64_t (*)(uint64_t))type metadata accessor for FormatNodeStateData.Data, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BA82E9B0()
{
  unint64_t result;

  result = qword_1ED3BE6A0;
  if (!qword_1ED3BE6A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FB7C, &type metadata for FormatMenuGroupable);
    atomic_store(result, (unint64_t *)&qword_1ED3BE6A0);
  }
  return result;
}

unint64_t sub_1BA82E9F8()
{
  unint64_t result;

  result = qword_1ED3C8478;
  if (!qword_1ED3C8478)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatJsonConfigKey, &type metadata for FormatJsonConfigKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C8478);
  }
  return result;
}

unint64_t sub_1BA82EA3C()
{
  unint64_t result;

  result = qword_1ED3C8468;
  if (!qword_1ED3C8468)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatJsonConfigKey, &type metadata for FormatJsonConfigKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C8468);
  }
  return result;
}

unint64_t sub_1BA82EA80()
{
  unint64_t result;

  result = qword_1ED3C8460;
  if (!qword_1ED3C8460)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatJsonConfigKey, &type metadata for FormatJsonConfigKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C8460);
  }
  return result;
}

unint64_t sub_1BA82EAC4()
{
  unint64_t result;

  result = qword_1ED3C8458;
  if (!qword_1ED3C8458)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatJsonConfigKey, &type metadata for FormatJsonConfigKey);
    atomic_store(result, (unint64_t *)&qword_1ED3C8458);
  }
  return result;
}

void sub_1BA82EB08()
{
  unint64_t v0;

  sub_1BA7754CC(319);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1BA82EBC0()
{
  unint64_t v0;

  sub_1BA7754CC(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BA82EC68(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA4A2870((unint64_t *)&unk_1ED3C8350, type metadata accessor for FormatItemNodeStyle.Selector, (uint64_t)&protocol conformance descriptor for FormatItemNodeStyle.Selector);
  result = sub_1BA4A2870(&qword_1ED3C8348, type metadata accessor for FormatItemNodeStyle.Selector, (uint64_t)&protocol conformance descriptor for FormatItemNodeStyle.Selector);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA82ECCC()
{
  unint64_t result;

  result = qword_1ED3C8340;
  if (!qword_1ED3C8340)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBB68, &_s10CodingKeysON_106);
    atomic_store(result, (unint64_t *)&qword_1ED3C8340);
  }
  return result;
}

unint64_t sub_1BA82ED10()
{
  unint64_t result;

  result = qword_1ED3C8338;
  if (!qword_1ED3C8338)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBB90, &_s10CodingKeysON_106);
    atomic_store(result, (unint64_t *)&qword_1ED3C8338);
  }
  return result;
}

unint64_t sub_1BA82ED5C()
{
  unint64_t result;

  result = qword_1ED3C8320;
  if (!qword_1ED3C8320)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBAD8, &_s10CodingKeysON_107);
    atomic_store(result, (unint64_t *)&qword_1ED3C8320);
  }
  return result;
}

unint64_t sub_1BA82EDA0()
{
  unint64_t result;

  result = qword_1ED3C8318;
  if (!qword_1ED3C8318)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBB00, &_s10CodingKeysON_107);
    atomic_store(result, (unint64_t *)&qword_1ED3C8318);
  }
  return result;
}

unint64_t sub_1BA82EDEC()
{
  unint64_t result;

  result = qword_1ED3C8308;
  if (!qword_1ED3C8308)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA0E0, &_s10CodingKeysON_124);
    atomic_store(result, (unint64_t *)&qword_1ED3C8308);
  }
  return result;
}

unint64_t sub_1BA82EE30()
{
  unint64_t result;

  result = qword_1ED3C8300;
  if (!qword_1ED3C8300)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA108, &_s10CodingKeysON_124);
    atomic_store(result, (unint64_t *)&qword_1ED3C8300);
  }
  return result;
}

unint64_t sub_1BA82EE78()
{
  unint64_t result;

  result = qword_1ED3B5D60;
  if (!qword_1ED3B5D60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B5D60);
  }
  return result;
}

unint64_t sub_1BA82EEBC()
{
  unint64_t result;

  result = qword_1ED3B5D50;
  if (!qword_1ED3B5D50)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B5D50);
  }
  return result;
}

unint64_t sub_1BA82EF00()
{
  unint64_t result;

  result = qword_1ED3B5D48;
  if (!qword_1ED3B5D48)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B5D48);
  }
  return result;
}

unint64_t sub_1BA82EF44()
{
  unint64_t result;

  result = qword_1ED3B00B8;
  if (!qword_1ED3B00B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B00B8);
  }
  return result;
}

void sub_1BA82EF88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA83708C();
    v7 = a3(a1, &type metadata for FormatFloat, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA82EFEC()
{
  unint64_t result;

  result = qword_1ED3C2150;
  if (!qword_1ED3C2150)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A25C8, &type metadata for FormatDecodingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C2150);
  }
  return result;
}

unint64_t sub_1BA82F030()
{
  unint64_t result;

  result = qword_1ED3C41E0;
  if (!qword_1ED3C41E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A25F0, &type metadata for FormatDecodingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C41E0);
  }
  return result;
}

unint64_t sub_1BA82F074()
{
  unint64_t result;

  result = qword_1ED3C41D8;
  if (!qword_1ED3C41D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A26B8, &type metadata for FormatDecodingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C41D8);
  }
  return result;
}

unint64_t sub_1BA82F0C0()
{
  unint64_t result;

  result = qword_1ED3C8200;
  if (!qword_1ED3C8200)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B78E0, &_s10CodingKeysON_156);
    atomic_store(result, (unint64_t *)&qword_1ED3C8200);
  }
  return result;
}

unint64_t sub_1BA82F104()
{
  unint64_t result;

  result = qword_1ED3C81F8;
  if (!qword_1ED3C81F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7908, &_s10CodingKeysON_156);
    atomic_store(result, (unint64_t *)&qword_1ED3C81F8);
  }
  return result;
}

uint64_t type metadata accessor for FormatCodingDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatCodingDefault);
}

unint64_t sub_1BA82F15C()
{
  unint64_t result;

  result = qword_1ED3C80F8;
  if (!qword_1ED3C80F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5D80, &_s10CodingKeysON_184);
    atomic_store(result, (unint64_t *)&qword_1ED3C80F8);
  }
  return result;
}

unint64_t sub_1BA82F1A0()
{
  unint64_t result;

  result = qword_1ED3C80F0;
  if (!qword_1ED3C80F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5DA8, &_s10CodingKeysON_184);
    atomic_store(result, (unint64_t *)&qword_1ED3C80F0);
  }
  return result;
}

unint64_t sub_1BA82F1EC()
{
  unint64_t result;

  result = qword_1ED3C80E0;
  if (!qword_1ED3C80E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B01A0, &_s10CodingKeysON_256);
    atomic_store(result, (unint64_t *)&qword_1ED3C80E0);
  }
  return result;
}

unint64_t sub_1BA82F230()
{
  unint64_t result;

  result = qword_1ED3C80D8;
  if (!qword_1ED3C80D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B01C8, &_s10CodingKeysON_256);
    atomic_store(result, (unint64_t *)&qword_1ED3C80D8);
  }
  return result;
}

unint64_t sub_1BA82F27C()
{
  unint64_t result;

  result = qword_1ED3C80C8;
  if (!qword_1ED3C80C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0EB8, &_s10CodingKeysON_248);
    atomic_store(result, (unint64_t *)&qword_1ED3C80C8);
  }
  return result;
}

unint64_t sub_1BA82F2C0()
{
  unint64_t result;

  result = qword_1ED3C80C0;
  if (!qword_1ED3C80C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0EE0, &_s10CodingKeysON_248);
    atomic_store(result, (unint64_t *)&qword_1ED3C80C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandShareContent()
{
  return &type metadata for CommandShareContent;
}

void sub_1BA82F318(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3BE418, (uint64_t (*)(uint64_t))sub_1BA768D08, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SaveCommandContext);
}

uint64_t type metadata accessor for SaveCommandContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SaveCommandContext);
}

uint64_t sub_1BA82F340()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1BA8195A4;
  return sub_1BA4B8F90();
}

uint64_t sub_1BA82F388()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1BA82F3E0()
{
  unint64_t v0;

  sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3B06F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB61D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BA82F47C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedHeadline(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA82F510()
{
  unint64_t result;

  result = qword_1ED3B5768;
  if (!qword_1ED3B5768)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for HeadlineViewLayout.Attributes, &type metadata for HeadlineViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B5768);
  }
  return result;
}

unint64_t sub_1BA82F554()
{
  unint64_t result;

  result = qword_1ED3B5760;
  if (!qword_1ED3B5760)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for HeadlineViewLayout.Attributes, &type metadata for HeadlineViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B5760);
  }
  return result;
}

unint64_t sub_1BA82F598()
{
  unint64_t result;

  result = qword_1ED3B5750;
  if (!qword_1ED3B5750)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for HeadlineViewLayout.Attributes, &type metadata for HeadlineViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B5750);
  }
  return result;
}

unint64_t sub_1BA82F5DC()
{
  unint64_t result;

  result = qword_1ED3B5748;
  if (!qword_1ED3B5748)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for HeadlineViewLayout.Attributes, &type metadata for HeadlineViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B5748);
  }
  return result;
}

unint64_t sub_1BA82F638()
{
  unint64_t result;

  result = qword_1ED3B5740;
  if (!qword_1ED3B5740)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8FA4CC, &type metadata for HeadlineViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B5740);
  }
  return result;
}

unint64_t sub_1BA82F67C()
{
  unint64_t result;

  result = qword_1ED3B5738;
  if (!qword_1ED3B5738)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8FA4F4, &type metadata for HeadlineViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B5738);
  }
  return result;
}

unint64_t sub_1BA82F6C8()
{
  unint64_t result;

  result = qword_1ED3C8000;
  if (!qword_1ED3C8000)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3810, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C8000);
  }
  return result;
}

unint64_t sub_1BA82F70C()
{
  unint64_t result;

  result = qword_1ED3C7FF8;
  if (!qword_1ED3C7FF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3838, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C7FF8);
  }
  return result;
}

unint64_t sub_1BA82F758()
{
  unint64_t result;

  result = qword_1ED3C7F00;
  if (!qword_1ED3C7F00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2C68, &_s10CodingKeysON_9);
    atomic_store(result, (unint64_t *)&qword_1ED3C7F00);
  }
  return result;
}

unint64_t sub_1BA82F79C()
{
  unint64_t result;

  result = qword_1ED3C7EF8;
  if (!qword_1ED3C7EF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2C90, &_s10CodingKeysON_9);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EF8);
  }
  return result;
}

uint64_t sub_1BA82F7E0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA82F85C()
{
  unint64_t result;

  result = qword_1ED3C7EE8;
  if (!qword_1ED3C7EE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1E08, &_s10CodingKeysON_25);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EE8);
  }
  return result;
}

unint64_t sub_1BA82F8A0()
{
  unint64_t result;

  result = qword_1ED3C7EE0;
  if (!qword_1ED3C7EE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1E30, &_s10CodingKeysON_25);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EE0);
  }
  return result;
}

unint64_t sub_1BA82F8EC()
{
  unint64_t result;

  result = qword_1ED3C7ED0;
  if (!qword_1ED3C7ED0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1970, &_s10CodingKeysON_29);
    atomic_store(result, (unint64_t *)&qword_1ED3C7ED0);
  }
  return result;
}

unint64_t sub_1BA82F930()
{
  unint64_t result;

  result = qword_1ED3C7EC8;
  if (!qword_1ED3C7EC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1998, &_s10CodingKeysON_29);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EC8);
  }
  return result;
}

void sub_1BA82F974()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for OsloSheetPurchaseDataModel(319);
  if (v0 <= 0x3F)
  {
    sub_1BA4B07F0(319, &qword_1ED3BB328, (uint64_t (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void sub_1BA82FA0C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3BE290, (uint64_t (*)(uint64_t))type metadata accessor for FormatPostPurchase, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BA82FA28()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatPostPurchase()
{
  uint64_t result;

  result = qword_1ED3BE280;
  if (!qword_1ED3BE280)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA82FAC0()
{
  unint64_t result;

  result = qword_1ED3C7E90;
  if (!qword_1ED3C7E90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD568, &_s14descr1E72CBEB9O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C7E90);
  }
  return result;
}

unint64_t sub_1BA82FB04()
{
  unint64_t result;

  result = qword_1ED3C7E88;
  if (!qword_1ED3C7E88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD590, &_s14descr1E72CBEB9O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C7E88);
  }
  return result;
}

uint64_t type metadata accessor for FormatModelFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatModelFactory);
}

uint64_t FormatModelFactory.init(factory:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
  return v1;
}

unint64_t sub_1BA82FB88()
{
  unint64_t result;

  result = qword_1ED3B5598;
  if (!qword_1ED3B5598)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalization, &type metadata for FormatLocalization);
    atomic_store(result, (unint64_t *)&qword_1ED3B5598);
  }
  return result;
}

unint64_t sub_1BA82FBCC()
{
  unint64_t result;

  result = qword_1ED3B5590;
  if (!qword_1ED3B5590)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLocalization, &type metadata for FormatLocalization);
    atomic_store(result, (unint64_t *)&qword_1ED3B5590);
  }
  return result;
}

unint64_t sub_1BA82FC18()
{
  unint64_t result;

  result = qword_1ED3C7E78;
  if (!qword_1ED3C7E78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2A88, &_s10CodingKeysON_219);
    atomic_store(result, (unint64_t *)&qword_1ED3C7E78);
  }
  return result;
}

unint64_t sub_1BA82FC5C()
{
  unint64_t result;

  result = qword_1ED3C7E70;
  if (!qword_1ED3C7E70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2AB0, &_s10CodingKeysON_219);
    atomic_store(result, (unint64_t *)&qword_1ED3C7E70);
  }
  return result;
}

uint64_t sub_1BA82FCA0(_QWORD *a1)
{
  return FormatIssueBinding.IssueCover.encode(to:)(a1);
}

unint64_t sub_1BA82FCB4()
{
  unint64_t result;

  result = qword_1ED39FD28;
  if (!qword_1ED39FD28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueBinding.IssueCover, &type metadata for FormatIssueBinding.IssueCover);
    atomic_store(result, (unint64_t *)&qword_1ED39FD28);
  }
  return result;
}

void sub_1BA82FCF8(_QWORD *a1@<X8>)
{
  *a1 = 0x766F436575737369;
  a1[1] = 0xEA00000000007265;
}

uint64_t sub_1BA82FD18()
{
  sub_1BA49F71C();
  return sub_1BB872D0C();
}

unint64_t sub_1BA82FD64()
{
  unint64_t result;

  result = qword_1ED3A61E8;
  if (!qword_1ED3A61E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB540, &_s10CodingTypeON_71);
    atomic_store(result, (unint64_t *)&qword_1ED3A61E8);
  }
  return result;
}

uint64_t FormatHOverlayNode.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  return sub_1BA7354D8(a1, a2);
}

void sub_1BA82FDBC()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for FeedWeather(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X10 }
}

uint64_t sub_1BA82FE84()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1BA4A9E78(*(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_bindingStack + 8), v3);
  if (!v0)
  {
    *(_BYTE *)(v4 - 240) = v1;
    FormatHeadlineBinding.Image.image(from:imageContext:)();
    return sub_1BA4A2E80(v3, type metadata accessor for FeedHeadline);
  }
  return result;
}

void FormatGroupBinding.Image.bind(binder:context:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1BA830320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_1BA830348 + 4 * byte_1BB8A5B9D[(v8 >> 59) & 2 | (v8 >> 2) & 1]))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1BA830348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v10 = v6;
  v11 = v5;
  sub_1BA967EC0(v8, v9);
  FormatTagIconStyle.bind(binder:context:)();
  return sub_1BAC65374(v8, v9, v7, v10, a5, v11, (uint64_t (*)(void))sub_1BA967D84, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_1BA740434);
}

unint64_t sub_1BA830650()
{
  unint64_t result;

  result = qword_1ED3C7C50;
  if (!qword_1ED3C7C50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B95E8, &_s10CodingKeysON_130);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C50);
  }
  return result;
}

unint64_t sub_1BA830694()
{
  unint64_t result;

  result = qword_1ED3C7C48;
  if (!qword_1ED3C7C48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9610, &_s10CodingKeysON_130);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C48);
  }
  return result;
}

uint64_t sub_1BA8306D8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatRemoteFont();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1BA83074C()
{
  unint64_t result;

  result = qword_1ED3C7C38;
  if (!qword_1ED3C7C38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8330, &_s10CodingKeysON_148);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C38);
  }
  return result;
}

unint64_t sub_1BA830790()
{
  unint64_t result;

  result = qword_1ED3C7C30;
  if (!qword_1ED3C7C30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8358, &_s10CodingKeysON_148);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C30);
  }
  return result;
}

unint64_t sub_1BA8307DC()
{
  unint64_t result;

  result = qword_1ED3C7C20;
  if (!qword_1ED3C7C20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B82A0, &_s10CodingKeysON_149);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C20);
  }
  return result;
}

unint64_t sub_1BA830820()
{
  unint64_t result;

  result = qword_1ED3C7C18;
  if (!qword_1ED3C7C18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B82C8, &_s10CodingKeysON_149);
    atomic_store(result, (unint64_t *)&qword_1ED3C7C18);
  }
  return result;
}

unint64_t sub_1BA830868()
{
  unint64_t result;

  result = qword_1ED3C7BF8;
  if (!qword_1ED3C7BF8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerFlag, &type metadata for FormatCompilerFlag);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BF8);
  }
  return result;
}

unint64_t sub_1BA8308AC()
{
  unint64_t result;

  result = qword_1ED3C7BE8;
  if (!qword_1ED3C7BE8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerFlag, &type metadata for FormatCompilerFlag);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BE8);
  }
  return result;
}

unint64_t sub_1BA8308F0()
{
  unint64_t result;

  result = qword_1ED3C7BE0;
  if (!qword_1ED3C7BE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerFlag, &type metadata for FormatCompilerFlag);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BE0);
  }
  return result;
}

unint64_t sub_1BA830934()
{
  unint64_t result;

  result = qword_1ED3C7BD8;
  if (!qword_1ED3C7BD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCompilerFlag, &type metadata for FormatCompilerFlag);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BD8);
  }
  return result;
}

uint64_t sub_1BA830978(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA49D568(a1, a2, a3, (uint64_t)&protocol conformance descriptor for FormatCommandValue<A, B>, (uint64_t)&protocol conformance descriptor for FormatCommandValue<A, B>, (uint64_t)&protocol conformance descriptor for FormatCommandValue<A, B>);
}

unint64_t sub_1BA830994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3C7BD0;
  if (!qword_1ED3C7BD0)
  {
    sub_1BA55B8C4(255, &qword_1ED3B5508, (uint64_t (*)(void))sub_1BA830FA0, (uint64_t)&type metadata for FormatTextContent, MEMORY[0x1E0DEA968]);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCommandValue<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3C7BD0);
  }
  return result;
}

uint64_t sub_1BA8309FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for EngagementBannerViewStyler();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1E72E60C0;
  *a1 = result;
  return result;
}

uint64_t sub_1BA830A40()
{
  sub_1BA4D9CE8(0, &qword_1ED3BFB68);
  sub_1BB86E5E4();
  return swift_release();
}

uint64_t sub_1BA830A90()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for CategoryViewStyler()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WebArchiveService()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WeatherKitService()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for WeakFormatTracker()
{
  return objc_opt_self();
}

uint64_t sub_1BA830B20()
{
  return _s8NewsFeed17SharedItemManagerC24loadInitialItemsIfNeeded13TeaFoundation7PromiseCySayAA0cD0VGGyF_0();
}

uint64_t sub_1BA830B40@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4B9E5C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

void sub_1BA830B4C(unint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1BA4C99E4(*(char **)(v1 + 16), a1);
}

uint64_t sub_1BA830B54()
{
  uint64_t v0;

  return sub_1BA4AB40C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BA830B5C()
{
  return sub_1BA4AD5D0();
}

uint64_t sub_1BA830B74@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4AE130(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1BA830B7C()
{
  uint64_t v0;

  return sub_1BA4CC358(*(void (**)())(v0 + 16));
}

uint64_t sub_1BA830B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BA830B90(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_1BA830B90(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  char *v14;
  uint64_t ObjectType;
  _QWORD v16[6];

  ObjectType = swift_getObjectType();
  result = sub_1BA4BECC8(a1);
  if ((result & 1) != 0)
  {
    v16[5] = *(_QWORD *)&a3[OBJC_IVAR____TtC8NewsFeed17SharedItemManager_lock];
    MEMORY[0x1E0C80A78](result);
    sub_1BB86DD5C();
    sub_1BA4B07F0(0, &qword_1ED3ABCA0, (uint64_t (*)(uint64_t))type metadata accessor for WeakSharedItemManagerObserver, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_retain();
    sub_1BB86E758();
    swift_release();
    v6 = v16[0];
    if (v16[0] >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_1BB873F30();
      v7 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v16[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        v8 = 0;
        do
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x1BCCE4630](v8, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * v8 + 32);
            swift_retain();
          }
          v16[3] = ObjectType;
          v16[4] = &protocol witness table for SharedItemManager;
          v16[0] = a3;
          if (MEMORY[0x1BCCE5D40](v10 + 16))
          {
            v11 = *(_QWORD *)(v10 + 24);
            v12 = swift_getObjectType();
            v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 8);
            v14 = a3;
            v13(v16, v12, v11);
            swift_unknownObjectRelease();
          }
          else
          {
            v9 = a3;
          }
          ++v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
          swift_release();

        }
        while (v7 != v8);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

void sub_1BA830DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BA4EE160(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1BA830DAC()
{
  uint64_t v0;

  return sub_1BA830DC4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BA830DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = a1 + OBJC_IVAR____TtC8NewsFeed17SharedItemManager_sharedItemCenter;
  swift_beginAccess();
  sub_1BA4C010C(v1, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(250, v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t sub_1BA830E58()
{
  _s8NewsFeed17SharedItemManagerC24loadInitialItemsIfNeeded13TeaFoundation7PromiseCySayAA0cD0VGGyF_0();
  return swift_release();
}

uint64_t type metadata accessor for PuzzleTypeManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA830E98(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for InternalErrorView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA830ED4()
{
  return sub_1BA830E98(&qword_1ED3B5168, (uint64_t)&protocol conformance descriptor for InternalErrorView);
}

void sub_1BA830EF8()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FormatVersioningMode(319);
  if (v0 <= 0x3F)
  {
    sub_1BA4B07F0(319, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_1BA830FA0()
{
  unint64_t result;

  result = qword_1ED3C7A30;
  if (!qword_1ED3C7A30)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextContent, &type metadata for FormatTextContent);
    atomic_store(result, (unint64_t *)&qword_1ED3C7A30);
  }
  return result;
}

unint64_t sub_1BA830FE4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA650B5C();
  a1[2] = sub_1BA76361C();
  result = sub_1BB563E3C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA831020()
{
  unint64_t result;

  result = qword_1ED3C7A18;
  if (!qword_1ED3C7A18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1E98, &_s10CodingKeysON_24);
    atomic_store(result, (unint64_t *)&qword_1ED3C7A18);
  }
  return result;
}

unint64_t sub_1BA831064()
{
  unint64_t result;

  result = qword_1ED3C7A10;
  if (!qword_1ED3C7A10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1EC0, &_s10CodingKeysON_24);
    atomic_store(result, (unint64_t *)&qword_1ED3C7A10);
  }
  return result;
}

unint64_t sub_1BA8310B0()
{
  unint64_t result;

  result = qword_1ED3C7A00;
  if (!qword_1ED3C7A00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1658, &_s10CodingKeysON_241);
    atomic_store(result, (unint64_t *)&qword_1ED3C7A00);
  }
  return result;
}

unint64_t sub_1BA8310F4()
{
  unint64_t result;

  result = qword_1ED3C79F8;
  if (!qword_1ED3C79F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1680, &_s10CodingKeysON_241);
    atomic_store(result, (unint64_t *)&qword_1ED3C79F8);
  }
  return result;
}

unint64_t sub_1BA831138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3BE010;
  if (!qword_1ED3BE010)
  {
    sub_1BA4CDF6C(255, &qword_1ED3BE018, (uint64_t (*)(void))sub_1BA8266B0, (uint64_t)&type metadata for FormatVideoPlayerContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatSwitchValue);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSwitchValue<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3BE010);
  }
  return result;
}

unint64_t sub_1BA8311A8()
{
  unint64_t result;

  result = qword_1ED3C79C8;
  if (!qword_1ED3C79C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0290, &_s10CodingKeysON_48);
    atomic_store(result, (unint64_t *)&qword_1ED3C79C8);
  }
  return result;
}

unint64_t sub_1BA8311EC()
{
  unint64_t result;

  result = qword_1ED3C79C0;
  if (!qword_1ED3C79C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C02B8, &_s10CodingKeysON_48);
    atomic_store(result, (unint64_t *)&qword_1ED3C79C0);
  }
  return result;
}

uint64_t dispatch thunk of FormatServiceType.prefetch(content:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void sub_1BA831248()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FormatURL();
  if (v0 <= 0x3F)
  {
    sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3B9070, (void (*)(uint64_t))type metadata accessor for FormatURL);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_1BA8312FC()
{
  unint64_t result;

  result = qword_1ED3C79B0;
  if (!qword_1ED3C79B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BEC80, &_s10CodingKeysON_64);
    atomic_store(result, (unint64_t *)&qword_1ED3C79B0);
  }
  return result;
}

unint64_t sub_1BA831340()
{
  unint64_t result;

  result = qword_1ED3C79A8;
  if (!qword_1ED3C79A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BECA8, &_s10CodingKeysON_64);
    atomic_store(result, (unint64_t *)&qword_1ED3C79A8);
  }
  return result;
}

unint64_t sub_1BA83138C()
{
  unint64_t result;

  result = qword_1ED3B4E40;
  if (!qword_1ED3B4E40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90BD30, &type metadata for FormatPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4E40);
  }
  return result;
}

unint64_t sub_1BA8313D0()
{
  unint64_t result;

  result = qword_1ED3B4E38;
  if (!qword_1ED3B4E38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90BD58, &type metadata for FormatPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4E38);
  }
  return result;
}

unint64_t sub_1BA83141C()
{
  unint64_t result;

  result = qword_1ED3C7998;
  if (!qword_1ED3C7998)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD1F0, &_s10CodingKeysON_86);
    atomic_store(result, (unint64_t *)&qword_1ED3C7998);
  }
  return result;
}

unint64_t sub_1BA831460()
{
  unint64_t result;

  result = qword_1ED3C7990;
  if (!qword_1ED3C7990)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD218, &_s10CodingKeysON_86);
    atomic_store(result, (unint64_t *)&qword_1ED3C7990);
  }
  return result;
}

uint64_t sub_1BA8314A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

unint64_t sub_1BA831578()
{
  unint64_t result;

  result = qword_1ED3A5C58;
  if (!qword_1ED3A5C58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC4F0, &_s14descr1E72CC509C10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A5C58);
  }
  return result;
}

unint64_t sub_1BA8315BC()
{
  unint64_t result;

  result = qword_1ED3A5C50;
  if (!qword_1ED3A5C50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BC518, &_s14descr1E72CC509C10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3A5C50);
  }
  return result;
}

unint64_t sub_1BA831600()
{
  unint64_t result;

  result = qword_1ED3B4CE0;
  if (!qword_1ED3B4CE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutValue, &type metadata for FormatLayoutValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B4CE0);
  }
  return result;
}

unint64_t sub_1BA831644()
{
  unint64_t result;

  result = qword_1ED3B4CD8;
  if (!qword_1ED3B4CD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutValue, &type metadata for FormatLayoutValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B4CD8);
  }
  return result;
}

unint64_t sub_1BA831688()
{
  unint64_t result;

  result = qword_1ED3B4CD0;
  if (!qword_1ED3B4CD0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutValue, &type metadata for FormatLayoutValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B4CD0);
  }
  return result;
}

unint64_t sub_1BA8316CC()
{
  unint64_t result;

  result = qword_1ED3B4CC8;
  if (!qword_1ED3B4CC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutValue, &type metadata for FormatLayoutValue);
    atomic_store(result, (unint64_t *)&qword_1ED3B4CC8);
  }
  return result;
}

unint64_t sub_1BA83171C()
{
  unint64_t result;

  result = qword_1ED3D4C30;
  if (!qword_1ED3D4C30)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatLayoutModel, &type metadata for FormatLayoutModel);
    atomic_store(result, (unint64_t *)&qword_1ED3D4C30);
  }
  return result;
}

unint64_t sub_1BA831760()
{
  unint64_t result;

  result = qword_1ED3B4BA8;
  if (!qword_1ED3B4BA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlot, &type metadata for FormatContentSlot);
    atomic_store(result, (unint64_t *)&qword_1ED3B4BA8);
  }
  return result;
}

unint64_t sub_1BA8317A4()
{
  unint64_t result;

  result = qword_1ED39B3F8;
  if (!qword_1ED39B3F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlot.Resolved, &type metadata for FormatContentSlot.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED39B3F8);
  }
  return result;
}

unint64_t sub_1BA8317E8()
{
  unint64_t result;

  result = qword_1ED39B3F0;
  if (!qword_1ED39B3F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlot.Resolved, &type metadata for FormatContentSlot.Resolved);
    atomic_store(result, (unint64_t *)&qword_1ED39B3F0);
  }
  return result;
}

unint64_t sub_1BA831834()
{
  unint64_t result;

  result = qword_1ED39B3E8;
  if (!qword_1ED39B3E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9354B8, &_s8ResolvedV10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1ED39B3E8);
  }
  return result;
}

unint64_t sub_1BA831878()
{
  unint64_t result;

  result = qword_1ED39B3E0;
  if (!qword_1ED39B3E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9354E0, &_s8ResolvedV10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1ED39B3E0);
  }
  return result;
}

unint64_t sub_1BA8318C4()
{
  unint64_t result;

  result = qword_1ED3B4B98;
  if (!qword_1ED3B4B98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931C90, &type metadata for FormatContentSlot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4B98);
  }
  return result;
}

unint64_t sub_1BA831908()
{
  unint64_t result;

  result = qword_1ED3B4B90;
  if (!qword_1ED3B4B90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931CB8, &type metadata for FormatContentSlot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4B90);
  }
  return result;
}

unint64_t sub_1BA831954()
{
  unint64_t result;

  result = qword_1ED3C7950;
  if (!qword_1ED3C7950)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3CD0, &_s10CodingKeysON_201);
    atomic_store(result, (unint64_t *)&qword_1ED3C7950);
  }
  return result;
}

unint64_t sub_1BA831998()
{
  unint64_t result;

  result = qword_1ED3C7948;
  if (!qword_1ED3C7948)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3CF8, &_s10CodingKeysON_201);
    atomic_store(result, (unint64_t *)&qword_1ED3C7948);
  }
  return result;
}

uint64_t type metadata accessor for FormatBundleCache()
{
  return objc_opt_self();
}

unint64_t sub_1BA831A04()
{
  unint64_t result;

  result = qword_1ED3A5B68;
  if (!qword_1ED3A5B68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4DF0, &_s10CodingKeysON_192);
    atomic_store(result, (unint64_t *)&qword_1ED3A5B68);
  }
  return result;
}

unint64_t sub_1BA831A48()
{
  unint64_t result;

  result = qword_1ED3A5B60;
  if (!qword_1ED3A5B60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4E18, &_s10CodingKeysON_192);
    atomic_store(result, (unint64_t *)&qword_1ED3A5B60);
  }
  return result;
}

unint64_t sub_1BA831A8C()
{
  unint64_t result;

  result = qword_1ED3B4AD0;
  if (!qword_1ED3B4AD0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ArticleAutomation, &type metadata for ArticleAutomation);
    atomic_store(result, (unint64_t *)&qword_1ED3B4AD0);
  }
  return result;
}

unint64_t sub_1BA831AD0()
{
  unint64_t result;

  result = qword_1ED3B4AC8;
  if (!qword_1ED3B4AC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ArticleAutomation, &type metadata for ArticleAutomation);
    atomic_store(result, (unint64_t *)&qword_1ED3B4AC8);
  }
  return result;
}

unint64_t sub_1BA831B14()
{
  unint64_t result;

  result = qword_1ED3B4AC0;
  if (!qword_1ED3B4AC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ArticleAutomation, &type metadata for ArticleAutomation);
    atomic_store(result, (unint64_t *)&qword_1ED3B4AC0);
  }
  return result;
}

uint64_t sub_1BA831B60(uint64_t a1)
{
  return sub_1BA852130(a1, &qword_1ED3BC890);
}

uint64_t sub_1BA831B80(uint64_t *a1, _QWORD *a2)
{
  return sub_1BA519498(a1, a2);
}

uint64_t sub_1BA831B94(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  __int128 v4;

  v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA505288(0, &qword_1ED3C5E60);
  sub_1BB86DF48();
  *(_OWORD *)(v2 + 16) = v4;
  return swift_unknownObjectRelease();
}

uint64_t sub_1BA831C14(uint64_t *a1, _QWORD *a2)
{
  return sub_1BA519498(a1, a2);
}

uint64_t sub_1BA831C28(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA84136C, MEMORY[0x1E0DB49B8]);
}

uint64_t sub_1BA831C3C()
{
  type metadata accessor for LayeredMediaLayerRenderableProvider();
  return swift_allocObject();
}

uint64_t sub_1BA831C5C(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, qword_1ED3D4838, (uint64_t)&protocol descriptor for CategoryViewStylerType, (void (*)(_QWORD))type metadata accessor for CategoryViewLayoutAttributesFactory, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA831C80@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaVariantSelector, (uint64_t)&off_1E729E3E8, a1);
}

uint64_t sub_1BA831C94(_QWORD *a1)
{
  return sub_1BA4DD1B0(a1, (void (*)(_QWORD))type metadata accessor for LayeredMediaLayerRenderableProvider, (void (*)(_QWORD))type metadata accessor for LayeredMediaViewModelFactory);
}

uint64_t sub_1BA831CA8(_QWORD *a1)
{
  return sub_1BA4DD1B0(a1, (void (*)(_QWORD))type metadata accessor for LayeredMediaLayerRenderableProvider, (void (*)(_QWORD))type metadata accessor for LayeredMediaViewProvider);
}

uint64_t sub_1BA831CBC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA4AD3F0(a1, (uint64_t (*)(_QWORD))type metadata accessor for CategoryViewStyler, (uint64_t)&off_1E7293398, a2, 16.0);
}

uint64_t sub_1BA831CD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA4A5F08((void (*)(_QWORD))type metadata accessor for GapViewRenderer, (uint64_t)&protocol witness table for GapViewRenderer, a1);
}

uint64_t sub_1BA831CE8()
{
  type metadata accessor for FormatSponsoredBannerNodeRenderer();
  return swift_allocObject();
}

uint64_t sub_1BA831D08(_QWORD *a1)
{
  return sub_1BA4DD1B0(a1, (void (*)(_QWORD))type metadata accessor for LayeredMediaLayerRenderer, (void (*)(_QWORD))type metadata accessor for LayeredMediaViewModelRenderer);
}

uint64_t sub_1BA831D1C(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, &qword_1ED3D3F70, (uint64_t)&protocol descriptor for IssueCoverViewRendererType, (void (*)(_QWORD))type metadata accessor for FormatIssueCoverNodeRenderer, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA831D40(_QWORD *a1)
{
  return sub_1BA4C8854(a1);
}

uint64_t sub_1BA831D48@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA4A5F08((void (*)(_QWORD))type metadata accessor for GapOfflineViewRenderer, (uint64_t)&protocol witness table for GapOfflineViewRenderer, a1);
}

uint64_t sub_1BA831D60@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED3D2EC8);
  v4 = sub_1BB86DF0C();
  sub_1BA4C010C((uint64_t)a1, (uint64_t)v10);
  if (v4 || (__swift_project_boxed_opaque_existential_1(v10, v10[3]), (result = sub_1BB86DF3C()) != 0))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    sub_1BB87048C();
    swift_allocObject();
    v6 = sub_1BB870480();
    type metadata accessor for FormatImageProcessor();
    *(_QWORD *)(swift_allocObject() + 16) = v6;
    sub_1BA50AD30(&qword_1ED3C8EE0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageProcessor, (uint64_t)&unk_1BB921288);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA505288(0, &qword_1ED3D2EC0);
    result = sub_1BB86DF48();
    if (v9)
    {
      v7 = sub_1BB86F484();
      swift_allocObject();
      result = sub_1BB86F478();
      v8 = MEMORY[0x1E0DB68A0];
      a2[3] = v7;
      a2[4] = v8;
      *a2 = result;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA831F38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA58BAF0(a1, (uint64_t (*)(uint64_t))type metadata accessor for ThumbnailProcessor, &qword_1ED3C80B0, (uint64_t)&protocol conformance descriptor for ThumbnailProcessor, a2);
}

uint64_t sub_1BA831F54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA58BAF0(a1, (uint64_t (*)(uint64_t))type metadata accessor for LayeredMediaLayerProcessor, (unint64_t *)&unk_1ED3CBBB0, (uint64_t)&protocol conformance descriptor for LayeredMediaLayerProcessor, a2);
}

uint64_t sub_1BA831F74(uint64_t a1)
{
  return sub_1BA5CF28C(a1);
}

uint64_t sub_1BA831F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PuzzleStatsState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA831FD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatsState.init(from:)(a1, a2);
}

unint64_t sub_1BA831FF4()
{
  unint64_t result;

  result = qword_1ED3A2A18;
  if (!qword_1ED3A2A18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F8CC, &type metadata for PuzzleStatsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2A18);
  }
  return result;
}

unint64_t sub_1BA832038()
{
  unint64_t result;

  result = qword_1ED3A2A10;
  if (!qword_1ED3A2A10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88F8F4, &type metadata for PuzzleStatsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2A10);
  }
  return result;
}

unint64_t sub_1BA83207C()
{
  unint64_t result;

  result = qword_1ED3D3990;
  if (!qword_1ED3D3990)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3D3990);
  }
  return result;
}

uint64_t dispatch thunk of OfflineProviding.addObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void sub_1BA8320D8(_QWORD *a1)
{
  FormatTagBinding.Color.encode(to:)(a1);
}

unint64_t sub_1BA8320EC()
{
  unint64_t result;

  result = qword_1ED3A5B28;
  if (!qword_1ED3A5B28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTagBinding.Color, &type metadata for FormatTagBinding.Color);
    atomic_store(result, (unint64_t *)&qword_1ED3A5B28);
  }
  return result;
}

uint64_t sub_1BA832130@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA8321E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA832158()
{
  sub_1BA49F9CC();
  return sub_1BB872D0C();
}

unint64_t sub_1BA8321A4()
{
  unint64_t result;

  result = qword_1ED3A5B20;
  if (!qword_1ED3A5B20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88CEFC, &_s14descr1E7283981V5ColorO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1ED3A5B20);
  }
  return result;
}

uint64_t sub_1BA8321E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA832228 + 4 * byte_1BB88CCC7[a1]))(0x756F726765726F66, 0xEF726F6C6F43646ELL);
}

unint64_t sub_1BA832228()
{
  return 0xD000000000000018;
}

unint64_t sub_1BA832288()
{
  return 0xD000000000000012;
}

unint64_t sub_1BA8323B8()
{
  unint64_t result;

  result = qword_1ED3A2A00;
  if (!qword_1ED3A2A00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTagBinding.Asset, &type metadata for FormatTagBinding.Asset);
    atomic_store(result, (unint64_t *)&qword_1ED3A2A00);
  }
  return result;
}

unint64_t sub_1BA832404()
{
  unint64_t result;

  result = qword_1ED3C7728;
  if (!qword_1ED3C7728)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1B20, &_s10CodingKeysON_26);
    atomic_store(result, (unint64_t *)&qword_1ED3C7728);
  }
  return result;
}

unint64_t sub_1BA832448()
{
  unint64_t result;

  result = qword_1ED3C7720;
  if (!qword_1ED3C7720)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1B48, &_s10CodingKeysON_26);
    atomic_store(result, (unint64_t *)&qword_1ED3C7720);
  }
  return result;
}

unint64_t sub_1BA832494()
{
  unint64_t result;

  result = qword_1ED3C7710;
  if (!qword_1ED3C7710)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1548, &_s10CodingKeysON_33);
    atomic_store(result, (unint64_t *)&qword_1ED3C7710);
  }
  return result;
}

unint64_t sub_1BA8324D8()
{
  unint64_t result;

  result = qword_1ED3C7708;
  if (!qword_1ED3C7708)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1570, &_s10CodingKeysON_33);
    atomic_store(result, (unint64_t *)&qword_1ED3C7708);
  }
  return result;
}

unint64_t sub_1BA832524()
{
  unint64_t result;

  result = qword_1ED3C76F8;
  if (!qword_1ED3C76F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1020, &_s10CodingKeysON_36);
    atomic_store(result, (unint64_t *)&qword_1ED3C76F8);
  }
  return result;
}

unint64_t sub_1BA832568()
{
  unint64_t result;

  result = qword_1ED3C76F0;
  if (!qword_1ED3C76F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C1048, &_s10CodingKeysON_36);
    atomic_store(result, (unint64_t *)&qword_1ED3C76F0);
  }
  return result;
}

unint64_t sub_1BA8325B4()
{
  unint64_t result;

  result = qword_1ED3C7618;
  if (!qword_1ED3C7618)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BEDA0, &_s10CodingKeysON_62);
    atomic_store(result, (unint64_t *)&qword_1ED3C7618);
  }
  return result;
}

unint64_t sub_1BA8325F8()
{
  unint64_t result;

  result = qword_1ED3C7610;
  if (!qword_1ED3C7610)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BEDC8, &_s10CodingKeysON_62);
    atomic_store(result, (unint64_t *)&qword_1ED3C7610);
  }
  return result;
}

uint64_t sub_1BA83263C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatURL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1BA8326C8()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA832754()
{
  unint64_t result;

  result = qword_1ED3A5A08;
  if (!qword_1ED3A5A08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDA58, &_s10CodingKeysON_79);
    atomic_store(result, (unint64_t *)&qword_1ED3A5A08);
  }
  return result;
}

unint64_t sub_1BA832798()
{
  unint64_t result;

  result = qword_1ED3A5A00;
  if (!qword_1ED3A5A00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BDA80, &_s10CodingKeysON_79);
    atomic_store(result, (unint64_t *)&qword_1ED3A5A00);
  }
  return result;
}

unint64_t sub_1BA8327E0()
{
  unint64_t result;

  result = qword_1ED3B4998;
  if (!qword_1ED3B4998)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionType, &type metadata for FormatOptionType);
    atomic_store(result, (unint64_t *)&qword_1ED3B4998);
  }
  return result;
}

unint64_t sub_1BA832824()
{
  unint64_t result;

  result = qword_1ED3B4990;
  if (!qword_1ED3B4990)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionType, &type metadata for FormatOptionType);
    atomic_store(result, (unint64_t *)&qword_1ED3B4990);
  }
  return result;
}

unint64_t sub_1BA832870()
{
  unint64_t result;

  result = qword_1ED3C7550;
  if (!qword_1ED3C7550)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD0D0, &_s10CodingKeysON_88);
    atomic_store(result, (unint64_t *)&qword_1ED3C7550);
  }
  return result;
}

unint64_t sub_1BA8328B4()
{
  unint64_t result;

  result = qword_1ED3C7548;
  if (!qword_1ED3C7548)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BD0F8, &_s10CodingKeysON_88);
    atomic_store(result, (unint64_t *)&qword_1ED3C7548);
  }
  return result;
}

uint64_t sub_1BA8328F8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutBindingContext();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BA832994()
{
  return sub_1BB6C792C(&qword_1ED3B4888, (uint64_t)&protocol conformance descriptor for FormatLayoutView);
}

uint64_t sub_1BA8329BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BA4C6214(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1BA8329EC()
{
  unint64_t result;

  result = qword_1ED3C7470;
  if (!qword_1ED3C7470)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBCC0, &_s10CodingKeysON_105);
    atomic_store(result, (unint64_t *)&qword_1ED3C7470);
  }
  return result;
}

unint64_t sub_1BA832A30()
{
  unint64_t result;

  result = qword_1ED3C7468;
  if (!qword_1ED3C7468)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BBCE8, &_s10CodingKeysON_105);
    atomic_store(result, (unint64_t *)&qword_1ED3C7468);
  }
  return result;
}

unint64_t sub_1BA832A74()
{
  unint64_t result;

  result = qword_1ED3C7460;
  if (!qword_1ED3C7460)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C9978, &_s10CodingKeysON_105);
    atomic_store(result, (unint64_t *)&qword_1ED3C7460);
  }
  return result;
}

uint64_t sub_1BA832AB8(_QWORD *a1)
{
  return FormatFixedColor.encode(to:)(a1);
}

unint64_t sub_1BA832ACC()
{
  unint64_t result;

  result = qword_1ED39B348;
  if (!qword_1ED39B348)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFixedColor, &type metadata for FormatFixedColor);
    atomic_store(result, (unint64_t *)&qword_1ED39B348);
  }
  return result;
}

uint64_t FormatFixedColor.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA832B3C + 4 * a9[*v0]))(0x6B63616C62, 0xE500000000000000);
}

uint64_t sub_1BA832B3C()
{
  return 1702194274;
}

uint64_t sub_1BA832B4C()
{
  return 0x6E776F7262;
}

uint64_t sub_1BA832B5C()
{
  return 1851881827;
}

uint64_t sub_1BA832B6C()
{
  return 0x796172476B726164;
}

uint64_t sub_1BA832B84()
{
  return 2036429415;
}

uint64_t sub_1BA832B94()
{
  return 0x6E65657267;
}

uint64_t sub_1BA832BA4()
{
  return 0x617247746867696CLL;
}

uint64_t sub_1BA832BC0()
{
  return 0x61746E6567616DLL;
}

uint64_t sub_1BA832BD8()
{
  return 0x65676E61726FLL;
}

uint64_t sub_1BA832BEC()
{
  return 0x656C70727570;
}

uint64_t sub_1BA832C00()
{
  return 0x6574696877;
}

uint64_t sub_1BA832C10()
{
  return 0x776F6C6C6579;
}

unint64_t sub_1BA832C2C()
{
  unint64_t result;

  result = qword_1ED3C7438;
  if (!qword_1ED3C7438)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8AB0, &_s10CodingKeysON_143);
    atomic_store(result, (unint64_t *)&qword_1ED3C7438);
  }
  return result;
}

unint64_t sub_1BA832C70()
{
  unint64_t result;

  result = qword_1ED3C7430;
  if (!qword_1ED3C7430)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8AD8, &_s10CodingKeysON_143);
    atomic_store(result, (unint64_t *)&qword_1ED3C7430);
  }
  return result;
}

unint64_t sub_1BA832CB4()
{
  unint64_t result;

  result = qword_1ED3B4848;
  if (!qword_1ED3B4848)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDecoration, &type metadata for FormatDecoration);
    atomic_store(result, (unint64_t *)&qword_1ED3B4848);
  }
  return result;
}

unint64_t sub_1BA832CF8()
{
  unint64_t result;

  result = qword_1ED3B4840;
  if (!qword_1ED3B4840)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDecoration, &type metadata for FormatDecoration);
    atomic_store(result, (unint64_t *)&qword_1ED3B4840);
  }
  return result;
}

unint64_t sub_1BA832D44()
{
  unint64_t result;

  result = qword_1ED3C7420;
  if (!qword_1ED3C7420)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8738, &_s10CodingKeysON_145);
    atomic_store(result, (unint64_t *)&qword_1ED3C7420);
  }
  return result;
}

unint64_t sub_1BA832D88()
{
  unint64_t result;

  result = qword_1ED3C7418;
  if (!qword_1ED3C7418)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B8760, &_s10CodingKeysON_145);
    atomic_store(result, (unint64_t *)&qword_1ED3C7418);
  }
  return result;
}

uint64_t sub_1BA832DCC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BAE7DCA4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1BA832DF4()
{
  unint64_t v0;

  sub_1BA648404(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1BA832E78()
{
  unint64_t v0;

  sub_1BA4B07F0(319, &qword_1ED3C7270, (uint64_t (*)(uint64_t))type metadata accessor for FormatCustomItem.Action, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA832F18()
{
  unint64_t result;

  result = qword_1ED39CC20;
  if (!qword_1ED39CC20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915E0C, &type metadata for FormatCustomItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39CC20);
  }
  return result;
}

unint64_t sub_1BA832F5C()
{
  unint64_t result;

  result = qword_1ED39CC18;
  if (!qword_1ED39CC18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915E34, &type metadata for FormatCustomItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39CC18);
  }
  return result;
}

unint64_t sub_1BA832FA8()
{
  unint64_t result;

  result = qword_1ED3A5918;
  if (!qword_1ED3A5918)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2968, &_s10CodingKeysON_221);
    atomic_store(result, (unint64_t *)&qword_1ED3A5918);
  }
  return result;
}

unint64_t sub_1BA832FEC()
{
  unint64_t result;

  result = qword_1ED3A5910;
  if (!qword_1ED3A5910)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2990, &_s10CodingKeysON_221);
    atomic_store(result, (unint64_t *)&qword_1ED3A5910);
  }
  return result;
}

uint64_t sub_1BA833030(_QWORD *a1)
{
  return FormatCountLimit.encode(to:)(a1);
}

unint64_t sub_1BA833044()
{
  unint64_t result;

  result = qword_1ED39FBA0;
  if (!qword_1ED39FBA0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCountLimit, &type metadata for FormatCountLimit);
    atomic_store(result, (unint64_t *)&qword_1ED39FBA0);
  }
  return result;
}

unint64_t sub_1BA833090()
{
  unint64_t result;

  result = qword_1ED3BDAC0;
  if (!qword_1ED3BDAC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB951914, &type metadata for FormatCountLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3BDAC0);
  }
  return result;
}

unint64_t sub_1BA8330D4()
{
  unint64_t result;

  result = qword_1ED3BDAB8;
  if (!qword_1ED3BDAB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB95193C, &type metadata for FormatCountLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3BDAB8);
  }
  return result;
}

unint64_t sub_1BA833120()
{
  unint64_t result;

  result = qword_1ED3B4830;
  if (!qword_1ED3B4830)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E6944, &type metadata for FormatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4830);
  }
  return result;
}

unint64_t sub_1BA833164()
{
  unint64_t result;

  result = qword_1ED3B4828;
  if (!qword_1ED3B4828)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8E696C, &type metadata for FormatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4828);
  }
  return result;
}

unint64_t sub_1BA8331B0()
{
  unint64_t result;

  result = qword_1ED3C7268;
  if (!qword_1ED3C7268)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B02F8, &_s10CodingKeysON_255);
    atomic_store(result, (unint64_t *)&qword_1ED3C7268);
  }
  return result;
}

unint64_t sub_1BA8331F4()
{
  unint64_t result;

  result = qword_1ED3C7260;
  if (!qword_1ED3C7260)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0320, &_s10CodingKeysON_255);
    atomic_store(result, (unint64_t *)&qword_1ED3C7260);
  }
  return result;
}

unint64_t sub_1BA83323C()
{
  unint64_t result;

  result = qword_1ED3B4818;
  if (!qword_1ED3B4818)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBorderEdge, &type metadata for FormatBorderEdge);
    atomic_store(result, (unint64_t *)&qword_1ED3B4818);
  }
  return result;
}

unint64_t sub_1BA833280()
{
  unint64_t result;

  result = qword_1ED3B4810;
  if (!qword_1ED3B4810)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBorderEdge, &type metadata for FormatBorderEdge);
    atomic_store(result, (unint64_t *)&qword_1ED3B4810);
  }
  return result;
}

unint64_t sub_1BA8332C4()
{
  unint64_t result;

  result = qword_1ED39B318;
  if (!qword_1ED39B318)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBorderEdge, &type metadata for FormatBorderEdge);
    atomic_store(result, (unint64_t *)&qword_1ED39B318);
  }
  return result;
}

void sub_1BA833308()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B4800)
  {
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B4800);
  }
}

unint64_t sub_1BA83335C()
{
  unint64_t result;

  result = qword_1ED3C7240;
  if (!qword_1ED3C7240)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAdjustment, &type metadata for FormatAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3C7240);
  }
  return result;
}

unint64_t sub_1BA8333A0()
{
  unint64_t result;

  result = qword_1ED3B47F0;
  if (!qword_1ED3B47F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAdjustment, &type metadata for FormatAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3B47F0);
  }
  return result;
}

unint64_t sub_1BA8333E4()
{
  unint64_t result;

  result = qword_1ED3B47E8;
  if (!qword_1ED3B47E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAdjustment, &type metadata for FormatAdjustment);
    atomic_store(result, (unint64_t *)&qword_1ED3B47E8);
  }
  return result;
}

unint64_t sub_1BA833428(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA8333A0();
  a1[2] = sub_1BA8333E4();
  result = sub_1BAB15F14();
  a1[3] = result;
  return result;
}

uint64_t type metadata accessor for FollowingManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA83347C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CoverChannelView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA8334B8()
{
  return sub_1BA83347C(&qword_1ED3B4728, (uint64_t)&protocol conformance descriptor for CoverChannelView);
}

uint64_t type metadata accessor for ShortcutManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA8334FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA833560(a1, (unint64_t *)&unk_1ED3CF9C0, (uint64_t)&protocol witness table for FCSportsEventController, a2);
}

uint64_t sub_1BA833518@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for StubOfflineProvider();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for StubOfflineProvider;
  *a1 = result;
  return result;
}

uint64_t sub_1BA833560@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = sub_1BA49A224(0, a2);
  result = sub_1BB86DF3C();
  if (result)
  {
    a4[3] = v7;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA8335E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for PerformanceIssueService();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1E72F3F90;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ResourceService()
{
  return objc_opt_self();
}

uint64_t ResourceService.init(cloudContext:)(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 2;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

unint64_t sub_1BA833664()
{
  unint64_t result;

  result = qword_1ED3A29D8;
  if (!qword_1ED3A29D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleTypeStats, &type metadata for PuzzleTypeStats);
    atomic_store(result, (unint64_t *)&qword_1ED3A29D8);
  }
  return result;
}

unint64_t sub_1BA8336A8()
{
  unint64_t result;

  result = qword_1ED3A29D0;
  if (!qword_1ED3A29D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleTypeStats, &type metadata for PuzzleTypeStats);
    atomic_store(result, (unint64_t *)&qword_1ED3A29D0);
  }
  return result;
}

unint64_t sub_1BA8336F4()
{
  unint64_t result;

  result = qword_1ED3A29C8;
  if (!qword_1ED3A29C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8911CC, &type metadata for PuzzleTypeStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A29C8);
  }
  return result;
}

unint64_t sub_1BA833738()
{
  unint64_t result;

  result = qword_1ED3A29C0;
  if (!qword_1ED3A29C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8911F4, &type metadata for PuzzleTypeStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A29C0);
  }
  return result;
}

uint64_t sub_1BA83377C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PuzzleStatisticCategory(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NativeAdService()
{
  return objc_opt_self();
}

uint64_t sub_1BA833810@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA5636AC(a1, (uint64_t (*)(_QWORD))type metadata accessor for SportsEmbedConfigurationManager, (uint64_t (*)(uint64_t, uint64_t, char *))sub_1BB063270, (uint64_t)&protocol witness table for SportsEmbedConfigurationManager, a2);
}

uint64_t sub_1BA833830@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA5636AC(a1, (uint64_t (*)(_QWORD))type metadata accessor for SportsTaxonomyGraphManager, (uint64_t (*)(uint64_t, uint64_t, char *))sub_1BA87BD00, (uint64_t)&protocol witness table for SportsTaxonomyGraphManager, a2);
}

uint64_t type metadata accessor for GapViewRenderer()
{
  return objc_opt_self();
}

uint64_t sub_1BA833874(uint64_t a1, double *a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v4 = a2[4];
  v5 = a2[5];
  v6 = a2[6];
  v7 = a2[7];
  sub_1BA4C010C(a1 + 56, (uint64_t)v12);
  v8 = *(void **)(a3 + OBJC_IVAR____TtC8NewsFeed7GapView_activityIndicatorView);
  objc_msgSend(v8, sel_setFrame_, v4, v5, v6, v7);
  v9 = v13;
  v10 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(void *, uint64_t, uint64_t))(v10 + 8))(v8, v9, v10);
  objc_msgSend(v8, sel_startAnimating);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

void sub_1BA833934()
{
  unint64_t v0;

  sub_1BA833A70();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FormatVideoView()
{
  uint64_t result;

  result = qword_1ED3C7148;
  if (!qword_1ED3C7148)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA833A00()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatVideoData.Assets(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1BA833A70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C7138)
  {
    type metadata accessor for FormatVideoData.Assets(255);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C7138);
  }
}

uint64_t type metadata accessor for FormatVideoData.Assets(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3BAC58);
}

unint64_t sub_1BA833AE0()
{
  unint64_t result;

  result = qword_1ED3C7130;
  if (!qword_1ED3C7130)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2AB8, &_s10CodingKeysON_10);
    atomic_store(result, (unint64_t *)&qword_1ED3C7130);
  }
  return result;
}

unint64_t sub_1BA833B24()
{
  unint64_t result;

  result = qword_1ED3C7128;
  if (!qword_1ED3C7128)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2AE0, &_s10CodingKeysON_10);
    atomic_store(result, (unint64_t *)&qword_1ED3C7128);
  }
  return result;
}

void sub_1BA833B68()
{
  unint64_t v0;

  sub_1BA49EAE0();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FormatSplitView()
{
  uint64_t result;

  result = qword_1ED3C7108;
  if (!qword_1ED3C7108)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA833C28()
{
  unint64_t result;

  result = qword_1ED3C7100;
  if (!qword_1ED3C7100)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0600, &_s10CodingKeysON_251);
    atomic_store(result, (unint64_t *)&qword_1ED3C7100);
  }
  return result;
}

unint64_t sub_1BA833C6C()
{
  unint64_t result;

  result = qword_1ED3C70F8;
  if (!qword_1ED3C70F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0628, &_s10CodingKeysON_251);
    atomic_store(result, (unint64_t *)&qword_1ED3C70F8);
  }
  return result;
}

unint64_t sub_1BA833CB8()
{
  unint64_t result;

  result = qword_1ED3C70E8;
  if (!qword_1ED3C70E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0320, &_s10CodingKeysON_47);
    atomic_store(result, (unint64_t *)&qword_1ED3C70E8);
  }
  return result;
}

unint64_t sub_1BA833CFC()
{
  unint64_t result;

  result = qword_1ED3C70E0;
  if (!qword_1ED3C70E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0348, &_s10CodingKeysON_47);
    atomic_store(result, (unint64_t *)&qword_1ED3C70E0);
  }
  return result;
}

_QWORD *sub_1BA833D40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1BA4D6FA0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1BA833D70()
{
  unint64_t result;

  result = qword_1ED3C7010;
  if (!qword_1ED3C7010)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BEEC0, &_s10CodingKeysON_60);
    atomic_store(result, (unint64_t *)&qword_1ED3C7010);
  }
  return result;
}

unint64_t sub_1BA833DB4()
{
  unint64_t result;

  result = qword_1ED3C7008;
  if (!qword_1ED3C7008)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BEEE8, &_s10CodingKeysON_60);
    atomic_store(result, (unint64_t *)&qword_1ED3C7008);
  }
  return result;
}

unint64_t sub_1BA833DF8()
{
  unint64_t result;

  result = qword_1ED3C7000;
  if (!qword_1ED3C7000)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C72B8, &_s10CodingKeysON_60);
    atomic_store(result, (unint64_t *)&qword_1ED3C7000);
  }
  return result;
}

unint64_t sub_1BA833E3C()
{
  unint64_t result;

  result = qword_1ED3B44E0;
  if (!qword_1ED3B44E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNodeStyle, &type metadata for FormatNodeStyle);
    atomic_store(result, (unint64_t *)&qword_1ED3B44E0);
  }
  return result;
}

unint64_t sub_1BA833E84()
{
  unint64_t result;

  result = qword_1ED3B44C8;
  if (!qword_1ED3B44C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemTrait, &type metadata for FormatItemTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B44C8);
  }
  return result;
}

unint64_t sub_1BA833EC8()
{
  unint64_t result;

  result = qword_1ED39FA48;
  if (!qword_1ED39FA48)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemTrait, &type metadata for FormatItemTrait);
    atomic_store(result, (unint64_t *)&qword_1ED39FA48);
  }
  return result;
}

unint64_t sub_1BA833F0C()
{
  unint64_t result;

  result = qword_1ED39EC40;
  if (!qword_1ED39EC40)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemTrait, &type metadata for FormatItemTrait);
    atomic_store(result, (unint64_t *)&qword_1ED39EC40);
  }
  return result;
}

unint64_t sub_1BA833F50()
{
  unint64_t result;

  result = qword_1ED3AFEA8;
  if (!qword_1ED3AFEA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemTrait, &type metadata for FormatItemTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3AFEA8);
  }
  return result;
}

uint64_t sub_1BA833F94()
{
  return swift_initClassMetadata2();
}

unint64_t sub_1BA833FEC()
{
  unint64_t result;

  result = qword_1ED3C6EF0;
  if (!qword_1ED3C6EF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BADF8, &_s10CodingKeysON_116);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EF0);
  }
  return result;
}

unint64_t sub_1BA834030()
{
  unint64_t result;

  result = qword_1ED3C6EE8;
  if (!qword_1ED3C6EE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BAE20, &_s10CodingKeysON_116);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EE8);
  }
  return result;
}

uint64_t sub_1BA834074(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BA4D87B4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1BA8340A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BA5147A4(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1);
}

unint64_t sub_1BA8340D0()
{
  unint64_t result;

  result = qword_1ED3C6ED8;
  if (!qword_1ED3C6ED8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA050, &_s14descr1E72CBFF1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6ED8);
  }
  return result;
}

unint64_t sub_1BA834114()
{
  unint64_t result;

  result = qword_1ED3C6ED0;
  if (!qword_1ED3C6ED0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA078, &_s14descr1E72CBFF1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6ED0);
  }
  return result;
}

unint64_t sub_1BA834160()
{
  unint64_t result;

  result = qword_1ED3C6EC0;
  if (!qword_1ED3C6EC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B23D0, &_s10CodingKeysON_224);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EC0);
  }
  return result;
}

unint64_t sub_1BA8341A4()
{
  unint64_t result;

  result = qword_1ED3C6EB8;
  if (!qword_1ED3C6EB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B23F8, &_s10CodingKeysON_224);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EB8);
  }
  return result;
}

unint64_t sub_1BA8341EC()
{
  unint64_t result;

  result = qword_1ED3B44B8;
  if (!qword_1ED3B44B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontTrait, &type metadata for FormatFontTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B44B8);
  }
  return result;
}

unint64_t sub_1BA834230()
{
  unint64_t result;

  result = qword_1ED3B44A8;
  if (!qword_1ED3B44A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontTrait, &type metadata for FormatFontTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B44A8);
  }
  return result;
}

unint64_t sub_1BA834274()
{
  unint64_t result;

  result = qword_1ED3B44A0;
  if (!qword_1ED3B44A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontTrait, &type metadata for FormatFontTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3B44A0);
  }
  return result;
}

unint64_t sub_1BA8342B8()
{
  unint64_t result;

  result = qword_1ED3AFEA0;
  if (!qword_1ED3AFEA0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontTrait, &type metadata for FormatFontTrait);
    atomic_store(result, (unint64_t *)&qword_1ED3AFEA0);
  }
  return result;
}

unint64_t sub_1BA834304()
{
  unint64_t result;

  result = qword_1ED3C6EA8;
  if (!qword_1ED3C6EA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6C50, &_s10CodingKeysON_167);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EA8);
  }
  return result;
}

unint64_t sub_1BA834348()
{
  unint64_t result;

  result = qword_1ED3C6EA0;
  if (!qword_1ED3C6EA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6C78, &_s10CodingKeysON_167);
    atomic_store(result, (unint64_t *)&qword_1ED3C6EA0);
  }
  return result;
}

uint64_t type metadata accessor for FormatAnimation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FontBookFactory()
{
  return objc_opt_self();
}

uint64_t sub_1BA8343CC()
{
  type metadata accessor for FeedPuzzleStatisticFactory();
  return swift_allocObject();
}

uint64_t sub_1BA8343EC()
{
  type metadata accessor for FeedPuzzleTypeFactory();
  return swift_allocObject();
}

uint64_t sub_1BA83440C()
{
  sub_1BA505288(0, (unint64_t *)&unk_1ED3CE180);
  sub_1BB86E5E4();
  return swift_release();
}

uint64_t sub_1BA834464(uint64_t a1)
{
  return sub_1BA503EC4(a1, (void (*)(_QWORD, double))type metadata accessor for FollowingCommandHandler);
}

uint64_t sub_1BA834478(uint64_t a1)
{
  return sub_1BA503EC4(a1, (void (*)(_QWORD, double))type metadata accessor for LiveActivityCommandHandler);
}

uint64_t sub_1BA83448C(uint64_t a1)
{
  return sub_1BA503EC4(a1, (void (*)(_QWORD, double))type metadata accessor for LikingCommandHandler);
}

uint64_t sub_1BA8344A0()
{
  type metadata accessor for BlockingCompleteCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1BA8344C0(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for BlockingCompleteCommandHandler);
}

uint64_t sub_1BA8344D4(uint64_t a1)
{
  return sub_1BA503EC4(a1, (void (*)(_QWORD, double))type metadata accessor for LikingCompleteCommandHandler);
}

uint64_t sub_1BA8344E8(_QWORD *a1)
{
  return sub_1BA555A6C(a1, (void (*)(_QWORD))type metadata accessor for FeedPersonalizationDetailCommandHandler);
}

uint64_t sub_1BA8344F4(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for FeedPersonalizationDetailCommandHandler);
}

uint64_t sub_1BA834508(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for FeedDatabaseCommandHandler);
}

uint64_t sub_1BA83451C(_QWORD *a1)
{
  return sub_1BA4C8DC8(a1, (uint64_t)&qword_1ED3B97D0, 0x1E0D58A40, (void (*)(_QWORD, uint64_t, uint64_t))sub_1BA49A224, (void (*)(_QWORD))type metadata accessor for FeedCursorDatabaseCommandHandler);
}

uint64_t sub_1BA834540(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for FeedCursorDatabaseCommandHandler);
}

uint64_t sub_1BA834554(_QWORD *a1)
{
  return sub_1BA555A6C(a1, (void (*)(_QWORD))type metadata accessor for FeedCursorCommandHandler);
}

uint64_t sub_1BA834560(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for FeedCursorCommandHandler);
}

uint64_t sub_1BA834574()
{
  type metadata accessor for ReportScoreConcernCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1BA834594(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for ReportScoreConcernCommandHandler);
}

uint64_t sub_1BA8345A8(_QWORD *a1)
{
  return sub_1BA4C8DC8(a1, (uint64_t)&unk_1ED3B98B0, (uint64_t)&protocolRef_FCPaidAccessCheckerType, (void (*)(_QWORD, uint64_t, uint64_t))sub_1BA4EFE00, (void (*)(_QWORD))type metadata accessor for CopyIssueCommandHandler);
}

uint64_t sub_1BA8345CC(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for CopyIssueCommandHandler);
}

uint64_t sub_1BA8345E0(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for BlockingCommandHandler);
}

id sub_1BA8345F4()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotificationCommandHandler()), sel_init);
}

uint64_t sub_1BA834618(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for NotificationCommandHandler);
}

uint64_t sub_1BA83462C(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for OpenURLCommandHandler);
}

uint64_t sub_1BA834640(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for ClearSavedCommandHandler);
}

uint64_t sub_1BA834654(uint64_t a1)
{
  return sub_1BA4DE360(a1, (void (*)(_QWORD))type metadata accessor for SavingCommandHandler);
}

uint64_t sub_1BA834668(uint64_t a1)
{
  return sub_1BA503EC4(a1, (void (*)(_QWORD, double))type metadata accessor for ShortcutCommandHandler);
}

void sub_1BA834680()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA834690()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for ViewAutomation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewAutomation);
}

void sub_1BA8346AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3C4178)
  {
    v4 = type metadata accessor for OfflineManager(0, (uint64_t)&type metadata for FormatOfflineModel, (uint64_t)&off_1E730DCF8, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3C4178);
  }
}

void sub_1BA834708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3C6E90)
  {
    v4 = type metadata accessor for OfflineManager(0, (uint64_t)&type metadata for FormatVideoPlayerOfflineModel, (uint64_t)&off_1E73425C0, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3C6E90);
  }
}

uint64_t sub_1BA834764(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for OfflineManager.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OfflineManager.State);
}

BOOL OfflineManager.State.isOffline.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) != 0;
}

uint64_t sub_1BA834810@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for FontBookFactory, (uint64_t)&protocol witness table for FontBookFactory, a1);
}

uint64_t sub_1BA834824@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for FeedLayoutTracker, (uint64_t)&off_1E7286308, a1);
}

uint64_t sub_1BA83483C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for GapOfflineView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA834878()
{
  return sub_1BA83483C(&qword_1ED3B4260, (uint64_t)&protocol conformance descriptor for GapOfflineView);
}

void sub_1BA83489C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for FormatWebEmbed();
  if (v0 <= 0x3F)
  {
    sub_1BA6CAB4C(319);
    if (v1 <= 0x3F)
    {
      sub_1BA6C5ACC(319);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

unint64_t sub_1BA834960()
{
  unint64_t result;

  result = qword_1ED3C6DB0;
  if (!qword_1ED3C6DB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3408, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1ED3C6DB0);
  }
  return result;
}

unint64_t sub_1BA8349A4()
{
  unint64_t result;

  result = qword_1ED3C6DA8;
  if (!qword_1ED3C6DA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C3430, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1ED3C6DA8);
  }
  return result;
}

void sub_1BA8349E8()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, (unint64_t *)&qword_1ED3BB118, (void (*)(uint64_t))type metadata accessor for FormatViewBackground);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BA834A60@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA6EDCD4(&qword_1ED3C6D88, (uint64_t)qword_1ED476C80, a1);
}

uint64_t sub_1BA834A7C(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C80);
}

uint64_t sub_1BA834A90(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C68);
}

uint64_t sub_1BA834AA4(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C50);
}

uint64_t sub_1BA834AB8(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C38);
}

uint64_t sub_1BA834ACC(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C20);
}

double sub_1BA834AE0()
{
  uint64_t v0;
  double result;

  sub_1BA81BC34();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v0 + 56) = &type metadata for FormatVersions.CrystalGlow;
  *(_QWORD *)(v0 + 64) = &off_1E734BC60;
  qword_1ED476948 = v0;
  return result;
}

uint64_t sub_1BA834B2C(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476C08);
}

uint64_t sub_1BA834B40(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476BF0);
}

uint64_t sub_1BA834B54@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA6EDCD4(&qword_1ED3C6D48, (uint64_t)qword_1ED476BD8, a1);
}

uint64_t sub_1BA834B70(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476BD8);
}

uint64_t sub_1BA834B84(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476BC0);
}

uint64_t sub_1BA834B98(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476BA8);
}

uint64_t sub_1BA834BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA6EDCD4(&qword_1ED3C6D30, (uint64_t)qword_1ED476B90, a1);
}

uint64_t sub_1BA834BC8(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476B90);
}

uint64_t sub_1BA834BDC(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476B78);
}

uint64_t sub_1BA834BF0(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476B60);
}

double sub_1BA834C04()
{
  uint64_t v0;
  double result;

  sub_1BA81BC34();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 15;
  *(_OWORD *)(v0 + 16) = xmmword_1BB947E70;
  *(_QWORD *)(v0 + 56) = &type metadata for FormatVersions.JazzkonC;
  *(_QWORD *)(v0 + 64) = &off_1E734BD80;
  *(_QWORD *)(v0 + 96) = &type metadata for FormatVersions.JazzkonG;
  *(_QWORD *)(v0 + 104) = &off_1E734BD00;
  *(_QWORD *)(v0 + 136) = &type metadata for FormatVersions.Azden;
  *(_QWORD *)(v0 + 144) = &off_1E734BC80;
  *(_QWORD *)(v0 + 176) = &type metadata for FormatVersions.AzdenB;
  *(_QWORD *)(v0 + 184) = &off_1E734BC20;
  *(_QWORD *)(v0 + 216) = &type metadata for FormatVersions.AzdenC;
  *(_QWORD *)(v0 + 224) = &off_1E734BCC0;
  *(_QWORD *)(v0 + 256) = &type metadata for FormatVersions.AzdenE;
  *(_QWORD *)(v0 + 264) = &off_1E734BD20;
  *(_QWORD *)(v0 + 296) = &type metadata for FormatVersions.StarSky;
  *(_QWORD *)(v0 + 304) = &off_1E734BDC0;
  *(_QWORD *)(v0 + 336) = &type metadata for FormatVersions.StarSkyC;
  *(_QWORD *)(v0 + 344) = &off_1E734BC40;
  *(_QWORD *)(v0 + 376) = &type metadata for FormatVersions.StarSkyE;
  *(_QWORD *)(v0 + 384) = &off_1E734BDA0;
  *(_QWORD *)(v0 + 416) = &type metadata for FormatVersions.Sydro;
  *(_QWORD *)(v0 + 424) = &off_1E734BD40;
  *(_QWORD *)(v0 + 456) = &type metadata for FormatVersions.SydroC;
  *(_QWORD *)(v0 + 464) = &off_1E734BC00;
  *(_QWORD *)(v0 + 496) = &type metadata for FormatVersions.SydroF;
  *(_QWORD *)(v0 + 504) = &off_1E734BD60;
  *(_QWORD *)(v0 + 536) = &type metadata for FormatVersions.Dawnburst;
  *(_QWORD *)(v0 + 544) = &off_1E734BDE0;
  *(_QWORD *)(v0 + 576) = &type metadata for FormatVersions.DawnburstC;
  *(_QWORD *)(v0 + 584) = &off_1E734BCA0;
  *(_QWORD *)(v0 + 616) = &type metadata for FormatVersions.DawnburstF;
  *(_QWORD *)(v0 + 624) = &off_1E734BCE0;
  qword_1ED4769C0 = v0;
  return result;
}

uint64_t sub_1BA834D74()
{
  return 0x737275626E776144;
}

uint64_t sub_1BA834D90@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA6EDCD4(&qword_1ED3C4168, (uint64_t)qword_1ED476900, a1);
}

uint64_t sub_1BA834DAC()
{
  return 0x737275626E776144;
}

uint64_t sub_1BA834DC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BA6EDCD4(&qword_1ED3C6D00, (uint64_t)qword_1ED476B48, a1);
}

uint64_t sub_1BA834DE4(uint64_t a1)
{
  return sub_1BA5429CC(a1, qword_1ED476B48);
}

unint64_t sub_1BA834E00()
{
  unint64_t result;

  result = qword_1ED3C6CF8;
  if (!qword_1ED3C6CF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2BD8, &_s14descr1E72CC061V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6CF8);
  }
  return result;
}

unint64_t sub_1BA834E44()
{
  unint64_t result;

  result = qword_1ED3C6CF0;
  if (!qword_1ED3C6CF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C2C00, &_s14descr1E72CC061V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6CF0);
  }
  return result;
}

unint64_t sub_1BA834E90()
{
  unint64_t result;

  result = qword_1ED3C6CE0;
  if (!qword_1ED3C6CE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B2780, &_s10CodingKeysON_223);
    atomic_store(result, (unint64_t *)&qword_1ED3C6CE0);
  }
  return result;
}

unint64_t sub_1BA834ED4()
{
  unint64_t result;

  result = qword_1ED3C6CD8;
  if (!qword_1ED3C6CD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B27A8, &_s10CodingKeysON_223);
    atomic_store(result, (unint64_t *)&qword_1ED3C6CD8);
  }
  return result;
}

unint64_t sub_1BA834F20()
{
  unint64_t result;

  result = qword_1ED3C6C20;
  if (!qword_1ED3C6C20)
  {
    result = MEMORY[0x1BCCE5B24]("aʠ+", &_s10CodingKeysON_49);
    atomic_store(result, (unint64_t *)&qword_1ED3C6C20);
  }
  return result;
}

unint64_t sub_1BA834F64()
{
  unint64_t result;

  result = qword_1ED3C6C18;
  if (!qword_1ED3C6C18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0160, &_s10CodingKeysON_49);
    atomic_store(result, (unint64_t *)&qword_1ED3C6C18);
  }
  return result;
}

unint64_t sub_1BA834FAC()
{
  unint64_t result;

  result = qword_1ED3BB680;
  if (!qword_1ED3BB680)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelector, &type metadata for FormatSelector);
    atomic_store(result, (unint64_t *)&qword_1ED3BB680);
  }
  return result;
}

unint64_t sub_1BA834FF0()
{
  unint64_t result;

  result = qword_1ED3BB678;
  if (!qword_1ED3BB678)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelector, &type metadata for FormatSelector);
    atomic_store(result, (unint64_t *)&qword_1ED3BB678);
  }
  return result;
}

uint64_t sub_1BA835034()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FormatFontResource(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FormatRemoteImage();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BA8350B4()
{
  unint64_t result;

  result = qword_1ED3B4190;
  if (!qword_1ED3B4190)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProperty, &type metadata for FormatProperty);
    atomic_store(result, (unint64_t *)&qword_1ED3B4190);
  }
  return result;
}

unint64_t sub_1BA835100()
{
  unint64_t result;

  result = qword_1ED3B4178;
  if (!qword_1ED3B4178)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB883AA8, &type metadata for FormatProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4178);
  }
  return result;
}

unint64_t sub_1BA835144()
{
  unint64_t result;

  result = qword_1ED3B4170;
  if (!qword_1ED3B4170)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB883AD0, &type metadata for FormatProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4170);
  }
  return result;
}

void sub_1BA835188()
{
  unint64_t v0;

  sub_1BA7735BC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA83520C()
{
  unint64_t result;

  result = qword_1ED3B4090;
  if (!qword_1ED3B4090)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB94398C, &type metadata for FormatMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4090);
  }
  return result;
}

unint64_t sub_1BA835250()
{
  unint64_t result;

  result = qword_1ED3B4088;
  if (!qword_1ED3B4088)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9439B4, &type metadata for FormatMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4088);
  }
  return result;
}

unint64_t sub_1BA835294()
{
  unint64_t result;

  result = qword_1ED3B4078;
  if (!qword_1ED3B4078)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8FADD4, &type metadata for FormatMenuItem);
    atomic_store(result, (unint64_t *)&qword_1ED3B4078);
  }
  return result;
}

unint64_t sub_1BA8352D8()
{
  unint64_t result;

  result = qword_1ED39B200;
  if (!qword_1ED39B200)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8FAD64, &type metadata for FormatMenuItem);
    atomic_store(result, (unint64_t *)&qword_1ED39B200);
  }
  return result;
}

unint64_t sub_1BA835324()
{
  unint64_t result;

  result = qword_1ED3C6BF8;
  if (!qword_1ED3C6BF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D25F0, &_s10CodingKeysON_260);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BF8);
  }
  return result;
}

unint64_t sub_1BA835368()
{
  unint64_t result;

  result = qword_1ED3C6BF0;
  if (!qword_1ED3C6BF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D2618, &_s10CodingKeysON_260);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BF0);
  }
  return result;
}

unint64_t sub_1BA8353B4()
{
  unint64_t result;

  result = qword_1ED3C6BE0;
  if (!qword_1ED3C6BE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB980, &_s10CodingKeysON_108);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BE0);
  }
  return result;
}

unint64_t sub_1BA8353F8()
{
  unint64_t result;

  result = qword_1ED3C6BD8;
  if (!qword_1ED3C6BD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB9A8, &_s10CodingKeysON_108);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BD8);
  }
  return result;
}

unint64_t sub_1BA835440()
{
  unint64_t result;

  result = qword_1ED3B4068;
  if (!qword_1ED3B4068)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemKind, &type metadata for FormatItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B4068);
  }
  return result;
}

unint64_t sub_1BA835484()
{
  unint64_t result;

  result = qword_1ED3B4060;
  if (!qword_1ED3B4060)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItemKind, &type metadata for FormatItemKind);
    atomic_store(result, (unint64_t *)&qword_1ED3B4060);
  }
  return result;
}

unint64_t sub_1BA8354C8()
{
  unint64_t result;

  result = qword_1ED39E558;
  if (!qword_1ED39E558)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89379C, &type metadata for FormatItemKind.Object);
    atomic_store(result, (unint64_t *)&qword_1ED39E558);
  }
  return result;
}

unint64_t sub_1BA835514()
{
  unint64_t result;

  result = qword_1ED3BAB48;
  if (!qword_1ED3BAB48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89388C, &type metadata for FormatItemKind.Object.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3BAB48);
  }
  return result;
}

unint64_t sub_1BA835558()
{
  unint64_t result;

  result = qword_1ED3BAB40;
  if (!qword_1ED3BAB40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8938B4, &type metadata for FormatItemKind.Object.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3BAB40);
  }
  return result;
}

void sub_1BA83559C(_QWORD *a1@<X8>)
{
  *a1 = 0x6D6F74737563;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1BA8355B4()
{
  sub_1BA4A7E98();
  return sub_1BB872D0C();
}

unint64_t sub_1BA835600()
{
  unint64_t result;

  result = qword_1ED39E550;
  if (!qword_1ED39E550)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8937C4, &type metadata for FormatItemKind.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED39E550);
  }
  return result;
}

unint64_t sub_1BA83564C()
{
  unint64_t result;

  result = qword_1ED3B4058;
  if (!qword_1ED3B4058)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89360C, &type metadata for FormatItemKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4058);
  }
  return result;
}

unint64_t sub_1BA835690()
{
  unint64_t result;

  result = qword_1ED3B4050;
  if (!qword_1ED3B4050)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB893634, &type metadata for FormatItemKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B4050);
  }
  return result;
}

unint64_t sub_1BA8356DC()
{
  unint64_t result;

  result = qword_1ED3C6BC8;
  if (!qword_1ED3C6BC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA358, &_s10CodingKeysON_121);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BC8);
  }
  return result;
}

unint64_t sub_1BA835720()
{
  unint64_t result;

  result = qword_1ED3C6BC0;
  if (!qword_1ED3C6BC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BA380, &_s10CodingKeysON_121);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BC0);
  }
  return result;
}

unint64_t sub_1BA83576C()
{
  unint64_t result;

  result = qword_1ED3C6BB0;
  if (!qword_1ED3C6BB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9678, &_s10CodingKeysON_129);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BB0);
  }
  return result;
}

unint64_t sub_1BA8357B0()
{
  unint64_t result;

  result = qword_1ED3C6BA8;
  if (!qword_1ED3C6BA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B96A0, &_s10CodingKeysON_129);
    atomic_store(result, (unint64_t *)&qword_1ED3C6BA8);
  }
  return result;
}

unint64_t sub_1BA8357F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B4018;
  if (!qword_1ED3B4018)
  {
    sub_1BA4CDF6C(255, &qword_1ED3B4028, (uint64_t (*)(void))sub_1BA835D64, (uint64_t)&type metadata for FormatInteger, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatEquation);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B4018);
  }
  return result;
}

unint64_t sub_1BA83585C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3C6B98;
  if (!qword_1ED3C6B98)
  {
    sub_1BA4CDF6C(255, (unint64_t *)&qword_1ED3B4010, (uint64_t (*)(void))sub_1BA83708C, (uint64_t)&type metadata for FormatFloat, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatEquation);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3C6B98);
  }
  return result;
}

uint64_t type metadata accessor for FormatComputed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatComputed);
}

unint64_t sub_1BA8358D8()
{
  unint64_t result;

  result = qword_1ED3C6B78;
  if (!qword_1ED3C6B78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5A98, &_s10CodingKeysON_185);
    atomic_store(result, (unint64_t *)&qword_1ED3C6B78);
  }
  return result;
}

unint64_t sub_1BA83591C()
{
  unint64_t result;

  result = qword_1ED3C6B70;
  if (!qword_1ED3C6B70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B5AC0, &_s10CodingKeysON_185);
    atomic_store(result, (unint64_t *)&qword_1ED3C6B70);
  }
  return result;
}

uint64_t sub_1BA835964(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CoverIssueView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA8359A0()
{
  return sub_1BA835964(&qword_1ED3B3EC8, (uint64_t)&protocol conformance descriptor for CoverIssueView);
}

void sub_1BA8359C4()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA8359D4()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for CellAutomation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CellAutomation);
}

uint64_t sub_1BA8359F0(uint64_t a1)
{
  return sub_1BA517790(a1, 0x646565467377654ELL, 0xEE0074616D726F46, &qword_1ED4768A8);
}

uint64_t type metadata accessor for WebEmbedCache()
{
  return objc_opt_self();
}

id sub_1BA835A3C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, sel_setColor_, *(_QWORD *)(*(_QWORD *)v1 + 16));
}

ValueMetadata *type metadata accessor for GapViewLayout()
{
  return &type metadata for GapViewLayout;
}

unint64_t sub_1BA835A60()
{
  unint64_t result;

  result = qword_1ED3B3D80;
  if (!qword_1ED3B3D80)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GapViewLayout.Attributes, &type metadata for GapViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B3D80);
  }
  return result;
}

unint64_t sub_1BA835AA4()
{
  unint64_t result;

  result = qword_1ED3B3D78;
  if (!qword_1ED3B3D78)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GapViewLayout.Attributes, &type metadata for GapViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B3D78);
  }
  return result;
}

unint64_t sub_1BA835AE8()
{
  unint64_t result;

  result = qword_1ED3B3D68;
  if (!qword_1ED3B3D68)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GapViewLayout.Attributes, &type metadata for GapViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B3D68);
  }
  return result;
}

unint64_t sub_1BA835B2C()
{
  unint64_t result;

  result = qword_1ED3B3D60;
  if (!qword_1ED3B3D60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for GapViewLayout.Attributes, &type metadata for GapViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B3D60);
  }
  return result;
}

unint64_t sub_1BA835B88()
{
  unint64_t result;

  result = qword_1ED3C69D8;
  if (!qword_1ED3C69D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0110, &_s10CodingKeysON_257);
    atomic_store(result, (unint64_t *)&qword_1ED3C69D8);
  }
  return result;
}

unint64_t sub_1BA835BCC()
{
  unint64_t result;

  result = qword_1ED3C69D0;
  if (!qword_1ED3C69D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B0138, &_s10CodingKeysON_257);
    atomic_store(result, (unint64_t *)&qword_1ED3C69D0);
  }
  return result;
}

uint64_t sub_1BA835C10(uint64_t a1, uint64_t a2)
{
  return FormatService.prefetch(content:options:)(a1, a2);
}

uint64_t sub_1BA835C30@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1BA835C50(a1, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a2, a3);
}

uint64_t sub_1BA835C50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *a1;
  v11 = type metadata accessor for FormatContent.Resolved();
  result = sub_1BA7B7244(v10, *(_QWORD *)(a2 + *(int *)(v11 + 36)), *(_QWORD *)(a2 + *(int *)(v11 + 44)), a3);
  if (v5)
    *a4 = v5;
  else
    *a5 = result;
  return result;
}

uint64_t sub_1BA835CDC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatFile();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatService.CacheFormatFile(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3BCD08);
}

unint64_t sub_1BA835D64()
{
  unint64_t result;

  result = qword_1ED3B3AD8;
  if (!qword_1ED3B3AD8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1ED3B3AD8);
  }
  return result;
}

unint64_t sub_1BA835DA8()
{
  unint64_t result;

  result = qword_1ED3B3AD0;
  if (!qword_1ED3B3AD0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1ED3B3AD0);
  }
  return result;
}

unint64_t sub_1BA835DEC()
{
  unint64_t result;

  result = qword_1ED3B3AC8;
  if (!qword_1ED3B3AC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1ED3B3AC8);
  }
  return result;
}

unint64_t sub_1BA835E30()
{
  unint64_t result;

  result = qword_1ED3B3AC0;
  if (!qword_1ED3B3AC0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1ED3B3AC0);
  }
  return result;
}

unint64_t sub_1BA835E74()
{
  unint64_t result;

  result = qword_1ED3B3AB8;
  if (!qword_1ED3B3AB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatInteger, &type metadata for FormatInteger);
    atomic_store(result, (unint64_t *)&qword_1ED3B3AB8);
  }
  return result;
}

unint64_t sub_1BA835EB8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA835DA8();
  a1[2] = sub_1BA835DEC();
  a1[3] = sub_1BA835E74();
  result = sub_1BA835E30();
  a1[4] = result;
  return result;
}

unint64_t sub_1BA835EFC()
{
  unint64_t result;

  result = qword_1ED39B1D8;
  if (!qword_1ED39B1D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EEAA4, &_s8ResolvedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED39B1D8);
  }
  return result;
}

unint64_t sub_1BA835F40()
{
  unint64_t result;

  result = qword_1ED39B1D0;
  if (!qword_1ED39B1D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EEACC, &_s8ResolvedV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED39B1D0);
  }
  return result;
}

unint64_t sub_1BA835F8C()
{
  unint64_t result;

  result = qword_1ED3C2460;
  if (!qword_1ED3C2460)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90E6D4, &type metadata for FormatContent.AltCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C2460);
  }
  return result;
}

unint64_t sub_1BA835FD0()
{
  unint64_t result;

  result = qword_1ED3C69A8;
  if (!qword_1ED3C69A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90E6FC, &type metadata for FormatContent.AltCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C69A8);
  }
  return result;
}

unint64_t sub_1BA83601C()
{
  unint64_t result;

  result = qword_1ED3B39F0;
  if (!qword_1ED3B39F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90E7C4, &type metadata for FormatContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B39F0);
  }
  return result;
}

unint64_t sub_1BA836060()
{
  unint64_t result;

  result = qword_1ED3B39E8;
  if (!qword_1ED3B39E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90E7EC, &type metadata for FormatContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B39E8);
  }
  return result;
}

uint64_t sub_1BA8360A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatArticleOverrides();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1BA83613C()
{
  unint64_t result;

  result = qword_1ED3B38E8;
  if (!qword_1ED3B38E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F2A9C, &type metadata for FormatArticle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B38E8);
  }
  return result;
}

unint64_t sub_1BA836180()
{
  unint64_t result;

  result = qword_1ED3B38E0;
  if (!qword_1ED3B38E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F2AC4, &type metadata for FormatArticle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B38E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsRecord()
{
  return &type metadata for SportsRecord;
}

void sub_1BA8361D4()
{
  xmmword_1ED3D25A0 = 0uLL;
}

unint64_t sub_1BA8361EC()
{
  unint64_t result;

  result = qword_1ED3C6898;
  if (!qword_1ED3C6898)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF5B0, &_s10CodingKeysON_56);
    atomic_store(result, (unint64_t *)&qword_1ED3C6898);
  }
  return result;
}

unint64_t sub_1BA836230()
{
  unint64_t result;

  result = qword_1ED3C6890;
  if (!qword_1ED3C6890)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF5D8, &_s10CodingKeysON_56);
    atomic_store(result, (unint64_t *)&qword_1ED3C6890);
  }
  return result;
}

unint64_t sub_1BA83627C()
{
  unint64_t result;

  result = qword_1ED3C6880;
  if (!qword_1ED3C6880)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF520, &_s10CodingKeysON_57);
    atomic_store(result, (unint64_t *)&qword_1ED3C6880);
  }
  return result;
}

unint64_t sub_1BA8362C0()
{
  unint64_t result;

  result = qword_1ED3C6878;
  if (!qword_1ED3C6878)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BF548, &_s10CodingKeysON_57);
    atomic_store(result, (unint64_t *)&qword_1ED3C6878);
  }
  return result;
}

uint64_t sub_1BA836304()
{
  return sub_1BA4A2870(&qword_1ED3B37E0, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t)&protocol conformance descriptor for FormatOption);
}

uint64_t sub_1BA836320()
{
  return sub_1BA4A2870(&qword_1ED3AFE80, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t)&protocol conformance descriptor for FormatOption);
}

unint64_t sub_1BA836344()
{
  unint64_t result;

  result = qword_1ED3C6850;
  if (!qword_1ED3C6850)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BCFB0, &_s10CodingKeysON_90);
    atomic_store(result, (unint64_t *)&qword_1ED3C6850);
  }
  return result;
}

unint64_t sub_1BA836388()
{
  unint64_t result;

  result = qword_1ED3C6848;
  if (!qword_1ED3C6848)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BCFD8, &_s10CodingKeysON_90);
    atomic_store(result, (unint64_t *)&qword_1ED3C6848);
  }
  return result;
}

uint64_t sub_1BA8363CC()
{
  uint64_t result;

  type metadata accessor for FormatLogger();
  result = swift_initStaticObject();
  qword_1ED3C6790 = result;
  return result;
}

unint64_t sub_1BA8363F4()
{
  unint64_t result;

  result = qword_1ED3B36A8;
  if (!qword_1ED3B36A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCorner, &type metadata for FormatCorner);
    atomic_store(result, (unint64_t *)&qword_1ED3B36A8);
  }
  return result;
}

unint64_t sub_1BA836438()
{
  unint64_t result;

  result = qword_1ED39B080;
  if (!qword_1ED39B080)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCorner, &type metadata for FormatCorner);
    atomic_store(result, (unint64_t *)&qword_1ED39B080);
  }
  return result;
}

id sub_1BA83647C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v2 = v1;
  sub_1BA4AD288(0, &qword_1ED3C49C0, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DBC320]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v15 - v8;
  v10 = OBJC_IVAR____TtC8NewsFeed12FormatButton_isLongPressEnabled;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_isLongPressEnabled) = a1;
  v11 = OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture;
  if ((a1 & 1) != 0 && !*(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture))
  {
    (*(void (**)(char *, _QWORD, uint64_t, double))(v6 + 104))(v9, *MEMORY[0x1E0DBC318], v5, v7);
    v13 = sub_1BB87135C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v14 = *(void **)(v2 + v11);
    *(_QWORD *)(v2 + v11) = v13;

    result = *(id *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture);
    if (!result)
      return result;
  }
  else
  {
    result = *(id *)(v2 + OBJC_IVAR____TtC8NewsFeed12FormatButton_longPressGesture);
    if (!result)
      return result;
  }
  return objc_msgSend(result, sel_setEnabled_, *(unsigned __int8 *)(v2 + v10), v7);
}

unint64_t sub_1BA8365A4()
{
  unint64_t result;

  result = qword_1ED3B3698;
  if (!qword_1ED3B3698)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBorder, &type metadata for FormatBorder);
    atomic_store(result, (unint64_t *)&qword_1ED3B3698);
  }
  return result;
}

unint64_t sub_1BA8365E8()
{
  unint64_t result;

  result = qword_1ED39B078;
  if (!qword_1ED39B078)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBorder, &type metadata for FormatBorder);
    atomic_store(result, (unint64_t *)&qword_1ED39B078);
  }
  return result;
}

unint64_t sub_1BA836634()
{
  unint64_t result;

  result = qword_1ED3C6768;
  if (!qword_1ED3C6768)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3348, &_s10CodingKeysON_209);
    atomic_store(result, (unint64_t *)&qword_1ED3C6768);
  }
  return result;
}

unint64_t sub_1BA836678()
{
  unint64_t result;

  result = qword_1ED3C6760;
  if (!qword_1ED3C6760)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3370, &_s10CodingKeysON_209);
    atomic_store(result, (unint64_t *)&qword_1ED3C6760);
  }
  return result;
}

unint64_t sub_1BA8366BC()
{
  unint64_t result;

  result = qword_1ED3B3690;
  if (!qword_1ED3B3690)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAnchor, &type metadata for FormatAnchor);
    atomic_store(result, (unint64_t *)&qword_1ED3B3690);
  }
  return result;
}

unint64_t sub_1BA836700()
{
  unint64_t result;

  result = qword_1ED3B3680;
  if (!qword_1ED3B3680)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAnchor, &type metadata for FormatAnchor);
    atomic_store(result, (unint64_t *)&qword_1ED3B3680);
  }
  return result;
}

uint64_t sub_1BA836744()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatPurchaseData(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1BA8367E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CategoryView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA83681C()
{
  return sub_1BA8367E0(&qword_1ED3BA9C8, (uint64_t)&protocol conformance descriptor for CategoryView);
}

unint64_t sub_1BA836840()
{
  unint64_t result;

  result = qword_1ED3B3670;
  if (!qword_1ED3B3670)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F22A8, &_s3GapVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B3670);
  }
  return result;
}

unint64_t sub_1BA836884()
{
  unint64_t result;

  result = qword_1ED3B3668;
  if (!qword_1ED3B3668)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F22D0, &_s3GapVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B3668);
  }
  return result;
}

uint64_t sub_1BA8368C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA81722C(a1, a2, a3, (uint64_t (*)(void))sub_1BA836840, (uint64_t (*)(void))sub_1BA836884);
}

uint64_t sub_1BA8368DC()
{
  return sub_1BA836B4C();
}

uint64_t sub_1BA8368E8(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B35C0, _s3GapV5BoundVMa, (uint64_t)&unk_1BB8F23D0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA836924()
{
  unint64_t result;

  result = qword_1ED3B35B0;
  if (!qword_1ED3B35B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88408C, &_s2AdVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B35B0);
  }
  return result;
}

unint64_t sub_1BA836968()
{
  unint64_t result;

  result = qword_1ED3B35A8;
  if (!qword_1ED3B35A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8840B4, &_s2AdVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B35A8);
  }
  return result;
}

unint64_t sub_1BA8369AC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BA836924();
  result = sub_1BA836968();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BA8369D8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FeedBannerAd();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BA836A74(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B3500, (uint64_t (*)(uint64_t))_s2AdV5BoundVMa, (uint64_t)&unk_1BB884118);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA836AB0()
{
  unint64_t result;

  result = qword_1ED3B34F0;
  if (!qword_1ED3B34F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F22F8, &_s10GapOfflineVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B34F0);
  }
  return result;
}

unint64_t sub_1BA836AF4()
{
  unint64_t result;

  result = qword_1ED3B34E8;
  if (!qword_1ED3B34E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F2320, &_s10GapOfflineVN);
    atomic_store(result, (unint64_t *)&qword_1ED3B34E8);
  }
  return result;
}

uint64_t sub_1BA836B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA81722C(a1, a2, a3, (uint64_t (*)(void))sub_1BA836AB0, (uint64_t (*)(void))sub_1BA836AF4);
}

uint64_t sub_1BA836B4C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FormatTimer()
{
  return objc_opt_self();
}

unint64_t sub_1BA836BF4()
{
  unint64_t result;

  result = qword_1ED3B3328;
  if (!qword_1ED3B3328)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStyle, &type metadata for FormatStyle);
    atomic_store(result, (unint64_t *)&qword_1ED3B3328);
  }
  return result;
}

unint64_t sub_1BA836C38()
{
  unint64_t result;

  result = qword_1ED3B3320;
  if (!qword_1ED3B3320)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStyle, &type metadata for FormatStyle);
    atomic_store(result, (unint64_t *)&qword_1ED3B3320);
  }
  return result;
}

unint64_t sub_1BA836C84()
{
  unint64_t result;

  result = qword_1ED3C6748;
  if (!qword_1ED3C6748)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0F90, &_s14descr1E72CC2B1O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6748);
  }
  return result;
}

unint64_t sub_1BA836CC8()
{
  unint64_t result;

  result = qword_1ED3C6740;
  if (!qword_1ED3C6740)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8C0FB8, &_s14descr1E72CC2B1O10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1ED3C6740);
  }
  return result;
}

uint64_t sub_1BA836D0C(_QWORD *a1)
{
  return FormatRoute.encode(to:)(a1);
}

unint64_t sub_1BA836D20()
{
  unint64_t result;

  result = qword_1ED39B030;
  if (!qword_1ED39B030)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatRoute, &type metadata for FormatRoute);
    atomic_store(result, (unint64_t *)&qword_1ED39B030);
  }
  return result;
}

void sub_1BA836D64(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE90000000000006FLL;
  v4 = 0xE700000000000000;
  v5 = 0x65726F4D656573;
  if (v2 != 1)
  {
    v5 = 0x6961746544656573;
    v4 = 0xEA0000000000736CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6564695679616C70;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BA836DCC()
{
  sub_1BA49E77C();
  return sub_1BB872D0C();
}

unint64_t sub_1BA836E18()
{
  unint64_t result;

  result = qword_1ED3A5480;
  if (!qword_1ED3A5480)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3F10, &_s10CodingTypeON_149);
    atomic_store(result, (unint64_t *)&qword_1ED3A5480);
  }
  return result;
}

void sub_1BA836E60()
{
  unint64_t v0;

  sub_1BA4D82D0(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BA836ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3C6688;
  if (!qword_1ED3C6688)
  {
    v1 = type metadata accessor for FormatRegex();
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatRegex, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3C6688);
  }
  return result;
}

unint64_t sub_1BA836F24()
{
  unint64_t result;

  result = qword_1ED3C6660;
  if (!qword_1ED3C6660)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1010, &_s10CodingKeysON_247);
    atomic_store(result, (unint64_t *)&qword_1ED3C6660);
  }
  return result;
}

unint64_t sub_1BA836F68()
{
  unint64_t result;

  result = qword_1ED3C6658;
  if (!qword_1ED3C6658)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B1038, &_s10CodingKeysON_247);
    atomic_store(result, (unint64_t *)&qword_1ED3C6658);
  }
  return result;
}

uint64_t type metadata accessor for FormatMerge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatMerge);
}

unint64_t sub_1BA836FB8()
{
  unint64_t result;

  result = qword_1ED3B3258;
  if (!qword_1ED3B3258)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroup, &type metadata for FormatGroup);
    atomic_store(result, (unint64_t *)&qword_1ED3B3258);
  }
  return result;
}

unint64_t sub_1BA837004()
{
  unint64_t result;

  result = qword_1ED3C6648;
  if (!qword_1ED3C6648)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9828, &_s10CodingKeysON_126);
    atomic_store(result, (unint64_t *)&qword_1ED3C6648);
  }
  return result;
}

unint64_t sub_1BA837048()
{
  unint64_t result;

  result = qword_1ED3C6640;
  if (!qword_1ED3C6640)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B9850, &_s10CodingKeysON_126);
    atomic_store(result, (unint64_t *)&qword_1ED3C6640);
  }
  return result;
}

unint64_t sub_1BA83708C()
{
  unint64_t result;

  result = qword_1ED3B3250;
  if (!qword_1ED3B3250)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFloat, &type metadata for FormatFloat);
    atomic_store(result, (unint64_t *)&qword_1ED3B3250);
  }
  return result;
}

unint64_t sub_1BA8370D0()
{
  unint64_t result;

  result = qword_1ED3B3240;
  if (!qword_1ED3B3240)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFloat, &type metadata for FormatFloat);
    atomic_store(result, (unint64_t *)&qword_1ED3B3240);
  }
  return result;
}

unint64_t sub_1BA837114()
{
  unint64_t result;

  result = qword_1ED3B3230;
  if (!qword_1ED3B3230)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFloat, &type metadata for FormatFloat);
    atomic_store(result, (unint64_t *)&qword_1ED3B3230);
  }
  return result;
}

unint64_t sub_1BA837158(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA8370D0();
  a1[2] = sub_1BA61BC14();
  a1[3] = sub_1BA62B2B4();
  result = sub_1BA837114();
  a1[4] = result;
  return result;
}

unint64_t sub_1BA837194(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA62C9A0();
  a1[2] = sub_1BA62BA1C();
  result = sub_1BB525624();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA8371D0()
{
  unint64_t result;

  result = qword_1ED3C6628;
  if (!qword_1ED3C6628)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6B30, &_s10CodingKeysON_169);
    atomic_store(result, (unint64_t *)&qword_1ED3C6628);
  }
  return result;
}

unint64_t sub_1BA837214()
{
  unint64_t result;

  result = qword_1ED3C6620;
  if (!qword_1ED3C6620)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B6B58, &_s10CodingKeysON_169);
    atomic_store(result, (unint64_t *)&qword_1ED3C6620);
  }
  return result;
}

uint64_t sub_1BA837258()
{
  return sub_1BA4DE24C();
}

uint64_t sub_1BA837260(_QWORD *a1)
{
  uint64_t v1;

  return sub_1BA4A50F4(a1, v1);
}

uint64_t sub_1BA837268(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))MEMORY[0x1E0D53628], MEMORY[0x1E0D53620]);
}

uint64_t sub_1BA83727C(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4AAADC, MEMORY[0x1E0D52870]);
}

uint64_t sub_1BA837290@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v3 = type metadata accessor for FeedBannerAdRequester();
  result = sub_1BB86DF3C();
  if (result)
  {
    a2[3] = v3;
    a2[4] = (uint64_t)&protocol witness table for FeedBannerAdRequester;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA837300(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4AB620, MEMORY[0x1E0D536E0]);
}

uint64_t sub_1BA837314(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4AF14C, MEMORY[0x1E0D536E0]);
}

uint64_t sub_1BA837328(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4A5F40, MEMORY[0x1E0D536E0]);
}

uint64_t sub_1BA83733C(_QWORD *a1)
{
  return sub_1BA56D918(a1, (void (*)(_QWORD))sub_1BA4AE3C8, (void (*)(_QWORD))sub_1BA4AF14C, (void (*)(_QWORD))sub_1BA4BB0E8);
}

uint64_t sub_1BA837358(_QWORD *a1)
{
  return sub_1BA56D918(a1, (void (*)(_QWORD))sub_1BA4AE8F4, (void (*)(_QWORD))sub_1BA4AAC84, (void (*)(_QWORD))sub_1BA4BB020);
}

uint64_t sub_1BA837374(_QWORD *a1)
{
  return sub_1BA56D918(a1, (void (*)(_QWORD))sub_1BA4A5D50, (void (*)(_QWORD))sub_1BA4AB620, (void (*)(_QWORD))sub_1BA4B9268);
}

uint64_t sub_1BA837390(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4AE3C8, MEMORY[0x1E0D52870]);
}

uint64_t sub_1BA8373A4(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4AE8F4, MEMORY[0x1E0D52870]);
}

uint64_t sub_1BA8373B8(uint64_t a1)
{
  return sub_1BA4CD098(a1, (void (*)(_QWORD))sub_1BA4A5D50, MEMORY[0x1E0D52870]);
}

uint64_t sub_1BA8373CC()
{
  return sub_1BA56D300();
}

uint64_t type metadata accessor for PuzzleData()
{
  uint64_t result;

  result = qword_1ED3D53B0;
  if (!qword_1ED3D53B0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA83742C()
{
  unint64_t result;

  result = qword_1ED39C9A8;
  if (!qword_1ED39C9A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for LoadedFont, &type metadata for LoadedFont);
    atomic_store(result, (unint64_t *)&qword_1ED39C9A8);
  }
  return result;
}

unint64_t sub_1BA837470()
{
  unint64_t result;

  result = qword_1ED39C998;
  if (!qword_1ED39C998)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for LoadedFont, &type metadata for LoadedFont);
    atomic_store(result, (unint64_t *)&qword_1ED39C998);
  }
  return result;
}

unint64_t sub_1BA8374B4()
{
  unint64_t result;

  result = qword_1ED3B3158;
  if (!qword_1ED3B3158)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatType, &type metadata for FormatType);
    atomic_store(result, (unint64_t *)&qword_1ED3B3158);
  }
  return result;
}

unint64_t sub_1BA8374F8()
{
  unint64_t result;

  result = qword_1ED3B3150;
  if (!qword_1ED3B3150)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatType, &type metadata for FormatType);
    atomic_store(result, (unint64_t *)&qword_1ED3B3150);
  }
  return result;
}

unint64_t sub_1BA837544()
{
  unint64_t result;

  result = qword_1ED3C6610;
  if (!qword_1ED3C6610)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3650, &_s10CodingKeysON_207);
    atomic_store(result, (unint64_t *)&qword_1ED3C6610);
  }
  return result;
}

unint64_t sub_1BA837588()
{
  unint64_t result;

  result = qword_1ED3C6608;
  if (!qword_1ED3C6608)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B3678, &_s10CodingKeysON_207);
    atomic_store(result, (unint64_t *)&qword_1ED3C6608);
  }
  return result;
}

unint64_t sub_1BA8375CC()
{
  unint64_t result;

  result = qword_1ED3C6470;
  if (!qword_1ED3C6470)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSize, &type metadata for FormatSize);
    atomic_store(result, (unint64_t *)&qword_1ED3C6470);
  }
  return result;
}

unint64_t sub_1BA837610(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA636C74();
  a1[2] = sub_1BA6371A0();
  result = sub_1BB825E18();
  a1[3] = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatMenu(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BA8376F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatMenu.init(from:)(a1, a2);
}

unint64_t sub_1BA837708()
{
  unint64_t result;

  result = qword_1ED3B3128;
  if (!qword_1ED3B3128)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatMenu, &type metadata for FormatMenu);
    atomic_store(result, (unint64_t *)&qword_1ED3B3128);
  }
  return result;
}

unint64_t sub_1BA837754()
{
  unint64_t result;

  result = qword_1ED3B3120;
  if (!qword_1ED3B3120)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93A514, &type metadata for FormatMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B3120);
  }
  return result;
}

unint64_t sub_1BA837798()
{
  unint64_t result;

  result = qword_1ED3B3118;
  if (!qword_1ED3B3118)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93A53C, &type metadata for FormatMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B3118);
  }
  return result;
}

unint64_t sub_1BA8377DC()
{
  unint64_t result;

  result = qword_1ED3B3100;
  if (!qword_1ED3B3100)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItem, &type metadata for FormatItem);
    atomic_store(result, (unint64_t *)&qword_1ED3B3100);
  }
  return result;
}

unint64_t sub_1BA837820()
{
  unint64_t result;

  result = qword_1ED3B30F8;
  if (!qword_1ED3B30F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatItem, &type metadata for FormatItem);
    atomic_store(result, (unint64_t *)&qword_1ED3B30F8);
  }
  return result;
}

unint64_t sub_1BA83786C()
{
  unint64_t result;

  result = qword_1ED3C6428;
  if (!qword_1ED3C6428)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB860, &_s10CodingKeysON_110);
    atomic_store(result, (unint64_t *)&qword_1ED3C6428);
  }
  return result;
}

unint64_t sub_1BA8378B0()
{
  unint64_t result;

  result = qword_1ED3C6420;
  if (!qword_1ED3C6420)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8BB888, &_s10CodingKeysON_110);
    atomic_store(result, (unint64_t *)&qword_1ED3C6420);
  }
  return result;
}

unint64_t sub_1BA8378F4()
{
  unint64_t result;

  result = qword_1ED3C6410;
  if (!qword_1ED3C6410)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFont, &type metadata for FormatFont);
    atomic_store(result, (unint64_t *)&qword_1ED3C6410);
  }
  return result;
}

unint64_t sub_1BA837938(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA69C280();
  a1[2] = sub_1BA6A1098();
  result = sub_1BA96704C();
  a1[3] = result;
  return result;
}

uint64_t sub_1BA83796C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FormatPackage();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for FormatBindingContent();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for FormatFile()
{
  uint64_t result;

  result = qword_1ED3B3038;
  if (!qword_1ED3B3038)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupConfigSidecarConfig()
{
  return &type metadata for FeedGroupConfigSidecarConfig;
}

unint64_t sub_1BA837AB4()
{
  unint64_t result;

  result = qword_1ED3C63E0;
  if (!qword_1ED3C63E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedTimeOfDay, &type metadata for FeedTimeOfDay);
    atomic_store(result, (unint64_t *)&qword_1ED3C63E0);
  }
  return result;
}

unint64_t sub_1BA837AF8()
{
  unint64_t result;

  result = qword_1ED3C63D8;
  if (!qword_1ED3C63D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedTimeOfDay, &type metadata for FeedTimeOfDay);
    atomic_store(result, (unint64_t *)&qword_1ED3C63D8);
  }
  return result;
}

unint64_t sub_1BA837B3C()
{
  unint64_t result;

  result = qword_1ED3C63D0;
  if (!qword_1ED3C63D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedTimeOfDay, &type metadata for FeedTimeOfDay);
    atomic_store(result, (unint64_t *)&qword_1ED3C63D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedScoredTag()
{
  return &type metadata for FeedScoredTag;
}

_BYTE *sub_1BA837B90(_BYTE *result, char a2)
{
  *result = *result & 1 | (a2 << 6);
  return result;
}

uint64_t sub_1BA837BAC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = type metadata accessor for FeedWeather(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FeedHeadline(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for FeedWebEmbed();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for FeedPuzzleStatistic();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for FeedSponsorshipBannerAd();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1BA837CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B2F80;
  if (!qword_1ED3B2F80)
  {
    v1 = type metadata accessor for FeedGroupItem();
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupItem, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B2F80);
  }
  return result;
}

unint64_t sub_1BA837D24()
{
  unint64_t result;

  result = qword_1ED39AF78;
  if (!qword_1ED39AF78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F70C0, &type metadata for FeedDateRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39AF78);
  }
  return result;
}

unint64_t sub_1BA837D68()
{
  unint64_t result;

  result = qword_1ED39AF70;
  if (!qword_1ED39AF70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F70E8, &type metadata for FeedDateRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39AF70);
  }
  return result;
}

unint64_t destroy for FeedPlatform(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t storeEnumTagSinglePayload for WebEmbedDataVisualizationURLDataSourceContentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FeedPlatform(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 4)
    return (v3 - 3);
  else
    return 0;
}

uint64_t sub_1BA837E8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BA837EE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FeedPlatform.init(from:)(a1, a2);
}

unint64_t sub_1BA837EF8()
{
  unint64_t result;

  result = qword_1ED3C6340;
  if (!qword_1ED3C6340)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPlatform, &type metadata for FeedPlatform);
    atomic_store(result, (unint64_t *)&qword_1ED3C6340);
  }
  return result;
}

unint64_t sub_1BA837F3C()
{
  unint64_t result;

  result = qword_1ED3C6338;
  if (!qword_1ED3C6338)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPlatform, &type metadata for FeedPlatform);
    atomic_store(result, (unint64_t *)&qword_1ED3C6338);
  }
  return result;
}

unint64_t sub_1BA837F80()
{
  unint64_t result;

  result = qword_1ED3C6330;
  if (!qword_1ED3C6330)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPlatform, &type metadata for FeedPlatform);
    atomic_store(result, (unint64_t *)&qword_1ED3C6330);
  }
  return result;
}

unint64_t sub_1BA837FC4()
{
  unint64_t result;

  result = qword_1ED3C6328;
  if (!qword_1ED3C6328)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPlatform, &type metadata for FeedPlatform);
    atomic_store(result, (unint64_t *)&qword_1ED3C6328);
  }
  return result;
}

void sub_1BA838008()
{
  sub_1BA4BE740((uint64_t)&qword_1ED3C10A0);
}

uint64_t type metadata accessor for FeedLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedLocation);
}

void sub_1BA838020()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FeedHeadline.State(319);
  if (v0 <= 0x3F)
  {
    sub_1BA4B07F0(319, (unint64_t *)&qword_1ED3B0B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52718], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1BA838110(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B2D38, type metadata accessor for FeedHeadline, (uint64_t)&protocol conformance descriptor for FeedHeadline);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BA83814C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedItem.SharedState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA8381D8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1BA8381F8(char *a1)
{
  return FeedDatabase.save(snapshot:)(a1);
}

uint64_t FeedDatabase.__deallocating_deinit()
{
  FeedDatabase.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for FeedDatabase()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t sub_1BA838248@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;

  return sub_1BA4B3FF0(a1, *(uint64_t **)(v2 + 80), a2);
}

uint64_t *sub_1BA83827C(uint64_t *a1, unsigned __int8 a2)
{
  uint64_t *v2;

  return sub_1BA4B42A0(a1, (uint64_t)(v2 + 6), v2[18], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t *sub_1BA8382A4(uint64_t *a1)
{
  return sub_1BA83827C(a1, 0);
}

uint64_t sub_1BA8382AC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1BA4C9B90(a1, v1[6], v1[7], v1[8], v1[9], (uint64_t)(v1 + 10), v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1BA8382E0()
{
  uint64_t v0;

  return sub_1BA4ECB70(*(_QWORD *)(v0 + 80), (_OWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1BA838318()
{
  return sub_1BA4CEEE4();
}

uint64_t sub_1BA838358(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1ED3B2D08, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd, (uint64_t)&protocol conformance descriptor for FeedBannerAd);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_1BA838394()
{
  unint64_t v0;

  sub_1BA8425B0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FeedWeather.Temperature(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1ED3BC928);
}

uint64_t FeedService.init(feed:cursorFactory:personalizationService:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v18[4];
  char v19;

  v4 = v3;
  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_QWORD *)(v4 + 48) = v8;
  *(_BYTE *)(v4 + 56) = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for FeedServiceState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v18[0] = v6;
  v18[1] = v5;
  v18[2] = (uint64_t)v7;
  v18[3] = (uint64_t)v8;
  v19 = v9;
  swift_bridgeObjectRetain();
  v13 = v7;
  v14 = v8;
  *(_QWORD *)(v4 + 16) = FeedServiceState.__allocating_init(feed:)(v18);
  *(_QWORD *)(v4 + 104) = a2;
  sub_1BA4CECCC(a3, v4 + 64);
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_QWORD *)(v4 + 144) = 0;
  return v4;
}

uint64_t sub_1BA838520(uint64_t a1)
{
  nullsub_1(a1);
  return swift_retain();
}

uint64_t sub_1BA838538()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 608) = sub_1BA6668CC(*(_QWORD *)(v0 + 256), *(uint64_t **)(v0 + 264), *(_QWORD *)(v0 + 272), *(double *)(v0 + 280));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 616) = v1;
  *v1 = v0;
  v1[1] = sub_1BA49FF9C;
  return sub_1BB86E908();
}

uint64_t sub_1BA8385A4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedManager<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA8385D0(uint64_t a1)
{
  return FeedManager.prepare(context:)(a1);
}

uint64_t sub_1BA8385F0(uint64_t a1)
{
  return FeedManager.save(snapshot:)(a1);
}

uint64_t sub_1BA838610()
{
  sub_1BA838810();
  return swift_retain();
}

uint64_t sub_1BA838630(uint64_t a1)
{
  return FeedManager.readAndFetch(context:)(a1);
}

uint64_t sub_1BA838650()
{
  sub_1BA819FBC();
  return swift_retain();
}

uint64_t FeedManager.__deallocating_deinit()
{
  FeedManager.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for FeedManager()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t FeedManager.save(snapshot:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA5464B0((uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 120) + 64))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BA838754()
{
  return sub_1BA59B288();
}

uint64_t sub_1BA838790(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1BA4D52C0(a1, v1 + v4, *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)), *(double *)(v1 + v5));
}

uint64_t sub_1BA838810()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1BA838818()
{
  uint64_t v0;

  return sub_1BA4AE848(*(double *)(v0 + 24));
}

uint64_t sub_1BA838824@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    v6 = a1 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v6;
    v5 = 0x7000000000000000;
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    v5 = 0x2000000000000000;
  }
  *a2 = v5 | v4;
  return swift_retain();
}

uint64_t sub_1BA838894()
{
  uint64_t result;

  result = sub_1BA4CC40C();
  qword_1ED476950 = result;
  return result;
}

uint64_t sub_1BA8388B0(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedCursor<A>, a1);
  return sub_1BB86E308();
}

void sub_1BA8388E4()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA8388F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1BA4AA1EC(a1, v2[6], v2[2], v2[3], a2);
}

uint64_t FeedCursor.serviceConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 248));
}

unint64_t sub_1BA838938()
{
  unint64_t result;

  result = qword_1ED3B2AD0;
  if (!qword_1ED3B2AD0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedIssue, &type metadata for FeedIssue);
    atomic_store(result, (unint64_t *)&qword_1ED3B2AD0);
  }
  return result;
}

unint64_t sub_1BA83897C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA838938();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for FeedIssue.Traits()
{
  return &type metadata for FeedIssue.Traits;
}

uint64_t storeEnumTagSinglePayload for FeedMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8389FC + 4 * byte_1BB93071D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA838A30 + 4 * byte_1BB930718[v4]))();
}

uint64_t sub_1BA838A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA838A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA838A40);
  return result;
}

uint64_t sub_1BA838A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA838A54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA838A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA838A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA838A6C()
{
  sub_1BA838AD8();
  return sub_1BB872D60();
}

NewsFeed::FeedMode_optional sub_1BA838AC8(Swift::String *a1)
{
  return FeedMode.init(rawValue:)(*a1);
}

unint64_t sub_1BA838AD8()
{
  unint64_t result;

  result = qword_1ED3A2948;
  if (!qword_1ED3A2948)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedMode, &type metadata for FeedMode);
    atomic_store(result, (unint64_t *)&qword_1ED3A2948);
  }
  return result;
}

unint64_t sub_1BA838B1C()
{
  unint64_t result;

  result = qword_1ED3C2110;
  if (!qword_1ED3C2110)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedMode, &type metadata for FeedMode);
    atomic_store(result, (unint64_t *)&qword_1ED3C2110);
  }
  return result;
}

unint64_t sub_1BA838B60()
{
  unint64_t result;

  result = qword_1ED3C4120;
  if (!qword_1ED3C4120)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedMode, &type metadata for FeedMode);
    atomic_store(result, (unint64_t *)&qword_1ED3C4120);
  }
  return result;
}

unint64_t sub_1BA838BA4()
{
  unint64_t result;

  result = qword_1ED3C4118;
  if (!qword_1ED3C4118)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedMode, &type metadata for FeedMode);
    atomic_store(result, (unint64_t *)&qword_1ED3C4118);
  }
  return result;
}

uint64_t sub_1BA838BE8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for FeedBannerAd();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FeedHeadline(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for FeedWebEmbed();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for FeedCustomItem();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for FeedEngagementBanner();
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for FeedPuzzleStatistic();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1BA838D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3BA6E8;
  if (!qword_1ED3BA6E8)
  {
    v1 = type metadata accessor for FeedItem(255);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedItem, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3BA6E8);
  }
  return result;
}

unint64_t sub_1BA838D8C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA838D44();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BA838DB0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SharedItem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_1BA838E04()
{
  unint64_t result;

  result = qword_1ED3BC898;
  if (!qword_1ED3BC898)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedTag, &type metadata for FeedTag);
    atomic_store(result, (unint64_t *)&qword_1ED3BC898);
  }
  return result;
}

unint64_t sub_1BA838E48(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA838E04();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BA838E6C()
{
  unint64_t result;

  result = qword_1ED3B2A00;
  if (!qword_1ED3B2A00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGap, &type metadata for FeedGap);
    atomic_store(result, (unint64_t *)&qword_1ED3B2A00);
  }
  return result;
}

unint64_t sub_1BA838EB0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA838E6C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t FeedGroupEmitterInitialCursorContext.feedPool.getter()
{
  return swift_retain();
}

uint64_t FeedGroupEmitterInitialCursorContext.serviceConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t type metadata accessor for FeedLayoutAttributesFactoryProvider()
{
  return objc_opt_self();
}

unint64_t sub_1BA838F18()
{
  unint64_t result;

  result = qword_1ED3A51F0;
  if (!qword_1ED3A51F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupTopicDiversityRequirements, &type metadata for FeedGroupTopicDiversityRequirements);
    atomic_store(result, (unint64_t *)&qword_1ED3A51F0);
  }
  return result;
}

unint64_t sub_1BA838F5C()
{
  unint64_t result;

  result = qword_1ED3A51E8;
  if (!qword_1ED3A51E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupTopicDiversityRequirements, &type metadata for FeedGroupTopicDiversityRequirements);
    atomic_store(result, (unint64_t *)&qword_1ED3A51E8);
  }
  return result;
}

unint64_t sub_1BA838FA0()
{
  unint64_t result;

  result = qword_1ED3A51E0;
  if (!qword_1ED3A51E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupTopicDiversityRequirements, &type metadata for FeedGroupTopicDiversityRequirements);
    atomic_store(result, (unint64_t *)&qword_1ED3A51E0);
  }
  return result;
}

unint64_t sub_1BA838FEC()
{
  unint64_t result;

  result = qword_1ED3A51D8;
  if (!qword_1ED3A51D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D3190, &type metadata for FeedGroupTopicDiversityRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A51D8);
  }
  return result;
}

unint64_t sub_1BA839030()
{
  unint64_t result;

  result = qword_1ED3A51D0;
  if (!qword_1ED3A51D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D31B8, &type metadata for FeedGroupTopicDiversityRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A51D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedPersonalizationClusteringRules()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA839080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3C23A0, (void (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BA8390D4()
{
  unint64_t v0;

  sub_1BA7677C4(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t dispatch thunk of FeedItemSupplementaryRendererType.register(view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of FeedItemSupplementaryRendererType.render(in:supplementaryData:layoutAttributes:actionSenderHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 32))();
}

{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

void sub_1BA839168()
{
  unint64_t v0;

  sub_1BA4A3FB4(319, &qword_1ED3D2C58, (void (*)(uint64_t))MEMORY[0x1E0DB7A20]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FeedItemRendererPipelineProcessor(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3D2D18);
}

uint64_t sub_1BA83920C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ImageRequestOptions();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobsOverrides()
{
  return &type metadata for FeedGroupClusteringKnobsOverrides;
}

uint64_t type metadata accessor for FeedSuggestionClusteringService()
{
  return objc_opt_self();
}

uint64_t sub_1BA8392DC()
{
  return sub_1BA65DCB8(&qword_1ED3B2808, (uint64_t)&protocol conformance descriptor for FeedItemSupplementaryAttributes);
}

uint64_t sub_1BA839300()
{
  return sub_1BA65DCB8(&qword_1ED3B2810, (uint64_t)&protocol conformance descriptor for FeedItemSupplementaryAttributes);
}

uint64_t sub_1BA839324()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedHeadline(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FeedHeadlineAudioCommandContext()
{
  uint64_t result;

  result = qword_1ED3C6100;
  if (!qword_1ED3C6100)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t dispatch thunk of FeedContentPrefetchManagerType.addTask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

void sub_1BA8393D0(UICollectionView *a1)
{
  FeedItemSupplementaryRenderer.register(view:)(a1);
}

id sub_1BA8393F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FeedItemSupplementaryRenderer.render(in:supplementaryData:layoutAttributes:actionSenderHandler:)(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for FeedItemCellSelectionRenderer()
{
  return objc_opt_self();
}

void sub_1BA839430()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA839440()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t FeedJournalGroupResultOutput.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5[3];
  unsigned __int8 v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  sub_1BA5B0E6C(v0, (uint64_t)v5);
  if (v6 < 3u)
    goto LABEL_5;
  if (v6 - 4 >= 3)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1BA4CECCC(v5, (uint64_t)v7);
    v2 = v8;
    v3 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 16))(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    return v1;
  }
  sub_1BA5B0A58((uint64_t)v5);
  return 0;
}

uint64_t sub_1BA8394F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA839538();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BA839538()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C60F0)
  {
    sub_1BA505288(255, &qword_1ED3C60E8);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C60F0);
  }
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusterOrderingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA8395EC + 4 * byte_1BB90A525[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA839620 + 4 * asc_1BB90A520[v4]))();
}

uint64_t sub_1BA839620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA839628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA839630);
  return result;
}

uint64_t sub_1BA83963C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA839644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA839648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA839650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83965C()
{
  sub_1BA8396C4();
  return sub_1BB872D60();
}

NewsFeed::FeedGroupClusterOrderingMode_optional sub_1BA8396B8(Swift::String *a1)
{
  return FeedGroupClusterOrderingMode.init(rawValue:)(*a1);
}

unint64_t sub_1BA8396C4()
{
  unint64_t result;

  result = qword_1ED3A51B0;
  if (!qword_1ED3A51B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupClusterOrderingMode, &type metadata for FeedGroupClusterOrderingMode);
    atomic_store(result, (unint64_t *)&qword_1ED3A51B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupBundleArticleQuotas()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for FeedGroupBundleArticleQuotas()
{
  uint64_t result;

  result = qword_1ED3C2100;
  if (!qword_1ED3C2100)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FeedSectionPositionProvider()
{
  return objc_opt_self();
}

uint64_t FeedSectionPositionProvider.init()()
{
  uint64_t v0;

  return v0;
}

ValueMetadata *type metadata accessor for FeedReadStoryCommandContext()
{
  return &type metadata for FeedReadStoryCommandContext;
}

void type metadata accessor for FeedGroupEmitterRuleEdition()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t type metadata accessor for FeedVideoAdProviderFactory()
{
  return objc_opt_self();
}

unint64_t sub_1BA8397B4()
{
  unint64_t result;

  result = qword_1ED39E088;
  if (!qword_1ED39E088)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedSubscriptionPaidAccess, &type metadata for FeedSubscriptionPaidAccess);
    atomic_store(result, (unint64_t *)&qword_1ED39E088);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedHeadlineScoringContext()
{
  return &type metadata for FeedHeadlineScoringContext;
}

uint64_t FeedHeadlineScoringContext.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA83983C + 4 * byte_1BB8DE248[*v0]))(0x6E776F6E6B6E55, 0xE700000000000000);
}

unint64_t sub_1BA83983C()
{
  return 0xD000000000000011;
}

uint64_t sub_1BA839B94()
{
  return 0x6957207961646F54;
}

uint64_t sub_1BA839BB4()
{
  return 0x6764695720676154;
}

unint64_t sub_1BA839BD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3C5F28;
  if (!qword_1ED3C5F28)
  {
    v1 = type metadata accessor for FeedContentPrefetchManager();
    result = MEMORY[0x1BCCE5B24](&unk_1BB8FEEC8, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3C5F28);
  }
  return result;
}

unint64_t sub_1BA839C18(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA839BD4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t FeedRefreshBasicAnimation.init(refreshStateMachine:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

ValueMetadata *type metadata accessor for FeedGroupFreezingDisallow()
{
  return &type metadata for FeedGroupFreezingDisallow;
}

unint64_t sub_1BA839C58()
{
  unint64_t result;

  result = qword_1ED39AD88;
  if (!qword_1ED39AD88)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupFreezingDisallow, &type metadata for FeedGroupFreezingDisallow);
    atomic_store(result, (unint64_t *)&qword_1ED39AD88);
  }
  return result;
}

unint64_t sub_1BA839CA4()
{
  unint64_t result;

  result = qword_1ED39C700;
  if (!qword_1ED39C700)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB911550, &type metadata for FeedGroupFreezingDisallow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39C700);
  }
  return result;
}

unint64_t sub_1BA839CE8()
{
  unint64_t result;

  result = qword_1ED39C6F8;
  if (!qword_1ED39C6F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB911578, &type metadata for FeedGroupFreezingDisallow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39C6F8);
  }
  return result;
}

uint64_t sub_1BA839D2C@<X0>(uint64_t *a1@<X2>, _OWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1BA49A670(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t type metadata accessor for FeedSponsorshipAdService()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FeedLayoutContextFactory()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for FeedGroupMutingExemption()
{
  return &type metadata for FeedGroupMutingExemption;
}

ValueMetadata *type metadata accessor for FeedGroupEmitterPriority()
{
  return &type metadata for FeedGroupEmitterPriority;
}

unint64_t sub_1BA839D9C()
{
  unint64_t result;

  result = qword_1ED3AFDB8;
  if (!qword_1ED3AFDB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupEmitterPriority, &type metadata for FeedGroupEmitterPriority);
    atomic_store(result, (unint64_t *)&qword_1ED3AFDB8);
  }
  return result;
}

id sub_1BA839DE0()
{
  id result;

  result = sub_1BA4D7C14(0xD00000000000001ELL, 0x80000001BB9779E0);
  qword_1ED4767B8 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for FeedPuzzleProgressState()
{
  return &type metadata for FeedPuzzleProgressState;
}

unint64_t sub_1BA839E24()
{
  unint64_t result;

  result = qword_1ED3A5110;
  if (!qword_1ED3A5110)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleProgressState, &type metadata for FeedPuzzleProgressState);
    atomic_store(result, (unint64_t *)&qword_1ED3A5110);
  }
  return result;
}

uint64_t sub_1BA839E68()
{
  return swift_initClassMetadata2();
}

uint64_t dispatch thunk of FeedNativeAdManagerType.onFetch(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for FeedIssueScoringContext()
{
  return &type metadata for FeedIssueScoringContext;
}

uint64_t sub_1BA839ECC()
{
  uint64_t result;

  result = qword_1ED3A5048;
  if (!qword_1ED3A5048)
  {
    sub_1BA838F18();
    sub_1BA838FA0();
    sub_1BA838F5C();
    type metadata accessor for FeedGroupKnobsRuleValue();
  }
  return result;
}

uint64_t sub_1BA839F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FeedScoredResult(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedAutoRefreshStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA83A01C + 4 * byte_1BB90D77A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA83A050 + 4 * byte_1BB90D775[v4]))();
}

uint64_t sub_1BA83A050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83A058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA83A060);
  return result;
}

uint64_t sub_1BA83A06C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA83A074);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA83A078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83A080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA83A08C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x64656C6261736964;
  if (v2 != 1)
  {
    v5 = 0x6563726F66;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64656C62616E65;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_1BA83A0E8()
{
  unint64_t result;

  result = qword_1ED3B2308;
  if (!qword_1ED3B2308)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAutoRefreshStrategy, &type metadata for FeedAutoRefreshStrategy);
    atomic_store(result, (unint64_t *)&qword_1ED3B2308);
  }
  return result;
}

unint64_t sub_1BA83A12C()
{
  unint64_t result;

  result = qword_1ED3B2300;
  if (!qword_1ED3B2300)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAutoRefreshStrategy, &type metadata for FeedAutoRefreshStrategy);
    atomic_store(result, (unint64_t *)&qword_1ED3B2300);
  }
  return result;
}

uint64_t sub_1BA83A170()
{
  sub_1BA83A0E8();
  return sub_1BB872CC4();
}

uint64_t sub_1BA83A1B4(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v3 = *(void (**)(uint64_t))(a1 + 16);
  if (!v3)
    sub_1BB713670();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = 0;
  v2[1] = 0;
  swift_retain();
  v5 = sub_1BA49EBE0(v4);
  v3(v5);
  return sub_1BA49EBE0((uint64_t)v3);
}

void sub_1BA83A270()
{
  JUMPOUT(0x1BCCE5B24);
}

ValueMetadata *type metadata accessor for FeedPuzzleRankProgress()
{
  return &type metadata for FeedPuzzleRankProgress;
}

unint64_t sub_1BA83A290()
{
  unint64_t result;

  result = qword_1ED3A2898;
  if (!qword_1ED3A2898)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleRankProgress, &type metadata for FeedPuzzleRankProgress);
    atomic_store(result, (unint64_t *)&qword_1ED3A2898);
  }
  return result;
}

uint64_t FeedNativeAdIntegrator.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t sub_1BA83A2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA5B089C(0, &qword_1ED3C5C88, &qword_1ED3C5C80, (uint64_t)&protocol descriptor for FeedLayoutDatabaseType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FeedJournalGroupResult.emitter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA83AAFC(v1 + 32, a1);
}

double FeedJournalGroupResult.durationInMilliseconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 224);
}

uint64_t getEnumTagSinglePayload for FormatBezierPathCurveComponent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BA83A3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BB657CA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BA83A3FC()
{
  unint64_t result;

  result = qword_1ED39ACD8;
  if (!qword_1ED39ACD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB418, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39ACD8);
  }
  return result;
}

unint64_t sub_1BA83A440()
{
  unint64_t result;

  result = qword_1ED39ACD0;
  if (!qword_1ED39ACD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB318, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39ACD0);
  }
  return result;
}

unint64_t sub_1BA83A484()
{
  unint64_t result;

  result = qword_1ED3A4F78;
  if (!qword_1ED3A4F78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB3A0, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F78);
  }
  return result;
}

unint64_t sub_1BA83A4C8()
{
  unint64_t result;

  result = qword_1ED39ACC8;
  if (!qword_1ED39ACC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8EB3C8, &type metadata for FeedGroupTrackerEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39ACC8);
  }
  return result;
}

double sub_1BA83A518@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1BA4F29D8((uint64_t *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

void type metadata accessor for FeedGroupKnobsRuleList()
{
  JUMPOUT(0x1BCCE5A70);
}

unint64_t sub_1BA83A56C()
{
  unint64_t result;

  result = qword_1ED3A4F58;
  if (!qword_1ED3A4F58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896E18, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F58);
  }
  return result;
}

unint64_t sub_1BA83A5B0()
{
  unint64_t result;

  result = qword_1ED3A4F50;
  if (!qword_1ED3A4F50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896D18, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F50);
  }
  return result;
}

unint64_t sub_1BA83A5F4()
{
  unint64_t result;

  result = qword_1ED3A4F48;
  if (!qword_1ED3A4F48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896DA0, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F48);
  }
  return result;
}

unint64_t sub_1BA83A638()
{
  unint64_t result;

  result = qword_1ED3A4F40;
  if (!qword_1ED3A4F40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB896DC8, &type metadata for FeedGroupJournalEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F40);
  }
  return result;
}

unint64_t sub_1BA83A69C()
{
  unint64_t result;

  result = qword_1ED3A4F10;
  if (!qword_1ED3A4F10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB892394, &type metadata for FeedGroupGroupingRules.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F10);
  }
  return result;
}

unint64_t sub_1BA83A6E0()
{
  unint64_t result;

  result = qword_1ED3A4F08;
  if (!qword_1ED3A4F08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8923BC, &type metadata for FeedGroupGroupingRules.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F08);
  }
  return result;
}

void sub_1BA83A724()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA83A738()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedBannerAdViewLayout()
{
  return &type metadata for FeedBannerAdViewLayout;
}

uint64_t sub_1BA83A7BC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedBannerAd();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA83A824()
{
  return sub_1BA4A2870(&qword_1ED3B1FD8, type metadata accessor for FeedBannerAdViewLayout.Attributes, (uint64_t)&protocol conformance descriptor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1BA83A850()
{
  return sub_1BA4A2870(&qword_1ED3B1FD0, type metadata accessor for FeedBannerAdViewLayout.Attributes, (uint64_t)&protocol conformance descriptor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1BA83A87C()
{
  return sub_1BA4A2870(&qword_1ED3B1FF0, type metadata accessor for FeedBannerAdViewLayout.Attributes, (uint64_t)&protocol conformance descriptor for FeedBannerAdViewLayout.Attributes);
}

uint64_t sub_1BA83A8A8()
{
  return sub_1BA4A2870(&qword_1ED3B1FE8, type metadata accessor for FeedBannerAdViewLayout.Attributes, (uint64_t)&protocol conformance descriptor for FeedBannerAdViewLayout.Attributes);
}

unint64_t sub_1BA83A8DC()
{
  unint64_t result;

  result = qword_1ED3B1FC8;
  if (!qword_1ED3B1FC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8AB734, &type metadata for FeedBannerAdViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B1FC8);
  }
  return result;
}

unint64_t sub_1BA83A920()
{
  unint64_t result;

  result = qword_1ED3B1FC0;
  if (!qword_1ED3B1FC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8AB75C, &type metadata for FeedBannerAdViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B1FC0);
  }
  return result;
}

void type metadata accessor for FeedBannerAdIntegrator()
{
  JUMPOUT(0x1BCCE5A70);
}

ValueMetadata *type metadata accessor for FeedAudioPlaybackState()
{
  return &type metadata for FeedAudioPlaybackState;
}

unint64_t sub_1BA83A980()
{
  unint64_t result;

  result = qword_1ED3B1F20;
  if (!qword_1ED3B1F20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAudioPlaybackState, &type metadata for FeedAudioPlaybackState);
    atomic_store(result, (unint64_t *)&qword_1ED3B1F20);
  }
  return result;
}

uint64_t FeedServiceConfigType.selectors.getter()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t FeedServiceConfigType.canCache.getter()
{
  return 1;
}

unint64_t sub_1BA83A9D8()
{
  unint64_t result;

  result = qword_1ED39F670[0];
  if (!qword_1ED39F670[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedManagerLoadSource, &type metadata for FeedManagerLoadSource);
    atomic_store(result, qword_1ED39F670);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedListeningProgress()
{
  return &type metadata for FeedListeningProgress;
}

unint64_t sub_1BA83AA2C()
{
  unint64_t result;

  result = qword_1ED3C5950;
  if (!qword_1ED3C5950)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedListeningProgress, &type metadata for FeedListeningProgress);
    atomic_store(result, (unint64_t *)&qword_1ED3C5950);
  }
  return result;
}

uint64_t sub_1BA83AA70()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BA83AAA4(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupEmitterError()
{
  return &type metadata for FeedGroupEmitterError;
}

uint64_t type metadata accessor for FeedCustomItemFactory()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of FeedItemRendererType.register(view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t FeedGroupKnobsRepool.init(freezing:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1BA83AAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA83AB40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BA83AB40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C57E0)
  {
    sub_1BA4D9CE8(255, (unint64_t *)&unk_1ED3C57D0);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C57E0);
  }
}

uint64_t sub_1BA83ABA4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupEmitterRule<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BA83ABD0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContent.Resolved();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1BA83AC5C()
{
  unint64_t result;

  result = qword_1ED3C57C8;
  if (!qword_1ED3C57C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAdGroupAdjacency, &type metadata for FeedAdGroupAdjacency);
    atomic_store(result, (unint64_t *)&qword_1ED3C57C8);
  }
  return result;
}

unint64_t sub_1BA83ACA0()
{
  unint64_t result;

  result = qword_1ED3C57C0;
  if (!qword_1ED3C57C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAdGroupAdjacency, &type metadata for FeedAdGroupAdjacency);
    atomic_store(result, (unint64_t *)&qword_1ED3C57C0);
  }
  return result;
}

void type metadata accessor for FeedServiceDebugger()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t FeedServiceDebugger.init(blueprintProvider:cursorContainerBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 88) - 8) + 32))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 112), a1);
  v6 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 120));
  *v6 = a2;
  v6[1] = a3;
  return v3;
}

uint64_t sub_1BA83AD4C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PuzzleStatistic();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedPuzzleRankState()
{
  return &type metadata for FeedPuzzleRankState;
}

unint64_t sub_1BA83ADF0()
{
  unint64_t result;

  result = qword_1ED3A2878;
  if (!qword_1ED3A2878)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleRankState, &type metadata for FeedPuzzleRankState);
    atomic_store(result, (unint64_t *)&qword_1ED3A2878);
  }
  return result;
}

uint64_t FeedPoolServiceType.fetchPool(with:feedContext:cachePolicy:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  char v6;

  v6 = *a3;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 32))(a1, &v6, a4, a5);
}

uint64_t storeEnumTagSinglePayload for FeedPoolCachePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA83AEB4 + 4 * byte_1BB884A75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA83AEE8 + 4 * byte_1BB884A70[v4]))();
}

uint64_t sub_1BA83AEE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83AEF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA83AEF8);
  return result;
}

uint64_t sub_1BA83AF04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA83AF0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA83AF10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83AF18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83AF24()
{
  sub_1BA83AF8C();
  return sub_1BB872D60();
}

NewsFeed::FeedPoolCachePolicy_optional sub_1BA83AF80(Swift::String *a1)
{
  return FeedPoolCachePolicy.init(rawValue:)(*a1);
}

unint64_t sub_1BA83AF8C()
{
  unint64_t result;

  result = qword_1ED39AC10;
  if (!qword_1ED39AC10)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPoolCachePolicy, &type metadata for FeedPoolCachePolicy);
    atomic_store(result, (unint64_t *)&qword_1ED39AC10);
  }
  return result;
}

uint64_t type metadata accessor for FeedNativeAdManager()
{
  return objc_opt_self();
}

uint64_t sub_1BA83AFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return FeedNativeAdManager.onFetch(_:)(a1, a2, a3);
}

BOOL sub_1BA83B010(uint64_t a1, uint64_t a2)
{
  return FeedNativeAdManager.shouldFetchNativeAd(for:)(*(Swift::String *)&a1);
}

uint64_t type metadata accessor for FeedItemDebugColors()
{
  return objc_opt_self();
}

uint64_t sub_1BA83B054()
{
  uint64_t result;

  type metadata accessor for FeedItemDebugColors();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 24) = 0;
  qword_1ED4767B0 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupSortOption(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

uint64_t sub_1BA83B0B8(_QWORD *a1)
{
  return FeedGroupSortOption.init(from:)(a1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupSortOption.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA83B118 + 4 * byte_1BB88BB71[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA83B14C + 4 * byte_1BB88BB6C[v4]))();
}

uint64_t sub_1BA83B14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83B154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA83B15CLL);
  return result;
}

uint64_t sub_1BA83B168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA83B170);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA83B174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83B17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA83B188()
{
  sub_1BA83B254();
  return sub_1BB872D60();
}

uint64_t sub_1BA83B1E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA4A2564();
  *a1 = result;
  return result;
}

unint64_t sub_1BA83B210()
{
  unint64_t result;

  result = qword_1ED3A4C28[0];
  if (!qword_1ED3A4C28[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88BE84, &type metadata for FeedGroupSortOption.CodingType);
    atomic_store(result, qword_1ED3A4C28);
  }
  return result;
}

unint64_t sub_1BA83B254()
{
  unint64_t result;

  result = qword_1ED3A4C20;
  if (!qword_1ED3A4C20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88BD6C, &type metadata for FeedGroupSortOption.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3A4C20);
  }
  return result;
}

unint64_t sub_1BA83B2A0()
{
  unint64_t result;

  result = qword_1ED3A4C10;
  if (!qword_1ED3A4C10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88BC7C, &type metadata for FeedGroupSortOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A4C10);
  }
  return result;
}

unint64_t sub_1BA83B2E4()
{
  unint64_t result;

  result = qword_1ED3A4C08;
  if (!qword_1ED3A4C08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88BCA4, &type metadata for FeedGroupSortOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A4C08);
  }
  return result;
}

unint64_t sub_1BA83B328()
{
  unint64_t result;

  result = qword_1ED3A4C00;
  if (!qword_1ED3A4C00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88BEAC, &type metadata for FeedGroupSortOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A4C00);
  }
  return result;
}

unint64_t sub_1BA83B36C()
{
  unint64_t result;

  result = qword_1ED3B1AA0;
  if (!qword_1ED3B1AA0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B1AA0);
  }
  return result;
}

void type metadata accessor for FeedDatabaseContext()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t sub_1BA83B3CC()
{
  return swift_initClassMetadata2();
}

void sub_1BA83B40C()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t FeedCursorContainer.cursor()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 < 0)
  {
    v5 = swift_retain();
    v9 = sub_1BA83C824(v5, v6, v7, v8);
    swift_release();
    return v9;
  }
  else
  {
    type metadata accessor for FeedCursor(255, a2, a3, a4);
    sub_1BB86EAAC();
    swift_retain();
    return sub_1BB86E9D4();
  }
}

uint64_t FeedCursorContainer.kind.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  v2 = (_BYTE *)(result + 32);
  if (result < 0)
    v2 = (_BYTE *)(result + qword_1ED476480);
  *a2 = *v2;
  return result;
}

uint64_t FeedCursorContainer.shouldWriteGroupsToDatabase.getter(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  BOOL v3;
  unsigned int v4;

  if (a1 < 0)
    return 0;
  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = v1 >= 6;
  v3 = v1 == 6;
  v4 = (0x63u >> v1) & 1;
  if (!v3 && v2)
    return 0;
  else
    return v4;
}

uint64_t FeedCursorContainer.identifier.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1BA630F34(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BA83B518(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result < 0)
  {
    v2 = *(_QWORD *)(result + 16);
    v1 = *(_QWORD *)(result + 24);
    sub_1BB025BE8();
    swift_allocError();
    *(_QWORD *)v3 = v2;
    *(_QWORD *)(v3 + 8) = v1;
    *(_BYTE *)(v3 + 16) = 4;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t type metadata accessor for FeedBannerAdFactory()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FeedServiceOptions()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA83B5B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedServiceOptions.init(from:)(a1, a2);
}

uint64_t sub_1BA83B5C8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedServiceOptions.RootCursorSource(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BA83B650@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FeedServiceOptions.Database.init(from:)(a1, a2);
}

unint64_t sub_1BA83B664()
{
  unint64_t result;

  result = qword_1ED3A2868;
  if (!qword_1ED3A2868)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedServiceOptions.Database, &type metadata for FeedServiceOptions.Database);
    atomic_store(result, (unint64_t *)&qword_1ED3A2868);
  }
  return result;
}

unint64_t sub_1BA83B6B0()
{
  unint64_t result;

  result = qword_1ED3A2858;
  if (!qword_1ED3A2858)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3270, &type metadata for FeedServiceOptions.Database.OfflineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2858);
  }
  return result;
}

unint64_t sub_1BA83B6F4()
{
  unint64_t result;

  result = qword_1ED3A2850;
  if (!qword_1ED3A2850)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3298, &type metadata for FeedServiceOptions.Database.OfflineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2850);
  }
  return result;
}

unint64_t sub_1BA83B738()
{
  unint64_t result;

  result = qword_1ED3A2848;
  if (!qword_1ED3A2848)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3610, &type metadata for FeedServiceOptions.Database.OfflineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2848);
  }
  return result;
}

unint64_t sub_1BA83B784()
{
  unint64_t result;

  result = qword_1ED3A2840;
  if (!qword_1ED3A2840)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A32C0, &type metadata for FeedServiceOptions.Database.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2840);
  }
  return result;
}

unint64_t sub_1BA83B7C8()
{
  unint64_t result;

  result = qword_1ED3A2838;
  if (!qword_1ED3A2838)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A32E8, &type metadata for FeedServiceOptions.Database.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2838);
  }
  return result;
}

unint64_t sub_1BA83B80C()
{
  unint64_t result;

  result = qword_1ED3A2830;
  if (!qword_1ED3A2830)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A35C0, &type metadata for FeedServiceOptions.Database.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2830);
  }
  return result;
}

unint64_t sub_1BA83B858()
{
  unint64_t result;

  result = qword_1ED3A2828;
  if (!qword_1ED3A2828)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3310, &type metadata for FeedServiceOptions.Database.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2828);
  }
  return result;
}

unint64_t sub_1BA83B89C()
{
  unint64_t result;

  result = qword_1ED3A2820;
  if (!qword_1ED3A2820)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3338, &type metadata for FeedServiceOptions.Database.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2820);
  }
  return result;
}

unint64_t sub_1BA83B8E0()
{
  unint64_t result;

  result = qword_1ED3A2818;
  if (!qword_1ED3A2818)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3570, &type metadata for FeedServiceOptions.Database.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2818);
  }
  return result;
}

uint64_t sub_1BA83B924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA49DF7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA83B948()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746C7561666564;
  if (*v0 != 1)
    v1 = 0x656E696C66666FLL;
  if (*v0)
    return v1;
  else
    return 1701736302;
}

unint64_t sub_1BA83B9A4()
{
  unint64_t result;

  result = qword_1ED3A2810;
  if (!qword_1ED3A2810)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3360, &type metadata for FeedServiceOptions.Database.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2810);
  }
  return result;
}

unint64_t sub_1BA83B9E8()
{
  unint64_t result;

  result = qword_1ED3A2808;
  if (!qword_1ED3A2808)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3388, &type metadata for FeedServiceOptions.Database.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2808);
  }
  return result;
}

unint64_t sub_1BA83BA2C()
{
  unint64_t result;

  result = qword_1ED3A2800;
  if (!qword_1ED3A2800)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3520, &type metadata for FeedServiceOptions.Database.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2800);
  }
  return result;
}

BOOL _s8NewsFeed0B14ServiceOptionsV2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BOOL8 result;
  int *v8;
  char v9;
  uint64_t v10;
  double *v11;
  char v12;
  double *v13;
  int v14;

  if (*a1)
    v4 = 0x656E696C66666FLL;
  else
    v4 = 0x746C7561666564;
  if (*a2)
    v5 = 0x656E696C66666FLL;
  else
    v5 = 0x746C7561666564;
  if (v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease_n();
    result = 0;
    if ((v6 & 1) == 0)
      return result;
  }
  v8 = (int *)type metadata accessor for FeedServiceOptions(0);
  _s8NewsFeed0B14ServiceOptionsV16RootCursorSourceO2eeoiySbAE_AEtFZ_0((uint64_t)&a1[v8[5]], (uint64_t)&a2[v8[5]]);
  if ((v9 & 1) == 0)
    return 0;
  v10 = v8[6];
  v11 = (double *)&a1[v10];
  v12 = a1[v10 + 8];
  v13 = (double *)&a2[v10];
  v14 = a2[v10 + 8];
  if ((v12 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (*v11 != *v13)
      LOBYTE(v14) = 1;
    if ((v14 & 1) != 0)
      return 0;
  }
  return a1[v8[7]] == a2[v8[7]];
}

uint64_t sub_1BA83BB7C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FeedServiceOptions.RootCursorFreshness.init(from:)(a1, a2);
}

unint64_t sub_1BA83BB90()
{
  unint64_t result;

  result = qword_1ED3A27F8;
  if (!qword_1ED3A27F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedServiceOptions.RootCursorFreshness, &type metadata for FeedServiceOptions.RootCursorFreshness);
    atomic_store(result, (unint64_t *)&qword_1ED3A27F8);
  }
  return result;
}

uint64_t sub_1BA83BBD4()
{
  return 12383;
}

unint64_t sub_1BA83BBE8()
{
  unint64_t result;

  result = qword_1ED3A27E8;
  if (!qword_1ED3A27E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A30B0, &type metadata for FeedServiceOptions.RootCursorFreshness.NewerThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27E8);
  }
  return result;
}

unint64_t sub_1BA83BC2C()
{
  unint64_t result;

  result = qword_1ED3A27E0;
  if (!qword_1ED3A27E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A30D8, &type metadata for FeedServiceOptions.RootCursorFreshness.NewerThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27E0);
  }
  return result;
}

unint64_t sub_1BA83BC70()
{
  unint64_t result;

  result = qword_1ED3A27D8;
  if (!qword_1ED3A27D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3700, &type metadata for FeedServiceOptions.RootCursorFreshness.NewerThanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27D8);
  }
  return result;
}

unint64_t sub_1BA83BCBC()
{
  unint64_t result;

  result = qword_1ED3A27D0;
  if (!qword_1ED3A27D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3168, &type metadata for FeedServiceOptions.RootCursorFreshness.AnyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27D0);
  }
  return result;
}

unint64_t sub_1BA83BD00()
{
  unint64_t result;

  result = qword_1ED3A27C8;
  if (!qword_1ED3A27C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3190, &type metadata for FeedServiceOptions.RootCursorFreshness.AnyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27C8);
  }
  return result;
}

unint64_t sub_1BA83BD44()
{
  unint64_t result;

  result = qword_1ED3A27C0;
  if (!qword_1ED3A27C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A36B0, &type metadata for FeedServiceOptions.RootCursorFreshness.AnyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27C0);
  }
  return result;
}

uint64_t sub_1BA83BD88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA49B4E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA83BDAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x616854726577656ELL;
  else
    return 7958113;
}

unint64_t sub_1BA83BDEC()
{
  unint64_t result;

  result = qword_1ED3A27B8;
  if (!qword_1ED3A27B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A31B8, &type metadata for FeedServiceOptions.RootCursorFreshness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27B8);
  }
  return result;
}

unint64_t sub_1BA83BE30()
{
  unint64_t result;

  result = qword_1ED3A27B0;
  if (!qword_1ED3A27B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A31E0, &type metadata for FeedServiceOptions.RootCursorFreshness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27B0);
  }
  return result;
}

unint64_t sub_1BA83BE74()
{
  unint64_t result;

  result = qword_1ED3A27A8;
  if (!qword_1ED3A27A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3660, &type metadata for FeedServiceOptions.RootCursorFreshness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A27A8);
  }
  return result;
}

void sub_1BA83BEB8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3A0D98)
  {
    type metadata accessor for FeedServiceOptions.RootCursorSource(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3A0D98);
  }
}

uint64_t sub_1BA83BF18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedServiceOptions.RootCursorSource.init(from:)(a1, a2);
}

unint64_t sub_1BA83BF34()
{
  unint64_t result;

  result = qword_1ED3A2790;
  if (!qword_1ED3A2790)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2DE8, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseDateIntervalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2790);
  }
  return result;
}

unint64_t sub_1BA83BF78()
{
  unint64_t result;

  result = qword_1ED3A2788;
  if (!qword_1ED3A2788)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2E10, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseDateIntervalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2788);
  }
  return result;
}

unint64_t sub_1BA83BFBC()
{
  unint64_t result;

  result = qword_1ED3A2780;
  if (!qword_1ED3A2780)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3890, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseDateIntervalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2780);
  }
  return result;
}

unint64_t sub_1BA83C008()
{
  unint64_t result;

  result = qword_1ED3A2778;
  if (!qword_1ED3A2778)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2EA0, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2778);
  }
  return result;
}

unint64_t sub_1BA83C04C()
{
  unint64_t result;

  result = qword_1ED3A2770;
  if (!qword_1ED3A2770)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2EC8, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2770);
  }
  return result;
}

unint64_t sub_1BA83C090()
{
  unint64_t result;

  result = qword_1ED3A2768;
  if (!qword_1ED3A2768)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3840, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2768);
  }
  return result;
}

unint64_t sub_1BA83C0DC()
{
  unint64_t result;

  result = qword_1ED3A2760;
  if (!qword_1ED3A2760)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2F58, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2760);
  }
  return result;
}

unint64_t sub_1BA83C120()
{
  unint64_t result;

  result = qword_1ED3A2758;
  if (!qword_1ED3A2758)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2F80, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2758);
  }
  return result;
}

unint64_t sub_1BA83C164()
{
  unint64_t result;

  result = qword_1ED3A2750;
  if (!qword_1ED3A2750)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A37F0, &type metadata for FeedServiceOptions.RootCursorSource.PreferDatabaseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2750);
  }
  return result;
}

unint64_t sub_1BA83C1B0()
{
  unint64_t result;

  result = qword_1ED3A2748;
  if (!qword_1ED3A2748)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2FA8, &type metadata for FeedServiceOptions.RootCursorSource.DatabaseOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2748);
  }
  return result;
}

unint64_t sub_1BA83C1F4()
{
  unint64_t result;

  result = qword_1ED3A2740;
  if (!qword_1ED3A2740)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2FD0, &type metadata for FeedServiceOptions.RootCursorSource.DatabaseOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2740);
  }
  return result;
}

unint64_t sub_1BA83C238()
{
  unint64_t result;

  result = qword_1ED3A2738;
  if (!qword_1ED3A2738)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A37A0, &type metadata for FeedServiceOptions.RootCursorSource.DatabaseOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2738);
  }
  return result;
}

unint64_t sub_1BA83C284()
{
  unint64_t result;

  result = qword_1ED3A2730;
  if (!qword_1ED3A2730)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2D98, &type metadata for FeedServiceOptions.RootCursorSource.NetworkOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2730);
  }
  return result;
}

unint64_t sub_1BA83C2C8()
{
  unint64_t result;

  result = qword_1ED3A2728;
  if (!qword_1ED3A2728)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2DC0, &type metadata for FeedServiceOptions.RootCursorSource.NetworkOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2728);
  }
  return result;
}

unint64_t sub_1BA83C30C()
{
  unint64_t result;

  result = qword_1ED3A2720;
  if (!qword_1ED3A2720)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A38E0, &type metadata for FeedServiceOptions.RootCursorSource.NetworkOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2720);
  }
  return result;
}

uint64_t sub_1BA83C350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA4A64C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA83C374()
{
  unsigned __int8 *v0;

  return sub_1BA83C450(*v0);
}

unint64_t sub_1BA83C384()
{
  unint64_t result;

  result = qword_1ED3A2718;
  if (!qword_1ED3A2718)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A2FF8, &type metadata for FeedServiceOptions.RootCursorSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2718);
  }
  return result;
}

unint64_t sub_1BA83C3C8()
{
  unint64_t result;

  result = qword_1ED3A2710;
  if (!qword_1ED3A2710)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3020, &type metadata for FeedServiceOptions.RootCursorSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2710);
  }
  return result;
}

unint64_t sub_1BA83C40C()
{
  unint64_t result;

  result = qword_1ED3A2708;
  if (!qword_1ED3A2708)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3750, &type metadata for FeedServiceOptions.RootCursorSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2708);
  }
  return result;
}

uint64_t sub_1BA83C450(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA83C48C + 4 * byte_1BB8A2920[a1]))(0x6573616261746164, 0xEC000000796C6E4FLL);
}

uint64_t sub_1BA83C48C()
{
  return 0x6144726566657270;
}

unint64_t sub_1BA83C4B0()
{
  return 0xD000000000000014;
}

unint64_t sub_1BA83C4CC()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1BA83C4EC()
{
  return 0x4F6B726F7774656ELL;
}

unint64_t sub_1BA83C514()
{
  unint64_t result;

  result = qword_1ED3A2700;
  if (!qword_1ED3A2700)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3418, &type metadata for FeedServiceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2700);
  }
  return result;
}

unint64_t sub_1BA83C558()
{
  unint64_t result;

  result = qword_1ED3A26F8;
  if (!qword_1ED3A26F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A3440, &type metadata for FeedServiceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A26F8);
  }
  return result;
}

unint64_t sub_1BA83C59C()
{
  unint64_t result;

  result = qword_1ED3A26F0;
  if (!qword_1ED3A26F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8A34D0, &type metadata for FeedServiceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A26F0);
  }
  return result;
}

_WORD *sub_1BA83C5E0(_WORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

_WORD *sub_1BA83C5F0(_WORD *result, unsigned int a2)
{
  if (a2 < 3)
    *result = *result & 0x33F | ((_WORD)a2 << 14);
  else
    *result = (4 * (a2 - 3)) & 0x300 | (a2 - 3) & 0x3F | 0xC000;
  return result;
}

uint64_t sub_1BA83C628(unsigned __int16 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *a1;
  v2 = v1 >> 14;
  v3 = (v1 & 0x3F | (((v1 >> 8) & 3) << 6)) + 3;
  if (v2 == 3)
    return v3;
  else
    return v2;
}

ValueMetadata *type metadata accessor for FeedScoringContext()
{
  return &type metadata for FeedScoringContext;
}

void FeedScoringContext.ontologyLevelConfiguration(treatment:)()
{
  sub_1BA819BFC();
}

void FeedScoringContext.scoringConfiguration(treatment:)()
{
  sub_1BA819BFC();
}

void FeedScoringContext.topicsConfiguration(treatment:)()
{
  sub_1BA819BFC();
}

ValueMetadata *type metadata accessor for FeedPuzzleProgress()
{
  return &type metadata for FeedPuzzleProgress;
}

unint64_t sub_1BA83C6D8()
{
  unint64_t result;

  result = qword_1ED3A4BF0;
  if (!qword_1ED3A4BF0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedPuzzleProgress, &type metadata for FeedPuzzleProgress);
    atomic_store(result, (unint64_t *)&qword_1ED3A4BF0);
  }
  return result;
}

uint64_t sub_1BA83C71C()
{
  return sub_1BA4A2870(qword_1ED3BBBC0, (uint64_t (*)(uint64_t))type metadata accessor for FeedLayoutCacheKey, (uint64_t)&protocol conformance descriptor for FeedLayoutCacheKey);
}

ValueMetadata *type metadata accessor for FeedGroupRepooling()
{
  return &type metadata for FeedGroupRepooling;
}

unint64_t sub_1BA83C760()
{
  unint64_t result;

  result = qword_1ED39AB50;
  if (!qword_1ED39AB50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB912DC0, &type metadata for FeedGroupRepooling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39AB50);
  }
  return result;
}

unint64_t sub_1BA83C7A4()
{
  unint64_t result;

  result = qword_1ED39AB48;
  if (!qword_1ED39AB48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB912DE8, &type metadata for FeedGroupRepooling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39AB48);
  }
  return result;
}

uint64_t type metadata accessor for FeedDeferredCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedDeferredCursor);
}

uint64_t sub_1BA83C7F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + qword_1ED39F5C0))(v0);
}

uint64_t sub_1BA83C824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for FeedCursor(0, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  return sub_1BB86EC14();
}

uint64_t sub_1BA83C854()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedDatabaseCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedDatabaseCursor);
}

uint64_t sub_1BA83C8BC()
{
  return sub_1BB8734F8();
}

uint64_t sub_1BA83C8DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA499B00(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BA83C8F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB86EC14();
  *a1 = result;
  return result;
}

uint64_t *sub_1BA83C924(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_1BA4B6034(a1, a2, a3, a4);
}

uint64_t type metadata accessor for FeedCursorManifest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedCursorManifest);
}

uint64_t *sub_1BA83C990(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_1BA4B6934(a1, a2);
}

uint64_t sub_1BA83C9D8()
{
  return swift_initClassMetadata2();
}

uint64_t FeedContextFactory.createFeedContext<A>(serviceConfig:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  unsigned __int8 v7;
  unsigned __int8 v8;

  (*(void (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
  FeedServiceConfigType.feedMode.getter(a1, a2, &v8);
  v7 = v8;
  sub_1BB358594(&v7, a3);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FeedPluginManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedPluginManager);
}

uint64_t (*sub_1BA83CAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, _OWORD *a2)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  return sub_1BA5627DC;
}

uint64_t FeedPluginManager.add<A>(subFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA4B788C(a1, a2, a3);
}

uint64_t sub_1BA83CBAC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedNativeAdModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedNativeAdModel);
}

uint64_t sub_1BA83CBFC()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for FeedModifierStore()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t type metadata accessor for FeedLayoutTracker()
{
  return objc_opt_self();
}

unint64_t sub_1BA83CC6C()
{
  unint64_t result;

  result = qword_1ED3B17D0;
  if (!qword_1ED3B17D0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3B17D0);
  }
  return result;
}

uint64_t sub_1BA83CCC0(_QWORD *a1)
{
  return FeedGroupFreezing.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FeedGroupFreezing()
{
  return &type metadata for FeedGroupFreezing;
}

unint64_t sub_1BA83CCE4()
{
  unint64_t result;

  result = qword_1ED39C5E0;
  if (!qword_1ED39C5E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupFreezing, &type metadata for FeedGroupFreezing);
    atomic_store(result, (unint64_t *)&qword_1ED39C5E0);
  }
  return result;
}

void sub_1BA83CD28(_QWORD *a1@<X8>)
{
  *a1 = 0x776F6C6C61736964;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1BA83CD44()
{
  sub_1BA4B79F4();
  return sub_1BB872D0C();
}

unint64_t sub_1BA83CD90()
{
  unint64_t result;

  result = qword_1ED39AB38;
  if (!qword_1ED39AB38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB911658, &type metadata for FeedGroupFreezing.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED39AB38);
  }
  return result;
}

unint64_t sub_1BA83CDDC()
{
  unint64_t result;

  result = qword_1ED39C5C0;
  if (!qword_1ED39C5C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9113C0, &type metadata for FeedGroupFreezing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39C5C0);
  }
  return result;
}

unint64_t sub_1BA83CE20()
{
  unint64_t result;

  result = qword_1ED39C5B8;
  if (!qword_1ED39C5B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9113E8, &type metadata for FeedGroupFreezing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39C5B8);
  }
  return result;
}

uint64_t sub_1BA83CE64()
{
  return swift_initClassMetadata2();
}

void sub_1BA83CEC0()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA83CED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = type metadata accessor for FeedGroupEmitTask.State(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v7 + 84);
  }
  return result;
}

uint64_t sub_1BA83CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FeedGroupEmitTask.Result(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t FeedEditionConfig.edition(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  FeedEditionConfig.fetchWindow(for:)(a1);
  v6 = v5;
  result = type metadata accessor for FeedEdition();
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v6;
  return result;
}

double sub_1BA83D020()
{
  return sub_1BA4CF774(&qword_1ED3C5420);
}

uint64_t sub_1BA83D02C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BA83D078()
{
  sub_1BB86E71C();
  return swift_release();
}

uint64_t type metadata accessor for FeedCursorTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedCursorTracker);
}

uint64_t FeedCursorTracker.__allocating_init(snapshot:)(uint64_t a1)
{
  return sub_1BA511C74(a1, (void (*)(uint64_t))FeedCursorTracker.init(snapshot:));
}

uint64_t FeedCursorTracker.__allocating_init(context:)(uint64_t a1)
{
  return sub_1BA511C74(a1, (void (*)(uint64_t))FeedCursorTracker.init(context:));
}

uint64_t sub_1BA83D0D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BA4CF37C(a1, a2, *(double *)(v2 + 56));
}

uint64_t sub_1BA83D0F4()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v8;
  _OWORD v9[5];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_OWORD **)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = **(_QWORD **)(v0 + 16);
  v5 = v2[3];
  v9[2] = v2[2];
  v9[3] = v5;
  v9[4] = v2[4];
  v6 = v2[1];
  v9[0] = *v2;
  v9[1] = v6;
  v8 = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *, char *, _QWORD))(*(_QWORD *)(v4 + 104) + 24))(v1, v9, &v8, *(_QWORD *)(v4 + 88));
}

uint64_t sub_1BA83D168()
{
  return sub_1BA49A3D4();
}

void sub_1BA83D174()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA83D184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FeedGroupEmitTask.Result(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA83D208()
{
  unint64_t result;

  result = qword_1ED39C598;
  if (!qword_1ED39C598)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedRefreshState, &type metadata for FeedRefreshState);
    atomic_store(result, (unint64_t *)&qword_1ED39C598);
  }
  return result;
}

unint64_t sub_1BA83D24C()
{
  unint64_t result;

  result = qword_1ED39C590;
  if (!qword_1ED39C590)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedRefreshState, &type metadata for FeedRefreshState);
    atomic_store(result, (unint64_t *)&qword_1ED39C590);
  }
  return result;
}

unint64_t sub_1BA83D290()
{
  unint64_t result;

  result = qword_1ED39C588;
  if (!qword_1ED39C588)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedRefreshState, &type metadata for FeedRefreshState);
    atomic_store(result, (unint64_t *)&qword_1ED39C588);
  }
  return result;
}

unint64_t sub_1BA83D2D8()
{
  unint64_t result;

  result = qword_1ED3B1408[0];
  if (!qword_1ED3B1408[0])
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedRefreshEvent, &type metadata for FeedRefreshEvent);
    atomic_store(result, qword_1ED3B1408);
  }
  return result;
}

uint64_t type metadata accessor for FeedLayoutSolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedLayoutSolver);
}

unint64_t sub_1BA83D32C()
{
  unint64_t result;

  result = qword_1ED39F428;
  if (!qword_1ED39F428)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915A64, &type metadata for FeedLayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39F428);
  }
  return result;
}

unint64_t sub_1BA83D370()
{
  unint64_t result;

  result = qword_1ED39F420;
  if (!qword_1ED39F420)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915964, &type metadata for FeedLayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39F420);
  }
  return result;
}

unint64_t sub_1BA83D3B4()
{
  unint64_t result;

  result = qword_1ED3A4A80;
  if (!qword_1ED3A4A80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9159EC, &type metadata for FeedLayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4A80);
  }
  return result;
}

unint64_t sub_1BA83D3F8()
{
  unint64_t result;

  result = qword_1ED39F418;
  if (!qword_1ED39F418)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915A14, &type metadata for FeedLayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39F418);
  }
  return result;
}

unint64_t sub_1BA83D454()
{
  unint64_t result;

  result = qword_1ED3A4A78;
  if (!qword_1ED3A4A78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915C34, &type metadata for FeedLayoutEntity.LayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4A78);
  }
  return result;
}

unint64_t sub_1BA83D498()
{
  unint64_t result;

  result = qword_1ED3A4A68;
  if (!qword_1ED3A4A68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB915C0C, &type metadata for FeedLayoutEntity.LayoutEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4A68);
  }
  return result;
}

double FeedJournalEntry.durationInMilliseconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_1BA83D4F0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

void sub_1BA83D4F8()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA83D508()
{
  return swift_initClassMetadata2();
}

unint64_t sub_1BA83D560()
{
  unint64_t result;

  result = qword_1ED39AA70;
  if (!qword_1ED39AA70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1C84, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA70);
  }
  return result;
}

unint64_t sub_1BA83D5A4()
{
  unint64_t result;

  result = qword_1ED39AA68;
  if (!qword_1ED39AA68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1B84, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA68);
  }
  return result;
}

unint64_t sub_1BA83D5E8()
{
  unint64_t result;

  result = qword_1ED3A4A60;
  if (!qword_1ED3A4A60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1C0C, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4A60);
  }
  return result;
}

unint64_t sub_1BA83D62C()
{
  unint64_t result;

  result = qword_1ED39AA60;
  if (!qword_1ED39AA60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F1C34, &type metadata for FeedCursorEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA60);
  }
  return result;
}

double sub_1BA83D67C@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  double result;
  __int128 v5;
  _OWORD v6[6];

  sub_1BA50BE74((uint64_t *)v6);
  v2 = v6[3];
  a1[2] = v6[2];
  a1[3] = v2;
  v3 = v6[5];
  a1[4] = v6[4];
  a1[5] = v3;
  result = *(double *)v6;
  v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  return result;
}

uint64_t sub_1BA83D6CC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FeedBannerAdView();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA83D708()
{
  return sub_1BA83D6CC(&qword_1ED3B1130, (uint64_t)&protocol conformance descriptor for FeedBannerAdView);
}

uint64_t sub_1BA83D72C()
{
  return sub_1BA4CF938();
}

uint64_t sub_1BA83D74C(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1BA83D758(a1, a2);
}

uint64_t sub_1BA83D758(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = 0x6E4F646568636163;
  v8 = 0xEA0000000000796CLL;
  if (v2 != 1)
  {
    v7 = 0x6143726566657270;
    v8 = 0xEC00000064656863;
  }
  if (*a1)
    v9 = v7;
  else
    v9 = 0x746C7561666564;
  if (v2)
    v10 = v8;
  else
    v10 = 0xE700000000000000;
  v11 = 0x6E4F646568636163;
  v12 = 0xEA0000000000796CLL;
  if (*(_BYTE *)a2 != 1)
  {
    v11 = 0x6143726566657270;
    v12 = 0xEC00000064656863;
  }
  if (*(_BYTE *)a2)
    v13 = v11;
  else
    v13 = 0x746C7561666564;
  if (*(_BYTE *)a2)
    v14 = v12;
  else
    v14 = 0xE700000000000000;
  if (v9 == v13 && v10 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  if (v3 == v5 && v4 == v6)
    return 1;
  else
    return sub_1BB874398();
}

uint64_t sub_1BA83D8D4()
{
  uint64_t v0;

  return sub_1BA519700(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_OWORD **)(v0 + 64), *(unsigned __int8 *)(v0 + 72));
}

uint64_t sub_1BA83D8EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1BA4DC380(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BA83D968()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  char v8;
  _OWORD v9[5];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_OWORD **)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = **(_QWORD **)(v0 + 16);
  v5 = v2[3];
  v9[2] = v2[2];
  v9[3] = v5;
  v9[4] = v2[4];
  v6 = v2[1];
  v9[0] = *v2;
  v9[1] = v6;
  v8 = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *, char *, _QWORD))(*(_QWORD *)(v4 + 88) + 40))(v1, v9, &v8, *(_QWORD *)(v4 + 80));
}

void type metadata accessor for FeedPluginModel()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t sub_1BA83D9E4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedLoadingGate.Seal(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t FeedLoadingGate.init(log:)(void *a1)
{
  uint64_t v2;

  v2 = sub_1BA4C45C0(a1);

  return v2;
}

uint64_t sub_1BA83DAB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1ED3C5218, a2, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupRegion, (uint64_t)&protocol conformance descriptor for FeedGroupRegion);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA83DAF0()
{
  unint64_t result;

  result = qword_1ED39AA40;
  if (!qword_1ED39AA40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8900BC, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA40);
  }
  return result;
}

unint64_t sub_1BA83DB34()
{
  unint64_t result;

  result = qword_1ED39AA38;
  if (!qword_1ED39AA38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB88FFBC, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA38);
  }
  return result;
}

unint64_t sub_1BA83DB78()
{
  unint64_t result;

  result = qword_1ED3A49C8;
  if (!qword_1ED3A49C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890044, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49C8);
  }
  return result;
}

unint64_t sub_1BA83DBBC()
{
  unint64_t result;

  result = qword_1ED39AA30;
  if (!qword_1ED39AA30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89006C, &type metadata for FeedGroupEntity);
    atomic_store(result, (unint64_t *)&qword_1ED39AA30);
  }
  return result;
}

unint64_t sub_1BA83DC18()
{
  unint64_t result;

  result = qword_1ED3A49C0;
  if (!qword_1ED3A49C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8902EC, &type metadata for FeedGroupEntity.ManifestEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49C0);
  }
  return result;
}

unint64_t sub_1BA83DC5C()
{
  unint64_t result;

  result = qword_1ED3A49B8;
  if (!qword_1ED3A49B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890314, &type metadata for FeedGroupEntity.ManifestEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49B8);
  }
  return result;
}

unint64_t sub_1BA83DCA0()
{
  unint64_t result;

  result = qword_1ED3A49B0;
  if (!qword_1ED3A49B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8902C4, &type metadata for FeedGroupEntity.ManifestEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49B0);
  }
  return result;
}

unint64_t sub_1BA83DCEC()
{
  unint64_t result;

  result = qword_1ED3A49A8;
  if (!qword_1ED3A49A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB89029C, &type metadata for FeedGroupEntity.ItemEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49A8);
  }
  return result;
}

unint64_t sub_1BA83DD30()
{
  unint64_t result;

  result = qword_1ED3A49A0;
  if (!qword_1ED3A49A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890344, &type metadata for FeedGroupEntity.ItemEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A49A0);
  }
  return result;
}

unint64_t sub_1BA83DD74()
{
  unint64_t result;

  result = qword_1ED3A4998;
  if (!qword_1ED3A4998)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB890274, &type metadata for FeedGroupEntity.ItemEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4998);
  }
  return result;
}

void sub_1BA83DDC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1BA522874(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

void sub_1BA83DDD8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BA50FF74(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(_BYTE *)(v4 + 32));
}

uint64_t sub_1BA83DDE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BA5801DC(a1, a2);
}

uint64_t sub_1BA83DDEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA49B3D8(a1, *(void (**)(__int128 *__return_ptr, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BA83DE08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BA4BB9F4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1BA83DE24()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedItemSorter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedItemSorter);
}

ValueMetadata *type metadata accessor for FeedDaysOfWeek()
{
  return &type metadata for FeedDaysOfWeek;
}

unint64_t sub_1BA83DE8C()
{
  unint64_t result;

  result = qword_1ED3B0DC8;
  if (!qword_1ED3B0DC8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedDaysOfWeek, &type metadata for FeedDaysOfWeek);
    atomic_store(result, (unint64_t *)&qword_1ED3B0DC8);
  }
  return result;
}

uint64_t sub_1BA83DED0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatCustomItem.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA83DF44()
{
  unint64_t result;

  result = qword_1ED3A4940;
  if (!qword_1ED3A4940)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897D84, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4940);
  }
  return result;
}

unint64_t sub_1BA83DF88()
{
  unint64_t result;

  result = qword_1ED3A4938;
  if (!qword_1ED3A4938)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897C84, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4938);
  }
  return result;
}

unint64_t sub_1BA83DFCC()
{
  unint64_t result;

  result = qword_1ED3A4930;
  if (!qword_1ED3A4930)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897D0C, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4930);
  }
  return result;
}

unint64_t sub_1BA83E010()
{
  unint64_t result;

  result = qword_1ED3A4928;
  if (!qword_1ED3A4928)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB897D34, &type metadata for FeedBlobEntity);
    atomic_store(result, (unint64_t *)&qword_1ED3A4928);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedAutomation()
{
  return &type metadata for FeedAutomation;
}

unint64_t sub_1BA83E07C()
{
  unint64_t result;

  result = qword_1ED39C440;
  if (!qword_1ED39C440)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAutomation, &type metadata for FeedAutomation);
    atomic_store(result, (unint64_t *)&qword_1ED39C440);
  }
  return result;
}

unint64_t sub_1BA83E0C0()
{
  unint64_t result;

  result = qword_1ED39C438;
  if (!qword_1ED39C438)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedAutomation, &type metadata for FeedAutomation);
    atomic_store(result, (unint64_t *)&qword_1ED39C438);
  }
  return result;
}

uint64_t Feed.init(name:log:dbLog:adsEnabled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

id Feed.init(name:log:adsEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a3;
  *(_BYTE *)(a5 + 32) = a4;
  return a3;
}

uint64_t sub_1BA83E12C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BA83E160 + 4 * byte_1BB957CD8[*v0]))();
}

void sub_1BA83E160(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6967617473;
  a1[1] = 0xE700000000000000;
}

void sub_1BA83E17C(_QWORD *a1@<X8>)
{
  *a1 = 24945;
  a1[1] = 0xE200000000000000;
}

void sub_1BA83E18C(_QWORD *a1@<X8>)
{
  *a1 = 1953719668;
  a1[1] = 0xE400000000000000;
}

void sub_1BA83E1A0(_QWORD *a1@<X8>)
{
  *a1 = 0x6C65766564;
  a1[1] = 0xE500000000000000;
}

void sub_1BA83E1B8(_QWORD *a1@<X8>)
{
  *a1 = 0x786F62646E6173;
  a1[1] = 0xE700000000000000;
}

void sub_1BA83E1D4(_QWORD *a1@<X8>)
{
  *a1 = 0x316F6D6564;
  a1[1] = 0xE500000000000000;
}

void sub_1BA83E1EC(_QWORD *a1@<X8>)
{
  *a1 = 0x326F6D6564;
  a1[1] = 0xE500000000000000;
}

unint64_t sub_1BA83E204()
{
  unint64_t result;

  result = qword_1ED3D2FA8;
  if (!qword_1ED3D2FA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for NewsEnvironment, &type metadata for NewsEnvironment);
    atomic_store(result, (unint64_t *)&qword_1ED3D2FA8);
  }
  return result;
}

unint64_t sub_1BA83E248()
{
  unint64_t result;

  result = qword_1ED3D2FA0;
  if (!qword_1ED3D2FA0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for NewsEnvironment, &type metadata for NewsEnvironment);
    atomic_store(result, (unint64_t *)&qword_1ED3D2FA0);
  }
  return result;
}

unint64_t sub_1BA83E28C()
{
  unint64_t result;

  result = qword_1ED3D2F98;
  if (!qword_1ED3D2F98)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for NewsEnvironment, &type metadata for NewsEnvironment);
    atomic_store(result, (unint64_t *)&qword_1ED3D2F98);
  }
  return result;
}

uint64_t sub_1BA83E2D0()
{
  sub_1BA80676C();
  return sub_1BB872CC4();
}

uint64_t sub_1BA83E314()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatContent.Resolved();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BA83E3DC()
{
  unint64_t result;

  result = qword_1ED39F2F8;
  if (!qword_1ED39F2F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F5F4C, &type metadata for FormatFeedGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39F2F8);
  }
  return result;
}

unint64_t sub_1BA83E420()
{
  unint64_t result;

  result = qword_1ED39F2E0[0];
  if (!qword_1ED39F2E0[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F5F74, &type metadata for FormatFeedGroup.CodingKeys);
    atomic_store(result, qword_1ED39F2E0);
  }
  return result;
}

uint64_t sub_1BA83E464()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FormatFeedPluginFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatFeedPluginFactory);
}

uint64_t (*sub_1BA83E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v11);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = a2;
  *((_QWORD *)v14 + 3) = a3;
  *((_QWORD *)v14 + 4) = a4;
  *((_QWORD *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, a3);
  return sub_1BB0515B8;
}

uint64_t sub_1BA83E5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return sub_1BA49DF2C();
}

uint64_t type metadata accessor for FormatFeedPluginFactory.FactoryWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatFeedPluginFactory.FactoryWrapper);
}

uint64_t **sub_1BA83E5D0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  swift_allocObject();
  return sub_1BA4BC6D4(a1, a2, a3);
}

uint64_t type metadata accessor for LazyFeedGroupEmitterCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyFeedGroupEmitterCursor);
}

uint64_t sub_1BA83E62C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 48))();
}

uint64_t (*sub_1BA83E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BA83E62C;
}

uint64_t sub_1BA83E72C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 32))();
}

uint64_t (*sub_1BA83E764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BA83E72C;
}

uint64_t (*sub_1BA83E82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BA59A870;
}

uint64_t (*sub_1BA83E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BB7B31A8;
}

uint64_t sub_1BA83E9BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 40))();
}

uint64_t (*sub_1BA83E9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return sub_1BA83E9BC;
}

uint64_t *AnyFeedManager.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = sub_1BA4A0EF0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t sub_1BA83EB04()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyFeedManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyFeedManager);
}

uint64_t AnyFeedManager.prepare(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t AnyFeedManager.save(snapshot:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t AnyFeedManager.loadingSource.getter()
{
  sub_1BA838810();
  return swift_retain();
}

uint64_t AnyFeedManager.readAndFetch(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t *sub_1BA83EBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = *v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a1, a2, v10);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = (char *)swift_allocObject();
  v14 = *(_QWORD *)(v7 + 80);
  *((_QWORD *)v13 + 2) = v14;
  v15 = *(_QWORD *)(v7 + 88);
  *((_QWORD *)v13 + 3) = v15;
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v11, a2);
  v3[2] = (uint64_t)sub_1BB667C5C;
  v3[3] = (uint64_t)v13;
  v3[4] = (uint64_t)sub_1BA83ED1C(a1, v14, v15, a2, a3);
  v3[5] = v16;
  return v3;
}

uint64_t sub_1BA83ECE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 40) + 48))();
}

uint64_t (*sub_1BA83ED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v11);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = a2;
  *((_QWORD *)v14 + 3) = a3;
  *((_QWORD *)v14 + 4) = a4;
  *((_QWORD *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, a4);
  return sub_1BA83ECE4;
}

uint64_t *AnyFeedServiceConfigFetcher.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = sub_1BA83EBE0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

void type metadata accessor for AnyFeedServiceConfigFetcher()
{
  JUMPOUT(0x1BCCE5A70);
}

uint64_t AnyFeedServiceConfigFetcher.fetchConfig(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

void sub_1BA83EE60()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA83EE70()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t type metadata accessor for WebEmbedDataVisualizationDataService(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3C4F30);
}

unint64_t sub_1BA83EE9C()
{
  unint64_t result;

  result = qword_1ED3A4398;
  if (!qword_1ED3A4398)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B57C8, &_s10CodingKeysON_189);
    atomic_store(result, (unint64_t *)&qword_1ED3A4398);
  }
  return result;
}

unint64_t sub_1BA83EEE0()
{
  unint64_t result;

  result = qword_1ED3A4390;
  if (!qword_1ED3A4390)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B57F0, &_s10CodingKeysON_189);
    atomic_store(result, (unint64_t *)&qword_1ED3A4390);
  }
  return result;
}

unint64_t sub_1BA83EF24()
{
  unint64_t result;

  result = qword_1ED3B0D10;
  if (!qword_1ED3B0D10)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateViewNodeState, &type metadata for FormatStateViewNodeState);
    atomic_store(result, (unint64_t *)&qword_1ED3B0D10);
  }
  return result;
}

unint64_t sub_1BA83EF70()
{
  unint64_t result;

  result = qword_1ED3B0D08;
  if (!qword_1ED3B0D08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB906364, &type metadata for FormatStateViewNodeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B0D08);
  }
  return result;
}

unint64_t sub_1BA83EFB4()
{
  unint64_t result;

  result = qword_1ED3B0D00;
  if (!qword_1ED3B0D00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB90638C, &type metadata for FormatStateViewNodeState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B0D00);
  }
  return result;
}

unint64_t sub_1BA83EFF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B0CE8;
  if (!qword_1ED3B0CE8)
  {
    sub_1BA50CAA8(255, &qword_1ED3B0CF0, MEMORY[0x1E0DEA968], (uint64_t)&protocol witness table for String, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FormatSelectorValueSelector);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelectorValueSelector<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B0CE8);
  }
  return result;
}

unint64_t sub_1BA83F060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3AFC20;
  if (!qword_1ED3AFC20)
  {
    sub_1BA50CAA8(255, &qword_1ED3B0CF0, MEMORY[0x1E0DEA968], (uint64_t)&protocol witness table for String, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FormatSelectorValueSelector);
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelectorValueSelector<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3AFC20);
  }
  return result;
}

unint64_t sub_1BA83F0C8()
{
  unint64_t result;

  result = qword_1ED39F0C8;
  if (!qword_1ED39F0C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAnimationNodeAnimation, &type metadata for FormatAnimationNodeAnimation);
    atomic_store(result, (unint64_t *)&qword_1ED39F0C8);
  }
  return result;
}

uint64_t type metadata accessor for FormatPictureInPictureModel()
{
  uint64_t result;

  result = qword_1ED3D4B60;
  if (!qword_1ED3D4B60)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BA83F148()
{
  unint64_t result;

  result = qword_1ED3B0C50;
  if (!qword_1ED3B0C50)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeFormat.Token, &type metadata for FormatTextNodeFormat.Token);
    atomic_store(result, (unint64_t *)&qword_1ED3B0C50);
  }
  return result;
}

unint64_t sub_1BA83F18C()
{
  unint64_t result;

  result = qword_1ED39A788;
  if (!qword_1ED39A788)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextNodeFormat.Token, &type metadata for FormatTextNodeFormat.Token);
    atomic_store(result, (unint64_t *)&qword_1ED39A788);
  }
  return result;
}

unint64_t sub_1BA83F1D8()
{
  unint64_t result;

  result = qword_1ED3C4D80;
  if (!qword_1ED3C4D80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B42F8, &_s10CodingKeysON_199);
    atomic_store(result, (unint64_t *)&qword_1ED3C4D80);
  }
  return result;
}

unint64_t sub_1BA83F21C()
{
  unint64_t result;

  result = qword_1ED3C4D78;
  if (!qword_1ED3C4D78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4320, &_s10CodingKeysON_199);
    atomic_store(result, (unint64_t *)&qword_1ED3C4D78);
  }
  return result;
}

unint64_t sub_1BA83F268()
{
  unint64_t result;

  result = qword_1ED3C4D68;
  if (!qword_1ED3C4D68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B4388, &_s10CodingKeysON_198);
    atomic_store(result, (unint64_t *)&qword_1ED3C4D68);
  }
  return result;
}

unint64_t sub_1BA83F2AC()
{
  unint64_t result;

  result = qword_1ED3C4D60;
  if (!qword_1ED3C4D60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B43B0, &_s10CodingKeysON_198);
    atomic_store(result, (unint64_t *)&qword_1ED3C4D60);
  }
  return result;
}

unint64_t sub_1BA83F2F8()
{
  unint64_t result;

  result = qword_1ED3A41F8;
  if (!qword_1ED3A41F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7548, &_s10CodingKeysON_160);
    atomic_store(result, (unint64_t *)&qword_1ED3A41F8);
  }
  return result;
}

unint64_t sub_1BA83F33C()
{
  unint64_t result;

  result = qword_1ED3A41F0;
  if (!qword_1ED3A41F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8B7570, &_s10CodingKeysON_160);
    atomic_store(result, (unint64_t *)&qword_1ED3A41F0);
  }
  return result;
}

uint64_t sub_1BA83F380()
{
  return sub_1BA4A2870(&qword_1ED3B0BC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D535B0], MEMORY[0x1E0D535A0]);
}

uint64_t sub_1BA83F39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BAF99EB4();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAF99F08();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3D00C8 = result;
  return result;
}

uint64_t sub_1BA83F44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4AD288(0, &qword_1ED3C49D8, (uint64_t)&type metadata for FollowingCommandContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA840C58(0, qword_1ED3C4910, (uint64_t)&type metadata for FollowingCommandContext, (uint64_t)&type metadata for FollowingCommandState, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB6DD8]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4C50 = result;
  return result;
}

uint64_t static Commands.Following.follow.getter()
{
  return sub_1BA499934(&qword_1ED3BA900);
}

uint64_t static Commands.Following.notification.getter()
{
  return sub_1BA499934(&qword_1ED3BA8F8);
}

uint64_t sub_1BA83F568(uint64_t a1)
{
  return sub_1BA4BD878(a1, 0xD000000000000024, 0x80000001BB99C2A0, &qword_1ED3C4080);
}

uint64_t sub_1BA83F58C(uint64_t a1)
{
  return sub_1BA4BD878(a1, 0xD00000000000001FLL, 0x80000001BB99C2D0, &qword_1ED3C20D0);
}

uint64_t sub_1BA83F5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0A80, (uint64_t (*)(uint64_t))sub_1BA78682C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA840DAC();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3B0AF0 = result;
  return result;
}

uint64_t static Commands.Blocking.blockComplete.getter()
{
  return sub_1BA499934(&qword_1ED3BA8E0);
}

uint64_t static Commands.Articles.readStory.getter()
{
  return sub_1BA499934(&qword_1ED3BC258);
}

uint64_t static Commands.Articles.reportConcernComplete.getter()
{
  return sub_1BA499934(&qword_1ED3C4070);
}

uint64_t static Commands.Articles.removeReportedConcern.getter()
{
  return sub_1BA499934(&qword_1ED3BA8D8);
}

uint64_t static Commands.Articles.removeFromHistory.getter()
{
  return sub_1BA499934(&qword_1ED3BC228);
}

uint64_t static Commands.Articles.reportConcern.getter()
{
  return sub_1BA499934(&qword_1ED3BB548);
}

uint64_t static Commands.Articles.feedReadStory.getter()
{
  return sub_1BA499934(&qword_1ED3A4170);
}

uint64_t static Commands.Sharing.share.getter()
{
  return sub_1BA499934(&qword_1ED3BC200);
}

uint64_t sub_1BA83F754(uint64_t a1)
{
  return sub_1BA4C3D9C(a1, 0xD000000000000032, 0x80000001BB988710, &qword_1ED3C20C8);
}

uint64_t static Commands.Puzzles.setPuzzleStreakEligible.getter()
{
  return sub_1BA499934(&qword_1ED3C4060);
}

uint64_t sub_1BA83F794(uint64_t a1)
{
  return sub_1BA4C3D9C(a1, 0xD000000000000026, 0x80000001BB988750, &qword_1ED3C4C40);
}

uint64_t static Commands.Puzzles.resetPuzzleProgress.getter()
{
  return sub_1BA499934(&qword_1ED3C4C48);
}

uint64_t static Commands.Puzzles.openPuzzleTypeFeed.getter()
{
  return sub_1BA499934(&qword_1ED3A4160);
}

uint64_t static Commands.Sports.Event.open.getter()
{
  return sub_1BA499934(&qword_1ED3A4150);
}

uint64_t sub_1BA83F80C(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD000000000000026, 0x80000001BB984D70, &qword_1ED3C4BF0);
}

uint64_t sub_1BA83F830(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD000000000000026, 0x80000001BB984D40, &qword_1ED3C4BD8);
}

uint64_t sub_1BA83F854(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD000000000000024, 0x80000001BB984DA0, &qword_1ED3C4BB8);
}

uint64_t sub_1BA83F87C(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD00000000000002FLL, 0x80000001BB984D10, &qword_1ED3C4BA0);
}

uint64_t sub_1BA83F8A0(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD00000000000002BLL, 0x80000001BB984CE0, &qword_1ED3C4B88);
}

uint64_t sub_1BA83F8C4(uint64_t a1)
{
  return sub_1BA65FAC8(a1, 0xD000000000000027, 0x80000001BB984DD0, &qword_1ED3C4B70);
}

uint64_t sub_1BA83F8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4B07F0(0, &qword_1ED3BBF90, (uint64_t (*)(uint64_t))sub_1BA82F318, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA840F40();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3BC1D0 = result;
  return result;
}

uint64_t static Commands.Reload.article.getter()
{
  if (qword_1ED3C4B68 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1BA83F9EC(uint64_t a1)
{
  return sub_1BA4C9014(a1, 0xD000000000000017, 0x80000001BB96AE70, (uint64_t *)&unk_1ED39F0A8);
}

uint64_t static Commands.Manage.presentManagedBlocked.getter()
{
  return sub_1BA499934(&qword_1ED39F0B8);
}

uint64_t sub_1BA83FA2C(uint64_t a1)
{
  return sub_1BA4C9014(a1, 0xD000000000000018, 0x80000001BB96AE90, &qword_1ED3A4120);
}

uint64_t static Commands.Manage.presentManageMySports.getter()
{
  return sub_1BA499934(&qword_1ED3A4130);
}

uint64_t sub_1BA83FA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840AB4();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA840E14();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A4110 = result;
  return result;
}

uint64_t static Commands.Manage.presentManageChannelNotifications.getter()
{
  return sub_1BA499934(&qword_1ED39F0A0);
}

uint64_t sub_1BA83FB38(uint64_t a1)
{
  return sub_1BA4C9014(a1, 0xD00000000000001DLL, 0x80000001BB96AE50, (uint64_t *)&unk_1ED39F080);
}

uint64_t static Commands.Manage.presentManageSubscriptions.getter()
{
  return sub_1BA499934(qword_1ED39F090);
}

uint64_t sub_1BA83FB78(uint64_t a1)
{
  return sub_1BA4C9014(a1, 0xD00000000000001DLL, 0x80000001BB96AEB0, &qword_1ED39F068);
}

uint64_t static Commands.Manage.presentManageNotifications.getter()
{
  return sub_1BA499934(&qword_1ED39F078);
}

uint64_t sub_1BA83FBB8(uint64_t a1)
{
  return sub_1BA4ADE78(a1, 0xD000000000000017, 0x80000001BB993F70, &qword_1ED3C4B58);
}

uint64_t static Commands.Liking.dislike.getter()
{
  return sub_1BA499934(&qword_1ED3BA8C0);
}

uint64_t sub_1BA83FBF8(uint64_t a1)
{
  return sub_1BA4ADE78(a1, 0xD000000000000014, 0x80000001BB993F90, &qword_1ED3C4B50);
}

uint64_t static Commands.Liking.like.getter()
{
  return sub_1BA499934(&qword_1ED3BA858);
}

uint64_t sub_1BA83FC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4ADF50();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA840EE0();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4B40 = result;
  return result;
}

uint64_t static Commands.Audio.nextTrack.getter()
{
  return sub_1BA499934(qword_1ED3BC1C0);
}

uint64_t sub_1BA83FD04(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000018, 0x80000001BB97B6C0, &qword_1ED39F050);
}

uint64_t static Commands.Audio.playNext.getter()
{
  return sub_1BA499934(&qword_1ED39F060);
}

uint64_t sub_1BA83FD44(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000018, 0x80000001BB97B670, &qword_1ED39F030);
}

uint64_t static Commands.Audio.playLast.getter()
{
  return sub_1BA499934(&qword_1ED39F040);
}

uint64_t sub_1BA83FD84(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000017, 0x80000001BB97B710, &qword_1ED3BC190);
}

uint64_t static Commands.Audio.playNow.getter()
{
  return sub_1BA499934(&qword_1ED3BC1A0);
}

uint64_t static Commands.Audio.rewind.getter()
{
  return sub_1BA499934(&qword_1ED3BC188);
}

uint64_t static Commands.Audio.resume.getter()
{
  return sub_1BA499934(&qword_1ED3BC170);
}

uint64_t sub_1BA83FDFC(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000015, 0x80000001BB97B420, &qword_1ED39F010);
}

uint64_t static Commands.Audio.remove.getter()
{
  return sub_1BA499934(&qword_1ED39F020);
}

uint64_t static Commands.Audio.pause.getter()
{
  return sub_1BA499934(qword_1ED3BC150);
}

uint64_t static Commands.Audio.stop.getter()
{
  return sub_1BA499934(qword_1ED3BC130);
}

uint64_t static Commands.Audio.seek.getter()
{
  return sub_1BA499934(&qword_1ED3BC118);
}

uint64_t sub_1BA83FE90(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD00000000000002ELL, 0x80000001BB97B590, (uint64_t *)&unk_1ED3A40F8);
}

uint64_t static Commands.Audio.playIgnoringPlaylistOrPause.getter()
{
  return sub_1BA499934(&qword_1ED3A4108);
}

uint64_t sub_1BA83FED0(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000029, 0x80000001BB97B5E0, &qword_1ED3BC0E8);
}

uint64_t static Commands.Audio.playNowIgnoringPlaylist.getter()
{
  return sub_1BA499934(&qword_1ED3BC0F8);
}

uint64_t sub_1BA83FF10(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000028, 0x80000001BB97B690, (uint64_t *)&unk_1ED39EFF8);
}

uint64_t static Commands.Audio.insertAtTopOfPlaylist.getter()
{
  return sub_1BA499934(&qword_1ED39F008);
}

uint64_t static Commands.Audio.incrementPlaybackRate.getter()
{
  return sub_1BA499934(qword_1ED3BC0D8);
}

uint64_t sub_1BA83FF6C(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000021, 0x80000001BB97B3A0, &qword_1ED3A40D8);
}

uint64_t static Commands.Audio.removeFromPlaylist.getter()
{
  return sub_1BA499934(&qword_1ED3A40E8);
}

uint64_t sub_1BA83FFAC(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000020, 0x80000001BB97B3D0, &qword_1ED3A40C0);
}

uint64_t static Commands.Audio.removeFromHistory.getter()
{
  return sub_1BA499934(&qword_1ED3A40D0);
}

uint64_t static Commands.Audio.setPlaybackRate.getter()
{
  return sub_1BA499934(&qword_1ED3BC0C0);
}

uint64_t sub_1BA840008(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000021, 0x80000001BB97B6E0, (uint64_t *)&unk_1ED3A40A8);
}

uint64_t static Commands.Audio.playNowAsPaused.getter()
{
  return sub_1BA499934(&qword_1ED3A40B8);
}

uint64_t sub_1BA840048(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD00000000000001DLL, 0x80000001BB97B5C0, (uint64_t *)&unk_1ED39EFE0);
}

uint64_t static Commands.Audio.playOrExpand.getter()
{
  return sub_1BA499934(&qword_1ED39EFF0);
}

uint64_t static Commands.Audio.mastheadPlay.getter()
{
  return sub_1BA499934(&qword_1ED39EFD8);
}

uint64_t static Commands.Audio.skipForward.getter()
{
  return sub_1BA499934(&qword_1ED3CFF50);
}

uint64_t static Commands.Audio.closePlayer.getter()
{
  return sub_1BA499934(&qword_1ED3BC0A8);
}

uint64_t sub_1BA8400DC(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000026, 0x80000001BB97B640, &qword_1ED3A1848);
}

uint64_t static Commands.Audio.playLaterInNewsNext.getter()
{
  return sub_1BA499934(qword_1ED3A1858);
}

uint64_t sub_1BA84011C(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD000000000000026, 0x80000001BB97B610, &qword_1ED3ABA70);
}

uint64_t static Commands.Audio.playLaterInNewsLast.getter()
{
  return sub_1BA499934(&qword_1ED3ABA80);
}

uint64_t sub_1BA84015C(uint64_t a1)
{
  return sub_1BA502B0C(a1, 0xD00000000000001FLL, 0x80000001BB97B400, (uint64_t *)&unk_1ED3A4088);
}

uint64_t static Commands.Audio.removeFromAudioFeed.getter()
{
  return sub_1BA499934(qword_1ED3A4098);
}

uint64_t static Commands.downloadIssues.getter()
{
  if (qword_1ED39EFB8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static Commands.openInSafari.getter()
{
  if (qword_1ED3BC090 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static Commands.RemoveIssues.prompt.getter()
{
  return sub_1BA499934(&qword_1ED39EFA0);
}

uint64_t sub_1BA840238(uint64_t a1)
{
  return sub_1BA4B0704(a1, 0xD00000000000002FLL, 0x80000001BB98CDF0, (uint64_t *)&unk_1ED39EEC8);
}

uint64_t static Commands.RemoveIssues.removeFromMyMagazines.getter()
{
  return sub_1BA499934(&qword_1ED39EED8);
}

uint64_t sub_1BA840278(uint64_t a1)
{
  return sub_1BA4B0704(a1, 0xD000000000000027, 0x80000001BB98CDC0, (uint64_t *)&unk_1ED39EEB0);
}

uint64_t static Commands.RemoveIssues.removeDownloads.getter()
{
  return sub_1BA499934(&qword_1ED39EEC0);
}

uint64_t sub_1BA8402B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B5C();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA840FA8();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4B10 = result;
  return result;
}

uint64_t static Commands.openChannel.getter()
{
  if (qword_1ED3BC080 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1BA8403A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840AB4();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA840D44();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A4060 = result;
  return result;
}

uint64_t sub_1BA840458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B08();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4AA14C(0, (unint64_t *)&unk_1ED3A25F0, (void (*)(void))sub_1BA83A290);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A2648 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRankProgress.getter()
{
  return sub_1BA499934(qword_1ED3A2650);
}

uint64_t sub_1BA84053C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B08();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA840E7C();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A2630 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRevealState.getter()
{
  return sub_1BA499934(&qword_1ED3A2638);
}

uint64_t sub_1BA840608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B08();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4AA14C(0, &qword_1ED3A2600, (void (*)(void))sub_1BA83ADF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A2620 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleRankState.getter()
{
  return sub_1BA499934(&qword_1ED3A2628);
}

uint64_t sub_1BA8406EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B08();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4AA14C(0, &qword_1ED3A3D28, (void (*)(void))sub_1BA83C6D8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A4050 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleProgress.getter()
{
  return sub_1BA499934(&qword_1ED3A4058);
}

uint64_t sub_1BA8407D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA840B08();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4AA14C(0, (unint64_t *)&unk_1ED3A3D30, (void (*)(void))sub_1BA839E24);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3A4048 = result;
  return result;
}

uint64_t static Commands.FeedPuzzles.puzzleState.getter()
{
  return sub_1BA499934(&qword_1ED3A10F0);
}

uint64_t sub_1BA8408B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4B07F0(0, &qword_1ED3C49E0, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BB14F068(0, (unint64_t *)&unk_1ED3C4928, (void (*)(uint64_t))type metadata accessor for FeedHeadline, (void (*)(void))sub_1BA83AA2C);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4AF8 = result;
  return result;
}

uint64_t static Commands.FeedAudio.trackProgress.getter()
{
  return sub_1BA499934(&qword_1ED3C4B08);
}

uint64_t sub_1BA8409B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4B07F0(0, &qword_1ED3C49F0, (uint64_t (*)(uint64_t))type metadata accessor for FeedHeadlineAudioCommandContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BB14F068(0, &qword_1ED3C4938, (void (*)(uint64_t))type metadata accessor for FeedHeadlineAudioCommandContext, (void (*)(void))sub_1BA83A980);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3C4AE0 = result;
  return result;
}

uint64_t static Commands.FeedAudio.trackPlayback.getter()
{
  return sub_1BA499934(&qword_1ED3C4AF0);
}

void sub_1BA840AB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B0A80)
  {
    sub_1BA78682C();
    v0 = sub_1BB871434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B0A80);
  }
}

void sub_1BA840B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3FD0)
  {
    v0 = sub_1BB871434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3FD0);
  }
}

void sub_1BA840B5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C49C8)
  {
    type metadata accessor for LiveActivityCommandContext();
    v0 = sub_1BB871434();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C49C8);
  }
}

void sub_1BA840BB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3D4B58)
  {
    type metadata accessor for FormatLayoutSectionDescriptor(255);
    sub_1BA82284C();
    sub_1BA83171C();
    v0 = sub_1BB870768();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3D4B58);
  }
}

void sub_1BA840C34(uint64_t a1)
{
  sub_1BB8150D4(a1, &qword_1ED3B09E0, (uint64_t (*)(uint64_t))type metadata accessor for InternalErrorView, &qword_1ED3B5170, (uint64_t)&protocol conformance descriptor for InternalErrorView);
}

void sub_1BA840C58(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v10 = sub_1BA82BE0C();
    v11 = a5(a1, a3, a4, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_1BA840CC4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB7B80]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA840CF0()
{
  unint64_t result;

  result = qword_1ED3B0960[0];
  if (!qword_1ED3B0960[0])
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, qword_1ED3B0960);
  }
  return result;
}

void sub_1BA840D44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3D58)
  {
    sub_1BA78682C();
    sub_1BA82C0F4();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3D58);
  }
}

void sub_1BA840DAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B0948)
  {
    sub_1BA78682C();
    sub_1BA82DAD0();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B0948);
  }
}

void sub_1BA840E14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3D40[0])
  {
    sub_1BA78682C();
    sub_1BA81FF50();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, qword_1ED3A3D40);
  }
}

void sub_1BA840E7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A2608)
  {
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A2608);
  }
}

void sub_1BA840EE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C48F8)
  {
    sub_1BA82499C();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C48F8);
  }
}

void sub_1BA840F40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBF48)
  {
    sub_1BA82F318(255);
    sub_1BA67B824();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBF48);
  }
}

void sub_1BA840FA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C48E8)
  {
    type metadata accessor for LiveActivityCommandContext();
    sub_1BA820008();
    v0 = sub_1BB86F6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C48E8);
  }
}

void sub_1BA841010()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBF20)
  {
    sub_1BA49A224(255, (unint64_t *)&qword_1ED3C0420);
    v0 = sub_1BB86F3DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBF20);
  }
}

void sub_1BA841074()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED39A6B8)
  {
    v0 = MEMORY[0x1E0DEA968];
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BA81D6A0((unint64_t *)&qword_1ED39BDA8, (unint64_t *)&qword_1ED3B9200, v0, MEMORY[0x1E0DB2EC0]);
    v1 = sub_1BB86F220();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED39A6B8);
  }
}

void sub_1BA841114()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3C48)
  {
    sub_1BA50CB54(255, &qword_1ED3A3C40, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DB2C88]);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3C48);
  }
}

void sub_1BA841178(uint64_t a1)
{
  sub_1BA50CC40(a1, &qword_1ED39A6A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2C88]);
}

void sub_1BA84118C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED39A678)
  {
    v0 = MEMORY[0x1E0DEA968];
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BA81D6A0((unint64_t *)&qword_1ED39BDA8, (unint64_t *)&qword_1ED3B9200, v0, MEMORY[0x1E0DB2EC0]);
    v1 = sub_1BB86F07C();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED39A678);
  }
}

void sub_1BA84122C(uint64_t a1)
{
  sub_1BA50CC40(a1, &qword_1ED39A668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB2980]);
}

uint64_t sub_1BA841240(uint64_t a1)
{
  return sub_1BA4D9414(a1, qword_1ED476918);
}

void sub_1BA84125C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B0900)
  {
    v0 = sub_1BB86EAAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B0900);
  }
}

void sub_1BA8412B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AFBF8)
  {
    sub_1BA49A224(255, (unint64_t *)&qword_1ED3B0420);
    v0 = sub_1BB86EAAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AFBF8);
  }
}

void sub_1BA841318()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBEE8)
  {
    v0 = sub_1BB86E890();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBEE8);
  }
}

void sub_1BA84136C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3D2E90)
  {
    sub_1BA4AD288(255, &qword_1ED3D4438, (uint64_t)&type metadata for LayeredMediaLayer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3D2E90);
  }
}

void sub_1BA8413E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4838)
  {
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4838);
  }
}

void sub_1BA84144C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4830)
  {
    sub_1BA821FA4();
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4830);
  }
}

void sub_1BA8414AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBEE0)
  {
    type metadata accessor for FeedLayoutCacheKey();
    sub_1BA4A2870(&qword_1ED3BC380, (uint64_t (*)(uint64_t))type metadata accessor for FeedLayoutCacheKey, (uint64_t)&protocol conformance descriptor for FeedLayoutCacheKey);
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBEE0);
  }
}

void sub_1BA84152C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4820)
  {
    type metadata accessor for FormatPackageInventory();
    sub_1BA8220C4();
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4820);
  }
}

void sub_1BA841594()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4818)
  {
    type metadata accessor for WebEmbedDatastoreCacheKey();
    type metadata accessor for WebEmbedDatastoreUpdate();
    sub_1BA4A2870(&qword_1ED3CB660, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCacheKey, (uint64_t)&unk_1BB915F8C);
    v0 = sub_1BB86E7B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4818);
  }
}

void sub_1BA841628()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C0B48)
  {
    sub_1BA49A224(255, (unint64_t *)&unk_1ED3CF920);
    v0 = sub_1BB86E74C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C0B48);
  }
}

void sub_1BA84168C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39C328)
  {
    sub_1BA83D290();
    sub_1BA83D2D8();
    v0 = sub_1BB86E644();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39C328);
  }
}

void sub_1BA841704()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B07F8)
  {
    type metadata accessor for WebEmbedViewController(255);
    sub_1BA842538();
    v0 = sub_1BB86E578();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B07F8);
  }
}

void sub_1BA841768(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3C20B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3DE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BA841784()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C47B0)
  {
    type metadata accessor for LazyAuthTokenStore();
    sub_1BA4A2870(qword_1ED3C8008, (uint64_t (*)(uint64_t))type metadata accessor for LazyAuthTokenStore, (uint64_t)&unk_1BB8F91F4);
    v0 = sub_1BB86E26C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C47B0);
  }
}

void sub_1BA8417FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C0B40)
  {
    sub_1BA81DB7C(255);
    v0 = sub_1BB86E0F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C0B40);
  }
}

void sub_1BA841860()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3920)
  {
    v0 = sub_1BB86E0F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3920);
  }
}

void sub_1BA8418C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4788)
  {
    type metadata accessor for SportsDataConfiguration();
    v0 = sub_1BB86E0F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4788);
  }
}

void sub_1BA841928()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3918)
  {
    type metadata accessor for SportsTaxonomyGraph();
    v0 = sub_1BB86E0F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3918);
  }
}

uint64_t PromiseDeduper<>.promise(createBlock:)()
{
  return sub_1BB86E0EC();
}

void sub_1BA8419D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C4778)
  {
    v0 = sub_1BB86E08C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C4778);
  }
}

uint64_t sub_1BA841A34(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED3A38F0);
}

uint64_t sub_1BA841A54(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A530);
}

uint64_t sub_1BA841A74(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A518);
}

uint64_t sub_1BA841A94(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED3A38C0);
}

uint64_t sub_1BA841AB0(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39E328);
}

uint64_t sub_1BA841ACC(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A4F8);
}

uint64_t sub_1BA841AE8(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A4E0);
}

uint64_t sub_1BA841B00(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED3A0D50);
}

uint64_t sub_1BA841B24(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A4C8);
}

uint64_t sub_1BA841B4C(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED39A4B0);
}

uint64_t sub_1BA841B74(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED3A3890);
}

uint64_t sub_1BA841B9C(uint64_t a1)
{
  return sub_1BA50400C(a1, qword_1ED3A3838);
}

void sub_1BA841BC0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_1BB86DFB4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1BA841C20()
{
  unint64_t result;

  result = qword_1ED3D5178;
  if (!qword_1ED3D5178)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED3D5178);
  }
  return result;
}

void sub_1BA841C74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3C45F8)
  {
    sub_1BA82E9F8();
    sub_1BA82EAC4();
    sub_1BA82EA80();
    v0 = sub_1BB86DD14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3C45F8);
  }
}

unint64_t sub_1BA841CF4()
{
  unint64_t result;

  result = qword_1ED3C45C0;
  if (!qword_1ED3C45C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CGFloat, MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1ED3C45C0);
  }
  return result;
}

unint64_t sub_1BA841D38()
{
  unint64_t result;

  result = qword_1ED3B0758;
  if (!qword_1ED3B0758)
  {
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB64B0], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1ED3B0758);
  }
  return result;
}

unint64_t sub_1BA841D7C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA689CD8();
  a1[2] = sub_1BA5ED248();
  result = sub_1BAC888BC();
  a1[3] = result;
  return result;
}

uint64_t sub_1BA841DB0(uint64_t a1)
{
  uint64_t v1;
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  v1 = qword_1ED39C310;
  if (!qword_1ED39C310)
  {
    MEMORY[0x1E0C80A78](a1);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v1 = TupleTypeMetadata;
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED39C310);
  }
  return v1;
}

uint64_t sub_1BA841E94()
{
  return sub_1BA4B8748(&qword_1ED3C0B38, MEMORY[0x1E0DB60B8]);
}

uint64_t sub_1BA841EB8()
{
  sub_1BA4B8748((unint64_t *)&unk_1ED3C45A0, MEMORY[0x1E0DB60C0]);
  return sub_1BB872CC4();
}

void sub_1BA841F08(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1BA4AD288(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    a5();
    v7 = sub_1BB86D444();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BA841F80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBDD8)
  {
    sub_1BA7BE1A4();
    sub_1BA8296B0();
    v0 = sub_1BB86D444();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBDD8);
  }
}

void sub_1BA841FE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3D2E80)
  {
    sub_1BA83E248();
    v0 = sub_1BB86D3CC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3D2E80);
  }
}

void sub_1BA842038(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BB86D390();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1BA84207C(uint64_t a1)
{
  return sub_1BA4AC3A0(a1, 0xD00000000000002BLL, 0x80000001BB994110, &qword_1ED3A0D20);
}

uint64_t sub_1BA8420A0(uint64_t a1)
{
  return sub_1BA4C5910(a1, 0xD00000000000002ALL, 0x80000001BB994180, &qword_1ED3A3758);
}

uint64_t static Settings.Puzzles.prewarmTimeInterval.getter()
{
  return sub_1BA499934(&qword_1ED3A10C8);
}

uint64_t sub_1BA8420E0(uint64_t a1)
{
  return sub_1BA4C5308(a1, (void (*)(_QWORD))type metadata accessor for Settings.Puzzles.BadgeCountOverride, 0xD000000000000029, 0x80000001BB994230, (uint64_t *)&unk_1ED3A3740);
}

uint64_t static Settings.Puzzles.badgeCountOverrides.getter()
{
  return sub_1BA499934(&qword_1ED3A3750);
}

uint64_t sub_1BA842128()
{
  return sub_1BA49A3D4();
}

uint64_t type metadata accessor for Settings.Puzzles.BadgeCountOverride(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3A3708);
}

uint64_t static Settings.Puzzles.puzzlesBadgeCount.getter()
{
  return sub_1BA499934(&qword_1ED3A3700);
}

uint64_t sub_1BA842168()
{
  return sub_1BA49A3D4();
}

uint64_t type metadata accessor for Settings.Puzzles.ConfigOverrides(uint64_t a1)
{
  return sub_1BA4B8364(a1, (uint64_t *)&unk_1ED3A36C0);
}

uint64_t sub_1BA84218C(uint64_t a1)
{
  return sub_1BA4C5308(a1, (void (*)(_QWORD))type metadata accessor for Settings.Puzzles.ConfigOverrides, 0xD00000000000002CLL, 0x80000001BB9944B0, &qword_1ED3A36A8);
}

uint64_t static Settings.NewsFeedModule.Features.enableAIAttribution.getter()
{
  return sub_1BA499934(&qword_1ED3A33B0);
}

uint64_t sub_1BA8421D4(uint64_t a1)
{
  return sub_1BA4E6EC0(a1, 0xD000000000000020, 0x80000001BB96F930, &qword_1ED3A3390);
}

uint64_t static Settings.NewsFeedModule.Features.useSportsSyncingV2.getter()
{
  return sub_1BA499934(&qword_1ED3A3398);
}

uint64_t sub_1BA842214(uint64_t a1)
{
  return sub_1BA50EF94(a1, 0, 0xD000000000000025, 0x80000001BB96F9B0, &qword_1ED3C4528);
}

uint64_t sub_1BA84223C(uint64_t a1)
{
  return sub_1BA4E6EC0(a1, 0xD00000000000001FLL, 0x80000001BB96F960, (uint64_t *)&unk_1ED3A3370);
}

uint64_t static Settings.NewsFeedModule.Features.useLiveActivities.getter()
{
  return sub_1BA499934(&qword_1ED3A3380);
}

uint64_t sub_1BA84227C(uint64_t a1)
{
  return sub_1BA4E7064(a1, MEMORY[0x1E0DB54D8], 0xD00000000000001CLL, 0x80000001BB96F910, (uint64_t *)&unk_1ED3A0CF8);
}

uint64_t static Settings.NewsFeedModule.Features.useOfflineMode.getter()
{
  return sub_1BA499934(&qword_1ED3A0D08);
}

uint64_t sub_1BA8422C4(uint64_t a1)
{
  return sub_1BA4E7064(a1, MEMORY[0x1E0DB54D8], 0xD000000000000018, 0x80000001BB96FA70, &qword_1ED3A3368);
}

uint64_t static Settings.NewsFeedModule.Features.usePuzzles.getter()
{
  return sub_1BA499934(&qword_1ED3A10A0);
}

uint64_t sub_1BA84230C(uint64_t a1)
{
  return sub_1BA4E7064(a1, MEMORY[0x1E0DB54D8], 0xD00000000000002ALL, 0x80000001BB96F7D0, &qword_1ED3C3FE0);
}

uint64_t static Settings.NewsFeedModule.Features.enableInFeedDebugging.getter()
{
  return sub_1BA499934(&qword_1ED3C3FE8);
}

uint64_t sub_1BA842354(uint64_t a1)
{
  return sub_1BA4E7064(a1, MEMORY[0x1E0DB54E0], 0xD00000000000001FLL, 0x80000001BB96FB60, &qword_1ED39ED58);
}

uint64_t static Settings.NewsFeedModule.Features.featureVideoInFeed.getter()
{
  return sub_1BA499934(&qword_1ED39ED60);
}

uint64_t sub_1BA84239C(uint64_t a1)
{
  return sub_1BA50EF94(a1, 1, 0xD000000000000019, 0x80000001BB96F4B0, &qword_1ED39A488);
}

uint64_t sub_1BA8423C4(uint64_t a1)
{
  return sub_1BA50EF94(a1, 0, 0xD000000000000026, 0x80000001BB96F500, &qword_1ED39A480);
}

uint64_t sub_1BA8423EC(uint64_t a1)
{
  return sub_1BA50EF94(a1, 0, 0xD000000000000021, 0x80000001BB96F530, &qword_1ED39A478);
}

uint64_t sub_1BA842414(uint64_t a1)
{
  return sub_1BA4A4760(2.0, a1, 0xD000000000000020, 0x80000001BB96F560, &qword_1ED39C250);
}

uint64_t sub_1BA84243C(uint64_t a1)
{
  return sub_1BA50EF94(a1, 0, 0xD000000000000026, 0x80000001BB96F590, &qword_1ED3B0590);
}

uint64_t sub_1BA842464(uint64_t a1)
{
  return sub_1BA50EE54(a1, 0, 0xD000000000000027, 0x80000001BB96F6D0, &qword_1ED3B0588);
}

uint64_t sub_1BA84248C(uint64_t a1)
{
  return sub_1BA50EE54(a1, 0, 0xD000000000000024, 0x80000001BB96F660, &qword_1ED3B0580);
}

uint64_t static Settings.NewsFeedModule.Layout.enableLogDebugging.getter()
{
  return sub_1BA499934(qword_1ED3BA630);
}

uint64_t sub_1BA8424D0(uint64_t a1)
{
  return sub_1BA50EF94(a1, 0, 0xD000000000000028, 0x80000001BB96EBB0, &qword_1ED3C0948);
}

uint64_t sub_1BA8424F8(uint64_t a1)
{
  return sub_1BA4BB738(a1, 0xD000000000000027, 0x80000001BB96EA00, &qword_1ED3D5FE8);
}

uint64_t static Settings.NewsFeedModule.Personalization.disableTabiArticleScoring.getter()
{
  return sub_1BA499934(&qword_1ED3D5FE0);
}

void sub_1BA842538()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3B04F0)
  {
    sub_1BA4B07F0(255, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3B04F0);
  }
}

void sub_1BA8425B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BBDC0)
  {
    sub_1BA49A224(255, (unint64_t *)&qword_1ED3C0430);
    v0 = sub_1BB86BD94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BBDC0);
  }
}

char *sub_1BA84510C(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  Class v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  double v35;
  id v36;
  id v37;
  id v38;
  id v39;
  objc_super v41;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  v7 = objc_allocWithZone(v6);
  v8 = v1;
  *(_QWORD *)&v2[v5] = objc_msgSend(v7, sel_init);
  v9 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  *(_QWORD *)&v8[v9] = objc_msgSend((id)objc_opt_self(), sel_buttonWithType_, 0);
  v10 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  *(_QWORD *)&v8[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  *(_QWORD *)&v8[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B98]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_editor] = a1;
  swift_retain();

  v41.receiver = v8;
  v41.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v41, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v13 = (void *)objc_opt_self();
  v14 = (char *)v12;
  v15 = objc_msgSend(v13, sel_tertiarySystemBackgroundColor);
  objc_msgSend(v14, sel_setBackgroundColor_, v15);

  objc_msgSend(v14, sel_setClipsToBounds_, 1);
  v16 = objc_msgSend(v14, sel_layer);
  objc_msgSend(v16, sel_setCornerRadius_, 4.0);

  v17 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  v18 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel];
  v19 = objc_msgSend(v13, sel_secondaryLabelColor);
  objc_msgSend(v18, sel_setTextColor_, v19);

  v20 = *(void **)&v14[v17];
  v21 = (void *)objc_opt_self();
  v22 = v20;
  v23 = objc_msgSend(v21, sel_systemFontOfSize_, 11.0);
  objc_msgSend(v22, sel_setFont_, v23);

  objc_msgSend(v14, sel_addSubview_, *(_QWORD *)&v14[v17]);
  v24 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  v25 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton];
  v26 = objc_msgSend(v13, sel_secondaryLabelColor);
  objc_msgSend(v25, sel_setTintColor_, v26);

  v27 = *(id *)&v14[v24];
  v28 = (void *)sub_1BB872970();
  v29 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v28);

  objc_msgSend(v27, sel_setImage_forState_, v29, 0);
  v30 = *(void **)&v14[v24];
  objc_msgSend(v30, sel_setPointerInteractionEnabled_, 1);
  objc_msgSend(v14, sel_addSubview_, v30);
  v31 = *(id *)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap];
  v32 = v30;
  sub_1BB871368();

  v33 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  v34 = *(void **)&v14[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView];
  LODWORD(v35) = 0;
  objc_msgSend(v34, sel_setProgress_, v35);
  v36 = v34;
  v37 = objc_msgSend(v13, sel_systemBlueColor);
  objc_msgSend(v36, sel_setProgressTintColor_, v37);

  v38 = *(id *)&v14[v33];
  v39 = objc_msgSend(v13, sel_clearColor);
  objc_msgSend(v38, sel_setTrackTintColor_, v39);

  objc_msgSend(v14, sel_addSubview_, *(_QWORD *)&v14[v33]);
  swift_retain();
  sub_1BB86E4AC();
  swift_release();
  sub_1BB86E470();
  swift_release();
  swift_retain();
  sub_1BB86D2D0();
  swift_release();
  sub_1BB86D2AC();
  swift_release();
  swift_retain();
  sub_1BB86D2D0();
  swift_release();
  sub_1BB86D2AC();
  swift_release();
  swift_retain();
  sub_1BB86E4AC();
  swift_release();
  sub_1BB86E470();
  swift_release();
  swift_retain();
  sub_1BB86E4AC();
  swift_release();
  sub_1BB86E470();
  swift_release();

  swift_release();
  return v14;
}

void sub_1BA845704()
{
  sub_1BA845724();
}

void sub_1BA845724()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char **__ptr32 *v3;
  uint64_t inited;
  void *v5;
  double v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char v43;

  v1 = sub_1BB86C304();
  MEMORY[0x1E0C80A78](v1);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED3B98E0);
  sub_1BB86C1F0();
  v2 = (void *)sub_1BB8734BC();
  v42 = v0;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v3 = &off_1BB87A000;
  if (v43)
  {
    v41 = v2;
    swift_retain();
    sub_1BB86D2B8();
    swift_release();
    sub_1BB872A24();
    swift_bridgeObjectRelease();
    sub_1BA847C08();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
    v5 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    v40 = (void *)objc_opt_self();
    v6 = *MEMORY[0x1E0DC1418];
    v39 = v5;
    v7 = objc_msgSend(v40, sel_systemFontOfSize_weight_, 11.0, v6);
    v38 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
    *(_QWORD *)(inited + 40) = v7;
    v8 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 64) = v38;
    *(_QWORD *)(inited + 72) = v8;
    v37 = (void *)objc_opt_self();
    v9 = v8;
    v10 = objc_msgSend(v37, sel_systemBlueColor);
    v11 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
    *(_QWORD *)(inited + 104) = v11;
    *(_QWORD *)(inited + 80) = v10;
    sub_1BA76E82C(inited);
    v12 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v13 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
    v14 = (void *)sub_1BB872760();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);

    v2 = v41;
    objc_msgSend(v41, sel_appendAttributedString_, v15);

    v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_1BB87A390;
    *(_QWORD *)(v16 + 32) = v39;
    v17 = v39;
    *(_QWORD *)(v16 + 40) = objc_msgSend(v40, sel_systemFontOfSize_, 11.0);
    *(_QWORD *)(v16 + 64) = v38;
    *(_QWORD *)(v16 + 72) = v9;
    v18 = v9;
    v19 = objc_msgSend(v37, sel_secondaryLabelColor);
    *(_QWORD *)(v16 + 104) = v11;
    *(_QWORD *)(v16 + 80) = v19;
    sub_1BA76E82C(v16);
    v20 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v21 = (void *)sub_1BB872970();
    v22 = (void *)sub_1BB872760();
    swift_bridgeObjectRelease();
    v23 = v20;
    v3 = &off_1BB87A000;
    v24 = objc_msgSend(v23, sel_initWithString_attributes_, v21, v22);

    objc_msgSend(v41, sel_appendAttributedString_, v24);
  }
  else
  {
    v17 = (id)*MEMORY[0x1E0DC1138];
    v18 = (id)*MEMORY[0x1E0DC1140];
  }
  swift_retain();
  sub_1BB86E494();
  swift_release();
  sub_1BA847C08();
  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = *((_OWORD *)v3 + 57);
  *(_QWORD *)(v25 + 32) = v17;
  v26 = (void *)objc_opt_self();
  v27 = v17;
  v28 = objc_msgSend(v26, sel_systemFontOfSize_, 11.0);
  v29 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  *(_QWORD *)(v25 + 40) = v28;
  *(_QWORD *)(v25 + 64) = v29;
  *(_QWORD *)(v25 + 72) = v18;
  v30 = (void *)objc_opt_self();
  v31 = v18;
  v32 = objc_msgSend(v30, sel_secondaryLabelColor);
  *(_QWORD *)(v25 + 104) = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
  *(_QWORD *)(v25 + 80) = v32;
  sub_1BA76E82C(v25);
  v33 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v34 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
  v35 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(v33, sel_initWithString_attributes_, v34, v35);

  objc_msgSend(v2, sel_appendAttributedString_, v36);
  objc_msgSend(*(id *)(v42 + OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel), sel_setAttributedText_, v2);

}

id sub_1BA845D8C(uint64_t a1, _DWORD *a2, double a3)
{
  LODWORD(a3) = *a2;
  return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView), sel_setProgress_animated_, 0, a3);
}

id sub_1BA845DD0()
{
  char *v0;
  void *v1;
  double Height;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  void *v13;
  CGFloat v14;
  objc_super v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v16.receiver = v0;
  v16.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton];
  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v17);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_, 8.0, 0.0, Height, CGRectGetHeight(v18));
  v3 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v0, sel_bounds);
  CGRectGetHeight(v19);
  sub_1BB8735B8();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  objc_msgSend(v0, sel_bounds);
  v12 = CGRectGetHeight(v20);
  objc_msgSend(v3, sel_setFrame_, UIEdgeInsetsInsetRect(v5, v7, v9, v11, 0.0, v12 + 8.0));
  v13 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView];
  objc_msgSend(v0, sel_bounds);
  v14 = CGRectGetHeight(v21) + -3.0;
  objc_msgSend(v0, sel_bounds);
  return objc_msgSend(v13, sel_setFrame_, 0.0, v14, CGRectGetWidth(v22), 3.0);
}

id _s8NewsFeed22WebEmbedViewControllerCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DebugFormatUploadDiffStatusView()
{
  return objc_opt_self();
}

void type metadata accessor for SWProcessTerminationRetryPolicy(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83B0, (uint64_t)&unk_1E7271968, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCOfflineReason(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83B8, (uint64_t)&unk_1E7271988, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCNetworkEventType(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83C0, (uint64_t)&unk_1E72719A8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for ActionAtItemEnd(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83C8, (uint64_t)&unk_1E72719C8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CALayerContentsGravity(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83D0, (uint64_t)&unk_1E72719E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for SVPlaybackKind(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83D8, (uint64_t)&unk_1E7271A10, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for AVLayerVideoGravity(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83E0, (uint64_t)&unk_1E7271A30, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA846174(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BA846194(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83E8, (uint64_t)&unk_1E7271AB0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCFetchOperationStatus(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83F0, (uint64_t)&unk_1E7271AE8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A83F8, (uint64_t)&unk_1E7271B08, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Options(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8400, (uint64_t)&unk_1E7271B30, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CAShapeLayerLineCap(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8408, (uint64_t)&unk_1E7271B58, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCArticleRole(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8410, (uint64_t)&unk_1E7271B80, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8418, (uint64_t)&unk_1E7271BA0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCTagFilterOptions(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8420, (uint64_t)&unk_1E7271BC0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCFeedFilterOptions(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8428, (uint64_t)&unk_1E7271BE8, MEMORY[0x1E0DEEC78]);
}

uint64_t getEnumTagSinglePayload for FormatGradientDirection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8430, (uint64_t)&unk_1E7271C68, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIAccessibilityContrast(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8438, (uint64_t)&unk_1E7271C98, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCSportsType(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1EF2A8440, (uint64_t)&unk_1E7271CB8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UILegibilityWeight(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8450, (uint64_t)&unk_1E7271CF8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCSportsLeagueType(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8458, (uint64_t)&unk_1E7271D18, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCFeedDescriptorConfiguration(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8460, (uint64_t)&unk_1E7271D38, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CAMediaTimingFillMode(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8468, (uint64_t)&unk_1E7271D58, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCFeedPersonalizationConfigurationSet(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8470, (uint64_t)&unk_1E7271D80, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCOperationPurpose(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8478, (uint64_t)&unk_1E7271DA0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8480, (uint64_t)&unk_1E7271DC8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for SystemDesign(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1EF2A8488, (uint64_t)&unk_1E7271DE8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8498, (uint64_t)&unk_1E7271E38, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A84A0, (uint64_t)&unk_1E7271E58, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3AC038, (uint64_t)&unk_1E7271E80, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1ED3A0930, (uint64_t)&unk_1E7271EA0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A84A8, (uint64_t)&unk_1E7271EC0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A84B0, (uint64_t)&unk_1E7271EE8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1EF2A84B8, (uint64_t)&unk_1E7271F08, MEMORY[0x1E0DEEC78]);
}

uint64_t getEnumTagSinglePayload for FormatPoint(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BA846504@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1BA846558(uint64_t a1, uint64_t a2)
{
  return sub_1BA8475CC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1BA846574()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BA8465B8()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BA8465E0()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

_QWORD *sub_1BA846620@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1BA84664C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

BOOL sub_1BA846670(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1BA846684()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1BA846698@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1BA8466AC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

uint64_t sub_1BA8466C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2 & *a1;
  result = sub_1BB8732AC();
  if ((result & 1) != 0)
    v6 = 0;
  else
    *v2 = v5 & ~v4;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = result & 1;
  return result;
}

uint64_t sub_1BA846720@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *v2 & *a1;
  *v2 |= *a1;
  result = sub_1BB8732AC();
  if ((result & 1) != 0)
    v6 = 0;
  else
    v6 = v4;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = result & 1;
  return result;
}

_QWORD *sub_1BA846770(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1BA846784(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1BA846798@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1BA8467AC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

uint64_t sub_1BA8467C0()
{
  return sub_1BB8732AC();
}

BOOL sub_1BA8467D0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1BA8467E4()
{
  return sub_1BB8732AC();
}

_QWORD *sub_1BA8467EC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_1BA846800@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1BA846814(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1BA846828@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL sub_1BA846838(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BA84684C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1BB872988();
  *a2 = 0;
  return result;
}

uint64_t sub_1BA8468C0(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1BB872994();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1BA84693C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BB8729A0();
  v2 = sub_1BB872970();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BA84697C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BB8729A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_QWORD *sub_1BA8469A4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BA8469B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1BA847BD0(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1BA8469EC()
{
  return sub_1BA4A2870(&qword_1EF2A84C8, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&unk_1BB87A91C);
}

uint64_t sub_1BA846A18()
{
  return sub_1BA4A2870(&qword_1EF2A84D0, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&unk_1BB87A8E8);
}

uint64_t sub_1BA846A44()
{
  return sub_1BA4A2870(&qword_1EF2A84D8, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&unk_1BB87A948);
}

uint64_t sub_1BA846A70()
{
  return sub_1BA4A2870(&qword_1EF2A84E0, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&unk_1BB87A984);
}

void sub_1BA846A9C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1BA846AA8()
{
  sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
  sub_1BA4A2870(&qword_1EF2A88F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87AB00);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846B2C()
{
  return sub_1BA4A2870(&qword_1EF2A84E8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87AAC4);
}

uint64_t sub_1BA846B58()
{
  return sub_1BA4A2870(&qword_1EF2A84F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87AA98);
}

uint64_t sub_1BA846B84()
{
  sub_1BA4A2870(&qword_1EF2A8AA0, (uint64_t (*)(uint64_t))type metadata accessor for CALayerCornerCurve, (uint64_t)&unk_1BB87C830);
  sub_1BA4A2870(&qword_1EF2A8AA8, (uint64_t (*)(uint64_t))type metadata accessor for CALayerCornerCurve, (uint64_t)&unk_1BB87C7D0);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846C08()
{
  sub_1BA4A2870(&qword_1EF2A88E0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BB87ACEC);
  sub_1BA4A2870((unint64_t *)&unk_1EF2A88E8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BB87AC8C);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846C8C()
{
  return sub_1BA4A2870(&qword_1EF2A84F8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BB87AC50);
}

uint64_t sub_1BA846CB8()
{
  return sub_1BA4A2870(&qword_1EF2A8500, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BB87AC24);
}

uint64_t sub_1BA846CE4()
{
  return sub_1BA4A2870(&qword_1EF2A8508, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BB87ACC0);
}

uint64_t sub_1BA846D10()
{
  sub_1BA4A2870(&qword_1EF2A88A0, (uint64_t (*)(uint64_t))type metadata accessor for FCOperationPurpose, (uint64_t)&unk_1BB87B2A0);
  sub_1BA4A2870(&qword_1EF2A88A8, (uint64_t (*)(uint64_t))type metadata accessor for FCOperationPurpose, (uint64_t)&unk_1BB87B240);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846D94()
{
  sub_1BA4A2870(&qword_1EF2A8AD0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1BB87C9A8);
  sub_1BA4A2870(&qword_1EF2A8AD8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1BB87C948);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846E18()
{
  sub_1BA4A2870(&qword_1EF2A88D0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1BB87AE70);
  sub_1BA4A2870(&qword_1EF2A88D8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1BB87AE18);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846E9C()
{
  return sub_1BA4A2870(&qword_1EF2A8510, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1BB87ADE0);
}

uint64_t sub_1BA846EC8()
{
  return sub_1BA4A2870(&qword_1EF2A8518, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1BB87ADB8);
}

uint64_t sub_1BA846EF4()
{
  return sub_1BA4A2870(&qword_1EF2A8520, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1BB87AE48);
}

uint64_t sub_1BA846F20()
{
  sub_1BA4A2870(&qword_1EF2A8A40, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1BB87C530);
  sub_1BA4A2870(&qword_1EF2A8A48, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1BB87C4D0);
  return sub_1BB873FCC();
}

uint64_t sub_1BA846FA4()
{
  sub_1BA4A2870(&qword_1EF2A8880, (uint64_t (*)(uint64_t))type metadata accessor for CAShapeLayerLineCap, (uint64_t)&unk_1BB87B6D0);
  sub_1BA4A2870(&qword_1EF2A8888, (uint64_t (*)(uint64_t))type metadata accessor for CAShapeLayerLineCap, (uint64_t)&unk_1BB87B670);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847028()
{
  sub_1BA4A2870((unint64_t *)&qword_1ED3C0460, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1BB87BDD4);
  sub_1BA4A2870(&qword_1EF2A88C8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1BB87AFC8);
  return sub_1BB873FCC();
}

uint64_t sub_1BA8470AC()
{
  sub_1BA4A2870(&qword_1EF2A88B0, (uint64_t (*)(uint64_t))type metadata accessor for SystemDesign, (uint64_t)&unk_1BB87B13C);
  sub_1BA4A2870((unint64_t *)&unk_1EF2A88B8, (uint64_t (*)(uint64_t))type metadata accessor for SystemDesign, (uint64_t)&unk_1BB87B0DC);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847130()
{
  sub_1BA4A2870(&qword_1EF2A8A70, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&unk_1BB87C16C);
  sub_1BA4A2870(&qword_1EF2A8A78, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&unk_1BB87C10C);
  return sub_1BB873FCC();
}

uint64_t sub_1BA8471B4()
{
  sub_1BA4A2870(&qword_1EF2A8A60, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1BB87C700);
  sub_1BA4A2870(&qword_1EF2A8A68, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1BB87C264);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847238()
{
  sub_1BA4A2870(&qword_1EF2A8870, (uint64_t (*)(uint64_t))type metadata accessor for AVLayerVideoGravity, (uint64_t)&unk_1BB87BB9C);
  sub_1BA4A2870(&qword_1EF2A8878, (uint64_t (*)(uint64_t))type metadata accessor for AVLayerVideoGravity, (uint64_t)&unk_1BB87BB44);
  return sub_1BB873FCC();
}

uint64_t sub_1BA8472BC()
{
  sub_1BA4A2870(&qword_1EF2A8860, (uint64_t (*)(uint64_t))type metadata accessor for CALayerContentsGravity, (uint64_t)&unk_1BB87BCEC);
  sub_1BA4A2870(&qword_1EF2A8868, (uint64_t (*)(uint64_t))type metadata accessor for CALayerContentsGravity, (uint64_t)&unk_1BB87BC8C);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847340()
{
  sub_1BA4A2870(&qword_1EF2A8890, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFillMode, (uint64_t)&unk_1BB87B404);
  sub_1BA4A2870(&qword_1EF2A8898, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFillMode, (uint64_t)&unk_1BB87B3A4);
  return sub_1BB873FCC();
}

uint64_t sub_1BA8473C4()
{
  sub_1BA4A2870(&qword_1EF2A8A30, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_1BB87C6C0);
  sub_1BA4A2870(&qword_1EF2A8A38, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_1BB87C620);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BB872970();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BA84748C()
{
  sub_1BA4A2870(&qword_1EF2A8A50, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BB87C3D8);
  sub_1BA4A2870(&qword_1EF2A8A58, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BB87C378);
  return sub_1BB873FCC();
}

uint64_t sub_1BA847510(uint64_t a1, uint64_t a2)
{
  return sub_1BA8475CC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1BA84751C()
{
  return sub_1BA4A2870(&qword_1EF2A8528, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1BB87AF8C);
}

uint64_t sub_1BA847548()
{
  return sub_1BA4A2870(&qword_1EF2A8530, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1BB87AF60);
}

uint64_t sub_1BA847574()
{
  return sub_1BA4A2870(&qword_1EF2A8538, (uint64_t (*)(uint64_t))type metadata accessor for SystemDesign, (uint64_t)&unk_1BB87B0A0);
}

uint64_t sub_1BA8475A0()
{
  return sub_1BA4A2870(&qword_1EF2A8540, (uint64_t (*)(uint64_t))type metadata accessor for SystemDesign, (uint64_t)&unk_1BB87B074);
}

uint64_t sub_1BA8475CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BB8729A0();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BA847608()
{
  sub_1BB8729A0();
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BA847648()
{
  return sub_1BA4A2870(&qword_1EF2A8548, (uint64_t (*)(uint64_t))type metadata accessor for SystemDesign, (uint64_t)&unk_1BB87B110);
}

uint64_t sub_1BA847674()
{
  return sub_1BA4A2870(&qword_1EF2A8550, (uint64_t (*)(uint64_t))type metadata accessor for FCOperationPurpose, (uint64_t)&unk_1BB87B204);
}

uint64_t sub_1BA8476A0()
{
  return sub_1BA4A2870(&qword_1EF2A8558, (uint64_t (*)(uint64_t))type metadata accessor for FCOperationPurpose, (uint64_t)&unk_1BB87B1D8);
}

uint64_t sub_1BA8476CC()
{
  return sub_1BA4A2870(&qword_1EF2A8560, (uint64_t (*)(uint64_t))type metadata accessor for FCOperationPurpose, (uint64_t)&unk_1BB87B274);
}

uint64_t sub_1BA8476F8()
{
  return sub_1BA4A2870(&qword_1EF2A8568, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFillMode, (uint64_t)&unk_1BB87B368);
}

uint64_t sub_1BA847724()
{
  return sub_1BA4A2870(&qword_1EF2A8570, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFillMode, (uint64_t)&unk_1BB87B33C);
}

uint64_t sub_1BA847750()
{
  return sub_1BA4A2870(&qword_1EF2A8578, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFillMode, (uint64_t)&unk_1BB87B3D8);
}

uint64_t sub_1BA84777C()
{
  return sub_1BA4A2870(&qword_1EF2A8580, (uint64_t (*)(uint64_t))type metadata accessor for CAShapeLayerLineCap, (uint64_t)&unk_1BB87B634);
}

uint64_t sub_1BA8477A8()
{
  return sub_1BA4A2870(&qword_1EF2A8588, (uint64_t (*)(uint64_t))type metadata accessor for CAShapeLayerLineCap, (uint64_t)&unk_1BB87B608);
}

uint64_t sub_1BA8477D4()
{
  return sub_1BA4A2870(&qword_1EF2A8590, (uint64_t (*)(uint64_t))type metadata accessor for CAShapeLayerLineCap, (uint64_t)&unk_1BB87B6A4);
}

uint64_t sub_1BA847800()
{
  return sub_1BA4A2870(&qword_1EF2A8598, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_1BB87B794);
}

uint64_t sub_1BA84782C()
{
  return sub_1BA4A2870(&qword_1EF2A85A0, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_1BB87B760);
}

uint64_t sub_1BA847858()
{
  return sub_1BA4A2870(&qword_1EF2A85A8, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_1BB87B7C0);
}

uint64_t sub_1BA847884()
{
  return sub_1BA4A2870(&qword_1EF2A85B0, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_1BB87B7FC);
}

uint64_t sub_1BA8478B0()
{
  return sub_1BA4A2870(&qword_1EF2A85B8, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1BB87B938);
}

uint64_t sub_1BA8478DC()
{
  return sub_1BA4A2870(&qword_1EF2A85C0, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1BB87B904);
}

uint64_t sub_1BA847908()
{
  return sub_1BA4A2870(&qword_1EF2A85C8, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1BB87B964);
}

uint64_t sub_1BA847934()
{
  return sub_1BA4A2870(&qword_1EF2A85D0, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1BB87B9A0);
}

uint64_t sub_1BA847960()
{
  return sub_1BA4A2870(&qword_1EF2A85D8, (uint64_t (*)(uint64_t))type metadata accessor for AVLayerVideoGravity, (uint64_t)&unk_1BB87BB0C);
}

uint64_t sub_1BA84798C()
{
  return sub_1BA4A2870(&qword_1EF2A85E0, (uint64_t (*)(uint64_t))type metadata accessor for AVLayerVideoGravity, (uint64_t)&unk_1BB87BAE4);
}

uint64_t sub_1BA8479B8()
{
  return sub_1BA4A2870(&qword_1EF2A85E8, (uint64_t (*)(uint64_t))type metadata accessor for AVLayerVideoGravity, (uint64_t)&unk_1BB87BB74);
}

uint64_t sub_1BA8479E4()
{
  return sub_1BA4A2870(&qword_1EF2A85F0, (uint64_t (*)(uint64_t))type metadata accessor for CALayerContentsGravity, (uint64_t)&unk_1BB87BC50);
}

uint64_t sub_1BA847A10()
{
  return sub_1BA4A2870(&qword_1EF2A85F8, (uint64_t (*)(uint64_t))type metadata accessor for CALayerContentsGravity, (uint64_t)&unk_1BB87BC24);
}

uint64_t sub_1BA847A3C()
{
  return sub_1BA4A2870((unint64_t *)&unk_1EF2A8600, (uint64_t (*)(uint64_t))type metadata accessor for CALayerContentsGravity, (uint64_t)&unk_1BB87BCC0);
}

uint64_t sub_1BA847A68()
{
  return sub_1BA4A2870((unint64_t *)&unk_1EF2A8610, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceIdiom, (uint64_t)&unk_1BB87AEF8);
}

void sub_1BA847A94()
{
  char *v0;
  uint64_t v1;
  Class v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_onTargetTap;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v3 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_targetButton;
  *(_QWORD *)&v0[v3] = objc_msgSend((id)objc_opt_self(), sel_buttonWithType_, 0);
  v4 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_statusLabel;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v5 = OBJC_IVAR____TtC8NewsFeed31DebugFormatUploadDiffStatusView_progressView;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B98]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  sub_1BB873EAC();
  __break(1u);
}

uint64_t sub_1BA847BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1BA847C08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3BA010)
  {
    sub_1BA81D1A4();
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3BA010);
  }
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1EF2A8960, (uint64_t)&unk_1E72720F8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for OptionKey(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8970, (uint64_t)&unk_1E7272148, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8978, (uint64_t)&unk_1E7272170, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA847CB0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BA847CD0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8980, (uint64_t)&unk_1E72721F0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8988, (uint64_t)&unk_1E7272250, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8990, (uint64_t)&unk_1E7272278, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FCFetchResult(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3A16F0, (uint64_t)&unk_1E7272328, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGBlendMode(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8998, (uint64_t)&unk_1E7272348, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohort_Type(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A89A0, (uint64_t)&unk_1E7272368, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_1BA4AD288(a1, (unint64_t *)&unk_1EF2A89A8, (uint64_t)&unk_1E7272388, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Identifier(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1ED3A2FD8, (uint64_t)&unk_1E72723D8, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA847DFC()
{
  return sub_1BA4A2870(&qword_1EF2A89B8, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&unk_1BB87C0D0);
}

uint64_t sub_1BA847E28()
{
  return sub_1BA4A2870(&qword_1EF2A89C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&unk_1BB87C0A4);
}

uint64_t sub_1BA847E54()
{
  return sub_1BA4A2870(&qword_1EF2A89C8, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&unk_1BB87C140);
}

uint64_t sub_1BA847E80()
{
  return sub_1BA4A2870(&qword_1EF2A89D0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1BB87C228);
}

uint64_t sub_1BA847EAC()
{
  return sub_1BA4A2870(&qword_1EF2A89D8, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1BB87C1FC);
}

uint64_t sub_1BA847ED8()
{
  return sub_1BA4A2870(&qword_1EF2A89E0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BB87C33C);
}

uint64_t sub_1BA847F04()
{
  return sub_1BA4A2870(&qword_1EF2A89E8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BB87C310);
}

uint64_t sub_1BA847F30()
{
  return sub_1BA4A2870(&qword_1EF2A89F0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BB87C3AC);
}

uint64_t sub_1BA847F5C()
{
  return sub_1BA4A2870(&qword_1EF2A89F8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1BB87C494);
}

uint64_t sub_1BA847F88()
{
  return sub_1BA4A2870(&qword_1EF2A8A00, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1BB87C468);
}

uint64_t sub_1BA847FB4()
{
  return sub_1BA4A2870(&qword_1EF2A8A08, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1BB87C504);
}

uint64_t sub_1BA847FE0()
{
  return sub_1BA4A2870(&qword_1EF2A8A10, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_1BB87C5E8);
}

uint64_t sub_1BA84800C()
{
  return sub_1BA4A2870(&qword_1EF2A8A18, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_1BB87C5C0);
}

uint64_t sub_1BA848038()
{
  return sub_1BA4A2870(&qword_1EF2A8A20, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_1BB87C650);
}

uint64_t sub_1BA848064()
{
  return sub_1BA4A2870(&qword_1EF2A8A28, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1BB87C298);
}

void type metadata accessor for CALayerCornerCurve(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8A80, (uint64_t)&unk_1E7272428, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA8480AC()
{
  return sub_1BA4A2870(&qword_1EF2A8A88, (uint64_t (*)(uint64_t))type metadata accessor for CALayerCornerCurve, (uint64_t)&unk_1BB87C794);
}

uint64_t sub_1BA8480D8()
{
  return sub_1BA4A2870(&qword_1EF2A8A90, (uint64_t (*)(uint64_t))type metadata accessor for CALayerCornerCurve, (uint64_t)&unk_1BB87C768);
}

uint64_t sub_1BA848104()
{
  return sub_1BA4A2870(&qword_1EF2A8A98, (uint64_t (*)(uint64_t))type metadata accessor for CALayerCornerCurve, (uint64_t)&unk_1BB87C804);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_1BA4AD288(a1, &qword_1EF2A8AB0, (uint64_t)&unk_1E7272450, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BA84814C()
{
  return sub_1BA4A2870(&qword_1EF2A8AB8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1BB87C90C);
}

uint64_t sub_1BA848178()
{
  return sub_1BA4A2870(&qword_1EF2A8AC0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1BB87C8E0);
}

uint64_t sub_1BA8481A4()
{
  return sub_1BA4A2870(&qword_1EF2A8AC8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1BB87C97C);
}

_QWORD *assignWithCopy for SportsConfigResourceParameter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SportsConfigResourceParameter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatDerivedDataBundleImageReference()
{
  return &type metadata for FormatDerivedDataBundleImageReference;
}

BOOL sub_1BA848300(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s8NewsFeed16FormatFontMetricO9hashValueSivg_0()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BA84835C()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BA848384()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 1701667182;
}

uint64_t sub_1BA8483BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA84867C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA8483E0()
{
  return 0;
}

void sub_1BA8483EC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BA8483F8()
{
  sub_1BA84890C();
  return sub_1BB874710();
}

uint64_t sub_1BA848420()
{
  sub_1BA84890C();
  return sub_1BB87471C();
}

uint64_t sub_1BA848448(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  char v14;
  char v15;

  v13[0] = a4;
  v13[1] = a5;
  sub_1BA848950(0, &qword_1EF2A8E50, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA84890C();
  sub_1BB8746C8();
  v15 = 0;
  sub_1BB87417C();
  if (!v5)
  {
    v14 = 1;
    sub_1BB87411C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1BA848578@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1BA848758(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1BA8485A4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BA848448(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1BA8485C0(uint64_t *a1, uint64_t *a2)
{
  return sub_1BA8485DC(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1BA8485DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6 || (v12 = sub_1BB874398(), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (sub_1BB874398() & 1) != 0))
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1BA84867C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB95F8D0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BA848758(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1BA848950(0, &qword_1EF2A8E40, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v10 - v6;
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA84890C();
  sub_1BB87468C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    v8 = sub_1BB874098();
    v11 = 1;
    swift_bridgeObjectRetain();
    sub_1BB87402C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1BA84890C()
{
  unint64_t result;

  result = qword_1EF2A8E48;
  if (!qword_1EF2A8E48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CBB4, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E48);
  }
  return result;
}

void sub_1BA848950(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA84890C();
    v7 = a3(a1, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for FormatDerivedDataBundleImageReference.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA8489F8 + 4 * byte_1BB87CA45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA848A2C + 4 * byte_1BB87CA40[v4]))();
}

uint64_t sub_1BA848A2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA848A34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA848A3CLL);
  return result;
}

uint64_t sub_1BA848A48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA848A50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA848A54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA848A5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatDerivedDataBundleImageReference.CodingKeys()
{
  return &type metadata for FormatDerivedDataBundleImageReference.CodingKeys;
}

unint64_t sub_1BA848A7C()
{
  unint64_t result;

  result = qword_1EF2A8E58;
  if (!qword_1EF2A8E58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CB8C, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E58);
  }
  return result;
}

unint64_t sub_1BA848AC4()
{
  unint64_t result;

  result = qword_1EF2A8E60;
  if (!qword_1EF2A8E60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CAFC, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E60);
  }
  return result;
}

unint64_t sub_1BA848B0C()
{
  unint64_t result;

  result = qword_1EF2A8E68;
  if (!qword_1EF2A8E68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CB24, &type metadata for FormatDerivedDataBundleImageReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E68);
  }
  return result;
}

uint64_t sub_1BA848B64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA848BA0 + 4 * byte_1BB87CC04[a1]))(0x446873696C627570, 0xEB00000000657461);
}

uint64_t sub_1BA848BA0()
{
  return 0x4479616C70736964;
}

unint64_t sub_1BA848BB4()
{
  return 0xD000000000000010;
}

unint64_t sub_1BA848BD0()
{
  return 0xD000000000000014;
}

uint64_t sub_1BA848BF0()
{
  return 0x637465467473616CLL;
}

void sub_1BA848C14(char *a1)
{
  sub_1BB7F8DC4(*a1);
}

void sub_1BA848C20()
{
  char *v0;

  sub_1BA8D21FC(*v0);
}

void sub_1BA848C28(uint64_t a1)
{
  char *v1;

  sub_1BA9D2A48(a1, *v1);
}

void sub_1BA848C30(uint64_t a1)
{
  char *v1;

  sub_1BAB09268(a1, *v1);
}

uint64_t sub_1BA848C38@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA848B64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA848C60()
{
  sub_1BA4AE384();
  return sub_1BB872D0C();
}

void sub_1BA848CAC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E724BA20;
}

BOOL static FormatHeadlineBinding.DateTime.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormatHeadlineBinding.DateTime.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatHeadlineBinding.DateTime.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BA848D40()
{
  unint64_t result;

  result = qword_1EF2A8E70;
  if (!qword_1EF2A8E70)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.DateTime, &type metadata for FormatHeadlineBinding.DateTime);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E70);
  }
  return result;
}

unint64_t sub_1BA848D84(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA848DA8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA848DA8()
{
  unint64_t result;

  result = qword_1EF2A8E78;
  if (!qword_1EF2A8E78)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.DateTime, &type metadata for FormatHeadlineBinding.DateTime);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E78);
  }
  return result;
}

unint64_t sub_1BA848DEC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA509640();
  a1[2] = sub_1BA848E20();
  result = sub_1BA848D40();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA848E20()
{
  unint64_t result;

  result = qword_1ED3A6BB0;
  if (!qword_1ED3A6BB0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.DateTime, &type metadata for FormatHeadlineBinding.DateTime);
    atomic_store(result, (unint64_t *)&qword_1ED3A6BB0);
  }
  return result;
}

void sub_1BA848E64(_QWORD *a1)
{
  FormatHeadlineBinding.DateTime.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FormatHeadlineBinding.DateTime()
{
  return &type metadata for FormatHeadlineBinding.DateTime;
}

ValueMetadata *_s14descr1E7272991C8DateTimeO10CodingTypeOMa()
{
  return &_s14descr1E7272991C8DateTimeO10CodingTypeON;
}

unint64_t sub_1BA848E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A8E80;
  if (!qword_1EF2A8E80)
  {
    sub_1BA848EE4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E80);
  }
  return result;
}

void sub_1BA848EE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A8E88)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A8E88);
  }
}

unint64_t sub_1BA848F3C()
{
  unint64_t result;

  result = qword_1EF2A8E90;
  if (!qword_1EF2A8E90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CE1C, &_s14descr1E7272991C8DateTimeO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E90);
  }
  return result;
}

void sub_1BA848F80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[14];

  v20[7] = a2;
  v20[5] = a3;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v20[13] = v4;
  MEMORY[0x1E0C80A78](v4);
  v20[4] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v20[3] = (char *)v20 - v7;
  MEMORY[0x1E0C80A78](v8);
  v20[2] = (char *)v20 - v9;
  MEMORY[0x1E0C80A78](v10);
  v20[1] = (char *)v20 - v11;
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v15 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  __asm { BR              X10 }
}

uint64_t sub_1BA849174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *boxed_opaque_existential_0;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;

  sub_1BA4B07F0(0, (unint64_t *)&unk_1EF2A9CC0, type metadata accessor for FormatInspectionItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FormatInspectionItem(0) - 8) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BB87CE70;
  v6 = v5;
  v7 = (_QWORD *)(v5 + v4);
  sub_1BA76C878(*(_QWORD *)(v2 - 120), v1);
  *(_QWORD *)(v2 - 88) = *(_QWORD *)(v2 - 72);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v2 - 112));
  v9 = objc_msgSend(*(id *)(v1 + 40), sel_publishDate);
  if (v9)
  {
    v10 = v9;
    sub_1BB86C874();

    v11 = sub_1BB86C8B0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v0, 0, 1, v11);
  }
  else
  {
    v12 = sub_1BB86C8B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v0, 1, 1, v12);
  }
  v13 = *(uint64_t **)(v2 - 136);
  sub_1BA50236C(v0, (uint64_t)boxed_opaque_existential_0);
  sub_1BAAF40BC(0x206873696C627550, 0xEC00000065746144, v2 - 112, v7);
  result = sub_1BA717468(v1);
  *v13 = v6;
  return result;
}

double sub_1BA849824@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;
  char v8;
  _OWORD v9[2];
  uint64_t v10;

  *(_QWORD *)&v9[0] = MEMORY[0x1E0DEE9D8];
  v8 = 0;
  sub_1BA848F80((uint64_t)&v8, a1, (uint64_t)&v7);
  sub_1BB383BA8(v7);
  v8 = 1;
  sub_1BA848F80((uint64_t)&v8, a1, (uint64_t)&v7);
  sub_1BB383BA8(v7);
  v8 = 2;
  sub_1BA848F80((uint64_t)&v8, a1, (uint64_t)&v7);
  sub_1BB383BA8(v7);
  v8 = 3;
  sub_1BA848F80((uint64_t)&v8, a1, (uint64_t)&v7);
  sub_1BB383BA8(v7);
  v8 = 4;
  sub_1BA848F80((uint64_t)&v8, a1, (uint64_t)&v7);
  sub_1BB383BA8(v7);
  v4 = sub_1BA97461C(*(uint64_t *)&v9[0]);
  swift_bridgeObjectRelease();
  sub_1BAF89090(0x6D69542065746144, 0xE900000000000065, 0, 0, v4, v9);
  swift_bridgeObjectRelease();
  result = *(double *)v9;
  v6 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_1BA8499AC()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BA8499EC()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BA849A10()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t LayeredMediaParser.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *LayeredMediaParser.__allocating_init(identifier:json:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *LayeredMediaParser.init(identifier:json:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

uint64_t LayeredMediaParser.parse()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;

  v3 = sub_1BB8729E8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB8729DC();
  v7 = sub_1BB8729AC();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v9 >> 60 == 15)
  {
    sub_1BA849D84();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    sub_1BB86DC9C();
    swift_allocObject();
    sub_1BB86DC90();
    sub_1BA849DC8();
    sub_1BB86DC78();
    if (v1)
    {
      swift_release();
      if (qword_1ED39E0B0 != -1)
        swift_once();
      v11 = (id)qword_1ED4763D0;
      v12 = sub_1BB8732F4();
      sub_1BA7AA598();
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1BB87CE70;
      *(_QWORD *)&v23 = 0;
      *((_QWORD *)&v23 + 1) = 0xE000000000000000;
      v22[1] = v1;
      sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
      sub_1BB873E34();
      v14 = v23;
      *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v13 + 64) = sub_1BA6A2D8C();
      *(_OWORD *)(v13 + 32) = v14;
      sub_1BB86EF44("Failed to load layered media with error %{public}@", 50, 2, &dword_1BA493000, v11, v12, v13);

      swift_bridgeObjectRelease();
      swift_willThrow();
      return sub_1BA69D490(v7, v9);
    }
    else
    {
      sub_1BA69D490(v7, v9);
      result = swift_release();
      v15 = v27;
      v16 = v28;
      v17 = v29;
      v18 = v24;
      v19 = v25;
      v20 = v26;
      v21 = v30;
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v18;
      *(_OWORD *)(a1 + 32) = v19;
      *(_OWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 64) = v15;
      *(_BYTE *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 88) = v21;
    }
  }
  return result;
}

unint64_t sub_1BA849D84()
{
  unint64_t result;

  result = qword_1EF2A8E98;
  if (!qword_1EF2A8E98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CF68, &type metadata for LayeredMediaParser.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF2A8E98);
  }
  return result;
}

unint64_t sub_1BA849DC8()
{
  unint64_t result;

  result = qword_1ED39CBA0;
  if (!qword_1ED39CBA0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for LayeredMedia, &type metadata for LayeredMedia);
    atomic_store(result, (unint64_t *)&qword_1ED39CBA0);
  }
  return result;
}

uint64_t sub_1BA849E0C()
{
  return sub_1BB873E34();
}

uint64_t sub_1BA849E30()
{
  sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
  return sub_1BB873E34();
}

uint64_t LayeredMediaParser.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LayeredMediaParser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA849ED4@<X0>(uint64_t a1@<X8>)
{
  return LayeredMediaParser.parse()(a1);
}

uint64_t dispatch thunk of LayeredMediaParserType.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LayeredMediaParserType.parse()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for LayeredMediaParser()
{
  return objc_opt_self();
}

uint64_t method lookup function for LayeredMediaParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LayeredMediaParser.__allocating_init(identifier:json:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for LayeredMediaParser.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA849F88 + 4 * byte_1BB87CE80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA849FA8 + 4 * byte_1BB87CE85[v4]))();
}

_BYTE *sub_1BA849F88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA849FA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA849FB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA849FB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA849FC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA849FC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LayeredMediaParser.Errors()
{
  return &type metadata for LayeredMediaParser.Errors;
}

unint64_t sub_1BA849FE8()
{
  unint64_t result;

  result = qword_1EF2A8EA0;
  if (!qword_1EF2A8EA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87CF40, &type metadata for LayeredMediaParser.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF2A8EA0);
  }
  return result;
}

uint64_t sub_1BA84A02C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;
  unsigned __int8 v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD v46[2];
  char v47;

  v5 = sub_1BB872A0C();
  v6 = v4;
  if (v5 == 29804 && v4 == 0xE200000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v7) = 0;
LABEL_5:
    v8 = 1;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 29799 && v6 == 0xE200000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v7) = 1;
    goto LABEL_5;
  }
  if (v5 == 1953461617 && v6 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = 1;
    LODWORD(v7) = 2;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 7368033 && v6 == 0xE300000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = 1;
    LODWORD(v7) = 3;
    return v7 | ((unint64_t)v8 << 32);
  }
  if (v5 == 1886610030 && v6 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    v8 = 1;
    LODWORD(v7) = 4;
    return v7 | ((unint64_t)v8 << 32);
  }
  v10 = sub_1BB874398();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_23;
  if ((sub_1BB872B5C() & 1) == 0)
    goto LABEL_86;
  swift_bridgeObjectRetain();
  v11 = sub_1BA9C0430(1uLL, a1, a2);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x1BCCE334C](v11, v13, v15, v17);
  v20 = v19;
  result = swift_bridgeObjectRelease();
  v21 = HIBYTE(v20) & 0xF;
  v22 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v20) & 0xF;
  else
    v23 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    v7 = sub_1BA9BF8C0(v18, v20, 10);
    swift_bridgeObjectRelease();
    if ((v7 & 0x100000000) == 0)
    {
LABEL_62:
      swift_bridgeObjectRelease();
      if (WORD1(v7) <= 0x10u && (v7 & 0xFFFFF800) != 0xD800)
      {
        v8 = 0;
        return v7 | ((unint64_t)v8 << 32);
      }
      sub_1BA84A600();
      swift_allocError();
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)v34 = v7;
      v35 = 8;
      goto LABEL_87;
    }
LABEL_86:
    sub_1BA84A600();
    swift_allocError();
    *(_QWORD *)v34 = a1;
    *(_QWORD *)(v34 + 8) = a2;
    *(_QWORD *)(v34 + 16) = 0;
    v35 = 7;
LABEL_87:
    *(_BYTE *)(v34 + 24) = v35;
    return swift_willThrow();
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0)
      v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v24 = (unsigned __int8 *)sub_1BB873D80();
    v25 = sub_1BA9BF898(v24, v22, 10);
    v47 = BYTE4(v25) & 1;
    v26 = BYTE4(v25) & 1;
    LODWORD(v7) = (_DWORD)v25;
LABEL_61:
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      goto LABEL_62;
    goto LABEL_86;
  }
  v46[0] = v18;
  v46[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (v21)
    {
      if (v21 != 1)
      {
        LODWORD(v7) = (BYTE1(v18) - 48);
        if (v7 <= 9)
        {
          if (v21 == 2)
            goto LABEL_60;
          if ((BYTE2(v18) - 48) <= 9u)
          {
            LODWORD(v7) = 10 * v7 + (BYTE2(v18) - 48);
            v30 = v21 - 3;
            if (v30)
            {
              v31 = (unsigned __int8 *)v46 + 3;
              while (1)
              {
                v32 = *v31 - 48;
                if (v32 > 9)
                  goto LABEL_57;
                v33 = 10 * v7;
                if ((v33 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_57;
                LODWORD(v7) = v33 + v32;
                if (__CFADD__((_DWORD)v33, v32))
                  goto LABEL_57;
                v26 = 0;
                ++v31;
                if (!--v30)
                  goto LABEL_61;
              }
            }
            goto LABEL_60;
          }
        }
      }
      goto LABEL_57;
    }
  }
  else
  {
    if (v18 != 45)
    {
      if (v21)
      {
        LODWORD(v7) = (v18 - 48);
        if (v7 <= 9)
        {
          if (v21 == 1)
            goto LABEL_60;
          if ((BYTE1(v18) - 48) <= 9u)
          {
            LODWORD(v7) = 10 * v7 + (BYTE1(v18) - 48);
            v36 = v21 - 2;
            if (v36)
            {
              v37 = (unsigned __int8 *)v46 + 2;
              while (1)
              {
                v38 = *v37 - 48;
                if (v38 > 9)
                  goto LABEL_57;
                v39 = 10 * v7;
                if ((v39 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_57;
                LODWORD(v7) = v39 + v38;
                if (__CFADD__((_DWORD)v39, v38))
                  goto LABEL_57;
                v26 = 0;
                ++v37;
                if (!--v36)
                  goto LABEL_61;
              }
            }
            goto LABEL_60;
          }
        }
      }
LABEL_57:
      LODWORD(v7) = 0;
LABEL_58:
      v26 = 1;
      goto LABEL_61;
    }
    if (v21)
    {
      if (v21 != 1)
      {
        v27 = BYTE1(v18) - 48;
        if ((BYTE1(v18) - 48) <= 9u)
        {
          LODWORD(v7) = 0;
          v28 = v27 == 0;
          v29 = -v27;
          if (!v28)
            goto LABEL_58;
          if (v21 == 2)
          {
            v26 = 0;
            LODWORD(v7) = v29;
            goto LABEL_61;
          }
          v40 = BYTE2(v18) - 48;
          if ((BYTE2(v18) - 48) <= 9u)
          {
            v41 = 10 * v29;
            if ((v41 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v7) = v41 - v40;
              if (v41 >= v40)
              {
                v42 = v21 - 3;
                if (v42)
                {
                  v43 = (unsigned __int8 *)v46 + 3;
                  while (1)
                  {
                    v44 = *v43 - 48;
                    if (v44 > 9)
                      goto LABEL_57;
                    v45 = 10 * v7;
                    if ((v45 & 0xFFFFFFFF00000000) != 0)
                      goto LABEL_57;
                    LODWORD(v7) = v45 - v44;
                    if (v45 < v44)
                      goto LABEL_57;
                    v26 = 0;
                    ++v43;
                    if (!--v42)
                      goto LABEL_61;
                  }
                }
LABEL_60:
                v26 = 0;
                goto LABEL_61;
              }
            }
          }
        }
      }
      goto LABEL_57;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1BA84A600()
{
  unint64_t result;

  result = qword_1EF2A8EA8;
  if (!qword_1EF2A8EA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB91C27C, &type metadata for FormatDOMError);
    atomic_store(result, (unint64_t *)&qword_1EF2A8EA8);
  }
  return result;
}

uint64_t sub_1BA84A644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v3 = type metadata accessor for FormatFile();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FormatPackage();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BB86EB84();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA84AF70(v1 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_file, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    sub_1BA84AFB4((uint64_t)v5, (uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, &v8[*(int *)(v6 + 96)], v9);
    sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FormatPackage);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FormatFile);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_version, v9);
  }
}

id sub_1BA84A7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = sub_1BB86EB84();
  v38 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v0;
  v4 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name;
  swift_beginAccess();
  if (!*(_QWORD *)(v4 + 8))
    swift_bridgeObjectRetain();
  sub_1BA847C08();
  v34 = v5;
  inited = swift_initStackObject();
  v7 = (void **)MEMORY[0x1E0DC1138];
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  v8 = *v7;
  *(_QWORD *)(inited + 32) = *v7;
  v9 = (void *)objc_opt_self();
  v33 = v9;
  swift_bridgeObjectRetain();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_systemFontOfSize_, 15.0);
  v12 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 40) = v11;
  sub_1BA76E82C(inited);
  v13 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v14 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  v36 = v15;
  v35 = sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
  v16 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v13, sel_initWithString_attributes_, v14, v16);

  sub_1BA84A644((uint64_t)v3);
  sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
  v39 = sub_1BB87420C();
  v40 = v18;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v3, v1);
  sub_1BB872AFC(v19);
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BB87A390;
  *(_QWORD *)(v20 + 32) = v10;
  v21 = *MEMORY[0x1E0DC1448];
  v22 = v10;
  *(_QWORD *)(v20 + 40) = objc_msgSend(v33, sel_systemFontOfSize_weight_, 10.0, v21);
  v23 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(v20 + 64) = v12;
  *(_QWORD *)(v20 + 72) = v23;
  v24 = (void *)objc_opt_self();
  v25 = v23;
  v26 = objc_msgSend(v24, sel_systemBlueColor);
  *(_QWORD *)(v20 + 104) = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
  *(_QWORD *)(v20 + 80) = v26;
  sub_1BA76E82C(v20);
  v27 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v28 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v29 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v27, sel_initWithString_attributes_, v28, v29);

  objc_msgSend(v30, sel_appendAttributedString_, v17);
  return v30;
}

id sub_1BA84ABC0()
{
  uint64_t v0;
  id v1;
  uint64_t inited;
  void **v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_diff))
  {
    swift_retain();
    v1 = sub_1BA868758();
    swift_release();
    return v1;
  }
  else
  {
    swift_beginAccess();
    sub_1BA847C08();
    inited = swift_initStackObject();
    v4 = (void **)MEMORY[0x1E0DC1138];
    *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
    v5 = *v4;
    *(_QWORD *)(inited + 32) = *v4;
    v6 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v7 = v5;
    v8 = objc_msgSend(v6, sel_systemFontOfSize_, 13.0);
    v9 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
    *(_QWORD *)(inited + 40) = v8;
    v10 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 72) = v10;
    v11 = (void *)objc_opt_self();
    v12 = v10;
    v13 = objc_msgSend(v11, sel_systemGray2Color);
    *(_QWORD *)(inited + 104) = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
    *(_QWORD *)(inited + 80) = v13;
    sub_1BA76E82C(inited);
    v14 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v15 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
    v16 = (void *)sub_1BB872760();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v14, sel_initWithString_attributes_, v15, v16);

    return v17;
  }
}

uint64_t sub_1BA84AE00()
{
  uint64_t v0;

  swift_release();
  sub_1BA4A2E80(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_file, (uint64_t (*)(_QWORD))type metadata accessor for FormatFile);
  sub_1BA5F1DE8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target), *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC8NewsFeed22DebugFormatUploadEntry_target + 16));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA84AE68()
{
  return type metadata accessor for DebugFormatUploadEntry();
}

uint64_t type metadata accessor for DebugFormatUploadEntry()
{
  uint64_t result;

  result = qword_1EF2A8ED8;
  if (!qword_1EF2A8ED8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BA84AEAC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatFile();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BA84AF3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16) + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BA84AF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatFile();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA84AFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatPackage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static FormatCodingVisibilityUnsetStrategy.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

BOOL static FormatCodingVisibilityUnsetStrategy.shouldEncode(wrappedValue:)(_QWORD *a1)
{
  return *a1 != 0x8000000000000000;
}

unint64_t sub_1BA84B018(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA84B03C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA84B03C()
{
  unint64_t result;

  result = qword_1EF2A8F78;
  if (!qword_1EF2A8F78)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingVisibilityUnsetStrategy, &type metadata for FormatCodingVisibilityUnsetStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2A8F78);
  }
  return result;
}

unint64_t sub_1BA84B088()
{
  unint64_t result;

  result = qword_1ED39FC90;
  if (!qword_1ED39FC90)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatVisibility, &type metadata for FormatVisibility);
    atomic_store(result, (unint64_t *)&qword_1ED39FC90);
  }
  return result;
}

void sub_1BA84B0CC(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

BOOL sub_1BA84B0D8(_QWORD *a1)
{
  return *a1 != 0x8000000000000000;
}

ValueMetadata *type metadata accessor for FormatCodingVisibilityUnsetStrategy()
{
  return &type metadata for FormatCodingVisibilityUnsetStrategy;
}

uint64_t LayeredMediaViewRenderer.render(view:renderedViewModel:forceAsync:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;

  if ((a3 & 1) != 0)
  {
    if (qword_1ED39EA60 != -1)
      swift_once();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = a1;
    swift_retain();
    v7 = sub_1BB86EC08();
    swift_release();
    return v7;
  }
  else
  {
    sub_1BA4D787C(0, &qword_1ED39DA30, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB86EC14();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = a2;
    v10 = a1;
    swift_retain();
    v11 = (void *)sub_1BB86E854();
    v12 = sub_1BB86E968();
    swift_release();
    swift_release();

    return v12;
  }
}

uint64_t sub_1BA84B260(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;

  sub_1BA4D787C(0, &qword_1ED39DA30, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB86EC14();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = a2;
  swift_retain();
  v7 = (void *)sub_1BB86E854();
  v8 = sub_1BB86E968();
  swift_release();
  swift_release();

  return v8;
}

uint64_t LayeredMediaViewRenderer.render(view:options:forceAsync:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11[2];
  uint64_t v12;

  if ((a3 & 1) != 0)
  {
    if (qword_1ED39EA60 != -1)
      swift_once();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 40) = v6;
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 32);
    v7 = a1;
    v8 = sub_1BB86EC08();
    swift_release();
    return v8;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v10;
    v12 = *(_QWORD *)(a2 + 32);
    return sub_1BA84B47C((char *)a1, v11);
  }
}

uint64_t sub_1BA84B430(uint64_t a1, char *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v5[2];
  uint64_t v6;

  v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  v6 = *(_QWORD *)(a3 + 32);
  return sub_1BA84B47C(a2, v5);
}

uint64_t sub_1BA84B47C(char *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2[1];
  v17 = *a2;
  v18 = v4;
  v19 = *((_QWORD *)a2 + 4);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)&a1[qword_1ED3AC1D0];
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  sub_1BB71D238(v7, v5, (uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for LayeredMediaRenderedViewModel();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v6;
  v9 = v18;
  *(_OWORD *)(v8 + 24) = v17;
  *(_OWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 56) = v19;
  sub_1BA4D787C(0, (unint64_t *)&qword_1ED3B0900, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_retain();
  v10 = (void *)sub_1BB86E854();
  sub_1BA81DCAC();
  sub_1BA81DC64();
  v11 = sub_1BB86E920();
  swift_bridgeObjectRelease();

  *(_QWORD *)(v8 + 64) = v11;
  sub_1BA4D787C(0, &qword_1ED39DA30, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB86EC14();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = a1;
  swift_retain();
  v14 = (void *)sub_1BB86E854();
  v15 = sub_1BB86E968();
  swift_release();
  swift_release();
  swift_release();

  return v15;
}

uint64_t sub_1BA84B648()
{
  return swift_retain();
}

uint64_t sub_1BA84B660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;

  sub_1BB6323B0(*(_QWORD *)(a3 + 16));
  v3 = objc_msgSend((id)objc_opt_self(), sel_isMainThread);
  if ((v3 & 1) == 0)
    v3 = objc_msgSend((id)objc_opt_self(), sel_flush);
  MEMORY[0x1E0C80A78](v3);
  sub_1BA4D787C(0, (unint64_t *)&qword_1ED3B0900, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  return sub_1BB86EA58();
}

uint64_t sub_1BA84B72C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA84B660(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BA84B744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  id v12;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = sub_1BA4D7948;
  v11[5] = v10;
  swift_retain();
  v12 = a5;
  swift_retain();
  sub_1BB86ED4C();
  return swift_release();
}

uint64_t sub_1BA84B7E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + qword_1ED3AC1D0) == *(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + qword_1ED3AF858);
    a1 = swift_beginAccess();
    v5 = *(_BYTE *)(v4 + 16);
    *(_BYTE *)(v4 + 16) = 1;
    if ((v5 & 1) == 0)
      LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
  }
  return a3(a1);
}

uint64_t LayeredMediaViewRenderer.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t LayeredMediaViewRenderer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA84B8C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA84B260(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BA84B8E0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BA84B904()
{
  uint64_t v0;
  char *v1;
  __int128 v2;
  __int128 v4[2];
  uint64_t v5;

  v1 = *(char **)(v0 + 16);
  v2 = *(_OWORD *)(v0 + 40);
  v4[0] = *(_OWORD *)(v0 + 24);
  v4[1] = v2;
  v5 = *(_QWORD *)(v0 + 56);
  return sub_1BA84B47C(v1, v4);
}

uint64_t method lookup function for LayeredMediaViewRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BA84B968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BA84B744(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1BA84B970()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA84B994()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA84B9C8()
{
  uint64_t v0;

  return sub_1BA84B7E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_1BA84B9D4(uint64_t a1)
{
  return sub_1BA84B72C(a1);
}

uint64_t sub_1BA84B9E8()
{
  return sub_1BA84B648();
}

NewsFeed::AlertEnableNotifications __swiftcall AlertEnableNotifications.init(name:)(NewsFeed::AlertEnableNotifications name)
{
  NewsFeed::AlertEnableNotifications *v1;

  *v1 = name;
  return name;
}

uint64_t AlertEnableNotifications.title.getter()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

uint64_t AlertEnableNotifications.message.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v0;
  v1 = v0[1];
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  sub_1BA7AA598();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v5 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
  swift_bridgeObjectRetain();
  v6 = sub_1BB8729D0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t AlertEnableNotifications.preferredActionButton.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DB9128];
  v3 = sub_1BB870498();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t AlertEnableNotifications.acceptButton.getter()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

uint64_t AlertEnableNotifications.rejectButton.getter()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

uint64_t sub_1BA84BDC0()
{
  return AlertEnableNotifications.title.getter();
}

uint64_t sub_1BA84BDF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DB9128];
  v3 = sub_1BB870498();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1BA84BE38()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

uint64_t sub_1BA84BEF8()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

_QWORD *assignWithCopy for FormatSelector(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FormatSelector(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AlertEnableNotifications()
{
  return &type metadata for AlertEnableNotifications;
}

_QWORD *FeedRefreshBounceAnimation.__allocating_init(viewProvider:refreshStateMachine:barCompressionManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *FeedRefreshBounceAnimation.init(viewProvider:refreshStateMachine:barCompressionManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t sub_1BA84C0A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t (*)(uint64_t (*a1)(void)), double *))
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  double *v24;
  id v25;
  void *v26;
  _QWORD aBlock[6];

  v4 = v3;
  v5 = *v3;
  v6 = v3[2];
  v8 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  v9 = (void *)sub_1BB870AEC();
  objc_msgSend(v9, sel_setUserInteractionEnabled_, 0);

  v10 = (void *)sub_1BB870AEC();
  objc_msgSend(v10, sel_frame);
  v12 = v11;
  v14 = v13;

  v15 = objc_opt_self();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_1BA84D14C;
  *(_QWORD *)(v16 + 24) = v4;
  aBlock[4] = sub_1BA4D7948;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BA4D7928;
  aBlock[3] = &block_descriptor;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend((id)v15, sel_performWithoutAnimation_, v17);
  _Block_release(v17);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v19 = (void *)sub_1BB870AEC();
    v20 = objc_msgSend(v19, sel_snapshotViewAfterScreenUpdates_, 0);

    if (v20)
    {
      objc_msgSend(v20, sel_setFrame_, 0.0, 0.0, v12, v14);
      v21 = (void *)sub_1BB870AEC();
      v22 = objc_msgSend(v21, sel_superview);

      objc_msgSend(v22, sel_addSubview_, v20);
      v23 = swift_allocObject();
      swift_weakInit();
      v24 = (double *)swift_allocObject();
      *((_QWORD *)v24 + 2) = v8;
      *((_QWORD *)v24 + 3) = v7;
      *((_QWORD *)v24 + 4) = v23;
      *((_QWORD *)v24 + 5) = v6;
      v24[7] = 0.0;
      v24[8] = 0.0;
      *((_QWORD *)v24 + 6) = v20;
      v24[9] = v12;
      v24[10] = v14;
      swift_retain();
      swift_unknownObjectRetain();
      v25 = v20;
      a3((uint64_t (*)(uint64_t (*)(void)))sub_1BA84D1BC, v24);
      swift_release();

      swift_release();
    }
    else
    {
      v26 = (void *)sub_1BB870AEC();
      objc_msgSend(v26, sel_setUserInteractionEnabled_, 1);

      a3(sub_1BA4D7970, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t FeedRefreshBounceAnimation.animationCancelled(context:animation:)()
{
  return sub_1BB86DF84();
}

uint64_t sub_1BA84C3F0()
{
  return sub_1BB86DF84();
}

void sub_1BA84C43C(void (*a1)(_QWORD), uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t Strong;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  double Width;
  void *v27;
  double v28;
  double v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  CGFloat Height;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  double v45;
  double v46;
  double v47;
  double v48;
  id v49;
  id v50;
  double v51;
  double v52;
  double v53;
  double v54;
  id v55;
  _QWORD *v56;
  CGFloat v57;
  id v58;
  id v59;
  id v60;
  _QWORD *v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  void (*v69)(_QWORD);
  uint64_t v70;
  id v71;
  CGAffineTransform aBlock;
  CGRect v73;
  CGRect v74;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v17 = Strong;
    v18 = (void *)sub_1BB870AEC();
    objc_msgSend(v18, sel_adjustedContentInset);
    v20 = v19;

    v21 = (void *)sub_1BB870AEC();
    objc_msgSend(v21, sel_setContentOffset_animated_, 0, 0.0, -v20);

    v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v22 = (void *)sub_1BB870AEC();
    v23 = objc_msgSend(v22, sel_superview);

    if (!v23
      || (v24 = objc_msgSend(v23, sel_superview), v23, !v24)
      || (v25 = objc_msgSend(v24, sel_backgroundColor), v24, !v25))
    {
      v25 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    }
    objc_msgSend(v71, sel_setBackgroundColor_, v25);

    v73.origin.x = a3;
    v73.origin.y = a4;
    v73.size.width = a5;
    v73.size.height = a6;
    Width = CGRectGetWidth(v73);
    v27 = (void *)sub_1BB870AEC();
    objc_msgSend(v27, sel_adjustedContentInset);
    v29 = v28;

    objc_msgSend(v71, sel_setFrame_, 0.0, 0.0, Width, v29);
    v30 = *(void **)(v17 + 32);
    v69 = a1;
    v70 = a2;
    if (v30)
    {
      v31 = v30;
      sub_1BB8703F0();

      v32 = *(void **)(v17 + 32);
      if (v32)
      {
        v33 = v32;
        sub_1BB8703FC();

      }
    }
    v35 = (void *)sub_1BB870AEC();
    v36 = sub_1BA84CA38(300.0);

    objc_msgSend(v36, sel_bounds);
    Height = CGRectGetHeight(v74);
    CGAffineTransformMakeTranslation(&aBlock, 0.0, -Height);
    objc_msgSend(v36, sel_setTransform_, &aBlock);
    v38 = (void *)sub_1BB870AEC();
    v39 = objc_msgSend(v38, sel_superview);

    objc_msgSend(v39, sel_insertSubview_belowSubview_, v71, a9);
    v40 = (void *)sub_1BB870AEC();
    v41 = objc_msgSend(v40, sel_superview);

    objc_msgSend(v41, sel_insertSubview_belowSubview_, v36, v71);
    v42 = *(void **)(v17 + 32);
    if (v42)
    {
      v43 = v42;
      sub_1BB8703FC();

    }
    v44 = objc_allocWithZone(MEMORY[0x1E0CD27D0]);
    LODWORD(v45) = 1051260355;
    LODWORD(v46) = 1045220557;
    LODWORD(v47) = 0;
    LODWORD(v48) = 1.0;
    v49 = objc_msgSend(v44, sel_initWithControlPoints__::, v45, v47, v46, v48);
    v50 = objc_allocWithZone(MEMORY[0x1E0CD27D0]);
    LODWORD(v51) = 1043878380;
    LODWORD(v52) = 1056293519;
    LODWORD(v53) = 1064178811;
    LODWORD(v54) = 0;
    v55 = objc_msgSend(v50, sel_initWithControlPoints__::, v51, v54, v52, v53);
    v68 = (void *)objc_opt_self();
    v56 = (_QWORD *)swift_allocObject();
    v56[2] = a9;
    v56[3] = v36;
    v56[4] = 0x4039000000000000;
    *(_QWORD *)&aBlock.tx = sub_1BA84D200;
    *(_QWORD *)&aBlock.ty = v56;
    v57 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_1BA4F1DD8;
    *(_QWORD *)&aBlock.d = &block_descriptor_12;
    v67 = _Block_copy(&aBlock);
    v58 = v49;
    v59 = a9;
    v60 = v36;
    swift_release();
    v61 = (_QWORD *)swift_allocObject();
    v61[2] = v55;
    v61[3] = v60;
    v61[4] = v17;
    v61[5] = v59;
    v61[6] = v71;
    v61[7] = v69;
    v61[8] = v70;
    *(_QWORD *)&aBlock.tx = sub_1BA84D258;
    *(_QWORD *)&aBlock.ty = v61;
    aBlock.a = v57;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_1BB2D2738;
    *(_QWORD *)&aBlock.d = &block_descriptor_18;
    v62 = _Block_copy(&aBlock);
    v63 = v59;
    v64 = v60;
    v65 = v55;
    swift_retain();
    v66 = v71;
    swift_retain();
    swift_release();
    objc_msgSend(v68, sel_nu_animateWithDuration_delay_timingFunction_options_animations_completion_, v58, 4, v67, v62, 0.6, 0.0);
    _Block_release(v62);
    _Block_release(v67);
    swift_release();

  }
  else
  {
    v34 = (void *)sub_1BB870AEC();
    objc_msgSend(v34, sel_setUserInteractionEnabled_, 1);

    a1(objc_msgSend(a9, sel_removeFromSuperview));
  }
}

id sub_1BA84CA38(double a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double Height;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  void *v24;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  objc_msgSend(v1, sel_contentOffset);
  v4 = v3;
  v6 = v5;
  objc_msgSend(v1, sel_bounds);
  sub_1BB873654();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, v7, v8);
  objc_msgSend(v9, sel_setClipsToBounds_, 1);
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);

  v11 = objc_msgSend(v1, sel_snapshotViewAfterScreenUpdates_, 1);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v12, sel_setFrame_, 0.0, 0.0);
    objc_msgSend(v9, sel_addSubview_, v12);

  }
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setContentOffset_animated_, 0, v4, v6 + v13);
  objc_msgSend(v1, sel_contentOffset);
  v15 = v14;
  v17 = v16;
  objc_msgSend(v1, sel_bounds);
  Height = CGRectGetHeight(v26);
  if (a1 > 0.0)
  {
    v19 = Height;
    do
    {
      v23 = objc_msgSend(v1, sel_snapshotViewAfterScreenUpdates_, 1);
      if (v23)
      {
        v24 = v23;
        objc_msgSend(v1, sel_bounds);
        objc_msgSend(v24, sel_setFrame_, 0.0, v19);
        objc_msgSend(v9, sel_addSubview_, v24);

      }
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v1, sel_setContentOffset_animated_, 0, v15, v17 + v20);
      objc_msgSend(v1, sel_contentOffset);
      v15 = v21;
      v17 = v22;
      objc_msgSend(v1, sel_bounds);
      v19 = v19 + CGRectGetHeight(v27);
      objc_msgSend(v1, sel_bounds);
      a1 = a1 - CGRectGetHeight(v28);
    }
    while (a1 > 0.0);
  }
  objc_msgSend(v1, sel_setContentOffset_animated_, 0, v4, v6);
  return v9;
}

id sub_1BA84CCDC(void *a1, id a2, CGFloat a3)
{
  CGFloat Height;
  CGAffineTransform v8;
  CGRect v9;

  objc_msgSend(a2, sel_bounds);
  Height = CGRectGetHeight(v9);
  CGAffineTransformMakeTranslation(&v8, 0.0, Height + a3);
  objc_msgSend(a1, sel_setTransform_, &v8);
  CGAffineTransformMakeTranslation(&v8, 0.0, a3);
  return objc_msgSend(a2, sel_setTransform_, &v8);
}

void sub_1BA84CD90(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t aBlock;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;

  v13 = *a4;
  v24 = (void *)objc_opt_self();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  v30 = sub_1BA84D290;
  v31 = (_QWORD *)v14;
  v15 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v27 = 1107296256;
  v28 = sub_1BA4F1DD8;
  v29 = &block_descriptor_24;
  v16 = _Block_copy(&aBlock);
  v17 = a3;
  swift_release();
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = *(_QWORD *)(v13 + 80);
  v19[3] = *(_QWORD *)(v13 + 88);
  v19[4] = a5;
  v19[5] = v17;
  v19[6] = a6;
  v19[7] = v18;
  v19[8] = a7;
  v19[9] = a8;
  v30 = sub_1BA84D310;
  v31 = v19;
  aBlock = v15;
  v27 = 1107296256;
  v28 = sub_1BB2D2738;
  v29 = &block_descriptor_31;
  v20 = _Block_copy(&aBlock);
  v21 = v17;
  v22 = a5;
  v23 = a6;
  swift_retain();
  swift_release();
  objc_msgSend(v24, sel_nu_animateWithDuration_delay_timingFunction_options_animations_completion_, a2, 4, v16, v20, 0.4, 0.0);
  _Block_release(v20);
  _Block_release(v16);
}

uint64_t sub_1BA84CF58(int a1, id a2, void *a3, void *a4, int a5, uint64_t (*a6)(void), int a7, int a8, uint64_t a9)
{
  void *v12;

  objc_msgSend(a2, sel_removeFromSuperview);
  objc_msgSend(a3, sel_removeFromSuperview);
  objc_msgSend(a4, sel_removeFromSuperview);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_unknownObjectRetain();
    swift_release();
    v12 = (void *)sub_1BB870AEC();
    swift_unknownObjectRelease();
    objc_msgSend(v12, sel_setUserInteractionEnabled_, 1);

  }
  return a6();
}

uint64_t FeedRefreshBounceAnimation.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t FeedRefreshBounceAnimation.__deallocating_deinit()
{
  FeedRefreshBounceAnimation.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA84D094()
{
  return FeedRefreshBounceAnimation.animate(context:animation:applyUpdates:)();
}

uint64_t sub_1BA84D0B4()
{
  return FeedRefreshBounceAnimation.animationCancelled(context:animation:)();
}

uint64_t sub_1BA84D0D4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FeedRefreshBounceAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeedRefreshBounceAnimation);
}

uint64_t method lookup function for FeedRefreshBounceAnimation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeedRefreshBounceAnimation.__allocating_init(viewProvider:refreshStateMachine:barCompressionManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1BA84D14C()
{
  return sub_1BA84C3F0();
}

uint64_t sub_1BA84D154()
{
  return swift_deallocObject();
}

uint64_t sub_1BA84D164()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BA84D188()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1BA84D1BC(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  sub_1BA84C43C(a1, a2, *(CGFloat *)(v2 + 56), *(CGFloat *)(v2 + 64), *(CGFloat *)(v2 + 72), *(CGFloat *)(v2 + 80), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_1BA84D1D4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BA84D200()
{
  uint64_t v0;

  return sub_1BA84CCDC(*(void **)(v0 + 16), *(id *)(v0 + 24), *(CGFloat *)(v0 + 32));
}

uint64_t sub_1BA84D20C()
{
  id *v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1BA84D258(uint64_t a1)
{
  uint64_t v1;

  sub_1BA84CD90(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1BA84D26C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BA84D290()
{
  uint64_t v0;
  void *v1;
  _QWORD v3[6];

  v1 = *(void **)(v0 + 16);
  v3[0] = 0x3FF0000000000000;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = 0x3FF0000000000000;
  v3[4] = 0;
  v3[5] = 0;
  return objc_msgSend(v1, sel_setTransform_, v3);
}

uint64_t sub_1BA84D2CC()
{
  id *v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BA84D310(int a1)
{
  uint64_t v1;

  return sub_1BA84CF58(a1, *(id *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(uint64_t (**)(void))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t FormatPercentFillSizing.percentage.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

unint64_t FormatPercentFillSizing.spacing.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = v2;
  return sub_1BA67035C(v2);
}

uint64_t sub_1BA84D370(_QWORD *a1)
{
  return FormatPercentFillSizing.encode(to:)(a1);
}

uint64_t sub_1BA84D388(_QWORD *a1)
{
  return FormatPercentFillSpacing.encode(to:)(a1);
}

uint64_t _s8NewsFeed24FormatPercentFillSpacingO2eeoiySbAC_ACtFZ_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      v4 = 0;
      v5 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v2 != 1)
  {
    if (v3 >= 2)
    {
      sub_1BA67035C(*a2);
      sub_1BA67035C(v2);
      sub_1BA67035C(v3);
      sub_1BA67035C(v2);
      v5 = sub_1BA881EAC(v2, v3);
      sub_1BA5B18CC(v2);
      sub_1BA5B18CC(v3);
      v4 = v3;
      v3 = v2;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != 1)
  {
LABEL_8:
    sub_1BA67035C(*a2);
    sub_1BA67035C(v2);
    v5 = 0;
    v4 = v2;
    goto LABEL_10;
  }
  v4 = 1;
  v5 = 1;
LABEL_10:
  sub_1BA5B18CC(v4);
  sub_1BA5B18CC(v3);
  return v5 & 1;
}

BOOL _s8NewsFeed23FormatPercentFillSizingV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v9;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_1BA881EAC(v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    return 0;
  if (!v2)
  {
    if (!v4)
    {
      sub_1BA5B18CC(0);
      sub_1BA5B18CC(0);
      return 1;
    }
    goto LABEL_9;
  }
  if (v2 != 1)
  {
    if (v4 >= 2)
    {
      sub_1BA67035C(v4);
      sub_1BA67035C(v2);
      sub_1BA67035C(v4);
      sub_1BA67035C(v2);
      v9 = sub_1BA881EAC(v2, v4);
      sub_1BA5B18CC(v2);
      sub_1BA5B18CC(v4);
      sub_1BA5B18CC(v4);
      sub_1BA5B18CC(v2);
      return (v9 & 1) != 0;
    }
    goto LABEL_9;
  }
  if (v4 != 1)
  {
LABEL_9:
    sub_1BA67035C(v4);
    sub_1BA67035C(v2);
    sub_1BA5B18CC(v2);
    sub_1BA5B18CC(v4);
    return 0;
  }
  v7 = 1;
  sub_1BA5B18CC(1uLL);
  sub_1BA5B18CC(1uLL);
  return v7;
}

unint64_t sub_1BA84D5AC(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA84D5D0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA84D5D0()
{
  unint64_t result;

  result = qword_1EF2A8FE0;
  if (!qword_1EF2A8FE0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSizing, &type metadata for FormatPercentFillSizing);
    atomic_store(result, (unint64_t *)&qword_1EF2A8FE0);
  }
  return result;
}

uint64_t sub_1BA84D614(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA828E68, (uint64_t (*)(void))sub_1BA84D630, (uint64_t (*)(void))sub_1BA84D674);
}

unint64_t sub_1BA84D630()
{
  unint64_t result;

  result = qword_1ED3A0268;
  if (!qword_1ED3A0268)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSizing, &type metadata for FormatPercentFillSizing);
    atomic_store(result, (unint64_t *)&qword_1ED3A0268);
  }
  return result;
}

unint64_t sub_1BA84D674()
{
  unint64_t result;

  result = qword_1EF2A8FE8;
  if (!qword_1EF2A8FE8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSizing, &type metadata for FormatPercentFillSizing);
    atomic_store(result, (unint64_t *)&qword_1EF2A8FE8);
  }
  return result;
}

unint64_t sub_1BA84D6B8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA84D6DC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA84D6DC()
{
  unint64_t result;

  result = qword_1EF2A8FF0;
  if (!qword_1EF2A8FF0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSpacing, &type metadata for FormatPercentFillSpacing);
    atomic_store(result, (unint64_t *)&qword_1EF2A8FF0);
  }
  return result;
}

uint64_t sub_1BA84D720(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA8269C4, (uint64_t (*)(void))sub_1BA84D73C, (uint64_t (*)(void))sub_1BA84D780);
}

unint64_t sub_1BA84D73C()
{
  unint64_t result;

  result = qword_1ED3A0290;
  if (!qword_1ED3A0290)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSpacing, &type metadata for FormatPercentFillSpacing);
    atomic_store(result, (unint64_t *)&qword_1ED3A0290);
  }
  return result;
}

unint64_t sub_1BA84D780()
{
  unint64_t result;

  result = qword_1EF2A8FF8;
  if (!qword_1EF2A8FF8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPercentFillSpacing, &type metadata for FormatPercentFillSpacing);
    atomic_store(result, (unint64_t *)&qword_1EF2A8FF8);
  }
  return result;
}

_QWORD *sub_1BA84D7C8(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  if (v3 >= 2)
    swift_bridgeObjectRetain();
  a1[1] = v3;
  return a1;
}

_QWORD *assignWithCopy for FormatPercentFillSizing(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 1;
  v5 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v5 >= 2)
    {
      *v4 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BA84D8A8((uint64_t)(a1 + 1));
      *v4 = a2[1];
    }
  }
  else
  {
    *v4 = v5;
    if (v5 >= 2)
      swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BA84D8A8(uint64_t a1)
{
  uint64_t v2;

  sub_1BA84D8E4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BA84D8E4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED3B4010)
  {
    v2 = sub_1BA83708C();
    v4 = type metadata accessor for FormatEquation(a1, (uint64_t)&type metadata for FormatFloat, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED3B4010);
  }
}

_QWORD *assignWithTake for FormatPercentFillSizing(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a1 + 1;
  v5 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v5 >= 2)
    {
      *v4 = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BA84D8A8((uint64_t)(a1 + 1));
  }
  *v4 = v5;
  return a1;
}

ValueMetadata *type metadata accessor for FormatPercentFillSizing()
{
  return &type metadata for FormatPercentFillSizing;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedLayoutSolverOptions.IssueStripOptions.Separators(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for FeedLayoutSolverOptions.IssueStripOptions.Separators(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BA84DAF0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

ValueMetadata *type metadata accessor for FormatPercentFillSpacing()
{
  return &type metadata for FormatPercentFillSpacing;
}

uint64_t FormatArticleThumbnailImage.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FormatArticleThumbnailImage.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FormatArticleThumbnailImage() + 20));
}

BOOL static FormatArticleThumbnailImage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((MEMORY[0x1BCCDCEFC]() & 1) == 0)
    return 0;
  v4 = type metadata accessor for FormatArticleThumbnailImage();
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

uint64_t sub_1BA84DBC0()
{
  _BYTE *v0;

  if (*v0)
    return 1702521203;
  else
    return 7107189;
}

uint64_t sub_1BA84DBEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA84E7E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA84DC10()
{
  sub_1BA84DDB8();
  return sub_1BB874710();
}

uint64_t sub_1BA84DC38()
{
  sub_1BA84DDB8();
  return sub_1BB87471C();
}

uint64_t FormatArticleThumbnailImage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_1BA84E07C(0, &qword_1ED3A31C0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA84DDB8();
  sub_1BB8746C8();
  v9[15] = 0;
  sub_1BB86C67C();
  sub_1BA4A2870((unint64_t *)&unk_1ED3B04B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  sub_1BB8741AC();
  if (!v1)
  {
    type metadata accessor for FormatArticleThumbnailImage();
    v9[14] = 1;
    sub_1BB8741C4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1BA84DDB8()
{
  unint64_t result;

  result = qword_1ED3A2BE8;
  if (!qword_1ED3A2BE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D5D0, &type metadata for FormatArticleThumbnailImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2BE8);
  }
  return result;
}

uint64_t FormatArticleThumbnailImage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v26 = a2;
  v4 = sub_1BB86C67C();
  v5 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  v30 = v5;
  MEMORY[0x1E0C80A78](v4);
  v27 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA84E07C(0, &qword_1ED3A3108, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v28 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for FormatArticleThumbnailImage();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA84DDB8();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = v11;
  v25 = v13;
  v14 = v8;
  v15 = v30;
  v32 = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3B04E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
  v16 = v27;
  v17 = v28;
  v18 = v29;
  sub_1BB8740D4();
  v19 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v20 = (uint64_t)v25;
  v19(v25, v16, v18);
  v31 = 1;
  v21 = sub_1BB8740E0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  *(_QWORD *)(v20 + *(int *)(v24 + 20)) = v21;
  sub_1BA4C2DD8(v20, v26, (uint64_t (*)(_QWORD))type metadata accessor for FormatArticleThumbnailImage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BA4A2E80(v20, (uint64_t (*)(_QWORD))type metadata accessor for FormatArticleThumbnailImage);
}

void sub_1BA84E07C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA84DDB8();
    v7 = a3(a1, &type metadata for FormatArticleThumbnailImage.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BA84E0D8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3A2C08, (uint64_t (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage, (uint64_t)&protocol conformance descriptor for FormatArticleThumbnailImage);
  a1[2] = sub_1BA4A2870(&qword_1ED3A2C00, (uint64_t (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage, (uint64_t)&protocol conformance descriptor for FormatArticleThumbnailImage);
  result = sub_1BA4A2870(&qword_1EF2A9000, (uint64_t (*)(uint64_t))type metadata accessor for FormatArticleThumbnailImage, (uint64_t)&protocol conformance descriptor for FormatArticleThumbnailImage);
  a1[3] = result;
  return result;
}

BOOL sub_1BA84E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (MEMORY[0x1BCCDCEFC]() & 1) != 0 && *(_QWORD *)(a1 + *(int *)(a3 + 20)) == *(_QWORD *)(a2 + *(int *)(a3 + 20));
}

uint64_t sub_1BA84E1A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatArticleThumbnailImage.init(from:)(a1, a2);
}

uint64_t sub_1BA84E1B4(_QWORD *a1)
{
  return FormatArticleThumbnailImage.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatArticleThumbnailImage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86C67C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t _s6ActionOwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for FormatAbsoluteURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FormatArticleThumbnailImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatArticleThumbnailImage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA84E400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FormatArticleThumbnailImage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA84E448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FormatArticleThumbnailImage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA84E4D4 + 4 * byte_1BB87D445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA84E508 + 4 * byte_1BB87D440[v4]))();
}

uint64_t sub_1BA84E508(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA84E510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA84E518);
  return result;
}

uint64_t sub_1BA84E524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA84E52CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA84E530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA84E538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatArticleThumbnailImage.CodingKeys()
{
  return &type metadata for FormatArticleThumbnailImage.CodingKeys;
}

unint64_t sub_1BA84E558()
{
  unint64_t result;

  result = qword_1EF2A9008;
  if (!qword_1EF2A9008)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D5A8, &type metadata for FormatArticleThumbnailImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9008);
  }
  return result;
}

unint64_t sub_1BA84E5A0()
{
  unint64_t result;

  result = qword_1ED3A2BF8;
  if (!qword_1ED3A2BF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D518, &type metadata for FormatArticleThumbnailImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2BF8);
  }
  return result;
}

unint64_t sub_1BA84E5E8()
{
  unint64_t result;

  result = qword_1ED3A2BF0;
  if (!qword_1ED3A2BF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D540, &type metadata for FormatArticleThumbnailImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2BF0);
  }
  return result;
}

id sub_1BA84E62C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  sub_1BA84E8B0();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FormatArticleThumbnailImage();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA84E8B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_1BA4A2E80(a1, (uint64_t (*)(_QWORD))sub_1BA84E8B0);
    sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BA84E8B0);
    return 0;
  }
  else
  {
    sub_1BA84E904((uint64_t)v6, (uint64_t)v10);
    v12 = (void *)sub_1BB86C58C();
    v13 = objc_msgSend(a2, sel_assetHandleForURL_lifetimeHint_, v12, 0);

    v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v15 = (void *)sub_1BB86C58C();
    v11 = objc_msgSend(v14, sel_initWithURL_size_assetHandle_, v15, *(_QWORD *)&v10[*(int *)(v7 + 20)], v13);

    sub_1BA4A2E80(a1, (uint64_t (*)(_QWORD))sub_1BA84E8B0);
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatArticleThumbnailImage);
  }
  return v11;
}

uint64_t sub_1BA84E7E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_1BA84E8B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3CBE48)
  {
    type metadata accessor for FormatArticleThumbnailImage();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3CBE48);
  }
}

uint64_t sub_1BA84E904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatArticleThumbnailImage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DebugFormatBindingExportResponse()
{
  return &type metadata for DebugFormatBindingExportResponse;
}

uint64_t sub_1BA84E958()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1BA84E970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BA84EA04()
{
  sub_1BA84EBCC();
  return sub_1BB874710();
}

uint64_t sub_1BA84EA2C()
{
  sub_1BA84EBCC();
  return sub_1BB87471C();
}

uint64_t sub_1BA84EA54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_1BA84EB74();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA84EBCC();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v10 = sub_1BB874098();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  return result;
}

void sub_1BA84EB74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A9010)
  {
    sub_1BA84EBCC();
    v0 = sub_1BB874104();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A9010);
  }
}

unint64_t sub_1BA84EBCC()
{
  unint64_t result;

  result = qword_1EF2A9018;
  if (!qword_1EF2A9018)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D740, &type metadata for DebugFormatBindingExportResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9018);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DebugFormatBindingExportResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BA84EC50 + 4 * byte_1BB87D620[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BA84EC70 + 4 * byte_1BB87D625[v4]))();
}

_BYTE *sub_1BA84EC50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BA84EC70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA84EC78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA84EC80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BA84EC88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BA84EC90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatBindingExportResponse.CodingKeys()
{
  return &type metadata for DebugFormatBindingExportResponse.CodingKeys;
}

unint64_t sub_1BA84ECB0()
{
  unint64_t result;

  result = qword_1EF2A9020;
  if (!qword_1EF2A9020)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D718, &type metadata for DebugFormatBindingExportResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9020);
  }
  return result;
}

unint64_t sub_1BA84ECF8()
{
  unint64_t result;

  result = qword_1EF2A9028;
  if (!qword_1EF2A9028)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D688, &type metadata for DebugFormatBindingExportResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9028);
  }
  return result;
}

unint64_t sub_1BA84ED40()
{
  unint64_t result;

  result = qword_1EF2A9030;
  if (!qword_1EF2A9030)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87D6B0, &type metadata for DebugFormatBindingExportResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9030);
  }
  return result;
}

uint64_t sub_1BA84ED84@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for NoopFeedItemDimmingEvaluator, (uint64_t)&off_1E72CD678, a1);
}

uint64_t sub_1BA84ED98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, qword_1ED3D4838);
  result = sub_1BB86DF18();
  if (!v14)
  {
    __break(1u);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D2EA8);
  result = sub_1BB86DF18();
  if (!v12)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&qword_1ED3D3990);
  result = sub_1BB86DF48();
  if (!v10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D3B80);
  result = sub_1BB86DF48();
  if (v8)
  {
    v5 = type metadata accessor for CategoryViewRenderer();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 176) = 0;
    *(_BYTE *)(v6 + 184) = 1;
    sub_1BA4CECCC(&v13, v6 + 16);
    sub_1BA4CECCC(&v11, v6 + 56);
    sub_1BA4CECCC(&v9, v6 + 96);
    result = sub_1BA4CECCC(&v7, v6 + 136);
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for CategoryViewRenderer;
    *a2 = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1BA84EF98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA4AD3F0(a1, (uint64_t (*)(_QWORD))type metadata accessor for CategoryViewV2Styler, (uint64_t)&off_1E733F600, a2, 12.0);
}

uint64_t sub_1BA84EFB0(_QWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, qword_1ED3D4838);
  sub_1BB86DF18();
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x1BA84F054);
  }
  type metadata accessor for CategoryViewLayoutAttributesFactory();
  v1 = swift_allocObject();
  sub_1BA4CECCC(&v3, v1 + 16);
  return v1;
}

uint64_t sub_1BA84F074@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA84F508(a1, (uint64_t (*)(_QWORD))type metadata accessor for IssueCoverViewLayoutAttributesFactory, (uint64_t)&protocol witness table for IssueCoverViewLayoutAttributesFactory, a2);
}

uint64_t sub_1BA84F088()
{
  type metadata accessor for IssueCoverViewLayoutAttributesFactory();
  return swift_allocObject();
}

uint64_t sub_1BA84F0A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD v25[5];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4120);
  result = sub_1BB86DF48();
  if (!v31)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D2EA8);
  result = sub_1BB86DF18();
  if (!v29)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for FeedItemRendererTool();
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for LayeredMediaViewProvider();
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4218);
  result = sub_1BB86DF48();
  if (!v27)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v24 = a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for LayeredMediaViewRenderer();
  result = sub_1BB86DF3C();
  if (result)
  {
    v7 = result;
    v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
    v9 = MEMORY[0x1E0C80A78](v8);
    v11 = (_QWORD *)((char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, double))(v12 + 16))(v11, v9);
    v13 = *v11;
    v14 = type metadata accessor for ArticleThumbnailViewStyler();
    v25[3] = v14;
    v25[4] = &off_1E73144D0;
    v25[0] = v13;
    v15 = type metadata accessor for ArticleThumbnailViewRenderer();
    v16 = swift_allocObject();
    v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v14);
    v18 = MEMORY[0x1E0C80A78](v17);
    v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, double))(v21 + 16))(v20, v18);
    v22 = *v20;
    *(_QWORD *)(v16 + 80) = v14;
    *(_QWORD *)(v16 + 88) = &off_1E73144D0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = v22;
    sub_1BA4CECCC(&v28, v16 + 96);
    *(_QWORD *)(v16 + 136) = v5;
    *(_QWORD *)(v16 + 144) = v6;
    sub_1BA4CECCC(&v26, v16 + 152);
    *(_QWORD *)(v16 + 192) = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v23 = v24;
    v24[3] = v15;
    v23[4] = (uint64_t)&off_1E7289270;
    *v23 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1BA84F3E0(uint64_t *a1, _QWORD *a2)
{
  return sub_1BA519498(a1, a2);
}

uint64_t sub_1BA84F3F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D39E0);
  result = sub_1BB86DF48();
  if (v11)
  {
    sub_1BA4CECCC(&v10, (uint64_t)v12);
    sub_1BA4C010C((uint64_t)v12, (uint64_t)&v10);
    v4 = v13;
    v5 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 32))(v9, v4, v5);
    v6 = type metadata accessor for ArticleThumbnailViewStyler();
    v7 = swift_allocObject();
    v8 = v9[1];
    *(_OWORD *)(v7 + 16) = v9[0];
    *(_OWORD *)(v7 + 32) = v8;
    sub_1BA4CECCC(&v10, v7 + 48);
    a2[3] = v6;
    a2[4] = (uint64_t)&off_1E73144D0;
    *a2 = v7;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA84F4F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA84F508(a1, (uint64_t (*)(_QWORD))type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory, (uint64_t)&protocol witness table for ArticleThumbnailViewLayoutAttributesFactory, a2);
}

uint64_t sub_1BA84F508@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = a2(0);
  result = sub_1BB86DF3C();
  if (result)
  {
    a4[3] = v7;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA84F584()
{
  type metadata accessor for ArticleThumbnailViewLayoutAttributesFactory();
  return swift_allocObject();
}

id sub_1BA84F5A4()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PuzzleProcessTerminationPolicyDecider()), sel_init);
}

uint64_t sub_1BA84F5C8(_QWORD *a1)
{
  void *v2;
  uint64_t result;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for PuzzleEmbedViewController();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v2 = (void *)sub_1BB86DF0C();
  result = swift_bridgeObjectRelease();
  if (v2)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA505288(0, (unint64_t *)&unk_1ED3CDE00);
    result = sub_1BB86DF48();
    if (v6)
    {
      v4 = objc_allocWithZone((Class)type metadata accessor for FormatPuzzleEmbedViewController());
      v5 = sub_1BA9ECC64(v2, v6, v7);

      swift_unknownObjectRelease();
      return (uint64_t)v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA84F704(void **a1, _QWORD *a2)
{
  void *v3;
  uint64_t result;
  uint64_t ObjectType;
  void (*v6)(void *, _UNKNOWN **, uint64_t, uint64_t);
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1EF2A9078);
  result = sub_1BB86DF48();
  if (v9)
  {
    ObjectType = swift_getObjectType();
    v6 = *(void (**)(void *, _UNKNOWN **, uint64_t, uint64_t))(v10 + 40);
    v7 = v3;
    v6(v3, &protocol witness table for FormatPuzzleEmbedViewController, ObjectType, v10);
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    sub_1BB86DF48();
    swift_getObjectType();
    v8 = 1;
    sub_1BA9ECAC0(v9, (uint64_t)&v8);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA84F844(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3C9BD0);
  result = sub_1BB86DF48();
  v3 = v14[0];
  if (!v14[0])
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = v14[1];
  ObjectType = swift_getObjectType();
  *(_BYTE *)(v14[0] + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED39DAB0);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED39C028);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1EF2A9050);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CDE10);
  result = sub_1BB86DF48();
  if (!v15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v14[0] = v3;
  v14[3] = ObjectType;
  v14[4] = *(_QWORD *)(v4 + 8);
  v9 = v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9900);
  swift_unknownObjectRetain();
  result = sub_1BB86DF3C();
  if (result)
  {
    v10 = result;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E00]), sel_init);
    objc_msgSend(v11, sel_setKeyboardType_, 13);
    objc_msgSend(v11, sel_setHidePrediction_, 1);
    objc_msgSend(v11, sel_setForceDisableDictation_, 1);
    objc_msgSend(v11, sel_setReturnKeyType_, 0);
    v12 = (char *)objc_allocWithZone((Class)type metadata accessor for PuzzleEmbedViewController());
    swift_unknownObjectRetain_n();
    v13 = sub_1BA8538BC(v6, v7, v8, v3, v9, v15, v16, v3, v10, v11, v12);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_unknownObjectRelease();
    return (uint64_t)v13;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_1BA84FB8C(_QWORD *a1)
{
  char *result;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3C9BD0);
  result = (char *)sub_1BB86DF48();
  v3 = v25[0];
  if (!v25[0])
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = (char *)v25[1];
  *(_BYTE *)(v25[0] + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_configuration) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED39DAB0);
  result = (char *)sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED39C028);
  result = (char *)sub_1BB86DF3C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = (uint64_t)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1EF2A9050);
  result = (char *)sub_1BB86DF3C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v22 = result;
  v23 = v6;
  v7 = v5;
  v24 = v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CDE10);
  result = (char *)sub_1BB86DF48();
  if (!v28)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = v29;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CA748);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BB86DF18();
  result = (char *)swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = v28;
  v20 = v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9900);
  result = (char *)sub_1BB86DF3C();
  if (result)
  {
    v8 = (uint64_t)result;
    v9 = type metadata accessor for PuzzleEmbedViewController();
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E00]), sel_init);
    objc_msgSend(v10, sel_setKeyboardType_, 13);
    objc_msgSend(v10, sel_setHidePrediction_, 1);
    objc_msgSend(v10, sel_setForceDisableDictation_, 1);
    objc_msgSend(v10, sel_setReturnKeyType_, 1);
    v11 = v26;
    v12 = v27;
    v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
    v18[1] = v18;
    v14 = *(_QWORD *)(v11 - 8);
    v15 = MEMORY[0x1E0C80A78](v13);
    v17 = (char *)v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v14 + 16))(v17, v15);
    v24 = sub_1BB1BC000(v7, v23, (uint64_t)v22, v20, (uint64_t)v24, v19, v21, (uint64_t)v17, v8, v10, v9, v11, v12);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v11);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    return v24;
  }
LABEL_15:
  __break(1u);
  return result;
}

void *sub_1BA84FFAC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  void *result;

  v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1ED39C038);
  result = (void *)sub_1BB86DF3C();
  if (result)
  {
    objc_msgSend(result, sel_setPresentingViewController_, v2);
    return (void *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA85002C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9900);
  result = sub_1BB86DF3C();
  if (result)
  {
    v5 = result;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA4EFE00(0, (unint64_t *)&unk_1ED3B98B0);
    result = sub_1BB86DF3C();
    if (result)
    {
      v6 = result;
      v7 = type metadata accessor for PuzzleAccessProvider();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v5;
      *(_QWORD *)(result + 24) = v6;
      a2[3] = v7;
      a2[4] = (uint64_t)&protocol witness table for PuzzleAccessProvider;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA850114@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t ObjCClassFromMetadata;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, qword_1ED3CBC98);
  result = sub_1BB86DF48();
  v5 = v11;
  if (v11)
  {
    v6 = v12;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA505288(0, &qword_1ED3B0980);
    result = sub_1BB86DF48();
    if (v10)
    {
      type metadata accessor for PuzzleComponentsViewProvider();
      v7 = (_QWORD *)swift_allocObject();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v7[2] = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v7[3] = v5;
      v7[4] = v6;
      result = sub_1BA4CECCC(&v9, (uint64_t)(v7 + 5));
      *a2 = v7;
      a2[1] = &protocol witness table for PuzzleComponentsViewProvider;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA850260@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CA750);
  result = sub_1BB86DF48();
  if (v6)
  {
    type metadata accessor for PuzzleComponentsStyler();
    v4 = swift_allocObject();
    result = sub_1BA4CECCC(&v5, v4 + 16);
    *a2 = v4;
    a2[1] = (uint64_t)&protocol witness table for PuzzleComponentsStyler;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1BA850308@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = type metadata accessor for PuzzleHintFormatter();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BB87D790;
  type metadata accessor for PuzzleTagConverter();
  result = (_QWORD *)swift_allocObject();
  result[2] = 23390;
  result[3] = 0xE200000000000000;
  result[5] = 0;
  result[6] = 0;
  result[4] = 0;
  *(_QWORD *)(v3 + 32) = result;
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for PuzzleHintFormatter;
  *a1 = v3;
  return result;
}

uint64_t sub_1BA850390@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA8516AC(MEMORY[0x1E0DB71B0], MEMORY[0x1E0DB71A8], MEMORY[0x1E0DB71A0], a1);
}

uint64_t sub_1BA8503AC()
{
  sub_1BA505288(0, &qword_1ED3C9BD0);
  sub_1BB86E5E4();
  swift_release();
  sub_1BA505288(0, &qword_1ED3CA748);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BB86E5E4();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BA505288(0, &qword_1ED3CDE10);
  sub_1BB86E5E4();
  return swift_release();
}

uint64_t sub_1BA8504C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _QWORD v16[5];
  _BYTE v17[24];
  uint64_t v18;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B98F0);
  result = sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D5790);
  result = sub_1BB86DF48();
  if (!v18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D59E0);
  result = sub_1BB86DF48();
  if (!v16[3])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D5F70);
  result = sub_1BB86DF48();
  if (!v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED3CF970);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v6 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9900);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3C4260);
  result = sub_1BB86DF48();
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3C4300);
  result = sub_1BB86DF48();
  if (v10)
  {
    v8 = objc_allocWithZone((Class)type metadata accessor for PuzzleDataManager());
    v9 = sub_1BA9CEE14(v5, (uint64_t)v17, v16, (uint64_t)v14, v6, v7, 1, (uint64_t)v12, v10, v11);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    *a2 = v9;
    a2[1] = &off_1E7284280;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1BA8507D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D59E0);
  result = sub_1BB86DF48();
  if (v9)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9900);
    result = sub_1BB86DF3C();
    if (result)
    {
      v5 = result;
      v6 = type metadata accessor for PuzzleTeaserAccessArbiter();
      v7 = swift_allocObject();
      result = sub_1BA4CECCC(&v8, v7 + 16);
      *(_QWORD *)(v7 + 56) = v5;
      a2[3] = v6;
      a2[4] = (uint64_t)&off_1E7289A88;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1BA8508E0@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PuzzleProgressMessageHandler()), sel_init);
  *a1 = result;
  a1[1] = &off_1E727B500;
  return result;
}

uint64_t sub_1BA850920@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3C48D8);
  result = sub_1BB86DF48();
  if (v6)
  {
    v4 = type metadata accessor for LiveActivityWebEmbedDatastoreManager();
    swift_allocObject();
    result = (uint64_t)sub_1BA50A9BC((uint64_t)v5);
    a2[3] = v4;
    a2[4] = (uint64_t)&off_1E7346668;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA8509CC(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  _BYTE v23[24];
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED39DAB0);
  result = sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED39C028);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3B8A60);
  result = sub_1BB86DF48();
  if (!v30)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3D4B48, (uint64_t (*)(uint64_t))type metadata accessor for FormatPictureInPictureModel, MEMORY[0x1E0DB3938]);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3CCD70);
  result = sub_1BB86DF48();
  if (!v28)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3CF2E0);
  result = sub_1BB86DF48();
  if (!v26)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CA800);
  result = sub_1BB86DF48();
  if (v24)
  {
    v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    v7 = MEMORY[0x1E0C80A78](v6);
    v9 = (_QWORD *)((char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, double))(v10 + 16))(v9, v7);
    v11 = *v9;
    v21 = type metadata accessor for WebEmbedConfigurationProvider();
    v22 = &off_1E7314DF0;
    v20[0] = v11;
    v12 = (char *)objc_allocWithZone((Class)type metadata accessor for WebEmbedViewController(0));
    v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v20, v21);
    v14 = MEMORY[0x1E0C80A78](v13);
    v16 = (_QWORD *)((char *)&v20[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, double))(v17 + 16))(v16, v14);
    v18 = sub_1BA854114(v3, v4, *v16, v5, (uint64_t)v27, (uint64_t)v25, (uint64_t)v23, v12);

    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return (uint64_t)v18;
  }
LABEL_15:
  __break(1u);
  return result;
}

void *sub_1BA850D5C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  void *result;
  void *v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[4];

  v3 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1ED39C038);
  result = (void *)sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  objc_msgSend(result, sel_setPresentingViewController_, v3);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA49A224(0, (unint64_t *)&unk_1ED39BFF0);
  result = (void *)sub_1BB86DF3C();
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = result;
  objc_msgSend(result, sel_setDelegate_, *(_QWORD *)(v3 + OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_delegate));
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  sub_1BA505288(0, &qword_1ED3B0800);
  result = (void *)sub_1BB86DF48();
  if (v7)
  {
    sub_1BA4CECCC(&v6, (uint64_t)v8);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    sub_1BA50AD30(&qword_1ED3ACA28, 255, type metadata accessor for WebEmbedViewController, (uint64_t)&protocol conformance descriptor for WebEmbedViewController);
    sub_1BB86E5F0();
    swift_unknownObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1BA850F1C(uint64_t a1)
{
  __int128 v2[2];

  sub_1BA4C010C(a1, (uint64_t)v2);
  type metadata accessor for WebEmbedManager();
  swift_allocObject();
  return WebEmbedManager.init(resolver:)(v2);
}

void *sub_1BA850F64@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *result;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _BYTE v21[16];

  v4 = sub_1BB86C9DC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BB86C994();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED3B0410);
  result = (void *)sub_1BB86DF3C();
  if (result)
  {
    v9 = objc_msgSend(result, sel_contentStoreFrontID);
    swift_unknownObjectRelease();
    if (v9)
    {
      v11 = sub_1BB8729A0();
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    if (qword_1ED3D5158 != -1)
      swift_once();
    sub_1BA50AD30(&qword_1ED3C77D0, v10, (uint64_t (*)(uint64_t))type metadata accessor for RendererAssembly, (uint64_t)&unk_1BB87D7C4);
    sub_1BB86D210();
    v14 = 8 * v21[15];
    v15 = *(_QWORD *)&aProductistagin[v14];
    v16 = *(_QWORD *)&aOn_1[v14];
    v17 = type metadata accessor for WebEmbedConfigurationProvider();
    v18 = swift_allocObject();
    result = (void *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_locale, v7, v4);
    v19 = (uint64_t *)(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_storeFront);
    *v19 = v11;
    v19[1] = v13;
    v20 = (_QWORD *)(v18 + OBJC_IVAR____TtC8NewsFeed29WebEmbedConfigurationProvider_contentEnvironment);
    *v20 = v15;
    v20[1] = v16;
    a2[3] = v17;
    a2[4] = (uint64_t)&off_1E7314DF0;
    *a2 = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA851178(_QWORD *a1)
{
  uint64_t result;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4C40);
  result = sub_1BB86DF48();
  if (v4)
  {
    type metadata accessor for ShareAttributionViewReuseFactory();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEE9E0];
    sub_1BA4CECCC(&v3, v2 + 16);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA851220()
{
  type metadata accessor for FormatShareAttributionNodeRenderer();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for ShareAttributionViewReuseManager();
  sub_1BB86E5D8();
  return swift_release();
}

uint64_t sub_1BA851288()
{
  type metadata accessor for FormatShareAttributionNodeRenderer();
  return swift_allocObject();
}

uint64_t sub_1BA8512A8(_QWORD *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for ShareAttributionViewReuseFactory();
  result = sub_1BB86DF3C();
  if (result)
  {
    v2 = result;
    type metadata accessor for ShareAttributionViewReuseManager();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 24) = v2;
    sub_1BA854984(0, &qword_1ED3BBF58, (uint64_t (*)(uint64_t))type metadata accessor for ShareAttributionViewReuseFactory, &qword_1ED3BFDF0, (uint64_t)&protocol conformance descriptor for ShareAttributionViewReuseFactory);
    swift_allocObject();
    swift_retain();
    *(_QWORD *)(v3 + 16) = sub_1BB870204();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA851374@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA8513AC(a1, (void (*)(_QWORD))MEMORY[0x1E0DB9060], (void (*)(void))MEMORY[0x1E0DB9058], a2);
}

uint64_t sub_1BA851390@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA8513AC(a1, (void (*)(_QWORD))MEMORY[0x1E0DB7478], (void (*)(void))MEMORY[0x1E0DB7470], a2);
}

uint64_t sub_1BA8513AC@<X0>(_QWORD *a1@<X0>, void (*a2)(_QWORD)@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED3D2EC8);
  result = sub_1BB86DF3C();
  if (result)
  {
    a2(0);
    swift_allocObject();
    a3();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_1BA505288(0, &qword_1ED3D2EC0);
    result = sub_1BB86DF48();
    if (v11)
    {
      v9 = sub_1BB86F484();
      swift_allocObject();
      result = sub_1BB86F478();
      v10 = MEMORY[0x1E0DB68A0];
      a4[3] = v9;
      a4[4] = v10;
      *a4 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA8514F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, &qword_1ED3D2EC8);
  result = sub_1BB86DF3C();
  if (result)
  {
    type metadata accessor for StubThumbnailProcessor();
    swift_allocObject();
    sub_1BA50AD30(&qword_1EF2A9040, 255, (uint64_t (*)(uint64_t))type metadata accessor for StubThumbnailProcessor, (uint64_t)&protocol conformance descriptor for StubThumbnailProcessor);
    objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubImageDownloader()), sel_init);
    sub_1BA50AD30(&qword_1EF2A9048, 255, (uint64_t (*)(uint64_t))type metadata accessor for StubImageDownloader, (uint64_t)&protocol conformance descriptor for StubImageDownloader);
    v4 = sub_1BB86F484();
    swift_allocObject();
    result = sub_1BB86F478();
    v5 = MEMORY[0x1E0DB68A0];
    a2[3] = v4;
    a2[4] = v5;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA851644@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA58BAF0(a1, (uint64_t (*)(uint64_t))type metadata accessor for PublisherLogoProcessor, (unint64_t *)&unk_1ED3CA238, (uint64_t)&protocol conformance descriptor for PublisherLogoProcessor, a2);
}

uint64_t sub_1BA851660@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA58BAF0(a1, (uint64_t (*)(uint64_t))type metadata accessor for IssueCoverImageProcessor, &qword_1ED3C2748, (uint64_t)&protocol conformance descriptor for IssueCoverImageProcessor, a2);
}

uint64_t sub_1BA85167C(uint64_t a1)
{
  return sub_1BA4CD098(a1, MEMORY[0x1E0DB7EA0], MEMORY[0x1E0DB7E98]);
}

uint64_t sub_1BA851690@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA8516AC((uint64_t (*)(_QWORD))MEMORY[0x1E0DB7838], MEMORY[0x1E0DB7830], MEMORY[0x1E0DB7828], a1);
}

uint64_t sub_1BA8516AC@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = a1(0);
  swift_allocObject();
  result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t sub_1BA851708(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3B09F0);
  result = sub_1BB86DF48();
  if (!v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D2EB8);
  result = sub_1BB86DF48();
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB86DC0C();
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B97D0);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = (void *)result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1ED3BA610);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D38C0);
  result = sub_1BB86DF48();
  if (v6[3])
  {
    type metadata accessor for FeedItemRendererTool();
    swift_allocObject();
    v5 = sub_1BA4DFB40((uint64_t)v9, v7, v8, v3, (uint64_t)v6);
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

    return v5;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1BA851958@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory, (uint64_t)&off_1E72EF3E8, a1);
}

uint64_t sub_1BA85196C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4428);
  result = sub_1BB86DF48();
  if (!v34)
  {
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4158);
  result = sub_1BB86DF48();
  if (!v32)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D0108);
  result = sub_1BB86DF48();
  if (!v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D2EB8);
  result = sub_1BB86DF48();
  if (!v27[5])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v5 = sub_1BB86DC0C();
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v27[3] = v5;
  v27[4] = sub_1BA50AD30((unint64_t *)&qword_1ED3B0750, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CF8638], (uint64_t)&protocol conformance descriptor for Tracker);
  v27[0] = v6;
  sub_1BB8709E4();
  swift_allocObject();
  v7 = sub_1BB8709CC();
  v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v34);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v12 + 16))(v11, v9);
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v31, v32);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (_QWORD *)((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v17 + 16))(v16, v14);
  v18 = sub_1BA853764(*v11, *v16, &v28, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D3B80);
  result = sub_1BB86DF48();
  v19 = v34;
  if (!v34)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v20 = v35;
  __swift_project_boxed_opaque_existential_1(&v33, v34);
  v21 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v20[12])(v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  if ((v21 & 1) != 0)
  {
    v22 = type metadata accessor for NoopHiddenContentEffectRenderer();
    v23 = swift_allocObject();
    v24 = &off_1E730A658;
  }
  else
  {
    v22 = type metadata accessor for HiddenContentPlacardViewRenderer();
    v23 = swift_retain();
    v24 = &off_1E72FC9D8;
  }
  v34 = v22;
  v35 = v24;
  *(_QWORD *)&v33 = v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_retain();
  result = sub_1BB86DF48();
  if (!v32)
    goto LABEL_20;
  v29 = type metadata accessor for HiddenContentPlacardViewRenderer();
  v30 = &off_1E72FC9D8;
  *(_QWORD *)&v28 = v18;
  v25 = type metadata accessor for SwitchHiddenContentEffectRenderer();
  v26 = swift_allocObject();
  sub_1BB86D294();
  swift_retain();
  sub_1BB86D27C();
  if (qword_1ED3C20B0 != -1)
    swift_once();
  sub_1BB86D270();
  swift_release();
  *(_QWORD *)(v26 + 136) = v27[0];
  sub_1BA4CECCC(&v33, v26 + 16);
  sub_1BA4CECCC(&v28, v26 + 56);
  sub_1BA4CECCC(&v31, v26 + 96);
  swift_release();
  a2[3] = v25;
  a2[4] = (uint64_t)&off_1E730A678;
  result = swift_release();
  *a2 = v26;
  return result;
}

uint64_t sub_1BA851E48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D39E0);
  result = sub_1BB86DF48();
  if (v7)
  {
    v4 = type metadata accessor for HiddenContentPlacardViewStyler();
    v5 = swift_allocObject();
    result = sub_1BA4CECCC(&v6, v5 + 16);
    a2[3] = v4;
    a2[4] = (uint64_t)&off_1E72E5750;
    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA851EF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13[2];

  sub_1BA4C010C((uint64_t)a1, (uint64_t)v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3BC890);
  result = sub_1BB86DF48();
  if (!v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3D4B48, (uint64_t (*)(uint64_t))type metadata accessor for FormatPictureInPictureModel, MEMORY[0x1E0DB3938]);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3B0800);
  result = sub_1BB86DF48();
  if (!v10)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3B0980);
  result = sub_1BB86DF48();
  if (!v8)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  type metadata accessor for FormatVideoPlayerReuseManager();
  v6 = (_QWORD *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  if (qword_1ED3CE4D8 != -1)
    swift_once();
  v6[25] = qword_1ED476980;
  sub_1BA4CECCC(v13, (uint64_t)(v6 + 4));
  sub_1BA4CECCC(&v11, (uint64_t)(v6 + 9));
  v6[14] = v5;
  sub_1BA4CECCC(&v9, (uint64_t)(v6 + 15));
  sub_1BA4CECCC(&v7, (uint64_t)(v6 + 20));
  *a2 = v6;
  a2[1] = &off_1E7302F28;
  return swift_retain();
}

uint64_t sub_1BA85211C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for FeedVideoAdProviderFactory, (uint64_t)&off_1E7346A60, a1);
}

uint64_t sub_1BA852130(uint64_t a1, unint64_t *a2)
{
  sub_1BA505288(0, a2);
  sub_1BB86E5E4();
  return swift_release();
}

uint64_t sub_1BA852174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for FormatVideoPlayerCoordinator();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = 0;
  result = swift_unknownObjectWeakInit();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1E73030B0;
  *a1 = v3;
  return result;
}

uint64_t sub_1BA8521D4(uint64_t a1)
{
  return sub_1BA852130(a1, &qword_1ED3CA800);
}

uint64_t sub_1BA8521F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BA49DEE4((uint64_t (*)(_QWORD))type metadata accessor for WebEmbedCoordinator, (uint64_t)&off_1E7279020, a1);
}

uint64_t sub_1BA852204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_1BB86E7E8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA834708(0, v4, v5, v6);
  sub_1BB86E5D8();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DB4A08], v0);
  sub_1BB86DCD8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1BA8522CC(_QWORD *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  objc_class *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  objc_super v14;
  _BYTE v15[24];
  uint64_t v16;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&qword_1ED3D3990);
  result = sub_1BB86DF48();
  if (v16)
  {
    sub_1BA834708(0, v2, v3, v4);
    v6 = v5;
    v7 = (char *)objc_allocWithZone(v5);
    v8 = &v7[qword_1EF2C4690];
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    sub_1BA4C010C((uint64_t)v15, (uint64_t)&v7[qword_1EF2C4698]);
    v14.receiver = v7;
    v14.super_class = v6;
    v9 = (char *)objc_msgSendSuper2(&v14, sel_init);
    v10 = *(_QWORD *)&v9[qword_1EF2C4698 + 24];
    v11 = *(_QWORD *)&v9[qword_1EF2C4698 + 32];
    __swift_project_boxed_opaque_existential_1(&v9[qword_1EF2C4698], v10);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v13 = v9;
    v12(v9, v10, v11);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA8523DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B98F0);
  result = sub_1BB86DF3C();
  if (result)
  {
    v4 = result;
    v5 = type metadata accessor for PuzzleRankProvider();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    a2[3] = v5;
    a2[4] = (uint64_t)&off_1E734ADB8;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BA852470@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B98F0);
  result = sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3C4250);
  result = sub_1BB86DF48();
  if (!v11)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D59E0);
  result = sub_1BB86DF48();
  if (v9)
  {
    v6 = type metadata accessor for PuzzleNavigationBarThemeProvider();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    sub_1BA4CECCC(&v10, v7 + 24);
    result = sub_1BA4CECCC(&v8, v7 + 64);
    a2[3] = v6;
    a2[4] = (uint64_t)&off_1E729FE48;
    *a2 = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1BA8525D4()
{
  sub_1BA505288(0, &qword_1ED3B86F0);
  sub_1BB86E5E4();
  swift_release();
  type metadata accessor for DebugCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for WebEmbedDatastoreRadarCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for WebEmbedDataSourceRadarCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for ResetPuzzleProgressCommandHandler();
  sub_1BB86E5D8();
  swift_release();
  type metadata accessor for SetPuzzleStreakEligibleHandler();
  sub_1BB86E5D8();
  return swift_release();
}

uint64_t sub_1BA852740@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  objc_class *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D39E0);
  result = sub_1BB86DF48();
  if (!v18)
  {
    __break(1u);
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D3D50);
  result = sub_1BB86DF48();
  if (!v15)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D3F60);
  result = sub_1BB86DF48();
  if (!v13)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4108);
  result = sub_1BB86DF48();
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4110);
  result = sub_1BB86DF48();
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3D4118);
  result = sub_1BB86DF48();
  if (v7)
  {
    v5 = (objc_class *)type metadata accessor for DebugGroupLayoutViewFactory();
    v6 = objc_allocWithZone(v5);
    result = (uint64_t)sub_1BB6D2EDC((uint64_t)v17, v15, v16, v13, v14, v11, v12, v9, v10, v7, v8);
    a2[3] = (uint64_t)v5;
    a2[4] = (uint64_t)&off_1E73356D0;
    *a2 = result;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1BA8529D0(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15[2];

  sub_1BA4C010C((uint64_t)a1, (uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for FeedFontManager();
  result = sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B97D0);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA4EFE00(0, (unint64_t *)&unk_1ED3BA610);
  result = sub_1BB86DF3C();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D38C0);
  result = sub_1BB86DF48();
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3CCD80);
  result = sub_1BB86DF48();
  if (!v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, &qword_1ED3B0980);
  result = sub_1BB86DF48();
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA505288(0, (unint64_t *)&unk_1ED3D3B80);
  result = sub_1BB86DF48();
  if (v8)
  {
    type metadata accessor for DebugCommandHandler();
    v6 = (_QWORD *)swift_allocObject();
    sub_1BA4CECCC(v15, (uint64_t)(v6 + 2));
    v6[7] = v3;
    v6[8] = v4;
    v6[9] = v5;
    sub_1BA4CECCC(&v13, (uint64_t)(v6 + 10));
    sub_1BA4CECCC(&v11, (uint64_t)(v6 + 15));
    sub_1BA4CECCC(&v9, (uint64_t)(v6 + 20));
    sub_1BA4CECCC(&v7, (uint64_t)(v6 + 25));
    return (uint64_t)v6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1BA852C7C(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, (unint64_t *)&unk_1ED3CCD70, (uint64_t)&protocol descriptor for WebEmbedDataSourceManagerType, (void (*)(_QWORD))type metadata accessor for WebEmbedDatastoreRadarCommandHandler, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA852CA0(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, (unint64_t *)&unk_1ED3CCD70, (uint64_t)&protocol descriptor for WebEmbedDataSourceManagerType, (void (*)(_QWORD))type metadata accessor for WebEmbedDataSourceRadarCommandHandler, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA852CC4(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, (unint64_t *)&unk_1ED3CCD70, (uint64_t)&protocol descriptor for WebEmbedDataSourceManagerType, (void (*)(_QWORD))type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA852CE8()
{
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  return swift_allocObject();
}

uint64_t sub_1BA852D08(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, (unint64_t *)&unk_1ED3D59E0, (uint64_t)&protocol descriptor for PuzzleHistoryServiceType, (void (*)(_QWORD))type metadata accessor for ResetPuzzleProgressCommandHandler, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA852D2C(_QWORD *a1)
{
  return sub_1BA50BCE0(a1, (unint64_t *)&unk_1ED3D59E0, (uint64_t)&protocol descriptor for PuzzleHistoryServiceType, (void (*)(_QWORD))type metadata accessor for SetPuzzleStreakEligibleHandler, (void (*)(_BYTE *, uint64_t))sub_1BA4CECCC);
}

uint64_t sub_1BA852D50(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for DebugCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  swift_getObjectType();
  if (qword_1ED3BA8A8 != -1)
    swift_once();
  sub_1BA50AD30((unint64_t *)&unk_1ED3B59B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DebugCommandHandler, (uint64_t)&unk_1BB8E9DA0);
  sub_1BB86FF58();
  if (qword_1ED3BA8B0 != -1)
    swift_once();
  sub_1BB86FF58();
  if (qword_1ED3BA898 != -1)
    swift_once();
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDatastoreRadarCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_28;
  if (qword_1ED3C4078 != -1)
    swift_once();
  type metadata accessor for WebEmbedDataVisualization();
  sub_1BA50AD30(&qword_1ED3CEB78, 255, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreRadarCommandHandler, (uint64_t)&unk_1BB8A28E8);
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_29;
  if (qword_1ED3C4090 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1ED3C43A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreCopyToClipboardCommandHandler, (uint64_t)&unk_1BB87FA60);
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for WebEmbedDataSourceRadarCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_30;
  if (qword_1ED3C4C18 != -1)
    swift_once();
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3CF9B0);
  sub_1BA50AD30((unint64_t *)&unk_1ED3CED80, 255, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataSourceRadarCommandHandler, (uint64_t)&unk_1BB947EC0);
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for CopySportsEventUmcIdCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_31;
  if (qword_1ED3C4C30 != -1)
    swift_once();
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1BA50AD30(qword_1ED3CE2B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CopySportsEventUmcIdCommandHandler, (uint64_t)&unk_1BB8AAD14);
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for ResetPuzzleProgressCommandHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_32;
  if (qword_1ED3C4C48 != -1)
    swift_once();
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3CF910);
  sub_1BA50AD30(qword_1ED3CE190, 255, (uint64_t (*)(uint64_t))type metadata accessor for ResetPuzzleProgressCommandHandler, (uint64_t)&protocol conformance descriptor for ResetPuzzleProgressCommandHandler);
  sub_1BB86FF58();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for SetPuzzleStreakEligibleHandler();
  result = sub_1BB86DF3C();
  if (!result)
    goto LABEL_33;
  if (qword_1ED3C4060 != -1)
    swift_once();
  sub_1BA50AD30(&qword_1ED3C4328, 255, (uint64_t (*)(uint64_t))type metadata accessor for SetPuzzleStreakEligibleHandler, (uint64_t)&protocol conformance descriptor for SetPuzzleStreakEligibleHandler);
  sub_1BB86FF58();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1BA8533E8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1BA8533F8()
{
  return sub_1BB86D21C();
}

uint64_t sub_1BA853404()
{
  return sub_1BA4A5668();
}

uint64_t sub_1BA85340C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23,uint64_t a24,uint64_t a25)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v38;
  uint64_t v39;
  _UNKNOWN **v40;

  v39 = type metadata accessor for FormatSponsoredBannerNodeRenderer();
  v40 = &off_1E7273A80;
  *(_QWORD *)&v38 = a18;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a25 + 32) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for FormatLayoutViewDebugger();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = sub_1BA6B0504;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(a25 + 40) = v32;
  type metadata accessor for FormatTimer();
  v33 = swift_allocObject();
  v34 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v33 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v33 + 24) = v34;
  *(_QWORD *)(a25 + 304) = v33;
  type metadata accessor for FormatVisibilityRenderer();
  *(_QWORD *)(a25 + 312) = swift_allocObject();
  *(_QWORD *)(a25 + 48) = a1;
  *(_QWORD *)(a25 + 56) = a2;
  *(_QWORD *)(a25 + 64) = a3;
  *(_QWORD *)(a25 + 72) = a4;
  *(_QWORD *)(a25 + 80) = a5;
  *(_QWORD *)(a25 + 88) = a6;
  *(_QWORD *)(a25 + 96) = a7;
  *(_QWORD *)(a25 + 104) = a8;
  *(_OWORD *)(a25 + 112) = a9;
  *(_OWORD *)(a25 + 128) = a10;
  *(_QWORD *)(a25 + 144) = a11;
  type metadata accessor for FormatVideoPlayerViewControllerFactory();
  swift_allocObject();
  sub_1BA854984(0, &qword_1ED3C4998, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerViewControllerFactory, &qword_1ED3CEF00, (uint64_t)&unk_1BB947858);
  swift_allocObject();
  v35 = sub_1BB870204();
  *(_OWORD *)(a25 + 152) = a12;
  *(_OWORD *)(a25 + 168) = a13;
  *(_QWORD *)(a25 + 184) = a14;
  *(_QWORD *)(a25 + 192) = v35;
  *(_QWORD *)(a25 + 200) = a15;
  *(_QWORD *)(a25 + 208) = a17;
  *(_QWORD *)(a25 + 216) = a16;
  sub_1BA4CECCC(&v38, a25 + 224);
  *(_OWORD *)(a25 + 264) = a19;
  *(_QWORD *)(a25 + 280) = a20;
  *(_QWORD *)(a25 + 288) = a22;
  *(_QWORD *)(a25 + 296) = a21;
  *(_OWORD *)(a25 + 320) = a23;
  *(_QWORD *)(a25 + 336) = a24;
  return a25;
}

uint64_t sub_1BA853668(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;

  v16 = type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory();
  v17 = &off_1E72EF3E8;
  *(_QWORD *)&v15 = a1;
  v13 = type metadata accessor for HiddenContentPlacardViewStyler();
  v14 = &off_1E72E5750;
  *(_QWORD *)&v12 = a2;
  sub_1BB86D294();
  sub_1BB86D27C();
  if (qword_1ED3C20B0 != -1)
    swift_once();
  sub_1BB86D270();
  swift_release();
  *(_QWORD *)(a5 + 144) = v11;
  sub_1BA4CECCC(&v15, a5 + 16);
  sub_1BA4CECCC(&v12, a5 + 56);
  sub_1BA4CECCC(a3, a5 + 96);
  *(_QWORD *)(a5 + 136) = a4;
  return a5;
}

uint64_t sub_1BA853764(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v25 = type metadata accessor for HiddenContentPlacardViewLayoutAttributesFactory();
  v26 = &off_1E72EF3E8;
  v24[0] = a1;
  v22 = type metadata accessor for HiddenContentPlacardViewStyler();
  v23 = &off_1E72E5750;
  v21[0] = a2;
  type metadata accessor for HiddenContentPlacardViewRenderer();
  v8 = swift_allocObject();
  v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, v25);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (_QWORD *)((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v13 + 16))(v12, v10);
  v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (_QWORD *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v18 + 16))(v17, v15);
  v19 = sub_1BA853668(*v12, *v17, a3, a4, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v19;
}

char *sub_1BA8538BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char *a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Class v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t ObjCClassFromMetadata;
  void *v66;
  id v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  objc_class *ObjectType;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  objc_super v87;
  uint64_t v88[5];
  _QWORD v89[3];
  uint64_t v90;
  _UNKNOWN **v91;

  v80 = a6;
  v76 = a5;
  v86 = a4;
  v78 = a10;
  v77 = a9;
  ObjectType = (objc_class *)swift_getObjectType();
  v15 = sub_1BB86F454();
  v84 = *(_QWORD *)(v15 - 8);
  v85 = v15;
  MEMORY[0x1E0C80A78](v15);
  v81 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v83 = (char *)&v75 - v18;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v75 - v20;
  v90 = type metadata accessor for PuzzleDataManager();
  v91 = &off_1E7284268;
  v79 = v90;
  v89[0] = a8;
  v22 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_activityIndicator;
  v23 = objc_allocWithZone(MEMORY[0x1E0DC3438]);
  v24 = a11;
  *(_QWORD *)&a11[v22] = objc_msgSend(v23, sel_initWithActivityIndicatorStyle_, 100);
  v25 = sub_1BB86C67C();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v21, 1, 1, v25);
  v27 = (void *)sub_1BB872970();
  v28 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25) != 1)
  {
    v28 = (void *)sub_1BB86C58C();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
  }
  v29 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_embedLocation;
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D977D8]), sel_initWithContext_URL_, v27, v28);

  *(_QWORD *)&v24[v29] = v30;
  v31 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onReuse;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  *(_QWORD *)&v24[v31] = objc_msgSend(objc_allocWithZone(v32), sel_init);
  v33 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_reuseIdentifier];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_isResizable] = 0;
  v34 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleData];
  v35 = type metadata accessor for PuzzleData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v36 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleID];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0xE000000000000000;
  v37 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_contentFrame];
  *(_OWORD *)v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  v38 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_viewportSize];
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  v39 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_feedConfiguration;
  *(_QWORD *)&v24[v39] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D977D0]), sel_init);
  v40 = (uint64_t *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_onEmbedInteraction];
  *v40 = 0;
  v40[1] = 0;
  v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController____lazy_storage___contentEnvironment] = 8;
  v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_hasPuzzleDataLoadAttempted] = 0;
  v41 = OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController;
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_webContentViewController] = a1;
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_interactionProvider] = a2;
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_actionProvider] = a3;
  v42 = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v43 = objc_msgSend(v42, sel_errorProvider);
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_errorProvider] = v43;
  v44 = objc_msgSend(v42, sel_presentationManager);
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_presentationManager] = v44;
  v45 = &v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleDataManager];
  v46 = v76;
  *(_QWORD *)v45 = v86;
  *((_QWORD *)v45 + 1) = v46;
  sub_1BA4C010C((uint64_t)v89, (uint64_t)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleAccessArbiter]);
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_bundleSubscriptionManager] = v77;
  LOBYTE(v88[0]) = 0;
  sub_1BA841BC0(0, (unint64_t *)&qword_1EF2A9060, (void (*)(void))sub_1BA854940);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleLoadingStateMachine] = sub_1BB86DF90();
  swift_beginAccess();
  v47 = *v40;
  *v40 = 0;
  v40[1] = 0;
  sub_1BA49EBE0(v47);
  v48 = v78;
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_textInputTraits] = v78;
  v49 = *(void **)&v24[v41];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3A1080, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1BB87D7A0;
  v51 = (void *)*MEMORY[0x1E0DC5070];
  v52 = (void *)*MEMORY[0x1E0DC5108];
  *(_QWORD *)(v50 + 32) = *MEMORY[0x1E0DC5070];
  *(_QWORD *)(v50 + 40) = v52;
  v53 = (void *)*MEMORY[0x1E0DC5130];
  v54 = (void *)*MEMORY[0x1E0DC5100];
  *(_QWORD *)(v50 + 48) = *MEMORY[0x1E0DC5130];
  *(_QWORD *)(v50 + 56) = v54;
  type metadata accessor for Identifier(0);
  v55 = v48;
  v56 = v49;
  v57 = v51;
  v58 = v52;
  v59 = v53;
  v60 = v54;
  v61 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_removeMenusForIdentifiers_, v61);

  v62 = objc_msgSend(*(id *)&v24[v41], sel_messageHandlerManager);
  v63 = v80;
  swift_unknownObjectRetain();
  v64 = (void *)sub_1BB872970();
  objc_msgSend(v62, sel_addMessageHandler_name_, v63, v64);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (swift_dynamicCastClass())
  {
    *(_QWORD *)(v63 + OBJC_IVAR____TtC8NewsFeed28PuzzleProgressMessageHandler_delegate + 8) = &off_1E7284258;
    swift_unknownObjectWeakAssign();
  }
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v66 = (void *)objc_opt_self();
  v67 = objc_msgSend(v66, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  v68 = objc_msgSend(v66, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  v69 = v83;
  sub_1BB86F448();
  v71 = v84;
  v70 = v85;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v69, v85);
  v88[3] = sub_1BB86F538();
  v88[4] = MEMORY[0x1E0DB6A20];
  __swift_allocate_boxed_opaque_existential_0(v88);
  sub_1BB86F520();
  v72 = objc_allocWithZone((Class)sub_1BB8716E0());
  *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_errorView] = sub_1BB8716D4();

  v87.receiver = v24;
  v87.super_class = ObjectType;
  v73 = (char *)objc_msgSendSuper2(&v87, sel_initWithNibName_bundle_, 0, 0);
  *(_QWORD *)(*(_QWORD *)&v73[OBJC_IVAR____TtC8NewsFeed25PuzzleEmbedViewController_puzzleDataManager]
            + OBJC_IVAR____TtC8NewsFeed17PuzzleDataManager_delegate
            + 8) = &off_1E72EDD98;
  swift_unknownObjectWeakAssign();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
  return v73;
}

char *sub_1BA854114(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  Class v19;
  id v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  objc_class *ObjectType;
  uint64_t v65;
  objc_super v66;
  objc_super v67;
  _BYTE v68[40];
  _QWORD v69[6];

  v65 = a7;
  v62 = a5;
  v63 = a6;
  v61 = a4;
  v60 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1BA854878(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v60 - v15;
  v69[3] = type metadata accessor for WebEmbedConfigurationProvider();
  v69[4] = &off_1E7314DF0;
  v69[0] = a3;
  v17 = &a8[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_layoutIdentifier];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onReuse;
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B0A50, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  v20 = objc_allocWithZone(v19);
  v21 = a8;
  *(_QWORD *)&a8[v18] = objc_msgSend(v20, sel_init);
  v22 = &v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onSizeInvalidation];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  swift_unknownObjectWeakInit();
  v23 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_contentFrameView;
  *(_QWORD *)&v21[v23] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  swift_weakInit();
  v24 = (uint64_t *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_onEmbedInteraction];
  *v24 = 0;
  v24[1] = 0;
  v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_showsLoadingSpinner] = 1;
  v25 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorView;
  *(_QWORD *)&v21[v25] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WebEmbedErrorView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_contentFrameChanged] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredContentSizeCategoryOnPopulate] = 0;
  v26 = &v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_embedURL];
  v27 = sub_1BB86C67C();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v28(&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_dataFeedURL], 1, 1, v27);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_location] = 0;
  v28(&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_sourceURL], 1, 1, v27);
  v29 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_feedConfiguration;
  *(_QWORD *)&v21[v29] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D977D0]), sel_init);
  v30 = &v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_viewportSize];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_isResizable] = 0;
  v31 = &v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredSize];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 1;
  v32 = &v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_dataVisualization];
  v33 = type metadata accessor for WebEmbedDataVisualization();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorState] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_loadedState] = 0;
  v34 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_activityIndicator;
  *(_QWORD *)&v21[v34] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3438]), sel_initWithActivityIndicatorStyle_, 100);
  v35 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_tapGestureRecognizer;
  *(_QWORD *)&v21[v35] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, 0, 0);
  v36 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController__lastDatastoreUpdate;
  v37 = type metadata accessor for WebEmbedDatastoreUpdate();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v16, 1, 1, v37);
  sub_1BA854894((uint64_t)v16, (uint64_t)v13);
  sub_1BA4B07F0(0, &qword_1ED3A39F0, (uint64_t (*)(uint64_t))sub_1BA854878, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4AE8]);
  swift_allocObject();
  v38 = sub_1BB86E86C();
  sub_1BA8548D8((uint64_t)v16);
  *(_QWORD *)&v21[v36] = v38;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_debugLoadView] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_debugVisualizationView] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController] = a1;
  v39 = a1;
  v40 = objc_msgSend(v39, sel_errorProvider);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_errorProvider] = v40;
  v41 = objc_msgSend(v39, sel_presentationManager);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_presentationManager] = v41;
  v42 = objc_msgSend(v39, sel_preferredSizeManager);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_preferredSizeManager] = v42;
  sub_1BA4C010C((uint64_t)v69, (uint64_t)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_configurationProvider]);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_interactionProvider] = v60;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_pictureInPictureState] = v61;
  v43 = v62;
  sub_1BA4C010C(v62, (uint64_t)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webEmbedDataSourceManager]);
  v44 = v63;
  sub_1BA4C010C(v63, (uint64_t)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_liveActivityWebEmbedDatastoreManager]);
  v45 = v65;
  sub_1BA4C010C(v65, (uint64_t)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_coordinator]);
  sub_1BA4C010C(v45, (uint64_t)v68);
  v46 = (objc_class *)type metadata accessor for WebEmbedURLHandlerDelegate();
  v47 = (char *)objc_allocWithZone(v46);
  swift_unknownObjectWeakInit();
  v48 = &v47[OBJC_IVAR____TtC8NewsFeed26WebEmbedURLHandlerDelegate_webEmbedIdentifier];
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 1) = 0;
  sub_1BA4C010C((uint64_t)v68, (uint64_t)&v47[OBJC_IVAR____TtC8NewsFeed26WebEmbedURLHandlerDelegate_webEmbedCoordinator]);
  v67.receiver = v47;
  v67.super_class = v46;
  swift_unknownObjectRetain();
  swift_retain();
  v49 = objc_msgSendSuper2(&v67, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_delegate] = v49;
  swift_beginAccess();
  v50 = *v24;
  *v24 = 0;
  v24[1] = 0;
  sub_1BA49EBE0(v50);

  v66.receiver = v21;
  v66.super_class = ObjectType;
  v51 = (char *)objc_msgSendSuper2(&v66, sel_initWithNibName_bundle_, 0, 0);
  v52 = OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController;
  v53 = *(void **)&v51[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_webContentViewController];
  sub_1BB2B0FE0();
  type metadata accessor for Identifier(0);
  v54 = v51;
  v55 = v53;
  v56 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_removeMenusForIdentifiers_, v56);

  objc_msgSend(*(id *)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_tapGestureRecognizer], sel_addTarget_action_, v54, sel_handleTapWithRecognizer_);
  v57 = sub_1BAAB3400();
  v58 = *(void **)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine];
  *(_QWORD *)&v54[OBJC_IVAR____TtC8NewsFeed22WebEmbedViewController_stateMachine] = v57;

  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1BB86E170();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  objc_msgSend(*(id *)&v51[v52], sel_setFocusShouldStartInputSession_, 1);

  __swift_destroy_boxed_opaque_existential_1(v65);
  __swift_destroy_boxed_opaque_existential_1(v44);
  __swift_destroy_boxed_opaque_existential_1(v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  return v54;
}

void *sub_1BA854870@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BA850F64(a1, a2);
}

void sub_1BA854878(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3A7370, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDatastoreUpdate, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BA854894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA854878(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA8548D8(uint64_t a1)
{
  uint64_t v2;

  sub_1BA854878(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BA854914()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BA854938(uint64_t a1)
{
  uint64_t v1;

  sub_1BAAB3EB4(a1, v1);
}

unint64_t sub_1BA854940()
{
  unint64_t result;

  result = qword_1EF2A9068;
  if (!qword_1EF2A9068)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D7564, &type metadata for PuzzleLoadingEvent);
    atomic_store(result, (unint64_t *)&qword_1EF2A9068);
  }
  return result;
}

void sub_1BA854984(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_1BA50AD30(a4, 255, a3, a5);
    v9 = sub_1BB87021C();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1BA854A08()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BA854A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 < 0)
    v1 = (a1 & 0x7FFFFFFFFFFFFFFFLL) + 24;
  else
    v1 = a1 + 16;
  swift_beginAccess();
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    goto LABEL_27;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 8 * v2 + 24);
  if (v3 < 0)
  {
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    v10 = sub_1BA689ECC(v8, v9);
    v12 = v11;
    swift_bridgeObjectRelease();
    if (!v12)
    {
      swift_release();
      v15 = 1;
      return v15 & 1;
    }
    if (v10 != 32 || v12 != 0xE100000000000000)
    {
      v14 = sub_1BB874398();
      swift_bridgeObjectRelease();
      swift_release();
      v15 = v14 ^ 1;
      return v15 & 1;
    }
    swift_bridgeObjectRelease();
    swift_release();
LABEL_27:
    v15 = 0;
    return v15 & 1;
  }
  v4 = qword_1EF2A7060;
  swift_retain_n();
  if (v4 != -1)
    swift_once();
  v5 = qword_1EF2B9F58;
  v6 = sub_1BB872A0C();
  LOBYTE(v5) = sub_1BA761FE4(v6, v7, v5);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
LABEL_26:
    swift_release_n();
    goto LABEL_27;
  }
  swift_beginAccess();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_1BB3AA6C8(v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = v17 & 0xFFFFFFFFFFFFLL;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v21 = sub_1BA689ECC(v17, v19);
  v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    if (v21 == 32 && v23 == 0xE100000000000000)
      v24 = 1;
    else
      v24 = sub_1BB874398();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  swift_release_n();
  v15 = v24 ^ 1;
  return v15 & 1;
}

uint64_t sub_1BA854C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  _QWORD v26[4];

  sub_1BA854EF0();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA854F44();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v26 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v14(v9, v0, v2, v11);
  sub_1BA854FA4();
  sub_1BB8730D8();
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = v26[0];
  sub_1BA854FEC((uint64_t)v9, (uint64_t)v13);
  v15 = &v13[*(int *)(v7 + 36)];
  v16 = *(_QWORD *)v15;
  sub_1BB873114();
  if (v16 == v26[0])
  {
LABEL_2:
    v17 = 0;
    goto LABEL_14;
  }
  while (1)
  {
    v19 = (void (*)(_QWORD *, _QWORD))sub_1BB873198();
    v21 = *v20;
    swift_retain();
    v19(v26, 0);
    ((void (*)(char *, char *, uint64_t))v14)(v5, v13, v2);
    sub_1BB873120();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((v21 & 0x8000000000000000) == 0)
    {
      swift_release();
      goto LABEL_4;
    }
    if (sub_1BB872A0C() == 6648432 && v22 == 0xE300000000000000)
      break;
    v24 = sub_1BB874398();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      goto LABEL_13;
LABEL_4:
    v18 = *(_QWORD *)v15;
    sub_1BB873114();
    if (v18 == v26[0])
      goto LABEL_2;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_13:
  v17 = 1;
LABEL_14:
  sub_1BA855030((uint64_t)v13);
  return v17;
}

void sub_1BA854EF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A0D70)
  {
    v0 = sub_1BB86E83C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A0D70);
  }
}

void sub_1BA854F44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3028)
  {
    sub_1BA854EF0();
    sub_1BA854FA4();
    v0 = sub_1BB873E40();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3028);
  }
}

unint64_t sub_1BA854FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3A2590;
  if (!qword_1ED3A2590)
  {
    sub_1BA854EF0();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB4A80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3A2590);
  }
  return result;
}

uint64_t sub_1BA854FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA854F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA855030(uint64_t a1)
{
  uint64_t v2;

  sub_1BA854F44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *assignWithCopy for FormatVideoPlayerContent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BA8550AC(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *sub_1BA8550B8(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1BA8550C8(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for FormatDOMStackNode()
{
  return &type metadata for FormatDOMStackNode;
}

uint64_t FormatProgressPieOptions.radius.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.radius.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.radius.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.clockwise.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1BA69C808(v2, v3, v4);
}

uint64_t sub_1BA855144(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 24);
  sub_1BA69C808(*(_QWORD *)a1, v4, v5);
  result = sub_1BA69C828(v6, v7, v8);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v5;
  return result;
}

uint64_t FormatProgressPieOptions.clockwise.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = sub_1BA69C828(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v4;
  return result;
}

uint64_t (*FormatProgressPieOptions.clockwise.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.stepPercentage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.minPercentage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.minPercentage.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.minPercentage.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.maxPercentage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t FormatProgressPieOptions.maxPercentage.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

uint64_t (*FormatProgressPieOptions.maxPercentage.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptions.value(contextLayoutOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t result;
  char v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_BYTE *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v18 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  v11 = sub_1BA72BED4(a1, v5);
  result = swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_1BA69C808(v6, v7, v8);
    v13 = FormatBoolean.value(contextLayoutOptions:)(a1);
    sub_1BA69C828(v6, v7, v8);
    if (v10)
    {
      swift_bridgeObjectRetain();
      v14 = sub_1BA72BED4(a1, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = 0.0;
    }
    swift_bridgeObjectRetain();
    v15 = sub_1BA72BED4(a1, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16 = sub_1BA72BED4(a1, v18);
    result = swift_bridgeObjectRelease();
    *(double *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v13 & 1;
    *(double *)(a2 + 16) = v14;
    *(double *)(a2 + 24) = v15;
    *(double *)(a2 + 32) = v16;
  }
  return result;
}

uint64_t sub_1BA855420@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatProgressPieOptions.init(from:)(a1, a2);
}

uint64_t sub_1BA855434(_QWORD *a1)
{
  return FormatProgressPieOptions.encode(to:)(a1);
}

double FormatProgressPieOptionsResolved.radius.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void FormatProgressPieOptionsResolved.radius.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.radius.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatProgressPieOptionsResolved.clockwise.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t FormatProgressPieOptionsResolved.clockwise.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*FormatProgressPieOptionsResolved.clockwise.modify())(_QWORD)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.stepPercentage.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void FormatProgressPieOptionsResolved.stepPercentage.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.stepPercentage.modify())(_QWORD)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.minPercentage.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void FormatProgressPieOptionsResolved.minPercentage.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.minPercentage.modify())(_QWORD)
{
  return nullsub_1;
}

double FormatProgressPieOptionsResolved.maxPercentage.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void FormatProgressPieOptionsResolved.maxPercentage.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*FormatProgressPieOptionsResolved.maxPercentage.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1BA8554F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA85551C
                                                            + 4 * asc_1BB87D8D0[*v0]))(0x737569646172, 0xE600000000000000);
}

uint64_t sub_1BA85551C()
{
  return 0x7369776B636F6C63;
}

uint64_t sub_1BA855538()
{
  return 0x6372655070657473;
}

uint64_t sub_1BA85555C()
{
  return 0x65637265506E696DLL;
}

uint64_t sub_1BA85558C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA8566E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BA8555B0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1BA8555BC()
{
  sub_1BA855F78();
  return sub_1BB874710();
}

uint64_t sub_1BA8555E4()
{
  sub_1BA855F78();
  return sub_1BB87471C();
}

uint64_t FormatProgressPieOptionsResolved.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  sub_1BA855FBC(0, &qword_1EF2A9098, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA855F78();
  sub_1BB8746C8();
  v14 = 0;
  sub_1BB874194();
  if (!v1)
  {
    v13 = 1;
    sub_1BB874188();
    v12 = 2;
    sub_1BB874194();
    v11 = 3;
    sub_1BB874194();
    v10 = 4;
    sub_1BB874194();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FormatProgressPieOptionsResolved.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  sub_1BA855FBC(0, &qword_1EF2A90A8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v20 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA855F78();
  sub_1BB87468C();
  if (!v2)
  {
    v25 = 0;
    sub_1BB8740B0();
    v11 = v10;
    v24 = 1;
    v12 = sub_1BB8740A4();
    v23 = 2;
    sub_1BB8740B0();
    v14 = v13;
    v22 = 3;
    sub_1BB8740B0();
    v16 = v15;
    v21 = 4;
    sub_1BB8740B0();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v12 & 1;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BA8559A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatProgressPieOptionsResolved.init(from:)(a1, a2);
}

uint64_t sub_1BA8559BC(_QWORD *a1)
{
  return FormatProgressPieOptionsResolved.encode(to:)(a1);
}

uint64_t sub_1BA8559D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v8;

  sub_1BA72C428(0, (unint64_t *)&unk_1ED3B0818);
  swift_projectBox();
  sub_1BA72C428(0, &qword_1ED3B0810);
  swift_projectBox();
  swift_beginAccess();
  sub_1BB86E7F4();
  swift_endAccess();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    sub_1BB86E7F4();
    swift_endAccess();
    swift_beginAccess();
    sub_1BB86E7F4();
    swift_endAccess();
    __asm { BR              X10 }
  }
  type metadata accessor for FormatLayoutError();
  sub_1BA689E84();
  swift_allocError();
  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1BB107088(v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  *v1 = v3;
  v1[1] = v5;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_1BA855B90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for FormatLayoutError();
  sub_1BA689E84();
  swift_allocError();
  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1BB107088(v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  *v1 = v3;
  v1[1] = v5;
  JUMPOUT(0x1BA855B14);
}

uint64_t _s8NewsFeed24FormatProgressPieOptionsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1BA881EAC(v2, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
    return 0;
  if ((v5 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      if (v3 == v7 && v4 == v8)
      {
        sub_1BA69C808(v3, v4, 1);
        sub_1BA69C808(v3, v4, 1);
        sub_1BA69C828(v3, v4, 1);
        sub_1BA69C828(v3, v4, 1);
      }
      else
      {
        v12 = sub_1BB874398();
        sub_1BA69C808(v7, v8, 1);
        sub_1BA69C808(v3, v4, 1);
        sub_1BA69C828(v3, v4, 1);
        sub_1BA69C828(v7, v8, 1);
        if ((v12 & 1) == 0)
          return 0;
      }
      goto LABEL_13;
    }
    sub_1BA69C808(v3, v4, 1);
    swift_bridgeObjectRetain();
LABEL_11:
    sub_1BA69C808(v7, v8, v9);
    sub_1BA69C828(v3, v4, v5);
    sub_1BA69C828(v7, v8, v9);
    sub_1BA69C828(v3, v4, v5);
    return 0;
  }
  if ((v9 & 1) != 0)
    goto LABEL_11;
  sub_1BA69C808(v7, v8, 0);
  sub_1BA69C828(v3, v4, 0);
  sub_1BA69C828(v7, v8, 0);
  sub_1BA69C828(v3, v4, 0);
  if (((((v3 & 1) == 0) ^ v7) & 1) == 0)
    return 0;
LABEL_13:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1BA881EAC(v18, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = sub_1BA881EAC(v17, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  return 0;
}

unint64_t sub_1BA855F78()
{
  unint64_t result;

  result = qword_1EF2A90A0;
  if (!qword_1EF2A90A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DB04, &type metadata for FormatProgressPieOptionsResolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A90A0);
  }
  return result;
}

void sub_1BA855FBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA855F78();
    v7 = a3(a1, &type metadata for FormatProgressPieOptionsResolved.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA856018(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA85603C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA85603C()
{
  unint64_t result;

  result = qword_1EF2A90B0;
  if (!qword_1EF2A90B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptions, &type metadata for FormatProgressPieOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2A90B0);
  }
  return result;
}

unint64_t sub_1BA856080(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA8560B4();
  a1[2] = sub_1BA8560F8();
  result = sub_1BA85613C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA8560B4()
{
  unint64_t result;

  result = qword_1ED3A13E8;
  if (!qword_1ED3A13E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptions, &type metadata for FormatProgressPieOptions);
    atomic_store(result, (unint64_t *)&qword_1ED3A13E8);
  }
  return result;
}

unint64_t sub_1BA8560F8()
{
  unint64_t result;

  result = qword_1ED3A7438;
  if (!qword_1ED3A7438)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptions, &type metadata for FormatProgressPieOptions);
    atomic_store(result, (unint64_t *)&qword_1ED3A7438);
  }
  return result;
}

unint64_t sub_1BA85613C()
{
  unint64_t result;

  result = qword_1EF2A90B8;
  if (!qword_1EF2A90B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptions, &type metadata for FormatProgressPieOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2A90B8);
  }
  return result;
}

uint64_t sub_1BA856180@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA85618C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1BA8561CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v4;
  return sub_1BA69C808(v3, v2, v4);
}

uint64_t sub_1BA8561E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA8561F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_1BA856234@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA856240(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

uint64_t destroy for FormatProgressPieOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1BA69C828(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_1BA69C808(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BA69C808(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_1BA69C828(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FormatProgressPieOptions(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1BA69C828(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptions()
{
  return &type metadata for FormatProgressPieOptions;
}

uint64_t getEnumTagSinglePayload for FormatProgressPieOptionsResolved(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatProgressPieOptionsResolved(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptionsResolved()
{
  return &type metadata for FormatProgressPieOptionsResolved;
}

uint64_t storeEnumTagSinglePayload for FormatProgressPieOptionsResolved.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BA85658C + 4 * byte_1BB87D8E1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BA8565C0 + 4 * byte_1BB87D8DC[v4]))();
}

uint64_t sub_1BA8565C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8565C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA8565D0);
  return result;
}

uint64_t sub_1BA8565DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA8565E4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BA8565E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA8565F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressPieOptionsResolved.CodingKeys()
{
  return &type metadata for FormatProgressPieOptionsResolved.CodingKeys;
}

unint64_t sub_1BA856610()
{
  unint64_t result;

  result = qword_1EF2A90C0;
  if (!qword_1EF2A90C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DADC, &type metadata for FormatProgressPieOptionsResolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A90C0);
  }
  return result;
}

unint64_t sub_1BA856658()
{
  unint64_t result;

  result = qword_1EF2A90C8;
  if (!qword_1EF2A90C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DA4C, &type metadata for FormatProgressPieOptionsResolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A90C8);
  }
  return result;
}

unint64_t sub_1BA8566A0()
{
  unint64_t result;

  result = qword_1EF2A90D0;
  if (!qword_1EF2A90D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DA74, &type metadata for FormatProgressPieOptionsResolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A90D0);
  }
  return result;
}

uint64_t sub_1BA8566E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x737569646172 && a2 == 0xE600000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7369776B636F6C63 && a2 == 0xE900000000000065 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6372655070657473 && a2 == 0xEE00656761746E65 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65637265506E696DLL && a2 == 0xED0000656761746ELL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656372655078616DLL && a2 == 0xED0000656761746ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_1BA856968()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3D2500)
  {
    type metadata accessor for FormatOption();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3D2500);
  }
}

uint64_t sub_1BA8569BC(uint64_t result, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) == 0)
    return sub_1BA69C808(result, a2, a3 & 1);
  return result;
}

uint64_t sub_1BA8569CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatOption();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA856A14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatProgressViewNodeProgress.init(from:)(a1, a2);
}

uint64_t sub_1BA856A28(_QWORD *a1)
{
  return FormatProgressViewNodeProgress.encode(to:)(a1);
}

uint64_t _s8NewsFeed022FormatProgressViewNodeD0O2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  _QWORD v13[3];
  __int16 v14;
  _QWORD v15[3];
  __int16 v16;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(__int16 *)(a1 + 24);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(__int16 *)(a2 + 24);
  if (v5 < 0)
  {
    if (v9 < 0)
    {
      v15[0] = *(_QWORD *)a1;
      v15[1] = v2;
      v15[2] = v4;
      v16 = v5 & 0x1FF;
      v13[0] = v7;
      v13[1] = v6;
      v13[2] = v8;
      v14 = v9 & 0x1FF;
      sub_1BA856DA0(v7, v6, v8, v9);
      sub_1BA856DA0(v3, v2, v4, v5);
      sub_1BA856DA0(v3, v2, v4, v5);
      sub_1BA856DA0(v7, v6, v8, v9);
      v10 = static FormatCommandBinding.== infix(_:_:)(v15, v13);
      goto LABEL_7;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    sub_1BA856DA0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8, v9);
    sub_1BA856DA0(v3, v2, v4, v5);
    sub_1BA856DA0(v3, v2, v4, v5);
    sub_1BA856DA0(v7, v6, v8, v9);
    v10 = sub_1BA881EAC(v3, v7);
LABEL_7:
    v11 = v10;
    sub_1BA856E2C(v3, v2, v4, v5);
    sub_1BA856E2C(v7, v6, v8, v9);
    sub_1BA856E2C(v7, v6, v8, v9);
    sub_1BA856E2C(v3, v2, v4, v5);
    return v11 & 1;
  }
  sub_1BA856DA0(*(_QWORD *)a1, v2, v4, v5);
  sub_1BA856DA0(v7, v6, v8, v9);
  sub_1BA856E2C(v3, v2, v4, v5);
  sub_1BA856E2C(v7, v6, v8, v9);
  v11 = 0;
  return v11 & 1;
}

unint64_t sub_1BA856C38(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA856C5C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA856C5C()
{
  unint64_t result;

  result = qword_1EF2A90D8;
  if (!qword_1EF2A90D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeProgress, &type metadata for FormatProgressViewNodeProgress);
    atomic_store(result, (unint64_t *)&qword_1EF2A90D8);
  }
  return result;
}

unint64_t sub_1BA856CA0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA856CD4();
  a1[2] = sub_1BA856D18();
  result = sub_1BA856D5C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA856CD4()
{
  unint64_t result;

  result = qword_1ED3A4380;
  if (!qword_1ED3A4380)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeProgress, &type metadata for FormatProgressViewNodeProgress);
    atomic_store(result, (unint64_t *)&qword_1ED3A4380);
  }
  return result;
}

unint64_t sub_1BA856D18()
{
  unint64_t result;

  result = qword_1ED3A4378;
  if (!qword_1ED3A4378)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeProgress, &type metadata for FormatProgressViewNodeProgress);
    atomic_store(result, (unint64_t *)&qword_1ED3A4378);
  }
  return result;
}

unint64_t sub_1BA856D5C()
{
  unint64_t result;

  result = qword_1EF2A90E0;
  if (!qword_1EF2A90E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressViewNodeProgress, &type metadata for FormatProgressViewNodeProgress);
    atomic_store(result, (unint64_t *)&qword_1EF2A90E0);
  }
  return result;
}

uint64_t sub_1BA856DA0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (a4 < 0)
    return sub_1BA856E5C(a1, a2, a3, a4, HIBYTE(a4) & 1, (uint64_t (*)(void))sub_1BA856DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA60DF54);
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1BA856DD0(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != 1)
  {
    if (a3)
      return result;
    sub_1BA5E7FF4(result);
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for FormatProgressViewNodeProgress(uint64_t a1)
{
  return sub_1BA856E2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t sub_1BA856E2C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (a4 < 0)
    return sub_1BA856E5C(a1, a2, a3, a4, HIBYTE(a4) & 1, (uint64_t (*)(void))sub_1BA7EDFFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA60DFC4);
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1BA856E5C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, char a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  int v7;

  if ((a5 & 1) != 0)
    v7 = 4;
  else
    v7 = 0;
  switch(v7 & 0xFFFFFFFC | (a4 >> 2) & 3)
  {
    case 0u:
      result = sub_1BA856ECC(result, a2, a3, a4, a6);
      break;
    case 3u:
      result = a6();
      break;
    case 6u:
      result = sub_1BA856F00(result, a2, a3, a4 & 0xF3, a6);
      break;
    case 7u:
      result = a7(result, a2, a3, a4 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BA856ECC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(void))
{
  int v5;

  v5 = (a4 >> 4) & 3;
  if (v5 == 3)
    return sub_1BA856F00(result, a2, a3, a4 & 0xCF, a5);
  if (v5 == 2 || !v5)
    return a5();
  return result;
}

uint64_t sub_1BA856F00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t (*a5)(void))
{
  unsigned int v5;
  uint64_t result;

  v5 = a4 >> 6;
  if (v5 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))a5)(a2, a3, a4 & 0x3F);
  if (v5 <= 1)
    return a5();
  return result;
}

uint64_t initializeWithCopy for FormatProgressViewNodeProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 24);
  sub_1BA856DA0(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FormatProgressViewNodeProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_WORD *)(a2 + 24);
  sub_1BA856DA0(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v6;
  sub_1BA856E2C(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FormatProgressViewNodeProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  sub_1BA856E2C(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_1BA85705C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 24) >> 15;
}

uint64_t sub_1BA857068(uint64_t result)
{
  *(_WORD *)(result + 24) &= ~0x8000u;
  return result;
}

uint64_t sub_1BA857078(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 24) = *(_WORD *)(result + 24) & 0x1FF | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressViewNodeProgress()
{
  return &type metadata for FormatProgressViewNodeProgress;
}

uint64_t static FormatCodingAllColumnsStrategy.defaultValue.getter()
{
  return sub_1BA55111C((uint64_t)&unk_1E724C190);
}

BOOL static FormatCodingAllColumnsStrategy.shouldEncode(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BA55111C((uint64_t)&unk_1E724C1D0);
  LOBYTE(a1) = sub_1BA579D0C(a1, v2);
  swift_bridgeObjectRelease();
  return (a1 & 1) == 0;
}

uint64_t static FormatCodingAllColumnsStrategy.encode(wrappedValue:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1BA766C70(v0);
  swift_bridgeObjectRelease();
  v3 = v1;
  swift_retain();
  sub_1BA766EFC((uint64_t *)&v3);
  swift_release();
  return (uint64_t)v3;
}

uint64_t sub_1BA857168@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA55111C((uint64_t)&unk_1E724C210);
  *a1 = result;
  return result;
}

BOOL sub_1BA857194(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = sub_1BA55111C((uint64_t)&unk_1E724BE18);
  LOBYTE(v1) = sub_1BA579D0C(v1, v2);
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t sub_1BA8571E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_1BA766C70(v2);
  swift_bridgeObjectRelease();
  v5 = v3;
  swift_retain();
  sub_1BA766EFC((uint64_t *)&v5);
  result = swift_release();
  *a1 = v5;
  return result;
}

uint64_t sub_1BA857260(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v9;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v9 = (unint64_t)(v3 + 63) >> 6;
  if ((v4 & *(_QWORD *)(a1 + 56)) != 0)
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 1)
    return 1;
  if (*(_QWORD *)(a1 + 64))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 2)
    return 1;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 3)
    return 1;
  if (*(_QWORD *)(a1 + 80))
  {
LABEL_18:
    sub_1BB8745CC();
    FormatOptionType.rawValue.getter();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v7 = sub_1BB874608() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
    return 0;
  }
  v5 = 4;
  if (v9 > 4)
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      while (1)
      {
        v6 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          JUMPOUT(0x1BA857728);
        }
        if (v6 >= v9)
          return 1;
        ++v5;
        if (*(_QWORD *)(a1 + 56 + 8 * v6))
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  return 1;
}

uint64_t sub_1BA857788(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v28 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v32 = a2 + 56;
  v29 = (unint64_t)(v6 + 63) >> 6;
  v27 = result;
  if ((v7 & v5) == 0)
    goto LABEL_8;
  while (2)
  {
    v9 = __clz(__rbit64(v8));
    v10 = (v8 - 1) & v8;
    v11 = v9 | (v4 << 6);
LABEL_22:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v16 = sub_1BB874608();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v32 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v30 = v10;
    v31 = v4;
    v19 = ~v17;
    while (1)
    {
      v20 = 0x80000001BB959F40;
      v21 = 0xD00000000000001CLL;
      v22 = 0x80000001BB959F60;
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) != 1)
      {
        v21 = 0xD000000000000028;
        v22 = 0x80000001BB959F80;
      }
      v23 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) ? v21 : 0xD000000000000010;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) ? v22 : 0x80000001BB959F40;
      if (!v15)
        break;
      if (v15 == 1)
        v25 = 0xD00000000000001CLL;
      else
        v25 = 0xD000000000000028;
      if (v15 == 1)
        v20 = 0x80000001BB959F60;
      else
        v20 = 0x80000001BB959F80;
      if (v23 == v25)
        goto LABEL_42;
LABEL_43:
      v26 = sub_1BB874398();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_47;
      v18 = (v18 + 1) & v19;
      if (((*(_QWORD *)(v32 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        return 0;
    }
    if (v23 != 0xD000000000000010)
      goto LABEL_43;
LABEL_42:
    if (v24 != v20)
      goto LABEL_43;
    result = swift_bridgeObjectRelease_n();
LABEL_47:
    v3 = v27;
    v8 = v30;
    v4 = v31;
    if (v30)
      continue;
    break;
  }
LABEL_8:
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v12 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_21;
  v4 = v12 + 1;
  if (v12 + 1 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v4);
  if (v13)
    goto LABEL_21;
  v4 = v12 + 2;
  if (v12 + 2 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v4);
  if (v13)
    goto LABEL_21;
  v14 = v12 + 3;
  if (v14 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v14);
  if (v13)
  {
    v4 = v14;
LABEL_21:
    v10 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v29)
      return 1;
    v13 = *(_QWORD *)(v28 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1BA857AC0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v28 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v32 = a2 + 56;
  v29 = (unint64_t)(v6 + 63) >> 6;
  v27 = result;
  if ((v7 & v5) == 0)
    goto LABEL_8;
  while (2)
  {
    v9 = __clz(__rbit64(v8));
    v10 = (v8 - 1) & v8;
    v11 = v9 | (v4 << 6);
LABEL_22:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
    sub_1BB8745CC();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v16 = sub_1BB874608();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v32 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v30 = v10;
    v31 = v4;
    v19 = ~v17;
    while (1)
    {
      v20 = 0x80000001BB95C6D0;
      v21 = 0xD000000000000021;
      v22 = 0x80000001BB95C6F0;
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) != 1)
      {
        v21 = 0x7461636572706564;
        v22 = 0xEA00000000006465;
      }
      v23 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) ? v21 : 0xD000000000000014;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v18) ? v22 : 0x80000001BB95C6D0;
      if (!v15)
        break;
      if (v15 == 1)
        v25 = 0xD000000000000021;
      else
        v25 = 0x7461636572706564;
      if (v15 == 1)
        v20 = 0x80000001BB95C6F0;
      else
        v20 = 0xEA00000000006465;
      if (v23 == v25)
        goto LABEL_42;
LABEL_43:
      v26 = sub_1BB874398();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_47;
      v18 = (v18 + 1) & v19;
      if (((*(_QWORD *)(v32 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        return 0;
    }
    if (v23 != 0xD000000000000014)
      goto LABEL_43;
LABEL_42:
    if (v24 != v20)
      goto LABEL_43;
    result = swift_bridgeObjectRelease_n();
LABEL_47:
    v3 = v27;
    v8 = v30;
    v4 = v31;
    if (v30)
      continue;
    break;
  }
LABEL_8:
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v12 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_21;
  v4 = v12 + 1;
  if (v12 + 1 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v4);
  if (v13)
    goto LABEL_21;
  v4 = v12 + 2;
  if (v12 + 2 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v4);
  if (v13)
    goto LABEL_21;
  v14 = v12 + 3;
  if (v14 >= v29)
    return 1;
  v13 = *(_QWORD *)(v28 + 8 * v14);
  if (v13)
  {
    v4 = v14;
LABEL_21:
    v10 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v29)
      return 1;
    v13 = *(_QWORD *)(v28 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1BA857E18(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  v30 = a1;
  v31 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v32 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v9 = __clz(__rbit64(v7));
  v10 = (v7 - 1) & v7;
  v11 = v9 | (v3 << 6);
LABEL_22:
  v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
  v16 = *v15;
  v17 = v15[1];
  sub_1BB8745CC();
  v33 = v10;
  v34 = v3;
  switch(v17)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
      sub_1BB8745D8();
      break;
    default:
      sub_1BB8745D8();
      swift_bridgeObjectRetain();
      sub_1BB872A90();
      break;
  }
  v18 = sub_1BB874608();
  v19 = -1 << *(_BYTE *)(a2 + 32);
  v20 = v18 & ~v19;
  if (((*(_QWORD *)(v8 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
  {
LABEL_73:
    sub_1BA766C18(v16, v17);
    return 0;
  }
  v21 = ~v19;
  while (2)
  {
    v22 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v20);
    v23 = *v22;
    v24 = v22[1];
    switch(v24)
    {
      case 0uLL:
        if (v17)
          goto LABEL_64;
        v27 = *v22;
        v28 = 0;
        goto LABEL_69;
      case 1uLL:
        if (v17 != 1)
          goto LABEL_64;
        v27 = *v22;
        v28 = 1;
        goto LABEL_69;
      case 2uLL:
        if (v17 != 2)
          goto LABEL_64;
        v27 = *v22;
        v28 = 2;
        goto LABEL_69;
      case 3uLL:
        if (v17 != 3)
          goto LABEL_64;
        v27 = *v22;
        v28 = 3;
        goto LABEL_69;
      case 4uLL:
        if (v17 != 4)
          goto LABEL_64;
        v27 = *v22;
        v28 = 4;
        goto LABEL_69;
      case 5uLL:
        if (v17 != 5)
          goto LABEL_64;
        v27 = *v22;
        v28 = 5;
        goto LABEL_69;
      case 6uLL:
        if (v17 != 6)
          goto LABEL_64;
        v27 = *v22;
        v28 = 6;
        goto LABEL_69;
      case 7uLL:
        if (v17 != 7)
          goto LABEL_64;
        v27 = *v22;
        v28 = 7;
        goto LABEL_69;
      case 8uLL:
        if (v17 != 8)
          goto LABEL_64;
        v27 = *v22;
        v28 = 8;
        goto LABEL_69;
      case 9uLL:
        if (v17 != 9)
          goto LABEL_64;
        v27 = *v22;
        v28 = 9;
        goto LABEL_69;
      case 0xAuLL:
        if (v17 != 10)
          goto LABEL_64;
        v27 = *v22;
        v28 = 10;
        goto LABEL_69;
      case 0xBuLL:
        if (v17 != 11)
          goto LABEL_64;
        v27 = *v22;
        v28 = 11;
        goto LABEL_69;
      case 0xCuLL:
        if (v17 != 12)
          goto LABEL_64;
        v27 = *v22;
        v28 = 12;
        goto LABEL_69;
      case 0xDuLL:
        if (v17 != 13)
          goto LABEL_64;
        v27 = *v22;
        v28 = 13;
        goto LABEL_69;
      case 0xEuLL:
        if (v17 != 14)
          goto LABEL_64;
        v27 = *v22;
        v28 = 14;
        goto LABEL_69;
      default:
        if (v17 < 0xF)
        {
LABEL_64:
          sub_1BA682148(v16, v17);
          sub_1BA682148(v23, v24);
          sub_1BA766C18(v23, v24);
          sub_1BA766C18(v16, v17);
LABEL_65:
          v20 = (v20 + 1) & v21;
          if (((*(_QWORD *)(v8 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
            goto LABEL_73;
          continue;
        }
        if (v23 != v16 || v24 != v17)
        {
          v26 = sub_1BB874398();
          sub_1BA682148(v16, v17);
          sub_1BA682148(v23, v24);
          sub_1BA766C18(v23, v24);
          sub_1BA766C18(v16, v17);
          if ((v26 & 1) != 0)
            goto LABEL_70;
          goto LABEL_65;
        }
        sub_1BA682148(v16, v17);
        sub_1BA682148(v16, v17);
        sub_1BA766C18(v16, v17);
        v27 = v16;
        v28 = v17;
LABEL_69:
        sub_1BA766C18(v27, v28);
LABEL_70:
        v7 = v33;
        v3 = v34;
        sub_1BA766C18(v16, v17);
        a1 = v30;
        if (v33)
          goto LABEL_7;
LABEL_8:
        v12 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
          goto LABEL_76;
        }
        if (v12 < v32)
        {
          v13 = *(_QWORD *)(v31 + 8 * v12);
          ++v3;
          if (v13)
            goto LABEL_21;
          v3 = v12 + 1;
          if (v12 + 1 < v32)
          {
            v13 = *(_QWORD *)(v31 + 8 * v3);
            if (v13)
              goto LABEL_21;
            v3 = v12 + 2;
            if (v12 + 2 < v32)
            {
              v13 = *(_QWORD *)(v31 + 8 * v3);
              if (v13)
                goto LABEL_21;
              v14 = v12 + 3;
              if (v14 < v32)
              {
                v13 = *(_QWORD *)(v31 + 8 * v14);
                if (v13)
                {
                  v3 = v14;
LABEL_21:
                  v10 = (v13 - 1) & v13;
                  v11 = __clz(__rbit64(v13)) + (v3 << 6);
                  goto LABEL_22;
                }
                while (1)
                {
                  v3 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    break;
                  if (v3 >= v32)
                    return 1;
                  v13 = *(_QWORD *)(v31 + 8 * v3);
                  ++v14;
                  if (v13)
                    goto LABEL_21;
                }
LABEL_76:
                __break(1u);
                JUMPOUT(0x1BA858380);
              }
            }
          }
        }
        return 1;
    }
  }
}

uint64_t sub_1BA8583F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_21;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_20;
      v7 = 2;
      if ((unint64_t)(v3 + 63) >> 6 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_20;
        v7 = 3;
        if ((unint64_t)(v3 + 63) >> 6 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (!v6)
          {
            v8 = 4;
            if (v11 > 4)
            {
              v6 = *(_QWORD *)(a1 + 88);
              if (v6)
              {
                v7 = 4;
                goto LABEL_20;
              }
              while (1)
              {
                v7 = v8 + 1;
                if (__OFADD__(v8, 1))
                {
                  __break(1u);
                  JUMPOUT(0x1BA858874);
                }
                if (v7 >= v11)
                  break;
                v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                ++v8;
                if (v6)
                  goto LABEL_20;
              }
            }
            return 1;
          }
LABEL_20:
          v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_21:
          v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
          sub_1BB8745CC();
          __asm { BR              X8 }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA8588BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_21;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_20;
      v7 = 2;
      if ((unint64_t)(v3 + 63) >> 6 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_20;
        v7 = 3;
        if ((unint64_t)(v3 + 63) >> 6 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (!v6)
          {
            v8 = 4;
            if (v11 > 4)
            {
              v6 = *(_QWORD *)(a1 + 88);
              if (v6)
              {
                v7 = 4;
                goto LABEL_20;
              }
              while (1)
              {
                v7 = v8 + 1;
                if (__OFADD__(v8, 1))
                {
                  __break(1u);
                  JUMPOUT(0x1BA858C8CLL);
                }
                if (v7 >= v11)
                  break;
                v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                ++v8;
                if (v6)
                  goto LABEL_20;
              }
            }
            return 1;
          }
LABEL_20:
          v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_21:
          v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
          sub_1BB8745CC();
          __asm { BR              X8 }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA858CBC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 56);
    v26 = result;
    v27 = result + 56;
    v6 = 1 << *(_BYTE *)(result + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & v5;
    v28 = (unint64_t)(v6 + 63) >> 6;
    v9 = a2 + 56;
    if ((v7 & v5) == 0)
      goto LABEL_8;
LABEL_7:
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
    {
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
      sub_1BB8745CC();
      if (v15)
        v16 = 0x73676E69646E6962;
      else
        v16 = 0x736E6F6974706FLL;
      if (v15)
        v17 = 0xE800000000000000;
      else
        v17 = 0xE700000000000000;
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      v18 = sub_1BB874608();
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v20 = v18 & ~v19;
      if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        return 0;
      v29 = v4;
      v21 = ~v19;
      while (1)
      {
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v20) ? 0x73676E69646E6962 : 0x736E6F6974706FLL;
        v23 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v20) ? 0xE800000000000000 : 0xE700000000000000;
        if (v22 == v16 && v23 == v17)
          break;
        v25 = sub_1BB874398();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_44;
        v20 = (v20 + 1) & v21;
        if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          return 0;
      }
      result = swift_bridgeObjectRelease_n();
LABEL_44:
      v3 = v26;
      v4 = v29;
      if (v8)
        goto LABEL_7;
LABEL_8:
      v12 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      if (v12 >= v28)
        return 1;
      v13 = *(_QWORD *)(v27 + 8 * v12);
      ++v4;
      if (!v13)
      {
        v4 = v12 + 1;
        if (v12 + 1 >= v28)
          return 1;
        v13 = *(_QWORD *)(v27 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 2;
          if (v12 + 2 >= v28)
            return 1;
          v13 = *(_QWORD *)(v27 + 8 * v4);
          if (!v13)
          {
            v14 = v12 + 3;
            if (v14 >= v28)
              return 1;
            v13 = *(_QWORD *)(v27 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v4 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_49;
                if (v4 >= v28)
                  return 1;
                v13 = *(_QWORD *)(v27 + 8 * v4);
                ++v14;
                if (v13)
                  goto LABEL_21;
              }
            }
            v4 = v14;
          }
        }
      }
LABEL_21:
      v8 = (v13 - 1) & v13;
    }
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t sub_1BA858F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_21;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_20;
      v7 = 2;
      if ((unint64_t)(v3 + 63) >> 6 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_20;
        v7 = 3;
        if ((unint64_t)(v3 + 63) >> 6 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (!v6)
          {
            v8 = 4;
            if (v11 > 4)
            {
              v6 = *(_QWORD *)(a1 + 88);
              if (v6)
              {
                v7 = 4;
                goto LABEL_20;
              }
              while (1)
              {
                v7 = v8 + 1;
                if (__OFADD__(v8, 1))
                {
                  __break(1u);
                  JUMPOUT(0x1BA85940CLL);
                }
                if (v7 >= v11)
                  break;
                v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                ++v8;
                if (v6)
                  goto LABEL_20;
              }
            }
            return 1;
          }
LABEL_20:
          v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_21:
          v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
          sub_1BB8745CC();
          __asm { BR              X8 }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA859454(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v9;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v9 = (unint64_t)(v3 + 63) >> 6;
  if ((v4 & *(_QWORD *)(a1 + 56)) != 0)
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 1)
    return 1;
  if (*(_QWORD *)(a1 + 64))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 2)
    return 1;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 3)
    return 1;
  if (*(_QWORD *)(a1 + 80))
  {
LABEL_18:
    sub_1BB8745CC();
    FormatItemTrait.rawValue.getter();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v7 = sub_1BB874608() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
    return 0;
  }
  v5 = 4;
  if (v9 > 4)
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      while (1)
      {
        v6 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          JUMPOUT(0x1BA85A254);
        }
        if (v6 >= v9)
          return 1;
        ++v5;
        if (*(_QWORD *)(a1 + 56 + 8 * v6))
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  return 1;
}

uint64_t sub_1BA85A3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v13 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
      goto LABEL_21;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_20;
      v8 = 2;
      if ((unint64_t)(v4 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_20;
      v8 = 3;
      if ((unint64_t)(v4 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
      {
LABEL_20:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_21:
        sub_1BA4BB3A8(*(_QWORD *)(a2 + 40), *(_BYTE *)(*(_QWORD *)(a1 + 48) + v6));
        v11 = v10 & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v9 = 4;
      if (v13 > 4)
      {
        v7 = *(_QWORD *)(a1 + 88);
        if (v7)
        {
          v8 = 4;
          goto LABEL_20;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1BA85A798);
          }
          if (v8 >= v13)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_20;
        }
      }
    }
  }
  return 1;
}

void sub_1BA85A7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;

  v4 = type metadata accessor for FormatRegex();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v34 - v8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v34 - v12;
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v19 = a2 + 56;
  if (!v18)
    goto LABEL_8;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v25 = v11;
    v26 = *(_QWORD *)(v11 + 72);
    sub_1BA4C2DD8(*(_QWORD *)(a1 + 48) + v26 * i, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
    v27 = v13;
    sub_1BA5193C4((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
    sub_1BB8745CC();
    sub_1BB872A90();
    v28 = sub_1BB874608();
    v29 = -1 << *(_BYTE *)(a2 + 32);
    v30 = v28 & ~v29;
    if (((*(_QWORD *)(v19 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    {
LABEL_35:
      sub_1BA865D80((uint64_t)v9);
      return;
    }
    v31 = ~v29;
    while (1)
    {
      sub_1BA4C2DD8(*(_QWORD *)(a2 + 48) + v30 * v26, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
      if (*v6 == *v9 && v6[1] == v9[1])
        break;
      v33 = sub_1BB874398();
      sub_1BA865D80((uint64_t)v6);
      if ((v33 & 1) != 0)
        goto LABEL_32;
      v30 = (v30 + 1) & v31;
      if (((*(_QWORD *)(v19 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        goto LABEL_35;
    }
    sub_1BA865D80((uint64_t)v6);
LABEL_32:
    sub_1BA865D80((uint64_t)v9);
    a1 = v34;
    v11 = v25;
    v13 = v27;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_8:
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v21 >= v36)
      return;
    v22 = *(_QWORD *)(v35 + 8 * v21);
    v23 = v14 + 1;
    if (!v22)
    {
      v23 = v14 + 2;
      if (v14 + 2 >= v36)
        return;
      v22 = *(_QWORD *)(v35 + 8 * v23);
      if (!v22)
      {
        v23 = v14 + 3;
        if (v14 + 3 >= v36)
          return;
        v22 = *(_QWORD *)(v35 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_21:
    v37 = (v22 - 1) & v22;
    v38 = v23;
  }
  v24 = v14 + 4;
  if (v14 + 4 >= v36)
    return;
  v22 = *(_QWORD *)(v35 + 8 * v24);
  if (v22)
  {
    v23 = v14 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v36)
      return;
    v22 = *(_QWORD *)(v35 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1BA85AAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v13 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
      goto LABEL_21;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_20;
      v8 = 2;
      if ((unint64_t)(v4 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_20;
      v8 = 3;
      if ((unint64_t)(v4 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
      {
LABEL_20:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_21:
        sub_1BAB070A8(*(_QWORD *)(a2 + 40), *(_BYTE *)(*(_QWORD *)(a1 + 48) + v6));
        v11 = v10 & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v9 = 4;
      if (v13 > 4)
      {
        v7 = *(_QWORD *)(a1 + 88);
        if (v7)
        {
          v8 = 4;
          goto LABEL_20;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1BA85AEFCLL);
          }
          if (v8 >= v13)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_20;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA85AF78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v9;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v9 = (unint64_t)(v3 + 63) >> 6;
  if ((v4 & *(_QWORD *)(a1 + 56)) != 0)
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 1)
    return 1;
  if (*(_QWORD *)(a1 + 64))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 2)
    return 1;
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_18;
  if ((unint64_t)(v3 + 63) >> 6 <= 3)
    return 1;
  if (*(_QWORD *)(a1 + 80))
  {
LABEL_18:
    sub_1BB8745CC();
    FormatFontTrait.rawValue.getter();
    sub_1BB872A90();
    swift_bridgeObjectRelease();
    v7 = sub_1BB874608() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
    return 0;
  }
  v5 = 4;
  if (v9 > 4)
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      while (1)
      {
        v6 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          JUMPOUT(0x1BA85B6A0);
        }
        if (v6 >= v9)
          return 1;
        ++v5;
        if (*(_QWORD *)(a1 + 56 + 8 * v6))
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  return 1;
}

uint64_t sub_1BA85B740(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 56);
    v24 = result + 56;
    v6 = 1 << *(_BYTE *)(result + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & v5;
    v25 = (unint64_t)(v6 + 63) >> 6;
    v26 = result;
    v9 = a2 + 56;
    if ((v7 & v5) == 0)
      goto LABEL_8;
LABEL_7:
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
    {
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
      sub_1BB8745CC();
      if (v15)
        v16 = 0x656E696C66666FLL;
      else
        v16 = 0x746C7561666564;
      sub_1BB872A90();
      swift_bridgeObjectRelease();
      v17 = sub_1BB874608();
      v18 = -1 << *(_BYTE *)(a2 + 32);
      v19 = v17 & ~v18;
      if (((*(_QWORD *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return 0;
      v20 = v4;
      v21 = ~v18;
      while (1)
      {
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v19) ? 0x656E696C66666FLL : 0x746C7561666564;
        if (v22 == v16)
          break;
        v23 = sub_1BB874398();
        result = swift_bridgeObjectRelease_n();
        if ((v23 & 1) != 0)
          goto LABEL_37;
        v19 = (v19 + 1) & v21;
        if (((*(_QWORD *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          return 0;
      }
      result = swift_bridgeObjectRelease_n();
LABEL_37:
      v4 = v20;
      v3 = v26;
      if (v8)
        goto LABEL_7;
LABEL_8:
      v12 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      if (v12 >= v25)
        return 1;
      v13 = *(_QWORD *)(v24 + 8 * v12);
      ++v4;
      if (!v13)
      {
        v4 = v12 + 1;
        if (v12 + 1 >= v25)
          return 1;
        v13 = *(_QWORD *)(v24 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 2;
          if (v12 + 2 >= v25)
            return 1;
          v13 = *(_QWORD *)(v24 + 8 * v4);
          if (!v13)
          {
            v4 = v12 + 3;
            if (v12 + 3 >= v25)
              return 1;
            v13 = *(_QWORD *)(v24 + 8 * v4);
            if (!v13)
            {
              v14 = v12 + 4;
              if (v14 >= v25)
                return 1;
              v13 = *(_QWORD *)(v24 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  v4 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_42;
                  if (v4 >= v25)
                    return 1;
                  v13 = *(_QWORD *)(v24 + 8 * v4);
                  ++v14;
                  if (v13)
                    goto LABEL_23;
                }
              }
              v4 = v14;
            }
          }
        }
      }
LABEL_23:
      v8 = (v13 - 1) & v13;
    }
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t sub_1BA85B9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_23;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_22;
      v7 = 2;
      if (v11 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_22;
        v7 = 3;
        if (v11 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (v6)
            goto LABEL_22;
          v7 = 4;
          if (v11 > 4)
          {
            v6 = *(_QWORD *)(a1 + 88);
            if (!v6)
            {
              v8 = 5;
              if (v11 > 5)
              {
                v6 = *(_QWORD *)(a1 + 96);
                if (v6)
                {
                  v7 = 5;
                  goto LABEL_22;
                }
                while (1)
                {
                  v7 = v8 + 1;
                  if (__OFADD__(v8, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x1BA85BDB8);
                  }
                  if (v7 >= v11)
                    break;
                  v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                  ++v8;
                  if (v6)
                    goto LABEL_22;
                }
              }
              return 1;
            }
LABEL_22:
            v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_23:
            v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
            sub_1BB8745CC();
            __asm { BR              X8 }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA85BDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  int64_t v13;
  _BYTE v14[72];

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v13 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
      goto LABEL_23;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_22;
      v8 = 2;
      if (v13 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_22;
      v8 = 3;
      if (v13 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_22;
      v8 = 4;
      if (v13 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_22:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_23:
        v10 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v6);
        sub_1BB8745CC();
        sub_1BA4B9048((uint64_t)v14, v10);
        v11 = sub_1BB874608() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v9 = 5;
      if (v13 > 5)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1BA85C224);
          }
          if (v8 >= v13)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_22;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1BA85C270(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  sub_1BA6BCBF8(0);
  return a1;
}

uint64_t sub_1BA85C2B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

_QWORD *sub_1BA85C2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA6F0104();
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = v2;
  v5[3] = 2 * ((uint64_t)(v6 - 32) / 40);
  v7 = sub_1BA85EA18((uint64_t)&v9, (uint64_t)(v5 + 4), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

uint64_t sub_1BA85C3A0(uint64_t a1)
{
  return sub_1BA6744D8(a1, (unint64_t *)&unk_1ED3A09F8, (uint64_t)&type metadata for FormatItemTrait);
}

uint64_t sub_1BA85C3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, &qword_1ED39E248, MEMORY[0x1E0DEDBC8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 29;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 2);
  v6 = sub_1BA85EAD8(&v8, (_DWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BA85C4AC(uint64_t a1)
{
  return sub_1BA6744D8(a1, &qword_1EF2A91A0, (uint64_t)&type metadata for SportsDataConfigurationEventStatus);
}

uint64_t sub_1BA85C4C0(uint64_t a1)
{
  return sub_1BA6744D8(a1, &qword_1ED3CFBB0, (uint64_t)&type metadata for FormatResizeAutoMask);
}

uint64_t sub_1BA85C4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, &qword_1ED3AB8A0, (uint64_t)&type metadata for FormatJsonConfigKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_1BA5C5624(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

size_t sub_1BA85C5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3AB860, (uint64_t (*)(uint64_t))type metadata accessor for FormatRegex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = *(_QWORD *)(type metadata accessor for FormatRegex() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      sub_1BA85EC6C(&v11, (uint64_t)v6 + v5, v1, a1);
      v10 = v9;
      swift_bridgeObjectRetain();
      sub_1BA6EBD18();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA85C6E8(uint64_t a1)
{
  return sub_1BA6744D8(a1, (unint64_t *)&unk_1EF2B17B0, (uint64_t)&type metadata for FormatPrintNodeValue);
}

_QWORD *sub_1BA85C700(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, &qword_1ED3A1750, (uint64_t)&type metadata for FormatContentPoolSlotPlaceholder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_1BA85EF28(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1BA85C808(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, &qword_1ED3B9F78, (uint64_t)&type metadata for FormatContentPoolPlaceholder, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 + 31;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 6);
  v6 = sub_1BA85F144(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

size_t sub_1BA85C900(uint64_t a1)
{
  return sub_1BA85E1FC(a1, sub_1BA865F58, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatistic);
}

_QWORD *sub_1BA85C914(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3BA020, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_1BA85F408(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BA85CA14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1EF2A9160, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry);
}

_QWORD *sub_1BA85CA28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1BA860CB0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

size_t sub_1BA85CB20(uint64_t a1)
{
  return sub_1BA85E1FC(a1, sub_1BA865088, (uint64_t (*)(_QWORD))type metadata accessor for FormatScopedOption);
}

_QWORD *sub_1BA85CB34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA8650A4();
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  v5 = sub_1BA85FBC0((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BA85CC20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED3B9D40, (uint64_t (*)(uint64_t))type metadata accessor for FeedBannerAd);
}

uint64_t sub_1BA85CC34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 144 * a3;
        if (v10 < (unint64_t)&v8[18 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 144 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&unk_1ED39DC38, (uint64_t)&type metadata for FeedIssue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 144);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85CDD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED3B9E60, type metadata accessor for HeadlineViewLayout.Context);
}

_QWORD *sub_1BA85CDEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4B07F0(0, &qword_1EF2A91C8, (uint64_t (*)(uint64_t))sub_1BA865180, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  v5 = sub_1BA85FDCC(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1BA85CEF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1BA85FFF4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BA85CFE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED39EAD0, (uint64_t (*)(uint64_t))type metadata accessor for FeedCustomItem);
}

uint64_t sub_1BA85CFFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1EF2A92F0, (uint64_t (*)(uint64_t))type metadata accessor for FeedPuzzleStatistic);
}

uint64_t sub_1BA85D010(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v11 = a2 + (a3 << 6);
        if (v11 < (unint64_t)&v8[8 * v5 + 4] && (unint64_t)(v8 + 4) < v11 + (v5 << 6))
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, &qword_1EF2B17D0, (uint64_t)&type metadata for FeedPuzzleType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 + 31;
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 6);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D198(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 168 * a3;
        if (v10 < (unint64_t)&v8[21 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 168 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, &qword_1ED3AB850, (uint64_t)&type metadata for FeedPuzzle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 168);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D33C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED39C1C0, (uint64_t (*)(uint64_t))type metadata accessor for FeedWebEmbed);
}

uint64_t sub_1BA85D350(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 152 * a3;
        if (v10 < (unint64_t)&v8[19 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 152 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&unk_1ED3AB840, (uint64_t)&type metadata for FeedTag, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 152);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D4F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 24 * a3;
        if (v10 < (unint64_t)&v8[3 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 24 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, &qword_1ED39DC30, (uint64_t)&type metadata for FeedTopicCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D690(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B9CF0, (uint64_t)&type metadata for FeedScoredHeadline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D814(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA85E45C(a1, a2, a3, a4, (unint64_t *)&qword_1ED3B9950);
}

uint64_t sub_1BA85D828(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, (unint64_t *)&unk_1ED3A09D0, (uint64_t (*)(uint64_t))type metadata accessor for FeedEngagementBanner);
}

uint64_t sub_1BA85D83C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 88 * a3;
        if (v10 < (unint64_t)&v8[11 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 88 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, &qword_1ED3AC810, (uint64_t)&type metadata for FeedGapOffline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 88);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85D9DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 56 * a3;
        if (v10 < (unint64_t)&v8[7 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 56 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B9D20, (uint64_t)&type metadata for FeedGap, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 56);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

_QWORD *sub_1BA85DB80(unint64_t a1)
{
  return sub_1BA85E330(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1BA86153C);
}

_QWORD *sub_1BA85DB8C(unint64_t a1)
{
  return sub_1BA85E330(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1BA861774);
}

uint64_t sub_1BA85DB98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA4B39B8(a1, a2, a3, a4, &qword_1ED3BBAE0, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItemResolution);
}

_QWORD *sub_1BA85DBAC(unint64_t a1)
{
  return sub_1BA85E330(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1BA7B96C8);
}

uint64_t sub_1BA85DBB8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9FA0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85DD3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 24 * a3;
        if (v10 < (unint64_t)&v8[3 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 24 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, &qword_1ED3AC108, (uint64_t)&type metadata for FeedChannelCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

_QWORD *sub_1BA85DEDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4AD288(0, (unint64_t *)&unk_1ED3B9FF0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_1BA8606A8(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BA85DFD4(uint64_t a1)
{
  return sub_1BA6744D8(a1, &qword_1ED3CFB40, (uint64_t)&type metadata for ContextMenu.ItemOptions);
}

_QWORD *sub_1BA85DFE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4B07F0(0, &qword_1EF2B1610, (uint64_t (*)(uint64_t))sub_1BA865254, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_1BA86083C((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1BA85E0F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1EF2B1600, (uint64_t (*)(uint64_t))sub_1BA8651EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 1;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  v6 = sub_1BA860A54(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BA6EBD18();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

size_t sub_1BA85E1E8(uint64_t a1)
{
  return sub_1BA85E1FC(a1, sub_1BA86506C, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCompilingPackage);
}

size_t sub_1BA85E1FC(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  size_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  a2(0);
  v6 = *(_QWORD *)(a3(0) - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v9);
  if (v7)
  {
    if (result - v8 != 0x8000000000000000 || v7 != -1)
    {
      v9[2] = v3;
      v9[3] = 2 * ((uint64_t)(result - v8) / v7);
      sub_1BA85F908(&v14, (uint64_t)v9 + v8, v3, a1, a3);
      v13 = v12;
      swift_bridgeObjectRetain();
      sub_1BA6EBD18();
      if (v13 == v3)
        return (size_t)v9;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BA85E318(unint64_t a1)
{
  return sub_1BA85E330(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1BA65F4F8);
}

_QWORD *sub_1BA85E324(unint64_t a1)
{
  return sub_1BA85E330(a1, (void (*)(_QWORD *, uint64_t, unint64_t))sub_1BA861C94);
}

_QWORD *sub_1BA85E330(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3BA020, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

uint64_t sub_1BA85E448(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1BA85E45C(a1, a2, a3, a4, (unint64_t *)&qword_1ED3B9860);
}

uint64_t sub_1BA85E45C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6)
      return MEMORY[0x1E0DEE9D8];
    v10 = v6;
    if (v6 <= 0)
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0)
          goto LABEL_19;
        v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8)
          goto LABEL_19;
        sub_1BA49A224(0, a5);
        swift_arrayInitWithCopy();
        return (uint64_t)v11;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3BA020, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85E60C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x1E0DEE9D8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 24 * a3;
        if (v10 < (unint64_t)&v8[3 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 24 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      sub_1BA4AD288(0, (unint64_t *)&unk_1ED3CFB60, (uint64_t)&type metadata for FeedJournalEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 24);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85E7AC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1BACAA5CC((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA85EA18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v11 = 0;
      v12 = a4 + 32;
      v13 = a3 - 1;
      while (v11 < *(_QWORD *)(a4 + 16))
      {
        result = sub_1BA4C010C(v12, v10);
        if (v13 == v11)
          goto LABEL_11;
        v10 += 40;
        ++v11;
        v12 += 40;
        if (v9 == v11)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v8 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *sub_1BA85EAD8(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 4 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1BA85EC6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for FormatRegex();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - v13;
  v35 = a4;
  v17 = *(_QWORD *)(a4 + 56);
  v16 = a4 + 56;
  v15 = v17;
  v34 = v16;
  v18 = -1 << *(_BYTE *)(v16 - 24);
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  if (!a2)
  {
    v21 = 0;
LABEL_37:
    v29 = v34;
    *a1 = v35;
    a1[1] = v29;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v31 = -1 << *(_BYTE *)(v16 - 24);
  v32 = a1;
  v21 = 0;
  v22 = 0;
  v33 = (unint64_t)(63 - v18) >> 6;
  v30 = v33 - 1;
  if (!v20)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    v28 = *(_QWORD *)(v9 + 72);
    sub_1BA4C2DD8(*(_QWORD *)(v35 + 48) + v28 * v24, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
    sub_1BA5193C4((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
    sub_1BA5193C4((uint64_t)v14, a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatRegex);
    if (v22 == a3)
      goto LABEL_36;
    a2 += v28;
    if (v20)
      goto LABEL_8;
LABEL_9:
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v33)
      goto LABEL_32;
    v26 = *(_QWORD *)(v34 + 8 * v25);
    if (!v26)
      break;
LABEL_18:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v21 = v25;
  }
  v21 += 2;
  if (v25 + 1 >= v33)
  {
    v20 = 0;
    v21 = v25;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
    goto LABEL_14;
  v27 = v25 + 2;
  if (v25 + 2 >= v33)
    goto LABEL_32;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v21 = v25 + 3;
  if (v25 + 3 >= v33)
  {
    v20 = 0;
    v21 = v25 + 2;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
  {
LABEL_14:
    v25 = v21;
    goto LABEL_18;
  }
  v27 = v25 + 4;
  if (v25 + 4 >= v33)
  {
LABEL_32:
    v20 = 0;
LABEL_36:
    v18 = v31;
    a1 = v32;
    goto LABEL_37;
  }
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_17:
    v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v33)
    {
      v20 = 0;
      v21 = v30;
      goto LABEL_36;
    }
    v26 = *(_QWORD *)(v34 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

_QWORD *sub_1BA85EF28(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 24 * v15);
    v20 = v19[1];
    v21 = v19[2];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v22;
      result = v23;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BA85F144(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a4 + 64;
  v4 = -1 << *(_BYTE *)(a4 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_38:
    *result = a4;
    result[1] = v26;
    result[2] = ~v4;
    result[3] = v8;
    result[4] = v6;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v7 = a2;
  v27 = a3;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v8 = 0;
  v9 = 0;
  v25 = (unint64_t)(63 - v4) >> 6;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v8 << 6);
  while (1)
  {
    ++v9;
    v15 = (_QWORD *)(*(_QWORD *)(a4 + 56) + (v11 << 6));
    v16 = v15[1];
    v18 = v15[2];
    v17 = v15[3];
    v20 = v15[4];
    v19 = v15[5];
    v22 = v15[6];
    v21 = v15[7];
    *v7 = *v15;
    v7[1] = v16;
    v7[2] = v18;
    v7[3] = v17;
    v7[4] = v20;
    v7[5] = v19;
    v7[6] = v22;
    v7[7] = v21;
    if (v9 == v27)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v23;
      result = v24;
      a3 = v27;
      goto LABEL_38;
    }
    v7 += 8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v12 >= v25)
      goto LABEL_33;
    v13 = *(_QWORD *)(v26 + 8 * v12);
    if (!v13)
      break;
LABEL_18:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v8 = v12;
  }
  v8 += 2;
  if (v12 + 1 >= v25)
  {
    v6 = 0;
    v8 = v12;
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(v26 + 8 * v8);
  if (v13)
    goto LABEL_14;
  v14 = v12 + 2;
  if (v12 + 2 >= v25)
    goto LABEL_33;
  v13 = *(_QWORD *)(v26 + 8 * v14);
  if (v13)
    goto LABEL_17;
  v8 = v12 + 3;
  if (v12 + 3 >= v25)
  {
    v6 = 0;
    v8 = v12 + 2;
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(v26 + 8 * v8);
  if (v13)
  {
LABEL_14:
    v12 = v8;
    goto LABEL_18;
  }
  v14 = v12 + 4;
  if (v12 + 4 >= v25)
  {
LABEL_33:
    v6 = 0;
LABEL_37:
    a3 = v9;
    v4 = v23;
    result = v24;
    goto LABEL_38;
  }
  v13 = *(_QWORD *)(v26 + 8 * v14);
  if (v13)
  {
LABEL_17:
    v12 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v25)
    {
      v6 = 0;
      v8 = v25 - 1;
      goto LABEL_37;
    }
    v13 = *(_QWORD *)(v26 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1BA85F408(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1BA85F600(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1BB873BE8();
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B97E0);
    sub_1BA865AD4((unint64_t *)&qword_1ED3B97F0, (unint64_t *)&qword_1ED3B97E0);
    result = (_QWORD *)sub_1BB873084();
    v4 = v27;
    v7 = v28;
    v8 = v29;
    v9 = v30;
    v10 = v31;
    if (v6)
      goto LABEL_3;
LABEL_36:
    v11 = 0;
    goto LABEL_38;
  }
  v9 = 0;
  v19 = -1 << *(_BYTE *)(a4 + 32);
  v7 = a4 + 56;
  v8 = ~v19;
  v20 = -v19;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v10 = v21 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v11 = 0;
LABEL_38:
    v22 = v24;
LABEL_41:
    *v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (_QWORD *)v11;
  }
  if (a3 < 0)
    goto LABEL_48;
  v11 = 0;
  v25 = (unint64_t)(v8 + 64) >> 6;
  v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_1BB873C0C())
        goto LABEL_40;
      sub_1BA49A224(0, (unint64_t *)&qword_1ED3B97E0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v14 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v15 >= v25)
    {
      v10 = 0;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v15);
    if (v16)
      goto LABEL_23;
    v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25)
        goto LABEL_44;
      v16 = *(_QWORD *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        v15 = v9 + 3;
        goto LABEL_23;
      }
      v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (!v16)
      {
        v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          v10 = 0;
          v9 = v17;
          goto LABEL_40;
        }
        v16 = *(_QWORD *)(v7 + 8 * v15);
        if (!v16)
        {
          v18 = v9 + 6;
          while (v25 != v18)
          {
            v16 = *(_QWORD *)(v7 + 8 * v18++);
            if (v16)
            {
              v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          v10 = 0;
          v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v15 = v17;
LABEL_23:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v15 << 6);
    v9 = v15;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    v14 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      v11 = a3;
LABEL_40:
      v8 = v23;
      v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void sub_1BA85F908(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - v15;
  v37 = a4;
  v19 = *(_QWORD *)(a4 + 64);
  v18 = a4 + 64;
  v17 = v19;
  v36 = v18;
  v20 = -1 << *(_BYTE *)(v18 - 32);
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & v17;
  if (!a2)
  {
    v23 = 0;
LABEL_37:
    v31 = v36;
    *a1 = v37;
    a1[1] = v31;
    a1[2] = ~v20;
    a1[3] = v23;
    a1[4] = v22;
    return;
  }
  if (!a3)
  {
    v23 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v33 = -1 << *(_BYTE *)(v18 - 32);
  v34 = a1;
  v23 = 0;
  v24 = 0;
  v35 = (unint64_t)(63 - v20) >> 6;
  v32 = v35 - 1;
  if (!v22)
    goto LABEL_9;
LABEL_8:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    v30 = *(_QWORD *)(v11 + 72);
    sub_1BA4C2DD8(*(_QWORD *)(v37 + 56) + v30 * v26, (uint64_t)v13, a5);
    sub_1BA5193C4((uint64_t)v13, (uint64_t)v16, a5);
    sub_1BA5193C4((uint64_t)v16, a2, a5);
    if (v24 == a3)
      goto LABEL_36;
    a2 += v30;
    if (v22)
      goto LABEL_8;
LABEL_9:
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v27 >= v35)
      goto LABEL_32;
    v28 = *(_QWORD *)(v36 + 8 * v27);
    if (!v28)
      break;
LABEL_18:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v35)
  {
    v22 = 0;
    v23 = v27;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v36 + 8 * v23);
  if (v28)
    goto LABEL_14;
  v29 = v27 + 2;
  if (v27 + 2 >= v35)
    goto LABEL_32;
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v23 = v27 + 3;
  if (v27 + 3 >= v35)
  {
    v22 = 0;
    v23 = v27 + 2;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v36 + 8 * v23);
  if (v28)
  {
LABEL_14:
    v27 = v23;
    goto LABEL_18;
  }
  v29 = v27 + 4;
  if (v27 + 4 >= v35)
  {
LABEL_32:
    v22 = 0;
LABEL_36:
    v20 = v33;
    a1 = v34;
    goto LABEL_37;
  }
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
  {
LABEL_17:
    v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v35)
    {
      v22 = 0;
      v23 = v32;
      goto LABEL_36;
    }
    v28 = *(_QWORD *)(v36 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1BA85FBC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 v21[2];
  __int128 v22[2];

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
LABEL_36:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    sub_1BA4C010C(*(_QWORD *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_1BA4CECCC(v21, (uint64_t)v22);
    result = sub_1BA4CECCC(v22, v11);
    v11 += 40;
    if (v13 == a3)
    {
      v13 = a3;
LABEL_35:
      v7 = v20;
      goto LABEL_36;
    }
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v17);
  if (v18)
    goto LABEL_23;
  v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v12 = v17 + 1;
  if (v17 + 2 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_23;
  }
  v12 = v17 + 2;
  if (v17 + 3 >= v14)
    goto LABEL_34;
  v18 = *(_QWORD *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_23;
  }
  v19 = v17 + 4;
  v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v17 = v19;
LABEL_23:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
    goto LABEL_9;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v12 = v14 - 1;
      goto LABEL_34;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

_QWORD *sub_1BA85FDCC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_37:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v12;
  }
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
    goto LABEL_39;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v15);
    sub_1BA747A10(*(_QWORD *)(a4 + 56) + 32 * v15, (uint64_t)&v25 + 8);
    *(_QWORD *)&v25 = v19;
    v20 = v27;
    v30 = v27;
    v21 = v26;
    v28 = v25;
    v29 = v26;
    *(_OWORD *)v10 = v25;
    *(_OWORD *)(v10 + 16) = v21;
    *(_QWORD *)(v10 + 32) = v20;
    if (v12 == a3)
    {
      v22 = v19;
      v12 = a3;
      goto LABEL_36;
    }
    v10 += 40;
    result = v19;
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_35;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v18 = v11 + 2;
      ++v11;
      if (v16 + 1 >= v13)
        goto LABEL_35;
      v17 = *(_QWORD *)(v5 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v11 = v16 + 1;
      if (v16 + 2 >= v13)
        goto LABEL_35;
      v17 = *(_QWORD *)(v5 + 8 * (v16 + 2));
      if (v17)
      {
        v16 += 2;
      }
      else
      {
        v11 = v16 + 2;
        if (v16 + 3 >= v13)
          goto LABEL_35;
        v17 = *(_QWORD *)(v5 + 8 * (v16 + 3));
        if (!v17)
        {
          v18 = v16 + 4;
          v11 = v16 + 3;
          if (v16 + 4 < v13)
          {
            v17 = *(_QWORD *)(v5 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                v16 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_40;
                if (v16 >= v13)
                {
                  v11 = v13 - 1;
                  goto LABEL_35;
                }
                v17 = *(_QWORD *)(v5 + 8 * v16);
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v16 = v18;
            goto LABEL_21;
          }
LABEL_35:
          v8 = 0;
LABEL_36:
          v6 = v23;
          result = v24;
          goto LABEL_37;
        }
        v16 += 3;
      }
    }
LABEL_21:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1BA85FFF4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1BA8601F0(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;

  v30 = a4 + 64;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_39:
    *result = a4;
    result[1] = v30;
    result[2] = ~v5;
    result[3] = v10;
    result[4] = v7;
    return (_QWORD *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v9 = a2;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v28 = result;
  v10 = 0;
  v11 = 0;
  v29 = (unint64_t)(63 - v5) >> 6;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v10 << 6);
  while (1)
  {
    ++v11;
    v17 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 48 * v13);
    v21 = *v20;
    v22 = v20[1];
    v24 = v20[2];
    v23 = v20[3];
    v25 = v20[4];
    v26 = v20[5];
    *v9 = v19;
    v9[1] = v18;
    v9[2] = v21;
    v9[3] = v22;
    v9[4] = v24;
    v9[5] = v23;
    v9[6] = v25;
    v9[7] = v26;
    if (v11 == v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v9 += 8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v14 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    if (!v15)
    {
      v10 += 2;
      if (v14 + 1 >= v29)
      {
        v7 = 0;
        v10 = v14;
      }
      else
      {
        v15 = *(_QWORD *)(v30 + 8 * v10);
        if (v15)
          goto LABEL_14;
        v16 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_33;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (v15)
        {
LABEL_17:
          v14 = v16;
          goto LABEL_18;
        }
        v10 = v14 + 3;
        if (v14 + 3 < v29)
        {
          v15 = *(_QWORD *)(v30 + 8 * v10);
          if (v15)
          {
LABEL_14:
            v14 = v10;
            goto LABEL_18;
          }
          v16 = v14 + 4;
          if (v14 + 4 >= v29)
          {
LABEL_33:
            v7 = 0;
            goto LABEL_37;
          }
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_42;
              if (v14 >= v29)
              {
                v7 = 0;
                v10 = v29 - 1;
                goto LABEL_37;
              }
              v15 = *(_QWORD *)(v30 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v7 = 0;
        v10 = v14 + 2;
      }
LABEL_37:
      v8 = v11;
LABEL_38:
      v5 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BA860490(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BA8606A8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1BA86083C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BA860A54(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = result;
  v11 = 0;
  v12 = 0;
  v24 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 24 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = v18[2];
    *v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v14);
    v10[1] = v20;
    v10[2] = v19;
    v10[3] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_38;
    }
    v10 += 4;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    result = (_QWORD *)swift_retain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v24)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v24)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v24)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v24)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v24)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v24)
              {
                v8 = 0;
                v11 = v24 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v22;
      result = v23;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BA860CB0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BA860EAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for WebEmbedDataVisualizationURLDataSource, (uint64_t (*)(uint64_t))sub_1BA865434, &qword_1EF2A9280, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA860ED0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BA6CA500(0, (unint64_t *)&qword_1ED3AB0D0, (uint64_t)&qword_1ED3AB1E0, (uint64_t)&protocolRef_FCSportsProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
        sub_1BA865B14();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BB4CBA20(v16, i, a3);
          v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3AB1E0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA8610F4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BA6CA500(0, (unint64_t *)&qword_1ED39BF80, (uint64_t)&qword_1ED3B97E0, 0x1E0D58C60, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
        sub_1BA8652F4();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BB4CBAC8(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B97E0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA861318(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BA6CA500(0, &qword_1EF2A9300, (uint64_t)&qword_1ED3B9960, 0x1E0CD27A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
        sub_1BA865E00();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BB4CBAC8(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9960);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA86153C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FormatSupplementaryNodeDataLayoutAttributes, (uint64_t (*)(uint64_t))sub_1BA8652D8, (unint64_t *)&unk_1EF2A9210, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA861560(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = a5(0);
        v20 = sub_1BA4A2870(a6, a5, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v19, v20);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA861774(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FormatItemNodeDataLayoutAttributes, (uint64_t (*)(uint64_t))sub_1BA8652BC, &qword_1EF2A9200, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA861798(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, sub_1BA865D48, (uint64_t (*)(uint64_t))sub_1BA865D64, (unint64_t *)&qword_1ED3AAD90, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBBC4);
}

uint64_t sub_1BA8617BC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for DebugFormatUploadEntry, (uint64_t (*)(uint64_t))sub_1BA865378, &qword_1EF2A9240, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA8617E0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for DebugFormatPackageInventory, (uint64_t (*)(uint64_t))sub_1BA86535C, (unint64_t *)&unk_1EF2A9228, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA861804(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FeedGroupDebugCandidateItem, (uint64_t (*)(uint64_t))sub_1BA865C5C, (unint64_t *)&unk_1EF2BAF40, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA861828(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for FormatDataAccessibilityValue, (uint64_t (*)(uint64_t))sub_1BA8653FC, &qword_1EF2A9260, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA86184C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BA6CA500(0, &qword_1EF2A9248, (uint64_t)&qword_1ED39DAC0, 0x1E0DC33F0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
        sub_1BA865394();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BB4CBAC8(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BA49A224(0, &qword_1ED39DAC0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA861A70(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BA6CA500(0, &qword_1ED3AB100, (uint64_t)&qword_1ED3CF990, (uint64_t)&protocolRef_FCPuzzleTypeProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
        sub_1BA865BF4();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BB4CBA20(v16, i, a3);
          v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3CF990);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BA861C94(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1BA861560(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for DebugFormatFileTreeItem, (uint64_t (*)(uint64_t))sub_1BA86500C, &qword_1EF2A9188, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1BB4CBA74);
}

uint64_t sub_1BA861CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1BB86CAC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_1BA6D6160();
    v10 = sub_1BB873C78();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1BA4A2870((unint64_t *)&unk_1ED3B0548, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
      v14 = sub_1BB87285C();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v5, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1BA4A2870((unint64_t *)&unk_1ED3A1090, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
          v20 = sub_1BB872958();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

unint64_t sub_1BA861F1C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA861F40();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA861F40()
{
  unint64_t result;

  result = qword_1EF2A90F0;
  if (!qword_1EF2A90F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingAllColumnsStrategy, &type metadata for FormatCodingAllColumnsStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2A90F0);
  }
  return result;
}

uint64_t sub_1BA861F84()
{
  return sub_1BA862050((unint64_t *)&qword_1ED3B96E8, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB3D8]);
}

unint64_t sub_1BA861FB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED39BF68;
  if (!qword_1ED39BF68)
  {
    sub_1BA4AD288(255, (unint64_t *)&qword_1ED3B9610, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = MEMORY[0x1E0DEB420];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED39BF68);
  }
  return result;
}

uint64_t sub_1BA862024()
{
  return sub_1BA862050(&qword_1ED39BFB8, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB3B8]);
}

uint64_t sub_1BA862050(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BA50CAA8(255, (unint64_t *)&qword_1ED3B96E0, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    v8 = a2;
    result = MEMORY[0x1BCCE5B24](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatCodingAllColumnsStrategy()
{
  return &type metadata for FormatCodingAllColumnsStrategy;
}

uint64_t sub_1BA8620DC(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, &qword_1ED3B9A00, (void (*)(void))sub_1BA61CDBC);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

void sub_1BA862420(unint64_t a1)
{
  sub_1BA8656D8(a1, (unint64_t *)&unk_1ED39C048, (unint64_t *)&unk_1ED39C010, 0x1E0D60B10, (unint64_t *)&qword_1ED39C020);
}

uint64_t sub_1BA862444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1BA50CAA8(0, &qword_1ED3B9A20, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v3 = sub_1BB873C78();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1BB8745CC();
      swift_bridgeObjectRetain();
      sub_1BB872A90();
      result = sub_1BB874608();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1BB874398(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1BB874398();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA862600(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, &qword_1ED3B9A08, (void (*)(void))sub_1BA832824);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA862B80(uint64_t a1)
{
  return sub_1BA863120(a1, &qword_1ED3C04A8, (void (*)(void))sub_1BA865EAC);
}

uint64_t sub_1BA862B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1BA50CAA8(0, &qword_1ED3A3020, MEMORY[0x1E0DEE720], MEMORY[0x1E0DEE728], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v3 = sub_1BB873C78();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_DWORD *)(v6 + 4 * v4);
      sub_1BB8745CC();
      sub_1BB8745F0();
      result = sub_1BB874608();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_DWORD *)(v14 + 4 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_DWORD *)(v14 + 4 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_DWORD *)(v14 + 4 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA862CF8(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, (unint64_t *)&unk_1ED3B9A10, (void (*)(void))sub_1BA822498);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA863104(uint64_t a1)
{
  return sub_1BA863120(a1, &qword_1ED39DAE8, (void (*)(void))sub_1BA83D24C);
}

uint64_t sub_1BA863120(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1BA756C1C(0, a2, a3);
    v5 = sub_1BB873C78();
    v6 = 0;
    v7 = v5 + 56;
    v8 = a1 + 32;
    while (1)
    {
      v9 = *(unsigned __int8 *)(v8 + v6);
      sub_1BB8745CC();
      sub_1BB8745D8();
      result = sub_1BB874608();
      v11 = -1 << *(_BYTE *)(v5 + 32);
      v12 = result & ~v11;
      v13 = v12 >> 6;
      v14 = *(_QWORD *)(v7 + 8 * (v12 >> 6));
      v15 = 1 << v12;
      v16 = *(_QWORD *)(v5 + 48);
      if (((1 << v12) & v14) != 0)
      {
        if (*(unsigned __int8 *)(v16 + v12) == v9)
          goto LABEL_3;
        v17 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v17;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v7 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
            break;
          if (*(unsigned __int8 *)(v16 + v12) == v9)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v7 + 8 * v13) = v15 | v14;
      *(_BYTE *)(v16 + v12) = v9;
      v18 = *(_QWORD *)(v5 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v5 + 16) = v20;
LABEL_3:
      if (++v6 == v3)
        return v5;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA86325C(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, &qword_1ED39DAE0, (void (*)(void))sub_1BA865E68);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA863650(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, &qword_1EF2A91C0, (void (*)(void))sub_1BA865124);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 48);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA8639BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1BA756C1C(0, (unint64_t *)&unk_1ED3CFA38, (void (*)(void))sub_1BA835484);
    v3 = sub_1BB873C78();
    v4 = 0;
    v5 = v3 + 56;
    v27 = v1;
    v28 = a1 + 32;
LABEL_6:
    v8 = (uint64_t *)(v28 + 16 * v4);
    v9 = *v8;
    v10 = v8[1];
    sub_1BB8745CC();
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
        sub_1BB8745D8();
        break;
      default:
        sub_1BB8745D8();
        swift_bridgeObjectRetain();
        sub_1BB872A90();
        break;
    }
    v11 = sub_1BB874608();
    v12 = ~(-1 << *(_BYTE *)(v3 + 32));
    v13 = v11 & v12;
    v14 = (v11 & (unint64_t)v12) >> 6;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    v16 = 1 << (v11 & v12);
    if ((v16 & v15) == 0)
      goto LABEL_50;
    while (1)
    {
      v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v13);
      v18 = *v17;
      v19 = v17[1];
      switch(v19)
      {
        case 0uLL:
          if (v10)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0);
          v6 = v9;
          v7 = 0;
          goto LABEL_4;
        case 1uLL:
          if (v10 != 1)
            goto LABEL_47;
          sub_1BA766C18(*v17, 1uLL);
          v6 = v9;
          v7 = 1;
          goto LABEL_4;
        case 2uLL:
          if (v10 != 2)
            goto LABEL_47;
          sub_1BA766C18(*v17, 2uLL);
          v6 = v9;
          v7 = 2;
          goto LABEL_4;
        case 3uLL:
          if (v10 != 3)
            goto LABEL_47;
          sub_1BA766C18(*v17, 3uLL);
          v6 = v9;
          v7 = 3;
          goto LABEL_4;
        case 4uLL:
          if (v10 != 4)
            goto LABEL_47;
          sub_1BA766C18(*v17, 4uLL);
          v6 = v9;
          v7 = 4;
          goto LABEL_4;
        case 5uLL:
          if (v10 != 5)
            goto LABEL_47;
          sub_1BA766C18(*v17, 5uLL);
          v6 = v9;
          v7 = 5;
          goto LABEL_4;
        case 6uLL:
          if (v10 != 6)
            goto LABEL_47;
          sub_1BA766C18(*v17, 6uLL);
          v6 = v9;
          v7 = 6;
          goto LABEL_4;
        case 7uLL:
          if (v10 != 7)
            goto LABEL_47;
          sub_1BA766C18(*v17, 7uLL);
          v6 = v9;
          v7 = 7;
          goto LABEL_4;
        case 8uLL:
          if (v10 != 8)
            goto LABEL_47;
          sub_1BA766C18(*v17, 8uLL);
          v6 = v9;
          v7 = 8;
          goto LABEL_4;
        case 9uLL:
          if (v10 != 9)
            goto LABEL_47;
          sub_1BA766C18(*v17, 9uLL);
          v6 = v9;
          v7 = 9;
          goto LABEL_4;
        case 0xAuLL:
          if (v10 != 10)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0xAuLL);
          v6 = v9;
          v7 = 10;
          goto LABEL_4;
        case 0xBuLL:
          if (v10 != 11)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0xBuLL);
          v6 = v9;
          v7 = 11;
          goto LABEL_4;
        case 0xCuLL:
          if (v10 != 12)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0xCuLL);
          v6 = v9;
          v7 = 12;
          goto LABEL_4;
        case 0xDuLL:
          if (v10 != 13)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0xDuLL);
          v6 = v9;
          v7 = 13;
          goto LABEL_4;
        case 0xEuLL:
          if (v10 != 14)
            goto LABEL_47;
          sub_1BA766C18(*v17, 0xEuLL);
          v6 = v9;
          v7 = 14;
          goto LABEL_4;
        default:
          if (v10 < 0xF)
          {
LABEL_47:
            sub_1BA682148(v9, v10);
            sub_1BA682148(v18, v19);
            sub_1BA766C18(v18, v19);
            sub_1BA766C18(v9, v10);
          }
          else
          {
            if (v18 == v9 && v19 == v10)
            {
              sub_1BA682148(v9, v10);
              sub_1BA682148(v9, v10);
              sub_1BA766C18(v9, v10);
              sub_1BA766C18(v9, v10);
LABEL_53:
              v6 = v9;
              v7 = v10;
LABEL_4:
              sub_1BA766C18(v6, v7);
              v1 = v27;
LABEL_5:
              if (++v4 == v1)
                return v3;
              goto LABEL_6;
            }
            v21 = sub_1BB874398();
            sub_1BA682148(v9, v10);
            sub_1BA682148(v18, v19);
            sub_1BA766C18(v18, v19);
            sub_1BA766C18(v9, v10);
            if ((v21 & 1) != 0)
              goto LABEL_53;
          }
          v13 = (v13 + 1) & v12;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v5 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
          {
            v1 = v27;
LABEL_50:
            *(_QWORD *)(v5 + 8 * v14) = v16 | v15;
            v22 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v13);
            *v22 = v9;
            v22[1] = v10;
            v23 = *(_QWORD *)(v3 + 16);
            v24 = __OFADD__(v23, 1);
            v25 = v23 + 1;
            if (v24)
            {
              __break(1u);
              JUMPOUT(0x1BA863F14);
            }
            *(_QWORD *)(v3 + 16) = v25;
            goto LABEL_5;
          }
          break;
      }
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA863F8C(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, (unint64_t *)&unk_1ED3CFA48, (void (*)(void))sub_1BA82C990);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA864390(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA756C1C(0, &qword_1EF2A92E0, (void (*)(void))sub_1BA865DBC);
    sub_1BB873C78();
    v2 = *(unsigned __int8 *)(a1 + 32);
    sub_1BB8745CC();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BA86483C(uint64_t a1)
{
  return sub_1BA863120(a1, &qword_1EF2A9190, (void (*)(void))sub_1BA865028);
}

uint64_t sub_1BA864858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  sub_1BA756C1C(0, &qword_1ED3CFA58, (void (*)(void))sub_1BA821B50);
  v3 = sub_1BB873C78();
  v4 = 0;
  v5 = v3 + 56;
  v17 = v1;
  do
  {
    v6 = *(unsigned __int8 *)(a1 + 32 + v4);
    sub_1BB8745CC();
    if ((_DWORD)v6 != 12)
    {
      sub_1BB8745D8();
      __asm { BR              X8 }
    }
    sub_1BB8745D8();
    v7 = sub_1BB874608();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) != 12)
      {
        v9 = (v9 + 1) & v8;
        v10 = v9 >> 6;
        v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
        v12 = 1 << v9;
        if ((v11 & (1 << v9)) == 0)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) = 12;
      v13 = *(_QWORD *)(v3 + 16);
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
        JUMPOUT(0x1BA864D7CLL);
      }
      *(_QWORD *)(v3 + 16) = v15;
    }
    ++v4;
  }
  while (v4 != v17);
  return v3;
}

uint64_t sub_1BA864E0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1BA756C1C(0, &qword_1ED3A3008, (void (*)(void))sub_1BA864F60);
    v3 = sub_1BB873C78();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      sub_1BB8745CC();
      sub_1BB8745D8();
      result = sub_1BB874608();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (v7 == *(unsigned __int8 *)(v14 + v10))
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (v7 == *(unsigned __int8 *)(v14 + v10))
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

unint64_t sub_1BA864F60()
{
  unint64_t result;

  result = qword_1ED3A2AF0;
  if (!qword_1ED3A2AF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB938430, &type metadata for FormatViewController.Event);
    atomic_store(result, (unint64_t *)&qword_1ED3A2AF0);
  }
  return result;
}

unint64_t sub_1BA864FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A9170;
  if (!qword_1EF2A9170)
  {
    sub_1BA6CA500(255, (unint64_t *)&unk_1ED3AB0B0, (uint64_t)&qword_1ED3CF910, (uint64_t)&protocolRef_FCPuzzleProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A9170);
  }
  return result;
}

void sub_1BA86500C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A9180, (uint64_t (*)(uint64_t))type metadata accessor for DebugFormatFileTreeItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BA865028()
{
  unint64_t result;

  result = qword_1EF2A9198;
  if (!qword_1EF2A9198)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8D74FC, &type metadata for PuzzleLoadingState);
    atomic_store(result, (unint64_t *)&qword_1EF2A9198);
  }
  return result;
}

void sub_1BA86506C(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1EF2A91A8, (uint64_t (*)(uint64_t))type metadata accessor for DebugFormatCompilingPackage, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1BA865088(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3AF830, (uint64_t (*)(uint64_t))type metadata accessor for FormatScopedOption, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1BA8650A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AF810)
  {
    sub_1BA4D9CE8(255, (unint64_t *)&qword_1ED3B17D0);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AF810);
  }
}

void sub_1BA865108(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3B9540, (uint64_t (*)(uint64_t))type metadata accessor for FormatPackageInventory, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BA865124()
{
  unint64_t result;

  result = qword_1EF2C5130;
  if (!qword_1EF2C5130)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB8F0660, &type metadata for FormatDerivedDataOptionScope);
    atomic_store(result, (unint64_t *)&qword_1EF2C5130);
  }
  return result;
}

uint64_t sub_1BA865168(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1BA865180()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2A91D0)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2A91D0);
  }
}

void sub_1BA8651EC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2A91E0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2A91E0);
  }
}

void sub_1BA865254()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2A91F0)
  {
    type metadata accessor for FormatStateViewNodeStateDataLayoutAttributes();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2A91F0);
  }
}

void sub_1BA8652BC(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A91F8, (uint64_t (*)(uint64_t))type metadata accessor for FormatItemNodeDataLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA8652D8(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A9208, (uint64_t (*)(uint64_t))type metadata accessor for FormatSupplementaryNodeDataLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BA8652F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED39BF88;
  if (!qword_1ED39BF88)
  {
    sub_1BA6CA500(255, (unint64_t *)&qword_1ED39BF80, (uint64_t)&qword_1ED3B97E0, 0x1E0D58C60, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1ED39BF88);
  }
  return result;
}

void sub_1BA86535C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A9220, (uint64_t (*)(uint64_t))type metadata accessor for DebugFormatPackageInventory, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA865378(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A9238, (uint64_t (*)(uint64_t))type metadata accessor for DebugFormatUploadEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BA865394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A9250;
  if (!qword_1EF2A9250)
  {
    sub_1BA6CA500(255, &qword_1EF2A9248, (uint64_t)&unk_1ED39DAC0, 0x1E0DC33F0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A9250);
  }
  return result;
}

void sub_1BA8653FC(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3CF808, (uint64_t (*)(uint64_t))type metadata accessor for FormatDataAccessibilityValue, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA865418(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2A9268, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6770], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BA865434(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3AB070, (uint64_t (*)(uint64_t))type metadata accessor for WebEmbedDataVisualizationURLDataSource, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

uint64_t sub_1BA865450(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1BB871E9C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_1BA865B7C();
    v10 = sub_1BB873C78();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1BA4A2870(&qword_1EF2A92A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FE8]);
      v14 = sub_1BB87285C();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v5, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1BA4A2870(&qword_1EF2A92B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FF0]);
          v20 = sub_1BB872958();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

void sub_1BA8656B4(unint64_t a1)
{
  sub_1BA8656D8(a1, (unint64_t *)&unk_1EF2A9288, (unint64_t *)&qword_1ED3B9950, 0x1E0DC3F10, &qword_1EF2A9298);
}

void sub_1BA8656D8(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v49;

  v7 = a1;
  v8 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_3:
      sub_1BA865A4C(0, a2, a3, a4, a5);
      v9 = sub_1BB873C78();
      if (!v8)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v10 = sub_1BB873F30();
      swift_bridgeObjectRelease();
      if (!v10)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v9 = MEMORY[0x1E0DEE9E8];
  if (v8)
    goto LABEL_8;
LABEL_4:
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    return;
LABEL_9:
  v12 = v9 + 56;
  v49 = v10;
  if ((v7 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v45 = v7;
    while (1)
    {
      v14 = MEMORY[0x1BCCE4630](v13, v7);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_37;
      }
      v16 = v14;
      v17 = sub_1BB8738AC();
      v18 = -1 << *(_BYTE *)(v9 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)(v12 + 8 * (v19 >> 6));
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_1BA49A224(0, a3);
        v23 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v19);
        v24 = sub_1BB8738B8();

        if ((v24 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v7 = v45;
          goto LABEL_12;
        }
        v25 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v25;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)(v12 + 8 * (v19 >> 6));
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v26 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v19);
          v27 = sub_1BB8738B8();

          if ((v27 & 1) != 0)
            goto LABEL_11;
        }
        v7 = v45;
      }
      *(_QWORD *)(v12 + 8 * v20) = v22 | v21;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v19) = v16;
      v28 = *(_QWORD *)(v9 + 16);
      v15 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v15)
        goto LABEL_38;
      *(_QWORD *)(v9 + 16) = v29;
LABEL_12:
      if (v13 == v49)
        return;
    }
  }
  v30 = 0;
  v46 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v30 != v46)
  {
    v31 = *(id *)(v7 + 32 + 8 * v30);
    v32 = sub_1BB8738AC();
    v33 = -1 << *(_BYTE *)(v9 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    v36 = *(_QWORD *)(v12 + 8 * (v34 >> 6));
    v37 = 1 << v34;
    if (((1 << v34) & v36) != 0)
    {
      sub_1BA49A224(0, a3);
      v38 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v34);
      v39 = sub_1BB8738B8();

      if ((v39 & 1) != 0)
        goto LABEL_24;
      v40 = ~v33;
      v34 = (v34 + 1) & v40;
      v35 = v34 >> 6;
      v36 = *(_QWORD *)(v12 + 8 * (v34 >> 6));
      v37 = 1 << v34;
      if ((v36 & (1 << v34)) != 0)
      {
        while (1)
        {
          v41 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v34);
          v42 = sub_1BB8738B8();

          if ((v42 & 1) != 0)
            break;
          v34 = (v34 + 1) & v40;
          v35 = v34 >> 6;
          v36 = *(_QWORD *)(v12 + 8 * (v34 >> 6));
          v37 = 1 << v34;
          if ((v36 & (1 << v34)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v10 = v49;
        goto LABEL_25;
      }
LABEL_32:
      v10 = v49;
    }
    *(_QWORD *)(v12 + 8 * v35) = v37 | v36;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v34) = v31;
    v43 = *(_QWORD *)(v9 + 16);
    v15 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v15)
      goto LABEL_39;
    *(_QWORD *)(v9 + 16) = v44;
LABEL_25:
    if (++v30 == v10)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_1BA865A4C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_1BA49A224(255, a3);
    sub_1BA865AD4(a5, a3);
    v8 = sub_1BB873C84();
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1BA865AD4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1BA49A224(255, a2);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BA865B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3AB0F0;
  if (!qword_1ED3AB0F0)
  {
    sub_1BA6CA500(255, (unint64_t *)&qword_1ED3AB0D0, (uint64_t)&qword_1ED3AB1E0, (uint64_t)&protocolRef_FCSportsProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3AB0F0);
  }
  return result;
}

void sub_1BA865B7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A92A0)
  {
    sub_1BB871E9C();
    sub_1BA4A2870(&qword_1EF2A92A8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52FE0], MEMORY[0x1E0D52FE8]);
    v0 = sub_1BB873C84();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A92A0);
  }
}

unint64_t sub_1BA865BF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A92B8;
  if (!qword_1EF2A92B8)
  {
    sub_1BA6CA500(255, &qword_1ED3AB100, (uint64_t)&qword_1ED3CF990, (uint64_t)&protocolRef_FCPuzzleTypeProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A92B8);
  }
  return result;
}

void sub_1BA865C5C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3CF700, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupDebugCandidateItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BA865C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A92C8;
  if (!qword_1EF2A92C8)
  {
    sub_1BA6CA500(255, (unint64_t *)&qword_1ED3B9630, (uint64_t)&qword_1ED3B9800, (uint64_t)&protocolRef_FCTagProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A92C8);
  }
  return result;
}

unint64_t sub_1BA865CE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A92D0;
  if (!qword_1EF2A92D0)
  {
    sub_1BA6CA500(255, &qword_1ED3BB4A0, (uint64_t)&qword_1ED3BA820, 0x1E0D58C20, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A92D0);
  }
  return result;
}

void sub_1BA865D48(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3A3A10, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6B18], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
}

void sub_1BA865D64(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3AAD80, (uint64_t (*)(uint64_t))sub_1BA865D48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

uint64_t sub_1BA865D80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatRegex();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BA865DBC()
{
  unint64_t result;

  result = qword_1EF2A92E8;
  if (!qword_1EF2A92E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPrintNodeValue, &type metadata for FormatPrintNodeValue);
    atomic_store(result, (unint64_t *)&qword_1EF2A92E8);
  }
  return result;
}

unint64_t sub_1BA865E00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A9308;
  if (!qword_1EF2A9308)
  {
    sub_1BA6CA500(255, &qword_1EF2A9300, (uint64_t)&qword_1ED3B9960, 0x1E0CD27A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA49A224);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A9308);
  }
  return result;
}

unint64_t sub_1BA865E68()
{
  unint64_t result;

  result = qword_1ED39C448;
  if (!qword_1ED39C448)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedCursorKind, &type metadata for FeedCursorKind);
    atomic_store(result, (unint64_t *)&qword_1ED39C448);
  }
  return result;
}

unint64_t sub_1BA865EAC()
{
  unint64_t result;

  result = qword_1ED3BBF30;
  if (!qword_1ED3BBF30)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ContextMenu.ItemOptions, &type metadata for ContextMenu.ItemOptions);
    atomic_store(result, (unint64_t *)&qword_1ED3BBF30);
  }
  return result;
}

unint64_t sub_1BA865EF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A9318;
  if (!qword_1EF2A9318)
  {
    sub_1BA6CA500(255, (unint64_t *)&qword_1ED3D4440, (uint64_t)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BA4EFE00);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A9318);
  }
  return result;
}

void sub_1BA865F58(uint64_t a1)
{
  sub_1BA4B07F0(a1, (unint64_t *)&unk_1ED3AF460, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStatistic, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

uint64_t sub_1BA865F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v4 = sub_1BB871E24();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FeedSponsorshipBannerAd();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v8 + 20), v4);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == *MEMORY[0x1E0D52E38])
  {
    v10 = *(_QWORD *)(a2 + 160);
    if (!v10)
      goto LABEL_8;
    v11 = *(_QWORD *)(v10 + 56);
LABEL_7:
    if ((~v11 & 0xF000000000000007) != 0)
    {
      v16[1] = v11;
      FormatColor.color.getter();
      v13 = v14;
      goto LABEL_10;
    }
LABEL_8:
    v13 = 0;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v13;
  }
  if (v9 == *MEMORY[0x1E0D52E18])
  {
    v12 = *(_QWORD *)(a2 + 160);
    if (!v12)
      goto LABEL_8;
    v11 = *(_QWORD *)(v12 + 64);
    goto LABEL_7;
  }
  result = sub_1BB87438C();
  __break(1u);
  return result;
}

void sub_1BA8660A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;

  sub_1BB8736F0();
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 72) & 1;
  else
    v7 = 0;
  objc_msgSend(a2, sel_setAccessibilityIgnoresInvertColors_, v7);
  v8 = (void *)sub_1BA865F78(a3, a1);
  objc_msgSend(a2, sel_setBackgroundColor_, v8);
  v9 = objc_msgSend(a2, sel_subviews);
  sub_1BA81CF48();
  v10 = sub_1BB872DB4();

  if (v10 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    v11 = sub_1BB873F30();
    if (v11)
    {
LABEL_6:
      v12 = 4;
      while (1)
      {
        v13 = v12 - 4;
        if ((v10 & 0xC000000000000001) != 0)
        {
          v14 = (id)MEMORY[0x1BCCE4630](v12 - 4, v10);
          v15 = __OFADD__(v13, 1);
          v16 = v12 - 3;
          if (v15)
            goto LABEL_31;
        }
        else
        {
          v14 = *(id *)(v10 + 8 * v12);
          v15 = __OFADD__(v13, 1);
          v16 = v12 - 3;
          if (v15)
          {
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
        }
        v25 = v14;
        swift_getObjectType();
        if (swift_conformsToProtocol2() ? v25 : 0)
          break;

        ++v12;
        if (v16 == v11)
          goto LABEL_17;
      }
      swift_bridgeObjectRelease_n();
      type metadata accessor for FeedSponsorshipBannerAd();
      v21 = sub_1BB871DB8();
      if (v21)
      {
        v22 = (void *)v21;
        objc_msgSend(v25, sel_removeFromSuperview);
        objc_msgSend(a2, sel_addSubview_, v22);
        sub_1BB873594();
        sub_1BB8736F0();
        if (v6)
          v23 = *(_BYTE *)(v6 + 72) & 1;
        else
          v23 = 0;
        objc_msgSend(v22, sel_setAccessibilityIgnoresInvertColors_, v23);
        objc_msgSend(v22, sel_setBackgroundColor_, v8);

      }
      else
      {
        sub_1BB873594();
        sub_1BB8736F0();
      }
      goto LABEL_29;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_6;
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  type metadata accessor for FeedSponsorshipBannerAd();
  v18 = sub_1BB871DB8();
  if (v18)
  {
    v19 = (void *)v18;
    objc_msgSend(a2, sel_addSubview_, v18);
    sub_1BB873594();
    sub_1BB8736F0();
    if (v6)
      v20 = *(_BYTE *)(v6 + 72) & 1;
    else
      v20 = 0;
    v25 = v8;
    objc_msgSend(v19, sel_setAccessibilityIgnoresInvertColors_, v20);
    objc_msgSend(v19, sel_setBackgroundColor_, v8);
    v8 = v19;
LABEL_29:

    v24 = v25;
    goto LABEL_30;
  }
  v24 = v8;
LABEL_30:

}

uint64_t sub_1BA8663DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;

  v6 = type metadata accessor for FormatPluginData();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BB8726B8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *a3 = 0x6D726177657250;
  a3[1] = 0xE700000000000000;
  v37 = a1;
  sub_1BA4C010C(a1, (uint64_t)(a3 + 2));
  sub_1BA657D64();
  *v12 = sub_1BB87345C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v13 = sub_1BB8726D0();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v36 = v8;
    v15 = type metadata accessor for FormatContent.Resolved();
    v16 = *(_QWORD **)(a2 + *(int *)(v15 + 32));
    if (v16[2])
    {
      v18 = v16[12];
      v17 = v16[13];
      v35 = a3;
      v32 = v18;
      v33 = v17;
      sub_1BA6D78DC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v35;
      swift_release();
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v18 + 16))
      {
LABEL_4:
        MEMORY[0x1E0C80A78](v15);
        v19 = v37;
        v32 = a2;
        v33 = v37;
        v20 = sub_1BA89F330((void (*)(_QWORD *))sub_1BA866AA4, (uint64_t)(&v34 - 4), v18);
        sub_1BA4A2E80(a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
        __swift_destroy_boxed_opaque_existential_1(v19);
        result = swift_bridgeObjectRelease();
LABEL_7:
        a3[7] = v20;
        return result;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    sub_1BA4B07F0(0, &qword_1ED3AB870, (uint64_t (*)(uint64_t))type metadata accessor for FormatSection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v21 = type metadata accessor for FormatSection();
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80);
    v23 = (v22 + 32) & ~v22;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1BB87CE70;
    v24 = v20 + v23;
    v25 = (uint64_t)v36;
    sub_1BA4C2DD8(a2, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
    v26 = swift_bridgeObjectRetain();
    v27 = sub_1BB13FE50(v26);
    swift_bridgeObjectRelease();
    v28 = sub_1BB140088(v27);
    v29 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v29);
    v30 = v37;
    v32 = v37;
    v33 = a2;
    v31 = sub_1BB7CB144((void (*)(uint64_t *__return_ptr, uint64_t))sub_1BA8679BC, (uint64_t)(&v34 - 4), v28);
    swift_bridgeObjectRelease();
    sub_1BA866C58(v25, v24);
    *(_QWORD *)(v24 + *(int *)(v21 + 20)) = v31;
    sub_1BA4A2E80(a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
    result = __swift_destroy_boxed_opaque_existential_1(v30);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA866760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[16];
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v60 = a3;
  v66 = a4;
  v59 = type metadata accessor for FormatContent.Resolved();
  MEMORY[0x1E0C80A78](v59);
  v7 = (_QWORD *)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = v7;
  v8 = (int *)type metadata accessor for FormatPluginData();
  MEMORY[0x1E0C80A78](v8);
  v58 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v47 - v11;
  v64 = *(_QWORD *)a1;
  v65 = *(_OWORD *)(a1 + 8);
  FormatContent.Resolved.convertSection(_:)(&v64, v7);
  sub_1BA4C2DD8((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatContent.Resolved);
  v13 = v8[6];
  v14 = a2 + v8[5];
  v15 = *(void **)v14;
  v16 = *(_BYTE *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 9);
  v18 = *(unsigned __int8 *)(v14 + 11);
  v47 = *(unsigned __int8 *)(v14 + 10);
  v48 = v18;
  v19 = *(_QWORD *)(v14 + 16);
  v20 = *(_QWORD *)(v14 + 32);
  v49 = *(_QWORD *)(v14 + 24);
  v50 = v20;
  v51 = *(_QWORD *)(v14 + 40);
  v52 = v19;
  v54 = *(unsigned __int8 *)(v14 + 48);
  v21 = *(_QWORD *)(v14 + 64);
  v53 = *(void **)(v14 + 56);
  v22 = *(_QWORD *)(v14 + 72);
  sub_1BA809900(a2 + v13, (uint64_t)&v12[v13]);
  v23 = *(void **)(a2 + v8[8]);
  v24 = *(_BYTE *)(a2 + v8[7]);
  v25 = v8[10];
  v55 = *(_QWORD *)(a2 + v8[9]);
  v26 = v55;
  v56 = v23;
  v27 = *(_QWORD *)(a2 + v25);
  v28 = *(_BYTE *)(a2 + v25 + 8);
  LOBYTE(v25) = *(_BYTE *)(a2 + v8[11]);
  v29 = *(_BYTE *)(a2 + v8[12]);
  v30 = &v12[v8[5]];
  v31 = v15;
  *(_QWORD *)v30 = v15;
  v30[8] = v16;
  v30[9] = v17;
  v30[10] = v47;
  v30[11] = v48;
  v32 = v49;
  v33 = v50;
  *((_QWORD *)v30 + 2) = v19;
  *((_QWORD *)v30 + 3) = v32;
  v34 = v51;
  *((_QWORD *)v30 + 4) = v33;
  *((_QWORD *)v30 + 5) = v34;
  v30[48] = v54;
  v35 = v53;
  *((_QWORD *)v30 + 7) = v53;
  *((_QWORD *)v30 + 8) = v21;
  *((_QWORD *)v30 + 9) = v22;
  *(_QWORD *)&v12[v8[8]] = v23;
  v12[v8[7]] = v24;
  *(_QWORD *)&v12[v8[9]] = v26;
  v36 = &v12[v8[10]];
  *(_QWORD *)v36 = v27;
  v36[8] = v28;
  v12[v8[11]] = v25;
  v12[v8[12]] = v29;
  v37 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v33, v34);
  swift_bridgeObjectRetain();
  v38 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v56;
  swift_bridgeObjectRetain();
  sub_1BA4A2E80((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FormatContent.Resolved);
  v40 = v58;
  sub_1BA4C2DD8((uint64_t)v12, v58, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
  v41 = swift_bridgeObjectRetain();
  v42 = sub_1BB13FE50(v41);
  swift_bridgeObjectRelease();
  v43 = sub_1BB140088(v42);
  swift_bridgeObjectRelease();
  v62 = v60;
  v63 = v12;
  v44 = sub_1BB7CB144((void (*)(uint64_t *__return_ptr, uint64_t))sub_1BA866C9C, (uint64_t)v61, v43);
  swift_bridgeObjectRelease();
  v45 = v66;
  sub_1BA866C58(v40, v66);
  *(_QWORD *)(v45 + *(int *)(type metadata accessor for FormatSection() + 20)) = v44;
  return sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
}

uint64_t sub_1BA866AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BA866760(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_1BA866AC0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v26 = a2[3];
  v27 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v26);
  v5 = type metadata accessor for FormatPluginData();
  v6 = (char *)a3 + *(int *)(v5 + 20);
  v7 = v6[8];
  v8 = v6[9];
  v9 = v6[10];
  v10 = v6[11];
  v12 = *((_QWORD *)v6 + 2);
  v11 = *((_QWORD *)v6 + 3);
  v13 = *((_QWORD *)v6 + 4);
  v14 = *((_QWORD *)v6 + 5);
  v15 = v6[48];
  v16 = (void *)*((_QWORD *)v6 + 7);
  v17 = *((_QWORD *)v6 + 8);
  v18 = *((_QWORD *)v6 + 9);
  *(_QWORD *)&v32 = *(_QWORD *)v6;
  BYTE8(v32) = v7;
  BYTE9(v32) = v8;
  BYTE10(v32) = v9;
  BYTE11(v32) = v10;
  v33 = v12;
  v34 = v11;
  v35 = v13;
  v36 = v14;
  v37 = v15;
  v38 = v16;
  v39 = v17;
  v40 = v18;
  v23 = a3[1];
  v24 = *a3;
  v19 = (char *)a3 + *(int *)(v5 + 40);
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v30 = v20;
  v31 = (char)v19;
  v25 = (id)v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA653B2C(v13, v14);
  swift_bridgeObjectRetain();
  v21 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = sub_1BB47394C(a1, &v32, v24, v23, (uint64_t)&v30, v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1BA6DB13C(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a4 = v22;
}

uint64_t sub_1BA866C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatPluginData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BA866C9C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1BA866AC0(a1, *(_QWORD **)(v2 + 16), *(uint64_t **)(v2 + 24), a2);
}

uint64_t destroy for FormatPrewarmBlueprintModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatPrewarmBlueprintModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FormatPrewarmBlueprintModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for FormatPrewarmBlueprintModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatPrewarmBlueprintModifier()
{
  return &type metadata for FormatPrewarmBlueprintModifier;
}

uint64_t sub_1BA866F98(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v53 = a3;
  v54 = a2;
  sub_1BA8678F0(0, &qword_1ED3A3EC0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB9A28]);
  v52 = v3;
  v51 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v50 = (char *)&v49 - v4;
  v5 = type metadata accessor for FormatModel();
  v55 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v73 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v49 - v8;
  sub_1BA8676E0();
  v74 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA867758();
  MEMORY[0x1E0C80A78](v14);
  v65 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FormatSectionDescriptor();
  MEMORY[0x1E0C80A78](v16);
  v72 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA8678F0(0, &qword_1ED3A3DB0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB7B60]);
  v19 = v18;
  v63 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v62 = (char *)&v49 - v20;
  v70 = type metadata accessor for FormatSection();
  v21 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v61 = (uint64_t)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA8677FC();
  MEMORY[0x1E0C80A78](v23);
  sub_1BA8678F0(0, &qword_1ED3A4190, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DBC790]);
  v68 = v24;
  v49 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v49 - v25;
  v27 = sub_1BA8678A0((unint64_t *)&unk_1ED3A3DA0, MEMORY[0x1E0DB7B88]);
  v28 = sub_1BA8678A0((unint64_t *)&unk_1ED3A3D90, MEMORY[0x1E0DB7B80]);
  v64 = v19;
  MEMORY[0x1BCCDEC84](MEMORY[0x1E0DEE9D8], v19, v27, v28);
  v29 = sub_1BA4A2870(&qword_1ED3A7240, (uint64_t (*)(uint64_t))type metadata accessor for FormatSectionDescriptor, (uint64_t)&protocol conformance descriptor for FormatSectionDescriptor);
  v30 = sub_1BA4A2870((unint64_t *)&qword_1ED3A53E0, (uint64_t (*)(uint64_t))type metadata accessor for FormatModel, (uint64_t)&protocol conformance descriptor for FormatModel);
  v66 = v29;
  v67 = v26;
  v69 = v16;
  v75 = v30;
  v76 = v5;
  sub_1BB87165C();
  v31 = *(_QWORD *)(v71 + 56);
  v60 = *(_QWORD *)(v31 + 16);
  if (v60)
  {
    v57 = *(int *)(v70 + 20);
    v56 = v31 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    result = swift_bridgeObjectRetain();
    v33 = 0;
    v58 = result;
    v59 = v21;
    while (v33 < *(_QWORD *)(result + 16))
    {
      v37 = *(_QWORD *)(v21 + 72);
      v71 = v33;
      v38 = v61;
      sub_1BA4C2DD8(v56 + v37 * v33, v61, (uint64_t (*)(_QWORD))type metadata accessor for FormatSection);
      sub_1BA4C2DD8(v38, v72, (uint64_t (*)(_QWORD))type metadata accessor for FormatPluginData);
      v39 = *(_QWORD *)(v38 + v57);
      swift_bridgeObjectRetain();
      sub_1BA4A2E80(v38, (uint64_t (*)(_QWORD))type metadata accessor for FormatSection);
      v40 = *(_QWORD *)(v39 + 16);
      if (v40)
      {
        v77 = MEMORY[0x1E0DEE9D8];
        sub_1BAC79EF0(0, v40, 0);
        v41 = *(unsigned __int8 *)(v55 + 80);
        v70 = v39;
        v42 = v39 + ((v41 + 32) & ~v41);
        v43 = *(_QWORD *)(v55 + 72);
        do
        {
          sub_1BA4C2DD8(v42, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatModel);
          sub_1BA4C2DD8((uint64_t)v9, v73, (uint64_t (*)(_QWORD))type metadata accessor for FormatModel);
          sub_1BB86F760();
          sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatModel);
          v44 = v77;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BAC79EF0(0, *(_QWORD *)(v44 + 16) + 1, 1);
            v44 = v77;
          }
          v46 = *(_QWORD *)(v44 + 16);
          v45 = *(_QWORD *)(v44 + 24);
          if (v46 >= v45 >> 1)
          {
            sub_1BAC79EF0(v45 > 1, v46 + 1, 1);
            v44 = v77;
          }
          *(_QWORD *)(v44 + 16) = v46 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v44+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v46, v13, v74);
          v77 = v44;
          v42 += v43;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v44 = MEMORY[0x1E0DEE9D8];
      }
      v33 = v71 + 1;
      v34 = sub_1BA4A2870(&qword_1ED3A3D70, (uint64_t (*)(uint64_t))sub_1BA8676E0, MEMORY[0x1E0DB6F08]);
      v35 = sub_1BA4A2870((unint64_t *)&unk_1ED3A3D60, (uint64_t (*)(uint64_t))sub_1BA8676E0, MEMORY[0x1E0DB6EF8]);
      MEMORY[0x1BCCDEC90](v44, v74, v34, v35);
      v36 = v62;
      sub_1BB86FCAC();
      sub_1BB871620();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v64);
      v21 = v59;
      result = v58;
      if (v33 == v60)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    v47 = v50;
    v48 = v67;
    sub_1BB87078C();
    v54(v47);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v52);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v68);
  }
  return result;
}

unint64_t sub_1BA867644()
{
  unint64_t result;

  result = qword_1ED3A8D88;
  if (!qword_1ED3A8D88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DD60, &type metadata for FormatPrewarmBlueprintModifier);
    atomic_store(result, (unint64_t *)&qword_1ED3A8D88);
  }
  return result;
}

uint64_t sub_1BA867688()
{
  return sub_1BA4A2870(&qword_1ED3A7240, (uint64_t (*)(uint64_t))type metadata accessor for FormatSectionDescriptor, (uint64_t)&protocol conformance descriptor for FormatSectionDescriptor);
}

uint64_t sub_1BA8676B4()
{
  return sub_1BA4A2870((unint64_t *)&qword_1ED3A53E0, (uint64_t (*)(uint64_t))type metadata accessor for FormatModel, (uint64_t)&protocol conformance descriptor for FormatModel);
}

void sub_1BA8676E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A3D78)
  {
    type metadata accessor for FormatModel();
    sub_1BA4A2870((unint64_t *)&qword_1ED3A53E0, (uint64_t (*)(uint64_t))type metadata accessor for FormatModel, (uint64_t)&protocol conformance descriptor for FormatModel);
    v0 = sub_1BB86F778();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A3D78);
  }
}

void sub_1BA867758()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A39A0)
  {
    sub_1BA8676E0();
    sub_1BA4A2870(&qword_1ED3A3D70, (uint64_t (*)(uint64_t))sub_1BA8676E0, MEMORY[0x1E0DB6F08]);
    sub_1BA4A2870((unint64_t *)&unk_1ED3A3D60, (uint64_t (*)(uint64_t))sub_1BA8676E0, MEMORY[0x1E0DB6EF8]);
    v0 = sub_1BB86E38C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A39A0);
  }
}

void sub_1BA8677FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A39A8)
  {
    sub_1BA8678F0(255, &qword_1ED3A3DB0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB7B60]);
    sub_1BA8678A0((unint64_t *)&unk_1ED3A3DA0, MEMORY[0x1E0DB7B88]);
    sub_1BA8678A0((unint64_t *)&unk_1ED3A3D90, MEMORY[0x1E0DB7B80]);
    v0 = sub_1BB86E38C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A39A8);
  }
}

uint64_t sub_1BA8678A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BA8678F0(255, &qword_1ED3A3DB0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB7B60]);
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BA8678F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = type metadata accessor for FormatSectionDescriptor();
    v8[1] = type metadata accessor for FormatModel();
    v8[2] = sub_1BA4A2870(&qword_1ED3A7240, (uint64_t (*)(uint64_t))type metadata accessor for FormatSectionDescriptor, (uint64_t)&protocol conformance descriptor for FormatSectionDescriptor);
    v8[3] = sub_1BA4A2870((unint64_t *)&qword_1ED3A53E0, (uint64_t (*)(uint64_t))type metadata accessor for FormatModel, (uint64_t)&protocol conformance descriptor for FormatModel);
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BA8679BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BA866C9C(a1, a2);
}

_QWORD *assignWithCopy for FormatLocalization(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FormatLocalization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DebugFormatTemplate()
{
  return &type metadata for DebugFormatTemplate;
}

uint64_t sub_1BA867AE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1BA8684B0(0, &qword_1EF2A9348, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA8683D4();
  sub_1BB8746C8();
  v15 = 0;
  sub_1BB87417C();
  if (!v2)
  {
    v14 = 1;
    sub_1BB87417C();
    v13 = 2;
    sub_1BB87417C();
    v12 = *(_QWORD *)(v3 + 48);
    v11[15] = 3;
    sub_1BA868418();
    sub_1BA86850C(&qword_1EF2A9350, (uint64_t (*)(void))sub_1BA868570, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BA867C8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BA867CC0 + 4 * byte_1BB87DDE0[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BA867CC0()
{
  return 1701667182;
}

uint64_t sub_1BA867CD0()
{
  return 0x7470697263736564;
}

uint64_t sub_1BA867CF0()
{
  return 1937335659;
}

uint64_t sub_1BA867D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA867EF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BA867D24(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1BA867D30()
{
  sub_1BA8683D4();
  return sub_1BB874710();
}

uint64_t sub_1BA867D58()
{
  sub_1BA8683D4();
  return sub_1BB87471C();
}

double sub_1BA867D80@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1BA8680AC(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1BA867DCC(_QWORD *a1)
{
  return sub_1BA867AE8(a1);
}

uint64_t sub_1BA867DE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1BA867E38(v5, v7) & 1;
}

uint64_t sub_1BA867E38(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_1BB874398(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_1BB874398(), result = 0, (v8 & 1) != 0))
    {
      if ((sub_1BA88579C(a1[6], a2[6]) & 1) != 0)
      {
        if (a1[4] == a2[4] && a1[5] == a2[5])
          return 1;
        else
          return sub_1BB874398();
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BA867EF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1BA8680AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  sub_1BA8684B0(0, &qword_1EF2A9320, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v21 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA8683D4();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v30 = 0;
  v10 = sub_1BB874098();
  v12 = v11;
  v24 = v10;
  v29 = 1;
  swift_bridgeObjectRetain();
  v13 = sub_1BB874098();
  v25 = v14;
  v22 = v13;
  v28 = 2;
  swift_bridgeObjectRetain();
  v23 = 0;
  v21 = sub_1BB874098();
  v16 = v15;
  sub_1BA868418();
  v27 = 3;
  sub_1BA86850C(&qword_1EF2A9338, (uint64_t (*)(void))sub_1BA86846C, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17 = v26;
  swift_bridgeObjectRetain();
  v18 = v16;
  v19 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v12;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v21;
  a2[5] = v18;
  a2[6] = v17;
  return result;
}

unint64_t sub_1BA8683D4()
{
  unint64_t result;

  result = qword_1EF2A9328;
  if (!qword_1EF2A9328)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DF40, &type metadata for DebugFormatTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9328);
  }
  return result;
}

void sub_1BA868418()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A9330)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A9330);
  }
}

unint64_t sub_1BA86846C()
{
  unint64_t result;

  result = qword_1EF2A9340;
  if (!qword_1EF2A9340)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB918298, &type metadata for DebugFormatTemplateKey);
    atomic_store(result, (unint64_t *)&qword_1EF2A9340);
  }
  return result;
}

void sub_1BA8684B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA8683D4();
    v7 = a3(a1, &type metadata for DebugFormatTemplate.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BA86850C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BA868418();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCE5B24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BA868570()
{
  unint64_t result;

  result = qword_1EF2A9358;
  if (!qword_1EF2A9358)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB918270, &type metadata for DebugFormatTemplateKey);
    atomic_store(result, (unint64_t *)&qword_1EF2A9358);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTemplate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BA868600 + 4 * byte_1BB87DDE9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BA868634 + 4 * byte_1BB87DDE4[v4]))();
}

uint64_t sub_1BA868634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86863C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA868644);
  return result;
}

uint64_t sub_1BA868650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA868658);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BA86865C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA868664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTemplate.CodingKeys()
{
  return &type metadata for DebugFormatTemplate.CodingKeys;
}

unint64_t sub_1BA868684()
{
  unint64_t result;

  result = qword_1EF2A9360;
  if (!qword_1EF2A9360)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DF18, &type metadata for DebugFormatTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9360);
  }
  return result;
}

unint64_t sub_1BA8686CC()
{
  unint64_t result;

  result = qword_1EF2A9368;
  if (!qword_1EF2A9368)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DE88, &type metadata for DebugFormatTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9368);
  }
  return result;
}

unint64_t sub_1BA868714()
{
  unint64_t result;

  result = qword_1EF2A9370;
  if (!qword_1EF2A9370)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87DEB0, &type metadata for DebugFormatTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2A9370);
  }
  return result;
}

id sub_1BA868758()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t inited;
  void **v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_init);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_package)
     + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment;
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 8))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3BA010, (uint64_t (*)(uint64_t))sub_1BA81D1A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    v4 = (void **)MEMORY[0x1E0DC1140];
    *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
    v5 = *v4;
    *(_QWORD *)(inited + 32) = *v4;
    v6 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v7 = v5;
    v8 = objc_msgSend(v6, sel_systemGray2Color);
    v9 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
    *(_QWORD *)(inited + 40) = v8;
    v10 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 72) = v10;
    v11 = (void *)objc_opt_self();
    v12 = v10;
    v13 = objc_msgSend(v11, sel_systemFontOfSize_, 13.0);
    *(_QWORD *)(inited + 104) = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
    *(_QWORD *)(inited + 80) = v13;
    sub_1BA76E82C(inited);
    v14 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v15 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
    v16 = (void *)sub_1BB872760();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v14, sel_initWithString_attributes_, v15, v16);

    objc_msgSend(v1, sel_appendAttributedString_, v17);
    v18 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v19 = (void *)sub_1BB872970();
    v20 = objc_msgSend(v18, sel_initWithString_, v19);

    objc_msgSend(v1, sel_appendAttributedString_, v20);
  }
  sub_1BA869B04(13.0);
  v22 = v21;
  objc_msgSend(v1, sel_appendAttributedString_, v21);

  return v1;
}

void sub_1BA868A1C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  _QWORD *v31;
  char *v32;
  _BYTE v33[40];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v11 = v10;
  v49 = a8;
  v50 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  sub_1BA86B368();
  v43 = v19;
  MEMORY[0x1E0C80A78](v19);
  v48 = &v33[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v45 = &v33[-v22];
  sub_1BA86B4EC(0, &qword_1EF2A9498, MEMORY[0x1E0DECDE0]);
  v24 = *(_QWORD *)(v23 - 8);
  v46 = v23;
  v47 = v24;
  MEMORY[0x1E0C80A78](v23);
  v44 = &v33[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v26);
  v38 = &v33[-v27];
  v40 = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v28 = v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localVersion;
  v29 = sub_1BB86EB84();
  v34 = *(_QWORD *)(v29 - 8);
  v30 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
  v37 = a3;
  v35 = v29;
  v30(v28, a3);
  v31 = (_QWORD *)(v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteData);
  v41 = a4;
  *v31 = a4;
  v31[1] = a5;
  v42 = a5;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteError) = a6;
  sub_1BA6BF98C(a7, v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteVersion);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteVersions) = v49;
  v39 = a9;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_package) = a9;
  sub_1BA86B440(a10, v11 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remotePackage);
  v32 = (char *)&loc_1BA868C28 + dword_1BA8697FC[a2 >> 62];
  v36 = a10;
  __asm { BR              X10 }
}

uint64_t sub_1BA868C40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;

  v5 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 136) = v5;
  *(_WORD *)(v4 - 128) = v3;
  *(_BYTE *)(v4 - 126) = BYTE2(v3);
  *(_BYTE *)(v4 - 125) = BYTE3(v3);
  *(_BYTE *)(v4 - 124) = BYTE4(v3);
  *(_BYTE *)(v4 - 123) = BYTE5(v3);
  v6 = *(_QWORD *)(v4 - 312);
  sub_1BA86B484(*(_QWORD *)(v4 - 320), v6);
  v7 = v2;
  swift_retain();
  v8 = sub_1BB872A78();
  v10 = v9;
  sub_1BA69D314(v5, v3);
  *(_QWORD *)(v4 - 384) = v0;
  *(_QWORD *)(v4 - 392) = v1;
  *(_QWORD *)(v4 - 400) = v3;
  *(_QWORD *)(v4 - 408) = v2;
  if (v6 >> 60 != 15)
    __asm { BR              X10 }
  v11 = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 136) = v8;
  *(_QWORD *)(v4 - 128) = v10;
  sub_1BA7114A0();
  v12 = sub_1BB873B4C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 - 136) = 0;
  *(_QWORD *)(v4 - 128) = 0xE000000000000000;
  v13 = sub_1BB873B4C();
  swift_bridgeObjectRelease();
  v14 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v4 - 192) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v4 - 152) = v14;
  *(_QWORD *)(v4 - 296) = v12;
  *(_QWORD *)(v4 - 136) = v12;
  *(_QWORD *)(v4 - 304) = v13;
  *(_QWORD *)(v4 - 208) = v13;
  v15 = MEMORY[0x1E0DEAEC8];
  sub_1BA86B4EC(0, &qword_1EF2A94B0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1BA86B400(qword_1EF2A94B8, &qword_1EF2A94B0, (uint64_t (*)(_QWORD, _QWORD))v15, MEMORY[0x1E0DEAF20]);
  v16 = *(_QWORD *)(v4 - 344);
  sub_1BB8728F8();
  v17 = *(_QWORD *)(v4 - 232);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 16);
  v19 = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 272) = v18;
  v18(v17, v16, v19);
  v20 = sub_1BA86B400(&qword_1EF2A94A0, &qword_1EF2A9498, MEMORY[0x1E0DECDE0], MEMORY[0x1E0DECE10]);
  sub_1BB8730D8();
  *(_QWORD *)(v17 + *(int *)(v11 + 36)) = *(_QWORD *)(v4 - 136);
  v21 = *(_QWORD *)(v4 - 256);
  sub_1BA86B534(v17, v21);
  v22 = (uint64_t *)(v21 + *(int *)(v11 + 36));
  v23 = *v22;
  sub_1BB873114();
  if (v23 != *(_QWORD *)(v4 - 136))
  {
    *(_QWORD *)(v4 - 280) = v20;
    *(_QWORD *)(v4 - 288) = v22;
    do
    {
      v34 = (void (*)(uint64_t, _QWORD))sub_1BB873198();
      v36 = *(_QWORD *)v35;
      v37 = *(_QWORD *)(v35 + 40);
      v38 = *(unsigned __int8 *)(v35 + 48);
      v39 = *(_BYTE *)(v35 + 49);
      *(_QWORD *)(v4 - 232) = *(_QWORD *)(v35 + 32);
      *(_QWORD *)(v4 - 224) = v37;
      *(_DWORD *)(v4 - 216) = v38;
      sub_1BA86B578();
      v34(v4 - 136, 0);
      v40 = *(_QWORD *)(v4 - 264);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 272))(v40, v21, v19);
      sub_1BB873120();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v40, v19);
      if ((v39 & 1) != 0)
      {
        if (v36 < *(_QWORD *)(*(_QWORD *)(v4 - 304) + 16))
          sub_1BA65F06C((uint64_t *)(v4 - 136), v36);
      }
      else if (v36 < *(_QWORD *)(*(_QWORD *)(v4 - 296) + 16))
      {
        sub_1BA65F06C((uint64_t *)(v4 - 136), v36);
      }
      sub_1BA86B580();
      v21 = *(_QWORD *)(v4 - 256);
      v19 = *(_QWORD *)(v4 - 248);
      v33 = **(_QWORD **)(v4 - 288);
      sub_1BB873114();
    }
    while (v33 != *(_QWORD *)(v4 - 136));
  }
  sub_1BA4A2E80(v21, (uint64_t (*)(_QWORD))sub_1BA86B368);
  v24 = *(_QWORD *)(v4 - 384);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localOffsets) = *(_QWORD *)(v4 - 192);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteOffsets) = *(_QWORD *)(v4 - 152);
  v25 = *(_QWORD *)(*(_QWORD *)(v4 - 296) + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localNumberOfLines) = v25;
  v26 = *(_QWORD *)(*(_QWORD *)(v4 - 304) + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteNumberOfLines) = v26;
  v27 = *(_QWORD *)(v4 - 344);
  v28 = sub_1BB873FA8();
  v29 = sub_1BA86981C(v28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localHunkRanges) = v29;
  v30 = sub_1BB873FB4();
  v31 = sub_1BA86981C(v30);
  swift_release();

  sub_1BA69D490(*(_QWORD *)(v4 - 320), *(_QWORD *)(v4 - 312));
  sub_1BA69D314(*(_QWORD *)(v4 - 328), *(_QWORD *)(v4 - 400));
  sub_1BA4A2E80(*(_QWORD *)(v4 - 360), (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatUploadRemotePackage);
  sub_1BA5C699C(*(_QWORD *)(v4 - 392), &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 376) + 8))(*(_QWORD *)(v4 - 352), *(_QWORD *)(v4 - 368));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v27, v19);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteHunkRanges) = v31;
  return v24;
}

_QWORD *sub_1BA86981C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain() + 81;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = *(_QWORD *)(v2 - 49);
    sub_1BA86B578();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v5 = v3;
    else
      v5 = sub_1BB38CAB4(0, v3[2] + 1, 1, v3);
    v7 = v5[2];
    v6 = v5[3];
    if (v7 >= v6 >> 1)
      v5 = sub_1BB38CAB4((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
    v5[2] = v7 + 1;
    v8 = v5 + 4;
    v5[v7 + 4] = v4;
    v3 = v5;
    sub_1BA86B580();
    v2 += 56;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  v9 = v3[2];
  if (!v9)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v10 = *v8;
  v11 = v9 - 1;
  if (v9 != 1)
  {
    v12 = v3;
    swift_bridgeObjectRetain();
    v13 = 0;
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v15 = v10;
    do
    {
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if ((unint64_t)(v13 + 1) >= v12[2])
        goto LABEL_35;
      v16 = &v12[v13];
      if (v10 + 1 == v16[5])
      {
        ++v10;
      }
      else
      {
        if (v10 < v15)
          goto LABEL_36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = sub_1BB38C9AC(0, v14[2] + 1, 1, v14);
        v18 = v14[2];
        v17 = v14[3];
        if (v18 >= v17 >> 1)
          v14 = sub_1BB38C9AC((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
        v14[2] = v18 + 1;
        v19 = &v14[2 * v18];
        v19[4] = v15;
        v19[5] = v10;
        v10 = v16[5];
        v15 = v10;
      }
      ++v13;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease_n();
    if (v10 >= v15)
      goto LABEL_29;
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = v10;
LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_37:
    v14 = sub_1BB38C9AC(0, v14[2] + 1, 1, v14);
  v21 = v14[2];
  v20 = v14[3];
  if (v21 >= v20 >> 1)
    v14 = sub_1BB38C9AC((_QWORD *)(v20 > 1), v21 + 1, 1, v14);
  v14[2] = v21 + 1;
  v22 = &v14[2 * v21];
  v22[4] = v15;
  v22[5] = v10;
  return v14;
}

void sub_1BA869B04(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  __objc2_class_ro *v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t inited;
  void *v44;
  double v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  void (*v68)(char *);
  id v69;
  void (*v70)(char *, uint64_t, uint64_t, id);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, id);
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  int v82;
  uint64_t v83;
  __objc2_class_ro *v84;
  char *v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  int v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  int v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  uint64_t (*v107)(uint64_t);
  char v108;
  void (*v109)(char *, id);
  id v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  void *v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  void (*v126)(char *, unint64_t, id);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  id v133;
  char *v134;
  char *v135;
  id v136;
  __int128 v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C20B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3DE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v134 = (char *)&v125 - v6;
  v7 = (void *)sub_1BB86EB84();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
  v136 = v7;
  *(_QWORD *)&v137 = *((_QWORD *)v7 - 1);
  MEMORY[0x1E0C80A78](v7);
  v135 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v125 - v11;
  sub_1BA6C1CE8();
  v14 = v13;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, &qword_1ED3B0930, v8, v4);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v125 - v21;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v125 - v24;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v125 - v27;
  v29 = sub_1BB86C304();
  MEMORY[0x1E0C80A78](v29);
  v30 = sub_1BA49A224(0, (unint64_t *)&unk_1ED3B98E0);
  sub_1BB86C1F0();
  v138 = v30;
  v139 = (id)sub_1BB8734BC();
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteError);
  v140 = v2;
  if (v31)
  {
    v32 = objc_msgSend((id)objc_opt_self(), sel_systemRedColor);
    v33 = (void *)sub_1BB872970();
    v34 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v33);

    if (v34)
    {
      v35 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v34);

      v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v35);
      v37 = (void *)*MEMORY[0x1E0DC1140];
      objc_msgSend(v36, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1140], v32, 0, 1);
      v38 = (void *)*MEMORY[0x1E0DC1138];
      v39 = &StubThumbnailProcessor;
      v40 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E0DC1420]);
      objc_msgSend(v36, sel_addAttribute_value_range_, v38, v40, 0, 1);

      objc_msgSend(v139, sel_appendAttributedString_, v36);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_34;
  }
  v131 = v14;
  v132 = v25;
  v129 = v22;
  v130 = v19;
  v67 = v137;
  v68 = *(void (**)(char *))(v137 + 16);
  v127 = v2 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localVersion;
  v69 = v136;
  v68(v28);
  v70 = *(void (**)(char *, uint64_t, uint64_t, id))(v67 + 56);
  v71 = 1;
  v133 = v28;
  v70(v28, 0, 1, v69);
  v72 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteVersions);
  v73 = *(_QWORD *)(v72 + 16);
  v126 = (void (*)(char *, unint64_t, id))v68;
  v128 = v72;
  if (v73)
  {
    v74 = (uint64_t)v132;
    ((void (*)(char *, unint64_t, id))v68)(v132, v72+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(_QWORD *)(v67 + 72) * (v73 - 1), v69);
    v71 = 0;
    v75 = (uint64_t)v16;
  }
  else
  {
    v75 = (uint64_t)v16;
    v74 = (uint64_t)v132;
  }
  v76 = v131;
  v70((char *)v74, v71, 1, v69);
  v77 = v75 + *(int *)(v76 + 48);
  v78 = (uint64_t)v133;
  sub_1BA6BF98C((uint64_t)v133, v75);
  sub_1BA6BF98C(v74, v77);
  v79 = *(uint64_t (**)(uint64_t, uint64_t, id))(v67 + 48);
  if (v79(v75, 1, v69) == 1)
  {
    v80 = v78;
    v81 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
    sub_1BA5C699C(v74, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
    sub_1BA5C699C(v80, &qword_1ED3B0930, v81);
    v82 = v79(v77, 1, v69);
    v83 = v140;
    if (v82 == 1)
    {
      sub_1BA5C699C(v75, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
      v84 = &StubThumbnailProcessor;
      v39 = &StubThumbnailProcessor;
LABEL_25:
      v110 = objc_msgSend((id)objc_opt_self(), sel_systemBlueColor);
      v111 = (void *)sub_1BB872970();
      v112 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v111);

      if (!v112)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v113 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v112);

      v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v113);
      v37 = (void *)*MEMORY[0x1E0DC1140];
      objc_msgSend(v36, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1140], v110, 0, 1);
      v38 = (void *)*MEMORY[0x1E0DC1138];
      v114 = objc_msgSend((id)objc_opt_self(), (SEL)v39[53].weak_ivar_lyt, a1, *MEMORY[0x1E0DC1420]);
      objc_msgSend(v36, sel_addAttribute_value_range_, v38, v114, 0, 1);

      objc_msgSend(v139, *(SEL *)&v84[54].flags, v36);
LABEL_5:

LABEL_6:
      v142 = 11040;
      v143 = 0xE200000000000000;
      v141 = *(_QWORD *)(*(_QWORD *)(v140 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localOffsets) + 16);
      sub_1BB87420C();
      sub_1BB872AFC(v41);
      swift_bridgeObjectRelease();
      sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3BA010, (uint64_t (*)(uint64_t))sub_1BA81D1A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v138 = v42;
      inited = swift_initStackObject();
      v137 = xmmword_1BB87A390;
      *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
      *(_QWORD *)(inited + 32) = v38;
      v44 = (void *)objc_opt_self();
      v136 = v44;
      v45 = *MEMORY[0x1E0DC1448];
      v135 = v38;
      v46 = objc_msgSend(v44, (SEL)v39[53].weak_ivar_lyt, a1, v45);
      v47 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
      v134 = (char *)v47;
      *(_QWORD *)(inited + 40) = v46;
      *(_QWORD *)(inited + 64) = v47;
      *(_QWORD *)(inited + 72) = v37;
      v48 = (void *)objc_opt_self();
      v133 = v48;
      v49 = v37;
      v50 = objc_msgSend(v48, sel_systemGreenColor);
      v51 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
      *(_QWORD *)(inited + 104) = v51;
      *(_QWORD *)(inited + 80) = v50;
      sub_1BA76E82C(inited);
      v52 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
      v53 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
      v54 = (void *)sub_1BB872760();
      swift_bridgeObjectRelease();
      v55 = objc_msgSend(v52, sel_initWithString_attributes_, v53, v54);

      v56 = v139;
      objc_msgSend(v139, sel_appendAttributedString_, v55);

      v142 = 11552;
      v143 = 0xE200000000000000;
      v141 = *(_QWORD *)(*(_QWORD *)(v140 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteOffsets) + 16);
      sub_1BB87420C();
      sub_1BB872AFC(v57);
      swift_bridgeObjectRelease();
      v58 = swift_initStackObject();
      *(_OWORD *)(v58 + 16) = v137;
      v59 = v135;
      *(_QWORD *)(v58 + 32) = v135;
      v60 = v59;
      *(_QWORD *)(v58 + 40) = objc_msgSend(v136, sel_systemFontOfSize_weight_, a1, v45);
      *(_QWORD *)(v58 + 64) = v134;
      *(_QWORD *)(v58 + 72) = v49;
      v61 = v49;
      v62 = objc_msgSend(v133, sel_systemRedColor);
      *(_QWORD *)(v58 + 104) = v51;
      *(_QWORD *)(v58 + 80) = v62;
      sub_1BA76E82C(v58);
      v63 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
      v64 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      v65 = (void *)sub_1BB872760();
      swift_bridgeObjectRelease();
      v66 = objc_msgSend(v63, sel_initWithString_attributes_, v64, v65);

      objc_msgSend(v56, sel_appendAttributedString_, v66);
      return;
    }
    goto LABEL_15;
  }
  v85 = v12;
  v86 = (uint64_t)v129;
  sub_1BA6BF98C(v75, (uint64_t)v129);
  if (v79(v77, 1, v69) == 1)
  {
    v87 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
    sub_1BA5C699C((uint64_t)v132, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
    sub_1BA5C699C((uint64_t)v133, &qword_1ED3B0930, v87);
    (*(void (**)(uint64_t, id))(v67 + 8))(v86, v69);
    v83 = v140;
LABEL_15:
    sub_1BA4A2E80(v75, (uint64_t (*)(_QWORD))sub_1BA6C1CE8);
    v39 = &StubThumbnailProcessor;
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t, id))(v67 + 32))(v85, v77, v69);
  v107 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
  sub_1BA4A2870(&qword_1ED39C378, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE8]);
  v108 = sub_1BB872958();
  v109 = *(void (**)(char *, id))(v67 + 8);
  v109(v85, v69);
  sub_1BA5C699C((uint64_t)v132, &qword_1ED3B0930, v107);
  sub_1BA5C699C((uint64_t)v133, &qword_1ED3B0930, v107);
  v109((char *)v86, v69);
  sub_1BA5C699C(v75, &qword_1ED3B0930, v107);
  v83 = v140;
  v84 = &StubThumbnailProcessor;
  v39 = &StubThumbnailProcessor;
  if ((v108 & 1) != 0)
    goto LABEL_25;
LABEL_16:
  v88 = (uint64_t)v130;
  sub_1BA6BF98C(v83 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteVersion, (uint64_t)v130);
  v89 = v79(v88, 1, v69);
  sub_1BA5C699C(v88, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8]);
  if (v89 == 1)
  {
    v90 = objc_msgSend((id)objc_opt_self(), sel_systemGreenColor);
    v91 = (void *)sub_1BB872970();
    v92 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v91);

    v93 = v139;
    if (v92)
    {
      v94 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v92);

      v95 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v94);
      v37 = (void *)*MEMORY[0x1E0DC1140];
      objc_msgSend(v95, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1140], v90, 0, 1);
      v38 = (void *)*MEMORY[0x1E0DC1138];
      v96 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E0DC1420]);
      objc_msgSend(v95, sel_addAttribute_value_range_, v38, v96, 0, 1);

      objc_msgSend(v93, sel_appendAttributedString_, v95);
      goto LABEL_6;
    }
    goto LABEL_35;
  }
  v97 = *(_QWORD *)(v128 + 16);
  v98 = v139;
  if (!v97)
  {
    v115 = objc_msgSend((id)objc_opt_self(), sel_systemGreenColor);
    v116 = (void *)sub_1BB872970();
    v117 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v116);

    if (!v117)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v118 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v117);

    v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v118);
    v37 = (void *)*MEMORY[0x1E0DC1140];
    objc_msgSend(v36, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1140], v115, 0, 1);
    v38 = (void *)*MEMORY[0x1E0DC1138];
    v119 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E0DC1420]);
    objc_msgSend(v36, sel_addAttribute_value_range_, v38, v119, 0, 1);

    objc_msgSend(v98, sel_appendAttributedString_, v36);
    goto LABEL_5;
  }
  v126(v135, v128+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(_QWORD *)(v137 + 72) * (v97 - 1), v69);
  sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
  if ((sub_1BB87291C() & 1) == 0)
  {
    v104 = objc_msgSend((id)objc_opt_self(), sel_systemPurpleColor);
    v120 = (void *)sub_1BB872970();
    v106 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v120);

    if (!v106)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_32:
    v122 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v106);

    v123 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v122);
    v37 = (void *)*MEMORY[0x1E0DC1140];
    objc_msgSend(v123, sel_addAttribute_value_range_, *MEMORY[0x1E0DC1140], v104, 0, 1);
    v38 = (void *)*MEMORY[0x1E0DC1138];
    v124 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E0DC1420]);
    objc_msgSend(v123, sel_addAttribute_value_range_, v38, v124, 0, 1);

    objc_msgSend(v98, sel_appendAttributedString_, v123);
    (*(void (**)(char *, id))(v137 + 8))(v135, v69);
    goto LABEL_6;
  }
  v99 = (uint64_t)v134;
  sub_1BB86EB78();
  v100 = sub_1BB86E3A4();
  v101 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB3DE8];
  v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 48))(v99, 1, v100);
  sub_1BA5C699C(v99, (unint64_t *)&unk_1ED3C20B8, v101);
  v103 = (void *)objc_opt_self();
  if (v102 == 1)
  {
    v104 = objc_msgSend(v103, sel_systemPinkColor);
    v105 = (void *)sub_1BB872970();
    v106 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v105);

    if (!v106)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  v104 = objc_msgSend(v103, sel_systemGreenColor);
  v121 = (void *)sub_1BB872970();
  v106 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v121);

  if (v106)
    goto LABEL_32;
LABEL_39:
  __break(1u);
}

uint64_t sub_1BA86AF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  sub_1BA69D314(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_localVersion;
  v2 = sub_1BB86EB84();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1BA69D490(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteData), *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteData + 8));

  sub_1BA5C699C(v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remoteVersion, &qword_1ED3B0930, v3);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1BA4A2E80(v0 + OBJC_IVAR____TtC8NewsFeed21DebugFormatUploadDiff_remotePackage, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatUploadRemotePackage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BA86B098()
{
  sub_1BA86AF84();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA86B0BC()
{
  return type metadata accessor for DebugFormatUploadDiff();
}

uint64_t type metadata accessor for DebugFormatUploadDiff()
{
  uint64_t result;

  result = qword_1EF2A93A0;
  if (!qword_1EF2A93A0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BA86B100()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BB86EB84();
  if (v0 <= 0x3F)
  {
    sub_1BA4B07F0(319, &qword_1ED3B0930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DebugFormatUploadRemotePackage();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

void sub_1BA86B20C()
{
  __asm { BR              X10 }
}

uint64_t sub_1BA86B26C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;

  sub_1BB872AFC(a1);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v1);
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1BA86B348()
{
  sub_1BA86B20C();
}

void sub_1BA86B368()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EF2A9490)
  {
    v0 = (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DECDE0];
    sub_1BA86B4EC(255, &qword_1EF2A9498, MEMORY[0x1E0DECDE0]);
    sub_1BA86B400(&qword_1EF2A94A0, &qword_1EF2A9498, v0, MEMORY[0x1E0DECE10]);
    v1 = sub_1BB873E40();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EF2A9490);
  }
}

uint64_t sub_1BA86B400(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BA86B4EC(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BA86B440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DebugFormatUploadRemotePackage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA86B484(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1BA69D44C(a1, a2);
  return a1;
}

unint64_t sub_1BA86B498()
{
  unint64_t result;

  result = qword_1EF2CC0D0;
  if (!qword_1EF2CC0D0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF2CC0D0);
  }
  return result;
}

void sub_1BA86B4EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEBAF0]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BA86B534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA86B368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA86B578()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA86B580()
{
  return swift_bridgeObjectRelease();
}

uint64_t CellAutomation.type.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CellAutomation.init(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = sub_1BB86F8B0();
  a4[1] = v8;
  v10 = (char *)a4 + *(int *)(type metadata accessor for CellAutomation(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t CellAutomation.automationType.getter()
{
  return 1819043171;
}

BOOL sub_1BA86B630(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1BA86B640()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BA86B664(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BA86B734()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

BOOL sub_1BA86B778(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BA86B630(*a1, *a2);
}

uint64_t sub_1BA86B78C()
{
  return sub_1BA86B734();
}

uint64_t sub_1BA86B79C()
{
  return sub_1BA86B640();
}

uint64_t sub_1BA86B7AC()
{
  sub_1BB8745CC();
  sub_1BA86B640();
  return sub_1BB874608();
}

uint64_t sub_1BA86B7F0()
{
  char *v0;

  return sub_1BA8091D0(*v0);
}

uint64_t sub_1BA86B800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA86B664(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA86B82C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA86D32C();
  *a1 = result;
  return result;
}

uint64_t sub_1BA86B854(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB87E3F8, a1);
  return sub_1BB874710();
}

uint64_t sub_1BA86B888(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB87E3F8, a1);
  return sub_1BB87471C();
}

uint64_t CellAutomation.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14[4];
  char v15;
  char v16;

  v6 = *(_QWORD *)(a2 + 16);
  v14[0] = *(_QWORD *)(a2 + 24);
  v14[1] = v6;
  v7 = type metadata accessor for CellAutomation.CodingKeys(255, v6, v14[0], a4);
  MEMORY[0x1BCCE5B24](&unk_1BB87E3F8, v7);
  v8 = sub_1BB8741D0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB8746C8();
  v16 = 0;
  v12 = v14[3];
  sub_1BB87417C();
  if (!v12)
  {
    v15 = 1;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t type metadata accessor for CellAutomation.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CellAutomation.CodingKeys);
}

uint64_t CellAutomation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  char v37;

  v28 = a4;
  v27 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CellAutomation.CodingKeys(255, v8, v9, v10);
  MEMORY[0x1BCCE5B24](&unk_1BB87E3F8, v11);
  v34 = sub_1BB874104();
  v29 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v13 = (char *)&v26 - v12;
  v31 = a2;
  v32 = a3;
  v15 = type metadata accessor for CellAutomation(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v26 - v17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v33 = v13;
  v19 = (uint64_t)v35;
  sub_1BB87468C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v29;
  v21 = v30;
  v26 = v16;
  v22 = v31;
  v35 = a1;
  v37 = 0;
  *v18 = sub_1BB874098();
  v18[1] = v23;
  v36 = 1;
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v34);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))((char *)v18 + *(int *)(v15 + 36), v21, v22);
  v24 = v26;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v26 + 16))(v28, v18, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v18, v15);
}

uint64_t sub_1BA86BC80()
{
  return 1819043171;
}

uint64_t sub_1BA86BC90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CellAutomation.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BA86BCAC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CellAutomation.encode(to:)(a1, a2, a3, a4);
}

uint64_t _s8NewsFeed14CellAutomationV4dataxvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t FormatCellAutomation.selectors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatCellAutomation.init(data:selectors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *a5 = sub_1BB86F8B0();
  a5[1] = v10;
  v12 = type metadata accessor for FormatCellAutomation(0, a3, a4, v11);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))((char *)a5 + *(int *)(v12 + 36), a1, a3);
  *(uint64_t *)((char *)a5 + *(int *)(v12 + 40)) = a2;
  return result;
}

uint64_t FormatCellAutomation.automationType.getter()
{
  return 1819043171;
}

BOOL sub_1BA86BD80(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1BA86BD90()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BA86BDB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F7463656C6573 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t _s8NewsFeed0B12RefreshStateO9hashValueSivg_0()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BA86BF38(char a1)
{
  if (!a1)
    return 1701869940;
  if (a1 == 1)
    return 1635017060;
  return 0x726F7463656C6573;
}

BOOL sub_1BA86BF84(char *a1, char *a2)
{
  return sub_1BA86BD80(*a1, *a2);
}

uint64_t sub_1BA86BF98()
{
  return _s8NewsFeed0B12RefreshStateO9hashValueSivg_0();
}

uint64_t sub_1BA86BFA4()
{
  return sub_1BA86BD90();
}

uint64_t sub_1BA86BFB0()
{
  sub_1BB8745CC();
  sub_1BA86BD90();
  return sub_1BB874608();
}

uint64_t sub_1BA86BFF4()
{
  char *v0;

  return sub_1BA86BF38(*v0);
}

uint64_t sub_1BA86C000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BA86BDB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BA86C02C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA86D334();
  *a1 = result;
  return result;
}

uint64_t sub_1BA86C054(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB87E3A8, a1);
  return sub_1BB874710();
}

uint64_t sub_1BA86C088(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB87E3A8, a1);
  return sub_1BB87471C();
}

uint64_t FormatCellAutomation.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v6 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = v6;
  v7 = type metadata accessor for FormatCellAutomation.CodingKeys(255, v6, v16, a4);
  MEMORY[0x1BCCE5B24](&unk_1BB87E3A8, v7);
  v8 = sub_1BB8741D0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = v18;
  sub_1BB8746C8();
  v23 = 0;
  v13 = v19;
  sub_1BB87417C();
  if (!v13)
  {
    v22 = 1;
    sub_1BB8741AC();
    v20 = *(_QWORD *)(v12 + *(int *)(a2 + 40));
    v21 = 2;
    sub_1BA6BCC84();
    sub_1BA64D3D4((unint64_t *)&qword_1ED39BFB0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t type metadata accessor for FormatCellAutomation.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormatCellAutomation.CodingKeys);
}

uint64_t FormatCellAutomation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v35 = a4;
  v38 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FormatCellAutomation.CodingKeys(255, v8, v9, v10);
  MEMORY[0x1BCCE5B24](&unk_1BB87E3A8, v11);
  v41 = sub_1BB874104();
  v36 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v13 = (char *)&v33 - v12;
  v39 = a3;
  v40 = a2;
  v15 = type metadata accessor for FormatCellAutomation(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v33 - v17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v42 = v13;
  v19 = v43;
  sub_1BB87468C();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = v37;
  v20 = v38;
  v33 = v16;
  v34 = v18;
  v43 = a1;
  v22 = v40;
  v47 = 0;
  v23 = v41;
  v24 = sub_1BB874098();
  v25 = v34;
  *v34 = v24;
  v25[1] = v26;
  v46 = 1;
  sub_1BB8740D4();
  v39 = v15;
  v27 = *(int *)(v15 + 36);
  v28 = v34;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))((char *)v34 + v27, v21, v22);
  sub_1BA6BCC84();
  v45 = 2;
  sub_1BA64D3D4((unint64_t *)&qword_1ED3B96D0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
  sub_1BB8740D4();
  v29 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v23);
  v30 = v39;
  *(uint64_t *)((char *)v28 + *(int *)(v39 + 40)) = v44;
  v31 = v33;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v33 + 16))(v35, v28, v30);
  __swift_destroy_boxed_opaque_existential_1(v29);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 8))(v28, v30);
}

uint64_t sub_1BA86C5B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FormatCellAutomation.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BA86C5D0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FormatCellAutomation.encode(to:)(a1, a2, a3, a4);
}

uint64_t *sub_1BA86C5E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

_QWORD *sub_1BA86C6A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_1BA86C71C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1BA86C76C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1BA86C7D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BA86C8A8 + 4 * byte_1BB87E030[(v9 - 1)]))();
}

void sub_1BA86C918(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t *sub_1BA86CB10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    *(_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BA86CBF8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BA86CC60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BA86CCF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1BA86CDA4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1BA86CE24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v7 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BA86CEBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BA86CF48 + 4 * byte_1BB87E03E[v10]))();
  }
}

void sub_1BA86CFC8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1BA86D0D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BA86D13CLL);
}

void sub_1BA86D0D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BA86D0E0);
  JUMPOUT(0x1BA86D13CLL);
}

void sub_1BA86D0F4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA86D13CLL);
}

void sub_1BA86D0FC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BA86D13CLL);
}

void sub_1BA86D104(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x1BA86D110);
    if (a2 < 0)
      JUMPOUT(0x1BA86D134);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x1BA86D13CLL);
}

uint64_t sub_1BA86D154(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BA86D1A0 + 4 * byte_1BB87E052[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BA86D1D4 + 4 * asc_1BB87E04A[v4 + 3]))();
}

uint64_t sub_1BA86D1D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86D1DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA86D1E4);
  return result;
}

uint64_t sub_1BA86D1F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA86D1F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BA86D1FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86D204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86D210(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA86D25C + 4 * byte_1BB87E05C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA86D290 + 4 * byte_1BB87E057[v4]))();
}

uint64_t sub_1BA86D290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86D298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA86D2A0);
  return result;
}

uint64_t sub_1BA86D2AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA86D2B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA86D2B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA86D2C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BA86D2CC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA86D2DC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA86D2EC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA86D2FC()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA86D30C()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BA86D31C()
{
  JUMPOUT(0x1BCCE5B24);
}

uint64_t sub_1BA86D32C()
{
  return 2;
}

uint64_t sub_1BA86D334()
{
  return 3;
}

uint64_t sub_1BA86D340()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BA86D380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v59 = a3;
  v67 = a1;
  v68 = a2;
  v4 = *v3;
  v69 = sub_1BB86C8B0();
  v63 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v56 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA5266EC();
  v65 = v6;
  MEMORY[0x1E0C80A78](v6);
  v64 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v4 + 88);
  v70 = *(_QWORD *)(v4 + 80);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61 = AssociatedTypeWitness;
  v62 = v11;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v55 - v12;
  v14 = swift_checkMetadataState();
  v60 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v55 - v15;
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v17);
  v57 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v55 - v20;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v55 - v24;
  v26 = v63;
  v27 = v69;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v63 + 16))((char *)&v55 - v24, v67 + qword_1ED4767C0, v69, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v25, 0, 1, v27);
  v28 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  v66 = v8;
  v28(v70, v8);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, AssociatedConformanceWitness);
  v29 = v16;
  v30 = v26;
  v31 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v29, v14);
  v32 = (uint64_t)v64;
  v33 = v61;
  v34 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(v34 + 40))(v33, v34);
  v35 = v13;
  v36 = v69;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v33);
  v37 = v32 + *(int *)(v65 + 48);
  sub_1BA76D70C((uint64_t)v25, v32);
  sub_1BA76D70C((uint64_t)v21, v37);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v38(v32, 1, v36) == 1)
  {
    sub_1BA4A2E80((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    if (v38(v37, 1, v36) == 1)
    {
      sub_1BA4A2E80(v32, (uint64_t (*)(_QWORD))sub_1BA76D78C);
LABEL_8:
      v44 = type metadata accessor for FeedServiceError(0, v70, v66, v39);
      MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedServiceError<A>, v44);
      swift_allocError();
      *(_QWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = 0;
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      *(_BYTE *)(v45 + 32) = 6;
      return swift_willThrow();
    }
    goto LABEL_6;
  }
  v40 = v57;
  sub_1BA76D70C(v32, v57);
  if (v38(v37, 1, v36) == 1)
  {
    sub_1BA4A2E80((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    sub_1BA4A2E80((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BA76D78C);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v40, v36);
LABEL_6:
    sub_1BA4A2E80(v32, (uint64_t (*)(_QWORD))sub_1BA5266EC);
    goto LABEL_9;
  }
  v41 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v56, v37, v36);
  sub_1BA49C0DC();
  v42 = sub_1BB872958();
  v43 = *(void (**)(char *, uint64_t))(v30 + 8);
  v43(v41, v36);
  sub_1BA4A2E80((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  sub_1BA4A2E80(v31, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  v43((char *)v40, v36);
  sub_1BA4A2E80(v32, (uint64_t (*)(_QWORD))sub_1BA76D78C);
  if ((v42 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v47 = v58[2];
  v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v58[3];
  v49 = v58[4];
  v50 = *(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 + 272));
  v51 = swift_allocObject();
  v52 = v70;
  v53 = v66;
  *(_QWORD *)(v51 + 16) = v70;
  *(_QWORD *)(v51 + 24) = v53;
  sub_1BA99A5F0(v68, v50, (uint64_t)sub_1BA86DA14, v51, (uint64_t)sub_1BA86D9F0, 0, v47, v48, v49, v52, v53);
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v54 = sub_1BB872E68();
  return sub_1BA62EDB8(v54, v59);
}

uint64_t (*sub_1BA86D968(uint64_t a1, uint64_t a2))()
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return sub_1BA86DA14;
}

uint64_t sub_1BA86D9AC()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PublishDateFeedRefreshStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishDateFeedRefreshStrategy);
}

uint64_t sub_1BA86D9F0()
{
  nullsub_1();
  return swift_retain();
}

uint64_t sub_1BA86DA04()
{
  return swift_deallocObject();
}

uint64_t sub_1BA86DA14()
{
  return sub_1BA86D9F0();
}

uint64_t FormatStateMachineData.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_BYTE *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6C1F54(v1, v2, v3, v4, v5);
  sub_1BA86DA90(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_1BA86DA90(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
    return swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t FormatStateMachineData.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_BYTE *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6C1F54(v1, v2, v3, v4, v5);
  sub_1BA86DA90(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormatStateMachineData()
{
  return objc_opt_self();
}

uint64_t method lookup function for FormatStateMachineData()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BA86DB68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BA86DBA0 + 4 * byte_1BB87E500[a1]))(0xD000000000000010, 0x80000001BB959980);
}

uint64_t sub_1BA86DC28(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BA86DC60 + 4 * byte_1BB87E508[a1]))(0xD000000000000010, 0x80000001BB959980);
}

void sub_1BA86DCE8(char *a1)
{
  sub_1BB805650(*a1);
}

void sub_1BA86DCF4()
{
  char *v0;

  sub_1BAB0B6D0(0, *v0);
}

void sub_1BA86DD00(uint64_t a1)
{
  char *v1;

  sub_1BA9D4690(a1, *v1);
}

void sub_1BA86DD08(uint64_t a1)
{
  char *v1;

  sub_1BAB0B6D0(a1, *v1);
}

uint64_t sub_1BA86DD10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA871184();
  *a1 = result;
  return result;
}

uint64_t sub_1BA86DD3C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BA86DB68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BA86DD64()
{
  unsigned __int8 *v0;

  return sub_1BA86DC28(*v0);
}

uint64_t sub_1BA86DD6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA871184();
  *a1 = result;
  return result;
}

void sub_1BA86DD90(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1BA86DD9C()
{
  sub_1BA8708D0();
  return sub_1BB874710();
}

uint64_t sub_1BA86DDC4()
{
  sub_1BA8708D0();
  return sub_1BB87471C();
}

uint64_t FeedGroupClusteringKnobs.minNumberOfItems.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.maxNumberOfItems.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.bundleArticleQuotas.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.explicitSlotBundleArticleQuotas.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.groupingRules.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  v10 = v1[12];
  v11 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  return sub_1BA86DE54(v2);
}

uint64_t sub_1BA86DE54(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t FeedGroupClusteringKnobs.minNumberOfItemsDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.maxNumberOfItemsDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.splittingConfiguration.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.init(overrides:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[10];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v4 = sub_1BB86D078();
  MEMORY[0x1E0C80A78](v4);
  v8 = a1[7];
  v60 = a1[6];
  v61 = v8;
  v62 = *((_QWORD *)a1 + 16);
  v9 = a1[1];
  v54 = *a1;
  v55 = v9;
  v10 = a1[3];
  v56 = a1[2];
  v57 = v10;
  v11 = a1[5];
  v58 = a1[4];
  v59 = v11;
  if ((_QWORD)v54 && *((_QWORD *)&v54 + 1))
  {
    v29 = v7;
    v30 = v5;
    v12 = v55;
    v28 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v39 = v54;
    v40 = a2;
    v38 = *((_QWORD *)&v54 + 1);
    if ((_QWORD)v55)
    {
      swift_retain();
      swift_retain();
      v35 = v12;
      v37 = v12;
    }
    else
    {
      v14 = qword_1ED3A5018;
      swift_retain();
      swift_retain();
      if (v14 != -1)
        swift_once();
      v37 = qword_1ED3A5008;
      swift_retain();
      v35 = 0;
    }
    v15 = v56;
    v34 = *((_QWORD *)&v57 + 1);
    v42 = v56;
    v43 = v57;
    v44 = v58;
    v45 = v59;
    v46 = v60;
    v36 = *((_QWORD *)&v55 + 1);
    swift_retain();
    sub_1BA87070C(v15);
    swift_retain();
    sub_1BAA37920((uint64_t *)&v42, (uint64_t)v41);
    v16 = v41[0];
    v17 = v41[1];
    v18 = v41[2];
    v19 = v41[3];
    v20 = v41[4];
    v34 = v41[6];
    v35 = v41[5];
    v32 = v41[8];
    v33 = v41[7];
    v31 = v41[9];
    if ((_QWORD)v61)
    {
      v22 = *((_QWORD *)&v61 + 1);
      v21 = v61;
      if (*((_QWORD *)&v61 + 1))
      {
LABEL_11:
        swift_retain();
        v23 = v22;
LABEL_14:
        v26 = v62;
        swift_retain();
        swift_retain();
        sub_1BA86E264((uint64_t)&v54);
        *(_QWORD *)&v42 = v39;
        *((_QWORD *)&v42 + 1) = v38;
        *(_QWORD *)&v43 = v37;
        *((_QWORD *)&v43 + 1) = v36;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = v17;
        *(_QWORD *)&v45 = v18;
        *((_QWORD *)&v45 + 1) = v19;
        *(_QWORD *)&v46 = v20;
        *((_QWORD *)&v46 + 1) = v35;
        v47 = v34;
        v48 = v33;
        v49 = v32;
        v50 = v31;
        v51 = v21;
        v52 = v23;
        v53 = v26;
        nullsub_1(&v42);
        v13 = v40;
        return sub_1BA86E400((uint64_t)&v42, v13);
      }
    }
    else
    {
      v24 = v28;
      sub_1BB86D06C();
      sub_1BA521E1C();
      v21 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v21 + *(_QWORD *)(*(_QWORD *)v21 + 112), v24, v30);
      *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 120)) = MEMORY[0x1E0DEE9D8];
      v22 = *((_QWORD *)&v61 + 1);
      if (*((_QWORD *)&v61 + 1))
        goto LABEL_11;
    }
    swift_retain();
    v25 = v28;
    sub_1BB86D06C();
    sub_1BA521E1C();
    v23 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v23 + *(_QWORD *)(*(_QWORD *)v23 + 112), v25, v30);
    *(_QWORD *)(v23 + *(_QWORD *)(*(_QWORD *)v23 + 120)) = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  sub_1BA86E264((uint64_t)&v54);
  sub_1BA86E3E4((uint64_t)&v42);
  v13 = a2;
  return sub_1BA86E400((uint64_t)&v42, v13);
}

uint64_t sub_1BA86E264(uint64_t a1)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1BA86E338(v3);
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1BA86E338(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

double sub_1BA86E3E4(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1BA86E400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4CF8F4(0, &qword_1EF2A95C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double FeedGroupClusteringKnobs.init(minNumberOfItems:maxNumberOfItems:bundleArticleQuotas:explicitSlotBundleArticleQuotas:groupingRules:minNumberOfItemsDepthTransform:maxNumberOfItemsDepthTransform:splittingConfiguration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  double result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = a8;
  v35 = a3;
  v16 = sub_1BB86D078();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a5;
  v39 = a5[1];
  v40 = v20;
  v21 = a5[2];
  v37 = a5[3];
  v38 = v21;
  v36 = a5[4];
  v33 = v17;
  v34 = v22;
  if (!a6)
  {
    swift_retain();
    v32 = a1;
    swift_retain();
    swift_retain();
    v28 = v35;
    swift_retain();
    sub_1BB86D06C();
    sub_1BA521E1C();
    v24 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24 + *(_QWORD *)(*(_QWORD *)v24 + 112), v19, v16);
    *(_QWORD *)(v24 + *(_QWORD *)(*(_QWORD *)v24 + 120)) = MEMORY[0x1E0DEE9D8];
    v25 = a4;
    v26 = v28;
    v27 = a2;
    v23 = v32;
    if (a7)
      goto LABEL_3;
LABEL_5:
    swift_retain();
    sub_1BB86D06C();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1BA521E1C();
    a7 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(a7 + *(_QWORD *)(*(_QWORD *)a7 + 112), v19, v34);
    *(_QWORD *)(a7 + *(_QWORD *)(*(_QWORD *)a7 + 120)) = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  swift_retain();
  v23 = a1;
  swift_retain();
  swift_retain();
  v24 = a6;
  v25 = a4;
  v26 = swift_retain();
  v27 = a2;
  if (!a7)
    goto LABEL_5;
LABEL_3:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_6:
  *(_QWORD *)a9 = v23;
  *(_QWORD *)(a9 + 8) = v27;
  *(_QWORD *)(a9 + 16) = v26;
  *(_QWORD *)(a9 + 24) = v25;
  v29 = v39;
  *(_OWORD *)(a9 + 32) = v40;
  *(_OWORD *)(a9 + 48) = v29;
  v30 = v37;
  *(_OWORD *)(a9 + 64) = v38;
  *(_OWORD *)(a9 + 80) = v30;
  result = *(double *)&v36;
  *(_OWORD *)(a9 + 96) = v36;
  *(_QWORD *)(a9 + 112) = v24;
  *(_QWORD *)(a9 + 120) = a7;
  *(_QWORD *)(a9 + 128) = v41;
  return result;
}

double FeedGroupClusteringKnobs.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, char *, uint64_t);
  uint64_t v12;
  double result;
  uint64_t v14;

  v2 = sub_1BB86D078();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA5ECC44();
  v6 = swift_allocObject();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 16) = 1;
  *(_QWORD *)(v6 + 24) = v7;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 + 24) = v7;
  if (qword_1ED3A5018 != -1)
    swift_once();
  v9 = qword_1ED3A5008;
  swift_retain();
  sub_1BB86D06C();
  sub_1BA521E1C();
  v10 = swift_allocObject();
  v11 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
  v11(v10 + *(_QWORD *)(*(_QWORD *)v10 + 112), v5, v2);
  *(_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 120)) = v7;
  sub_1BB86D06C();
  v12 = swift_allocObject();
  v11(v12 + *(_QWORD *)(*(_QWORD *)v12 + 112), v5, v2);
  *(_QWORD *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 120)) = v7;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

__n128 FeedGroupClusteringKnobs.init(minNumberOfItems:maxNumberOfItems:bundleArticleQuotas:explicitSlotBundleArticleQuotas:groupingRules:minNumberOfItemsDepthTransform:maxNumberOfItemsDepthTransform:splittingConfiguration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[4];
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[8];
  uint64_t v37;

  v32 = a7;
  v31 = a6;
  v30 = a5;
  v13 = type metadata accessor for FeedGroupBundleArticleQuotas();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_OWORD *)a4;
  v28 = *(_OWORD *)(a4 + 16);
  v27 = *(_OWORD *)(a4 + 32);
  v26 = *(_OWORD *)(a4 + 48);
  v16 = *(_QWORD *)(a4 + 64);
  v17 = *(_QWORD *)(a4 + 72);
  sub_1BA5ECC44();
  v18 = swift_allocObject();
  v19 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = v19;
  sub_1BA8707BC(a2, (uint64_t)v15);
  sub_1BA870800();
  v21 = swift_allocObject();
  sub_1BA5193C4((uint64_t)v15, v21 + *(_QWORD *)(*(_QWORD *)v21 + 112), (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
  *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 120)) = v19;
  v33[0] = v29;
  v33[1] = v28;
  v33[2] = v27;
  v33[3] = v26;
  v34 = v16;
  v35 = v17;
  FeedGroupClusteringKnobs.init(minNumberOfItems:maxNumberOfItems:bundleArticleQuotas:explicitSlotBundleArticleQuotas:groupingRules:minNumberOfItemsDepthTransform:maxNumberOfItemsDepthTransform:splittingConfiguration:)(v18, v20, v21, a3, v33, v30, v31, v32, (uint64_t)v36);
  sub_1BA4A2E80(a2, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
  v22 = v36[7];
  *(_OWORD *)(a8 + 96) = v36[6];
  *(_OWORD *)(a8 + 112) = v22;
  *(_QWORD *)(a8 + 128) = v37;
  v23 = v36[3];
  *(_OWORD *)(a8 + 32) = v36[2];
  *(_OWORD *)(a8 + 48) = v23;
  v24 = v36[5];
  *(_OWORD *)(a8 + 64) = v36[4];
  *(_OWORD *)(a8 + 80) = v24;
  result = (__n128)v36[1];
  *(_OWORD *)a8 = v36[0];
  *(__n128 *)(a8 + 16) = result;
  return result;
}

uint64_t FeedGroupClusteringKnobs.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40[5];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  char *v49;

  v36 = a2;
  sub_1BA870A28(0, &qword_1ED3AB3C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v30 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA8708D0();
  v11 = v49;
  sub_1BB87468C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v49 = v7;
  v31 = a1;
  v32 = 0;
  sub_1BA5ECC44();
  LOBYTE(v41) = 0;
  sub_1BA4A2870(&qword_1ED3C5E50, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  v13 = v4;
  sub_1BB874020();
  if (*(_QWORD *)&v47[0])
  {
    v34 = *(_QWORD *)&v47[0];
  }
  else
  {
    v14 = swift_allocObject();
    v15 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v14 + 16) = 1;
    *(_QWORD *)(v14 + 24) = v15;
    v34 = v14;
  }
  v16 = v5;
  LOBYTE(v41) = 1;
  sub_1BB874020();
  if (*(_QWORD *)&v47[0])
  {
    v33 = *(_QWORD *)&v47[0];
  }
  else
  {
    v17 = swift_allocObject();
    v18 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v17 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v17 + 24) = v18;
    v33 = v17;
  }
  sub_1BA870800();
  LOBYTE(v47[0]) = 3;
  sub_1BA4A2870(&qword_1ED3A5028, (uint64_t (*)(uint64_t))sub_1BA870800, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB874020();
  v19 = v46;
  v20 = v49;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v10, v13);
  v35 = v19;
  if (v19)
  {
    v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v20, v13);
  }
  else
  {
    LOBYTE(v41) = 2;
    sub_1BB874020();
    if (*(_QWORD *)&v47[0])
    {
      v35 = *(_QWORD *)&v47[0];
    }
    else
    {
      if (qword_1ED3A5018 != -1)
        swift_once();
      v35 = qword_1ED3A5008;
      swift_retain();
    }
    v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v49, v13);
  }
  LOBYTE(v47[0]) = 4;
  sub_1BA870914();
  sub_1BB874020();
  v40[0] = v41;
  v40[1] = v42;
  v40[2] = v43;
  v40[3] = v44;
  v40[4] = v45;
  sub_1BA521E1C();
  LOBYTE(v47[0]) = 5;
  sub_1BA4A2870(&qword_1ED3A28D0, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB874020();
  v22 = v39;
  LOBYTE(v47[0]) = 6;
  sub_1BB874020();
  v23 = v38;
  sub_1BA870958();
  LOBYTE(v47[0]) = 7;
  sub_1BA4A2870(&qword_1ED3A28A8, (uint64_t (*)(uint64_t))sub_1BA870958, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB874020();
  v24 = FeedGroupClusteringKnobs.init(minNumberOfItems:maxNumberOfItems:bundleArticleQuotas:explicitSlotBundleArticleQuotas:groupingRules:minNumberOfItemsDepthTransform:maxNumberOfItemsDepthTransform:splittingConfiguration:)(v34, v33, v35, 0, v40, v22, v23, v37, (uint64_t)v47);
  ((void (*)(char *, uint64_t, double))v21)(v10, v13, v24);
  v25 = v47[7];
  v26 = v36;
  *(_OWORD *)(v36 + 96) = v47[6];
  *(_OWORD *)(v26 + 112) = v25;
  *(_QWORD *)(v26 + 128) = v48;
  v27 = v47[3];
  *(_OWORD *)(v26 + 32) = v47[2];
  *(_OWORD *)(v26 + 48) = v27;
  v28 = v47[5];
  *(_OWORD *)(v26 + 64) = v47[4];
  *(_OWORD *)(v26 + 80) = v28;
  v29 = v47[1];
  *(_OWORD *)v26 = v47[0];
  *(_OWORD *)(v26 + 16) = v29;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
}

uint64_t FeedGroupClusteringKnobs.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  sub_1BA870A28(0, &qword_1ED3AB5F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  v10 = *v1;
  v9 = v1[1];
  v30 = v1[2];
  v31 = v9;
  v20 = v1[4];
  v11 = v1[5];
  v28 = v1[6];
  v29 = v11;
  v12 = v1[7];
  v26 = v1[8];
  v27 = v12;
  v13 = v1[9];
  v24 = v1[10];
  v25 = v13;
  v14 = v1[11];
  v22 = v1[12];
  v23 = v14;
  v21 = v1[13];
  v19 = v1[14];
  v18 = v1[15];
  v17 = v1[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA8708D0();
  sub_1BB8746C8();
  v32 = v10;
  v42 = 0;
  sub_1BA5ECC44();
  sub_1BA4A2870(qword_1ED3A5078, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB8741AC();
  if (!v2)
  {
    v15 = v30;
    v32 = v31;
    v42 = 1;
    sub_1BB8741AC();
    v32 = v15;
    v42 = 3;
    sub_1BA870800();
    sub_1BA4A2870(&qword_1ED3A5020, (uint64_t (*)(uint64_t))sub_1BA870800, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB8741AC();
    v32 = v20;
    v33 = v29;
    v34 = v28;
    v35 = v27;
    v36 = v26;
    v37 = v25;
    v38 = v24;
    v39 = v23;
    v40 = v22;
    v41 = v21;
    v42 = 4;
    sub_1BA4CF8F4(0, &qword_1ED3A4F28);
    sub_1BA870A84();
    sub_1BB8741AC();
    v32 = v19;
    v42 = 5;
    sub_1BA521E1C();
    sub_1BA4A2870(&qword_1ED3A28C8, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB8741AC();
    v32 = v18;
    v42 = 6;
    sub_1BB8741AC();
    v32 = v17;
    v42 = 7;
    sub_1BA4A3FB4(0, &qword_1ED3A28B8, (void (*)(uint64_t))sub_1BA870958);
    sub_1BA870B38();
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BA86F2BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedGroupClusteringKnobs.init(from:)(a1, a2);
}

uint64_t sub_1BA86F2D0(_QWORD *a1)
{
  return FeedGroupClusteringKnobs.encode(to:)(a1);
}

uint64_t FeedGroupClusteringKnobs.merge(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[20];
  _QWORD v69[10];
  _QWORD v70[11];

  v4 = a1[1];
  v5 = a1[2];
  v60 = a1[3];
  v62 = a1[4];
  v55 = a1[7];
  v56 = a1[6];
  v53 = a1[9];
  v54 = a1[8];
  v45 = a1[10];
  v46 = a1[5];
  v44 = a1[11];
  v6 = a1[14];
  v51 = a1[13];
  v52 = a1[12];
  v7 = a1[15];
  v8 = a1[16];
  v58 = v2[2];
  v59 = v2[1];
  v9 = v2[4];
  v63 = v2[6];
  v64 = v2[5];
  v65 = v2[7];
  v66 = v2[9];
  v10 = v2[11];
  v57 = v2[10];
  v47 = v2[13];
  v48 = v2[12];
  v49 = v2[15];
  v50 = v2[14];
  v67 = v2[8];
  if (*a1)
  {
    v43 = *a1;
    v11 = a1[4];
    if (v4)
      goto LABEL_3;
LABEL_6:
    swift_retain();
    if (v5)
      goto LABEL_4;
    goto LABEL_7;
  }
  v43 = *v2;
  swift_retain();
  v11 = v62;
  if (!v4)
    goto LABEL_6;
LABEL_3:
  v59 = v4;
  if (v5)
  {
LABEL_4:
    v58 = v5;
    goto LABEL_8;
  }
LABEL_7:
  swift_retain();
LABEL_8:
  v61 = v9;
  if (v11 == 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v12 = v47;
    v13 = v48;
    sub_1BA86DE54(v9);
    v14 = v57;
    v16 = v49;
    v15 = v50;
    if (v6)
      goto LABEL_10;
  }
  else
  {
    v42 = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BA87070C(v62);
    if (v9)
    {
      v24 = v66;
      v25 = v47;
      v26 = v48;
      v27 = v10;
      v28 = v57;
      v29 = v67;
      v30 = v65;
      v31 = v63;
      v32 = v64;
      v33 = v9;
    }
    else
    {
      static FeedGroupGroupingRules.noRules.getter(v69);
      v33 = v69[0];
      v32 = v69[1];
      v31 = v69[2];
      v30 = v69[3];
      v29 = v69[4];
      v24 = v69[5];
      v28 = v69[6];
      v27 = v69[7];
      v26 = v69[8];
      v25 = v69[9];
    }
    v68[10] = v33;
    v68[11] = v32;
    v68[12] = v31;
    v68[13] = v30;
    v68[14] = v29;
    v68[15] = v24;
    v68[16] = v28;
    v68[17] = v27;
    v68[18] = v26;
    v68[19] = v25;
    v68[0] = v62;
    v68[1] = v46;
    v68[2] = v56;
    v68[3] = v55;
    v68[4] = v54;
    v68[5] = v53;
    v68[6] = v45;
    v68[7] = v44;
    v68[8] = v52;
    v68[9] = v51;
    FeedGroupGroupingRules.merge(with:)(v68, v70);
    sub_1BA86DE54(v9);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1BA86E338(v62);
    v61 = v70[0];
    v64 = v70[1];
    v63 = v70[2];
    v65 = v70[3];
    v67 = v70[4];
    v14 = v70[6];
    v66 = v70[5];
    v10 = v70[7];
    v13 = v70[8];
    v12 = v70[9];
    v6 = v42;
    v16 = v49;
    v15 = v50;
    if (v42)
    {
LABEL_10:
      v15 = v6;
      if (v7)
        goto LABEL_11;
LABEL_19:
      v38 = v12;
      v39 = v13;
      v40 = v10;
      v41 = v14;
      swift_retain();
      v14 = v41;
      v10 = v40;
      v13 = v39;
      v12 = v38;
      v17 = v8;
      if (v8)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v34 = v12;
  v35 = v13;
  v36 = v10;
  v37 = v14;
  swift_retain();
  v14 = v37;
  v10 = v36;
  v13 = v35;
  v12 = v34;
  if (!v7)
    goto LABEL_19;
LABEL_11:
  v16 = v7;
  v17 = v8;
  if (!v8)
  {
LABEL_12:
    v18 = v12;
    v19 = v13;
    v20 = v10;
    v21 = v14;
    v22 = swift_retain();
    v14 = v21;
    v10 = v20;
    v13 = v19;
    v12 = v18;
    v17 = v22;
  }
LABEL_13:
  *a2 = v43;
  a2[1] = v59;
  a2[2] = v58;
  a2[3] = v60;
  a2[4] = v61;
  a2[5] = v64;
  a2[6] = v63;
  a2[7] = v65;
  a2[8] = v67;
  a2[9] = v66;
  a2[10] = v14;
  a2[11] = v10;
  a2[12] = v13;
  a2[13] = v12;
  a2[14] = v15;
  a2[15] = v16;
  a2[16] = v17;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobs.rules(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v51;
  int *v52;
  uint64_t result;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;

  v63 = a2;
  sub_1BA7677C4(0);
  MEMORY[0x1E0C80A78](v4);
  v66 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[2];
  v10 = v2[4];
  v11 = v2[6];
  v60 = v2[5];
  v61 = v11;
  v62 = v2[8];
  v12 = *(_QWORD *)(v7 + 24);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = *(_QWORD *)(v7 + 16);
  v15 = v66;
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65 = sub_1BA8711CC(v14, v12, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v65 = v14;
  }
  v16 = *(_QWORD *)(v8 + 24);
  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)(v8 + 16);
    if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v46 = sub_1BB873F30();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v8 + 16);
  if (v46)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_1BA8711CC(v17, v16, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v18 = *(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 + 120));
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = *(_QWORD *)(*(_QWORD *)v9 + 112);
  v21 = v9 + v20;
  if (v19)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1BA8701B8(v21, v18, v6, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1BA8707BC(v9 + v20, v15);
  }
  v22 = type metadata accessor for FeedGroupBundleArticleQuotas();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 0, 1, v22);
  v23 = v10;
  v64 = v17;
  if (v10)
  {
    v24 = *(_QWORD *)(v10 + 24);
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = v10;
      v25 = sub_1BB873F30();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v27 = v60;
    v26 = v61;
    v28 = *(_QWORD *)(v23 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = sub_1BA8711CC(v28, v24, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v61 = v28;
    v29 = *(_QWORD *)(v27 + 24);
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      v47 = sub_1BB873F30();
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v27 + 16);
      if (!v47)
      {
LABEL_22:
        v60 = v30;
        v31 = *(_QWORD *)(v26 + 24);
        if (v31 >> 62)
        {
          swift_bridgeObjectRetain();
          v48 = sub_1BB873F30();
          swift_bridgeObjectRelease();
          v32 = *(_QWORD *)(v26 + 16);
          if (!v48)
          {
LABEL_25:
            v33 = v62;
            v34 = *(_QWORD *)(v62 + 56);
            if (v34 >> 62)
            {
              swift_bridgeObjectRetain();
              v49 = sub_1BB873F30();
              swift_bridgeObjectRelease();
              v33 = v62;
              v59 = v32;
              if (v49)
                goto LABEL_27;
            }
            else
            {
              v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
              v59 = v32;
              if (v35)
              {
LABEL_27:
                v36 = *(_OWORD *)(v33 + 32);
                v72[0] = *(_OWORD *)(v33 + 16);
                v72[1] = v36;
                v73 = *(_QWORD *)(v33 + 48);
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                sub_1BA86FD90((uint64_t)v72, v34, v6, &v67);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v37 = v67;
                v38 = v68;
                v39 = v69;
                v40 = v70;
                v41 = v71;
LABEL_40:
                v62 = v38;
                v45 = v40;
                v43 = v60;
                v42 = v61;
                v44 = v59;
                goto LABEL_41;
              }
            }
            v37 = *(_QWORD *)(v33 + 16);
            v38 = *(unsigned __int8 *)(v33 + 24);
            v39 = *(_QWORD *)(v33 + 32);
            v40 = *(unsigned __int8 *)(v33 + 40);
            v41 = *(_QWORD *)(v33 + 48);
            swift_bridgeObjectRetain();
            goto LABEL_40;
          }
        }
        else
        {
          v32 = *(_QWORD *)(v26 + 16);
          if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_25;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v32 = sub_1BA8711CC(v32, v31, v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      v30 = *(_QWORD *)(v27 + 16);
      if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = sub_1BA8711CC(v30, v29, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v37 = 0;
  v62 = 0;
  v39 = 0;
  v45 = 0;
  v41 = 1;
LABEL_41:
  v50 = v63;
  *v63 = v65;
  v51 = v23 == 0;
  *((_BYTE *)v50 + 8) = 0;
  v50[2] = v64;
  *((_BYTE *)v50 + 24) = 0;
  v52 = (int *)type metadata accessor for FeedPersonalizationClusteringRules();
  result = sub_1BA5193C4(v66, (uint64_t)v50 + v52[6], (uint64_t (*)(_QWORD))sub_1BA7677C4);
  v54 = (char *)v50 + v52[7];
  *(_QWORD *)v54 = v42;
  v54[8] = v51;
  v55 = (char *)v50 + v52[8];
  *(_QWORD *)v55 = v43;
  v55[8] = v51;
  v56 = (char *)v50 + v52[9];
  *(_QWORD *)v56 = v44;
  v56[8] = v51;
  v57 = (uint64_t *)((char *)v50 + v52[10]);
  v58 = v62;
  *v57 = v37;
  v57[1] = v58;
  v57[2] = v39;
  v57[3] = v45;
  v57[4] = v41;
  return result;
}

uint64_t sub_1BA86FD90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  size_t v22;
  uint64_t isStackAllocationSafe;
  char *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52[3];

  v50 = a3;
  v4 = a2;
  v37 = a4;
  v52[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = v5;
  v7 = *(_QWORD *)(a1 + 32);
  v38 = *(_BYTE *)(a1 + 24) & 1;
  v39 = v6 & 1;
  if (a2 >> 62)
    goto LABEL_28;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1BA871D90(a1);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v34 = v37;
    *v37 = v41;
    *((_BYTE *)v34 + 8) = v39 & 1;
    v34[2] = v40;
    *((_BYTE *)v34 + 24) = v38 & 1;
    v34[4] = v7;
    return result;
  }
LABEL_3:
  v9 = 0;
  v44 = v4;
  v45 = v4 & 0xC000000000000001;
  v42 = v4 + 32;
  v43 = v8;
  while (1)
  {
    if (v45)
    {
      a1 = MEMORY[0x1BCCE4630](v9, v4);
      v10 = a1;
      v11 = __OFADD__(v9++, 1);
      if (v11)
        goto LABEL_27;
    }
    else
    {
      v10 = *(_QWORD *)(v42 + 8 * v9);
      a1 = swift_retain();
      v11 = __OFADD__(v9++, 1);
      if (v11)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        sub_1BA871D90(a1);
        swift_bridgeObjectRetain();
        v8 = sub_1BB873F30();
        if (!v8)
          goto LABEL_29;
        goto LABEL_3;
      }
    }
    if (qword_1ED3BE7F8 != -1)
      swift_once();
    v49 = v10;
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    v52[0] = v12;
    v52[1] = v13;
    swift_bridgeObjectRetain();
    v14 = sub_1BA6E583C(v52);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
      break;
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    if (v9 == v8)
      goto LABEL_29;
  }
  v47 = v7;
  v48 = v9;
  v46 = v14;
  v16 = (uint64_t *)(v14 + 64);
  while (1)
  {
    v17 = *(v16 - 1);
    v18 = *v16;
    v19 = *(_BYTE *)(v17 + 32);
    v20 = v19 & 0x3F;
    v21 = (unint64_t)((1 << v19) + 63) >> 6;
    v22 = 8 * v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v20 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v24 = (char *)swift_slowAlloc();
    bzero(v24, v22);
    v27 = v51;
    v28 = sub_1BA6EB5B4((uint64_t)v24, v21, v17, v50);
    v51 = v27;
    if (v27)
      goto LABEL_30;
    v26 = v28;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCE5C38](v24, -1, -1);
LABEL_23:
    v29 = sub_1BA6EB330(v26, v17);
    swift_release();
    if ((v29 & 1) != 0)
    {
      v30 = sub_1BA6EBD20(v50, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
      {
        v31 = *(_QWORD *)(v49 + 32);
        v32 = *(unsigned __int8 *)(v49 + 40);
        v40 = *(_QWORD *)(v49 + 48);
        v41 = v31;
        v38 = *(unsigned __int8 *)(v49 + 56);
        v39 = v32;
        v7 = *(_QWORD *)(v49 + 64);
        swift_bridgeObjectRelease();
        v8 = v43;
        v4 = v44;
        v9 = v48;
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v16 += 5;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      v9 = v48;
      v7 = v47;
      v8 = v43;
      v4 = v44;
      goto LABEL_5;
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v24 = (char *)&v36 - ((v22 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v24, v22);
  v25 = v51;
  v26 = sub_1BA6EB5B4((uint64_t)v24, v21, v17, v50);
  swift_bridgeObjectRelease();
  v51 = v25;
  if (!v25)
    goto LABEL_23;
  v35 = v51;
  swift_willThrow();

  __break(1u);
LABEL_30:
  swift_bridgeObjectRelease();

  result = MEMORY[0x1BCCE5C38](v24, -1, -1);
  __break(1u);
  return result;
}

uint64_t sub_1BA8701B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  size_t v37;
  uint64_t isStackAllocationSafe;
  char *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68[3];

  v5 = v4;
  v66 = a3;
  v52 = a4;
  v68[2] = *MEMORY[0x1E0C80C00];
  sub_1BA7677C4(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FeedGroupBundleArticleQuotas();
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v51 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v51 - v18;
  sub_1BA8707BC(a1, (uint64_t)&v51 - v18);
  if (a2 >> 62)
    goto LABEL_31;
  v20 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    sub_1BA5193C4((uint64_t)v19, v52, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  v21 = 0;
  v60 = a2 & 0xC000000000000001;
  v53 = a2 + 32;
  v55 = v10;
  v56 = a2;
  v54 = v13;
  v58 = v16;
  v59 = v19;
  v57 = v20;
  while (1)
  {
    if (v60)
    {
      v23 = v21;
      v24 = MEMORY[0x1BCCE4630](v21, a2);
      v25 = v21 + 1;
      if (__OFADD__(v23, 1))
        goto LABEL_30;
    }
    else
    {
      v24 = swift_retain();
      v26 = __OFADD__(v21, 1);
      v25 = v21 + 1;
      if (v26)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        swift_bridgeObjectRetain();
        v20 = sub_1BB873F30();
        if (!v20)
          goto LABEL_32;
        goto LABEL_3;
      }
    }
    v64 = v25;
    if (qword_1ED3BE7F8 != -1)
    {
      v49 = v24;
      swift_once();
      v24 = v49;
    }
    v27 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    v65 = v24;
    v68[0] = v27;
    v68[1] = v28;
    swift_bridgeObjectRetain();
    v29 = sub_1BA6E583C(v68);
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
      break;
    swift_bridgeObjectRelease();
    v46 = 1;
LABEL_28:
    v48 = v61;
    v47 = v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v10, v46, 1, v62);
    v19 = v59;
    sub_1BA8707BC((uint64_t)v59, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v10, 1, v47) == 1)
    {
      v16 = v58;
      sub_1BA5193C4((uint64_t)v13, (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
      sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BA7677C4);
    }
    else
    {
      sub_1BA4A2E80((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
      v16 = v58;
      sub_1BA5193C4((uint64_t)v10, (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
    }
    v22 = v57;
    swift_release();
    sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
    sub_1BA5193C4((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FeedGroupBundleArticleQuotas);
    v21 = v64;
    if (v64 == v22)
      goto LABEL_32;
  }
  v63 = v29;
  v31 = (uint64_t *)(v29 + 64);
  while (1)
  {
    v67 = v5;
    v32 = *(v31 - 1);
    v33 = *v31;
    v34 = *(_BYTE *)(v32 + 32);
    v35 = v34 & 0x3F;
    v36 = (unint64_t)((1 << v34) + 63) >> 6;
    v37 = 8 * v36;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v35 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v39 = (char *)swift_slowAlloc();
    bzero(v39, v37);
    v42 = v67;
    v43 = sub_1BA6EB5B4((uint64_t)v39, v36, v32, v66);
    v5 = v42;
    if (v42)
      goto LABEL_33;
    v41 = v43;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCE5C38](v39, -1, -1);
LABEL_23:
    v44 = sub_1BA6EB330(v41, v32);
    swift_release();
    if ((v44 & 1) != 0)
    {
      v45 = sub_1BA6EBD20(v66, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v10 = v55;
        sub_1BA8707BC(v65 + *(_QWORD *)(*(_QWORD *)v65 + 120), (uint64_t)v55);
        v46 = 0;
        a2 = v56;
        v13 = v54;
        goto LABEL_28;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v31 += 5;
    if (!--v30)
    {
      swift_bridgeObjectRelease();
      v46 = 1;
      v10 = v55;
      a2 = v56;
      v13 = v54;
      goto LABEL_28;
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v39 = (char *)&v51 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v39, v37);
  v40 = v67;
  v41 = sub_1BA6EB5B4((uint64_t)v39, v36, v32, v66);
  v5 = v40;
  swift_bridgeObjectRelease();
  if (!v40)
    goto LABEL_23;
  swift_willThrow();

  __break(1u);
LABEL_33:
  swift_bridgeObjectRelease();

  result = MEMORY[0x1BCCE5C38](v39, -1, -1);
  __break(1u);
  return result;
}

uint64_t sub_1BA87070C(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1BA8707BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedGroupBundleArticleQuotas();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA870800()
{
  uint64_t result;

  result = qword_1ED3A5030;
  if (!qword_1ED3A5030)
  {
    type metadata accessor for FeedGroupBundleArticleQuotas();
    sub_1BA4A2870(&qword_1ED3A51A8, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupBundleArticleQuotas, (uint64_t)&protocol conformance descriptor for FeedGroupBundleArticleQuotas);
    sub_1BA4A2870(&qword_1ED3A5198, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupBundleArticleQuotas, (uint64_t)&protocol conformance descriptor for FeedGroupBundleArticleQuotas);
    sub_1BA4A2870(&qword_1ED3A51A0, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupBundleArticleQuotas, (uint64_t)&protocol conformance descriptor for FeedGroupBundleArticleQuotas);
    type metadata accessor for FeedGroupKnobsRuleValue();
  }
  return result;
}

unint64_t sub_1BA8708D0()
{
  unint64_t result;

  result = qword_1ED3A5130;
  if (!qword_1ED3A5130)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87E6D4, &type metadata for FeedGroupClusteringKnobs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A5130);
  }
  return result;
}

unint64_t sub_1BA870914()
{
  unint64_t result;

  result = qword_1ED3A4F20;
  if (!qword_1ED3A4F20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupGroupingRules, &type metadata for FeedGroupGroupingRules);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F20);
  }
  return result;
}

uint64_t sub_1BA870958()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = qword_1ED3A28B0;
  if (!qword_1ED3A28B0)
  {
    sub_1BB86D024();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA7E8];
    sub_1BA4A2870((unint64_t *)&unk_1ED3A24D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA7E8], MEMORY[0x1E0DDA808]);
    sub_1BA4A2870(&qword_1ED3A24C0, v1, MEMORY[0x1E0DDA7F8]);
    sub_1BA4A2870(&qword_1ED3A24C8, v1, MEMORY[0x1E0DDA800]);
    type metadata accessor for FeedGroupKnobsRuleValue();
  }
  return result;
}

void sub_1BA870A28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BA8708D0();
    v7 = a3(a1, &type metadata for FeedGroupClusteringKnobs.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BA870A84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED3A4F30;
  if (!qword_1ED3A4F30)
  {
    sub_1BA4CF8F4(255, &qword_1ED3A4F28);
    v2 = v1;
    v3 = sub_1BA870AF4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F30);
  }
  return result;
}

unint64_t sub_1BA870AF4()
{
  unint64_t result;

  result = qword_1ED3A4F18;
  if (!qword_1ED3A4F18)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupGroupingRules, &type metadata for FeedGroupGroupingRules);
    atomic_store(result, (unint64_t *)&qword_1ED3A4F18);
  }
  return result;
}

unint64_t sub_1BA870B38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED3A28C0;
  if (!qword_1ED3A28C0)
  {
    sub_1BA4A3FB4(255, &qword_1ED3A28B8, (void (*)(uint64_t))sub_1BA870958);
    v2 = v1;
    v3 = sub_1BA4A2870(&qword_1ED3A28A0, (uint64_t (*)(uint64_t))sub_1BA870958, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEE988], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED3A28C0);
  }
  return result;
}

BOOL _s8NewsFeed0B20GroupClusteringKnobsV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[10];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v3 = a1[1];
  v2 = a1[2];
  v4 = a1[3];
  v45 = a1[5];
  v46 = a1[6];
  v47 = a1[7];
  v48 = a1[4];
  v5 = a1[9];
  v7 = a1[10];
  v6 = a1[11];
  v44 = a1[12];
  v42 = a1[8];
  v43 = a1[13];
  v31 = a1[14];
  v29 = a1[15];
  v27 = a1[16];
  v9 = a2[1];
  v8 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  v34 = a2[5];
  v35 = a2[6];
  v36 = a2[7];
  v37 = a2[8];
  v38 = a2[9];
  v39 = a2[10];
  v40 = a2[11];
  v32 = a2[13];
  v33 = a2[12];
  v30 = a2[14];
  v28 = a2[15];
  v26 = a2[16];
  if ((sub_1BA893E60(*(_QWORD *)(*a1 + 24), *(_QWORD *)(*a2 + 24)) & 1) == 0
    || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v9 + 16)
    || (sub_1BA893E60(*(_QWORD *)(v3 + 24), *(_QWORD *)(v9 + 24)) & 1) == 0
    || (sub_1BB55C7FC(v2, v8) & 1) == 0)
  {
    return 0;
  }
  if (v4)
  {
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(v4 + 16);
    v13 = *(_QWORD *)(v11 + 16);
    swift_retain();
    swift_retain();
    if ((sub_1BA8934F8(v12, v13) & 1) == 0)
    {
      swift_release();
      goto LABEL_17;
    }
    v14 = sub_1BA893228(*(_QWORD *)(v4 + 24), *(_QWORD *)(v11 + 24));
    swift_release();
    swift_release();
    if ((v14 & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (!v48)
  {
    v19 = v6;
    v18 = v7;
    v17 = v5;
    v16 = v42;
    v21 = v43;
    v15 = v46;
    v22 = v47;
    v20 = v44;
    v23 = v45;
    if (!v10)
      goto LABEL_19;
LABEL_29:
    v50 = v48;
    v51 = v23;
    v52 = v15;
    v53 = v22;
    v54 = v16;
    v55 = v17;
    v56 = v18;
    v57 = v19;
    v58 = v20;
    v59 = v21;
    v60 = v10;
    v61 = v34;
    v62 = v35;
    v63 = v36;
    v64 = v37;
    v65 = v38;
    v66 = v39;
    v67 = v40;
    v68 = v33;
    v69 = v32;
    sub_1BA86DE54(v10);
    sub_1BA871DB8(&v50);
    return 0;
  }
  v15 = v46;
  v50 = v48;
  v51 = v45;
  v52 = v46;
  v53 = v47;
  v16 = v42;
  v54 = v42;
  v55 = v5;
  v17 = v5;
  v18 = v7;
  v56 = v7;
  v57 = v6;
  v19 = v6;
  v21 = v43;
  v20 = v44;
  v58 = v44;
  v59 = v43;
  if (!v10)
  {
    swift_retain();
    v23 = v45;
    swift_retain();
    swift_retain();
    v22 = v47;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_29;
  }
  v49[0] = v10;
  v49[1] = v34;
  v49[2] = v35;
  v49[3] = v36;
  v49[4] = v37;
  v49[5] = v38;
  v49[6] = v39;
  v49[7] = v40;
  v49[8] = v33;
  v49[9] = v32;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  v41 = static FeedGroupGroupingRules.== infix(_:_:)(&v50, v49);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1BA871E60(v48);
  if ((v41 & 1) == 0)
    return 0;
LABEL_19:
  sub_1BB86D078();
  sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
  if ((sub_1BB872958() & 1) == 0
    || (sub_1BA892EC0(*(_QWORD *)(v31 + *(_QWORD *)(*(_QWORD *)v31 + 120)), *(_QWORD *)(v30 + *(_QWORD *)(*(_QWORD *)v30 + 120))) & 1) == 0|| (sub_1BB872958() & 1) == 0|| (sub_1BA892EC0(*(_QWORD *)(v29 + *(_QWORD *)(*(_QWORD *)v29 + 120)), *(_QWORD *)(v28 + *(_QWORD *)(*(_QWORD *)v28 + 120))) & 1) == 0)
  {
    return 0;
  }
  if (v27)
  {
    if (!v26)
      return 0;
    sub_1BB86D024();
    sub_1BA4A2870(&qword_1ED3A24C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA7E8], MEMORY[0x1E0DDA800]);
    swift_retain();
    swift_retain();
    if ((sub_1BB872958() & 1) != 0)
    {
      v24 = sub_1BA892EA4(*(_QWORD *)(v27 + *(_QWORD *)(*(_QWORD *)v27 + 120)), *(_QWORD *)(v26 + *(_QWORD *)(*(_QWORD *)v26 + 120)));
      swift_release();
      swift_release();
      return (v24 & 1) != 0;
    }
    swift_release();
LABEL_17:
    swift_release();
    return 0;
  }
  return !v26;
}

uint64_t sub_1BA871184()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t sub_1BA8711CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  size_t v17;
  uint64_t isStackAllocationSafe;
  char *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39[3];

  v37 = a3;
  v3 = a2;
  v29 = a1;
  v39[2] = *MEMORY[0x1E0C80C00];
  if (a2 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return v29;
  }
LABEL_3:
  v5 = 0;
  v32 = v3;
  v33 = v3 & 0xC000000000000001;
  v30 = v3 + 32;
  v31 = v4;
  while (1)
  {
    if (v33)
    {
      v6 = MEMORY[0x1BCCE4630](v5, v3);
      v7 = __OFADD__(v5++, 1);
      if (v7)
        goto LABEL_27;
    }
    else
    {
      v6 = *(_QWORD *)(v30 + 8 * v5);
      swift_retain();
      v7 = __OFADD__(v5++, 1);
      if (v7)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        swift_bridgeObjectRetain();
        v4 = sub_1BB873F30();
        if (!v4)
          goto LABEL_29;
        goto LABEL_3;
      }
    }
    if (qword_1ED3BE7F8 != -1)
      swift_once();
    v8 = *(_QWORD *)(v6 + 24);
    v39[0] = *(_QWORD *)(v6 + 16);
    v39[1] = v8;
    swift_bridgeObjectRetain();
    v9 = sub_1BA6E583C(v39);
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      break;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v5 == v4)
      goto LABEL_29;
  }
  v35 = v6;
  v36 = v5;
  v34 = v9;
  v11 = (uint64_t *)(v9 + 64);
  while (1)
  {
    v12 = *(v11 - 1);
    v13 = *v11;
    v14 = *(_BYTE *)(v12 + 32);
    v15 = v14 & 0x3F;
    v16 = (unint64_t)((1 << v14) + 63) >> 6;
    v17 = 8 * v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v15 <= 0xD)
      break;
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
      break;
    v19 = (char *)swift_slowAlloc();
    bzero(v19, v17);
    v22 = v38;
    v23 = sub_1BA6EB5B4((uint64_t)v19, v16, v12, v37);
    v38 = v22;
    if (v22)
      goto LABEL_30;
    v21 = v23;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCE5C38](v19, -1, -1);
LABEL_23:
    v24 = sub_1BA6EB330(v21, v12);
    swift_release();
    if ((v24 & 1) != 0)
    {
      v25 = sub_1BA6EBD20(v37, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
      {
        v29 = *(_QWORD *)(v35 + 32);
LABEL_26:
        swift_release();
        swift_bridgeObjectRelease();
        v4 = v31;
        v3 = v32;
        v5 = v36;
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v11 += 5;
    if (!--v10)
      goto LABEL_26;
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v19 = (char *)&v28 - ((v17 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v19, v17);
  v20 = v38;
  v21 = sub_1BA6EB5B4((uint64_t)v19, v16, v12, v37);
  swift_bridgeObjectRelease();
  v38 = v20;
  if (!v20)
    goto LABEL_23;
  v27 = v38;
  swift_willThrow();

  __break(1u);
LABEL_30:
  swift_bridgeObjectRelease();

  result = MEMORY[0x1BCCE5C38](v19, -1, -1);
  __break(1u);
  return result;
}

uint64_t destroy for FeedGroupClusteringKnobs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for FeedGroupClusteringKnobs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v7 = a2 + 4;
  v6 = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v8 = a2[5];
    v9 = a2[6];
    a1[4] = v6;
    a1[5] = v8;
    v10 = a2[7];
    v11 = a2[8];
    a1[6] = v9;
    a1[7] = v10;
    v12 = a2[9];
    v13 = a2[10];
    a1[8] = v11;
    a1[9] = v12;
    v15 = a2[11];
    v14 = a2[12];
    a1[10] = v13;
    a1[11] = v15;
    v20 = a2[13];
    a1[12] = v14;
    a1[13] = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v16 = v7[3];
    *((_OWORD *)a1 + 4) = v7[2];
    *((_OWORD *)a1 + 5) = v16;
    *((_OWORD *)a1 + 6) = v7[4];
    v17 = v7[1];
    *((_OWORD *)a1 + 2) = *v7;
    *((_OWORD *)a1 + 3) = v17;
  }
  v18 = a2[15];
  a1[14] = a2[14];
  a1[15] = v18;
  a1[16] = a2[16];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FeedGroupClusteringKnobs(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  v4 = a1 + 4;
  v6 = a2 + 4;
  v5 = a2[4];
  if (a1[4])
  {
    if (v5)
    {
      a1[4] = v5;
      swift_retain();
      swift_release();
      a1[5] = a2[5];
      swift_retain();
      swift_release();
      a1[6] = a2[6];
      swift_retain();
      swift_release();
      a1[7] = a2[7];
      swift_retain();
      swift_release();
      a1[8] = a2[8];
      swift_retain();
      swift_release();
      a1[9] = a2[9];
      swift_retain();
      swift_release();
      a1[10] = a2[10];
      swift_retain();
      swift_release();
      a1[11] = a2[11];
      swift_retain();
      swift_release();
      a1[12] = a2[12];
      swift_retain();
      swift_release();
      a1[13] = a2[13];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1BA871A14((uint64_t)(a1 + 4));
      *v4 = *v6;
      v7 = *((_OWORD *)a2 + 6);
      v9 = *((_OWORD *)a2 + 3);
      v8 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 6) = v7;
      *((_OWORD *)a1 + 3) = v9;
      *((_OWORD *)a1 + 4) = v8;
    }
  }
  else if (v5)
  {
    a1[4] = v5;
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *v4 = *v6;
    v10 = *((_OWORD *)a2 + 3);
    v11 = *((_OWORD *)a2 + 4);
    v12 = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 6) = v12;
    *((_OWORD *)a1 + 3) = v10;
    *((_OWORD *)a1 + 4) = v11;
  }
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  a1[15] = a2[15];
  swift_retain();
  swift_release();
  a1[16] = a2[16];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BA871A14(uint64_t a1)
{
  destroy for FeedGroupGroupingRules();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for FeedGroupClusteringKnobs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  if (!v4)
  {
    sub_1BA871A14(a1 + 32);
LABEL_5:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusteringKnobs.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BA871C38 + 4 * byte_1BB87E515[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BA871C6C + 4 * byte_1BB87E510[v4]))();
}

uint64_t sub_1BA871C6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA871C74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA871C7CLL);
  return result;
}

uint64_t sub_1BA871C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA871C90);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BA871C94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA871C9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobs.CodingKeys()
{
  return &type metadata for FeedGroupClusteringKnobs.CodingKeys;
}

unint64_t sub_1BA871CBC()
{
  unint64_t result;

  result = qword_1EF2A95C8[0];
  if (!qword_1EF2A95C8[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87E6AC, &type metadata for FeedGroupClusteringKnobs.CodingKeys);
    atomic_store(result, qword_1EF2A95C8);
  }
  return result;
}

unint64_t sub_1BA871D04()
{
  unint64_t result;

  result = qword_1ED3A5140;
  if (!qword_1ED3A5140)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87E5E4, &type metadata for FeedGroupClusteringKnobs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A5140);
  }
  return result;
}

unint64_t sub_1BA871D4C()
{
  unint64_t result;

  result = qword_1ED3A5138;
  if (!qword_1ED3A5138)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87E60C, &type metadata for FeedGroupClusteringKnobs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A5138);
  }
  return result;
}

uint64_t sub_1BA871D90(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1BA871DB8(uint64_t *a1)
{
  uint64_t v3;

  v3 = a1[10];
  sub_1BA871E60(*a1);
  sub_1BA871E60(v3);
  return a1;
}

uint64_t sub_1BA871E60(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BA871F08()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BA871F48@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v5 = *v2;
  v6 = v2[2];
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2[3];
  v8 = v2[4];
  v9 = *(_QWORD *)(*v2 + 80);
  v10 = *(_QWORD *)(v5 + 88);
  v11 = sub_1BA86D968(v9, v10);
  sub_1BA99A5F0(a1, 0, (uint64_t)v11, v12, (uint64_t)sub_1BA86D9F0, 0, v6, v7, v8, v9, v10);
  swift_release();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v13 = sub_1BB872E68();
  return sub_1BA62EDB8(v13, a2);
}

uint64_t type metadata accessor for ForceFeedRefreshStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForceFeedRefreshStrategy);
}

uint64_t FeedItemAuxiliaryItem.feedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA6DB2D0(v1, a1);
}

uint64_t FeedItemAuxiliaryItem.options.getter()
{
  type metadata accessor for FeedItemAuxiliaryItem();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for FeedItemAuxiliaryItem()
{
  uint64_t result;

  result = qword_1ED3A2958;
  if (!qword_1ED3A2958)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FeedItemAuxiliaryItem.selectors.getter()
{
  type metadata accessor for FeedItemAuxiliaryItem();
  return swift_bridgeObjectRetain();
}

char *initializeBufferWithCopyOfBuffer for FeedItemAuxiliaryItem(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  uint64_t v62;
  char *v63;
  int *v64;
  unsigned int (*v65)(char *, uint64_t, int *);
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  id v72;
  __int128 v73;
  int v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  id v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  _OWORD *v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int (*v156)(char *, uint64_t, uint64_t);
  uint64_t v157;
  __int128 v158;
  _OWORD *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  uint64_t v169;
  char *v170;
  int *v171;
  unsigned int (*v172)(char *, uint64_t, int *);
  _QWORD *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t);
  id v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  _OWORD *v191;
  _OWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _OWORD *v206;
  _OWORD *v207;
  __int128 v208;
  void *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  id v213;
  id v214;
  __int128 v215;
  uint64_t v216;
  void *v217;
  id v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  id v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  id v231;
  _QWORD *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  id v239;
  id v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  int *v248;
  char *v249;
  id v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  id v271;
  _QWORD *v272;
  unint64_t v273;
  uint64_t v274;
  void *v275;
  void (*v276)(_QWORD *, _QWORD, uint64_t, int *);
  id v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int EnumCaseMultiPayload;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  __int128 v292;
  uint64_t v293;
  char *result;
  uint64_t v295;
  char *v296;
  _QWORD *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  int *v301;
  _QWORD *__dst;
  char *__dsta;
  _QWORD *__dstb;
  void (*__dstc)(char *, char *, void *);
  int *v306;
  char *v307;
  void *v308;
  uint64_t v309;
  int *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v6 = a3;
  v7 = type metadata accessor for FeedItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v8 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v8;
      v9 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v9;
      a1[32] = a2[32];
      v10 = a2 + 40;
      v11 = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
      if (v11 >= 0x11)
      {
        *((_QWORD *)a1 + 5) = *v10;
        *((_QWORD *)a1 + 6) = v11;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)v10;
      }
      goto LABEL_143;
    case 1u:
      v50 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v50;
      v51 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v51;
      a1[32] = a2[32];
      v52 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v52;
      v53 = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 8) = v53;
      v54 = a2 + 72;
      v55 = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v55 >= 0x11)
      {
        *((_QWORD *)a1 + 9) = *v54;
        *((_QWORD *)a1 + 10) = v55;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v54;
      }
      goto LABEL_143;
    case 2u:
      v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v13;
      v14 = (int *)type metadata accessor for FeedBannerAd();
      v15 = v14[5];
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = sub_1BB8721C0();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      *(_QWORD *)&a1[v14[6]] = *(_QWORD *)&a2[v14[6]];
      v20 = v14[7];
      v21 = &a1[v20];
      v22 = &a2[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v14[8];
      v24 = &a1[v23];
      v25 = &a2[v23];
      v26 = *((_QWORD *)v25 + 1);
      if (v26 >= 0x11)
        goto LABEL_39;
      *(_OWORD *)v24 = *(_OWORD *)v25;
      goto LABEL_143;
    case 3u:
      v313 = v6;
      v56 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v56;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      v57 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v57;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[56] = a2[56];
      v306 = (int *)type metadata accessor for FeedHeadline(0);
      v58 = v306[10];
      v59 = &a1[v58];
      v60 = &a2[v58];
      *v59 = a2[v58];
      v59[1] = a2[v58 + 1];
      v61 = (int *)type metadata accessor for FeedHeadline.State(0);
      v62 = v61[6];
      __dsta = &v59[v62];
      v63 = &v60[v62];
      v64 = (int *)type metadata accessor for SharedItem();
      v300 = *((_QWORD *)v64 - 1);
      v65 = *(unsigned int (**)(char *, uint64_t, int *))(v300 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if (v65(v63, 1, v64))
      {
        v66 = type metadata accessor for FeedItem.SharedState(0);
        memcpy(__dsta, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v176 = sub_1BB86C8B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(__dsta, v63, v176);
        __dsta[v64[5]] = v63[v64[5]];
        v177 = v64[6];
        v178 = *(void **)&v63[v177];
        *(_QWORD *)&__dsta[v177] = v178;
        v179 = v64[7];
        v311 = &__dsta[v179];
        v299 = &v63[v179];
        v180 = sub_1BB86C67C();
        v181 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 16);
        v182 = v178;
        v181(v311, v299, v180);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v300 + 56))(__dsta, 0, 1, v64);
      }
      v6 = v313;
      v59[v61[7]] = v60[v61[7]];
      v59[v61[8]] = v60[v61[8]];
      v59[v61[9]] = v60[v61[9]];
      v59[v61[10]] = v60[v61[10]];
      v183 = v306[11];
      v184 = &a1[v183];
      v185 = &a2[v183];
      v186 = sub_1BB871B24();
      v187 = *(_QWORD *)(v186 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
        memcpy(v184, v185, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v184, v185, v186);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v187 + 56))(v184, 0, 1, v186);
      }
      v195 = v306[12];
      v196 = &a1[v195];
      v197 = &a2[v195];
      v198 = *((_QWORD *)v197 + 1);
      if (v198 >= 0x11)
      {
        *(_QWORD *)v196 = *(_QWORD *)v197;
        *((_QWORD *)v196 + 1) = v198;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v196 = *(_OWORD *)v197;
      }
      v199 = v306[13];
      v200 = *(_QWORD *)&a2[v199];
      if (v200 >= 2)
      {
        if (v200 == 2)
        {
          *(_QWORD *)&a1[v199] = 2;
        }
        else
        {
          *(_QWORD *)&a1[v199] = v200;
          swift_unknownObjectRetain();
        }
      }
      else
      {
        *(_QWORD *)&a1[v199] = v200;
      }
      v216 = v306[14];
      v217 = *(void **)&a2[v216];
      *(_QWORD *)&a1[v216] = v217;
      v218 = v217;
      goto LABEL_143;
    case 4u:
      v27 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v27;
      a1[16] = a2[16];
      v28 = a2 + 24;
      v29 = *((_QWORD *)a2 + 4);
      if (v29 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v28;
        *((_QWORD *)a1 + 4) = v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v28;
      }
      v117 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v117;
      v118 = (int *)type metadata accessor for FeedWebEmbed();
      v119 = v118[8];
      v120 = &a1[v119];
      v121 = &a2[v119];
      v122 = sub_1BB86C67C();
      v123 = *(_QWORD *)(v122 - 8);
      v124 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
      swift_bridgeObjectRetain();
      v124(v120, v121, v122);
      v310 = v118;
      v125 = v118[9];
      v126 = &a1[v125];
      v127 = &a2[v125];
      __dstc = (void (*)(char *, char *, void *))v124;
      v308 = (void *)v122;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(&a2[v125], 1, v122))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
      }
      else
      {
        v124(v126, v127, v122);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v126, 0, 1, v122);
      }
      *(_QWORD *)&a1[v118[10]] = *(_QWORD *)&a2[v118[10]];
      *(_QWORD *)&a1[v118[11]] = *(_QWORD *)&a2[v118[11]];
      v151 = v118[12];
      v152 = &a1[v151];
      v153 = &a2[v151];
      v154 = type metadata accessor for FeedHeadline(0);
      v155 = *(_QWORD *)(v154 - 8);
      v156 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48);
      swift_retain();
      swift_retain();
      if (v156(v153, 1, v154))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
        memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
      }
      else
      {
        v298 = v155;
        v301 = (int *)v154;
        v315 = v6;
        v163 = *((_QWORD *)v153 + 1);
        *(_QWORD *)v152 = *(_QWORD *)v153;
        *((_QWORD *)v152 + 1) = v163;
        *((_QWORD *)v152 + 2) = *((_QWORD *)v153 + 2);
        v152[24] = v153[24];
        v164 = *((_QWORD *)v153 + 5);
        *((_QWORD *)v152 + 4) = *((_QWORD *)v153 + 4);
        *((_QWORD *)v152 + 5) = v164;
        *((_QWORD *)v152 + 6) = *((_QWORD *)v153 + 6);
        v152[56] = v153[56];
        v165 = *(int *)(v154 + 40);
        v166 = &v152[v165];
        v297 = v153;
        v167 = &v153[v165];
        *v166 = v153[v165];
        v166[1] = v153[v165 + 1];
        v168 = (int *)type metadata accessor for FeedHeadline.State(0);
        v169 = v168[6];
        v296 = &v166[v169];
        v170 = &v167[v169];
        v171 = (int *)type metadata accessor for SharedItem();
        v295 = *((_QWORD *)v171 - 1);
        v172 = *(unsigned int (**)(char *, uint64_t, int *))(v295 + 48);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        v173 = v152;
        if (v172(v170, 1, v171))
        {
          v174 = type metadata accessor for FeedItem.SharedState(0);
          memcpy(v296, v170, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
        }
        else
        {
          v242 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v296, v170, v242);
          v296[v171[5]] = v170[v171[5]];
          v243 = v171[6];
          v244 = *(void **)&v170[v243];
          *(_QWORD *)&v296[v243] = v244;
          v245 = v171[7];
          v246 = v170;
          v247 = &v296[v245];
          v248 = v168;
          v249 = &v246[v245];
          v250 = v244;
          v251 = v249;
          v168 = v248;
          __dstc(v247, v251, v308);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v295 + 56))(v296, 0, 1, v171);
        }
        v166[v168[7]] = v167[v168[7]];
        v166[v168[8]] = v167[v168[8]];
        v166[v168[9]] = v167[v168[9]];
        v166[v168[10]] = v167[v168[10]];
        v252 = v301[11];
        v253 = (char *)v173 + v252;
        v254 = (char *)v297 + v252;
        v255 = sub_1BB871B24();
        v256 = *(_QWORD *)(v255 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48))(v254, 1, v255))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
          memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v256 + 16))(v253, v254, v255);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v253, 0, 1, v255);
        }
        v6 = v315;
        v258 = v301[12];
        v259 = (_QWORD *)((char *)v173 + v258);
        v260 = (_QWORD *)((char *)v297 + v258);
        v261 = v260[1];
        if (v261 >= 0x11)
        {
          *v259 = *v260;
          v259[1] = v261;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v259 = *(_OWORD *)v260;
        }
        v262 = v301[13];
        v263 = *(_QWORD *)((char *)v297 + v262);
        if (v263 >= 2)
        {
          if (v263 == 2)
          {
            *(_QWORD *)((char *)v173 + v262) = 2;
          }
          else
          {
            *(_QWORD *)((char *)v173 + v262) = v263;
            swift_unknownObjectRetain();
          }
        }
        else
        {
          *(_QWORD *)((char *)v173 + v262) = v263;
        }
        v274 = v301[14];
        v275 = *(void **)((char *)v297 + v274);
        *(_QWORD *)((char *)v173 + v274) = v275;
        v276 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v298 + 56);
        v277 = v275;
        v276(v173, 0, 1, v301);
      }
      v278 = v310[13];
      v279 = &a1[v278];
      v280 = &a2[v278];
      v281 = type metadata accessor for WebEmbedDataVisualization();
      v282 = *(_QWORD *)(v281 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
      {
        sub_1BA4A3FB4(0, &qword_1ED3CB5E0, (void (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization);
        memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v285 = *(_QWORD *)v280;
        if (EnumCaseMultiPayload == 1)
        {
          v286 = *((_QWORD *)v280 + 1);
          *(_QWORD *)v279 = v285;
          *((_QWORD *)v279 + 1) = v286;
          v287 = type metadata accessor for GenericDataVisualization();
          v288 = *(int *)(v287 + 20);
          v289 = &v279[v288];
          v316 = v6;
          v290 = &v280[v288];
          swift_bridgeObjectRetain();
          v291 = v290;
          v6 = v316;
          __dstc(v289, v291, v308);
          *(_QWORD *)&v279[*(int *)(v287 + 24)] = *(_QWORD *)&v280[*(int *)(v287 + 24)];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_QWORD *)v279 = v285;
          swift_retain();
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
      }
      a1[v310[14]] = a2[v310[14]];
      goto LABEL_143;
    case 5u:
      v67 = *(void **)a2;
      v68 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v68;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v69 = (void *)*((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v69;
      a1[64] = a2[64];
      v70 = *((_QWORD *)a2 + 10);
      v71 = v67;
      swift_bridgeObjectRetain();
      v72 = v69;
      if (v70 == 1)
      {
        v73 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v73;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      else
      {
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = v70;
        v130 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = v130;
        v132 = (void *)*((_QWORD *)a2 + 13);
        v131 = *((_QWORD *)a2 + 14);
        *((_QWORD *)a1 + 13) = v132;
        *((_QWORD *)a1 + 14) = v131;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v133 = v132;
      }
      v134 = a2 + 120;
      v135 = *((_QWORD *)a2 + 16);
      if (v135 >= 0x11)
      {
        *((_QWORD *)a1 + 15) = *v134;
        *((_QWORD *)a1 + 16) = v135;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v134;
      }
      a1[136] = a2[136];
      goto LABEL_143;
    case 6u:
      v74 = a2[281];
      if (v74 == 2)
      {
        v202 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v202;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        v203 = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v203;
        v204 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v204;
        v205 = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v205 == 1)
        {
          v206 = a1 + 80;
          v207 = a2 + 80;
          v208 = *((_OWORD *)a2 + 8);
          *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
          *((_OWORD *)a1 + 8) = v208;
          a1[144] = a2[144];
          goto LABEL_127;
        }
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v205;
        v226 = *((_QWORD *)a2 + 15);
        swift_bridgeObjectRetain();
        if (v226)
        {
          v227 = *((_QWORD *)a2 + 16);
          *((_QWORD *)a1 + 15) = v226;
          *((_QWORD *)a1 + 16) = v227;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v226 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v226);
          *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        }
        else
        {
          v292 = *((_OWORD *)a2 + 7);
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
          *((_OWORD *)a1 + 7) = v292;
          *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        }
        a1[144] = a2[144];
      }
      else
      {
        if (v74 == 1)
        {
          v75 = *(void **)a2;
          v76 = *((_QWORD *)a2 + 1);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = v76;
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
          *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          a1[40] = a2[40];
          v77 = (void *)*((_QWORD *)a2 + 7);
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          *((_QWORD *)a1 + 7) = v77;
          a1[64] = a2[64];
          v78 = *((_QWORD *)a2 + 10);
          v79 = v75;
          swift_bridgeObjectRetain();
          v80 = v77;
          if (v78 == 1)
          {
            v81 = *(_OWORD *)(a2 + 88);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
            *(_OWORD *)(a1 + 88) = v81;
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          }
          else
          {
            *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
            *((_QWORD *)a1 + 10) = v78;
            v220 = *((_QWORD *)a2 + 12);
            *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
            *((_QWORD *)a1 + 12) = v220;
            v222 = (void *)*((_QWORD *)a2 + 13);
            v221 = *((_QWORD *)a2 + 14);
            *((_QWORD *)a1 + 13) = v222;
            *((_QWORD *)a1 + 14) = v221;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v223 = v222;
          }
          v224 = a2 + 120;
          v225 = *((_QWORD *)a2 + 16);
          if (v225 >= 0x11)
          {
            *((_QWORD *)a1 + 15) = *v224;
            *((_QWORD *)a1 + 16) = v225;
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(a1 + 120) = *(_OWORD *)v224;
          }
          v207 = a2 + 144;
          v234 = (void *)*((_QWORD *)a2 + 18);
          a1[136] = a2[136];
          if (v234)
          {
            v235 = *((_QWORD *)a2 + 19);
            v236 = *((_QWORD *)a2 + 20);
            *((_QWORD *)a1 + 18) = v234;
            *((_QWORD *)a1 + 19) = v235;
            *((_QWORD *)a1 + 20) = v236;
            *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
            *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
            a1[184] = a2[184];
            v237 = (void *)*((_QWORD *)a2 + 25);
            *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
            *((_QWORD *)a1 + 25) = v237;
            a1[208] = a2[208];
            v238 = *((_QWORD *)a2 + 28);
            v239 = v234;
            swift_bridgeObjectRetain();
            v240 = v237;
            if (v238 == 1)
            {
              v241 = *(_OWORD *)(a2 + 232);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
              *(_OWORD *)(a1 + 232) = v241;
              *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
            }
            else
            {
              *((_QWORD *)a1 + 27) = *((_QWORD *)a2 + 27);
              *((_QWORD *)a1 + 28) = v238;
              v268 = *((_QWORD *)a2 + 30);
              *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
              *((_QWORD *)a1 + 30) = v268;
              v270 = (void *)*((_QWORD *)a2 + 31);
              v269 = *((_QWORD *)a2 + 32);
              *((_QWORD *)a1 + 31) = v270;
              *((_QWORD *)a1 + 32) = v269;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v271 = v270;
            }
            v272 = a2 + 264;
            v273 = *((_QWORD *)a2 + 34);
            if (v273 >= 0x11)
            {
              *((_QWORD *)a1 + 33) = *v272;
              *((_QWORD *)a1 + 34) = v273;
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(a1 + 264) = *(_OWORD *)v272;
            }
            a1[280] = a2[280];
            goto LABEL_142;
          }
          v206 = a1 + 144;
          v264 = *((_OWORD *)a2 + 16);
          *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
          *((_OWORD *)a1 + 16) = v264;
          *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
          v265 = *((_OWORD *)a2 + 12);
          *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
          *((_OWORD *)a1 + 12) = v265;
          v266 = *((_OWORD *)a2 + 14);
          *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
          *((_OWORD *)a1 + 14) = v266;
LABEL_127:
          v267 = v207[1];
          *v206 = *v207;
          v206[1] = v267;
          goto LABEL_142;
        }
        v209 = *(void **)a2;
        v210 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v210;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        v211 = (void *)*((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v211;
        a1[64] = a2[64];
        v212 = *((_QWORD *)a2 + 10);
        v213 = v209;
        swift_bridgeObjectRetain();
        v214 = v211;
        if (v212 == 1)
        {
          v215 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = v215;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        }
        else
        {
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *((_QWORD *)a1 + 10) = v212;
          v228 = *((_QWORD *)a2 + 12);
          *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
          *((_QWORD *)a1 + 12) = v228;
          v230 = (void *)*((_QWORD *)a2 + 13);
          v229 = *((_QWORD *)a2 + 14);
          *((_QWORD *)a1 + 13) = v230;
          *((_QWORD *)a1 + 14) = v229;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v231 = v230;
        }
        v232 = a2 + 120;
        v233 = *((_QWORD *)a2 + 16);
        if (v233 >= 0x11)
        {
          *((_QWORD *)a1 + 15) = *v232;
          *((_QWORD *)a1 + 16) = v233;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)v232;
        }
        a1[136] = a2[136];
      }
LABEL_142:
      a1[281] = v74;
LABEL_143:
      swift_storeEnumTagMultiPayload();
LABEL_144:
      v293 = *(int *)(v6 + 24);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      *(_QWORD *)&a1[v293] = *(_QWORD *)&a2[v293];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 7u:
      v82 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v82;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v83 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v83;
      v84 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 9) = v84;
      v85 = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v85 == 1)
      {
        v86 = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 8) = v86;
        a1[144] = a2[144];
        v87 = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 6) = v87;
      }
      else
      {
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v85;
        v136 = *((_QWORD *)a2 + 15);
        swift_bridgeObjectRetain();
        if (v136)
        {
          v137 = *((_QWORD *)a2 + 16);
          *((_QWORD *)a1 + 15) = v136;
          *((_QWORD *)a1 + 16) = v137;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v136 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v136);
          *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        }
        else
        {
          v219 = *((_OWORD *)a2 + 7);
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
          *((_OWORD *)a1 + 7) = v219;
          *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        }
        a1[144] = a2[144];
      }
      goto LABEL_143;
    case 8u:
      v314 = v6;
      v88 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v88;
      v89 = *(int *)(type metadata accessor for FeedCustomItem() + 20);
      v90 = &a1[v89];
      v91 = &a2[v89];
      v92 = *(_QWORD *)&a2[v89 + 8];
      *(_QWORD *)v90 = *(_QWORD *)&a2[v89];
      *((_QWORD *)v90 + 1) = v92;
      v93 = *(_QWORD *)&a2[v89 + 24];
      *((_QWORD *)v90 + 2) = *(_QWORD *)&a2[v89 + 16];
      *((_QWORD *)v90 + 3) = v93;
      v94 = type metadata accessor for FormatCustomItem.Resolved();
      v95 = *(int *)(v94 + 24);
      v307 = &v90[v95];
      v309 = v94;
      v96 = &v91[v95];
      v97 = type metadata accessor for FormatCustomItem.Action();
      __dstb = *(_QWORD **)(v97 - 8);
      v98 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v98(v96, 1, v97))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C7270, (void (*)(uint64_t))type metadata accessor for FormatCustomItem.Action);
        memcpy(v307, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        v189 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v307, v96, v189);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v307, 0, 1, v97);
      }
      v6 = v314;
      *(_QWORD *)&v90[*(int *)(v309 + 28)] = *(_QWORD *)&v91[*(int *)(v309 + 28)];
      swift_bridgeObjectRetain();
      goto LABEL_143;
    case 9u:
      v30 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v30;
      v31 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v31;
      v32 = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v32)
      {
        v33 = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 7) = v32;
        *((_QWORD *)a1 + 8) = v33;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v32 - 8))((uint64_t)(a1 + 32), (uint64_t)(a2 + 32), v32);
      }
      else
      {
        v146 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v146;
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      }
      v147 = a1 + 72;
      v148 = a2 + 72;
      v149 = *((_QWORD *)a2 + 12);
      if (v149)
      {
        v150 = *((_QWORD *)a2 + 13);
        *((_QWORD *)a1 + 12) = v149;
        *((_QWORD *)a1 + 13) = v150;
        (**(void (***)(_OWORD *, _OWORD *))(v149 - 8))(v147, v148);
      }
      else
      {
        v158 = *(_OWORD *)(a2 + 88);
        *v147 = *v148;
        *(_OWORD *)(a1 + 88) = v158;
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      }
      v159 = a1 + 112;
      v160 = a2 + 112;
      v161 = *((_QWORD *)a2 + 17);
      if (v161)
      {
        v162 = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 17) = v161;
        *((_QWORD *)a1 + 18) = v162;
        (**(void (***)(_OWORD *, _OWORD *))(v161 - 8))(v159, v160);
      }
      else
      {
        v175 = *((_OWORD *)a2 + 8);
        *v159 = *v160;
        *((_OWORD *)a1 + 8) = v175;
        *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      }
      goto LABEL_143;
    case 0xAu:
      v100 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v100;
      v101 = (int *)type metadata accessor for FeedEngagementBanner();
      v102 = v101[5];
      v103 = &a1[v102];
      v104 = &a2[v102];
      v105 = sub_1BB86EDAC();
      v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16);
      swift_bridgeObjectRetain();
      v106(v103, v104, v105);
      *(_QWORD *)&a1[v101[6]] = *(_QWORD *)&a2[v101[6]];
      v107 = v101[7];
      v108 = &a1[v107];
      v109 = &a2[v107];
      *(_QWORD *)v108 = *(_QWORD *)v109;
      v108[8] = v109[8];
      v110 = v101[8];
      v24 = &a1[v110];
      v25 = &a2[v110];
      v26 = *((_QWORD *)v25 + 1);
      if (v26 >= 0x11)
      {
LABEL_39:
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *((_QWORD *)v24 + 1) = v26;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      goto LABEL_143;
    case 0xBu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      goto LABEL_143;
    case 0xCu:
      v34 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v34;
      v35 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v35;
      a1[32] = a2[32];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_143;
    case 0xDu:
      v111 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v111;
      a1[16] = a2[16];
      v112 = a2 + 24;
      v113 = *((_QWORD *)a2 + 4);
      if (v113 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v112;
        *((_QWORD *)a1 + 4) = v113;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v112;
      }
      v138 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v138;
      v139 = (void *)*((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 8) = v139;
      a1[72] = a2[72];
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      v140 = *((_QWORD *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v141 = v139;
      swift_bridgeObjectRetain();
      if (v140)
      {
        v142 = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 14) = v140;
        *((_QWORD *)a1 + 15) = v142;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v140 - 8))((uint64_t)(a1 + 88), (uint64_t)(a2 + 88), v140);
      }
      else
      {
        v190 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v190;
        *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      }
      v191 = a1 + 128;
      v192 = a2 + 128;
      v193 = *((_QWORD *)a2 + 19);
      if (v193)
      {
        v194 = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 19) = v193;
        *((_QWORD *)a1 + 20) = v194;
        (**(void (***)(_OWORD *, _OWORD *))(v193 - 8))(v191, v192);
      }
      else
      {
        v201 = *((_OWORD *)a2 + 9);
        *v191 = *v192;
        *((_OWORD *)a1 + 9) = v201;
        *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      }
      goto LABEL_143;
    case 0xEu:
      v36 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v36;
      a1[16] = a2[16];
      v37 = a2 + 24;
      v38 = *((_QWORD *)a2 + 4);
      if (v38 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v37;
        *((_QWORD *)a1 + 4) = v38;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v37;
      }
      v129 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v129;
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_143;
    case 0xFu:
      v114 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v114;
      a1[16] = a2[16];
      v115 = a2 + 24;
      v116 = *((_QWORD *)a2 + 4);
      if (v116 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v115;
        *((_QWORD *)a1 + 4) = v116;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v115;
      }
      v143 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v143;
      v144 = *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
      *(_QWORD *)&a1[v144] = *(_QWORD *)&a2[v144];
      type metadata accessor for PuzzleStatistic();
      type metadata accessor for PuzzleStatisticCategory(0);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v145 = (char *)&loc_1BA872C40 + 4 * word_1BB87E7C2[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0x10u:
      v312 = v6;
      v39 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v39;
      v40 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v40;
      v41 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v41;
      *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v42 = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 10) = v42;
      v43 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = v43;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      a1[112] = a2[112];
      v44 = *((_QWORD *)a2 + 16);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 16) = v44;
      a1[136] = a2[136];
      v45 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = v45;
      v46 = *((_QWORD *)a2 + 21);
      *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      *((_QWORD *)a1 + 21) = v46;
      a1[184] = a2[184];
      *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
      v47 = *((_QWORD *)a2 + 25);
      *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
      *((_QWORD *)a1 + 25) = v47;
      a1[224] = a2[224];
      v48 = *((_QWORD *)a2 + 27);
      *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
      *((_QWORD *)a1 + 27) = v48;
      __dst = a2 + 232;
      v49 = *((_QWORD *)a2 + 30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49 >= 0x11)
      {
        *((_QWORD *)a1 + 29) = *__dst;
        *((_QWORD *)a1 + 30) = v49;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 232) = *(_OWORD *)__dst;
      }
      v6 = v312;
      goto LABEL_143;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_144;
  }
}

uint64_t destroy for FeedItemAuxiliaryItem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  int EnumCaseMultiPayload;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;

  type metadata accessor for FeedItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 48) < 0x11uLL)
        goto LABEL_71;
      goto LABEL_70;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 80) < 0x11uLL)
        goto LABEL_71;
      goto LABEL_70;
    case 2u:
      swift_bridgeObjectRelease();
      v2 = type metadata accessor for FeedBannerAd();
      v3 = a1 + *(int *)(v2 + 20);
      v4 = sub_1BB8721C0();
      goto LABEL_53;
    case 3u:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v5 = (int *)type metadata accessor for FeedHeadline(0);
      v6 = a1 + v5[10];
      v7 = v6 + *(int *)(type metadata accessor for FeedHeadline.State(0) + 24);
      v8 = type metadata accessor for SharedItem();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      {
        v9 = sub_1BB86C8B0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);

        v10 = v7 + *(int *)(v8 + 28);
        v11 = sub_1BB86C67C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      }
      v12 = a1 + v5[11];
      v13 = sub_1BB871B24();
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      if (*(_QWORD *)(a1 + v5[12] + 8) >= 0x11uLL)
        swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + v5[13]) >= 3uLL)
        swift_unknownObjectRelease();

      goto LABEL_71;
    case 4u:
      if (*(_QWORD *)(a1 + 32) >= 0x11uLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = (int *)type metadata accessor for FeedWebEmbed();
      v16 = a1 + v15[8];
      v17 = sub_1BB86C67C();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v19(v16, v17);
      v20 = a1 + v15[9];
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1, v17))
        v19(v20, v17);
      swift_release();
      swift_release();
      v21 = a1 + v15[12];
      v22 = (int *)type metadata accessor for FeedHeadline(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v22 - 1) + 48))(v21, 1, v22))
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v23 = v22[10];
        v24 = v21 + v23 + *(int *)(type metadata accessor for FeedHeadline.State(0) + 24);
        v25 = type metadata accessor for SharedItem();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
        {
          v26 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);

          v19(v24 + *(int *)(v25 + 28), v17);
        }
        v27 = v21 + v22[11];
        v28 = sub_1BB871B24();
        v29 = *(_QWORD *)(v28 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
        if (*(_QWORD *)(v21 + v22[12] + 8) >= 0x11uLL)
          swift_bridgeObjectRelease();
        if (*(_QWORD *)(v21 + v22[13]) >= 3uLL)
          swift_unknownObjectRelease();

      }
      v30 = a1 + v15[13];
      v31 = type metadata accessor for WebEmbedDataVisualization();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
        goto LABEL_71;
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_55;
      swift_bridgeObjectRelease();
      v32 = type metadata accessor for GenericDataVisualization();
      v19(v30 + *(int *)(v32 + 20), v17);
      goto LABEL_70;
    case 5u:
      goto LABEL_36;
    case 6u:
      v33 = *(unsigned __int8 *)(a1 + 281);
      if (v33 == 2)
        goto LABEL_40;
      if (v33 == 1)
      {

        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 80) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        if (*(_QWORD *)(a1 + 128) >= 0x11uLL)
          swift_bridgeObjectRelease();
        v41 = *(void **)(a1 + 144);
        if (!v41)
          goto LABEL_71;

        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 224) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        if (*(_QWORD *)(a1 + 272) < 0x11uLL)
          goto LABEL_71;
LABEL_70:
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      if (*(_BYTE *)(a1 + 281))
        goto LABEL_71;
LABEL_36:

      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 80) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      if (*(_QWORD *)(a1 + 128) >= 0x11uLL)
        goto LABEL_70;
LABEL_71:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 7u:
LABEL_40:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 88) != 1)
      {
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 120))
          __swift_destroy_boxed_opaque_existential_1(a1 + 96);
      }
      goto LABEL_71;
    case 8u:
      swift_bridgeObjectRelease();
      v34 = a1 + *(int *)(type metadata accessor for FeedCustomItem() + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = v34 + *(int *)(type metadata accessor for FormatCustomItem.Resolved() + 24);
      v36 = type metadata accessor for FormatCustomItem.Action();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
      {
        v37 = sub_1BB86C67C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v35, v37);
      }
      goto LABEL_70;
    case 9u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      if (*(_QWORD *)(a1 + 96))
        __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      if (*(_QWORD *)(a1 + 136))
        __swift_destroy_boxed_opaque_existential_1(a1 + 112);
      goto LABEL_71;
    case 0xAu:
      swift_bridgeObjectRelease();
      v2 = type metadata accessor for FeedEngagementBanner();
      v3 = a1 + *(int *)(v2 + 20);
      v4 = sub_1BB86EDAC();
LABEL_53:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      if (*(_QWORD *)(a1 + *(int *)(v2 + 32) + 8) < 0x11uLL)
        goto LABEL_71;
      goto LABEL_70;
    case 0xBu:
LABEL_55:
      swift_release();
      goto LABEL_71;
    case 0xCu:
      goto LABEL_64;
    case 0xDu:
      if (*(_QWORD *)(a1 + 32) >= 0x11uLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 112))
        __swift_destroy_boxed_opaque_existential_1(a1 + 88);
      if (*(_QWORD *)(a1 + 152))
        __swift_destroy_boxed_opaque_existential_1(a1 + 128);
      goto LABEL_71;
    case 0xEu:
      if (*(_QWORD *)(a1 + 32) >= 0x11uLL)
        swift_bridgeObjectRelease();
LABEL_64:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_71;
    case 0xFu:
      if (*(_QWORD *)(a1 + 32) >= 0x11uLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = a1 + *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
      swift_unknownObjectRelease();
      v39 = v38 + *(int *)(type metadata accessor for PuzzleStatistic() + 20);
      type metadata accessor for PuzzleStatisticCategory(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for PuzzleStatisticValue(0);
          goto LABEL_90;
        case 1u:
          type metadata accessor for PuzzleStatisticValue(0);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4)
          {
            v43 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v39, 1, v43))
            {
              v44 = sub_1BB86BEC0();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v39, v44);
            }
          }
          v45 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
          v46 = v39 + *(int *)(v45 + 20);
          v47 = swift_getEnumCaseMultiPayload();
          if (v47 == 5 || v47 == 4)
          {
            v48 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v46, 1, v48))
            {
              v49 = sub_1BB86BEC0();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v46, v49);
            }
          }
          v39 += *(int *)(v45 + 24);
LABEL_90:
          v50 = swift_getEnumCaseMultiPayload();
          if (v50 == 5 || v50 == 4)
          {
            v51 = type metadata accessor for PuzzleStreak();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v39, 1, v51))goto LABEL_101;
          }
          goto LABEL_71;
        case 2u:
          v52 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v39, 1, v52))
            goto LABEL_71;
          v53 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v39, v53);
          v54 = type metadata accessor for PuzzleLeaderboardEntry();
          swift_bridgeObjectRelease();
          v55 = v39 + *(int *)(v54 + 24);
          swift_bridgeObjectRelease();
          v56 = *(_QWORD *)(v55 + 24);
          if (v56 >> 60 != 15)
            sub_1BA69D314(*(_QWORD *)(v55 + 16), v56);
          goto LABEL_70;
        case 3u:
          v57 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
          v58 = v39 + *(int *)(v57 + 24);
          v59 = type metadata accessor for PuzzleStreak();
          v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48);
          if (!v60(v58, 1, v59))
          {
            v61 = sub_1BB86BEC0();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v58, v61);
          }
          v39 += *(int *)(v57 + 28);
          if (!v60(v39, 1, v59))
          {
LABEL_101:
            v62 = sub_1BB86BEC0();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v39, v62);
          }
          goto LABEL_71;
        default:
          goto LABEL_71;
      }
    case 0x10u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 240) >= 0x11uLL)
        goto LABEL_70;
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

char *initializeWithCopy for FeedItemAuxiliaryItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  char *v61;
  int *v62;
  unsigned int (*v63)(char *, uint64_t, int *);
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  id v70;
  __int128 v71;
  int v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  id v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unsigned int (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  __int128 v144;
  _OWORD *v145;
  _OWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int (*v154)(char *, uint64_t, uint64_t);
  uint64_t v155;
  __int128 v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  int *v169;
  unsigned int (*v170)(char *, uint64_t, int *);
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  id v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  _OWORD *v188;
  _OWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _OWORD *v203;
  _OWORD *v204;
  __int128 v205;
  void *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  id v210;
  id v211;
  __int128 v212;
  uint64_t v213;
  void *v214;
  id v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  id v220;
  _QWORD *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  id v228;
  _QWORD *v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  id v236;
  id v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  id v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  id v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v268;
  void *v269;
  void (*v270)(char *, _QWORD, uint64_t, int *);
  id v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int EnumCaseMultiPayload;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  __int128 v285;
  uint64_t v286;
  char *result;
  uint64_t v288;
  char *v289;
  int *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  int *v294;
  _QWORD *__dst;
  char *__dsta;
  _QWORD *__dstb;
  void (*__dstc)(char *, char *, void *);
  int *v299;
  char *v300;
  void *v301;
  uint64_t v302;
  int *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;

  v6 = type metadata accessor for FeedItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v8;
      a1[32] = a2[32];
      v9 = a2 + 40;
      v10 = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
      if (v10 >= 0x11)
      {
        *((_QWORD *)a1 + 5) = *v9;
        *((_QWORD *)a1 + 6) = v10;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
      }
      goto LABEL_142;
    case 1u:
      v48 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v48;
      v49 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v49;
      a1[32] = a2[32];
      v50 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v50;
      v51 = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 8) = v51;
      v52 = a2 + 72;
      v53 = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53 >= 0x11)
      {
        *((_QWORD *)a1 + 9) = *v52;
        *((_QWORD *)a1 + 10) = v53;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v52;
      }
      goto LABEL_142;
    case 2u:
      v11 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v11;
      v12 = (int *)type metadata accessor for FeedBannerAd();
      v13 = v12[5];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_1BB8721C0();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      *(_QWORD *)&a1[v12[6]] = *(_QWORD *)&a2[v12[6]];
      v18 = v12[7];
      v19 = &a1[v18];
      v20 = &a2[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v12[8];
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = *((_QWORD *)v23 + 1);
      if (v24 >= 0x11)
        goto LABEL_37;
      *(_OWORD *)v22 = *(_OWORD *)v23;
      goto LABEL_142;
    case 3u:
      v306 = a3;
      v54 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v54;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      v55 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v55;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[56] = a2[56];
      v299 = (int *)type metadata accessor for FeedHeadline(0);
      v56 = v299[10];
      v57 = &a1[v56];
      v58 = &a2[v56];
      *v57 = a2[v56];
      v57[1] = a2[v56 + 1];
      v59 = (int *)type metadata accessor for FeedHeadline.State(0);
      v60 = v59[6];
      __dsta = &v57[v60];
      v61 = &v58[v60];
      v62 = (int *)type metadata accessor for SharedItem();
      v293 = *((_QWORD *)v62 - 1);
      v63 = *(unsigned int (**)(char *, uint64_t, int *))(v293 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if (v63(v61, 1, v62))
      {
        v64 = type metadata accessor for FeedItem.SharedState(0);
        memcpy(__dsta, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        v173 = sub_1BB86C8B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(__dsta, v61, v173);
        __dsta[v62[5]] = v61[v62[5]];
        v174 = v62[6];
        v175 = *(void **)&v61[v174];
        *(_QWORD *)&__dsta[v174] = v175;
        v176 = v62[7];
        v304 = &__dsta[v176];
        v292 = &v61[v176];
        v177 = sub_1BB86C67C();
        v178 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 16);
        v179 = v175;
        v178(v304, v292, v177);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v293 + 56))(__dsta, 0, 1, v62);
      }
      a3 = v306;
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      v57[v59[10]] = v58[v59[10]];
      v180 = v299[11];
      v181 = &a1[v180];
      v182 = &a2[v180];
      v183 = sub_1BB871B24();
      v184 = *(_QWORD *)(v183 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
        memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v181, v182, v183);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v181, 0, 1, v183);
      }
      v192 = v299[12];
      v193 = &a1[v192];
      v194 = &a2[v192];
      v195 = *((_QWORD *)v194 + 1);
      if (v195 >= 0x11)
      {
        *(_QWORD *)v193 = *(_QWORD *)v194;
        *((_QWORD *)v193 + 1) = v195;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v193 = *(_OWORD *)v194;
      }
      v196 = v299[13];
      v197 = *(_QWORD *)&a2[v196];
      if (v197 >= 2)
      {
        if (v197 == 2)
        {
          *(_QWORD *)&a1[v196] = 2;
        }
        else
        {
          *(_QWORD *)&a1[v196] = v197;
          swift_unknownObjectRetain();
        }
      }
      else
      {
        *(_QWORD *)&a1[v196] = v197;
      }
      v213 = v299[14];
      v214 = *(void **)&a2[v213];
      *(_QWORD *)&a1[v213] = v214;
      v215 = v214;
      goto LABEL_142;
    case 4u:
      v25 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v25;
      a1[16] = a2[16];
      v26 = a2 + 24;
      v27 = *((_QWORD *)a2 + 4);
      if (v27 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v26;
        *((_QWORD *)a1 + 4) = v27;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v26;
      }
      v115 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v115;
      v116 = type metadata accessor for FeedWebEmbed();
      v117 = *(int *)(v116 + 32);
      v118 = &a1[v117];
      v119 = &a2[v117];
      v120 = sub_1BB86C67C();
      v121 = *(_QWORD *)(v120 - 8);
      v122 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
      swift_bridgeObjectRetain();
      v122(v118, v119, v120);
      v303 = (int *)v116;
      v123 = *(int *)(v116 + 36);
      v124 = &a1[v123];
      v125 = &a2[v123];
      __dstc = (void (*)(char *, char *, void *))v122;
      v301 = (void *)v120;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(&a2[v123], 1, v120))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
      }
      else
      {
        v122(v124, v125, v120);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v124, 0, 1, v120);
      }
      v307 = a3;
      *(_QWORD *)&a1[v303[10]] = *(_QWORD *)&a2[v303[10]];
      *(_QWORD *)&a1[v303[11]] = *(_QWORD *)&a2[v303[11]];
      v149 = v303[12];
      v150 = &a1[v149];
      v151 = &a2[v149];
      v152 = type metadata accessor for FeedHeadline(0);
      v153 = *(_QWORD *)(v152 - 8);
      v154 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48);
      swift_retain();
      swift_retain();
      if (v154(v151, 1, v152))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
        memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
      }
      else
      {
        v291 = v153;
        v294 = (int *)v152;
        v161 = *((_QWORD *)v151 + 1);
        *(_QWORD *)v150 = *(_QWORD *)v151;
        *((_QWORD *)v150 + 1) = v161;
        *((_QWORD *)v150 + 2) = *((_QWORD *)v151 + 2);
        v150[24] = v151[24];
        v162 = *((_QWORD *)v151 + 5);
        *((_QWORD *)v150 + 4) = *((_QWORD *)v151 + 4);
        *((_QWORD *)v150 + 5) = v162;
        *((_QWORD *)v150 + 6) = *((_QWORD *)v151 + 6);
        v150[56] = v151[56];
        v163 = *(int *)(v152 + 40);
        v164 = &v150[v163];
        v165 = &v151[v163];
        *v164 = v151[v163];
        v164[1] = v151[v163 + 1];
        v166 = type metadata accessor for FeedHeadline.State(0);
        v167 = *(int *)(v166 + 24);
        v289 = &v164[v167];
        v290 = (int *)v166;
        v168 = &v165[v167];
        v169 = (int *)type metadata accessor for SharedItem();
        v288 = *((_QWORD *)v169 - 1);
        v170 = *(unsigned int (**)(char *, uint64_t, int *))(v288 + 48);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if (v170(v168, 1, v169))
        {
          v171 = type metadata accessor for FeedItem.SharedState(0);
          memcpy(v289, v168, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
        }
        else
        {
          v239 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v239 - 8) + 16))(v289, v168, v239);
          v289[v169[5]] = v168[v169[5]];
          v240 = v169[6];
          v241 = *(void **)&v168[v240];
          *(_QWORD *)&v289[v240] = v241;
          v242 = v169[7];
          v243 = &v289[v242];
          v244 = &v168[v242];
          v245 = v241;
          __dstc(v243, v244, v301);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v288 + 56))(v289, 0, 1, v169);
        }
        v164[v290[7]] = v165[v290[7]];
        v164[v290[8]] = v165[v290[8]];
        v164[v290[9]] = v165[v290[9]];
        v164[v290[10]] = v165[v290[10]];
        v246 = v294[11];
        v247 = &v150[v246];
        v248 = &v151[v246];
        v249 = sub_1BB871B24();
        v250 = *(_QWORD *)(v249 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
          memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v247, v248, v249);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
        }
        v252 = v294[12];
        v253 = &v150[v252];
        v254 = &v151[v252];
        v255 = *((_QWORD *)v254 + 1);
        if (v255 >= 0x11)
        {
          *(_QWORD *)v253 = *(_QWORD *)v254;
          *((_QWORD *)v253 + 1) = v255;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v253 = *(_OWORD *)v254;
        }
        v256 = v294[13];
        v257 = *(_QWORD *)&v151[v256];
        if (v257 >= 2)
        {
          if (v257 == 2)
          {
            *(_QWORD *)&v150[v256] = 2;
          }
          else
          {
            *(_QWORD *)&v150[v256] = v257;
            swift_unknownObjectRetain();
          }
        }
        else
        {
          *(_QWORD *)&v150[v256] = v257;
        }
        v268 = v294[14];
        v269 = *(void **)&v151[v268];
        *(_QWORD *)&v150[v268] = v269;
        v270 = *(void (**)(char *, _QWORD, uint64_t, int *))(v291 + 56);
        v271 = v269;
        v270(v150, 0, 1, v294);
      }
      v272 = v303[13];
      v273 = &a1[v272];
      v274 = &a2[v272];
      v275 = type metadata accessor for WebEmbedDataVisualization();
      v276 = *(_QWORD *)(v275 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
      {
        sub_1BA4A3FB4(0, &qword_1ED3CB5E0, (void (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization);
        memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v279 = *(_QWORD *)v274;
        if (EnumCaseMultiPayload == 1)
        {
          v280 = *((_QWORD *)v274 + 1);
          *(_QWORD *)v273 = v279;
          *((_QWORD *)v273 + 1) = v280;
          v281 = type metadata accessor for GenericDataVisualization();
          v282 = *(int *)(v281 + 20);
          v283 = &v273[v282];
          v284 = &v274[v282];
          swift_bridgeObjectRetain();
          __dstc(v283, v284, v301);
          *(_QWORD *)&v273[*(int *)(v281 + 24)] = *(_QWORD *)&v274[*(int *)(v281 + 24)];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_QWORD *)v273 = v279;
          swift_retain();
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v276 + 56))(v273, 0, 1, v275);
      }
      a1[v303[14]] = a2[v303[14]];
      goto LABEL_139;
    case 5u:
      v65 = *(void **)a2;
      v66 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v66;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v67 = (void *)*((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v67;
      a1[64] = a2[64];
      v68 = *((_QWORD *)a2 + 10);
      v69 = v65;
      swift_bridgeObjectRetain();
      v70 = v67;
      if (v68 == 1)
      {
        v71 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v71;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      else
      {
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = v68;
        v128 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = v128;
        v130 = (void *)*((_QWORD *)a2 + 13);
        v129 = *((_QWORD *)a2 + 14);
        *((_QWORD *)a1 + 13) = v130;
        *((_QWORD *)a1 + 14) = v129;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v131 = v130;
      }
      v132 = a2 + 120;
      v133 = *((_QWORD *)a2 + 16);
      if (v133 >= 0x11)
      {
        *((_QWORD *)a1 + 15) = *v132;
        *((_QWORD *)a1 + 16) = v133;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v132;
      }
      a1[136] = a2[136];
      goto LABEL_142;
    case 6u:
      v72 = a2[281];
      if (v72 == 2)
      {
        v199 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v199;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        v200 = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v200;
        v201 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = v201;
        v202 = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v202 != 1)
        {
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = v202;
          v223 = *((_QWORD *)a2 + 15);
          swift_bridgeObjectRetain();
          if (v223)
          {
            v224 = *((_QWORD *)a2 + 16);
            *((_QWORD *)a1 + 15) = v223;
            *((_QWORD *)a1 + 16) = v224;
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v223 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v223);
            *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
          }
          else
          {
            v285 = *((_OWORD *)a2 + 7);
            *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
            *((_OWORD *)a1 + 7) = v285;
            *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
          }
          a1[144] = a2[144];
          goto LABEL_141;
        }
        v203 = a1 + 80;
        v204 = a2 + 80;
        v205 = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 8) = v205;
        a1[144] = a2[144];
LABEL_125:
        v261 = v204[1];
        *v203 = *v204;
        v203[1] = v261;
        goto LABEL_141;
      }
      if (v72 != 1)
      {
        v206 = *(void **)a2;
        v207 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v207;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        v208 = (void *)*((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = v208;
        a1[64] = a2[64];
        v209 = *((_QWORD *)a2 + 10);
        v210 = v206;
        swift_bridgeObjectRetain();
        v211 = v208;
        if (v209 == 1)
        {
          v212 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = v212;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        }
        else
        {
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *((_QWORD *)a1 + 10) = v209;
          v225 = *((_QWORD *)a2 + 12);
          *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
          *((_QWORD *)a1 + 12) = v225;
          v227 = (void *)*((_QWORD *)a2 + 13);
          v226 = *((_QWORD *)a2 + 14);
          *((_QWORD *)a1 + 13) = v227;
          *((_QWORD *)a1 + 14) = v226;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v228 = v227;
        }
        v229 = a2 + 120;
        v230 = *((_QWORD *)a2 + 16);
        if (v230 >= 0x11)
        {
          *((_QWORD *)a1 + 15) = *v229;
          *((_QWORD *)a1 + 16) = v230;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)v229;
        }
        a1[136] = a2[136];
        goto LABEL_141;
      }
      v73 = *(void **)a2;
      v74 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v74;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v75 = (void *)*((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v75;
      a1[64] = a2[64];
      v76 = *((_QWORD *)a2 + 10);
      v77 = v73;
      swift_bridgeObjectRetain();
      v78 = v75;
      if (v76 == 1)
      {
        v79 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v79;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      else
      {
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = v76;
        v217 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = v217;
        v219 = (void *)*((_QWORD *)a2 + 13);
        v218 = *((_QWORD *)a2 + 14);
        *((_QWORD *)a1 + 13) = v219;
        *((_QWORD *)a1 + 14) = v218;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v220 = v219;
      }
      v221 = a2 + 120;
      v222 = *((_QWORD *)a2 + 16);
      if (v222 >= 0x11)
      {
        *((_QWORD *)a1 + 15) = *v221;
        *((_QWORD *)a1 + 16) = v222;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v221;
      }
      v204 = a2 + 144;
      v231 = (void *)*((_QWORD *)a2 + 18);
      a1[136] = a2[136];
      if (!v231)
      {
        v203 = a1 + 144;
        v258 = *((_OWORD *)a2 + 16);
        *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
        *((_OWORD *)a1 + 16) = v258;
        *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
        v259 = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 12) = v259;
        v260 = *((_OWORD *)a2 + 14);
        *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 14) = v260;
        goto LABEL_125;
      }
      v232 = *((_QWORD *)a2 + 19);
      v233 = *((_QWORD *)a2 + 20);
      *((_QWORD *)a1 + 18) = v231;
      *((_QWORD *)a1 + 19) = v232;
      *((_QWORD *)a1 + 20) = v233;
      *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
      *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
      a1[184] = a2[184];
      v234 = (void *)*((_QWORD *)a2 + 25);
      *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
      *((_QWORD *)a1 + 25) = v234;
      a1[208] = a2[208];
      v235 = *((_QWORD *)a2 + 28);
      v236 = v231;
      swift_bridgeObjectRetain();
      v237 = v234;
      if (v235 == 1)
      {
        v238 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 232) = v238;
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      }
      else
      {
        *((_QWORD *)a1 + 27) = *((_QWORD *)a2 + 27);
        *((_QWORD *)a1 + 28) = v235;
        v262 = *((_QWORD *)a2 + 30);
        *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
        *((_QWORD *)a1 + 30) = v262;
        v264 = (void *)*((_QWORD *)a2 + 31);
        v263 = *((_QWORD *)a2 + 32);
        *((_QWORD *)a1 + 31) = v264;
        *((_QWORD *)a1 + 32) = v263;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v265 = v264;
      }
      v266 = a2 + 264;
      v267 = *((_QWORD *)a2 + 34);
      if (v267 >= 0x11)
      {
        *((_QWORD *)a1 + 33) = *v266;
        *((_QWORD *)a1 + 34) = v267;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 264) = *(_OWORD *)v266;
      }
      a1[280] = a2[280];
LABEL_141:
      a1[281] = v72;
LABEL_142:
      swift_storeEnumTagMultiPayload();
LABEL_143:
      v286 = *(int *)(a3 + 24);
      *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
      *(_QWORD *)&a1[v286] = *(_QWORD *)&a2[v286];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 7u:
      v80 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v80;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      a1[40] = a2[40];
      v81 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v81;
      v82 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 9) = v82;
      v83 = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v83 == 1)
      {
        v84 = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 8) = v84;
        a1[144] = a2[144];
        v85 = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 6) = v85;
      }
      else
      {
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v83;
        v134 = *((_QWORD *)a2 + 15);
        swift_bridgeObjectRetain();
        if (v134)
        {
          v135 = *((_QWORD *)a2 + 16);
          *((_QWORD *)a1 + 15) = v134;
          *((_QWORD *)a1 + 16) = v135;
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v134 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v134);
          *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        }
        else
        {
          v216 = *((_OWORD *)a2 + 7);
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
          *((_OWORD *)a1 + 7) = v216;
          *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        }
        a1[144] = a2[144];
      }
      goto LABEL_142;
    case 8u:
      v307 = a3;
      v86 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v86;
      v87 = *(int *)(type metadata accessor for FeedCustomItem() + 20);
      v88 = &a1[v87];
      v89 = &a2[v87];
      v90 = *(_QWORD *)&a2[v87 + 8];
      *(_QWORD *)v88 = *(_QWORD *)&a2[v87];
      *((_QWORD *)v88 + 1) = v90;
      v91 = *(_QWORD *)&a2[v87 + 24];
      *((_QWORD *)v88 + 2) = *(_QWORD *)&a2[v87 + 16];
      *((_QWORD *)v88 + 3) = v91;
      v92 = type metadata accessor for FormatCustomItem.Resolved();
      v93 = *(int *)(v92 + 24);
      v300 = &v88[v93];
      v302 = v92;
      v94 = &v89[v93];
      v95 = type metadata accessor for FormatCustomItem.Action();
      __dstb = *(_QWORD **)(v95 - 8);
      v96 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v96(v94, 1, v95))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C7270, (void (*)(uint64_t))type metadata accessor for FormatCustomItem.Action);
        memcpy(v300, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v186 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v300, v94, v186);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v300, 0, 1, v95);
      }
      *(_QWORD *)&v88[*(int *)(v302 + 28)] = *(_QWORD *)&v89[*(int *)(v302 + 28)];
      swift_bridgeObjectRetain();
LABEL_139:
      swift_storeEnumTagMultiPayload();
      a3 = v307;
      goto LABEL_143;
    case 9u:
      v28 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v28;
      v29 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v29;
      v30 = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30)
      {
        v31 = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 7) = v30;
        *((_QWORD *)a1 + 8) = v31;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))((uint64_t)(a1 + 32), (uint64_t)(a2 + 32), v30);
      }
      else
      {
        v144 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v144;
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      }
      v145 = a1 + 72;
      v146 = a2 + 72;
      v147 = *((_QWORD *)a2 + 12);
      if (v147)
      {
        v148 = *((_QWORD *)a2 + 13);
        *((_QWORD *)a1 + 12) = v147;
        *((_QWORD *)a1 + 13) = v148;
        (**(void (***)(_OWORD *, _OWORD *))(v147 - 8))(v145, v146);
      }
      else
      {
        v156 = *(_OWORD *)(a2 + 88);
        *v145 = *v146;
        *(_OWORD *)(a1 + 88) = v156;
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      }
      v157 = a1 + 112;
      v158 = a2 + 112;
      v159 = *((_QWORD *)a2 + 17);
      if (v159)
      {
        v160 = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 17) = v159;
        *((_QWORD *)a1 + 18) = v160;
        (**(void (***)(_OWORD *, _OWORD *))(v159 - 8))(v157, v158);
      }
      else
      {
        v172 = *((_OWORD *)a2 + 8);
        *v157 = *v158;
        *((_OWORD *)a1 + 8) = v172;
        *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      }
      goto LABEL_142;
    case 0xAu:
      v98 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v98;
      v99 = (int *)type metadata accessor for FeedEngagementBanner();
      v100 = v99[5];
      v101 = &a1[v100];
      v102 = &a2[v100];
      v103 = sub_1BB86EDAC();
      v104 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16);
      swift_bridgeObjectRetain();
      v104(v101, v102, v103);
      *(_QWORD *)&a1[v99[6]] = *(_QWORD *)&a2[v99[6]];
      v105 = v99[7];
      v106 = &a1[v105];
      v107 = &a2[v105];
      *(_QWORD *)v106 = *(_QWORD *)v107;
      v106[8] = v107[8];
      v108 = v99[8];
      v22 = &a1[v108];
      v23 = &a2[v108];
      v24 = *((_QWORD *)v23 + 1);
      if (v24 >= 0x11)
      {
LABEL_37:
        *(_QWORD *)v22 = *(_QWORD *)v23;
        *((_QWORD *)v22 + 1) = v24;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)v23;
      }
      goto LABEL_142;
    case 0xBu:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      goto LABEL_142;
    case 0xCu:
      v32 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v32;
      v33 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v33;
      a1[32] = a2[32];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_142;
    case 0xDu:
      v109 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v109;
      a1[16] = a2[16];
      v110 = a2 + 24;
      v111 = *((_QWORD *)a2 + 4);
      if (v111 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v110;
        *((_QWORD *)a1 + 4) = v111;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v110;
      }
      v136 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v136;
      v137 = (void *)*((_QWORD *)a2 + 8);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 8) = v137;
      a1[72] = a2[72];
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      v138 = *((_QWORD *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v139 = v137;
      swift_bridgeObjectRetain();
      if (v138)
      {
        v140 = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 14) = v138;
        *((_QWORD *)a1 + 15) = v140;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v138 - 8))((uint64_t)(a1 + 88), (uint64_t)(a2 + 88), v138);
      }
      else
      {
        v187 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v187;
        *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      }
      v188 = a1 + 128;
      v189 = a2 + 128;
      v190 = *((_QWORD *)a2 + 19);
      if (v190)
      {
        v191 = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 19) = v190;
        *((_QWORD *)a1 + 20) = v191;
        (**(void (***)(_OWORD *, _OWORD *))(v190 - 8))(v188, v189);
      }
      else
      {
        v198 = *((_OWORD *)a2 + 9);
        *v188 = *v189;
        *((_OWORD *)a1 + 9) = v198;
        *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      }
      goto LABEL_142;
    case 0xEu:
      v34 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v34;
      a1[16] = a2[16];
      v35 = a2 + 24;
      v36 = *((_QWORD *)a2 + 4);
      if (v36 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v35;
        *((_QWORD *)a1 + 4) = v36;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v35;
      }
      v127 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v127;
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_142;
    case 0xFu:
      v112 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v112;
      a1[16] = a2[16];
      v113 = a2 + 24;
      v114 = *((_QWORD *)a2 + 4);
      if (v114 >= 0x11)
      {
        *((_QWORD *)a1 + 3) = *v113;
        *((_QWORD *)a1 + 4) = v114;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v113;
      }
      v141 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v141;
      v142 = *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
      *(_QWORD *)&a1[v142] = *(_QWORD *)&a2[v142];
      type metadata accessor for PuzzleStatistic();
      type metadata accessor for PuzzleStatisticCategory(0);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v143 = (char *)&loc_1BA875704 + 4 * word_1BB87E812[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 0x10u:
      v305 = a3;
      v37 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v37;
      v38 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v38;
      v39 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v39;
      *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v40 = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *((_QWORD *)a1 + 10) = v40;
      v41 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = v41;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
      a1[112] = a2[112];
      v42 = *((_QWORD *)a2 + 16);
      *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
      *((_QWORD *)a1 + 16) = v42;
      a1[136] = a2[136];
      v43 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 19) = v43;
      v44 = *((_QWORD *)a2 + 21);
      *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
      *((_QWORD *)a1 + 21) = v44;
      a1[184] = a2[184];
      *((_QWORD *)a1 + 22) = *((_QWORD *)a2 + 22);
      v45 = *((_QWORD *)a2 + 25);
      *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
      *((_QWORD *)a1 + 25) = v45;
      a1[224] = a2[224];
      v46 = *((_QWORD *)a2 + 27);
      *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
      *((_QWORD *)a1 + 27) = v46;
      __dst = a2 + 232;
      v47 = *((_QWORD *)a2 + 30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47 >= 0x11)
      {
        *((_QWORD *)a1 + 29) = *__dst;
        *((_QWORD *)a1 + 30) = v47;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 232) = *(_OWORD *)__dst;
      }
      a3 = v305;
      goto LABEL_142;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_143;
  }
}

char *assignWithCopy for FeedItemAuxiliaryItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char *v36;
  int *v37;
  unsigned int (*v38)(char *, uint64_t, int *);
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  int v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  id v96;
  uint64_t v97;
  char v98;
  void *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int *v125;
  uint64_t v126;
  char *v127;
  int *v128;
  unsigned int (*v129)(char *, uint64_t, int *);
  _QWORD *v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  id v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  _OWORD *v150;
  __int128 *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  id v169;
  id v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  void *v174;
  id v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  void *v179;
  id v180;
  uint64_t v181;
  char v182;
  void *v183;
  id v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  id v189;
  id v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  int *v199;
  char *v200;
  id v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  void *v220;
  id v221;
  uint64_t v222;
  void *v223;
  void (*v224)(_QWORD *, _QWORD, uint64_t, int *);
  id v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int EnumCaseMultiPayload;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  char *result;
  uint64_t v242;
  _QWORD *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  int *v248;
  char *__dst;
  _QWORD *__dsta;
  void (*__dstb)(char *, char *, void *);
  void *v252;
  int *v253;
  char *v254;
  void *v255;
  uint64_t v256;
  int *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;

  if (a1 != a2)
  {
    sub_1BA6DB314((uint64_t)a1);
    v6 = type metadata accessor for FeedItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        v7 = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        *((_QWORD *)a1 + 3) = v7;
        v8 = *((_QWORD *)a2 + 6);
        swift_bridgeObjectRetain();
        if (v8 >= 0x11)
        {
          *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        }
        goto LABEL_138;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        v28 = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        *((_QWORD *)a1 + 3) = v28;
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        v29 = *((_QWORD *)a2 + 10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v29 >= 0x11)
        {
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        }
        goto LABEL_138;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        v9 = (int *)type metadata accessor for FeedBannerAd();
        v10 = v9[5];
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = sub_1BB8721C0();
        v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        v14(v11, v12, v13);
        *(_QWORD *)&a1[v9[6]] = *(_QWORD *)&a2[v9[6]];
        v15 = v9[7];
        v16 = &a1[v15];
        v17 = &a2[v15];
        v18 = v17[8];
        *(_QWORD *)v16 = *(_QWORD *)v17;
        v16[8] = v18;
        v19 = v9[8];
        v20 = &a1[v19];
        v21 = &a2[v19];
        if (*((_QWORD *)v21 + 1) >= 0x11uLL)
          goto LABEL_38;
        *(_OWORD *)v20 = *(_OWORD *)v21;
        goto LABEL_138;
      case 3u:
        v259 = a3;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *((_QWORD *)a1 + 2) = v30;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[56] = a2[56];
        v253 = (int *)type metadata accessor for FeedHeadline(0);
        v31 = v253[10];
        v32 = &a1[v31];
        v33 = &a2[v31];
        *v32 = a2[v31];
        v32[1] = a2[v31 + 1];
        v34 = (int *)type metadata accessor for FeedHeadline.State(0);
        v35 = v34[6];
        __dst = &v32[v35];
        v36 = &v33[v35];
        v37 = (int *)type metadata accessor for SharedItem();
        v247 = *((_QWORD *)v37 - 1);
        v38 = *(unsigned int (**)(char *, uint64_t, int *))(v247 + 48);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if (v38(v36, 1, v37))
        {
          v39 = type metadata accessor for FeedItem.SharedState(0);
          memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          v134 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(__dst, v36, v134);
          __dst[v37[5]] = v36[v37[5]];
          v135 = v37[6];
          v136 = *(void **)&v36[v135];
          *(_QWORD *)&__dst[v135] = v136;
          v137 = v37[7];
          v258 = &__dst[v137];
          v246 = &v36[v137];
          v138 = sub_1BB86C67C();
          v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
          v140 = v136;
          v139(v258, v246, v138);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v247 + 56))(__dst, 0, 1, v37);
        }
        a3 = v259;
        v32[v34[7]] = v33[v34[7]];
        v32[v34[8]] = v33[v34[8]];
        v32[v34[9]] = v33[v34[9]];
        v32[v34[10]] = v33[v34[10]];
        v141 = v253[11];
        v142 = &a1[v141];
        v143 = &a2[v141];
        v144 = sub_1BB871B24();
        v145 = *(_QWORD *)(v144 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
          memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
        }
        v153 = v253[12];
        v154 = &a1[v153];
        v155 = &a2[v153];
        if (*((_QWORD *)v155 + 1) >= 0x11uLL)
        {
          *(_QWORD *)v154 = *(_QWORD *)v155;
          *((_QWORD *)v154 + 1) = *((_QWORD *)v155 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v154 = *(_OWORD *)v155;
        }
        v156 = v253[13];
        v157 = *(_QWORD *)&a2[v156];
        if (v157 >= 2)
        {
          if (v157 == 2)
          {
            *(_QWORD *)&a1[v156] = 2;
          }
          else
          {
            *(_QWORD *)&a1[v156] = v157;
            swift_unknownObjectRetain();
          }
        }
        else
        {
          *(_QWORD *)&a1[v156] = v157;
        }
        v173 = v253[14];
        v174 = *(void **)&a2[v173];
        *(_QWORD *)&a1[v173] = v174;
        v175 = v174;
        goto LABEL_138;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v22 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v22;
        if (*((_QWORD *)a2 + 4) >= 0x11uLL)
        {
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        }
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        v84 = (int *)type metadata accessor for FeedWebEmbed();
        v85 = v84[8];
        v86 = &a1[v85];
        v87 = &a2[v85];
        v88 = sub_1BB86C67C();
        v89 = *(_QWORD *)(v88 - 8);
        v90 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
        swift_bridgeObjectRetain();
        v90(v86, v87, v88);
        v257 = v84;
        v91 = v84[9];
        v92 = &a1[v91];
        v93 = &a2[v91];
        __dstb = (void (*)(char *, char *, void *))v90;
        v255 = (void *)v88;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(&a2[v91], 1, v88))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          v90(v92, v93, v88);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v92, 0, 1, v88);
        }
        *(_QWORD *)&a1[v84[10]] = *(_QWORD *)&a2[v84[10]];
        *(_QWORD *)&a1[v84[11]] = *(_QWORD *)&a2[v84[11]];
        v109 = v84[12];
        v110 = &a1[v109];
        v111 = &a2[v109];
        v112 = type metadata accessor for FeedHeadline(0);
        v113 = *(_QWORD *)(v112 - 8);
        v114 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
        swift_retain();
        swift_retain();
        if (v114(v111, 1, v112))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
          memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        }
        else
        {
          v245 = v113;
          v248 = (int *)v112;
          v260 = a3;
          *(_QWORD *)v110 = *(_QWORD *)v111;
          v243 = v111;
          *((_QWORD *)v110 + 1) = *((_QWORD *)v111 + 1);
          v121 = *((_QWORD *)v111 + 2);
          v110[24] = v111[24];
          *((_QWORD *)v110 + 2) = v121;
          *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
          *((_QWORD *)v110 + 5) = *((_QWORD *)v111 + 5);
          *((_QWORD *)v110 + 6) = *((_QWORD *)v111 + 6);
          v110[56] = v111[56];
          v122 = *(int *)(v112 + 40);
          v123 = &v110[v122];
          v124 = &v111[v122];
          *v123 = v111[v122];
          v123[1] = v111[v122 + 1];
          v125 = (int *)type metadata accessor for FeedHeadline.State(0);
          v126 = v125[6];
          v244 = &v123[v126];
          v127 = &v124[v126];
          v128 = (int *)type metadata accessor for SharedItem();
          v242 = *((_QWORD *)v128 - 1);
          v129 = *(unsigned int (**)(char *, uint64_t, int *))(v242 + 48);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          v130 = v110;
          if (v129(v127, 1, v128))
          {
            v131 = type metadata accessor for FeedItem.SharedState(0);
            memcpy(v244, v127, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
          }
          else
          {
            v193 = sub_1BB86C8B0();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v244, v127, v193);
            v244[v128[5]] = v127[v128[5]];
            v194 = v128[6];
            v195 = *(void **)&v127[v194];
            *(_QWORD *)&v244[v194] = v195;
            v196 = v128[7];
            v197 = v127;
            v198 = &v244[v196];
            v199 = v125;
            v200 = &v197[v196];
            v201 = v195;
            v202 = v200;
            v125 = v199;
            __dstb(v198, v202, v255);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v242 + 56))(v244, 0, 1, v128);
          }
          v123[v125[7]] = v124[v125[7]];
          v123[v125[8]] = v124[v125[8]];
          v123[v125[9]] = v124[v125[9]];
          v123[v125[10]] = v124[v125[10]];
          v203 = v248[11];
          v204 = (char *)v130 + v203;
          v205 = (char *)v243 + v203;
          v206 = sub_1BB871B24();
          v207 = *(_QWORD *)(v206 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
          {
            sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
            memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v204, v205, v206);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
          }
          a3 = v260;
          v209 = v248[12];
          v210 = (_QWORD *)((char *)v130 + v209);
          v211 = (_QWORD *)((char *)v243 + v209);
          if (v211[1] >= 0x11uLL)
          {
            *v210 = *v211;
            v210[1] = v211[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)v210 = *(_OWORD *)v211;
          }
          v212 = v248[13];
          v213 = *(_QWORD *)((char *)v243 + v212);
          if (v213 >= 2)
          {
            if (v213 == 2)
            {
              *(_QWORD *)((char *)v130 + v212) = 2;
            }
            else
            {
              *(_QWORD *)((char *)v130 + v212) = v213;
              swift_unknownObjectRetain();
            }
          }
          else
          {
            *(_QWORD *)((char *)v130 + v212) = v213;
          }
          v222 = v248[14];
          v223 = *(void **)((char *)v243 + v222);
          *(_QWORD *)((char *)v130 + v222) = v223;
          v224 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v245 + 56);
          v225 = v223;
          v224(v130, 0, 1, v248);
        }
        v226 = v257[13];
        v227 = &a1[v226];
        v228 = &a2[v226];
        v229 = type metadata accessor for WebEmbedDataVisualization();
        v230 = *(_QWORD *)(v229 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v230 + 48))(v228, 1, v229))
        {
          sub_1BA4A3FB4(0, &qword_1ED3CB5E0, (void (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization);
          memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
        }
        else
        {
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          *(_QWORD *)v227 = *(_QWORD *)v228;
          if (EnumCaseMultiPayload == 1)
          {
            *((_QWORD *)v227 + 1) = *((_QWORD *)v228 + 1);
            v233 = type metadata accessor for GenericDataVisualization();
            v234 = *(int *)(v233 + 20);
            v235 = &v227[v234];
            v261 = a3;
            v236 = &v228[v234];
            swift_bridgeObjectRetain();
            v237 = v236;
            a3 = v261;
            __dstb(v235, v237, v255);
            *(_QWORD *)&v227[*(int *)(v233 + 24)] = *(_QWORD *)&v228[*(int *)(v233 + 24)];
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_retain();
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v230 + 56))(v227, 0, 1, v229);
        }
        a1[v257[14]] = a2[v257[14]];
        goto LABEL_138;
      case 5u:
        v40 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        a1[25] = a2[25];
        v41 = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        *((_QWORD *)a1 + 4) = v41;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        v42 = (void *)*((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 7) = v42;
        a1[64] = a2[64];
        v43 = *((_QWORD *)a2 + 10);
        v44 = v40;
        swift_bridgeObjectRetain();
        v45 = v42;
        if (v43 == 1)
        {
          v46 = *(_OWORD *)(a2 + 72);
          v47 = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 104) = v47;
          *(_OWORD *)(a1 + 72) = v46;
        }
        else
        {
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
          *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
          v95 = (void *)*((_QWORD *)a2 + 13);
          *((_QWORD *)a1 + 13) = v95;
          *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v96 = v95;
        }
        if (*((_QWORD *)a2 + 16) >= 0x11uLL)
        {
          *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
          *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        }
        a1[136] = a2[136];
        goto LABEL_138;
      case 6u:
        v48 = a2[281];
        if (v48 == 2)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
          a1[24] = a2[24];
          v160 = *((_QWORD *)a2 + 4);
          a1[40] = a2[40];
          *((_QWORD *)a1 + 4) = v160;
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          v161 = *((_QWORD *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v161 == 1)
          {
            *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
            v162 = *((_OWORD *)a2 + 6);
            v163 = *((_OWORD *)a2 + 7);
            v164 = *((_OWORD *)a2 + 8);
            a1[144] = a2[144];
            *((_OWORD *)a1 + 7) = v163;
            *((_OWORD *)a1 + 8) = v164;
            *((_OWORD *)a1 + 6) = v162;
          }
          else
          {
            *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
            *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
            v181 = *((_QWORD *)a2 + 15);
            swift_bridgeObjectRetain();
            if (v181)
            {
              *((_QWORD *)a1 + 15) = v181;
              *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
              (**(void (***)(uint64_t, uint64_t, uint64_t))(v181 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v181);
              v182 = a2[144];
              *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
              a1[144] = v182;
            }
            else
            {
              v238 = *((_OWORD *)a2 + 6);
              v239 = *((_OWORD *)a2 + 7);
              v240 = *((_OWORD *)a2 + 8);
              a1[144] = a2[144];
              *((_OWORD *)a1 + 7) = v239;
              *((_OWORD *)a1 + 8) = v240;
              *((_OWORD *)a1 + 6) = v238;
            }
          }
        }
        else if (v48 == 1)
        {
          v49 = *(void **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
          a1[24] = a2[24];
          a1[25] = a2[25];
          v50 = *((_QWORD *)a2 + 4);
          a1[40] = a2[40];
          *((_QWORD *)a1 + 4) = v50;
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          v51 = (void *)*((_QWORD *)a2 + 7);
          *((_QWORD *)a1 + 7) = v51;
          a1[64] = a2[64];
          v52 = *((_QWORD *)a2 + 10);
          v53 = v49;
          swift_bridgeObjectRetain();
          v54 = v51;
          if (v52 == 1)
          {
            v55 = *(_OWORD *)(a2 + 72);
            v56 = *(_OWORD *)(a2 + 104);
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
            *(_OWORD *)(a1 + 104) = v56;
            *(_OWORD *)(a1 + 72) = v55;
          }
          else
          {
            *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
            *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
            *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
            *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
            v179 = (void *)*((_QWORD *)a2 + 13);
            *((_QWORD *)a1 + 13) = v179;
            *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v180 = v179;
          }
          if (*((_QWORD *)a2 + 16) >= 0x11uLL)
          {
            *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
            *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
          }
          a1[136] = a2[136];
          v185 = (void *)*((_QWORD *)a2 + 18);
          if (v185)
          {
            *((_QWORD *)a1 + 18) = v185;
            *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
            *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
            a1[168] = a2[168];
            a1[169] = a2[169];
            v186 = *((_QWORD *)a2 + 22);
            a1[184] = a2[184];
            *((_QWORD *)a1 + 22) = v186;
            *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
            v187 = (void *)*((_QWORD *)a2 + 25);
            *((_QWORD *)a1 + 25) = v187;
            a1[208] = a2[208];
            v188 = *((_QWORD *)a2 + 28);
            v189 = v185;
            swift_bridgeObjectRetain();
            v190 = v187;
            if (v188 == 1)
            {
              v191 = *(_OWORD *)(a2 + 216);
              v192 = *(_OWORD *)(a2 + 248);
              *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
              *(_OWORD *)(a1 + 248) = v192;
              *(_OWORD *)(a1 + 216) = v191;
            }
            else
            {
              *((_QWORD *)a1 + 27) = *((_QWORD *)a2 + 27);
              *((_QWORD *)a1 + 28) = *((_QWORD *)a2 + 28);
              *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
              *((_QWORD *)a1 + 30) = *((_QWORD *)a2 + 30);
              v220 = (void *)*((_QWORD *)a2 + 31);
              *((_QWORD *)a1 + 31) = v220;
              *((_QWORD *)a1 + 32) = *((_QWORD *)a2 + 32);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v221 = v220;
            }
            if (*((_QWORD *)a2 + 34) >= 0x11uLL)
            {
              *((_QWORD *)a1 + 33) = *((_QWORD *)a2 + 33);
              *((_QWORD *)a1 + 34) = *((_QWORD *)a2 + 34);
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
            }
            a1[280] = a2[280];
          }
          else
          {
            *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
            v214 = *((_OWORD *)a2 + 10);
            v215 = *((_OWORD *)a2 + 11);
            v216 = *((_OWORD *)a2 + 13);
            *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
            *((_OWORD *)a1 + 13) = v216;
            *((_OWORD *)a1 + 10) = v214;
            *((_OWORD *)a1 + 11) = v215;
            v217 = *((_OWORD *)a2 + 14);
            v218 = *((_OWORD *)a2 + 15);
            v219 = *((_OWORD *)a2 + 16);
            *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
            *((_OWORD *)a1 + 15) = v218;
            *((_OWORD *)a1 + 16) = v219;
            *((_OWORD *)a1 + 14) = v217;
          }
        }
        else
        {
          v165 = *(void **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
          a1[24] = a2[24];
          a1[25] = a2[25];
          v166 = *((_QWORD *)a2 + 4);
          a1[40] = a2[40];
          *((_QWORD *)a1 + 4) = v166;
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          v167 = (void *)*((_QWORD *)a2 + 7);
          *((_QWORD *)a1 + 7) = v167;
          a1[64] = a2[64];
          v168 = *((_QWORD *)a2 + 10);
          v169 = v165;
          swift_bridgeObjectRetain();
          v170 = v167;
          if (v168 == 1)
          {
            v171 = *(_OWORD *)(a2 + 72);
            v172 = *(_OWORD *)(a2 + 104);
            *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
            *(_OWORD *)(a1 + 104) = v172;
            *(_OWORD *)(a1 + 72) = v171;
          }
          else
          {
            *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
            *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
            *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
            *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
            v183 = (void *)*((_QWORD *)a2 + 13);
            *((_QWORD *)a1 + 13) = v183;
            *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v184 = v183;
          }
          if (*((_QWORD *)a2 + 16) >= 0x11uLL)
          {
            *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
            *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
          }
          a1[136] = a2[136];
        }
        a1[281] = v48;
        goto LABEL_138;
      case 7u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        v57 = *((_QWORD *)a2 + 4);
        a1[40] = a2[40];
        *((_QWORD *)a1 + 4) = v57;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        v58 = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v58 == 1)
        {
          *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
          v59 = *((_OWORD *)a2 + 6);
          v60 = *((_OWORD *)a2 + 7);
          v61 = *((_OWORD *)a2 + 8);
          a1[144] = a2[144];
          *((_OWORD *)a1 + 7) = v60;
          *((_OWORD *)a1 + 8) = v61;
          *((_OWORD *)a1 + 6) = v59;
        }
        else
        {
          *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
          *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
          v97 = *((_QWORD *)a2 + 15);
          swift_bridgeObjectRetain();
          if (v97)
          {
            *((_QWORD *)a1 + 15) = v97;
            *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
            (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))((uint64_t)(a1 + 96), (uint64_t)(a2 + 96), v97);
            v98 = a2[144];
            *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
            a1[144] = v98;
          }
          else
          {
            v176 = *((_OWORD *)a2 + 6);
            v177 = *((_OWORD *)a2 + 7);
            v178 = *((_OWORD *)a2 + 8);
            a1[144] = a2[144];
            *((_OWORD *)a1 + 7) = v177;
            *((_OWORD *)a1 + 8) = v178;
            *((_OWORD *)a1 + 6) = v176;
          }
        }
        goto LABEL_138;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        v62 = *(int *)(type metadata accessor for FeedCustomItem() + 20);
        v63 = &a1[v62];
        v64 = &a2[v62];
        *(_QWORD *)v63 = *(_QWORD *)&a2[v62];
        *((_QWORD *)v63 + 1) = *(_QWORD *)&a2[v62 + 8];
        *((_QWORD *)v63 + 2) = *(_QWORD *)&a2[v62 + 16];
        *((_QWORD *)v63 + 3) = *(_QWORD *)&a2[v62 + 24];
        v65 = type metadata accessor for FormatCustomItem.Resolved();
        v66 = *(int *)(v65 + 24);
        v254 = &v63[v66];
        v256 = v65;
        v67 = &v64[v66];
        v68 = type metadata accessor for FormatCustomItem.Action();
        __dsta = *(_QWORD **)(v68 - 8);
        v69 = (unsigned int (*)(char *, uint64_t, uint64_t))__dsta[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v69(v67, 1, v68))
        {
          sub_1BA4A3FB4(0, &qword_1ED3C7270, (void (*)(uint64_t))type metadata accessor for FormatCustomItem.Action);
          memcpy(v254, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          v147 = sub_1BB86C67C();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v254, v67, v147);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsta[7])(v254, 0, 1, v68);
        }
        *(_QWORD *)&v63[*(int *)(v256 + 28)] = *(_QWORD *)&v64[*(int *)(v256 + 28)];
        swift_bridgeObjectRetain();
        goto LABEL_138;
      case 9u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v23)
        {
          *((_QWORD *)a1 + 7) = v23;
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8))((uint64_t)(a1 + 32), (uint64_t)(a2 + 32), v23);
        }
        else
        {
          v104 = *((_OWORD *)a2 + 2);
          v105 = *((_OWORD *)a2 + 3);
          *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
          *((_OWORD *)a1 + 2) = v104;
          *((_OWORD *)a1 + 3) = v105;
        }
        v106 = a1 + 72;
        v107 = (__int128 *)(a2 + 72);
        v108 = *((_QWORD *)a2 + 12);
        if (v108)
        {
          *((_QWORD *)a1 + 12) = v108;
          *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
          (**(void (***)(_OWORD *, __int128 *))(v108 - 8))(v106, v107);
        }
        else
        {
          v116 = *v107;
          v117 = *(_OWORD *)(a2 + 88);
          *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
          *v106 = v116;
          *(_OWORD *)(a1 + 88) = v117;
        }
        v118 = a1 + 112;
        v119 = (__int128 *)(a2 + 112);
        v120 = *((_QWORD *)a2 + 17);
        if (v120)
        {
          *((_QWORD *)a1 + 17) = v120;
          *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
          (**(void (***)(_OWORD *, __int128 *))(v120 - 8))(v118, v119);
        }
        else
        {
          v132 = *v119;
          v133 = *((_OWORD *)a2 + 8);
          *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
          *v118 = v132;
          *((_OWORD *)a1 + 8) = v133;
        }
        goto LABEL_138;
      case 0xAu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        v71 = (int *)type metadata accessor for FeedEngagementBanner();
        v72 = v71[5];
        v73 = &a1[v72];
        v74 = &a2[v72];
        v75 = sub_1BB86EDAC();
        v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
        swift_bridgeObjectRetain();
        v76(v73, v74, v75);
        *(_QWORD *)&a1[v71[6]] = *(_QWORD *)&a2[v71[6]];
        v77 = v71[7];
        v78 = &a1[v77];
        v79 = &a2[v77];
        v80 = v79[8];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        v78[8] = v80;
        v81 = v71[8];
        v20 = &a1[v81];
        v21 = &a2[v81];
        if (*((_QWORD *)v21 + 1) >= 0x11uLL)
        {
LABEL_38:
          *(_QWORD *)v20 = *(_QWORD *)v21;
          *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)v21;
        }
        goto LABEL_138;
      case 0xBu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        goto LABEL_138;
      case 0xCu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        v24 = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        *((_QWORD *)a1 + 3) = v24;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_138;
      case 0xDu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v82 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v82;
        if (*((_QWORD *)a2 + 4) >= 0x11uLL)
        {
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        }
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        v99 = (void *)*((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 8) = v99;
        a1[72] = a2[72];
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        v100 = *((_QWORD *)a2 + 14);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v101 = v99;
        swift_bridgeObjectRetain();
        if (v100)
        {
          *((_QWORD *)a1 + 14) = v100;
          *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
          (**(void (***)(uint64_t, uint64_t, uint64_t))(v100 - 8))((uint64_t)(a1 + 88), (uint64_t)(a2 + 88), v100);
        }
        else
        {
          v148 = *(_OWORD *)(a2 + 88);
          v149 = *(_OWORD *)(a2 + 104);
          *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
          *(_OWORD *)(a1 + 88) = v148;
          *(_OWORD *)(a1 + 104) = v149;
        }
        v150 = a1 + 128;
        v151 = (__int128 *)(a2 + 128);
        v152 = *((_QWORD *)a2 + 19);
        if (v152)
        {
          *((_QWORD *)a1 + 19) = v152;
          *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
          (**(void (***)(_OWORD *, __int128 *))(v152 - 8))(v150, v151);
        }
        else
        {
          v158 = *v151;
          v159 = *((_OWORD *)a2 + 9);
          *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
          *v150 = v158;
          *((_OWORD *)a1 + 9) = v159;
        }
        goto LABEL_138;
      case 0xEu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v25 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v25;
        if (*((_QWORD *)a2 + 4) >= 0x11uLL)
        {
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        }
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_138;
      case 0xFu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v83 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v83;
        if (*((_QWORD *)a2 + 4) >= 0x11uLL)
        {
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        }
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        v102 = *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
        *(_QWORD *)&a1[v102] = *(_QWORD *)&a2[v102];
        type metadata accessor for PuzzleStatistic();
        type metadata accessor for PuzzleStatisticCategory(0);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v103 = (char *)&loc_1BA877924 + 4 * word_1BB87E83C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 0x10u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        a1[48] = a2[48];
        a1[49] = a2[49];
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
        a1[112] = a2[112];
        *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
        a1[136] = a2[136];
        *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
        *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
        v26 = *((_QWORD *)a2 + 22);
        a1[184] = a2[184];
        *((_QWORD *)a1 + 22) = v26;
        *((_QWORD *)a1 + 24) = *((_QWORD *)a2 + 24);
        *((_QWORD *)a1 + 25) = *((_QWORD *)a2 + 25);
        *((_QWORD *)a1 + 26) = *((_QWORD *)a2 + 26);
        v27 = *((_QWORD *)a2 + 27);
        a1[224] = a2[224];
        *((_QWORD *)a1 + 27) = v27;
        v252 = (void *)*((_QWORD *)a2 + 30);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((unint64_t)v252 >= 0x11)
        {
          *((_QWORD *)a1 + 29) = *((_QWORD *)a2 + 29);
          *((_QWORD *)a1 + 30) = *((_QWORD *)a2 + 30);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
        }
LABEL_138:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FeedItemAuxiliaryItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *result;
  uint64_t v106;
  uint64_t v107;
  char *__dst;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  int *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;

  v6 = type metadata accessor for FeedItem(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = (int *)type metadata accessor for FeedBannerAd();
      v8 = v7[5];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = sub_1BB8721C0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)&a1[v7[6]] = *(_QWORD *)&a2[v7[6]];
      v12 = v7[7];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v13[8] = v14[8];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_OWORD *)&a1[v7[8]] = *(_OWORD *)&a2[v7[8]];
      goto LABEL_40;
    case 3u:
      v113 = a3;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      a1[24] = a2[24];
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      a1[56] = a2[56];
      v15 = (int *)type metadata accessor for FeedHeadline(0);
      v16 = v15[10];
      v17 = &a1[v16];
      v18 = &a2[v16];
      *v17 = a2[v16];
      v17[1] = a2[v16 + 1];
      v19 = (int *)type metadata accessor for FeedHeadline.State(0);
      v20 = v19[6];
      v21 = &v17[v20];
      v22 = &v18[v20];
      v23 = (int *)type metadata accessor for SharedItem();
      v24 = *((_QWORD *)v23 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
      {
        v25 = type metadata accessor for FeedItem.SharedState(0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v60 = sub_1BB86C8B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v21, v22, v60);
        v21[v23[5]] = v22[v23[5]];
        *(_QWORD *)&v21[v23[6]] = *(_QWORD *)&v22[v23[6]];
        v61 = v23[7];
        v112 = &v21[v61];
        v62 = &v22[v61];
        v63 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v112, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
      }
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      v17[v19[10]] = v18[v19[10]];
      v64 = v15[11];
      v65 = &a1[v64];
      v66 = &a2[v64];
      v67 = sub_1BB871B24();
      v68 = *(_QWORD *)(v67 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      }
      a3 = v113;
      *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
      v78 = v15[13];
      v79 = *(_QWORD *)&a2[v78];
      if (v79 == 2)
        v79 = 2;
      *(_QWORD *)&a1[v78] = v79;
      *(_QWORD *)&a1[v15[14]] = *(_QWORD *)&a2[v15[14]];
      goto LABEL_40;
    case 4u:
      v26 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v26;
      a1[16] = a2[16];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v27 = (int *)type metadata accessor for FeedWebEmbed();
      v28 = v27[8];
      v29 = &a1[v28];
      v30 = &a2[v28];
      v31 = sub_1BB86C67C();
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v33(v29, v30, v31);
      v111 = v27;
      v34 = v27[9];
      v35 = &a1[v34];
      v36 = &a2[v34];
      v109 = v33;
      v110 = v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(&a2[v34], 1, v31))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v33(v35, v36, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
      }
      v70 = v27;
      *(_QWORD *)&a1[v27[10]] = *(_QWORD *)&a2[v27[10]];
      *(_QWORD *)&a1[v27[11]] = *(_QWORD *)&a2[v27[11]];
      v71 = v27[12];
      v72 = &a1[v71];
      v73 = &a2[v71];
      v74 = (int *)type metadata accessor for FeedHeadline(0);
      v75 = *((_QWORD *)v74 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v75 + 48))(v73, 1, v74))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        v107 = v75;
        v114 = a3;
        *(_OWORD *)v72 = *(_OWORD *)v73;
        *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
        v72[24] = v73[24];
        *((_QWORD *)v72 + 4) = *((_QWORD *)v73 + 4);
        *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
        v72[56] = v73[56];
        v80 = v74[10];
        v81 = &v72[v80];
        v82 = &v73[v80];
        *v81 = v73[v80];
        v81[1] = v73[v80 + 1];
        v83 = (int *)type metadata accessor for FeedHeadline.State(0);
        v84 = v83[6];
        __dst = &v81[v84];
        v85 = &v82[v84];
        v86 = (int *)type metadata accessor for SharedItem();
        v106 = *((_QWORD *)v86 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v106 + 48))(v85, 1, v86))
        {
          v87 = type metadata accessor for FeedItem.SharedState(0);
          memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          v88 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(__dst, v85, v88);
          __dst[v86[5]] = v85[v86[5]];
          *(_QWORD *)&__dst[v86[6]] = *(_QWORD *)&v85[v86[6]];
          v109(&__dst[v86[7]], &v85[v86[7]], v110);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v106 + 56))(__dst, 0, 1, v86);
        }
        v81[v83[7]] = v82[v83[7]];
        v81[v83[8]] = v82[v83[8]];
        v81[v83[9]] = v82[v83[9]];
        v81[v83[10]] = v82[v83[10]];
        v89 = v74[11];
        v90 = &v72[v89];
        v91 = &v73[v89];
        v92 = sub_1BB871B24();
        v93 = *(_QWORD *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v90, v91, v92);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
        }
        a3 = v114;
        v70 = v111;
        *(_OWORD *)&v72[v74[12]] = *(_OWORD *)&v73[v74[12]];
        v95 = v74[13];
        v96 = *(_QWORD *)&v73[v95];
        if (v96 == 2)
          v96 = 2;
        *(_QWORD *)&v72[v95] = v96;
        *(_QWORD *)&v72[v74[14]] = *(_QWORD *)&v73[v74[14]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v107 + 56))(v72, 0, 1, v74);
      }
      v97 = v70[13];
      v98 = &a1[v97];
      v99 = &a2[v97];
      v100 = type metadata accessor for WebEmbedDataVisualization();
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      {
        sub_1BA4A3FB4(0, &qword_1ED3CB5E0, (void (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *(_OWORD *)v98 = *(_OWORD *)v99;
          v103 = type metadata accessor for GenericDataVisualization();
          v109(&v98[*(int *)(v103 + 20)], &v99[*(int *)(v103 + 20)], v110);
          *(_QWORD *)&v98[*(int *)(v103 + 24)] = *(_QWORD *)&v99[*(int *)(v103 + 24)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v98, v99, *(_QWORD *)(v101 + 64));
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
      }
      a1[v70[14]] = a2[v70[14]];
      goto LABEL_40;
    case 8u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v38 = *(int *)(type metadata accessor for FeedCustomItem() + 20);
      v39 = &a1[v38];
      v40 = &a2[v38];
      v41 = *(_OWORD *)&a2[v38 + 16];
      *(_OWORD *)v39 = *(_OWORD *)&a2[v38];
      *((_OWORD *)v39 + 1) = v41;
      v42 = type metadata accessor for FormatCustomItem.Resolved();
      v43 = *(int *)(v42 + 24);
      v44 = &v39[v43];
      v45 = &v40[v43];
      v46 = type metadata accessor for FormatCustomItem.Action();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C7270, (void (*)(uint64_t))type metadata accessor for FormatCustomItem.Action);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v77 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v44, v45, v77);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      *(_QWORD *)&v39[*(int *)(v42 + 28)] = *(_QWORD *)&v40[*(int *)(v42 + 28)];
      goto LABEL_40;
    case 0xAu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v49 = (int *)type metadata accessor for FeedEngagementBanner();
      v50 = v49[5];
      v51 = &a1[v50];
      v52 = &a2[v50];
      v53 = sub_1BB86EDAC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      *(_QWORD *)&a1[v49[6]] = *(_QWORD *)&a2[v49[6]];
      v54 = v49[7];
      v55 = &a1[v54];
      v56 = &a2[v54];
      v55[8] = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *(_OWORD *)&a1[v49[8]] = *(_OWORD *)&a2[v49[8]];
LABEL_40:
      swift_storeEnumTagMultiPayload();
      break;
    case 0xFu:
      v57 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v57;
      a1[16] = a2[16];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v58 = *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
      *(_QWORD *)&a1[v58] = *(_QWORD *)&a2[v58];
      type metadata accessor for PuzzleStatistic();
      type metadata accessor for PuzzleStatisticCategory(0);
      v59 = (char *)&loc_1BA879394 + 4 * word_1BB87E852[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v104 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v104] = *(_QWORD *)&a2[v104];
  return a1;
}

char *assignWithTake for FeedItemAuxiliaryItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *result;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  char *__dst;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;

  if (a1 != a2)
  {
    sub_1BA6DB314((uint64_t)a1);
    v6 = type metadata accessor for FeedItem(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = (int *)type metadata accessor for FeedBannerAd();
        v8 = v7[5];
        v9 = &a1[v8];
        v10 = &a2[v8];
        v11 = sub_1BB8721C0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
        *(_QWORD *)&a1[v7[6]] = *(_QWORD *)&a2[v7[6]];
        v12 = v7[7];
        v13 = &a1[v12];
        v14 = &a2[v12];
        v13[8] = v14[8];
        *(_QWORD *)v13 = *(_QWORD *)v14;
        *(_OWORD *)&a1[v7[8]] = *(_OWORD *)&a2[v7[8]];
        goto LABEL_41;
      case 3u:
        v111 = a3;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        a1[24] = a2[24];
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        a1[56] = a2[56];
        v15 = (int *)type metadata accessor for FeedHeadline(0);
        v16 = v15[10];
        v17 = &a1[v16];
        v18 = &a2[v16];
        *v17 = a2[v16];
        v17[1] = a2[v16 + 1];
        v19 = (int *)type metadata accessor for FeedHeadline.State(0);
        v20 = v19[6];
        v21 = &v17[v20];
        v22 = &v18[v20];
        v23 = (int *)type metadata accessor for SharedItem();
        v24 = *((_QWORD *)v23 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
        {
          v25 = type metadata accessor for FeedItem.SharedState(0);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          v60 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v21, v22, v60);
          v21[v23[5]] = v22[v23[5]];
          *(_QWORD *)&v21[v23[6]] = *(_QWORD *)&v22[v23[6]];
          v61 = v23[7];
          v110 = &v21[v61];
          v62 = &v22[v61];
          v63 = sub_1BB86C67C();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v110, v62, v63);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
        }
        v17[v19[7]] = v18[v19[7]];
        v17[v19[8]] = v18[v19[8]];
        v17[v19[9]] = v18[v19[9]];
        v17[v19[10]] = v18[v19[10]];
        v64 = v15[11];
        v65 = &a1[v64];
        v66 = &a2[v64];
        v67 = sub_1BB871B24();
        v68 = *(_QWORD *)(v67 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
        a3 = v111;
        *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
        v77 = v15[13];
        v78 = *(_QWORD *)&a2[v77];
        if (v78 == 2)
          v78 = 2;
        *(_QWORD *)&a1[v77] = v78;
        *(_QWORD *)&a1[v15[14]] = *(_QWORD *)&a2[v15[14]];
        goto LABEL_41;
      case 4u:
        v26 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v26;
        a1[16] = a2[16];
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v27 = (int *)type metadata accessor for FeedWebEmbed();
        v28 = v27[8];
        v29 = &a1[v28];
        v30 = &a2[v28];
        v31 = sub_1BB86C67C();
        v32 = *(_QWORD *)(v31 - 8);
        v33 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
        v33(v29, v30, v31);
        v34 = v27[9];
        v35 = &a1[v34];
        v36 = &a2[v34];
        v108 = v33;
        v109 = v31;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(&a2[v34], 1, v31))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          v33(v35, v36, v31);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
        }
        *(_QWORD *)&a1[v27[10]] = *(_QWORD *)&a2[v27[10]];
        *(_QWORD *)&a1[v27[11]] = *(_QWORD *)&a2[v27[11]];
        v70 = v27[12];
        v71 = &a1[v70];
        v72 = &a2[v70];
        v73 = (int *)type metadata accessor for FeedHeadline(0);
        v74 = *((_QWORD *)v73 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v74 + 48))(v72, 1, v73))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&unk_1ED3B2DB0, (void (*)(uint64_t))type metadata accessor for FeedHeadline);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          v105 = v74;
          v106 = v27;
          v112 = a3;
          *(_OWORD *)v71 = *(_OWORD *)v72;
          *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
          v71[24] = v72[24];
          *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
          *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
          v71[56] = v72[56];
          v79 = v73[10];
          v80 = &v71[v79];
          v81 = &v72[v79];
          *v80 = v72[v79];
          v80[1] = v72[v79 + 1];
          v82 = (int *)type metadata accessor for FeedHeadline.State(0);
          v83 = v82[6];
          __dst = &v80[v83];
          v84 = &v81[v83];
          v85 = (int *)type metadata accessor for SharedItem();
          v104 = *((_QWORD *)v85 - 1);
          if ((*(unsigned int (**)(char *, uint64_t, int *))(v104 + 48))(v84, 1, v85))
          {
            v86 = type metadata accessor for FeedItem.SharedState(0);
            memcpy(__dst, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            v87 = sub_1BB86C8B0();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 32))(__dst, v84, v87);
            __dst[v85[5]] = v84[v85[5]];
            *(_QWORD *)&__dst[v85[6]] = *(_QWORD *)&v84[v85[6]];
            v108(&__dst[v85[7]], &v84[v85[7]], v109);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v104 + 56))(__dst, 0, 1, v85);
          }
          v80[v82[7]] = v81[v82[7]];
          v80[v82[8]] = v81[v82[8]];
          v80[v82[9]] = v81[v82[9]];
          v80[v82[10]] = v81[v82[10]];
          v88 = v73[11];
          v89 = &v71[v88];
          v90 = &v72[v88];
          v91 = sub_1BB871B24();
          v92 = *(_QWORD *)(v91 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0B00, (void (*)(uint64_t))MEMORY[0x1E0D52718]);
            memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v89, v90, v91);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
          }
          a3 = v112;
          v27 = v106;
          *(_OWORD *)&v71[v73[12]] = *(_OWORD *)&v72[v73[12]];
          v94 = v73[13];
          v95 = *(_QWORD *)&v72[v94];
          if (v95 == 2)
            v95 = 2;
          *(_QWORD *)&v71[v94] = v95;
          *(_QWORD *)&v71[v73[14]] = *(_QWORD *)&v72[v73[14]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v105 + 56))(v71, 0, 1, v73);
        }
        v96 = v27[13];
        v97 = &a1[v96];
        v98 = &a2[v96];
        v99 = type metadata accessor for WebEmbedDataVisualization();
        v100 = *(_QWORD *)(v99 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
        {
          sub_1BA4A3FB4(0, &qword_1ED3CB5E0, (void (*)(uint64_t))type metadata accessor for WebEmbedDataVisualization);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            *(_OWORD *)v97 = *(_OWORD *)v98;
            v102 = type metadata accessor for GenericDataVisualization();
            v108(&v97[*(int *)(v102 + 20)], &v98[*(int *)(v102 + 20)], v109);
            *(_QWORD *)&v97[*(int *)(v102 + 24)] = *(_QWORD *)&v98[*(int *)(v102 + 24)];
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v97, v98, *(_QWORD *)(v100 + 64));
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        }
        a1[v27[14]] = a2[v27[14]];
        goto LABEL_41;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v38 = *(int *)(type metadata accessor for FeedCustomItem() + 20);
        v39 = &a1[v38];
        v40 = &a2[v38];
        v41 = *(_OWORD *)&a2[v38 + 16];
        *(_OWORD *)v39 = *(_OWORD *)&a2[v38];
        *((_OWORD *)v39 + 1) = v41;
        v42 = type metadata accessor for FormatCustomItem.Resolved();
        v43 = *(int *)(v42 + 24);
        v44 = &v39[v43];
        v45 = &v40[v43];
        v46 = type metadata accessor for FormatCustomItem.Action();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_1BA4A3FB4(0, &qword_1ED3C7270, (void (*)(uint64_t))type metadata accessor for FormatCustomItem.Action);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v76 = sub_1BB86C67C();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v44, v45, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        *(_QWORD *)&v39[*(int *)(v42 + 28)] = *(_QWORD *)&v40[*(int *)(v42 + 28)];
        goto LABEL_41;
      case 0xAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v49 = (int *)type metadata accessor for FeedEngagementBanner();
        v50 = v49[5];
        v51 = &a1[v50];
        v52 = &a2[v50];
        v53 = sub_1BB86EDAC();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        *(_QWORD *)&a1[v49[6]] = *(_QWORD *)&a2[v49[6]];
        v54 = v49[7];
        v55 = &a1[v54];
        v56 = &a2[v54];
        v55[8] = v56[8];
        *(_QWORD *)v55 = *(_QWORD *)v56;
        *(_OWORD *)&a1[v49[8]] = *(_OWORD *)&a2[v49[8]];
LABEL_41:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xFu:
        v57 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v57;
        a1[16] = a2[16];
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v58 = *(int *)(type metadata accessor for FeedPuzzleStatistic() + 32);
        *(_QWORD *)&a1[v58] = *(_QWORD *)&a2[v58];
        type metadata accessor for PuzzleStatistic();
        type metadata accessor for PuzzleStatisticCategory(0);
        v59 = (char *)&loc_1BA87A6B8 + 4 * word_1BB87E868[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedItemAuxiliaryItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA87B5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for FeedItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedItemAuxiliaryItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BA87B644(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FeedItem(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1BA87B6BC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SportsTaxonomyGraphManager.sportsTaxonomyGraph()()
{
  uint64_t v0;
  uint64_t v2;

  swift_retain();
  sub_1BB86E878();
  swift_release();
  if (v2)
  {
    sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3A3A38, (uint64_t (*)(uint64_t))type metadata accessor for SportsTaxonomyGraph, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9E0();
  }
  else
  {
    v0 = sub_1BB86E0EC();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_1BA87B80C()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  sub_1BB86EC14();
  v0 = (void *)sub_1BB86E854();
  sub_1BB86E98C();
  swift_release();

  v1 = (void *)sub_1BB86E854();
  sub_1BB86EA28();
  swift_release();

  v2 = (void *)sub_1BB86E854();
  type metadata accessor for SportsTaxonomyGraph();
  sub_1BB86E980();
  swift_release();

  v3 = (void *)sub_1BB86E854();
  v4 = sub_1BB86E9A4();
  swift_release();

  return v4;
}

uint64_t sub_1BA87B934()
{
  return sub_1BA87B80C();
}

uint64_t sub_1BA87B93C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  sub_1BB0B9AA4(ObjectType, v7);
  swift_release();
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BA87B9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  v2 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return sub_1BB0B9AA4(ObjectType, v2);
}

_QWORD *sub_1BA87B9EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6[3];

  v2 = a1[1];
  v3 = a1[2];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = v3;
  type metadata accessor for SportsTaxonomyGraph();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_1BB65A1D8(v6);
  v5 = (uint64_t)result;
  if (!v1)
  {
    v6[0] = (uint64_t)result;
    swift_retain_n();
    swift_retain();
    sub_1BB86E884();
    swift_release();
    swift_release();
    v6[0] = v5;
    sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3A3A38, (uint64_t (*)(uint64_t))type metadata accessor for SportsTaxonomyGraph, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return (_QWORD *)sub_1BB86E9E0();
  }
  return result;
}

uint64_t sub_1BA87BAE4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_1ED3AAC10 != -1)
    swift_once();
  v0 = (id)qword_1ED476750;
  v1 = sub_1BB8732F4();
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BB87CE70;
  swift_getErrorValue();
  v3 = sub_1BB87456C();
  v5 = v4;
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v2 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v5;
  sub_1BB86EF44("Failed to create sports taxonomy graph; error=%{public}@", 56, 2, &dword_1BA493000, v0, v1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t SportsTaxonomyGraphManager.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SportsTaxonomyGraphManager.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BA87BC64()
{
  return SportsTaxonomyGraphManager.sportsTaxonomyGraph()();
}

Swift::Void __swiftcall SportsTaxonomyGraphManager.sceneWillEnterForeground()()
{
  swift_retain();
  sub_1BB86E884();
  swift_release();
}

uint64_t sub_1BA87BCC4()
{
  return sub_1BB86E3BC();
}

uint64_t sub_1BA87BCCC()
{
  return sub_1BB86E3E0();
}

uint64_t sub_1BA87BCD4()
{
  return sub_1BB86E3BC();
}

uint64_t sub_1BA87BCDC()
{
  return sub_1BB86E3E0();
}

uint64_t sub_1BA87BCE4()
{
  return sub_1BB86E3BC();
}

uint64_t dispatch thunk of SportsTaxonomyGraphManagerType.sportsTaxonomyGraph()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for SportsTaxonomyGraphManager()
{
  return swift_lookUpClassMethod();
}

_QWORD *sub_1BA87BD00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  _QWORD v11[5];

  v7 = sub_1BB86E50C();
  MEMORY[0x1E0C80A78](v7);
  sub_1BA50AD30(&qword_1ED3B07F0, 255, v8, MEMORY[0x1E0DB41A8]);
  sub_1BA539E4C(0);
  sub_1BA50AD30((unint64_t *)&qword_1ED3B9250, 255, (uint64_t (*)(uint64_t))sub_1BA539E4C, MEMORY[0x1E0DEAF38]);
  sub_1BB873BC4();
  sub_1BA841928();
  swift_allocObject();
  v3[4] = sub_1BB86E0E0();
  v11[0] = 0;
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3A39E0, (uint64_t (*)(uint64_t))sub_1BA82DB78, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4AE8]);
  swift_allocObject();
  v3[5] = sub_1BB86E86C();
  v3[2] = a1;
  v3[3] = a2;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  sub_1BA50AD30(&qword_1ED3A7E18, v9, (uint64_t (*)(uint64_t))type metadata accessor for SportsTaxonomyGraphManager, (uint64_t)&protocol conformance descriptor for SportsTaxonomyGraphManager);
  swift_unknownObjectRetain();
  swift_retain();
  sub_1BB86E5F0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v3;
}

uint64_t sub_1BA87BED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  return sub_1BB0B999C(ObjectType, v1);
}

id static FCDateRange.firstEdition(date:config:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void *v9;
  id v10;
  _OWORD v12[2];

  v4 = type metadata accessor for FeedEdition();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BB86C8B0();
  v8 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v12[0] = *a2;
  v8(v6, a1, v7);
  v12[1] = v12[0];
  FeedEditionConfig.fetchWindow(for:)(a1);
  *(_QWORD *)&v6[*(int *)(v4 + 20)] = v9;
  v10 = v9;
  sub_1BA87D5B0((uint64_t)v6);
  return v10;
}

id static FCDateRange.infiniteChronologicalFeed.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  id result;
  uint64_t v9;

  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - v4;
  sub_1BA49C408();
  sub_1BB86C8A4();
  v6 = sub_1BB86C8B0();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 0, 1, v6);
  v7(v2, 1, 1, v6);
  result = sub_1BA4B8D08((uint64_t)v5, (uint64_t)v2);
  if (!result)
    __break(1u);
  return result;
}

uint64_t FCDateRange.dateInterval.getter()
{
  void *v0;
  uint64_t (*v1)(char *, uint64_t, uint64_t, uint64_t);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, char *, uint64_t);
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  id v18;
  void *v19;
  uint64_t result;
  uint64_t v21;

  v2 = v0;
  v3 = sub_1BB86C8B0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v21 - v12;
  v14 = objc_msgSend(v2, sel_earlierDate, v11);
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
    goto LABEL_7;
  }
  v15 = v14;
  sub_1BB86C874();

  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v16(v13, v6, v3);
  v1 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v1(v13, 0, 1, v3);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v17(v13, 1, v3) == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v18 = objc_msgSend(v2, sel_laterDate);
  if (!v18)
  {
LABEL_8:
    result = v1(v9, 1, 1, v3);
    goto LABEL_9;
  }
  v19 = v18;
  sub_1BB86C874();

  v16(v9, v6, v3);
  v1(v9, 0, 1, v3);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v9, 1, v3);
  if ((_DWORD)result != 1)
    return sub_1BB86BE84();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t FCDateRange.refreshingEditionedFeed(from:refreshStrategy:config:)(void (*a1)(char *, _QWORD, uint64_t), unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  double v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  char *v35;
  double v36;
  double v37;
  id v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t result;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  _BYTE *v76;
  id v77;
  _BYTE *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void (*v99)(char *, uint64_t);
  void (*v100)(char *, uint64_t);
  void (*v101)(char *, _QWORD, uint64_t);
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;

  v101 = a1;
  v3 = type metadata accessor for FeedEdition();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1BB86CAC0();
  v89 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v104 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_1BB86CAD8();
  v88 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v102 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BB86C8B0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v79 - v14;
  MEMORY[0x1E0C80A78](v16);
  v106 = (char *)&v79 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v79 - v19;
  v25 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v79 - v22;
  v27 = *a2;
  v28 = v23[1];
  if ((v27 - 1) < 2)
  {
    v29 = *v23;
    sub_1BB86C8A4();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v5, v11, v8);
    v107 = v29;
    v108 = v28;
    FeedEditionConfig.fetchWindow(for:)((uint64_t)v11);
    *(_QWORD *)&v5[*(int *)(v3 + 20)] = v30;
    v20 = v30;
    sub_1BA87D5B0((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (uint64_t)v20;
  }
  if (v27)
  {
    v70 = v24;
    (*(void (**)(char *, void (*)(char *, _QWORD, uint64_t), uint64_t, double))(v9 + 16))(v15, v101, v8, v25);
    v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v72 = 1;
    v71(v15, 0, 1, v8);
    v73 = objc_msgSend(v109, sel_startDate);
    if (v73)
    {
      v74 = v73;
      sub_1BB86C874();

      v75 = v70;
      v72 = 0;
    }
    else
    {
      v75 = v70;
    }
    v71((char *)v75, v72, 1, v8);
    sub_1BA49C408();
    v77 = sub_1BA4B8D08((uint64_t)v15, v75);
    if (v77)
      return (uint64_t)v77;
LABEL_62:
    __break(1u);
LABEL_63:
    result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v106, 1, 1, v8);
    goto LABEL_64;
  }
  v83 = v23[1];
  (*(void (**)(char *, void (*)(char *, _QWORD, uint64_t), uint64_t, double))(v9 + 16))((char *)&v79 - v22, v101, v8, v25);
  v84 = v9;
  v28 = *(_QWORD *)(v9 + 56);
  v31 = 1;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v26, 0, 1, v8);
  v32 = objc_msgSend(v109, sel_startDate);
  if (v32)
  {
    v33 = v32;
    sub_1BB86C874();

    v31 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v20, v31, 1, v8);
  sub_1BA49C408();
  v34 = (char *)sub_1BA4B8D08((uint64_t)v26, (uint64_t)v20);
  if (!v34)
  {
    sub_1BA87D5EC();
    swift_allocError();
    *v76 = 0;
    swift_willThrow();
    return (uint64_t)v20;
  }
  v35 = v34;
  objc_msgSend(v34, sel_absoluteTimeInterval);
  v37 = v36;
  v80 = v35;
  v38 = objc_msgSend(v35, sel_startDate);
  if (!v38)
    goto LABEL_63;
  v39 = v38;
  sub_1BB86C874();

  v40 = v84;
  v41 = v106;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v106, v11, v8);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v41, 0, 1, v8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v41, 1, v8);
  if ((_DWORD)result != 1)
  {
    v85 = *(_QWORD *)(v83 + 16);
    if (!v85)
    {
LABEL_57:
      v69 = 86400.0;
LABEL_58:
      (*(void (**)(char *, uint64_t))(v40 + 8))(v106, v8);
      v20 = v80;
      if (v37 > v69)
      {
        sub_1BA87D5EC();
        swift_allocError();
        *v78 = 1;
        swift_willThrow();

      }
      return (uint64_t)v20;
    }
    v86 = v83 + 32;
    v93 = *MEMORY[0x1E0CB1198];
    v91 = *MEMORY[0x1E0CB1140];
    swift_bridgeObjectRetain_n();
    v43 = 0;
    v82 = v8;
    while (1)
    {
      v44 = (_QWORD *)(v86 + 16 * v43);
      v45 = *v44;
      v96 = *(_QWORD *)(*v44 + 16);
      if (v96)
        break;
LABEL_12:
      if (++v43 == v85)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }
    }
    v87 = v43;
    v81 = v44[1];
    v46 = *(_QWORD *)(v45 + 32);
    v47 = *(_BYTE *)(v45 + 40);
    v48 = *(_QWORD *)(v45 + 48);
    v49 = *(_BYTE *)(v45 + 56);
    v97 = *(_QWORD *)(v45 + 64);
    LODWORD(v109) = *(unsigned __int8 *)(v45 + 72);
    v95 = *(_QWORD *)(v45 + 80);
    v98 = *(unsigned __int8 *)(v45 + 88);
    v90 = v45;
    swift_bridgeObjectRetain_n();
    v50 = v102;
    sub_1BB86CA90();
    v51 = v89;
    v53 = v104;
    v52 = v105;
    v101 = *(void (**)(char *, _QWORD, uint64_t))(v89 + 104);
    v101(v104, v93, v105);
    v28 = sub_1BB86CACC();
    v100 = *(void (**)(char *, uint64_t))(v51 + 8);
    v100(v53, v52);
    v99 = *(void (**)(char *, uint64_t))(v88 + 8);
    v99(v50, v103);
    if ((v47 & 1) != 0)
    {
      if (v28 < 1)
        goto LABEL_30;
    }
    else if (v28 < v46)
    {
      goto LABEL_30;
    }
    if ((v49 & 1) != 0)
    {
      if (v28 > 7)
        goto LABEL_30;
    }
    else if (v48 < v28)
    {
      goto LABEL_30;
    }
    v54 = v102;
    sub_1BB86CA90();
    v56 = v104;
    v55 = v105;
    v101(v104, v91, v105);
    v57 = sub_1BB86CACC();
    v100(v56, v55);
    v99(v54, v103);
    if ((v109 & 1) != 0)
    {
      if (v57 < 0)
        goto LABEL_30;
LABEL_26:
      if ((v98 & 1) != 0)
      {
        if (v57 <= 23)
          goto LABEL_49;
      }
      else if (v95 >= v57)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v69 = (double)v81;
        v8 = v82;
        v40 = v84;
        goto LABEL_58;
      }
      goto LABEL_30;
    }
    if (v57 >= v97)
      goto LABEL_26;
LABEL_30:
    if (v96 != 1)
    {
      v58 = (unsigned __int8 *)(v90 + 152);
      v8 = 1;
      do
      {
        v59 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_62;
        }
        v60 = *((_QWORD *)v58 - 7);
        v97 = *((_QWORD *)v58 - 5);
        LODWORD(v109) = *(v58 - 32);
        v94 = *((_QWORD *)v58 - 3);
        v98 = *(v58 - 16);
        v92 = *((_QWORD *)v58 - 1);
        LODWORD(v95) = *v58;
        v61 = *(v58 - 48);
        v62 = v102;
        sub_1BB86CA90();
        v64 = v104;
        v63 = v105;
        v101(v104, v93, v105);
        v28 = sub_1BB86CACC();
        v100(v64, v63);
        v99(v62, v103);
        if ((v61 & 1) != 0)
        {
          if (v28 < 1)
            goto LABEL_33;
        }
        else if (v28 < v60)
        {
          goto LABEL_33;
        }
        if ((v109 & 1) != 0)
        {
          if (v28 > 7)
            goto LABEL_33;
        }
        else if (v97 < v28)
        {
          goto LABEL_33;
        }
        v65 = v102;
        sub_1BB86CA90();
        v67 = v104;
        v66 = v105;
        v101(v104, v91, v105);
        v68 = sub_1BB86CACC();
        v100(v67, v66);
        v99(v65, v103);
        if ((v98 & 1) != 0)
        {
          if (v68 < 0)
            goto LABEL_33;
        }
        else if (v68 < v94)
        {
          goto LABEL_33;
        }
        if ((v95 & 1) != 0)
        {
          if (v68 <= 23)
            goto LABEL_49;
        }
        else if (v92 >= v68)
        {
          goto LABEL_49;
        }
LABEL_33:
        v58 += 64;
        ++v8;
      }
      while (v59 != v96);
    }
    swift_bridgeObjectRelease_n();
    v8 = v82;
    v40 = v84;
    v43 = v87;
    goto LABEL_12;
  }
LABEL_64:
  __break(1u);
  return result;
}

void FCDateRange.refreshingExtendedEditionedFeed(refreshedDateRange:refreshStrategy:config:)(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  double v39;
  double v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  _BYTE *v75;
  void *v76;
  uint64_t v77;
  _BYTE *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;

  v100 = a3;
  v106 = a2;
  v102 = a1;
  v3 = sub_1BB86CAC0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BB86CAD8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BB86C8B0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  v21 = MEMORY[0x1E0C80A78](v17);
  if (*v106)
  {
    v22 = v102;
    return;
  }
  v98 = (uint64_t)v14;
  v99 = (uint64_t)&v79 - v18;
  v97 = v20;
  v106 = v10;
  v84 = v8;
  v96 = v7;
  v103 = v6;
  v85 = v4;
  v104 = v3;
  v105 = v19;
  v23 = *(_QWORD *)(v100 + 8);
  v24 = objc_msgSend(v102, sel_startDate, v21);
  if (v24)
  {
    v25 = v24;
    v26 = v99;
    sub_1BB86C874();

    v27 = v12;
    v28 = *(_QWORD *)(v12 + 56);
    v29 = v26;
    v30 = 0;
  }
  else
  {
    v27 = v12;
    v28 = *(_QWORD *)(v12 + 56);
    v29 = v99;
    v30 = 1;
  }
  v31 = (_BYTE *)v11;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v29, v30, 1, v11);
  v32 = objc_msgSend(v101, sel_endDate);
  v33 = v98;
  if (v32)
  {
    v34 = v32;
    v35 = v97;
    sub_1BB86C874();

    v36 = 0;
  }
  else
  {
    v36 = 1;
    v35 = v97;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v35, v36, 1, v11);
  sub_1BA49C408();
  v37 = sub_1BA4B8D08(v99, v35);
  if (v37)
  {
    v38 = v37;
    objc_msgSend(v37, sel_absoluteTimeInterval);
    v40 = v39;
    v79 = v38;
    v41 = objc_msgSend(v38, sel_startDate);
    if (!v41)
      goto LABEL_60;
    v42 = v41;
    sub_1BB86C874();

    v43 = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v105, v33, v11);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v28)(v43, 0, 1, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v43, 1, v11) == 1)
    {
LABEL_61:
      __break(1u);
    }
    else
    {
      v86 = *(_QWORD *)(v23 + 16);
      if (v86)
      {
        v87 = v23 + 32;
        v93 = *MEMORY[0x1E0CB1198];
        v91 = *MEMORY[0x1E0CB1140];
        swift_bridgeObjectRetain_n();
        v44 = 0;
        v83 = v11;
        v82 = v27;
        v81 = v23;
        while (1)
        {
          v45 = (_QWORD *)(v87 + 16 * v44);
          v46 = *v45;
          v97 = *(_QWORD *)(*v45 + 16);
          if (v97)
            break;
LABEL_15:
          if (++v44 == v86)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_55;
          }
        }
        v88 = v44;
        v80 = v45[1];
        v47 = *(_QWORD *)(v46 + 32);
        v48 = *(_BYTE *)(v46 + 40);
        v49 = *(_QWORD *)(v46 + 48);
        v50 = *(_BYTE *)(v46 + 56);
        v51 = *(_QWORD *)(v46 + 64);
        LODWORD(v99) = *(unsigned __int8 *)(v46 + 72);
        v94 = *(_QWORD *)(v46 + 80);
        v95 = v51;
        LODWORD(v98) = *(unsigned __int8 *)(v46 + 88);
        v90 = v46;
        swift_bridgeObjectRetain_n();
        v52 = v106;
        sub_1BB86CA90();
        v53 = v85;
        v55 = v103;
        v54 = v104;
        v102 = *(id *)(v85 + 104);
        ((void (*)(char *, _QWORD, uint64_t))v102)(v103, v93, v104);
        v28 = sub_1BB86CACC();
        v101 = *(id *)(v53 + 8);
        ((void (*)(char *, uint64_t))v101)(v55, v54);
        v100 = *(_QWORD *)(v84 + 8);
        ((void (*)(_BYTE *, uint64_t))v100)(v52, v96);
        if ((v48 & 1) != 0)
        {
          v56 = v96;
          if (v28 < 1)
            goto LABEL_33;
        }
        else
        {
          v56 = v96;
          if (v28 < v47)
            goto LABEL_33;
        }
        if ((v50 & 1) != 0)
        {
          if (v28 > 7)
            goto LABEL_33;
        }
        else if (v49 < v28)
        {
          goto LABEL_33;
        }
        v57 = v106;
        sub_1BB86CA90();
        v58 = v104;
        ((void (*)(char *, _QWORD, uint64_t))v102)(v55, v91, v104);
        v59 = sub_1BB86CACC();
        ((void (*)(char *, uint64_t))v101)(v55, v58);
        ((void (*)(_BYTE *, uint64_t))v100)(v57, v56);
        if ((v99 & 1) != 0)
        {
          if (v59 < 0)
            goto LABEL_33;
LABEL_29:
          if ((v98 & 1) != 0)
          {
            if (v59 <= 23)
              goto LABEL_52;
          }
          else if (v94 >= v59)
          {
LABEL_52:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v73 = (double)v80;
            v31 = (_BYTE *)v83;
            v27 = v82;
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v59 >= v95)
          goto LABEL_29;
LABEL_33:
        v31 = v106;
        if (v97 != 1)
        {
          v60 = (unsigned __int8 *)(v90 + 152);
          v61 = 1;
          do
          {
            v62 = v61 + 1;
            if (__OFADD__(v61, 1))
            {
              __break(1u);
LABEL_60:
              ((void (*)(uint64_t, uint64_t, uint64_t, _BYTE *))v28)(v105, 1, 1, v31);
              goto LABEL_61;
            }
            v63 = *((_QWORD *)v60 - 7);
            v98 = *((_QWORD *)v60 - 5);
            v28 = *(v60 - 32);
            v94 = *((_QWORD *)v60 - 3);
            LODWORD(v99) = *(v60 - 16);
            v92 = *((_QWORD *)v60 - 1);
            LODWORD(v95) = *v60;
            v64 = *(v60 - 48);
            sub_1BB86CA90();
            v66 = v103;
            v65 = v104;
            ((void (*)(char *, _QWORD, uint64_t))v102)(v103, v93, v104);
            v67 = sub_1BB86CACC();
            v68 = v66;
            v69 = v96;
            v70 = v65;
            v31 = v106;
            ((void (*)(char *, uint64_t))v101)(v68, v70);
            ((void (*)(_BYTE *, uint64_t))v100)(v31, v69);
            if ((v64 & 1) != 0)
            {
              if (v67 < 1)
                goto LABEL_36;
            }
            else if (v67 < v63)
            {
              goto LABEL_36;
            }
            if ((v28 & 1) != 0)
            {
              if (v67 > 7)
                goto LABEL_36;
            }
            else if (v98 < v67)
            {
              goto LABEL_36;
            }
            sub_1BB86CA90();
            v28 = (uint64_t)v103;
            v71 = v104;
            ((void (*)(char *, _QWORD, uint64_t))v102)(v103, v91, v104);
            v72 = sub_1BB86CACC();
            ((void (*)(uint64_t, uint64_t))v101)(v28, v71);
            ((void (*)(_BYTE *, uint64_t))v100)(v31, v69);
            if ((v99 & 1) != 0)
            {
              if (v72 < 0)
                goto LABEL_36;
            }
            else if (v72 < v94)
            {
              goto LABEL_36;
            }
            if ((v95 & 1) != 0)
            {
              if (v72 <= 23)
                goto LABEL_52;
            }
            else if (v92 >= v72)
            {
              goto LABEL_52;
            }
LABEL_36:
            v60 += 64;
            ++v61;
          }
          while (v62 != v97);
        }
        swift_bridgeObjectRelease_n();
        v31 = (_BYTE *)v83;
        v27 = v82;
        v44 = v88;
        goto LABEL_15;
      }
LABEL_55:
      v73 = 86400.0;
LABEL_56:
      (*(void (**)(uint64_t, _BYTE *))(v27 + 8))(v105, v31);
      if (v40 > v73)
      {
        v76 = v79;
        sub_1BA87D5EC();
        v77 = swift_allocError();
        *v78 = 1;
        v89 = v77;
        swift_willThrow();

      }
    }
  }
  else
  {
    sub_1BA87D5EC();
    v74 = swift_allocError();
    *v75 = 0;
    v89 = v74;
    swift_willThrow();
  }
}

uint64_t FCDateRange.expandingEditionedFeed(config:)(_OWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _OWORD v20[2];

  v2 = v1;
  v4 = sub_1BB86C8B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FeedEdition();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *a1;
  v14 = objc_msgSend(v2, sel_endDate);
  if (v14)
  {
    v15 = v14;
    sub_1BB86C874();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v13, v10, v4);
      v20[1] = v20[0];
      FeedEditionConfig.fetchWindow(for:)((uint64_t)v10);
      v17 = *(int *)(v11 + 20);
      *(_QWORD *)&v13[v17] = v18;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v19 = *(id *)&v13[v17];
      sub_1BA87D5B0((uint64_t)v13);
      return (uint64_t)v19;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BA87D5B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeedEdition();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BA87D5EC()
{
  unint64_t result;

  result = qword_1ED3A0908;
  if (!qword_1ED3A0908)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87EA50, &_s6ErrorsON);
    atomic_store(result, (unint64_t *)&qword_1ED3A0908);
  }
  return result;
}

uint64_t _s6ErrorsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BA87D67C + 4 * byte_1BB87E9D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BA87D6B0 + 4 * byte_1BB87E9D0[v4]))();
}

uint64_t sub_1BA87D6B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA87D6B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA87D6C0);
  return result;
}

uint64_t sub_1BA87D6CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA87D6D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BA87D6D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA87D6E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6ErrorsOMa()
{
  return &_s6ErrorsON;
}

unint64_t sub_1BA87D700()
{
  unint64_t result;

  result = qword_1EF2A9650;
  if (!qword_1EF2A9650)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB87EA28, &_s6ErrorsON);
    atomic_store(result, (unint64_t *)&qword_1EF2A9650);
  }
  return result;
}

uint64_t sub_1BA87D744(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1BAC79F38(0, v1, 0);
    v2 = v14;
    sub_1BA6F0168();
    v4 = a1 + 48;
    do
    {
      v5 = *(_QWORD *)(v4 - 8);
      v13 = *(_QWORD *)(v4 - 16);
      swift_bridgeObjectRetain();
      v6 = sub_1BB873B58();
      v8 = v7;
      v10 = *(_QWORD *)(v14 + 16);
      v9 = *(_QWORD *)(v14 + 24);
      if (v10 >= v9 >> 1)
        sub_1BAC79F38(v9 > 1, v10 + 1, 1);
      v4 += 24;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = (_QWORD *)(v14 + 32 * v10);
      v11[4] = v13;
      v11[5] = v5;
      v11[6] = v6;
      v11[7] = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BA87D85C@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return FormatOptionsNodeStatementModifier.init(from:)(a1, a2);
}

uint64_t sub_1BA87D870(_QWORD *a1)
{
  return FormatOptionsNodeStatementModifier.encode(to:)(a1);
}

uint64_t sub_1BA87D884(unsigned __int8 *a1)
{
  char *v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v2 = *a1;
  v3 = *v1;
  if (v3 >> 6)
  {
    if (v3 >> 6 == 1)
    {
      if (v2 == 5)
      {
        v16 = v3 & 1;
        v13 = 0;
        v14 = 0xE000000000000000;
        v15 = MEMORY[0x1E0DEE9D8];
        sub_1BB7C7CF8(&v13, &v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        v13 = v17;
        FormatOptionValue.type.getter();
        return swift_release();
      }
      type metadata accessor for FormatDerivedDataError();
      sub_1BA87DD80();
      swift_allocError();
      v12 = 5;
    }
    else
    {
      if (v2 == 4)
      {
        v4 = swift_allocObject();
        sub_1BA6F0168();
        v5 = sub_1BB873B58();
        v7 = v6;
        v8 = swift_bridgeObjectRetain();
        v9 = sub_1BA87D744(v8);
        *(_QWORD *)(v4 + 16) = v5;
        *(_QWORD *)(v4 + 24) = v7;
        *(_QWORD *)(v4 + 32) = v9;
        v13 = v4 | 0x5000000000000000;
        FormatOptionValue.type.getter();
        return swift_release();
      }
      type metadata accessor for FormatDerivedDataError();
      sub_1BA87DD80();
      swift_allocError();
      v12 = 4;
    }
  }
  else
  {
    if (v2 == 3)
    {
      v16 = *v1;
      v13 = 0x3FF0000000000000;
      v14 = MEMORY[0x1E0DEE9D8];
      sub_1BB40787C();
      goto LABEL_7;
    }
    type metadata accessor for FormatDerivedDataError();
    sub_1BA87DD80();
    swift_allocError();
    v12 = 3;
  }
  *v11 = v12;
  v11[1] = v2;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

BOOL _s8NewsFeed34FormatOptionsNodeStatementModifierO2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v6;
  _BOOL4 v7;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 6;
  v6 = v3 < 0x40 && v2 == v3;
  v7 = ((v3 ^ v2) & 1) == 0;
  if ((v3 & 0xC0) != 0x40)
    v7 = 0;
  if (v4 != 1)
    v7 = (v3 & 0xC0) == 128;
  if (v4)
    return v7;
  else
    return v6;
}

unint64_t sub_1BA87DAF8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA87DB1C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BA87DB1C()
{
  unint64_t result;

  result = qword_1EF2A9658;
  if (!qword_1EF2A9658)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionsNodeStatementModifier, &type metadata for FormatOptionsNodeStatementModifier);
    atomic_store(result, (unint64_t *)&qword_1EF2A9658);
  }
  return result;
}

unint64_t sub_1BA87DB60(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA82089C();
  a1[2] = sub_1BA8208E0();
  result = sub_1BA87DB94();
  a1[3] = result;
  return result;
}

unint64_t sub_1BA87DB94()
{
  unint64_t result;

  result = qword_1EF2A9660;
  if (!qword_1EF2A9660)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatOptionsNodeStatementModifier, &type metadata for FormatOptionsNodeStatementModifier);
    atomic_store(result, (unint64_t *)&qword_1EF2A9660);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatOptionsNodeStatementModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xE)
    goto LABEL_17;
  if (a2 + 242 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 242) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 242;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 242;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 242;
  }
LABEL_17:
  v6 = ((*a1 >> 2) & 0xC | (*a1 >> 6)) ^ 0xF;
  if (v6 >= 0xD)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatOptionsNodeStatementModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 242 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 242) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD)
    return ((uint64_t (*)(void))((char *)&loc_1BA87DCC4 + 4 * byte_1BB87EA95[v4]))();
  *a1 = a2 - 14;
  return ((uint64_t (*)(void))((char *)sub_1BA87DCF8 + 4 * byte_1BB87EA90[v4]))();
}

uint64_t sub_1BA87DCF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA87DD00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BA87DD08);
  return result;
}

uint64_t sub_1BA87DD20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BA87DD28);
  *(_BYTE *)result = 16 * (((-a2 >> 2) & 3) - 4 * a2);
  return result;
}

uint64_t sub_1BA87DD2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA87DD34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BA87DD40(unsigned __int8 *a1)
{
  return *a1 >> 6;
}

_BYTE *sub_1BA87DD4C(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_1BA87DD5C(_BYTE *result, char a2)
{
  *result = *result & 0xF | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for FormatOptionsNodeStatementModifier()
{
  return &type metadata for FormatOptionsNodeStatementModifier;
}

unint64_t sub_1BA87DD80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2A9668;
  if (!qword_1EF2A9668)
  {
    v1 = type metadata accessor for FormatDerivedDataError();
    result = MEMORY[0x1BCCE5B24](&unk_1BB909F9C, v1);
    atomic_store(result, (unint64_t *)&qword_1EF2A9668);
  }
  return result;
}

uint64_t sub_1BA87DDC8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA87DDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA87E6EC(0, &qword_1ED39EBE8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DBC400]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v6 - v3;
  sub_1BA87E6EC(0, (unint64_t *)&unk_1ED39EE90, MEMORY[0x1E0DBC428]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DBC3F8], v1);
  result = sub_1BB871458();
  qword_1ED3ABAE0 = result;
  return result;
}

uint64_t static Commands.openInNewTab.getter()
{
  if (qword_1ED3ABAF0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static ContextMenuItem.openInNewTab(tag:feedConfiguration:)(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  return sub_1BA87DF44(a1, a2);
}

uint64_t sub_1BA87DF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t ObjCClassFromMetadata;
  void *v9;
  id v10;
  _QWORD v12[3];
  char v13;

  v4 = sub_1BB870150();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED3ABAF0 != -1)
    swift_once();
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = (void *)objc_opt_self();
  swift_retain();
  swift_unknownObjectRetain();
  v10 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  sub_1BB8713C8();
  sub_1BB8713B0();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DB8530], v4);
  v12[1] = a1;
  v12[2] = a2;
  v13 = 2;
  swift_allocObject();
  return sub_1BB86FB20();
}

uint64_t _s5TeaUI15ContextMenuItemC8NewsFeedE12openInNewTab5issueACSgSo7FCIssueC_tFZ_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t ObjCClassFromMetadata;
  void *v7;
  id v8;
  id v9;
  _QWORD v11[3];
  char v12;

  v2 = sub_1BB870150();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED3ABAF0 != -1)
    swift_once();
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v7 = (void *)objc_opt_self();
  swift_retain();
  v8 = a1;
  v9 = objc_msgSend(v7, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  sub_1BB8713C8();
  sub_1BB8713B0();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DB8530], v2);
  v11[1] = a1;
  v11[2] = 0;
  v12 = 0;
  sub_1BB86FB38();
  swift_allocObject();
  return sub_1BB86FB20();
}

uint64_t _s5TeaUI15ContextMenuItemC8NewsFeedE12openInNewTab8headlineACSgSo19FCHeadlineProviding_p_tFZ_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t ObjCClassFromMetadata;
  void *v13;
  id v14;
  _QWORD v15[3];
  char v16;

  v2 = sub_1BB870150();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_contentType, v4) == (id)1)
  {
    if (qword_1EF2A7380 != -1)
      swift_once();
    v7 = sub_1BB86EFEC();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EF3D0960);
    v8 = sub_1BB86EFC8();
    v9 = sub_1BB87330C();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1BA493000, v8, v9, "Context menu item 'openInNewTab' not available for web articles", v10, 2u);
      MEMORY[0x1BCCE5C38](v10, -1, -1);
    }

    return 0;
  }
  else
  {
    if (qword_1ED3ABAF0 != -1)
      swift_once();
    type metadata accessor for Localized();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v13 = (void *)objc_opt_self();
    swift_retain();
    swift_unknownObjectRetain();
    v14 = objc_msgSend(v13, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_1BB86C340();

    sub_1BB8713C8();
    sub_1BB8713B0();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0DB8530], v2);
    v15[1] = a1;
    v15[2] = 0;
    v16 = 1;
    sub_1BB86FB38();
    swift_allocObject();
    return sub_1BB86FB20();
  }
}

id sub_1BA87E594(id result, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1)
    return (id)swift_unknownObjectRetain();
  if (!a3)
    return result;
  return result;
}

void destroy for OpenCommandContext(uint64_t a1)
{
  sub_1BA87E5C8(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1BA87E5C8(id a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1)
  {
    swift_unknownObjectRelease();
  }
  else if (!a3)
  {

  }
}

uint64_t _s8NewsFeed18OpenCommandContextOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BA87E594(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for OpenCommandContext(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BA87E594(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BA87E5C8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for OpenCommandContext(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BA87E5C8(v4, v5, v6);
  return a1;
}

uint64_t sub_1BA87E6CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1BA87E6D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OpenCommandContext()
{
  return &type metadata for OpenCommandContext;
}

void sub_1BA87E6EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for OpenCommandContext);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t PuzzleButtonsAccessoryView.identifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_identifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PuzzleButtonsAccessoryView.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_identifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PuzzleButtonsAccessoryView.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

double PuzzleButtonsAccessoryView.height.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_height;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PuzzleButtonsAccessoryView.__allocating_init(identifier:minHeight:buttonsConfig:provider:handler:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  objc_class *v8;
  char *v17;
  uint64_t ObjectType;

  v17 = (char *)objc_allocWithZone(v8);
  ObjectType = swift_getObjectType();
  return sub_1BA87EDA0(a1, a2, a3, a4, a6, a7, v17, a8, ObjectType, a5);
}

uint64_t PuzzleButtonsAccessoryView.init(identifier:minHeight:buttonsConfig:provider:handler:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  char *v8;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return sub_1BA87EDA0(a1, a2, a3, a4, a6, a7, v8, a8, ObjectType, a5);
}

void *sub_1BA87E9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *result;
  __int128 v13[3];
  uint64_t v14;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v13[0] = *(_QWORD *)a1;
  *((_QWORD *)&v13[0] + 1) = v9;
  v11 = *(_OWORD *)(a1 + 32);
  v13[1] = *(_OWORD *)(a1 + 16);
  v13[2] = v11;
  v14 = v10;
  result = sub_1BA87F9DC(a2, a3, v13, a4, a5, a6, a7);
  *a8 = result;
  return result;
}

id PuzzleButtonsAccessoryView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void PuzzleButtonsAccessoryView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PuzzleButtonsAccessoryView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BA87EB80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_identifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1BA87EBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_identifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1BA87EC30())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double sub_1BA87EC74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_height;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_1BA87ECB8(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[4];
  char v11;

  if (a2)
  {
    v7 = *a6;
    v8 = a6[1];
    v10[0] = a4;
    v10[1] = a5;
    v10[2] = v7;
    v10[3] = v8;
    v11 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1BA87ED2C(uint64_t *result, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  if (a2)
  {
    v6 = *result;
    v7 = result[1];
    v8[0] = a4;
    v8[1] = a5;
    v8[2] = v6;
    v8[3] = v7;
    v9 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v8);
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BA87EDA0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, double a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  objc_class *ObjectType;
  id v89;
  uint64_t v90;
  char v91[16];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  objc_super v98;
  uint64_t v99;

  ObjectType = (objc_class *)swift_getObjectType();
  v90 = a5;
  v18 = *a3;
  v19 = &a7[OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_identifier];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&a7[OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_spacing] = 0x4020000000000000;
  v92 = a1;
  v93 = a2;
  v94 = a4;
  v95 = a10;
  v96 = a5;
  v97 = a6;
  v20 = a7;
  v21 = sub_1BB140E74((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1BA880258, (uint64_t)v91, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v23 = MEMORY[0x1E0DEE9D8];
  if (v22)
  {
    v99 = MEMORY[0x1E0DEE9D8];
    result = sub_1BAC79F8C(0, v22 & ~(v22 >> 63), 0);
    if (v22 < 0)
    {
      __break(1u);
      return result;
    }
    v25 = 0;
    v23 = v99;
    v26 = *MEMORY[0x1E0DC4FF8];
    v27 = *(double *)(MEMORY[0x1E0DC4FF8] + 8);
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
        v28 = (id)MEMORY[0x1BCCE4630](v25, v21);
      else
        v28 = *(id *)(v21 + 8 * v25 + 32);
      v29 = v28;
      objc_msgSend(v28, sel_systemLayoutSizeFittingSize_, v26, v27, ObjectType);
      v31 = v30;

      v99 = v23;
      v33 = *(_QWORD *)(v23 + 16);
      v32 = *(_QWORD *)(v23 + 24);
      if (v33 >= v32 >> 1)
      {
        sub_1BAC79F8C(v32 > 1, v33 + 1, 1);
        v23 = v99;
      }
      ++v25;
      *(_QWORD *)(v23 + 16) = v33 + 1;
      *(_QWORD *)(v23 + 8 * v33 + 32) = v31;
    }
    while (v22 != v25);
  }
  *(double *)&v34 = COERCE_DOUBLE(sub_1BB82CC78(v23));
  v36 = v35;
  swift_bridgeObjectRelease();
  v37 = *(double *)&v34;
  if ((v36 & 1) != 0)
    v37 = 0.0;
  if (v37 <= a8)
    v37 = a8;
  *(double *)&v20[OBJC_IVAR____TtC8NewsFeed26PuzzleButtonsAccessoryView_height] = v37;
  if (v21 >> 62)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
    swift_bridgeObjectRetain();
    sub_1BB873EB8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1BB874428();
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
  }
  swift_bridgeObjectRelease();
  v38 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
  v39 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(v38, sel_initWithArrangedSubviews_, v39);

  objc_msgSend(v40, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v40, sel_setAxis_, 0);
  objc_msgSend(v40, sel_setDistribution_, 2);
  objc_msgSend(v40, sel_setAlignment_, 3);
  objc_msgSend(v40, sel_setSpacing_, 8.0);
  objc_msgSend(v40, sel_setLayoutMarginsRelativeArrangement_, 1);
  v41 = v40;

  objc_msgSend(v41, sel_setLayoutMargins_, 8.0, 8.0, 8.0, 8.0);
  v98.receiver = v20;
  v98.super_class = ObjectType;
  v42 = objc_msgSendSuper2(&v98, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v43 = objc_allocWithZone(MEMORY[0x1E0DC3F10]);
  v44 = v42;
  v45 = objc_msgSend(v43, sel_init);
  objc_msgSend(v45, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C28]), sel_init);
  objc_msgSend(v46, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v44, sel_addSubview_, v46);
  objc_msgSend(v46, sel_addSubview_, v45);
  objc_msgSend(v45, sel_addSubview_, v41);
  v89 = (id)objc_opt_self();
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3BA020, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1BB87EBC0;
  v48 = objc_msgSend(v46, sel_topAnchor);
  v49 = objc_msgSend(v44, (SEL)&selRef_setContentsGravity_ + 4);
  v50 = objc_msgSend(v48, sel_constraintEqualToAnchor_, v49);

  *(_QWORD *)(v47 + 32) = v50;
  v51 = objc_msgSend(v46, sel_leadingAnchor);
  v52 = objc_msgSend(v44, (SEL)&selRef_absoluteTimeInterval + 6);
  v53 = objc_msgSend(v51, sel_constraintEqualToAnchor_, v52);

  *(_QWORD *)(v47 + 40) = v53;
  v54 = objc_msgSend(v46, sel_trailingAnchor);
  v55 = objc_msgSend(v44, (SEL)&selRef_ultraQualityImage);
  v56 = objc_msgSend(v54, sel_constraintEqualToAnchor_, v55);

  *(_QWORD *)(v47 + 48) = v56;
  v57 = objc_msgSend(v46, sel_bottomAnchor);
  v58 = objc_msgSend(v44, sel_bottomAnchor);
  v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v58);

  *(_QWORD *)(v47 + 56) = v59;
  v60 = objc_msgSend(v45, sel_topAnchor);
  v61 = objc_msgSend(v46, sel_topAnchor);
  v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_, v61);

  *(_QWORD *)(v47 + 64) = v62;
  v63 = objc_msgSend(v45, sel_leadingAnchor);
  v64 = objc_msgSend(v46, sel_leadingAnchor);
  v65 = objc_msgSend(v63, sel_constraintEqualToAnchor_, v64);

  *(_QWORD *)(v47 + 72) = v65;
  v66 = objc_msgSend(v45, sel_trailingAnchor);
  v67 = objc_msgSend(v46, sel_trailingAnchor);
  v68 = objc_msgSend(v66, sel_constraintEqualToAnchor_, v67);

  *(_QWORD *)(v47 + 80) = v68;
  v69 = objc_msgSend(v45, sel_bottomAnchor);
  v70 = objc_msgSend(v46, sel_bottomAnchor);
  v71 = objc_msgSend(v69, sel_constraintEqualToAnchor_, v70);

  *(_QWORD *)(v47 + 88) = v71;
  v72 = objc_msgSend(v45, sel_heightAnchor);
  v73 = objc_msgSend(v46, sel_heightAnchor);
  v74 = objc_msgSend(v72, sel_constraintEqualToAnchor_, v73);

  *(_QWORD *)(v47 + 96) = v74;
  v75 = objc_msgSend(v41, sel_topAnchor);
  v76 = objc_msgSend(v45, sel_topAnchor);
  v77 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v76);

  *(_QWORD *)(v47 + 104) = v77;
  v78 = objc_msgSend(v41, sel_leadingAnchor);
  v79 = objc_msgSend(v45, sel_leadingAnchor);
  v80 = objc_msgSend(v78, sel_constraintEqualToAnchor_, v79);

  *(_QWORD *)(v47 + 112) = v80;
  v81 = objc_msgSend(v41, sel_trailingAnchor);
  v82 = objc_msgSend(v45, sel_trailingAnchor);
  v83 = objc_msgSend(v81, sel_constraintEqualToAnchor_, v82);

  *(_QWORD *)(v47 + 120) = v83;
  v84 = objc_msgSend(v41, sel_bottomAnchor);
  v85 = objc_msgSend(v45, sel_bottomAnchor);
  v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_, v85);

  *(_QWORD *)(v47 + 128) = v86;
  v99 = v47;
  sub_1BB872DCC();
  sub_1BA49A224(0, (unint64_t *)&qword_1EF2C1570);
  v87 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  objc_msgSend(v89, sel_activateConstraints_, v87);
  sub_1BA49EBE0(v90);

  swift_unknownObjectRelease();
  return (uint64_t)v44;
}

uint64_t type metadata accessor for PuzzleButtonsAccessoryView()
{
  return objc_opt_self();
}

uint64_t method lookup function for PuzzleButtonsAccessoryView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PuzzleButtonsAccessoryView.__allocating_init(identifier:minHeight:buttonsConfig:provider:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1BA87F7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v9;
  uint64_t ObjectType;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (*v29)(_OWORD *, uint64_t *(*)(uint64_t *), _QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _OWORD v33[7];
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v44 = a6;
  result = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    ObjectType = swift_getObjectType();
    v29 = *(uint64_t (**)(_OWORD *, uint64_t *(*)(uint64_t *), _QWORD *, uint64_t, uint64_t))(a3 + 16);
    v30 = ObjectType;
    v14 = *(_OWORD *)(a1 + 144);
    v41 = *(_OWORD *)(a1 + 128);
    v42[0] = v14;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)(a1 + 153);
    v15 = *(_OWORD *)(a1 + 80);
    v37 = *(_OWORD *)(a1 + 64);
    v38 = v15;
    v16 = *(_OWORD *)(a1 + 112);
    v39 = *(_OWORD *)(a1 + 96);
    v40 = v16;
    v17 = v9 - 1;
    v18 = *(_OWORD *)(a1 + 48);
    v31 = a1;
    v19 = 176;
    v35 = *(_OWORD *)(a1 + 32);
    v36 = v18;
    while (1)
    {
      v33[6] = v41;
      v34[0] = v42[0];
      *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v42 + 9);
      v33[2] = v37;
      v33[3] = v38;
      v33[4] = v39;
      v33[5] = v40;
      v33[0] = v35;
      v33[1] = v36;
      v20 = (_QWORD *)swift_allocObject();
      v20[2] = a4;
      v20[3] = a5;
      v20[4] = v44;
      v20[5] = a7;
      swift_bridgeObjectRetain();
      sub_1BA880110((uint64_t)&v35);
      sub_1BA4BEB58(a4);
      v21 = a3;
      v22 = v29(v33, sub_1BA880104, v20, v30, a3);
      swift_release();
      v23 = sub_1BA8801B4((uint64_t)&v35);
      if (v22)
      {
        MEMORY[0x1BCCE36AC](v23);
        if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();
      }
      if (!v17)
        break;
      v24 = *(_OWORD *)(v31 + v19 + 112);
      v41 = *(_OWORD *)(v31 + v19 + 96);
      v42[0] = v24;
      *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)(v31 + v19 + 121);
      v25 = *(_OWORD *)(v31 + v19 + 48);
      v37 = *(_OWORD *)(v31 + v19 + 32);
      v38 = v25;
      v26 = *(_OWORD *)(v31 + v19 + 80);
      v39 = *(_OWORD *)(v31 + v19 + 64);
      v40 = v26;
      v28 = *(_OWORD *)(v31 + v19);
      v27 = *(_OWORD *)(v31 + v19 + 16);
      v19 += 144;
      --v17;
      v35 = v28;
      v36 = v27;
      a3 = v21;
    }
    swift_bridgeObjectRelease();
    return v43;
  }
  return result;
}

void *sub_1BA87F9DC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63[8];
  uint64_t v64;

  v54 = a6;
  v55 = a7;
  v47 = a5;
  v48 = a4;
  v52 = a1;
  v53 = a2;
  v8 = sub_1BB86C238();
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BB86C244();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1BB86C25C();
  MEMORY[0x1E0C80A78](v15);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D2E70, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v46 - v17;
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1EF2B6ED0, (void (*)(uint64_t))MEMORY[0x1E0CAF240]);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v46 - v20;
  v22 = sub_1BB8739CC();
  v57 = *(_QWORD *)(v22 - 8);
  v58 = v22;
  MEMORY[0x1E0C80A78](v22);
  v51 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v25 = a3[1];
  v59 = *a3;
  v60 = v25;
  v61 = a3[2];
  v62 = *((_QWORD *)a3 + 6);
  v56 = (char *)&v46 - v26;
  sub_1BB873984();
  v27 = sub_1BB86C67C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v18, 1, 1, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0CAF048], v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v10, *MEMORY[0x1E0CAF020], v50);
  swift_bridgeObjectRetain();
  sub_1BB86C250();
  sub_1BB86C2EC();
  v28 = sub_1BB86C304();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v21, 0, 1, v28);
  v29 = v56;
  sub_1BB873954();
  v31 = v54;
  v30 = v55;
  v32 = v52;
  v33 = v58;
  if (*((_QWORD *)&v61 + 1))
  {
    swift_bridgeObjectRetain();
    v34 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    v35 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v34);

    sub_1BB87399C();
  }
  v36 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  sub_1BB87396C();
  sub_1BA49A224(0, &qword_1EF2A96B0);
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v51, v29, v33);
  sub_1BA49A224(0, (unint64_t *)&qword_1EF2BCFF0);
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v31;
  *(_QWORD *)(v37 + 24) = v30;
  v38 = v53;
  *(_QWORD *)(v37 + 32) = v32;
  *(_QWORD *)(v37 + 40) = v38;
  v39 = v60;
  *(_OWORD *)(v37 + 48) = v59;
  *(_OWORD *)(v37 + 64) = v39;
  v40 = v61;
  *(_QWORD *)(v37 + 96) = v62;
  *(_OWORD *)(v37 + 80) = v40;
  swift_bridgeObjectRetain();
  sub_1BA4BEB58(v31);
  sub_1BA87FFD0((uint64_t)&v59);
  sub_1BB8738F4();
  v41 = (void *)sub_1BB8739D8();
  sub_1BA880020((uint64_t)&v62, (uint64_t)v63);
  sub_1BA880020((uint64_t)v63, (uint64_t)&v64);
  v42 = v64;
  if (v64)
  {
    swift_bridgeObjectRetain();
    sub_1BA4BEB58(v31);
    v43 = v48;
    swift_unknownObjectRetain();
    sub_1BA87F7D4(v42, v43, v47, v31, v30, v32, v38);
    swift_bridgeObjectRelease();
    sub_1BA49EBE0(v31);
    swift_unknownObjectRelease();
    sub_1BA49A224(0, &qword_1EF2B7EB0);
    v44 = (void *)sub_1BB8736B4();
    objc_msgSend(v41, sel_setShowsMenuAsPrimaryAction_, 1);
    objc_msgSend(v41, sel_setMenu_, v44);

  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  return v41;
}

uint64_t sub_1BA87FF6C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BA87FFC0(uint64_t a1)
{
  uint64_t v1;

  return sub_1BA87ECB8(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t *)(v1 + 48));
}

uint64_t sub_1BA87FFD0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BA880020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA880064();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BA880064()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A96B8)
  {
    sub_1BA4AD288(255, &qword_1EF2A96C0, (uint64_t)&type metadata for PuzzleMenuConfig, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A96B8);
  }
}

uint64_t sub_1BA8800D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t *sub_1BA880104(uint64_t *a1)
{
  uint64_t v1;

  return sub_1BA87ED2C(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1BA880110(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BA8801B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1BA880258@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *result;
  __int128 v14[3];
  uint64_t v15;

  v5 = v2[2];
  v4 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v14[0] = *(_QWORD *)a1;
  *((_QWORD *)&v14[0] + 1) = v10;
  v12 = *(_OWORD *)(a1 + 32);
  v14[1] = *(_OWORD *)(a1 + 16);
  v14[2] = v12;
  v15 = v11;
  result = sub_1BA87F9DC(v5, v4, v14, v6, v7, v8, v9);
  *a2 = result;
  return result;
}

uint64_t sub_1BA8802C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 32);
    v4 = (uint64_t *)(a2 + 32);
    do
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *v4++;
      v7 = v8;
      if (v5 < 0)
      {
        if ((v7 & 0x8000000000000000) == 0)
          return 0;
        v17 = *(_QWORD *)(v5 + 16) == *(_QWORD *)(v7 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(v7 + 24);
        if (!v17 && (sub_1BB874398() & 1) == 0)
          return 0;
      }
      else
      {
        if (v7 < 0)
          return 0;
        v9 = *(_QWORD *)(v5 + 16);
        v10 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v9 + 16) == *(_QWORD *)(v10 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v10 + 24);
        if (!v11 && (sub_1BB874398() & 1) == 0)
          return 0;
        v12 = *(_QWORD *)(v9 + 32);
        v13 = *(_QWORD *)(v10 + 32);
        swift_retain_n();
        swift_retain();
        if ((sub_1BA9D0488(v12, v13) & 1) == 0 || *(unsigned __int8 *)(v9 + 40) != *(unsigned __int8 *)(v10 + 40))
        {
          swift_release();
          swift_release_n();
          return 0;
        }
        swift_beginAccess();
        v14 = *(_QWORD *)(v5 + 24);
        swift_beginAccess();
        v15 = *(_QWORD *)(v7 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = sub_1BA8802C0(v14, v15);
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          return 0;
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_1BA880468(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v43;
  _BOOL8 result;
  _QWORD v45[7];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v45 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v45[4] = 0;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v46 = *(_QWORD *)(v8 + 72);
    v47 = a1;
    v13 = v11 - 1;
    v48 = a2;
    while (1)
    {
      sub_1BA4C2DD8(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      sub_1BA4C2DD8(a2 + v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      if ((sub_1BB86C868() & 1) == 0)
        break;
      v14 = v4[5];
      v15 = *(_QWORD *)&v10[v14];
      v16 = *(_QWORD *)&v10[v14 + 8];
      v17 = &v6[v14];
      v18 = v15 == *(_QWORD *)v17 && v16 == *((_QWORD *)v17 + 1);
      if (!v18 && (sub_1BB874398() & 1) == 0)
        break;
      v19 = v4[6];
      v20 = *(_QWORD *)&v10[v19];
      v21 = *(_QWORD *)&v10[v19 + 8];
      v23 = *(_QWORD *)&v10[v19 + 16];
      v22 = *(_QWORD *)&v10[v19 + 24];
      v24 = &v6[v19];
      v25 = *((_QWORD *)v24 + 1);
      v26 = *((_QWORD *)v24 + 2);
      v27 = *((_QWORD *)v24 + 3);
      v28 = v20 == *(_QWORD *)v24 && v21 == v25;
      v49 = *((_QWORD *)v24 + 2);
      if (!v28)
      {
        v29 = v10;
        v30 = v6;
        v31 = v12;
        v32 = v13;
        v33 = v22;
        v34 = v4;
        v35 = v27;
        v36 = v23;
        v37 = v25;
        v38 = sub_1BB874398();
        v25 = v37;
        v23 = v36;
        v27 = v35;
        v4 = v34;
        v22 = v33;
        v13 = v32;
        v12 = v31;
        v6 = v30;
        v10 = v29;
        v26 = v49;
        if ((v38 & 1) == 0)
          break;
      }
      if (v22 >> 60 != 15)
      {
        if (v27 >> 60 != 15)
        {
          v45[5] = v25;
          v45[6] = v21;
          __asm { BR              X8 }
        }
LABEL_29:
        sub_1BA86B484(v23, v22);
        sub_1BA86B484(v26, v27);
        sub_1BA69D490(v23, v22);
        sub_1BA69D490(v26, v27);
        break;
      }
      if (v27 >> 60 != 15)
        goto LABEL_29;
      if (*(_QWORD *)&v10[v4[7]] != *(_QWORD *)&v6[v4[7]])
        break;
      v39 = v4[8];
      v40 = *(_QWORD *)&v10[v39];
      v41 = *(_QWORD *)&v6[v39];
      sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      v43 = v13-- != 0;
      result = v40 == v41;
      if (v40 == v41)
      {
        a1 = v47;
        v12 += v46;
        a2 = v48;
        if (v43)
          continue;
      }
      return result;
    }
    sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
  }
  return 0;
}

uint64_t sub_1BA880C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v15;
  uint64_t result;
  BOOL v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unsigned __int8 *)(a2 + 48);
  for (i = (unsigned __int8 *)(a1 + 48); ; i += 24)
  {
    v7 = *((_QWORD *)i - 2);
    v8 = *((_QWORD *)i - 1);
    v9 = *i;
    v10 = *((_QWORD *)v3 - 2);
    v11 = *((_QWORD *)v3 - 1);
    v12 = *v3;
    if (!(v9 >> 6))
    {
      if (v12 >= 0x40)
        goto LABEL_125;
      if (v7 == v10 && v8 == v11)
      {
        sub_1BA895B64(*((_QWORD *)i - 2), *((_QWORD *)i - 1), *i);
        sub_1BA895B64(v7, v8, v12);
        sub_1BA895B84(v7, v8, v9);
        sub_1BA895B84(v7, v8, v12);
        if (((v9 ^ v12) & 1) != 0)
          return 0;
      }
      else
      {
        v15 = sub_1BB874398();
        sub_1BA895B64(v7, v8, v9);
        sub_1BA895B64(v10, v11, v12);
        sub_1BA895B84(v7, v8, v9);
        sub_1BA895B84(v10, v11, v12);
        result = 0;
        if ((v15 & 1) == 0 || ((v9 ^ v12) & 1) != 0)
          return result;
      }
      goto LABEL_7;
    }
    if (v9 >> 6 != 1)
      break;
    if ((v12 & 0xC0) != 0x40)
      goto LABEL_125;
    switch(v8)
    {
      case 0uLL:
        if (v11)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0, *v3);
        sub_1BA895B64(v10, 0, v12);
        sub_1BA895B64(v7, 0, v9);
        sub_1BA895B64(v10, 0, v12);
        sub_1BA766C18(v7, 0);
        sub_1BA766C18(v10, 0);
        sub_1BA895B84(v7, 0, v9);
        sub_1BA895B84(v10, 0, v12);
        sub_1BA895B84(v10, 0, v12);
        sub_1BA895B84(v7, 0, v9);
        sub_1BA895B84(v10, 0, v12);
        v13 = v7;
        v5 = 0;
        v6 = v9;
        goto LABEL_6;
      case 1uLL:
        if (v11 != 1)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 1uLL, *v3);
        sub_1BA895B64(v10, 1uLL, v12);
        sub_1BA895B64(v7, 1uLL, v9);
        sub_1BA895B64(v10, 1uLL, v12);
        sub_1BA766C18(v7, 1uLL);
        sub_1BA766C18(v10, 1uLL);
        sub_1BA895B84(v7, 1uLL, v9);
        sub_1BA895B84(v10, 1uLL, v12);
        sub_1BA895B84(v10, 1uLL, v12);
        sub_1BA895B84(v7, 1uLL, v9);
        sub_1BA895B84(v10, 1uLL, v12);
        v13 = v7;
        v5 = 1;
        v6 = v9;
        goto LABEL_6;
      case 2uLL:
        if (v11 != 2)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 2uLL, *v3);
        sub_1BA895B64(v10, 2uLL, v12);
        sub_1BA895B64(v7, 2uLL, v9);
        sub_1BA895B64(v10, 2uLL, v12);
        sub_1BA766C18(v7, 2uLL);
        sub_1BA766C18(v10, 2uLL);
        sub_1BA895B84(v7, 2uLL, v9);
        sub_1BA895B84(v10, 2uLL, v12);
        sub_1BA895B84(v10, 2uLL, v12);
        sub_1BA895B84(v7, 2uLL, v9);
        sub_1BA895B84(v10, 2uLL, v12);
        v13 = v7;
        v5 = 2;
        v6 = v9;
        goto LABEL_6;
      case 3uLL:
        if (v11 != 3)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 3uLL, *v3);
        sub_1BA895B64(v10, 3uLL, v12);
        sub_1BA895B64(v7, 3uLL, v9);
        sub_1BA895B64(v10, 3uLL, v12);
        sub_1BA766C18(v7, 3uLL);
        sub_1BA766C18(v10, 3uLL);
        sub_1BA895B84(v7, 3uLL, v9);
        sub_1BA895B84(v10, 3uLL, v12);
        sub_1BA895B84(v10, 3uLL, v12);
        sub_1BA895B84(v7, 3uLL, v9);
        sub_1BA895B84(v10, 3uLL, v12);
        v13 = v7;
        v5 = 3;
        v6 = v9;
        goto LABEL_6;
      case 4uLL:
        if (v11 != 4)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 4uLL, *v3);
        sub_1BA895B64(v10, 4uLL, v12);
        sub_1BA895B64(v7, 4uLL, v9);
        sub_1BA895B64(v10, 4uLL, v12);
        sub_1BA766C18(v7, 4uLL);
        sub_1BA766C18(v10, 4uLL);
        sub_1BA895B84(v7, 4uLL, v9);
        sub_1BA895B84(v10, 4uLL, v12);
        sub_1BA895B84(v10, 4uLL, v12);
        sub_1BA895B84(v7, 4uLL, v9);
        sub_1BA895B84(v10, 4uLL, v12);
        v13 = v7;
        v5 = 4;
        v6 = v9;
        goto LABEL_6;
      case 5uLL:
        if (v11 != 5)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 5uLL, *v3);
        sub_1BA895B64(v10, 5uLL, v12);
        sub_1BA895B64(v7, 5uLL, v9);
        sub_1BA895B64(v10, 5uLL, v12);
        sub_1BA766C18(v7, 5uLL);
        sub_1BA766C18(v10, 5uLL);
        sub_1BA895B84(v7, 5uLL, v9);
        sub_1BA895B84(v10, 5uLL, v12);
        sub_1BA895B84(v10, 5uLL, v12);
        sub_1BA895B84(v7, 5uLL, v9);
        sub_1BA895B84(v10, 5uLL, v12);
        v13 = v7;
        v5 = 5;
        v6 = v9;
        goto LABEL_6;
      case 6uLL:
        if (v11 != 6)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 6uLL, *v3);
        sub_1BA895B64(v10, 6uLL, v12);
        sub_1BA895B64(v7, 6uLL, v9);
        sub_1BA895B64(v10, 6uLL, v12);
        sub_1BA766C18(v7, 6uLL);
        sub_1BA766C18(v10, 6uLL);
        sub_1BA895B84(v7, 6uLL, v9);
        sub_1BA895B84(v10, 6uLL, v12);
        sub_1BA895B84(v10, 6uLL, v12);
        sub_1BA895B84(v7, 6uLL, v9);
        sub_1BA895B84(v10, 6uLL, v12);
        v13 = v7;
        v5 = 6;
        v6 = v9;
        goto LABEL_6;
      case 7uLL:
        if (v11 != 7)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 7uLL, *v3);
        sub_1BA895B64(v10, 7uLL, v12);
        sub_1BA895B64(v7, 7uLL, v9);
        sub_1BA895B64(v10, 7uLL, v12);
        sub_1BA766C18(v7, 7uLL);
        sub_1BA766C18(v10, 7uLL);
        sub_1BA895B84(v7, 7uLL, v9);
        sub_1BA895B84(v10, 7uLL, v12);
        sub_1BA895B84(v10, 7uLL, v12);
        sub_1BA895B84(v7, 7uLL, v9);
        sub_1BA895B84(v10, 7uLL, v12);
        v13 = v7;
        v5 = 7;
        v6 = v9;
        goto LABEL_6;
      case 8uLL:
        if (v11 != 8)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 8uLL, *v3);
        sub_1BA895B64(v10, 8uLL, v12);
        sub_1BA895B64(v7, 8uLL, v9);
        sub_1BA895B64(v10, 8uLL, v12);
        sub_1BA766C18(v7, 8uLL);
        sub_1BA766C18(v10, 8uLL);
        sub_1BA895B84(v7, 8uLL, v9);
        sub_1BA895B84(v10, 8uLL, v12);
        sub_1BA895B84(v10, 8uLL, v12);
        sub_1BA895B84(v7, 8uLL, v9);
        sub_1BA895B84(v10, 8uLL, v12);
        v13 = v7;
        v5 = 8;
        v6 = v9;
        goto LABEL_6;
      case 9uLL:
        if (v11 != 9)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 9uLL, *v3);
        sub_1BA895B64(v10, 9uLL, v12);
        sub_1BA895B64(v7, 9uLL, v9);
        sub_1BA895B64(v10, 9uLL, v12);
        sub_1BA766C18(v7, 9uLL);
        sub_1BA766C18(v10, 9uLL);
        sub_1BA895B84(v7, 9uLL, v9);
        sub_1BA895B84(v10, 9uLL, v12);
        sub_1BA895B84(v10, 9uLL, v12);
        sub_1BA895B84(v7, 9uLL, v9);
        sub_1BA895B84(v10, 9uLL, v12);
        v13 = v7;
        v5 = 9;
        v6 = v9;
        goto LABEL_6;
      case 0xAuLL:
        if (v11 != 10)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0xAuLL, *v3);
        sub_1BA895B64(v10, 0xAuLL, v12);
        sub_1BA895B64(v7, 0xAuLL, v9);
        sub_1BA895B64(v10, 0xAuLL, v12);
        sub_1BA766C18(v7, 0xAuLL);
        sub_1BA766C18(v10, 0xAuLL);
        sub_1BA895B84(v7, 0xAuLL, v9);
        sub_1BA895B84(v10, 0xAuLL, v12);
        sub_1BA895B84(v10, 0xAuLL, v12);
        sub_1BA895B84(v7, 0xAuLL, v9);
        sub_1BA895B84(v10, 0xAuLL, v12);
        v13 = v7;
        v5 = 10;
        v6 = v9;
        goto LABEL_6;
      case 0xBuLL:
        if (v11 != 11)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0xBuLL, *v3);
        sub_1BA895B64(v10, 0xBuLL, v12);
        sub_1BA895B64(v7, 0xBuLL, v9);
        sub_1BA895B64(v10, 0xBuLL, v12);
        sub_1BA766C18(v7, 0xBuLL);
        sub_1BA766C18(v10, 0xBuLL);
        sub_1BA895B84(v7, 0xBuLL, v9);
        sub_1BA895B84(v10, 0xBuLL, v12);
        sub_1BA895B84(v10, 0xBuLL, v12);
        sub_1BA895B84(v7, 0xBuLL, v9);
        sub_1BA895B84(v10, 0xBuLL, v12);
        v13 = v7;
        v5 = 11;
        v6 = v9;
        goto LABEL_6;
      case 0xCuLL:
        if (v11 != 12)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0xCuLL, *v3);
        sub_1BA895B64(v10, 0xCuLL, v12);
        sub_1BA895B64(v7, 0xCuLL, v9);
        sub_1BA895B64(v10, 0xCuLL, v12);
        sub_1BA766C18(v7, 0xCuLL);
        sub_1BA766C18(v10, 0xCuLL);
        sub_1BA895B84(v7, 0xCuLL, v9);
        sub_1BA895B84(v10, 0xCuLL, v12);
        sub_1BA895B84(v10, 0xCuLL, v12);
        sub_1BA895B84(v7, 0xCuLL, v9);
        sub_1BA895B84(v10, 0xCuLL, v12);
        v13 = v7;
        v5 = 12;
        v6 = v9;
        goto LABEL_6;
      case 0xDuLL:
        if (v11 != 13)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0xDuLL, *v3);
        sub_1BA895B64(v10, 0xDuLL, v12);
        sub_1BA895B64(v7, 0xDuLL, v9);
        sub_1BA895B64(v10, 0xDuLL, v12);
        sub_1BA766C18(v7, 0xDuLL);
        sub_1BA766C18(v10, 0xDuLL);
        sub_1BA895B84(v7, 0xDuLL, v9);
        sub_1BA895B84(v10, 0xDuLL, v12);
        sub_1BA895B84(v10, 0xDuLL, v12);
        sub_1BA895B84(v7, 0xDuLL, v9);
        sub_1BA895B84(v10, 0xDuLL, v12);
        v13 = v7;
        v5 = 13;
        v6 = v9;
        goto LABEL_6;
      case 0xEuLL:
        if (v11 != 14)
          goto LABEL_121;
        sub_1BA895B64(*((_QWORD *)v3 - 2), 0xEuLL, *v3);
        sub_1BA895B64(v10, 0xEuLL, v12);
        sub_1BA895B64(v7, 0xEuLL, v9);
        sub_1BA895B64(v10, 0xEuLL, v12);
        sub_1BA766C18(v7, 0xEuLL);
        sub_1BA766C18(v10, 0xEuLL);
        sub_1BA895B84(v7, 0xEuLL, v9);
        sub_1BA895B84(v10, 0xEuLL, v12);
        sub_1BA895B84(v10, 0xEuLL, v12);
        sub_1BA895B84(v7, 0xEuLL, v9);
        sub_1BA895B84(v10, 0xEuLL, v12);
        v13 = v7;
        v5 = 14;
        v6 = v9;
        goto LABEL_6;
      default:
        if (v11 < 0xF)
        {
          sub_1BA895B64(*((_QWORD *)i - 2), *((_QWORD *)i - 1), *i);
LABEL_121:
          sub_1BA895B64(v10, v11, v12);
          sub_1BA895B64(v10, v11, v12);
          sub_1BA895B64(v7, v8, v9);
          sub_1BA895B64(v7, v8, v9);
          sub_1BA895B64(v10, v11, v12);
          sub_1BA895B64(v7, v8, v9);
          sub_1BA895B64(v10, v11, v12);
          sub_1BA766C18(v7, v8);
          sub_1BA766C18(v10, v11);
          sub_1BA895B84(v7, v8, v9);
          sub_1BA895B84(v10, v11, v12);
          sub_1BA895B84(v10, v11, v12);
          sub_1BA895B84(v7, v8, v9);
          sub_1BA895B84(v10, v11, v12);
          v20 = v7;
          v21 = v8;
          v22 = v9;
          goto LABEL_126;
        }
        if (v7 == v10 && v8 == v11)
          v19 = 1;
        else
          v19 = sub_1BB874398();
        sub_1BA895B64(v10, v11, v12);
        sub_1BA895B64(v7, v8, v9);
        sub_1BA895B64(v10, v11, v12);
        sub_1BA895B64(v7, v8, v9);
        sub_1BA895B64(v7, v8, v9);
        sub_1BA895B64(v10, v11, v12);
        sub_1BA895B64(v7, v8, v9);
        sub_1BA895B64(v10, v11, v12);
        sub_1BA766C18(v7, v8);
        sub_1BA766C18(v10, v11);
        sub_1BA895B84(v7, v8, v9);
        sub_1BA895B84(v10, v11, v12);
        sub_1BA895B84(v10, v11, v12);
        sub_1BA895B84(v7, v8, v9);
        sub_1BA895B84(v10, v11, v12);
        sub_1BA895B84(v7, v8, v9);
        if ((v19 & 1) == 0)
          return 0;
        break;
    }
LABEL_7:
    v3 += 24;
    if (!--v2)
      return 1;
  }
  if (!(v8 | v7) && v9 == 128)
  {
    v17 = (v12 & 0xC0) == 0x80 && (v11 | v10) == 0;
    if (!v17 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(0, 0, 0x80u);
    v13 = 0;
    goto LABEL_5;
  }
  v18 = v7 == 1 && v8 == 0;
  if (v18 && v9 == 128)
  {
    if ((v12 & 0xC0) != 0x80)
    {
      v8 = 0;
      v7 = 1;
      goto LABEL_125;
    }
    v8 = 0;
    v7 = 1;
    if (v10 != 1 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(1, 0, 0x80u);
    v13 = 1;
    goto LABEL_5;
  }
  if (v7 == 2 && !v8 && v9 == 128)
  {
    if ((v12 & 0xC0) != 0x80)
    {
      v8 = 0;
      v7 = 2;
      goto LABEL_125;
    }
    v8 = 0;
    v7 = 2;
    if (v10 != 2 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(2, 0, 0x80u);
    v13 = 2;
    goto LABEL_5;
  }
  if (v7 == 3 && !v8 && v9 == 128)
  {
    if ((v12 & 0xC0) != 0x80)
    {
      v8 = 0;
      v7 = 3;
      goto LABEL_125;
    }
    v8 = 0;
    v7 = 3;
    if (v10 != 3 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(3, 0, 0x80u);
    v13 = 3;
    goto LABEL_5;
  }
  if (v7 == 4 && !v8 && v9 == 128)
  {
    if ((v12 & 0xC0) != 0x80)
    {
      v8 = 0;
      v7 = 4;
      goto LABEL_125;
    }
    v8 = 0;
    v7 = 4;
    if (v10 != 4 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(4, 0, 0x80u);
    v13 = 4;
    goto LABEL_5;
  }
  if (v7 == 5 && !v8 && v9 == 128)
  {
    if ((v12 & 0xC0) != 0x80)
    {
      v8 = 0;
      v7 = 5;
      goto LABEL_125;
    }
    v8 = 0;
    v7 = 5;
    if (v10 != 5 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(5, 0, 0x80u);
    v13 = 5;
    goto LABEL_5;
  }
  if ((v12 & 0xC0) == 0x80)
  {
    v8 = 0;
    v7 = 6;
    if (v10 != 6 || v11 || v12 != 128)
      goto LABEL_125;
    sub_1BA895B84(6, 0, 0x80u);
    v13 = 6;
LABEL_5:
    v5 = 0;
    v6 = 0x80;
LABEL_6:
    sub_1BA895B84(v13, v5, v6);
    goto LABEL_7;
  }
  v8 = 0;
  v7 = 6;
LABEL_125:
  sub_1BA895B64(v7, v8, *i);
  sub_1BA895B64(v10, v11, v12);
  sub_1BA895B84(v7, v8, v9);
  v20 = v10;
  v21 = v11;
  v22 = v12;
LABEL_126:
  sub_1BA895B84(v20, v21, v22);
  return 0;
}

uint64_t sub_1BA881DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  __int128 v9;
  char v10;
  BOOL v12;
  _OWORD v14[2];
  uint64_t v15;
  int v16;
  __int16 v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v10 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (__int128 *)(a1 + 48);
      v5 = a2 + 72;
      do
      {
        v6 = *((_QWORD *)v4 + 2);
        v7 = *((_DWORD *)v4 + 6);
        v8 = *((_WORD *)v4 + 14);
        v9 = *v4;
        v14[0] = *(v4 - 1);
        v14[1] = v9;
        v15 = v6;
        v17 = v8;
        v16 = v7;
        sub_1BB68B574((uint64_t)v14);
        v12 = v3-- != 0;
        if ((v10 & 1) == 0)
          break;
        v4 += 3;
        v5 += 48;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1BA881EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unsigned __int8 *)(a1 + 40);
  for (i = (unsigned __int8 *)(a2 + 40); ; i += 16)
  {
    v5 = *((_QWORD *)v3 - 1);
    v6 = *v3;
    v7 = *((_QWORD *)i - 1);
    v8 = *i;
    if (v6 != 1)
      break;
    if ((v8 & 1) == 0)
    {
      swift_retain_n();
      goto LABEL_17;
    }
    if ((0x29282F2A2D2BuLL >> (8 * v5)) != (0x29282F2A2D2BuLL >> (8 * v7)))
      return 0;
LABEL_5:
    v3 += 16;
    if (!--v2)
      return 1;
  }
  v12 = *((_QWORD *)v3 - 1);
  v13 = 0;
  if (!v8)
  {
    sub_1BA7E8124(v5, 0);
    sub_1BA7E8124(v5, 0);
    sub_1BA7E8124(v5, 0);
    sub_1BA7E8124(v7, 0);
    static FormatFloat.== infix(_:_:)((uint64_t)&v12);
    v10 = v9;
    swift_release();
    sub_1BA72C46C(v5, 0);
    sub_1BA72C46C(v7, 0);
    sub_1BA72C46C(v5, 0);
    if ((v10 & 1) == 0)
      return 0;
    goto LABEL_5;
  }
  sub_1BA7E8124(v5, 0);
  sub_1BA7E8124(v5, 0);
LABEL_17:
  sub_1BA72C46C(v5, v6);
  sub_1BA72C46C(v7, v6 ^ 1);
  sub_1BA72C46C(v7, v6 ^ 1);
  sub_1BA72C46C(v5, v6);
  return 0;
}

uint64_t sub_1BA882058(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSubgroup, (uint64_t (*)(char *, char *))static FormatContentSubgroup.== infix(_:_:));
}

uint64_t sub_1BA88206C(uint64_t a1, uint64_t a2)
{
  return sub_1BA891D40(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static FormatContentSubgroupFilter.== infix(_:_:));
}

uint64_t sub_1BA882078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      v9 = *(v3 - 1);
      v8 = *v3;
      if (*(v4 - 3) == *(v3 - 3) && *(v4 - 2) == *(v3 - 2))
      {
        if (v7 != v9 || v6 != v8)
          return 0;
      }
      else
      {
        v11 = sub_1BB874398();
        result = 0;
        if ((v11 & 1) == 0)
          return result;
        if (v7 != v9 || v6 != v8)
          return result;
      }
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1BA882138(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for LiveActivityWebEmbedDatastore.LiveActivity, (uint64_t (*)(char *, char *))static LiveActivityWebEmbedDatastore.LiveActivity.== infix(_:_:));
}

uint64_t sub_1BA88214C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        sub_1BA4C2DD8(a1 + v16, (uint64_t)v14, a3);
        sub_1BA4C2DD8(a2 + v16, (uint64_t)v10, a3);
        v19 = a4(v14, v10);
        sub_1BA4A2E80((uint64_t)v10, a3);
        sub_1BA4A2E80((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_1BA882288(uint64_t a1, uint64_t a2)
{
  return sub_1BA748C14(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D60D48], &qword_1EF2C4F80, MEMORY[0x1E0D60D68]);
}

uint64_t sub_1BA8822A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    if (a1 != a2)
    {
      v4 = 0;
      v17 = a1;
      while (1)
      {
        v5 = *(_QWORD *)(a1 + v4 + 48);
        v6 = *(_QWORD *)(a1 + v4 + 56);
        v7 = *(_QWORD *)(a1 + v4 + 64);
        v8 = *(_QWORD *)(a1 + v4 + 72);
        v9 = *(_QWORD *)(v3 + v4 + 48);
        v10 = *(_QWORD *)(v3 + v4 + 56);
        v11 = *(_QWORD *)(v3 + v4 + 64);
        v12 = *(_QWORD *)(v3 + v4 + 72);
        v13 = *(_QWORD *)(a1 + v4 + 32) == *(_QWORD *)(v3 + v4 + 32)
           && *(_QWORD *)(a1 + v4 + 40) == *(_QWORD *)(v3 + v4 + 40);
        if (!v13 && (sub_1BB874398() & 1) == 0)
          break;
        v14 = v5 == v9 && v6 == v10;
        if (!v14 && (sub_1BB874398() & 1) == 0)
          break;
        v15 = v7 == v11 && v8 == v12;
        if (!v15 && (sub_1BB874398() & 1) == 0)
          break;
        v4 += 48;
        --v2;
        a1 = v17;
        v3 = a2;
        if (!v2)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1BA8823B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a2[4];
  swift_retain();
  swift_retain();
  LOBYTE(v5) = sub_1BAA736F8(v5, v6);
  swift_release();
  swift_release();
  if ((v5 & 1) == 0)
    return 0;
  v7 = a1 + 5;
  v8 = a2 + 5;
  v9 = v2 - 1;
  do
  {
    v10 = v9 == 0;
    if (!v9)
      break;
    v12 = *v7++;
    v11 = v12;
    v13 = *v8++;
    swift_retain();
    swift_retain();
    LOBYTE(v11) = sub_1BAA736F8(v11, v13);
    swift_release();
    swift_release();
    --v9;
  }
  while ((v11 & 1) != 0);
  return v10;
}

void sub_1BA8824C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16) && v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a2 + 32;
    v22 = a2 + 32;
    v23 = a1 + 32;
    while (1)
    {
      v5 = (_QWORD *)(v23 + 48 * v3);
      v6 = v5[3];
      v25 = v5[2];
      v26 = v5[4];
      v24 = v5[5];
      v7 = (_QWORD *)(v4 + 48 * v3);
      v8 = v7[2];
      v9 = v7[3];
      v10 = v7[4];
      v11 = v7[5];
      if (*v5 != *v7 || v5[1] != v7[1])
      {
        v4 = v22;
        if ((sub_1BB874398() & 1) == 0)
          break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v13 = v10;
      swift_bridgeObjectRetain();
      v14 = v11;
      swift_bridgeObjectRetain();
      v15 = sub_1BA8880B0(v25, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0 || (v16 = *(_QWORD *)(v6 + 16), v16 != *(_QWORD *)(v9 + 16)))
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
        v17 = v6 == v9;
      else
        v17 = 1;
      if (!v17)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = 0;
        while (1)
        {
          v27 = *(_QWORD *)(v6 + 8 * v18 + 32);
          if (v18 >= *(_QWORD *)(v9 + 16))
            break;
          static FormatSlotTransform.== infix(_:_:)((uint64_t)&v27);
          if ((v19 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            return;
          }
          if (v16 == ++v18)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
        }
        __break(1u);
        return;
      }
LABEL_21:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = sub_1BA887CA8(v26, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
        goto LABEL_27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = sub_1BA6EB330(v24, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if ((v21 & 1) != 0 && ++v3 != v2)
        continue;
      return;
    }
  }
}

uint64_t sub_1BA882848(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, type metadata accessor for FormatCompilerProperty, (uint64_t (*)(char *, char *))_s8NewsFeed22FormatCompilerPropertyO2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1BA88285C(uint64_t a1, uint64_t a2)
{
  return sub_1BA891D40(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))static FormatSlotTransform.== infix(_:_:));
}

uint64_t sub_1BA88286C(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet, (uint64_t (*)(char *, char *))_s8NewsFeed27FormatSlotDefinitionItemSetV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1BA882880(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, type metadata accessor for FormatPropertyDefinition, (uint64_t (*)(char *, char *))static FormatPropertyDefinition.== infix(_:_:));
}

BOOL sub_1BA882894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  BOOL v11;
  BOOL v13;
  uint64_t v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int16 v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_WORD *)(a1 + v5 + 56);
        v8 = *(_QWORD *)(a1 + v5 + 64);
        v19 = *(_QWORD *)(a1 + v5 + 32);
        v20 = *(_OWORD *)(a1 + v5 + 40);
        v21 = v7;
        v22 = v8;
        v9 = *(_WORD *)(a2 + v5 + 56);
        v10 = *(_QWORD *)(a2 + v5 + 64);
        v15 = *(_QWORD *)(a2 + v5 + 32);
        v16 = *(_OWORD *)(a2 + v5 + 40);
        v17 = v9;
        v18 = v10;
        v11 = _s8NewsFeed12FormatBorderV2eeoiySbAC_ACtFZ_0((uint64_t)&v19, (uint64_t)&v15);
        v13 = v6-- != 0;
        if (!v11)
          break;
        v5 += 40;
      }
      while (v13);
    }
  }
  else
  {
    return 0;
  }
  return v11;
}

BOOL sub_1BA882964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (_QWORD *)(a1 + 48);
      v5 = (_QWORD *)(a2 + 48);
      do
      {
        v6 = *v4;
        v7 = *v5;
        v14 = *((_OWORD *)v4 - 1);
        v15 = v6;
        v12 = *((_OWORD *)v5 - 1);
        v13 = v7;
        v8 = _s8NewsFeed24FormatLayeredMediaFilterO10MonochromeV2eeoiySbAE_AEtFZ_0((uint64_t *)&v14, (uint64_t *)&v12);
        v10 = v3-- != 0;
        if (!v8)
          break;
        v4 += 3;
        v5 += 3;
      }
      while (v10);
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t sub_1BA882A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  double v22;
  int v23;
  double v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for DebugFormatCacheFile();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v40 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (double *)((char *)&v40 - v11);
  MEMORY[0x1E0C80A78](v13);
  v16 = (double *)((char *)&v40 - v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
      return 1;
    v18 = 0;
    v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v42 = a2 + v19;
    v43 = a1 + v19;
    v41 = *(_QWORD *)(v14 + 72);
    while (1)
    {
      v21 = v41 * v18;
      sub_1BA4C2DD8(v43 + v41 * v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      sub_1BA4C2DD8(v42 + v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      v22 = v16[2];
      v23 = *((unsigned __int8 *)v16 + 24);
      v24 = v12[2];
      v25 = *((unsigned __int8 *)v12 + 24);
      v26 = *(_QWORD *)v16 == *(_QWORD *)v12 && *((_QWORD *)v16 + 1) == *((_QWORD *)v12 + 1);
      if (!v26 && (sub_1BB874398() & 1) == 0 || v22 != v24)
      {
        sub_1BA4C2DD8((uint64_t)v16, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
        sub_1BA4C2DD8((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
        goto LABEL_25;
      }
      sub_1BA4C2DD8((uint64_t)v16, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      sub_1BA4C2DD8((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      if (v23 != v25)
        goto LABEL_25;
      v27 = *(int *)(v4 + 28);
      v28 = &v9[v27];
      v29 = &v6[v27];
      if ((sub_1BB86EB3C() & 1) == 0)
        goto LABEL_25;
      v30 = *(int *)(type metadata accessor for DebugFormatCacheFileMetadata() + 20);
      v31 = *(_QWORD *)&v28[v30];
      v32 = *(_QWORD *)&v29[v30];
      v33 = *(_QWORD *)(v31 + 16);
      if (v33 != *(_QWORD *)(v32 + 16))
        goto LABEL_25;
      if (v33 && v31 != v32)
        break;
LABEL_5:
      ++v18;
      sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      sub_1BA4A2E80((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
      result = 1;
      if (v18 == v17)
        return result;
    }
    v35 = (unsigned __int8 *)(v31 + 32);
    v36 = (unsigned __int8 *)(v32 + 32);
    while (1)
    {
      v38 = *v35++;
      v37 = v38;
      v39 = *v36++;
      if (v37 != v39)
        break;
      if (!--v33)
        goto LABEL_5;
    }
LABEL_25:
    sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
    sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
    sub_1BA4A2E80((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCacheFile);
  }
  return 0;
}

uint64_t sub_1BA882CE0(uint64_t a1, uint64_t a2)
{
  return sub_1BA891D40(a1, a2, (uint64_t (*)(uint64_t *, uint64_t *))_s8NewsFeed16FormatAdjustmentO2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1BA882CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  sub_1BA75BC00(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v22 - v10);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v18 = 0;
    return v18 & 1;
  }
  if (v12 && a1 != a2)
  {
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = v12 - 1;
    while (1)
    {
      sub_1BA4C2DD8(a1 + v13, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      sub_1BA4C2DD8(a2 + v13, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      v16 = *v11;
      v22 = *v7;
      v23 = v16;
      static FormatExpression.== infix(_:_:)((uint64_t)&v23);
      if ((v17 & 1) == 0)
        break;
      v18 = static FormatOptionsNodeStatementValue.== infix(_:_:)((char *)v11 + *(int *)(v5 + 36), (char *)v7 + *(int *)(v5 + 36));
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      v20 = v15-- != 0;
      if ((v18 & 1) != 0)
      {
        v13 += v14;
        if (v20)
          continue;
      }
      return v18 & 1;
    }
    sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BA75BC00);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
    goto LABEL_14;
  }
  v18 = 1;
  return v18 & 1;
}

uint64_t sub_1BA882E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_BYTE *)(a2 + 49);
  for (i = (char *)(a1 + 49); ; i += 24)
  {
    v6 = *(_QWORD *)(i - 17);
    v7 = *(_QWORD *)(i - 9);
    v8 = *(i - 1);
    v9 = *i;
    v10 = *(_QWORD *)(v3 - 17);
    v11 = *(_QWORD *)(v3 - 9);
    v12 = *(v3 - 1);
    if ((*i & 1) != 0)
    {
      if ((*v3 & 1) != 0)
      {
        if ((0x29282F2A2D2BuLL >> (8 * v6)) != (0x29282F2A2D2BuLL >> (8 * v10)))
          return 0;
        goto LABEL_6;
      }
      v14 = v12 & 1;
      v15 = *(_QWORD *)(v3 - 17);
      v16 = *(_QWORD *)(v3 - 9);
LABEL_23:
      sub_1BA69C808(v15, v16, v14);
      sub_1BA728F8C(v6, v7, v8, v9);
      sub_1BA728F8C(v10, v11, v12, v9 ^ 1);
      sub_1BA728F8C(v6, v7, v8, v9);
      return 0;
    }
    if ((*v3 & 1) != 0)
    {
      sub_1BA69C808(*(_QWORD *)(i - 17), *(_QWORD *)(i - 9), v8 & 1);
      v15 = v6;
      v16 = v7;
      v14 = v8 & 1;
      goto LABEL_23;
    }
    if ((*(i - 1) & 1) != 0)
      break;
    if ((*(v3 - 1) & 1) != 0)
      goto LABEL_26;
    sub_1BA8569BC(*(_QWORD *)(i - 17), *(_QWORD *)(i - 9), *(i - 1), 0);
    sub_1BA8569BC(v10, v11, v12, 0);
    sub_1BA69C828(v6, v7, 0);
    sub_1BA69C828(v10, v11, 0);
    if (v6 != v10)
      return 0;
LABEL_6:
    v3 += 24;
    if (!--v2)
      return 1;
  }
  if ((*(v3 - 1) & 1) != 0)
  {
    if (v6 == v10 && v7 == v11)
    {
      sub_1BA8569BC(*(_QWORD *)(i - 17), *(_QWORD *)(i - 9), *(i - 1), 0);
      sub_1BA8569BC(v6, v7, v12, 0);
      sub_1BA69C828(v6, v7, 1);
      sub_1BA69C828(v6, v7, 1);
    }
    else
    {
      v5 = sub_1BB874398();
      sub_1BA8569BC(v6, v7, v8, 0);
      sub_1BA8569BC(v10, v11, v12, 0);
      sub_1BA69C828(v6, v7, 1);
      sub_1BA69C828(v10, v11, 1);
      if ((v5 & 1) == 0)
        return 0;
    }
    goto LABEL_6;
  }
  sub_1BA69C808(*(_QWORD *)(i - 17), *(_QWORD *)(i - 9), 1);
LABEL_26:
  v17 = v8 & 1;
  sub_1BA69C808(v10, v11, v17 == 0);
  sub_1BA69C828(v6, v7, v17);
  sub_1BA69C828(v10, v11, v17 == 0);
  return 0;
}

uint64_t sub_1BA88312C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unsigned __int8 *)(a1 + 32);
    v4 = (unsigned __int8 *)(a2 + 32);
    do
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *v4++;
      v7 = v8;
      if (v5 >> 6)
      {
        if (v5 >> 6 == 1)
        {
          v9 = (v7 ^ v5) & 1;
          if ((v7 & 0xC0) != 0x40 || v9 != 0)
            return 0;
        }
        else if ((v7 & 0xC0) != 0x80)
        {
          return 0;
        }
      }
      else if (v7 > 0x3F || v5 != v7)
      {
        return 0;
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1BA8831B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  __int128 v7;
  char v8;
  BOOL v10;
  _OWORD v12[2];
  char v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v8 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = a2 + 64;
      v5 = (_BYTE *)(a1 + 64);
      do
      {
        v6 = *v5;
        v7 = *((_OWORD *)v5 - 1);
        v12[0] = *((_OWORD *)v5 - 2);
        v12[1] = v7;
        v13 = v6;
        _s8NewsFeed32FormatImageNodeRequestAdjustmentO2eeoiySbAC_ACtFZ_0((uint64_t)v12);
        v10 = v3-- != 0;
        if ((v8 & 1) == 0)
          break;
        v4 += 40;
        v5 += 40;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1BA883260(uint64_t a1, uint64_t a2)
{
  return sub_1BA88214C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption, (uint64_t (*)(char *, char *))_s8NewsFeed12FormatOptionV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1BA883274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 1);
      v6 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_1BB874398() & 1) == 0)
        break;
      v10 = v5 == v7 && v6 == v8;
      if (!v10 && (sub_1BB874398() & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1BA883338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unsigned __int8 *)(a1 + 32);
  v4 = (unsigned __int8 *)(a2 + 32);
  v5 = v2 - 1;
  do
  {
    v6 = v5;
    v7 = *v3 ^ *v4;
    if ((v7 & 1) != 0)
      break;
    --v5;
    ++v3;
    ++v4;
  }
  while (v6);
  return (v7 ^ 1) & 1;
}

uint64_t sub_1BA8833A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v7 = (_QWORD *)(v4 + 24 * v3);
      v8 = v7[2];
      v9 = (_QWORD *)(v5 + 24 * v3);
      v10 = v9[2];
      v11 = *v7 == *v9 && v7[1] == v9[1];
      if (!v11 && (sub_1BB874398() & 1) == 0)
        return 0;
      v12 = *(_QWORD *)(v8 + 16);
      if (v12 != *(_QWORD *)(v10 + 16))
        return 0;
      if (v12)
        v13 = v8 == v10;
      else
        v13 = 1;
      if (!v13)
      {
        v14 = (unsigned __int8 *)(v8 + 32);
        v15 = (unsigned __int8 *)(v10 + 32);
        while (*v14 == *v15)
        {
          ++v14;
          ++v15;
          if (!--v12)
            goto LABEL_5;
        }
        return 0;
      }
LABEL_5:
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_1BA883494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 32);
    v4 = (_BYTE *)(a2 + 32);
    do
    {
      if (*v3)
        v5 = 0x4D6465726579616CLL;
      else
        v5 = 0x616C506F65646976;
      if (*v3)
        v6 = 0xEC00000061696465;
      else
        v6 = 0xED00006B63616279;
      if (*v4)
        v7 = 0x4D6465726579616CLL;
      else
        v7 = 0x616C506F65646976;
      if (*v4)
        v8 = 0xEC00000061696465;
      else
        v8 = 0xED00006B63616279;
      if (v5 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v10 = sub_1BB874398();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
          return 0;
      }
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1BA8835AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[7];
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  _OWORD v30[7];
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40[18];
  uint64_t v41;
  _BYTE v42[144];
  _BYTE v43[144];
  uint64_t v44[20];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unint64_t *)(a1 + 32);
  v4 = (unint64_t *)(a2 + 32);
  while (1)
  {
    while (1)
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *v4++;
      v7 = v8;
      if (!(v5 >> 62))
      {
        if (v7 >> 62)
          return 0;
        v12 = *(_QWORD *)(v5 + 16);
        v13 = *(_QWORD *)(v7 + 16);
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_retain();
        v14 = _s8NewsFeed024FormatAnimationNodeBasicD0C2eeoiySbAC_ACtFZ_0(v12, v13);
        swift_release_n();
        swift_release_n();
        goto LABEL_5;
      }
      if (v5 >> 62 != 1)
        break;
      if (v7 >> 62 != 1)
        return 0;
      v9 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v7 + 16);
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      v11 = _s8NewsFeed025FormatAnimationNodeSpringD0C2eeoiySbAC_ACtFZ_0(v9, v10);
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      if ((v11 & 1) == 0)
        return 0;
LABEL_6:
      if (!--v2)
        return 1;
    }
    if (v7 >> 62 != 2)
      return 0;
    v15 = *(_QWORD *)(v5 + 16);
    v16 = *(_QWORD *)(v7 + 16);
    v17 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v16 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    swift_retain();
    if ((sub_1BA8835AC(v17, v18) & 1) == 0)
      goto LABEL_26;
    sub_1BA5193C4(v15 + 24, (uint64_t)v42, (uint64_t (*)(_QWORD))sub_1BA89631C);
    sub_1BA5193C4(v16 + 24, (uint64_t)v43, (uint64_t (*)(_QWORD))sub_1BA89631C);
    sub_1BA5193C4((uint64_t)v42, (uint64_t)v44, (uint64_t (*)(_QWORD))sub_1BA89631C);
    if (sub_1BA896370(v44) != 1)
      break;
    sub_1BA5193C4((uint64_t)v43, (uint64_t)v40, (uint64_t (*)(_QWORD))sub_1BA89631C);
    if (sub_1BA896370(v40) != 1)
      goto LABEL_25;
    swift_release_n();
    swift_release_n();
    swift_release();
    swift_release();
    if (!--v2)
      return 1;
  }
  sub_1BA5193C4((uint64_t)v42, (uint64_t)&v32, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA5193C4((uint64_t)v43, (uint64_t)v40, (uint64_t (*)(_QWORD))sub_1BA89631C);
  if (sub_1BA896370(v40) != 1)
  {
    sub_1BA5193C4((uint64_t)v43, (uint64_t)&v22, (uint64_t (*)(_QWORD))sub_1BA89631C);
    v20[6] = v28;
    v21[0] = v29[0];
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v29 + 9);
    v20[2] = v24;
    v20[3] = v25;
    v20[4] = v26;
    v20[5] = v27;
    v20[0] = v22;
    v20[1] = v23;
    sub_1BA8966F8((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
    sub_1BA8966F8((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
    v14 = _s8NewsFeed17FormatMediaTimingV2eeoiySbAC_ACtFZ_0((uint64_t)&v32, (uint64_t)v20);
    v30[6] = v38;
    v31[0] = v39[0];
    *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)v39 + 9);
    v30[2] = v34;
    v30[3] = v35;
    v30[4] = v36;
    v30[5] = v37;
    v30[0] = v32;
    v30[1] = v33;
    sub_1BA896610((uint64_t)v30);
    sub_1BA8966F8((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B6260);
    swift_release_n();
    swift_release();
    swift_release();
LABEL_5:
    swift_release();
    swift_release();
    if (!v14)
      return 0;
    goto LABEL_6;
  }
  v28 = v38;
  v29[0] = v39[0];
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v39 + 9);
  v24 = v34;
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v22 = v32;
  v23 = v33;
  sub_1BA5193C4((uint64_t)v42, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA8966F8((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
  sub_1BA89652C((uint64_t)v30);
  sub_1BA896610((uint64_t)&v22);
LABEL_25:
  sub_1BA5193C4((uint64_t)v42, (uint64_t)v40, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA5193C4((uint64_t)v43, (uint64_t)&v41, (uint64_t (*)(_QWORD))sub_1BA89631C);
  sub_1BA8966F8((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1BA4B7794);
  sub_1BA8963E0((uint64_t)v40);
LABEL_26:
  swift_release_n();
  swift_release_n();
  swift_release();
  swift_release();
  return 0;
}

uint64_t sub_1BA883A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 64);
  for (i = (uint64_t *)(a2 + 64); ; i += 5)
  {
    v5 = *(v3 - 2);
    v14 = *v3;
    v15 = *(v3 - 1);
    v6 = *(v3 - 3);
    v7 = *(i - 3);
    v8 = *(i - 2);
    v9 = *(i - 1);
    v13 = *i;
    v16 = *(v3 - 4);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _s8NewsFeed10FormatNodeO2eeoiySbAC_ACtFZ_0((uint64_t)&v16);
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    if (v5)
      break;
    if (v8)
      goto LABEL_23;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_5:
    v3 += 5;
    if (!--v2)
      return 1;
  }
  if (v8)
  {
    if (v6 == v7 && v5 == v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      result = 0;
    }
    else
    {
      v12 = sub_1BB874398();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      result = 0;
      if ((v12 & 1) == 0)
        return result;
    }
    if (v15 != v9 || v14 != v13)
      return result;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_1BA883C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  char v8;
  BOOL v10;
  _OWORD v12[4];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v8 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = a2 + 80;
      v5 = (__int128 *)(a1 + 48);
      do
      {
        v6 = *v5;
        v12[0] = *(v5 - 1);
        v12[1] = v6;
        v7 = v5[2];
        v12[2] = v5[1];
        v12[3] = v7;
        _s8NewsFeed15FormatNodeStyleO2eeoiySbAC_ACtFZ_0((uint64_t)v12);
        v10 = v3-- != 0;
        if ((v8 & 1) == 0)
          break;
        v4 += 64;
        v5 += 4;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1BA883CCC(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)();
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v84 = type metadata accessor for FormatVersionRequirement(0);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v5 = (uint64_t (*)())((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v60 - v7;
  sub_1BA896B1C(0, (unint64_t *)&qword_1EF2A96D0, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
  v82 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v60 - v10;
  v12 = type metadata accessor for FormatOption();
  MEMORY[0x1E0C80A78](v12);
  v14 = (unint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18.n128_f64[0] = MEMORY[0x1E0C80A78](v15);
  v20 = (unint64_t *)((char *)&v60 - v19);
  v21 = (_QWORD *)(a1 >> 62);
  if (!(a1 >> 62))
  {
    v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_79:
    v80 = v16;
    v66 = v17;
    v70 = v22;
    swift_bridgeObjectRetain();
    v59 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    v22 = v70;
    v17 = v66;
    v16 = v80;
    if (v70 == v59)
      goto LABEL_4;
LABEL_76:
    v54 = 0;
    return v54 & 1;
  }
  v80 = v16;
  v57 = v17;
  swift_bridgeObjectRetain();
  v58 = sub_1BB873F30();
  swift_bridgeObjectRelease();
  v22 = v58;
  v17 = v57;
  v16 = v80;
  v23 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_79;
LABEL_3:
  if (v22 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_76;
LABEL_4:
  if (!v22)
    goto LABEL_70;
  v24 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a1 & 0x8000000000000000) != 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v21)
    v24 = v25;
  v26 = a2 & 0xFFFFFFFFFFFFFF8;
  v27 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v28 = a2;
  else
    v28 = a2 & 0xFFFFFFFFFFFFFF8;
  if (v23)
    v27 = v28;
  if (v24 == v27)
  {
LABEL_70:
    v54 = 1;
    return v54 & 1;
  }
  if (v22 < 0)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v69 = a1 & 0xC000000000000001;
  v80 = v16;
  v66 = v17;
  v70 = v22;
  v65 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_83:
    result = MEMORY[0x1BCCE4630](0, a1, v18);
    v21 = (_QWORD *)result;
    goto LABEL_20;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_85;
  }
  v21 = *(_QWORD **)(a1 + 32);
  result = swift_retain();
LABEL_20:
  v68 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_85:
    v30 = (_QWORD *)MEMORY[0x1BCCE4630](0, a2, v18);
    goto LABEL_23;
  }
  if (*(_QWORD *)(v26 + 16))
  {
    v30 = *(_QWORD **)(a2 + 32);
    swift_retain();
LABEL_23:
    if (v21[2] == v30[2] && v21[3] == v30[3] || (sub_1BB874398() & 1) != 0)
    {
      v71 = v11;
      v62 = a1 + 32;
      v61 = a2 + 32;
      v31 = 1;
      v74 = a1;
      v72 = v5;
      v73 = v8;
      v67 = v26;
      do
      {
        v75 = v31;
        swift_beginAccess();
        v32 = v21[4];
        swift_beginAccess();
        v33 = v30;
        v34 = v30[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35 = sub_1BA883A18(v32, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
          break;
        swift_beginAccess();
        v8 = (char *)v21[5];
        swift_beginAccess();
        v36 = v33[5];
        v37 = *((_QWORD *)v8 + 2);
        if (v37 != *(_QWORD *)(v36 + 16))
          break;
        v11 = v71;
        v38 = v74;
        if (v37 && v8 != (char *)v36)
        {
          v77 = *((_QWORD *)v8 + 2);
          v63 = v33;
          v64 = v21;
          v60 = a2;
          v26 = v66;
          a2 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          a1 = 0;
          v76 = *(_QWORD *)(v26 + 72);
          v5 = type metadata accessor for FormatOption;
          v79 = v20;
          v78 = v8;
          v81 = v36;
          while (1)
          {
            sub_1BA4C2DD8((uint64_t)&v8[a2], (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
            if (a1 >= *(_QWORD *)(v36 + 16))
              break;
            sub_1BA4C2DD8(v36 + a2, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
            v39 = *v20 == *v14 && v20[1] == v14[1];
            if (!v39 && (sub_1BB874398() & 1) == 0)
              goto LABEL_74;
            v40 = v20[2];
            v85 = v14[2];
            v86 = v40;
            if ((static FormatOptionValue.== infix(_:_:)(&v86, &v85) & 1) == 0)
              goto LABEL_74;
            v41 = v20[3];
            v42 = v14[3];
            if (v41 == 1)
            {
              if (v42 != 1)
                goto LABEL_74;
            }
            else
            {
              if (v42 == 1)
                goto LABEL_74;
              if (v41)
              {
                if (!v42)
                  goto LABEL_74;
                sub_1BA6E9BC8(v14[3]);
                sub_1BA6E9BC8(v41);
                v43 = sub_1BA6EB330(v41, v42);
                sub_1BA6E9B40(v42);
                sub_1BA6E9B40(v41);
                if ((v43 & 1) == 0)
                  goto LABEL_74;
              }
              else if (v42)
              {
                goto LABEL_74;
              }
            }
            v44 = *(int *)(v80 + 28);
            v45 = (uint64_t)v14 + v44;
            v46 = (uint64_t)&v11[*(int *)(v82 + 48)];
            sub_1BA57B488((uint64_t)v20 + v44, (uint64_t)v11, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
            sub_1BA57B488(v45, v46, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
            v26 = *(_QWORD *)(v83 + 48);
            v47 = v84;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v26)(v11, 1, v84) == 1)
            {
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v26)(v46, 1, v47) != 1)
                goto LABEL_73;
              sub_1BA502AD0((uint64_t)v11, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
              v20 = v79;
              v8 = v78;
            }
            else
            {
              v48 = (uint64_t)v11;
              v49 = (uint64_t)v11;
              v50 = (uint64_t)v73;
              sub_1BA57B488(v48, (uint64_t)v73, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v26)(v46, 1, v47) == 1)
              {
                sub_1BA4A2E80(v50, type metadata accessor for FormatVersionRequirement);
                v11 = (char *)v49;
LABEL_73:
                sub_1BA896B7C((uint64_t)v11, (unint64_t *)&qword_1EF2A96D0, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
                v20 = v79;
LABEL_74:
                sub_1BA4A2E80((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
                sub_1BA4A2E80((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_76;
              }
              v51 = (uint64_t)v72;
              sub_1BA5193C4(v46, (uint64_t)v72, type metadata accessor for FormatVersionRequirement);
              v26 = sub_1BA9FD2E0(v50, v51);
              sub_1BA4A2E80(v50, type metadata accessor for FormatVersionRequirement);
              sub_1BA4A2E80(v51, type metadata accessor for FormatVersionRequirement);
              sub_1BA502AD0(v49, (unint64_t *)&qword_1ED3D0B48, (void (*)(uint64_t))type metadata accessor for FormatVersionRequirement);
              v11 = (char *)v49;
              v5 = type metadata accessor for FormatOption;
              v20 = v79;
              v8 = v78;
              if ((v26 & 1) == 0)
                goto LABEL_74;
            }
            ++a1;
            sub_1BA4A2E80((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
            sub_1BA4A2E80((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
            a2 += v76;
            v36 = v81;
            if (v77 == a1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a2 = v60;
              v38 = v74;
              v21 = v64;
              v33 = v63;
              goto LABEL_56;
            }
          }
          __break(1u);
          goto LABEL_82;
        }
LABEL_56:
        swift_beginAccess();
        v52 = v21[6];
        swift_beginAccess();
        v53 = v33[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54 = sub_1BA6EB330(v52, v53);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v54 & 1) == 0)
          return v54 & 1;
        v55 = v75;
        if (v75 == v70)
          return v54 & 1;
        if (v69)
        {
          result = MEMORY[0x1BCCE4630](v75, v38);
          v21 = (_QWORD *)result;
          v56 = v67;
        }
        else
        {
          v56 = v67;
          if (v75 >= *(_QWORD *)(v65 + 16))
            goto LABEL_87;
          v21 = *(_QWORD **)(v62 + 8 * v75);
          result = swift_retain();
        }
        if (v68)
        {
          v30 = (_QWORD *)MEMORY[0x1BCCE4630](v55, a2);
        }
        else
        {
          if (v55 >= *(_QWORD *)(v56 + 16))
            goto LABEL_88;
          v30 = *(_QWORD **)(v61 + 8 * v55);
          swift_retain();
        }
        v31 = v55 + 1;
      }
      while (v21[2] == v30[2] && v21[3] == v30[3] || (sub_1BB874398() & 1) != 0);
    }
    swift_release();
    swift_release();
    goto LABEL_76;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_1BA88468C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 1);
      v6 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_1BB874398() & 1) == 0)
        break;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = sub_1BA857260(v5, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v10 & 1) == 0 || v6 != v8)
        return result;
      v3 += 4;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

