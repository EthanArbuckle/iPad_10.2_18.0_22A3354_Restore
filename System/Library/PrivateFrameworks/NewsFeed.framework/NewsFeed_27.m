uint64_t sub_1BB550970(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char v41;
  uint64_t result;
  char *v43;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;

  v5 = a2;
  v6 = __src;
  v7 = a2 - __src;
  v8 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v8 = a2 - __src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v50 = __src;
  v49 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_75;
    if (a4 != a2 || &a2[8 * v12] <= a4)
      memmove(a4, a2, 8 * v12);
    v26 = &a4[8 * v12];
    v48 = v26;
    v50 = v5;
    if (v6 >= v5 || v10 < 8)
    {
LABEL_74:
      sub_1BACAB208((void **)&v50, (const void **)&v49, &v48);
      return 1;
    }
    v27 = (char *)(a3 - 8);
    v28 = v5;
    v43 = v6;
    while (1)
    {
      v45 = v26;
      v47 = v5;
      v30 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v29 = v30;
      v32 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v31 = v32;
      v33 = (_QWORD *)(v29 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_children);
      swift_beginAccess();
      if (*v33 >> 62)
      {
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v34 = sub_1BB873F30();
        swift_bridgeObjectRelease();
      }
      else
      {
        v34 = *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_retain();
      }
      v35 = (_QWORD *)(v31 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_children);
      swift_beginAccess();
      if (*v35 >> 62)
      {
        swift_bridgeObjectRetain();
        v36 = sub_1BB873F30();
        swift_bridgeObjectRelease();
        v37 = v27 + 8;
        if (v34)
        {
LABEL_50:
          if (!v36)
            goto LABEL_65;
          goto LABEL_56;
        }
      }
      else
      {
        v36 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFF8) + 0x10);
        v37 = v27 + 8;
        if (v34)
          goto LABEL_50;
      }
      if (v36)
      {
        swift_release();
        swift_release();
        v38 = (unint64_t)v43;
        v39 = v47;
        goto LABEL_61;
      }
LABEL_56:
      if (*(_QWORD *)(v31 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name) == *(_QWORD *)(v29 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name)
        && *(_QWORD *)(v31 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name + 8) == *(_QWORD *)(v29 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name + 8))
      {
LABEL_65:
        swift_release();
        swift_release();
        v38 = (unint64_t)v43;
        v39 = v47;
LABEL_66:
        v26 = v45;
        if (v37 != v39 || v27 >= v39)
          *(_QWORD *)v27 = *(_QWORD *)v28;
        v50 = v28;
        goto LABEL_70;
      }
      v41 = sub_1BB874398();
      swift_release();
      swift_release();
      v38 = (unint64_t)v43;
      v39 = v47;
      if ((v41 & 1) == 0)
        goto LABEL_66;
LABEL_61:
      v48 = v26;
      if (v37 >= v45 && v27 < v45 && v37 == v45)
      {
        v28 = v39;
      }
      else
      {
        *(_QWORD *)v27 = *(_QWORD *)v26;
        v28 = v39;
      }
LABEL_70:
      if ((unint64_t)v28 > v38)
      {
        v27 -= 8;
        v5 = v28;
        if (v26 > a4)
          continue;
      }
      goto LABEL_74;
    }
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[8 * v9] <= a4)
      memmove(a4, __src, 8 * v9);
    v46 = &a4[8 * v9];
    v48 = v46;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v13 = a4;
      while (1)
      {
        v14 = v6;
        v15 = v5;
        v16 = *(_QWORD *)v5;
        v17 = *(_QWORD *)v13;
        v18 = (_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_children);
        swift_beginAccess();
        if (*v18 >> 62)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          v19 = sub_1BB873F30();
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain();
          swift_retain();
        }
        v20 = (_QWORD *)(v17 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_children);
        swift_beginAccess();
        if (*v20 >> 62)
        {
          swift_bridgeObjectRetain();
          v21 = sub_1BB873F30();
          swift_bridgeObjectRelease();
          if (!v19)
          {
LABEL_21:
            if (v21)
            {
              swift_release();
              swift_release();
LABEL_28:
              v24 = v14;
              if (v14 != v13)
                *(_QWORD *)v14 = *(_QWORD *)v13;
              v13 += 8;
              v49 = v13;
              v25 = v15;
              goto LABEL_36;
            }
            goto LABEL_23;
          }
        }
        else
        {
          v21 = *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v19)
            goto LABEL_21;
        }
        if (!v21)
          goto LABEL_31;
LABEL_23:
        if (*(_QWORD *)(v17 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name) == *(_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name)
          && *(_QWORD *)(v17 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name + 8) == *(_QWORD *)(v16 + OBJC_IVAR____TtC8NewsFeed23DebugFormatFileTreeItem_name + 8))
        {
LABEL_31:
          swift_release();
          swift_release();
          goto LABEL_32;
        }
        v23 = sub_1BB874398();
        swift_release();
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_28;
LABEL_32:
        v25 = v15 + 8;
        v24 = v14;
        if (v14 < v15 || v14 >= v25 || v14 != v15)
          *(_QWORD *)v14 = *(_QWORD *)v15;
LABEL_36:
        v6 = v24 + 8;
        if (v13 < v46)
        {
          v5 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        v50 = v6;
        goto LABEL_74;
      }
    }
    goto LABEL_74;
  }
LABEL_75:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BB550EF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DebugFormatCacheFile();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BB550F34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C6E18)
  {
    sub_1BB550FB0();
    sub_1BB551184();
    v0 = sub_1BB8724B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C6E18);
  }
}

void sub_1BB550FB0()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EF2C6E20)
  {
    sub_1BA4B07F0(255, &qword_1EF2A9180, (uint64_t (*)(uint64_t))type metadata accessor for DebugFormatFileTreeItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB86C8E0();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    sub_1BB5513AC(255, &qword_1EF2C6E28, sub_1BB55109C, (void (*)(uint64_t))sub_1BB55110C);
    sub_1BB3D4F50();
    sub_1BA4A2870((unint64_t *)&qword_1EF2C2E78, v0, MEMORY[0x1E0CB09C8]);
    v1 = sub_1BB8725F8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EF2C6E20);
  }
}

void sub_1BB55109C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1EF2C6E30)
  {
    v4[0] = &type metadata for DebugFormatFileTreeItemView;
    v4[1] = sub_1BB3D5274();
    v2 = MEMORY[0x1BCCE5AC4](a1, v4, MEMORY[0x1E0CDE618], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EF2C6E30);
  }
}

void sub_1BB55110C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C2E60)
  {
    sub_1BB872460();
    sub_1BA4A2870(&qword_1EF2C2E68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDC800], MEMORY[0x1E0CDC7F8]);
    v0 = sub_1BB872448();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C2E60);
  }
}

unint64_t sub_1BB551184()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF2C6E38;
  if (!qword_1EF2C6E38)
  {
    sub_1BB550FB0();
    v2 = v1;
    v3 = sub_1BB5511E4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0CDFEE8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF2C6E38);
  }
  return result;
}

unint64_t sub_1BB5511E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_1EF2C6E40;
  if (!qword_1EF2C6E40)
  {
    sub_1BB5513AC(255, &qword_1EF2C6E28, sub_1BB55109C, (void (*)(uint64_t))sub_1BB55110C);
    v2 = v1;
    v3[2] = &type metadata for DebugFormatFileTreeItemView;
    v3[3] = sub_1BB3D5274();
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = sub_1BA4A2870((unint64_t *)&qword_1EF2C2EB8, (uint64_t (*)(uint64_t))sub_1BB55110C, MEMORY[0x1E0CDBEF0]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF2C6E40);
  }
  return result;
}

void sub_1BB5512A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1EF2C6E48)
  {
    sub_1BB550F34();
    v5[0] = v2;
    v5[1] = sub_1BB8722BC();
    v5[2] = sub_1BA4A2870(&qword_1EF2C6E50, (uint64_t (*)(uint64_t))sub_1BB550F34, MEMORY[0x1E0CDD950]);
    v5[3] = MEMORY[0x1E0CD9550];
    v3 = MEMORY[0x1BCCE5AC4](a1, v5, MEMORY[0x1E0CDF2C8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EF2C6E48);
  }
}

uint64_t sub_1BB551354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BB54F6D4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BB55135C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB87231C();
  *a1 = result;
  return result;
}

uint64_t sub_1BB551384()
{
  swift_retain();
  return sub_1BB872328();
}

void sub_1BB5513AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_1BB8722E0();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BB551414()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C6E60)
  {
    sub_1BA4AD288(255, &qword_1EF2C6E68, MEMORY[0x1E0CD8DE0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1BB87246C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C6E60);
  }
}

uint64_t sub_1BB551488()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5514AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1BB54F8FC(a1);
}

unint64_t sub_1BB5514B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = qword_1EF2C6E70;
  if (!qword_1EF2C6E70)
  {
    sub_1BB5513AC(255, &qword_1EF2C6E58, sub_1BB5512A4, (void (*)(uint64_t))sub_1BB551414);
    v2 = v1;
    sub_1BB550F34();
    v4[2] = v3;
    v4[3] = sub_1BB8722BC();
    v4[4] = sub_1BA4A2870(&qword_1EF2C6E50, (uint64_t (*)(uint64_t))sub_1BB550F34, MEMORY[0x1E0CDD950]);
    v4[5] = MEMORY[0x1E0CD9550];
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_1BA4A2870(&qword_1EF2C6E78, (uint64_t (*)(uint64_t))sub_1BB551414, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EF2C6E70);
  }
  return result;
}

uint64_t dispatch thunk of LayeredMediaAssetHandlesProviderType.assetHandles(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1BB5515C0@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for LayeredMediaImageVariant();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (double *)((char *)&v25 - v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (double *)((char *)&v25 - v14);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v26 = a3;
    v17 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    sub_1BB10205C(v17, (uint64_t)&v25 - v14);
    v18 = *a2 * 0.5;
    v19 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1BB10205C(v17, (uint64_t)v12);
      if (vabdd_f64(v18, v12[1]) >= vabdd_f64(v18, v15[1]))
        v20 = (uint64_t)v15;
      else
        v20 = (uint64_t)v12;
      sub_1BB10205C(v20, (uint64_t)v9);
      sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
      sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
      sub_1BA5193C4((uint64_t)v9, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
      v17 += v19;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v21 = v26;
    sub_1BA5193C4((uint64_t)v15, v26, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v6);
  }
  else
  {
    if (qword_1ED39E0B0 != -1)
      swift_once();
    v23 = (id)qword_1ED4763D0;
    v24 = sub_1BB8732F4();
    sub_1BB86EF44("Attempting to select variant from empty set", 43, 2, &dword_1BA493000, v23, v24, MEMORY[0x1E0DEE9D8]);

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, v6);
  }
}

uint64_t sub_1BB551808(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  id v61;
  uint64_t v62;
  id *v63;
  id v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  id v75;
  uint64_t v76;
  _QWORD v78[2];
  id *v79;
  char *v80;
  id *v81;
  id *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111[8];
  __int128 v112[8];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125[5];
  id v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  sub_1BB5521FC();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v78 - v6;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v78 - v9;
  v97 = type metadata accessor for LayeredMediaImageVariant();
  v11 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v13 = (id *)((char *)v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v16 = (id *)((char *)v78 - v15);
  v18 = MEMORY[0x1E0C80A78](v17);
  v81 = (id *)((char *)v78 - v19);
  v20 = objc_msgSend(a1, sel_layeredCoverJSON, v18);
  v21 = MEMORY[0x1E0DEE9D8];
  if (v20)
  {
    v22 = v20;
    v79 = v16;
    v80 = v7;
    v84 = v11;
    v90 = v4;
    v82 = v13;
    v23 = sub_1BB8729A0();
    v25 = v24;

    v26 = objc_msgSend(a1, sel_identifier);
    v27 = sub_1BB8729A0();
    v29 = v28;

    type metadata accessor for LayeredMediaParser();
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = v27;
    v30[3] = v29;
    v30[4] = v23;
    v30[5] = v25;
    LayeredMediaParser.parse()((uint64_t)&v113);
    v78[1] = v30;
    v92 = v113;
    v31 = v114;
    v32 = v115;
    v33 = v116;
    v34 = v117;
    v35 = v118;
    v87 = v121;
    v88 = v114;
    v94 = v119;
    v95 = v122;
    v96 = v123;
    v124 = v21;
    v36 = v120;
    v93 = v117;
    v89 = v116;
    v98 = v115;
    v91 = *((_QWORD *)&v114 + 1);
    v86 = v118;
    v85 = v120;
    if (v120 < 0)
    {
      v37 = v83;
      v47 = v118;
      v48 = *(_QWORD *)(v83 + 40);
      v81 = (id *)(v83 + 16);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v83 + 16), v48);
      v49 = *((_QWORD *)&v92 + 1);
      v113 = v92;
      v114 = v31;
      v115 = v32;
      v116 = v33;
      v117 = v34;
      v118 = v47;
      v119 = v94;
      v120 = v36;
      v38 = v87;
      v121 = v87;
      v122 = v95;
      v123 = v96;
      v50 = v92;
      v51 = sub_1BAA9E0D0(v92, *((uint64_t *)&v92 + 1), (uint64_t)&v113);
      v52 = *(_OWORD *)(v37 + 152);
      v132 = *(_OWORD *)(v37 + 136);
      v133 = v52;
      v134 = *(_QWORD *)(v37 + 168);
      v40 = *(_QWORD *)(v37 + 136);
      v41 = *(_QWORD *)(v37 + 144);
      v42 = *(_QWORD *)(v37 + 152);
      v43 = *(_QWORD *)(v37 + 160);
      v44 = *(_QWORD *)(v37 + 168);
      sub_1BB552250(v51, (double *)&v132, v125);
      swift_bridgeObjectRelease();
      sub_1BA5193C4((uint64_t)v125, (uint64_t)&v126, (uint64_t (*)(_QWORD))sub_1BB552408);
      if (v126)
      {
        v129 = v127;
        v130 = v128;
        v53 = v126;
        MEMORY[0x1BCCE36AC]();
        if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();

        v131 = v130;
        sub_1BA73D624((uint64_t)&v131);
      }
      __swift_project_boxed_opaque_existential_1(v81, *(_QWORD *)(v37 + 40));
      *(_QWORD *)&v113 = v50;
      *((_QWORD *)&v113 + 1) = v49;
      v54 = v88;
      v55 = v89;
      *(_QWORD *)&v114 = v88;
      v56 = v91;
      *((_QWORD *)&v114 + 1) = v91;
      v57 = v98;
      v115 = v98;
      v116 = v89;
      v117 = v93;
      v118 = v86;
      v119 = v94;
      v120 = v85;
      v121 = v38;
      v122 = v95;
      v123 = v96;
      v58 = sub_1BAA9DF54(v88, v91, (uint64_t)&v113);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v37 + 56), *(_QWORD *)(v37 + 80));
      v113 = v132;
      v114 = v133;
      v115 = v134;
      v59 = (uint64_t)v80;
      sub_1BB14A8E0(v58, (uint64_t)&v113, (uint64_t)v80);
      swift_bridgeObjectRelease();
      v84 = *(_QWORD *)(v84 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v84)(v59, 1, v97) == 1)
      {
        sub_1BA4A2E80(v59, (uint64_t (*)(_QWORD))sub_1BB5521FC);
      }
      else
      {
        v63 = v79;
        sub_1BA5193C4(v59, (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
        v64 = *v63;
        MEMORY[0x1BCCE36AC]();
        if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();
        sub_1BA4A2E80((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
        v56 = v91;
      }
      v62 = v93;
    }
    else
    {
      v37 = v83;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v83 + 16), *(_QWORD *)(v83 + 40));
      v113 = v92;
      v114 = v31;
      v115 = v32;
      v116 = v33;
      v117 = v34;
      v118 = v35;
      v119 = v94;
      v120 = v36;
      v38 = v87;
      v121 = v87;
      v122 = v95;
      v123 = v96;
      v39 = sub_1BAA9DF54(v92, *((uint64_t *)&v92 + 1), (uint64_t)&v113);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v37 + 56), *(_QWORD *)(v37 + 80));
      v40 = *(_QWORD *)(v37 + 136);
      v41 = *(_QWORD *)(v37 + 144);
      v42 = *(_QWORD *)(v37 + 152);
      v43 = *(_QWORD *)(v37 + 160);
      v44 = *(_QWORD *)(v37 + 168);
      *(_QWORD *)&v113 = v40;
      *((_QWORD *)&v113 + 1) = v41;
      *(_QWORD *)&v114 = v42;
      *((_QWORD *)&v114 + 1) = v43;
      v115 = v44;
      sub_1BB14A8E0(v39, (uint64_t)&v113, (uint64_t)v10);
      swift_bridgeObjectRelease();
      v84 = *(_QWORD *)(v84 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v84)(v10, 1, v97) == 1)
      {
        v45 = (uint64_t (*)(_QWORD))sub_1BB5521FC;
        v46 = (uint64_t)v10;
      }
      else
      {
        v60 = v81;
        sub_1BA5193C4((uint64_t)v10, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
        v61 = *v60;
        MEMORY[0x1BCCE36AC]();
        if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();
        v45 = (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant;
        v46 = (uint64_t)v60;
      }
      sub_1BA4A2E80(v46, v45);
      v62 = v93;
      v54 = v88;
      v55 = v89;
      v57 = v98;
      v56 = v91;
    }
    v65 = *(_QWORD *)(v38 + 16);
    if (v65)
    {
      v66 = (_QWORD *)(v37 + 16);
      v67 = (_QWORD *)(v37 + 56);
      v68 = (__int128 *)(v38 + 32);
      swift_bridgeObjectRetain();
      v69 = v65 - 1;
      v70 = v95;
      while (1)
      {
        sub_1BB2F21EC(v68, v111);
        sub_1BB2F21EC(v111, v112);
        __swift_project_boxed_opaque_existential_1(v66, *(_QWORD *)(v37 + 40));
        v71 = v112[0];
        v99 = v92;
        v100 = v88;
        v101 = v91;
        v102 = v98;
        v103 = v89;
        v104 = v93;
        v105 = v86;
        v106 = v94;
        v107 = v85;
        v108 = v87;
        v109 = v70;
        v110 = v96;
        sub_1BB2F21EC(v111, &v113);
        sub_1BB2F2394(&v113);
        v72 = sub_1BAA9DF54(v71, *((uint64_t *)&v71 + 1), (uint64_t)&v99);
        __swift_project_boxed_opaque_existential_1(v67, *(_QWORD *)(v37 + 80));
        *(_QWORD *)&v99 = v40;
        *((_QWORD *)&v99 + 1) = v41;
        v100 = v42;
        v101 = v43;
        v102 = v44;
        v73 = (uint64_t)v90;
        sub_1BB14A8E0(v72, (uint64_t)&v99, (uint64_t)v90);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v84)(v73, 1, v97) == 1)
        {
          sub_1BB2F2410(v111);
          sub_1BA4A2E80(v73, (uint64_t (*)(_QWORD))sub_1BB5521FC);
        }
        else
        {
          v74 = v82;
          sub_1BA5193C4(v73, (uint64_t)v82, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
          v75 = *v74;
          MEMORY[0x1BCCE36AC]();
          if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1BB872E44();
          sub_1BB872E8C();
          sub_1BB872DCC();
          sub_1BB2F2410(v111);
          sub_1BA4A2E80((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for LayeredMediaImageVariant);
          v37 = v83;
        }
        v70 = v95;
        v76 = v98;
        if (!v69)
          break;
        --v69;
        v68 += 8;
      }
      swift_release();
      swift_bridgeObjectRelease();
      sub_1BAF7582C(v92, *((uint64_t *)&v92 + 1), v88, v91, v76, v89, v93, v86, v94, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      sub_1BAF7582C(v92, *((uint64_t *)&v92 + 1), v54, v56, v57, v55, v62, v86, v94, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v124;
  }
  return v21;
}

uint64_t sub_1BB552188()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LayeredMediaAssetHandlesProvider()
{
  return objc_opt_self();
}

uint64_t sub_1BB5521DC(void *a1)
{
  return sub_1BB551808(a1);
}

void sub_1BB5521FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39D320)
  {
    type metadata accessor for LayeredMediaImageVariant();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39D320);
  }
}

void sub_1BB552250(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  id v11;
  id v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (double *)(a1 + 64);
    v6 = *(double *)(a1 + 64);
    v7 = *a2 * 0.5;
    v9 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v10 = *(double *)(a1 + 40);
    v11 = *(id *)(a1 + 32);
    swift_bridgeObjectRetain_n();
    v12 = v11;
    swift_bridgeObjectRetain();
    v20 = v12;
    v13 = v6;
    v14 = v12;
    do
    {
      v15 = *(v5 - 3);
      if (vabdd_f64(v7, v15) < vabdd_f64(v7, v10))
      {
        v8 = *((_QWORD *)v5 - 1);
        v16 = *v5;
        v9 = *((_QWORD *)v5 - 2);
        v17 = *((id *)v5 - 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();

        v14 = v17;
        v10 = v15;
        v13 = v16;
      }
      v5 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1ED39E0B0 != -1)
      swift_once();
    v18 = (id)qword_1ED4763D0;
    v19 = sub_1BB8732F4();
    sub_1BB86EF44("Attempting to select variant from empty set", 43, 2, &dword_1BA493000, v18, v19, MEMORY[0x1E0DEE9D8]);

    v14 = 0;
    v9 = 0;
    v8 = 0;
    v13 = 0.0;
    v10 = 0.0;
  }
  *(_QWORD *)a3 = v14;
  a3[1] = v10;
  *((_QWORD *)a3 + 2) = v9;
  *((_QWORD *)a3 + 3) = v8;
  a3[4] = v13;
}

void sub_1BB552408()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39D380)
  {
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39D380);
  }
}

uint64_t sub_1BB55245C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  unsigned __int8 v18;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      v2 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v2);
      if (!v15)
      {
        v2 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v2);
        if (!v15)
        {
          v2 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v2);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    v10 = *(_QWORD *)(v1 + 48) + 24 * v9;
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    sub_1BA9ED7A4(*(_QWORD *)v10, v12, v13);
    sub_1BA9D7FD0((uint64_t)v17, v11, v12, v13);
    result = sub_1BA8D5088(v17[0], v17[1], v18);
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v2 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v2);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1BB5525E8(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_1BA65F06C(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void FormatContextLayoutOptions.feedKind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

double FormatContextLayoutOptions.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double FormatContextLayoutOptions.scaleFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t FormatContextLayoutOptions.options.getter()
{
  return swift_retain();
}

uint64_t sub_1BB552754()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB552784 + 4 * byte_1BB925BC0[*v0]))(0x646E694B64656566, 0xE800000000000000);
}

uint64_t sub_1BB552784()
{
  return 0x656C616373;
}

uint64_t sub_1BB552798()
{
  return 0x636146656C616373;
}

uint64_t sub_1BB5527B8()
{
  return 0x736E6F6974706FLL;
}

unint64_t sub_1BB5527D0()
{
  return 0xD000000000000011;
}

uint64_t sub_1BB5527EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB55328C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB552810()
{
  sub_1BB552AD0();
  return sub_1BB874710();
}

uint64_t sub_1BB552838()
{
  sub_1BB552AD0();
  return sub_1BB87471C();
}

uint64_t FormatContextLayoutOptions.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatContextLayoutOptions.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;

  v3 = v1;
  sub_1BB552E7C(0, &qword_1EF2C6E80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB552AD0();
  sub_1BB8746C8();
  LOBYTE(v11) = *(_BYTE *)(v3 + 16);
  v12 = 0;
  sub_1BB552B14();
  sub_1BB8741AC();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + 24);
    v12 = 1;
    sub_1BA5ED248();
    sub_1BB8741AC();
    v11 = *(_QWORD *)(v3 + 32);
    v12 = 2;
    sub_1BB8741AC();
    v11 = *(_QWORD *)(v3 + 40);
    v12 = 3;
    type metadata accessor for FormatOptionCollection();
    sub_1BB552F1C(&qword_1EF2C6E98, (uint64_t)&protocol conformance descriptor for FormatOptionCollection);
    sub_1BB8741AC();
    v11 = *(_QWORD *)(v3 + 56);
    v12 = 4;
    sub_1BA6BCC84();
    sub_1BA64D3D4((unint64_t *)&qword_1ED39BFB0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1BB552AD0()
{
  unint64_t result;

  result = qword_1EF2C6E88;
  if (!qword_1EF2C6E88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB925D64, &type metadata for FormatContextLayoutOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C6E88);
  }
  return result;
}

unint64_t sub_1BB552B14()
{
  unint64_t result;

  result = qword_1EF2C6E90;
  if (!qword_1EF2C6E90)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedKind, &type metadata for FeedKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C6E90);
  }
  return result;
}

uint64_t FormatContextLayoutOptions.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FormatContextLayoutOptions.init(from:)(a1);
  return v2;
}

uint64_t *FormatContextLayoutOptions.init(from:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v10 = *v1;
  sub_1BB552E7C(0, &qword_1EF2C6EA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  v1[6] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB552AD0();
  sub_1BB87468C();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = 0;
    sub_1BB552ED8();
    sub_1BB8740D4();
    *((_BYTE *)v1 + 16) = v11;
    v12 = 1;
    sub_1BA689CD8();
    sub_1BB8740D4();
    v1[3] = v11;
    v12 = 2;
    sub_1BB8740D4();
    v1[4] = v11;
    type metadata accessor for FormatOptionCollection();
    v12 = 3;
    sub_1BB552F1C(&qword_1EF2C6EB0, (uint64_t)&protocol conformance descriptor for FormatOptionCollection);
    sub_1BB8740D4();
    v1[5] = v11;
    sub_1BA6BCC84();
    v12 = 4;
    sub_1BA64D3D4((unint64_t *)&qword_1ED3B96D0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v1[7] = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

void sub_1BB552E7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB552AD0();
    v7 = a3(a1, &type metadata for FormatContextLayoutOptions.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BB552ED8()
{
  unint64_t result;

  result = qword_1EF2C6EA8;
  if (!qword_1EF2C6EA8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedKind, &type metadata for FeedKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C6EA8);
  }
  return result;
}

uint64_t sub_1BB552F1C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatOptionCollection();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1BB552F5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;

  v5 = swift_allocObject();
  result = FormatContextLayoutOptions.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1BB552FB0(_QWORD *a1)
{
  return FormatContextLayoutOptions.encode(to:)(a1);
}

uint64_t method lookup function for FormatContextLayoutOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatContextLayoutOptions.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t storeEnumTagSinglePayload for FormatContextLayoutOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BB553040 + 4 * byte_1BB925BCA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BB553074 + 4 * byte_1BB925BC5[v4]))();
}

uint64_t sub_1BB553074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55307C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB553084);
  return result;
}

uint64_t sub_1BB553090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB553098);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BB55309C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5530A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatContextLayoutOptions.CodingKeys()
{
  return &type metadata for FormatContextLayoutOptions.CodingKeys;
}

unint64_t sub_1BB5530C4()
{
  unint64_t result;

  result = qword_1EF2C6EB8;
  if (!qword_1EF2C6EB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB925D3C, &type metadata for FormatContextLayoutOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C6EB8);
  }
  return result;
}

unint64_t sub_1BB55310C()
{
  unint64_t result;

  result = qword_1EF2C6EC0;
  if (!qword_1EF2C6EC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB925CAC, &type metadata for FormatContextLayoutOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C6EC0);
  }
  return result;
}

unint64_t sub_1BB553154()
{
  unint64_t result;

  result = qword_1EF2C6EC8;
  if (!qword_1EF2C6EC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB925CD4, &type metadata for FormatContextLayoutOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C6EC8);
  }
  return result;
}

void sub_1BB553198(uint64_t a1)
{
  sub_1BB5531AC(a1, type metadata accessor for FormatDerivedDataResultOptionReference, (void (*)(char *, char *))sub_1BA9D81CC);
}

void sub_1BB5531AC(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(char *, char *))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v15 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_1BA4C2DD8(v14, (uint64_t)v8, a2);
      a3(v12, v8);
      sub_1BA4A2E80((uint64_t)v12, a2);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

uint64_t sub_1BB55328C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646E694B64656566 && a2 == 0xE800000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636146656C616373 && a2 == 0xEB00000000726F74 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB991160)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1BB5534B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedGroupItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1BB5534F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86D660();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BB86D7A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1BB5535A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1BB86D7A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1BB5535FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BB86D7A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_1BB553678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BB86D7A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1BB5536F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BB86D7A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1BB553770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1BB86D660();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BB86D7A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1BB5537EC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5537F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1BB86D660();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1BB86D7A4();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1BB55386C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB553878(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1BB86D660();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1BB86D7A4();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DebugFormatEditorLayoutContext()
{
  uint64_t result;

  result = qword_1EF2C6F28;
  if (!qword_1EF2C6F28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB553930()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1BB86D660();
  if (v1 <= 0x3F)
  {
    result = sub_1BB86D7A4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t FeedGroupPaidVisibility.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5539DC
                                                            + 4 * asc_1BB925DE0[*v0]))(1684627792, 0xE400000000000000);
}

uint64_t sub_1BB5539DC()
{
  return 0x646961706E55;
}

uint64_t sub_1BB5539F0()
{
  return 1752461122;
}

uint64_t sub_1BB5539FC()
{
  return 0x7265687469654ELL;
}

uint64_t FeedGroupPaidVisibility.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB553A3C + 4 * byte_1BB925DE4[*v0]))(1684627824, 0xE400000000000000);
}

uint64_t sub_1BB553A3C()
{
  return 0x646961706E75;
}

uint64_t sub_1BB553A50()
{
  return 1752461154;
}

uint64_t sub_1BB553A5C()
{
  return 0x7265687469656ELL;
}

unint64_t sub_1BB553A78()
{
  unint64_t result;

  result = qword_1EF2C6F60;
  if (!qword_1EF2C6F60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupPaidVisibility, &type metadata for FeedGroupPaidVisibility);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F60);
  }
  return result;
}

void sub_1BB553ABC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BB553B00()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BB553B60()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB553B94()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BB553BE0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BB553C20()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BB553C80(char *a1)
{
  sub_1BB805A60(*a1);
}

uint64_t sub_1BB553C8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB553CB4 + 4 * byte_1BB925DF8[*v0]))(1684627792, 0xE400000000000000);
}

uint64_t sub_1BB553CB4()
{
  return 0x646961706E55;
}

uint64_t sub_1BB553CC8()
{
  return 1752461122;
}

uint64_t sub_1BB553CD4()
{
  return 0x7265687469654ELL;
}

uint64_t static FormatBlockExpression.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

unint64_t sub_1BB553D1C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB553D40();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB553D40()
{
  unint64_t result;

  result = qword_1EF2C6F68;
  if (!qword_1EF2C6F68)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBlockExpression, &type metadata for FormatBlockExpression);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F68);
  }
  return result;
}

unint64_t sub_1BB553D84(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA6753C0();
  a1[2] = sub_1BAEF3A18();
  result = sub_1BB553DB8();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB553DB8()
{
  unint64_t result;

  result = qword_1EF2C6F70;
  if (!qword_1EF2C6F70)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBlockExpression, &type metadata for FormatBlockExpression);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F70);
  }
  return result;
}

uint64_t sub_1BB553DFC(_QWORD *a1)
{
  return FormatBlockExpression.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FormatBlockExpression()
{
  return &type metadata for FormatBlockExpression;
}

void FormatSourceItemTip.tipSource(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a2;
  v14 = sub_1BB8717AC();
  v5 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v10 = *((_QWORD *)v2 + 1);
  v9 = *((_QWORD *)v2 + 2);
  v11 = v2[24];
  v16 = *v2;
  v15 = a1;
  sub_1BB6FABC4(a1, (uint64_t)v7);
  if (!v3)
  {
    v16 = v8;
    v17 = v10;
    v18 = v9;
    v19 = v11;
    v12 = type metadata accessor for FormatSourceItemTipSource();
    v13 = v20;
    sub_1BB553F18(v15, v20 + *(int *)(v12 + 20));
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v13, v7, v14);
  }
}

uint64_t sub_1BB553F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void (*v28)(BOOL *, char *, uint64_t);
  BOOL *v29;
  uint64_t v30;
  BOOL *v31;
  void (*v32)(BOOL *, uint64_t);
  BOOL *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  BOOL *v40;
  BOOL v41;
  void (*v42)(BOOL *, char *, uint64_t);
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  BOOL *v49;
  BOOL v50;
  void (*v51)(char *, char *, uint64_t);
  BOOL *v52;
  uint64_t v53;
  BOOL *v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  BOOL *v61;
  BOOL *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  BOOL *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;

  sub_1BB5546E8();
  v69 = v5;
  MEMORY[0x1E0C80A78](v5);
  v62 = (BOOL *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v68 = (BOOL *)&v56 - v8;
  MEMORY[0x1E0C80A78](v9);
  v61 = (BOOL *)&v56 - v10;
  v11 = sub_1BB86F718();
  v70 = *(_QWORD **)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v60 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v67 = (char *)&v56 - v14;
  MEMORY[0x1E0C80A78](v15);
  v66 = (char *)&v56 - v16;
  MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v56 - v18;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v56 - v20;
  v23 = *(_QWORD *)(v2 + 8);
  v22 = *(_QWORD *)(v2 + 16);
  v24 = *(_BYTE *)(v2 + 24);
  v71 = 0;
  sub_1BB554750(&qword_1ED3AD1F0, MEMORY[0x1E0DB6E40]);
  sub_1BB874374();
  if ((v24 & 1) != 0)
  {
    sub_1BA896BB8(v23, v22, 1);
    v25 = sub_1BA9A3234(a1, v23, v22);
    sub_1BA896BE0(v23, v22, 1);
    v23 = v25;
  }
  else
  {
    sub_1BA896BB8(v23, v22, 0);
  }
  v57 = v23;
  v26 = *(_QWORD *)(v23 + 16);
  if (v26)
  {
    v27 = (_BYTE *)(v57 + 32);
    v65 = a2;
    v58 = v21;
    do
    {
      if ((*v27 & 1) != 0)
      {
        v34 = v67;
        sub_1BB86F70C();
        v35 = v70;
        v36 = v66;
        v64 = (void (*)(char *, uint64_t, uint64_t))v70[2];
        v64(v66, a2, v11);
        v37 = sub_1BB554750(&qword_1EF2C6F88, MEMORY[0x1E0DB6E38]);
        v38 = v60;
        v63 = v37;
        sub_1BB873B88();
        sub_1BB554750(&qword_1EF2C6F90, MEMORY[0x1E0DB6E30]);
        v39 = sub_1BB872958();
        v40 = &v62[*(int *)(v69 + 48)];
        v41 = (v39 & 1) == 0;
        *v62 = v41;
        if ((v39 & 1) != 0)
        {
          v42 = (void (*)(BOOL *, char *, uint64_t))v35[4];
          v42(v40, v38, v11);
        }
        else
        {
          ((void (*)(char *, uint64_t))v35[1])(v38, v11);
          v51 = (void (*)(char *, char *, uint64_t))v64;
          v64((char *)v40, (uint64_t)v34, v11);
          v51(v36, v34, v11);
          sub_1BB873BA0();
          v42 = (void (*)(BOOL *, char *, uint64_t))v35[4];
        }
        v21 = v58;
        v52 = v68;
        v53 = *(int *)(v69 + 48);
        v54 = &v68[v53];
        *v68 = v41;
        v42(&v52[v53], (char *)v40, v11);
        v32 = (void (*)(BOOL *, uint64_t))v70[1];
        v32(v54, v11);
        v33 = (BOOL *)v67;
      }
      else
      {
        sub_1BB86F700();
        v43 = (void (*)(char *, uint64_t, uint64_t))v70[2];
        v44 = v66;
        v43(v66, a2, v11);
        v45 = sub_1BB554750(&qword_1EF2C6F88, MEMORY[0x1E0DB6E38]);
        v46 = v21;
        v47 = v59;
        v64 = (void (*)(char *, uint64_t, uint64_t))v45;
        sub_1BB873B88();
        sub_1BB554750(&qword_1EF2C6F90, MEMORY[0x1E0DB6E30]);
        v48 = sub_1BB872958();
        v49 = &v61[*(int *)(v69 + 48)];
        v50 = (v48 & 1) == 0;
        *v61 = v50;
        if ((v48 & 1) != 0)
        {
          v28 = (void (*)(BOOL *, char *, uint64_t))v70[4];
          v28(v49, v47, v11);
        }
        else
        {
          ((void (*)(char *, uint64_t))v70[1])(v47, v11);
          v43((char *)v49, (uint64_t)v46, v11);
          v43(v44, (uint64_t)v46, v11);
          sub_1BB873BA0();
          v28 = (void (*)(BOOL *, char *, uint64_t))v70[4];
        }
        v21 = v46;
        v29 = v68;
        v30 = *(int *)(v69 + 48);
        v31 = &v68[v30];
        *v68 = v50;
        v28(&v29[v30], (char *)v49, v11);
        v32 = (void (*)(BOOL *, uint64_t))v70[1];
        v32(v31, v11);
        v33 = (BOOL *)v46;
      }
      v32(v33, v11);
      a2 = v65;
      ++v27;
      --v26;
    }
    while (v26);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB55440C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatSourceItemTip.init(from:)(a1, a2);
}

uint64_t sub_1BB554420(_QWORD *a1)
{
  return FormatSourceItemTip.encode(to:)(a1);
}

BOOL _s8NewsFeed19FormatSourceItemTipV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;

  v2 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v5 = a1[24];
  v6 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v9 = a2[24];
  if (v2 >> 6)
  {
    v10 = v6 & 0xC0;
    if (v2 >> 6 == 1)
    {
      if (v10 != 64)
        return 0;
    }
    else if (v10 != 128)
    {
      return 0;
    }
  }
  else
  {
    if (v6 > 0x3F)
      return 0;
    if (*a1)
    {
      if (v2 == 1)
      {
        if (v6 != 1)
          return 0;
      }
      else if (v6 != 2)
      {
        return 0;
      }
    }
    else if (*a2)
    {
      return 0;
    }
  }
  if ((a1[24] & 1) != 0)
  {
    if ((a2[24] & 1) != 0)
    {
      if ((sub_1BA883338(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) != 0)
      {
        v11 = sub_1BA8833A4(v3, v7);
        v12 = 1;
        sub_1BA896BB8(v8, v7, 1);
        sub_1BA896BB8(v4, v3, 1);
        sub_1BA896BE0(v4, v3, 1);
        sub_1BA896BE0(v8, v7, 1);
        if ((v11 & 1) != 0)
          return v12;
        return 0;
      }
      v9 = 1;
      v5 = 1;
    }
    goto LABEL_24;
  }
  if ((a2[24] & 1) != 0)
  {
LABEL_24:
    sub_1BA896BB8(v8, v7, v9);
    sub_1BA896BB8(v4, v3, v5);
    sub_1BA896BE0(v4, v3, v5);
    sub_1BA896BE0(v8, v7, v9);
    return 0;
  }
  v13 = sub_1BA883338(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  sub_1BA896BB8(v8, v7, 0);
  sub_1BA896BB8(v4, v3, 0);
  sub_1BA896BE0(v4, v3, 0);
  sub_1BA896BE0(v8, v7, 0);
  return (v13 & 1) != 0;
}

unint64_t sub_1BB5545F8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB55461C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB55461C()
{
  unint64_t result;

  result = qword_1EF2C6F78;
  if (!qword_1EF2C6F78)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSourceItemTip, &type metadata for FormatSourceItemTip);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F78);
  }
  return result;
}

unint64_t sub_1BB554660(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAEBB754();
  a1[2] = sub_1BAEEBD64();
  result = sub_1BB554694();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB554694()
{
  unint64_t result;

  result = qword_1EF2C6F80;
  if (!qword_1EF2C6F80)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSourceItemTip, &type metadata for FormatSourceItemTip);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F80);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatSourceItemTip()
{
  return &type metadata for FormatSourceItemTip;
}

void sub_1BB5546E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3AE4E0)
  {
    sub_1BB86F718();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3AE4E0);
  }
}

uint64_t sub_1BB554750(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BB86F718();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for A12_V20()
{
  return &type metadata for A12_V20;
}

uint64_t sub_1BB5547A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C70D0, (uint64_t (*)(void))sub_1BB558058, (uint64_t)&type metadata for A12_V20.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB558058();
  sub_1BB8746C8();
  v10 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v10;
  v13 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA4A2870(&qword_1EF2A9A18, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    *(_QWORD *)&v12[0] = *(_QWORD *)(v3 + 32);
    v13 = 1;
    sub_1BA4C576C(0, &qword_1ED3B94A0);
    sub_1BA4DB848(&qword_1EF2A9F98, (uint64_t (*)(void))sub_1BA82F554, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB554954()
{
  sub_1BB558058();
  return sub_1BB874710();
}

uint64_t sub_1BB55497C()
{
  sub_1BB558058();
  return sub_1BB87471C();
}

double sub_1BB5549A4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1BB557E44(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1BB5549E8(_QWORD *a1)
{
  return sub_1BB5547A0(a1);
}

uint64_t sub_1BB5549FC()
{
  sub_1BB557B2C();
  return sub_1BB86D96C();
}

uint64_t sub_1BB554A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  unsigned __int8 v74;
  ValueMetadata *v75;
  unint64_t v76;
  uint64_t v77;

  v62 = a2;
  v55 = a3;
  v56 = sub_1BB86C8E0();
  v6 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupLayoutContext();
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  MEMORY[0x1E0C80A78](v9);
  v77 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v54 - v12;
  v61 = type metadata accessor for GroupLayoutBindingContext();
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v59 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v3;
  v16 = (void *)*((_QWORD *)v3 + 1);
  v17 = v3[16];
  v66 = a1;
  sub_1BA4C2DD8(a1, v59, v18);
  sub_1BA4C2DD8(a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA7C26A0(v16, v17);
  sub_1BB86C8D4();
  v58 = sub_1BB86C8C8();
  v57 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v56);
  v75 = &type metadata for A12_V20;
  v20 = sub_1BA8EE88C();
  v76 = v20;
  LOBYTE(v73) = v15;
  *((_QWORD *)&v73 + 1) = v16;
  v74 = v17;
  type metadata accessor for GroupLayoutKey();
  v21 = swift_allocObject();
  sub_1BA7C26A0(v16, v17);
  v67 = sub_1BB874734();
  v68 = v22;
  v71 = 95;
  v72 = 0xE100000000000000;
  v69 = 45;
  v70 = 0xE100000000000000;
  sub_1BA7114A0();
  v23 = sub_1BB873B04();
  v25 = v24;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 24) = v25;
  v26 = (uint64_t *)(v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier);
  v27 = v57;
  *v26 = v58;
  v26[1] = v27;
  sub_1BA4C010C((uint64_t)&v73, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_factory);
  v28 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings;
  sub_1BA5193C4(v59, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutBindingContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v28, 0, 1, v61);
  v29 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext;
  sub_1BA5193C4((uint64_t)v13, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v29, 0, 1, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  sub_1BA7C2538(v16, v17);
  v75 = &type metadata for A12_V20;
  v76 = v20;
  LOBYTE(v73) = v15;
  *((_QWORD *)&v73 + 1) = v16;
  v74 = v17;
  sub_1BA4C2DD8(v62, v77, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA4B07F0(0, qword_1ED3B0E60, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FeedItemSorter);
  v30 = swift_allocObject();
  v31 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v30 + 16) = MEMORY[0x1E0DEE9D8];
  v32 = (_QWORD *)(v30 + 16);
  swift_beginAccess();
  v33 = *(_QWORD **)(v30 + 16);
  sub_1BA7C26A0(v16, v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 16) = v33;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v33 = sub_1BA7892A0(0, v33[2] + 1, 1, v33);
    *v32 = v33;
  }
  v36 = v33[2];
  v35 = v33[3];
  if (v36 >= v35 >> 1)
  {
    v33 = sub_1BA7892A0((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
    *v32 = v33;
  }
  v33[2] = v36 + 1;
  v37 = &v33[2 * v36];
  v37[4] = sub_1BACB8D7C;
  v37[5] = 0;
  swift_endAccess();
  v38 = v65;
  v39 = sub_1BA7E1F18((uint64_t)&unk_1E726A158, 0, 0, v30, 4, 0, 0, 0);
  if (v38)
  {
    swift_release();
    swift_release();
    sub_1BA4A2E80(v77, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  }
  else
  {
    v40 = v39;
    swift_release();
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v31;
    v42 = (_QWORD *)(v41 + 16);
    swift_beginAccess();
    v43 = *(_QWORD **)(v41 + 16);
    v44 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v41 + 16) = v43;
    if ((v44 & 1) == 0)
    {
      v43 = sub_1BA7892A0(0, v43[2] + 1, 1, v43);
      *v42 = v43;
    }
    v46 = v43[2];
    v45 = v43[3];
    if (v46 >= v45 >> 1)
    {
      v43 = sub_1BA7892A0((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
      *v42 = v43;
    }
    v43[2] = v46 + 1;
    v47 = &v43[2 * v46];
    v47[4] = sub_1BACB8D7C;
    v47[5] = 0;
    swift_endAccess();
    v49 = sub_1BA7E1F18((uint64_t)&unk_1E726A180, 0, 0, v41, 0, 0, 0, 0);
    swift_release();
    v67 = v40;
    sub_1BA7DD6A0(v49);
    v50 = v67;
    v51 = type metadata accessor for A12_V20.Bound();
    v52 = v55;
    v55[3] = v51;
    v52[4] = sub_1BA4A2870(&qword_1EF2C6FA8, (uint64_t (*)(uint64_t))type metadata accessor for A12_V20.Bound, (uint64_t)&unk_1BB9261D0);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v52);
    *boxed_opaque_existential_0 = v21;
    sub_1BA4CECCC(&v73, (uint64_t)(boxed_opaque_existential_0 + 1));
    result = sub_1BA5193C4(v77, (uint64_t)boxed_opaque_existential_0 + *(int *)(v51 + 24), (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    *(uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v51 + 28)) = v50;
  }
  return result;
}

double sub_1BB555098@<D0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _BYTE *v49;
  _QWORD v50[6];
  char v51[105];
  __int128 v52[9];
  __int128 v53[2];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v49 = a1;
  v3 = sub_1BB86DA38();
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)&v48 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9F18, (uint64_t (*)(uint64_t))sub_1BA829A4C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  v6 = type metadata accessor for A12_V20.Bound();
  v7 = v1 + *(int *)(v6 + 24);
  v8 = type metadata accessor for GroupLayoutContext();
  v9 = *(_QWORD *)(v7 + *(int *)(v8 + 40));
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(int *)(v8 + 32);
  v47 = v7;
  v12 = *(double *)(v7 + v11);
  sub_1BA4C010C(v10 + 16, (uint64_t)&v54);
  sub_1BA4C010C(v10 + 56, (uint64_t)v53);
  v13 = v12 * *(double *)(v10 + 96);
  type metadata accessor for FeedLayoutStylerFactory();
  v14 = swift_initStackObject();
  sub_1BA4CECCC(&v54, v14 + 16);
  sub_1BA4CECCC(v53, v14 + 56);
  *(double *)(v14 + 96) = v13;
  LOBYTE(v52[0]) = 1;
  FeedLayoutStylerFactory.styler(withHeading:)((char *)v52, (uint64_t *)(inited + 32));
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v14 + 16);
  __swift_destroy_boxed_opaque_existential_1(v14 + 56);
  v15 = *(_QWORD *)(v9 + 16);
  sub_1BA4C010C(v15 + 16, (uint64_t)v53);
  sub_1BA4C010C(v15 + 56, (uint64_t)v52);
  v16 = v12 * *(double *)(v15 + 96);
  v17 = swift_initStackObject();
  sub_1BA4CECCC(v53, v17 + 16);
  sub_1BA4CECCC(v52, v17 + 56);
  *(double *)(v17 + 96) = v16;
  v51[0] = 2;
  FeedLayoutStylerFactory.styler(withHeading:)(v51, (uint64_t *)&v54);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v17 + 16);
  __swift_destroy_boxed_opaque_existential_1(v17 + 56);
  v18 = sub_1BA6B5B08((uint64_t)&v54, *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v6 + 28)) + 16) - 1);
  *(_QWORD *)&v54 = inited;
  sub_1BA6B5BE8(v18);
  v19 = v54;
  v50[2] = v2;
  v20 = swift_bridgeObjectRetain();
  v21 = sub_1BACB8FF0(v20, v19, (void (*)(char *, uint64_t))sub_1BA6B5C04, (uint64_t)v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  if (v22 >= 4)
    v23 = 4;
  else
    v23 = *(_QWORD *)(v21 + 16);
  sub_1BB874434();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
  }
  v25 = *(_QWORD *)(v24 + 16);
  swift_release();
  if (v25 == v22 - v23)
  {
    v26 = swift_dynamicCastClass();
    if (!v26)
    {
      swift_bridgeObjectRelease();
      v26 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v42 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeadlineViewLayout.Context(0) - 8) + 80);
    v26 = sub_1BA85CDD8(v21, v21 + ((v42 + 32) & ~v42), v23, (2 * v22) | 1);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v54 = v26;
  sub_1BA4B07F0(0, &qword_1ED3B94B8, type metadata accessor for HeadlineViewLayout.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v28 = v27;
  sub_1BA8F1DA0(&qword_1EF2A9F08, MEMORY[0x1E0DEAF50]);
  v44 = v28;
  sub_1BB8730F0();
  swift_release();
  v29 = *MEMORY[0x1E0DB5D88];
  v30 = sub_1BB86D678();
  v31 = v48;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v48, v29, v30);
  v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v31, *MEMORY[0x1E0DB6200], v46);
  MEMORY[0x1E0C80A78](v32);
  *(&v44 - 4) = v21;
  *(&v44 - 3) = v2;
  sub_1BB557BD4(0, &qword_1EF2C7050, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB6308]);
  swift_allocObject();
  sub_1BB86DB34();
  swift_bridgeObjectRelease();
  v33 = sub_1BB86DB40();
  v48 = v54;
  v34 = v55;
  v35 = v56;
  *(_QWORD *)&v54 = v21;
  *(_QWORD *)&v53[0] = v57;
  MEMORY[0x1E0C80A78](v33);
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  sub_1BA8F1DA0((unint64_t *)&qword_1ED3B94C0, MEMORY[0x1E0DEAF38]);
  v36 = sub_1BA6B50E4(&qword_1ED3B94A8, &qword_1ED3B94A0);
  swift_bridgeObjectRetain();
  v43 = v36;
  v37 = sub_1BB86ED58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v54 = v37;
  sub_1BA4C576C(0, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B50E4((unint64_t *)&qword_1ED3B9360, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B39A0();
  v38 = sub_1BB872BBC();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = v49;
  *v49 = 0;
  result = *(double *)&v48;
  *(_OWORD *)(v39 + 8) = v48;
  *((_QWORD *)v39 + 3) = v34;
  *((_QWORD *)v39 + 4) = v35;
  v41 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v39 + 5) = v38;
  *((_QWORD *)v39 + 6) = v41;
  return result;
}

uint64_t sub_1BB5556B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)&v16[-v11];
  v20 = a1;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 12;
  *v12 = v13;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DB63F8], v9);
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v14 = MEMORY[0x1E0DB5DD0];
  sub_1BB557BD4(0, &qword_1EF2C7070, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BB557B94(&qword_1EF2C7078, &qword_1EF2C7070, (uint64_t (*)(uint64_t, _QWORD *))v14, MEMORY[0x1E0DB5DD8]);
  sub_1BB86D4BC();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1BB555824(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD);
  uint64_t v16;
  void (*v17)(uint64_t *);
  uint64_t (*v18)(uint64_t, _QWORD *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t);
  unsigned int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *);
  uint64_t v35;
  _BYTE v36[12];
  unsigned int v37;
  uint64_t v38;
  void (*v39)(uint64_t *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t *);
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  void (*v46)(uint64_t, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void (*v50)(uint64_t *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v47 = a3;
  v48 = a4;
  v42 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (uint64_t *)&v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)&v36[-v11];
  v53 = a1;
  v13 = sub_1BB86D438();
  v14 = swift_allocBox();
  v15 = *(void (**)(_QWORD))(*(_QWORD *)(v13 - 8) + 104);
  v43 = *MEMORY[0x1E0DB5A38];
  v46 = (void (*)(uint64_t, _QWORD, uint64_t))v15;
  v15(v16);
  *v12 = v14;
  v17 = *(void (**)(uint64_t *))(v7 + 104);
  v45 = *MEMORY[0x1E0DB6318];
  v17(v12);
  v18 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  v20 = v19;
  v21 = sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v18, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4EC();
  v22 = *(void (**)(uint64_t *, uint64_t))(v7 + 8);
  v49 = v12;
  v22(v12, v6);
  v44 = a1;
  v53 = a1;
  v23 = *MEMORY[0x1E0DB63C0];
  v17(v9);
  v50 = v42;
  v51 = v47;
  sub_1BB86D498();
  v47 = v6;
  result = ((uint64_t (*)(uint64_t *, uint64_t))v22)(v9, v6);
  v25 = *(_QWORD *)(v48 + 16);
  if (v25)
  {
    swift_bridgeObjectRetain();
    v41 = v20;
    v42 = v17;
    v39 = v22;
    v40 = v21;
    v26 = 0;
    v38 = v13;
    v37 = v23;
    v27 = v47;
    v28 = v49;
    v29 = v44;
    v30 = v39;
    do
    {
      ++v26;
      v52 = v29;
      v31 = v38;
      v32 = swift_allocBox();
      v46(v33, v43, v31);
      *v28 = v32;
      v34 = v42;
      ((void (*)(uint64_t *, _QWORD, uint64_t))v42)(v28, v45, v27);
      swift_bridgeObjectRetain();
      sub_1BB86D4EC();
      v30(v49, v27);
      v52 = v29;
      v35 = ((uint64_t (*)(uint64_t *, _QWORD, uint64_t))v34)(v49, v37, v27);
      MEMORY[0x1E0C80A78](v35);
      v28 = v49;
      sub_1BB86D498();
      v27 = v47;
      v30(v28, v47);
      swift_bridgeObjectRelease();
    }
    while (v25 != v26);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BB555B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD *);
  void (*v23)(uint64_t *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v29 = a3;
  v26 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v26 - v7);
  v33 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 6;
  *v8 = v9;
  v10 = *MEMORY[0x1E0DB63F8];
  v27 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v27(v8, v10, v5);
  sub_1BB557C68();
  sub_1BA4CDF6C(0, &qword_1EF2C7098, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1BB87CE70;
  v16 = v15 + v14;
  sub_1BA7FDE2C();
  v18 = (_QWORD *)(v16 + *(int *)(v17 + 48));
  v19 = *MEMORY[0x1E0DB6000];
  v20 = sub_1BB86D8B8();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v16, v19, v20);
  *v18 = 0x6C6F437468676972;
  v18[1] = 0xEB000000006E6D75;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0DB5BF8], v12);
  v21 = v26;
  v32 = v26;
  v22 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v22, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  swift_bridgeObjectRelease();
  v23 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v23(v8, v5);
  v33 = v28;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 6;
  *v8 = v24;
  v27(v8, v10, v5);
  v30 = v21;
  v31 = v29;
  sub_1BB86D4BC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v23)(v8, v5);
}

uint64_t sub_1BB555E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, _QWORD *);
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v35 - v19;
  v43 = a1;
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DB63C0], v17);
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  v35[1] = KeyPath;
  v36 = v18;
  v37 = v17;
  sub_1BA4C2DD8(a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v22 = (char *)v11 + v9[5];
  v23 = *MEMORY[0x1E0DB61C8];
  v24 = sub_1BB86DA20();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  v26 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 1;
  *(_QWORD *)((char *)v11 + v9[6]) = 0;
  v27 = *v26;
  *(_QWORD *)((char *)v11 + v9[7]) = v27;
  v28 = qword_1ED3BC390;
  v29 = v27;
  if (v28 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v30 = swift_release();
  v31 = MEMORY[0x1E0C80A78](v30);
  v35[-4] = v15;
  v35[-3] = v11;
  v34 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v31);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v32 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v32, MEMORY[0x1E0DB5A18]);
  v34 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v37);
}

uint64_t sub_1BB556288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD *);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  id v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t (*v60)(uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, double);
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v74 = a3;
  v71 = a2;
  v64 = a1;
  v63 = type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v63);
  v6 = (_QWORD *)((char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (_QWORD *)((char *)v59 - v11);
  v76 = a1;
  v13 = *MEMORY[0x1E0DB6410];
  v65 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 104);
  v65((char *)v59 - v11, v13, v8, v10);
  sub_1BB557C68();
  v70 = v14;
  sub_1BA4CDF6C(0, &qword_1EF2C7098, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v67 = v20;
  v68 = v19 | 7;
  v69 = v20 + v18;
  v21 = swift_allocObject();
  v66 = xmmword_1BB87CE70;
  *(_OWORD *)(v21 + 16) = xmmword_1BB87CE70;
  v22 = *MEMORY[0x1E0DB5C80];
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104);
  v72(v21 + v20, v22, v16);
  v75 = a2;
  v23 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  v25 = v24;
  v58 = sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v23, MEMORY[0x1E0DB5A18]);
  sub_1BB86D498();
  swift_bridgeObjectRelease();
  v26 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
  v26(v12, v8);
  v27 = v64;
  v76 = v64;
  v28 = sub_1BB86D438();
  v29 = swift_allocBox();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DB5A38], v28);
  *v12 = v29;
  v31 = (void (*)(uint64_t *, uint64_t, uint64_t))v65;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v65)(v12, *MEMORY[0x1E0DB6318], v8);
  v62 = v25;
  v61 = v58;
  sub_1BB86D4EC();
  v60 = (uint64_t (*)(uint64_t *, uint64_t))v26;
  v26(v12, v8);
  v76 = v27;
  v59[1] = swift_getKeyPath();
  sub_1BAA71EEC();
  v33 = v32;
  v34 = swift_allocBox();
  v36 = (char *)v35 + *(int *)(v33 + 48);
  *v35 = 2;
  v37 = *MEMORY[0x1E0DB61C8];
  v38 = sub_1BB86DA20();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
  v40(v36, v37, v38);
  *v12 = v34;
  v41 = *MEMORY[0x1E0DB6338];
  v64 = v8;
  v31(v12, v41, v8);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v66;
  v43 = (double *)(v42 + v67);
  v44 = v74 + *(int *)(type metadata accessor for A12_V20.Bound() + 24);
  *v43 = *(double *)(v44 + *(int *)(type metadata accessor for GroupLayoutContext() + 32)) * 135.0;
  v45 = v43;
  v46 = v71;
  result = ((uint64_t (*)(double *, _QWORD, uint64_t))v72)(v45, *MEMORY[0x1E0DB5CB8], v73);
  if (*(_QWORD *)(v46 + 16) < 4uLL)
  {
    __break(1u);
  }
  else
  {
    v48 = type metadata accessor for HeadlineViewLayout.Context(0);
    v49 = v46
        + ((*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80))
        + 3 * *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72);
    v50 = v63;
    v51 = (char *)v6 + *(int *)(v63 + 20);
    v40(v51, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v51, 0, 1, v38);
    v52 = (void *)*MEMORY[0x1E0DC4918];
    *v6 = 0;
    *(_QWORD *)((char *)v6 + *(int *)(v50 + 24)) = 0;
    *(_QWORD *)((char *)v6 + *(int *)(v50 + 28)) = v52;
    v53 = *MEMORY[0x1E0DC49E8];
    v54 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
    v55 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
    v56 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
    v57 = v52;
    _s8NewsFeed18HeadlineViewLayoutV16imageOnRightSide7context7options6insets11TeaTemplate0E0CyA2C10AttributesVGAC7ContextV_AC7OptionsVSo12UIEdgeInsetsVtFZ_0(v49, (uint64_t)v6, v53, v54, v55, v56);
    sub_1BA4A2E80((uint64_t)v6, type metadata accessor for HeadlineViewLayout.Options);
    sub_1BA595D14();
    sub_1BB86D4C8();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return v60(v12, v64);
  }
  return result;
}

uint64_t sub_1BB5567B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)&v16[-v7];
  v19 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 3;
  *v8 = v9;
  v10 = *MEMORY[0x1E0DB63F8];
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, v10, v5);
  v18 = a2;
  v12 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v12, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  v13 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v13(v8, v5);
  v19 = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 3;
  *v8 = v14;
  v11(v8, v10, v5);
  v17 = a2;
  sub_1BB86D4BC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v8, v5);
}

uint64_t sub_1BB55699C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  double v32;
  uint64_t (*v33)(uint64_t, _QWORD *);
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v36 - v19;
  v44 = a1;
  KeyPath = swift_getKeyPath();
  v22 = *MEMORY[0x1E0DB63C0];
  v43 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v22, v17);
  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v36[1] = KeyPath;
  v37 = v17;
  sub_1BA4C2DD8(a2+ *(_QWORD *)(v13 + 72)+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v23 = (char *)v11 + v9[5];
  v24 = *MEMORY[0x1E0DB61C8];
  v25 = sub_1BB86DA20();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  v27 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 0;
  *(_QWORD *)((char *)v11 + v9[6]) = 5;
  v28 = *v27;
  *(_QWORD *)((char *)v11 + v9[7]) = v28;
  v29 = qword_1ED3BC390;
  v30 = v28;
  if (v29 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v31 = swift_release();
  v32 = MEMORY[0x1E0C80A78](v31);
  v36[-4] = v15;
  v36[-3] = v11;
  v35 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v32);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v33 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v33, MEMORY[0x1E0DB5A18]);
  v35 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v37);
}

uint64_t sub_1BB556DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  double v32;
  uint64_t (*v33)(uint64_t, _QWORD *);
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v36 - v19;
  v44 = a1;
  KeyPath = swift_getKeyPath();
  v22 = *MEMORY[0x1E0DB63C0];
  v43 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v22, v17);
  if (*(_QWORD *)(a2 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v36[1] = KeyPath;
  v37 = v17;
  sub_1BA4C2DD8(a2+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ 2 * *(_QWORD *)(v13 + 72), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v23 = (char *)v11 + v9[5];
  v24 = *MEMORY[0x1E0DB61C8];
  v25 = sub_1BB86DA20();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  v27 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 0;
  *(_QWORD *)((char *)v11 + v9[6]) = 5;
  v28 = *v27;
  *(_QWORD *)((char *)v11 + v9[7]) = v28;
  v29 = qword_1ED3BC390;
  v30 = v28;
  if (v29 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v31 = swift_release();
  v32 = MEMORY[0x1E0C80A78](v31);
  v36[-4] = v15;
  v36[-3] = v11;
  v35 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v32);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v33 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v33, MEMORY[0x1E0DB5A18]);
  v35 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v37);
}

void sub_1BB5571B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD *);
  uint64_t (*v17)(uint64_t, _QWORD *);
  _BYTE v18[12];
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;

  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)&v18[-v7];
  v21 = a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(type metadata accessor for HeadlineViewLayout.Context(0) - 8);
    v11 = v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v20 = *(_QWORD *)(v10 + 72);
    v19 = *MEMORY[0x1E0DB63F8];
    swift_bridgeObjectRetain();
    do
    {
      v23 = a1;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = 6;
      *v8 = v12;
      v13 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v8, v19, v5);
      v22 = v18;
      MEMORY[0x1E0C80A78](v13);
      v14 = v5;
      v15 = v6;
      v16 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
      sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
      v17 = v16;
      v6 = v15;
      v5 = v14;
      sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v17, MEMORY[0x1E0DB5A18]);
      sub_1BB86D4BC();
      (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v14);
      v11 += v20;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BB5573BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  uint64_t (*v33)(uint64_t, _QWORD *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a3;
  v5 = type metadata accessor for HeadlineViewLayout.Context(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v38);
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4CDF6C(0, &qword_1EF2C7068, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v35 - v14);
  v42 = a1;
  KeyPath = swift_getKeyPath();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0x4060E00000000000;
  *v15 = v17;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DB6330], v12);
  v18 = *(_QWORD *)(v41 + 16);
  v39 = KeyPath;
  v40 = v13;
  if (v18)
  {
    v36 = a2;
    v37 = v12;
    v19 = v41 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v20 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1BA4C2DD8(v19, (uint64_t)v8, type metadata accessor for HeadlineViewLayout.Context);
      v21 = *(_QWORD *)&v8[*(int *)(v5 + 20) + 32];
      sub_1BA4A2E80((uint64_t)v8, type metadata accessor for HeadlineViewLayout.Context);
      if ((v21 & 4) == 0)
        break;
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v18 = 2;
LABEL_7:
    a2 = v36;
    v12 = v37;
  }
  v22 = v38;
  v23 = (char *)v10 + *(int *)(v38 + 20);
  v24 = *MEMORY[0x1E0DB61C8];
  v25 = sub_1BB86DA20();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  v27 = (void *)*MEMORY[0x1E0DC4918];
  *v10 = v18;
  *(uint64_t *)((char *)v10 + *(int *)(v22 + 24)) = 0;
  *(uint64_t *)((char *)v10 + *(int *)(v22 + 28)) = (uint64_t)v27;
  v28 = *MEMORY[0x1E0DC49E8];
  v29 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v30 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v31 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  v32 = v27;
  _s8NewsFeed18HeadlineViewLayoutV16imageOnRightSide7context7options6insets11TeaTemplate0E0CyA2C10AttributesVGAC7ContextV_AC7OptionsVSo12UIEdgeInsetsVtFZ_0(a2, (uint64_t)v10, v28, v29, v30, v31);
  sub_1BA4A2E80((uint64_t)v10, type metadata accessor for HeadlineViewLayout.Options);
  v33 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB557BD4(0, &qword_1EF2C7080, MEMORY[0x1E0DB5A10]);
  sub_1BB557B94(&qword_1EF2C7088, &qword_1EF2C7080, v33, MEMORY[0x1E0DB5A18]);
  sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v40 + 8))(v15, v12);
}

uint64_t sub_1BB557718@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[304];

  memcpy(v21, __src, sizeof(v21));
  sub_1BA640FB4();
  v10 = v9;
  v11 = swift_allocBox();
  v13 = v12;
  v14 = (void *)(v12 + *(int *)(v10 + 48));
  v15 = *(int *)(v10 + 64);
  sub_1BA4C2DD8(a3, v12, type metadata accessor for HeadlineViewLayout.Context);
  memcpy(v14, v21, 0x130uLL);
  v16 = a4 + *(int *)(type metadata accessor for A12_V20.Bound() + 24);
  result = type metadata accessor for GroupLayoutContext();
  v18 = *(_QWORD *)(v16 + *(int *)(result + 28));
  v19 = __OFADD__(v18, a2);
  v20 = v18 + a2;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + v15) = v20;
    *a5 = v11 | 0x4000000000000000;
  }
  return result;
}

uint64_t sub_1BB5577F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1BB554A64(a1, a2, a3);
}

uint64_t sub_1BB55780C()
{
  return sub_1BB690A28();
}

unint64_t sub_1BB55781C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB557848();
  result = sub_1BB55788C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB557848()
{
  unint64_t result;

  result = qword_1EF2C6F98;
  if (!qword_1EF2C6F98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92611C, &type metadata for A12_V20);
    atomic_store(result, (unint64_t *)&qword_1EF2C6F98);
  }
  return result;
}

unint64_t sub_1BB55788C()
{
  unint64_t result;

  result = qword_1EF2C6FA0;
  if (!qword_1EF2C6FA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926144, &type metadata for A12_V20);
    atomic_store(result, (unint64_t *)&qword_1EF2C6FA0);
  }
  return result;
}

uint64_t type metadata accessor for A12_V20.Bound()
{
  uint64_t result;

  result = qword_1EF2C7008;
  if (!qword_1EF2C7008)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB55790C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB557918(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GroupLayoutContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1BB557994()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BB5579A0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GroupLayoutContext();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BB557A14()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BB557AA0(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2C7048, (uint64_t (*)(uint64_t))type metadata accessor for A12_V20.Bound, (uint64_t)&unk_1BB9261A8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB557ADC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BB5556B8(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1BB557AE8()
{
  unint64_t result;

  result = qword_1EF2C7058;
  if (!qword_1EF2C7058)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926300, &type metadata for A12_V20.Layout);
    atomic_store(result, (unint64_t *)&qword_1EF2C7058);
  }
  return result;
}

unint64_t sub_1BB557B2C()
{
  unint64_t result;

  result = qword_1EF2C7060;
  if (!qword_1EF2C7060)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9262D0, &type metadata for A12_V20.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7060);
  }
  return result;
}

uint64_t sub_1BB557B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BB557718(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BB557B78()
{
  return swift_deallocObject();
}

uint64_t sub_1BB557B88(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB555824(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BB557B94(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BB557BD4(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BB557BD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for A12_V20.Layout;
    v8[1] = &type metadata for A12_V20.Layout.Attributes;
    v8[2] = sub_1BB557AE8();
    v8[3] = sub_1BB557B2C();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1BB557C50(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB555B88(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1BB557C58(uint64_t a1)
{
  uint64_t v1;

  sub_1BB5571B4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB557C60(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5573BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1BB557C68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C7090)
  {
    sub_1BA4CDF6C(255, &qword_1EF2C7098, (uint64_t (*)(void))sub_1BB557AE8, (uint64_t)&type metadata for A12_V20.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C7090);
  }
}

uint64_t sub_1BB557CDC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB555E88(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB557CE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB556288(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BB557CEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5567B4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB557CF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB55699C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB557CFC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB556DA8(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for A12_V20.Layout.Attributes()
{
  return &type metadata for A12_V20.Layout.Attributes;
}

ValueMetadata *type metadata accessor for A12_V20.Layout()
{
  return &type metadata for A12_V20.Layout;
}

unint64_t sub_1BB557D28()
{
  unint64_t result;

  result = qword_1EF2C70A0;
  if (!qword_1EF2C70A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926270, &type metadata for A12_V20.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C70A0);
  }
  return result;
}

unint64_t sub_1BB557D70()
{
  unint64_t result;

  result = qword_1EF2C70A8;
  if (!qword_1EF2C70A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926248, &type metadata for A12_V20.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C70A8);
  }
  return result;
}

unint64_t sub_1BB557DB8()
{
  unint64_t result;

  result = qword_1EF2C70B0;
  if (!qword_1EF2C70B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926220, &type metadata for A12_V20.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C70B0);
  }
  return result;
}

unint64_t sub_1BB557E00()
{
  unint64_t result;

  result = qword_1EF2C70B8;
  if (!qword_1EF2C70B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926298, &type metadata for A12_V20.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C70B8);
  }
  return result;
}

uint64_t sub_1BB557E44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C70C0, (uint64_t (*)(void))sub_1BB558058, (uint64_t)&type metadata for A12_V20.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB558058();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v10 = v18;
  type metadata accessor for CGRect(0);
  v23 = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3B9910, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
  sub_1BB8740D4();
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  v23 = 1;
  sub_1BA4DB848(&qword_1ED3B94B0, (uint64_t (*)(void))sub_1BA82F510, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
  v15 = v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  v10[3] = v14;
  v10[4] = v15;
  return result;
}

unint64_t sub_1BB558058()
{
  unint64_t result;

  result = qword_1EF2C70C8;
  if (!qword_1EF2C70C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9263F4, &type metadata for A12_V20.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C70C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for A12_V20.Layout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5580E8 + 4 * byte_1BB92610D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB55811C + 4 * asc_1BB926108[v4]))();
}

uint64_t sub_1BB55811C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB558124(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB55812CLL);
  return result;
}

uint64_t sub_1BB558138(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB558140);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB558144(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55814C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for A12_V20.Layout.Attributes.CodingKeys()
{
  return &type metadata for A12_V20.Layout.Attributes.CodingKeys;
}

unint64_t sub_1BB55816C()
{
  unint64_t result;

  result = qword_1EF2C70D8;
  if (!qword_1EF2C70D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9263CC, &type metadata for A12_V20.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C70D8);
  }
  return result;
}

unint64_t sub_1BB5581B4()
{
  unint64_t result;

  result = qword_1EF2C70E0;
  if (!qword_1EF2C70E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92633C, &type metadata for A12_V20.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C70E0);
  }
  return result;
}

unint64_t sub_1BB5581FC()
{
  unint64_t result;

  result = qword_1EF2C70E8;
  if (!qword_1EF2C70E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926364, &type metadata for A12_V20.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C70E8);
  }
  return result;
}

NewsFeed::FeedNativeAdContext __swiftcall FeedNativeAdContext.init(identifierToReplace:nativeAdIdentifier:)(Swift::String identifierToReplace, Swift::String nativeAdIdentifier)
{
  Swift::String *v2;
  NewsFeed::FeedNativeAdContext result;

  *v2 = identifierToReplace;
  v2[1] = nativeAdIdentifier;
  result.nativeAdIdentifier = nativeAdIdentifier;
  result.identifierToReplace = identifierToReplace;
  return result;
}

uint64_t FeedNativeAdModel.model.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t FeedNativeAdModel.context.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 36));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  *a2 = *v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 FeedNativeAdModel.init(model:nativeAdContext:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 *v11;
  __n128 result;
  __n128 v13;

  v13 = *a2;
  v8 = a2[1].n128_u64[0];
  v9 = a2[1].n128_u64[1];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v11 = (__n128 *)(a5 + *(int *)(type metadata accessor for FeedNativeAdModel(0, a3, a4, v10) + 36));
  result = v13;
  *v11 = v13;
  v11[1].n128_u64[0] = v8;
  v11[1].n128_u64[1] = v9;
  return result;
}

uint64_t static FeedNativeAdModel.== infix(_:_:)()
{
  return sub_1BB872958() & 1;
}

uint64_t sub_1BB558344()
{
  return static FeedNativeAdModel.== infix(_:_:)();
}

uint64_t FeedNativeAdContext.identifierToReplace.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeedNativeAdContext.nativeAdIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t *sub_1BB5583A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    v10[2] = v11[2];
    v10[3] = v11[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1BB55847C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5584C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BB558544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BB5585D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t sub_1BB558634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BB5586B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BB558734 + 4 * byte_1BB926450[v10]))();
  }
}

void sub_1BB5587B8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1BB5588AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BB558928);
}

void sub_1BB5588B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BB5588BCLL);
  JUMPOUT(0x1BB558928);
}

void sub_1BB558900()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BB558928);
}

void sub_1BB558908()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BB558928);
}

uint64_t sub_1BB558910(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1BB55891CLL);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1BB558928);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

BOOL static FormatContentError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormatContentError.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatContentError.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BB5589C4()
{
  unint64_t result;

  result = qword_1EF2C70F0;
  if (!qword_1EF2C70F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentError, &type metadata for FormatContentError);
    atomic_store(result, (unint64_t *)&qword_1EF2C70F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FormatContentError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB558A54 + 4 * byte_1BB926505[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB558A88 + 4 * asc_1BB926500[v4]))();
}

uint64_t sub_1BB558A88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB558A90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB558A98);
  return result;
}

uint64_t sub_1BB558AA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB558AACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB558AB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB558AB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentError()
{
  return &type metadata for FormatContentError;
}

uint64_t destroy for FormatStateMachineBinding(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1BA6C1F54(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for FormatStateMachineBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA7261E0(v6, v7, v8, v9, v10);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = v10;
  return a1;
}

uint64_t assignWithCopy for FormatStateMachineBinding(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[6];
  v5 = v2[7];
  v6 = v2[8];
  v7 = v2[9];
  LOBYTE(v2) = *((_BYTE *)v2 + 80);
  sub_1BA7261E0(v4, v5, v6, v7, (char)v2);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = (_BYTE)v2;
  sub_1BA6C1F54(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FormatStateMachineBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 80) = v5;
  sub_1BA6C1F54(v6, v7, v8, v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for FormatStateMachineBinding()
{
  return &type metadata for FormatStateMachineBinding;
}

uint64_t sub_1BB558D3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatDirectionalGradient.init(from:)(a1, a2);
}

uint64_t sub_1BB558D50(_QWORD *a1)
{
  return FormatDirectionalGradient.encode(to:)(a1);
}

uint64_t _s8NewsFeed25FormatDirectionalGradientO2eeoiySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  int v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  __int128 v48[8];
  __int128 v49[8];
  _BYTE v50[128];
  uint64_t v51;
  _BYTE v52[128];

  sub_1BA895FE8(a1, (uint64_t)v48);
  sub_1BA895FE8(a2, (uint64_t)v49);
  sub_1BA895FE8(v48, (uint64_t)v50);
  sub_1BA895FE8(v49, (uint64_t)&v51);
  sub_1BA895FE8(v48, (uint64_t)v52);
  if (sub_1BA896024((uint64_t)v52) == 1)
  {
    v3 = (__int128 *)sub_1BA896030((uint64_t)v52);
    sub_1BA895FE8(v49, (uint64_t)v47);
    v4 = sub_1BA896024((uint64_t)v47);
    v5 = (__int128 *)sub_1BA896030((uint64_t)v47);
    if (v4 == 1)
    {
      v6 = v3[5];
      v43 = v3[4];
      v44 = v6;
      v7 = v3[7];
      v45 = v3[6];
      v46 = v7;
      v8 = v3[1];
      v39 = *v3;
      v40 = v8;
      v9 = v3[3];
      v41 = v3[2];
      v42 = v9;
      v10 = v5[5];
      v35 = v5[4];
      v36 = v10;
      v11 = v5[7];
      v37 = v5[6];
      v38 = v11;
      v12 = v5[1];
      v31 = *v5;
      v32 = v12;
      v13 = v5[3];
      v33 = v5[2];
      v34 = v13;
      sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      v14 = _s8NewsFeed20FormatRadialGradientV2eeoiySbAC_ACtFZ_0(&v39, &v31);
LABEL_7:
      v26 = v14;
      sub_1BA896040((uint64_t)v50);
      sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895D94);
      sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895D94);
      return v26 & 1;
    }
  }
  else
  {
    v15 = (uint64_t *)sub_1BA896030((uint64_t)v52);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    v20 = v15[4];
    v21 = v15[5];
    v22 = v15[6];
    v23 = v15[7];
    sub_1BA895FE8(v49, (uint64_t)v47);
    v24 = sub_1BA896024((uint64_t)v47);
    v25 = sub_1BA896030((uint64_t)v47);
    if (v24 != 1)
    {
      v27 = *(_QWORD *)v25;
      v28 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)&v39 = v16;
      *((_QWORD *)&v39 + 1) = v17;
      *(_QWORD *)&v40 = v18;
      *((_QWORD *)&v40 + 1) = v19;
      *(_QWORD *)&v41 = v20;
      *((_QWORD *)&v41 + 1) = v21;
      *(_QWORD *)&v42 = v22;
      *((_QWORD *)&v42 + 1) = v23;
      *(_QWORD *)&v31 = v27;
      *((_QWORD *)&v31 + 1) = v28;
      v29 = *(_OWORD *)(v25 + 32);
      v32 = *(_OWORD *)(v25 + 16);
      v33 = v29;
      v34 = *(_OWORD *)(v25 + 48);
      sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
      v14 = _s8NewsFeed14FormatGradientV2eeoiySbAC_ACtFZ_0((uint64_t)&v39, (uint64_t)&v31);
      goto LABEL_7;
    }
  }
  sub_1BA6A0C50(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
  sub_1BA6A0C50(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1BA895C14);
  sub_1BA896040((uint64_t)v50);
  v26 = 0;
  return v26 & 1;
}

unint64_t sub_1BB558FC0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB558FE4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB558FE4()
{
  unint64_t result;

  result = qword_1EF2C70F8;
  if (!qword_1EF2C70F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDirectionalGradient, &type metadata for FormatDirectionalGradient);
    atomic_store(result, (unint64_t *)&qword_1EF2C70F8);
  }
  return result;
}

unint64_t sub_1BB559028(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAE997A8();
  a1[2] = sub_1BAEF1A88();
  result = sub_1BB55905C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB55905C()
{
  unint64_t result;

  result = qword_1EF2C7100;
  if (!qword_1EF2C7100)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatDirectionalGradient, &type metadata for FormatDirectionalGradient);
    atomic_store(result, (unint64_t *)&qword_1EF2C7100);
  }
  return result;
}

uint64_t sub_1BB5590A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for FormatDirectionalGradient()
{
  return &type metadata for FormatDirectionalGradient;
}

uint64_t FormatComputedContext.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t FormatComputedContext.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for FormatComputedContext()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for FormatComputed()
{
  return swift_lookUpClassMethod();
}

uint64_t FeedActionSender.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BB559128(v1, a1);
}

uint64_t sub_1BB559128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeedAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id FeedActionSender.sourceView.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for FeedActionSender() + 20));
}

uint64_t type metadata accessor for FeedActionSender()
{
  uint64_t result;

  result = qword_1EF2C7160;
  if (!qword_1EF2C7160)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FeedActionSender(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v39;
  char *__dst;
  uint64_t v41;
  void *__src;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for FeedAction(0);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_25:
      v35 = *(int *)(a3 + 20);
      v36 = *(void **)((char *)a2 + v35);
      *(_QWORD *)((char *)a1 + v35) = v36;
      v37 = v36;
      return a1;
    }
    v8 = type metadata accessor for FormatPurchaseData(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v19 = type metadata accessor for FormatPurchaseLandingPageData();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BB328, (void (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        v25 = *(int *)(v19 + 20);
        __dst = (char *)a1 + v25;
        v41 = v20;
        v26 = (char *)a2 + v25;
        v27 = type metadata accessor for FormatPostPurchaseData();
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        v30 = v27;
        swift_bridgeObjectRetain();
        __src = v26;
        if (v29(v26, 1, v30))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
          memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          v32 = v41;
        }
        else
        {
          v39 = v30;
          v33 = sub_1BB86C67C();
          v34 = *(_QWORD *)(v33 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(__src, 2, v33))
          {
            memcpy(__dst, __src, *(_QWORD *)(v28 + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(v34 + 16))(__dst, __src, v33);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 2, v33);
          }
          v32 = v41;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v39);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(a1, 0, 1, v19);
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        goto LABEL_25;
      }
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for FormatPostPurchaseData();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      if (v16(v13, 1, v14))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v22 = sub_1BB86C67C();
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 2, v22))
        {
          memcpy(v12, v13, *(_QWORD *)(v15 + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v12, v13, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v12, 0, 2, v22);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  v18 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

void destroy for FeedActionSender(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for FeedAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FormatPurchaseData(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for FormatPurchaseLandingPageData();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, 1, v6))
        goto LABEL_10;
      swift_bridgeObjectRelease();
      v5 = *(int *)(v6 + 20);
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_10;
      swift_bridgeObjectRelease();
      v5 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
    }
    v7 = a1 + v5;
    v8 = type metadata accessor for FormatPostPurchaseData();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v9 = sub_1BB86C67C();
      v10 = *(_QWORD *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 2, v9))
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
    }
  }
LABEL_10:

}

_QWORD *initializeWithCopy for FeedActionSender(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v37;
  char *__dst;
  uint64_t v39;
  void *__src;

  v6 = type metadata accessor for FeedAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for FormatPurchaseData(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v17 = type metadata accessor for FormatPurchaseLandingPageData();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BB328, (void (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        v23 = *(int *)(v17 + 20);
        __dst = (char *)a1 + v23;
        v39 = v18;
        v24 = (char *)a2 + v23;
        v25 = type metadata accessor for FormatPostPurchaseData();
        v26 = *(_QWORD *)(v25 - 8);
        v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        v28 = v25;
        swift_bridgeObjectRetain();
        __src = v24;
        if (v27(v24, 1, v28))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
          memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
          v30 = v39;
        }
        else
        {
          v37 = v28;
          v31 = sub_1BB86C67C();
          v32 = *(_QWORD *)(v31 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(__src, 2, v31))
          {
            memcpy(__dst, __src, *(_QWORD *)(v26 + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(v32 + 16))(__dst, __src, v31);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 2, v31);
          }
          v30 = v39;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v37);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v17);
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_22:
        swift_storeEnumTagMultiPayload();
        goto LABEL_23;
      }
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for FormatPostPurchaseData();
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      swift_bridgeObjectRetain();
      if (v15(v12, 1, v13))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v20 = sub_1BB86C67C();
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 2, v20))
        {
          memcpy(v11, v12, *(_QWORD *)(v14 + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v11, v12, v20);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v11, 0, 2, v20);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_23:
  v33 = *(int *)(a3 + 20);
  v34 = *(void **)((char *)a2 + v33);
  *(_QWORD *)((char *)a1 + v33) = v34;
  v35 = v34;
  return a1;
}

_QWORD *assignWithCopy for FeedActionSender(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v36;
  char *__dst;
  uint64_t v38;
  void *__src;

  if (a1 != a2)
  {
    sub_1BB559DE0((uint64_t)a1);
    v6 = type metadata accessor for FeedAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for FormatPurchaseData(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        v16 = type metadata accessor for FormatPurchaseLandingPageData();
        v17 = *(_QWORD *)(v16 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BB328, (void (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          *a1 = *a2;
          a1[1] = a2[1];
          v21 = *(int *)(v16 + 20);
          __dst = (char *)a1 + v21;
          v38 = v17;
          v22 = (char *)a2 + v21;
          v23 = type metadata accessor for FormatPostPurchaseData();
          v24 = *(_QWORD *)(v23 - 8);
          v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
          v26 = v23;
          swift_bridgeObjectRetain();
          __src = v22;
          if (v25(v22, 1, v26))
          {
            sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
            memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
            v28 = v38;
          }
          else
          {
            v36 = v26;
            v29 = sub_1BB86C67C();
            v30 = *(_QWORD *)(v29 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(__src, 2, v29))
            {
              memcpy(__dst, __src, *(_QWORD *)(v24 + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v30 + 16))(__dst, __src, v29);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 2, v29);
            }
            v28 = v38;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v36);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v16);
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_23:
          swift_storeEnumTagMultiPayload();
          goto LABEL_24;
        }
        *a1 = *a2;
        a1[1] = a2[1];
        v9 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for FormatPostPurchaseData();
        v13 = *(_QWORD *)(v12 - 8);
        v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
        swift_bridgeObjectRetain();
        if (v14(v11, 1, v12))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        }
        else
        {
          v19 = sub_1BB86C67C();
          v20 = *(_QWORD *)(v19 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 2, v19))
          {
            memcpy(v10, v11, *(_QWORD *)(v13 + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v10, v11, v19);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v10, 0, 2, v19);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_24:
  v31 = *(int *)(a3 + 20);
  v32 = *(void **)((char *)a2 + v31);
  v33 = *(void **)((char *)a1 + v31);
  *(_QWORD *)((char *)a1 + v31) = v32;
  v34 = v32;

  return a1;
}

uint64_t sub_1BB559DE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeedAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FeedActionSender(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  void (**__dst)(void *, const void *, uint64_t);
  char *__dsta;

  v6 = type metadata accessor for FeedAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for FormatPurchaseData(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v15 = type metadata accessor for FormatPurchaseLandingPageData();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BB328, (void (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v19 = *(int *)(v15 + 20);
        __dsta = (char *)a1 + v19;
        v20 = (char *)a2 + v19;
        v21 = type metadata accessor for FormatPostPurchaseData();
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
          memcpy(__dsta, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          v30 = v22;
          v24 = sub_1BB86C67C();
          v29 = *(_QWORD *)(v24 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 2, v24))
          {
            v25 = v30;
            v26 = v20;
            v27 = __dsta;
            memcpy(__dsta, v26, *(_QWORD *)(v30 + 64));
          }
          else
          {
            v27 = __dsta;
            (*(void (**)(void))(v29 + 32))();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 2, v24);
            v25 = v30;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v21);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_23:
        swift_storeEnumTagMultiPayload();
        goto LABEL_24;
      }
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for FormatPostPurchaseData();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v18 = sub_1BB86C67C();
        __dst = *(void (***)(void *, const void *, uint64_t))(v18 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__dst[6])(v11, 2, v18))
        {
          memcpy(v10, v11, *(_QWORD *)(v13 + 64));
        }
        else
        {
          __dst[4](v10, v11, v18);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dst[7])(v10, 0, 2, v18);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_23;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_24:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for FeedActionSender(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  void (**__dst)(void *, const void *, uint64_t);
  char *__dsta;

  if (a1 != a2)
  {
    sub_1BB559DE0((uint64_t)a1);
    v6 = type metadata accessor for FeedAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for FormatPurchaseData(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        v15 = type metadata accessor for FormatPurchaseLandingPageData();
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BB328, (void (*)(uint64_t))type metadata accessor for FormatPurchaseLandingPageData);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          *a1 = *a2;
          v19 = *(int *)(v15 + 20);
          __dsta = (char *)a1 + v19;
          v20 = (char *)a2 + v19;
          v21 = type metadata accessor for FormatPostPurchaseData();
          v22 = *(_QWORD *)(v21 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
          {
            sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
            memcpy(__dsta, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          }
          else
          {
            v32 = v22;
            v24 = sub_1BB86C67C();
            v31 = *(_QWORD *)(v24 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v20, 2, v24))
            {
              v25 = v32;
              v26 = v20;
              v27 = __dsta;
              memcpy(__dsta, v26, *(_QWORD *)(v32 + 64));
            }
            else
            {
              v27 = __dsta;
              (*(void (**)(void))(v31 + 32))();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dsta, 0, 2, v24);
              v25 = v32;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v21);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_24:
          swift_storeEnumTagMultiPayload();
          goto LABEL_25;
        }
        *a1 = *a2;
        v9 = *(int *)(type metadata accessor for OsloSheetPurchaseDataModel(0) + 20);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for FormatPostPurchaseData();
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        {
          sub_1BA4A3FB4(0, &qword_1ED3BECA8, (void (*)(uint64_t))type metadata accessor for FormatPostPurchaseData);
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          v18 = sub_1BB86C67C();
          __dst = *(void (***)(void *, const void *, uint64_t))(v18 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))__dst[6])(v11, 2, v18))
          {
            memcpy(v10, v11, *(_QWORD *)(v13 + 64));
          }
          else
          {
            __dst[4](v10, v11, v18);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dst[7])(v10, 0, 2, v18);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_24;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_25:
  v28 = *(int *)(a3 + 20);
  v29 = *(void **)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);

  return a1;
}

uint64_t getEnumTagSinglePayload for FeedActionSender()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB55A538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for FeedAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedActionSender()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB55A5C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FeedAction(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1BB55A638()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FeedAction(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t FormatFrameNodeLayoutAttributes.__allocating_init(identifier:layoutIdentifier:contentIdentifier:frame:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 56) = a6;
  *(double *)(result + 64) = a7;
  *(double *)(result + 72) = a8;
  *(double *)(result + 80) = a9;
  *(double *)(result + 88) = a10;
  return result;
}

uint64_t FormatFrameNodeLayoutAttributes.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatFrameNodeLayoutAttributes.layoutIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatFrameNodeLayoutAttributes.contentIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double FormatFrameNodeLayoutAttributes.frame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t FormatFrameNodeLayoutAttributes.init(identifier:layoutIdentifier:contentIdentifier:frame:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 56) = a6;
  *(double *)(v10 + 64) = a7;
  *(double *)(v10 + 72) = a8;
  *(double *)(v10 + 80) = a9;
  *(double *)(v10 + 88) = a10;
  return v10;
}

uint64_t sub_1BB55A7E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB55A818 + 4 * byte_1BB9267B0[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1BB55A818()
{
  return 0xD000000000000010;
}

unint64_t sub_1BB55A834()
{
  return 0xD000000000000011;
}

uint64_t sub_1BB55A854()
{
  return 0x656D617266;
}

uint64_t sub_1BB55A868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB55B1CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB55A88C()
{
  sub_1BB55AAE4();
  return sub_1BB874710();
}

uint64_t sub_1BB55A8B4()
{
  sub_1BB55AAE4();
  return sub_1BB87471C();
}

uint64_t FormatFrameNodeLayoutAttributes.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatFrameNodeLayoutAttributes.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FormatFrameNodeLayoutAttributes.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE v12[16];
  __int128 v13;
  __int128 v14;

  v3 = v1;
  sub_1BB55ADDC(0, &qword_1EF2C7198, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB55AAE4();
  sub_1BB8746C8();
  LOBYTE(v13) = 0;
  sub_1BB87417C();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1BB87417C();
    LOBYTE(v13) = 2;
    sub_1BB87417C();
    v10 = *(_OWORD *)(v3 + 80);
    v13 = *(_OWORD *)(v3 + 64);
    v14 = v10;
    v12[15] = 3;
    type metadata accessor for CGRect(0);
    sub_1BA50AD30(&qword_1EF2A9A18, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1BB55AAE4()
{
  unint64_t result;

  result = qword_1EF2C71A0;
  if (!qword_1EF2C71A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9269F4, &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71A0);
  }
  return result;
}

uint64_t FormatFrameNodeLayoutAttributes.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FormatFrameNodeLayoutAttributes.init(from:)(a1);
  return v2;
}

uint64_t FormatFrameNodeLayoutAttributes.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;

  sub_1BB55ADDC(0, &qword_1EF2C71A8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v16 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB55AAE4();
  sub_1BB87468C();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v5;
    LOBYTE(v17) = 0;
    v9 = v16;
    *(_QWORD *)(v1 + 16) = sub_1BB874098();
    *(_QWORD *)(v1 + 24) = v10;
    LOBYTE(v17) = 1;
    *(_QWORD *)(v1 + 32) = sub_1BB874098();
    *(_QWORD *)(v1 + 40) = v11;
    LOBYTE(v17) = 2;
    *(_QWORD *)(v1 + 48) = sub_1BB874098();
    *(_QWORD *)(v1 + 56) = v12;
    type metadata accessor for CGRect(0);
    v19 = 3;
    sub_1BA50AD30((unint64_t *)&unk_1ED3B9910, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
    v14 = v18;
    *(_OWORD *)(v1 + 64) = v17;
    *(_OWORD *)(v1 + 80) = v14;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

void sub_1BB55ADDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB55AAE4();
    v7 = a3(a1, &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BB55AE38(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C71B0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatFrameNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatFrameNodeLayoutAttributes);
}

uint64_t type metadata accessor for FormatFrameNodeLayoutAttributes()
{
  return objc_opt_self();
}

uint64_t sub_1BB55AE84(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C30C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatFrameNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatFrameNodeLayoutAttributes);
}

uint64_t sub_1BB55AEB0(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C3120, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatFrameNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatFrameNodeLayoutAttributes);
}

uint64_t sub_1BB55AEDC(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C71B8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatFrameNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatFrameNodeLayoutAttributes);
}

uint64_t sub_1BB55AF08@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = FormatFrameNodeLayoutAttributes.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1BB55AF5C(_QWORD *a1)
{
  return FormatFrameNodeLayoutAttributes.encode(to:)(a1);
}

uint64_t sub_1BB55AF7C(uint64_t a1, uint64_t a2)
{
  sub_1BA50AD30(&qword_1EF2C3170, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatFrameNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatFrameNodeLayoutAttributes);
  return sub_1BB86D96C();
}

uint64_t method lookup function for FormatFrameNodeLayoutAttributes()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatFrameNodeLayoutAttributes.__allocating_init(identifier:layoutIdentifier:contentIdentifier:frame:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FormatFrameNodeLayoutAttributes.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for FormatFrameNodeLayoutAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB55B074 + 4 * byte_1BB9267B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB55B0A8 + 4 * byte_1BB9267B4[v4]))();
}

uint64_t sub_1BB55B0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55B0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB55B0B8);
  return result;
}

uint64_t sub_1BB55B0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB55B0CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB55B0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55B0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatFrameNodeLayoutAttributes.CodingKeys()
{
  return &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys;
}

unint64_t sub_1BB55B0F8()
{
  unint64_t result;

  result = qword_1EF2C71C0;
  if (!qword_1EF2C71C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9269CC, &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71C0);
  }
  return result;
}

unint64_t sub_1BB55B140()
{
  unint64_t result;

  result = qword_1EF2C71C8;
  if (!qword_1EF2C71C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92693C, &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71C8);
  }
  return result;
}

unint64_t sub_1BB55B188()
{
  unint64_t result;

  result = qword_1EF2C71D0;
  if (!qword_1EF2C71D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926964, &type metadata for FormatFrameNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71D0);
  }
  return result;
}

uint64_t sub_1BB55B1CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB961EB0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB97C920 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D617266 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t FeedGroupGroupingRulesOverrides.maxInaccessibleHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxEvergreenHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxPublisherOccurrences.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxAIGCHeadlines.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.topicDiversity.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.minTagCTRRelativeToBaseline.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxInaccessibleHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxEvergreenHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxPublisherOccurrencesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.maxAIGCHeadlinesDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupGroupingRulesOverrides.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  sub_1BB55C40C(0, &qword_1ED3AE6A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB55B750();
  sub_1BB87468C();
  if (!v2)
  {
    sub_1BA5ECC44();
    v26 = 0;
    sub_1BA4A2870(&qword_1ED3C5E50, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    v25 = v7;
    sub_1BB874020();
    v24 = v27;
    v26 = 1;
    sub_1BB874020();
    v23 = v27;
    v26 = 2;
    sub_1BB874020();
    v22 = v27;
    v26 = 3;
    sub_1BB874020();
    v21 = v27;
    sub_1BA839ECC();
    v26 = 4;
    sub_1BA4A2870(&qword_1ED3A5040, (uint64_t (*)(uint64_t))sub_1BA839ECC, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v20 = v27;
    sub_1BA5ECCB8();
    v26 = 5;
    sub_1BA4A2870(&qword_1ED3C5E40, (uint64_t (*)(uint64_t))sub_1BA5ECCB8, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v19 = v27;
    sub_1BA521E1C();
    v26 = 6;
    sub_1BA4A2870(&qword_1ED3A28D0, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v18 = v27;
    v26 = 7;
    sub_1BB874020();
    v17 = v27;
    v26 = 8;
    sub_1BB874020();
    v10 = v27;
    v26 = 9;
    sub_1BB874020();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
    v11 = v27;
    v12 = v23;
    *a2 = v24;
    a2[1] = v12;
    v13 = v21;
    a2[2] = v22;
    a2[3] = v13;
    v14 = v19;
    a2[4] = v20;
    a2[5] = v14;
    v15 = v17;
    a2[6] = v18;
    a2[7] = v15;
    a2[8] = v10;
    a2[9] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1BB55B750()
{
  unint64_t result;

  result = qword_1ED3AD370;
  if (!qword_1ED3AD370)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926BF4, &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3AD370);
  }
  return result;
}

uint64_t sub_1BB55B798(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BB55B7D4 + 4 * byte_1BB926A50[a1]))(0xD000000000000018, 0x80000001BB967720);
}

uint64_t sub_1BB55B7D4()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1BB55B88C()
{
  unsigned __int8 *v0;

  return sub_1BB55B798(*v0);
}

uint64_t sub_1BB55B894()
{
  sub_1BB55B750();
  return sub_1BB874710();
}

uint64_t sub_1BB55B8BC()
{
  sub_1BB55B750();
  return sub_1BB87471C();
}

uint64_t FeedGroupGroupingRulesOverrides.encode(to:)(_QWORD *a1)
{
  char **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;

  sub_1BB55C40C(0, &qword_1EF2C71D8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  v10 = *v1;
  v9 = v1[1];
  v24 = v1[2];
  v25 = v9;
  v11 = v1[3];
  v22 = v1[4];
  v23 = v11;
  v12 = v1[5];
  v20 = v1[6];
  v21 = v12;
  v13 = v1[7];
  v18 = v1[8];
  v19 = v13;
  v17 = v1[9];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB55B750();
  sub_1BB8746C8();
  v27 = v10;
  v26 = 0;
  sub_1BA5ECC44();
  sub_1BA4A2870(qword_1ED3A5078, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB87414C();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v23;
  v14 = v24;
  v27 = v25;
  v26 = 1;
  sub_1BB87414C();
  v27 = v14;
  v26 = 2;
  v25 = v8;
  sub_1BB87414C();
  v27 = v15;
  v26 = 3;
  sub_1BB87414C();
  v27 = v22;
  v26 = 4;
  sub_1BA839ECC();
  sub_1BA4A2870(&qword_1ED3A5038, (uint64_t (*)(uint64_t))sub_1BA839ECC, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB87414C();
  v27 = v21;
  v26 = 5;
  sub_1BA5ECCB8();
  sub_1BA4A2870(&qword_1ED3A5070, (uint64_t (*)(uint64_t))sub_1BA5ECCB8, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB87414C();
  v27 = v20;
  v26 = 6;
  sub_1BA521E1C();
  sub_1BA4A2870(&qword_1ED3A28C8, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
  sub_1BB87414C();
  v27 = v19;
  v26 = 7;
  sub_1BB87414C();
  v27 = v18;
  v26 = 8;
  sub_1BB87414C();
  v27 = v17;
  v26 = 9;
  sub_1BB87414C();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v25, v5);
}

uint64_t sub_1BB55BCCC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FeedGroupGroupingRulesOverrides.init(from:)(a1, a2);
}

uint64_t sub_1BB55BCE0(_QWORD *a1)
{
  return FeedGroupGroupingRulesOverrides.encode(to:)(a1);
}

uint64_t _s8NewsFeed0B27GroupGroupingRulesOverridesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v11 = a1[8];
  v10 = a1[9];
  v13 = *a2;
  v12 = a2[1];
  v15 = a2[2];
  result = a2[3];
  v17 = a2[4];
  v16 = a2[5];
  v19 = a2[6];
  v18 = a2[7];
  v21 = a2[8];
  v20 = a2[9];
  if (v2)
  {
    if (!v13)
      return 0;
    if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v13 + 16))
      return 0;
    v22 = *(_QWORD *)(v2 + 24);
    v57 = v9;
    v23 = a2[8];
    v24 = v11;
    v25 = a2[9];
    v26 = v10;
    v27 = *(_QWORD *)(v13 + 24);
    v91 = a2[7];
    v80 = a2[5];
    v85 = a2[6];
    v68 = a2[4];
    v72 = v6;
    v62 = a2[3];
    v65 = v7;
    v76 = v8;
    v58 = v4;
    v60 = v5;
    v56 = a2[2];
    swift_retain();
    swift_retain();
    v28 = v27;
    v10 = v26;
    v20 = v25;
    v11 = v24;
    v21 = v23;
    v9 = v57;
    LOBYTE(v22) = sub_1BA893E60(v22, v28);
    swift_release();
    swift_release();
    v15 = v56;
    v4 = v58;
    v5 = v60;
    result = v62;
    v7 = v65;
    v17 = v68;
    v6 = v72;
    v16 = v80;
    v19 = v85;
    v8 = v76;
    v18 = v91;
    if ((v22 & 1) == 0)
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  if (v3)
  {
    if (!v12)
      return 0;
    if (*(_QWORD *)(v3 + 16) != *(_QWORD *)(v12 + 16))
      return 0;
    v29 = *(_QWORD *)(v3 + 24);
    v30 = *(_QWORD *)(v12 + 24);
    v92 = v18;
    v81 = v16;
    v86 = v19;
    v69 = v17;
    v73 = v6;
    v63 = result;
    v66 = v7;
    v77 = v8;
    v59 = v4;
    v61 = v5;
    v31 = v15;
    swift_retain();
    swift_retain();
    LOBYTE(v29) = sub_1BA893E60(v29, v30);
    swift_release();
    swift_release();
    v15 = v31;
    v4 = v59;
    v5 = v61;
    result = v63;
    v7 = v66;
    v17 = v69;
    v6 = v73;
    v16 = v81;
    v19 = v86;
    v8 = v77;
    v18 = v92;
    if ((v29 & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  if (v4)
  {
    if (!v15)
      return 0;
    if (*(_QWORD *)(v4 + 16) != *(_QWORD *)(v15 + 16))
      return 0;
    v32 = *(_QWORD *)(v4 + 24);
    v33 = *(_QWORD *)(v15 + 24);
    v93 = v18;
    v82 = v16;
    v87 = v19;
    v70 = v17;
    v74 = v6;
    v64 = result;
    v67 = v7;
    v78 = v8;
    v34 = v5;
    swift_retain();
    swift_retain();
    LOBYTE(v32) = sub_1BA893E60(v32, v33);
    swift_release();
    swift_release();
    result = v64;
    v7 = v67;
    v5 = v34;
    v17 = v70;
    v6 = v74;
    v16 = v82;
    v19 = v87;
    v8 = v78;
    v18 = v93;
    if ((v32 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  if (!v5)
  {
    if (result)
      return 0;
LABEL_27:
    if (v7)
    {
      if (!v17)
        return 0;
      v95 = v18;
      v84 = v16;
      v89 = v19;
      v38 = v17;
      v39 = v8;
      v40 = v6;
      swift_retain();
      v41 = swift_retain();
      v42 = sub_1BB55C8C8(v41, v38);
      swift_release();
      swift_release();
      v16 = v84;
      v19 = v89;
      v6 = v40;
      v8 = v39;
      v18 = v95;
      if ((v42 & 1) == 0)
        return 0;
    }
    else if (v17)
    {
      return 0;
    }
    if (v6)
    {
      if (!v16)
        return 0;
      if (*(double *)(v6 + 16) != *(double *)(v16 + 16))
        return 0;
      v43 = *(_QWORD *)(v6 + 24);
      v44 = *(_QWORD *)(v16 + 24);
      v96 = v18;
      v90 = v19;
      v45 = v8;
      swift_retain();
      swift_retain();
      LOBYTE(v43) = sub_1BA894130(v43, v44);
      swift_release();
      swift_release();
      v19 = v90;
      v8 = v45;
      v18 = v96;
      if ((v43 & 1) == 0)
        return 0;
    }
    else if (v16)
    {
      return 0;
    }
    v46 = v9;
    v47 = v21;
    v48 = v11;
    if (v8)
    {
      if (!v19)
        return 0;
      v49 = v8;
      v50 = v18;
      v51 = v19;
      sub_1BB86D078();
      sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
      swift_retain();
      swift_retain();
      if ((sub_1BB872958() & 1) == 0)
        goto LABEL_49;
      v52 = sub_1BA892EC0(*(_QWORD *)(v49 + *(_QWORD *)(*(_QWORD *)v49 + 120)), *(_QWORD *)(v51 + *(_QWORD *)(*(_QWORD *)v51 + 120)));
      swift_release();
      swift_release();
      if ((v52 & 1) == 0)
        return 0;
    }
    else
    {
      v50 = v18;
      if (v19)
        return 0;
    }
    if (!v46)
    {
      if (v50)
        return 0;
LABEL_51:
      if (v48)
      {
        if (!v47)
          return 0;
        sub_1BB86D078();
        sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
        swift_retain();
        swift_retain();
        if ((sub_1BB872958() & 1) == 0)
          goto LABEL_49;
        v54 = sub_1BA892EC0(*(_QWORD *)(v48 + *(_QWORD *)(*(_QWORD *)v48 + 120)), *(_QWORD *)(v47 + *(_QWORD *)(*(_QWORD *)v47 + 120)));
        swift_release();
        swift_release();
        if ((v54 & 1) == 0)
          return 0;
      }
      else if (v47)
      {
        return 0;
      }
      if (!v10)
        return !v20;
      if (v20)
      {
        sub_1BB86D078();
        sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
        swift_retain();
        swift_retain();
        if ((sub_1BB872958() & 1) != 0)
        {
          v55 = sub_1BA892EC0(*(_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 120)), *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 120)));
          swift_release();
          swift_release();
          return (v55 & 1) != 0;
        }
        goto LABEL_49;
      }
      return 0;
    }
    if (!v50)
      return 0;
    sub_1BB86D078();
    sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
    swift_retain();
    swift_retain();
    if ((sub_1BB872958() & 1) != 0)
    {
      v53 = sub_1BA892EC0(*(_QWORD *)(v46 + *(_QWORD *)(*(_QWORD *)v46 + 120)), *(_QWORD *)(v50 + *(_QWORD *)(*(_QWORD *)v50 + 120)));
      swift_release();
      swift_release();
      if ((v53 & 1) == 0)
        return 0;
      goto LABEL_51;
    }
LABEL_49:
    swift_release();
    swift_release();
    return 0;
  }
  if (result)
  {
    if (*(_QWORD *)(v5 + 16) != *(_QWORD *)(result + 16))
      return 0;
    v35 = *(_QWORD *)(v5 + 24);
    v36 = *(_QWORD *)(result + 24);
    v94 = v18;
    v83 = v16;
    v88 = v19;
    v71 = v17;
    v75 = v6;
    v79 = v8;
    v37 = v7;
    swift_retain();
    swift_retain();
    LOBYTE(v35) = sub_1BA893E60(v35, v36);
    swift_release();
    swift_release();
    v17 = v71;
    v6 = v75;
    v7 = v37;
    v16 = v83;
    v19 = v88;
    v8 = v79;
    v18 = v94;
    if ((v35 & 1) == 0)
      return 0;
    goto LABEL_27;
  }
  return result;
}

void sub_1BB55C40C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB55B750();
    v7 = a3(a1, &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

_QWORD *assignWithCopy for FeedGroupGroupingRulesOverrides(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedGroupGroupingRulesOverrides(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupGroupingRulesOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupGroupingRulesOverrides()
{
  return &type metadata for FeedGroupGroupingRulesOverrides;
}

uint64_t storeEnumTagSinglePayload for FeedGroupGroupingRulesOverrides.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BB55C6A4 + 4 * byte_1BB926A5F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BB55C6D8 + 4 * byte_1BB926A5A[v4]))();
}

uint64_t sub_1BB55C6D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55C6E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB55C6E8);
  return result;
}

uint64_t sub_1BB55C6F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB55C6FCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BB55C700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55C708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupGroupingRulesOverrides.CodingKeys()
{
  return &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys;
}

unint64_t sub_1BB55C728()
{
  unint64_t result;

  result = qword_1EF2C71E0;
  if (!qword_1EF2C71E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926BCC, &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71E0);
  }
  return result;
}

unint64_t sub_1BB55C770()
{
  unint64_t result;

  result = qword_1ED3AD380[0];
  if (!qword_1ED3AD380[0])
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926B3C, &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys);
    atomic_store(result, qword_1ED3AD380);
  }
  return result;
}

unint64_t sub_1BB55C7B8()
{
  unint64_t result;

  result = qword_1ED3AD378;
  if (!qword_1ED3AD378)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926B64, &type metadata for FeedGroupGroupingRulesOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3AD378);
  }
  return result;
}

uint64_t sub_1BB55C7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 112);
  v3 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (*(double *)v2 == *(double *)v3
    && sub_1BA892D54(*(_QWORD *)(v2 + 8), *(_QWORD *)(v3 + 8))
    && (v6 = type metadata accessor for FeedGroupBundleArticleQuotas(),
        (MEMORY[0x1BCCDD97C](v2 + *(int *)(v6 + 24), v3 + *(int *)(v6 + 24)) & 1) != 0)
    && (sub_1BA893E44(*(_QWORD *)(v2 + *(int *)(v6 + 28)), *(_QWORD *)(v3 + *(int *)(v6 + 28))) & 1) != 0)
  {
    return sub_1BA8938F4(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120)), *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 120)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1BB55C8C8(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
      v6 = *(_BYTE *)(a2 + 40);
    else
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (!v5)
      return 0;
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_1BA6EB330(v7, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      return 0;
    return sub_1BA8943F8(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  }
  if (!v5)
    return sub_1BA8943F8(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  return 0;
}

uint64_t sub_1BB55C9AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BB55C9E4 + 4 * byte_1BB926C50[a1]))(0xD000000000000010, 0x80000001BB959980);
}

uint64_t sub_1BB55CA7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BB55CAB4 + 4 * byte_1BB926C59[a1]))(0xD000000000000010, 0x80000001BB959980);
}

void sub_1BB55CB4C(char *a1)
{
  sub_1BB804AB8(*a1);
}

uint64_t sub_1BB55CB58()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA9D44E4((uint64_t)v3, v1);
  return sub_1BB874608();
}

void sub_1BB55CB9C(uint64_t a1)
{
  char *v1;

  sub_1BA9D44E4(a1, *v1);
}

uint64_t sub_1BB55CBA4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA9D44E4((uint64_t)v3, v1);
  return sub_1BB874608();
}

uint64_t sub_1BB55CBE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB55E674();
  *a1 = result;
  return result;
}

uint64_t sub_1BB55CC10@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BB55C9AC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BB55CC38()
{
  unsigned __int8 *v0;

  return sub_1BB55CA7C(*v0);
}

uint64_t sub_1BB55CC40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB55E674();
  *a1 = result;
  return result;
}

uint64_t sub_1BB55CC64()
{
  sub_1BB55D22C();
  return sub_1BB874710();
}

uint64_t sub_1BB55CC8C()
{
  sub_1BB55D22C();
  return sub_1BB87471C();
}

uint64_t FeedGroupClusteringKnobsOverrides.minNumberOfItems.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.maxNumberOfItems.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.bundleArticleQuotas.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.explicitSlotBundleArticleQuotas.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.groupingRules.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  v10 = v1[12];
  v11 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  return sub_1BA87070C(v2);
}

uint64_t FeedGroupClusteringKnobsOverrides.minNumberOfItemsDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.maxNumberOfItemsDepthTransform.getter()
{
  return swift_retain();
}

uint64_t FeedGroupClusteringKnobsOverrides.splittingConfiguration.getter()
{
  return swift_retain();
}

__n128 FeedGroupClusteringKnobsOverrides.init(minNumberOfItems:maxNumberOfItems:bundleArticleQuotas:explicitSlotBundleArticleQuotas:groupingRules:minNumberOfItemsDepthTransform:maxNumberOfItemsDepthTransform:splittingConfiguration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int128 v9;
  __int128 v10;
  __n128 result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v9 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a9 + 48) = v9;
  v10 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a9 + 80) = v10;
  result = *(__n128 *)(a5 + 64);
  *(__n128 *)(a9 + 96) = result;
  *(_QWORD *)(a9 + 112) = a6;
  *(_QWORD *)(a9 + 120) = a7;
  *(_QWORD *)(a9 + 128) = a8;
  return result;
}

uint64_t FeedGroupClusteringKnobsOverrides.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_1BB55D1D4();
  v6 = v5;
  v50 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v24 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB55D22C();
  sub_1BB87468C();
  if (v2)
  {
    v12 = (uint64_t)a1;
  }
  else
  {
    v34 = a1;
    sub_1BA5ECC44();
    LOBYTE(v39) = 0;
    sub_1BA4A2870(&qword_1ED3C5E50, (uint64_t (*)(uint64_t))sub_1BA5ECC44, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v33 = v49;
    LOBYTE(v39) = 1;
    sub_1BB874020();
    v32 = v48;
    sub_1BA870800();
    LOBYTE(v39) = 3;
    sub_1BA4A2870(&qword_1ED3A5028, (uint64_t (*)(uint64_t))sub_1BA870800, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v13 = v46;
    v14 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v8, v11, v6);
    if (v13)
    {
      v25 = *(void (**)(char *, uint64_t))(v14 + 8);
      v25(v8, v6);
      v26 = v13;
      v47 = v13;
    }
    else
    {
      LOBYTE(v39) = 2;
      sub_1BB874020();
      v25 = *(void (**)(char *, uint64_t))(v14 + 8);
      v25(v8, v6);
      v26 = v47;
    }
    sub_1BB55D270();
    LOBYTE(v39) = 4;
    sub_1BA4A2870(&qword_1ED3A28E0, (uint64_t (*)(uint64_t))sub_1BB55D270, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v50 = v45;
    LOBYTE(v38) = 5;
    sub_1BB55D448();
    sub_1BB874020();
    v31 = v39;
    v30 = v40;
    v29 = v41;
    v28 = v42;
    v15 = v44;
    v27 = v43;
    sub_1BA521E1C();
    LOBYTE(v37) = 6;
    sub_1BA4A2870(&qword_1ED3A28D0, (uint64_t (*)(uint64_t))sub_1BA521E1C, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v16 = v38;
    LOBYTE(v36) = 7;
    sub_1BB874020();
    v17 = v37;
    sub_1BA870958();
    v35 = 8;
    sub_1BA4A2870(&qword_1ED3A28A8, (uint64_t (*)(uint64_t))sub_1BA870958, (uint64_t)&protocol conformance descriptor for FeedGroupKnobsRuleValue<A>);
    sub_1BB874020();
    v25(v11, v6);
    v18 = v36;
    v19 = v32;
    *(_QWORD *)a2 = v33;
    *(_QWORD *)(a2 + 8) = v19;
    v20 = v50;
    *(_QWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v20;
    v21 = v30;
    *(_OWORD *)(a2 + 32) = v31;
    *(_OWORD *)(a2 + 48) = v21;
    v22 = v28;
    *(_OWORD *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 80) = v22;
    *(_QWORD *)(a2 + 96) = v27;
    *(_QWORD *)(a2 + 104) = v15;
    *(_QWORD *)(a2 + 112) = v16;
    *(_QWORD *)(a2 + 120) = v17;
    *(_QWORD *)(a2 + 128) = v18;
    v12 = (uint64_t)v34;
  }
  return __swift_destroy_boxed_opaque_existential_1(v12);
}

void sub_1BB55D1D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A30E0)
  {
    sub_1BB55D22C();
    v0 = sub_1BB874104();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A30E0);
  }
}

unint64_t sub_1BB55D22C()
{
  unint64_t result;

  result = qword_1ED3A2900;
  if (!qword_1ED3A2900)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926E00, &type metadata for FeedGroupClusteringKnobsOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2900);
  }
  return result;
}

uint64_t sub_1BB55D270()
{
  uint64_t result;

  result = qword_1ED3A28E8;
  if (!qword_1ED3A28E8)
  {
    sub_1BB55D33C();
    sub_1BB55D3C8(&qword_1ED3A2F10, sub_1BB55D390, MEMORY[0x1E0DEAF40]);
    sub_1BB55D3C8(&qword_1ED3A2F00, sub_1BB55D3AC, MEMORY[0x1E0DEAF10]);
    sub_1BB55D3C8(&qword_1ED3A2F08, sub_1BB55D42C, MEMORY[0x1E0DEAF30]);
    type metadata accessor for FeedGroupKnobsRuleValue();
  }
  return result;
}

void sub_1BB55D33C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A2EF8)
  {
    type metadata accessor for FeedGroupExplicitSlotBundleArticleQuota();
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A2EF8);
  }
}

uint64_t sub_1BB55D390()
{
  return sub_1BA4A2870(&qword_1ED3A2930, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupExplicitSlotBundleArticleQuota, (uint64_t)&protocol conformance descriptor for FeedGroupExplicitSlotBundleArticleQuota);
}

uint64_t sub_1BB55D3AC()
{
  return sub_1BA4A2870(&qword_1ED3A2920, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupExplicitSlotBundleArticleQuota, (uint64_t)&protocol conformance descriptor for FeedGroupExplicitSlotBundleArticleQuota);
}

uint64_t sub_1BB55D3C8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BB55D33C();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCE5B24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BB55D42C()
{
  return sub_1BA4A2870(&qword_1ED3A2928, (uint64_t (*)(uint64_t))type metadata accessor for FeedGroupExplicitSlotBundleArticleQuota, (uint64_t)&protocol conformance descriptor for FeedGroupExplicitSlotBundleArticleQuota);
}

unint64_t sub_1BB55D448()
{
  unint64_t result;

  result = qword_1ED3A51B8;
  if (!qword_1ED3A51B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupGroupingRulesOverrides, &type metadata for FeedGroupGroupingRulesOverrides);
    atomic_store(result, (unint64_t *)&qword_1ED3A51B8);
  }
  return result;
}

uint64_t sub_1BB55D490@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeedGroupClusteringKnobsOverrides.init(from:)(a1, a2);
}

BOOL _s8NewsFeed0B29GroupClusteringKnobsOverridesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140[10];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[4];
  v6 = a1[5];
  v5 = a1[6];
  v8 = a1[7];
  v7 = a1[8];
  v10 = a1[9];
  v9 = a1[10];
  v12 = a1[11];
  v11 = a1[12];
  v13 = a1[14];
  v134 = a1[13];
  v15 = a1[15];
  v14 = a1[16];
  v16 = *a2;
  v17 = a2[1];
  v137 = a2[2];
  v139 = a1[2];
  v135 = a2[3];
  v136 = a1[3];
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[7];
  v21 = a2[8];
  v22 = a2[9];
  v23 = a2[10];
  v24 = a2[11];
  v133 = a2[12];
  v132 = a2[13];
  v25 = a2[14];
  v26 = a2[15];
  v27 = a2[16];
  if (*a1)
  {
    if (!v16)
      return 0;
    v125 = a2[4];
    v128 = a2[5];
    if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v16 + 16))
      return 0;
    v119 = a1[11];
    v124 = a2[6];
    v28 = *(_QWORD *)(v2 + 24);
    v59 = a1[14];
    v60 = a2[9];
    v29 = a2[15];
    v30 = a1[15];
    v31 = a2[16];
    v32 = a1[16];
    v33 = *(_QWORD *)(v16 + 24);
    v64 = a2[14];
    v68 = a2[7];
    v109 = a1[9];
    v114 = a1[10];
    v96 = a1[7];
    v100 = a1[8];
    v88 = a1[5];
    v92 = a1[6];
    v104 = a1[12];
    v78 = a2[10];
    v83 = a2[11];
    v73 = a2[8];
    swift_retain();
    swift_retain();
    v34 = v33;
    v14 = v32;
    v27 = v31;
    v15 = v30;
    v26 = v29;
    v13 = v59;
    LOBYTE(v28) = sub_1BA893E60(v28, v34);
    swift_release();
    swift_release();
    v20 = v68;
    v21 = v73;
    v22 = v60;
    v25 = v64;
    v23 = v78;
    v24 = v83;
    v11 = v104;
    v6 = v88;
    v5 = v92;
    v8 = v96;
    v7 = v100;
    v10 = v109;
    v9 = v114;
    v12 = v119;
    v18 = v125;
    v19 = v128;
    if ((v28 & 1) == 0)
      return 0;
  }
  else
  {
    v124 = a2[6];
    if (v16)
      return 0;
  }
  if (v3)
  {
    if (!v17)
      return 0;
    v126 = v18;
    v129 = v19;
    if (*(_QWORD *)(v3 + 16) != *(_QWORD *)(v17 + 16))
      return 0;
    v36 = *(_QWORD *)(v3 + 24);
    v37 = *(_QWORD *)(v17 + 24);
    v65 = v25;
    v69 = v20;
    v115 = v9;
    v120 = v12;
    v105 = v11;
    v110 = v10;
    v97 = v8;
    v101 = v7;
    v89 = v6;
    v93 = v5;
    v79 = v23;
    v84 = v24;
    v38 = v22;
    v74 = v21;
    swift_retain();
    swift_retain();
    LOBYTE(v36) = sub_1BA893E60(v36, v37);
    swift_release();
    swift_release();
    v20 = v69;
    v21 = v74;
    v22 = v38;
    v23 = v79;
    v24 = v84;
    v11 = v105;
    v6 = v89;
    v5 = v93;
    v8 = v97;
    v7 = v101;
    v10 = v110;
    v9 = v115;
    v12 = v120;
    v25 = v65;
    v18 = v126;
    v19 = v129;
    if ((v36 & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  if (v139)
  {
    if (!v137)
      return 0;
    v66 = v25;
    v70 = v20;
    v116 = v9;
    v121 = v12;
    v106 = v11;
    v111 = v10;
    v98 = v8;
    v102 = v7;
    v90 = v6;
    v94 = v5;
    v80 = v23;
    v85 = v24;
    v61 = v22;
    v75 = v21;
    v39 = v19;
    v40 = v18;
    swift_retain();
    v41 = swift_retain();
    v42 = sub_1BB55C7FC(v41, v137);
    swift_release();
    swift_release();
    v18 = v40;
    v19 = v39;
    v20 = v70;
    v21 = v75;
    v22 = v61;
    v25 = v66;
    v23 = v80;
    v24 = v85;
    v11 = v106;
    v6 = v90;
    v5 = v94;
    v8 = v98;
    v7 = v102;
    v10 = v111;
    v9 = v116;
    v12 = v121;
    if ((v42 & 1) == 0)
      return 0;
  }
  else if (v137)
  {
    return 0;
  }
  if (!v136)
  {
    if (!v135)
      goto LABEL_25;
    return 0;
  }
  if (!v135)
    return 0;
  v127 = v18;
  v130 = v19;
  v71 = v20;
  v76 = v21;
  v62 = v22;
  v81 = v23;
  v86 = v24;
  v107 = v11;
  v91 = v6;
  v95 = v5;
  v99 = v8;
  v103 = v7;
  v112 = v10;
  v117 = v9;
  v122 = v12;
  v43 = v25;
  v44 = v26;
  v45 = *(_QWORD *)(v136 + 16);
  v46 = *(_QWORD *)(v135 + 16);
  swift_retain();
  swift_retain();
  if ((sub_1BA8934F8(v45, v46) & 1) == 0)
  {
    swift_release();
LABEL_30:
    swift_release();
    return 0;
  }
  v47 = sub_1BA893228(*(_QWORD *)(v136 + 24), *(_QWORD *)(v135 + 24));
  swift_release();
  swift_release();
  v26 = v44;
  v25 = v43;
  v9 = v117;
  v12 = v122;
  v11 = v107;
  v10 = v112;
  v8 = v99;
  v7 = v103;
  v6 = v91;
  v5 = v95;
  v23 = v81;
  v24 = v86;
  v22 = v62;
  v20 = v71;
  v21 = v76;
  v18 = v127;
  v19 = v130;
  if ((v47 & 1) == 0)
    return 0;
LABEL_25:
  if (v4 == 1)
  {
    v48 = v18 == 1;
    v49 = v18;
    v50 = v124;
    if (!v48)
      goto LABEL_33;
  }
  else
  {
    v141 = v4;
    v142 = v6;
    v143 = v5;
    v144 = v8;
    v145 = v7;
    v146 = v10;
    v147 = v9;
    v148 = v12;
    v149 = v11;
    v150 = v134;
    v118 = v9;
    v123 = v12;
    v108 = v11;
    v113 = v10;
    v51 = v7;
    v52 = v5;
    v53 = v6;
    if (v18 == 1)
    {
      v72 = v20;
      v77 = v21;
      v82 = v23;
      v87 = v24;
      v63 = v22;
      v131 = v19;
      v54 = v8;
      v49 = 1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v19 = v131;
      v20 = v72;
      v21 = v77;
      v22 = v63;
      v23 = v82;
      v24 = v87;
      v12 = v123;
      v9 = v118;
      v10 = v113;
      v7 = v51;
      v8 = v54;
      v5 = v52;
      v6 = v53;
      v11 = v108;
      v50 = v124;
LABEL_33:
      v141 = v4;
      v142 = v6;
      v143 = v5;
      v144 = v8;
      v145 = v7;
      v146 = v10;
      v147 = v9;
      v148 = v12;
      v149 = v11;
      v150 = v134;
      v151 = v49;
      v152 = v19;
      v153 = v50;
      v154 = v20;
      v155 = v21;
      v156 = v22;
      v157 = v23;
      v158 = v24;
      v159 = v133;
      v160 = v132;
      sub_1BA87070C(v49);
      sub_1BB55E6BC(&v141);
      return 0;
    }
    v140[0] = v18;
    v140[1] = v19;
    v140[2] = v124;
    v140[3] = v20;
    v140[4] = v21;
    v140[5] = v22;
    v140[6] = v23;
    v140[7] = v24;
    v140[8] = v133;
    v140[9] = v132;
    v67 = v25;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v138 = static FeedGroupGroupingRulesOverrides.== infix(_:_:)(&v141, v140);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1BA86E338(v4);
    v25 = v67;
    if ((v138 & 1) == 0)
      return 0;
  }
  if (v13)
  {
    if (!v25)
      return 0;
    v55 = v25;
    sub_1BB86D078();
    sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
    swift_retain();
    swift_retain();
    if ((sub_1BB872958() & 1) == 0)
      goto LABEL_56;
    v56 = sub_1BA892EC0(*(_QWORD *)(v13 + *(_QWORD *)(*(_QWORD *)v13 + 120)), *(_QWORD *)(v55 + *(_QWORD *)(*(_QWORD *)v55 + 120)));
    swift_release();
    swift_release();
    if ((v56 & 1) == 0)
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  if (!v15)
  {
    if (v26)
      return 0;
    goto LABEL_48;
  }
  if (!v26)
    return 0;
  sub_1BB86D078();
  sub_1BA4A2870(&qword_1ED3A24F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA848], MEMORY[0x1E0DDA860]);
  swift_retain();
  swift_retain();
  if ((sub_1BB872958() & 1) == 0)
  {
LABEL_56:
    swift_release();
    goto LABEL_30;
  }
  v57 = sub_1BA892EC0(*(_QWORD *)(v15 + *(_QWORD *)(*(_QWORD *)v15 + 120)), *(_QWORD *)(v26 + *(_QWORD *)(*(_QWORD *)v26 + 120)));
  swift_release();
  swift_release();
  if ((v57 & 1) == 0)
    return 0;
LABEL_48:
  if (!v14)
    return !v27;
  if (!v27)
    return 0;
  sub_1BB86D024();
  sub_1BA4A2870(&qword_1ED3A24C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DDA7E8], MEMORY[0x1E0DDA800]);
  swift_retain();
  swift_retain();
  if ((sub_1BB872958() & 1) == 0)
    goto LABEL_56;
  v58 = sub_1BA892EA4(*(_QWORD *)(v14 + *(_QWORD *)(*(_QWORD *)v14 + 120)), *(_QWORD *)(v27 + *(_QWORD *)(*(_QWORD *)v27 + 120)));
  swift_release();
  swift_release();
  return (v58 & 1) != 0;
}

uint64_t destroy for FeedGroupClusteringKnobsOverrides(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 32) != 1)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FeedGroupClusteringKnobsOverrides(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2 + 4;
  v6 = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    v8 = v7[3];
    *(_OWORD *)(a1 + 64) = v7[2];
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = v7[4];
    v9 = v7[1];
    *(_OWORD *)(a1 + 32) = *v7;
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    v10 = a2[5];
    v11 = a2[6];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v10;
    v12 = a2[7];
    v13 = a2[8];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    v14 = a2[9];
    v15 = a2[10];
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v14;
    v17 = a2[11];
    v16 = a2[12];
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v17;
    v20 = a2[13];
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  v18 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = a2[16];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FeedGroupClusteringKnobsOverrides(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 32);
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v5 == 1)
    {
      *v4 = *v6;
      v7 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 64);
      v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v5 == 1)
  {
    sub_1BB55E254(a1 + 32);
    *v4 = *v6;
    v10 = *(_OWORD *)(a2 + 96);
    v12 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_retain();
    swift_release();
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BB55E254(uint64_t a1)
{
  destroy for FeedGroupGroupingRules();
  return a1;
}

_QWORD *assignWithTake for FeedGroupClusteringKnobsOverrides(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  v4 = a2[4];
  if (a1[4] != 1)
  {
    if (v4 != 1)
    {
      a1[4] = v4;
      swift_release();
      a1[5] = a2[5];
      swift_release();
      a1[6] = a2[6];
      swift_release();
      a1[7] = a2[7];
      swift_release();
      a1[8] = a2[8];
      swift_release();
      a1[9] = a2[9];
      swift_release();
      a1[10] = a2[10];
      swift_release();
      a1[11] = a2[11];
      swift_release();
      a1[12] = a2[12];
      swift_release();
      a1[13] = a2[13];
      swift_release();
      goto LABEL_6;
    }
    sub_1BB55E254((uint64_t)(a1 + 4));
  }
  v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  v6 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v6;
LABEL_6:
  a1[14] = a2[14];
  swift_release();
  a1[15] = a2[15];
  swift_release();
  a1[16] = a2[16];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedGroupClusteringKnobsOverrides(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusteringKnobsOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupClusteringKnobsOverrides.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BB55E51C + 4 * byte_1BB926C67[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BB55E550 + 4 * byte_1BB926C62[v4]))();
}

uint64_t sub_1BB55E550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55E558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB55E560);
  return result;
}

uint64_t sub_1BB55E56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB55E574);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BB55E578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55E580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedGroupClusteringKnobsOverrides.CodingKeys()
{
  return &type metadata for FeedGroupClusteringKnobsOverrides.CodingKeys;
}

unint64_t sub_1BB55E5A0()
{
  unint64_t result;

  result = qword_1EF2C71E8;
  if (!qword_1EF2C71E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926DD8, &type metadata for FeedGroupClusteringKnobsOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C71E8);
  }
  return result;
}

unint64_t sub_1BB55E5E8()
{
  unint64_t result;

  result = qword_1ED3A2910;
  if (!qword_1ED3A2910)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926D10, &type metadata for FeedGroupClusteringKnobsOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2910);
  }
  return result;
}

unint64_t sub_1BB55E630()
{
  unint64_t result;

  result = qword_1ED3A2908;
  if (!qword_1ED3A2908)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926D38, &type metadata for FeedGroupClusteringKnobsOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3A2908);
  }
  return result;
}

uint64_t sub_1BB55E674()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t *sub_1BB55E6BC(uint64_t *a1)
{
  uint64_t v3;

  v3 = a1[10];
  sub_1BA86E338(*a1);
  sub_1BA86E338(v3);
  return a1;
}

uint64_t FeedCluster.tag.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t FeedCluster.headlines.getter()
{
  return swift_bridgeObjectRetain();
}

id FeedCluster.clusteringRules.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id FeedCluster.replacing(headlines:titleModification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v13;

  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(id *)v3;
  v13 = *(id *)(v3 + 16);
  if (v6 == 255)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    v8 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    v10 = (void *)sub_1BB872970();
    if ((v6 & 1) != 0)
      v11 = objc_msgSend(v7, sel_setTitleDisplaySuffixOverride_, v10);
    else
      v11 = objc_msgSend(v7, sel_setTitleDisplayPrefixOverride_, v10);
    v7 = v11;

    sub_1BB3C37CC(v8, v9, v6);
  }
  *a3 = v7;
  a3[1] = a1;
  a3[2] = v13;
  swift_bridgeObjectRetain();
  return v13;
}

ValueMetadata *type metadata accessor for FeedCluster()
{
  return &type metadata for FeedCluster;
}

ValueMetadata *type metadata accessor for FeedCluster.TitleModification()
{
  return &type metadata for FeedCluster.TitleModification;
}

unint64_t sub_1BB55E88C()
{
  unint64_t result;

  result = qword_1EF2C71F0;
  if (!qword_1EF2C71F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB926EF4, &type metadata for DebugFormatTestCaseResultSeverity);
    atomic_store(result, (unint64_t *)&qword_1EF2C71F0);
  }
  return result;
}

void sub_1BB55E8D0(char a1)
{
  __asm { BR              X10 }
}

id sub_1BB55E8F8()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1BB872970();
  v1 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v0);

  if (!v1)
  {
    __break(1u);
    JUMPOUT(0x1BB55E944);
  }
  return v1;
}

id sub_1BB55EAC0(char a1)
{
  return objc_msgSend((id)objc_opt_self(), *off_1E731E868[a1]);
}

uint64_t sub_1BB55EB00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1BB55ED64(*a1);
  *a2 = result;
  return result;
}

void sub_1BB55EB28(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 - 2;
}

uint64_t sub_1BB55EB38()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BB55EB7C()
{
  return sub_1BB8745D8();
}

uint64_t sub_1BB55EBA8()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

void sub_1BB55EBE8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7253760;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTestCaseResultSeverity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BB55EC44 + 4 * byte_1BB926EA5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BB55EC78 + 4 * byte_1BB926EA0[v4]))();
}

uint64_t sub_1BB55EC78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55EC80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB55EC88);
  return result;
}

uint64_t sub_1BB55EC94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB55EC9CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BB55ECA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB55ECA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTestCaseResultSeverity()
{
  return &type metadata for DebugFormatTestCaseResultSeverity;
}

unint64_t sub_1BB55ECC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C71F8;
  if (!qword_1EF2C71F8)
  {
    sub_1BB55ED10();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C71F8);
  }
  return result;
}

void sub_1BB55ED10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C7200)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C7200);
  }
}

uint64_t sub_1BB55ED64(uint64_t a1)
{
  if ((unint64_t)(a1 + 2) >= 5)
    return 5;
  else
    return a1 + 2;
}

uint64_t *sub_1BB55ED78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1BB86EB84();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
    v11 = (int *)type metadata accessor for DebugFormatFileDirectoryMetadata(0);
    v10(&v7[v11[5]], &v8[v11[5]], v9);
    v12 = v11[6];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    v7[v11[7]] = v8[v11[7]];
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t type metadata accessor for DebugFormatFileDirectoryMetadata(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2C72F0);
}

uint64_t sub_1BB55EE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1BB86EB84();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  v6(v4 + *(int *)(v7 + 20), v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BB55EEE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BB86EB84();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  v8(&v5[v9[5]], &v6[v9[5]], v7);
  v10 = v9[6];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v5[v9[7]] = v6[v9[7]];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BB55EF9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86EB84();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  v10(&v7[v11[5]], &v8[v11[5]], v9);
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v11[7]] = v8[v11[7]];
  return a1;
}

_QWORD *sub_1BB55F074(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BB86EB84();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(v5, v6, v7);
  v9 = (int *)type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  v8(&v5[v9[5]], &v6[v9[5]], v7);
  *(_OWORD *)&v5[v9[6]] = *(_OWORD *)&v6[v9[6]];
  v5[v9[7]] = v6[v9[7]];
  return a1;
}

_QWORD *sub_1BB55F114(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86EB84();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  v10(&v7[v11[5]], &v8[v11[5]], v9);
  v12 = v11[6];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v7[v11[7]] = v8[v11[7]];
  return a1;
}

uint64_t sub_1BB55F1D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB55F1E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1BB55F25C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BB55F268(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DebugFormatFileDirectory(uint64_t a1)
{
  return sub_1BA4B8364(a1, qword_1EF2C7260);
}

uint64_t sub_1BB55F2F0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DebugFormatFileDirectoryMetadata(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1BB55F368(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86EB84();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BB55F424(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BB55F4B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1BB55F55C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_1BB55F5E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1BB86EB84();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1BB55F678()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB55F684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BB86EB84();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1BB55F704()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB55F710(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BB86EB84();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1BB55F78C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86EB84();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BB55F808(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD v12[4];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v12[3] = a4;
  sub_1BA4CDF6C(0, &qword_1EF2C73D0, (uint64_t (*)(void))sub_1BB561404, (uint64_t)&type metadata for DebugFormatFile.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB561404();
  sub_1BB8746C8();
  v16 = 0;
  v10 = v13;
  sub_1BB87417C();
  if (!v10)
  {
    v15 = 1;
    sub_1BB874194();
    v14 = 2;
    sub_1BB874188();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB55F980(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C7358, (uint64_t (*)(void))sub_1BB56095C, (uint64_t)&type metadata for DebugFormatFileDirectory.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB56095C();
  sub_1BB8746C8();
  v12 = *v3;
  v11[15] = 0;
  sub_1BB5609A0();
  sub_1BB560A38(&qword_1EF2C7360, (uint64_t (*)(void))sub_1BB0FA294, MEMORY[0x1E0DEAF10]);
  sub_1BB8741AC();
  if (!v2)
  {
    type metadata accessor for DebugFormatFileDirectory(0);
    v11[14] = 1;
    type metadata accessor for DebugFormatFileDirectoryMetadata(0);
    sub_1BA4A2870(&qword_1EF2C7368, type metadata accessor for DebugFormatFileDirectoryMetadata, (uint64_t)&unk_1BB9270F0);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB55FB2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;

  v17 = a2;
  v19 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7330, (uint64_t (*)(void))sub_1BB56095C, (uint64_t)&type metadata for DebugFormatFileDirectory.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v20 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for DebugFormatFileDirectory(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB56095C();
  v21 = v7;
  v11 = v22;
  sub_1BB87468C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = (uint64_t)v18;
  v13 = v10;
  sub_1BB5609A0();
  v24 = 0;
  sub_1BB560A38(&qword_1EF2C7348, (uint64_t (*)(void))sub_1BB0FA09C, MEMORY[0x1E0DEAF40]);
  v14 = v20;
  sub_1BB8740D4();
  *v13 = v25;
  v23 = 1;
  sub_1BA4A2870(&qword_1EF2C7350, type metadata accessor for DebugFormatFileDirectoryMetadata, (uint64_t)&unk_1BB927118);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v14);
  sub_1BB5609F4(v12, (uint64_t)v13 + *(int *)(v8 + 20));
  sub_1BA4C2DD8((uint64_t)v13, v17, type metadata accessor for DebugFormatFileDirectory);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BA4A2E80((uint64_t)v13, type metadata accessor for DebugFormatFileDirectory);
}

uint64_t sub_1BB55FDD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C7380, (uint64_t (*)(void))sub_1BB560A9C, (uint64_t)&type metadata for DebugFormatFileDirectoryMetadata.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB560A9C();
  sub_1BB8746C8();
  v17 = 0;
  sub_1BB86EB84();
  sub_1BA4A2870(&qword_1ED39C370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DD8]);
  sub_1BB8741AC();
  if (!v2)
  {
    v10 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
    v16 = 1;
    sub_1BB8741AC();
    v15 = 2;
    sub_1BB87417C();
    if ((*(_BYTE *)(v3 + *(int *)(v10 + 28)) & 1) == 0)
    {
      v14 = 3;
      v13 = 0;
      sub_1BB560AE0();
      sub_1BB874464();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB55FFD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v34 = a2;
  v3 = sub_1BB86EB84();
  v4 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  v38 = v4;
  MEMORY[0x1E0C80A78](v3);
  v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v39 = (char *)&v31 - v7;
  sub_1BA4CDF6C(0, &qword_1EF2C7370, (uint64_t (*)(void))sub_1BB560A9C, (uint64_t)&type metadata for DebugFormatFileDirectoryMetadata.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v36 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB560A9C();
  v15 = v40;
  sub_1BB87468C();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v40 = v9;
  v32 = v12;
  v33 = a1;
  v16 = v38;
  v46 = 0;
  sub_1BA4A2870(&qword_1ED3B0918, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF0]);
  v17 = v36;
  v18 = v37;
  sub_1BB8740D4();
  v20 = v17;
  v21 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v22 = (uint64_t)v14;
  v21(v14, v39, v18);
  v45 = 1;
  v23 = v35;
  sub_1BB8740D4();
  v24 = v32;
  v21((char *)(v22 + *(int *)(v32 + 20)), v23, v18);
  v44 = 2;
  v25 = sub_1BB874098();
  v27 = (uint64_t *)(v22 + *(int *)(v24 + 24));
  *v27 = v25;
  v27[1] = v26;
  v43 = 3;
  if ((sub_1BB8740F8() & 1) != 0)
  {
    v42 = 3;
    sub_1BB8740D4();
    v28 = v34;
    v29 = v11;
    v30 = v41;
  }
  else
  {
    v29 = v11;
    v30 = 1;
    v28 = v34;
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v20);
  *(_BYTE *)(v22 + *(int *)(v24 + 28)) = v30;
  sub_1BA4C2DD8(v22, v28, type metadata accessor for DebugFormatFileDirectoryMetadata);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return sub_1BA4A2E80(v22, type metadata accessor for DebugFormatFileDirectoryMetadata);
}

uint64_t sub_1BB5603D0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6D617473656D6974;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 1752457584;
}

uint64_t sub_1BB56042C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5611D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB560450()
{
  sub_1BB561404();
  return sub_1BB874710();
}

uint64_t sub_1BB560478()
{
  sub_1BB561404();
  return sub_1BB87471C();
}

void sub_1BB5604A0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;

  v7 = sub_1BB560FE8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v6 & 1;
  }
}

uint64_t sub_1BB5604D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1BB55F808(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1BB5604F4(uint64_t a1, uint64_t a2)
{
  double v2;
  int v3;
  double v4;
  int v5;
  char v7;
  uint64_t result;

  v2 = *(double *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(double *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v4)
      return 0;
    return v3 ^ v5 ^ 1u;
  }
  v7 = sub_1BB874398();
  result = 0;
  if ((v7 & 1) != 0 && v2 == v4)
    return v3 ^ v5 ^ 1u;
  return result;
}

uint64_t sub_1BB56057C()
{
  _BYTE *v0;

  if (*v0)
    return 0x617461646174656DLL;
  else
    return 0x73656C6966;
}

uint64_t sub_1BB5605B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB56131C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5605D8()
{
  sub_1BB56095C();
  return sub_1BB874710();
}

uint64_t sub_1BB560600()
{
  sub_1BB56095C();
  return sub_1BB87471C();
}

uint64_t sub_1BB560628@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BB55FB2C(a1, a2);
}

uint64_t sub_1BB56063C(_QWORD *a1)
{
  return sub_1BB55F980(a1);
}

uint64_t sub_1BB560650()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB56068C + 4 * byte_1BB927020[*v0]))(0x6556726576726573, 0xED00006E6F697372);
}

uint64_t sub_1BB56068C()
{
  return 0x655674616D726F66;
}

uint64_t sub_1BB5606A0()
{
  return 0x636E617242746967;
}

unint64_t sub_1BB5606BC()
{
  return 0xD000000000000016;
}

uint64_t sub_1BB5606D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB561448(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5606FC()
{
  sub_1BB560A9C();
  return sub_1BB874710();
}

uint64_t sub_1BB560724()
{
  sub_1BB560A9C();
  return sub_1BB87471C();
}

uint64_t sub_1BB56074C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BB55FFD4(a1, a2);
}

uint64_t sub_1BB560760(_QWORD *a1)
{
  return sub_1BB55FDD8(a1);
}

uint64_t sub_1BB560778()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1BB873CB4();
  sub_1BB872AFC(0);
  sub_1BB86EB84();
  sub_1BA4A2870((unint64_t *)&unk_1ED3B0920, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DF8]);
  sub_1BB87420C();
  sub_1BB872AFC(v0);
  swift_bridgeObjectRelease();
  sub_1BB872AFC("minus.diamond.fill");
  type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  sub_1BB86EB24();
  sub_1BB872AFC(v1);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v3);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(", formatVersion=");
  sub_1BB872AFC((_QWORD *)0xE500000000000000);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v4);
  return 0;
}

unint64_t sub_1BB56095C()
{
  unint64_t result;

  result = qword_1EF2C7338;
  if (!qword_1EF2C7338)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92740C, &type metadata for DebugFormatFileDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7338);
  }
  return result;
}

void sub_1BB5609A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C7340)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C7340);
  }
}

uint64_t sub_1BB5609F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DebugFormatFileDirectoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BB560A38(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BB5609A0();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCE5B24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BB560A9C()
{
  unint64_t result;

  result = qword_1EF2C7378;
  if (!qword_1EF2C7378)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92736C, &type metadata for DebugFormatFileDirectoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7378);
  }
  return result;
}

unint64_t sub_1BB560AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C7388;
  if (!qword_1EF2C7388)
  {
    sub_1BA4CDF6C(255, &qword_1EF2C7380, (uint64_t (*)(void))sub_1BB560A9C, (uint64_t)&type metadata for DebugFormatFileDirectoryMetadata.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C7388);
  }
  return result;
}

uint64_t sub_1BB560B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  char v10;
  char v11;

  if ((sub_1BB86EB3C() & 1) != 0
    && (v4 = type metadata accessor for DebugFormatFileDirectoryMetadata(0), (sub_1BB86EB3C() & 1) != 0))
  {
    v5 = *(int *)(v4 + 24);
    v6 = *(_QWORD *)(a1 + v5);
    v7 = *(_QWORD *)(a1 + v5 + 8);
    v8 = (_QWORD *)(a2 + v5);
    v9 = v6 == *v8 && v7 == v8[1];
    if (v9 || (v10 = sub_1BB874398(), v11 = 0, (v10 & 1) != 0))
      v11 = *(_BYTE *)(a1 + *(int *)(v4 + 28)) ^ *(_BYTE *)(a2 + *(int *)(v4 + 28)) ^ 1;
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t storeEnumTagSinglePayload for DebugFormatFileDirectoryMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB560C3C + 4 * byte_1BB927029[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB560C70 + 4 * byte_1BB927024[v4]))();
}

uint64_t sub_1BB560C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB560C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB560C80);
  return result;
}

uint64_t sub_1BB560C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB560C94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB560C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB560CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatFileDirectoryMetadata.CodingKeys()
{
  return &type metadata for DebugFormatFileDirectoryMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DebugFormatFileDirectory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB560D08 + 4 * byte_1BB927033[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB560D3C + 4 * byte_1BB92702E[v4]))();
}

uint64_t sub_1BB560D3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB560D44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB560D4CLL);
  return result;
}

uint64_t sub_1BB560D58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB560D60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB560D64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB560D6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatFileDirectory.CodingKeys()
{
  return &type metadata for DebugFormatFileDirectory.CodingKeys;
}

uint64_t assignWithCopy for DebugFormatFile(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for DebugFormatFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for DebugFormatFile()
{
  return &type metadata for DebugFormatFile;
}

unint64_t sub_1BB560E3C()
{
  unint64_t result;

  result = qword_1EF2C7390;
  if (!qword_1EF2C7390)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92728C, &type metadata for DebugFormatFileDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7390);
  }
  return result;
}

unint64_t sub_1BB560E84()
{
  unint64_t result;

  result = qword_1EF2C7398;
  if (!qword_1EF2C7398)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927344, &type metadata for DebugFormatFileDirectoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7398);
  }
  return result;
}

unint64_t sub_1BB560ECC()
{
  unint64_t result;

  result = qword_1EF2C73A0;
  if (!qword_1EF2C73A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9272B4, &type metadata for DebugFormatFileDirectoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73A0);
  }
  return result;
}

unint64_t sub_1BB560F14()
{
  unint64_t result;

  result = qword_1EF2C73A8;
  if (!qword_1EF2C73A8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9272DC, &type metadata for DebugFormatFileDirectoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73A8);
  }
  return result;
}

unint64_t sub_1BB560F5C()
{
  unint64_t result;

  result = qword_1EF2C73B0;
  if (!qword_1EF2C73B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9271FC, &type metadata for DebugFormatFileDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73B0);
  }
  return result;
}

unint64_t sub_1BB560FA4()
{
  unint64_t result;

  result = qword_1EF2C73B8;
  if (!qword_1EF2C73B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927224, &type metadata for DebugFormatFileDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73B8);
  }
  return result;
}

double sub_1BB560FE8(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  double v10;
  _BYTE v11[16];

  sub_1BA4CDF6C(0, &qword_1EF2C73C0, (uint64_t (*)(void))sub_1BB561404, (uint64_t)&type metadata for DebugFormatFile.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v11[-v7];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB561404();
  sub_1BB87468C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v11[15] = 0;
    sub_1BB874098();
    v11[14] = 1;
    swift_bridgeObjectRetain();
    sub_1BB8740B0();
    v2 = v10;
    v11[13] = 2;
    sub_1BB8740A4();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1BB5611D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1752457584 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BB9913E0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BB56131C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656C6966 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1BB561404()
{
  unint64_t result;

  result = qword_1EF2C73C8;
  if (!qword_1EF2C73C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927514, &type metadata for DebugFormatFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73C8);
  }
  return result;
}

uint64_t sub_1BB561448(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6556726576726573 && a2 == 0xED00006E6F697372;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x655674616D726F66 && a2 == 0xED00006E6F697372 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E617242746967 && a2 == 0xE900000000000068 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001BB9913C0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t storeEnumTagSinglePayload for DebugFormatFile.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB561694 + 4 * byte_1BB92703D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5616C8 + 4 * byte_1BB927038[v4]))();
}

uint64_t sub_1BB5616C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5616D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5616D8);
  return result;
}

uint64_t sub_1BB5616E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5616ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5616F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5616F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatFile.CodingKeys()
{
  return &type metadata for DebugFormatFile.CodingKeys;
}

unint64_t sub_1BB561718()
{
  unint64_t result;

  result = qword_1EF2C73D8;
  if (!qword_1EF2C73D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9274EC, &type metadata for DebugFormatFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73D8);
  }
  return result;
}

unint64_t sub_1BB561760()
{
  unint64_t result;

  result = qword_1EF2C73E0;
  if (!qword_1EF2C73E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92745C, &type metadata for DebugFormatFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73E0);
  }
  return result;
}

unint64_t sub_1BB5617A8()
{
  unint64_t result;

  result = qword_1EF2C73E8;
  if (!qword_1EF2C73E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB927484, &type metadata for DebugFormatFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C73E8);
  }
  return result;
}

NewsFeed::FeedGroupMutingExemption_optional __swiftcall FeedGroupMutingExemption.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  NewsFeed::FeedGroupMutingExemption_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BB873FE4();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FeedGroupMutingExemption.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x74706D657865;
  else
    return 0x706D657845746F6ELL;
}

uint64_t sub_1BB561888()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB561908()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB561964()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

NewsFeed::FeedGroupMutingExemption_optional sub_1BB5619E0(Swift::String *a1)
{
  return FeedGroupMutingExemption.init(rawValue:)(*a1);
}

void sub_1BB5619EC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x706D657845746F6ELL;
  if (*v1)
    v2 = 0x74706D657865;
  v3 = 0xE900000000000074;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BB561A2C(char *a1, char *a2)
{
  return sub_1BB8055AC(*a1, *a2);
}

uint64_t sub_1BB561A38()
{
  sub_1BB561BEC();
  return sub_1BB872D60();
}

uint64_t sub_1BB561A94()
{
  sub_1BB561BEC();
  return sub_1BB872D0C();
}

uint64_t FeedGroupMutingExemption.isExempt.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_1BB561AEC()
{
  unint64_t result;

  result = qword_1EF2C73F0;
  if (!qword_1EF2C73F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupMutingExemption, &type metadata for FeedGroupMutingExemption);
    atomic_store(result, (unint64_t *)&qword_1EF2C73F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeedGroupMutingExemption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB561B7C + 4 * byte_1BB927575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB561BB0 + 4 * byte_1BB927570[v4]))();
}

uint64_t sub_1BB561BB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB561BB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB561BC0);
  return result;
}

uint64_t sub_1BB561BCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB561BD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB561BD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB561BE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1BB561BEC()
{
  unint64_t result;

  result = qword_1EF2C73F8;
  if (!qword_1EF2C73F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupMutingExemption, &type metadata for FeedGroupMutingExemption);
    atomic_store(result, (unint64_t *)&qword_1EF2C73F8);
  }
  return result;
}

uint64_t static FormatCodingZeroStrategy.defaultValue.getter()
{
  return sub_1BB873A80();
}

BOOL static FormatCodingZeroStrategy.shouldEncode(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB873A80();
  v6 = sub_1BB872958();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return (v6 & 1) == 0;
}

uint64_t sub_1BB561CF8()
{
  return static FormatCodingZeroStrategy.defaultValue.getter();
}

BOOL sub_1BB561D08(uint64_t a1, uint64_t a2)
{
  return static FormatCodingZeroStrategy.shouldEncode(wrappedValue:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static FormatCodingOneStrategy.defaultValue.getter()
{
  return sub_1BB561D64();
}

BOOL static FormatCodingOneStrategy.shouldEncode(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  return sub_1BB561E58(a1, a2);
}

uint64_t sub_1BB561D34()
{
  return static FormatCodingOneStrategy.defaultValue.getter();
}

BOOL sub_1BB561D44(uint64_t a1, uint64_t a2)
{
  return static FormatCodingOneStrategy.shouldEncode(wrappedValue:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static FormatCodingSixteenStrategy.defaultValue.getter()
{
  return sub_1BB561D64();
}

uint64_t sub_1BB561D64()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_1BB874530();
  return sub_1BB874374();
}

BOOL static FormatCodingSixteenStrategy.shouldEncode(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  return sub_1BB561E58(a1, a2);
}

BOOL sub_1BB561E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(uint64_t, double);
  char v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(v7, v4);
  v9 = sub_1BB872958();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a2);
  return (v9 & 1) == 0;
}

uint64_t sub_1BB561F00()
{
  return static FormatCodingSixteenStrategy.defaultValue.getter();
}

BOOL sub_1BB561F10(uint64_t a1, uint64_t a2)
{
  return static FormatCodingSixteenStrategy.shouldEncode(wrappedValue:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static FormatCodingMaxIntStrategy.defaultValue.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

BOOL static FormatCodingMaxIntStrategy.shouldEncode(wrappedValue:)(uint64_t a1)
{
  return a1 != 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1BB561F38(_QWORD *a1@<X8>)
{
  *a1 = 0x7FFFFFFFFFFFFFFFLL;
}

BOOL sub_1BB561F44(_QWORD *a1)
{
  return *a1 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t static FormatCodingMaxInt32Strategy.defaultValue.getter()
{
  return 0x7FFFFFFFLL;
}

BOOL static FormatCodingMaxInt32Strategy.shouldEncode(wrappedValue:)(int a1)
{
  return a1 != 0x7FFFFFFF;
}

uint64_t sub_1BB561F70(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingZeroStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB561F9C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingOneStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB561FC8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingSixteenStrategy<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB561FF4()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t sub_1BB562000()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t sub_1BB56200C()
{
  return MEMORY[0x1E0DEDBF8];
}

uint64_t sub_1BB562018()
{
  return MEMORY[0x1E0DEDBD0];
}

void sub_1BB562024(_DWORD *a1@<X8>)
{
  *a1 = 0x7FFFFFFF;
}

BOOL sub_1BB562030(_DWORD *a1)
{
  return *a1 != 0x7FFFFFFF;
}

void type metadata accessor for FormatCodingZeroStrategy()
{
  JUMPOUT(0x1BCCE5A70);
}

void type metadata accessor for FormatCodingOneStrategy()
{
  JUMPOUT(0x1BCCE5A70);
}

void type metadata accessor for FormatCodingSixteenStrategy()
{
  JUMPOUT(0x1BCCE5A70);
}

ValueMetadata *type metadata accessor for FormatCodingMaxIntStrategy()
{
  return &type metadata for FormatCodingMaxIntStrategy;
}

ValueMetadata *type metadata accessor for FormatCodingMaxInt32Strategy()
{
  return &type metadata for FormatCodingMaxInt32Strategy;
}

uint64_t FeedServiceFetchResult.emittedGroups.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1BA546D3C(a1);
  v6 = v5;
  swift_retain();
  v7 = sub_1BAAD629C(v6, a2, a3);
  swift_release();
  return v7;
}

unint64_t sub_1BB5620E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for FeedServiceFetchResult.Internal(0, a2, a3, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      type metadata accessor for FeedCursor(255, a2, a3, v9);
      v10 = *(uint64_t *)((char *)a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      type metadata accessor for FeedCursorContainer(255, a2, a3, v11);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v13 = swift_allocBox();
      v15 = v14;
      v16 = *(int *)(TupleTypeMetadata2 + 48);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
      *(_QWORD *)(v15 + v16) = FeedCursorContainer.init(cursor:)(v10);
      return v13 | 0x4000000000000000;
    }
    else
    {
      v26 = *a1;
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = FeedCursorContainer.init(cursor:)(v26);
      return v27 | 0x8000000000000000;
    }
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v18 = swift_getAssociatedTypeWitness();
    type metadata accessor for FeedCursor(255, a2, a3, v19);
    v20 = *(uint64_t *)((char *)a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    type metadata accessor for FeedCursorContainer(255, a2, a3, v21);
    v22 = swift_getTupleTypeMetadata2();
    v17 = swift_allocBox();
    v24 = v23;
    v25 = *(int *)(v22 + 48);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v23, a1, v18);
    *(_QWORD *)(v24 + v25) = FeedCursorContainer.init(cursor:)(v20);
  }
  return v17;
}

uint64_t sub_1BB562368()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t *sub_1BB562390(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v7 = 8;
  else
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || (v7 | 1) > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    v11 = *((unsigned __int8 *)a2 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v11 >= 3)
      v11 = *(_DWORD *)a2 + 3;
    if (v11 == 2)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 2;
    }
    else if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  swift_retain();
  return a1;
}

_DWORD *sub_1BB56253C(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v10;

  if (a1 != a2)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
      v7 = 8;
    else
      v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3 && (v7 & 0xFFFFFFF8) != 0)
      v8 = *a1 + 3;
    if (v8 <= 1)
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 3)
      v10 = *a2 + 3;
    if (v10 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      LOBYTE(v10) = 1;
    }
    else
    {
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      LOBYTE(v10) = 0;
      *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    }
    *((_BYTE *)a1 + v7) = v10;
    swift_retain();
  }
  return a1;
}

_QWORD *sub_1BB562704(_QWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  char v10;
  _QWORD *v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v7 = 8;
  else
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3 && (v7 & 0xFFFFFFF8) != 0)
    v8 = *a2 + 3;
  if (!v8)
  {
    v10 = 0;
LABEL_14:
    (*(void (**)(_QWORD *, _DWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v11 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    a2 = (_DWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_15;
  }
  if (v8 != 2)
  {
    v10 = 1;
    goto LABEL_14;
  }
  v10 = 2;
  v11 = a1;
LABEL_15:
  *v11 = *(_QWORD *)a2;
  *((_BYTE *)a1 + v7) = v10;
  return a1;
}

_DWORD *sub_1BB562834(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v10;
  char v12;
  _QWORD *v13;

  if (a1 != a2)
  {
    v3 = a2;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
      v7 = 8;
    else
      v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3 && (v7 & 0xFFFFFFF8) != 0)
      v8 = *a1 + 3;
    if (v8 <= 1)
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    swift_release();
    v10 = *((unsigned __int8 *)v3 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 3)
      v10 = *v3 + 3;
    if (v10)
    {
      if (v10 == 2)
      {
        v12 = 2;
        v13 = a1;
LABEL_24:
        *v13 = *(_QWORD *)v3;
        *((_BYTE *)a1 + v7) = v12;
        return a1;
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 32))(a1, v3, AssociatedTypeWitness);
    v13 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v3 = (_DWORD *)(((unint64_t)v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  return a1;
}

uint64_t sub_1BB5629C0(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v6 = v5 | 1;
  v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v8)
      goto LABEL_20;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    v13 = a1[v5];
    if (v13 >= 3)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 254;
}

void sub_1BB562B24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v7 = 8;
  v8 = v7 | 1;
  if (a3 < 0xFE)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = (a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8);
    if (v11 > 0xFFFE)
    {
      v9 = 4u;
    }
    else if (v11 >= 0xFF)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 != 0;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v10 = a2 - 254;
  if (v8 < 4)
  {
    v10 &= ~(-1 << (8 * v8));
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
    {
      *a1 = v10;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
  }
  *(_DWORD *)a1 = v10;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t sub_1BB562D28(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v3 = 8;
  result = *((unsigned __int8 *)a1 + v3);
  v5 = v3 & 0xFFFFFFF8;
  if (result >= 3 && v5 != 0)
    return (*a1 + 3);
  return result;
}

void sub_1BB562DF4(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  size_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF8)
    v5 = 8;
  else
    v5 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a2 > 2)
  {
    *((_BYTE *)a1 + v5) = 3;
    bzero(a1, v5);
    *a1 = a2 - 3;
  }
  else
  {
    *((_BYTE *)a1 + v5) = a2;
  }
}

void static FormatTextContent.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for FormatTextNodeLink();
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X11 }
}

uint64_t sub_1BB562F74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  __int16 v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;

  if (v2 >> 60)
  {
    v8 = 0;
  }
  else
  {
    v3 = *(_WORD *)(a1 + 64);
    v4 = *(_WORD *)(v2 + 64);
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v1 + 192) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v1 + 208) = v5;
    *(_OWORD *)(v1 + 224) = *(_OWORD *)(a1 + 48);
    *(_WORD *)(v1 + 240) = v3;
    v6 = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v1 + 48) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v1 + 64) = v6;
    *(_OWORD *)(v1 + 80) = *(_OWORD *)(v2 + 48);
    *(_WORD *)(v1 + 96) = v4;
    swift_retain();
    swift_retain();
    _s8NewsFeed21FormatTextNodeBindingO2eeoiySbAC_ACtFZ_0(v1 + 192);
    v8 = v7;
    swift_release();
    swift_release();
  }
  return v8 & 1;
}

void sub_1BB5635E8()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for FormatURL();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for FormatTextNodeLink();
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X11 }
}

uint64_t sub_1BB5636A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  sub_1BB3D9294(v1, v2);
  return swift_bridgeObjectRelease();
}

void sub_1BB563E04()
{
  sub_1BB5635E8();
}

unint64_t sub_1BB563E18(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA830FA0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB563E3C()
{
  unint64_t result;

  result = qword_1ED3D05F8;
  if (!qword_1ED3D05F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatTextContent, &type metadata for FormatTextContent);
    atomic_store(result, (unint64_t *)&qword_1ED3D05F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatTextContent()
{
  return &type metadata for FormatTextContent;
}

uint64_t sub_1BB563E90(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1BA740E88(0, v1, 0);
    v2 = v15;
    v4 = a1 + 48;
    do
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1BA724A8C();
      v6 = v5;
      v8 = v7;
      v10 = v9;
      swift_release();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        sub_1BA740E88(v11 > 1, v12 + 1, 1);
      v4 += 24;
      *(_QWORD *)(v15 + 16) = v12 + 1;
      v13 = v15 + 24 * v12;
      *(_QWORD *)(v13 + 32) = v6;
      *(_QWORD *)(v13 + 40) = v8;
      *(_BYTE *)(v13 + 48) = v10 & 1;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BB563FD0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    sub_1BA740E88(0, v1, 0);
    v2 = v15;
    v4 = a1 + 64;
    do
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_1BA724A8C();
      v6 = v5;
      v8 = v7;
      v14 = v9;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      v11 = *(_QWORD *)(v15 + 16);
      v10 = *(_QWORD *)(v15 + 24);
      if (v11 >= v10 >> 1)
        sub_1BA740E88(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v15 + 16) = v11 + 1;
      v12 = v15 + 24 * v11;
      *(_QWORD *)(v12 + 32) = v6;
      *(_QWORD *)(v12 + 40) = v8;
      *(_BYTE *)(v12 + 48) = v14 & 1;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

ValueMetadata *type metadata accessor for FormatAudioTrackBinding()
{
  return &type metadata for FormatAudioTrackBinding;
}

uint64_t FormatPackageInventory.name.getter()
{
  return sub_1BB564160(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name);
}

uint64_t FormatPackageInventory.comment.getter()
{
  return sub_1BB564160(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment);
}

uint64_t sub_1BB564160(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1BB5641B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (uint64_t *)(a3 + 48);
    do
    {
      v8 = *(v7 - 2);
      if ((~v8 & 0xF000000000000007) != 0)
      {
        v10 = *(v7 - 1);
        v9 = *v7;
        sub_1BA5E7FF4(v8);
        sub_1BA6E6C68(v10);
        sub_1BA6E6C68(v9);
        sub_1BA5E7FF4(v8);
        sub_1BA6E6C68(v10);
        sub_1BA6E6C68(v9);
        sub_1BA5E7FF4(v8);
        sub_1BA7547AC();
        sub_1BA5E800C(v8);
        sub_1BA5E800C(v8);
        sub_1BA6E6CD8(v10);
        sub_1BA6E6CD8(v9);
        sub_1BA5E800C(v8);
        sub_1BA6E6CD8(v10);
        sub_1BA6E6CD8(v9);
        if (v4)
          break;
      }
      v7 += 3;
      --v5;
    }
    while (v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BB564300(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  sub_1BA75BC00(0);
  v21 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v14 = *(_QWORD *)(v9 + 72);
    v19[1] = a3;
    v20 = v14;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1BA4C2DD8(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      v28 = *v11;
      v15 = a2[3];
      v24 = a2[2];
      v25 = v15;
      v26 = a2[4];
      v27 = *((_QWORD *)a2 + 10);
      v16 = a2[1];
      v22 = *a2;
      v23 = v16;
      swift_retain();
      sub_1BA6F9BF4();
      swift_release();
      if (v4)
        break;
      v17 = a2[3];
      v24 = a2[2];
      v25 = v17;
      v26 = a2[4];
      v27 = *((_QWORD *)a2 + 10);
      v18 = a2[1];
      v22 = *a2;
      v23 = v18;
      sub_1BA75B8E8(a1, &v22);
      v4 = 0;
      sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
      v13 += v20;
      if (!--v12)
        goto LABEL_7;
    }
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BA75BC00);
LABEL_7:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BB5644A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v16 = result;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  swift_bridgeObjectRetain();
  sub_1BA4AD288(0, &qword_1EF2B0E50, (uint64_t)&type metadata for FormatSourceItemTipTrait, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v8 = v7;
  sub_1BB577DF4();
  for (i = (uint64_t *)(a3 + 48); ; i += 3)
  {
    v23 = *i;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    if (swift_dynamicCast())
      break;
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    sub_1BA4A2E80((uint64_t)&v20, (uint64_t (*)(_QWORD))sub_1BB577E48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  v10 = v8;
  v17 = v4;
  v12 = *((_QWORD *)&v21 + 1);
  v11 = v22;
  __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
  v13 = *(_OWORD *)(a2 + 48);
  v18[2] = *(_OWORD *)(a2 + 32);
  v18[3] = v13;
  v18[4] = *(_OWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v14;
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v11 + 8))(v16, v18, v12, v11);
  v4 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v10;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB56464C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = a3 + 48;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_retain_n();
      sub_1BA6F84BC();
      if (v4)
        break;
      v7 += 40;
      swift_bridgeObjectRelease();
      swift_release_n();
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  return result;
}

void sub_1BB564768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = a3 + 32;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
}

uint64_t sub_1BB567F54(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *v50;

  v4 = v3;
  v38 = result;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = a3 + 32;
    swift_bridgeObjectRetain();
    v7 = 0;
    v32 = v5;
    v34 = v6;
    do
    {
      v8 = v6 + 48 * v7;
      if (*(_BYTE *)(v8 + 32) == 1)
      {
        v10 = *(_QWORD *)v8;
        v9 = *(_QWORD *)(v8 + 8);
        v11 = *(_BYTE *)(v8 + 16);
        v12 = *(_QWORD **)(v8 + 24);
        v13 = *(_QWORD *)(v12[3] + 16);
        v36 = *(_QWORD *)v8;
        v37 = v9;
        if (v13)
        {
          v33 = v7;
          v40 = v4;
          v14 = v12[3];
          sub_1BA92F754(v12, 1);
          sub_1BA92F754(v12, 1);
          sub_1BAB5EC7C(v10, v9, v11);
          v35 = v12;
          sub_1BA92F754(v12, 1);
          swift_retain();
          swift_bridgeObjectRetain();
          v15 = (_QWORD *)(v14 + 56);
          while (1)
          {
            v17 = *(v15 - 3);
            v16 = *(v15 - 2);
            v18 = *((_BYTE *)v15 - 8);
            v50 = (void *)*v15;
            v19 = v50;
            sub_1BA73B1CC(v17, v16, v18);
            sub_1BA49DEA8();
            sub_1BB577DF4();
            v20 = v19;
            if (swift_dynamicCast())
            {
              v21 = *((_QWORD *)&v48 + 1);
              v22 = v49;
              __swift_project_boxed_opaque_existential_1(&v47, *((uint64_t *)&v48 + 1));
              v23 = a2[3];
              v43 = a2[2];
              v44 = v23;
              v45 = a2[4];
              v46 = *((_QWORD *)a2 + 10);
              v24 = a2[1];
              v41 = *a2;
              v42 = v24;
              (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v22 + 8))(v38, &v41, v21, v22);
              if (v40)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
                sub_1BA73B1B8(v17, v16, v18);
                swift_bridgeObjectRelease();

                sub_1BA92F770(v35, 1);
                sub_1BA92F770(v35, 1);
                sub_1BAB5EC9C(v36, v37, v11);
                sub_1BA92F770(v35, 1);
                swift_bridgeObjectRelease();
                return swift_release();
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
            }
            else
            {
              v49 = 0;
              v47 = 0u;
              v48 = 0u;
              sub_1BA4A2E80((uint64_t)&v47, (uint64_t (*)(_QWORD))sub_1BB577E48);
            }
            sub_1BA73B1B8(v17, v16, v18);

            v15 += 4;
            if (!--v13)
            {
              swift_bridgeObjectRelease();
              v4 = v40;
              v5 = v32;
              v7 = v33;
              v12 = v35;
              goto LABEL_16;
            }
          }
        }
        sub_1BA92F754(v12, 1);
        sub_1BA92F754(v12, 1);
        sub_1BAB5EC7C(v10, v9, v11);
        sub_1BA92F754(v12, 1);
        swift_retain();
LABEL_16:
        v50 = (void *)v12[4];
        v25 = v50;
        sub_1BA49DEA8();
        sub_1BB577DF4();
        v26 = v25;
        if ((swift_dynamicCast() & 1) != 0)
        {
          v27 = v12;
          v28 = *((_QWORD *)&v48 + 1);
          v29 = v49;
          __swift_project_boxed_opaque_existential_1(&v47, *((uint64_t *)&v48 + 1));
          v30 = a2[3];
          v43 = a2[2];
          v44 = v30;
          v45 = a2[4];
          v46 = *((_QWORD *)a2 + 10);
          v31 = a2[1];
          v41 = *a2;
          v42 = v31;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v29 + 8))(v38, &v41, v28, v29);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
          sub_1BA92F770(v27, 1);
          sub_1BA92F770(v27, 1);
          sub_1BAB5EC9C(v36, v37, v11);
          sub_1BA92F770(v27, 1);
          if (v4)
          {
            swift_bridgeObjectRelease();
            return swift_release();
          }
        }
        else
        {
          v49 = 0;
          v47 = 0u;
          v48 = 0u;
          sub_1BA4A2E80((uint64_t)&v47, (uint64_t (*)(_QWORD))sub_1BB577E48);
          sub_1BA92F770(v12, 1);
          sub_1BA92F770(v12, 1);
          sub_1BAB5EC9C(v36, v37, v11);
          sub_1BA92F770(v12, 1);
        }
        swift_release();
        v6 = v34;
      }
      ++v7;
    }
    while (v7 != v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BB56837C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v19;
  _OWORD v20[5];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)(a3 + 56);
    do
    {
      v8 = *(v7 - 3);
      v9 = *(v7 - 2);
      v10 = *((_BYTE *)v7 - 8);
      v25 = (void *)*v7;
      v11 = v25;
      sub_1BA73B1CC(v8, v9, v10);
      sub_1BA49DEA8();
      sub_1BB577DF4();
      v12 = v11;
      if (swift_dynamicCast())
      {
        v19 = v4;
        v14 = *((_QWORD *)&v23 + 1);
        v13 = v24;
        __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
        v15 = *(_OWORD *)(a2 + 48);
        v20[2] = *(_OWORD *)(a2 + 32);
        v20[3] = v15;
        v20[4] = *(_OWORD *)(a2 + 64);
        v21 = *(_QWORD *)(a2 + 80);
        v16 = *(_OWORD *)(a2 + 16);
        v20[0] = *(_OWORD *)a2;
        v20[1] = v16;
        (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v13 + 8))(a1, v20, v14, v13);
        v4 = v19;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
        sub_1BA73B1B8(v8, v9, v10);
        if (v19)
        {
          swift_bridgeObjectRelease();

          return;
        }
      }
      else
      {
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
        sub_1BA4A2E80((uint64_t)&v22, (uint64_t (*)(_QWORD))sub_1BB577E48);
        sub_1BA73B1B8(v8, v9, v10);
      }

      v7 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BB568510(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[5];
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  v27 = result;
  for (i = swift_bridgeObjectRetain() + 56; ; i += 32)
  {
    if ((*(_QWORD *)i & 0x8000000000000000) == 0)
      goto LABEL_5;
    v9 = *(_QWORD *)(i - 16);
    v10 = *(_BYTE *)(i - 8);
    v11 = *(_QWORD *)(*(_QWORD *)i + 16);
    v12 = *(_QWORD *)(v11 + 24);
    v28 = *(_QWORD *)(i - 24);
    sub_1BA73B1CC(v28, v9, v10);
    swift_retain();
    swift_retain();
    sub_1BB568510(v27, a2, v12);
    if (v4)
      break;
    v13 = *(_QWORD *)(v11 + 32);
    if (v13 < 0)
    {
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      swift_retain();
      swift_retain();
      sub_1BB568510(v27, a2, v15);
      v16 = *(_QWORD *)(v14 + 32);
      if (v16 < 0)
      {
        v17 = *(_QWORD *)(v16 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        swift_retain();
        swift_retain();
        sub_1BB568510(v27, a2, v18);
        v19 = *(_QWORD *)(v17 + 32);
        if (v19 < 0)
        {
          v20 = *(_QWORD *)(v19 + 16);
          v21 = *(_QWORD *)(v20 + 24);
          swift_retain();
          swift_retain();
          sub_1BB568510(v27, a2, v21);
          v22 = *(_QWORD *)(v20 + 32);
          if (v22 < 0)
          {
            v23 = *(_QWORD *)(v22 + 16);
            v24 = *(_QWORD *)(v23 + 24);
            swift_retain();
            swift_retain();
            sub_1BB568510(v27, a2, v24);
            v31 = *(_QWORD *)(v23 + 32);
            v25 = *(_OWORD *)(a2 + 48);
            v29[2] = *(_OWORD *)(a2 + 32);
            v29[3] = v25;
            v29[4] = *(_OWORD *)(a2 + 64);
            v30 = *(_QWORD *)(a2 + 80);
            v26 = *(_OWORD *)(a2 + 16);
            v29[0] = *(_OWORD *)a2;
            v29[1] = v26;
            swift_retain();
            sub_1BAC55694(v27, v29);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_16;
          }
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
        }
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
      }
LABEL_16:
      v8 = v28;
      swift_release();
      goto LABEL_4;
    }
    v8 = v28;
LABEL_4:
    swift_release();
    sub_1BA73B1B8(v8, v9, v10);
    swift_release();
LABEL_5:
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  swift_release();
  sub_1BA73B1B8(v28, v9, v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB56891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BB568964(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB573FC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB56891C);
}

uint64_t sub_1BB568940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BB568964(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB573FE4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB568940);
}

uint64_t sub_1BB568964(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v27 = result;
  v6 = v5;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (i = (uint64_t *)(a3 + 48); ; i += 3)
    {
      v10 = *i;
      if (*i < 0)
      {
        v11 = *(_QWORD *)(v10 + 16);
        v12 = *(_QWORD *)(v10 + 24);
        if (v11 < 0)
        {
          v14 = *(_QWORD *)(v11 + 16);
          v13 = *(_QWORD *)(v11 + 24);
          if (v14 < 0)
          {
            v25 = *(_QWORD *)(v11 + 24);
            v15 = *(_QWORD *)(v14 + 16);
            v16 = *(_QWORD *)(v14 + 24);
            if (v15 < 0)
            {
              v24 = v16;
              v17 = *(_QWORD *)(v15 + 16);
              v18 = *(_QWORD *)(v15 + 24);
              if (v17 < 0)
              {
                v21 = *(_QWORD *)(v17 + 24);
                v22 = *(_QWORD *)(v17 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                v20 = v18;
                v13 = v25;
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                a4(v27, a2, v22, v21);
                if (v6)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  goto LABEL_30;
                }
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                v19 = v18;
                v13 = v25;
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                v20 = v19;
              }
              swift_bridgeObjectRetain();
              a5(v27, a2, v20);
              if (v6)
              {
                swift_release();
                swift_bridgeObjectRelease();
                swift_release_n();
                swift_bridgeObjectRelease_n();
LABEL_30:
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_31;
              }
              swift_release();
              swift_bridgeObjectRelease_n();
              swift_release();
              v16 = v24;
            }
            else
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_retain_n();
              v13 = v25;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRetain();
            a5(v27, a2, v16);
            if (v6)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();
              swift_bridgeObjectRelease_n();
              swift_release();
LABEL_31:
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_32;
            }
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_release();
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain_n();
            swift_retain_n();
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRetain();
          a5(v27, a2, v13);
          if (v6)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            swift_release();
LABEL_32:
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
        }
        else
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain_n();
        }
        swift_bridgeObjectRetain();
        a5(v27, a2, v12);
        if (v6)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          return swift_release();
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      if (!--v7)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BB568ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      swift_retain();
      sub_1BA7547AC();
      if (v3)
        break;
      ++v5;
      swift_release();
      if (v4 == v5)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void sub_1BB568FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 *v76;

  v4 = v3;
  v76 = (__int128 *)a2;
  v61 = a1;
  v6 = type metadata accessor for FormatOption();
  v53 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B37B0, (uint64_t (*)(void))sub_1BA896A68, (uint64_t)&type metadata for FormatGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v46 - v11);
  v57 = a3;
  v13 = *(_QWORD *)(a3 + 16);
  if (v13)
  {
    v14 = v57 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v15 = *(_QWORD *)(v10 + 72);
    swift_bridgeObjectRetain();
    v16 = 0;
    v50 = v8;
    v47 = v13;
    v49 = v14;
    v48 = v15;
    while (1)
    {
      v51 = v16;
      sub_1BA8CAF1C(v14 + v15 * v16, (uint64_t)v12, (unint64_t *)&qword_1ED3B37B0, (uint64_t (*)(void))sub_1BA896A68, (uint64_t)&type metadata for FormatGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
      v17 = v12[10];
      v18 = v12[11];
      v56 = v12[14];
      v52 = v12[15];
      v19 = *(_QWORD *)(v17 + 16);
      v55 = v18;
      if (v19)
        break;
LABEL_8:
      v23 = *(_QWORD *)(v18 + 16);
      v54 = v12;
      if (v23)
      {
        v60 = v4;
        swift_bridgeObjectRetain_n();
        v24 = (uint64_t *)(v18 + 48);
        while (1)
        {
          v58 = v23;
          v25 = *(v24 - 1);
          v27 = *v24;
          v26 = v24[1];
          v29 = v24[2];
          v28 = v24[3];
          v30 = v24[4];
          v31 = v24[5];
          v62 = *(v24 - 2);
          v63 = v25;
          v64 = v27;
          v65 = v26;
          v66 = v29;
          v67 = v28;
          v68 = v30;
          v69 = v31;
          v32 = v76[3];
          v72 = v76[2];
          v73 = v32;
          v74 = v76[4];
          v75 = *((_QWORD *)v76 + 10);
          v33 = v76[1];
          v70 = *v76;
          v71 = v33;
          v34 = v62;
          v35 = v26;
          v36 = v30;
          v59 = v31;
          sub_1BA76B724(v62, v25, v27, v26, v29, v28, v30);
          v37 = v60;
          sub_1BAC5FA3C();
          v60 = v37;
          if (v37)
            break;
          v24 += 8;
          sub_1BA76B698(v34, v25, v27, v35, v29, v28, v36);
          v23 = v58 - 1;
          if (v58 == 1)
          {
            swift_bridgeObjectRelease_n();
            v4 = v60;
            v12 = v54;
            v8 = v50;
            goto LABEL_13;
          }
        }
        sub_1BA76B698(v34, v25, v27, v35, v29, v28, v36);
        swift_bridgeObjectRelease_n();
        v12 = v54;
        goto LABEL_24;
      }
LABEL_13:
      v38 = *(_QWORD *)(v56 + 16);
      if (v38)
      {
        v39 = v53;
        v40 = v56 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
        swift_bridgeObjectRetain_n();
        v41 = *(_QWORD *)(v39 + 72);
        while (1)
        {
          sub_1BA4C2DD8(v40, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
          v62 = *((_QWORD *)v8 + 2);
          v42 = v76[3];
          v72 = v76[2];
          v73 = v42;
          v74 = v76[4];
          v75 = *((_QWORD *)v76 + 10);
          v43 = v76[1];
          v70 = *v76;
          v71 = v43;
          swift_retain();
          sub_1BA711C44();
          if (v4)
            break;
          swift_release();
          sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
          v40 += v41;
          if (!--v38)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
        }
        swift_release();
        sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FormatOption);
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
LABEL_18:
      v44 = v52;
      swift_bridgeObjectRetain();
      sub_1BA6FEDF0(v61, (uint64_t)v76, v44);
      swift_bridgeObjectRelease();
      v14 = v49;
      v15 = v48;
      if (v4)
        goto LABEL_24;
      v45 = v51 + 1;
      sub_1BB06B59C((uint64_t)v12, (unint64_t *)&qword_1ED3B37B0, (uint64_t (*)(void))sub_1BA896A68, (uint64_t)&type metadata for FormatGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
      v12 = v54;
      v16 = v45;
      if (v45 == v47)
        goto LABEL_25;
    }
    swift_bridgeObjectRetain_n();
    v20 = v17 + 48;
    while (1)
    {
      v62 = *(_QWORD *)(v20 - 16);
      v21 = v76[3];
      v72 = v76[2];
      v73 = v21;
      v74 = v76[4];
      v75 = *((_QWORD *)v76 + 10);
      v22 = v76[1];
      v70 = *v76;
      v71 = v22;
      swift_bridgeObjectRetain();
      swift_retain_n();
      sub_1BA6F84BC();
      if (v4)
        break;
      v20 += 40;
      swift_bridgeObjectRelease();
      swift_release_n();
      if (!--v19)
      {
        swift_bridgeObjectRelease_n();
        v8 = v50;
        v18 = v55;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_24:
    sub_1BB06B59C((uint64_t)v12, (unint64_t *)&qword_1ED3B37B0, (uint64_t (*)(void))sub_1BA896A68, (uint64_t)&type metadata for FormatGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
LABEL_25:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BB569560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BB568964(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB574008, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB569560);
}

uint64_t sub_1BB569584(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v8 = result;
    swift_bridgeObjectRetain();
    v9 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v10 = *v9;
      v21 = *(v9 - 1);
      v11 = a2[3];
      v17 = a2[2];
      v18 = v11;
      v19 = a2[4];
      v20 = *((_QWORD *)a2 + 10);
      v12 = a2[1];
      v15 = *a2;
      v16 = v12;
      swift_retain();
      swift_retain_n();
      sub_1BA6F9BF4();
      if (v4)
        break;
      swift_release();
      v13 = a2[3];
      v17 = a2[2];
      v18 = v13;
      v19 = a2[4];
      v20 = *((_QWORD *)a2 + 10);
      v14 = a2[1];
      v15 = *a2;
      v16 = v14;
      swift_retain();
      sub_1BAC5D4B8(v8, &v15, v10);
      v9 += 2;
      swift_release();
      swift_release_n();
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1BB5696FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v8 = result;
    swift_bridgeObjectRetain();
    v9 = (uint64_t *)(a3 + 48);
    v25 = a2;
    v24 = v8;
    while (1)
    {
      v10 = *v9;
      if (*v9 < 0)
      {
        v12 = *(_QWORD *)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        if ((v12 >> 62) < 2)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain_n();
        }
        else
        {
          v13 = *(_QWORD *)(v12 + 16);
          v14 = *(_QWORD *)(v12 + 24);
          if ((v13 >> 62) > 1)
          {
            v23 = *(_QWORD *)(v12 + 24);
            v15 = *(_QWORD *)(v13 + 16);
            v22 = *(_QWORD *)(v13 + 24);
            if ((v15 >> 62) > 1)
            {
              v17 = *(_QWORD *)(v15 + 16);
              v21 = *(_QWORD *)(v15 + 24);
              if ((v17 >> 62) > 1)
              {
                v19 = *(_QWORD *)(v17 + 24);
                v20 = *(_QWORD *)(v17 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                sub_1BB57402C(v24, v25, v20, v19);
                if (v4)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  goto LABEL_30;
                }
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                v18 = v21;
              }
              else
              {
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                v18 = v21;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRetain();
              sub_1BB5696FC(v24, v25, v18);
              if (v4)
              {
                swift_release();
                swift_bridgeObjectRelease();
                swift_release_n();
                swift_bridgeObjectRelease_n();
LABEL_30:
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_31;
              }
              swift_release();
              swift_bridgeObjectRelease_n();
              swift_release();
              v16 = v22;
            }
            else
            {
              swift_retain();
              v16 = v22;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRetain();
            sub_1BB5696FC(v24, v25, v16);
            if (v4)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release_n();
              swift_bridgeObjectRelease_n();
LABEL_31:
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_32;
            }
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_release();
            v14 = v23;
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain_n();
            swift_retain_n();
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRetain();
          sub_1BB5696FC(v24, v25, v14);
          if (v4)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            swift_release();
LABEL_32:
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          a2 = v25;
          v8 = v24;
        }
        swift_bridgeObjectRetain();
        sub_1BB5696FC(v8, a2, v11);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          return swift_release();
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      v9 += 3;
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1BB569D10(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  unint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _QWORD v171[5];
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  unsigned __int128 v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  __int128 *v223;

  v223 = a2;
  sub_1BA7DC9A0();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v171 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v171 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v171 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v171 - v19;
  MEMORY[0x1E0C80A78](v21);
  v183 = (char *)v171 - v22;
  MEMORY[0x1E0C80A78](v23);
  v185 = (char *)v171 - v24;
  MEMORY[0x1E0C80A78](v25);
  v187 = (char *)v171 - v26;
  MEMORY[0x1E0C80A78](v27);
  v182 = (char *)v171 - v28;
  MEMORY[0x1E0C80A78](v29);
  v181 = (char *)v171 - v30;
  MEMORY[0x1E0C80A78](v31);
  v184 = (char *)v171 - v32;
  MEMORY[0x1E0C80A78](v33);
  v186 = (char *)v171 - v34;
  v35 = type metadata accessor for FormatRemoteFont();
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)v171 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = *(_QWORD *)(a3 + 16);
  if (!v191)
    return;
  v179 = v37;
  v173 = v20;
  v180 = v17;
  v178 = v14;
  v174 = v11;
  v175 = v8;
  v204 = a3 + 32;
  v176 = a1 + 8;
  v188 = a3;
  swift_bridgeObjectRetain();
  v38 = 0;
  v207 = a1;
  v39 = v3;
  v40 = v191;
  while (1)
  {
    v42 = v204 + 24 * v38;
    v44 = *(_QWORD *)(v42 + 8);
    v43 = *(_QWORD *)(v42 + 16);
    if (v43 >> 62)
      break;
    v199 = v38;
    v208 = v44;
    v206 = v39;
    v48 = *(_QWORD *)(v43 + 16);
    v49 = *(_QWORD *)(v43 + 24);
    v50 = *(_QWORD *)(v43 + 32);
    v51 = *(unsigned __int8 *)(v43 + 40);
    v52 = *(_QWORD *)(v43 + 48);
    v53 = *(_QWORD *)(v43 + 56);
    v54 = *(unsigned __int16 *)(v43 + 64);
    v55 = *(_QWORD *)(v43 + 72);
    v56 = *(_QWORD *)(v43 + 80);
    v58 = *(_QWORD *)(v43 + 88);
    v57 = *(_QWORD *)(v43 + 96);
    v59 = *(unsigned __int8 *)(v43 + 104);
    v60 = *(_QWORD *)(v43 + 112);
    v198 = v52;
    LODWORD(v197) = v51;
    v201 = v53;
    v200 = v60;
    LODWORD(v205) = v59;
    v192 = v43;
    v196 = v58;
    v202 = v56;
    LODWORD(v203) = v54;
    v195 = v50;
    v194 = v49;
    v193 = v48;
    v65 = v55;
    v66 = v57;
    v64 = v55;
    switch(v54 >> 8)
    {
      case 0u:
        __asm { BR              X9 }
        return;
      case 1u:
        v67 = v54;
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1BA60DF54(v48, v49, v50, v51);
        v115 = v201;
        if (v201)
        {
          v116 = v198;
          v117 = v67;
LABEL_31:
          sub_1BA740E74(v116, v115, v117);
          sub_1BA60DEE4(v65);
          v62 = v196;
          v63 = v66;
          sub_1BA69C808(v196, v66, v205);
          sub_1BA895BA4(v200);
        }
        else
        {
          v130 = v198;
          sub_1BA740E74(v198, 0, v67);
          sub_1BA60DEE4(v65);
          v62 = v196;
          v63 = v66;
          sub_1BA69C808(v196, v66, v205);
          sub_1BA895BA4(v200);
          v70 = v130;
          v71 = 0;
LABEL_14:
          sub_1BA740460(v70, v71, v67);
        }
        v39 = v206;
LABEL_33:
        if ((~v64 & 0xF000000000000007) != 0)
        {
          v124 = v223;
          v190 = v63;
          *(_QWORD *)&v209 = v64;
          v125 = v223[3];
          v217 = v223[2];
          v218 = v125;
          v219 = v223[4];
          v220 = *((_QWORD *)v223 + 10);
          v126 = v223[1];
          v215 = *v223;
          v216 = v126;
          v127 = v202;
          sub_1BA60DEE4(v64);
          swift_retain();
          sub_1BA7547AC();
          if (v39)
          {
            swift_release();
            sub_1BA60DF1C(v64);
            sub_1BA60DFC4(v193, v194, v195, v197);
            sub_1BA740460(v198, v201, v203);
            sub_1BA60DF1C(v64);
            sub_1BA69C828(v62, v190, v205);
            sub_1BA895BB8(v200);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release_n();
            return;
          }
          swift_release();
          *(_QWORD *)&v209 = v127;
          v128 = v124[3];
          v217 = v124[2];
          v218 = v128;
          v219 = v124[4];
          v220 = *((_QWORD *)v124 + 10);
          v129 = v124[1];
          v215 = *v124;
          v216 = v129;
          swift_retain();
          sub_1BA7547AC();
          swift_release();
          sub_1BA60DF1C(v64);
          v123 = v200;
          v121 = v205;
          v63 = v190;
          v38 = v199;
          v62 = v196;
          v122 = v201;
          v120 = v197;
        }
        else
        {
          v120 = v197;
          v121 = v205;
          v122 = v201;
          v38 = v199;
          v123 = v200;
        }
        if ((~v123 & 0xF000000000000007) != 0)
          __asm { BR              X9 }
        v41 = v123;
        sub_1BA60DFC4(v193, v194, v195, v120);
        sub_1BA740460(v198, v122, v203);
        sub_1BA60DF1C(v64);
        sub_1BA69C828(v62, v63, v121);
        sub_1BA895BB8(v41);
        swift_bridgeObjectRelease();
        swift_release_n();
        v40 = v191;
        break;
      case 2u:
        v118 = v54;
        v119 = v52;
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1BA60DF54(v48, v49, v50, v51);
        v116 = v119;
        v117 = v118;
        v115 = v201;
        goto LABEL_31;
      case 3u:
      case 4u:
        v67 = v54;
        v68 = v52;
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1BA60DF54(v48, v49, v50, v51);
        v69 = v201;
        sub_1BA740E74(v68, v201, v67);
        sub_1BA60DEE4(v65);
        v62 = v196;
        v63 = v66;
        sub_1BA69C808(v196, v66, v205);
        sub_1BA895BA4(v200);
        v70 = v68;
        v71 = v69;
        goto LABEL_14;
      default:
        v61 = v55;
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1BA60DF54(v48, v49, v50, v51);
        sub_1BA740E74(v198, v53, v203);
        sub_1BA60DEE4(v61);
        sub_1BA69C808(v58, v65, v205);
        sub_1BA895BA4(v60);
        v39 = v206;
        v62 = v58;
        v63 = v65;
        v64 = v61;
        goto LABEL_33;
    }
LABEL_4:
    if (++v38 == v40)
      goto LABEL_72;
  }
  if (v43 >> 62 == 1)
    goto LABEL_4;
  v45 = *(_QWORD *)(v43 + 16);
  v46 = *(_QWORD *)(v43 + 24);
  if (!(v45 >> 62))
  {
    v199 = v38;
    v203 = v46;
    v205 = v43 & 0x3FFFFFFFFFFFFFFFLL;
    v208 = v44;
    v206 = v39;
    v73 = *(_QWORD *)(v45 + 16);
    v72 = *(_QWORD *)(v45 + 24);
    v74 = *(_QWORD *)(v45 + 32);
    v75 = *(unsigned __int8 *)(v45 + 40);
    v76 = *(_QWORD *)(v45 + 48);
    v77 = *(unsigned __int16 *)(v45 + 64);
    v78 = *(_QWORD *)(v45 + 72);
    v79 = *(_QWORD *)(v45 + 80);
    v80 = *(_QWORD *)(v45 + 88);
    v81 = *(_QWORD *)(v45 + 96);
    v82 = *(unsigned __int8 *)(v45 + 104);
    v83 = *(_QWORD *)(v45 + 112);
    v201 = *(_QWORD *)(v45 + 56);
    LODWORD(v195) = v75;
    v196 = v79;
    v190 = v83;
    v189 = v82;
    v193 = v81;
    LODWORD(v202) = v77;
    v194 = v76;
    v200 = v80;
    v198 = v72;
    v197 = v73;
    v192 = v78;
    v93 = v74;
    v38 = v199;
    v94 = v196;
    switch(v77 >> 8)
    {
      case 0u:
        *(_QWORD *)&v209 = v76;
        v152 = v223[3];
        v217 = v223[2];
        v218 = v152;
        v219 = v223[4];
        v220 = *((_QWORD *)v223 + 10);
        v153 = v223[1];
        v215 = *v223;
        v216 = v153;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain_n();
        sub_1BA60DF54(v197, v198, v93, v75);
        sub_1BA740E74(v76, v201, v202);
        v154 = v192;
        sub_1BA60DEE4(v192);
        v88 = v189;
        sub_1BA69C808(v200, v193, v189);
        v83 = v190;
        sub_1BA895BA4(v190);
        v155 = v206;
        sub_1BA754E6C();
        v206 = v155;
        if (v155)
        {
          sub_1BA60DFC4(v197, v198, v93, v195);
          sub_1BA740460(v194, v201, v202);
          sub_1BA60DF1C(v154);
          sub_1BA69C828(v200, v193, v88);
          sub_1BA895BB8(v83);
          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          return;
        }
        v86 = v154;
        v89 = v193;
        v87 = v93;
LABEL_48:
        if ((~v86 & 0xF000000000000007) != 0)
        {
          v158 = v86;
          v159 = v87;
          *(_QWORD *)&v209 = v158;
          v160 = v223[3];
          v217 = v223[2];
          v218 = v160;
          v219 = v223[4];
          v220 = *((_QWORD *)v223 + 10);
          v161 = v223[1];
          v156 = v158;
          v162 = v196;
          v215 = *v223;
          v216 = v161;
          swift_retain();
          swift_retain();
          v163 = v206;
          sub_1BA7547AC();
          if (v163)
          {
            sub_1BA60DF1C(v156);
            sub_1BA60DFC4(v197, v198, v159, v195);
            sub_1BA740460(v194, v201, v202);
            sub_1BA60DF1C(v156);
            sub_1BA69C828(v200, v193, v189);
            sub_1BA895BB8(v190);
            swift_bridgeObjectRelease();
            swift_release_n();
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }
          *(_QWORD *)&v209 = v162;
          v164 = v223[3];
          v217 = v223[2];
          v218 = v164;
          v219 = v223[4];
          v220 = *((_QWORD *)v223 + 10);
          v165 = v223[1];
          v215 = *v223;
          v216 = v165;
          sub_1BA7547AC();
          v206 = 0;
          sub_1BA60DF1C(v156);
          v83 = v190;
          v88 = v189;
          v89 = v193;
          v157 = v195;
          v87 = v159;
        }
        else
        {
          v156 = v86;
          v157 = v195;
        }
        if ((~v83 & 0xF000000000000007) == 0)
        {
          sub_1BA60DFC4(v197, v198, v87, v157);
          sub_1BA740460(v194, v201, v202);
          sub_1BA60DF1C(v156);
          sub_1BA69C828(v200, v89, v88);
          sub_1BA895BB8(v83);
          swift_release();
          v39 = v206;
LABEL_56:
          v47 = v207;
          v40 = v191;
          v46 = v203;
          goto LABEL_62;
        }
        v196 = v45;
        v166 = v87;
        v167 = v88;
        *(_QWORD *)&v209 = v83;
        v168 = v223[3];
        v217 = v223[2];
        v218 = v168;
        v219 = v223[4];
        v220 = *((_QWORD *)v223 + 10);
        v169 = v223[1];
        v215 = *v223;
        v216 = v169;
        v170 = v206;
        sub_1BAC63538();
        v39 = v170;
        if (!v170)
        {
          sub_1BA60DFC4(v197, v198, v166, v195);
          sub_1BA740460(v194, v201, v202);
          sub_1BA60DF1C(v156);
          sub_1BA69C828(v200, v89, v167);
          sub_1BA895BB8(v83);
          swift_release();
          goto LABEL_56;
        }
        sub_1BA60DFC4(v197, v198, v166, v195);
        sub_1BA740460(v194, v201, v202);
        sub_1BA60DF1C(v156);
        sub_1BA69C828(v200, v89, v167);
        sub_1BA895BB8(v83);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
LABEL_71:
        swift_release_n();
LABEL_72:
        swift_bridgeObjectRelease();
        return;
      case 1u:
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain_n();
        sub_1BA60DF54(v197, v198, v93, v75);
        v89 = v193;
        sub_1BA740E74(v194, v201, v202);
        v86 = v192;
        sub_1BA60DEE4(v192);
        v95 = v200;
        goto LABEL_47;
      case 2u:
      case 3u:
      case 4u:
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain_n();
        sub_1BA60DF54(v197, v198, v93, v75);
        sub_1BA740E74(v76, v201, v202);
        v86 = v192;
        sub_1BA60DEE4(v192);
        v95 = v200;
        v89 = v193;
LABEL_47:
        v88 = v189;
        sub_1BA69C808(v95, v89, v189);
        v83 = v190;
        sub_1BA895BA4(v190);
        v87 = v93;
        goto LABEL_48;
      default:
        v84 = v75;
        v85 = v74;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain_n();
        sub_1BA60DF54(v73, v94, v85, v84);
        sub_1BA740E74(v76, v201, v202);
        v86 = v192;
        sub_1BA60DEE4(v192);
        sub_1BA69C808(v200, v93, v82);
        sub_1BA895BA4(v83);
        v87 = v85;
        v88 = v82;
        v89 = v93;
        v38 = v199;
        goto LABEL_48;
    }
  }
  if (v45 >> 62 == 1)
  {
    v47 = v207;
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_62:
    swift_bridgeObjectRetain();
    sub_1BB569D10(v47, v223, v46);
    if (v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_68;
    }
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    goto LABEL_4;
  }
  v202 = v45 & 0x3FFFFFFFFFFFFFFFLL;
  v90 = *(_QWORD *)(v45 + 16);
  v91 = *(_QWORD *)(v45 + 24);
  v205 = v43 & 0x3FFFFFFFFFFFFFFFLL;
  v201 = v90;
  if (!(v90 >> 62))
  {
    v206 = v39;
    v96 = v91;
    v208 = v44;
    v97 = *(_QWORD *)(v90 + 16);
    v98 = *(_QWORD *)(v90 + 24);
    v99 = *(_QWORD *)(v90 + 32);
    v100 = *(_BYTE *)(v90 + 40);
    v101 = *(_QWORD *)(v90 + 48);
    v192 = *(_QWORD *)(v90 + 56);
    v102 = *(unsigned __int16 *)(v90 + 64);
    v103 = *(_QWORD *)(v90 + 80);
    v193 = *(_QWORD *)(v90 + 72);
    v194 = v103;
    v104 = *(_QWORD *)(v90 + 96);
    v195 = *(_QWORD *)(v90 + 88);
    v196 = v104;
    LODWORD(v197) = *(unsigned __int8 *)(v90 + 104);
    v198 = *(_QWORD *)(v90 + 112);
    *(_QWORD *)&v215 = v97;
    *((_QWORD *)&v215 + 1) = v98;
    v105 = v97;
    *(_QWORD *)&v216 = v99;
    BYTE8(v216) = v100;
    *(_QWORD *)&v217 = v101;
    *((_QWORD *)&v217 + 1) = v192;
    v106 = v101;
    LOWORD(v218) = v102;
    *((_QWORD *)&v218 + 1) = v193;
    v219 = __PAIR128__(v195, v103);
    v220 = v104;
    v221 = v197;
    v222 = v198;
    v107 = v223[3];
    v211 = v223[2];
    v212 = v107;
    v213 = v223[4];
    v214 = *((_QWORD *)v223 + 10);
    v108 = v223[1];
    v209 = *v223;
    v210 = v108;
    v190 = v90 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain_n();
    v200 = v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    v203 = v46;
    swift_bridgeObjectRetain();
    v109 = v98;
    v110 = v98;
    v111 = v100;
    sub_1BA60DF54(v105, v110, v99, v100);
    v189 = v102;
    sub_1BA740E74(v106, v192, v102);
    sub_1BA60DEE4(v193);
    sub_1BA69C808(v195, v196, v197);
    sub_1BA895BA4(v198);
    v112 = v206;
    sub_1BA73D0A8();
    if (v112)
    {
      sub_1BA60DFC4(v105, v109, v99, v111);
      sub_1BA740460(v106, v192, v189);
      sub_1BA60DF1C(v193);
      sub_1BA69C828(v195, v196, v197);
      sub_1BA895BB8(v198);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      return;
    }
    sub_1BA60DFC4(v105, v109, v99, v111);
    sub_1BA740460(v106, v192, v189);
    sub_1BA60DF1C(v193);
    sub_1BA69C828(v195, v196, v197);
    sub_1BA895BB8(v198);
    swift_release();
    v39 = 0;
    v47 = v207;
    v40 = v191;
    goto LABEL_59;
  }
  if (v90 >> 62 == 1)
  {
    v92 = v91;
    v47 = v207;
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_60;
  }
  v200 = v91;
  v203 = v46;
  v208 = v44;
  v198 = v90 & 0x3FFFFFFFFFFFFFFFLL;
  v114 = *(_QWORD *)(v90 + 16);
  v113 = *(_QWORD *)(v90 + 24);
  if (v114 >> 62)
  {
    if (v114 >> 62 == 1)
    {
      v47 = v207;
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v148 = *(_QWORD *)(v114 + 24);
      *(_QWORD *)&v209 = *(_QWORD *)(v114 + 16);
      v149 = v223[3];
      v217 = v223[2];
      v218 = v149;
      v219 = v223[4];
      v220 = *((_QWORD *)v223 + 10);
      v150 = v223[1];
      v215 = *v223;
      v216 = v150;
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      v206 = v114 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain_n();
      v197 = v113;
      swift_bridgeObjectRetain();
      v151 = v207;
      sub_1BA6466EC(v207, &v215);
      if (v39)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_76;
      }
      swift_release();
      swift_bridgeObjectRetain();
      sub_1BB569D10(v151, v223, v148);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v47 = v207;
      v40 = v191;
      v113 = v197;
    }
  }
  else
  {
    v132 = *(_QWORD *)(v114 + 16);
    v131 = *(_QWORD *)(v114 + 24);
    v133 = *(_QWORD *)(v90 + 24);
    v134 = *(_QWORD *)(v114 + 32);
    v206 = v39;
    v135 = *(_BYTE *)(v114 + 40);
    v136 = *(_QWORD *)(v114 + 56);
    v172 = *(_QWORD *)(v114 + 48);
    v177 = v136;
    v189 = *(unsigned __int16 *)(v114 + 64);
    v137 = *(_QWORD *)(v114 + 80);
    v190 = *(_QWORD *)(v114 + 72);
    v192 = v137;
    v138 = *(_QWORD *)(v114 + 96);
    v193 = *(_QWORD *)(v114 + 88);
    v194 = v138;
    LODWORD(v195) = *(unsigned __int8 *)(v114 + 104);
    v196 = *(_QWORD *)(v114 + 112);
    *(_QWORD *)&v215 = v132;
    *((_QWORD *)&v215 + 1) = v131;
    v139 = v131;
    *(_QWORD *)&v216 = v134;
    BYTE8(v216) = v135;
    *(_QWORD *)&v217 = v172;
    *((_QWORD *)&v217 + 1) = v136;
    LOWORD(v218) = v189;
    *((_QWORD *)&v218 + 1) = v190;
    v219 = __PAIR128__(v193, v137);
    v220 = v138;
    v221 = v195;
    v222 = v196;
    v140 = v223[3];
    v211 = v223[2];
    v212 = v140;
    v213 = v223[4];
    v214 = *((_QWORD *)v223 + 10);
    v141 = *v223;
    v142 = v223[1];
    v171[3] = v114;
    v209 = v141;
    v210 = v142;
    v171[4] = v114 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain_n();
    v197 = v133;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    v143 = v139;
    v144 = v139;
    v145 = v135;
    sub_1BA60DF54(v132, v143, v134, v135);
    v146 = v172;
    sub_1BA740E74(v172, v177, v189);
    sub_1BA60DEE4(v190);
    sub_1BA69C808(v193, v194, v195);
    sub_1BA895BA4(v196);
    v147 = v206;
    sub_1BA73D0A8();
    if (v147)
    {
      sub_1BA60DFC4(v132, v144, v134, v145);
      sub_1BA740460(v146, v177, v189);
      sub_1BA60DF1C(v190);
      sub_1BA69C828(v193, v194, v195);
      sub_1BA895BB8(v196);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release();
      goto LABEL_78;
    }
    sub_1BA60DFC4(v132, v144, v134, v145);
    sub_1BA740460(v146, v177, v189);
    sub_1BA60DF1C(v190);
    sub_1BA69C828(v193, v194, v195);
    sub_1BA895BB8(v196);
    swift_release();
    v39 = 0;
    v47 = v207;
    v40 = v191;
    v113 = v197;
  }
  swift_bridgeObjectRetain();
  sub_1BB569D10(v47, v223, v113);
  if (v39)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
LABEL_76:
    swift_release();
LABEL_78:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_72;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release();
LABEL_59:
  v46 = v203;
  v92 = v200;
LABEL_60:
  swift_bridgeObjectRetain();
  sub_1BB569D10(v47, v223, v92);
  if (!v39)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release();
    goto LABEL_62;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease_n();
LABEL_68:
  swift_release();
}

void sub_1BB56EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = a3 + 32;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
}

uint64_t sub_1BB5701AC(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v28 = result;
  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return result;
  v6 = a3 + 32;
  swift_bridgeObjectRetain();
  v7 = 0;
  v23 = v4;
  v24 = v6;
  while (1)
  {
    v8 = v6 + 32 * v7;
    if (*(_BYTE *)(v8 + 24) == 1)
      break;
LABEL_3:
    if (++v7 == v4)
      return swift_bridgeObjectRelease();
  }
  v10 = *(_QWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v38 = v10;
  sub_1BA896BB8(v10, v9, 1);
  sub_1BA896BB8(v10, v9, 1);
  sub_1BA4AD288(0, &qword_1EF2B0E50, (uint64_t)&type metadata for FormatSourceItemTipTrait, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB577DF4();
  swift_bridgeObjectRetain();
  v26 = v7;
  v27 = v10;
  if ((swift_dynamicCast() & 1) == 0)
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    sub_1BA4A2E80((uint64_t)&v35, (uint64_t (*)(_QWORD))sub_1BB577E48);
    v15 = *(_QWORD *)(v9 + 16);
    if (v15)
    {
LABEL_10:
      swift_bridgeObjectRetain_n();
      v25 = v9;
      v16 = (uint64_t *)(v9 + 48);
      while (1)
      {
        v38 = *v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        if (swift_dynamicCast())
        {
          v17 = *((_QWORD *)&v36 + 1);
          v18 = v37;
          __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
          v19 = a2[3];
          v31 = a2[2];
          v32 = v19;
          v33 = a2[4];
          v34 = *((_QWORD *)a2 + 10);
          v20 = a2[1];
          v29 = *a2;
          v30 = v20;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v18 + 8))(v28, &v29, v17, v18);
          if (v3)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BA896BE0(v27, v25, 1);
            v21 = v27;
            v22 = v25;
            goto LABEL_19;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v37 = 0;
          v35 = 0u;
          v36 = 0u;
          sub_1BA4A2E80((uint64_t)&v35, (uint64_t (*)(_QWORD))sub_1BB577E48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v16 += 3;
        if (!--v15)
        {
          v9 = v25;
          swift_bridgeObjectRelease_n();
          v4 = v23;
          goto LABEL_17;
        }
      }
    }
    goto LABEL_17;
  }
  v11 = *((_QWORD *)&v36 + 1);
  v12 = v37;
  __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
  v13 = a2[3];
  v31 = a2[2];
  v32 = v13;
  v33 = a2[4];
  v34 = *((_QWORD *)a2 + 10);
  v14 = a2[1];
  v29 = *a2;
  v30 = v14;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v12 + 8))(v28, &v29, v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  if (!v3)
  {
    v15 = *(_QWORD *)(v9 + 16);
    if (v15)
      goto LABEL_10;
LABEL_17:
    v6 = v24;
    v7 = v26;
    sub_1BA896BE0(v27, v9, 1);
    sub_1BA896BE0(v27, v9, 1);
    goto LABEL_3;
  }
  sub_1BA896BE0(v10, v9, 1);
  v21 = v10;
  v22 = v9;
LABEL_19:
  sub_1BA896BE0(v21, v22, 1);
  return swift_bridgeObjectRelease();
}

void sub_1BB570504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X10 }
  }
}

uint64_t sub_1BB570958(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[5];
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  if (a3[2])
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = a3[5];
    v13 = a3[4];
    v9 = *(_OWORD *)(a2 + 48);
    v11[2] = *(_OWORD *)(a2 + 32);
    v11[3] = v9;
    v11[4] = *(_OWORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v10;
    swift_retain();
    swift_retain();
    sub_1BA6F9BF4(v7, v11);
    if (!v4)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BB570D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a3 + 56); ; i += 5)
  {
    v8 = *(i - 1);
    v9 = *i;
    if ((~v8 & 0xF000000000000007) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1BA5E7FF4(v8);
      sub_1BA5E7FF4(v9);
      if ((~v9 & 0xF000000000000007) == 0)
        goto LABEL_3;
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    sub_1BA5E7FF4(v8);
    sub_1BA5E7FF4(v9);
    sub_1BA5E7FF4(v8);
    sub_1BA7547AC();
    sub_1BA5E800C(v8);
    if (v4)
      break;
    if ((~v9 & 0xF000000000000007) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      sub_1BA5E800C(v8);
      sub_1BA5E800C(v9);
      goto LABEL_4;
    }
LABEL_10:
    swift_retain();
    sub_1BA7547AC();
    sub_1BA5E800C(v9);
    swift_bridgeObjectRelease();
    sub_1BA5E800C(v8);
    sub_1BA5E800C(v9);
    if (v4)
      return swift_bridgeObjectRelease();
LABEL_4:
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1BA5E800C(v8);
  sub_1BA5E800C(v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB570F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a3 + 64); ; i += 6)
  {
    v9 = *(i - 1);
    v8 = *i;
    if ((~v9 & 0xF000000000000007) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BA5E7FF4(v9);
      sub_1BA5E7FF4(v8);
      if ((~v8 & 0xF000000000000007) == 0)
        goto LABEL_3;
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA5E7FF4(v9);
    sub_1BA5E7FF4(v8);
    sub_1BA7547AC();
    if (v4)
      break;
    if ((~v8 & 0xF000000000000007) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BA5E800C(v9);
      sub_1BA5E800C(v8);
      goto LABEL_4;
    }
LABEL_10:
    sub_1BA7547AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA5E800C(v9);
    sub_1BA5E800C(v8);
    if (v4)
      return swift_bridgeObjectRelease();
LABEL_4:
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA5E800C(v9);
  sub_1BA5E800C(v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB571130(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  v8 = result;
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)(a3 + 48);
  v44 = v8;
  v45 = a2;
  while (1)
  {
    v10 = *v9;
    v11 = *v9 >> 62;
    if ((_DWORD)v11)
      break;
LABEL_3:
    v9 += 3;
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  if ((_DWORD)v11 == 1)
  {
    v12 = v8;
    v13 = *(_QWORD *)(v10 + 24);
    v54 = *(_QWORD *)(v10 + 16);
    v14 = a2[3];
    v50 = a2[2];
    v51 = v14;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v15 = a2[1];
    v48 = *a2;
    v49 = v15;
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    sub_1BAC5DBE0(v12, &v48);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release();
      return swift_release_n();
    }
    swift_release();
    v54 = v13;
    v16 = a2[3];
    v50 = a2[2];
    v51 = v16;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v17 = a2[1];
    v48 = *a2;
    v49 = v17;
    swift_retain();
    sub_1BAC5DBE0(v12, &v48);
    v8 = v12;
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release();
    swift_release_n();
    v4 = 0;
    a2 = v45;
    goto LABEL_3;
  }
  v18 = *(_QWORD *)(v10 + 16);
  v19 = *(_QWORD *)(v10 + 24);
  if (!(v18 >> 62))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
LABEL_31:
    swift_bridgeObjectRetain();
    sub_1BB571130(v8, a2, v19);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    goto LABEL_3;
  }
  v46 = *(_QWORD *)(v10 + 24);
  if (v18 >> 62 == 1)
  {
    v47 = v9;
    v20 = *(_QWORD *)(v18 + 24);
    v54 = *(_QWORD *)(v18 + 16);
    v21 = a2[3];
    v50 = a2[2];
    v51 = v21;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v22 = a2[1];
    v48 = *a2;
    v49 = v22;
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1BAC5DBE0(v44, &v48);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release();
      swift_release_n();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    v54 = v20;
    v23 = a2[3];
    v50 = a2[2];
    v51 = v23;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v24 = a2[1];
    v48 = *a2;
    v49 = v24;
    swift_retain();
    sub_1BAC5DBE0(v44, &v48);
    swift_release();
    swift_release();
    swift_release_n();
    a2 = v45;
    v8 = v44;
    v9 = v47;
    goto LABEL_31;
  }
  v25 = *(_QWORD *)(v18 + 16);
  v26 = *(_QWORD *)(v18 + 24);
  if (!(v25 >> 62))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    v32 = v26;
    v8 = v44;
    goto LABEL_29;
  }
  v43 = *(_QWORD *)(v18 + 24);
  if (v25 >> 62 == 1)
  {
    v27 = *(_QWORD *)(v25 + 24);
    v54 = *(_QWORD *)(v25 + 16);
    v28 = a2[3];
    v50 = a2[2];
    v51 = v28;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v29 = a2[1];
    v48 = *a2;
    v49 = v29;
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1BAC5DBE0(v44, &v48);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_40;
    }
    swift_release();
    v54 = v27;
    v30 = a2[3];
    v50 = a2[2];
    v51 = v30;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v31 = a2[1];
    v48 = *a2;
    v49 = v31;
    swift_retain();
    sub_1BAC5DBE0(v44, &v48);
    swift_release();
    swift_release();
    swift_release_n();
    v19 = v46;
    v8 = v44;
    goto LABEL_28;
  }
  v33 = *(_QWORD *)(v25 + 16);
  v34 = *(_QWORD *)(v25 + 24);
  if (!(v33 >> 62))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    v8 = v44;
    goto LABEL_26;
  }
  if (v33 >> 62 == 1)
  {
    v35 = *(_QWORD *)(v33 + 24);
    v54 = *(_QWORD *)(v33 + 16);
    v36 = a2[3];
    v50 = a2[2];
    v51 = v36;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v37 = a2[1];
    v48 = *a2;
    v49 = v37;
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1BAC5DBE0(v44, &v48);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_44;
    }
    swift_release();
    v54 = v35;
    v38 = a2[3];
    v50 = a2[2];
    v51 = v38;
    v52 = a2[4];
    v53 = *((_QWORD *)a2 + 10);
    v39 = a2[1];
    v48 = *a2;
    v49 = v39;
    swift_retain();
    sub_1BAC5DBE0(v44, &v48);
    swift_release();
    swift_release();
    swift_release_n();
    v19 = v46;
LABEL_25:
    v8 = v44;
LABEL_26:
    swift_bridgeObjectRetain();
    sub_1BB571130(v8, a2, v34);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      goto LABEL_44;
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_28:
    v32 = v43;
LABEL_29:
    swift_bridgeObjectRetain();
    sub_1BB571130(v8, a2, v32);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease_n();
LABEL_40:
      swift_release();
      goto LABEL_45;
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release();
    goto LABEL_31;
  }
  v40 = *(_QWORD *)(v33 + 24);
  v54 = *(_QWORD *)(v33 + 16);
  v41 = a2[3];
  v50 = a2[2];
  v51 = v41;
  v52 = a2[4];
  v53 = *((_QWORD *)a2 + 10);
  v42 = a2[1];
  v48 = *a2;
  v49 = v42;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_1BAC5DBE0(v44, &v48);
  if (!v4)
  {
    swift_bridgeObjectRetain();
    sub_1BB571130(v44, a2, v40);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_44:
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_45:
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB571CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = a3 + 56; ; i += 32)
    {
      swift_retain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_1BA645F4C();
      if (v4)
        break;
      swift_release();
      swift_retain();
      sub_1BA768A3C();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1BB571E78(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_1BA726248(a1, a2, a3, (void (*)(uint64_t))sub_1BA725020, (void (*)(uint64_t, __int128 *))sub_1BA755B9C, (void (*)(uint64_t))sub_1BA725050);
}

uint64_t sub_1BB571EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[26];
  uint64_t v32;

  v24 = *(_QWORD *)(a3 + 16);
  if (v24)
  {
    v25 = a3 + 32;
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v5 = (_OWORD *)(v25 + 144 * v4);
      v6 = v5[7];
      v30 = v5[6];
      *(_OWORD *)v31 = v6;
      *(_OWORD *)&v31[10] = *(_OWORD *)((char *)v5 + 122);
      v7 = v5[3];
      v26[2] = v5[2];
      v27 = v7;
      v8 = v5[5];
      v28 = v5[4];
      v29 = v8;
      v9 = v5[1];
      v26[0] = *v5;
      v26[1] = v9;
      v10 = *((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v11 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 16);
        if (v11)
          break;
      }
      sub_1BAC690CC((uint64_t)v26);
LABEL_12:
      v13 = v31[24];
      if (v31[24] == 254)
      {
        sub_1BAC6919C((uint64_t)v26);
      }
      else
      {
        v20 = *(_QWORD *)&v31[8];
        v21 = *(_QWORD *)&v31[16];
        v23 = *(_QWORD *)v31;
        v14 = *((_QWORD *)&v29 + 1);
        v22 = v30;
        v15 = *((_QWORD *)&v28 + 1);
        v19 = v29;
        v17 = *((_QWORD *)&v27 + 1);
        v16 = v28;
        v32 = *((_QWORD *)&v29 + 1);
        swift_retain();
        sub_1BA7547AC();
        sub_1BA6E8A78(v17, v16, v15, v19, v14, v22, *((uint64_t *)&v22 + 1), v23, v20, v21, v13);
        sub_1BAC6919C((uint64_t)v26);
        if (v3)
          return swift_bridgeObjectRelease();
      }
      if (++v4 == v24)
        return swift_bridgeObjectRelease();
    }
    sub_1BAC690CC((uint64_t)v26);
    swift_bridgeObjectRetain();
    v12 = v10 + 64;
    while (1)
    {
      v32 = *(_QWORD *)(v12 - 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_1BA7547AC();
      if (v3)
        break;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      v12 += 40;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_1BAC6919C((uint64_t)v26);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BB57215C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return result;
  v8 = result;
  swift_bridgeObjectRetain();
  v9 = (unint64_t *)(a3 + 48);
  v32 = a2;
  v31 = v8;
  while (1)
  {
    v11 = *v9;
    if (*v9 >> 62 != 1)
      goto LABEL_7;
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    if (v13 >> 62)
      break;
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    v10 = v13;
LABEL_4:
    sub_1BA67D3F4(v10);
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRetain();
    sub_1BB57215C(v8, a2, v12);
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_52;
    sub_1BA6EEDB4(v13);
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v11);
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v11);
LABEL_7:
    v9 += 3;
    if (!--v5)
      return swift_bridgeObjectRelease();
  }
  if (v13 >> 62 != 1)
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    if (v13 == 0x8000000000000000)
      v10 = 0x8000000000000000;
    else
      v10 = 0x8000000000000008;
    goto LABEL_4;
  }
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (!(v14 >> 62))
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    v21 = v14;
LABEL_26:
    sub_1BA67D3F4(v21);
    swift_bridgeObjectRetain();
LABEL_41:
    swift_bridgeObjectRetain();
    sub_1BB57215C(v31, v32, v15);
    if (v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v14);
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v13);
    a2 = v32;
    v8 = v31;
    goto LABEL_5;
  }
  if (v14 >> 62 != 1)
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    if (v14 == 0x8000000000000000)
      v21 = 0x8000000000000000;
    else
      v21 = 0x8000000000000008;
    goto LABEL_26;
  }
  v29 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v14 + 16);
  v17 = *(_QWORD *)(v14 + 24);
  v30 = v16;
  v18 = v16 >> 62;
  if (!(_DWORD)v18)
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    sub_1BA67D3F4(v29);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v29);
    sub_1BA67D3F4(v30);
    swift_bridgeObjectRetain();
LABEL_39:
    swift_bridgeObjectRetain();
    sub_1BB57215C(v31, v32, v17);
    if (v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v30);
    swift_bridgeObjectRelease();
    v14 = v29;
    sub_1BA6EEDB4(v29);
    goto LABEL_41;
  }
  if ((_DWORD)v18 != 1)
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    sub_1BA67D3F4(v29);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v29);
    if (v30 == 0x8000000000000000)
      v22 = 0x8000000000000000;
    else
      v22 = 0x8000000000000008;
    sub_1BA67D3F4(v22);
    swift_bridgeObjectRetain();
    goto LABEL_39;
  }
  v19 = *(_QWORD *)(v30 + 16);
  v26 = *(_QWORD *)(v30 + 24);
  v27 = v19;
  v28 = v17;
  if (!(v19 >> 62))
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    sub_1BA67D3F4(v29);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v29);
    sub_1BA67D3F4(v30);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v30);
    v23 = v27;
    goto LABEL_36;
  }
  if (v19 >> 62 != 1)
  {
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v11);
    sub_1BA67D3F4(v13);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v13);
    sub_1BA67D3F4(v29);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v29);
    sub_1BA67D3F4(v30);
    swift_bridgeObjectRetain();
    sub_1BA67D3F4(v30);
    if (v27 == 0x8000000000000000)
      v23 = 0x8000000000000000;
    else
      v23 = 0x8000000000000008;
LABEL_36:
    sub_1BA67D3F4(v23);
    v20 = v26;
    swift_bridgeObjectRetain();
LABEL_37:
    swift_bridgeObjectRetain();
    sub_1BB57215C(v31, v32, v20);
    if (v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v27);
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v30);
    v17 = v28;
    goto LABEL_39;
  }
  v24 = *(_QWORD *)(v19 + 16);
  v25 = *(_QWORD *)(v19 + 24);
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v11);
  sub_1BA67D3F4(v11);
  sub_1BA67D3F4(v13);
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v13);
  sub_1BA67D3F4(v29);
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v29);
  sub_1BA67D3F4(v30);
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v30);
  sub_1BA67D3F4(v27);
  v20 = v26;
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v27);
  sub_1BA67D3F4(v24);
  swift_bridgeObjectRetain();
  sub_1BB5742EC(v31, v32, v24, v25);
  if (!v4)
  {
    sub_1BA6EEDB4(v24);
    swift_bridgeObjectRelease();
    sub_1BA6EEDB4(v27);
    goto LABEL_37;
  }
  sub_1BA6EEDB4(v24);
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(v27);
LABEL_49:
  sub_1BA6EEDB4(v27);
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(v30);
LABEL_50:
  sub_1BA6EEDB4(v30);
  swift_bridgeObjectRelease();
  v14 = v29;
  sub_1BA6EEDB4(v29);
LABEL_51:
  sub_1BA6EEDB4(v14);
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(v13);
LABEL_52:
  sub_1BA6EEDB4(v13);
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(v11);
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(v11);
  return swift_bridgeObjectRelease();
}

void sub_1BB572830(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  int EnumCaseMultiPayload;
  int v26;
  unint64_t v27;
  _QWORD v28[6];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v30 = a1;
  v5 = type metadata accessor for FormatItemNodeAction();
  v33 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v29 = (uint64_t)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA7754CC(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormatItemNodeStyle.Selector(0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    v32 = v5;
    v15 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v31 = *(_QWORD *)(v11 + 72);
    v28[5] = a3;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1BA4C2DD8(v15, (uint64_t)v13, type metadata accessor for FormatItemNodeStyle.Selector);
      if ((v13[80] & 0xFE) != 0x7E && (*((_QWORD *)v13 + 2) & 0xF000000000000007) != 0xF000000000000007)
      {
        v41 = *((_QWORD *)v13 + 2);
        v17 = a2[3];
        v37 = a2[2];
        v38 = v17;
        v39 = a2[4];
        v40 = *((_QWORD *)a2 + 10);
        v18 = a2[1];
        v35 = *a2;
        v36 = v18;
        v19 = v34;
        sub_1BA7547AC();
        if (v19)
          goto LABEL_31;
        v34 = 0;
      }
      if (!v13[144]
        && (*((_QWORD *)v13 + 17) & 0xF000000000000007) != 0xD000000000000007
        && (*((_QWORD *)v13 + 11) & 0xF000000000000007) != 0xF000000000000007)
      {
        v41 = *((_QWORD *)v13 + 11);
        v21 = a2[3];
        v37 = a2[2];
        v38 = v21;
        v39 = a2[4];
        v40 = *((_QWORD *)a2 + 10);
        v22 = a2[1];
        v35 = *a2;
        v36 = v22;
        v23 = v34;
        sub_1BA7547AC();
        if (v23)
        {
LABEL_31:
          sub_1BA4A2E80((uint64_t)v13, type metadata accessor for FormatItemNodeStyle.Selector);
          swift_bridgeObjectRelease();
          return;
        }
        v34 = 0;
      }
      sub_1BA4C2DD8((uint64_t)&v13[*(int *)(v10 + 28)], (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BA7754CC);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v9, 1, v32) == 1)
      {
        v24 = (uint64_t (*)(_QWORD))sub_1BA7754CC;
      }
      else
      {
        sub_1BA4C2DD8((uint64_t)v9, v29, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeAction);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if ((EnumCaseMultiPayload - 2) >= 6)
        {
          if (!EnumCaseMultiPayload)
          {
            if (*(_BYTE *)(v29 + 25))
              v26 = 4;
            else
              v26 = 0;
            __asm { BR              X9 }
          }
          sub_1BA4A2E80(v29, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeAction);
          v24 = (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeAction;
        }
        else
        {
          v24 = (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeAction;
        }
      }
      sub_1BA4A2E80((uint64_t)v9, v24);
      v27 = *(_QWORD *)&v13[*(int *)(v10 + 40)];
      if (v27 <= 2)
        sub_1BA7644C0(v27);
      sub_1BA4A2E80((uint64_t)v13, type metadata accessor for FormatItemNodeStyle.Selector);
      v15 += v31;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t FormatPackageInventory.styles.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__styles, a1);
}

uint64_t FormatPackageInventory.groups.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__groups);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t FormatPackageInventory.options.getter()
{
  return sub_1BA4DE208();
}

uint64_t FormatPackageInventory.decorations.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__decorations);
  swift_beginAccess();
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t FormatPackageInventory.localizations.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations, a1);
}

uint64_t FormatPackageInventory.types.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types, a1);
}

uint64_t sub_1BB573CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = sub_1BA7D710C(a1, a2, a3);
  if (!v4)
    __asm { BR              X10 }
  return result;
}

void sub_1BB573D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_BYTE *)(v2 + 40);
  v5 = *(_BYTE *)(v2 + 41);
  *(_OWORD *)(v1 - 80) = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 64) = v3;
  *(_BYTE *)(v1 - 56) = v4;
  *(_BYTE *)(v1 - 55) = v5;
  sub_1BA75DD88();
  JUMPOUT(0x1BB573CF8);
}

void sub_1BB573D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BB573CC8(v1, v0, v4, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  JUMPOUT(0x1BB573CF8);
}

void sub_1BB573DEC()
{
  swift_release();
  JUMPOUT(0x1BB573CF8);
}

void sub_1BB573DF8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;

  sub_1BA64655C(a1, a2, a3, (void (*)(uint64_t, __int128 *))sub_1BA645F4C);
  if (!v3)
    sub_1BA645F4C();
}

uint64_t sub_1BB573E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[5];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  sub_1BA4AD288(0, &qword_1EF2B0E50, (uint64_t)&type metadata for FormatSourceItemTipTrait, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB577DF4();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    v8 = *((_QWORD *)&v16 + 1);
    v9 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    v10 = *(_OWORD *)(a2 + 48);
    v13[2] = *(_OWORD *)(a2 + 32);
    v13[3] = v10;
    v13[4] = *(_OWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 80);
    v11 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v11;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v9 + 8))(a1, v13, v8, v9);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    if (v4)
      return result;
  }
  else
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    sub_1BA4A2E80((uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1BB577E48);
  }
  swift_bridgeObjectRetain();
  sub_1BB5644A0(a1, a2, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB573FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BABC2B1C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB573FC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB56891C);
}

uint64_t sub_1BB573FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BABC2B1C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB573FE4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB568940);
}

uint64_t sub_1BB574008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BABC2B1C(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BB574008, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BB569560);
}

uint64_t sub_1BB57402C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = v4;
  if ((a3 & 0x8000000000000000) == 0)
    goto LABEL_3;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BB57402C(a1, a2, v9, v10);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v5)
  {
LABEL_3:
    swift_bridgeObjectRetain();
    sub_1BB5696FC(a1, a2, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BB5740F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _OWORD *), void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  _OWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  v16 = a3;
  v11 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v11;
  v14[4] = *(_OWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v12;
  result = a5(a1, v14);
  if (!v6)
  {
    swift_bridgeObjectRetain();
    a6(a1, a2, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BB57419C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1BA645F4C();
  if (!v4)
  {
    v6 = *(_QWORD *)(a4 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain_n();
      v7 = a4 + 48;
      do
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        sub_1BA645F4C();
        swift_bridgeObjectRelease();
        swift_release_n();
        v7 += 24;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease_n();
    }
  }
}

unint64_t sub_1BB5742EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;

  if (a3 >> 62 != 1)
    goto LABEL_3;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  sub_1BA67D3F4(a3);
  sub_1BA67D3F4(v9);
  swift_bridgeObjectRetain();
  sub_1BB5742EC(a1, a2, v9, v10);
  sub_1BA6EEDB4(v9);
  swift_bridgeObjectRelease();
  result = sub_1BA6EEDB4(a3);
  if (!v4)
  {
LABEL_3:
    swift_bridgeObjectRetain();
    sub_1BB57215C(a1, a2, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FormatPackageInventory.supplementaries.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__supplementaries, a1);
}

void sub_1BB5743C8()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB57441C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;

  sub_1BB872AFC(a1);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v1);
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t FormatPackageInventory.direction.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__direction);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t FormatPackageInventory.selectors.getter()
{
  return sub_1BA4DE208();
}

uint64_t FormatPackageInventory.items.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__items, a1);
}

uint64_t FormatPackageInventory.snippets.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__snippets, a1);
}

void (*FormatPackageInventory.__allocating_init(identifier:version:role:direction:name:comment:groups:items:snippets:styles:slots:supplementaries:types:decorations:options:selectors:localizations:compilerOptions:columnSystem:references:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23))(uint64_t, uint64_t)
{
  return sub_1BB5765C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_1BB5745AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];
  __int128 v63;
  uint64_t v64[4];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70[3];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  char v77[17];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for FormatCompilerOptions(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BB86EB84();
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v13 = v2[2];
    v57 = v12;
    v58 = v13;
    v61 = v2[3];
    (*(void (**)(char *, uint64_t, double))(v9 + 16))(v12, (uint64_t)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_version, v10);
    v77[0] = *((_BYTE *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_role);
    v54 = v7;
    v14 = (char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__direction;
    swift_beginAccess();
    v76 = *v14;
    v15 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name);
    swift_beginAccess();
    v56 = *v15;
    v60 = v15[1];
    v16 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment);
    swift_beginAccess();
    v55 = *v16;
    v59 = v16[1];
    v17 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__groups);
    swift_beginAccess();
    v19 = *v17;
    v18 = v17[1];
    v51 = v17[2];
    *(_QWORD *)&v74 = v19;
    *((_QWORD *)&v74 + 1) = v18;
    v75 = v51;
    v53 = v4;
    v20 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__items);
    swift_beginAccess();
    v21 = v20[1];
    *(_QWORD *)&v73 = *v20;
    *((_QWORD *)&v73 + 1) = v21;
    v22 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__snippets);
    swift_beginAccess();
    v52 = a1;
    v23 = v22[1];
    *(_QWORD *)&v72 = *v22;
    *((_QWORD *)&v72 + 1) = v23;
    v24 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__styles);
    swift_beginAccess();
    v25 = *v24;
    v26 = v24[1];
    v68 = v25;
    v69 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BB53D32C(v52, &v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v70[0] = v71;
    v27 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__slots);
    swift_beginAccess();
    v28 = v27[1];
    v51 = *v27;
    v52 = v28;
    *(_QWORD *)&v67 = v51;
    *((_QWORD *)&v67 + 1) = v28;
    v29 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__supplementaries);
    swift_beginAccess();
    v30 = v29[1];
    v49 = *v29;
    v50 = v30;
    *(_QWORD *)&v66 = v49;
    *((_QWORD *)&v66 + 1) = v30;
    v31 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types);
    swift_beginAccess();
    v32 = v31[1];
    *(_QWORD *)&v65 = *v31;
    *((_QWORD *)&v65 + 1) = v32;
    v33 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__decorations);
    swift_beginAccess();
    v64[0] = *v33;
    v34 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__options);
    swift_beginAccess();
    v48 = *v34;
    v35 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__selectors);
    swift_beginAccess();
    v47 = *v35;
    v36 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations);
    swift_beginAccess();
    v38 = *v36;
    v37 = v36[1];
    *(_QWORD *)&v63 = v38;
    *((_QWORD *)&v63 + 1) = v37;
    v39 = (uint64_t)v54;
    sub_1BA4C2DD8((uint64_t)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_compilerOptions, (uint64_t)v54, type metadata accessor for FormatCompilerOptions);
    v40 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem + 8);
    v62[0] = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem);
    v41 = v62[0];
    v62[1] = v40;
    v42 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__references);
    swift_beginAccess();
    v43 = *v42;
    v53 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = v48;
    swift_bridgeObjectRetain();
    v45 = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA6BAD2C(v41, v40);
    swift_bridgeObjectRetain();
    return sub_1BA7A1040(v58, v61, (uint64_t)v57, v77, &v76, v56, v60, v55, v59, &v74, &v73, &v72, v70, &v67, &v66, &v65, v64, v44, v45,
             &v63,
             v39,
             v62,
             v43);
  }
  else
  {
    swift_retain();
  }
  return (uint64_t)v2;
}

uint64_t FormatPackageInventory.slots.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BB574B10(&OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__slots, a1);
}

uint64_t sub_1BB574B10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *a2 = v5;
  a2[1] = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t FormatPackageInventory.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_version;
  v4 = sub_1BB86EB84();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void FormatPackageInventory.role.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_role);
}

uint64_t FormatPackageInventory.direction.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__direction);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*FormatPackageInventory.direction.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.name.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BB574D10(a1, a2, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name);
}

uint64_t (*FormatPackageInventory.name.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BB574CA0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t FormatPackageInventory.comment.setter(uint64_t a1, uint64_t a2)
{
  return sub_1BB574D10(a1, a2, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment);
}

uint64_t sub_1BB574D10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPackageInventory.comment.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BB574DAC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__groups);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB574E20(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__groups);
  swift_beginAccess();
  *v5 = v2;
  v5[1] = v3;
  v5[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FormatPackageInventory.groups.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__groups;
  swift_beginAccess();
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_QWORD *)(v4 + 16) = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPackageInventory.groups.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.items.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__items);
}

uint64_t (*FormatPackageInventory.items.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.snippets.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__snippets);
}

uint64_t (*FormatPackageInventory.snippets.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.supplementaries.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__supplementaries);
}

uint64_t (*FormatPackageInventory.supplementaries.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.styles.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__styles);
}

uint64_t (*FormatPackageInventory.styles.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.slots.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__slots);
}

uint64_t (*FormatPackageInventory.slots.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.types.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types);
}

uint64_t (*FormatPackageInventory.types.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.decorations.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__decorations);
  swift_beginAccess();
  *v3 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPackageInventory.decorations.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.options.setter(uint64_t a1)
{
  return sub_1BAA5D084(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__options);
}

uint64_t (*FormatPackageInventory.options.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.selectors.setter(uint64_t a1)
{
  return sub_1BAA5D084(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__selectors);
}

uint64_t (*FormatPackageInventory.selectors.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BB5752A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *a3 = v5;
  a3[1] = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5752FC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *a1;
  v6 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v5;
  v7[1] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FormatPackageInventory.localizations.setter(_OWORD *a1)
{
  return sub_1BB575384(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations);
}

uint64_t sub_1BB575384(_OWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _OWORD *v4;

  v4 = (_OWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = *a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPackageInventory.localizations.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatPackageInventory.columnSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem + 8);
  *a1 = v2;
  a1[1] = v3;
  return sub_1BA6BAD2C(v2, v3);
}

uint64_t FormatPackageInventory.references.setter(uint64_t a1)
{
  return sub_1BAA5D084(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__references);
}

uint64_t (*FormatPackageInventory.references.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FormatPackageInventory.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FormatPackageInventory.init(from:)(a1);
  return v2;
}

uint64_t sub_1BB5754DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5774C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB575500()
{
  sub_1BA5BA454();
  return sub_1BB874710();
}

uint64_t sub_1BB575528()
{
  sub_1BA5BA454();
  return sub_1BB87471C();
}

uint64_t FormatPackageInventory.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_version;
  v2 = sub_1BB86EB84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA79DDC8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem), *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_columnSystem + 8));
  swift_bridgeObjectRelease();
  sub_1BA4A2E80(v0 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory_compilerOptions, type metadata accessor for FormatCompilerOptions);
  return v0;
}

uint64_t FormatPackageInventory.__deallocating_deinit()
{
  FormatPackageInventory.deinit();
  return swift_deallocClassInstance();
}

uint64_t FormatPackageInventory.shortDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  v2 = v1;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9FD0, (uint64_t (*)(uint64_t))sub_1BA81E0F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87A390;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  v5 = *(_QWORD *)(v1 + 24);
  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x6E6F6973726576;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  v7 = sub_1BB86EB24();
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v8;
  v9 = sub_1BA76E994(inited);
  v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name);
  swift_beginAccess();
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    v22 = v6;
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v11;
    sub_1BA76EAE0(&v21, v20);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = v9;
    sub_1BA785F30(v20, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment);
  swift_beginAccess();
  v15 = v14[1];
  if (v15)
  {
    v16 = *v14;
    v22 = v6;
    *(_QWORD *)&v21 = v16;
    *((_QWORD *)&v21 + 1) = v15;
    sub_1BA76EAE0(&v21, v20);
    swift_bridgeObjectRetain();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_1BA785F30(v20, 0x746E656D6D6F63, 0xE700000000000000, v17);
    swift_bridgeObjectRelease();
  }
  sub_1BB576F8C(0);
  a1[3] = v18;
  a1[4] = sub_1BA4A2870(&qword_1ED3AF9F0, (uint64_t (*)(uint64_t))sub_1BB576F8C, MEMORY[0x1E0DB3C80]);
  __swift_allocate_boxed_opaque_existential_0(a1);
  return sub_1BB86E314();
}

uint64_t sub_1BB575990@<X0>(uint64_t *a1@<X8>)
{
  return FormatPackageInventory.shortDescription.getter(a1);
}

uint64_t sub_1BB5759B0()
{
  sub_1BA4A2870(&qword_1ED3AFAF0, (uint64_t (*)(uint64_t))type metadata accessor for FormatPackageInventory, (uint64_t)&protocol conformance descriptor for FormatPackageInventory);
  return sub_1BB86E308();
}

uint64_t sub_1BB5759F0(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC79D98);
}

uint64_t sub_1BB5759FC(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA7909E8);
}

uint64_t sub_1BB575A08(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7A0D4);
}

uint64_t sub_1BB575A14(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA772D64);
}

uint64_t sub_1BB575A20(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7A138);
}

uint64_t sub_1BB575A2C(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA790608);
}

uint64_t sub_1BB575A38(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA7907B0);
}

uint64_t sub_1BB575A44(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA790A14);
}

uint64_t sub_1BB575A50(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA7905DC);
}

uint64_t sub_1BB575A5C(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA7905B0);
}

uint64_t sub_1BB575A68(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA7907DC);
}

uint64_t sub_1BB575A74(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA790808);
}

uint64_t sub_1BB575A80(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA790A40);
}

uint64_t sub_1BB575A8C(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B5A4);
}

uint64_t sub_1BB575A98(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B5C0);
}

uint64_t sub_1BB575AA4(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BA792A78);
}

uint64_t sub_1BB575AB0(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B5EC);
}

uint64_t sub_1BB575ABC(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B608);
}

uint64_t sub_1BB575AC8(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B624);
}

uint64_t sub_1BB575AD4(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B640);
}

uint64_t sub_1BB575AE0(uint64_t a1)
{
  return sub_1BB575AEC(a1, (uint64_t (*)(void))sub_1BAC7B66C);
}

uint64_t sub_1BB575AEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;

  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v4 + 24) >> 1)
    return a2();
  return result;
}

uint64_t sub_1BB575B64()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC79D98);
}

uint64_t sub_1BB575B70()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA7909E8);
}

uint64_t sub_1BB575B7C()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7A0D4);
}

uint64_t sub_1BB575B88()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA772D64);
}

uint64_t sub_1BB575B94()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7A138);
}

uint64_t sub_1BB575BA0()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA790608);
}

uint64_t sub_1BB575BAC()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA7907B0);
}

uint64_t sub_1BB575BB8()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA790A14);
}

uint64_t sub_1BB575BC4()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA7905DC);
}

uint64_t sub_1BB575BD0()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA7905B0);
}

uint64_t sub_1BB575BDC()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA7907DC);
}

uint64_t sub_1BB575BE8()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA790808);
}

uint64_t sub_1BB575BF4()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA790A40);
}

uint64_t sub_1BB575C00()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA790834);
}

uint64_t sub_1BB575C0C()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B5A4);
}

uint64_t sub_1BB575C18()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B5C0);
}

uint64_t sub_1BB575C24()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BA792A78);
}

uint64_t sub_1BB575C30()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B5EC);
}

uint64_t sub_1BB575C3C()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B608);
}

uint64_t sub_1BB575C48()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B624);
}

uint64_t sub_1BB575C54()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B640);
}

uint64_t sub_1BB575C60()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B66C);
}

uint64_t sub_1BB575C6C()
{
  return sub_1BB575C78((uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BAC7B688);
}

uint64_t sub_1BB575C78(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t sub_1BB575CD4(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC79D98);
}

uint64_t sub_1BB575CE0(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA7909E8);
}

uint64_t sub_1BB575CEC(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7A0D4);
}

uint64_t sub_1BB575CF8(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA772D64);
}

uint64_t sub_1BB575D04(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7A138);
}

uint64_t sub_1BB575D10(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA790608);
}

uint64_t sub_1BB575D1C(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA7907B0);
}

uint64_t sub_1BB575D28(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA790A14);
}

uint64_t sub_1BB575D34(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA7905DC);
}

uint64_t sub_1BB575D40(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA7905B0);
}

uint64_t sub_1BB575D4C(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA7907DC);
}

uint64_t sub_1BB575D58(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA790808);
}

uint64_t sub_1BB575D64(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA790A40);
}

uint64_t sub_1BB575D70(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA790834);
}

uint64_t sub_1BB575D7C(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B5A4);
}

uint64_t sub_1BB575D88(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B5C0);
}

uint64_t sub_1BB575D94(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BA792A78);
}

uint64_t sub_1BB575DA0(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B5EC);
}

uint64_t sub_1BB575DAC(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B608);
}

uint64_t sub_1BB575DB8(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B624);
}

uint64_t sub_1BB575DC4(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B640);
}

uint64_t sub_1BB575DD0(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B66C);
}

uint64_t sub_1BB575DDC(uint64_t a1)
{
  return sub_1BB575DE8(a1, (uint64_t (*)(BOOL))sub_1BAC7B688);
}

uint64_t sub_1BB575DE8(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

uint64_t sub_1BB575E14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = sub_1BB86C67C();
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, a2, v6);
}

uint64_t sub_1BB575E78(uint64_t a1, uint64_t a2)
{
  return sub_1BA790548(a1, a2, type metadata accessor for FormatCompilerOptions);
}

uint64_t sub_1BB575E84(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t sub_1BB575E9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  return sub_1BA895BCC(a2, v3 + 136 * a1 + 32);
}

uint64_t sub_1BB575EC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t sub_1BB575ED8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v4;
  *(_QWORD *)(v5 + 16) = result + 1;
  v6 = (_QWORD *)(v5 + 24 * result);
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  return result;
}

uint64_t sub_1BB575EF8(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B3748, (uint64_t (*)(void))sub_1BA89675C, (uint64_t)&type metadata for FormatLocalization);
}

uint64_t sub_1BB575F14(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B3740, (uint64_t (*)(void))sub_1BA89682C, (uint64_t)&type metadata for FormatDecoration);
}

uint64_t sub_1BB575F30(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B3790, (uint64_t (*)(void))sub_1BA896870, (uint64_t)&type metadata for FormatType);
}

uint64_t sub_1BB575F4C(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B3760, (uint64_t (*)(void))sub_1BA8968B4, (uint64_t)&type metadata for FormatSupplementary);
}

uint64_t sub_1BB575F68(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B37D0, (uint64_t (*)(void))sub_1BA896988, (uint64_t)&type metadata for FormatStyle);
}

uint64_t sub_1BB575F84(uint64_t a1, uint64_t a2)
{
  return sub_1BA790548(a1, a2, (uint64_t (*)(_QWORD))sub_1BA709CA4);
}

uint64_t sub_1BB575F90(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B3780, (uint64_t (*)(void))sub_1BA8969CC, (uint64_t)&type metadata for FormatItem);
}

uint64_t sub_1BB575FAC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = *v5;
  *(_QWORD *)(*v5 + 16) = a1 + 1;
  sub_1BA4CDF6C(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
  return sub_1BB577DA0(a2, v11+ ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
}

uint64_t sub_1BB576050(uint64_t a1, uint64_t a2)
{
  return sub_1BB575FAC(a1, a2, (unint64_t *)&qword_1ED3B37B0, (uint64_t (*)(void))sub_1BA896A68, (uint64_t)&type metadata for FormatGroup);
}

uint64_t sub_1BB57606C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v8 = sub_1BB86EB84();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v42 - v12;
  v49 = v9[9];
  if (!v49)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v49 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v49 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v49;
  v52 = a1;
  v51 = a4;
  v15 = v13 / v49;
  if (v14 >= v13 / v49)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v49;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v28 = a4 + v17;
      v50 = a4 + v17;
      v52 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v30 = -v49;
        v43 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v44 = v9;
        v45 = a4;
        v46 = a1;
        do
        {
          v49 = a3 + v30;
          v31 = v47;
          v32 = v43;
          v43(v47, v28 + v30, v8);
          v33 = a2 + v30;
          v34 = v30;
          v35 = v48;
          v32(v48, v33, v8);
          sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
          LOBYTE(v32) = sub_1BB872910();
          v36 = (void (*)(char *, uint64_t))v9[1];
          v36(v35, v8);
          v36(v31, v8);
          if ((v32 & 1) != 0)
          {
            v30 = v34;
            v37 = v49;
            if (a3 < a2 || v49 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v9 = v44;
              v38 = v45;
              v39 = v46;
            }
            else
            {
              v9 = v44;
              v38 = v45;
              v39 = v46;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v52 += v30;
          }
          else
          {
            v40 = v50;
            v50 += v34;
            v30 = v34;
            v37 = v49;
            if (a3 < v40 || v49 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack();
              v33 = a2;
              v9 = v44;
              v38 = v45;
              v39 = v46;
            }
            else
            {
              v9 = v44;
              v38 = v45;
              v39 = v46;
              if (a3 != v40)
                swift_arrayInitWithTakeBackToFront();
              v33 = a2;
            }
          }
          v28 = v50;
          if (v50 <= v38)
            break;
          a2 = v33;
          a3 = v37;
        }
        while (v33 > v39);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v49;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v46 = a4 + v16;
    v50 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v47;
        v19(v47, a2, v8);
        v22 = v48;
        v19(v48, a4, v8);
        sub_1BA4A2870((unint64_t *)&qword_1ED3B0910, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4DC8], MEMORY[0x1E0DB4DE0]);
        v23 = sub_1BB872910();
        v24 = (void (*)(char *, uint64_t))v9[1];
        v24(v22, v8);
        v24(v21, v8);
        v25 = v52;
        if ((v23 & 1) != 0)
        {
          v26 = a2 + v49;
          if (v52 < a2 || v52 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v52 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v27 = v51 + v49;
          if (v52 < v51 || v52 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v52 != v51)
              swift_arrayInitWithTakeBackToFront();
          }
          v51 = v27;
          v26 = a2;
        }
        v52 = v25 + v49;
        a4 = v51;
        if (v51 >= v46)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_60:
    sub_1BACAAB64(&v52, &v51, (uint64_t *)&v50);
    return 1;
  }
LABEL_64:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

void (*sub_1BB5765C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23))(uint64_t, uint64_t)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82[2];
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  char v103[9];
  uint64_t v104;

  v79 = a7;
  v59 = a6;
  v60 = a8;
  v80 = a5;
  v77 = a3;
  v65 = a2;
  v58 = a1;
  v67 = a23;
  v71 = a20;
  v61 = a19;
  v64 = a18;
  v63 = a17;
  v62 = a16;
  v72 = a14;
  v76 = a12;
  v81 = a9;
  v68 = a21;
  v24 = type metadata accessor for FormatCompilerOptions(0);
  MEMORY[0x1E0C80A78](v24);
  v57 = (uint64_t)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1BB86EB84();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v75) = *a4;
  LODWORD(v74) = *v80;
  v69 = *a22;
  v80 = (unsigned __int8 *)a22[1];
  v31 = v30;
  v73 = a13;
  v104 = sub_1BA974970(a13);
  v32 = sub_1BA974994(a10);
  sub_1BB38400C(v32);
  v70 = a11;
  v33 = sub_1BA9749B8(a11);
  sub_1BB38400C(v33);
  v34 = v76;
  v35 = sub_1BA9749DC(a15);
  sub_1BB38400C(v35);
  v36 = sub_1BA974B88(v34);
  sub_1BB38400C(v36);
  v37 = v27;
  v38 = v77;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v66 = v31;
  v39(v29, v77, v31);
  v103[0] = v75;
  v102 = v74;
  v40 = (uint64_t)v78;
  sub_1BA7AFE78(a10, &v100);
  if (v40)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BA79DDC8(v69, (unint64_t)v80);
    swift_bridgeObjectRelease();
    sub_1BA4A2E80(v68, type metadata accessor for FormatCompilerOptions);
    v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v42 = v66;
    v41(v38, v66);
    v41((uint64_t)v29, v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = v71;
    v44 = v72;
    v45 = v38;
    v46 = v73;
    v74 = v37;
    v75 = a15;
    v47 = v45;
    v78 = v29;
    v98 = v100;
    v99 = v101;
    sub_1BA7F7558(v70, &v97);
    v96 = v97;
    sub_1BA622218(v34, &v95);
    v94 = v95;
    sub_1BA76B178(v46, &v93);
    v92 = v93;
    sub_1BA7AE148(v44, &v91);
    v49 = v69;
    v90 = v91;
    sub_1BA551998(v75, &v89);
    v88 = v89;
    sub_1BB600640(v62, v104, &v87);
    v86 = v87;
    v85 = v63;
    sub_1BA6011BC(v43, &v84);
    v50 = v47;
    v51 = v67;
    v52 = v68;
    v53 = v64;
    v54 = v61;
    v83 = v84;
    v55 = v57;
    sub_1BA4C2DD8(v68, v57, type metadata accessor for FormatCompilerOptions);
    v82[0] = v49;
    v82[1] = (uint64_t)v80;
    type metadata accessor for FormatPackageInventory();
    swift_allocObject();
    v41 = (void (*)(uint64_t, uint64_t))sub_1BA7A1040(v58, v65, (uint64_t)v78, v103, &v102, v59, v79, v60, v81, &v98, &v96, &v94, &v92, &v90, &v88, &v86, &v85, v53, v54,
                                                   &v83,
                                                   v55,
                                                   v82,
                                                   v51);
    sub_1BA4A2E80(v52, type metadata accessor for FormatCompilerOptions);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v50, v66);
  }
  return v41;
}

void sub_1BB576F8C(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1ED3AF9F8, (uint64_t (*)(uint64_t))type metadata accessor for FormatPackageInventory, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB3C70]);
}

uint64_t sub_1BB576FA8()
{
  return sub_1BA4A2870(&qword_1ED3AFAF8, (uint64_t (*)(uint64_t))type metadata accessor for FormatPackageInventory, (uint64_t)&protocol conformance descriptor for FormatPackageInventory);
}

uint64_t sub_1BB576FD4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__direction);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1BB577024(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__direction);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1BB577070@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm_4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name, a2);
}

uint64_t sub_1BB57707C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB574CA0(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__name);
}

uint64_t sub_1BB577098@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm_4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment, a2);
}

uint64_t keypath_get_1Tm_4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5770F4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB574CA0(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__comment);
}

uint64_t sub_1BB577118@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__items, a2);
}

uint64_t sub_1BB577134(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__items);
}

uint64_t sub_1BB577150@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__snippets, a2);
}

uint64_t sub_1BB57716C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__snippets);
}

uint64_t sub_1BB577188@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__supplementaries, a2);
}

uint64_t sub_1BB5771A4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__supplementaries);
}

uint64_t sub_1BB5771C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__styles, a2);
}

uint64_t sub_1BB5771DC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__styles);
}

uint64_t sub_1BB5771F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__slots, a2);
}

uint64_t sub_1BB577214(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__slots);
}

uint64_t sub_1BB577230@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types, a2);
}

uint64_t sub_1BB57724C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types);
}

uint64_t sub_1BB577268@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__decorations);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5772BC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BAA5D014(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__decorations);
}

uint64_t sub_1BB5772D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__options, a2);
}

uint64_t sub_1BB5772E4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BAA5D014(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__options);
}

uint64_t sub_1BB577300@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__selectors, a2);
}

uint64_t sub_1BB57730C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BAA5D014(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__selectors);
}

uint64_t sub_1BB577328@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BB5752A4(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations, a2);
}

uint64_t sub_1BB577344(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5752FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations);
}

uint64_t sub_1BB577360@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__references, a2);
}

uint64_t sub_1BB57736C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BAA5D014(a1, a2, a3, a4, &OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__references);
}

uint64_t sub_1BB577388()
{
  return type metadata accessor for FormatPackageInventory();
}

uint64_t method lookup function for FormatPackageInventory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatPackageInventory.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t storeEnumTagSinglePayload for FormatPackageInventory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1BB577400 + 4 * byte_1BB927E10[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1BB577434 + 4 * byte_1BB927E0B[v4]))();
}

uint64_t sub_1BB577434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB57743C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB577444);
  return result;
}

uint64_t sub_1BB577450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB577458);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1BB57745C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB577464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatPackageInventory.CodingKeys()
{
  return &type metadata for FormatPackageInventory.CodingKeys;
}

unint64_t sub_1BB577484()
{
  unint64_t result;

  result = qword_1EF2C75E0;
  if (!qword_1EF2C75E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB928054, &type metadata for FormatPackageInventory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C75E0);
  }
  return result;
}

uint64_t sub_1BB5774C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E656D6D6F63 && a2 == 0xE700000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7370756F7267 && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7374657070696E73 && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x656D656C70707573 && a2 == 0xEF7365697261746ELL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x73656C797473 && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x73746F6C73 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7365707974 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x697461726F636564 && a2 == 0xEB00000000736E6FLL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x726F7463656C6573 && a2 == 0xE900000000000073 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x617A696C61636F6CLL && a2 == 0xED0000736E6F6974 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x79536E6D756C6F63 && a2 == 0xEC0000006D657473 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEA00000000007365 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x72656C69706D6F63 && a2 == 0xEF736E6F6974704FLL)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 19;
    else
      return 20;
  }
}

uint64_t sub_1BB577D2C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, char a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  int v7;

  if ((a5 & 1) != 0)
    v7 = 4;
  else
    v7 = 0;
  switch(v7 & 0xFFFFFFFC | (a4 >> 2) & 3)
  {
    case 0u:
      result = sub_1BA856ECC(result, a2, a3, a4, a6);
      break;
    case 3u:
      result = a6();
      break;
    case 6u:
      result = sub_1BA856F00(result, a2, a3, a4 & 0xF3, a6);
      break;
    case 7u:
      result = a7(result, a2, a3, a4 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BB577DA0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  sub_1BA4CDF6C(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

unint64_t sub_1BB577DF4()
{
  unint64_t result;

  result = qword_1EF2B0E40;
  if (!qword_1EF2B0E40)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF2B0E40);
  }
  return result;
}

void sub_1BB577E48(uint64_t a1)
{
  sub_1BA4B07F0(a1, &qword_1EF2B0E48, (uint64_t (*)(uint64_t))sub_1BB577DF4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BB577E64(uint64_t a1)
{
  return nullsub_1(a1);
}

uint64_t sub_1BB577E80(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *))
{
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  return a3(v4);
}

uint64_t sub_1BB577EB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  char v14;
  char v15;

  v13[0] = a4;
  v13[1] = a5;
  sub_1BB57DA14(0, &qword_1EF2C76A8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB57D9D0();
  sub_1BB8746C8();
  v15 = 0;
  sub_1BB87411C();
  if (!v5)
  {
    v14 = 1;
    sub_1BB87417C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1BB577FE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6567617373656DLL;
  else
    return 1701603686;
}

uint64_t sub_1BB578014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB578CD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB578038()
{
  sub_1BB57D9D0();
  return sub_1BB874710();
}

uint64_t sub_1BB578060()
{
  sub_1BB57D9D0();
  return sub_1BB87471C();
}

uint64_t sub_1BB578088@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1BB578B24(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1BB5780B4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BB577EB0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1BB5780D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v2 = v0;
    v3 = objc_msgSend((id)objc_opt_self(), sel_defaultSessionConfiguration);
    objc_msgSend(v3, sel_setRequestCachePolicy_, 4);
    objc_msgSend(v3, sel_setURLCache_, 0);
    objc_msgSend(v3, sel_setTimeoutIntervalForRequest_, 60.0);
    objc_msgSend(v3, sel_setTimeoutIntervalForResource_, 60.0);
    sub_1BB86E194();
    swift_allocObject();
    v1 = sub_1BB86E188();
    *(_QWORD *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1BB5781D8()
{
  return sub_1BB578210();
}

uint64_t sub_1BB5781F4()
{
  return sub_1BB578210();
}

uint64_t sub_1BB578210()
{
  sub_1BB578EB0();
  swift_allocObject();
  return sub_1BB86EA58();
}

uint64_t sub_1BB578270@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1BB8729E8();
  MEMORY[0x1E0C80A78](v6);
  v7 = *a1;
  v8 = a1[1];
  sub_1BB8729DC();
  v9 = sub_1BB8729B8();
  if (v10)
  {
    *a3 = v9;
    a3[1] = v10;
    a3[2] = v7;
    a3[3] = v8;
    a3[4] = a2;
    sub_1BA69D44C(v7, v8);
    return swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for DebugFormatServiceError();
    sub_1BB579094();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t sub_1BB578368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v10 = sub_1BB86C67C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = a3 < 1;
  v14 = a3 - 1;
  if (v13 || (v15 = sub_1BB578DB8(), (v15 & 1) == 0))
  {
    swift_willThrow();
    v21 = a1;
  }
  else
  {
    MEMORY[0x1E0C80A78](v15);
    *(&v23 - 4) = a2;
    *(&v23 - 3) = a4;
    v24 = a4;
    *(&v23 - 2) = a5;
    sub_1BB86EC14();
    v25 = v14;
    v16 = swift_allocObject();
    v26 = a2;
    *(_QWORD *)(v16 + 16) = a5;
    swift_bridgeObjectRetain();
    v17 = (void *)sub_1BB86E854();
    sub_1BB494714();
    sub_1BB86E974();
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v10);
    v18 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    *(_QWORD *)(v19 + ((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8)) = a5;
    swift_bridgeObjectRetain();
    v20 = (void *)sub_1BB86E854();
    type metadata accessor for DebugFormatService();
    a2 = sub_1BB86EA28();
    swift_release();
    swift_release();

  }
  return a2;
}

void sub_1BB578590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t (**v18)(uint64_t, uint64_t);
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v25 = a7;
  v23 = a3;
  v11 = sub_1BB86C67C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  swift_retain();
  sub_1BB5780D0();
  v24 = (id)sub_1BB86E17C();
  swift_release();
  v15 = (void *)sub_1BB86C58C();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v11);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = v23;
  *((_QWORD *)v17 + 3) = a4;
  *((_QWORD *)v17 + 4) = v25;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v18 = (uint64_t (**)(uint64_t, uint64_t))&v17[(v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8];
  *v18 = sub_1BA98F9D0;
  v18[1] = (uint64_t (*)(uint64_t, uint64_t))v14;
  aBlock[4] = sub_1BB578FC4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BAF35F80;
  aBlock[3] = &block_descriptor_83;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  v20 = v24;
  v21 = objc_msgSend(v24, sel_dataTaskWithURL_completionHandler_, v15, v19);
  _Block_release(v19);

  objc_msgSend(v21, sel_resume);
}

void sub_1BB578794(uint64_t a1, unint64_t a2, void *a3, id a4, void (*a5)(id), int a6, int a7, int a8, void (*a9)(uint64_t, unint64_t), uint64_t a10)
{
  id v12;
  void *v14;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a4)
  {
    v12 = a4;
    a5(a4);

    return;
  }
  if (a2 >> 60 != 15)
  {
    if (a3 && (objc_opt_self(), (v17 = swift_dynamicCastObjCClass()) != 0))
    {
      v18 = (void *)v17;
      sub_1BA86B484(a1, a2);
      v19 = a3;
      if (objc_msgSend(v18, sel_statusCode) != (id)200)
      {
        v26 = v19;
        type metadata accessor for FormatJSONDecoder();
        swift_allocObject();
        v23 = swift_bridgeObjectRetain();
        sub_1BACC8234(v23);
        sub_1BB5790DC();
        sub_1BB86DC78();
        swift_release();
        type metadata accessor for DebugFormatServiceError();
        sub_1BB579094();
        v24 = (void *)swift_allocError();
        *(_OWORD *)v25 = v27;
        *(_QWORD *)(v25 + 16) = v28;
        *(_QWORD *)(v25 + 24) = v29;
        swift_storeEnumTagMultiPayload();
        a5(v24);
        sub_1BA69D490(a1, a2);

        return;
      }
      a9(a1, a2);

    }
    else
    {
      type metadata accessor for DebugFormatServiceError();
      sub_1BB579094();
      v20 = (void *)swift_allocError();
      *v21 = a3;
      swift_storeEnumTagMultiPayload();
      sub_1BA86B484(a1, a2);
      v22 = a3;
      a5(v20);

    }
    sub_1BA69D490(a1, a2);
    return;
  }
  type metadata accessor for DebugFormatServiceError();
  sub_1BB579094();
  v14 = (void *)swift_allocError();
  swift_storeEnumTagMultiPayload();
  a5(v14);

}

uint64_t type metadata accessor for DebugFormatService()
{
  return objc_opt_self();
}

uint64_t sub_1BB578B24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1BB57DA14(0, &qword_1EF2C7698, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v10 - v6;
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB57D9D0();
  sub_1BB87468C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    v8 = sub_1BB87402C();
    v11 = 1;
    swift_bridgeObjectRetain();
    sub_1BB874098();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1BB578CD8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701603686 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BB578DB8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  id v8;

  v0 = (void *)sub_1BB86C478();
  v1 = objc_msgSend(v0, sel_domain);
  v2 = sub_1BB8729A0();
  v4 = v3;

  if (v2 == sub_1BB8729A0() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {

      return 0;
    }
  }
  v8 = objc_msgSend(v0, sel_code);

  if ((unint64_t)v8 + 1009 < 9)
    return (0x131u >> ((_BYTE)v8 - 15)) & 1;
  return 0;
}

void sub_1BB578EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BB578590(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

void sub_1BB578EB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2ADA90)
  {
    v0 = sub_1BB86EAAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2ADA90);
  }
}

uint64_t sub_1BB578F04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB578F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BB86C67C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1BB578FC4(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(sub_1BB86C67C() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1BB578794(a1, a2, a3, a4, *(void (**)(id))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), v4 + v10, *(void (**)(uint64_t, unint64_t))v11, *(_QWORD *)(v11 + 8));
}

uint64_t type metadata accessor for DebugFormatServiceError()
{
  uint64_t result;

  result = qword_1ED39D210;
  if (!qword_1ED39D210)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BB579094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2CCCF0;
  if (!qword_1EF2CCCF0)
  {
    v1 = type metadata accessor for DebugFormatServiceError();
    result = MEMORY[0x1BCCE5B24](&unk_1BB928240, v1);
    atomic_store(result, (unint64_t *)&qword_1EF2CCCF0);
  }
  return result;
}

unint64_t sub_1BB5790DC()
{
  unint64_t result;

  result = qword_1EF2C7688;
  if (!qword_1EF2C7688)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB928218, &type metadata for DebugFormatServiceError.ServerMessage);
    atomic_store(result, (unint64_t *)&qword_1EF2C7688);
  }
  return result;
}

uint64_t sub_1BB579120()
{
  return sub_1BB578210();
}

uint64_t sub_1BB579144()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB579168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BB86C67C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5791DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_1BB86C67C() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1BB578368(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

ValueMetadata *type metadata accessor for DebugFormatServiceError.ServerMessage()
{
  return &type metadata for DebugFormatServiceError.ServerMessage;
}

char *sub_1BB57925C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  char *result;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = *a2;
        v8 = v7;
        *(_QWORD *)a1 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v16 = *a2;
        *(_QWORD *)a1 = *a2;
        v17 = v16;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v11 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v11;
        v12 = a2[2];
        v13 = a2[3];
        *((_QWORD *)a1 + 2) = v12;
        *((_QWORD *)a1 + 3) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v18 = sub_1BB86C67C();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
        sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
        v20 = *(int *)(v19 + 48);
        v21 = *(char **)((char *)a2 + v20);
        v22 = v21;
        *(_QWORD *)&a1[v20] = v21;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v14 = sub_1BB86C67C();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
        type metadata accessor for FormatFile();
        v15 = (char *)&loc_1BB5793D0 + 4 * word_1BB9280D6[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 5u:
        v23 = sub_1BB86C67C();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_1BB5795D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__dst, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v24 - 88) = v23;
  v25 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_QWORD *)(v21 + 8) = v25;
  v26 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v21 + 24) = v26;
  v27 = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v21 + 40) = v27;
  v28 = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v21 + 56) = v28;
  v29 = *(_QWORD *)(v22 + 64);
  *(_BYTE *)(v21 + 72) = *(_BYTE *)(v22 + 72);
  *(_QWORD *)(v21 + 64) = v29;
  v30 = *(_QWORD *)(v22 + 88);
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v21 + 88) = v30;
  v35 = v22 + 96;
  v31 = *(_BYTE *)(v22 + 106);
  v32 = *(unsigned __int16 *)(v22 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31 == 255)
  {
    *(_QWORD *)(v21 + 96) = *(_QWORD *)v35;
    *(_DWORD *)(v21 + 103) = *(_DWORD *)(v35 + 7);
  }
  else
  {
    v33 = v32 & 0xFF00FFFF | (v31 << 16);
    v34 = *(_QWORD *)v35;
    sub_1BA77A170(*(_QWORD *)v35, v33, SBYTE2(v33), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AD890, (uint64_t (*)(void))sub_1BA7AD89C);
    *(_QWORD *)(v21 + 96) = v34;
    *(_WORD *)(v21 + 104) = v33;
    *(_BYTE *)(v21 + 106) = BYTE2(v33);
  }
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BB579304);
}

void sub_1BB57A1AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BB86C67C();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1BB57A21C(void **a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void **, uint64_t);
  void **v16;
  uint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  void **v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v2 = *a1;
      goto LABEL_4;
    case 1u:
      v2 = *a1;
      goto LABEL_4;
    case 2u:
LABEL_5:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      return;
    case 3u:
      v3 = sub_1BB86C67C();
      (*(void (**)(void **, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
      v2 = *(void **)((char *)a1 + *(int *)(v4 + 48));
LABEL_4:

      break;
    case 4u:
      v5 = sub_1BB86C67C();
      (*(void (**)(void **, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
      v7 = (char *)a1 + *(int *)(v6 + 48);
      type metadata accessor for FormatFile();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_bridgeObjectRelease();
          v8 = type metadata accessor for FormatContent(0);
          v9 = &v7[*(int *)(v8 + 20)];
          v10 = sub_1BB86C8B0();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v11 = &v7[*(int *)(v8 + 40)];
          v12 = sub_1BB871E24();
          v13 = *(_QWORD *)(v12 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
            (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
          goto LABEL_40;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v7[106] != 255)
          {
            v17 = *((unsigned __int16 *)v7 + 52) | (v7[106] << 16);
            sub_1BA77A170(*((_QWORD *)v7 + 12), v17, SBYTE2(v17), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
          }
          return;
        case 2u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v7 + 9) >= 3uLL)
            swift_bridgeObjectRelease();
          goto LABEL_40;
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v7 + 7) >= 0xFuLL)
            swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 5u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v7 + 21) >= 3uLL)
            swift_bridgeObjectRelease();
          v18 = (int *)type metadata accessor for FormatPackage();
          v19 = &v7[v18[23]];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20 = type metadata accessor for FormatCompilerOptions(0);
          v21 = &v19[*(int *)(v20 + 24)];
          if (*((_QWORD *)v21 + 1) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v22 = &v21[*(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20)];
          v23 = sub_1BB86E710();
          v24 = *(_QWORD *)(v23 - 8);
          v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
          if (!v25(v22, 1, v23))
            (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
          v26 = &v19[*(int *)(v20 + 28)];
          if (!v25(v26, 1, v23))
            (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
          swift_bridgeObjectRelease();
          v27 = &v7[v18[24]];
          v28 = sub_1BB86EB84();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
          v29 = (void **)&v7[v18[25]];
          if (v25((char *)v29, 1, v23))
            return;
          v15 = *(void (**)(void **, uint64_t))(v24 + 8);
          v16 = v29;
          v14 = v23;
          goto LABEL_14;
        case 6u:
          goto LABEL_5;
        case 7u:
          swift_release();
          return;
        case 8u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 9u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        case 0xAu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BA6C0C20(*((_QWORD *)v7 + 4), *((_QWORD *)v7 + 5), *((_QWORD *)v7 + 6), *((_QWORD *)v7 + 7), *((_QWORD *)v7 + 8), *((_QWORD *)v7 + 9), v7[80]);
          return;
        case 0xBu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = &v7[*(int *)(type metadata accessor for FormatBindingContent() + 28)];
          swift_bridgeObjectRelease();
          v31 = type metadata accessor for FormatContent(0);
          v32 = &v30[*(int *)(v31 + 20)];
          v33 = sub_1BB86C8B0();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = &v30[*(int *)(v31 + 40)];
          v35 = sub_1BB871E24();
          v36 = *(_QWORD *)(v35 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
            (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        default:
          return;
      }
    case 5u:
      v14 = sub_1BB86C67C();
      v15 = *(void (**)(void **, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v16 = a1;
LABEL_14:
      v15(v16, v14);
      break;
    default:
      return;
  }
}

void **sub_1BB57A9E8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void **result;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = *a2;
      v7 = v6;
      *a1 = v6;
      goto LABEL_9;
    case 1u:
      v13 = *a2;
      *a1 = *a2;
      v14 = v13;
      goto LABEL_9;
    case 2u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[2];
      v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      v15 = sub_1BB86C67C();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
      v17 = *(int *)(v16 + 48);
      v18 = *(void **)((char *)a2 + v17);
      v19 = v18;
      *(void **)((char *)a1 + v17) = v18;
      goto LABEL_9;
    case 4u:
      v11 = sub_1BB86C67C();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
      type metadata accessor for FormatFile();
      v12 = (char *)&loc_1BB57AB08 + 4 * word_1BB928112[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
      return result;
    case 5u:
      v20 = sub_1BB86C67C();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **sub_1BB57B908(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void **result;

  if (a1 != a2)
  {
    sub_1BB57CA3C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = *a2;
        v7 = v6;
        *a1 = v6;
        goto LABEL_10;
      case 1u:
        v10 = *a2;
        *a1 = *a2;
        v11 = v10;
        goto LABEL_10;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3u:
        v12 = sub_1BB86C67C();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
        v14 = *(int *)(v13 + 48);
        v15 = *(void **)((char *)a2 + v14);
        v16 = v15;
        *(void **)((char *)a1 + v14) = v15;
        goto LABEL_10;
      case 4u:
        v8 = sub_1BB86C67C();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
        type metadata accessor for FormatFile();
        v9 = (char *)&loc_1BB57BA48 + 4 * word_1BB928130[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
        return result;
      case 5u:
        v17 = sub_1BB86C67C();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1BB57CA3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DebugFormatServiceError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1BB57CA78(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int *v72;
  int *v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 5:
      v9 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_29;
    case 4:
      v10 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
      v12 = *(int *)(v11 + 48);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for FormatFile();
      v16 = swift_getEnumCaseMultiPayload();
      if (v16 == 11)
      {
        v28 = *((_OWORD *)v14 + 1);
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *((_OWORD *)v13 + 1) = v28;
        *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
        v29 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
        v30 = &v13[v29];
        v31 = &v14[v29];
        *(_OWORD *)&v13[v29] = *(_OWORD *)&v14[v29];
        v32 = (int *)type metadata accessor for FormatContent(0);
        v33 = v32[5];
        v34 = &v30[v33];
        v35 = &v31[v33];
        v36 = sub_1BB86C8B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
        *(_OWORD *)&v30[v32[6]] = *(_OWORD *)&v31[v32[6]];
        *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
        *(_OWORD *)&v30[v32[8]] = *(_OWORD *)&v31[v32[8]];
        *(_OWORD *)&v30[v32[9]] = *(_OWORD *)&v31[v32[9]];
        v37 = v32[10];
        v38 = &v30[v37];
        v39 = &v31[v37];
        v40 = sub_1BB871E24();
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        *(_QWORD *)&v30[v32[11]] = *(_QWORD *)&v31[v32[11]];
        *(_QWORD *)&v30[v32[12]] = *(_QWORD *)&v31[v32[12]];
        *(_QWORD *)&v30[v32[13]] = *(_QWORD *)&v31[v32[13]];
        *(_QWORD *)&v30[v32[14]] = *(_QWORD *)&v31[v32[14]];
        *(_QWORD *)&v30[v32[15]] = *(_QWORD *)&v31[v32[15]];
        *(_QWORD *)&v30[v32[16]] = *(_QWORD *)&v31[v32[16]];
        *(_QWORD *)&v30[v32[17]] = *(_QWORD *)&v31[v32[17]];
      }
      else if (v16 == 5)
      {
        v43 = *((_OWORD *)v14 + 1);
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *((_OWORD *)v13 + 1) = v43;
        *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
        *((_WORD *)v13 + 24) = *((_WORD *)v14 + 24);
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
        *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
        *(_OWORD *)(v13 + 104) = *(_OWORD *)(v14 + 104);
        *(_OWORD *)(v13 + 120) = *(_OWORD *)(v14 + 120);
        *(_OWORD *)(v13 + 136) = *(_OWORD *)(v14 + 136);
        *((_QWORD *)v13 + 19) = *((_QWORD *)v14 + 19);
        *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
        v73 = (int *)type metadata accessor for FormatPackage();
        v44 = v73[23];
        v45 = &v13[v44];
        v46 = &v14[v44];
        *(_OWORD *)&v13[v44] = *(_OWORD *)&v14[v44];
        v72 = (int *)type metadata accessor for FormatCompilerOptions(0);
        v47 = v72[6];
        v48 = &v45[v47];
        v49 = &v46[v47];
        v50 = *(_OWORD *)&v46[v47 + 16];
        *(_OWORD *)v48 = *(_OWORD *)&v46[v47];
        *((_OWORD *)v48 + 1) = v50;
        *((_OWORD *)v48 + 2) = *(_OWORD *)&v46[v47 + 32];
        v51 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
        v52 = &v48[v51];
        v53 = &v49[v51];
        v54 = sub_1BB86E710();
        v55 = *(_QWORD *)(v54 - 8);
        v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        if (v74(v53, 1, v54))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        v57 = v72[7];
        v58 = &v45[v57];
        v59 = &v46[v57];
        if (v74(&v46[v57], 1, v54))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          v61 = v55;
        }
        else
        {
          v62 = v59;
          v61 = v55;
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v58, v62, v54);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v54);
        }
        *(_QWORD *)&v45[v72[8]] = *(_QWORD *)&v46[v72[8]];
        v63 = v73[24];
        v64 = &v13[v63];
        v65 = &v14[v63];
        v66 = sub_1BB86EB84();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
        v67 = v73[25];
        v68 = &v13[v67];
        v69 = &v14[v67];
        if (v74(v69, 1, v54))
        {
          sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v68, v69, v54);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v68, 0, 1, v54);
        }
      }
      else
      {
        if (v16)
        {
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
          goto LABEL_29;
        }
        *(_OWORD *)v13 = *(_OWORD *)v14;
        v17 = (int *)type metadata accessor for FormatContent(0);
        v18 = v17[5];
        v19 = &v13[v18];
        v20 = &v14[v18];
        v21 = sub_1BB86C8B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
        *(_OWORD *)&v13[v17[6]] = *(_OWORD *)&v14[v17[6]];
        *(_OWORD *)&v13[v17[7]] = *(_OWORD *)&v14[v17[7]];
        *(_OWORD *)&v13[v17[8]] = *(_OWORD *)&v14[v17[8]];
        *(_OWORD *)&v13[v17[9]] = *(_OWORD *)&v14[v17[9]];
        v22 = v17[10];
        v23 = &v13[v22];
        v24 = &v14[v22];
        v25 = sub_1BB871E24();
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        *(_QWORD *)&v13[v17[11]] = *(_QWORD *)&v14[v17[11]];
        *(_QWORD *)&v13[v17[12]] = *(_QWORD *)&v14[v17[12]];
        *(_QWORD *)&v13[v17[13]] = *(_QWORD *)&v14[v17[13]];
        *(_QWORD *)&v13[v17[14]] = *(_QWORD *)&v14[v17[14]];
        *(_QWORD *)&v13[v17[15]] = *(_QWORD *)&v14[v17[15]];
        *(_QWORD *)&v13[v17[16]] = *(_QWORD *)&v14[v17[16]];
        *(_QWORD *)&v13[v17[17]] = *(_QWORD *)&v14[v17[17]];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_29;
    case 3:
      v7 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
      *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
LABEL_29:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_1BB57D1B4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int *v72;
  int *v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_1BB57CA3C((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        v9 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        goto LABEL_30;
      case 4:
        v10 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        sub_1BB57A1AC(0, &qword_1EF2C7690, (void (*)(uint64_t))type metadata accessor for FormatFile);
        v12 = *(int *)(v11 + 48);
        v13 = &a1[v12];
        v14 = &a2[v12];
        v15 = type metadata accessor for FormatFile();
        v16 = swift_getEnumCaseMultiPayload();
        if (v16 == 11)
        {
          v28 = *((_OWORD *)v14 + 1);
          *(_OWORD *)v13 = *(_OWORD *)v14;
          *((_OWORD *)v13 + 1) = v28;
          *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
          v29 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
          v30 = &v13[v29];
          v31 = &v14[v29];
          *(_OWORD *)&v13[v29] = *(_OWORD *)&v14[v29];
          v32 = (int *)type metadata accessor for FormatContent(0);
          v33 = v32[5];
          v34 = &v30[v33];
          v35 = &v31[v33];
          v36 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
          *(_OWORD *)&v30[v32[6]] = *(_OWORD *)&v31[v32[6]];
          *(_OWORD *)&v30[v32[7]] = *(_OWORD *)&v31[v32[7]];
          *(_OWORD *)&v30[v32[8]] = *(_OWORD *)&v31[v32[8]];
          *(_OWORD *)&v30[v32[9]] = *(_OWORD *)&v31[v32[9]];
          v37 = v32[10];
          v38 = &v30[v37];
          v39 = &v31[v37];
          v40 = sub_1BB871E24();
          v41 = *(_QWORD *)(v40 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
            sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          *(_QWORD *)&v30[v32[11]] = *(_QWORD *)&v31[v32[11]];
          *(_QWORD *)&v30[v32[12]] = *(_QWORD *)&v31[v32[12]];
          *(_QWORD *)&v30[v32[13]] = *(_QWORD *)&v31[v32[13]];
          *(_QWORD *)&v30[v32[14]] = *(_QWORD *)&v31[v32[14]];
          *(_QWORD *)&v30[v32[15]] = *(_QWORD *)&v31[v32[15]];
          *(_QWORD *)&v30[v32[16]] = *(_QWORD *)&v31[v32[16]];
          *(_QWORD *)&v30[v32[17]] = *(_QWORD *)&v31[v32[17]];
        }
        else if (v16 == 5)
        {
          v43 = *((_OWORD *)v14 + 1);
          *(_OWORD *)v13 = *(_OWORD *)v14;
          *((_OWORD *)v13 + 1) = v43;
          *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
          *((_WORD *)v13 + 24) = *((_WORD *)v14 + 24);
          *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
          *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
          *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
          *(_OWORD *)(v13 + 104) = *(_OWORD *)(v14 + 104);
          *(_OWORD *)(v13 + 120) = *(_OWORD *)(v14 + 120);
          *(_OWORD *)(v13 + 136) = *(_OWORD *)(v14 + 136);
          *((_QWORD *)v13 + 19) = *((_QWORD *)v14 + 19);
          *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
          v73 = (int *)type metadata accessor for FormatPackage();
          v44 = v73[23];
          v45 = &v13[v44];
          v46 = &v14[v44];
          *(_OWORD *)&v13[v44] = *(_OWORD *)&v14[v44];
          v72 = (int *)type metadata accessor for FormatCompilerOptions(0);
          v47 = v72[6];
          v48 = &v45[v47];
          v49 = &v46[v47];
          v50 = *(_OWORD *)&v46[v47 + 16];
          *(_OWORD *)v48 = *(_OWORD *)&v46[v47];
          *((_OWORD *)v48 + 1) = v50;
          *((_OWORD *)v48 + 2) = *(_OWORD *)&v46[v47 + 32];
          v51 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
          v52 = &v48[v51];
          v53 = &v49[v51];
          v54 = sub_1BB86E710();
          v55 = *(_QWORD *)(v54 - 8);
          v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
          if (v74(v53, 1, v54))
          {
            sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
          }
          v57 = v72[7];
          v58 = &v45[v57];
          v59 = &v46[v57];
          if (v74(&v46[v57], 1, v54))
          {
            sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
            memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
            v61 = v55;
          }
          else
          {
            v62 = v59;
            v61 = v55;
            (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v58, v62, v54);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v54);
          }
          *(_QWORD *)&v45[v72[8]] = *(_QWORD *)&v46[v72[8]];
          v63 = v73[24];
          v64 = &v13[v63];
          v65 = &v14[v63];
          v66 = sub_1BB86EB84();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
          v67 = v73[25];
          v68 = &v13[v67];
          v69 = &v14[v67];
          if (v74(v69, 1, v54))
          {
            sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
            memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v68, v69, v54);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v68, 0, 1, v54);
          }
        }
        else
        {
          if (v16)
          {
            memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
            goto LABEL_30;
          }
          *(_OWORD *)v13 = *(_OWORD *)v14;
          v17 = (int *)type metadata accessor for FormatContent(0);
          v18 = v17[5];
          v19 = &v13[v18];
          v20 = &v14[v18];
          v21 = sub_1BB86C8B0();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
          *(_OWORD *)&v13[v17[6]] = *(_OWORD *)&v14[v17[6]];
          *(_OWORD *)&v13[v17[7]] = *(_OWORD *)&v14[v17[7]];
          *(_OWORD *)&v13[v17[8]] = *(_OWORD *)&v14[v17[8]];
          *(_OWORD *)&v13[v17[9]] = *(_OWORD *)&v14[v17[9]];
          v22 = v17[10];
          v23 = &v13[v22];
          v24 = &v14[v22];
          v25 = sub_1BB871E24();
          v26 = *(_QWORD *)(v25 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
          {
            sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
            memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
          }
          *(_QWORD *)&v13[v17[11]] = *(_QWORD *)&v14[v17[11]];
          *(_QWORD *)&v13[v17[12]] = *(_QWORD *)&v14[v17[12]];
          *(_QWORD *)&v13[v17[13]] = *(_QWORD *)&v14[v17[13]];
          *(_QWORD *)&v13[v17[14]] = *(_QWORD *)&v14[v17[14]];
          *(_QWORD *)&v13[v17[15]] = *(_QWORD *)&v14[v17[15]];
          *(_QWORD *)&v13[v17[16]] = *(_QWORD *)&v14[v17[16]];
          *(_QWORD *)&v13[v17[17]] = *(_QWORD *)&v14[v17[17]];
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_30;
      case 3:
        v7 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        sub_1BB57A1AC(0, (unint64_t *)&qword_1EF2CCD00, (void (*)(uint64_t))sub_1BA8EBDF8);
        *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
LABEL_30:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1BB57D900()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  const char *v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = "\b";
  v7 = &unk_1BB9281C0;
  v8 = &unk_1BB9281D8;
  result = sub_1BB86C67C();
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v9 = &v5;
    result = type metadata accessor for FormatFile();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v10 = &v4;
      v11 = v2;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BB57D9D0()
{
  unint64_t result;

  result = qword_1EF2C76A0;
  if (!qword_1EF2C76A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB928344, &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C76A0);
  }
  return result;
}

void sub_1BB57DA14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB57D9D0();
    v7 = a3(a1, &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for DebugFormatServiceError.ServerMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB57DABC + 4 * byte_1BB92814D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB57DAF0 + 4 * byte_1BB928148[v4]))();
}

uint64_t sub_1BB57DAF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB57DAF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB57DB00);
  return result;
}

uint64_t sub_1BB57DB0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB57DB14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB57DB18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB57DB20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatServiceError.ServerMessage.CodingKeys()
{
  return &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys;
}

unint64_t sub_1BB57DB40()
{
  unint64_t result;

  result = qword_1EF2C76B0;
  if (!qword_1EF2C76B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92831C, &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C76B0);
  }
  return result;
}

unint64_t sub_1BB57DB88()
{
  unint64_t result;

  result = qword_1EF2C76B8;
  if (!qword_1EF2C76B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92828C, &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C76B8);
  }
  return result;
}

unint64_t sub_1BB57DBD0()
{
  unint64_t result;

  result = qword_1EF2C76C0;
  if (!qword_1EF2C76C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9282B4, &type metadata for DebugFormatServiceError.ServerMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C76C0);
  }
  return result;
}

uint64_t sub_1BB57DC18()
{
  _QWORD *v0;

  return byte_1BB928756[(*v0 >> 58) & 0x3CLL | (*v0 >> 1) & 3];
}

uint64_t sub_1BB57DC38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB57DC64 + 4 * byte_1BB928394[a1]))(2020557416, 0xE400000000000000);
}

uint64_t sub_1BB57DC64(uint64_t a1)
{
  return a1 + 14;
}

uint64_t sub_1BB57DC6C()
{
  return 0x79616C7265764F68;
}

uint64_t sub_1BB57DC84()
{
  return 0x79616C7265764F76;
}

uint64_t sub_1BB57DCA0()
{
  return 2003134838;
}

uint64_t sub_1BB57DCAC()
{
  return 1954047348;
}

uint64_t sub_1BB57DCB8()
{
  return 1835365481;
}

uint64_t sub_1BB57DCC4()
{
  return 0x6567616D69;
}

uint64_t sub_1BB57DCD8()
{
  return 0x6563617073;
}

uint64_t sub_1BB57DCEC()
{
  return 0x74657070696E73;
}

uint64_t sub_1BB57DD04()
{
  return 0x656D656C70707573;
}

uint64_t sub_1BB57DD28()
{
  return 0x686374697773;
}

uint64_t sub_1BB57DD3C()
{
  return 1953459315;
}

uint64_t sub_1BB57DD48()
{
  return 0x6269737365636361;
}

uint64_t sub_1BB57DD6C()
{
  return 0x6E6F74747562;
}

uint64_t sub_1BB57DD80()
{
  return 0x70756F7267;
}

uint64_t sub_1BB57DD94()
{
  return 0x6465626D45626577;
}

uint64_t sub_1BB57DDAC()
{
  return 0x656D617266;
}

uint64_t sub_1BB57DDC0()
{
  return 0x746165706572;
}

uint64_t sub_1BB57DDD4()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1BB57DDEC()
{
  return 0x6569566574617473;
}

uint64_t sub_1BB57DE0C()
{
  return 0x6D6F74737563;
}

uint64_t sub_1BB57DE20()
{
  return 0x746E697270;
}

uint64_t sub_1BB57DE34()
{
  return 0x63697274654D6461;
}

uint64_t sub_1BB57DE50()
{
  return 1633905005;
}

uint64_t sub_1BB57DE5C()
{
  return 0x4D6465726579616CLL;
}

uint64_t sub_1BB57DE7C()
{
  return 0x6F65646976;
}

uint64_t sub_1BB57DE90()
{
  return 0x766F436575737369;
}

uint64_t sub_1BB57DEAC()
{
  return 0x6572616873;
}

uint64_t sub_1BB57DEC0()
{
  return 0x6B636F6C62;
}

uint64_t sub_1BB57DED4()
{
  return 0x797274656D6F6567;
}

uint64_t sub_1BB57DEEC()
{
  return 0x616C506F65646976;
}

uint64_t sub_1BB57DF0C()
{
  return 0x73736572676F7270;
}

uint64_t sub_1BB57DF2C()
{
  return 0x646E69426D657469;
}

uint64_t sub_1BB57DF4C()
{
  return 0x7261696C69787561;
}

uint64_t sub_1BB57DF6C()
{
  return 0x7465736572;
}

uint64_t sub_1BB57DF80()
{
  return 0x656C626169726176;
}

uint64_t sub_1BB57DF98()
{
  return 0x696F706B61657262;
}

uint64_t sub_1BB57DFB8()
{
  return 0x6D45656C7A7A7570;
}

uint64_t sub_1BB57DFD8()
{
  return 0x65726F736E6F7073;
}

uint64_t FormatNode.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BB57F380();
  v1 = v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BB57E030(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1BB57DC38(*a1);
  v5 = v4;
  if (v3 == sub_1BB57DC38(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BB57E0B8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BB57DC38(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB57E118()
{
  unsigned __int8 *v0;

  sub_1BB57DC38(*v0);
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB57E158()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BB57DC38(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB57E1B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB57F8B4();
  *a1 = result;
  return result;
}

uint64_t sub_1BB57E1E0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BB57DC38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BB57E208()
{
  sub_1BB57F904();
  return sub_1BB872D60();
}

uint64_t sub_1BB57E264()
{
  sub_1BB57F904();
  return sub_1BB872D0C();
}

uint64_t sub_1BB57E2B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatNode.init(from:)(a1, a2);
}

void sub_1BB57E2C8(_QWORD *a1)
{
  FormatNode.encode(to:)(a1);
}

uint64_t sub_1BB57E2E0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BB57F380();
  v1 = v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1BB57E314()
{
  FormatNode.bind(binder:context:)();
}

void _s8NewsFeed10FormatNodeO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BB57E370@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 >> 58) & 0x3C | (a1 >> 1) & 3)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v4 = ((uint64_t (*)(uint64_t, uint64_t))sub_1BAE6F9BC)(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v4 & 1;
}

void sub_1BB57F380()
{
  __asm { BR              X11 }
}

uint64_t sub_1BB57F3B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF9) + 0x10);
  swift_beginAccess();
  return *(_QWORD *)(v1 + 16);
}

void sub_1BB57F3F4()
{
  JUMPOUT(0x1BB57F3DCLL);
}

unint64_t sub_1BB57F408(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB57F42C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB57F42C()
{
  unint64_t result;

  result = qword_1EF2C76C8;
  if (!qword_1EF2C76C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNode, &type metadata for FormatNode);
    atomic_store(result, (unint64_t *)&qword_1EF2C76C8);
  }
  return result;
}

unint64_t sub_1BB57F470(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BB57F4A4();
  a1[2] = sub_1BB57F4E8();
  result = sub_1BB57F52C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB57F4A4()
{
  unint64_t result;

  result = qword_1ED3B3138;
  if (!qword_1ED3B3138)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNode, &type metadata for FormatNode);
    atomic_store(result, (unint64_t *)&qword_1ED3B3138);
  }
  return result;
}

unint64_t sub_1BB57F4E8()
{
  unint64_t result;

  result = qword_1ED3B3130;
  if (!qword_1ED3B3130)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNode, &type metadata for FormatNode);
    atomic_store(result, (unint64_t *)&qword_1ED3B3130);
  }
  return result;
}

unint64_t sub_1BB57F52C()
{
  unint64_t result;

  result = qword_1EF2C76D0;
  if (!qword_1EF2C76D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNode, &type metadata for FormatNode);
    atomic_store(result, (unint64_t *)&qword_1EF2C76D0);
  }
  return result;
}

unint64_t sub_1BB57F570(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB57F594();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB57F594()
{
  unint64_t result;

  result = qword_1EF2C76D8;
  if (!qword_1EF2C76D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatNode, &type metadata for FormatNode);
    atomic_store(result, (unint64_t *)&qword_1EF2C76D8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FormatNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for FormatNode()
{
  return swift_release();
}

_QWORD *assignWithCopy for FormatNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FormatNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatNode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x59 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 89);
  v3 = ((((*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7) >> 1) & 0xFFFFFFBF | ((*(_QWORD *)a1 & 1) << 6)) ^ 0x7F;
  if (v3 >= 0x58)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x58)
  {
    *(_QWORD *)result = a2 - 89;
    if (a3 >= 0x59)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x59)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 6) & 1 | (2 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1BB57F748(_QWORD *a1)
{
  return (*a1 >> 58) & 0x3C | (*a1 >> 1) & 3;
}

_QWORD *sub_1BB57F75C(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFF9uLL;
  return result;
}

unint64_t *sub_1BB57F770(unint64_t *result, uint64_t a2)
{
  *result = (a2 << 58) & 0xF000000000000000 | (2 * (a2 & 3)) | *result & 0xFFFFFFFFFFFFFF8;
  return result;
}

ValueMetadata *type metadata accessor for FormatNode()
{
  return &type metadata for FormatNode;
}

uint64_t storeEnumTagSinglePayload for FormatNodeKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 39 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 39) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD8)
    return ((uint64_t (*)(void))((char *)&loc_1BB57F7EC + 4 * byte_1BB92848B[v4]))();
  *a1 = a2 + 39;
  return ((uint64_t (*)(void))((char *)sub_1BB57F820 + 4 * byte_1BB928486[v4]))();
}

uint64_t sub_1BB57F820(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB57F828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB57F830);
  return result;
}

uint64_t sub_1BB57F83C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB57F844);
  *(_BYTE *)result = a2 + 39;
  return result;
}

uint64_t sub_1BB57F848(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB57F850(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatNodeKind()
{
  return &type metadata for FormatNodeKind;
}

unint64_t sub_1BB57F870()
{
  unint64_t result;

  result = qword_1EF2C76E0;
  if (!qword_1EF2C76E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92872C, &type metadata for FormatNodeKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C76E0);
  }
  return result;
}

uint64_t sub_1BB57F8B4()
{
  unint64_t v0;

  v0 = sub_1BB87450C();
  swift_bridgeObjectRelease();
  if (v0 >= 0x28)
    return 40;
  else
    return v0;
}

unint64_t sub_1BB57F904()
{
  unint64_t result;

  result = qword_1ED3BD080;
  if (!qword_1ED3BD080)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9286B4, &type metadata for FormatNodeKind);
    atomic_store(result, (unint64_t *)&qword_1ED3BD080);
  }
  return result;
}

void sub_1BB57F94C()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB57F990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = FormatEdgeInsetsEquation.description.getter();
  v3 = v2;
  v4 = type metadata accessor for FormatInspectionItem(0);
  v5 = (uint64_t *)(v0 + *(int *)(v4 + 24));
  *v5 = v1;
  v5[1] = v3;
  v6 = type metadata accessor for FormatInspectionItem.Value(0);
  swift_storeEnumTagMultiPayload();
  result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  *(_OWORD *)v0 = xmmword_1BB928840;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v8 = v0 + *(int *)(v4 + 28);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = -1;
  return result;
}

void sub_1BB580074(_QWORD *a1)
{
  FormatImageNodeRequestAdjustment.encode(to:)(a1);
}

void _s8NewsFeed32FormatImageNodeRequestAdjustmentO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1BB5800DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  char v10;
  uint64_t v12[4];
  uint64_t v13[16];

  if (v9)
  {
    sub_1BA527164(v7, v6, v5, v4, v9);
    sub_1BA527164(v3, v2, v1, v0, v8);
    sub_1BA5271D4(v3, v2, v1, v0, v8);
    sub_1BA5271D4(v7, v6, v5, v4, v9);
    v10 = 0;
  }
  else
  {
    v13[0] = v3;
    v13[1] = v2;
    v13[2] = v1;
    v13[3] = v0;
    v12[0] = v7;
    v12[1] = v6;
    v12[2] = v5;
    v12[3] = v4;
    sub_1BA527164(v7, v6, v5, v4, 0);
    sub_1BA527164(v3, v2, v1, v0, 0);
    sub_1BA527164(v7, v6, v5, v4, 0);
    sub_1BA527164(v3, v2, v1, v0, 0);
    v10 = _s8NewsFeed24FormatEdgeInsetsEquationV2eeoiySbAC_ACtFZ_0(v13, v12);
    sub_1BA5271D4(v3, v2, v1, v0, 0);
    sub_1BA5271D4(v7, v6, v5, v4, 0);
    sub_1BA5271D4(v7, v6, v5, v4, 0);
    sub_1BA5271D4(v3, v2, v1, v0, 0);
  }
  return v10 & 1;
}

unint64_t sub_1BB580C10(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB580C34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB580C34()
{
  unint64_t result;

  result = qword_1EF2C76E8;
  if (!qword_1EF2C76E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestAdjustment, &type metadata for FormatImageNodeRequestAdjustment);
    atomic_store(result, (unint64_t *)&qword_1EF2C76E8);
  }
  return result;
}

unint64_t sub_1BB580C78(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA821070();
  a1[2] = sub_1BA8210B4();
  result = sub_1BB580CAC();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB580CAC()
{
  unint64_t result;

  result = qword_1EF2C76F0;
  if (!qword_1EF2C76F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatImageNodeRequestAdjustment, &type metadata for FormatImageNodeRequestAdjustment);
    atomic_store(result, (unint64_t *)&qword_1EF2C76F0);
  }
  return result;
}

uint64_t assignWithCopy for FormatImageNodeRequestAdjustment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1BA527164(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1BA5271D4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FormatImageNodeRequestAdjustment(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1BA5271D4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_1BB580DA8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t sub_1BB580DC0(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 12;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FormatImageNodeRequestAdjustment()
{
  return &type metadata for FormatImageNodeRequestAdjustment;
}

void __swiftcall UIView.nearestCommonAncestor(with:)(UIView_optional *__return_ptr retstr, UIView *with)
{
  void *v2;
  void *v3;
  id v5;
  UIView *v6;
  uint64_t v7;
  __objc2_class_ro *v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  UIView *v21;
  uint64_t v22;
  UIView *v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  char v30;
  uint64_t v31;
  id v32;
  char v33;
  UIView *v34;
  id v35;
  void *v36;
  UIView *v37;
  id v38;
  uint64_t v39;

  v3 = v2;
  v5 = v2;
  v6 = with;
  v36 = v5;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && sub_1BB873F30())
    sub_1BA8656B4(MEMORY[0x1E0DEE9D8]);
  else
    v7 = MEMORY[0x1E0DEE9E8];
  v39 = v7;
  sub_1BA81CF48();
  v8 = &StubThumbnailProcessor;
LABEL_5:
  v9 = v39;
  if ((v39 & 0xC000000000000001) != 0)
  {
    v10 = v3;
    swift_bridgeObjectRetain();
    v11 = sub_1BB873C18();
    swift_bridgeObjectRelease();

    if ((v11 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_38:

      return;
    }
  }
  else if (*(_QWORD *)(v39 + 16))
  {
    v3;
    swift_bridgeObjectRetain();
    v12 = sub_1BB8738AC();
    v13 = -1 << *(_BYTE *)(v9 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v14);
      v16 = sub_1BB8738B8();

      if ((v16 & 1) != 0)
      {
LABEL_35:
        swift_bridgeObjectRelease_n();
        goto LABEL_38;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v14);
        v19 = sub_1BB8738B8();

        if ((v19 & 1) != 0)
          goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    v8 = &StubThumbnailProcessor;
  }
  else
  {
    v20 = v3;
  }
  sub_1BA9DB5AC(&v38, v3);

  if (with)
  {
    v21 = with;
    goto LABEL_19;
  }
  while (1)
  {
    v25 = objc_msgSend(v3, (SEL)v8[55].base_props);

    v21 = (UIView *)objc_msgSend(with, (SEL)v8[55].base_props);
    if (v25)
    {
      with = v21;
      v3 = v25;
      goto LABEL_5;
    }
    v3 = 0;
    with = v21;
    if (!v21)
    {
      swift_bridgeObjectRelease();
      v35 = v36;
      return;
    }
LABEL_19:
    v22 = v39;
    if ((v39 & 0xC000000000000001) == 0)
      break;
    v23 = with;
    swift_bridgeObjectRetain();
    v24 = sub_1BB873C18();
    swift_bridgeObjectRelease();

    if ((v24 & 1) != 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
LABEL_21:
    sub_1BA9DB5AC(&v38, v21);

  }
  if (!*(_QWORD *)(v39 + 16))
  {
    v34 = with;
    goto LABEL_21;
  }
  v37 = with;
  swift_bridgeObjectRetain();
  v26 = sub_1BB8738AC();
  v27 = -1 << *(_BYTE *)(v22 + 32);
  v28 = v26 & ~v27;
  if (((*(_QWORD *)(v22 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v29 = *(id *)(*(_QWORD *)(v22 + 48) + 8 * v28);
  v30 = sub_1BB8738B8();

  if ((v30 & 1) == 0)
  {
    v31 = ~v27;
    while (1)
    {
      v28 = (v28 + 1) & v31;
      if (((*(_QWORD *)(v22 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        break;
      v32 = *(id *)(*(_QWORD *)(v22 + 48) + 8 * v28);
      v33 = sub_1BB8738B8();

      if ((v33 & 1) != 0)
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    v8 = &StubThumbnailProcessor;
    goto LABEL_21;
  }

  swift_bridgeObjectRelease_n();
LABEL_37:

}

Swift::Void __swiftcall UIView.applyBackground(_:withGutter:)(UIView *_, UIView_optional *withGutter)
{
  void *v2;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  UIView_optional *v12;
  UIView_optional *v13;
  UIView_optional *v14;
  UIView_optional *v15;

  v5 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  objc_msgSend(v2, sel_setBackgroundColor_, v5);

  v6 = objc_msgSend(v2, sel_subviews);
  sub_1BA81CF48();
  v7 = sub_1BB872DB4();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1BB873F30();
    if (!v8)
      goto LABEL_10;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_10;
  }
  if (v8 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x1BCCE4630](i, v7);
    else
      v10 = *(id *)(v7 + 8 * i + 32);
    v11 = v10;
    objc_msgSend(v10, sel_removeFromSuperview);

  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  if (withGutter)
  {
    v12 = withGutter;
    UIView.nearestCommonAncestor(with:)(v13, &v12->value);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v2, sel_frame);
      -[UIView_optional convertPoint:toCoordinateSpace:](v15, sel_convertPoint_toCoordinateSpace_, v2);
      -[UIView frame](_, sel_frame);
      sub_1BB87357C();
      -[UIView setFrame:](_, sel_setFrame_);

      v12 = v15;
    }

  }
  objc_msgSend(v2, sel_addSubview_, _);
}

uint64_t *sub_1BB581404(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  id *v10;
  int EnumCaseMultiPayload;
  id v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (id *)((char *)a2 + v8);
    type metadata accessor for DebugFormatCompilerResultOutput();
    swift_retain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      type metadata accessor for FormatFile();
      v14 = (char *)&loc_1BB5814EC + 4 * word_1BB9289C0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (EnumCaseMultiPayload != 1)
    {
      type metadata accessor for FormatFile();
      v15 = (char *)&loc_1BB581670 + 4 * word_1BB9289D8[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v12 = *v10;
    v13 = *v10;
    *v9 = v12;
    swift_storeEnumTagMultiPayload();
    v16 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v7 + v16) = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1BB58310C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for DebugFormatCompilerResultOutput();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      type metadata accessor for FormatFile();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_bridgeObjectRelease();
          v12 = type metadata accessor for FormatContent(0);
          v13 = v4 + *(int *)(v12 + 20);
          v14 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15 = v4 + *(int *)(v12 + 40);
          v16 = sub_1BB871E24();
          v17 = *(_QWORD *)(v16 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
            (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
          goto LABEL_66;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(unsigned __int8 *)(v4 + 106) != 255)
          {
            v39 = *(unsigned __int16 *)(v4 + 104) | (*(unsigned __int8 *)(v4 + 106) << 16);
            sub_1BA77A170(*(_QWORD *)(v4 + 96), v39, SBYTE2(v39), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
          }
          break;
        case 2u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 72) >= 3uLL)
            swift_bridgeObjectRelease();
          goto LABEL_66;
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 56) >= 0xFuLL)
            swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_67;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_67;
        case 5u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 168) >= 3uLL)
            swift_bridgeObjectRelease();
          v40 = (int *)type metadata accessor for FormatPackage();
          v41 = v4 + v40[23];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v42 = type metadata accessor for FormatCompilerOptions(0);
          v43 = v41 + *(int *)(v42 + 24);
          if (*(_QWORD *)(v43 + 8) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v44 = v43 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
          v45 = sub_1BB86E710();
          v46 = *(_QWORD *)(v45 - 8);
          v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
          if (!v47(v44, 1, v45))
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
          v48 = v41 + *(int *)(v42 + 28);
          if (!v47(v48, 1, v45))
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v45);
          swift_bridgeObjectRelease();
          v49 = v4 + v40[24];
          v50 = sub_1BB86EB84();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
          v51 = v4 + v40[25];
          if (!v47(v51, 1, v45))
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v51, v45);
          break;
        case 6u:
          swift_bridgeObjectRelease();
          goto LABEL_67;
        case 7u:
          swift_release();
          break;
        case 8u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_67;
        case 9u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_67;
        case 0xAu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BA6C0C20(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_BYTE *)(v4 + 80));
          break;
        case 0xBu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v52 = v4 + *(int *)(type metadata accessor for FormatBindingContent() + 28);
          swift_bridgeObjectRelease();
          v53 = type metadata accessor for FormatContent(0);
          v54 = v52 + *(int *)(v53 + 20);
          v55 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v56 = v52 + *(int *)(v53 + 40);
          v57 = sub_1BB871E24();
          v58 = *(_QWORD *)(v57 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
            (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
LABEL_66:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_67:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      sub_1BAF05E00();
      v18 = *(void **)(v4 + *(int *)(v59 + 48));
      goto LABEL_69;
    case 1:
      v18 = *(void **)v4;
LABEL_69:

      break;
    case 0:
      type metadata accessor for FormatFile();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          swift_bridgeObjectRelease();
          v6 = type metadata accessor for FormatContent(0);
          v7 = v4 + *(int *)(v6 + 20);
          v8 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = v4 + *(int *)(v6 + 40);
          v10 = sub_1BB871E24();
          v11 = *(_QWORD *)(v10 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
            (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
          goto LABEL_39;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(unsigned __int8 *)(v4 + 106) != 255)
          {
            v19 = *(unsigned __int16 *)(v4 + 104) | (*(unsigned __int8 *)(v4 + 106) << 16);
            sub_1BA77A170(*(_QWORD *)(v4 + 96), v19, SBYTE2(v19), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA7AAE54, (uint64_t (*)(void))sub_1BA7AAE60);
          }
          goto LABEL_70;
        case 2u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 72) >= 3uLL)
            swift_bridgeObjectRelease();
          goto LABEL_39;
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 56) >= 0xFuLL)
            swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_70;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_70;
        case 5u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v4 + 168) >= 3uLL)
            swift_bridgeObjectRelease();
          v20 = (int *)type metadata accessor for FormatPackage();
          v21 = v4 + v20[23];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v22 = type metadata accessor for FormatCompilerOptions(0);
          v23 = v21 + *(int *)(v22 + 24);
          if (*(_QWORD *)(v23 + 8) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v24 = v23 + *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
          v25 = sub_1BB86E710();
          v26 = *(_QWORD *)(v25 - 8);
          v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
          if (!v27(v24, 1, v25))
            (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
          v28 = v21 + *(int *)(v22 + 28);
          if (!v27(v28, 1, v25))
            (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v25);
          swift_bridgeObjectRelease();
          v29 = v4 + v20[24];
          v30 = sub_1BB86EB84();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
          v31 = v4 + v20[25];
          if (!v27(v31, 1, v25))
            (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v25);
          goto LABEL_70;
        case 6u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_70;
        case 7u:
          swift_release();
          goto LABEL_70;
        case 8u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_70;
        case 9u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_70;
        case 0xAu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BA6C0C20(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_BYTE *)(v4 + 80));
          goto LABEL_70;
        case 0xBu:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = v4 + *(int *)(type metadata accessor for FormatBindingContent() + 28);
          swift_bridgeObjectRelease();
          v33 = type metadata accessor for FormatContent(0);
          v34 = v32 + *(int *)(v33 + 20);
          v35 = sub_1BB86C8B0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 = v32 + *(int *)(v33 + 40);
          v37 = sub_1BB871E24();
          v38 = *(_QWORD *)(v37 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
            (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
LABEL_39:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_70;
      }
      break;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BB583E6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  id *v7;
  int EnumCaseMultiPayload;
  id v9;
  id v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v5 = a3[5];
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (id *)((char *)a2 + v5);
  type metadata accessor for DebugFormatCompilerResultOutput();
  swift_retain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    type metadata accessor for FormatFile();
    v11 = (char *)&loc_1BB583F2C + 4 * word_1BB928A20[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (EnumCaseMultiPayload != 1)
  {
    type metadata accessor for FormatFile();
    v12 = (char *)&loc_1BB5840A8 + 4 * word_1BB928A38[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v9 = *v7;
  v10 = *v7;
  *v6 = v9;
  swift_storeEnumTagMultiPayload();
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BB585AD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id *v8;
  int EnumCaseMultiPayload;
  id v10;
  id v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (id *)((char *)a2 + v6);
    sub_1BA4A2E80((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCompilerResultOutput);
    type metadata accessor for DebugFormatCompilerResultOutput();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      type metadata accessor for FormatFile();
      v12 = (char *)&loc_1BB585BB4 + 4 * word_1BB928A50[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    if (EnumCaseMultiPayload != 1)
    {
      type metadata accessor for FormatFile();
      v13 = (char *)&loc_1BB585D60 + 4 * word_1BB928A68[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v10 = *v8;
    v11 = *v8;
    *v7 = v10;
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1BB587B94(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int (*v125)(char *, uint64_t, uint64_t);
  unsigned int (*v126)(char *, uint64_t, uint64_t);
  int *v127;
  int *v128;
  int *v129;
  int *v130;
  char *__dst;
  char *__dsta;
  char *__dstb;
  int *v134;
  int *v135;
  int *v136;
  int *v137;

  v3 = a3;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DebugFormatCompilerResultOutput();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = type metadata accessor for FormatFile();
    v25 = swift_getEnumCaseMultiPayload();
    if (v25 == 11)
    {
      v136 = v3;
      v67 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v67;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      v68 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
      v69 = &v7[v68];
      v70 = &v8[v68];
      *(_OWORD *)&v7[v68] = *(_OWORD *)&v8[v68];
      v71 = (int *)type metadata accessor for FormatContent(0);
      v72 = v71[5];
      v73 = &v69[v72];
      v74 = &v70[v72];
      v75 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
      *(_OWORD *)&v69[v71[6]] = *(_OWORD *)&v70[v71[6]];
      *(_OWORD *)&v69[v71[7]] = *(_OWORD *)&v70[v71[7]];
      *(_OWORD *)&v69[v71[8]] = *(_OWORD *)&v70[v71[8]];
      *(_OWORD *)&v69[v71[9]] = *(_OWORD *)&v70[v71[9]];
      v76 = v71[10];
      __dsta = &v69[v76];
      v77 = &v70[v76];
      v78 = sub_1BB871E24();
      v79 = *(_QWORD *)(v78 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(__dsta, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(__dsta, v77, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dsta, 0, 1, v78);
      }
      *(_QWORD *)&v69[v71[11]] = *(_QWORD *)&v70[v71[11]];
      *(_QWORD *)&v69[v71[12]] = *(_QWORD *)&v70[v71[12]];
      *(_QWORD *)&v69[v71[13]] = *(_QWORD *)&v70[v71[13]];
      *(_QWORD *)&v69[v71[14]] = *(_QWORD *)&v70[v71[14]];
      *(_QWORD *)&v69[v71[15]] = *(_QWORD *)&v70[v71[15]];
      *(_QWORD *)&v69[v71[16]] = *(_QWORD *)&v70[v71[16]];
      *(_QWORD *)&v69[v71[17]] = *(_QWORD *)&v70[v71[17]];
      swift_storeEnumTagMultiPayload();
      v3 = v136;
      goto LABEL_48;
    }
    if (v25 == 5)
    {
      v137 = v3;
      v81 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v81;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *((_WORD *)v7 + 24) = *((_WORD *)v8 + 24);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
      *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
      v128 = (int *)type metadata accessor for FormatPackage();
      v82 = v128[23];
      v83 = &v7[v82];
      v84 = &v8[v82];
      *(_OWORD *)&v7[v82] = *(_OWORD *)&v8[v82];
      v130 = (int *)type metadata accessor for FormatCompilerOptions(0);
      __dstb = v84;
      v85 = v130[6];
      v86 = &v83[v85];
      v87 = &v84[v85];
      v88 = *((_OWORD *)v87 + 1);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      *((_OWORD *)v86 + 1) = v88;
      *((_OWORD *)v86 + 2) = *((_OWORD *)v87 + 2);
      v89 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      v90 = &v86[v89];
      v91 = &v87[v89];
      v92 = sub_1BB86E710();
      v93 = *(_QWORD *)(v92 - 8);
      v94 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
      if (v94(v91, 1, v92))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v90, v91, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      v101 = v130[7];
      v102 = &v83[v101];
      v103 = &__dstb[v101];
      v126 = v94;
      v104 = v94(&__dstb[v101], 1, v92);
      v3 = v137;
      if (v104)
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v102, v103, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v102, 0, 1, v92);
      }
      *(_QWORD *)&v83[v130[8]] = *(_QWORD *)&__dstb[v130[8]];
      v114 = v128[24];
      v115 = &v7[v114];
      v116 = &v8[v114];
      v117 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v115, v116, v117);
      v118 = v128[25];
      v119 = &v7[v118];
      v120 = &v8[v118];
      if (v126(&v8[v118], 1, v92))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v119, v120, v92);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v119, 0, 1, v92);
      }
    }
    else
    {
      if (v25)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_48:
        sub_1BAF05E00();
        *(_QWORD *)&v7[*(int *)(v122 + 48)] = *(_QWORD *)&v8[*(int *)(v122 + 48)];
        goto LABEL_49;
      }
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v26 = (int *)type metadata accessor for FormatContent(0);
      v27 = v26[5];
      v28 = &v7[v27];
      v29 = &v8[v27];
      v30 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_OWORD *)&v7[v26[6]] = *(_OWORD *)&v8[v26[6]];
      *(_OWORD *)&v7[v26[7]] = *(_OWORD *)&v8[v26[7]];
      *(_OWORD *)&v7[v26[8]] = *(_OWORD *)&v8[v26[8]];
      *(_OWORD *)&v7[v26[9]] = *(_OWORD *)&v8[v26[9]];
      v31 = v26[10];
      v32 = &v7[v31];
      v33 = &v8[v31];
      v34 = sub_1BB871E24();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      *(_QWORD *)&v7[v26[11]] = *(_QWORD *)&v8[v26[11]];
      *(_QWORD *)&v7[v26[12]] = *(_QWORD *)&v8[v26[12]];
      *(_QWORD *)&v7[v26[13]] = *(_QWORD *)&v8[v26[13]];
      *(_QWORD *)&v7[v26[14]] = *(_QWORD *)&v8[v26[14]];
      *(_QWORD *)&v7[v26[15]] = *(_QWORD *)&v8[v26[15]];
      *(_QWORD *)&v7[v26[16]] = *(_QWORD *)&v8[v26[16]];
      *(_QWORD *)&v7[v26[17]] = *(_QWORD *)&v8[v26[17]];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_48;
  }
  if (!EnumCaseMultiPayload)
  {
    v11 = type metadata accessor for FormatFile();
    v12 = swift_getEnumCaseMultiPayload();
    if (v12 == 11)
    {
      v134 = v3;
      v37 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v37;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      v38 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
      v39 = &v7[v38];
      v40 = &v8[v38];
      *(_OWORD *)&v7[v38] = *(_OWORD *)&v8[v38];
      v41 = (int *)type metadata accessor for FormatContent(0);
      v42 = v41[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      v45 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_OWORD *)&v39[v41[6]] = *(_OWORD *)&v40[v41[6]];
      *(_OWORD *)&v39[v41[7]] = *(_OWORD *)&v40[v41[7]];
      *(_OWORD *)&v39[v41[8]] = *(_OWORD *)&v40[v41[8]];
      *(_OWORD *)&v39[v41[9]] = *(_OWORD *)&v40[v41[9]];
      v46 = v41[10];
      v47 = &v39[v46];
      v48 = &v40[v46];
      v49 = sub_1BB871E24();
      v50 = *(_QWORD *)(v49 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      *(_QWORD *)&v39[v41[11]] = *(_QWORD *)&v40[v41[11]];
      *(_QWORD *)&v39[v41[12]] = *(_QWORD *)&v40[v41[12]];
      *(_QWORD *)&v39[v41[13]] = *(_QWORD *)&v40[v41[13]];
      *(_QWORD *)&v39[v41[14]] = *(_QWORD *)&v40[v41[14]];
      *(_QWORD *)&v39[v41[15]] = *(_QWORD *)&v40[v41[15]];
      *(_QWORD *)&v39[v41[16]] = *(_QWORD *)&v40[v41[16]];
      *(_QWORD *)&v39[v41[17]] = *(_QWORD *)&v40[v41[17]];
      swift_storeEnumTagMultiPayload();
      v3 = v134;
      goto LABEL_49;
    }
    if (v12 == 5)
    {
      v135 = v3;
      v52 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v52;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *((_WORD *)v7 + 24) = *((_WORD *)v8 + 24);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
      *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
      v127 = (int *)type metadata accessor for FormatPackage();
      v53 = v127[23];
      v54 = &v7[v53];
      v55 = &v8[v53];
      *(_OWORD *)&v7[v53] = *(_OWORD *)&v8[v53];
      v129 = (int *)type metadata accessor for FormatCompilerOptions(0);
      __dst = v55;
      v56 = v129[6];
      v57 = &v54[v56];
      v58 = &v55[v56];
      v59 = *((_OWORD *)v58 + 1);
      *(_OWORD *)v57 = *(_OWORD *)v58;
      *((_OWORD *)v57 + 1) = v59;
      *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
      v60 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      v61 = &v57[v60];
      v62 = &v58[v60];
      v63 = sub_1BB86E710();
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      if (v65(v62, 1, v63))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      v96 = v129[7];
      v97 = &v54[v96];
      v98 = &__dst[v96];
      v125 = v65;
      v99 = v65(&__dst[v96], 1, v63);
      v3 = v135;
      if (v99)
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v97, v98, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v97, 0, 1, v63);
      }
      *(_QWORD *)&v54[v129[8]] = *(_QWORD *)&__dst[v129[8]];
      v106 = v127[24];
      v107 = &v7[v106];
      v108 = &v8[v106];
      v109 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 32))(v107, v108, v109);
      v110 = v127[25];
      v111 = &v7[v110];
      v112 = &v8[v110];
      if (v125(v112, 1, v63))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v111, v112, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v111, 0, 1, v63);
      }
    }
    else
    {
      if (v12)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_49:
        swift_storeEnumTagMultiPayload();
        goto LABEL_50;
      }
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v13 = (int *)type metadata accessor for FormatContent(0);
      v14 = v13[5];
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_OWORD *)&v7[v13[6]] = *(_OWORD *)&v8[v13[6]];
      *(_OWORD *)&v7[v13[7]] = *(_OWORD *)&v8[v13[7]];
      *(_OWORD *)&v7[v13[8]] = *(_OWORD *)&v8[v13[8]];
      *(_OWORD *)&v7[v13[9]] = *(_OWORD *)&v8[v13[9]];
      v18 = v13[10];
      v19 = &v7[v18];
      v20 = &v8[v18];
      v21 = sub_1BB871E24();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      *(_QWORD *)&v7[v13[11]] = *(_QWORD *)&v8[v13[11]];
      *(_QWORD *)&v7[v13[12]] = *(_QWORD *)&v8[v13[12]];
      *(_QWORD *)&v7[v13[13]] = *(_QWORD *)&v8[v13[13]];
      *(_QWORD *)&v7[v13[14]] = *(_QWORD *)&v8[v13[14]];
      *(_QWORD *)&v7[v13[15]] = *(_QWORD *)&v8[v13[15]];
      *(_QWORD *)&v7[v13[16]] = *(_QWORD *)&v8[v13[16]];
      *(_QWORD *)&v7[v13[17]] = *(_QWORD *)&v8[v13[17]];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_49;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_50:
  v123 = v3[7];
  *(_QWORD *)((char *)a1 + v3[6]) = *(_QWORD *)((char *)a2 + v3[6]);
  *(_QWORD *)((char *)a1 + v123) = *(_QWORD *)((char *)a2 + v123);
  *(_QWORD *)((char *)a1 + v3[8]) = *(_QWORD *)((char *)a2 + v3[8]);
  return a1;
}

_QWORD *sub_1BB588880(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int *v118;
  int *v119;
  int *v120;
  uint64_t v121;
  int *v122;
  unsigned int (*v123)(char *, uint64_t, uint64_t);
  unsigned int (*v124)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;
  char *__dstb;
  char *__dstc;

  *a1 = *a2;
  swift_release();
  if (a1 == a2)
    goto LABEL_51;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_1BA4A2E80((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCompilerResultOutput);
  v9 = type metadata accessor for DebugFormatCompilerResultOutput();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = type metadata accessor for FormatFile();
    v25 = swift_getEnumCaseMultiPayload();
    if (v25 == 11)
    {
      v65 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v65;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      v66 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
      v67 = &v7[v66];
      v68 = &v8[v66];
      *(_OWORD *)&v7[v66] = *(_OWORD *)&v8[v66];
      v69 = (int *)type metadata accessor for FormatContent(0);
      v70 = v69[5];
      v71 = &v67[v70];
      v72 = &v68[v70];
      v73 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v71, v72, v73);
      *(_OWORD *)&v67[v69[6]] = *(_OWORD *)&v68[v69[6]];
      *(_OWORD *)&v67[v69[7]] = *(_OWORD *)&v68[v69[7]];
      *(_OWORD *)&v67[v69[8]] = *(_OWORD *)&v68[v69[8]];
      *(_OWORD *)&v67[v69[9]] = *(_OWORD *)&v68[v69[9]];
      v74 = v69[10];
      __dstb = &v67[v74];
      v75 = &v68[v74];
      v76 = sub_1BB871E24();
      v121 = *(_QWORD *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v75, 1, v76))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(__dstb, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v121 + 32))(__dstb, v75, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(__dstb, 0, 1, v76);
      }
      *(_QWORD *)&v67[v69[11]] = *(_QWORD *)&v68[v69[11]];
      *(_QWORD *)&v67[v69[12]] = *(_QWORD *)&v68[v69[12]];
      *(_QWORD *)&v67[v69[13]] = *(_QWORD *)&v68[v69[13]];
      *(_QWORD *)&v67[v69[14]] = *(_QWORD *)&v68[v69[14]];
      *(_QWORD *)&v67[v69[15]] = *(_QWORD *)&v68[v69[15]];
      *(_QWORD *)&v67[v69[16]] = *(_QWORD *)&v68[v69[16]];
      *(_QWORD *)&v67[v69[17]] = *(_QWORD *)&v68[v69[17]];
      swift_storeEnumTagMultiPayload();
      goto LABEL_49;
    }
    if (v25 == 5)
    {
      v78 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v78;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *((_WORD *)v7 + 24) = *((_WORD *)v8 + 24);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
      *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
      v119 = (int *)type metadata accessor for FormatPackage();
      v79 = v119[23];
      v80 = &v7[v79];
      v81 = &v8[v79];
      *(_OWORD *)&v7[v79] = *(_OWORD *)&v8[v79];
      v122 = (int *)type metadata accessor for FormatCompilerOptions(0);
      v82 = v122[6];
      v83 = &v80[v82];
      __dstc = v81;
      v84 = &v81[v82];
      v85 = *((_OWORD *)v84 + 1);
      *(_OWORD *)v83 = *(_OWORD *)v84;
      *((_OWORD *)v83 + 1) = v85;
      *((_OWORD *)v83 + 2) = *((_OWORD *)v84 + 2);
      v86 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      v87 = &v83[v86];
      v88 = &v84[v86];
      v89 = sub_1BB86E710();
      v90 = *(_QWORD *)(v89 - 8);
      v124 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
      if (v124(v88, 1, v89))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      v96 = v122[7];
      v97 = &v80[v96];
      v98 = &__dstc[v96];
      if (v124(&__dstc[v96], 1, v89))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v97, v98, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v97, 0, 1, v89);
      }
      *(_QWORD *)&v80[v122[8]] = *(_QWORD *)&__dstc[v122[8]];
      v108 = v119[24];
      v109 = &v7[v108];
      v110 = &v8[v108];
      v111 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 32))(v109, v110, v111);
      v112 = v119[25];
      v113 = &v7[v112];
      v114 = &v8[v112];
      if (v124(&v8[v112], 1, v89))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v113, v114, v89);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v113, 0, 1, v89);
      }
    }
    else
    {
      if (v25)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_49:
        sub_1BAF05E00();
        *(_QWORD *)&v7[*(int *)(v116 + 48)] = *(_QWORD *)&v8[*(int *)(v116 + 48)];
        goto LABEL_50;
      }
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v26 = (int *)type metadata accessor for FormatContent(0);
      v27 = v26[5];
      v28 = &v7[v27];
      v29 = &v8[v27];
      v30 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_OWORD *)&v7[v26[6]] = *(_OWORD *)&v8[v26[6]];
      *(_OWORD *)&v7[v26[7]] = *(_OWORD *)&v8[v26[7]];
      *(_OWORD *)&v7[v26[8]] = *(_OWORD *)&v8[v26[8]];
      *(_OWORD *)&v7[v26[9]] = *(_OWORD *)&v8[v26[9]];
      v31 = v26[10];
      v32 = &v7[v31];
      v33 = &v8[v31];
      v34 = sub_1BB871E24();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      *(_QWORD *)&v7[v26[11]] = *(_QWORD *)&v8[v26[11]];
      *(_QWORD *)&v7[v26[12]] = *(_QWORD *)&v8[v26[12]];
      *(_QWORD *)&v7[v26[13]] = *(_QWORD *)&v8[v26[13]];
      *(_QWORD *)&v7[v26[14]] = *(_QWORD *)&v8[v26[14]];
      *(_QWORD *)&v7[v26[15]] = *(_QWORD *)&v8[v26[15]];
      *(_QWORD *)&v7[v26[16]] = *(_QWORD *)&v8[v26[16]];
      *(_QWORD *)&v7[v26[17]] = *(_QWORD *)&v8[v26[17]];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_49;
  }
  if (!EnumCaseMultiPayload)
  {
    v11 = type metadata accessor for FormatFile();
    v12 = swift_getEnumCaseMultiPayload();
    if (v12 == 11)
    {
      v37 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v37;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      v38 = *(int *)(type metadata accessor for FormatBindingContent() + 28);
      v39 = &v7[v38];
      v40 = &v8[v38];
      *(_OWORD *)&v7[v38] = *(_OWORD *)&v8[v38];
      v41 = (int *)type metadata accessor for FormatContent(0);
      v42 = v41[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      v45 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_OWORD *)&v39[v41[6]] = *(_OWORD *)&v40[v41[6]];
      *(_OWORD *)&v39[v41[7]] = *(_OWORD *)&v40[v41[7]];
      *(_OWORD *)&v39[v41[8]] = *(_OWORD *)&v40[v41[8]];
      *(_OWORD *)&v39[v41[9]] = *(_OWORD *)&v40[v41[9]];
      v46 = v41[10];
      __dst = &v39[v46];
      v47 = &v40[v46];
      v48 = sub_1BB871E24();
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(__dst, v47, v48);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v48);
      }
      *(_QWORD *)&v39[v41[11]] = *(_QWORD *)&v40[v41[11]];
      *(_QWORD *)&v39[v41[12]] = *(_QWORD *)&v40[v41[12]];
      *(_QWORD *)&v39[v41[13]] = *(_QWORD *)&v40[v41[13]];
      *(_QWORD *)&v39[v41[14]] = *(_QWORD *)&v40[v41[14]];
      *(_QWORD *)&v39[v41[15]] = *(_QWORD *)&v40[v41[15]];
      *(_QWORD *)&v39[v41[16]] = *(_QWORD *)&v40[v41[16]];
      *(_QWORD *)&v39[v41[17]] = *(_QWORD *)&v40[v41[17]];
      swift_storeEnumTagMultiPayload();
      goto LABEL_50;
    }
    if (v12 == 5)
    {
      v51 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v51;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *((_WORD *)v7 + 24) = *((_WORD *)v8 + 24);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
      *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
      v118 = (int *)type metadata accessor for FormatPackage();
      v52 = v118[23];
      v53 = &v7[v52];
      v54 = &v8[v52];
      *(_OWORD *)&v7[v52] = *(_OWORD *)&v8[v52];
      v120 = (int *)type metadata accessor for FormatCompilerOptions(0);
      v55 = v120[6];
      v56 = &v53[v55];
      __dsta = v54;
      v57 = &v54[v55];
      v58 = *((_OWORD *)v57 + 1);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *((_OWORD *)v56 + 1) = v58;
      *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
      v59 = *(int *)(type metadata accessor for FormatCompilerOptions.Newsroom(0) + 20);
      v60 = &v56[v59];
      v61 = &v57[v59];
      v62 = sub_1BB86E710();
      v63 = *(_QWORD *)(v62 - 8);
      v123 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
      if (v123(v61, 1, v62))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      v92 = v120[7];
      v93 = &v53[v92];
      v94 = &__dsta[v92];
      if (v123(&__dsta[v92], 1, v62))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v93, v94, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v93, 0, 1, v62);
      }
      *(_QWORD *)&v53[v120[8]] = *(_QWORD *)&__dsta[v120[8]];
      v100 = v118[24];
      v101 = &v7[v100];
      v102 = &v8[v100];
      v103 = sub_1BB86EB84();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
      v104 = v118[25];
      v105 = &v7[v104];
      v106 = &v8[v104];
      if (v123(v106, 1, v62))
      {
        sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3C47E8, (void (*)(uint64_t))MEMORY[0x1E0DB48B0]);
        memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v105, v106, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v105, 0, 1, v62);
      }
    }
    else
    {
      if (v12)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_50:
        swift_storeEnumTagMultiPayload();
        goto LABEL_51;
      }
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v13 = (int *)type metadata accessor for FormatContent(0);
      v14 = v13[5];
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = sub_1BB86C8B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_OWORD *)&v7[v13[6]] = *(_OWORD *)&v8[v13[6]];
      *(_OWORD *)&v7[v13[7]] = *(_OWORD *)&v8[v13[7]];
      *(_OWORD *)&v7[v13[8]] = *(_OWORD *)&v8[v13[8]];
      *(_OWORD *)&v7[v13[9]] = *(_OWORD *)&v8[v13[9]];
      v18 = v13[10];
      v19 = &v7[v18];
      v20 = &v8[v18];
      v21 = sub_1BB871E24();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_1BA4A3FB4(0, &qword_1ED3C20E0, (void (*)(uint64_t))MEMORY[0x1E0D52E40]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      *(_QWORD *)&v7[v13[11]] = *(_QWORD *)&v8[v13[11]];
      *(_QWORD *)&v7[v13[12]] = *(_QWORD *)&v8[v13[12]];
      *(_QWORD *)&v7[v13[13]] = *(_QWORD *)&v8[v13[13]];
      *(_QWORD *)&v7[v13[14]] = *(_QWORD *)&v8[v13[14]];
      *(_QWORD *)&v7[v13[15]] = *(_QWORD *)&v8[v13[15]];
      *(_QWORD *)&v7[v13[16]] = *(_QWORD *)&v8[v13[16]];
      *(_QWORD *)&v7[v13[17]] = *(_QWORD *)&v8[v13[17]];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_50;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_51:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1BB5895A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5895B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DebugFormatCompilerResultOutput();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1BB589630()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BB58963C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DebugFormatCompilerResultOutput();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DebugFormatCompilerResultEntry()
{
  uint64_t result;

  result = qword_1EF2C7750;
  if (!qword_1EF2C7750)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB5896EC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DebugFormatCompilerResultOutput();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BB589780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  int isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;

  v10 = type metadata accessor for DebugFormatCacheFile();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v44 = (uint64_t)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v43 = (_QWORD *)((char *)v39 - v14);
  *a4 = a1;
  v15 = (int *)type metadata accessor for DebugFormatCompilerResultEntry();
  sub_1BA4C2DD8(a2, (uint64_t)a4 + v15[5], (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCompilerResultOutput);
  *(_QWORD *)((char *)a4 + v15[6]) = a3;
  v16 = *(_QWORD *)(a3 + 16);
  if (!v16)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_18:
    swift_release();
    sub_1BA4A2E80(a2, (uint64_t (*)(_QWORD))type metadata accessor for DebugFormatCompilerResultOutput);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)((char *)a4 + v15[7]) = v19;
    *(double *)((char *)a4 + v15[8]) = a5;
    return result;
  }
  v39[0] = v15;
  v40 = a2;
  v41 = a3;
  v42 = a4;
  v17 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v18 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain_n();
  v39[1] = a1;
  swift_retain();
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v20 = type metadata accessor for DebugFormatCacheFile;
  v21 = v43;
  while (1)
  {
    sub_1BA4C2DD8(v17, (uint64_t)v21, (uint64_t (*)(_QWORD))v20);
    v23 = *v21;
    v22 = v21[1];
    v24 = v20;
    sub_1BA4C2DD8((uint64_t)v21, v44, (uint64_t (*)(_QWORD))v20);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = v19;
    v27 = sub_1BA6E35A8(v23, v22);
    v28 = v19[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v19[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v19 = v45;
        if ((v26 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1BB4C7BF8();
        v19 = v45;
        if ((v31 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1BB4B7624(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_1BA6E35A8(v23, v22);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_21;
      v27 = v32;
      v19 = v45;
      if ((v31 & 1) != 0)
      {
LABEL_3:
        sub_1BB4944C4(v44, v19[7] + v27 * v18);
        goto LABEL_4;
      }
    }
    v19[(v27 >> 6) + 8] |= 1 << v27;
    v34 = (uint64_t *)(v19[6] + 16 * v27);
    *v34 = v23;
    v34[1] = v22;
    sub_1BB4CD938(v44, v19[7] + v27 * v18);
    v35 = v19[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_20;
    v19[2] = v37;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v43;
    v20 = v24;
    sub_1BA4A2E80((uint64_t)v43, (uint64_t (*)(_QWORD))v24);
    v17 += v18;
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      a4 = v42;
      a2 = v40;
      v15 = (int *)v39[0];
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

NewsFeed::PublisherLogoTheme_optional __swiftcall PublisherLogoTheme.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (NewsFeed::PublisherLogoTheme_optional)rawValue;
}

uint64_t PublisherLogoTheme.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *sub_1BB589AC0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

BOOL static PublisherLogoProcessorOptions.BackgroundColorDriver.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t PublisherLogoProcessorOptions.BackgroundColorDriver.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t PublisherLogoProcessorOptions.BackgroundColorDriver.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t PublisherLogoProcessorOptions.init(requestOptions:background:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = *a2;
  sub_1BA65F7C8(a1, a3);
  result = type metadata accessor for PublisherLogoProcessorOptions(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t PublisherLogoProcessorRequest.cacheIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PublisherLogoProcessorRequest.assetHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PublisherLogoProcessorRequest.__allocating_init(publisherLogoAssetHandle:publisherLogoImageSize:scale:theme:isTransparentWhiteBackground:options:)(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a1, v15);
  v18 = sub_1BB58A268(v17, a2, a3, a4, a5, a6, a7, v7, v15, v16);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v18;
}

uint64_t PublisherLogoProcessorRequest.init(publisherLogoAssetHandle:publisherLogoImageSize:scale:theme:isTransparentWhiteBackground:options:)(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a1, v15);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v21 + 16))(v20, v18);
  v22 = sub_1BB589DF8((uint64_t)v20, a2, a3, a4, v7, v15, v16, a5, a6, a7);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v22;
}

uint64_t PublisherLogoProcessorRequest.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BB58A358(v0 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_options);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_assetHandle);
  return v0;
}

uint64_t PublisherLogoProcessorRequest.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BB58A358(v0 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_options);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_assetHandle);
  return swift_deallocClassInstance();
}

uint64_t sub_1BB589DEC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB589DF8(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10)
{
  uint64_t v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *boxed_opaque_existential_0;
  double v30;
  uint64_t inited;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  char v34;
  id v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56[6];

  v20 = type metadata accessor for ImageRequestOptions();
  MEMORY[0x1E0C80A78](v20);
  v22 = (id *)((char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4B07F0(0, &qword_1ED3B8450, type metadata accessor for PublisherLogoProcessorOptions, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v49 - v27;
  v56[3] = a6;
  v56[4] = a7;
  v51 = a7;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v56);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_0, a1, a6);
  *(_QWORD *)&v30 = *a2;
  sub_1BA4C010C((uint64_t)v56, a5 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_assetHandle);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9FB8, (uint64_t (*)(uint64_t))sub_1BA81E240, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(inited + 32) = 0xD000000000000015;
  *(_QWORD *)(inited + 40) = 0x80000001BB9915A0;
  sub_1BA4C010C((uint64_t)v56, inited + 48);
  *(_QWORD *)(a5 + 32) = sub_1BA739C1C(inited);
  *(double *)(a5 + 40) = a8;
  *(double *)(a5 + 48) = a9;
  *(double *)(a5 + 56) = a10;
  v50 = v30;
  *(_BYTE *)(a5 + 64) = LOBYTE(v30);
  *(_BYTE *)(a5 + 65) = a3;
  sub_1BB58AC84(a4, a5 + OBJC_IVAR____TtC8NewsFeed29PublisherLogoProcessorRequest_options);
  sub_1BB58AC84(a4, (uint64_t)v28);
  v32 = type metadata accessor for PublisherLogoProcessorOptions(0);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48);
  if (v33(v28, 1, v32) == 1)
  {
    sub_1BB58A358((uint64_t)v28);
  }
  else
  {
    v34 = v28[*(int *)(v32 + 20)];
    sub_1BA4A2E80((uint64_t)v28, type metadata accessor for PublisherLogoProcessorOptions);
    LOBYTE(v54) = v34;
    sub_1BB872A00();
  }
  sub_1BB58AC84(a4, (uint64_t)v25);
  if (v33(v25, 1, v32) == 1)
  {
    sub_1BB58A358((uint64_t)v25);
  }
  else
  {
    sub_1BAA4D900((uint64_t)v25, (uint64_t)v22);
    sub_1BA4A2E80((uint64_t)v25, type metadata accessor for PublisherLogoProcessorOptions);
    v35 = v22[1];
    sub_1BA4A2E80((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
    sub_1BB195F38();

  }
  v54 = 0;
  v55 = 0xE000000000000000;
  sub_1BB873CB4();
  sub_1BB86FA84();
  sub_1BB872AFC(v36);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v37);
  v52 = a8;
  v53 = a9;
  type metadata accessor for CGSize(0);
  sub_1BB873E34();
  sub_1BB872AFC(v38);
  sub_1BB872FDC();
  sub_1BB872AFC(v39);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v40);
  v52 = v50;
  sub_1BB87420C();
  sub_1BB872AFC(v41);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v42);
  sub_1BB872AFC(v43);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v44);
  sub_1BB872AFC(v45);
  swift_bridgeObjectRelease();
  v46 = v54;
  v47 = v55;
  sub_1BB58A358(a4);
  *(_QWORD *)(a5 + 16) = v46;
  *(_QWORD *)(a5 + 24) = v47;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return a5;
}

uint64_t sub_1BB58A268(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  v19 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a9);
  return sub_1BB589DF8((uint64_t)v21, a2, a3, a4, v22, a9, a10, a5, a6, a7);
}

uint64_t sub_1BB58A358(uint64_t a1)
{
  uint64_t v2;

  sub_1BA4B07F0(0, &qword_1ED3B8450, type metadata accessor for PublisherLogoProcessorOptions, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BB58A3B0()
{
  unint64_t result;

  result = qword_1EF2C7798;
  if (!qword_1EF2C7798)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PublisherLogoTheme, &type metadata for PublisherLogoTheme);
    atomic_store(result, (unint64_t *)&qword_1EF2C7798);
  }
  return result;
}

unint64_t sub_1BB58A3F8()
{
  unint64_t result;

  result = qword_1EF2C77A0;
  if (!qword_1EF2C77A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PublisherLogoProcessorOptions.BackgroundColorDriver, &type metadata for PublisherLogoProcessorOptions.BackgroundColorDriver);
    atomic_store(result, (unint64_t *)&qword_1EF2C77A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PublisherLogoTheme()
{
  return &type metadata for PublisherLogoTheme;
}

_QWORD *initializeBufferWithCopyOfBuffer for PublisherLogoProcessorOptions(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(type metadata accessor for ImageRequestOptions() + 24);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BB86F550();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v7;
    if (v13(v10, 1, v11))
    {
      sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return v4;
}

uint64_t destroy for PublisherLogoProcessorOptions(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(type metadata accessor for ImageRequestOptions() + 24);
  v3 = sub_1BB86F550();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_QWORD *initializeWithCopy for PublisherLogoProcessorOptions(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;

  v6 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for ImageRequestOptions() + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BB86F550();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithCopy for PublisherLogoProcessorOptions(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = v6;
  v8 = v6;

  v9 = *(int *)(type metadata accessor for ImageRequestOptions() + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1BB86F550();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *initializeWithTake for PublisherLogoProcessorOptions(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for ImageRequestOptions() + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BB86F550();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for PublisherLogoProcessorOptions(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = (void *)a1[1];
  a1[1] = a2[1];

  v7 = *(int *)(type metadata accessor for ImageRequestOptions() + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BB86F550();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PublisherLogoProcessorOptions()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB58AAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for ImageRequestOptions();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PublisherLogoProcessorOptions()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB58AB24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ImageRequestOptions();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t _s8NewsFeed18PublisherLogoThemeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB58ABE8 + 4 * byte_1BB928AD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB58AC1C + 4 * byte_1BB928AD0[v4]))();
}

uint64_t sub_1BB58AC1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58AC24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB58AC2CLL);
  return result;
}

uint64_t sub_1BB58AC38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB58AC40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB58AC44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58AC4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PublisherLogoProcessorOptions.BackgroundColorDriver()
{
  return &type metadata for PublisherLogoProcessorOptions.BackgroundColorDriver;
}

uint64_t sub_1BB58AC68()
{
  return type metadata accessor for PublisherLogoProcessorRequest(0);
}

uint64_t method lookup function for PublisherLogoProcessorRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PublisherLogoProcessorRequest.__allocating_init(publisherLogoAssetHandle:publisherLogoImageSize:scale:theme:isTransparentWhiteBackground:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_1BB58AC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA4B07F0(0, &qword_1ED3B8450, type metadata accessor for PublisherLogoProcessorOptions, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BB58ACE0(unint64_t a1, void *a2, char a3)
{
  uint64_t v4;

  v4 = sub_1BB58BB44(a1, a2, a3);

  return v4;
}

void sub_1BB58AD1C()
{
  unsigned __int8 *v0;
  void *v1;
  int v2;
  id v3;
  void *v4;
  char **v5;
  id v6;
  id v7;

  v1 = v0;
  v2 = v0[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_isSelected];
  v3 = objc_msgSend(v1, sel_layer);
  v4 = (void *)objc_opt_self();
  v5 = &selRef_systemBlueColor;
  if (!v2)
    v5 = &selRef_systemGray2Color;
  v6 = objc_msgSend(v4, *v5);
  v7 = objc_msgSend(v6, sel_CGColor);

  objc_msgSend(v3, sel_setBorderColor_, v7);
}

uint64_t sub_1BB58ADD4()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  __int128 v6[2];
  uint64_t v7;
  _QWORD v8[4];

  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
  sub_1BB58BA60();
  v1 = v0;
  if (swift_dynamicCast())
  {
    sub_1BA4CECCC(v6, (uint64_t)v8);
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    v2 = sub_1BB86DEE8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    sub_1BB58BAB4((uint64_t)v6);
    v3 = objc_msgSend(v1, sel_superview);
    if (v3)
    {
      v4 = v3;
      v2 = sub_1BB58ADD4();

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

char *sub_1BB58AEE8(void *a1, void *a2, char a3)
{
  _BYTE *v3;
  _BYTE *v4;
  objc_class *ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  Class v14;
  id v15;
  _BYTE *v16;
  id v17;
  void *v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char *v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  id v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v51;
  void *v52;
  id v53;
  objc_super v54;

  v4 = v3;
  v52 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1BA4D787C(0, &qword_1ED3C49C0, MEMORY[0x1E0DBC320]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v51 - v11);
  v4[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_isSelected] = 0;
  v13 = OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_onTap;
  sub_1BA4D787C(0, (unint64_t *)&qword_1ED3B0A50, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DBC348]);
  v15 = objc_allocWithZone(v14);
  v16 = v4;
  *(_QWORD *)&v4[v13] = objc_msgSend(v15, sel_init);
  *(_QWORD *)&v16[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_children] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v16[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_view] = a1;
  v17 = a1;
  v18 = (void *)sub_1BB58B36C();
  *(_QWORD *)&v16[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_image] = v18;
  type metadata accessor for DebugGroupLayoutView();
  v19 = swift_dynamicCastClass();
  v20 = v19 != 0;
  if (!v19 && (a3 & 1) != 0)
  {
    sub_1BB86D834();
    v20 = swift_dynamicCastClass() == 0;
  }
  v16[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_isContent] = v20;
  v21 = v18;

  objc_msgSend(v17, sel_frame);
  v54.receiver = v16;
  v54.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v54, sel_initWithFrame_);
  *v12 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DBC310], v9);
  v23 = v22;

  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  v24 = objc_msgSend(v23, sel_layer);
  if (v18 && (v25 = objc_msgSend(v21, sel_CGImage)) != 0)
  {
    v53 = v25;
    type metadata accessor for CGImage(0);
    v26 = sub_1BB874380();

  }
  else
  {
    v26 = 0;
  }
  objc_msgSend(v24, sel_setContents_, v26);

  swift_unknownObjectRelease();
  v27 = objc_msgSend(v23, sel_layer);
  v28 = objc_msgSend((id)objc_opt_self(), sel_systemGray2Color);
  v29 = objc_msgSend(v28, sel_CGColor);

  objc_msgSend(v27, sel_setBorderColor_, v29);
  v30 = objc_msgSend(v23, sel_layer);
  objc_msgSend(v30, sel_setBorderWidth_, 1.0);

  v31 = (char *)v23;
  v32 = objc_msgSend(v17, sel_superview);
  objc_msgSend(v17, sel_frame);
  v37 = v33;
  v38 = v34;
  v39 = v35;
  v40 = v36;
  v41 = v52;
  if (v32)
  {
    objc_msgSend(v32, sel_convertRect_toCoordinateSpace_, v52, v33, v34, v35, v36);
    v37 = v42;
    v38 = v43;
    v39 = v44;
    v40 = v45;

  }
  objc_msgSend(v31, sel_setFrame_, v37, v38, v39, v40);

  v46 = objc_msgSend(v17, sel_subviews);
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
  v47 = sub_1BB872DB4();

  v48 = v41;
  v49 = sub_1BB58ACE0(v47, v48, v20);
  swift_bridgeObjectRelease();

  *(_QWORD *)&v31[OBJC_IVAR____TtC8NewsFeed23DebugFormatSnapshotView_children] = v49;
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_1BB58B36C()
{
  void *v0;
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  id v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  double v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t i;
  id v39;
  void *v40;
  unint64_t v41;
  char v42;
  uint64_t result;
  id v44;
  _QWORD aBlock[6];

  if ((objc_msgSend(v0, sel_isHidden) & 1) != 0)
    return 0;
  v44 = v0;
  v2 = objc_msgSend(v0, sel_subviews);
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9950);
  v3 = sub_1BB872DB4();

  if (v3 >> 62)
    goto LABEL_26;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
LABEL_5:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v6 = 4;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1BCCE4630](v6 - 4, v3);
      else
        v7 = *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        swift_bridgeObjectRetain_n();
        v4 = sub_1BB873F30();
        swift_bridgeObjectRelease();
        if (!v4)
          break;
        goto LABEL_5;
      }
      v10 = v4;
      v11 = objc_msgSend(v7, sel_isHidden);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v5;
      v14 = sub_1BB4CF560((uint64_t)v8);
      v15 = v5[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_24;
      v18 = v13;
      if (v5[3] >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v5 = (_QWORD *)aBlock[0];
          if ((v13 & 1) != 0)
            goto LABEL_6;
        }
        else
        {
          sub_1BB4CADF8();
          v5 = (_QWORD *)aBlock[0];
          if ((v18 & 1) != 0)
            goto LABEL_6;
        }
      }
      else
      {
        sub_1BB4BC148(v17, isUniquelyReferenced_nonNull_native);
        v19 = sub_1BB4CF560((uint64_t)v8);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_45;
        v14 = v19;
        v5 = (_QWORD *)aBlock[0];
        if ((v18 & 1) != 0)
        {
LABEL_6:
          *(_BYTE *)(v5[7] + v14) = v11;
          goto LABEL_7;
        }
      }
      v5[(v14 >> 6) + 8] |= 1 << v14;
      *(_QWORD *)(v5[6] + 8 * v14) = v8;
      *(_BYTE *)(v5[7] + v14) = v11;
      v21 = v5[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_25;
      v5[2] = v23;
LABEL_7:
      swift_bridgeObjectRelease();
      objc_msgSend(v8, sel_setHidden_, 1);

      ++v6;
      v4 = v10;
      if (v9 == v10)
        goto LABEL_28;
    }
  }
  v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_28:
  swift_bridgeObjectRelease_n();
  sub_1BA49A224(0, &qword_1EF2C7810);
  v24 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultFormat);
  objc_msgSend(v24, sel_setOpaque_, 0);
  v25 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v25, sel_scale);
  v27 = v26;

  objc_msgSend(v24, sel_setScale_, v27);
  v28 = (unint64_t)v44;
  objc_msgSend(v44, sel_bounds);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_format_, v24, v29, v30);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v44;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = sub_1BB37505C;
  *(_QWORD *)(v33 + 24) = v32;
  aBlock[4] = sub_1BA56DB30;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BA56DAFC;
  aBlock[3] = &block_descriptor_84;
  v34 = _Block_copy(aBlock);
  v35 = v44;
  swift_retain();
  swift_release();
  v1 = objc_msgSend(v31, sel_imageWithActions_, v34);
  _Block_release(v34);
  LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v34 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v36 = objc_msgSend(v35, sel_subviews);
    v28 = sub_1BB872DB4();

    if (!(v28 >> 62))
    {
      v37 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v37)
        goto LABEL_31;
LABEL_42:

      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      return (uint64_t)v1;
    }
  }
  swift_bridgeObjectRetain();
  v37 = sub_1BB873F30();
  swift_bridgeObjectRelease();
  if (!v37)
    goto LABEL_42;
LABEL_31:
  if (v37 >= 1)
  {
    for (i = 0; i != v37; ++i)
    {
      if ((v28 & 0xC000000000000001) != 0)
        v39 = (id)MEMORY[0x1BCCE4630](i, v28);
      else
        v39 = *(id *)(v28 + 8 * i + 32);
      v40 = v39;
      if (v5[2])
      {
        v41 = sub_1BB4CF560((uint64_t)v39);
        if ((v42 & 1) != 0)
          objc_msgSend(v40, sel_setHidden_, *(unsigned __int8 *)(v5[7] + v41));
      }

    }
    goto LABEL_42;
  }
  __break(1u);
LABEL_45:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DebugFormatSnapshotView()
{
  return objc_opt_self();
}

unint64_t sub_1BB58BA60()
{
  unint64_t result;

  result = qword_1EF2C7800;
  if (!qword_1EF2C7800)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF2C7800);
  }
  return result;
}

uint64_t sub_1BB58BAB4(uint64_t a1)
{
  uint64_t v2;

  sub_1BB58BAF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BB58BAF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C7808)
  {
    sub_1BB58BA60();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C7808);
  }
}

uint64_t sub_1BB58BB44(unint64_t a1, void *a2, char a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;

  LOBYTE(v3) = a3;
  v12 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1BB873F30())
  {
    v6 = 4;
    v10 = v3 & 1;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCE4630](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      v3 = v7;
      v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      if (objc_msgSend(v7, sel_isHidden))
      {

      }
      else
      {
        objc_allocWithZone((Class)type metadata accessor for DebugFormatSnapshotView());
        sub_1BB58AEE8(v3, a2, v10);
        MEMORY[0x1BCCE36AC]();
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();
      }
      ++v6;
      if (v8 == v5)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BB58BCF0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BB58BD14()
{
  return swift_deallocObject();
}

__n128 FeedPersonalizationClusteringRules.init(minClusterSize:maxClusterSize:bundleArticleQuotas:maxInaccessibleHeadlines:maxEvergreenHeadlines:maxPublisherOccurrences:topicDiversity:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, char a12, __int128 *a13)
{
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 result;
  __n128 v25;
  __int128 v26;

  v25 = (__n128)a13[1];
  v26 = *a13;
  v18 = *((_QWORD *)a13 + 4);
  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  v19 = (int *)type metadata accessor for FeedPersonalizationClusteringRules();
  sub_1BB58BE20(a5, a9 + v19[6]);
  v20 = a9 + v19[7];
  *(_QWORD *)v20 = a6;
  *(_BYTE *)(v20 + 8) = a7 & 1;
  v21 = a9 + v19[8];
  *(_QWORD *)v21 = a8;
  *(_BYTE *)(v21 + 8) = a10 & 1;
  v22 = a9 + v19[9];
  *(_QWORD *)v22 = a11;
  *(_BYTE *)(v22 + 8) = a12 & 1;
  v23 = a9 + v19[10];
  result = v25;
  *(_OWORD *)v23 = v26;
  *(__n128 *)(v23 + 16) = v25;
  *(_QWORD *)(v23 + 32) = v18;
  return result;
}

uint64_t sub_1BB58BE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA7677C4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FeedPersonalizationClusteringRules.minClusterSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FeedPersonalizationClusteringRules.minClusterSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*FeedPersonalizationClusteringRules.minClusterSize.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FeedPersonalizationClusteringRules.maxClusterSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t FeedPersonalizationClusteringRules.maxClusterSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*FeedPersonalizationClusteringRules.maxClusterSize.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FeedPersonalizationClusteringRules.bundleArticleQuotas.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeedPersonalizationClusteringRules();
  return sub_1BA4C2DD8(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))sub_1BA7677C4);
}

uint64_t FeedPersonalizationClusteringRules.maxInaccessibleHeadlines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FeedPersonalizationClusteringRules() + 28));
}

uint64_t FeedPersonalizationClusteringRules.maxEvergreenHeadlines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FeedPersonalizationClusteringRules() + 32));
}

uint64_t FeedPersonalizationClusteringRules.maxPublisherOccurrences.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FeedPersonalizationClusteringRules() + 36));
}

uint64_t FeedPersonalizationClusteringRules.topicDiversity.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for FeedPersonalizationClusteringRules() + 40));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  return sub_1BAF0CA80(v4, v5, v6, v7, v8);
}

double sub_1BB58BFB4()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v0 = (int *)type metadata accessor for FeedPersonalizationClusteringRules();
  __swift_allocate_value_buffer((uint64_t)v0, qword_1EF2C7818);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)qword_1EF2C7818);
  v2 = v1 + v0[6];
  v3 = type metadata accessor for FeedGroupBundleArticleQuotas();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v4 = v1 + v0[7];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v1 + v0[8];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v1 + v0[9];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1 + v0[10];
  result = 0.0;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)(v7 + 32) = 1;
  return result;
}

uint64_t static FeedPersonalizationClusteringRules.empty.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF2A7340 != -1)
    swift_once();
  v2 = type metadata accessor for FeedPersonalizationClusteringRules();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF2C7818);
  return sub_1BA4C2DD8(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for FeedPersonalizationClusteringRules);
}

_QWORD *initializeBufferWithCopyOfBuffer for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char *v34;
  char *v35;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a3[6];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = type metadata accessor for FeedGroupBundleArticleQuotas();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      sub_1BA7677C4(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = v9[1];
      *v8 = *v9;
      v8[1] = v14;
      v15 = *(int *)(v10 + 24);
      v34 = (char *)v9 + v15;
      v35 = (char *)v8 + v15;
      v16 = sub_1BB86D078();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v35, v34, v16);
      *(_QWORD *)((char *)v8 + *(int *)(v10 + 28)) = *(_QWORD *)((char *)v9 + *(int *)(v10 + 28));
      v18 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56);
      swift_bridgeObjectRetain();
      v18(v8, 0, 1, v10);
    }
    v19 = a3[7];
    v20 = a3[8];
    v21 = (char *)v4 + v19;
    v22 = (uint64_t)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = *(_BYTE *)(v22 + 8);
    v23 = (char *)v4 + v20;
    v24 = (uint64_t)a2 + v20;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = *(_BYTE *)(v24 + 8);
    v25 = a3[9];
    v26 = a3[10];
    v27 = (char *)v4 + v25;
    v28 = (uint64_t)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    v29 = (char *)v4 + v26;
    v30 = (uint64_t)a2 + v26;
    v31 = *(_QWORD *)(v30 + 32);
    if (v31 == 1)
    {
      v32 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v32;
      *((_QWORD *)v29 + 4) = *(_QWORD *)(v30 + 32);
    }
    else
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = *(_BYTE *)(v30 + 8);
      *((_QWORD *)v29 + 2) = *(_QWORD *)(v30 + 16);
      v29[24] = *(_BYTE *)(v30 + 24);
      *((_QWORD *)v29 + 4) = v31;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for FeedGroupBundleArticleQuotas();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_1BB86D078();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  result = *(_QWORD *)(a1 + *(int *)(a2 + 40) + 32);
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char *v32;
  char *v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[6];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = type metadata accessor for FeedGroupBundleArticleQuotas();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1BA7677C4(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = *(int *)(v9 + 24);
    v32 = (char *)v8 + v13;
    v33 = (char *)v7 + v13;
    v14 = sub_1BB86D078();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v33, v32, v14);
    *(_QWORD *)((char *)v7 + *(int *)(v9 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v9 + 28));
    v16 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56);
    swift_bridgeObjectRetain();
    v16(v7, 0, 1, v9);
  }
  v17 = a3[7];
  v18 = a3[8];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[9];
  v24 = a3[10];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  v29 = *(_QWORD *)(v28 + 32);
  if (v29 == 1)
  {
    v30 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v30;
    *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  }
  else
  {
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
    *(_BYTE *)(v27 + 24) = *(_BYTE *)(v28 + 24);
    *(_QWORD *)(v27 + 32) = v29;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  v11 = type metadata accessor for FeedGroupBundleArticleQuotas();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v16 = *(int *)(v11 + 24);
      v51 = (char *)v10 + v16;
      v52 = (char *)v9 + v16;
      v17 = sub_1BB86D078();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v52, v51, v17);
      *(_QWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_QWORD *)((char *)v10 + *(int *)(v11 + 28));
      v19 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v19(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_1BB58C84C((uint64_t)v9);
LABEL_6:
    sub_1BA7677C4(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = *(int *)(v11 + 24);
  v48 = (char *)v9 + v47;
  v49 = (char *)v10 + v47;
  v50 = sub_1BB86D078();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  *(_QWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_QWORD *)((char *)v10 + *(int *)(v11 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = *v23;
  *(_BYTE *)(v22 + 8) = *((_BYTE *)v23 + 8);
  *(_QWORD *)v22 = v24;
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = *v27;
  *(_BYTE *)(v26 + 8) = *((_BYTE *)v27 + 8);
  *(_QWORD *)v26 = v28;
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (uint64_t *)((char *)a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  *(_QWORD *)v30 = v32;
  v33 = a3[10];
  v34 = a1 + v33;
  v35 = (__int128 *)((char *)a2 + v33);
  v36 = *(_QWORD *)(a1 + v33 + 32);
  v37 = *((_QWORD *)v35 + 4);
  if (v36 == 1)
  {
    if (v37 == 1)
    {
      v38 = *v35;
      v39 = v35[1];
      *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
      *(_OWORD *)v34 = v38;
      *(_OWORD *)(v34 + 16) = v39;
    }
    else
    {
      v42 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
      *(_QWORD *)v34 = v42;
      v43 = *((_QWORD *)v35 + 2);
      *(_BYTE *)(v34 + 24) = *((_BYTE *)v35 + 24);
      *(_QWORD *)(v34 + 16) = v43;
      *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
      swift_bridgeObjectRetain();
    }
  }
  else if (v37 == 1)
  {
    sub_1BAF10C4C(v34);
    v40 = *((_QWORD *)v35 + 4);
    v41 = v35[1];
    *(_OWORD *)v34 = *v35;
    *(_OWORD *)(v34 + 16) = v41;
    *(_QWORD *)(v34 + 32) = v40;
  }
  else
  {
    v44 = *(_QWORD *)v35;
    *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
    *(_QWORD *)v34 = v44;
    v45 = *((_QWORD *)v35 + 2);
    *(_BYTE *)(v34 + 24) = *((_BYTE *)v35 + 24);
    *(_QWORD *)(v34 + 16) = v45;
    *(_QWORD *)(v34 + 32) = *((_QWORD *)v35 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1BB58C84C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeedGroupBundleArticleQuotas();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[6];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for FeedGroupBundleArticleQuotas();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1BA7677C4(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v12 = *(int *)(v9 + 24);
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v15 = sub_1BB86D078();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    *(_QWORD *)((char *)v7 + *(int *)(v9 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v9 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a1 + v17;
  v21 = a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a3[9];
  v23 = a3[10];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  return a1;
}

uint64_t assignWithTake for FeedPersonalizationClusteringRules(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[6];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = type metadata accessor for FeedGroupBundleArticleQuotas();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v14 = *(int *)(v9 + 24);
      v15 = (char *)v7 + v14;
      v16 = (char *)v8 + v14;
      v17 = sub_1BB86D078();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_QWORD *)((char *)v7 + *(int *)(v9 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v9 + 28));
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1BB58C84C((uint64_t)v7);
LABEL_6:
    sub_1BA7677C4(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v34 = *(int *)(v9 + 24);
  v35 = (char *)v7 + v34;
  v36 = (char *)v8 + v34;
  v37 = sub_1BB86D078();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  *(_QWORD *)((char *)v7 + *(int *)(v9 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v9 + 28));
  swift_bridgeObjectRelease();
LABEL_7:
  v19 = a3[7];
  v20 = a3[8];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = a3[9];
  v26 = a3[10];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a1 + v26;
  v30 = a2 + v26;
  if (*(_QWORD *)(a1 + v26 + 32) != 1)
  {
    v31 = *(_QWORD *)(v30 + 32);
    if (v31 != 1)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      *(_BYTE *)(v29 + 24) = *(_BYTE *)(v30 + 24);
      *(_QWORD *)(v29 + 32) = v31;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BAF10C4C(a1 + v26);
  }
  v32 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v32;
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
  return a1;
}

uint64_t sub_1BB58CC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_1BA7677C4(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 32);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

void sub_1BB58CCD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BA7677C4(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 40) + 32) = (a2 + 1);
}

_QWORD *sub_1BB58CD54(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v2 = a1[1];
  if (v2)
  {
    v3 = *a1;
    v14 = *((_OWORD *)a1 + 1);
    v4 = (_QWORD *)v1[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_1BB38ED20(0, v4[2] + 1, 1, v4);
    v6 = v4[2];
    v5 = v4[3];
    if (v6 >= v5 >> 1)
      v4 = sub_1BB38ED20((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
    v4[2] = v6 + 1;
    v7 = &v4[4 * v6];
    v7[4] = v3;
    v7[5] = v2;
    *((_OWORD *)v7 + 3) = v14;
    v9 = v1[2];
    v8 = v1[3];
    v11 = v1[4];
    v10 = v1[5];
    v12 = v1[7];
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = v9;
    v1[3] = v8;
    v1[4] = v11;
    v1[5] = v10;
    v1[6] = v4;
    v1[7] = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
  }
  return v1;
}

uint64_t sub_1BB58CE78()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 24))
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  else
    v1 = 0;
  swift_bridgeObjectRetain();
  return v1;
}

double FormatProgressKind.value(contextLayoutOptions:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v5 = *(unsigned __int8 *)(v2 + 56);
  if (v5 >> 6)
  {
    if (v5 >> 6 == 1)
    {
      FormatProgressCircleOptions.value(contextLayoutOptions:)(a1, (uint64_t)&v12);
      if (!v3)
      {
        v7 = v13;
        v8 = v15;
        v9 = v16 | 0x40;
        *(_QWORD *)a2 = v12;
        *(_QWORD *)(a2 + 8) = v7;
        result = *(double *)&v14;
        *(_OWORD *)(a2 + 16) = v14;
        *(_QWORD *)(a2 + 32) = v8;
        *(_BYTE *)(a2 + 40) = v9;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_BYTE *)(a2 + 40) = 0x80;
    }
  }
  else
  {
    FormatProgressPieOptions.value(contextLayoutOptions:)(a1, (uint64_t)&v12);
    if (!v3)
    {
      v10 = v13;
      v11 = v15;
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v10;
      result = *(double *)&v14;
      *(_OWORD *)(a2 + 16) = v14;
      *(_QWORD *)(a2 + 32) = v11;
      *(_BYTE *)(a2 + 40) = 0;
    }
  }
  return result;
}

uint64_t sub_1BB58CFC4()
{
  sub_1BB58DEA8();
  return sub_1BB874710();
}

uint64_t sub_1BB58CFEC()
{
  sub_1BB58DEA8();
  return sub_1BB87471C();
}

uint64_t sub_1BB58D014()
{
  sub_1BB58DE20();
  return sub_1BB874710();
}

uint64_t sub_1BB58D03C()
{
  sub_1BB58DE20();
  return sub_1BB87471C();
}

uint64_t sub_1BB58D064()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 6646128;
  if (*v0 != 1)
    v1 = 0x656C63726963;
  if (*v0)
    return v1;
  else
    return 7496034;
}

uint64_t sub_1BB58D0AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB58E9D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB58D0D0()
{
  sub_1BB58DEEC();
  return sub_1BB874710();
}

uint64_t sub_1BB58D0F8()
{
  sub_1BB58DEEC();
  return sub_1BB87471C();
}

uint64_t sub_1BB58D120()
{
  sub_1BB58DE64();
  return sub_1BB874710();
}

uint64_t sub_1BB58D148()
{
  sub_1BB58DE64();
  return sub_1BB87471C();
}

uint64_t FormatProgressKind.Resolved.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1BA4CDF6C(0, &qword_1EF2C7830, (uint64_t (*)(void))sub_1BB58DE20, (uint64_t)&type metadata for FormatProgressKind.Resolved.CircleCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  MEMORY[0x1E0C80A78](v4);
  v30 = (char *)&v25 - v5;
  sub_1BA4CDF6C(0, &qword_1EF2C7840, (uint64_t (*)(void))sub_1BB58DE64, (uint64_t)&type metadata for FormatProgressKind.Resolved.PieCodingKeys, v3);
  v29 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v28 = (char *)&v25 - v8;
  sub_1BA4CDF6C(0, &qword_1EF2C7850, (uint64_t (*)(void))sub_1BB58DEA8, (uint64_t)&type metadata for FormatProgressKind.Resolved.BarCodingKeys, v3);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - v10;
  sub_1BA4CDF6C(0, &qword_1EF2C7860, (uint64_t (*)(void))sub_1BB58DEEC, (uint64_t)&type metadata for FormatProgressKind.Resolved.CodingKeys, v3);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v25 - v13;
  v15 = v1[1];
  v33 = *v1;
  v34 = v15;
  v16 = v1[3];
  v35 = v1[2];
  v36 = v16;
  v37 = v1[4];
  v17 = *((unsigned __int8 *)v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB58DEEC();
  sub_1BB8746C8();
  if (!(v17 >> 6))
  {
    LOBYTE(v40) = 1;
    sub_1BB58DE64();
    v21 = v28;
    v19 = v39;
    sub_1BB874110();
    v40 = v33;
    v41 = v34 & 1;
    v42 = v35;
    v43 = v36;
    v44 = v37;
    sub_1BB58DF74();
    v22 = v29;
    sub_1BB8741AC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v19);
  }
  if (v17 >> 6 == 1)
  {
    LOBYTE(v40) = 2;
    sub_1BB58DE20();
    v18 = v30;
    v19 = v39;
    sub_1BB874110();
    v40 = v33;
    v41 = v34 & 1;
    v42 = v35;
    v43 = v36;
    v44 = v37;
    v45 = v17 & 0x3F;
    sub_1BB58DF30();
    v20 = v32;
    sub_1BB8741AC();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v19);
  }
  LOBYTE(v40) = 0;
  sub_1BB58DEA8();
  v24 = v39;
  sub_1BB874110();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v24);
}

uint64_t FormatProgressKind.Resolved.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unsigned __int8 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;

  v44 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BA4CDF6C(0, &qword_1EF2C7880, (uint64_t (*)(void))sub_1BB58DE20, (uint64_t)&type metadata for FormatProgressKind.Resolved.CircleCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v41 = v4;
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v37 - v5;
  sub_1BA4CDF6C(0, &qword_1EF2C7888, (uint64_t (*)(void))sub_1BB58DE64, (uint64_t)&type metadata for FormatProgressKind.Resolved.PieCodingKeys, v3);
  v40 = v6;
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v45 = (char *)&v37 - v7;
  sub_1BA4CDF6C(0, &qword_1EF2C7890, (uint64_t (*)(void))sub_1BB58DEA8, (uint64_t)&type metadata for FormatProgressKind.Resolved.BarCodingKeys, v3);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v37 - v9;
  sub_1BA4CDF6C(0, &qword_1EF2C7898, (uint64_t (*)(void))sub_1BB58DEEC, (uint64_t)&type metadata for FormatProgressKind.Resolved.CodingKeys, v3);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v37 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB58DEEC();
  v16 = v52;
  sub_1BB87468C();
  if (v16)
    goto LABEL_7;
  v17 = v45;
  v18 = v46;
  v37 = v13;
  v52 = a1;
  v19 = sub_1BB8740EC();
  v20 = v15;
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v24 = sub_1BB873D68();
    swift_allocError();
    v26 = v25;
    sub_1BA909FB4();
    *v26 = &type metadata for FormatProgressKind.Resolved;
    sub_1BB874008();
    sub_1BB873D38();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC450], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v12);
    a1 = v52;
LABEL_7:
    v27 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if (*(_BYTE *)(v19 + 32))
  {
    if (*(_BYTE *)(v19 + 32) == 1)
    {
      LOBYTE(v47) = 1;
      sub_1BB58DE64();
      v21 = v17;
      sub_1BB873FFC();
      sub_1BB58DFFC();
      v22 = v40;
      sub_1BB8740D4();
      v23 = v37;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v12);
      v31 = 0;
      v32 = v47;
      v33 = v48;
      v34 = v49;
      v35 = v50;
    }
    else
    {
      LOBYTE(v47) = 2;
      sub_1BB58DE20();
      sub_1BB873FFC();
      sub_1BB58DFB8();
      v29 = v41;
      sub_1BB8740D4();
      v30 = v37;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v29);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v12);
      v32 = v47;
      v33 = v48;
      v34 = v49;
      v35 = v50;
      v31 = v51 | 0x40;
    }
  }
  else
  {
    LOBYTE(v47) = 0;
    sub_1BB58DEA8();
    sub_1BB873FFC();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v12);
    v32 = 0;
    v33 = 0;
    v35 = 0;
    v34 = 0uLL;
    v31 = 0x80;
  }
  v36 = v44;
  *v44 = v32;
  v36[1] = v33;
  *((_OWORD *)v36 + 1) = v34;
  v36[4] = v35;
  *((_BYTE *)v36 + 40) = v31;
  v27 = (uint64_t)v52;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t sub_1BB58DA54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FormatProgressKind.Resolved.init(from:)(a1, a2);
}

uint64_t sub_1BB58DA68(_QWORD *a1)
{
  return FormatProgressKind.Resolved.encode(to:)(a1);
}

uint64_t sub_1BB58DA80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatProgressKind.init(from:)(a1, a2);
}

uint64_t sub_1BB58DA94(_QWORD *a1)
{
  return FormatProgressKind.encode(to:)(a1);
}

uint64_t _s8NewsFeed18FormatProgressKindO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD v61[7];
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  LODWORD(v9) = *(unsigned __int8 *)(a1 + 56);
  v11 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(unsigned __int8 *)(a2 + 56);
  v61[0] = *(_QWORD *)a1;
  v61[1] = v2;
  v61[2] = v5;
  v61[3] = v4;
  v61[4] = v7;
  v61[5] = v6;
  v18 = v8;
  v61[6] = v8;
  v62 = v9;
  v63 = v11;
  v64 = v10;
  v65 = v13;
  v66 = v12;
  v67 = v15;
  v68 = v14;
  v69 = v16;
  v70 = v17;
  if (!(v9 >> 6))
  {
    if (v17 < 0x40)
    {
      v53 = v3;
      v54 = v2;
      v55 = v5;
      v56 = v4 & 1;
      v57 = v7;
      v58 = v6;
      v38 = v8;
      v59 = v8;
      v45 = v11;
      v46 = v10;
      v47 = v13;
      v48 = v12 & 1;
      v49 = v15;
      v50 = v14;
      v51 = v16;
      v41 = v5;
      v42 = v4;
      v43 = v7;
      v44 = v6;
      v21 = v2;
      v39 = v3;
      v40 = v2;
      v37 = v9;
      v9 = v3;
      sub_1BAEAF798(v11, v10, v13, v12, v15, v14, v16, v17);
      v22 = v9;
      LOBYTE(v9) = v37;
      sub_1BAEAF798(v22, v21, v41, v42, v43, v44, v38, v37);
      sub_1BAEAF798(v11, v10, v13, v12, v15, v14, v16, v17);
      sub_1BAEAF798(v39, v40, v41, v42, v43, v44, v38, v37);
      v20 = _s8NewsFeed24FormatProgressPieOptionsV2eeoiySbAC_ACtFZ_0((uint64_t)&v53, (uint64_t)&v45);
      goto LABEL_7;
    }
LABEL_12:
    v24 = v11;
    v25 = v10;
    v26 = v5;
    v27 = v13;
    v28 = v4;
    v29 = v12;
    v30 = v7;
    v31 = v15;
    v32 = v6;
    v33 = v14;
    v34 = v2;
    v35 = v3;
    sub_1BAEAF798(v24, v25, v27, v29, v31, v33, v16, v17);
    sub_1BAEAF798(v35, v34, v26, v28, v30, v32, v18, v9);
    sub_1BB58EB04((uint64_t)v61);
    v23 = 0;
    return v23 & 1;
  }
  if (v9 >> 6 != 1)
  {
    if ((v17 & 0xC0) == 0x80 && !(v10 | v11 | v13 | v12 | v15 | v14 | v16) && v17 == 128)
    {
      sub_1BB58EB04((uint64_t)v61);
      v23 = 1;
      return v23 & 1;
    }
    goto LABEL_12;
  }
  if ((v17 & 0xC0) != 0x40)
    goto LABEL_12;
  v53 = v3;
  v54 = v2;
  v55 = v5;
  v40 = v2;
  v41 = v5;
  v56 = v4 & 1;
  v57 = v7;
  v58 = v6;
  v38 = v8;
  v59 = v8;
  v60 = v9 & 0x3F;
  v45 = v11;
  v46 = v10;
  v47 = v13;
  v48 = v12 & 1;
  v49 = v15;
  v50 = v14;
  v51 = v16;
  v52 = v17 & 0x3F;
  v42 = v4;
  v43 = v7;
  v44 = v6;
  v19 = v3;
  v39 = v3;
  sub_1BAEAF798(v11, v10, v13, v12, v15, v14, v16, v17);
  sub_1BAEAF798(v19, v40, v41, v42, v43, v44, v38, v9);
  sub_1BAEAF798(v11, v10, v13, v12, v15, v14, v16, v17);
  sub_1BAEAF798(v39, v40, v41, v42, v43, v44, v38, v9);
  v20 = _s8NewsFeed27FormatProgressCircleOptionsV2eeoiySbAC_ACtFZ_0((uint64_t)&v53, (uint64_t)&v45);
LABEL_7:
  v23 = v20;
  sub_1BB58EB04((uint64_t)v61);
  sub_1BAC68B70(v11, v10, v13, v12, v15, v14, v16, v17);
  sub_1BAC68B70(v39, v40, v41, v42, v43, v44, v38, v9);
  return v23 & 1;
}

unint64_t sub_1BB58DE20()
{
  unint64_t result;

  result = qword_1EF2C7838;
  if (!qword_1EF2C7838)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92935C, &type metadata for FormatProgressKind.Resolved.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7838);
  }
  return result;
}

unint64_t sub_1BB58DE64()
{
  unint64_t result;

  result = qword_1EF2C7848;
  if (!qword_1EF2C7848)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92930C, &type metadata for FormatProgressKind.Resolved.PieCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7848);
  }
  return result;
}

unint64_t sub_1BB58DEA8()
{
  unint64_t result;

  result = qword_1EF2C7858;
  if (!qword_1EF2C7858)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9292BC, &type metadata for FormatProgressKind.Resolved.BarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7858);
  }
  return result;
}

unint64_t sub_1BB58DEEC()
{
  unint64_t result;

  result = qword_1EF2C7868;
  if (!qword_1EF2C7868)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92926C, &type metadata for FormatProgressKind.Resolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7868);
  }
  return result;
}

unint64_t sub_1BB58DF30()
{
  unint64_t result;

  result = qword_1EF2C7870;
  if (!qword_1EF2C7870)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressCircleOptionsResolved, &type metadata for FormatProgressCircleOptionsResolved);
    atomic_store(result, (unint64_t *)&qword_1EF2C7870);
  }
  return result;
}

unint64_t sub_1BB58DF74()
{
  unint64_t result;

  result = qword_1EF2C7878;
  if (!qword_1EF2C7878)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptionsResolved, &type metadata for FormatProgressPieOptionsResolved);
    atomic_store(result, (unint64_t *)&qword_1EF2C7878);
  }
  return result;
}

unint64_t sub_1BB58DFB8()
{
  unint64_t result;

  result = qword_1EF2C78A0;
  if (!qword_1EF2C78A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressCircleOptionsResolved, &type metadata for FormatProgressCircleOptionsResolved);
    atomic_store(result, (unint64_t *)&qword_1EF2C78A0);
  }
  return result;
}

unint64_t sub_1BB58DFFC()
{
  unint64_t result;

  result = qword_1EF2C78A8;
  if (!qword_1EF2C78A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressPieOptionsResolved, &type metadata for FormatProgressPieOptionsResolved);
    atomic_store(result, (unint64_t *)&qword_1EF2C78A8);
  }
  return result;
}

unint64_t sub_1BB58E040(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB58E064();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB58E064()
{
  unint64_t result;

  result = qword_1EF2C78B0;
  if (!qword_1EF2C78B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressKind, &type metadata for FormatProgressKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C78B0);
  }
  return result;
}

unint64_t sub_1BB58E0A8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAEEE0E8();
  a1[2] = sub_1BAEEDF1C();
  result = sub_1BB58E0DC();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB58E0DC()
{
  unint64_t result;

  result = qword_1EF2C78B8;
  if (!qword_1EF2C78B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatProgressKind, &type metadata for FormatProgressKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C78B8);
  }
  return result;
}

uint64_t destroy for FormatProgressKind(uint64_t a1)
{
  return sub_1BAC68B70(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for FormatProgressKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_1BAEAF798(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for FormatProgressKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_1BAEAF798(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  sub_1BAC68B70(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for FormatProgressKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  sub_1BAC68B70(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatProgressKind(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatProgressKind(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 2 * -a2;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 56) = 0;
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BB58E37C(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 56);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1BB58E39C(uint64_t result)
{
  *(_BYTE *)(result + 56) &= 0x3Fu;
  return result;
}

uint64_t sub_1BB58E3AC(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 56) & 3 | ((_BYTE)a2 << 6);
    *(_QWORD *)(result + 24) &= 1uLL;
    *(_BYTE *)(result + 56) = v2;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_BYTE *)(result + 56) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressKind()
{
  return &type metadata for FormatProgressKind;
}

uint64_t getEnumTagSinglePayload for FormatProgressKind.Resolved(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatProgressKind.Resolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 40) = 0;
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BB58E4B0(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1BB58E4D0(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x3Fu;
  return result;
}

uint64_t sub_1BB58E4E0(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 40) & 3 | ((_BYTE)a2 << 6);
    *(_QWORD *)(result + 8) &= 1uLL;
    *(_BYTE *)(result + 40) = v2;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_BYTE *)(result + 40) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressKind.Resolved()
{
  return &type metadata for FormatProgressKind.Resolved;
}

uint64_t storeEnumTagSinglePayload for FormatProgressKind.Resolved.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB58E580 + 4 * byte_1BB928E65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB58E5B4 + 4 * byte_1BB928E60[v4]))();
}

uint64_t sub_1BB58E5B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58E5BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB58E5C4);
  return result;
}

uint64_t sub_1BB58E5D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB58E5D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB58E5DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58E5E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressKind.Resolved.CodingKeys()
{
  return &type metadata for FormatProgressKind.Resolved.CodingKeys;
}

ValueMetadata *type metadata accessor for FormatProgressKind.Resolved.BarCodingKeys()
{
  return &type metadata for FormatProgressKind.Resolved.BarCodingKeys;
}

ValueMetadata *type metadata accessor for FormatProgressKind.Resolved.PieCodingKeys()
{
  return &type metadata for FormatProgressKind.Resolved.PieCodingKeys;
}

uint64_t _s8NewsFeed18FormatProgressKindO8ResolvedO13PieCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB58E664 + 4 * byte_1BB928E6A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB58E684 + 4 * byte_1BB928E6F[v4]))();
}

_BYTE *sub_1BB58E664(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB58E684(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB58E68C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB58E694(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB58E69C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB58E6A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatProgressKind.Resolved.CircleCodingKeys()
{
  return &type metadata for FormatProgressKind.Resolved.CircleCodingKeys;
}

unint64_t sub_1BB58E6C4()
{
  unint64_t result;

  result = qword_1EF2C78C0;
  if (!qword_1EF2C78C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929084, &type metadata for FormatProgressKind.Resolved.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78C0);
  }
  return result;
}

unint64_t sub_1BB58E70C()
{
  unint64_t result;

  result = qword_1EF2C78C8;
  if (!qword_1EF2C78C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92913C, &type metadata for FormatProgressKind.Resolved.PieCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78C8);
  }
  return result;
}

unint64_t sub_1BB58E754()
{
  unint64_t result;

  result = qword_1EF2C78D0;
  if (!qword_1EF2C78D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929244, &type metadata for FormatProgressKind.Resolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78D0);
  }
  return result;
}

unint64_t sub_1BB58E79C()
{
  unint64_t result;

  result = qword_1EF2C78D8;
  if (!qword_1EF2C78D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9291B4, &type metadata for FormatProgressKind.Resolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78D8);
  }
  return result;
}

unint64_t sub_1BB58E7E4()
{
  unint64_t result;

  result = qword_1EF2C78E0;
  if (!qword_1EF2C78E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9291DC, &type metadata for FormatProgressKind.Resolved.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78E0);
  }
  return result;
}

unint64_t sub_1BB58E82C()
{
  unint64_t result;

  result = qword_1EF2C78E8;
  if (!qword_1EF2C78E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929164, &type metadata for FormatProgressKind.Resolved.BarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78E8);
  }
  return result;
}

unint64_t sub_1BB58E874()
{
  unint64_t result;

  result = qword_1EF2C78F0;
  if (!qword_1EF2C78F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92918C, &type metadata for FormatProgressKind.Resolved.BarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78F0);
  }
  return result;
}

unint64_t sub_1BB58E8BC()
{
  unint64_t result;

  result = qword_1EF2C78F8;
  if (!qword_1EF2C78F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9290AC, &type metadata for FormatProgressKind.Resolved.PieCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C78F8);
  }
  return result;
}

unint64_t sub_1BB58E904()
{
  unint64_t result;

  result = qword_1EF2C7900;
  if (!qword_1EF2C7900)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9290D4, &type metadata for FormatProgressKind.Resolved.PieCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7900);
  }
  return result;
}

unint64_t sub_1BB58E94C()
{
  unint64_t result;

  result = qword_1EF2C7908;
  if (!qword_1EF2C7908)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB928FF4, &type metadata for FormatProgressKind.Resolved.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7908);
  }
  return result;
}

unint64_t sub_1BB58E994()
{
  unint64_t result;

  result = qword_1EF2C7910;
  if (!qword_1EF2C7910)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92901C, &type metadata for FormatProgressKind.Resolved.CircleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7910);
  }
  return result;
}

uint64_t sub_1BB58E9D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7496034 && a2 == 0xE300000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6646128 && a2 == 0xE300000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C63726963 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BB58EB04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_BYTE *)(a1 + 120);
  sub_1BAC68B70(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  sub_1BAC68B70(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t FormatContentPoolPlaceholder.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatContentPoolPlaceholder.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.itemOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.itemSelectors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.itemAuxiliaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.selectors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentPoolPlaceholder.init(identifier:items:itemOptions:itemSelectors:itemAuxiliaries:options:selectors:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t FormatContentPoolSlotPlaceholder.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatContentPoolSlotPlaceholder.placeholders.getter()
{
  return swift_bridgeObjectRetain();
}

NewsFeed::FormatContentPoolSlotPlaceholder __swiftcall FormatContentPoolSlotPlaceholder.init(identifier:placeholders:)(Swift::String identifier, Swift::OpaquePointer placeholders)
{
  uint64_t v2;
  NewsFeed::FormatContentPoolSlotPlaceholder result;

  *(Swift::String *)v2 = identifier;
  *(Swift::OpaquePointer *)(v2 + 16) = placeholders;
  result.identifier = identifier;
  result.placeholders = placeholders;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentPoolPlaceholder()
{
  return &type metadata for FormatContentPoolPlaceholder;
}

ValueMetadata *type metadata accessor for FormatContentPoolSlotPlaceholder()
{
  return &type metadata for FormatContentPoolSlotPlaceholder;
}

ValueMetadata *type metadata accessor for FormatDerivedDataStateMachineReference()
{
  return &type metadata for FormatDerivedDataStateMachineReference;
}

uint64_t sub_1BB58EC74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  sub_1BB58F150(0, &qword_1EF2C7928, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB58F10C();
  sub_1BB8746C8();
  v14 = 0;
  sub_1BB87417C();
  if (!v4)
  {
    v12[1] = v12[0];
    v13 = 1;
    sub_1BA6D249C();
    sub_1BA585B78((unint64_t *)&qword_1ED39DA10, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1BB58EDDC()
{
  _BYTE *v0;

  if (*v0)
    return 0x736574617473;
  else
    return 1701667182;
}

uint64_t sub_1BB58EE0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB58F350(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB58EE30()
{
  sub_1BB58F10C();
  return sub_1BB874710();
}

uint64_t sub_1BB58EE58()
{
  sub_1BB58F10C();
  return sub_1BB87471C();
}

uint64_t sub_1BB58EE80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1BB58EF28(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1BB58EEAC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BB58EC74(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1BB58EEC8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_1BB874398() & 1) != 0)
    return sub_1BA6A45BC(v2, v3);
  else
    return 0;
}

uint64_t sub_1BB58EF28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[32];

  sub_1BB58F150(0, &qword_1EF2C7918, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v10[-v6];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB58F10C();
  sub_1BB87468C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10[31] = 0;
    v8 = sub_1BB874098();
    sub_1BA6D249C();
    v10[15] = 1;
    sub_1BA585B78((unint64_t *)&qword_1ED3B95F0, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    sub_1BB8740D4();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1BB58F10C()
{
  unint64_t result;

  result = qword_1EF2C7920;
  if (!qword_1EF2C7920)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9295F4, &type metadata for FormatDerivedDataStateMachineReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7920);
  }
  return result;
}

void sub_1BB58F150(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB58F10C();
    v7 = a3(a1, &type metadata for FormatDerivedDataStateMachineReference.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for FormatDerivedDataStateMachineReference.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB58F1F8 + 4 * byte_1BB929485[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB58F22C + 4 * asc_1BB929480[v4]))();
}

uint64_t sub_1BB58F22C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58F234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB58F23CLL);
  return result;
}

uint64_t sub_1BB58F248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB58F250);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB58F254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB58F25C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatDerivedDataStateMachineReference.CodingKeys()
{
  return &type metadata for FormatDerivedDataStateMachineReference.CodingKeys;
}

unint64_t sub_1BB58F27C()
{
  unint64_t result;

  result = qword_1EF2C7930;
  if (!qword_1EF2C7930)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9295CC, &type metadata for FormatDerivedDataStateMachineReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7930);
  }
  return result;
}

unint64_t sub_1BB58F2C4()
{
  unint64_t result;

  result = qword_1EF2C7938;
  if (!qword_1EF2C7938)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92953C, &type metadata for FormatDerivedDataStateMachineReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7938);
  }
  return result;
}

unint64_t sub_1BB58F30C()
{
  unint64_t result;

  result = qword_1EF2C7940;
  if (!qword_1EF2C7940)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929564, &type metadata for FormatDerivedDataStateMachineReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7940);
  }
  return result;
}

uint64_t sub_1BB58F350(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void PluginModel.traits.getter(_QWORD *a1@<X8>)
{
  *a1 = 1048577;
}

void PluginModel.layoutDirection.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t PluginModel.debugSourceName.getter()
{
  return 0;
}

uint64_t PluginModel.debugTitle.getter()
{
  return 0;
}

uint64_t PluginModel.debugAssetHandle.getter()
{
  return 0;
}

uint64_t PluginModel.debugScoreProfile.getter()
{
  return 0;
}

uint64_t PluginModel.feedItem.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for FeedItem(0);
  swift_storeEnumTagMultiPayload();
  return swift_retain();
}

uint64_t PluginModel.feedContextIdentifier.getter()
{
  sub_1BB86F5C8();
  sub_1BA6F0168();
  return sub_1BB873B58();
}

uint64_t sub_1BB58F500@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  type metadata accessor for FeedItem(0);
  swift_storeEnumTagMultiPayload();
  return swift_retain();
}

uint64_t sub_1BB58F540()
{
  sub_1BB86F5C8();
  sub_1BA6F0168();
  return sub_1BB873B58();
}

double PluginModel.kind.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1BB8E2840;
  return result;
}

void sub_1BB58F594(_QWORD *a1@<X8>)
{
  PluginModel.traits.getter(a1);
}

uint64_t sub_1BB58F5A8()
{
  return _s5TeaUI11PluginModelC8NewsFeedE15debugIdentifierSSvg_0();
}

unint64_t sub_1BB58F5C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB58F5EC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB58F5EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED39EE50;
  if (!qword_1ED39EE50)
  {
    v1 = sub_1BB86F5D4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB6AD8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED39EE50);
  }
  return result;
}

id InternalErrorView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

char *InternalErrorView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  objc_class *v11;
  objc_class *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  objc_super v31;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_onButtonTap;
  sub_1BA563554();
  v12 = v11;
  v13 = objc_allocWithZone(v11);
  v14 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v13, sel_init);
  v15 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_onErrorButtonTap;
  *(_QWORD *)&v14[v15] = objc_msgSend(objc_allocWithZone(v12), sel_init);
  v16 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_iconImageView;
  *(_QWORD *)&v14[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v17 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_titleLabel;
  *(_QWORD *)&v14[v17] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v18 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_errorLabel;
  *(_QWORD *)&v14[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v19 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_subtitleLabel;
  *(_QWORD *)&v14[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v20 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_footerLabel;
  *(_QWORD *)&v14[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v21 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_button;
  *(_QWORD *)&v14[v21] = objc_msgSend(objc_allocWithZone((Class)sub_1BB870078()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v22 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_attachmentLabel;
  sub_1BB86F8A4();
  *(_QWORD *)&v14[v22] = sub_1BB86F880();
  v23 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_debugButton;
  *(_QWORD *)&v14[v23] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugButton()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  v31.receiver = v14;
  v31.super_class = ObjectType;
  v24 = (char *)objc_msgSendSuper2(&v31, sel_initWithFrame_, a1, a2, a3, a4);
  v25 = *(_QWORD *)&v24[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_iconImageView];
  v26 = v24;
  objc_msgSend(v26, sel_addSubview_, v25);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_titleLabel]);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_errorLabel]);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_subtitleLabel]);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_footerLabel]);
  v27 = *(void **)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_button];
  objc_msgSend(v26, sel_addSubview_, v27);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_attachmentLabel]);
  objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_debugButton]);
  v28 = *(id *)&v26[OBJC_IVAR____TtC8NewsFeed17InternalErrorView_onButtonTap];
  v29 = v27;
  sub_1BB871368();

  return v26;
}

id InternalErrorView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id InternalErrorView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall InternalErrorView.prepareForReuse()()
{

  sub_1BB86F88C();
}

uint64_t sub_1BB58FB70()
{

  return sub_1BB86F88C();
}

void sub_1BB58FBB0()
{
  sub_1BA830E98(&qword_1ED3B5170, (uint64_t)&protocol conformance descriptor for InternalErrorView);
  JUMPOUT(0x1BCCE1E7CLL);
}

void _s8NewsFeed17InternalErrorViewC5coderACSgSo7NSCoderC_tcfc_0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  objc_class *v3;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_onButtonTap;
  sub_1BA563554();
  v4 = v3;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone(v3), sel_init);
  v5 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_onErrorButtonTap;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone(v4), sel_init);
  v6 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_iconImageView;
  *(_QWORD *)&v1[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v7 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_titleLabel;
  *(_QWORD *)&v1[v7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v8 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_errorLabel;
  *(_QWORD *)&v1[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_subtitleLabel;
  *(_QWORD *)&v1[v9] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v10 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_footerLabel;
  *(_QWORD *)&v1[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_button;
  *(_QWORD *)&v1[v11] = objc_msgSend(objc_allocWithZone((Class)sub_1BB870078()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_attachmentLabel;
  sub_1BB86F8A4();
  *(_QWORD *)&v1[v12] = sub_1BB86F880();
  v13 = OBJC_IVAR____TtC8NewsFeed17InternalErrorView_debugButton;
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugButton()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);

  sub_1BB873EAC();
  __break(1u);
}

uint64_t sub_1BB58FDF8()
{
  uint64_t v0;
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(), sel_cachedOnlyCachePolicy);
  sub_1BA4B07F0(0, &qword_1ED39E370, (uint64_t (*)(uint64_t))sub_1BA4B08A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  v0 = sub_1BB86EA58();

  return v0;
}

uint64_t sub_1BB58FEA8()
{
  uint64_t v0;
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  sub_1BA4B07F0(0, &qword_1ED39E370, (uint64_t (*)(uint64_t))sub_1BA4B08A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  v0 = sub_1BB86EA58();

  return v0;
}

uint64_t sub_1BB58FF58(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;

  v2 = sub_1BB86E008();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED39DF90, (uint64_t (*)(uint64_t))sub_1BA4A3E50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB5088]);
  MEMORY[0x1E0C80A78](v6);
  v13 = *a1;
  v7 = qword_1ED39E348;
  v8 = v13;
  if (v7 != -1)
    swift_once();
  v9 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED39E328);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  MEMORY[0x1E0C80A78](v10);
  *(&v12 - 2) = sub_1BA4A3E50();
  swift_getKeyPath();
  sub_1BB86ED10();
  return sub_1BB86DEA0();
}

uint64_t sub_1BB5900E0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  sub_1BA4B08A0(0);
  sub_1BB86EC14();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  v2 = (void *)sub_1BB86E854();
  sub_1BB86EA28();
  swift_release();
  swift_release();

  v3 = (void *)sub_1BB86E854();
  sub_1BB86DEAC();
  sub_1BA4A2870((unint64_t *)&qword_1ED3C03F0, (uint64_t (*)(uint64_t))sub_1BA4B08A0, MEMORY[0x1E0DEAF38]);
  v4 = sub_1BB86EA7C();
  swift_release();

  return v4;
}

uint64_t sub_1BB590204()
{
  return sub_1BB58FDF8();
}

uint64_t sub_1BB59021C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB590240()
{
  return sub_1BB58FEA8();
}

void sub_1BB590258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD v22[6];

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  v16 = swift_bridgeObjectRetain();
  sub_1BA67F4CC(v16);
  swift_bridgeObjectRelease();
  v17 = objc_allocWithZone(MEMORY[0x1E0D58C48]);
  v18 = (void *)sub_1BB872D9C();
  swift_release();
  v19 = objc_msgSend(v17, sel_initWithContext_issueIDs_, v15, v18);

  swift_unknownObjectRelease();
  objc_msgSend(v19, sel_setQualityOfService_, 25);
  objc_msgSend(v19, sel_setRelativePriority_, 1);
  objc_msgSend(v19, sel_setCachePolicy_, a7);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = a6;
  v20[5] = sub_1BA573ED8;
  v20[6] = v14;
  v22[4] = sub_1BB5908C0;
  v22[5] = v20;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1107296256;
  v22[2] = sub_1BB6949B0;
  v22[3] = &block_descriptor_85;
  v21 = _Block_copy(v22);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v19, sel_setFetchCompletionHandler_, v21);
  _Block_release(v21);
  objc_msgSend(v19, sel_start);

}

void sub_1BB590444(unint64_t a1, id a2, void (*a3)(id), uint64_t a4, _QWORD *a5, void (*a6)(_QWORD), uint64_t a7)
{
  id v10;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD);
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(id);
  _QWORD *v45;

  if (a2)
  {
    v10 = a2;
    a3(a2);

    return;
  }
  if (!a1)
  {
    v17 = (_QWORD *)sub_1BB86E5C0();
    sub_1BA4A2870(&qword_1ED39A578, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4398], MEMORY[0x1E0DB43A0]);
    a5 = (_QWORD *)swift_allocError();
    a6 = v29;
    if (qword_1ED39E348 == -1)
    {
LABEL_19:
      v30 = sub_1BB86E008();
      v31 = __swift_project_value_buffer(v30, (uint64_t)qword_1ED39E328);
      (*(void (**)(void (*)(_QWORD), uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a6, v31, v30);
      (*(void (**)(void (*)(_QWORD), _QWORD, _QWORD *))(*(v17 - 1) + 104))(a6, *MEMORY[0x1E0DB4388], v17);
      a3(a5);

      return;
    }
LABEL_28:
    swift_once();
    goto LABEL_19;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v40 = a7;
    v41 = a6;
    v42 = a5;
    v43 = a4;
    v44 = a3;
    v45 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v17 = &v45;
    sub_1BA7447E8(0, v15 & ~(v15 >> 63), 0);
    if ((v15 & 0x8000000000000000) == 0)
    {
      v18 = 0;
      v16 = (uint64_t)v45;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v19 = (id)MEMORY[0x1BCCE4630](v18, a1);
        else
          v19 = *(id *)(a1 + 8 * v18 + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, sel_identifier, v40, v41, v42, v43);
        v22 = sub_1BB8729A0();
        v24 = v23;

        v45 = (_QWORD *)v16;
        v26 = *(_QWORD *)(v16 + 16);
        v25 = *(_QWORD *)(v16 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_1BA7447E8(v25 > 1, v26 + 1, 1);
          v16 = (uint64_t)v45;
        }
        ++v18;
        *(_QWORD *)(v16 + 16) = v26 + 1;
        v27 = v16 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v22;
        *(_QWORD *)(v27 + 40) = v24;
      }
      while (v15 != v18);
      a3 = v44;
      a6 = v41;
      a5 = v42;
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_16:
  v28 = sub_1BA6E43EC(v16);
  swift_bridgeObjectRelease();
  if ((sub_1BA6EB330(v28, (uint64_t)a5) & 1) != 0)
  {
    a6(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = sub_1BB86E5C0();
    sub_1BA4A2870(&qword_1ED39A578, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB4398], MEMORY[0x1E0DB43A0]);
    v33 = (void *)swift_allocError();
    v35 = v34;
    if (qword_1ED39E348 != -1)
      swift_once();
    v36 = sub_1BB86E008();
    v37 = __swift_project_value_buffer(v36, (uint64_t)qword_1ED39E328);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v35, v37, v36);
    if (*(_QWORD *)(v28 + 16) <= a5[2] >> 3)
    {
      v45 = a5;
      swift_bridgeObjectRetain();
      sub_1BB024F00(v28);
      swift_bridgeObjectRelease();
      v38 = (uint64_t)v45;
    }
    else
    {
      swift_bridgeObjectRetain();
      v38 = sub_1BA4BDEF4(v28, (uint64_t)a5);
      swift_bridgeObjectRelease();
    }
    sub_1BB0F4138();
    *(_QWORD *)(v35 + *(int *)(v39 + 48)) = v38;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v35, *MEMORY[0x1E0DB4390], v32);
    a3(v33);

  }
}

uint64_t sub_1BB590844()
{
  return 8;
}

_QWORD *sub_1BB590850(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1BB59085C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BB590258(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_1BB590868()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB59088C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1BB5908C0(unint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1BB590444(a1, a2, *(void (**)(id))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), *(void (**)(_QWORD))(v2 + 40), *(_QWORD *)(v2 + 48));
}

id HiddenContentColorPalette.titleTextColor.getter()
{
  id *v0;

  return *v0;
}

id HiddenContentColorPalette.dismissalTextColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

id sub_1BB5908E4()
{
  void *v0;
  id v1;
  id result;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_secondaryLabelColor);
  result = objc_msgSend(v0, sel_systemPinkColor);
  qword_1EF2C79A8 = (uint64_t)v1;
  unk_1EF2C79B0 = result;
  return result;
}

NewsFeed::HiddenContentColorPalette __swiftcall HiddenContentColorPalette.init(titleTextColor:dismissalTextColor:)(UIColor titleTextColor, UIColor dismissalTextColor)
{
  UIColor *v2;
  NewsFeed::HiddenContentColorPalette result;

  v2->super.isa = titleTextColor.super.isa;
  v2[1].super.isa = dismissalTextColor.super.isa;
  result.dismissalTextColor = dismissalTextColor;
  result.titleTextColor = titleTextColor;
  return result;
}

id static HiddenContentColorPalette.default.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  if (qword_1EF2A7348 != -1)
    swift_once();
  v3 = (void *)qword_1EF2C79A8;
  v2 = unk_1EF2C79B0;
  v6 = (id)unk_1EF2C79B0;
  *a1 = qword_1EF2C79A8;
  a1[1] = v2;
  v4 = v3;
  return v6;
}

ValueMetadata *type metadata accessor for HiddenContentColorPalette()
{
  return &type metadata for HiddenContentColorPalette;
}

uint64_t static Sizing.publisherLogo(height:headline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  id v7;
  id v8;
  id v9;

  v7 = objc_msgSend(*(id *)(a1 + 40), sel_sourceChannel);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_theme);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultMetrics);
  static Sizing.publisherLogo(height:theme:fontMetrics:)(v8, v9, a2, a3, a4);

  return swift_unknownObjectRelease();
}

uint64_t static Sizing.cardSpacingHeight(_:)@<X0>(uint64_t *a1@<X8>)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1BB86D654();
  if (v2 > 24.0)
    v3 = v2;
  else
    v3 = 24.0;
  v4 = swift_allocObject();
  *(double *)(v4 + 16) = v3;
  *a1 = v4;
  v5 = *MEMORY[0x1E0DB63F0];
  v6 = sub_1BB86DB7C();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(a1, v5, v6);
}

uint64_t static Sizing.publisherLogo(height:theme:fontMetrics:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void (*v26)(double *, _QWORD, uint64_t);
  id v27;
  void (*v28)(double *, uint64_t);
  void (*v29)(uint64_t *, uint64_t);
  _QWORD v31[2];
  void *v32;
  uint64_t v33;

  v32 = a2;
  v33 = a4;
  v8 = sub_1BB86D5A0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (double *)((char *)v31 - v10);
  v31[1] = a3;
  v12 = sub_1BB86DB7C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (_QWORD *)((char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v31 - v18;
  if (a1)
  {
    objc_msgSend(a1, sel_bannerImageScale, v17);
    v21 = v20;
    objc_msgSend(a1, sel_bannerImageBaselineOffsetPercentage);
    v23 = v22;
  }
  else
  {
    v21 = 1.0;
    v23 = 0;
  }
  v24 = swift_allocObject();
  v25 = v32;
  *(_QWORD *)(v24 + 16) = v32;
  *(double *)(v24 + 24) = a5;
  *v15 = v24;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DB6370], v12);
  *v11 = v21;
  v26 = *(void (**)(double *, _QWORD, uint64_t))(v9 + 104);
  v26(v11, *MEMORY[0x1E0DB5C10], v8);
  v27 = v25;
  sub_1BB86D948();
  v28 = *(void (**)(double *, uint64_t))(v9 + 8);
  v28(v11, v8);
  v29 = *(void (**)(uint64_t *, uint64_t))(v13 + 8);
  v29(v15, v12);
  *v11 = 0.0;
  *((_QWORD *)v11 + 1) = v23;
  v26(v11, *MEMORY[0x1E0DB5BA0], v8);
  sub_1BB86D948();
  v28(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v29)(v19, v12);
}

uint64_t sub_1BB590D54()
{
  return swift_deallocObject();
}

uint64_t sub_1BB590D64()
{
  uint64_t v0;

  return swift_deallocObject();
}

void static Sizing.publisherLogo(height:issue:)(id *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  id v7;
  id v8;

  v7 = objc_msgSend(objc_msgSend(*a1, sel_sourceChannel), sel_theme);
  swift_unknownObjectRelease();
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultMetrics);
  static Sizing.publisherLogo(height:theme:fontMetrics:)(v7, v8, a2, a3, a4);
  swift_unknownObjectRelease();

}

uint64_t PuzzleFullScreenModalBlurEffect.style.getter()
{
  char *v0;

  return qword_1BB929928[*v0];
}

NewsFeed::PuzzleFullScreenModalBlurEffect_optional __swiftcall PuzzleFullScreenModalBlurEffect.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  NewsFeed::PuzzleFullScreenModalBlurEffect_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BB873FE4();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t PuzzleFullScreenModalBlurEffect.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB590EF0 + 4 * byte_1BB929800[*v0]))(0x746867696CLL, 0xE500000000000000);
}

uint64_t sub_1BB590EF0()
{
  return 0x67694C6172747865;
}

uint64_t sub_1BB590F0C()
{
  return 0x72616C75676572;
}

uint64_t sub_1BB590F24()
{
  return 1802658148;
}

uint64_t sub_1BB590F34()
{
  return 0x7261446172747865;
}

uint64_t sub_1BB590F50()
{
  return 0x6E656E696D6F7270;
}

void sub_1BB590F70(char *a1)
{
  sub_1BB7EF238(*a1);
}

void sub_1BB590F7C()
{
  char *v0;

  sub_1BA8D4760(*v0);
}

void sub_1BB590F84()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB590FBC()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BB591050(uint64_t a1)
{
  char *v1;

  sub_1BAB07A38(a1, *v1);
}

NewsFeed::PuzzleFullScreenModalBlurEffect_optional sub_1BB591058(Swift::String *a1)
{
  return PuzzleFullScreenModalBlurEffect.init(rawValue:)(*a1);
}

uint64_t sub_1BB591064()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BB591090 + 4 * byte_1BB92980C[*v0]))();
}

void sub_1BB591090(_QWORD *a1@<X8>)
{
  *a1 = 0x67694C6172747865;
  a1[1] = 0xEA00000000007468;
}

void sub_1BB5910B0(_QWORD *a1@<X8>)
{
  *a1 = 0x72616C75676572;
  a1[1] = 0xE700000000000000;
}

void sub_1BB5910CC(_QWORD *a1@<X8>)
{
  *a1 = 1802658148;
  a1[1] = 0xE400000000000000;
}

void sub_1BB5910E0(_QWORD *a1@<X8>)
{
  *a1 = 0x7261446172747865;
  a1[1] = 0xE90000000000006BLL;
}

void sub_1BB591100(_QWORD *a1@<X8>)
{
  *a1 = 0x6E656E696D6F7270;
  a1[1] = 0xE900000000000074;
}

uint64_t PuzzleFullScreenModal.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void PuzzleFullScreenModal.blurEffect.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

NewsFeed::PuzzleFullScreenModal __swiftcall PuzzleFullScreenModal.init(identifier:blurEffect:)(Swift::String identifier, NewsFeed::PuzzleFullScreenModalBlurEffect_optional blurEffect)
{
  uint64_t v2;
  char v3;
  NewsFeed::PuzzleFullScreenModal result;

  v3 = *(_BYTE *)blurEffect.value;
  *(Swift::String *)v2 = identifier;
  *(_BYTE *)(v2 + 16) = v3;
  result.identifier = identifier;
  result.blurEffect = blurEffect;
  return result;
}

unint64_t sub_1BB591170()
{
  unint64_t result;

  result = qword_1EF2C79B8;
  if (!qword_1EF2C79B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleFullScreenModalBlurEffect, &type metadata for PuzzleFullScreenModalBlurEffect);
    atomic_store(result, (unint64_t *)&qword_1EF2C79B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PuzzleFullScreenModalBlurEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BB591200 + 4 * byte_1BB929817[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BB591234 + 4 * byte_1BB929812[v4]))();
}

uint64_t sub_1BB591234(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB59123C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB591244);
  return result;
}

uint64_t sub_1BB591250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB591258);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BB59125C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB591264(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleFullScreenModalBlurEffect()
{
  return &type metadata for PuzzleFullScreenModalBlurEffect;
}

ValueMetadata *type metadata accessor for PuzzleFullScreenModal()
{
  return &type metadata for PuzzleFullScreenModal;
}

char *sub_1BB591290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v66;
  id v67;
  objc_super v68;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v4[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_contentSizeCategory] = 3;
  v8 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_slider;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3C80]);
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label;
  *(_QWORD *)&v10[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v12 = &v10[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_onChangeBlock];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;

  if (a3)
  {
    v13 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  v68.receiver = v10;
  v68.super_class = ObjectType;
  v14 = (char *)objc_msgSendSuper2(&v68, sel_initWithStyle_reuseIdentifier_, a1, v13);

  v15 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_slider;
  v16 = *(void **)&v14[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_slider];
  v17 = v14;
  LODWORD(v18) = 0;
  objc_msgSend(v16, sel_setMinimumValue_, v18);
  *(float *)&v19 = (float)11;
  objc_msgSend(v16, sel_setMaximumValue_, v19);
  v20 = (void *)objc_opt_self();
  v21 = v16;
  v22 = objc_msgSend(v20, sel_systemBlueColor);
  objc_msgSend(v21, sel_setTintColor_, v22);

  v23 = *(void **)&v14[v15];
  objc_msgSend(v23, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v23, sel_addTarget_action_forControlEvents_, v17, sel_onValueChangeWithSlider_, 4096);
  v24 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v24, sel_addSubview_, v23);

  v25 = *(void **)&v17[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label];
  v26 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label;
  v66 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label;
  v27 = (void *)objc_opt_self();
  v28 = v25;
  v29 = objc_msgSend(v27, sel_systemFontOfSize_, 13.0);
  objc_msgSend(v28, sel_setFont_, v29);

  v30 = *(void **)&v17[v26];
  objc_msgSend(v30, sel_setTextAlignment_, 1);
  objc_msgSend(v30, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v31 = objc_msgSend(v17, (SEL)&selRef_halfLifeCoefficient);
  objc_msgSend(v31, sel_addSubview_, v30);

  v67 = (id)objc_opt_self();
  sub_1BA65E330();
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1BB882990;
  v33 = objc_msgSend(*(id *)&v14[v15], sel_topAnchor);
  v34 = objc_msgSend(v17, (SEL)&selRef_halfLifeCoefficient);
  v35 = objc_msgSend(v34, (SEL)&selRef_setContentsGravity_ + 4);

  v36 = objc_msgSend(v33, sel_constraintEqualToAnchor_constant_, v35, 16.0);
  *(_QWORD *)(v32 + 32) = v36;
  v37 = objc_msgSend(*(id *)&v14[v15], sel_leadingAnchor);
  v38 = objc_msgSend(v17, (SEL)&selRef_halfLifeCoefficient);
  v39 = objc_msgSend(v38, sel_layoutMarginsGuide);

  v40 = objc_msgSend(v39, (SEL)&selRef_absoluteTimeInterval + 6);
  v41 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v40);

  *(_QWORD *)(v32 + 40) = v41;
  v42 = objc_msgSend(*(id *)&v14[v15], sel_trailingAnchor);
  v43 = objc_msgSend(v17, sel_contentView);
  v44 = objc_msgSend(v43, sel_layoutMarginsGuide);

  v45 = objc_msgSend(v44, sel_trailingAnchor);
  v46 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v45);

  *(_QWORD *)(v32 + 48) = v46;
  v47 = objc_msgSend(*(id *)&v17[v66], sel_topAnchor);
  v48 = objc_msgSend(*(id *)&v14[v15], sel_bottomAnchor);
  v49 = objc_msgSend(v47, sel_constraintEqualToAnchor_constant_, v48, 8.0);

  *(_QWORD *)(v32 + 56) = v49;
  v50 = objc_msgSend(*(id *)&v17[v66], sel_leadingAnchor);
  v51 = objc_msgSend(v17, sel_contentView);
  v52 = objc_msgSend(v51, sel_layoutMarginsGuide);

  v53 = objc_msgSend(v52, sel_leadingAnchor);
  v54 = objc_msgSend(v50, (SEL)&selRef_userInterfaceIdiom + 6, v53);

  *(_QWORD *)(v32 + 64) = v54;
  v55 = objc_msgSend(*(id *)&v17[v66], sel_trailingAnchor);
  v56 = objc_msgSend(v17, sel_contentView);
  v57 = objc_msgSend(v56, sel_layoutMarginsGuide);

  v58 = objc_msgSend(v57, sel_trailingAnchor);
  v59 = objc_msgSend(v55, (SEL)&selRef_userInterfaceIdiom + 6, v58);

  *(_QWORD *)(v32 + 72) = v59;
  v60 = objc_msgSend(*(id *)&v17[v66], sel_bottomAnchor);
  v61 = objc_msgSend(v17, sel_contentView);
  v62 = objc_msgSend(v61, sel_bottomAnchor);

  v63 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v62, -8.0);
  *(_QWORD *)(v32 + 80) = v63;
  sub_1BB872DCC();
  sub_1BAA659B8();
  v64 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  objc_msgSend(v67, sel_activateConstraints_, v64);

  return v17;
}

id sub_1BB591A98(void *a1)
{
  uint64_t v1;
  id result;
  float v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  double v9;
  void (*v10)(id);

  result = objc_msgSend(a1, sel_value);
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  result = (id)sub_1BA901EC4((uint64_t)v3);
  if (result != 12)
  {
    v4 = result;
    v5 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_contentSizeCategory;
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_contentSizeCategory) = (_BYTE)result;
    v6 = *(void **)(v1 + OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label);
    sub_1BA901D7C(result);
    v7 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setText_, v7);

    LOBYTE(v8) = *(_BYTE *)(v1 + v5);
    *(float *)&v9 = (float)v8;
    result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_slider), sel_setValue_, v9);
    v10 = *(void (**)(id))(v1 + OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_onChangeBlock);
    if (v10)
    {
      swift_retain();
      v10(v4);
      return (id)sub_1BA49EBE0((uint64_t)v10);
    }
  }
  return result;
}

uint64_t type metadata accessor for DebugFormatContentSizeCategoryCell()
{
  return objc_opt_self();
}

void sub_1BB591C8C()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v0[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_contentSizeCategory] = 3;
  v1 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_slider;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C80]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_label;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v3 = &v0[OBJC_IVAR____TtC8NewsFeed34DebugFormatContentSizeCategoryCell_onChangeBlock];
  *v3 = 0;
  v3[1] = 0;

  sub_1BB873EAC();
  __break(1u);
}

uint64_t CategoryViewLayout.frame.getter()
{
  return swift_retain();
}

uint64_t CategoryViewLayout.categoryViewLayoutAttributes.getter()
{
  return swift_retain();
}

double CategoryViewLayout.Attributes.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t CategoryViewLayout.Attributes.categoryViewLayoutAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB591D98()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0x656D617266;
}

uint64_t sub_1BB591DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB592DBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB591DF8()
{
  sub_1BB592000();
  return sub_1BB874710();
}

uint64_t sub_1BB591E20()
{
  sub_1BB592000();
  return sub_1BB87471C();
}

uint64_t CategoryViewLayout.Attributes.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  sub_1BA4CDF6C(0, &qword_1EF2C7A08, (uint64_t (*)(void))sub_1BB592000, (uint64_t)&type metadata for CategoryViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - v7;
  v14 = *v1;
  v9 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v13 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB592000();
  sub_1BB8746C8();
  v15 = v14;
  v16 = v9;
  v17 = v10;
  v18 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA62E16C(&qword_1EF2A9A18, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    *(_QWORD *)&v15 = v13;
    v18 = 1;
    sub_1BB592044();
    sub_1BB5922D0(&qword_1EF2C7A10, (uint64_t (*)(void))sub_1BB592098, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1BB592000()
{
  unint64_t result;

  result = qword_1ED39E5D0;
  if (!qword_1ED39E5D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929C3C, &type metadata for CategoryViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39E5D0);
  }
  return result;
}

void sub_1BB592044()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39EA38)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39EA38);
  }
}

unint64_t sub_1BB592098()
{
  unint64_t result;

  result = qword_1ED39E820;
  if (!qword_1ED39E820)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayoutAttributes, &type metadata for CategoryViewLayoutAttributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E820);
  }
  return result;
}

uint64_t CategoryViewLayout.Attributes.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1BA4CDF6C(0, &qword_1ED39EAB0, (uint64_t (*)(void))sub_1BB592000, (uint64_t)&type metadata for CategoryViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB592000();
  sub_1BB87468C();
  if (!v2)
  {
    v9 = v6;
    v10 = v18;
    type metadata accessor for CGRect(0);
    v23 = 0;
    sub_1BA62E16C((unint64_t *)&unk_1ED3B9910, MEMORY[0x1E0C9B9E0]);
    sub_1BB8740D4();
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v14 = v22;
    sub_1BB592044();
    v23 = 1;
    sub_1BB5922D0((unint64_t *)&unk_1ED39EA40, (uint64_t (*)(void))sub_1BB592334, MEMORY[0x1E0DEAF40]);
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    v16 = v19;
    *v10 = v11;
    v10[1] = v12;
    v10[2] = v13;
    v10[3] = v14;
    v10[4] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BB5922D0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BB592044();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCE5B24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BB592334()
{
  unint64_t result;

  result = qword_1ED39E828;
  if (!qword_1ED39E828)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayoutAttributes, &type metadata for CategoryViewLayoutAttributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E828);
  }
  return result;
}

uint64_t sub_1BB592378()
{
  sub_1BB592EA0();
  return sub_1BB870FF0();
}

uint64_t sub_1BB5923A0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CategoryViewLayout.Attributes.init(from:)(a1, a2);
}

uint64_t sub_1BB5923B4(_QWORD *a1)
{
  return CategoryViewLayout.Attributes.encode(to:)(a1);
}

uint64_t sub_1BB5923C8()
{
  sub_1BB3E2968();
  return sub_1BB86D96C();
}

uint64_t CategoryViewLayout.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BA62E724();
  swift_allocObject();
  v2 = sub_1BB86D450();
  sub_1BA4CDF6C(0, &qword_1ED39E2E8, (uint64_t (*)(void))sub_1BB3E2C30, (uint64_t)&type metadata for CategoryViewLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5EA8]);
  swift_allocObject();
  result = sub_1BB86D7C8();
  *a1 = v2;
  a1[1] = result;
  return result;
}

unint64_t sub_1BB5924D4()
{
  unint64_t result;

  result = qword_1ED39E5E8;
  if (!qword_1ED39E5E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E5E8);
  }
  return result;
}

unint64_t sub_1BB59251C()
{
  unint64_t result;

  result = qword_1EF2C7A18;
  if (!qword_1EF2C7A18)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A18);
  }
  return result;
}

unint64_t sub_1BB592564()
{
  unint64_t result;

  result = qword_1ED39E600;
  if (!qword_1ED39E600)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E600);
  }
  return result;
}

unint64_t sub_1BB5925AC()
{
  unint64_t result;

  result = qword_1ED39E5F8;
  if (!qword_1ED39E5F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E5F8);
  }
  return result;
}

unint64_t sub_1BB5925F4()
{
  unint64_t result;

  result = qword_1ED39E5E0;
  if (!qword_1ED39E5E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39E5E0);
  }
  return result;
}

uint64_t sub_1BB592638@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BA62E724();
  swift_allocObject();
  v2 = sub_1BB86D450();
  sub_1BA4CDF6C(0, &qword_1ED39E2E8, (uint64_t (*)(void))sub_1BB3E2C30, (uint64_t)&type metadata for CategoryViewLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5EA8]);
  swift_allocObject();
  result = sub_1BB86D7C8();
  *a1 = v2;
  a1[1] = result;
  return result;
}

ValueMetadata *type metadata accessor for CategoryViewLayout()
{
  return &type metadata for CategoryViewLayout;
}

ValueMetadata *type metadata accessor for CategoryViewLayout.Attributes()
{
  return &type metadata for CategoryViewLayout.Attributes;
}

uint64_t destroy for CategoryViewLayout.Context(_QWORD *a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[8])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  if (a1[13])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  if (a1[18])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
}

uint64_t initializeWithCopy for CategoryViewLayout.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = (_OWORD *)(a1 + 40);
  v7 = a2 + 40;
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    v10 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v7 + 32);
  }
  v11 = (_OWORD *)(a1 + 80);
  v12 = (_OWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 104);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v11, v12);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 96);
    *v11 = *v12;
    *(_OWORD *)(a1 + 96) = v15;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v16 = (_OWORD *)(a1 + 120);
  v17 = (_OWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 144);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 136);
    *v16 = *v17;
    *(_OWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v21;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 160, a2 + 160);
  return a1;
}

uint64_t assignWithCopy for CategoryViewLayout.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 56) = v6;
LABEL_8:
  v7 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 80, a2 + 80);
    goto LABEL_15;
  }
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
LABEL_15:
  v10 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(a1 + 144))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 144) = v10;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 120, a2 + 120);
      goto LABEL_22;
    }
LABEL_21:
    v11 = *(_OWORD *)(a2 + 120);
    v12 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v11;
    *(_OWORD *)(a1 + 136) = v12;
    goto LABEL_22;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    goto LABEL_21;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
LABEL_22:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  return a1;
}

uint64_t assignWithTake for CategoryViewLayout.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 104))
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 144))
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for CategoryViewLayout.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 200))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CategoryViewLayout.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 200) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CategoryViewLayout.Context()
{
  return &type metadata for CategoryViewLayout.Context;
}

uint64_t storeEnumTagSinglePayload for CategoryViewLayout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB592C64 + 4 * byte_1BB929995[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB592C98 + 4 * asc_1BB929990[v4]))();
}

uint64_t sub_1BB592C98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB592CA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB592CA8);
  return result;
}

uint64_t sub_1BB592CB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB592CBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB592CC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB592CC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CategoryViewLayout.Attributes.CodingKeys()
{
  return &type metadata for CategoryViewLayout.Attributes.CodingKeys;
}

unint64_t sub_1BB592CE8()
{
  unint64_t result;

  result = qword_1EF2C7A20;
  if (!qword_1EF2C7A20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929C14, &type metadata for CategoryViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A20);
  }
  return result;
}

unint64_t sub_1BB592D30()
{
  unint64_t result;

  result = qword_1ED39E0C8;
  if (!qword_1ED39E0C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929B84, &type metadata for CategoryViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39E0C8);
  }
  return result;
}

unint64_t sub_1BB592D78()
{
  unint64_t result;

  result = qword_1ED39E5D8;
  if (!qword_1ED39E5D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB929BAC, &type metadata for CategoryViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39E5D8);
  }
  return result;
}

uint64_t sub_1BB592DBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D617266 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001BB991850)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1BB592EA0()
{
  unint64_t result;

  result = qword_1EF2C7A28;
  if (!qword_1EF2C7A28)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CategoryViewLayout.Attributes, &type metadata for CategoryViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A28);
  }
  return result;
}

double PuzzleStatisticCategory.primaryValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      sub_1BA5193C4((uint64_t)v10, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
      PuzzleStatisticValue.primaryValue.getter();
      v13 = v17;
      v15 = (uint64_t)v4;
      v16 = type metadata accessor for PuzzleStatisticDifficultyLevelValue;
    }
    else
    {
      sub_1BA5193C4((uint64_t)v10, (uint64_t)v7, type metadata accessor for PuzzleStatisticValue);
      PuzzleStatisticValue.primaryValue.getter();
      v13 = v14;
      v15 = (uint64_t)v7;
      v16 = type metadata accessor for PuzzleStatisticValue;
    }
    sub_1BA4A2E80(v15, v16);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v10, type metadata accessor for PuzzleStatisticCategory);
    return -1.0;
  }
  return v13;
}

uint64_t PuzzleDifficultyLevel.rawValue.getter()
{
  unsigned __int8 *v0;

  return 10 * *v0 + 10;
}

double PuzzleStatisticCategory.secondaryValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  double v10;
  double v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2 && EnumCaseMultiPayload)
  {
    sub_1BA5193C4((uint64_t)v7, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    PuzzleStatisticValue.primaryValue.getter();
    v10 = v11;
    sub_1BA4A2E80((uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v7, type metadata accessor for PuzzleStatisticCategory);
    return -1.0;
  }
  return v10;
}

double PuzzleStatisticCategory.tertiaryValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  double v10;
  double v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2 && EnumCaseMultiPayload)
  {
    sub_1BA5193C4((uint64_t)v7, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    PuzzleStatisticValue.primaryValue.getter();
    v10 = v11;
    sub_1BA4A2E80((uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v7, type metadata accessor for PuzzleStatisticCategory);
    return -1.0;
  }
  return v10;
}

void PuzzleStatisticCategory.hasValue.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char *v11;
  uint64_t v12;

  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v3);
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, v1);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v8);
  sub_1BA4C2DD8(v0, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v11 = (char *)sub_1BB593494 + 4 * byte_1BB929C90[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB593494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;

  sub_1BA5193C4(v2, v0, type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8(v0, v1, type metadata accessor for PuzzleStatisticValue);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BB5934E8 + 4 * byte_1BB929C94[EnumCaseMultiPayload]))();
}

uint64_t sub_1BB5934E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8) ^ 1;
  sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticValue);
  return v2 & 1;
}

void PuzzleStatisticCategory.statisticType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v6);
  sub_1BA4C2DD8(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)sub_1BB5937E0 + 4 * byte_1BB929C9B[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB5937E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;

  sub_1BA5193C4(v2, v0, type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8(v0, v1, type metadata accessor for PuzzleStatisticValue);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BB593830 + 4 * byte_1BB929C9F[EnumCaseMultiPayload]))();
}

uint64_t sub_1BB593830()
{
  _BYTE *v0;
  uint64_t v1;

  *v0 = 3;
  return sub_1BA4A2E80(v1, type metadata accessor for PuzzleStatisticValue);
}

uint64_t PuzzleStatisticCategory.primaryDisplayValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      sub_1BA5193C4((uint64_t)v10, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
      PuzzleStatisticValue.primaryDisplayValue.getter();
      v13 = v17;
      v15 = (uint64_t)v4;
      v16 = type metadata accessor for PuzzleStatisticDifficultyLevelValue;
    }
    else
    {
      sub_1BA5193C4((uint64_t)v10, (uint64_t)v7, type metadata accessor for PuzzleStatisticValue);
      PuzzleStatisticValue.primaryDisplayValue.getter();
      v13 = v14;
      v15 = (uint64_t)v7;
      v16 = type metadata accessor for PuzzleStatisticValue;
    }
    sub_1BA4A2E80(v15, v16);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v10, type metadata accessor for PuzzleStatisticCategory);
    return 0;
  }
  return v13;
}

uint64_t PuzzleStatisticCategory.secondaryDisplayValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2 && EnumCaseMultiPayload)
  {
    sub_1BA5193C4((uint64_t)v7, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    PuzzleStatisticValue.primaryDisplayValue.getter();
    v10 = v11;
    sub_1BA4A2E80((uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v7, type metadata accessor for PuzzleStatisticCategory);
    return 0;
  }
  return v10;
}

uint64_t PuzzleStatisticCategory.tertiaryDisplayValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) >= 2 && EnumCaseMultiPayload)
  {
    sub_1BA5193C4((uint64_t)v7, (uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    PuzzleStatisticValue.primaryDisplayValue.getter();
    v10 = v11;
    sub_1BA4A2E80((uint64_t)v4, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v7, type metadata accessor for PuzzleStatisticCategory);
    return 0;
  }
  return v10;
}

uint64_t sub_1BB593D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v2 = v1;
  v4 = type metadata accessor for PuzzleLeaderboardEntry();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(v11 + 20);
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + v12) + 16);
  sub_1BA4C2DD8(v2, (uint64_t)v10, v14);
  if (v13 == 2)
  {
    sub_1BA4A2E80((uint64_t)v10, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)&v10[*(int *)(v8 + 20)] + 16);
    sub_1BA4A2E80((uint64_t)v10, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
    if (v15 != 3)
    {
LABEL_17:
      v29 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v29, 1, v4);
    }
  }
  v46 = v12;
  v16 = *(_QWORD *)(v2 + v12);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v17)
  {
    v43 = v2;
    v45 = a1;
    v47 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BAC7A0F0(0, v17, 0);
    v19 = *(unsigned __int8 *)(v5 + 80);
    v42[1] = v16;
    v20 = v16 + ((v19 + 32) & ~v19);
    v44 = v5;
    v21 = *(_QWORD *)(v5 + 72);
    v18 = v47;
    do
    {
      sub_1BA4C2DD8(v20, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      v22 = *(_QWORD *)&v7[*(int *)(v4 + 28)];
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BAC7A0F0(0, v18[2] + 1, 1);
        v18 = v47;
      }
      v24 = v18[2];
      v23 = v18[3];
      if (v24 >= v23 >> 1)
      {
        sub_1BAC7A0F0(v23 > 1, v24 + 1, 1);
        v18 = v47;
      }
      v18[2] = v24 + 1;
      v18[v24 + 4] = v22;
      v20 += v21;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    v5 = v44;
    a1 = v45;
    v2 = v43;
  }
  v25 = *(_QWORD *)(v2 + *(int *)(v4 + 28));
  v26 = sub_1BAAD5CB8(v25, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
    goto LABEL_17;
  v27 = *(_QWORD *)(v2 + v46);
  if (*(_QWORD *)(v27 + 16) == 2)
  {
    v28 = v27 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    if (*(_QWORD *)(v28 + *(int *)(v4 + 28)) == v25)
      v28 += *(_QWORD *)(v5 + 72);
    sub_1BA4C2DD8(v28, a1, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
LABEL_29:
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v29, 1, v4);
  }
  v47 = *(_QWORD **)(v2 + v46);
  swift_bridgeObjectRetain_n();
  sub_1BB59B1CC(&v47);
  swift_bridgeObjectRelease();
  v30 = v47[2];
  if (!v30)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v30 < 3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v31 = (char *)v47 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v32 = *(int *)(v4 + 32);
  v33 = *(_QWORD *)&v31[v32];
  v34 = *(_QWORD *)(v5 + 72);
  v35 = *(_QWORD *)&v31[v32 + v34];
  v36 = v33 - v35;
  if (__OFSUB__(v33, v35))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v37 = &v31[2 * v34];
  v38 = *(_QWORD *)&v37[v32];
  if (v36 < 0)
  {
    v39 = __OFSUB__(0, v36);
    v36 = v35 - v33;
    if (v39)
      goto LABEL_35;
  }
  v39 = __OFSUB__(v38, v35);
  v40 = v38 - v35;
  if (v39)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((v40 & 0x8000000000000000) == 0 || (v39 = __OFSUB__(0, v40), v40 = -v40, !v39))
  {
    if (v36 >= v40)
      v31 = v37;
    sub_1BA4C2DD8((uint64_t)v31, a1, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
    swift_release();
    goto LABEL_29;
  }
LABEL_36:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

NewsFeed::PuzzleDifficultyLevel_optional __swiftcall PuzzleDifficultyLevel.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;
  char v3;

  if (rawValue == 30)
    v2 = 2;
  else
    v2 = 3;
  if (rawValue == 20)
    v3 = 1;
  else
    v3 = v2;
  if (rawValue == 10)
    v3 = 0;
  *v1 = v3;
  return (NewsFeed::PuzzleDifficultyLevel_optional)rawValue;
}

uint64_t PuzzleStatisticDifficultyLevelValue.value(for:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  if (*a1)
  {
    if (*a1 == 1)
      v4 = 5;
    else
      v4 = 6;
    v2 += *(int *)(type metadata accessor for PuzzleStatisticDifficultyLevelValue(0) + 4 * v4);
  }
  return sub_1BA4C2DD8(v2, a2, type metadata accessor for PuzzleStatisticValue);
}

void PuzzleStatisticCategory.isMultiStatistic(puzzleType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v1);
  sub_1BA4C2DD8(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1BB594204 + 4 * byte_1BB929CA6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB594204()
{
  uint64_t v0;

  sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticCategory);
  return 1;
}

uint64_t sub_1BB594254()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB594280 + 4 * byte_1BB929CAA[*v0]))(0x656C676E6973, 0xE600000000000000);
}

uint64_t sub_1BB594280()
{
  return 0x6C75636966666964;
}

unint64_t sub_1BB5942A4()
{
  return 0xD000000000000015;
}

uint64_t sub_1BB5942C0()
{
  return 0x53646570756F7267;
}

uint64_t sub_1BB5942E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5A6FA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB594304()
{
  sub_1BB59DD84();
  return sub_1BB874710();
}

uint64_t sub_1BB59432C()
{
  sub_1BB59DD84();
  return sub_1BB87471C();
}

uint64_t sub_1BB594354()
{
  sub_1BB59DCFC();
  return sub_1BB874710();
}

uint64_t sub_1BB59437C()
{
  sub_1BB59DCFC();
  return sub_1BB87471C();
}

uint64_t sub_1BB5943A4()
{
  sub_1BB59DCB8();
  return sub_1BB874710();
}

uint64_t sub_1BB5943CC()
{
  sub_1BB59DCB8();
  return sub_1BB87471C();
}

uint64_t sub_1BB5943F4()
{
  sub_1BB59DC74();
  return sub_1BB874710();
}

uint64_t sub_1BB59441C()
{
  sub_1BB59DC74();
  return sub_1BB87471C();
}

uint64_t sub_1BB594444()
{
  sub_1BB59DD40();
  return sub_1BB874710();
}

uint64_t sub_1BB59446C()
{
  sub_1BB59DD40();
  return sub_1BB87471C();
}

void PuzzleStatisticCategory.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1BA4CDF6C(0, &qword_1EF2C7A30, (uint64_t (*)(void))sub_1BB59DC74, (uint64_t)&type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v21 - v4;
  v33 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7A40, (uint64_t (*)(void))sub_1BB59DCB8, (uint64_t)&type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys, v2);
  v34 = v6;
  v32 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v21 - v7;
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v30 = (char *)&v21 - v9;
  sub_1BA4CDF6C(0, &qword_1EF2C7A50, (uint64_t (*)(void))sub_1BB59DCFC, (uint64_t)&type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys, v2);
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  MEMORY[0x1E0C80A78](v10);
  v27 = (char *)&v21 - v11;
  v25 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v25);
  v26 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7A60, (uint64_t (*)(void))sub_1BB59DD40, (uint64_t)&type metadata for PuzzleStatisticCategory.SingleCodingKeys, v2);
  v23 = *(_QWORD *)(v13 - 8);
  v24 = v13;
  MEMORY[0x1E0C80A78](v13);
  v22 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v22);
  v14 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7A70, (uint64_t (*)(void))sub_1BB59DD84, (uint64_t)&type metadata for PuzzleStatisticCategory.CodingKeys, v2);
  v40 = *(_QWORD *)(v17 - 8);
  v41 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v21 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59DD84();
  v39 = v19;
  sub_1BB8746C8();
  sub_1BA4C2DD8(v42, (uint64_t)v16, type metadata accessor for PuzzleStatisticCategory);
  v20 = (char *)sub_1BB594814 + 4 * byte_1BB929CAE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB594814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1BA5193C4(v1, v2, type metadata accessor for PuzzleStatisticValue);
  *(_BYTE *)(v3 - 68) = 0;
  sub_1BB59DD40();
  v4 = *(_QWORD *)(v3 - 112);
  v5 = *(_QWORD *)(v3 - 128);
  sub_1BB874110();
  sub_1BA4A2870(&qword_1EF2C7A98, type metadata accessor for PuzzleStatisticValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticValue);
  v6 = *(_QWORD *)(v3 - 248);
  sub_1BB8741AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 256) + 8))(v0, v6);
  sub_1BA4A2E80(v2, type metadata accessor for PuzzleStatisticValue);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v5, v4);
}

uint64_t PuzzleStatisticCategory.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  v37 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BA4CDF6C(0, &qword_1EF2C7AA0, (uint64_t (*)(void))sub_1BB59DC74, (uint64_t)&type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v34[7] = v4;
  v34[11] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v34[15] = (char *)v34 - v5;
  sub_1BA4CDF6C(0, &qword_1EF2C7AA8, (uint64_t (*)(void))sub_1BB59DCB8, (uint64_t)&type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys, v3);
  v34[6] = v6;
  v34[10] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v34[14] = (char *)v34 - v7;
  sub_1BA4CDF6C(0, &qword_1EF2C7AB0, (uint64_t (*)(void))sub_1BB59DCFC, (uint64_t)&type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys, v3);
  v34[5] = v8;
  v34[9] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v34[13] = (char *)v34 - v9;
  sub_1BA4CDF6C(0, &qword_1EF2C7AB8, (uint64_t (*)(void))sub_1BB59DD40, (uint64_t)&type metadata for PuzzleStatisticCategory.SingleCodingKeys, v3);
  v34[4] = v10;
  v34[8] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v34[12] = (char *)v34 - v11;
  sub_1BA4CDF6C(0, &qword_1EF2C7AC0, (uint64_t (*)(void))sub_1BB59DD84, (uint64_t)&type metadata for PuzzleStatisticCategory.CodingKeys, v3);
  v38 = v12;
  v36 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v34 - v13;
  v35 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v35);
  v34[3] = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v34 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v34 - v20;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v34 - v23;
  MEMORY[0x1E0C80A78](v25);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59DD84();
  v26 = v39;
  sub_1BB87468C();
  if (!v26)
  {
    v34[1] = v21;
    v34[2] = v18;
    v39 = v24;
    v27 = v38;
    v28 = sub_1BB8740EC();
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X10 }
    v29 = v27;
    v30 = sub_1BB873D68();
    swift_allocError();
    v32 = v31;
    sub_1BA909FB4();
    *v32 = v35;
    sub_1BB874008();
    sub_1BB873D38();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC450], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v29);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BB59537C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatisticCategory.init(from:)(a1, a2);
}

void sub_1BB595390(_QWORD *a1)
{
  PuzzleStatisticCategory.encode(to:)(a1);
}

void PuzzleStatisticCategory.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  _QWORD v13[3];
  uint64_t v14;

  v14 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
  v13[1] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v13[0] = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  v13[2] = (char *)v13 - v5;
  v6 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v9);
  sub_1BA4C2DD8(v0, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = (char *)sub_1BB595590 + 4 * byte_1BB929CB6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB595590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1BA5193C4(v0, v1, type metadata accessor for PuzzleStatisticValue);
  *(_QWORD *)(v2 - 96) = 0;
  *(_QWORD *)(v2 - 88) = 0xE000000000000000;
  sub_1BB872AFC((_QWORD *)0xE000000000000000);
  sub_1BB873E34();
  sub_1BB872AFC(v3);
  v4 = *(_QWORD *)(v2 - 96);
  sub_1BA4A2E80(v1, type metadata accessor for PuzzleStatisticValue);
  return v4;
}

uint64_t sub_1BB5958AC()
{
  sub_1BB59DE94();
  return sub_1BB874710();
}

uint64_t sub_1BB5958D4()
{
  sub_1BB59DE94();
  return sub_1BB87471C();
}

uint64_t sub_1BB5958FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB595930 + 4 * byte_1BB929CBA[*v0]))(0x74615265766C6F73, 0xE900000000000065);
}

uint64_t sub_1BB595930()
{
  return 0x6C6F536C61746F74;
}

uint64_t sub_1BB595950()
{
  return 0x5474736574736166;
}

uint64_t sub_1BB595984()
{
  return 0x53747365676E6F6CLL;
}

uint64_t sub_1BB5959B8()
{
  return 0x5374736568676968;
}

uint64_t sub_1BB5959D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5A6C24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5959FC()
{
  sub_1BB59DFA4();
  return sub_1BB874710();
}

uint64_t sub_1BB595A24()
{
  sub_1BB59DFA4();
  return sub_1BB87471C();
}

uint64_t sub_1BB595A4C()
{
  sub_1BB59DE0C();
  return sub_1BB874710();
}

uint64_t sub_1BB595A74()
{
  sub_1BB59DE0C();
  return sub_1BB87471C();
}

uint64_t sub_1BB595A9C()
{
  sub_1BB59DED8();
  return sub_1BB874710();
}

uint64_t sub_1BB595AC4()
{
  sub_1BB59DED8();
  return sub_1BB87471C();
}

uint64_t sub_1BB595AEC()
{
  sub_1BB59DDC8();
  return sub_1BB874710();
}

uint64_t sub_1BB595B14()
{
  sub_1BB59DDC8();
  return sub_1BB87471C();
}

uint64_t sub_1BB595B3C()
{
  sub_1BB59DE50();
  return sub_1BB874710();
}

uint64_t sub_1BB595B64()
{
  sub_1BB59DE50();
  return sub_1BB87471C();
}

uint64_t sub_1BB595B8C()
{
  sub_1BB59DF60();
  return sub_1BB874710();
}

uint64_t sub_1BB595BB4()
{
  sub_1BB59DF60();
  return sub_1BB87471C();
}

uint64_t sub_1BB595BDC()
{
  sub_1BB59DF1C();
  return sub_1BB874710();
}

uint64_t sub_1BB595C04()
{
  sub_1BB59DF1C();
  return sub_1BB87471C();
}

void PuzzleStatisticValue.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD v27[28];

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1BA4CDF6C(0, &qword_1EF2C7AE8, (uint64_t (*)(void))sub_1BB59DDC8, (uint64_t)&type metadata for PuzzleStatisticValue.HighestScoreCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v27[21] = v3;
  v27[19] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v27[17] = (char *)v27 - v4;
  sub_1BA4CDF6C(0, &qword_1EF2C7AF8, (uint64_t (*)(void))sub_1BB59DE0C, (uint64_t)&type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys, v2);
  v27[20] = v5;
  v27[18] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v27[16] = (char *)v27 - v6;
  sub_1BA4CDF6C(0, &qword_1EF2C7B08, (uint64_t (*)(void))sub_1BB59DE50, (uint64_t)&type metadata for PuzzleStatisticValue.LongestStreakCodingKeys, v2);
  v27[14] = *(_QWORD *)(v7 - 8);
  v27[15] = v7;
  MEMORY[0x1E0C80A78](v7);
  v27[13] = (char *)v27 - v8;
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v27[12] = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v27[11] = (char *)v27 - v12;
  sub_1BA4CDF6C(0, &qword_1EF2C7B18, (uint64_t (*)(void))sub_1BB59DE94, (uint64_t)&type metadata for PuzzleStatisticValue.AverageTimeCodingKeys, v2);
  v27[9] = *(_QWORD *)(v13 - 8);
  v27[10] = v13;
  MEMORY[0x1E0C80A78](v13);
  v27[8] = (char *)v27 - v14;
  sub_1BA4CDF6C(0, &qword_1EF2C7B28, (uint64_t (*)(void))sub_1BB59DED8, (uint64_t)&type metadata for PuzzleStatisticValue.FastestTimeCodingKeys, v2);
  v27[6] = *(_QWORD *)(v15 - 8);
  v27[7] = v15;
  MEMORY[0x1E0C80A78](v15);
  v27[5] = (char *)v27 - v16;
  sub_1BA4CDF6C(0, &qword_1EF2C7B38, (uint64_t (*)(void))sub_1BB59DF1C, (uint64_t)&type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys, v2);
  v27[4] = v17;
  v27[3] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v27[2] = (char *)v27 - v18;
  sub_1BA4CDF6C(0, &qword_1EF2C7B48, (uint64_t (*)(void))sub_1BB59DF60, (uint64_t)&type metadata for PuzzleStatisticValue.SolveRateCodingKeys, v2);
  v27[1] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v20 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7B58, (uint64_t (*)(void))sub_1BB59DFA4, (uint64_t)&type metadata for PuzzleStatisticValue.CodingKeys, v2);
  v27[23] = v23;
  v27[25] = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v27 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59DFA4();
  v27[22] = v25;
  sub_1BB8746C8();
  sub_1BA4C2DD8(v27[26], (uint64_t)v22, type metadata accessor for PuzzleStatisticValue);
  v26 = (char *)sub_1BB596040 + 4 * byte_1BB929CC1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB596040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 71) = 0;
  sub_1BB59DF60();
  v4 = *(_QWORD *)(v2 - 128);
  v3 = *(_QWORD *)(v2 - 120);
  sub_1BB874110();
  sub_1BB874134();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 296) + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v4, v3);
}

uint64_t PuzzleStatisticValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD v48[28];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v53 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BA4CDF6C(0, &qword_1EF2C7B68, (uint64_t (*)(void))sub_1BB59DDC8, (uint64_t)&type metadata for PuzzleStatisticValue.HighestScoreCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v52 = v4;
  v48[19] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v48[27] = (char *)v48 - v5;
  sub_1BA4CDF6C(0, &qword_1EF2C7B70, (uint64_t (*)(void))sub_1BB59DE0C, (uint64_t)&type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys, v3);
  v48[20] = v6;
  v48[18] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v48[26] = (char *)v48 - v7;
  sub_1BA4CDF6C(0, &qword_1EF2C7B78, (uint64_t (*)(void))sub_1BB59DE50, (uint64_t)&type metadata for PuzzleStatisticValue.LongestStreakCodingKeys, v3);
  v48[16] = *(_QWORD *)(v8 - 8);
  v48[17] = v8;
  MEMORY[0x1E0C80A78](v8);
  v48[25] = (char *)v48 - v9;
  sub_1BA4CDF6C(0, &qword_1EF2C7B80, (uint64_t (*)(void))sub_1BB59DE94, (uint64_t)&type metadata for PuzzleStatisticValue.AverageTimeCodingKeys, v3);
  v48[14] = *(_QWORD *)(v10 - 8);
  v48[15] = v10;
  MEMORY[0x1E0C80A78](v10);
  v48[24] = (char *)v48 - v11;
  sub_1BA4CDF6C(0, &qword_1EF2C7B88, (uint64_t (*)(void))sub_1BB59DED8, (uint64_t)&type metadata for PuzzleStatisticValue.FastestTimeCodingKeys, v3);
  v48[13] = v12;
  v48[12] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v48[23] = (char *)v48 - v13;
  sub_1BA4CDF6C(0, &qword_1EF2C7B90, (uint64_t (*)(void))sub_1BB59DF1C, (uint64_t)&type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys, v3);
  v48[11] = v14;
  v48[10] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v48[22] = (char *)v48 - v15;
  sub_1BA4CDF6C(0, &qword_1EF2C7B98, (uint64_t (*)(void))sub_1BB59DF60, (uint64_t)&type metadata for PuzzleStatisticValue.SolveRateCodingKeys, v3);
  v48[9] = v16;
  v48[8] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v48[21] = (char *)v48 - v17;
  sub_1BA4CDF6C(0, &qword_1EF2C7BA0, (uint64_t (*)(void))sub_1BB59DFA4, (uint64_t)&type metadata for PuzzleStatisticValue.CodingKeys, v3);
  v51 = v18;
  v49 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v48 - v19;
  v50 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v50);
  v48[5] = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v48[7] = (char *)v48 - v23;
  MEMORY[0x1E0C80A78](v24);
  v48[6] = (char *)v48 - v25;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)v48 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)v48 - v30;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)v48 - v33;
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)v48 - v36;
  MEMORY[0x1E0C80A78](v38);
  v39 = a1[3];
  v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v39);
  sub_1BB59DFA4();
  v40 = v55;
  sub_1BB87468C();
  if (!v40)
  {
    v48[1] = v34;
    v48[2] = v31;
    v48[3] = v28;
    v48[4] = v37;
    v55 = 0;
    v42 = v50;
    v41 = v51;
    v43 = sub_1BB8740EC();
    if (*(_QWORD *)(v43 + 16) == 1)
    {
      v48[0] = v43;
      __asm { BR              X10 }
    }
    v44 = sub_1BB873D68();
    swift_allocError();
    v46 = v45;
    sub_1BA909FB4();
    *v46 = v42;
    sub_1BB874008();
    sub_1BB873D38();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, *MEMORY[0x1E0DEC450], v44);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v41);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
}

void sub_1BB596BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v4 - 67) = 4;
  sub_1BB59DE50();
  v5 = *(_QWORD *)(v4 - 168);
  v6 = *(_QWORD *)(v4 - 96);
  sub_1BB873FFC();
  if (!v6)
  {
    *(_QWORD *)(v4 - 96) = v0;
    type metadata accessor for PuzzleStreak();
    sub_1BA4A2870(&qword_1ED3A29A8, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t)&protocol conformance descriptor for PuzzleStreak);
    v7 = *(_QWORD *)(v4 - 320);
    v8 = v5;
    v9 = *(_QWORD *)(v4 - 232);
    sub_1BB874068();
    v10 = *(_QWORD *)(v4 - 144);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v10 + 8))(*(_QWORD *)(v4 - 96), v2);
    swift_storeEnumTagMultiPayload();
    sub_1BA5193C4(v7, v3, type metadata accessor for PuzzleStatisticValue);
    sub_1BA5193C4(v3, v1, type metadata accessor for PuzzleStatisticValue);
    JUMPOUT(0x1BB596B94);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1BB596E0CLL);
}

void sub_1BB596C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 66) = 5;
  sub_1BB59DE0C();
  v3 = *(_QWORD *)(v2 - 160);
  v4 = *(_QWORD *)(v2 - 96);
  sub_1BB873FFC();
  if (v4)
    JUMPOUT(0x1BB596CACLL);
  *(_QWORD *)(v2 - 96) = v0;
  type metadata accessor for PuzzleStreak();
  sub_1BA4A2870(&qword_1ED3A29A8, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t)&protocol conformance descriptor for PuzzleStreak);
  v5 = v3;
  v6 = *(_QWORD *)(v2 - 208);
  sub_1BB874068();
  v7 = *(_QWORD *)(v2 - 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(v7 + 8))(*(_QWORD *)(v2 - 96), v1);
  JUMPOUT(0x1BB597064);
}

void sub_1BB596CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v1;
  *(_BYTE *)(v3 - 65) = 6;
  sub_1BB59DDC8();
  v5 = *(_QWORD *)(v3 - 152);
  v6 = *(_QWORD *)(v3 - 96);
  sub_1BB873FFC();
  if (v6)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v0, v2);
    JUMPOUT(0x1BB596B98);
  }
  v7 = v0;
  v8 = sub_1BB874050();
  v10 = v9;
  v11 = v4;
  v12 = *(_QWORD *)(v3 - 144);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8))(v5, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v7, v2);
  v13 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)v13 = v8;
  *(_BYTE *)(v13 + 8) = v10 & 1;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BB59706CLL);
}

uint64_t sub_1BB5970E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatisticValue.init(from:)(a1, a2);
}

void sub_1BB5970FC(_QWORD *a1)
{
  PuzzleStatisticValue.encode(to:)(a1);
}

void PuzzleStatisticValue.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v5);
  sub_1BA4C2DD8(v0, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_1BB597240 + 4 * byte_1BB929CCF[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB597240()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*(unsigned __int8 *)(v0 + 8);
  *(_QWORD *)(v1 - 80) = 0x74615265766C6F73;
  *(_QWORD *)(v1 - 72) = 0xEA00000000002865;
  if ((v2 & 1) == 0)
    sub_1BB872FE8();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v3);
  return *(_QWORD *)(v1 - 80);
}

uint64_t sub_1BB59764C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574617265646F6DLL;
  if (*v0 != 1)
    v1 = 0x676E656C6C616863;
  if (*v0)
    return v1;
  else
    return 2037604709;
}

uint64_t sub_1BB5976A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5981C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5976CC()
{
  sub_1BB59DFE8();
  return sub_1BB874710();
}

uint64_t sub_1BB5976F4()
{
  sub_1BB59DFE8();
  return sub_1BB87471C();
}

uint64_t PuzzleStatisticDifficultyLevelValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_1BA4CDF6C(0, &qword_1EF2C7BA8, (uint64_t (*)(void))sub_1BB59DFE8, (uint64_t)&type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59DFE8();
  sub_1BB8746C8();
  v12 = 0;
  type metadata accessor for PuzzleStatisticValue(0);
  sub_1BA4A2870(&qword_1EF2C7A98, type metadata accessor for PuzzleStatisticValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticValue);
  sub_1BB8741AC();
  if (!v1)
  {
    type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
    v11 = 1;
    sub_1BB8741AC();
    v10 = 2;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PuzzleStatisticDifficultyLevelValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;
  char v33;

  v23 = a2;
  v27 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v27);
  v24 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v25 = (char *)&v21 - v5;
  MEMORY[0x1E0C80A78](v6);
  v26 = (char *)&v21 - v7;
  sub_1BA4CDF6C(0, &qword_1EF2C7BB8, (uint64_t (*)(void))sub_1BB59DFE8, (uint64_t)&type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v29 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59DFE8();
  v28 = v11;
  v15 = (uint64_t)v30;
  sub_1BB87468C();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = (uint64_t)v25;
  v22 = v9;
  v30 = a1;
  v33 = 0;
  sub_1BA4A2870(&qword_1EF2C7AE0, type metadata accessor for PuzzleStatisticValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticValue);
  v17 = (uint64_t)v26;
  sub_1BB8740D4();
  sub_1BA5193C4(v17, (uint64_t)v14, type metadata accessor for PuzzleStatisticValue);
  v32 = 1;
  sub_1BB8740D4();
  sub_1BA5193C4(v16, (uint64_t)&v14[*(int *)(v12 + 20)], type metadata accessor for PuzzleStatisticValue);
  v31 = 2;
  v18 = (uint64_t)v24;
  v19 = v28;
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v29);
  sub_1BA5193C4(v18, (uint64_t)&v14[*(int *)(v12 + 24)], type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8((uint64_t)v14, v23, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return sub_1BA4A2E80((uint64_t)v14, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
}

uint64_t sub_1BB597C34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatisticDifficultyLevelValue.init(from:)(a1, a2);
}

uint64_t sub_1BB597C48(_QWORD *a1)
{
  return PuzzleStatisticDifficultyLevelValue.encode(to:)(a1);
}

uint64_t PuzzleStatisticDifficultyLevelValue.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1BB873CB4();
  swift_bridgeObjectRelease();
  PuzzleStatisticValue.debugDescription.getter();
  sub_1BB872AFC(v0);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v1);
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  PuzzleStatisticValue.debugDescription.getter();
  sub_1BB872AFC(v2);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v3);
  PuzzleStatisticValue.debugDescription.getter();
  sub_1BB872AFC(v4);
  swift_bridgeObjectRelease();
  return 0x203A79736165;
}

uint64_t PuzzleStatisticDifficultyLevel.easy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PuzzleStatisticDifficultyLevel.moderate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t PuzzleStatisticDifficultyLevel.challenging.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t sub_1BB597DC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  char v20;

  v4 = MEMORY[0x1E0DEB418];
  sub_1BA6A09F0(a1, (uint64_t)v16, &qword_1ED3B9740, MEMORY[0x1E0DEB418]);
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  sub_1BA6A09F0((uint64_t)v16, (uint64_t)v17, &qword_1ED3B9740, v4);
  if ((v17[8] & 1) == 0)
  {
    sub_1BA6A09F0((uint64_t)v16, (uint64_t)&v19, &qword_1ED3B9740, MEMORY[0x1E0DEB418]);
    if ((v6 & 1) != 0 || v19 != v5)
      return 0;
LABEL_6:
    sub_1BA6A09F0(a1 + 16, (uint64_t)v15, &qword_1ED3B9740, v4);
    v7 = a2[2];
    v8 = *((_BYTE *)a2 + 24);
    sub_1BA6A09F0((uint64_t)v15, (uint64_t)v18, &qword_1ED3B9740, v4);
    if ((v18[8] & 1) != 0)
    {
      if ((v8 & 1) == 0)
        return 0;
    }
    else
    {
      sub_1BA6A09F0((uint64_t)v15, (uint64_t)&v19, &qword_1ED3B9740, MEMORY[0x1E0DEB418]);
      if ((v8 & 1) != 0 || v19 != v7)
        return 0;
    }
    v9 = MEMORY[0x1E0DEB418];
    sub_1BA6A09F0(a1 + 32, (uint64_t)v14, &qword_1ED3B9740, MEMORY[0x1E0DEB418]);
    v10 = a2[4];
    v11 = *((_BYTE *)a2 + 40);
    sub_1BA6A09F0((uint64_t)v14, (uint64_t)&v19, &qword_1ED3B9740, v9);
    if ((v20 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      sub_1BA6A09F0((uint64_t)v14, (uint64_t)&v13, &qword_1ED3B9740, MEMORY[0x1E0DEB418]);
      if ((v11 & 1) != 0 || v13 != v10)
        return 0;
    }
    return 1;
  }
  if ((v6 & 1) != 0)
    goto LABEL_6;
  return 0;
}

uint64_t sub_1BB597F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  char v6;
  double v7;
  char v8;
  uint64_t v9;
  double v10;
  char v11;
  double v13[2];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  double v19;
  char v20;

  v4 = MEMORY[0x1E0DEB070];
  sub_1BA6A09F0(a1, (uint64_t)v16, &qword_1ED3CF878, MEMORY[0x1E0DEB070]);
  v5 = *(double *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  sub_1BA6A09F0((uint64_t)v16, (uint64_t)v17, &qword_1ED3CF878, v4);
  if ((v17[8] & 1) == 0)
  {
    sub_1BA6A09F0((uint64_t)v16, (uint64_t)&v19, &qword_1ED3CF878, MEMORY[0x1E0DEB070]);
    if ((v6 & 1) != 0 || v19 != v5)
      return 0;
LABEL_6:
    sub_1BA6A09F0(a1 + 16, (uint64_t)v15, &qword_1ED3CF878, v4);
    v7 = *(double *)(a2 + 16);
    v8 = *(_BYTE *)(a2 + 24);
    sub_1BA6A09F0((uint64_t)v15, (uint64_t)v18, &qword_1ED3CF878, v4);
    if ((v18[8] & 1) != 0)
    {
      if ((v8 & 1) == 0)
        return 0;
    }
    else
    {
      sub_1BA6A09F0((uint64_t)v15, (uint64_t)&v19, &qword_1ED3CF878, MEMORY[0x1E0DEB070]);
      if ((v8 & 1) != 0 || v19 != v7)
        return 0;
    }
    v9 = MEMORY[0x1E0DEB070];
    sub_1BA6A09F0(a1 + 32, (uint64_t)v14, &qword_1ED3CF878, MEMORY[0x1E0DEB070]);
    v10 = *(double *)(a2 + 32);
    v11 = *(_BYTE *)(a2 + 40);
    sub_1BA6A09F0((uint64_t)v14, (uint64_t)&v19, &qword_1ED3CF878, v9);
    if ((v20 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      sub_1BA6A09F0((uint64_t)v14, (uint64_t)v13, &qword_1ED3CF878, MEMORY[0x1E0DEB070]);
      if ((v11 & 1) != 0 || v13[0] != v10)
        return 0;
    }
    return 1;
  }
  if ((v6 & 1) != 0)
    goto LABEL_6;
  return 0;
}

uint64_t static PuzzleStatisticDifficultyLevel.== infix(_:_:)()
{
  if ((sub_1BB872958() & 1) != 0)
    type metadata accessor for PuzzleStatisticDifficultyLevel();
  return 0;
}

uint64_t sub_1BB5981C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 2037604709 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617265646F6DLL && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E656C6C616863 && a2 == 0xEB00000000676E69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BB59831C(char a1)
{
  if (!a1)
    return 2037604709;
  if (a1 == 1)
    return 0x6574617265646F6DLL;
  return 0x676E656C6C616863;
}

uint64_t sub_1BB598374()
{
  char *v0;

  return sub_1BB59831C(*v0);
}

uint64_t sub_1BB598384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5981C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5983B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BA86D334();
  *a1 = result;
  return result;
}

uint64_t sub_1BB5983E4(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB92B2B0, a1);
  return sub_1BB874710();
}

uint64_t sub_1BB598418(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&unk_1BB92B2B0, a1);
  return sub_1BB87471C();
}

void PuzzleStatisticDifficultyLevel.encode(to:)()
{
  type metadata accessor for PuzzleStatisticDifficultyLevel.CodingKeys();
}

uint64_t sub_1BB598494(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x1BCCE5B24](&unk_1BB92B2B0, a1);
  v3 = sub_1BB8741D0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_1BB8746C8();
  *(_BYTE *)(v2 - 112) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  sub_1BB8741AC();
  if (!v7)
  {
    *(_BYTE *)(v2 - 112) = 1;
    sub_1BB8741AC();
    *(_BYTE *)(v2 - 112) = 2;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void PuzzleStatisticDifficultyLevel.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[18];

  v12[3] = a3;
  v12[7] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12[4] = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v12[6] = (char *)v12 - v5;
  MEMORY[0x1E0C80A78](v6);
  v12[8] = (char *)v12 - v7;
  v12[14] = v8;
  v12[15] = v9;
  v12[16] = v10;
  v12[17] = v11;
  type metadata accessor for PuzzleStatisticDifficultyLevel.CodingKeys();
}

void sub_1BB5986B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 120) = MEMORY[0x1BCCE5B24](&unk_1BB92B2B0, a1);
  v6 = sub_1BB874104();
  *(_QWORD *)(v5 - 144) = v6;
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)(v5 - 152) = v1;
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 88) = v2;
  type metadata accessor for PuzzleStatisticDifficultyLevel();
}

uint64_t sub_1BB59872C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v24 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v3 - 136) = v2;
  v8 = *(_QWORD *)(v3 - 72);
  sub_1BB87468C();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  *(_QWORD *)(v3 - 208) = v5;
  v9 = *(_QWORD *)(v3 - 184);
  v10 = *(_QWORD *)(v3 - 176);
  *(_QWORD *)(v3 - 120) = v7;
  *(_QWORD *)(v3 - 72) = v1;
  v12 = *(_QWORD *)(v3 - 168);
  v11 = *(_QWORD *)(v3 - 160);
  *(_BYTE *)(v3 - 112) = 0;
  v14 = *(_QWORD *)(v3 - 152);
  v13 = *(_QWORD *)(v3 - 144);
  sub_1BB8740D4();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v16 = *(_QWORD *)(v3 - 120);
  *(_QWORD *)(v3 - 160) = v15;
  v15(v16, v11, v14);
  *(_BYTE *)(v3 - 112) = 1;
  sub_1BB8740D4();
  *(_QWORD *)(v3 - 216) = a1;
  v17 = *(int *)(a1 + 52);
  v18 = *(_QWORD *)(v3 - 120);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 - 160);
  v19(v18 + v17, v10, v14);
  *(_BYTE *)(v3 - 112) = 2;
  v20 = *(_QWORD *)(v3 - 136);
  sub_1BB8740D4();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v20, v13);
  v21 = *(_QWORD *)(v3 - 216);
  v19(v18 + *(int *)(v21 + 56), *(_QWORD *)(v3 - 192), v14);
  v22 = *(_QWORD *)(v3 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v22 + 16))(*(_QWORD *)(v3 - 200), v18, v21);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v18, v21);
}

void sub_1BB598970(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  PuzzleStatisticDifficultyLevel.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_1BB598990()
{
  PuzzleStatisticDifficultyLevel.encode(to:)();
}

uint64_t sub_1BB5989A4()
{
  return static PuzzleStatisticDifficultyLevel.== infix(_:_:)();
}

uint64_t PuzzleStatisticsGroupedValue.totalSolved.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PuzzleStatisticsGroupedValue.solveRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PuzzleStatisticsGroupedValue.longestStreak.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  return sub_1BA5E01A4(v1 + *(int *)(v3 + 24), a1, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
}

uint64_t PuzzleStatisticsGroupedValue.currentStreak.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  return sub_1BA5E01A4(v1 + *(int *)(v3 + 28), a1, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
}

uint64_t PuzzleStatisticsGroupedValue.fastestTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 32));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = v4[2];
  v8 = *((_BYTE *)v4 + 24);
  v9 = v4[4];
  LOBYTE(v4) = *((_BYTE *)v4 + 40);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = (_BYTE)v4;
  return result;
}

uint64_t PuzzleStatisticsGroupedValue.averageTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = v4[2];
  v8 = *((_BYTE *)v4 + 24);
  v9 = v4[4];
  LOBYTE(v4) = *((_BYTE *)v4 + 40);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = (_BYTE)v4;
  return result;
}

uint64_t PuzzleStatisticsGroupedValue.highestScore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 40));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = v4[2];
  v8 = *((_BYTE *)v4 + 24);
  v9 = v4[4];
  LOBYTE(v4) = *((_BYTE *)v4 + 40);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = (_BYTE)v4;
  return result;
}

uint64_t sub_1BB598B64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB598B9C + 4 * byte_1BB929CD6[*v0]))(0x6C6F536C61746F74, 0xEB00000000646576);
}

uint64_t sub_1BB598B9C()
{
  return 0x74615265766C6F73;
}

uint64_t sub_1BB598BB8()
{
  return 0x53747365676E6F6CLL;
}

uint64_t sub_1BB598BEC()
{
  return 0x5474736574736166;
}

uint64_t sub_1BB598C20()
{
  return 0x5374736568676968;
}

uint64_t sub_1BB598C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5A718C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB598C64()
{
  sub_1BB59E044();
  return sub_1BB874710();
}

uint64_t sub_1BB598C8C()
{
  sub_1BB59E044();
  return sub_1BB87471C();
}

uint64_t PuzzleStatisticsGroupedValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C7BC0, (uint64_t (*)(void))sub_1BB59E044, (uint64_t)&type metadata for PuzzleStatisticsGroupedValue.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v30 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59E044();
  sub_1BB8746C8();
  LOBYTE(v30) = 0;
  sub_1BB8741A0();
  if (!v2)
  {
    LOBYTE(v30) = 1;
    sub_1BB874134();
    v10 = (int *)type metadata accessor for PuzzleStatisticsGroupedValue(0);
    LOBYTE(v30) = 2;
    type metadata accessor for PuzzleStreak();
    sub_1BA4A2870(&qword_1ED3A29A0, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t)&protocol conformance descriptor for PuzzleStreak);
    sub_1BB87414C();
    LOBYTE(v30) = 3;
    sub_1BB87414C();
    v11 = (uint64_t *)(v3 + v10[8]);
    v12 = *v11;
    v13 = *((_BYTE *)v11 + 8);
    v14 = v11[2];
    v15 = *((_BYTE *)v11 + 24);
    v16 = v11[4];
    LOBYTE(v11) = *((_BYTE *)v11 + 40);
    v30 = v12;
    v31 = v13;
    v32 = v14;
    v33 = v15;
    v34 = v16;
    v35 = (char)v11;
    v36 = 4;
    sub_1BB59E088();
    sub_1BA4A2870(&qword_1EF2C7BF0, (uint64_t (*)(uint64_t))sub_1BB59E088, (uint64_t)&protocol conformance descriptor for PuzzleStatisticDifficultyLevel<A>);
    sub_1BB8741AC();
    v17 = (uint64_t *)(v3 + v10[9]);
    v18 = *v17;
    v19 = *((_BYTE *)v17 + 8);
    v20 = v17[2];
    v21 = *((_BYTE *)v17 + 24);
    v22 = v17[4];
    LOBYTE(v17) = *((_BYTE *)v17 + 40);
    v30 = v18;
    v31 = v19;
    v32 = v20;
    v33 = v21;
    v34 = v22;
    v35 = (char)v17;
    v36 = 5;
    sub_1BB59E1E0();
    sub_1BA4A2870(&qword_1EF2C7C18, (uint64_t (*)(uint64_t))sub_1BB59E1E0, (uint64_t)&protocol conformance descriptor for PuzzleStatisticDifficultyLevel<A>);
    sub_1BB8741AC();
    v23 = (uint64_t *)(v3 + v10[10]);
    v24 = *v23;
    v25 = *((_BYTE *)v23 + 8);
    v26 = v23[2];
    v27 = *((_BYTE *)v23 + 24);
    v28 = v23[4];
    LOBYTE(v23) = *((_BYTE *)v23 + 40);
    v30 = v24;
    v31 = v25;
    v32 = v26;
    v33 = v27;
    v34 = v28;
    v35 = (char)v23;
    v36 = 6;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PuzzleStatisticsGroupedValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;

  v49 = a2;
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v50 = (char *)&v45 - v6;
  sub_1BA4CDF6C(0, &qword_1EF2C7C20, (uint64_t (*)(void))sub_1BB59E044, (uint64_t)&type metadata for PuzzleStatisticsGroupedValue.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v52 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v45 - v9;
  v11 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59E044();
  v53 = v10;
  v14 = (uint64_t)v54;
  sub_1BB87468C();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = (uint64_t)v50;
  v16 = v51;
  v17 = v8;
  v54 = a1;
  LOBYTE(v55) = 0;
  *(_QWORD *)v13 = sub_1BB8740C8();
  LOBYTE(v55) = 1;
  *((_QWORD *)v13 + 1) = sub_1BB874044();
  v13[16] = v18 & 1;
  v19 = type metadata accessor for PuzzleStreak();
  LOBYTE(v55) = 2;
  sub_1BA4A2870(&qword_1ED3A29A8, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t)&protocol conformance descriptor for PuzzleStreak);
  v47 = v19;
  v48 = v13;
  sub_1BB874068();
  v46 = (int *)v11;
  sub_1BA646EFC(v15, (uint64_t)&v48[*(int *)(v11 + 24)], &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  LOBYTE(v55) = 3;
  v20 = (uint64_t)v16;
  sub_1BB874068();
  v21 = v46;
  v22 = (uint64_t)v48;
  sub_1BA646EFC(v20, (uint64_t)&v48[v46[7]], &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BB59E088();
  v61 = 4;
  v23 = sub_1BA4A2870(&qword_1EF2C7C28, (uint64_t (*)(uint64_t))sub_1BB59E088, (uint64_t)&protocol conformance descriptor for PuzzleStatisticDifficultyLevel<A>);
  v24 = v53;
  sub_1BB8740D4();
  v51 = (char *)v23;
  v25 = v56;
  v26 = v57;
  v27 = v58;
  v28 = v59;
  v29 = v60;
  v30 = v22 + v21[8];
  *(_QWORD *)v30 = v55;
  *(_BYTE *)(v30 + 8) = v25;
  *(_QWORD *)(v30 + 16) = v26;
  *(_BYTE *)(v30 + 24) = v27;
  *(_QWORD *)(v30 + 32) = v28;
  *(_BYTE *)(v30 + 40) = v29;
  sub_1BB59E1E0();
  v61 = 5;
  sub_1BA4A2870(&qword_1EF2C7C30, (uint64_t (*)(uint64_t))sub_1BB59E1E0, (uint64_t)&protocol conformance descriptor for PuzzleStatisticDifficultyLevel<A>);
  sub_1BB8740D4();
  v31 = v56;
  v32 = v57;
  v33 = v58;
  v34 = v59;
  v35 = v60;
  v36 = v22 + v21[9];
  *(_QWORD *)v36 = v55;
  *(_BYTE *)(v36 + 8) = v31;
  *(_QWORD *)(v36 + 16) = v32;
  *(_BYTE *)(v36 + 24) = v33;
  *(_QWORD *)(v36 + 32) = v34;
  *(_BYTE *)(v36 + 40) = v35;
  v61 = 6;
  v37 = v52;
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v37);
  v38 = v56;
  v39 = v57;
  v40 = v58;
  v41 = v59;
  v42 = v60;
  v43 = v22 + v21[10];
  *(_QWORD *)v43 = v55;
  *(_BYTE *)(v43 + 8) = v38;
  *(_QWORD *)(v43 + 16) = v39;
  *(_BYTE *)(v43 + 24) = v40;
  *(_QWORD *)(v43 + 32) = v41;
  *(_BYTE *)(v43 + 40) = v42;
  sub_1BA4C2DD8(v22, v49, type metadata accessor for PuzzleStatisticsGroupedValue);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  return sub_1BA4A2E80(v22, type metadata accessor for PuzzleStatisticsGroupedValue);
}

uint64_t sub_1BB5995A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatisticsGroupedValue.init(from:)(a1, a2);
}

uint64_t sub_1BB5995B8(_QWORD *a1)
{
  return PuzzleStatisticsGroupedValue.encode(to:)(a1);
}

unint64_t sub_1BB5995CC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x73656972746E65;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1BB599628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5A7510(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB59964C()
{
  sub_1BB59E3CC();
  return sub_1BB874710();
}

uint64_t sub_1BB599674()
{
  sub_1BB59E3CC();
  return sub_1BB87471C();
}

uint64_t PuzzleStatisticsGameCenterLeaderboardResult.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C7C38, (uint64_t (*)(void))sub_1BB59E3CC, (uint64_t)&type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59E3CC();
  sub_1BB8746C8();
  v14 = 0;
  type metadata accessor for PuzzleLeaderboardEntry();
  sub_1BA4A2870(&qword_1EF2C7C48, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t)&protocol conformance descriptor for PuzzleLeaderboardEntry);
  sub_1BB8741AC();
  if (!v2)
  {
    v11[1] = *(_QWORD *)(v3 + *(int *)(type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0) + 20));
    v13 = 1;
    sub_1BA4B07F0(0, &qword_1EF2C7C50, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB59E410(&qword_1EF2C7C58, &qword_1EF2C7C48, (uint64_t)&protocol conformance descriptor for PuzzleLeaderboardEntry, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
    v12 = 2;
    sub_1BB8741A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PuzzleStatisticsGameCenterLeaderboardResult.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v18 = a2;
  v19 = type metadata accessor for PuzzleLeaderboardEntry();
  MEMORY[0x1E0C80A78](v19);
  v20 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C7C60, (uint64_t (*)(void))sub_1BB59E3CC, (uint64_t)&type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v21 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - v6;
  v8 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB59E3CC();
  v22 = v7;
  v11 = v23;
  sub_1BB87468C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v5;
  v27 = 0;
  sub_1BA4A2870(&qword_1EF2C7C68, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t)&protocol conformance descriptor for PuzzleLeaderboardEntry);
  v13 = (uint64_t)v20;
  v14 = v21;
  sub_1BB8740D4();
  sub_1BA5193C4(v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleLeaderboardEntry);
  sub_1BA4B07F0(0, &qword_1EF2C7C50, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v26 = 1;
  sub_1BB59E410(&qword_1EF2C7C70, &qword_1EF2C7C68, (uint64_t)&protocol conformance descriptor for PuzzleLeaderboardEntry, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  *(_QWORD *)&v10[*(int *)(v8 + 20)] = v24;
  v25 = 2;
  v15 = sub_1BB8740C8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v14);
  *(_QWORD *)&v10[*(int *)(v8 + 24)] = v15;
  sub_1BA4C2DD8((uint64_t)v10, v18, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BA4A2E80((uint64_t)v10, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
}

uint64_t sub_1BB599BB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PuzzleStatisticsGameCenterLeaderboardResult.init(from:)(a1, a2);
}

uint64_t sub_1BB599BCC(_QWORD *a1)
{
  return PuzzleStatisticsGameCenterLeaderboardResult.encode(to:)(a1);
}

void *static PuzzleDifficultyLevel.allCases.getter()
{
  return &unk_1E7270F20;
}

uint64_t sub_1BB599BEC()
{
  sub_1BB8745CC();
  sub_1BB8745FC();
  return sub_1BB874608();
}

uint64_t sub_1BB599C38()
{
  return sub_1BB8745FC();
}

uint64_t sub_1BB599C6C()
{
  sub_1BB8745CC();
  sub_1BB8745FC();
  return sub_1BB874608();
}

NewsFeed::PuzzleDifficultyLevel_optional sub_1BB599CB4(Swift::Int64 *a1)
{
  return PuzzleDifficultyLevel.init(rawValue:)(*a1);
}

void sub_1BB599CBC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = 10 * *v1 + 10;
}

void sub_1BB599CD4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7252518;
}

void PuzzleStatisticValue.statisticType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v1);
  sub_1BA4C2DD8(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1BB599D70 + 4 * byte_1BB929CDD[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1BB599D70()
{
  _BYTE *v0;

  *v0 = 3;
}

uint64_t PuzzleStatisticDifficultyLevelValue.statisticType.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t result;
  char v11;
  uint64_t v12;

  v3 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - v7;
  sub_1BA4C2DD8(v1, (uint64_t)&v12 - v7, v9);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    goto LABEL_5;
  sub_1BA4A2E80((uint64_t)v8, type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8(v1, (uint64_t)v5, type metadata accessor for PuzzleStatisticValue);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 3)
  {
    result = sub_1BA4A2E80((uint64_t)v5, type metadata accessor for PuzzleStatisticValue);
LABEL_5:
    v11 = 4;
    goto LABEL_6;
  }
  v11 = 5;
LABEL_6:
  *a1 = v11;
  return result;
}

uint64_t PuzzleStatisticCategory.isValid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v12;

  v1 = v0;
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - v3;
  v5 = type metadata accessor for PuzzleStatisticCategory(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_1BA646EFC((uint64_t)v7, (uint64_t)v4, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
    v9 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
    v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) != 1;
    sub_1BA5C699C((uint64_t)v4, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
  }
  else
  {
    sub_1BA4A2E80((uint64_t)v7, type metadata accessor for PuzzleStatisticCategory);
    return 1;
  }
  return v10;
}

void PuzzleStatisticValue.hasValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v3);
  sub_1BA4C2DD8(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)sub_1BB59A114 + 4 * byte_1BB929CE4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB59A114()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 8) ^ 1) & 1;
}

void PuzzleStatisticDifficultyLevelValue.hasValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v5);
  sub_1BA4C2DD8(v0, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_1BB59A33C + 4 * byte_1BB929CEB[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB59A33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v4 = *(_BYTE *)(v3 + 8);
  sub_1BA4C2DD8(v1, v2, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  if ((v4 & 1) != 0)
  {
    PuzzleStatisticValue.hasValue.getter();
    v6 = v5;
    sub_1BA4A2E80(v2, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    sub_1BA4C2DD8(v1, v0, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    if ((v6 & 1) != 0)
    {
      v7 = 1;
    }
    else
    {
      PuzzleStatisticValue.hasValue.getter();
      v7 = v8;
    }
  }
  else
  {
    sub_1BA4A2E80(v2, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    sub_1BA4C2DD8(v1, v0, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    v7 = 1;
  }
  sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  return v7 & 1;
}

void PuzzleStatisticValue.primaryValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = type metadata accessor for PuzzleStreak();
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v1);
  sub_1BA4B07F0(0, &qword_1ED3C2120, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v7);
  sub_1BA4C2DD8(v0, (uint64_t)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v10 = (char *)sub_1BB59A678 + 4 * byte_1BB929CF2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

double sub_1BB59A678()
{
  _BYTE *v0;
  double v1;

  v1 = -1.0;
  if ((v0[8] & 1) == 0)
    return *(double *)v0;
  return v1;
}

void PuzzleStatisticDifficultyLevelValue.secondaryValue.getter()
{
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  PuzzleStatisticValue.primaryValue.getter();
}

void PuzzleStatisticDifficultyLevelValue.tertiaryValue.getter()
{
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  PuzzleStatisticValue.primaryValue.getter();
}

void PuzzleStatisticValue.primaryDisplayValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  _QWORD v13[10];

  v1 = type metadata accessor for PuzzleStreak();
  MEMORY[0x1E0C80A78](v1);
  v13[1] = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  sub_1BA4B07F0(0, &qword_1ED3C2120, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v9);
  sub_1BA4C2DD8(v0, (uint64_t)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = (char *)&loc_1BB59AA34 + *((int *)qword_1BB59AE90 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_1BB59AA44()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0;
  else
    return sub_1BB872FDC();
}

void PuzzleStatisticDifficultyLevelValue.secondaryDisplayValue.getter()
{
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  PuzzleStatisticValue.primaryDisplayValue.getter();
}

void PuzzleStatisticDifficultyLevelValue.tertiaryDisplayValue.getter()
{
  type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  PuzzleStatisticValue.primaryDisplayValue.getter();
}

void static PuzzleStatisticDifficultyLevelValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  _s8NewsFeed20PuzzleStatisticValueO2eeoiySbAC_ACtFZ_0(a1, a2);
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
    _s8NewsFeed20PuzzleStatisticValueO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v5 + 20), a2 + *(int *)(v5 + 20));
    if ((v6 & 1) != 0)
      _s8NewsFeed20PuzzleStatisticValueO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v5 + 24), a2 + *(int *)(v5 + 24));
  }
}

BOOL sub_1BB59AF98(uint64_t a1, uint64_t a2)
{
  return (static PuzzleStatisticCategory.< infix(_:_:)(a2, a1) & 1) == 0;
}

BOOL sub_1BB59AFC0(uint64_t a1, uint64_t a2)
{
  char v2;

  _s8NewsFeed23PuzzleStatisticCategoryO1loiySbAC_ACtFZ_0(a1, a2);
  return (v2 & 1) == 0;
}

uint64_t sub_1BB59AFDC(uint64_t a1, uint64_t a2)
{
  return static PuzzleStatisticCategory.< infix(_:_:)(a2, a1);
}

BOOL sub_1BB59AFF0(uint64_t a1, uint64_t a2)
{
  return (static PuzzleStatisticValue.< infix(_:_:)(a2, a1) & 1) == 0;
}

BOOL sub_1BB59B018(uint64_t a1, uint64_t a2)
{
  char v2;

  _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0(a1, a2);
  return (v2 & 1) == 0;
}

uint64_t sub_1BB59B034(uint64_t a1, uint64_t a2)
{
  return static PuzzleStatisticValue.< infix(_:_:)(a2, a1);
}

uint64_t sub_1BB59B048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((((uint64_t (*)(void))static PuzzleStatisticValue.== infix(_:_:))() & 1) != 0
    && (static PuzzleStatisticValue.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    return static PuzzleStatisticValue.== infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
  }
  else
  {
    return 0;
  }
}

BOOL sub_1BB59B0B4(uint64_t a1, uint64_t a2)
{
  return (static PuzzleStatisticDifficultyLevelValue.< infix(_:_:)(a2, a1) & 1) == 0;
}

BOOL sub_1BB59B0DC(uint64_t a1, uint64_t a2)
{
  return (_s8NewsFeed35PuzzleStatisticDifficultyLevelValueV1loiySbAC_ACtFZ_0(a1, a2) & 1) == 0;
}

uint64_t sub_1BB59B0F8(uint64_t a1, uint64_t a2)
{
  return static PuzzleStatisticDifficultyLevelValue.< infix(_:_:)(a2, a1);
}

BOOL sub_1BB59B10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s8NewsFeed22PuzzleLeaderboardEntryV2eeoiySbAC_ACtFZ_0(a1, a2)
      && sub_1BA880468(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)))
      && *(_QWORD *)(a1 + *(int *)(a3 + 24)) == *(_QWORD *)(a2 + *(int *)(a3 + 24));
}

BOOL sub_1BB59B178(uint64_t a1, uint64_t a2)
{
  return (static PuzzleStatisticsGroupedValue.< infix(_:_:)(a2, a1) & 1) == 0;
}

BOOL sub_1BB59B1A0(uint64_t a1, uint64_t a2)
{
  return !_s8NewsFeed28PuzzleStatisticsGroupedValueV1loiySbAC_ACtFZ_0(a1, a2);
}

uint64_t sub_1BB59B1BC(uint64_t a1, uint64_t a2)
{
  return static PuzzleStatisticsGroupedValue.< infix(_:_:)(a2, a1);
}

void sub_1BB59B1CC(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for PuzzleLeaderboardEntry() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1BACAB7F8(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1BAA2763C(v5);
  *a1 = v3;
}

BOOL _s8NewsFeed43PuzzleStatisticsGameCenterLeaderboardResultV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  char v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  if ((sub_1BB86C868() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = sub_1BB874398(), result = 0, (v10 & 1) != 0))
  {
    v12 = a1 + v4[6];
    v13 = *(_QWORD *)(v12 + 8);
    v19[0] = *(_QWORD *)v12;
    v19[1] = v13;
    v20 = *(_OWORD *)(v12 + 16);
    v14 = a2 + v4[6];
    v15 = *(_QWORD *)(v14 + 8);
    v17[0] = *(_QWORD *)v14;
    v17[1] = v15;
    v18 = *(_OWORD *)(v14 + 16);
    if (_s8NewsFeed12PuzzlePlayerV2eeoiySbAC_ACtFZ_0(v19, v17)
      && *(_QWORD *)(a1 + v4[7]) == *(_QWORD *)(a2 + v4[7])
      && *(_QWORD *)(a1 + v4[8]) == *(_QWORD *)(a2 + v4[8]))
    {
      v16 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
      if (sub_1BA880468(*(_QWORD *)(a1 + *(int *)(v16 + 20)), *(_QWORD *)(a2 + *(int *)(v16 + 20))))
        return *(_QWORD *)(a1 + *(int *)(v16 + 24)) == *(_QWORD *)(a2 + *(int *)(v16 + 24));
    }
    return 0;
  }
  return result;
}

BOOL _s8NewsFeed28PuzzleStatisticsGroupedValueV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  int *v18;
  int *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v32 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - v14;
  v16 = *(double *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16))
    v16 = 0.0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    if (v16 < 0.0)
      return 1;
  }
  else if (v16 < *(double *)(a2 + 8))
  {
    return 1;
  }
  if (*(_QWORD *)a1 < *(_QWORD *)a2)
    return 1;
  v18 = (int *)type metadata accessor for PuzzleStatisticsGroupedValue(0);
  v19 = v18;
  v20 = v18[9];
  v21 = *(double *)(a1 + v20);
  if (*(_BYTE *)(a1 + v20 + 8))
    v21 = 0.0;
  v22 = a2 + v20;
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
  {
    if (v21 < 0.0)
      return 1;
  }
  else if (v21 < *(double *)v22)
  {
    return 1;
  }
  v23 = v18[8];
  if (*(_BYTE *)(a1 + v23 + 8))
    v24 = 0;
  else
    v24 = *(_QWORD *)(a1 + v23);
  v25 = a2 + v23;
  if ((*(_BYTE *)(v25 + 8) & 1) != 0)
  {
    if (v24 < 0)
      return 1;
  }
  else if (v24 < *(_QWORD *)v25)
  {
    return 1;
  }
  sub_1BA5E01A4(a1 + v18[7], (uint64_t)v15, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v26 = type metadata accessor for PuzzleStreak();
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
  if (v27(v15, 1, v26) == 1)
  {
    sub_1BA5C699C((uint64_t)v15, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    v28 = 0;
  }
  else
  {
    v28 = PuzzleStreak.days.getter();
    sub_1BA4A2E80((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  }
  sub_1BA5E01A4(a2 + v19[7], (uint64_t)v12, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v27(v12, 1, v26) == 1)
  {
    sub_1BA5C699C((uint64_t)v12, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    if (v28 < 0)
      return 1;
  }
  else
  {
    v29 = PuzzleStreak.days.getter();
    sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    if (v28 < v29)
      return 1;
  }
  sub_1BA5E01A4(a1 + v19[6], (uint64_t)v9, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v27(v9, 1, v26) == 1)
  {
    sub_1BA5C699C((uint64_t)v9, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    v30 = 0;
  }
  else
  {
    v30 = PuzzleStreak.days.getter();
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  }
  sub_1BA5E01A4(a2 + v19[6], (uint64_t)v6, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v27(v6, 1, v26) == 1)
  {
    sub_1BA5C699C((uint64_t)v6, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    v31 = 0;
  }
  else
  {
    v31 = PuzzleStreak.days.getter();
    sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  }
  return v30 < v31;
}

uint64_t _s8NewsFeed35PuzzleStatisticDifficultyLevelValueV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v23;

  v4 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - v14;
  _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0(a1, a2);
  v17 = v16;
  sub_1BA4C2DD8(a1, (uint64_t)v15, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  sub_1BA4C2DD8(a2, (uint64_t)v12, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  if ((v17 & 1) == 0)
  {
    sub_1BA4A2E80((uint64_t)v12, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    sub_1BA4A2E80((uint64_t)v15, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    sub_1BA4C2DD8(a1, (uint64_t)v9, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    sub_1BA4C2DD8(a2, (uint64_t)v6, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
    goto LABEL_5;
  }
  _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0((uint64_t)&v15[*(int *)(v4 + 20)], (uint64_t)&v12[*(int *)(v4 + 20)]);
  v19 = v18;
  sub_1BA4A2E80((uint64_t)v12, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  sub_1BA4C2DD8(a1, (uint64_t)v9, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  sub_1BA4C2DD8(a2, (uint64_t)v6, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  if ((v19 & 1) == 0)
  {
LABEL_5:
    v21 = 0;
    goto LABEL_6;
  }
  _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0((uint64_t)&v9[*(int *)(v4 + 24)], (uint64_t)&v6[*(int *)(v4 + 24)]);
  v21 = v20;
LABEL_6:
  sub_1BA4A2E80((uint64_t)v6, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  sub_1BA4A2E80((uint64_t)v9, type metadata accessor for PuzzleStatisticDifficultyLevelValue);
  return v21 & 1;
}

void _s8NewsFeed23PuzzleStatisticCategoryO1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD v23[3];
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v28 = a2;
  v3 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v3);
  v27 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v25 = (char *)v23 - v6;
  v24 = type metadata accessor for PuzzleLeaderboardEntry();
  MEMORY[0x1E0C80A78](v24);
  v23[2] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v23[1] = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v26 = (char *)v23 - v12;
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v16 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  sub_1BA9ED538(0, (unint64_t *)&qword_1ED3AD790, (void (*)(uint64_t))type metadata accessor for PuzzleStatisticCategory);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v23 + *(int *)(v20 + 48) - v19;
  sub_1BA4C2DD8(a1, (uint64_t)v23 - v19, type metadata accessor for PuzzleStatisticCategory);
  sub_1BA4C2DD8(v28, (uint64_t)v21, type metadata accessor for PuzzleStatisticCategory);
  type metadata accessor for PuzzleStatisticCategory(0);
  v22 = (char *)sub_1BB59BB94 + 4 * byte_1BB929CF9[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB59BB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  char v8;
  char v9;

  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BA4A2E80(v1, type metadata accessor for PuzzleStatisticValue);
    sub_1BA4A2E80(v3, type metadata accessor for PuzzleStatisticCategory);
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v4 = sub_1BB86EFEC();
    __swift_project_value_buffer(v4, (uint64_t)qword_1ED476918);
    v5 = sub_1BB86EFC8();
    v6 = sub_1BB8732F4();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1BA493000, v5, v6, "Can't compare non-matching PuzzleStatisticCategory values", v7, 2u);
      MEMORY[0x1BCCE5C38](v7, -1, -1);
    }

    v8 = 0;
  }
  else
  {
    sub_1BA5193C4(v1, v2, type metadata accessor for PuzzleStatisticValue);
    sub_1BA5193C4(v3, v0, type metadata accessor for PuzzleStatisticValue);
    _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0(v2, v0);
    v8 = v9;
    sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticValue);
    sub_1BA4A2E80(v2, type metadata accessor for PuzzleStatisticValue);
  }
  return v8 & 1;
}

void _s8NewsFeed20PuzzleStatisticValueO1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD v20[4];

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v20[3] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  v20[1] = (char *)v20 - v9;
  MEMORY[0x1E0C80A78](v10);
  v20[2] = (char *)v20 - v11;
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  sub_1BA9ED538(0, &qword_1EF2C7F30, (void (*)(uint64_t))type metadata accessor for PuzzleStatisticValue);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v20 + *(int *)(v17 + 48) - v16;
  sub_1BA4C2DD8(a1, (uint64_t)v20 - v16, type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8(a2, (uint64_t)v18, type metadata accessor for PuzzleStatisticValue);
  type metadata accessor for PuzzleStatisticValue(0);
  v19 = (char *)sub_1BB59C170 + 4 * byte_1BB929CFD[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1BB59C170()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticValue);
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v5 = sub_1BB86EFEC();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED476918);
    v6 = sub_1BB86EFC8();
    v7 = sub_1BB8732F4();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1BA493000, v6, v7, "Can't compare non-matching PuzzleStatisticValue values", v8, 2u);
      MEMORY[0x1BCCE5C38](v8, -1, -1);
    }

    return 0;
  }
  else
  {
    v2 = *(double *)v1;
    v3 = *(double *)v0;
    if (*(_BYTE *)(v1 + 8))
      v2 = 0.0;
    if (*(_BYTE *)(v0 + 8))
      v3 = 0.0;
    return v2 < v3;
  }
}

uint64_t _s8NewsFeed28PuzzleStatisticsGroupedValueV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  __int128 v55;
  __int128 *v56;
  __int128 v57;
  __int128 *v58;
  __int128 v59;
  __int128 *v60;
  __int128 v61;
  __int128 *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _OWORD v77[2];
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  _OWORD v81[2];
  __int128 v82;
  _OWORD v83[2];
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  _OWORD v87[3];

  v4 = type metadata accessor for PuzzleStreak();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAEE7C2C(0, &qword_1EF2C7F38, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v75 = v8;
  MEMORY[0x1E0C80A78](v8);
  v73 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v74 = (uint64_t)&v64 - v11;
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v64 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v64 - v19;
  MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v64 - v25;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_22;
  v27 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      goto LABEL_22;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v27 = 1;
    if ((v27 & 1) != 0)
      goto LABEL_22;
  }
  v71 = v24;
  v72 = v23;
  v66 = v22;
  v67 = v7;
  v28 = v4;
  v29 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  v30 = *(int *)(v29 + 24);
  v69 = a1;
  sub_1BA5E01A4(a1 + v30, (uint64_t)v26, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v68 = v29;
  v31 = *(int *)(v29 + 24);
  v32 = v28;
  v70 = a2;
  sub_1BA5E01A4(a2 + v31, (uint64_t)v20, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v33 = v74;
  v34 = v74 + *(int *)(v75 + 48);
  sub_1BA5E01A4((uint64_t)v26, v74, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BA5E01A4((uint64_t)v20, v34, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v35(v33, 1, v32) == 1)
  {
    sub_1BA5C699C((uint64_t)v20, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    sub_1BA5C699C((uint64_t)v26, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    if (v35(v34, 1, v32) == 1)
    {
      sub_1BA5C699C(v33, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
      v36 = (uint64_t)v67;
      goto LABEL_15;
    }
LABEL_13:
    v37 = v33;
LABEL_21:
    sub_1BAEE7BF0(v37, &qword_1EF2C7F38, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    goto LABEL_22;
  }
  sub_1BA5E01A4(v33, (uint64_t)v17, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v35(v34, 1, v32) == 1)
  {
    sub_1BA5C699C((uint64_t)v20, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    sub_1BA5C699C((uint64_t)v26, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    sub_1BA4A2E80((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    goto LABEL_13;
  }
  v38 = v33;
  v36 = (uint64_t)v67;
  sub_1BA5193C4(v34, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  v65 = PuzzleStreak.days.getter();
  v64 = PuzzleStreak.days.getter();
  sub_1BA4A2E80(v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  sub_1BA5C699C((uint64_t)v20, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BA5C699C((uint64_t)v26, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BA4A2E80((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
  sub_1BA5C699C(v38, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v65 != v64)
    goto LABEL_22;
LABEL_15:
  v39 = v68;
  v40 = v72;
  sub_1BA5E01A4(v69 + *(int *)(v68 + 28), v72, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v41 = v71;
  sub_1BA5E01A4(v70 + *(int *)(v39 + 28), v71, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  v42 = v73;
  v43 = v73 + *(int *)(v75 + 48);
  sub_1BA5E01A4(v40, v73, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BA5E01A4(v41, v43, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v35(v42, 1, v32) != 1)
  {
    v44 = v66;
    sub_1BA5E01A4(v42, v66, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    if (v35(v43, 1, v32) != 1)
    {
      sub_1BA5193C4(v43, v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v47 = PuzzleStreak.days.getter();
      v48 = PuzzleStreak.days.getter();
      sub_1BA4A2E80(v36, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      sub_1BA5C699C(v71, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
      sub_1BA5C699C(v72, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
      sub_1BA4A2E80(v44, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      sub_1BA5C699C(v42, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
      if (v47 != v48)
        goto LABEL_22;
      goto LABEL_25;
    }
    sub_1BA5C699C(v71, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    sub_1BA5C699C(v72, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
    sub_1BA4A2E80(v44, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    goto LABEL_20;
  }
  sub_1BA5C699C(v41, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  sub_1BA5C699C(v40, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  if (v35(v43, 1, v32) != 1)
  {
LABEL_20:
    v37 = v42;
    goto LABEL_21;
  }
  sub_1BA5C699C(v42, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
LABEL_25:
  v50 = v68;
  v49 = v69;
  v51 = (__int128 *)(v69 + *(int *)(v68 + 32));
  *(_OWORD *)((char *)v85 + 9) = *(__int128 *)((char *)v51 + 25);
  v52 = v51[1];
  v84 = *v51;
  v85[0] = v52;
  v53 = v70;
  v54 = (__int128 *)(v70 + *(int *)(v68 + 32));
  *(_OWORD *)((char *)v87 + 9) = *(__int128 *)((char *)v54 + 25);
  v55 = v54[1];
  v86 = *v54;
  v87[0] = v55;
  if ((sub_1BB597DC4((uint64_t)&v84, (uint64_t *)&v86) & 1) != 0)
  {
    v56 = (__int128 *)(v49 + *(int *)(v50 + 36));
    *(_OWORD *)((char *)v81 + 9) = *(__int128 *)((char *)v56 + 25);
    v57 = v56[1];
    v80 = *v56;
    v81[0] = v57;
    v58 = (__int128 *)(v53 + *(int *)(v50 + 36));
    *(_OWORD *)((char *)v83 + 9) = *(__int128 *)((char *)v58 + 25);
    v59 = v58[1];
    v82 = *v58;
    v83[0] = v59;
    if ((sub_1BB597F68((uint64_t)&v80, (uint64_t)&v82) & 1) != 0)
    {
      v60 = (__int128 *)(v49 + *(int *)(v50 + 40));
      *(_OWORD *)((char *)v77 + 9) = *(__int128 *)((char *)v60 + 25);
      v61 = v60[1];
      v76 = *v60;
      v77[0] = v61;
      v62 = (__int128 *)(v53 + *(int *)(v50 + 40));
      *(_OWORD *)((char *)v79 + 9) = *(__int128 *)((char *)v62 + 25);
      v63 = v62[1];
      v78 = *v62;
      v79[0] = v63;
      v45 = sub_1BB597DC4((uint64_t)&v76, (uint64_t *)&v78);
      return v45 & 1;
    }
  }
LABEL_22:
  v45 = 0;
  return v45 & 1;
}

void _s8NewsFeed20PuzzleStatisticValueO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD v23[8];

  v4 = type metadata accessor for PuzzleStreak();
  v23[6] = *(_QWORD *)(v4 - 8);
  v23[7] = v4;
  MEMORY[0x1E0C80A78](v4);
  v23[3] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAEE7C2C(0, &qword_1EF2C7F38, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak);
  MEMORY[0x1E0C80A78](v6);
  v23[4] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v23[5] = (char *)v23 - v9;
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v23[1] = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v23[2] = (char *)v23 - v15;
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  sub_1BA9ED538(0, &qword_1EF2C7F30, (void (*)(uint64_t))type metadata accessor for PuzzleStatisticValue);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v23 + *(int *)(v20 + 48) - v19;
  sub_1BA4C2DD8(a1, (uint64_t)v23 - v19, type metadata accessor for PuzzleStatisticValue);
  sub_1BA4C2DD8(a2, (uint64_t)v21, type metadata accessor for PuzzleStatisticValue);
  type metadata accessor for PuzzleStatisticValue(0);
  v22 = (char *)sub_1BB59CFD0 + 4 * byte_1BB929D04[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB59CFD0()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;

  v2 = *(double *)v1;
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticValue);
    return 0;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v0 + 8);
    if ((*(_BYTE *)(v1 + 8) & 1) == 0)
      return (v2 == *(double *)v0) & ~(_DWORD)v3;
  }
  return v3;
}

void _s8NewsFeed23PuzzleStatisticCategoryO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD v25[7];
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v28 = a2;
  v3 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
  MEMORY[0x1E0C80A78](v3);
  v25[5] = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v25[4] = (char *)v25 - v6;
  v26 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
  v25[2] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v25[0] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BAEE7C2C(0, &qword_1EF2C7F40, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult);
  MEMORY[0x1E0C80A78](v8);
  v27 = (char *)v25 - v9;
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C4390, type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v25[1] = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v25[3] = (char *)v25 - v13;
  MEMORY[0x1E0C80A78](v14);
  v25[6] = (char *)v25 - v15;
  v16 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  v18 = type metadata accessor for PuzzleStatisticValue(0);
  MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  sub_1BA9ED538(0, (unint64_t *)&qword_1ED3AD790, (void (*)(uint64_t))type metadata accessor for PuzzleStatisticCategory);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v25 + *(int *)(v22 + 48) - v21;
  sub_1BA4C2DD8(a1, (uint64_t)v25 - v21, type metadata accessor for PuzzleStatisticCategory);
  sub_1BA4C2DD8(v28, (uint64_t)v23, type metadata accessor for PuzzleStatisticCategory);
  type metadata accessor for PuzzleStatisticCategory(0);
  v24 = (char *)sub_1BB59D7C8 + 4 * byte_1BB929D0B[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB59D7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  char v8;
  char v9;

  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BA4A2E80(v3, type metadata accessor for PuzzleStatisticValue);
    sub_1BA4A2E80(v0, type metadata accessor for PuzzleStatisticCategory);
    if (qword_1ED3C0B50 != -1)
      swift_once();
    v4 = sub_1BB86EFEC();
    __swift_project_value_buffer(v4, (uint64_t)qword_1ED476918);
    v5 = sub_1BB86EFC8();
    v6 = sub_1BB8732F4();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1BA493000, v5, v6, "Can't equate non-matching PuzzleStatisticCategory values", v7, 2u);
      MEMORY[0x1BCCE5C38](v7, -1, -1);
    }

    v8 = 0;
  }
  else
  {
    sub_1BA5193C4(v3, v2, type metadata accessor for PuzzleStatisticValue);
    sub_1BA5193C4(v0, v1, type metadata accessor for PuzzleStatisticValue);
    _s8NewsFeed20PuzzleStatisticValueO2eeoiySbAC_ACtFZ_0(v2, v1);
    v8 = v9;
    sub_1BA4A2E80(v1, type metadata accessor for PuzzleStatisticValue);
    sub_1BA4A2E80(v2, type metadata accessor for PuzzleStatisticValue);
  }
  return v8 & 1;
}

unint64_t sub_1BB59DC74()
{
  unint64_t result;

  result = qword_1EF2C7A38;
  if (!qword_1EF2C7A38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B710, &type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A38);
  }
  return result;
}

unint64_t sub_1BB59DCB8()
{
  unint64_t result;

  result = qword_1EF2C7A48;
  if (!qword_1EF2C7A48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B6C0, &type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A48);
  }
  return result;
}

unint64_t sub_1BB59DCFC()
{
  unint64_t result;

  result = qword_1EF2C7A58;
  if (!qword_1EF2C7A58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B670, &type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A58);
  }
  return result;
}

unint64_t sub_1BB59DD40()
{
  unint64_t result;

  result = qword_1EF2C7A68;
  if (!qword_1EF2C7A68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B620, &type metadata for PuzzleStatisticCategory.SingleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A68);
  }
  return result;
}

unint64_t sub_1BB59DD84()
{
  unint64_t result;

  result = qword_1EF2C7A78;
  if (!qword_1EF2C7A78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B5D0, &type metadata for PuzzleStatisticCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7A78);
  }
  return result;
}

unint64_t sub_1BB59DDC8()
{
  unint64_t result;

  result = qword_1EF2C7AF0;
  if (!qword_1EF2C7AF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B580, &type metadata for PuzzleStatisticValue.HighestScoreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7AF0);
  }
  return result;
}

unint64_t sub_1BB59DE0C()
{
  unint64_t result;

  result = qword_1EF2C7B00;
  if (!qword_1EF2C7B00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B530, &type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B00);
  }
  return result;
}

unint64_t sub_1BB59DE50()
{
  unint64_t result;

  result = qword_1EF2C7B10;
  if (!qword_1EF2C7B10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B4E0, &type metadata for PuzzleStatisticValue.LongestStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B10);
  }
  return result;
}

unint64_t sub_1BB59DE94()
{
  unint64_t result;

  result = qword_1EF2C7B20;
  if (!qword_1EF2C7B20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B490, &type metadata for PuzzleStatisticValue.AverageTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B20);
  }
  return result;
}

unint64_t sub_1BB59DED8()
{
  unint64_t result;

  result = qword_1EF2C7B30;
  if (!qword_1EF2C7B30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B440, &type metadata for PuzzleStatisticValue.FastestTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B30);
  }
  return result;
}

unint64_t sub_1BB59DF1C()
{
  unint64_t result;

  result = qword_1EF2C7B40;
  if (!qword_1EF2C7B40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B3F0, &type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B40);
  }
  return result;
}

unint64_t sub_1BB59DF60()
{
  unint64_t result;

  result = qword_1EF2C7B50;
  if (!qword_1EF2C7B50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B3A0, &type metadata for PuzzleStatisticValue.SolveRateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B50);
  }
  return result;
}

unint64_t sub_1BB59DFA4()
{
  unint64_t result;

  result = qword_1EF2C7B60;
  if (!qword_1EF2C7B60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B350, &type metadata for PuzzleStatisticValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7B60);
  }
  return result;
}

unint64_t sub_1BB59DFE8()
{
  unint64_t result;

  result = qword_1EF2C7BB0;
  if (!qword_1EF2C7BB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B300, &type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7BB0);
  }
  return result;
}

void type metadata accessor for PuzzleStatisticDifficultyLevel()
{
  JUMPOUT(0x1BCCE5A70);
}

void type metadata accessor for PuzzleStatisticDifficultyLevel.CodingKeys()
{
  JUMPOUT(0x1BCCE5A70);
}

unint64_t sub_1BB59E044()
{
  unint64_t result;

  result = qword_1EF2C7BC8;
  if (!qword_1EF2C7BC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B260, &type metadata for PuzzleStatisticsGroupedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7BC8);
  }
  return result;
}

uint64_t sub_1BB59E088()
{
  uint64_t result;

  result = qword_1EF2C7BD0;
  if (!qword_1EF2C7BD0)
  {
    sub_1BA4AD288(255, &qword_1ED3B9740, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BB59E16C(&qword_1EF2C7BD8, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEE9A0]);
    sub_1BB59E16C(&qword_1EF2C7BE0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEE988]);
    sub_1BB59E16C(&qword_1EF2C7BE8, MEMORY[0x1E0DEB438], MEMORY[0x1E0DEE998]);
    type metadata accessor for PuzzleStatisticDifficultyLevel();
  }
  return result;
}

uint64_t sub_1BB59E16C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BA4AD288(255, &qword_1ED3B9740, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = a2;
    result = MEMORY[0x1BCCE5B24](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BB59E1E0()
{
  uint64_t result;

  result = qword_1EF2C7BF8;
  if (!qword_1EF2C7BF8)
  {
    sub_1BA4AD288(255, &qword_1ED3CF878, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BB59E27C();
    sub_1BB59E2EC();
    sub_1BB59E35C();
    type metadata accessor for PuzzleStatisticDifficultyLevel();
  }
  return result;
}

unint64_t sub_1BB59E27C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF2C7C00;
  if (!qword_1EF2C7C00)
  {
    sub_1BA4AD288(255, &qword_1ED3CF878, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEB0A8];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C00);
  }
  return result;
}

unint64_t sub_1BB59E2EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF2C7C08;
  if (!qword_1EF2C7C08)
  {
    sub_1BA4AD288(255, &qword_1ED3CF878, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEB080];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C08);
  }
  return result;
}

unint64_t sub_1BB59E35C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF2C7C10;
  if (!qword_1EF2C7C10)
  {
    sub_1BA4AD288(255, &qword_1ED3CF878, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEB0A0];
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEE998], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C10);
  }
  return result;
}

unint64_t sub_1BB59E3CC()
{
  unint64_t result;

  result = qword_1EF2C7C40;
  if (!qword_1EF2C7C40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B210, &type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C40);
  }
  return result;
}

uint64_t sub_1BB59E410(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1BA4B07F0(255, &qword_1EF2C7C50, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v10 = v9;
    v11 = sub_1BA4A2870(a2, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleLeaderboardEntry, a3);
    result = MEMORY[0x1BCCE5B24](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BB59E4AC()
{
  unint64_t result;

  result = qword_1EF2C7C78;
  if (!qword_1EF2C7C78)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for PuzzleDifficultyLevel, &type metadata for PuzzleDifficultyLevel);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C78);
  }
  return result;
}

unint64_t sub_1BB59E4F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C7C80;
  if (!qword_1EF2C7C80)
  {
    sub_1BA4AD288(255, &qword_1EF2C7C88, (uint64_t)&type metadata for PuzzleDifficultyLevel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C7C80);
  }
  return result;
}

uint64_t sub_1BB59E554()
{
  return sub_1BA4A2870(&qword_1EF2C7C90, type metadata accessor for PuzzleStatisticCategory, (uint64_t)&protocol conformance descriptor for PuzzleStatisticCategory);
}

uint64_t sub_1BB59E580()
{
  return sub_1BA4A2870(&qword_1EF2C7C98, type metadata accessor for PuzzleStatisticValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticValue);
}

uint64_t sub_1BB59E5AC()
{
  return sub_1BA4A2870(&qword_1EF2C7CA0, type metadata accessor for PuzzleStatisticDifficultyLevelValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticDifficultyLevelValue);
}

uint64_t sub_1BB59E5D8()
{
  return sub_1BA4A2870(qword_1EF2C7CA8, type metadata accessor for PuzzleStatisticsGroupedValue, (uint64_t)&protocol conformance descriptor for PuzzleStatisticsGroupedValue);
}

uint64_t initializeBufferWithCopyOfBuffer for PuzzleStatisticCategory(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1BB59E660 + 4 * byte_1BB929D0F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for PuzzleStatisticCategory(uint64_t a1)
{
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for PuzzleStatisticValue(0);
      goto LABEL_12;
    case 1:
      type metadata accessor for PuzzleStatisticValue(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4)
      {
        v4 = type metadata accessor for PuzzleStreak();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
        {
          v5 = sub_1BB86BEC0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
        }
      }
      v6 = type metadata accessor for PuzzleStatisticDifficultyLevelValue(0);
      v7 = a1 + *(int *)(v6 + 20);
      v8 = swift_getEnumCaseMultiPayload();
      if (v8 == 5 || v8 == 4)
      {
        v9 = type metadata accessor for PuzzleStreak();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9))
        {
          v10 = sub_1BB86BEC0();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
        }
      }
      a1 += *(int *)(v6 + 24);
LABEL_12:
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 5 || (_DWORD)result == 4)
      {
        v11 = type metadata accessor for PuzzleStreak();
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1, 1, v11);
        if (!(_DWORD)result)
          goto LABEL_24;
      }
      return result;
    case 2:
      v12 = type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1, 1, v12);
      if (!(_DWORD)result)
      {
        v13 = sub_1BB86C8B0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
        v14 = type metadata accessor for PuzzleLeaderboardEntry();
        swift_bridgeObjectRelease();
        v15 = a1 + *(int *)(v14 + 24);
        swift_bridgeObjectRelease();
        v16 = *(_QWORD *)(v15 + 24);
        if (v16 >> 60 != 15)
          sub_1BA69D314(*(_QWORD *)(v15 + 16), v16);
        return swift_bridgeObjectRelease();
      }
      return result;
    case 3:
      v17 = type metadata accessor for PuzzleStatisticsGroupedValue(0);
      v18 = a1 + *(int *)(v17 + 24);
      v19 = type metadata accessor for PuzzleStreak();
      v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
      if (!v20(v18, 1, v19))
      {
        v21 = sub_1BB86BEC0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18, v21);
      }
      a1 += *(int *)(v17 + 28);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a1, 1, v19);
      if ((_DWORD)result)
        return result;
LABEL_24:
      v22 = sub_1BB86BEC0();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for PuzzleStatisticCategory()
{
  char *v0;

  v0 = (char *)sub_1BB59F334 + 4 * byte_1BB929D17[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void *sub_1BB59F334()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v4 = type metadata accessor for PuzzleStreak();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4))
    {
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v0, v1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_9:
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
LABEL_8:
    v7 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v0, v1, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v0, 0, 1, v4);
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v4 = type metadata accessor for PuzzleStreak();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4))
      goto LABEL_6;
    goto LABEL_8;
  }
  memcpy(v0, v1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
LABEL_10:
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for PuzzleStatisticCategory(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BA4A2E80(result, type metadata accessor for PuzzleStatisticCategory);
    v2 = (char *)&loc_1BB59FD30 + 4 * byte_1BB929D1B[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for PuzzleStatisticCategory()
{
  char *v0;

  v0 = (char *)sub_1BB5A072C + 4 * byte_1BB929D1F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void *sub_1BB5A072C()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v4 = type metadata accessor for PuzzleStreak();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4))
    {
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v0, v1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_9:
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
LABEL_8:
    v7 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v0, v1, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v0, 0, 1, v4);
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v4 = type metadata accessor for PuzzleStreak();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4))
      goto LABEL_6;
    goto LABEL_8;
  }
  memcpy(v0, v1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
LABEL_10:
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for PuzzleStatisticCategory(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BA4A2E80(result, type metadata accessor for PuzzleStatisticCategory);
    v2 = (char *)&loc_1BB5A10D4 + 4 * byte_1BB929D23[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PuzzleStatisticValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v8 = type metadata accessor for PuzzleStreak();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
LABEL_8:
        sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_11:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_10:
      v12 = sub_1BB86BEC0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      goto LABEL_11;
    }
    if (EnumCaseMultiPayload == 4)
    {
      v8 = type metadata accessor for PuzzleStreak();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
        goto LABEL_8;
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for PuzzleStatisticValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 5 || (_DWORD)result == 4)
  {
    v3 = type metadata accessor for PuzzleStreak();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3);
    if (!(_DWORD)result)
    {
      v4 = sub_1BB86BEC0();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    }
  }
  return result;
}

void *initializeWithCopy for PuzzleStatisticValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v7 = type metadata accessor for PuzzleStreak();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_8:
    v10 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for PuzzleStreak();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      goto LABEL_6;
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for PuzzleStatisticValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, type metadata accessor for PuzzleStatisticValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v7 = type metadata accessor for PuzzleStreak();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
LABEL_7:
        sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_10:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_9:
      v10 = sub_1BB86BEC0();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for PuzzleStreak();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
        goto LABEL_7;
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for PuzzleStatisticValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v7 = type metadata accessor for PuzzleStreak();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_8:
    v10 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for PuzzleStreak();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      goto LABEL_6;
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for PuzzleStatisticValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, type metadata accessor for PuzzleStatisticValue);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v7 = type metadata accessor for PuzzleStreak();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
LABEL_7:
        sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_10:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_9:
      v10 = sub_1BB86BEC0();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for PuzzleStreak();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
        goto LABEL_7;
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PuzzleStatisticDifficultyLevelValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v7 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload != 4)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_12;
    }
    v9 = type metadata accessor for PuzzleStreak();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      goto LABEL_8;
LABEL_10:
    v13 = sub_1BB86BEC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    goto LABEL_11;
  }
  v9 = type metadata accessor for PuzzleStreak();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    goto LABEL_10;
LABEL_8:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_11:
  swift_storeEnumTagMultiPayload();
LABEL_12:
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = swift_getEnumCaseMultiPayload();
  if (v17 == 5)
  {
    v18 = type metadata accessor for PuzzleStreak();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
    {
LABEL_17:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_20:
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    }
LABEL_19:
    v21 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v15, v16, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    goto LABEL_20;
  }
  if (v17 == 4)
  {
    v18 = type metadata accessor for PuzzleStreak();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      goto LABEL_17;
    goto LABEL_19;
  }
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_21:
  v22 = *(int *)(a3 + 24);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = swift_getEnumCaseMultiPayload();
  if (v25 == 5)
  {
    v26 = type metadata accessor for PuzzleStreak();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
    {
LABEL_26:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
LABEL_29:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_28:
    v29 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v23, v24, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    goto LABEL_29;
  }
  if (v25 == 4)
  {
    v26 = type metadata accessor for PuzzleStreak();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
      goto LABEL_26;
    goto LABEL_28;
  }
  memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  return a1;
}

uint64_t destroy for PuzzleStatisticDifficultyLevelValue(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4)
  {
    v5 = type metadata accessor for PuzzleStreak();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5))
    {
      v6 = sub_1BB86BEC0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    }
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = swift_getEnumCaseMultiPayload();
  if (v8 == 5 || v8 == 4)
  {
    v9 = type metadata accessor for PuzzleStreak();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9))
    {
      v10 = sub_1BB86BEC0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
    }
  }
  v11 = a1 + *(int *)(a2 + 24);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 5 || (_DWORD)result == 4)
  {
    v13 = type metadata accessor for PuzzleStreak();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13);
    if (!(_DWORD)result)
    {
      v14 = sub_1BB86BEC0();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
    }
  }
  return result;
}

char *initializeWithCopy for PuzzleStatisticDifficultyLevelValue(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload != 4)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_10;
    }
    v8 = type metadata accessor for PuzzleStreak();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      goto LABEL_6;
LABEL_8:
    v11 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    goto LABEL_9;
  }
  v8 = type metadata accessor for PuzzleStreak();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    goto LABEL_8;
LABEL_6:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 != 5)
  {
    if (v15 != 4)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_19;
    }
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      goto LABEL_15;
LABEL_17:
    v19 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    goto LABEL_18;
  }
  v16 = type metadata accessor for PuzzleStreak();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    goto LABEL_17;
LABEL_15:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_18:
  swift_storeEnumTagMultiPayload();
LABEL_19:
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = swift_getEnumCaseMultiPayload();
  if (v23 == 5)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
LABEL_24:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_26:
    v27 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v21, v22, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    goto LABEL_27;
  }
  if (v23 == 4)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      goto LABEL_24;
    goto LABEL_26;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  return a1;
}

char *assignWithCopy for PuzzleStatisticDifficultyLevelValue(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 == a2)
    return a1;
  sub_1BA4A2E80((uint64_t)a1, type metadata accessor for PuzzleStatisticValue);
  v6 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload != 4)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    v8 = type metadata accessor for PuzzleStreak();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      goto LABEL_7;
LABEL_9:
    v11 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    goto LABEL_10;
  }
  v8 = type metadata accessor for PuzzleStreak();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    goto LABEL_9;
LABEL_7:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_10:
  swift_storeEnumTagMultiPayload();
LABEL_11:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  sub_1BA4A2E80((uint64_t)&a1[v12], type metadata accessor for PuzzleStatisticValue);
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 5)
  {
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
LABEL_16:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
LABEL_18:
    v19 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    goto LABEL_19;
  }
  if (v15 == 4)
  {
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      goto LABEL_16;
    goto LABEL_18;
  }
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_20:
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  sub_1BA4A2E80((uint64_t)&a1[v20], type metadata accessor for PuzzleStatisticValue);
  v23 = swift_getEnumCaseMultiPayload();
  if (v23 == 5)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
LABEL_25:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_28:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_27:
    v27 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v21, v22, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    goto LABEL_28;
  }
  if (v23 == 4)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      goto LABEL_25;
    goto LABEL_27;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  return a1;
}

char *initializeWithTake for PuzzleStatisticDifficultyLevelValue(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload != 4)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_10;
    }
    v8 = type metadata accessor for PuzzleStreak();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      goto LABEL_6;
LABEL_8:
    v11 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    goto LABEL_9;
  }
  v8 = type metadata accessor for PuzzleStreak();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    goto LABEL_8;
LABEL_6:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 != 5)
  {
    if (v15 != 4)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_19;
    }
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      goto LABEL_15;
LABEL_17:
    v19 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v13, v14, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    goto LABEL_18;
  }
  v16 = type metadata accessor for PuzzleStreak();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    goto LABEL_17;
LABEL_15:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_18:
  swift_storeEnumTagMultiPayload();
LABEL_19:
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = swift_getEnumCaseMultiPayload();
  if (v23 == 5)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
LABEL_24:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_26:
    v27 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v21, v22, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    goto LABEL_27;
  }
  if (v23 == 4)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      goto LABEL_24;
    goto LABEL_26;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  return a1;
}

char *assignWithTake for PuzzleStatisticDifficultyLevelValue(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 == a2)
    return a1;
  sub_1BA4A2E80((uint64_t)a1, type metadata accessor for PuzzleStatisticValue);
  v6 = type metadata accessor for PuzzleStatisticValue(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5)
  {
    if (EnumCaseMultiPayload != 4)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    v8 = type metadata accessor for PuzzleStreak();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      goto LABEL_7;
LABEL_9:
    v11 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    goto LABEL_10;
  }
  v8 = type metadata accessor for PuzzleStreak();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    goto LABEL_9;
LABEL_7:
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_10:
  swift_storeEnumTagMultiPayload();
LABEL_11:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  sub_1BA4A2E80((uint64_t)&a1[v12], type metadata accessor for PuzzleStatisticValue);
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 5)
  {
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
LABEL_16:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
LABEL_18:
    v19 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v13, v14, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    goto LABEL_19;
  }
  if (v15 == 4)
  {
    v16 = type metadata accessor for PuzzleStreak();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      goto LABEL_16;
    goto LABEL_18;
  }
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_20:
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  sub_1BA4A2E80((uint64_t)&a1[v20], type metadata accessor for PuzzleStatisticValue);
  v23 = swift_getEnumCaseMultiPayload();
  if (v23 == 5)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
LABEL_25:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_28:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_27:
    v27 = sub_1BB86BEC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v21, v22, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    goto LABEL_28;
  }
  if (v23 == 4)
  {
    v24 = type metadata accessor for PuzzleStreak();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      goto LABEL_25;
    goto LABEL_27;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for PuzzleStatisticDifficultyLevelValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A3E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PuzzleStatisticValue(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PuzzleStatisticDifficultyLevelValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A3E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PuzzleStatisticValue(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1BB5A3ED4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BB5A3F44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)((v10 + v16) & v9), v5);
  }
  return v4;
}

uint64_t sub_1BB5A4028(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v10(v8, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v7 + v8) & ~v6, v3);
}

uint64_t sub_1BB5A40A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t sub_1BB5A413C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t sub_1BB5A41D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t sub_1BB5A4264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t sub_1BB5A42F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64)
       + *(unsigned __int8 *)(v4 + 80)
       + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BB5A43C0 + 4 * byte_1BB929D27[(v7 - 1)]))();
}

void sub_1BB5A4410(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_QWORD *initializeBufferWithCopyOfBuffer for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PuzzleStreak();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = sub_1BB86BEC0();
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[7];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    if (v13((char *)a2 + v17, 1, v11))
    {
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = sub_1BB86BEC0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    }
    v22 = a3[8];
    v23 = a3[9];
    v24 = (_OWORD *)((char *)v4 + v22);
    v25 = (_OWORD *)((char *)a2 + v22);
    *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (_OWORD *)((char *)v4 + v23);
    v28 = (_OWORD *)((char *)a2 + v23);
    *(_OWORD *)((char *)v27 + 25) = *(_OWORD *)((char *)v28 + 25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = a3[10];
    v31 = (_OWORD *)((char *)v4 + v30);
    v32 = (_OWORD *)((char *)a2 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    *(_OWORD *)((char *)v31 + 25) = *(_OWORD *)((char *)v32 + 25);
  }
  return v4;
}

uint64_t destroy for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PuzzleStreak();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    v7 = sub_1BB86BEC0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  v8 = a1 + *(int *)(a2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, 1, v5);
  if (!(_DWORD)result)
  {
    v10 = sub_1BB86BEC0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  return result;
}

uint64_t initializeWithCopy for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for PuzzleStreak();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v12((const void *)(a2 + v15), 1, v10))
  {
    sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_OWORD *)(a1 + v20);
  v23 = (_OWORD *)(a2 + v20);
  *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v23 + 25);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_OWORD *)(a1 + v21);
  v26 = (_OWORD *)(a2 + v21);
  *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[10];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_OWORD *)((char *)v29 + 25) = *(_OWORD *)((char *)v30 + 25);
  return a1;
}

uint64_t assignWithCopy for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for PuzzleStreak();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    v17 = sub_1BB86BEC0();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, v9, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    v18 = sub_1BB86BEC0();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v8, v9, v18);
  }
LABEL_9:
  v19 = a3[7];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = v12((void *)(a1 + v19), 1, v10);
  v23 = v12(v21, 1, v10);
  if (v22)
  {
    if (!v23)
    {
      v26 = sub_1BB86BEC0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v20, v21, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
      goto LABEL_17;
    }
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v23)
    {
      v27 = sub_1BB86BEC0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v20, v21, v27);
      goto LABEL_17;
    }
    sub_1BA4A2E80((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, v24);
  memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_17:
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 8) = *((_BYTE *)v30 + 8);
  *(_QWORD *)v29 = v31;
  v32 = v30[2];
  *(_BYTE *)(v29 + 24) = *((_BYTE *)v30 + 24);
  *(_QWORD *)(v29 + 16) = v32;
  v33 = v30[4];
  *(_BYTE *)(v29 + 40) = *((_BYTE *)v30 + 40);
  *(_QWORD *)(v29 + 32) = v33;
  v34 = a3[9];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  *(_BYTE *)(v35 + 8) = *((_BYTE *)v36 + 8);
  *(_QWORD *)v35 = v37;
  v38 = v36[2];
  *(_BYTE *)(v35 + 24) = *((_BYTE *)v36 + 24);
  *(_QWORD *)(v35 + 16) = v38;
  v39 = v36[4];
  *(_BYTE *)(v35 + 40) = *((_BYTE *)v36 + 40);
  *(_QWORD *)(v35 + 32) = v39;
  v40 = a3[10];
  v41 = a1 + v40;
  v42 = (uint64_t *)(a2 + v40);
  v43 = *v42;
  *(_BYTE *)(v41 + 8) = *((_BYTE *)v42 + 8);
  *(_QWORD *)v41 = v43;
  v44 = v42[2];
  *(_BYTE *)(v41 + 24) = *((_BYTE *)v42 + 24);
  *(_QWORD *)(v41 + 16) = v44;
  v45 = v42[4];
  *(_BYTE *)(v41 + 40) = *((_BYTE *)v42 + 40);
  *(_QWORD *)(v41 + 32) = v45;
  return a1;
}

uint64_t initializeWithTake for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for PuzzleStreak();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v8, v9, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v12((const void *)(a2 + v15), 1, v10))
  {
    sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = sub_1BB86BEC0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_OWORD *)(a1 + v20);
  v23 = (_OWORD *)(a2 + v20);
  *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v23 + 25);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_OWORD *)(a1 + v21);
  v26 = (_OWORD *)(a2 + v21);
  *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[10];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_OWORD *)((char *)v29 + 25) = *(_OWORD *)((char *)v30 + 25);
  return a1;
}

uint64_t assignWithTake for PuzzleStatisticsGroupedValue(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for PuzzleStreak();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    v17 = sub_1BB86BEC0();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v8, v9, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    v18 = sub_1BB86BEC0();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v8, v9, v18);
  }
LABEL_9:
  v19 = a3[7];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = v12((void *)(a1 + v19), 1, v10);
  v23 = v12(v21, 1, v10);
  if (v22)
  {
    if (!v23)
    {
      v26 = sub_1BB86BEC0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v20, v21, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
      goto LABEL_17;
    }
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v23)
    {
      v27 = sub_1BB86BEC0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v20, v21, v27);
      goto LABEL_17;
    }
    sub_1BA4A2E80((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, v24);
  memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_17:
  v28 = a3[8];
  v29 = a3[9];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  *(_BYTE *)(v30 + 24) = *(_BYTE *)(v31 + 24);
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
  *(_BYTE *)(v30 + 40) = *(_BYTE *)(v31 + 40);
  v32 = a1 + v29;
  v33 = a2 + v29;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_BYTE *)(v32 + 24) = *(_BYTE *)(v33 + 24);
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
  v34 = *(_QWORD *)(v33 + 32);
  *(_BYTE *)(v32 + 40) = *(_BYTE *)(v33 + 40);
  *(_QWORD *)(v32 + 32) = v34;
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 24) = *(_BYTE *)(v37 + 24);
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v37 + 16);
  *(_BYTE *)(v36 + 40) = *(_BYTE *)(v37 + 40);
  *(_QWORD *)(v36 + 32) = *(_QWORD *)(v37 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PuzzleStatisticsGroupedValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A5294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v6);
}

uint64_t storeEnumTagSinglePayload for PuzzleStatisticsGroupedValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A5304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  sub_1BA4B07F0(0, &qword_1ED3C2120, (uint64_t (*)(uint64_t))type metadata accessor for PuzzleStreak, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1 + *(int *)(a4 + 24), a2, a2, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BB86C8B0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = v8[6];
    v14 = (char *)a1 + v13;
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *(_QWORD *)v14 = *v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v15 + 2;
    v18 = v15[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 >> 60 == 15)
    {
      *((_OWORD *)v14 + 1) = *(_OWORD *)v17;
    }
    else
    {
      v20 = *v17;
      sub_1BA69D44C(*v17, v18);
      *((_QWORD *)v14 + 2) = v20;
      *((_QWORD *)v14 + 3) = v18;
    }
    *(uint64_t *)((char *)a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    v21 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for PuzzleLeaderboardEntry();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(v3 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 24);
  if (v5 >> 60 != 15)
    sub_1BA69D314(*(_QWORD *)(v4 + 16), v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *(_QWORD *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = v15;
  v16 = v14 + 2;
  v17 = v14[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(v13 + 16) = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    sub_1BA69D44C(*v16, v17);
    *(_QWORD *)(v13 + 16) = v18;
    *(_QWORD *)(v13 + 24) = v17;
  }
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v19 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_QWORD *)(a2 + v11);
  v12[1] = *(_QWORD *)(a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = (uint64_t *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v12[3] >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      v17 = *v14;
      sub_1BA69D44C(*v14, *(_QWORD *)(v13 + 24));
      v18 = v12[2];
      v19 = v12[3];
      v12[2] = v17;
      v12[3] = v15;
      sub_1BA69D314(v18, v19);
      goto LABEL_8;
    }
    sub_1BA92BD1C((uint64_t)(v12 + 2));
    goto LABEL_6;
  }
  if (v15 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)v12 + 1) = *(_OWORD *)v14;
    goto LABEL_8;
  }
  v16 = *v14;
  sub_1BA69D44C(*v14, *(_QWORD *)(v13 + 24));
  v12[2] = v16;
  v12[3] = v15;
LABEL_8:
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;

  v6 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for PuzzleStatisticsGameCenterLeaderboardResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = sub_1BB86C8B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PuzzleLeaderboardEntry();
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a2 + v13 + 8);
  *v14 = *(_QWORD *)(a2 + v13);
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)(v15 + 16);
  v18 = v14[3];
  if (v18 >> 60 != 15)
  {
    v19 = *(_QWORD *)(v15 + 24);
    if (v19 >> 60 != 15)
    {
      v20 = v14[2];
      v14[2] = *v17;
      v14[3] = v19;
      sub_1BA69D314(v20, v18);
      goto LABEL_6;
    }
    sub_1BA92BD1C((uint64_t)(v14 + 2));
  }
  *((_OWORD *)v14 + 1) = *(_OWORD *)v17;
LABEL_6:
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for PuzzleStatisticsGameCenterLeaderboardResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A5998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PuzzleLeaderboardEntry();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PuzzleStatisticsGameCenterLeaderboardResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5A5A20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PuzzleLeaderboardEntry();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

ValueMetadata *type metadata accessor for PuzzleDifficultyLevel()
{
  return &type metadata for PuzzleDifficultyLevel;
}

ValueMetadata *type metadata accessor for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys()
{
  return &type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticsGroupedValue.CodingKeys()
{
  return &type metadata for PuzzleStatisticsGroupedValue.CodingKeys;
}

uint64_t _s8NewsFeed21PuzzleDifficultyLevelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5A5B1C + 4 * byte_1BB929D3A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5A5B50 + 4 * byte_1BB929D35[v4]))();
}

uint64_t sub_1BB5A5B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5A5B60);
  return result;
}

uint64_t sub_1BB5A5B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5A5B74);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5A5B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatisticDifficultyLevelValue.CodingKeys()
{
  return &type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys;
}

uint64_t _s8NewsFeed28PuzzleStatisticsGroupedValueV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BB5A5BE8 + 4 * byte_1BB929D44[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BB5A5C1C + 4 * byte_1BB929D3F[v4]))();
}

uint64_t sub_1BB5A5C1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5C24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5A5C2CLL);
  return result;
}

uint64_t sub_1BB5A5C38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5A5C40);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BB5A5C44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5C4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.CodingKeys()
{
  return &type metadata for PuzzleStatisticValue.CodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.SolveRateCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.SolveRateCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.TotalSolvedCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.FastestTimeCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.FastestTimeCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.AverageTimeCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.AverageTimeCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.LongestStreakCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.LongestStreakCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.CurrentStreakCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticValue.HighestScoreCodingKeys()
{
  return &type metadata for PuzzleStatisticValue.HighestScoreCodingKeys;
}

uint64_t storeEnumTagSinglePayload for PuzzleStatisticCategory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB5A5D28 + 4 * byte_1BB929D4E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB5A5D5C + 4 * byte_1BB929D49[v4]))();
}

uint64_t sub_1BB5A5D5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5A5D6CLL);
  return result;
}

uint64_t sub_1BB5A5D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5A5D80);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB5A5D84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5A5D8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatisticCategory.CodingKeys()
{
  return &type metadata for PuzzleStatisticCategory.CodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticCategory.SingleCodingKeys()
{
  return &type metadata for PuzzleStatisticCategory.SingleCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticCategory.DifficultyLevelCodingKeys()
{
  return &type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys;
}

ValueMetadata *type metadata accessor for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys()
{
  return &type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys;
}

uint64_t _s8NewsFeed20PuzzleStatisticValueO19SolveRateCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB5A5E18 + 4 * byte_1BB929D53[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB5A5E38 + 4 * byte_1BB929D58[v4]))();
}

_BYTE *sub_1BB5A5E18(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB5A5E38(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5A5E40(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5A5E48(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5A5E50(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5A5E58(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PuzzleStatisticCategory.GroupedStatsCodingKeys()
{
  return &type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys;
}

unint64_t sub_1BB5A5E78()
{
  unint64_t result;

  result = qword_1EF2C7DB0;
  if (!qword_1EF2C7DB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A668, &type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DB0);
  }
  return result;
}

unint64_t sub_1BB5A5EC0()
{
  unint64_t result;

  result = qword_1EF2C7DB8;
  if (!qword_1EF2C7DB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A720, &type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DB8);
  }
  return result;
}

unint64_t sub_1BB5A5F08()
{
  unint64_t result;

  result = qword_1EF2C7DC0;
  if (!qword_1EF2C7DC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A7D8, &type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DC0);
  }
  return result;
}

unint64_t sub_1BB5A5F50()
{
  unint64_t result;

  result = qword_1EF2C7DC8;
  if (!qword_1EF2C7DC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A890, &type metadata for PuzzleStatisticCategory.SingleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DC8);
  }
  return result;
}

unint64_t sub_1BB5A5F98()
{
  unint64_t result;

  result = qword_1EF2C7DD0;
  if (!qword_1EF2C7DD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A948, &type metadata for PuzzleStatisticCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DD0);
  }
  return result;
}

unint64_t sub_1BB5A5FE0()
{
  unint64_t result;

  result = qword_1EF2C7DD8;
  if (!qword_1EF2C7DD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AA00, &type metadata for PuzzleStatisticValue.HighestScoreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DD8);
  }
  return result;
}

unint64_t sub_1BB5A6028()
{
  unint64_t result;

  result = qword_1EF2C7DE0;
  if (!qword_1EF2C7DE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AAB8, &type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DE0);
  }
  return result;
}

unint64_t sub_1BB5A6070()
{
  unint64_t result;

  result = qword_1EF2C7DE8;
  if (!qword_1EF2C7DE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AB70, &type metadata for PuzzleStatisticValue.LongestStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DE8);
  }
  return result;
}

unint64_t sub_1BB5A60B8()
{
  unint64_t result;

  result = qword_1EF2C7DF0;
  if (!qword_1EF2C7DF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AC28, &type metadata for PuzzleStatisticValue.AverageTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DF0);
  }
  return result;
}

unint64_t sub_1BB5A6100()
{
  unint64_t result;

  result = qword_1EF2C7DF8;
  if (!qword_1EF2C7DF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ACE0, &type metadata for PuzzleStatisticValue.FastestTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7DF8);
  }
  return result;
}

unint64_t sub_1BB5A6148()
{
  unint64_t result;

  result = qword_1EF2C7E00;
  if (!qword_1EF2C7E00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AD98, &type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E00);
  }
  return result;
}

unint64_t sub_1BB5A6190()
{
  unint64_t result;

  result = qword_1EF2C7E08;
  if (!qword_1EF2C7E08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AE50, &type metadata for PuzzleStatisticValue.SolveRateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E08);
  }
  return result;
}

unint64_t sub_1BB5A61D8()
{
  unint64_t result;

  result = qword_1EF2C7E10;
  if (!qword_1EF2C7E10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AF08, &type metadata for PuzzleStatisticValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E10);
  }
  return result;
}

unint64_t sub_1BB5A6220()
{
  unint64_t result;

  result = qword_1EF2C7E18;
  if (!qword_1EF2C7E18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AFC0, &type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E18);
  }
  return result;
}

void sub_1BB5A6264()
{
  JUMPOUT(0x1BCCE5B24);
}

unint64_t sub_1BB5A6278()
{
  unint64_t result;

  result = qword_1EF2C7E20;
  if (!qword_1EF2C7E20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B130, &type metadata for PuzzleStatisticsGroupedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E20);
  }
  return result;
}

unint64_t sub_1BB5A62C0()
{
  unint64_t result;

  result = qword_1EF2C7E28;
  if (!qword_1EF2C7E28)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B1E8, &type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E28);
  }
  return result;
}

unint64_t sub_1BB5A6308()
{
  unint64_t result;

  result = qword_1EF2C7E30;
  if (!qword_1EF2C7E30)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B158, &type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E30);
  }
  return result;
}

unint64_t sub_1BB5A6350()
{
  unint64_t result;

  result = qword_1EF2C7E38;
  if (!qword_1EF2C7E38)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B180, &type metadata for PuzzleStatisticsGameCenterLeaderboardResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E38);
  }
  return result;
}

unint64_t sub_1BB5A6398()
{
  unint64_t result;

  result = qword_1EF2C7E40;
  if (!qword_1EF2C7E40)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B0A0, &type metadata for PuzzleStatisticsGroupedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E40);
  }
  return result;
}

unint64_t sub_1BB5A63E0()
{
  unint64_t result;

  result = qword_1EF2C7E48;
  if (!qword_1EF2C7E48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92B0C8, &type metadata for PuzzleStatisticsGroupedValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E48);
  }
  return result;
}

void sub_1BB5A6424()
{
  JUMPOUT(0x1BCCE5B24);
}

void sub_1BB5A6434()
{
  JUMPOUT(0x1BCCE5B24);
}

unint64_t sub_1BB5A6448()
{
  unint64_t result;

  result = qword_1EF2C7E50;
  if (!qword_1EF2C7E50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AF30, &type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E50);
  }
  return result;
}

unint64_t sub_1BB5A6490()
{
  unint64_t result;

  result = qword_1EF2C7E58;
  if (!qword_1EF2C7E58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AF58, &type metadata for PuzzleStatisticDifficultyLevelValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E58);
  }
  return result;
}

unint64_t sub_1BB5A64D8()
{
  unint64_t result;

  result = qword_1EF2C7E60;
  if (!qword_1EF2C7E60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AE78, &type metadata for PuzzleStatisticValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E60);
  }
  return result;
}

unint64_t sub_1BB5A6520()
{
  unint64_t result;

  result = qword_1EF2C7E68;
  if (!qword_1EF2C7E68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AEA0, &type metadata for PuzzleStatisticValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E68);
  }
  return result;
}

unint64_t sub_1BB5A6568()
{
  unint64_t result;

  result = qword_1EF2C7E70;
  if (!qword_1EF2C7E70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ADC0, &type metadata for PuzzleStatisticValue.SolveRateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E70);
  }
  return result;
}

unint64_t sub_1BB5A65B0()
{
  unint64_t result;

  result = qword_1EF2C7E78;
  if (!qword_1EF2C7E78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ADE8, &type metadata for PuzzleStatisticValue.SolveRateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E78);
  }
  return result;
}

unint64_t sub_1BB5A65F8()
{
  unint64_t result;

  result = qword_1EF2C7E80;
  if (!qword_1EF2C7E80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AD08, &type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E80);
  }
  return result;
}

unint64_t sub_1BB5A6640()
{
  unint64_t result;

  result = qword_1EF2C7E88;
  if (!qword_1EF2C7E88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AD30, &type metadata for PuzzleStatisticValue.TotalSolvedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E88);
  }
  return result;
}

unint64_t sub_1BB5A6688()
{
  unint64_t result;

  result = qword_1EF2C7E90;
  if (!qword_1EF2C7E90)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AC50, &type metadata for PuzzleStatisticValue.FastestTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E90);
  }
  return result;
}

unint64_t sub_1BB5A66D0()
{
  unint64_t result;

  result = qword_1EF2C7E98;
  if (!qword_1EF2C7E98)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AC78, &type metadata for PuzzleStatisticValue.FastestTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7E98);
  }
  return result;
}

unint64_t sub_1BB5A6718()
{
  unint64_t result;

  result = qword_1EF2C7EA0;
  if (!qword_1EF2C7EA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AB98, &type metadata for PuzzleStatisticValue.AverageTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EA0);
  }
  return result;
}

unint64_t sub_1BB5A6760()
{
  unint64_t result;

  result = qword_1EF2C7EA8;
  if (!qword_1EF2C7EA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ABC0, &type metadata for PuzzleStatisticValue.AverageTimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EA8);
  }
  return result;
}

unint64_t sub_1BB5A67A8()
{
  unint64_t result;

  result = qword_1EF2C7EB0;
  if (!qword_1EF2C7EB0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AAE0, &type metadata for PuzzleStatisticValue.LongestStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EB0);
  }
  return result;
}

unint64_t sub_1BB5A67F0()
{
  unint64_t result;

  result = qword_1EF2C7EB8;
  if (!qword_1EF2C7EB8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AB08, &type metadata for PuzzleStatisticValue.LongestStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EB8);
  }
  return result;
}

unint64_t sub_1BB5A6838()
{
  unint64_t result;

  result = qword_1EF2C7EC0;
  if (!qword_1EF2C7EC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AA28, &type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EC0);
  }
  return result;
}

unint64_t sub_1BB5A6880()
{
  unint64_t result;

  result = qword_1EF2C7EC8;
  if (!qword_1EF2C7EC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92AA50, &type metadata for PuzzleStatisticValue.CurrentStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EC8);
  }
  return result;
}

unint64_t sub_1BB5A68C8()
{
  unint64_t result;

  result = qword_1EF2C7ED0;
  if (!qword_1EF2C7ED0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A970, &type metadata for PuzzleStatisticValue.HighestScoreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7ED0);
  }
  return result;
}

unint64_t sub_1BB5A6910()
{
  unint64_t result;

  result = qword_1EF2C7ED8;
  if (!qword_1EF2C7ED8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A998, &type metadata for PuzzleStatisticValue.HighestScoreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7ED8);
  }
  return result;
}

unint64_t sub_1BB5A6958()
{
  unint64_t result;

  result = qword_1EF2C7EE0;
  if (!qword_1EF2C7EE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A8B8, &type metadata for PuzzleStatisticCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EE0);
  }
  return result;
}

unint64_t sub_1BB5A69A0()
{
  unint64_t result;

  result = qword_1EF2C7EE8;
  if (!qword_1EF2C7EE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A8E0, &type metadata for PuzzleStatisticCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EE8);
  }
  return result;
}

unint64_t sub_1BB5A69E8()
{
  unint64_t result;

  result = qword_1EF2C7EF0;
  if (!qword_1EF2C7EF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A800, &type metadata for PuzzleStatisticCategory.SingleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EF0);
  }
  return result;
}

unint64_t sub_1BB5A6A30()
{
  unint64_t result;

  result = qword_1EF2C7EF8;
  if (!qword_1EF2C7EF8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A828, &type metadata for PuzzleStatisticCategory.SingleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7EF8);
  }
  return result;
}

unint64_t sub_1BB5A6A78()
{
  unint64_t result;

  result = qword_1EF2C7F00;
  if (!qword_1EF2C7F00)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A748, &type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F00);
  }
  return result;
}

unint64_t sub_1BB5A6AC0()
{
  unint64_t result;

  result = qword_1EF2C7F08;
  if (!qword_1EF2C7F08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A770, &type metadata for PuzzleStatisticCategory.DifficultyLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F08);
  }
  return result;
}

unint64_t sub_1BB5A6B08()
{
  unint64_t result;

  result = qword_1EF2C7F10;
  if (!qword_1EF2C7F10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A690, &type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F10);
  }
  return result;
}

unint64_t sub_1BB5A6B50()
{
  unint64_t result;

  result = qword_1EF2C7F18;
  if (!qword_1EF2C7F18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A6B8, &type metadata for PuzzleStatisticCategory.GameCenterLeaderboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F18);
  }
  return result;
}

unint64_t sub_1BB5A6B98()
{
  unint64_t result;

  result = qword_1EF2C7F20;
  if (!qword_1EF2C7F20)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A5D8, &type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F20);
  }
  return result;
}

unint64_t sub_1BB5A6BE0()
{
  unint64_t result;

  result = qword_1EF2C7F28;
  if (!qword_1EF2C7F28)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92A600, &type metadata for PuzzleStatisticCategory.GroupedStatsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F28);
  }
  return result;
}

uint64_t sub_1BB5A6C24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74615265766C6F73 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F536C61746F74 && a2 == 0xEB00000000646576 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5474736574736166 && a2 == 0xEB00000000656D69 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5465676172657661 && a2 == 0xEB00000000656D69 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x53747365676E6F6CLL && a2 == 0xED00006B61657274 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x53746E6572727563 && a2 == 0xED00006B61657274 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5374736568676968 && a2 == 0xEC00000065726F63)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1BB5A6FA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C676E6973 && a2 == 0xE600000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C75636966666964 && a2 == 0xEF6C6576654C7974 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BB959CB0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x53646570756F7267 && a2 == 0xEC00000073746174)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1BB5A718C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F536C61746F74 && a2 == 0xEB00000000646576;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74615265766C6F73 && a2 == 0xE900000000000065 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x53747365676E6F6CLL && a2 == 0xED00006B61657274 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x53746E6572727563 && a2 == 0xED00006B61657274 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5474736574736166 && a2 == 0xEB00000000656D69 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x5465676172657661 && a2 == 0xEB00000000656D69 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5374736568676968 && a2 == 0xEC00000065726F63)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1BB5A7510(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001BB991910 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB991930)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t CoverIssueViewLayout.Context.init(key:model:secondaryModel:styler:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t ObjCClassFromMetadata;
  void *v95;
  id v96;
  unint64_t v97;
  void *v98;
  id v99;
  char *v100;
  uint64_t v101;
  unsigned __int8 v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  id v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t result;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  id v151;
  uint64_t v152;
  char *v153;
  void (*v154)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[3];
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _OWORD v169[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _OWORD v177[2];
  _QWORD v178[3];
  uint64_t v179;
  uint64_t v180;
  _BYTE v181[160];

  v156 = a4;
  v9 = sub_1BB86C8B0();
  v10 = *(_QWORD *)(v9 - 8);
  v155 = v9;
  v11 = v10;
  v152 = v10;
  MEMORY[0x1E0C80A78](v9);
  v150 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0540, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14);
  v147 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v146 = (char *)&v145 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v145 - v19;
  v153 = (char *)&v145 - v19;
  v21 = a2[7];
  v176 = a2[6];
  v177[0] = v21;
  *(_OWORD *)((char *)v177 + 9) = *(__int128 *)((char *)a2 + 121);
  v22 = a2[3];
  v172 = a2[2];
  v173 = v22;
  v23 = a2[5];
  v174 = a2[4];
  v175 = v23;
  v24 = a2[1];
  v170 = *a2;
  v171 = v24;
  sub_1BA744E38(a3, (uint64_t)v181, (unint64_t *)&qword_1ED3C23B0);
  v25 = v174;
  *(_OWORD *)(a5 + 88) = v175;
  v26 = v177[0];
  *(_OWORD *)(a5 + 104) = v176;
  *(_OWORD *)(a5 + 120) = v26;
  *(_OWORD *)(a5 + 129) = *(_OWORD *)((char *)v177 + 9);
  v27 = v170;
  *(_OWORD *)(a5 + 24) = v171;
  v28 = v173;
  *(_OWORD *)(a5 + 40) = v172;
  *(_OWORD *)(a5 + 56) = v28;
  *(_OWORD *)(a5 + 72) = v25;
  *(_QWORD *)a5 = a1;
  *(_OWORD *)(a5 + 8) = v27;
  sub_1BA744E38((uint64_t)v181, a5 + 152, (unint64_t *)&qword_1ED3C23B0);
  v29 = v156;
  sub_1BA4C010C(v156, a5 + 296);
  sub_1BA4C010C(v29, (uint64_t)v178);
  v154 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v154(v20, 1, 1, v9);
  v30 = (_OWORD *)swift_allocObject();
  v31 = v177[0];
  v30[7] = v176;
  v30[8] = v31;
  *(_OWORD *)((char *)v30 + 137) = *(_OWORD *)((char *)v177 + 9);
  v32 = v173;
  v30[3] = v172;
  v30[4] = v32;
  v33 = v175;
  v30[5] = v174;
  v30[6] = v33;
  v34 = v171;
  v30[1] = v170;
  v30[2] = v34;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B3020, (uint64_t (*)(uint64_t))sub_1BA81D288, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for CachedText);
  v36 = v35;
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = 0xC04E000000000000;
  v38 = v180;
  __swift_project_boxed_opaque_existential_1(v178, v179);
  v168 = v176;
  v169[0] = v177[0];
  *(_OWORD *)((char *)v169 + 9) = *(_OWORD *)((char *)v177 + 9);
  v164 = v172;
  v165 = v173;
  v166 = v174;
  v167 = v175;
  v162 = v170;
  v163 = v171;
  sub_1BA8D1F08((uint64_t)&v170);
  sub_1BA8D1F08((uint64_t)&v170);
  v145 = a1;
  swift_retain();
  v39 = sub_1BB435950();
  v40 = (void *)(*(uint64_t (**)(uint64_t))(v38 + 80))(v39);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v37 + *(_QWORD *)(*v37 + 120)) = v40;
  *(_QWORD *)((char *)v37 + *(_QWORD *)(*v37 + 136)) = v40;
  v41 = v40;
  v42 = v150;
  sub_1BB86C8A4();
  v43 = (char *)v37 + *(_QWORD *)(*v37 + 128);
  v152 = *(_QWORD *)(v152 + 32);
  v44 = v155;
  ((void (*)(char *, char *, uint64_t))v152)(v43, v42, v155);
  v151 = (id)objc_opt_self();
  LOBYTE(v42) = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
  *((_BYTE *)v37 + qword_1ED3B2F88) = (_BYTE)v42;
  v45 = (uint64_t)v153;
  sub_1BA50236C((uint64_t)v153, (uint64_t)v37 + qword_1ED3B2F90);
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = sub_1BB5A9E44;
  v46[3] = v30;
  v46[4] = v41;
  v37[3] = sub_1BB5AA41C;
  v37[4] = v46;
  *(_QWORD *)(a5 + 336) = v37;
  sub_1BA4C010C(v156, (uint64_t)v178);
  v154((char *)v45, 1, 1, v44);
  v47 = (_OWORD *)swift_allocObject();
  v48 = v177[0];
  v47[7] = v176;
  v47[8] = v48;
  *(_OWORD *)((char *)v47 + 137) = *(_OWORD *)((char *)v177 + 9);
  v49 = v173;
  v47[3] = v172;
  v47[4] = v49;
  v50 = v175;
  v47[5] = v174;
  v47[6] = v50;
  v51 = v171;
  v47[1] = v170;
  v47[2] = v51;
  v52 = (_QWORD *)swift_allocObject();
  v52[2] = 0xC04E000000000000;
  v53 = v180;
  __swift_project_boxed_opaque_existential_1(v178, v179);
  v168 = v176;
  v169[0] = v177[0];
  *(_OWORD *)((char *)v169 + 9) = *(_OWORD *)((char *)v177 + 9);
  v164 = v172;
  v165 = v173;
  v166 = v174;
  v167 = v175;
  v162 = v170;
  v163 = v171;
  sub_1BA8D1F08((uint64_t)&v170);
  v54 = sub_1BB435950();
  v55 = (void *)(*(uint64_t (**)(uint64_t))(v53 + 88))(v54);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v52 + *(_QWORD *)(*v52 + 120)) = v55;
  *(_QWORD *)((char *)v52 + *(_QWORD *)(*v52 + 136)) = v55;
  v56 = v55;
  v57 = v150;
  sub_1BB86C8A4();
  v58 = v155;
  ((void (*)(char *, char *, uint64_t))v152)((char *)v52 + *(_QWORD *)(*v52 + 128), v57, v155);
  LOBYTE(v57) = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
  *((_BYTE *)v52 + qword_1ED3B2F88) = (_BYTE)v57;
  sub_1BA50236C((uint64_t)v153, (uint64_t)v52 + qword_1ED3B2F90);
  v59 = (_QWORD *)swift_allocObject();
  v59[2] = sub_1BB5AA424;
  v59[3] = v47;
  v59[4] = v56;
  v52[3] = sub_1BB5AA41C;
  v52[4] = v59;
  v149 = (_QWORD *)a5;
  *(_QWORD *)(a5 + 344) = v52;
  sub_1BA4C010C(v156, (uint64_t)v159);
  v154(v146, 1, 1, v58);
  v60 = (_OWORD *)swift_allocObject();
  v61 = v177[0];
  v60[7] = v176;
  v60[8] = v61;
  *(_OWORD *)((char *)v60 + 137) = *(_OWORD *)((char *)v177 + 9);
  v62 = v173;
  v60[3] = v172;
  v60[4] = v62;
  v63 = v175;
  v60[5] = v174;
  v60[6] = v63;
  v64 = v171;
  v60[1] = v170;
  v60[2] = v64;
  v148 = v36;
  v65 = (_QWORD *)swift_allocObject();
  v65[2] = 0xC04E000000000000;
  v67 = v160;
  v66 = v161;
  __swift_project_boxed_opaque_existential_1(v159, v160);
  sub_1BA744E38((uint64_t)&v174 + 8, (uint64_t)v178, &qword_1ED39C8F8);
  sub_1BA744E38((uint64_t)v178, (uint64_t)&v162, &qword_1ED39C8F8);
  if (*((_QWORD *)&v162 + 1) == 1 || !*((_QWORD *)&v163 + 1))
  {
    v68 = (void *)v170;
    sub_1BA8D1F08((uint64_t)&v170);
    sub_1BA8D1F08((uint64_t)&v170);
    v69 = objc_msgSend(v68, sel_coverDate);
    sub_1BB8729A0();
    swift_bridgeObjectRelease();

    sub_1BA8D1FE4((uint64_t)&v170);
  }
  else
  {
    sub_1BA8D1F08((uint64_t)&v170);
    swift_bridgeObjectRetain();
  }
  v70 = sub_1BB872A24();
  v72 = v71;
  swift_bridgeObjectRelease();
  v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 96))(v70, v72, v67, v66);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v65 + *(_QWORD *)(*v65 + 120)) = v73;
  *(_QWORD *)((char *)v65 + *(_QWORD *)(*v65 + 136)) = v73;
  v74 = v73;
  v75 = v150;
  sub_1BB86C8A4();
  v76 = v155;
  ((void (*)(char *, char *, uint64_t))v152)((char *)v65 + *(_QWORD *)(*v65 + 128), v75, v155);
  LOBYTE(v75) = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  *((_BYTE *)v65 + qword_1ED3B2F88) = (_BYTE)v75;
  sub_1BA50236C((uint64_t)v146, (uint64_t)v65 + qword_1ED3B2F90);
  v77 = (_QWORD *)swift_allocObject();
  v77[2] = sub_1BB5AA434;
  v77[3] = v60;
  v77[4] = v74;
  v65[3] = sub_1BB5AA41C;
  v65[4] = v77;
  v149[44] = v65;
  sub_1BA4C010C(v156, (uint64_t)v159);
  v154(v147, 1, 1, v76);
  v78 = (_OWORD *)swift_allocObject();
  v79 = v177[0];
  v78[7] = v176;
  v78[8] = v79;
  *(_OWORD *)((char *)v78 + 137) = *(_OWORD *)((char *)v177 + 9);
  v80 = v173;
  v78[3] = v172;
  v78[4] = v80;
  v81 = v175;
  v78[5] = v174;
  v78[6] = v81;
  v82 = v171;
  v78[1] = v170;
  v78[2] = v82;
  v83 = (_QWORD *)swift_allocObject();
  v83[2] = 0xC04E000000000000;
  v84 = BYTE8(v171);
  v86 = v160;
  v85 = v161;
  __swift_project_boxed_opaque_existential_1(v159, v160);
  if (!v84)
  {
    sub_1BA8D1F08((uint64_t)&v170);
    v90 = 0;
    v92 = 0xE000000000000000;
LABEL_10:
    v93 = 13;
    goto LABEL_11;
  }
  if (v84 != 2)
  {
    type metadata accessor for Localized();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v95 = (void *)objc_opt_self();
    sub_1BA8D1F08((uint64_t)&v170);
    v96 = objc_msgSend(v95, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_1BB86C340();

    v90 = sub_1BB872A24();
    v92 = v97;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  type metadata accessor for Localized();
  v87 = swift_getObjCClassFromMetadata();
  v88 = (void *)objc_opt_self();
  sub_1BA8D1F08((uint64_t)&v170);
  v89 = objc_msgSend(v88, sel_bundleForClass_, v87);
  sub_1BB86C340();

  v90 = sub_1BB872A24();
  v92 = v91;
  swift_bridgeObjectRelease();
  v93 = 12;
LABEL_11:
  v98 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v85 + 8 * v93))(v90, v92, v86, v85);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v83 + *(_QWORD *)(*v83 + 120)) = v98;
  *(_QWORD *)((char *)v83 + *(_QWORD *)(*v83 + 136)) = v98;
  v99 = v98;
  v100 = v150;
  sub_1BB86C8A4();
  v101 = v155;
  ((void (*)(char *, char *, uint64_t))v152)((char *)v83 + *(_QWORD *)(*v83 + 128), v100, v155);
  v102 = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  *((_BYTE *)v83 + qword_1ED3B2F88) = v102;
  sub_1BA50236C((uint64_t)v147, (uint64_t)v83 + qword_1ED3B2F90);
  v103 = (_QWORD *)swift_allocObject();
  v103[2] = sub_1BB5AA444;
  v103[3] = v78;
  v103[4] = v99;
  v83[3] = sub_1BB5AA41C;
  v83[4] = v103;
  v149[45] = v83;
  sub_1BA4C010C(v156, (uint64_t)v159);
  v154(v153, 1, 1, v101);
  v104 = (_QWORD *)swift_allocObject();
  v104[2] = 0xC04E000000000000;
  v106 = v160;
  v105 = v161;
  __swift_project_boxed_opaque_existential_1(v159, v160);
  type metadata accessor for Localized();
  v107 = swift_getObjCClassFromMetadata();
  v147 = (char *)v107;
  v146 = (char *)objc_opt_self();
  v108 = objc_msgSend(v146, sel_bundleForClass_, v107);
  sub_1BB86C340();

  v109 = sub_1BB872A24();
  v111 = v110;
  swift_bridgeObjectRelease();
  v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 112))(v109, v111, v106, v105);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v104 + *(_QWORD *)(*v104 + 120)) = v112;
  *(_QWORD *)((char *)v104 + *(_QWORD *)(*v104 + 136)) = v112;
  v113 = v112;
  sub_1BB86C8A4();
  v114 = v155;
  ((void (*)(char *, char *, uint64_t))v152)((char *)v104 + *(_QWORD *)(*v104 + 128), v100, v155);
  LOBYTE(v109) = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  *((_BYTE *)v104 + qword_1ED3B2F88) = v109;
  v115 = (uint64_t)v153;
  sub_1BA50236C((uint64_t)v153, (uint64_t)v104 + qword_1ED3B2F90);
  v116 = (_QWORD *)swift_allocObject();
  v116[2] = sub_1BB5A9E4C;
  v116[3] = 0;
  v116[4] = v113;
  v104[3] = sub_1BB5AA41C;
  v104[4] = v116;
  v117 = v149;
  v149[46] = v104;
  sub_1BA4C010C(v156, (uint64_t)v159);
  v154((char *)v115, 1, 1, v114);
  v118 = (_QWORD *)swift_allocObject();
  v118[2] = 0xC04E000000000000;
  v119 = v160;
  v120 = v161;
  __swift_project_boxed_opaque_existential_1(v159, v160);
  v121 = objc_msgSend(v146, sel_bundleForClass_, v147);
  sub_1BB86C340();

  v122 = sub_1BB872A24();
  v124 = v123;
  swift_bridgeObjectRelease();
  v125 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 120))(v122, v124, v119, v120);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v118 + *(_QWORD *)(*v118 + 120)) = v125;
  *(_QWORD *)((char *)v118 + *(_QWORD *)(*v118 + 136)) = v125;
  v126 = v125;
  sub_1BB86C8A4();
  v127 = v155;
  v128 = (void (*)(char *, char *, uint64_t))v152;
  ((void (*)(char *, char *, uint64_t))v152)((char *)v118 + *(_QWORD *)(*v118 + 128), v100, v155);
  v129 = v151;
  LOBYTE(v122) = objc_msgSend(v151, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  *((_BYTE *)v118 + qword_1ED3B2F88) = v122;
  v130 = (uint64_t)v153;
  sub_1BA50236C((uint64_t)v153, (uint64_t)v118 + qword_1ED3B2F90);
  v131 = (_QWORD *)swift_allocObject();
  v131[2] = sub_1BB5A9F64;
  v131[3] = 0;
  v131[4] = v126;
  v118[3] = sub_1BB5AA41C;
  v118[4] = v131;
  v117[47] = v118;
  v132 = v156;
  sub_1BA4C010C(v156, (uint64_t)v159);
  v133 = v130;
  v134 = v130;
  v135 = v127;
  v154((char *)v133, 1, 1, v127);
  v136 = (_OWORD *)swift_allocObject();
  v137 = v177[0];
  v136[7] = v176;
  v136[8] = v137;
  *(_OWORD *)((char *)v136 + 137) = *(_OWORD *)((char *)v177 + 9);
  v138 = v173;
  v136[3] = v172;
  v136[4] = v138;
  v139 = v175;
  v136[5] = v174;
  v136[6] = v139;
  v140 = v171;
  v136[1] = v170;
  v136[2] = v140;
  sub_1BB5AA490(0, &qword_1ED3B3018, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for CachedText);
  v141 = (char *)swift_allocObject();
  *((_QWORD *)v141 + 2) = 0xC04E000000000000;
  sub_1BA8D1F08((uint64_t)&v170);
  sub_1BB5AA08C((id *)&v170, (uint64_t *)&v158);
  sub_1BA8D1FE4((uint64_t)&v170);
  v142 = v158;
  *(_OWORD *)&v141[*(_QWORD *)(*(_QWORD *)v141 + 120)] = v158;
  *(_OWORD *)&v141[*(_QWORD *)(*(_QWORD *)v141 + 136)] = v142;
  swift_bridgeObjectRetain_n();
  sub_1BB86C8A4();
  v128(&v141[*(_QWORD *)(*(_QWORD *)v141 + 128)], v100, v135);
  LOBYTE(v135) = objc_msgSend(v129, sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  v141[qword_1ED3B2F88] = v135;
  sub_1BA50236C(v134, (uint64_t)&v141[qword_1ED3B2F90]);
  v157 = v158;
  v143 = swift_allocObject();
  *(_QWORD *)(v143 + 16) = sub_1BB5AA488;
  *(_QWORD *)(v143 + 24) = v136;
  sub_1BA744E38((uint64_t)&v157, v143 + 32, (unint64_t *)&qword_1ED3B9200);
  *((_QWORD *)v141 + 3) = sub_1BB5AA524;
  *((_QWORD *)v141 + 4) = v143;
  swift_release();
  result = __swift_destroy_boxed_opaque_existential_1(v132);
  v117[48] = v141;
  return result;
}

NewsFeed::CoverIssueViewLayout::Options __swiftcall CoverIssueViewLayout.Options.init(traits:)(NewsFeed::CoverIssueViewLayout::Options traits)
{
  _QWORD *v1;

  *v1 = *(_QWORD *)traits.traits.rawValue;
  return traits;
}

uint64_t CoverIssueViewLayout.frame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.titleLabelFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.accessoryFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.moreActionsButtonFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.followButtonFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.downloadProgressBarFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.cloudIconFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.issueCoverViewLayoutAttributes.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.secondaryIssueCoverViewLayoutAttributes.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.selectionImageViewFrame.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  sub_1BA62E724();
  swift_allocObject();
  v11 = sub_1BB86D450();
  swift_allocObject();
  v10 = sub_1BB86D450();
  swift_allocObject();
  v2 = sub_1BB86D450();
  swift_allocObject();
  v3 = sub_1BB86D450();
  swift_allocObject();
  v4 = sub_1BB86D450();
  swift_allocObject();
  v5 = sub_1BB86D450();
  swift_allocObject();
  v6 = sub_1BB86D450();
  sub_1BA4CDF6C(0, &qword_1ED39C280, (uint64_t (*)(void))sub_1BA8D93BC, (uint64_t)&type metadata for IssueCoverViewLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5A48]);
  swift_allocObject();
  v7 = sub_1BB86D450();
  swift_allocObject();
  v8 = sub_1BB86D450();
  swift_allocObject();
  result = sub_1BB86D450();
  *a1 = v11;
  a1[1] = v10;
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v4;
  a1[5] = v5;
  a1[6] = v6;
  a1[7] = v7;
  a1[8] = v8;
  a1[9] = result;
  return result;
}

double CoverIssueViewLayout.Attributes.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double CoverIssueViewLayout.Attributes.titleLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double CoverIssueViewLayout.Attributes.accessoryFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

double CoverIssueViewLayout.Attributes.moreActionsButtonFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

double CoverIssueViewLayout.Attributes.followButtonFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

double CoverIssueViewLayout.Attributes.downloadProgressBarFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 160);
}

double CoverIssueViewLayout.Attributes.cloudIconFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 192);
}

double CoverIssueViewLayout.Attributes.issueCoverViewLayoutAttributes.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 272);
  result = *(double *)(v1 + 280);
  v4 = *(_OWORD *)(v1 + 240);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 256);
  *(_QWORD *)(a1 + 48) = v2;
  *(double *)(a1 + 56) = result;
  return result;
}

double CoverIssueViewLayout.Attributes.secondaryIssueCoverViewLayoutAttributes.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 336);
  result = *(double *)(v1 + 344);
  v4 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 320);
  *(_QWORD *)(a1 + 48) = v2;
  *(double *)(a1 + 56) = result;
  return result;
}

double CoverIssueViewLayout.Attributes.selectionImageViewFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 352);
}

uint64_t sub_1BB5A8A70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5A8AA0 + 4 * byte_1BB92B770[a1]))(0x656D617266, 0xE500000000000000);
}

uint64_t sub_1BB5A8AA0()
{
  return 0x62614C656C746974;
}

uint64_t sub_1BB5A8AC4()
{
  return 0x726F737365636361;
}

unint64_t sub_1BB5A8AEC()
{
  return 0xD000000000000016;
}

uint64_t sub_1BB5A8BAC()
{
  unsigned __int8 *v0;

  return sub_1BB5A8A70(*v0);
}

uint64_t sub_1BB5A8BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5ABA94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5A8BD8()
{
  sub_1BB5AA550();
  return sub_1BB874710();
}

uint64_t sub_1BB5A8C00()
{
  sub_1BB5AA550();
  return sub_1BB87471C();
}

uint64_t CoverIssueViewLayout.Attributes.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  sub_1BA4CDF6C(0, &qword_1EF2C7F48, (uint64_t (*)(void))sub_1BB5AA550, (uint64_t)&type metadata for CoverIssueViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v24 - v6;
  v56 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_QWORD *)v1 + 3);
  v54 = *((_QWORD *)v1 + 4);
  v53 = *((_QWORD *)v1 + 5);
  v55 = *((_QWORD *)v1 + 6);
  v52 = *((_QWORD *)v1 + 7);
  v51 = *((_QWORD *)v1 + 8);
  v50 = *((_QWORD *)v1 + 9);
  v48 = *((_QWORD *)v1 + 10);
  v47 = *((_QWORD *)v1 + 11);
  v44 = v1[6];
  v46 = *((_QWORD *)v1 + 14);
  v45 = *((_QWORD *)v1 + 15);
  v41 = v1[8];
  v43 = *((_QWORD *)v1 + 18);
  v42 = *((_QWORD *)v1 + 19);
  v38 = v1[10];
  v40 = *((_QWORD *)v1 + 22);
  v39 = *((_QWORD *)v1 + 23);
  v35 = v1[12];
  v37 = *((_QWORD *)v1 + 26);
  v36 = *((_QWORD *)v1 + 27);
  v29 = v1[14];
  v34 = *((_QWORD *)v1 + 30);
  v33 = *((_QWORD *)v1 + 31);
  v49 = *((_QWORD *)v1 + 34);
  v10 = *((_QWORD *)v1 + 42);
  v11 = a1[3];
  v30 = *((_QWORD *)v1 + 32);
  v31 = *((_QWORD *)v1 + 33);
  v32 = *((_QWORD *)v1 + 35);
  v25 = v1[18];
  v26 = *((_QWORD *)v1 + 38);
  v27 = *((_QWORD *)v1 + 39);
  v12 = *((_QWORD *)v1 + 41);
  v28 = *((_QWORD *)v1 + 40);
  v14 = *((_QWORD *)v1 + 43);
  v13 = *((_QWORD *)v1 + 44);
  v15 = *((_QWORD *)v1 + 45);
  v16 = *((_QWORD *)v1 + 46);
  v17 = *((_QWORD *)v1 + 47);
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_1BB5AA550();
  sub_1BB8746C8();
  v58 = v56;
  v59 = v8;
  v60 = v9;
  v65 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA62E16C(&qword_1EF2A9A18, MEMORY[0x1E0C9B9C0]);
  v18 = v4;
  v19 = v57;
  sub_1BB8741AC();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v21 = v50;
  v22 = v51;
  v23 = v49;
  *(_QWORD *)&v58 = v54;
  *((_QWORD *)&v58 + 1) = v53;
  v59 = v55;
  v60 = v52;
  v65 = 1;
  sub_1BB8741AC();
  *(_QWORD *)&v58 = v22;
  *((_QWORD *)&v58 + 1) = v21;
  v59 = v48;
  v60 = v47;
  v65 = 2;
  sub_1BB8741AC();
  v58 = v44;
  v59 = v46;
  v60 = v45;
  v65 = 3;
  sub_1BB8741AC();
  v58 = v41;
  v59 = v43;
  v60 = v42;
  v65 = 4;
  sub_1BB8741AC();
  v58 = v38;
  v59 = v40;
  v60 = v39;
  v65 = 5;
  sub_1BB8741AC();
  v58 = v35;
  v59 = v37;
  v60 = v36;
  v65 = 6;
  sub_1BB8741AC();
  v58 = v29;
  v59 = v34;
  v60 = v33;
  v61 = v30;
  v62 = v31;
  v63 = v23;
  v64 = v32;
  v65 = 7;
  sub_1BA8D944C();
  sub_1BB8741AC();
  v58 = v25;
  v59 = v26;
  v60 = v27;
  v61 = v28;
  v62 = v12;
  v63 = v10;
  v64 = v14;
  v65 = 8;
  sub_1BB8741AC();
  *(_QWORD *)&v58 = v13;
  *((_QWORD *)&v58 + 1) = v15;
  v59 = v16;
  v60 = v17;
  v65 = 9;
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v18);
}

uint64_t CoverIssueViewLayout.Attributes.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  sub_1BA4CDF6C(0, &qword_1ED39DBA0, (uint64_t (*)(void))sub_1BB5AA550, (uint64_t)&type metadata for CoverIssueViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v78 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5AA550();
  sub_1BB87468C();
  if (!v2)
  {
    v77 = a2;
    type metadata accessor for CGRect(0);
    v85 = 0;
    sub_1BA62E16C((unint64_t *)&unk_1ED3B9910, MEMORY[0x1E0C9B9E0]);
    sub_1BB8740D4();
    v9 = v79;
    v10 = v80;
    v85 = 1;
    sub_1BB8740D4();
    v11 = v79;
    v12 = v80;
    v85 = 2;
    sub_1BB8740D4();
    v73 = *((_QWORD *)&v12 + 1);
    v74 = v12;
    v75 = *((_QWORD *)&v11 + 1);
    v76 = v11;
    v13 = v79;
    v14 = v80;
    v85 = 3;
    sub_1BB8740D4();
    v69 = *((_QWORD *)&v14 + 1);
    v70 = v14;
    v71 = *((_QWORD *)&v13 + 1);
    v72 = v13;
    v15 = v79;
    v16 = v80;
    v85 = 4;
    sub_1BB8740D4();
    v65 = *((_QWORD *)&v16 + 1);
    v66 = v16;
    v67 = *((_QWORD *)&v15 + 1);
    v68 = v15;
    v17 = v79;
    v18 = v80;
    v85 = 5;
    sub_1BB8740D4();
    v61 = *((_QWORD *)&v18 + 1);
    v62 = v18;
    v63 = *((_QWORD *)&v17 + 1);
    v64 = v17;
    v19 = v79;
    v20 = v80;
    v85 = 6;
    sub_1BB8740D4();
    v59 = *((_QWORD *)&v79 + 1);
    v60 = v79;
    v57 = *((_QWORD *)&v80 + 1);
    v58 = v80;
    v85 = 7;
    sub_1BA8D9404();
    sub_1BB8740D4();
    v55 = *((_QWORD *)&v79 + 1);
    v56 = v79;
    v53 = *((_QWORD *)&v80 + 1);
    v54 = v80;
    v52 = v81;
    v51 = v82;
    v22 = v83;
    v50 = v84;
    v85 = 8;
    sub_1BB8740D4();
    v49 = v22;
    v47 = *((_QWORD *)&v79 + 1);
    v48 = v79;
    v45 = *((_QWORD *)&v80 + 1);
    v46 = v80;
    v44 = v81;
    v43 = v82;
    v41 = v83;
    v42 = v84;
    v85 = 9;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v78);
    v23 = v77;
    *v77 = v9;
    v23[1] = v10;
    v24 = v75;
    *((_QWORD *)v23 + 4) = v76;
    *((_QWORD *)v23 + 5) = v24;
    v25 = v73;
    *((_QWORD *)v23 + 6) = v74;
    *((_QWORD *)v23 + 7) = v25;
    v26 = v71;
    *((_QWORD *)v23 + 8) = v72;
    *((_QWORD *)v23 + 9) = v26;
    v27 = v69;
    *((_QWORD *)v23 + 10) = v70;
    *((_QWORD *)v23 + 11) = v27;
    v28 = v67;
    *((_QWORD *)v23 + 12) = v68;
    *((_QWORD *)v23 + 13) = v28;
    v29 = v65;
    *((_QWORD *)v23 + 14) = v66;
    *((_QWORD *)v23 + 15) = v29;
    v30 = v63;
    *((_QWORD *)v23 + 16) = v64;
    *((_QWORD *)v23 + 17) = v30;
    v31 = v61;
    *((_QWORD *)v23 + 18) = v62;
    *((_QWORD *)v23 + 19) = v31;
    v23[10] = v19;
    v23[11] = v20;
    v32 = v59;
    *((_QWORD *)v23 + 24) = v60;
    *((_QWORD *)v23 + 25) = v32;
    v33 = v57;
    *((_QWORD *)v23 + 26) = v58;
    *((_QWORD *)v23 + 27) = v33;
    v34 = v55;
    *((_QWORD *)v23 + 28) = v56;
    *((_QWORD *)v23 + 29) = v34;
    v35 = v53;
    *((_QWORD *)v23 + 30) = v54;
    *((_QWORD *)v23 + 31) = v35;
    v36 = v51;
    *((_QWORD *)v23 + 32) = v52;
    *((_QWORD *)v23 + 33) = v36;
    *((_QWORD *)v23 + 34) = v49;
    v37 = v48;
    *((_QWORD *)v23 + 35) = v50;
    *((_QWORD *)v23 + 36) = v37;
    v38 = v46;
    *((_QWORD *)v23 + 37) = v47;
    *((_QWORD *)v23 + 38) = v38;
    v39 = v44;
    *((_QWORD *)v23 + 39) = v45;
    *((_QWORD *)v23 + 40) = v39;
    *((_QWORD *)v23 + 41) = v43;
    *((_QWORD *)v23 + 42) = v41;
    *((_QWORD *)v23 + 43) = v42;
    v40 = v80;
    v23[22] = v79;
    v23[23] = v40;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BB5A9958()
{
  sub_1BB5ABEA4();
  return sub_1BB870FF0();
}

uint64_t sub_1BB5A9980@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return CoverIssueViewLayout.Attributes.init(from:)(a1, a2);
}

uint64_t sub_1BB5A9994(_QWORD *a1)
{
  return CoverIssueViewLayout.Attributes.encode(to:)(a1);
}

uint64_t sub_1BB5A99A8()
{
  sub_1BA915D30();
  return sub_1BB86D96C();
}

uint64_t CoverIssueViewLayout.Context.key.getter()
{
  return swift_retain();
}

uint64_t CoverIssueViewLayout.Context.model.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[7];
  _OWORD v12[2];

  v2 = *(_OWORD *)(v1 + 88);
  v3 = *(_OWORD *)(v1 + 120);
  v11[6] = *(_OWORD *)(v1 + 104);
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(v1 + 129);
  v4 = *(_OWORD *)(v1 + 24);
  v5 = *(_OWORD *)(v1 + 56);
  v11[2] = *(_OWORD *)(v1 + 40);
  v11[3] = v5;
  v11[4] = *(_OWORD *)(v1 + 72);
  v11[5] = v2;
  v11[0] = *(_OWORD *)(v1 + 8);
  v11[1] = v4;
  v6 = *(_OWORD *)(v1 + 88);
  v7 = *(_OWORD *)(v1 + 120);
  a1[6] = *(_OWORD *)(v1 + 104);
  a1[7] = v7;
  *(_OWORD *)((char *)a1 + 121) = *(_OWORD *)(v1 + 129);
  v8 = *(_OWORD *)(v1 + 24);
  v9 = *(_OWORD *)(v1 + 56);
  a1[2] = *(_OWORD *)(v1 + 40);
  a1[3] = v9;
  a1[4] = *(_OWORD *)(v1 + 72);
  a1[5] = v6;
  *a1 = *(_OWORD *)(v1 + 8);
  a1[1] = v8;
  return sub_1BA8D1F08((uint64_t)v11);
}

uint64_t CoverIssueViewLayout.Context.secondaryModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[144];

  sub_1BA744E38(v1 + 152, (uint64_t)v4, (unint64_t *)&qword_1ED3C23B0);
  sub_1BA744E38((uint64_t)v4, a1, (unint64_t *)&qword_1ED3C23B0);
  return sub_1BB5AA594((uint64_t)v4);
}

uint64_t CoverIssueViewLayout.Context.styler.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4C010C(v1 + 296, a1);
}

uint64_t sub_1BB5A9B20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = sub_1BB435950();
  v5 = (*(uint64_t (**)(uint64_t))(v3 + 80))(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_1BB5A9BC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = sub_1BB435950();
  v5 = (*(uint64_t (**)(uint64_t))(v3 + 88))(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_1BB5A9C60@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[48];
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  sub_1BA744E38((uint64_t)(a2 + 9), (uint64_t)v14, &qword_1ED39C8F8);
  sub_1BA744E38((uint64_t)v14, (uint64_t)v15, &qword_1ED39C8F8);
  if (v16 == 1 || !v17)
  {
    v7 = *a2;
    sub_1BA8D1F08((uint64_t)a2);
    v8 = objc_msgSend(v7, sel_coverDate);
    sub_1BB8729A0();
    swift_bridgeObjectRelease();

    sub_1BA8D1FE4((uint64_t)a2);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v9 = sub_1BB872A24();
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 96))(v9, v11, v5, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v12;
  return result;
}

uint64_t sub_1BB5A9D98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 24);
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = sub_1BB435A5C();
  if (v4 == 2)
    v9 = 12;
  else
    v9 = 13;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8 * v9))(v7, v8, v5, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_1BB5A9E44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BB5A9B20(a1, a2);
}

uint64_t sub_1BB5A9E4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v6 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  v7 = sub_1BB872A24();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v7, v9, v3, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t sub_1BB5A9F64@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v6 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1BB86C340();

  v7 = sub_1BB872A24();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 120))(v7, v9, v3, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t sub_1BB5AA08C@<X0>(id *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_1BB5AA1D0(a1);
  v6 = v5;
  v7 = *a1;
  v8 = objc_msgSend(*a1, sel_coverDate);
  v9 = sub_1BB8729A0();
  v11 = v10;

  sub_1BA7114A0();
  LOBYTE(v8) = sub_1BB873B1C();
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    sub_1BB5AA490(0, (unint64_t *)&qword_1ED3B9FB0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1BB87A390;
    *(_QWORD *)(v13 + 32) = v4;
    *(_QWORD *)(v13 + 40) = v6;
    v14 = objc_msgSend(v7, sel_coverDate, v9, v11);
    v15 = sub_1BB8729A0();
    v17 = v16;

    *(_QWORD *)(v13 + 48) = v15;
    *(_QWORD *)(v13 + 56) = v17;
    v4 = sub_1BB86F748();
    v6 = v18;
    result = swift_bridgeObjectRelease();
  }
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t sub_1BB5AA1D0(id *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *a1;
  v2 = objc_msgSend(*a1, sel_title);
  sub_1BB8729A0();

  v3 = objc_msgSend(objc_msgSend(v1, sel_sourceChannel), sel_name);
  swift_unknownObjectRelease();
  v4 = sub_1BB8729A0();
  v6 = v5;

  v21 = v4;
  sub_1BA7114A0();
  LOBYTE(v4) = sub_1BB873B1C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    v7 = objc_msgSend(v1, sel_title, v21, v6);
    v8 = sub_1BB8729A0();

  }
  else
  {
    sub_1BB5AA490(0, (unint64_t *)&qword_1ED3B9FB0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1BB87A390;
    v10 = objc_msgSend(objc_msgSend(v1, sel_sourceChannel, v21, v6), sel_name);
    swift_unknownObjectRelease();
    v11 = sub_1BB8729A0();
    v13 = v12;

    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    v14 = objc_msgSend(v1, sel_title);
    v15 = sub_1BB8729A0();
    v17 = v16;

    *(_QWORD *)(v9 + 48) = v15;
    *(_QWORD *)(v9 + 56) = v17;
    v8 = sub_1BB86F748();
    v19 = v18;
    swift_bridgeObjectRelease();
    if (!v19)
      return 0;
  }
  return v8;
}

void CoverIssueViewLayout.Options.traits.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

NewsFeed::CoverIssueViewLayout::Traits __swiftcall CoverIssueViewLayout.Traits.init(rawValue:)(NewsFeed::CoverIssueViewLayout::Traits rawValue)
{
  NewsFeed::CoverIssueViewLayout::Traits *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CoverIssueViewLayout.Traits.showTitle.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CoverIssueViewLayout.Traits.includeBottomInset.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CoverIssueViewLayout.Traits.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1BB5AA424@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BB5A9BC0(a1, a2);
}

uint64_t sub_1BB5AA434@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5A9C60(a1, (void **)(v2 + 16), a2);
}

uint64_t sub_1BB5AA444@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5A9D98(a1, v2 + 16, a2);
}

id sub_1BB5AA458@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = sub_1BB739588(a1, *(void (**)(_OWORD *__return_ptr, _BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_1BB5AA488@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BB5AA08C((id *)(v1 + 16), a1);
}

void sub_1BB5AA490(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1BA4CF8F4(255, (unint64_t *)&qword_1ED3B9200);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BB5AA4F8()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5AA524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1BB73945C(a1, *(void (**)(_OWORD *__return_ptr, _BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *a2 = result;
  a2[1] = v5;
  return result;
}

unint64_t sub_1BB5AA550()
{
  unint64_t result;

  result = qword_1ED39CF08;
  if (!qword_1ED39CF08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92BC3C, &type metadata for CoverIssueViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39CF08);
  }
  return result;
}

uint64_t sub_1BB5AA594(uint64_t a1)
{
  sub_1BB43E670(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(void **)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  return a1;
}

uint64_t _s8NewsFeed20CoverIssueViewLayoutV7ContextV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v8;
  char v9;
  _QWORD v11[49];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16)
    && *(_QWORD *)(*(_QWORD *)a1 + 24) == *(_QWORD *)(v5 + 24);
  if (v6 || (sub_1BB874398() & 1) != 0)
  {
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier) == *(_QWORD *)(v5
                                                                                             + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier)
      && *(_QWORD *)(v4 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier + 8) == *(_QWORD *)(v5
                                                                                                 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier
                                                                                                 + 8))
    {
      sub_1BA915B28(a1, (uint64_t)v12);
      sub_1BA915B28(a2, (uint64_t)v11);
    }
    else
    {
      v8 = sub_1BB874398();
      sub_1BA915B28(a1, (uint64_t)v12);
      sub_1BA915B28(a2, (uint64_t)v11);
      v9 = 0;
      if ((v8 & 1) == 0)
        goto LABEL_18;
    }
    if (v13 == v11[2] && v14 == v11[3])
      v9 = 1;
    else
      v9 = sub_1BB874398();
  }
  else
  {
    sub_1BA915B28(a1, (uint64_t)v12);
    sub_1BA915B28(a2, (uint64_t)v11);
    v9 = 0;
  }
LABEL_18:
  sub_1BA915C30((uint64_t)v12);
  sub_1BA915C30((uint64_t)v11);
  return v9 & 1;
}

unint64_t sub_1BB5AA728()
{
  unint64_t result;

  result = qword_1EF2C7F50;
  if (!qword_1EF2C7F50)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Attributes, &type metadata for CoverIssueViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F50);
  }
  return result;
}

unint64_t sub_1BB5AA778()
{
  unint64_t result;

  result = qword_1ED39CF20;
  if (!qword_1ED39CF20)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Attributes, &type metadata for CoverIssueViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED39CF20);
  }
  return result;
}

unint64_t sub_1BB5AA7C0()
{
  unint64_t result;

  result = qword_1EF2C7F58;
  if (!qword_1EF2C7F58)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Traits, &type metadata for CoverIssueViewLayout.Traits);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F58);
  }
  return result;
}

unint64_t sub_1BB5AA808()
{
  unint64_t result;

  result = qword_1EF2C7F60;
  if (!qword_1EF2C7F60)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Traits, &type metadata for CoverIssueViewLayout.Traits);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F60);
  }
  return result;
}

unint64_t sub_1BB5AA850()
{
  unint64_t result;

  result = qword_1EF2C7F68;
  if (!qword_1EF2C7F68)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Traits, &type metadata for CoverIssueViewLayout.Traits);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F68);
  }
  return result;
}

unint64_t sub_1BB5AA898()
{
  unint64_t result;

  result = qword_1EF2C7F70;
  if (!qword_1EF2C7F70)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Traits, &type metadata for CoverIssueViewLayout.Traits);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F70);
  }
  return result;
}

_QWORD *assignWithCopy for CoverIssueViewLayout(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout()
{
  return &type metadata for CoverIssueViewLayout;
}

void *__swift_memcpy384_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t getEnumTagSinglePayload for CoverIssueViewLayout.Attributes(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 384))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CoverIssueViewLayout.Attributes(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 384) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout.Attributes()
{
  return &type metadata for CoverIssueViewLayout.Attributes;
}

uint64_t destroy for CoverIssueViewLayout.Context(uint64_t a1)
{
  void *v2;

  swift_release();

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 88) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(a1 + 136) >= 0x11uLL)
    swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 152);
  if (v2)
  {

    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 232) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    if (*(_QWORD *)(a1 + 280) >= 0x11uLL)
      swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 296);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CoverIssueViewLayout.Context(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  swift_retain();
  v8 = v4;
  swift_bridgeObjectRetain();
  v9 = v6;
  if (v7 == 1)
  {
    v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v7;
    v11 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    v13 = *(void **)(a2 + 112);
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v13;
    *(_QWORD *)(a1 + 120) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v13;
  }
  v15 = (_QWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 136);
  if (v16 >= 0x11)
  {
    *(_QWORD *)(a1 + 128) = *v15;
    *(_QWORD *)(a1 + 136) = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v15;
  }
  v17 = *(void **)(a2 + 152);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 160);
    v19 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 152) = v17;
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = v19;
    *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v20 = *(void **)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v20;
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v21 = *(_QWORD *)(a2 + 232);
    v22 = v17;
    swift_bridgeObjectRetain();
    v23 = v20;
    if (v21 == 1)
    {
      v24 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v24;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    }
    else
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v21;
      v29 = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = v29;
      v31 = *(void **)(a2 + 256);
      v30 = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = v31;
      *(_QWORD *)(a1 + 264) = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = v31;
    }
    v33 = (_QWORD *)(a2 + 272);
    v34 = *(_QWORD *)(a2 + 280);
    if (v34 >= 0x11)
    {
      *(_QWORD *)(a1 + 272) = *v33;
      *(_QWORD *)(a1 + 280) = v34;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 272) = *(_OWORD *)v33;
    }
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v25;
    *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
    v26 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v26;
    v27 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v27;
    v28 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v28;
  }
  v35 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 320) = v35;
  (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1 + 296, a2 + 296);
  v36 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v36;
  v37 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v37;
  v38 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v38;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CoverIssueViewLayout.Context(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  _OWORD *v24;
  void *v25;
  void *v26;
  _OWORD *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  id v65;
  unint64_t v66;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(void **)(a2 + 64);
  v9 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  v10 = v8;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = (__int128 *)(a1 + 80);
  v12 = (__int128 *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) == 1)
  {
    if (v13 == 1)
    {
      v14 = *v12;
      v15 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v15;
      *v11 = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v18 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v18;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = v18;
    }
  }
  else if (v13 == 1)
  {
    sub_1BB4371DC(a1 + 80);
    v17 = *(_OWORD *)(a2 + 96);
    v16 = *(_OWORD *)(a2 + 112);
    *v11 = *v12;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v16;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = *(void **)(a2 + 112);
    v21 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v20;
    v22 = v20;

    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  }
  v23 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136) < 0x11uLL)
  {
    if (v23 >= 0x11)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v23 < 0x11)
  {
    sub_1BA905D68(a1 + 128);
LABEL_13:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_15:
  v24 = (_OWORD *)(a1 + 152);
  v25 = *(void **)(a1 + 152);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v27 = (_OWORD *)(a2 + 152);
  v26 = *(void **)(a2 + 152);
  if (v25)
  {
    if (v26)
    {
      *(_QWORD *)(a1 + 152) = v26;
      v28 = v26;

      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
      v29 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v29;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v30 = *(void **)(a2 + 208);
      v31 = *(void **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v30;
      v32 = v30;

      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      v33 = (__int128 *)(a1 + 224);
      v34 = (__int128 *)(a2 + 224);
      v35 = *(_QWORD *)(a2 + 232);
      if (*(_QWORD *)(a1 + 232) == 1)
      {
        if (v35 == 1)
        {
          v36 = *v34;
          v37 = *(_OWORD *)(a2 + 256);
          *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
          *(_OWORD *)(a1 + 256) = v37;
          *v33 = v36;
        }
        else
        {
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          v61 = *(void **)(a2 + 256);
          *(_QWORD *)(a1 + 256) = v61;
          *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v62 = v61;
        }
      }
      else if (v35 == 1)
      {
        sub_1BB4371DC(a1 + 224);
        v52 = *(_OWORD *)(a2 + 240);
        v51 = *(_OWORD *)(a2 + 256);
        *v33 = *v34;
        *(_OWORD *)(a1 + 240) = v52;
        *(_OWORD *)(a1 + 256) = v51;
      }
      else
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v63 = *(void **)(a2 + 256);
        v64 = *(void **)(a1 + 256);
        *(_QWORD *)(a1 + 256) = v63;
        v65 = v63;

        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      }
      v66 = *(_QWORD *)(a2 + 280);
      if (*(_QWORD *)(a1 + 280) >= 0x11uLL)
      {
        if (v66 >= 0x11)
        {
          *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
          *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        sub_1BA905D68(a1 + 272);
      }
      else if (v66 >= 0x11)
      {
        goto LABEL_34;
      }
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      goto LABEL_39;
    }
    sub_1BB5AB480(a1 + 152);
    *v24 = *v27;
    v45 = *(_OWORD *)(a2 + 216);
    v47 = *(_OWORD *)(a2 + 168);
    v46 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v45;
    *(_OWORD *)(a1 + 168) = v47;
    *(_OWORD *)(a1 + 184) = v46;
    v49 = *(_OWORD *)(a2 + 248);
    v48 = *(_OWORD *)(a2 + 264);
    v50 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
    *(_OWORD *)(a1 + 248) = v49;
    *(_OWORD *)(a1 + 264) = v48;
    *(_OWORD *)(a1 + 232) = v50;
  }
  else
  {
    if (v26)
    {
      *(_QWORD *)(a1 + 152) = v26;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
      v38 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v38;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      v39 = *(void **)(a2 + 208);
      *(_QWORD *)(a1 + 208) = v39;
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      v40 = *(_QWORD *)(a2 + 232);
      v41 = v26;
      swift_bridgeObjectRetain();
      v42 = v39;
      if (v40 == 1)
      {
        v43 = *(_OWORD *)(a2 + 224);
        v44 = *(_OWORD *)(a2 + 256);
        *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 256) = v44;
        *(_OWORD *)(a1 + 224) = v43;
      }
      else
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        v59 = *(void **)(a2 + 256);
        *(_QWORD *)(a1 + 256) = v59;
        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60 = v59;
      }
      if (*(_QWORD *)(a2 + 280) < 0x11uLL)
      {
        *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
LABEL_39:
        *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
        goto LABEL_40;
      }
LABEL_34:
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }
    *v24 = *v27;
    v53 = *(_OWORD *)(a2 + 168);
    v54 = *(_OWORD *)(a2 + 184);
    v55 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v55;
    *(_OWORD *)(a1 + 168) = v53;
    *(_OWORD *)(a1 + 184) = v54;
    v56 = *(_OWORD *)(a2 + 232);
    v57 = *(_OWORD *)(a2 + 248);
    v58 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
    *(_OWORD *)(a1 + 248) = v57;
    *(_OWORD *)(a1 + 264) = v58;
    *(_OWORD *)(a1 + 232) = v56;
  }
LABEL_40:
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 296), (uint64_t *)(a2 + 296));
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BB5AB480(uint64_t a1)
{
  destroy for FeedIssue(a1);
  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t assignWithTake for CoverIssueViewLayout.Context(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (*(_QWORD *)(a1 + 88) == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 88);
  if (v8 == 1)
  {
    sub_1BB4371DC(a1 + 80);
LABEL_4:
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  v11 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
LABEL_6:
  v12 = (_OWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 136) < 0x11uLL)
  {
LABEL_9:
    *(_OWORD *)(a1 + 128) = *v12;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 136);
  if (v13 < 0x11)
  {
    sub_1BA905D68(a1 + 128);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)v12;
  *(_QWORD *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
LABEL_11:
  v14 = *(_QWORD *)(a2 + 152);
  v15 = *(void **)(a1 + 152);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  if (v15)
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 152) = v14;

      v16 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v16;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      v17 = *(_QWORD *)(a2 + 208);
      v18 = *(void **)(a1 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v17;

      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      if (*(_QWORD *)(a1 + 232) != 1)
      {
        v19 = *(_QWORD *)(a2 + 232);
        if (v19 != 1)
        {
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          *(_QWORD *)(a1 + 232) = v19;
          swift_bridgeObjectRelease();
          v25 = *(_QWORD *)(a2 + 248);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          *(_QWORD *)(a1 + 248) = v25;
          swift_bridgeObjectRelease();
          v26 = *(void **)(a1 + 256);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);

          *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
LABEL_20:
          v27 = (_QWORD *)(a2 + 272);
          if (*(_QWORD *)(a1 + 280) >= 0x11uLL)
          {
            v28 = *(_QWORD *)(a2 + 280);
            if (v28 >= 0x11)
            {
              *(_QWORD *)(a1 + 272) = *v27;
              *(_QWORD *)(a1 + 280) = v28;
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
            sub_1BA905D68(a1 + 272);
          }
          *(_OWORD *)(a1 + 272) = *(_OWORD *)v27;
LABEL_25:
          *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
          goto LABEL_26;
        }
        sub_1BB4371DC(a1 + 224);
      }
      v20 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v20;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      goto LABEL_20;
    }
    sub_1BB5AB480(a1 + 152);
  }
  v21 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 273) = *(_OWORD *)(a2 + 273);
  v22 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v22;
  v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v23;
  v24 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v24;
LABEL_26:
  __swift_destroy_boxed_opaque_existential_1(a1 + 296);
  v29 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v29;
  v30 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v30;
  swift_release();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_release();
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_release();
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  swift_release();
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  swift_release();
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_release();
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverIssueViewLayout.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 392))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverIssueViewLayout.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 392) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 392) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout.Context()
{
  return &type metadata for CoverIssueViewLayout.Context;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout.Options()
{
  return &type metadata for CoverIssueViewLayout.Options;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout.Traits()
{
  return &type metadata for CoverIssueViewLayout.Traits;
}

uint64_t storeEnumTagSinglePayload for CoverIssueViewLayout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BB5AB93C + 4 * byte_1BB92B77F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BB5AB970 + 4 * byte_1BB92B77A[v4]))();
}

uint64_t sub_1BB5AB970(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5AB978(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5AB980);
  return result;
}

uint64_t sub_1BB5AB98C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5AB994);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BB5AB998(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5AB9A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoverIssueViewLayout.Attributes.CodingKeys()
{
  return &type metadata for CoverIssueViewLayout.Attributes.CodingKeys;
}

unint64_t sub_1BB5AB9C0()
{
  unint64_t result;

  result = qword_1EF2C7F78;
  if (!qword_1EF2C7F78)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92BC14, &type metadata for CoverIssueViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F78);
  }
  return result;
}

unint64_t sub_1BB5ABA08()
{
  unint64_t result;

  result = qword_1ED39CF18;
  if (!qword_1ED39CF18)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92BB84, &type metadata for CoverIssueViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39CF18);
  }
  return result;
}

unint64_t sub_1BB5ABA50()
{
  unint64_t result;

  result = qword_1ED39CF10;
  if (!qword_1ED39CF10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92BBAC, &type metadata for CoverIssueViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED39CF10);
  }
  return result;
}

uint64_t sub_1BB5ABA94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D617266 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x62614C656C746974 && a2 == 0xEF656D6172466C65 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xEE00656D61724679 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001BB968120 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB9919D0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001BB9919F0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F634964756F6C63 && a2 == 0xEE00656D6172466ELL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001BB965950 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000027 && a2 == 0x80000001BB991A10 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BB991A40)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

unint64_t sub_1BB5ABEA4()
{
  unint64_t result;

  result = qword_1EF2C7F80;
  if (!qword_1EF2C7F80)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for CoverIssueViewLayout.Attributes, &type metadata for CoverIssueViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F80);
  }
  return result;
}

uint64_t FormatStateMachineEvent.fromState.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatStateMachineEvent.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatStateMachineEvent.fromState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*FormatStateMachineEvent.fromState.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatStateMachineEvent.toState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BB5ABF84()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5ABF8C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t FormatStateMachineEventValue.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static FormatStateMachineEventValue.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

uint64_t _s8NewsFeed23FormatStateMachineEventV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  char v11;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_1BB874398(), result = 0, (v9 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_1BA6EB330(v2, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      if (v3 == v5 && v4 == v7)
        return 1;
      else
        return sub_1BB874398();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BB5AC0E4(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5AC108();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5AC108()
{
  unint64_t result;

  result = qword_1EF2C7F88;
  if (!qword_1EF2C7F88)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEvent, &type metadata for FormatStateMachineEvent);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F88);
  }
  return result;
}

unint64_t sub_1BB5AC150()
{
  unint64_t result;

  result = qword_1ED3B9190;
  if (!qword_1ED3B9190)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for String, MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED3B9190);
  }
  return result;
}

uint64_t sub_1BB5AC194(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA828C1C, (uint64_t (*)(void))sub_1BAEE4FB0, (uint64_t (*)(void))sub_1BB5AC1B0);
}

unint64_t sub_1BB5AC1B0()
{
  unint64_t result;

  result = qword_1EF2C7F90;
  if (!qword_1EF2C7F90)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEvent, &type metadata for FormatStateMachineEvent);
    atomic_store(result, (unint64_t *)&qword_1EF2C7F90);
  }
  return result;
}

unint64_t sub_1BB5AC1F4(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA823170();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5AC218()
{
  unint64_t result;

  result = qword_1ED3D17F0;
  if (!qword_1ED3D17F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatStateMachineEventValue, &type metadata for FormatStateMachineEventValue);
    atomic_store(result, (unint64_t *)&qword_1ED3D17F0);
  }
  return result;
}

uint64_t sub_1BB5AC25C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5AC268(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FormatStateMachineEvent()
{
  return &type metadata for FormatStateMachineEvent;
}

ValueMetadata *type metadata accessor for FormatStateMachineEventValue()
{
  return &type metadata for FormatStateMachineEventValue;
}

void sub_1BB5AC2C8()
{
  uint64_t v1;
  uint64_t v2;

  sub_1BA710610(0, (unint64_t *)&qword_1ED3B5EE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], &qword_1ED3C44E0, (uint64_t)&protocol conformance descriptor for URL);
  MEMORY[0x1E0C80A78](v1);
  sub_1BA710610(0, (unint64_t *)&qword_1ED3B5EF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (unint64_t *)&qword_1ED3C44F0, (uint64_t)&protocol conformance descriptor for Date);
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X11 }
}

uint64_t sub_1BB5AC3B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for FormatJson();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

uint64_t sub_1BB5AC55C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *v1 = *(_QWORD *)(a1 + 16);
  v1[1] = v2;
  v3 = type metadata accessor for FormatJson();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 0, 1, v3);
  return swift_bridgeObjectRetain();
}

void sub_1BB5AC5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v2 = swift_projectBox();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  sub_1BA7A64B4(v2, v1, (unint64_t *)&qword_1ED3B5EE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], &qword_1ED3C44E0, (uint64_t)&protocol conformance descriptor for URL);
  v4 = sub_1BB86C67C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v0, v1, v4);
  sub_1BA7A6424(v1, (unint64_t *)&qword_1ED3B5EE8, v3, &qword_1ED3C44E0, (uint64_t)&protocol conformance descriptor for URL);
  type metadata accessor for FormatJson();
  JUMPOUT(0x1BB5AC650);
}

uint64_t sub_1BB5AC674@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for FormatJson();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  return swift_retain();
}

void sub_1BB5AC6D8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = *(_QWORD *)(a1 + 24);
  swift_retain_n();
  swift_retain();
  sub_1BB5AC2C8();
  swift_release_n();
  swift_release();
  JUMPOUT(0x1BB5AC720);
}

uint64_t sub_1BB5AC740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  sub_1BAFFD014();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    v4 = *((_QWORD *)&v8 + 1);
    v5 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, a2, v4, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    return sub_1BA4A2E80((uint64_t)&v7, (uint64_t (*)(_QWORD))sub_1BAFFD0A4);
  }
}

uint64_t sub_1BB5AC81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  sub_1BABD3FF4(a1, a2, a3);
  return swift_release();
}

uint64_t FormatStateViewNode.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  _QWORD v96[10];
  char v97;
  uint64_t v98;

  v5 = sub_1BB86C8E0();
  v87 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v86 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA7A2B00();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__types);
  swift_beginAccess();
  v11 = *v10;
  v12 = v10[1];
  v88 = v2;
  v13 = *(_QWORD *)(v2 + 56);
  v90 = *(_QWORD *)(v2 + 64);
  if (!*(_QWORD *)(v12 + 16))
  {
    sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B3790, (uint64_t (*)(void))sub_1BA896870, (uint64_t)&type metadata for FormatType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_7:
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BA7A2B00);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for FormatLayoutError();
    sub_1BA50AD30((unint64_t *)&qword_1ED3B4C10, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t)&unk_1BB94DDEC);
    v51 = swift_allocError();
    *v52 = v13;
    v52[1] = v90;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    v89 = v51;
    return swift_willThrow();
  }
  v83 = v5;
  v84 = a1;
  v85 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v90;
  swift_bridgeObjectRetain();
  v15 = sub_1BA6E35A8(v13, v14);
  if ((v16 & 1) != 0)
  {
    v17 = v15;
    v18 = *(_QWORD *)(v12 + 56);
    sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B3790, (uint64_t (*)(void))sub_1BA896870, (uint64_t)&type metadata for FormatType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
    v20 = v19;
    v21 = *(_QWORD *)(v19 - 8);
    sub_1BA7A2A5C(v18 + *(_QWORD *)(v21 + 72) * v17, (uint64_t)v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
  }
  else
  {
    sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B3790, (uint64_t (*)(void))sub_1BA896870, (uint64_t)&type metadata for FormatType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
    v20 = v23;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
  }
  swift_bridgeObjectRelease();
  sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B3790, (uint64_t (*)(void))sub_1BA896870, (uint64_t)&type metadata for FormatType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FormatObject);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v9, 1, v20) == 1)
    goto LABEL_7;
  v78 = v13;
  v81 = *((_QWORD *)v9 + 1);
  v24 = *((_QWORD *)v9 + 4);
  v79 = *((_QWORD *)v9 + 3);
  v80 = v11;
  v26 = *((_QWORD *)v9 + 5);
  v25 = *((_QWORD *)v9 + 6);
  v28 = *((_QWORD *)v9 + 7);
  v27 = *((_QWORD *)v9 + 8);
  v29 = *((_QWORD *)v9 + 9);
  v30 = v9[80];
  LODWORD(v82) = v30 >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BA709DE8(v24, v26, v25, v28, v27, v29, v30);
  sub_1BA7A508C((uint64_t)v9);
  v31 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA709DE8(v24, v26, v25, v28, v27, v29, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = v26;
  sub_1BA6C0C20(v24, v26, v25, v28, v27, v29, v30);
  if ((_DWORD)v82 != 1)
  {
    sub_1BA6C0C20(v24, v81, v25, v28, v27, v29, v30);
    v13 = v78;
    goto LABEL_13;
  }
  v77 = v24;
  if ((v30 & 1) != 0)
  {
    v32 = v25;
    v79 = v28;
    v33 = v27;
    v82 = v29;
    LODWORD(v80) = v30;
    v34 = v84;
LABEL_11:
    v35 = v88;
    swift_beginAccess();
    v36 = *(_QWORD *)(v35 + 16);
    v37 = *(_QWORD *)(v35 + 24);
    swift_bridgeObjectRetain();
    v84 = sub_1BA717D44(v36, v37);
    v39 = v38;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v40 = v86;
    sub_1BB86C8D4();
    v41 = sub_1BB86C8C8();
    v43 = v42;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v40, v83);
    v96[0] = v41;
    v96[1] = v43;
    v96[2] = v78;
    v96[3] = v90;
    v44 = v77;
    v45 = v81;
    v96[4] = v77;
    v96[5] = v81;
    v46 = v79;
    v96[6] = v32;
    v96[7] = v79;
    v47 = v82;
    v96[8] = v33;
    v96[9] = v82;
    LOBYTE(v43) = v80;
    v97 = v80 & 1;
    swift_bridgeObjectRetain();
    sub_1BA709DE8(v44, v45, v32, v46, v33, v47, v43);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v98 = *(_QWORD *)(v34 + 72);
    *(_QWORD *)(v34 + 72) = 0x8000000000000000;
    sub_1BB4BE138((uint64_t)v96, v84, v39, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v34 + 72) = v98;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    v49 = v89;
    FormatStateViewNode.bindChildren(binder:context:)(v34, v85);
    result = sub_1BA6C0C20(v77, v45, v32, v46, v33, v47, v43);
    v89 = v49;
    return result;
  }
  v54 = *(_QWORD *)(v25 + 16);
  v53 = *(_QWORD *)(v25 + 24);
  v55 = *(_QWORD *)(v25 + 32);
  v56 = *(unsigned __int8 *)(v25 + 40);
  LODWORD(v80) = *(unsigned __int8 *)(v25 + 41);
  v91 = v54;
  v92 = v53;
  v93 = v55;
  v94 = v56;
  v95 = v80;
  sub_1BA7261E0(v25, v28, v27, v31, 0);
  swift_retain();
  v74 = v54;
  v57 = v54;
  v58 = v80;
  v79 = v53;
  v76 = v55;
  v75 = v56;
  sub_1BB5AE860(v57, v53, v55, v56, v80, (uint64_t (*)(void))sub_1BA856DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA60DF54);
  v59 = v31;
  v34 = v84;
  v60 = v85;
  v61 = v89;
  FormatCommandBinding.bind(binder:context:)();
  v89 = v61;
  if (v61)
  {
    sub_1BB5AE860(v74, v79, v76, v75, v58, (uint64_t (*)(void))sub_1BA7EDFFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA60DFC4);
    swift_release();
    sub_1BA6C1F54(v25, v28, v27, v59, 0);
    v62 = v77;
    v63 = v81;
    v64 = v25;
    v65 = v28;
    v66 = v27;
    v67 = v59;
  }
  else
  {
    v82 = v59;
    sub_1BB5AE860(v74, v79, v76, v75, v58, (uint64_t (*)(void))sub_1BA7EDFFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA60DFC4);
    swift_release();
    v68 = v89;
    sub_1BAB72EEC(v34, v60, v28);
    v89 = v68;
    if (!v68)
    {
      v72 = v82;
      sub_1BB5AC740(v34, v60);
      v32 = v25;
      sub_1BA6C1F54(v25, v28, v27, v72, 0);
      v89 = 0;
      v79 = v28;
      v33 = v27;
      LODWORD(v80) = v30;
      goto LABEL_11;
    }
    v69 = v25;
    v70 = v25;
    v71 = v82;
    sub_1BA6C1F54(v69, v28, v27, v82, 0);
    v62 = v77;
    v63 = v81;
    v64 = v70;
    v65 = v28;
    v66 = v27;
    v67 = v71;
  }
  return sub_1BA6C0C20(v62, v63, v64, v65, v66, v67, v30);
}

unint64_t FormatStateViewNode.size.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = v3;
  return sub_1BA71CA6C(v3);
}

uint64_t FormatStateViewNode.adjustments.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

unint64_t FormatStateViewNode.visibility.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 88);
  *a1 = v3;
  return sub_1BA67D3F4(v3);
}

void sub_1BB5AD24C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = a1;
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[9];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v24 = v1[7];
    v26 = MEMORY[0x1E0DEE9D8];
    v23 = v1[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA7447E8(0, v6, 0);
    v7 = v26;
    v8 = (uint64_t *)(v5 + 56);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      v12 = *(_QWORD *)(v26 + 16);
      v11 = *(_QWORD *)(v26 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v11 >> 1)
        sub_1BA7447E8(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v26 + 16) = v12 + 1;
      v13 = v26 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v3 = v24;
    v2 = a1;
    v4 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v4;
  *(_QWORD *)(v14 + 32) = v7;
  v15 = v14 | 0xA000000000000000;
  v16 = *(_QWORD **)(v2 + 48);
  v17 = v16[2];
  if (v17
    && (v18 = v16[v17 + 3],
        swift_retain(),
        swift_retain(),
        sub_1BAA736F8(v18),
        v20 = v19,
        swift_release(),
        swift_release(),
        (v20 & 1) != 0))
  {
    swift_release();
  }
  else
  {
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_1BB38ED0C(0, v16[2] + 1, 1, v16);
    v22 = v16[2];
    v21 = v16[3];
    if (v22 >= v21 >> 1)
      v16 = sub_1BB38ED0C((_QWORD *)(v21 > 1), v22 + 1, 1, v16);
    v16[2] = v22 + 1;
    v16[v22 + 4] = v15;
    swift_release();
    *(_QWORD *)(v2 + 48) = v16;
  }
  sub_1BAC514E4(v2);
}

uint64_t FormatStateViewNode.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatStateViewNode.zIndex.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 80);
}

uint64_t FormatStateViewNode.isUserInteractionEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t FormatStateViewNode.selectors.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t FormatStateViewNode.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatStateViewNode.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t FormatStateViewNode.size.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v2;
  return sub_1BA719718(v3);
}

uint64_t (*FormatStateViewNode.size.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatStateViewNode.resize.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  return swift_retain();
}

uint64_t FormatStateViewNode.adjustments.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatStateViewNode.adjustments.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatStateViewNode.stateMachineName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatStateViewNode.states.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatStateViewNode.zIndex.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*FormatStateViewNode.zIndex.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t FormatStateViewNode.visibility.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = v2;
  return sub_1BA6EEDB4(v3);
}

uint64_t (*FormatStateViewNode.visibility.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatStateViewNode.isUserInteractionEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 96) = a1;
  return result;
}

uint64_t (*FormatStateViewNode.isUserInteractionEnabled.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatStateViewNode.animation.getter()
{
  return swift_retain();
}

uint64_t FormatStateViewNode.selectors.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatStateViewNode.selectors.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FormatStateViewNode.__allocating_init(identifier:size:resize:adjustments:stateMachineName:states:zIndex:visibility:isUserInteractionEnabled:animation:selectors:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;

  v17 = swift_allocObject();
  FormatStateViewNode.init(identifier:size:resize:adjustments:stateMachineName:states:zIndex:visibility:isUserInteractionEnabled:animation:selectors:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return v17;
}

uint64_t FormatStateViewNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1BA719718(*(_QWORD *)(v0 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BA6EEDB4(*(_QWORD *)(v0 + 88));
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatStateViewNode.__deallocating_deinit()
{
  FormatStateViewNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5ADA34(_QWORD *a1)
{
  return FormatStateViewNode.encode(to:)(a1);
}

uint64_t sub_1BB5ADA54(uint64_t *a1, uint64_t *a2)
{
  return _s8NewsFeed19FormatStateViewNodeC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_1BB5ADA60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  swift_beginAccess();
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a3 + 40);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    swift_retain();
  }
  else
  {
    v12 = 0;
  }
  swift_beginAccess();
  v13 = *(_QWORD *)(a3 + 80);
  swift_beginAccess();
  v14 = *(_QWORD *)(a3 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BA67D3F4(v14);
  sub_1BA67C978(a4, &v20);
  sub_1BA6EEDB4(v14);
  v15 = v20;
  swift_beginAccess();
  v16 = *(_BYTE *)(a3 + 96);
  sub_1BB86DD80();
  type metadata accessor for FormatStateViewNodeLayoutAttributes();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v9;
  *(_QWORD *)(v17 + 24) = v10;
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v13;
  *(_QWORD *)(v17 + 48) = v15;
  swift_beginAccess();
  *(_BYTE *)(v17 + 56) = v16;
  *(_QWORD *)(v17 + 64) = v19;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v17;
  *a5 = result | 0x4000000000000004;
  return result;
}

uint64_t sub_1BB5ADBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_getKeyPath();
  v30 = MEMORY[0x1E0DEA968];
  v31 = MEMORY[0x1E0DB64C8];
  v28 = a2;
  v29 = a3;
  v12 = MEMORY[0x1E0DB5DD0];
  sub_1BA735194(0, (unint64_t *)&qword_1ED3C4578, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BA735154(&qword_1ED3C4570, (unint64_t *)&qword_1ED3C4578, (uint64_t (*)(uint64_t, _QWORD *))v12, MEMORY[0x1E0DB5DD8]);
  sub_1BA50AD30((unint64_t *)&qword_1ED3B05F8, 255, (uint64_t (*)(uint64_t))sub_1BA62E870, MEMORY[0x1E0DB5A60]);
  swift_bridgeObjectRetain();
  sub_1BB86D4B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v32 = a1;
  swift_getKeyPath();
  v25 = a4;
  v13 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_namespace);
  swift_beginAccess();
  v15 = *(_QWORD *)(a5 + 16);
  v14 = *(_QWORD *)(a5 + 24);
  v16 = *(_QWORD *)(v13 + 40);
  if (v16)
  {
    v28 = *(_QWORD *)(v13 + 32);
    v29 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v17);
    sub_1BB872AFC(v18);
    swift_bridgeObjectRelease();
    v15 = v28;
    v14 = v29;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v19 = MEMORY[0x1E0DEA968];
  v30 = MEMORY[0x1E0DEA968];
  v20 = MEMORY[0x1E0DB64C8];
  v31 = MEMORY[0x1E0DB64C8];
  v28 = v15;
  v29 = v14;
  sub_1BB86D4B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v32 = a1;
  swift_getKeyPath();
  v22 = *(_QWORD *)(a5 + 16);
  v21 = *(_QWORD *)(a5 + 24);
  v30 = v19;
  v31 = v20;
  v28 = v22;
  v29 = v21;
  swift_bridgeObjectRetain();
  sub_1BB86D4B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v28 = a1;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a5;
  v23[3] = v25;
  v23[4] = a6;
  v23[5] = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BB86D4F8();
  return swift_release();
}

uint64_t sub_1BB5ADECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v6 = v5;
  v37 = a1;
  v38 = a5;
  v42 = a4;
  v9 = sub_1BB86DA38();
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(result + 16);
  if (v12)
  {
    v36 = a3;
    v13 = *(_QWORD **)(a3 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_namespace);
    v35 = *MEMORY[0x1E0DB6208];
    v14 = swift_bridgeObjectRetain();
    v15 = 32;
    v34 = v14;
    while (1)
    {
      v43 = v12;
      v16 = *(_OWORD *)(v14 + v15);
      v17 = *(_OWORD *)(v14 + v15 + 16);
      v48 = *(_QWORD *)(v14 + v15 + 32);
      v46 = v16;
      v47 = v17;
      v19 = *((_QWORD *)&v17 + 1);
      v18 = v17;
      v20 = v13[3];
      if (v20)
        break;
      sub_1BA7133FC((uint64_t)&v46);
      swift_bridgeObjectRetain();
      v23 = v13[7];
      if (v23)
        goto LABEL_5;
LABEL_6:
      v27 = sub_1BA70A468(0, 0);
      v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, v35, v41);
      MEMORY[0x1E0C80A78](v28);
      *(&v33 - 6) = v18;
      *(&v33 - 5) = v19;
      *(&v33 - 4) = v27;
      *(&v33 - 3) = (uint64_t)&v46;
      *(&v33 - 2) = v42;
      sub_1BA735194(0, &qword_1ED3C45B8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB6308]);
      swift_allocObject();
      v29 = sub_1BB86DB4C();
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return sub_1BB371BB8((uint64_t)&v46);
      }
      v30 = v29;
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v18;
      *(_QWORD *)(v31 + 24) = v19;
      *(_QWORD *)(v31 + 32) = v30;
      v32 = v47;
      *(_OWORD *)(v31 + 40) = v46;
      *(_OWORD *)(v31 + 56) = v32;
      *(_QWORD *)(v31 + 72) = v48;
      *(_QWORD *)(v31 + 80) = v27;
      *(_QWORD *)(v31 + 88) = v38;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1BB86D69C();
      swift_release();
      swift_release();
      swift_release();
      v15 += 40;
      v12 = v43 - 1;
      v14 = v34;
      if (v43 == 1)
        return swift_bridgeObjectRelease();
    }
    v44 = v13[2];
    v45 = v20;
    sub_1BA7133FC((uint64_t)&v46);
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v21);
    sub_1BB872AFC(v22);
    v18 = v44;
    v19 = v45;
    v23 = v13[7];
    if (!v23)
      goto LABEL_6;
LABEL_5:
    v24 = *(_QWORD *)(v23 + 32);
    v25 = v13[6];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v49 = *(_QWORD *)(v24 + 16);
    *(_QWORD *)(v24 + 16) = 0x8000000000000000;
    sub_1BB4BDE60(v25, v18, v19, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v24 + 16) = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BB5AE250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t (*v18)(void);
  _QWORD v20[8];

  v20[4] = a4;
  v20[2] = a2;
  v20[3] = a3;
  sub_1BA4CDF6C(0, (unint64_t *)&qword_1ED3B0720, (uint64_t (*)(void))sub_1BA7399D0, (uint64_t)&type metadata for FormatLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v20 - v14;
  v20[7] = a1;
  v20[1] = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DB6410], v12);
  v16 = swift_allocObject();
  v17 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v16 + 56) = a6;
  *(_QWORD *)(v16 + 64) = a7;
  sub_1BA7133FC(a5);
  v18 = MEMORY[0x1E0DB5B80];
  sub_1BA735194(0, (unint64_t *)&qword_1ED3C4568, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5B80]);
  sub_1BA735154(&qword_1ED3C4560, (unint64_t *)&qword_1ED3C4568, (uint64_t (*)(uint64_t, _QWORD *))v18, MEMORY[0x1E0DB5B88]);
  swift_retain();
  swift_retain();
  sub_1BB86D51C();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1BB5AE414@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BB86DD80();
  type metadata accessor for FormatStateViewNodeStateLayoutAttributes();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = v7;
  v9[4] = v6;
  v9[5] = v13;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0x8000000000000000;
  sub_1BB4C0EAC((uint64_t)v9, v8, v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a3 + 16) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  result = swift_release();
  *a4 = 0xA000000000000004;
  return result;
}

uint64_t sub_1BB5AE538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  swift_getKeyPath();
  v30 = MEMORY[0x1E0DEA968];
  v31 = MEMORY[0x1E0DB64C8];
  v28 = a2;
  v29 = a3;
  v12 = MEMORY[0x1E0DB5DD0];
  sub_1BA735194(0, (unint64_t *)&qword_1ED3C4578, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BA735154(&qword_1ED3C4570, (unint64_t *)&qword_1ED3C4578, (uint64_t (*)(uint64_t, _QWORD *))v12, MEMORY[0x1E0DB5DD8]);
  sub_1BA50AD30((unint64_t *)&qword_1ED3B05F8, 255, (uint64_t (*)(uint64_t))sub_1BA62E870, MEMORY[0x1E0DB5A60]);
  swift_bridgeObjectRetain();
  sub_1BB86D4B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v32 = a1;
  swift_getKeyPath();
  v13 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_namespace);
  v15 = *a5;
  v14 = a5[1];
  v16 = *(_QWORD *)(v13 + 40);
  v26 = *a5;
  if (v16)
  {
    v28 = *(_QWORD *)(v13 + 32);
    v29 = v16;
    swift_bridgeObjectRetain();
    sub_1BB872AFC(v17);
    sub_1BB872AFC(v18);
    v15 = v28;
    v19 = v29;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = v14;
  }
  v30 = MEMORY[0x1E0DEA968];
  v31 = MEMORY[0x1E0DB64C8];
  v28 = v15;
  v29 = v19;
  sub_1BB86D4B0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v32 = a1;
  swift_getKeyPath();
  v30 = MEMORY[0x1E0DEA968];
  v31 = MEMORY[0x1E0DB64C8];
  v28 = v26;
  v29 = v14;
  swift_bridgeObjectRetain();
  sub_1BB86D4B0();
  swift_release();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v21 = a5[4];
  v35 = v21;
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = (__int128 *)(v21 + 32);
    sub_1BA781758((uint64_t)&v35);
    while (1)
    {
      v24 = *v23;
      v25 = v23[1];
      v34 = *((_QWORD *)v23 + 4);
      v33[0] = v24;
      v33[1] = v25;
      sub_1BA7086BC((uint64_t)v33);
      sub_1BA733DB8(a1, a4, a6);
      if (v6)
        break;
      sub_1BA708680((uint64_t)v33);
      v23 = (__int128 *)((char *)v23 + 40);
      if (!--v22)
        return sub_1BA4F6CCC((uint64_t)&v35);
    }
    sub_1BA4F6CCC((uint64_t)&v35);
    return sub_1BA708680((uint64_t)v33);
  }
  return result;
}

void sub_1BB5AE820(uint64_t a1)
{
  sub_1BB5AD24C(a1);
}

uint64_t sub_1BB5AE840(uint64_t a1, uint64_t a2)
{
  return FormatStateViewNode.bind(binder:context:)(a1, a2);
}

uint64_t sub_1BB5AE860(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, char a5, uint64_t (*a6)(void), uint64_t (*a7)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  int v7;

  if ((a5 & 1) != 0)
    v7 = 4;
  else
    v7 = 0;
  switch(v7 & 0xFFFFFFFC | (a4 >> 2) & 3)
  {
    case 0u:
      result = sub_1BA856ECC(result, a2, a3, a4, a6);
      break;
    case 3u:
      result = a6();
      break;
    case 6u:
      result = sub_1BA856F00(result, a2, a3, a4 & 0xF3, a6);
      break;
    case 7u:
      result = a7(result, a2, a3, a4 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BB5AE8D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1EF2C7F98, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatStateViewNode, (uint64_t)&protocol conformance descriptor for FormatStateViewNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5AE90C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  a1[1] = sub_1BA50AD30(&qword_1ED3BE6C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatStateViewNode, (uint64_t)&protocol conformance descriptor for FormatStateViewNode);
  a1[2] = sub_1BA50AD30(&qword_1ED39EC60, v3, (uint64_t (*)(uint64_t))type metadata accessor for FormatStateViewNode, (uint64_t)&protocol conformance descriptor for FormatStateViewNode);
  result = sub_1BA50AD30(&qword_1EF2C7FA0, v4, (uint64_t (*)(uint64_t))type metadata accessor for FormatStateViewNode, (uint64_t)&protocol conformance descriptor for FormatStateViewNode);
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5AE984(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BA50AD30(&qword_1EF2C7FA8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatStateViewNode, (uint64_t)&protocol conformance descriptor for FormatStateViewNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5AE9C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1BB5AEA0C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  *a2 = v4;
  return sub_1BA71CA6C(v4);
}

uint64_t sub_1BB5AEA58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5AEAA4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 80);
  return result;
}

uint64_t sub_1BB5AEAE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 80) = v2;
  return result;
}

unint64_t sub_1BB5AEB28@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 88);
  *a2 = v4;
  return sub_1BA67D3F4(v4);
}

uint64_t sub_1BB5AEB74@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 96);
  return result;
}

uint64_t sub_1BB5AEBB8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 96) = v2;
  return result;
}

uint64_t sub_1BB5AEBF8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for FormatStateViewNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatStateViewNode.__allocating_init(identifier:size:resize:adjustments:stateMachineName:states:zIndex:visibility:isUserInteractionEnabled:animation:selectors:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t type metadata accessor for FormatStateViewNodeStateMapper()
{
  return objc_opt_self();
}

uint64_t sub_1BB5AEC90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5AECB4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5AECF0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BB5ADECC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1BB5AED0C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5AE538(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1BB5AED2C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5AED80(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BB5AE250(a1, v1[2], v1[3], v1[4], (uint64_t)(v1 + 5), v1[10], v1[11]);
}

uint64_t sub_1BB5AEDA4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5AEDE8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5AE414(a1, v2 + 16, *(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_1BB5AEE04()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void FeedItemLayoutAttributes.dragBackgroundColor.getter()
{
  uint64_t v1;

  v1 = type metadata accessor for HeadlineViewLayout.Context(0);
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X11 }
}

uint64_t sub_1BB5AEEB4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BB5AEEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1BA640FB4();
  v2 = swift_projectBox();
  sub_1BA4C2DD8(v2, v0, type metadata accessor for HeadlineViewLayout.Context);
  v3 = (_QWORD *)(v0 + *(int *)(v1 + 24));
  v4 = v3[3];
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  sub_1BA4A2E80(v0, type metadata accessor for HeadlineViewLayout.Context);
  return sub_1BB5AEEB4();
}

uint64_t sub_1BB5AEF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1BA641024();
  v2 = *(_QWORD *)(*(_QWORD *)(swift_projectBox() + *(int *)(v1 + 48)) + 32);
  if (v2)
  {
    v3 = *(_BYTE *)(v2 + 112);
    if ((v3 & 0xFE) != 0x7E)
    {
      v5 = *(_QWORD *)(v2 + 48);
      v4 = *(_QWORD *)(v2 + 56);
      v6 = *(_QWORD *)(v2 + 64);
      v7 = *(_QWORD *)(v2 + 72);
      v8 = *(_QWORD *)(v2 + 80);
      v9 = *(_QWORD *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 104);
      swift_retain();
      sub_1BA7643E8(v5, v4, v6, v7, v8, v9, v10, v11, v3, (void (*)(void))sub_1BA5E7FF4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA6E6C54);
      sub_1BB873594();
      if ((~v5 & 0xF000000000000007) != 0)
      {
        *(_QWORD *)(v0 - 128) = v4;
        *(_QWORD *)(v0 - 120) = v5;
        FormatColor.color.getter();
        sub_1BA7643E8(v5, *(_QWORD *)(v0 - 128), v6, v7, v8, v9, v10, v11, v3, (void (*)(void))sub_1BA5E800C, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA6E6CC4);
      }
      else
      {
        sub_1BA7643E8(v5, v4, v6, v7, v8, v9, v10, v11, v3, (void (*)(void))sub_1BA5E800C, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA6E6CC4);
      }
      swift_release();
    }
  }
  return sub_1BB5AEEB4();
}

void FeedItemLayoutAttributes.dragPreviewClipping.getter()
{
  uint64_t v1;

  v1 = type metadata accessor for FormatItemNodeLayoutContext();
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X11 }
}

uint64_t sub_1BB5AF164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0DB89A8];
  v2 = sub_1BB8702A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_1BB5AF200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;

  sub_1BA641024();
  v4 = v3;
  v5 = swift_projectBox();
  v6 = *(_QWORD *)(v5 + *(int *)(v4 + 48));
  sub_1BA4C2DD8(v5, v1, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeLayoutContext);
  v7 = *(_QWORD *)(v6 + 32);
  if (v7 && (v8 = *(_BYTE *)(v7 + 112), (v8 & 0xFE) != 0x7E))
  {
    v12 = *(_QWORD *)(v7 + 96);
    v13 = *(_QWORD *)(v7 + 104);
    v15 = *(_QWORD *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 88);
    v16 = *(_QWORD *)(v7 + 64);
    v17 = *(_QWORD *)(v7 + 72);
    v20 = v7 + 48;
    v18 = *(_QWORD *)(v7 + 48);
    v19 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v2 - 200) = v16;
    *(_QWORD *)(v2 - 192) = v18;
    *(_QWORD *)(v2 - 184) = v18;
    *(_QWORD *)(v2 - 176) = v19;
    *(_QWORD *)(v2 - 168) = v16;
    *(_QWORD *)(v2 - 160) = v17;
    *(_QWORD *)(v2 - 152) = v15;
    *(_BYTE *)(v2 - 144) = v14 & 1;
    *(_QWORD *)(v2 - 136) = v12;
    *(_QWORD *)(v2 - 128) = v13;
    *(_BYTE *)(v2 - 120) = v8;
    v21 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v2 - 216) = v14;
    *(_QWORD *)(v2 - 208) = v21;
    swift_retain();
    sub_1BA7643E8(*(_QWORD *)(v2 - 192), v19, *(_QWORD *)(v2 - 200), v17, v15, v14, v12, v13, v8, (void (*)(void))sub_1BA5E7FF4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA6E6C54);
    sub_1BB873594();
    sub_1BAF98A38(v0, v22, v23, v24, v25);
    swift_release();
    sub_1BA4A2E80(v1, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeLayoutContext);
    return sub_1BA7643E8(*(_QWORD *)(v2 - 192), v19, *(_QWORD *)(v2 - 200), v17, v15, *(_QWORD *)(v2 - 216), v12, v13, v8, (void (*)(void))sub_1BA5E800C, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1BA6E6CC4);
  }
  else
  {
    sub_1BA4A2E80(v1, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeLayoutContext);
    v9 = *MEMORY[0x1E0DB89A8];
    v10 = sub_1BB8702A0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v0, v9, v10);
  }
}

uint64_t FeedItemLayoutAttributes.contextMenuItemOptions.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *v0 >> 60;
  result = MEMORY[0x1E0DEE9E8];
  if (((1 << v1) & 0x77F) == 0)
  {
    if ((_DWORD)v1 == 7)
    {
      sub_1BA641024();
      swift_projectBox();
      swift_retain();
      swift_retain();
      v3 = sub_1BA761770();
      swift_release();
      swift_release();
      return v3;
    }
    else
    {
      return FeedItemLayoutAttributes.contextMenuItemOptions.getter(MEMORY[0x1E0DEE9E8]);
    }
  }
  return result;
}

void FeedItemLayoutAttributes.adFrame.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[5];
  char v15;

  v3 = type metadata accessor for FeedBannerAdViewLayout.Attributes(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1 >> 60 == 3)
  {
    sub_1BA64109C();
    v7 = v6;
    v8 = swift_projectBox();
    sub_1BA4C2DD8(v8 + *(int *)(v7 + 48), (uint64_t)v5, type metadata accessor for FeedBannerAdViewLayout.Attributes);
    sub_1BB872094();
    v9 = v14[1];
    v10 = v14[2];
    v11 = v14[3];
    v12 = v14[4];
    v13 = v15;
    sub_1BA4A2E80((uint64_t)v5, type metadata accessor for FeedBannerAdViewLayout.Attributes);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v13;
}

unint64_t FeedItemLayoutAttributes.prerollPlacements.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = type metadata accessor for FormatVideoPlayerData();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v42 - v5;
  sub_1BA4B07F0(0, &qword_1ED3C4CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52F40], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v42 - v8;
  v10 = sub_1BB871E6C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  if (*v0 >> 60 != 7)
    return MEMORY[0x1E0DEE9D8];
  v43 = (char *)v42 - v15;
  sub_1BA641024();
  v17 = *(_QWORD *)(swift_projectBox() + *(int *)(v16 + 48));
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                  + 112);
  v54 = *(_QWORD *)(v18 + 16);
  if (!v54)
    return MEMORY[0x1E0DEE9D8];
  v50 = v3;
  swift_bridgeObjectRetain_n();
  v42[1] = v17;
  swift_retain();
  v19 = 0;
  v51 = MEMORY[0x1E0DEE9D8];
  v48 = v9;
  v49 = v6;
  v46 = v11;
  v47 = v10;
  v44 = v18;
  v45 = v13;
  do
  {
    v20 = *(_QWORD *)(v18 + 8 * v19 + 32);
    if (((v20 >> 59) & 0x1E | (v20 >> 2) & 1) != 0xE)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_5:
      sub_1BA5C699C((uint64_t)v9, &qword_1ED3C4CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D52F40]);
      goto LABEL_6;
    }
    v21 = v20 & 0xFFFFFFFFFFFFFFBLL;
    sub_1BB5B0BC4();
    v23 = v22;
    v53 = v21;
    v24 = swift_projectBox();
    v25 = v24 + *(int *)(v23 + 48);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = *(_QWORD *)(v25 + 24);
    sub_1BA4C2DD8(v24, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatVideoPlayerData);
    v29 = *((_QWORD *)v6 + 4);
    v28 = *((_QWORD *)v6 + 5);
    v30 = (uint64_t)v50;
    sub_1BA4C2DD8((uint64_t)v6, (uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for FormatVideoPlayerData);
    if (v28)
    {
      v52 = v29;
    }
    else
    {
      v52 = *(_QWORD *)(v30 + 16);
      swift_bridgeObjectRetain();
    }
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BA8E9488(v26, v27);
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))type metadata accessor for FormatVideoPlayerData);
    v31 = v48;
    sub_1BB871E54();
    swift_release();
    swift_release();
    v9 = v31;
    sub_1BA8E94B8(v26, v27);
    v6 = v49;
    sub_1BA4A2E80((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for FormatVideoPlayerData);
    v11 = v46;
    v10 = v47;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v31, 0, 1, v47);
    swift_release();
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v31, 1, v10);
    v18 = v44;
    v33 = v45;
    if (v32 == 1)
      goto LABEL_5;
    v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v35 = v43;
    v34(v43, v9, v10);
    v34(v33, v35, v10);
    v36 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v37 = v51;
    else
      v37 = sub_1BB39275C(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
    v39 = *(_QWORD *)(v37 + 16);
    v38 = *(_QWORD *)(v37 + 24);
    if (v39 >= v38 >> 1)
      v37 = sub_1BB39275C(v38 > 1, v39 + 1, 1, v37);
    *(_QWORD *)(v37 + 16) = v39 + 1;
    v40 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v51 = v37;
    v34((char *)(v37 + v40 + *(_QWORD *)(v11 + 72) * v39), v33, v10);
    v6 = v36;
LABEL_6:
    ++v19;
  }
  while (v54 != v19);
  swift_release();
  swift_bridgeObjectRelease_n();
  return v51;
}

void FeedItemLayoutAttributes.groupLayoutKey.getter()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for FormatItemNodeLayoutContext();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for HeadlineViewLayout.Context(0);
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X11 }
}

uint64_t sub_1BB5AFAA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BA640FB4();
  v1 = swift_projectBox();
  sub_1BA4C2DD8(v1, (uint64_t)v0, type metadata accessor for HeadlineViewLayout.Context);
  v2 = *v0;
  swift_retain();
  sub_1BA4A2E80((uint64_t)v0, type metadata accessor for HeadlineViewLayout.Context);
  return v2;
}

uint64_t FeedItemLayoutAttributes.layoutSelectionStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  char *v25;
  _QWORD v26[2];

  v3 = type metadata accessor for FormatItemNodeAction();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, &qword_1ED3C8F38, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v26 - v10;
  sub_1BA4B07F0(0, &qword_1ED3AC9C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB8D80], v7);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v26 - v14;
  v16 = *(_QWORD *)v1 >> 60;
  if (((1 << v16) & 0x77F) != 0)
  {
    v17 = *MEMORY[0x1E0DB8D70];
    v18 = sub_1BB8703B4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, v17, v18);
  }
  else if ((_DWORD)v16 == 7)
  {
    sub_1BA641024();
    v21 = *(_QWORD *)(*(_QWORD *)(swift_projectBox() + *(int *)(v20 + 48)) + 32);
    if (v21)
    {
      sub_1BA5E01A4(v21 + OBJC_IVAR____TtC8NewsFeed19FormatItemNodeStyle_cellAction, (uint64_t)v11, &qword_1ED3C8F38, (uint64_t (*)(uint64_t))type metadata accessor for FormatItemNodeAction);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) != 1)
      {
        sub_1BA4C2DD8((uint64_t)v11, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeAction);
        v25 = (char *)&loc_1BB5AFE5C + 4 * byte_1BB92C188[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      sub_1BA5C699C((uint64_t)v11, &qword_1ED3C8F38, (uint64_t (*)(uint64_t))type metadata accessor for FormatItemNodeAction);
    }
    v22 = sub_1BB8703B4();
    v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB8D80];
    v24 = *(_QWORD *)(v22 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v15, 1, 1, v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(a1, *MEMORY[0x1E0DB8D70], v22);
    return sub_1BA5C699C((uint64_t)v15, &qword_1ED3AC9C8, v23);
  }
  else
  {
    v26[1] = *(_QWORD *)(*(_QWORD *)v1 + 16);
    return FeedItemLayoutAttributes.layoutSelectionStyle.getter(v13);
  }
}

void sub_1BB5AFF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0DB8D70];
  v2 = sub_1BB8703B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
  JUMPOUT(0x1BB5AFEB8);
}

uint64_t FeedItemLayoutAttributes.supplementaryAttributes.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  if (*v0 >> 60 != 11)
    return 0;
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1BA975430(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BB5AFFA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  if (*v0 >> 60 != 11)
    return 0;
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1BA975430(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BB5AFFFC()
{
  sub_1BB5B1084();
  return sub_1BB870FF0();
}

uint64_t FeedItemLayoutAttributes.swipeActionInsets.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1 >> 60;
  if ((_DWORD)v3 == 7)
  {
    sub_1BA641024();
    v6 = *(unsigned __int8 *)(*(_QWORD *)(swift_projectBox() + *(int *)(v5 + 48)) + 72);
    v7 = sub_1BB87006C();
    if (v6 == 1)
      v8 = (unsigned int *)MEMORY[0x1E0DB8370];
    else
      v8 = (unsigned int *)MEMORY[0x1E0DB8378];
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(a1, *v8, v7);
  }
  else if ((_DWORD)v3 == 11)
  {
    return FeedItemLayoutAttributes.swipeActionInsets.getter();
  }
  else
  {
    v9 = *MEMORY[0x1E0DB8370];
    v10 = sub_1BB87006C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(a1, v9, v10);
  }
}

uint64_t FeedItemLayoutAttributes.swipeActionStyle.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1 >> 60;
  if ((_DWORD)v3 == 7)
  {
    sub_1BA641024();
    v6 = *(_QWORD *)(*(_QWORD *)(swift_projectBox() + *(int *)(v5 + 48))
                   + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes);
    v7 = *(_QWORD *)(*(_QWORD *)v6 + 144);
    v8 = v6 + *(int *)(type metadata accessor for FormatItemNodeData() + 28) + v7;
    v9 = sub_1BB86FE38();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v8, v9);
  }
  else if ((_DWORD)v3 == 11)
  {
    return FeedItemLayoutAttributes.swipeActionStyle.getter();
  }
  else
  {
    v10 = *MEMORY[0x1E0DB7ED0];
    v11 = sub_1BB86FE38();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a1, v10, v11);
  }
}

void FeedItemLayoutAttributes.thumnailImageProcessorRequest(options:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for ImageRequestOptions();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for HeadlineViewLayout.Context(0);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X11 }
}

void sub_1BB5B0338()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
}

void sub_1BB5B0364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  sub_1BA640FB4();
  v7 = v6;
  v8 = swift_projectBox();
  memcpy((void *)(v0 + 48), (const void *)(v8 + *(int *)(v7 + 48)), 0x130uLL);
  sub_1BA4C2DD8(v8, v2, type metadata accessor for HeadlineViewLayout.Context);
  sub_1BA4C2DD8(v3, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
  v9 = sub_1BB86F550();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  v10 = (void *)swift_unknownObjectRetain();
  v11 = sub_1BA65852C(v10, (const void *)(v0 + 48), v4, v5, v0);
  if (v11)
  {
    v12 = v11;
    *(_QWORD *)(v1 + 24) = type metadata accessor for ThumbnailProcessorRequest();
    *(_QWORD *)(v1 + 32) = sub_1BA4A2870((unint64_t *)&qword_1ED3CFF58, (uint64_t (*)(uint64_t))type metadata accessor for ThumbnailProcessorRequest, (uint64_t)&protocol conformance descriptor for ThumbnailProcessorRequest);
    *(_QWORD *)v1 = v12;
    sub_1BA4A2E80(v2, type metadata accessor for HeadlineViewLayout.Context);
  }
  else
  {
    sub_1BA4A2E80(v2, type metadata accessor for HeadlineViewLayout.Context);
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_QWORD *)(v1 + 32) = 0;
  }
  JUMPOUT(0x1BB5B0344);
}

void FeedItemLayoutAttributes.publisherLogoImageProcessorRequest(options:)()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for ImageRequestOptions();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for HeadlineViewLayout.Context(0);
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X11 }
}

void sub_1BB5B0558()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
}

void sub_1BB5B0584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_0;
  void (*v25)(char *, uint64_t *, uint64_t, double);
  void *v26;
  double v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1BA640FB4();
  v16 = v15;
  v17 = swift_projectBox();
  memcpy(v9 + 47, (const void *)(v17 + *(int *)(v16 + 48)), 0x130uLL);
  sub_1BA4C2DD8(v17, v14, type metadata accessor for HeadlineViewLayout.Context);
  v18 = type metadata accessor for PublisherLogoProcessorRequest(0);
  v19 = *(int *)(v13 + 24);
  v9[2] = *(_QWORD *)(v14 + *(int *)(v13 + 20) + 40);
  v9[3] = v18;
  v20 = *(_QWORD *)(v14 + v19 + 24);
  v21 = *(_QWORD *)(v14 + v19 + 32);
  v22 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v14 + v19), v20);
  v9[45] = v20;
  v23 = *(_QWORD *)(v21 + 8);
  v9[1] = v23;
  v9[46] = v23;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v9 + 42);
  v25 = *(void (**)(char *, uint64_t *, uint64_t, double))(*(_QWORD *)(v20 - 8) + 16);
  ((void (*)(uint64_t *, _QWORD *, uint64_t))v25)(boxed_opaque_existential_0, v22, v20);
  sub_1BA4C2DD8(v12, v11, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
  v26 = memcpy(v9 + 4, v9 + 47, 0x130uLL);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&a9 - v28;
  v25((char *)&a9 - v28, boxed_opaque_existential_0, v20, v27);
  v30 = (void *)swift_unknownObjectRetain();
  v31 = (uint64_t)v29;
  v32 = v9[3];
  v33 = sub_1BA658260(v30, (uint64_t)(v9 + 4), v31, v11, v32, (uint64_t)&type metadata for HeadlineViewLayout.Attributes, v20, (uint64_t)&protocol witness table for HeadlineViewLayout.Attributes, v9[1]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 42));
  if (v33)
  {
    *(_QWORD *)(v10 + 24) = v32;
    *(_QWORD *)(v10 + 32) = sub_1BA4A2870(&qword_1ED3D20F0, type metadata accessor for PublisherLogoProcessorRequest, (uint64_t)&protocol conformance descriptor for PublisherLogoProcessorRequest);
    *(_QWORD *)v10 = v33;
    sub_1BA4A2E80(v14, type metadata accessor for HeadlineViewLayout.Context);
  }
  else
  {
    sub_1BA4A2E80(v14, type metadata accessor for HeadlineViewLayout.Context);
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_QWORD *)(v10 + 32) = 0;
  }
  JUMPOUT(0x1BB5B0564);
}

uint64_t sub_1BB5B0754(uint64_t result, uint64_t *a2, uint64_t a3, double *a4)
{
  void **v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  uint64_t v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD v34[5];

  if (*(_BYTE *)(result + 56))
  {
    if (*(_BYTE *)(result + 56) != 1)
      return result;
    v7 = (void **)(result + 48);
    result += 32;
  }
  else
  {
    v7 = (void **)(result + 16);
  }
  v8 = *v7;
  v9 = *(id *)result;
  v10 = v8;
  v11 = *(double *)(a3 + 264);
  v12 = *(_QWORD *)(a3 + 272);
  v13 = *a4;
  v14 = v10;
  sub_1BB873594();
  v16 = v15;
  v18 = v17;
  if (v11 > 0.0)
    v19 = *(_QWORD *)&v11;
  else
    v19 = 0;
  if (v11 <= 0.0)
    v12 = 0;
  v20 = type metadata accessor for IssueCoverImageProcessorRequest();
  v21 = swift_allocObject();
  v22 = sub_1BA8E9174(v14, v19, v12, v11 <= 0.0, v21, v16, v18, v13);

  v34[3] = v20;
  v23 = sub_1BA4A2870((unint64_t *)&qword_1ED3AC0F8, (uint64_t (*)(uint64_t))type metadata accessor for IssueCoverImageProcessorRequest, (uint64_t)&protocol conformance descriptor for IssueCoverImageProcessorRequest);
  v34[4] = v23;
  v34[0] = v22;
  v24 = (_QWORD *)*a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = sub_1BB38EE40(0, v24[2] + 1, 1, v24);
    *a2 = (uint64_t)v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *a2 = (uint64_t)sub_1BB38EE40((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v20);
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v34[-1] - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v32 + 16))(v31, v29);
  sub_1BA7875C0(v27, (uint64_t)v31, a2, v20, v23);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

void sub_1BB5B09A4(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[5];
  char v15;

  v3 = type metadata accessor for FeedBannerAdViewLayout.Attributes(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1 >> 60 == 3)
  {
    sub_1BA64109C();
    v7 = v6;
    v8 = swift_projectBox();
    sub_1BA4C2DD8(v8 + *(int *)(v7 + 48), (uint64_t)v5, type metadata accessor for FeedBannerAdViewLayout.Attributes);
    sub_1BB872094();
    v9 = v14[1];
    v10 = v14[2];
    v11 = v14[3];
    v12 = v14[4];
    v13 = v15;
    sub_1BA4A2E80((uint64_t)v5, type metadata accessor for FeedBannerAdViewLayout.Attributes);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v13;
}

uint64_t FeedItemLayoutAttributes.isResizing.getter()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  char v4;

  v1 = *v0 >> 60;
  v2 = 0;
  if (((1 << v1) & 0x77F) == 0)
  {
    if ((_DWORD)v1 == 7)
    {
      sub_1BA641024();
      swift_projectBox();
      swift_retain();
      v4 = FormatItemNodeDataLayoutAttributes.isResizing.getter();
      swift_release();
      return v4 & 1;
    }
    v2 = FeedItemLayoutAttributes.isResizing.getter(0);
  }
  return v2 & 1;
}

_QWORD *sub_1BB5B0B54(_QWORD *a1)
{
  destroy for CategoryViewLayout.Context(a1);
  return a1;
}

uint64_t sub_1BB5B0B88(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CoverChannelViewLayout.Context(a2, a1);
  return a2;
}

void sub_1BB5B0BC4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2B0758)
  {
    type metadata accessor for FormatVideoPlayerData();
    sub_1BA4B07F0(255, (unint64_t *)&unk_1EF2BDA70, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FormatAnimationNodeDataLayoutAttributes);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2B0758);
  }
}

id sub_1BB5B0C48(void *a1, _OWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  double *v15;
  uint64_t v16;
  id v17;
  id v18;
  id result;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[40];
  _QWORD v63[6];

  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v55 - v11;
  v63[3] = &type metadata for ArticleThumbnailViewLayoutAttributes;
  v63[4] = &protocol witness table for ArticleThumbnailViewLayoutAttributes;
  v13 = swift_allocObject();
  v63[0] = v13;
  v14 = a2[1];
  *(_OWORD *)(v13 + 16) = *a2;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = a2[2];
  *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + 41);
  v15 = (double *)__swift_project_boxed_opaque_existential_1(v63, (uint64_t)&type metadata for ArticleThumbnailViewLayoutAttributes);
  v16 = *a3;
  v17 = (id)FCThumbnailForHeadlineMinimumSize();
  if (!v17)
  {
    sub_1BA5E01A4(a5, (uint64_t)&v59, (unint64_t *)&qword_1ED3C2250, (uint64_t (*)(uint64_t))sub_1BA840CF0);
    if (v60)
    {
      v42 = type metadata accessor for ThumbnailProcessorRequest();
      sub_1BA4CECCC(&v59, (uint64_t)v62);
      sub_1BA4C010C((uint64_t)v62, (uint64_t)&v59);
      v43 = *v15;
      v44 = v15[1];
      v45 = v15[2];
      v46 = v15[3];
      v47 = *(_QWORD *)(v13 + 64);
      v48 = *(_QWORD *)(v13 + 56);
      v49 = type metadata accessor for ImageRequestOptions();
      sub_1BA5E01A4((uint64_t)a3 + *(int *)(v49 + 24), (uint64_t)v12, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60]);
      v51 = v60;
      v50 = v61;
      v52 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, v60);
      v41 = sub_1BA99C0A0(v52, v47, (uint64_t)v12, v43, v44, v45, v46, 0.0, 0.0, 1.0, 1.0, v42, v51, v50, v53, v54, v16, v48);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
      swift_unknownObjectRelease();
      sub_1BA5C699C(a5, (unint64_t *)&qword_1ED3C2250, (uint64_t (*)(uint64_t))sub_1BA840CF0);
      sub_1BA5C699C(a4, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60]);
      sub_1BA4A2E80((uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    }
    else
    {
      swift_unknownObjectRelease();
      sub_1BA5C699C(a5, (unint64_t *)&qword_1ED3C2250, (uint64_t (*)(uint64_t))sub_1BA840CF0);
      sub_1BA5C699C(a4, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60]);
      sub_1BA4A2E80((uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
      sub_1BA5C699C((uint64_t)&v59, (unint64_t *)&qword_1ED3C2250, (uint64_t (*)(uint64_t))sub_1BA840CF0);
      v41 = 0;
    }
    goto LABEL_7;
  }
  v57 = v16;
  v58 = a4;
  v18 = v17;
  result = objc_msgSend(v18, sel_thumbnailAssetHandle);
  if (result)
  {
    v20 = result;
    v21 = v15[1];
    v56 = *v15;
    v22 = v15[2];
    v23 = v15[3];
    objc_msgSend(a1, sel_thumbnailFocalFrame);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v32 = *(_QWORD *)(v13 + 64);
    v33 = *(_QWORD *)(v13 + 56);
    v34 = type metadata accessor for ImageRequestOptions();
    v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60];
    sub_1BA5E01A4((uint64_t)a3 + *(int *)(v34 + 24), (uint64_t)v12, (unint64_t *)&qword_1ED3B0940, (uint64_t (*)(uint64_t))MEMORY[0x1E0DB6A60]);
    type metadata accessor for ThumbnailProcessorRequest();
    v36 = swift_allocObject();
    v41 = sub_1BA65895C(v20, v32, (uint64_t)v12, v36, v56, v21, v22, v23, v25, v27, v29, v31, v37, v38, v39, v40, v57, v33);
    swift_unknownObjectRelease();

    sub_1BA5C699C(a5, (unint64_t *)&qword_1ED3C2250, (uint64_t (*)(uint64_t))sub_1BA840CF0);
    sub_1BA5C699C(v58, (unint64_t *)&qword_1ED3B0940, v35);
    sub_1BA4A2E80((uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for ImageRequestOptions);
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    return (id)v41;
  }
  __break(1u);
  return result;
}

unint64_t sub_1BB5B1084()
{
  unint64_t result;

  result = qword_1EF2C7FB0;
  if (!qword_1EF2C7FB0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedItemLayoutAttributes, &type metadata for FeedItemLayoutAttributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7FB0);
  }
  return result;
}

unint64_t sub_1BB5B10CC()
{
  unint64_t result;

  result = qword_1EF2C7FB8;
  if (!qword_1EF2C7FB8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedItemLayoutAttributes, &type metadata for FeedItemLayoutAttributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C7FB8);
  }
  return result;
}

uint64_t sub_1BB5B1110()
{
  return swift_deallocObject();
}

uint64_t sub_1BB5B1120()
{
  return swift_deallocObject();
}

uint64_t sub_1BB5B1130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  *a4 = 0xD000000000000026;
  a4[1] = 0x80000001BB991B80;
  type metadata accessor for FeedGroupEmitterOutput(0, a1, a2, a3);
  return swift_storeEnumTagMultiPayload();
}

void sub_1BB5B1184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_1BB5B1200 + 4 * byte_1BB92C4A7[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB5B1200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return 0;
}

void sub_1BB5B1268()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  if (v1 == 0xD000000000000026 && v2 == 0x80000001BB991B80)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1BB5B1250);
}

uint64_t sub_1BB5B134C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
      v18 = 0x756F72477473616CLL;
      v19 = 0xEA00000000002870;
      sub_1BB86DEE8();
      sub_1BB872AFC(v10);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v11);
      v12 = v18;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
    else
    {
      v18 = 0x28656E6F6ELL;
      v19 = 0xE500000000000000;
      sub_1BB872AFC((_QWORD *)0x28656E6F6ELL);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v16);
      return v18;
    }
  }
  else
  {
    sub_1BA6EDAC4();
    v13 = (uint64_t)&v7[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
    v18 = 0x756F72477478656ELL;
    v19 = 0xEA00000000002870;
    sub_1BB86DEE8();
    sub_1BB872AFC(v14);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v15);
    v12 = v18;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    sub_1BA6EDA74(v13);
  }
  return v12;
}

void sub_1BB5B157C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, double))(v1 + 16))((char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  v4 = (char *)sub_1BB5B15FC + 4 * byte_1BB92C4AE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BB5B15FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

void sub_1BB5B1668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;

  v7 = type metadata accessor for FeedGroupEmitterEmbeddedOutput(255, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), a4);
  sub_1BA4D9CE8(255, &qword_1ED3A4CB0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1BA4CECCC((__int128 *)(v5 + *(int *)(TupleTypeMetadata2 + 48)), v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  JUMPOUT(0x1BB5B1654);
}

uint64_t sub_1BB5B16D4(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupEmitterOutput<A>, a1);
  return sub_1BB86E308();
}

uint64_t static FeedGroupEmitterOutput.error(groupName:reason:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if (a3)
  {
    v10 = a3;
  }
  else
  {
    if (qword_1ED3BA7F8 != -1)
      swift_once();
    v10 = (id)qword_1ED476860;
  }
  sub_1BA7AA598();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BB87A390;
  v12 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
  v13 = sub_1BA6A2D8C();
  *(_QWORD *)(v11 + 64) = v13;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
  v14 = a3;
  swift_bridgeObjectRetain();
  sub_1BB873E34();
  *(_QWORD *)(v11 + 96) = v12;
  *(_QWORD *)(v11 + 104) = v13;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0xE000000000000000;
  v15 = sub_1BB87330C();
  sub_1BB86EF44("Failed to create %{public}@ group.  reason=%{public}@", 53, 2, &dword_1BA493000, v10, v15, v11);

  swift_bridgeObjectRelease();
  sub_1BB873CB4();
  sub_1BB872AFC("p.  reason=%{public}@");
  sub_1BB872AFC(v16);
  sub_1BB872AFC("Failed to create ");
  sub_1BB873E34();
  *a6 = 0;
  a6[1] = 0xE000000000000000;
  type metadata accessor for FeedGroupEmitterOutput(0, a4, a5, v17);
  return swift_storeEnumTagMultiPayload();
}

uint64_t FeedGroupEmitterEmbeddedOutput.shortDescription.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  sub_1BB5B19C8(v2, v4);
  type metadata accessor for FeedGroupEmitterOutput(255, v4, v5, v6);
  v7 = sub_1BB86E320();
  a2[3] = v7;
  a2[4] = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB3C80], v7);
  __swift_allocate_boxed_opaque_existential_0(a2);
  return sub_1BB86E314();
}

unint64_t sub_1BB5B19C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[80];

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for FeedGroupEmitterEmbeddedOutput(0, v7, v8, v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)&v26[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v14 + 16))(&v26[-v12], a1, v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v4 + 32))(v6, v13, a2);
      sub_1BA6D24F0();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
      *(_QWORD *)(inited + 32) = 0x6F7267207473616CLL;
      *(_QWORD *)(inited + 40) = 0xEA00000000007075;
      *(_QWORD *)(inited + 72) = a2;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(inited + 48));
      (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v4 + 16))(boxed_opaque_existential_0, v6, a2);
      v18 = sub_1BA76E994(inited);
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a2);
    }
    else
    {
      v22 = *v13;
      v23 = v13[1];
      sub_1BA6D24F0();
      v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_1BB87CE70;
      *(_QWORD *)(v24 + 32) = 1701736302;
      *(_QWORD *)(v24 + 40) = 0xE400000000000000;
      *(_QWORD *)(v24 + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v24 + 48) = v22;
      *(_QWORD *)(v24 + 56) = v23;
      return sub_1BA76E994(v24);
    }
  }
  else
  {
    sub_1BA6EDAC4();
    v19 = (uint64_t)v13 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v4 + 32))(v6, v13, a2);
    sub_1BA6D24F0();
    v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_1BB87CE70;
    *(_QWORD *)(v20 + 32) = 0x6F7267207478656ELL;
    *(_QWORD *)(v20 + 40) = 0xEA00000000007075;
    *(_QWORD *)(v20 + 72) = a2;
    v21 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v20 + 48));
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v4 + 16))(v21, v6, a2);
    v18 = sub_1BA76E994(v20);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a2);
    sub_1BA6EDA74(v19);
  }
  return v18;
}

uint64_t sub_1BB5B1C2C(uint64_t a1)
{
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedGroupEmitterEmbeddedOutput<A>, a1);
  return sub_1BB86E308();
}

void sub_1BB5B1C60()
{
  JUMPOUT(0x1BCCE5B24);
}

_QWORD *sub_1BB5B1C70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *result;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    if (v7 > v8)
      v8 = *(_QWORD *)(v6 + 64);
    if (v8 <= 0x10)
      v9 = 16;
    else
      v9 = v8;
    if ((v9 & 0xFFFFFFFFFFFFFFF8) + 48 <= v9)
      v10 = v9;
    else
      v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 48;
    v12 = v9 + 1;
    switch(*((_BYTE *)a1 + v10))
    {
      case 0:
      case 1:
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        v13 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
          goto LABEL_37;
        goto LABEL_31;
      case 2:
        (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      case 6:
        v14 = *((unsigned __int8 *)a1 + v9);
        if (v14 >= 3)
        {
          if (v9 <= 3)
            v15 = v9;
          else
            v15 = 4;
          __asm { BR              X12 }
        }
        if (v14 == 2)
        {
          swift_bridgeObjectRelease();
        }
        else if (v14 == 1)
        {
          (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
          v16 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(v16 + 24) >= 0xFFFFFFFFuLL)
            __swift_destroy_boxed_opaque_existential_1(v16);
        }
        v13 = ((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_31:
        __swift_destroy_boxed_opaque_existential_1(v13);
LABEL_37:
        switch(*((_BYTE *)a2 + v10))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
            v18 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
            v19 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
            v20 = *(_QWORD *)(v19 + 24);
            if (v20 < 0xFFFFFFFF)
            {
              v28 = *(_OWORD *)(v19 + 16);
              *(_OWORD *)v18 = *(_OWORD *)v19;
              *(_OWORD *)(v18 + 16) = v28;
            }
            else
            {
              *(_QWORD *)(v18 + 24) = v20;
              (**(void (***)(void))(v20 - 8))();
            }
            *((_BYTE *)a1 + v10) = 0;
            return a1;
          case 1:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
            v21 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
            v22 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
            v23 = *(_QWORD *)(v22 + 24);
            if (v23 < 0xFFFFFFFF)
            {
              v29 = *(_OWORD *)(v22 + 16);
              *(_OWORD *)v21 = *(_OWORD *)v22;
              *(_OWORD *)(v21 + 16) = v29;
            }
            else
            {
              *(_QWORD *)(v21 + 24) = v23;
              (**(void (***)(void))(v23 - 8))();
            }
            v24 = 1;
            goto LABEL_65;
          case 2:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
            v24 = 2;
            goto LABEL_65;
          case 3:
            *a1 = *a2;
            a1[1] = a2[1];
            v25 = 3;
            goto LABEL_48;
          case 4:
            *a1 = *a2;
            a1[1] = a2[1];
            v25 = 4;
            goto LABEL_48;
          case 5:
            *a1 = *a2;
            a1[1] = a2[1];
            v25 = 5;
LABEL_48:
            *((_BYTE *)a1 + v10) = v25;
            swift_bridgeObjectRetain();
            break;
          case 6:
            v26 = *((unsigned __int8 *)a2 + v9);
            if (v26 >= 3)
            {
              if (v9 <= 3)
                v27 = v9;
              else
                v27 = 4;
              __asm { BR              X12 }
            }
            if (v26 == 2)
            {
              *a1 = *a2;
              a1[1] = a2[1];
              *((_BYTE *)a1 + v9) = 2;
              swift_bridgeObjectRetain();
            }
            else if (v26 == 1)
            {
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
              *((_BYTE *)a1 + v9) = 1;
            }
            else
            {
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
              v30 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
              v31 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
              v32 = *(_QWORD *)(v31 + 24);
              if (v32 < 0xFFFFFFFF)
              {
                v33 = *(_OWORD *)(v31 + 16);
                *(_OWORD *)v30 = *(_OWORD *)v31;
                *(_OWORD *)(v30 + 16) = v33;
              }
              else
              {
                *(_QWORD *)(v30 + 24) = v32;
                (**(void (***)(void))(v32 - 8))();
              }
              *((_BYTE *)a1 + v9) = 0;
            }
            v34 = ((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
            v35 = ((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
            v36 = *(_QWORD *)(v35 + 24);
            *(_QWORD *)(v34 + 24) = v36;
            *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
            (**(void (***)(void))(v36 - 8))();
            v24 = 6;
LABEL_65:
            *((_BYTE *)a1 + v10) = v24;
            break;
          default:
            if (v10 <= 3)
              v17 = v10;
            else
              v17 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v10 <= 3)
          v11 = v10;
        else
          v11 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BB5B21D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD *result;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v6 > v7)
    v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = v7;
  if ((v8 & 0xFFFFFFFFFFFFFFF8) + 48 <= v8)
    v9 = v8;
  else
    v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 48;
  v11 = v8 + 1;
  switch(*((_BYTE *)a2 + v9))
  {
    case 0:
      (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
      v12 = 0;
      v13 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v14 = v13[1];
      v15 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v15 = *v13;
      v15[1] = v14;
      break;
    case 1:
      (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
      v16 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v17 = v16[1];
      v18 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v18 = *v16;
      v18[1] = v17;
      v12 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
      v12 = 2;
      break;
    case 3:
      *a1 = *a2;
      v12 = 3;
      break;
    case 4:
      *a1 = *a2;
      v12 = 4;
      break;
    case 5:
      *a1 = *a2;
      v12 = 5;
      break;
    case 6:
      v19 = *((unsigned __int8 *)a2 + v8);
      if (v19 >= 3)
      {
        if (v8 <= 3)
          v20 = v8;
        else
          v20 = 4;
        __asm { BR              X13 }
      }
      if (v19 == 2)
      {
        *a1 = *a2;
        v21 = 2;
      }
      else if (v19 == 1)
      {
        (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
        v21 = 1;
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
        v21 = 0;
        v22 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
        v23 = v22[1];
        v24 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v24 = *v22;
        v24[1] = v23;
      }
      *((_BYTE *)a1 + v8) = v21;
      v25 = ((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
      v26 = ((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
      *(_OWORD *)v25 = v27;
      *(_OWORD *)(v25 + 16) = v28;
      v12 = 6;
      break;
    default:
      if (v9 <= 3)
        v10 = v9;
      else
        v10 = 4;
      __asm { BR              X13 }
      return result;
  }
  *((_BYTE *)a1 + v9) = v12;
  return a1;
}

_OWORD *sub_1BB5B249C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  _OWORD *result;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    if (v7 > v8)
      v8 = *(_QWORD *)(v6 + 64);
    if (v8 <= 0x10)
      v9 = 16;
    else
      v9 = v8;
    if ((v9 & 0xFFFFFFFFFFFFFFF8) + 48 <= v9)
      v10 = v9;
    else
      v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 48;
    v12 = v9 + 1;
    switch(*((_BYTE *)a1 + v10))
    {
      case 0:
      case 1:
        (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        v13 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
          goto LABEL_37;
        goto LABEL_31;
      case 2:
        (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      case 6:
        v14 = *((unsigned __int8 *)a1 + v9);
        if (v14 >= 3)
        {
          if (v9 <= 3)
            v15 = v9;
          else
            v15 = 4;
          __asm { BR              X12 }
        }
        if (v14 == 2)
        {
          swift_bridgeObjectRelease();
        }
        else if (v14 == 1)
        {
          (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
        }
        else
        {
          (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
          v16 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(v16 + 24) >= 0xFFFFFFFFuLL)
            __swift_destroy_boxed_opaque_existential_1(v16);
        }
        v13 = ((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_31:
        __swift_destroy_boxed_opaque_existential_1(v13);
LABEL_37:
        switch(*((_BYTE *)a2 + v10))
        {
          case 0:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
            v18 = 0;
            v19 = (_OWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
            v20 = v19[1];
            v21 = (_OWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
            *v21 = *v19;
            v21[1] = v20;
            break;
          case 1:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
            v22 = (_OWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
            v23 = v22[1];
            v24 = (_OWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
            *v24 = *v22;
            v24[1] = v23;
            v18 = 1;
            break;
          case 2:
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
            v18 = 2;
            break;
          case 3:
            *a1 = *a2;
            v18 = 3;
            break;
          case 4:
            *a1 = *a2;
            v18 = 4;
            break;
          case 5:
            *a1 = *a2;
            v18 = 5;
            break;
          case 6:
            v25 = *((unsigned __int8 *)a2 + v9);
            if (v25 >= 3)
            {
              if (v9 <= 3)
                v26 = v9;
              else
                v26 = 4;
              __asm { BR              X12 }
            }
            if (v25 == 2)
            {
              *a1 = *a2;
              v27 = 2;
            }
            else if (v25 == 1)
            {
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
              v27 = 1;
            }
            else
            {
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
              v27 = 0;
              v28 = (_OWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
              v29 = v28[1];
              v30 = (_OWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
              *v30 = *v28;
              v30[1] = v29;
            }
            *((_BYTE *)a1 + v9) = v27;
            v31 = ((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
            v32 = ((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
            v33 = *(_OWORD *)v32;
            v34 = *(_OWORD *)(v32 + 16);
            *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
            *(_OWORD *)v31 = v33;
            *(_OWORD *)(v31 + 16) = v34;
            v18 = 6;
            break;
          default:
            if (v10 <= 3)
              v17 = v10;
            else
              v17 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)a1 + v10) = v18;
        break;
      default:
        if (v10 <= 3)
          v11 = v10;
        else
          v11 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t sub_1BB5B294C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v3 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v3 <= 0x10)
    v3 = 16;
  v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 48;
  if (v4 <= v3)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_25;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 249) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 < 2)
    {
LABEL_25:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 7)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_25;
LABEL_18:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 250);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BB5B2A34 + 4 * byte_1BB92C544[(v5 - 1)]))();
}

void sub_1BB5B2A80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v5 <= 0x10)
    v5 = 16;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 48 > v5)
    v5 = (v5 & 0xFFFFFFFFFFFFFFF8) + 48;
  v6 = v5 + 1;
  if (a3 < 0xFA)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 249) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xF9)
    __asm { BR              X11 }
  v8 = a2 - 250;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BB5B2C4C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v2 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v2 <= 0x10)
    v2 = 16;
  v3 = (v2 & 0xFFFFFFFFFFFFFFF8) + 48;
  if (v3 <= v2)
    v3 = v2;
  if (*(unsigned __int8 *)(a1 + v3) < 7u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BB5B2CB8 + 4 * byte_1BB92C552[v4]))();
}

void sub_1BB5B2D00(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v4 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v4 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v4 <= 0x10)
    v4 = 16;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) + 48 <= v4)
    v5 = v4;
  else
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 48;
  if (a2 > 6)
  {
    v6 = a2 - 7;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 7;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 7;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t *sub_1BB5B2DEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v6 > v7)
    v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = v7;
  v9 = *(_DWORD *)(v5 + 80);
  if ((v9 & 0x1000F8) != 0 || (unint64_t)(v8 + 1) > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((unsigned __int16)((v9 & 0xF8) + 23) & (unsigned __int16)~(v9 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 3)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 2)
    {
      v14 = a2[1];
      *v4 = *a2;
      v4[1] = v14;
      *((_BYTE *)v4 + v8) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v12 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
      *((_BYTE *)v4 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
      v15 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_QWORD *)(v16 + 24);
      if (v17 < 0xFFFFFFFF)
      {
        v18 = *(_OWORD *)(v16 + 16);
        *(_OWORD *)v15 = *(_OWORD *)v16;
        *(_OWORD *)(v15 + 16) = v18;
      }
      else
      {
        *(_QWORD *)(v15 + 24) = v17;
        (**(void (***)(void))(v17 - 8))();
      }
      *((_BYTE *)v4 + v8) = 0;
    }
  }
  return v4;
}

unint64_t sub_1BB5B2F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v4 > v5)
    v5 = *(_QWORD *)(v3 + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X14 }
  }
  if (v6 == 2)
    return swift_bridgeObjectRelease();
  if (v6 == 1)
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  result = (a1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

_QWORD *sub_1BB5B30A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v6 > v7)
    v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 3)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 2)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    *((_BYTE *)a1 + v8) = 2;
    swift_bridgeObjectRetain();
  }
  else if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v12 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 < 0xFFFFFFFF)
    {
      v15 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v15;
    }
    else
    {
      *(_QWORD *)(v12 + 24) = v14;
      (**(void (***)(void))(v14 - 8))();
    }
    *((_BYTE *)a1 + v8) = 0;
  }
  return a1;
}

_QWORD *sub_1BB5B320C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    if (v7 > v8)
      v8 = *(_QWORD *)(v6 + 64);
    if (v8 <= 0x10)
      v9 = 16;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      swift_bridgeObjectRelease();
    }
    else if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      v12 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
        __swift_destroy_boxed_opaque_existential_1(v12);
    }
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 3)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + v9) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v13 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      v15 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_QWORD *)(v16 + 24);
      if (v17 < 0xFFFFFFFF)
      {
        v18 = *(_OWORD *)(v16 + 16);
        *(_OWORD *)v15 = *(_OWORD *)v16;
        *(_OWORD *)(v15 + 16) = v18;
      }
      else
      {
        *(_QWORD *)(v15 + 24) = v17;
        (**(void (***)(void))(v17 - 8))();
      }
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1BB5B3460(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v6 > v7)
    v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 0x10)
    v8 = 16;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 3)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 2)
  {
    *a1 = *a2;
    v11 = 2;
  }
  else if (v9 == 1)
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
    v11 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
    v11 = 0;
    v12 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
  }
  *((_BYTE *)a1 + v8) = v11;
  return a1;
}

_OWORD *sub_1BB5B3598(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    if (v7 > v8)
      v8 = *(_QWORD *)(v6 + 64);
    if (v8 <= 0x10)
      v9 = 16;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      swift_bridgeObjectRelease();
    }
    else if (v10 == 1)
    {
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      v12 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(v12 + 24) >= 0xFFFFFFFFuLL)
        __swift_destroy_boxed_opaque_existential_1(v12);
    }
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 3)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      *a1 = *a2;
      v15 = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v15 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v15 = 0;
      v16 = (_OWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
      v17 = v16[1];
      v18 = (_OWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v18 = *v16;
      v18[1] = v17;
    }
    *((_BYTE *)a1 + v9) = v15;
  }
  return a1;
}

uint64_t sub_1BB5B37B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v3 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  v4 = 16;
  if (v3 > 0x10)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 < 2)
    {
LABEL_23:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_23;
LABEL_16:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 254);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BB5B3890 + 4 * byte_1BB92C57F[(v5 - 1)]))();
}

void sub_1BB5B38DC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BB5B3A98(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v2 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  v3 = 16;
  if (v2 > 0x10)
    v3 = v2;
  if (*(unsigned __int8 *)(a1 + v3) < 3u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BB5B3AF4 + 4 * byte_1BB92C58D[v4]))();
}

void sub_1BB5B3B3C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v4 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32)
    v4 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v4 <= 0x10)
    v5 = 16;
  else
    v5 = v4;
  if (a2 > 2)
  {
    v6 = a2 - 3;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t static FormatEquation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatEquationToken(0, a3, a4, a4);
  MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquationToken<A>, v4);
  return sub_1BB872EEC();
}

uint64_t FormatEquation.value(contextLayoutOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t result;
  BOOL v32;
  char *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[4];
  char v95;

  v79 = a1;
  v71 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v74 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = sub_1BB873A2C();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v76 = (char *)&v70 - v8;
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v75 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v85 = (char *)&v70 - v12;
  v13 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v14);
  v78 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v5;
  v93 = v6;
  v17 = type metadata accessor for FormatEquationToken(0, v5, v6, v16);
  v92 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v84 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = v18;
  MEMORY[0x1E0C80A78](v19);
  v91 = (char *)&v70 - v20;
  v21 = *v3;
  v22 = sub_1BB86E83C();
  v23 = MEMORY[0x1E0DB4A68];
  v86 = swift_allocBox();
  v82 = AssociatedTypeWitness;
  v83 = v24;
  sub_1BB86E830();
  sub_1BA4AD288(0, &qword_1ED3B0810, (uint64_t)&type metadata for FormatEquationOperator, (uint64_t (*)(_QWORD, uint64_t))v23);
  v26 = v25;
  v87 = swift_allocBox();
  sub_1BB86E830();
  v27 = swift_bridgeObjectRetain();
  v28 = MEMORY[0x1BCCE37E4](v27, v17);
  v80 = v22;
  v89 = v26;
  if (v28)
  {
    v29 = 0;
    v90 = v17;
    v77 = v13;
    do
    {
      v30 = sub_1BB872E80();
      sub_1BB872E38();
      if ((v30 & 1) != 0)
      {
        result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v92 + 16))(v91, v21+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(_QWORD *)(v92 + 72) * v29, v17);
      }
      else
      {
        result = sub_1BB873D08();
        if (v70 != 8)
          goto LABEL_47;
        v94[0] = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v92 + 16))(v91, v94, v17);
        result = swift_unknownObjectRelease();
      }
      v32 = __OFADD__(v29++, 1);
      v34 = (unsigned __int8 *)v84;
      v33 = v85;
      if (v32)
      {
        __break(1u);
LABEL_47:
        __break(1u);
        return result;
      }
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v84, v91, v90);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        v40 = v21;
        v41 = *(void (**)(void))(v13 + 32);
        v42 = v78;
        v43 = v13;
        v44 = v88;
        v41();
        (*(void (**)(uint64_t, uint64_t))(v93 + 72))(v79, v44);
        if (v4)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
          swift_release();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        swift_beginAccess();
        sub_1BB86E80C();
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v82);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
        v13 = v43;
        v21 = v40;
        goto LABEL_5;
      }
      v35 = (char)*v34;
      v36 = *v34;
      swift_beginAccess();
      sub_1BB86E800();
      swift_endAccess();
      if (v95 == 6)
        goto LABEL_3;
      if (v36 >= 4)
      {
        if (v36 == 4)
        {
          v95 = 4;
          goto LABEL_4;
        }
        v37 = 1;
        if (v95 <= 3)
        {
LABEL_13:
          v38 = qword_1BB92C840[v95];
          if (v36 > 3)
            goto LABEL_14;
          goto LABEL_21;
        }
      }
      else
      {
        v37 = 0;
        if (v95 <= 3)
          goto LABEL_13;
      }
      v38 = 2;
      if (v36 > 3)
      {
LABEL_14:
        v39 = 2;
        goto LABEL_22;
      }
LABEL_21:
      v39 = qword_1BB92C840[v35];
LABEL_22:
      if (((v38 >= v39) & ~v37) != 0)
        goto LABEL_3;
      while (1)
      {
        swift_beginAccess();
        sub_1BB86E800();
        swift_endAccess();
        if ((unint64_t)v95 > 3 || qword_1BB92C840[v95] >= v39)
          break;
        sub_1BB5B48F8(v86, v21, v87, v88, v93);
        if (v4)
        {
          swift_release();
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
      if (v36 != 5)
      {
LABEL_3:
        v95 = v36;
LABEL_4:
        swift_beginAccess();
        sub_1BB86E80C();
        swift_endAccess();
        v13 = v77;
        goto LABEL_5;
      }
      swift_beginAccess();
      sub_1BB86E800();
      swift_endAccess();
      v13 = v77;
      if (v95 != 4)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for FormatLayoutError();
        sub_1BA689E84();
        swift_allocError();
        v66 = v65;
        v94[0] = v21;
        *v65 = FormatEquation.description.getter(v74, (uint64_t)v65, v67, v68);
        v66[1] = v69;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      sub_1BB86E7F4();
      swift_endAccess();
LABEL_5:
      v17 = v90;
    }
    while (v29 != MEMORY[0x1BCCE37E4](v21, v90));
  }
  swift_bridgeObjectRelease();
  v46 = v86;
  v45 = v87;
  v47 = v76;
  v48 = v88;
  while (1)
  {
    swift_beginAccess();
    v49 = sub_1BB86E818();
    swift_endAccess();
    if ((v49 & 1) != 0)
      break;
    sub_1BB5B48F8(v46, v21, v45, v48, v93);
    if (v4)
      goto LABEL_43;
  }
  swift_beginAccess();
  sub_1BB86E7F4();
  swift_endAccess();
  v51 = v81;
  v50 = v82;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v47, 1, v82) == 1)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v73);
    type metadata accessor for FormatLayoutError();
    sub_1BA689E84();
    swift_allocError();
    v53 = v52;
    v94[0] = v21;
    *v52 = FormatEquation.description.getter(v74, (uint64_t)v52, v54, v55);
    v53[1] = v56;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    v57 = v47;
    v58 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v58(v75, v57, v50);
    swift_beginAccess();
    v59 = sub_1BB86E818();
    swift_endAccess();
    if ((v59 & 1) != 0)
    {
      v58(v71, v75, v50);
    }
    else
    {
      type metadata accessor for FormatLayoutError();
      sub_1BA689E84();
      swift_allocError();
      v61 = v60;
      v94[0] = v21;
      *v60 = FormatEquation.description.getter(v74, (uint64_t)v60, v62, v63);
      v61[1] = v64;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v75, v50);
    }
  }
LABEL_43:
  swift_release();
  return swift_release();
}

uint64_t FormatEquation.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, AssociatedTypeWitness, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 64))(v11, a2, a3);
  type metadata accessor for FormatEquationToken(255, a2, a3, v17);
  sub_1BB874218();
  swift_allocObject();
  v18 = sub_1BB872E2C();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v19, v16, a2);
  swift_storeEnumTagMultiPayload();
  v20 = sub_1BA69C794(v18);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a2);
  *a4 = v20;
  return result;
}

uint64_t FormatEquation.optionIdentifiers.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for FormatEquationToken(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v4 = sub_1BB872EE0();
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_bridgeObjectRetain();
  MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v4);
  sub_1BB872C40();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1BB5B47D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[2];

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FormatEquationToken(0, v10, v11, v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v19 - v14, a2, v12, v13);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v15, a3);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    if (v18)
      sub_1BA6E9BD8(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  }
  return result;
}

uint64_t sub_1BB5B48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v52 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = a4;
  v54 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v42 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v49 = *(_QWORD *)(v42 + 16);
  v46 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)&v39 - v8;
  v9 = sub_1BB873A2C();
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v43 = (char *)&v39 - v19;
  MEMORY[0x1E0C80A78](v20);
  v47 = (char *)&v39 - v21;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v39 - v23;
  sub_1BB86E83C();
  v25 = MEMORY[0x1E0DB4A68];
  v26 = v15;
  swift_projectBox();
  sub_1BA4AD288(0, &qword_1ED3B0810, (uint64_t)&type metadata for FormatEquationOperator, (uint64_t (*)(_QWORD, uint64_t))v25);
  v45 = v27;
  v44 = swift_projectBox();
  swift_beginAccess();
  sub_1BB86E7F4();
  swift_endAccess();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v28(v14, 1, AssociatedTypeWitness) == 1)
  {
    v11 = v14;
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v29(v24, v14, AssociatedTypeWitness);
    swift_beginAccess();
    sub_1BB86E7F4();
    swift_endAccess();
    if (v28(v11, 1, AssociatedTypeWitness) != 1)
    {
      v51 = v26;
      v29(v47, v11, AssociatedTypeWitness);
      swift_beginAccess();
      sub_1BB86E7F4();
      swift_endAccess();
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v51);
  type metadata accessor for FormatLayoutError();
  sub_1BA689E84();
  swift_allocError();
  v31 = v30;
  v55 = v52;
  v33 = type metadata accessor for FormatEquation(0, v53, v54, v32);
  *v31 = FormatEquation.description.getter(v33, v34, v35, v36);
  v31[1] = v37;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_1BB5B4CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  type metadata accessor for FormatLayoutError();
  sub_1BA689E84();
  swift_allocError();
  v5 = v4;
  v6 = *(_QWORD *)(v3 - 120);
  *(_QWORD *)(v3 - 104) = *(_QWORD *)(v3 - 128);
  v8 = type metadata accessor for FormatEquation(0, v6, *(_QWORD *)(v3 - 112), v7);
  *v5 = FormatEquation.description.getter(v8, v9, v10, v11);
  v5[1] = v12;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8);
  v13(v2, v0);
  v13(v1, v0);
  JUMPOUT(0x1BB5B4C40);
}

uint64_t sub_1BB5B4FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return FormatEquation.init(value:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BB5B4FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return FormatEquation.value(contextLayoutOptions:)(a1, a2, a3);
}

uint64_t sub_1BB5B4FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FormatEquation.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BB5B4FE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5B5008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB5B47D0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1BB5B5020()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1BB5B503C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>);
  a1[2] = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>, a2);
  a1[3] = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>, a2);
  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>, a2);
  a1[4] = result;
  return result;
}

uint64_t sub_1BB5B50A8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatEquation<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5B50D4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v52 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_1BB873A2C();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  MEMORY[0x1E0C80A78](v19);
  v49 = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v37 - v22;
  MEMORY[0x1E0C80A78](v24);
  v37[1] = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_1BB872BE0();
  v57 = sub_1BB872748();
  v53 = sub_1BB873E10();
  sub_1BB873DC8();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_1BB872BA4();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_1BB873A80();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v23, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v23, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v23, AssociatedTypeWitness);
      sub_1BB873DF8();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_1BB873A80();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_1BB873DF8();
      sub_1BB873A80();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t Sequence<>.scoredItems(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];

  v9[2] = a1;
  return sub_1BB5B50D4((void (*)(char *, char *))sub_1BB5B57B0, (uint64_t)v9, a2, (uint64_t)&type metadata for FeedScoredItem, MEMORY[0x1E0DEDCE8], a3, MEMORY[0x1E0DEDD18], a8);
}

uint64_t FeedScoredItem.identifier.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_itemID);
  v2 = sub_1BB8729A0();

  return v2;
}

id FeedScoredItem.score.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 8), sel_sortingScore);
}

void *FeedScoredItem.feedContext.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t FeedScoredItem.publisherID.getter()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_publisherID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1BB8729A0();

  return v3;
}

uint64_t FeedScoredItem.date.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_publishDate);
  if (v3)
  {
    v4 = v3;
    sub_1BB86C874();

    v5 = sub_1BB86C8B0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1BB86C8B0();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id sub_1BB5B57B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v3 = *(void **)(v2 + 16);
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = 0;
  swift_unknownObjectRetain();
  return v3;
}

uint64_t Sequence<>.headlines.getter()
{
  sub_1BA768D08();
  return sub_1BB872BF8();
}

uint64_t sub_1BB5B5840@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = swift_dynamicCastObjCProtocolConditional();
  v3 = result;
  if (result)
    result = swift_unknownObjectRetain();
  *a1 = v3;
  return result;
}

uint64_t Sequence<>.feedItems.getter()
{
  sub_1BA49A224(0, &qword_1ED3B9770);
  return sub_1BB872BF8();
}

uint64_t sub_1BB5B5908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  v3 = result;
  if (result)
    result = swift_unknownObjectRetain();
  *a1 = v3;
  return result;
}

uint64_t Sequence<>.feedItemScoreProfiles.getter()
{
  uint64_t v1;

  objc_msgSend((id)objc_opt_self(), sel_mapTableWithKeyOptions_valueOptions_, 0, 0);
  sub_1BA49A224(0, &qword_1ED3A0900);
  sub_1BB872C40();
  return v1;
}

void sub_1BB5B5A04(void **a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *a1;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
    swift_unknownObjectRetain();
  objc_msgSend(v3, sel_setObject_forKey_, v2, v4);

}

uint64_t Sequence<>.feedContextByFeedID.getter()
{
  uint64_t v1;

  sub_1BB5B6030();
  sub_1BB872C40();
  return v1;
}

void sub_1BB5B5AF0(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v2 = *(void **)(a2 + 16);
  if (v2)
  {
    v4 = *(void **)a2;
    v5 = v2;
    v6 = objc_msgSend(v4, sel_sourceFeedID);
    if (v6)
    {
      v7 = v6;
      v8 = sub_1BB8729A0();
      v10 = v9;

      v11 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = *a1;
      *a1 = 0x8000000000000000;
      sub_1BB4C0EB8((uint64_t)v11, v8, v10, isUniquelyReferenced_nonNull_native);
      *a1 = v13;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t Sequence<>.filteredFeedItemScoreProfiles(filteredFeedItems:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
  {
LABEL_12:
    sub_1BA6E43EC(v7);
    swift_bridgeObjectRelease();
    v21 = objc_msgSend((id)objc_opt_self(), sel_mapTableWithKeyOptions_valueOptions_, 0, 0);
    MEMORY[0x1E0C80A78](v21);
    sub_1BA49A224(0, &qword_1ED3A0900);
    sub_1BB872C40();
    swift_bridgeObjectRelease();
    return v22;
  }
  v23 = MEMORY[0x1E0DEE9D8];
  result = sub_1BA7447E8(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v19 = a2;
    v20 = a3;
    v9 = 0;
    v7 = v23;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1BCCE4630](v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, sel_identifier, v19, v20);
      v13 = sub_1BB8729A0();
      v15 = v14;

      v22 = v7;
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
        sub_1BA7447E8(v16 > 1, v17 + 1, 1);
      ++v9;
      *(_QWORD *)(v7 + 16) = v17 + 1;
      v18 = v7 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v15;
    }
    while (v6 != v9);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_1BB5B5DFC(void **a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(id *)(a2 + 16);
  swift_unknownObjectRetain();
  v8 = v6;
  v9 = objc_msgSend(v5, sel_itemID);
  v10 = sub_1BB8729A0();
  v12 = v11;

  swift_unknownObjectRelease();
  LOBYTE(a3) = sub_1BA761FE4(v10, v12, a3);
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    v13 = *a1;
    objc_opt_self();
    v14 = (void *)swift_dynamicCastObjCClass();
    if (v14)
      swift_unknownObjectRetain();
    objc_msgSend(v13, sel_setObject_forKey_, v8, v14);

  }
}

uint64_t _s8NewsFeed0B10ScoredItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  id v16;
  id v17;
  char v18;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = objc_msgSend(*(id *)a1, sel_itemID);
  v6 = sub_1BB8729A0();
  v8 = v7;

  v9 = objc_msgSend(v3, sel_itemID);
  v10 = sub_1BB8729A0();
  v12 = v11;

  if (v6 == v10 && v8 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      return 0;
  }
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B99D0);
  v16 = v2;
  v17 = v4;
  v18 = sub_1BB8738B8();

  return v18 & 1;
}

void sub_1BB5B6030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C8018)
  {
    sub_1BA49A224(255, &qword_1ED39DA60);
    v0 = sub_1BB872814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C8018);
  }
}

void sub_1BB5B60A4(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_1BB5B5DFC(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_1BB5B60BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5B60E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5B60E0()
{
  unint64_t result;

  result = qword_1EF2C8028;
  if (!qword_1EF2C8028)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FeedScoredItem, &type metadata for FeedScoredItem);
    atomic_store(result, (unint64_t *)&qword_1EF2C8028);
  }
  return result;
}

_QWORD *assignWithCopy for FeedScoredItem(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a1[2];
  v8 = (void *)a2[2];
  a1[2] = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for FeedScoredItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_unknownObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t FormatPrintNode.bind(binder:context:)(uint64_t a1, uint64_t a2)
{
  return sub_1BB5B79AC(a2);
}

uint64_t FormatPrintNode.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatPrintNode.values.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t FormatPrintNodeValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5B62A4
                                                            + 4 * asc_1BB92C900[*v0]))(0x736E6F6974706FLL, 0xE700000000000000);
}

uint64_t sub_1BB5B62A4()
{
  return 0x40736E6F6974706FLL;
}

uint64_t sub_1BB5B62D8()
{
  return 0x726F73727563;
}

uint64_t sub_1BB5B62EC()
{
  return 0x6574616C706D6574;
}

uint64_t sub_1BB5B6304()
{
  return 0x747865746E6F63;
}

uint64_t sub_1BB5B6318()
{
  return 0x73676E69646E6962;
}

uint64_t sub_1BB5B6330()
{
  return 7105633;
}

uint64_t FormatPrintNode.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPrintNode.identifier.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FormatPrintNode.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatPrintNode.values.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FormatPrintNode.values.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

_QWORD *FormatPrintNode.__allocating_init(identifier:message:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  swift_beginAccess();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  swift_beginAccess();
  v10[6] = a5;
  return v10;
}

_QWORD *FormatPrintNode.init(identifier:message:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  swift_beginAccess();
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  swift_beginAccess();
  v5[6] = a5;
  return v5;
}

uint64_t FormatPrintNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FormatPrintNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *sub_1BB5B65E4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = _s8NewsFeed15FormatPrintNodeC7defaultACXDvgZ_0();
  *a1 = result;
  return result;
}

_QWORD *sub_1BB5B6608@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1BAEACEA0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BB5B6630(_QWORD *a1)
{
  return FormatPrintNode.encode(to:)(a1);
}

uint64_t sub_1BB5B6650(_QWORD **a1, _QWORD **a2)
{
  return _s8NewsFeed15FormatPrintNodeC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_1BB5B665C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a2 + 40))
  {
    v4 = a3[8];
    v5 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v4);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BB872AFC((_QWORD *)0x4C5B20746E697250);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 8))(0x4C5B20746E697250, 0xEF205D74756F7961, v4, v5);
    swift_bridgeObjectRelease();
  }
  if ((sub_1BB5B6EA4((uint64_t)&unk_1E7270F48) & 1) != 0)
  {
    v6 = a3[8];
    v7 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v6);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BB86DD80();
    swift_retain();
    swift_release();
    sub_1BB62E78C();
    swift_release();
    sub_1BB5B80EC();
    sub_1BB874548();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v8);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v7 + 8))(0xD000000000000017, 0x80000001BB991C60, v6, v7);
    swift_bridgeObjectRelease();
  }
  if ((sub_1BB5B6EA4((uint64_t)&unk_1E7270F70) & 1) != 0)
  {
    v9 = a3[8];
    v10 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v9);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BA6F3ED8(0, &qword_1EF2C8118, MEMORY[0x1E0DB6478]);
    sub_1BB86DBC4();
    sub_1BA6F3ED8(0, &qword_1EF2AFEE0, MEMORY[0x1E0DB62B8]);
    sub_1BB874548();
    swift_release();
    swift_release();
    sub_1BB872AFC(v11);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v10 + 8))(0xD000000000000016, 0x80000001BB991C40, v9, v10);
    swift_bridgeObjectRelease();
  }
  if ((sub_1BB5B6EA4((uint64_t)&unk_1E7270F98) & 1) != 0)
  {
    v18 = a3[9];
    v19 = a3[8];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v19);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BA6F3ED8(0, &qword_1EF2C8118, MEMORY[0x1E0DB6478]);
    sub_1BB86DBDC();
    sub_1BB874548();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1BB872AFC(v12);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 8))(0xD000000000000018, 0x80000001BB991C20, v19);
    swift_bridgeObjectRelease();
  }
  if ((sub_1BB5B6EA4((uint64_t)&unk_1E7270FC0) & 1) != 0)
  {
    v13 = a3[8];
    v14 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v13);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BA6F3ED8(0, &qword_1EF2C8118, MEMORY[0x1E0DB6478]);
    sub_1BB86DBD0();
    sub_1BB86D6D8();
    sub_1BB874548();
    swift_release();
    swift_release();
    sub_1BB872AFC(v15);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 8))(0xD000000000000017, 0x80000001BB991C00, v13, v14);
    swift_bridgeObjectRelease();
  }
  result = sub_1BB5B6EA4((uint64_t)&unk_1E7270FE8);
  if ((result & 1) != 0)
  {
    v20 = a3[9];
    v21 = a3[8];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v21);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BB874548();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v17);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 8))(0xD000000000000018, 0x80000001BB991BE0, v21);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BB5B6EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  if (*(_QWORD *)(v3 + 16))
  {
    sub_1BB8745CC();
    swift_bridgeObjectRetain();
    sub_1BB872A90();
    v4 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v3 + 32));
    if (((*(_QWORD *)(v3 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  swift_bridgeObjectRetain();
  for (i = 0; i != v5; ++i)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      v7 = *(unsigned __int8 *)(a1 + 32 + i);
      sub_1BB8745CC();
      __asm { BR              X8 }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1BB5B748C()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x1BB5B7454);
}

uint64_t sub_1BB5B749C(uint64_t a1, uint64_t a2)
{
  return sub_1BB5B79AC(a2);
}

NewsFeed::FormatPrintNodeValue_optional __swiftcall FormatPrintNodeValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  NewsFeed::FormatPrintNodeValue_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BB873FE4();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_1BB5B7518(char *a1)
{
  sub_1BB7FACA4(*a1);
}

void sub_1BB5B7524()
{
  char *v0;

  sub_1BAB070A8(0, *v0);
}

void sub_1BB5B7530(uint64_t a1)
{
  char *v1;

  sub_1BA9D0EC8(a1, *v1);
}

void sub_1BB5B7538(uint64_t a1)
{
  char *v1;

  sub_1BAB070A8(a1, *v1);
}

NewsFeed::FormatPrintNodeValue_optional sub_1BB5B7540(Swift::String *a1)
{
  return FormatPrintNodeValue.init(rawValue:)(*a1);
}

uint64_t sub_1BB5B754C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BB5B757C + 4 * byte_1BB92C930[*v0]))();
}

void sub_1BB5B757C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "options@bind");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1BB5B75A0(char *a1@<X8>)
{
  strcpy(a1, "options@layout");
  a1[15] = -18;
}

void sub_1BB5B75C8(_QWORD *a1@<X8>)
{
  *a1 = 0x726F73727563;
  a1[1] = 0xE600000000000000;
}

void sub_1BB5B75E0(_QWORD *a1@<X8>)
{
  *a1 = 0x6574616C706D6574;
  a1[1] = 0xE800000000000000;
}

void sub_1BB5B75FC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x747865746E6F63;
  a1[1] = v1;
}

void sub_1BB5B7614(_QWORD *a1@<X8>)
{
  *a1 = 0x73676E69646E6962;
  a1[1] = 0xE800000000000000;
}

void sub_1BB5B7630(_QWORD *a1@<X8>)
{
  *a1 = 7105633;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1BB5B7644()
{
  sub_1BB5B7E94();
  return sub_1BB872D60();
}

uint64_t sub_1BB5B76A0(_QWORD *a1)
{
  return FormatPrintNodeValue.encode(to:)(a1);
}

BOOL sub_1BB5B76BC(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed20FormatPrintNodeValueO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return (v3 & 1) == 0;
}

BOOL sub_1BB5B76F8(char *a1)
{
  char v1;
  char v3;

  v3 = *a1;
  _s8NewsFeed20FormatPrintNodeValueO1loiySbAC_ACtFZ_0((uint64_t)&v3);
  return (v1 & 1) == 0;
}

uint64_t sub_1BB5B7734(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed20FormatPrintNodeValueO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return v3 & 1;
}

void _s8NewsFeed20FormatPrintNodeValueO1loiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5B77C0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BB5B7884 + 4 * byte_1BB92C940[a1]))(0x40736E6F6974706FLL);
}

uint64_t sub_1BB5B7884(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x40736E6F6974706FLL && v1 == 0xEC000000646E6962)
    v2 = 0;
  else
    v2 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BB5B79AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  if (*(_QWORD *)(v1 + 40))
  {
    v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_logger);
    v4 = v3[3];
    v5 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v4);
    strcpy((char *)v11, "Print [Bind] ");
    HIWORD(v11[1]) = -4864;
    sub_1BB872AFC((_QWORD *)0x425B20746E697250);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v5 + 8))(v11[0], v11[1], v4, v5);
    swift_bridgeObjectRelease();
  }
  result = sub_1BB5B6EA4((uint64_t)&unk_1E7254AA8);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_logger + 24);
    v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_logger + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed23FormatNodeBinderContext_logger), v7);
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BB86DD80();
    swift_retain();
    swift_release();
    v9 = sub_1BB62E78C();
    swift_release();
    v11[3] = v9;
    sub_1BB5B80EC();
    sub_1BB874548();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v10);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v8 + 8))(0xD000000000000015, 0x80000001BB991C80, v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *_s8NewsFeed15FormatPrintNodeC7defaultACXDvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v0 = sub_1BB86C8E0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BB86C8D4();
  v4 = sub_1BB86C8C8();
  v6 = v5;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  v7 = sub_1BA864390((uint64_t)&unk_1E726CFE0);
  type metadata accessor for FormatPrintNode();
  v8 = (_QWORD *)swift_allocObject();
  swift_beginAccess();
  v8[2] = v4;
  v8[3] = v6;
  v8[4] = 0;
  v8[5] = 0;
  swift_beginAccess();
  v8[6] = v7;
  return v8;
}

uint64_t sub_1BB5B7CB4(uint64_t a1)
{
  uint64_t result;

  result = sub_1BB5B7DA0(&qword_1EF2C8030, (uint64_t)&protocol conformance descriptor for FormatPrintNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FormatPrintNode()
{
  return objc_opt_self();
}

uint64_t sub_1BB5B7D08(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BB5B7DA0(&qword_1EF2B31B8, (uint64_t)&protocol conformance descriptor for FormatPrintNode);
  a1[2] = sub_1BB5B7DA0(&qword_1EF2B5C40, (uint64_t)&protocol conformance descriptor for FormatPrintNode);
  result = sub_1BB5B7DA0(&qword_1EF2C8038, (uint64_t)&protocol conformance descriptor for FormatPrintNode);
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5B7D6C(uint64_t a1)
{
  uint64_t result;

  result = sub_1BB5B7DA0(&qword_1EF2C8040, (uint64_t)&protocol conformance descriptor for FormatPrintNode);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5B7DA0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FormatPrintNode();
    result = MEMORY[0x1BCCE5B24](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BB5B7DE0()
{
  unint64_t result;

  result = qword_1EF2C8048;
  if (!qword_1EF2C8048)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPrintNodeValue, &type metadata for FormatPrintNodeValue);
    atomic_store(result, (unint64_t *)&qword_1EF2C8048);
  }
  return result;
}

unint64_t sub_1BB5B7E24(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB5B7E50();
  result = sub_1BB5B7E94();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB5B7E50()
{
  unint64_t result;

  result = qword_1EF2C8050;
  if (!qword_1EF2C8050)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPrintNodeValue, &type metadata for FormatPrintNodeValue);
    atomic_store(result, (unint64_t *)&qword_1EF2C8050);
  }
  return result;
}

unint64_t sub_1BB5B7E94()
{
  unint64_t result;

  result = qword_1EF2C8058;
  if (!qword_1EF2C8058)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPrintNodeValue, &type metadata for FormatPrintNodeValue);
    atomic_store(result, (unint64_t *)&qword_1EF2C8058);
  }
  return result;
}

unint64_t sub_1BB5B7ED8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5B7EFC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5B7EFC()
{
  unint64_t result;

  result = qword_1EF2C8060;
  if (!qword_1EF2C8060)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPrintNodeValue, &type metadata for FormatPrintNodeValue);
    atomic_store(result, (unint64_t *)&qword_1EF2C8060);
  }
  return result;
}

unint64_t sub_1BB5B7F40(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAEEE36C();
  a1[2] = sub_1BAEAD620();
  result = sub_1BB5B7DE0();
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5B7F74@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5B7FC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for FormatPrintNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatPrintNode.__allocating_init(identifier:message:values:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for FormatPrintNodeValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BB5B806C + 4 * byte_1BB92C94D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BB5B80A0 + 4 * byte_1BB92C948[v4]))();
}

uint64_t sub_1BB5B80A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B80A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5B80B0);
  return result;
}

uint64_t sub_1BB5B80BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5B80C4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BB5B80C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B80D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatPrintNodeValue()
{
  return &type metadata for FormatPrintNodeValue;
}

void sub_1BB5B80EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C8120)
  {
    type metadata accessor for FormatScopedOption();
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C8120);
  }
}

uint64_t storeEnumTagSinglePayload for WebEmbedDataSourceCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5B818C + 4 * byte_1BB92CC95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5B81C0 + 4 * byte_1BB92CC90[v4]))();
}

uint64_t sub_1BB5B81C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B81C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5B81D0);
  return result;
}

uint64_t sub_1BB5B81DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5B81E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5B81E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B81F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WebEmbedDataSourceCacheError()
{
  return &type metadata for WebEmbedDataSourceCacheError;
}

unint64_t sub_1BB5B8210()
{
  unint64_t result;

  result = qword_1EF2C8128;
  if (!qword_1EF2C8128)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92CD00, &type metadata for WebEmbedDataSourceCacheError);
    atomic_store(result, (unint64_t *)&qword_1EF2C8128);
  }
  return result;
}

void static FormatCodingEqualOperatorStrategy.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void _s8NewsFeed33FormatCodingEqualOperatorStrategyV12shouldEncode12wrappedValueSbAA0cF0O_tFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BB5B82A0()
{
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1BB5B83A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5B83C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5B83C4()
{
  unint64_t result;

  result = qword_1EF2C8130;
  if (!qword_1EF2C8130)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatCodingEqualOperatorStrategy, &type metadata for FormatCodingEqualOperatorStrategy);
    atomic_store(result, (unint64_t *)&qword_1EF2C8130);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatCodingEqualOperatorStrategy()
{
  return &type metadata for FormatCodingEqualOperatorStrategy;
}

uint64_t static FormatDerivedDataOptionStatement.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_1BB874398() & 1) != 0)
    return sub_1BA88312C(v2, v3);
  else
    return 0;
}

uint64_t sub_1BB5B8480()
{
  _BYTE *v0;

  if (*v0)
    return 0x7265696669646F6DLL;
  else
    return 0x696669746E656469;
}

uint64_t sub_1BB5B84C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5B8C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5B84E8()
{
  sub_1BB5B869C();
  return sub_1BB874710();
}

uint64_t sub_1BB5B8510()
{
  sub_1BB5B869C();
  return sub_1BB87471C();
}

uint64_t FormatDerivedDataOptionStatement.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_1BB5B89DC(0, &qword_1EF2C8198, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v10 - v6;
  v11 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5B869C();
  sub_1BB8746C8();
  v15 = 0;
  v8 = v12;
  sub_1BB87417C();
  if (!v8 && *(_QWORD *)(v11 + 16))
  {
    v14 = 1;
    v13 = v11;
    sub_1BB5B86E0();
    sub_1BB5B8738();
    sub_1BAEEEC88();
    sub_1BB874464();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1BB5B869C()
{
  unint64_t result;

  result = qword_1EF2C81A0;
  if (!qword_1EF2C81A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92CF64, &type metadata for FormatDerivedDataOptionStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C81A0);
  }
  return result;
}

unint64_t sub_1BB5B86E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C81A8;
  if (!qword_1EF2C81A8)
  {
    sub_1BB5B89DC(255, &qword_1EF2C8198, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C81A8);
  }
  return result;
}

void sub_1BB5B8738()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A1020)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A1020);
  }
}

uint64_t FormatDerivedDataOptionStatement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  char v29;
  char v30;
  char v31;

  v27 = a2;
  sub_1BA540344();
  v26 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5B89DC(0, &qword_1EF2C81B0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5B869C();
  v12 = v28;
  sub_1BB87468C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v28 = a1;
  v25 = v4;
  v13 = v9;
  v14 = v26;
  v15 = v27;
  v31 = 0;
  v16 = sub_1BB874098();
  v19 = v18;
  v24 = v16;
  v30 = 1;
  swift_bridgeObjectRetain();
  v20 = sub_1BB8740F8();
  if ((v20 & 1) != 0)
  {
    v29 = 1;
    sub_1BAEA9AB0();
    sub_1BB8740D4();
    v21 = sub_1BB86DD08();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v14);
  }
  else
  {
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v22 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v8);
  *v15 = v24;
  v15[1] = v19;
  v15[2] = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v22);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1BB5B89DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB5B869C();
    v7 = a3(a1, &type metadata for FormatDerivedDataOptionStatement.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BB5B8A38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatDerivedDataOptionStatement.init(from:)(a1, a2);
}

uint64_t sub_1BB5B8A4C(_QWORD *a1)
{
  return FormatDerivedDataOptionStatement.encode(to:)(a1);
}

uint64_t sub_1BB5B8A60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_1BB874398() & 1) != 0)
    return sub_1BA88312C(v2, v3);
  else
    return 0;
}

ValueMetadata *type metadata accessor for FormatDerivedDataOptionStatement()
{
  return &type metadata for FormatDerivedDataOptionStatement;
}

uint64_t storeEnumTagSinglePayload for FormatDerivedDataOptionStatement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5B8B1C + 4 * byte_1BB92CDF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5B8B50 + 4 * asc_1BB92CDF0[v4]))();
}

uint64_t sub_1BB5B8B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B8B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5B8B60);
  return result;
}

uint64_t sub_1BB5B8B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5B8B74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5B8B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B8B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatDerivedDataOptionStatement.CodingKeys()
{
  return &type metadata for FormatDerivedDataOptionStatement.CodingKeys;
}

unint64_t sub_1BB5B8BA0()
{
  unint64_t result;

  result = qword_1EF2C81B8;
  if (!qword_1EF2C81B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92CF3C, &type metadata for FormatDerivedDataOptionStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C81B8);
  }
  return result;
}

unint64_t sub_1BB5B8BE8()
{
  unint64_t result;

  result = qword_1EF2C81C0;
  if (!qword_1EF2C81C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92CEAC, &type metadata for FormatDerivedDataOptionStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C81C0);
  }
  return result;
}

unint64_t sub_1BB5B8C30()
{
  unint64_t result;

  result = qword_1EF2C81C8;
  if (!qword_1EF2C81C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92CED4, &type metadata for FormatDerivedDataOptionStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C81C8);
  }
  return result;
}

uint64_t sub_1BB5B8C74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265696669646F6DLL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t initializeWithCopy for SportsDataVisualizationResponseBracketItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SportsDataVisualizationResponseBracketItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for SportsDataVisualizationResponseBracketItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for SportsDataVisualizationResponseBracketItem()
{
  return &type metadata for SportsDataVisualizationResponseBracketItem;
}

uint64_t sub_1BB5B8F78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v49 = a2;
  sub_1BB5B9B08();
  v48 = v3;
  v46 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA61B370();
  v50 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5B9BF0(0, &qword_1ED3ABCD8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5B9BAC();
  v14 = v51;
  sub_1BB87468C();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v8;
  v43 = v6;
  v17 = v50;
  v51 = v11;
  v45 = a1;
  LOBYTE(v52) = 0;
  v18 = sub_1BB874098();
  v44 = v19;
  v20 = v10;
  v21 = v18;
  LOBYTE(v52) = 1;
  v22 = sub_1BB87402C();
  v42 = v23;
  v40 = v22;
  LOBYTE(v52) = 2;
  v39 = sub_1BB87402C();
  v41 = v24;
  LOBYTE(v52) = 3;
  if ((sub_1BB8740F8() & 1) != 0)
  {
    v53 = 3;
    sub_1BA4A2870((unint64_t *)&qword_1ED3BBEB8, (uint64_t (*)(uint64_t))sub_1BA61B370, MEMORY[0x1E0DB3610]);
    sub_1BB8740D4();
    v37 = v21;
    v38 = 0;
    v25 = sub_1BB86DD08();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v17);
  }
  else
  {
    v37 = v21;
    v38 = 0;
    v25 = MEMORY[0x1E0DEE9D8];
  }
  LOBYTE(v52) = 5;
  v26 = v13;
  v27 = sub_1BB8740F8();
  v28 = v49;
  if ((v27 & 1) != 0)
  {
    v53 = 5;
    sub_1BA4A2870(&qword_1ED3ABAD0, (uint64_t (*)(uint64_t))sub_1BB5B9B08, MEMORY[0x1E0DB3610]);
    v29 = v47;
    v30 = v48;
    sub_1BB8740D4();
    v31 = v26;
    v50 = sub_1BB86DD08();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v30);
  }
  else
  {
    v50 = MEMORY[0x1E0DEE9D8];
    v31 = v13;
  }
  sub_1BA4AD288(0, (unint64_t *)&qword_1ED3AB098, (uint64_t)&type metadata for SportsDataVisualizationResponseURLDataSource, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v53 = 4;
  sub_1BB028B6C((unint64_t *)&unk_1ED3AB0A0, (uint64_t (*)(void))sub_1BA920B6C, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v20);
  v32 = v52;
  v33 = v44;
  *(_QWORD *)v28 = v37;
  *(_QWORD *)(v28 + 8) = v33;
  v34 = v41;
  v35 = v42;
  *(_QWORD *)(v28 + 16) = v40;
  *(_QWORD *)(v28 + 24) = v35;
  *(_QWORD *)(v28 + 32) = v39;
  *(_QWORD *)(v28 + 40) = v34;
  *(_QWORD *)(v28 + 48) = v25;
  *(_QWORD *)(v28 + 56) = v32;
  *(_QWORD *)(v28 + 64) = v50;
  *(_BYTE *)(v28 + 72) = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5B9668(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  sub_1BB5B9BF0(0, &qword_1EF2C81D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v17 - v6;
  v8 = v1[2];
  v22 = v1[3];
  v23 = v8;
  v9 = v1[4];
  v20 = v1[5];
  v21 = v9;
  v10 = v1[6];
  v18 = v1[7];
  v19 = v10;
  v17 = v1[8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5B9BAC();
  sub_1BB8746C8();
  LOBYTE(v25) = 0;
  v11 = v24;
  sub_1BB87417C();
  if (!v11)
  {
    v12 = v20;
    v13 = v21;
    v25 = v23;
    v26 = v22;
    v27 = 1;
    v14 = MEMORY[0x1E0DEB940];
    sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9200, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BB028B08((unint64_t *)&qword_1ED39BDB0, (unint64_t *)&qword_1ED3B9200, (uint64_t (*)(_QWORD, uint64_t))v14, MEMORY[0x1E0DEE988]);
    sub_1BB8741AC();
    v25 = v13;
    v26 = v12;
    v27 = 2;
    sub_1BB8741AC();
    v25 = v19;
    v27 = 3;
    v15 = MEMORY[0x1E0DEAEC8];
    sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB028B08((unint64_t *)&qword_1ED39DA10, (unint64_t *)&qword_1ED3B95C0, (uint64_t (*)(_QWORD, uint64_t))v15, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
    v25 = v18;
    v27 = 4;
    sub_1BA4AD288(0, (unint64_t *)&qword_1ED3AB098, (uint64_t)&type metadata for SportsDataVisualizationResponseURLDataSource, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB028B6C(&qword_1EF2AA9C8, (uint64_t (*)(void))sub_1BA920C70, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
    v25 = v17;
    v27 = 5;
    sub_1BB5B9C4C();
    sub_1BB5B9CA0();
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BB5B9980(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5B99C0 + 4 * byte_1BB92CFC0[a1]))(0x6E6F6E6143636D75, 0xEE0064496C616369);
}

uint64_t sub_1BB5B99C0()
{
  return 0x615465756761656CLL;
}

unint64_t sub_1BB5B99E0()
{
  return 0xD000000000000011;
}

uint64_t sub_1BB5B99FC()
{
  return 0x736449676174;
}

uint64_t sub_1BB5B9A10()
{
  return 0x53617461446C7275;
}

uint64_t sub_1BB5B9A34()
{
  return 0x73746E657665;
}

uint64_t sub_1BB5B9A48()
{
  return 0x72756F5361746164;
}

uint64_t sub_1BB5B9A64()
{
  unsigned __int8 *v0;

  return sub_1BB5B9980(*v0);
}

uint64_t sub_1BB5B9A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5B9EBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5B9A90()
{
  sub_1BB5B9BAC();
  return sub_1BB874710();
}

uint64_t sub_1BB5B9AB8()
{
  sub_1BB5B9BAC();
  return sub_1BB87471C();
}

uint64_t sub_1BB5B9AE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BB5B8F78(a1, a2);
}

uint64_t sub_1BB5B9AF4(_QWORD *a1)
{
  return sub_1BB5B9668(a1);
}

void sub_1BB5B9B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3ABAD8)
  {
    type metadata accessor for SportsDataVisualizationResponseScoreItem();
    sub_1BA4A2870(&qword_1ED3ABB58, (uint64_t (*)(uint64_t))type metadata accessor for SportsDataVisualizationResponseScoreItem, (uint64_t)&unk_1BB8F0B90);
    sub_1BA4A2870(&qword_1ED3ABB50, (uint64_t (*)(uint64_t))type metadata accessor for SportsDataVisualizationResponseScoreItem, (uint64_t)&unk_1BB8F0B68);
    v0 = sub_1BB86DF60();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3ABAD8);
  }
}

unint64_t sub_1BB5B9BAC()
{
  unint64_t result;

  result = qword_1ED3ABB60;
  if (!qword_1ED3ABB60)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92D120, &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3ABB60);
  }
  return result;
}

void sub_1BB5B9BF0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB5B9BAC();
    v7 = a3(a1, &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BB5B9C4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C81D8)
  {
    type metadata accessor for SportsDataVisualizationResponseScoreItem();
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C81D8);
  }
}

unint64_t sub_1BB5B9CA0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EF2C81E0;
  if (!qword_1EF2C81E0)
  {
    sub_1BB5B9C4C();
    v2 = v1;
    v3 = sub_1BA4A2870(&qword_1ED3ABB50, (uint64_t (*)(uint64_t))type metadata accessor for SportsDataVisualizationResponseScoreItem, (uint64_t)&unk_1BB8F0B68);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF2C81E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SportsDataVisualizationResponseBracketItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BB5B9D64 + 4 * byte_1BB92CFCC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BB5B9D98 + 4 * byte_1BB92CFC7[v4]))();
}

uint64_t sub_1BB5B9D98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B9DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5B9DA8);
  return result;
}

uint64_t sub_1BB5B9DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5B9DBCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BB5B9DC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5B9DC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsDataVisualizationResponseBracketItem.CodingKeys()
{
  return &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys;
}

unint64_t sub_1BB5B9DE8()
{
  unint64_t result;

  result = qword_1EF2C81E8;
  if (!qword_1EF2C81E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92D0F8, &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C81E8);
  }
  return result;
}

unint64_t sub_1BB5B9E30()
{
  unint64_t result;

  result = qword_1ED3ABB70;
  if (!qword_1ED3ABB70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92D068, &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3ABB70);
  }
  return result;
}

unint64_t sub_1BB5B9E78()
{
  unint64_t result;

  result = qword_1ED3ABB68;
  if (!qword_1ED3ABB68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92D090, &type metadata for SportsDataVisualizationResponseBracketItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3ABB68);
  }
  return result;
}

uint64_t sub_1BB5B9EBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6E6143636D75 && a2 == 0xEE0064496C616369;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615465756761656CLL && a2 == 0xEB00000000644967 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB991CA0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736449676174 && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x53617461446C7275 && a2 == 0xEE0073656372756FLL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73746E657665 && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x72756F5361746164 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t FormatResizeAutoMask.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BB5BA22C + 4 * byte_1BB92D170[*v0]))(0xD000000000000012, 0x80000001BB95CE90);
}

uint64_t sub_1BB5BA22C()
{
  return 0x656C626978656C66;
}

void sub_1BB5BA290()
{
  JUMPOUT(0x1BB5BA29CLL);
}

uint64_t sub_1BB5BA2A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FormatResizeAutoMask.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1BB5BA2CC(char *a1)
{
  sub_1BB7F3118(*a1);
}

void sub_1BB5BA2D8()
{
  char *v0;

  sub_1BA8D3E38(*v0);
}

void sub_1BB5BA2E0(uint64_t a1)
{
  char *v1;

  sub_1BA9D0DF0(a1, *v1);
}

uint64_t sub_1BB5BA2E8()
{
  sub_1BA4A7458();
  return sub_1BB872D0C();
}

BOOL sub_1BB5BA33C(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed20FormatResizeAutoMaskO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return (v3 & 1) == 0;
}

BOOL sub_1BB5BA378(char *a1)
{
  char v1;
  char v3;

  v3 = *a1;
  _s8NewsFeed20FormatResizeAutoMaskO1loiySbAC_ACtFZ_0((uint64_t)&v3);
  return (v1 & 1) == 0;
}

uint64_t sub_1BB5BA3B4(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed20FormatResizeAutoMaskO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return v3 & 1;
}

void _s8NewsFeed20FormatResizeAutoMaskO1loiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1BB5BA438@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_1BB5BA4E0 + 4 * byte_1BB92D17C[v2]))(0x656C626978656C66, a1, a2 + 1);
}

uint64_t sub_1BB5BA4E0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C626978656C66 && v1 == 0xED00006874646957)
    v2 = 0;
  else
    v2 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

unint64_t sub_1BB5BA5BC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA82C908();
  a1[2] = sub_1BA82C9D4();
  result = sub_1BA82C94C();
  a1[3] = result;
  return result;
}

ValueMetadata *type metadata accessor for FormatResizeAutoMask()
{
  return &type metadata for FormatResizeAutoMask;
}

void sub_1BB5BA600(void *a1, uint64_t a2)
{
  char *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(void **)a2;
  v24 = *(unsigned __int8 *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 25);
  v8 = *(void **)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  objc_msgSend(a1, sel_setActionAtItemEnd_, v7);
  objc_msgSend(a1, sel_setPreventsDisplaySleepDuringVideoPlayback_, v5);
  objc_msgSend(a1, sel_setMuted_, v6);
  v9 = objc_msgSend(v2, sel_layer);
  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setPlayer_, a1);

  v10 = objc_msgSend(v2, sel_layer);
  objc_opt_self();
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_setVideoGravity_, v4);

  v11 = 256;
  if (!(_DWORD)v6)
    v11 = 0;
  v12 = &v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties];
  v13 = *(void **)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties];
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties + 8];
  v15 = v11 | v5;
  v16 = *(_QWORD *)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties + 16];
  v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties + 24];
  v18 = *(void **)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties + 32];
  *(_QWORD *)v12 = v4;
  *((_QWORD *)v12 + 1) = v24;
  *((_QWORD *)v12 + 2) = v23;
  *((_QWORD *)v12 + 3) = v15;
  *((_QWORD *)v12 + 4) = v8;
  *((_QWORD *)v12 + 5) = v7;
  v19 = v4;
  v20 = v8;
  sub_1BA929E14(v13, v14, v16, v17, v18);
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator];
  swift_beginAccess();
  v22 = *(unsigned __int8 *)(v21 + 16);
  *(_BYTE *)(v21 + 16) = 1;
  if (v22 != 1)
    LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
}

char *sub_1BB5BA7EC(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v23;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  v11 = &v4[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_identifier];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0xE000000000000000;
  v12 = &v4[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_assets];
  v13 = type metadata accessor for FormatVideoData.Assets(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator;
  type metadata accessor for LayeredMediaViewDisplayStateCoordinator();
  swift_allocObject();
  v15 = v5;
  *(_QWORD *)&v5[v14] = LayeredMediaViewDisplayStateCoordinator.init()();
  v16 = &v15[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties];
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *(_OWORD *)v16 = 0u;

  v23.receiver = v15;
  v23.super_class = ObjectType;
  v17 = (char *)objc_msgSendSuper2(&v23, sel_initWithFrame_, a1, a2, a3, a4);
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator];
  swift_beginAccess();
  v19 = *(_BYTE *)(v18 + 16);
  *(_BYTE *)(v18 + 16) = 0;
  if ((v19 & 1) != 0)
    *(_WORD *)(v18 + 56) = 2;
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v21 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = sub_1BB5BAE54;
  *(_QWORD *)(v18 + 32) = v20;
  sub_1BA49EBE0(v21);
  return v17;
}

void sub_1BB5BA97C(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1BCCE5D40](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = (_QWORD *)(v5 + OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties);
    v8 = *(void **)(v5 + OBJC_IVAR____TtC8NewsFeed15FormatVideoView_playerProperties);
    if (!v8)
    {
LABEL_6:

      return;
    }
    v9 = v7[2];
    v18 = v7[1];
    v11 = v7[3];
    v10 = (void *)v7[4];
    v12 = v8;
    v13 = v10;
    v14 = objc_msgSend(v6, sel_layer);
    objc_opt_self();
    v15 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_player);

    if (v15)
    {
      v16 = objc_msgSend(v6, sel_layer);
      objc_opt_self();
      v17 = (void *)swift_dynamicCastObjCClassUnconditional();
      if (((v2 ^ 1 | v3) & 1) != 0)
      {
        objc_msgSend(v17, sel_pause);
        sub_1BA929E14(v8, v18, v9, v11, v10);

        goto LABEL_6;
      }
      objc_msgSend(v17, sel_playWithPlaybackKind_looping_, v9, v18 & 1);

      sub_1BA929E14(v8, v18, v9, v11, v10);
    }
    else
    {

      sub_1BA929E14(v8, v18, v9, v11, v10);
    }
  }
}

uint64_t sub_1BB5BAD3C()
{
  return type metadata accessor for FormatVideoView();
}

uint64_t sub_1BB5BAD44()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC8NewsFeed15FormatVideoView_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1BB5BAD80()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator);
  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v1 + 17);
  *(_BYTE *)(v1 + 17) = 1;
  if ((v2 & 0xFFFFFFC1) != 1)
    LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
}

void sub_1BB5BADDC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator);
  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v1 + 17);
  *(_BYTE *)(v1 + 17) = 0;
  if ((v2 & 0xFFFFFFC1) != 0)
    LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
}

uint64_t sub_1BB5BAE30()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BB5BAE54(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1BB5BA97C(a1, v1);
}

unint64_t sub_1BB5BAE5C()
{
  unint64_t result;

  result = qword_1ED39DA68;
  if (!qword_1ED39DA68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED39DA68);
  }
  return result;
}

uint64_t sub_1BB5BAE98(uint64_t a1)
{
  uint64_t v2;

  sub_1BA833A70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1BB5BAED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void (*v9)(char *, uint64_t);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v23;

  v0 = sub_1BB86C8B0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BB86C8E0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58BD0]), sel_init);
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  v10 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setArticleID_, v10);

  sub_1BB86E8D8();
  v11 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setTitle_, v11);

  sub_1BB86E8D8();
  v12 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setShortExcerpt_, v12);

  sub_1BB86E8D8();
  v13 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setSourceName_, v13);

  sub_1BB86E8B4();
  v14 = (void *)sub_1BB86C808();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v8, sel_setPublishDate_, v14);

  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v9(v7, v4);
  sub_1BB86E8D8();
  v15 = objc_allocWithZone(MEMORY[0x1E0D58F40]);
  v16 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v17 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v15, sel_initForTestingWithTagType_identifier_name_, 2, v16, v17);

  objc_msgSend(v8, sel_setSourceChannel_, v18);
  objc_msgSend(v8, sel_setHasThumbnail_, 1);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubAssetHandle()), sel_init);
  v20 = objc_msgSend((id)objc_opt_self(), sel_headlineThumbnailWithAssetHandle_thumbnailSize_, v19, 1000.0, 1000.0);

  objc_msgSend(v8, sel_setThumbnail_, v20);
  sub_1BB86E8D8();
  v21 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAccessoryText_, v21);

  return v8;
}

id sub_1BB5BB258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void (*v9)(char *, uint64_t);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v23;

  v0 = sub_1BB86C8B0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BB86C8E0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58BD0]), sel_init);
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  v10 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setArticleID_, v10);

  sub_1BB86E8D8();
  v11 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setTitle_, v11);

  sub_1BB86E8D8();
  v12 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setShortExcerpt_, v12);

  sub_1BB86E8D8();
  v13 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setSourceName_, v13);

  sub_1BB86E8B4();
  v14 = (void *)sub_1BB86C808();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v8, sel_setPublishDate_, v14);

  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v9(v7, v4);
  sub_1BB86E8D8();
  v15 = objc_allocWithZone(MEMORY[0x1E0D58F40]);
  v16 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v17 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v15, sel_initForTestingWithTagType_identifier_name_, 2, v16, v17);

  objc_msgSend(v8, sel_setSourceChannel_, v18);
  objc_msgSend(v8, sel_setHasThumbnail_, 1);
  v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubAssetHandle()), sel_init);
  v20 = objc_msgSend((id)objc_opt_self(), sel_headlineThumbnailWithAssetHandle_thumbnailSize_, v19, 1000.0, 1000.0);

  objc_msgSend(v8, sel_setThumbnail_, v20);
  sub_1BB86E8D8();
  v21 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAccessoryText_, v21);

  objc_msgSend(v8, sel_setHasThumbnail_, 0);
  objc_msgSend(v8, sel_setThumbnail_, 0);
  return v8;
}

id static Random.headline(modifier:)(void (*a1)(id *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void (*v11)(char *, uint64_t);
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[2];
  void (*v26)(id *);
  id v27;

  v25[1] = a2;
  v26 = a1;
  v2 = sub_1BB86C8B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86C8E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58BD0]), sel_init);
  v10 = v27;
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v11 = *(void (**)(char *, uint64_t))(v7 + 8);
  v11(v9, v6);
  v12 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setArticleID_, v12);

  sub_1BB86E8D8();
  v13 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setTitle_, v13);

  sub_1BB86E8D8();
  v14 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setShortExcerpt_, v14);

  sub_1BB86E8D8();
  v15 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setSourceName_, v15);

  sub_1BB86E8B4();
  v16 = (void *)sub_1BB86C808();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v10, sel_setPublishDate_, v16);

  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v11(v9, v6);
  sub_1BB86E8D8();
  v17 = objc_allocWithZone(MEMORY[0x1E0D58F40]);
  v18 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v19 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v17, sel_initForTestingWithTagType_identifier_name_, 2, v18, v19);

  objc_msgSend(v10, sel_setSourceChannel_, v20);
  objc_msgSend(v10, sel_setHasThumbnail_, 1);
  v21 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubAssetHandle()), sel_init);
  v22 = objc_msgSend((id)objc_opt_self(), sel_headlineThumbnailWithAssetHandle_thumbnailSize_, v21, 1000.0, 1000.0);

  objc_msgSend(v10, sel_setThumbnail_, v22);
  sub_1BB86E8D8();
  v23 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAccessoryText_, v23);

  v26(&v27);
  return v27;
}

void static Random.issue(with:isCurrent:publicationDate:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  void (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;

  v86 = a3;
  v87 = a1;
  sub_1BA76D78C();
  MEMORY[0x1E0C80A78](v6);
  v84 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BB86C8E0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v67 - v13;
  v15 = sub_1BB86C8B0();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = a2;
  swift_bridgeObjectRetain();
  v19 = sub_1BB86E8C0();
  v81 = v20;
  v82 = v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v85 = v18;
  v83 = a4;
  v75 = v21;
  v76 = v16;
  v21(v18, a4, v15);
  v22 = sub_1BB86E8C0();
  v79 = v23;
  v80 = v22;
  v78 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58980]), sel_init);
  v77 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubAssetHandle()), sel_init);
  sub_1BB86E8CC();
  v24 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v25 = (void *)objc_opt_self();
  v74 = objc_msgSend(v25, sel_colorWithHexString_, v24);

  sub_1BB86E8CC();
  v26 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v73 = objc_msgSend(v25, sel_colorWithHexString_, v26);

  sub_1BB86E8CC();
  v27 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v72 = objc_msgSend(v25, sel_colorWithHexString_, v27);

  sub_1BB86E8CC();
  v28 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v71 = objc_msgSend(v25, sel_colorWithHexString_, v28);

  sub_1BB86E8CC();
  v29 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v70 = objc_msgSend(v25, sel_colorWithHexString_, v29);

  sub_1BA6EA07C();
  v30 = swift_allocObject();
  v89 = xmmword_1BB87CE70;
  *(_OWORD *)(v30 + 16) = xmmword_1BB87CE70;
  sub_1BB86C8D4();
  v31 = sub_1BB86C8C8();
  v33 = v32;
  v34 = *(void (**)(char *, uint64_t))(v9 + 8);
  v34(v14, v8);
  *(_QWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 40) = v33;
  sub_1BB86C8D4();
  v69 = sub_1BB86C8C8();
  v68 = v35;
  v34(v11, v8);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v89;
  *(_QWORD *)(v36 + 32) = sub_1BB8729A0();
  *(_QWORD *)(v36 + 40) = v37;
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v89;
  sub_1BB86C8D4();
  v39 = sub_1BB86C8C8();
  v41 = v40;
  v34(v14, v8);
  *(_QWORD *)(v38 + 32) = v39;
  *(_QWORD *)(v38 + 40) = v41;
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v34(v14, v8);
  sub_1BB86E8C0();
  v42 = objc_allocWithZone((Class)_s9RandomTagCMa_0());
  swift_bridgeObjectRetain();
  v43 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v44 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v45 = objc_msgSend(v42, sel_initForTestingWithTagType_identifier_name_, 2, v43, v44);

  if (v45)
  {
    swift_bridgeObjectRelease();
    v46 = sub_1BB86E8D8();
    v48 = v47;
    v49 = sub_1BB86E8D8();
    v51 = v50;
    v52 = (uint64_t)v84;
    v75(v84, v83, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v52, 0, 1, v15);
    v53 = objc_allocWithZone(MEMORY[0x1E0D58C20]);
    v65 = v49;
    v66 = v51;
    v63 = v46;
    v64 = v48;
    v62 = v36;
    v61 = v30;
    v54 = v70;
    v55 = v71;
    v56 = v72;
    v57 = v73;
    v58 = v74;
    v59 = v77;
    v60 = v78;
    sub_1BB5BD094(0.75, 0.75, v87, v88, 0, v82, v81, (uint64_t)v85, v80, v79, (uint64_t)v78, (uint64_t)v77, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, (uint64_t)v71, 0, 0xE000000000000000, (uint64_t)v70,
      v86 & 1,
      0,
      0,
      v61,
      v69,
      v68,
      v62,
      MEMORY[0x1E0DEE9D8],
      v38,
      (uint64_t)v45,
      v63,
      v64,
      v65,
      v66,
      v52,
      v53);

  }
  else
  {
    __break(1u);
  }
}

id static Random.headline(identifier:)(uint64_t a1, uint64_t a2)
{
  id v4;

  swift_bridgeObjectRetain();
  v4 = sub_1BB5BD440(a1, a2);
  swift_bridgeObjectRelease();
  return v4;
}

id static Random.scoredHeadline(scoreProfile:modifier:)@<X0>(void *a1@<X0>, void (*a2)(id *)@<X1>, uint64_t a3@<X2>, id *a4@<X8>)
{
  *a4 = static Random.headline(modifier:)(a2, a3);
  a4[1] = a1;
  return a1;
}

void static Random.channel(with:)()
{
  id v0;
  void *v1;
  void *v2;
  id v3;

  sub_1BB86E8C0();
  v0 = objc_allocWithZone((Class)_s9RandomTagCMa_0());
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v2 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_initForTestingWithTagType_identifier_name_, 2, v1, v2);

  if (!v3)
    __break(1u);
}

unint64_t static Random.tagType()()
{
  unint64_t result;

  result = sub_1BB5BD00C(5uLL);
  if (result <= 4)
    return qword_1E7271010[result + 4];
  __break(1u);
  return result;
}

void static Random.tag(with:tagType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  sub_1BB86E8C0();
  v4 = objc_allocWithZone((Class)_s9RandomTagCMa());
  swift_bridgeObjectRetain();
  v5 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v6 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_initForTestingWithTagType_identifier_name_, a3, v5, v6);

  if (!v7)
    __break(1u);
}

id static Random.fcColor()()
{
  return sub_1BB5BC1A0((Class *)0x1E0D58A48);
}

id static Random.color()()
{
  return sub_1BB5BC1A0((Class *)0x1E0DC3658);
}

id sub_1BB5BC1A0(Class *a1)
{
  double v2;
  double v3;
  double v4;

  v2 = (double)sub_1BB5BD00C(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  v3 = (double)sub_1BB5BD00C(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  v4 = (double)sub_1BB5BD00C(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  return objc_msgSend(objc_allocWithZone(*a1), sel_initWithRed_green_blue_alpha_, v2, v3, v4, (double)sub_1BB5BD00C(0x20000000000001uLL) * 1.11022302e-16 + 0.0);
}

id sub_1BB5BC2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), SEL *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a4)
  {
    v11 = 0;
    v13 = 0;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    v16 = 0;
    return sub_1BB5BCD08(a3, v11, v13, v14, v16, a6, a7);
  }
  v11 = sub_1BB8729A0();
  v13 = v12;
  if (!a5)
    goto LABEL_5;
LABEL_3:
  v14 = sub_1BB8729A0();
  v16 = v15;
  return sub_1BB5BCD08(a3, v11, v13, v14, v16, a6, a7);
}

id sub_1BB5BC388()
{
  return sub_1BAABB8AC((uint64_t (*)(_QWORD))_s9RandomTagCMa);
}

id sub_1BB5BC48C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  objc_super v10;

  v10.receiver = a1;
  v10.super_class = (Class)a6(0);
  return objc_msgSendSuper2(&v10, sel_initWithTagRecord_assetManager_interestToken_, a3, a4, a5);
}

id sub_1BB5BC500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD))
{
  void *v8;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  objc_super v18;

  if (a3)
  {
    v13 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    if (a5)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    if (a7)
      goto LABEL_4;
    goto LABEL_7;
  }
  v13 = 0;
  if (!a5)
    goto LABEL_6;
LABEL_3:
  v14 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  if (a7)
  {
LABEL_4:
    v15 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  v18.receiver = v8;
  v18.super_class = (Class)a8(0);
  v16 = objc_msgSendSuper2(&v18, sel_initForTestingWithTagType_identifier_name_umcCanonicalID_, a1, v13, v14, v15);

  if (v16)
  return v16;
}

id sub_1BB5BC624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a5;
  if (a4)
  {
    v11 = sub_1BB8729A0();
    v13 = v12;
    if (v9)
      goto LABEL_3;
LABEL_6:
    v15 = 0;
    if (a6)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    v18 = 0;
    return sub_1BB5BC500(a3, v11, v13, v9, v15, v16, v18, a7);
  }
  v11 = 0;
  v13 = 0;
  if (!a5)
    goto LABEL_6;
LABEL_3:
  v9 = sub_1BB8729A0();
  v15 = v14;
  if (!a6)
    goto LABEL_7;
LABEL_4:
  v16 = sub_1BB8729A0();
  v18 = v17;
  return sub_1BB5BC500(a3, v11, v13, v9, v15, v16, v18, a7);
}

id sub_1BB5BC6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(_QWORD))
{
  void *v11;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(_QWORD);
  void *v21;
  id v22;
  objc_super v24;

  if (a2)
  {
    v15 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
  }
  else
  {
    v15 = 0;
    if (a4)
    {
LABEL_3:
      v16 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      if (a6)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v16 = 0;
  if (a6)
  {
LABEL_4:
    v17 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    v18 = a10;
    if (a8)
      goto LABEL_5;
LABEL_10:
    v19 = 0;
    v20 = a11;
    if (v18)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  v17 = 0;
  v18 = a10;
  if (!a8)
    goto LABEL_10;
LABEL_5:
  v19 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v20 = a11;
  if (v18)
  {
LABEL_6:
    v21 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_11:
  v21 = 0;
LABEL_12:
  v24.receiver = v11;
  v24.super_class = (Class)v20(0);
  v22 = objc_msgSendSuper2(&v24, sel_initChannelForTestingWithIdentifier_name_defaultSection_publisherAuthorizationURL_publisherVerificationURL_, v15, v16, v17, v19, v21);

  if (v22)
  return v22;
}

id sub_1BB5BC860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v11 = a4;
  if (a3)
  {
    v27 = sub_1BB8729A0();
    v13 = v12;
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v27 = 0;
    v13 = 0;
    if (a4)
    {
LABEL_3:
      v11 = sub_1BB8729A0();
      v15 = v14;
      if (a5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v15 = 0;
  if (a5)
  {
LABEL_4:
    v16 = sub_1BB8729A0();
    v18 = v17;
    if (a6)
      goto LABEL_5;
LABEL_10:
    v20 = 0;
    v21 = a7;
    if (v21)
      goto LABEL_6;
LABEL_11:
    v23 = 0;
    v25 = 0;
    return sub_1BB5BC6E0(v27, v13, v11, v15, v16, v18, a6, v20, v23, v25, a8);
  }
LABEL_9:
  v16 = 0;
  v18 = 0;
  if (!a6)
    goto LABEL_10;
LABEL_5:
  a6 = sub_1BB8729A0();
  v20 = v19;
  v21 = a7;
  if (!v21)
    goto LABEL_11;
LABEL_6:
  v22 = v21;
  v23 = sub_1BB8729A0();
  v25 = v24;

  return sub_1BB5BC6E0(v27, v13, v11, v15, v16, v18, a6, v20, v23, v25, a8);
}

id sub_1BB5BC98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  void *v6;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    v11 = 0;
    if (a5)
      goto LABEL_4;
    goto LABEL_7;
  }
  v10 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v11 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  if (a5)
  {
LABEL_4:
    v12 = (void *)sub_1BB872D9C();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  v12 = 0;
LABEL_8:
  v15.receiver = v6;
  v15.super_class = (Class)a6(0);
  v13 = objc_msgSendSuper2(&v15, sel_initChannelForTestingWithIdentifier_name_publisherPaidBundlePurchaseIDs_, v10, v11, v12);

  if (v13)
  return v13;
}

id sub_1BB5BCA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a4;
  if (a3)
  {
    v9 = sub_1BB8729A0();
    v11 = v10;
    if (v8)
      goto LABEL_3;
LABEL_6:
    v13 = 0;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v14 = 0;
    return sub_1BB5BC98C(v9, v11, v8, v13, v14, a6);
  }
  v9 = 0;
  v11 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v8 = sub_1BB8729A0();
  v13 = v12;
  if (!a5)
    goto LABEL_7;
LABEL_4:
  v14 = sub_1BB872DB4();
  return sub_1BB5BC98C(v9, v11, v8, v13, v14, a6);
}

id sub_1BB5BCB54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  void *v4;
  void *v9;
  id v10;
  id v11;
  objc_super v13;

  if (a2 >> 60 == 15)
    v9 = 0;
  else
    v9 = (void *)sub_1BB86C6DC();
  v13.receiver = v4;
  v13.super_class = (Class)a4(0);
  v10 = objc_msgSendSuper2(&v13, sel_initWithData_context_, v9, a3);
  swift_unknownObjectRelease();
  sub_1BA69D490(a1, a2);
  v11 = v10;

  if (v11)
  return v11;
}

id sub_1BB5BCC18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;

  v7 = a3;
  if (a3)
  {
    swift_unknownObjectRetain();
    v8 = v7;
    v7 = (void *)sub_1BB86C6E8();
    v10 = v9;

  }
  else
  {
    swift_unknownObjectRetain();
    v10 = 0xF000000000000000;
  }
  return sub_1BB5BCB54((uint64_t)v7, v10, a4, a5);
}

id sub_1BB5BCCA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  objc_super v10;

  v10.receiver = a1;
  v10.super_class = (Class)a6(0);
  return objc_msgSendSuper2(&v10, sel_initWithTagMetadata_assetManager_isSports_, a3, a4, a5);
}

id sub_1BB5BCD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), SEL *a7)
{
  void *v7;
  void *v12;
  void *v13;
  id v14;
  objc_super v16;

  if (a3)
  {
    v12 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    if (a5)
    {
LABEL_3:
      v13 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    v12 = 0;
    if (a5)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  v16.receiver = v7;
  v16.super_class = (Class)a6(0);
  v14 = objc_msgSendSuper2(&v16, *a7, a1, v12, v13);

  if (v14)
  return v14;
}

id sub_1BB5BCDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t (*a7)(_QWORD))
{
  void *v7;
  void *v12;
  void *v13;
  id v14;
  id v15;
  objc_super v17;

  if (a2)
  {
    v12 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    if (a4)
    {
LABEL_3:
      v13 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    v12 = 0;
    if (a4)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  v17.receiver = v7;
  v17.super_class = (Class)a7(0);
  v14 = objc_msgSendSuper2(&v17, sel_initChannelFromNotificationWithIdentifier_name_nameImageAssetHandle_nameImageMaskAssetHandle_, v12, v13, a5, a6);

  v15 = v14;
  if (v15)

  return v15;
}

id sub_1BB5BCEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;

  v10 = a4;
  if (!a3)
  {
    v11 = 0;
    v13 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v11 = sub_1BB8729A0();
  v13 = v12;
  if (!v10)
    goto LABEL_5;
LABEL_3:
  v10 = sub_1BB8729A0();
  v15 = v14;
LABEL_6:
  v16 = a5;
  v17 = a6;
  return sub_1BB5BCDF8(v11, v13, v10, v15, a5, a6, a7);
}

id sub_1BB5BCFA0(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3(0);
  return objc_msgSendSuper2(&v4, sel_init);
}

id sub_1BB5BCFE0()
{
  return sub_1BAABB8AC((uint64_t (*)(_QWORD))_s9RandomTagCMa_0);
}

uint64_t _s9RandomTagCMa_0()
{
  return objc_opt_self();
}

unint64_t sub_1BB5BD00C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x1BCCE5C50](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x1BCCE5C50](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1BB5BD094(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v55;
  uint64_t v56;
  uint64_t v57;

  v53 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v52 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v51 = (void *)sub_1BB86C808();
  v50 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v48 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v49 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v47 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  if (a26)
  {
    v38 = (void *)sub_1BB872D9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = 0;
  }
  if (a27)
  {
    v46 = (void *)sub_1BB872D9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = 0;
  }
  v39 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v40 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v41 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v42 = sub_1BB86C8B0();
  v56 = *(_QWORD *)(v42 - 8);
  v57 = v42;
  v43 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v56 + 48))(a34, 1) != 1)
  {
    v43 = (void *)sub_1BB86C808();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(a34, v57);
  }
  BYTE2(v45) = a21 & 1;
  LOWORD(v45) = a20 & 0x101;
  v55 = objc_msgSend(a35, sel_initWithIdentifier_type_title_publicationDate_coverDate_metadataJSONAssetHandle_coverImageAssetHandle_coverImageAspectRatio_coverImagePrimaryColor_coverImageBackgroundColor_coverImageTextColor_coverImageAccentColor_layeredCoverJSON_layeredCoverAspectRatio_layeredCoverPrimaryColor_isCurrent_isDraft_isPaid_minimumNewsVersion_allArticleIDs_coverArticleID_allowedStorefrontIDs_blockedStorefrontIDs_topicTagIDs_sourceChannel_notificationDescription_issueDescription_sortDate_, v53, a5, v52, v51, v50, a11, a1, a2, a12, a13, a14, a15, a16, v48, a19, v45, a22,
          v49,
          v47,
          v38,
          v46,
          v39,
          a29,
          v40,
          v41,
          v43);

  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(a8, v57);
  return v55;
}

id sub_1BB5BD440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void (*v12)(char *, uint64_t);
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v2 = sub_1BB86C8B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86C8E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_allocWithZone(MEMORY[0x1E0D58BD0]);
  v11 = objc_msgSend(v10, sel_init, v27, v28);
  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  v12(v9, v6);
  v13 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setArticleID_, v13);

  sub_1BB86E8D8();
  v14 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setTitle_, v14);

  sub_1BB86E8D8();
  v15 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setShortExcerpt_, v15);

  sub_1BB86E8D8();
  v16 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setSourceName_, v16);

  sub_1BB86E8B4();
  v17 = (void *)sub_1BB86C808();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v11, sel_setPublishDate_, v17);

  sub_1BB86C8D4();
  sub_1BB86C8C8();
  v12(v9, v6);
  sub_1BB86E8D8();
  v18 = objc_allocWithZone(MEMORY[0x1E0D58F40]);
  v19 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v20 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_initForTestingWithTagType_identifier_name_, 2, v19, v20);

  objc_msgSend(v11, sel_setSourceChannel_, v21);
  objc_msgSend(v11, sel_setHasThumbnail_, 1);
  v22 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StubAssetHandle()), sel_init);
  v23 = objc_msgSend((id)objc_opt_self(), sel_headlineThumbnailWithAssetHandle_thumbnailSize_, v22, 1000.0, 1000.0);

  objc_msgSend(v11, sel_setThumbnail_, v23);
  sub_1BB86E8D8();
  v24 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setAccessoryText_, v24);

  v25 = (void *)sub_1BB872970();
  objc_msgSend(v11, sel_setArticleID_, v25);

  return v11;
}

uint64_t _s9RandomTagCMa()
{
  return objc_opt_self();
}

uint64_t sub_1BB5BD810(uint64_t a1)
{
  return sub_1BA517790(a1, 0x6F4374616D726F46, 0xEE0072656C69706DLL, &qword_1EF3D0920);
}

uint64_t sub_1BB5BD83C(uint64_t a1)
{
  return sub_1BA517790(a1, 0x656E696C64616548, 0xEF65636976726553, &qword_1ED476CE8);
}

uint64_t sub_1BB5BD868(uint64_t a1)
{
  return sub_1BA517790(a1, 0x676E6970756F7247, 0xE800000000000000, &qword_1ED476490);
}

uint64_t sub_1BB5BD888(uint64_t a1)
{
  return sub_1BA517790(a1, 0x4D6465726579614CLL, 0xEC00000061696465, &qword_1ED4763D0);
}

uint64_t sub_1BB5BD8B0(uint64_t a1)
{
  return sub_1BA517790(a1, 0x6F74636570736E49, 0xE900000000000072, &qword_1EF3D0928);
}

uint64_t sub_1BB5BD8D4(uint64_t a1)
{
  return sub_1BA517790(a1, 0x7374726F7053, 0xE600000000000000, &qword_1ED476750);
}

uint64_t sub_1BB5BD8F0(uint64_t a1)
{
  return sub_1BA517790(a1, 0xD000000000000011, 0x80000001BB991F00, &qword_1ED476638);
}

uint64_t sub_1BB5BD914(uint64_t a1)
{
  return sub_1BA4D9414(a1, qword_1ED3A3BB8);
}

uint64_t static Logger.sports.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED3A3BD0 != -1)
    swift_once();
  v2 = sub_1BB86EFEC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED3A3BB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1BB5BD9A0(uint64_t a1)
{
  return sub_1BA4D9414(a1, qword_1EF3D0930);
}

uint64_t sub_1BB5BD9C0()
{
  uint64_t v0;
  id v1;

  v0 = sub_1BB86EFEC();
  __swift_allocate_value_buffer(v0, qword_1EF3D0948);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF3D0948);
  if (qword_1EF2A7358 != -1)
    swift_once();
  v1 = (id)qword_1EF3D0920;
  return sub_1BB86EFF8();
}

uint64_t sub_1BB5BDA40(uint64_t a1)
{
  return sub_1BA4D9414(a1, qword_1EF3D0960);
}

uint64_t sub_1BB5BDA68(uint64_t a1)
{
  return sub_1BA4D9414(a1, qword_1ED4764A8);
}

uint64_t sub_1BB5BDA88(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(unint64_t, _QWORD, uint64_t);
  char v17;
  char v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a1;
  v3 = sub_1BB86CAD8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1BB86C0E8();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *a2;
  if (qword_1ED3AAB50 != -1)
    swift_once();
  v9 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED3AAB38);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
  sub_1BA6DC310(0, (unint64_t *)&qword_1ED3B9C60, (void (*)(uint64_t))MEMORY[0x1E0CB11B8]);
  v10 = sub_1BB86CAC0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BB87FC80;
  v15 = v14 + v13;
  v16 = *(void (**)(unint64_t, _QWORD, uint64_t))(v11 + 104);
  v16(v15, *MEMORY[0x1E0CB1140], v10);
  v16(v15 + v12, *MEMORY[0x1E0CB1178], v10);
  v16(v15 + 2 * v12, *MEMORY[0x1E0CB1188], v10);
  sub_1BA861CB8(v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BB86CA3C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1BB86C0C4();
  if ((v17 & 1) == 0)
  {
    sub_1BB86C0B8();
    if ((v18 & 1) == 0)
    {
      sub_1BB86C094();
      if ((v19 & 1) == 0)
        __asm { BR              X9 }
    }
  }
  if (qword_1ED3BA7F8 != -1)
    swift_once();
  v20 = (id)qword_1ED476860;
  v21 = sub_1BB8732F4();
  sub_1BA6DC310(0, (unint64_t *)&qword_1ED3D4470, (void (*)(uint64_t))sub_1BA81BA70);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1BB87CE70;
  sub_1BB5BDE90();
  v23 = v32;
  v24 = sub_1BB87420C();
  v26 = v25;
  *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v22 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  sub_1BB86EF44("Failed to get expected date components for time of day selectors %{public}@", 75, 2, &dword_1BA493000, v20, v21, v22);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v23);
  return 0;
}

unint64_t sub_1BB5BDE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C8248;
  if (!qword_1EF2C8248)
  {
    v1 = sub_1BB86C0E8();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0CAEAF0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C8248);
  }
  return result;
}

uint64_t FormatShineOptions.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatShineOptions.color.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

void FormatShineOptions.sizer.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

double FormatShineOptions.rotateRadians.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

__n128 FormatShineOptions.motion.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_BYTE *)(v1 + 80);
  result = *(__n128 *)(v1 + 40);
  v5 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

uint64_t FormatShineOptions.blends.getter()
{
  return swift_bridgeObjectRetain();
}

double FormatShineOptions.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

uint64_t sub_1BB5BDF5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FormatShineOptions.init(from:)(a1, a2);
}

uint64_t sub_1BB5BDF70(_QWORD *a1)
{
  return FormatShineOptions.encode(to:)(a1);
}

uint64_t _s8NewsFeed18FormatShineOptionsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  double v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  int v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28[2];
  uint64_t v29;
  char v30;
  __n128 v31[2];
  uint64_t v32;
  char v33;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v26 = *(__n128 *)(a1 + 56);
  v27 = *(__n128 *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_BYTE *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(double *)(a1 + 96);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 24);
  v11 = *(double *)(a2 + 32);
  v24 = *(__n128 *)(a2 + 56);
  v25 = *(__n128 *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(double *)(a2 + 96);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v16 = sub_1BB874398(), result = 0, (v16 & 1) != 0))
  {
    v31[0].n128_u64[0] = v2;
    v28[0].n128_u64[0] = v9;
    static FormatColor.== infix(_:_:)((uint64_t)v31);
    if ((v18 & 1) == 0)
      return 0;
    if (v3)
      v19 = 0x7473756A64616E75;
    else
      v19 = 1702521203;
    if (v3)
      v20 = 0xEA00000000006465;
    else
      v20 = 0xE400000000000000;
    if (v10)
      v21 = 0x7473756A64616E75;
    else
      v21 = 1702521203;
    if (v10)
      v22 = 0xEA00000000006465;
    else
      v22 = 0xE400000000000000;
    if (v19 == v21 && v20 == v22)
    {
      swift_bridgeObjectRelease_n();
      if (v4 != v11)
        return 0;
LABEL_23:
      v31[0] = v27;
      v31[1] = v26;
      v32 = v5;
      v33 = v6;
      v28[0] = v25;
      v28[1] = v24;
      v29 = v12;
      v30 = v13;
      if ((_s8NewsFeed12FormatMotionO2eeoiySbAC_ACtFZ_0(v31, v28) & 1) != 0)
        return sub_1BA88D048(v7, v14) & (v8 == v15);
      return 0;
    }
    v23 = sub_1BB874398();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v23 & 1) != 0 && v4 == v11)
      goto LABEL_23;
  }
  return result;
}

unint64_t sub_1BB5BE164(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5BE188();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5BE188()
{
  unint64_t result;

  result = qword_1EF2C8250;
  if (!qword_1EF2C8250)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShineOptions, &type metadata for FormatShineOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2C8250);
  }
  return result;
}

unint64_t sub_1BB5BE1CC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BB5BE200();
  a1[2] = sub_1BB5BE244();
  result = sub_1BB5BE288();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5BE200()
{
  unint64_t result;

  result = qword_1EF2C8258;
  if (!qword_1EF2C8258)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShineOptions, &type metadata for FormatShineOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2C8258);
  }
  return result;
}

unint64_t sub_1BB5BE244()
{
  unint64_t result;

  result = qword_1EF2C8260;
  if (!qword_1EF2C8260)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShineOptions, &type metadata for FormatShineOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2C8260);
  }
  return result;
}

unint64_t sub_1BB5BE288()
{
  unint64_t result;

  result = qword_1EF2C8268;
  if (!qword_1EF2C8268)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatShineOptions, &type metadata for FormatShineOptions);
    atomic_store(result, (unint64_t *)&qword_1EF2C8268);
  }
  return result;
}

uint64_t destroy for FormatShineOptions()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FormatShineOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FormatShineOptions(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for FormatShineOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for FormatShineOptions()
{
  return &type metadata for FormatShineOptions;
}

NewsFeed::FormatLocalizationCollection __swiftcall FormatLocalizationCollection.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NewsFeed::FormatLocalizationCollection result;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = (void *)sub_1BA5BC3C0(MEMORY[0x1E0DEE9D8]);
  *v1 = v2;
  v1[1] = v3;
  result.stringsByIdentifier._rawValue = v4;
  result.localizations._rawValue = v3;
  return result;
}

uint64_t FormatLocalizationCollection.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB8746B0();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_1BA6010C8();
  sub_1BA60113C(&qword_1ED39BE20, &qword_1ED39B130, (uint64_t)&protocol conformance descriptor for FormatObject<A>, MEMORY[0x1E0DEAF10]);
  sub_1BB874404();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

BOOL FormatLocalizationCollection.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

unint64_t sub_1BB5BE5DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t result;

  v2 = MEMORY[0x1E0DEE9D8];
  result = sub_1BA5BC3C0(MEMORY[0x1E0DEE9D8]);
  *a1 = v2;
  a1[1] = result;
  return result;
}

ValueMetadata *type metadata accessor for FormatLocalizationCollection()
{
  return &type metadata for FormatLocalizationCollection;
}

void sub_1BB5BE61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_23;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_23;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
    v13 = *(id *)(*(_QWORD *)(v1 + 56) + 8 * v9);
    if (objc_msgSend(v13, sel_isValid))
      objc_msgSend(v13, sel_invalidate);

  }
  v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_23:
    swift_release();
    swift_beginAccess();
    v14 = swift_bridgeObjectRetain();
    v15 = sub_1BA4A07E0(v14);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = v15;
    swift_bridgeObjectRelease();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

void FormatTimer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_23;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_23;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
    v13 = *(id *)(*(_QWORD *)(v1 + 56) + 8 * v9);
    if ((objc_msgSend(v13, sel_isValid) & 1) != 0)
      objc_msgSend(v13, sel_invalidate);

  }
  v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_23:
    swift_release();
    *(_QWORD *)(v0 + 16) = sub_1BA8F5480(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t FormatTimer.__deallocating_deinit()
{
  FormatTimer.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5BE9C4(double a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  if (!*(_QWORD *)(v4 + 16))
    return swift_endAccess();
  v5 = sub_1BA67BEE0(a1);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  v16 = MEMORY[0x1E0DEE9D8];
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BA67BFAC(v13, isUniquelyReferenced_nonNull_native, a1);
    *v3 = v15;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  result = sub_1BB873F30();
  v8 = result;
  if (!result)
    goto LABEL_16;
LABEL_5:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x1BCCE4630](i, v7);
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 8 * i + 32);
        swift_retain();
      }
      v12 = (void *)MEMORY[0x1BCCE5D40](v11 + 16);

      if (v12)
      {
        (*(void (**)(void))(v11 + 24))();
        sub_1BB873DB0();
        sub_1BB873DE0();
        sub_1BB873DEC();
        sub_1BB873DBC();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v13 = v16;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BB5BEBB4(double a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1BB5BE9C4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BB5BEC18()
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for FormatTimer()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BB5BEC50()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BB5BEC74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5BEC98()
{
  uint64_t v0;

  return sub_1BB5BEBB4(*(double *)(v0 + 24));
}

BOOL static FormatBindingShareAttributionExpressionLogic.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FormatBindingShareAttributionExpressionLogic.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatBindingShareAttributionExpressionLogic.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BB5BED4C()
{
  unint64_t result;

  result = qword_1EF2C8270;
  if (!qword_1EF2C8270)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingShareAttributionExpressionLogic, &type metadata for FormatBindingShareAttributionExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1EF2C8270);
  }
  return result;
}

unint64_t sub_1BB5BED90(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5BEDB4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5BEDB4()
{
  unint64_t result;

  result = qword_1EF2C8278;
  if (!qword_1EF2C8278)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingShareAttributionExpressionLogic, &type metadata for FormatBindingShareAttributionExpressionLogic);
    atomic_store(result, (unint64_t *)&qword_1EF2C8278);
  }
  return result;
}

unint64_t sub_1BB5BEDF8(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA946C00();
  a1[2] = sub_1BA946C48();
  result = sub_1BB5BED4C();
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5BEE2C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatBindingShareAttributionExpressionLogic.init(from:)(a1, a2);
}

uint64_t sub_1BB5BEE40(_QWORD *a1)
{
  return FormatBindingShareAttributionExpressionLogic.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for FormatBindingShareAttributionExpressionLogic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5BEEA0 + 4 * byte_1BB92D655[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5BEED4 + 4 * asc_1BB92D650[v4]))();
}

uint64_t sub_1BB5BEED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5BEEDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5BEEE4);
  return result;
}

uint64_t sub_1BB5BEEF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5BEEF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5BEEFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5BEF04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatBindingShareAttributionExpressionLogic()
{
  return &type metadata for FormatBindingShareAttributionExpressionLogic;
}

uint64_t FormatSlotItemCountLimit.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t *)((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4C2DD8(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
      return 1953459315;
    }
    else
    {
      return 0x73626F6E6BLL;
    }
  }
  else
  {
    v7 = *v3;
    v8 = v3[1];
    v14 = 0x2D746E756F63;
    v15 = 0xE600000000000000;
    v13 = v7;
    sub_1BB87420C();
    sub_1BB872AFC(v9);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v10);
    v13 = v8;
    sub_1BB87420C();
    sub_1BB872AFC(v11);
    swift_bridgeObjectRelease();
    return v14;
  }
}

uint64_t sub_1BB5BF074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  BOOL v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[15];

  v2 = v1;
  v4 = type metadata accessor for FormatSlotDefinitionItemSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (int *)((char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v2, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return *(_QWORD *)v13;
  if (EnumCaseMultiPayload != 1)
  {
    sub_1BA4C2DD8(a1, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BA82C5B0);
    if (v28[0])
    {
      v26 = FormatTransformKnobs.minNumberOfItems.getter();
      sub_1BAFD9668((uint64_t)v28);
    }
    else
    {
      sub_1BA4A2E80((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BA82C5B0);
      return 0;
    }
    return v26;
  }
  sub_1BA5193C4((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
  v16 = *((_QWORD *)v10 + 6);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    v26 = 0;
LABEL_19:
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
    return v26;
  }
  v27 = v10;
  v18 = v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v19 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 0;
  v22 = v17 - 1;
  do
  {
    sub_1BA4C2DD8(v18, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
    v23 = *v7;
    result = sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
    if (v21 == 0x7FFFFFFF || v23 == 0x7FFFFFFF)
    {
      if (v22 == v20)
      {
        swift_bridgeObjectRelease();
        v26 = 0x7FFFFFFFLL;
        goto LABEL_17;
      }
      v21 = 0x7FFFFFFF;
    }
    else
    {
      v25 = __OFADD__(v21, v23);
      v21 += v23;
      if (v25)
        goto LABEL_23;
      if (v22 == v20)
      {
        swift_bridgeObjectRelease();
        v26 = v21;
LABEL_17:
        v10 = v27;
        goto LABEL_19;
      }
    }
    ++v20;
    v18 += v19;
  }
  while (v20 < *(_QWORD *)(v16 + 16));
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1BB5BF2E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  BOOL v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[15];

  v2 = v1;
  v4 = type metadata accessor for FormatSlotDefinitionItemSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v2, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return *((_QWORD *)v13 + 1);
  if (EnumCaseMultiPayload != 1)
  {
    sub_1BA4C2DD8(a1, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BA82C5B0);
    if (v28[0])
    {
      v26 = FormatTransformKnobs.maxNumberOfItems.getter();
      sub_1BAFD9668((uint64_t)v28);
    }
    else
    {
      sub_1BA4A2E80((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BA82C5B0);
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    return v26;
  }
  sub_1BA5193C4((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
  v16 = *((_QWORD *)v10 + 6);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    v26 = 0;
LABEL_19:
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
    return v26;
  }
  v27 = v10;
  v18 = v16 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v19 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 0;
  v22 = v17 - 1;
  do
  {
    sub_1BA4C2DD8(v18, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
    v23 = *((_DWORD *)v7 + 1);
    result = sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
    if (v21 == 0x7FFFFFFF || v23 == 0x7FFFFFFF)
    {
      if (v22 == v20)
      {
        swift_bridgeObjectRelease();
        v26 = 0x7FFFFFFFLL;
        goto LABEL_17;
      }
      v21 = 0x7FFFFFFF;
    }
    else
    {
      v25 = __OFADD__(v21, v23);
      v21 += v23;
      if (v25)
        goto LABEL_23;
      if (v22 == v20)
      {
        swift_bridgeObjectRelease();
        v26 = v21;
LABEL_17:
        v10 = v27;
        goto LABEL_19;
      }
    }
    ++v20;
    v18 += v19;
  }
  while (v20 < *(_QWORD *)(v16 + 16));
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t FormatSlotItemCountLimit.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;

  v1 = v0;
  v2 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v5);
  v7 = (__int128 *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA4C2DD8(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BA5193C4((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
      *(_QWORD *)&v13 = 0x20746F6C73;
      *((_QWORD *)&v13 + 1) = 0xE500000000000000;
      swift_bridgeObjectRetain();
      sub_1BB872AFC(v10);
      swift_bridgeObjectRelease();
      v11 = v13;
      sub_1BA4A2E80((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
    }
    else
    {
      return 0x73626F6E6BLL;
    }
  }
  else
  {
    v13 = *v7;
    return FormatCountLimit.description.getter();
  }
  return v11;
}

uint64_t sub_1BB5BF6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;

  v3 = v2;
  v6 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  MEMORY[0x1E0C80A78](v6);
  v83 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FormatContentSlotItemResolution();
  v81 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FormatSlotDefinitionItemSet();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v80 = (uint64_t)&v69 - v16;
  MEMORY[0x1E0C80A78](v17);
  v79 = (uint64_t)&v69 - v18;
  MEMORY[0x1E0C80A78](v19);
  v84 = (char *)&v69 - v20;
  v21 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v21);
  v82 = (uint64_t)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1BB5BF074(a2);
  v27 = a1;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28 >= v26)
  {
    sub_1BA4C2DD8(v3, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
    {
      v70 = v28;
      v32 = v82;
      sub_1BA5193C4((uint64_t)v25, v82, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
      v33 = v12;
      v34 = *(_QWORD *)(v32 + 48);
      v35 = *(unsigned __int8 *)(v33 + 80);
      v36 = *(_QWORD *)(v34 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v76 = v36;
      if (v36)
      {
        v37 = 0;
        v38 = v34 + ((v35 + 32) & ~v35);
        v39 = *(_QWORD *)(v33 + 72);
        v40 = v27;
        v41 = (int *)v84;
        v42 = v81;
        v73 = v38;
        v74 = v34;
        v72 = v39;
        while (1)
        {
          v78 = v37;
          v43 = v38 + v39 * v37;
          v44 = v80;
          sub_1BA4C2DD8(v43, v80, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
          v45 = v44;
          v46 = v79;
          sub_1BA5193C4(v45, v79, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
          result = sub_1BA5193C4(v46, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
          v47 = *(_QWORD *)(v40 + 16);
          v48 = *v41;
          if (v47 < v48)
            break;
          if ((v48 & 0x80000000) != 0)
            goto LABEL_34;
          v49 = *v41;
          v50 = v40 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
          v77 = v49;
          if ((_DWORD)v48)
          {
            v75 = v40;
            result = swift_bridgeObjectRetain_n();
            v51 = v50;
            v52 = *(_QWORD *)(v42 + 72);
            v71 = v51;
            v53 = v51;
            v54 = v49;
            while (v54)
            {
              sub_1BA4C2DD8(v53, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
              v55 = v83;
              sub_1BA4C2DD8((uint64_t)v10, v83, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
              sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
              FormatContentSlotItemObject.Resolved.kinds.getter();
              v57 = v56;
              sub_1BA4A2E80(v55, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
              v58 = *(_QWORD *)(v57 + 16);
              sub_1BA4C2DD8((uint64_t)v41, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              if (!v58)
              {
                swift_bridgeObjectRelease();
                sub_1BA4A2E80((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
LABEL_30:
                type metadata accessor for FormatServiceError();
                sub_1BA4A2870(&qword_1ED39FD80, (uint64_t (*)(uint64_t))type metadata accessor for FormatServiceError, (uint64_t)&protocol conformance descriptor for FormatServiceError);
                swift_allocError();
                *v66 = *((_QWORD *)v41 + 1);
                v66[1] = v57;
                swift_storeEnumTagMultiPayload();
                swift_bridgeObjectRetain();
                swift_willThrow();
                swift_bridgeObjectRelease_n();
                sub_1BA4A2E80((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
                goto LABEL_31;
              }
              v59 = *((_QWORD *)v14 + 1);
              swift_bridgeObjectRetain();
              v60 = sub_1BAF029DC(v57, v59);
              swift_bridgeObjectRelease();
              sub_1BA4A2E80((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              if ((v60 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v41 = (int *)v84;
                goto LABEL_30;
              }
              result = swift_bridgeObjectRelease();
              v53 += v52;
              --v54;
              v41 = (int *)v84;
              if (!v54)
              {
                v40 = v75;
                result = swift_bridgeObjectRelease();
                v61 = *(_QWORD *)(v40 + 16);
                v62 = v61;
                v47 = v61;
                v50 = v71;
                if (v61 >= v77)
                  goto LABEL_17;
                goto LABEL_18;
              }
            }
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            return result;
          }
          result = swift_bridgeObjectRetain();
          v61 = 0;
          v62 = 0;
          if (v47)
            goto LABEL_18;
LABEL_17:
          v62 = v77;
          v47 = v61;
          if (v61 < v77)
            goto LABEL_35;
LABEL_18:
          sub_1BB874434();
          swift_unknownObjectRetain_n();
          v63 = swift_dynamicCastClass();
          if (!v63)
          {
            swift_bridgeObjectRelease();
            v63 = MEMORY[0x1E0DEE9D8];
          }
          v64 = *(_QWORD *)(v63 + 16);
          swift_release();
          if (v64 == v47 - v62)
          {
            v65 = swift_dynamicCastClass();
            v41 = (int *)v84;
            if (!v65)
            {
              swift_bridgeObjectRelease();
              v65 = MEMORY[0x1E0DEE9D8];
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            v65 = sub_1BA85DB98(v40, v50, v62, (2 * v47) | 1);
            v41 = (int *)v84;
          }
          v37 = v78 + 1;
          swift_bridgeObjectRelease_n();
          sub_1BA4A2E80((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
          v40 = v65;
          v42 = v81;
          v39 = v72;
          v38 = v73;
          if (v37 == v76)
            goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        type metadata accessor for FormatServiceError();
        sub_1BA4A2870(&qword_1ED39FD80, (uint64_t (*)(uint64_t))type metadata accessor for FormatServiceError, (uint64_t)&protocol conformance descriptor for FormatServiceError);
        swift_allocError();
        v67 = v70;
        *v68 = *v41;
        v68[1] = v67;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_1BA4A2E80((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
LABEL_31:
        swift_unknownObjectRelease();
        return sub_1BA4A2E80(v82, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
      }
      else
      {
LABEL_26:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return sub_1BA4A2E80(v82, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
      }
    }
  }
  else
  {
    v29 = v26;
    type metadata accessor for FormatServiceError();
    sub_1BA4A2870(&qword_1ED39FD80, (uint64_t (*)(uint64_t))type metadata accessor for FormatServiceError, (uint64_t)&protocol conformance descriptor for FormatServiceError);
    swift_allocError();
    *v30 = v29;
    v30[1] = v28;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

BOOL _s8NewsFeed24FormatSlotItemCountLimitO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  BOOL v19;
  uint64_t (*v21)(_QWORD);
  uint64_t v23;

  v4 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v23 - v11);
  sub_1BB5C0648();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v15[*(int *)(v16 + 48)];
  sub_1BA4C2DD8(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
  sub_1BA4C2DD8(a2, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
    if (!swift_getEnumCaseMultiPayload())
    {
      v19 = *v12 == *(_QWORD *)v17 && v12[1] == *((_QWORD *)v17 + 1);
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v19 = 1;
      goto LABEL_14;
    }
LABEL_16:
    v19 = 0;
    v21 = (uint64_t (*)(_QWORD))sub_1BB5C0648;
    goto LABEL_17;
  }
  sub_1BA4C2DD8((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
    goto LABEL_16;
  }
  sub_1BA5193C4((uint64_t)v17, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
  v19 = _s8NewsFeed20FormatSlotDefinitionV2eeoiySbAC_ACtFZ_0(v9, v6);
  sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
  sub_1BA4A2E80((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
LABEL_14:
  v21 = (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit;
LABEL_17:
  sub_1BA4A2E80((uint64_t)v15, v21);
  return v19;
}

uint64_t sub_1BB5BFFF4(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2C8280, (uint64_t (*)(uint64_t))type metadata accessor for FormatSlotItemCountLimit, (uint64_t)&protocol conformance descriptor for FormatSlotItemCountLimit);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5C0030(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3BF220, (uint64_t (*)(uint64_t))type metadata accessor for FormatSlotItemCountLimit, (uint64_t)&protocol conformance descriptor for FormatSlotItemCountLimit);
  a1[2] = sub_1BA4A2870(&qword_1ED3A0298, (uint64_t (*)(uint64_t))type metadata accessor for FormatSlotItemCountLimit, (uint64_t)&protocol conformance descriptor for FormatSlotItemCountLimit);
  result = sub_1BA4A2870(&qword_1EF2C8288, (uint64_t (*)(uint64_t))type metadata accessor for FormatSlotItemCountLimit, (uint64_t)&protocol conformance descriptor for FormatSlotItemCountLimit);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatSlotItemCountLimit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    a1[8] = a2[8];
    v11 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
    __dst = (char *)a1 + v11;
    v12 = (char *)a2 + v11;
    v13 = sub_1BB86E710();
    v14 = *(_QWORD *)(v13 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v12, 1, v13))
    {
      sub_1BA74E57C();
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

_QWORD *assignWithCopy for FormatSlotItemCountLimit(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *__dst;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      v6 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
      __dst = (char *)a1 + v6;
      v7 = (char *)a2 + v6;
      v8 = sub_1BB86E710();
      v9 = *(_QWORD *)(v8 - 8);
      v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12(v7, 1, v8))
      {
        sub_1BA74E57C();
        memcpy(__dst, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *initializeWithTake for FormatSlotItemCountLimit(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    v8 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BB86E710();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_1BA74E57C();
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for FormatSlotItemCountLimit(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1BA4A2E80((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      v8 = *(int *)(type metadata accessor for FormatSlotDefinition() + 40);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_1BB86E710();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_1BA74E57C();
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1BB5C0648()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2C8290)
  {
    type metadata accessor for FormatSlotItemCountLimit();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2C8290);
  }
}

__n128 FeedJournalGroup.init(result:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v2 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 208) = v2;
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 224);
  *(_QWORD *)(a2 + 240) = *(_QWORD *)(a1 + 240);
  v3 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v3;
  v4 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = v4;
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v7;
  result = *(__n128 *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t assignWithCopy for FeedJournalGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
LABEL_8:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  if (a1 != a2)
  {
    sub_1BA5B0A58(a1 + 128);
    __asm { BR              X10 }
  }
  v10 = (_OWORD *)(a1 + 200);
  v12 = (_OWORD *)(a2 + 200);
  v11 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 200) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13 = (unint64_t *)(a1 + 208);
      v14 = *(_QWORD *)(a2 + 208);
      if (*(_QWORD *)(a1 + 208) >= 2uLL)
      {
        if (v14 >= 2)
        {
          *v13 = v14;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1BAAD13E8(a1 + 208);
          *v13 = *(_QWORD *)(a2 + 208);
        }
      }
      else
      {
        *v13 = v14;
        if (v14 >= 2)
          swift_bridgeObjectRetain();
      }
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    }
    else
    {
      sub_1BB204214(a1 + 200);
      v16 = *(_QWORD *)(a2 + 216);
      *v10 = *v12;
      *(_QWORD *)(a1 + 216) = v16;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 200) = v11;
    v15 = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    if (v15 >= 2)
      swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 208) = v15;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  }
  else
  {
    v17 = *v12;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *v10 = v17;
  }
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v18;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t LayeredMediaLayerProcessorRequest.__allocating_init(assetHandle:size:scale:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  v12 = sub_1BB5C0E1C(v11, a2, a3, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

uint64_t LayeredMediaLayerProcessorRequest.cacheIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double LayeredMediaLayerProcessorRequest.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double LayeredMediaLayerProcessorRequest.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t LayeredMediaLayerProcessorRequest.assetHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LayeredMediaLayerProcessorRequest.init(assetHandle:size:scale:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  v16 = sub_1BB5C0C84((uint64_t)v14, v4, v9, v10, a2, a3, a4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v16;
}

uint64_t LayeredMediaLayerProcessorRequest.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v0;
}

uint64_t LayeredMediaLayerProcessorRequest.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5C0C78()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5C0C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t inited;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20[5];

  v20[3] = a3;
  v20[4] = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  sub_1BA4C010C((uint64_t)v20, a2 + 64);
  sub_1BB3B53A8();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(inited + 32) = 0x616D497265766F63;
  *(_QWORD *)(inited + 40) = 0xEF726579614C6567;
  sub_1BA4C010C((uint64_t)v20, inited + 48);
  *(_QWORD *)(a2 + 56) = sub_1BA739C1C(inited);
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  *(double *)(a2 + 48) = a7;
  sub_1BB86FA84();
  sub_1BB872AFC(v15);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v16);
  type metadata accessor for CGSize(0);
  sub_1BB873E34();
  sub_1BB872AFC(v17);
  sub_1BB872FDC();
  sub_1BB872AFC(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return a2;
}

uint64_t sub_1BB5C0E1C(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a6);
  return sub_1BB5C0C84((uint64_t)v15, v16, a6, a7, a2, a3, a4);
}

uint64_t type metadata accessor for LayeredMediaLayerProcessorRequest()
{
  return objc_opt_self();
}

uint64_t method lookup function for LayeredMediaLayerProcessorRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LayeredMediaLayerProcessorRequest.__allocating_init(assetHandle:size:scale:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

NewsFeed::ShareAttributionViewAlignment_optional __swiftcall ShareAttributionViewAlignment.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (NewsFeed::ShareAttributionViewAlignment_optional)rawValue;
}

uint64_t ShareAttributionViewAlignment.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

NewsFeed::ShareAttributionViewAlignment_optional sub_1BB5C0F34(Swift::Int *a1)
{
  return ShareAttributionViewAlignment.init(rawValue:)(*a1);
}

BOOL static ShareAttributionViewStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ShareAttributionViewStyle.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t ShareAttributionViewStyle.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

Swift::Void __swiftcall SLAttributionView.update(_:)(NewsFeed::ShareAttributionViewAlignment a1)
{
  void *v1;

  objc_msgSend(v1, sel_updateAlignment_, *(unsigned __int8 *)a1);
}

Swift::Void __swiftcall SLAttributionView.update(_:)(NewsFeed::ShareAttributionViewStyle a1)
{
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = *(unsigned __int8 *)a1;
  if (v2 >= 2)
  {
    objc_msgSend(v1, sel_updateBackgroundStyle_, 0);
    if (v2 == 2)
      objc_msgSend(v1, sel_updateInterfaceStyle_, 0);
    else
      objc_msgSend(v1, sel_updateInterfaceStyle_, 1);
    v3 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v5 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.2);

    v4 = v5;
  }
  else
  {
    objc_msgSend(v1, sel_updateBackgroundStyle_, -1);
    objc_msgSend(v1, sel_updateInterfaceStyle_, v2 != 0);
    v4 = 0;
  }
  v6 = v4;
  objc_msgSend(v1, sel_updateBackgroundColor_);

}

id SLAttributionView.prepareLayout(with:)()
{
  void *v0;

  return objc_msgSend(v0, sel_prepareLayoutWithMaxWidth_);
}

void *SLAttributionView.replyContextMenuItem.getter()
{
  return sub_1BB5C118C(MEMORY[0x1E0DA88C0]);
}

unint64_t sub_1BB5C1144()
{
  unint64_t result;

  result = qword_1EF2BCFF0;
  if (!qword_1EF2BCFF0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF2BCFF0);
  }
  return result;
}

void *SLAttributionView.hideContextMenuItem.getter()
{
  return sub_1BB5C118C(MEMORY[0x1E0DA88B8]);
}

void *sub_1BB5C118C(_QWORD *a1)
{
  void *v1;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = objc_msgSend(v1, sel_contextMenuItems);
  if (v3)
  {
    v4 = v3;
    sub_1BB5C1144();
    v5 = sub_1BB872DB4();

    if (v5 >> 62)
      goto LABEL_21;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v6; v6 = sub_1BB873F30())
    {
      a1 = (_QWORD *)*a1;
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCE4630](v7 - 4, v5) : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v11 = objc_msgSend(v8, sel_identifier);
        v12 = sub_1BB8729A0();
        v14 = v13;

        if (v12 == sub_1BB8729A0() && v14 == v15)
        {
          swift_bridgeObjectRelease_n();
LABEL_18:
          swift_bridgeObjectRelease_n();
          return v9;
        }
        v17 = sub_1BB874398();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
          goto LABEL_18;

        ++v7;
        if (v10 == v6)
          goto LABEL_15;
      }
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

unint64_t sub_1BB5C1344()
{
  unint64_t result;

  result = qword_1EF2C8298;
  if (!qword_1EF2C8298)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ShareAttributionViewAlignment, &type metadata for ShareAttributionViewAlignment);
    atomic_store(result, (unint64_t *)&qword_1EF2C8298);
  }
  return result;
}

unint64_t sub_1BB5C138C()
{
  unint64_t result;

  result = qword_1EF2C82A0;
  if (!qword_1EF2C82A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for ShareAttributionViewStyle, &type metadata for ShareAttributionViewStyle);
    atomic_store(result, (unint64_t *)&qword_1EF2C82A0);
  }
  return result;
}

id sub_1BB5C13D0(unsigned __int8 *a1)
{
  void *v1;

  return objc_msgSend(v1, sel_updateAlignment_, *a1);
}

id sub_1BB5C13E8()
{
  void *v0;

  return objc_msgSend(v0, sel_prepareLayoutWithMaxWidth_);
}

uint64_t storeEnumTagSinglePayload for ShareAttributionViewAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5C144C + 4 * byte_1BB92D9E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5C1480 + 4 * byte_1BB92D9E0[v4]))();
}

uint64_t sub_1BB5C1480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C1488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5C1490);
  return result;
}

uint64_t sub_1BB5C149C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5C14A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5C14A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C14B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareAttributionViewAlignment()
{
  return &type metadata for ShareAttributionViewAlignment;
}

uint64_t storeEnumTagSinglePayload for ShareAttributionViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB5C1518 + 4 * byte_1BB92D9EF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB5C154C + 4 * byte_1BB92D9EA[v4]))();
}

uint64_t sub_1BB5C154C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C1554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5C155CLL);
  return result;
}

uint64_t sub_1BB5C1568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5C1570);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB5C1574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C157C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareAttributionViewStyle()
{
  return &type metadata for ShareAttributionViewStyle;
}

uint64_t dispatch thunk of ShareAttributionView.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ShareAttributionView.prepareLayout(with:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ShareAttributionView.replyContextMenuItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ShareAttributionView.hideContextMenuItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void sub_1BB5C15C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = a2;
  v38 = a1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3B2DB0, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v32 = (char *)v28 - v6;
  v7 = sub_1BB86C8B0();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v9 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  v37 = v9;
  MEMORY[0x1E0C80A78](v7);
  v35 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v4);
  MEMORY[0x1E0C80A78](v11);
  v28[5] = (char *)v28 - v12;
  v29 = sub_1BB86C67C();
  v28[4] = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v28[2] = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v28[3] = (char *)v28 - v15;
  v16 = type metadata accessor for FeedHeadline(0);
  v31 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  v30 = (char *)v28 - v18;
  MEMORY[0x1E0C80A78](v19);
  v34 = (char *)v28 - v20;
  MEMORY[0x1E0C80A78](v21);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0540, v8, v4);
  MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  MEMORY[0x1E0C80A78](v27);
  __asm { BR              X10 }
}

uint64_t sub_1BB5C18D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = v5;
  v10 = v4;
  *(_QWORD *)(v8 - 248) = v3;
  *(_QWORD *)(v8 - 240) = v2;
  v11 = v1;
  v12 = v0;
  v13 = objc_msgSend(*(id *)(*(_QWORD *)(v8 - 200) + 40), sel_publishDate);
  if (v13)
  {
    v14 = v13;
    sub_1BB86C874();

    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  v16 = *(_QWORD *)(v8 - 216);
  v17 = *(_QWORD *)(v8 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v6, v15, 1, v16);
  sub_1BA76D70C(v6, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16) == 1)
  {
    sub_1BA5C699C(v6, (unint64_t *)&qword_1ED3B0540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return 0;
  }
  else
  {
    v18 = *(_QWORD *)(v8 - 224);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v18, v7, v16);
    *(_QWORD *)(v8 - 184) = v12;
    *(_QWORD *)(v8 - 176) = v10;
    v19 = v9;
    *(_QWORD *)(v8 - 312) = v9;
    *(_QWORD *)(v8 - 168) = v9;
    *(_QWORD *)(v8 - 160) = v11;
    v20 = v11;
    v22 = *(_QWORD *)(v8 - 248);
    v21 = *(_QWORD *)(v8 - 240);
    *(_QWORD *)(v8 - 152) = v21;
    *(_QWORD *)(v8 - 144) = v22;
    sub_1BA7143C8(v12, v10, v19, v20, v21, v22, 0);
    *(_QWORD *)(v8 - 200) = FormatDateFormat.format(_:)(v18);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
    v23 = v10;
    v24 = *(_QWORD *)(v8 - 200);
    sub_1BA6EF818(v12, v23, *(_QWORD *)(v8 - 312), v20, v21, v22, 0);
    sub_1BA5C699C(v6, (unint64_t *)&qword_1ED3B0540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  }
  return v24;
}

BOOL static FormatHeadlineTrackDurationFormat.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1BB5C2830(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1BA80555C(*a1);
  v5 = v4;
  if (v3 == sub_1BA80555C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BB5C28B8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA80555C(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5C2918()
{
  unsigned __int8 *v0;

  sub_1BA80555C(*v0);
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5C2958()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1BB8745CC();
  sub_1BA80555C(v1);
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BB5C29B4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E724D040;
}

uint64_t static FormatHeadlineTrackProgressFormat.== infix(_:_:)()
{
  return 1;
}

void sub_1BB5C29D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X10 }
}

uint64_t sub_1BB5C2A50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_1BA4B07F0(0, (unint64_t *)&unk_1EF2A9CC0, type metadata accessor for FormatInspectionItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FormatInspectionItem(0) - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1BB87CE70;
  sub_1BA76C878(v2, v1);
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_BYTE *)(v3 - 96) = 4;
  result = sub_1BB5C3924(0x696669746E656449, 0xEA00000000007265, v1, v3 - 144, (_QWORD *)(v6 + v5));
  *v0 = v6;
  return result;
}

uint64_t sub_1BB5C3924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;

  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = *(_QWORD *)(a4 + 40);
  v12 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)&v22 = *(_QWORD *)a4;
  v6 = v22;
  *((_QWORD *)&v22 + 1) = v7;
  *(_QWORD *)&v23 = v8;
  *((_QWORD *)&v23 + 1) = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  sub_1BB5C15C0(a3, 0, (uint64_t)&v22);
  v14 = v13;
  v16 = v15;
  sub_1BA6EF818(v6, v7, v8, v9, v10, v11, v12);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v14 & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    *(_QWORD *)&v22 = v14;
    *((_QWORD *)&v22 + 1) = v16;
    *((_QWORD *)&v23 + 1) = MEMORY[0x1E0DEA968];
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = 0u;
    v23 = 0u;
  }
  sub_1BAAF40BC(a1, a2, (uint64_t)&v22, a5);
  return sub_1BA717468(a3);
}

uint64_t FormatHeadlineTrackDurationFormat.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatHeadlineTrackDurationFormat.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BB5C3A80(_QWORD *a1)
{
  return FormatHeadlineTrackDurationFormat.encode(to:)(a1);
}

uint64_t FormatHeadlineTrackProgressFormat.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatHeadlineTrackProgressFormat.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t sub_1BB5C3AF8(_QWORD *a1)
{
  return FormatHeadlineTrackProgressFormat.init(from:)(a1);
}

uint64_t sub_1BB5C3B0C(_QWORD *a1)
{
  return FormatHeadlineTrackProgressFormat.encode(to:)(a1);
}

void _s8NewsFeed21FormatHeadlineBindingV4TextO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_1BB5C3B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[6];
  uint64_t v51[19];

  if (v11)
  {
    v46 = v8;
    v47 = v14;
    v25 = v14;
    v26 = v9;
    v27 = v17;
    v29 = v16;
    v30 = v10;
    v31 = v7;
    sub_1BA7336E0(v25, v6, a3);
    v32 = v31;
    v33 = v30;
    v34 = v29;
    v35 = a6;
    v36 = v27;
    v37 = v26;
    v38 = v29;
    v39 = v35;
    v40 = v32;
    sub_1BA7143C8(v38, v33, v32, v15, v13, v12, v11);
    sub_1BA6EF818(v47, v49, v48, v37, v36, v39, v46);
    sub_1BA6EF818(v34, v33, v40, v15, v13, v12, v11);
    return 0;
  }
  else
  {
    v51[0] = v14;
    v51[1] = v6;
    v51[2] = a3;
    v51[3] = v9;
    v43 = v17;
    v44 = v12;
    v51[4] = v17;
    v51[5] = a6;
    v50[0] = v16;
    v50[1] = v10;
    v50[2] = v7;
    v50[3] = v15;
    v50[4] = v13;
    v50[5] = v12;
    v45 = v15;
    v19 = v12;
    v21 = v6;
    v22 = v7;
    v42 = v7;
    sub_1BA7143C8(v16, v10, v7, v15, v13, v19, 0);
    sub_1BA7143C8(v14, v21, a3, v9, v43, a6, 0);
    sub_1BA7143C8(v16, v10, v22, v15, v13, v44, 0);
    v23 = a3;
    sub_1BA7143C8(v14, v21, a3, v9, v43, a6, 0);
    v24 = _s8NewsFeed010FormatDateC0O2eeoiySbAC_ACtFZ_0(v51, v50);
    sub_1BA6EF818(v14, v21, v23, v9, v43, a6, 0);
    sub_1BA6EF818(v16, v10, v42, v45, v13, v44, 0);
    sub_1BA6EF818(v16, v10, v42, v45, v13, v44, 0);
    sub_1BA6EF818(v14, v21, v48, v9, v43, a6, 0);
  }
  return v24;
}

unint64_t sub_1BB5C4564(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5C4588();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5C4588()
{
  unint64_t result;

  result = qword_1EF2C82A8;
  if (!qword_1EF2C82A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.Text, &type metadata for FormatHeadlineBinding.Text);
    atomic_store(result, (unint64_t *)&qword_1EF2C82A8);
  }
  return result;
}

uint64_t sub_1BB5C45CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA622004, (uint64_t (*)(void))sub_1BA61F890, (uint64_t (*)(void))sub_1BB5C45E8);
}

unint64_t sub_1BB5C45E8()
{
  unint64_t result;

  result = qword_1EF2C82B0;
  if (!qword_1EF2C82B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineBinding.Text, &type metadata for FormatHeadlineBinding.Text);
    atomic_store(result, (unint64_t *)&qword_1EF2C82B0);
  }
  return result;
}

unint64_t sub_1BB5C4630()
{
  unint64_t result;

  result = qword_1EF2C82B8;
  if (!qword_1EF2C82B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineTrackDurationFormat, &type metadata for FormatHeadlineTrackDurationFormat);
    atomic_store(result, (unint64_t *)&qword_1EF2C82B8);
  }
  return result;
}

unint64_t sub_1BB5C4674(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5C4698();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5C4698()
{
  unint64_t result;

  result = qword_1EF2C82C0;
  if (!qword_1EF2C82C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineTrackDurationFormat, &type metadata for FormatHeadlineTrackDurationFormat);
    atomic_store(result, (unint64_t *)&qword_1EF2C82C0);
  }
  return result;
}

uint64_t sub_1BB5C46DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BA60D7F8, (uint64_t (*)(void))sub_1BAEEDA34, (uint64_t (*)(void))sub_1BB5C4630);
}

unint64_t sub_1BB5C46FC()
{
  unint64_t result;

  result = qword_1EF2C82C8;
  if (!qword_1EF2C82C8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineTrackProgressFormat, &type metadata for FormatHeadlineTrackProgressFormat);
    atomic_store(result, (unint64_t *)&qword_1EF2C82C8);
  }
  return result;
}

unint64_t sub_1BB5C4740(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5C4764();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5C4764()
{
  unint64_t result;

  result = qword_1EF2C82D0;
  if (!qword_1EF2C82D0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatHeadlineTrackProgressFormat, &type metadata for FormatHeadlineTrackProgressFormat);
    atomic_store(result, (unint64_t *)&qword_1EF2C82D0);
  }
  return result;
}

uint64_t sub_1BB5C47A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BA828C60(a1, a2, a3, (uint64_t (*)(void))sub_1BAE9926C, (uint64_t (*)(void))sub_1BAEF1D0C, (uint64_t (*)(void))sub_1BB5C46FC);
}

uint64_t _s14descr1E7323649C4TextOwxx(uint64_t a1)
{
  return sub_1BA6EF818(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t _s14descr1E7323649C4TextOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1BA7143C8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t _s14descr1E7323649C4TextOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1BA7143C8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_1BA6EF818(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t _s14descr1E7323649C4TextOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_1BA6EF818(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t sub_1BB5C4934(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1BB5C494C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FormatHeadlineBinding.Text()
{
  return &type metadata for FormatHeadlineBinding.Text;
}

ValueMetadata *type metadata accessor for FormatHeadlineTrackDurationFormat()
{
  return &type metadata for FormatHeadlineTrackDurationFormat;
}

uint64_t storeEnumTagSinglePayload for FormatHeadlineTrackProgressFormat(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB5C49D4 + 4 * byte_1BB92DBFB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB5C49F4 + 4 * byte_1BB92DC00[v4]))();
}

_BYTE *sub_1BB5C49D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB5C49F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5C49FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5C4A04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5C4A0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5C4A14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatHeadlineTrackProgressFormat()
{
  return &type metadata for FormatHeadlineTrackProgressFormat;
}

ValueMetadata *_s14descr1E7323649C4TextO10CodingTypeOMa()
{
  return &_s14descr1E7323649C4TextO10CodingTypeON;
}

uint64_t sub_1BB5C4A40()
{
  return sub_1BA4A2870(&qword_1EF2C82D8, (uint64_t (*)(uint64_t))sub_1BB5C4A6C, MEMORY[0x1E0DEAF50]);
}

void sub_1BB5C4A6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C82E0)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C82E0);
  }
}

unint64_t sub_1BB5C4AC4()
{
  unint64_t result;

  result = qword_1EF2C82E8;
  if (!qword_1EF2C82E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E06C, &_s14descr1E7323649C4TextO10CodingTypeON);
    atomic_store(result, (unint64_t *)&qword_1EF2C82E8);
  }
  return result;
}

NewsFeed::WebArchiveRequest __swiftcall WebArchiveRequest.init(resourceID:params:)(Swift::String resourceID, Swift::String_optional params)
{
  Swift::String_optional *v2;
  NewsFeed::WebArchiveRequest result;

  v2->value = resourceID;
  v2[1] = params;
  result.params = params;
  result.resourceID = resourceID;
  return result;
}

uint64_t WebArchiveServiceType.resolve(webArchives:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = FCCurrentQoSOrUtilityIfMain();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v6, a2, a3);
}

uint64_t WebArchiveServiceType.resolve(webArchive:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;

  v5 = *(_QWORD *)(a1 + 8);
  v8[0] = *(_QWORD *)a1;
  v8[1] = v5;
  v9 = *(_OWORD *)(a1 + 16);
  v6 = FCCurrentQoSOrUtilityIfMain();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a3 + 8))(v8, v6, a2, a3);
}

uint64_t WebArchiveService.__allocating_init(resourceService:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1BA4CECCC(a1, v2 + 16);
  return v2;
}

uint64_t WebArchiveRequest.resourceID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebArchiveRequest.params.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebArchive.params.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebArchive.archiveBaseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WebArchive() + 24);
  v4 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WebArchive.archiveIndexFileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WebArchive() + 28);
  v4 = sub_1BB86C67C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WebArchive.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WebArchive.init(resourceID:params:archiveBaseURL:archiveIndexFileURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v14)(char *, uint64_t, uint64_t);

  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  v10 = type metadata accessor for WebArchive();
  v11 = (char *)a7 + *(int *)(v10 + 24);
  v12 = sub_1BB86C67C();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v14(v11, a5, v12);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v14)((char *)a7 + *(int *)(v10 + 28), a6, v12);
}

uint64_t WebArchiveService.init(resourceService:)(__int128 *a1)
{
  uint64_t v1;

  sub_1BA4CECCC(a1, v1 + 16);
  return v1;
}

uint64_t type metadata accessor for WebArchive()
{
  uint64_t result;

  result = qword_1ED3B3178;
  if (!qword_1ED3B3178)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t WebArchiveService.resolve(webArchive:qualityOfService:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  v2 = *a1;
  v1 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  sub_1BA8CB2A8(0, (unint64_t *)&unk_1ED3B91C0, (void (*)(uint64_t))type metadata accessor for WebArchive);
  sub_1BB86EC14();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = (void *)sub_1BB86E854();
  type metadata accessor for WebArchive();
  v7 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v7;
}

uint64_t sub_1BB5C4F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;

  sub_1BB5C6A50(0, &qword_1ED39C1D8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v12 + 32) = a2;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = a4;
  *(_QWORD *)(v12 + 56) = a5;
  sub_1BA8CB2A8(0, (unint64_t *)&qword_1ED3B91E0, (void (*)(uint64_t))sub_1BA9881CC);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BB86EC14();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  v14 = (void *)sub_1BB86E854();
  sub_1BA8CB2A8(0, (unint64_t *)&unk_1ED3B91C0, (void (*)(uint64_t))type metadata accessor for WebArchive);
  v15 = sub_1BB86E974();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v15;
}

uint64_t sub_1BB5C507C()
{
  return sub_1BB5C62AC();
}

uint64_t WebArchiveService.resolve(webArchives:qualityOfService:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  sub_1BA8CB2A8(0, (unint64_t *)&qword_1ED3B91E0, (void (*)(uint64_t))sub_1BA9881CC);
  sub_1BB86EC14();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = v2;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = (void *)sub_1BB86E854();
  sub_1BA8CB2A8(0, (unint64_t *)&unk_1ED3B91C0, (void (*)(uint64_t))type metadata accessor for WebArchive);
  v7 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v7;
}

uint64_t sub_1BB5C5188@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_1BA4B07F0(0, &qword_1ED3B31B8, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - v9;
  v11 = *a1;
  if (!*(_QWORD *)(v11 + 16))
  {
    v18 = type metadata accessor for WebArchive();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
LABEL_7:
    sub_1BA5C699C((uint64_t)v10, &qword_1ED3B31B8, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive);
    sub_1BB5C69C8();
    swift_allocError();
    *(_QWORD *)v19 = a2;
    *(_QWORD *)(v19 + 8) = a3;
    *(_BYTE *)(v19 + 16) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v12 = sub_1BA6E35A8(a2, a3);
  if ((v13 & 1) != 0)
  {
    v14 = v12;
    v15 = *(_QWORD *)(v11 + 56);
    v16 = type metadata accessor for WebArchive();
    v17 = *(_QWORD *)(v16 - 8);
    sub_1BB5C6A0C(v15 + *(_QWORD *)(v17 + 72) * v14, (uint64_t)v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
  }
  else
  {
    v16 = type metadata accessor for WebArchive();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for WebArchive();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v10, 1, v16) == 1)
    goto LABEL_7;
  return sub_1BB5C6984((uint64_t)v10, a4);
}

uint64_t sub_1BB5C5368@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5C5188(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1BB5C5384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1BA4C010C(a1 + 16, (uint64_t)v17);
  v6 = v18;
  v5 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1BA7447E8(0, v7, 0);
    v8 = v20;
    v9 = (uint64_t *)(a2 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      v20 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        sub_1BA7447E8(v12 > 1, v13 + 1, 1);
        v8 = v20;
      }
      v9 += 4;
      *(_QWORD *)(v8 + 16) = v13 + 1;
      v14 = v8 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 40) = v11;
      --v7;
    }
    while (v7);
  }
  v15 = ResourceServiceType.fetchResources(identifiers:qualityOfService:)(v8, a3, v6, v5);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v15;
}

uint64_t sub_1BB5C54C0()
{
  uint64_t *v0;

  return sub_1BB5C5384(v0[2], v0[3], v0[4]);
}

uint64_t sub_1BB5C54DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = *a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
  sub_1BB5C6A50(0, &qword_1ED3BA800, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
  sub_1BB5C62D0();
  v9 = sub_1BB872BC8();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BB5C6328(v9, v7, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1BA4B07F0(0, &qword_1ED3B93A0, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive, v8);
  sub_1BB5C68DC();
  sub_1BB5C693C();
  v10 = sub_1BB872BBC();
  result = swift_bridgeObjectRelease();
  *a4 = v10;
  return result;
}

uint64_t sub_1BB5C5624@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5C54DC(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1BB5C5640@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v33;
  void *v34;
  void *v35;
  unsigned int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  unsigned int v43;
  id v44;
  void *v45;
  unsigned int v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  id v60[2];

  v58 = a3;
  v60[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = sub_1BB86C67C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v51 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v51 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v51 - v16;
  v18 = *a1;
  v19 = a1[1];
  v20 = a1[3];
  v54 = a1[2];
  v55 = v20;
  swift_bridgeObjectRetain();
  v53 = a2;
  sub_1BB86C5D4();
  v56 = v18;
  v57 = v19;
  v21 = v6;
  sub_1BB86C5BC();
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22(v14, v5);
  sub_1BB86C5C8();
  sub_1BB86C5BC();
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_defaultManager);
  v59 = v8;
  sub_1BB86C520();
  v25 = (void *)sub_1BB872970();
  swift_bridgeObjectRelease();
  LODWORD(a1) = objc_msgSend(v24, sel_fileExistsAtPath_, v25);

  if ((_DWORD)a1)
  {
    v22(v11, v5);
    v26 = type metadata accessor for WebArchive();
    v27 = v58;
    v28 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v28(&v58[*(int *)(v26 + 24)], v17, v5);
    v29 = v27;
LABEL_3:
    v28(&v29[*(int *)(v26 + 28)], v59, v5);
    v30 = v57;
    *(_QWORD *)v29 = v56;
    *((_QWORD *)v29 + 1) = v30;
    v31 = v55;
    *((_QWORD *)v29 + 2) = v54;
    *((_QWORD *)v29 + 3) = v31;
    return swift_bridgeObjectRetain();
  }
  v51 = v21;
  v52 = v22;
  v29 = v58;
  v33 = objc_msgSend(v23, sel_defaultManager);
  v34 = (void *)sub_1BB86C58C();
  v35 = (void *)sub_1BB86C58C();
  v60[0] = 0;
  v36 = objc_msgSend(v33, sel_copyItemAtURL_toURL_error_, v34, v35, v60);

  v37 = v60[0];
  if (v36)
  {
    v38 = objc_allocWithZone(MEMORY[0x1E0D60AC8]);
    v39 = v37;
    v40 = objc_msgSend(v38, sel_init);
    v41 = (void *)sub_1BB86C58C();
    v42 = (void *)sub_1BB86C58C();
    v43 = objc_msgSend(v40, sel_unarchive_toLocation_, v41, v42);

    v44 = objc_msgSend(v23, sel_defaultManager);
    sub_1BB86C520();
    v45 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    v46 = objc_msgSend(v44, sel_fileExistsAtPath_, v45);

    if (v43 && v46)
    {

      v52(v11, v5);
      v26 = type metadata accessor for WebArchive();
      v28 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v28(&v29[*(int *)(v26 + 24)], v17, v5);
      goto LABEL_3;
    }
    sub_1BB5C69C8();
    swift_allocError();
    v48 = v57;
    *(_QWORD *)v49 = v56;
    *(_QWORD *)(v49 + 8) = v48;
    *(_BYTE *)(v49 + 16) = 0;
    swift_willThrow();

  }
  else
  {
    v47 = v60[0];
    swift_bridgeObjectRelease();
    sub_1BB86C484();

    swift_willThrow();
  }
  v50 = v52;
  v52(v59, v5);
  v50(v11, v5);
  return ((uint64_t (*)(char *, uint64_t))v50)(v17, v5);
}

uint64_t WebArchiveService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t WebArchiveService.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5C5AFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  v2 = *a1;
  v1 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  sub_1BA8CB2A8(0, (unint64_t *)&unk_1ED3B91C0, (void (*)(uint64_t))type metadata accessor for WebArchive);
  sub_1BB86EC14();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = (void *)sub_1BB86E854();
  type metadata accessor for WebArchive();
  v7 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v7;
}

uint64_t sub_1BB5C5BEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = *v2;
  sub_1BA8CB2A8(0, (unint64_t *)&qword_1ED3B91E0, (void (*)(uint64_t))sub_1BA9881CC);
  sub_1BB86EC14();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = v9;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = (void *)sub_1BB86E854();
  sub_1BA8CB2A8(0, (unint64_t *)&unk_1ED3B91C0, (void (*)(uint64_t))type metadata accessor for WebArchive);
  v7 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v7;
}

uint64_t dispatch thunk of WebArchiveServiceType.resolve(webArchive:qualityOfService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of WebArchiveServiceType.resolve(webArchives:qualityOfService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for WebArchiveRequest()
{
  return &type metadata for WebArchiveRequest;
}

char *initializeBufferWithCopyOfBuffer for WebArchive(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_1BB86C67C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v12);
  }
  return v4;
}

uint64_t destroy for WebArchive(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BB86C67C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 28), v5);
}

char *initializeWithCopy for WebArchive(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86C67C();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

char *assignWithCopy for WebArchive(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BB86C67C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *initializeWithTake for WebArchive(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_1BB86C67C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v10);
  return a1;
}

char *assignWithTake for WebArchive(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1BB86C67C();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WebArchive()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5C610C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BB86C67C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WebArchive()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5C6194(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BB86C67C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BB5C6208()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86C67C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for WebArchiveService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WebArchiveService.__allocating_init(resourceService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for WebArchiveService.Errors()
{
  return &type metadata for WebArchiveService.Errors;
}

uint64_t sub_1BB5C62AC()
{
  uint64_t *v0;

  return sub_1BB5C4F0C(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

unint64_t sub_1BB5C62D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3BB498;
  if (!qword_1ED3BB498)
  {
    sub_1BB5C6A50(255, &qword_1ED3BA800, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3BB498);
  }
  return result;
}

unint64_t sub_1BB5C6328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  id v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v55[2];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  id v62;
  char *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];
  unint64_t v74;

  v57 = a3;
  v58 = a4;
  v69 = a2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v55 - v8;
  v10 = sub_1BB86C67C();
  v66 = *(_QWORD *)(v10 - 8);
  v67 = v10;
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v59 = (char *)v55 - v13;
  sub_1BA4B07F0(0, &qword_1ED3B31B8, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive, v6);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v55 - v15;
  v17 = type metadata accessor for WebArchive();
  v18 = *(_QWORD *)(v17 - 8);
  v71 = v17;
  v72 = v18;
  MEMORY[0x1E0C80A78](v17);
  v70 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v68 = (uint64_t)v55 - v21;
  v22 = *(_QWORD *)(a1 + 16);
  if (!v22)
    return MEMORY[0x1E0DEE9D8];
  v64 = v4;
  swift_bridgeObjectRetain();
  v23 = MEMORY[0x1E0DEE9D8];
  v55[1] = a1;
  v24 = (uint64_t *)(a1 + 56);
  v56 = xmmword_1BB87CE70;
  v25 = v69;
  v63 = v9;
  do
  {
    v26 = *(v24 - 3);
    v27 = *(v24 - 2);
    v28 = (void *)*(v24 - 1);
    v29 = *v24;
    v30 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74 = v23;
    if (!v30)
      goto LABEL_14;
    swift_bridgeObjectRetain();
    v31 = sub_1BA6E35A8(v26, v27);
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      v48 = 1;
      goto LABEL_19;
    }
    v33 = *(id *)(*(_QWORD *)(v25 + 56) + 8 * v31);
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v33, sel_fileURL);
    if (!v34)
    {
      v38 = (uint64_t)v63;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v63, 1, 1, v67);
LABEL_16:

      sub_1BA5C699C(v38, (unint64_t *)&qword_1ED3D2E70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      goto LABEL_17;
    }
    v35 = v34;
    v62 = v28;
    v65 = v33;
    v36 = v60;
    sub_1BB86C5EC();

    v37 = v66;
    v38 = (uint64_t)v63;
    v39 = v36;
    v40 = v67;
    v61 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v61(v63, v39, v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v40);
    v41 = v40;
    v33 = v65;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v41) == 1)
      goto LABEL_16;
    v42 = (uint64_t)v59;
    v43 = v38;
    v44 = v67;
    v61(v59, (char *)v43, v67);
    v73[0] = v26;
    v73[1] = v27;
    v73[2] = (uint64_t)v62;
    v73[3] = v29;
    v45 = v64;
    sub_1BB5C5640(v73, v42, v16);
    v64 = v45;
    if (!v45)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v44);

      v48 = 0;
      goto LABEL_18;
    }
    if (qword_1ED3BA7F8 != -1)
      swift_once();
    v62 = (id)qword_1ED476860;
    LODWORD(v61) = sub_1BB8732F4();
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v56;
    *(_QWORD *)(v46 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v46 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v46 + 32) = v26;
    *(_QWORD *)(v46 + 40) = v27;
    swift_bridgeObjectRetain();
    v47 = v62;
    sub_1BB86EF44("Failed to unarchive web archive, resourceID=%{public}@", 54, 2, &dword_1BA493000, v62, v61, v46);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v44);
    v64 = 0;
LABEL_17:
    v48 = 1;
LABEL_18:
    v25 = v69;
LABEL_19:
    v49 = v71;
    v50 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v16, v48, 1, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v16, 1, v49) == 1)
    {
      sub_1BA5C699C((uint64_t)v16, &qword_1ED3B31B8, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive);
      v23 = v74;
    }
    else
    {
      v51 = v68;
      sub_1BB5C6984((uint64_t)v16, v68);
      sub_1BB5C6984(v51, v70);
      v23 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = sub_1BB393C50(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
      v53 = *(_QWORD *)(v23 + 16);
      v52 = *(_QWORD *)(v23 + 24);
      if (v53 >= v52 >> 1)
        v23 = sub_1BB393C50(v52 > 1, v53 + 1, 1, v23);
      *(_QWORD *)(v23 + 16) = v53 + 1;
      sub_1BB5C6984(v70, v23+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v53);
      v25 = v69;
    }
    v24 += 4;
    --v22;
  }
  while (v22);
  swift_bridgeObjectRelease();
  return v23;
}

unint64_t sub_1BB5C68DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B93A8;
  if (!qword_1ED3B93A8)
  {
    sub_1BA4B07F0(255, &qword_1ED3B93A0, (uint64_t (*)(uint64_t))type metadata accessor for WebArchive, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B93A8);
  }
  return result;
}

unint64_t sub_1BB5C693C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3B3170;
  if (!qword_1ED3B3170)
  {
    v1 = type metadata accessor for WebArchive();
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for WebArchive, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3B3170);
  }
  return result;
}

uint64_t sub_1BB5C6984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WebArchive();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BB5C69C8()
{
  unint64_t result;

  result = qword_1EF2C82F0;
  if (!qword_1EF2C82F0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for WebArchiveService.Errors, &type metadata for WebArchiveService.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF2C82F0);
  }
  return result;
}

uint64_t sub_1BB5C6A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WebArchive();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BB5C6A50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for WebArchiveRequest);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BB5C6A9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BB5C5368(a1, a2);
}

uint64_t sub_1BB5C6AB0()
{
  return sub_1BB5C54C0();
}

uint64_t sub_1BB5C6AC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BB5C5624(a1, a2);
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyMenu()
{
  return &type metadata for DebugFormatTemplateKeyMenu;
}

uint64_t sub_1BB5C6AEC()
{
  sub_1BB5C6C54();
  return sub_1BB874710();
}

uint64_t sub_1BB5C6B14()
{
  sub_1BB5C6C54();
  return sub_1BB87471C();
}

uint64_t sub_1BB5C6B3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BB5C6BFC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5C6C54();
  sub_1BB8746C8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1BB5C6BFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C82F8)
  {
    sub_1BB5C6C54();
    v0 = sub_1BB8741D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C82F8);
  }
}

unint64_t sub_1BB5C6C54()
{
  unint64_t result;

  result = qword_1EF2C8300;
  if (!qword_1EF2C8300)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E310, &type metadata for DebugFormatTemplateKeyMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8300);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyMenu.CodingKeys()
{
  return &type metadata for DebugFormatTemplateKeyMenu.CodingKeys;
}

unint64_t sub_1BB5C6CAC()
{
  unint64_t result;

  result = qword_1EF2C8308;
  if (!qword_1EF2C8308)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E2C0, &type metadata for DebugFormatTemplateKeyMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8308);
  }
  return result;
}

unint64_t sub_1BB5C6CF4()
{
  unint64_t result;

  result = qword_1EF2C8310;
  if (!qword_1EF2C8310)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E2E8, &type metadata for DebugFormatTemplateKeyMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8310);
  }
  return result;
}

uint64_t sub_1BB5C6D38(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  sub_1BB5C77F0(0, &qword_1EF2C8330, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5C7714();
  sub_1BB8746C8();
  v10[1] = a2;
  sub_1BB5C7758();
  sub_1BB5C784C(&qword_1EF2C8340, (uint64_t (*)(void))sub_1BB5C77AC, MEMORY[0x1E0DEAF10]);
  sub_1BB8741AC();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BB5C6E58()
{
  return 0x696F706B61657262;
}

uint64_t sub_1BB5C6E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696F706B61657262 && a2 == 0xEB0000000073746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BB874398();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BB5C6F24()
{
  sub_1BB5C7714();
  return sub_1BB874710();
}

uint64_t sub_1BB5C6F4C()
{
  sub_1BB5C7714();
  return sub_1BB87471C();
}

_QWORD *sub_1BB5C6F74@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1BB5C7464(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BB5C6F9C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BB5C6D38(a1, *v1);
}

void sub_1BB5C6FB4()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for FormatJSONEncoder();
  swift_allocObject();
  sub_1BB35A338(MEMORY[0x1E0DEE9D8]);
  sub_1BB5C73CC();
  sub_1BB86BD28();
  v1 = v0;
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_1BB5C734C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1BB5C75BC(a1);
  *a2 = result;
  return result;
}

void sub_1BB5C7370()
{
  sub_1BB5C6FB4();
}

uint64_t sub_1BB5C7378(uint64_t *a1, uint64_t *a2)
{
  return sub_1BA882078(*a1, *a2);
}

unint64_t sub_1BB5C7388()
{
  unint64_t result;

  result = qword_1EF2C8318;
  if (!qword_1EF2C8318)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E36C, &type metadata for DebugFormatDebuggerBreakpoints);
    atomic_store(result, (unint64_t *)&qword_1EF2C8318);
  }
  return result;
}

unint64_t sub_1BB5C73CC()
{
  unint64_t result;

  result = qword_1EF2C8320;
  if (!qword_1EF2C8320)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E428, &type metadata for DebugFormatDebuggerBreakpoints);
    atomic_store(result, (unint64_t *)&qword_1EF2C8320);
  }
  return result;
}

void sub_1BB5C7410()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2A94A8)
  {
    sub_1BA86B498();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2A94A8);
  }
}

_QWORD *sub_1BB5C7464(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD v10[2];

  sub_1BB5C77F0(0, &qword_1EF2C8350, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v10 - v6;
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5C7714();
  sub_1BB87468C();
  if (!v1)
  {
    sub_1BB5C7758();
    sub_1BB5C784C(&qword_1EF2C8358, (uint64_t (*)(void))sub_1BB5C78B0, MEMORY[0x1E0DEAF40]);
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = (_QWORD *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t sub_1BB5C75BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_1BA747A10(a1, (uint64_t)v8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v1 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v1 = v6 & 0xFFFFFFFFFFFFLL;
    if (v1)
    {
      v2 = sub_1BA9F1950(v6, v7);
      v4 = v3;
      type metadata accessor for FormatJSONDecoder();
      swift_allocObject();
      sub_1BACC8234(MEMORY[0x1E0DEE9D8]);
      sub_1BB5C76C0();
      sub_1BB86DC78();
      sub_1BA69D314(v2, v4);
      swift_release();
      return v8[0];
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t sub_1BB5C76C0()
{
  unint64_t result;

  result = qword_1EF2C8328;
  if (!qword_1EF2C8328)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E400, &type metadata for DebugFormatDebuggerBreakpoints);
    atomic_store(result, (unint64_t *)&qword_1EF2C8328);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatDebuggerBreakpoints()
{
  return &type metadata for DebugFormatDebuggerBreakpoints;
}

unint64_t sub_1BB5C7714()
{
  unint64_t result;

  result = qword_1EF2C8338;
  if (!qword_1EF2C8338)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E514, &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8338);
  }
  return result;
}

void sub_1BB5C7758()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C4C80)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C4C80);
  }
}

unint64_t sub_1BB5C77AC()
{
  unint64_t result;

  result = qword_1EF2C8348;
  if (!qword_1EF2C8348)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB937D4C, &type metadata for FormatDebuggerBreakpoint);
    atomic_store(result, (unint64_t *)&qword_1EF2C8348);
  }
  return result;
}

void sub_1BB5C77F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB5C7714();
    v7 = a3(a1, &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BB5C784C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BB5C7758();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCE5B24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BB5C78B0()
{
  unint64_t result;

  result = qword_1EF2C8360;
  if (!qword_1EF2C8360)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB937D74, &type metadata for FormatDebuggerBreakpoint);
    atomic_store(result, (unint64_t *)&qword_1EF2C8360);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DebugFormatDebuggerBreakpoints.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB5C7934 + 4 * byte_1BB92E360[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB5C7954 + 4 * byte_1BB92E365[v4]))();
}

_BYTE *sub_1BB5C7934(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB5C7954(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5C795C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5C7964(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5C796C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5C7974(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatDebuggerBreakpoints.CodingKeys()
{
  return &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys;
}

unint64_t sub_1BB5C7994()
{
  unint64_t result;

  result = qword_1EF2C8368;
  if (!qword_1EF2C8368)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E4EC, &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8368);
  }
  return result;
}

unint64_t sub_1BB5C79DC()
{
  unint64_t result;

  result = qword_1EF2C8370;
  if (!qword_1EF2C8370)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E45C, &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8370);
  }
  return result;
}

unint64_t sub_1BB5C7A24()
{
  unint64_t result;

  result = qword_1EF2C8378;
  if (!qword_1EF2C8378)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E484, &type metadata for DebugFormatDebuggerBreakpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8378);
  }
  return result;
}

uint64_t FormatAudioTrack.Resolved.identifier.getter()
{
  id v0;
  uint64_t v1;
  id v3;

  type metadata accessor for FormatAudioTrack.Resolved();
  sub_1BA6C5A68();
  sub_1BB86ED1C();
  v0 = objc_msgSend(v3, sel_identifier);
  swift_unknownObjectRelease();
  v1 = sub_1BB8729A0();

  return v1;
}

uint64_t FormatAudioTrack.Resolved.headline.getter()
{
  uint64_t v1;

  type metadata accessor for FormatAudioTrack.Resolved();
  sub_1BA6C5A68();
  sub_1BB86ED1C();
  return v1;
}

uint64_t type metadata accessor for FormatAudioTrack.Resolved()
{
  uint64_t result;

  result = qword_1ED3AFEB0;
  if (!qword_1ED3AFEB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FormatAudioTrack.Resolved.title.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v9[2];

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for FormatAudioTrack.Resolved();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = *(_QWORD *)(v1 + 8);
  sub_1BB5C7C7C(v1, (uint64_t)v4);
  if (!v6)
  {
    sub_1BA6C5A68();
    sub_1BB86ED1C();
    v7 = objc_msgSend(v9[1], sel_title);
    swift_unknownObjectRelease();
    if (v7)
    {
      v5 = sub_1BB8729A0();

    }
    else
    {
      v5 = 0;
    }
  }
  swift_bridgeObjectRetain();
  sub_1BB5C7CC0((uint64_t)v4);
  return v5;
}

uint64_t sub_1BB5C7C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatAudioTrack.Resolved();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BB5C7CC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatAudioTrack.Resolved();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id FormatAudioTrack.Resolved.featureName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v9[2];

  v1 = v0;
  v2 = type metadata accessor for FormatAudioTrack.Resolved();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(id *)(v0 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  sub_1BB5C7C7C(v1, (uint64_t)v4);
  if (!v6)
  {
    sub_1BA6C5A68();
    sub_1BB86ED1C();
    v5 = objc_msgSend(v9[1], sel_sourceChannel);
    swift_unknownObjectRelease();
    if (v5)
    {
      v7 = objc_msgSend(v5, sel_name);
      swift_unknownObjectRelease();
      v5 = (id)sub_1BB8729A0();

    }
  }
  swift_bridgeObjectRetain();
  sub_1BB5C7CC0((uint64_t)v4);
  return v5;
}

uint64_t FormatAudioTrack.Resolved.init(headline:overrides:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];

  v6 = sub_1BB86E008();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2[1];
  v18[0] = *a2;
  v11 = a2[2];
  v12 = a2[3];
  type metadata accessor for FormatAudioTrack.Resolved();
  v18[1] = a1;
  v13 = qword_1ED39E360;
  swift_unknownObjectRetain();
  if (v13 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED39A530);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
  MEMORY[0x1E0C80A78](v15);
  v18[-2] = sub_1BA768D08();
  swift_getKeyPath();
  sub_1BB86ED10();
  result = swift_unknownObjectRelease();
  if (v10 == 1)
  {
    v17 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v17 = v18[0];
  }
  *a3 = v17;
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  return result;
}

uint64_t sub_1BB5C7FA0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E696C646165685FLL;
  else
    return 0x656469727265766FLL;
}

uint64_t sub_1BB5C7FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5C8BD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5C8004()
{
  sub_1BB5C8504();
  return sub_1BB874710();
}

uint64_t sub_1BB5C802C()
{
  sub_1BB5C8504();
  return sub_1BB87471C();
}

uint64_t FormatAudioTrack.Resolved.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE v12[16];
  __int128 v13;
  __int128 v14;

  v3 = v1;
  sub_1BB5C8548(0, &qword_1ED39C140, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5C8504();
  sub_1BB8746C8();
  v10 = v3[1];
  v13 = *v3;
  v14 = v10;
  v12[15] = 0;
  sub_1BAA5BAD4();
  sub_1BB8741AC();
  if (!v2)
  {
    type metadata accessor for FormatAudioTrack.Resolved();
    LOBYTE(v13) = 1;
    sub_1BA6C5A68();
    sub_1BA60511C((unint64_t *)&qword_1ED39A620, MEMORY[0x1E0DB5098]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t FormatAudioTrack.Resolved.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v22 = a2;
  sub_1BA6C5A68();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x1E0C80A78](v4);
  v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5C8548(0, &qword_1ED39C0A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v26 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - v8;
  v10 = type metadata accessor for FormatAudioTrack.Resolved();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5C8504();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v10;
  v21 = a1;
  v13 = v12;
  v15 = v23;
  v14 = v24;
  v16 = v25;
  v29 = 0;
  sub_1BAA5BB58();
  sub_1BB8740D4();
  v17 = v28;
  *(_OWORD *)v13 = v27;
  *((_OWORD *)v13 + 1) = v17;
  LOBYTE(v27) = 1;
  sub_1BA60511C((unint64_t *)&qword_1ED39A630, MEMORY[0x1E0DB50A0]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v26);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v13[*(int *)(v20 + 20)], v15, v16);
  sub_1BB5C7C7C((uint64_t)v13, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_1BB5C7CC0((uint64_t)v13);
}

uint64_t sub_1BB5C843C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatAudioTrack.Resolved.init(from:)(a1, a2);
}

uint64_t sub_1BB5C8450(_QWORD *a1)
{
  return FormatAudioTrack.Resolved.encode(to:)(a1);
}

uint64_t sub_1BB5C8464()
{
  id v0;
  uint64_t v1;
  id v3;

  sub_1BA6C5A68();
  sub_1BB86ED1C();
  v0 = objc_msgSend(v3, sel_identifier);
  swift_unknownObjectRelease();
  v1 = sub_1BB8729A0();

  return v1;
}

uint64_t sub_1BB5C84EC()
{
  return 8;
}

_QWORD *sub_1BB5C84F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1BB5C8504()
{
  unint64_t result;

  result = qword_1ED39B2C8;
  if (!qword_1ED39B2C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E714, &_s8ResolvedV10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1ED39B2C8);
  }
  return result;
}

void sub_1BB5C8548(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB5C8504();
    v7 = a3(a1, &_s8ResolvedV10CodingKeysON_2, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t *_s8ResolvedVwCP_2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1BA6C5A68();
    v11 = v10;
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v8, v9, v11);
  }
  return v3;
}

uint64_t _s8ResolvedVwxx_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  sub_1BA6C5A68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *_s8ResolvedVwcp_3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_1BA6C5A68();
  v10 = v9;
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  return a1;
}

_QWORD *_s8ResolvedVwca_3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_1BA6C5A68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *_s8ResolvedVwtk_2(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  sub_1BA6C5A68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *_s8ResolvedVwta_3(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  sub_1BA6C5A68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t _s8ResolvedVwet_2()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5C88B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_1BA6C5A68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t _s8ResolvedVwst_2()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5C8944(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_1BA6C5A68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1BB5C89B8()
{
  unint64_t v0;

  sub_1BA6C5A68();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t _s8ResolvedV10CodingKeysOwst_2(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5C8A78 + 4 * byte_1BB92E56D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5C8AAC + 4 * byte_1BB92E568[v4]))();
}

uint64_t sub_1BB5C8AAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C8AB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5C8ABCLL);
  return result;
}

uint64_t sub_1BB5C8AC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5C8AD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5C8AD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5C8ADC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8ResolvedV10CodingKeysOMa_2()
{
  return &_s8ResolvedV10CodingKeysON_2;
}

unint64_t sub_1BB5C8AFC()
{
  unint64_t result;

  result = qword_1EF2C8388;
  if (!qword_1EF2C8388)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E6EC, &_s8ResolvedV10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1EF2C8388);
  }
  return result;
}

unint64_t sub_1BB5C8B44()
{
  unint64_t result;

  result = qword_1ED39B2E0;
  if (!qword_1ED39B2E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E65C, &_s8ResolvedV10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1ED39B2E0);
  }
  return result;
}

unint64_t sub_1BB5C8B8C()
{
  unint64_t result;

  result = qword_1ED39B2D8;
  if (!qword_1ED39B2D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92E684, &_s8ResolvedV10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1ED39B2D8);
  }
  return result;
}

uint64_t sub_1BB5C8BD0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x656469727265766FLL && a2 == 0xE900000000000073 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E696C646165685FLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

id static FeedScaling.scale(font:scaleValue:)(void *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;

  sub_1BB86D930();
  if (byte_1EF3D0978 != 1)
    return a1;
  v2 = v1;
  objc_msgSend(a1, sel_pointSize);
  v4 = round(v2 * (v3 * 4.0) * 0.25);
  if (byte_1EF3D0978)
    v3 = v4;
  return objc_msgSend(a1, sel_fontWithSize_, v3);
}

double static FeedScaling.scale(value:scaleValue:)(double result, double a2)
{
  double v2;

  v2 = round(result * 4.0 * a2 * 0.25);
  if (byte_1EF3D0978)
    return v2;
  return result;
}

double static FeedScaling.scale(value:scaleValue:)(double a1)
{
  double v2;
  double v3;

  sub_1BB86D930();
  v3 = 1.0;
  if (byte_1EF3D0978)
    v3 = v2;
  return v3 * a1;
}

double static FeedScaling.scale(value:scaleValue:)(double a1, double a2, double a3)
{
  if (!byte_1EF3D0978)
    a3 = 1.0;
  return a3 * a1;
}

uint64_t FeedScaling.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FeedScaling.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for FeedScaling()
{
  return swift_lookUpClassMethod();
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatMicaData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1BB86FBD4();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_retain();
    if (v12(v9, 1, v10))
    {
      sub_1BA7735BC();
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = *(int *)(a3 + 24);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
  }
  return v4;
}

_QWORD *initializeWithCopy for FormatMicaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86FBD4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    sub_1BA7735BC();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

_QWORD *assignWithCopy for FormatMicaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86FBD4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1BA7735BC();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_DWORD *)v16 = v18;
  return a1;
}

_QWORD *initializeWithTake for FormatMicaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86FBD4();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1BA7735BC();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  return a1;
}

_QWORD *assignWithTake for FormatMicaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BB86FBD4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_1BA7735BC();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatMicaData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5C93C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  sub_1BA7735BC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 4);
  if (v9 > 2)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FormatMicaData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BB5C9454(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BA7735BC();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 24) + 4) = -(char)a2;
}

uint64_t sub_1BB5C94D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  sub_1BB5C9754();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v15 = a2;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 40));
  v13[0] = sub_1BB870240();
  v13[1] = v9;
  v10 = sub_1BB86C9DC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_1BA7114A0();
  v11 = sub_1BB873B34();
  sub_1BB5C97A8((uint64_t)v8);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v11 + 1) < 3)
    return (3u >> ((v11 + 1) & 7)) & 1;
  type metadata accessor for ComparisonResult(0);
  v14 = v11;
  result = sub_1BB874524();
  __break(1u);
  return result;
}

uint64_t sub_1BB5C9614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  sub_1BB5C9754();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v15 = a2;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 40));
  v13[0] = sub_1BB870240();
  v13[1] = v9;
  v10 = sub_1BB86C9DC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_1BA7114A0();
  v11 = sub_1BB873B34();
  sub_1BB5C97A8((uint64_t)v8);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v11 + 1) < 3)
    return (6u >> ((v11 + 1) & 7)) & 1;
  type metadata accessor for ComparisonResult(0);
  v14 = v11;
  result = sub_1BB874524();
  __break(1u);
  return result;
}

void sub_1BB5C9754()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39C230)
  {
    sub_1BB86C9DC();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39C230);
  }
}

uint64_t sub_1BB5C97A8(uint64_t a1)
{
  uint64_t v2;

  sub_1BB5C9754();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for DebugFormatBindingSection()
{
  return &type metadata for DebugFormatBindingSection;
}

uint64_t InternalErrorViewLayout.frame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.iconImageViewFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.titleLabelFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.errorLabelFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.subtitleLabelFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.footerLabelFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.buttonFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.attachmentLabelFrame.getter()
{
  return swift_retain();
}

uint64_t InternalErrorViewLayout.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_1BA62E724();
  swift_allocObject();
  v2 = sub_1BB86D450();
  swift_allocObject();
  v3 = sub_1BB86D450();
  swift_allocObject();
  v4 = sub_1BB86D450();
  swift_allocObject();
  v5 = sub_1BB86D450();
  swift_allocObject();
  v6 = sub_1BB86D450();
  swift_allocObject();
  v7 = sub_1BB86D450();
  swift_allocObject();
  v8 = sub_1BB86D450();
  swift_allocObject();
  result = sub_1BB86D450();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = result;
  return result;
}

double InternalErrorViewLayout.Attributes.frame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double InternalErrorViewLayout.Attributes.iconImageViewFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double InternalErrorViewLayout.Attributes.errorLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

double InternalErrorViewLayout.Attributes.titleLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

double InternalErrorViewLayout.Attributes.subtitleLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

double InternalErrorViewLayout.Attributes.footerLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 160);
}

double InternalErrorViewLayout.Attributes.buttonFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 192);
}

double InternalErrorViewLayout.Attributes.attachmentLabelFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 224);
}

uint64_t sub_1BB5C9A50(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5C9A80
                                                            + 4 * asc_1BB92E850[a1]))(0x656D617266, 0xE500000000000000);
}

unint64_t sub_1BB5C9A80()
{
  return 0xD000000000000012;
}

unint64_t sub_1BB5C9ADC()
{
  return 0xD000000000000010;
}

uint64_t sub_1BB5C9B34()
{
  unsigned __int8 *v0;

  return sub_1BB5C9A50(*v0);
}

uint64_t sub_1BB5C9B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5CE0F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5C9B60()
{
  sub_1BB5CCDCC();
  return sub_1BB874710();
}

uint64_t sub_1BB5C9B88()
{
  sub_1BB5CCDCC();
  return sub_1BB87471C();
}

uint64_t InternalErrorViewLayout.Attributes.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  sub_1BA4CDF6C(0, &qword_1EF2C8390, (uint64_t (*)(void))sub_1BB5CCDCC, (uint64_t)&type metadata for InternalErrorViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v25 - v7;
  v48 = *v1;
  v9 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v46 = *((_QWORD *)v1 + 5);
  v47 = v11;
  v12 = *((_QWORD *)v1 + 6);
  v44 = *((_QWORD *)v1 + 7);
  v45 = v12;
  v13 = *((_QWORD *)v1 + 8);
  v42 = *((_QWORD *)v1 + 9);
  v43 = v13;
  v39 = *((_QWORD *)v1 + 10);
  v38 = *((_QWORD *)v1 + 11);
  v35 = v1[6];
  v37 = *((_QWORD *)v1 + 14);
  v36 = *((_QWORD *)v1 + 15);
  v32 = v1[8];
  v34 = *((_QWORD *)v1 + 18);
  v33 = *((_QWORD *)v1 + 19);
  v29 = v1[10];
  v31 = *((_QWORD *)v1 + 22);
  v30 = *((_QWORD *)v1 + 23);
  v41 = *((_QWORD *)v1 + 24);
  v14 = *((_QWORD *)v1 + 26);
  v40 = *((_QWORD *)v1 + 25);
  v15 = *((_QWORD *)v1 + 27);
  v16 = *((_QWORD *)v1 + 28);
  v18 = *((_QWORD *)v1 + 29);
  v17 = *((_QWORD *)v1 + 30);
  v19 = *((_QWORD *)v1 + 31);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5CCDCC();
  sub_1BB8746C8();
  v49 = v48;
  v50 = v9;
  v51 = v10;
  v52 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA4A2870(&qword_1EF2A9A18, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    v20 = v42;
    v21 = v43;
    v28 = v15;
    *(_QWORD *)&v48 = v14;
    v22 = v40;
    v23 = v41;
    v26 = v19;
    v27 = v17;
    *(_QWORD *)&v49 = v47;
    *((_QWORD *)&v49 + 1) = v46;
    v50 = v45;
    v51 = v44;
    v52 = 1;
    sub_1BB8741AC();
    *(_QWORD *)&v49 = v21;
    *((_QWORD *)&v49 + 1) = v20;
    v50 = v39;
    v51 = v38;
    v52 = 2;
    sub_1BB8741AC();
    v49 = v35;
    v50 = v37;
    v51 = v36;
    v52 = 3;
    sub_1BB8741AC();
    v49 = v32;
    v50 = v34;
    v51 = v33;
    v52 = 4;
    sub_1BB8741AC();
    v49 = v29;
    v50 = v31;
    v51 = v30;
    v52 = 5;
    sub_1BB8741AC();
    *(_QWORD *)&v49 = v23;
    *((_QWORD *)&v49 + 1) = v22;
    v50 = v48;
    v51 = v28;
    v52 = 6;
    sub_1BB8741AC();
    *(_QWORD *)&v49 = v16;
    *((_QWORD *)&v49 + 1) = v18;
    v50 = v27;
    v51 = v26;
    v52 = 7;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t InternalErrorViewLayout.Attributes.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  char v59;

  sub_1BA4CDF6C(0, &qword_1ED3B0440, (uint64_t (*)(void))sub_1BB5CCDCC, (uint64_t)&type metadata for InternalErrorViewLayout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v35 - v8;
  v10 = a1[3];
  v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BB5CCDCC();
  sub_1BB87468C();
  if (!v2)
  {
    type metadata accessor for CGRect(0);
    v59 = 0;
    sub_1BA4A2870((unint64_t *)&unk_1ED3B9910, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
    sub_1BB8740D4();
    v11 = v57;
    v12 = v58;
    v59 = 1;
    sub_1BB8740D4();
    v13 = v57;
    v14 = v58;
    v59 = 2;
    sub_1BB8740D4();
    v52 = *((_QWORD *)&v14 + 1);
    v53 = v14;
    v54 = *((_QWORD *)&v13 + 1);
    v55 = v13;
    v15 = v57;
    v16 = v58;
    v59 = 3;
    sub_1BB8740D4();
    v48 = *((_QWORD *)&v16 + 1);
    v49 = v16;
    v50 = *((_QWORD *)&v15 + 1);
    v51 = v15;
    v17 = v57;
    v18 = v58;
    v59 = 4;
    sub_1BB8740D4();
    v44 = *((_QWORD *)&v18 + 1);
    v45 = v18;
    v46 = *((_QWORD *)&v17 + 1);
    v47 = v17;
    v19 = v57;
    v20 = v58;
    v59 = 5;
    sub_1BB8740D4();
    v40 = *((_QWORD *)&v20 + 1);
    v41 = v20;
    v42 = *((_QWORD *)&v19 + 1);
    v43 = v19;
    v21 = v57;
    v22 = v58;
    v59 = 6;
    sub_1BB8740D4();
    v38 = *((_QWORD *)&v57 + 1);
    v39 = v57;
    v36 = *((_QWORD *)&v58 + 1);
    v37 = v58;
    v59 = 7;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v12;
    v24 = v54;
    *(_QWORD *)(a2 + 32) = v55;
    *(_QWORD *)(a2 + 40) = v24;
    v25 = v52;
    *(_QWORD *)(a2 + 48) = v53;
    *(_QWORD *)(a2 + 56) = v25;
    v26 = v50;
    *(_QWORD *)(a2 + 64) = v51;
    *(_QWORD *)(a2 + 72) = v26;
    v27 = v48;
    *(_QWORD *)(a2 + 80) = v49;
    *(_QWORD *)(a2 + 88) = v27;
    v28 = v46;
    *(_QWORD *)(a2 + 96) = v47;
    *(_QWORD *)(a2 + 104) = v28;
    v29 = v44;
    *(_QWORD *)(a2 + 112) = v45;
    *(_QWORD *)(a2 + 120) = v29;
    v30 = v42;
    *(_QWORD *)(a2 + 128) = v43;
    *(_QWORD *)(a2 + 136) = v30;
    v31 = v40;
    *(_QWORD *)(a2 + 144) = v41;
    *(_QWORD *)(a2 + 152) = v31;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v22;
    v32 = v38;
    *(_QWORD *)(a2 + 192) = v39;
    *(_QWORD *)(a2 + 200) = v32;
    v33 = v36;
    *(_QWORD *)(a2 + 208) = v37;
    *(_QWORD *)(a2 + 216) = v33;
    v34 = v58;
    *(_OWORD *)(a2 + 224) = v57;
    *(_OWORD *)(a2 + 240) = v34;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
}

uint64_t sub_1BB5CA4EC()
{
  sub_1BB5CE658();
  return sub_1BB870FF0();
}

uint64_t sub_1BB5CA514@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InternalErrorViewLayout.Attributes.init(from:)(a1, a2);
}

uint64_t sub_1BB5CA528(_QWORD *a1)
{
  return InternalErrorViewLayout.Attributes.encode(to:)(a1);
}

uint64_t sub_1BB5CA53C()
{
  sub_1BB5CE51C();
  return sub_1BB86D96C();
}

uint64_t InternalErrorViewLayout.Context.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InternalErrorViewLayout.Context.key.getter()
{
  return swift_retain();
}

id InternalErrorViewLayout.Context.title.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

void *InternalErrorViewLayout.Context.errorMessage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

id InternalErrorViewLayout.Context.subtitle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

id InternalErrorViewLayout.Context.footer.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

id InternalErrorViewLayout.Context.buttonTitle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

id InternalErrorViewLayout.Context.attachmentTitle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

id sub_1BB5CA624()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.756862745, 0.431372549, 1.0, 1.0);
  qword_1ED476CA8 = (uint64_t)result;
  return result;
}

uint64_t sub_1BB5CA670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t inited;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  _QWORD *v49;
  id *v50;
  int EnumCaseMultiPayload;
  void *v52;
  unint64_t v53;
  char *v54;
  id v55;
  id v56;
  uint64_t v57;
  id *v58;
  int v59;
  void (*v60)(id *, uint64_t, uint64_t, uint64_t);
  id v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  id *v85;
  _QWORD *v86;
  void *v87;
  id v88;
  id *v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  uint64_t v95;
  id *v96;
  void *v97;
  double v98;
  id *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  void *v104;
  uint64_t v105;
  id v106;
  id v107;
  void *v108;
  void *v109;
  id v110;
  _QWORD *v111;
  uint64_t v112;
  id *v113;
  id v114;
  id *v115;
  void *v116;
  id v117;
  id *v118;
  id v119;
  void *v120;
  void *v121;
  id v122;
  uint64_t result;
  _QWORD v124[2];
  id *v125;
  id v126;
  id *v127;
  id *v128;
  id v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  _QWORD *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;

  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED39B410, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11);
  v125 = (id *)((char *)v124 - v12);
  v127 = (id *)type metadata accessor for InternalErrorViewModel();
  MEMORY[0x1E0C80A78](v127);
  v128 = (id *)((char *)v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = sub_1BB86D7A4();
  v14 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140);
  v16 = (char *)v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for GroupLayoutContext();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey, v10);
  MEMORY[0x1E0C80A78](v20);
  v22 = (_QWORD *)((char *)v124 - v21);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a4;
  v23 = *(int *)(type metadata accessor for InternalErrorViewLayout.Context() + 48);
  v136 = a5;
  v132 = a3;
  sub_1BA4C2DD8(a3, (uint64_t)a5 + v23, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
  v24 = objc_allocWithZone(MEMORY[0x1E0DC1288]);
  swift_retain();
  v25 = objc_msgSend(v24, sel_init);
  objc_msgSend(v25, sel_setAlignment_, 1);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3BA010, (uint64_t (*)(uint64_t))sub_1BA81D1A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v138 = v26;
  inited = swift_initStackObject();
  v137 = xmmword_1BB87FC80;
  *(_OWORD *)(inited + 16) = xmmword_1BB87FC80;
  v28 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v130 = v28;
  v131 = a4;
  sub_1BB27CA04(v22);
  v29 = type metadata accessor for DebugGroupLayoutKey();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v22, 1, v29) == 1)
  {
    sub_1BA5C699C((uint64_t)v22, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey);
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)v22 + *(int *)(v29 + 28), (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4A2E80((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for DebugGroupLayoutKey);
    v30 = v140;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v140);
    sub_1BA4A2E80((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v31 = (void *)sub_1BB86D738();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v30);
    v32 = objc_msgSend(v31, sel_horizontalSizeClass);

    if (v32 == (id)2)
    {
      v33 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
      v34 = sub_1BB873690();
      goto LABEL_6;
    }
  }
  v33 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  v35 = (void *)sub_1BB872970();
  v34 = sub_1BB873690();

LABEL_6:
  *(_QWORD *)(inited + 40) = v34;
  v36 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v33;
  *(_QWORD *)(inited + 72) = v36;
  v37 = (void *)objc_opt_self();
  v38 = v36;
  v135 = v37;
  v39 = objc_msgSend(v37, sel_whiteColor);
  v40 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9990);
  *(_QWORD *)(inited + 80) = v39;
  v41 = (void *)*MEMORY[0x1E0DC1178];
  v134 = v40;
  *(_QWORD *)(inited + 104) = v40;
  *(_QWORD *)(inited + 112) = v41;
  v133 = sub_1BA49A224(0, (unint64_t *)&unk_1ED3B98C0);
  *(_QWORD *)(inited + 144) = v133;
  *(_QWORD *)(inited + 120) = v25;
  v126 = v41;
  v129 = v25;
  sub_1BA76E82C(inited);
  v42 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v43 = (void *)sub_1BB872970();
  type metadata accessor for Key(0);
  v45 = v44;
  v46 = sub_1BA4A2870((unint64_t *)&qword_1ED3B9880, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BB87BE5C);
  v47 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v48 = objc_msgSend(v42, sel_initWithString_attributes_, v43, v47);

  v49 = v136;
  v136[3] = v48;
  v50 = v128;
  sub_1BA4C2DD8(v132, (uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v139 = v46;
  v140 = v45;
  if (EnumCaseMultiPayload == 1)
  {
    v52 = v38;
    v53 = 0x1E0CB3000uLL;
    sub_1BA4A2E80((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
LABEL_12:
    v73 = 0;
    goto LABEL_13;
  }
  v54 = (char *)v50[1];
  v141 = *v50;
  v55 = v141;
  v56 = v141;
  sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
  v57 = type metadata accessor for FormatLayoutError();
  v58 = v125;
  v59 = swift_dynamicCast();
  v60 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v57 - 8) + 56);
  if (!v59)
  {
    v52 = v38;
    v53 = 0x1E0CB3000uLL;
    v60(v58, 1, 1, v57);
    swift_release();

    sub_1BA5C699C((uint64_t)v58, (unint64_t *)&qword_1ED39B410, (uint64_t (*)(uint64_t))type metadata accessor for FormatLayoutError);
    goto LABEL_12;
  }
  v60(v58, 0, 1, v57);
  if (swift_getEnumCaseMultiPayload() == 63)
  {
    v127 = (id *)*v58;
    v61 = v58[2];
    v124[1] = v58[1];

    v62 = swift_initStackObject();
    *(_OWORD *)(v62 + 16) = v137;
    v63 = v130;
    *(_QWORD *)(v62 + 32) = v130;
    v64 = v63;
    sub_1BB5CB328((_QWORD *)(v62 + 40));
    *(_QWORD *)(v62 + 72) = v38;
    v128 = (id *)v54;
    v52 = v38;
    v65 = v38;
    *(_QWORD *)(v62 + 80) = objc_msgSend(v135, sel_whiteColor);
    v66 = v126;
    *(_QWORD *)(v62 + 104) = v134;
    *(_QWORD *)(v62 + 112) = v66;
    *(_QWORD *)(v62 + 144) = v133;
    v67 = v129;
    *(_QWORD *)(v62 + 120) = v129;
    v68 = v67;
    v69 = v66;
    sub_1BA76E82C(v62);
    v53 = 0x1E0CB3000uLL;
    v70 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v71 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    v72 = (void *)sub_1BB872760();
    swift_bridgeObjectRelease();
    v73 = objc_msgSend(v70, sel_initWithString_attributes_, v71, v72);

    v49 = v136;
    swift_release();
    goto LABEL_14;
  }
  v52 = v38;
  v53 = 0x1E0CB3000;

  swift_release();
  sub_1BA4A2E80((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for FormatLayoutError);
  v73 = 0;
LABEL_13:
  v66 = v126;
LABEL_14:
  v49[4] = v73;
  v74 = swift_initStackObject();
  *(_OWORD *)(v74 + 16) = v137;
  v75 = v130;
  *(_QWORD *)(v74 + 32) = v130;
  v128 = v75;
  sub_1BB5CB554((_QWORD *)(v74 + 40));
  *(_QWORD *)(v74 + 72) = v52;
  v126 = v52;
  v76 = v135;
  *(_QWORD *)(v74 + 80) = objc_msgSend(v135, sel_whiteColor);
  v78 = v133;
  v77 = v134;
  *(_QWORD *)(v74 + 104) = v134;
  *(_QWORD *)(v74 + 112) = v66;
  *(_QWORD *)(v74 + 144) = v78;
  v79 = v129;
  *(_QWORD *)(v74 + 120) = v129;
  v129 = v79;
  v125 = v66;
  sub_1BA76E82C(v74);
  v80 = objc_allocWithZone(*(Class *)(v53 + 1176));
  v81 = (void *)sub_1BB872970();
  v130 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  v82 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v83 = objc_msgSend(v80, sel_initWithString_attributes_, v81, v82);

  v49[5] = v83;
  v84 = swift_initStackObject();
  *(_OWORD *)(v84 + 16) = v137;
  v85 = v128;
  *(_QWORD *)(v84 + 32) = v128;
  v127 = v85;
  v86 = v49;
  sub_1BB5CB78C((_QWORD *)(v84 + 40));
  v87 = v126;
  *(_QWORD *)(v84 + 72) = v126;
  v88 = v87;
  *(_QWORD *)(v84 + 80) = objc_msgSend(v76, sel_whiteColor);
  *(_QWORD *)(v84 + 104) = v77;
  v89 = v125;
  *(_QWORD *)(v84 + 144) = v78;
  v90 = v129;
  *(_QWORD *)(v84 + 112) = v89;
  *(_QWORD *)(v84 + 120) = v90;
  v129 = v90;
  v128 = v89;
  sub_1BA76E82C(v84);
  v91 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v92 = (void *)sub_1BB872970();
  v93 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v94 = objc_msgSend(v91, sel_initWithString_attributes_, v92, v93);

  v86[6] = v94;
  v95 = swift_initStackObject();
  *(_OWORD *)(v95 + 16) = xmmword_1BB87A390;
  v96 = v127;
  *(_QWORD *)(v95 + 32) = v127;
  v97 = (void *)objc_opt_self();
  v98 = *MEMORY[0x1E0DC1438];
  v99 = v96;
  v100 = objc_msgSend(v97, sel_systemFontOfSize_weight_, 17.0, v98);
  v101 = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  *(_QWORD *)(v95 + 40) = v100;
  *(_QWORD *)(v95 + 64) = v101;
  *(_QWORD *)(v95 + 72) = v88;
  v102 = qword_1ED3D2058;
  v103 = v88;
  if (v102 != -1)
    swift_once();
  v104 = (void *)qword_1ED476CA8;
  v105 = v134;
  *(_QWORD *)(v95 + 104) = v134;
  *(_QWORD *)(v95 + 80) = v104;
  v106 = v104;
  sub_1BA76E82C(v95);
  v107 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v108 = (void *)sub_1BB872970();
  v109 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v110 = objc_msgSend(v107, sel_initWithString_attributes_, v108, v109);

  v111 = v136;
  v136[7] = v110;
  v112 = swift_initStackObject();
  *(_OWORD *)(v112 + 16) = v137;
  *(_QWORD *)(v112 + 32) = v99;
  v113 = v99;
  sub_1BB5CB9C4((_QWORD *)(v112 + 40));
  *(_QWORD *)(v112 + 72) = v103;
  v114 = v103;
  *(_QWORD *)(v112 + 80) = objc_msgSend(v135, sel_whiteColor);
  *(_QWORD *)(v112 + 104) = v105;
  v115 = v128;
  *(_QWORD *)(v112 + 144) = v133;
  v116 = v129;
  *(_QWORD *)(v112 + 112) = v115;
  *(_QWORD *)(v112 + 120) = v116;
  v117 = v116;
  v118 = v115;
  sub_1BA76E82C(v112);
  v119 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v120 = (void *)sub_1BB872970();
  v121 = (void *)sub_1BB872760();
  swift_bridgeObjectRelease();
  v122 = objc_msgSend(v119, sel_initWithString_attributes_, v120, v121);

  swift_release();
  result = sub_1BA4A2E80(v132, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
  v111[8] = v122;
  return result;
}

uint64_t sub_1BB5CB328@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  unint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;

  v2 = sub_1BB86D7A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupLayoutContext();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - v10;
  sub_1BB27CA04((uint64_t *)((char *)&v18 - v10));
  v12 = type metadata accessor for DebugGroupLayoutKey();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
  {
    sub_1BA5C699C((uint64_t)v11, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey);
    v13 = 13.0;
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)&v11[*(int *)(v12 + 28)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DebugGroupLayoutKey);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v14 = (void *)sub_1BB86D738();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = (unint64_t)objc_msgSend(v14, sel_horizontalSizeClass);

    v13 = 13.0;
    if (v15 <= 2)
      v13 = dbl_1BB92ECD0[v15];
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_italicSystemFontOfSize_, v13);
  result = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  a1[3] = result;
  *a1 = v16;
  return result;
}

uint64_t sub_1BB5CB554@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  unint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;

  v2 = sub_1BB86D7A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupLayoutContext();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - v10;
  sub_1BB27CA04((uint64_t *)((char *)&v18 - v10));
  v12 = type metadata accessor for DebugGroupLayoutKey();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
  {
    sub_1BA5C699C((uint64_t)v11, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey);
    v13 = 15.0;
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)&v11[*(int *)(v12 + 28)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DebugGroupLayoutKey);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v14 = (void *)sub_1BB86D738();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = (unint64_t)objc_msgSend(v14, sel_horizontalSizeClass);

    v13 = 15.0;
    if (v15 <= 2)
      v13 = dbl_1BB92ECB8[v15];
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v13, *MEMORY[0x1E0DC1438]);
  result = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  a1[3] = result;
  *a1 = v16;
  return result;
}

uint64_t sub_1BB5CB78C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  unint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;

  v2 = sub_1BB86D7A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupLayoutContext();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - v10;
  sub_1BB27CA04((uint64_t *)((char *)&v18 - v10));
  v12 = type metadata accessor for DebugGroupLayoutKey();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
  {
    sub_1BA5C699C((uint64_t)v11, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey);
    v13 = 13.0;
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)&v11[*(int *)(v12 + 28)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DebugGroupLayoutKey);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v14 = (void *)sub_1BB86D738();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = (unint64_t)objc_msgSend(v14, sel_horizontalSizeClass);

    v13 = 13.0;
    if (v15 <= 2)
      v13 = dbl_1BB92ECD0[v15];
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v13, *MEMORY[0x1E0DC1438]);
  result = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  a1[3] = result;
  *a1 = v16;
  return result;
}

uint64_t sub_1BB5CB9C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void *v14;
  unint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;

  v2 = sub_1BB86D7A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupLayoutContext();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - v10;
  sub_1BB27CA04((uint64_t *)((char *)&v18 - v10));
  v12 = type metadata accessor for DebugGroupLayoutKey();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
  {
    sub_1BA5C699C((uint64_t)v11, qword_1ED3B0048, (uint64_t (*)(uint64_t))type metadata accessor for DebugGroupLayoutKey);
    v13 = 13.0;
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)&v11[*(int *)(v12 + 28)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4A2E80((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DebugGroupLayoutKey);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_1BA4A2E80((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v14 = (void *)sub_1BB86D738();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = (unint64_t)objc_msgSend(v14, sel_horizontalSizeClass);

    v13 = 13.0;
    if (v15 <= 2)
      v13 = dbl_1BB92ECD0[v15];
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, v13, *MEMORY[0x1E0DC1420]);
  result = sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9940);
  a1[3] = result;
  *a1 = v16;
  return result;
}

uint64_t sub_1BB5CBC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1BA4CDF6C(0, &qword_1ED3AFBE8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = &v29[-v10];
  v32 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, double))(v8 + 104))(&v29[-v10], *MEMORY[0x1E0DB63C0], v7, v9);
  sub_1BB5CE4A0();
  sub_1BA4CDF6C(0, &qword_1ED3AFBC8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BB87CE70;
  v17 = (_QWORD *)(v16 + v15);
  v18 = sub_1BB86D714();
  MEMORY[0x1BCCE3B80](v18, 0.0, v19, v20, v21, v22);
  sub_1BB873288();
  *v17 = v23;
  v17[1] = v24;
  v17[2] = v25;
  v17[3] = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, *MEMORY[0x1E0DB5C20], v13);
  v30 = a2;
  v31 = a3;
  v27 = MEMORY[0x1E0DB5DD0];
  sub_1BB5CE5A8(0, &qword_1ED3AFBD8, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BB5CE560(&qword_1ED3AFBD0, &qword_1ED3AFBD8, (uint64_t (*)(uint64_t, _QWORD *))v27, MEMORY[0x1E0DB5DD8]);
  sub_1BB86D4BC();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1BB5CBE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, _QWORD, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a3;
  sub_1BA4CDF6C(0, &qword_1ED3AFBE8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v22 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - v6;
  v24 = a1;
  sub_1BB5CC074((uint64_t *)((char *)&v21 - v6));
  sub_1BB5CE4A0();
  sub_1BA4CDF6C(0, &qword_1ED3AFBC8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BB87A390;
  v14 = (char *)(v13 + v12);
  *(_QWORD *)v14 = 0x4071800000000000;
  v15 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v15(v14, *MEMORY[0x1E0DB5CA8], v9);
  v16 = &v14[v11];
  v17 = *MEMORY[0x1E0DB5C40];
  sub_1BA4CDF6C(0, &qword_1ED3D1EE0, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, MEMORY[0x1E0DB5C60]);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v15(v16, *MEMORY[0x1E0DB5C68], v9);
  v23 = v21;
  v19 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5CE5A8(0, &qword_1ED3AFBC0, MEMORY[0x1E0DB5A10]);
  sub_1BB5CE560(&qword_1ED3AFBB8, &qword_1ED3AFBC0, v19, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v22);
}

uint64_t sub_1BB5CC074@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  id v3;
  BOOL v4;
  unsigned int *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (void *)sub_1BB86D738();
  v3 = objc_msgSend(v2, sel_horizontalSizeClass);

  if (v3)
    v4 = v3 == (id)2;
  else
    v4 = 1;
  if (v4 || v3 != (id)1)
  {
    v6 = swift_allocObject();
    sub_1BB86D6FC();
    *(double *)(v6 + 16) = v7 * 0.6;
    *a1 = v6;
    v5 = (unsigned int *)MEMORY[0x1E0DB63E8];
  }
  else
  {
    v5 = (unsigned int *)MEMORY[0x1E0DB63C0];
  }
  v8 = *v5;
  sub_1BA4CDF6C(0, &qword_1ED3AFBE8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a1, v8, v9);
}

uint64_t sub_1BB5CC154(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t *);
  void (*v10)(uint64_t *);
  uint64_t (*v11)(uint64_t, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *);
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void (*v63)(uint64_t *, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t *, uint64_t, uint64_t);
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void (*v73)(uint64_t);
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  id v83;
  void (*v84)(uint64_t *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t *);
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t *);
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t KeyPath;
  __int128 v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t *, uint64_t);
  uint64_t v116;
  _QWORD *v117;
  void (*v118)(uint64_t);
  unsigned int v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  void (*v127)(uint64_t *);
  uint64_t v128;

  v117 = a2;
  v124 = a1;
  sub_1BA4CDF6C(0, &qword_1ED3AFBE8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (uint64_t *)((char *)&v105 - v6);
  v128 = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0x4038000000000000;
  *v7 = v8;
  v126 = *MEMORY[0x1E0DB63F0];
  v9 = *(void (**)(uint64_t *))(v5 + 104);
  v108 = v4;
  v9(v7);
  v10 = v9;
  v127 = v9;
  v11 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5CE5A8(0, &qword_1ED3AFBC0, MEMORY[0x1E0DB5A10]);
  v125 = v12;
  v116 = sub_1BB5CE560(&qword_1ED3AFBB8, &qword_1ED3AFBC0, v11, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4EC();
  v115 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  v115(v7, v4);
  v128 = a1;
  KeyPath = swift_getKeyPath();
  sub_1BA71C838();
  v14 = v13;
  v15 = swift_allocBox();
  v17 = v16;
  v18 = (uint64_t *)((char *)v16 + *(int *)(v14 + 48));
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0x4040000000000000;
  *v17 = v19;
  v20 = *MEMORY[0x1E0DB5FA0];
  v21 = sub_1BB86D894();
  v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104);
  v22(v17, v20, v21);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0x4040000000000000;
  *v18 = v23;
  v22(v18, v20, v21);
  *v7 = v15;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v10)(v7, *MEMORY[0x1E0DB63D0], v108);
  sub_1BB5CE4A0();
  v123 = v24;
  sub_1BA4CDF6C(0, &qword_1ED3AFBC8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v26 = *(_QWORD *)(v25 - 8);
  v107 = v25;
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v106 = *(_QWORD *)(v26 + 72);
  v113 = v28 + v106;
  v122 = v27 | 7;
  v29 = swift_allocObject();
  v111 = xmmword_1BB87CE70;
  *(_OWORD *)(v29 + 16) = xmmword_1BB87CE70;
  v30 = v29 + v28;
  v112 = *MEMORY[0x1E0DB5C40];
  v31 = v112;
  sub_1BA4CDF6C(0, &qword_1ED3D1EE0, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, MEMORY[0x1E0DB5C60]);
  v33 = v32;
  v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104);
  v121(v30, v31, v32);
  v119 = *MEMORY[0x1E0DB5C68];
  v118 = *(void (**)(uint64_t))(v26 + 104);
  v118(v30);
  v120 = sub_1BA4A2870(&qword_1ED3B0620, (uint64_t (*)(uint64_t))sub_1BA62E724, MEMORY[0x1E0DB5A60]);
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v34 = v108;
  v35 = v115;
  v115(v7, v108);
  v36 = v124;
  v128 = v124;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = 0x4020000000000000;
  *v7 = v37;
  v38 = v127;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v126, v34);
  sub_1BB86D4EC();
  v35(v7, v34);
  v128 = v36;
  swift_getKeyPath();
  v39 = swift_allocObject();
  v40 = v117;
  v41 = (void *)v117[3];
  *(_QWORD *)(v39 + 16) = v41;
  *v7 = v39;
  v109 = *MEMORY[0x1E0DB6340];
  v38(v7);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v111;
  v114 = v28;
  v43 = v42 + v28;
  KeyPath = v33;
  v121(v42 + v28, v112, v33);
  v44 = v107;
  ((void (*)(uint64_t, _QWORD))v118)(v43, v119);
  v45 = v41;
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v115(v7, v34);
  v46 = (void *)v40[4];
  if (v46)
  {
    v47 = v124;
    v128 = v124;
    swift_getKeyPath();
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = v46;
    *v7 = v48;
    v49 = v108;
    v50 = v127;
    ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v109, v108);
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v111;
    v52 = v51 + v114;
    v121(v51 + v114, v112, KeyPath);
    ((void (*)(uint64_t, _QWORD, uint64_t))v118)(v52, v119, v44);
    v105 = v46;
    sub_1BB86D4E0();
    swift_release();
    swift_bridgeObjectRelease();
    v53 = v115;
    v115(v7, v49);
    v128 = v47;
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = 0x4020000000000000;
    *v7 = v54;
    ((void (*)(uint64_t *, _QWORD, uint64_t))v50)(v7, v126, v49);
    sub_1BB86D4EC();

    v53(v7, v49);
  }
  v55 = v124;
  v128 = v124;
  swift_getKeyPath();
  v56 = swift_allocObject();
  v57 = (void *)v117[5];
  *(_QWORD *)(v56 + 16) = v57;
  *v7 = v56;
  v58 = v109;
  v59 = v108;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v109, v108);
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = v111;
  v61 = v60 + v114;
  v121(v60 + v114, v112, KeyPath);
  ((void (*)(uint64_t, _QWORD, uint64_t))v118)(v61, v119, v44);
  v62 = v57;
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v63 = v115;
  v115(v7, v59);
  v128 = v55;
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = 0x4030000000000000;
  *v7 = v64;
  v65 = (void (*)(uint64_t *, uint64_t, uint64_t))v127;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v126, v59);
  sub_1BB86D4EC();
  v63(v7, v59);
  v128 = v55;
  v105 = (id)swift_getKeyPath();
  v66 = swift_allocObject();
  v67 = (void *)v117[7];
  *(_QWORD *)(v66 + 16) = v67;
  *v7 = v66;
  v65(v7, v58, v59);
  v68 = v106;
  v69 = 2 * v106;
  v70 = v114;
  v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_1BB87FC80;
  v72 = (_QWORD *)(v71 + v70);
  *v72 = 0x406B800000000000;
  v73 = v118;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v118)(v72, *MEMORY[0x1E0DB5CA8], v44);
  v74 = (_QWORD *)((char *)v72 + v68);
  *v74 = 0x4030000000000000;
  v75 = v44;
  v76 = *MEMORY[0x1E0DB6030];
  v77 = sub_1BB86D8F4();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 104))(v74, v76, v77);
  v78 = *MEMORY[0x1E0DB6120];
  v79 = sub_1BB86D9B4();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 104))(v74, v78, v79);
  v80 = v75;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v73)(v74, *MEMORY[0x1E0DB5BA8], v75);
  v81 = (char *)v72 + v69;
  v82 = v112;
  v121((uint64_t)v81, v112, KeyPath);
  ((void (*)(char *, _QWORD, uint64_t))v73)(v81, v119, v80);
  v83 = v67;
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v84 = v115;
  v115(v7, v59);
  v85 = v124;
  v128 = v124;
  v86 = swift_allocObject();
  *(_QWORD *)(v86 + 16) = 0x4030000000000000;
  *v7 = v86;
  v87 = v127;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v126, v59);
  sub_1BB86D4EC();
  v84(v7, v59);
  v128 = v85;
  swift_getKeyPath();
  v88 = swift_allocObject();
  v89 = (void *)v117[6];
  *(_QWORD *)(v88 + 16) = v89;
  *v7 = v88;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v87)(v7, v109, v59);
  v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = v111;
  v91 = v90 + v114;
  v92 = v82;
  v93 = KeyPath;
  v121(v90 + v114, v92, KeyPath);
  ((void (*)(uint64_t, _QWORD, uint64_t))v118)(v91, v119, v107);
  v94 = v89;
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v84(v7, v59);
  v95 = v124;
  v128 = v124;
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 16) = 0x4030000000000000;
  *v7 = v96;
  v97 = v127;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v126, v59);
  sub_1BB86D4EC();
  v84(v7, v59);
  v128 = v95;
  swift_getKeyPath();
  v98 = swift_allocObject();
  v99 = (void *)v117[8];
  *(_QWORD *)(v98 + 16) = v99;
  *v7 = v98;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v97)(v7, v109, v59);
  v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = v111;
  v101 = v100 + v114;
  v121(v100 + v114, v112, v93);
  ((void (*)(uint64_t, _QWORD, uint64_t))v118)(v101, v119, v107);
  v102 = v99;
  sub_1BB86D4E0();
  swift_release();
  swift_bridgeObjectRelease();
  v84(v7, v59);
  v128 = v124;
  v103 = swift_allocObject();
  *(_QWORD *)(v103 + 16) = 0x4030000000000000;
  *v7 = v103;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v127)(v7, v126, v59);
  sub_1BB86D4EC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v84)(v7, v59);
}

unint64_t sub_1BB5CCDCC()
{
  unint64_t result;

  result = qword_1ED3B0160;
  if (!qword_1ED3B0160)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EB84, &type metadata for InternalErrorViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B0160);
  }
  return result;
}

unint64_t sub_1BB5CCE14()
{
  unint64_t result;

  result = qword_1ED3B0180;
  if (!qword_1ED3B0180)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B0180);
  }
  return result;
}

unint64_t sub_1BB5CCE5C()
{
  unint64_t result;

  result = qword_1EF2C8398;
  if (!qword_1EF2C8398)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C8398);
  }
  return result;
}

unint64_t sub_1BB5CCEA4()
{
  unint64_t result;

  result = qword_1ED3B0198;
  if (!qword_1ED3B0198)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B0198);
  }
  return result;
}

unint64_t sub_1BB5CCEEC()
{
  unint64_t result;

  result = qword_1ED3B0190;
  if (!qword_1ED3B0190)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B0190);
  }
  return result;
}

unint64_t sub_1BB5CCF34()
{
  unint64_t result;

  result = qword_1ED3B0178;
  if (!qword_1ED3B0178)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B0178);
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalErrorViewLayout()
{
  return &type metadata for InternalErrorViewLayout;
}

uint64_t getEnumTagSinglePayload for InternalErrorViewLayout.Attributes(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InternalErrorViewLayout.Attributes(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 256) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InternalErrorViewLayout.Attributes()
{
  return &type metadata for InternalErrorViewLayout.Attributes;
}

uint64_t *initializeBufferWithCopyOfBuffer for InternalErrorViewLayout.Context(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  void *v45;
  _QWORD *v46;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v21 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v21 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = (void *)a2[3];
    a1[2] = a2[2];
    a1[3] = (uint64_t)v6;
    v7 = (void *)a2[4];
    v8 = (void *)a2[5];
    a1[4] = (uint64_t)v7;
    a1[5] = (uint64_t)v8;
    v9 = (void *)a2[6];
    v10 = (void *)a2[7];
    a1[6] = (uint64_t)v9;
    a1[7] = (uint64_t)v10;
    v11 = *(int *)(a3 + 48);
    v45 = (void *)a2[8];
    v46 = (uint64_t *)((char *)a1 + v11);
    v12 = (char *)a2 + v11;
    a1[8] = (uint64_t)v45;
    type metadata accessor for InternalErrorViewModel();
    swift_bridgeObjectRetain();
    swift_retain();
    v13 = v6;
    v14 = v7;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = v45;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = *((_QWORD *)v12 + 1);
      *v46 = *(_QWORD *)v12;
      v46[1] = v19;
      v20 = *((_QWORD *)v12 + 2);
      swift_bridgeObjectRetain();
      if (v20 >= 0xB)
      {
        v25 = *((_QWORD *)v12 + 3);
        v26 = *((_QWORD *)v12 + 4);
        v46[2] = v20;
        v46[3] = v25;
        v46[4] = v26;
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *((_OWORD *)v46 + 1) = *((_OWORD *)v12 + 1);
        v46[4] = *((_QWORD *)v12 + 4);
      }
      v27 = *((_QWORD *)v12 + 6);
      v46[5] = *((_QWORD *)v12 + 5);
      v46[6] = v27;
      v46[7] = *((_QWORD *)v12 + 7);
      sub_1BB074B08();
      v29 = *(int *)(v28 + 80);
      v30 = (char *)v46 + v29;
      v31 = &v12[v29];
      *v30 = *v31;
      v32 = (uint64_t)v46 + v29 + 8;
      v33 = *((_OWORD *)v31 + 2);
      *((_OWORD *)v30 + 2) = v33;
      v34 = v33;
      v35 = **(void (***)(uint64_t, char *, uint64_t))(v33 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v32, v31 + 8, v34);
      v36 = *((_QWORD *)v31 + 7);
      *((_QWORD *)v30 + 6) = *((_QWORD *)v31 + 6);
      *((_QWORD *)v30 + 7) = v36;
      v37 = *((_QWORD *)v31 + 9);
      *((_QWORD *)v30 + 8) = *((_QWORD *)v31 + 8);
      *((_QWORD *)v30 + 9) = v37;
      *((_QWORD *)v30 + 10) = *((_QWORD *)v31 + 10);
      v30[88] = v31[88];
      *((_QWORD *)v30 + 12) = *((_QWORD *)v31 + 12);
      v38 = (int *)type metadata accessor for GroupLayoutBindingContext();
      v39 = v38[13];
      v43 = &v31[v39];
      v44 = &v30[v39];
      v40 = sub_1BB86D8A0();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v44, v43, v40);
      *(_QWORD *)&v30[v38[14]] = *(_QWORD *)&v31[v38[14]];
      *(_QWORD *)&v30[v38[15]] = *(_QWORD *)&v31[v38[15]];
      v30[v38[16]] = v31[v38[16]];
      *(_QWORD *)&v30[v38[17]] = *(_QWORD *)&v31[v38[17]];
      *(_QWORD *)&v30[v38[18]] = *(_QWORD *)&v31[v38[18]];
      *(_QWORD *)&v30[v38[19]] = *(_QWORD *)&v31[v38[19]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = *(_QWORD *)v12;
      v23 = *(id *)v12;
      v24 = *((_QWORD *)v12 + 1);
      *v46 = v22;
      v46[1] = v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for InternalErrorViewLayout.Context(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_release();

  v4 = (char *)a1 + *(int *)(a2 + 48);
  type metadata accessor for InternalErrorViewModel();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    if (*((_QWORD *)v4 + 2) >= 0xBuLL)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BB074B08();
    v6 = &v4[*(int *)(v5 + 80)];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v6 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = &v6[*(int *)(type metadata accessor for GroupLayoutBindingContext() + 52)];
    v8 = sub_1BB86D8A0();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {

    return swift_release();
  }
}

_QWORD *initializeWithCopy for InternalErrorViewLayout.Context(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  _QWORD *v45;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  v6 = (void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  v7 = (void *)a2[6];
  v8 = (void *)a2[7];
  a1[6] = v7;
  a1[7] = v8;
  v9 = (void *)a2[8];
  v10 = *(int *)(a3 + 48);
  v45 = (_QWORD *)((char *)a1 + v10);
  v11 = (char *)a2 + v10;
  a1[8] = v9;
  type metadata accessor for InternalErrorViewModel();
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *((_QWORD *)v11 + 1);
    *v45 = *(_QWORD *)v11;
    v45[1] = v18;
    v19 = *((_QWORD *)v11 + 2);
    swift_bridgeObjectRetain();
    if (v19 >= 0xB)
    {
      v24 = *((_QWORD *)v11 + 3);
      v25 = *((_QWORD *)v11 + 4);
      v45[2] = v19;
      v45[3] = v24;
      v45[4] = v25;
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)v45 + 1) = *((_OWORD *)v11 + 1);
      v45[4] = *((_QWORD *)v11 + 4);
    }
    v26 = *((_QWORD *)v11 + 6);
    v45[5] = *((_QWORD *)v11 + 5);
    v45[6] = v26;
    v45[7] = *((_QWORD *)v11 + 7);
    sub_1BB074B08();
    v28 = *(int *)(v27 + 80);
    v29 = (char *)v45 + v28;
    v30 = &v11[v28];
    *v29 = v11[v28];
    v31 = (uint64_t)v45 + v28 + 8;
    v32 = *((_OWORD *)v30 + 2);
    *((_OWORD *)v29 + 2) = v32;
    v33 = v32;
    v34 = **(void (***)(uint64_t, char *, uint64_t))(v32 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34(v31, v30 + 8, v33);
    v35 = *((_QWORD *)v30 + 7);
    *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
    *((_QWORD *)v29 + 7) = v35;
    v36 = *((_QWORD *)v30 + 9);
    *((_QWORD *)v29 + 8) = *((_QWORD *)v30 + 8);
    *((_QWORD *)v29 + 9) = v36;
    *((_QWORD *)v29 + 10) = *((_QWORD *)v30 + 10);
    v29[88] = v30[88];
    *((_QWORD *)v29 + 12) = *((_QWORD *)v30 + 12);
    v37 = (int *)type metadata accessor for GroupLayoutBindingContext();
    v38 = v37[13];
    v42 = &v30[v38];
    v43 = &v29[v38];
    v39 = sub_1BB86D8A0();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v43, v42, v39);
    *(_QWORD *)&v29[v37[14]] = *(_QWORD *)&v30[v37[14]];
    *(_QWORD *)&v29[v37[15]] = *(_QWORD *)&v30[v37[15]];
    v29[v37[16]] = v30[v37[16]];
    *(_QWORD *)&v29[v37[17]] = *(_QWORD *)&v30[v37[17]];
    *(_QWORD *)&v29[v37[18]] = *(_QWORD *)&v30[v37[18]];
    *(_QWORD *)&v29[v37[19]] = *(_QWORD *)&v30[v37[19]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_QWORD *)v11;
    v21 = *(id *)v11;
    v22 = *((_QWORD *)v11 + 1);
    *v45 = v20;
    v45[1] = v22;
    swift_retain();
    v23 = a1;
  }
  swift_storeEnumTagMultiPayload();
  return v23;
}

_QWORD *assignWithCopy for InternalErrorViewLayout.Context(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = (void *)a2[3];
  v7 = (void *)a1[3];
  a1[3] = v6;
  v8 = v6;

  v9 = (void *)a1[4];
  v10 = (void *)a2[4];
  a1[4] = v10;
  v11 = v10;

  v12 = (void *)a2[5];
  v13 = (void *)a1[5];
  a1[5] = v12;
  v14 = v12;

  v15 = (void *)a2[6];
  v16 = (void *)a1[6];
  a1[6] = v15;
  v17 = v15;

  v18 = (void *)a2[7];
  v19 = (void *)a1[7];
  a1[7] = v18;
  v20 = v18;

  v21 = (void *)a2[8];
  v22 = (void *)a1[8];
  a1[8] = v21;
  v23 = v21;

  if (a1 != a2)
  {
    v24 = *(int *)(a3 + 48);
    v25 = (_QWORD *)((char *)a1 + v24);
    v26 = (char *)a2 + v24;
    sub_1BA4A2E80((uint64_t)a1 + v24, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
    type metadata accessor for InternalErrorViewModel();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v25 = *(_QWORD *)v26;
      v25[1] = *((_QWORD *)v26 + 1);
      v27 = *((_QWORD *)v26 + 2);
      swift_bridgeObjectRetain();
      if (v27 >= 0xB)
      {
        v25[2] = v27;
        v25[3] = *((_QWORD *)v26 + 3);
        v25[4] = *((_QWORD *)v26 + 4);
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v28 = *((_OWORD *)v26 + 1);
        v25[4] = *((_QWORD *)v26 + 4);
        *((_OWORD *)v25 + 1) = v28;
      }
      v25[5] = *((_QWORD *)v26 + 5);
      v25[6] = *((_QWORD *)v26 + 6);
      v25[7] = *((_QWORD *)v26 + 7);
      sub_1BB074B08();
      v32 = *(int *)(v31 + 80);
      v33 = (char *)v25 + v32;
      v34 = &v26[v32];
      *v33 = *v34;
      v35 = (uint64_t)v25 + v32 + 8;
      v36 = *((_QWORD *)v34 + 4);
      *((_QWORD *)v33 + 4) = v36;
      *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
      v37 = **(void (***)(uint64_t, char *, uint64_t))(v36 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v35, v34 + 8, v36);
      *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
      *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
      *((_QWORD *)v33 + 8) = *((_QWORD *)v34 + 8);
      *((_QWORD *)v33 + 9) = *((_QWORD *)v34 + 9);
      *((_QWORD *)v33 + 10) = *((_QWORD *)v34 + 10);
      v33[88] = v34[88];
      *((_QWORD *)v33 + 12) = *((_QWORD *)v34 + 12);
      v38 = (int *)type metadata accessor for GroupLayoutBindingContext();
      v39 = v38[13];
      v43 = &v34[v39];
      v44 = &v33[v39];
      v40 = sub_1BB86D8A0();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v44, v43, v40);
      *(_QWORD *)&v33[v38[14]] = *(_QWORD *)&v34[v38[14]];
      *(_QWORD *)&v33[v38[15]] = *(_QWORD *)&v34[v38[15]];
      v33[v38[16]] = v34[v38[16]];
      *(_QWORD *)&v33[v38[17]] = *(_QWORD *)&v34[v38[17]];
      *(_QWORD *)&v33[v38[18]] = *(_QWORD *)&v34[v38[18]];
      *(_QWORD *)&v33[v38[19]] = *(_QWORD *)&v34[v38[19]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *(_QWORD *)v26;
      v30 = *(id *)v26;
      *v25 = v29;
      v25[1] = *((_QWORD *)v26 + 1);
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for InternalErrorViewLayout.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 48);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for InternalErrorViewModel();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = v8[1];
    *v7 = *v8;
    v7[1] = v10;
    v11 = *((_QWORD *)v8 + 5);
    *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
    *((_QWORD *)v7 + 5) = v11;
    v7[3] = v8[3];
    sub_1BB074B08();
    v13 = *(int *)(v12 + 80);
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    *v14 = *((_BYTE *)v8 + v13);
    *((_QWORD *)v14 + 5) = *(_QWORD *)((char *)v8 + v13 + 40);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)((char *)v8 + v13 + 24);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)((char *)v8 + v13 + 8);
    v16 = *(_OWORD *)((char *)v8 + v13 + 64);
    *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)v8 + v13 + 48);
    *((_OWORD *)v14 + 4) = v16;
    *((_QWORD *)v14 + 10) = *(_QWORD *)((char *)v8 + v13 + 80);
    v14[88] = *((_BYTE *)v8 + v13 + 88);
    *((_QWORD *)v14 + 12) = *(_QWORD *)((char *)v8 + v13 + 96);
    v17 = (int *)type metadata accessor for GroupLayoutBindingContext();
    v18 = v17[13];
    v19 = &v14[v18];
    v20 = &v15[v18];
    v21 = sub_1BB86D8A0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_QWORD *)&v14[v17[14]] = *(_QWORD *)&v15[v17[14]];
    *(_QWORD *)&v14[v17[15]] = *(_QWORD *)&v15[v17[15]];
    v14[v17[16]] = v15[v17[16]];
    *(_QWORD *)&v14[v17[17]] = *(_QWORD *)&v15[v17[17]];
    *(_QWORD *)&v14[v17[18]] = *(_QWORD *)&v15[v17[18]];
    *(_QWORD *)&v14[v17[19]] = *(_QWORD *)&v15[v17[19]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for InternalErrorViewLayout.Context(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_release();
  v7 = (void *)a1[3];
  a1[3] = a2[3];

  v8 = (void *)a1[4];
  a1[4] = a2[4];

  v9 = (void *)a1[5];
  a1[5] = a2[5];

  v10 = (void *)a1[6];
  a1[6] = a2[6];

  v11 = (void *)a1[7];
  a1[7] = a2[7];

  v12 = (void *)a1[8];
  a1[8] = a2[8];

  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 48);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_1BA4A2E80((uint64_t)a1 + v13, (uint64_t (*)(_QWORD))type metadata accessor for InternalErrorViewModel);
    v16 = type metadata accessor for InternalErrorViewModel();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v17;
      v18 = *((_QWORD *)v15 + 5);
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 5) = v18;
      *((_OWORD *)v14 + 3) = *((_OWORD *)v15 + 3);
      sub_1BB074B08();
      v20 = *(int *)(v19 + 80);
      v21 = &v14[v20];
      v22 = &v15[v20];
      *v21 = v15[v20];
      *((_QWORD *)v21 + 5) = *(_QWORD *)&v15[v20 + 40];
      *(_OWORD *)(v21 + 24) = *(_OWORD *)&v15[v20 + 24];
      *(_OWORD *)(v21 + 8) = *(_OWORD *)&v15[v20 + 8];
      v23 = *(_OWORD *)&v15[v20 + 64];
      *((_OWORD *)v21 + 3) = *(_OWORD *)&v15[v20 + 48];
      *((_OWORD *)v21 + 4) = v23;
      *((_QWORD *)v21 + 10) = *(_QWORD *)&v15[v20 + 80];
      v21[88] = v15[v20 + 88];
      *((_QWORD *)v21 + 12) = *(_QWORD *)&v15[v20 + 96];
      v24 = (int *)type metadata accessor for GroupLayoutBindingContext();
      v25 = v24[13];
      v26 = &v21[v25];
      v27 = &v22[v25];
      v28 = sub_1BB86D8A0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      *(_QWORD *)&v21[v24[14]] = *(_QWORD *)&v22[v24[14]];
      *(_QWORD *)&v21[v24[15]] = *(_QWORD *)&v22[v24[15]];
      v21[v24[16]] = v22[v24[16]];
      *(_QWORD *)&v21[v24[17]] = *(_QWORD *)&v22[v24[17]];
      *(_QWORD *)&v21[v24[18]] = *(_QWORD *)&v22[v24[18]];
      *(_QWORD *)&v21[v24[19]] = *(_QWORD *)&v22[v24[19]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalErrorViewLayout.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5CDE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for InternalErrorViewModel();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for InternalErrorViewLayout.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5CDEDC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for InternalErrorViewModel();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InternalErrorViewLayout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BB5CDF9C + 4 * byte_1BB92E85D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BB5CDFD0 + 4 * byte_1BB92E858[v4]))();
}

uint64_t sub_1BB5CDFD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5CDFD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5CDFE0);
  return result;
}

uint64_t sub_1BB5CDFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5CDFF4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BB5CDFF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5CE000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalErrorViewLayout.Attributes.CodingKeys()
{
  return &type metadata for InternalErrorViewLayout.Attributes.CodingKeys;
}

unint64_t sub_1BB5CE020()
{
  unint64_t result;

  result = qword_1EF2C83A0;
  if (!qword_1EF2C83A0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EB5C, &type metadata for InternalErrorViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C83A0);
  }
  return result;
}

unint64_t sub_1BB5CE068()
{
  unint64_t result;

  result = qword_1ED3B0170;
  if (!qword_1ED3B0170)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EACC, &type metadata for InternalErrorViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B0170);
  }
  return result;
}

unint64_t sub_1BB5CE0B0()
{
  unint64_t result;

  result = qword_1ED3B0168;
  if (!qword_1ED3B0168)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EAF4, &type metadata for InternalErrorViewLayout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3B0168);
  }
  return result;
}

uint64_t sub_1BB5CE0F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D617266 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BB992270 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x62614C726F727265 && a2 == 0xEF656D6172466C65 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x62614C656C746974 && a2 == 0xEF656D6172466C65 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BB992290 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB9922B0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x72466E6F74747562 && a2 == 0xEB00000000656D61 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BB9922D0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1BB5CE45C()
{
  unint64_t result;

  result = qword_1ED3B01A8;
  if (!qword_1ED3B01A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout, &type metadata for InternalErrorViewLayout);
    atomic_store(result, (unint64_t *)&qword_1ED3B01A8);
  }
  return result;
}

void sub_1BB5CE4A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B0448)
  {
    sub_1BA4CDF6C(255, &qword_1ED3AFBC8, (uint64_t (*)(void))sub_1BB5CE45C, (uint64_t)&type metadata for InternalErrorViewLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B0448);
  }
}

uint64_t sub_1BB5CE514(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CBE38(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1BB5CE51C()
{
  unint64_t result;

  result = qword_1ED3B0188;
  if (!qword_1ED3B0188)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1ED3B0188);
  }
  return result;
}

uint64_t sub_1BB5CE560(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BB5CE5A8(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BB5CE5A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CC154(a1, *(_QWORD **)(v1 + 16));
}

void sub_1BB5CE5A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for InternalErrorViewLayout;
    v8[1] = &type metadata for InternalErrorViewLayout.Attributes;
    v8[2] = sub_1BB5CE45C();
    v8[3] = sub_1BB5CE51C();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1BB5CE624()
{
  return swift_deallocObject();
}

uint64_t sub_1BB5CE634()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t sub_1BB5CE658()
{
  unint64_t result;

  result = qword_1EF2C83A8;
  if (!qword_1EF2C83A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for InternalErrorViewLayout.Attributes, &type metadata for InternalErrorViewLayout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C83A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for A12_V11()
{
  return &type metadata for A12_V11;
}

uint64_t sub_1BB5CE6AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C84E8, (uint64_t (*)(void))sub_1BB5D101C, (uint64_t)&type metadata for A12_V11.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5D101C();
  sub_1BB8746C8();
  v10 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v10;
  v13 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA4A2870(&qword_1EF2A9A18, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    *(_QWORD *)&v12[0] = *(_QWORD *)(v3 + 32);
    v13 = 1;
    sub_1BA4C576C(0, &qword_1ED3B94A0);
    sub_1BA4DB848(&qword_1EF2A9F98, (uint64_t (*)(void))sub_1BA82F554, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB5CE860()
{
  sub_1BB5D101C();
  return sub_1BB874710();
}

uint64_t sub_1BB5CE888()
{
  sub_1BB5D101C();
  return sub_1BB87471C();
}

double sub_1BB5CE8B0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1BB5D0E08(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1BB5CE8F4(_QWORD *a1)
{
  return sub_1BB5CE6AC(a1);
}

uint64_t sub_1BB5CE908()
{
  sub_1BB5D0B10();
  return sub_1BB86D96C();
}

uint64_t sub_1BB5CE970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  unsigned __int8 v74;
  ValueMetadata *v75;
  unint64_t v76;
  uint64_t v77;

  v62 = a2;
  v55 = a3;
  v56 = sub_1BB86C8E0();
  v6 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupLayoutContext();
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  MEMORY[0x1E0C80A78](v9);
  v77 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v54 - v12;
  v61 = type metadata accessor for GroupLayoutBindingContext();
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v59 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v3;
  v16 = (void *)*((_QWORD *)v3 + 1);
  v17 = v3[16];
  v66 = a1;
  sub_1BA4C2DD8(a1, v59, v18);
  sub_1BA4C2DD8(a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA7C26A0(v16, v17);
  sub_1BB86C8D4();
  v58 = sub_1BB86C8C8();
  v57 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v56);
  v75 = &type metadata for A12_V11;
  v20 = sub_1BA8EE6B0();
  v76 = v20;
  LOBYTE(v73) = v15;
  *((_QWORD *)&v73 + 1) = v16;
  v74 = v17;
  type metadata accessor for GroupLayoutKey();
  v21 = swift_allocObject();
  sub_1BA7C26A0(v16, v17);
  v67 = sub_1BB874734();
  v68 = v22;
  v71 = 95;
  v72 = 0xE100000000000000;
  v69 = 45;
  v70 = 0xE100000000000000;
  sub_1BA7114A0();
  v23 = sub_1BB873B04();
  v25 = v24;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 24) = v25;
  v26 = (uint64_t *)(v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier);
  v27 = v57;
  *v26 = v58;
  v26[1] = v27;
  sub_1BA4C010C((uint64_t)&v73, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_factory);
  v28 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings;
  sub_1BA5193C4(v59, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutBindingContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v28, 0, 1, v61);
  v29 = v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext;
  sub_1BA5193C4((uint64_t)v13, v21 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v29, 0, 1, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  sub_1BA7C2538(v16, v17);
  v75 = &type metadata for A12_V11;
  v76 = v20;
  LOBYTE(v73) = v15;
  *((_QWORD *)&v73 + 1) = v16;
  v74 = v17;
  sub_1BA4C2DD8(v62, v77, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
  sub_1BA4B07F0(0, qword_1ED3B0E60, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FeedItemSorter);
  v30 = swift_allocObject();
  v31 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v30 + 16) = MEMORY[0x1E0DEE9D8];
  v32 = (_QWORD *)(v30 + 16);
  swift_beginAccess();
  v33 = *(_QWORD **)(v30 + 16);
  sub_1BA7C26A0(v16, v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v30 + 16) = v33;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v33 = sub_1BA7892A0(0, v33[2] + 1, 1, v33);
    *v32 = v33;
  }
  v36 = v33[2];
  v35 = v33[3];
  if (v36 >= v35 >> 1)
  {
    v33 = sub_1BA7892A0((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
    *v32 = v33;
  }
  v33[2] = v36 + 1;
  v37 = &v33[2 * v36];
  v37[4] = sub_1BACB8D7C;
  v37[5] = 0;
  swift_endAccess();
  v38 = v65;
  v39 = sub_1BA7E1F18((uint64_t)&unk_1E7269FE8, 0, 0, v30, 4, 0, 0, 0);
  if (v38)
  {
    swift_release();
    swift_release();
    sub_1BA4A2E80(v77, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  }
  else
  {
    v40 = v39;
    swift_release();
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v31;
    v42 = (_QWORD *)(v41 + 16);
    swift_beginAccess();
    v43 = *(_QWORD **)(v41 + 16);
    v44 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v41 + 16) = v43;
    if ((v44 & 1) == 0)
    {
      v43 = sub_1BA7892A0(0, v43[2] + 1, 1, v43);
      *v42 = v43;
    }
    v46 = v43[2];
    v45 = v43[3];
    if (v46 >= v45 >> 1)
    {
      v43 = sub_1BA7892A0((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
      *v42 = v43;
    }
    v43[2] = v46 + 1;
    v47 = &v43[2 * v46];
    v47[4] = sub_1BACB8D7C;
    v47[5] = 0;
    swift_endAccess();
    v49 = sub_1BA7E1F18((uint64_t)&unk_1E726A010, 0, 0, v41, 0, 0, 0, 0);
    swift_release();
    v67 = v40;
    sub_1BA7DD6A0(v49);
    v50 = v67;
    v51 = type metadata accessor for A12_V11.Bound();
    v52 = v55;
    v55[3] = v51;
    v52[4] = sub_1BA4A2870(qword_1EF2C83C0, (uint64_t (*)(uint64_t))type metadata accessor for A12_V11.Bound, (uint64_t)&unk_1BB92EDB8);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v52);
    *boxed_opaque_existential_0 = v21;
    sub_1BA4CECCC(&v73, (uint64_t)(boxed_opaque_existential_0 + 1));
    result = sub_1BA5193C4(v77, (uint64_t)boxed_opaque_existential_0 + *(int *)(v51 + 24), (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    *(uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v51 + 28)) = v50;
  }
  return result;
}

double sub_1BB5CEFA4@<D0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  double result;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  char v40[105];
  __int128 v41[9];
  __int128 v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v36 = a1;
  v35 = sub_1BB86DA38();
  *(_QWORD *)&v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33[0] = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9F18, (uint64_t (*)(uint64_t))sub_1BA829A4C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
  v5 = type metadata accessor for A12_V11.Bound();
  v6 = v1 + *(int *)(v5 + 24);
  v7 = type metadata accessor for GroupLayoutContext();
  v8 = *(int *)(v7 + 40);
  v9 = v6;
  v33[1] = v6;
  v10 = *(_QWORD *)(v6 + v8);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(double *)(v9 + *(int *)(v7 + 32));
  sub_1BA4C010C(v11 + 16, (uint64_t)&v43);
  sub_1BA4C010C(v11 + 56, (uint64_t)v42);
  v13 = v12 * *(double *)(v11 + 96);
  type metadata accessor for FeedLayoutStylerFactory();
  v14 = swift_initStackObject();
  sub_1BA4CECCC(&v43, v14 + 16);
  sub_1BA4CECCC(v42, v14 + 56);
  *(double *)(v14 + 96) = v13;
  LOBYTE(v41[0]) = 1;
  FeedLayoutStylerFactory.styler(withHeading:)((char *)v41, (uint64_t *)(inited + 32));
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v14 + 16);
  __swift_destroy_boxed_opaque_existential_1(v14 + 56);
  v15 = *(_QWORD *)(v10 + 16);
  sub_1BA4C010C(v15 + 16, (uint64_t)v42);
  sub_1BA4C010C(v15 + 56, (uint64_t)v41);
  v16 = v12 * *(double *)(v15 + 96);
  v17 = swift_initStackObject();
  sub_1BA4CECCC(v42, v17 + 16);
  sub_1BA4CECCC(v41, v17 + 56);
  *(double *)(v17 + 96) = v16;
  v40[0] = 2;
  FeedLayoutStylerFactory.styler(withHeading:)(v40, (uint64_t *)&v43);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(v17 + 16);
  __swift_destroy_boxed_opaque_existential_1(v17 + 56);
  v18 = sub_1BA6B5B08((uint64_t)&v43, *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v5 + 28)) + 16) - 1);
  *(_QWORD *)&v43 = inited;
  sub_1BA6B5BE8(v18);
  v19 = v43;
  v39[2] = v2;
  v20 = swift_bridgeObjectRetain();
  v21 = sub_1BACB8FF0(v20, v19, (void (*)(char *, uint64_t))sub_1BA6B5C04, (uint64_t)v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = *MEMORY[0x1E0DB5D88];
  v23 = sub_1BB86D678();
  v24 = v33[0];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v33[0], v22, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v24, *MEMORY[0x1E0DB6200], v35);
  v37 = v21;
  v38 = v2;
  sub_1BB5D0BB4(0, &qword_1EF2C8468, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB6308]);
  swift_allocObject();
  v35 = sub_1BB86DB34();
  v25 = sub_1BB86DB40();
  v34 = v43;
  v26 = v44;
  v27 = v45;
  *(_QWORD *)&v43 = v21;
  *(_QWORD *)&v42[0] = v46;
  MEMORY[0x1E0C80A78](v25);
  sub_1BA4B07F0(0, &qword_1ED3B94B8, type metadata accessor for HeadlineViewLayout.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  sub_1BA6B5AA8();
  sub_1BA6B50E4(&qword_1ED3B94A8, &qword_1ED3B94A0);
  swift_bridgeObjectRetain();
  v28 = sub_1BB86ED58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v43 = v28;
  sub_1BA4C576C(0, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B50E4((unint64_t *)&qword_1ED3B9360, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B39A0();
  v29 = sub_1BB872BBC();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = v36;
  *v36 = 0;
  result = *(double *)&v34;
  *(_OWORD *)(v30 + 8) = v34;
  *((_QWORD *)v30 + 3) = v26;
  *((_QWORD *)v30 + 4) = v27;
  v32 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v30 + 5) = v29;
  *((_QWORD *)v30 + 6) = v32;
  return result;
}

uint64_t sub_1BB5CF488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (uint64_t *)&v14[-v9];
  v17 = a1;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 12;
  *v10 = v11;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DB63F8], v7);
  v15 = a2;
  v16 = a3;
  v12 = MEMORY[0x1E0DB5DD0];
  sub_1BB5D0BB4(0, &qword_1EF2C8488, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BB5D0B74(&qword_1EF2C8490, &qword_1EF2C8488, (uint64_t (*)(uint64_t, _QWORD *))v12, MEMORY[0x1E0DB5DD8]);
  sub_1BB86D4BC();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1BB5CF5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *);
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  void (*v39)(uint64_t *, uint64_t);
  uint64_t v40;
  unsigned int v41;
  void (*v42)(char *, uint64_t, uint64_t);
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  void (*v46)(uint64_t);
  unsigned int v47;
  uint64_t v48;
  void (*v49)(uint64_t *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = a3;
  v50 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v39 - v7);
  v53 = a1;
  v9 = a1;
  v40 = a1;
  v10 = sub_1BB86D438();
  v11 = swift_allocBox();
  v47 = *MEMORY[0x1E0DB5A38];
  v46 = *(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 104);
  v46(v12);
  *v8 = v11;
  v45 = *MEMORY[0x1E0DB6318];
  v49 = *(void (**)(uint64_t *))(v6 + 104);
  v49(v8);
  v13 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5D0BB4(0, &qword_1EF2C8498, MEMORY[0x1E0DB5A10]);
  v15 = v14;
  sub_1BB5D0B74(&qword_1EF2C84A0, &qword_1EF2C8498, v13, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4EC();
  v39 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v39(v8, v5);
  v53 = v9;
  sub_1BAA71EEC();
  v17 = v16;
  v18 = swift_allocBox();
  v20 = (char *)v19 + *(int *)(v17 + 48);
  *v19 = 7;
  v43 = *MEMORY[0x1E0DB61C8];
  v21 = v43;
  v22 = sub_1BB86DA20();
  v42 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
  v42(v20, v21, v22);
  *v8 = v18;
  v41 = *MEMORY[0x1E0DB6338];
  v49(v8);
  v52 = v50;
  v44 = v15;
  sub_1BB86D498();
  v23 = v39;
  v39(v8, v5);
  v24 = v40;
  v53 = v40;
  v25 = swift_allocBox();
  ((void (*)(uint64_t, _QWORD, uint64_t))v46)(v26, v47, v10);
  *v8 = v25;
  v27 = v49;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v49)(v8, v45, v5);
  sub_1BB86D4EC();
  v23(v8, v5);
  v53 = v24;
  v28 = swift_allocBox();
  v30 = (char *)v29 + *(int *)(v17 + 48);
  *v29 = 2;
  v42(v30, v43, v22);
  *v8 = v28;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v27)(v8, v41, v5);
  sub_1BB5D0C38();
  sub_1BA4CDF6C(0, &qword_1EF2C84B0, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v32 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1BB87CE70;
  v36 = (double *)(v35 + v34);
  v37 = v48 + *(int *)(type metadata accessor for A12_V11.Bound() + 24);
  *v36 = *(double *)(v37 + *(int *)(type metadata accessor for GroupLayoutContext() + 32)) * 135.0;
  (*(void (**)(double *, _QWORD, uint64_t))(v33 + 104))(v36, *MEMORY[0x1E0DB5CB8], v32);
  v51 = v50;
  sub_1BB86D498();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t *, uint64_t))v23)(v8, v5);
}

uint64_t sub_1BB5CFA04(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t (*v24)(uint64_t, _QWORD *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for HeadlineViewLayout.Context(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v25 - v14;
  v28 = a1;
  swift_getKeyPath();
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DB63C0], v12);
  if (*(_QWORD *)(a2 + 16))
  {
    sub_1BA4C2DD8(a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v10, type metadata accessor for HeadlineViewLayout.Context);
    v17 = (char *)v6 + v4[5];
    v27 = v12;
    v18 = *MEMORY[0x1E0DB61C8];
    v19 = sub_1BB86DA20();
    v26 = v13;
    v20 = v19;
    v21 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    v22 = (void *)*MEMORY[0x1E0DC4918];
    *v6 = 1;
    *(_QWORD *)((char *)v6 + v4[6]) = 0;
    *(_QWORD *)((char *)v6 + v4[7]) = v22;
    v23 = v22;
    sub_1BAB62528((uint64_t)v10, (uint64_t)v6);
    sub_1BA4A2E80((uint64_t)v6, type metadata accessor for HeadlineViewLayout.Options);
    sub_1BA4A2E80((uint64_t)v10, type metadata accessor for HeadlineViewLayout.Context);
    v24 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
    sub_1BB5D0BB4(0, &qword_1EF2C8498, MEMORY[0x1E0DB5A10]);
    sub_1BB5D0B74(&qword_1EF2C84A0, &qword_1EF2C8498, v24, MEMORY[0x1E0DB5A18]);
    sub_1BA595D14();
    sub_1BB86D4C8();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BB5CFCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)&v16[-v7];
  v19 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 6;
  *v8 = v9;
  v10 = *MEMORY[0x1E0DB63F8];
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, v10, v5);
  v18 = a2;
  v12 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5D0BB4(0, &qword_1EF2C8498, MEMORY[0x1E0DB5A10]);
  sub_1BB5D0B74(&qword_1EF2C84A0, &qword_1EF2C8498, v12, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  v13 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v13(v8, v5);
  v19 = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 6;
  *v8 = v14;
  v11(v8, v10, v5);
  v17 = a2;
  sub_1BB86D4BC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v8, v5);
}

uint64_t sub_1BB5CFEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  double v36;
  uint64_t (*v37)(uint64_t, _QWORD *);
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = sub_1BB86DA38();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8);
  v44 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BB86D93C();
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (_QWORD *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for HeadlineViewLayout.Context(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v40 - v23;
  v48 = a1;
  KeyPath = swift_getKeyPath();
  v26 = *MEMORY[0x1E0DB63C0];
  v47 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v24, v26, v21);
  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v40[1] = KeyPath;
  v41 = v21;
  sub_1BA4C2DD8(a2+ *(_QWORD *)(v17 + 72)+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v19, type metadata accessor for HeadlineViewLayout.Context);
  v27 = (char *)v15 + v13[5];
  v28 = *MEMORY[0x1E0DB61C8];
  v29 = sub_1BB86DA20();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v27, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  v31 = (void **)MEMORY[0x1E0DC4918];
  *v15 = 0;
  *(_QWORD *)((char *)v15 + v13[6]) = 0;
  v32 = *v31;
  *(_QWORD *)((char *)v15 + v13[7]) = v32;
  v2 = *MEMORY[0x1E0DC49E8];
  v3 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 16);
  v5 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 24);
  v33 = qword_1ED3BC390;
  v34 = v32;
  if (v33 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v35 = swift_release();
  v36 = MEMORY[0x1E0C80A78](v35);
  v40[-8] = v2;
  v40[-7] = v3;
  v40[-6] = v4;
  v40[-5] = v5;
  v40[-4] = v12;
  v40[-3] = v19;
  v39 = (unint64_t)v15;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v42 + 104))(v44, *MEMORY[0x1E0DB6208], v43, v36);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v19, type metadata accessor for HeadlineViewLayout.Context);
  v37 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5D0BB4(0, &qword_1EF2C8498, MEMORY[0x1E0DB5A10]);
  sub_1BB5D0B74(&qword_1EF2C84A0, &qword_1EF2C8498, v37, MEMORY[0x1E0DB5A18]);
  v39 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v24, v41);
}

uint64_t sub_1BB5D02D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  double v36;
  uint64_t (*v37)(uint64_t, _QWORD *);
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v8 = sub_1BB86DA38();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8);
  v44 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BB86D93C();
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (_QWORD *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for HeadlineViewLayout.Context(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8480, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v40 - v23;
  v48 = a1;
  KeyPath = swift_getKeyPath();
  v26 = *MEMORY[0x1E0DB63C0];
  v47 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v24, v26, v21);
  if (*(_QWORD *)(a2 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v40[1] = KeyPath;
  v41 = v21;
  sub_1BA4C2DD8(a2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ 2 * *(_QWORD *)(v17 + 72), (uint64_t)v19, type metadata accessor for HeadlineViewLayout.Context);
  v27 = (char *)v15 + v13[5];
  v28 = *MEMORY[0x1E0DB61C8];
  v29 = sub_1BB86DA20();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v27, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  v31 = (void **)MEMORY[0x1E0DC4918];
  *v15 = 0;
  *(_QWORD *)((char *)v15 + v13[6]) = 0;
  v32 = *v31;
  *(_QWORD *)((char *)v15 + v13[7]) = v32;
  v2 = *MEMORY[0x1E0DC49E8];
  v3 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 16);
  v5 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 24);
  v33 = qword_1ED3BC390;
  v34 = v32;
  if (v33 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v35 = swift_release();
  v36 = MEMORY[0x1E0C80A78](v35);
  v40[-8] = v2;
  v40[-7] = v3;
  v40[-6] = v4;
  v40[-5] = v5;
  v40[-4] = v12;
  v40[-3] = v19;
  v39 = (unint64_t)v15;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v42 + 104))(v44, *MEMORY[0x1E0DB6208], v43, v36);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v19, type metadata accessor for HeadlineViewLayout.Context);
  v37 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5D0BB4(0, &qword_1EF2C8498, MEMORY[0x1E0DB5A10]);
  sub_1BB5D0B74(&qword_1EF2C84A0, &qword_1EF2C8498, v37, MEMORY[0x1E0DB5A18]);
  v39 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v24, v41);
}

uint64_t sub_1BB5D0700@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[304];

  memcpy(v21, __src, sizeof(v21));
  sub_1BA640FB4();
  v10 = v9;
  v11 = swift_allocBox();
  v13 = v12;
  v14 = (void *)(v12 + *(int *)(v10 + 48));
  v15 = *(int *)(v10 + 64);
  sub_1BA4C2DD8(a3, v12, type metadata accessor for HeadlineViewLayout.Context);
  memcpy(v14, v21, 0x130uLL);
  v16 = a4 + *(int *)(type metadata accessor for A12_V11.Bound() + 24);
  result = type metadata accessor for GroupLayoutContext();
  v18 = *(_QWORD *)(v16 + *(int *)(result + 28));
  v19 = __OFADD__(v18, a2);
  v20 = v18 + a2;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + v15) = v20;
    *a5 = v11 | 0x4000000000000000;
  }
  return result;
}

uint64_t sub_1BB5D07E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1BB5CE970(a1, a2, a3);
}

uint64_t sub_1BB5D07F4()
{
  return sub_1BB690A88();
}

unint64_t sub_1BB5D0804(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB5D0830();
  result = sub_1BB5D0874();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB5D0830()
{
  unint64_t result;

  result = qword_1EF2C83B0;
  if (!qword_1EF2C83B0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ED04, &type metadata for A12_V11);
    atomic_store(result, (unint64_t *)&qword_1EF2C83B0);
  }
  return result;
}

unint64_t sub_1BB5D0874()
{
  unint64_t result;

  result = qword_1EF2C83B8;
  if (!qword_1EF2C83B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92ED2C, &type metadata for A12_V11);
    atomic_store(result, (unint64_t *)&qword_1EF2C83B8);
  }
  return result;
}

uint64_t type metadata accessor for A12_V11.Bound()
{
  uint64_t result;

  result = qword_1EF2C8420;
  if (!qword_1EF2C8420)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB5D08F4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5D0900(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GroupLayoutContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1BB5D097C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BB5D0988(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GroupLayoutContext();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BB5D09FC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BB5D0A88(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2C8460, (uint64_t (*)(uint64_t))type metadata accessor for A12_V11.Bound, (uint64_t)&unk_1BB92ED90);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5D0AC4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CF488(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1BB5D0ACC()
{
  unint64_t result;

  result = qword_1EF2C8470;
  if (!qword_1EF2C8470)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EEE8, &type metadata for A12_V11.Layout);
    atomic_store(result, (unint64_t *)&qword_1EF2C8470);
  }
  return result;
}

unint64_t sub_1BB5D0B10()
{
  unint64_t result;

  result = qword_1EF2C8478;
  if (!qword_1EF2C8478)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EEB8, &type metadata for A12_V11.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C8478);
  }
  return result;
}

uint64_t sub_1BB5D0B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BB5D0700(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BB5D0B5C()
{
  return swift_deallocObject();
}

uint64_t sub_1BB5D0B6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CF5E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BB5D0B74(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BB5D0BB4(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BB5D0BB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for A12_V11.Layout;
    v8[1] = &type metadata for A12_V11.Layout.Attributes;
    v8[2] = sub_1BB5D0ACC();
    v8[3] = sub_1BB5D0B10();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1BB5D0C30(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CFA04(a1, *(_QWORD *)(v1 + 16));
}

void sub_1BB5D0C38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C84A8)
  {
    sub_1BA4CDF6C(255, &qword_1EF2C84B0, (uint64_t (*)(void))sub_1BB5D0ACC, (uint64_t)&type metadata for A12_V11.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C84A8);
  }
}

uint64_t sub_1BB5D0CAC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CFCB8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5D0CB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5CFEA0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5D0CBC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5D02D0(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for A12_V11.Layout.Attributes()
{
  return &type metadata for A12_V11.Layout.Attributes;
}

ValueMetadata *type metadata accessor for A12_V11.Layout()
{
  return &type metadata for A12_V11.Layout;
}

unint64_t sub_1BB5D0CEC()
{
  unint64_t result;

  result = qword_1EF2C84B8;
  if (!qword_1EF2C84B8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EE58, &type metadata for A12_V11.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C84B8);
  }
  return result;
}

unint64_t sub_1BB5D0D34()
{
  unint64_t result;

  result = qword_1EF2C84C0;
  if (!qword_1EF2C84C0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EE30, &type metadata for A12_V11.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C84C0);
  }
  return result;
}

unint64_t sub_1BB5D0D7C()
{
  unint64_t result;

  result = qword_1EF2C84C8;
  if (!qword_1EF2C84C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EE08, &type metadata for A12_V11.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C84C8);
  }
  return result;
}

unint64_t sub_1BB5D0DC4()
{
  unint64_t result;

  result = qword_1EF2C84D0;
  if (!qword_1EF2C84D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EE80, &type metadata for A12_V11.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C84D0);
  }
  return result;
}

uint64_t sub_1BB5D0E08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C84D8, (uint64_t (*)(void))sub_1BB5D101C, (uint64_t)&type metadata for A12_V11.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5D101C();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v10 = v18;
  type metadata accessor for CGRect(0);
  v23 = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3B9910, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
  sub_1BB8740D4();
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  v23 = 1;
  sub_1BA4DB848(&qword_1ED3B94B0, (uint64_t (*)(void))sub_1BA82F510, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
  v15 = v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  v10[3] = v14;
  v10[4] = v15;
  return result;
}

unint64_t sub_1BB5D101C()
{
  unint64_t result;

  result = qword_1EF2C84E0;
  if (!qword_1EF2C84E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EFDC, &type metadata for A12_V11.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C84E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for A12_V11.Layout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5D10AC + 4 * byte_1BB92ECF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5D10E0 + 4 * byte_1BB92ECF0[v4]))();
}

uint64_t sub_1BB5D10E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D10E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5D10F0);
  return result;
}

uint64_t sub_1BB5D10FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5D1104);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5D1108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D1110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for A12_V11.Layout.Attributes.CodingKeys()
{
  return &type metadata for A12_V11.Layout.Attributes.CodingKeys;
}

unint64_t sub_1BB5D1130()
{
  unint64_t result;

  result = qword_1EF2C84F0;
  if (!qword_1EF2C84F0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EFB4, &type metadata for A12_V11.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C84F0);
  }
  return result;
}

unint64_t sub_1BB5D1178()
{
  unint64_t result;

  result = qword_1EF2C84F8;
  if (!qword_1EF2C84F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EF24, &type metadata for A12_V11.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C84F8);
  }
  return result;
}

unint64_t sub_1BB5D11C0()
{
  unint64_t result;

  result = qword_1EF2C8500;
  if (!qword_1EF2C8500)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92EF4C, &type metadata for A12_V11.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8500);
  }
  return result;
}

uint64_t FormatGroupItemKind.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5D122C + 4 * byte_1BB92F030[*v0]))(6775156, 0xE300000000000000);
}

uint64_t sub_1BB5D122C()
{
  return 0x72656874616577;
}

uint64_t sub_1BB5D1244()
{
  return 0x6C6C6177796170;
}

uint64_t sub_1BB5D125C()
{
  return 0x656E696C64616568;
}

uint64_t sub_1BB5D1274()
{
  return 0x6575737369;
}

uint64_t sub_1BB5D1288()
{
  return 0x6465626D45626577;
}

uint64_t sub_1BB5D12A0()
{
  return 1684366694;
}

void sub_1BB5D12B0(char *a1)
{
  sub_1BB7FD0D8(*a1);
}

uint64_t sub_1BB5D12BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BB5D12E4 + 4 * byte_1BB92F037[*v0]))();
}

void sub_1BB5D12E4(_QWORD *a1@<X8>)
{
  *a1 = 0x72656874616577;
  a1[1] = 0xE700000000000000;
}

void sub_1BB5D1300(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6C6177796170;
  a1[1] = 0xE700000000000000;
}

void sub_1BB5D131C(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C64616568;
  a1[1] = 0xE800000000000000;
}

void sub_1BB5D1338(_QWORD *a1@<X8>)
{
  *a1 = 0x6575737369;
  a1[1] = 0xE500000000000000;
}

void sub_1BB5D1350(_QWORD *a1@<X8>)
{
  *a1 = 0x6465626D45626577;
  a1[1] = 0xE800000000000000;
}

void sub_1BB5D136C(_QWORD *a1@<X8>)
{
  *a1 = 1684366694;
  a1[1] = 0xE400000000000000;
}

void sub_1BB5D1380()
{
  char *v0;

  sub_1BA4BB3A8(0, *v0);
}

void sub_1BB5D138C()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB5D13C0()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

BOOL sub_1BB5D1460(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed19FormatGroupItemKindO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return (v3 & 1) == 0;
}

BOOL sub_1BB5D149C(char *a1)
{
  char v1;
  char v3;

  v3 = *a1;
  _s8NewsFeed19FormatGroupItemKindO1loiySbAC_ACtFZ_0((uint64_t)&v3);
  return (v1 & 1) == 0;
}

uint64_t sub_1BB5D14D8(_BYTE *a1, char *a2)
{
  char v2;
  char v3;
  _BYTE v5[2];

  v2 = *a2;
  v5[1] = *a1;
  v5[0] = v2;
  _s8NewsFeed19FormatGroupItemKindO1loiySbAC_ACtFZ_0((uint64_t)v5);
  return v3 & 1;
}

void _s8NewsFeed19FormatGroupItemKindO1loiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5D1554@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BB5D15F0 + 4 * byte_1BB92F04C[a1]))(0x72656874616577);
}

uint64_t sub_1BB5D15F0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72656874616577 && v1 == 0xE700000000000000)
    v2 = 0;
  else
    v2 = sub_1BB874398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

unint64_t sub_1BB5D16E8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB5D1714();
  result = sub_1BA49F4F4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB5D1714()
{
  unint64_t result;

  result = qword_1EF2C8508;
  if (!qword_1EF2C8508)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C8508);
  }
  return result;
}

unint64_t sub_1BB5D1758(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5D177C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5D177C()
{
  unint64_t result;

  result = qword_1EF2C8510;
  if (!qword_1EF2C8510)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupItemKind, &type metadata for FormatGroupItemKind);
    atomic_store(result, (unint64_t *)&qword_1EF2C8510);
  }
  return result;
}

unint64_t sub_1BB5D17C0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA82EE78();
  a1[2] = sub_1BA82EF44();
  result = sub_1BA82EEBC();
  a1[3] = result;
  return result;
}

ValueMetadata *type metadata accessor for FormatGroupItemKind()
{
  return &type metadata for FormatGroupItemKind;
}

uint64_t FormatItemNodeDataLayoutAttributes.layoutIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

double FormatItemNodeDataLayoutAttributes.frame.getter()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                   + 16);
}

uint64_t FormatItemNodeDataLayoutAttributes.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.nodeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.dataLayoutValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatItemNodeDataLayoutAttributes.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4C2DD8(*(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)+ *(_QWORD *)(**(_QWORD **)(v1+ OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)+ 144), a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeData);
}

uint64_t FormatItemNodeDataLayoutAttributes.resizingIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.formatImageRequests(options:inventory:)()
{
  return sub_1BA65B3C8();
}

uint64_t FormatItemNodeDataLayoutAttributes.issueCoverImageRequests(options:inventory:)()
{
  return sub_1BA5901A8();
}

uint64_t FormatItemNodeDataLayoutAttributes.isResizing.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 112);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t FormatItemNodeDataLayoutAttributes.renderKeyIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.style.getter()
{
  return swift_retain();
}

uint64_t FormatItemNodeDataLayoutAttributes.resizing.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  return swift_retain();
}

uint64_t FormatItemNodeDataLayoutAttributes.resizingGroupIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatItemNodeDataLayoutAttributes.contextLayoutOptions.getter()
{
  return swift_retain();
}

void FormatItemNodeDataLayoutAttributes.columnSystemKind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

uint64_t FormatItemNodeDataLayoutAttributes.feedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BA4C2DD8(v1 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_feedItem, a1, type metadata accessor for FeedItem);
}

uint64_t FormatItemNodeDataLayoutAttributes.zIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_zIndex);
}

unint64_t FormatItemNodeDataLayoutAttributes.visibility.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_visibility);
  *a1 = v2;
  return sub_1BA67D3F4(v2);
}

uint64_t FormatItemNodeDataLayoutAttributes.dataAccessibilityValues.getter()
{
  return swift_bridgeObjectRetain();
}

void FormatItemNodeDataLayoutAttributes.accessibilityRole.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + *(_QWORD *)(**(_QWORD **)(v1
                                           + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                             + 152));
}

uint64_t FormatItemNodeDataLayoutAttributes.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1BA6DB314(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_feedItem);
  sub_1BA6EEDB4(*(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_visibility));
  swift_release();
  return v0;
}

uint64_t FormatItemNodeDataLayoutAttributes.__deallocating_deinit()
{
  FormatItemNodeDataLayoutAttributes.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5D1CAC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BB5D1CE8()
{
  return FormatItemNodeDataLayoutAttributes.isResizing.getter() & 1;
}

uint64_t FormatItemNodeDataLayoutAttributes.auxiliaryFeedItems.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  result = MEMORY[0x1E0DEE9D8];
  v5 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0
                                         + OBJC_IVAR____TtC8NewsFeed34FormatItemNodeDataLayoutAttributes_dataLayoutAttributes)
                             + 112)
                 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v2; ++i)
    {
      v4 = sub_1BB5D48EC();
      sub_1BB386350(v4);
    }
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1BB5D1D98()
{
  return type metadata accessor for FormatItemNodeDataLayoutAttributes();
}

uint64_t method lookup function for FormatItemNodeDataLayoutAttributes()
{
  return swift_lookUpClassMethod();
}

char *sub_1BB5D1DAC(uint64_t a1, void *a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  objc_class *v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  void *v19;
  char *v20;
  id v21;
  objc_super v23;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_styler;
  type metadata accessor for DebugFormatStyler();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)&v4[v9] = v10;
  v11 = OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_separatorView;
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3F10]);
  v13 = v4;
  *(_QWORD *)&v4[v11] = objc_msgSend(v12, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_editor] = a1;
  v14 = (objc_class *)type metadata accessor for DebugNavigationController();
  v15 = objc_allocWithZone(v14);
  swift_retain();
  v16 = objc_msgSend(v15, sel_initWithRootViewController_, a2);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_logViewController] = v16;
  v17 = objc_msgSend(objc_allocWithZone(v14), sel_initWithRootViewController_, a3);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_debuggerPaneViewController] = v17;

  v23.receiver = v13;
  v23.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v23, sel_initWithNibName_bundle_, 0, 0);
  v19 = *(void **)&v18[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_logViewController];
  v20 = v18;
  objc_msgSend(v19, sel_setNavigationBarHidden_animated_, 1, 0);
  objc_msgSend(v19, sel_setToolbarHidden_animated_, 0, 0);
  v21 = *(id *)&v20[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_debuggerPaneViewController];
  objc_msgSend(v21, sel_setToolbarHidden_animated_, 0, 0);

  swift_release();
  return v20;
}

id sub_1BB5D203C()
{
  char *v0;
  char *v1;
  void *v2;
  id result;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  id v30;
  void *v31;
  objc_super v32;

  v1 = v0;
  v32.receiver = v0;
  v32.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v32, sel_viewDidLoad);
  v2 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_debuggerPaneViewController];
  objc_msgSend(v1, sel_addChildViewController_, v2);
  result = objc_msgSend(v1, sel_view);
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = result;
  result = objc_msgSend(v2, sel_view);
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = result;
  objc_msgSend(v4, sel_addSubview_, result);

  objc_msgSend(v2, sel_didMoveToParentViewController_, v1);
  result = objc_msgSend(v2, sel_view);
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = result;
  result = objc_msgSend(v1, sel_view);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = result;
  objc_msgSend(result, sel_bounds);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
  v16 = *(void **)&v1[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_logViewController];
  objc_msgSend(v1, sel_addChildViewController_, v16);
  result = objc_msgSend(v1, sel_view);
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = result;
  result = objc_msgSend(v16, sel_view);
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18 = result;
  objc_msgSend(v17, sel_addSubview_, result);

  objc_msgSend(v16, sel_didMoveToParentViewController_, v1);
  result = objc_msgSend(v16, sel_view);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v19 = result;
  result = objc_msgSend(v1, sel_view);
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20 = result;
  objc_msgSend(result, sel_bounds);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;

  objc_msgSend(v19, sel_setFrame_, v22, v24, v26, v28);
  v29 = *(void **)&v1[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_separatorView];
  v30 = objc_msgSend((id)objc_opt_self(), sel_separatorColor);
  objc_msgSend(v29, sel_setBackgroundColor_, v30);

  result = objc_msgSend(v1, sel_view);
  if (result)
  {
    v31 = result;
    objc_msgSend(result, sel_addSubview_, v29);

    swift_retain();
    sub_1BB86D2D0();
    swift_release();
    sub_1BB86D2DC();
    return (id)swift_release();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1BB5D2398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_editor);
  type metadata accessor for DebugFormatConsoleAnimator();
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  sub_1BA8F6C64();
  return swift_release();
}

void sub_1BB5D24F4()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  double v4;
  id v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  void *v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  double v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  id v35;
  void *v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  char v45[17];
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v1 = v0;
  *(_QWORD *)&v45[1] = v0;
  *(_QWORD *)&v45[9] = swift_getObjectType();
  objc_msgSendSuper2((objc_super *)&v45[1], sel_viewWillLayoutSubviews);
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_debuggerPaneViewController], sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = v2;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v4 = sub_1BB5D2838(v45[0], v0);
  v5 = objc_msgSend(v0, sel_view);
  if (!v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = v5;
  objc_msgSend(v5, sel_bounds);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v46.origin.x = v8;
  v46.origin.y = v10;
  v46.size.width = v12;
  v46.size.height = v14;
  objc_msgSend(v3, sel_setFrame_, 0.0, 0.0, v4, CGRectGetHeight(v46));

  v15 = *(void **)&v1[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_separatorView];
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v16 = sub_1BB5D2A0C(v45[0], v1);
  v17 = objc_msgSend(v1, sel_traitCollection);
  objc_msgSend(v17, sel_displayScale);
  v19 = v18;

  v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = v20;
  if (v19 < 1.0)
    v22 = 1.0;
  else
    v22 = 1.0 / v19;
  objc_msgSend(v20, sel_bounds);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;

  v47.origin.x = v24;
  v47.origin.y = v26;
  v47.size.width = v28;
  v47.size.height = v30;
  objc_msgSend(v15, sel_setFrame_, v16, 0.0, v22, CGRectGetHeight(v47));
  v31 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8NewsFeed36DebugFormatConsolePaneViewController_logViewController], sel_view);
  if (!v31)
    goto LABEL_13;
  v32 = v31;
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  v33 = sub_1BB5D2A0C(v45[0], v1);
  v34 = sub_1BB5D2924(v45[0], v1);
  v35 = objc_msgSend(v1, sel_view);
  if (v35)
  {
    v36 = v35;
    objc_msgSend(v35, sel_bounds);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    v44 = v43;

    v48.origin.x = v38;
    v48.origin.y = v40;
    v48.size.width = v42;
    v48.size.height = v44;
    objc_msgSend(v32, sel_setFrame_, v33, 0.0, v34, CGRectGetHeight(v48));

    return;
  }
LABEL_14:
  __break(1u);
}

CGFloat sub_1BB5D2838(unsigned __int8 a1, id a2)
{
  unsigned int v2;
  id v3;
  CGFloat result;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGRect v22;
  CGRect v23;

  v2 = a1;
  v3 = objc_msgSend(a2, sel_view);
  v5 = v3;
  if (v2 > 1)
  {
    if (v3)
    {
      objc_msgSend(v3, sel_bounds);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;

      v23.origin.x = v15;
      v23.origin.y = v17;
      v23.size.width = v19;
      v23.size.height = v21;
      return CGRectGetWidth(v23);
    }
  }
  else
  {
    if (v3)
    {
      objc_msgSend(v3, sel_bounds);
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;

      v22.origin.x = v7;
      v22.origin.y = v9;
      v22.size.width = v11;
      v22.size.height = v13;
      return CGRectGetWidth(v22) * 0.5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

CGFloat sub_1BB5D2924(unsigned __int8 a1, id a2)
{
  int v2;
  id v3;
  CGFloat result;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGRect v22;
  CGRect v23;

  v2 = a1;
  v3 = objc_msgSend(a2, sel_view);
  v5 = v3;
  if (v2)
  {
    if (v3)
    {
      objc_msgSend(v3, sel_bounds);
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;

      v22.origin.x = v7;
      v22.origin.y = v9;
      v22.size.width = v11;
      v22.size.height = v13;
      return CGRectGetWidth(v22) * 0.5;
    }
    __break(1u);
  }
  else if (v3)
  {
    objc_msgSend(v3, sel_bounds);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;

    v23.origin.x = v15;
    v23.origin.y = v17;
    v23.size.width = v19;
    v23.size.height = v21;
    return CGRectGetWidth(v23);
  }
  __break(1u);
  return result;
}

CGFloat sub_1BB5D2A0C(char a1, id a2)
{
  id v2;
  CGFloat result;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  id v13;
  void *v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGRect v23;
  CGRect v24;

  if (!a1)
    return 0.0;
  if (a1 == 1)
  {
    v2 = objc_msgSend(a2, sel_view);
    if (v2)
    {
      v4 = v2;
      objc_msgSend(v2, sel_bounds);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;

      v23.origin.x = v6;
      v23.origin.y = v8;
      v23.size.width = v10;
      v23.size.height = v12;
      return CGRectGetWidth(v23) * 0.5;
    }
    __break(1u);
  }
  else
  {
    v13 = objc_msgSend(a2, sel_view);
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, sel_bounds);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v22 = v21;

      v24.origin.x = v16;
      v24.origin.y = v18;
      v24.size.width = v20;
      v24.size.height = v22;
      return CGRectGetWidth(v24);
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DebugFormatConsolePaneViewController()
{
  return objc_opt_self();
}

uint64_t FormatSelector.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static FormatSelector.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1BB874398();
}

NewsFeed::FormatSelector __swiftcall FormatSelector.init(stringLiteral:)(NewsFeed::FormatSelector stringLiteral)
{
  NewsFeed::FormatSelector *v1;

  *v1 = stringLiteral;
  return stringLiteral;
}

uint64_t sub_1BB5D2C38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];

  v4 = *v1;
  v5 = v1[1];
  if (qword_1ED3BE7F8 != -1)
    swift_once();
  v12[0] = v4;
  v12[1] = v5;
  v6 = sub_1BA6E583C(v12);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    for (i = (uint64_t *)(v6 + 64); ; i += 5)
    {
      v9 = *(i - 1);
      v10 = *i;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BB043358(a1, v9, v10);
      if (v2)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v7)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t FormatSelector.matches(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15[2];

  v3 = *v1;
  v4 = v1[1];
  if (qword_1ED3BE7F8 != -1)
    swift_once();
  v15[0] = v3;
  v15[1] = v4;
  v5 = sub_1BA6E583C(v15);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  v7 = (uint64_t *)(v5 + 64);
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_1BA71D07C(a1, v8, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1BA6EB5B4);
    v11 = sub_1BA6EB330(v10, v8);
    swift_release();
    if ((v11 & 1) != 0)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    v7 += 5;
    if (!--v6)
      goto LABEL_10;
  }
  v12 = sub_1BA6EBD20(a1, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
    goto LABEL_6;
  v13 = 1;
LABEL_11:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t FormatSelector.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB874674();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v5 = sub_1BB8743B0();
    v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BB5D2F64()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_1BB872AFC((_QWORD *)0xE000000000000000);
  sub_1BB872AFC(v0);
  sub_1BB872AFC(v1);
  return 0;
}

uint64_t FormatSelector.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t FormatSelector.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  return sub_1BB874608();
}

uint64_t sub_1BB5D3074()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  return sub_1BB874608();
}

uint64_t sub_1BB5D30BC()
{
  return sub_1BB872A90();
}

uint64_t sub_1BB5D30C4()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  return sub_1BB874608();
}

uint64_t sub_1BB5D3108(uint64_t a1)
{
  return sub_1BB5D2C38(a1);
}

uint64_t sub_1BB5D311C()
{
  return sub_1BB5D2F64();
}

unint64_t sub_1BB5D3124(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAE97428();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5D3148(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA69C13C();
  a1[2] = sub_1BA68660C();
  result = sub_1BA834FAC();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5D3180()
{
  unint64_t result;

  result = qword_1EF2C8568;
  if (!qword_1EF2C8568)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelector, &type metadata for FormatSelector);
    atomic_store(result, (unint64_t *)&qword_1EF2C8568);
  }
  return result;
}

uint64_t sub_1BB5D31C4()
{
  return MEMORY[0x1E0DEA9F0];
}

unint64_t sub_1BB5D31D4()
{
  unint64_t result;

  result = qword_1EF2C8570;
  if (!qword_1EF2C8570)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSelector, &type metadata for FormatSelector);
    atomic_store(result, (unint64_t *)&qword_1EF2C8570);
  }
  return result;
}

uint64_t sub_1BB5D3218()
{
  return MEMORY[0x1E0DEAA00];
}

uint64_t sub_1BB5D3224()
{
  return MEMORY[0x1E0DEA9F8];
}

ValueMetadata *type metadata accessor for FormatSelector()
{
  return &type metadata for FormatSelector;
}

uint64_t sub_1BB5D3240(uint64_t a1, uint64_t a2)
{
  return sub_1BA71D07C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1BB6BF1EC);
}

void sub_1BB5D3294()
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5D32D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x10) + 64) + 96);
  swift_bridgeObjectRetain();
  return v1;
}

void FormatDataLayoutValue.formatImageRequests(options:inventory:)()
{
  uint64_t v1;

  v1 = type metadata accessor for FormatVideoPlayerData();
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X11 }
}

uint64_t sub_1BB5D35D4()
{
  uint64_t v0;

  return v0;
}

void FormatDataLayoutValue.issueCoverImageRequests(options:inventory:)()
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5D3AB0()
{
  uint64_t v0;

  return v0;
}

void FormatDataLayoutValue.isResizing.getter()
{
  __asm { BR              X11 }
}

void sub_1BB5D3F98()
{
  sub_1BA6BC5C0(0, (unint64_t *)&qword_1ED3A2A80, (void (*)(uint64_t))type metadata accessor for FormatItemNodeData, (void (*)(uint64_t))type metadata accessor for FormatItemNodeDataLayoutAttributes);
  swift_projectBox();
  swift_retain();
  FormatItemNodeDataLayoutAttributes.isResizing.getter();
  swift_release();
  sub_1BB5D3F8C();
}

void sub_1BB5D3FF4(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x18);
  if ((*(_BYTE *)(v1 + 217) & 1) != 0)
    CGRectGetHeight(*(CGRect *)(v1 + 64));
  sub_1BB5D3F8C();
}

uint64_t FormatDataLayoutValue.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BA676824();
  v1 = v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1BB5D406C()
{
  __asm { BR              X11 }
}

double sub_1BB5D40A0@<D0>(uint64_t a1@<X8>)
{
  return *(double *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x18) + 64);
}

void sub_1BB5D4344()
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5D4380@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x18) + 104);
  return swift_retain();
}

uint64_t FormatDataLayoutValue.nodeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BB5D52F4();
  v1 = v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1BB5D4658()
{
  __asm { BR              X12 }
}

void sub_1BB5D46C0(unsigned __int8 a1@<W8>, __n128 a2@<Q0>)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;

  v2->n128_u64[0] = v3;
  v2->n128_u64[1] = v4;
  v2[1] = a2;
  v2[2].n128_u8[0] = a1;
}

void sub_1BB5D46F8(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFBLL) + 0x10) + 160);
  if (v2)
  {
    v3 = 0;
    a1 = *(__n128 *)(*(_QWORD *)(v2 + 16) + 64);
  }
  else
  {
    v3 = 1;
  }
  sub_1BB5D46C0(v3, a1);
}

uint64_t sub_1BB5D48EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for FormatItemNodeData();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0DEE9D8];
  if (((1 << ((*v0 >> 59) & 0x1E | ((*v0 & 4) != 0))) & 0x6FFEF) == 0)
  {
    if (((*v0 >> 59) & 0x1E | (*v0 >> 2) & 1) == 4)
    {
      v6 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      v7 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFFBLL) + 0x28);
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFFBLL) + 0x10) + 64) + 112);
      v18 = MEMORY[0x1E0DEE9D8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        swift_retain();
        swift_retain();
        sub_1BA8E9488(v6, v7);
        v10 = swift_bridgeObjectRetain();
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(v8 + 8 * v11++ + 32);
          v17 = v12;
          v13 = sub_1BB5D48EC(v10);
          v10 = sub_1BB386350(v13);
        }
        while (v9 != v11);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1BA8E94B8(v6, v7);
        return v18;
      }
    }
    else
    {
      sub_1BA6BC5C0(0, (unint64_t *)&qword_1ED3A2A80, (void (*)(uint64_t))type metadata accessor for FormatItemNodeData, (void (*)(uint64_t))type metadata accessor for FormatItemNodeDataLayoutAttributes);
      v14 = swift_projectBox();
      sub_1BA4C2DD8(v14, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeData);
      sub_1BA4B07F0(0, &qword_1ED3A1738, type metadata accessor for FeedItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeedItem(0) - 8) + 80);
      v16 = (v15 + 32) & ~v15;
      v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1BB87CE70;
      sub_1BA4C2DD8((uint64_t)v3, v4 + v16, type metadata accessor for FeedItem);
      sub_1BA4A2E80((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FormatItemNodeData);
    }
  }
  return v4;
}

uint64_t sub_1BB5D4B08()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BA676824();
  v1 = v0;
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_1BB5D4B3C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 208);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D4C34@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 144);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D4D2C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D4E20@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 224);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D4F18@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D500C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 184);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D5104@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

unint64_t sub_1BB5D51FC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v18;

  v6 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BA79AB9C();
    v8 = v7;
    v10 = v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = v6;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1BA79AB9C();
    v8 = v14;
    v10 = v15;
    sub_1BA79A890();
    v12 = a3;
    v13 = v18;
    swift_bridgeObjectRetain();
    v11 = a1;
  }
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = v13;
  return sub_1BA79A788(a1);
}

void sub_1BB5D52F4()
{
  __asm { BR              X11 }
}

uint64_t sub_1BB5D5328@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFBLL) + 0x18) + 48);
}

uint64_t getEnumTagSinglePayload for FormatDataLayoutValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x6E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 110);
  v3 = ((((*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(_QWORD *)a1 & 3))) ^ 0x7F;
  if (v3 >= 0x6D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FormatDataLayoutValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x6D)
  {
    *(_QWORD *)result = a2 - 110;
    if (a3 >= 0x6E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x6E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatDataLayoutValue()
{
  return &type metadata for FormatDataLayoutValue;
}

uint64_t sub_1BB5D562C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) >= 0x13uLL)
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5D5660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v2;
  v21 = a1;
  v22 = a2;
  v5 = sub_1BB86C67C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FormatURL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FormatPostPurchase();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8(v4, (uint64_t)v15, v16);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 2, v9);
  if ((_DWORD)v17)
  {
    v18 = v22;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v17, 2, v5);
  }
  sub_1BA5193C4((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
  sub_1BA7FAB40(v21, (uint64_t)v8);
  result = sub_1BA4A2E80((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
  if (!v3)
  {
    v18 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v22, v8, v5);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v17, 2, v5);
  }
  return result;
}

uint64_t FormatPostPurchase.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  void *v45;
  __int128 v46;
  char v47;

  v39 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BA4CDF6C(0, &qword_1ED3B9C10, (uint64_t (*)(void))sub_1BA6B8518, (uint64_t)&type metadata for FormatCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v36 - v5;
  v6 = type metadata accessor for FormatURL();
  v38 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v36 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)&v36 - v9;
  sub_1BA4CDF6C(0, &qword_1ED3CFAF8, (uint64_t (*)(void))sub_1BAEE4CC0, (uint64_t)&type metadata for FormatPostPurchase.LegacyCodingKeys, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for FormatPostPurchase();
  MEMORY[0x1E0C80A78](v15);
  v37 = (uint64_t)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_1BAEE4CC0();
  v18 = v45;
  sub_1BB87468C();
  if (!v18)
  {
    sub_1BA4A2870(&qword_1ED3B9028, (uint64_t (*)(uint64_t))type metadata accessor for FormatURL, (uint64_t)&protocol conformance descriptor for FormatURL);
    v19 = (uint64_t)v42;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v30 = v37;
    sub_1BA5193C4(v19, v37, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v30, 0, 2, v6);
    v31 = v39;
    v20 = v44;
LABEL_17:
    sub_1BA5193C4(v30, v31, (uint64_t (*)(_QWORD))type metadata accessor for FormatPostPurchase);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  v20 = v44;
  __swift_project_boxed_opaque_existential_1(v44, v44[3]);
  sub_1BA6B8518();
  v21 = v43;
  sub_1BB87468C();
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v22 = sub_1BB872874();
  v23 = Dictionary<>.errorOnUnknownKeys.getter(v22);
  swift_bridgeObjectRelease();
  v24 = v41;
  v25 = v6;
  if ((v23 & 1) == 0)
  {
LABEL_10:
    sub_1BB5D5D5C();
    v46 = 0uLL;
    sub_1BB8740D4();
    if (v47)
    {
      if (v47 == 1)
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v24);

        v30 = v37;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 2, 2, v6);
      }
      else
      {
        v46 = xmmword_1BB87FC90;
        sub_1BA4A2870(&qword_1ED3B9028, (uint64_t (*)(uint64_t))type metadata accessor for FormatURL, (uint64_t)&protocol conformance descriptor for FormatURL);
        v34 = (uint64_t)v36;
        sub_1BB8740D4();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v24);

        v30 = v37;
        sub_1BA5193C4(v34, v37, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v30, 0, 2, v25);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v24);

      v30 = v37;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, 1, 2, v6);
    }
    v31 = v39;
    goto LABEL_17;
  }
  v26 = sub_1BB8740EC();
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v28 = (unint64_t *)(v26 + 40);
  while (1)
  {
    v29 = *v28;
    if (*v28 >= 4)
      break;
    v28 += 2;
    if (!--v27)
      goto LABEL_9;
  }
  v32 = *(v28 - 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  sub_1BA98D1F0();
  swift_allocError();
  *(_QWORD *)v33 = v32;
  *(_QWORD *)(v33 + 8) = v29;
  *(_QWORD *)(v33 + 16) = &unk_1E726FB78;
  *(_OWORD *)(v33 + 24) = xmmword_1BB889D20;
  swift_willThrow();
  sub_1BA98D234(v32, v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v24);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

unint64_t sub_1BB5D5D5C()
{
  unint64_t result;

  result = qword_1ED3BE270;
  if (!qword_1ED3BE270)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FA3C, &type metadata for FormatPostPurchase.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3BE270);
  }
  return result;
}

uint64_t FormatPostPurchase.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (**v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(_QWORD);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(_QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;

  sub_1BAEE4C40(0);
  v75 = v2;
  MEMORY[0x1E0C80A78](v2);
  v76 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5D6598();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FormatURL();
  v8 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v77 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormatVersionRequirement(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v74 - v14;
  MEMORY[0x1E0C80A78](v16);
  v80 = (char *)&v74 - v17;
  MEMORY[0x1E0C80A78](v18);
  v79 = (char *)&v74 - v19;
  sub_1BA6EE1B8(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v78 = (char *)&v74 - v24;
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v74 - v26;
  v28 = type metadata accessor for FormatPostPurchase();
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4C2DD8((uint64_t)v82, (uint64_t)v30, v31);
  v32 = v8[6](v30, 2, v7);
  if (v32)
  {
    if (v32 == 1)
    {
      v33 = a1[3];
      v34 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v33);
      sub_1BA6B8518();
      sub_1BA6EC090((uint64_t)&type metadata for FormatCodingKeys, v35, v33, (uint64_t)&type metadata for FormatVersions.StarSkyC, v34, (uint64_t)&off_1E734BC40, (uint64_t)v27);
      if (qword_1ED3C6D70 != -1)
        swift_once();
      v36 = sub_1BB86EB84();
      v37 = __swift_project_value_buffer(v36, (uint64_t)qword_1ED476C50);
      v38 = (uint64_t)v79;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v79, v37, v36);
      type metadata accessor for FormatVersionRequirement.Value(0);
      swift_storeEnumTagMultiPayload();
      v39 = 0;
    }
    else
    {
      v55 = a1[3];
      v56 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v55);
      sub_1BA6B8518();
      v27 = v78;
      sub_1BA6EC090((uint64_t)&type metadata for FormatCodingKeys, v57, v55, (uint64_t)&type metadata for FormatVersions.StarSkyC, v56, (uint64_t)&off_1E734BC40, (uint64_t)v78);
      if (qword_1ED3C6D70 != -1)
        swift_once();
      v58 = sub_1BB86EB84();
      v59 = __swift_project_value_buffer(v58, (uint64_t)qword_1ED476C50);
      v38 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v80, v59, v58);
      type metadata accessor for FormatVersionRequirement.Value(0);
      swift_storeEnumTagMultiPayload();
      v39 = 1;
    }
    sub_1BAD78D3C(v39, v38);
    sub_1BA4A2E80(v38, type metadata accessor for FormatVersionRequirement);
    v60 = (uint64_t (*)(_QWORD))sub_1BA6EE1B8;
    v61 = (uint64_t)v27;
  }
  else
  {
    v79 = (char *)v8;
    v80 = v15;
    v82 = v12;
    v40 = (uint64_t)v30;
    v42 = (uint64_t)v76;
    v41 = v77;
    sub_1BA5193C4(v40, v77, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    v43 = a1[3];
    v44 = a1[4];
    v45 = __swift_project_boxed_opaque_existential_1(a1, v43);
    v46 = sub_1BA5F45FC((uint64_t)v45, v43, (uint64_t)&type metadata for FormatVersions.StarSkyC, v44, (uint64_t)&off_1E734BC40);
    v48 = a1[3];
    v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v48);
    if ((v46 & 1) != 0)
    {
      sub_1BA6B8518();
      sub_1BA6EC090((uint64_t)&type metadata for FormatCodingKeys, v49, v48, (uint64_t)&type metadata for FormatVersions.StarSkyC, v47, (uint64_t)&off_1E734BC40, (uint64_t)v22);
      sub_1BA4C2DD8(v41, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
      (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v79 + 7))(v6, 0, 1, v7);
      if (qword_1ED3C6D70 != -1)
        swift_once();
      v50 = sub_1BB86EB84();
      v51 = __swift_project_value_buffer(v50, (uint64_t)qword_1ED476C50);
      v52 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v80, v51, v50);
      type metadata accessor for FormatVersionRequirement.Value(0);
      swift_storeEnumTagMultiPayload();
      sub_1BAD7F538(2, (uint64_t)v6, v52);
      sub_1BA4A2E80(v52, type metadata accessor for FormatVersionRequirement);
      sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BB5D6598);
      v53 = sub_1BA6EE1B8;
      v54 = (uint64_t)v22;
    }
    else
    {
      sub_1BAEE4CC0();
      sub_1BA6EC090((uint64_t)&type metadata for FormatPostPurchase.LegacyCodingKeys, v62, v48, (uint64_t)&type metadata for FormatVersions.AzdenE, v47, (uint64_t)&off_1E734BD20, v42);
      if (qword_1ED3C6D40 != -1)
        swift_once();
      v63 = sub_1BB86EB84();
      v64 = __swift_project_value_buffer(v63, (uint64_t)qword_1ED476BC0);
      v65 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v82, v64, v63);
      type metadata accessor for FormatVersionRequirement.Value(0);
      swift_storeEnumTagMultiPayload();
      v66 = (uint64_t *)(v42 + *(int *)(v75 + 44));
      v68 = *v66;
      v67 = v66[1];
      v69 = swift_allocObject();
      *(_QWORD *)(v69 + 16) = v68;
      *(_QWORD *)(v69 + 24) = v67;
      MEMORY[0x1E0C80A78](v69);
      *(&v74 - 4) = (uint64_t)sub_1BA90CF04;
      *(&v74 - 3) = 0;
      *(&v74 - 2) = (uint64_t)sub_1BAEE4D6C;
      *(&v74 - 1) = v70;
      swift_retain();
      v71 = v81;
      sub_1BAE2A5C4(v65, (uint64_t)sub_1BAE76064, (uint64_t)(&v74 - 6));
      if (v71)
      {
        swift_release();
        v72 = v65;
      }
      else
      {
        sub_1BA4CDF6C(0, &qword_1EF2B5870, (uint64_t (*)(void))sub_1BAEE4CC0, (uint64_t)&type metadata for FormatPostPurchase.LegacyCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
        sub_1BA974590((unint64_t *)&qword_1EF2B5878, &qword_1EF2B5870, (uint64_t (*)(void))sub_1BAEE4CC0, (uint64_t)&type metadata for FormatPostPurchase.LegacyCodingKeys);
        sub_1BA4A2870(&qword_1ED39BD88, (uint64_t (*)(uint64_t))type metadata accessor for FormatURL, (uint64_t)&protocol conformance descriptor for FormatURL);
        sub_1BB874464();
        swift_release();
        v72 = (uint64_t)v82;
      }
      sub_1BA4A2E80(v72, type metadata accessor for FormatVersionRequirement);
      v53 = sub_1BAEE4C40;
      v54 = v42;
    }
    sub_1BA4A2E80(v54, (uint64_t (*)(_QWORD))v53);
    v60 = (uint64_t (*)(_QWORD))type metadata accessor for FormatURL;
    v61 = v41;
  }
  return sub_1BA4A2E80(v61, v60);
}

void sub_1BB5D6598()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9070)
  {
    type metadata accessor for FormatURL();
    v0 = sub_1BB873A2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9070);
  }
}

uint64_t sub_1BB5D65EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BB7FDAD8(*a1, *a2);
}

uint64_t sub_1BB5D65F8()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5D6694()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5D670C()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5D67A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB5D7A3C();
  *a1 = result;
  return result;
}

void sub_1BB5D67D0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xEE00776F6C46676ELL;
  v5 = 0x696472616F626E6FLL;
  if (v2 != 1)
  {
    v5 = 7107189;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701736302;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BB5D682C()
{
  sub_1BB5D79F8();
  return sub_1BB872D60();
}

uint64_t sub_1BB5D6888()
{
  sub_1BB5D79F8();
  return sub_1BB872D0C();
}

uint64_t sub_1BB5D68D4()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  return sub_1BB874608();
}

uint64_t sub_1BB5D691C()
{
  return sub_1BB872A90();
}

uint64_t sub_1BB5D692C()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  return sub_1BB874608();
}

uint64_t sub_1BB5D6970@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BB873FE4();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1BB5D69C0(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1BB5D69D4()
{
  return 7107189;
}

uint64_t sub_1BB5D69E4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BB873FE4();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1BB5D6A38()
{
  sub_1BAEE4CC0();
  return sub_1BB874710();
}

uint64_t sub_1BB5D6A60()
{
  sub_1BAEE4CC0();
  return sub_1BB87471C();
}

uint64_t sub_1BB5D6A8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatPostPurchase.init(from:)(a1, a2);
}

uint64_t sub_1BB5D6AA0(_QWORD *a1)
{
  return FormatPostPurchase.encode(to:)(a1);
}

uint64_t sub_1BB5D6AB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s8NewsFeed18FormatPostPurchaseO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  char v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v21;

  v4 = type metadata accessor for FormatURL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FormatPostPurchase();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5D7A84();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  sub_1BA4C2DD8(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FormatPostPurchase);
  sub_1BA4C2DD8(a2, v15, (uint64_t (*)(_QWORD))type metadata accessor for FormatPostPurchase);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v17 = v16(v13, 2, v4);
  if (v17)
  {
    if (v17 == 1)
    {
      if (v16((char *)v15, 2, v4) != 1)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v16((char *)v15, 2, v4) == 2)
    {
LABEL_8:
      v18 = 1;
LABEL_11:
      v19 = (uint64_t (*)(_QWORD))type metadata accessor for FormatPostPurchase;
      goto LABEL_12;
    }
  }
  else
  {
    sub_1BA4C2DD8((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatPostPurchase);
    if (!v16((char *)v15, 2, v4))
    {
      sub_1BA5193C4(v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
      v18 = _s8NewsFeed9FormatURLO2eeoiySbAC_ACtFZ_0((uint64_t)v10, (uint64_t)v7);
      sub_1BA4A2E80((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
      sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
      goto LABEL_11;
    }
    sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
  }
LABEL_9:
  v18 = 0;
  v19 = (uint64_t (*)(_QWORD))sub_1BB5D7A84;
LABEL_12:
  sub_1BA4A2E80((uint64_t)v13, v19);
  return v18 & 1;
}

uint64_t sub_1BB5D6CEC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_1BA4A2870(&qword_1ED3BE278, (uint64_t (*)(uint64_t))type metadata accessor for FormatPostPurchase, (uint64_t)&protocol conformance descriptor for FormatPostPurchase);
  a1[2] = sub_1BA4A2870(&qword_1EF2B5BD8, (uint64_t (*)(uint64_t))type metadata accessor for FormatPostPurchase, (uint64_t)&protocol conformance descriptor for FormatPostPurchase);
  result = sub_1BA4A2870(&qword_1EF2C8578, (uint64_t (*)(uint64_t))type metadata accessor for FormatPostPurchase, (uint64_t)&protocol conformance descriptor for FormatPostPurchase);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormatPostPurchase(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FormatURL();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v12 = *(_QWORD *)a2;
        v13 = *((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        v15 = a2[24];
        sub_1BA690C00(v12, v13, v14, v15);
        *a1 = v12;
        a1[1] = v13;
        a1[2] = v14;
        *((_BYTE *)a1 + 24) = v15;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          v11 = *((_QWORD *)a2 + 1);
          *a1 = *(_QWORD *)a2;
          a1[1] = v11;
          a1[2] = *((_QWORD *)a2 + 2);
          swift_bridgeObjectRetain();
        }
        else
        {
          v16 = sub_1BB86C67C();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
          v17 = type metadata accessor for FormatAbsoluteURL();
          *(uint64_t *)((char *)a1 + *(int *)(v17 + 20)) = *(_QWORD *)&a2[*(int *)(v17 + 20)];
        }
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for FormatPostPurchase(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for FormatURL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 2)
      return sub_1BA5A7EF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
    if ((_DWORD)result == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((_DWORD)result)
        return result;
      v4 = sub_1BB86C67C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for FormatAbsoluteURL();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *initializeWithCopy for FormatPostPurchase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for FormatURL();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = a2[2];
      v13 = *((_BYTE *)a2 + 24);
      sub_1BA690C00(v10, v11, v12, v13);
      *a1 = v10;
      a1[1] = v11;
      a1[2] = v12;
      *((_BYTE *)a1 + 24) = v13;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
      }
      else
      {
        v14 = sub_1BB86C67C();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = type metadata accessor for FormatAbsoluteURL();
        *(uint64_t *)((char *)a1 + *(int *)(v15 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v15 + 20));
      }
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

uint64_t assignWithCopy for FormatPostPurchase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for FormatURL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v13 = *(_QWORD *)a2;
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        v16 = *(_BYTE *)(a2 + 24);
        sub_1BA690C00(v13, v14, v15, v16);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = v15;
        *(_BYTE *)(a1 + 24) = v16;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          swift_bridgeObjectRetain();
        }
        else
        {
          v17 = sub_1BB86C67C();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
          v18 = type metadata accessor for FormatAbsoluteURL();
          *(_QWORD *)(a1 + *(int *)(v18 + 20)) = *(_QWORD *)(a2 + *(int *)(v18 + 20));
        }
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      return a1;
    }
LABEL_9:
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_1BA4A2E80(a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    sub_1BA4A2E80(a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
    v12 = swift_getEnumCaseMultiPayload();
    if (v12 == 2)
    {
      v20 = *(_QWORD *)a2;
      v21 = *(_QWORD *)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      v23 = *(_BYTE *)(a2 + 24);
      sub_1BA690C00(v20, v21, v22, v23);
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v21;
      *(_QWORD *)(a1 + 16) = v22;
      *(_BYTE *)(a1 + 24) = v23;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v12 == 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = sub_1BB86C67C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = type metadata accessor for FormatAbsoluteURL();
        *(_QWORD *)(a1 + *(int *)(v25 + 20)) = *(_QWORD *)(a2 + *(int *)(v25 + 20));
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for FormatPostPurchase(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for FormatURL();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      v8 = sub_1BB86C67C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = type metadata accessor for FormatAbsoluteURL();
      *(_QWORD *)&a1[*(int *)(v9 + 20)] = *(_QWORD *)&a2[*(int *)(v9 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

char *assignWithTake for FormatPostPurchase(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for FormatURL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        return a1;
      sub_1BA4A2E80((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
      if (!swift_getEnumCaseMultiPayload())
      {
        v15 = sub_1BB86C67C();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
        v16 = type metadata accessor for FormatAbsoluteURL();
        *(_QWORD *)&a1[*(int *)(v16 + 20)] = *(_QWORD *)&a2[*(int *)(v16 + 20)];
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v11 = *(_QWORD *)(v7 + 64);
      goto LABEL_8;
    }
    sub_1BA4A2E80((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FormatURL);
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v11);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v7 + 64));
  }
  else
  {
    v12 = sub_1BB86C67C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v13 = type metadata accessor for FormatAbsoluteURL();
    *(_QWORD *)&a1[*(int *)(v13 + 20)] = *(_QWORD *)&a2[*(int *)(v13 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatPostPurchase()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5D764C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for FormatURL();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FormatPostPurchase()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5D76A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for FormatURL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1BB5D76F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormatURL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_1BB5D7730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormatURL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t storeEnumTagSinglePayload for FormatPostPurchase.CodingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5D77BC + 4 * byte_1BB92F795[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5D77F0 + 4 * byte_1BB92F790[v4]))();
}

uint64_t sub_1BB5D77F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D77F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5D7800);
  return result;
}

uint64_t sub_1BB5D780C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5D7814);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5D7818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D7820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatPostPurchase.CodingType()
{
  return &type metadata for FormatPostPurchase.CodingType;
}

uint64_t storeEnumTagSinglePayload for FormatPostPurchase.LegacyCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB5D787C + 4 * byte_1BB92F79A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB5D789C + 4 * byte_1BB92F79F[v4]))();
}

_BYTE *sub_1BB5D787C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB5D789C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5D78A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5D78AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5D78B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5D78BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatPostPurchase.LegacyCodingKeys()
{
  return &type metadata for FormatPostPurchase.LegacyCodingKeys;
}

unint64_t sub_1BB5D78DC()
{
  unint64_t result;

  result = qword_1EF2C8580;
  if (!qword_1EF2C8580)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92F94C, &type metadata for FormatPostPurchase.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8580);
  }
  return result;
}

unint64_t sub_1BB5D7924()
{
  unint64_t result;

  result = qword_1EF2C8588;
  if (!qword_1EF2C8588)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FA14, &type metadata for FormatPostPurchase.CodingType);
    atomic_store(result, (unint64_t *)&qword_1EF2C8588);
  }
  return result;
}

unint64_t sub_1BB5D796C()
{
  unint64_t result;

  result = qword_1ED3C7EA8;
  if (!qword_1ED3C7EA8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92F884, &type metadata for FormatPostPurchase.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EA8);
  }
  return result;
}

unint64_t sub_1BB5D79B4()
{
  unint64_t result;

  result = qword_1ED3C7EA0;
  if (!qword_1ED3C7EA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92F8AC, &type metadata for FormatPostPurchase.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED3C7EA0);
  }
  return result;
}

unint64_t sub_1BB5D79F8()
{
  unint64_t result;

  result = qword_1ED3BE268;
  if (!qword_1ED3BE268)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92F99C, &type metadata for FormatPostPurchase.CodingType);
    atomic_store(result, (unint64_t *)&qword_1ED3BE268);
  }
  return result;
}

uint64_t sub_1BB5D7A3C()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_1BB5D7A84()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF2C8590)
  {
    type metadata accessor for FormatPostPurchase();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF2C8590);
  }
}

ValueMetadata *type metadata accessor for FormatMenuGroupable()
{
  return &type metadata for FormatMenuGroupable;
}

void sub_1BB5D7AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v4);
  sub_1BB4D4CAC();
  MEMORY[0x1E0C80A78](v5);
  __asm { BR              X10 }
}

uint64_t sub_1BB5D7BB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v5 - 232) = v4;
  v6 = v0[2];
  v7 = v0[3];
  v8 = v0[4];
  v9 = v0[5];
  v10 = v0[6];
  v11 = v0[7];
  *(_QWORD *)(v5 - 72) = v3;
  v13 = v0[8];
  v12 = v0[9];
  *(_QWORD *)(v5 - 224) = v6;
  *(_QWORD *)(v5 - 216) = v7;
  *(_QWORD *)(v5 - 208) = v8;
  *(_QWORD *)(v5 - 200) = v9;
  v14 = v10;
  *(_QWORD *)(v5 - 248) = v2;
  *(_QWORD *)(v5 - 240) = v10;
  *(_QWORD *)(v5 - 192) = v10;
  *(_QWORD *)(v5 - 184) = v11;
  v15 = v11;
  *(_QWORD *)(v5 - 176) = v13;
  *(_QWORD *)(v5 - 168) = v12;
  sub_1BA7CCBB4(v6, v7, v8, v9);
  sub_1BA7CCCA0(v14, v15, v13);
  swift_retain();
  v16 = *(_QWORD *)(v5 - 72);
  sub_1BB21C560(*(_QWORD *)(v5 - 248), v1, v5 - 152);
  sub_1BA7CCC14(v6, v7, v8, v9);
  sub_1BA7CCC64(*(_QWORD *)(v5 - 240), v15, v13);
  result = swift_release();
  if (!v16)
  {
    v18 = *(_QWORD *)(v5 - 112);
    if (v18 == 1)
    {
      result = 0x8000000000000000;
    }
    else
    {
      v19 = *(_DWORD *)(v5 - 120);
      v20 = *(_QWORD *)(v5 - 128);
      v21 = *(_DWORD *)(v5 - 136);
      v23 = *(_QWORD *)(v5 - 152);
      v22 = *(_QWORD *)(v5 - 144);
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v23;
      *(_QWORD *)(result + 24) = v22;
      *(_BYTE *)(result + 32) = v21 & 1;
      *(_QWORD *)(result + 40) = v20;
      *(_BYTE *)(result + 48) = v19 & 1;
      *(_QWORD *)(result + 56) = v18;
    }
    **(_QWORD **)(v5 - 232) = result;
  }
  return result;
}

void sub_1BB5D7F98(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BB5D7FD0(_OWORD *a1, unint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v8[5];
  __int128 v9[10];

  if (a2 >> 61)
  {
    v6 = 0;
  }
  else
  {
    v2 = a1[2];
    v9[0] = a1[1];
    v9[1] = v2;
    v3 = a1[4];
    v9[2] = a1[3];
    v9[3] = v3;
    v4 = *(_OWORD *)(a2 + 32);
    v8[0] = *(_OWORD *)(a2 + 16);
    v8[1] = v4;
    v5 = *(_OWORD *)(a2 + 64);
    v8[2] = *(_OWORD *)(a2 + 48);
    v8[3] = v5;
    sub_1BB21CB68(v9, v8);
  }
  return v6 & 1;
}

uint64_t sub_1BB5D8290@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BAEA3F48(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1BB5D82B8(_QWORD *a1)
{
  uint64_t *v1;

  sub_1BADBDA10(a1, *v1);
}

void sub_1BB5D82D0(uint64_t *a1)
{
  sub_1BB5D7F98(*a1);
}

unint64_t sub_1BB5D82DC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA82E9B0();
  a1[2] = sub_1BAEE4BAC();
  result = sub_1BB5D8310();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5D8310()
{
  unint64_t result;

  result = qword_1EF2C8598;
  if (!qword_1EF2C8598)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FAE4, &type metadata for FormatMenuGroupable);
    atomic_store(result, (unint64_t *)&qword_1EF2C8598);
  }
  return result;
}

unint64_t sub_1BB5D8354(uint64_t a1)
{
  unint64_t result;

  result = sub_1BAEE40B4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1BB5D8378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BB5D83C0()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return v0;
}

_QWORD *sub_1BB5D8814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v25 = v3;
    v6 = v4[4];
    v7 = v4[2];
    v8 = v4[3];
    v9 = *v4;
    v22 = *(v4 - 2);
    v23 = *(v4 - 1);
    v24 = v4[1];
    sub_1BA7CCBB4(v22, v23, *v4, v24);
    sub_1BA7CCCA0(v7, v8, v6);
    swift_retain();
    sub_1BB21C8C4(a2, a3);
    v11 = v10;
    v21 = v12;
    v20 = v13;
    sub_1BA7CCC14(v22, v23, v9, v24);
    sub_1BA7CCC64(v7, v8, v6);
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1BB38E5CC(0, v5[2] + 1, 1, v5);
    v15 = v5[2];
    v14 = v5[3];
    if (v15 >= v14 >> 1)
      v5 = sub_1BB38E5CC((_QWORD *)(v14 > 1), v15 + 1, 1, v5);
    v4 += 8;
    v5[2] = v15 + 1;
    v16 = &v5[3 * v15];
    v16[4] = v11;
    v16[5] = v21;
    *((_BYTE *)v16 + 48) = v20 & 1;
    v3 = v25 - 1;
  }
  while (v25 != 1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BB5D89D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BB4D4CAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BB5D8A14(_QWORD *a1)
{
  uint64_t v1;

  return sub_1BB5D7AF4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *a1);
}

uint64_t sub_1BB5D8A34()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5D8A58()
{
  uint64_t v0;
  int v1;
  int v2;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    sub_1BAB5EC9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  v2 = *(unsigned __int8 *)(v0 + 48);
  if (v2 != 255)
    sub_1BA92F770(*(void **)(v0 + 40), v2 & 1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5D8AAC()
{
  uint64_t v0;

  sub_1BAB5EC9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_1BA92F770(*(void **)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

void FormatFontAttributes.width.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FormatFontAttributes.slant.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FormatFontAttributes.grade.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void FormatFontAttributes.design.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

uint64_t sub_1BB5D8B20(_QWORD *a1)
{
  return FormatFontAttributes.encode(to:)(a1);
}

uint64_t _s8NewsFeed20FormatFontAttributesV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  int v4;
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = *(unsigned __int8 *)a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_BYTE *)a1 + 32);
  v9 = *((unsigned __int8 *)a1 + 33);
  v10 = *(unsigned __int8 *)a2;
  v11 = a2[1];
  v12 = *((unsigned __int8 *)a2 + 16);
  v13 = *((_QWORD *)a2 + 3);
  v14 = *((unsigned __int8 *)a2 + 32);
  v15 = *((unsigned __int8 *)a2 + 33);
  if (v4 != 10)
  {
    if (v10 == 10)
      return 0;
    sub_1BB803F88(v4);
    if ((v16 & 1) == 0)
      return 0;
LABEL_6:
    if ((v6 & 1) != 0)
    {
      if (!v12)
        return 0;
    }
    else
    {
      if (v5 == v11)
        v17 = v12;
      else
        v17 = 1;
      if ((v17 & 1) != 0)
        return 0;
    }
    if ((v8 & 1) != 0)
    {
      if (!v14)
        return 0;
    }
    else
    {
      if (v7 == v13)
        v18 = v14;
      else
        v18 = 1;
      if ((v18 & 1) != 0)
        return 0;
    }
    if (v9 == 4)
    {
      if (v15 != 4)
        return 0;
    }
    else
    {
      if (v15 == 4)
        return 0;
      sub_1BB803E34(v9);
      if ((v19 & 1) == 0)
        return 0;
    }
    return 1;
  }
  if (v10 == 10)
    goto LABEL_6;
  return 0;
}

unint64_t sub_1BB5D8C30(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5D8C54();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5D8C54()
{
  unint64_t result;

  result = qword_1EF2C85A0;
  if (!qword_1EF2C85A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontAttributes, &type metadata for FormatFontAttributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C85A0);
  }
  return result;
}

unint64_t sub_1BB5D8C98(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA6101FC();
  a1[2] = sub_1BAEEA070();
  result = sub_1BB5D8CCC();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5D8CCC()
{
  unint64_t result;

  result = qword_1EF2C85A8;
  if (!qword_1EF2C85A8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatFontAttributes, &type metadata for FormatFontAttributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C85A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FormatFontAttributes(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 33) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 33);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 33) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for FormatFontAttributes()
{
  return &type metadata for FormatFontAttributes;
}

uint64_t sub_1BB5D8D74(void *a1, uint64_t *a2)
{
  uint64_t v2;
  __int16 v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v10[2];
  __int128 v11;
  unint64_t v12;

  v2 = *a2;
  v3 = *((_WORD *)a2 + 16);
  v4 = objc_msgSend(a1, sel_legibilityWeight);
  v5 = MEMORY[0x1E0DEE9E0];
  if (v4 == (id)-1)
  {
    if (!UIAccessibilityIsBoldTextEnabled())
      goto LABEL_10;
  }
  else if (!v4 || v4 != (id)1 && !UIAccessibilityIsBoldTextEnabled())
  {
    goto LABEL_10;
  }
  v6 = objc_msgSend((id)objc_opt_self(), sel_ts_fontLegibilityWeightAttributeName);
  if (!v6)
  {
    sub_1BB8729A0();
    v6 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 1);
  v12 = sub_1BA78DE28();
  *(_QWORD *)&v11 = v7;
  sub_1BA76EAE0(&v11, v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BB4BD9A8(v10, v6, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
LABEL_10:
  if ((v3 & 0xFF00) != 0x500)
    __asm { BR              X11 }
  return v5;
}

unint64_t destroy for FeedConfigCoderError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s8NewsFeed20FeedConfigCoderErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for FeedConfigCoderError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FeedConfigCoderError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedConfigCoderError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FeedConfigCoderError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *sub_1BB5D955C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedConfigCoderError()
{
  return &type metadata for FeedConfigCoderError;
}

ValueMetadata *type metadata accessor for SportsEventStatusRequest()
{
  return &type metadata for SportsEventStatusRequest;
}

uint64_t SportsDataServiceContext.hash(into:)()
{
  return sub_1BB8745D8();
}

BOOL static SportsDataServiceContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SportsDataServiceContext.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t SportsDataServiceContext.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x68736572666572;
  if (*v0 != 1)
    v1 = 0x6863746566657270;
  if (*v0)
    return v1;
  else
    return 0x746C7561666564;
}

unint64_t sub_1BB5D9680()
{
  unint64_t result;

  result = qword_1EF2C85B0;
  if (!qword_1EF2C85B0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SportsDataServiceContext, &type metadata for SportsDataServiceContext);
    atomic_store(result, (unint64_t *)&qword_1EF2C85B0);
  }
  return result;
}

uint64_t sub_1BB5D96C4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x68736572666572;
  if (*v0 != 1)
    v1 = 0x6863746566657270;
  if (*v0)
    return v1;
  else
    return 0x746C7561666564;
}

uint64_t storeEnumTagSinglePayload for SportsDataServiceContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5D976C + 4 * byte_1BB92FD15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5D97A0 + 4 * asc_1BB92FD10[v4]))();
}

uint64_t sub_1BB5D97A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D97A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5D97B0);
  return result;
}

uint64_t sub_1BB5D97BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5D97C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5D97C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5D97D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsDataServiceContext()
{
  return &type metadata for SportsDataServiceContext;
}

BOOL static FormatBindingShareAttributionExpression.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_1BB5D9804(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5D9828();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5D9828()
{
  unint64_t result;

  result = qword_1EF2C85B8;
  if (!qword_1EF2C85B8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingShareAttributionExpression, &type metadata for FormatBindingShareAttributionExpression);
    atomic_store(result, (unint64_t *)&qword_1EF2C85B8);
  }
  return result;
}

unint64_t sub_1BB5D986C(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA60EE40();
  a1[2] = sub_1BAEF5C0C();
  result = sub_1BB5D98A0();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5D98A0()
{
  unint64_t result;

  result = qword_1EF2C85C0;
  if (!qword_1EF2C85C0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatBindingShareAttributionExpression, &type metadata for FormatBindingShareAttributionExpression);
    atomic_store(result, (unint64_t *)&qword_1EF2C85C0);
  }
  return result;
}

uint64_t sub_1BB5D98E4(_QWORD *a1)
{
  return FormatBindingShareAttributionExpression.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for FormatBindingShareAttributionExpression()
{
  return &type metadata for FormatBindingShareAttributionExpression;
}

ValueMetadata *type metadata accessor for A12_V14()
{
  return &type metadata for A12_V14;
}

uint64_t sub_1BB5D9918(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C8700, (uint64_t (*)(void))sub_1BB5DC168, (uint64_t)&type metadata for A12_V14.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5DC168();
  sub_1BB8746C8();
  v10 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v10;
  v13 = 0;
  type metadata accessor for CGRect(0);
  sub_1BA4A2870(&qword_1EF2A9A18, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  sub_1BB8741AC();
  if (!v2)
  {
    *(_QWORD *)&v12[0] = *(_QWORD *)(v3 + 32);
    v13 = 1;
    sub_1BA4C576C(0, &qword_1ED3B94A0);
    sub_1BA4DB848(&qword_1EF2A9F98, (uint64_t (*)(void))sub_1BA82F554, MEMORY[0x1E0DEAF10]);
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BB5D9ACC()
{
  sub_1BB5DC168();
  return sub_1BB874710();
}

uint64_t sub_1BB5D9AF4()
{
  sub_1BB5DC168();
  return sub_1BB87471C();
}

double sub_1BB5D9B1C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1BB5DBF54(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1BB5D9B60(_QWORD *a1)
{
  return sub_1BB5D9918(a1);
}

uint64_t sub_1BB5D9B74()
{
  sub_1BB5DBC60();
  return sub_1BB86D96C();
}

uint64_t sub_1BB5D9BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  unsigned __int8 v71;
  ValueMetadata *v72;
  unint64_t v73;
  uint64_t v74;

  v74 = a2;
  v61 = a3;
  v5 = sub_1BB86C8E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupLayoutContext();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x1E0C80A78](v9);
  v62 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v51 - v12;
  v14 = type metadata accessor for GroupLayoutBindingContext();
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *v3;
  v17 = (void *)*((_QWORD *)v3 + 1);
  v18 = v3[16];
  *(_QWORD *)&v70 = 4;
  if (GroupLayoutBindingContext.count(for:)((NewsFeed::FeedItemTraits)&v70))
  {
    sub_1BA7E415C();
    swift_allocError();
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_QWORD *)(v19 + 32) = 0;
    *(_BYTE *)(v19 + 40) = 13;
    return swift_willThrow();
  }
  else
  {
    v55 = a1;
    v54 = v16;
    sub_1BA4C2DD8(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutBindingContext);
    v21 = (uint64_t)v13;
    sub_1BA4C2DD8(v74, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    v22 = v17;
    v23 = v17;
    v24 = v18;
    sub_1BA7C26A0(v23, v18);
    sub_1BB86C8D4();
    v53 = sub_1BB86C8C8();
    v52 = v25;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v72 = &type metadata for A12_V14;
    v26 = sub_1BA8EE7C0();
    v73 = v26;
    v27 = v56;
    LOBYTE(v70) = v56;
    *((_QWORD *)&v70 + 1) = v22;
    v71 = v24;
    type metadata accessor for GroupLayoutKey();
    v28 = swift_allocObject();
    sub_1BA7C26A0(v22, v24);
    v64 = sub_1BB874734();
    v65 = v29;
    v68 = 95;
    v69 = 0xE100000000000000;
    v66 = 45;
    v67 = 0xE100000000000000;
    sub_1BA7114A0();
    v30 = sub_1BB873B04();
    v32 = v31;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 16) = v30;
    *(_QWORD *)(v28 + 24) = v32;
    v33 = (uint64_t *)(v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_identifier);
    v34 = v52;
    *v33 = v53;
    v33[1] = v34;
    sub_1BA4C010C((uint64_t)&v70, v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_factory);
    v35 = v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings;
    sub_1BA5193C4((uint64_t)v54, v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_bindings, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutBindingContext);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v35, 0, 1, v58);
    v36 = v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext;
    sub_1BA5193C4(v21, v28 + OBJC_IVAR____TtC8NewsFeed14GroupLayoutKey_layoutContext, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v36, 0, 1, v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
    sub_1BA7C2538(v22, v24);
    v72 = &type metadata for A12_V14;
    v73 = v26;
    LOBYTE(v70) = v27;
    *((_QWORD *)&v70 + 1) = v22;
    v71 = v24;
    v37 = v62;
    sub_1BA4C2DD8(v74, v62, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
    sub_1BA4B07F0(0, qword_1ED3B0E60, type metadata accessor for FeedHeadline, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FeedItemSorter);
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = MEMORY[0x1E0DEE9D8];
    v39 = (_QWORD *)(v38 + 16);
    swift_beginAccess();
    v40 = *(_QWORD **)(v38 + 16);
    sub_1BA7C26A0(v22, v24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v38 + 16) = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v40 = sub_1BA7892A0(0, v40[2] + 1, 1, v40);
      *v39 = v40;
    }
    v42 = v61;
    v43 = v63;
    v45 = v40[2];
    v44 = v40[3];
    if (v45 >= v44 >> 1)
    {
      v40 = sub_1BA7892A0((_QWORD *)(v44 > 1), v45 + 1, 1, v40);
      *v39 = v40;
    }
    v40[2] = v45 + 1;
    v46 = &v40[2 * v45];
    v46[4] = sub_1BACB8D7C;
    v46[5] = 0;
    swift_endAccess();
    v47 = sub_1BA7E1F18((uint64_t)&unk_1E726A088, 0, 0, v38, 0, 0, 0, 0);
    if (v43)
    {
      swift_release();
      swift_release();
      sub_1BA4A2E80(v37, (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
    }
    else
    {
      v48 = v47;
      swift_release();
      v49 = type metadata accessor for A12_V14.Bound();
      v42[3] = v49;
      v42[4] = sub_1BA4A2870(qword_1EF2C85D8, (uint64_t (*)(uint64_t))type metadata accessor for A12_V14.Bound, (uint64_t)&unk_1BB92FFA0);
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v42);
      *boxed_opaque_existential_0 = v28;
      sub_1BA4CECCC(&v70, (uint64_t)(boxed_opaque_existential_0 + 1));
      result = sub_1BA5193C4(v37, (uint64_t)boxed_opaque_existential_0 + *(int *)(v49 + 24), (uint64_t (*)(_QWORD))type metadata accessor for GroupLayoutContext);
      *(uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v49 + 28)) = v48;
    }
  }
  return result;
}

double sub_1BB5DA168@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  double v19[3];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v2 = v1;
  v4 = sub_1BB86DA38();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for A12_V14.Bound() + 28));
  v23 = v2;
  swift_bridgeObjectRetain();
  v9 = sub_1BA8A1BE4((void (*)(uint64_t))sub_1BB5DBBF8, (uint64_t)v22, v8, (uint64_t)v29);
  swift_bridgeObjectRelease();
  v10 = *MEMORY[0x1E0DB5D88];
  v11 = sub_1BB86D678();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v7, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DB6200], v4);
  v21 = v9;
  sub_1BB5DBD04(0, &qword_1EF2C8680, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB6308]);
  swift_allocObject();
  v20 = sub_1BB86DB34();
  v12 = sub_1BB86DB40();
  *(_OWORD *)v19 = v25;
  v13 = v26;
  v14 = v27;
  v24 = v28;
  *(_QWORD *)&v25 = v9;
  MEMORY[0x1E0C80A78](v12);
  sub_1BA4B07F0(0, &qword_1ED3B94B8, type metadata accessor for HeadlineViewLayout.Context, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  sub_1BA6B5AA8();
  sub_1BA6B50E4(&qword_1ED3B94A8, &qword_1ED3B94A0);
  swift_bridgeObjectRetain();
  v15 = sub_1BB86ED58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25 = v15;
  sub_1BA4C576C(0, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B50E4((unint64_t *)&qword_1ED3B9360, (unint64_t *)&qword_1ED3B9350);
  sub_1BA6B39A0();
  v16 = sub_1BB872BBC();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)a1 = 0;
  result = v19[0];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v19;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  v18 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v18;
  return result;
}

uint64_t sub_1BB5DA48C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t inited;
  _BYTE v18[104];
  __int128 v19[2];
  __int128 v20[2];
  uint64_t v21[5];
  char v22;

  v6 = type metadata accessor for FeedHeadline(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *a2;
  sub_1BA4C2DD8(a1, (uint64_t)v8, v10);
  v11 = (char *)a2 + *(int *)(type metadata accessor for A12_V14.Bound() + 24);
  v12 = type metadata accessor for GroupLayoutContext();
  v13 = *(_QWORD *)(*(_QWORD *)&v11[*(int *)(v12 + 40)] + 16);
  v14 = *(double *)&v11[*(int *)(v12 + 32)];
  sub_1BA4C010C(v13 + 16, (uint64_t)v20);
  sub_1BA4C010C(v13 + 56, (uint64_t)v19);
  v15 = v14 * *(double *)(v13 + 96);
  type metadata accessor for FeedLayoutStylerFactory();
  inited = swift_initStackObject();
  sub_1BA4CECCC(v20, inited + 16);
  sub_1BA4CECCC(v19, inited + 56);
  *(double *)(inited + 96) = v15;
  v22 = 2;
  swift_retain();
  FeedLayoutStylerFactory.styler(withHeading:)(&v22, v21);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(inited + 16);
  __swift_destroy_boxed_opaque_existential_1(inited + 56);
  return HeadlineViewLayout.Context.init(key:model:styler:)(v9, (uint64_t)v8, (uint64_t)v21, a3);
}

uint64_t sub_1BB5DA5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)&v12[-v7];
  v14 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 12;
  *v8 = v9;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DB63F8], v5);
  v13 = a2;
  v10 = MEMORY[0x1E0DB5DD0];
  sub_1BB5DBD04(0, &qword_1EF2C86A0, (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5DD0]);
  sub_1BB5DBCC4(&qword_1EF2C86A8, &qword_1EF2C86A0, (uint64_t (*)(uint64_t, _QWORD *))v10, MEMORY[0x1E0DB5DD8]);
  sub_1BB86D4BC();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BB5DA750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (uint64_t *)((char *)&v20 - v6);
  v23 = a1;
  v8 = sub_1BB86D438();
  v9 = swift_allocBox();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, *MEMORY[0x1E0DB5A38], v8);
  *v7 = v9;
  v11 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104);
  v11(v7, *MEMORY[0x1E0DB6318], v4);
  v12 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5DBD04(0, &qword_1EF2C86B0, MEMORY[0x1E0DB5A10]);
  sub_1BB5DBCC4(&qword_1EF2C86B8, &qword_1EF2C86B0, v12, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4EC();
  v13 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  v13(v7, v4);
  v23 = a1;
  v11(v7, *MEMORY[0x1E0DB6410], v4);
  sub_1BB5DBD80();
  sub_1BA4CDF6C(0, &qword_1EF2C86C8, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1BB87CE70;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v16 + 104))(v18 + v17, *MEMORY[0x1E0DB5C80], v15);
  v22 = v21;
  sub_1BB86D498();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v7, v4);
}

uint64_t sub_1BB5DA9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, _QWORD *);
  void (*v13)(uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v18 - v7);
  v23 = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 4;
  *v8 = v9;
  v10 = *MEMORY[0x1E0DB63F8];
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, v10, v5);
  v22 = a2;
  v12 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5DBD04(0, &qword_1EF2C86B0, MEMORY[0x1E0DB5A10]);
  sub_1BB5DBCC4(&qword_1EF2C86B8, &qword_1EF2C86B0, v12, MEMORY[0x1E0DB5A18]);
  sub_1BB86D4BC();
  v13 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v13(v8, v5);
  v23 = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 4;
  *v8 = v14;
  v11(v8, v10, v5);
  v15 = v19;
  v21 = v19;
  sub_1BB86D4BC();
  v13(v8, v5);
  v23 = a1;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 4;
  *v8 = v16;
  v11(v8, v10, v5);
  v20 = v15;
  sub_1BB86D4BC();
  return ((uint64_t (*)(uint64_t *, uint64_t))v13)(v8, v5);
}

uint64_t sub_1BB5DAC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, _QWORD *);
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v35 - v19;
  v43 = a1;
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DB63C0], v17);
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  v35[1] = KeyPath;
  v36 = v18;
  v37 = v17;
  sub_1BA4C2DD8(a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v22 = (char *)v11 + v9[5];
  v23 = *MEMORY[0x1E0DB61C8];
  v24 = sub_1BB86DA20();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  v26 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 2;
  *(_QWORD *)((char *)v11 + v9[6]) = 5;
  v27 = *v26;
  *(_QWORD *)((char *)v11 + v9[7]) = v27;
  v28 = qword_1ED3BC390;
  v29 = v27;
  if (v28 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v30 = swift_release();
  v31 = MEMORY[0x1E0C80A78](v30);
  v35[-4] = v15;
  v35[-3] = v11;
  v34 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v31);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v32 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5DBD04(0, &qword_1EF2C86B0, MEMORY[0x1E0DB5A10]);
  sub_1BB5DBCC4(&qword_1EF2C86B8, &qword_1EF2C86B0, v32, MEMORY[0x1E0DB5A18]);
  v34 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v37);
}

uint64_t sub_1BB5DB014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, _QWORD *);
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v35 - v19;
  v43 = a1;
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DB63C0], v17);
  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v35[1] = KeyPath;
  v36 = v18;
  v37 = v17;
  sub_1BA4C2DD8(a2+ *(_QWORD *)(v13 + 72)+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v22 = (char *)v11 + v9[5];
  v23 = *MEMORY[0x1E0DB61C8];
  v24 = sub_1BB86DA20();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  v26 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 2;
  *(_QWORD *)((char *)v11 + v9[6]) = 5;
  v27 = *v26;
  *(_QWORD *)((char *)v11 + v9[7]) = v27;
  v28 = qword_1ED3BC390;
  v29 = v27;
  if (v28 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v30 = swift_release();
  v31 = MEMORY[0x1E0C80A78](v30);
  v35[-4] = v15;
  v35[-3] = v11;
  v34 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v31);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v32 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5DBD04(0, &qword_1EF2C86B0, MEMORY[0x1E0DB5A10]);
  sub_1BB5DBCC4(&qword_1EF2C86B8, &qword_1EF2C86B0, v32, MEMORY[0x1E0DB5A18]);
  v34 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v37);
}

uint64_t sub_1BB5DB424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  double v31;
  uint64_t (*v32)(uint64_t, _QWORD *);
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_1BB86DA38();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BB86D93C();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HeadlineViewLayout.Options(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (_QWORD *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for HeadlineViewLayout.Context(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4CDF6C(0, &qword_1EF2C8698, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB6418]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v35 - v19;
  v43 = a1;
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DB63C0], v17);
  if (*(_QWORD *)(a2 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_5;
  }
  v35[1] = KeyPath;
  v36 = v18;
  v37 = v17;
  sub_1BA4C2DD8(a2+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ 2 * *(_QWORD *)(v13 + 72), (uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v22 = (char *)v11 + v9[5];
  v23 = *MEMORY[0x1E0DB61C8];
  v24 = sub_1BB86DA20();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  v26 = (void **)MEMORY[0x1E0DC4918];
  *v11 = 2;
  *(_QWORD *)((char *)v11 + v9[6]) = 5;
  v27 = *v26;
  *(_QWORD *)((char *)v11 + v9[7]) = v27;
  v28 = qword_1ED3BC390;
  v29 = v27;
  if (v28 != -1)
LABEL_5:
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  v30 = swift_release();
  v31 = MEMORY[0x1E0C80A78](v30);
  v35[-4] = v15;
  v35[-3] = v11;
  v34 = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v38 + 104))(v40, *MEMORY[0x1E0DB6208], v39, v31);
  sub_1BA8F1F64();
  swift_allocObject();
  sub_1BB86DB34();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v42);
  sub_1BA4A2E80((uint64_t)v11, type metadata accessor for HeadlineViewLayout.Options);
  sub_1BA4A2E80((uint64_t)v15, type metadata accessor for HeadlineViewLayout.Context);
  v32 = (uint64_t (*)(uint64_t, _QWORD *))MEMORY[0x1E0DB5A10];
  sub_1BB5DBD04(0, &qword_1EF2C86B0, MEMORY[0x1E0DB5A10]);
  sub_1BB5DBCC4(&qword_1EF2C86B8, &qword_1EF2C86B0, v32, MEMORY[0x1E0DB5A18]);
  v34 = sub_1BA595D14();
  sub_1BB86D4C8();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v37);
}

uint64_t sub_1BB5DB834@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[304];

  memcpy(v21, __src, sizeof(v21));
  sub_1BA640FB4();
  v10 = v9;
  v11 = swift_allocBox();
  v13 = v12;
  v14 = (void *)(v12 + *(int *)(v10 + 48));
  v15 = *(int *)(v10 + 64);
  sub_1BA4C2DD8(a3, v12, type metadata accessor for HeadlineViewLayout.Context);
  memcpy(v14, v21, 0x130uLL);
  v16 = a4 + *(int *)(type metadata accessor for A12_V14.Bound() + 24);
  result = type metadata accessor for GroupLayoutContext();
  v18 = *(_QWORD *)(v16 + *(int *)(result + 28));
  v19 = __OFADD__(v18, a2);
  v20 = v18 + a2;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + v15) = v20;
    *a5 = v11 | 0x4000000000000000;
  }
  return result;
}

uint64_t sub_1BB5DB914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1BB5D9BDC(a1, a2, a3);
}

uint64_t sub_1BB5DB928()
{
  return sub_1BB690A64();
}

unint64_t sub_1BB5DB938(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB5DB964();
  result = sub_1BB5DB9A8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB5DB964()
{
  unint64_t result;

  result = qword_1EF2C85C8;
  if (!qword_1EF2C85C8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FEEC, &type metadata for A12_V14);
    atomic_store(result, (unint64_t *)&qword_1EF2C85C8);
  }
  return result;
}

unint64_t sub_1BB5DB9A8()
{
  unint64_t result;

  result = qword_1EF2C85D0;
  if (!qword_1EF2C85D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FF14, &type metadata for A12_V14);
    atomic_store(result, (unint64_t *)&qword_1EF2C85D0);
  }
  return result;
}

uint64_t type metadata accessor for A12_V14.Bound()
{
  uint64_t result;

  result = qword_1EF2C8638;
  if (!qword_1EF2C8638)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB5DBA28()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5DBA34(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GroupLayoutContext();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1BB5DBAB0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BB5DBABC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GroupLayoutContext();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BB5DBB30()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupLayoutContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BB5DBBBC(uint64_t a1)
{
  uint64_t result;

  result = sub_1BA4A2870(&qword_1EF2C8678, (uint64_t (*)(uint64_t))type metadata accessor for A12_V14.Bound, (uint64_t)&unk_1BB92FF78);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5DBBF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5DA48C(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_1BB5DBC14(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DA5F8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1BB5DBC1C()
{
  unint64_t result;

  result = qword_1EF2C8688;
  if (!qword_1EF2C8688)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9300D0, &type metadata for A12_V14.Layout);
    atomic_store(result, (unint64_t *)&qword_1EF2C8688);
  }
  return result;
}

unint64_t sub_1BB5DBC60()
{
  unint64_t result;

  result = qword_1EF2C8690;
  if (!qword_1EF2C8690)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9300A0, &type metadata for A12_V14.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C8690);
  }
  return result;
}

uint64_t sub_1BB5DBCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_1BB5DB834(a3, a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1BB5DBCAC()
{
  return swift_deallocObject();
}

uint64_t sub_1BB5DBCBC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DA750(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5DBCC4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BB5DBD04(255, a2, a3);
    result = MEMORY[0x1BCCE5B24](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BB5DBD04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for A12_V14.Layout;
    v8[1] = &type metadata for A12_V14.Layout.Attributes;
    v8[2] = sub_1BB5DBC1C();
    v8[3] = sub_1BB5DBC60();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BB5DBD80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C86C0)
  {
    sub_1BA4CDF6C(255, &qword_1EF2C86C8, (uint64_t (*)(void))sub_1BB5DBC1C, (uint64_t)&type metadata for A12_V14.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DB5CC0]);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C86C0);
  }
}

uint64_t sub_1BB5DBDF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DA9A8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5DBDFC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DAC10(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5DBE04(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DB014(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BB5DBE0C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BB5DB424(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for A12_V14.Layout.Attributes()
{
  return &type metadata for A12_V14.Layout.Attributes;
}

ValueMetadata *type metadata accessor for A12_V14.Layout()
{
  return &type metadata for A12_V14.Layout;
}

unint64_t sub_1BB5DBE38()
{
  unint64_t result;

  result = qword_1EF2C86D0;
  if (!qword_1EF2C86D0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB930040, &type metadata for A12_V14.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C86D0);
  }
  return result;
}

unint64_t sub_1BB5DBE80()
{
  unint64_t result;

  result = qword_1EF2C86D8;
  if (!qword_1EF2C86D8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB930018, &type metadata for A12_V14.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C86D8);
  }
  return result;
}

unint64_t sub_1BB5DBEC8()
{
  unint64_t result;

  result = qword_1EF2C86E0;
  if (!qword_1EF2C86E0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB92FFF0, &type metadata for A12_V14.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C86E0);
  }
  return result;
}

unint64_t sub_1BB5DBF10()
{
  unint64_t result;

  result = qword_1EF2C86E8;
  if (!qword_1EF2C86E8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB930068, &type metadata for A12_V14.Layout.Attributes);
    atomic_store(result, (unint64_t *)&qword_1EF2C86E8);
  }
  return result;
}

uint64_t sub_1BB5DBF54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1BA4CDF6C(0, &qword_1EF2C86F0, (uint64_t (*)(void))sub_1BB5DC168, (uint64_t)&type metadata for A12_V14.Layout.Attributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5DC168();
  sub_1BB87468C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v10 = v18;
  type metadata accessor for CGRect(0);
  v23 = 0;
  sub_1BA4A2870((unint64_t *)&unk_1ED3B9910, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
  sub_1BB8740D4();
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  sub_1BA4C576C(0, &qword_1ED3B94A0);
  v23 = 1;
  sub_1BA4DB848(&qword_1ED3B94B0, (uint64_t (*)(void))sub_1BA82F510, MEMORY[0x1E0DEAF40]);
  sub_1BB8740D4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
  v15 = v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  v10[3] = v14;
  v10[4] = v15;
  return result;
}

unint64_t sub_1BB5DC168()
{
  unint64_t result;

  result = qword_1EF2C86F8;
  if (!qword_1EF2C86F8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9301C4, &type metadata for A12_V14.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C86F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for A12_V14.Layout.Attributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5DC1F8 + 4 * byte_1BB92FEDD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5DC22C + 4 * asc_1BB92FED8[v4]))();
}

uint64_t sub_1BB5DC22C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5DC234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5DC23CLL);
  return result;
}

uint64_t sub_1BB5DC248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5DC250);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5DC254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5DC25C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for A12_V14.Layout.Attributes.CodingKeys()
{
  return &type metadata for A12_V14.Layout.Attributes.CodingKeys;
}

unint64_t sub_1BB5DC27C()
{
  unint64_t result;

  result = qword_1EF2C8708;
  if (!qword_1EF2C8708)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93019C, &type metadata for A12_V14.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8708);
  }
  return result;
}

unint64_t sub_1BB5DC2C4()
{
  unint64_t result;

  result = qword_1EF2C8710;
  if (!qword_1EF2C8710)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93010C, &type metadata for A12_V14.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8710);
  }
  return result;
}

unint64_t sub_1BB5DC30C()
{
  unint64_t result;

  result = qword_1EF2C8718;
  if (!qword_1EF2C8718)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB930134, &type metadata for A12_V14.Layout.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8718);
  }
  return result;
}

uint64_t FormatSizeColumn.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t FormatSizeColumn.alignOrigin.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*FormatSizeColumn.alignOrigin.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static FormatSizeColumn.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;

  if ((sub_1BB872958() & 1) != 0)
  {
    v9 = type metadata accessor for FormatSizeColumn(0, a3, a4, v8);
    v10 = *(_BYTE *)(a1 + *(int *)(v9 + 36)) ^ *(_BYTE *)(a2 + *(int *)(v9 + 36)) ^ 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1BB5DC3FC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSizeColumn<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BB5DC428(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSizeColumn<A>);
  a1[2] = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSizeColumn<A>, a2);
  result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatSizeColumn<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5DC480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FormatSizeColumn.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BB5DC48C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for FormatSizeColumn(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  result = FormatSizeColumn.alignOrigin.getter(v5);
  *a4 = result & 1;
  return result;
}

uint64_t sub_1BB5DC4C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for FormatSizeColumn(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return FormatSizeColumn.alignOrigin.setter(v4, v5);
}

uint64_t sub_1BB5DC504()
{
  return 16;
}

__n128 sub_1BB5DC510(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

id PuzzleHistoryModel.historyItem.getter()
{
  id *v0;

  return *v0;
}

uint64_t PuzzleHistoryModel.puzzle.getter()
{
  return swift_unknownObjectRetain();
}

void *PuzzleHistoryServiceChange.historyModel.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *a1 = *(_QWORD *)v1;
  a1[1] = v3;
  return sub_1BB5DC53C(v2, v3, *(_BYTE *)(v1 + 16));
}

void *sub_1BB5DC53C(void *result, uint64_t a2, unsigned __int8 a3)
{
  id v3;

  if (a3 <= 2u)
  {
    v3 = result;
    return (void *)swift_unknownObjectRetain();
  }
  return result;
}

uint64_t PuzzleHistoryServiceChange.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  id v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
    {
      v3 = v2;
      swift_unknownObjectRetain();
      sub_1BB873CB4();
      swift_bridgeObjectRelease();
      v22 = 0x286465676E616863;
      v4 = objc_msgSend(v3, sel_puzzleID);
      sub_1BB8729A0();

      sub_1BB872AFC(v5);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v6);
      objc_msgSend(v3, sel_progressLevel);
      sub_1BB87420C();
      sub_1BB872AFC(v7);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v8);
      v9 = v2;
      v10 = v1;
      v11 = 1;
    }
    else
    {
      v22 = 0x286465766F6D6572;
      sub_1BB5DC53C(v2, v1, 2u);
      v18 = objc_msgSend(v2, sel_puzzleID);
      sub_1BB8729A0();

      sub_1BB872AFC(v19);
      swift_bridgeObjectRelease();
      sub_1BB872AFC(v20);
      v9 = v2;
      v10 = v1;
      v11 = 2;
    }
  }
  else
  {
    v12 = v2;
    swift_unknownObjectRetain();
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    v22 = 0x286465646461;
    v13 = objc_msgSend(v12, sel_puzzleID);
    sub_1BB8729A0();

    sub_1BB872AFC(v14);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v15);
    objc_msgSend(v12, sel_progressLevel);
    sub_1BB87420C();
    sub_1BB872AFC(v16);
    swift_bridgeObjectRelease();
    sub_1BB872AFC(v17);
    v9 = v2;
    v10 = v1;
    v11 = 0;
  }
  sub_1BA9D00C4(v9, v10, v11);
  return v22;
}

_QWORD *initializeBufferWithCopyOfBuffer for PuzzleHistoryModel(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for PuzzleHistoryModel(id *a1)
{

  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for PuzzleHistoryModel(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

id *assignWithTake for PuzzleHistoryModel(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PuzzleHistoryModel()
{
  return &type metadata for PuzzleHistoryModel;
}

void *destroy for PuzzleHistoryServiceChange(uint64_t a1)
{
  return sub_1BA9D00C4(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8NewsFeed26PuzzleHistoryServiceChangeOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BB5DC53C(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PuzzleHistoryServiceChange(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BB5DC53C(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BA9D00C4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PuzzleHistoryServiceChange(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BA9D00C4(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PuzzleHistoryServiceChange()
{
  return &type metadata for PuzzleHistoryServiceChange;
}

uint64_t dispatch thunk of PuzzleHistoryObserver.historyService(_:observedChanges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.hasPuzzleBeenPlayed(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.hasPuzzleBeenCompleted(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.hasPuzzleEverBeenCompleted(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.puzzleHasFirstCompletedDate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.puzzleUsedReveal(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PuzzlePlayStateProvider.puzzleHistoryItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.syncHistory()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BA9822B8;
  return v7(a1, a2);
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.playStarted(for:puzzleTypeID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.updateProgress(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.removeHistory(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.setPuzzleStreakEligible(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.sortedPuzzleIDs(for:fromDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.allSortedPuzzleIDs(fromDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.isPuzzleHistoryEmpty()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.removeObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of PuzzleHistoryServiceType.updateStatsInfo(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_1BB5DCBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - v5;
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v8 = (void *)sub_1BB872970();
  v9 = objc_msgSend(v7, sel_puzzleHistoryItemForPuzzleID_, v8);

  if (!v9)
  {
    v12 = sub_1BB86C8B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
LABEL_7:
    v13 = 0;
    goto LABEL_8;
  }
  v10 = objc_msgSend(v9, sel_firstCompletedDate);

  if (v10)
  {
    sub_1BB86C874();

    v11 = sub_1BB86C8B0();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 0, 1, v11);
  }
  else
  {
    v11 = sub_1BB86C8B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
  }
  sub_1BA50236C((uint64_t)v3, (uint64_t)v6);
  sub_1BB86C8B0();
  v13 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    goto LABEL_7;
LABEL_8:
  sub_1BA76D750((uint64_t)v6);
  return v13;
}

void sub_1BB5DCD9C(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v5 = sub_1BB86C8B0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - v11;
  v13 = *a1;
  v38 = a1[1];
  v39 = v13;
  LODWORD(v13) = *((unsigned __int8 *)a1 + 16);
  v14 = a1[3];
  v15 = a1[4];
  v33 = a1[5];
  v34 = v14;
  v16 = *((_BYTE *)a1 + 48);
  v17 = a1[8];
  v31 = a1[7];
  v36 = *((unsigned __int8 *)a1 + 72);
  v37 = v13;
  v35 = *(id *)(v2 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v18 = objc_msgSend(a2, sel_identifier, v10, v31);
  if (!v18)
  {
    sub_1BB8729A0();
    v18 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  v19 = objc_msgSend(objc_msgSend(a2, sel_puzzleType), sel_identifier);
  swift_unknownObjectRelease();
  if (!v19)
  {
    sub_1BB8729A0();
    v19 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  if (v15 >> 60 == 15)
  {
    v34 = 0;
    if ((v16 & 1) == 0)
      goto LABEL_7;
LABEL_10:
    v33 = 0;
    if (v17)
      goto LABEL_8;
    goto LABEL_11;
  }
  v34 = sub_1BB86C6DC();
  if ((v16 & 1) != 0)
    goto LABEL_10;
LABEL_7:
  v33 = sub_1BB8730B4();
  if (v17)
  {
LABEL_8:
    v20 = (void *)sub_1BB872970();
    goto LABEL_12;
  }
LABEL_11:
  v20 = 0;
LABEL_12:
  v21 = objc_msgSend(a2, sel_difficulty);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, v21);
  v23 = objc_msgSend(a2, sel_publishDate);
  if (v23)
  {
    v24 = v32;
    sub_1BB86C874();

    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v24, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
    {
      v23 = 0;
    }
    else
    {
      v23 = (id)sub_1BB86C808();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
  }
  v25 = objc_msgSend(a2, sel_behaviorFlags);
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, v25);
  LOBYTE(v30) = v37;
  LOBYTE(v29) = v36;
  v27 = (void *)v34;
  v28 = (void *)v33;
  objc_msgSend(v35, sel_updatePuzzle_puzzleTypeID_progressData_progressLevel_score_rankID_usedReveal_playDuration_isSolved_difficulty_publishDate_behaviorFlags_, v18, v19, v34, v39, v33, v20, v29, v38, v30, v22, v23, v26);

}

void sub_1BB5DD120(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;

  v3 = sub_1BB86C8B0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - v10;
  v21 = *(id *)(v1 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v12 = objc_msgSend(a1, sel_identifier, v9);
  if (!v12)
  {
    sub_1BB8729A0();
    v12 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  v13 = objc_msgSend(a1, sel_difficulty);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, v13);
  v15 = objc_msgSend(a1, sel_publishDate);
  if (v15)
  {
    v16 = v15;
    sub_1BB86C874();

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v6, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v11, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = (void *)sub_1BB86C808();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v11, 1, 1, v3);
    v17 = 0;
  }
  v18 = objc_msgSend(a1, sel_behaviorFlags);
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, v18);
  objc_msgSend(v21, sel_updatePuzzle_difficulty_publishDate_behaviorFlags_, v12, v14, v17, v19);

}

uint64_t sub_1BB5DD370(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  _QWORD v31[2];

  v2 = sub_1BB86CAD8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4A3FB4(0, (unint64_t *)&qword_1ED3B0540, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v31 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v31 - v13;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v31 - v17;
  v19 = objc_msgSend(a1, sel_publishDate, v16);
  if (v19)
  {
    v20 = v19;
    sub_1BB86C874();

    v21 = sub_1BB86C8B0();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 0, 1, v21);
  }
  else
  {
    v21 = sub_1BB86C8B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
  }
  sub_1BA50236C((uint64_t)v11, (uint64_t)v14);
  sub_1BB86C8B0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v14, 1, v21) == 1)
  {
    sub_1BA76D750((uint64_t)v14);
    v24 = 1;
  }
  else
  {
    sub_1BB86CA90();
    sub_1BB86C778();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
    v24 = 0;
  }
  v25 = v31[1];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v18, v24, 1, v21);
  v26 = *(void **)(v25 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  sub_1BA76D70C((uint64_t)v18, (uint64_t)v8);
  if (v23(v8, 1, v21) == 1)
  {
    v27 = 0;
  }
  else
  {
    v27 = (void *)sub_1BB86C808();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  }
  v28 = objc_msgSend(a1, sel_identifier);
  if (!v28)
  {
    sub_1BB8729A0();
    v28 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  v29 = objc_msgSend(objc_msgSend(a1, sel_puzzleType), sel_identifier);
  swift_unknownObjectRelease();
  if (!v29)
  {
    sub_1BB8729A0();
    v29 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v26, sel_setFirstCompletedDate_forPuzzleID_puzzleTypeID_, v27, v28, v29);

  return sub_1BA76D750((uint64_t)v18);
}

uint64_t sub_1BB5DD6A4(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = v1;
  v4 = sub_1BB8726B8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BA49A224(0, (unint64_t *)&qword_1ED3B9850);
  *v7 = sub_1BB87345C();
  (*(void (**)(uint64_t *, _QWORD, unint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v8 = sub_1BB8726D0();
  (*(void (**)(uint64_t *, unint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_1BB873F30();
    if (v9)
      goto LABEL_4;
    goto LABEL_20;
  }
  v2 = (unint64_t *)((char *)v2 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistoryObservers);
  swift_beginAccess();
  v4 = *v2;
  v18 = MEMORY[0x1E0DEE9D8];
  if (v4 >> 62)
    goto LABEL_19;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
LABEL_4:
    v17 = v2;
    v10 = 0;
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x1BCCE4630](v10, v4);
        v2 = (unint64_t *)(v10 + 1);
        if (__OFADD__(v10, 1))
        {
LABEL_15:
          __break(1u);
LABEL_16:
          v2 = v17;
          v14 = v18;
          goto LABEL_21;
        }
      }
      else
      {
        if (v10 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_18;
        }
        v11 = *(_QWORD *)(v4 + 8 * v10 + 32);
        swift_retain();
        v2 = (unint64_t *)(v10 + 1);
        if (__OFADD__(v10, 1))
          goto LABEL_15;
      }
      v12 = MEMORY[0x1BCCE5D40](v11 + 16);
      if (v12 && (v13 = v12, swift_unknownObjectRelease(), v13 == a1))
      {
        swift_release();
      }
      else
      {
        sub_1BB873DB0();
        sub_1BB873DE0();
        sub_1BB873DEC();
        sub_1BB873DBC();
      }
      ++v10;
      if (v2 == (unint64_t *)v9)
        goto LABEL_16;
    }
  }
LABEL_20:
  v14 = MEMORY[0x1E0DEE9D8];
LABEL_21:
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *v2 = v14;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5DD8EC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch();
}

uint64_t sub_1BB5DD908()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  type metadata accessor for FCFetchResult(0);
  *v3 = v0;
  v3[1] = sub_1BB5DD9BC;
  return sub_1BB874518();
}

uint64_t sub_1BB5DD9BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BB5DDA28()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1BB5DDA5C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (void *)sub_1BB872970();
  v3 = (id)sub_1BB872970();
  objc_msgSend(v1, sel_addPuzzleToPuzzleHistory_puzzleTypeID_, v2, v3);

}

void sub_1BB5DDAD4(uint64_t *a1, void *a2)
{
  sub_1BB5DCD9C(a1, a2);
}

void sub_1BB5DDAF4()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (id)sub_1BB872970();
  objc_msgSend(v1, sel_removePuzzleFromPuzzleHistory_, v2);

}

uint64_t sub_1BB5DDB44(void *a1)
{
  return sub_1BB5DD370(a1);
}

uint64_t sub_1BB5DDB64()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (void *)sub_1BB86C808();
  v3 = objc_msgSend(v1, sel_allSortedPuzzleIDsSinceLastPlayedDate_, v2);

  v4 = sub_1BB872DB4();
  return v4;
}

uint64_t sub_1BB5DDBD8(uint64_t a1)
{
  return sub_1BB5DD6A4(a1);
}

void sub_1BB5DDBF8(void *a1)
{
  sub_1BB5DD120(a1);
}

BOOL sub_1BB5DDC18()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (void *)sub_1BB872970();
  v3 = objc_msgSend(v1, sel_puzzleHistoryItemForPuzzleID_, v2);

  if (v3)
  return v3 != 0;
}

id sub_1BB5DDC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5DDC94(a1, a2, a3, a4, (SEL *)&selRef_hasPuzzleBeenCompleted_);
}

id sub_1BB5DDC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BB5DDC94(a1, a2, a3, a4, (SEL *)&selRef_hasPuzzleEverBeenCompleted_);
}

id sub_1BB5DDC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  _QWORD *v5;
  void *v7;
  void *v8;
  id v9;

  v7 = *(void **)(*v5 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v8 = (void *)sub_1BB872970();
  v9 = objc_msgSend(v7, *a5, v8);

  return v9;
}

uint64_t sub_1BB5DDCEC()
{
  return sub_1BB5DCBD8() & 1;
}

id sub_1BB5DDD10()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (void *)sub_1BB872970();
  v3 = objc_msgSend(v1, sel_puzzleHistoryItemForPuzzleID_, v2);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_usedReveal);

    if (v4)
    {
      v3 = objc_msgSend(v4, sel_BOOLValue);

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

id sub_1BB5DDDB0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  v2 = (void *)sub_1BB872970();
  v3 = objc_msgSend(v1, sel_puzzleHistoryItemForPuzzleID_, v2);

  return v3;
}

void sub_1BB5DDE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  sub_1BB5DF42C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](v4);
  v9 = *(void **)(a2 + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_1BB5DF4F8;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BB5DDFA4;
  aBlock[3] = &block_descriptor_87;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_syncWithCompletion_, v12);
  _Block_release(v12);
}

uint64_t sub_1BB5DDF40(int a1, id a2)
{
  id v2;

  if (a2)
  {
    v2 = a2;
    sub_1BB5DF42C();
    return sub_1BB872F34();
  }
  else
  {
    sub_1BB5DF42C();
    return sub_1BB872F40();
  }
}

void sub_1BB5DDFA4(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_1BB5DE004(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  v48 = a3;
  if (v6)
  {
    v49 = MEMORY[0x1E0DEE9D8];
    result = sub_1BA7447E8(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      goto LABEL_41;
    }
    v9 = 0;
    v7 = v49;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1BCCE4630](v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, sel_puzzleID, v48);
      v13 = sub_1BB8729A0();
      v15 = v14;

      v17 = *(_QWORD *)(v49 + 16);
      v16 = *(_QWORD *)(v49 + 24);
      if (v17 >= v16 >> 1)
        sub_1BA7447E8(v16 > 1, v17 + 1, 1);
      ++v9;
      *(_QWORD *)(v49 + 16) = v17 + 1;
      v18 = v49 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v15;
    }
    while (v6 != v9);
    a3 = v48;
  }
  v19 = sub_1BA78A504(v7, MEMORY[0x1E0DEE9E8]);
  swift_bridgeObjectRelease();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = MEMORY[0x1E0DEE9D8];
  if (v20)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    result = sub_1BA7447E8(0, v20 & ~(v20 >> 63), 0);
    if ((v20 & 0x8000000000000000) == 0)
    {
      v22 = 0;
      v21 = v50;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v23 = (id)MEMORY[0x1BCCE4630](v22, a2);
        else
          v23 = *(id *)(a2 + 8 * v22 + 32);
        v24 = v23;
        v25 = objc_msgSend(v23, sel_puzzleID, v48);
        v26 = sub_1BB8729A0();
        v28 = v27;

        v30 = *(_QWORD *)(v50 + 16);
        v29 = *(_QWORD *)(v50 + 24);
        if (v30 >= v29 >> 1)
          sub_1BA7447E8(v29 > 1, v30 + 1, 1);
        ++v22;
        *(_QWORD *)(v50 + 16) = v30 + 1;
        v31 = v50 + 16 * v30;
        *(_QWORD *)(v31 + 32) = v26;
        *(_QWORD *)(v31 + 40) = v28;
      }
      while (v20 != v22);
      a3 = v48;
      goto LABEL_25;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_25:
  v32 = sub_1BA78A504(v21, v19);
  swift_bridgeObjectRelease();
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v34 = MEMORY[0x1E0DEE9D8];
  if (!v33)
  {
LABEL_36:
    v46 = sub_1BA78A504(v34, v32);
    swift_bridgeObjectRelease();
    v47 = sub_1BA67F4CC(v46);
    swift_bridgeObjectRelease();
    return (uint64_t)v47;
  }
  v51 = MEMORY[0x1E0DEE9D8];
  result = sub_1BA7447E8(0, v33 & ~(v33 >> 63), 0);
  if ((v33 & 0x8000000000000000) == 0)
  {
    v35 = 0;
    v34 = v51;
    v36 = a3 & 0xC000000000000001;
    do
    {
      if (v36)
        v37 = (id)MEMORY[0x1BCCE4630](v35, a3);
      else
        v37 = *(id *)(a3 + 8 * v35 + 32);
      v38 = v37;
      v39 = objc_msgSend(v37, sel_puzzleID, v48);
      v40 = sub_1BB8729A0();
      v42 = v41;

      v44 = *(_QWORD *)(v51 + 16);
      v43 = *(_QWORD *)(v51 + 24);
      if (v44 >= v43 >> 1)
        sub_1BA7447E8(v43 > 1, v44 + 1, 1);
      ++v35;
      *(_QWORD *)(v51 + 16) = v44 + 1;
      v45 = v51 + 16 * v44;
      *(_QWORD *)(v45 + 32) = v40;
      *(_QWORD *)(v45 + 40) = v42;
      a3 = v48;
    }
    while (v33 != v35);
    goto LABEL_36;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BB5DE400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  sub_1BB872F7C();
  v8[17] = sub_1BB872F70();
  v8[18] = sub_1BB872F28();
  v8[19] = v9;
  return swift_task_switch();
}

uint64_t sub_1BB5DE474()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)(v0[12] + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleService);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 48) + *(_QWORD *)(v3 + 48));
  v4 = (_QWORD *)swift_task_alloc();
  v0[20] = v4;
  *v4 = v0;
  v4[1] = sub_1BB5DE500;
  return v6(v0[13], v2, v3);
}

uint64_t sub_1BB5DE500(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BB5DE568()
{
  _QWORD *v0;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t ObjectType;
  void (*v54)(uint64_t, _QWORD *, uint64_t, uint64_t);
  id v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *i;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;

  isUniquelyReferenced_nonNull_native = v0[21];
  swift_release();
  v2 = v0[21];
  if (isUniquelyReferenced_nonNull_native >> 62)
    goto LABEL_27;
  v3 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (i = v0; v3; i = v0)
  {
    v4 = 0;
    v64 = v2 + 32;
    v66 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    v5 = MEMORY[0x1E0DEE9E0];
    while (v66)
    {
      v6 = (_QWORD *)MEMORY[0x1BCCE4630](v4, i[21]);
      v7 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_24;
LABEL_11:
      v69 = v7;
      v8 = v3;
      swift_bridgeObjectRetain();
      v0 = v6;
      v9 = objc_msgSend(v6, sel_identifier);
      v10 = sub_1BB8729A0();
      v12 = v11;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v71 = (_QWORD *)v5;
      v14 = sub_1BA6E35A8(v10, v12);
      v15 = *(_QWORD *)(v5 + 16);
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_25;
      v18 = v13;
      if (*(_QWORD *)(v5 + 24) >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v19 = (_QWORD *)v5;
          if ((v13 & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          sub_1BB4C1D00();
          v19 = v71;
          if ((v18 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        sub_1BB4ADCC4(v17, isUniquelyReferenced_nonNull_native);
        v19 = v71;
        v20 = sub_1BA6E35A8(v10, v12);
        if ((v18 & 1) != (v21 & 1))
          return sub_1BB874560();
        v14 = v20;
        if ((v18 & 1) != 0)
        {
LABEL_4:
          isUniquelyReferenced_nonNull_native = v19[7];
          swift_unknownObjectRelease();
          *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v14) = v0;
          goto LABEL_5;
        }
      }
      v19[(v14 >> 6) + 8] |= 1 << v14;
      v22 = (uint64_t *)(v19[6] + 16 * v14);
      *v22 = v10;
      v22[1] = v12;
      *(_QWORD *)(v19[7] + 8 * v14) = v0;
      v23 = v19[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_26;
      v19[2] = v25;
      swift_bridgeObjectRetain();
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v4;
      v5 = (uint64_t)v19;
      v3 = v8;
      if (v69 == v8)
      {
        v0 = i;
        goto LABEL_29;
      }
    }
    v6 = *(_QWORD **)(v64 + 8 * v4);
    swift_unknownObjectRetain();
    v7 = v4 + 1;
    if (!__OFADD__(v4, 1))
      goto LABEL_11;
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain_n();
    v3 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    v2 = v0[21];
  }
  v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_29:
  v27 = v0[15];
  v28 = v0[16];
  v29 = v0[14];
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v30 = sub_1BB5DF080(v29, (uint64_t)v19, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31 = sub_1BB5DF080(v27, (uint64_t)v19, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32 = sub_1BB5DF080(v28, (uint64_t)v19, 2);
  swift_bridgeObjectRelease_n();
  v71 = v30;
  sub_1BB38765C((uint64_t)v31);
  sub_1BB38765C((uint64_t)v32);
  v33 = v30;
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v34 = sub_1BB86EFEC();
  __swift_project_value_buffer(v34, (uint64_t)qword_1ED476918);
  swift_bridgeObjectRetain_n();
  v35 = sub_1BB86EFC8();
  v36 = sub_1BB87330C();
  v70 = v33;
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v71 = (_QWORD *)v38;
    *(_DWORD *)v37 = 136315138;
    v39 = swift_bridgeObjectRetain();
    v40 = MEMORY[0x1BCCE36DC](v39, &type metadata for PuzzleHistoryServiceChange);
    v42 = v41;
    swift_bridgeObjectRelease();
    i[11] = sub_1BA5D2E14(v40, v42, (uint64_t *)&v71);
    sub_1BB873A8C();
    v0 = i;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BA493000, v35, v36, "puzzleHistory: Received changes %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v38, -1, -1);
    MEMORY[0x1BCCE5C38](v37, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v43 = (uint64_t *)(v0[12] + OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistoryObservers);
  swift_beginAccess();
  v44 = *v43;
  v45 = (void *)v0[12];
  v65 = v43;
  if ((unint64_t)*v43 >> 62)
  {
    v56 = v45;
    swift_bridgeObjectRetain();
    result = sub_1BB873F30();
    v46 = result;
    if (!result)
      goto LABEL_47;
  }
  else
  {
    v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    v47 = v45;
    result = swift_bridgeObjectRetain();
    if (!v46)
      goto LABEL_47;
  }
  if (v46 < 1)
  {
    __break(1u);
    goto LABEL_63;
  }
  v48 = 0;
  v67 = (uint64_t)(i + 2);
  do
  {
    if ((v44 & 0xC000000000000001) != 0)
    {
      v49 = MEMORY[0x1BCCE4630](v48, v44);
    }
    else
    {
      v49 = *(_QWORD *)(v44 + 8 * v48 + 32);
      swift_retain();
    }
    v50 = MEMORY[0x1BCCE5D40](v49 + 32);
    swift_unknownObjectRelease();
    if (v50 && MEMORY[0x1BCCE5D40](v49 + 16))
    {
      v51 = (void *)i[12];
      v52 = *(_QWORD *)(v49 + 24);
      ObjectType = swift_getObjectType();
      i[5] = type metadata accessor for PuzzleHistoryService();
      i[6] = &off_1E73255A8;
      i[2] = v51;
      v54 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v52 + 8);
      v55 = v51;
      v54(v67, v70, ObjectType, v52);
      __swift_destroy_boxed_opaque_existential_1(v67);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
    ++v48;
  }
  while (v46 != v48);
LABEL_47:
  swift_bridgeObjectRelease();
  v57 = *v65;
  v71 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!(v57 >> 62))
  {
    v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v58)
      goto LABEL_49;
LABEL_60:
    swift_bridgeObjectRelease();
    v62 = MEMORY[0x1E0DEE9D8];
LABEL_61:
    v63 = (void *)i[12];
    *v65 = v62;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return ((uint64_t (*)(void))i[1])();
  }
  swift_bridgeObjectRetain();
  result = sub_1BB873F30();
  v58 = result;
  if (!result)
    goto LABEL_60;
LABEL_49:
  if (v58 >= 1)
  {
    for (j = 0; j != v58; ++j)
    {
      if ((v57 & 0xC000000000000001) != 0)
      {
        v60 = MEMORY[0x1BCCE4630](j, v57);
      }
      else
      {
        v60 = *(_QWORD *)(v57 + 8 * j + 32);
        swift_retain();
      }
      v61 = MEMORY[0x1BCCE5D40](v60 + 32);
      swift_unknownObjectRelease();
      if (v61)
      {
        sub_1BB873DB0();
        sub_1BB873DE0();
        sub_1BB873DEC();
        sub_1BB873DBC();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v62 = (uint64_t)v71;
    goto LABEL_61;
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_1BB5DED0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  swift_release();
  if (qword_1ED3C0B50 != -1)
    swift_once();
  v1 = *(void **)(v0 + 176);
  v2 = sub_1BB86EFEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED476918);
  v3 = v1;
  v4 = v1;
  v5 = sub_1BB86EFC8();
  v6 = sub_1BB8732F4();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 176);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v12;
    sub_1BB873A8C();
    *v10 = v12;

    _os_log_impl(&dword_1BA493000, v5, v6, "PuzzleHistoryObserver fetching puzzle error=%@", v9, 0xCu);
    sub_1BA92CD5C();
    swift_arrayDestroy();
    MEMORY[0x1BCCE5C38](v10, -1, -1);
    MEMORY[0x1BCCE5C38](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BB5DF054()
{
  uint64_t v0;

  sub_1BA8FD860(v0 + 16);
  sub_1BA8FD860(v0 + 32);
  return swift_deallocClassInstance();
}

_QWORD *sub_1BB5DF080(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v23;

  if (a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1BB873F30())
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v6 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCE4630](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v10 = v5;
      v11 = objc_msgSend(v7, sel_puzzleID);
      v12 = sub_1BB8729A0();
      v14 = v13;

      if (*(_QWORD *)(a2 + 16) && (v15 = sub_1BA6E35A8(v12, v14), (v16 & 1) != 0))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v15);
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_1BB393C64(0, v23[2] + 1, 1, v23);
        v19 = v23[2];
        v18 = v23[3];
        if (v19 >= v18 >> 1)
          v23 = sub_1BB393C64((_QWORD *)(v18 > 1), v19 + 1, 1, v23);
        v23[2] = v19 + 1;
        v20 = &v23[3 * v19];
        v20[4] = v8;
        v20[5] = v17;
        *((_BYTE *)v20 + 48) = a3;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v6;
      v5 = v10;
      if (v9 == v10)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v23;
}

char *sub_1BB5DF274(void *a1, uint64_t a2, void *a3)
{
  char *v3;
  objc_class *ObjectType;
  id v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistoryObservers] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory] = a1;
  sub_1BA4C010C(a2, (uint64_t)&v3[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleService]);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_configurationManager] = a3;
  v14.receiver = v3;
  v14.super_class = ObjectType;
  v8 = a1;
  swift_unknownObjectRetain();
  v9 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v10 = *(void **)&v9[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_puzzleHistory];
  v11 = v9;
  objc_msgSend(v10, sel_addObserver_, v11, v14.receiver, v14.super_class);
  objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC8NewsFeed20PuzzleHistoryService_configurationManager], sel_addAppConfigObserver_, v11);
  v12 = objc_msgSend(objc_msgSend(a3, sel_possiblyUnfetchedAppConfiguration), sel_puzzlesConfig);
  swift_unknownObjectRelease();
  objc_msgSend(v8, sel_setAllowLowerProgressOnCompletedPuzzles_, objc_msgSend(v12, sel_allowLowerProgressOnCompletedPuzzles));

  __swift_destroy_boxed_opaque_existential_1(a2);
  return v11;
}

unint64_t sub_1BB5DF3DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3CD4A0;
  if (!qword_1ED3CD4A0)
  {
    v1 = type metadata accessor for DisposablePuzzleHistoryObserver();
    result = MEMORY[0x1BCCE5B24](&unk_1BB930470, v1);
    atomic_store(result, (unint64_t *)&qword_1ED3CD4A0);
  }
  return result;
}

void sub_1BB5DF424(uint64_t a1)
{
  uint64_t v1;

  sub_1BB5DDE08(a1, *(_QWORD *)(v1 + 16));
}

void sub_1BB5DF42C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3AB148)
  {
    type metadata accessor for FCFetchResult(255);
    sub_1BA8EBDF8();
    v0 = sub_1BB872F4C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3AB148);
  }
}

uint64_t sub_1BB5DF498()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BB5DF42C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BB5DF4F8(int a1, void *a2)
{
  sub_1BB5DF42C();
  return sub_1BB5DDF40(a1, a2);
}

uint64_t sub_1BB5DF544(unint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  sub_1BA4A3FB4(0, &qword_1ED3C1DE0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - v8;
  v10 = sub_1BB5DE004(a1, a2, a3);
  if (!*(_QWORD *)(v10 + 16))
    return swift_bridgeObjectRelease();
  v11 = sub_1BB872F94();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  sub_1BB872F7C();
  v12 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1BB872F70();
  v14 = (_QWORD *)swift_allocObject();
  v15 = MEMORY[0x1E0DF06E8];
  v14[2] = v13;
  v14[3] = v15;
  v14[4] = v12;
  v14[5] = v10;
  v14[6] = a1;
  v14[7] = a2;
  v14[8] = a3;
  sub_1BB1B6AEC((uint64_t)v9, (uint64_t)&unk_1EF2C8840, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1BB5DF6A0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5DF6EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1BA4B0D38;
  return sub_1BB5DE400(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t FormatPlatform.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 6578544;
  if (*v0 != 1)
    v1 = 6513005;
  if (*v0)
    return v1;
  else
    return 0x656E6F6870;
}

NewsFeed::FormatPlatform_optional __swiftcall FormatPlatform.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  NewsFeed::FormatPlatform_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BB873FE4();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_1BB5DF824(char *a1, unsigned __int8 *a2)
{
  return sub_1BB7F7E38(*a1, *a2);
}

unint64_t sub_1BB5DF834()
{
  unint64_t result;

  result = qword_1EF2C8848;
  if (!qword_1EF2C8848)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPlatform, &type metadata for FormatPlatform);
    atomic_store(result, (unint64_t *)&qword_1EF2C8848);
  }
  return result;
}

uint64_t sub_1BB5DF878()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5DF904()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5DF96C()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

NewsFeed::FormatPlatform_optional sub_1BB5DF9F4(Swift::String *a1)
{
  return FormatPlatform.init(rawValue:)(*a1);
}

void sub_1BB5DFA00(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 6578544;
  if (v2 != 1)
    v4 = 6513005;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x656E6F6870;
  if (!v5)
    v3 = 0xE300000000000000;
  *a1 = v6;
  a1[1] = v3;
}

unint64_t sub_1BB5DFA4C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1BB5DFA78();
  result = sub_1BB5DFABC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BB5DFA78()
{
  unint64_t result;

  result = qword_1EF2C8850;
  if (!qword_1EF2C8850)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPlatform, &type metadata for FormatPlatform);
    atomic_store(result, (unint64_t *)&qword_1EF2C8850);
  }
  return result;
}

unint64_t sub_1BB5DFABC()
{
  unint64_t result;

  result = qword_1EF2C8858;
  if (!qword_1EF2C8858)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPlatform, &type metadata for FormatPlatform);
    atomic_store(result, (unint64_t *)&qword_1EF2C8858);
  }
  return result;
}

unint64_t sub_1BB5DFB00(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5DFB24();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5DFB24()
{
  unint64_t result;

  result = qword_1EF2C8860;
  if (!qword_1EF2C8860)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPlatform, &type metadata for FormatPlatform);
    atomic_store(result, (unint64_t *)&qword_1EF2C8860);
  }
  return result;
}

unint64_t sub_1BB5DFB68(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAE97608();
  a1[2] = sub_1BAEF231C();
  result = sub_1BB5DF834();
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5DFB9C()
{
  sub_1BB5DFABC();
  return sub_1BB872D60();
}

uint64_t sub_1BB5DFBF8(_QWORD *a1)
{
  return FormatPlatform.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for FormatPlatform(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5DFC58 + 4 * byte_1BB9304C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5DFC8C + 4 * byte_1BB9304C0[v4]))();
}

uint64_t sub_1BB5DFC8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5DFC94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5DFC9CLL);
  return result;
}

uint64_t sub_1BB5DFCA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5DFCB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5DFCB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5DFCBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatPlatform()
{
  return &type metadata for FormatPlatform;
}

uint64_t sub_1BB5DFCD8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  double v77;
  uint64_t result;
  char v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  id v101;
  id v102;
  void *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  id v111;
  char *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  uint64_t (*v124)(uint64_t);
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  unint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  void (*v139)(uint64_t, uint64_t);
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD v144[2];
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  void (*v151)(char *, uint64_t, uint64_t);
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;

  v149 = a3;
  v163 = sub_1BB86C8B0();
  v168 = *(_QWORD *)(v163 - 8);
  MEMORY[0x1E0C80A78](v163);
  v148 = (char *)v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v150 = (char *)v144 - v9;
  MEMORY[0x1E0C80A78](v10);
  v154 = (char *)v144 - v11;
  MEMORY[0x1E0C80A78](v12);
  v153 = (char *)v144 - v13;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0540, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15);
  v152 = (uint64_t)v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v155 = (char *)v144 - v18;
  MEMORY[0x1E0C80A78](v19);
  v157 = (char *)v144 - v20;
  MEMORY[0x1E0C80A78](v21);
  v158 = (char *)v144 - v22;
  MEMORY[0x1E0C80A78](v23);
  v173 = (uint64_t)v144 - v24;
  v170 = type metadata accessor for PuzzleStatsProcessingData();
  v25 = *(_QWORD *)(v170 - 8);
  MEMORY[0x1E0C80A78](v170);
  v166 = (_QWORD *)((char *)v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *a2;
  v146 = a2[5];
  v147 = v27;
  if (v27)
  {
    v28 = a2[3];
    v30 = a2[1];
    v29 = a2[2];
    v159 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v162 = v29;
    swift_bridgeObjectRetain();
    v160 = v28;
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v27 = sub_1BA8F51C4(MEMORY[0x1E0DEE9D8]);
    v30 = sub_1BA8F51C4(v31);
    v162 = sub_1BA8F52DC((uint64_t)v31);
    v160 = sub_1BA8F53AC((uint64_t)v31);
    v159 = sub_1BA8F52DC((uint64_t)v31);
  }
  v181 = MEMORY[0x1E0DEE9D8];
  sub_1BA6BCC84();
  swift_bridgeObjectRetain();
  v161 = sub_1BB872790();
  v177 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v156 = sub_1BB872790();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(a1 + 16);
  v33 = v30;
  if (!v32)
  {
LABEL_89:
    sub_1BA5D35C0((uint64_t *)&v181, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t))sub_1BA5D3654, (uint64_t (*)(_QWORD *))sub_1BA5D367C);
    v140 = sub_1BA5D4094(v181);
    swift_bridgeObjectRelease();
    if (v147)
    {
      v141 = v146;
      swift_bridgeObjectRetain();
    }
    else
    {
      v141 = 0;
    }
    v142 = v160;
    v143 = sub_1BA5D4968(v140, v141);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a4 = v177;
    a4[1] = v33;
    a4[2] = v162;
    a4[3] = v142;
    a4[4] = v159;
    a4[5] = v143;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v144[0] = 0;
  v145 = a4;
  v165 = v167 + 2;
  v34 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  v35 = *(_QWORD *)(v25 + 72);
  v144[1] = a1;
  swift_bridgeObjectRetain();
  v36 = v170;
  v37 = v166;
  v164 = v35;
  while (1)
  {
    sub_1BA4C2DD8(v34, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
    if (*((_BYTE *)v37 + *(int *)(v36 + 28)) != 1)
      break;
    sub_1BA4A2E80((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
LABEL_7:
    v34 += v35;
    if (!--v32)
    {
      swift_bridgeObjectRelease();
      a4 = v145;
      goto LABEL_89;
    }
  }
  v174 = v33;
  v38 = v37[1];
  v176 = v37[2];
  v39 = *v37;
  sub_1BA5E01A4((uint64_t)v37 + *(int *)(v36 + 24), v173, (unint64_t *)&qword_1ED3B0540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v40 = v167;
  v41 = v167[5];
  v42 = v167[6];
  v43 = v165;
  __swift_project_boxed_opaque_existential_1(v165, v41);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 24);
  swift_bridgeObjectRetain();
  LODWORD(v169) = v44(v39, v38, v41, v42);
  v45 = v40[5];
  v46 = v40[6];
  __swift_project_boxed_opaque_existential_1(v43, v45);
  v178 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8))(v39, v38, v45, v46);
  v47 = v40[5];
  v48 = v40[6];
  __swift_project_boxed_opaque_existential_1(v43, v47);
  v175 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 48))(v39, v38, v47, v48);
  v49 = v40[5];
  v50 = v40[6];
  __swift_project_boxed_opaque_existential_1(v43, v49);
  LODWORD(v172) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 40))(v39, v38, v49, v50);
  v51 = v40[5];
  v52 = v40[6];
  __swift_project_boxed_opaque_existential_1(v43, v51);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 32);
  v171 = v39;
  v54 = v53(v39, v38, v51, v52);
  if ((v54 & 1) == 0)
  {
    v55 = v176;
    v59 = v177;
    v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v61 = (void *)v175;
    goto LABEL_34;
  }
  v55 = v176;
  v56 = v177;
  if (*(_QWORD *)(v177 + 16) && (v57 = sub_1BB4CF560(v176), (v58 & 1) != 0))
  {
    v180 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v57);
    swift_bridgeObjectRetain();
  }
  else
  {
    v180 = MEMORY[0x1E0DEE9E8];
  }
  v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v61 = (void *)v175;
  swift_bridgeObjectRetain();
  sub_1BA6EE5AC(&v179, v171, v38);
  swift_bridgeObjectRelease();
  v62 = v180;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v179 = v56;
  sub_1BB4BF01C(v62, v55, isUniquelyReferenced_nonNull_native);
  v59 = v179;
  swift_bridgeObjectRelease();
  if (!v61 || (v64 = objc_msgSend(v61, sel_firstPlayDuration)) == 0)
  {
LABEL_34:
    v177 = v59;
    if ((v178 & 1) != 0)
    {
      if (!(v54 & 1 | ((v172 & 1) == 0)))
        goto LABEL_56;
      if (!v61)
      {
        v33 = v174;
        v36 = v170;
        goto LABEL_79;
      }
      v89 = v61;
      v90 = objc_msgSend(v89, sel_bestScore);
      v151 = (void (*)(char *, uint64_t, uint64_t))v89;
      if (v90 || (v90 = objc_msgSend(v89, sel_score)) != 0)
      {
        v91 = (uint64_t)objc_msgSend(v90, sel_integerValue);

      }
      else
      {
        v91 = 0;
      }
      v92 = v159;
      if (*(_QWORD *)(v159 + 16) && (v93 = sub_1BB4CF560(v55), v92 = v159, (v94 & 1) != 0))
      {
        if (v91 <= *(_QWORD *)(*(_QWORD *)(v159 + 56) + 8 * v93))
          v91 = *(_QWORD *)(*(_QWORD *)(v159 + 56) + 8 * v93);
      }
      else
      {
        v91 &= ~(v91 >> 63);
      }
      v95 = swift_isUniquelyReferenced_nonNull_native();
      v179 = v92;
      sub_1BB4BEEF0(v91, v55, v95);
      v159 = v179;
      result = swift_bridgeObjectRelease();
      v96 = v156;
      v97 = *(_QWORD *)(v156 + 16);
      if (v97)
      {
        result = sub_1BB4CF560(v55);
        if ((v98 & 1) != 0)
          v97 = *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * result);
        else
          v97 = 0;
      }
      v99 = v97 + 1;
      if (__OFADD__(v97, 1))
        goto LABEL_94;
      v100 = swift_isUniquelyReferenced_nonNull_native();
      v179 = v96;
      sub_1BB4BEEF0(v99, v55, v100);
      v156 = v179;

      swift_bridgeObjectRelease();
    }
    if ((v54 & 1) != 0)
    {
      v33 = v174;
      v36 = v170;
      if (!v61)
        goto LABEL_78;
      goto LABEL_58;
    }
LABEL_56:
    v33 = v174;
    v36 = v170;
    if (v172 & 1 | ((v169 & 1) == 0) || !v61)
      goto LABEL_78;
LABEL_58:
    v101 = v61;
    v102 = objc_msgSend(v101, sel_firstCompletedDate);
    v172 = v101;
    if (v102)
    {
      v103 = v102;
      v104 = v154;
      sub_1BB86C874();

      v105 = v168;
      v106 = *(void (**)(char *, char *, uint64_t))(v168 + 32);
      v107 = v157;
      v108 = v163;
      v106(v157, v104, v163);
      v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56);
      v109(v107, 0, 1, v108);
      v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
      if (v110((uint64_t)v107, 1, v108) != 1)
      {
        v115 = (uint64_t)v158;
        v106(v158, v107, v108);
        v116 = v115;
        v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
        v109((char *)v116, 0, 1, v108);
        v61 = (void *)v175;
LABEL_67:
        if (v110(v116, 1, v108) == 1)
        {

          sub_1BA5C699C(v116, (unint64_t *)&qword_1ED3B0540, v60);
          v33 = v174;
          v36 = v170;
          if ((v178 & 1) != 0)
            goto LABEL_79;
          goto LABEL_86;
        }
        v169 = v38;
        v120 = v168;
        v121 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 32);
        v122 = v116;
        v123 = v153;
        v121(v153, v122, v108);
        v124 = v60;
        v125 = v152;
        sub_1BA5E01A4(v173, v152, (unint64_t *)&qword_1ED3B0540, v124);
        if (v110(v125, 1, v108) == 1)
        {
          (*(void (**)(char *, uint64_t))(v120 + 8))(v123, v108);

          sub_1BA5C699C(v125, (unint64_t *)&qword_1ED3B0540, v124);
          v33 = v174;
          v36 = v170;
          v60 = v124;
          goto LABEL_85;
        }
        v126 = (uint64_t)v150;
        v121(v150, v125, v108);
        if (!sub_1BB5E0CEC(v126, v149))
        {

          v139 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
          v139(v126, v108);
          v139((uint64_t)v123, v108);
          v33 = v174;
          v36 = v170;
          v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
LABEL_85:
          v61 = (void *)v175;
          v55 = v176;
          v38 = v169;
          if ((v178 & 1) != 0)
          {
LABEL_79:
            if (*(_QWORD *)(v33 + 16) && (v135 = sub_1BB4CF560(v55), (v136 & 1) != 0))
            {
              v180 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v135);
              swift_bridgeObjectRetain();
            }
            else
            {
              v180 = MEMORY[0x1E0DEE9E8];
            }
            sub_1BA6EE5AC(&v179, v171, v38);
            swift_bridgeObjectRelease();
            v137 = v180;
            v138 = swift_isUniquelyReferenced_nonNull_native();
            v179 = v33;
            sub_1BB4BF01C(v137, v55, v138);
            v33 = v179;
          }
LABEL_86:
          swift_bridgeObjectRelease();

          sub_1BA5C699C(v173, (unint64_t *)&qword_1ED3B0540, v60);
          v37 = v166;
          sub_1BA4A2E80((uint64_t)v166, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStatsProcessingData);
          v35 = v164;
          goto LABEL_7;
        }
        v151 = v121;
        (*(void (**)(char *, uint64_t, uint64_t))(v168 + 16))(v148, v126, v108);
        v127 = v181;
        v128 = swift_isUniquelyReferenced_nonNull_native();
        v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
        v61 = (void *)v175;
        if ((v128 & 1) == 0)
          v127 = sub_1BA5D3668(0, *(_QWORD *)(v127 + 16) + 1, 1, v127);
        v130 = *(_QWORD *)(v127 + 16);
        v129 = *(_QWORD *)(v127 + 24);
        v38 = v169;
        if (v130 >= v129 >> 1)
          v127 = sub_1BA5D3668(v129 > 1, v130 + 1, 1, v127);
        *(_QWORD *)(v127 + 16) = v130 + 1;
        v131 = v168;
        v132 = v127
             + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))
             + *(_QWORD *)(v168 + 72) * v130;
        v133 = v163;
        v151((char *)v132, (uint64_t)v148, v163);

        v181 = v127;
        v134 = *(void (**)(char *, uint64_t))(v131 + 8);
        v134(v150, v133);
        v134(v153, v133);
        v33 = v174;
        v36 = v170;
        v55 = v176;
LABEL_78:
        if ((v178 & 1) != 0)
          goto LABEL_79;
        goto LABEL_86;
      }
      v61 = (void *)v175;
      v101 = v172;
    }
    else
    {
      v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56);
      v107 = v157;
      v109(v157, 1, 1, v163);
    }
    v111 = objc_msgSend(v101, sel_completedDate);
    v112 = v155;
    if (v111)
    {
      v113 = v111;
      sub_1BB86C874();

      v114 = 0;
    }
    else
    {
      v114 = 1;
    }
    v108 = v163;
    v109(v112, v114, 1, v163);
    v117 = (uint64_t)v112;
    v118 = (uint64_t)v158;
    sub_1BA646EFC(v117, (uint64_t)v158, (unint64_t *)&qword_1ED3B0540, v60);
    v119 = (uint64_t)v107;
    v116 = v118;
    sub_1BA5C699C(v119, (unint64_t *)&qword_1ED3B0540, v60);
    v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48);
    v55 = v176;
    goto LABEL_67;
  }
  v65 = v64;
  v177 = v59;
  v66 = objc_msgSend(v64, sel_integerValue);

  v67 = v162;
  if (*(_QWORD *)(v162 + 16))
  {
    v68 = sub_1BB4CF560(v55);
    v67 = v162;
    v69 = (uint64_t)v66;
    if ((v70 & 1) != 0)
    {
      if ((uint64_t)v66 >= *(_QWORD *)(*(_QWORD *)(v162 + 56) + 8 * v68))
        v69 = *(_QWORD *)(*(_QWORD *)(v162 + 56) + 8 * v68);
      else
        v69 = (uint64_t)v66;
    }
  }
  else
  {
    v69 = (uint64_t)v66;
  }
  v71 = swift_isUniquelyReferenced_nonNull_native();
  v179 = v67;
  sub_1BB4BEEF0(v69, v55, v71);
  v162 = v179;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v161 + 16))
  {
    v72 = v161;
    v73 = sub_1BB4CF560(v55);
    v74 = v160;
    if ((v75 & 1) != 0)
      v76 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 8 * v73);
    else
      v76 = 0;
  }
  else
  {
    v76 = 0;
    v74 = v160;
  }
  v77 = (double)(uint64_t)v66;
  if (*(_QWORD *)(v74 + 16))
  {
    result = sub_1BB4CF560(v55);
    if ((v79 & 1) != 0)
    {
      v80 = v76;
      v81 = __OFADD__(v76, 1);
      v82 = v76 + 1;
      v59 = v177;
      if (v81)
        goto LABEL_95;
      v83 = v160;
      v84 = (*(double *)(*(_QWORD *)(v160 + 56) + 8 * result) * (double)v80 + v77) / (double)v82;
      v85 = swift_isUniquelyReferenced_nonNull_native();
      v179 = v83;
      sub_1BB4BEDC8(v55, v85, v84);
      v160 = v179;
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
  }
  v86 = swift_isUniquelyReferenced_nonNull_native();
  v179 = v74;
  sub_1BB4BEDC8(v55, v86, (double)(uint64_t)v66);
  v160 = v179;
  result = swift_bridgeObjectRelease();
  v81 = __OFADD__(v76, 1);
  v82 = v76 + 1;
  v59 = v177;
  if (!v81)
  {
LABEL_33:
    v87 = v161;
    v88 = swift_isUniquelyReferenced_nonNull_native();
    v179 = v87;
    sub_1BB4BEEF0(v82, v55, v88);
    v161 = v179;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

_QWORD *sub_1BB5E0CD4(_QWORD *result, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *result = *a3;
  *a2 = *(_QWORD *)(v4 + 16);
  return result;
}

BOOL sub_1BB5E0CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, _QWORD, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v53 = a2;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v47 - v6;
  v54 = sub_1BB86C8B0();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B0558, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v4);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - v10;
  v12 = sub_1BB86CB50();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, &qword_1ED39C238, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v4);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v47 - v17;
  sub_1BA4B07F0(0, qword_1EF2C8868, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v4);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v47 - v20;
  v56 = sub_1BB86C0E8();
  v22 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v51 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a1;
  sub_1BB86C7F0();
  if (v24 > 0.0 && v24 < 86400.0)
    return 1;
  sub_1BB86CB14();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1BA5C699C((uint64_t)v11, (unint64_t *)&qword_1ED3B0558, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470]);
    v26 = sub_1BB86CAD8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v18, 1, 1, v26);
LABEL_7:
    sub_1BA5C699C((uint64_t)v18, &qword_1ED39C238, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, 1, 1, v56);
LABEL_8:
    v29 = qword_1EF2C8868;
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    v31 = (uint64_t)v21;
LABEL_9:
    sub_1BA5C699C(v31, v29, v30);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  sub_1BB86CA0C();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v27 = sub_1BB86CAD8();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v18, 0, 1, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v18, 1, v27) == 1)
    goto LABEL_7;
  v47 = v2;
  v48 = v7;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3B9C60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v32 = sub_1BB86CAC0();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 72);
  v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v49 = 2 * v34;
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1BB87FC80;
  v37 = v36 + v35;
  v38 = *(void (**)(unint64_t, _QWORD, uint64_t))(v33 + 104);
  v38(v37, *MEMORY[0x1E0CB1158], v32);
  v38(v37 + v34, *MEMORY[0x1E0CB1160], v32);
  v38(v37 + v49, *MEMORY[0x1E0CB1130], v32);
  sub_1BA861CB8(v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BB86CA3C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
  v39 = v56;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v39) == 1)
    goto LABEL_8;
  v40 = v51;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v51, v21, v39);
  v41 = (uint64_t)v48;
  sub_1BB86CA78();
  v42 = v52;
  v43 = v54;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v41, 1, v54) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v40, v39);
    v29 = (unint64_t *)&qword_1ED3B0540;
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v31 = v41;
    goto LABEL_9;
  }
  v44 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v50, v41, v43);
  sub_1BB86C7F0();
  v46 = v45;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v40, v39);
  return v46 < 86400.0 && v46 > 0.0;
}

void sub_1BB5E12B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v2 = v1;
  v154 = sub_1BB86C8B0();
  v146 = *(_QWORD *)(v154 - 8);
  MEMORY[0x1E0C80A78](v154);
  v153 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v152 = (char *)&v136 - v6;
  v7 = type metadata accessor for PuzzleStreak();
  v144 = *(_QWORD *)(v7 - 8);
  v145 = v7;
  MEMORY[0x1E0C80A78](v7);
  v141 = (uint64_t)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v157 = (uint64_t)&v136 - v10;
  MEMORY[0x1E0C80A78](v11);
  v151 = (uint64_t)&v136 - v12;
  MEMORY[0x1E0C80A78](v13);
  v150 = (uint64_t)&v136 - v14;
  v15 = a1[1];
  v16 = sub_1BB8741F4();
  if (v16 >= v15)
  {
    if (v15 < 0)
      goto LABEL_137;
    if (v15)
      sub_1BB5E1D98(0, v15, 1, a1);
    return;
  }
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  if (v15 < -1)
    goto LABEL_145;
  v137 = v16;
  if (v15 < 2)
  {
    v21 = (char *)MEMORY[0x1E0DEE9D8];
    v143 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v144 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80));
    v136 = MEMORY[0x1E0DEE9D8];
    if (v15 != 1)
    {
      v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_103:
      if (v23 >= 2)
      {
        v130 = *a1;
        do
        {
          v131 = v23 - 2;
          if (v23 < 2)
            goto LABEL_132;
          if (!v130)
            goto LABEL_144;
          v132 = *(_QWORD *)&v21[16 * v131 + 32];
          v133 = *(_QWORD *)&v21[16 * v23 + 24];
          sub_1BB5E22D4(v130 + *(_QWORD *)(v144 + 72) * v132, v130 + *(_QWORD *)(v144 + 72) * *(_QWORD *)&v21[16 * v23 + 16], v130 + *(_QWORD *)(v144 + 72) * v133, v143);
          if (v2)
            break;
          if (v133 < v132)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = sub_1BACAB464((uint64_t)v21);
          if (v131 >= *((_QWORD *)v21 + 2))
            goto LABEL_134;
          v134 = &v21[16 * v131 + 32];
          *(_QWORD *)v134 = v132;
          *((_QWORD *)v134 + 1) = v133;
          v135 = *((_QWORD *)v21 + 2);
          if (v23 > v135)
            goto LABEL_135;
          memmove(&v21[16 * v23 + 16], &v21[16 * v23 + 32], 16 * (v135 - v23));
          *((_QWORD *)v21 + 2) = v135 - 1;
          v23 = v135 - 1;
        }
        while (v135 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v136 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v18 = v17 >> 1;
    v19 = sub_1BB872E74();
    *(_QWORD *)(v19 + 16) = v18;
    v20 = *(unsigned __int8 *)(v144 + 80);
    v136 = v19;
    v143 = v19 + ((v20 + 32) & ~v20);
  }
  v22 = 0;
  v21 = (char *)MEMORY[0x1E0DEE9D8];
  v156 = a1;
  while (1)
  {
    v139 = v21;
    v24 = v22;
    v25 = v22 + 1;
    v142 = v22;
    if (v22 + 1 >= v15)
    {
      v39 = v22 + 1;
      v21 = v139;
    }
    else
    {
      v140 = *a1;
      v26 = v140;
      v27 = *(_QWORD *)(v144 + 72);
      v159 = v27;
      v28 = v150;
      sub_1BA4C2DD8(v140 + v27 * v25, v150, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v29 = v26 + v27 * v24;
      v158 = v15;
      v30 = v151;
      sub_1BA4C2DD8(v29, v151, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v31 = v152;
      sub_1BB86BE9C();
      v32 = v153;
      sub_1BB86BE9C();
      LODWORD(v155) = sub_1BB86C820();
      v33 = *(void (**)(char *, uint64_t))(v146 + 8);
      v34 = v32;
      v35 = v154;
      v33(v34, v154);
      v36 = v31;
      v37 = v140;
      v38 = v35;
      v24 = v142;
      v149 = v33;
      v33(v36, v38);
      v15 = v158;
      sub_1BA4A2E80(v30, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      sub_1BA4A2E80(v28, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v39 = v24 + 2;
      if (v24 + 2 < v15)
      {
        v138 = v2;
        v147 = v159 * v39;
        v148 = v159 * v25;
        while (1)
        {
          v40 = v39;
          v41 = v150;
          sub_1BA4C2DD8(v37 + v147, v150, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v42 = v151;
          sub_1BA4C2DD8(v37 + v148, v151, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v43 = v152;
          sub_1BB86BE9C();
          v44 = v153;
          sub_1BB86BE9C();
          v45 = sub_1BB86C820();
          v46 = v44;
          v47 = v154;
          v48 = v149;
          v149(v46, v154);
          v48(v43, v47);
          sub_1BA4A2E80(v42, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          sub_1BA4A2E80(v41, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          if (((v155 ^ v45) & 1) != 0)
            break;
          v39 = v40 + 1;
          v37 += v159;
          v15 = v158;
          if (v158 == v39)
          {
            v39 = v158;
            a1 = v156;
            v2 = v138;
            v24 = v142;
            goto LABEL_23;
          }
        }
        a1 = v156;
        v2 = v138;
        v39 = v40;
        v24 = v142;
        v15 = v158;
      }
LABEL_23:
      v21 = v139;
      if ((v155 & 1) != 0)
      {
        if (v39 < v24)
          goto LABEL_138;
        if (v24 < v39)
        {
          v49 = v24;
          v138 = v2;
          v50 = 0;
          v51 = v159;
          v52 = v159 * (v39 - 1);
          v53 = v39 * v159;
          v54 = v49;
          v55 = v49 * v159;
          do
          {
            if (v54 != v39 + v50 - 1)
            {
              v56 = v140;
              if (!v140)
                goto LABEL_143;
              v57 = v39;
              v58 = v140 + v55;
              v59 = v140 + v52;
              sub_1BB5E2DAC(v140 + v55, v141);
              if (v55 < v52 || v58 >= v56 + v53)
              {
                swift_arrayInitWithTakeFrontToBack();
                v51 = v159;
              }
              else
              {
                v51 = v159;
                if (v55 != v52)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_1BB5E2DAC(v141, v59);
              v39 = v57;
            }
            ++v54;
            --v50;
            v52 -= v51;
            v53 -= v51;
            v55 += v51;
          }
          while (v54 < v39 + v50);
          v2 = v138;
          v21 = v139;
          a1 = v156;
          v24 = v142;
          v15 = v158;
        }
      }
    }
    if (v39 < v15)
    {
      if (__OFSUB__(v39, v24))
        goto LABEL_136;
      if (v39 - v24 < v137)
        break;
    }
LABEL_55:
    if (v39 < v24)
      goto LABEL_131;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v155 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v21 = sub_1BACAA368(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v80 = *((_QWORD *)v21 + 2);
    v79 = *((_QWORD *)v21 + 3);
    v23 = v80 + 1;
    if (v80 >= v79 >> 1)
      v21 = sub_1BACAA368((char *)(v79 > 1), v80 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23;
    v81 = v21 + 32;
    v82 = &v21[16 * v80 + 32];
    v83 = v155;
    *(_QWORD *)v82 = v142;
    *((_QWORD *)v82 + 1) = v83;
    if (v80)
    {
      while (1)
      {
        v84 = v23 - 1;
        if (v23 >= 4)
        {
          v89 = &v81[16 * v23];
          v90 = *((_QWORD *)v89 - 8);
          v91 = *((_QWORD *)v89 - 7);
          v95 = __OFSUB__(v91, v90);
          v92 = v91 - v90;
          if (v95)
            goto LABEL_120;
          v94 = *((_QWORD *)v89 - 6);
          v93 = *((_QWORD *)v89 - 5);
          v95 = __OFSUB__(v93, v94);
          v87 = v93 - v94;
          v88 = v95;
          if (v95)
            goto LABEL_121;
          v96 = v23 - 2;
          v97 = &v81[16 * v23 - 32];
          v99 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          v95 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          if (v95)
            goto LABEL_123;
          v95 = __OFADD__(v87, v100);
          v101 = v87 + v100;
          if (v95)
            goto LABEL_126;
          if (v101 >= v92)
          {
            v119 = &v81[16 * v84];
            v121 = *(_QWORD *)v119;
            v120 = *((_QWORD *)v119 + 1);
            v95 = __OFSUB__(v120, v121);
            v122 = v120 - v121;
            if (v95)
              goto LABEL_130;
            v112 = v87 < v122;
            goto LABEL_92;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v113 = *((_QWORD *)v21 + 4);
            v114 = *((_QWORD *)v21 + 5);
            v95 = __OFSUB__(v114, v113);
            v106 = v114 - v113;
            v107 = v95;
            goto LABEL_86;
          }
          v86 = *((_QWORD *)v21 + 4);
          v85 = *((_QWORD *)v21 + 5);
          v95 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          v88 = v95;
        }
        if ((v88 & 1) != 0)
          goto LABEL_122;
        v96 = v23 - 2;
        v102 = &v81[16 * v23 - 32];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v105 = __OFSUB__(v103, v104);
        v106 = v103 - v104;
        v107 = v105;
        if (v105)
          goto LABEL_125;
        v108 = &v81[16 * v84];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v95 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v95)
          goto LABEL_128;
        if (__OFADD__(v106, v111))
          goto LABEL_129;
        if (v106 + v111 >= v87)
        {
          v112 = v87 < v111;
LABEL_92:
          if (v112)
            v84 = v96;
          goto LABEL_94;
        }
LABEL_86:
        if ((v107 & 1) != 0)
          goto LABEL_124;
        v115 = &v81[16 * v84];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v95 = __OFSUB__(v116, v117);
        v118 = v116 - v117;
        if (v95)
          goto LABEL_127;
        if (v118 < v106)
          goto LABEL_14;
LABEL_94:
        v123 = v84 - 1;
        if (v84 - 1 >= v23)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v124 = *a1;
        if (!*a1)
          goto LABEL_142;
        v125 = &v81[16 * v123];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v84];
        v128 = *((_QWORD *)v127 + 1);
        sub_1BB5E22D4(v124 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v125, v124 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v127, v124 + *(_QWORD *)(v144 + 72) * v128, v143);
        if (v2)
          goto LABEL_114;
        if (v128 < v126)
          goto LABEL_117;
        if (v84 > *((_QWORD *)v21 + 2))
          goto LABEL_118;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v123 + 8] = v128;
        v129 = *((_QWORD *)v21 + 2);
        if (v84 >= v129)
          goto LABEL_119;
        v23 = v129 - 1;
        memmove(&v81[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
        *((_QWORD *)v21 + 2) = v129 - 1;
        a1 = v156;
        if (v129 <= 2)
          goto LABEL_14;
      }
    }
    v23 = 1;
LABEL_14:
    v15 = a1[1];
    v22 = v155;
    if (v155 >= v15)
      goto LABEL_103;
  }
  if (__OFADD__(v24, v137))
    goto LABEL_139;
  if (v24 + v137 >= v15)
    v60 = v15;
  else
    v60 = v24 + v137;
  if (v60 >= v24)
  {
    if (v39 != v60)
    {
      v138 = v2;
      v61 = *(_QWORD *)(v144 + 72);
      v62 = v61 * (v39 - 1);
      v147 = v61;
      v63 = v39 * v61;
      v140 = v60;
      do
      {
        v65 = 0;
        v155 = v39;
        v148 = v63;
        v149 = (void (*)(char *, uint64_t))v62;
        while (1)
        {
          v159 = v24;
          v66 = v156;
          v67 = *v156;
          v158 = v63 + v65;
          v68 = v63 + v65 + v67;
          v69 = v150;
          sub_1BA4C2DD8(v68, v150, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v70 = v151;
          sub_1BA4C2DD8(v62 + v65 + v67, v151, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v71 = v152;
          sub_1BB86BE9C();
          v72 = v153;
          sub_1BB86BE9C();
          LOBYTE(v67) = sub_1BB86C820();
          v73 = *(void (**)(char *, uint64_t))(v146 + 8);
          v74 = v72;
          v75 = v154;
          v73(v74, v154);
          v73(v71, v75);
          sub_1BA4A2E80(v70, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          sub_1BA4A2E80(v69, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          if ((v67 & 1) == 0)
            break;
          v76 = *v66;
          if (!*v66)
            goto LABEL_141;
          v63 = v148;
          v62 = (uint64_t)v149;
          v77 = (uint64_t)v149 + v76 + v65;
          sub_1BB5E2DAC(v76 + v148 + v65, v157);
          swift_arrayInitWithTakeFrontToBack();
          sub_1BB5E2DAC(v157, v77);
          v65 -= v147;
          v24 = v159 + 1;
          v64 = v155;
          if (v155 == v159 + 1)
            goto LABEL_48;
        }
        v64 = v155;
        v63 = v148;
        v62 = (uint64_t)v149;
LABEL_48:
        v39 = v64 + 1;
        v62 += v147;
        v63 += v147;
        v24 = v142;
      }
      while (v39 != v140);
      v39 = v140;
      v2 = v138;
      v21 = v139;
      a1 = v156;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  sub_1BB873EA0();
  __break(1u);
}

void sub_1BB5E1D98(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v7 = sub_1BB86C8B0();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v34 - v10;
  v37 = type metadata accessor for PuzzleStreak();
  MEMORY[0x1E0C80A78](v37);
  v48 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v39 = (uint64_t)&v34 - v13;
  MEMORY[0x1E0C80A78](v14);
  v38 = (char *)&v34 - v16;
  v47 = a3;
  v35 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v47 - 1);
    v44 = v17;
    v19 = v17 * v47;
    v20 = (uint64_t)v38;
LABEL_5:
    v21 = 0;
    v50 = v36;
    v45 = v19;
    v46 = v18;
    while (1)
    {
      v22 = *a4;
      v49 = v19 + v21;
      sub_1BA4C2DD8(v19 + v21 + v22, v20, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v23 = v39;
      sub_1BA4C2DD8(v18 + v21 + v22, v39, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      v24 = v40;
      sub_1BB86BE9C();
      v25 = v41;
      sub_1BB86BE9C();
      LOBYTE(v22) = sub_1BB86C820();
      v26 = a4;
      v27 = *(void (**)(char *, uint64_t))(v42 + 8);
      v28 = v25;
      v29 = v43;
      v27(v28, v43);
      v30 = v24;
      v31 = v29;
      v19 = v45;
      v18 = v46;
      v27(v30, v31);
      a4 = v26;
      sub_1BA4A2E80(v23, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      sub_1BA4A2E80(v20, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v18 += v44;
        v19 += v44;
        if (++v47 == v35)
          return;
        goto LABEL_5;
      }
      v32 = *v26;
      if (!*v26)
        break;
      v33 = v32 + v18 + v21;
      sub_1BB5E2DAC(v32 + v19 + v21, v48);
      swift_arrayInitWithTakeFrontToBack();
      sub_1BB5E2DAC(v48, v33);
      v21 -= v44;
      ++v50;
      a4 = v26;
      if (v47 == v50)
        goto LABEL_4;
    }
    __break(1u);
  }
}

void sub_1BB5E2074(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a1;
  v7 = sub_1BB86C8B0();
  v36 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v32 = (char *)&v26 - v10;
  v12.n128_f64[0] = MEMORY[0x1E0C80A78](v11);
  v31 = (char *)&v26 - v13;
  v34 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v14 = v36[9];
    v29 = (void (*)(char *, uint64_t, uint64_t))v36[2];
    v30 = a4;
    v38 = v14 * (v34 - 1);
    v33 = v14;
    v37 = v14 * v34;
LABEL_5:
    v15 = 0;
    v16 = v28;
    while (1)
    {
      v17 = *a4;
      v18 = v31;
      v19 = v29;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v29)(v31, v37 + v15 + *a4, v7, v12);
      v20 = v32;
      v19(v32, v38 + v15 + v17, v7);
      sub_1BB078C54();
      LOBYTE(v17) = sub_1BB87291C();
      v21 = (void (*)(char *, uint64_t))v36[1];
      v22 = v20;
      a4 = v30;
      v21(v22, v7);
      v21(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v38 += v33;
        v37 += v33;
        if (++v34 == v27)
          return;
        goto LABEL_5;
      }
      v23 = *a4;
      if (!*a4)
        break;
      v24 = (char *)(v23 + v38 + v15);
      v25 = (void (*)(char *, uint64_t, uint64_t))v36[4];
      v25(v35, v23 + v37 + v15, v7);
      swift_arrayInitWithTakeFrontToBack();
      v25(v24, (uint64_t)v35, v7);
      v15 -= v33;
      if (v34 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1BB5E22D4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v61 = sub_1BB86C8B0();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v56 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v51 - v10;
  v54 = type metadata accessor for PuzzleStreak();
  MEMORY[0x1E0C80A78](v54);
  v58 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v57 = (uint64_t)&v51 - v13;
  v15 = *(_QWORD *)(v14 + 72);
  if (!v15)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v15 == -1)
    goto LABEL_62;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v15 == -1)
    goto LABEL_63;
  v17 = (uint64_t)(a2 - a1) / v15;
  v65 = a1;
  v64 = a4;
  v18 = v16 / v15;
  if (v17 >= v16 / v15)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      v20 = v18 * v15;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v34 = a4 + v20;
      v63 = a4 + v20;
      v65 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        v36 = -v15;
        v52 = a1;
        v53 = a4;
        v37 = v60;
        do
        {
          v62 = a3;
          v55 = a3 + v36;
          v38 = v57;
          sub_1BA4C2DD8(v34 + v36, v57, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          v39 = a2 + v36;
          v40 = v58;
          sub_1BA4C2DD8(a2 + v36, v58, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          sub_1BB86BE9C();
          v41 = v56;
          sub_1BB86BE9C();
          v42 = sub_1BB86C820();
          v43 = v36;
          v44 = *(void (**)(char *, uint64_t))(v59 + 8);
          v45 = v41;
          v46 = v61;
          v44(v45, v61);
          v44(v37, v46);
          sub_1BA4A2E80(v40, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          sub_1BA4A2E80(v38, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
          if ((v42 & 1) != 0)
          {
            a3 = v55;
            if (v62 < a2 || v55 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v47 = v52;
              v48 = v53;
              v36 = v43;
            }
            else
            {
              v47 = v52;
              v48 = v53;
              v36 = v43;
              if (v62 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v65 += v36;
          }
          else
          {
            v49 = v63;
            v63 += v43;
            v36 = v43;
            a3 = v55;
            if (v62 < v49 || v55 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v62 != v49)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v39 = a2;
            v47 = v52;
            v48 = v53;
          }
          v34 = v63;
          if (v63 <= v48)
            break;
          a2 = v39;
        }
        while (v39 > v47);
      }
      goto LABEL_60;
    }
  }
  else if ((v17 & 0x8000000000000000) == 0)
  {
    v19 = v17 * v15;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v55 = a4 + v19;
    v63 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      v62 = a3;
      v23 = v57;
      v22 = v58;
      do
      {
        sub_1BA4C2DD8(a2, v23, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
        sub_1BA4C2DD8(a4, v22, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
        v24 = v60;
        sub_1BB86BE9C();
        v25 = v56;
        sub_1BB86BE9C();
        v26 = sub_1BB86C820();
        v27 = *(void (**)(char *, uint64_t))(v59 + 8);
        v28 = v25;
        v29 = v61;
        v27(v28, v61);
        v27(v24, v29);
        sub_1BA4A2E80(v22, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
        sub_1BA4A2E80(v23, (uint64_t (*)(_QWORD))type metadata accessor for PuzzleStreak);
        v30 = v65;
        if ((v26 & 1) != 0)
        {
          v31 = a2 + v15;
          if (v65 < a2 || v65 >= v31)
          {
            swift_arrayInitWithTakeFrontToBack();
            v32 = v62;
          }
          else
          {
            v32 = v62;
            if (v65 == a2)
              v30 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v33 = v64 + v15;
          if (v65 < v64 || v65 >= v33)
          {
            swift_arrayInitWithTakeFrontToBack();
            v32 = v62;
          }
          else
          {
            v32 = v62;
            if (v65 != v64)
              swift_arrayInitWithTakeBackToFront();
          }
          v64 = v33;
          v31 = a2;
        }
        v65 = v30 + v15;
        a4 = v64;
        if (v64 >= v55)
          break;
        a2 = v31;
      }
      while (v31 < v32);
    }
LABEL_60:
    sub_1BACAAE60(&v65, &v64, (uint64_t *)&v63);
    return 1;
  }
LABEL_64:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BB5E288C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  char *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v8 = sub_1BB86C8B0();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v48 = (char *)&v42 - v12;
  v50 = v9[9];
  if (!v50)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 - a1 == 0x8000000000000000 && v50 == -1)
    goto LABEL_63;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v50 == -1)
    goto LABEL_64;
  v14 = (uint64_t)(a2 - a1) / v50;
  v53 = a1;
  v52 = a4;
  v15 = v13 / v50;
  if (v14 >= v13 / v50)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v50;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v28 = a4 + v17;
      v51 = a4 + v17;
      v53 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v30 = -v50;
        v31 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v43 = -v50;
        v44 = v31;
        v46 = a4;
        v47 = a1;
        v45 = v9;
        do
        {
          v50 = a3 + v30;
          v32 = v48;
          v33 = v44;
          v44(v48, v28 + v30, v8);
          v34 = a2 + v30;
          v35 = v49;
          v33(v49, a2 + v30, v8);
          sub_1BB078C54();
          LOBYTE(v33) = sub_1BB87291C();
          v36 = (void (*)(char *, uint64_t))v9[1];
          v36(v35, v8);
          v36(v32, v8);
          if ((v33 & 1) != 0)
          {
            v37 = v50;
            if (a3 < a2 || v50 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v9 = v45;
              v38 = v46;
              v39 = v47;
            }
            else
            {
              v9 = v45;
              v38 = v46;
              v39 = v47;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v30 = v43;
            v53 += v43;
          }
          else
          {
            v37 = v50;
            v40 = v51;
            v51 += v30;
            if (a3 < v40 || v50 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack();
              v34 = a2;
              v9 = v45;
              v38 = v46;
              v39 = v47;
            }
            else
            {
              v9 = v45;
              v38 = v46;
              v39 = v47;
              if (a3 != v40)
                swift_arrayInitWithTakeBackToFront();
              v34 = a2;
            }
            v30 = v43;
          }
          v28 = v51;
          if (v51 <= v38)
            break;
          a2 = v34;
          a3 = v37;
        }
        while (v34 > v39);
      }
      goto LABEL_61;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v50;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v47 = a4 + v16;
    v51 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v48;
        v19(v48, a2, v8);
        v22 = v49;
        v19(v49, a4, v8);
        sub_1BB078C54();
        v23 = sub_1BB87291C();
        v24 = (void (*)(char *, uint64_t))v9[1];
        v24(v22, v8);
        v24(v21, v8);
        v25 = v53;
        if ((v23 & 1) != 0)
        {
          v26 = a2 + v50;
          if (v53 < a2 || v53 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v53 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v27 = v52 + v50;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v53 != v52)
              swift_arrayInitWithTakeBackToFront();
          }
          v52 = v27;
          v26 = a2;
        }
        v53 = v25 + v50;
        a4 = v52;
        if (v52 >= v47)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_61:
    sub_1BACAAE6C(&v53, &v52, (uint64_t *)&v51);
    return 1;
  }
LABEL_65:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BB5E2DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PuzzleStreak();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BB5E2DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1BB5E2E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BB86CAD8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1BB5E2E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BB5E2EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BB5E2EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BB5E2F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1BB5E2F70()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5E2F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1BB5E2FB8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BB5E2FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BB86CAD8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PuzzleStatsProcessorContext()
{
  uint64_t result;

  result = qword_1ED3ADB60;
  if (!qword_1ED3ADB60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BB5E3040()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BB86CAD8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1BB5E30A8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  return sub_1BB5E0CD4(a1, a2, a3, a4);
}

id sub_1BB5E30BC()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8NewsFeed24ClearSavedCommandHandler_readingList], sel_removeObserver_, v0);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_1BB5E31D0()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

uint64_t sub_1BB5E32D8()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1BB86C340();

  return v2;
}

void sub_1BB5E340C()
{
  sub_1BB5E3500();
}

void sub_1BB5E3500()
{
  char *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t ObjCClassFromMetadata;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  _QWORD aBlock[6];

  v1 = v0;
  __swift_project_boxed_opaque_existential_1(&v0[OBJC_IVAR____TtC8NewsFeed24ClearSavedCommandHandler_sceneProvider], *(_QWORD *)&v0[OBJC_IVAR____TtC8NewsFeed24ClearSavedCommandHandler_sceneProvider + 24]);
  v2 = (void *)sub_1BB86FFC4();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_rootViewController);

    if (v4)
    {
      v5 = objc_msgSend(v4, sel_traitCollection);
      v6 = objc_msgSend(v5, sel_horizontalSizeClass);

      v7 = v6 != (id)1;
      sub_1BB5E31D0();
      v8 = sub_1BB5E32D8();
      v10 = v9;
      v11 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v11 = v8 & 0xFFFFFFFFFFFFLL;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        v10 = 0;
      }
      v12 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      if (v10)
      {
        v13 = (void *)sub_1BB872970();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = 0;
      }
      v14 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, v12, v13, v7);

      type metadata accessor for Localized();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v16 = (void *)objc_opt_self();
      v17 = objc_msgSend(v16, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1BB86C340();

      v18 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      v19 = (void *)objc_opt_self();
      v20 = objc_msgSend(v19, sel_actionWithTitle_style_handler_, v18, 1, 0, 0x80000001BB9927F0);

      objc_msgSend(v14, sel_addAction_, v20);
      v21 = objc_msgSend(v16, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1BB86C340();

      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v1;
      v23 = v1;
      v24 = (void *)sub_1BB872970();
      swift_bridgeObjectRelease();
      aBlock[4] = sub_1BB5E3908;
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1BA573874;
      aBlock[3] = &block_descriptor_88;
      v25 = _Block_copy(aBlock);
      swift_release();
      v26 = objc_msgSend(v19, sel_actionWithTitle_style_handler_, v24, 0, v25, 0x80000001BB992830);
      _Block_release(v25);

      objc_msgSend(v14, sel_addAction_, v26);
      objc_msgSend(v4, sel_presentViewController_animated_completion_, v14, 1, 0);

    }
  }
}

uint64_t sub_1BB5E38E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BB5E3908()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8NewsFeed24ClearSavedCommandHandler_readingList), sel_clearArticlesFromReadingList);
}

uint64_t FeedMode.selectors.getter()
{
  _BYTE *v0;
  void *v1;
  uint64_t v2;

  if (*v0)
    v1 = &unk_1E724CD08;
  else
    v1 = &unk_1E724CCD8;
  v2 = sub_1BA862444((uint64_t)v1);
  swift_arrayDestroy();
  return v2;
}

void *static FeedMode.allCases.getter()
{
  return &unk_1E72710F8;
}

uint64_t FeedMode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E696C66666FLL;
  else
    return 0x746C7561666564;
}

uint64_t sub_1BB5E39C4()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5E3A38()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5E3A80()
{
  sub_1BB8745CC();
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5E3AF0()
{
  sub_1BA838AD8();
  return sub_1BB872CDC();
}

uint64_t sub_1BB5E3B30()
{
  sub_1BA838AD8();
  return sub_1BB872CD0();
}

uint64_t sub_1BB5E3B78()
{
  sub_1BA838AD8();
  return sub_1BB872CC4();
}

void sub_1BB5E3BB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E72507E8;
}

uint64_t sub_1BB5E3BC8()
{
  sub_1BA838AD8();
  return sub_1BB872D0C();
}

void FeedModeState.feedMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1 & 1;
}

BOOL FeedModeState.isNotDesired.getter()
{
  _BYTE *v0;

  return (*v0 & 0xC0) == 64;
}

unint64_t sub_1BB5E3C3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C8928;
  if (!qword_1EF2C8928)
  {
    sub_1BB5E3C84();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C8928);
  }
  return result;
}

void sub_1BB5E3C84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C8930)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C8930);
  }
}

uint64_t storeEnumTagSinglePayload for FeedModeState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 131 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 131) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7C)
    return ((uint64_t (*)(void))((char *)&loc_1BB5E3D24 + 4 * byte_1BB930727[v4]))();
  *a1 = a2 - 125;
  return ((uint64_t (*)(void))((char *)sub_1BB5E3D58 + 4 * byte_1BB930722[v4]))();
}

uint64_t sub_1BB5E3D58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5E3D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5E3D68);
  return result;
}

uint64_t sub_1BB5E3D80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5E3D88);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_1BB5E3D8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5E3D94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1BB5E3E74()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  objc_super v11;

  v1 = v0;
  v11.receiver = v0;
  v11.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v11, sel_viewDidLoad);
  v2 = objc_msgSend(v0, sel_navigationItem);
  v3 = (void *)sub_1BB872970();
  objc_msgSend(v2, sel_setTitle_, v3);

  v4 = objc_msgSend(v1, sel_navigationItem);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_secondarySystemBackgroundColor);
  sub_1BB80F468(v4, (uint64_t)v6);

  v7 = *(void **)&v1[OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_tableView];
  sub_1BB5E45A4();
  sub_1BB873234();
  objc_msgSend(v7, sel_setDataSource_, v1);
  objc_msgSend(v7, sel_setDelegate_, v1);
  objc_msgSend(v7, sel_setAllowsSelection_, 0);
  objc_msgSend(v7, sel_setAlwaysBounceVertical_, 1);
  v8 = objc_msgSend(v5, sel_secondarySystemBackgroundColor);
  objc_msgSend(v7, sel_setBackgroundColor_, v8);

  v9 = objc_msgSend(v1, sel_view);
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, sel_addSubview_, v7);

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for DebugFormatErrorViewController()
{
  return objc_opt_self();
}

unint64_t sub_1BB5E4254()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_errorModel + 8);
  result = sub_1BB86CBD4();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (result >= *(_QWORD *)(v1 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v1 + 24 * result + 48);
  swift_bridgeObjectRetain();
  result = sub_1BB86CBC8();
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result >= *(_QWORD *)(v3 + 16))
  {
LABEL_16:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  sub_1BB5E45A4();
  v4 = (void *)sub_1BB87321C();
  v5 = objc_msgSend(v4, sel_textLabel);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1BB0E9708(1000);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCE334C](v7, v9, v11, v13);
    swift_bridgeObjectRelease();
    v14 = (void *)sub_1BB872970();
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setText_, v14);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v15 = objc_msgSend(v4, sel_textLabel);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_setNumberOfLines_, 0);

  }
  v17 = objc_msgSend(v4, sel_textLabel);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend((id)objc_opt_self(), sel_monospacedSystemFontOfSize_weight_, 14.0, *MEMORY[0x1E0DC1438]);
    objc_msgSend(v18, sel_setFont_, v19);

  }
  swift_bridgeObjectRelease();
  return (unint64_t)v4;
}

unint64_t sub_1BB5E45A4()
{
  unint64_t result;

  result = qword_1EF2B6EE0;
  if (!qword_1EF2B6EE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF2B6EE0);
  }
  return result;
}

id sub_1BB5E45E0(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  objc_super v17;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_tableView;
  v10 = objc_allocWithZone(MEMORY[0x1E0DC3D48]);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_initWithFrame_style_, 1, 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_styler;
  type metadata accessor for DebugFormatStyler();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)&v11[v12] = v13;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_editor] = a1;
  v14 = &v11[OBJC_IVAR____TtC8NewsFeed30DebugFormatErrorViewController_errorModel];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  swift_retain();
  v15 = a2;
  swift_bridgeObjectRetain();

  v17.receiver = v11;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t sub_1BB5E46F4()
{
  uint64_t result;
  uint64_t v1;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    *(_QWORD *)(v1 + 24) = MEMORY[0x1E0DEE9E8];
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BB5E481C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5E4850()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BB5E4874()
{
  return sub_1BB5E46F4();
}

uint64_t static FormatIssueBinding.LayeredMedia.== infix(_:_:)()
{
  return 1;
}

uint64_t FormatIssueBinding.LayeredMedia.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatIssueBinding.LayeredMedia.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BB5E48EC()
{
  unint64_t result;

  result = qword_1EF2C8988;
  if (!qword_1EF2C8988)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueBinding.LayeredMedia, &type metadata for FormatIssueBinding.LayeredMedia);
    atomic_store(result, (unint64_t *)&qword_1EF2C8988);
  }
  return result;
}

unint64_t sub_1BB5E4930(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5E4954();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5E4954()
{
  unint64_t result;

  result = qword_1EF2C8990;
  if (!qword_1EF2C8990)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatIssueBinding.LayeredMedia, &type metadata for FormatIssueBinding.LayeredMedia);
    atomic_store(result, (unint64_t *)&qword_1EF2C8990);
  }
  return result;
}

unint64_t sub_1BB5E4998(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAE72F00();
  a1[2] = sub_1BAEEFEE8();
  result = sub_1BB5E48EC();
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5E49CC(_QWORD *a1)
{
  return FormatIssueBinding.LayeredMedia.init(from:)(a1);
}

uint64_t sub_1BB5E49E0(_QWORD *a1)
{
  return FormatIssueBinding.LayeredMedia.encode(to:)(a1);
}

uint64_t _s12LayeredMediaOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BB5E4A34 + 4 * asc_1BB930974[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BB5E4A54 + 4 * byte_1BB930979[v4]))();
}

_BYTE *sub_1BB5E4A34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BB5E4A54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5E4A5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5E4A64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BB5E4A6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BB5E4A74(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FormatIssueBinding.LayeredMedia()
{
  return &type metadata for FormatIssueBinding.LayeredMedia;
}

unint64_t sub_1BB5E4A90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *inited;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;

  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  type metadata accessor for FormatDOMReader();
  inited = (uint64_t *)swift_initStackObject();
  v5 = inited;
  inited[2] = v3;
  inited[3] = v2;
  inited[5] = v3;
  inited[6] = v2;
  if ((v2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(v2) & 0xF;
  else
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  inited[4] = 15;
  swift_bridgeObjectRetain_n();
  if (!v6)
  {
LABEL_61:
    sub_1BB5E4F1C();
    sub_1BB5E4F70();
    sub_1BB872A60();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v7 = 4 * v6;
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  result = 15;
  while (1)
  {
    v10 = v5[2];
    v11 = v5[3];
    v12 = (v11 & 0x1000000000000000) == 0 || (v10 & 0x800000000000000) != 0;
    v13 = result & 0xC;
    v14 = 4 << v12;
    if ((result & 1) != 0 && v13 != v14)
      break;
    if (v13 == v14)
      result = sub_1BB80CBC0(result, v5[2], v5[3]);
    v16 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0x2000000000000000) != 0)
      v16 = HIBYTE(v11) & 0xF;
    if (result >> 16 >= v16)
      goto LABEL_63;
    if ((result & 1) == 0)
    {
      sub_1BB80CD40(result, v10, v11);
      if ((v11 & 0x1000000000000000) != 0)
        goto LABEL_37;
LABEL_24:
      if ((v11 & 0x2000000000000000) == 0 && (v10 & 0x1000000000000000) == 0)
        sub_1BB873D80();
      if (sub_1BB873D8C() == 38)
        goto LABEL_28;
LABEL_38:
      result = v5[4];
      if ((result & 0xC) == v14 || (result & 1) == 0)
      {
        if ((result & 0xC) == v14)
          result = sub_1BB80CBC0(result, v10, v11);
        v27 = v10 & 0xFFFFFFFFFFFFLL;
        if ((v11 & 0x2000000000000000) != 0)
          v27 = HIBYTE(v11) & 0xF;
        if (result >> 16 >= v27)
          goto LABEL_65;
        if ((result & 1) != 0)
          goto LABEL_50;
        sub_1BB80CD40(result, v10, v11);
        if ((v11 & 0x1000000000000000) != 0)
          goto LABEL_56;
LABEL_51:
        if ((v11 & 0x2000000000000000) == 0 && (v10 & 0x1000000000000000) == 0)
          sub_1BB873D80();
        v28 = sub_1BB873D8C();
      }
      else
      {
        v26 = v10 & 0xFFFFFFFFFFFFLL;
        if ((v11 & 0x2000000000000000) != 0)
          v26 = HIBYTE(v11) & 0xF;
        if (result >> 16 >= v26)
          goto LABEL_64;
LABEL_50:
        if ((v11 & 0x1000000000000000) == 0)
          goto LABEL_51;
LABEL_56:
        v28 = sub_1BB873CA8();
      }
      v29 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1BB38EBEC(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v31 = *((_QWORD *)v8 + 2);
      v30 = *((_QWORD *)v8 + 3);
      if (v31 >= v30 >> 1)
        v8 = sub_1BB38EBEC((char *)(v30 > 1), v31 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v31 + 1;
      *(_DWORD *)&v8[4 * v31 + 32] = v29;
      sub_1BA9995EC(1uLL);
      goto LABEL_7;
    }
LABEL_23:
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_24;
LABEL_37:
    if (sub_1BB873CA8() != 38)
      goto LABEL_38;
LABEL_28:
    sub_1BA9995EC(1uLL);
    v17 = sub_1BA862B9C((uint64_t)&unk_1E724D840);
    v18 = sub_1BA999F64(v17);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v20 = v18;
    v21 = v19;
    swift_bridgeObjectRelease();
    sub_1BA9995EC(1uLL);
    v22 = sub_1BA84A02C(v20, v21);
    v23 = v22;
    if ((v22 & 0x100000000) != 0)
      v23 = dword_1BB930B04[(int)v22];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1BB38EBEC(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v25 = *((_QWORD *)v8 + 2);
    v24 = *((_QWORD *)v8 + 3);
    if (v25 >= v24 >> 1)
      v8 = sub_1BB38EBEC((char *)(v24 > 1), v25 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v25 + 1;
    *(_DWORD *)&v8[4 * v25 + 32] = v23;
LABEL_7:
    result = v5[4];
    if (v7 <= result >> 14)
      goto LABEL_61;
  }
  v15 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v15 = HIBYTE(v11) & 0xF;
  if (result >> 16 < v15)
    goto LABEL_23;
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FormatDOMText()
{
  return objc_opt_self();
}

void sub_1BB5E4F1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3A1028)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3A1028);
  }
}

unint64_t sub_1BB5E4F70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3A2FB8;
  if (!qword_1ED3A2FB8)
  {
    sub_1BB5E4F1C();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3A2FB8);
  }
  return result;
}

uint64_t static FormatPackageList.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_1BB874398() & 1) != 0)
    return sub_1BA88DC28(v2, v3);
  else
    return 0;
}

uint64_t FormatPackageList.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatPackageList.packages.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_1BB5E504C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5E5070();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5E5070()
{
  unint64_t result;

  result = qword_1EF2C8998;
  if (!qword_1EF2C8998)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPackageList, &type metadata for FormatPackageList);
    atomic_store(result, (unint64_t *)&qword_1EF2C8998);
  }
  return result;
}

unint64_t sub_1BB5E50B4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAE8FF0C();
  a1[2] = sub_1BAEF3940();
  result = sub_1BB5E50E8();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5E50E8()
{
  unint64_t result;

  result = qword_1EF2C89A0;
  if (!qword_1EF2C89A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatPackageList, &type metadata for FormatPackageList);
    atomic_store(result, (unint64_t *)&qword_1EF2C89A0);
  }
  return result;
}

uint64_t sub_1BB5E512C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FormatPackageList.init(from:)(a1, a2);
}

uint64_t sub_1BB5E5140(_QWORD *a1)
{
  return FormatPackageList.encode(to:)(a1);
}

uint64_t sub_1BB5E5154(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_1BB874398() & 1) != 0)
    return sub_1BA88DC28(v2, v3);
  else
    return 0;
}

ValueMetadata *type metadata accessor for FormatPackageList()
{
  return &type metadata for FormatPackageList;
}

void sub_1BB5E521C()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  char *v25;
  id v26;
  void *v27;
  objc_super v28;

  v28.receiver = v0;
  v28.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v28, sel_viewDidLoad);
  v1 = *(void **)&v0[OBJC_IVAR____TtC8NewsFeed42DebugFormatUploadHiddenContainerController_rootViewController];
  objc_msgSend(v0, sel_addChildViewController_, v1);
  v2 = objc_msgSend(v1, sel_view);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v2;
  v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = v4;
  objc_msgSend(v4, sel_bounds);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  objc_msgSend(v3, sel_setFrame_, v7, v9, v11, v13);
  v14 = objc_msgSend(v0, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v14;
  v16 = objc_msgSend(v1, sel_view);
  if (!v16)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v17 = v16;
  objc_msgSend(v15, sel_addSubview_, v16);

  objc_msgSend(v1, sel_didMoveToParentViewController_, v0);
  v18 = objc_msgSend(v0, sel_navigationItem);
  v19 = (void *)sub_1BB872970();
  objc_msgSend(v18, sel_setTitle_, v19);

  v20 = objc_msgSend(v0, sel_navigationItem);
  sub_1BA65E330();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1BB8856E0;
  v22 = (void *)sub_1BB872970();
  v23 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v22);

  if (v23)
  {
    v24 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
    v25 = v0;
    v26 = objc_msgSend(v24, sel_initWithImage_style_target_action_, v23, 0, v25, sel_doDismiss);

    *(_QWORD *)(v21 + 32) = v26;
    sub_1BB872DCC();
    sub_1BAAC19FC();
    v27 = (void *)sub_1BB872D9C();
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_setRightBarButtonItems_, v27);

    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t type metadata accessor for DebugFormatUploadHiddenContainerController()
{
  return objc_opt_self();
}

id sub_1BB5E56B8(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  unint64_t v6;
  char *v7;
  objc_class *v8;
  id v9;
  unint64_t v10;
  id result;
  uint64_t v12;
  uint64_t i;
  char *v14;
  unint64_t v15;
  void *v16;
  id v17;
  objc_super v18;
  unint64_t v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  v7 = v2;
  sub_1BB873DD4();
  v8 = (objc_class *)type metadata accessor for DebugFormatUploadHiddenViewController();
  v9 = objc_allocWithZone(v8);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BB793C74(a1, a2, 0);
  swift_release();
  sub_1BB873DB0();
  sub_1BB873DE0();
  sub_1BB873DEC();
  sub_1BB873DBC();
  objc_allocWithZone(v8);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BB793C74(a1, a2, 1);
  swift_release();
  sub_1BB873DB0();
  sub_1BB873DE0();
  sub_1BB873DEC();
  sub_1BB873DBC();
  objc_allocWithZone(v8);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BB793C74(a1, a2, 2);
  swift_release();
  sub_1BB873DB0();
  sub_1BB873DE0();
  sub_1BB873DEC();
  sub_1BB873DBC();
  v10 = v19;
  result = (id)swift_bridgeObjectRelease();
  v19 = v6;
  if ((v10 & 0x8000000000000000) == 0 && (v10 & 0x4000000000000000) == 0)
  {
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
      goto LABEL_4;
LABEL_15:
    swift_release();
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    sub_1BB8708D0();
    sub_1BA975C58(v15);
    swift_release();
    v16 = (void *)sub_1BB8708A0();
    v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugNavigationController()), sel_initWithRootViewController_, v16);

    *(_QWORD *)&v7[OBJC_IVAR____TtC8NewsFeed42DebugFormatUploadHiddenContainerController_rootViewController] = v17;
    v18.receiver = v7;
    v18.super_class = ObjectType;
    return objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  }
  swift_bridgeObjectRetain();
  v12 = sub_1BB873F30();
  result = (id)swift_release();
  if (!v12)
    goto LABEL_15;
LABEL_4:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v14 = (char *)MEMORY[0x1BCCE4630](i, v10);
      else
        v14 = (char *)*(id *)(v10 + 8 * i + 32);
      if (*(_QWORD *)(*(_QWORD *)&v14[OBJC_IVAR____TtC8NewsFeed37DebugFormatUploadHiddenViewController_sections] + 16))
      {
        sub_1BB873DB0();
        sub_1BB873DE0();
        sub_1BB873DEC();
        sub_1BB873DBC();
      }
      else
      {

      }
    }
    swift_release();
    v15 = v19;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t _s8NewsFeed18FormatGroupBindingV4BoolO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1BB5E5A4C
                            + 4
                            * byte_1BB930C4C[(2 * (*(_BYTE *)(a1 + 9) & 0x7F)) | (*(unsigned __int8 *)(a1 + 8) >> 5) & 1]))();
}

BOOL sub_1BB5E5A4C@<W0>(char a1@<W8>)
{
  char v1;
  char v2;
  char v3;

  return !((2 * v3) | ((v2 & 0x20) != 0)) && (v1 ^ a1) == 0;
}

unint64_t sub_1BB5E5BB0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5E5BD4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5E5BD4()
{
  unint64_t result;

  result = qword_1EF2C89D8;
  if (!qword_1EF2C89D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupBinding.Bool, &type metadata for FormatGroupBinding.Bool);
    atomic_store(result, (unint64_t *)&qword_1EF2C89D8);
  }
  return result;
}

unint64_t sub_1BB5E5C18(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA5D8B1C();
  a1[2] = sub_1BA5AF794();
  result = sub_1BB5E5C4C();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5E5C4C()
{
  unint64_t result;

  result = qword_1EF2C89E0;
  if (!qword_1EF2C89E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatGroupBinding.Bool, &type metadata for FormatGroupBinding.Bool);
    atomic_store(result, (unint64_t *)&qword_1EF2C89E0);
  }
  return result;
}

uint64_t _s4BoolOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1F8 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 504);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 1 | (2 * *(unsigned __int8 *)(a1 + 9))) ^ 0x1FF;
  if (v3 >= 0x1F7)
    v3 = -1;
  return v3 + 1;
}

ValueMetadata *type metadata accessor for FormatGroupBinding.Bool()
{
  return &type metadata for FormatGroupBinding.Bool;
}

BOOL static FontBookStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FontBookStyle.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FontBookStyle.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

uint64_t FontBookFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FontBookFactory.init()()
{
  uint64_t v0;

  return v0;
}

void FontBookFactory.makeFontBook(fontBookStyle:contentResizeScale:)(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1BB86D93C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a1)
  {
    v11 = &type metadata for DefaultFontBook;
    v12 = &protocol witness table for DefaultFontBook;
    goto LABEL_5;
  }
  if (*a1 == 1)
  {
    v11 = &type metadata for CondensedFontBook;
    v12 = &protocol witness table for CondensedFontBook;
LABEL_5:
    a3[3] = (uint64_t)v11;
    a3[4] = (uint64_t)v12;
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a2, v6, v8);
  v13 = type metadata accessor for ScalingFontBook();
  v14 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14 + OBJC_IVAR____TtC8NewsFeed15ScalingFontBook_contentResizeScale, v10, v6);
  a3[3] = v13;
  a3[4] = (uint64_t)&protocol witness table for ScalingFontBook;
  *a3 = v14;
}

uint64_t FontBookFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FontBookFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_1BB5E5EB0()
{
  unint64_t result;

  result = qword_1EF2C89E8;
  if (!qword_1EF2C89E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FontBookStyle, &type metadata for FontBookStyle);
    atomic_store(result, (unint64_t *)&qword_1EF2C89E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FontBookStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BB5E5F40 + 4 * byte_1BB930D55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BB5E5F74 + 4 * byte_1BB930D50[v4]))();
}

uint64_t sub_1BB5E5F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5E5F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5E5F84);
  return result;
}

uint64_t sub_1BB5E5F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5E5F98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BB5E5F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5E5FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontBookStyle()
{
  return &type metadata for FontBookStyle;
}

uint64_t dispatch thunk of FontBookFactoryType.makeFontBook(fontBookStyle:contentResizeScale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for FontBookFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FontBookFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1BB5E5FDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *v1;
  v5 = (unint64_t)*v1 >> 62;
  if (!(_DWORD)v5)
    return sub_1BA9C813C(a1);
  if ((_DWORD)v5 != 1)
    return sub_1BB3D9294(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
  v6 = *(_QWORD *)(v4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BAC39E7C();
  if (!v2)
  {
    sub_1BABEFB24(a1, v6);
    sub_1BB5E5FDC(a1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BB5E6110@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = (uint64_t *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8NewsFeed17FormatNodeContext_inventory)
                 + OBJC_IVAR____TtC8NewsFeed22FormatPackageInventory__localizations);
  swift_beginAccess();
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1BA732CA4(a2, a3, a1, v10, v9);
  v13 = v12;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a4 = v11;
  a4[1] = v13;
  return result;
}

uint64_t sub_1BB5E61DC(uint64_t a1)
{
  return sub_1BB5E5FDC(a1);
}

uint64_t _s8NewsFeed26FormatAccessibilityContentO2eeoiySbAC_ACtFZ_0(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v12;
  __int128 v13;
  char v14;
  char v15;
  _OWORD v17[3];
  __int16 v18;

  v2 = *a1;
  v3 = *a2;
  v4 = (unint64_t)*a1 >> 62;
  if (!(_DWORD)v4)
  {
    if (!(v3 >> 62))
    {
      v12 = *(_WORD *)(v2 + 64);
      v13 = *(_OWORD *)(v2 + 32);
      v17[0] = *(_OWORD *)(v2 + 16);
      v17[1] = v13;
      v17[2] = *(_OWORD *)(v2 + 48);
      v18 = v12;
      swift_retain();
      swift_retain();
      _s8NewsFeed21FormatTextNodeBindingO2eeoiySbAC_ACtFZ_0((uint64_t)v17);
      v15 = v14;
      swift_release();
      swift_release();
      return v15 & 1;
    }
LABEL_13:
    v15 = 0;
    return v15 & 1;
  }
  if ((_DWORD)v4 == 1)
  {
    if (v3 >> 62 == 1)
    {
      v5 = *(_QWORD *)(v2 + 24);
      v6 = *(_QWORD *)(v2 + 32);
      v7 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      v10 = *(_QWORD *)(v3 + 32);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      LOBYTE(v6) = sub_1BB641224(v7, v5, v6, v8, v9, v10);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v6 & 1;
    }
    goto LABEL_13;
  }
  if (v3 >> 62 != 2)
    goto LABEL_13;
  if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v3 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v3 + 24))
    return sub_1BB874398();
  v15 = 1;
  return v15 & 1;
}

unint64_t sub_1BB5E63E0(uint64_t a1)
{
  unint64_t result;

  result = sub_1BA825800();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5E6404()
{
  unint64_t result;

  result = qword_1ED3D16A0;
  if (!qword_1ED3D16A0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatAccessibilityContent, &type metadata for FormatAccessibilityContent);
    atomic_store(result, (unint64_t *)&qword_1ED3D16A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormatAccessibilityContent()
{
  return &type metadata for FormatAccessibilityContent;
}

uint64_t sub_1BB5E6458()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5E6484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BB5E6110(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1BB5E64A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5E64C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v9 = *a1;
  v7 = v4;
  v8 = v5;
  return sub_1BA72F670(v3, v2, &v7);
}

uint64_t sub_1BB5E6510()
{
  uint64_t v0;

  sub_1BA6EF090(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64), *(_BYTE *)(v0 + 65));
  swift_release();
  return swift_deallocObject();
}

void sub_1BB5E654C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1BA730B8C();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

uint64_t sub_1BB5E6584()
{
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D2EA0, (uint64_t (*)(uint64_t))sub_1BA573E74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  return sub_1BB86EA58();
}

uint64_t sub_1BB5E65F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5E6618()
{
  return sub_1BB5E6584();
}

uint64_t sub_1BB5E6634()
{
  return 8;
}

_QWORD *sub_1BB5E6640(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BB5E664C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5E6670()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_1BB5E66A8(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_1BB873F30())
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCE4630](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_articleID);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1BB8729A0();
        v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1BA6EA0D0(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = sub_1BA6EA0D0((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v15 = &v3[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
      }
      else
      {

      }
      ++v4;
      if (v7 == v2)
        goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1BB5E683C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a1 + 64;
  v38 = MEMORY[0x1E0DEE9E0];
  v41 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v39 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v8 << 6);
LABEL_23:
    v15 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      v16 = 16 * v10;
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
      v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v16);
      v19 = *v17;
      v20 = v17[1];
      v21 = *v18;
      v22 = v18[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v23 = sub_1BA6E35A8(v21, v22);
      if ((v24 & 1) != 0)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v26 = v38;
        v27 = *(_QWORD *)(v38 + 16);
        if (*(_QWORD *)(v38 + 24) <= v27)
        {
          sub_1BB4ADCAC(v27 + 1, 1);
          v26 = v41;
        }
        v38 = v26;
        sub_1BB8745CC();
        sub_1BB872A90();
        result = sub_1BB874608();
        v28 = v38 + 64;
        v29 = -1 << *(_BYTE *)(v38 + 32);
        v30 = result & ~v29;
        v31 = v30 >> 6;
        if (((-1 << v30) & ~*(_QWORD *)(v38 + 64 + 8 * (v30 >> 6))) == 0)
        {
          v33 = 0;
          v34 = (unint64_t)(63 - v29) >> 6;
          while (++v31 != v34 || (v33 & 1) == 0)
          {
            v35 = v31 == v34;
            if (v31 == v34)
              v31 = 0;
            v33 |= v35;
            v36 = *(_QWORD *)(v28 + 8 * v31);
            if (v36 != -1)
            {
              v32 = __clz(__rbit64(~v36)) + (v31 << 6);
              goto LABEL_38;
            }
          }
          goto LABEL_41;
        }
        v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v38 + 64 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
        *(_QWORD *)(v28 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
        v37 = (_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v32);
        *v37 = v19;
        v37[1] = v20;
        *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v32) = v25;
        ++*(_QWORD *)(v38 + 16);
        result = swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
      }
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v11 >= v39)
    goto LABEL_39;
  v12 = *(_QWORD *)(v40 + 8 * v11);
  v13 = v8 + 1;
  if (v12)
    goto LABEL_22;
  v13 = v8 + 2;
  if (v8 + 2 >= v39)
    goto LABEL_39;
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
    goto LABEL_22;
  v13 = v8 + 3;
  if (v8 + 3 >= v39)
    goto LABEL_39;
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
    goto LABEL_22;
  v13 = v8 + 4;
  if (v8 + 4 >= v39)
    goto LABEL_39;
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
  {
LABEL_22:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
    goto LABEL_23;
  }
  v14 = v8 + 5;
  if (v8 + 5 >= v39)
  {
LABEL_39:
    sub_1BA6EBD18();
    return v38;
  }
  v12 = *(_QWORD *)(v40 + 8 * v14);
  if (v12)
  {
    v13 = v8 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v39)
      goto LABEL_39;
    v12 = *(_QWORD *)(v40 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t HeadlineServiceType.headlines(for:failIfAnyMissing:cachePolicy:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = FCCurrentQoSOrUtilityIfMain();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a2, a3, a4, v12, a5, a6);
}

uint64_t HeadlineServiceType.headline(for:purpose:)()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  FCCurrentQoSOrUtilityIfMain();
  v1 = HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();

  return v1;
}

_QWORD *HeadlineService.__allocating_init(tagService:coreConfigurationManager:cloudContext:paidAccessChecker:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  sub_1BA4CECCC(a1, (uint64_t)(v8 + 2));
  v8[7] = a2;
  v8[8] = a3;
  v8[9] = a4;
  return v8;
}

uint64_t sub_1BB5E6D08(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = MEMORY[0x1E0DEE9D8];
  v6 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 32;
    do
    {
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        v5 = swift_unknownObjectRetain();
        MEMORY[0x1BCCE36AC](v5);
        if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BB872E44();
        sub_1BB872E8C();
        sub_1BB872DCC();
      }
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

uint64_t sub_1BB5E6DFC(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  void *v31;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  v2 = (id *)(swift_bridgeObjectRetain() + 48);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    if (!*v2)
      goto LABEL_4;
    v4 = *(v2 - 2);
    v5 = *(v2 - 1);
    v6 = *v2;
    swift_unknownObjectRetain();
    v7 = v5;
    v8 = v6;
    v9 = objc_msgSend(v4, sel_sourceFeedID);
    if (v9)
      break;

    swift_unknownObjectRelease();
LABEL_4:
    v2 += 3;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  v10 = v9;
  v31 = v7;
  v11 = sub_1BB8729A0();
  v13 = v12;

  v14 = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = sub_1BA6E35A8(v11, v13);
  v18 = v3[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (!__OFADD__(v18, v19))
  {
    v21 = v16;
    if (v3[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) == 0)
          goto LABEL_16;
      }
      else
      {
        sub_1BB4CAF80();
        if ((v21 & 1) == 0)
          goto LABEL_16;
      }
    }
    else
    {
      sub_1BB4BC3E0(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_1BA6E35A8(v11, v13);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_24;
      v17 = v22;
      if ((v21 & 1) == 0)
      {
LABEL_16:
        v3[(v17 >> 6) + 8] |= 1 << v17;
        v26 = (uint64_t *)(v3[6] + 16 * v17);
        *v26 = v11;
        v26[1] = v13;
        *(_QWORD *)(v3[7] + 8 * v17) = v14;
        v27 = v3[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_23;
        v3[2] = v29;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      }
    }
    v24 = v3[7];
    v25 = 8 * v17;

    *(_QWORD *)(v24 + v25) = v14;
LABEL_18:

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BB874560();
  __break(1u);
  return result;
}

uint64_t HeadlineServiceType.headlines(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s8NewsFeed19HeadlineServiceTypePAAE9headlines3for7purpose13TeaFoundation7PromiseCySaySo19FCHeadlineProviding_pGGSaySSG_So18FCOperationPurposeatF_0(a1, *MEMORY[0x1E0D58698], a2, a3);
}

uint64_t HeadlineServiceType.headlines(for:failIfAnyMissing:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _s8NewsFeed19HeadlineServiceTypePAAE9headlines3for7purpose13TeaFoundation7PromiseCySaySo19FCHeadlineProviding_pGGSaySSG_So18FCOperationPurposeatF_0(a1, a3, a4, a5);
}

uint64_t HeadlineServiceType.headlines(for:failIfAnyMissing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  v8 = *MEMORY[0x1E0D58698];
  v9 = FCCurrentQoSOrUtilityIfMain();
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, 0, v7, v8, v9, a3, a4);

  return v10;
}

uint64_t HeadlineServiceType.headlines(for:failIfAnyMissing:cachePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *MEMORY[0x1E0D58698];
  v11 = FCCurrentQoSOrUtilityIfMain();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a1, a2, a3, v10, v11, a4, a5);
}

uint64_t HeadlineServiceType.headline(for:)()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  FCCurrentQoSOrUtilityIfMain();
  v1 = HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();

  return v1;
}

uint64_t HeadlineServiceType.headline(for:cachePolicy:purpose:)()
{
  FCCurrentQoSOrUtilityIfMain();
  return HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();
}

uint64_t HeadlineServiceType.headline(for:cachePolicy:)()
{
  FCCurrentQoSOrUtilityIfMain();
  return HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();
}

uint64_t HeadlineServiceType.headline(for:cachePolicy:qualityOfService:)()
{
  return HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();
}

uint64_t HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)()
{
  void *v0;
  uint64_t v1;

  sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB86EC14();
  v0 = (void *)sub_1BB86E854();
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3D4450);
  v1 = sub_1BB86E968();
  swift_release();

  return v1;
}

uint64_t sub_1BB5E73D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8);
  swift_bridgeObjectRetain();
  v17 = v16(v15, 1, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1BB5E74A8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BB873F30();
    if (result)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    sub_1BB5ED924();
    swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000014;
    *(_QWORD *)(v4 + 8) = 0x80000001BB993310;
    *(_BYTE *)(v4 + 16) = 1;
    return swift_willThrow();
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_8;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BCCE4630](0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_unknownObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    sub_1BA4C3E90(0, (unint64_t *)&unk_1ED3B08E0, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9E0();
  }
  __break(1u);
  return result;
}

uint64_t HeadlineServiceType.fetchHeadlines(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 16))(a1, *MEMORY[0x1E0D58698], a2);
}

uint64_t HeadlineServiceType.fetchHeadlines(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a4 + 24))(a1, a2, *MEMORY[0x1E0D58698], a3);
}

uint64_t HeadlineServiceType.fetchHeadlines(forTagID:maxCount:dateRange:requestType:includePaidArticles:cachedOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v10;

  v10 = *a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a9 + 32))(a1, a2, a3, a4, &v10, a6, a7, *MEMORY[0x1E0D58698], a8, a9);
}

uint64_t HeadlineServiceType.fetchHeadlines(forFeedID:maxCount:dateRange:fromFeedBin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  v15 = *MEMORY[0x1E0D58698];
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 40);
  swift_bridgeObjectRetain();
  v17 = v16(v14, a3, a4, a5, v15, a6, a7);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t HeadlineServiceType.fetchHeadlines(forFeedID:maxCount:dateRange:fromFeedBin:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 40);
  swift_bridgeObjectRetain();
  v18 = v17(v16, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t HeadlineServiceType.fetchHeadlines(for:feedPersonalizer:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void **v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = swift_bridgeObjectRetain();
  v11 = sub_1BB5E6D08(v10);
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_1BB5E6DFC(v12);
  v14 = objc_msgSend((id)objc_opt_self(), sel_mapTableWithKeyOptions_valueOptions_, 0, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v24 = v11;
    v25 = a3;
    v26 = a4;
    v27 = a5;
    swift_bridgeObjectRetain();
    v16 = (void **)(a1 + 48);
    do
    {
      v19 = *(v16 - 1);
      v20 = *v16;
      objc_opt_self();
      v21 = (void *)swift_dynamicCastObjCClass();
      if (v21)
        swift_unknownObjectRetain();
      v16 += 3;
      v17 = v20;
      swift_unknownObjectRetain();
      v18 = v19;
      objc_msgSend(v14, sel_setObject_forKey_, v18, v21);

      swift_unknownObjectRelease();
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    a5 = v27;
    a3 = v25;
    a4 = v26;
    v11 = v24;
  }
  swift_bridgeObjectRelease();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a5 + 64))(v11, v13, v14, a2, 0, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v22;
}

uint64_t HeadlineServiceType.fetchFeeds(forFeedIDs:maxCount:dateRange:fromFeedBin:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 48))(a1, a2, a3, a4, 0, a5, 1, a6, a7);
}

uint64_t HeadlineServiceType.cachedHeadline(for:)()
{
  uint64_t v0;
  uint64_t *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  v1 = (uint64_t *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(), sel_cachedOnlyCachePolicy);
  FCCurrentQoSOrUtilityIfMain();
  HeadlineServiceType.headline(for:cachePolicy:purpose:qualityOfService:)();

  swift_retain();
  v3 = (void *)sub_1BB86E854();
  sub_1BB86E974();
  swift_release();
  swift_release();
  swift_release();

  swift_beginAccess();
  v4 = *v1;
  swift_unknownObjectRetain();
  swift_release();
  return v4;
}

uint64_t sub_1BB5E7B38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t HeadlineService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t HeadlineService.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t HeadlineService.headlines(for:failIfAnyMissing:cachePolicy:purpose:qualityOfService:)(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86EA58();
  }
  else
  {
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86E9E0();
  }
}

void sub_1BB5E7CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  _QWORD aBlock[6];

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  v16 = *(void **)(a5 + 64);
  swift_retain();
  v17 = v16;
  sub_1BA57F420(a6);
  v18 = objc_allocWithZone(MEMORY[0x1E0D58948]);
  v19 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v20 = (void *)sub_1BB872D9C();
  v21 = objc_msgSend(v18, sel_initWithContext_articleIDs_ignoreCacheForArticleIDs_, v17, v19, v20);

  if (qword_1ED3D47F0 != -1)
    swift_once();
  v22 = (void *)qword_1ED476CE8;
  sub_1BA7AA598();
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1BB87A390;
  v24 = *(_QWORD *)(a6 + 16);
  v25 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v23 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v23 + 64) = v25;
  *(_QWORD *)(v23 + 32) = v24;
  v26 = v22;
  v27 = objc_msgSend(v21, sel_shortOperationDescription);
  if (v27)
  {
    v28 = v27;
    v29 = sub_1BB8729A0();
    v31 = v30;

    *(_QWORD *)(v23 + 96) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v23 + 104) = sub_1BA6A2D8C();
    *(_QWORD *)(v23 + 72) = v29;
    *(_QWORD *)(v23 + 80) = v31;
    v32 = sub_1BB87330C();
    sub_1BB86EF44("Fetching %lu headlines with operation %{public}@", 48, 2, &dword_1BA493000, v26, v32, v23);

    swift_bridgeObjectRelease();
    if (objc_msgSend(a7, sel_cachePolicy))
    {
      objc_msgSend(v21, sel_setOverrideArticleCachePolicy_, 1);
      objc_msgSend(v21, sel_setArticleCachePolicy_, objc_msgSend(a7, sel_cachePolicy));
      objc_msgSend(a7, sel_maximumCachedAge);
      objc_msgSend(v21, sel_setArticleMaximumCachedAge_);
    }
    objc_msgSend(v21, sel_setQualityOfService_, a8);
    v33 = v21;
    objc_msgSend(v33, sel_setRelativePriority_, FCInferRelativePriorityFromQualityOfService());

    objc_msgSend(v33, sel_setPurpose_, a9);
    objc_msgSend(v33, sel_setShouldFailOnMissingObjects_, a10 & 1);
    objc_msgSend(v33, sel_setCanSendFetchCompletionSynchronously_, 1);
    v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = a10 & 1;
    *(_QWORD *)(v34 + 24) = sub_1BB5EDD90;
    *(_QWORD *)(v34 + 32) = v15;
    *(_QWORD *)(v34 + 40) = a3;
    *(_QWORD *)(v34 + 48) = a4;
    aBlock[4] = sub_1BB5EDBEC;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BA573874;
    aBlock[3] = &block_descriptor_87;
    v35 = _Block_copy(aBlock);
    v36 = v33;
    swift_retain();
    swift_release();
    objc_msgSend(v36, sel_setFetchCompletionBlock_, v35);
    _Block_release(v35);

    if (objc_msgSend((id)objc_opt_self(), sel_isMainThread) && objc_msgSend(a7, sel_cachePolicy) != (id)3)
    {
      sub_1BB86E050();
      sub_1BB86E020();
      sub_1BB86E038();
      swift_release();
    }
    else
    {
      objc_msgSend(v36, sel_start);
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_1BB5E80DC(void *a1, char a2, void (*a3)(), uint64_t a4, void (*a5)(void))
{
  id v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;

  v9 = objc_msgSend(a1, sel_error);
  if (v9)
  {
    v20 = v9;
    v10 = (void *)sub_1BB86C478();
    v11 = objc_msgSend(v10, sel_fc_isUnknownItemError);

    if (v11 && (a2 & 1) == 0)
    {
      ((void (*)(_QWORD))a3)(MEMORY[0x1E0DEE9D8]);

      return;
    }
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v12 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1BB87CE70;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    v14 = v12;
    sub_1BB873E34();
    *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v13 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0xE000000000000000;
    sub_1BB86EF50();

    swift_bridgeObjectRelease();
    sub_1BB5ED924();
    v15 = (void *)swift_allocError();
    *(_QWORD *)v16 = v20;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v17 = v20;
    ((void (*)(void *))a5)(v15);

    goto LABEL_15;
  }
  if (objc_msgSend(a1, sel_fetchedObject))
  {
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      a3();
      swift_bridgeObjectRelease();
      return;
    }
  }
  if ((a2 & 1) != 0)
  {
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v18 = (id)qword_1ED476CE8;
    sub_1BB86EF50();

    sub_1BB5ED924();
    v15 = (void *)swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000018;
    *(_QWORD *)(v19 + 8) = 0x80000001BB9932C0;
    *(_BYTE *)(v19 + 16) = 1;
    a5();
LABEL_15:

    return;
  }
  ((void (*)(_QWORD))a3)(MEMORY[0x1E0DEE9D8]);
}

uint64_t HeadlineService.fetchHeadlines(from:purpose:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;

  sub_1BA4EFE00(0, &qword_1ED3B9870);
  sub_1BB86EC14();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  v5 = a2;
  v6 = (void *)sub_1BB86E854();
  sub_1BB5EDAF4(0, (unint64_t *)&qword_1ED39ED20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
  v7 = sub_1BB86E980();
  swift_release();
  swift_release();

  return v7;
}

uint64_t sub_1BB5E8528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    sub_1BB5EDA68();
    swift_allocObject();
    return sub_1BB86EA58();
  }
  else
  {
    sub_1BA8F41B4(MEMORY[0x1E0DEE9D8]);
    sub_1BB5EDA68();
    swift_allocObject();
    return sub_1BB86E9E0();
  }
}

uint64_t HeadlineService.fetchHeadlines(for:purpose:)()
{
  sub_1BA8CB71C();
  swift_allocObject();
  return sub_1BB86EA58();
}

uint64_t sub_1BB5E863C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  _QWORD *v28;
  void *v29;
  _QWORD aBlock[6];

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = qword_1ED3D47F0;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = (void *)qword_1ED476CE8;
  sub_1BA7AA598();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v19 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v19 + 32) = a5;
  *(_QWORD *)(v19 + 40) = a6;
  v20 = v18;
  swift_bridgeObjectRetain();
  v21 = sub_1BB87330C();
  sub_1BB86EF44("Fetching headlines for issue identifier: %@", 43, 2, &dword_1BA493000, v20, v21, v19);

  swift_bridgeObjectRelease();
  v22 = *(void **)(a7 + 64);
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v23 + 32) = a5;
  *(_QWORD *)(v23 + 40) = a6;
  v24 = objc_allocWithZone(MEMORY[0x1E0D58C30]);
  swift_bridgeObjectRetain();
  v25 = v22;
  v26 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v24, sel_initWithContext_issueIDs_, v25, v26);

  objc_msgSend(v27, sel_setPurpose_, a8);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = sub_1BB5EDD90;
  v28[3] = v16;
  v28[4] = a3;
  v28[5] = a4;
  aBlock[4] = sub_1BB5EDA50;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BB5E8BB8;
  aBlock[3] = &block_descriptor_68;
  v29 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v27, sel_setFetchCompletionHandler_, v29);
  _Block_release(v29);
  sub_1BB86E050();
  sub_1BB86E020();
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    sub_1BB86E038();
  else
    objc_msgSend(v27, sel_start);

  return swift_release();
}

void sub_1BB5E890C(uint64_t a1, id a2, void (*a3)(void), uint64_t a4, void (*a5)(void))
{
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  if (a1 && sub_1BA9BEC3C(a1))
  {
    a3();
    swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    v8 = a2;
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v9 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1BB87CE70;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    v11 = v9;
    sub_1BB873E34();
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v10 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    sub_1BB86EF50();

    swift_bridgeObjectRelease();
    sub_1BB5ED924();
    v12 = (void *)swift_allocError();
    *(_QWORD *)v13 = a2;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v14 = a2;
    ((void (*)(void *))a5)(v12);

  }
  else
  {
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v15 = (id)qword_1ED476CE8;
    sub_1BB86EF50();

    sub_1BB5ED924();
    v16 = (void *)swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000030;
    *(_QWORD *)(v17 + 8) = 0x80000001BB992FF0;
    *(_BYTE *)(v17 + 16) = 1;
    a5();

  }
}

uint64_t sub_1BB5E8BB8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3BA820);
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BA865AD4(&qword_1EF2C89F0, (unint64_t *)&qword_1ED3BA820);
    v4 = sub_1BB87276C();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t HeadlineService.fetchHeadlines(forTagID:maxCount:dateRange:requestType:includePaidArticles:cachedOnly:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char *a5, char a6, char a7, void *a8)
{
  uint64_t v8;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  char v26;

  if (a3 < 1)
  {
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86E9E0();
  }
  else
  {
    v26 = *a5;
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v14 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1BB87CE70;
    *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v15 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v15 + 32) = a1;
    *(_QWORD *)(v15 + 40) = a2;
    v16 = v14;
    swift_bridgeObjectRetain();
    v17 = sub_1BB87330C();
    sub_1BB86EF44("Fetching headlines for tag identifier: %@", 41, 2, &dword_1BA493000, v16, v17, v15);

    v18 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v18);
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3B9630, (unint64_t *)&qword_1ED3B9800, (uint64_t)&protocolRef_FCTagProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BB86EC14();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a1;
    *(_QWORD *)(v20 + 24) = a2;
    *(_BYTE *)(v20 + 32) = v26;
    *(_QWORD *)(v20 + 40) = v8;
    *(_QWORD *)(v20 + 48) = a3;
    *(_QWORD *)(v20 + 56) = a4;
    *(_BYTE *)(v20 + 64) = a6 & 1;
    *(_BYTE *)(v20 + 65) = a7 & 1;
    *(_QWORD *)(v20 + 72) = a8;
    swift_bridgeObjectRetain();
    swift_retain();
    v21 = a4;
    v22 = a8;
    v23 = (void *)sub_1BB86E854();
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, v19);
    v24 = sub_1BB86E980();
    swift_release();
    swift_release();

  }
  return v24;
}

uint64_t sub_1BB5E8F34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v5 = a1[5];
  v6 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v5);
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v9 = v8(v7, v5, v6);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1BB5E8FF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void *a8, char a9, char a10, void *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v14 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BB873F30();
    if (result)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1BB873CB4();
    swift_bridgeObjectRelease();
    sub_1BB872AFC((_QWORD *)0xD00000000000002CLL);
    v28 = 0xD00000000000002CLL;
    sub_1BB5ED924();
    swift_allocError();
    *(_QWORD *)v30 = 0xD00000000000002CLL;
    *(_QWORD *)(v30 + 8) = 0x80000001BB992F60;
    *(_BYTE *)(v30 + 16) = 1;
    swift_willThrow();
    return v28;
  }
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v15)
    goto LABEL_12;
LABEL_3:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v17 = MEMORY[0x1BCCE4630](0, v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v17 = *(_QWORD *)(v14 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  if ((a5 & 1) == 0)
  {
    sub_1BA4EFE00(0, &qword_1ED3B9870);
    sub_1BB86EC14();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = a7;
    *(_QWORD *)(v18 + 32) = a8;
    *(_BYTE *)(v18 + 40) = a9 & 1;
    *(_BYTE *)(v18 + 41) = a10 & 1;
    *(_QWORD *)(v18 + 48) = a11;
    swift_unknownObjectRetain();
    v19 = a8;
    v20 = a11;
    v21 = (void *)sub_1BB86E854();
    sub_1BB4CDFE4();
    type metadata accessor for HeadlineService();
    sub_1BB86E980();
    swift_release();
    swift_release();

    *(_QWORD *)(swift_allocObject() + 16) = v20;
    v22 = v20;
    v23 = (void *)sub_1BB86E854();
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v24 = sub_1BB86E980();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();

    return v24;
  }
  swift_getObjectType();
  v25 = FCTagProviding.topKArticleListID.getter();
  if (v26)
  {
    MEMORY[0x1E0C80A78](v25);
    sub_1BB5EDAF4(0, (unint64_t *)&qword_1ED39ED20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
    sub_1BB86EC14();
    swift_bridgeObjectRelease();
    v27 = (void *)sub_1BB86E854();
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v28 = sub_1BB86E968();
    swift_unknownObjectRelease();
    swift_release();

  }
  else
  {
    sub_1BB873CB4();
    sub_1BB872AFC("feed items with error: %@");
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9800);
    sub_1BB873E34();
    v28 = 0xE000000000000000;
    sub_1BB5ED924();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_BYTE *)(v29 + 16) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  return v28;
}

uint64_t HeadlineService.fetchFeed(for:maxCount:dateRange:coreConfiguration:includePaidArticles:cachedOnly:purpose:filterOptions:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  if (qword_1ED3D47F0 != -1)
    swift_once();
  v11 = (void *)qword_1ED476CE8;
  sub_1BA7AA598();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BB87CE70;
  sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3B9800);
  v13 = v11;
  sub_1BB873E34();
  *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0xE000000000000000;
  v14 = sub_1BB87330C();
  sub_1BB86EF44("Fetching feed item for tag: %@.", 31, 2, &dword_1BA493000, v13, v14, v12);

  swift_bridgeObjectRelease();
  v15 = objc_msgSend(a1, sel_freeFeedIDForBin_, 3);
  if (v15)
  {
    v38 = sub_1BB8729A0();
    v17 = v16;
  }
  else
  {
    v38 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58B60]), sel_init);
  objc_msgSend(v18, sel_setFeedID_, v15);

  v19 = (void *)objc_opt_self();
  v20 = objc_msgSend(v19, sel_feedRangeFromDateRange_, a3);
  objc_msgSend(v18, sel_setFeedRange_, v20);

  if ((a2 & 0x8000000000000000) == 0)
  {
    objc_msgSend(v18, sel_setMaxCount_, a2);
    v39 = a6;
    objc_msgSend(v18, sel_setCachedOnly_, a6 & 1);
    sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3BA020);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1BB8856E0;
    *(_QWORD *)(v21 + 32) = v18;
    v41 = v21;
    sub_1BB872DCC();
    v22 = v41;
    if ((a5 & 1) == 0)
    {
      v28 = v18;
      v29 = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v23 = v18;
    v24 = objc_msgSend(a1, sel_paidFeedIDForBin_, 3);
    if (v24)
    {
      v25 = sub_1BB8729A0();
      v27 = v26;
    }
    else
    {
      v25 = 0;
      v27 = 0;
    }
    v30 = objc_msgSend(a1, sel_asChannel);
    if (v30)
    {
      if ((objc_msgSend(*(id *)(v40 + 72), sel_canGetSubscriptionToChannel_, v30) & 1) != 0)
      {
        if (v27)
        {
          if (v17)
          {
            if (v25 == v38 && v27 == v17)
            {
              swift_unknownObjectRelease();

              swift_bridgeObjectRelease();
LABEL_21:
              v29 = swift_bridgeObjectRelease();
              goto LABEL_22;
            }
            v35 = sub_1BB874398();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) != 0)
              goto LABEL_31;
LABEL_27:
            v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58B60]), sel_init);
            objc_msgSend(v32, sel_setFeedID_, v24);

            v33 = objc_msgSend(v19, sel_feedRangeFromDateRange_, a3);
            objc_msgSend(v32, sel_setFeedRange_, v33);

            objc_msgSend(v32, sel_setMaxCount_, a2);
            objc_msgSend(v32, sel_setCachedOnly_, v39 & 1);
            v34 = v32;
            MEMORY[0x1BCCE36AC]();
            if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1BB872E44();
            sub_1BB872E8C();
            sub_1BB872DCC();

            v29 = swift_unknownObjectRelease();
            v22 = v41;
LABEL_22:
            if (v22 >> 62)
            {
              swift_bridgeObjectRetain();
              v36 = sub_1BB873F30();
              v29 = swift_bridgeObjectRelease();
              if (v36)
                goto LABEL_24;
            }
            else if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_24:
              MEMORY[0x1E0C80A78](v29);
              sub_1BA4B07F0(0, &qword_1ED3AFBF0, (uint64_t (*)(uint64_t))sub_1BB4CDFE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
              swift_allocObject();
              v31 = sub_1BB86EA58();
              swift_bridgeObjectRelease();

              return v31;
            }
            sub_1BA4B07F0(0, &qword_1ED3AFBF0, (uint64_t (*)(uint64_t))sub_1BB4CDFE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
            swift_allocObject();
            v31 = sub_1BB86E9E0();
            swift_bridgeObjectRelease();

            return v31;
          }
        }
        else if (!v17)
        {
LABEL_31:
          swift_unknownObjectRelease();

          goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  result = sub_1BB873EA0();
  __break(1u);
  return result;
}

uint64_t sub_1BB5E9ABC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;

  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3B9FA0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BB87CE70;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  sub_1BA4EFE00(0, &qword_1ED3B9870);
  swift_bridgeObjectRetain();
  sub_1BB86EC14();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = a4;
  swift_bridgeObjectRetain();
  v9 = a4;
  v10 = (void *)sub_1BB86E854();
  sub_1BB5EDAF4(0, (unint64_t *)&qword_1ED39ED20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
  type metadata accessor for HeadlineService();
  v11 = sub_1BB86E980();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v11;
}

uint64_t sub_1BB5E9C10(uint64_t *a1)
{
  sub_1BA9BEC3C(*a1);
  sub_1BA8CB71C();
  swift_allocObject();
  return sub_1BB86E9E0();
}

uint64_t HeadlineService.fetchHeadlines(forFeedItems:feedContextByFeedID:feedItemScoreProfiles:feedPersonalizer:configuration:purpose:)(unint64_t a1)
{
  uint64_t v2;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1BB873F30();
    a1 = swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    MEMORY[0x1E0C80A78](a1);
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86EA58();
  }
  sub_1BA8CB71C();
  swift_allocObject();
  return sub_1BB86E9E0();
}

void sub_1BB5E9D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  _QWORD aBlock[6];

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v19 = objc_allocWithZone(MEMORY[0x1E0D58B38]);
  swift_retain();
  v20 = objc_msgSend(v19, sel_init);
  objc_msgSend(v20, sel_setPurpose_, a5);
  if (a6)
  {
    v21 = a6;
  }
  else
  {
    v21 = objc_msgSend(objc_msgSend(*(id *)(a7 + 64), sel_appConfigurationManager), sel_possiblyUnfetchedAppConfiguration);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  objc_msgSend(v20, sel_setConfiguration_, v21);
  swift_unknownObjectRelease();
  objc_msgSend(v20, sel_setContext_, *(_QWORD *)(a7 + 64));
  objc_msgSend(v20, sel_setPersonalizer_, a8);
  sub_1BA49A224(0, &qword_1ED39DA60);
  v22 = (void *)sub_1BB872760();
  objc_msgSend(v20, sel_setFeedContextByFeedID_, v22);

  sub_1BA49A224(0, &qword_1ED3B9770);
  v23 = (void *)sub_1BB872D9C();
  objc_msgSend(v20, sel_setFeedItems_, v23);

  objc_msgSend(v20, sel_setFeedItemScoreProfiles_, a11);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = sub_1BA573F08;
  v24[3] = v18;
  v24[4] = a3;
  v24[5] = a4;
  aBlock[4] = sub_1BB5ED918;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BB5EA0D8;
  aBlock[3] = &block_descriptor_90;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v20, sel_setHeadlinesCompletionHandler_, v25);
  _Block_release(v25);
  objc_msgSend(v20, sel_start);

}

void sub_1BB5EA048(uint64_t a1, id a2, void (*a3)(uint64_t, id), uint64_t a4, void (*a5)(uint64_t))
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    a3(a1, a2);
  }
  else
  {
    v6 = a2;
    if (a2)
    {
      v7 = a2;
      v8 = (uint64_t)v6;
    }
    else
    {
      sub_1BB5ED924();
      v8 = swift_allocError();
      v6 = (id)v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 16) = 2;
    }
    a5(v8);

  }
}

uint64_t sub_1BB5EA0D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3D4450);
    v4 = sub_1BB872DB4();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t HeadlineService.fetchFeeds(forFeedIDs:maxCount:dateRange:fromFeedBin:edgeCacheHint:purpose:filterOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  return sub_1BB5ED49C(a1, a2, a3, a5, a6, a7);
}

id sub_1BB5EA174(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 56), sel_configuration);
  if (result)
  {
    sub_1BA4C3E90(0, (unint64_t *)&unk_1ED3B08D0, &qword_1ED3B9870, (uint64_t)&protocolRef_FCCoreConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return (id)sub_1BB86E9E0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BB5EA200(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a4;
  v8 = sub_1BB5ECD4C(a3, (uint64_t)v7, a5);

  if (v8 >> 62)
  {
    v9 = sub_1BB873F30();
    if (v9)
      goto LABEL_3;
LABEL_5:
    sub_1BA4B07F0(v9, &qword_1ED3AFBF0, (uint64_t (*)(uint64_t))sub_1BB4CDFE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    v10 = sub_1BB86E9E0();
    swift_bridgeObjectRelease();
    return v10;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_5;
LABEL_3:
  MEMORY[0x1E0C80A78](v9);
  sub_1BA4B07F0(0, &qword_1ED3AFBF0, (uint64_t (*)(uint64_t))sub_1BB4CDFE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
  swift_allocObject();
  v10 = sub_1BB86EA58();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t HeadlineService.fetchHeadlines(forFeedIDs:maxCount:dateRange:fromFeedBin:purpose:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v6;
  void *v7;
  uint64_t v8;

  sub_1BB5ED49C(a1, a2, a3, 0, a5, 1);
  *(_QWORD *)(swift_allocObject() + 16) = a5;
  v6 = a5;
  v7 = (void *)sub_1BB86E854();
  sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v8 = sub_1BB86E980();
  swift_release();
  swift_release();

  return v8;
}

id sub_1BB5EA458(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = v3;
  v7 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_16;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    if (!v8)
    {
LABEL_14:
      v20 = sub_1BB5ED394(v9);
      swift_bridgeObjectRelease();
      return (id)v20;
    }
    v25 = MEMORY[0x1E0DEE9D8];
    result = (id)sub_1BA7447E8(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v21 = a3;
    v22 = a2;
    v11 = 0;
    v9 = v25;
    v23 = v4;
    v24 = v7 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v24)
        v12 = (id)MEMORY[0x1BCCE4630](v11, v7);
      else
        v12 = *(id *)(v7 + 8 * v11 + 32);
      v13 = v12;
      a3 = v7;
      result = objc_msgSend(v12, sel_articleID, v21, v22, v23);
      if (!result)
        goto LABEL_18;
      v14 = result;
      v15 = sub_1BB8729A0();
      a2 = v16;

      v18 = *(_QWORD *)(v25 + 16);
      v17 = *(_QWORD *)(v25 + 24);
      v4 = v18 + 1;
      if (v18 >= v17 >> 1)
        sub_1BA7447E8(v17 > 1, v18 + 1, 1);
      ++v11;
      *(_QWORD *)(v25 + 16) = v4;
      v19 = v25 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v15;
      *(_QWORD *)(v19 + 40) = a2;
      v7 = a3;
      if (v8 == v11)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v8 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1BB5EA610(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86EA58();
  }
  else
  {
    sub_1BA8CB71C();
    swift_allocObject();
    return sub_1BB86E9E0();
  }
}

uint64_t sub_1BB5EA6D4(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;

  sub_1BA4EFE00(0, &qword_1ED3B9870);
  sub_1BB86EC14();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  v5 = a2;
  v6 = (void *)sub_1BB86E854();
  sub_1BB5EDAF4(0, (unint64_t *)&qword_1ED39ED20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
  v7 = sub_1BB86E980();
  swift_release();
  swift_release();

  return v7;
}

uint64_t sub_1BB5EA7C4()
{
  sub_1BA8CB71C();
  swift_allocObject();
  return sub_1BB86EA58();
}

uint64_t sub_1BB5EA818(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char *a5, char a6, char a7, void *a8)
{
  return HeadlineService.fetchHeadlines(forTagID:maxCount:dateRange:requestType:includePaidArticles:cachedOnly:purpose:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1BB5EA838(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v6;
  void *v7;
  uint64_t v8;

  sub_1BB5ED49C(a1, a2, a3, 0, a5, 1);
  *(_QWORD *)(swift_allocObject() + 16) = a5;
  v6 = a5;
  v7 = (void *)sub_1BB86E854();
  sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v8 = sub_1BB86E980();
  swift_release();
  swift_release();

  return v8;
}

uint64_t sub_1BB5EA90C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  return sub_1BB5ED49C(a1, a2, a3, a5, a6, a7);
}

uint64_t sub_1BB5EA938(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  return HeadlineService.fetchFeedHeadlines(forTags:maxCount:dateRange:fromFeedBin:cachePolicy:purpose:log:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t HeadlineService.fetchFeedHeadlines(forTags:maxCount:dateRange:fromFeedBin:cachePolicy:purpose:log:)(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  double *v37;
  uint64_t *v38;
  double *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  double v60;
  uint64_t v61;
  _QWORD *v66;

  if (a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    v8 = sub_1BB873F30();
    if (v8)
    {
LABEL_3:
      v9 = 0;
      v66 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      while (2)
      {
        v10 = v9;
        while (1)
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            v11 = (void *)MEMORY[0x1BCCE4630](v10, a1);
            v9 = v10 + 1;
            if (__OFADD__(v10, 1))
              goto LABEL_25;
          }
          else
          {
            v11 = *(void **)(a1 + 8 * v10 + 32);
            swift_unknownObjectRetain();
            v9 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
          }
          v12 = objc_msgSend(v11, sel_feedIDForBin_, a4, v59);
          if (v12)
            break;
          sub_1BA7AA598();
          v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_1BB87CE70;
          v14 = objc_msgSend(v11, sel_identifier);
          v15 = sub_1BB8729A0();
          v17 = v16;

          *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v13 + 64) = sub_1BA6A2D8C();
          *(_QWORD *)(v13 + 32) = v15;
          *(_QWORD *)(v13 + 40) = v17;
          v18 = sub_1BB87330C();
          sub_1BB86EF44("Headline service could not find feed identifier for quality feed bin; tag feed fetch %{public}@",
            95,
            2,
            &dword_1BA493000,
            a7,
            v18,
            v13);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          ++v10;
          if (v9 == v8)
            goto LABEL_28;
        }
        v19 = v12;
        v20 = sub_1BB8729A0();
        v60 = v21;
        v61 = v20;

        v22 = objc_msgSend(v11, sel_identifier);
        v23 = sub_1BB8729A0();
        v25 = v24;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v59 = v23;
        v27 = v23;
        v28 = v25;
        v30 = sub_1BA6E35A8(v27, v25);
        v31 = v66[2];
        v32 = (v29 & 1) == 0;
        v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
        }
        else
        {
          v34 = v29;
          if (v66[3] >= v33)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1BB4C216C();
          }
          else
          {
            sub_1BB4AE750(v33, isUniquelyReferenced_nonNull_native);
            v35 = sub_1BA6E35A8(v59, v28);
            if ((v34 & 1) != (v36 & 1))
            {
LABEL_34:
              result = sub_1BB874560();
              __break(1u);
              return result;
            }
            v30 = v35;
          }
          if ((v34 & 1) != 0)
          {
            v37 = (double *)(v66[7] + 16 * v30);
            swift_bridgeObjectRelease();
            *(_QWORD *)v37 = v61;
            v37[1] = v60;
            goto LABEL_23;
          }
          v66[(v30 >> 6) + 8] |= 1 << v30;
          v38 = (uint64_t *)(v66[6] + 16 * v30);
          *v38 = v59;
          v38[1] = v28;
          v39 = (double *)(v66[7] + 16 * v30);
          *(_QWORD *)v39 = v61;
          v39[1] = v60;
          v40 = v66[2];
          v41 = __OFADD__(v40, 1);
          v42 = v40 + 1;
          if (!v41)
          {
            v66[2] = v42;
            swift_bridgeObjectRetain();
LABEL_23:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v9 != v8)
              continue;
            goto LABEL_28;
          }
        }
        break;
      }
      __break(1u);
      goto LABEL_34;
    }
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
  }
  v66 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_28:
  swift_bridgeObjectRelease();
  sub_1BA7AA598();
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1BB87FC80;
  v44 = MEMORY[0x1E0DEB418];
  v45 = MEMORY[0x1E0DEB490];
  v46 = v66[2];
  *(_QWORD *)(v43 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v43 + 64) = v45;
  *(_QWORD *)(v43 + 32) = v46;
  objc_msgSend(a3, sel_absoluteTimeInterval);
  v47 = MEMORY[0x1E0DEB100];
  *(_QWORD *)(v43 + 96) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v43 + 104) = v47;
  *(_QWORD *)(v43 + 72) = v48;
  *(_QWORD *)(v43 + 136) = v44;
  *(_QWORD *)(v43 + 144) = v45;
  *(_QWORD *)(v43 + 112) = a2;
  sub_1BB87330C();
  sub_1BB86EF44("Headline service will fetch %ld tag feeds with fetch window %f and max count %ld", v59, v60, v61);
  v49 = swift_bridgeObjectRelease();
  if (v66[2])
  {
    MEMORY[0x1E0C80A78](v49);
    v51 = v50;
    sub_1BB4CDFE4();
    sub_1BB86EC14();
    v52 = (void *)sub_1BB86E854();
    sub_1BB5ED638();
    sub_1BB86EA94();
    swift_release();

    v53 = (_QWORD *)swift_allocObject();
    v53[2] = a5;
    v53[3] = a6;
    v53[4] = v51;
    v54 = a5;
    v55 = a6;
    v56 = (void *)sub_1BB86E854();
    sub_1BA8C9E2C();
    v57 = sub_1BB86E980();
    swift_release();
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BA8F28DC(MEMORY[0x1E0DEE9D8]);
    sub_1BA4B07F0(0, &qword_1ED3C4870, (uint64_t (*)(uint64_t))sub_1BA8C9E2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9E0();
  }
  return v57;
}

uint64_t sub_1BB5EAEF8(unint64_t a1)
{
  return HeadlineService.fetchHeadlines(forFeedItems:feedContextByFeedID:feedItemScoreProfiles:feedPersonalizer:configuration:purpose:)(a1);
}

uint64_t sub_1BB5EAF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  _QWORD aBlock[6];

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = qword_1ED3D47F0;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v16 = (void *)qword_1ED476CE8;
  sub_1BA7AA598();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1BB87CE70;
  v18 = v16;
  v19 = MEMORY[0x1E0DEA968];
  v20 = MEMORY[0x1BCCE36DC](a5, MEMORY[0x1E0DEA968]);
  v22 = v21;
  *(_QWORD *)(v17 + 56) = v19;
  *(_QWORD *)(v17 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  v23 = sub_1BB87330C();
  sub_1BB86EF44("Fetching article list headlines for article list IDs: %@.", 57, 2, &dword_1BA493000, v18, v23, v17);

  swift_bridgeObjectRelease();
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58C98]), sel_init);
  v25 = (void *)sub_1BB872D9C();
  objc_msgSend(v24, sel_setArticleListIDs_, v25);

  objc_msgSend(v24, sel_setContext_, *(_QWORD *)(a6 + 64));
  objc_msgSend(v24, sel_setConfiguration_, a7);
  objc_msgSend(v24, sel_setPurpose_, a8);
  v26 = objc_msgSend((id)objc_opt_self(), sel_ignoreCacheCachePolicy);
  objc_msgSend(v24, sel_setCachePolicyForArticleLists_, v26);

  v27 = (_QWORD *)swift_allocObject();
  v27[2] = sub_1BA573ED8;
  v27[3] = v14;
  v27[4] = a3;
  v27[5] = a4;
  aBlock[4] = sub_1BB5EDAD0;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BB5EB888;
  aBlock[3] = &block_descriptor_77_0;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v24, sel_setHeadlinesCompletionHandler_, v28);
  _Block_release(v28);
  sub_1BB86E050();
  sub_1BB86E020();
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    sub_1BB86E038();
  else
    objc_msgSend(v24, sel_start);

  return swift_release();
}

void sub_1BB5EB208(uint64_t a1, uint64_t a2, int a3, id a4, void (*a5)(_QWORD), uint64_t a6, void (*a7)(void))
{
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(_QWORD);
  uint64_t v40;

  if (a1 && a2)
  {
    MEMORY[0x1E0C80A78](a1);
    v18 = sub_1BB5ECF10(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BB5EDADC);
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v19 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1BB87CE70;
    sub_1BA4B07F0(0, &qword_1ED3A0920, (uint64_t (*)(uint64_t))sub_1BAC88080, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v22 = v21;
    v23 = v19;
    v24 = MEMORY[0x1BCCE36DC](v18, v22);
    v26 = v25;
    *(_QWORD *)(v20 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v20 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v20 + 32) = v24;
    *(_QWORD *)(v20 + 40) = v26;
    v27 = sub_1BB87330C();
    sub_1BB86EF44("Fetched article list headlines: %@.", 35, 2, &dword_1BA493000, v23, v27, v20);

    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v18 + 16);
    if (v28)
    {
      v39 = a5;
      swift_bridgeObjectRetain();
      v29 = (uint64_t *)(v18 + 40);
      v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v32 = (void *)*(v29 - 1);
        if (v32)
        {
          v33 = *v29;
          v34 = v32;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = sub_1BB393C78(0, v30[2] + 1, 1, v30);
          v36 = v30[2];
          v35 = v30[3];
          if (v36 >= v35 >> 1)
            v30 = sub_1BB393C78((_QWORD *)(v35 > 1), v36 + 1, 1, v30);
          v30[2] = v36 + 1;
          v31 = &v30[2 * v36];
          v31[4] = v34;
          v31[5] = v33;
        }
        v29 += 2;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      a5 = v39;
    }
    else
    {
      v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    if (v30[2])
    {
      sub_1BB5EDAF4(0, (unint64_t *)&qword_1ED3A0960, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECD58]);
      v37 = sub_1BB873F6C();
    }
    else
    {
      v37 = MEMORY[0x1E0DEE9E0];
    }
    v40 = v37;
    v38 = (_QWORD *)swift_bridgeObjectRetain();
    sub_1BB5EC9A0(v38, 1, &v40);
    swift_bridgeObjectRelease();
    a5(v40);
    swift_release();
  }
  else if (a4)
  {
    v11 = a4;
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v12 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1BB87CE70;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    v14 = v12;
    sub_1BB873E34();
    *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v13 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0xE000000000000000;
    sub_1BB86EF50();

    swift_bridgeObjectRelease();
    ((void (*)(id))a7)(a4);

  }
  else
  {
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v15 = (id)qword_1ED476CE8;
    sub_1BB86EF50();

    sub_1BB5ED924();
    v16 = (void *)swift_allocError();
    *(_QWORD *)v17 = 0xD00000000000004CLL;
    *(_QWORD *)(v17 + 8) = 0x80000001BB993130;
    *(_BYTE *)(v17 + 16) = 1;
    a7();

  }
}

id sub_1BB5EB6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  char v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v7 = sub_1BA6E35A8(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1BB873CB4();
    sub_1BB872AFC("Duplicate values for key: '");
    sub_1BB872AFC(v10);
    sub_1BB872AFC(v11);
    sub_1BA49A224(0, &qword_1ED39ECF0);
    sub_1BB872778();
    sub_1BB872AFC(v12);
    swift_bridgeObjectRelease();
    v9 = 0;
    sub_1BB5ED924();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0xE000000000000000;
    *(_BYTE *)(v13 + 16) = 1;
    swift_willThrow();
    return v9;
  }
  v9 = *(id *)(*(_QWORD *)(a4 + 56) + 8 * v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t sub_1BB5EB888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, void *);
  id v10;

  v8 = a2;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = sub_1BB87276C();
  }
  if (a3)
  {
    sub_1BA49A224(0, &qword_1ED39ECF0);
    a3 = sub_1BB87276C();
  }
  if (a4)
  {
    sub_1BA4EFE00(0, (unint64_t *)&qword_1ED3D4450);
    a4 = sub_1BB87276C();
  }
  swift_retain();
  v10 = a5;
  v9(v8, a3, a4, a5);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BB5EB9D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  _QWORD *v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  v10 = sub_1BA85CEF0(a2);
  swift_bridgeObjectRelease();
  v11 = sub_1BB5ED49C((uint64_t)v10, a3, a4, 0, a6, 1);
  swift_release();
  return v11;
}

void sub_1BB5EBA6C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_identifier);
  v4 = sub_1BB8729A0();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1BB5EBAD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;

  v5 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain_n();
    v6 = sub_1BB873F30();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v48 = v5 & 0xC000000000000001;
      v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      v8 = 4;
      v46 = v6;
      v47 = v5;
      while (1)
      {
        if (v48)
          v11 = (id)MEMORY[0x1BCCE4630](v8 - 4, v5);
        else
          v11 = *(id *)(v5 + 8 * v8);
        v12 = v11;
        v10 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v13 = objc_msgSend(v11, sel_identifier);
        v14 = sub_1BB8729A0();
        v16 = v15;

        v17 = objc_msgSend(v12, sel_feedID);
        if (!v17)
        {
          v30 = v14;
          v31 = v5;
          swift_bridgeObjectRetain();
          v32 = sub_1BA6E35A8(v30, v16);
          v34 = v33;
          swift_bridgeObjectRelease();
          if ((v34 & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1BB4C216C();
            swift_bridgeObjectRelease();
            sub_1BAF0DDEC(v32, (uint64_t)v7);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {

          }
          swift_bridgeObjectRelease();
          v5 = v31;
          goto LABEL_6;
        }
        v18 = v17;
        v49 = v12;
        v19 = sub_1BB8729A0();
        v50 = v20;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v5 = v14;
        v23 = sub_1BA6E35A8(v14, v16);
        v24 = v7[2];
        v25 = (v22 & 1) == 0;
        v26 = v24 + v25;
        if (__OFADD__(v24, v25))
          goto LABEL_30;
        v27 = v22;
        if (v7[3] >= v26)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v22 & 1) == 0)
              goto LABEL_23;
          }
          else
          {
            sub_1BB4C216C();
            if ((v27 & 1) == 0)
              goto LABEL_23;
          }
        }
        else
        {
          sub_1BB4AE750(v26, isUniquelyReferenced_nonNull_native);
          v28 = sub_1BA6E35A8(v14, v16);
          if ((v27 & 1) != (v29 & 1))
          {
            result = sub_1BB874560();
            __break(1u);
            return result;
          }
          v23 = v28;
          if ((v27 & 1) == 0)
          {
LABEL_23:
            v7[(v23 >> 6) + 8] |= 1 << v23;
            v35 = (uint64_t *)(v7[6] + 16 * v23);
            *v35 = v14;
            v35[1] = v16;
            v36 = (uint64_t *)(v7[7] + 16 * v23);
            *v36 = v19;
            v36[1] = v50;
            v37 = v7[2];
            v38 = __OFADD__(v37, 1);
            v39 = v37 + 1;
            if (v38)
              goto LABEL_31;
            v7[2] = v39;
            swift_bridgeObjectRetain();
            goto LABEL_5;
          }
        }
        v9 = (uint64_t *)(v7[7] + 16 * v23);
        swift_bridgeObjectRelease();
        *v9 = v19;
        v9[1] = v50;
LABEL_5:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v46;
        v5 = v47;
        v10 = v8 - 3;
LABEL_6:
        ++v8;
        if (v10 == v6)
          goto LABEL_34;
      }
    }
  }
  v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_34:
  v40 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v40);
  sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB86EC14();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = v7;
  *(_QWORD *)(v41 + 24) = a5;
  swift_bridgeObjectRetain();
  v42 = (void *)sub_1BB86E854();
  sub_1BA8C9E2C();
  v43 = sub_1BB86E974();
  swift_release();
  swift_release();

  return v43;
}

uint64_t sub_1BB5EBF20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v3 = sub_1BA85C6FC(a2);
  v4 = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 16))
  {
    MEMORY[0x1E0C80A78](v4);
    sub_1BA8CB71C();
    swift_allocObject();
    v5 = sub_1BB86EA58();
  }
  else
  {
    sub_1BA8CB71C();
    swift_allocObject();
    v5 = sub_1BB86E9E0();
  }
  swift_release();
  return v5;
}

uint64_t sub_1BB5EC03C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1BA4C3E90(0, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BB5ED7CC();
  v6 = sub_1BB872BD4();
  v4 = sub_1BB5E683C(a1, &v6);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1BB5EC10C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = objc_msgSend(*a1, sel_identifier);
  v6 = sub_1BB8729A0();
  v8 = v7;

  if (*(_QWORD *)(a2 + 16) && (v9 = sub_1BA6E35A8(v6, v8), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v9);
    v13 = *v11;
    v12 = v11[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = 0;
    v12 = 0xE000000000000000;
  }
  result = swift_bridgeObjectRelease();
  *a3 = v13;
  a3[1] = v12;
  return result;
}

void sub_1BB5EC1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD aBlock[6];

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = qword_1ED3D47F0;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = (void *)qword_1ED476CE8;
  sub_1BA7AA598();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BB87CE70;
  v20 = sub_1BA49A224(0, &qword_1ED3B0408);
  v21 = v18;
  v22 = MEMORY[0x1BCCE36DC](a5, v20);
  v24 = v23;
  *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v19 + 64) = sub_1BA6A2D8C();
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v24;
  v25 = sub_1BB87330C();
  sub_1BB86EF44("Fetching feed items for requests: %@.", 37, 2, &dword_1BA493000, v21, v25, v19);

  swift_bridgeObjectRelease();
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D58B68]), sel_init);
  objc_msgSend(v26, sel_setPurpose_, a6);
  v27 = *(_QWORD *)(a7 + 64);
  objc_msgSend(v26, sel_setContext_, v27);
  objc_msgSend(v26, sel_setConfiguration_, a8);
  v28 = (void *)sub_1BB872D9C();
  objc_msgSend(v26, sel_setFeedRequests_, v28);

  objc_msgSend(v26, sel_setEdgeCacheHint_, a9);
  objc_msgSend(v26, sel_setOptions_, 14);
  sub_1BA65FBAC(0, (unint64_t *)&qword_1ED3BA020);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1BB8856E0;
  *(_QWORD *)(v29 + 32) = objc_msgSend((id)objc_opt_self(), sel_transformationWithFilterOptions_configuration_context_, a10, a8, v27);
  sub_1BB872DCC();
  sub_1BA4EFE00(0, &qword_1ED3CF930);
  v30 = (void *)sub_1BB872D9C();
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_setFeedTransformations_, v30);

  v31 = (_QWORD *)swift_allocObject();
  v31[2] = a3;
  v31[3] = a4;
  v31[4] = sub_1BAAAC18C;
  v31[5] = v16;
  v31[6] = a5;
  aBlock[4] = sub_1BB5ED99C;
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BB5EC8D8;
  aBlock[3] = &block_descriptor_47;
  v32 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v26, sel_setRequestCompletionHandler_, v32);
  _Block_release(v32);
  objc_msgSend(v26, sel_start);

}

void sub_1BB5EC53C(int a1, unint64_t a2, id a3, void (*a4)(void), uint64_t a5, void (*a6)(unint64_t), uint64_t a7, uint64_t a8)
{
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;

  if (a3)
  {
    v10 = a3;
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v11 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1BB87CE70;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    v13 = v11;
    sub_1BB873E34();
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v12 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0xE000000000000000;
    sub_1BB86EF50();

    swift_bridgeObjectRelease();
    ((void (*)(id))a4)(a3);

  }
  else if (a2)
  {
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v16 = (void *)qword_1ED476CE8;
    sub_1BA7AA598();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1BB87CE70;
    v18 = v16;
    sub_1BB5E66A8(a2);
    v19 = MEMORY[0x1E0DEA968];
    v20 = MEMORY[0x1BCCE36DC]();
    v22 = v21;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v17 + 56) = v19;
    *(_QWORD *)(v17 + 64) = sub_1BA6A2D8C();
    *(_QWORD *)(v17 + 32) = v20;
    *(_QWORD *)(v17 + 40) = v22;
    v23 = sub_1BB87330C();
    sub_1BB86EF44("Fetched feed items: %@.", 23, 2, &dword_1BA493000, v18, v23, v17);

    swift_bridgeObjectRelease();
    a6(a2);
  }
  else
  {
    sub_1BB8732F4();
    if (qword_1ED3D47F0 != -1)
      swift_once();
    v25 = (id)qword_1ED476CE8;
    sub_1BB86EF50();

    sub_1BB873CB4();
    sub_1BB872AFC("feed items with no error");
    v26 = sub_1BA49A224(0, &qword_1ED3B0408);
    MEMORY[0x1BCCE36DC](a8, v26);
    sub_1BB872AFC(v27);
    swift_bridgeObjectRelease();
    sub_1BB5ED924();
    v28 = (void *)swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_BYTE *)(v29 + 16) = 1;
    a4();

  }
}

uint64_t sub_1BB5EC8D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v6 = a2;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BA49A224(0, &qword_1ED3B0418);
    v6 = sub_1BB872DB4();
  }
  if (a3)
  {
    sub_1BA49A224(0, &qword_1ED3B9770);
    a3 = sub_1BB872DB4();
  }
  swift_retain();
  v8 = a4;
  v7(v6, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1BB5EC9A0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  v43 = v7;
  v9 = (_QWORD *)*a3;
  v10 = v7;
  swift_bridgeObjectRetain();
  v12 = sub_1BB4AB8CC((uint64_t)v10);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BB4CAF8C();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = 8 * v12;
    *(_QWORD *)(v21[6] + v22) = v10;
    *(_QWORD *)(v21[7] + v22) = v8;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = a1 + 7;
    while (1)
    {
      v28 = *v27;
      v43 = (void *)*(v27 - 1);
      v29 = (_QWORD *)*a3;
      v30 = v43;
      swift_bridgeObjectRetain();
      v31 = sub_1BB4AB8CC((uint64_t)v30);
      v33 = v29[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v29[3] < v35)
      {
        sub_1BB4BC3EC(v35, 1);
        v31 = sub_1BB4AB8CC((uint64_t)v30);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v30;
      *(_QWORD *)(v38[7] + v39) = v28;
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      v27 += 2;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1BB4BC3EC(v15, a2 & 1);
  v17 = sub_1BB4AB8CC((uint64_t)v10);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1BA49A224(0, &qword_1ED39ECF0);
  sub_1BB874560();
  __break(1u);
LABEL_26:
  sub_1BB873CB4();
  sub_1BB872AFC("Swift/NativeDictionary.swift");
  sub_1BA49A224(0, &qword_1ED39ECF0);
  sub_1BB873E34();
  sub_1BB872AFC(v42);
  sub_1BB873EAC();
  __break(1u);
}

uint64_t sub_1BB5ECD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1BB873DD4();
    v8 = (void *)objc_opt_self();
    v9 = a1 + 40;
    while (1)
    {
      v10 = objc_allocWithZone(MEMORY[0x1E0D58B60]);
      swift_bridgeObjectRetain();
      v11 = objc_msgSend(v10, sel_init);
      v12 = (void *)sub_1BB872970();
      objc_msgSend(v11, sel_setFeedID_, v12);

      v13 = objc_msgSend(v8, sel_feedRangeFromDateRange_, a2);
      objc_msgSend(v11, sel_setFeedRange_, v13);

      if (a3 < 0)
        break;
      v9 += 16;
      objc_msgSend(v11, sel_setMaxCount_, a3);
      swift_bridgeObjectRelease();
      sub_1BB873DB0();
      sub_1BB873DE0();
      sub_1BB873DEC();
      sub_1BB873DBC();
      if (!--v4)
        return v14;
    }
    result = sub_1BB873EA0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BB5ECF10(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (!v4)
    return v5;
  v6 = a1;
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1BAC7B84C(0, v4, 0);
  v5 = v38;
  result = sub_1BA6AFD6C(v6);
  v9 = result;
  v10 = 0;
  v11 = v6 + 64;
  v31 = v6 + 80;
  v32 = v4;
  v34 = v6 + 64;
  v35 = v6;
  v33 = v8;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v6 + 32))
  {
    v14 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v6 + 36) != v8)
      goto LABEL_26;
    v37 = v10;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = a2(v16, v17, v18);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v38 + 16);
    v23 = *(_QWORD *)(v38 + 24);
    if (v24 >= v23 >> 1)
      result = sub_1BAC7B84C(v23 > 1, v24 + 1, 1);
    *(_QWORD *)(v38 + 16) = v24 + 1;
    v25 = v38 + 16 * v24;
    *(_QWORD *)(v25 + 32) = v21;
    *(_QWORD *)(v25 + 40) = v22;
    v6 = v35;
    v12 = 1 << *(_BYTE *)(v35 + 32);
    if (v9 >= v12)
      goto LABEL_27;
    v11 = v34;
    v26 = *(_QWORD *)(v34 + 8 * v14);
    if ((v26 & (1 << v9)) == 0)
      goto LABEL_28;
    v8 = v33;
    if (*(_DWORD *)(v35 + 36) != v33)
      goto LABEL_29;
    v27 = v26 & (-2 << (v9 & 0x3F));
    if (v27)
    {
      v12 = __clz(__rbit64(v27)) | v9 & 0xFFFFFFFFFFFFFFC0;
      v3 = 0;
      v13 = v32;
    }
    else
    {
      v28 = v14 + 1;
      v29 = (unint64_t)(v12 + 63) >> 6;
      v3 = 0;
      v13 = v32;
      if (v14 + 1 < v29)
      {
        v30 = *(_QWORD *)(v34 + 8 * v28);
        if (v30)
        {
LABEL_21:
          v12 = __clz(__rbit64(v30)) + (v28 << 6);
        }
        else
        {
          while (v29 - 2 != v14)
          {
            v30 = *(_QWORD *)(v31 + 8 * v14++);
            if (v30)
            {
              v28 = v14 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    v10 = v37 + 1;
    v9 = v12;
    if (v37 + 1 == v13)
      return v5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t _s8NewsFeed19HeadlineServiceTypePAAE9headlines3for7purpose13TeaFoundation7PromiseCySaySo19FCHeadlineProviding_pGGSaySSG_So18FCOperationPurposeatF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;

  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  v9 = FCCurrentQoSOrUtilityIfMain();
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, 0, v8, a2, v9, a3, a4);

  return v10;
}

uint64_t sub_1BB5ED21C()
{
  uint64_t *v0;

  return sub_1BB5E73D0(v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[2], v0[3]);
}

uint64_t sub_1BB5ED240()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5ED264(uint64_t *a1)
{
  uint64_t v1;

  return sub_1BB5E7B38(a1, v1);
}

id sub_1BB5ED280()
{
  uint64_t v0;

  return sub_1BB5EA174(v0);
}

uint64_t sub_1BB5ED29C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB5E8528(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1BB5ED2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BB5E863C(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5]);
}

uint64_t sub_1BB5ED2C0()
{
  uint64_t v0;

  return sub_1BB5E8F34(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1BB5ED2DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BB5ED318(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB5E8FF4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56), *(_BYTE *)(v2 + 64), *(_BYTE *)(v2 + 65), *(void **)(v2 + 72));
}

void sub_1BB5ED360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BB5E9D9C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64));
}

uint64_t sub_1BB5ED394(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCachePolicy);
  v3 = FCCurrentQoSOrUtilityIfMain();
  if (*(_QWORD *)(a1 + 16))
  {
    MEMORY[0x1E0C80A78](v3);
    sub_1BA8CB71C();
    swift_allocObject();
    v4 = sub_1BB86EA58();
  }
  else
  {
    sub_1BA8CB71C();
    swift_allocObject();
    v4 = sub_1BB86E9E0();
  }

  return v4;
}

uint64_t sub_1BB5ED49C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BA4EFE00(0, &qword_1ED3B9870);
    sub_1BB86EC14();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = a1;
    v12[3] = a3;
    v12[4] = a2;
    v12[5] = a4;
    v12[6] = a5;
    v12[7] = a6;
    v13 = a4;
    v14 = a5;
    swift_bridgeObjectRetain();
    v15 = a3;
    v16 = (void *)sub_1BB86E854();
    sub_1BB4CDFE4();
    v17 = sub_1BB86E980();
    swift_release();
    swift_release();

    return v17;
  }
  else
  {
    sub_1BA4B07F0(0, &qword_1ED3AFBF0, (uint64_t (*)(uint64_t))sub_1BB4CDFE4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DB4D08]);
    swift_allocObject();
    return sub_1BB86E9E0();
  }
}

id sub_1BB5ED600(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB5EA458(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1BB5ED618()
{
  uint64_t v0;

  return sub_1BB5EB9D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

unint64_t sub_1BB5ED638()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3AE4D8;
  if (!qword_1ED3AE4D8)
  {
    sub_1BB4CDFE4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3AE4D8);
  }
  return result;
}

uint64_t sub_1BB5ED680()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5ED6B4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BB5EBAD0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t dispatch thunk of HeadlineServiceType.headlines(for:failIfAnyMissing:cachePolicy:purpose:qualityOfService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchHeadlines(from:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchHeadlines(for:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchHeadlines(forTagID:maxCount:dateRange:requestType:includePaidArticles:cachedOnly:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 32))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchHeadlines(forFeedIDs:maxCount:dateRange:fromFeedBin:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchFeeds(forFeedIDs:maxCount:dateRange:fromFeedBin:edgeCacheHint:purpose:filterOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 48))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchFeedHeadlines(forTags:maxCount:dateRange:fromFeedBin:cachePolicy:purpose:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 56))();
}

uint64_t dispatch thunk of HeadlineServiceType.fetchHeadlines(forFeedItems:feedContextByFeedID:feedItemScoreProfiles:feedPersonalizer:configuration:purpose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 64))();
}

uint64_t method lookup function for HeadlineService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HeadlineService.__allocating_init(tagService:coreConfigurationManager:cloudContext:paidAccessChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1BB5ED73C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BB5ED764()
{
  uint64_t v0;

  return sub_1BB5EBF20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BB5ED780()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BB5ED7AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BB5EC03C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BB5ED7C4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BB5EC10C(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1BB5ED7CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED39BF90;
  if (!qword_1ED39BF90)
  {
    sub_1BA4C3E90(255, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED39BF90);
  }
  return result;
}

void sub_1BB5ED834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BB5E7CCC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void **)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_BYTE *)(v4 + 56));
}

uint64_t sub_1BB5ED868()
{
  id *v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1BB5ED8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BB5EA200(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1BB5ED8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1BB5EC1AC(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t sub_1BB5ED8F0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BB5ED918(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1BB5EA048(a1, a2, *(void (**)(uint64_t, id))(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32));
}

unint64_t sub_1BB5ED924()
{
  unint64_t result;

  result = qword_1ED3A0F80;
  if (!qword_1ED3A0F80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931088, &type metadata for HeadlineServiceErrors);
    atomic_store(result, (unint64_t *)&qword_1ED3A0F80);
  }
  return result;
}

uint64_t sub_1BB5ED968()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BB5ED99C(int a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  sub_1BB5EC53C(a1, a2, a3, *(void (**)(void))(v3 + 16), *(_QWORD *)(v3 + 24), *(void (**)(unint64_t))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_1BB5ED9AC()
{
  uint64_t v0;

  return sub_1BB5E9ABC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1BB5ED9C8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1BB5ED9FC(uint64_t *a1)
{
  uint64_t v1;

  return HeadlineService.fetchFeed(for:maxCount:dateRange:coreConfiguration:includePaidArticles:cachedOnly:purpose:filterOptions:)(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *a1, *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41));
}

void sub_1BB5EDA50(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1BB5E890C(a1, a2, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void))(v2 + 32));
}

uint64_t sub_1BB5EDA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BB5EAF18(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5]);
}

void sub_1BB5EDA68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED39EE18)
  {
    sub_1BB5EDAF4(255, (unint64_t *)&qword_1ED39ED20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA048]);
    v0 = sub_1BB86EAAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED39EE18);
  }
}

void sub_1BB5EDAD0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v4;

  sub_1BB5EB208(a1, a2, a3, a4, *(void (**)(_QWORD))(v4 + 16), *(_QWORD *)(v4 + 24), *(void (**)(void))(v4 + 32));
}

id sub_1BB5EDADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1BB5EB6F4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_1BB5EDAF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v6 = sub_1BA49A224(255, &qword_1ED39ECF0);
    sub_1BA4C3E90(255, (unint64_t *)&qword_1ED3D4440, (unint64_t *)&qword_1ED3D4450, (uint64_t)&protocolRef_FCHeadlineProviding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = sub_1BA865AD4((unint64_t *)&qword_1ED39ED30, &qword_1ED39ECF0);
    v10 = a3(a1, v6, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_1BB5EDBC0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1BB5EDBEC(void *a1)
{
  uint64_t v1;

  sub_1BB5E80DC(a1, *(_BYTE *)(v1 + 16), *(void (**)())(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(void))(v1 + 40));
}

id sub_1BB5EDC00(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_bridgeObjectRetain();
  if (!a3)
    return result;
  return result;
}

void destroy for HeadlineServiceErrors(uint64_t a1)
{
  sub_1BB5EDC30(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1BB5EDC30(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {

  }
}

uint64_t _s8NewsFeed21HeadlineServiceErrorsOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BB5EDC00(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HeadlineServiceErrors(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BB5EDC00(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BB5EDC30(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for HeadlineServiceErrors(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BB5EDC30(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for HeadlineServiceErrors()
{
  return &type metadata for HeadlineServiceErrors;
}

uint64_t sub_1BB5EDD6C(uint64_t a1, uint64_t a2)
{
  return sub_1BB5ED29C(a1, a2);
}

id sub_1BB5EDD94(uint64_t *a1, uint64_t a2)
{
  return sub_1BB5ED600(a1, a2);
}

uint64_t PuzzleAccessProvider.userHasAccess(puzzle:)(void *a1)
{
  char v1;
  char v2;
  char v4;

  PuzzleAccessProvider.puzzleAccessState(puzzle:)(a1, &v4);
  if (v4 && v4 != 1)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v1 = sub_1BB874398();
    swift_bridgeObjectRelease();
    v2 = v1 ^ 1;
  }
  return v2 & 1;
}

void PuzzleAccessProvider.puzzleAccessState(puzzle:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char *v5;
  void *v6;
  unint64_t v7;
  id v8;
  unsigned __int8 v9;
  char v10;
  void *v11;
  char *v12;
  void *v13;
  id v14;
  unint64_t v15;
  id v16;
  unsigned int v17;
  char v18;
  id v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[24];
  uint64_t v23;

  v5 = (char *)objc_msgSend(*(id *)(v2 + 16), sel_cachedSubscription);
  if (objc_getAssociatedObject(v5, v5 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v20, (uint64_t)v22);
  if (v23)
  {
    sub_1BA78DE28();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = v19;
      v7 = (unint64_t)objc_msgSend(v19, sel_integerValue);
      if (v7 == -1)
        goto LABEL_17;
      goto LABEL_10;
    }
  }
  else
  {
    sub_1BA6EDA74((uint64_t)v22);
  }
  v6 = 0;
  v7 = 0;
LABEL_10:
  if (objc_getAssociatedObject(v5, (const void *)~v7))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v20, (uint64_t)v22);
  if (v23)
  {
    sub_1BA78DE28();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = v19;
      v9 = objc_msgSend(v8, sel_integerValue);

      v10 = v9 - 59;
      goto LABEL_18;
    }
  }
  else
  {
    sub_1BA6EDA74((uint64_t)v22);
  }
LABEL_17:

  v10 = -59;
LABEL_18:
  v11 = *(void **)(v2 + 24);
  if ((objc_msgSend(a1, sel_isPaid) & 1) == 0)
    goto LABEL_39;
  v12 = (char *)objc_msgSend(objc_msgSend(v11, sel_bundleSubscriptionProvider), sel_bundleSubscription);
  swift_unknownObjectRelease();
  if (objc_getAssociatedObject(v12, v12 + 1))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v20, (uint64_t)v22);
  if (!v23)
  {
    sub_1BA6EDA74((uint64_t)v22);
    goto LABEL_27;
  }
  sub_1BA78DE28();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v13 = 0;
    v15 = 0;
    goto LABEL_28;
  }
  v13 = v19;
  v14 = objc_msgSend(v19, sel_integerValue);
  if (v14 == (id)-1)
  {

    goto LABEL_39;
  }
  v15 = (unint64_t)v14;
LABEL_28:
  if (objc_getAssociatedObject(v12, (const void *)~v15))
  {
    sub_1BB873B64();
    swift_unknownObjectRelease();
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_1BA78DE64((uint64_t)&v20, (uint64_t)v22);
  if (!v23)
  {
    sub_1BA6EDA74((uint64_t)v22);
LABEL_36:

    if ((v15 & 1) == 0)
      goto LABEL_37;
LABEL_39:
    v18 = (((v7 + 1) ^ v10) & 1) == 0;
    goto LABEL_40;
  }
  sub_1BA78DE28();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_36;
  v16 = v19;
  v17 = objc_msgSend(v16, sel_integerValue);

  if (((v17 ^ v15) & 1) != 0)
    goto LABEL_39;
LABEL_37:
  v18 = 2;
LABEL_40:
  *a2 = v18;
}

uint64_t PuzzleAccessProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PuzzleAccessProvider.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5EE234(void *a1)
{
  return PuzzleAccessProvider.userHasAccess(puzzle:)(a1) & 1;
}

void sub_1BB5EE258(void *a1@<X0>, char *a2@<X8>)
{
  PuzzleAccessProvider.puzzleAccessState(puzzle:)(a1, a2);
}

uint64_t dispatch thunk of PuzzleAccessProviderType.userHasAccess(puzzle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PuzzleAccessProviderType.puzzleAccessState(puzzle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for PuzzleAccessProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for PuzzleAccessProvider()
{
  return swift_lookUpClassMethod();
}

void FCReadingHistory.toggleLikeStatus(for:)(void *a1)
{
  sub_1BB5EE2CC(a1, (SEL *)&selRef_toggleLikeForArticleWithID_);
}

void FCReadingHistory.toggleDislikeStatus(for:)(void *a1)
{
  sub_1BB5EE2CC(a1, (SEL *)&selRef_toggleDislikeForArticleWithID_);
}

void sub_1BB5EE2CC(void *a1, SEL *a2)
{
  void *v2;
  id v4;
  id v5;
  id v6;

  v4 = objc_msgSend(a1, sel_articleID);
  if (!v4)
  {
    sub_1BB8729A0();
    v5 = (id)sub_1BB872970();
    swift_bridgeObjectRelease();
    v4 = v5;
  }
  v6 = v4;
  objc_msgSend(v2, *a2);

}

BOOL static FormatScrollingTrait.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FormatScrollingTrait.hash(into:)()
{
  return sub_1BB8745D8();
}

uint64_t FormatScrollingTrait.hashValue.getter()
{
  sub_1BB8745CC();
  sub_1BB8745D8();
  return sub_1BB874608();
}

unint64_t sub_1BB5EE3C8()
{
  unint64_t result;

  result = qword_1EF2C89F8;
  if (!qword_1EF2C89F8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatScrollingTrait, &type metadata for FormatScrollingTrait);
    atomic_store(result, (unint64_t *)&qword_1EF2C89F8);
  }
  return result;
}

unint64_t sub_1BB5EE40C(uint64_t a1)
{
  unint64_t result;

  result = sub_1BB5EE430();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BB5EE430()
{
  unint64_t result;

  result = qword_1EF2C8A00;
  if (!qword_1EF2C8A00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatScrollingTrait, &type metadata for FormatScrollingTrait);
    atomic_store(result, (unint64_t *)&qword_1EF2C8A00);
  }
  return result;
}

unint64_t sub_1BB5EE474(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BAAAC238();
  a1[2] = sub_1BAAAC280();
  result = sub_1BB5EE3C8();
  a1[3] = result;
  return result;
}

uint64_t sub_1BB5EE4A8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FormatScrollingTrait.init(from:)(a1, a2);
}

void sub_1BB5EE4BC(_QWORD *a1)
{
  FormatScrollingTrait.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for FormatScrollingTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB5EE51C + 4 * byte_1BB931145[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB5EE550 + 4 * byte_1BB931140[v4]))();
}

uint64_t sub_1BB5EE550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5EE558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5EE560);
  return result;
}

uint64_t sub_1BB5EE56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5EE574);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB5EE578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5EE580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatScrollingTrait()
{
  return &type metadata for FormatScrollingTrait;
}

_QWORD *sub_1BB5EE59C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38[2];
  uint64_t v39[5];
  _QWORD *v40;
  __int128 v41;
  _BYTE v42[40];
  _BYTE v43[40];

  v4 = v3;
  v7 = *a3;
  v41 = xmmword_1BB87A390;
  v8 = *(_QWORD *)(v3 + 176);
  if (v7 >> 61 == 5)
  {
    v9 = v7 & 0x1FFFFFFFFFFFFFFFLL;
    v10 = *(_QWORD *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v11 = *(_QWORD *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    v39[0] = v10;
    swift_retain();
    swift_retain();
    sub_1BA65B3CC(a1, a2, v39, v11, (uint64_t)v42);
    swift_release();
    swift_release();
    v12 = *(_QWORD *)(v9 + 24);
    v39[0] = *(_QWORD *)(v9 + 16);
    swift_retain();
    swift_retain();
    sub_1BA65B3CC(a1, a2, v39, v12, (uint64_t)v43);
    swift_release();
    swift_release();
  }
  else
  {
    v39[0] = v7;
    sub_1BA65B3CC(a1, a2, v39, *(_QWORD *)(v8 + 96), (uint64_t)v42);
    v13 = *(_QWORD *)(v4 + 192);
    v39[0] = v7;
    sub_1BA65B3CC(a1, a2, v39, *(_QWORD *)(v13 + 96), (uint64_t)v43);
  }
  v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BA65DC54((uint64_t)v42, (uint64_t)v39);
  sub_1BB5F0630((uint64_t)v39, (uint64_t)&v35);
  if (v36)
  {
    sub_1BA4CECCC(&v35, (uint64_t)v38);
    sub_1BA4CECCC(v38, (uint64_t)&v35);
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v14 = sub_1BB38EE40(0, v14[2] + 1, 1, v14);
      v40 = v14;
    }
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v40 = sub_1BB38EE40((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v17 = v36;
    v18 = v37;
    v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v35, v36);
    v20 = MEMORY[0x1E0C80A78](v19);
    v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v23 + 16))(v22, v20);
    sub_1BA7875C0(v16, (uint64_t)v22, (uint64_t *)&v40, v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  }
  else
  {
    sub_1BA658180((uint64_t)&v35);
  }
  sub_1BA65DC54((uint64_t)v43, (uint64_t)v39);
  sub_1BB5F0630((uint64_t)v39, (uint64_t)&v35);
  if (v36)
  {
    sub_1BA4CECCC(&v35, (uint64_t)v38);
    sub_1BA4CECCC(v38, (uint64_t)&v35);
    v24 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v24 = sub_1BB38EE40(0, v24[2] + 1, 1, v24);
      v40 = v24;
    }
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v40 = sub_1BB38EE40((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v27 = v36;
    v28 = v37;
    v29 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v35, v36);
    v30 = MEMORY[0x1E0C80A78](v29);
    v32 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v33 + 16))(v32, v30);
    sub_1BA7875C0(v26, (uint64_t)v32, (uint64_t *)&v40, v27, v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  }
  else
  {
    sub_1BA658180((uint64_t)&v35);
  }
  sub_1BA65DC00(0, (unint64_t *)&qword_1ED3C2258, (unint64_t *)&qword_1ED3B0A08);
  swift_arrayDestroy();
  return v40;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.layoutIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.nodeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double FormatVideoPlayerNodeLayoutAttributes.frame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.resizing.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 96);
  return swift_retain();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.zIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

unint64_t FormatVideoPlayerNodeLayoutAttributes.visibility.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *a1 = v2;
  return sub_1BA67D3F4(v2);
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.isUserInteractionEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 120);
}

void FormatVideoPlayerNodeLayoutAttributes.accessibilityRole.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 128);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.contextLayoutOptions.getter()
{
  return swift_retain();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.style.getter()
{
  return swift_retain();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.posterLayoutAttributes.getter()
{
  return swift_retain();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.auxViewRequirements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.logoLayoutAttributes.getter()
{
  return swift_retain();
}

uint64_t sub_1BB5EEAA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5EEAE0 + 4 * byte_1BB931270[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1BB5EEAE0()
{
  return 0xD000000000000010;
}

uint64_t sub_1BB5EEC3C()
{
  unsigned __int8 *v0;

  return sub_1BB5EEAA8(*v0);
}

uint64_t sub_1BB5EEC44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5EFE38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5EEC68()
{
  sub_1BB5EF22C();
  return sub_1BB874710();
}

uint64_t sub_1BB5EEC90()
{
  sub_1BB5EF22C();
  return sub_1BB87471C();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1BA6EEDB4(*(_QWORD *)(v0 + 112));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.__deallocating_deinit()
{
  FormatVideoPlayerNodeLayoutAttributes.deinit();
  return swift_deallocClassInstance();
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  char v11;
  _OWORD v13[2];
  char v14;

  v3 = v1;
  sub_1BA4CDF6C(0, &qword_1EF2C8A08, (uint64_t (*)(void))sub_1BB5EF22C, (uint64_t)&type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5EF22C();
  sub_1BB8746C8();
  LOBYTE(v13[0]) = 0;
  sub_1BB87417C();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    sub_1BB87417C();
    LOBYTE(v13[0]) = 2;
    sub_1BB87417C();
    v10 = *(_OWORD *)(v3 + 80);
    v13[0] = *(_OWORD *)(v3 + 64);
    v13[1] = v10;
    v14 = 3;
    type metadata accessor for CGRect(0);
    sub_1BA50AD30(&qword_1EF2A9A18, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
    sub_1BB8741AC();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 96);
    v14 = 4;
    sub_1BA994B40();
    sub_1BB87414C();
    LOBYTE(v13[0]) = 5;
    sub_1BB8741A0();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 112);
    v14 = 6;
    sub_1BA84B088();
    sub_1BB8741AC();
    LOBYTE(v13[0]) = 7;
    sub_1BB874188();
    v11 = *(_BYTE *)(v3 + 136);
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 128);
    BYTE8(v13[0]) = v11;
    v14 = 8;
    sub_1BA5FB410();
    sub_1BB87414C();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 144);
    v14 = 9;
    type metadata accessor for FormatContextLayoutOptions();
    sub_1BA50AD30(&qword_1EF2AC0C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatContextLayoutOptions, (uint64_t)&protocol conformance descriptor for FormatContextLayoutOptions);
    sub_1BB8741AC();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 152);
    v14 = 10;
    type metadata accessor for FormatVideoPlayerNodeStyle();
    sub_1BA50AD30(qword_1ED3A7CC0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeStyle, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeStyle);
    sub_1BB87414C();
    LOBYTE(v13[0]) = 11;
    sub_1BB87417C();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 176);
    v14 = 12;
    type metadata accessor for FormatImageNodeLayoutAttributes();
    sub_1BA50AD30(&qword_1ED3CD750, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
    sub_1BB8741AC();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 184);
    v14 = 13;
    sub_1BA4CDF6C(0, &qword_1EF2AC0D0, (uint64_t (*)(void))sub_1BA822498, (uint64_t)&type metadata for FormatAuxiliaryViewRequirement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    sub_1BA9952AC(&qword_1EF2AC0D8, (uint64_t (*)(void))sub_1BA994B84, MEMORY[0x1E0DEB3B8]);
    sub_1BB8741AC();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 192);
    v14 = 14;
    sub_1BB8741AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1BB5EF22C()
{
  unint64_t result;

  result = qword_1EF2C8A10;
  if (!qword_1EF2C8A10)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93155C, &type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8A10);
  }
  return result;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FormatVideoPlayerNodeLayoutAttributes.init(from:)(a1);
  return v2;
}

uint64_t FormatVideoPlayerNodeLayoutAttributes.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  char v22;

  sub_1BA4CDF6C(0, &qword_1EF2C8A18, (uint64_t (*)(void))sub_1BB5EF22C, (uint64_t)&type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v18 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v16 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5EF22C();
  v17 = v6;
  v7 = v19;
  sub_1BB87468C();
  if (v7)
  {
    swift_deallocPartialClassInstance();
    v15 = (uint64_t)a1;
  }
  else
  {
    v19 = a1;
    LOBYTE(v20) = 0;
    *(_QWORD *)(v1 + 16) = sub_1BB874098();
    *(_QWORD *)(v1 + 24) = v8;
    LOBYTE(v20) = 1;
    *(_QWORD *)(v1 + 32) = sub_1BB874098();
    *(_QWORD *)(v1 + 40) = v9;
    LOBYTE(v20) = 2;
    *(_QWORD *)(v1 + 48) = sub_1BB874098();
    *(_QWORD *)(v1 + 56) = v10;
    type metadata accessor for CGRect(0);
    v22 = 3;
    sub_1BA50AD30((unint64_t *)&unk_1ED3B9910, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
    v16 = 0;
    sub_1BB8740D4();
    v11 = v21;
    *(_OWORD *)(v1 + 64) = v20;
    *(_OWORD *)(v1 + 80) = v11;
    v22 = 4;
    sub_1BA995268();
    sub_1BB874068();
    *(_QWORD *)(v1 + 96) = v20;
    LOBYTE(v20) = 5;
    *(_QWORD *)(v1 + 104) = sub_1BB8740C8();
    v22 = 6;
    sub_1BA651250();
    sub_1BB8740D4();
    *(_QWORD *)(v1 + 112) = v20;
    LOBYTE(v20) = 7;
    *(_BYTE *)(v1 + 120) = sub_1BB8740A4() & 1;
    v22 = 8;
    sub_1BA650BA0();
    sub_1BB874068();
    v13 = BYTE8(v20);
    *(_QWORD *)(v1 + 128) = v20;
    *(_BYTE *)(v1 + 136) = v13;
    type metadata accessor for FormatContextLayoutOptions();
    v22 = 9;
    sub_1BA50AD30(&qword_1EF2AC0F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatContextLayoutOptions, (uint64_t)&protocol conformance descriptor for FormatContextLayoutOptions);
    sub_1BB8740D4();
    *(_QWORD *)(v1 + 144) = v20;
    type metadata accessor for FormatVideoPlayerNodeStyle();
    v22 = 10;
    sub_1BA50AD30(&qword_1ED3CBAB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeStyle, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeStyle);
    sub_1BB874068();
    *(_QWORD *)(v1 + 152) = v20;
    LOBYTE(v20) = 11;
    *(_QWORD *)(v1 + 160) = sub_1BB874098();
    *(_QWORD *)(v1 + 168) = v14;
    type metadata accessor for FormatImageNodeLayoutAttributes();
    v22 = 12;
    sub_1BA50AD30(&qword_1ED3CD758, 255, (uint64_t (*)(uint64_t))type metadata accessor for FormatImageNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatImageNodeLayoutAttributes);
    sub_1BB8740D4();
    *(_QWORD *)(v1 + 176) = v20;
    sub_1BA4CDF6C(0, &qword_1EF2AC0D0, (uint64_t (*)(void))sub_1BA822498, (uint64_t)&type metadata for FormatAuxiliaryViewRequirement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    v22 = 13;
    sub_1BA9952AC(&qword_1EF2AC100, (uint64_t (*)(void))sub_1BA995330, MEMORY[0x1E0DEB3D8]);
    sub_1BB8740D4();
    *(_QWORD *)(v1 + 184) = v20;
    v22 = 14;
    sub_1BB8740D4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v18);
    v15 = (uint64_t)v19;
    *(_QWORD *)(v1 + 192) = v20;
  }
  __swift_destroy_boxed_opaque_existential_1(v15);
  return v1;
}

uint64_t sub_1BB5EFAA0(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C8A20, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeLayoutAttributes);
}

uint64_t type metadata accessor for FormatVideoPlayerNodeLayoutAttributes()
{
  return objc_opt_self();
}

uint64_t sub_1BB5EFAEC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5EFAF8(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C30A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeLayoutAttributes);
}

uint64_t sub_1BB5EFB24(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C30F8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeLayoutAttributes);
}

uint64_t sub_1BB5EFB50(uint64_t a1, uint64_t a2)
{
  return sub_1BA50AD30(&qword_1EF2C8A28, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeLayoutAttributes);
}

uint64_t sub_1BB5EFB7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = FormatVideoPlayerNodeLayoutAttributes.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1BB5EFBD0(_QWORD *a1)
{
  return FormatVideoPlayerNodeLayoutAttributes.encode(to:)(a1);
}

uint64_t sub_1BB5EFBF0(uint64_t a1, uint64_t a2)
{
  sub_1BA50AD30(&qword_1EF2C3148, a2, (uint64_t (*)(uint64_t))type metadata accessor for FormatVideoPlayerNodeLayoutAttributes, (uint64_t)&protocol conformance descriptor for FormatVideoPlayerNodeLayoutAttributes);
  return sub_1BB86D96C();
}

uint64_t method lookup function for FormatVideoPlayerNodeLayoutAttributes()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FormatVideoPlayerNodeLayoutAttributes.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t storeEnumTagSinglePayload for FormatVideoPlayerNodeLayoutAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1BB5EFCE0 + 4 * byte_1BB931284[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1BB5EFD14 + 4 * byte_1BB93127F[v4]))();
}

uint64_t sub_1BB5EFD14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5EFD1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5EFD24);
  return result;
}

uint64_t sub_1BB5EFD30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5EFD38);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1BB5EFD3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5EFD44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatVideoPlayerNodeLayoutAttributes.CodingKeys()
{
  return &type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys;
}

unint64_t sub_1BB5EFD64()
{
  unint64_t result;

  result = qword_1EF2C8B48;
  if (!qword_1EF2C8B48)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931534, &type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B48);
  }
  return result;
}

unint64_t sub_1BB5EFDAC()
{
  unint64_t result;

  result = qword_1EF2C8B50;
  if (!qword_1EF2C8B50)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9314A4, &type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B50);
  }
  return result;
}

unint64_t sub_1BB5EFDF4()
{
  unint64_t result;

  result = qword_1EF2C8B58;
  if (!qword_1EF2C8B58)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9314CC, &type metadata for FormatVideoPlayerNodeLayoutAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B58);
  }
  return result;
}

uint64_t sub_1BB5EFE38(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BB961EB0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65644965646F6ELL && a2 == 0xEE00726569666974 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D617266 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E697A69736572 && a2 == 0xE800000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7865646E497ALL && a2 == 0xE600000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001BB965930 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BB961C20 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BB965760 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6564496573756572 && a2 == 0xEF7265696669746ELL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001BB9933A0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BB965970 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BB9933C0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_1BB5F042C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t *a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ValueMetadata *v30;
  _UNKNOWN **v31;
  uint64_t v32;

  v22 = *a7;
  v23 = *a13;
  v24 = *a15;
  v25 = *((_BYTE *)a15 + 8);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  *(_QWORD *)(v21 + 32) = a3;
  *(_QWORD *)(v21 + 40) = a4;
  *(_QWORD *)(v21 + 48) = a5;
  *(_QWORD *)(v21 + 56) = a6;
  *(double *)(v21 + 64) = a9;
  *(double *)(v21 + 72) = a10;
  *(double *)(v21 + 80) = a11;
  *(double *)(v21 + 88) = a12;
  *(_QWORD *)(v21 + 96) = v22;
  *(_QWORD *)(v21 + 104) = a8;
  *(_QWORD *)(v21 + 112) = v23;
  *(_BYTE *)(v21 + 120) = a14;
  *(_QWORD *)(v21 + 128) = v24;
  *(_BYTE *)(v21 + 136) = v25;
  *(_QWORD *)(v21 + 144) = a16;
  *(_QWORD *)(v21 + 152) = a17;
  *(_QWORD *)(v21 + 160) = a18;
  *(_QWORD *)(v21 + 168) = a19;
  *(_QWORD *)(v21 + 176) = a20;
  if (a17)
  {
    sub_1BB5F05C4();
    inited = swift_initStackObject();
    v27 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1BB87CE70;
    v28 = *(_QWORD *)(a17 + 64);
    if ((~v28 & 0xF000000000000007) != 0)
    {
      v31 = &protocol witness table for FormatBackground;
      v30 = &type metadata for FormatBackground;
      v29 = *(_QWORD *)(a17 + 64);
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      *(_QWORD *)(inited + 40) = 0;
      *(_QWORD *)(inited + 48) = 0;
    }
    *(_QWORD *)(inited + 32) = v29;
    *(_QWORD *)(inited + 56) = v30;
    *(_QWORD *)(inited + 64) = v31;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1BA6E6C68(v28);
    v32 = sub_1BA67DB8C(v27);
    swift_setDeallocating();
    sub_1BA65DC00(0, &qword_1ED3B8C88, (unint64_t *)&qword_1ED3B8C80);
    swift_arrayDestroy();
    swift_release();
    swift_release_n();
  }
  else
  {
    swift_retain();
    v32 = MEMORY[0x1E0DEE9E8];
  }
  *(_QWORD *)(v21 + 184) = v32;
  *(_QWORD *)(v21 + 192) = a21;
  return v21;
}

void sub_1BB5F05C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED3B9F90)
  {
    sub_1BA65DC00(255, &qword_1ED3B8C88, (unint64_t *)&qword_1ED3B8C80);
    v0 = sub_1BB874218();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED3B9F90);
  }
}

uint64_t sub_1BB5F0630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BA65DC00(0, (unint64_t *)&qword_1ED3C2258, (unint64_t *)&qword_1ED3B0A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AuthTokenStoreDescriptor()
{
  return &type metadata for AuthTokenStoreDescriptor;
}

uint64_t sub_1BB5F069C()
{
  return 0x6B6F745F68747561;
}

uint64_t sub_1BB5F06BC()
{
  return 0x302E302E31;
}

uint64_t sub_1BB5F06D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v4 = sub_1BB86BE54();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v11 - v7;
  v9 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain();
  sub_1BB86BE48();
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

void sub_1BB5F0870()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BB5F08B4()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

void sub_1BB5F0930()
{
  __asm { BR              X10 }
}

uint64_t sub_1BB5F0964()
{
  sub_1BB872A90();
  return swift_bridgeObjectRelease();
}

void sub_1BB5F09CC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BB8745CC();
  __asm { BR              X9 }
}

uint64_t sub_1BB5F0A0C()
{
  sub_1BB872A90();
  swift_bridgeObjectRelease();
  return sub_1BB874608();
}

uint64_t sub_1BB5F0A88@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB5F1A6C();
  *a1 = result;
  return result;
}

uint64_t sub_1BB5F0AB4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BB5F0ADC + 4 * byte_1BB931614[*v0]))();
}

void sub_1BB5F0ADC(_QWORD *a1@<X8>)
{
  *a1 = 0x7364726F77;
  a1[1] = 0xE500000000000000;
}

void sub_1BB5F0AF4(_QWORD *a1@<X8>)
{
  *a1 = 0x65636E65746E6573;
  a1[1] = 0xE900000000000073;
}

void sub_1BB5F0B14(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "allCharacters");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1BB5F0B3C()
{
  sub_1BB5F1BE4();
  return sub_1BB872D60();
}

uint64_t sub_1BB5F0B98()
{
  sub_1BB5F1BE4();
  return sub_1BB872D0C();
}

void sub_1BB5F0BE4(char *a1)
{
  sub_1BB7EFC28(*a1);
}

uint64_t sub_1BB5F0BF0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BB5F0C2C + 4 * byte_1BB931618[a1]))(0x6170736574696877, 0xEB00000000736563);
}

unint64_t sub_1BB5F0C2C()
{
  return 0xD000000000000016;
}

uint64_t sub_1BB5F0C7C()
{
  return 0x446C616D69636564;
}

uint64_t sub_1BB5F0CA0()
{
  return 0x7372657474656CLL;
}

unint64_t sub_1BB5F0CB8()
{
  return 0xD000000000000010;
}

uint64_t sub_1BB5F0CE0(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;

  sub_1BB5F14B0(0, &qword_1EF2C8B98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v11 - v7;
  v9 = *v1;
  v11[0] = *((_QWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5F13E0();
  sub_1BB8746C8();
  v14 = v9;
  v13 = 0;
  sub_1BB5F150C();
  sub_1BB8741AC();
  if (!v2 && *(_QWORD *)(v11[0] + 16))
  {
    v12 = 1;
    v11[1] = v11[0];
    sub_1BB5F1550();
    sub_1BB5F15A8();
    sub_1BB5F15FC();
    sub_1BB874464();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BB5F0E54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  char v28;
  char v29;
  unsigned __int8 v30;

  v24 = a2;
  sub_1BB5F12F4();
  v23 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BB5F14B0(0, &qword_1EF2C8B78, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v22 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BB5F13E0();
  v12 = v25;
  sub_1BB87468C();
  if (!v12)
  {
    v25 = v6;
    v22 = v4;
    v13 = v9;
    v14 = v23;
    v15 = v24;
    v29 = 0;
    sub_1BB5F1424();
    v16 = v11;
    sub_1BB8740D4();
    v17 = v30;
    v28 = 1;
    if ((sub_1BB8740F8() & 1) != 0)
    {
      v27 = 1;
      sub_1BB5F1468();
      v18 = v25;
      sub_1BB8740D4();
      v26 = v17;
      v19 = v16;
      v20 = sub_1BB86DD08();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v14);
    }
    else
    {
      v26 = v17;
      v19 = v16;
      v20 = MEMORY[0x1E0DEE9D8];
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v8);
    *(_BYTE *)v15 = v26;
    *(_QWORD *)(v15 + 8) = v20;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BB5F1070()
{
  char *v0;

  sub_1BAB07B28(0, *v0);
}

void sub_1BB5F107C(uint64_t a1)
{
  char *v1;

  sub_1BA9D1700(a1, *v1);
}

void sub_1BB5F1084(uint64_t a1)
{
  char *v1;

  sub_1BAB07B28(a1, *v1);
}

uint64_t sub_1BB5F108C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BB5F1AB4();
  *a1 = result;
  return result;
}

uint64_t sub_1BB5F10B8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1BB5F0BF0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BB5F10E0()
{
  sub_1BB5F1A28();
  return sub_1BB872D60();
}

uint64_t sub_1BB5F113C()
{
  sub_1BB5F1A28();
  return sub_1BB872D0C();
}

void sub_1BB5F1188(char *a1)
{
  sub_1BB7EF9F4(*a1);
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyTextField()
{
  return &type metadata for DebugFormatTemplateKeyTextField;
}

unint64_t sub_1BB5F11A4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000017;
  else
    return 0xD000000000000016;
}

uint64_t sub_1BB5F11E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5F1AFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5F1208()
{
  sub_1BB5F13E0();
  return sub_1BB874710();
}

uint64_t sub_1BB5F1230()
{
  sub_1BB5F13E0();
  return sub_1BB87471C();
}

uint64_t sub_1BB5F1258@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BB5F0E54(a1, a2);
}

uint64_t sub_1BB5F126C(_QWORD *a1)
{
  return sub_1BB5F0CE0(a1);
}

uint64_t sub_1BB5F1280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  sub_1BB7EFC28(*(_BYTE *)a1);
  if ((v4 & 1) == 0)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1BA885B50(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_1BB5F12F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C8B60)
  {
    sub_1BB5F1358();
    sub_1BB5F139C();
    v0 = sub_1BB86DF60();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C8B60);
  }
}

unint64_t sub_1BB5F1358()
{
  unint64_t result;

  result = qword_1EF2C8B68;
  if (!qword_1EF2C8B68)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9319E8, &type metadata for DebugFormatTemplateKeyTextField.DisallowedCharacterSet);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B68);
  }
  return result;
}

unint64_t sub_1BB5F139C()
{
  unint64_t result;

  result = qword_1EF2C8B70;
  if (!qword_1EF2C8B70)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9319C0, &type metadata for DebugFormatTemplateKeyTextField.DisallowedCharacterSet);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B70);
  }
  return result;
}

unint64_t sub_1BB5F13E0()
{
  unint64_t result;

  result = qword_1EF2C8B80;
  if (!qword_1EF2C8B80)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931970, &type metadata for DebugFormatTemplateKeyTextField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B80);
  }
  return result;
}

unint64_t sub_1BB5F1424()
{
  unint64_t result;

  result = qword_1EF2C8B88;
  if (!qword_1EF2C8B88)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931948, &type metadata for DebugFormatTemplateKeyTextField.AutocapitalizationType);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B88);
  }
  return result;
}

unint64_t sub_1BB5F1468()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C8B90;
  if (!qword_1EF2C8B90)
  {
    sub_1BB5F12F4();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DB3610], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C8B90);
  }
  return result;
}

void sub_1BB5F14B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BB5F13E0();
    v7 = a3(a1, &type metadata for DebugFormatTemplateKeyTextField.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BB5F150C()
{
  unint64_t result;

  result = qword_1EF2C8BA0;
  if (!qword_1EF2C8BA0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931920, &type metadata for DebugFormatTemplateKeyTextField.AutocapitalizationType);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BA0);
  }
  return result;
}

unint64_t sub_1BB5F1550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF2C8BA8;
  if (!qword_1EF2C8BA8)
  {
    sub_1BB5F14B0(255, &qword_1EF2C8B98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BA8);
  }
  return result;
}

void sub_1BB5F15A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF2C8BB0)
  {
    v0 = sub_1BB872EE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF2C8BB0);
  }
}

unint64_t sub_1BB5F15FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF2C8BB8;
  if (!qword_1EF2C8BB8)
  {
    sub_1BB5F15A8();
    v2 = v1;
    v3 = sub_1BB5F139C();
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTemplateKeyTextField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BB5F16A8 + 4 * byte_1BB931625[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BB5F16DC + 4 * byte_1BB931620[v4]))();
}

uint64_t sub_1BB5F16DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F16E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5F16ECLL);
  return result;
}

uint64_t sub_1BB5F16F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5F1700);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BB5F1704(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F170C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyTextField.CodingKeys()
{
  return &type metadata for DebugFormatTemplateKeyTextField.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTemplateKeyTextField.DisallowedCharacterSet(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1BB5F1774 + 4 * byte_1BB93162F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1BB5F17A8 + 4 * byte_1BB93162A[v4]))();
}

uint64_t sub_1BB5F17A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F17B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5F17B8);
  return result;
}

uint64_t sub_1BB5F17C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5F17CCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1BB5F17D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F17D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyTextField.DisallowedCharacterSet()
{
  return &type metadata for DebugFormatTemplateKeyTextField.DisallowedCharacterSet;
}

uint64_t storeEnumTagSinglePayload for DebugFormatTemplateKeyTextField.AutocapitalizationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BB5F1840 + 4 * byte_1BB931639[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BB5F1874 + 4 * byte_1BB931634[v4]))();
}

uint64_t sub_1BB5F1874(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F187C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5F1884);
  return result;
}

uint64_t sub_1BB5F1890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5F1898);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BB5F189C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F18A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugFormatTemplateKeyTextField.AutocapitalizationType()
{
  return &type metadata for DebugFormatTemplateKeyTextField.AutocapitalizationType;
}

unint64_t sub_1BB5F18C4()
{
  unint64_t result;

  result = qword_1EF2C8BC0;
  if (!qword_1EF2C8BC0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931728, &type metadata for DebugFormatTemplateKeyTextField.AutocapitalizationType);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BC0);
  }
  return result;
}

unint64_t sub_1BB5F190C()
{
  unint64_t result;

  result = qword_1EF2C8BC8;
  if (!qword_1EF2C8BC8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9317C8, &type metadata for DebugFormatTemplateKeyTextField.DisallowedCharacterSet);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BC8);
  }
  return result;
}

unint64_t sub_1BB5F1954()
{
  unint64_t result;

  result = qword_1EF2C8BD0;
  if (!qword_1EF2C8BD0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9318F8, &type metadata for DebugFormatTemplateKeyTextField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BD0);
  }
  return result;
}

unint64_t sub_1BB5F199C()
{
  unint64_t result;

  result = qword_1EF2C8BD8;
  if (!qword_1EF2C8BD8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931868, &type metadata for DebugFormatTemplateKeyTextField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BD8);
  }
  return result;
}

unint64_t sub_1BB5F19E4()
{
  unint64_t result;

  result = qword_1EF2C8BE0;
  if (!qword_1EF2C8BE0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931890, &type metadata for DebugFormatTemplateKeyTextField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BE0);
  }
  return result;
}

unint64_t sub_1BB5F1A28()
{
  unint64_t result;

  result = qword_1EF2C8BE8;
  if (!qword_1EF2C8BE8)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB9317F0, &type metadata for DebugFormatTemplateKeyTextField.DisallowedCharacterSet);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BE8);
  }
  return result;
}

uint64_t sub_1BB5F1A6C()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1BB5F1AB4()
{
  unint64_t v0;

  v0 = sub_1BB873FE4();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t sub_1BB5F1AFC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x80000001BB9933E0 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BB993400)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1BB5F1BE4()
{
  unint64_t result;

  result = qword_1EF2C8BF0;
  if (!qword_1EF2C8BF0)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931750, &type metadata for DebugFormatTemplateKeyTextField.AutocapitalizationType);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BF0);
  }
  return result;
}

uint64_t static ColumnSystem.Options.default(layoutOptions:)@<X0>(uint64_t a1@<X8>)
{
  return sub_1BB5F1C60(MEMORY[0x1E0DB5D88], a1);
}

uint64_t static ColumnSystem.Options.card(layoutOptions:)@<X0>(uint64_t a1@<X8>)
{
  return sub_1BB5F1C60(MEMORY[0x1E0DB5CF8], a1);
}

uint64_t sub_1BB5F1C60@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = sub_1BB86D93C();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1BB86D7A4();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BB86D678();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v8 + 104))(v11, *a1, v7, v9);
  sub_1BB8705B8();
  sub_1BB87360C();
  v23[8] = v13;
  v23[9] = v12;
  sub_1BB87051C();
  v23[6] = v15;
  v23[7] = v14;
  sub_1BB87054C();
  v23[4] = v17;
  v23[5] = v16;
  sub_1BB8704F8();
  v23[2] = v19;
  v23[3] = v18;
  sub_1BB870558();
  v23[0] = v21;
  v23[1] = v20;
  sub_1BB870540();
  sub_1BB870510();
  sub_1BB870534();
  sub_1BB870570();
  sub_1BB870528();
  if (qword_1ED3BC390 != -1)
    swift_once();
  swift_retain();
  sub_1BB86D2B8();
  swift_release();
  sub_1BB86D6F0();
  sub_1BB86D66C();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1BB5F1ED4()
{
  unint64_t result;

  result = qword_1ED39C3E8;
  if (!qword_1ED39C3E8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SegmentedColorViewDirection, MEMORY[0x1E0DBAA18]);
    atomic_store(result, (unint64_t *)&qword_1ED39C3E8);
  }
  return result;
}

unint64_t sub_1BB5F1F1C()
{
  unint64_t result;

  result = qword_1ED39C3E0;
  if (!qword_1ED39C3E0)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SegmentedColorViewDirection, MEMORY[0x1E0DBAA18]);
    atomic_store(result, (unint64_t *)&qword_1ED39C3E0);
  }
  return result;
}

unint64_t sub_1BB5F1F64()
{
  unint64_t result;

  result = qword_1ED39C3D8;
  if (!qword_1ED39C3D8)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for SegmentedColorViewDirection, MEMORY[0x1E0DBAA18]);
    atomic_store(result, (unint64_t *)&qword_1ED39C3D8);
  }
  return result;
}

uint64_t sub_1BB5F1FA8()
{
  sub_1BB5F2054();
  return sub_1BB872D6C();
}

uint64_t sub_1BB5F2004()
{
  sub_1BB5F2054();
  return sub_1BB872D18();
}

unint64_t sub_1BB5F2054()
{
  unint64_t result;

  result = qword_1EF2C8BF8;
  if (!qword_1EF2C8BF8)
  {
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DBAA20], MEMORY[0x1E0DBAA18]);
    atomic_store(result, (unint64_t *)&qword_1EF2C8BF8);
  }
  return result;
}

uint64_t *sub_1BB5F2098()
{
  if (qword_1ED3CC1E0 != -1)
    swift_once();
  return &qword_1ED476AA0;
}

void sub_1BB5F20D8(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1BB5F2140(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 16);
  sub_1BB5F2944(v1);

}

void sub_1BB5F2734(void *a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = v1[2];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 >= sub_1BAF6A380(v1[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1BB87A390;
    v8 = v1[3];
    v7 = v1[4];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1BA6A2D8C();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v7;
    v10 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v6 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v6 + 104) = v10;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = v4;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v11 = (void *)sub_1BB873A08();
    v12 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v11, v12, v6);
    swift_bridgeObjectRelease();

  }
  else
  {
    objc_msgSend(a1, sel_setUserInteractionEnabled_, 1);
    sub_1BB873708();
    sub_1BA79AFD4(0, 0);
    swift_beginAccess();
    v5 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

void sub_1BB5F2944(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = v1;
  v4 = v1 + 2;
  swift_beginAccess();
  v5 = v2[2];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 >= sub_1BAF6A380(v2[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1BB87A390;
    v10 = v2[3];
    v9 = v2[4];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1BA6A2D8C();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v9;
    v12 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v8 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v8 + 104) = v12;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = v6;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_1BB873A08();
    v14 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v13, v14, v8);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_beginAccess();
    v7 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

void sub_1BB5F2B1C(void *a1, void (*a2)(void))
{
  _QWORD *v2;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  swift_beginAccess();
  v5 = v2[2];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 >= sub_1BAF6A380(v2[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1BB87A390;
    v10 = v2[3];
    v9 = v2[4];
    *(_QWORD *)(v8 + 56) = MEMORY[0x1E0DEA968];
    v11 = sub_1BA6A2D8C();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v9;
    v12 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v8 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v8 + 104) = v12;
    *(_QWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 72) = v6;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_1BB873A08();
    v14 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v13, v14, v8);
    swift_bridgeObjectRelease();

  }
  else
  {
    a2();
    swift_beginAccess();
    v7 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

void sub_1BB5F2D0C(void *a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = v1[2];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 >= sub_1BAF6A380(v1[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1BB87A390;
    v8 = v1[3];
    v7 = v1[4];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1BA6A2D8C();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v7;
    v10 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v6 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v6 + 104) = v10;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = v4;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v11 = (void *)sub_1BB873A08();
    v12 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v11, v12, v6);
    swift_bridgeObjectRelease();

  }
  else
  {
    sub_1BB6B54F8();
    swift_beginAccess();
    v5 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

void sub_1BB5F2EF8(void *a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = v1[2];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 >= sub_1BAF6A380(v1[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1BB87A390;
    v8 = v1[3];
    v7 = v1[4];
    *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
    v9 = sub_1BA6A2D8C();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v7;
    v10 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v6 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v6 + 104) = v10;
    *(_QWORD *)(v6 + 64) = v9;
    *(_QWORD *)(v6 + 72) = v4;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v11 = (void *)sub_1BB873A08();
    v12 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v11, v12, v6);
    swift_bridgeObjectRelease();

  }
  else
  {
    IssueCoverView.prepareForReuse(identifier:)((Swift::String_optional)0);
    swift_beginAccess();
    v5 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

void sub_1BB5F30EC(char *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = v1 + 2;
  swift_beginAccess();
  v4 = v1[2];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 >= sub_1BAF6A380(v1[7]))
  {
    sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3D4470, (uint64_t (*)(uint64_t))sub_1BA81BA70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1BB87A390;
    v12 = v1[3];
    v11 = v1[4];
    *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
    v13 = sub_1BA6A2D8C();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v11;
    v14 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v10 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v10 + 104) = v14;
    *(_QWORD *)(v10 + 64) = v13;
    *(_QWORD *)(v10 + 72) = v5;
    sub_1BA49A224(0, (unint64_t *)&qword_1ED3D4460);
    swift_bridgeObjectRetain();
    v15 = (void *)sub_1BB873A08();
    v16 = sub_1BB87330C();
    sub_1BB86EF44("Format layout view pool attempting to queue past queue size, [%{public}@], queue=%ld", 84, 2, &dword_1BA493000, v15, v16, v10);
    swift_bridgeObjectRelease();

  }
  else
  {
    v6 = objc_msgSend(a1, sel_layer);
    objc_opt_self();
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_pause);

    v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC8NewsFeed15FormatVideoView_displayStateCoordinator];
    swift_beginAccess();
    v8 = *(unsigned __int8 *)(v7 + 17);
    *(_BYTE *)(v7 + 17) = 0;
    if ((v8 & 0xFFFFFFC1) != 0)
      LayeredMediaViewDisplayStateCoordinator.updateDisplay()();
    swift_beginAccess();
    v9 = a1;
    MEMORY[0x1BCCE36AC]();
    if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BB872E44();
    sub_1BB872E8C();
    sub_1BB872DCC();
    swift_endAccess();
  }
}

uint64_t sub_1BB5F3358()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  if (qword_1ED3BA7F8 != -1)
    swift_once();
  v1 = (id)qword_1ED476860;
  v2 = sub_1BB87330C();
  v3 = MEMORY[0x1E0DEE9D8];
  sub_1BB86EF44("Format layout view pool manager did receive memory warning; will drain pools",
    76,
    2,
    &dword_1BA493000,
    v1,
    v2,
    MEMORY[0x1E0DEE9D8]);

  *(_BYTE *)(v0 + 152) = 0;
  v4 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v3;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 40);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = v3;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 32);
  swift_beginAccess();
  *(_QWORD *)(v6 + 16) = v3;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 24);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v3;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v0 + 48);
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v3;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 56);
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = v3;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v3;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v0 + 136);
  swift_beginAccess();
  *(_QWORD *)(v11 + 16) = v3;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v0 + 144);
  swift_beginAccess();
  *(_QWORD *)(v12 + 16) = v3;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v0 + 112);
  swift_beginAccess();
  *(_QWORD *)(v13 + 16) = v3;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v0 + 120);
  swift_beginAccess();
  *(_QWORD *)(v14 + 16) = v3;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v0 + 88);
  swift_beginAccess();
  *(_QWORD *)(v15 + 16) = v3;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  *(_QWORD *)(v16 + 16) = v3;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  *(_QWORD *)(v17 + 16) = v3;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v0 + 72);
  swift_beginAccess();
  *(_QWORD *)(v18 + 16) = v3;
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 152) = 1;
  return result;
}

uint64_t sub_1BB5F3640()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1BB5F36DC()
{
  sub_1BB5F3640();
  return swift_deallocClassInstance();
}

uint64_t sub_1BB5F36FC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  sub_1BB873CB4();
  sub_1BB872AFC("thLayeredMediaPool");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v0);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC("PoolManager(\n    viewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    labelPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v2);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    imagePool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v3);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    buttonPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v4);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    layoutViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v5);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    stateViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v6);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    layeredMediaViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v7);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC("ViewWithImagePool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v8);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC("ViewWithLayeredMediaPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v9);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    splitViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v10);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    gradientViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v11);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    progressViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v12);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    progressPieViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v13);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(",\n    micaViewPool=");
  swift_retain();
  sub_1BB5F3C4C();
  sub_1BB872AFC(v14);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v15);
  return 0;
}

uint64_t sub_1BB5F3BF0()
{
  return sub_1BB5F36FC();
}

id sub_1BB5F3C10()
{
  return sub_1BA679EB0((void (*)(_QWORD))type metadata accessor for FormatSponsoredBanner);
}

id sub_1BB5F3C1C()
{
  return sub_1BA679EB0((void (*)(_QWORD))type metadata accessor for FormatSplitView);
}

id sub_1BB5F3C28()
{
  return sub_1BA679EB0((void (*)(_QWORD))type metadata accessor for FormatProgressCircleView);
}

id sub_1BB5F3C34()
{
  return sub_1BA679EB0((void (*)(_QWORD))MEMORY[0x1E0DBC5D8]);
}

id sub_1BB5F3C40()
{
  return sub_1BA679EB0((void (*)(_QWORD))type metadata accessor for FormatVideoView);
}

uint64_t sub_1BB5F3C4C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  sub_1BB873CB4();
  sub_1BB872AFC(",\n    videoViewPool=");
  swift_bridgeObjectRetain();
  sub_1BB872AFC(v1);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v2);
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16) >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BB873F30();
    swift_bridgeObjectRelease();
  }
  sub_1BB87420C();
  sub_1BB872AFC(v3);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v4);
  sub_1BB87420C();
  sub_1BB872AFC(v5);
  swift_bridgeObjectRelease();
  sub_1BB872AFC(v6);
  return 0;
}

uint64_t sub_1BB5F3DF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5F3E18()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) >= 4uLL)
    swift_release();
  if (*(_QWORD *)(v0 + 24) >= 4uLL)
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BB5F3EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[2];
  uint64_t *v51;
  __int128 v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;

  sub_1BB5F8104();
  v56 = v2;
  MEMORY[0x1E0C80A78](v2);
  v51 = (_QWORD *)((char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)v50 - v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (_QWORD *)((char *)v50 - v8);
  v10 = *(_QWORD *)(a1 + 64);
  v55 = a1 + 64;
  v53 = MEMORY[0x1E0DEE9E0];
  v58 = MEMORY[0x1E0DEE9E0];
  v11 = -1 << *(_BYTE *)(a1 + 32);
  if (-v11 < 64)
    v12 = ~(-1 << -(char)v11);
  else
    v12 = -1;
  v13 = v12 & v10;
  v50[1] = -1 << *(_BYTE *)(a1 + 32);
  v54 = (unint64_t)(63 - v11) >> 6;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  if (!v13)
    goto LABEL_8;
LABEL_5:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v16 = v15 | (v57 << 6);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = type metadata accessor for FormatContentSlotItemResolution();
    v22 = v17 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v16;
    v23 = v56;
    sub_1BA4C2DD8(v22, (uint64_t)v9 + *(int *)(v56 + 48), (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
    *v9 = v20;
    v9[1] = v19;
    sub_1BA5193C4((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BB5F8104);
    v24 = *(int *)(v23 + 48);
    v25 = *(int *)(v21 + 20);
    v26 = *(uint64_t *)((char *)v6 + v24 + v25);
    if (v26)
    {
      v52 = *(_OWORD *)((char *)v6 + v24 + v25);
      v31 = v51;
      v32 = (uint64_t)v51 + v24;
      v33 = *v6;
      v34 = v6[1];
      *v51 = *v6;
      v31[1] = v34;
      sub_1BA5193C4((uint64_t)v6 + v24, (uint64_t)v31 + v24, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
      v35 = *(_QWORD *)(v53 + 16);
      if (*(_QWORD *)(v53 + 24) <= v35)
      {
        v53 = v35 + 1;
        swift_bridgeObjectRetain();
        sub_1BA5DCC20(v26);
        sub_1BB4B0374(v53, 1);
        v36 = v58;
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_1BA5DCC20(v26);
        v36 = v53;
      }
      v53 = v36;
      sub_1BB8745CC();
      sub_1BB872A90();
      result = sub_1BB874608();
      v37 = (_QWORD *)v53;
      v38 = v53 + 64;
      v39 = -1 << *(_BYTE *)(v53 + 32);
      v40 = result & ~v39;
      v41 = v40 >> 6;
      if (((-1 << v40) & ~*(_QWORD *)(v53 + 64 + 8 * (v40 >> 6))) == 0)
      {
        v44 = 0;
        v45 = (unint64_t)(63 - v39) >> 6;
        v43 = v52;
        while (++v41 != v45 || (v44 & 1) == 0)
        {
          v46 = v41 == v45;
          if (v41 == v45)
            v41 = 0;
          v44 |= v46;
          v47 = *(_QWORD *)(v38 + 8 * v41);
          if (v47 != -1)
          {
            v42 = __clz(__rbit64(~v47)) + (v41 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v42 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v53 + 64 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      v43 = v52;
LABEL_37:
      *(_QWORD *)(v38 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      v48 = 16 * v42;
      v49 = (_QWORD *)(v37[6] + v48);
      *v49 = v33;
      v49[1] = v34;
      *(_OWORD *)(v37[7] + v48) = v43;
      ++v37[2];
      result = sub_1BA4A2E80(v32, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
      if (v13)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRetain();
      result = sub_1BA4A2E80((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BB5F8104);
      if (v13)
        goto LABEL_5;
    }
LABEL_8:
    v27 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v27 >= v54)
      goto LABEL_39;
    v28 = *(_QWORD *)(v55 + 8 * v27);
    v29 = v57 + 1;
    if (!v28)
    {
      v29 = v57 + 2;
      if (v57 + 2 >= v54)
        goto LABEL_39;
      v28 = *(_QWORD *)(v55 + 8 * v29);
      if (!v28)
      {
        v29 = v57 + 3;
        if (v57 + 3 >= v54)
          goto LABEL_39;
        v28 = *(_QWORD *)(v55 + 8 * v29);
        if (!v28)
        {
          v29 = v57 + 4;
          if (v57 + 4 >= v54)
            goto LABEL_39;
          v28 = *(_QWORD *)(v55 + 8 * v29);
          if (!v28)
            break;
        }
      }
    }
LABEL_23:
    v13 = (v28 - 1) & v28;
    v16 = __clz(__rbit64(v28)) + (v29 << 6);
    v57 = v29;
  }
  v30 = v57 + 5;
  if (v57 + 5 >= v54)
  {
LABEL_39:
    sub_1BA6EBD18();
    return v53;
  }
  v28 = *(_QWORD *)(v55 + 8 * v30);
  if (v28)
  {
    v29 = v57 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v54)
      goto LABEL_39;
    v28 = *(_QWORD *)(v55 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t FormatContentSlot.init(slot:properties:transforms:items:selectors:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t sub_1BB5F436C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  v87 = a3;
  v88 = (char *)a4;
  v86 = a2;
  v83 = a5;
  v7 = type metadata accessor for FormatContentSlotItemResolution();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FormatContentSlotItemObject.Resolved();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)v5;
  v15 = *(_QWORD *)(v5 + 8);
  v17 = *(_QWORD *)(v5 + 32);
  v18 = *(_QWORD *)(v5 + 40);
  v89 = *(_QWORD *)v5;
  v90 = v15;
  v85 = *(_OWORD *)(v5 + 16);
  v91 = v85;
  v92 = v17;
  v93 = v18;
  v19 = (uint64_t)v94;
  result = sub_1BB5F4B78(a1, v86, v87, (uint64_t)v88);
  if (v19)
    return result;
  v86 = a1;
  v87 = v12;
  v80 = v18;
  v81 = result;
  v76 = v8;
  v94 = v14;
  v78 = 0;
  v82 = v15;
  v89 = result;
  sub_1BA4B07F0(0, (unint64_t *)&qword_1ED3BBA80, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItemResolution, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6B5A5C((unint64_t *)&qword_1ED3C03E8, (uint64_t)&qword_1ED3BBA80, (uint64_t)type metadata accessor for FormatContentSlotItemResolution, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
  sub_1BA4A2870(&qword_1ED3BBA30, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItemResolution, (uint64_t)&protocol conformance descriptor for FormatContentSlotItemResolution);
  v77 = sub_1BB872BBC();
  v21 = MEMORY[0x1E0DEE9D8];
  v88 = v10;
  v89 = MEMORY[0x1E0DEE9D8];
  v22 = v85;
  v23 = *(_QWORD *)(v85 + 16);
  v79 = v16;
  if (!v23)
  {
    v58 = v16;
    swift_bridgeObjectRetain();
    v89 = v21;
    v84 = v21;
    v25 = (uint64_t)v94;
    v57 = v76;
LABEL_25:
    v56 = v80;
    swift_bridgeObjectRetain();
    v54 = MEMORY[0x1E0DEE9D8];
    v55 = v81;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = v22;
  v24 = (uint64_t *)(v22 + 48);
  v85 = xmmword_1BB87CE70;
  v25 = (uint64_t)v94;
  do
  {
    v35 = *(v24 - 2);
    v34 = *(v24 - 1);
    v36 = *v24;
    if ((~*v24 & 0xF000000000000007) != 0)
    {
      sub_1BA4B07F0(0, &qword_1ED3B9E20, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v26 = type metadata accessor for FormatOption();
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80);
      v28 = (v27 + 32) & ~v27;
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v85;
      v30 = (uint64_t *)(v29 + v28);
      v25 = (uint64_t)v94;
      *v30 = v35;
      v30[1] = v34;
      v30[2] = v36;
      v30[3] = 1;
      v31 = *(int *)(v26 + 28);
      v10 = v88;
      v32 = (char *)v30 + v31;
      v33 = type metadata accessor for FormatVersionRequirement(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
    v37 = *(_QWORD *)(v86 + 72);
    if (*(_QWORD *)(v37 + 16))
    {
      swift_bridgeObjectRetain();
      v38 = sub_1BA6E35A8(v35, v34);
      if ((v39 & 1) != 0)
      {
        v40 = *(_QWORD *)(v37 + 56) + (v38 << 6);
        v84 = *(_QWORD *)(v40 + 8);
        v29 = *(_QWORD *)(v40 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v25 = (uint64_t)v94;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v88;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
    }
    v29 = MEMORY[0x1E0DEE9D8];
LABEL_5:
    v24 += 3;
    sub_1BA5E7FF4(v36);
    sub_1BA6D3834(v29);
    --v23;
  }
  while (v23);
  v41 = v75;
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v41 + 16);
  v43 = v89;
  v89 = MEMORY[0x1E0DEE9D8];
  v84 = v43;
  if (!v42)
  {
    v58 = v79;
    v57 = v76;
    v21 = MEMORY[0x1E0DEE9D8];
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = (_QWORD *)(v41 + 48);
  v45 = MEMORY[0x1E0DEE9E8];
  v46 = v86;
  do
  {
    v47 = v45;
    if ((~*v44 & 0xF000000000000007) == 0)
    {
      v48 = *(_QWORD *)(v46 + 72);
      if (*(_QWORD *)(v48 + 16))
      {
        v49 = *(v44 - 2);
        v50 = *(v44 - 1);
        swift_bridgeObjectRetain();
        v51 = sub_1BA6E35A8(v49, v50);
        if ((v52 & 1) != 0)
        {
          v53 = *(_QWORD *)(v48 + 56) + (v51 << 6);
          *(_QWORD *)&v85 = *(_QWORD *)(v53 + 8);
          v47 = *(_QWORD *)(v53 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v10 = v88;
          swift_bridgeObjectRelease();
          v46 = v86;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v25 = (uint64_t)v94;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = MEMORY[0x1E0DEE9E8];
        }
        swift_bridgeObjectRelease();
        v45 = MEMORY[0x1E0DEE9E8];
      }
      else
      {
        v47 = v45;
      }
    }
    v44 += 3;
    sub_1BA67FB48(v47);
    --v42;
  }
  while (v42);
  swift_bridgeObjectRelease();
  v54 = v89;
  v56 = v80;
  v55 = v81;
  v57 = v76;
  v21 = MEMORY[0x1E0DEE9D8];
  v58 = v79;
LABEL_26:
  v86 = sub_1BA78A504(v54, v56);
  swift_bridgeObjectRelease();
  v59 = *(_QWORD *)(v55 + 16);
  if (v59)
  {
    v89 = v21;
    sub_1BAC7B370(0, v59, 0);
    v60 = v57;
    v61 = v55 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
    v62 = *(_QWORD *)(v60 + 72);
    v63 = v89;
    do
    {
      sub_1BA4C2DD8(v61, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
      sub_1BA4C2DD8((uint64_t)v10, v25, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
      sub_1BA4A2E80((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BAC7B370(0, *(_QWORD *)(v63 + 16) + 1, 1);
        v63 = v89;
      }
      v64 = v87;
      v66 = *(_QWORD *)(v63 + 16);
      v65 = *(_QWORD *)(v63 + 24);
      if (v66 >= v65 >> 1)
      {
        sub_1BAC7B370(v65 > 1, v66 + 1, 1);
        v64 = v87;
        v63 = v89;
      }
      *(_QWORD *)(v63 + 16) = v66 + 1;
      v67 = v63
          + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))
          + *(_QWORD *)(v64 + 72) * v66;
      v25 = (uint64_t)v94;
      sub_1BA5193C4((uint64_t)v94, v67, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject.Resolved);
      v61 += v62;
      --v59;
      v10 = v88;
    }
    while (v59);
    swift_bridgeObjectRelease();
    v58 = v79;
  }
  else
  {
    swift_bridgeObjectRelease();
    v63 = MEMORY[0x1E0DEE9D8];
  }
  v68 = v77;
  v69 = sub_1BB5F7630(v77);
  v70 = sub_1BB5F73B4(v68);
  v71 = sub_1BB5F3EEC(v68);
  result = swift_bridgeObjectRelease();
  v73 = v82;
  v72 = v83;
  *v83 = v58;
  v72[1] = v73;
  v74 = v86;
  v72[2] = v84;
  v72[3] = v74;
  v72[4] = v63;
  v72[5] = v69;
  v72[6] = v70;
  v72[7] = v71;
  return result;
}

uint64_t FormatContentSlot.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentSlot.transforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentSlot.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentSlot.selectors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FormatContentSlot.slot.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FormatContentSlot.properties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*FormatContentSlot.properties.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatContentSlot.transforms.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*FormatContentSlot.transforms.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatContentSlot.items.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*FormatContentSlot.items.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t FormatContentSlot.selectors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*FormatContentSlot.selectors.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1BB5F4B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  int v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  char isUniquelyReferenced_nonNull_native;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _OWORD v130[2];
  __int128 v131;
  uint64_t v132;
  uint64_t v133;

  v123 = a3;
  v124 = a1;
  v8 = type metadata accessor for FormatContentSlotItemObject();
  v107 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v111 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C23A0, (uint64_t (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v106 - v11;
  v13 = v4[1];
  v130[0] = *v4;
  v130[1] = v13;
  v131 = v4[2];
  v14 = *((_QWORD *)&v13 + 1);
  v133 = *((_QWORD *)&v13 + 1);
  v128 = a4;
  sub_1BA781758((uint64_t)&v133);
  swift_bridgeObjectRetain();
  sub_1BB386EE4(v14);
  sub_1BB5F816C();
  v15 = sub_1BB872E14();
  swift_bridgeObjectRelease();
  v128 = v15;
  sub_1BA4AD288(0, &qword_1ED3C03C8, (uint64_t)&type metadata for FormatSlotTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BA6B5A5C(&qword_1ED3CF768, (uint64_t)&qword_1ED3C03C8, (uint64_t)&type metadata for FormatSlotTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BA4AD288);
  v16 = sub_1BB872BC8();
  v118 = v5;
  swift_bridgeObjectRelease();
  v17 = *(int *)(type metadata accessor for FormatServiceOptions() + 40);
  v108 = a2;
  v109 = v12;
  v110 = v16;
  sub_1BB5F59A8(v16, a2 + v17, (uint64_t)v12);
  v18 = v131;
  v132 = v131;
  v19 = MEMORY[0x1E0DEE9D8];
  v127 = MEMORY[0x1E0DEE9D8];
  v115 = *(_QWORD *)(v131 + 16);
  if (!v115)
    goto LABEL_62;
  v114 = type metadata accessor for FormatContentSlotItem();
  v20 = *(_QWORD *)(v114 - 8);
  v113 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  sub_1BA781758((uint64_t)&v132);
  v21 = 0;
  v112 = *(_QWORD *)(v20 + 72);
  v122 = xmmword_1BB87CE70;
  v22 = (uint64_t)v111;
  while (1)
  {
    v119 = v21;
    v28 = v113 + v112 * v21;
    sub_1BA4C2DD8(v28, v22, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject);
    v29 = (uint64_t *)(v28 + *(int *)(v114 + 20));
    v30 = *v29;
    if (*v29)
      break;
    v23 = 0;
    v24 = 0;
LABEL_4:
    v25 = v119 + 1;
    v128 = v23;
    v129 = v24;
    sub_1BACBADD8(v124, v123, &v128);
    v27 = v26;
    v21 = v25;
    sub_1BA5DCC4C(v23);
    sub_1BA4A2E80(v22, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemObject);
    sub_1BB386ED0(v27);
    if (v25 == v115)
    {
      sub_1BA4F6CCC((uint64_t)&v132);
      v19 = v127;
LABEL_62:
      v128 = v19;
      v99 = v110;
      v100 = *(_QWORD *)(v110 + 16);
      if (v100)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v101 = 0;
        while (1)
        {
          v102 = *(_QWORD *)(v99 + 8 * v101 + 32);
          v127 = v102;
          sub_1BA4D50FC(v102);
          v103 = v118;
          sub_1BB5F7150(&v128, v108, (uint64_t *)v130, &v126);
          v118 = v103;
          if (v103)
            break;
          ++v101;
          sub_1BA810070(v102);
          swift_bridgeObjectRelease();
          v104 = v126;
          v128 = v126;
          v99 = v110;
          if (v100 == v101)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_68;
          }
        }
        sub_1BA810070(v102);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v104 = v110;
        swift_bridgeObjectRelease();
        sub_1BA6ED6EC((uint64_t)v109, (uint64_t)&unk_1ED3C23A0, (uint64_t)type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        swift_bridgeObjectRelease();
      }
      else
      {
        v104 = v19;
LABEL_68:
        sub_1BA6ED6EC((uint64_t)v109, (uint64_t)&unk_1ED3C23A0, (uint64_t)type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
        swift_bridgeObjectRelease();
      }
      return v104;
    }
  }
  v31 = v29[1];
  v32 = *(_QWORD *)(v31 + 16);
  v117 = *v29;
  if (!v32)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v125 = MEMORY[0x1E0DEE9D8];
LABEL_29:
    v116 = v31;
    v63 = *(_QWORD *)(v30 + 16);
    if (v63)
    {
      swift_bridgeObjectRetain_n();
      v64 = (uint64_t *)(v30 + 48);
      v24 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v66 = *(v64 - 2);
        v65 = *(v64 - 1);
        v67 = *v64;
        if ((~*v64 & 0xF000000000000007) != 0)
        {
          sub_1BA4B07F0(0, &qword_1ED3B9E20, (uint64_t (*)(uint64_t))type metadata accessor for FormatOption, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v74 = type metadata accessor for FormatOption();
          v75 = *(unsigned __int8 *)(*(_QWORD *)(v74 - 8) + 80);
          v76 = (v75 + 32) & ~v75;
          v73 = swift_allocObject();
          *(_OWORD *)(v73 + 16) = v122;
          v77 = (uint64_t *)(v73 + v76);
          *v77 = v66;
          v77[1] = v65;
          v77[2] = v67;
          v77[3] = 1;
          v78 = v73 + v76 + *(int *)(v74 + 28);
          v79 = type metadata accessor for FormatVersionRequirement(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 1, 1, v79);
          swift_bridgeObjectRetain();
        }
        else
        {
          v68 = *(_QWORD *)(v124 + 72);
          if (*(_QWORD *)(v68 + 16))
          {
            swift_bridgeObjectRetain();
            v69 = sub_1BA6E35A8(v66, v65);
            if ((v70 & 1) != 0)
            {
              v71 = (_QWORD *)(*(_QWORD *)(v68 + 56) + (v69 << 6));
              v72 = v71[2];
              v121 = v71[1];
              v120 = v72;
              v73 = v71[6];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
            swift_bridgeObjectRelease();
          }
          v73 = MEMORY[0x1E0DEE9D8];
        }
LABEL_40:
        v80 = *(_QWORD *)(v73 + 16);
        v81 = *(_QWORD *)(v24 + 16);
        v82 = v81 + v80;
        if (__OFADD__(v81, v80))
          goto LABEL_73;
        sub_1BA5E7FF4(v67);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v82 <= *(_QWORD *)(v24 + 24) >> 1)
        {
          if (*(_QWORD *)(v73 + 16))
            goto LABEL_49;
        }
        else
        {
          if (v81 <= v82)
            v84 = v81 + v80;
          else
            v84 = v81;
          v24 = sub_1BA7AD174(isUniquelyReferenced_nonNull_native, v84, 1, v24);
          if (*(_QWORD *)(v73 + 16))
          {
LABEL_49:
            v85 = *(_QWORD *)(v24 + 16);
            v86 = (*(_QWORD *)(v24 + 24) >> 1) - v85;
            v87 = type metadata accessor for FormatOption();
            if (v86 < v80)
              goto LABEL_76;
            v88 = *(_QWORD *)(v87 - 8);
            v89 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
            v90 = *(_QWORD *)(v88 + 72);
            v91 = v24 + v89 + v90 * v85;
            v92 = v73 + v89;
            v93 = v90 * v80;
            v94 = v91 + v93;
            v95 = v92 + v93;
            if (v92 < v94 && v91 < v95)
              goto LABEL_79;
            swift_arrayInitWithCopy();
            if (v80)
            {
              v97 = *(_QWORD *)(v24 + 16);
              v61 = __OFADD__(v97, v80);
              v98 = v97 + v80;
              if (v61)
                goto LABEL_78;
              *(_QWORD *)(v24 + 16) = v98;
            }
            goto LABEL_32;
          }
        }
        if (v80)
          goto LABEL_74;
LABEL_32:
        v64 += 3;
        swift_bridgeObjectRelease();
        if (!--v63)
        {
          v30 = v117;
          swift_bridgeObjectRelease_n();
          v22 = (uint64_t)v111;
          goto LABEL_60;
        }
      }
    }
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_60:
    sub_1BA5DCC4C(v30);
    v23 = v125;
    goto LABEL_4;
  }
  v33 = v31;
  v34 = v107;
  v35 = v30;
  v36 = v33 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
  swift_bridgeObjectRetain();
  sub_1BA5DCC20(v35);
  v37 = v33;
  swift_bridgeObjectRetain();
  v38 = *(_QWORD *)(v34 + 72);
  v125 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v128 = 0;
    v129 = 0;
    sub_1BACBADD8(v124, v123, &v128);
    v40 = v39;
    v41 = *(_QWORD *)(v39 + 16);
    v42 = *(_QWORD *)(v125 + 16);
    v43 = v42 + v41;
    if (__OFADD__(v42, v41))
      break;
    v44 = swift_isUniquelyReferenced_nonNull_native();
    v45 = v125;
    if (!v44 || v43 > *(_QWORD *)(v125 + 24) >> 1)
    {
      if (v42 <= v43)
        v46 = v42 + v41;
      else
        v46 = v42;
      v45 = sub_1BB392734(v44, v46, 1, v125);
    }
    v47 = *(_QWORD *)(v40 + 16);
    v125 = v45;
    if (v47)
    {
      v48 = *(_QWORD *)(v45 + 16);
      v49 = (*(_QWORD *)(v45 + 24) >> 1) - v48;
      v50 = type metadata accessor for FormatContentSlotItemResolution();
      if (v49 < v41)
        goto LABEL_75;
      v51 = *(_QWORD *)(v50 - 8);
      v52 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v53 = *(_QWORD *)(v51 + 72);
      v54 = v45 + v52 + v53 * v48;
      v55 = v40 + v52;
      v56 = v53 * v41;
      v57 = v54 + v56;
      v58 = v55 + v56;
      if (v55 < v57 && v54 < v58)
        goto LABEL_79;
      swift_arrayInitWithCopy();
      if (v41)
      {
        v60 = *(_QWORD *)(v125 + 16);
        v61 = __OFADD__(v60, v41);
        v62 = v60 + v41;
        if (v61)
          goto LABEL_77;
        *(_QWORD *)(v125 + 16) = v62;
      }
    }
    else if (v41)
    {
      goto LABEL_72;
    }
    swift_bridgeObjectRelease();
    v36 += v38;
    if (!--v32)
    {
      v31 = v37;
      swift_bridgeObjectRelease_n();
      v22 = (uint64_t)v111;
      v30 = v117;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  result = sub_1BB873F84();
  __break(1u);
  return result;
}

uint64_t sub_1BB5F5510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BB5F7EE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BB5F5534()
{
  sub_1BA5DBE4C();
  return sub_1BB874710();
}

uint64_t sub_1BB5F555C()
{
  sub_1BA5DBE4C();
  return sub_1BB87471C();
}

uint64_t FormatContentSlot.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  sub_1BA5DBCDC(0, &qword_1ED39DBE8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v17 - v6;
  v8 = v1[2];
  v20 = v1[3];
  v21 = v8;
  v9 = v1[4];
  v18 = v1[5];
  v19 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BA5DBE4C();
  sub_1BB8746C8();
  LOBYTE(v25) = 0;
  v10 = v7;
  v11 = v22;
  sub_1BB87417C();
  if (!v11)
  {
    v13 = v19;
    v14 = v20;
    v15 = v18;
    if (*(_QWORD *)(v21 + 16))
    {
      LOBYTE(v23) = 1;
      v25 = v21;
      sub_1BB5F79FC();
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B9470, (uint64_t)&type metadata for FormatProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BA5DBC08((unint64_t *)&qword_1ED39D9A0, (uint64_t (*)(void))sub_1BA89B7F8, MEMORY[0x1E0DEAF10]);
      sub_1BB874464();
    }
    if (*(_QWORD *)(v14 + 16))
    {
      LOBYTE(v23) = 2;
      v25 = v14;
      sub_1BB5F79FC();
      sub_1BA4AD288(0, &qword_1ED3C03C8, (uint64_t)&type metadata for FormatSlotTransform, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BA5DBDD0((unint64_t *)&qword_1ED3A0888, (uint64_t (*)(void))sub_1BA55DA08, MEMORY[0x1E0DEAF10]);
      sub_1BB874464();
    }
    if (*(_QWORD *)(v13 + 16))
    {
      LOBYTE(v23) = 3;
      v25 = v13;
      sub_1BB5F79FC();
      sub_1BA4B07F0(0, &qword_1ED3CF780, (uint64_t (*)(uint64_t))type metadata accessor for FormatContentSlotItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BA5DBD38(&qword_1ED3AAEB8, (unint64_t *)&unk_1ED3A6A70, (uint64_t)&protocol conformance descriptor for FormatContentSlotItem, MEMORY[0x1E0DEAF10]);
      sub_1BB874464();
    }
    if (*(_QWORD *)(v15 + 16))
    {
      v24 = 4;
      swift_bridgeObjectRetain_n();
      v16 = sub_1BA67F4CC(v15);
      swift_bridgeObjectRelease();
      v23 = v16;
      swift_retain();
      sub_1BA5BBDDC((uint64_t *)&v23);
      swift_release();
      v25 = (uint64_t)v23;
      sub_1BB5F79FC();
      sub_1BA4AD288(0, (unint64_t *)&qword_1ED3B95C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BA5BBCE4();
      sub_1BB874464();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_1BB5F5918(_QWORD *a1)
{
  return FormatContentSlot.encode(to:)(a1);
}

void sub_1BB5F5930(_BYTE *a1@<X8>)
{
  char v2;

  sub_1BB3C24BC();
  *a1 = v2;
}

void sub_1BB5F5968(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  FormatSlotTransform.identifier.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BB5F59A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  char v122;
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  unint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  char v175;
  unint64_t v176;
  char v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  size_t v191;
  uint64_t isStackAllocationSafe;
  uint64_t v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  char v198;
  char v199;
  id v200;
  id v201;
  id v202;
  id v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  id v250;
  _QWORD *v251;
  uint64_t v252;
  id v253[2];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  char v270;
  uint64_t v271;

  v216 = a1;
  v271 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for FormatSlotDefinitionItemSet();
  v217 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v244 = (uint64_t)&v210 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v245 = (int *)((char *)&v210 - v8);
  v9 = type metadata accessor for FormatSlotDefinition();
  MEMORY[0x1E0C80A78](v9);
  v218 = (uint64_t)&v210 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v219 = (uint64_t)&v210 - v12;
  v225 = type metadata accessor for FormatSlotItemCountLimit();
  MEMORY[0x1E0C80A78](v225);
  v232 = (uint64_t)&v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v223 = (uint64_t)&v210 - v15;
  MEMORY[0x1E0C80A78](v16);
  v224 = (uint64_t *)((char *)&v210 - v17);
  MEMORY[0x1E0C80A78](v18);
  v230 = (uint64_t)&v210 - v19;
  sub_1BA4B07F0(0, (unint64_t *)&unk_1ED3C23A0, (uint64_t (*)(uint64_t))type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v210 - v21;
  v23 = type metadata accessor for FeedPersonalizationClusteringRules();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v210 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(int *)(type metadata accessor for FormatTransformData() + 40);
  v222 = a2;
  sub_1BA6050C4(a2 + v27, (uint64_t)v22, (uint64_t)&unk_1ED3C23A0, (uint64_t)type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_1BA6ED6EC((uint64_t)v22, (uint64_t)&unk_1ED3C23A0, (uint64_t)type metadata accessor for FeedPersonalizationClusteringRules, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4B07F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(a3, 1, 1, v23);
  }
  v212 = v23;
  v213 = a3;
  v211 = v24;
  v210 = (uint64_t *)v26;
  sub_1BA5193C4((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FeedPersonalizationClusteringRules);
  v269 = 0;
  v270 = 1;
  v267 = 0;
  v268 = 1;
  v229 = *(_QWORD *)(v216 + 16);
  if (v229)
  {
    v228 = v216 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    v29 = 0;
    v250 = 0;
    v215 = &v261;
    while (1)
    {
      v34 = *(_QWORD *)(v228 + 8 * v29);
      if (v34 >> 61 == 2)
      {
        if (*(_QWORD *)(v34 + 16) >> 61)
          goto LABEL_13;
        v227 = v29;
        v231 = v34;
        v51 = swift_projectBox();
        v52 = v232;
        sub_1BA4C2DD8(v51, v232, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
        v53 = *(_QWORD *)(v222 + 120);
        if (*(_QWORD *)(v53 + 16))
        {
          sub_1BB8745CC();
          swift_retain();
          sub_1BB872A90();
          v54 = sub_1BB874608() & ~(-1 << *(_BYTE *)(v53 + 32));
          if (((*(_QWORD *)(v53 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) != 0)
            __asm { BR              X9 }
          v33 = v232;
        }
        else
        {
          swift_retain();
          v33 = v52;
        }
        goto LABEL_12;
      }
      if (v34 >> 61)
        goto LABEL_13;
      v227 = v29;
      v231 = v34;
      v35 = swift_projectBox();
      v36 = v230;
      sub_1BA4C2DD8(v35, v230, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
      sub_1BA4C2DD8(v36, (uint64_t)v224, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (!EnumCaseMultiPayload)
      {
        v55 = *v224;
        swift_retain();
        if ((v270 & 1) != 0)
          goto LABEL_34;
        goto LABEL_85;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v38 = v219;
        sub_1BA5193C4((uint64_t)v224, v219, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
        v39 = *(_QWORD *)(v38 + 48);
        v40 = *(_QWORD *)(v39 + 16);
        if (v40)
        {
          v41 = *(unsigned __int8 *)(v217 + 80);
          sub_1BA4D50FC(v231);
          v42 = *(_QWORD *)(v39 + 16);
          swift_bridgeObjectRetain();
          if (v42)
          {
            v43 = 0;
            v44 = 0;
            v45 = v39 + ((v41 + 32) & ~v41);
            v46 = *(_QWORD *)(v217 + 72);
            v47 = v40 - 1;
            do
            {
              v48 = v245;
              sub_1BA4C2DD8(v45, (uint64_t)v245, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              v49 = *v48;
              sub_1BA4A2E80((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              if (v44 == 0x7FFFFFFF || v49 == 0x7FFFFFFF)
              {
                if (v47 == v43)
                {
                  swift_bridgeObjectRelease();
                  v44 = 0x7FFFFFFF;
                  goto LABEL_84;
                }
                v44 = 0x7FFFFFFF;
              }
              else
              {
                v50 = __OFADD__(v44, v49);
                v44 += v49;
                if (v50)
                  goto LABEL_167;
                if (v47 == v43)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_84;
                }
              }
              ++v43;
              v45 += v46;
            }
            while (v43 < *(_QWORD *)(v39 + 16));
          }
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
        }
        swift_retain();
        v44 = 0;
LABEL_84:
        v55 = v44;
        sub_1BA4A2E80(v219, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
        if ((v270 & 1) != 0)
          goto LABEL_34;
        goto LABEL_85;
      }
      sub_1BA6050C4(v222, (uint64_t)v253, (uint64_t)&qword_1ED3BE8A8, (uint64_t)&type metadata for FormatTransformKnobs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4AD288);
      if (!v253[0])
      {
        swift_retain();
        sub_1BA6ED6EC((uint64_t)v253, (uint64_t)&qword_1ED3BE8A8, (uint64_t)&type metadata for FormatTransformKnobs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4AD288);
        v55 = 0;
        if ((v270 & 1) != 0)
          goto LABEL_34;
        goto LABEL_85;
      }
      v57 = v262;
      v58 = v263;
      __swift_project_boxed_opaque_existential_1(v215, v262);
      v59 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 16);
      swift_retain();
      v60 = v59(v57, v58);
      v61 = v255;
      v62 = v256;
      v63 = v257;
      v64 = v258;
      v65 = v259;
      v66 = v260;
      v67 = v60;
      v68 = *(_QWORD *)(v60 + 24);
      v249 = (void *)v254;
      v233 = v68;
      v220 = v253[0];
      if (v68 >> 62)
      {
        v200 = v253[0];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BA653B2C(v62, v63);
        v201 = v64;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v69 = sub_1BB873F30();
        swift_bridgeObjectRelease();
      }
      else
      {
        v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
        v70 = v253[0];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BA653B2C(v62, v63);
        v71 = v64;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v221 = *(_QWORD *)(v67 + 16);
      if (v69)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
LABEL_149:
      sub_1BA6DB13C(v62, v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_1BAFD9668((uint64_t)v253);
      v55 = v221;
      if ((v270 & 1) != 0)
      {
LABEL_34:
        if (v55 < 0)
          v56 = -1;
        else
          v56 = v55;
        goto LABEL_87;
      }
LABEL_85:
      v56 = v269;
      if (v55 > v269)
        v56 = v55;
LABEL_87:
      v269 = v56;
      v270 = 0;
      sub_1BA4C2DD8(v230, v223, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
      v124 = swift_getEnumCaseMultiPayload();
      if (v124)
      {
        if (v124 == 1)
        {
          v125 = v218;
          sub_1BA5193C4(v223, v218, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
          v126 = *(_QWORD *)(v125 + 48);
          v127 = *(_QWORD *)(v126 + 16);
          if (v127)
          {
            v128 = v217;
            v129 = v126
                 + ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80));
            swift_bridgeObjectRetain();
            v130 = 0;
            v131 = 0;
            v132 = *(_QWORD *)(v128 + 72);
            v133 = v127 - 1;
            while (1)
            {
              v134 = v244;
              sub_1BA4C2DD8(v129, v244, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              v135 = *(_DWORD *)(v134 + 4);
              sub_1BA4A2E80(v134, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinitionItemSet);
              if (v131 == 0x7FFFFFFF || v135 == 0x7FFFFFFF)
              {
                v131 = 0x7FFFFFFF;
              }
              else
              {
                v50 = __OFADD__(v131, v135);
                v131 += v135;
                if (v50)
                  goto LABEL_168;
              }
              if (v133 == v130)
                break;
              ++v130;
              v129 += v132;
              if (v130 >= *(_QWORD *)(v126 + 16))
                goto LABEL_162;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            v131 = 0;
          }
          v30 = v131;
          sub_1BA4A2E80(v218, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotDefinition);
          goto LABEL_6;
        }
        sub_1BA6050C4(v222, (uint64_t)v253, (uint64_t)&qword_1ED3BE8A8, (uint64_t)&type metadata for FormatTransformKnobs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4AD288);
        if (v253[0])
        {
          v136 = v262;
          v137 = v263;
          __swift_project_boxed_opaque_existential_1(v215, v262);
          v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 8))(v136, v137);
          v139 = v255;
          v140 = v256;
          v141 = v257;
          v142 = v258;
          v143 = (uint64_t)v259;
          v144 = v260;
          v145 = v138;
          v146 = *(_QWORD *)(v138 + 24);
          v249 = (void *)v254;
          v226 = v146;
          v214 = v253[0];
          if (v146 >> 62)
          {
            v202 = v253[0];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1BA653B2C(v140, v141);
            v203 = v142;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v147 = sub_1BB873F30();
            swift_bridgeObjectRelease();
          }
          else
          {
            v147 = *(_QWORD *)((v146 & 0xFFFFFFFFFFFFF8) + 0x10);
            v148 = v253[0];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1BA653B2C(v140, v141);
            v149 = v142;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          v220 = *(id *)(v145 + 16);
          if (!v147)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
LABEL_152:
            sub_1BA6DB13C(v140, v141);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            sub_1BAFD9668((uint64_t)v253);
            v30 = (uint64_t)v220;
            goto LABEL_6;
          }
          v241 = v226 & 0xC000000000000001;
          v221 = v226 + 32;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v238 = v140;
          v239 = v143;
          v236 = v144;
          v237 = v141;
          v234 = v139;
          v235 = v145;
          v233 = v147;
          v150 = 0;
          v240 = v142;
LABEL_104:
          if (v241)
          {
            v151 = MEMORY[0x1BCCE4630](v150, v226);
            v50 = __OFADD__(v150, 1);
            v152 = v150 + 1;
            if (v50)
              goto LABEL_164;
          }
          else
          {
            v151 = *(_QWORD *)(v221 + 8 * v150);
            swift_retain();
            v50 = __OFADD__(v150, 1);
            v152 = v150 + 1;
            if (v50)
              goto LABEL_164;
          }
          if (qword_1ED3BE7F8 != -1)
            swift_once();
          v153 = qword_1ED4768D0;
          v155 = *(_QWORD *)(v151 + 16);
          v154 = *(_QWORD *)(v151 + 24);
          v246 = v151;
          v156 = *(_QWORD *)(qword_1ED4768D0 + 24);
          swift_bridgeObjectRetain();
          sub_1BB86DD20();
          v157 = (uint64_t *)(v153 + 16);
          swift_beginAccess();
          v158 = *(_QWORD *)(v153 + 16);
          v159 = *(_QWORD *)(v158 + 16);
          v247 = v152;
          if (v159)
          {
            swift_bridgeObjectRetain();
            v160 = sub_1BA6E35A8(v155, v154);
            if ((v161 & 1) != 0)
            {
              v162 = *(_QWORD *)(*(_QWORD *)(v158 + 56) + 24 * v160 + 16);
              swift_endAccess();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
LABEL_126:
              swift_bridgeObjectRelease();
              sub_1BB86DD2C();
              swift_bridgeObjectRelease();
              v184 = *(_QWORD *)(v162 + 16);
              if (!v184)
                goto LABEL_103;
              v248 = v162;
              v185 = (uint64_t *)(v162 + 64);
              while (1)
              {
                v186 = *(v185 - 1);
                v187 = *v185;
                v188 = *(_BYTE *)(v186 + 32);
                v189 = v188 & 0x3F;
                v190 = (unint64_t)((1 << v188) + 63) >> 6;
                v191 = 8 * v190;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                isStackAllocationSafe = swift_bridgeObjectRetain();
                if (v189 <= 0xD
                  || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
                {
                  MEMORY[0x1E0C80A78](isStackAllocationSafe);
                  bzero((char *)&v210 - ((v191 + 15) & 0x3FFFFFFFFFFFFFF0), v191);
                  v193 = v190;
                  v118 = v249;
                  v194 = v250;
                  v195 = sub_1BA6EB5B4((uint64_t)&v210 - ((v191 + 15) & 0x3FFFFFFFFFFFFFF0), v193, v186, (uint64_t)v249);
                  swift_bridgeObjectRelease();
                  v250 = v194;
                  if (v194)
                    goto LABEL_171;
                }
                else
                {
                  v118 = (void *)swift_slowAlloc();
                  bzero(v118, v191);
                  v196 = v190;
                  v197 = v250;
                  v195 = sub_1BA6EB5B4((uint64_t)v118, v196, v186, (uint64_t)v249);
                  swift_bridgeObjectRelease();
                  v250 = v197;
                  if (v197)
                    goto LABEL_172;
                  MEMORY[0x1BCCE5C38](v118, -1, -1);
                  v118 = v249;
                }
                v198 = sub_1BA6EB330(v195, v186);
                swift_release();
                if ((v198 & 1) != 0)
                {
                  v199 = sub_1BA6EBD20((uint64_t)v118, v187);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v199 & 1) != 0)
                  {
                    v220 = *(id *)(v246 + 32);
LABEL_103:
                    swift_release();
                    swift_bridgeObjectRelease();
                    v150 = v247;
                    v142 = v240;
                    v141 = v237;
                    v140 = v238;
                    if (v247 == v233)
                    {
                      swift_bridgeObjectRelease();

                      swift_release();
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_152;
                    }
                    goto LABEL_104;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                v185 += 5;
                if (!--v184)
                  goto LABEL_103;
              }
            }
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          v251 = (_QWORD *)v155;
          v252 = v154;
          swift_bridgeObjectRetain();
          sub_1BA6F2E38((uint64_t *)&v251, &v264);
          v163 = v265;
          v243 = v264;
          v164 = v266;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v248 = v164;
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v166 = v155;
          v167 = isUniquelyReferenced_nonNull_native;
          v251 = (_QWORD *)*v157;
          v168 = (uint64_t)v251;
          *v157 = 0x8000000000000000;
          v169 = v166;
          v171 = sub_1BA6E35A8(v166, v154);
          v172 = *(_QWORD *)(v168 + 16);
          v173 = (v170 & 1) == 0;
          v174 = v172 + v173;
          if (__OFADD__(v172, v173))
            goto LABEL_166;
          v175 = v170;
          if (*(_QWORD *)(v168 + 24) >= v174)
          {
            if ((v167 & 1) == 0)
              sub_1BB4C1F6C();
          }
          else
          {
            sub_1BA7AAAE4(v174, v167);
            v176 = sub_1BA6E35A8(v169, v154);
            if ((v175 & 1) != (v177 & 1))
              goto LABEL_173;
            v171 = v176;
          }
          v242 = v156;
          v178 = v251;
          if ((v175 & 1) != 0)
          {
            v179 = (uint64_t *)(v251[7] + 24 * v171);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *v179 = v243;
            v179[1] = v163;
            v162 = v248;
            v179[2] = v248;
          }
          else
          {
            v251[(v171 >> 6) + 8] |= 1 << v171;
            v180 = (uint64_t *)(v178[6] + 16 * v171);
            *v180 = v169;
            v180[1] = v154;
            v181 = (uint64_t *)(v178[7] + 24 * v171);
            *v181 = v243;
            v181[1] = v163;
            v162 = v248;
            v181[2] = v248;
            v182 = v178[2];
            v50 = __OFADD__(v182, 1);
            v183 = v182 + 1;
            if (v50)
              goto LABEL_170;
            v178[2] = v183;
            swift_bridgeObjectRetain();
          }
          *v157 = (uint64_t)v178;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          goto LABEL_126;
        }
        sub_1BA6ED6EC((uint64_t)v253, (uint64_t)&qword_1ED3BE8A8, (uint64_t)&type metadata for FormatTransformKnobs, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BA4AD288);
        v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v30 = *(_QWORD *)(v223 + 8);
      }
LABEL_6:
      v31 = v267;
      if (v30 < v267)
        v31 = v30;
      if (v268)
        v32 = v30;
      else
        v32 = v31;
      v267 = v32;
      v268 = 0;
      v33 = v230;
LABEL_12:
      sub_1BA4A2E80(v33, (uint64_t (*)(_QWORD))type metadata accessor for FormatSlotItemCountLimit);
      sub_1BA810070(v231);
      v29 = v227;
LABEL_13:
      if (++v29 == v229)
      {
        swift_bridgeObjectRelease();
        goto LABEL_156;
      }
    }
    v242 = v233 & 0xC000000000000001;
    v226 = v233 + 32;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v240 = v65;
    v241 = (unint64_t)v64;
    v238 = v63;
    v239 = v62;
    v236 = v67;
    v237 = v66;
    v234 = v69;
    v235 = v61;
    v72 = 0;
LABEL_43:
    if (v242)
    {
      v73 = MEMORY[0x1BCCE4630](v72, v233);
      v50 = __OFADD__(v72, 1);
      v74 = v72 + 1;
      if (v50)
        goto LABEL_163;
    }
    else
    {
      v73 = *(_QWORD *)(v226 + 8 * v72);
      swift_retain();
      v50 = __OFADD__(v72, 1);
      v74 = v72 + 1;
      if (v50)
        goto LABEL_163;
    }
    if (qword_1ED3BE7F8 != -1)
      swift_once();
    v75 = qword_1ED4768D0;
    v77 = *(_QWORD *)(v73 + 16);
    v76 = *(_QWORD *)(v73 + 24);
    v78 = *(_QWORD *)(qword_1ED4768D0 + 24);
    swift_bridgeObjectRetain();
    sub_1BB86DD20();
    v79 = (uint64_t *)(v75 + 16);
    swift_beginAccess();
    v80 = *(_QWORD *)(v75 + 16);
    v81 = *(_QWORD *)(v80 + 16);
    v247 = v73;
    v248 = v74;
    if (v81)
    {
      swift_bridgeObjectRetain();
      v82 = sub_1BA6E35A8(v77, v76);
      if ((v83 & 1) != 0)
      {
        v84 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 24 * v82 + 16);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_64:
        swift_bridgeObjectRelease();
        sub_1BB86DD2C();
        swift_bridgeObjectRelease();
        v107 = *(_QWORD *)(v84 + 16);
        if (!v107)
          goto LABEL_42;
        v246 = v84;
        v108 = (uint64_t *)(v84 + 64);
        while (1)
        {
          v109 = *(v108 - 1);
          v110 = *v108;
          v111 = *(_BYTE *)(v109 + 32);
          v112 = v111 & 0x3F;
          v113 = (unint64_t)((1 << v111) + 63) >> 6;
          v114 = 8 * v113;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v115 = swift_bridgeObjectRetain();
          if (v112 <= 0xD || (v115 = swift_stdlib_isStackAllocationSafe(), (v115 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v115);
            bzero((char *)&v210 - ((v114 + 15) & 0x3FFFFFFFFFFFFFF0), v114);
            v116 = v113;
            v118 = v249;
            v117 = v250;
            v119 = sub_1BA6EB5B4((uint64_t)&v210 - ((v114 + 15) & 0x3FFFFFFFFFFFFFF0), v116, v109, (uint64_t)v249);
            swift_bridgeObjectRelease();
            v250 = v117;
            if (v117)
            {
LABEL_171:
              v209 = v250;
              swift_willThrow();

              __break(1u);
LABEL_172:

              MEMORY[0x1BCCE5C38](v118, -1, -1);
              __break(1u);
LABEL_173:
              sub_1BB874560();
              __break(1u);
              JUMPOUT(0x1BB5F7134);
            }
          }
          else
          {
            v118 = (void *)swift_slowAlloc();
            bzero(v118, v114);
            v120 = v113;
            v121 = v250;
            v119 = sub_1BA6EB5B4((uint64_t)v118, v120, v109, (uint64_t)v249);
            swift_bridgeObjectRelease();
            v250 = v121;
            if (v121)
              goto LABEL_172;
            MEMORY[0x1BCCE5C38](v118, -1, -1);
            v118 = v249;
          }
          v122 = sub_1BA6EB330(v119, v109);
          swift_release();
          if ((v122 & 1) != 0)
          {
            v123 = sub_1BA6EBD20((uint64_t)v118, v110);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v123 & 1) != 0)
            {
              v221 = *(_QWORD *)(v247 + 32);
LABEL_42:
              swift_release();
              swift_bridgeObjectRelease();
              v72 = v248;
              v64 = (void *)v241;
              v63 = v238;
              v62 = v239;
              if (v248 == v234)
              {
                swift_bridgeObjectRelease();

                swift_release();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                goto LABEL_149;
              }
              goto LABEL_43;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v108 += 5;
          if (!--v107)
            goto LABEL_42;
        }
      }
      swift_bridgeObjectRelease();
    }
    v243 = v78;
    swift_endAccess();
    v251 = (_QWORD *)v77;
    v252 = v76;
    swift_bridgeObjectRetain();
    sub_1BA6F2E38((uint64_t *)&v251, &v264);
    v85 = v265;
    v246 = v264;
    v86 = v266;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87 = v86;
    swift_bridgeObjectRetain();
    v88 = swift_isUniquelyReferenced_nonNull_native();
    v89 = v77;
    v90 = v88;
    v251 = (_QWORD *)*v79;
    v91 = (uint64_t)v251;
    *v79 = 0x8000000000000000;
    v92 = v89;
    v94 = sub_1BA6E35A8(v89, v76);
    v95 = *(_QWORD *)(v91 + 16);
    v96 = (v93 & 1) == 0;
    v97 = v95 + v96;
    if (__OFADD__(v95, v96))
      goto LABEL_165;
    v98 = v93;
    if (*(_QWORD *)(v91 + 24) < v97)
    {
      sub_1BA7AAAE4(v97, v90);
      v99 = sub_1BA6E35A8(v92, v76);
      if ((v98 & 1) != (v100 & 1))
        goto LABEL_173;
      v94 = v99;
      v101 = v251;
      if ((v98 & 1) == 0)
        goto LABEL_58;
LABEL_62:
      v106 = (uint64_t *)(v101[7] + 24 * v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v106 = v246;
      v106[1] = v85;
      v84 = v87;
      v106[2] = v87;
LABEL_63:
      *v79 = (uint64_t)v101;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      goto LABEL_64;
    }
    if ((v90 & 1) != 0)
    {
      v101 = v251;
      if ((v93 & 1) != 0)
        goto LABEL_62;
    }
    else
    {
      sub_1BB4C1F6C();
      v101 = v251;
      if ((v98 & 1) != 0)
        goto LABEL_62;
    }
LABEL_58:
    v101[(v94 >> 6) + 8] |= 1 << v94;
    v102 = (uint64_t *)(v101[6] + 16 * v94);
    *v102 = v92;
    v102[1] = v76;
    v103 = (uint64_t *)(v101[7] + 24 * v94);
    *v103 = v246;
    v103[1] = v85;
    v103[2] = v87;
    v104 = v101[2];
    v50 = __OFADD__(v104, 1);
    v105 = v104 + 1;
    if (v50)
      goto LABEL_169;
    v84 = v87;
    v101[2] = v105;
    swift_bridgeObjectRetain();
    goto LABEL_63;
  }
LABEL_156:
  swift_beginAccess();
  v204 = v210;
  if ((v270 & 1) == 0)
  {
    *v210 = v269;
    *((_BYTE *)v204 + 8) = 0;
  }
  swift_beginAccess();
  v206 = v211;
  v205 = v212;
  if ((v268 & 1) == 0)
  {
    v204[2] = v267;
    *((_BYTE *)v204 + 24) = 0;
  }
  v207 = (uint64_t)v204;
  v208 = v213;
  sub_1BA5193C4(v207, v213, (uint64_t (*)(_QWORD))type metadata accessor for FeedPersonalizationClusteringRules);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v206 + 56))(v208, 0, 1, v205);
}

uint64_t sub_1BB5F7150@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = *a1;
  sub_1BB3C1DA0();
  if (v4)
  {
    v10 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for FormatServiceOptions() + 52));
    v11 = sub_1BB8732F4();
    sub_1BA7AA598();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1BB87FC80;
    v14 = *a3;
    v13 = a3[1];
    v15 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
    v16 = sub_1BA6A2D8C();
    *(_QWORD *)(v12 + 64) = v16;
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v13;
    swift_bridgeObjectRetain();
    FormatSlotTransform.description.getter();
    *(_QWORD *)(v12 + 96) = v15;
    *(_QWORD *)(v12 + 104) = v16;
    *(_QWORD *)(v12 + 72) = v17;
    *(_QWORD *)(v12 + 80) = v18;
    sub_1BA4D9CE8(0, (unint64_t *)&qword_1ED3BA030);
    sub_1BB873E34();
    *(_QWORD *)(v12 + 136) = v15;
    *(_QWORD *)(v12 + 144) = v16;
    *(_QWORD *)(v12 + 112) = 0;
    *(_QWORD *)(v12 + 120) = 0xE000000000000000;
    sub_1BB86EF44("FormatService content slot %{public}@ failed to transform, transform=%{public}@, error=%{public}@", 97, 2, &dword_1BA493000, v10, v11, v12);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    v20 = v9;
    v32 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for FormatServiceOptions() + 52));
    sub_1BA7AA598();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1BB87D7A0;
    v23 = *a3;
    v22 = a3[1];
    *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
    v24 = sub_1BA6A2D8C();
    *(_QWORD *)(v21 + 64) = v24;
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v22;
    v25 = *(_QWORD *)(v8 + 16);
    v26 = MEMORY[0x1E0DEB418];
    v27 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v21 + 96) = MEMORY[0x1E0DEB418];
    *(_QWORD *)(v21 + 104) = v27;
    *(_QWORD *)(v21 + 72) = v25;
    v28 = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v21 + 136) = v26;
    *(_QWORD *)(v21 + 144) = v27;
    *(_QWORD *)(v21 + 112) = v28;
    swift_bridgeObjectRetain();
    FormatSlotTransform.description.getter();
    *(_QWORD *)(v21 + 176) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v21 + 184) = v24;
    *(_QWORD *)(v21 + 152) = v29;
    *(_QWORD *)(v21 + 160) = v30;
    v31 = sub_1BB87330C();
    sub_1BB86EF44("FormatService content slot %{public}@ did transform items from %ld to %ld, transform=%{public}@", 95, 2, &dword_1BA493000, v32, v31, v21);
    result = swift_bridgeObjectRelease();
    *a4 = v20;
  }
  return result;
}

uint64_t sub_1BB5F73B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for FormatContentSlotItemResolution();
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  MEMORY[0x1E0C80A78](v2);
  v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6C3EEC();
  result = sub_1BB873F48();
  v5 = 0;
  v36 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v29 = v7;
  v30 = (unint64_t)(v9 + 63) >> 6;
  v33 = result + 64;
  v31 = result;
  v12 = (uint64_t)v32;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v14 = v5;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    sub_1BA4C2DD8(*(_QWORD *)(v36 + 56) + *(_QWORD *)(v34 + 72) * i, v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
    v23 = *(_QWORD *)(v12 + *(int *)(v35 + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v31;
    v24 = (_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * i);
    *v24 = v21;
    v24[1] = v22;
    *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * i) = v23;
    v25 = *(_QWORD *)(result + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(_QWORD *)(result + 16) = v27;
    v5 = v14;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v16 >= v30)
      return result;
    v17 = *(_QWORD *)(v29 + 8 * v16);
    v18 = v5 + 1;
    if (!v17)
    {
      v18 = v5 + 2;
      if (v5 + 2 >= v30)
        return result;
      v17 = *(_QWORD *)(v29 + 8 * v18);
      if (!v17)
      {
        v18 = v5 + 3;
        if (v5 + 3 >= v30)
          return result;
        v17 = *(_QWORD *)(v29 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v11 = (v17 - 1) & v17;
    v14 = v18;
  }
  v19 = v5 + 4;
  if (v5 + 4 >= v30)
    return result;
  v17 = *(_QWORD *)(v29 + 8 * v19);
  if (v17)
  {
    v18 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v30)
      return result;
    v17 = *(_QWORD *)(v29 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1BB5F7630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for FormatContentSlotItemResolution();
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  MEMORY[0x1E0C80A78](v2);
  v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BA6C3CCC();
  result = sub_1BB873F48();
  v5 = 0;
  v36 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v29 = v7;
  v30 = (unint64_t)(v9 + 63) >> 6;
  v33 = result + 64;
  v31 = result;
  v12 = (uint64_t)v32;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v14 = v5;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    sub_1BA4C2DD8(*(_QWORD *)(v36 + 56) + *(_QWORD *)(v34 + 72) * i, v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
    v23 = *(_QWORD *)(v12 + *(int *)(v35 + 24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BA4A2E80(v12, (uint64_t (*)(_QWORD))type metadata accessor for FormatContentSlotItemResolution);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v31;
    v24 = (_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * i);
    *v24 = v21;
    v24[1] = v22;
    *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * i) = v23;
    v25 = *(_QWORD *)(result + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(_QWORD *)(result + 16) = v27;
    v5 = v14;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v16 >= v30)
      return result;
    v17 = *(_QWORD *)(v29 + 8 * v16);
    v18 = v5 + 1;
    if (!v17)
    {
      v18 = v5 + 2;
      if (v5 + 2 >= v30)
        return result;
      v17 = *(_QWORD *)(v29 + 8 * v18);
      if (!v17)
      {
        v18 = v5 + 3;
        if (v5 + 3 >= v30)
          return result;
        v17 = *(_QWORD *)(v29 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v11 = (v17 - 1) & v17;
    v14 = v18;
  }
  v19 = v5 + 4;
  if (v5 + 4 >= v30)
    return result;
  v17 = *(_QWORD *)(v29 + 8 * v19);
  if (v17)
  {
    v18 = v5 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v30)
      return result;
    v17 = *(_QWORD *)(v29 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t _s8NewsFeed17FormatContentSlotV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  if ((*a1 != *a2 || a1[1] != a2[1]) && (sub_1BB874398() & 1) == 0)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_1BA8880B0(v2, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1BA88285C(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_1BA887CA8(v3, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
    return 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1BA6EB330(v5, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

unint64_t sub_1BB5F79FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED3AB670;
  if (!qword_1ED3AB670)
  {
    sub_1BA5DBCDC(255, &qword_1ED39DBE8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
    result = MEMORY[0x1BCCE5B24](MEMORY[0x1E0DED188], v1);
    atomic_store(result, (unint64_t *)&qword_1ED3AB670);
  }
  return result;
}

unint64_t sub_1BB5F7A54(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1BA831760();
  a1[2] = sub_1BB2AC124();
  result = sub_1BB5F7A88();
  a1[3] = result;
  return result;
}

unint64_t sub_1BB5F7A88()
{
  unint64_t result;

  result = qword_1EF2C8C00;
  if (!qword_1EF2C8C00)
  {
    result = MEMORY[0x1BCCE5B24](&protocol conformance descriptor for FormatContentSlot, &type metadata for FormatContentSlot);
    atomic_store(result, (unint64_t *)&qword_1EF2C8C00);
  }
  return result;
}

uint64_t sub_1BB5F7ACC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5F7AD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1BB5F7B18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5F7B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1BB5F7B64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5F7B70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_1BB5F7BB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BB5F7BBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t destroy for FormatContentSlot()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FormatContentSlot(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FormatContentSlot(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FormatContentSlot(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FormatContentSlot()
{
  return &type metadata for FormatContentSlot;
}

uint64_t storeEnumTagSinglePayload for FormatContentSlot.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BB5F7E1C + 4 * byte_1BB931BBA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BB5F7E50 + 4 * byte_1BB931BB5[v4]))();
}

uint64_t sub_1BB5F7E50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F7E58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BB5F7E60);
  return result;
}

uint64_t sub_1BB5F7E6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BB5F7E74);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BB5F7E78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BB5F7E80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatContentSlot.CodingKeys()
{
  return &type metadata for FormatContentSlot.CodingKeys;
}

unint64_t sub_1BB5F7EA0()
{
  unint64_t result;

  result = qword_1EF2C8C08;
  if (!qword_1EF2C8C08)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB931D20, &type metadata for FormatContentSlot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF2C8C08);
  }
  return result;
}

uint64_t sub_1BB5F7EE4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1953459315 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F66736E617274 && a2 == 0xEA0000000000736DLL || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_1BB874398() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F7463656C6573 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BB874398();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_1BB5F8104()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED3CF6A8)
  {
    type metadata accessor for FormatContentSlotItemResolution();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED3CF6A8);
  }
}

unint64_t sub_1BB5F816C()
{
  unint64_t result;

  result = qword_1ED3CC360;
  if (!qword_1ED3CC360)
  {
    result = MEMORY[0x1BCCE5B24](&unk_1BB93727C, &type metadata for FormatSlotTransformBehavior);
    atomic_store(result, (unint64_t *)&qword_1ED3CC360);
  }
  return result;
}

char *sub_1BB5F81B0(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = (uint64_t)a2 + v6;
    v9 = sub_1BB86F43C();
    v10 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1BB5F824C(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_1BB86F43C();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1BB5F8294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1BB86F43C();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

